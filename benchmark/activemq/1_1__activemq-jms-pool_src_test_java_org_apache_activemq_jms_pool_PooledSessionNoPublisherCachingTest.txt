1:2a7c349: /**
1:2a7c349:  * Licensed to the Apache Software Foundation (ASF) under one or more
1:2a7c349:  * contributor license agreements.  See the NOTICE file distributed with
1:2a7c349:  * this work for additional information regarding copyright ownership.
1:2a7c349:  * The ASF licenses this file to You under the Apache License, Version 2.0
1:2a7c349:  * (the "License"); you may not use this file except in compliance with
1:2a7c349:  * the License.  You may obtain a copy of the License at
1:2a7c349:  *
1:2a7c349:  *      http://www.apache.org/licenses/LICENSE-2.0
1:2a7c349:  *
1:2a7c349:  * Unless required by applicable law or agreed to in writing, software
1:2a7c349:  * distributed under the License is distributed on an "AS IS" BASIS,
1:2a7c349:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:2a7c349:  * See the License for the specific language governing permissions and
1:2a7c349:  * limitations under the License.
1:2a7c349:  */
1:2a7c349: package org.apache.activemq.jms.pool;
2:2a7c349: 
1:2a7c349: import static org.junit.Assert.assertNotSame;
1:2a7c349: import static org.junit.Assert.fail;
1:2a7c349: 
1:2a7c349: import javax.jms.Queue;
1:2a7c349: import javax.jms.QueueSession;
1:2a7c349: import javax.jms.Session;
1:2a7c349: import javax.jms.Topic;
1:2a7c349: import javax.jms.TopicSession;
1:2a7c349: 
1:2a7c349: import org.apache.activemq.ActiveMQConnectionFactory;
1:2a7c349: import org.apache.activemq.broker.BrokerService;
1:2a7c349: import org.apache.activemq.broker.TransportConnector;
1:27ce49f: import org.junit.After;
1:2a7c349: import org.junit.Before;
1:2a7c349: import org.junit.Test;
1:2a7c349: 
1:e6597c4: public class PooledSessionNoPublisherCachingTest extends JmsPoolTestSupport {
1:2a7c349: 
1:2a7c349:     private ActiveMQConnectionFactory factory;
1:2a7c349:     private PooledConnectionFactory pooledFactory;
1:2a7c349:     private String connectionUri;
1:2a7c349: 
1:e6597c4:     @Override
1:2a7c349:     @Before
1:2a7c349:     public void setUp() throws Exception {
1:e6597c4:         super.setUp();
1:e6597c4: 
1:e6597c4:         brokerService = new BrokerService();
1:e6597c4:         brokerService.setPersistent(false);
1:e6597c4:         brokerService.setUseJmx(false);
1:e6597c4:         brokerService.setAdvisorySupport(false);
1:e6597c4:         brokerService.setSchedulerSupport(false);
1:e6597c4:         TransportConnector connector = brokerService.addConnector("tcp://localhost:0");
1:e6597c4:         brokerService.start();
1:e6597c4: 
1:2a7c349:         connectionUri = connector.getPublishableConnectString();
1:2a7c349:         factory = new ActiveMQConnectionFactory(connectionUri);
1:2a7c349:         pooledFactory = new PooledConnectionFactory();
1:2a7c349:         pooledFactory.setConnectionFactory(factory);
1:2a7c349:         pooledFactory.setMaxConnections(1);
1:2a7c349:         pooledFactory.setBlockIfSessionPoolIsFull(false);
1:2a7c349:         pooledFactory.setUseAnonymousProducers(false);
2:2a7c349:     }
1:2a7c349: 
1:27ce49f:     @Override
1:27ce49f:     @After
1:27ce49f:     public void tearDown() throws Exception {
1:27ce49f:         try {
1:27ce49f:             pooledFactory.stop();
1:27ce49f:         } catch (Exception ex) {
1:27ce49f:             // ignored
1:27ce49f:         }
1:27ce49f: 
1:27ce49f:         super.tearDown();
1:27ce49f:     }
1:27ce49f:         
1:e6597c4:     @Test(timeout = 60000)
1:2a7c349:     public void testMessageProducersAreUnique() throws Exception {
1:2a7c349:         PooledConnection connection = (PooledConnection) pooledFactory.createConnection();
1:2a7c349:         Session session = connection.createSession(false, Session.AUTO_ACKNOWLEDGE);
1:2a7c349: 
1:2a7c349:         Queue queue1 = session.createTemporaryQueue();
1:2a7c349:         Queue queue2 = session.createTemporaryQueue();
1:2a7c349: 
1:2a7c349:         PooledProducer producer1 = (PooledProducer) session.createProducer(queue1);
1:2a7c349:         PooledProducer producer2 = (PooledProducer) session.createProducer(queue2);
1:2a7c349: 
1:2a7c349:         assertNotSame(producer1.getMessageProducer(), producer2.getMessageProducer());
1:2a7c349:     }
1:2a7c349: 
1:e6597c4:     @Test(timeout = 60000)
1:2a7c349:     public void testThrowsWhenDestinationGiven() throws Exception {
1:2a7c349:         PooledConnection connection = (PooledConnection) pooledFactory.createConnection();
1:2a7c349:         Session session = connection.createSession(false, Session.AUTO_ACKNOWLEDGE);
1:2a7c349: 
1:2a7c349:         Queue queue1 = session.createTemporaryQueue();
1:2a7c349:         Queue queue2 = session.createTemporaryQueue();
1:2a7c349: 
1:2a7c349:         PooledProducer producer = (PooledProducer) session.createProducer(queue1);
1:2a7c349: 
1:2a7c349:         try {
1:2a7c349:             producer.send(queue2, session.createTextMessage());
1:2a7c349:             fail("Should only be able to send to queue 1");
1:2a7c349:         } catch (Exception ex) {
1:2a7c349:         }
1:2a7c349: 
1:2a7c349:         try {
1:2a7c349:             producer.send(null, session.createTextMessage());
1:2a7c349:             fail("Should only be able to send to queue 1");
1:2a7c349:         } catch (Exception ex) {
1:2a7c349:         }
1:2a7c349:     }
1:2a7c349: 
1:e6597c4:     @Test(timeout = 60000)
1:2a7c349:     public void testCreateTopicPublisher() throws Exception {
1:2a7c349:         PooledConnection connection = (PooledConnection) pooledFactory.createConnection();
1:2a7c349:         TopicSession session = connection.createTopicSession(false, Session.AUTO_ACKNOWLEDGE);
1:2a7c349: 
1:2a7c349:         Topic topic1 = session.createTopic("Topic-1");
1:2a7c349:         Topic topic2 = session.createTopic("Topic-2");
1:2a7c349: 
1:2a7c349:         PooledTopicPublisher publisher1 = (PooledTopicPublisher) session.createPublisher(topic1);
1:2a7c349:         PooledTopicPublisher publisher2 = (PooledTopicPublisher) session.createPublisher(topic2);
1:2a7c349: 
1:2a7c349:         assertNotSame(publisher1.getMessageProducer(), publisher2.getMessageProducer());
1:2a7c349:     }
1:2a7c349: 
1:e6597c4:     @Test(timeout = 60000)
1:2a7c349:     public void testQueueSender() throws Exception {
1:2a7c349:         PooledConnection connection = (PooledConnection) pooledFactory.createConnection();
1:2a7c349:         QueueSession session = connection.createQueueSession(false, Session.AUTO_ACKNOWLEDGE);
1:2a7c349: 
1:2a7c349:         Queue queue1 = session.createTemporaryQueue();
1:2a7c349:         Queue queue2 = session.createTemporaryQueue();
1:2a7c349: 
1:2a7c349:         PooledQueueSender sender1 = (PooledQueueSender) session.createSender(queue1);
1:2a7c349:         PooledQueueSender sender2 = (PooledQueueSender) session.createSender(queue2);
1:2a7c349: 
1:2a7c349:         assertNotSame(sender1.getMessageProducer(), sender2.getMessageProducer());
1:2a7c349:     }
1:2a7c349: }
============================================================================
author:Timothy Bish
-------------------------------------------------------------------------------
commit:27ce49f
/////////////////////////////////////////////////////////////////////////
1: import org.junit.After;
/////////////////////////////////////////////////////////////////////////
1:     @Override
1:     @After
1:     public void tearDown() throws Exception {
1:         try {
1:             pooledFactory.stop();
1:         } catch (Exception ex) {
1:             // ignored
1:         }
1: 
1:         super.tearDown();
1:     }
1:         
commit:e6597c4
/////////////////////////////////////////////////////////////////////////
1: public class PooledSessionNoPublisherCachingTest extends JmsPoolTestSupport {
1:     @Override
1:         super.setUp();
1: 
1:         brokerService = new BrokerService();
1:         brokerService.setPersistent(false);
1:         brokerService.setUseJmx(false);
1:         brokerService.setAdvisorySupport(false);
1:         brokerService.setSchedulerSupport(false);
1:         TransportConnector connector = brokerService.addConnector("tcp://localhost:0");
1:         brokerService.start();
1: 
/////////////////////////////////////////////////////////////////////////
1:     @Test(timeout = 60000)
/////////////////////////////////////////////////////////////////////////
1:     @Test(timeout = 60000)
/////////////////////////////////////////////////////////////////////////
1:     @Test(timeout = 60000)
/////////////////////////////////////////////////////////////////////////
1:     @Test(timeout = 60000)
commit:2a7c349
/////////////////////////////////////////////////////////////////////////
1: /**
1:  * Licensed to the Apache Software Foundation (ASF) under one or more
1:  * contributor license agreements.  See the NOTICE file distributed with
1:  * this work for additional information regarding copyright ownership.
1:  * The ASF licenses this file to You under the Apache License, Version 2.0
1:  * (the "License"); you may not use this file except in compliance with
1:  * the License.  You may obtain a copy of the License at
1:  *
1:  *      http://www.apache.org/licenses/LICENSE-2.0
1:  *
1:  * Unless required by applicable law or agreed to in writing, software
1:  * distributed under the License is distributed on an "AS IS" BASIS,
1:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:  * See the License for the specific language governing permissions and
1:  * limitations under the License.
1:  */
1: package org.apache.activemq.jms.pool;
1: 
1: import static org.junit.Assert.assertNotSame;
1: import static org.junit.Assert.fail;
1: 
1: import javax.jms.Queue;
1: import javax.jms.QueueSession;
1: import javax.jms.Session;
1: import javax.jms.Topic;
1: import javax.jms.TopicSession;
1: 
1: import org.apache.activemq.ActiveMQConnectionFactory;
1: import org.apache.activemq.broker.BrokerService;
1: import org.apache.activemq.broker.TransportConnector;
0: import org.junit.After;
1: import org.junit.Before;
1: import org.junit.Test;
1: 
0: public class PooledSessionNoPublisherCachingTest {
1: 
0:     private BrokerService broker;
1:     private ActiveMQConnectionFactory factory;
1:     private PooledConnectionFactory pooledFactory;
1:     private String connectionUri;
1: 
1:     @Before
1:     public void setUp() throws Exception {
0:         broker = new BrokerService();
0:         broker.setPersistent(false);
0:         broker.setUseJmx(false);
0:         TransportConnector connector = broker.addConnector("tcp://localhost:0");
0:         broker.start();
1:         connectionUri = connector.getPublishableConnectString();
1:         factory = new ActiveMQConnectionFactory(connectionUri);
1:         pooledFactory = new PooledConnectionFactory();
1:         pooledFactory.setConnectionFactory(factory);
1:         pooledFactory.setMaxConnections(1);
1:         pooledFactory.setBlockIfSessionPoolIsFull(false);
1:         pooledFactory.setUseAnonymousProducers(false);
1:     }
1: 
0:     @After
0:     public void tearDown() throws Exception {
0:         broker.stop();
0:         broker.waitUntilStopped();
0:         broker = null;
1:     }
1: 
0:     @Test
1:     public void testMessageProducersAreUnique() throws Exception {
1:         PooledConnection connection = (PooledConnection) pooledFactory.createConnection();
1:         Session session = connection.createSession(false, Session.AUTO_ACKNOWLEDGE);
1: 
1:         Queue queue1 = session.createTemporaryQueue();
1:         Queue queue2 = session.createTemporaryQueue();
1: 
1:         PooledProducer producer1 = (PooledProducer) session.createProducer(queue1);
1:         PooledProducer producer2 = (PooledProducer) session.createProducer(queue2);
1: 
1:         assertNotSame(producer1.getMessageProducer(), producer2.getMessageProducer());
1:     }
1: 
0:     @Test
1:     public void testThrowsWhenDestinationGiven() throws Exception {
1:         PooledConnection connection = (PooledConnection) pooledFactory.createConnection();
1:         Session session = connection.createSession(false, Session.AUTO_ACKNOWLEDGE);
1: 
1:         Queue queue1 = session.createTemporaryQueue();
1:         Queue queue2 = session.createTemporaryQueue();
1: 
1:         PooledProducer producer = (PooledProducer) session.createProducer(queue1);
1: 
1:         try {
1:             producer.send(queue2, session.createTextMessage());
1:             fail("Should only be able to send to queue 1");
1:         } catch (Exception ex) {
1:         }
1: 
1:         try {
1:             producer.send(null, session.createTextMessage());
1:             fail("Should only be able to send to queue 1");
1:         } catch (Exception ex) {
1:         }
1:     }
1: 
0:     @Test
1:     public void testCreateTopicPublisher() throws Exception {
1:         PooledConnection connection = (PooledConnection) pooledFactory.createConnection();
1:         TopicSession session = connection.createTopicSession(false, Session.AUTO_ACKNOWLEDGE);
1: 
1:         Topic topic1 = session.createTopic("Topic-1");
1:         Topic topic2 = session.createTopic("Topic-2");
1: 
1:         PooledTopicPublisher publisher1 = (PooledTopicPublisher) session.createPublisher(topic1);
1:         PooledTopicPublisher publisher2 = (PooledTopicPublisher) session.createPublisher(topic2);
1: 
1:         assertNotSame(publisher1.getMessageProducer(), publisher2.getMessageProducer());
1:     }
1: 
0:     @Test
1:     public void testQueueSender() throws Exception {
1:         PooledConnection connection = (PooledConnection) pooledFactory.createConnection();
1:         QueueSession session = connection.createQueueSession(false, Session.AUTO_ACKNOWLEDGE);
1: 
1:         Queue queue1 = session.createTemporaryQueue();
1:         Queue queue2 = session.createTemporaryQueue();
1: 
1:         PooledQueueSender sender1 = (PooledQueueSender) session.createSender(queue1);
1:         PooledQueueSender sender2 = (PooledQueueSender) session.createSender(queue2);
1: 
1:         assertNotSame(sender1.getMessageProducer(), sender2.getMessageProducer());
1:     }
1: }
============================================================================