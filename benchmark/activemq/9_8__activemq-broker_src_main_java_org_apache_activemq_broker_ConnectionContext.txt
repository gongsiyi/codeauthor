1:d29ca2a: /**
1:57b4941:  * Licensed to the Apache Software Foundation (ASF) under one or more
1:57b4941:  * contributor license agreements.  See the NOTICE file distributed with
1:57b4941:  * this work for additional information regarding copyright ownership.
1:57b4941:  * The ASF licenses this file to You under the Apache License, Version 2.0
1:57b4941:  * (the "License"); you may not use this file except in compliance with
1:57b4941:  * the License.  You may obtain a copy of the License at
5:d29ca2a:  *
1:230a86c:  *      http://www.apache.org/licenses/LICENSE-2.0
1:b0c2a40:  *
1:d29ca2a:  * Unless required by applicable law or agreed to in writing, software
1:d29ca2a:  * distributed under the License is distributed on an "AS IS" BASIS,
1:d29ca2a:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:d29ca2a:  * See the License for the specific language governing permissions and
1:d29ca2a:  * limitations under the License.
1:d29ca2a:  */
1:d29ca2a: package org.apache.activemq.broker;
1:a24133e: 
1:74a7a8b: import java.io.IOException;
1:9ef4259: import java.util.concurrent.ConcurrentMap;
1:b743552: import java.util.concurrent.atomic.AtomicBoolean;
1:d29ca2a: 
1:a640ff5: import org.apache.activemq.broker.region.MessageReference;
1:d29ca2a: import org.apache.activemq.command.ConnectionId;
1:794acb6: import org.apache.activemq.command.ConnectionInfo;
1:ecf89a6: import org.apache.activemq.command.TransactionId;
1:d29ca2a: import org.apache.activemq.command.WireFormatInfo;
1:64f3492: import org.apache.activemq.command.XATransactionId;
1:d29ca2a: import org.apache.activemq.filter.MessageEvaluationContext;
1:50d27e7: import org.apache.activemq.filter.NonCachedMessageEvaluationContext;
1:a640ff5: import org.apache.activemq.security.MessageAuthorizationPolicy;
1:d29ca2a: import org.apache.activemq.security.SecurityContext;
1:d4ccc50: import org.apache.activemq.state.ConnectionState;
1:d29ca2a: import org.apache.activemq.transaction.Transaction;
1:d29ca2a: 
1:d29ca2a: /**
1:d29ca2a:  * Used to hold context information needed to process requests sent to a broker.
1:9ef4259:  *
1:9ef4259:  *
1:d29ca2a:  */
1:d29ca2a: public class ConnectionContext {
1:230a86c: 
1:d29ca2a:     private Connection connection;
1:d29ca2a:     private Connector connector;
1:d29ca2a:     private Broker broker;
1:d29ca2a:     private boolean inRecoveryMode;
1:d29ca2a:     private Transaction transaction;
1:9ef4259:     private ConcurrentMap<TransactionId, Transaction> transactions;
1:d29ca2a:     private SecurityContext securityContext;
1:d29ca2a:     private ConnectionId connectionId;
1:d29ca2a:     private String clientId;
1:d29ca2a:     private String userName;
1:a6a6a70:     private boolean reconnect;
1:d29ca2a:     private WireFormatInfo wireFormatInfo;
1:d29ca2a:     private Object longTermStoreContext;
1:230a86c:     private boolean producerFlowControl = true;
1:a640ff5:     private MessageAuthorizationPolicy messageAuthorizationPolicy;
1:49ea0ed:     private boolean networkConnection;
1:25b6812:     private boolean faultTolerant;
1:b743552:     private final AtomicBoolean stopping = new AtomicBoolean();
1:3b0afd6:     private final MessageEvaluationContext messageEvaluationContext;
1:230a86c:     private boolean dontSendReponse;
1:230a86c:     private boolean clientMaster = true;
1:d4ccc50:     private ConnectionState connectionState;
1:64f3492:     private XATransactionId xid;
1:230a86c: 
1:794acb6:     public ConnectionContext() {
1:50d27e7:         this.messageEvaluationContext = new NonCachedMessageEvaluationContext();
1:4207bd9:     }
1:9ef4259: 
1:3b0afd6:     public ConnectionContext(MessageEvaluationContext messageEvaluationContext) {
1:9ef4259:         this.messageEvaluationContext=messageEvaluationContext;
1:3b0afd6:     }
1:9ef4259: 
1:794acb6:     public ConnectionContext(ConnectionInfo info) {
1:9ef4259:         this();
1:794acb6:         setClientId(info.getClientId());
1:794acb6:         setUserName(info.getUserName());
1:794acb6:         setConnectionId(info.getConnectionId());
1:25b6812:     }
1:9ef4259: 
1:a24133e:     public ConnectionContext copy() {
1:a24133e:         ConnectionContext rc = new ConnectionContext(this.messageEvaluationContext);
1:a24133e:         rc.connection = this.connection;
1:a24133e:         rc.connector = this.connector;
1:a24133e:         rc.broker = this.broker;
1:a24133e:         rc.inRecoveryMode = this.inRecoveryMode;
1:a24133e:         rc.transaction = this.transaction;
1:a24133e:         rc.transactions = this.transactions;
1:a24133e:         rc.securityContext = this.securityContext;
1:a24133e:         rc.connectionId = this.connectionId;
1:a24133e:         rc.clientId = this.clientId;
1:a24133e:         rc.userName = this.userName;
1:a6a6a70:         rc.reconnect = this.reconnect;
1:a24133e:         rc.wireFormatInfo = this.wireFormatInfo;
1:a24133e:         rc.longTermStoreContext = this.longTermStoreContext;
1:a24133e:         rc.producerFlowControl = this.producerFlowControl;
1:a24133e:         rc.messageAuthorizationPolicy = this.messageAuthorizationPolicy;
1:a24133e:         rc.networkConnection = this.networkConnection;
1:a24133e:         rc.faultTolerant = this.faultTolerant;
1:a24133e:         rc.stopping.set(this.stopping.get());
1:a24133e:         rc.dontSendReponse = this.dontSendReponse;
1:a24133e:         rc.clientMaster = this.clientMaster;
1:a24133e:         return rc;
1:a24133e:     }
1:a24133e: 
1:230a86c: 
1:d29ca2a:     public SecurityContext getSecurityContext() {
1:d29ca2a:         return securityContext;
1:d29ca2a:     }
1:4207bd9: 
1:d29ca2a:     public void setSecurityContext(SecurityContext subject) {
1:d29ca2a:         this.securityContext = subject;
1:094f007:         if (subject != null) {
1:094f007:             setUserName(subject.getUserName());
1:094f007:         } else {
1:094f007:             setUserName(null);
1:d29ca2a:         }
1:83a6eff:     }
1:d29ca2a: 
1:d29ca2a:     /**
1:d29ca2a:      * @return the broker being used.
1:d29ca2a:      */
1:d29ca2a:     public Broker getBroker() {
1:d29ca2a:         return broker;
1:d29ca2a:     }
1:d29ca2a: 
1:d29ca2a:     /**
1:d29ca2a:      * @param broker being used
1:d29ca2a:      */
1:d29ca2a:     public void setBroker(Broker broker) {
1:d29ca2a:         this.broker = broker;
1:d29ca2a:     }
1:d29ca2a: 
1:d29ca2a:     /**
1:d29ca2a:      * @return the connection being used
1:d29ca2a:      */
1:d29ca2a:     public Connection getConnection() {
1:d29ca2a:         return connection;
1:d29ca2a:     }
1:230a86c: 
1:d29ca2a:     /**
1:d29ca2a:      * @param connection being used
1:d29ca2a:      */
1:d29ca2a:     public void setConnection(Connection connection) {
1:d29ca2a:         this.connection = connection;
1:d29ca2a:     }
1:230a86c: 
1:d29ca2a:     /**
1:d29ca2a:      * @return the transaction being used.
1:d29ca2a:      */
1:d29ca2a:     public Transaction getTransaction() {
1:d29ca2a:         return transaction;
1:d29ca2a:     }
1:230a86c: 
1:d29ca2a:     /**
1:d29ca2a:      * @param transaction being used.
1:d29ca2a:      */
1:d29ca2a:     public void setTransaction(Transaction transaction) {
1:d29ca2a:         this.transaction = transaction;
1:d29ca2a:     }
1:d29ca2a: 
1:d29ca2a:     /**
1:d29ca2a:      * @return the connector being used.
1:d29ca2a:      */
1:d29ca2a:     public Connector getConnector() {
1:d29ca2a:         return connector;
1:d29ca2a:     }
1:d29ca2a: 
1:d29ca2a:     /**
1:d29ca2a:      * @param connector being used.
1:d29ca2a:      */
1:d29ca2a:     public void setConnector(Connector connector) {
1:d29ca2a:         this.connector = connector;
1:d29ca2a:     }
1:d29ca2a: 
1:a640ff5:     public MessageAuthorizationPolicy getMessageAuthorizationPolicy() {
1:a640ff5:         return messageAuthorizationPolicy;
1:83a6eff:     }
1:d29ca2a: 
1:d29ca2a:     /**
1:230a86c:      * Sets the policy used to decide if the current connection is authorized to
1:230a86c:      * consume a given message
1:d29ca2a:      */
1:a640ff5:     public void setMessageAuthorizationPolicy(MessageAuthorizationPolicy messageAuthorizationPolicy) {
1:a640ff5:         this.messageAuthorizationPolicy = messageAuthorizationPolicy;
1:83a6eff:     }
1:d29ca2a: 
1:83a6eff:     /**
1:5e05df1:      * @return true if in recovery mode.
1:83a6eff:      */
1:d29ca2a:     public boolean isInRecoveryMode() {
1:d29ca2a:         return inRecoveryMode;
1:d29ca2a:     }
1:d29ca2a: 
1:d29ca2a:     public void setInRecoveryMode(boolean inRecoveryMode) {
1:d29ca2a:         this.inRecoveryMode = inRecoveryMode;
1:d29ca2a:     }
1:d29ca2a: 
1:9ef4259:     public ConcurrentMap<TransactionId, Transaction> getTransactions() {
1:d29ca2a:         return transactions;
1:d29ca2a:     }
1:230a86c: 
1:9ef4259:     public void setTransactions(ConcurrentMap<TransactionId, Transaction> transactions) {
1:d29ca2a:         this.transactions = transactions;
1:d29ca2a:     }
1:d29ca2a: 
1:d29ca2a:     public boolean isInTransaction() {
1:230a86c:         return transaction != null;
1:d29ca2a:     }
1:d29ca2a: 
1:d29ca2a:     public String getClientId() {
1:d29ca2a:         return clientId;
1:d29ca2a:     }
1:d29ca2a: 
1:d29ca2a:     public void setClientId(String clientId) {
1:d29ca2a:         this.clientId = clientId;
1:d29ca2a:     }
1:d29ca2a: 
1:a6a6a70:     public boolean isReconnect() {
1:a6a6a70:         return reconnect;
1:d29ca2a:     }
1:d29ca2a: 
1:a6a6a70:     public void setReconnect(boolean reconnect) {
1:a6a6a70:         this.reconnect = reconnect;
1:d29ca2a:     }
1:d29ca2a: 
1:d29ca2a:     public WireFormatInfo getWireFormatInfo() {
1:d29ca2a:         return wireFormatInfo;
1:d29ca2a:     }
1:d29ca2a: 
1:d29ca2a:     public void setWireFormatInfo(WireFormatInfo wireFormatInfo) {
1:d29ca2a:         this.wireFormatInfo = wireFormatInfo;
1:d29ca2a:     }
1:d29ca2a: 
1:d29ca2a:     public ConnectionId getConnectionId() {
1:d29ca2a:         return connectionId;
1:d29ca2a:     }
1:d29ca2a: 
1:d29ca2a:     public void setConnectionId(ConnectionId connectionId) {
1:d29ca2a:         this.connectionId = connectionId;
1:d29ca2a:     }
1:d29ca2a: 
1:d29ca2a:     public String getUserName() {
1:d29ca2a:         return userName;
1:d29ca2a:     }
1:d29ca2a: 
1:094f007:     protected void setUserName(String userName) {
1:d29ca2a:         this.userName = userName;
1:d29ca2a:     }
1:d29ca2a: 
1:d29ca2a:     public MessageEvaluationContext getMessageEvaluationContext() {
1:d29ca2a:         return messageEvaluationContext;
1:d29ca2a:     }
1:d29ca2a: 
1:d29ca2a:     public Object getLongTermStoreContext() {
1:d29ca2a:         return longTermStoreContext;
1:d29ca2a:     }
1:d29ca2a: 
1:d29ca2a:     public void setLongTermStoreContext(Object longTermStoreContext) {
1:d29ca2a:         this.longTermStoreContext = longTermStoreContext;
1:d29ca2a:     }
1:d29ca2a: 
1:d29ca2a:     public boolean isProducerFlowControl() {
1:d29ca2a:         return producerFlowControl;
1:d29ca2a:     }
1:d29ca2a: 
1:d29ca2a:     public void setProducerFlowControl(boolean disableProducerFlowControl) {
1:d29ca2a:         this.producerFlowControl = disableProducerFlowControl;
1:d29ca2a:     }
1:d29ca2a: 
1:a640ff5:     public boolean isAllowedToConsume(MessageReference n) throws IOException {
1:a640ff5:         if (messageAuthorizationPolicy != null) {
1:a640ff5:             return messageAuthorizationPolicy.isAllowedToConsume(this, n.getMessage());
1:d29ca2a:         }
1:a640ff5:         return true;
1:5b53083:     }
1:5b53083: 
1:230a86c:     public synchronized boolean isNetworkConnection() {
1:230a86c:         return networkConnection;
1:230a86c:     }
1:5b53083: 
1:230a86c:     public synchronized void setNetworkConnection(boolean networkConnection) {
1:230a86c:         this.networkConnection = networkConnection;
1:230a86c:     }
1:d29ca2a: 
1:230a86c:     public AtomicBoolean getStopping() {
1:230a86c:         return stopping;
1:230a86c:     }
1:4207bd9: 
1:230a86c:     public void setDontSendReponse(boolean b) {
1:230a86c:         this.dontSendReponse = b;
1:230a86c:     }
1:230a86c: 
1:230a86c:     public boolean isDontSendReponse() {
1:230a86c:         return dontSendReponse;
1:230a86c:     }
1:230a86c: 
1:83a6eff:     /**
1:83a6eff:      * @return the clientMaster
1:83a6eff:      */
1:230a86c:     public boolean isClientMaster() {
1:83a6eff:         return this.clientMaster;
1:4207bd9:     }
1:d29ca2a: 
1:83a6eff:     /**
1:83a6eff:      * @param clientMaster the clientMaster to set
1:83a6eff:      */
1:230a86c:     public void setClientMaster(boolean clientMaster) {
1:230a86c:         this.clientMaster = clientMaster;
1:230a86c:     }
1:d29ca2a: 
1:25b6812:     public boolean isFaultTolerant() {
1:25b6812:         return faultTolerant;
1:5b53083:     }
1:d29ca2a: 
1:25b6812:     public void setFaultTolerant(boolean faultTolerant) {
1:25b6812:         this.faultTolerant = faultTolerant;
1:25b6812:     }
1:a24133e: 
1:d4ccc50:     public void setConnectionState(ConnectionState connectionState) {
1:d4ccc50:         this.connectionState = connectionState;
1:d4ccc50:     }
1:d29ca2a: 
1:d4ccc50:     public ConnectionState getConnectionState() {
1:d4ccc50:         return this.connectionState;
1:d4ccc50:     }
1:d29ca2a: 
1:64f3492:     public void setXid(XATransactionId id) {
1:64f3492:         this.xid = id;
1:64f3492:     }
1:d29ca2a: 
1:64f3492:     public XATransactionId getXid() {
1:64f3492:         return xid;
1:64f3492:     }
1:16c1627: 
1:16c1627:     public boolean isAllowLinkStealing(){
1:16c1627:        return connector != null && connector.isAllowLinkStealing();
1:16c1627:     }
1:83a6eff: }
============================================================================
author:gtully
-------------------------------------------------------------------------------
commit:50d27e7
/////////////////////////////////////////////////////////////////////////
1: import org.apache.activemq.filter.NonCachedMessageEvaluationContext;
/////////////////////////////////////////////////////////////////////////
1:         this.messageEvaluationContext = new NonCachedMessageEvaluationContext();
author:Hadrian Zbarcea
-------------------------------------------------------------------------------
commit:d54d046
author:Timothy Bish
-------------------------------------------------------------------------------
commit:5e05df1
/////////////////////////////////////////////////////////////////////////
1:      * @return true if in recovery mode.
commit:9ef4259
/////////////////////////////////////////////////////////////////////////
1: import java.util.concurrent.ConcurrentMap;
/////////////////////////////////////////////////////////////////////////
1:  *
1:  *
/////////////////////////////////////////////////////////////////////////
1:     private ConcurrentMap<TransactionId, Transaction> transactions;
/////////////////////////////////////////////////////////////////////////
0:         this.messageEvaluationContext = new MessageEvaluationContext();
1: 
1:         this.messageEvaluationContext=messageEvaluationContext;
1: 
1:         this();
1: 
/////////////////////////////////////////////////////////////////////////
1:     public ConcurrentMap<TransactionId, Transaction> getTransactions() {
1:     public void setTransactions(ConcurrentMap<TransactionId, Transaction> transactions) {
author:Rob Davies
-------------------------------------------------------------------------------
commit:16c1627
/////////////////////////////////////////////////////////////////////////
1: 
1:     public boolean isAllowLinkStealing(){
1:        return connector != null && connector.isAllowLinkStealing();
1:     }
author:Hiram R. Chirino
-------------------------------------------------------------------------------
commit:30f531d
/////////////////////////////////////////////////////////////////////////
commit:58aca86
commit:b0c2a40
/////////////////////////////////////////////////////////////////////////
1:  * 
commit:a24133e
/////////////////////////////////////////////////////////////////////////
1:     
1:     public ConnectionContext copy() {
1:         ConnectionContext rc = new ConnectionContext(this.messageEvaluationContext);
1:         rc.connection = this.connection;
1:         rc.connector = this.connector;
1:         rc.broker = this.broker;
1:         rc.inRecoveryMode = this.inRecoveryMode;
1:         rc.transaction = this.transaction;
1:         rc.transactions = this.transactions;
1:         rc.securityContext = this.securityContext;
1:         rc.connectionId = this.connectionId;
1:         rc.clientId = this.clientId;
1:         rc.userName = this.userName;
0:         rc.haAware = this.haAware;
1:         rc.wireFormatInfo = this.wireFormatInfo;
1:         rc.longTermStoreContext = this.longTermStoreContext;
1:         rc.producerFlowControl = this.producerFlowControl;
1:         rc.messageAuthorizationPolicy = this.messageAuthorizationPolicy;
1:         rc.networkConnection = this.networkConnection;
1:         rc.faultTolerant = this.faultTolerant;
1:         rc.stopping.set(this.stopping.get());
1:         rc.dontSendReponse = this.dontSendReponse;
1:         rc.clientMaster = this.clientMaster;
1:         return rc;
1:     }
1: 
/////////////////////////////////////////////////////////////////////////
1: 
commit:ecf89a6
/////////////////////////////////////////////////////////////////////////
1: import org.apache.activemq.command.TransactionId;
/////////////////////////////////////////////////////////////////////////
0:     private ConcurrentHashMap<TransactionId, Transaction> transactions;
/////////////////////////////////////////////////////////////////////////
0:     public ConcurrentHashMap<TransactionId, Transaction> getTransactions() {
0:     public void setTransactions(ConcurrentHashMap<TransactionId, Transaction> transactions) {
commit:74a7a8b
/////////////////////////////////////////////////////////////////////////
1: import java.io.IOException;
/////////////////////////////////////////////////////////////////////////
commit:230a86c
/////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////
1:  *      http://www.apache.org/licenses/LICENSE-2.0
/////////////////////////////////////////////////////////////////////////
1: 
/////////////////////////////////////////////////////////////////////////
1:     private boolean producerFlowControl = true;
1:     private boolean dontSendReponse;
1:     private boolean clientMaster = true;
1: 
1: 
/////////////////////////////////////////////////////////////////////////
1: 
1: 
1: 
/////////////////////////////////////////////////////////////////////////
1:      * Sets the policy used to decide if the current connection is authorized to
1:      * consume a given message
/////////////////////////////////////////////////////////////////////////
1: 
1:         return transaction != null;
/////////////////////////////////////////////////////////////////////////
1:     public synchronized boolean isNetworkConnection() {
1:         return networkConnection;
1:     }
1:     public synchronized void setNetworkConnection(boolean networkConnection) {
1:         this.networkConnection = networkConnection;
1:     }
1:     public AtomicBoolean getStopping() {
1:         return stopping;
1:     }
1:     public void setDontSendReponse(boolean b) {
1:         this.dontSendReponse = b;
1:     }
1: 
1:     public boolean isDontSendReponse() {
1:         return dontSendReponse;
1:     }
1: 
0:     public boolean isSlave() {
0:         return (this.broker != null && this.broker.getBrokerService().isSlave()) || !this.clientMaster;
1:     public boolean isClientMaster() {
1:     public void setClientMaster(boolean clientMaster) {
1:         this.clientMaster = clientMaster;
1:     }
commit:ea74731
/////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////
commit:4207bd9
/////////////////////////////////////////////////////////////////////////
0: 	private boolean dontSendReponse;
/////////////////////////////////////////////////////////////////////////
1: 	}
1: 
0: 	public void setDontSendReponse(boolean b) {
0: 		this.dontSendReponse=b;		
1: 	}
1: 
0: 	public boolean isDontSendReponse() {
0: 		return dontSendReponse;
commit:86cbdfd
/////////////////////////////////////////////////////////////////////////
0: import java.util.concurrent.ConcurrentHashMap;
0: import java.util.concurrent.atomic.AtomicInteger;
commit:5b53083
/////////////////////////////////////////////////////////////////////////
0: import edu.emory.mathcs.backport.java.util.concurrent.atomic.AtomicInteger;
/////////////////////////////////////////////////////////////////////////
0:     private AtomicInteger referenceCounter = new AtomicInteger();
/////////////////////////////////////////////////////////////////////////
0: 	public int incrementReference() {
0: 		return referenceCounter.incrementAndGet();
1: 	}
1: 	
0: 	public int decrementReference() {
0: 		return referenceCounter.decrementAndGet();
1: 	}
1: 
commit:57b4941
/////////////////////////////////////////////////////////////////////////
1:  * Licensed to the Apache Software Foundation (ASF) under one or more
1:  * contributor license agreements.  See the NOTICE file distributed with
1:  * this work for additional information regarding copyright ownership.
1:  * The ASF licenses this file to You under the Apache License, Version 2.0
1:  * (the "License"); you may not use this file except in compliance with
1:  * the License.  You may obtain a copy of the License at
commit:48b4869
/////////////////////////////////////////////////////////////////////////
0:  * Copyright 2005-2006 The Apache Software Foundation
commit:d29ca2a
/////////////////////////////////////////////////////////////////////////
1: /**
1:  *
0:  * Copyright 2004 The Apache Software Foundation
1:  *
0:  * Licensed under the Apache License, Version 2.0 (the "License");
0:  * you may not use this file except in compliance with the License.
0:  * You may obtain a copy of the License at
1:  *
0:  * http://www.apache.org/licenses/LICENSE-2.0
1:  *
1:  * Unless required by applicable law or agreed to in writing, software
1:  * distributed under the License is distributed on an "AS IS" BASIS,
1:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:  * See the License for the specific language governing permissions and
1:  * limitations under the License.
1:  */
1: package org.apache.activemq.broker;
1: 
0: import edu.emory.mathcs.backport.java.util.concurrent.ConcurrentHashMap;
1: 
1: import org.apache.activemq.command.ConnectionId;
1: import org.apache.activemq.command.WireFormatInfo;
1: import org.apache.activemq.filter.MessageEvaluationContext;
1: import org.apache.activemq.security.SecurityContext;
1: import org.apache.activemq.transaction.Transaction;
1: 
1: /**
1:  * Used to hold context information needed to process requests sent to a broker.
1:  * 
0:  * @version $Revision: 1.5 $
1:  */
1: public class ConnectionContext {
1:     
1:     private Connection connection;
1:     private Connector connector;
1:     private Broker broker;
1:     private boolean inRecoveryMode;
1:     private Transaction transaction;
0:     private ConcurrentHashMap transactions;
1:     private SecurityContext securityContext;
1:     private ConnectionId connectionId;
1:     private String clientId;
1:     private String userName;
0:     private boolean haAware;
1:     private WireFormatInfo wireFormatInfo;
1:     private Object longTermStoreContext;
0:     private boolean producerFlowControl=true;
1:     
0:     private final MessageEvaluationContext messageEvaluationContext = new MessageEvaluationContext();
1:     
1:     public SecurityContext getSecurityContext() {
1:         return securityContext;
1:     }
1: 
1:     public void setSecurityContext(SecurityContext subject) {
1:         this.securityContext = subject;
1:     }
1: 
1:     /**
1:      * @return the broker being used.
1:      */
1:     public Broker getBroker() {
1:         return broker;
1:     }
1: 
1:     /**
1:      * @param broker being used
1:      */
1:     public void setBroker(Broker broker) {
1:         this.broker = broker;
1:     }
1: 
1:     /**
1:      * @return the connection being used
1:      */
1:     public Connection getConnection() {
1:         return connection;
1:     }
1:     
1:     /**
1:      * @param connection being used
1:      */
1:     public void setConnection(Connection connection) {
1:         this.connection = connection;
1:     }
1:     
1:     /**
1:      * @return the transaction being used.
1:      */
1:     public Transaction getTransaction() {
1:         return transaction;
1:     }
1:     
1:     /**
1:      * @param transaction being used.
1:      */
1:     public void setTransaction(Transaction transaction) {
1:         this.transaction = transaction;
1:     }
1: 
1:     /**
1:      * @return the connector being used.
1:      */
1:     public Connector getConnector() {
1:         return connector;
1:     }
1: 
1:     /**
1:      * @param connector being used.
1:      */
1:     public void setConnector(Connector connector) {
1:         this.connector = connector;
1:     }
1: 
1:     /**
0:      * @return
1:      */
1:     public boolean isInRecoveryMode() {
1:         return inRecoveryMode;
1:     }
1: 
1:     public void setInRecoveryMode(boolean inRecoveryMode) {
1:         this.inRecoveryMode = inRecoveryMode;
1:     }
1: 
0:     public ConcurrentHashMap getTransactions() {
1:         return transactions;
1:     }
1:     
0:     public void setTransactions(ConcurrentHashMap transactions) {
1:         this.transactions = transactions;
1:     }
1: 
1:     public boolean isInTransaction() {
0:         return transaction!=null;
1:     }
1: 
1:     public String getClientId() {
1:         return clientId;
1:     }
1: 
1:     public void setClientId(String clientId) {
1:         this.clientId = clientId;
1:     }
1: 
0:     public boolean isHaAware() {
0:         return haAware;
1:     }
1: 
0:     public void setHaAware(boolean haAware) {
0:         this.haAware = haAware;
1:     }
1: 
1:     public WireFormatInfo getWireFormatInfo() {
1:         return wireFormatInfo;
1:     }
1: 
1:     public void setWireFormatInfo(WireFormatInfo wireFormatInfo) {
1:         this.wireFormatInfo = wireFormatInfo;
1:     }
1: 
1:     public ConnectionId getConnectionId() {
1:         return connectionId;
1:     }
1: 
1:     public void setConnectionId(ConnectionId connectionId) {
1:         this.connectionId = connectionId;
1:     }
1: 
1:     public String getUserName() {
1:         return userName;
1:     }
1: 
0:     public void setUserName(String userName) {
1:         this.userName = userName;
1:     }
1: 
1:     public MessageEvaluationContext getMessageEvaluationContext() {
1:         return messageEvaluationContext;
1:     }
1: 
1:     public Object getLongTermStoreContext() {
1:         return longTermStoreContext;
1:     }
1: 
1:     public void setLongTermStoreContext(Object longTermStoreContext) {
1:         this.longTermStoreContext = longTermStoreContext;
1:     }
1: 
1:     public boolean isProducerFlowControl() {
1:         return producerFlowControl;
1:     }
1: 
1:     public void setProducerFlowControl(boolean disableProducerFlowControl) {
1:         this.producerFlowControl = disableProducerFlowControl;
1:     }
1: 
1: }
author:Gary Tully
-------------------------------------------------------------------------------
commit:64f3492
/////////////////////////////////////////////////////////////////////////
1: import org.apache.activemq.command.XATransactionId;
/////////////////////////////////////////////////////////////////////////
1:     private XATransactionId xid;
/////////////////////////////////////////////////////////////////////////
0: 
1:     public void setXid(XATransactionId id) {
1:         this.xid = id;
1:     }
0: 
1:     public XATransactionId getXid() {
1:         return xid;
1:     }
commit:d4ccc50
/////////////////////////////////////////////////////////////////////////
1: import org.apache.activemq.state.ConnectionState;
/////////////////////////////////////////////////////////////////////////
1:     private ConnectionState connectionState;
/////////////////////////////////////////////////////////////////////////
1:     public void setConnectionState(ConnectionState connectionState) {
1:         this.connectionState = connectionState;
1:     }
0: 
1:     public ConnectionState getConnectionState() {
1:         return this.connectionState;
1:     }
commit:a6a6a70
/////////////////////////////////////////////////////////////////////////
1:     private boolean reconnect;
/////////////////////////////////////////////////////////////////////////
1:         rc.reconnect = this.reconnect;
/////////////////////////////////////////////////////////////////////////
1:     public boolean isReconnect() {
1:         return reconnect;
1:     public void setReconnect(boolean reconnect) {
1:         this.reconnect = reconnect;
author:Robert Davies
-------------------------------------------------------------------------------
commit:3b0afd6
/////////////////////////////////////////////////////////////////////////
1:     private final MessageEvaluationContext messageEvaluationContext;
0:     	this.messageEvaluationContext = new MessageEvaluationContext();
0:     
1:     public ConnectionContext(MessageEvaluationContext messageEvaluationContext) {
0:     	this.messageEvaluationContext=messageEvaluationContext;
1:     }
0:     
0:     	this();
commit:25b6812
/////////////////////////////////////////////////////////////////////////
1:     private boolean faultTolerant;
/////////////////////////////////////////////////////////////////////////
0: 
1:     public boolean isFaultTolerant() {
1:         return faultTolerant;
1:     }
0: 
1:     public void setFaultTolerant(boolean faultTolerant) {
1:         this.faultTolerant = faultTolerant;
1:     }
commit:83a6eff
/////////////////////////////////////////////////////////////////////////
0:     private boolean clientMaster=true;
/////////////////////////////////////////////////////////////////////////
1: 	}
0: 
0:     
1:     /**
0:      * @return the slave
1:      */
0:     public boolean isSlave(){
0:         return (this.broker!=null&&this.broker.getBrokerService().isSlave())||!this.clientMaster;
1:     }
0: 
0:     
1:     /**
1:      * @return the clientMaster
1:      */
0:     public boolean isClientMaster(){
1:         return this.clientMaster;
1:     }
0: 
0:     
1:     /**
1:      * @param clientMaster the clientMaster to set
1:      */
0:     public void setClientMaster(boolean clientMaster){
0:         this.clientMaster=clientMaster;
1:     }	
author:Jonas B. Lim
-------------------------------------------------------------------------------
commit:b743552
/////////////////////////////////////////////////////////////////////////
1: import java.util.concurrent.atomic.AtomicBoolean;
/////////////////////////////////////////////////////////////////////////
1:     private final AtomicBoolean stopping = new AtomicBoolean();
/////////////////////////////////////////////////////////////////////////
0: 	
0: 	public AtomicBoolean getStopping() {
0: 		return stopping;
0: 	}	
0: 	
commit:49ea0ed
/////////////////////////////////////////////////////////////////////////
1:     private boolean networkConnection;
/////////////////////////////////////////////////////////////////////////
0: 	public synchronized boolean isNetworkConnection() {
0: 		return networkConnection;
0: 	}
0: 
0: 	public synchronized void setNetworkConnection(boolean networkConnection) {
0: 		this.networkConnection = networkConnection;
0: 	}	
author:James Strachan
-------------------------------------------------------------------------------
commit:094f007
/////////////////////////////////////////////////////////////////////////
1:         if (subject != null) {
1:             setUserName(subject.getUserName());
1:         } else {
1:             setUserName(null);
0:         }
/////////////////////////////////////////////////////////////////////////
1:     protected void setUserName(String userName) {
commit:794acb6
/////////////////////////////////////////////////////////////////////////
1: import org.apache.activemq.command.ConnectionInfo;
/////////////////////////////////////////////////////////////////////////
1:     public ConnectionContext() {
0:     }
0:     
1:     public ConnectionContext(ConnectionInfo info) {
1:         setClientId(info.getClientId());
1:         setUserName(info.getUserName());
1:         setConnectionId(info.getConnectionId());
0:     }
0: 
commit:a640ff5
/////////////////////////////////////////////////////////////////////////
1: import org.apache.activemq.broker.region.MessageReference;
1: import org.apache.activemq.security.MessageAuthorizationPolicy;
0: import java.io.IOException;
0: 
/////////////////////////////////////////////////////////////////////////
1:     private MessageAuthorizationPolicy messageAuthorizationPolicy;
/////////////////////////////////////////////////////////////////////////
0:     
1:     public MessageAuthorizationPolicy getMessageAuthorizationPolicy() {
1:         return messageAuthorizationPolicy;
0:     }
0: 
0:     /**
0:      * Sets the policy used to decide if the current connection is authorized to consume
0:      * a given message
0:      */
1:     public void setMessageAuthorizationPolicy(MessageAuthorizationPolicy messageAuthorizationPolicy) {
1:         this.messageAuthorizationPolicy = messageAuthorizationPolicy;
0:     }
0: 
/////////////////////////////////////////////////////////////////////////
1:     public boolean isAllowedToConsume(MessageReference n) throws IOException {
1:         if (messageAuthorizationPolicy != null) {
1:             return messageAuthorizationPolicy.isAllowedToConsume(this, n.getMessage());
0:         }
1:         return true;
0:     }
0: 
============================================================================