1:d29ca2a: /**
1:57b4941:  * Licensed to the Apache Software Foundation (ASF) under one or more
1:57b4941:  * contributor license agreements.  See the NOTICE file distributed with
1:57b4941:  * this work for additional information regarding copyright ownership.
1:57b4941:  * The ASF licenses this file to You under the Apache License, Version 2.0
1:57b4941:  * (the "License"); you may not use this file except in compliance with
1:57b4941:  * the License.  You may obtain a copy of the License at
3:d29ca2a:  *
1:230a86c:  *      http://www.apache.org/licenses/LICENSE-2.0
1:d29ca2a:  *
1:d29ca2a:  * Unless required by applicable law or agreed to in writing, software
1:d29ca2a:  * distributed under the License is distributed on an "AS IS" BASIS,
1:d29ca2a:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:d29ca2a:  * See the License for the specific language governing permissions and
1:d29ca2a:  * limitations under the License.
1:d29ca2a:  */
1:d29ca2a: package org.apache.activemq;
7:d29ca2a: 
1:d29ca2a: import javax.jms.JMSException;
1:d29ca2a: import javax.jms.Session;
1:d29ca2a: 
1:d29ca2a: import junit.framework.TestCase;
1:d29ca2a: 
1:d29ca2a: /**
1:b0c2a40:  * 
1:d29ca2a:  */
1:d29ca2a: public class ConnectionCleanupTest extends TestCase {
1:d29ca2a: 
1:d29ca2a:     private ActiveMQConnection connection;
1:d29ca2a: 
1:d29ca2a:     protected void setUp() throws Exception {
1:b29eb38:         ActiveMQConnectionFactory factory = new ActiveMQConnectionFactory("vm://localhost?broker.persistent=false");
1:230a86c:         connection = (ActiveMQConnection)factory.createConnection();
2:d29ca2a:     }
1:d29ca2a: 
1:d29ca2a:     /**
1:d29ca2a:      * @see junit.framework.TestCase#tearDown()
1:d29ca2a:      */
1:d29ca2a:     protected void tearDown() throws Exception {
1:d29ca2a:         connection.close();
1:86cbdfd:     }
1:d29ca2a: 
1:d29ca2a:     /**
1:d29ca2a:      * @throws JMSException
1:d29ca2a:      */
1:d29ca2a:     public void testChangeClientID() throws JMSException {
1:230a86c: 
1:d29ca2a:         connection.setClientID("test");
1:933eb2f:         connection.createSession(false, Session.AUTO_ACKNOWLEDGE);
1:230a86c: 
1:d29ca2a:         try {
1:d29ca2a:             connection.setClientID("test");
1:b29eb38:             fail("Should have received JMSException");
1:230a86c:         } catch (JMSException e) {
1:d29ca2a:         }
1:230a86c: 
1:b29eb38:         connection.doCleanup(true);
1:b29eb38: 
1:d29ca2a:         connection.setClientID("test");
1:b29eb38: 
1:d29ca2a:         connection.createSession(false, Session.AUTO_ACKNOWLEDGE);
1:b29eb38: 
1:d29ca2a:         try {
1:d29ca2a:             connection.setClientID("test");
1:b29eb38:             fail("Should have received JMSException");
1:b29eb38:         } catch (JMSException e) {
1:b29eb38:         }
1:230a86c: 
1:b29eb38:     }
1:230a86c: 
1:b29eb38:     public void testChangeClientIDDenied() throws JMSException {
1:b29eb38: 
1:b29eb38:         connection.setClientID("test");
1:b29eb38:         connection.createSession(false, Session.AUTO_ACKNOWLEDGE);
1:b29eb38: 
1:b29eb38:         try {
1:b29eb38:             connection.setClientID("test");
1:b29eb38:             fail("Should have received JMSException");
1:b29eb38:         } catch (JMSException e) {
1:b29eb38:         }
1:b29eb38: 
1:b29eb38:         connection.cleanup();
1:b29eb38: 
1:b29eb38:         try {
1:b29eb38:             connection.setClientID("test");
1:b29eb38:             fail("Should have received JMSException");
1:b29eb38:         } catch (JMSException e) {
1:b29eb38:         }
1:b29eb38: 
1:b29eb38:         connection.createSession(false, Session.AUTO_ACKNOWLEDGE);
1:b29eb38: 
1:b29eb38:         try {
1:b29eb38:             connection.setClientID("test");
1:b29eb38:             fail("Should have received JMSException");
1:230a86c:         } catch (JMSException e) {
1:d29ca2a:         }
1:d29ca2a:     }
1:d29ca2a: 
1:d29ca2a: }
============================================================================
author:Hadrian Zbarcea
-------------------------------------------------------------------------------
commit:f9bec8f
author:gtully
-------------------------------------------------------------------------------
commit:b29eb38
/////////////////////////////////////////////////////////////////////////
1:         ActiveMQConnectionFactory factory = new ActiveMQConnectionFactory("vm://localhost?broker.persistent=false");
/////////////////////////////////////////////////////////////////////////
1:             fail("Should have received JMSException");
1:         connection.doCleanup(true);
1: 
1:             fail("Should have received JMSException");
1:         } catch (JMSException e) {
1:         }
1: 
1:     }
1: 
1:     public void testChangeClientIDDenied() throws JMSException {
1: 
1:         connection.setClientID("test");
1:         connection.createSession(false, Session.AUTO_ACKNOWLEDGE);
1: 
1:         try {
1:             connection.setClientID("test");
1:             fail("Should have received JMSException");
1:         } catch (JMSException e) {
1:         }
1: 
1:         connection.cleanup();
1: 
1:         try {
1:             connection.setClientID("test");
1:             fail("Should have received JMSException");
1:         } catch (JMSException e) {
1:         }
1: 
1:         connection.createSession(false, Session.AUTO_ACKNOWLEDGE);
1: 
1:         try {
1:             connection.setClientID("test");
1:             fail("Should have received JMSException");
author:Timothy A. Bish
-------------------------------------------------------------------------------
commit:ef24cc9
author:Hiram R. Chirino
-------------------------------------------------------------------------------
commit:b0c2a40
/////////////////////////////////////////////////////////////////////////
1:  * 
commit:933eb2f
/////////////////////////////////////////////////////////////////////////
1:         connection.createSession(false, Session.AUTO_ACKNOWLEDGE);
commit:230a86c
/////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////
1:  *      http://www.apache.org/licenses/LICENSE-2.0
/////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////
1:         connection = (ActiveMQConnection)factory.createConnection();
/////////////////////////////////////////////////////////////////////////
1: 
1: 
0:             // fail("Should have received JMSException");
1:         } catch (JMSException e) {
1: 
1: 
1: 
0:             // fail("Should have received JMSException");
1:         } catch (JMSException e) {
commit:86cbdfd
/////////////////////////////////////////////////////////////////////////
1: }
commit:57b4941
/////////////////////////////////////////////////////////////////////////
1:  * Licensed to the Apache Software Foundation (ASF) under one or more
1:  * contributor license agreements.  See the NOTICE file distributed with
1:  * this work for additional information regarding copyright ownership.
1:  * The ASF licenses this file to You under the Apache License, Version 2.0
1:  * (the "License"); you may not use this file except in compliance with
1:  * the License.  You may obtain a copy of the License at
commit:48b4869
/////////////////////////////////////////////////////////////////////////
0:  * Copyright 2005-2006 The Apache Software Foundation
commit:d29ca2a
/////////////////////////////////////////////////////////////////////////
1: /**
1:  *
0:  * Copyright 2004 The Apache Software Foundation
1:  *
0:  * Licensed under the Apache License, Version 2.0 (the "License");
0:  * you may not use this file except in compliance with the License.
0:  * You may obtain a copy of the License at
1:  *
0:  * http://www.apache.org/licenses/LICENSE-2.0
1:  *
1:  * Unless required by applicable law or agreed to in writing, software
1:  * distributed under the License is distributed on an "AS IS" BASIS,
1:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:  * See the License for the specific language governing permissions and
1:  * limitations under the License.
1:  */
1: package org.apache.activemq;
1: 
1: import javax.jms.JMSException;
1: import javax.jms.Session;
1: 
0: import org.apache.activemq.ActiveMQConnection;
0: import org.apache.activemq.ActiveMQConnectionFactory;
1: 
1: import junit.framework.TestCase;
1: 
1: /**
0:  * @version $Revision: 1.2 $
1:  */
1: public class ConnectionCleanupTest extends TestCase {
1: 
1:     private ActiveMQConnection connection;
1: 
1:     protected void setUp() throws Exception {
0:         ActiveMQConnectionFactory factory = new ActiveMQConnectionFactory("vm://localhost");
0:         connection = (ActiveMQConnection) factory.createConnection();
1:     }
1: 
1:     /**
1:      * @see junit.framework.TestCase#tearDown()
1:      */
1:     protected void tearDown() throws Exception {
1:         connection.close();
1:     }
1: 
1:     /**
1:      * @throws JMSException
1:      */
1:     public void testChangeClientID() throws JMSException {
1:         
1:         connection.setClientID("test");
0:         Session session = connection.createSession(false, Session.AUTO_ACKNOWLEDGE);
1:         
1:         try {
1:             connection.setClientID("test");
0:             //fail("Should have received JMSException");
0:         } catch ( JMSException e ) {            
1:         }
1:         
0:         connection.cleanup();
1:         connection.setClientID("test");
1:         
1:         connection.createSession(false, Session.AUTO_ACKNOWLEDGE);
1:         
1:         try {
1:             connection.setClientID("test");
0:             //fail("Should have received JMSException");
0:         } catch ( JMSException e ) {            
1:         }
1:     }
1: 
1: }
============================================================================