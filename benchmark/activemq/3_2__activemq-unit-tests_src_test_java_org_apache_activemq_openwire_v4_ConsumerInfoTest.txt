1:301203e: /**
1:301203e:  *
1:301203e:  * Licensed to the Apache Software Foundation (ASF) under one or more
1:301203e:  * contributor license agreements.  See the NOTICE file distributed with
1:301203e:  * this work for additional information regarding copyright ownership.
1:301203e:  * The ASF licenses this file to You under the Apache License, Version 2.0
1:301203e:  * (the "License"); you may not use this file except in compliance with
1:301203e:  * the License.  You may obtain a copy of the License at
1:301203e:  *
1:301203e:  * http://www.apache.org/licenses/LICENSE-2.0
1:301203e:  *
1:301203e:  * Unless required by applicable law or agreed to in writing, software
1:301203e:  * distributed under the License is distributed on an "AS IS" BASIS,
1:301203e:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:301203e:  * See the License for the specific language governing permissions and
1:301203e:  * limitations under the License.
1:301203e:  */
1:301203e: package org.apache.activemq.openwire.v4;
1:301203e: 
1:301203e: import java.io.DataInputStream;
1:301203e: import java.io.DataOutputStream;
1:301203e: import java.io.IOException;
1:301203e: 
1:301203e: import org.apache.activemq.openwire.*;
1:301203e: import org.apache.activemq.command.*;
1:301203e: 
1:301203e: 
1:301203e: /**
1:301203e:  * Test case for the OpenWire marshalling for ConsumerInfo
1:301203e:  *
1:301203e:  *
1:301203e:  * NOTE!: This file is auto generated - do not modify!
1:301203e:  *        if you need to make a change, please see the modify the groovy scripts in the
1:301203e:  *        under src/gram/script and then use maven openwire:generate to regenerate 
1:301203e:  *        this file.
1:0bbc0ac:  *
1:301203e:  * 
1:301203e:  */
1:301203e: public class ConsumerInfoTest extends BaseCommandTestSupport {
1:301203e: 
1:301203e: 
1:301203e:     public static ConsumerInfoTest SINGLETON = new ConsumerInfoTest();
1:301203e: 
1:301203e:     public Object createObject() throws Exception {
1:301203e:         ConsumerInfo info = new ConsumerInfo();
1:301203e:         populateObject(info);
1:301203e:         return info;
1:301203e:     }
1:301203e: 
1:301203e:     protected void populateObject(Object object) throws Exception {
1:301203e:         super.populateObject(object);
1:301203e:         ConsumerInfo info = (ConsumerInfo) object;
1:301203e: 
1:301203e:         info.setConsumerId(createConsumerId("ConsumerId:1"));
1:301203e:         info.setBrowser(true);
1:301203e:         info.setDestination(createActiveMQDestination("Destination:2"));
1:301203e:         info.setPrefetchSize(1);
1:301203e:         info.setMaximumPendingMessageLimit(2);
1:301203e:         info.setDispatchAsync(false);
1:301203e:         info.setSelector("Selector:3");
1:301203e:         info.setSubscriptionName("SubscriptionName:4");
1:301203e:         info.setNoLocal(true);
1:301203e:         info.setExclusive(false);
1:301203e:         info.setRetroactive(true);
1:301203e:         info.setPriority((byte) 1);
1:301203e:         {
1:301203e:             BrokerId value[] = new BrokerId[2];
1:301203e:             for( int i=0; i < 2; i++ ) {
1:301203e:                 value[i] = createBrokerId("BrokerPath:5");
1:301203e:             }
1:301203e:             info.setBrokerPath(value);
1:301203e:         }
1:301203e:         info.setAdditionalPredicate(createBooleanExpression("AdditionalPredicate:6"));
1:301203e:         info.setNetworkSubscription(false);
1:301203e:         info.setOptimizedAcknowledge(true);
1:301203e:         info.setNoRangeAcks(false);
1:301203e:         {
1:301203e:             ConsumerId value[] = new ConsumerId[2];
1:301203e:             for( int i=0; i < 2; i++ ) {
1:301203e:                 value[i] = createConsumerId("NetworkConsumerPath:7");
1:301203e:             }
1:301203e:             info.setNetworkConsumerPath(value);
1:301203e:         }
1:301203e:     }
1:301203e: }
============================================================================
author:Timothy A. Bish
-------------------------------------------------------------------------------
commit:ef24cc9
author:Hiram R. Chirino
-------------------------------------------------------------------------------
commit:0bbc0ac
/////////////////////////////////////////////////////////////////////////
1:  * 
author:Gary Tully
-------------------------------------------------------------------------------
commit:301203e
/////////////////////////////////////////////////////////////////////////
1: /**
1:  *
1:  * Licensed to the Apache Software Foundation (ASF) under one or more
1:  * contributor license agreements.  See the NOTICE file distributed with
1:  * this work for additional information regarding copyright ownership.
1:  * The ASF licenses this file to You under the Apache License, Version 2.0
1:  * (the "License"); you may not use this file except in compliance with
1:  * the License.  You may obtain a copy of the License at
1:  *
1:  * http://www.apache.org/licenses/LICENSE-2.0
1:  *
1:  * Unless required by applicable law or agreed to in writing, software
1:  * distributed under the License is distributed on an "AS IS" BASIS,
1:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:  * See the License for the specific language governing permissions and
1:  * limitations under the License.
1:  */
1: package org.apache.activemq.openwire.v4;
1: 
1: import java.io.DataInputStream;
1: import java.io.DataOutputStream;
1: import java.io.IOException;
1: 
1: import org.apache.activemq.openwire.*;
1: import org.apache.activemq.command.*;
1: 
1: 
1: /**
1:  * Test case for the OpenWire marshalling for ConsumerInfo
1:  *
1:  *
1:  * NOTE!: This file is auto generated - do not modify!
1:  *        if you need to make a change, please see the modify the groovy scripts in the
1:  *        under src/gram/script and then use maven openwire:generate to regenerate 
1:  *        this file.
1:  *
0:  * @version $Revision$
1:  */
1: public class ConsumerInfoTest extends BaseCommandTestSupport {
1: 
1: 
1:     public static ConsumerInfoTest SINGLETON = new ConsumerInfoTest();
1: 
1:     public Object createObject() throws Exception {
1:         ConsumerInfo info = new ConsumerInfo();
1:         populateObject(info);
1:         return info;
1:     }
1: 
1:     protected void populateObject(Object object) throws Exception {
1:         super.populateObject(object);
1:         ConsumerInfo info = (ConsumerInfo) object;
1: 
1:         info.setConsumerId(createConsumerId("ConsumerId:1"));
1:         info.setBrowser(true);
1:         info.setDestination(createActiveMQDestination("Destination:2"));
1:         info.setPrefetchSize(1);
1:         info.setMaximumPendingMessageLimit(2);
1:         info.setDispatchAsync(false);
1:         info.setSelector("Selector:3");
1:         info.setSubscriptionName("SubscriptionName:4");
1:         info.setNoLocal(true);
1:         info.setExclusive(false);
1:         info.setRetroactive(true);
1:         info.setPriority((byte) 1);
1:         {
1:             BrokerId value[] = new BrokerId[2];
1:             for( int i=0; i < 2; i++ ) {
1:                 value[i] = createBrokerId("BrokerPath:5");
1:             }
1:             info.setBrokerPath(value);
1:         }
1:         info.setAdditionalPredicate(createBooleanExpression("AdditionalPredicate:6"));
1:         info.setNetworkSubscription(false);
1:         info.setOptimizedAcknowledge(true);
1:         info.setNoRangeAcks(false);
1:         {
1:             ConsumerId value[] = new ConsumerId[2];
1:             for( int i=0; i < 2; i++ ) {
1:                 value[i] = createConsumerId("NetworkConsumerPath:7");
1:             }
1:             info.setNetworkConsumerPath(value);
1:         }
1:     }
1: }
============================================================================