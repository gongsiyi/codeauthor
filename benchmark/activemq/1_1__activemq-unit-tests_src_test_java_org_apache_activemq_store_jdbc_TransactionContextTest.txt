1:7c11663: /**
1:7c11663:  * Licensed to the Apache Software Foundation (ASF) under one or more
1:7c11663:  * contributor license agreements.  See the NOTICE file distributed with
1:7c11663:  * this work for additional information regarding copyright ownership.
1:7c11663:  * The ASF licenses this file to You under the Apache License, Version 2.0
1:7c11663:  * (the "License"); you may not use this file except in compliance with
1:7c11663:  * the License.  You may obtain a copy of the License at
1:7c11663:  *
1:7c11663:  *      http://www.apache.org/licenses/LICENSE-2.0
1:7c11663:  *
1:7c11663:  * Unless required by applicable law or agreed to in writing, software
1:7c11663:  * distributed under the License is distributed on an "AS IS" BASIS,
1:7c11663:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:7c11663:  * See the License for the specific language governing permissions and
1:7c11663:  * limitations under the License.
1:7c11663:  */
1:7c11663: package org.apache.activemq.store.jdbc;
1:7c11663: 
1:7c11663: import java.util.concurrent.atomic.AtomicInteger;
1:7c11663: import org.junit.AfterClass;
1:7c11663: import org.junit.Before;
1:7c11663: import org.junit.BeforeClass;
1:7c11663: import org.junit.Test;
1:7c11663: 
1:7c11663: import static org.junit.Assert.assertEquals;
1:7c11663: 
1:7c11663: public class TransactionContextTest {
1:7c11663: 
1:7c11663:     org.apache.activemq.store.jdbc.TransactionContext underTest;
1:7c11663:     static JDBCPersistenceAdapter jdbcPersistenceAdapter;
1:7c11663: 
1:7c11663:     @BeforeClass
1:7c11663:     public static void init() throws Exception {
1:7c11663:         jdbcPersistenceAdapter = new JDBCPersistenceAdapter();
1:7c11663:     }
1:7c11663: 
1:7c11663:     @AfterClass
1:7c11663:     public static void tearDown() throws Exception {
1:7c11663:         jdbcPersistenceAdapter.stop();
1:7c11663:     }
1:7c11663: 
1:7c11663:     @Before
1:7c11663:     public void setup() throws Exception {
1:7c11663:         underTest = new TransactionContext(jdbcPersistenceAdapter);
1:7c11663:     }
1:7c11663: 
1:7c11663:     @Test
1:7c11663:     public void testCompletionCalledOnceOnCommmit() throws Exception {
1:7c11663:         final AtomicInteger called = new AtomicInteger();
1:7c11663:         underTest.begin();
1:7c11663:         underTest.onCompletion(new Runnable() {
1:7c11663:             @Override
1:7c11663:             public void run() {
1:7c11663:                 called.incrementAndGet();
1:7c11663:             }
1:7c11663:         });
1:7c11663:         underTest.commit();
1:7c11663: 
1:7c11663:         assertEquals(1, called.get());
1:7c11663:         underTest.begin();
1:7c11663:         underTest.commit();
1:7c11663: 
1:7c11663:         assertEquals(1, called.get());
1:7c11663: 
1:7c11663:     }
1:7c11663: 
1:7c11663:     @Test
1:7c11663:     public void testCompletionCalledOnceOnClose() throws Exception {
1:7c11663: 
1:7c11663:         underTest.getConnection();
1:7c11663:         final AtomicInteger called = new AtomicInteger();
1:7c11663:         underTest.onCompletion(new Runnable() {
1:7c11663:             @Override
1:7c11663:             public void run() {
1:7c11663:                 called.incrementAndGet();
1:7c11663:             }
1:7c11663:         });
1:7c11663:         underTest.close();
1:7c11663: 
1:7c11663:         assertEquals(1, called.get());
1:7c11663:         underTest.getConnection();
1:7c11663:         underTest.close();
1:7c11663: 
1:7c11663:         assertEquals(1, called.get());
1:7c11663:     }
1:7c11663: 
1:7c11663: }
============================================================================
author:gtully
-------------------------------------------------------------------------------
commit:7c11663
/////////////////////////////////////////////////////////////////////////
1: /**
1:  * Licensed to the Apache Software Foundation (ASF) under one or more
1:  * contributor license agreements.  See the NOTICE file distributed with
1:  * this work for additional information regarding copyright ownership.
1:  * The ASF licenses this file to You under the Apache License, Version 2.0
1:  * (the "License"); you may not use this file except in compliance with
1:  * the License.  You may obtain a copy of the License at
1:  *
1:  *      http://www.apache.org/licenses/LICENSE-2.0
1:  *
1:  * Unless required by applicable law or agreed to in writing, software
1:  * distributed under the License is distributed on an "AS IS" BASIS,
1:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:  * See the License for the specific language governing permissions and
1:  * limitations under the License.
1:  */
1: package org.apache.activemq.store.jdbc;
1: 
1: import java.util.concurrent.atomic.AtomicInteger;
1: import org.junit.AfterClass;
1: import org.junit.Before;
1: import org.junit.BeforeClass;
1: import org.junit.Test;
1: 
1: import static org.junit.Assert.assertEquals;
1: 
1: public class TransactionContextTest {
1: 
1:     org.apache.activemq.store.jdbc.TransactionContext underTest;
1:     static JDBCPersistenceAdapter jdbcPersistenceAdapter;
1: 
1:     @BeforeClass
1:     public static void init() throws Exception {
1:         jdbcPersistenceAdapter = new JDBCPersistenceAdapter();
1:     }
1: 
1:     @AfterClass
1:     public static void tearDown() throws Exception {
1:         jdbcPersistenceAdapter.stop();
1:     }
1: 
1:     @Before
1:     public void setup() throws Exception {
1:         underTest = new TransactionContext(jdbcPersistenceAdapter);
1:     }
1: 
1:     @Test
1:     public void testCompletionCalledOnceOnCommmit() throws Exception {
1:         final AtomicInteger called = new AtomicInteger();
1:         underTest.begin();
1:         underTest.onCompletion(new Runnable() {
1:             @Override
1:             public void run() {
1:                 called.incrementAndGet();
1:             }
1:         });
1:         underTest.commit();
1: 
1:         assertEquals(1, called.get());
1:         underTest.begin();
1:         underTest.commit();
1: 
1:         assertEquals(1, called.get());
1: 
1:     }
1: 
1:     @Test
1:     public void testCompletionCalledOnceOnClose() throws Exception {
1: 
1:         underTest.getConnection();
1:         final AtomicInteger called = new AtomicInteger();
1:         underTest.onCompletion(new Runnable() {
1:             @Override
1:             public void run() {
1:                 called.incrementAndGet();
1:             }
1:         });
1:         underTest.close();
1: 
1:         assertEquals(1, called.get());
1:         underTest.getConnection();
1:         underTest.close();
1: 
1:         assertEquals(1, called.get());
1:     }
1: 
1: }
============================================================================