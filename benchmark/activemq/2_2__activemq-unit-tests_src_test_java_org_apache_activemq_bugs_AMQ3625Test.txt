1:c856f30: /**
1:c856f30:  * Licensed to the Apache Software Foundation (ASF) under one or more
1:c856f30:  * contributor license agreements.  See the NOTICE file distributed with
1:c856f30:  * this work for additional information regarding copyright ownership.
1:c856f30:  * The ASF licenses this file to You under the Apache License, Version 2.0
1:c856f30:  * (the "License"); you may not use this file except in compliance with
1:c856f30:  * the License.  You may obtain a copy of the License at
1:c856f30:  *
1:c856f30:  *      http://www.apache.org/licenses/LICENSE-2.0
1:c856f30:  *
1:c856f30:  * Unless required by applicable law or agreed to in writing, software
1:c856f30:  * distributed under the License is distributed on an "AS IS" BASIS,
1:c856f30:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:c856f30:  * See the License for the specific language governing permissions and
1:c856f30:  * limitations under the License.
1:c856f30:  */
1:c856f30: package org.apache.activemq.bugs;
1:c856f30: 
1:c856f30: import org.apache.activemq.broker.BrokerFactory;
1:c856f30: import org.apache.activemq.broker.BrokerService;
1:c856f30: import org.apache.activemq.util.DefaultTestAppender;
1:c856f30: import org.apache.log4j.Appender;
1:c856f30: import org.apache.log4j.Logger;
1:c856f30: import org.apache.log4j.spi.LoggingEvent;
1:c856f30: import org.junit.After;
1:c856f30: import org.junit.Before;
1:c856f30: import org.junit.Test;
1:c856f30: 
1:c856f30: import java.util.concurrent.atomic.AtomicBoolean;
1:c856f30: 
1:c856f30: import static org.junit.Assert.assertFalse;
1:c856f30: import static org.junit.Assert.assertTrue;
1:c856f30: 
1:c856f30: /**
1:c856f30:  *
1:c856f30:  */
1:c856f30: 
1:c856f30: public class AMQ3625Test {
1:c856f30:     
1:c856f30:     protected BrokerService broker1;
1:c856f30:     protected BrokerService broker2;
1:c856f30:     
1:c856f30:     protected AtomicBoolean authenticationFailed = new AtomicBoolean(false);
1:c856f30:     protected AtomicBoolean gotNPE = new AtomicBoolean(false);
1:c856f30: 
1:c856f30:     protected String java_security_auth_login_config = "java.security.auth.login.config";
1:c856f30:     protected String xbean = "xbean:";
1:c856f30:     protected String base = "src/test/resources/org/apache/activemq/bugs/amq3625";
1:c856f30:     protected String conf = "conf";
1:c856f30:     protected String keys = "keys";
1:c856f30:     protected String JaasStompSSLBroker1_xml = "JaasStompSSLBroker1.xml";
1:c856f30:     protected String JaasStompSSLBroker2_xml = "JaasStompSSLBroker2.xml";
1:c856f30:     
1:c856f30:     protected String oldLoginConf = null;
1:c856f30: 
1:c856f30:     @Before
1:c856f30:     public void before() throws Exception {
1:c856f30:         if (System.getProperty(java_security_auth_login_config) != null) {
1:c856f30:             oldLoginConf = System.getProperty(java_security_auth_login_config);
3:c856f30:         }
1:84eab9b:         System.setProperty(java_security_auth_login_config, base + "/" + conf + "/" + "login.config");
1:84eab9b:         broker1 = BrokerFactory.createBroker(xbean + base + "/" + conf + "/" + JaasStompSSLBroker1_xml);
1:84eab9b:         broker2 = BrokerFactory.createBroker(xbean + base + "/" + conf + "/" + JaasStompSSLBroker2_xml);
1:c856f30:         
1:c856f30:         broker1.start();
1:c856f30:         broker1.waitUntilStarted();
1:c856f30:         broker2.start();
1:c856f30:         broker2.waitUntilStarted();
1:c856f30:     }
1:c856f30: 
1:c856f30:     @After
1:c856f30:     public void after() throws Exception {
1:c856f30:         broker1.stop();
1:c856f30:         broker2.stop();
1:c856f30:         
1:c856f30:         if (oldLoginConf != null) {
1:c856f30:             System.setProperty(java_security_auth_login_config, oldLoginConf);
1:c856f30:         }
1:c856f30:     }
1:c856f30:     
1:c856f30:     @Test
1:c856f30:     public void go() throws Exception {
1:c856f30:         Appender appender = new DefaultTestAppender() {
1:c856f30:             @Override
1:c856f30:             public void doAppend(LoggingEvent event) {
1:b1ea29e:                 if (event.getMessage().toString().contains("java.lang.SecurityException")) {
1:b1ea29e:                     authenticationFailed.set(true);
1:b1ea29e:                 }
1:b1ea29e:                 if (event.getMessage().toString().contains("NullPointerException")) {
1:b1ea29e:                     gotNPE.set(true);
1:c856f30:                 }
1:c856f30:             }
1:c856f30:         };
1:c856f30:         Logger.getRootLogger().addAppender(appender);
1:c856f30:         
1:c856f30:         String connectURI = broker1.getConnectorByName("openwire").getConnectUri().toString();
1:c856f30:         connectURI = connectURI.replace("?needClientAuth=true", "");
1:c856f30:         broker2.addNetworkConnector("static:(" + connectURI + ")").start();
1:c856f30:         
1:c856f30:         Thread.sleep(10 * 1000);
1:c856f30:         
1:c856f30:         Logger.getRootLogger().removeAppender(appender);
1:c856f30:         
1:c856f30:         assertTrue(authenticationFailed.get());
1:c856f30:         assertFalse(gotNPE.get());
1:c856f30:     }
1:c856f30: }
============================================================================
author:gtully
-------------------------------------------------------------------------------
commit:b1ea29e
/////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////
1:                 if (event.getMessage().toString().contains("java.lang.SecurityException")) {
1:                     authenticationFailed.set(true);
1:                 }
1:                 if (event.getMessage().toString().contains("NullPointerException")) {
1:                     gotNPE.set(true);
author:Timothy A. Bish
-------------------------------------------------------------------------------
commit:84eab9b
/////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////
1:         System.setProperty(java_security_auth_login_config, base + "/" + conf + "/" + "login.config");
1:         broker1 = BrokerFactory.createBroker(xbean + base + "/" + conf + "/" + JaasStompSSLBroker1_xml);
1:         broker2 = BrokerFactory.createBroker(xbean + base + "/" + conf + "/" + JaasStompSSLBroker2_xml);
commit:ef24cc9
commit:c856f30
/////////////////////////////////////////////////////////////////////////
1: /**
1:  * Licensed to the Apache Software Foundation (ASF) under one or more
1:  * contributor license agreements.  See the NOTICE file distributed with
1:  * this work for additional information regarding copyright ownership.
1:  * The ASF licenses this file to You under the Apache License, Version 2.0
1:  * (the "License"); you may not use this file except in compliance with
1:  * the License.  You may obtain a copy of the License at
1:  *
1:  *      http://www.apache.org/licenses/LICENSE-2.0
1:  *
1:  * Unless required by applicable law or agreed to in writing, software
1:  * distributed under the License is distributed on an "AS IS" BASIS,
1:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:  * See the License for the specific language governing permissions and
1:  * limitations under the License.
1:  */
1: package org.apache.activemq.bugs;
1: 
1: import org.apache.activemq.broker.BrokerFactory;
1: import org.apache.activemq.broker.BrokerService;
1: import org.apache.activemq.util.DefaultTestAppender;
1: import org.apache.log4j.Appender;
1: import org.apache.log4j.Logger;
1: import org.apache.log4j.spi.LoggingEvent;
1: import org.junit.After;
1: import org.junit.Before;
1: import org.junit.Test;
1: 
0: import java.io.File;
1: import java.util.concurrent.atomic.AtomicBoolean;
1: 
1: import static org.junit.Assert.assertFalse;
1: import static org.junit.Assert.assertTrue;
1: 
1: /**
1:  *
1:  */
1: 
1: public class AMQ3625Test {
1:     
1:     protected BrokerService broker1;
1:     protected BrokerService broker2;
1:     
1:     protected AtomicBoolean authenticationFailed = new AtomicBoolean(false);
1:     protected AtomicBoolean gotNPE = new AtomicBoolean(false);
1: 
1:     protected String java_security_auth_login_config = "java.security.auth.login.config";
1:     protected String xbean = "xbean:";
1:     protected String base = "src/test/resources/org/apache/activemq/bugs/amq3625";
1:     protected String conf = "conf";
1:     protected String keys = "keys";
0:     protected String sep  = File.separator;
1:     protected String JaasStompSSLBroker1_xml = "JaasStompSSLBroker1.xml";
1:     protected String JaasStompSSLBroker2_xml = "JaasStompSSLBroker2.xml";
1:     
1:     protected String oldLoginConf = null;
1: 
1:     @Before
1:     public void before() throws Exception {
1:         if (System.getProperty(java_security_auth_login_config) != null) {
1:             oldLoginConf = System.getProperty(java_security_auth_login_config);
1:         }
0:         System.setProperty(java_security_auth_login_config, base + sep + conf + sep + "login.config");
0:         broker1 = BrokerFactory.createBroker(xbean + base + sep + conf + sep + JaasStompSSLBroker1_xml);
0:         broker2 = BrokerFactory.createBroker(xbean + base + sep + conf + sep + JaasStompSSLBroker2_xml);
1:         
1:         broker1.start();
1:         broker1.waitUntilStarted();
1:         broker2.start();
1:         broker2.waitUntilStarted();
1:     }
1: 
1:     @After
1:     public void after() throws Exception {
1:         broker1.stop();
1:         broker2.stop();
1:         
1:         if (oldLoginConf != null) {
1:             System.setProperty(java_security_auth_login_config, oldLoginConf);
1:         }
1:     }
1:     
1:     @Test
1:     public void go() throws Exception {
1:         Appender appender = new DefaultTestAppender() {
1:             @Override
1:             public void doAppend(LoggingEvent event) {
0:                 if (event.getThrowableInformation() != null) {
0:                     Throwable t = event.getThrowableInformation().getThrowable();
0:                     if (t instanceof SecurityException) {
0:                         authenticationFailed.set(true);
1:                     }
0:                     if (t instanceof NullPointerException) {
0:                         gotNPE.set(true);
1:                     }
1:                 }
1:             }
1:         };
1:         Logger.getRootLogger().addAppender(appender);
1:         
1:         String connectURI = broker1.getConnectorByName("openwire").getConnectUri().toString();
1:         connectURI = connectURI.replace("?needClientAuth=true", "");
1:         broker2.addNetworkConnector("static:(" + connectURI + ")").start();
1:         
1:         Thread.sleep(10 * 1000);
1:         
1:         Logger.getRootLogger().removeAppender(appender);
1:         
1:         assertTrue(authenticationFailed.get());
1:         assertFalse(gotNPE.get());
1:     }
1: }
============================================================================