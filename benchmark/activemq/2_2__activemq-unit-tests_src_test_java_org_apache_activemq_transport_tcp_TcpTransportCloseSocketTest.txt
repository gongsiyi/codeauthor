1:d9c74d7: /**
1:d9c74d7:  * Licensed to the Apache Software Foundation (ASF) under one or more
1:d9c74d7:  * contributor license agreements.  See the NOTICE file distributed with
1:d9c74d7:  * this work for additional information regarding copyright ownership.
1:d9c74d7:  * The ASF licenses this file to You under the Apache License, Version 2.0
1:d9c74d7:  * (the "License"); you may not use this file except in compliance with
1:d9c74d7:  * the License.  You may obtain a copy of the License at
1:d9c74d7:  *
1:d9c74d7:  *      http://www.apache.org/licenses/LICENSE-2.0
1:d9c74d7:  *
1:d9c74d7:  * Unless required by applicable law or agreed to in writing, software
1:d9c74d7:  * distributed under the License is distributed on an "AS IS" BASIS,
1:d9c74d7:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:d9c74d7:  * See the License for the specific language governing permissions and
1:d9c74d7:  * limitations under the License.
1:d9c74d7:  */
1:d9c74d7: package org.apache.activemq.transport.tcp;
1:d9c74d7: 
1:d9c74d7: import static org.junit.Assert.assertEquals;
1:d9c74d7: import static org.junit.Assert.assertTrue;
1:d9c74d7: 
1:d9c74d7: import java.util.Arrays;
1:d9c74d7: import java.util.Collection;
1:d9c74d7: 
1:d9c74d7: import org.apache.activemq.ActiveMQConnectionFactory;
1:d9c74d7: import org.apache.activemq.broker.BrokerService;
1:d9c74d7: import org.apache.activemq.broker.TransportConnector;
1:d9c74d7: import org.apache.activemq.util.Wait;
1:d9c74d7: import org.apache.activemq.util.Wait.Condition;
1:d9c74d7: import org.junit.After;
1:d9c74d7: import org.junit.Before;
1:d9c74d7: import org.junit.Test;
1:d9c74d7: import org.junit.runner.RunWith;
1:d9c74d7: import org.junit.runners.Parameterized;
1:d9c74d7: import org.junit.runners.Parameterized.Parameters;
1:d9c74d7: 
1:d9c74d7: /**
1:d9c74d7:  * Test for https://issues.apache.org/jira/browse/AMQ-6561 to make sure sockets
1:d9c74d7:  * are closed on all connection attempt errors
1:d9c74d7:  */
1:d9c74d7: @RunWith(Parameterized.class)
1:d9c74d7: public class TcpTransportCloseSocketTest {
1:d9c74d7: 
1:d9c74d7:     public static final String KEYSTORE_TYPE = "jks";
1:d9c74d7:     public static final String PASSWORD = "password";
1:d9c74d7:     public static final String SERVER_KEYSTORE = "src/test/resources/server.keystore";
1:d9c74d7:     public static final String TRUST_KEYSTORE = "src/test/resources/client.keystore";
1:d9c74d7: 
1:d9c74d7:     private String uri;
1:d9c74d7:     private final String protocol;
1:d9c74d7:     private BrokerService brokerService;
1:d9c74d7: 
1:d9c74d7:     @Parameters(name="protocol={0}")
1:d9c74d7:     public static Collection<Object[]> data() {
1:d9c74d7:         return Arrays.asList(new Object[][] {
1:d9c74d7:                   {"auto+nio+ssl"},
1:d9c74d7:                   {"auto+ssl"},
1:d9c74d7:                   {"ssl"},
1:d9c74d7:                   {"tcp"}
1:d9c74d7:             });
1:d9c74d7:     }
1:d9c74d7: 
1:d9c74d7:     static {
1:d9c74d7:         System.setProperty("javax.net.ssl.trustStore", TRUST_KEYSTORE);
1:d9c74d7:         System.setProperty("javax.net.ssl.trustStorePassword", PASSWORD);
1:d9c74d7:         System.setProperty("javax.net.ssl.trustStoreType", KEYSTORE_TYPE);
1:d9c74d7:         System.setProperty("javax.net.ssl.keyStore", SERVER_KEYSTORE);
1:d9c74d7:         System.setProperty("javax.net.ssl.keyStorePassword", PASSWORD);
1:d9c74d7:         System.setProperty("javax.net.ssl.keyStoreType", KEYSTORE_TYPE);
1:d9c74d7:     }
1:d9c74d7: 
1:d9c74d7:     @Before
1:d9c74d7:     public void before() throws Exception {
1:d9c74d7:         BrokerService brokerService = new BrokerService();
1:d9c74d7:         brokerService.setPersistent(false);
1:d9c74d7: 
1:d9c74d7:         TransportConnector connector = brokerService.addConnector(protocol + "://localhost:0");
1:d9c74d7:         connector.setName("tcp");
1:d9c74d7:         uri = connector.getPublishableConnectString();
1:d9c74d7:         this.brokerService = brokerService;
1:d9c74d7:         brokerService.start();
1:d9c74d7:         brokerService.waitUntilStarted();
1:d9c74d7:     }
1:d9c74d7: 
1:d9c74d7:     @After
1:d9c74d7:     public void after() throws Exception {
1:d9c74d7:         if (brokerService != null) {
1:d9c74d7:             brokerService.stop();
1:d9c74d7:             brokerService.waitUntilStopped();
1:d9c74d7:         }
1:d9c74d7:     }
1:d9c74d7: 
1:d9c74d7:     /**
1:d9c74d7:      * @param isNio
1:d9c74d7:      */
1:d9c74d7:     public TcpTransportCloseSocketTest(String protocol) {
1:d9c74d7:         this.protocol = protocol;
1:d9c74d7:     }
1:d9c74d7: 
1:d9c74d7:     //We want to make sure that the socket will be closed if there as an error on broker.addConnection
1:d9c74d7:     //even if the client doesn't close the connection to prevent dangling open sockets
1:d9c74d7:     @Test(timeout = 60000)
1:d9c74d7:     public void testDuplicateClientIdCloseConnection() throws Exception {
1:d9c74d7:         ActiveMQConnectionFactory factory = new ActiveMQConnectionFactory();
1:d9c74d7:         factory.setBrokerURL(uri);
1:d9c74d7:         factory.setClientID("id");
1:d9c74d7: 
1:f094937:         final TcpTransportServer server = (TcpTransportServer) brokerService.getTransportConnectorByName("tcp").getServer();
1:d9c74d7: 
1:d9c74d7:         //Try and create 2 connections, the second should fail because of a duplicate clientId
1:d9c74d7:         int failed = 0;
1:d9c74d7:         for (int i = 0; i < 2; i++) {
1:d9c74d7:             try {
1:d9c74d7:                 factory.createConnection().start();
1:d9c74d7:             } catch (Exception e) {
1:d9c74d7:                 e.printStackTrace();
1:d9c74d7:                 failed++;
1:d9c74d7:             }
1:d9c74d7:         }
1:d9c74d7: 
1:d9c74d7:         assertEquals(1, failed);
1:d9c74d7:         //after 2 seconds the connection should be terminated by the broker because of the exception
1:d9c74d7:         //on broker.addConnection
1:d9c74d7:         assertTrue(Wait.waitFor(new Condition() {
1:d9c74d7: 
1:d9c74d7:             @Override
1:d9c74d7:             public boolean isSatisified() throws Exception {
1:d9c74d7:                 return server.getCurrentTransportCount().get() == 1;
1:d9c74d7:             }
1:d9c74d7: 
1:d9c74d7:         }, 10000, 500));
1:d9c74d7:     }
1:d9c74d7: }
============================================================================
author:Krzysztof Sobkowiak
-------------------------------------------------------------------------------
commit:f094937
/////////////////////////////////////////////////////////////////////////
1:         final TcpTransportServer server = (TcpTransportServer) brokerService.getTransportConnectorByName("tcp").getServer();
author:Christopher L. Shannon (cshannon)
-------------------------------------------------------------------------------
commit:d9c74d7
/////////////////////////////////////////////////////////////////////////
1: /**
1:  * Licensed to the Apache Software Foundation (ASF) under one or more
1:  * contributor license agreements.  See the NOTICE file distributed with
1:  * this work for additional information regarding copyright ownership.
1:  * The ASF licenses this file to You under the Apache License, Version 2.0
1:  * (the "License"); you may not use this file except in compliance with
1:  * the License.  You may obtain a copy of the License at
1:  *
1:  *      http://www.apache.org/licenses/LICENSE-2.0
1:  *
1:  * Unless required by applicable law or agreed to in writing, software
1:  * distributed under the License is distributed on an "AS IS" BASIS,
1:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:  * See the License for the specific language governing permissions and
1:  * limitations under the License.
1:  */
1: package org.apache.activemq.transport.tcp;
1: 
1: import static org.junit.Assert.assertEquals;
1: import static org.junit.Assert.assertTrue;
1: 
1: import java.util.Arrays;
1: import java.util.Collection;
1: 
1: import org.apache.activemq.ActiveMQConnectionFactory;
1: import org.apache.activemq.broker.BrokerService;
1: import org.apache.activemq.broker.TransportConnector;
1: import org.apache.activemq.util.Wait;
1: import org.apache.activemq.util.Wait.Condition;
1: import org.junit.After;
1: import org.junit.Before;
1: import org.junit.Test;
1: import org.junit.runner.RunWith;
1: import org.junit.runners.Parameterized;
1: import org.junit.runners.Parameterized.Parameters;
1: 
1: /**
1:  * Test for https://issues.apache.org/jira/browse/AMQ-6561 to make sure sockets
1:  * are closed on all connection attempt errors
1:  */
1: @RunWith(Parameterized.class)
1: public class TcpTransportCloseSocketTest {
1: 
1:     public static final String KEYSTORE_TYPE = "jks";
1:     public static final String PASSWORD = "password";
1:     public static final String SERVER_KEYSTORE = "src/test/resources/server.keystore";
1:     public static final String TRUST_KEYSTORE = "src/test/resources/client.keystore";
1: 
1:     private String uri;
1:     private final String protocol;
1:     private BrokerService brokerService;
1: 
1:     @Parameters(name="protocol={0}")
1:     public static Collection<Object[]> data() {
1:         return Arrays.asList(new Object[][] {
1:                   {"auto+nio+ssl"},
1:                   {"auto+ssl"},
1:                   {"ssl"},
1:                   {"tcp"}
1:             });
1:     }
1: 
1:     static {
1:         System.setProperty("javax.net.ssl.trustStore", TRUST_KEYSTORE);
1:         System.setProperty("javax.net.ssl.trustStorePassword", PASSWORD);
1:         System.setProperty("javax.net.ssl.trustStoreType", KEYSTORE_TYPE);
1:         System.setProperty("javax.net.ssl.keyStore", SERVER_KEYSTORE);
1:         System.setProperty("javax.net.ssl.keyStorePassword", PASSWORD);
1:         System.setProperty("javax.net.ssl.keyStoreType", KEYSTORE_TYPE);
1:     }
1: 
1:     @Before
1:     public void before() throws Exception {
1:         BrokerService brokerService = new BrokerService();
1:         brokerService.setPersistent(false);
1: 
1:         TransportConnector connector = brokerService.addConnector(protocol + "://localhost:0");
1:         connector.setName("tcp");
1:         uri = connector.getPublishableConnectString();
1:         this.brokerService = brokerService;
1:         brokerService.start();
1:         brokerService.waitUntilStarted();
1:     }
1: 
1:     @After
1:     public void after() throws Exception {
1:         if (brokerService != null) {
1:             brokerService.stop();
1:             brokerService.waitUntilStopped();
1:         }
1:     }
1: 
1:     /**
1:      * @param isNio
1:      */
1:     public TcpTransportCloseSocketTest(String protocol) {
1:         this.protocol = protocol;
1:     }
1: 
1:     //We want to make sure that the socket will be closed if there as an error on broker.addConnection
1:     //even if the client doesn't close the connection to prevent dangling open sockets
1:     @Test(timeout = 60000)
1:     public void testDuplicateClientIdCloseConnection() throws Exception {
1:         ActiveMQConnectionFactory factory = new ActiveMQConnectionFactory();
1:         factory.setBrokerURL(uri);
1:         factory.setClientID("id");
1: 
0:         TcpTransportServer server = (TcpTransportServer) brokerService.getTransportConnectorByName("tcp").getServer();
1: 
1:         //Try and create 2 connections, the second should fail because of a duplicate clientId
1:         int failed = 0;
1:         for (int i = 0; i < 2; i++) {
1:             try {
1:                 factory.createConnection().start();
1:             } catch (Exception e) {
1:                 e.printStackTrace();
1:                 failed++;
1:             }
1:         }
1: 
1:         assertEquals(1, failed);
1:         //after 2 seconds the connection should be terminated by the broker because of the exception
1:         //on broker.addConnection
1:         assertTrue(Wait.waitFor(new Condition() {
1: 
1:             @Override
1:             public boolean isSatisified() throws Exception {
1:                 return server.getCurrentTransportCount().get() == 1;
1:             }
1: 
1:         }, 10000, 500));
1:     }
1: }
============================================================================