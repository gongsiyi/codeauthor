1:a677c21: /**
1:57b4941:  * Licensed to the Apache Software Foundation (ASF) under one or more
1:57b4941:  * contributor license agreements.  See the NOTICE file distributed with
1:57b4941:  * this work for additional information regarding copyright ownership.
1:57b4941:  * The ASF licenses this file to You under the Apache License, Version 2.0
1:57b4941:  * (the "License"); you may not use this file except in compliance with
1:57b4941:  * the License.  You may obtain a copy of the License at
3:a677c21:  *
1:230a86c:  *      http://www.apache.org/licenses/LICENSE-2.0
1:a677c21:  *
1:a677c21:  * Unless required by applicable law or agreed to in writing, software
1:a677c21:  * distributed under the License is distributed on an "AS IS" BASIS,
1:a677c21:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:a677c21:  * See the License for the specific language governing permissions and
1:a677c21:  * limitations under the License.
1:a677c21:  */
1:a677c21: package org.apache.activemq.usecases;
2:a677c21: 
1:b136df1: import java.util.LinkedList;
1:a677c21: import javax.jms.Connection;
1:a677c21: import javax.jms.JMSException;
1:a677c21: import javax.jms.Message;
1:a677c21: import javax.jms.TextMessage;
1:a677c21: 
1:a677c21: import org.apache.activemq.ActiveMQConnection;
1:a1a6766: import org.apache.activemq.broker.BrokerRegistry;
1:a1a6766: import org.apache.activemq.broker.region.DestinationStatistics;
1:a1a6766: import org.apache.activemq.broker.region.RegionBroker;
1:a1a6766: import org.apache.activemq.util.Wait;
1:a1a6766: import org.apache.activemq.util.Wait.Condition;
1:8bf987b: import org.slf4j.Logger;
1:8bf987b: import org.slf4j.LoggerFactory;
1:a677c21: 
1:a677c21: /**
1:b0c2a40:  * 
1:a677c21:  */
1:a677c21: public class ConsumeTopicPrefetchTest extends ProducerConsumerTestSupport {
1:8bf987b:     private static final Logger LOG = LoggerFactory.getLogger(ConsumeTopicPrefetchTest.class);
1:a677c21: 
1:a677c21:     protected int prefetchSize = 100;
1:a677c21:     protected String[] messageTexts;
1:a677c21:     protected long consumerTimeout = 10000L;
1:a677c21: 
1:a677c21:     public void testSendPrefetchSize() throws JMSException {
1:a677c21:         testWithMessageCount(prefetchSize);
1:a677c21:     }
1:a677c21: 
1:a677c21:     public void testSendDoublePrefetchSize() throws JMSException {
1:a677c21:         testWithMessageCount(prefetchSize * 2);
1:a677c21:     }
1:a677c21: 
1:a677c21:     public void testSendPrefetchSizePlusOne() throws JMSException {
1:a677c21:         testWithMessageCount(prefetchSize + 1);
1:a677c21:     }
1:a677c21: 
1:a677c21:     protected void testWithMessageCount(int messageCount) throws JMSException {
1:a677c21:         makeMessages(messageCount);
1:a677c21: 
1:933eb2f:         LOG.info("About to send and receive: " + messageCount + " on destination: " + destination
1:a677c21:                 + " of type: " + destination.getClass().getName());
1:a677c21: 
2:a677c21:         for (int i = 0; i < messageCount; i++) {
1:a677c21:             Message message = session.createTextMessage(messageTexts[i]);
1:a677c21:             producer.send(message);
1:a677c21:         }
1:a1a6766: 
1:a1a6766:         validateConsumerPrefetch(this.getSubject(), prefetchSize);
1:b136df1: 
1:b136df1:         LinkedList<TextMessage> consumed = new LinkedList<TextMessage>();
1:a677c21:         // lets consume them in two fetch batches
1:b136df1:         int batchSize = messageCount/2;
1:b136df1:         for (int i = 0; i < batchSize; i++) {
1:b136df1:             consumed.add(consumeMessge(i));
1:a677c21:         }
1:b136df1: 
1:b136df1:         // delayed delivered ack a .5 prefetch
1:b136df1:         validateConsumerPrefetchGreaterOrEqual(this.getSubject(), (long) Math.min(messageCount, 1.5 * prefetchSize));
1:b136df1: 
1:b136df1:         for (int i = 0; i < batchSize; i++) {
1:b136df1:             consumed.remove().acknowledge();
1:b136df1:         }
1:b136df1: 
1:b136df1:         // second batch to consume the rest
1:b136df1:         for (int i = batchSize; i < messageCount; i++) {
1:b136df1:             consumeMessge(i).acknowledge();
1:b136df1:         }
1:b136df1:         validateConsumerPrefetch(this.getSubject(), 0);
1:a677c21:     }
1:a677c21: 
1:a677c21:     protected Connection createConnection() throws Exception {
1:a677c21:         ActiveMQConnection connection = (ActiveMQConnection) super.createConnection();
1:a677c21:         connection.getPrefetchPolicy().setQueuePrefetch(prefetchSize);
1:a677c21:         connection.getPrefetchPolicy().setTopicPrefetch(prefetchSize);
1:a677c21:         return connection;
1:a677c21:     }
1:a677c21: 
1:a1a6766:     protected TextMessage consumeMessge(int i) throws JMSException {
1:a677c21:         Message message = consumer.receive(consumerTimeout);
1:a677c21:         assertTrue("Should have received a message by now for message: " + i, message != null);
1:a677c21:         assertTrue("Should be a TextMessage: " + message, message instanceof TextMessage);
1:a677c21:         TextMessage textMessage = (TextMessage) message;
1:a677c21:         assertEquals("Message content", messageTexts[i], textMessage.getText());
1:a1a6766:         return textMessage;
1:a677c21:     }
1:a677c21: 
1:a677c21: 
1:a677c21:     protected void makeMessages(int messageCount) {
1:a677c21:         messageTexts = new String[messageCount];
1:a677c21:         for (int i = 0; i < messageCount; i++) {
1:a677c21:             messageTexts[i] = "Message for test: + " + getName() + " = " + i;
1:a677c21:         }
1:a677c21:     }
1:a677c21: 
1:b136df1:     private void validateConsumerPrefetchGreaterOrEqual(String subject, long min) throws JMSException {
1:b136df1:         doValidateConsumerPrefetch(subject, min, true);
1:b136df1:     }
1:b136df1: 
1:b136df1:     protected void validateConsumerPrefetch(String subject, final long expectedCount) throws JMSException {
1:b136df1:         doValidateConsumerPrefetch(subject, expectedCount, false);
1:b136df1:     }
1:b136df1: 
1:b136df1:     protected void doValidateConsumerPrefetch(String destination, final long expectedCount, final boolean greaterOrEqual) throws JMSException {
1:a1a6766:         RegionBroker regionBroker = (RegionBroker) BrokerRegistry.getInstance().lookup("localhost").getRegionBroker();
1:b136df1:         for (org.apache.activemq.broker.region.Destination dest : regionBroker.getTopicRegion().getDestinationMap().values()) {
1:a1a6766:             final org.apache.activemq.broker.region.Destination target = dest;
1:a1a6766:             if (dest.getName().equals(destination)) {
1:a1a6766:                 try {
1:a1a6766:                     Wait.waitFor(new Condition() {
1:a1a6766:                         public boolean isSatisified() throws Exception {
1:a1a6766:                             DestinationStatistics stats = target.getDestinationStatistics();
1:a1a6766:                             LOG.info("inflight for : " + target.getName() + ": " +  stats.getInflight().getCount());
1:b136df1:                             if (greaterOrEqual) {
1:b136df1:                                 return stats.getInflight().getCount() >= expectedCount;
1:b136df1:                             } else {
1:b136df1:                                 return stats.getInflight().getCount() == expectedCount;
1:b136df1:                             }
1:a1a6766:                         }
1:a1a6766:                     });
1:a1a6766:                 } catch (Exception e) {
1:a1a6766:                     throw new JMSException(e.toString());
1:a1a6766:                 }
1:a1a6766:                 DestinationStatistics stats = dest.getDestinationStatistics();
1:a1a6766:                 LOG.info("inflight for : " + dest.getName() + ": " + stats.getInflight().getCount());
1:b136df1:                 if (greaterOrEqual) {
1:b136df1:                     assertTrue("inflight for: " + dest.getName() + ": " + stats.getInflight().getCount() + " > " + stats.getInflight().getCount(),
1:b136df1:                                              stats.getInflight().getCount() >= expectedCount);
1:b136df1:                 } else {
1:b136df1:                     assertEquals("inflight for: " + dest.getName() + ": " + stats.getInflight().getCount() + " matches",
1:b136df1:                         expectedCount, stats.getInflight().getCount());
1:b136df1:                 }
1:a1a6766:             }
1:a1a6766:         }
1:a1a6766:     }
1:a677c21: }
============================================================================
author:Hadrian Zbarcea
-------------------------------------------------------------------------------
commit:f9bec8f
author:gtully
-------------------------------------------------------------------------------
commit:b136df1
/////////////////////////////////////////////////////////////////////////
1: import java.util.LinkedList;
/////////////////////////////////////////////////////////////////////////
1: 
1:         LinkedList<TextMessage> consumed = new LinkedList<TextMessage>();
1:         int batchSize = messageCount/2;
1:         for (int i = 0; i < batchSize; i++) {
1:             consumed.add(consumeMessge(i));
1: 
1:         // delayed delivered ack a .5 prefetch
1:         validateConsumerPrefetchGreaterOrEqual(this.getSubject(), (long) Math.min(messageCount, 1.5 * prefetchSize));
1: 
1:         for (int i = 0; i < batchSize; i++) {
1:             consumed.remove().acknowledge();
1:         }
1: 
1:         // second batch to consume the rest
1:         for (int i = batchSize; i < messageCount; i++) {
1:             consumeMessge(i).acknowledge();
1:         }
1:         validateConsumerPrefetch(this.getSubject(), 0);
/////////////////////////////////////////////////////////////////////////
1:     private void validateConsumerPrefetchGreaterOrEqual(String subject, long min) throws JMSException {
1:         doValidateConsumerPrefetch(subject, min, true);
1:     }
1: 
1:     protected void validateConsumerPrefetch(String subject, final long expectedCount) throws JMSException {
1:         doValidateConsumerPrefetch(subject, expectedCount, false);
1:     }
1: 
1:     protected void doValidateConsumerPrefetch(String destination, final long expectedCount, final boolean greaterOrEqual) throws JMSException {
1:         for (org.apache.activemq.broker.region.Destination dest : regionBroker.getTopicRegion().getDestinationMap().values()) {
/////////////////////////////////////////////////////////////////////////
1:                             if (greaterOrEqual) {
1:                                 return stats.getInflight().getCount() >= expectedCount;
1:                             } else {
1:                                 return stats.getInflight().getCount() == expectedCount;
1:                             }
/////////////////////////////////////////////////////////////////////////
1:                 if (greaterOrEqual) {
1:                     assertTrue("inflight for: " + dest.getName() + ": " + stats.getInflight().getCount() + " > " + stats.getInflight().getCount(),
1:                                              stats.getInflight().getCount() >= expectedCount);
1:                 } else {
1:                     assertEquals("inflight for: " + dest.getName() + ": " + stats.getInflight().getCount() + " matches",
1:                         expectedCount, stats.getInflight().getCount());
1:                 }
author:Timothy A. Bish
-------------------------------------------------------------------------------
commit:ef24cc9
author:Hiram R. Chirino
-------------------------------------------------------------------------------
commit:bfbe90b
/////////////////////////////////////////////////////////////////////////
commit:b0c2a40
/////////////////////////////////////////////////////////////////////////
1:  * 
commit:933eb2f
/////////////////////////////////////////////////////////////////////////
0: import org.apache.activemq.broker.policy.IndividualDeadLetterViaXmlTest;
0: import org.apache.commons.logging.Log;
0: import org.apache.commons.logging.LogFactory;
0:     private static final Log LOG = LogFactory.getLog(ConsumeTopicPrefetchTest.class);
/////////////////////////////////////////////////////////////////////////
1:         LOG.info("About to send and receive: " + messageCount + " on destination: " + destination
commit:230a86c
/////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////
1:  *      http://www.apache.org/licenses/LICENSE-2.0
commit:57b4941
/////////////////////////////////////////////////////////////////////////
1:  * Licensed to the Apache Software Foundation (ASF) under one or more
1:  * contributor license agreements.  See the NOTICE file distributed with
1:  * this work for additional information regarding copyright ownership.
1:  * The ASF licenses this file to You under the Apache License, Version 2.0
1:  * (the "License"); you may not use this file except in compliance with
1:  * the License.  You may obtain a copy of the License at
author:Bosanac Dejan
-------------------------------------------------------------------------------
commit:8bf987b
/////////////////////////////////////////////////////////////////////////
1: import org.slf4j.Logger;
1: import org.slf4j.LoggerFactory;
1:     private static final Logger LOG = LoggerFactory.getLogger(ConsumeTopicPrefetchTest.class);
author:Gary Tully
-------------------------------------------------------------------------------
commit:a1a6766
/////////////////////////////////////////////////////////////////////////
1: import org.apache.activemq.broker.BrokerRegistry;
1: import org.apache.activemq.broker.region.DestinationStatistics;
1: import org.apache.activemq.broker.region.RegionBroker;
1: import org.apache.activemq.util.Wait;
1: import org.apache.activemq.util.Wait.Condition;
/////////////////////////////////////////////////////////////////////////
1:         validateConsumerPrefetch(this.getSubject(), prefetchSize);
1:         
/////////////////////////////////////////////////////////////////////////
1:     protected TextMessage consumeMessge(int i) throws JMSException {
1:         return textMessage;
/////////////////////////////////////////////////////////////////////////
0:     protected void validateConsumerPrefetch(String destination, final long expectedCount) throws JMSException {
1:         RegionBroker regionBroker = (RegionBroker) BrokerRegistry.getInstance().lookup("localhost").getRegionBroker();
0:         for (org.apache.activemq.broker.region.Destination dest : regionBroker.getQueueRegion().getDestinationMap().values()) {
1:             final org.apache.activemq.broker.region.Destination target = dest;
1:             if (dest.getName().equals(destination)) {
1:                 try {
1:                     Wait.waitFor(new Condition() {
1:                         public boolean isSatisified() throws Exception {
1:                             DestinationStatistics stats = target.getDestinationStatistics();
1:                             LOG.info("inflight for : " + target.getName() + ": " +  stats.getInflight().getCount());
0:                             return stats.getInflight().getCount() == expectedCount;
1:                         }
1:                     });
1:                 } catch (Exception e) {
1:                     throw new JMSException(e.toString());
1:                 }
1:                 DestinationStatistics stats = dest.getDestinationStatistics();
1:                 LOG.info("inflight for : " + dest.getName() + ": " + stats.getInflight().getCount());
0:                 assertEquals("inflight for: " + dest.getName() + ": " + stats.getInflight().getCount() + " matches", 
0:                         expectedCount, stats.getInflight().getCount());      
1:             }
1:         }
1:     }
author:James Strachan
-------------------------------------------------------------------------------
commit:a677c21
/////////////////////////////////////////////////////////////////////////
1: /**
1:  *
0:  * Copyright 2005-2006 The Apache Software Foundation
1:  *
0:  * Licensed under the Apache License, Version 2.0 (the "License");
0:  * you may not use this file except in compliance with the License.
0:  * You may obtain a copy of the License at
1:  *
0:  * http://www.apache.org/licenses/LICENSE-2.0
1:  *
1:  * Unless required by applicable law or agreed to in writing, software
1:  * distributed under the License is distributed on an "AS IS" BASIS,
1:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:  * See the License for the specific language governing permissions and
1:  * limitations under the License.
1:  */
1: package org.apache.activemq.usecases;
1: 
1: import javax.jms.Connection;
1: import javax.jms.JMSException;
1: import javax.jms.Message;
1: import javax.jms.TextMessage;
1: 
1: import org.apache.activemq.ActiveMQConnection;
1: 
1: /**
0:  * @version $Revision: 1.1.1.1 $
1:  */
1: public class ConsumeTopicPrefetchTest extends ProducerConsumerTestSupport {
1: 
1:     protected int prefetchSize = 100;
1:     protected String[] messageTexts;
1:     protected long consumerTimeout = 10000L;
1: 
1:     public void testSendPrefetchSize() throws JMSException {
1:         testWithMessageCount(prefetchSize);
1:     }
1: 
1:     public void testSendDoublePrefetchSize() throws JMSException {
1:         testWithMessageCount(prefetchSize * 2);
1:     }
1: 
1:     public void testSendPrefetchSizePlusOne() throws JMSException {
1:         testWithMessageCount(prefetchSize + 1);
1:     }
1: 
1:     protected void testWithMessageCount(int messageCount) throws JMSException {
1:         makeMessages(messageCount);
1: 
0:         log.info("About to send and receive: " + messageCount + " on destination: " + destination
1:                 + " of type: " + destination.getClass().getName());
1: 
1:         for (int i = 0; i < messageCount; i++) {
1:             Message message = session.createTextMessage(messageTexts[i]);
1:             producer.send(message);
1:         }
1: 
1:         // lets consume them in two fetch batches
1:         for (int i = 0; i < messageCount; i++) {
0:             consumeMessge(i);
1:         }
1:     }
1: 
1:     protected Connection createConnection() throws Exception {
1:         ActiveMQConnection connection = (ActiveMQConnection) super.createConnection();
1:         connection.getPrefetchPolicy().setQueuePrefetch(prefetchSize);
1:         connection.getPrefetchPolicy().setTopicPrefetch(prefetchSize);
1:         return connection;
1:     }
1: 
0:     protected void consumeMessge(int i) throws JMSException {
1:         Message message = consumer.receive(consumerTimeout);
1:         assertTrue("Should have received a message by now for message: " + i, message != null);
1:         assertTrue("Should be a TextMessage: " + message, message instanceof TextMessage);
1:         TextMessage textMessage = (TextMessage) message;
1:         assertEquals("Message content", messageTexts[i], textMessage.getText());
1:     }
1: 
1: 
1:     protected void makeMessages(int messageCount) {
1:         messageTexts = new String[messageCount];
1:         for (int i = 0; i < messageCount; i++) {
1:             messageTexts[i] = "Message for test: + " + getName() + " = " + i;
1:         }
1:     }
1: 
1: }
============================================================================