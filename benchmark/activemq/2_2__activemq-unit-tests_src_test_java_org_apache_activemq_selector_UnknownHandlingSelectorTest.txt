1:6e9ecdf: /**
1:6e9ecdf:  * Licensed to the Apache Software Foundation (ASF) under one or more
1:6e9ecdf:  * contributor license agreements.  See the NOTICE file distributed with
1:6e9ecdf:  * this work for additional information regarding copyright ownership.
1:6e9ecdf:  * The ASF licenses this file to You under the Apache License, Version 2.0
1:6e9ecdf:  * (the "License"); you may not use this file except in compliance with
1:6e9ecdf:  * the License.  You may obtain a copy of the License at
1:6e9ecdf:  *
1:6e9ecdf:  *      http://www.apache.org/licenses/LICENSE-2.0
1:6e9ecdf:  *
1:6e9ecdf:  * Unless required by applicable law or agreed to in writing, software
1:6e9ecdf:  * distributed under the License is distributed on an "AS IS" BASIS,
1:6e9ecdf:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:6e9ecdf:  * See the License for the specific language governing permissions and
1:6e9ecdf:  * limitations under the License.
1:6e9ecdf:  */
1:6e9ecdf: package org.apache.activemq.selector;
1:6e9ecdf: 
1:6e9ecdf: import static org.junit.Assert.assertEquals;
1:6e9ecdf: import static org.junit.Assert.assertTrue;
1:6e9ecdf: 
1:6e9ecdf: import javax.jms.JMSException;
1:6e9ecdf: import javax.jms.Message;
1:6e9ecdf: 
1:6e9ecdf: import org.apache.activemq.command.ActiveMQMessage;
1:6e9ecdf: import org.apache.activemq.command.ActiveMQTopic;
1:6e9ecdf: import org.apache.activemq.filter.BooleanExpression;
1:50d27e7: import org.apache.activemq.filter.NonCachedMessageEvaluationContext;
1:6e9ecdf: import org.junit.Before;
1:6e9ecdf: import org.junit.Test;
1:6e9ecdf: 
1:6e9ecdf: public class UnknownHandlingSelectorTest {
1:6e9ecdf: 
1:6e9ecdf:     private Message message;
1:6e9ecdf: 
1:6e9ecdf:     @Before
1:6e9ecdf:     public void setUp() throws Exception {
1:6e9ecdf:         message = new ActiveMQMessage();
1:6e9ecdf:         message.setJMSDestination(new ActiveMQTopic("FOO.BAR"));
1:6e9ecdf:         message.setJMSType("selector-test");
1:6e9ecdf:         message.setJMSMessageID("connection:1:1:1:1");
1:6e9ecdf:         message.setBooleanProperty("trueProp", true);
1:6e9ecdf:         message.setBooleanProperty("falseProp", false);
1:6e9ecdf:         message.setObjectProperty("nullProp", null);
1:6e9ecdf:     }
1:6e9ecdf: 
1:6e9ecdf:     /**
1:6e9ecdf:      * | NOT
1:6e9ecdf:      * +------+------
1:6e9ecdf:      * |  T   |   F
1:6e9ecdf:      * |  F   |   T
1:6e9ecdf:      * |  U   |   U
1:6e9ecdf:      * +------+-------
1:6e9ecdf:      */
1:6e9ecdf:     @Test
1:6e9ecdf:     public void notEvaluation() throws Exception {
1:6e9ecdf:         assertSelector("not(trueProp)", false);
1:6e9ecdf:         assertSelector("not(falseProp)", true);
1:6e9ecdf:         assertSelector("not(unknownProp)", false);
1:6e9ecdf:     }
1:6e9ecdf: 
1:6e9ecdf:     /**
1:6e9ecdf:      * | AND  |   T   |   F   |   U
1:6e9ecdf:      * +------+-------+-------+-------
1:6e9ecdf:      * |  T   |   T   |   F   |   U
1:6e9ecdf:      * |  F   |   F   |   F   |   F
1:6e9ecdf:      * |  U   |   U   |   F   |   U
1:6e9ecdf:      * +------+-------+-------+-------
1:6e9ecdf:      */
1:6e9ecdf:     @Test
1:6e9ecdf:     public void andEvaluation() throws Exception {
1:6e9ecdf:         assertSelectorEvaluatesToTrue("trueProp AND trueProp");
1:6e9ecdf:         assertSelectorEvaluatesToFalse("trueProp AND falseProp");
1:6e9ecdf:         assertSelectorEvaluatesToFalse("falseProp AND trueProp");
1:6e9ecdf:         assertSelectorEvaluatesToFalse("falseProp AND falseProp");
1:6e9ecdf:         assertSelectorEvaluatesToFalse("falseProp AND unknownProp");
1:6e9ecdf:         assertSelectorEvaluatesToFalse("unknownProp AND falseProp");
1:6e9ecdf:         assertSelectorEvaluatesToUnknown("trueProp AND unknownProp");
1:6e9ecdf:         assertSelectorEvaluatesToUnknown("unknownProp AND trueProp");
1:6e9ecdf:         assertSelectorEvaluatesToUnknown("unknownProp AND unknownProp");
1:6e9ecdf:     }
1:6e9ecdf: 
1:6e9ecdf:     /**
1:6e9ecdf:      * | OR   |   T   |   F   |   U
1:6e9ecdf:      * +------+-------+-------+--------
1:6e9ecdf:      * |  T   |   T   |   T   |   T
1:6e9ecdf:      * |  F   |   T   |   F   |   U
1:6e9ecdf:      * |  U   |   T   |   U   |   U
1:6e9ecdf:      * +------+-------+-------+-------
1:6e9ecdf:      */
1:6e9ecdf:     @Test
1:6e9ecdf:     public void orEvaluation() throws Exception {
1:6e9ecdf:         assertSelectorEvaluatesToTrue("trueProp OR trueProp");
1:6e9ecdf:         assertSelectorEvaluatesToTrue("trueProp OR falseProp");
1:6e9ecdf:         assertSelectorEvaluatesToTrue("falseProp OR trueProp");
1:6e9ecdf:         assertSelectorEvaluatesToTrue("trueProp OR unknownProp");
1:6e9ecdf:         assertSelectorEvaluatesToTrue("unknownProp OR trueProp");
1:6e9ecdf:         assertSelectorEvaluatesToFalse("falseProp OR falseProp");
1:6e9ecdf:         assertSelectorEvaluatesToUnknown("falseProp OR unknownProp");
1:6e9ecdf:         assertSelectorEvaluatesToUnknown("unknownProp OR falseProp");
1:6e9ecdf:         assertSelectorEvaluatesToUnknown("unknownProp OR unknownProp");
1:6e9ecdf:     }
1:6e9ecdf: 
1:6e9ecdf:     @Test
1:6e9ecdf:     public void comparisonWithUnknownShouldEvaluateToUnknown() throws Exception {
1:6e9ecdf:         assertSelectorEvaluatesToUnknown("unknownProp = 0");
1:6e9ecdf:         assertSelectorEvaluatesToUnknown("unknownProp > 0");
1:6e9ecdf:         assertSelectorEvaluatesToUnknown("unknownProp >= 0");
1:6e9ecdf:         assertSelectorEvaluatesToUnknown("unknownProp < 0");
1:6e9ecdf:         assertSelectorEvaluatesToUnknown("unknownProp <= 0");
1:6e9ecdf:         assertSelectorEvaluatesToUnknown("unknownProp <> 0");
1:6e9ecdf:         assertSelectorEvaluatesToUnknown("unknownProp LIKE 'zero'");
1:6e9ecdf:         assertSelectorEvaluatesToUnknown("unknownProp NOT LIKE 'zero'");
1:6e9ecdf:         assertSelectorEvaluatesToUnknown("unknownProp IN ('zero')");
1:6e9ecdf:         assertSelectorEvaluatesToUnknown("unknownProp NOT IN ('zero')");
1:6e9ecdf:         assertSelectorEvaluatesToUnknown("unknownProp BETWEEN 1 AND 2");
1:6e9ecdf:         assertSelectorEvaluatesToUnknown("unknownProp NOT BETWEEN 1 AND 2");
1:6e9ecdf:     }
1:6e9ecdf: 
1:6e9ecdf:     @Test
1:6e9ecdf:     public void comparisonWithNullPropShouldEvaluateToUnknown() throws Exception {
1:6e9ecdf:         assertSelectorEvaluatesToUnknown("nullProp = 0");
1:6e9ecdf:         assertSelectorEvaluatesToUnknown("nullProp > 0");
1:6e9ecdf:         assertSelectorEvaluatesToUnknown("nullProp >= 0");
1:6e9ecdf:         assertSelectorEvaluatesToUnknown("nullProp < 0");
1:6e9ecdf:         assertSelectorEvaluatesToUnknown("nullProp <= 0");
1:6e9ecdf:         assertSelectorEvaluatesToUnknown("nullProp <> 0");
1:6e9ecdf:         assertSelectorEvaluatesToUnknown("nullProp LIKE 'zero'");
1:6e9ecdf:         assertSelectorEvaluatesToUnknown("nullProp NOT LIKE 'zero'");
1:6e9ecdf:         assertSelectorEvaluatesToUnknown("nullProp IN ('zero')");
1:6e9ecdf:         assertSelectorEvaluatesToUnknown("nullProp NOT IN ('zero')");
1:6e9ecdf:         assertSelectorEvaluatesToUnknown("nullProp BETWEEN 1 AND 2");
1:6e9ecdf:         assertSelectorEvaluatesToUnknown("nullProp NOT BETWEEN 1 AND 2");
1:6e9ecdf:     }
1:6e9ecdf: 
1:6e9ecdf:     @Test
1:6e9ecdf:     public void isNullIsNotNull() throws Exception {
1:6e9ecdf:         assertSelectorEvaluatesToTrue("unknownProp IS NULL");
1:6e9ecdf:         assertSelectorEvaluatesToTrue("nullProp IS NULL");
1:6e9ecdf:         assertSelectorEvaluatesToFalse("trueProp IS NULL");
1:6e9ecdf:         assertSelectorEvaluatesToFalse("unknownProp IS NOT NULL");
1:6e9ecdf:         assertSelectorEvaluatesToFalse("nullProp IS NOT NULL");
1:6e9ecdf:         assertSelectorEvaluatesToTrue("trueProp IS NOT NULL");
1:6e9ecdf:     }
1:6e9ecdf: 
1:6e9ecdf:     @Test
1:6e9ecdf:     public void arithmeticWithNull() throws Exception {
1:6e9ecdf:         assertSelectorEvaluatesToUnknown("-unknownProp = 0");
1:6e9ecdf:         assertSelectorEvaluatesToUnknown("+unknownProp = 0");
1:6e9ecdf:         assertSelectorEvaluatesToUnknown("unknownProp * 2 = 0");
1:6e9ecdf:         assertSelectorEvaluatesToUnknown("unknownProp / 2 = 0");
1:6e9ecdf:         assertSelectorEvaluatesToUnknown("unknownProp + 2 = 0");
1:6e9ecdf:         assertSelectorEvaluatesToUnknown("unknownProp - 2 = 0");
1:6e9ecdf:     }
1:6e9ecdf: 
1:6e9ecdf:     protected void assertSelectorEvaluatesToUnknown(String selector) throws JMSException {
1:6e9ecdf:         assertSelector(selector, false);
1:6e9ecdf:         assertSelector(not(selector), false);
1:6e9ecdf:     }
1:6e9ecdf:     protected void assertSelectorEvaluatesToTrue(String selector) throws JMSException {
1:6e9ecdf:         assertSelector(selector, true);
1:6e9ecdf:         assertSelector(not(selector), false);
1:6e9ecdf:     }
1:6e9ecdf: 
1:6e9ecdf:     protected void assertSelectorEvaluatesToFalse(String selector) throws JMSException {
1:6e9ecdf:         assertSelector(selector, false);
1:6e9ecdf:         assertSelector(not(selector), true);
1:6e9ecdf:     }
1:6e9ecdf: 
1:6e9ecdf:     protected void assertSelector(String text, boolean matches) throws JMSException {
1:6e9ecdf:         BooleanExpression selector = SelectorParser.parse(text);
1:6e9ecdf:         assertTrue("Created a valid selector", selector != null);
1:50d27e7:         NonCachedMessageEvaluationContext context = new NonCachedMessageEvaluationContext();
1:6e9ecdf:         context.setMessageReference((org.apache.activemq.command.Message)message);
1:6e9ecdf:         boolean value = selector.matches(context);
1:6e9ecdf:         assertEquals("Selector for: " + text, matches, value);
1:50d27e7:         assertEquals("ref 0", 0, ((ActiveMQMessage)message).getReferenceCount());
1:6e9ecdf:     }
1:6e9ecdf: 
1:6e9ecdf:     private static String not(String selector) {
1:6e9ecdf:         return "not(" + selector + ")";
1:6e9ecdf:     }
1:6e9ecdf: }
============================================================================
author:gtully
-------------------------------------------------------------------------------
commit:50d27e7
/////////////////////////////////////////////////////////////////////////
1: import org.apache.activemq.filter.NonCachedMessageEvaluationContext;
/////////////////////////////////////////////////////////////////////////
1:         NonCachedMessageEvaluationContext context = new NonCachedMessageEvaluationContext();
1:         assertEquals("ref 0", 0, ((ActiveMQMessage)message).getReferenceCount());
author:Timothy Bish
-------------------------------------------------------------------------------
commit:6e9ecdf
/////////////////////////////////////////////////////////////////////////
1: /**
1:  * Licensed to the Apache Software Foundation (ASF) under one or more
1:  * contributor license agreements.  See the NOTICE file distributed with
1:  * this work for additional information regarding copyright ownership.
1:  * The ASF licenses this file to You under the Apache License, Version 2.0
1:  * (the "License"); you may not use this file except in compliance with
1:  * the License.  You may obtain a copy of the License at
1:  *
1:  *      http://www.apache.org/licenses/LICENSE-2.0
1:  *
1:  * Unless required by applicable law or agreed to in writing, software
1:  * distributed under the License is distributed on an "AS IS" BASIS,
1:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:  * See the License for the specific language governing permissions and
1:  * limitations under the License.
1:  */
1: package org.apache.activemq.selector;
1: 
1: import static org.junit.Assert.assertEquals;
1: import static org.junit.Assert.assertTrue;
1: 
1: import javax.jms.JMSException;
1: import javax.jms.Message;
1: 
1: import org.apache.activemq.command.ActiveMQMessage;
1: import org.apache.activemq.command.ActiveMQTopic;
1: import org.apache.activemq.filter.BooleanExpression;
0: import org.apache.activemq.filter.MessageEvaluationContext;
1: import org.junit.Before;
1: import org.junit.Test;
1: 
1: public class UnknownHandlingSelectorTest {
1: 
1:     private Message message;
1: 
1:     @Before
1:     public void setUp() throws Exception {
1:         message = new ActiveMQMessage();
1:         message.setJMSDestination(new ActiveMQTopic("FOO.BAR"));
1:         message.setJMSType("selector-test");
1:         message.setJMSMessageID("connection:1:1:1:1");
1:         message.setBooleanProperty("trueProp", true);
1:         message.setBooleanProperty("falseProp", false);
1:         message.setObjectProperty("nullProp", null);
1:     }
1: 
1:     /**
1:      * | NOT
1:      * +------+------
1:      * |  T   |   F
1:      * |  F   |   T
1:      * |  U   |   U
1:      * +------+-------
1:      */
1:     @Test
1:     public void notEvaluation() throws Exception {
1:         assertSelector("not(trueProp)", false);
1:         assertSelector("not(falseProp)", true);
1:         assertSelector("not(unknownProp)", false);
1:     }
1: 
1:     /**
1:      * | AND  |   T   |   F   |   U
1:      * +------+-------+-------+-------
1:      * |  T   |   T   |   F   |   U
1:      * |  F   |   F   |   F   |   F
1:      * |  U   |   U   |   F   |   U
1:      * +------+-------+-------+-------
1:      */
1:     @Test
1:     public void andEvaluation() throws Exception {
1:         assertSelectorEvaluatesToTrue("trueProp AND trueProp");
1:         assertSelectorEvaluatesToFalse("trueProp AND falseProp");
1:         assertSelectorEvaluatesToFalse("falseProp AND trueProp");
1:         assertSelectorEvaluatesToFalse("falseProp AND falseProp");
1:         assertSelectorEvaluatesToFalse("falseProp AND unknownProp");
1:         assertSelectorEvaluatesToFalse("unknownProp AND falseProp");
1:         assertSelectorEvaluatesToUnknown("trueProp AND unknownProp");
1:         assertSelectorEvaluatesToUnknown("unknownProp AND trueProp");
1:         assertSelectorEvaluatesToUnknown("unknownProp AND unknownProp");
1:     }
1: 
1:     /**
1:      * | OR   |   T   |   F   |   U
1:      * +------+-------+-------+--------
1:      * |  T   |   T   |   T   |   T
1:      * |  F   |   T   |   F   |   U
1:      * |  U   |   T   |   U   |   U
1:      * +------+-------+-------+-------
1:      */
1:     @Test
1:     public void orEvaluation() throws Exception {
1:         assertSelectorEvaluatesToTrue("trueProp OR trueProp");
1:         assertSelectorEvaluatesToTrue("trueProp OR falseProp");
1:         assertSelectorEvaluatesToTrue("falseProp OR trueProp");
1:         assertSelectorEvaluatesToTrue("trueProp OR unknownProp");
1:         assertSelectorEvaluatesToTrue("unknownProp OR trueProp");
1:         assertSelectorEvaluatesToFalse("falseProp OR falseProp");
1:         assertSelectorEvaluatesToUnknown("falseProp OR unknownProp");
1:         assertSelectorEvaluatesToUnknown("unknownProp OR falseProp");
1:         assertSelectorEvaluatesToUnknown("unknownProp OR unknownProp");
1:     }
1: 
1:     @Test
1:     public void comparisonWithUnknownShouldEvaluateToUnknown() throws Exception {
1:         assertSelectorEvaluatesToUnknown("unknownProp = 0");
1:         assertSelectorEvaluatesToUnknown("unknownProp > 0");
1:         assertSelectorEvaluatesToUnknown("unknownProp >= 0");
1:         assertSelectorEvaluatesToUnknown("unknownProp < 0");
1:         assertSelectorEvaluatesToUnknown("unknownProp <= 0");
1:         assertSelectorEvaluatesToUnknown("unknownProp <> 0");
1:         assertSelectorEvaluatesToUnknown("unknownProp LIKE 'zero'");
1:         assertSelectorEvaluatesToUnknown("unknownProp NOT LIKE 'zero'");
1:         assertSelectorEvaluatesToUnknown("unknownProp IN ('zero')");
1:         assertSelectorEvaluatesToUnknown("unknownProp NOT IN ('zero')");
1:         assertSelectorEvaluatesToUnknown("unknownProp BETWEEN 1 AND 2");
1:         assertSelectorEvaluatesToUnknown("unknownProp NOT BETWEEN 1 AND 2");
1:     }
1: 
1:     @Test
1:     public void comparisonWithNullPropShouldEvaluateToUnknown() throws Exception {
1:         assertSelectorEvaluatesToUnknown("nullProp = 0");
1:         assertSelectorEvaluatesToUnknown("nullProp > 0");
1:         assertSelectorEvaluatesToUnknown("nullProp >= 0");
1:         assertSelectorEvaluatesToUnknown("nullProp < 0");
1:         assertSelectorEvaluatesToUnknown("nullProp <= 0");
1:         assertSelectorEvaluatesToUnknown("nullProp <> 0");
1:         assertSelectorEvaluatesToUnknown("nullProp LIKE 'zero'");
1:         assertSelectorEvaluatesToUnknown("nullProp NOT LIKE 'zero'");
1:         assertSelectorEvaluatesToUnknown("nullProp IN ('zero')");
1:         assertSelectorEvaluatesToUnknown("nullProp NOT IN ('zero')");
1:         assertSelectorEvaluatesToUnknown("nullProp BETWEEN 1 AND 2");
1:         assertSelectorEvaluatesToUnknown("nullProp NOT BETWEEN 1 AND 2");
1:     }
1: 
1:     @Test
1:     public void isNullIsNotNull() throws Exception {
1:         assertSelectorEvaluatesToTrue("unknownProp IS NULL");
1:         assertSelectorEvaluatesToTrue("nullProp IS NULL");
1:         assertSelectorEvaluatesToFalse("trueProp IS NULL");
1:         assertSelectorEvaluatesToFalse("unknownProp IS NOT NULL");
1:         assertSelectorEvaluatesToFalse("nullProp IS NOT NULL");
1:         assertSelectorEvaluatesToTrue("trueProp IS NOT NULL");
1:     }
1: 
1:     @Test
1:     public void arithmeticWithNull() throws Exception {
1:         assertSelectorEvaluatesToUnknown("-unknownProp = 0");
1:         assertSelectorEvaluatesToUnknown("+unknownProp = 0");
1:         assertSelectorEvaluatesToUnknown("unknownProp * 2 = 0");
1:         assertSelectorEvaluatesToUnknown("unknownProp / 2 = 0");
1:         assertSelectorEvaluatesToUnknown("unknownProp + 2 = 0");
1:         assertSelectorEvaluatesToUnknown("unknownProp - 2 = 0");
1:     }
1: 
1:     protected void assertSelectorEvaluatesToUnknown(String selector) throws JMSException {
1:         assertSelector(selector, false);
1:         assertSelector(not(selector), false);
1:     }
1:     protected void assertSelectorEvaluatesToTrue(String selector) throws JMSException {
1:         assertSelector(selector, true);
1:         assertSelector(not(selector), false);
1:     }
1: 
1:     protected void assertSelectorEvaluatesToFalse(String selector) throws JMSException {
1:         assertSelector(selector, false);
1:         assertSelector(not(selector), true);
1:     }
1: 
1:     protected void assertSelector(String text, boolean matches) throws JMSException {
1:         BooleanExpression selector = SelectorParser.parse(text);
1:         assertTrue("Created a valid selector", selector != null);
0:         MessageEvaluationContext context = new MessageEvaluationContext();
1:         context.setMessageReference((org.apache.activemq.command.Message)message);
1:         boolean value = selector.matches(context);
1:         assertEquals("Selector for: " + text, matches, value);
1:     }
1: 
1:     private static String not(String selector) {
1:         return "not(" + selector + ")";
1:     }
1: }
============================================================================