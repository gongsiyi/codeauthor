1:833d308: /**
1:833d308:  * Licensed to the Apache Software Foundation (ASF) under one or more
1:833d308:  * contributor license agreements.  See the NOTICE file distributed with
1:833d308:  * this work for additional information regarding copyright ownership.
1:833d308:  * The ASF licenses this file to You under the Apache License, Version 2.0
1:833d308:  * (the "License"); you may not use this file except in compliance with
1:833d308:  * the License.  You may obtain a copy of the License at
1:833d308:  *
1:833d308:  *      http://www.apache.org/licenses/LICENSE-2.0
1:833d308:  *
1:833d308:  * Unless required by applicable law or agreed to in writing, software
1:833d308:  * distributed under the License is distributed on an "AS IS" BASIS,
1:833d308:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:833d308:  * See the License for the specific language governing permissions and
1:833d308:  * limitations under the License.
1:833d308:  */
1:833d308: package org.apache.activemq.usecases;
1:833d308: 
1:833d308: import static org.junit.Assert.assertNotNull;
1:833d308: import static org.junit.Assert.assertNull;
1:833d308: 
1:833d308: import java.io.File;
1:7c293b6: import java.util.Arrays;
1:7c293b6: import java.util.Collection;
1:833d308: 
1:7c293b6: import javax.jms.Destination;
1:7c293b6: import javax.jms.JMSException;
1:7c293b6: import javax.jms.MessageProducer;
1:833d308: import javax.jms.Session;
1:7c293b6: import javax.jms.TextMessage;
1:833d308: import javax.jms.Topic;
1:833d308: import javax.jms.TopicConnection;
1:833d308: import javax.jms.TopicPublisher;
1:833d308: import javax.jms.TopicSession;
1:833d308: import javax.jms.TopicSubscriber;
1:833d308: 
1:7c293b6: import org.apache.activemq.ActiveMQConnection;
1:833d308: import org.apache.activemq.ActiveMQConnectionFactory;
1:833d308: import org.apache.activemq.broker.BrokerService;
1:833d308: import org.apache.activemq.broker.TransportConnector;
1:833d308: import org.apache.activemq.command.CommandTypes;
1:833d308: import org.apache.activemq.store.kahadb.KahaDBStore;
1:833d308: import org.junit.After;
1:833d308: import org.junit.Before;
1:833d308: import org.junit.Rule;
1:833d308: import org.junit.Test;
1:833d308: import org.junit.rules.TestName;
1:7c293b6: import org.junit.runner.RunWith;
1:7c293b6: import org.junit.runners.Parameterized;
1:7c293b6: import org.junit.runners.Parameterized.Parameters;
1:833d308: import org.slf4j.Logger;
1:833d308: import org.slf4j.LoggerFactory;
1:833d308: 
1:833d308: /**
1:833d308:  * Test for spec compliance for durable subscriptions that change the noLocal flag.
1:833d308:  */
1:7c293b6: @RunWith(Parameterized.class)
1:833d308: public class DurableSubscriptionWithNoLocalTest {
1:833d308: 
1:833d308:     private static final Logger LOG = LoggerFactory.getLogger(DurableSubscriptionWithNoLocalTest.class);
1:833d308: 
1:833d308:     private final int MSG_COUNT = 10;
1:833d308:     private final String KAHADB_DIRECTORY = "target/activemq-data/";
1:833d308: 
1:833d308:     @Rule public TestName name = new TestName();
1:833d308: 
1:833d308:     private BrokerService brokerService;
1:833d308:     private String connectionUri;
1:833d308:     private ActiveMQConnectionFactory factory;
1:7c293b6:     private final boolean keepDurableSubsActive;
1:7c293b6: 
1:7c293b6:     @Parameters(name="keepDurableSubsActive={0}")
1:7c293b6:     public static Collection<Object[]> data() {
1:7c293b6:         return Arrays.asList(new Object[][] {
1:7c293b6:                 {true},
1:7c293b6:                 {false}
1:7c293b6:         });
1:7c293b6:     }
1:7c293b6: 
1:7c293b6:     public DurableSubscriptionWithNoLocalTest(final boolean keepDurableSubsActive) {
1:7c293b6:         this.keepDurableSubsActive = keepDurableSubsActive;
1:7c293b6:     }
1:833d308: 
1:833d308:     @Before
1:833d308:     public void setUp() throws Exception {
1:833d308:         createBroker(true);
1:833d308:     }
1:833d308: 
1:833d308:     @After
1:833d308:     public void tearDown() throws Exception {
1:833d308:         brokerService.stop();
1:833d308:         brokerService.waitUntilStopped();
1:833d308:     }
1:833d308: 
1:7c293b6:     /**
1:7c293b6:      * Make sure that NoLocal works for connection started/stopped
1:7c293b6:      *
1:7c293b6:      * @throws JMSException
1:7c293b6:      */
1:7c293b6:     @Test(timeout = 60000)
1:7c293b6:     public void testNoLocalStillWorkWithConnectionRestart() throws Exception {
1:7c293b6:         ActiveMQConnection connection = null;
1:7c293b6:         try {
1:7c293b6:             connection = (ActiveMQConnection) factory.createConnection();
1:7c293b6:             connection.setClientID("test-client");
1:7c293b6:             connection.start();
1:7c293b6:             test(connection, "test message 1");
1:7c293b6:             connection.stop();
1:7c293b6:             connection.start();
1:7c293b6:             test(connection, "test message 2");
1:7c293b6:         } finally {
1:7c293b6:             if (connection != null) {
1:7c293b6:                 connection.close();
1:7c293b6:             }
1:7c293b6:         }
1:7c293b6:     }
1:7c293b6: 
1:7c293b6:     /**
1:7c293b6:      * Make sure that NoLocal works for multiple connections to the same subscription
1:7c293b6:      *
1:7c293b6:      * @throws JMSException
1:7c293b6:      */
1:7c293b6:     @Test(timeout = 60000)
1:7c293b6:     public void testNoLocalStillWorksNewConnection() throws Exception {
1:7c293b6:         ActiveMQConnection connection = null;
1:7c293b6:         try {
1:7c293b6:             connection = (ActiveMQConnection) factory.createConnection();
1:7c293b6:             connection.setClientID("test-client");
1:7c293b6:             connection.start();
1:7c293b6:             test(connection, "test message 1");
1:7c293b6:         } finally {
1:7c293b6:             if (connection != null) {
1:7c293b6:                 connection.close();
1:7c293b6:             }
1:7c293b6:         }
1:7c293b6: 
1:7c293b6:         try {
1:7c293b6:             connection = (ActiveMQConnection) factory.createConnection();
1:7c293b6:             connection.setClientID("test-client");
1:7c293b6:             connection.start();
1:7c293b6:             test(connection, "test message 2");
1:7c293b6:         } finally {
1:7c293b6:             if (connection != null) {
1:7c293b6:                 connection.close();
1:7c293b6:             }
1:7c293b6:         }
1:7c293b6:     }
1:7c293b6: 
1:7c293b6:     /**
1:7c293b6:      * Make sure that NoLocal works after restart
1:7c293b6:      *
1:7c293b6:      * @throws JMSException
1:7c293b6:      */
1:7c293b6:     @Test(timeout = 60000)
1:7c293b6:     public void testNoLocalStillWorksRestartBroker() throws Exception {
1:7c293b6:         ActiveMQConnection connection = null;
1:7c293b6:         try {
1:7c293b6:             connection = (ActiveMQConnection) factory.createConnection();
1:7c293b6:             connection.setClientID("test-client");
1:7c293b6:             connection.start();
1:7c293b6:             test(connection, "test message 1");
1:7c293b6:         } finally {
1:7c293b6:             if (connection != null) {
1:7c293b6:                 connection.close();
1:7c293b6:             }
1:7c293b6:         }
1:7c293b6: 
1:7c293b6:         tearDown();
1:7c293b6:         createBroker(false);
1:7c293b6: 
1:7c293b6:         try {
1:7c293b6:             connection = (ActiveMQConnection) factory.createConnection();
1:7c293b6:             connection.setClientID("test-client");
1:7c293b6:             connection.start();
1:7c293b6:             test(connection, "test message 2");
1:7c293b6:         } finally {
1:7c293b6:             if (connection != null) {
1:7c293b6:                 connection.close();
1:7c293b6:             }
1:7c293b6:         }
1:7c293b6:     }
1:7c293b6: 
1:7c293b6:     void test(final ActiveMQConnection connection, final String body) throws Exception {
1:7c293b6: 
1:7c293b6:         Session incomingMessagesSession = connection.createSession(false, Session.AUTO_ACKNOWLEDGE);
1:7c293b6:         Topic topic = incomingMessagesSession.createTopic("test.topic");
1:7c293b6:         TopicSubscriber consumer = incomingMessagesSession.createDurableSubscriber(topic, "test-subscription", null, true);
1:7c293b6: 
1:7c293b6:         Session outgoingMessagesSession = connection.createSession(false, Session.AUTO_ACKNOWLEDGE);
1:7c293b6:         Destination destination = outgoingMessagesSession.createTopic("test.topic");
1:7c293b6:         MessageProducer producer = outgoingMessagesSession.createProducer(destination);
1:7c293b6:         TextMessage textMessage = outgoingMessagesSession.createTextMessage(body);
1:7c293b6:         producer.send(textMessage);
1:7c293b6:         producer.close();
1:7c293b6:         System.out.println("message sent: " + textMessage.getJMSMessageID() + "; body: " + textMessage.getText());
1:7c293b6:         outgoingMessagesSession.close();
1:7c293b6: 
1:7c293b6:         assertNull(consumer.receive(2000));
1:7c293b6: 
1:7c293b6:         consumer.close();
1:7c293b6:         incomingMessagesSession.close();
1:7c293b6:     }
1:7c293b6: 
1:833d308:     @Test(timeout = 60000)
1:833d308:     public void testDurableSubWithNoLocalChange() throws Exception {
1:833d308:         TopicConnection connection = factory.createTopicConnection();
1:833d308: 
1:833d308:         connection.setClientID(getClientId());
1:833d308:         connection.start();
1:833d308: 
1:833d308:         TopicSession session = connection.createTopicSession(false, Session.AUTO_ACKNOWLEDGE);
1:833d308:         Topic topic = session.createTopic(getDestinationName());
1:833d308:         TopicPublisher publisher = session.createPublisher(topic);
1:833d308: 
1:833d308:         LOG.debug("Create DurableSubscriber with noLocal = true");
1:833d308:         TopicSubscriber subscriber = session.createSubscriber(topic);
1:833d308:         TopicSubscriber durableSub = session.createDurableSubscriber(topic, getSubscriptionName(), null, true);
1:833d308: 
1:833d308:         LOG.debug("Sending " + MSG_COUNT + " messages to topic");
1:833d308:         for (int i = 0; i < MSG_COUNT; i++) {
1:833d308:             publisher.publish(session.createMessage());
1:833d308:         }
1:833d308: 
1:833d308:         LOG.info("Attempting to receive messages from non-durable subscriber");
1:833d308:         for (int i = 0; i < MSG_COUNT; i++) {
1:833d308:             assertNotNull(subscriber.receive(500));
1:833d308:         }
1:833d308: 
1:833d308:         LOG.info("Attempting to receive messages from (noLocal=true) subscriber");
1:833d308:         assertNull(durableSub.receive(500));
1:833d308: 
1:833d308:         LOG.debug("Sending " + MSG_COUNT + " messages to topic");
1:833d308:         for (int i = 0; i < MSG_COUNT; i++) {
1:833d308:             publisher.publish(session.createMessage());
1:833d308:         }
1:833d308: 
1:833d308:         LOG.debug("Close DurableSubscriber with noLocal=true");
1:833d308:         durableSub.close();
1:833d308: 
1:833d308:         LOG.debug("Create DurableSubscriber with noLocal=false");
1:833d308:         durableSub = session.createDurableSubscriber(topic, getSubscriptionName(), null, false);
1:833d308: 
1:833d308:         LOG.info("Attempting to receive messages from reconnected (noLocal=false) subscription");
1:833d308:         assertNull(durableSub.receive(500));
1:833d308: 
1:833d308:         LOG.debug("Sending " + MSG_COUNT + " messages to topic");
1:833d308:         for (int i = 0; i < MSG_COUNT; i++) {
1:833d308:             publisher.publish(session.createMessage());
1:833d308:         }
1:833d308: 
1:833d308:         LOG.info("Attempting to receive messages from (noLocal=false) durable subscriber");
1:833d308:         for (int i = 0; i < MSG_COUNT; i++) {
1:833d308:             assertNotNull(durableSub.receive(500));
1:833d308:         }
1:833d308: 
1:833d308:         // Should be empty now
1:833d308:         assertNull(durableSub.receive(100));
1:833d308:     }
1:833d308: 
1:833d308:     @Test(timeout = 60000)
1:833d308:     public void testInvertedDurableSubWithNoLocalChange() throws Exception {
1:833d308:         TopicConnection connection = factory.createTopicConnection();
1:833d308: 
1:833d308:         connection.setClientID(getClientId());
1:833d308:         connection.start();
1:833d308: 
1:833d308:         TopicSession session = connection.createTopicSession(false, Session.AUTO_ACKNOWLEDGE);
1:833d308:         Topic topic = session.createTopic(getDestinationName());
1:833d308:         TopicPublisher publisher = session.createPublisher(topic);
1:833d308: 
1:833d308:         LOG.debug("Create DurableSubscriber with noLocal = true");
1:833d308:         TopicSubscriber subscriber = session.createSubscriber(topic);
1:833d308:         TopicSubscriber durableSub = session.createDurableSubscriber(topic, getSubscriptionName(), null, false);
1:833d308: 
1:833d308:         LOG.debug("Sending " + MSG_COUNT + " messages to topic");
1:833d308:         for (int i = 0; i < MSG_COUNT; i++) {
1:833d308:             publisher.publish(session.createMessage());
1:833d308:         }
1:833d308: 
1:833d308:         LOG.info("Attempting to receive messages from non-durable subscriber");
1:833d308:         for (int i = 0; i < MSG_COUNT; i++) {
1:833d308:             assertNotNull(subscriber.receive(500));
1:833d308:         }
1:833d308: 
1:833d308:         LOG.info("Attempting to receive messages from (noLocal=false) durable subscriber");
1:833d308:         for (int i = 0; i < MSG_COUNT; i++) {
1:833d308:             assertNotNull(durableSub.receive(500));
1:833d308:         }
1:833d308: 
1:833d308:         LOG.debug("Sending " + MSG_COUNT + " messages to topic");
1:833d308:         for (int i = 0; i < MSG_COUNT; i++) {
1:833d308:             publisher.publish(session.createMessage());
1:833d308:         }
1:833d308: 
1:833d308:         LOG.debug("Close DurableSubscriber with noLocal=true");
1:833d308:         durableSub.close();
1:833d308: 
1:833d308:         LOG.debug("Create DurableSubscriber with noLocal=false");
1:833d308:         durableSub = session.createDurableSubscriber(topic, getSubscriptionName(), null, true);
1:833d308: 
1:833d308:         LOG.info("Attempting to receive messages from reconnected (noLocal=true) subscription");
1:833d308:         assertNull(durableSub.receive(500));
1:833d308: 
1:833d308:         LOG.debug("Sending " + MSG_COUNT + " messages to topic");
1:833d308:         for (int i = 0; i < MSG_COUNT; i++) {
1:833d308:             publisher.publish(session.createMessage());
1:833d308:         }
1:833d308: 
1:833d308:         LOG.info("Attempting to receive messages from reconnected (noLocal=true) subscription");
1:833d308:         assertNull(durableSub.receive(500));
1:833d308: 
1:833d308:         // Should be empty now
1:833d308:         assertNull(durableSub.receive(100));
1:833d308:     }
1:833d308: 
1:833d308:     @Test(timeout = 60000)
1:833d308:     public void testDurableSubWithNoLocalChangeAfterRestart() throws Exception {
1:833d308:         TopicConnection connection = factory.createTopicConnection();
1:833d308: 
1:833d308:         connection.setClientID(getClientId());
1:833d308:         connection.start();
1:833d308: 
1:833d308:         TopicSession session = connection.createTopicSession(false, Session.AUTO_ACKNOWLEDGE);
1:833d308:         Topic topic = session.createTopic(getDestinationName());
1:833d308:         TopicPublisher publisher = session.createPublisher(topic);
1:833d308: 
1:833d308:         LOG.debug("Create DurableSubscriber with noLocal = true");
1:833d308:         TopicSubscriber subscriber = session.createSubscriber(topic);
1:833d308:         TopicSubscriber durableSub = session.createDurableSubscriber(topic, getSubscriptionName(), null, true);
1:833d308: 
1:833d308:         LOG.debug("Sending " + MSG_COUNT + " messages to topic");
1:833d308:         for (int i = 0; i < MSG_COUNT; i++) {
1:833d308:             publisher.publish(session.createMessage());
1:833d308:         }
1:833d308: 
1:833d308:         LOG.info("Attempting to receive messages from non-durable subscriber");
1:833d308:         for (int i = 0; i < MSG_COUNT; i++) {
1:833d308:             assertNotNull(subscriber.receive(500));
1:833d308:         }
1:833d308: 
1:833d308:         LOG.info("Attempting to receive messages from (noLocal=true) subscriber");
1:833d308:         assertNull(durableSub.receive(500));
1:833d308: 
1:833d308:         LOG.debug("Sending " + MSG_COUNT + " messages to topic");
1:833d308:         for (int i = 0; i < MSG_COUNT; i++) {
1:833d308:             publisher.publish(session.createMessage());
1:833d308:         }
1:833d308: 
1:833d308:         tearDown();
1:833d308:         createBroker(false);
1:833d308: 
1:833d308:         connection = factory.createTopicConnection();
1:833d308:         connection.setClientID(getClientId());
1:833d308:         connection.start();
1:833d308: 
1:833d308:         session = connection.createTopicSession(false, Session.AUTO_ACKNOWLEDGE);
1:833d308:         topic = session.createTopic(getDestinationName());
1:833d308:         publisher = session.createPublisher(topic);
1:833d308: 
1:833d308:         LOG.debug("Create DurableSubscriber with noLocal=false");
1:833d308:         durableSub = session.createDurableSubscriber(topic, getSubscriptionName(), null, false);
1:833d308: 
1:833d308:         LOG.info("Attempting to receive messages from reconnected (noLocal=false) subscription");
1:833d308:         assertNull(durableSub.receive(500));
1:833d308: 
1:833d308:         LOG.debug("Sending " + MSG_COUNT + " messages to topic");
1:833d308:         for (int i = 0; i < MSG_COUNT; i++) {
1:833d308:             publisher.publish(session.createMessage());
1:833d308:         }
1:833d308: 
1:833d308:         LOG.info("Attempting to receive messages from (noLocal=false) durable subscriber");
1:833d308:         for (int i = 0; i < MSG_COUNT; i++) {
1:833d308:             assertNotNull(durableSub.receive(500));
1:833d308:         }
1:833d308: 
1:833d308:         // Should be empty now
1:833d308:         assertNull(durableSub.receive(100));
1:833d308:     }
1:833d308: 
1:833d308:     @Test(timeout = 60000)
1:833d308:     public void testInvertedDurableSubWithNoLocalChangeAfterRestart() throws Exception {
1:833d308:         TopicConnection connection = factory.createTopicConnection();
1:833d308: 
1:833d308:         connection.setClientID(getClientId());
1:833d308:         connection.start();
1:833d308: 
1:833d308:         TopicSession session = connection.createTopicSession(false, Session.AUTO_ACKNOWLEDGE);
1:833d308:         Topic topic = session.createTopic(getDestinationName());
1:833d308:         TopicPublisher publisher = session.createPublisher(topic);
1:833d308: 
1:833d308:         LOG.debug("Create DurableSubscriber with noLocal = true");
1:833d308:         TopicSubscriber subscriber = session.createSubscriber(topic);
1:833d308:         TopicSubscriber durableSub = session.createDurableSubscriber(topic, getSubscriptionName(), null, false);
1:833d308: 
1:833d308:         LOG.debug("Sending " + MSG_COUNT + " messages to topic");
1:833d308:         for (int i = 0; i < MSG_COUNT; i++) {
1:833d308:             publisher.publish(session.createMessage());
1:833d308:         }
1:833d308: 
1:833d308:         LOG.info("Attempting to receive messages from non-durable subscriber");
1:833d308:         for (int i = 0; i < MSG_COUNT; i++) {
1:833d308:             assertNotNull(subscriber.receive(500));
1:833d308:         }
1:833d308: 
1:833d308:         LOG.info("Attempting to receive messages from (noLocal=false) durable subscriber");
1:833d308:         for (int i = 0; i < MSG_COUNT; i++) {
1:833d308:             assertNotNull(durableSub.receive(500));
1:833d308:         }
1:833d308: 
1:833d308:         LOG.debug("Sending " + MSG_COUNT + " messages to topic");
1:833d308:         for (int i = 0; i < MSG_COUNT; i++) {
1:833d308:             publisher.publish(session.createMessage());
1:833d308:         }
1:833d308: 
1:833d308:         tearDown();
1:833d308:         createBroker(false);
1:833d308: 
1:833d308:         connection = factory.createTopicConnection();
1:833d308:         connection.setClientID(getClientId());
1:833d308:         connection.start();
1:833d308: 
1:833d308:         session = connection.createTopicSession(false, Session.AUTO_ACKNOWLEDGE);
1:833d308:         topic = session.createTopic(getDestinationName());
1:833d308:         publisher = session.createPublisher(topic);
1:833d308: 
1:833d308:         LOG.debug("Create DurableSubscriber with noLocal=true");
1:833d308:         durableSub = session.createDurableSubscriber(topic, getSubscriptionName(), null, true);
1:833d308: 
1:833d308:         LOG.info("Attempting to receive messages from (noLocal=true) subscriber");
1:833d308:         assertNull(durableSub.receive(500));
1:833d308: 
1:833d308:         LOG.debug("Sending " + MSG_COUNT + " messages to topic");
1:833d308:         for (int i = 0; i < MSG_COUNT; i++) {
1:833d308:             publisher.publish(session.createMessage());
1:833d308:         }
1:833d308: 
1:833d308:         LOG.info("Attempting to receive messages from (noLocal=true) subscriber");
1:833d308:         assertNull(durableSub.receive(500));
1:833d308: 
1:833d308:         // Should be empty now
1:833d308:         assertNull(durableSub.receive(100));
1:833d308:     }
1:833d308: 
1:833d308:     private void createBroker(boolean deleteAllMessages) throws Exception {
1:833d308:         KahaDBStore kaha = new KahaDBStore();
1:833d308:         kaha.setDirectory(new File(KAHADB_DIRECTORY + "-" + name.getMethodName()));
1:833d308: 
1:833d308:         brokerService = new BrokerService();
1:833d308:         brokerService.setPersistent(true);
1:833d308:         brokerService.setPersistenceAdapter(kaha);
1:833d308:         brokerService.setStoreOpenWireVersion(CommandTypes.PROTOCOL_VERSION);
1:833d308:         brokerService.setUseJmx(false);
1:833d308:         brokerService.setDeleteAllMessagesOnStartup(deleteAllMessages);
1:7c293b6:         brokerService.setKeepDurableSubsActive(keepDurableSubsActive);
1:833d308:         TransportConnector connector = brokerService.addConnector("tcp://0.0.0.0:0");
1:833d308: 
1:833d308:         brokerService.start();
1:833d308:         brokerService.waitUntilStarted();
1:833d308: 
1:833d308:         connectionUri = connector.getPublishableConnectString();
1:833d308:         factory = new ActiveMQConnectionFactory(connectionUri);
1:833d308:     }
1:833d308: 
1:833d308:     private String getDestinationName() {
1:833d308:         return name.getMethodName();
1:833d308:     }
1:833d308: 
1:833d308:     private String getClientId() {
1:833d308:         return name.getMethodName() + "-Client";
1:833d308:     }
1:833d308: 
1:833d308:     private String getSubscriptionName() {
1:833d308:         return name.getMethodName() + "-Subscription";
1:833d308:     }
1:833d308: }
============================================================================
author:Christopher L. Shannon (cshannon)
-------------------------------------------------------------------------------
commit:18571ce
/////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////
commit:7c293b6
/////////////////////////////////////////////////////////////////////////
1: import java.util.Arrays;
1: import java.util.Collection;
1: import javax.jms.Destination;
1: import javax.jms.JMSException;
0: import javax.jms.Message;
0: import javax.jms.MessageListener;
1: import javax.jms.MessageProducer;
1: import javax.jms.TextMessage;
1: import org.apache.activemq.ActiveMQConnection;
0: import org.apache.activemq.command.ActiveMQTopic;
0: import org.apache.activemq.network.DurableSyncNetworkBridgeTest.FLOW;
/////////////////////////////////////////////////////////////////////////
1: import org.junit.runner.RunWith;
1: import org.junit.runners.Parameterized;
1: import org.junit.runners.Parameterized.Parameters;
1: @RunWith(Parameterized.class)
/////////////////////////////////////////////////////////////////////////
1:     private final boolean keepDurableSubsActive;
1: 
1:     @Parameters(name="keepDurableSubsActive={0}")
1:     public static Collection<Object[]> data() {
1:         return Arrays.asList(new Object[][] {
1:                 {true},
1:                 {false}
1:         });
1:     }
1: 
1:     public DurableSubscriptionWithNoLocalTest(final boolean keepDurableSubsActive) {
1:         this.keepDurableSubsActive = keepDurableSubsActive;
1:     }
/////////////////////////////////////////////////////////////////////////
1:     /**
1:      * Make sure that NoLocal works for connection started/stopped
1:      *
1:      * @throws JMSException
1:      */
1:     @Test(timeout = 60000)
1:     public void testNoLocalStillWorkWithConnectionRestart() throws Exception {
1:         ActiveMQConnection connection = null;
1:         try {
1:             connection = (ActiveMQConnection) factory.createConnection();
1:             connection.setClientID("test-client");
1:             connection.start();
1:             test(connection, "test message 1");
1:             connection.stop();
1:             connection.start();
1:             test(connection, "test message 2");
1:         } finally {
1:             if (connection != null) {
1:                 connection.close();
1:             }
1:         }
1:     }
1: 
1:     /**
1:      * Make sure that NoLocal works for multiple connections to the same subscription
1:      *
1:      * @throws JMSException
1:      */
1:     @Test(timeout = 60000)
1:     public void testNoLocalStillWorksNewConnection() throws Exception {
1:         ActiveMQConnection connection = null;
1:         try {
1:             connection = (ActiveMQConnection) factory.createConnection();
1:             connection.setClientID("test-client");
1:             connection.start();
1:             test(connection, "test message 1");
1:         } finally {
1:             if (connection != null) {
1:                 connection.close();
1:             }
1:         }
1: 
1:         try {
1:             connection = (ActiveMQConnection) factory.createConnection();
1:             connection.setClientID("test-client");
1:             connection.start();
1:             test(connection, "test message 2");
1:         } finally {
1:             if (connection != null) {
1:                 connection.close();
1:             }
1:         }
1:     }
1: 
1:     /**
1:      * Make sure that NoLocal works after restart
1:      *
1:      * @throws JMSException
1:      */
1:     @Test(timeout = 60000)
1:     public void testNoLocalStillWorksRestartBroker() throws Exception {
1:         ActiveMQConnection connection = null;
1:         try {
1:             connection = (ActiveMQConnection) factory.createConnection();
1:             connection.setClientID("test-client");
1:             connection.start();
1:             test(connection, "test message 1");
1:         } finally {
1:             if (connection != null) {
1:                 connection.close();
1:             }
1:         }
1: 
1:         tearDown();
1:         createBroker(false);
1: 
1:         try {
1:             connection = (ActiveMQConnection) factory.createConnection();
1:             connection.setClientID("test-client");
1:             connection.start();
1:             test(connection, "test message 2");
1:         } finally {
1:             if (connection != null) {
1:                 connection.close();
1:             }
1:         }
1:     }
1: 
1:     void test(final ActiveMQConnection connection, final String body) throws Exception {
1: 
1:         Session incomingMessagesSession = connection.createSession(false, Session.AUTO_ACKNOWLEDGE);
1:         Topic topic = incomingMessagesSession.createTopic("test.topic");
1:         TopicSubscriber consumer = incomingMessagesSession.createDurableSubscriber(topic, "test-subscription", null, true);
1: 
1:         Session outgoingMessagesSession = connection.createSession(false, Session.AUTO_ACKNOWLEDGE);
1:         Destination destination = outgoingMessagesSession.createTopic("test.topic");
1:         MessageProducer producer = outgoingMessagesSession.createProducer(destination);
1:         TextMessage textMessage = outgoingMessagesSession.createTextMessage(body);
1:         producer.send(textMessage);
1:         producer.close();
1:         System.out.println("message sent: " + textMessage.getJMSMessageID() + "; body: " + textMessage.getText());
1:         outgoingMessagesSession.close();
1: 
1:         assertNull(consumer.receive(2000));
1: 
1:         consumer.close();
1:         incomingMessagesSession.close();
1:     }
1: 
/////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////
1:         brokerService.setKeepDurableSubsActive(keepDurableSubsActive);
author:Timothy Bish
-------------------------------------------------------------------------------
commit:833d308
/////////////////////////////////////////////////////////////////////////
1: /**
1:  * Licensed to the Apache Software Foundation (ASF) under one or more
1:  * contributor license agreements.  See the NOTICE file distributed with
1:  * this work for additional information regarding copyright ownership.
1:  * The ASF licenses this file to You under the Apache License, Version 2.0
1:  * (the "License"); you may not use this file except in compliance with
1:  * the License.  You may obtain a copy of the License at
1:  *
1:  *      http://www.apache.org/licenses/LICENSE-2.0
1:  *
1:  * Unless required by applicable law or agreed to in writing, software
1:  * distributed under the License is distributed on an "AS IS" BASIS,
1:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:  * See the License for the specific language governing permissions and
1:  * limitations under the License.
1:  */
1: package org.apache.activemq.usecases;
1: 
1: import static org.junit.Assert.assertNotNull;
1: import static org.junit.Assert.assertNull;
1: 
1: import java.io.File;
1: 
1: import javax.jms.Session;
1: import javax.jms.Topic;
1: import javax.jms.TopicConnection;
1: import javax.jms.TopicPublisher;
1: import javax.jms.TopicSession;
1: import javax.jms.TopicSubscriber;
1: 
1: import org.apache.activemq.ActiveMQConnectionFactory;
1: import org.apache.activemq.broker.BrokerService;
1: import org.apache.activemq.broker.TransportConnector;
1: import org.apache.activemq.command.CommandTypes;
1: import org.apache.activemq.store.kahadb.KahaDBStore;
1: import org.junit.After;
1: import org.junit.Before;
0: import org.junit.Ignore;
1: import org.junit.Rule;
1: import org.junit.Test;
1: import org.junit.rules.TestName;
1: import org.slf4j.Logger;
1: import org.slf4j.LoggerFactory;
1: 
1: /**
1:  * Test for spec compliance for durable subscriptions that change the noLocal flag.
1:  */
1: public class DurableSubscriptionWithNoLocalTest {
1: 
1:     private static final Logger LOG = LoggerFactory.getLogger(DurableSubscriptionWithNoLocalTest.class);
1: 
1:     private final int MSG_COUNT = 10;
1:     private final String KAHADB_DIRECTORY = "target/activemq-data/";
1: 
1:     @Rule public TestName name = new TestName();
1: 
1:     private BrokerService brokerService;
1:     private String connectionUri;
1:     private ActiveMQConnectionFactory factory;
1: 
1:     @Before
1:     public void setUp() throws Exception {
1:         createBroker(true);
1:     }
1: 
1:     @After
1:     public void tearDown() throws Exception {
1:         brokerService.stop();
1:         brokerService.waitUntilStopped();
1:     }
1: 
0:     @Ignore("Requires Broker be able to remove and recreate on noLocal change")
1:     @Test(timeout = 60000)
1:     public void testDurableSubWithNoLocalChange() throws Exception {
1:         TopicConnection connection = factory.createTopicConnection();
1: 
1:         connection.setClientID(getClientId());
1:         connection.start();
1: 
1:         TopicSession session = connection.createTopicSession(false, Session.AUTO_ACKNOWLEDGE);
1:         Topic topic = session.createTopic(getDestinationName());
1:         TopicPublisher publisher = session.createPublisher(topic);
1: 
1:         LOG.debug("Create DurableSubscriber with noLocal = true");
1:         TopicSubscriber subscriber = session.createSubscriber(topic);
1:         TopicSubscriber durableSub = session.createDurableSubscriber(topic, getSubscriptionName(), null, true);
1: 
1:         LOG.debug("Sending " + MSG_COUNT + " messages to topic");
1:         for (int i = 0; i < MSG_COUNT; i++) {
1:             publisher.publish(session.createMessage());
1:         }
1: 
1:         LOG.info("Attempting to receive messages from non-durable subscriber");
1:         for (int i = 0; i < MSG_COUNT; i++) {
1:             assertNotNull(subscriber.receive(500));
1:         }
1: 
1:         LOG.info("Attempting to receive messages from (noLocal=true) subscriber");
1:         assertNull(durableSub.receive(500));
1: 
1:         LOG.debug("Sending " + MSG_COUNT + " messages to topic");
1:         for (int i = 0; i < MSG_COUNT; i++) {
1:             publisher.publish(session.createMessage());
1:         }
1: 
1:         LOG.debug("Close DurableSubscriber with noLocal=true");
1:         durableSub.close();
1: 
1:         LOG.debug("Create DurableSubscriber with noLocal=false");
1:         durableSub = session.createDurableSubscriber(topic, getSubscriptionName(), null, false);
1: 
1:         LOG.info("Attempting to receive messages from reconnected (noLocal=false) subscription");
1:         assertNull(durableSub.receive(500));
1: 
1:         LOG.debug("Sending " + MSG_COUNT + " messages to topic");
1:         for (int i = 0; i < MSG_COUNT; i++) {
1:             publisher.publish(session.createMessage());
1:         }
1: 
1:         LOG.info("Attempting to receive messages from (noLocal=false) durable subscriber");
1:         for (int i = 0; i < MSG_COUNT; i++) {
1:             assertNotNull(durableSub.receive(500));
1:         }
1: 
1:         // Should be empty now
1:         assertNull(durableSub.receive(100));
1:     }
1: 
0:     @Ignore("Requires Broker be able to remove and recreate on noLocal change")
1:     @Test(timeout = 60000)
1:     public void testInvertedDurableSubWithNoLocalChange() throws Exception {
1:         TopicConnection connection = factory.createTopicConnection();
1: 
1:         connection.setClientID(getClientId());
1:         connection.start();
1: 
1:         TopicSession session = connection.createTopicSession(false, Session.AUTO_ACKNOWLEDGE);
1:         Topic topic = session.createTopic(getDestinationName());
1:         TopicPublisher publisher = session.createPublisher(topic);
1: 
1:         LOG.debug("Create DurableSubscriber with noLocal = true");
1:         TopicSubscriber subscriber = session.createSubscriber(topic);
1:         TopicSubscriber durableSub = session.createDurableSubscriber(topic, getSubscriptionName(), null, false);
1: 
1:         LOG.debug("Sending " + MSG_COUNT + " messages to topic");
1:         for (int i = 0; i < MSG_COUNT; i++) {
1:             publisher.publish(session.createMessage());
1:         }
1: 
1:         LOG.info("Attempting to receive messages from non-durable subscriber");
1:         for (int i = 0; i < MSG_COUNT; i++) {
1:             assertNotNull(subscriber.receive(500));
1:         }
1: 
1:         LOG.info("Attempting to receive messages from (noLocal=false) durable subscriber");
1:         for (int i = 0; i < MSG_COUNT; i++) {
1:             assertNotNull(durableSub.receive(500));
1:         }
1: 
1:         LOG.debug("Sending " + MSG_COUNT + " messages to topic");
1:         for (int i = 0; i < MSG_COUNT; i++) {
1:             publisher.publish(session.createMessage());
1:         }
1: 
1:         LOG.debug("Close DurableSubscriber with noLocal=true");
1:         durableSub.close();
1: 
1:         LOG.debug("Create DurableSubscriber with noLocal=false");
1:         durableSub = session.createDurableSubscriber(topic, getSubscriptionName(), null, true);
1: 
1:         LOG.info("Attempting to receive messages from reconnected (noLocal=true) subscription");
1:         assertNull(durableSub.receive(500));
1: 
1:         LOG.debug("Sending " + MSG_COUNT + " messages to topic");
1:         for (int i = 0; i < MSG_COUNT; i++) {
1:             publisher.publish(session.createMessage());
1:         }
1: 
1:         LOG.info("Attempting to receive messages from reconnected (noLocal=true) subscription");
1:         assertNull(durableSub.receive(500));
1: 
1:         // Should be empty now
1:         assertNull(durableSub.receive(100));
1:     }
1: 
1:     @Test(timeout = 60000)
1:     public void testDurableSubWithNoLocalChangeAfterRestart() throws Exception {
1:         TopicConnection connection = factory.createTopicConnection();
1: 
1:         connection.setClientID(getClientId());
1:         connection.start();
1: 
1:         TopicSession session = connection.createTopicSession(false, Session.AUTO_ACKNOWLEDGE);
1:         Topic topic = session.createTopic(getDestinationName());
1:         TopicPublisher publisher = session.createPublisher(topic);
1: 
1:         LOG.debug("Create DurableSubscriber with noLocal = true");
1:         TopicSubscriber subscriber = session.createSubscriber(topic);
1:         TopicSubscriber durableSub = session.createDurableSubscriber(topic, getSubscriptionName(), null, true);
1: 
1:         LOG.debug("Sending " + MSG_COUNT + " messages to topic");
1:         for (int i = 0; i < MSG_COUNT; i++) {
1:             publisher.publish(session.createMessage());
1:         }
1: 
1:         LOG.info("Attempting to receive messages from non-durable subscriber");
1:         for (int i = 0; i < MSG_COUNT; i++) {
1:             assertNotNull(subscriber.receive(500));
1:         }
1: 
1:         LOG.info("Attempting to receive messages from (noLocal=true) subscriber");
1:         assertNull(durableSub.receive(500));
1: 
1:         LOG.debug("Sending " + MSG_COUNT + " messages to topic");
1:         for (int i = 0; i < MSG_COUNT; i++) {
1:             publisher.publish(session.createMessage());
1:         }
1: 
1:         tearDown();
1:         createBroker(false);
1: 
1:         connection = factory.createTopicConnection();
1:         connection.setClientID(getClientId());
1:         connection.start();
1: 
1:         session = connection.createTopicSession(false, Session.AUTO_ACKNOWLEDGE);
1:         topic = session.createTopic(getDestinationName());
1:         publisher = session.createPublisher(topic);
1: 
1:         LOG.debug("Create DurableSubscriber with noLocal=false");
1:         durableSub = session.createDurableSubscriber(topic, getSubscriptionName(), null, false);
1: 
1:         LOG.info("Attempting to receive messages from reconnected (noLocal=false) subscription");
1:         assertNull(durableSub.receive(500));
1: 
1:         LOG.debug("Sending " + MSG_COUNT + " messages to topic");
1:         for (int i = 0; i < MSG_COUNT; i++) {
1:             publisher.publish(session.createMessage());
1:         }
1: 
1:         LOG.info("Attempting to receive messages from (noLocal=false) durable subscriber");
1:         for (int i = 0; i < MSG_COUNT; i++) {
1:             assertNotNull(durableSub.receive(500));
1:         }
1: 
1:         // Should be empty now
1:         assertNull(durableSub.receive(100));
1:     }
1: 
0:     @Ignore("Requires Broker be able to remove and recreate on noLocal change")
1:     @Test(timeout = 60000)
1:     public void testInvertedDurableSubWithNoLocalChangeAfterRestart() throws Exception {
1:         TopicConnection connection = factory.createTopicConnection();
1: 
1:         connection.setClientID(getClientId());
1:         connection.start();
1: 
1:         TopicSession session = connection.createTopicSession(false, Session.AUTO_ACKNOWLEDGE);
1:         Topic topic = session.createTopic(getDestinationName());
1:         TopicPublisher publisher = session.createPublisher(topic);
1: 
1:         LOG.debug("Create DurableSubscriber with noLocal = true");
1:         TopicSubscriber subscriber = session.createSubscriber(topic);
1:         TopicSubscriber durableSub = session.createDurableSubscriber(topic, getSubscriptionName(), null, false);
1: 
1:         LOG.debug("Sending " + MSG_COUNT + " messages to topic");
1:         for (int i = 0; i < MSG_COUNT; i++) {
1:             publisher.publish(session.createMessage());
1:         }
1: 
1:         LOG.info("Attempting to receive messages from non-durable subscriber");
1:         for (int i = 0; i < MSG_COUNT; i++) {
1:             assertNotNull(subscriber.receive(500));
1:         }
1: 
1:         LOG.info("Attempting to receive messages from (noLocal=false) durable subscriber");
1:         for (int i = 0; i < MSG_COUNT; i++) {
1:             assertNotNull(durableSub.receive(500));
1:         }
1: 
1:         LOG.debug("Sending " + MSG_COUNT + " messages to topic");
1:         for (int i = 0; i < MSG_COUNT; i++) {
1:             publisher.publish(session.createMessage());
1:         }
1: 
1:         tearDown();
1:         createBroker(false);
1: 
1:         connection = factory.createTopicConnection();
1:         connection.setClientID(getClientId());
1:         connection.start();
1: 
1:         session = connection.createTopicSession(false, Session.AUTO_ACKNOWLEDGE);
1:         topic = session.createTopic(getDestinationName());
1:         publisher = session.createPublisher(topic);
1: 
1:         LOG.debug("Create DurableSubscriber with noLocal=true");
1:         durableSub = session.createDurableSubscriber(topic, getSubscriptionName(), null, true);
1: 
1:         LOG.info("Attempting to receive messages from (noLocal=true) subscriber");
1:         assertNull(durableSub.receive(500));
1: 
1:         LOG.debug("Sending " + MSG_COUNT + " messages to topic");
1:         for (int i = 0; i < MSG_COUNT; i++) {
1:             publisher.publish(session.createMessage());
1:         }
1: 
1:         LOG.info("Attempting to receive messages from (noLocal=true) subscriber");
1:         assertNull(durableSub.receive(500));
1: 
1:         // Should be empty now
1:         assertNull(durableSub.receive(100));
1:     }
1: 
1:     private void createBroker(boolean deleteAllMessages) throws Exception {
1:         KahaDBStore kaha = new KahaDBStore();
1:         kaha.setDirectory(new File(KAHADB_DIRECTORY + "-" + name.getMethodName()));
1: 
1:         brokerService = new BrokerService();
1:         brokerService.setPersistent(true);
1:         brokerService.setPersistenceAdapter(kaha);
1:         brokerService.setStoreOpenWireVersion(CommandTypes.PROTOCOL_VERSION);
1:         brokerService.setUseJmx(false);
1:         brokerService.setDeleteAllMessagesOnStartup(deleteAllMessages);
1:         TransportConnector connector = brokerService.addConnector("tcp://0.0.0.0:0");
1: 
1:         brokerService.start();
1:         brokerService.waitUntilStarted();
1: 
1:         connectionUri = connector.getPublishableConnectString();
1:         factory = new ActiveMQConnectionFactory(connectionUri);
1:     }
1: 
1:     private String getDestinationName() {
1:         return name.getMethodName();
1:     }
1: 
1:     private String getClientId() {
1:         return name.getMethodName() + "-Client";
1:     }
1: 
1:     private String getSubscriptionName() {
1:         return name.getMethodName() + "-Subscription";
1:     }
1: }
============================================================================