1:d206621: /**
1:d206621:  * Licensed to the Apache Software Foundation (ASF) under one or more
1:d206621:  * contributor license agreements.  See the NOTICE file distributed with
1:d206621:  * this work for additional information regarding copyright ownership.
1:d206621:  * The ASF licenses this file to You under the Apache License, Version 2.0
1:d206621:  * (the "License"); you may not use this file except in compliance with
1:d206621:  * the License.  You may obtain a copy of the License at
1:d206621:  *
1:d206621:  *      http://www.apache.org/licenses/LICENSE-2.0
1:d206621:  *
1:d206621:  * Unless required by applicable law or agreed to in writing, software
1:d206621:  * distributed under the License is distributed on an "AS IS" BASIS,
1:d206621:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:d206621:  * See the License for the specific language governing permissions and
1:d206621:  * limitations under the License.
1:d206621:  */
1:d206621: package org.apache.activemq.util;
1:d206621: 
1:d206621: import java.util.HashSet;
1:d206621: import java.util.List;
1:d206621: import java.util.Map;
1:d206621: import java.util.Set;
1:d206621: 
1:d206621: import org.apache.activemq.advisory.AdvisoryBroker;
1:d206621: import org.apache.activemq.advisory.AdvisorySupport;
1:d206621: import org.apache.activemq.broker.BrokerService;
1:d206621: import org.apache.activemq.broker.region.DurableTopicSubscription;
1:d206621: import org.apache.activemq.broker.region.RegionBroker;
1:d206621: import org.apache.activemq.broker.region.Subscription;
1:d206621: import org.apache.activemq.broker.region.TopicRegion;
1:d206621: import org.apache.activemq.command.ActiveMQDestination;
1:d206621: import org.apache.activemq.command.BrokerSubscriptionInfo;
1:d206621: import org.apache.activemq.command.ConsumerInfo;
1:d206621: import org.apache.activemq.filter.DestinationFilter;
1:d206621: import org.apache.activemq.network.NetworkBridgeConfiguration;
1:d206621: import org.slf4j.Logger;
1:d206621: import org.slf4j.LoggerFactory;
1:d206621: 
1:d206621: public class NetworkBridgeUtils {
1:d206621: 
1:d206621:     private static final Logger LOG = LoggerFactory.getLogger(NetworkBridgeUtils.class);
1:d206621: 
1:d206621:     /**
1:d206621:      * Generate the BrokerSubscriptionInfo which is used to tell the broker on the other
1:d206621:      * side of the network bridge which NC durable subscriptions are still needed for demand.
1:d206621:      * @param brokerService
1:d206621:      * @param config
1:d206621:      * @return
1:d206621:      */
1:d206621:     public static BrokerSubscriptionInfo getBrokerSubscriptionInfo(final BrokerService brokerService,
1:d206621:             final NetworkBridgeConfiguration config) {
1:d206621: 
1:d206621:         RegionBroker regionBroker = (RegionBroker) brokerService.getRegionBroker();
1:d206621:         TopicRegion topicRegion = (TopicRegion) regionBroker.getTopicRegion();
1:d206621:         Set<ConsumerInfo> subscriptionInfos = new HashSet<>();
1:d206621: 
1:d206621:         //Add all durable subscriptions to the set that match the network config
1:d206621:         //which currently is just the dynamicallyIncludedDestinations list
1:d206621:         for (SubscriptionKey key : topicRegion.getDurableSubscriptions().keySet()) {
1:d206621:             DurableTopicSubscription sub = topicRegion.getDurableSubscriptions().get(key);
1:d206621:             if (sub != null && NetworkBridgeUtils.matchesNetworkConfig(config, sub.getConsumerInfo().getDestination())) {
1:d206621:                 ConsumerInfo ci = sub.getConsumerInfo().copy();
1:d206621:                 ci.setClientId(key.getClientId());
1:d206621:                 subscriptionInfos.add(ci);
1:d206621:             }
1:d206621:         }
1:d206621: 
1:d206621:         //We also need to iterate over all normal subscriptions and check if they are part of
1:d206621:         //any dynamicallyIncludedDestination that is configured with forceDurable to be true
1:d206621:         //over the network bridge.  If forceDurable is true then we want to add the consumer to the set
1:d206621:         for (Subscription sub : topicRegion.getSubscriptions().values()) {
1:d206621:             if (sub != null && NetworkBridgeUtils.isForcedDurable(sub.getConsumerInfo(),
1:d206621:                     config.getDynamicallyIncludedDestinations())) {
1:d206621:                 subscriptionInfos.add(sub.getConsumerInfo().copy());
1:d206621:             }
1:d206621:         }
1:d206621: 
1:d206621:         try {
1:d206621:             //Lastly, if isUseVirtualDestSubs is configured on this broker (to fire advisories) and
1:d206621:             //configured on the network connector (to listen to advisories) then also add any virtual
1:d206621:             //dest subscription to the set if forceDurable is true for its destination
1:d206621:             AdvisoryBroker ab = (AdvisoryBroker) brokerService.getBroker().getAdaptor(AdvisoryBroker.class);
1:d206621:             if (ab != null && brokerService.isUseVirtualDestSubs() && config.isUseVirtualDestSubs()) {
1:d206621:                 for (ConsumerInfo info : ab.getVirtualDestinationConsumers().keySet()) {
1:d206621:                     if (NetworkBridgeUtils.isForcedDurable(info, config.getDynamicallyIncludedDestinations())) {
1:d206621:                         subscriptionInfos.add(info.copy());
1:d206621:                     }
1:d206621:                 }
1:d206621:             }
1:d206621:         } catch (Exception e) {
1:d206621:             LOG.warn("Error processing virtualDestinationSubs for BrokerSubscriptionInfo");
1:d206621:             LOG.debug("Error processing virtualDestinationSubs for BrokerSubscriptionInfo", e);
1:d206621:         }
1:d206621:         BrokerSubscriptionInfo bsi = new BrokerSubscriptionInfo(brokerService.getBrokerName());
1:d206621:         bsi.setSubscriptionInfos(subscriptionInfos.toArray(new ConsumerInfo[0]));
1:d206621:         return bsi;
1:d206621:     }
1:d206621: 
1:d206621:     public static boolean isForcedDurable(final ConsumerInfo info,
1:d206621:             final List<ActiveMQDestination> dynamicallyIncludedDestinations) {
1:d206621:         return dynamicallyIncludedDestinations != null
1:d206621:                 ? isForcedDurable(info,
1:d206621:                         dynamicallyIncludedDestinations.toArray(new ActiveMQDestination[0]), null) : false;
1:d206621:     }
1:d206621: 
1:d206621:     public static boolean isForcedDurable(final ConsumerInfo info,
1:d206621:             final ActiveMQDestination[] dynamicallyIncludedDestinations,
1:d206621:             final ActiveMQDestination[] staticallyIncludedDestinations) {
1:d206621: 
1:d206621:         if (info.isDurable() || info.getDestination().isQueue()) {
1:d206621:             return false;
1:d206621:         }
1:d206621: 
1:d206621:         ActiveMQDestination destination = info.getDestination();
1:d206621:         if (AdvisorySupport.isAdvisoryTopic(destination) || destination.isTemporary() ||
1:d206621:                 destination.isQueue()) {
1:d206621:             return false;
1:d206621:         }
1:d206621: 
1:d206621:         ActiveMQDestination matching = findMatchingDestination(dynamicallyIncludedDestinations, destination);
1:d206621:         if (matching != null) {
1:d206621:             return isDestForcedDurable(matching);
1:d206621:         }
1:d206621:         matching = findMatchingDestination(staticallyIncludedDestinations, destination);
1:d206621:         if (matching != null) {
1:d206621:             return isDestForcedDurable(matching);
1:d206621:         }
1:d206621:         return false;
1:d206621:     }
1:d206621: 
1:d206621:     public static boolean matchesNetworkConfig(final NetworkBridgeConfiguration config,
1:d206621:             ActiveMQDestination destination) {
1:d206621:         List<ActiveMQDestination> includedDests = config.getDynamicallyIncludedDestinations();
1:d206621:         if (includedDests != null && includedDests.size() > 0) {
1:d206621:             for (ActiveMQDestination dest : includedDests) {
1:d206621:                 DestinationFilter inclusionFilter = DestinationFilter.parseFilter(dest);
1:d206621:                 if (dest != null && inclusionFilter.matches(destination) && dest.getDestinationType() == destination.getDestinationType()) {
1:d206621:                     return true;
1:d206621:                 }
1:d206621:             }
1:d206621:         }
1:d206621: 
1:d206621:         return false;
1:d206621:     }
1:d206621: 
1:d206621:     public static boolean matchesDestinations(ActiveMQDestination[] dests, final ActiveMQDestination destination) {
1:d206621:         if (dests != null && dests.length > 0) {
1:d206621:             for (ActiveMQDestination dest : dests) {
1:d206621:                 DestinationFilter inclusionFilter = DestinationFilter.parseFilter(dest);
1:d206621:                 if (dest != null && inclusionFilter.matches(destination) && dest.getDestinationType() == destination.getDestinationType()) {
1:d206621:                     return true;
1:d206621:                 }
1:d206621:             }
1:d206621:         }
1:d206621: 
1:d206621:         return false;
1:d206621:     }
1:d206621: 
1:d206621:     public static ActiveMQDestination findMatchingDestination(ActiveMQDestination[] dests, ActiveMQDestination destination) {
1:d206621:         if (dests != null && dests.length > 0) {
1:d206621:             for (ActiveMQDestination dest : dests) {
1:d206621:                 DestinationFilter inclusionFilter = DestinationFilter.parseFilter(dest);
1:d206621:                 if (dest != null && inclusionFilter.matches(destination) && dest.getDestinationType() == destination.getDestinationType()) {
1:d206621:                     return dest;
1:d206621:                 }
1:d206621:             }
1:d206621:         }
1:d206621: 
1:d206621:         return null;
1:d206621:     }
1:d206621: 
1:d206621:     public static boolean isDestForcedDurable(final ActiveMQDestination destination) {
1:d206621:         boolean isForceDurable = false;
1:d206621:         if (destination != null) {
1:d206621:             final Map<String, String> options = destination.getOptions();
1:d206621: 
1:d206621:             if (options != null) {
1:d206621:                 isForceDurable = (boolean) TypeConversionSupport.convert(options.get("forceDurable"), boolean.class);
1:d206621:             }
1:d206621:         }
1:d206621: 
1:d206621:         return isForceDurable;
1:d206621:     }
1:d206621: }
============================================================================
author:Christopher L. Shannon (cshannon)
-------------------------------------------------------------------------------
commit:d206621
/////////////////////////////////////////////////////////////////////////
1: /**
1:  * Licensed to the Apache Software Foundation (ASF) under one or more
1:  * contributor license agreements.  See the NOTICE file distributed with
1:  * this work for additional information regarding copyright ownership.
1:  * The ASF licenses this file to You under the Apache License, Version 2.0
1:  * (the "License"); you may not use this file except in compliance with
1:  * the License.  You may obtain a copy of the License at
1:  *
1:  *      http://www.apache.org/licenses/LICENSE-2.0
1:  *
1:  * Unless required by applicable law or agreed to in writing, software
1:  * distributed under the License is distributed on an "AS IS" BASIS,
1:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:  * See the License for the specific language governing permissions and
1:  * limitations under the License.
1:  */
1: package org.apache.activemq.util;
1: 
1: import java.util.HashSet;
1: import java.util.List;
1: import java.util.Map;
1: import java.util.Set;
1: 
1: import org.apache.activemq.advisory.AdvisoryBroker;
1: import org.apache.activemq.advisory.AdvisorySupport;
1: import org.apache.activemq.broker.BrokerService;
1: import org.apache.activemq.broker.region.DurableTopicSubscription;
1: import org.apache.activemq.broker.region.RegionBroker;
1: import org.apache.activemq.broker.region.Subscription;
1: import org.apache.activemq.broker.region.TopicRegion;
1: import org.apache.activemq.command.ActiveMQDestination;
1: import org.apache.activemq.command.BrokerSubscriptionInfo;
1: import org.apache.activemq.command.ConsumerInfo;
1: import org.apache.activemq.filter.DestinationFilter;
1: import org.apache.activemq.network.NetworkBridgeConfiguration;
1: import org.slf4j.Logger;
1: import org.slf4j.LoggerFactory;
1: 
1: public class NetworkBridgeUtils {
1: 
1:     private static final Logger LOG = LoggerFactory.getLogger(NetworkBridgeUtils.class);
1: 
1:     /**
1:      * Generate the BrokerSubscriptionInfo which is used to tell the broker on the other
1:      * side of the network bridge which NC durable subscriptions are still needed for demand.
1:      * @param brokerService
1:      * @param config
1:      * @return
1:      */
1:     public static BrokerSubscriptionInfo getBrokerSubscriptionInfo(final BrokerService brokerService,
1:             final NetworkBridgeConfiguration config) {
1: 
1:         RegionBroker regionBroker = (RegionBroker) brokerService.getRegionBroker();
1:         TopicRegion topicRegion = (TopicRegion) regionBroker.getTopicRegion();
1:         Set<ConsumerInfo> subscriptionInfos = new HashSet<>();
1: 
1:         //Add all durable subscriptions to the set that match the network config
1:         //which currently is just the dynamicallyIncludedDestinations list
1:         for (SubscriptionKey key : topicRegion.getDurableSubscriptions().keySet()) {
1:             DurableTopicSubscription sub = topicRegion.getDurableSubscriptions().get(key);
1:             if (sub != null && NetworkBridgeUtils.matchesNetworkConfig(config, sub.getConsumerInfo().getDestination())) {
1:                 ConsumerInfo ci = sub.getConsumerInfo().copy();
1:                 ci.setClientId(key.getClientId());
1:                 subscriptionInfos.add(ci);
1:             }
1:         }
1: 
1:         //We also need to iterate over all normal subscriptions and check if they are part of
1:         //any dynamicallyIncludedDestination that is configured with forceDurable to be true
1:         //over the network bridge.  If forceDurable is true then we want to add the consumer to the set
1:         for (Subscription sub : topicRegion.getSubscriptions().values()) {
1:             if (sub != null && NetworkBridgeUtils.isForcedDurable(sub.getConsumerInfo(),
1:                     config.getDynamicallyIncludedDestinations())) {
1:                 subscriptionInfos.add(sub.getConsumerInfo().copy());
1:             }
1:         }
1: 
1:         try {
1:             //Lastly, if isUseVirtualDestSubs is configured on this broker (to fire advisories) and
1:             //configured on the network connector (to listen to advisories) then also add any virtual
1:             //dest subscription to the set if forceDurable is true for its destination
1:             AdvisoryBroker ab = (AdvisoryBroker) brokerService.getBroker().getAdaptor(AdvisoryBroker.class);
1:             if (ab != null && brokerService.isUseVirtualDestSubs() && config.isUseVirtualDestSubs()) {
1:                 for (ConsumerInfo info : ab.getVirtualDestinationConsumers().keySet()) {
1:                     if (NetworkBridgeUtils.isForcedDurable(info, config.getDynamicallyIncludedDestinations())) {
1:                         subscriptionInfos.add(info.copy());
1:                     }
1:                 }
1:             }
1:         } catch (Exception e) {
1:             LOG.warn("Error processing virtualDestinationSubs for BrokerSubscriptionInfo");
1:             LOG.debug("Error processing virtualDestinationSubs for BrokerSubscriptionInfo", e);
1:         }
1:         BrokerSubscriptionInfo bsi = new BrokerSubscriptionInfo(brokerService.getBrokerName());
1:         bsi.setSubscriptionInfos(subscriptionInfos.toArray(new ConsumerInfo[0]));
1:         return bsi;
1:     }
1: 
1:     public static boolean isForcedDurable(final ConsumerInfo info,
1:             final List<ActiveMQDestination> dynamicallyIncludedDestinations) {
1:         return dynamicallyIncludedDestinations != null
1:                 ? isForcedDurable(info,
1:                         dynamicallyIncludedDestinations.toArray(new ActiveMQDestination[0]), null) : false;
1:     }
1: 
1:     public static boolean isForcedDurable(final ConsumerInfo info,
1:             final ActiveMQDestination[] dynamicallyIncludedDestinations,
1:             final ActiveMQDestination[] staticallyIncludedDestinations) {
1: 
1:         if (info.isDurable() || info.getDestination().isQueue()) {
1:             return false;
1:         }
1: 
1:         ActiveMQDestination destination = info.getDestination();
1:         if (AdvisorySupport.isAdvisoryTopic(destination) || destination.isTemporary() ||
1:                 destination.isQueue()) {
1:             return false;
1:         }
1: 
1:         ActiveMQDestination matching = findMatchingDestination(dynamicallyIncludedDestinations, destination);
1:         if (matching != null) {
1:             return isDestForcedDurable(matching);
1:         }
1:         matching = findMatchingDestination(staticallyIncludedDestinations, destination);
1:         if (matching != null) {
1:             return isDestForcedDurable(matching);
1:         }
1:         return false;
1:     }
1: 
1:     public static boolean matchesNetworkConfig(final NetworkBridgeConfiguration config,
1:             ActiveMQDestination destination) {
1:         List<ActiveMQDestination> includedDests = config.getDynamicallyIncludedDestinations();
1:         if (includedDests != null && includedDests.size() > 0) {
1:             for (ActiveMQDestination dest : includedDests) {
1:                 DestinationFilter inclusionFilter = DestinationFilter.parseFilter(dest);
1:                 if (dest != null && inclusionFilter.matches(destination) && dest.getDestinationType() == destination.getDestinationType()) {
1:                     return true;
1:                 }
1:             }
1:         }
1: 
1:         return false;
1:     }
1: 
1:     public static boolean matchesDestinations(ActiveMQDestination[] dests, final ActiveMQDestination destination) {
1:         if (dests != null && dests.length > 0) {
1:             for (ActiveMQDestination dest : dests) {
1:                 DestinationFilter inclusionFilter = DestinationFilter.parseFilter(dest);
1:                 if (dest != null && inclusionFilter.matches(destination) && dest.getDestinationType() == destination.getDestinationType()) {
1:                     return true;
1:                 }
1:             }
1:         }
1: 
1:         return false;
1:     }
1: 
1:     public static ActiveMQDestination findMatchingDestination(ActiveMQDestination[] dests, ActiveMQDestination destination) {
1:         if (dests != null && dests.length > 0) {
1:             for (ActiveMQDestination dest : dests) {
1:                 DestinationFilter inclusionFilter = DestinationFilter.parseFilter(dest);
1:                 if (dest != null && inclusionFilter.matches(destination) && dest.getDestinationType() == destination.getDestinationType()) {
1:                     return dest;
1:                 }
1:             }
1:         }
1: 
1:         return null;
1:     }
1: 
1:     public static boolean isDestForcedDurable(final ActiveMQDestination destination) {
1:         boolean isForceDurable = false;
1:         if (destination != null) {
1:             final Map<String, String> options = destination.getOptions();
1: 
1:             if (options != null) {
1:                 isForceDurable = (boolean) TypeConversionSupport.convert(options.get("forceDurable"), boolean.class);
1:             }
1:         }
1: 
1:         return isForceDurable;
1:     }
1: }
============================================================================