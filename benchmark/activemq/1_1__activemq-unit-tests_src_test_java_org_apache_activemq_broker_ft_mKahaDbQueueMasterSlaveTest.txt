1:0f90695: /**
1:0f90695:  * Licensed to the Apache Software Foundation (ASF) under one or more
1:0f90695:  * contributor license agreements.  See the NOTICE file distributed with
1:0f90695:  * this work for additional information regarding copyright ownership.
1:0f90695:  * The ASF licenses this file to You under the Apache License, Version 2.0
1:0f90695:  * (the "License"); you may not use this file except in compliance with
1:0f90695:  * the License.  You may obtain a copy of the License at
1:0f90695:  *
1:0f90695:  *      http://www.apache.org/licenses/LICENSE-2.0
1:0f90695:  *
1:0f90695:  * Unless required by applicable law or agreed to in writing, software
1:0f90695:  * distributed under the License is distributed on an "AS IS" BASIS,
1:0f90695:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:0f90695:  * See the License for the specific language governing permissions and
1:0f90695:  * limitations under the License.
1:0f90695:  */
1:0f90695: package org.apache.activemq.broker.ft;
1:0f90695: 
1:0f90695: import java.net.URI;
1:0f90695: import java.util.LinkedList;
1:0f90695: import java.util.List;
1:0f90695: import org.apache.activemq.broker.BrokerService;
1:0f90695: import org.apache.activemq.broker.TransportConnector;
1:0f90695: import org.apache.activemq.store.kahadb.FilteredKahaDBPersistenceAdapter;
1:0f90695: import org.apache.activemq.store.kahadb.KahaDBPersistenceAdapter;
1:0f90695: import org.apache.activemq.store.kahadb.MultiKahaDBPersistenceAdapter;
1:0f90695: 
1:0f90695: public class mKahaDbQueueMasterSlaveTest extends QueueMasterSlaveTestSupport {
1:0f90695:     protected String MASTER_URL = "tcp://localhost:62001";
1:0f90695:     protected String SLAVE_URL  = "tcp://localhost:62002";
1:0f90695: 
1:0f90695:     protected void createMaster() throws Exception {
1:0f90695:         master = new BrokerService();
1:0f90695:         master.setBrokerName("master");
1:0f90695:         master.addConnector(MASTER_URL);
1:0f90695:         master.setUseJmx(false);
1:0f90695:         master.setPersistent(true);
1:0f90695:         master.setDeleteAllMessagesOnStartup(true);
1:0f90695: 
1:0f90695:         MultiKahaDBPersistenceAdapter mKahaDB = new MultiKahaDBPersistenceAdapter();
1:0f90695:         List adapters = new LinkedList<FilteredKahaDBPersistenceAdapter>();
1:0f90695:         FilteredKahaDBPersistenceAdapter defaultEntry = new FilteredKahaDBPersistenceAdapter();
1:0f90695:         defaultEntry.setPersistenceAdapter(new KahaDBPersistenceAdapter());
1:0f90695:         defaultEntry.setPerDestination(true);
1:0f90695:         adapters.add(defaultEntry);
1:0f90695: 
1:0f90695:         mKahaDB.setFilteredPersistenceAdapters(adapters);
1:0f90695:         master.setPersistenceAdapter(mKahaDB);
1:0f90695: 
1:0f90695:         master.start();
1:0f90695:     }
1:0f90695: 
1:0f90695:     protected void createSlave() throws Exception {
1:0f90695:         // use a separate thread as the slave will block waiting for
1:0f90695:         // the exclusive db lock
1:0f90695:         Thread t = new Thread() {
1:0f90695:             public void run() {
1:0f90695:                 try {
1:0f90695:                     BrokerService broker = new BrokerService();
1:0f90695:                     broker.setBrokerName("slave");
1:0f90695:                     TransportConnector connector = new TransportConnector();
1:0f90695:                     connector.setUri(new URI(SLAVE_URL));
1:0f90695:                     broker.addConnector(connector);
1:0f90695:                     // no need for broker.setMasterConnectorURI(masterConnectorURI)
1:0f90695:                     // as the db lock provides the slave/master initialisation
1:0f90695:                     broker.setUseJmx(false);
1:0f90695:                     broker.setPersistent(true);
1:0f90695: 
1:0f90695:                     MultiKahaDBPersistenceAdapter mKahaDB = new MultiKahaDBPersistenceAdapter();
1:0f90695:                     List adapters = new LinkedList<FilteredKahaDBPersistenceAdapter>();
1:0f90695:                     FilteredKahaDBPersistenceAdapter defaultEntry = new FilteredKahaDBPersistenceAdapter();
1:0f90695:                     defaultEntry.setPersistenceAdapter(new KahaDBPersistenceAdapter());
1:0f90695:                     defaultEntry.setPerDestination(true);
1:0f90695:                     adapters.add(defaultEntry);
1:0f90695: 
1:0f90695:                     mKahaDB.setFilteredPersistenceAdapters(adapters);
1:0f90695:                     broker.setPersistenceAdapter(mKahaDB);
1:0f90695:                     broker.start();
1:0f90695:                     slave.set(broker);
1:0f90695:                     slaveStarted.countDown();
1:0f90695:                 } catch (IllegalStateException expectedOnShutdown) {
1:0f90695:                 } catch (Exception e) {
1:0f90695:                     fail("failed to start slave broker, reason:" + e);
1:0f90695:                 }
1:0f90695:             }
1:0f90695:         };
1:0f90695:         t.start();
1:0f90695:     }
1:0f90695: }
============================================================================
author:gtully
-------------------------------------------------------------------------------
commit:0f90695
/////////////////////////////////////////////////////////////////////////
1: /**
1:  * Licensed to the Apache Software Foundation (ASF) under one or more
1:  * contributor license agreements.  See the NOTICE file distributed with
1:  * this work for additional information regarding copyright ownership.
1:  * The ASF licenses this file to You under the Apache License, Version 2.0
1:  * (the "License"); you may not use this file except in compliance with
1:  * the License.  You may obtain a copy of the License at
1:  *
1:  *      http://www.apache.org/licenses/LICENSE-2.0
1:  *
1:  * Unless required by applicable law or agreed to in writing, software
1:  * distributed under the License is distributed on an "AS IS" BASIS,
1:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:  * See the License for the specific language governing permissions and
1:  * limitations under the License.
1:  */
1: package org.apache.activemq.broker.ft;
1: 
1: import java.net.URI;
1: import java.util.LinkedList;
1: import java.util.List;
1: import org.apache.activemq.broker.BrokerService;
1: import org.apache.activemq.broker.TransportConnector;
1: import org.apache.activemq.store.kahadb.FilteredKahaDBPersistenceAdapter;
1: import org.apache.activemq.store.kahadb.KahaDBPersistenceAdapter;
1: import org.apache.activemq.store.kahadb.MultiKahaDBPersistenceAdapter;
1: 
1: public class mKahaDbQueueMasterSlaveTest extends QueueMasterSlaveTestSupport {
1:     protected String MASTER_URL = "tcp://localhost:62001";
1:     protected String SLAVE_URL  = "tcp://localhost:62002";
1: 
1:     protected void createMaster() throws Exception {
1:         master = new BrokerService();
1:         master.setBrokerName("master");
1:         master.addConnector(MASTER_URL);
1:         master.setUseJmx(false);
1:         master.setPersistent(true);
1:         master.setDeleteAllMessagesOnStartup(true);
1: 
1:         MultiKahaDBPersistenceAdapter mKahaDB = new MultiKahaDBPersistenceAdapter();
1:         List adapters = new LinkedList<FilteredKahaDBPersistenceAdapter>();
1:         FilteredKahaDBPersistenceAdapter defaultEntry = new FilteredKahaDBPersistenceAdapter();
1:         defaultEntry.setPersistenceAdapter(new KahaDBPersistenceAdapter());
1:         defaultEntry.setPerDestination(true);
1:         adapters.add(defaultEntry);
1: 
1:         mKahaDB.setFilteredPersistenceAdapters(adapters);
1:         master.setPersistenceAdapter(mKahaDB);
1: 
1:         master.start();
1:     }
1: 
1:     protected void createSlave() throws Exception {
1:         // use a separate thread as the slave will block waiting for
1:         // the exclusive db lock
1:         Thread t = new Thread() {
1:             public void run() {
1:                 try {
1:                     BrokerService broker = new BrokerService();
1:                     broker.setBrokerName("slave");
1:                     TransportConnector connector = new TransportConnector();
1:                     connector.setUri(new URI(SLAVE_URL));
1:                     broker.addConnector(connector);
1:                     // no need for broker.setMasterConnectorURI(masterConnectorURI)
1:                     // as the db lock provides the slave/master initialisation
1:                     broker.setUseJmx(false);
1:                     broker.setPersistent(true);
1: 
1:                     MultiKahaDBPersistenceAdapter mKahaDB = new MultiKahaDBPersistenceAdapter();
1:                     List adapters = new LinkedList<FilteredKahaDBPersistenceAdapter>();
1:                     FilteredKahaDBPersistenceAdapter defaultEntry = new FilteredKahaDBPersistenceAdapter();
1:                     defaultEntry.setPersistenceAdapter(new KahaDBPersistenceAdapter());
1:                     defaultEntry.setPerDestination(true);
1:                     adapters.add(defaultEntry);
1: 
1:                     mKahaDB.setFilteredPersistenceAdapters(adapters);
1:                     broker.setPersistenceAdapter(mKahaDB);
1:                     broker.start();
1:                     slave.set(broker);
1:                     slaveStarted.countDown();
1:                 } catch (IllegalStateException expectedOnShutdown) {
1:                 } catch (Exception e) {
1:                     fail("failed to start slave broker, reason:" + e);
1:                 }
1:             }
1:         };
1:         t.start();
1:     }
1: }
============================================================================