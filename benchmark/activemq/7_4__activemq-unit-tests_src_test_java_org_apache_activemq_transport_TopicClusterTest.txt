1:a677c21: /**
1:57b4941:  * Licensed to the Apache Software Foundation (ASF) under one or more
1:57b4941:  * contributor license agreements.  See the NOTICE file distributed with
1:57b4941:  * this work for additional information regarding copyright ownership.
1:57b4941:  * The ASF licenses this file to You under the Apache License, Version 2.0
1:57b4941:  * (the "License"); you may not use this file except in compliance with
1:57b4941:  * the License.  You may obtain a copy of the License at
3:a677c21:  *
1:230a86c:  *      http://www.apache.org/licenses/LICENSE-2.0
1:a677c21:  *
1:a677c21:  * Unless required by applicable law or agreed to in writing, software
1:a677c21:  * distributed under the License is distributed on an "AS IS" BASIS,
1:a677c21:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:a677c21:  * See the License for the specific language governing permissions and
1:a677c21:  * limitations under the License.
1:a677c21:  */
9:a677c21: 
1:a677c21: package org.apache.activemq.transport;
1:230a86c: 
1:a677c21: import java.net.URI;
1:a677c21: import java.util.ArrayList;
1:a677c21: import java.util.List;
1:74a7a8b: import java.util.concurrent.atomic.AtomicInteger;
1:a677c21: 
1:a677c21: import javax.jms.Connection;
1:a677c21: import javax.jms.DeliveryMode;
1:a677c21: import javax.jms.Destination;
1:a677c21: import javax.jms.JMSException;
1:a677c21: import javax.jms.Message;
1:a677c21: import javax.jms.MessageConsumer;
1:a677c21: import javax.jms.MessageListener;
1:a677c21: import javax.jms.MessageProducer;
1:a677c21: import javax.jms.Session;
1:a677c21: import javax.jms.TextMessage;
1:a677c21: 
1:a677c21: import junit.framework.TestCase;
1:a677c21: import org.apache.activemq.ActiveMQConnectionFactory;
1:a677c21: import org.apache.activemq.broker.BrokerService;
1:a677c21: import org.apache.activemq.broker.TransportConnector;
1:a677c21: import org.apache.activemq.command.ActiveMQQueue;
1:a677c21: import org.apache.activemq.command.ActiveMQTextMessage;
1:a677c21: import org.apache.activemq.command.ActiveMQTopic;
1:a677c21: import org.apache.activemq.util.ServiceStopper;
1:8bf987b: import org.slf4j.Logger;
1:8bf987b: import org.slf4j.LoggerFactory;
1:a677c21: 
1:a677c21: /**
1:0bbc0ac:  * 
1:a677c21:  */
1:a677c21: public class TopicClusterTest extends TestCase implements MessageListener {
1:fc00993:     
1:fc00993:     protected static final int MESSAGE_COUNT = 50;
1:fc00993:     protected static final int NUMBER_IN_CLUSTER = 3;
1:8bf987b:     private static final Logger LOG = LoggerFactory.getLogger(TopicClusterTest.class);
1:fc00993:     
1:a677c21:     protected Destination destination;
1:a677c21:     protected boolean topic = true;
1:a677c21:     protected AtomicInteger receivedMessageCount = new AtomicInteger(0);
1:a677c21:     protected int deliveryMode = DeliveryMode.NON_PERSISTENT;
1:a677c21:     protected MessageProducer[] producers;
1:a677c21:     protected Connection[] connections;
1:933eb2f:     protected List<BrokerService> services = new ArrayList<BrokerService>();
1:2b3b7f5:     protected String groupId;
1:2b3b7f5:     
1:a677c21:     protected void setUp() throws Exception {
1:2b3b7f5:         groupId = "topic-cluster-test-"+System.currentTimeMillis();
1:a677c21:         connections = new Connection[NUMBER_IN_CLUSTER];
1:a677c21:         producers = new MessageProducer[NUMBER_IN_CLUSTER];
1:a677c21:         Destination destination = createDestination();
1:a677c21:         String root = System.getProperty("activemq.store.dir");
1:a677c21:         if (root == null) {
1:a677c21:             root = "target/store";
3:a677c21:         }
1:a677c21:         try {
1:230a86c:             for (int i = 0; i < NUMBER_IN_CLUSTER; i++) {
1:a677c21: 
1:a677c21:                 System.setProperty("activemq.store.dir", root + "_broker_" + i);
1:a677c21:                 connections[i] = createConnection("broker-" + i);
1:a677c21:                 connections[i].setClientID("ClusterTest" + i);
1:a677c21:                 connections[i].start();
1:a677c21:                 Session session = connections[i].createSession(false, Session.AUTO_ACKNOWLEDGE);
1:a677c21:                 producers[i] = session.createProducer(destination);
1:a677c21:                 producers[i].setDeliveryMode(deliveryMode);
1:230a86c:                 MessageConsumer consumer = createMessageConsumer(session, destination);
1:a677c21:                 consumer.setMessageListener(this);
1:a677c21: 
1:a677c21:             }
1:fc00993:             LOG.info("Sleeping to ensure cluster is fully connected");
1:a677c21:             Thread.sleep(5000);
1:a677c21:         } finally {
1:a677c21:             System.setProperty("activemq.store.dir", root);
1:a677c21:         }
1:a677c21:     }
1:a677c21: 
1:a677c21:     protected void tearDown() throws Exception {
1:a677c21:         if (connections != null) {
1:230a86c:             for (int i = 0; i < connections.length; i++) {
1:a677c21:                 connections[i].close();
1:a677c21:             }
1:a677c21:         }
1:a677c21:         ServiceStopper stopper = new ServiceStopper();
1:a677c21:         stopper.stopServices(services);
1:a677c21:     }
1:230a86c: 
1:230a86c:     protected MessageConsumer createMessageConsumer(Session session, Destination destination) throws JMSException {
1:a677c21:         return session.createConsumer(destination);
1:a677c21:     }
1:a677c21: 
1:a677c21:     protected ActiveMQConnectionFactory createGenericClusterFactory(String brokerName) throws Exception {
1:a677c21:         BrokerService container = new BrokerService();
1:a677c21:         container.setBrokerName(brokerName);
1:230a86c: 
1:a677c21:         String url = "tcp://localhost:0";
1:a677c21:         TransportConnector connector = container.addConnector(url);
1:4a7e0b3:         connector.setDiscoveryUri(new URI("multicast://default?group="+groupId));
1:4a7e0b3:         container.addNetworkConnector("multicast://default?group="+groupId);
1:a677c21:         container.start();
1:230a86c: 
1:a677c21:         services.add(container);
1:230a86c: 
1:230a86c:         return new ActiveMQConnectionFactory("vm://" + brokerName);
1:a677c21:     }
1:a677c21: 
1:a677c21:     protected int expectedReceiveCount() {
1:a677c21:         return MESSAGE_COUNT * NUMBER_IN_CLUSTER * NUMBER_IN_CLUSTER;
1:a677c21:     }
1:a677c21: 
1:a677c21:     protected Connection createConnection(String name) throws Exception {
1:a677c21:         return createGenericClusterFactory(name).createConnection();
1:a677c21:     }
1:a677c21: 
1:a677c21:     protected Destination createDestination() {
1:a677c21:         return createDestination(getClass().getName());
1:a677c21:     }
1:a677c21: 
1:a677c21:     protected Destination createDestination(String name) {
1:a677c21:         if (topic) {
1:a677c21:             return new ActiveMQTopic(name);
1:230a86c:         } else {
1:a677c21:             return new ActiveMQQueue(name);
1:a677c21:         }
1:a677c21:     }
1:a677c21: 
1:a677c21:     /**
1:a677c21:      * @param msg
1:a677c21:      */
1:a677c21:     public void onMessage(Message msg) {
1:230a86c:         // log.info("GOT: " + msg);
1:a677c21:         receivedMessageCount.incrementAndGet();
1:a677c21:         synchronized (receivedMessageCount) {
1:a677c21:             if (receivedMessageCount.get() >= expectedReceiveCount()) {
1:a677c21:                 receivedMessageCount.notify();
1:a677c21:             }
1:a677c21:         }
1:a677c21:     }
1:a677c21: 
1:a677c21:     /**
1:a677c21:      * @throws Exception
1:a677c21:      */
1:a677c21:     public void testSendReceive() throws Exception {
1:230a86c:         for (int i = 0; i < MESSAGE_COUNT; i++) {
1:a677c21:             TextMessage textMessage = new ActiveMQTextMessage();
1:a677c21:             textMessage.setText("MSG-NO:" + i);
1:230a86c:             for (int x = 0; x < producers.length; x++) {
1:a677c21:                 producers[x].send(textMessage);
1:a677c21:             }
1:a677c21:         }
1:a677c21:         synchronized (receivedMessageCount) {
1:a677c21:             if (receivedMessageCount.get() < expectedReceiveCount()) {
1:a677c21:                 receivedMessageCount.wait(20000);
1:a677c21:             }
1:a677c21:         }
1:230a86c:         // sleep a little - to check we don't get too many messages
1:a677c21:         Thread.sleep(2000);
1:fc00993:         LOG.info("GOT: " + receivedMessageCount.get());
1:a677c21:         assertEquals("Expected message count not correct", expectedReceiveCount(), receivedMessageCount.get());
1:86cbdfd:     }
1:a677c21: 
1:a677c21: }
============================================================================
author:Hadrian Zbarcea
-------------------------------------------------------------------------------
commit:f9bec8f
author:Timothy A. Bish
-------------------------------------------------------------------------------
commit:ef24cc9
author:Hiram R. Chirino
-------------------------------------------------------------------------------
commit:0bbc0ac
/////////////////////////////////////////////////////////////////////////
1:  * 
commit:2b3b7f5
/////////////////////////////////////////////////////////////////////////
1:     protected String groupId;
1:     
1:         groupId = "topic-cluster-test-"+System.currentTimeMillis();
/////////////////////////////////////////////////////////////////////////
commit:a2033b3
/////////////////////////////////////////////////////////////////////////
0:         String groupId = "topic-cluster-test-"+System.currentTimeMillis();
0:         connector.setDiscoveryUri(new URI("multicast://"+groupId));
0:         container.addNetworkConnector("multicast://"+groupId);
commit:933eb2f
/////////////////////////////////////////////////////////////////////////
0:     private static final Log LOG = LogFactory.getLog(TopicClusterTest.class);
/////////////////////////////////////////////////////////////////////////
1:     protected List<BrokerService> services = new ArrayList<BrokerService>();
commit:fc00993
/////////////////////////////////////////////////////////////////////////
1:     
0:     private static final Log LOG = LogFactory.getLog(TopicClusterTest.class);
1:     protected static final int MESSAGE_COUNT = 50;
1:     protected static final int NUMBER_IN_CLUSTER = 3;
1:     
/////////////////////////////////////////////////////////////////////////
1:             LOG.info("Sleeping to ensure cluster is fully connected");
/////////////////////////////////////////////////////////////////////////
1:         LOG.info("GOT: " + receivedMessageCount.get());
commit:74a7a8b
/////////////////////////////////////////////////////////////////////////
1: import java.util.concurrent.atomic.AtomicInteger;
/////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////
commit:230a86c
/////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////
1:  *      http://www.apache.org/licenses/LICENSE-2.0
/////////////////////////////////////////////////////////////////////////
1: 
/////////////////////////////////////////////////////////////////////////
1:             for (int i = 0; i < NUMBER_IN_CLUSTER; i++) {
/////////////////////////////////////////////////////////////////////////
1:                 MessageConsumer consumer = createMessageConsumer(session, destination);
/////////////////////////////////////////////////////////////////////////
1:             for (int i = 0; i < connections.length; i++) {
1: 
1:     protected MessageConsumer createMessageConsumer(Session session, Destination destination) throws JMSException {
1: 
0:         connector.setDiscoveryUri(new URI("multicast://default"));
1: 
1: 
1:         return new ActiveMQConnectionFactory("vm://" + brokerName);
/////////////////////////////////////////////////////////////////////////
1:         } else {
1:         // log.info("GOT: " + msg);
/////////////////////////////////////////////////////////////////////////
1:         for (int i = 0; i < MESSAGE_COUNT; i++) {
1:             for (int x = 0; x < producers.length; x++) {
/////////////////////////////////////////////////////////////////////////
1:         // sleep a little - to check we don't get too many messages
commit:86cbdfd
/////////////////////////////////////////////////////////////////////////
0: import java.util.concurrent.atomic.AtomicInteger;
/////////////////////////////////////////////////////////////////////////
1: }
commit:57b4941
/////////////////////////////////////////////////////////////////////////
1:  * Licensed to the Apache Software Foundation (ASF) under one or more
1:  * contributor license agreements.  See the NOTICE file distributed with
1:  * this work for additional information regarding copyright ownership.
1:  * The ASF licenses this file to You under the Apache License, Version 2.0
1:  * (the "License"); you may not use this file except in compliance with
1:  * the License.  You may obtain a copy of the License at
author:Bosanac Dejan
-------------------------------------------------------------------------------
commit:8bf987b
/////////////////////////////////////////////////////////////////////////
1: import org.slf4j.Logger;
1: import org.slf4j.LoggerFactory;
/////////////////////////////////////////////////////////////////////////
1:     private static final Logger LOG = LoggerFactory.getLogger(TopicClusterTest.class);
author:Gary Tully
-------------------------------------------------------------------------------
commit:4a7e0b3
/////////////////////////////////////////////////////////////////////////
1:         connector.setDiscoveryUri(new URI("multicast://default?group="+groupId));
1:         container.addNetworkConnector("multicast://default?group="+groupId);
author:Robert Davies
-------------------------------------------------------------------------------
commit:d36c0d4
/////////////////////////////////////////////////////////////////////////
0:     protected static final int MESSAGE_COUNT = 50;
0:     protected static final int NUMBER_IN_CLUSTER = 3;
author:James Strachan
-------------------------------------------------------------------------------
commit:b19f17c
/////////////////////////////////////////////////////////////////////////
0:         log.info("GOT: " + receivedMessageCount.get());
commit:a677c21
/////////////////////////////////////////////////////////////////////////
1: /**
1:  *
0:  * Copyright 2005-2006 The Apache Software Foundation
1:  *
0:  * Licensed under the Apache License, Version 2.0 (the "License");
0:  * you may not use this file except in compliance with the License.
0:  * You may obtain a copy of the License at
1:  *
0:  * http://www.apache.org/licenses/LICENSE-2.0
1:  *
1:  * Unless required by applicable law or agreed to in writing, software
1:  * distributed under the License is distributed on an "AS IS" BASIS,
1:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:  * See the License for the specific language governing permissions and
1:  * limitations under the License.
1:  */
1: 
1: package org.apache.activemq.transport;
1: import java.net.URI;
1: import java.util.ArrayList;
1: import java.util.List;
1: 
1: import javax.jms.Connection;
1: import javax.jms.DeliveryMode;
1: import javax.jms.Destination;
1: import javax.jms.JMSException;
1: import javax.jms.Message;
1: import javax.jms.MessageConsumer;
1: import javax.jms.MessageListener;
1: import javax.jms.MessageProducer;
1: import javax.jms.Session;
1: import javax.jms.TextMessage;
1: 
1: import junit.framework.TestCase;
1: 
1: import org.apache.activemq.ActiveMQConnectionFactory;
1: import org.apache.activemq.broker.BrokerService;
1: import org.apache.activemq.broker.TransportConnector;
1: import org.apache.activemq.command.ActiveMQQueue;
1: import org.apache.activemq.command.ActiveMQTextMessage;
1: import org.apache.activemq.command.ActiveMQTopic;
1: import org.apache.activemq.util.ServiceStopper;
0: import org.apache.commons.logging.Log;
0: import org.apache.commons.logging.LogFactory;
1: 
0: import edu.emory.mathcs.backport.java.util.concurrent.atomic.AtomicInteger;
1: 
1: /**
0:  * @version $Revision$
1:  */
1: public class TopicClusterTest extends TestCase implements MessageListener {
0:     protected final static Log log = LogFactory.getLog(TopicClusterTest.class);
1:     protected Destination destination;
1:     protected boolean topic = true;
1:     protected AtomicInteger receivedMessageCount = new AtomicInteger(0);
0:     protected static int MESSAGE_COUNT = 50;
0:     protected static int NUMBER_IN_CLUSTER = 3;
1:     protected int deliveryMode = DeliveryMode.NON_PERSISTENT;
1:     protected MessageProducer[] producers;
1:     protected Connection[] connections;
0:     protected List services = new ArrayList();
1: 
1:     protected void setUp() throws Exception {
1:         connections = new Connection[NUMBER_IN_CLUSTER];
1:         producers = new MessageProducer[NUMBER_IN_CLUSTER];
1:         Destination destination = createDestination();
0:         int portStart = 50000;
1:         String root = System.getProperty("activemq.store.dir");
1:         if (root == null) {
1:             root = "target/store";
1:         }
1:         try {
0:             for (int i = 0;i < NUMBER_IN_CLUSTER;i++) {
1: 
1:                 System.setProperty("activemq.store.dir", root + "_broker_" + i);
1:                 connections[i] = createConnection("broker-" + i);
1:                 connections[i].setClientID("ClusterTest" + i);
1:                 connections[i].start();
1:                 Session session = connections[i].createSession(false, Session.AUTO_ACKNOWLEDGE);
1:                 producers[i] = session.createProducer(destination);
1:                 producers[i].setDeliveryMode(deliveryMode);
0:                 MessageConsumer consumer = createMessageConsumer(session,destination);
1:                 consumer.setMessageListener(this);
1: 
1:             }
0:             log.info("Sleeping to ensure cluster is fully connected");
1:             Thread.sleep(5000);
1:         } finally {
1:             System.setProperty("activemq.store.dir", root);
1:         }
1:     }
1: 
1:     protected void tearDown() throws Exception {
1:         if (connections != null) {
0:             for (int i = 0;i < connections.length;i++) {
1:                 connections[i].close();
1:             }
1:         }
1:         ServiceStopper stopper = new ServiceStopper();
1:         stopper.stopServices(services);
1:     }
1:     
0:     protected MessageConsumer createMessageConsumer(Session session, Destination destination) throws JMSException{
1:         return session.createConsumer(destination);
1:     }
1: 
1:     protected ActiveMQConnectionFactory createGenericClusterFactory(String brokerName) throws Exception {
1:         BrokerService container = new BrokerService();
1:         container.setBrokerName(brokerName);
1:       
1:         String url = "tcp://localhost:0";
1:         TransportConnector connector = container.addConnector(url);
0:         connector.setDiscoveryUri(new URI("multicast://default"));        
0:         container.addNetworkConnector("multicast://default");
1:         container.start();
1:         
1:         services.add(container);
1:         
0:         return new ActiveMQConnectionFactory("vm://"+brokerName);
1:     }
1: 
1:     protected int expectedReceiveCount() {
1:         return MESSAGE_COUNT * NUMBER_IN_CLUSTER * NUMBER_IN_CLUSTER;
1:     }
1: 
1:     protected Connection createConnection(String name) throws Exception {
1:         return createGenericClusterFactory(name).createConnection();
1:     }
1: 
1:     protected Destination createDestination() {
1:         return createDestination(getClass().getName());
1:     }
1: 
1:     protected Destination createDestination(String name) {
1:         if (topic) {
1:             return new ActiveMQTopic(name);
1:         }
0:         else {
1:             return new ActiveMQQueue(name);
1:         }
1:     }
1: 
1: 
1:     /**
1:      * @param msg
1:      */
1:     public void onMessage(Message msg) {
0:         //log.info("GOT: " + msg);
1:         receivedMessageCount.incrementAndGet();
1:         synchronized (receivedMessageCount) {
1:             if (receivedMessageCount.get() >= expectedReceiveCount()) {
1:                 receivedMessageCount.notify();
1:             }
1:         }
1:     }
1: 
1:     /**
1:      * @throws Exception
1:      */
1:     public void testSendReceive() throws Exception {
0:         for (int i = 0;i < MESSAGE_COUNT;i++) {
1:             TextMessage textMessage = new ActiveMQTextMessage();
1:             textMessage.setText("MSG-NO:" + i);
0:             for (int x = 0;x < producers.length;x++) {
1:                 producers[x].send(textMessage);
1:             }
1:         }
1:         synchronized (receivedMessageCount) {
1:             if (receivedMessageCount.get() < expectedReceiveCount()) {
1:                 receivedMessageCount.wait(20000);
1:             }
1:         }
0:         //sleep a little - to check we don't get too many messages
1:         Thread.sleep(2000);
0:         System.err.println("GOT: " + receivedMessageCount.get());
1:         assertEquals("Expected message count not correct", expectedReceiveCount(), receivedMessageCount.get());
1:     }
1: 
1: }
============================================================================