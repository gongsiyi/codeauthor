1:3326ab9: /**
1:3326ab9:  * Licensed to the Apache Software Foundation (ASF) under one or more
1:3326ab9:  * contributor license agreements.  See the NOTICE file distributed with
1:3326ab9:  * this work for additional information regarding copyright ownership.
1:3326ab9:  * The ASF licenses this file to You under the Apache License, Version 2.0
1:3326ab9:  * (the "License"); you may not use this file except in compliance with
1:3326ab9:  * the License.  You may obtain a copy of the License at
1:3326ab9:  *
1:3326ab9:  *      http://www.apache.org/licenses/LICENSE-2.0
1:3326ab9:  *
1:3326ab9:  * Unless required by applicable law or agreed to in writing, software
1:3326ab9:  * distributed under the License is distributed on an "AS IS" BASIS,
1:3326ab9:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:3326ab9:  * See the License for the specific language governing permissions and
1:3326ab9:  * limitations under the License.
1:3326ab9:  */
1:3326ab9: package org.apache.activemq.network;
1:3326ab9: 
1:3326ab9: import org.apache.activemq.ActiveMQConnectionFactory;
1:0d12055: import org.apache.activemq.TestSupport;
1:3326ab9: import org.apache.activemq.broker.BrokerService;
1:3326ab9: import org.apache.activemq.command.ActiveMQQueue;
1:3326ab9: import org.apache.activemq.xbean.BrokerFactoryBean;
1:3326ab9: import org.slf4j.Logger;
1:3326ab9: import org.slf4j.LoggerFactory;
1:3326ab9: import org.springframework.core.io.ClassPathResource;
1:3326ab9: import org.springframework.core.io.Resource;
1:3326ab9: 
1:3326ab9: import javax.jms.*;
1:3326ab9: 
1:0d12055: public class NetworkRestartTest extends TestSupport {
1:3326ab9: 
1:3326ab9:     private static final Logger LOG = LoggerFactory.getLogger(NetworkRestartTest.class);
1:3326ab9: 
1:3326ab9:     protected Connection localConnection;
1:3326ab9:     protected Connection remoteConnection;
1:3326ab9:     protected BrokerService localBroker;
1:3326ab9:     protected BrokerService remoteBroker;
1:3326ab9:     protected Session localSession;
1:3326ab9:     protected Session remoteSession;
1:3326ab9: 
1:3326ab9:     protected ActiveMQQueue included=new ActiveMQQueue("include.test.foo");
1:3326ab9: 
1:3326ab9: 
1:3326ab9:     public void testConnectorRestart() throws Exception {
1:3326ab9:         MessageConsumer remoteConsumer = remoteSession.createConsumer(included);
1:3326ab9:         MessageProducer localProducer = localSession.createProducer(included);
1:3326ab9: 
1:3326ab9:         localProducer.send(localSession.createTextMessage("before"));
1:3326ab9:         Message before = remoteConsumer.receive(1000);
1:3326ab9:         assertNotNull(before);
1:3326ab9:         assertEquals("before", ((TextMessage)before).getText());
1:3326ab9: 
1:3326ab9:         // restart connector
1:3326ab9: 
1:af1b232:         // wait for ack back to localbroker with concurrent store and dispatch, dispatch occurs first
1:af1b232:         Thread.sleep(1000);
1:af1b232: 
1:3326ab9:         NetworkConnector connector = localBroker.getNetworkConnectorByName("networkConnector");
1:af1b232: 
1:3326ab9:         LOG.info("Stopping connector");
1:3326ab9:         connector.stop();
1:3326ab9: 
1:3326ab9:         Thread.sleep(5000);
1:3326ab9:         LOG.info("Starting connector");
1:3326ab9:         connector.start();
1:3326ab9: 
1:3326ab9:         Thread.sleep(5000);
1:3326ab9: 
1:3326ab9: 
1:3326ab9:         localProducer.send(localSession.createTextMessage("after"));
1:4a0bc68:         Message after = remoteConsumer.receive(3000);
1:3326ab9:         assertNotNull(after);
1:3326ab9:         assertEquals("after", ((TextMessage)after).getText());
1:3326ab9: 
1:3326ab9:     }
1:27e6dd7: 
1:27e6dd7:     public void testConnectorReAdd() throws Exception {
1:27e6dd7:         MessageConsumer remoteConsumer = remoteSession.createConsumer(included);
1:27e6dd7:         MessageProducer localProducer = localSession.createProducer(included);
1:27e6dd7: 
1:27e6dd7:         localProducer.send(localSession.createTextMessage("before"));
1:27e6dd7:         Message before = remoteConsumer.receive(1000);
1:27e6dd7:         assertNotNull(before);
1:27e6dd7:         assertEquals("before", ((TextMessage)before).getText());
1:27e6dd7: 
1:27e6dd7:         // restart connector
1:27e6dd7: 
1:af1b232:         // wait for ack back to localbroker with concurrent store and dispatch, dispatch occurs first
1:af1b232:         Thread.sleep(1000);
1:27e6dd7: 
1:27e6dd7:         NetworkConnector connector = localBroker.getNetworkConnectorByName("networkConnector");
1:3326ab9: 
1:27e6dd7:         LOG.info("Removing connector");
1:27e6dd7:         connector.stop();
1:27e6dd7:         localBroker.removeNetworkConnector(connector);
1:27e6dd7: 
1:27e6dd7:         Thread.sleep(5000);
1:27e6dd7:         LOG.info("Re-adding connector");
1:27e6dd7:         localBroker.addNetworkConnector(connector);
1:27e6dd7:         connector.start();
1:27e6dd7: 
1:27e6dd7:         Thread.sleep(5000);
1:27e6dd7: 
1:27e6dd7: 
1:27e6dd7:         localProducer.send(localSession.createTextMessage("after"));
1:4a0bc68:         Message after = remoteConsumer.receive(3000);
1:27e6dd7:         assertNotNull(after);
1:27e6dd7:         assertEquals("after", ((TextMessage)after).getText());
1:27e6dd7:     }
1:3326ab9: 
1:3326ab9: 
1:3326ab9:     protected void setUp() throws Exception {
1:0d12055:         setAutoFail(true);
1:3326ab9:         super.setUp();
1:3326ab9:         doSetUp();
1:3326ab9:     }
1:3326ab9: 
1:3326ab9:     protected void tearDown() throws Exception {
1:3326ab9:         localBroker.deleteAllMessages();
1:3326ab9:         remoteBroker.deleteAllMessages();
1:3326ab9:         doTearDown();
1:3326ab9:         super.tearDown();
1:3326ab9:     }
1:3326ab9: 
1:3326ab9:     protected void doTearDown() throws Exception {
1:3326ab9:         localConnection.close();
1:3326ab9:         remoteConnection.close();
1:3326ab9:         localBroker.stop();
1:3326ab9:         localBroker.waitUntilStopped();
1:3326ab9:         remoteBroker.stop();
1:3326ab9:         remoteBroker.waitUntilStopped();
1:3326ab9:     }
1:3326ab9: 
1:3326ab9:     protected void doSetUp() throws Exception {
1:3326ab9: 
1:3326ab9:         remoteBroker = createRemoteBroker();
1:c4a1346:         remoteBroker.setDeleteAllMessagesOnStartup(true);
1:3326ab9:         remoteBroker.start();
1:3326ab9:         remoteBroker.waitUntilStarted();
1:3326ab9:         localBroker = createLocalBroker();
1:c4a1346:         localBroker.setDeleteAllMessagesOnStartup(true);
1:3326ab9:         localBroker.start();
1:3326ab9:         localBroker.waitUntilStarted();
1:3326ab9: 
1:3326ab9:         String localURI = "tcp://localhost:61616";
1:3326ab9:         String remoteURI = "tcp://localhost:61617";
1:3326ab9:         ActiveMQConnectionFactory fac = new ActiveMQConnectionFactory(localURI);
1:3326ab9:         localConnection = fac.createConnection();
1:3326ab9:         localConnection.setClientID("local");
1:3326ab9:         localConnection.start();
1:3326ab9: 
1:3326ab9:         fac = new ActiveMQConnectionFactory(remoteURI);
1:3326ab9:         fac.setWatchTopicAdvisories(false);
1:3326ab9:         remoteConnection = fac.createConnection();
1:3326ab9:         remoteConnection.setClientID("remote");
1:3326ab9:         remoteConnection.start();
1:3326ab9: 
1:3326ab9:         localSession = localConnection.createSession(false, Session.AUTO_ACKNOWLEDGE);
1:3326ab9:         remoteSession = remoteConnection.createSession(false, Session.AUTO_ACKNOWLEDGE);
1:3326ab9:     }
1:3326ab9: 
1:3326ab9:     protected String getRemoteBrokerURI() {
1:3326ab9:         return "org/apache/activemq/network/remoteBroker.xml";
1:3326ab9:     }
1:3326ab9: 
1:3326ab9:     protected String getLocalBrokerURI() {
1:3326ab9:         return "org/apache/activemq/network/localBroker.xml";
1:3326ab9:     }
1:3326ab9: 
1:3326ab9:     protected BrokerService createBroker(String uri) throws Exception {
1:3326ab9:         Resource resource = new ClassPathResource(uri);
1:3326ab9:         BrokerFactoryBean factory = new BrokerFactoryBean(resource);
1:3326ab9:         resource = new ClassPathResource(uri);
1:3326ab9:         factory = new BrokerFactoryBean(resource);
1:3326ab9:         factory.afterPropertiesSet();
1:3326ab9:         BrokerService result = factory.getBroker();
1:3326ab9:         return result;
1:3326ab9:     }
1:3326ab9: 
1:3326ab9:     protected BrokerService createLocalBroker() throws Exception {
1:3326ab9:         return createBroker(getLocalBrokerURI());
1:3326ab9:     }
1:3326ab9: 
1:3326ab9:     protected BrokerService createRemoteBroker() throws Exception {
1:3326ab9:         return createBroker(getRemoteBrokerURI());
1:3326ab9:     }
1:3326ab9: 
1:3326ab9: }
============================================================================
author:gtully
-------------------------------------------------------------------------------
commit:c4a1346
/////////////////////////////////////////////////////////////////////////
1:         remoteBroker.setDeleteAllMessagesOnStartup(true);
1:         localBroker.setDeleteAllMessagesOnStartup(true);
author:Timothy A. Bish
-------------------------------------------------------------------------------
commit:ef24cc9
author:Claus Ibsen
-------------------------------------------------------------------------------
commit:4a0bc68
/////////////////////////////////////////////////////////////////////////
1:         Message after = remoteConsumer.receive(3000);
/////////////////////////////////////////////////////////////////////////
1:         Message after = remoteConsumer.receive(3000);
author:Gary Tully
-------------------------------------------------------------------------------
commit:0d12055
/////////////////////////////////////////////////////////////////////////
1: import org.apache.activemq.TestSupport;
/////////////////////////////////////////////////////////////////////////
1: public class NetworkRestartTest extends TestSupport {
/////////////////////////////////////////////////////////////////////////
1:         setAutoFail(true);
commit:af1b232
/////////////////////////////////////////////////////////////////////////
1:         // wait for ack back to localbroker with concurrent store and dispatch, dispatch occurs first
1:         Thread.sleep(1000);
1: 
/////////////////////////////////////////////////////////////////////////
1:         // wait for ack back to localbroker with concurrent store and dispatch, dispatch occurs first
1:         Thread.sleep(1000);
1: 
author:Bosanac Dejan
-------------------------------------------------------------------------------
commit:27e6dd7
/////////////////////////////////////////////////////////////////////////
1:     public void testConnectorReAdd() throws Exception {
1:         MessageConsumer remoteConsumer = remoteSession.createConsumer(included);
1:         MessageProducer localProducer = localSession.createProducer(included);
1: 
1:         localProducer.send(localSession.createTextMessage("before"));
1:         Message before = remoteConsumer.receive(1000);
1:         assertNotNull(before);
1:         assertEquals("before", ((TextMessage)before).getText());
1: 
1:         // restart connector
1: 
1:         NetworkConnector connector = localBroker.getNetworkConnectorByName("networkConnector");
1: 
1:         LOG.info("Removing connector");
1:         connector.stop();
1:         localBroker.removeNetworkConnector(connector);
1: 
1:         Thread.sleep(5000);
1:         LOG.info("Re-adding connector");
1:         localBroker.addNetworkConnector(connector);
1:         connector.start();
1: 
1:         Thread.sleep(5000);
1: 
1: 
1:         localProducer.send(localSession.createTextMessage("after"));
0:         Message after = remoteConsumer.receive(1000);
1:         assertNotNull(after);
1:         assertEquals("after", ((TextMessage)after).getText());
1:     }
1: 
commit:3326ab9
/////////////////////////////////////////////////////////////////////////
1: /**
1:  * Licensed to the Apache Software Foundation (ASF) under one or more
1:  * contributor license agreements.  See the NOTICE file distributed with
1:  * this work for additional information regarding copyright ownership.
1:  * The ASF licenses this file to You under the Apache License, Version 2.0
1:  * (the "License"); you may not use this file except in compliance with
1:  * the License.  You may obtain a copy of the License at
1:  *
1:  *      http://www.apache.org/licenses/LICENSE-2.0
1:  *
1:  * Unless required by applicable law or agreed to in writing, software
1:  * distributed under the License is distributed on an "AS IS" BASIS,
1:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:  * See the License for the specific language governing permissions and
1:  * limitations under the License.
1:  */
1: package org.apache.activemq.network;
1: 
0: import junit.framework.TestCase;
1: import org.apache.activemq.ActiveMQConnectionFactory;
1: import org.apache.activemq.broker.BrokerService;
1: import org.apache.activemq.command.ActiveMQQueue;
1: import org.apache.activemq.xbean.BrokerFactoryBean;
1: import org.slf4j.Logger;
1: import org.slf4j.LoggerFactory;
1: import org.springframework.core.io.ClassPathResource;
1: import org.springframework.core.io.Resource;
1: 
1: import javax.jms.*;
1: 
0: public class NetworkRestartTest extends TestCase {
1: 
1:     private static final Logger LOG = LoggerFactory.getLogger(NetworkRestartTest.class);
1: 
1:     protected Connection localConnection;
1:     protected Connection remoteConnection;
1:     protected BrokerService localBroker;
1:     protected BrokerService remoteBroker;
1:     protected Session localSession;
1:     protected Session remoteSession;
1: 
1:     protected ActiveMQQueue included=new ActiveMQQueue("include.test.foo");
1: 
1: 
1:     public void testConnectorRestart() throws Exception {
1:         MessageConsumer remoteConsumer = remoteSession.createConsumer(included);
1:         MessageProducer localProducer = localSession.createProducer(included);
1: 
1:         localProducer.send(localSession.createTextMessage("before"));
1:         Message before = remoteConsumer.receive(1000);
1:         assertNotNull(before);
1:         assertEquals("before", ((TextMessage)before).getText());
1: 
1:         // restart connector
1: 
1:         NetworkConnector connector = localBroker.getNetworkConnectorByName("networkConnector");
1: 
1:         LOG.info("Stopping connector");
1:         connector.stop();
1: 
1:         Thread.sleep(5000);
1:         LOG.info("Starting connector");
1:         connector.start();
1: 
1:         Thread.sleep(5000);
1: 
1: 
1:         localProducer.send(localSession.createTextMessage("after"));
0:         Message after = remoteConsumer.receive(1000);
1:         assertNotNull(after);
1:         assertEquals("after", ((TextMessage)after).getText());
1: 
1:     }
1: 
1: 
1:     protected void setUp() throws Exception {
1:         super.setUp();
1:         doSetUp();
1:     }
1: 
1:     protected void tearDown() throws Exception {
1:         localBroker.deleteAllMessages();
1:         remoteBroker.deleteAllMessages();
1:         doTearDown();
1:         super.tearDown();
1:     }
1: 
1:     protected void doTearDown() throws Exception {
1:         localConnection.close();
1:         remoteConnection.close();
1:         localBroker.stop();
1:         localBroker.waitUntilStopped();
1:         remoteBroker.stop();
1:         remoteBroker.waitUntilStopped();
1:     }
1: 
1:     protected void doSetUp() throws Exception {
1: 
1:         remoteBroker = createRemoteBroker();
1:         remoteBroker.start();
1:         remoteBroker.waitUntilStarted();
1:         localBroker = createLocalBroker();
1:         localBroker.start();
1:         localBroker.waitUntilStarted();
1: 
1:         String localURI = "tcp://localhost:61616";
1:         String remoteURI = "tcp://localhost:61617";
1:         ActiveMQConnectionFactory fac = new ActiveMQConnectionFactory(localURI);
1:         localConnection = fac.createConnection();
1:         localConnection.setClientID("local");
1:         localConnection.start();
1: 
1:         fac = new ActiveMQConnectionFactory(remoteURI);
1:         fac.setWatchTopicAdvisories(false);
1:         remoteConnection = fac.createConnection();
1:         remoteConnection.setClientID("remote");
1:         remoteConnection.start();
1: 
1:         localSession = localConnection.createSession(false, Session.AUTO_ACKNOWLEDGE);
1:         remoteSession = remoteConnection.createSession(false, Session.AUTO_ACKNOWLEDGE);
1:     }
1: 
1:     protected String getRemoteBrokerURI() {
1:         return "org/apache/activemq/network/remoteBroker.xml";
1:     }
1: 
1:     protected String getLocalBrokerURI() {
1:         return "org/apache/activemq/network/localBroker.xml";
1:     }
1: 
1:     protected BrokerService createBroker(String uri) throws Exception {
1:         Resource resource = new ClassPathResource(uri);
1:         BrokerFactoryBean factory = new BrokerFactoryBean(resource);
1:         resource = new ClassPathResource(uri);
1:         factory = new BrokerFactoryBean(resource);
1:         factory.afterPropertiesSet();
1:         BrokerService result = factory.getBroker();
1:         return result;
1:     }
1: 
1:     protected BrokerService createLocalBroker() throws Exception {
1:         return createBroker(getLocalBrokerURI());
1:     }
1: 
1:     protected BrokerService createRemoteBroker() throws Exception {
1:         return createBroker(getRemoteBrokerURI());
1:     }
1: 
1: }
============================================================================