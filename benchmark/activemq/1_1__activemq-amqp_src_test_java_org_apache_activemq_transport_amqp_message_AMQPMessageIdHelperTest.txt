1:4d6f4d7: /*
1:4d6f4d7:  *
1:4d6f4d7:  * Licensed to the Apache Software Foundation (ASF) under one
1:4d6f4d7:  * or more contributor license agreements.  See the NOTICE file
1:4d6f4d7:  * distributed with this work for additional information
1:4d6f4d7:  * regarding copyright ownership.  The ASF licenses this file
1:4d6f4d7:  * to you under the Apache License, Version 2.0 (the
1:4d6f4d7:  * "License"); you may not use this file except in compliance
1:4d6f4d7:  * with the License.  You may obtain a copy of the License at
1:4d6f4d7:  *
1:4d6f4d7:  *   http://www.apache.org/licenses/LICENSE-2.0
1:4d6f4d7:  *
1:4d6f4d7:  * Unless required by applicable law or agreed to in writing,
1:4d6f4d7:  * software distributed under the License is distributed on an
1:4d6f4d7:  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
1:4d6f4d7:  * KIND, either express or implied.  See the License for the
1:4d6f4d7:  * specific language governing permissions and limitations
1:4d6f4d7:  * under the License.
1:4d6f4d7:  *
1:4d6f4d7:  */
1:4d6f4d7: package org.apache.activemq.transport.amqp.message;
1:4d6f4d7: 
1:4d6f4d7: import static org.junit.Assert.assertEquals;
1:4d6f4d7: import static org.junit.Assert.assertNotNull;
1:4d6f4d7: import static org.junit.Assert.assertNull;
1:4d6f4d7: import static org.junit.Assert.fail;
1:4d6f4d7: 
1:4d6f4d7: import java.util.UUID;
1:4d6f4d7: 
1:4d6f4d7: import org.apache.activemq.transport.amqp.AmqpProtocolException;
1:4d6f4d7: import org.apache.qpid.jms.exceptions.IdConversionException;
1:4d6f4d7: import org.apache.qpid.proton.amqp.Binary;
1:4d6f4d7: import org.apache.qpid.proton.amqp.UnsignedLong;
1:4d6f4d7: import org.junit.Before;
1:4d6f4d7: import org.junit.Test;
1:4d6f4d7: 
1:4d6f4d7: public class AMQPMessageIdHelperTest {
1:4d6f4d7: 
1:4d6f4d7:     private AMQPMessageIdHelper messageIdHelper;
1:4d6f4d7: 
1:4d6f4d7:     @Before
1:4d6f4d7:     public void setUp() throws Exception {
1:4d6f4d7:         messageIdHelper = new AMQPMessageIdHelper();
1:4d6f4d7:     }
1:4d6f4d7: 
1:4d6f4d7:     /**
1:4d6f4d7:      * Test that {@link AMQPMessageIdHelper#toBaseMessageIdString(Object)}
1:4d6f4d7:      * returns null if given null
1:4d6f4d7:      */
1:4d6f4d7:     @Test
1:4d6f4d7:     public void testToBaseMessageIdStringWithNull() {
1:4d6f4d7:         String nullString = null;
1:4d6f4d7:         assertNull("null string should have been returned", messageIdHelper.toBaseMessageIdString(nullString));
1:4d6f4d7:     }
1:4d6f4d7: 
1:4d6f4d7:     /**
1:4d6f4d7:      * Test that {@link AMQPMessageIdHelper#toBaseMessageIdString(Object)}
1:4d6f4d7:      * throws an IAE if given an unexpected object type.
1:4d6f4d7:      */
1:4d6f4d7:     @Test
1:4d6f4d7:     public void testToBaseMessageIdStringThrowsIAEWithUnexpectedType() {
1:4d6f4d7:         try {
1:4d6f4d7:             messageIdHelper.toBaseMessageIdString(new Object());
1:4d6f4d7:             fail("expected exception not thrown");
1:4d6f4d7:         } catch (IllegalArgumentException iae) {
1:4d6f4d7:             // expected
1:4d6f4d7:         }
1:4d6f4d7:     }
1:4d6f4d7: 
1:4d6f4d7:     /**
1:4d6f4d7:      * Test that {@link AMQPMessageIdHelper#toBaseMessageIdString(Object)}
1:4d6f4d7:      * returns the given basic string unchanged
1:4d6f4d7:      */
1:4d6f4d7:     @Test
1:4d6f4d7:     public void testToBaseMessageIdStringWithString() {
1:4d6f4d7:         String stringMessageId = "myIdString";
1:4d6f4d7: 
1:4d6f4d7:         String baseMessageIdString = messageIdHelper.toBaseMessageIdString(stringMessageId);
1:4d6f4d7:         assertNotNull("null string should not have been returned", baseMessageIdString);
1:4d6f4d7:         assertEquals("expected base id string was not returned", stringMessageId, baseMessageIdString);
1:4d6f4d7:     }
1:4d6f4d7: 
1:4d6f4d7:     /**
1:4d6f4d7:      * Test that {@link AMQPMessageIdHelper#toBaseMessageIdString(Object)}
1:4d6f4d7:      * returns a string indicating an AMQP encoded string, when the given string
1:4d6f4d7:      * happens to already begin with the
1:4d6f4d7:      * {@link AMQPMessageIdHelper#AMQP_UUID_PREFIX}.
1:4d6f4d7:      */
1:4d6f4d7:     @Test
1:4d6f4d7:     public void testToBaseMessageIdStringWithStringBeginningWithEncodingPrefixForUUID() {
1:4d6f4d7:         String uuidStringMessageId = AMQPMessageIdHelper.AMQP_UUID_PREFIX + UUID.randomUUID();
1:4d6f4d7:         String expected = AMQPMessageIdHelper.AMQP_STRING_PREFIX + uuidStringMessageId;
1:4d6f4d7: 
1:4d6f4d7:         String baseMessageIdString = messageIdHelper.toBaseMessageIdString(uuidStringMessageId);
1:4d6f4d7:         assertNotNull("null string should not have been returned", baseMessageIdString);
1:4d6f4d7:         assertEquals("expected base id string was not returned", expected, baseMessageIdString);
1:4d6f4d7:     }
1:4d6f4d7: 
1:4d6f4d7:     /**
1:4d6f4d7:      * Test that {@link AMQPMessageIdHelper#toBaseMessageIdString(Object)}
1:4d6f4d7:      * returns a string indicating an AMQP encoded string, when the given string
1:4d6f4d7:      * happens to already begin with the
1:4d6f4d7:      * {@link AMQPMessageIdHelper#AMQP_ULONG_PREFIX}.
1:4d6f4d7:      */
1:4d6f4d7:     @Test
1:4d6f4d7:     public void testToBaseMessageIdStringWithStringBeginningWithEncodingPrefixForLong() {
1:4d6f4d7:         String longStringMessageId = AMQPMessageIdHelper.AMQP_ULONG_PREFIX + Long.valueOf(123456789L);
1:4d6f4d7:         String expected = AMQPMessageIdHelper.AMQP_STRING_PREFIX + longStringMessageId;
1:4d6f4d7: 
1:4d6f4d7:         String baseMessageIdString = messageIdHelper.toBaseMessageIdString(longStringMessageId);
1:4d6f4d7:         assertNotNull("null string should not have been returned", baseMessageIdString);
1:4d6f4d7:         assertEquals("expected base id string was not returned", expected, baseMessageIdString);
1:4d6f4d7:     }
1:4d6f4d7: 
1:4d6f4d7:     /**
1:4d6f4d7:      * Test that {@link AMQPMessageIdHelper#toBaseMessageIdString(Object)}
1:4d6f4d7:      * returns a string indicating an AMQP encoded string, when the given string
1:4d6f4d7:      * happens to already begin with the
1:4d6f4d7:      * {@link AMQPMessageIdHelper#AMQP_BINARY_PREFIX}.
1:4d6f4d7:      */
1:4d6f4d7:     @Test
1:4d6f4d7:     public void testToBaseMessageIdStringWithStringBeginningWithEncodingPrefixForBinary() {
1:4d6f4d7:         String binaryStringMessageId = AMQPMessageIdHelper.AMQP_BINARY_PREFIX + "0123456789ABCDEF";
1:4d6f4d7:         String expected = AMQPMessageIdHelper.AMQP_STRING_PREFIX + binaryStringMessageId;
1:4d6f4d7: 
1:4d6f4d7:         String baseMessageIdString = messageIdHelper.toBaseMessageIdString(binaryStringMessageId);
1:4d6f4d7:         assertNotNull("null string should not have been returned", baseMessageIdString);
1:4d6f4d7:         assertEquals("expected base id string was not returned", expected, baseMessageIdString);
1:4d6f4d7:     }
1:4d6f4d7: 
1:4d6f4d7:     /**
1:4d6f4d7:      * Test that {@link AMQPMessageIdHelper#toBaseMessageIdString(Object)}
1:4d6f4d7:      * returns a string indicating an AMQP encoded string (effectively twice),
1:4d6f4d7:      * when the given string happens to already begin with the
1:4d6f4d7:      * {@link AMQPMessageIdHelper#AMQP_STRING_PREFIX}.
1:4d6f4d7:      */
1:4d6f4d7:     @Test
1:4d6f4d7:     public void testToBaseMessageIdStringWithStringBeginningWithEncodingPrefixForString() {
1:4d6f4d7:         String stringMessageId = AMQPMessageIdHelper.AMQP_STRING_PREFIX + "myStringId";
1:4d6f4d7:         String expected = AMQPMessageIdHelper.AMQP_STRING_PREFIX + stringMessageId;
1:4d6f4d7: 
1:4d6f4d7:         String baseMessageIdString = messageIdHelper.toBaseMessageIdString(stringMessageId);
1:4d6f4d7:         assertNotNull("null string should not have been returned", baseMessageIdString);
1:4d6f4d7:         assertEquals("expected base id string was not returned", expected, baseMessageIdString);
1:4d6f4d7:     }
1:4d6f4d7: 
1:4d6f4d7:     /**
1:4d6f4d7:      * Test that {@link AMQPMessageIdHelper#toBaseMessageIdString(Object)}
1:4d6f4d7:      * returns a string indicating an AMQP encoded UUID when given a UUID
1:4d6f4d7:      * object.
1:4d6f4d7:      */
1:4d6f4d7:     @Test
1:4d6f4d7:     public void testToBaseMessageIdStringWithUUID() {
1:4d6f4d7:         UUID uuidMessageId = UUID.randomUUID();
1:4d6f4d7:         String expected = AMQPMessageIdHelper.AMQP_UUID_PREFIX + uuidMessageId.toString();
1:4d6f4d7: 
1:4d6f4d7:         String baseMessageIdString = messageIdHelper.toBaseMessageIdString(uuidMessageId);
1:4d6f4d7:         assertNotNull("null string should not have been returned", baseMessageIdString);
1:4d6f4d7:         assertEquals("expected base id string was not returned", expected, baseMessageIdString);
1:4d6f4d7:     }
1:4d6f4d7: 
1:4d6f4d7:     /**
1:4d6f4d7:      * Test that {@link AMQPMessageIdHelper#toBaseMessageIdString(Object)}
1:4d6f4d7:      * returns a string indicating an AMQP encoded ulong when given a
1:4d6f4d7:      * UnsignedLong object.
1:4d6f4d7:      */
1:4d6f4d7:     @Test
1:4d6f4d7:     public void testToBaseMessageIdStringWithUnsignedLong() {
1:4d6f4d7:         UnsignedLong uLongMessageId = UnsignedLong.valueOf(123456789L);
1:4d6f4d7:         String expected = AMQPMessageIdHelper.AMQP_ULONG_PREFIX + uLongMessageId.toString();
1:4d6f4d7: 
1:4d6f4d7:         String baseMessageIdString = messageIdHelper.toBaseMessageIdString(uLongMessageId);
1:4d6f4d7:         assertNotNull("null string should not have been returned", baseMessageIdString);
1:4d6f4d7:         assertEquals("expected base id string was not returned", expected, baseMessageIdString);
1:4d6f4d7:     }
1:4d6f4d7: 
1:4d6f4d7:     /**
1:4d6f4d7:      * Test that {@link AMQPMessageIdHelper#toBaseMessageIdString(Object)}
1:4d6f4d7:      * returns a string indicating an AMQP encoded binary when given a Binary
1:4d6f4d7:      * object.
1:4d6f4d7:      */
1:4d6f4d7:     @Test
1:4d6f4d7:     public void testToBaseMessageIdStringWithBinary() {
1:4d6f4d7:         byte[] bytes = new byte[] { (byte) 0x00, (byte) 0xAB, (byte) 0x09, (byte) 0xFF };
1:4d6f4d7:         Binary binary = new Binary(bytes);
1:4d6f4d7: 
1:4d6f4d7:         String expected = AMQPMessageIdHelper.AMQP_BINARY_PREFIX + "00AB09FF";
1:4d6f4d7: 
1:4d6f4d7:         String baseMessageIdString = messageIdHelper.toBaseMessageIdString(binary);
1:4d6f4d7:         assertNotNull("null string should not have been returned", baseMessageIdString);
1:4d6f4d7:         assertEquals("expected base id string was not returned", expected, baseMessageIdString);
1:4d6f4d7:     }
1:4d6f4d7: 
1:4d6f4d7:     /**
1:4d6f4d7:      * Test that {@link AMQPMessageIdHelper#toIdObject(String)} returns an
1:4d6f4d7:      * UnsignedLong when given a string indicating an encoded AMQP ulong id.
1:4d6f4d7:      *
1:4d6f4d7:      * @throws Exception
1:4d6f4d7:      *         if an error occurs during the test.
1:4d6f4d7:      */
1:4d6f4d7:     @Test
1:4d6f4d7:     public void testToIdObjectWithEncodedUlong() throws Exception {
1:4d6f4d7:         UnsignedLong longId = UnsignedLong.valueOf(123456789L);
1:4d6f4d7:         String provided = AMQPMessageIdHelper.AMQP_ULONG_PREFIX + "123456789";
1:4d6f4d7: 
1:4d6f4d7:         Object idObject = messageIdHelper.toIdObject(provided);
1:4d6f4d7:         assertNotNull("null object should not have been returned", idObject);
1:4d6f4d7:         assertEquals("expected id object was not returned", longId, idObject);
1:4d6f4d7:     }
1:4d6f4d7: 
1:4d6f4d7:     /**
1:4d6f4d7:      * Test that {@link AMQPMessageIdHelper#toIdObject(String)} returns a Binary
1:4d6f4d7:      * when given a string indicating an encoded AMQP binary id, using upper
1:4d6f4d7:      * case hex characters
1:4d6f4d7:      *
1:4d6f4d7:      * @throws Exception
1:4d6f4d7:      *         if an error occurs during the test.
1:4d6f4d7:      */
1:4d6f4d7:     @Test
1:4d6f4d7:     public void testToIdObjectWithEncodedBinaryUppercaseHexString() throws Exception {
1:4d6f4d7:         byte[] bytes = new byte[] { (byte) 0x00, (byte) 0xAB, (byte) 0x09, (byte) 0xFF };
1:4d6f4d7:         Binary binaryId = new Binary(bytes);
1:4d6f4d7: 
1:4d6f4d7:         String provided = AMQPMessageIdHelper.AMQP_BINARY_PREFIX + "00AB09FF";
1:4d6f4d7: 
1:4d6f4d7:         Object idObject = messageIdHelper.toIdObject(provided);
1:4d6f4d7:         assertNotNull("null object should not have been returned", idObject);
1:4d6f4d7:         assertEquals("expected id object was not returned", binaryId, idObject);
1:4d6f4d7:     }
1:4d6f4d7: 
1:4d6f4d7:     /**
1:4d6f4d7:      * Test that {@link AMQPMessageIdHelper#toIdObject(String)} returns null
1:4d6f4d7:      * when given null.
1:4d6f4d7:      *
1:4d6f4d7:      * @throws Exception
1:4d6f4d7:      *         if an error occurs during the test.
1:4d6f4d7:      */
1:4d6f4d7:     @Test
1:4d6f4d7:     public void testToIdObjectWithNull() throws Exception {
1:4d6f4d7:         assertNull("null object should have been returned", messageIdHelper.toIdObject(null));
1:4d6f4d7:     }
1:4d6f4d7: 
1:4d6f4d7:     /**
1:4d6f4d7:      * Test that {@link AMQPMessageIdHelper#toIdObject(String)} returns a Binary
1:4d6f4d7:      * when given a string indicating an encoded AMQP binary id, using lower
1:4d6f4d7:      * case hex characters.
1:4d6f4d7:      *
1:4d6f4d7:      * @throws Exception
1:4d6f4d7:      *         if an error occurs during the test.
1:4d6f4d7:      */
1:4d6f4d7:     @Test
1:4d6f4d7:     public void testToIdObjectWithEncodedBinaryLowercaseHexString() throws Exception {
1:4d6f4d7:         byte[] bytes = new byte[] { (byte) 0x00, (byte) 0xAB, (byte) 0x09, (byte) 0xFF };
1:4d6f4d7:         Binary binaryId = new Binary(bytes);
1:4d6f4d7: 
1:4d6f4d7:         String provided = AMQPMessageIdHelper.AMQP_BINARY_PREFIX + "00ab09ff";
1:4d6f4d7: 
1:4d6f4d7:         Object idObject = messageIdHelper.toIdObject(provided);
1:4d6f4d7:         assertNotNull("null object should not have been returned", idObject);
1:4d6f4d7:         assertEquals("expected id object was not returned", binaryId, idObject);
1:4d6f4d7:     }
1:4d6f4d7: 
1:4d6f4d7:     /**
1:4d6f4d7:      * Test that {@link AMQPMessageIdHelper#toIdObject(String)} returns a UUID
1:4d6f4d7:      * when given a string indicating an encoded AMQP uuid id.
1:4d6f4d7:      *
1:4d6f4d7:      * @throws Exception
1:4d6f4d7:      *         if an error occurs during the test.
1:4d6f4d7:      */
1:4d6f4d7:     @Test
1:4d6f4d7:     public void testToIdObjectWithEncodedUuid() throws Exception {
1:4d6f4d7:         UUID uuid = UUID.randomUUID();
1:4d6f4d7:         String provided = AMQPMessageIdHelper.AMQP_UUID_PREFIX + uuid.toString();
1:4d6f4d7: 
1:4d6f4d7:         Object idObject = messageIdHelper.toIdObject(provided);
1:4d6f4d7:         assertNotNull("null object should not have been returned", idObject);
1:4d6f4d7:         assertEquals("expected id object was not returned", uuid, idObject);
1:4d6f4d7:     }
1:4d6f4d7: 
1:4d6f4d7:     /**
1:4d6f4d7:      * Test that {@link AMQPMessageIdHelper#toIdObject(String)} returns a string
1:4d6f4d7:      * when given a string without any type encoding prefix.
1:4d6f4d7:      *
1:4d6f4d7:      * @throws Exception
1:4d6f4d7:      *         if an error occurs during the test.
1:4d6f4d7:      */
1:4d6f4d7:     @Test
1:4d6f4d7:     public void testToIdObjectWithStringContainingNoEncodingPrefix() throws Exception {
1:4d6f4d7:         String stringId = "myStringId";
1:4d6f4d7: 
1:4d6f4d7:         Object idObject = messageIdHelper.toIdObject(stringId);
1:4d6f4d7:         assertNotNull("null object should not have been returned", idObject);
1:4d6f4d7:         assertEquals("expected id object was not returned", stringId, idObject);
1:4d6f4d7:     }
1:4d6f4d7: 
1:4d6f4d7:     /**
1:4d6f4d7:      * Test that {@link AMQPMessageIdHelper#toIdObject(String)} returns the
1:4d6f4d7:      * remainder of the provided string after removing the
1:4d6f4d7:      * {@link AMQPMessageIdHelper#AMQP_STRING_PREFIX} prefix.
1:4d6f4d7:      *
1:4d6f4d7:      * @throws Exception
1:4d6f4d7:      *         if an error occurs during the test.
1:4d6f4d7:      */
1:4d6f4d7:     @Test
1:4d6f4d7:     public void testToIdObjectWithStringContainingStringEncodingPrefix() throws Exception {
1:4d6f4d7:         String suffix = "myStringSuffix";
1:4d6f4d7:         String stringId = AMQPMessageIdHelper.AMQP_STRING_PREFIX + suffix;
1:4d6f4d7: 
1:4d6f4d7:         Object idObject = messageIdHelper.toIdObject(stringId);
1:4d6f4d7:         assertNotNull("null object should not have been returned", idObject);
1:4d6f4d7:         assertEquals("expected id object was not returned", suffix, idObject);
1:4d6f4d7:     }
1:4d6f4d7: 
1:4d6f4d7:     /**
1:4d6f4d7:      * Test that when given a string with with the
1:4d6f4d7:      * {@link AMQPMessageIdHelper#AMQP_STRING_PREFIX} prefix and then
1:4d6f4d7:      * additionally the {@link AMQPMessageIdHelper#AMQP_UUID_PREFIX}, the
1:4d6f4d7:      * {@link AMQPMessageIdHelper#toIdObject(String)} method returns the
1:4d6f4d7:      * remainder of the provided string after removing the
1:4d6f4d7:      * {@link AMQPMessageIdHelper#AMQP_STRING_PREFIX} prefix.
1:4d6f4d7:      *
1:4d6f4d7:      * @throws Exception
1:4d6f4d7:      *         if an error occurs during the test.
1:4d6f4d7:      */
1:4d6f4d7:     @Test
1:4d6f4d7:     public void testToIdObjectWithStringContainingStringEncodingPrefixAndThenUuidPrefix() throws Exception {
1:4d6f4d7:         String encodedUuidString = AMQPMessageIdHelper.AMQP_UUID_PREFIX + UUID.randomUUID().toString();
1:4d6f4d7:         String stringId = AMQPMessageIdHelper.AMQP_STRING_PREFIX + encodedUuidString;
1:4d6f4d7: 
1:4d6f4d7:         Object idObject = messageIdHelper.toIdObject(stringId);
1:4d6f4d7:         assertNotNull("null object should not have been returned", idObject);
1:4d6f4d7:         assertEquals("expected id object was not returned", encodedUuidString, idObject);
1:4d6f4d7:     }
1:4d6f4d7: 
1:4d6f4d7:     /**
1:4d6f4d7:      * Test that {@link AMQPMessageIdHelper#toIdObject(String)} throws an
1:4d6f4d7:      * {@link IdConversionException} when presented with an encoded binary hex
1:4d6f4d7:      * string of uneven length (after the prefix) that thus can't be converted
1:4d6f4d7:      * due to each byte using 2 characters
1:4d6f4d7:      */
1:4d6f4d7:     @Test
1:4d6f4d7:     public void testToIdObjectWithStringContainingBinaryHexThrowsWithUnevenLengthString() {
1:4d6f4d7:         String unevenHead = AMQPMessageIdHelper.AMQP_BINARY_PREFIX + "123";
1:4d6f4d7: 
1:4d6f4d7:         try {
1:4d6f4d7:             messageIdHelper.toIdObject(unevenHead);
1:4d6f4d7:             fail("expected exception was not thrown");
1:4d6f4d7:         } catch (AmqpProtocolException ex) {
1:4d6f4d7:             // expected
1:4d6f4d7:         }
1:4d6f4d7:     }
1:4d6f4d7: 
1:4d6f4d7:     /**
1:4d6f4d7:      * Test that {@link AMQPMessageIdHelper#toIdObject(String)} throws an
1:4d6f4d7:      * {@link IdConversionException} when presented with an encoded binary hex
1:4d6f4d7:      * string (after the prefix) that contains characters other than 0-9 and A-F
1:4d6f4d7:      * and a-f, and thus can't be converted
1:4d6f4d7:      */
1:4d6f4d7:     @Test
1:4d6f4d7:     public void testToIdObjectWithStringContainingBinaryHexThrowsWithNonHexCharacters() {
1:4d6f4d7: 
1:4d6f4d7:         // char before '0'
1:4d6f4d7:         char nonHexChar = '/';
1:4d6f4d7:         String nonHexString = AMQPMessageIdHelper.AMQP_BINARY_PREFIX + nonHexChar + nonHexChar;
1:4d6f4d7: 
1:4d6f4d7:         try {
1:4d6f4d7:             messageIdHelper.toIdObject(nonHexString);
1:4d6f4d7:             fail("expected exception was not thrown");
1:4d6f4d7:         } catch (AmqpProtocolException ex) {
1:4d6f4d7:             // expected
1:4d6f4d7:         }
1:4d6f4d7: 
1:4d6f4d7:         // char after '9', before 'A'
1:4d6f4d7:         nonHexChar = ':';
1:4d6f4d7:         nonHexString = AMQPMessageIdHelper.AMQP_BINARY_PREFIX + nonHexChar + nonHexChar;
1:4d6f4d7: 
1:4d6f4d7:         try {
1:4d6f4d7:             messageIdHelper.toIdObject(nonHexString);
1:4d6f4d7:             fail("expected exception was not thrown");
1:4d6f4d7:         } catch (AmqpProtocolException ex) {
1:4d6f4d7:             // expected
1:4d6f4d7:         }
1:4d6f4d7: 
1:4d6f4d7:         // char after 'F', before 'a'
1:4d6f4d7:         nonHexChar = 'G';
1:4d6f4d7:         nonHexString = AMQPMessageIdHelper.AMQP_BINARY_PREFIX + nonHexChar + nonHexChar;
1:4d6f4d7: 
1:4d6f4d7:         try {
1:4d6f4d7:             messageIdHelper.toIdObject(nonHexString);
1:4d6f4d7:             fail("expected exception was not thrown");
1:4d6f4d7:         } catch (AmqpProtocolException ex) {
1:4d6f4d7:             // expected
1:4d6f4d7:         }
1:4d6f4d7: 
1:4d6f4d7:         // char after 'f'
1:4d6f4d7:         nonHexChar = 'g';
1:4d6f4d7:         nonHexString = AMQPMessageIdHelper.AMQP_BINARY_PREFIX + nonHexChar + nonHexChar;
1:4d6f4d7: 
1:4d6f4d7:         try {
1:4d6f4d7:             messageIdHelper.toIdObject(nonHexString);
1:4d6f4d7:             fail("expected exception was not thrown");
1:4d6f4d7:         } catch (AmqpProtocolException ex) {
1:4d6f4d7:             // expected
1:4d6f4d7:         }
1:4d6f4d7:     }
1:4d6f4d7: }
============================================================================
author:Timothy Bish
-------------------------------------------------------------------------------
commit:4d6f4d7
/////////////////////////////////////////////////////////////////////////
1: /*
1:  *
1:  * Licensed to the Apache Software Foundation (ASF) under one
1:  * or more contributor license agreements.  See the NOTICE file
1:  * distributed with this work for additional information
1:  * regarding copyright ownership.  The ASF licenses this file
1:  * to you under the Apache License, Version 2.0 (the
1:  * "License"); you may not use this file except in compliance
1:  * with the License.  You may obtain a copy of the License at
1:  *
1:  *   http://www.apache.org/licenses/LICENSE-2.0
1:  *
1:  * Unless required by applicable law or agreed to in writing,
1:  * software distributed under the License is distributed on an
1:  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
1:  * KIND, either express or implied.  See the License for the
1:  * specific language governing permissions and limitations
1:  * under the License.
1:  *
1:  */
1: package org.apache.activemq.transport.amqp.message;
1: 
1: import static org.junit.Assert.assertEquals;
1: import static org.junit.Assert.assertNotNull;
1: import static org.junit.Assert.assertNull;
1: import static org.junit.Assert.fail;
1: 
1: import java.util.UUID;
1: 
1: import org.apache.activemq.transport.amqp.AmqpProtocolException;
1: import org.apache.qpid.jms.exceptions.IdConversionException;
1: import org.apache.qpid.proton.amqp.Binary;
1: import org.apache.qpid.proton.amqp.UnsignedLong;
1: import org.junit.Before;
1: import org.junit.Test;
1: 
1: public class AMQPMessageIdHelperTest {
1: 
1:     private AMQPMessageIdHelper messageIdHelper;
1: 
1:     @Before
1:     public void setUp() throws Exception {
1:         messageIdHelper = new AMQPMessageIdHelper();
1:     }
1: 
1:     /**
1:      * Test that {@link AMQPMessageIdHelper#toBaseMessageIdString(Object)}
1:      * returns null if given null
1:      */
1:     @Test
1:     public void testToBaseMessageIdStringWithNull() {
1:         String nullString = null;
1:         assertNull("null string should have been returned", messageIdHelper.toBaseMessageIdString(nullString));
1:     }
1: 
1:     /**
1:      * Test that {@link AMQPMessageIdHelper#toBaseMessageIdString(Object)}
1:      * throws an IAE if given an unexpected object type.
1:      */
1:     @Test
1:     public void testToBaseMessageIdStringThrowsIAEWithUnexpectedType() {
1:         try {
1:             messageIdHelper.toBaseMessageIdString(new Object());
1:             fail("expected exception not thrown");
1:         } catch (IllegalArgumentException iae) {
1:             // expected
1:         }
1:     }
1: 
1:     /**
1:      * Test that {@link AMQPMessageIdHelper#toBaseMessageIdString(Object)}
1:      * returns the given basic string unchanged
1:      */
1:     @Test
1:     public void testToBaseMessageIdStringWithString() {
1:         String stringMessageId = "myIdString";
1: 
1:         String baseMessageIdString = messageIdHelper.toBaseMessageIdString(stringMessageId);
1:         assertNotNull("null string should not have been returned", baseMessageIdString);
1:         assertEquals("expected base id string was not returned", stringMessageId, baseMessageIdString);
1:     }
1: 
1:     /**
1:      * Test that {@link AMQPMessageIdHelper#toBaseMessageIdString(Object)}
1:      * returns a string indicating an AMQP encoded string, when the given string
1:      * happens to already begin with the
1:      * {@link AMQPMessageIdHelper#AMQP_UUID_PREFIX}.
1:      */
1:     @Test
1:     public void testToBaseMessageIdStringWithStringBeginningWithEncodingPrefixForUUID() {
1:         String uuidStringMessageId = AMQPMessageIdHelper.AMQP_UUID_PREFIX + UUID.randomUUID();
1:         String expected = AMQPMessageIdHelper.AMQP_STRING_PREFIX + uuidStringMessageId;
1: 
1:         String baseMessageIdString = messageIdHelper.toBaseMessageIdString(uuidStringMessageId);
1:         assertNotNull("null string should not have been returned", baseMessageIdString);
1:         assertEquals("expected base id string was not returned", expected, baseMessageIdString);
1:     }
1: 
1:     /**
1:      * Test that {@link AMQPMessageIdHelper#toBaseMessageIdString(Object)}
1:      * returns a string indicating an AMQP encoded string, when the given string
1:      * happens to already begin with the
1:      * {@link AMQPMessageIdHelper#AMQP_ULONG_PREFIX}.
1:      */
1:     @Test
1:     public void testToBaseMessageIdStringWithStringBeginningWithEncodingPrefixForLong() {
1:         String longStringMessageId = AMQPMessageIdHelper.AMQP_ULONG_PREFIX + Long.valueOf(123456789L);
1:         String expected = AMQPMessageIdHelper.AMQP_STRING_PREFIX + longStringMessageId;
1: 
1:         String baseMessageIdString = messageIdHelper.toBaseMessageIdString(longStringMessageId);
1:         assertNotNull("null string should not have been returned", baseMessageIdString);
1:         assertEquals("expected base id string was not returned", expected, baseMessageIdString);
1:     }
1: 
1:     /**
1:      * Test that {@link AMQPMessageIdHelper#toBaseMessageIdString(Object)}
1:      * returns a string indicating an AMQP encoded string, when the given string
1:      * happens to already begin with the
1:      * {@link AMQPMessageIdHelper#AMQP_BINARY_PREFIX}.
1:      */
1:     @Test
1:     public void testToBaseMessageIdStringWithStringBeginningWithEncodingPrefixForBinary() {
1:         String binaryStringMessageId = AMQPMessageIdHelper.AMQP_BINARY_PREFIX + "0123456789ABCDEF";
1:         String expected = AMQPMessageIdHelper.AMQP_STRING_PREFIX + binaryStringMessageId;
1: 
1:         String baseMessageIdString = messageIdHelper.toBaseMessageIdString(binaryStringMessageId);
1:         assertNotNull("null string should not have been returned", baseMessageIdString);
1:         assertEquals("expected base id string was not returned", expected, baseMessageIdString);
1:     }
1: 
1:     /**
1:      * Test that {@link AMQPMessageIdHelper#toBaseMessageIdString(Object)}
1:      * returns a string indicating an AMQP encoded string (effectively twice),
1:      * when the given string happens to already begin with the
1:      * {@link AMQPMessageIdHelper#AMQP_STRING_PREFIX}.
1:      */
1:     @Test
1:     public void testToBaseMessageIdStringWithStringBeginningWithEncodingPrefixForString() {
1:         String stringMessageId = AMQPMessageIdHelper.AMQP_STRING_PREFIX + "myStringId";
1:         String expected = AMQPMessageIdHelper.AMQP_STRING_PREFIX + stringMessageId;
1: 
1:         String baseMessageIdString = messageIdHelper.toBaseMessageIdString(stringMessageId);
1:         assertNotNull("null string should not have been returned", baseMessageIdString);
1:         assertEquals("expected base id string was not returned", expected, baseMessageIdString);
1:     }
1: 
1:     /**
1:      * Test that {@link AMQPMessageIdHelper#toBaseMessageIdString(Object)}
1:      * returns a string indicating an AMQP encoded UUID when given a UUID
1:      * object.
1:      */
1:     @Test
1:     public void testToBaseMessageIdStringWithUUID() {
1:         UUID uuidMessageId = UUID.randomUUID();
1:         String expected = AMQPMessageIdHelper.AMQP_UUID_PREFIX + uuidMessageId.toString();
1: 
1:         String baseMessageIdString = messageIdHelper.toBaseMessageIdString(uuidMessageId);
1:         assertNotNull("null string should not have been returned", baseMessageIdString);
1:         assertEquals("expected base id string was not returned", expected, baseMessageIdString);
1:     }
1: 
1:     /**
1:      * Test that {@link AMQPMessageIdHelper#toBaseMessageIdString(Object)}
1:      * returns a string indicating an AMQP encoded ulong when given a
1:      * UnsignedLong object.
1:      */
1:     @Test
1:     public void testToBaseMessageIdStringWithUnsignedLong() {
1:         UnsignedLong uLongMessageId = UnsignedLong.valueOf(123456789L);
1:         String expected = AMQPMessageIdHelper.AMQP_ULONG_PREFIX + uLongMessageId.toString();
1: 
1:         String baseMessageIdString = messageIdHelper.toBaseMessageIdString(uLongMessageId);
1:         assertNotNull("null string should not have been returned", baseMessageIdString);
1:         assertEquals("expected base id string was not returned", expected, baseMessageIdString);
1:     }
1: 
1:     /**
1:      * Test that {@link AMQPMessageIdHelper#toBaseMessageIdString(Object)}
1:      * returns a string indicating an AMQP encoded binary when given a Binary
1:      * object.
1:      */
1:     @Test
1:     public void testToBaseMessageIdStringWithBinary() {
1:         byte[] bytes = new byte[] { (byte) 0x00, (byte) 0xAB, (byte) 0x09, (byte) 0xFF };
1:         Binary binary = new Binary(bytes);
1: 
1:         String expected = AMQPMessageIdHelper.AMQP_BINARY_PREFIX + "00AB09FF";
1: 
1:         String baseMessageIdString = messageIdHelper.toBaseMessageIdString(binary);
1:         assertNotNull("null string should not have been returned", baseMessageIdString);
1:         assertEquals("expected base id string was not returned", expected, baseMessageIdString);
1:     }
1: 
1:     /**
1:      * Test that {@link AMQPMessageIdHelper#toIdObject(String)} returns an
1:      * UnsignedLong when given a string indicating an encoded AMQP ulong id.
1:      *
1:      * @throws Exception
1:      *         if an error occurs during the test.
1:      */
1:     @Test
1:     public void testToIdObjectWithEncodedUlong() throws Exception {
1:         UnsignedLong longId = UnsignedLong.valueOf(123456789L);
1:         String provided = AMQPMessageIdHelper.AMQP_ULONG_PREFIX + "123456789";
1: 
1:         Object idObject = messageIdHelper.toIdObject(provided);
1:         assertNotNull("null object should not have been returned", idObject);
1:         assertEquals("expected id object was not returned", longId, idObject);
1:     }
1: 
1:     /**
1:      * Test that {@link AMQPMessageIdHelper#toIdObject(String)} returns a Binary
1:      * when given a string indicating an encoded AMQP binary id, using upper
1:      * case hex characters
1:      *
1:      * @throws Exception
1:      *         if an error occurs during the test.
1:      */
1:     @Test
1:     public void testToIdObjectWithEncodedBinaryUppercaseHexString() throws Exception {
1:         byte[] bytes = new byte[] { (byte) 0x00, (byte) 0xAB, (byte) 0x09, (byte) 0xFF };
1:         Binary binaryId = new Binary(bytes);
1: 
1:         String provided = AMQPMessageIdHelper.AMQP_BINARY_PREFIX + "00AB09FF";
1: 
1:         Object idObject = messageIdHelper.toIdObject(provided);
1:         assertNotNull("null object should not have been returned", idObject);
1:         assertEquals("expected id object was not returned", binaryId, idObject);
1:     }
1: 
1:     /**
1:      * Test that {@link AMQPMessageIdHelper#toIdObject(String)} returns null
1:      * when given null.
1:      *
1:      * @throws Exception
1:      *         if an error occurs during the test.
1:      */
1:     @Test
1:     public void testToIdObjectWithNull() throws Exception {
1:         assertNull("null object should have been returned", messageIdHelper.toIdObject(null));
1:     }
1: 
1:     /**
1:      * Test that {@link AMQPMessageIdHelper#toIdObject(String)} returns a Binary
1:      * when given a string indicating an encoded AMQP binary id, using lower
1:      * case hex characters.
1:      *
1:      * @throws Exception
1:      *         if an error occurs during the test.
1:      */
1:     @Test
1:     public void testToIdObjectWithEncodedBinaryLowercaseHexString() throws Exception {
1:         byte[] bytes = new byte[] { (byte) 0x00, (byte) 0xAB, (byte) 0x09, (byte) 0xFF };
1:         Binary binaryId = new Binary(bytes);
1: 
1:         String provided = AMQPMessageIdHelper.AMQP_BINARY_PREFIX + "00ab09ff";
1: 
1:         Object idObject = messageIdHelper.toIdObject(provided);
1:         assertNotNull("null object should not have been returned", idObject);
1:         assertEquals("expected id object was not returned", binaryId, idObject);
1:     }
1: 
1:     /**
1:      * Test that {@link AMQPMessageIdHelper#toIdObject(String)} returns a UUID
1:      * when given a string indicating an encoded AMQP uuid id.
1:      *
1:      * @throws Exception
1:      *         if an error occurs during the test.
1:      */
1:     @Test
1:     public void testToIdObjectWithEncodedUuid() throws Exception {
1:         UUID uuid = UUID.randomUUID();
1:         String provided = AMQPMessageIdHelper.AMQP_UUID_PREFIX + uuid.toString();
1: 
1:         Object idObject = messageIdHelper.toIdObject(provided);
1:         assertNotNull("null object should not have been returned", idObject);
1:         assertEquals("expected id object was not returned", uuid, idObject);
1:     }
1: 
1:     /**
1:      * Test that {@link AMQPMessageIdHelper#toIdObject(String)} returns a string
1:      * when given a string without any type encoding prefix.
1:      *
1:      * @throws Exception
1:      *         if an error occurs during the test.
1:      */
1:     @Test
1:     public void testToIdObjectWithStringContainingNoEncodingPrefix() throws Exception {
1:         String stringId = "myStringId";
1: 
1:         Object idObject = messageIdHelper.toIdObject(stringId);
1:         assertNotNull("null object should not have been returned", idObject);
1:         assertEquals("expected id object was not returned", stringId, idObject);
1:     }
1: 
1:     /**
1:      * Test that {@link AMQPMessageIdHelper#toIdObject(String)} returns the
1:      * remainder of the provided string after removing the
1:      * {@link AMQPMessageIdHelper#AMQP_STRING_PREFIX} prefix.
1:      *
1:      * @throws Exception
1:      *         if an error occurs during the test.
1:      */
1:     @Test
1:     public void testToIdObjectWithStringContainingStringEncodingPrefix() throws Exception {
1:         String suffix = "myStringSuffix";
1:         String stringId = AMQPMessageIdHelper.AMQP_STRING_PREFIX + suffix;
1: 
1:         Object idObject = messageIdHelper.toIdObject(stringId);
1:         assertNotNull("null object should not have been returned", idObject);
1:         assertEquals("expected id object was not returned", suffix, idObject);
1:     }
1: 
1:     /**
1:      * Test that when given a string with with the
1:      * {@link AMQPMessageIdHelper#AMQP_STRING_PREFIX} prefix and then
1:      * additionally the {@link AMQPMessageIdHelper#AMQP_UUID_PREFIX}, the
1:      * {@link AMQPMessageIdHelper#toIdObject(String)} method returns the
1:      * remainder of the provided string after removing the
1:      * {@link AMQPMessageIdHelper#AMQP_STRING_PREFIX} prefix.
1:      *
1:      * @throws Exception
1:      *         if an error occurs during the test.
1:      */
1:     @Test
1:     public void testToIdObjectWithStringContainingStringEncodingPrefixAndThenUuidPrefix() throws Exception {
1:         String encodedUuidString = AMQPMessageIdHelper.AMQP_UUID_PREFIX + UUID.randomUUID().toString();
1:         String stringId = AMQPMessageIdHelper.AMQP_STRING_PREFIX + encodedUuidString;
1: 
1:         Object idObject = messageIdHelper.toIdObject(stringId);
1:         assertNotNull("null object should not have been returned", idObject);
1:         assertEquals("expected id object was not returned", encodedUuidString, idObject);
1:     }
1: 
1:     /**
1:      * Test that {@link AMQPMessageIdHelper#toIdObject(String)} throws an
1:      * {@link IdConversionException} when presented with an encoded binary hex
1:      * string of uneven length (after the prefix) that thus can't be converted
1:      * due to each byte using 2 characters
1:      */
1:     @Test
1:     public void testToIdObjectWithStringContainingBinaryHexThrowsWithUnevenLengthString() {
1:         String unevenHead = AMQPMessageIdHelper.AMQP_BINARY_PREFIX + "123";
1: 
1:         try {
1:             messageIdHelper.toIdObject(unevenHead);
1:             fail("expected exception was not thrown");
1:         } catch (AmqpProtocolException ex) {
1:             // expected
1:         }
1:     }
1: 
1:     /**
1:      * Test that {@link AMQPMessageIdHelper#toIdObject(String)} throws an
1:      * {@link IdConversionException} when presented with an encoded binary hex
1:      * string (after the prefix) that contains characters other than 0-9 and A-F
1:      * and a-f, and thus can't be converted
1:      */
1:     @Test
1:     public void testToIdObjectWithStringContainingBinaryHexThrowsWithNonHexCharacters() {
1: 
1:         // char before '0'
1:         char nonHexChar = '/';
1:         String nonHexString = AMQPMessageIdHelper.AMQP_BINARY_PREFIX + nonHexChar + nonHexChar;
1: 
1:         try {
1:             messageIdHelper.toIdObject(nonHexString);
1:             fail("expected exception was not thrown");
1:         } catch (AmqpProtocolException ex) {
1:             // expected
1:         }
1: 
1:         // char after '9', before 'A'
1:         nonHexChar = ':';
1:         nonHexString = AMQPMessageIdHelper.AMQP_BINARY_PREFIX + nonHexChar + nonHexChar;
1: 
1:         try {
1:             messageIdHelper.toIdObject(nonHexString);
1:             fail("expected exception was not thrown");
1:         } catch (AmqpProtocolException ex) {
1:             // expected
1:         }
1: 
1:         // char after 'F', before 'a'
1:         nonHexChar = 'G';
1:         nonHexString = AMQPMessageIdHelper.AMQP_BINARY_PREFIX + nonHexChar + nonHexChar;
1: 
1:         try {
1:             messageIdHelper.toIdObject(nonHexString);
1:             fail("expected exception was not thrown");
1:         } catch (AmqpProtocolException ex) {
1:             // expected
1:         }
1: 
1:         // char after 'f'
1:         nonHexChar = 'g';
1:         nonHexString = AMQPMessageIdHelper.AMQP_BINARY_PREFIX + nonHexChar + nonHexChar;
1: 
1:         try {
1:             messageIdHelper.toIdObject(nonHexString);
1:             fail("expected exception was not thrown");
1:         } catch (AmqpProtocolException ex) {
1:             // expected
1:         }
1:     }
1: }
============================================================================