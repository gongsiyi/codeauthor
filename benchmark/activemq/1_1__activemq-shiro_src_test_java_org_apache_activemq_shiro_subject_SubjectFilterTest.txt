1:f9451e5: /**
1:f9451e5:  * Licensed to the Apache Software Foundation (ASF) under one or more
1:f9451e5:  * contributor license agreements.  See the NOTICE file distributed with
1:f9451e5:  * this work for additional information regarding copyright ownership.
1:f9451e5:  * The ASF licenses this file to You under the Apache License, Version 2.0
1:f9451e5:  * (the "License"); you may not use this file except in compliance with
1:f9451e5:  * the License.  You may obtain a copy of the License at
1:f9451e5:  *
1:f9451e5:  *      http://www.apache.org/licenses/LICENSE-2.0
1:f9451e5:  *
1:f9451e5:  * Unless required by applicable law or agreed to in writing, software
1:f9451e5:  * distributed under the License is distributed on an "AS IS" BASIS,
1:f9451e5:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:f9451e5:  * See the License for the specific language governing permissions and
1:f9451e5:  * limitations under the License.
1:f9451e5:  */
1:f9451e5: package org.apache.activemq.shiro.subject;
1:f9451e5: 
1:f9451e5: import org.apache.activemq.security.SecurityContext;
1:f9451e5: import org.apache.activemq.shiro.SecurityContextFactory;
1:f9451e5: import org.junit.Before;
1:f9451e5: import org.junit.Test;
1:f9451e5: 
1:f9451e5: import static org.junit.Assert.*;
1:f9451e5: 
1:f9451e5: /**
1:f9451e5:  * @since 5.10.0
1:f9451e5:  */
1:f9451e5: public class SubjectFilterTest {
1:f9451e5: 
1:f9451e5:     private SubjectFilter filter;
1:f9451e5: 
1:f9451e5:     @Before
1:f9451e5:     public void setUp() {
1:f9451e5:         filter = new SubjectFilter();
1:f9451e5:     }
1:f9451e5: 
1:f9451e5:     @Test(expected = IllegalArgumentException.class)
1:f9451e5:     public void setNullSubjectConnectionFactory() {
1:f9451e5:         filter.setConnectionSubjectFactory(null);
1:f9451e5:     }
1:f9451e5: 
1:f9451e5:     @Test(expected = IllegalArgumentException.class)
1:f9451e5:     public void setNullSecurityContextFactory() {
1:f9451e5:         filter.setSecurityContextFactory(null);
1:f9451e5:     }
1:f9451e5: 
1:f9451e5:     @Test
1:f9451e5:     public void testSetSecurityContextFactory() {
1:f9451e5:         SecurityContextFactory factory = new SecurityContextFactory() {
1:f9451e5:             @Override
1:f9451e5:             public SecurityContext createSecurityContext(SubjectConnectionReference ref) {
1:f9451e5:                 return null;
1:f9451e5:             }
1:f9451e5:         };
1:f9451e5:         filter.setSecurityContextFactory(factory);
1:f9451e5:         assertSame(factory, filter.getSecurityContextFactory());
1:f9451e5:     }
1:f9451e5: }
============================================================================
author:Les Hazlewood
-------------------------------------------------------------------------------
commit:f9451e5
/////////////////////////////////////////////////////////////////////////
1: /**
1:  * Licensed to the Apache Software Foundation (ASF) under one or more
1:  * contributor license agreements.  See the NOTICE file distributed with
1:  * this work for additional information regarding copyright ownership.
1:  * The ASF licenses this file to You under the Apache License, Version 2.0
1:  * (the "License"); you may not use this file except in compliance with
1:  * the License.  You may obtain a copy of the License at
1:  *
1:  *      http://www.apache.org/licenses/LICENSE-2.0
1:  *
1:  * Unless required by applicable law or agreed to in writing, software
1:  * distributed under the License is distributed on an "AS IS" BASIS,
1:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:  * See the License for the specific language governing permissions and
1:  * limitations under the License.
1:  */
1: package org.apache.activemq.shiro.subject;
1: 
1: import org.apache.activemq.security.SecurityContext;
1: import org.apache.activemq.shiro.SecurityContextFactory;
1: import org.junit.Before;
1: import org.junit.Test;
1: 
1: import static org.junit.Assert.*;
1: 
1: /**
1:  * @since 5.10.0
1:  */
1: public class SubjectFilterTest {
1: 
1:     private SubjectFilter filter;
1: 
1:     @Before
1:     public void setUp() {
1:         filter = new SubjectFilter();
1:     }
1: 
1:     @Test(expected = IllegalArgumentException.class)
1:     public void setNullSubjectConnectionFactory() {
1:         filter.setConnectionSubjectFactory(null);
1:     }
1: 
1:     @Test(expected = IllegalArgumentException.class)
1:     public void setNullSecurityContextFactory() {
1:         filter.setSecurityContextFactory(null);
1:     }
1: 
1:     @Test
1:     public void testSetSecurityContextFactory() {
1:         SecurityContextFactory factory = new SecurityContextFactory() {
1:             @Override
1:             public SecurityContext createSecurityContext(SubjectConnectionReference ref) {
1:                 return null;
1:             }
1:         };
1:         filter.setSecurityContextFactory(factory);
1:         assertSame(factory, filter.getSecurityContextFactory());
1:     }
1: }
============================================================================