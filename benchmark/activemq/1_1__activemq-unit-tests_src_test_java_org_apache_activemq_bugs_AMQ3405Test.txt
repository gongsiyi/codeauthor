1:f1f6894: /**
1:f1f6894:  * Licensed to the Apache Software Foundation (ASF) under one or more
1:f1f6894:  * contributor license agreements.  See the NOTICE file distributed with
1:f1f6894:  * this work for additional information regarding copyright ownership.
1:f1f6894:  * The ASF licenses this file to You under the Apache License, Version 2.0
1:f1f6894:  * (the "License"); you may not use this file except in compliance with
1:f1f6894:  * the License.  You may obtain a copy of the License at
1:f1f6894:  *
1:f1f6894:  *      http://www.apache.org/licenses/LICENSE-2.0
1:f1f6894:  *
1:f1f6894:  * Unless required by applicable law or agreed to in writing, software
1:f1f6894:  * distributed under the License is distributed on an "AS IS" BASIS,
1:f1f6894:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:f1f6894:  * See the License for the specific language governing permissions and
1:f1f6894:  * limitations under the License.
1:f1f6894:  */
1:f1f6894: package org.apache.activemq.bugs;
1:f1f6894: 
1:f1f6894: import java.util.concurrent.atomic.AtomicInteger;
1:f1f6894: 
1:f1f6894: import javax.jms.Connection;
1:f1f6894: import javax.jms.DeliveryMode;
1:f1f6894: import javax.jms.Destination;
1:f1f6894: import javax.jms.JMSException;
1:f1f6894: import javax.jms.Message;
1:f1f6894: import javax.jms.MessageConsumer;
1:f1f6894: import javax.jms.MessageListener;
1:f1f6894: import javax.jms.MessageProducer;
1:f1f6894: import javax.jms.Queue;
1:f1f6894: import javax.jms.Session;
1:f1f6894: import javax.jms.TextMessage;
1:f1f6894: import javax.jms.Topic;
1:f1f6894: import javax.management.MalformedObjectNameException;
1:f1f6894: import javax.management.ObjectName;
1:f1f6894: 
1:f1f6894: import org.apache.activemq.ActiveMQConnection;
1:f1f6894: import org.apache.activemq.ActiveMQConnectionFactory;
1:f1f6894: import org.apache.activemq.RedeliveryPolicy;
1:9829435: import org.apache.activemq.TestSupport;
1:f1f6894: import org.apache.activemq.broker.BrokerService;
1:f1f6894: import org.apache.activemq.broker.jmx.QueueViewMBean;
1:f1f6894: import org.apache.activemq.broker.region.policy.DeadLetterStrategy;
1:f1f6894: import org.apache.activemq.broker.region.policy.PolicyEntry;
1:f1f6894: import org.apache.activemq.broker.region.policy.PolicyMap;
1:f1f6894: import org.apache.activemq.command.ActiveMQQueue;
1:f1f6894: import org.apache.activemq.util.Wait;
1:f1f6894: import org.slf4j.Logger;
1:f1f6894: import org.slf4j.LoggerFactory;
1:f1f6894: 
1:f1f6894: public class AMQ3405Test extends TestSupport {
1:f1f6894:     private static final Logger LOG = LoggerFactory.getLogger(AMQ3405Test.class);
1:f1f6894: 
1:f1f6894:     private Connection connection;
1:f1f6894:     private Session session;
1:f1f6894:     private MessageConsumer consumer;
1:f1f6894:     private MessageProducer producer;
1:f1f6894:     private int deliveryMode = DeliveryMode.PERSISTENT;
1:f1f6894:     private Destination dlqDestination;
1:f1f6894:     private MessageConsumer dlqConsumer;
1:f1f6894:     private BrokerService broker;
1:f1f6894: 
1:f1f6894:     private int messageCount;
1:f1f6894:     private Destination destination;
1:f1f6894:     private int rollbackCount;
1:f1f6894:     private Session dlqSession;
1:f1f6894:     private final Error[] error = new Error[1];
1:f1f6894:     private boolean topic = true;
1:f1f6894:     private boolean durableSubscriber = true;
1:f1f6894: 
1:f1f6894:     public void testTransientTopicMessage() throws Exception {
1:f1f6894:         topic = true;
1:f1f6894:         deliveryMode = DeliveryMode.NON_PERSISTENT;
1:f1f6894:         durableSubscriber = true;
1:f1f6894:         doTest();
1:f1f6894:     }
1:f1f6894: 
1:f1f6894:     protected BrokerService createBroker() throws Exception {
1:f1f6894:         BrokerService broker = new BrokerService();
1:f1f6894:         broker.setPersistent(false);
1:f1f6894:         PolicyEntry policy = new PolicyEntry();
1:f1f6894:         DeadLetterStrategy defaultDeadLetterStrategy = policy.getDeadLetterStrategy();
1:f1f6894:         if(defaultDeadLetterStrategy!=null) {
1:f1f6894:             defaultDeadLetterStrategy.setProcessNonPersistent(true);
1:f1f6894:         }
1:f1f6894:         PolicyMap pMap = new PolicyMap();
1:f1f6894:         pMap.setDefaultEntry(policy);
1:f1f6894:         broker.setDestinationPolicy(pMap);
1:f1f6894:         return broker;
1:f1f6894:     }
1:f1f6894: 
1:f1f6894:     protected void doTest() throws Exception {
1:f1f6894:         messageCount = 200;
1:f1f6894:         connection.start();
1:f1f6894: 
1:f1f6894:         final QueueViewMBean dlqView = getProxyToDLQ();
1:f1f6894: 
1:f1f6894:         ActiveMQConnection amqConnection = (ActiveMQConnection) connection;
1:f1f6894:         rollbackCount = amqConnection.getRedeliveryPolicy().getMaximumRedeliveries() + 1;
1:f1f6894:         LOG.info("Will redeliver messages: " + rollbackCount + " times");
1:f1f6894: 
1:f1f6894:         makeConsumer();
1:f1f6894:         makeDlqConsumer();
1:f1f6894:         dlqConsumer.close();
1:f1f6894: 
1:f1f6894:         sendMessages();
1:f1f6894: 
1:f1f6894:         // now lets receive and rollback N times
1:f1f6894:         int maxRollbacks = messageCount * rollbackCount;
1:f1f6894: 
1:f1f6894:         consumer.setMessageListener(new RollbackMessageListener(maxRollbacks, rollbackCount));
1:f1f6894: 
1:f1f6894:         // We receive and rollback into the DLQ N times moving the DLQ messages back to their
1:f1f6894:         // original Q to test that they are continually placed back in the DLQ.
1:f1f6894:         for (int i = 0; i < 2; ++i) {
1:f1f6894: 
1:f1f6894:             assertTrue("DLQ was not filled as expected", Wait.waitFor(new Wait.Condition() {
1:9829435:                 @Override
1:f1f6894:                 public boolean isSatisified() throws Exception {
1:f1f6894:                     return dlqView.getQueueSize() == messageCount;
1:f1f6894:                 }
1:f1f6894:             }));
1:f1f6894: 
1:f1f6894:             connection.stop();
1:f1f6894: 
1:f1f6894:             assertEquals("DLQ should be full now.", messageCount, dlqView.getQueueSize());
1:f1f6894: 
1:f1f6894:             String moveTo;
1:f1f6894:             if (topic) {
1:f1f6894:                 moveTo = "topic://" + ((Topic) getDestination()).getTopicName();
1:f1f6894:             } else {
1:f1f6894:                 moveTo = "queue://" + ((Queue) getDestination()).getQueueName();
1:f1f6894:             }
1:f1f6894: 
1:f1f6894:             LOG.debug("Moving " + messageCount + " messages from ActiveMQ.DLQ to " + moveTo);
1:f1f6894:             dlqView.moveMatchingMessagesTo("", moveTo);
1:f1f6894: 
1:f1f6894:             assertTrue("DLQ was not emptied as expected", Wait.waitFor(new Wait.Condition() {
1:9829435:                 @Override
1:f1f6894:                 public boolean isSatisified() throws Exception {
1:f1f6894:                     return dlqView.getQueueSize() == 0;
1:f1f6894:                 }
1:f1f6894:             }));
1:f1f6894: 
1:f1f6894:             connection.start();
1:f1f6894:         }
1:f1f6894:     }
1:f1f6894: 
1:f1f6894:     protected void makeConsumer() throws JMSException {
1:f1f6894:         Destination destination = getDestination();
1:f1f6894:         LOG.info("Consuming from: " + destination);
1:f1f6894:         if (durableSubscriber) {
1:f1f6894:             consumer = session.createDurableSubscriber((Topic)destination, destination.toString());
1:f1f6894:         } else {
1:f1f6894:             consumer = session.createConsumer(destination);
1:f1f6894:         }
1:f1f6894:     }
1:f1f6894: 
1:f1f6894:     protected void makeDlqConsumer() throws JMSException {
1:f1f6894:         dlqDestination = createDlqDestination();
1:f1f6894: 
1:f1f6894:         LOG.info("Consuming from dead letter on: " + dlqDestination);
1:f1f6894:         dlqConsumer = dlqSession.createConsumer(dlqDestination);
1:f1f6894:     }
1:f1f6894: 
1:9829435:     @Override
1:f1f6894:     protected void setUp() throws Exception {
1:f1f6894:         broker = createBroker();
1:f1f6894:         broker.start();
1:f1f6894:         broker.waitUntilStarted();
1:f1f6894: 
1:f1f6894:         connection = createConnection();
1:f1f6894:         connection.setClientID(createClientId());
1:f1f6894: 
1:f1f6894:         session = connection.createSession(true, Session.AUTO_ACKNOWLEDGE);
1:f1f6894:         connection.start();
1:f1f6894: 
1:f1f6894:         dlqSession = connection.createSession(false, Session.AUTO_ACKNOWLEDGE);
1:f1f6894:     }
1:f1f6894: 
1:9829435:     @Override
1:f1f6894:     protected void tearDown() throws Exception {
1:f1f6894:         dlqConsumer.close();
1:f1f6894:         dlqSession.close();
1:f1f6894:         session.close();
1:f1f6894: 
1:f1f6894:         if (broker != null) {
1:f1f6894:             broker.stop();
1:f1f6894:             broker.waitUntilStopped();
1:f1f6894:         }
1:f1f6894:     };
1:f1f6894: 
1:9829435:     @Override
1:f1f6894:     protected ActiveMQConnectionFactory createConnectionFactory()
1:f1f6894:             throws Exception {
1:f1f6894:         ActiveMQConnectionFactory answer = super.createConnectionFactory();
1:f1f6894:         RedeliveryPolicy policy = new RedeliveryPolicy();
1:f1f6894:         policy.setMaximumRedeliveries(3);
1:f1f6894:         policy.setBackOffMultiplier((short) 1);
1:f1f6894:         policy.setRedeliveryDelay(0);
1:f1f6894:         policy.setInitialRedeliveryDelay(0);
1:f1f6894:         policy.setUseExponentialBackOff(false);
1:f1f6894:         answer.setRedeliveryPolicy(policy);
1:f1f6894:         return answer;
1:f1f6894:     }
1:f1f6894: 
1:f1f6894:     protected void sendMessages() throws JMSException {
1:f1f6894:         Session session = connection.createSession(false, Session.AUTO_ACKNOWLEDGE);
1:f1f6894:         producer = session.createProducer(getDestination());
1:f1f6894:         producer.setDeliveryMode(deliveryMode);
1:f1f6894: 
1:f1f6894:         LOG.info("Sending " + messageCount + " messages to: " + getDestination());
1:f1f6894:         for (int i = 0; i < messageCount; i++) {
1:f1f6894:             Message message = createMessage(session, i);
1:f1f6894:             producer.send(message);
1:f1f6894:         }
1:f1f6894:     }
1:f1f6894: 
1:f1f6894:     protected TextMessage createMessage(Session session, int i) throws JMSException {
1:f1f6894:         return session.createTextMessage(getMessageText(i));
1:f1f6894:     }
1:f1f6894: 
1:f1f6894:     protected String getMessageText(int i) {
1:f1f6894:         return "message: " + i;
1:f1f6894:     }
1:f1f6894: 
1:f1f6894:     protected Destination createDlqDestination() {
1:f1f6894:         return new ActiveMQQueue("ActiveMQ.DLQ");
1:f1f6894:     }
1:f1f6894: 
1:f1f6894:     private QueueViewMBean getProxyToDLQ() throws MalformedObjectNameException, JMSException {
1:9829435:         ObjectName queueViewMBeanName = new ObjectName(
1:9829435:             "org.apache.activemq:type=Broker,brokerName=localhost," +
1:9829435:             "destinationType=Queue,destinationName=ActiveMQ.DLQ");
1:f1f6894:         QueueViewMBean proxy = (QueueViewMBean) broker.getManagementContext()
1:f1f6894:                 .newProxyInstance(queueViewMBeanName, QueueViewMBean.class, true);
1:f1f6894:         return proxy;
1:f1f6894:     }
1:f1f6894: 
1:f1f6894:     protected Destination getDestination() {
1:f1f6894:         if (destination == null) {
1:f1f6894:             destination = createDestination();
1:f1f6894:         }
1:f1f6894:         return destination;
1:f1f6894:     }
1:f1f6894: 
1:f1f6894:     protected String createClientId() {
1:f1f6894:         return toString();
1:f1f6894:     }
1:f1f6894: 
1:f1f6894:     class RollbackMessageListener implements MessageListener {
1:f1f6894: 
1:f1f6894:         final int maxRollbacks;
1:f1f6894:         final int deliveryCount;
1:f1f6894:         final AtomicInteger rollbacks = new AtomicInteger();
1:f1f6894: 
1:f1f6894:         RollbackMessageListener(int c, int delvery) {
1:f1f6894:             maxRollbacks = c;
1:f1f6894:             deliveryCount = delvery;
1:f1f6894:         }
1:f1f6894: 
1:9829435:         @Override
1:f1f6894:         public void onMessage(Message message) {
1:f1f6894:             try {
1:f1f6894:                 int expectedMessageId = rollbacks.get() / deliveryCount;
1:f1f6894:                 LOG.info("expecting messageId: " + expectedMessageId);
1:f1f6894:                 rollbacks.incrementAndGet();
1:f1f6894:                 session.rollback();
1:f1f6894:             } catch (Throwable e) {
1:f1f6894:                 LOG.error("unexpected exception:" + e, e);
1:f1f6894:                 // propagating assertError to execution task will cause a hang
1:f1f6894:                 // at shutdown
1:f1f6894:                 if (e instanceof Error) {
1:f1f6894:                     error[0] = (Error) e;
1:f1f6894:                 } else {
1:f1f6894:                     fail("unexpected exception: " + e);
1:f1f6894:                 }
1:f1f6894:             }
1:f1f6894:         }
1:f1f6894:     }
1:f1f6894: }
============================================================================
author:Timothy A. Bish
-------------------------------------------------------------------------------
commit:97502bd
/////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////
commit:ef24cc9
commit:9829435
/////////////////////////////////////////////////////////////////////////
1: import org.apache.activemq.TestSupport;
/////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////
1:                 @Override
/////////////////////////////////////////////////////////////////////////
1:                 @Override
/////////////////////////////////////////////////////////////////////////
1:     @Override
/////////////////////////////////////////////////////////////////////////
1:     @Override
/////////////////////////////////////////////////////////////////////////
1:     @Override
/////////////////////////////////////////////////////////////////////////
1:         ObjectName queueViewMBeanName = new ObjectName(
1:             "org.apache.activemq:type=Broker,brokerName=localhost," +
1:             "destinationType=Queue,destinationName=ActiveMQ.DLQ");
/////////////////////////////////////////////////////////////////////////
1:         @Override
commit:f1f6894
/////////////////////////////////////////////////////////////////////////
1: /**
1:  * Licensed to the Apache Software Foundation (ASF) under one or more
1:  * contributor license agreements.  See the NOTICE file distributed with
1:  * this work for additional information regarding copyright ownership.
1:  * The ASF licenses this file to You under the Apache License, Version 2.0
1:  * (the "License"); you may not use this file except in compliance with
1:  * the License.  You may obtain a copy of the License at
1:  *
1:  *      http://www.apache.org/licenses/LICENSE-2.0
1:  *
1:  * Unless required by applicable law or agreed to in writing, software
1:  * distributed under the License is distributed on an "AS IS" BASIS,
1:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:  * See the License for the specific language governing permissions and
1:  * limitations under the License.
1:  */
1: package org.apache.activemq.bugs;
1: 
1: import java.util.concurrent.atomic.AtomicInteger;
1: 
1: import javax.jms.Connection;
1: import javax.jms.DeliveryMode;
1: import javax.jms.Destination;
1: import javax.jms.JMSException;
1: import javax.jms.Message;
1: import javax.jms.MessageConsumer;
1: import javax.jms.MessageListener;
1: import javax.jms.MessageProducer;
1: import javax.jms.Queue;
1: import javax.jms.Session;
1: import javax.jms.TextMessage;
1: import javax.jms.Topic;
1: import javax.management.MalformedObjectNameException;
1: import javax.management.ObjectName;
1: 
1: import org.apache.activemq.ActiveMQConnection;
1: import org.apache.activemq.ActiveMQConnectionFactory;
1: import org.apache.activemq.RedeliveryPolicy;
1: import org.apache.activemq.broker.BrokerService;
1: import org.apache.activemq.broker.jmx.QueueViewMBean;
0: import org.apache.activemq.broker.region.policy.AbstractDeadLetterStrategy;
1: import org.apache.activemq.broker.region.policy.DeadLetterStrategy;
1: import org.apache.activemq.broker.region.policy.PolicyEntry;
1: import org.apache.activemq.broker.region.policy.PolicyMap;
1: import org.apache.activemq.command.ActiveMQQueue;
0: import org.apache.activemq.TestSupport;
1: import org.apache.activemq.util.Wait;
1: import org.slf4j.Logger;
1: import org.slf4j.LoggerFactory;
1: 
1: public class AMQ3405Test extends TestSupport {
1:     private static final Logger LOG = LoggerFactory.getLogger(AMQ3405Test.class);
1: 
1:     private Connection connection;
1:     private Session session;
1:     private MessageConsumer consumer;
1:     private MessageProducer producer;
1:     private int deliveryMode = DeliveryMode.PERSISTENT;
1:     private Destination dlqDestination;
1:     private MessageConsumer dlqConsumer;
1:     private BrokerService broker;
1: 
1:     private int messageCount;
1:     private Destination destination;
1:     private int rollbackCount;
1:     private Session dlqSession;
1:     private final Error[] error = new Error[1];
1:     private boolean topic = true;
1:     private boolean durableSubscriber = true;
1: 
1:     public void testTransientTopicMessage() throws Exception {
1:         topic = true;
1:         deliveryMode = DeliveryMode.NON_PERSISTENT;
1:         durableSubscriber = true;
1:         doTest();
1:     }
1: 
1:     protected BrokerService createBroker() throws Exception {
1:         BrokerService broker = new BrokerService();
1:         broker.setPersistent(false);
1:         PolicyEntry policy = new PolicyEntry();
0:         policy.setEnableAudit(false);
1:         DeadLetterStrategy defaultDeadLetterStrategy = policy.getDeadLetterStrategy();
1:         if(defaultDeadLetterStrategy!=null) {
1:             defaultDeadLetterStrategy.setProcessNonPersistent(true);
0:             ((AbstractDeadLetterStrategy) defaultDeadLetterStrategy).setEnableAudit(false);
1:         }
1:         PolicyMap pMap = new PolicyMap();
1:         pMap.setDefaultEntry(policy);
1:         broker.setDestinationPolicy(pMap);
1:         return broker;
1:     }
1: 
1:     protected void doTest() throws Exception {
1:         messageCount = 200;
1:         connection.start();
1: 
1:         final QueueViewMBean dlqView = getProxyToDLQ();
1: 
1:         ActiveMQConnection amqConnection = (ActiveMQConnection) connection;
1:         rollbackCount = amqConnection.getRedeliveryPolicy().getMaximumRedeliveries() + 1;
1:         LOG.info("Will redeliver messages: " + rollbackCount + " times");
1: 
1:         makeConsumer();
1:         makeDlqConsumer();
1:         dlqConsumer.close();
1: 
1:         sendMessages();
1: 
1:         // now lets receive and rollback N times
1:         int maxRollbacks = messageCount * rollbackCount;
1: 
1:         consumer.setMessageListener(new RollbackMessageListener(maxRollbacks, rollbackCount));
1: 
1:         // We receive and rollback into the DLQ N times moving the DLQ messages back to their
1:         // original Q to test that they are continually placed back in the DLQ.
1:         for (int i = 0; i < 2; ++i) {
1: 
1:             assertTrue("DLQ was not filled as expected", Wait.waitFor(new Wait.Condition() {
1:                 public boolean isSatisified() throws Exception {
1:                     return dlqView.getQueueSize() == messageCount;
1:                 }
1:             }));
1: 
1:             connection.stop();
1: 
1:             assertEquals("DLQ should be full now.", messageCount, dlqView.getQueueSize());
1: 
1:             String moveTo;
1:             if (topic) {
1:                 moveTo = "topic://" + ((Topic) getDestination()).getTopicName();
1:             } else {
1:                 moveTo = "queue://" + ((Queue) getDestination()).getQueueName();
1:             }
1: 
1:             LOG.debug("Moving " + messageCount + " messages from ActiveMQ.DLQ to " + moveTo);
1:             dlqView.moveMatchingMessagesTo("", moveTo);
1: 
1:             assertTrue("DLQ was not emptied as expected", Wait.waitFor(new Wait.Condition() {
1:                 public boolean isSatisified() throws Exception {
1:                     return dlqView.getQueueSize() == 0;
1:                 }
1:             }));
1: 
1:             connection.start();
1:         }
1:     }
1: 
1:     protected void makeConsumer() throws JMSException {
1:         Destination destination = getDestination();
1:         LOG.info("Consuming from: " + destination);
1:         if (durableSubscriber) {
1:             consumer = session.createDurableSubscriber((Topic)destination, destination.toString());
1:         } else {
1:             consumer = session.createConsumer(destination);
1:         }
1:     }
1: 
1:     protected void makeDlqConsumer() throws JMSException {
1:         dlqDestination = createDlqDestination();
1: 
1:         LOG.info("Consuming from dead letter on: " + dlqDestination);
1:         dlqConsumer = dlqSession.createConsumer(dlqDestination);
1:     }
1: 
1:     protected void setUp() throws Exception {
1:         broker = createBroker();
1:         broker.start();
1:         broker.waitUntilStarted();
1: 
1:         connection = createConnection();
1:         connection.setClientID(createClientId());
1: 
1:         session = connection.createSession(true, Session.AUTO_ACKNOWLEDGE);
1:         connection.start();
1: 
1:         dlqSession = connection.createSession(false, Session.AUTO_ACKNOWLEDGE);
1:     }
1: 
1:     protected void tearDown() throws Exception {
1:         dlqConsumer.close();
1:         dlqSession.close();
1:         session.close();
1: 
1:         if (broker != null) {
1:             broker.stop();
1:             broker.waitUntilStopped();
1:         }
1:     };
1: 
1:     protected ActiveMQConnectionFactory createConnectionFactory()
1:             throws Exception {
1:         ActiveMQConnectionFactory answer = super.createConnectionFactory();
1:         RedeliveryPolicy policy = new RedeliveryPolicy();
1:         policy.setMaximumRedeliveries(3);
1:         policy.setBackOffMultiplier((short) 1);
1:         policy.setRedeliveryDelay(0);
1:         policy.setInitialRedeliveryDelay(0);
1:         policy.setUseExponentialBackOff(false);
1:         answer.setRedeliveryPolicy(policy);
1:         return answer;
1:     }
1: 
1:     protected void sendMessages() throws JMSException {
1:         Session session = connection.createSession(false, Session.AUTO_ACKNOWLEDGE);
1:         producer = session.createProducer(getDestination());
1:         producer.setDeliveryMode(deliveryMode);
1: 
1:         LOG.info("Sending " + messageCount + " messages to: " + getDestination());
1:         for (int i = 0; i < messageCount; i++) {
1:             Message message = createMessage(session, i);
1:             producer.send(message);
1:         }
1:     }
1: 
1:     protected TextMessage createMessage(Session session, int i) throws JMSException {
1:         return session.createTextMessage(getMessageText(i));
1:     }
1: 
1:     protected String getMessageText(int i) {
1:         return "message: " + i;
1:     }
1: 
1:     protected Destination createDlqDestination() {
1:         return new ActiveMQQueue("ActiveMQ.DLQ");
1:     }
1: 
1:     private QueueViewMBean getProxyToDLQ() throws MalformedObjectNameException, JMSException {
0:         ObjectName queueViewMBeanName = new ObjectName("org.apache.activemq"
0:                 + ":Type=Queue,Destination=ActiveMQ.DLQ"
0:                 + ",BrokerName=localhost");
1:         QueueViewMBean proxy = (QueueViewMBean) broker.getManagementContext()
1:                 .newProxyInstance(queueViewMBeanName, QueueViewMBean.class, true);
1:         return proxy;
1:     }
1: 
1:     protected Destination getDestination() {
1:         if (destination == null) {
1:             destination = createDestination();
1:         }
1:         return destination;
1:     }
1: 
1:     protected String createClientId() {
1:         return toString();
1:     }
1: 
1:     class RollbackMessageListener implements MessageListener {
1: 
1:         final int maxRollbacks;
1:         final int deliveryCount;
1:         final AtomicInteger rollbacks = new AtomicInteger();
1: 
1:         RollbackMessageListener(int c, int delvery) {
1:             maxRollbacks = c;
1:             deliveryCount = delvery;
1:         }
1: 
1:         public void onMessage(Message message) {
1:             try {
1:                 int expectedMessageId = rollbacks.get() / deliveryCount;
1:                 LOG.info("expecting messageId: " + expectedMessageId);
1:                 rollbacks.incrementAndGet();
1:                 session.rollback();
1:             } catch (Throwable e) {
1:                 LOG.error("unexpected exception:" + e, e);
1:                 // propagating assertError to execution task will cause a hang
1:                 // at shutdown
1:                 if (e instanceof Error) {
1:                     error[0] = (Error) e;
1:                 } else {
1:                     fail("unexpected exception: " + e);
1:                 }
1:             }
1:         }
1:     }
1: }
============================================================================