1:3155c62: /**
1:3155c62:  * Licensed to the Apache Software Foundation (ASF) under one or more
1:3155c62:  * contributor license agreements.  See the NOTICE file distributed with
1:3155c62:  * this work for additional information regarding copyright ownership.
1:3155c62:  * The ASF licenses this file to You under the Apache License, Version 2.0
1:3155c62:  * (the "License"); you may not use this file except in compliance with
1:3155c62:  * the License.  You may obtain a copy of the License at
1:3155c62:  *
1:3155c62:  *      http://www.apache.org/licenses/LICENSE-2.0
1:3155c62:  *
1:3155c62:  * Unless required by applicable law or agreed to in writing, software
1:3155c62:  * distributed under the License is distributed on an "AS IS" BASIS,
1:3155c62:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:3155c62:  * See the License for the specific language governing permissions and
1:3155c62:  * limitations under the License.
1:3155c62:  */
1:3155c62: package org.apache.activemq.bugs;
1:3155c62: 
1:3155c62: import java.io.File;
1:3155c62: import java.util.concurrent.TimeUnit;
1:33fb7c6: 
1:3155c62: import javax.jms.JMSException;
1:3155c62: import javax.jms.TextMessage;
1:3155c62: import javax.management.MalformedObjectNameException;
1:3155c62: import javax.management.ObjectName;
1:33fb7c6: 
1:3155c62: import junit.framework.Test;
1:33fb7c6: 
1:3155c62: import org.apache.activemq.broker.BrokerRestartTestSupport;
1:3155c62: import org.apache.activemq.broker.BrokerService;
1:3155c62: import org.apache.activemq.broker.StubConnection;
1:3155c62: import org.apache.activemq.broker.jmx.QueueViewMBean;
1:3155c62: import org.apache.activemq.broker.region.policy.PolicyEntry;
1:3155c62: import org.apache.activemq.command.ActiveMQDestination;
1:3155c62: import org.apache.activemq.command.ActiveMQQueue;
1:3155c62: import org.apache.activemq.command.ConnectionInfo;
1:3155c62: import org.apache.activemq.command.ConsumerInfo;
1:3155c62: import org.apache.activemq.command.Message;
1:3155c62: import org.apache.activemq.command.MessageAck;
1:3155c62: import org.apache.activemq.command.ProducerInfo;
1:3155c62: import org.apache.activemq.command.SessionInfo;
1:3155c62: import org.apache.activemq.command.XATransactionId;
1:3155c62: import org.apache.activemq.store.PersistenceAdapter;
1:3155c62: import org.apache.activemq.store.jdbc.JDBCPersistenceAdapter;
1:3155c62: import org.apache.activemq.store.kahadb.KahaDBPersistenceAdapter;
1:3155c62: import org.apache.activemq.store.leveldb.LevelDBPersistenceAdapter;
1:3155c62: import org.apache.activemq.util.IOHelper;
1:3155c62: import org.slf4j.Logger;
1:3155c62: import org.slf4j.LoggerFactory;
1:3155c62: 
1:3155c62: public class AMQ5567Test extends BrokerRestartTestSupport {
1:33fb7c6: 
1:3155c62:     protected static final Logger LOG = LoggerFactory.getLogger(AMQ5567Test.class);
1:33fb7c6: 
1:33fb7c6:     private final ActiveMQQueue destination = new ActiveMQQueue("Q");
1:33fb7c6:     private final String DATA_FOLDER = "./target/AMQ5567Test-data";
1:3155c62: 
1:3155c62:     @Override
1:3155c62:     protected void configureBroker(BrokerService broker) throws Exception {
1:3155c62:         super.configureBroker(broker);
1:3155c62:         broker.setPersistenceAdapter(persistenceAdapter);
1:3155c62:     }
1:3155c62: 
1:33fb7c6:     @Override
1:3155c62:     protected PolicyEntry getDefaultPolicy() {
1:3155c62:         PolicyEntry policy = new PolicyEntry();
1:3155c62:         policy.setMemoryLimit(60*1024);
1:3155c62:         return policy;
1:3155c62:     }
1:3155c62: 
1:33fb7c6:     @Override
1:33fb7c6:     protected void tearDown() throws Exception {
1:33fb7c6:         super.tearDown();
1:33fb7c6:         IOHelper.delete(new File(DATA_FOLDER));
1:33fb7c6:     }
1:33fb7c6: 
1:3155c62:     public void initCombosForTestPreparedTransactionNotDispatched() throws Exception {
1:3155c62:         PersistenceAdapter[] persistenceAdapters = new PersistenceAdapter[]{
1:3155c62:                 new KahaDBPersistenceAdapter(),
1:3155c62:                 new LevelDBPersistenceAdapter(),
1:bcdf770:                 new JDBCPersistenceAdapter()
1:3155c62:         };
1:3155c62:         for (PersistenceAdapter adapter : persistenceAdapters) {
1:33fb7c6:             adapter.setDirectory(new File(DATA_FOLDER));
1:3155c62:         }
1:3155c62:         addCombinationValues("persistenceAdapter", persistenceAdapters);
1:3155c62:     }
1:3155c62: 
1:3155c62:     public void testPreparedTransactionNotDispatched() throws Exception {
1:3155c62: 
1:3155c62:         ActiveMQDestination destination = new ActiveMQQueue("Q");
1:3155c62: 
1:3155c62:         StubConnection connection = createConnection();
1:3155c62:         ConnectionInfo connectionInfo = createConnectionInfo();
1:3155c62:         SessionInfo sessionInfo = createSessionInfo(connectionInfo);
1:3155c62:         ProducerInfo producerInfo = createProducerInfo(sessionInfo);
1:3155c62:         connection.send(connectionInfo);
1:3155c62:         connection.send(sessionInfo);
1:3155c62:         connection.send(producerInfo);
1:3155c62: 
1:3155c62: 
1:3155c62:         XATransactionId txid = createXATransaction(sessionInfo);
1:3155c62:         connection.send(createBeginTransaction(connectionInfo, txid));
1:3155c62:         Message message = createMessage(producerInfo, destination);
1:3155c62:         message.setPersistent(true);
1:3155c62:         message.setTransactionId(txid);
1:3155c62:         connection.send(message);
1:3155c62: 
1:3155c62:         connection.send(createPrepareTransaction(connectionInfo, txid));
1:3155c62: 
1:3155c62: 
1:3155c62:         // send another non tx, will poke dispatch
1:3155c62:         message = createMessage(producerInfo, destination);
1:3155c62:         message.setPersistent(true);
1:3155c62:         connection.send(message);
1:3155c62: 
1:3155c62: 
1:3155c62:         // Since prepared but not committed.. only one should get delivered
1:3155c62:         StubConnection connectionC = createConnection();
1:3155c62:         ConnectionInfo connectionInfoC = createConnectionInfo();
1:3155c62:         SessionInfo sessionInfoC = createSessionInfo(connectionInfoC);
1:3155c62:         ConsumerInfo consumerInfo = createConsumerInfo(sessionInfoC, destination);
1:3155c62:         connectionC.send(connectionInfoC);
1:3155c62:         connectionC.send(sessionInfoC);
1:3155c62:         connectionC.send(consumerInfo);
1:3155c62: 
1:3155c62:         Message m = receiveMessage(connectionC, TimeUnit.SECONDS.toMillis(10));
1:3155c62:         LOG.info("received: " + m);
1:3155c62:         assertNotNull("Got message", m);
1:3155c62:         assertNull("Got non tx message", m.getTransactionId());
1:3155c62: 
1:3155c62:         // cannot get the prepared message till commit
1:3155c62:         assertNull(receiveMessage(connectionC));
1:3155c62:         assertNoMessagesLeft(connectionC);
1:3155c62: 
1:3155c62:         LOG.info("commit: " + txid);
1:3155c62:         connection.request(createCommitTransaction2Phase(connectionInfo, txid));
1:3155c62: 
1:3155c62:         m = receiveMessage(connectionC, TimeUnit.SECONDS.toMillis(10));
1:3155c62:         LOG.info("received: " + m);
1:3155c62:         assertNotNull("Got non null message", m);
1:3155c62: 
1:3155c62:     }
1:3155c62: 
1:3155c62:     public void initCombosForTestCursorStoreSync() throws Exception {
1:3155c62:         PersistenceAdapter[] persistenceAdapters = new PersistenceAdapter[]{
1:3155c62:                 new KahaDBPersistenceAdapter(),
1:3155c62:                 new LevelDBPersistenceAdapter(),
1:bcdf770:                 new JDBCPersistenceAdapter()
1:3155c62:         };
1:3155c62:         for (PersistenceAdapter adapter : persistenceAdapters) {
2:3155c62:             adapter.setDirectory(new File(IOHelper.getDefaultDataDirectory()));
1:3155c62:         }
1:3155c62:         addCombinationValues("persistenceAdapter", persistenceAdapters);
1:3155c62:     }
1:3155c62: 
1:3155c62:     public void testCursorStoreSync() throws Exception {
1:3155c62: 
1:3155c62:         StubConnection connection = createConnection();
1:3155c62:         ConnectionInfo connectionInfo = createConnectionInfo();
1:3155c62:         SessionInfo sessionInfo = createSessionInfo(connectionInfo);
1:3155c62:         ProducerInfo producerInfo = createProducerInfo(sessionInfo);
1:3155c62:         connection.send(connectionInfo);
1:3155c62:         connection.send(sessionInfo);
1:3155c62:         connection.send(producerInfo);
1:3155c62: 
1:3155c62: 
1:3155c62:         XATransactionId txid = createXATransaction(sessionInfo);
1:3155c62:         connection.send(createBeginTransaction(connectionInfo, txid));
1:3155c62:         Message message = createMessage(producerInfo, destination);
1:3155c62:         message.setPersistent(true);
1:3155c62:         message.setTransactionId(txid);
1:3155c62:         connection.request(message);
1:3155c62: 
1:3155c62:         connection.request(createPrepareTransaction(connectionInfo, txid));
1:3155c62: 
1:3155c62:         QueueViewMBean proxy = getProxyToQueueViewMBean();
1:3155c62:         assertTrue("cache is enabled", proxy.isCacheEnabled());
1:3155c62: 
1:3155c62:         // send another non tx, will fill cursor
1:3155c62:         String payload = new String(new byte[10*1024]);
1:3155c62:         for (int i=0; i<6; i++) {
1:3155c62:             message = createMessage(producerInfo, destination);
1:3155c62:             message.setPersistent(true);
1:3155c62:             ((TextMessage)message).setText(payload);
1:3155c62:             connection.request(message);
1:3155c62:         }
1:3155c62: 
1:3155c62:         assertTrue("cache is disabled", !proxy.isCacheEnabled());
1:3155c62: 
1:3155c62:         StubConnection connectionC = createConnection();
1:3155c62:         ConnectionInfo connectionInfoC = createConnectionInfo();
1:3155c62:         SessionInfo sessionInfoC = createSessionInfo(connectionInfoC);
1:3155c62:         ConsumerInfo consumerInfo = createConsumerInfo(sessionInfoC, destination);
1:3155c62:         connectionC.send(connectionInfoC);
1:3155c62:         connectionC.send(sessionInfoC);
1:3155c62:         connectionC.send(consumerInfo);
1:3155c62: 
1:3155c62:         Message m = null;
1:3155c62:         for (int i=0; i<3; i++) {
1:3155c62:             m = receiveMessage(connectionC, TimeUnit.SECONDS.toMillis(10));
1:3155c62:             LOG.info("received: " + m);
1:3155c62:             assertNotNull("Got message", m);
1:3155c62:             assertNull("Got non tx message", m.getTransactionId());
1:3155c62:             connectionC.request(createAck(consumerInfo, m, 1, MessageAck.STANDARD_ACK_TYPE));
1:3155c62:         }
1:3155c62: 
1:3155c62:         LOG.info("commit: " + txid);
1:3155c62:         connection.request(createCommitTransaction2Phase(connectionInfo, txid));
1:3155c62:         // consume the rest including the 2pc send in TX
1:3155c62: 
1:3155c62:         for (int i=0; i<4; i++) {
1:3155c62:             m = receiveMessage(connectionC, TimeUnit.SECONDS.toMillis(10));
1:3155c62:             LOG.info("received[" + i + "] " + m);
1:3155c62:             assertNotNull("Got message", m);
1:3155c62:             if (i==3 ) {
1:3155c62:                 assertNotNull("Got  tx message", m.getTransactionId());
1:3155c62:             } else {
1:3155c62:                 assertNull("Got non tx message", m.getTransactionId());
1:3155c62:             }
1:3155c62:             connectionC.request(createAck(consumerInfo, m, 1, MessageAck.STANDARD_ACK_TYPE));
1:3155c62:         }
1:3155c62:     }
1:3155c62: 
1:3155c62:     private QueueViewMBean getProxyToQueueViewMBean()
1:3155c62:             throws MalformedObjectNameException, JMSException {
1:3155c62:         ObjectName queueViewMBeanName = new ObjectName("org.apache.activemq"
1:3155c62:                 + ":destinationType=Queue,destinationName=" + destination.getQueueName()
1:3155c62:                 + ",type=Broker,brokerName=localhost");
1:3155c62:         QueueViewMBean proxy = (QueueViewMBean) broker.getManagementContext()
1:3155c62:                 .newProxyInstance(queueViewMBeanName,
1:3155c62:                         QueueViewMBean.class, true);
1:3155c62:         return proxy;
1:3155c62:     }
1:3155c62: 
1:3155c62:     public static Test suite() {
1:3155c62:         return suite(AMQ5567Test.class);
1:3155c62:     }
1:3155c62: 
1:3155c62: }
============================================================================
author:Hadrian Zbarcea
-------------------------------------------------------------------------------
commit:f9bec8f
author:Timothy Bish
-------------------------------------------------------------------------------
commit:33fb7c6
/////////////////////////////////////////////////////////////////////////
1: 
1: 
1: 
/////////////////////////////////////////////////////////////////////////
1: 
1: 
1:     private final ActiveMQQueue destination = new ActiveMQQueue("Q");
1:     private final String DATA_FOLDER = "./target/AMQ5567Test-data";
/////////////////////////////////////////////////////////////////////////
1:     @Override
1:     @Override
1:     protected void tearDown() throws Exception {
1:         super.tearDown();
1:         IOHelper.delete(new File(DATA_FOLDER));
1:     }
1: 
/////////////////////////////////////////////////////////////////////////
1:             adapter.setDirectory(new File(DATA_FOLDER));
author:gtully
-------------------------------------------------------------------------------
commit:bcdf770
/////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////
1:                 new JDBCPersistenceAdapter()
/////////////////////////////////////////////////////////////////////////
1:                 new JDBCPersistenceAdapter()
commit:3155c62
/////////////////////////////////////////////////////////////////////////
1: /**
1:  * Licensed to the Apache Software Foundation (ASF) under one or more
1:  * contributor license agreements.  See the NOTICE file distributed with
1:  * this work for additional information regarding copyright ownership.
1:  * The ASF licenses this file to You under the Apache License, Version 2.0
1:  * (the "License"); you may not use this file except in compliance with
1:  * the License.  You may obtain a copy of the License at
1:  *
1:  *      http://www.apache.org/licenses/LICENSE-2.0
1:  *
1:  * Unless required by applicable law or agreed to in writing, software
1:  * distributed under the License is distributed on an "AS IS" BASIS,
1:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:  * See the License for the specific language governing permissions and
1:  * limitations under the License.
1:  */
1: package org.apache.activemq.bugs;
1: 
1: import java.io.File;
1: import java.util.concurrent.TimeUnit;
1: import javax.jms.JMSException;
1: import javax.jms.TextMessage;
1: import javax.management.MalformedObjectNameException;
1: import javax.management.ObjectName;
1: import junit.framework.Test;
1: import org.apache.activemq.broker.BrokerRestartTestSupport;
1: import org.apache.activemq.broker.BrokerService;
1: import org.apache.activemq.broker.StubConnection;
1: import org.apache.activemq.broker.jmx.QueueViewMBean;
1: import org.apache.activemq.broker.region.policy.PolicyEntry;
1: import org.apache.activemq.command.ActiveMQDestination;
1: import org.apache.activemq.command.ActiveMQQueue;
1: import org.apache.activemq.command.ConnectionInfo;
1: import org.apache.activemq.command.ConsumerInfo;
1: import org.apache.activemq.command.Message;
1: import org.apache.activemq.command.MessageAck;
1: import org.apache.activemq.command.ProducerInfo;
1: import org.apache.activemq.command.SessionInfo;
1: import org.apache.activemq.command.XATransactionId;
0: import org.apache.activemq.openwire.OpenWireFormat;
1: import org.apache.activemq.store.PersistenceAdapter;
1: import org.apache.activemq.store.jdbc.JDBCPersistenceAdapter;
1: import org.apache.activemq.store.kahadb.KahaDBPersistenceAdapter;
1: import org.apache.activemq.store.leveldb.LevelDBPersistenceAdapter;
1: import org.apache.activemq.util.IOHelper;
1: import org.slf4j.Logger;
1: import org.slf4j.LoggerFactory;
1: 
1: public class AMQ5567Test extends BrokerRestartTestSupport {
1:     protected static final Logger LOG = LoggerFactory.getLogger(AMQ5567Test.class);
0:     ActiveMQQueue destination = new ActiveMQQueue("Q");
1: 
1:     @Override
1:     protected void configureBroker(BrokerService broker) throws Exception {
1:         super.configureBroker(broker);
1:         broker.setPersistenceAdapter(persistenceAdapter);
1:     }
1: 
1:     protected PolicyEntry getDefaultPolicy() {
1:         PolicyEntry policy = new PolicyEntry();
1:         policy.setMemoryLimit(60*1024);
1:         return policy;
1:     }
1: 
1:     public void initCombosForTestPreparedTransactionNotDispatched() throws Exception {
1:         PersistenceAdapter[] persistenceAdapters = new PersistenceAdapter[]{
1:                 new KahaDBPersistenceAdapter(),
1:                 new LevelDBPersistenceAdapter(),
0:                 new JDBCPersistenceAdapter(JDBCPersistenceAdapter.createDataSource(IOHelper.getDefaultDataDirectory()), new OpenWireFormat())
1:         };
1:         for (PersistenceAdapter adapter : persistenceAdapters) {
1:             adapter.setDirectory(new File(IOHelper.getDefaultDataDirectory()));
1:         }
1:         addCombinationValues("persistenceAdapter", persistenceAdapters);
1:     }
1: 
1:     public void testPreparedTransactionNotDispatched() throws Exception {
1: 
1:         ActiveMQDestination destination = new ActiveMQQueue("Q");
1: 
1:         StubConnection connection = createConnection();
1:         ConnectionInfo connectionInfo = createConnectionInfo();
1:         SessionInfo sessionInfo = createSessionInfo(connectionInfo);
1:         ProducerInfo producerInfo = createProducerInfo(sessionInfo);
1:         connection.send(connectionInfo);
1:         connection.send(sessionInfo);
1:         connection.send(producerInfo);
1: 
1: 
1:         XATransactionId txid = createXATransaction(sessionInfo);
1:         connection.send(createBeginTransaction(connectionInfo, txid));
1:         Message message = createMessage(producerInfo, destination);
1:         message.setPersistent(true);
1:         message.setTransactionId(txid);
1:         connection.send(message);
1: 
1:         connection.send(createPrepareTransaction(connectionInfo, txid));
1: 
1: 
1:         // send another non tx, will poke dispatch
1:         message = createMessage(producerInfo, destination);
1:         message.setPersistent(true);
1:         connection.send(message);
1: 
1: 
1:         // Since prepared but not committed.. only one should get delivered
1:         StubConnection connectionC = createConnection();
1:         ConnectionInfo connectionInfoC = createConnectionInfo();
1:         SessionInfo sessionInfoC = createSessionInfo(connectionInfoC);
1:         ConsumerInfo consumerInfo = createConsumerInfo(sessionInfoC, destination);
1:         connectionC.send(connectionInfoC);
1:         connectionC.send(sessionInfoC);
1:         connectionC.send(consumerInfo);
1: 
1:         Message m = receiveMessage(connectionC, TimeUnit.SECONDS.toMillis(10));
1:         LOG.info("received: " + m);
1:         assertNotNull("Got message", m);
1:         assertNull("Got non tx message", m.getTransactionId());
1: 
1:         // cannot get the prepared message till commit
1:         assertNull(receiveMessage(connectionC));
1:         assertNoMessagesLeft(connectionC);
1: 
1:         LOG.info("commit: " + txid);
1:         connection.request(createCommitTransaction2Phase(connectionInfo, txid));
1: 
1:         m = receiveMessage(connectionC, TimeUnit.SECONDS.toMillis(10));
1:         LOG.info("received: " + m);
1:         assertNotNull("Got non null message", m);
1: 
1:     }
1: 
1:     public void initCombosForTestCursorStoreSync() throws Exception {
1:         PersistenceAdapter[] persistenceAdapters = new PersistenceAdapter[]{
1:                 new KahaDBPersistenceAdapter(),
1:                 new LevelDBPersistenceAdapter(),
0:                 new JDBCPersistenceAdapter(JDBCPersistenceAdapter.createDataSource(IOHelper.getDefaultDataDirectory()), new OpenWireFormat())
1:         };
1:         for (PersistenceAdapter adapter : persistenceAdapters) {
1:             adapter.setDirectory(new File(IOHelper.getDefaultDataDirectory()));
1:         }
1:         addCombinationValues("persistenceAdapter", persistenceAdapters);
1:     }
1: 
1:     public void testCursorStoreSync() throws Exception {
1: 
1:         StubConnection connection = createConnection();
1:         ConnectionInfo connectionInfo = createConnectionInfo();
1:         SessionInfo sessionInfo = createSessionInfo(connectionInfo);
1:         ProducerInfo producerInfo = createProducerInfo(sessionInfo);
1:         connection.send(connectionInfo);
1:         connection.send(sessionInfo);
1:         connection.send(producerInfo);
1: 
1: 
1:         XATransactionId txid = createXATransaction(sessionInfo);
1:         connection.send(createBeginTransaction(connectionInfo, txid));
1:         Message message = createMessage(producerInfo, destination);
1:         message.setPersistent(true);
1:         message.setTransactionId(txid);
1:         connection.request(message);
1: 
1:         connection.request(createPrepareTransaction(connectionInfo, txid));
1: 
1:         QueueViewMBean proxy = getProxyToQueueViewMBean();
1:         assertTrue("cache is enabled", proxy.isCacheEnabled());
1: 
1:         // send another non tx, will fill cursor
1:         String payload = new String(new byte[10*1024]);
1:         for (int i=0; i<6; i++) {
1:             message = createMessage(producerInfo, destination);
1:             message.setPersistent(true);
1:             ((TextMessage)message).setText(payload);
1:             connection.request(message);
1:         }
1: 
1:         assertTrue("cache is disabled", !proxy.isCacheEnabled());
1: 
1:         StubConnection connectionC = createConnection();
1:         ConnectionInfo connectionInfoC = createConnectionInfo();
1:         SessionInfo sessionInfoC = createSessionInfo(connectionInfoC);
1:         ConsumerInfo consumerInfo = createConsumerInfo(sessionInfoC, destination);
1:         connectionC.send(connectionInfoC);
1:         connectionC.send(sessionInfoC);
1:         connectionC.send(consumerInfo);
1: 
1:         Message m = null;
1:         for (int i=0; i<3; i++) {
1:             m = receiveMessage(connectionC, TimeUnit.SECONDS.toMillis(10));
1:             LOG.info("received: " + m);
1:             assertNotNull("Got message", m);
1:             assertNull("Got non tx message", m.getTransactionId());
1:             connectionC.request(createAck(consumerInfo, m, 1, MessageAck.STANDARD_ACK_TYPE));
1:         }
1: 
1:         LOG.info("commit: " + txid);
1:         connection.request(createCommitTransaction2Phase(connectionInfo, txid));
1:         // consume the rest including the 2pc send in TX
1: 
1:         for (int i=0; i<4; i++) {
1:             m = receiveMessage(connectionC, TimeUnit.SECONDS.toMillis(10));
1:             LOG.info("received[" + i + "] " + m);
1:             assertNotNull("Got message", m);
1:             if (i==3 ) {
1:                 assertNotNull("Got  tx message", m.getTransactionId());
1:             } else {
1:                 assertNull("Got non tx message", m.getTransactionId());
1:             }
1:             connectionC.request(createAck(consumerInfo, m, 1, MessageAck.STANDARD_ACK_TYPE));
1:         }
1:     }
1: 
1:     private QueueViewMBean getProxyToQueueViewMBean()
1:             throws MalformedObjectNameException, JMSException {
1:         ObjectName queueViewMBeanName = new ObjectName("org.apache.activemq"
1:                 + ":destinationType=Queue,destinationName=" + destination.getQueueName()
1:                 + ",type=Broker,brokerName=localhost");
1:         QueueViewMBean proxy = (QueueViewMBean) broker.getManagementContext()
1:                 .newProxyInstance(queueViewMBeanName,
1:                         QueueViewMBean.class, true);
1:         return proxy;
1:     }
1: 
1:     public static Test suite() {
1:         return suite(AMQ5567Test.class);
1:     }
1: 
1: }
============================================================================