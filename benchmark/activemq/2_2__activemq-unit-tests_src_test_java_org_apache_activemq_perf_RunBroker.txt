1:f392884: /**
1:f392884:  * Licensed to the Apache Software Foundation (ASF) under one or more
1:f392884:  * contributor license agreements.  See the NOTICE file distributed with
1:f392884:  * this work for additional information regarding copyright ownership.
1:f392884:  * The ASF licenses this file to You under the Apache License, Version 2.0
1:f392884:  * (the "License"); you may not use this file except in compliance with
1:f392884:  * the License.  You may obtain a copy of the License at
1:f392884:  *
1:f392884:  *      http://www.apache.org/licenses/LICENSE-2.0
1:f392884:  *
1:f392884:  * Unless required by applicable law or agreed to in writing, software
1:f392884:  * distributed under the License is distributed on an "AS IS" BASIS,
1:f392884:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:f392884:  * See the License for the specific language governing permissions and
1:f392884:  * limitations under the License.
1:f392884:  */
1:f392884: package org.apache.activemq.perf;
2:f392884: 
1:f392884: import java.io.File;
1:4743a20: 
1:f392884: import org.apache.activemq.broker.BrokerService;
1:dc6dc7e: import org.apache.activemq.store.kahadb.KahaDBPersistenceAdapter;
1:dc6dc7e: import org.apache.activemq.util.IOHelper;
1:f392884: 
1:f392884: public class RunBroker {
1:f392884: 
1:f392884:     public static void main(String arg[]) {
1:f392884: 
1:f392884:         try {
1:dc6dc7e:             KahaDBPersistenceAdapter kahaDB = new KahaDBPersistenceAdapter();
1:f392884:             File dataFileDir = new File("target/test-amq-data/perfTest/kahadb");
1:dc6dc7e:             IOHelper.deleteChildren(dataFileDir);
1:f392884:             kahaDB.setDirectory(dataFileDir);
1:f392884: 
1:dc6dc7e:             // The setEnableJournalDiskSyncs(false) setting is a little
1:dc6dc7e:             // dangerous right now, as I have not verified
1:dc6dc7e:             // what happens if the index is updated but a journal update is
1:dc6dc7e:             // lost.
1:f392884:             // Index is going to be in consistent, but can it be repaired?
1:dc6dc7e:             // kaha.setEnableJournalDiskSyncs(false);
1:dc6dc7e:             // Using a bigger journal file size makes he take fewer spikes as it
1:dc6dc7e:             // is not switching files as often.
1:dc6dc7e:             // kaha.setJournalMaxFileLength(1024*1024*100);
1:dc6dc7e: 
1:f392884:             // small batch means more frequent and smaller writes
1:f392884:             kahaDB.setIndexWriteBatchSize(1000);
1:f392884:             kahaDB.setIndexCacheSize(10000);
1:dc6dc7e: 
1:f392884:             // do the index write in a separate thread
1:dc6dc7e:             // kahaDB.setEnableIndexWriteAsync(true);
1:dc6dc7e:             BrokerService broker = new BrokerService();
1:dc6dc7e:             broker.setUseJmx(false);
1:dc6dc7e:             // broker.setPersistenceAdapter(adaptor);
1:dc6dc7e:             broker.setPersistenceAdapter(kahaDB);
1:dc6dc7e:             // broker.setPersistent(false);
1:dc6dc7e:             broker.setDeleteAllMessagesOnStartup(true);
1:dc6dc7e:             broker.addConnector("tcp://0.0.0.0:61616");
1:dc6dc7e:             broker.start();
1:dc6dc7e:             System.err.println("Running");
1:dc6dc7e:             Thread.sleep(Long.MAX_VALUE);
1:dc6dc7e:         } catch (Throwable e) {
1:f392884:             e.printStackTrace();
1:f392884:         }
1:f392884: 
1:f392884:     }
1:f392884: }
============================================================================
author:Timothy A. Bish
-------------------------------------------------------------------------------
commit:4743a20
/////////////////////////////////////////////////////////////////////////
1: 
/////////////////////////////////////////////////////////////////////////
commit:ef24cc9
author:Robert Davies
-------------------------------------------------------------------------------
commit:dc6dc7e
/////////////////////////////////////////////////////////////////////////
1: import org.apache.activemq.store.kahadb.KahaDBPersistenceAdapter;
1: import org.apache.activemq.util.IOHelper;
1:             KahaDBPersistenceAdapter kahaDB = new KahaDBPersistenceAdapter();
1:             IOHelper.deleteChildren(dataFileDir);
0:             File archiveDir = new File(dataFileDir, "archive");
1:             // The setEnableJournalDiskSyncs(false) setting is a little
1:             // dangerous right now, as I have not verified
1:             // what happens if the index is updated but a journal update is
1:             // lost.
1:             // kaha.setEnableJournalDiskSyncs(false);
1:             // Using a bigger journal file size makes he take fewer spikes as it
1:             // is not switching files as often.
1:             // kaha.setJournalMaxFileLength(1024*1024*100);
1: 
1: 
1:             // kahaDB.setEnableIndexWriteAsync(true);
1:             BrokerService broker = new BrokerService();
1:             broker.setUseJmx(false);
1:             // broker.setPersistenceAdapter(adaptor);
1:             broker.setPersistenceAdapter(kahaDB);
1:             // broker.setPersistent(false);
1:             broker.setDeleteAllMessagesOnStartup(true);
1:             broker.addConnector("tcp://0.0.0.0:61616");
1:             broker.start();
1:             System.err.println("Running");
1:             Thread.sleep(Long.MAX_VALUE);
1:         } catch (Throwable e) {
commit:f392884
/////////////////////////////////////////////////////////////////////////
1: /**
1:  * Licensed to the Apache Software Foundation (ASF) under one or more
1:  * contributor license agreements.  See the NOTICE file distributed with
1:  * this work for additional information regarding copyright ownership.
1:  * The ASF licenses this file to You under the Apache License, Version 2.0
1:  * (the "License"); you may not use this file except in compliance with
1:  * the License.  You may obtain a copy of the License at
1:  *
1:  *      http://www.apache.org/licenses/LICENSE-2.0
1:  *
1:  * Unless required by applicable law or agreed to in writing, software
1:  * distributed under the License is distributed on an "AS IS" BASIS,
1:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:  * See the License for the specific language governing permissions and
1:  * limitations under the License.
1:  */
1: package org.apache.activemq.perf;
1: 
1: import java.io.File;
1: import org.apache.activemq.broker.BrokerService;
0: import org.apache.activemq.store.kahadaptor.KahaPersistenceAdapter;
0: import org.apache.activemq.store.kahadb.KahaDBStore;
1: 
1: public class RunBroker {
1: 
1:     public static void main(String arg[]) {
1: 
1:         try {
0:         KahaPersistenceAdapter adaptor = new KahaPersistenceAdapter();
1:             File dataFileDir = new File("target/test-amq-data/perfTest/kahadb");
0:             File archiveDir = new File(dataFileDir,"archive");
0:             KahaDBStore kahaDB = new KahaDBStore();
1:             kahaDB.setDirectory(dataFileDir);
0:             kahaDB.setDirectoryArchive(archiveDir);
0:             kahaDB.setArchiveDataLogs(true);
1: 
0:             // The setEnableJournalDiskSyncs(false) setting is a little dangerous right now, as I have not verified 
0:             // what happens if the index is updated but a journal update is lost.
1:             // Index is going to be in consistent, but can it be repaired?
0:             //kaha.setEnableJournalDiskSyncs(false);
0:             // Using a bigger journal file size makes he take fewer spikes as it is not switching files as often.
0:             //kaha.setJournalMaxFileLength(1024*1024*100);
1:             
1:             // small batch means more frequent and smaller writes
1:             kahaDB.setIndexWriteBatchSize(1000);
1:             kahaDB.setIndexCacheSize(10000);
1:             // do the index write in a separate thread
0:             kahaDB.setEnableIndexWriteAsync(true);
0:         BrokerService broker = new BrokerService();
0:         broker.setUseJmx(false);
0:         //broker.setPersistenceAdapter(adaptor);
0:         //broker.setPersistenceAdapter(kahaDB);
0:         broker.setPersistent(false);
0:         broker.setDeleteAllMessagesOnStartup(true);
0:         broker.addConnector("tcp://0.0.0.0:61616");
0:         broker.start();
0:         System.err.println("Running");
0:         Thread.sleep(Long.MAX_VALUE);
0:         }catch(Throwable e) {
1:             e.printStackTrace();
1:         }
1: 
1:     }
1: }
============================================================================