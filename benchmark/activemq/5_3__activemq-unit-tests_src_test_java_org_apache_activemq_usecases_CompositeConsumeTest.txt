1:a677c21: /**
1:57b4941:  * Licensed to the Apache Software Foundation (ASF) under one or more
1:57b4941:  * contributor license agreements.  See the NOTICE file distributed with
1:57b4941:  * this work for additional information regarding copyright ownership.
1:57b4941:  * The ASF licenses this file to You under the Apache License, Version 2.0
1:57b4941:  * (the "License"); you may not use this file except in compliance with
1:57b4941:  * the License.  You may obtain a copy of the License at
3:a677c21:  *
1:230a86c:  *      http://www.apache.org/licenses/LICENSE-2.0
1:a677c21:  *
1:a677c21:  * Unless required by applicable law or agreed to in writing, software
1:a677c21:  * distributed under the License is distributed on an "AS IS" BASIS,
1:a677c21:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:a677c21:  * See the License for the specific language governing permissions and
1:a677c21:  * limitations under the License.
1:a677c21:  */
1:a677c21: package org.apache.activemq.usecases;
2:a677c21: 
1:a677c21: import javax.jms.Destination;
1:a677c21: import javax.jms.Message;
1:a677c21: 
1:74a7a8b: import org.apache.activemq.command.ActiveMQTopic;
1:74a7a8b: import org.apache.activemq.test.JmsTopicSendReceiveWithTwoConnectionsTest;
1:fc00993: import org.apache.activemq.transport.udp.UdpTransportUsingServerTest;
1:8bf987b: import org.slf4j.Logger;
1:8bf987b: import org.slf4j.LoggerFactory;
1:74a7a8b: 
1:a677c21: /**
1:b0c2a40:  * 
1:a677c21:  */
1:a677c21: public class CompositeConsumeTest extends JmsTopicSendReceiveWithTwoConnectionsTest {
1:8bf987b:     private static final Logger LOG = LoggerFactory.getLogger(CompositeConsumeTest.class);
1:a677c21: 
1:a677c21:     public void testSendReceive() throws Exception {
1:a677c21:         messages.clear();
1:a677c21: 
1:a677c21:         Destination[] destinations = getDestinations();
1:a677c21:         int destIdx = 0;
1:a677c21: 
1:a677c21:         for (int i = 0; i < data.length; i++) {
1:a677c21:             Message message = session.createTextMessage(data[i]);
1:a677c21: 
1:a677c21:             if (verbose) {
1:fc00993:                 LOG.info("About to send a message: " + message + " with text: " + data[i]);
1:a677c21:             }
1:a677c21: 
1:a677c21:             producer.send(destinations[destIdx], message);
1:a677c21: 
1:a677c21:             if (++destIdx >= destinations.length) {
1:a677c21:                 destIdx = 0;
1:a677c21:             }
1:a677c21:         }
1:a677c21: 
1:a677c21:         assertMessagesAreReceived();
1:a677c21:     }
1:a677c21: 
1:a677c21:     /**
1:a677c21:      * Returns the subscription subject
1:a677c21:      */
1:a677c21:     protected String getSubject() {
1:a677c21:         return getPrefix() + "FOO.BAR," + getPrefix() + "FOO.X.Y," + getPrefix() + "BAR.>";
1:a677c21:     }
1:a677c21: 
1:a677c21:     /**
1:a677c21:      * Returns the destinations on which we publish
1:a677c21:      */
1:a677c21:     protected Destination[] getDestinations() {
1:a677c21:         return new Destination[]{new ActiveMQTopic(getPrefix() + "FOO.BAR"), new ActiveMQTopic(getPrefix() + "BAR.WHATNOT.XYZ"), new ActiveMQTopic(getPrefix() + "FOO.X.Y")};
1:a677c21:     }
1:a677c21: 
1:a677c21:     protected String getPrefix() {
1:a677c21:         return super.getSubject() + ".";
1:a677c21:     }
1:a677c21: }
============================================================================
author:Hadrian Zbarcea
-------------------------------------------------------------------------------
commit:f9bec8f
author:Timothy A. Bish
-------------------------------------------------------------------------------
commit:ef24cc9
author:Hiram R. Chirino
-------------------------------------------------------------------------------
commit:b0c2a40
/////////////////////////////////////////////////////////////////////////
1:  * 
commit:fc00993
/////////////////////////////////////////////////////////////////////////
1: import org.apache.activemq.transport.udp.UdpTransportUsingServerTest;
0: import org.apache.commons.logging.Log;
0: import org.apache.commons.logging.LogFactory;
0:     private static final Log LOG = LogFactory.getLog(CompositeConsumeTest.class);
/////////////////////////////////////////////////////////////////////////
1:                 LOG.info("About to send a message: " + message + " with text: " + data[i]);
commit:74a7a8b
/////////////////////////////////////////////////////////////////////////
1: import org.apache.activemq.command.ActiveMQTopic;
1: import org.apache.activemq.test.JmsTopicSendReceiveWithTwoConnectionsTest;
1: 
commit:230a86c
/////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////
1:  *      http://www.apache.org/licenses/LICENSE-2.0
commit:57b4941
/////////////////////////////////////////////////////////////////////////
1:  * Licensed to the Apache Software Foundation (ASF) under one or more
1:  * contributor license agreements.  See the NOTICE file distributed with
1:  * this work for additional information regarding copyright ownership.
1:  * The ASF licenses this file to You under the Apache License, Version 2.0
1:  * (the "License"); you may not use this file except in compliance with
1:  * the License.  You may obtain a copy of the License at
author:Bosanac Dejan
-------------------------------------------------------------------------------
commit:8bf987b
/////////////////////////////////////////////////////////////////////////
1: import org.slf4j.Logger;
1: import org.slf4j.LoggerFactory;
1:     private static final Logger LOG = LoggerFactory.getLogger(CompositeConsumeTest.class);
author:James Strachan
-------------------------------------------------------------------------------
commit:a677c21
/////////////////////////////////////////////////////////////////////////
1: /**
1:  *
0:  * Copyright 2005-2006 The Apache Software Foundation
1:  *
0:  * Licensed under the Apache License, Version 2.0 (the "License");
0:  * you may not use this file except in compliance with the License.
0:  * You may obtain a copy of the License at
1:  *
0:  * http://www.apache.org/licenses/LICENSE-2.0
1:  *
1:  * Unless required by applicable law or agreed to in writing, software
1:  * distributed under the License is distributed on an "AS IS" BASIS,
1:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:  * See the License for the specific language governing permissions and
1:  * limitations under the License.
1:  */
1: package org.apache.activemq.usecases;
1: 
0: import org.apache.activemq.command.ActiveMQTopic;
0: import org.apache.activemq.test.JmsTopicSendReceiveWithTwoConnectionsTest;
1: 
1: import javax.jms.Destination;
1: import javax.jms.Message;
1: 
1: /**
0:  * @version $Revision: 1.1.1.1 $
1:  */
1: public class CompositeConsumeTest extends JmsTopicSendReceiveWithTwoConnectionsTest {
1: 
1:     public void testSendReceive() throws Exception {
1:         messages.clear();
1: 
1:         Destination[] destinations = getDestinations();
1:         int destIdx = 0;
1: 
1:         for (int i = 0; i < data.length; i++) {
1:             Message message = session.createTextMessage(data[i]);
1: 
1:             if (verbose) {
0:                 log.info("About to send a message: " + message + " with text: " + data[i]);
1:             }
1: 
1:             producer.send(destinations[destIdx], message);
1: 
1:             if (++destIdx >= destinations.length) {
1:                 destIdx = 0;
1:             }
1:         }
1: 
1:         assertMessagesAreReceived();
1:     }
1: 
1:     /**
1:      * Returns the subscription subject
1:      */
1:     protected String getSubject() {
1:         return getPrefix() + "FOO.BAR," + getPrefix() + "FOO.X.Y," + getPrefix() + "BAR.>";
1:     }
1: 
1:     /**
1:      * Returns the destinations on which we publish
1:      */
1:     protected Destination[] getDestinations() {
1:         return new Destination[]{new ActiveMQTopic(getPrefix() + "FOO.BAR"), new ActiveMQTopic(getPrefix() + "BAR.WHATNOT.XYZ"), new ActiveMQTopic(getPrefix() + "FOO.X.Y")};
1:     }
1: 
1:     protected String getPrefix() {
1:         return super.getSubject() + ".";
1:     }
1: }
============================================================================