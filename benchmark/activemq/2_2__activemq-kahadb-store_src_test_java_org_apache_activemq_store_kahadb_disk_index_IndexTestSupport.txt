2:456a2ba: /**
1:456a2ba:  * Licensed to the Apache Software Foundation (ASF) under one or more
1:456a2ba:  * contributor license agreements.  See the NOTICE file distributed with
1:456a2ba:  * this work for additional information regarding copyright ownership.
1:456a2ba:  * The ASF licenses this file to You under the Apache License, Version 2.0
1:456a2ba:  * (the "License"); you may not use this file except in compliance with
1:456a2ba:  * the License.  You may obtain a copy of the License at
1:456a2ba:  *
1:456a2ba:  *      http://www.apache.org/licenses/LICENSE-2.0
1:456a2ba:  *
1:456a2ba:  * Unless required by applicable law or agreed to in writing, software
1:456a2ba:  * distributed under the License is distributed on an "AS IS" BASIS,
1:456a2ba:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:456a2ba:  * See the License for the specific language governing permissions and
1:456a2ba:  * limitations under the License.
2:456a2ba:  */
1:1aab71b: package org.apache.activemq.store.kahadb.disk.index;
5:456a2ba: 
1:456a2ba: import java.io.File;
1:456a2ba: import java.io.IOException;
1:456a2ba: 
1:456a2ba: import junit.framework.TestCase;
1:cb71df5: 
1:1aab71b: import org.apache.activemq.store.kahadb.disk.page.PageFile;
1:1aab71b: import org.apache.activemq.store.kahadb.disk.page.Transaction;
1:1aab71b: import org.apache.activemq.util.IOHelper;
1:81c167b: import org.junit.After;
1:81c167b: import org.junit.Test;
1:456a2ba: 
1:456a2ba: /**
1:456a2ba:  * Test a HashIndex
1:456a2ba:  */
1:456a2ba: public abstract class IndexTestSupport extends TestCase {
1:456a2ba: 
1:456a2ba:     private static final int COUNT = 10000;
1:456a2ba: 
1:456a2ba:     protected Index<String,Long> index;
1:456a2ba:     protected File directory;
1:456a2ba:     protected PageFile pf;
1:456a2ba:     protected Transaction tx;
1:456a2ba: 
1:81c167b:     @Override
1:81c167b: 	@After
1:81c167b:     public void tearDown() throws Exception {
1:456a2ba:         if( pf!=null ) {
1:456a2ba:             pf.unload();
1:456a2ba:             pf.delete();
2:456a2ba:         }
1:81c167b:     }
1:81c167b: 
1:81c167b:     public File getDirectory() {
1:cb71df5:         if (directory != null) {
1:cb71df5:             IOHelper.delete(directory);
1:cb71df5:         }
1:81c167b:         directory = new File(IOHelper.getDefaultDataDirectory() + System.currentTimeMillis());
1:81c167b:         IOHelper.delete(directory);
1:81c167b:         return directory;
1:456a2ba:     }
1:cdba931: 
1:456a2ba:     protected void createPageFileAndIndex(int pageSize) throws Exception {
1:81c167b:         pf = new PageFile(getDirectory(), getClass().getName());
1:456a2ba:         pf.setPageSize(pageSize);
1:456a2ba:         pf.load();
1:456a2ba:         tx = pf.tx();
1:456a2ba:         this.index = createIndex();
1:456a2ba:     }
1:456a2ba: 
1:456a2ba:     abstract protected Index<String, Long> createIndex() throws Exception;
1:456a2ba: 
1:81c167b:     @Test(timeout=60000)
1:456a2ba:     public void testIndex() throws Exception {
1:456a2ba:         createPageFileAndIndex(500);
1:456a2ba:         this.index.load(tx);
1:456a2ba:         tx.commit();
1:456a2ba:         doInsert(COUNT);
1:456a2ba:         this.index.unload(tx);
1:456a2ba:         tx.commit();
1:456a2ba:         this.index.load(tx);
1:456a2ba:         tx.commit();
1:456a2ba:         checkRetrieve(COUNT);
1:456a2ba:         doRemove(COUNT);
1:456a2ba:         this.index.unload(tx);
1:456a2ba:         tx.commit();
1:456a2ba:         this.index.load(tx);
1:456a2ba:         tx.commit();
1:456a2ba:         doInsert(COUNT);
1:456a2ba:         doRemoveHalf(COUNT);
1:456a2ba:         doInsertHalf(COUNT);
1:456a2ba:         this.index.unload(tx);
1:456a2ba:         tx.commit();
1:456a2ba:         this.index.load(tx);
1:456a2ba:         tx.commit();
1:456a2ba:         checkRetrieve(COUNT);
1:456a2ba:         this.index.unload(tx);
1:456a2ba:         tx.commit();
1:456a2ba:     }
1:456a2ba: 
1:456a2ba:     void doInsert(int count) throws Exception {
1:456a2ba:         for (int i = 0; i < count; i++) {
1:456a2ba:             index.put(tx, key(i), (long)i);
1:456a2ba:             tx.commit();
1:456a2ba:         }
1:456a2ba:     }
1:456a2ba: 
1:456a2ba:     protected String key(int i) {
1:456a2ba:         return "key:"+i;
1:456a2ba:     }
1:456a2ba: 
1:456a2ba:     void checkRetrieve(int count) throws IOException {
1:456a2ba:         for (int i = 0; i < count; i++) {
1:456a2ba:             Long item = index.get(tx, key(i));
1:456a2ba:             assertNotNull("Key missing: "+key(i), item);
1:456a2ba:         }
1:456a2ba:     }
1:456a2ba: 
1:456a2ba:     void doRemoveHalf(int count) throws Exception {
1:456a2ba:         for (int i = 0; i < count; i++) {
1:456a2ba:             if (i % 2 == 0) {
1:456a2ba:                 assertNotNull("Expected remove to return value for index "+i, index.remove(tx, key(i)));
1:456a2ba:                 tx.commit();
1:456a2ba:             }
1:456a2ba: 
1:456a2ba:         }
1:456a2ba:     }
1:456a2ba: 
1:456a2ba:     void doInsertHalf(int count) throws Exception {
1:456a2ba:         for (int i = 0; i < count; i++) {
1:456a2ba:             if (i % 2 == 0) {
1:456a2ba:                 index.put(tx, key(i), (long)i);
1:456a2ba:                 tx.commit();
1:456a2ba:             }
1:456a2ba:         }
1:456a2ba:     }
1:456a2ba: 
1:456a2ba:     void doRemove(int count) throws Exception {
1:456a2ba:         for (int i = 0; i < count; i++) {
1:456a2ba:             assertNotNull("Expected remove to return value for index "+i, index.remove(tx, key(i)));
1:456a2ba:             tx.commit();
1:456a2ba:         }
1:456a2ba:         for (int i = 0; i < count; i++) {
1:456a2ba:             Long item = index.get(tx, key(i));
1:456a2ba:             assertNull(item);
1:456a2ba:         }
1:456a2ba:     }
1:456a2ba: 
1:456a2ba:     void doRemoveBackwards(int count) throws Exception {
1:456a2ba:         for (int i = count - 1; i >= 0; i--) {
1:456a2ba:             index.remove(tx, key(i));
1:456a2ba:             tx.commit();
1:456a2ba:         }
1:456a2ba:         for (int i = 0; i < count; i++) {
1:456a2ba:             Long item = index.get(tx, key(i));
1:456a2ba:             assertNull(item);
1:456a2ba:         }
1:456a2ba:     }
1:456a2ba: }
============================================================================
author:Timothy A. Bish
-------------------------------------------------------------------------------
commit:81c167b
/////////////////////////////////////////////////////////////////////////
1: import org.junit.After;
1: import org.junit.Test;
/////////////////////////////////////////////////////////////////////////
1:     @Override
1: 	@After
1:     public void tearDown() throws Exception {
1:     }
1: 
1:     public File getDirectory() {
1:         directory = new File(IOHelper.getDefaultDataDirectory() + System.currentTimeMillis());
1:         IOHelper.delete(directory);
1:         return directory;
1:         pf = new PageFile(getDirectory(), getClass().getName());
/////////////////////////////////////////////////////////////////////////
1:     @Test(timeout=60000)
commit:6010bd3
commit:cb71df5
/////////////////////////////////////////////////////////////////////////
1: 
/////////////////////////////////////////////////////////////////////////
0:         directory = new File(IOHelper.getDefaultDataDirectory() + System.currentTimeMillis());
/////////////////////////////////////////////////////////////////////////
1:         if (directory != null) {
1:             IOHelper.delete(directory);
1:         }
/////////////////////////////////////////////////////////////////////////
commit:cdba931
/////////////////////////////////////////////////////////////////////////
0:         IOHelper.delete(directory);
/////////////////////////////////////////////////////////////////////////
1: 
author:Hiram R. Chirino
-------------------------------------------------------------------------------
commit:1aab71b
/////////////////////////////////////////////////////////////////////////
1: package org.apache.activemq.store.kahadb.disk.index;
1: import org.apache.activemq.store.kahadb.disk.page.PageFile;
1: import org.apache.activemq.store.kahadb.disk.page.Transaction;
1: import org.apache.activemq.util.IOHelper;
commit:715010a
commit:456a2ba
/////////////////////////////////////////////////////////////////////////
1: /**
1:  * Licensed to the Apache Software Foundation (ASF) under one or more
1:  * contributor license agreements.  See the NOTICE file distributed with
1:  * this work for additional information regarding copyright ownership.
1:  * The ASF licenses this file to You under the Apache License, Version 2.0
1:  * (the "License"); you may not use this file except in compliance with
1:  * the License.  You may obtain a copy of the License at
1:  *
1:  *      http://www.apache.org/licenses/LICENSE-2.0
1:  *
1:  * Unless required by applicable law or agreed to in writing, software
1:  * distributed under the License is distributed on an "AS IS" BASIS,
1:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:  * See the License for the specific language governing permissions and
1:  * limitations under the License.
1:  */
0: package org.apache.kahadb.index;
1: 
1: import java.io.File;
1: import java.io.IOException;
1: 
1: import junit.framework.TestCase;
0: import org.apache.kahadb.page.PageFile;
0: import org.apache.kahadb.page.Transaction;
0: import org.apache.kahadb.util.IOHelper;
1: 
1: /**
1:  * Test a HashIndex
1:  */
1: public abstract class IndexTestSupport extends TestCase {
1: 
1:     private static final int COUNT = 10000;
1: 
1:     protected Index<String,Long> index;
1:     protected File directory;
1:     protected PageFile pf;
1:     protected Transaction tx;
1: 
1:     /**
0:      * @throws java.lang.Exception
0:      * @see junit.framework.TestCase#setUp()
1:      */
0:     protected void setUp() throws Exception {
0:         super.setUp();
0:         directory = new File(IOHelper.getDefaultDataDirectory());
0:         IOHelper.mkdirs(directory);
0:         IOHelper.deleteChildren(directory);
1:         
1:     }
1: 
0:     protected void tearDown() throws Exception {
1:         if( pf!=null ) {
1:             pf.unload();
1:             pf.delete();
1:         }
1:     }
1:     
1:     protected void createPageFileAndIndex(int pageSize) throws Exception {
0:         pf = new PageFile(directory, getClass().getName());
1:         pf.setPageSize(pageSize);
1:         pf.load();
1:         tx = pf.tx();
1:         this.index = createIndex();
1:     }
1: 
1:     abstract protected Index<String, Long> createIndex() throws Exception;
1: 
1:     public void testIndex() throws Exception {
1:         createPageFileAndIndex(500);
1:         this.index.load(tx);
1:         tx.commit();
1:         doInsert(COUNT);
1:         this.index.unload(tx);
1:         tx.commit();
1:         this.index.load(tx);
1:         tx.commit();
1:         checkRetrieve(COUNT);
1:         doRemove(COUNT);
1:         this.index.unload(tx);
1:         tx.commit();
1:         this.index.load(tx);
1:         tx.commit();
1:         doInsert(COUNT);
1:         doRemoveHalf(COUNT);
1:         doInsertHalf(COUNT);
1:         this.index.unload(tx);
1:         tx.commit();
1:         this.index.load(tx);
1:         tx.commit();
1:         checkRetrieve(COUNT);
1:         this.index.unload(tx);
1:         tx.commit();
1:     }
1: 
1:     void doInsert(int count) throws Exception {
1:         for (int i = 0; i < count; i++) {
1:             index.put(tx, key(i), (long)i);
1:             tx.commit();
1:         }
1:     }
1: 
1:     protected String key(int i) {
1:         return "key:"+i;
1:     }
1: 
1:     void checkRetrieve(int count) throws IOException {
1:         for (int i = 0; i < count; i++) {
1:             Long item = index.get(tx, key(i));
1:             assertNotNull("Key missing: "+key(i), item);
1:         }
1:     }
1: 
1:     void doRemoveHalf(int count) throws Exception {
1:         for (int i = 0; i < count; i++) {
1:             if (i % 2 == 0) {
1:                 assertNotNull("Expected remove to return value for index "+i, index.remove(tx, key(i)));
1:                 tx.commit();
1:             }
1: 
1:         }
1:     }
1: 
1:     void doInsertHalf(int count) throws Exception {
1:         for (int i = 0; i < count; i++) {
1:             if (i % 2 == 0) {
1:                 index.put(tx, key(i), (long)i);
1:                 tx.commit();
1:             }
1:         }
1:     }
1: 
1:     void doRemove(int count) throws Exception {
1:         for (int i = 0; i < count; i++) {
1:             assertNotNull("Expected remove to return value for index "+i, index.remove(tx, key(i)));
1:             tx.commit();
1:         }
1:         for (int i = 0; i < count; i++) {
1:             Long item = index.get(tx, key(i));
1:             assertNull(item);
1:         }
1:     }
1: 
1:     void doRemoveBackwards(int count) throws Exception {
1:         for (int i = count - 1; i >= 0; i--) {
1:             index.remove(tx, key(i));
1:             tx.commit();
1:         }
1:         for (int i = 0; i < count; i++) {
1:             Long item = index.get(tx, key(i));
1:             assertNull(item);
1:         }
1:     }
1: 
1: }
============================================================================