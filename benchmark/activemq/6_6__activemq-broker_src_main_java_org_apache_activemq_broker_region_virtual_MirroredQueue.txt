1:42b768a: /**
1:42b768a:  * Licensed to the Apache Software Foundation (ASF) under one or more
1:42b768a:  * contributor license agreements.  See the NOTICE file distributed with
1:42b768a:  * this work for additional information regarding copyright ownership.
1:42b768a:  * The ASF licenses this file to You under the Apache License, Version 2.0
1:42b768a:  * (the "License"); you may not use this file except in compliance with
1:42b768a:  * the License.  You may obtain a copy of the License at
1:42b768a:  *
1:42b768a:  *      http://www.apache.org/licenses/LICENSE-2.0
1:42b768a:  *
1:42b768a:  * Unless required by applicable law or agreed to in writing, software
1:42b768a:  * distributed under the License is distributed on an "AS IS" BASIS,
1:42b768a:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:42b768a:  * See the License for the specific language governing permissions and
1:42b768a:  * limitations under the License.
1:42b768a:  */
1:42b768a: package org.apache.activemq.broker.region.virtual;
2:42b768a: 
1:d17eceb: import org.apache.activemq.broker.*;
1:42b768a: import org.apache.activemq.broker.region.Destination;
1:42b768a: import org.apache.activemq.broker.region.DestinationFilter;
1:42b768a: import org.apache.activemq.broker.region.DestinationInterceptor;
1:42b768a: import org.apache.activemq.command.ActiveMQDestination;
1:42b768a: import org.apache.activemq.command.ActiveMQTopic;
1:42b768a: import org.apache.activemq.command.Message;
1:8bf987b: import org.slf4j.Logger;
1:8bf987b: import org.slf4j.LoggerFactory;
1:42b768a: 
1:42b768a: /**
1:48e8c05:  * Creates <a href="http://activemq.org/site/mirrored-queues.html">Mirrored
1:42b768a:  * Queue</a> using a prefix and postfix to define the topic name on which to mirror the queue to.
1:0bbc0ac:  *
1:42b768a:  * 
1:42b768a:  * @org.apache.xbean.XBean
1:42b768a:  */
1:42b768a: public class MirroredQueue implements DestinationInterceptor, BrokerServiceAware {
1:8bf987b:     private static final transient Logger LOG = LoggerFactory.getLogger(MirroredQueue.class);
1:42b768a:     private String prefix = "VirtualTopic.Mirror.";
1:42b768a:     private String postfix = "";
1:42b768a:     private boolean copyMessage = true;
1:42b768a:     private BrokerService brokerService;
1:42b768a: 
1:42b768a:     public Destination intercept(final Destination destination) {
1:42b768a:         if (destination.getActiveMQDestination().isQueue()) {
1:620b657:             if (!destination.getActiveMQDestination().isTemporary() || brokerService.isUseTempMirroredQueues()) {
1:620b657:                 try {
1:620b657:                     final Destination mirrorDestination = getMirrorDestination(destination);
1:620b657:                     if (mirrorDestination != null) {
1:620b657:                         return new DestinationFilter(destination) {
1:620b657:                             public void send(ProducerBrokerExchange context, Message message) throws Exception {
1:620b657:                                 message.setDestination(mirrorDestination.getActiveMQDestination());
1:620b657:                                 mirrorDestination.send(context, message);
1:620b657:     
1:620b657:                                 if (isCopyMessage()) {
1:620b657:                                     message = message.copy();
1:620b657:                                 }
1:620b657:                                 message.setDestination(destination.getActiveMQDestination());
1:d44513a:                                 message.setMemoryUsage(null); // set this to null so that it will use the queue memoryUsage instance instead of the topic.
1:620b657:                                 super.send(context, message);
4:42b768a:                             }
1:620b657:                         };
1:620b657:                     }
1:42b768a:                 }
1:620b657:                 catch (Exception e) {
1:e1bbde7:                     LOG.error("Failed to lookup the mirror destination for: {}", destination, e);
1:620b657:                 }
1:42b768a:             }
1:42b768a:         }
1:42b768a:         return destination;
1:42b768a:     }
1:16f2d75:     
1:16f2d75: 
1:16f2d75:     public void remove(Destination destination) {
1:16f2d75:         if (brokerService == null) {
1:16f2d75:             throw new IllegalArgumentException("No brokerService injected!");
1:16f2d75:         }
1:16f2d75:         ActiveMQDestination topic = getMirrorTopic(destination.getActiveMQDestination());
1:16f2d75:         if (topic != null) {
1:16f2d75:             try {
1:16f2d75:                 brokerService.removeDestination(topic);
1:16f2d75:             } catch (Exception e) {
1:e1bbde7:                 LOG.error("Failed to remove mirror destination for {}", destination, e);
1:16f2d75:             }
1:16f2d75:         }
1:16f2d75:         
1:16f2d75:     }
1:42b768a: 
1:d17eceb:     public void create(Broker broker, ConnectionContext context, ActiveMQDestination destination) {}
1:d17eceb: 
1:42b768a:     // Properties
1:42b768a:     // -------------------------------------------------------------------------
1:42b768a: 
1:42b768a:     public String getPostfix() {
1:42b768a:         return postfix;
1:42b768a:     }
1:42b768a: 
1:42b768a:     /**
1:42b768a:      * Sets any postix used to identify the queue consumers
1:42b768a:      */
1:42b768a:     public void setPostfix(String postfix) {
1:42b768a:         this.postfix = postfix;
1:42b768a:     }
1:42b768a: 
1:42b768a:     public String getPrefix() {
1:42b768a:         return prefix;
1:42b768a:     }
1:42b768a: 
1:42b768a:     /**
1:42b768a:      * Sets the prefix wildcard used to identify the queue consumers for a given
1:42b768a:      * topic
1:42b768a:      */
1:42b768a:     public void setPrefix(String prefix) {
1:42b768a:         this.prefix = prefix;
1:42b768a:     }
1:42b768a: 
1:42b768a:     public boolean isCopyMessage() {
1:42b768a:         return copyMessage;
1:42b768a:     }
1:42b768a: 
1:42b768a:     /**
1:42b768a:      * Sets whether a copy of the message will be sent to each destination.
1:42b768a:      * Defaults to true so that the forward destination is set as the
1:42b768a:      * destination of the message
1:42b768a:      */
1:42b768a:     public void setCopyMessage(boolean copyMessage) {
1:42b768a:         this.copyMessage = copyMessage;
1:42b768a:     }
1:42b768a: 
1:42b768a:     public void setBrokerService(BrokerService brokerService) {
1:42b768a:         this.brokerService = brokerService;
1:42b768a:     }
1:42b768a: 
1:42b768a:     // Implementation methods
1:42b768a:     //-------------------------------------------------------------------------
1:42b768a:     protected Destination getMirrorDestination(Destination destination) throws Exception {
1:42b768a:         if (brokerService == null) {
1:42b768a:             throw new IllegalArgumentException("No brokerService injected!");
1:42b768a:         }
1:42b768a:         ActiveMQDestination topic = getMirrorTopic(destination.getActiveMQDestination());
1:42b768a:         return brokerService.getDestination(topic);
1:42b768a:     }
1:42b768a: 
1:42b768a:     protected ActiveMQDestination getMirrorTopic(ActiveMQDestination original) {
1:42b768a:         return new ActiveMQTopic(prefix + original.getPhysicalName() + postfix);
1:8bf987b:     }
1:16f2d75: 
1:42b768a: }
============================================================================
author:Timothy Bish
-------------------------------------------------------------------------------
commit:e1bbde7
/////////////////////////////////////////////////////////////////////////
1:                     LOG.error("Failed to lookup the mirror destination for: {}", destination, e);
/////////////////////////////////////////////////////////////////////////
1:                 LOG.error("Failed to remove mirror destination for {}", destination, e);
author:Hiram R. Chirino
-------------------------------------------------------------------------------
commit:58aca86
commit:0bbc0ac
/////////////////////////////////////////////////////////////////////////
1:  * 
author:Timothy A. Bish
-------------------------------------------------------------------------------
commit:d44513a
/////////////////////////////////////////////////////////////////////////
1:                                 message.setMemoryUsage(null); // set this to null so that it will use the queue memoryUsage instance instead of the topic.
author:Bosanac Dejan
-------------------------------------------------------------------------------
commit:d17eceb
/////////////////////////////////////////////////////////////////////////
1: import org.apache.activemq.broker.*;
/////////////////////////////////////////////////////////////////////////
1:     public void create(Broker broker, ConnectionContext context, ActiveMQDestination destination) {}
1: 
commit:8bf987b
/////////////////////////////////////////////////////////////////////////
1: import org.slf4j.Logger;
1: import org.slf4j.LoggerFactory;
/////////////////////////////////////////////////////////////////////////
1:     private static final transient Logger LOG = LoggerFactory.getLogger(MirroredQueue.class);
/////////////////////////////////////////////////////////////////////////
1: }
author:Robert Davies
-------------------------------------------------------------------------------
commit:620b657
/////////////////////////////////////////////////////////////////////////
1:             if (!destination.getActiveMQDestination().isTemporary() || brokerService.isUseTempMirroredQueues()) {
1:                 try {
1:                     final Destination mirrorDestination = getMirrorDestination(destination);
1:                     if (mirrorDestination != null) {
1:                         return new DestinationFilter(destination) {
1:                             public void send(ProducerBrokerExchange context, Message message) throws Exception {
1:                                 message.setDestination(mirrorDestination.getActiveMQDestination());
1:                                 mirrorDestination.send(context, message);
1:     
1:                                 if (isCopyMessage()) {
1:                                     message = message.copy();
1:                                 }
1:                                 message.setDestination(destination.getActiveMQDestination());
1:                                 super.send(context, message);
1:                         };
1:                     }
1:                 catch (Exception e) {
0:                     LOG.error("Failed to lookup the mirror destination for: " + destination + ". Reason: " + e, e);
1:                 }
commit:16f2d75
/////////////////////////////////////////////////////////////////////////
1:     
1: 
1:     public void remove(Destination destination) {
1:         if (brokerService == null) {
1:             throw new IllegalArgumentException("No brokerService injected!");
1:         }
1:         ActiveMQDestination topic = getMirrorTopic(destination.getActiveMQDestination());
1:         if (topic != null) {
1:             try {
1:                 brokerService.removeDestination(topic);
1:             } catch (Exception e) {
0:                 LOG.error("Failed to remove mirror destination for " + destination + ". Reason: " + e,e);
1:             }
1:         }
1:         
1:     }
/////////////////////////////////////////////////////////////////////////
1: 
author:James Strachan
-------------------------------------------------------------------------------
commit:48e8c05
/////////////////////////////////////////////////////////////////////////
1:  * Creates <a href="http://activemq.org/site/mirrored-queues.html">Mirrored
commit:42b768a
/////////////////////////////////////////////////////////////////////////
1: /**
1:  * Licensed to the Apache Software Foundation (ASF) under one or more
1:  * contributor license agreements.  See the NOTICE file distributed with
1:  * this work for additional information regarding copyright ownership.
1:  * The ASF licenses this file to You under the Apache License, Version 2.0
1:  * (the "License"); you may not use this file except in compliance with
1:  * the License.  You may obtain a copy of the License at
1:  *
1:  *      http://www.apache.org/licenses/LICENSE-2.0
1:  *
1:  * Unless required by applicable law or agreed to in writing, software
1:  * distributed under the License is distributed on an "AS IS" BASIS,
1:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:  * See the License for the specific language governing permissions and
1:  * limitations under the License.
1:  */
1: package org.apache.activemq.broker.region.virtual;
1: 
0: import org.apache.activemq.broker.BrokerService;
0: import org.apache.activemq.broker.BrokerServiceAware;
0: import org.apache.activemq.broker.ProducerBrokerExchange;
1: import org.apache.activemq.broker.region.Destination;
1: import org.apache.activemq.broker.region.DestinationFilter;
1: import org.apache.activemq.broker.region.DestinationInterceptor;
1: import org.apache.activemq.command.ActiveMQDestination;
1: import org.apache.activemq.command.ActiveMQTopic;
1: import org.apache.activemq.command.Message;
0: import org.apache.commons.logging.Log;
0: import org.apache.commons.logging.LogFactory;
1: 
1: /**
0:  * Creates <a href="http://activemq.org/site/mirrored-queue.html">Mirrored
1:  * Queue</a> using a prefix and postfix to define the topic name on which to mirror the queue to.
1:  *
0:  * @version $Revision$
1:  * @org.apache.xbean.XBean
1:  */
1: public class MirroredQueue implements DestinationInterceptor, BrokerServiceAware {
0:     private static final transient Log LOG = LogFactory.getLog(MirroredQueue.class);
1:     private String prefix = "VirtualTopic.Mirror.";
1:     private String postfix = "";
1:     private boolean copyMessage = true;
1:     private BrokerService brokerService;
1: 
1:     public Destination intercept(final Destination destination) {
1:         if (destination.getActiveMQDestination().isQueue()) {
0:             try {
0:                 final Destination mirrorDestination = getMirrorDestination(destination);
0:                 if (mirrorDestination != null) {
0:                     return new DestinationFilter(destination) {
0:                         public void send(ProducerBrokerExchange context, Message message) throws Exception {
0:                             message.setDestination(mirrorDestination.getActiveMQDestination());
0:                             mirrorDestination.send(context, message);
1: 
0:                             if (isCopyMessage()) {
0:                                 message = message.copy();
1:                             }
0:                             message.setDestination(destination.getActiveMQDestination());
0:                             super.send(context, message);
1:                         }
0:                     };
1:                 }
1:             }
0:             catch (Exception e) {
0:                 LOG.error("Failed to lookup the mirror destination for: " + destination + ". Reason: " + e, e);
1:             }
1:         }
1:         return destination;
1:     }
1: 
1:     // Properties
1:     // -------------------------------------------------------------------------
1: 
1:     public String getPostfix() {
1:         return postfix;
1:     }
1: 
1:     /**
1:      * Sets any postix used to identify the queue consumers
1:      */
1:     public void setPostfix(String postfix) {
1:         this.postfix = postfix;
1:     }
1: 
1:     public String getPrefix() {
1:         return prefix;
1:     }
1: 
1:     /**
1:      * Sets the prefix wildcard used to identify the queue consumers for a given
1:      * topic
1:      */
1:     public void setPrefix(String prefix) {
1:         this.prefix = prefix;
1:     }
1: 
1:     public boolean isCopyMessage() {
1:         return copyMessage;
1:     }
1: 
1:     /**
1:      * Sets whether a copy of the message will be sent to each destination.
1:      * Defaults to true so that the forward destination is set as the
1:      * destination of the message
1:      */
1:     public void setCopyMessage(boolean copyMessage) {
1:         this.copyMessage = copyMessage;
1:     }
1: 
1:     public void setBrokerService(BrokerService brokerService) {
1:         this.brokerService = brokerService;
1:     }
1: 
1:     // Implementation methods
1:     //-------------------------------------------------------------------------
1:     protected Destination getMirrorDestination(Destination destination) throws Exception {
1:         if (brokerService == null) {
1:             throw new IllegalArgumentException("No brokerService injected!");
1:         }
1:         ActiveMQDestination topic = getMirrorTopic(destination.getActiveMQDestination());
1:         return brokerService.getDestination(topic);
1:     }
1: 
1:     protected ActiveMQDestination getMirrorTopic(ActiveMQDestination original) {
1:         return new ActiveMQTopic(prefix + original.getPhysicalName() + postfix);
1:     }
1: }
============================================================================