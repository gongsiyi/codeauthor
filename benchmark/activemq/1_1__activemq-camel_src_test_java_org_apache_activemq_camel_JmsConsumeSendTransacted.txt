1:48fbd31: /**
1:48fbd31:  * Licensed to the Apache Software Foundation (ASF) under one or more
1:48fbd31:  * contributor license agreements.  See the NOTICE file distributed with
1:48fbd31:  * this work for additional information regarding copyright ownership.
1:48fbd31:  * The ASF licenses this file to You under the Apache License, Version 2.0
1:48fbd31:  * (the "License"); you may not use this file except in compliance with
1:48fbd31:  * the License.  You may obtain a copy of the License at
1:48fbd31:  *
1:48fbd31:  *      http://www.apache.org/licenses/LICENSE-2.0
1:48fbd31:  *
1:48fbd31:  * Unless required by applicable law or agreed to in writing, software
1:48fbd31:  * distributed under the License is distributed on an "AS IS" BASIS,
1:48fbd31:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:48fbd31:  * See the License for the specific language governing permissions and
1:48fbd31:  * limitations under the License.
1:48fbd31:  */
1:48fbd31: package org.apache.activemq.camel;
1:48fbd31: 
1:48fbd31: import javax.jms.Connection;
1:48fbd31: import javax.jms.Message;
1:48fbd31: import javax.jms.MessageConsumer;
1:48fbd31: import javax.jms.MessageProducer;
1:48fbd31: import javax.jms.Session;
1:48fbd31: import javax.jms.TextMessage;
1:48fbd31: import org.apache.activemq.ActiveMQConnectionFactory;
1:48fbd31: import org.apache.activemq.broker.BrokerService;
1:48fbd31: import org.apache.activemq.command.ActiveMQQueue;
1:48fbd31: import org.apache.camel.test.spring.CamelSpringTestSupport;
1:48fbd31: import org.junit.Test;
1:48fbd31: import org.springframework.context.support.AbstractXmlApplicationContext;
1:48fbd31: import org.springframework.context.support.ClassPathXmlApplicationContext;
1:48fbd31: 
1:48fbd31: public class JmsConsumeSendTransacted extends CamelSpringTestSupport {
1:48fbd31:     BrokerService broker = null;
1:48fbd31:     int messageCount;
1:48fbd31: 
1:48fbd31: 
1:48fbd31:     @Test
1:48fbd31:     public void testTransactedRoute() throws Exception {
1:48fbd31:         sendJMSMessageToKickOffRoute();
1:48fbd31: 
1:48fbd31:         // camel route will use a single transaction for send and and ack
1:48fbd31:         consumeMessages();
1:48fbd31:     }
1:48fbd31: 
1:48fbd31:     private void consumeMessages() throws Exception {
1:48fbd31: 
1:48fbd31:         ActiveMQConnectionFactory factory = new ActiveMQConnectionFactory("vm://testTran");
1:48fbd31:         factory.setWatchTopicAdvisories(false);
1:48fbd31:         Connection connection = factory.createConnection();
1:48fbd31:         connection.start();
1:48fbd31:         Session session = connection.createSession(false, Session.AUTO_ACKNOWLEDGE);
1:48fbd31:         MessageConsumer consumer = session.createConsumer(new ActiveMQQueue("to"));
1:48fbd31: 
1:48fbd31:         int messagesToConsume = messageCount;
1:48fbd31:         while (messagesToConsume > 0) {
1:48fbd31:             Message message = consumer.receive(5000);
1:48fbd31:             if (message != null) {
1:48fbd31:                 messagesToConsume--;
1:48fbd31:             }
1:48fbd31:         }
1:48fbd31:     }
1:48fbd31: 
1:48fbd31:     private void sendJMSMessageToKickOffRoute() throws Exception {
1:48fbd31:         ActiveMQConnectionFactory factory = new ActiveMQConnectionFactory("vm://testTran");
1:48fbd31:         factory.setWatchTopicAdvisories(false);
1:48fbd31:         Connection connection = factory.createConnection();
1:48fbd31:         connection.start();
1:48fbd31:         Session session = connection.createSession(false, Session.AUTO_ACKNOWLEDGE);
1:48fbd31:         MessageProducer producer = session.createProducer(new ActiveMQQueue("from"));
1:48fbd31:         TextMessage message = session.createTextMessage("Some Text, messageCount:" + messageCount++);
1:48fbd31:         message.setIntProperty("seq", messageCount);
1:48fbd31:         producer.send(message);
1:48fbd31:         connection.close();
1:48fbd31:     }
1:48fbd31: 
1:48fbd31:     private BrokerService createBroker(boolean deleteAllMessages) throws Exception {
1:48fbd31:         BrokerService brokerService = new BrokerService();
1:48fbd31:         brokerService.setDeleteAllMessagesOnStartup(deleteAllMessages);
1:48fbd31:         brokerService.setBrokerName("testTran");
1:48fbd31:         brokerService.setAdvisorySupport(false);
1:48fbd31:         brokerService.setUseJmx(false);
1:48fbd31:         brokerService.setDataDirectory("target/data");
1:48fbd31:         brokerService.addConnector("tcp://0.0.0.0:61616");
1:48fbd31:         return brokerService;
1:48fbd31:     }
1:48fbd31: 
1:48fbd31:     @SuppressWarnings("unchecked")
1:48fbd31:     @Override
1:48fbd31:     protected AbstractXmlApplicationContext createApplicationContext() {
1:48fbd31:         try {
1:48fbd31:             broker = createBroker(true);
1:48fbd31:             broker.start();
1:48fbd31:         } catch (Exception e) {
1:48fbd31:             throw new RuntimeException("Failed to start broker", e);
1:48fbd31:         }
1:48fbd31: 
1:48fbd31:         return new ClassPathXmlApplicationContext("org/apache/activemq/camel/jmsConsumeSendTransacted.xml");
1:48fbd31:     }
1:48fbd31: }
============================================================================
author:gtully
-------------------------------------------------------------------------------
commit:48fbd31
/////////////////////////////////////////////////////////////////////////
1: /**
1:  * Licensed to the Apache Software Foundation (ASF) under one or more
1:  * contributor license agreements.  See the NOTICE file distributed with
1:  * this work for additional information regarding copyright ownership.
1:  * The ASF licenses this file to You under the Apache License, Version 2.0
1:  * (the "License"); you may not use this file except in compliance with
1:  * the License.  You may obtain a copy of the License at
1:  *
1:  *      http://www.apache.org/licenses/LICENSE-2.0
1:  *
1:  * Unless required by applicable law or agreed to in writing, software
1:  * distributed under the License is distributed on an "AS IS" BASIS,
1:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:  * See the License for the specific language governing permissions and
1:  * limitations under the License.
1:  */
1: package org.apache.activemq.camel;
1: 
1: import javax.jms.Connection;
1: import javax.jms.Message;
1: import javax.jms.MessageConsumer;
1: import javax.jms.MessageProducer;
1: import javax.jms.Session;
1: import javax.jms.TextMessage;
1: import org.apache.activemq.ActiveMQConnectionFactory;
1: import org.apache.activemq.broker.BrokerService;
1: import org.apache.activemq.command.ActiveMQQueue;
1: import org.apache.camel.test.spring.CamelSpringTestSupport;
1: import org.junit.Test;
1: import org.springframework.context.support.AbstractXmlApplicationContext;
1: import org.springframework.context.support.ClassPathXmlApplicationContext;
1: 
1: public class JmsConsumeSendTransacted extends CamelSpringTestSupport {
1:     BrokerService broker = null;
1:     int messageCount;
1: 
1: 
1:     @Test
1:     public void testTransactedRoute() throws Exception {
1:         sendJMSMessageToKickOffRoute();
1: 
1:         // camel route will use a single transaction for send and and ack
1:         consumeMessages();
1:     }
1: 
1:     private void consumeMessages() throws Exception {
1: 
1:         ActiveMQConnectionFactory factory = new ActiveMQConnectionFactory("vm://testTran");
1:         factory.setWatchTopicAdvisories(false);
1:         Connection connection = factory.createConnection();
1:         connection.start();
1:         Session session = connection.createSession(false, Session.AUTO_ACKNOWLEDGE);
1:         MessageConsumer consumer = session.createConsumer(new ActiveMQQueue("to"));
1: 
1:         int messagesToConsume = messageCount;
1:         while (messagesToConsume > 0) {
1:             Message message = consumer.receive(5000);
1:             if (message != null) {
1:                 messagesToConsume--;
1:             }
1:         }
1:     }
1: 
1:     private void sendJMSMessageToKickOffRoute() throws Exception {
1:         ActiveMQConnectionFactory factory = new ActiveMQConnectionFactory("vm://testTran");
1:         factory.setWatchTopicAdvisories(false);
1:         Connection connection = factory.createConnection();
1:         connection.start();
1:         Session session = connection.createSession(false, Session.AUTO_ACKNOWLEDGE);
1:         MessageProducer producer = session.createProducer(new ActiveMQQueue("from"));
1:         TextMessage message = session.createTextMessage("Some Text, messageCount:" + messageCount++);
1:         message.setIntProperty("seq", messageCount);
1:         producer.send(message);
1:         connection.close();
1:     }
1: 
1:     private BrokerService createBroker(boolean deleteAllMessages) throws Exception {
1:         BrokerService brokerService = new BrokerService();
1:         brokerService.setDeleteAllMessagesOnStartup(deleteAllMessages);
1:         brokerService.setBrokerName("testTran");
1:         brokerService.setAdvisorySupport(false);
1:         brokerService.setUseJmx(false);
1:         brokerService.setDataDirectory("target/data");
1:         brokerService.addConnector("tcp://0.0.0.0:61616");
1:         return brokerService;
1:     }
1: 
1:     @SuppressWarnings("unchecked")
1:     @Override
1:     protected AbstractXmlApplicationContext createApplicationContext() {
1:         try {
1:             broker = createBroker(true);
1:             broker.start();
1:         } catch (Exception e) {
1:             throw new RuntimeException("Failed to start broker", e);
1:         }
1: 
1:         return new ClassPathXmlApplicationContext("org/apache/activemq/camel/jmsConsumeSendTransacted.xml");
1:     }
1: }
============================================================================