1:84eb9f8: /**
1:fc00993:  * Licensed to the Apache Software Foundation (ASF) under one or more
1:fc00993:  * contributor license agreements.  See the NOTICE file distributed with
1:fc00993:  * this work for additional information regarding copyright ownership.
1:fc00993:  * The ASF licenses this file to You under the Apache License, Version 2.0
1:fc00993:  * (the "License"); you may not use this file except in compliance with
1:fc00993:  * the License.  You may obtain a copy of the License at
3:84eb9f8:  *
1:fc00993:  *      http://www.apache.org/licenses/LICENSE-2.0
1:84eb9f8:  *
1:fc00993:  * Unless required by applicable law or agreed to in writing, software
1:fc00993:  * distributed under the License is distributed on an "AS IS" BASIS,
1:fc00993:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:fc00993:  * See the License for the specific language governing permissions and
1:fc00993:  * limitations under the License.
1:84eb9f8:  */
1:84eb9f8: package org.apache.activemq.broker;
1:84eb9f8: 
1:84eb9f8: import org.apache.activemq.broker.region.Destination;
1:84eb9f8: import org.apache.activemq.broker.region.Region;
1:a6a6a70: import org.apache.activemq.command.Message;
1:0018f4a: import org.apache.activemq.command.MessageId;
1:84eb9f8: import org.apache.activemq.state.ProducerState;
1:8bf987b: import org.slf4j.Logger;
1:8bf987b: import org.slf4j.LoggerFactory;
1:84eb9f8: 
1:b79fcd0: import java.io.IOException;
1:b79fcd0: import java.util.concurrent.atomic.AtomicBoolean;
1:b79fcd0: import java.util.concurrent.atomic.AtomicLong;
1:b79fcd0: 
1:84eb9f8: /**
1:84eb9f8:  * Holds internal state in the broker for a MessageProducer
1:84eb9f8:  */
1:230a86c: public class ProducerBrokerExchange {
1:0736953: 
1:8bf987b:     private static final Logger LOG = LoggerFactory.getLogger(ProducerBrokerExchange.class);
1:84eb9f8:     private ConnectionContext connectionContext;
1:84eb9f8:     private Destination regionDestination;
1:84eb9f8:     private Region region;
1:84eb9f8:     private ProducerState producerState;
1:230a86c:     private boolean mutable = true;
1:70057cb:     private AtomicLong lastSendSequenceNumber = new AtomicLong(-1);
1:2711ad1:     private boolean auditProducerSequenceIds;
1:0018f4a:     private boolean isNetworkProducer;
1:0018f4a:     private BrokerService brokerService;
1:e67d486:     private FlowControlInfo flowControlInfo = new FlowControlInfo();
1:2cb2119: 
1:2cb2119:     public ProducerBrokerExchange() {
1:2cb2119:     }
1:84eb9f8: 
1:a24133e:     public ProducerBrokerExchange copy() {
1:a24133e:         ProducerBrokerExchange rc = new ProducerBrokerExchange();
1:a24133e:         rc.connectionContext = connectionContext.copy();
1:a24133e:         rc.regionDestination = regionDestination;
1:a24133e:         rc.region = region;
1:a24133e:         rc.producerState = producerState;
1:a24133e:         rc.mutable = mutable;
1:e67d486:         rc.flowControlInfo = flowControlInfo;
1:a24133e:         return rc;
1:a24133e:     }
1:0736953: 
1:84eb9f8: 
1:84eb9f8:     /**
1:84eb9f8:      * @return the connectionContext
1:84eb9f8:      */
1:230a86c:     public ConnectionContext getConnectionContext() {
1:84eb9f8:         return this.connectionContext;
1:84eb9f8:     }
1:84eb9f8: 
1:84eb9f8:     /**
1:84eb9f8:      * @param connectionContext the connectionContext to set
1:84eb9f8:      */
1:230a86c:     public void setConnectionContext(ConnectionContext connectionContext) {
1:230a86c:         this.connectionContext = connectionContext;
1:84eb9f8:     }
1:84eb9f8: 
1:84eb9f8:     /**
1:84eb9f8:      * @return the mutable
1:84eb9f8:      */
1:230a86c:     public boolean isMutable() {
1:84eb9f8:         return this.mutable;
1:84eb9f8:     }
1:84eb9f8: 
1:84eb9f8:     /**
1:84eb9f8:      * @param mutable the mutable to set
1:84eb9f8:      */
1:230a86c:     public void setMutable(boolean mutable) {
1:230a86c:         this.mutable = mutable;
1:84eb9f8:     }
1:84eb9f8: 
1:84eb9f8:     /**
1:84eb9f8:      * @return the regionDestination
1:84eb9f8:      */
1:230a86c:     public Destination getRegionDestination() {
1:84eb9f8:         return this.regionDestination;
1:84eb9f8:     }
1:84eb9f8: 
1:84eb9f8:     /**
1:84eb9f8:      * @param regionDestination the regionDestination to set
1:84eb9f8:      */
1:230a86c:     public void setRegionDestination(Destination regionDestination) {
1:230a86c:         this.regionDestination = regionDestination;
1:84eb9f8:     }
1:84eb9f8: 
1:84eb9f8:     /**
1:84eb9f8:      * @return the region
1:84eb9f8:      */
1:230a86c:     public Region getRegion() {
1:84eb9f8:         return this.region;
1:84eb9f8:     }
1:84eb9f8: 
1:84eb9f8:     /**
1:84eb9f8:      * @param region the region to set
1:84eb9f8:      */
1:230a86c:     public void setRegion(Region region) {
1:230a86c:         this.region = region;
1:84eb9f8:     }
1:84eb9f8: 
1:84eb9f8:     /**
1:84eb9f8:      * @return the producerState
1:84eb9f8:      */
1:230a86c:     public ProducerState getProducerState() {
1:84eb9f8:         return this.producerState;
1:84eb9f8:     }
1:84eb9f8: 
1:84eb9f8:     /**
1:84eb9f8:      * @param producerState the producerState to set
1:84eb9f8:      */
1:230a86c:     public void setProducerState(ProducerState producerState) {
1:230a86c:         this.producerState = producerState;
1:84eb9f8:     }
1:84eb9f8: 
1:a6a6a70:     /**
1:a6a6a70:      * Enforce duplicate suppression using info from persistence adapter
1:0736953:      *
1:a6a6a70:      * @return false if message should be ignored as a duplicate
1:a6a6a70:      */
1:a6a6a70:     public boolean canDispatch(Message messageSend) {
1:a6a6a70:         boolean canDispatch = true;
1:0018f4a:         if (auditProducerSequenceIds && messageSend.isPersistent()) {
1:0018f4a:             final long producerSequenceId = messageSend.getMessageId().getProducerSequenceId();
1:0018f4a:             if (isNetworkProducer) {
1:0018f4a:                 //  messages are multiplexed on this producer so we need to query the persistenceAdapter
1:0018f4a:                 long lastStoredForMessageProducer = getStoredSequenceIdForMessage(messageSend.getMessageId());
1:0018f4a:                 if (producerSequenceId <= lastStoredForMessageProducer) {
1:0018f4a:                     canDispatch = false;
1:e8818fa:                     LOG.warn("suppressing duplicate message send [{}] from network producer with producerSequence [{}] less than last stored: {}", new Object[]{
1:e1bbde7:                             (LOG.isTraceEnabled() ? messageSend : messageSend.getMessageId()), producerSequenceId, lastStoredForMessageProducer
2:e1bbde7:                     });
1:84eb9f8:                 }
1:0018f4a:             } else if (producerSequenceId <= lastSendSequenceNumber.get()) {
1:a6a6a70:                 canDispatch = false;
1:e8818fa:                 if (messageSend.isInTransaction()) {
1:e8818fa:                     LOG.warn("suppressing duplicated message send [{}] with producerSequenceId [{}] <= last stored: {}", new Object[]{
1:e8818fa:                             (LOG.isTraceEnabled() ? messageSend : messageSend.getMessageId()), producerSequenceId, lastSendSequenceNumber
1:e8818fa:                     });
1:e8818fa:                 } else {
1:e8818fa:                     LOG.debug("suppressing duplicated message send [{}] with producerSequenceId [{}] <= last stored: {}", new Object[]{
1:e8818fa:                             (LOG.isTraceEnabled() ? messageSend : messageSend.getMessageId()), producerSequenceId, lastSendSequenceNumber
1:e8818fa:                     });
1:e8818fa: 
1:e8818fa:                 }
1:0018f4a:             } else {
1:2711ad1:                 // track current so we can suppress duplicates later in the stream
1:0018f4a:                 lastSendSequenceNumber.set(producerSequenceId);
1:230a86c:             }
1:49718ed:         }
1:a6a6a70:         return canDispatch;
1:49718ed:     }
1:a24133e: 
1:0018f4a:     private long getStoredSequenceIdForMessage(MessageId messageId) {
1:0018f4a:         try {
1:0018f4a:             return brokerService.getPersistenceAdapter().getLastProducerSequenceId(messageId.getProducerId());
1:0736953:         } catch (IOException ignored) {
1:e1bbde7:             LOG.debug("Failed to determine last producer sequence id for: {}", messageId, ignored);
1:0018f4a:         }
1:0018f4a:         return -1;
1:0018f4a:     }
1:a24133e: 
1:a6a6a70:     public void setLastStoredSequenceId(long l) {
1:2711ad1:         auditProducerSequenceIds = true;
1:0018f4a:         if (connectionContext.isNetworkConnection()) {
1:0018f4a:             brokerService = connectionContext.getBroker().getBrokerService();
1:0018f4a:             isNetworkProducer = true;
1:0018f4a:         }
1:70057cb:         lastSendSequenceNumber.set(l);
1:e1bbde7:         LOG.debug("last stored sequence id set: {}", l);
1:0018f4a:     }
1:0736953: 
1:0736953:     public void incrementSend() {
1:0736953:         flowControlInfo.incrementSend();
1:0736953:     }
1:0736953: 
1:0736953:     public void blockingOnFlowControl(boolean blockingOnFlowControl) {
1:0736953:         flowControlInfo.setBlockingOnFlowControl(blockingOnFlowControl);
1:0736953:     }
1:0736953: 
1:0736953:     public void incrementTimeBlocked(Destination destination, long timeBlocked) {
1:0736953:         flowControlInfo.incrementTimeBlocked(timeBlocked);
1:0736953:     }
1:0736953: 
1:0736953: 
1:0736953:     public boolean isBlockedForFlowControl() {
1:0736953:         return flowControlInfo.isBlockingOnFlowControl();
1:0736953:     }
1:0736953: 
1:0736953:     public void resetFlowControl() {
1:0736953:         flowControlInfo.reset();
1:0736953:     }
1:0736953: 
1:0736953:     public long getTotalTimeBlocked() {
1:0736953:         return flowControlInfo.getTotalTimeBlocked();
1:0736953:     }
1:0736953: 
1:0736953:     public int getPercentageBlocked() {
1:b79fcd0:         double value = flowControlInfo.getTotalSends() == 0 ? 0 : flowControlInfo.getSendsBlocked() / flowControlInfo.getTotalSends();
1:0736953:         return (int) value * 100;
1:0736953:     }
1:0736953: 
1:0736953: 
1:0736953:     public static class FlowControlInfo {
1:0736953:         private AtomicBoolean blockingOnFlowControl = new AtomicBoolean();
1:0736953:         private AtomicLong totalSends = new AtomicLong();
1:0736953:         private AtomicLong sendsBlocked = new AtomicLong();
1:0736953:         private AtomicLong totalTimeBlocked = new AtomicLong();
1:0736953: 
1:0736953: 
1:0736953:         public boolean isBlockingOnFlowControl() {
1:0736953:             return blockingOnFlowControl.get();
1:0736953:         }
1:0736953: 
1:0736953:         public void setBlockingOnFlowControl(boolean blockingOnFlowControl) {
1:0736953:             this.blockingOnFlowControl.set(blockingOnFlowControl);
1:0736953:             if (blockingOnFlowControl) {
1:0736953:                 incrementSendBlocked();
1:0736953:             }
1:0736953:         }
1:0736953: 
1:0736953: 
1:0736953:         public long getTotalSends() {
1:0736953:             return totalSends.get();
1:0736953:         }
1:0736953: 
1:0736953:         public void incrementSend() {
1:0736953:             this.totalSends.incrementAndGet();
1:0736953:         }
1:0736953: 
1:0736953:         public long getSendsBlocked() {
1:0736953:             return sendsBlocked.get();
1:0736953:         }
1:0736953: 
1:0736953:         public void incrementSendBlocked() {
1:0736953:             this.sendsBlocked.incrementAndGet();
1:0736953:         }
1:0736953: 
1:0736953:         public long getTotalTimeBlocked() {
1:0736953:             return totalTimeBlocked.get();
1:0736953:         }
1:0736953: 
1:0736953:         public void incrementTimeBlocked(long time) {
1:0736953:             this.totalTimeBlocked.addAndGet(time);
1:0736953:         }
1:0736953: 
1:0736953:         public void reset() {
1:0736953:             blockingOnFlowControl.set(false);
1:0736953:             totalSends.set(0);
1:0736953:             sendsBlocked.set(0);
1:0736953:             totalTimeBlocked.set(0);
1:0736953: 
1:0736953:         }
1:0736953:     }
1:2711ad1: }
============================================================================
author:Christopher L. Shannon (cshannon)
-------------------------------------------------------------------------------
commit:b79fcd0
/////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////
1: import java.io.IOException;
1: import java.util.concurrent.atomic.AtomicBoolean;
1: import java.util.concurrent.atomic.AtomicLong;
1: 
/////////////////////////////////////////////////////////////////////////
1:         double value = flowControlInfo.getTotalSends() == 0 ? 0 : flowControlInfo.getSendsBlocked() / flowControlInfo.getTotalSends();
author:gtully
-------------------------------------------------------------------------------
commit:e67d486
/////////////////////////////////////////////////////////////////////////
1:     private FlowControlInfo flowControlInfo = new FlowControlInfo();
/////////////////////////////////////////////////////////////////////////
1:         rc.flowControlInfo = flowControlInfo;
commit:e8818fa
/////////////////////////////////////////////////////////////////////////
1:                     LOG.warn("suppressing duplicate message send [{}] from network producer with producerSequence [{}] less than last stored: {}", new Object[]{
1:                 if (messageSend.isInTransaction()) {
1:                     LOG.warn("suppressing duplicated message send [{}] with producerSequenceId [{}] <= last stored: {}", new Object[]{
1:                             (LOG.isTraceEnabled() ? messageSend : messageSend.getMessageId()), producerSequenceId, lastSendSequenceNumber
1:                     });
1:                 } else {
1:                     LOG.debug("suppressing duplicated message send [{}] with producerSequenceId [{}] <= last stored: {}", new Object[]{
1:                             (LOG.isTraceEnabled() ? messageSend : messageSend.getMessageId()), producerSequenceId, lastSendSequenceNumber
1:                     });
1: 
1:                 }
author:Hadrian Zbarcea
-------------------------------------------------------------------------------
commit:d54d046
author:Timothy Bish
-------------------------------------------------------------------------------
commit:e1bbde7
/////////////////////////////////////////////////////////////////////////
0:                     LOG.debug("suppressing duplicate message send [{}] from network producer with producerSequence [{}] less than last stored: {}", new Object[]{
1:                             (LOG.isTraceEnabled() ? messageSend : messageSend.getMessageId()), producerSequenceId, lastStoredForMessageProducer
1:                     });
0:                 LOG.debug("suppressing duplicated message send [{}] with producerSequenceId [{}] less than last stored: {}", new Object[]{
0:                         (LOG.isTraceEnabled() ? messageSend : messageSend.getMessageId()), producerSequenceId, lastSendSequenceNumber
1:                 });
/////////////////////////////////////////////////////////////////////////
1:             LOG.debug("Failed to determine last producer sequence id for: {}", messageId, ignored);
/////////////////////////////////////////////////////////////////////////
1:         LOG.debug("last stored sequence id set: {}", l);
author:Robert Davies
-------------------------------------------------------------------------------
commit:0736953
/////////////////////////////////////////////////////////////////////////
0: import java.io.IOException;
0: import java.util.concurrent.atomic.AtomicBoolean;
0: import java.util.concurrent.atomic.AtomicLong;
1: 
/////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////
0:     private final FlowControlInfo flowControlInfo = new FlowControlInfo();
/////////////////////////////////////////////////////////////////////////
1: 
/////////////////////////////////////////////////////////////////////////
1:      *
/////////////////////////////////////////////////////////////////////////
0:                                 + producerSequenceId + "] less than last stored: " + lastStoredForMessageProducer);
0:                             + producerSequenceId + "] less than last stored: " + lastSendSequenceNumber);
/////////////////////////////////////////////////////////////////////////
1:         } catch (IOException ignored) {
0:             LOG.debug("Failed to determine last producer sequence id for: " + messageId, ignored);
/////////////////////////////////////////////////////////////////////////
1: 
1:     public void incrementSend() {
1:         flowControlInfo.incrementSend();
1:     }
1: 
1:     public void blockingOnFlowControl(boolean blockingOnFlowControl) {
1:         flowControlInfo.setBlockingOnFlowControl(blockingOnFlowControl);
1:     }
1: 
1:     public void incrementTimeBlocked(Destination destination, long timeBlocked) {
1:         flowControlInfo.incrementTimeBlocked(timeBlocked);
1:     }
1: 
1: 
1:     public boolean isBlockedForFlowControl() {
1:         return flowControlInfo.isBlockingOnFlowControl();
1:     }
1: 
1:     public void resetFlowControl() {
1:         flowControlInfo.reset();
1:     }
1: 
1:     public long getTotalTimeBlocked() {
1:         return flowControlInfo.getTotalTimeBlocked();
1:     }
1: 
1:     public int getPercentageBlocked() {
0:         double value = flowControlInfo.getSendsBlocked() / flowControlInfo.getTotalSends();
1:         return (int) value * 100;
1:     }
1: 
1: 
1:     public static class FlowControlInfo {
1:         private AtomicBoolean blockingOnFlowControl = new AtomicBoolean();
1:         private AtomicLong totalSends = new AtomicLong();
1:         private AtomicLong sendsBlocked = new AtomicLong();
1:         private AtomicLong totalTimeBlocked = new AtomicLong();
1: 
1: 
1:         public boolean isBlockingOnFlowControl() {
1:             return blockingOnFlowControl.get();
1:         }
1: 
1:         public void setBlockingOnFlowControl(boolean blockingOnFlowControl) {
1:             this.blockingOnFlowControl.set(blockingOnFlowControl);
1:             if (blockingOnFlowControl) {
1:                 incrementSendBlocked();
1:             }
1:         }
1: 
1: 
1:         public long getTotalSends() {
1:             return totalSends.get();
1:         }
1: 
1:         public void incrementSend() {
1:             this.totalSends.incrementAndGet();
1:         }
1: 
1:         public long getSendsBlocked() {
1:             return sendsBlocked.get();
1:         }
1: 
1:         public void incrementSendBlocked() {
1:             this.sendsBlocked.incrementAndGet();
1:         }
1: 
1:         public long getTotalTimeBlocked() {
1:             return totalTimeBlocked.get();
1:         }
1: 
1:         public void incrementTimeBlocked(long time) {
1:             this.totalTimeBlocked.addAndGet(time);
1:         }
1: 
1:         public void reset() {
1:             blockingOnFlowControl.set(false);
1:             totalSends.set(0);
1:             sendsBlocked.set(0);
1:             totalTimeBlocked.set(0);
1: 
1:         }
1:     }
commit:2cb2119
/////////////////////////////////////////////////////////////////////////
1:     
1:     public ProducerBrokerExchange() {
1:     }
commit:84eb9f8
/////////////////////////////////////////////////////////////////////////
1: /**
1:  * 
0:  * Licensed to the Apache Software Foundation (ASF) under one or more contributor license agreements. See the NOTICE
0:  * file distributed with this work for additional information regarding copyright ownership. The ASF licenses this file
0:  * to You under the Apache License, Version 2.0 (the "License"); you may not use this file except in compliance with the
0:  * License. You may obtain a copy of the License at
1:  * 
0:  * http://www.apache.org/licenses/LICENSE-2.0
1:  * 
0:  * Unless required by applicable law or agreed to in writing, software distributed under the License is distributed on
0:  * an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the License for the
0:  * specific language governing permissions and limitations under the License.
1:  */
1: 
1: package org.apache.activemq.broker;
1: 
1: import org.apache.activemq.broker.region.Destination;
1: import org.apache.activemq.broker.region.Region;
1: import org.apache.activemq.state.ProducerState;
1: 
1: /**
1:  * Holds internal state in the broker for a MessageProducer
1:  * 
0:  * @version $Revision: 1.8 $
1:  */
0: public class ProducerBrokerExchange{
1: 
1:     private ConnectionContext connectionContext;
1:     private Destination regionDestination;
1:     private Region region;
1:     private ProducerState producerState;
0:     private boolean mutable=true;
1: 
1:     /**
1:      * @return the connectionContext
1:      */
0:     public ConnectionContext getConnectionContext(){
1:         return this.connectionContext;
1:     }
1: 
1:     /**
1:      * @param connectionContext the connectionContext to set
1:      */
0:     public void setConnectionContext(ConnectionContext connectionContext){
0:         this.connectionContext=connectionContext;
1:     }
1: 
1:     /**
1:      * @return the mutable
1:      */
0:     public boolean isMutable(){
1:         return this.mutable;
1:     }
1: 
1:     /**
1:      * @param mutable the mutable to set
1:      */
0:     public void setMutable(boolean mutable){
0:         this.mutable=mutable;
1:     }
1: 
1:     /**
1:      * @return the regionDestination
1:      */
0:     public Destination getRegionDestination(){
1:         return this.regionDestination;
1:     }
1: 
1:     /**
1:      * @param regionDestination the regionDestination to set
1:      */
0:     public void setRegionDestination(Destination regionDestination){
0:         this.regionDestination=regionDestination;
1:     }
1: 
1:     /**
1:      * @return the region
1:      */
0:     public Region getRegion(){
1:         return this.region;
1:     }
1: 
1:     /**
1:      * @param region the region to set
1:      */
0:     public void setRegion(Region region){
0:         this.region=region;
1:     }
1: 
1:     /**
1:      * @return the producerState
1:      */
0:     public ProducerState getProducerState(){
1:         return this.producerState;
1:     }
1: 
1:     /**
1:      * @param producerState the producerState to set
1:      */
0:     public void setProducerState(ProducerState producerState){
0:         this.producerState=producerState;
1:     }
1: }
author:Hiram R. Chirino
-------------------------------------------------------------------------------
commit:58aca86
commit:b0c2a40
/////////////////////////////////////////////////////////////////////////
0:  * 
commit:a24133e
/////////////////////////////////////////////////////////////////////////
1:     public ProducerBrokerExchange copy() {
1:         ProducerBrokerExchange rc = new ProducerBrokerExchange();
1:         rc.connectionContext = connectionContext.copy();
1:         rc.regionDestination = regionDestination;
1:         rc.region = region;
1:         rc.producerState = producerState;
1:         rc.mutable = mutable;
1:         return rc;
1:     }
1: 
1:     
/////////////////////////////////////////////////////////////////////////
0: 
commit:fc00993
/////////////////////////////////////////////////////////////////////////
1:  * Licensed to the Apache Software Foundation (ASF) under one or more
1:  * contributor license agreements.  See the NOTICE file distributed with
1:  * this work for additional information regarding copyright ownership.
1:  * The ASF licenses this file to You under the Apache License, Version 2.0
1:  * (the "License"); you may not use this file except in compliance with
1:  * the License.  You may obtain a copy of the License at
0:  *
1:  *      http://www.apache.org/licenses/LICENSE-2.0
0:  *
1:  * Unless required by applicable law or agreed to in writing, software
1:  * distributed under the License is distributed on an "AS IS" BASIS,
1:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:  * See the License for the specific language governing permissions and
1:  * limitations under the License.
commit:230a86c
/////////////////////////////////////////////////////////////////////////
1: public class ProducerBrokerExchange {
1:     private boolean mutable = true;
1:     public ConnectionContext getConnectionContext() {
1:     public void setConnectionContext(ConnectionContext connectionContext) {
1:         this.connectionContext = connectionContext;
1:     public boolean isMutable() {
1:     public void setMutable(boolean mutable) {
1:         this.mutable = mutable;
1:     public Destination getRegionDestination() {
1:     public void setRegionDestination(Destination regionDestination) {
1:         this.regionDestination = regionDestination;
1:     public Region getRegion() {
1:     public void setRegion(Region region) {
1:         this.region = region;
1:     public ProducerState getProducerState() {
1:     public void setProducerState(ProducerState producerState) {
1:         this.producerState = producerState;
1: }
author:Gary Tully
-------------------------------------------------------------------------------
commit:49718ed
/////////////////////////////////////////////////////////////////////////
0:                     if (LOG.isDebugEnabled()) {
0:                         LOG.debug("suppressing duplicate message send  [" + (LOG.isTraceEnabled() ? messageSend : messageSend.getMessageId()) + "] from network producer with producerSequenceId ["
0:                                 + producerSequenceId + "] less than last stored: "  + lastStoredForMessageProducer);
1:                     }
0:                 if (LOG.isDebugEnabled()) {
0:                     LOG.debug("suppressing duplicate message send [" + (LOG.isTraceEnabled() ? messageSend : messageSend.getMessageId()) + "] with producerSequenceId ["
0:                             + producerSequenceId + "] less than last stored: "  + lastSendSequenceNumber);
1:                 }
commit:0018f4a
/////////////////////////////////////////////////////////////////////////
1: import org.apache.activemq.command.MessageId;
0: import java.io.IOException;
/////////////////////////////////////////////////////////////////////////
1:     private boolean isNetworkProducer;
1:     private BrokerService brokerService;
0: 
/////////////////////////////////////////////////////////////////////////
1:         if (auditProducerSequenceIds && messageSend.isPersistent()) {
1:             final long producerSequenceId = messageSend.getMessageId().getProducerSequenceId();
1:             if (isNetworkProducer) {
1:                 //  messages are multiplexed on this producer so we need to query the persistenceAdapter
1:                 long lastStoredForMessageProducer = getStoredSequenceIdForMessage(messageSend.getMessageId());
1:                 if (producerSequenceId <= lastStoredForMessageProducer) {
1:                     canDispatch = false;
0:                     LOG.debug("suppressing duplicate message send from network producer [" + messageSend.getMessageId() + "] with producerSequenceId ["
0:                             + producerSequenceId + "] less than last stored: "  + lastStoredForMessageProducer);
1:                 }
1:             } else if (producerSequenceId <= lastSendSequenceNumber.get()) {
0:                         + producerSequenceId + "] less than last stored: "  + lastSendSequenceNumber);
1:             } else {
1:                 lastSendSequenceNumber.set(producerSequenceId);
1:     private long getStoredSequenceIdForMessage(MessageId messageId) {
1:         try {
1:             return brokerService.getPersistenceAdapter().getLastProducerSequenceId(messageId.getProducerId());
0:        } catch (IOException ignored) {
0:             LOG.debug("Failed to determine last producer sequence id for: " +messageId, ignored);
1:         }
1:         return -1;
1:     }
0: 
1:         if (connectionContext.isNetworkConnection()) {
1:             brokerService = connectionContext.getBroker().getBrokerService();
1:             isNetworkProducer = true;
1:         }
commit:2711ad1
/////////////////////////////////////////////////////////////////////////
1:     private boolean auditProducerSequenceIds;
/////////////////////////////////////////////////////////////////////////
0:         if (auditProducerSequenceIds) {
0: 
0:             if (canDispatch) {
1:                 // track current so we can suppress duplicates later in the stream
0:                 lastSendSequenceNumber.set(messageSend.getMessageId().getProducerSequenceId());
1:             }
1:         auditProducerSequenceIds = true;
commit:5cf33b5
/////////////////////////////////////////////////////////////////////////
0:         if (canDispatch) {
0:             lastSendSequenceNumber.set(messageSend.getMessageId().getProducerSequenceId());
0:         }
commit:a6a6a70
/////////////////////////////////////////////////////////////////////////
1: import org.apache.activemq.command.Message;
0: import org.apache.commons.logging.Log;
0: import org.apache.commons.logging.LogFactory;
/////////////////////////////////////////////////////////////////////////
0:     private static final Log LOG = LogFactory.getLog(ProducerBrokerExchange.class);
0:     private long lastSendSequenceNumber = -1;
/////////////////////////////////////////////////////////////////////////
1:     /**
1:      * Enforce duplicate suppression using info from persistence adapter
0:      * @param messageSend
1:      * @return false if message should be ignored as a duplicate
1:      */
1:     public boolean canDispatch(Message messageSend) {
1:         boolean canDispatch = true;
0:         if (lastSendSequenceNumber > 0) {
0:             if (messageSend.getMessageId().getProducerSequenceId() <= lastSendSequenceNumber) {
1:                 canDispatch = false;
0:                 LOG.debug("suppressing duplicate message send [" + messageSend.getMessageId() + "] with producerSequenceId [" 
0:                         + messageSend.getMessageId().getProducerSequenceId() + "] less than last stored: "  + lastSendSequenceNumber);
0:             }
0:         }
1:         return canDispatch;
0:     }
0: 
1:     public void setLastStoredSequenceId(long l) {
0:         lastSendSequenceNumber = l;
0:         LOG.debug("last stored sequence id set: " + l);
0:     }
author:Bosanac Dejan
-------------------------------------------------------------------------------
commit:70057cb
/////////////////////////////////////////////////////////////////////////
0: import java.util.concurrent.atomic.AtomicLong;
0: 
/////////////////////////////////////////////////////////////////////////
1:     private AtomicLong lastSendSequenceNumber = new AtomicLong(-1);
/////////////////////////////////////////////////////////////////////////
0:         if (lastSendSequenceNumber.get() > 0) {
0:             if (messageSend.getMessageId().getProducerSequenceId() <= lastSendSequenceNumber.get()) {
0:                 LOG.debug("suppressing duplicate message send [" + messageSend.getMessageId() + "] with producerSequenceId ["
0:         lastSendSequenceNumber.set(messageSend.getMessageId().getProducerSequenceId());
1:         lastSendSequenceNumber.set(l);
commit:8bf987b
/////////////////////////////////////////////////////////////////////////
1: import org.slf4j.Logger;
1: import org.slf4j.LoggerFactory;
/////////////////////////////////////////////////////////////////////////
1:     private static final Logger LOG = LoggerFactory.getLogger(ProducerBrokerExchange.class);
============================================================================