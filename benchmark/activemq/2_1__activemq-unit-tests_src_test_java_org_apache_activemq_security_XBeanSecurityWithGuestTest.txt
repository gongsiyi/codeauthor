1:6f68a94: /**
1:6f68a94:  * Licensed to the Apache Software Foundation (ASF) under one or more
1:6f68a94:  * contributor license agreements.  See the NOTICE file distributed with
1:6f68a94:  * this work for additional information regarding copyright ownership.
1:6f68a94:  * The ASF licenses this file to You under the Apache License, Version 2.0
1:6f68a94:  * (the "License"); you may not use this file except in compliance with
1:6f68a94:  * the License.  You may obtain a copy of the License at
1:6f68a94:  *
1:6f68a94:  *      http://www.apache.org/licenses/LICENSE-2.0
1:6f68a94:  *
1:6f68a94:  * Unless required by applicable law or agreed to in writing, software
1:6f68a94:  * distributed under the License is distributed on an "AS IS" BASIS,
1:6f68a94:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:6f68a94:  * See the License for the specific language governing permissions and
1:6f68a94:  * limitations under the License.
1:6f68a94:  */
1:6f68a94: package org.apache.activemq.security;
1:6f68a94: 
1:6f68a94: import java.net.URI;
1:6f68a94: import javax.jms.Connection;
1:6f68a94: import javax.jms.JMSException;
1:6f68a94: import javax.jms.Message;
1:6f68a94: import javax.jms.MessageConsumer;
1:6f68a94: import javax.jms.Session;
1:6f68a94: import javax.jms.TextMessage;
1:6f68a94: import junit.framework.Test;
1:6f68a94: import org.apache.activemq.ActiveMQConnection;
1:6f68a94: import org.apache.activemq.CombinationTestSupport;
1:6f68a94: import org.apache.activemq.JmsTestSupport;
1:6f68a94: import org.apache.activemq.broker.BrokerFactory;
1:6f68a94: import org.apache.activemq.broker.BrokerService;
1:6f68a94: import org.apache.activemq.command.ActiveMQDestination;
1:6f68a94: import org.apache.activemq.command.ActiveMQMessage;
1:6f68a94: import org.apache.activemq.command.ActiveMQQueue;
1:6f68a94: import org.apache.activemq.command.ActiveMQTopic;
1:6f68a94: import org.slf4j.Logger;
1:6f68a94: import org.slf4j.LoggerFactory;
1:6f68a94: 
1:6f68a94: public class XBeanSecurityWithGuestTest extends JmsTestSupport {
1:6f68a94: 
1:6f68a94:     private static final Logger LOG = LoggerFactory.getLogger(XBeanSecurityWithGuestTest.class);
1:6f68a94:     public ActiveMQDestination destination;
1:6f68a94:     
1:6f68a94:     public static Test suite() {
1:6f68a94:         return suite(XBeanSecurityWithGuestTest.class);
1:6f68a94:     }
1:6f68a94:     
1:6f68a94:     public void testUserSendGoodPassword() throws JMSException {
1:6f68a94:         Message m = doSend(false);
1:6f68a94:         assertEquals("system", ((ActiveMQMessage)m).getUserID());
1:6f68a94:         assertEquals("system", m.getStringProperty("JMSXUserID"));
1:6f68a94:     }
1:6f68a94:     
1:6f68a94:     public void testUserSendWrongPassword() throws JMSException {
1:6f68a94:         Message m = doSend(false);
1:6f68a94:         // note brokerService.useAuthenticatedPrincipalForJMXUserID=true for this
1:6f68a94:         assertEquals("guest", ((ActiveMQMessage)m).getUserID());
1:6f68a94:         assertEquals("guest", m.getStringProperty("JMSXUserID"));
1:6f68a94:     }
1:6f68a94: 
1:69f5605:     public void testUserSendNoCredentials() throws JMSException {
1:69f5605:         Message m = doSend(false);
1:69f5605:         // note brokerService.useAuthenticatedPrincipalForJMXUserID=true for this
1:69f5605:         assertEquals("guest", ((ActiveMQMessage)m).getUserID());
1:69f5605:         assertEquals("guest", m.getStringProperty("JMSXUserID"));
1:69f5605:     }
1:69f5605: 
1:6f68a94:     protected BrokerService createBroker() throws Exception {
1:6f68a94:         return createBroker("org/apache/activemq/security/jaas-broker-guest.xml");
1:6f68a94:     }
1:6f68a94: 
1:6f68a94:     protected BrokerService createBroker(String uri) throws Exception {
1:6f68a94:         LOG.info("Loading broker configuration from the classpath with URI: " + uri);
1:6f68a94:         return BrokerFactory.createBroker(new URI("xbean:" + uri));
1:6f68a94:     }
1:6f68a94: 
1:6f68a94:     public Message doSend(boolean fail) throws JMSException {
1:6f68a94: 
1:6f68a94:         Connection adminConnection = factory.createConnection("system", "manager");
1:6f68a94:         connections.add(adminConnection);
1:6f68a94: 
1:6f68a94:         adminConnection.start();
1:6f68a94:         Session adminSession = adminConnection.createSession(false, Session.AUTO_ACKNOWLEDGE);
1:6f68a94:         MessageConsumer consumer = adminSession.createConsumer(destination);
1:6f68a94: 
1:6f68a94:         connections.remove(connection);
1:6f68a94:         connection = (ActiveMQConnection)factory.createConnection(userName, password);
1:6f68a94:         connections.add(connection);
1:6f68a94: 
1:6f68a94:         Session session = connection.createSession(false, Session.AUTO_ACKNOWLEDGE);
1:6f68a94:         try {
1:6f68a94:             sendMessages(session, destination, 1);
1:6f68a94:         } catch (JMSException e) {
1:6f68a94:             // If test is expected to fail, the cause must only be a
1:6f68a94:             // SecurityException
1:6f68a94:             // otherwise rethrow the exception
1:6f68a94:             if (!fail || !(e.getCause() instanceof SecurityException)) {
1:6f68a94:                 throw e;
1:6f68a94:             }
1:6f68a94:         }
1:6f68a94: 
1:6f68a94:         Message m = consumer.receive(1000);
1:6f68a94:         if (fail) {
1:6f68a94:             assertNull(m);
1:6f68a94:         } else {
1:6f68a94:             assertNotNull(m);
1:6f68a94:             assertEquals("0", ((TextMessage)m).getText());
1:6f68a94:             assertNull(consumer.receiveNoWait());
1:6f68a94:         }
1:6f68a94:         return m;
1:6f68a94:     }
1:6f68a94:     
1:6f68a94:     /**
1:6f68a94:      * @see {@link CombinationTestSupport}
1:6f68a94:      */
1:6f68a94:     public void initCombosForTestUserSendGoodPassword() {
1:6f68a94:         addCombinationValues("userName", new Object[] {"system"});
1:6f68a94:         addCombinationValues("password", new Object[] {"manager"});
1:6f68a94:         addCombinationValues("destination", new Object[] {new ActiveMQQueue("test"), new ActiveMQTopic("test")});
1:6f68a94:     }
1:6f68a94:     
1:6f68a94:     /**
1:6f68a94:      * @see {@link CombinationTestSupport}
1:6f68a94:      */
1:6f68a94:     public void initCombosForTestUserSendWrongPassword() {
1:6f68a94:         addCombinationValues("userName", new Object[] {"system"});
1:6f68a94:         addCombinationValues("password", new Object[] {"wrongpassword"});
1:6f68a94:         addCombinationValues("destination", new Object[] {new ActiveMQQueue("GuestQueue")});
1:6f68a94:     }
1:69f5605: 
1:69f5605:     public void initCombosForTestUserSendNoCredentials() {
1:69f5605:         addCombinationValues("userName", new Object[] {"", null});
1:69f5605:         addCombinationValues("password", new Object[] {"", null});
1:69f5605:         addCombinationValues("destination", new Object[] {new ActiveMQQueue("GuestQueue")});
1:69f5605:     }
1:69f5605: 
1:6f68a94: }
============================================================================
author:Timothy A. Bish
-------------------------------------------------------------------------------
commit:ef24cc9
author:Gary Tully
-------------------------------------------------------------------------------
commit:69f5605
/////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////
1:     public void testUserSendNoCredentials() throws JMSException {
1:         Message m = doSend(false);
1:         // note brokerService.useAuthenticatedPrincipalForJMXUserID=true for this
1:         assertEquals("guest", ((ActiveMQMessage)m).getUserID());
1:         assertEquals("guest", m.getStringProperty("JMSXUserID"));
1:     }
1: 
/////////////////////////////////////////////////////////////////////////
1: 
1:     public void initCombosForTestUserSendNoCredentials() {
1:         addCombinationValues("userName", new Object[] {"", null});
1:         addCombinationValues("password", new Object[] {"", null});
1:         addCombinationValues("destination", new Object[] {new ActiveMQQueue("GuestQueue")});
1:     }
1: 
commit:6f68a94
/////////////////////////////////////////////////////////////////////////
1: /**
1:  * Licensed to the Apache Software Foundation (ASF) under one or more
1:  * contributor license agreements.  See the NOTICE file distributed with
1:  * this work for additional information regarding copyright ownership.
1:  * The ASF licenses this file to You under the Apache License, Version 2.0
1:  * (the "License"); you may not use this file except in compliance with
1:  * the License.  You may obtain a copy of the License at
1:  *
1:  *      http://www.apache.org/licenses/LICENSE-2.0
1:  *
1:  * Unless required by applicable law or agreed to in writing, software
1:  * distributed under the License is distributed on an "AS IS" BASIS,
1:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:  * See the License for the specific language governing permissions and
1:  * limitations under the License.
1:  */
1: package org.apache.activemq.security;
1: 
1: import java.net.URI;
1: import javax.jms.Connection;
0: import javax.jms.ConnectionFactory;
1: import javax.jms.JMSException;
1: import javax.jms.Message;
1: import javax.jms.MessageConsumer;
1: import javax.jms.Session;
1: import javax.jms.TextMessage;
1: import junit.framework.Test;
1: import org.apache.activemq.ActiveMQConnection;
0: import org.apache.activemq.ActiveMQConnectionFactory;
1: import org.apache.activemq.CombinationTestSupport;
1: import org.apache.activemq.JmsTestSupport;
1: import org.apache.activemq.broker.BrokerFactory;
1: import org.apache.activemq.broker.BrokerService;
1: import org.apache.activemq.command.ActiveMQDestination;
1: import org.apache.activemq.command.ActiveMQMessage;
1: import org.apache.activemq.command.ActiveMQQueue;
1: import org.apache.activemq.command.ActiveMQTopic;
1: import org.slf4j.Logger;
1: import org.slf4j.LoggerFactory;
1: 
1: public class XBeanSecurityWithGuestTest extends JmsTestSupport {
1: 
1:     private static final Logger LOG = LoggerFactory.getLogger(XBeanSecurityWithGuestTest.class);
1:     public ActiveMQDestination destination;
1:     
1:     public static Test suite() {
1:         return suite(XBeanSecurityWithGuestTest.class);
1:     }
1:     
1:     public void testUserSendGoodPassword() throws JMSException {
1:         Message m = doSend(false);
1:         assertEquals("system", ((ActiveMQMessage)m).getUserID());
1:         assertEquals("system", m.getStringProperty("JMSXUserID"));
1:     }
1:     
1:     public void testUserSendWrongPassword() throws JMSException {
1:         Message m = doSend(false);
1:         // note brokerService.useAuthenticatedPrincipalForJMXUserID=true for this
1:         assertEquals("guest", ((ActiveMQMessage)m).getUserID());
1:         assertEquals("guest", m.getStringProperty("JMSXUserID"));
1:     }
1: 
1:     protected BrokerService createBroker() throws Exception {
1:         return createBroker("org/apache/activemq/security/jaas-broker-guest.xml");
1:     }
1: 
1:     protected BrokerService createBroker(String uri) throws Exception {
1:         LOG.info("Loading broker configuration from the classpath with URI: " + uri);
1:         return BrokerFactory.createBroker(new URI("xbean:" + uri));
1:     }
1: 
1:     public Message doSend(boolean fail) throws JMSException {
1: 
1:         Connection adminConnection = factory.createConnection("system", "manager");
1:         connections.add(adminConnection);
1: 
1:         adminConnection.start();
1:         Session adminSession = adminConnection.createSession(false, Session.AUTO_ACKNOWLEDGE);
1:         MessageConsumer consumer = adminSession.createConsumer(destination);
1: 
1:         connections.remove(connection);
1:         connection = (ActiveMQConnection)factory.createConnection(userName, password);
1:         connections.add(connection);
1: 
1:         Session session = connection.createSession(false, Session.AUTO_ACKNOWLEDGE);
1:         try {
1:             sendMessages(session, destination, 1);
1:         } catch (JMSException e) {
1:             // If test is expected to fail, the cause must only be a
1:             // SecurityException
1:             // otherwise rethrow the exception
1:             if (!fail || !(e.getCause() instanceof SecurityException)) {
1:                 throw e;
1:             }
1:         }
1: 
1:         Message m = consumer.receive(1000);
1:         if (fail) {
1:             assertNull(m);
1:         } else {
1:             assertNotNull(m);
1:             assertEquals("0", ((TextMessage)m).getText());
1:             assertNull(consumer.receiveNoWait());
1:         }
1:         return m;
1:     }
1:     
1:     /**
1:      * @see {@link CombinationTestSupport}
1:      */
1:     public void initCombosForTestUserSendGoodPassword() {
1:         addCombinationValues("userName", new Object[] {"system"});
1:         addCombinationValues("password", new Object[] {"manager"});
1:         addCombinationValues("destination", new Object[] {new ActiveMQQueue("test"), new ActiveMQTopic("test")});
1:     }
1:     
1:     /**
1:      * @see {@link CombinationTestSupport}
1:      */
1:     public void initCombosForTestUserSendWrongPassword() {
1:         addCombinationValues("userName", new Object[] {"system"});
1:         addCombinationValues("password", new Object[] {"wrongpassword"});
1:         addCombinationValues("destination", new Object[] {new ActiveMQQueue("GuestQueue")});
1:     }
1: }
============================================================================