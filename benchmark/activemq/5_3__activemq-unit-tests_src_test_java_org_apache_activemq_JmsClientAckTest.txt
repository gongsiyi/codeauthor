1:d29ca2a: /**
1:57b4941:  * Licensed to the Apache Software Foundation (ASF) under one or more
1:57b4941:  * contributor license agreements.  See the NOTICE file distributed with
1:57b4941:  * this work for additional information regarding copyright ownership.
1:57b4941:  * The ASF licenses this file to You under the Apache License, Version 2.0
1:57b4941:  * (the "License"); you may not use this file except in compliance with
1:57b4941:  * the License.  You may obtain a copy of the License at
5:d29ca2a:  *
1:230a86c:  *      http://www.apache.org/licenses/LICENSE-2.0
1:d29ca2a:  *
1:d29ca2a:  * Unless required by applicable law or agreed to in writing, software
1:d29ca2a:  * distributed under the License is distributed on an "AS IS" BASIS,
1:d29ca2a:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:d29ca2a:  * See the License for the specific language governing permissions and
1:d29ca2a:  * limitations under the License.
1:d29ca2a:  */
1:d29ca2a: package org.apache.activemq;
4:d29ca2a: 
1:79568f1: import static org.junit.Assert.assertNotNull;
1:79568f1: import static org.junit.Assert.assertNull;
1:79568f1: 
1:d29ca2a: import javax.jms.Connection;
1:d29ca2a: import javax.jms.JMSException;
1:d29ca2a: import javax.jms.Message;
1:d29ca2a: import javax.jms.MessageConsumer;
1:d29ca2a: import javax.jms.MessageProducer;
1:d29ca2a: import javax.jms.Queue;
1:d29ca2a: import javax.jms.Session;
1:d29ca2a: 
1:79568f1: import org.junit.After;
1:79568f1: import org.junit.Before;
1:79568f1: import org.junit.Rule;
1:79568f1: import org.junit.Test;
1:79568f1: import org.junit.rules.TestName;
1:79568f1: 
1:d29ca2a: /**
1:79568f1:  * Test for client ACK support
1:d29ca2a:  */
1:79568f1: public class JmsClientAckTest {
1:79568f1: 
1:79568f1:     @Rule
1:79568f1:     public TestName name = new TestName();
1:d29ca2a: 
1:d29ca2a:     private Connection connection;
1:d29ca2a: 
1:79568f1:     @Before
1:79568f1:     public void setUp() throws Exception {
1:79568f1:         ActiveMQConnectionFactory factory = new ActiveMQConnectionFactory(
1:79568f1:             "vm://localhost?broker.persistent=false&broker.useJmx=false");
1:79568f1: 
1:79568f1:         connection = factory.createConnection();;
1:d29ca2a:     }
1:d29ca2a: 
1:d29ca2a:     /**
1:d29ca2a:      * @see junit.framework.TestCase#tearDown()
1:d29ca2a:      */
1:79568f1:     @After
1:79568f1:     public void tearDown() throws Exception {
1:d29ca2a:         if (connection != null) {
1:d29ca2a:             connection.close();
1:d29ca2a:             connection = null;
1:d29ca2a:         }
1:d29ca2a:     }
1:d29ca2a: 
1:d29ca2a:     /**
1:d29ca2a:      * Tests if acknowledged messages are being consumed.
1:b0c2a40:      *
1:d29ca2a:      * @throws JMSException
1:d29ca2a:      */
1:79568f1:     @Test(timeout = 60000)
1:d29ca2a:     public void testAckedMessageAreConsumed() throws JMSException {
1:d29ca2a:         connection.start();
1:d29ca2a:         Session session = connection.createSession(false, Session.CLIENT_ACKNOWLEDGE);
1:4e21e15:         Queue queue = session.createQueue(getQueueName());
1:d29ca2a:         MessageProducer producer = session.createProducer(queue);
1:d29ca2a:         producer.send(session.createTextMessage("Hello"));
1:d29ca2a: 
1:d29ca2a:         // Consume the message...
1:d29ca2a:         MessageConsumer consumer = session.createConsumer(queue);
1:d29ca2a:         Message msg = consumer.receive(1000);
1:79568f1:         assertNotNull(msg);
1:d29ca2a:         msg.acknowledge();
1:d29ca2a: 
1:d29ca2a:         // Reset the session.
1:d29ca2a:         session.close();
1:d29ca2a:         session = connection.createSession(false, Session.CLIENT_ACKNOWLEDGE);
1:d29ca2a: 
1:d29ca2a:         // Attempt to Consume the message...
1:d29ca2a:         consumer = session.createConsumer(queue);
1:79568f1:         msg = consumer.receive(500);
1:d29ca2a:         assertNull(msg);
1:79568f1: 
1:d29ca2a:         session.close();
1:86cbdfd:     }
1:d29ca2a: 
1:d29ca2a:     /**
1:d29ca2a:      * Tests if acknowledged messages are being consumed.
1:d29ca2a:      *
1:d29ca2a:      * @throws JMSException
1:d29ca2a:      */
1:79568f1:     @Test(timeout = 60000)
1:d29ca2a:     public void testLastMessageAcked() throws JMSException {
1:d29ca2a:         connection.start();
1:d29ca2a:         Session session = connection.createSession(false, Session.CLIENT_ACKNOWLEDGE);
1:4e21e15:         Queue queue = session.createQueue(getQueueName());
1:d29ca2a:         MessageProducer producer = session.createProducer(queue);
1:d29ca2a:         producer.send(session.createTextMessage("Hello"));
1:d29ca2a:         producer.send(session.createTextMessage("Hello2"));
1:d29ca2a:         producer.send(session.createTextMessage("Hello3"));
1:d29ca2a: 
1:d29ca2a:         // Consume the message...
1:d29ca2a:         MessageConsumer consumer = session.createConsumer(queue);
1:d29ca2a:         Message msg = consumer.receive(1000);
4:d29ca2a:         assertNotNull(msg);
3:d29ca2a:         msg = consumer.receive(1000);
1:79568f1:         assertNotNull(msg);
1:d29ca2a:         msg = consumer.receive(1000);
1:d29ca2a:         assertNotNull(msg);
1:d29ca2a:         msg.acknowledge();
1:d29ca2a: 
1:d29ca2a:         // Reset the session.
1:d29ca2a:         session.close();
1:d29ca2a:         session = connection.createSession(false, Session.CLIENT_ACKNOWLEDGE);
1:d29ca2a: 
1:d29ca2a:         // Attempt to Consume the message...
1:d29ca2a:         consumer = session.createConsumer(queue);
1:79568f1:         msg = consumer.receive(500);
1:d29ca2a:         assertNull(msg);
1:d29ca2a: 
1:d29ca2a:         session.close();
1:d29ca2a:     }
1:d29ca2a: 
1:d29ca2a:     /**
1:d29ca2a:      * Tests if unacknowledged messages are being re-delivered when the consumer connects again.
1:79568f1:      *
1:d29ca2a:      * @throws JMSException
1:d29ca2a:      */
1:79568f1:     @Test(timeout = 60000)
1:d29ca2a:     public void testUnAckedMessageAreNotConsumedOnSessionClose() throws JMSException {
1:d29ca2a:         connection.start();
1:d29ca2a:         Session session = connection.createSession(false, Session.CLIENT_ACKNOWLEDGE);
1:4e21e15:         Queue queue = session.createQueue(getQueueName());
1:d29ca2a:         MessageProducer producer = session.createProducer(queue);
1:d29ca2a:         producer.send(session.createTextMessage("Hello"));
1:d29ca2a: 
1:d29ca2a:         // Consume the message...
1:d29ca2a:         MessageConsumer consumer = session.createConsumer(queue);
1:d29ca2a:         Message msg = consumer.receive(1000);
1:d29ca2a:         assertNotNull(msg);
1:d29ca2a:         // Don't ack the message.
1:79568f1: 
1:d29ca2a:         // Reset the session.  This should cause the unacknowledged message to be re-delivered.
1:d29ca2a:         session.close();
1:d29ca2a:         session = connection.createSession(false, Session.CLIENT_ACKNOWLEDGE);
1:79568f1: 
1:d29ca2a:         // Attempt to Consume the message...
1:d29ca2a:         consumer = session.createConsumer(queue);
1:d29ca2a:         msg = consumer.receive(2000);
1:79568f1:         assertNotNull(msg);
1:d29ca2a:         msg.acknowledge();
1:79568f1: 
1:d29ca2a:         session.close();
1:d29ca2a:     }
1:d29ca2a: 
1:4e21e15:     protected String getQueueName() {
1:79568f1:         return getClass().getName() + "." + name.getMethodName();
1:d29ca2a:     }
1:d29ca2a: }
============================================================================
author:Hadrian Zbarcea
-------------------------------------------------------------------------------
commit:f9bec8f
author:Timothy Bish
-------------------------------------------------------------------------------
commit:79568f1
/////////////////////////////////////////////////////////////////////////
1: import static org.junit.Assert.assertNotNull;
1: import static org.junit.Assert.assertNull;
1: 
/////////////////////////////////////////////////////////////////////////
1: import org.junit.After;
1: import org.junit.Before;
1: import org.junit.Rule;
1: import org.junit.Test;
1: import org.junit.rules.TestName;
1: 
1:  * Test for client ACK support
1: public class JmsClientAckTest {
1: 
1:     @Rule
1:     public TestName name = new TestName();
1:     @Before
1:     public void setUp() throws Exception {
1:         ActiveMQConnectionFactory factory = new ActiveMQConnectionFactory(
1:             "vm://localhost?broker.persistent=false&broker.useJmx=false");
1: 
1:         connection = factory.createConnection();;
1:     @After
1:     public void tearDown() throws Exception {
/////////////////////////////////////////////////////////////////////////
1:     @Test(timeout = 60000)
/////////////////////////////////////////////////////////////////////////
1:         msg = consumer.receive(500);
/////////////////////////////////////////////////////////////////////////
1:     @Test(timeout = 60000)
/////////////////////////////////////////////////////////////////////////
1:         assertNotNull(msg);
/////////////////////////////////////////////////////////////////////////
1:         msg = consumer.receive(500);
1: 
1:      *
1:     @Test(timeout = 60000)
/////////////////////////////////////////////////////////////////////////
1:         assertNotNull(msg);
1: 
1: 
1:         assertNotNull(msg);
1: 
1:         return getClass().getName() + "." + name.getMethodName();
author:Timothy A. Bish
-------------------------------------------------------------------------------
commit:ef24cc9
author:Hiram R. Chirino
-------------------------------------------------------------------------------
commit:b0c2a40
/////////////////////////////////////////////////////////////////////////
1:  * 
commit:230a86c
/////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////
1:  *      http://www.apache.org/licenses/LICENSE-2.0
commit:86cbdfd
/////////////////////////////////////////////////////////////////////////
1: }
commit:57b4941
/////////////////////////////////////////////////////////////////////////
1:  * Licensed to the Apache Software Foundation (ASF) under one or more
1:  * contributor license agreements.  See the NOTICE file distributed with
1:  * this work for additional information regarding copyright ownership.
1:  * The ASF licenses this file to You under the Apache License, Version 2.0
1:  * (the "License"); you may not use this file except in compliance with
1:  * the License.  You may obtain a copy of the License at
commit:48b4869
/////////////////////////////////////////////////////////////////////////
0:  * Copyright 2005-2006 The Apache Software Foundation
commit:d29ca2a
/////////////////////////////////////////////////////////////////////////
1: /**
1:  *
0:  * Copyright 2004 The Apache Software Foundation
1:  *
0:  * Licensed under the Apache License, Version 2.0 (the "License");
0:  * you may not use this file except in compliance with the License.
0:  * You may obtain a copy of the License at
1:  *
0:  * http://www.apache.org/licenses/LICENSE-2.0
1:  *
1:  * Unless required by applicable law or agreed to in writing, software
1:  * distributed under the License is distributed on an "AS IS" BASIS,
1:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:  * See the License for the specific language governing permissions and
1:  * limitations under the License.
1:  */
1: package org.apache.activemq;
1: 
1: import javax.jms.Connection;
1: import javax.jms.JMSException;
1: import javax.jms.Message;
1: import javax.jms.MessageConsumer;
1: import javax.jms.MessageProducer;
1: import javax.jms.Queue;
1: import javax.jms.Session;
1: 
1: /**
0:  * @version $Revision: 1.4 $
1:  */
0: public class JmsClientAckTest extends TestSupport {
1: 
1:     private Connection connection;
1: 
0:     protected void setUp() throws Exception {
0:         super.setUp();
0:         connection = createConnection();
1:     }
1: 
1:     /**
1:      * @see junit.framework.TestCase#tearDown()
1:      */
0:     protected void tearDown() throws Exception {
1:         if (connection != null) {
1:             connection.close();
1:             connection = null;
1:         }
0:         super.tearDown();
1:     }
1: 
1:     /**
1:      * Tests if acknowledged messages are being consumed.
1:      *
1:      * @throws JMSException
1:      */
1:     public void testAckedMessageAreConsumed() throws JMSException {
1:         connection.start();
1:         Session session = connection.createSession(false, Session.CLIENT_ACKNOWLEDGE);
0:         Queue queue = session.createQueue("test");
1:         MessageProducer producer = session.createProducer(queue);
1:         producer.send(session.createTextMessage("Hello"));
1: 
1:         // Consume the message...
1:         MessageConsumer consumer = session.createConsumer(queue);
1:         Message msg = consumer.receive(1000);
1:         assertNotNull(msg);
1:         msg.acknowledge();
1: 
1:         // Reset the session.
1:         session.close();
1:         session = connection.createSession(false, Session.CLIENT_ACKNOWLEDGE);
1: 
1:         // Attempt to Consume the message...
1:         consumer = session.createConsumer(queue);
1:         msg = consumer.receive(1000);
1:         assertNull(msg);
1: 
1:         session.close();
1:     }
1: 
1:     /**
1:      * Tests if acknowledged messages are being consumed.
1:      *
1:      * @throws JMSException
1:      */
1:     public void testLastMessageAcked() throws JMSException {
1:         connection.start();
1:         Session session = connection.createSession(false, Session.CLIENT_ACKNOWLEDGE);
0:         Queue queue = session.createQueue("test");
1:         MessageProducer producer = session.createProducer(queue);
1:         producer.send(session.createTextMessage("Hello"));
1:         producer.send(session.createTextMessage("Hello2"));
1:         producer.send(session.createTextMessage("Hello3"));
1: 
1:         // Consume the message...
1:         MessageConsumer consumer = session.createConsumer(queue);
1:         Message msg = consumer.receive(1000);
1:         assertNotNull(msg);
1:         msg = consumer.receive(1000);
1:         assertNotNull(msg);        
1:         msg = consumer.receive(1000);
1:         assertNotNull(msg);
1:         msg.acknowledge();
1: 
1:         // Reset the session.
1:         session.close();
1:         session = connection.createSession(false, Session.CLIENT_ACKNOWLEDGE);
1: 
1:         // Attempt to Consume the message...
1:         consumer = session.createConsumer(queue);
1:         msg = consumer.receive(1000);
1:         assertNull(msg);
1: 
1:         session.close();
1:     }
1:     
1:     /**
1:      * Tests if unacknowledged messages are being re-delivered when the consumer connects again.
1:      * 
1:      * @throws JMSException
1:      */
1:     public void testUnAckedMessageAreNotConsumedOnSessionClose() throws JMSException {
1:         connection.start();
1:         Session session = connection.createSession(false, Session.CLIENT_ACKNOWLEDGE);
0:         Queue queue = session.createQueue("test");
1:         MessageProducer producer = session.createProducer(queue);
1:         producer.send(session.createTextMessage("Hello"));
1: 
1:         // Consume the message...
1:         MessageConsumer consumer = session.createConsumer(queue);
1:         Message msg = consumer.receive(1000);
1:         assertNotNull(msg);        
1:         // Don't ack the message.
1:         
1:         // Reset the session.  This should cause the unacknowledged message to be re-delivered.
1:         session.close();
1:         session = connection.createSession(false, Session.CLIENT_ACKNOWLEDGE);
1:                 
1:         // Attempt to Consume the message...
1:         consumer = session.createConsumer(queue);
1:         msg = consumer.receive(2000);
1:         assertNotNull(msg);        
1:         msg.acknowledge();
1:         
1:         session.close();
1:     }
1: }
author:James Strachan
-------------------------------------------------------------------------------
commit:4e21e15
/////////////////////////////////////////////////////////////////////////
1:         Queue queue = session.createQueue(getQueueName());
/////////////////////////////////////////////////////////////////////////
1:         Queue queue = session.createQueue(getQueueName());
/////////////////////////////////////////////////////////////////////////
1:         Queue queue = session.createQueue(getQueueName());
/////////////////////////////////////////////////////////////////////////
0: 
1:     protected String getQueueName() {
0:         return getClass().getName() + "." + getName();
0:     }
0: 
============================================================================