1:5be5a62: /**
1:57b4941:  * Licensed to the Apache Software Foundation (ASF) under one or more
1:57b4941:  * contributor license agreements.  See the NOTICE file distributed with
1:57b4941:  * this work for additional information regarding copyright ownership.
1:57b4941:  * The ASF licenses this file to You under the Apache License, Version 2.0
1:57b4941:  * (the "License"); you may not use this file except in compliance with
1:57b4941:  * the License.  You may obtain a copy of the License at
1:33b73ac:  *
1:230a86c:  *      http://www.apache.org/licenses/LICENSE-2.0
4:5be5a62:  *
1:d29ca2a:  * Unless required by applicable law or agreed to in writing, software
1:5be5a62:  * distributed under the License is distributed on an "AS IS" BASIS,
1:5be5a62:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:5be5a62:  * See the License for the specific language governing permissions and
1:5be5a62:  * limitations under the License.
1:5be5a62:  */
1:5be5a62: 
1:d29ca2a: package org.apache.activemq.openwire.v1;
1:446629b: 
1:4821b9d: import java.io.DataInput;
1:4821b9d: import java.io.DataOutput;
1:d29ca2a: import java.io.IOException;
23:d29ca2a: 
1:74a7a8b: import org.apache.activemq.command.DataStructure;
1:74a7a8b: import org.apache.activemq.command.Message;
1:74a7a8b: import org.apache.activemq.openwire.BooleanStream;
1:74a7a8b: import org.apache.activemq.openwire.OpenWireFormat;
1:d29ca2a: 
1:90e21b4: /**
1:74a7a8b:  * Marshalling code for Open Wire Format for MessageMarshaller NOTE!: This file
1:74a7a8b:  * is auto generated - do not modify! if you need to make a change, please see
1:74a7a8b:  * the modify the groovy scripts in the under src/gram/script and then use maven
1:74a7a8b:  * openwire:generate to regenerate this file.
1:b0c2a40:  * 
1:74a7a8b:  * 
2:d29ca2a:  */
1:d29ca2a: public abstract class MessageMarshaller extends BaseCommandMarshaller {
1:d29ca2a: 
3:d29ca2a:     /**
1:d29ca2a:      * Un-marshal an object instance from the data input stream
1:74a7a8b:      * 
1:d29ca2a:      * @param o the object to un-marshal
1:d29ca2a:      * @param dataIn the data input stream to build the object from
1:d29ca2a:      * @throws IOException
1:d29ca2a:      */
1:4821b9d:     public void tightUnmarshal(OpenWireFormat wireFormat, Object o, DataInput dataIn, BooleanStream bs) throws IOException {
1:33b73ac:         super.tightUnmarshal(wireFormat, o, dataIn, bs);
1:d29ca2a: 
1:d29ca2a:         Message info = (Message)o;
1:d29ca2a: 
1:d29ca2a:         info.beforeUnmarshall(wireFormat);
1:74a7a8b: 
1:74a7a8b:         info.setProducerId((org.apache.activemq.command.ProducerId)tightUnmarsalCachedObject(wireFormat, dataIn, bs));
1:74a7a8b:         info.setDestination((org.apache.activemq.command.ActiveMQDestination)tightUnmarsalCachedObject(wireFormat, dataIn, bs));
1:74a7a8b:         info.setTransactionId((org.apache.activemq.command.TransactionId)tightUnmarsalCachedObject(wireFormat, dataIn, bs));
1:74a7a8b:         info.setOriginalDestination((org.apache.activemq.command.ActiveMQDestination)tightUnmarsalCachedObject(wireFormat, dataIn, bs));
1:74a7a8b:         info.setMessageId((org.apache.activemq.command.MessageId)tightUnmarsalNestedObject(wireFormat, dataIn, bs));
1:74a7a8b:         info.setOriginalTransactionId((org.apache.activemq.command.TransactionId)tightUnmarsalCachedObject(wireFormat, dataIn, bs));
1:33b73ac:         info.setGroupID(tightUnmarshalString(dataIn, bs));
1:d29ca2a:         info.setGroupSequence(dataIn.readInt());
1:33b73ac:         info.setCorrelationId(tightUnmarshalString(dataIn, bs));
1:d29ca2a:         info.setPersistent(bs.readBoolean());
1:33b73ac:         info.setExpiration(tightUnmarshalLong(wireFormat, dataIn, bs));
1:d29ca2a:         info.setPriority(dataIn.readByte());
1:74a7a8b:         info.setReplyTo((org.apache.activemq.command.ActiveMQDestination)tightUnmarsalNestedObject(wireFormat, dataIn, bs));
1:33b73ac:         info.setTimestamp(tightUnmarshalLong(wireFormat, dataIn, bs));
1:33b73ac:         info.setType(tightUnmarshalString(dataIn, bs));
1:33b73ac:         info.setContent(tightUnmarshalByteSequence(dataIn, bs));
1:33b73ac:         info.setMarshalledProperties(tightUnmarshalByteSequence(dataIn, bs));
1:74a7a8b:         info.setDataStructure((org.apache.activemq.command.DataStructure)tightUnmarsalNestedObject(wireFormat, dataIn, bs));
1:74a7a8b:         info.setTargetConsumerId((org.apache.activemq.command.ConsumerId)tightUnmarsalCachedObject(wireFormat, dataIn, bs));
1:d29ca2a:         info.setCompressed(bs.readBoolean());
1:d29ca2a:         info.setRedeliveryCounter(dataIn.readInt());
1:74a7a8b: 
1:79d2868:         if (bs.readBoolean()) {
1:d29ca2a:             short size = dataIn.readShort();
1:446629b:             org.apache.activemq.command.BrokerId value[] = new org.apache.activemq.command.BrokerId[size];
1:74a7a8b:             for (int i = 0; i < size; i++) {
1:74a7a8b:                 value[i] = (org.apache.activemq.command.BrokerId)tightUnmarsalNestedObject(wireFormat, dataIn, bs);
6:d29ca2a:             }
1:d29ca2a:             info.setBrokerPath(value);
1:74a7a8b:         } else {
1:d29ca2a:             info.setBrokerPath(null);
1:d29ca2a:         }
1:33b73ac:         info.setArrival(tightUnmarshalLong(wireFormat, dataIn, bs));
1:33b73ac:         info.setUserID(tightUnmarshalString(dataIn, bs));
1:d29ca2a:         info.setRecievedByDFBridge(bs.readBoolean());
1:d29ca2a: 
1:d29ca2a:         info.afterUnmarshall(wireFormat);
1:d29ca2a: 
1:d29ca2a:     }
1:d29ca2a: 
1:d29ca2a:     /**
1:d29ca2a:      * Write the booleans that this object uses to a BooleanStream
1:d29ca2a:      */
1:33b73ac:     public int tightMarshal1(OpenWireFormat wireFormat, Object o, BooleanStream bs) throws IOException {
1:d29ca2a: 
1:d29ca2a:         Message info = (Message)o;
1:d29ca2a: 
1:d29ca2a:         info.beforeMarshall(wireFormat);
1:d29ca2a: 
1:33b73ac:         int rc = super.tightMarshal1(wireFormat, o, bs);
1:cd0fb61:         rc += tightMarshalCachedObject1(wireFormat, (DataStructure)info.getProducerId(), bs);
1:cd0fb61:         rc += tightMarshalCachedObject1(wireFormat, (DataStructure)info.getDestination(), bs);
1:cd0fb61:         rc += tightMarshalCachedObject1(wireFormat, (DataStructure)info.getTransactionId(), bs);
1:cd0fb61:         rc += tightMarshalCachedObject1(wireFormat, (DataStructure)info.getOriginalDestination(), bs);
1:cd0fb61:         rc += tightMarshalNestedObject1(wireFormat, (DataStructure)info.getMessageId(), bs);
1:cd0fb61:         rc += tightMarshalCachedObject1(wireFormat, (DataStructure)info.getOriginalTransactionId(), bs);
1:cd0fb61:         rc += tightMarshalString1(info.getGroupID(), bs);
1:33b73ac:         rc += tightMarshalString1(info.getCorrelationId(), bs);
1:cd0fb61:         bs.writeBoolean(info.isPersistent());
1:74a7a8b:         rc += tightMarshalLong1(wireFormat, info.getExpiration(), bs);
1:446629b:         rc += tightMarshalNestedObject1(wireFormat, (DataStructure)info.getReplyTo(), bs);
1:74a7a8b:         rc += tightMarshalLong1(wireFormat, info.getTimestamp(), bs);
1:cd0fb61:         rc += tightMarshalString1(info.getType(), bs);
1:cd0fb61:         rc += tightMarshalByteSequence1(info.getContent(), bs);
1:cd0fb61:         rc += tightMarshalByteSequence1(info.getMarshalledProperties(), bs);
1:cd0fb61:         rc += tightMarshalNestedObject1(wireFormat, (DataStructure)info.getDataStructure(), bs);
1:cd0fb61:         rc += tightMarshalCachedObject1(wireFormat, (DataStructure)info.getTargetConsumerId(), bs);
1:cd0fb61:         bs.writeBoolean(info.isCompressed());
1:33b73ac:         rc += tightMarshalObjectArray1(wireFormat, info.getBrokerPath(), bs);
1:74a7a8b:         rc += tightMarshalLong1(wireFormat, info.getArrival(), bs);
1:cd0fb61:         rc += tightMarshalString1(info.getUserID(), bs);
1:cd0fb61:         bs.writeBoolean(info.isRecievedByDFBridge());
1:d29ca2a: 
1:33b73ac:         return rc + 9;
1:d29ca2a:     }
1:d29ca2a: 
1:d29ca2a:     /**
1:d29ca2a:      * Write a object instance to data output stream
1:74a7a8b:      * 
1:d29ca2a:      * @param o the instance to be marshaled
1:d29ca2a:      * @param dataOut the output stream
1:d29ca2a:      * @throws IOException thrown if an error occurs
1:d29ca2a:      */
1:4821b9d:     public void tightMarshal2(OpenWireFormat wireFormat, Object o, DataOutput dataOut, BooleanStream bs) throws IOException {
1:33b73ac:         super.tightMarshal2(wireFormat, o, dataOut, bs);
1:d29ca2a: 
1:d29ca2a:         Message info = (Message)o;
1:cd0fb61:         tightMarshalCachedObject2(wireFormat, (DataStructure)info.getProducerId(), dataOut, bs);
1:cd0fb61:         tightMarshalCachedObject2(wireFormat, (DataStructure)info.getDestination(), dataOut, bs);
1:cd0fb61:         tightMarshalCachedObject2(wireFormat, (DataStructure)info.getTransactionId(), dataOut, bs);
1:cd0fb61:         tightMarshalCachedObject2(wireFormat, (DataStructure)info.getOriginalDestination(), dataOut, bs);
1:cd0fb61:         tightMarshalNestedObject2(wireFormat, (DataStructure)info.getMessageId(), dataOut, bs);
1:cd0fb61:         tightMarshalCachedObject2(wireFormat, (DataStructure)info.getOriginalTransactionId(), dataOut, bs);
1:cd0fb61:         tightMarshalString2(info.getGroupID(), dataOut, bs);
1:cd0fb61:         dataOut.writeInt(info.getGroupSequence());
1:cd0fb61:         tightMarshalString2(info.getCorrelationId(), dataOut, bs);
1:cd0fb61:         bs.readBoolean();
1:cd0fb61:         tightMarshalLong2(wireFormat, info.getExpiration(), dataOut, bs);
1:cd0fb61:         dataOut.writeByte(info.getPriority());
1:cd0fb61:         tightMarshalNestedObject2(wireFormat, (DataStructure)info.getReplyTo(), dataOut, bs);
1:cd0fb61:         tightMarshalLong2(wireFormat, info.getTimestamp(), dataOut, bs);
1:cd0fb61:         tightMarshalString2(info.getType(), dataOut, bs);
1:cd0fb61:         tightMarshalByteSequence2(info.getContent(), dataOut, bs);
1:cd0fb61:         tightMarshalByteSequence2(info.getMarshalledProperties(), dataOut, bs);
1:cd0fb61:         tightMarshalNestedObject2(wireFormat, (DataStructure)info.getDataStructure(), dataOut, bs);
1:cd0fb61:         tightMarshalCachedObject2(wireFormat, (DataStructure)info.getTargetConsumerId(), dataOut, bs);
1:cd0fb61:         bs.readBoolean();
1:cd0fb61:         dataOut.writeInt(info.getRedeliveryCounter());
1:cd0fb61:         tightMarshalObjectArray2(wireFormat, info.getBrokerPath(), dataOut, bs);
1:cd0fb61:         tightMarshalLong2(wireFormat, info.getArrival(), dataOut, bs);
1:cd0fb61:         tightMarshalString2(info.getUserID(), dataOut, bs);
1:cd0fb61:         bs.readBoolean();
1:d29ca2a: 
1:d29ca2a:         info.afterMarshall(wireFormat);
1:33b73ac: 
1:33b73ac:     }
1:33b73ac: 
1:33b73ac:     /**
1:33b73ac:      * Un-marshal an object instance from the data input stream
1:74a7a8b:      * 
1:33b73ac:      * @param o the object to un-marshal
1:33b73ac:      * @param dataIn the data input stream to build the object from
1:33b73ac:      * @throws IOException
1:33b73ac:      */
1:4821b9d:     public void looseUnmarshal(OpenWireFormat wireFormat, Object o, DataInput dataIn) throws IOException {
1:33b73ac:         super.looseUnmarshal(wireFormat, o, dataIn);
1:33b73ac: 
1:33b73ac:         Message info = (Message)o;
1:33b73ac: 
1:33b73ac:         info.beforeUnmarshall(wireFormat);
1:33b73ac: 
1:74a7a8b:         info.setProducerId((org.apache.activemq.command.ProducerId)looseUnmarsalCachedObject(wireFormat, dataIn));
1:74a7a8b:         info.setDestination((org.apache.activemq.command.ActiveMQDestination)looseUnmarsalCachedObject(wireFormat, dataIn));
1:74a7a8b:         info.setTransactionId((org.apache.activemq.command.TransactionId)looseUnmarsalCachedObject(wireFormat, dataIn));
1:74a7a8b:         info.setOriginalDestination((org.apache.activemq.command.ActiveMQDestination)looseUnmarsalCachedObject(wireFormat, dataIn));
1:74a7a8b:         info.setMessageId((org.apache.activemq.command.MessageId)looseUnmarsalNestedObject(wireFormat, dataIn));
1:74a7a8b:         info.setOriginalTransactionId((org.apache.activemq.command.TransactionId)looseUnmarsalCachedObject(wireFormat, dataIn));
1:33b73ac:         info.setGroupID(looseUnmarshalString(dataIn));
1:33b73ac:         info.setGroupSequence(dataIn.readInt());
1:33b73ac:         info.setCorrelationId(looseUnmarshalString(dataIn));
1:33b73ac:         info.setPersistent(dataIn.readBoolean());
1:33b73ac:         info.setExpiration(looseUnmarshalLong(wireFormat, dataIn));
1:33b73ac:         info.setPriority(dataIn.readByte());
1:74a7a8b:         info.setReplyTo((org.apache.activemq.command.ActiveMQDestination)looseUnmarsalNestedObject(wireFormat, dataIn));
1:33b73ac:         info.setTimestamp(looseUnmarshalLong(wireFormat, dataIn));
1:33b73ac:         info.setType(looseUnmarshalString(dataIn));
1:33b73ac:         info.setContent(looseUnmarshalByteSequence(dataIn));
1:33b73ac:         info.setMarshalledProperties(looseUnmarshalByteSequence(dataIn));
1:74a7a8b:         info.setDataStructure((org.apache.activemq.command.DataStructure)looseUnmarsalNestedObject(wireFormat, dataIn));
1:74a7a8b:         info.setTargetConsumerId((org.apache.activemq.command.ConsumerId)looseUnmarsalCachedObject(wireFormat, dataIn));
1:33b73ac:         info.setCompressed(dataIn.readBoolean());
1:33b73ac:         info.setRedeliveryCounter(dataIn.readInt());
1:33b73ac: 
1:33b73ac:         if (dataIn.readBoolean()) {
1:33b73ac:             short size = dataIn.readShort();
1:446629b:             org.apache.activemq.command.BrokerId value[] = new org.apache.activemq.command.BrokerId[size];
1:74a7a8b:             for (int i = 0; i < size; i++) {
1:74a7a8b:                 value[i] = (org.apache.activemq.command.BrokerId)looseUnmarsalNestedObject(wireFormat, dataIn);
1:33b73ac:             }
1:33b73ac:             info.setBrokerPath(value);
1:74a7a8b:         } else {
1:33b73ac:             info.setBrokerPath(null);
1:33b73ac:         }
1:33b73ac:         info.setArrival(looseUnmarshalLong(wireFormat, dataIn));
1:33b73ac:         info.setUserID(looseUnmarshalString(dataIn));
1:33b73ac:         info.setRecievedByDFBridge(dataIn.readBoolean());
1:33b73ac: 
1:33b73ac:         info.afterUnmarshall(wireFormat);
1:33b73ac: 
1:33b73ac:     }
1:33b73ac: 
1:33b73ac:     /**
1:33b73ac:      * Write the booleans that this object uses to a BooleanStream
1:33b73ac:      */
1:4821b9d:     public void looseMarshal(OpenWireFormat wireFormat, Object o, DataOutput dataOut) throws IOException {
1:33b73ac: 
1:33b73ac:         Message info = (Message)o;
1:33b73ac: 
1:33b73ac:         info.beforeMarshall(wireFormat);
1:33b73ac: 
1:33b73ac:         super.looseMarshal(wireFormat, o, dataOut);
1:cd0fb61:         looseMarshalCachedObject(wireFormat, (DataStructure)info.getProducerId(), dataOut);
1:cd0fb61:         looseMarshalCachedObject(wireFormat, (DataStructure)info.getDestination(), dataOut);
1:cd0fb61:         looseMarshalCachedObject(wireFormat, (DataStructure)info.getTransactionId(), dataOut);
1:cd0fb61:         looseMarshalCachedObject(wireFormat, (DataStructure)info.getOriginalDestination(), dataOut);
1:cd0fb61:         looseMarshalNestedObject(wireFormat, (DataStructure)info.getMessageId(), dataOut);
1:cd0fb61:         looseMarshalCachedObject(wireFormat, (DataStructure)info.getOriginalTransactionId(), dataOut);
1:cd0fb61:         looseMarshalString(info.getGroupID(), dataOut);
1:cd0fb61:         dataOut.writeInt(info.getGroupSequence());
1:cd0fb61:         looseMarshalString(info.getCorrelationId(), dataOut);
1:cd0fb61:         dataOut.writeBoolean(info.isPersistent());
1:cd0fb61:         looseMarshalLong(wireFormat, info.getExpiration(), dataOut);
1:cd0fb61:         dataOut.writeByte(info.getPriority());
1:cd0fb61:         looseMarshalNestedObject(wireFormat, (DataStructure)info.getReplyTo(), dataOut);
1:cd0fb61:         looseMarshalLong(wireFormat, info.getTimestamp(), dataOut);
1:cd0fb61:         looseMarshalString(info.getType(), dataOut);
1:cd0fb61:         looseMarshalByteSequence(wireFormat, info.getContent(), dataOut);
1:cd0fb61:         looseMarshalByteSequence(wireFormat, info.getMarshalledProperties(), dataOut);
1:cd0fb61:         looseMarshalNestedObject(wireFormat, (DataStructure)info.getDataStructure(), dataOut);
1:cd0fb61:         looseMarshalCachedObject(wireFormat, (DataStructure)info.getTargetConsumerId(), dataOut);
1:cd0fb61:         dataOut.writeBoolean(info.isCompressed());
1:cd0fb61:         dataOut.writeInt(info.getRedeliveryCounter());
1:cd0fb61:         looseMarshalObjectArray(wireFormat, info.getBrokerPath(), dataOut);
1:cd0fb61:         looseMarshalLong(wireFormat, info.getArrival(), dataOut);
1:cd0fb61:         looseMarshalString(info.getUserID(), dataOut);
1:cd0fb61:         dataOut.writeBoolean(info.isRecievedByDFBridge());
1:33b73ac: 
1:33b73ac:     }
1:d29ca2a: }
============================================================================
author:Hadrian Zbarcea
-------------------------------------------------------------------------------
commit:d54d046
author:Hiram R. Chirino
-------------------------------------------------------------------------------
commit:9a8f6e4
commit:b0c2a40
/////////////////////////////////////////////////////////////////////////
1:  * 
commit:74a7a8b
/////////////////////////////////////////////////////////////////////////
1: import org.apache.activemq.command.DataStructure;
1: import org.apache.activemq.command.Message;
1: import org.apache.activemq.openwire.BooleanStream;
1: import org.apache.activemq.openwire.OpenWireFormat;
1:  * Marshalling code for Open Wire Format for MessageMarshaller NOTE!: This file
1:  * is auto generated - do not modify! if you need to make a change, please see
1:  * the modify the groovy scripts in the under src/gram/script and then use maven
1:  * openwire:generate to regenerate this file.
1:  * 
1:      * 
/////////////////////////////////////////////////////////////////////////
1: 
1:         info.setProducerId((org.apache.activemq.command.ProducerId)tightUnmarsalCachedObject(wireFormat, dataIn, bs));
1:         info.setDestination((org.apache.activemq.command.ActiveMQDestination)tightUnmarsalCachedObject(wireFormat, dataIn, bs));
1:         info.setTransactionId((org.apache.activemq.command.TransactionId)tightUnmarsalCachedObject(wireFormat, dataIn, bs));
1:         info.setOriginalDestination((org.apache.activemq.command.ActiveMQDestination)tightUnmarsalCachedObject(wireFormat, dataIn, bs));
1:         info.setMessageId((org.apache.activemq.command.MessageId)tightUnmarsalNestedObject(wireFormat, dataIn, bs));
1:         info.setOriginalTransactionId((org.apache.activemq.command.TransactionId)tightUnmarsalCachedObject(wireFormat, dataIn, bs));
1:         info.setReplyTo((org.apache.activemq.command.ActiveMQDestination)tightUnmarsalNestedObject(wireFormat, dataIn, bs));
1:         info.setDataStructure((org.apache.activemq.command.DataStructure)tightUnmarsalNestedObject(wireFormat, dataIn, bs));
1:         info.setTargetConsumerId((org.apache.activemq.command.ConsumerId)tightUnmarsalCachedObject(wireFormat, dataIn, bs));
1:             for (int i = 0; i < size; i++) {
1:                 value[i] = (org.apache.activemq.command.BrokerId)tightUnmarsalNestedObject(wireFormat, dataIn, bs);
1:         } else {
/////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////
1:         rc += tightMarshalLong1(wireFormat, info.getExpiration(), bs);
1:         rc += tightMarshalLong1(wireFormat, info.getTimestamp(), bs);
/////////////////////////////////////////////////////////////////////////
1:         rc += tightMarshalLong1(wireFormat, info.getArrival(), bs);
/////////////////////////////////////////////////////////////////////////
1:      * 
/////////////////////////////////////////////////////////////////////////
1:      * 
/////////////////////////////////////////////////////////////////////////
1: 
1:         info.setProducerId((org.apache.activemq.command.ProducerId)looseUnmarsalCachedObject(wireFormat, dataIn));
1:         info.setDestination((org.apache.activemq.command.ActiveMQDestination)looseUnmarsalCachedObject(wireFormat, dataIn));
1:         info.setTransactionId((org.apache.activemq.command.TransactionId)looseUnmarsalCachedObject(wireFormat, dataIn));
1:         info.setOriginalDestination((org.apache.activemq.command.ActiveMQDestination)looseUnmarsalCachedObject(wireFormat, dataIn));
1:         info.setMessageId((org.apache.activemq.command.MessageId)looseUnmarsalNestedObject(wireFormat, dataIn));
1:         info.setOriginalTransactionId((org.apache.activemq.command.TransactionId)looseUnmarsalCachedObject(wireFormat, dataIn));
1:         info.setReplyTo((org.apache.activemq.command.ActiveMQDestination)looseUnmarsalNestedObject(wireFormat, dataIn));
1:         info.setDataStructure((org.apache.activemq.command.DataStructure)looseUnmarsalNestedObject(wireFormat, dataIn));
1:         info.setTargetConsumerId((org.apache.activemq.command.ConsumerId)looseUnmarsalCachedObject(wireFormat, dataIn));
1:             for (int i = 0; i < size; i++) {
1:                 value[i] = (org.apache.activemq.command.BrokerId)looseUnmarsalNestedObject(wireFormat, dataIn);
1:         } else {
/////////////////////////////////////////////////////////////////////////
commit:230a86c
/////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////
1:  *      http://www.apache.org/licenses/LICENSE-2.0
commit:57b4941
/////////////////////////////////////////////////////////////////////////
1:  * Licensed to the Apache Software Foundation (ASF) under one or more
1:  * contributor license agreements.  See the NOTICE file distributed with
1:  * this work for additional information regarding copyright ownership.
1:  * The ASF licenses this file to You under the Apache License, Version 2.0
1:  * (the "License"); you may not use this file except in compliance with
1:  * the License.  You may obtain a copy of the License at
commit:cd0fb61
/////////////////////////////////////////////////////////////////////////
1:         rc += tightMarshalCachedObject1(wireFormat, (DataStructure)info.getProducerId(), bs);
1:         rc += tightMarshalCachedObject1(wireFormat, (DataStructure)info.getDestination(), bs);
1:         rc += tightMarshalCachedObject1(wireFormat, (DataStructure)info.getTransactionId(), bs);
1:         rc += tightMarshalCachedObject1(wireFormat, (DataStructure)info.getOriginalDestination(), bs);
1:         rc += tightMarshalNestedObject1(wireFormat, (DataStructure)info.getMessageId(), bs);
1:         rc += tightMarshalCachedObject1(wireFormat, (DataStructure)info.getOriginalTransactionId(), bs);
1:         rc += tightMarshalString1(info.getGroupID(), bs);
1:         bs.writeBoolean(info.isPersistent());
0:         rc+=tightMarshalLong1(wireFormat, info.getExpiration(), bs);
0:         rc+=tightMarshalLong1(wireFormat, info.getTimestamp(), bs);
1:         rc += tightMarshalString1(info.getType(), bs);
1:         rc += tightMarshalByteSequence1(info.getContent(), bs);
1:         rc += tightMarshalByteSequence1(info.getMarshalledProperties(), bs);
1:         rc += tightMarshalNestedObject1(wireFormat, (DataStructure)info.getDataStructure(), bs);
1:         rc += tightMarshalCachedObject1(wireFormat, (DataStructure)info.getTargetConsumerId(), bs);
1:         bs.writeBoolean(info.isCompressed());
0:         rc+=tightMarshalLong1(wireFormat, info.getArrival(), bs);
1:         rc += tightMarshalString1(info.getUserID(), bs);
1:         bs.writeBoolean(info.isRecievedByDFBridge());
/////////////////////////////////////////////////////////////////////////
1:         tightMarshalCachedObject2(wireFormat, (DataStructure)info.getProducerId(), dataOut, bs);
1:         tightMarshalCachedObject2(wireFormat, (DataStructure)info.getDestination(), dataOut, bs);
1:         tightMarshalCachedObject2(wireFormat, (DataStructure)info.getTransactionId(), dataOut, bs);
1:         tightMarshalCachedObject2(wireFormat, (DataStructure)info.getOriginalDestination(), dataOut, bs);
1:         tightMarshalNestedObject2(wireFormat, (DataStructure)info.getMessageId(), dataOut, bs);
1:         tightMarshalCachedObject2(wireFormat, (DataStructure)info.getOriginalTransactionId(), dataOut, bs);
1:         tightMarshalString2(info.getGroupID(), dataOut, bs);
1:         dataOut.writeInt(info.getGroupSequence());
1:         tightMarshalString2(info.getCorrelationId(), dataOut, bs);
1:         bs.readBoolean();
1:         tightMarshalLong2(wireFormat, info.getExpiration(), dataOut, bs);
1:         dataOut.writeByte(info.getPriority());
1:         tightMarshalNestedObject2(wireFormat, (DataStructure)info.getReplyTo(), dataOut, bs);
1:         tightMarshalLong2(wireFormat, info.getTimestamp(), dataOut, bs);
1:         tightMarshalString2(info.getType(), dataOut, bs);
1:         tightMarshalByteSequence2(info.getContent(), dataOut, bs);
1:         tightMarshalByteSequence2(info.getMarshalledProperties(), dataOut, bs);
1:         tightMarshalNestedObject2(wireFormat, (DataStructure)info.getDataStructure(), dataOut, bs);
1:         tightMarshalCachedObject2(wireFormat, (DataStructure)info.getTargetConsumerId(), dataOut, bs);
1:         bs.readBoolean();
1:         dataOut.writeInt(info.getRedeliveryCounter());
1:         tightMarshalObjectArray2(wireFormat, info.getBrokerPath(), dataOut, bs);
1:         tightMarshalLong2(wireFormat, info.getArrival(), dataOut, bs);
1:         tightMarshalString2(info.getUserID(), dataOut, bs);
1:         bs.readBoolean();
/////////////////////////////////////////////////////////////////////////
1:         looseMarshalCachedObject(wireFormat, (DataStructure)info.getProducerId(), dataOut);
1:         looseMarshalCachedObject(wireFormat, (DataStructure)info.getDestination(), dataOut);
1:         looseMarshalCachedObject(wireFormat, (DataStructure)info.getTransactionId(), dataOut);
1:         looseMarshalCachedObject(wireFormat, (DataStructure)info.getOriginalDestination(), dataOut);
1:         looseMarshalNestedObject(wireFormat, (DataStructure)info.getMessageId(), dataOut);
1:         looseMarshalCachedObject(wireFormat, (DataStructure)info.getOriginalTransactionId(), dataOut);
1:         looseMarshalString(info.getGroupID(), dataOut);
1:         dataOut.writeInt(info.getGroupSequence());
1:         looseMarshalString(info.getCorrelationId(), dataOut);
1:         dataOut.writeBoolean(info.isPersistent());
1:         looseMarshalLong(wireFormat, info.getExpiration(), dataOut);
1:         dataOut.writeByte(info.getPriority());
1:         looseMarshalNestedObject(wireFormat, (DataStructure)info.getReplyTo(), dataOut);
1:         looseMarshalLong(wireFormat, info.getTimestamp(), dataOut);
1:         looseMarshalString(info.getType(), dataOut);
1:         looseMarshalByteSequence(wireFormat, info.getContent(), dataOut);
1:         looseMarshalByteSequence(wireFormat, info.getMarshalledProperties(), dataOut);
1:         looseMarshalNestedObject(wireFormat, (DataStructure)info.getDataStructure(), dataOut);
1:         looseMarshalCachedObject(wireFormat, (DataStructure)info.getTargetConsumerId(), dataOut);
1:         dataOut.writeBoolean(info.isCompressed());
1:         dataOut.writeInt(info.getRedeliveryCounter());
1:         looseMarshalObjectArray(wireFormat, info.getBrokerPath(), dataOut);
1:         looseMarshalLong(wireFormat, info.getArrival(), dataOut);
1:         looseMarshalString(info.getUserID(), dataOut);
1:         dataOut.writeBoolean(info.isRecievedByDFBridge());
commit:446629b
/////////////////////////////////////////////////////////////////////////
1: 
/////////////////////////////////////////////////////////////////////////
0:         info.setProducerId((org.apache.activemq.command.ProducerId) tightUnmarsalCachedObject(wireFormat, dataIn, bs));
0:         info.setDestination((org.apache.activemq.command.ActiveMQDestination) tightUnmarsalCachedObject(wireFormat, dataIn, bs));
0:         info.setTransactionId((org.apache.activemq.command.TransactionId) tightUnmarsalCachedObject(wireFormat, dataIn, bs));
0:         info.setOriginalDestination((org.apache.activemq.command.ActiveMQDestination) tightUnmarsalCachedObject(wireFormat, dataIn, bs));
0:         info.setMessageId((org.apache.activemq.command.MessageId) tightUnmarsalNestedObject(wireFormat, dataIn, bs));
0:         info.setOriginalTransactionId((org.apache.activemq.command.TransactionId) tightUnmarsalCachedObject(wireFormat, dataIn, bs));
0:         info.setReplyTo((org.apache.activemq.command.ActiveMQDestination) tightUnmarsalNestedObject(wireFormat, dataIn, bs));
0:         info.setDataStructure((org.apache.activemq.command.DataStructure) tightUnmarsalNestedObject(wireFormat, dataIn, bs));
0:         info.setTargetConsumerId((org.apache.activemq.command.ConsumerId) tightUnmarsalCachedObject(wireFormat, dataIn, bs));
1:             org.apache.activemq.command.BrokerId value[] = new org.apache.activemq.command.BrokerId[size];
0:                 value[i] = (org.apache.activemq.command.BrokerId) tightUnmarsalNestedObject(wireFormat,dataIn, bs);
/////////////////////////////////////////////////////////////////////////
0:     rc += tightMarshalCachedObject1(wireFormat, (DataStructure)info.getProducerId(), bs);
0:     rc += tightMarshalCachedObject1(wireFormat, (DataStructure)info.getDestination(), bs);
0:     rc += tightMarshalCachedObject1(wireFormat, (DataStructure)info.getTransactionId(), bs);
0:     rc += tightMarshalCachedObject1(wireFormat, (DataStructure)info.getOriginalDestination(), bs);
0:     rc += tightMarshalNestedObject1(wireFormat, (DataStructure)info.getMessageId(), bs);
0:     rc += tightMarshalCachedObject1(wireFormat, (DataStructure)info.getOriginalTransactionId(), bs);
1:         rc += tightMarshalNestedObject1(wireFormat, (DataStructure)info.getReplyTo(), bs);
0:     rc += tightMarshalNestedObject1(wireFormat, (DataStructure)info.getDataStructure(), bs);
0:     rc += tightMarshalCachedObject1(wireFormat, (DataStructure)info.getTargetConsumerId(), bs);
/////////////////////////////////////////////////////////////////////////
0:     tightMarshalCachedObject2(wireFormat, (DataStructure)info.getProducerId(), dataOut, bs);
0:     tightMarshalCachedObject2(wireFormat, (DataStructure)info.getDestination(), dataOut, bs);
0:     tightMarshalCachedObject2(wireFormat, (DataStructure)info.getTransactionId(), dataOut, bs);
0:     tightMarshalCachedObject2(wireFormat, (DataStructure)info.getOriginalDestination(), dataOut, bs);
0:     tightMarshalNestedObject2(wireFormat, (DataStructure)info.getMessageId(), dataOut, bs);
0:     tightMarshalCachedObject2(wireFormat, (DataStructure)info.getOriginalTransactionId(), dataOut, bs);
0:     tightMarshalNestedObject2(wireFormat, (DataStructure)info.getReplyTo(), dataOut, bs);
0:     tightMarshalNestedObject2(wireFormat, (DataStructure)info.getDataStructure(), dataOut, bs);
0:     tightMarshalCachedObject2(wireFormat, (DataStructure)info.getTargetConsumerId(), dataOut, bs);
/////////////////////////////////////////////////////////////////////////
0:         info.setProducerId((org.apache.activemq.command.ProducerId) looseUnmarsalCachedObject(wireFormat, dataIn));
0:         info.setDestination((org.apache.activemq.command.ActiveMQDestination) looseUnmarsalCachedObject(wireFormat, dataIn));
0:         info.setTransactionId((org.apache.activemq.command.TransactionId) looseUnmarsalCachedObject(wireFormat, dataIn));
0:         info.setOriginalDestination((org.apache.activemq.command.ActiveMQDestination) looseUnmarsalCachedObject(wireFormat, dataIn));
0:         info.setMessageId((org.apache.activemq.command.MessageId) looseUnmarsalNestedObject(wireFormat, dataIn));
0:         info.setOriginalTransactionId((org.apache.activemq.command.TransactionId) looseUnmarsalCachedObject(wireFormat, dataIn));
0:         info.setReplyTo((org.apache.activemq.command.ActiveMQDestination) looseUnmarsalNestedObject(wireFormat, dataIn));
0:         info.setDataStructure((org.apache.activemq.command.DataStructure) looseUnmarsalNestedObject(wireFormat, dataIn));
0:         info.setTargetConsumerId((org.apache.activemq.command.ConsumerId) looseUnmarsalCachedObject(wireFormat, dataIn));
1:             org.apache.activemq.command.BrokerId value[] = new org.apache.activemq.command.BrokerId[size];
0:                 value[i] = (org.apache.activemq.command.BrokerId) looseUnmarsalNestedObject(wireFormat,dataIn);
/////////////////////////////////////////////////////////////////////////
0:     looseMarshalCachedObject(wireFormat, (DataStructure)info.getProducerId(), dataOut);
0:     looseMarshalCachedObject(wireFormat, (DataStructure)info.getDestination(), dataOut);
0:     looseMarshalCachedObject(wireFormat, (DataStructure)info.getTransactionId(), dataOut);
0:     looseMarshalCachedObject(wireFormat, (DataStructure)info.getOriginalDestination(), dataOut);
0:     looseMarshalNestedObject(wireFormat, (DataStructure)info.getMessageId(), dataOut);
0:     looseMarshalCachedObject(wireFormat, (DataStructure)info.getOriginalTransactionId(), dataOut);
0:     looseMarshalNestedObject(wireFormat, (DataStructure)info.getReplyTo(), dataOut);
0:     looseMarshalNestedObject(wireFormat, (DataStructure)info.getDataStructure(), dataOut);
0:     looseMarshalCachedObject(wireFormat, (DataStructure)info.getTargetConsumerId(), dataOut);
commit:33b73ac
/////////////////////////////////////////////////////////////////////////
0:     public void tightUnmarshal(OpenWireFormat wireFormat, Object o, DataInputStream dataIn, BooleanStream bs) throws IOException {
1:         super.tightUnmarshal(wireFormat, o, dataIn, bs);
0:         info.setProducerId((ProducerId) tightUnmarsalCachedObject(wireFormat, dataIn, bs));
0:         info.setDestination((ActiveMQDestination) tightUnmarsalCachedObject(wireFormat, dataIn, bs));
0:         info.setTransactionId((TransactionId) tightUnmarsalCachedObject(wireFormat, dataIn, bs));
0:         info.setOriginalDestination((ActiveMQDestination) tightUnmarsalCachedObject(wireFormat, dataIn, bs));
0:         info.setMessageId((MessageId) tightUnmarsalNestedObject(wireFormat, dataIn, bs));
0:         info.setOriginalTransactionId((TransactionId) tightUnmarsalCachedObject(wireFormat, dataIn, bs));
1:         info.setGroupID(tightUnmarshalString(dataIn, bs));
1:         info.setCorrelationId(tightUnmarshalString(dataIn, bs));
1:         info.setExpiration(tightUnmarshalLong(wireFormat, dataIn, bs));
0:         info.setReplyTo((ActiveMQDestination) tightUnmarsalNestedObject(wireFormat, dataIn, bs));
1:         info.setTimestamp(tightUnmarshalLong(wireFormat, dataIn, bs));
1:         info.setType(tightUnmarshalString(dataIn, bs));
1:         info.setContent(tightUnmarshalByteSequence(dataIn, bs));
1:         info.setMarshalledProperties(tightUnmarshalByteSequence(dataIn, bs));
0:         info.setDataStructure((DataStructure) tightUnmarsalNestedObject(wireFormat, dataIn, bs));
0:         info.setTargetConsumerId((ConsumerId) tightUnmarsalCachedObject(wireFormat, dataIn, bs));
/////////////////////////////////////////////////////////////////////////
0:                 value[i] = (BrokerId) tightUnmarsalNestedObject(wireFormat,dataIn, bs);
1:         info.setArrival(tightUnmarshalLong(wireFormat, dataIn, bs));
1:         info.setUserID(tightUnmarshalString(dataIn, bs));
/////////////////////////////////////////////////////////////////////////
1:     public int tightMarshal1(OpenWireFormat wireFormat, Object o, BooleanStream bs) throws IOException {
1:         int rc = super.tightMarshal1(wireFormat, o, bs);
0:     rc += tightMarshalCachedObject1(wireFormat, info.getProducerId(), bs);
0:     rc += tightMarshalCachedObject1(wireFormat, info.getDestination(), bs);
0:     rc += tightMarshalCachedObject1(wireFormat, info.getTransactionId(), bs);
0:     rc += tightMarshalCachedObject1(wireFormat, info.getOriginalDestination(), bs);
0:     rc += tightMarshalNestedObject1(wireFormat, info.getMessageId(), bs);
0:     rc += tightMarshalCachedObject1(wireFormat, info.getOriginalTransactionId(), bs);
0:     rc += tightMarshalString1(info.getGroupID(), bs);
1:         rc += tightMarshalString1(info.getCorrelationId(), bs);
0:     bs.writeBoolean(info.isPersistent());
0:     rc+=tightMarshalLong1(wireFormat, info.getExpiration(), bs);
0:         rc += tightMarshalNestedObject1(wireFormat, info.getReplyTo(), bs);
0:     rc+=tightMarshalLong1(wireFormat, info.getTimestamp(), bs);
0:     rc += tightMarshalString1(info.getType(), bs);
0:     rc += tightMarshalByteSequence1(info.getContent(), bs);
0:     rc += tightMarshalByteSequence1(info.getMarshalledProperties(), bs);
0:     rc += tightMarshalNestedObject1(wireFormat, info.getDataStructure(), bs);
0:     rc += tightMarshalCachedObject1(wireFormat, info.getTargetConsumerId(), bs);
0:     bs.writeBoolean(info.isCompressed());
1:         rc += tightMarshalObjectArray1(wireFormat, info.getBrokerPath(), bs);
0:     rc+=tightMarshalLong1(wireFormat, info.getArrival(), bs);
0:     rc += tightMarshalString1(info.getUserID(), bs);
0:     bs.writeBoolean(info.isRecievedByDFBridge());
1:         return rc + 9;
/////////////////////////////////////////////////////////////////////////
0:     public void tightMarshal2(OpenWireFormat wireFormat, Object o, DataOutputStream dataOut, BooleanStream bs) throws IOException {
1:         super.tightMarshal2(wireFormat, o, dataOut, bs);
0:     tightMarshalCachedObject2(wireFormat, info.getProducerId(), dataOut, bs);
0:     tightMarshalCachedObject2(wireFormat, info.getDestination(), dataOut, bs);
0:     tightMarshalCachedObject2(wireFormat, info.getTransactionId(), dataOut, bs);
0:     tightMarshalCachedObject2(wireFormat, info.getOriginalDestination(), dataOut, bs);
0:     tightMarshalNestedObject2(wireFormat, info.getMessageId(), dataOut, bs);
0:     tightMarshalCachedObject2(wireFormat, info.getOriginalTransactionId(), dataOut, bs);
0:     tightMarshalString2(info.getGroupID(), dataOut, bs);
0:     dataOut.writeInt(info.getGroupSequence());
0:     tightMarshalString2(info.getCorrelationId(), dataOut, bs);
0:     bs.readBoolean();
0:     tightMarshalLong2(wireFormat, info.getExpiration(), dataOut, bs);
0:     dataOut.writeByte(info.getPriority());
0:     tightMarshalNestedObject2(wireFormat, info.getReplyTo(), dataOut, bs);
0:     tightMarshalLong2(wireFormat, info.getTimestamp(), dataOut, bs);
0:     tightMarshalString2(info.getType(), dataOut, bs);
0:     tightMarshalByteSequence2(info.getContent(), dataOut, bs);
0:     tightMarshalByteSequence2(info.getMarshalledProperties(), dataOut, bs);
0:     tightMarshalNestedObject2(wireFormat, info.getDataStructure(), dataOut, bs);
0:     tightMarshalCachedObject2(wireFormat, info.getTargetConsumerId(), dataOut, bs);
0:     bs.readBoolean();
0:     dataOut.writeInt(info.getRedeliveryCounter());
0:     tightMarshalObjectArray2(wireFormat, info.getBrokerPath(), dataOut, bs);
0:     tightMarshalLong2(wireFormat, info.getArrival(), dataOut, bs);
0:     tightMarshalString2(info.getUserID(), dataOut, bs);
0:     bs.readBoolean();
1: 
1:     /**
1:      * Un-marshal an object instance from the data input stream
1:      *
1:      * @param o the object to un-marshal
1:      * @param dataIn the data input stream to build the object from
1:      * @throws IOException
1:      */
0:     public void looseUnmarshal(OpenWireFormat wireFormat, Object o, DataInputStream dataIn) throws IOException {
1:         super.looseUnmarshal(wireFormat, o, dataIn);
1: 
1:         Message info = (Message)o;
1: 
1:         info.beforeUnmarshall(wireFormat);
1:         
0:         info.setProducerId((ProducerId) looseUnmarsalCachedObject(wireFormat, dataIn));
0:         info.setDestination((ActiveMQDestination) looseUnmarsalCachedObject(wireFormat, dataIn));
0:         info.setTransactionId((TransactionId) looseUnmarsalCachedObject(wireFormat, dataIn));
0:         info.setOriginalDestination((ActiveMQDestination) looseUnmarsalCachedObject(wireFormat, dataIn));
0:         info.setMessageId((MessageId) looseUnmarsalNestedObject(wireFormat, dataIn));
0:         info.setOriginalTransactionId((TransactionId) looseUnmarsalCachedObject(wireFormat, dataIn));
1:         info.setGroupID(looseUnmarshalString(dataIn));
1:         info.setGroupSequence(dataIn.readInt());
1:         info.setCorrelationId(looseUnmarshalString(dataIn));
1:         info.setPersistent(dataIn.readBoolean());
1:         info.setExpiration(looseUnmarshalLong(wireFormat, dataIn));
1:         info.setPriority(dataIn.readByte());
0:         info.setReplyTo((ActiveMQDestination) looseUnmarsalNestedObject(wireFormat, dataIn));
1:         info.setTimestamp(looseUnmarshalLong(wireFormat, dataIn));
1:         info.setType(looseUnmarshalString(dataIn));
1:         info.setContent(looseUnmarshalByteSequence(dataIn));
1:         info.setMarshalledProperties(looseUnmarshalByteSequence(dataIn));
0:         info.setDataStructure((DataStructure) looseUnmarsalNestedObject(wireFormat, dataIn));
0:         info.setTargetConsumerId((ConsumerId) looseUnmarsalCachedObject(wireFormat, dataIn));
1:         info.setCompressed(dataIn.readBoolean());
1:         info.setRedeliveryCounter(dataIn.readInt());
1: 
1:         if (dataIn.readBoolean()) {
1:             short size = dataIn.readShort();
0:             BrokerId value[] = new BrokerId[size];
0:             for( int i=0; i < size; i++ ) {
0:                 value[i] = (BrokerId) looseUnmarsalNestedObject(wireFormat,dataIn);
1:             }
1:             info.setBrokerPath(value);
1:         }
0:         else {
1:             info.setBrokerPath(null);
1:         }
1:         info.setArrival(looseUnmarshalLong(wireFormat, dataIn));
1:         info.setUserID(looseUnmarshalString(dataIn));
1:         info.setRecievedByDFBridge(dataIn.readBoolean());
1: 
1:         info.afterUnmarshall(wireFormat);
1: 
1:     }
1: 
1: 
1:     /**
1:      * Write the booleans that this object uses to a BooleanStream
1:      */
0:     public void looseMarshal(OpenWireFormat wireFormat, Object o, DataOutputStream dataOut) throws IOException {
1: 
1:         Message info = (Message)o;
1: 
1:         info.beforeMarshall(wireFormat);
1: 
1:         super.looseMarshal(wireFormat, o, dataOut);
0:     looseMarshalCachedObject(wireFormat, info.getProducerId(), dataOut);
0:     looseMarshalCachedObject(wireFormat, info.getDestination(), dataOut);
0:     looseMarshalCachedObject(wireFormat, info.getTransactionId(), dataOut);
0:     looseMarshalCachedObject(wireFormat, info.getOriginalDestination(), dataOut);
0:     looseMarshalNestedObject(wireFormat, info.getMessageId(), dataOut);
0:     looseMarshalCachedObject(wireFormat, info.getOriginalTransactionId(), dataOut);
0:     looseMarshalString(info.getGroupID(), dataOut);
0:     dataOut.writeInt(info.getGroupSequence());
0:     looseMarshalString(info.getCorrelationId(), dataOut);
0:     dataOut.writeBoolean(info.isPersistent());
0:     looseMarshalLong(wireFormat, info.getExpiration(), dataOut);
0:     dataOut.writeByte(info.getPriority());
0:     looseMarshalNestedObject(wireFormat, info.getReplyTo(), dataOut);
0:     looseMarshalLong(wireFormat, info.getTimestamp(), dataOut);
0:     looseMarshalString(info.getType(), dataOut);
0:     looseMarshalByteSequence(wireFormat, info.getContent(), dataOut);
0:     looseMarshalByteSequence(wireFormat, info.getMarshalledProperties(), dataOut);
0:     looseMarshalNestedObject(wireFormat, info.getDataStructure(), dataOut);
0:     looseMarshalCachedObject(wireFormat, info.getTargetConsumerId(), dataOut);
0:     dataOut.writeBoolean(info.isCompressed());
0:     dataOut.writeInt(info.getRedeliveryCounter());
0:     looseMarshalObjectArray(wireFormat, info.getBrokerPath(), dataOut);
0:     looseMarshalLong(wireFormat, info.getArrival(), dataOut);
0:     looseMarshalString(info.getUserID(), dataOut);
0:     dataOut.writeBoolean(info.isRecievedByDFBridge());
1: 
1:     }
commit:5be5a62
/////////////////////////////////////////////////////////////////////////
1: /**
1:  *
0:  * Copyright 2005-2006 The Apache Software Foundation
1:  *
0:  * Licensed under the Apache License, Version 2.0 (the "License");
0:  * you may not use this file except in compliance with the License.
0:  * You may obtain a copy of the License at
1:  *
1:  *
1:  * distributed under the License is distributed on an "AS IS" BASIS,
1:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:  * See the License for the specific language governing permissions and
1:  * limitations under the License.
1:  */
1: 
commit:90e21b4
/////////////////////////////////////////////////////////////////////////
1: /** 
0:  * <a href="http://activemq.org">ActiveMQ: The Open Source Message Fabric</a> 
0:  * 
0:  * Copyright 2005 Hiram Chirino
0:  * Copyright 2005 Protique Ltd
0:  * 
0:  * Licensed under the Apache License, Version 2.0 (the "License"); 
0:  * you may not use this file except in compliance with the License. 
0:  * You may obtain a copy of the License at 
0:  * 
0:  * 
0:  * distributed under the License is distributed on an "AS IS" BASIS, 
0:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. 
0:  * See the License for the specific language governing permissions and 
0:  * limitations under the License. 
0:  * 
0:  **/
0: import org.apache.activemq.command.*;
commit:48b4869
/////////////////////////////////////////////////////////////////////////
0:  * Copyright 2005-2006 The Apache Software Foundation
commit:d29ca2a
/////////////////////////////////////////////////////////////////////////
1: /**
0:  *
0:  * Copyright 2004 The Apache Software Foundation
0:  *
0:  * Licensed under the Apache License, Version 2.0 (the "License");
0:  * you may not use this file except in compliance with the License.
0:  * You may obtain a copy of the License at
0:  *
0:  * http://www.apache.org/licenses/LICENSE-2.0
0:  *
1:  * Unless required by applicable law or agreed to in writing, software
0:  * distributed under the License is distributed on an "AS IS" BASIS,
0:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
0:  * See the License for the specific language governing permissions and
0:  * limitations under the License.
1:  */
1: package org.apache.activemq.openwire.v1;
1: 
0: import java.io.DataInputStream;
0: import java.io.DataOutputStream;
1: import java.io.IOException;
1: 
0: import org.apache.activemq.command.*;
0: import org.apache.activemq.openwire.*;
1: 
1: 
1: /**
0:  * Marshalling code for Open Wire Format for Message
0:  *
0:  *
0:  * NOTE!: This file is auto generated - do not modify!
0:  *        if you need to make a change, please see the modify the groovy scripts in the
0:  *        under src/gram/script and then use maven openwire:generate to regenerate 
0:  *        this file.
0:  *
0:  * @version $Revision$
1:  */
1: public abstract class MessageMarshaller extends BaseCommandMarshaller {
1: 
1:     /**
1:      * Un-marshal an object instance from the data input stream
0:      *
1:      * @param o the object to un-marshal
1:      * @param dataIn the data input stream to build the object from
1:      * @throws IOException
1:      */
0:     public void unmarshal(OpenWireFormat wireFormat, Object o, DataInputStream dataIn, BooleanStream bs) throws IOException {
0:         super.unmarshal(wireFormat, o, dataIn, bs);
1: 
1:         Message info = (Message)o;
1: 
1:         info.beforeUnmarshall(wireFormat);
1:         
0:         info.setProducerId((org.apache.activemq.command.ProducerId) unmarsalCachedObject(wireFormat, dataIn, bs));
0:         info.setDestination((org.apache.activemq.command.ActiveMQDestination) unmarsalCachedObject(wireFormat, dataIn, bs));
0:         info.setTransactionId((org.apache.activemq.command.TransactionId) unmarsalCachedObject(wireFormat, dataIn, bs));
0:         info.setOriginalDestination((org.apache.activemq.command.ActiveMQDestination) unmarsalCachedObject(wireFormat, dataIn, bs));
0:         info.setMessageId((org.apache.activemq.command.MessageId) unmarsalNestedObject(wireFormat, dataIn, bs));
0:         info.setOriginalTransactionId((org.apache.activemq.command.TransactionId) unmarsalCachedObject(wireFormat, dataIn, bs));
0:         info.setGroupID(readString(dataIn, bs));
1:         info.setGroupSequence(dataIn.readInt());
0:         info.setCorrelationId(readString(dataIn, bs));
1:         info.setPersistent(bs.readBoolean());
0:         info.setExpiration(unmarshalLong(wireFormat, dataIn, bs));
1:         info.setPriority(dataIn.readByte());
0:         info.setReplyTo((org.apache.activemq.command.ActiveMQDestination) unmarsalNestedObject(wireFormat, dataIn, bs));
0:         info.setTimestamp(unmarshalLong(wireFormat, dataIn, bs));
0:         info.setType(readString(dataIn, bs));
1:         
0:     		if( bs.readBoolean() ) {
0:         		int size = dataIn.readInt();
0:         		byte data[] = new byte[size];
0:         		dataIn.readFully(data);
0:         		info.setContent(new org.activeio.ByteSequence(data,0,size));
0:     		} else {
0:         		info.setContent(null);
1:     		}
1:     		
1:         
0:     		if( bs.readBoolean() ) {
0:         		int size = dataIn.readInt();
0:         		byte data[] = new byte[size];
0:         		dataIn.readFully(data);
0:         		info.setMarshalledProperties(new org.activeio.ByteSequence(data,0,size));
0:     		} else {
0:         		info.setMarshalledProperties(null);
1:     		}
1:     		
0:         info.setDataStructure((org.apache.activemq.command.DataStructure) unmarsalNestedObject(wireFormat, dataIn, bs));
0:         info.setTargetConsumerId((org.apache.activemq.command.ConsumerId) unmarsalCachedObject(wireFormat, dataIn, bs));
1:         info.setCompressed(bs.readBoolean());
1:         info.setRedeliveryCounter(dataIn.readInt());
1:         
0: 		        if( bs.readBoolean() ) {
1: 		            short size = dataIn.readShort();
0: 		            org.apache.activemq.command.BrokerId value[] = new org.apache.activemq.command.BrokerId[size];
0: 		            for( int i=0; i < size; i++ ) {
0: 		                value[i] = (org.apache.activemq.command.BrokerId)unmarsalNestedObject(wireFormat,dataIn, bs);
1: 		            }
1: 		            info.setBrokerPath(value);
0: 		        } else {
1: 		            info.setBrokerPath(null);
1: 		        }
1:         			
0:         info.setArrival(unmarshalLong(wireFormat, dataIn, bs));
0:         info.setUserID(readString(dataIn, bs));
1:         info.setRecievedByDFBridge(bs.readBoolean());
1: 
1:         info.afterUnmarshall(wireFormat);
1: 
1:     }
1: 
1: 
1:     /**
1:      * Write the booleans that this object uses to a BooleanStream
1:      */
0:     public int marshal1(OpenWireFormat wireFormat, Object o, BooleanStream bs) throws IOException {
1: 
1:         Message info = (Message)o;
1: 
1:         info.beforeMarshall(wireFormat);
1: 
0:         int rc = super.marshal1(wireFormat, o, bs);
0:         rc += marshal1CachedObject(wireFormat, info.getProducerId(), bs);
0:         rc += marshal1CachedObject(wireFormat, info.getDestination(), bs);
0:         rc += marshal1CachedObject(wireFormat, info.getTransactionId(), bs);
0:         rc += marshal1CachedObject(wireFormat, info.getOriginalDestination(), bs);
0:         rc += marshal1NestedObject(wireFormat, info.getMessageId(), bs);
0:         rc += marshal1CachedObject(wireFormat, info.getOriginalTransactionId(), bs);
0:         rc += writeString(info.getGroupID(), bs);
1:         
0:         rc += writeString(info.getCorrelationId(), bs);
0:         bs.writeBoolean(info.isPersistent());
0:         rc+=marshal1Long(wireFormat, info.getExpiration(), bs);
1:         
0:         rc += marshal1NestedObject(wireFormat, info.getReplyTo(), bs);
0:         rc+=marshal1Long(wireFormat, info.getTimestamp(), bs);
0:         rc += writeString(info.getType(), bs);
1:         
0: 		bs.writeBoolean(info.getContent()!=null);
0: 		rc += info.getContent()==null ? 0 : info.getContent().getLength()+4;
1: 		
1:         
0: 		bs.writeBoolean(info.getMarshalledProperties()!=null);
0: 		rc += info.getMarshalledProperties()==null ? 0 : info.getMarshalledProperties().getLength()+4;
1: 		
0:         rc += marshal1NestedObject(wireFormat, info.getDataStructure(), bs);
0:         rc += marshal1CachedObject(wireFormat, info.getTargetConsumerId(), bs);
0:         bs.writeBoolean(info.isCompressed());
1:         
0:         rc += marshalObjectArray(wireFormat, info.getBrokerPath(), bs);
0:         rc+=marshal1Long(wireFormat, info.getArrival(), bs);
0:         rc += writeString(info.getUserID(), bs);
0:         bs.writeBoolean(info.isRecievedByDFBridge());
1: 
0:         return rc+9;
1:     }
1: 
1:     /**
1:      * Write a object instance to data output stream
0:      *
1:      * @param o the instance to be marshaled
1:      * @param dataOut the output stream
1:      * @throws IOException thrown if an error occurs
1:      */
0:     public void marshal2(OpenWireFormat wireFormat, Object o, DataOutputStream dataOut, BooleanStream bs) throws IOException {
0:         super.marshal2(wireFormat, o, dataOut, bs);
1: 
1:         Message info = (Message)o;
0:         marshal2CachedObject(wireFormat, info.getProducerId(), dataOut, bs);
0:         marshal2CachedObject(wireFormat, info.getDestination(), dataOut, bs);
0:         marshal2CachedObject(wireFormat, info.getTransactionId(), dataOut, bs);
0:         marshal2CachedObject(wireFormat, info.getOriginalDestination(), dataOut, bs);
0:         marshal2NestedObject(wireFormat, info.getMessageId(), dataOut, bs);
0:         marshal2CachedObject(wireFormat, info.getOriginalTransactionId(), dataOut, bs);
0:         writeString(info.getGroupID(), dataOut, bs);
0:         dataOut.writeInt(info.getGroupSequence());
0:         writeString(info.getCorrelationId(), dataOut, bs);
0:         bs.readBoolean();
0:         marshal2Long(wireFormat, info.getExpiration(), dataOut, bs);
0:         dataOut.writeByte(info.getPriority());
0:         marshal2NestedObject(wireFormat, info.getReplyTo(), dataOut, bs);
0:         marshal2Long(wireFormat, info.getTimestamp(), dataOut, bs);
0:         writeString(info.getType(), dataOut, bs);
1:         
0: 		if(bs.readBoolean()) { 
0:              org.activeio.ByteSequence data = info.getContent();
0: 			dataOut.writeInt(data.getLength());
0: 			dataOut.write(data.getData(), data.getOffset(), data.getLength());
1: 		}
1: 		
1:         
0: 		if(bs.readBoolean()) { 
0:              org.activeio.ByteSequence data = info.getMarshalledProperties();
0: 			dataOut.writeInt(data.getLength());
0: 			dataOut.write(data.getData(), data.getOffset(), data.getLength());
1: 		}
1: 		
0:         marshal2NestedObject(wireFormat, info.getDataStructure(), dataOut, bs);
0:         marshal2CachedObject(wireFormat, info.getTargetConsumerId(), dataOut, bs);
0:         bs.readBoolean();
0:         dataOut.writeInt(info.getRedeliveryCounter());
0:         marshalObjectArray(wireFormat, info.getBrokerPath(), dataOut, bs);
0:         marshal2Long(wireFormat, info.getArrival(), dataOut, bs);
0:         writeString(info.getUserID(), dataOut, bs);
0:         bs.readBoolean();
1: 
1:         info.afterMarshall(wireFormat);
1: 
1:     }
1: }
author:Robert Davies
-------------------------------------------------------------------------------
commit:4821b9d
/////////////////////////////////////////////////////////////////////////
1: import java.io.DataInput;
1: import java.io.DataOutput;
/////////////////////////////////////////////////////////////////////////
1:     public void tightUnmarshal(OpenWireFormat wireFormat, Object o, DataInput dataIn, BooleanStream bs) throws IOException {
/////////////////////////////////////////////////////////////////////////
1:     public void tightMarshal2(OpenWireFormat wireFormat, Object o, DataOutput dataOut, BooleanStream bs) throws IOException {
/////////////////////////////////////////////////////////////////////////
1:     public void looseUnmarshal(OpenWireFormat wireFormat, Object o, DataInput dataIn) throws IOException {
/////////////////////////////////////////////////////////////////////////
1:     public void looseMarshal(OpenWireFormat wireFormat, Object o, DataOutput dataOut) throws IOException {
author:James Strachan
-------------------------------------------------------------------------------
commit:79d2868
/////////////////////////////////////////////////////////////////////////
0:  * Marshalling code for Open Wire Format for MessageMarshaller
/////////////////////////////////////////////////////////////////////////
0:         info.setProducerId((ProducerId) unmarsalCachedObject(wireFormat, dataIn, bs));
0:         info.setDestination((ActiveMQDestination) unmarsalCachedObject(wireFormat, dataIn, bs));
0:         info.setTransactionId((TransactionId) unmarsalCachedObject(wireFormat, dataIn, bs));
0:         info.setOriginalDestination((ActiveMQDestination) unmarsalCachedObject(wireFormat, dataIn, bs));
0:         info.setMessageId((MessageId) unmarsalNestedObject(wireFormat, dataIn, bs));
0:         info.setOriginalTransactionId((TransactionId) unmarsalCachedObject(wireFormat, dataIn, bs));
0:         info.setReplyTo((ActiveMQDestination) unmarsalNestedObject(wireFormat, dataIn, bs));
0:         if( bs.readBoolean() ) {
0:             int size = dataIn.readInt();
0:             byte data[] = new byte[size];
0:             dataIn.readFully(data);
0:             info.setContent(new org.activeio.ByteSequence(data,0,size));
0:             } else {
0:             info.setContent(null);
0:         }
0:         if( bs.readBoolean() ) {
0:             int size = dataIn.readInt();
0:             byte data[] = new byte[size];
0:             dataIn.readFully(data);
0:             info.setMarshalledProperties(new org.activeio.ByteSequence(data,0,size));
0:             } else {
0:             info.setMarshalledProperties(null);
0:         }
0:         info.setDataStructure((DataStructure) unmarsalNestedObject(wireFormat, dataIn, bs));
0:         info.setTargetConsumerId((ConsumerId) unmarsalCachedObject(wireFormat, dataIn, bs));
0: 
1:         if (bs.readBoolean()) {
0:             short size = dataIn.readShort();
0:             BrokerId value[] = new BrokerId[size];
0:             for( int i=0; i < size; i++ ) {
0:                 value[i] = (BrokerId) unmarsalNestedObject(wireFormat,dataIn, bs);
0:             }
0:             info.setBrokerPath(value);
0:         }
0:         else {
0:             info.setBrokerPath(null);
0:         }
/////////////////////////////////////////////////////////////////////////
0:                 rc += writeString(info.getCorrelationId(), bs);
0:                 rc += marshal1NestedObject(wireFormat, info.getReplyTo(), bs);
0:         bs.writeBoolean(info.getContent()!=null);
0:         rc += info.getContent()==null ? 0 : info.getContent().getLength()+4;
0:         bs.writeBoolean(info.getMarshalledProperties()!=null);
0:         rc += info.getMarshalledProperties()==null ? 0 : info.getMarshalledProperties().getLength()+4;
0:                 rc += marshalObjectArray(wireFormat, info.getBrokerPath(), bs);
0:         return rc + 3;
/////////////////////////////////////////////////////////////////////////
0:         if(bs.readBoolean()) {
0:            org.activeio.ByteSequence data = info.getContent();
0:            dataOut.writeInt(data.getLength());
0:            dataOut.write(data.getData(), data.getOffset(), data.getLength());
0:         }
0:         if(bs.readBoolean()) {
0:            org.activeio.ByteSequence data = info.getMarshalledProperties();
0:            dataOut.writeInt(data.getLength());
0:            dataOut.write(data.getData(), data.getOffset(), data.getLength());
0:         }
============================================================================