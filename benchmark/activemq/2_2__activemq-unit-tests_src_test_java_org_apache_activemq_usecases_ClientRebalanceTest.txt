1:4d3af76: /**
1:4d3af76:  * Licensed to the Apache Software Foundation (ASF) under one or more
1:4d3af76:  * contributor license agreements.  See the NOTICE file distributed with
1:4d3af76:  * this work for additional information regarding copyright ownership.
1:4d3af76:  * The ASF licenses this file to You under the Apache License, Version 2.0
1:4d3af76:  * (the "License"); you may not use this file except in compliance with
1:4d3af76:  * the License.  You may obtain a copy of the License at
1:4d3af76:  *
1:4d3af76:  *      http://www.apache.org/licenses/LICENSE-2.0
1:4d3af76:  *
1:4d3af76:  * Unless required by applicable law or agreed to in writing, software
1:4d3af76:  * distributed under the License is distributed on an "AS IS" BASIS,
1:4d3af76:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:4d3af76:  * See the License for the specific language governing permissions and
1:4d3af76:  * limitations under the License.
1:4d3af76:  */
1:4d3af76: package org.apache.activemq.usecases;
12:4d3af76: 
1:4d3af76: import javax.jms.Connection;
1:4d3af76: import javax.jms.Message;
1:4d3af76: import javax.jms.MessageConsumer;
1:4d3af76: import javax.jms.MessageProducer;
1:4d3af76: import javax.jms.Queue;
1:4d3af76: import javax.jms.Session;
1:4d3af76: 
1:0c2144c: import org.apache.activemq.ActiveMQConnectionFactory;
1:0c2144c: import org.apache.activemq.JmsMultipleBrokersTestSupport;
1:0c2144c: import org.apache.log4j.Logger;
1:0c2144c: import org.springframework.core.io.ClassPathResource;
1:0c2144c: 
1:4d3af76: public class ClientRebalanceTest extends JmsMultipleBrokersTestSupport {
1:4d3af76:     private static final Logger LOG = Logger.getLogger(ClientRebalanceTest.class);
1:4d3af76:     private static final String QUEUE_NAME = "Test.ClientRebalanceTest";
1:0c2144c: 
1:0c2144c:     protected void setUp() throws Exception {
1:0c2144c:         setAutoFail(true);
1:0c2144c:         super.setUp();
1:0c2144c:     }
1:0c2144c: 
1:7df5c3b: 
1:4d3af76:     public void testRebalance() throws Exception {
1:4d3af76:         createBroker(new ClassPathResource("org/apache/activemq/usecases/rebalance-broker1.xml"));
1:4d3af76:         createBroker(new ClassPathResource("org/apache/activemq/usecases/rebalance-broker2.xml"));
1:4d3af76: 
1:4d3af76:         startAllBrokers();
1:4d3af76: 
1:4d3af76:         brokers.get("b1").broker.waitUntilStarted();
1:4d3af76: 
1:4d3af76:         LOG.info("Starting connection");
1:0c2144c: 
1:4d3af76:         ActiveMQConnectionFactory factory = new ActiveMQConnectionFactory("failover:(tcp://localhost:61616,tcp://localhost:61617)?randomize=false");
1:4d3af76:         Connection conn = factory.createConnection();
1:4d3af76:         conn.start();
1:4d3af76:         Session session = conn.createSession(false, Session.AUTO_ACKNOWLEDGE);
1:4d3af76:         Queue theQueue = session.createQueue(QUEUE_NAME);
1:4d3af76:         MessageProducer producer = session.createProducer(theQueue);
1:4d3af76:         MessageConsumer consumer = session.createConsumer(theQueue);
1:4d3af76:         Message message = session.createTextMessage("Test message");
1:4d3af76:         producer.send(message);
1:4d3af76:         Message msg = consumer.receive(2000);
1:4d3af76:         assertNotNull(msg);
1:4d3af76: 
1:4d3af76:         // introduce third broker
1:4d3af76:         createBroker(new ClassPathResource("org/apache/activemq/usecases/rebalance-broker3.xml"));
1:4d3af76:         brokers.get("b3").broker.waitUntilStarted();
1:7df5c3b:         
1:7df5c3b:         Thread.sleep(3000);
1:4d3af76: 
1:4d3af76:         LOG.info("Stopping broker 1");
1:7df5c3b: 
1:4d3af76:         brokers.get("b1").broker.stop();
1:4d3af76:         brokers.get("b1").broker.waitUntilStopped();
1:0c2144c:         
1:7df5c3b:         Thread.sleep(3000);
1:4d3af76:         // should reconnect to some of the remaining brokers
1:4d3af76:         producer.send(message);
1:4d3af76:         msg = consumer.receive(2000);
1:4d3af76:         assertNotNull(msg);
1:4d3af76: 
1:4d3af76:         LOG.info("Stopping broker 2");
1:4d3af76: 
1:4d3af76:         brokers.get("b2").broker.stop();
1:4d3af76:         brokers.get("b2").broker.waitUntilStopped();
1:4d3af76: 
1:4d3af76:         // should reconnect to broker3
1:4d3af76:         producer.send(message);
1:4d3af76:         msg = consumer.receive(2000);
1:4d3af76:         assertNotNull(msg);
1:4d3af76:     }
1:4d3af76: }
============================================================================
author:Timothy A. Bish
-------------------------------------------------------------------------------
commit:ef24cc9
commit:0c2144c
/////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////
1: import org.apache.activemq.ActiveMQConnectionFactory;
1: import org.apache.activemq.JmsMultipleBrokersTestSupport;
1: import org.apache.log4j.Logger;
1: import org.springframework.core.io.ClassPathResource;
1: 
1: 
1:     protected void setUp() throws Exception {
1:         setAutoFail(true);
1:         super.setUp();
1:     }
1: 
/////////////////////////////////////////////////////////////////////////
1: 
/////////////////////////////////////////////////////////////////////////
0:         Thread.sleep(1000);
1: 
/////////////////////////////////////////////////////////////////////////
author:Bosanac Dejan
-------------------------------------------------------------------------------
commit:7df5c3b
/////////////////////////////////////////////////////////////////////////
1: 
/////////////////////////////////////////////////////////////////////////
1:         
1:         Thread.sleep(3000);
1:         
1:         Thread.sleep(3000);
commit:4d3af76
/////////////////////////////////////////////////////////////////////////
1: /**
1:  * Licensed to the Apache Software Foundation (ASF) under one or more
1:  * contributor license agreements.  See the NOTICE file distributed with
1:  * this work for additional information regarding copyright ownership.
1:  * The ASF licenses this file to You under the Apache License, Version 2.0
1:  * (the "License"); you may not use this file except in compliance with
1:  * the License.  You may obtain a copy of the License at
1:  *
1:  *      http://www.apache.org/licenses/LICENSE-2.0
1:  *
1:  * Unless required by applicable law or agreed to in writing, software
1:  * distributed under the License is distributed on an "AS IS" BASIS,
1:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:  * See the License for the specific language governing permissions and
1:  * limitations under the License.
1:  */
1: package org.apache.activemq.usecases;
1: 
0: import org.apache.activemq.ActiveMQConnectionFactory;
0: import org.apache.activemq.JmsMultipleBrokersTestSupport;
0: import org.apache.log4j.Logger;
0: import org.springframework.core.io.ClassPathResource;
1: 
1: import javax.jms.Connection;
1: import javax.jms.Message;
1: import javax.jms.MessageConsumer;
1: import javax.jms.MessageProducer;
1: import javax.jms.Queue;
1: import javax.jms.Session;
1: 
1: public class ClientRebalanceTest extends JmsMultipleBrokersTestSupport {
1:     private static final Logger LOG = Logger.getLogger(ClientRebalanceTest.class);
1:     private static final String QUEUE_NAME = "Test.ClientRebalanceTest";
1:     
1:     public void testRebalance() throws Exception {
1:         createBroker(new ClassPathResource("org/apache/activemq/usecases/rebalance-broker1.xml"));
1:         createBroker(new ClassPathResource("org/apache/activemq/usecases/rebalance-broker2.xml"));
1: 
1:         startAllBrokers();
1: 
1:         brokers.get("b1").broker.waitUntilStarted();
1: 
1: 
1:         LOG.info("Starting connection");
1:         
1:         ActiveMQConnectionFactory factory = new ActiveMQConnectionFactory("failover:(tcp://localhost:61616,tcp://localhost:61617)?randomize=false");
1:         Connection conn = factory.createConnection();
1:         conn.start();
1:         Session session = conn.createSession(false, Session.AUTO_ACKNOWLEDGE);
1:         Queue theQueue = session.createQueue(QUEUE_NAME);
1:         MessageProducer producer = session.createProducer(theQueue);
1:         MessageConsumer consumer = session.createConsumer(theQueue);
1:         Message message = session.createTextMessage("Test message");
1:         producer.send(message);
1:         Message msg = consumer.receive(2000);
1:         assertNotNull(msg);
1: 
1: 
1:         // introduce third broker
1:         createBroker(new ClassPathResource("org/apache/activemq/usecases/rebalance-broker3.xml"));
1:         brokers.get("b3").broker.waitUntilStarted();
1:         
0:         Thread.sleep(1000);
1: 
1: 
1:         LOG.info("Stopping broker 1");
1: 
1: 
1:         brokers.get("b1").broker.stop();
1:         brokers.get("b1").broker.waitUntilStopped();
1:         
0:         Thread.sleep(1000);
1:         // should reconnect to some of the remaining brokers
1:         producer.send(message);
1:         msg = consumer.receive(2000);
1:         assertNotNull(msg);
1: 
1:         LOG.info("Stopping broker 2");
1: 
1:         brokers.get("b2").broker.stop();
1:         brokers.get("b2").broker.waitUntilStopped();
1: 
1:         // should reconnect to broker3
1:         producer.send(message);
1:         msg = consumer.receive(2000);
1:         assertNotNull(msg);
1:     }
1:     
1: }
============================================================================