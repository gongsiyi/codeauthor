1:32f0612: /**
1:32f0612:  * Licensed to the Apache Software Foundation (ASF) under one or more
1:32f0612:  * contributor license agreements.  See the NOTICE file distributed with
1:32f0612:  * this work for additional information regarding copyright ownership.
1:32f0612:  * The ASF licenses this file to You under the Apache License, Version 2.0
1:32f0612:  * (the "License"); you may not use this file except in compliance with
1:32f0612:  * the License.  You may obtain a copy of the License at
5:32f0612:  *
1:230a86c:  *      http://www.apache.org/licenses/LICENSE-2.0
1:32f0612:  *
1:32f0612:  * Unless required by applicable law or agreed to in writing, software
1:32f0612:  * distributed under the License is distributed on an "AS IS" BASIS,
1:32f0612:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:32f0612:  * See the License for the specific language governing permissions and
1:32f0612:  * limitations under the License.
1:32f0612:  */
1:32f0612: package org.apache.activemq.openwire.v2;
10:32f0612: 
1:32f0612: import java.io.DataOutputStream;
1:4842547: import java.util.HashMap;
1:4842547: import java.util.Map;
1:32f0612: 
1:74a7a8b: import org.apache.activemq.command.BrokerId;
1:74a7a8b: import org.apache.activemq.command.Message;
1:4842547: import org.apache.activemq.util.ByteArrayOutputStream;
1:4842547: import org.apache.activemq.util.MarshallingSupport;
1:32f0612: 
1:32f0612: /**
1:230a86c:  * Test case for the OpenWire marshalling for Message NOTE!: This file is auto
1:230a86c:  * generated - do not modify! if you need to make a change, please see the
1:230a86c:  * modify the groovy scripts in the under src/gram/script and then use maven
1:230a86c:  * openwire:generate to regenerate this file.
1:b0c2a40:  * 
1:230a86c:  * 
1:32f0612:  */
1:32f0612: public abstract class MessageTestSupport extends BaseCommandTestSupport {
1:bd0ad68: 
1:32f0612:     protected void populateObject(Object object) throws Exception {
1:bd0ad68:         super.populateObject(object);
1:230a86c:         Message info = (Message)object;
1:bd0ad68: 
1:32f0612:         info.setProducerId(createProducerId("ProducerId:1"));
1:32f0612:         info.setDestination(createActiveMQDestination("Destination:2"));
1:32f0612:         info.setTransactionId(createTransactionId("TransactionId:3"));
1:32f0612:         info.setOriginalDestination(createActiveMQDestination("OriginalDestination:4"));
1:32f0612:         info.setMessageId(createMessageId("MessageId:5"));
1:32f0612:         info.setOriginalTransactionId(createTransactionId("OriginalTransactionId:6"));
1:32f0612:         info.setGroupID("GroupID:7");
1:32f0612:         info.setGroupSequence(1);
1:32f0612:         info.setCorrelationId("CorrelationId:8");
1:32f0612:         info.setPersistent(true);
1:32f0612:         info.setExpiration(1);
1:230a86c:         info.setPriority((byte)1);
1:32f0612:         info.setReplyTo(createActiveMQDestination("ReplyTo:9"));
1:32f0612:         info.setTimestamp(2);
1:32f0612:         info.setType("Type:10");
1:bd0ad68:         {
1:4842547:             ByteArrayOutputStream baos = new ByteArrayOutputStream();
1:4842547:             DataOutputStream dataOut = new DataOutputStream(baos);
1:4842547:             MarshallingSupport.writeUTF8(dataOut, "Content:11");
1:4842547:             dataOut.close();
1:4842547:             info.setContent(baos.toByteSequence());
1:230a86c:         }
1:bd0ad68:         {
1:4842547:         	Map map = new HashMap();
1:4842547:         	map.put("MarshalledProperties", 12);
1:4842547:             ByteArrayOutputStream baos = new ByteArrayOutputStream();
1:4842547:             DataOutputStream os = new DataOutputStream(baos);
1:4842547:             MarshallingSupport.marshalPrimitiveMap(map, os);
1:4842547:             os.close();
1:4842547:             info.setMarshalledProperties(baos.toByteSequence());
1:230a86c:         }
1:32f0612:         info.setDataStructure(createDataStructure("DataStructure:13"));
1:32f0612:         info.setTargetConsumerId(createConsumerId("TargetConsumerId:14"));
1:32f0612:         info.setCompressed(false);
1:32f0612:         info.setRedeliveryCounter(2);
1:bd0ad68:         {
1:bd0ad68:             BrokerId value[] = new BrokerId[2];
1:230a86c:             for (int i = 0; i < 2; i++) {
1:bd0ad68:                 value[i] = createBrokerId("BrokerPath:15");
2:bd0ad68:             }
1:bd0ad68:             info.setBrokerPath(value);
1:bd0ad68:         }
1:32f0612:         info.setArrival(3);
1:32f0612:         info.setUserID("UserID:16");
1:32f0612:         info.setRecievedByDFBridge(true);
1:39ef238:         info.setDroppable(false);
1:bd0ad68:     }
1:bd0ad68: }
============================================================================
author:Timothy A. Bish
-------------------------------------------------------------------------------
commit:ef24cc9
author:Hiram R. Chirino
-------------------------------------------------------------------------------
commit:b0c2a40
/////////////////////////////////////////////////////////////////////////
1:  * 
commit:74a7a8b
/////////////////////////////////////////////////////////////////////////
1: import org.apache.activemq.command.BrokerId;
1: import org.apache.activemq.command.Message;
commit:230a86c
/////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////
1:  *      http://www.apache.org/licenses/LICENSE-2.0
/////////////////////////////////////////////////////////////////////////
1:  * Test case for the OpenWire marshalling for Message NOTE!: This file is auto
1:  * generated - do not modify! if you need to make a change, please see the
1:  * modify the groovy scripts in the under src/gram/script and then use maven
1:  * openwire:generate to regenerate this file.
1:  * 
1:         Message info = (Message)object;
/////////////////////////////////////////////////////////////////////////
1:         info.setPriority((byte)1);
0:             info.setContent(new org.apache.activemq.util.ByteSequence(data, 0, data.length));
1:         }
0:             info.setMarshalledProperties(new org.apache.activemq.util.ByteSequence(data, 0, data.length));
1:         }
1:             for (int i = 0; i < 2; i++) {
commit:39ef238
/////////////////////////////////////////////////////////////////////////
1:         info.setDroppable(false);
commit:bd0ad68
/////////////////////////////////////////////////////////////////////////
1: 
1:         super.populateObject(object);
0:         Message info = (Message) object;
1: 
/////////////////////////////////////////////////////////////////////////
1:         {
0:             byte data[] = "Content:11".getBytes();
0:             info.setContent(new org.apache.activemq.util.ByteSequence(data,0,data.length));
1: }
1:         {
0:             byte data[] = "MarshalledProperties:12".getBytes();
0:             info.setMarshalledProperties(new org.apache.activemq.util.ByteSequence(data,0,data.length));
1: }
1:         {
1:             BrokerId value[] = new BrokerId[2];
0:             for( int i=0; i < 2; i++ ) {
1:                 value[i] = createBrokerId("BrokerPath:15");
1:             info.setBrokerPath(value);
1:         }
1:     }
1: }
commit:32f0612
/////////////////////////////////////////////////////////////////////////
1: /**
1:  *
1:  * Licensed to the Apache Software Foundation (ASF) under one or more
1:  * contributor license agreements.  See the NOTICE file distributed with
1:  * this work for additional information regarding copyright ownership.
1:  * The ASF licenses this file to You under the Apache License, Version 2.0
1:  * (the "License"); you may not use this file except in compliance with
1:  * the License.  You may obtain a copy of the License at
1:  *
0:  * http://www.apache.org/licenses/LICENSE-2.0
1:  *
1:  * Unless required by applicable law or agreed to in writing, software
1:  * distributed under the License is distributed on an "AS IS" BASIS,
1:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:  * See the License for the specific language governing permissions and
1:  * limitations under the License.
1:  */
1: package org.apache.activemq.openwire.v2;
1: 
0: import java.io.DataInputStream;
1: import java.io.DataOutputStream;
0: import java.io.IOException;
1: 
0: import org.apache.activemq.openwire.*;
0: import org.apache.activemq.command.*;
1: 
1: 
1: /**
0:  * Test case for the OpenWire marshalling for Message
1:  *
1:  *
0:  * NOTE!: This file is auto generated - do not modify!
0:  *        if you need to make a change, please see the modify the groovy scripts in the
0:  *        under src/gram/script and then use maven openwire:generate to regenerate 
0:  *        this file.
1:  *
0:  * @version $Revision: $
1:  */
1: public abstract class MessageTestSupport extends BaseCommandTestSupport {
1: 
1:     
1:     protected void populateObject(Object object) throws Exception {
0:     		super.populateObject(object);
0:     		Message info = (Message) object;
1:         info.setProducerId(createProducerId("ProducerId:1"));
1:         info.setDestination(createActiveMQDestination("Destination:2"));
1:         info.setTransactionId(createTransactionId("TransactionId:3"));
1:         info.setOriginalDestination(createActiveMQDestination("OriginalDestination:4"));
1:         info.setMessageId(createMessageId("MessageId:5"));
1:         info.setOriginalTransactionId(createTransactionId("OriginalTransactionId:6"));
1:         info.setGroupID("GroupID:7");
1:         info.setGroupSequence(1);
1:         info.setCorrelationId("CorrelationId:8");
1:         info.setPersistent(true);
1:         info.setExpiration(1);
0:         info.setPriority((byte) 1);
1:         info.setReplyTo(createActiveMQDestination("ReplyTo:9"));
1:         info.setTimestamp(2);
1:         info.setType("Type:10");
1:         
0:     		{
0:         		byte data[] = "Content:11".getBytes();
0:         		info.setContent(new org.apache.activemq.util.ByteSequence(data,0,data.length));
0:     		}
1:     		
1:         
0:     		{
0:         		byte data[] = "MarshalledProperties:12".getBytes();
0:         		info.setMarshalledProperties(new org.apache.activemq.util.ByteSequence(data,0,data.length));
0:     		}
1:     		
1:         info.setDataStructure(createDataStructure("DataStructure:13"));
1:         info.setTargetConsumerId(createConsumerId("TargetConsumerId:14"));
1:         info.setCompressed(false);
1:         info.setRedeliveryCounter(2);
1:         
0:     		    {
0: 	            BrokerId value[] = new BrokerId[2];
0: 	            for( int i=0; i < 2; i++ ) {
0: 	                value[i] = createBrokerId("BrokerPath:15");
0: 	            }
0: 	            info.setBrokerPath(value);
0:             }
1:         info.setArrival(3);
1:         info.setUserID("UserID:16");
1:         info.setRecievedByDFBridge(true);
1: 
0:             }
0:         }
commit:88acb0e
/////////////////////////////////////////////////////////////////////////
0: /**
commit:1ff8046
/////////////////////////////////////////////////////////////////////////
0: /**
author:Bosanac Dejan
-------------------------------------------------------------------------------
commit:4842547
/////////////////////////////////////////////////////////////////////////
0: import java.io.DataOutputStream;
1: import java.util.HashMap;
1: import java.util.Map;
0: 
1: import org.apache.activemq.util.ByteArrayOutputStream;
1: import org.apache.activemq.util.MarshallingSupport;
/////////////////////////////////////////////////////////////////////////
1:             ByteArrayOutputStream baos = new ByteArrayOutputStream();
1:             DataOutputStream dataOut = new DataOutputStream(baos);
1:             MarshallingSupport.writeUTF8(dataOut, "Content:11");
1:             dataOut.close();
1:             info.setContent(baos.toByteSequence());
1:         	Map map = new HashMap();
1:         	map.put("MarshalledProperties", 12);
1:             ByteArrayOutputStream baos = new ByteArrayOutputStream();
1:             DataOutputStream os = new DataOutputStream(baos);
1:             MarshallingSupport.marshalPrimitiveMap(map, os);
1:             os.close();
1:             info.setMarshalledProperties(baos.toByteSequence());
============================================================================