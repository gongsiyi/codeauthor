1:d29ca2a: /**
1:fc00993:  * Licensed to the Apache Software Foundation (ASF) under one or more
1:fc00993:  * contributor license agreements.  See the NOTICE file distributed with
1:fc00993:  * this work for additional information regarding copyright ownership.
1:fc00993:  * The ASF licenses this file to You under the Apache License, Version 2.0
1:fc00993:  * (the "License"); you may not use this file except in compliance with
1:fc00993:  * the License.  You may obtain a copy of the License at
1:b0c2a40:  *
1:fc00993:  *      http://www.apache.org/licenses/LICENSE-2.0
2:fc00993:  *
1:fc00993:  * Unless required by applicable law or agreed to in writing, software
1:fc00993:  * distributed under the License is distributed on an "AS IS" BASIS,
1:fc00993:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:fc00993:  * See the License for the specific language governing permissions and
1:fc00993:  * limitations under the License.
1:d29ca2a:  */
1:d29ca2a: package org.apache.activemq.network;
1:0a4c806: 
1:43bd686: import java.net.URI;
1:43bd686: import java.net.URISyntaxException;
1:4213e42: import java.util.Collection;
1:43bd686: import java.util.HashSet;
1:43bd686: import java.util.List;
1:43bd686: import java.util.Set;
1:43bd686: import java.util.concurrent.ConcurrentHashMap;
1:9ef4259: import java.util.concurrent.ConcurrentMap;
1:43bd686: 
1:43bd686: import javax.management.MalformedObjectNameException;
1:43bd686: import javax.management.ObjectName;
1:43bd686: 
1:d29ca2a: import org.apache.activemq.Service;
1:ec6e6a5: import org.apache.activemq.broker.BrokerService;
1:ced6909: import org.apache.activemq.broker.jmx.AnnotatedMBean;
1:7d7d6fa: import org.apache.activemq.broker.jmx.BrokerMBeanSupport;
1:ec6e6a5: import org.apache.activemq.broker.jmx.NetworkBridgeView;
1:ec6e6a5: import org.apache.activemq.broker.jmx.NetworkBridgeViewMBean;
1:068c646: import org.apache.activemq.command.ActiveMQDestination;
1:9670af1: import org.apache.activemq.command.ConsumerId;
1:d29ca2a: import org.apache.activemq.transport.Transport;
1:d29ca2a: import org.apache.activemq.transport.TransportFactory;
1:400b1fc: import org.apache.activemq.util.ServiceStopper;
1:d29ca2a: import org.apache.activemq.util.ServiceSupport;
1:8bf987b: import org.slf4j.Logger;
1:8bf987b: import org.slf4j.LoggerFactory;
1:ec6e6a5: 
1:d29ca2a: /**
1:a80acbb:  * Connector class for bridging broker networks.
1:d29ca2a:  */
1:f812e34: public abstract class NetworkConnector extends NetworkBridgeConfiguration implements Service {
1:f812e34: 
1:8bf987b:     private static final Logger LOG = LoggerFactory.getLogger(NetworkConnector.class);
1:400b1fc:     protected URI localURI;
1:47853d3:     protected ConnectionFilter connectionFilter;
1:9ef4259:     protected ConcurrentMap<URI, NetworkBridge> bridges = new ConcurrentHashMap<URI, NetworkBridge>();
1:43bd686: 
1:f812e34:     protected ServiceSupport serviceSupport = new ServiceSupport() {
1:a80acbb: 
1:63a660a:         @Override
1:f812e34:         protected void doStart() throws Exception {
1:f812e34:             handleStart();
1:47853d3:         }
1:4213e42: 
1:63a660a:         @Override
1:f812e34:         protected void doStop(ServiceStopper stopper) throws Exception {
1:ae73f86:             handleStop(stopper);
1:ec6e6a5:         }
1:d29ca2a:     };
1:a80acbb: 
1:ecf89a6:     private Set<ActiveMQDestination> durableDestinations;
1:25d396b: 
1:ecf89a6:     private BrokerService brokerService;
1:ecf89a6:     private ObjectName objectName;
1:43bd686: 
1:f812e34:     public NetworkConnector() {
1:ec6e6a5:     }
1:9670af1: 
1:f812e34:     public NetworkConnector(URI localURI) {
1:f812e34:         this.localURI = localURI;
1:ec6e6a5:     }
1:a80acbb: 
1:f812e34:     public URI getLocalUri() throws URISyntaxException {
1:d29ca2a:         return localURI;
1:ec6e6a5:     }
1:ecf89a6: 
1:f812e34:     public void setLocalUri(URI localURI) {
1:f812e34:         this.localURI = localURI;
1:ec6e6a5:     }
1:ec6e6a5: 
1:e2b83bd:     /**
1:e7106d3:      * @return Returns the durableDestinations.
1:e2b83bd:      */
1:a80acbb:     public Set<ActiveMQDestination> getDurableDestinations() {
1:e7106d3:         return durableDestinations;
1:ec6e6a5:     }
1:ec6e6a5: 
1:e2b83bd:     /**
1:ae73f86:      * @param durableDestinations The durableDestinations to set.
1:e2b83bd:      */
1:ecf89a6:     public void setDurableDestinations(Set<ActiveMQDestination> durableDestinations) {
1:f812e34:         this.durableDestinations = durableDestinations;
1:ec6e6a5:     }
1:ec6e6a5: 
1:ec6e6a5: 
1:f812e34:     public void addExcludedDestination(ActiveMQDestination destiantion) {
1:e2b83bd:         this.excludedDestinations.add(destiantion);
1:ec6e6a5:     }
1:ec6e6a5: 
1:6a12e9c: 
1:f812e34:     public void addStaticallyIncludedDestination(ActiveMQDestination destiantion) {
1:e2b83bd:         this.staticallyIncludedDestinations.add(destiantion);
1:ec6e6a5:     }
1:6a12e9c: 
1:6a12e9c: 
1:f812e34:     public void addDynamicallyIncludedDestination(ActiveMQDestination destiantion) {
1:e2b83bd:         this.dynamicallyIncludedDestinations.add(destiantion);
1:ec6e6a5:     }
1:f812e34: 
1:f812e34:     public ConnectionFilter getConnectionFilter() {
1:47853d3:         return connectionFilter;
1:ec6e6a5:     }
2:47853d3: 
1:f812e34:     public void setConnectionFilter(ConnectionFilter connectionFilter) {
1:f812e34:         this.connectionFilter = connectionFilter;
1:6a12e9c:     }
1:47853d3: 
1:d29ca2a:     // Implementation methods
2:d29ca2a:     // -------------------------------------------------------------------------
1:f812e34:     protected NetworkBridge configureBridge(DemandForwardingBridgeSupport result) {
1:ecf89a6:         List<ActiveMQDestination> destsList = getDynamicallyIncludedDestinations();
1:ecf89a6:         ActiveMQDestination dests[] = destsList.toArray(new ActiveMQDestination[destsList.size()]);
1:e2b83bd:         result.setDynamicallyIncludedDestinations(dests);
1:f812e34:         destsList = getExcludedDestinations();
1:ecf89a6:         dests = destsList.toArray(new ActiveMQDestination[destsList.size()]);
1:e2b83bd:         result.setExcludedDestinations(dests);
1:f812e34:         destsList = getStaticallyIncludedDestinations();
1:ecf89a6:         dests = destsList.toArray(new ActiveMQDestination[destsList.size()]);
1:e2b83bd:         result.setStaticallyIncludedDestinations(dests);
1:9f7d70b:         result.setDurableDestinations(getDurableTopicDestinations(durableDestinations));
1:9f7d70b:         return result;
1:9f7d70b:     }
1:9f7d70b: 
1:9f7d70b:     protected Transport createLocalTransport() throws Exception {
1:4ef1fc7:         return NetworkBridgeFactory.createLocalTransport(this, localURI);
1:9f7d70b:     }
1:9f7d70b: 
1:9f7d70b:     public static ActiveMQDestination[] getDurableTopicDestinations(final Set<ActiveMQDestination> durableDestinations) {
1:f812e34:         if (durableDestinations != null) {
1:a80acbb: 
1:0a4c806:             HashSet<ActiveMQDestination> topics = new HashSet<ActiveMQDestination>();
1:0a4c806:             for (ActiveMQDestination d : durableDestinations) {
1:0a4c806:                 if( d.isTopic() ) {
1:0a4c806:                     topics.add(d);
1:0a4c806:                 }
1:0a4c806:             }
1:a80acbb: 
1:0a4c806:             ActiveMQDestination[] dest = new ActiveMQDestination[topics.size()];
1:63a660a:             dest = topics.toArray(dest);
1:9f7d70b:             return dest;
1:6a12e9c:         }
1:9f7d70b:         return null;
1:47853d3:     }
1:0a4c806: 
1:63a660a:     @Override
1:f812e34:     public void start() throws Exception {
1:ae73f86:         serviceSupport.start();
1:47853d3:     }
1:f812e34: 
1:63a660a:     @Override
1:f812e34:     public void stop() throws Exception {
1:ae73f86:         serviceSupport.stop();
1:47853d3:     }
1:f812e34: 
1:f812e34:     protected void handleStart() throws Exception {
1:f812e34:         if (localURI == null) {
1:d29ca2a:             throw new IllegalStateException("You must configure the 'localURI' property");
1:47853d3:         }
1:59af747:         LOG.info("Network Connector {} started", this);
1:47853d3:     }
1:6a12e9c: 
1:f812e34:     protected void handleStop(ServiceStopper stopper) throws Exception {
1:59af747:         LOG.info("Network Connector {} stopped", this);
1:f812e34:     }
1:f812e34: 
1:3326ab9:     public boolean isStarted() {
1:a80acbb:         return serviceSupport.isStarted();
1:b2ad8fa:     }
1:47853d3: 
1:0601fb7:     public boolean isStopped() {
1:0601fb7:         return serviceSupport.isStopped();
4:e2b83bd:     }
1:47853d3: 
1:0601fb7:     public boolean isStopping() {
1:0601fb7:         return serviceSupport.isStopping();
1:e2b83bd:     }
1:47853d3: 
1:ec6e6a5:     public ObjectName getObjectName() {
1:f812e34:         return objectName;
1:f812e34:     }
1:ec6e6a5: 
1:f812e34:     public void setObjectName(ObjectName objectName) {
1:f812e34:         this.objectName = objectName;
1:f812e34:     }
1:ec6e6a5: 
1:f812e34:     public BrokerService getBrokerService() {
1:f812e34:         return brokerService;
1:f812e34:     }
1:ec6e6a5: 
1:f812e34:     public void setBrokerService(BrokerService brokerService) {
1:f812e34:         this.brokerService = brokerService;
1:f812e34:     }
1:ec6e6a5: 
1:f812e34:     protected void registerNetworkBridgeMBean(NetworkBridge bridge) {
1:ecf89a6:         if (!getBrokerService().isUseJmx()) {
1:f812e34:             return;
1:ecf89a6:         }
1:f812e34:         NetworkBridgeViewMBean view = new NetworkBridgeView(bridge);
1:f812e34:         try {
1:f812e34:             ObjectName objectName = createNetworkBridgeObjectName(bridge);
1:ced6909:             AnnotatedMBean.registerMBean(getBrokerService().getManagementContext(), view, objectName);
1:f812e34:         } catch (Throwable e) {
1:e1bbde7:             LOG.debug("Network bridge could not be registered in JMX: {}", e.getMessage(), e);
1:f812e34:         }
1:f812e34:     }
1:ec6e6a5: 
1:f812e34:     protected void unregisterNetworkBridgeMBean(NetworkBridge bridge) {
1:ecf89a6:         if (!getBrokerService().isUseJmx()) {
1:f812e34:             return;
1:ecf89a6:         }
1:f812e34:         try {
1:f812e34:             ObjectName objectName = createNetworkBridgeObjectName(bridge);
1:1ec71bd:             getBrokerService().getManagementContext().unregisterMBean(objectName);
1:f812e34:         } catch (Throwable e) {
1:e1bbde7:             LOG.debug("Network bridge could not be unregistered in JMX: {}", e.getMessage(), e);
1:f812e34:         }
1:f812e34:     }
1:ec6e6a5: 
1:ecf89a6:     protected ObjectName createNetworkBridgeObjectName(NetworkBridge bridge) throws MalformedObjectNameException {
1:7d7d6fa:         return BrokerMBeanSupport.createNetworkBridgeObjectName(getObjectName(), bridge.getRemoteAddress());
1:f812e34:     }
1:ec6e6a5: 
1:9670af1:     // ask all the bridges as we can't know to which this consumer is tied
1:9670af1:     public boolean removeDemandSubscription(ConsumerId consumerId) {
1:9670af1:         boolean removeSucceeded = false;
1:43bd686:         for (NetworkBridge bridge : bridges.values()) {
1:43bd686:             if (bridge instanceof DemandForwardingBridgeSupport) {
1:43bd686:                 DemandForwardingBridgeSupport demandBridge = (DemandForwardingBridgeSupport) bridge;
1:43bd686:                 if (demandBridge.removeDemandSubscriptionByLocalId(consumerId)) {
1:43bd686:                     removeSucceeded = true;
1:43bd686:                     break;
1:43bd686:                 }
1:9670af1:             }
1:9670af1:         }
1:9670af1:         return removeSucceeded;
1:9670af1:     }
1:9670af1: 
1:4213e42:     public Collection<NetworkBridge> activeBridges() {
1:4213e42:         return bridges.values();
1:4213e42:     }
1:f812e34: }
============================================================================
author:gtully
-------------------------------------------------------------------------------
commit:4ef1fc7
/////////////////////////////////////////////////////////////////////////
1:         return NetworkBridgeFactory.createLocalTransport(this, localURI);
commit:d84a586
/////////////////////////////////////////////////////////////////////////
0:         return NetworkBridgeFactory.createLocalTransport(localURI);
author:Christopher L. Shannon (cshannon)
-------------------------------------------------------------------------------
commit:9f7d70b
/////////////////////////////////////////////////////////////////////////
1:         result.setDurableDestinations(getDurableTopicDestinations(durableDestinations));
1:         return result;
1:     }
1: 
1:     protected Transport createLocalTransport() throws Exception {
0:         return TransportFactory.connect(localURI);
1:     }
1: 
1:     public static ActiveMQDestination[] getDurableTopicDestinations(final Set<ActiveMQDestination> durableDestinations) {
/////////////////////////////////////////////////////////////////////////
1:             return dest;
1:         return null;
author:Timothy Bish
-------------------------------------------------------------------------------
commit:9ef4259
/////////////////////////////////////////////////////////////////////////
1: import java.util.concurrent.ConcurrentMap;
/////////////////////////////////////////////////////////////////////////
1:     protected ConcurrentMap<URI, NetworkBridge> bridges = new ConcurrentHashMap<URI, NetworkBridge>();
commit:e1bbde7
/////////////////////////////////////////////////////////////////////////
0:         LOG.info("Network Connector {} Started", this);
0:         LOG.info("Network Connector {} Stopped", this);
/////////////////////////////////////////////////////////////////////////
1:             LOG.debug("Network bridge could not be registered in JMX: {}", e.getMessage(), e);
/////////////////////////////////////////////////////////////////////////
1:             LOG.debug("Network bridge could not be unregistered in JMX: {}", e.getMessage(), e);
author:Claus Ibsen
-------------------------------------------------------------------------------
commit:59af747
/////////////////////////////////////////////////////////////////////////
1:         LOG.info("Network Connector {} started", this);
1:         LOG.info("Network Connector {} stopped", this);
author:Gary Tully
-------------------------------------------------------------------------------
commit:7d7d6fa
/////////////////////////////////////////////////////////////////////////
1: import org.apache.activemq.broker.jmx.BrokerMBeanSupport;
/////////////////////////////////////////////////////////////////////////
1:         return BrokerMBeanSupport.createNetworkBridgeObjectName(getObjectName(), bridge.getRemoteAddress());
commit:27d0ff4
/////////////////////////////////////////////////////////////////////////
0:         LOG.info("Network Connector " + this + " Started");
0:         LOG.info("Network Connector " + this + " Stopped");
commit:4213e42
/////////////////////////////////////////////////////////////////////////
1: import java.util.Collection;
/////////////////////////////////////////////////////////////////////////
1:     
1:     public Collection<NetworkBridge> activeBridges() {
1:         return bridges.values();
1:     }
commit:43bd686
/////////////////////////////////////////////////////////////////////////
1: import java.net.URI;
1: import java.net.URISyntaxException;
0: import java.util.HashMap;
1: import java.util.HashSet;
1: import java.util.List;
0: import java.util.Map;
1: import java.util.Set;
1: import java.util.concurrent.ConcurrentHashMap;
0: import java.util.concurrent.CopyOnWriteArrayList;
1: 
1: import javax.management.MalformedObjectNameException;
1: import javax.management.ObjectName;
1: 
/////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////
0:     protected ConcurrentHashMap<URI, NetworkBridge> bridges = new ConcurrentHashMap<URI, NetworkBridge>();
1:     
/////////////////////////////////////////////////////////////////////////
1:     
/////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////
1:         for (NetworkBridge bridge : bridges.values()) {
1:             if (bridge instanceof DemandForwardingBridgeSupport) {
1:                 DemandForwardingBridgeSupport demandBridge = (DemandForwardingBridgeSupport) bridge;
1:                 if (demandBridge.removeDemandSubscriptionByLocalId(consumerId)) {
1:                     removeSucceeded = true;
1:                     break;
1:                 }
commit:9670af1
/////////////////////////////////////////////////////////////////////////
0: import java.io.IOException;
0: import java.util.Collections;
0: import java.util.concurrent.ConcurrentLinkedQueue;
/////////////////////////////////////////////////////////////////////////
1: import org.apache.activemq.command.ConsumerId;
/////////////////////////////////////////////////////////////////////////
0:     private ConcurrentLinkedQueue<DemandForwardingBridgeSupport> configuredBridges = new ConcurrentLinkedQueue<DemandForwardingBridgeSupport>();
1:  
/////////////////////////////////////////////////////////////////////////
0:         configuredBridges.add(result);
/////////////////////////////////////////////////////////////////////////
1:     // ask all the bridges as we can't know to which this consumer is tied
1:     public boolean removeDemandSubscription(ConsumerId consumerId) {
1:         boolean removeSucceeded = false;
0:         for (DemandForwardingBridgeSupport bridge: configuredBridges) {
0:             if (bridge.removeDemandSubscriptionByLocalId(consumerId)) {
0:                 removeSucceeded = true;
0:                 break;
1:             }
1:         }
1:         return removeSucceeded;
1:     }
1: 
author:Timothy A. Bish
-------------------------------------------------------------------------------
commit:63a660a
/////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////
0: import org.apache.activemq.broker.jmx.BrokerMBeanSuppurt;
/////////////////////////////////////////////////////////////////////////
1:         @Override
1:         @Override
/////////////////////////////////////////////////////////////////////////
1:             dest = topics.toArray(dest);
/////////////////////////////////////////////////////////////////////////
1:     @Override
1:     @Override
/////////////////////////////////////////////////////////////////////////
0:         return BrokerMBeanSuppurt.createNetworkBridgeObjectName(getObjectName(), bridge.getRemoteAddress());
commit:a80acbb
/////////////////////////////////////////////////////////////////////////
1:  * Connector class for bridging broker networks.
/////////////////////////////////////////////////////////////////////////
1: 
/////////////////////////////////////////////////////////////////////////
1: 
/////////////////////////////////////////////////////////////////////////
1:     public Set<ActiveMQDestination> getDurableDestinations() {
/////////////////////////////////////////////////////////////////////////
1: 
1: 
/////////////////////////////////////////////////////////////////////////
1:         return serviceSupport.isStarted();
/////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////
1: 
author:Christian Posta
-------------------------------------------------------------------------------
commit:25d396b
/////////////////////////////////////////////////////////////////////////
1: 
/////////////////////////////////////////////////////////////////////////
author:Hiram R. Chirino
-------------------------------------------------------------------------------
commit:58aca86
commit:b0c2a40
/////////////////////////////////////////////////////////////////////////
1:  * 
commit:0a4c806
/////////////////////////////////////////////////////////////////////////
0: import java.util.HashSet;
/////////////////////////////////////////////////////////////////////////
1:             
1:             HashSet<ActiveMQDestination> topics = new HashSet<ActiveMQDestination>();
1:             for (ActiveMQDestination d : durableDestinations) {
1:                 if( d.isTopic() ) {
1:                     topics.add(d);
1:                 }
1:             }
1:             
1:             ActiveMQDestination[] dest = new ActiveMQDestination[topics.size()];
0:             dest = (ActiveMQDestination[])topics.toArray(dest);
commit:ecf89a6
/////////////////////////////////////////////////////////////////////////
0: import java.util.HashMap;
0: import java.util.Map;
/////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////
1:     private Set<ActiveMQDestination> durableDestinations;
0:     private List<ActiveMQDestination> excludedDestinations = new CopyOnWriteArrayList<ActiveMQDestination>();
0:     private List<ActiveMQDestination> dynamicallyIncludedDestinations = new CopyOnWriteArrayList<ActiveMQDestination>();
0:     private List<ActiveMQDestination> staticallyIncludedDestinations = new CopyOnWriteArrayList<ActiveMQDestination>();
1:     private BrokerService brokerService;
1:     private ObjectName objectName;
1: 
/////////////////////////////////////////////////////////////////////////
1:     public void setDurableDestinations(Set<ActiveMQDestination> durableDestinations) {
0:     public List<ActiveMQDestination> getExcludedDestinations() {
0:     public void setExcludedDestinations(List<ActiveMQDestination> excludedDestinations) {
/////////////////////////////////////////////////////////////////////////
0:     public List<ActiveMQDestination> getStaticallyIncludedDestinations() {
/////////////////////////////////////////////////////////////////////////
0:     public void setStaticallyIncludedDestinations(List<ActiveMQDestination> staticallyIncludedDestinations) {
/////////////////////////////////////////////////////////////////////////
0:     public List<ActiveMQDestination> getDynamicallyIncludedDestinations() {
/////////////////////////////////////////////////////////////////////////
0:     public void setDynamicallyIncludedDestinations(List<ActiveMQDestination> dynamicallyIncludedDestinations) {
/////////////////////////////////////////////////////////////////////////
1:         List<ActiveMQDestination> destsList = getDynamicallyIncludedDestinations();
1:         ActiveMQDestination dests[] = destsList.toArray(new ActiveMQDestination[destsList.size()]);
1:         dests = destsList.toArray(new ActiveMQDestination[destsList.size()]);
1:         dests = destsList.toArray(new ActiveMQDestination[destsList.size()]);
/////////////////////////////////////////////////////////////////////////
1:         if (!getBrokerService().isUseJmx()) {
1:         }
/////////////////////////////////////////////////////////////////////////
1:         if (!getBrokerService().isUseJmx()) {
1:         }
/////////////////////////////////////////////////////////////////////////
0:     @SuppressWarnings("unchecked")
1:     protected ObjectName createNetworkBridgeObjectName(NetworkBridge bridge) throws MalformedObjectNameException {
0:         Map<String, String> map = new HashMap<String, String>(connectorName.getKeyPropertyList());
0:         return new ObjectName(connectorName.getDomain() + ":" + "BrokerName=" + JMXSupport.encodeObjectNamePart((String)map.get("BrokerName")) + "," + "Type=NetworkBridge,"
0:                               + "NetworkConnectorName=" + JMXSupport.encodeObjectNamePart((String)map.get("NetworkConnectorName")) + "," + "Name="
0:                               + JMXSupport.encodeObjectNamePart(JMXSupport.encodeObjectNamePart(bridge.getRemoteAddress())));
commit:fc00993
/////////////////////////////////////////////////////////////////////////
1:  * Licensed to the Apache Software Foundation (ASF) under one or more
1:  * contributor license agreements.  See the NOTICE file distributed with
1:  * this work for additional information regarding copyright ownership.
1:  * The ASF licenses this file to You under the Apache License, Version 2.0
1:  * (the "License"); you may not use this file except in compliance with
1:  * the License.  You may obtain a copy of the License at
1:  *
1:  *      http://www.apache.org/licenses/LICENSE-2.0
1:  *
1:  * Unless required by applicable law or agreed to in writing, software
1:  * distributed under the License is distributed on an "AS IS" BASIS,
1:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:  * See the License for the specific language governing permissions and
1:  * limitations under the License.
/////////////////////////////////////////////////////////////////////////
0:     private static final Log LOG = LogFactory.getLog(NetworkConnector.class);
/////////////////////////////////////////////////////////////////////////
0:         LOG.info("Network Connector " + getName() + " Started");
0:         LOG.info("Network Connector " + getName() + " Stopped");
/////////////////////////////////////////////////////////////////////////
0:                 LOG.debug("Network bridge could not be registered in JMX: " + e.getMessage(), e);
/////////////////////////////////////////////////////////////////////////
0:                 LOG.debug("Network bridge could not be unregistered in JMX: " + e.getMessage(), e);
commit:f812e34
/////////////////////////////////////////////////////////////////////////
1: public abstract class NetworkConnector extends NetworkBridgeConfiguration implements Service {
0:     protected static final Log log = LogFactory.getLog(NetworkConnector.class);
0:     private List excludedDestinations = new CopyOnWriteArrayList();
0:     private List dynamicallyIncludedDestinations = new CopyOnWriteArrayList();
0:     private List staticallyIncludedDestinations = new CopyOnWriteArrayList();
1:     protected ServiceSupport serviceSupport = new ServiceSupport() {
1: 
1:         protected void doStart() throws Exception {
1:             handleStart();
1:         protected void doStop(ServiceStopper stopper) throws Exception {
1:     public NetworkConnector() {
1:     public NetworkConnector(URI localURI) {
1:         this.localURI = localURI;
1:     public URI getLocalUri() throws URISyntaxException {
1:     public void setLocalUri(URI localURI) {
1:         this.localURI = localURI;
0:     public Set getDurableDestinations() {
0:     public void setDurableDestinations(Set durableDestinations) {
1:         this.durableDestinations = durableDestinations;
0:     public List getExcludedDestinations() {
0:     public void setExcludedDestinations(List excludedDestinations) {
0:         this.excludedDestinations = excludedDestinations;
1:     public void addExcludedDestination(ActiveMQDestination destiantion) {
0:     public List getStaticallyIncludedDestinations() {
0:      * @param staticallyIncludedDestinations The staticallyIncludedDestinations
0:      *                to set.
0:     public void setStaticallyIncludedDestinations(List staticallyIncludedDestinations) {
0:         this.staticallyIncludedDestinations = staticallyIncludedDestinations;
1:     public void addStaticallyIncludedDestination(ActiveMQDestination destiantion) {
0:     public List getDynamicallyIncludedDestinations() {
0:      * @param dynamicallyIncludedDestinations The
0:      *                dynamicallyIncludedDestinations to set.
0:     public void setDynamicallyIncludedDestinations(List dynamicallyIncludedDestinations) {
0:         this.dynamicallyIncludedDestinations = dynamicallyIncludedDestinations;
1:     public void addDynamicallyIncludedDestination(ActiveMQDestination destiantion) {
1: 
1:     public ConnectionFilter getConnectionFilter() {
1:     public void setConnectionFilter(ConnectionFilter connectionFilter) {
1:         this.connectionFilter = connectionFilter;
1:     protected NetworkBridge configureBridge(DemandForwardingBridgeSupport result) {
0:         List destsList = getDynamicallyIncludedDestinations();
0:         ActiveMQDestination dests[] = (ActiveMQDestination[])destsList
0:             .toArray(new ActiveMQDestination[destsList.size()]);
1:         destsList = getExcludedDestinations();
0:         dests = (ActiveMQDestination[])destsList.toArray(new ActiveMQDestination[destsList.size()]);
1:         destsList = getStaticallyIncludedDestinations();
0:         dests = (ActiveMQDestination[])destsList.toArray(new ActiveMQDestination[destsList.size()]);
1:         if (durableDestinations != null) {
0:             ActiveMQDestination[] dest = new ActiveMQDestination[durableDestinations.size()];
0:             dest = (ActiveMQDestination[])durableDestinations.toArray(dest);
0:     protected Transport createLocalTransport() throws Exception {
1:     public void start() throws Exception {
1:     public void stop() throws Exception {
1: 
1: 
1:     protected void handleStart() throws Exception {
1:         if (localURI == null) {
0:         log.info("Network Connector " + getName() + " Started");
1:     protected void handleStop(ServiceStopper stopper) throws Exception {
0:         log.info("Network Connector " + getName() + " Stopped");
1: 
1:         return objectName;
1:     }
1:     public void setObjectName(ObjectName objectName) {
1:         this.objectName = objectName;
1:     }
1:     public BrokerService getBrokerService() {
1:         return brokerService;
1:     }
1:     public void setBrokerService(BrokerService brokerService) {
1:         this.brokerService = brokerService;
1:     }
1:     protected void registerNetworkBridgeMBean(NetworkBridge bridge) {
0:         if (!getBrokerService().isUseJmx())
1:             return;
0:         MBeanServer mbeanServer = getBrokerService().getManagementContext().getMBeanServer();
0:         if (mbeanServer != null) {
1:             NetworkBridgeViewMBean view = new NetworkBridgeView(bridge);
1:             try {
1:                 ObjectName objectName = createNetworkBridgeObjectName(bridge);
0:                 mbeanServer.registerMBean(view, objectName);
1:             } catch (Throwable e) {
0:                 log.debug("Network bridge could not be registered in JMX: " + e.getMessage(), e);
1:             }
1:         }
1:     }
1:     protected void unregisterNetworkBridgeMBean(NetworkBridge bridge) {
0:         if (!getBrokerService().isUseJmx())
1:             return;
0:         MBeanServer mbeanServer = getBrokerService().getManagementContext().getMBeanServer();
0:         if (mbeanServer != null) {
1:             try {
1:                 ObjectName objectName = createNetworkBridgeObjectName(bridge);
0:                 mbeanServer.unregisterMBean(objectName);
1:             } catch (Throwable e) {
0:                 log.debug("Network bridge could not be unregistered in JMX: " + e.getMessage(), e);
1:             }
1:         }
1:     }
0:     protected ObjectName createNetworkBridgeObjectName(NetworkBridge bridge)
0:         throws MalformedObjectNameException {
0:         ObjectName connectorName = getObjectName();
0:         Hashtable map = connectorName.getKeyPropertyList();
0:         return new ObjectName(connectorName.getDomain()
0:                               + ":"
0:                               + "BrokerName="
0:                               + JMXSupport.encodeObjectNamePart((String)map.get("BrokerName"))
0:                               + ","
0:                               + "Type=NetworkBridge,"
0:                               + "NetworkConnectorName="
0:                               + JMXSupport.encodeObjectNamePart((String)map.get("NetworkConnectorName"))
0:                               + ","
0:                               + "Name="
0:                               + JMXSupport.encodeObjectNamePart(JMXSupport.encodeObjectNamePart(bridge
0:                                   .getRemoteAddress())));
1:     }
commit:ec6e6a5
/////////////////////////////////////////////////////////////////////////
0: import java.util.Hashtable;
1: 
0: import javax.management.MBeanServer;
0: import javax.management.MalformedObjectNameException;
0: import javax.management.ObjectName;
1: 
1: import org.apache.activemq.broker.BrokerService;
1: import org.apache.activemq.broker.jmx.NetworkBridgeView;
1: import org.apache.activemq.broker.jmx.NetworkBridgeViewMBean;
0: import org.apache.activemq.util.JMXSupport;
/////////////////////////////////////////////////////////////////////////
0:     private BrokerService brokerService;
0:     private ObjectName objectName;
1:     
/////////////////////////////////////////////////////////////////////////
1:     
1:     public ObjectName getObjectName() {
0: 		return objectName;
1: 	}
1: 
0: 	public void setObjectName(ObjectName objectName) {
0: 		this.objectName = objectName;
1: 	}
1: 
0: 	public BrokerService getBrokerService() {
0: 		return brokerService;
1: 	}
1: 
0: 	public void setBrokerService(BrokerService brokerService) {
0: 		this.brokerService = brokerService;
1: 	}
1: 
0: 	protected void registerNetworkBridgeMBean(NetworkBridge bridge) {
0: 		if (!getBrokerService().isUseJmx())
0: 			return;
1: 
0: 		MBeanServer mbeanServer = getBrokerService().getManagementContext()
0: 				.getMBeanServer();
0: 		if (mbeanServer != null) {
0: 			NetworkBridgeViewMBean view = new NetworkBridgeView(bridge);
0: 			try {
0: 				ObjectName objectName = createNetworkBridgeObjectName(bridge);
0: 				mbeanServer.registerMBean(view, objectName);
0: 			} catch (Throwable e) {
0: 				log.debug("Network bridge could not be registered in JMX: "
0: 						+ e.getMessage(), e);
1: 			}
1: 		}
1: 	}
1: 
0: 	protected void unregisterNetworkBridgeMBean(NetworkBridge bridge) {
0: 		if (!getBrokerService().isUseJmx())
0: 			return;
1: 
0: 		MBeanServer mbeanServer = getBrokerService().getManagementContext()
0: 				.getMBeanServer();
0: 		if (mbeanServer != null) {
0: 			try {
0: 				ObjectName objectName = createNetworkBridgeObjectName(bridge);
0: 				mbeanServer.unregisterMBean(objectName);
0: 			} catch (Throwable e) {
0: 				log.debug("Network bridge could not be unregistered in JMX: "
0: 						+ e.getMessage(), e);
1: 			}
1: 		}
1: 	}
1: 
0: 	protected ObjectName createNetworkBridgeObjectName(NetworkBridge bridge)
0: 			throws MalformedObjectNameException {
0: 		ObjectName connectorName = getObjectName();
0: 		Hashtable map = connectorName.getKeyPropertyList();
0: 		return new ObjectName(connectorName.getDomain()
0: 				+ ":"
0: 				+ "BrokerName="
0: 				+ JMXSupport.encodeObjectNamePart((String) map
0: 						.get("BrokerName"))
0: 				+ ","
0: 				+ "Type=NetworkBridge,"
0: 				+ "NetworkConnectorName="
0: 				+ JMXSupport.encodeObjectNamePart((String) map
0: 						.get("NetworkConnectorName"))
0: 				+ ","
0: 				+ "Name="
0: 				+ JMXSupport.encodeObjectNamePart(JMXSupport
0: 						.encodeObjectNamePart(bridge.getRemoteAddress())));
1: 	}
1: 
commit:e387049
/////////////////////////////////////////////////////////////////////////
commit:86cbdfd
/////////////////////////////////////////////////////////////////////////
0: import java.util.concurrent.CopyOnWriteArrayList;
commit:b75a6da
/////////////////////////////////////////////////////////////////////////
0:     private boolean bridgeTempDestinations=true;
commit:6a12e9c
/////////////////////////////////////////////////////////////////////////
0:     private boolean bridgeTempDestinations=false;
1:     
/////////////////////////////////////////////////////////////////////////
1:         
0:         result.setBridgeTempDestinations(bridgeTempDestinations);
/////////////////////////////////////////////////////////////////////////
1: 
0: 	public boolean isBridgeTempDestinations() {
0: 		return bridgeTempDestinations;
1: 	}
1: 
0: 	public void setBridgeTempDestinations(boolean bridgeTempDestinations) {
0: 		this.bridgeTempDestinations = bridgeTempDestinations;
1: 	}
commit:57b4941
/////////////////////////////////////////////////////////////////////////
0:  * Licensed to the Apache Software Foundation (ASF) under one or more
0:  * contributor license agreements.  See the NOTICE file distributed with
0:  * this work for additional information regarding copyright ownership.
0:  * The ASF licenses this file to You under the Apache License, Version 2.0
0:  * (the "License"); you may not use this file except in compliance with
0:  * the License.  You may obtain a copy of the License at
commit:257f16a
/////////////////////////////////////////////////////////////////////////
0: import java.net.URI;
0: import java.net.URISyntaxException;
0: import java.util.List;
0: import java.util.Set;
/////////////////////////////////////////////////////////////////////////
0: import edu.emory.mathcs.backport.java.util.concurrent.CopyOnWriteArrayList;
/////////////////////////////////////////////////////////////////////////
0:     protected boolean failover = false;
commit:47853d3
/////////////////////////////////////////////////////////////////////////
0: import org.apache.activemq.broker.BrokerService;
/////////////////////////////////////////////////////////////////////////
0:     private int prefetchSize = 1000;
0:     private boolean dispatchAsync = true;
1:     protected ConnectionFilter connectionFilter;
/////////////////////////////////////////////////////////////////////////
0:         result.setPrefetchSize(prefetchSize);
0:         result.setDispatchAsync(dispatchAsync);
/////////////////////////////////////////////////////////////////////////
1: 
0:     public boolean isDispatchAsync() {
0:         return dispatchAsync;
1:     }
1: 
0:     public void setDispatchAsync(boolean dispatchAsync) {
0:         this.dispatchAsync = dispatchAsync;
1:     }
1: 
0:     public int getPrefetchSize() {
0:         return prefetchSize;
1:     }
1: 
0:     public void setPrefetchSize(int prefetchSize) {
0:         this.prefetchSize = prefetchSize;
1:     }
1: 
0:     public ConnectionFilter getConnectionFilter() {
1:         return connectionFilter;
1:     }
1: 
0:     public void setConnectionFilter(ConnectionFilter connectionFilter) {
0:         this.connectionFilter = connectionFilter;
1:     }
commit:b2ad8fa
/////////////////////////////////////////////////////////////////////////
0:         log.info("Network Connector "+getName()+" Started");
/////////////////////////////////////////////////////////////////////////
0:         log.info("Network Connector "+getName()+" Stopped");
/////////////////////////////////////////////////////////////////////////
0:         if( name == null ) {
0:             name = discoveryAgent.toString();
1:         }
/////////////////////////////////////////////////////////////////////////
0:                     protected void serviceRemoteException(Exception error) {
/////////////////////////////////////////////////////////////////////////
0:                     protected void serviceRemoteException(Exception error) {
/////////////////////////////////////////////////////////////////////////
0:             protected void serviceRemoteException(Exception error) {
commit:e2b83bd
/////////////////////////////////////////////////////////////////////////
0: import java.util.List;
/////////////////////////////////////////////////////////////////////////
0: import edu.emory.mathcs.backport.java.util.concurrent.CopyOnWriteArrayList;
/////////////////////////////////////////////////////////////////////////
0:     private List excludedDestinations = new CopyOnWriteArrayList();
0:     private List dynamicallyIncludedDestinations = new CopyOnWriteArrayList();
0:     private List staticallyIncludedDestinations = new CopyOnWriteArrayList();
/////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////
0:     public List getExcludedDestinations(){
0:     public void setExcludedDestinations(List exludedDestinations){
1:     }    
0:     public void addExcludedDestination(ActiveMQDestination destiantion) {
1:         this.excludedDestinations.add(destiantion);
0:     public List getStaticallyIncludedDestinations(){
0:     public void setStaticallyIncludedDestinations(List staticallyIncludedDestinations){
0:     public void addStaticallyIncludedDestination(ActiveMQDestination destiantion) {
1:         this.staticallyIncludedDestinations.add(destiantion);
1:     }
1:     /**
0:      * @return Returns the dynamicallyIncludedDestinations.
1:      */
0:     public List getDynamicallyIncludedDestinations(){
0:         return dynamicallyIncludedDestinations;
1:     }
1:     /**
0:      * @param dynamicallyIncludedDestinations The dynamicallyIncludedDestinations to set.
1:      */
0:     public void setDynamicallyIncludedDestinations(List dynamicallyIncludedDestinations){
0:         this.dynamicallyIncludedDestinations = dynamicallyIncludedDestinations;
1:     }
0:     public void addDynamicallyIncludedDestination(ActiveMQDestination destiantion) {
1:         this.dynamicallyIncludedDestinations.add(destiantion);
1:     }
/////////////////////////////////////////////////////////////////////////
0:         
0:         List destsList = getDynamicallyIncludedDestinations();
0:         ActiveMQDestination dests[] = (ActiveMQDestination[]) destsList.toArray(new ActiveMQDestination[destsList.size()]);        
1:         result.setDynamicallyIncludedDestinations(dests);
0:         
0:         destsList = getExcludedDestinations();
0:         dests = (ActiveMQDestination[]) destsList.toArray(new ActiveMQDestination[destsList.size()]);        
1:         result.setExcludedDestinations(dests);
0: 
0:         destsList = getStaticallyIncludedDestinations();
0:         dests = (ActiveMQDestination[]) destsList.toArray(new ActiveMQDestination[destsList.size()]);        
1:         result.setStaticallyIncludedDestinations(dests);
0:         
commit:8963244
/////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////
0:     private boolean failover=true;
0:     private boolean decreaseNetowrkConsumerPriority;
/////////////////////////////////////////////////////////////////////////
0:         result.setDecreaseNetowrkConsumerPriority(isDecreaseNetowrkConsumerPriority());
/////////////////////////////////////////////////////////////////////////
0: 
0:     public boolean isDecreaseNetowrkConsumerPriority() {
0:         return decreaseNetowrkConsumerPriority;
0:     }
0: 
0: 
0:     public void setDecreaseNetowrkConsumerPriority(boolean decreaseNetowrkConsumerPriority) {
0:         this.decreaseNetowrkConsumerPriority = decreaseNetowrkConsumerPriority;
0:     }
0: 
commit:68d245f
/////////////////////////////////////////////////////////////////////////
0:  * @org.apache.xbean.XBean
commit:48b4869
/////////////////////////////////////////////////////////////////////////
0:  * Copyright 2005-2006 The Apache Software Foundation
commit:d29ca2a
/////////////////////////////////////////////////////////////////////////
1: /**
0:  *
0:  * Copyright 2004 The Apache Software Foundation
0:  *
0:  * Licensed under the Apache License, Version 2.0 (the "License");
0:  * you may not use this file except in compliance with the License.
0:  * You may obtain a copy of the License at
0:  *
0:  * http://www.apache.org/licenses/LICENSE-2.0
0:  *
0:  * Unless required by applicable law or agreed to in writing, software
0:  * distributed under the License is distributed on an "AS IS" BASIS,
0:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
0:  * See the License for the specific language governing permissions and
0:  * limitations under the License.
1:  */
1: package org.apache.activemq.network;
0: 
0: import java.io.IOException;
0: import java.net.URI;
0: import java.net.URISyntaxException;
0: 
1: import org.apache.activemq.Service;
0: import org.apache.activemq.command.DiscoveryEvent;
1: import org.apache.activemq.transport.Transport;
1: import org.apache.activemq.transport.TransportFactory;
0: import org.apache.activemq.transport.discovery.DiscoveryAgent;
0: import org.apache.activemq.transport.discovery.DiscoveryAgentFactory;
0: import org.apache.activemq.transport.discovery.DiscoveryListener;
1: import org.apache.activemq.util.ServiceSupport;
0: import org.apache.commons.logging.Log;
0: import org.apache.commons.logging.LogFactory;
0: 
0: import edu.emory.mathcs.backport.java.util.concurrent.ConcurrentHashMap;
0: 
1: /**
0:  * @org.xbean.XBean
0:  * 
0:  * @version $Revision$
1:  */
0: public class NetworkConnector implements Service, DiscoveryListener {
0: 
0:     private static final Log log = LogFactory.getLog(NetworkConnector.class);
0:     private DiscoveryAgent discoveryAgent;
0:     private URI localURI;
0: 
0:     private ConcurrentHashMap bridges = new ConcurrentHashMap();
0:     private String brokerName;
0:     boolean failover=true;
0:     
0:     public NetworkConnector() {
0:     }
0: 
0:     public NetworkConnector(URI localURI, DiscoveryAgent discoveryAgent) throws IOException {
0:         this.localURI = localURI;
0:         setDiscoveryAgent(discoveryAgent);
0:     }
0: 
0:     public void start() throws Exception {
0:         if (discoveryAgent == null) {
0:             throw new IllegalStateException("You must configure the 'discoveryAgent' property");
0:         }
0:         if (localURI == null) {
1:             throw new IllegalStateException("You must configure the 'localURI' property");
0:         }
0:         this.discoveryAgent.start();
0:     }
0: 
0:     public void stop() throws Exception {
0:         this.discoveryAgent.stop();
0:     }
0: 
0:     public void onServiceAdd(DiscoveryEvent event) {
0:         String url = event.getServiceName();
0:         if (url != null) {
0: 
0:             URI uri;
0:             try {
0:                 uri = new URI(url);
0:             }
0:             catch (URISyntaxException e) {
0:                 log.warn("Could not connect to remote URI: " + url + " due to bad URI syntax: " + e, e);
0:                 return;
0:             }
0: 
0:             // Has it allready been added?
0:             if (bridges.containsKey(uri) || localURI.equals(uri))
0:                 return;
0: 
0:             URI connectUri = uri;
0:             if( failover ) {
0:                 try {
0:                     connectUri = new URI("failover:"+connectUri);
0:                 } catch (URISyntaxException e) {
0:                     log.warn("Could not create failover URI: "+connectUri);
0:                     return;
0:                 }
0:             }
0:             
0:             log.info("Establishing network connection between " + localURI + " and " + event.getBrokerName() + " at " + connectUri);
0: 
0:             Transport localTransport;
0:             try {
0:                 localTransport = TransportFactory.connect(localURI);
0:             }
0:             catch (Exception e) {
0:                 log.warn("Could not connect to local URI: " + localURI + ": " + e, e);
0:                 return;
0:             }
0: 
0:             Transport remoteTransport;
0:             try {
0:                 remoteTransport = TransportFactory.connect(connectUri);
0:             }
0:             catch (Exception e) {
0:                 ServiceSupport.dispose(localTransport);
0:                 log.warn("Could not connect to remote URI: " + connectUri + ": " + e, e);
0:                 return;
0:             }
0: 
0:             Bridge bridge = createBridge(localTransport, remoteTransport, event);
0:             bridges.put(uri, bridge);
0:             try {
0:                 bridge.start();
0:             }
0:             catch (Exception e) {
0:                 ServiceSupport.dispose(localTransport);
0:                 ServiceSupport.dispose(remoteTransport);
0:                 log.warn("Could not start network bridge between: " + localURI + " and: " + uri + " due to: " + e, e);
0:                 return;
0:             }
0:         }
0:     }
0: 
0:     public void onServiceRemove(DiscoveryEvent event) {
0:         String url = event.getServiceName();
0:         if (url != null) {
0:             URI uri;
0:             try {
0:                 uri = new URI(url);
0:             } catch (URISyntaxException e) {
0:                 log.warn("Could not connect to remote URI: " + url + " due to bad URI syntax: " + e, e);
0:                 return;
0:             }
0: 
0:             Bridge bridge = (Bridge) bridges.get(uri);
0:             if (bridge == null)
0:                 return;
0: 
0:             ServiceSupport.dispose(bridge);
0:         }
0:     }
0: 
0:     // Properties
1:     // -------------------------------------------------------------------------
0:     public DiscoveryAgent getDiscoveryAgent() {
0:         return discoveryAgent;
0:     }
0: 
0:     public void setDiscoveryAgent(DiscoveryAgent discoveryAgent) {
0:         this.discoveryAgent = discoveryAgent;
0:         if (discoveryAgent != null) {
0:             this.discoveryAgent.setDiscoveryListener(this);
0:             this.discoveryAgent.setBrokerName(brokerName);
0:         }
0:     }
0: 
0:     public URI getLocalUri() throws URISyntaxException {
1:         return localURI;
0:     }
0: 
0:     public void setLocalUri(URI localURI) {
0:         this.localURI = localURI;
0:     }
0:     
0:     public void setUri(URI discoveryURI) throws IOException {
0:         setDiscoveryAgent(DiscoveryAgentFactory.createDiscoveryAgent(discoveryURI));
0:     }    
0: 
1:     // Implementation methods
1:     // -------------------------------------------------------------------------
0:     protected Bridge createBridge(Transport localTransport, Transport remoteTransport, final DiscoveryEvent event) {
0:         return new DemandForwardingBridge(localTransport, remoteTransport) {
0:             protected void serviceRemoteException(IOException error) {
0:                 super.serviceRemoteException(error);
0:                 try {
0:                     // Notify the discovery agent that the remote broker failed.
0:                     discoveryAgent.serviceFailed(event);
0:                 } catch (IOException e) {
0:                 }
0:             }
1:         };
0:     }
0: 
0:     public void setBrokerName(String brokerName) {
0:         this.brokerName = brokerName;
0:         if( discoveryAgent!=null ) {
0:             discoveryAgent.setBrokerName(brokerName);
0:         }
0:     }
0: 
0:     public boolean isFailover() {
0:         return failover;
0:     }
0: 
0:     public void setFailover(boolean reliable) {
0:         this.failover = reliable;
0:     }
0: 
0: }
author:Bosanac Dejan
-------------------------------------------------------------------------------
commit:0601fb7
/////////////////////////////////////////////////////////////////////////
1:     public boolean isStopped() {
1:         return serviceSupport.isStopped();
0:     }
0: 
1:     public boolean isStopping() {
1:         return serviceSupport.isStopping();
0:     }
0: 
commit:3326ab9
/////////////////////////////////////////////////////////////////////////
1:     public boolean isStarted() {
0: 	    return serviceSupport.isStarted();
0:     }
0: 
commit:8bf987b
/////////////////////////////////////////////////////////////////////////
1: import org.slf4j.Logger;
1: import org.slf4j.LoggerFactory;
1:     private static final Logger LOG = LoggerFactory.getLogger(NetworkConnector.class);
commit:ced6909
/////////////////////////////////////////////////////////////////////////
1: import org.apache.activemq.broker.jmx.AnnotatedMBean;
/////////////////////////////////////////////////////////////////////////
1:             AnnotatedMBean.registerMBean(getBrokerService().getManagementContext(), view, objectName);
author:Robert Davies
-------------------------------------------------------------------------------
commit:1ec71bd
/////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////
0: import java.net.URI;
0: import java.net.URISyntaxException;
0: import java.util.HashMap;
0: import java.util.HashSet;
0: import java.util.List;
0: import java.util.Map;
0: import java.util.Set;
0: import java.util.concurrent.ConcurrentLinkedQueue;
0: import java.util.concurrent.CopyOnWriteArrayList;
0: import javax.management.MalformedObjectNameException;
0: import javax.management.ObjectName;
/////////////////////////////////////////////////////////////////////////
0:         NetworkBridgeViewMBean view = new NetworkBridgeView(bridge);
0:         try {
0:             ObjectName objectName = createNetworkBridgeObjectName(bridge);
0:             getBrokerService().getManagementContext().registerMBean(view, objectName);
0:         } catch (Throwable e) {
0:             LOG.debug("Network bridge could not be registered in JMX: " + e.getMessage(), e);
/////////////////////////////////////////////////////////////////////////
0:         try {
0:             ObjectName objectName = createNetworkBridgeObjectName(bridge);
1:             getBrokerService().getManagementContext().unregisterMBean(objectName);
0:         } catch (Throwable e) {
0:             LOG.debug("Network bridge could not be unregistered in JMX: " + e.getMessage(), e);
commit:520a2de
/////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////
0:     
commit:54114cc
/////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////
0:     
/////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////
0:     public abstract String getName();
0:     
commit:ae73f86
/////////////////////////////////////////////////////////////////////////
0:  * 
0:  * Licensed to the Apache Software Foundation (ASF) under one or more contributor license agreements. See the NOTICE
0:  * file distributed with this work for additional information regarding copyright ownership. The ASF licenses this file
0:  * to You under the Apache License, Version 2.0 (the "License"); you may not use this file except in compliance with the
0:  * License. You may obtain a copy of the License at
0:  * 
0:  * 
0:  * Unless required by applicable law or agreed to in writing, software distributed under the License is distributed on
0:  * an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the License for the
0:  * specific language governing permissions and limitations under the License.
0: 
0: import static org.apache.activemq.network.NetworkConnector.log;
0: import java.util.concurrent.CopyOnWriteArrayList;
0: import org.apache.activemq.Service;
/////////////////////////////////////////////////////////////////////////
0: public abstract class NetworkConnector extends NetworkBridgeConfiguration implements Service{
0:     protected static final Log log=LogFactory.getLog(NetworkConnector.class);
0:     private String brokerName="localhost";
0:     private List excludedDestinations=new CopyOnWriteArrayList();
0:     private List dynamicallyIncludedDestinations=new CopyOnWriteArrayList();
0:     private List staticallyIncludedDestinations=new CopyOnWriteArrayList();
0:     private String name="bridge";
0:     protected ServiceSupport serviceSupport=new ServiceSupport(){
0:         protected void doStart() throws Exception{
0:            handleStart();
0:         }
0: 
0:         protected void doStop(ServiceStopper stopper) throws Exception{
1:             handleStop(stopper);
0:         }
0:     };
0: 
0:     public NetworkConnector(){
0:     public NetworkConnector(URI localURI){
0:         this.localURI=localURI;
0:     public URI getLocalUri() throws URISyntaxException{
0:     public void setLocalUri(URI localURI){
0:         this.localURI=localURI;
0:     public String getName(){
0:         if(name==null){
0:             name=createName();
0:      * @param name The name to set.
0:     public void setName(String name){
0:         this.name=name;
0:     public String getBrokerName(){
0:      * @param brokerName The brokerName to set.
0:     public void setBrokerName(String brokerName){
0:         this.brokerName=brokerName;
0:     public Set getDurableDestinations(){
1:      * @param durableDestinations The durableDestinations to set.
0:     public void setDurableDestinations(Set durableDestinations){
0:         this.durableDestinations=durableDestinations;
0:     public List getExcludedDestinations(){
0:      * @param excludedDestinations The excludedDestinations to set.
0:     public void setExcludedDestinations(List exludedDestinations){
0:         this.excludedDestinations=exludedDestinations;
0:     public void addExcludedDestination(ActiveMQDestination destiantion){
0:     public List getStaticallyIncludedDestinations(){
0:      * @param staticallyIncludedDestinations The staticallyIncludedDestinations to set.
0:     public void setStaticallyIncludedDestinations(List staticallyIncludedDestinations){
0:         this.staticallyIncludedDestinations=staticallyIncludedDestinations;
0:     public void addStaticallyIncludedDestination(ActiveMQDestination destiantion){
0:     public List getDynamicallyIncludedDestinations(){
0:      * @param dynamicallyIncludedDestinations The dynamicallyIncludedDestinations to set.
0:     public void setDynamicallyIncludedDestinations(List dynamicallyIncludedDestinations){
0:         this.dynamicallyIncludedDestinations=dynamicallyIncludedDestinations;
0:     public void addDynamicallyIncludedDestination(ActiveMQDestination destiantion){
0:     
0:     public ConnectionFilter getConnectionFilter(){
0:         return connectionFilter;
0:     }
0: 
0:     public void setConnectionFilter(ConnectionFilter connectionFilter){
0:         this.connectionFilter=connectionFilter;
0:     }
0: 
0:     protected NetworkBridge configureBridge(DemandForwardingBridgeSupport result){
0:         List destsList=getDynamicallyIncludedDestinations();
0:         ActiveMQDestination dests[]=(ActiveMQDestination[])destsList.toArray(new ActiveMQDestination[destsList.size()]);
0:         destsList=getExcludedDestinations();
0:         dests=(ActiveMQDestination[])destsList.toArray(new ActiveMQDestination[destsList.size()]);
0:         destsList=getStaticallyIncludedDestinations();
0:         dests=(ActiveMQDestination[])destsList.toArray(new ActiveMQDestination[destsList.size()]);
0:         if(durableDestinations!=null){
0:             ActiveMQDestination[] dest=new ActiveMQDestination[durableDestinations.size()];
0:             dest=(ActiveMQDestination[])durableDestinations.toArray(dest);
/////////////////////////////////////////////////////////////////////////
0:     protected Transport createLocalTransport() throws Exception{
0:         return TransportFactory.connect(localURI);
0:     }
0: 
0:     public void start() throws Exception{
1:         serviceSupport.start();
0:     }
0: 
0:     public void stop() throws Exception{
1:         serviceSupport.stop();
0:     }
0:     
0:     protected void handleStart() throws Exception{
0:         if(localURI==null){
0:     protected void handleStop(ServiceStopper stopper) throws Exception{
commit:9a79d34
/////////////////////////////////////////////////////////////////////////
0:     private boolean duplex = false;
/////////////////////////////////////////////////////////////////////////
0:         result.setDuplex(isDuplex());
/////////////////////////////////////////////////////////////////////////
0: 
0:     
0:     /**
0:      * @return the duplex
0:      */
0:     public boolean isDuplex(){
0:         return this.duplex;
0:     }
0: 
0:     
0:     /**
0:      * @param duplex the duplex to set
0:      */
0:     public void setDuplex(boolean duplex){
0:         this.duplex=duplex;
0:     }
commit:44ab524
/////////////////////////////////////////////////////////////////////////
0:     private String userName;
0:     private String password;
/////////////////////////////////////////////////////////////////////////
0:         result.setUserName(userName);
0:         result.setPassword(password);
/////////////////////////////////////////////////////////////////////////
0: 
0: 	public String getPassword() {
0: 		return password;
0: 	}
0: 
0: 	public void setPassword(String password) {
0: 		this.password = password;
0: 	}
0: 
0: 	public String getUserName() {
0: 		return userName;
0: 	}
0: 
0: 	public void setUserName(String userName) {
0: 		this.userName = userName;
0: 	}
commit:6c1d45e
/////////////////////////////////////////////////////////////////////////
0:     private String name = "bridge";
/////////////////////////////////////////////////////////////////////////
0:     
0:     /**
0:      * @return Returns the name.
0:      */
0:     public String getName(){
0:         return name;
0:     }
0: 
0:     /**
0:      * @param name The name to set.
0:      */
0:     public void setName(String name){
0:         this.name=name;
0:     }
/////////////////////////////////////////////////////////////////////////
0:         result.setName(getBrokerName());
commit:b593aca
/////////////////////////////////////////////////////////////////////////
0: import java.util.Iterator;
/////////////////////////////////////////////////////////////////////////
0:         for (Iterator i = bridges.values().iterator();i.hasNext();){
0:             Bridge bridge = (Bridge)i.next();
0:             bridge.stop();
0:         }
commit:068c646
/////////////////////////////////////////////////////////////////////////
0: import org.apache.activemq.broker.BrokerService;
1: import org.apache.activemq.command.ActiveMQDestination;
/////////////////////////////////////////////////////////////////////////
0:     private ActiveMQDestination[] excludedDestinations;
0:     private ActiveMQDestination[] dynamicallyIncludedDestinations;
0:     private ActiveMQDestination[] staticallyIncludedDestinations;
0:     private boolean dynamicOnly = false;
0:     private boolean conduitSubscriptions = true;
0:     private boolean decreaseNetworkConsumerPriority;
0:     private int networkTTL = 1;
0:     
/////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////
0:     /**
0:      * @return Returns the dynamicallyIncludedDestinations.
0:      */
0:     public ActiveMQDestination[] getDynamicallyIncludedDestinations(){
0:         return dynamicallyIncludedDestinations;
0:     /**
0:      * @param dynamicallyIncludedDestinations The dynamicallyIncludedDestinations to set.
0:      */
0:     public void setDynamicallyIncludedDestinations(ActiveMQDestination[] dynamicallyIncludedDestinations){
0:         this.dynamicallyIncludedDestinations=dynamicallyIncludedDestinations;
0: 
0:     /**
0:      * @return Returns the dynamicOnly.
0:      */
0:     public boolean isDynamicOnly(){
0:         return dynamicOnly;
0:     }
0: 
0: 
0:     /**
0:      * @param dynamicOnly The dynamicOnly to set.
0:      */
0:     public void setDynamicOnly(boolean dynamicOnly){
0:         this.dynamicOnly=dynamicOnly;
0:     }
0:     
0:     /**
0:      * @return Returns the conduitSubscriptions.
0:      */
0:     public boolean isConduitSubscriptions(){
0:         return conduitSubscriptions;
0:     }
0: 
0: 
0:     /**
0:      * @param conduitSubscriptions The conduitSubscriptions to set.
0:      */
0:     public void setConduitSubscriptions(boolean conduitSubscriptions){
0:         this.conduitSubscriptions=conduitSubscriptions;
0:     }
0:     
0:     /**
0:      * @return Returns the decreaseNetworkConsumerPriority.
0:      */
0:     public boolean isDecreaseNetworkConsumerPriority(){
0:         return decreaseNetworkConsumerPriority;
0:     }
0: 
0:     /**
0:      * @param decreaseNetworkConsumerPriority The decreaseNetworkConsumerPriority to set.
0:      */
0:     public void setDecreaseNetworkConsumerPriority(boolean decreaseNetworkConsumerPriority){
0:         this.decreaseNetworkConsumerPriority=decreaseNetworkConsumerPriority;
0:     }
0:     
0:     /**
0:      * @return Returns the networkTTL.
0:      */
0:     public int getNetworkTTL(){
0:         return networkTTL;
0:     }
0: 
0:     /**
0:      * @param networkTTL The networkTTL to set.
0:      */
0:     public void setNetworkTTL(int networkTTL){
0:         this.networkTTL=networkTTL;
0:     }
0: 
0: 
0:     /**
0:      * @return Returns the excludedDestinations.
0:      */
0:     public ActiveMQDestination[] getExcludedDestinations(){
0:         return excludedDestinations;
0:     }
0: 
0: 
0:     /**
0:      * @param excludedDestinations The excludedDestinations to set.
0:      */
0:     public void setExcludedDestinations(ActiveMQDestination[] exludedDestinations){
0:         this.excludedDestinations=exludedDestinations;
0:     }
0: 
0: 
0:     /**
0:      * @return Returns the staticallyIncludedDestinations.
0:      */
0:     public ActiveMQDestination[] getStaticallyIncludedDestinations(){
0:         return staticallyIncludedDestinations;
0:     }
0: 
0: 
0:     /**
0:      * @param staticallyIncludedDestinations The staticallyIncludedDestinations to set.
0:      */
0:     public void setStaticallyIncludedDestinations(ActiveMQDestination[] staticallyIncludedDestinations){
0:         this.staticallyIncludedDestinations=staticallyIncludedDestinations;
0:     }
0:     
0:    
0: 
0:     
0:     // Implementation methods
0:     // -------------------------------------------------------------------------
0:     protected Bridge createBridge(Transport localTransport, Transport remoteTransport, final DiscoveryEvent event) {
0:         DemandForwardingBridge result = null;
0:         if (conduitSubscriptions){
0:             if (dynamicOnly){
0:                 result = new ConduitBridge(localTransport, remoteTransport) {
0:                     protected void serviceRemoteException(IOException error) {
0:                         super.serviceRemoteException(error);
0:                         try {
0:                             // Notify the discovery agent that the remote broker failed.
0:                             discoveryAgent.serviceFailed(event);
0:                         } catch (IOException e) {
0:                         }
0:                     }
0:                 };
0:             }else {
0:                 result = new DurableConduitBridge(localTransport, remoteTransport) {
0:                     protected void serviceRemoteException(IOException error) {
0:                         super.serviceRemoteException(error);
0:                         try {
0:                             // Notify the discovery agent that the remote broker failed.
0:                             discoveryAgent.serviceFailed(event);
0:                         } catch (IOException e) {
0:                         }
0:                     }
0:                 };
0:             }
0:         }else {
0:          result = new DemandForwardingBridge(localTransport, remoteTransport) {
0:             protected void serviceRemoteException(IOException error) {
0:                 super.serviceRemoteException(error);
0:                 try {
0:                     // Notify the discovery agent that the remote broker failed.
0:                     discoveryAgent.serviceFailed(event);
0:                 } catch (IOException e) {
0:                 }
0:             }
0:         };
0:         }
0:         result.setLocalBrokerName(brokerName);
0:         result.setNetworkTTL(getNetworkTTL());
0:         result.setDecreaseNetworkConsumerPriority(isDecreaseNetworkConsumerPriority());
0:         result.setDynamicallyIncludedDestinations(getDynamicallyIncludedDestinations());
0:         result.setExcludedDestinations(getExcludedDestinations());
0:         result.setStaticallyIncludedDestinations(getStaticallyIncludedDestinations());
0:         if (durableDestinations != null){
0:             ActiveMQDestination[] dest = new ActiveMQDestination[durableDestinations.size()];
0:             dest = (ActiveMQDestination[]) durableDestinations.toArray(dest);
0:             result.setDurableDestinations(dest);
0:         }
0:         return result;
0:     } 
0: 
commit:e7106d3
/////////////////////////////////////////////////////////////////////////
0: import java.util.Set;
/////////////////////////////////////////////////////////////////////////
0:     private Set durableDestinations;
/////////////////////////////////////////////////////////////////////////
0: 
0:     /**
1:      * @return Returns the durableDestinations.
0:      */
0:     public Set getDurableDestinations(){
1:         return durableDestinations;
0:     }
0: 
0: 
0:     /**
0:      * @param durableDestinations The durableDestinations to set.
0:      */
0:     public void setDurableDestinations(Set durableDestinations){
0:         this.durableDestinations=durableDestinations;
0:     }
0: 
commit:d517eeb
/////////////////////////////////////////////////////////////////////////
0:     private String brokerName = "localhost";
0:     
0:     public NetworkConnector(){
0:         
0:     
0:     public NetworkConnector(URI localURI, DiscoveryAgent discoveryAgent) throws IOException {
/////////////////////////////////////////////////////////////////////////
0:             this.discoveryAgent.setBrokerName(brokerName);
/////////////////////////////////////////////////////////////////////////
0:         result.setLocalBrokerName(brokerName);
/////////////////////////////////////////////////////////////////////////
0: 
0:     /**
0:      * @return Returns the brokerName.
0:      */
0:     public String getBrokerName(){
0:         return brokerName;
0:     }
0: 
0: 
0:     /**
0:      * @param brokerName The brokerName to set.
0:      */
0:     public void setBrokerName(String brokerName){
0:         this.brokerName=brokerName;
0:     }
0: 
commit:5a429d9
/////////////////////////////////////////////////////////////////////////
0: import org.apache.activemq.broker.BrokerService;
/////////////////////////////////////////////////////////////////////////
0:     private BrokerService brokerService;
0:     public NetworkConnector(BrokerService service) {
0:         this.brokerService = service;
0:     public NetworkConnector(BrokerService service,URI localURI, DiscoveryAgent discoveryAgent) throws IOException {
0:         this.brokerService = service;
/////////////////////////////////////////////////////////////////////////
0:             this.discoveryAgent.setBrokerName(brokerService.getBrokerName());
/////////////////////////////////////////////////////////////////////////
0:         DemandForwardingBridge result =  new DemandForwardingBridge(localTransport, remoteTransport) {
/////////////////////////////////////////////////////////////////////////
0:         result.setLocalBrokerName(brokerService.getBrokerName());
0:         return result;
0:     
author:James Strachan
-------------------------------------------------------------------------------
commit:9bb3b0c
/////////////////////////////////////////////////////////////////////////
0:     public void setExcludedDestinations(List excludedDestinations){
0:         this.excludedDestinations=excludedDestinations;
commit:400b1fc
/////////////////////////////////////////////////////////////////////////
0: import edu.emory.mathcs.backport.java.util.concurrent.CopyOnWriteArrayList;
1: import org.apache.activemq.util.ServiceStopper;
0: import java.net.URI;
0: import java.net.URISyntaxException;
0: import java.util.List;
0: import java.util.Set;
0: public abstract class NetworkConnector extends ServiceSupport {
0:     protected static final Log log = LogFactory.getLog(NetworkConnector.class);
1:     protected URI localURI;
0:     protected boolean failover = true;
0:     protected boolean dynamicOnly = false;
0:     protected boolean conduitSubscriptions = true;
0:     public NetworkConnector() {
0:     }
0: 
0:     public NetworkConnector(URI localURI) {
/////////////////////////////////////////////////////////////////////////
0:     public String getName() {
0:         if (name == null) {
0:             name = createName();
0:      * @param name
0:      *            The name to set.
0:     public void setName(String name) {
0:         this.name = name;
0:     public String getBrokerName() {
0:         return brokerName;
0:     }
0: 
0:     /**
0:      * @param brokerName
0:      *            The brokerName to set.
0:      */
0:     public void setBrokerName(String brokerName) {
0:         this.brokerName = brokerName;
0:     }
0:     public Set getDurableDestinations() {
0:      * @param durableDestinations
0:      *            The durableDestinations to set.
0:     public void setDurableDestinations(Set durableDestinations) {
0:         this.durableDestinations = durableDestinations;
0:     public boolean isDynamicOnly() {
0:      * @param dynamicOnly
0:      *            The dynamicOnly to set.
0:     public void setDynamicOnly(boolean dynamicOnly) {
0:         this.dynamicOnly = dynamicOnly;
0: 
0:     public boolean isConduitSubscriptions() {
0:      * @param conduitSubscriptions
0:      *            The conduitSubscriptions to set.
0:     public void setConduitSubscriptions(boolean conduitSubscriptions) {
0:         this.conduitSubscriptions = conduitSubscriptions;
0: 
0:     public boolean isDecreaseNetworkConsumerPriority() {
0:      * @param decreaseNetworkConsumerPriority
0:      *            The decreaseNetworkConsumerPriority to set.
0:     public void setDecreaseNetworkConsumerPriority(boolean decreaseNetworkConsumerPriority) {
0:         this.decreaseNetworkConsumerPriority = decreaseNetworkConsumerPriority;
0: 
0:     public int getNetworkTTL() {
0:      * @param networkTTL
0:      *            The networkTTL to set.
0:     public void setNetworkTTL(int networkTTL) {
0:         this.networkTTL = networkTTL;
0:     public List getExcludedDestinations() {
0: 
0:      * @param excludedDestinations
0:      *            The excludedDestinations to set.
0:     public void setExcludedDestinations(List exludedDestinations) {
0:         this.excludedDestinations = exludedDestinations;
0:     }
0: 
0:     public List getStaticallyIncludedDestinations() {
0: 
0:      * @param staticallyIncludedDestinations
0:      *            The staticallyIncludedDestinations to set.
0:     public void setStaticallyIncludedDestinations(List staticallyIncludedDestinations) {
0:         this.staticallyIncludedDestinations = staticallyIncludedDestinations;
0: 
0: 
0:     public List getDynamicallyIncludedDestinations() {
0: 
0:      * @param dynamicallyIncludedDestinations
0:      *            The dynamicallyIncludedDestinations to set.
0:     public void setDynamicallyIncludedDestinations(List dynamicallyIncludedDestinations) {
0: 
0:     protected Bridge configureBridge(DemandForwardingBridgeSupport result) {
0:         result.setLocalBrokerName(getBrokerName());
0: 
0:         ActiveMQDestination dests[] = (ActiveMQDestination[]) destsList.toArray(new ActiveMQDestination[destsList.size()]);
0: 
0:         dests = (ActiveMQDestination[]) destsList.toArray(new ActiveMQDestination[destsList.size()]);
0:         dests = (ActiveMQDestination[]) destsList.toArray(new ActiveMQDestination[destsList.size()]);
0: 
0:         if (durableDestinations != null) {
0:     }
0:     protected abstract String createName();
0: 
0:     protected void doStart() throws Exception {
0:         if (localURI == null) {
0:             throw new IllegalStateException("You must configure the 'localURI' property");
0:         }
0:         log.info("Network Connector "+getName()+" Started");
0:     }
0: 
0:     protected void doStop(ServiceStopper stopper) throws Exception {
0:         log.info("Network Connector "+getName()+" Stopped");
0:     }
0: 
0:     protected Transport createLocalTransport() throws Exception {
0:         return TransportFactory.connect(localURI);
0:     }
============================================================================