1:a0ba0bf: /**
1:a0ba0bf:  * Licensed to the Apache Software Foundation (ASF) under one or more
1:a0ba0bf:  * contributor license agreements.  See the NOTICE file distributed with
1:a0ba0bf:  * this work for additional information regarding copyright ownership.
1:a0ba0bf:  * The ASF licenses this file to You under the Apache License, Version 2.0
1:a0ba0bf:  * (the "License"); you may not use this file except in compliance with
1:a0ba0bf:  * the License.  You may obtain a copy of the License at
1:a0ba0bf:  *
1:a0ba0bf:  *      http://www.apache.org/licenses/LICENSE-2.0
1:a0ba0bf:  *
1:a0ba0bf:  * Unless required by applicable law or agreed to in writing, software
1:a0ba0bf:  * distributed under the License is distributed on an "AS IS" BASIS,
1:a0ba0bf:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:a0ba0bf:  * See the License for the specific language governing permissions and
1:a0ba0bf:  * limitations under the License.
1:a0ba0bf:  */
1:a0ba0bf: package org.apache.activemq.bugs;
1:a0ba0bf: 
1:a0ba0bf: import org.apache.activemq.ActiveMQConnectionFactory;
1:a0ba0bf: import org.apache.activemq.broker.BrokerService;
1:a0ba0bf: import org.apache.activemq.broker.region.RegionBroker;
1:a0ba0bf: import org.apache.activemq.broker.region.policy.PolicyEntry;
1:a0ba0bf: import org.apache.activemq.broker.region.policy.PolicyMap;
1:a0ba0bf: import org.apache.activemq.command.ActiveMQDestination;
1:a0ba0bf: import org.apache.activemq.command.ActiveMQQueue;
1:a0ba0bf: import org.apache.activemq.store.PersistenceAdapter;
1:a0ba0bf: import org.apache.activemq.store.kahadb.KahaDBStore;
1:a0ba0bf: import org.apache.activemq.usage.MemoryUsage;
1:a0ba0bf: import org.apache.activemq.usage.StoreUsage;
1:a0ba0bf: import org.apache.activemq.usage.SystemUsage;
1:a0ba0bf: import org.junit.After;
1:a0ba0bf: import org.junit.Before;
1:a0ba0bf: import org.junit.Test;
1:a0ba0bf: import org.slf4j.Logger;
1:a0ba0bf: import org.slf4j.LoggerFactory;
1:a0ba0bf: 
1:a0ba0bf: import javax.jms.Connection;
1:a0ba0bf: import javax.jms.Destination;
1:a0ba0bf: import javax.jms.Message;
1:a0ba0bf: import javax.jms.MessageConsumer;
1:a0ba0bf: import javax.jms.MessageProducer;
1:a0ba0bf: import javax.jms.Session;
1:a0ba0bf: import javax.jms.TextMessage;
1:a0ba0bf: import java.util.concurrent.CountDownLatch;
1:a0ba0bf: import java.util.concurrent.ExecutorService;
1:a0ba0bf: import java.util.concurrent.Executors;
1:a0ba0bf: import java.util.concurrent.TimeUnit;
1:a0ba0bf: import java.util.concurrent.atomic.AtomicInteger;
1:a0ba0bf: 
1:a0ba0bf: import static org.junit.Assert.assertEquals;
1:a0ba0bf: 
1:a0ba0bf: public class DuplicateFromStoreTest {
1:a0ba0bf:     static Logger LOG = LoggerFactory.getLogger(DuplicateFromStoreTest.class);
1:a0ba0bf:     String activemqURL;
1:a0ba0bf:     BrokerService broker;
1:a0ba0bf: 
1:a0ba0bf:     protected final static String DESTNAME = "TEST";
1:a0ba0bf:     protected final static int NUM_PRODUCERS = 100;
1:a0ba0bf:     protected final static int NUM_CONSUMERS = 20;
1:a0ba0bf: 
1:be6f4b6:     protected final static int NUM_MSGS = 20000;
1:a0ba0bf:     protected final static int CONSUMER_SLEEP = 0;
1:a0ba0bf:     protected final static int PRODUCER_SLEEP = 10;
1:a0ba0bf: 
1:a0ba0bf:     public static CountDownLatch producersFinished = new CountDownLatch(NUM_PRODUCERS);
1:a0ba0bf:     public static CountDownLatch consumersFinished = new CountDownLatch(NUM_CONSUMERS );
1:a0ba0bf: 
1:a0ba0bf:     public AtomicInteger totalMessagesToSend = new AtomicInteger(NUM_MSGS);
1:8e576be:     public AtomicInteger totalMessagesSent = new AtomicInteger(NUM_MSGS);
1:8e576be: 
1:a0ba0bf:     public AtomicInteger totalReceived = new AtomicInteger(0);
1:a0ba0bf: 
1:a0ba0bf:     public int messageSize = 16*1000;
1:a0ba0bf: 
1:a0ba0bf: 
1:a0ba0bf:     @Before
1:a0ba0bf:     public void startBroker() throws Exception {
1:a0ba0bf: 
1:a0ba0bf:         broker = new BrokerService();
1:a0ba0bf:         broker.setDeleteAllMessagesOnStartup(true);
1:a0ba0bf:         broker.addConnector("tcp://0.0.0.0:0");
1:a0ba0bf: 
1:a0ba0bf:         // Create <policyEntry>
1:a0ba0bf:         PolicyEntry policy = new PolicyEntry();
1:a0ba0bf:         ActiveMQDestination dest = new ActiveMQQueue(">");
1:a0ba0bf:         policy.setDestination(dest);
1:a0ba0bf:         policy.setMemoryLimit(10 * 1024 * 1024); // 10 MB
1:a0ba0bf:         policy.setExpireMessagesPeriod(0);
1:a0ba0bf:         policy.setEnableAudit(false); // allow any duplicates from the store to bubble up to the q impl
1:be6f4b6:         policy.setQueuePrefetch(100);
1:a0ba0bf:         PolicyMap policies = new PolicyMap();
1:a0ba0bf:         policies.put(dest, policy);
1:a0ba0bf:         broker.setDestinationPolicy(policies);
1:a0ba0bf: 
1:a0ba0bf:         // configure <systemUsage>
1:a0ba0bf:         MemoryUsage memoryUsage = new MemoryUsage();
1:8e576be:         memoryUsage.setPercentOfJvmHeap(50);
1:a0ba0bf: 
1:a0ba0bf:         StoreUsage storeUsage = new StoreUsage();
1:a0ba0bf:         storeUsage.setLimit(8 * 1024 * 1024 * 1024); // 8 gb
1:a0ba0bf: 
1:a0ba0bf:         SystemUsage memoryManager = new SystemUsage();
1:a0ba0bf:         memoryManager.setMemoryUsage(memoryUsage);
1:a0ba0bf:         memoryManager.setStoreUsage(storeUsage);
1:a0ba0bf:         broker.setSystemUsage(memoryManager);
1:a0ba0bf: 
1:a0ba0bf:         // configure KahaDB persistence
1:a0ba0bf:         PersistenceAdapter kahadb = new KahaDBStore();
1:a0ba0bf:         ((KahaDBStore) kahadb).setConcurrentStoreAndDispatchQueues(true);
1:a0ba0bf:         broker.setPersistenceAdapter(kahadb);
1:a0ba0bf: 
1:a0ba0bf:         // start broker
1:a0ba0bf:         broker.start();
1:a0ba0bf:         broker.waitUntilStarted();
1:a0ba0bf: 
1:a0ba0bf:         activemqURL = broker.getTransportConnectorByScheme("tcp").getPublishableConnectString();
2:a0ba0bf:     }
1:a0ba0bf: 
1:a0ba0bf:     @After
1:a0ba0bf:     public void stopBroker() throws Exception {
1:a0ba0bf:         if (broker != null) {
1:a0ba0bf:             broker.stop();
1:a0ba0bf:         }
1:a0ba0bf:     }
1:a0ba0bf: 
1:a0ba0bf:     @Test
1:a0ba0bf:     public void testDuplicateMessage() throws Exception {
1:a0ba0bf:         LOG.info("Testing for duplicate messages.");
1:a0ba0bf: 
1:a0ba0bf:         //create producer and consumer threads
1:a0ba0bf:         ExecutorService producers = Executors.newFixedThreadPool(NUM_PRODUCERS);
1:a0ba0bf:         ExecutorService consumers = Executors.newFixedThreadPool(NUM_CONSUMERS);
1:a0ba0bf: 
1:a0ba0bf:         createOpenwireClients(producers, consumers);
1:a0ba0bf: 
1:a0ba0bf:         LOG.info("All producers and consumers got started. Awaiting their termination");
1:a0ba0bf:         producersFinished.await(100, TimeUnit.MINUTES);
1:8e576be:         LOG.info("All producers have terminated. remaining to send: " + totalMessagesToSend.get() + ", sent:" + totalMessagesSent.get());
1:a0ba0bf: 
1:a0ba0bf:         consumersFinished.await(100, TimeUnit.MINUTES);
1:a0ba0bf:         LOG.info("All consumers have terminated.");
1:a0ba0bf: 
1:a0ba0bf:         producers.shutdownNow();
1:a0ba0bf:         consumers.shutdownNow();
1:a0ba0bf: 
1:a0ba0bf:         assertEquals("no messages pending, i.e. dlq empty", 0l, ((RegionBroker)broker.getRegionBroker()).getDestinationStatistics().getMessages().getCount());
1:a0ba0bf: 
1:a0ba0bf:         // validate cache can be enabled if disabled
1:a0ba0bf: 
1:a0ba0bf:     }
1:a0ba0bf: 
1:a0ba0bf: 
1:a0ba0bf:     protected void createOpenwireClients(ExecutorService producers, ExecutorService consumers) {
1:a0ba0bf:         for (int i = 0; i < NUM_CONSUMERS; i++) {
1:a0ba0bf:             LOG.trace("Creating consumer for destination " + DESTNAME);
1:a0ba0bf:             Consumer consumer = new Consumer(DESTNAME, false);
1:a0ba0bf:             consumers.submit(consumer);
1:a0ba0bf:             // wait for consumer to signal it has fully initialized
1:a0ba0bf:             synchronized(consumer.init) {
1:a0ba0bf:                 try {
1:a0ba0bf:                     consumer.init.wait();
1:a0ba0bf:                 } catch (InterruptedException e) {
1:a0ba0bf:                     LOG.error(e.toString(), e);
1:a0ba0bf:                 }
1:a0ba0bf:             }
1:a0ba0bf:         }
1:a0ba0bf: 
1:a0ba0bf:         for (int i = 0; i < NUM_PRODUCERS; i++) {
1:a0ba0bf:             LOG.trace("Creating producer for destination " + DESTNAME );
1:a0ba0bf:             Producer producer = new Producer(DESTNAME, false, 0);
1:a0ba0bf:             producers.submit(producer);
1:a0ba0bf:         }
1:a0ba0bf:     }
1:a0ba0bf: 
1:a0ba0bf:     class Producer implements Runnable {
1:a0ba0bf: 
1:a0ba0bf:         Logger log = LOG;
1:a0ba0bf:         protected String destName = "TEST";
1:a0ba0bf:         protected boolean isTopicDest = false;
1:a0ba0bf: 
1:a0ba0bf: 
1:a0ba0bf:         public Producer(String dest, boolean isTopic, int ttl) {
1:a0ba0bf:             this.destName = dest;
1:a0ba0bf:             this.isTopicDest = isTopic;
1:a0ba0bf:         }
1:a0ba0bf: 
1:a0ba0bf: 
1:a0ba0bf:         /**
1:a0ba0bf:          * Connect to broker and constantly send messages
1:a0ba0bf:          */
1:a0ba0bf:         public void run() {
1:a0ba0bf: 
1:a0ba0bf:             Connection connection = null;
1:a0ba0bf:             Session session = null;
1:a0ba0bf:             MessageProducer producer = null;
1:a0ba0bf: 
1:a0ba0bf:             try {
1:a0ba0bf:                 ActiveMQConnectionFactory amq = new ActiveMQConnectionFactory(activemqURL);
1:a0ba0bf:                 connection = amq.createConnection();
1:a0ba0bf: 
1:a0ba0bf:                 connection.setExceptionListener(new javax.jms.ExceptionListener() {
1:a0ba0bf:                     public void onException(javax.jms.JMSException e) {
1:a0ba0bf:                         e.printStackTrace();
1:a0ba0bf:                     }
1:a0ba0bf:                 });
1:a0ba0bf:                 connection.start();
1:a0ba0bf: 
1:a0ba0bf:                 // Create a Session
1:a0ba0bf:                 session = connection.createSession(false, Session.AUTO_ACKNOWLEDGE);
1:a0ba0bf:                 Destination destination;
1:a0ba0bf:                 if (isTopicDest) {
1:a0ba0bf:                     // Create the destination (Topic or Queue)
1:a0ba0bf:                     destination = session.createTopic(destName);
1:a0ba0bf:                 } else {
1:a0ba0bf:                     destination = session.createQueue(destName);
1:a0ba0bf:                 }
1:a0ba0bf:                 // Create a MessageProducer from the Session to the Topic or Queue
1:a0ba0bf:                 producer = session.createProducer(destination);
1:a0ba0bf: 
1:a0ba0bf:                 // Create message
1:a0ba0bf:                 long counter = 0;
1:a0ba0bf:                 //enlarge msg to 16 kb
1:a0ba0bf:                 int msgSize = 16 * 1024;
1:a0ba0bf:                 StringBuilder stringBuilder = new StringBuilder();
1:a0ba0bf:                 stringBuilder.setLength(msgSize + 15);
1:a0ba0bf:                 stringBuilder.append("Message: ");
1:a0ba0bf:                 stringBuilder.append(counter);
1:a0ba0bf:                 for (int j = 0; j < (msgSize / 10); j++) {
1:a0ba0bf:                     stringBuilder.append("XXXXXXXXXX");
1:a0ba0bf:                 }
1:a0ba0bf:                 String text = stringBuilder.toString();
1:a0ba0bf:                 TextMessage message = session.createTextMessage(text);
1:a0ba0bf: 
1:a0ba0bf:                 // send message
1:a0ba0bf:                 while (totalMessagesToSend.decrementAndGet() >= 0) {
1:a0ba0bf:                     producer.send(message);
1:8e576be:                     totalMessagesSent.incrementAndGet();
1:a0ba0bf:                     log.debug("Sent message: " + counter);
1:a0ba0bf:                     counter++;
1:a0ba0bf: 
1:a0ba0bf:                     if ((counter % 10000) == 0)
1:a0ba0bf:                         log.info("sent " + counter + " messages");
1:a0ba0bf: 
1:a0ba0bf:                     Thread.sleep(PRODUCER_SLEEP);
1:a0ba0bf:                 }
1:a0ba0bf:             } catch (Exception ex) {
1:8e576be:                 log.error(ex.toString());
1:a0ba0bf:                 return;
1:a0ba0bf:             } finally {
1:a0ba0bf:                 try {
1:a0ba0bf:                     if (connection != null) {
1:a0ba0bf:                         connection.close();
1:a0ba0bf:                     }
1:a0ba0bf:                 } catch (Exception ignored) {
1:a0ba0bf:                 } finally {
1:a0ba0bf:                     producersFinished.countDown();
1:a0ba0bf:                 }
1:a0ba0bf:             }
1:a0ba0bf:             log.debug("Closing producer for " + destName);
1:a0ba0bf:         }
1:a0ba0bf:     }
1:a0ba0bf: 
1:a0ba0bf:     class Consumer implements Runnable {
1:a0ba0bf: 
1:a0ba0bf:         public Object init = new Object();
1:a0ba0bf:         protected String queueName = "TEST";
1:a0ba0bf:         boolean isTopic = false;
1:a0ba0bf: 
1:a0ba0bf:         Logger log = LOG;
1:a0ba0bf: 
1:a0ba0bf:         public Consumer(String destName, boolean topic) {
1:a0ba0bf:             this.isTopic = topic;
1:a0ba0bf:             this.queueName = destName;
1:a0ba0bf:         }
1:a0ba0bf: 
1:a0ba0bf:         /**
1:a0ba0bf:          * connect to broker and receive messages
1:a0ba0bf:          */
1:a0ba0bf:         public void run() {
1:a0ba0bf: 
1:a0ba0bf:             Connection connection = null;
1:a0ba0bf:             Session session = null;
1:a0ba0bf:             MessageConsumer consumer = null;
1:a0ba0bf: 
1:a0ba0bf:             try {
1:a0ba0bf:                 ActiveMQConnectionFactory amq = new ActiveMQConnectionFactory(activemqURL);
1:a0ba0bf:                 connection = amq.createConnection();
1:a0ba0bf:                 connection.setExceptionListener(new javax.jms.ExceptionListener() {
1:a0ba0bf:                     public void onException(javax.jms.JMSException e) {
1:a0ba0bf:                         e.printStackTrace();
1:a0ba0bf:                     }
1:a0ba0bf:                 });
1:a0ba0bf:                 connection.start();
1:a0ba0bf:                 // Create a Session
1:a0ba0bf:                 session = connection.createSession(false, Session.AUTO_ACKNOWLEDGE);
1:a0ba0bf:                 // Create the destination (Topic or Queue)
1:a0ba0bf:                 Destination destination = null;
1:a0ba0bf:                 if (isTopic)
1:a0ba0bf:                     destination = session.createTopic(queueName);
1:a0ba0bf:                 else
1:a0ba0bf:                     destination = session.createQueue(queueName);
1:a0ba0bf: 
1:a0ba0bf:                 //Create a MessageConsumer from the Session to the Topic or Queue
1:a0ba0bf:                 consumer = session.createConsumer(destination);
1:a0ba0bf: 
1:a0ba0bf:                 synchronized (init) {
1:a0ba0bf:                     init.notifyAll();
1:a0ba0bf:                 }
1:a0ba0bf: 
1:a0ba0bf:                 // Wait for a message
1:a0ba0bf:                 long counter = 0;
1:a0ba0bf:                 while (totalReceived.get() < NUM_MSGS) {
1:a0ba0bf:                     Message message2 = consumer.receive(5000);
1:a0ba0bf: 
1:a0ba0bf:                     if (message2 instanceof TextMessage) {
1:a0ba0bf:                         TextMessage textMessage = (TextMessage) message2;
1:a0ba0bf:                         String text = textMessage.getText();
1:a0ba0bf:                         log.debug("Received: " + text.substring(0, 50));
1:8e576be:                     } else if (totalReceived.get() < NUM_MSGS) {
1:8e576be:                         log.error("Received message of unsupported type. Expecting TextMessage. count: " + totalReceived.get());
1:a0ba0bf:                     } else {
1:8e576be:                         // all done
1:a0ba0bf:                         break;
1:a0ba0bf:                     }
1:a0ba0bf:                     if (message2 != null) {
1:a0ba0bf:                         counter++;
1:a0ba0bf:                         totalReceived.incrementAndGet();
1:a0ba0bf:                         if ((counter % 10000) == 0)
1:a0ba0bf:                             log.info("received " + counter + " messages");
1:a0ba0bf: 
1:a0ba0bf:                         Thread.sleep(CONSUMER_SLEEP);
1:a0ba0bf:                     }
1:a0ba0bf:                 }
1:a0ba0bf:             } catch (Exception e) {
1:a0ba0bf:                 log.error("Error in Consumer: " + e.getMessage());
1:a0ba0bf:                 return;
1:a0ba0bf:             } finally {
1:a0ba0bf:                 try {
1:a0ba0bf:                     if (connection != null) {
1:a0ba0bf:                         connection.close();
1:a0ba0bf:                     }
1:a0ba0bf:                 } catch (Exception ignored) {
1:a0ba0bf:                 } finally {
1:a0ba0bf:                     consumersFinished.countDown();
1:a0ba0bf:                 }
1:a0ba0bf:             }
1:a0ba0bf:         }
1:a0ba0bf:     }
1:a0ba0bf: }
============================================================================
author:gtully
-------------------------------------------------------------------------------
commit:8e576be
/////////////////////////////////////////////////////////////////////////
1:     public AtomicInteger totalMessagesSent = new AtomicInteger(NUM_MSGS);
1: 
/////////////////////////////////////////////////////////////////////////
1:         memoryUsage.setPercentOfJvmHeap(50);
/////////////////////////////////////////////////////////////////////////
1:         LOG.info("All producers have terminated. remaining to send: " + totalMessagesToSend.get() + ", sent:" + totalMessagesSent.get());
/////////////////////////////////////////////////////////////////////////
1:                     totalMessagesSent.incrementAndGet();
/////////////////////////////////////////////////////////////////////////
1:                 log.error(ex.toString());
/////////////////////////////////////////////////////////////////////////
1:                     } else if (totalReceived.get() < NUM_MSGS) {
1:                         log.error("Received message of unsupported type. Expecting TextMessage. count: " + totalReceived.get());
1:                         // all done
commit:be6f4b6
/////////////////////////////////////////////////////////////////////////
1:     protected final static int NUM_MSGS = 20000;
/////////////////////////////////////////////////////////////////////////
1:         policy.setQueuePrefetch(100);
commit:a0ba0bf
/////////////////////////////////////////////////////////////////////////
1: /**
1:  * Licensed to the Apache Software Foundation (ASF) under one or more
1:  * contributor license agreements.  See the NOTICE file distributed with
1:  * this work for additional information regarding copyright ownership.
1:  * The ASF licenses this file to You under the Apache License, Version 2.0
1:  * (the "License"); you may not use this file except in compliance with
1:  * the License.  You may obtain a copy of the License at
1:  *
1:  *      http://www.apache.org/licenses/LICENSE-2.0
1:  *
1:  * Unless required by applicable law or agreed to in writing, software
1:  * distributed under the License is distributed on an "AS IS" BASIS,
1:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:  * See the License for the specific language governing permissions and
1:  * limitations under the License.
1:  */
1: package org.apache.activemq.bugs;
1: 
1: import org.apache.activemq.ActiveMQConnectionFactory;
1: import org.apache.activemq.broker.BrokerService;
1: import org.apache.activemq.broker.region.RegionBroker;
1: import org.apache.activemq.broker.region.policy.PolicyEntry;
1: import org.apache.activemq.broker.region.policy.PolicyMap;
1: import org.apache.activemq.command.ActiveMQDestination;
1: import org.apache.activemq.command.ActiveMQQueue;
1: import org.apache.activemq.store.PersistenceAdapter;
1: import org.apache.activemq.store.kahadb.KahaDBStore;
1: import org.apache.activemq.usage.MemoryUsage;
1: import org.apache.activemq.usage.StoreUsage;
1: import org.apache.activemq.usage.SystemUsage;
1: import org.junit.After;
1: import org.junit.Before;
1: import org.junit.Test;
1: import org.slf4j.Logger;
1: import org.slf4j.LoggerFactory;
1: 
1: import javax.jms.Connection;
1: import javax.jms.Destination;
1: import javax.jms.Message;
1: import javax.jms.MessageConsumer;
1: import javax.jms.MessageProducer;
1: import javax.jms.Session;
1: import javax.jms.TextMessage;
1: import java.util.concurrent.CountDownLatch;
1: import java.util.concurrent.ExecutorService;
1: import java.util.concurrent.Executors;
1: import java.util.concurrent.TimeUnit;
1: import java.util.concurrent.atomic.AtomicInteger;
1: 
1: import static org.junit.Assert.assertEquals;
1: 
1: public class DuplicateFromStoreTest {
1:     static Logger LOG = LoggerFactory.getLogger(DuplicateFromStoreTest.class);
1:     String activemqURL;
1:     BrokerService broker;
1: 
1:     protected final static String DESTNAME = "TEST";
1:     protected final static int NUM_PRODUCERS = 100;
1:     protected final static int NUM_CONSUMERS = 20;
1: 
0:     protected final static int NUM_MSGS = 40000;
1:     protected final static int CONSUMER_SLEEP = 0;
1:     protected final static int PRODUCER_SLEEP = 10;
1: 
1:     public static CountDownLatch producersFinished = new CountDownLatch(NUM_PRODUCERS);
1:     public static CountDownLatch consumersFinished = new CountDownLatch(NUM_CONSUMERS );
1: 
1:     public AtomicInteger totalMessagesToSend = new AtomicInteger(NUM_MSGS);
1:     public AtomicInteger totalReceived = new AtomicInteger(0);
1: 
1:     public int messageSize = 16*1000;
1: 
1: 
1:     @Before
1:     public void startBroker() throws Exception {
1: 
1:         broker = new BrokerService();
1:         broker.setDeleteAllMessagesOnStartup(true);
1:         broker.addConnector("tcp://0.0.0.0:0");
1: 
1:         // Create <policyEntry>
1:         PolicyEntry policy = new PolicyEntry();
1:         ActiveMQDestination dest = new ActiveMQQueue(">");
1:         policy.setDestination(dest);
1:         policy.setMemoryLimit(10 * 1024 * 1024); // 10 MB
1:         policy.setExpireMessagesPeriod(0);
1:         policy.setEnableAudit(false); // allow any duplicates from the store to bubble up to the q impl
1:         PolicyMap policies = new PolicyMap();
1:         policies.put(dest, policy);
1:         broker.setDestinationPolicy(policies);
1: 
1:         // configure <systemUsage>
1:         MemoryUsage memoryUsage = new MemoryUsage();
0:         memoryUsage.setPercentOfJvmHeap(70);
1: 
1:         StoreUsage storeUsage = new StoreUsage();
1:         storeUsage.setLimit(8 * 1024 * 1024 * 1024); // 8 gb
1: 
1:         SystemUsage memoryManager = new SystemUsage();
1:         memoryManager.setMemoryUsage(memoryUsage);
1:         memoryManager.setStoreUsage(storeUsage);
1:         broker.setSystemUsage(memoryManager);
1: 
1:         // configure KahaDB persistence
1:         PersistenceAdapter kahadb = new KahaDBStore();
1:         ((KahaDBStore) kahadb).setConcurrentStoreAndDispatchQueues(true);
1:         broker.setPersistenceAdapter(kahadb);
1: 
1:         // start broker
1:         broker.start();
1:         broker.waitUntilStarted();
1: 
1:         activemqURL = broker.getTransportConnectorByScheme("tcp").getPublishableConnectString();
1:     }
1: 
1:     @After
1:     public void stopBroker() throws Exception {
1:         if (broker != null) {
1:             broker.stop();
1:         }
1:     }
1: 
1:     @Test
1:     public void testDuplicateMessage() throws Exception {
1:         LOG.info("Testing for duplicate messages.");
1: 
1:         //create producer and consumer threads
1:         ExecutorService producers = Executors.newFixedThreadPool(NUM_PRODUCERS);
1:         ExecutorService consumers = Executors.newFixedThreadPool(NUM_CONSUMERS);
1: 
1:         createOpenwireClients(producers, consumers);
1: 
1:         LOG.info("All producers and consumers got started. Awaiting their termination");
1:         producersFinished.await(100, TimeUnit.MINUTES);
0:         LOG.info("All producers have terminated.");
1: 
1:         consumersFinished.await(100, TimeUnit.MINUTES);
1:         LOG.info("All consumers have terminated.");
1: 
1:         producers.shutdownNow();
1:         consumers.shutdownNow();
1: 
1:         assertEquals("no messages pending, i.e. dlq empty", 0l, ((RegionBroker)broker.getRegionBroker()).getDestinationStatistics().getMessages().getCount());
1: 
1:         // validate cache can be enabled if disabled
1: 
1:     }
1: 
1: 
1:     protected void createOpenwireClients(ExecutorService producers, ExecutorService consumers) {
1:         for (int i = 0; i < NUM_CONSUMERS; i++) {
1:             LOG.trace("Creating consumer for destination " + DESTNAME);
1:             Consumer consumer = new Consumer(DESTNAME, false);
1:             consumers.submit(consumer);
1:             // wait for consumer to signal it has fully initialized
1:             synchronized(consumer.init) {
1:                 try {
1:                     consumer.init.wait();
1:                 } catch (InterruptedException e) {
1:                     LOG.error(e.toString(), e);
1:                 }
1:             }
1:         }
1: 
1:         for (int i = 0; i < NUM_PRODUCERS; i++) {
1:             LOG.trace("Creating producer for destination " + DESTNAME );
1:             Producer producer = new Producer(DESTNAME, false, 0);
1:             producers.submit(producer);
1:         }
1:     }
1: 
1:     class Producer implements Runnable {
1: 
1:         Logger log = LOG;
1:         protected String destName = "TEST";
1:         protected boolean isTopicDest = false;
1: 
1: 
1:         public Producer(String dest, boolean isTopic, int ttl) {
1:             this.destName = dest;
1:             this.isTopicDest = isTopic;
1:         }
1: 
1: 
1:         /**
1:          * Connect to broker and constantly send messages
1:          */
1:         public void run() {
1: 
1:             Connection connection = null;
1:             Session session = null;
1:             MessageProducer producer = null;
1: 
1:             try {
1:                 ActiveMQConnectionFactory amq = new ActiveMQConnectionFactory(activemqURL);
1:                 connection = amq.createConnection();
1: 
1:                 connection.setExceptionListener(new javax.jms.ExceptionListener() {
1:                     public void onException(javax.jms.JMSException e) {
1:                         e.printStackTrace();
1:                     }
1:                 });
1:                 connection.start();
1: 
1:                 // Create a Session
1:                 session = connection.createSession(false, Session.AUTO_ACKNOWLEDGE);
1:                 Destination destination;
1:                 if (isTopicDest) {
1:                     // Create the destination (Topic or Queue)
1:                     destination = session.createTopic(destName);
1:                 } else {
1:                     destination = session.createQueue(destName);
1:                 }
1:                 // Create a MessageProducer from the Session to the Topic or Queue
1:                 producer = session.createProducer(destination);
1: 
1:                 // Create message
1:                 long counter = 0;
1:                 //enlarge msg to 16 kb
1:                 int msgSize = 16 * 1024;
1:                 StringBuilder stringBuilder = new StringBuilder();
1:                 stringBuilder.setLength(msgSize + 15);
1:                 stringBuilder.append("Message: ");
1:                 stringBuilder.append(counter);
1:                 for (int j = 0; j < (msgSize / 10); j++) {
1:                     stringBuilder.append("XXXXXXXXXX");
1:                 }
1:                 String text = stringBuilder.toString();
1:                 TextMessage message = session.createTextMessage(text);
1: 
1:                 // send message
1:                 while (totalMessagesToSend.decrementAndGet() >= 0) {
1:                     producer.send(message);
1:                     log.debug("Sent message: " + counter);
1:                     counter++;
1: 
1:                     if ((counter % 10000) == 0)
1:                         log.info("sent " + counter + " messages");
1: 
1:                     Thread.sleep(PRODUCER_SLEEP);
1:                 }
1:             } catch (Exception ex) {
0:                 log.error(ex.getMessage());
1:                 return;
1:             } finally {
1:                 try {
1:                     if (connection != null) {
1:                         connection.close();
1:                     }
1:                 } catch (Exception ignored) {
1:                 } finally {
1:                     producersFinished.countDown();
1:                 }
1:             }
1:             log.debug("Closing producer for " + destName);
1:         }
1:     }
1: 
1:     class Consumer implements Runnable {
1: 
1:         public Object init = new Object();
1:         protected String queueName = "TEST";
1:         boolean isTopic = false;
1: 
1:         Logger log = LOG;
1: 
1:         public Consumer(String destName, boolean topic) {
1:             this.isTopic = topic;
1:             this.queueName = destName;
1:         }
1: 
1:         /**
1:          * connect to broker and receive messages
1:          */
1:         public void run() {
1: 
1:             Connection connection = null;
1:             Session session = null;
1:             MessageConsumer consumer = null;
1: 
1:             try {
1:                 ActiveMQConnectionFactory amq = new ActiveMQConnectionFactory(activemqURL);
1:                 connection = amq.createConnection();
1:                 connection.setExceptionListener(new javax.jms.ExceptionListener() {
1:                     public void onException(javax.jms.JMSException e) {
1:                         e.printStackTrace();
1:                     }
1:                 });
1:                 connection.start();
1:                 // Create a Session
1:                 session = connection.createSession(false, Session.AUTO_ACKNOWLEDGE);
1:                 // Create the destination (Topic or Queue)
1:                 Destination destination = null;
1:                 if (isTopic)
1:                     destination = session.createTopic(queueName);
1:                 else
1:                     destination = session.createQueue(queueName);
1: 
1:                 //Create a MessageConsumer from the Session to the Topic or Queue
1:                 consumer = session.createConsumer(destination);
1: 
1:                 synchronized (init) {
1:                     init.notifyAll();
1:                 }
1: 
1:                 // Wait for a message
1:                 long counter = 0;
1:                 while (totalReceived.get() < NUM_MSGS) {
1:                     Message message2 = consumer.receive(5000);
1: 
1:                     if (message2 instanceof TextMessage) {
1:                         TextMessage textMessage = (TextMessage) message2;
1:                         String text = textMessage.getText();
1:                         log.debug("Received: " + text.substring(0, 50));
1:                     } else {
0:                         if (totalReceived.get() < NUM_MSGS) {
0:                             log.error("Received message of unsupported type. Expecting TextMessage. " + message2);
1:                         }
1:                         break;
1:                     }
1:                     if (message2 != null) {
1:                         counter++;
1:                         totalReceived.incrementAndGet();
1:                         if ((counter % 10000) == 0)
1:                             log.info("received " + counter + " messages");
1: 
1:                         Thread.sleep(CONSUMER_SLEEP);
1:                     }
1:                 }
1:             } catch (Exception e) {
1:                 log.error("Error in Consumer: " + e.getMessage());
1:                 return;
1:             } finally {
1:                 try {
1:                     if (connection != null) {
1:                         connection.close();
1:                     }
1:                 } catch (Exception ignored) {
1:                 } finally {
1:                     consumersFinished.countDown();
1:                 }
1:             }
1:         }
1:     }
1: }
============================================================================