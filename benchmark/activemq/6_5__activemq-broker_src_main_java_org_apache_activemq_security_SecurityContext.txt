1:d29ca2a: /**
1:57b4941:  * Licensed to the Apache Software Foundation (ASF) under one or more
1:57b4941:  * contributor license agreements.  See the NOTICE file distributed with
1:57b4941:  * this work for additional information regarding copyright ownership.
1:57b4941:  * The ASF licenses this file to You under the Apache License, Version 2.0
1:57b4941:  * (the "License"); you may not use this file except in compliance with
1:57b4941:  * the License.  You may obtain a copy of the License at
3:d29ca2a:  *
1:230a86c:  *      http://www.apache.org/licenses/LICENSE-2.0
1:d29ca2a:  *
1:d29ca2a:  * Unless required by applicable law or agreed to in writing, software
1:d29ca2a:  * distributed under the License is distributed on an "AS IS" BASIS,
1:d29ca2a:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:d29ca2a:  * See the License for the specific language governing permissions and
1:d29ca2a:  * limitations under the License.
1:d29ca2a:  */
1:d29ca2a: package org.apache.activemq.security;
2:d29ca2a: 
1:3dbc9c9: import java.security.Principal;
1:74a7a8b: import java.util.Collections;
1:d29ca2a: import java.util.HashSet;
1:c6de4d7: import java.util.Iterator;
1:d29ca2a: import java.util.Set;
1:86cbdfd: import java.util.concurrent.ConcurrentHashMap;
1:9ef4259: import java.util.concurrent.ConcurrentMap;
1:d29ca2a: 
1:933eb2f: import org.apache.activemq.command.ActiveMQDestination;
1:933eb2f: 
1:d29ca2a: /**
1:d29ca2a:  * Used to cache up authorizations so that subsequent requests are faster.
1:b0c2a40:  *
1:d29ca2a:  *
1:d29ca2a:  */
1:fc00993: public abstract class SecurityContext {
1:d29ca2a: 
1:1d882e9:     public static final SecurityContext BROKER_SECURITY_CONTEXT = new SecurityContext("ActiveMQBroker") {
1:1d882e9:         @Override
1:1d882e9:         public boolean isBrokerContext() {
1:c6de4d7:             return true;
2:c6de4d7:         }
1:f812e34: 
1:9ef4259:         @Override
1:3dbc9c9:         public Set<Principal> getPrincipals() {
1:3dbc9c9:             return Collections.emptySet();
1:3dbc9c9:         }
1:1d882e9:     };
1:d29ca2a: 
1:d29ca2a:     final String userName;
1:f812e34: 
1:9ef4259:     final ConcurrentMap<ActiveMQDestination, ActiveMQDestination> authorizedWriteDests = new ConcurrentHashMap<ActiveMQDestination, ActiveMQDestination>();
1:d29ca2a: 
1:d29ca2a:     public SecurityContext(String userName) {
1:d29ca2a:         this.userName = userName;
1:d29ca2a:     }
1:d29ca2a: 
1:933eb2f:     public boolean isInOneOf(Set<?> allowedPrincipals) {
1:3dbc9c9:         Iterator<?> allowedIter = allowedPrincipals.iterator();
1:3dbc9c9:         HashSet<?> userPrincipals = new HashSet<Object>(getPrincipals());
1:3dbc9c9:         while (allowedIter.hasNext()) {
1:3dbc9c9:             Iterator<?> userIter = userPrincipals.iterator();
1:3dbc9c9:             Object allowedPrincipal = allowedIter.next();
1:3dbc9c9:             while (userIter.hasNext()) {
1:3dbc9c9:                 if (allowedPrincipal.equals(userIter.next()))
1:3dbc9c9:                     return true;
1:d29ca2a:             }
1:d29ca2a:         }
1:3dbc9c9:         return false;
1:d29ca2a:     }
1:d29ca2a: 
1:3dbc9c9:     public abstract Set<Principal> getPrincipals();
1:d29ca2a: 
1:d29ca2a:     public String getUserName() {
1:d29ca2a:         return userName;
1:d29ca2a:     }
1:d29ca2a: 
1:9ef4259:     public ConcurrentMap<ActiveMQDestination, ActiveMQDestination> getAuthorizedWriteDests() {
1:d29ca2a:         return authorizedWriteDests;
1:86cbdfd:     }
1:d29ca2a: 
1:1d882e9:     public boolean isBrokerContext() {
1:c6de4d7:         return false;
1:d29ca2a:     }
1:3dbc9c9: }
============================================================================
author:Dejan Bosanac
-------------------------------------------------------------------------------
commit:5f8a3df
/////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////
author:Timothy Bish
-------------------------------------------------------------------------------
commit:9ef4259
/////////////////////////////////////////////////////////////////////////
1: import java.util.concurrent.ConcurrentMap;
/////////////////////////////////////////////////////////////////////////
1:         @Override
/////////////////////////////////////////////////////////////////////////
0:     final ConcurrentMap<ActiveMQDestination, ActiveMQDestination> authorizedReadDests = new ConcurrentHashMap<ActiveMQDestination, ActiveMQDestination>();
1:     final ConcurrentMap<ActiveMQDestination, ActiveMQDestination> authorizedWriteDests = new ConcurrentHashMap<ActiveMQDestination, ActiveMQDestination>();
/////////////////////////////////////////////////////////////////////////
0:     public ConcurrentMap<ActiveMQDestination, ActiveMQDestination> getAuthorizedReadDests() {
1:     public ConcurrentMap<ActiveMQDestination, ActiveMQDestination> getAuthorizedWriteDests() {
author:Hiram R. Chirino
-------------------------------------------------------------------------------
commit:58aca86
commit:b0c2a40
/////////////////////////////////////////////////////////////////////////
1:  * 
commit:933eb2f
/////////////////////////////////////////////////////////////////////////
1: import org.apache.activemq.command.ActiveMQDestination;
1: 
/////////////////////////////////////////////////////////////////////////
0:         @SuppressWarnings("unchecked")
0:         public Set<?> getPrincipals() {
0:     final ConcurrentHashMap<ActiveMQDestination, ActiveMQDestination> authorizedReadDests = new ConcurrentHashMap<ActiveMQDestination, ActiveMQDestination>();
0:     final ConcurrentHashMap<ActiveMQDestination, ActiveMQDestination> authorizedWriteDests = new ConcurrentHashMap<ActiveMQDestination, ActiveMQDestination>();
1:     public boolean isInOneOf(Set<?> allowedPrincipals) {
0:         HashSet<?> set = new HashSet<Object>(getPrincipals());
0:     public abstract Set<?> getPrincipals();
0:     public ConcurrentHashMap<ActiveMQDestination, ActiveMQDestination> getAuthorizedReadDests() {
0:     public ConcurrentHashMap<ActiveMQDestination, ActiveMQDestination> getAuthorizedWriteDests() {
commit:fc00993
/////////////////////////////////////////////////////////////////////////
1: public abstract class SecurityContext {
/////////////////////////////////////////////////////////////////////////
0:     public abstract Set getPrincipals();
commit:74a7a8b
/////////////////////////////////////////////////////////////////////////
1: import java.util.Collections;
commit:f812e34
/////////////////////////////////////////////////////////////////////////
1: 
/////////////////////////////////////////////////////////////////////////
0:         return set.size() > 0;
1: 
commit:230a86c
/////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////
1:  *      http://www.apache.org/licenses/LICENSE-2.0
commit:86cbdfd
/////////////////////////////////////////////////////////////////////////
1: import java.util.concurrent.ConcurrentHashMap;
/////////////////////////////////////////////////////////////////////////
1: }
commit:57b4941
/////////////////////////////////////////////////////////////////////////
1:  * Licensed to the Apache Software Foundation (ASF) under one or more
1:  * contributor license agreements.  See the NOTICE file distributed with
1:  * this work for additional information regarding copyright ownership.
1:  * The ASF licenses this file to You under the Apache License, Version 2.0
1:  * (the "License"); you may not use this file except in compliance with
1:  * the License.  You may obtain a copy of the License at
commit:48b4869
/////////////////////////////////////////////////////////////////////////
0:  * Copyright 2005-2006 The Apache Software Foundation
commit:d29ca2a
/////////////////////////////////////////////////////////////////////////
1: /**
1:  *
0:  * Copyright 2004 The Apache Software Foundation
1:  *
0:  * Licensed under the Apache License, Version 2.0 (the "License");
0:  * you may not use this file except in compliance with the License.
0:  * You may obtain a copy of the License at
1:  *
0:  * http://www.apache.org/licenses/LICENSE-2.0
1:  *
1:  * Unless required by applicable law or agreed to in writing, software
1:  * distributed under the License is distributed on an "AS IS" BASIS,
1:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:  * See the License for the specific language governing permissions and
1:  * limitations under the License.
1:  */
1: package org.apache.activemq.security;
1: 
1: import java.util.HashSet;
1: import java.util.Set;
1: 
0: import edu.emory.mathcs.backport.java.util.concurrent.ConcurrentHashMap;
1: 
1: /**
1:  * Used to cache up authorizations so that subsequent requests are faster.
1:  * 
0:  * @version $Revision$
1:  */
0: abstract public class SecurityContext {
1: 
1:     final String userName;
1:     
0:     final ConcurrentHashMap authorizedReadDests = new ConcurrentHashMap();
0:     final ConcurrentHashMap authorizedWriteDests = new ConcurrentHashMap();
1: 
1:     public SecurityContext(String userName) {
1:         this.userName = userName;
1:     }
1: 
0:     public boolean isInOneOf(Set allowedPrincipals) {
0:         HashSet set = new HashSet(getPrincipals());
0:         set.retainAll(allowedPrincipals);
0:         return set.size()>0;
1:     }
1: 
0:     abstract public Set getPrincipals();
1:     
1:     public String getUserName() {
1:         return userName;
1:     }
1: 
0:     public ConcurrentHashMap getAuthorizedReadDests() {
0:         return authorizedReadDests;
1:     }
0:     public ConcurrentHashMap getAuthorizedWriteDests() {
1:         return authorizedWriteDests;
1:     }
1:     
1: }
author:Timothy A. Bish
-------------------------------------------------------------------------------
commit:3dbc9c9
/////////////////////////////////////////////////////////////////////////
1: import java.security.Principal;
/////////////////////////////////////////////////////////////////////////
0:  *
0:  *
/////////////////////////////////////////////////////////////////////////
1:         public Set<Principal> getPrincipals() {
1:             return Collections.emptySet();
/////////////////////////////////////////////////////////////////////////
1:         Iterator<?> allowedIter = allowedPrincipals.iterator();
1:         HashSet<?> userPrincipals = new HashSet<Object>(getPrincipals());
1:         while (allowedIter.hasNext()) {
1:             Iterator<?> userIter = userPrincipals.iterator();
1:             Object allowedPrincipal = allowedIter.next();
1:             while (userIter.hasNext()) {
1:                 if (allowedPrincipal.equals(userIter.next()))
1:                     return true;
1:             }
1:         }
1:         return false;
1:     public abstract Set<Principal> getPrincipals();
author:Bosanac Dejan
-------------------------------------------------------------------------------
commit:c6de4d7
/////////////////////////////////////////////////////////////////////////
1: import java.util.Iterator;
/////////////////////////////////////////////////////////////////////////
0:     	Iterator allowedIter = allowedPrincipals.iterator();
0:     	HashSet<?> userPrincipals = new HashSet<Object>(getPrincipals());
0:     	while (allowedIter.hasNext()) {
0:     		Iterator userIter = userPrincipals.iterator();
0:     		Object allowedPrincipal = allowedIter.next(); 
0:     		while (userIter.hasNext()) {
0:     			if (allowedPrincipal.equals(userIter.next()))
1:     				return true;
1:     		}
1:     	}
1:     	return false;
author:James Strachan
-------------------------------------------------------------------------------
commit:1d882e9
/////////////////////////////////////////////////////////////////////////
0: import java.util.Collections;
/////////////////////////////////////////////////////////////////////////
1:     public static final SecurityContext BROKER_SECURITY_CONTEXT = new SecurityContext("ActiveMQBroker") {
1:         @Override
1:         public boolean isBrokerContext() {
0:             return true;
0:         }
0: 
0:         public Set getPrincipals() {
0:             return Collections.EMPTY_SET;
0:         }
1:     };
0: 
/////////////////////////////////////////////////////////////////////////
0: 
0: 
1:     public boolean isBrokerContext() {
0:         return false;
0:     }
============================================================================