1:e14aca8: /**
1:e14aca8:  * Licensed to the Apache Software Foundation (ASF) under one or more
1:e14aca8:  * contributor license agreements.  See the NOTICE file distributed with
1:e14aca8:  * this work for additional information regarding copyright ownership.
1:e14aca8:  * The ASF licenses this file to You under the Apache License, Version 2.0
1:e14aca8:  * (the "License"); you may not use this file except in compliance with
1:e14aca8:  * the License.  You may obtain a copy of the License at
1:e14aca8:  *
1:e14aca8:  *      http://www.apache.org/licenses/LICENSE-2.0
1:e14aca8:  *
1:e14aca8:  * Unless required by applicable law or agreed to in writing, software
1:e14aca8:  * distributed under the License is distributed on an "AS IS" BASIS,
1:e14aca8:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:e14aca8:  * See the License for the specific language governing permissions and
1:e14aca8:  * limitations under the License.
1:e14aca8:  */
1:e14aca8: package org.apache.activemq.transport.stomp.auto;
1:e14aca8: 
1:e14aca8: import static org.junit.Assert.assertTrue;
1:e14aca8: 
1:e14aca8: import java.io.IOException;
1:e14aca8: import java.net.Socket;
1:e14aca8: import java.util.Arrays;
1:e14aca8: import java.util.Collection;
1:e14aca8: import java.util.concurrent.TimeUnit;
1:e14aca8: 
1:e14aca8: import javax.net.ssl.SSLSocketFactory;
1:e14aca8: 
1:e14aca8: import org.apache.activemq.transport.auto.AutoTcpTransportServer;
1:e14aca8: import org.apache.activemq.transport.stomp.StompTestSupport;
1:e14aca8: import org.apache.activemq.util.Wait;
1:e14aca8: import org.junit.Test;
1:e14aca8: import org.junit.runner.RunWith;
1:e14aca8: import org.junit.runners.Parameterized;
1:e14aca8: import org.junit.runners.Parameterized.Parameters;
1:e14aca8: import org.slf4j.Logger;
1:e14aca8: import org.slf4j.LoggerFactory;
1:e14aca8: 
1:e14aca8: /**
1:e14aca8:  * Test that connection attempts that don't send the connect get cleaned by
1:e14aca8:  * by the protocolDetectionTimeOut property
1:e14aca8:  */
1:e14aca8: @RunWith(Parameterized.class)
1:e14aca8: public class AutoStompConnectTimeoutTest extends StompTestSupport {
1:e14aca8: 
1:e14aca8:     private static final Logger LOG = LoggerFactory.getLogger(AutoStompConnectTimeoutTest.class);
1:e14aca8: 
1:e14aca8:     private Socket connection;
1:e14aca8:     protected String connectorScheme;
1:e14aca8: 
1:e14aca8:     @Parameters(name="{0}")
1:e14aca8:     public static Collection<Object[]> data() {
1:e14aca8:         return Arrays.asList(new Object[][] {
1:e14aca8:                 {"auto"},
1:e14aca8:                 {"auto+ssl"},
1:e14aca8:                 {"auto+nio"},
1:e14aca8:                 {"auto+nio+ssl"}
1:e14aca8:             });
1:e14aca8:     }
1:e14aca8: 
1:e14aca8:     public AutoStompConnectTimeoutTest(String connectorScheme) {
1:e14aca8:         this.connectorScheme = connectorScheme;
1:e14aca8:     }
1:e14aca8: 
1:e14aca8:     protected String getConnectorScheme() {
1:e14aca8:         return connectorScheme;
1:e14aca8:     }
1:e14aca8: 
1:e14aca8:     @Override
1:e14aca8:     public void tearDown() throws Exception {
1:e14aca8:         if (connection != null) {
1:e14aca8:             try {
1:e14aca8:                 connection.close();
1:e14aca8:             } catch (Throwable e) {}
1:e14aca8:             connection = null;
1:e14aca8:         }
1:e14aca8:         super.tearDown();
1:e14aca8:     }
1:e14aca8: 
1:e14aca8:     @Override
1:e14aca8:     public String getAdditionalConfig() {
1:e14aca8:         return "?protocolDetectionTimeOut=1500";
1:e14aca8:     }
1:e14aca8: 
1:e14aca8:     @Test(timeout = 15000)
1:e14aca8:     public void testInactivityMonitor() throws Exception {
1:e14aca8: 
1:e14aca8:         Thread t1 = new Thread() {
1:e14aca8: 
1:e14aca8:             @Override
1:e14aca8:             public void run() {
1:e14aca8:                 try {
1:e14aca8:                     connection = createSocket();
1:e14aca8:                     connection.getOutputStream().write('C');
1:e14aca8:                     connection.getOutputStream().flush();
1:e14aca8:                 } catch (Exception ex) {
1:e14aca8:                     LOG.error("unexpected exception on connect/disconnect", ex);
1:e14aca8:                     exceptions.add(ex);
1:e14aca8:                 }
1:e14aca8:             }
1:e14aca8:         };
1:e14aca8: 
1:e14aca8:         t1.start();
1:e14aca8: 
1:e14aca8:         assertTrue("one connection", Wait.waitFor(new Wait.Condition() {
1:e14aca8:              @Override
1:e14aca8:              public boolean isSatisified() throws Exception {
1:e14aca8:                  AutoTcpTransportServer server = (AutoTcpTransportServer) brokerService.getTransportConnectorByScheme(getConnectorScheme()).getServer();
1:e14aca8:                  return 1 == server.getCurrentTransportCount().get();
1:e14aca8:              }
1:e14aca8:         }, TimeUnit.SECONDS.toMillis(15), TimeUnit.MILLISECONDS.toMillis(250)));
1:e14aca8: 
1:e14aca8:         // and it should be closed due to inactivity
1:e14aca8:         assertTrue("no dangling connections", Wait.waitFor(new Wait.Condition() {
1:e14aca8:             @Override
1:e14aca8:             public boolean isSatisified() throws Exception {
1:e14aca8:                 AutoTcpTransportServer server = (AutoTcpTransportServer) brokerService.getTransportConnectorByScheme(getConnectorScheme()).getServer();
1:e14aca8:                 return 0 == server.getCurrentTransportCount().get();
1:e14aca8:             }
1:e14aca8:         }, TimeUnit.SECONDS.toMillis(15), TimeUnit.MILLISECONDS.toMillis(500)));
1:e14aca8: 
1:e14aca8:         assertTrue("no exceptions", exceptions.isEmpty());
1:e14aca8:     }
1:e14aca8: 
1:e14aca8:     @Override
1:e14aca8:     protected boolean isUseTcpConnector() {
1:e14aca8:         return false;
1:e14aca8:     }
1:e14aca8:     @Override
1:e14aca8:     protected boolean isUseAutoConnector() {
1:e14aca8:         return connectorScheme.equalsIgnoreCase("auto");
1:e14aca8:     }
1:e14aca8: 
1:e14aca8:     @Override
1:e14aca8:     protected boolean isUseAutoSslConnector() {
1:e14aca8:         return connectorScheme.equalsIgnoreCase("auto+ssl");
1:e14aca8:     }
1:e14aca8: 
1:e14aca8:     @Override
1:e14aca8:     protected boolean isUseAutoNioConnector() {
1:e14aca8:         return connectorScheme.equalsIgnoreCase("auto+nio");
1:e14aca8:     }
1:e14aca8: 
1:e14aca8:     @Override
1:e14aca8:     protected boolean isUseAutoNioPlusSslConnector() {
1:e14aca8:         return connectorScheme.equalsIgnoreCase("auto+nio+ssl");
1:e14aca8:     }
1:e14aca8: 
1:e14aca8:     @Override
1:e14aca8:     protected Socket createSocket() throws IOException {
1:e14aca8: 
1:e14aca8:         boolean useSSL = false;
1:e14aca8:         int port = 0;
1:e14aca8: 
1:e14aca8:         switch (connectorScheme) {
1:e14aca8:             case "auto":
1:e14aca8:                 port = this.autoPort;
1:e14aca8:                 break;
1:e14aca8:             case "auto+ssl":
1:e14aca8:                 useSSL = true;
1:e14aca8:                 port = this.autoSslPort;
1:e14aca8:                 break;
1:e14aca8:             case "auto+nio":
1:e14aca8:                 port = this.autoNioPort;
1:e14aca8:                 break;
1:e14aca8:             case "auto+nio+ssl":
1:e14aca8:                 useSSL = true;
1:e14aca8:                 port = this.autoNioSslPort;
1:e14aca8:                 break;
1:e14aca8:             default:
1:e14aca8:                 throw new IOException("Invalid STOMP connector scheme passed to test.");
1:e14aca8:         }
1:e14aca8: 
1:e14aca8:         if (useSSL) {
1:e14aca8:             return SSLSocketFactory.getDefault().createSocket("localhost", port);
1:e14aca8:         } else {
1:e14aca8:             return new Socket("localhost", port);
1:e14aca8:         }
1:e14aca8:     }
1:e14aca8: }
============================================================================
author:Christopher L. Shannon (cshannon)
-------------------------------------------------------------------------------
commit:e14aca8
/////////////////////////////////////////////////////////////////////////
1: /**
1:  * Licensed to the Apache Software Foundation (ASF) under one or more
1:  * contributor license agreements.  See the NOTICE file distributed with
1:  * this work for additional information regarding copyright ownership.
1:  * The ASF licenses this file to You under the Apache License, Version 2.0
1:  * (the "License"); you may not use this file except in compliance with
1:  * the License.  You may obtain a copy of the License at
1:  *
1:  *      http://www.apache.org/licenses/LICENSE-2.0
1:  *
1:  * Unless required by applicable law or agreed to in writing, software
1:  * distributed under the License is distributed on an "AS IS" BASIS,
1:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:  * See the License for the specific language governing permissions and
1:  * limitations under the License.
1:  */
1: package org.apache.activemq.transport.stomp.auto;
1: 
1: import static org.junit.Assert.assertTrue;
1: 
1: import java.io.IOException;
1: import java.net.Socket;
1: import java.util.Arrays;
1: import java.util.Collection;
1: import java.util.concurrent.TimeUnit;
1: 
1: import javax.net.ssl.SSLSocketFactory;
1: 
1: import org.apache.activemq.transport.auto.AutoTcpTransportServer;
1: import org.apache.activemq.transport.stomp.StompTestSupport;
1: import org.apache.activemq.util.Wait;
1: import org.junit.Test;
1: import org.junit.runner.RunWith;
1: import org.junit.runners.Parameterized;
1: import org.junit.runners.Parameterized.Parameters;
1: import org.slf4j.Logger;
1: import org.slf4j.LoggerFactory;
1: 
1: /**
1:  * Test that connection attempts that don't send the connect get cleaned by
1:  * by the protocolDetectionTimeOut property
1:  */
1: @RunWith(Parameterized.class)
1: public class AutoStompConnectTimeoutTest extends StompTestSupport {
1: 
1:     private static final Logger LOG = LoggerFactory.getLogger(AutoStompConnectTimeoutTest.class);
1: 
1:     private Socket connection;
1:     protected String connectorScheme;
1: 
1:     @Parameters(name="{0}")
1:     public static Collection<Object[]> data() {
1:         return Arrays.asList(new Object[][] {
1:                 {"auto"},
1:                 {"auto+ssl"},
1:                 {"auto+nio"},
1:                 {"auto+nio+ssl"}
1:             });
1:     }
1: 
1:     public AutoStompConnectTimeoutTest(String connectorScheme) {
1:         this.connectorScheme = connectorScheme;
1:     }
1: 
1:     protected String getConnectorScheme() {
1:         return connectorScheme;
1:     }
1: 
1:     @Override
1:     public void tearDown() throws Exception {
1:         if (connection != null) {
1:             try {
1:                 connection.close();
1:             } catch (Throwable e) {}
1:             connection = null;
1:         }
1:         super.tearDown();
1:     }
1: 
1:     @Override
1:     public String getAdditionalConfig() {
1:         return "?protocolDetectionTimeOut=1500";
1:     }
1: 
1:     @Test(timeout = 15000)
1:     public void testInactivityMonitor() throws Exception {
1: 
1:         Thread t1 = new Thread() {
1: 
1:             @Override
1:             public void run() {
1:                 try {
1:                     connection = createSocket();
1:                     connection.getOutputStream().write('C');
1:                     connection.getOutputStream().flush();
1:                 } catch (Exception ex) {
1:                     LOG.error("unexpected exception on connect/disconnect", ex);
1:                     exceptions.add(ex);
1:                 }
1:             }
1:         };
1: 
1:         t1.start();
1: 
1:         assertTrue("one connection", Wait.waitFor(new Wait.Condition() {
1:              @Override
1:              public boolean isSatisified() throws Exception {
1:                  AutoTcpTransportServer server = (AutoTcpTransportServer) brokerService.getTransportConnectorByScheme(getConnectorScheme()).getServer();
1:                  return 1 == server.getCurrentTransportCount().get();
1:              }
1:         }, TimeUnit.SECONDS.toMillis(15), TimeUnit.MILLISECONDS.toMillis(250)));
1: 
1:         // and it should be closed due to inactivity
1:         assertTrue("no dangling connections", Wait.waitFor(new Wait.Condition() {
1:             @Override
1:             public boolean isSatisified() throws Exception {
1:                 AutoTcpTransportServer server = (AutoTcpTransportServer) brokerService.getTransportConnectorByScheme(getConnectorScheme()).getServer();
1:                 return 0 == server.getCurrentTransportCount().get();
1:             }
1:         }, TimeUnit.SECONDS.toMillis(15), TimeUnit.MILLISECONDS.toMillis(500)));
1: 
1:         assertTrue("no exceptions", exceptions.isEmpty());
1:     }
1: 
1:     @Override
1:     protected boolean isUseTcpConnector() {
1:         return false;
1:     }
1:     @Override
1:     protected boolean isUseAutoConnector() {
1:         return connectorScheme.equalsIgnoreCase("auto");
1:     }
1: 
1:     @Override
1:     protected boolean isUseAutoSslConnector() {
1:         return connectorScheme.equalsIgnoreCase("auto+ssl");
1:     }
1: 
1:     @Override
1:     protected boolean isUseAutoNioConnector() {
1:         return connectorScheme.equalsIgnoreCase("auto+nio");
1:     }
1: 
1:     @Override
1:     protected boolean isUseAutoNioPlusSslConnector() {
1:         return connectorScheme.equalsIgnoreCase("auto+nio+ssl");
1:     }
1: 
1:     @Override
1:     protected Socket createSocket() throws IOException {
1: 
1:         boolean useSSL = false;
1:         int port = 0;
1: 
1:         switch (connectorScheme) {
1:             case "auto":
1:                 port = this.autoPort;
1:                 break;
1:             case "auto+ssl":
1:                 useSSL = true;
1:                 port = this.autoSslPort;
1:                 break;
1:             case "auto+nio":
1:                 port = this.autoNioPort;
1:                 break;
1:             case "auto+nio+ssl":
1:                 useSSL = true;
1:                 port = this.autoNioSslPort;
1:                 break;
1:             default:
1:                 throw new IOException("Invalid STOMP connector scheme passed to test.");
1:         }
1: 
1:         if (useSSL) {
1:             return SSLSocketFactory.getDefault().createSocket("localhost", port);
1:         } else {
1:             return new Socket("localhost", port);
1:         }
1:     }
1: }
============================================================================