1:cf57559: /**
1:cf57559:  * Licensed to the Apache Software Foundation (ASF) under one or more
1:cf57559:  * contributor license agreements.  See the NOTICE file distributed with
1:cf57559:  * this work for additional information regarding copyright ownership.
1:cf57559:  * The ASF licenses this file to You under the Apache License, Version 2.0
1:cf57559:  * (the "License"); you may not use this file except in compliance with
1:cf57559:  * the License.  You may obtain a copy of the License at
1:cf57559:  *
1:cf57559:  *      http://www.apache.org/licenses/LICENSE-2.0
1:cf57559:  *
1:cf57559:  * Unless required by applicable law or agreed to in writing, software
1:cf57559:  * distributed under the License is distributed on an "AS IS" BASIS,
1:cf57559:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:cf57559:  * See the License for the specific language governing permissions and
1:cf57559:  * limitations under the License.
1:cf57559:  */
1:cf57559: package org.apache.activemq.transport.failover;
1:cf57559: 
1:cf57559: import org.apache.activemq.ActiveMQXAConnectionFactory;
1:cf57559: import org.apache.activemq.broker.BrokerPlugin;
1:cf57559: import org.apache.activemq.broker.BrokerPluginSupport;
1:cf57559: import org.apache.activemq.broker.BrokerService;
1:cf57559: import org.apache.activemq.broker.ConnectionContext;
1:cf57559: import org.apache.activemq.broker.region.policy.PolicyEntry;
1:cf57559: import org.apache.activemq.broker.region.policy.PolicyMap;
1:cf57559: import org.apache.activemq.command.TransactionId;
1:cf57559: import org.apache.activemq.util.TestUtils;
1:cf57559: import org.junit.After;
1:cf57559: import org.slf4j.Logger;
1:cf57559: import org.slf4j.LoggerFactory;
1:cf57559: 
1:cf57559: import javax.jms.JMSException;
1:cf57559: import javax.jms.MessageProducer;
1:cf57559: import javax.jms.Queue;
1:cf57559: import javax.jms.Session;
1:cf57559: import javax.jms.TextMessage;
1:cf57559: import javax.jms.XAConnection;
1:cf57559: import javax.jms.XASession;
1:cf57559: import javax.transaction.xa.XAResource;
1:cf57559: import javax.transaction.xa.Xid;
1:cf57559: import java.util.concurrent.Executors;
1:cf57559: import java.util.concurrent.atomic.AtomicBoolean;
1:cf57559: 
1:cf57559: import static org.junit.Assert.assertEquals;
1:cf57559: 
1:cf57559: public class FailoverXATransactionTest {
1:cf57559: 
1:cf57559:     private static final Logger LOG = LoggerFactory.getLogger(FailoverXATransactionTest.class);
1:cf57559:     private static final String QUEUE_NAME = "Failover.WithXaTx";
1:cf57559:     private static final String TRANSPORT_URI = "tcp://localhost:0";
1:cf57559:     private String url;
1:cf57559:     BrokerService broker;
1:cf57559: 
1:cf57559:     @After
1:cf57559:     public void stopBroker() throws Exception {
1:cf57559:         if (broker != null) {
1:cf57559:             broker.stop();
1:cf57559:             broker.waitUntilStopped();
1:cf57559:         }
1:cf57559:     }
1:cf57559: 
1:cf57559:     public void startBroker(boolean deleteAllMessagesOnStartup) throws Exception {
1:cf57559:         broker = createBroker(deleteAllMessagesOnStartup);
1:cf57559:         broker.start();
1:cf57559:     }
1:cf57559: 
1:cf57559:     public void startBroker(boolean deleteAllMessagesOnStartup, String bindAddress) throws Exception {
1:cf57559:         broker = createBroker(deleteAllMessagesOnStartup, bindAddress);
1:cf57559:         broker.start();
1:cf57559:     }
1:cf57559: 
1:cf57559:     public BrokerService createBroker(boolean deleteAllMessagesOnStartup) throws Exception {
1:cf57559:         return createBroker(deleteAllMessagesOnStartup, TRANSPORT_URI);
1:cf57559:     }
1:cf57559: 
1:cf57559:     public BrokerService createBroker(boolean deleteAllMessagesOnStartup, String bindAddress) throws Exception {
1:cf57559:         broker = new BrokerService();
1:cf57559:         broker.setUseJmx(true);
1:cf57559:         broker.setAdvisorySupport(false);
1:cf57559:         broker.addConnector(bindAddress);
1:cf57559:         broker.setDeleteAllMessagesOnStartup(deleteAllMessagesOnStartup);
1:cf57559: 
1:cf57559:         PolicyMap policyMap = new PolicyMap();
1:cf57559:         PolicyEntry defaultEntry = new PolicyEntry();
1:cf57559:         defaultEntry.setUsePrefetchExtension(false);
1:cf57559:         policyMap.setDefaultEntry(defaultEntry);
1:cf57559:         broker.setDestinationPolicy(policyMap);
1:cf57559: 
1:cf57559:         url = broker.getTransportConnectors().get(0).getConnectUri().toString();
1:cf57559: 
1:cf57559:         return broker;
1:cf57559:     }
1:cf57559: 
1:cf57559:     @org.junit.Test
1:cf57559:     public void testFailoverSendPrepareReplyLost() throws Exception {
1:cf57559: 
1:cf57559:         broker = createBroker(true);
1:cf57559: 
1:cf57559:         final AtomicBoolean first = new AtomicBoolean(false);
1:cf57559:         broker.setPlugins(new BrokerPlugin[]{
1:cf57559:                 new BrokerPluginSupport() {
1:cf57559:                     @Override
1:cf57559:                     public int prepareTransaction(final ConnectionContext context,
1:cf57559:                                                   TransactionId xid) throws Exception {
1:cf57559:                         int result = super.prepareTransaction(context, xid);
1:cf57559:                         if (first.compareAndSet(false, true)) {
1:cf57559:                             context.setDontSendReponse(true);
1:cf57559:                             Executors.newSingleThreadExecutor().execute(new Runnable() {
1:cf57559:                                 public void run() {
1:cf57559:                                     LOG.info("Stopping broker on prepare");
1:cf57559:                                     try {
1:cf57559:                                         context.getConnection().stop();
1:cf57559:                                     } catch (Exception e) {
1:cf57559:                                         e.printStackTrace();
1:cf57559:                                     }
1:cf57559:                                 }
1:cf57559:                             });
1:cf57559:                         }
1:cf57559: 
1:cf57559:                         return result;
1:cf57559:                     }
1:cf57559:                 }
1:cf57559:         });
1:cf57559:         broker.start();
1:cf57559: 
1:cf57559:         ActiveMQXAConnectionFactory cf = new ActiveMQXAConnectionFactory("failover:(" + url + ")");
1:cf57559:         XAConnection connection = cf.createXAConnection();
1:cf57559:         connection.start();
1:cf57559:         final XASession session = connection.createXASession();
1:cf57559:         Queue destination = session.createQueue(QUEUE_NAME);
1:cf57559: 
1:cf57559:         Xid xid = TestUtils.createXid();
1:cf57559:         session.getXAResource().start(xid, XAResource.TMNOFLAGS);
1:cf57559:         produceMessage(session, destination);
1:cf57559:         session.getXAResource().end(xid, XAResource.TMSUCCESS);
1:cf57559: 
1:cf57559:         try {
1:cf57559:             session.getXAResource().prepare(xid);
1:cf57559:         } catch (Exception expected) {
1:cf57559:             expected.printStackTrace();
1:cf57559:         }
1:cf57559: 
1:cf57559:         try {
1:cf57559:             session.getXAResource().rollback(xid);
1:cf57559:         } catch (Exception expected) {
1:cf57559:             expected.printStackTrace();
1:cf57559:         }
1:cf57559: 
1:cf57559:         connection.close();
1:cf57559: 
1:cf57559:         assertEquals(0, broker.getAdminView().getTotalMessageCount());
1:cf57559:     }
1:cf57559: 
1:cf57559:     @org.junit.Test
1:cf57559:     public void testFailoverSendCommitReplyLost() throws Exception {
1:cf57559: 
1:cf57559:         broker = createBroker(true);
1:cf57559: 
1:cf57559:         final AtomicBoolean first = new AtomicBoolean(false);
1:cf57559:         broker.setPlugins(new BrokerPlugin[]{
1:cf57559:                 new BrokerPluginSupport() {
1:cf57559:                     @Override
1:cf57559:                     public void commitTransaction(final ConnectionContext context,
1:cf57559:                                                   TransactionId xid, boolean onePhase) throws Exception {
1:cf57559:                         super.commitTransaction(context, xid, onePhase);
1:cf57559:                         if (first.compareAndSet(false, true)) {
1:cf57559:                             context.setDontSendReponse(true);
1:cf57559:                             Executors.newSingleThreadExecutor().execute(new Runnable() {
1:cf57559:                                 public void run() {
1:cf57559:                                     LOG.info("Stopping broker on prepare");
1:cf57559:                                     try {
1:cf57559:                                         context.getConnection().stop();
1:cf57559:                                     } catch (Exception e) {
1:cf57559:                                         e.printStackTrace();
1:cf57559:                                     }
1:cf57559:                                 }
1:cf57559:                             });
1:cf57559:                         }
1:cf57559:                     }
1:cf57559:                 }
1:cf57559:         });
1:cf57559:         broker.start();
1:cf57559: 
1:cf57559:         ActiveMQXAConnectionFactory cf = new ActiveMQXAConnectionFactory("failover:(" + url + ")");
1:cf57559:         XAConnection connection = cf.createXAConnection();
1:cf57559:         connection.start();
1:cf57559:         final XASession session = connection.createXASession();
1:cf57559:         Queue destination = session.createQueue(QUEUE_NAME);
1:cf57559: 
1:cf57559:         Xid xid = TestUtils.createXid();
1:cf57559:         session.getXAResource().start(xid, XAResource.TMNOFLAGS);
1:cf57559:         produceMessage(session, destination);
1:cf57559:         session.getXAResource().end(xid, XAResource.TMSUCCESS);
1:cf57559: 
1:cf57559:         try {
1:cf57559:             session.getXAResource().prepare(xid);
1:cf57559:         } catch (Exception expected) {
1:cf57559:             expected.printStackTrace();
1:cf57559:         }
1:cf57559: 
1:cf57559:         try {
1:cf57559:             session.getXAResource().commit(xid, false);
1:cf57559:         } catch (Exception expected) {
1:cf57559:             expected.printStackTrace();
1:cf57559:         }
1:cf57559: 
1:cf57559:         connection.close();
1:cf57559: 
1:cf57559:         assertEquals(1, broker.getAdminView().getTotalMessageCount());
1:cf57559:     }
1:cf57559: 
1:cf57559:     private void produceMessage(final Session producerSession, Queue destination)
1:cf57559:             throws JMSException {
1:cf57559:         MessageProducer producer = producerSession.createProducer(destination);
1:cf57559:         TextMessage message = producerSession.createTextMessage("Test message");
1:cf57559:         producer.send(message);
1:cf57559:         producer.close();
1:cf57559:     }
1:cf57559: 
1:cf57559: }
============================================================================
author:gtully
-------------------------------------------------------------------------------
commit:cf57559
/////////////////////////////////////////////////////////////////////////
1: /**
1:  * Licensed to the Apache Software Foundation (ASF) under one or more
1:  * contributor license agreements.  See the NOTICE file distributed with
1:  * this work for additional information regarding copyright ownership.
1:  * The ASF licenses this file to You under the Apache License, Version 2.0
1:  * (the "License"); you may not use this file except in compliance with
1:  * the License.  You may obtain a copy of the License at
1:  *
1:  *      http://www.apache.org/licenses/LICENSE-2.0
1:  *
1:  * Unless required by applicable law or agreed to in writing, software
1:  * distributed under the License is distributed on an "AS IS" BASIS,
1:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:  * See the License for the specific language governing permissions and
1:  * limitations under the License.
1:  */
1: package org.apache.activemq.transport.failover;
1: 
1: import org.apache.activemq.ActiveMQXAConnectionFactory;
1: import org.apache.activemq.broker.BrokerPlugin;
1: import org.apache.activemq.broker.BrokerPluginSupport;
1: import org.apache.activemq.broker.BrokerService;
1: import org.apache.activemq.broker.ConnectionContext;
1: import org.apache.activemq.broker.region.policy.PolicyEntry;
1: import org.apache.activemq.broker.region.policy.PolicyMap;
1: import org.apache.activemq.command.TransactionId;
1: import org.apache.activemq.util.TestUtils;
1: import org.junit.After;
1: import org.slf4j.Logger;
1: import org.slf4j.LoggerFactory;
1: 
1: import javax.jms.JMSException;
1: import javax.jms.MessageProducer;
1: import javax.jms.Queue;
1: import javax.jms.Session;
1: import javax.jms.TextMessage;
1: import javax.jms.XAConnection;
1: import javax.jms.XASession;
1: import javax.transaction.xa.XAResource;
1: import javax.transaction.xa.Xid;
1: import java.util.concurrent.Executors;
1: import java.util.concurrent.atomic.AtomicBoolean;
1: 
1: import static org.junit.Assert.assertEquals;
1: 
1: public class FailoverXATransactionTest {
1: 
1:     private static final Logger LOG = LoggerFactory.getLogger(FailoverXATransactionTest.class);
1:     private static final String QUEUE_NAME = "Failover.WithXaTx";
1:     private static final String TRANSPORT_URI = "tcp://localhost:0";
1:     private String url;
1:     BrokerService broker;
1: 
1:     @After
1:     public void stopBroker() throws Exception {
1:         if (broker != null) {
1:             broker.stop();
1:             broker.waitUntilStopped();
1:         }
1:     }
1: 
1:     public void startBroker(boolean deleteAllMessagesOnStartup) throws Exception {
1:         broker = createBroker(deleteAllMessagesOnStartup);
1:         broker.start();
1:     }
1: 
1:     public void startBroker(boolean deleteAllMessagesOnStartup, String bindAddress) throws Exception {
1:         broker = createBroker(deleteAllMessagesOnStartup, bindAddress);
1:         broker.start();
1:     }
1: 
1:     public BrokerService createBroker(boolean deleteAllMessagesOnStartup) throws Exception {
1:         return createBroker(deleteAllMessagesOnStartup, TRANSPORT_URI);
1:     }
1: 
1:     public BrokerService createBroker(boolean deleteAllMessagesOnStartup, String bindAddress) throws Exception {
1:         broker = new BrokerService();
1:         broker.setUseJmx(true);
1:         broker.setAdvisorySupport(false);
1:         broker.addConnector(bindAddress);
1:         broker.setDeleteAllMessagesOnStartup(deleteAllMessagesOnStartup);
1: 
1:         PolicyMap policyMap = new PolicyMap();
1:         PolicyEntry defaultEntry = new PolicyEntry();
1:         defaultEntry.setUsePrefetchExtension(false);
1:         policyMap.setDefaultEntry(defaultEntry);
1:         broker.setDestinationPolicy(policyMap);
1: 
1:         url = broker.getTransportConnectors().get(0).getConnectUri().toString();
1: 
1:         return broker;
1:     }
1: 
1:     @org.junit.Test
1:     public void testFailoverSendPrepareReplyLost() throws Exception {
1: 
1:         broker = createBroker(true);
1: 
1:         final AtomicBoolean first = new AtomicBoolean(false);
1:         broker.setPlugins(new BrokerPlugin[]{
1:                 new BrokerPluginSupport() {
1:                     @Override
1:                     public int prepareTransaction(final ConnectionContext context,
1:                                                   TransactionId xid) throws Exception {
1:                         int result = super.prepareTransaction(context, xid);
1:                         if (first.compareAndSet(false, true)) {
1:                             context.setDontSendReponse(true);
1:                             Executors.newSingleThreadExecutor().execute(new Runnable() {
1:                                 public void run() {
1:                                     LOG.info("Stopping broker on prepare");
1:                                     try {
1:                                         context.getConnection().stop();
1:                                     } catch (Exception e) {
1:                                         e.printStackTrace();
1:                                     }
1:                                 }
1:                             });
1:                         }
1: 
1:                         return result;
1:                     }
1:                 }
1:         });
1:         broker.start();
1: 
1:         ActiveMQXAConnectionFactory cf = new ActiveMQXAConnectionFactory("failover:(" + url + ")");
1:         XAConnection connection = cf.createXAConnection();
1:         connection.start();
1:         final XASession session = connection.createXASession();
1:         Queue destination = session.createQueue(QUEUE_NAME);
1: 
1:         Xid xid = TestUtils.createXid();
1:         session.getXAResource().start(xid, XAResource.TMNOFLAGS);
1:         produceMessage(session, destination);
1:         session.getXAResource().end(xid, XAResource.TMSUCCESS);
1: 
1:         try {
1:             session.getXAResource().prepare(xid);
1:         } catch (Exception expected) {
1:             expected.printStackTrace();
1:         }
1: 
1:         try {
1:             session.getXAResource().rollback(xid);
1:         } catch (Exception expected) {
1:             expected.printStackTrace();
1:         }
1: 
1:         connection.close();
1: 
1:         assertEquals(0, broker.getAdminView().getTotalMessageCount());
1:     }
1: 
1:     @org.junit.Test
1:     public void testFailoverSendCommitReplyLost() throws Exception {
1: 
1:         broker = createBroker(true);
1: 
1:         final AtomicBoolean first = new AtomicBoolean(false);
1:         broker.setPlugins(new BrokerPlugin[]{
1:                 new BrokerPluginSupport() {
1:                     @Override
1:                     public void commitTransaction(final ConnectionContext context,
1:                                                   TransactionId xid, boolean onePhase) throws Exception {
1:                         super.commitTransaction(context, xid, onePhase);
1:                         if (first.compareAndSet(false, true)) {
1:                             context.setDontSendReponse(true);
1:                             Executors.newSingleThreadExecutor().execute(new Runnable() {
1:                                 public void run() {
1:                                     LOG.info("Stopping broker on prepare");
1:                                     try {
1:                                         context.getConnection().stop();
1:                                     } catch (Exception e) {
1:                                         e.printStackTrace();
1:                                     }
1:                                 }
1:                             });
1:                         }
1:                     }
1:                 }
1:         });
1:         broker.start();
1: 
1:         ActiveMQXAConnectionFactory cf = new ActiveMQXAConnectionFactory("failover:(" + url + ")");
1:         XAConnection connection = cf.createXAConnection();
1:         connection.start();
1:         final XASession session = connection.createXASession();
1:         Queue destination = session.createQueue(QUEUE_NAME);
1: 
1:         Xid xid = TestUtils.createXid();
1:         session.getXAResource().start(xid, XAResource.TMNOFLAGS);
1:         produceMessage(session, destination);
1:         session.getXAResource().end(xid, XAResource.TMSUCCESS);
1: 
1:         try {
1:             session.getXAResource().prepare(xid);
1:         } catch (Exception expected) {
1:             expected.printStackTrace();
1:         }
1: 
1:         try {
1:             session.getXAResource().commit(xid, false);
1:         } catch (Exception expected) {
1:             expected.printStackTrace();
1:         }
1: 
1:         connection.close();
1: 
1:         assertEquals(1, broker.getAdminView().getTotalMessageCount());
1:     }
1: 
1:     private void produceMessage(final Session producerSession, Queue destination)
1:             throws JMSException {
1:         MessageProducer producer = producerSession.createProducer(destination);
1:         TextMessage message = producerSession.createTextMessage("Test message");
1:         producer.send(message);
1:         producer.close();
1:     }
1: 
1: }
============================================================================