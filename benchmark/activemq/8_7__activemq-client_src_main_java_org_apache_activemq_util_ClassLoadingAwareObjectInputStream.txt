1:88acb0e: /**
1:be5a767:  * Licensed to the Apache Software Foundation (ASF) under one or more
1:be5a767:  * contributor license agreements.  See the NOTICE file distributed with
1:be5a767:  * this work for additional information regarding copyright ownership.
1:be5a767:  * The ASF licenses this file to You under the Apache License, Version 2.0
1:be5a767:  * (the "License"); you may not use this file except in compliance with
1:be5a767:  * the License.  You may obtain a copy of the License at
1:88acb0e:  *
1:230a86c:  *      http://www.apache.org/licenses/LICENSE-2.0
4:7a5c499:  *
1:7a5c499:  * Unless required by applicable law or agreed to in writing, software
1:7a5c499:  * distributed under the License is distributed on an "AS IS" BASIS,
1:7a5c499:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:7a5c499:  * See the License for the specific language governing permissions and
1:7a5c499:  * limitations under the License.
1:88acb0e:  */
1:88acb0e: package org.apache.activemq.util;
5:88acb0e: 
1:88acb0e: import java.io.IOException;
1:88acb0e: import java.io.InputStream;
1:88acb0e: import java.io.ObjectInputStream;
1:88acb0e: import java.io.ObjectStreamClass;
1:88acb0e: import java.lang.reflect.Proxy;
1:94446e5: import java.util.*;
1:88acb0e: 
1:6e49ef3: import org.slf4j.Logger;
1:6e49ef3: import org.slf4j.LoggerFactory;
1:6e49ef3: 
1:88acb0e: public class ClassLoadingAwareObjectInputStream extends ObjectInputStream {
1:fc00993: 
1:6e49ef3:     private static final Logger LOG = LoggerFactory.getLogger(ClassLoadingAwareObjectInputStream.class);
1:419fde4:     private static final ClassLoader FALLBACK_CLASS_LOADER =
1:419fde4:         ClassLoadingAwareObjectInputStream.class.getClassLoader();
1:a7e2a44: 
1:e100638:     public static final String[] serializablePackages;
1:88acb0e: 
1:94446e5:     private List<String> trustedPackages = new ArrayList<String>();
1:94446e5:     private boolean trustAllPackages = false;
1:94446e5: 
1:577952b:     private final ClassLoader inLoader;
1:577952b: 
1:e100638:     static {
1:e100638:         serializablePackages = System.getProperty("org.apache.activemq.SERIALIZABLE_PACKAGES",
1:d7a3b94:                     "java.lang,javax.security,java.util,org.apache.activemq,org.fusesource.hawtbuf,com.thoughtworks.xstream.mapper").split(",");
1:e100638:     }
1:e100638: 
1:88acb0e:     public ClassLoadingAwareObjectInputStream(InputStream in) throws IOException {
1:88acb0e:         super(in);
1:577952b:         inLoader = in.getClass().getClassLoader();
1:94446e5:         trustedPackages.addAll(Arrays.asList(serializablePackages));
1:86cbdfd:     }
1:88acb0e: 
1:41ee3ec:     @Override
1:419fde4:     protected Class<?> resolveClass(ObjectStreamClass classDesc) throws IOException, ClassNotFoundException {
1:88acb0e:         ClassLoader cl = Thread.currentThread().getContextClassLoader();
1:a7e2a44:         Class clazz = load(classDesc.getName(), cl, inLoader);
1:a7e2a44:         checkSecurity(clazz);
1:a7e2a44:         return clazz;
1:88acb0e:     }
1:6e49ef3: 
1:41ee3ec:     @Override
1:419fde4:     protected Class<?> resolveProxyClass(String[] interfaces) throws IOException, ClassNotFoundException {
1:88acb0e:         ClassLoader cl = Thread.currentThread().getContextClassLoader();
1:88acb0e:         Class[] cinterfaces = new Class[interfaces.length];
1:fc00993:         for (int i = 0; i < interfaces.length; i++) {
1:88acb0e:             cinterfaces[i] = load(interfaces[i], cl);
1:fc00993:         }
1:88acb0e: 
1:a7e2a44:         Class clazz = null;
1:88acb0e:         try {
1:a7e2a44:             clazz = Proxy.getProxyClass(cl, cinterfaces);
1:88acb0e:         } catch (IllegalArgumentException e) {
1:577952b:             try {
1:a7e2a44:                 clazz = Proxy.getProxyClass(inLoader, cinterfaces);
1:419fde4:             } catch (IllegalArgumentException e1) {
1:577952b:                 // ignore
1:577952b:             }
1:577952b:             try {
1:a7e2a44:                 clazz = Proxy.getProxyClass(FALLBACK_CLASS_LOADER, cinterfaces);
1:577952b:             } catch (IllegalArgumentException e2) {
1:577952b:                 // ignore
1:a7e2a44:             }
1:a7e2a44:         }
1:a7e2a44: 
1:a7e2a44:         if (clazz != null) {
1:a7e2a44:             checkSecurity(clazz);
1:a7e2a44:             return clazz;
1:a7e2a44:         } else {
1:a7e2a44:             throw new ClassNotFoundException(null);
1:a7e2a44:         }
1:a7e2a44:     }
1:a7e2a44: 
1:a7e2a44:     public static boolean isAllAllowed() {
1:e100638:         return serializablePackages.length == 1 && serializablePackages[0].equals("*");
1:a7e2a44:     }
1:a7e2a44: 
1:94446e5:     private boolean trustAllPackages() {
1:94446e5:         return trustAllPackages || (trustedPackages.size() == 1 && trustedPackages.get(0).equals("*"));
1:94446e5:     }
1:94446e5: 
1:a7e2a44:     private void checkSecurity(Class clazz) throws ClassNotFoundException {
1:a7e2a44:         if (!clazz.isPrimitive()) {
1:94446e5:             if (clazz.getPackage() != null && !trustAllPackages()) {
1:a7e2a44:                boolean found = false;
1:94446e5:                for (String packageName : getTrustedPackages()) {
1:a7e2a44:                    if (clazz.getPackage().getName().equals(packageName) || clazz.getPackage().getName().startsWith(packageName + ".")) {
1:a7e2a44:                        found = true;
1:a7e2a44:                        break;
1:a7e2a44:                    }
1:a7e2a44:                }
1:a7e2a44:                if (!found) {
1:eeec0c0:                    throw new ClassNotFoundException("Forbidden " + clazz + "! This class is not trusted to be serialized as ObjectMessage payload. Please take a look at http://activemq.apache.org/objectmessage.html for more information on how to configure trusted classes.");
1:a7e2a44:                }
1:a7e2a44:             }
1:88acb0e:         }
1:88acb0e:     }
1:a7e2a44: 
1:577952b:     private Class<?> load(String className, ClassLoader... cl) throws ClassNotFoundException {
1:6e49ef3:         // check for simple types first
1:6e49ef3:         final Class<?> clazz = loadSimpleType(className);
1:6e49ef3:         if (clazz != null) {
1:6e49ef3:             LOG.trace("Loaded class: {} as simple type -> ", className, clazz);
1:6e49ef3:             return clazz;
1:6e49ef3:         }
1:a7e2a44: 
1:6e49ef3:         // try the different class loaders
1:577952b:         for (ClassLoader loader : cl) {
1:6e49ef3:             LOG.trace("Attempting to load class: {} using classloader: {}", className, cl);
1:88acb0e:             try {
1:6e49ef3:                 Class<?> answer = Class.forName(className, false, loader);
1:6e49ef3:                 if (LOG.isTraceEnabled()) {
1:6e49ef3:                     LOG.trace("Loaded class: {} using classloader: {} -> ", new Object[]{className, cl, answer});
1:6e49ef3:                 }
1:6e49ef3:                 return answer;
1:577952b:             } catch (ClassNotFoundException e) {
1:6e49ef3:                 LOG.trace("Class not found: {} using classloader: {}", className, cl);
1:577952b:                 // ignore
1:88acb0e:             }
1:88acb0e:         }
1:6e49ef3: 
1:6e49ef3:         // and then the fallback class loader
1:6e49ef3:         return Class.forName(className, false, FALLBACK_CLASS_LOADER);
1:577952b:     }
1:88acb0e: 
1:6e49ef3:     /**
1:6e49ef3:      * Load a simple type
1:6e49ef3:      *
1:6e49ef3:      * @param name the name of the class to load
1:6e49ef3:      * @return the class or <tt>null</tt> if it could not be loaded
1:6e49ef3:      */
1:6e49ef3:     public static Class<?> loadSimpleType(String name) {
1:6e49ef3:         // code from ObjectHelper.loadSimpleType in Apache Camel
1:6e49ef3: 
1:6e49ef3:         // special for byte[] or Object[] as its common to use
1:6e49ef3:         if ("java.lang.byte[]".equals(name) || "byte[]".equals(name)) {
1:6e49ef3:             return byte[].class;
1:6e49ef3:         } else if ("java.lang.Byte[]".equals(name) || "Byte[]".equals(name)) {
1:6e49ef3:             return Byte[].class;
1:6e49ef3:         } else if ("java.lang.Object[]".equals(name) || "Object[]".equals(name)) {
1:6e49ef3:             return Object[].class;
1:6e49ef3:         } else if ("java.lang.String[]".equals(name) || "String[]".equals(name)) {
1:6e49ef3:             return String[].class;
1:6e49ef3:             // and these is common as well
1:6e49ef3:         } else if ("java.lang.String".equals(name) || "String".equals(name)) {
1:6e49ef3:             return String.class;
1:6e49ef3:         } else if ("java.lang.Boolean".equals(name) || "Boolean".equals(name)) {
1:6e49ef3:             return Boolean.class;
1:6e49ef3:         } else if ("boolean".equals(name)) {
1:6e49ef3:             return boolean.class;
1:6e49ef3:         } else if ("java.lang.Integer".equals(name) || "Integer".equals(name)) {
1:6e49ef3:             return Integer.class;
1:6e49ef3:         } else if ("int".equals(name)) {
1:6e49ef3:             return int.class;
1:6e49ef3:         } else if ("java.lang.Long".equals(name) || "Long".equals(name)) {
1:6e49ef3:             return Long.class;
1:6e49ef3:         } else if ("long".equals(name)) {
1:6e49ef3:             return long.class;
1:6e49ef3:         } else if ("java.lang.Short".equals(name) || "Short".equals(name)) {
1:6e49ef3:             return Short.class;
1:6e49ef3:         } else if ("short".equals(name)) {
1:6e49ef3:             return short.class;
1:6e49ef3:         } else if ("java.lang.Byte".equals(name) || "Byte".equals(name)) {
1:6e49ef3:             return Byte.class;
1:6e49ef3:         } else if ("byte".equals(name)) {
1:6e49ef3:             return byte.class;
1:6e49ef3:         } else if ("java.lang.Float".equals(name) || "Float".equals(name)) {
1:6e49ef3:             return Float.class;
1:6e49ef3:         } else if ("float".equals(name)) {
1:6e49ef3:             return float.class;
1:6e49ef3:         } else if ("java.lang.Double".equals(name) || "Double".equals(name)) {
1:6e49ef3:             return Double.class;
1:6e49ef3:         } else if ("double".equals(name)) {
1:6e49ef3:             return double.class;
1:41ee3ec:         } else if ("void".equals(name)) {
1:41ee3ec:             return void.class;
1:6e49ef3:         }
1:6e49ef3: 
1:6e49ef3:         return null;
1:88acb0e:     }
1:6e49ef3: 
1:94446e5:     public List<String> getTrustedPackages() {
1:94446e5:         return trustedPackages;
1:94446e5:     }
1:94446e5: 
1:94446e5:     public void setTrustedPackages(List<String> trustedPackages) {
1:94446e5:         this.trustedPackages = trustedPackages;
1:94446e5:     }
1:94446e5: 
1:94446e5:     public void addTrustedPackage(String trustedPackage) {
1:94446e5:         this.trustedPackages.add(trustedPackage);
1:94446e5:     }
1:94446e5: 
1:94446e5:     public boolean isTrustAllPackages() {
1:94446e5:         return trustAllPackages;
1:94446e5:     }
1:94446e5: 
1:94446e5:     public void setTrustAllPackages(boolean trustAllPackages) {
1:94446e5:         this.trustAllPackages = trustAllPackages;
1:94446e5:     }
1:88acb0e: }
============================================================================
author:Dejan Bosanac
-------------------------------------------------------------------------------
commit:eeec0c0
/////////////////////////////////////////////////////////////////////////
1:                    throw new ClassNotFoundException("Forbidden " + clazz + "! This class is not trusted to be serialized as ObjectMessage payload. Please take a look at http://activemq.apache.org/objectmessage.html for more information on how to configure trusted classes.");
commit:94446e5
/////////////////////////////////////////////////////////////////////////
1: import java.util.*;
/////////////////////////////////////////////////////////////////////////
1:     private List<String> trustedPackages = new ArrayList<String>();
1:     private boolean trustAllPackages = false;
1: 
/////////////////////////////////////////////////////////////////////////
1:         trustedPackages.addAll(Arrays.asList(serializablePackages));
/////////////////////////////////////////////////////////////////////////
1:     private boolean trustAllPackages() {
1:         return trustAllPackages || (trustedPackages.size() == 1 && trustedPackages.get(0).equals("*"));
1:     }
1: 
1:             if (clazz.getPackage() != null && !trustAllPackages()) {
1:                for (String packageName : getTrustedPackages()) {
/////////////////////////////////////////////////////////////////////////
1:     public List<String> getTrustedPackages() {
1:         return trustedPackages;
1:     }
1: 
1:     public void setTrustedPackages(List<String> trustedPackages) {
1:         this.trustedPackages = trustedPackages;
1:     }
1: 
1:     public void addTrustedPackage(String trustedPackage) {
1:         this.trustedPackages.add(trustedPackage);
1:     }
1: 
1:     public boolean isTrustAllPackages() {
1:         return trustAllPackages;
1:     }
1: 
1:     public void setTrustAllPackages(boolean trustAllPackages) {
1:         this.trustAllPackages = trustAllPackages;
1:     }
commit:e100638
/////////////////////////////////////////////////////////////////////////
1:     public static final String[] serializablePackages;
1:     static {
1:         serializablePackages = System.getProperty("org.apache.activemq.SERIALIZABLE_PACKAGES",
0:                     "java.lang,java.util,org.apache.activemq,org.fusesource.hawtbuf,com.thoughtworks.xstream.mapper").split(",");
1:     }
1: 
/////////////////////////////////////////////////////////////////////////
1:         return serializablePackages.length == 1 && serializablePackages[0].equals("*");
0:                for (String packageName : serializablePackages) {
commit:a7e2a44
/////////////////////////////////////////////////////////////////////////
0: import java.util.Arrays;
0: import java.util.Collection;
0: import java.util.Map;
/////////////////////////////////////////////////////////////////////////
0:     private static String[] serializablePackages;
1: 
/////////////////////////////////////////////////////////////////////////
1:         Class clazz = load(classDesc.getName(), cl, inLoader);
1:         checkSecurity(clazz);
1:         return clazz;
/////////////////////////////////////////////////////////////////////////
1:         Class clazz = null;
1:             clazz = Proxy.getProxyClass(cl, cinterfaces);
1:                 clazz = Proxy.getProxyClass(inLoader, cinterfaces);
1:                 clazz = Proxy.getProxyClass(FALLBACK_CLASS_LOADER, cinterfaces);
1:         }
1:         if (clazz != null) {
1:             checkSecurity(clazz);
1:             return clazz;
1:         } else {
1:             throw new ClassNotFoundException(null);
1:         }
1:     }
1: 
0:     public static String[] getSerialziablePackages() {
0:        if (serializablePackages == null) {
0:            serializablePackages = System.getProperty("org.apache.activemq.SERIALIZABLE_PACKAGES",
0:                        "java.lang,java.util,org.apache.activemq,org.fusesource.hawtbuf,com.thoughtworks.xstream.mapper").split(",");
1:        }
1: 
0:        return serializablePackages;
0:     };
1: 
1:     public static boolean isAllAllowed() {
0:         return getSerialziablePackages().length == 1 && getSerialziablePackages()[0].equals("*");
1:     }
1: 
1:     private void checkSecurity(Class clazz) throws ClassNotFoundException {
1:         if (!clazz.isPrimitive()) {
0:             if (clazz.getPackage() != null && !isAllAllowed()) {
1:                boolean found = false;
0:                for (String packageName : getSerialziablePackages()) {
1:                    if (clazz.getPackage().getName().equals(packageName) || clazz.getPackage().getName().startsWith(packageName + ".")) {
1:                        found = true;
1:                        break;
1:                    }
1:                }
1: 
1:                if (!found) {
0:                    throw new ClassNotFoundException("Forbidden " + clazz + "! This class is not allowed to be serialized. Add package with 'org.apache.activemq.SERIALIZABLE_PACKAGES' system property.");
1:                }
1:             }
author:gtully
-------------------------------------------------------------------------------
commit:d7a3b94
/////////////////////////////////////////////////////////////////////////
1:                     "java.lang,javax.security,java.util,org.apache.activemq,org.fusesource.hawtbuf,com.thoughtworks.xstream.mapper").split(",");
author:Timothy Bish
-------------------------------------------------------------------------------
commit:41ee3ec
/////////////////////////////////////////////////////////////////////////
1:     @Override
1:     @Override
/////////////////////////////////////////////////////////////////////////
1:         } else if ("void".equals(name)) {
1:             return void.class;
author:Claus Ibsen
-------------------------------------------------------------------------------
commit:6e49ef3
/////////////////////////////////////////////////////////////////////////
1: import org.slf4j.Logger;
1: import org.slf4j.LoggerFactory;
1: 
1:     private static final Logger LOG = LoggerFactory.getLogger(ClassLoadingAwareObjectInputStream.class);
/////////////////////////////////////////////////////////////////////////
1:         // check for simple types first
1:         final Class<?> clazz = loadSimpleType(className);
1:         if (clazz != null) {
1:             LOG.trace("Loaded class: {} as simple type -> ", className, clazz);
1:             return clazz;
1:         }
1: 
1:         // try the different class loaders
1:             LOG.trace("Attempting to load class: {} using classloader: {}", className, cl);
1:                 Class<?> answer = Class.forName(className, false, loader);
1:                 if (LOG.isTraceEnabled()) {
1:                     LOG.trace("Loaded class: {} using classloader: {} -> ", new Object[]{className, cl, answer});
1:                 }
1:                 return answer;
1:                 LOG.trace("Class not found: {} using classloader: {}", className, cl);
1: 
1:         // and then the fallback class loader
1:         return Class.forName(className, false, FALLBACK_CLASS_LOADER);
1:     /**
1:      * Load a simple type
1:      *
1:      * @param name the name of the class to load
1:      * @return the class or <tt>null</tt> if it could not be loaded
1:      */
1:     public static Class<?> loadSimpleType(String name) {
1:         // code from ObjectHelper.loadSimpleType in Apache Camel
1: 
1:         // special for byte[] or Object[] as its common to use
1:         if ("java.lang.byte[]".equals(name) || "byte[]".equals(name)) {
1:             return byte[].class;
1:         } else if ("java.lang.Byte[]".equals(name) || "Byte[]".equals(name)) {
1:             return Byte[].class;
1:         } else if ("java.lang.Object[]".equals(name) || "Object[]".equals(name)) {
1:             return Object[].class;
1:         } else if ("java.lang.String[]".equals(name) || "String[]".equals(name)) {
1:             return String[].class;
1:             // and these is common as well
1:         } else if ("java.lang.String".equals(name) || "String".equals(name)) {
1:             return String.class;
1:         } else if ("java.lang.Boolean".equals(name) || "Boolean".equals(name)) {
1:             return Boolean.class;
1:         } else if ("boolean".equals(name)) {
1:             return boolean.class;
1:         } else if ("java.lang.Integer".equals(name) || "Integer".equals(name)) {
1:             return Integer.class;
1:         } else if ("int".equals(name)) {
1:             return int.class;
1:         } else if ("java.lang.Long".equals(name) || "Long".equals(name)) {
1:             return Long.class;
1:         } else if ("long".equals(name)) {
1:             return long.class;
1:         } else if ("java.lang.Short".equals(name) || "Short".equals(name)) {
1:             return Short.class;
1:         } else if ("short".equals(name)) {
1:             return short.class;
1:         } else if ("java.lang.Byte".equals(name) || "Byte".equals(name)) {
1:             return Byte.class;
1:         } else if ("byte".equals(name)) {
1:             return byte.class;
1:         } else if ("java.lang.Float".equals(name) || "Float".equals(name)) {
1:             return Float.class;
1:         } else if ("float".equals(name)) {
1:             return float.class;
1:         } else if ("java.lang.Double".equals(name) || "Double".equals(name)) {
1:             return Double.class;
1:         } else if ("double".equals(name)) {
1:             return double.class;
1:         }
1: 
1:         return null;
1: 
commit:577952b
/////////////////////////////////////////////////////////////////////////
1:     private final ClassLoader inLoader;
1: 
1:         inLoader = in.getClass().getClassLoader();
0:         return load(classDesc.getName(), cl, inLoader);
/////////////////////////////////////////////////////////////////////////
0:                 return Proxy.getProxyClass(inLoader, cinterfaces);
1:                 // ignore
1:             }
1:             try {
0:                 return Proxy.getProxyClass(FALLBACK_CLASS_LOADER, cinterfaces);
1:             } catch (IllegalArgumentException e2) {
1:                 // ignore
1:     private Class<?> load(String className, ClassLoader... cl) throws ClassNotFoundException {
1:         for (ClassLoader loader : cl) {
1:             try {
0:                 return Class.forName(className, false, loader);
1:             } catch (ClassNotFoundException e) {
1:                 // ignore
0:         // fallback
0:         final Class<?> clazz = (Class<?>) primClasses.get(className);
0:         if (clazz != null) {
0:             return clazz;
0:         } else {
0:             return Class.forName(className, false, FALLBACK_CLASS_LOADER);
1:         }
author:Hiram R. Chirino
-------------------------------------------------------------------------------
commit:9a8f6e4
commit:27c87d2
/////////////////////////////////////////////////////////////////////////
0:             return Class.forName(className, false, cl);
0:             return Class.forName(className, false, FALLBACK_CLASS_LOADER);
commit:fc00993
/////////////////////////////////////////////////////////////////////////
1: 
/////////////////////////////////////////////////////////////////////////
1:         for (int i = 0; i < interfaces.length; i++) {
1:         }
/////////////////////////////////////////////////////////////////////////
0:         } catch (ClassNotFoundException e) {
commit:230a86c
/////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////
1:  *      http://www.apache.org/licenses/LICENSE-2.0
commit:86cbdfd
/////////////////////////////////////////////////////////////////////////
1: }
commit:88acb0e
/////////////////////////////////////////////////////////////////////////
1: /**
1:  * 
1:  */
1: package org.apache.activemq.util;
1: 
1: import java.io.IOException;
1: import java.io.InputStream;
1: import java.io.ObjectInputStream;
1: import java.io.ObjectStreamClass;
1: import java.lang.reflect.Proxy;
1: 
1: 
1: public class ClassLoadingAwareObjectInputStream extends ObjectInputStream {
1: 	
0:     private static final ClassLoader FALLBACK_CLASS_LOADER = ClassLoadingAwareObjectInputStream.class.getClassLoader();
1: 
1:     public ClassLoadingAwareObjectInputStream(InputStream in) throws IOException {
1:         super(in);
1:     }
1: 
0:     protected Class resolveClass(ObjectStreamClass classDesc) throws IOException, ClassNotFoundException {
1:         ClassLoader cl = Thread.currentThread().getContextClassLoader();
0:         return load(classDesc.getName(), cl);
1:     }
1: 
0:     protected Class resolveProxyClass(String[] interfaces) throws IOException, ClassNotFoundException {
1:         ClassLoader cl = Thread.currentThread().getContextClassLoader();
1:         Class[] cinterfaces = new Class[interfaces.length];
0:         for (int i = 0; i < interfaces.length; i++)
1:             cinterfaces[i] = load(interfaces[i], cl);
1: 
1:         try {
0:             return Proxy.getProxyClass(cinterfaces[0].getClassLoader(), cinterfaces);
1:         } catch (IllegalArgumentException e) {
0:             throw new ClassNotFoundException(null, e);
1:         }
1:     }
1: 
0:     private Class load(String className, ClassLoader cl) throws ClassNotFoundException {
1:         try {
0:             return ClassLoading.loadClass(className, cl);
0:         } catch ( ClassNotFoundException e ) {
0:             return ClassLoading.loadClass(className, FALLBACK_CLASS_LOADER);
1:         }
1:     }
1: 
1: }
author:Timothy A. Bish
-------------------------------------------------------------------------------
commit:419fde4
/////////////////////////////////////////////////////////////////////////
0: @SuppressWarnings("rawtypes")
1:     private static final ClassLoader FALLBACK_CLASS_LOADER =
1:         ClassLoadingAwareObjectInputStream.class.getClassLoader();
0: 
0:     /**
0:      * Maps primitive type names to corresponding class objects.
0:      */
0: 
1:     protected Class<?> resolveClass(ObjectStreamClass classDesc) throws IOException, ClassNotFoundException {
1:     protected Class<?> resolveProxyClass(String[] interfaces) throws IOException, ClassNotFoundException {
/////////////////////////////////////////////////////////////////////////
0:             return Proxy.getProxyClass(cl, cinterfaces);
0:             try {
0:                 return Proxy.getProxyClass(FALLBACK_CLASS_LOADER, cinterfaces);
1:             } catch (IllegalArgumentException e1) {
0:             }
0: 
0:     private Class<?> load(String className, ClassLoader cl) throws ClassNotFoundException {
0:             final Class<?> clazz = (Class<?>) primClasses.get(className);
/////////////////////////////////////////////////////////////////////////
0: 
/////////////////////////////////////////////////////////////////////////
author:Robert Davies
-------------------------------------------------------------------------------
commit:213c3ae
/////////////////////////////////////////////////////////////////////////
0: import java.util.HashMap;
0:     /** <p>Maps primitive type names to corresponding class objects.</p> */
0:     private static final HashMap<String, Class> primClasses = new HashMap<String, Class>(8, 1.0F);
/////////////////////////////////////////////////////////////////////////
0:     private Class load(String className, ClassLoader cl)
0:             throws ClassNotFoundException {
0:             final Class clazz = (Class) primClasses.get(className);
0:             if (clazz != null) {
0:                 return clazz;
0:             } else {
0:                 return Class.forName(className, false, FALLBACK_CLASS_LOADER);
0:             }
0:     
0:     
0:     
0:     static {
0:         primClasses.put("boolean", boolean.class);
0:         primClasses.put("byte", byte.class);
0:         primClasses.put("char", char.class);
0:         primClasses.put("short", short.class);
0:         primClasses.put("int", int.class);
0:         primClasses.put("long", long.class);
0:         primClasses.put("float", float.class);
0:         primClasses.put("double", double.class);
0:         primClasses.put("void", void.class);
0:     }
author:James Strachan
-------------------------------------------------------------------------------
commit:be5a767
/////////////////////////////////////////////////////////////////////////
1:  * Licensed to the Apache Software Foundation (ASF) under one or more
1:  * contributor license agreements.  See the NOTICE file distributed with
1:  * this work for additional information regarding copyright ownership.
1:  * The ASF licenses this file to You under the Apache License, Version 2.0
1:  * (the "License"); you may not use this file except in compliance with
1:  * the License.  You may obtain a copy of the License at
commit:7a5c499
/////////////////////////////////////////////////////////////////////////
1:  *
0:  * Copyright 2005-2006 The Apache Software Foundation
1:  *
0:  * Licensed under the Apache License, Version 2.0 (the "License");
0:  * you may not use this file except in compliance with the License.
0:  * You may obtain a copy of the License at
1:  *
0:  * http://www.apache.org/licenses/LICENSE-2.0
1:  *
1:  * Unless required by applicable law or agreed to in writing, software
1:  * distributed under the License is distributed on an "AS IS" BASIS,
1:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:  * See the License for the specific language governing permissions and
1:  * limitations under the License.
============================================================================