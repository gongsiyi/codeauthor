1:4b018b4: /*
1:31c55f7:  * Licensed to the Apache Software Foundation (ASF) under one or more
1:31c55f7:  * contributor license agreements.  See the NOTICE file distributed with
1:31c55f7:  * this work for additional information regarding copyright ownership.
1:31c55f7:  * The ASF licenses this file to You under the Apache License, Version 2.0
1:31c55f7:  * (the "License"); you may not use this file except in compliance with
1:31c55f7:  * the License.  You may obtain a copy of the License at
2:31c55f7:  *
1:31c55f7:  *      http://www.apache.org/licenses/LICENSE-2.0
1:31c55f7:  *
1:31c55f7:  * Unless required by applicable law or agreed to in writing, software
1:31c55f7:  * distributed under the License is distributed on an "AS IS" BASIS,
1:31c55f7:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:31c55f7:  * See the License for the specific language governing permissions and
1:31c55f7:  * limitations under the License.
3:31c55f7:  */
1:31c55f7: package org.apache.activemq.transport.amqp.client.transport;
12:31c55f7: 
1:31c55f7: import java.io.IOException;
1:31c55f7: import java.net.URI;
1:31c55f7: import java.security.Principal;
1:31c55f7: import java.util.concurrent.CountDownLatch;
1:31c55f7: import java.util.concurrent.TimeUnit;
1:31c55f7: import java.util.concurrent.atomic.AtomicBoolean;
1:31c55f7: 
1:31c55f7: import org.apache.activemq.transport.amqp.client.util.IOExceptionSupport;
1:31c55f7: import org.slf4j.Logger;
1:31c55f7: import org.slf4j.LoggerFactory;
1:31c55f7: 
1:31c55f7: import io.netty.bootstrap.Bootstrap;
1:31c55f7: import io.netty.buffer.ByteBuf;
1:31c55f7: import io.netty.channel.Channel;
1:31c55f7: import io.netty.channel.ChannelFuture;
1:31c55f7: import io.netty.channel.ChannelFutureListener;
1:31c55f7: import io.netty.channel.ChannelHandlerContext;
1:4b018b4: import io.netty.channel.ChannelInboundHandlerAdapter;
1:31c55f7: import io.netty.channel.ChannelInitializer;
1:31c55f7: import io.netty.channel.ChannelOption;
1:4b018b4: import io.netty.channel.ChannelPipeline;
1:31c55f7: import io.netty.channel.EventLoopGroup;
1:31c55f7: import io.netty.channel.FixedRecvByteBufAllocator;
1:31c55f7: import io.netty.channel.SimpleChannelInboundHandler;
1:31c55f7: import io.netty.channel.nio.NioEventLoopGroup;
1:31c55f7: import io.netty.channel.socket.nio.NioSocketChannel;
1:154ff81: import io.netty.handler.logging.LoggingHandler;
1:31c55f7: import io.netty.handler.ssl.SslHandler;
1:31c55f7: import io.netty.util.concurrent.Future;
1:31c55f7: import io.netty.util.concurrent.GenericFutureListener;
1:31c55f7: 
4:31c55f7: /**
1:31c55f7:  * TCP based transport that uses Netty as the underlying IO layer.
1:31c55f7:  */
1:31c55f7: public class NettyTcpTransport implements NettyTransport {
1:31c55f7: 
1:31c55f7:     private static final Logger LOG = LoggerFactory.getLogger(NettyTcpTransport.class);
1:31c55f7: 
1:31c55f7:     private static final int SHUTDOWN_TIMEOUT = 100;
1:88efa01:     public static final int DEFAULT_MAX_FRAME_SIZE = 65535;
1:31c55f7: 
1:31c55f7:     protected Bootstrap bootstrap;
1:31c55f7:     protected EventLoopGroup group;
1:31c55f7:     protected Channel channel;
1:31c55f7:     protected NettyTransportListener listener;
1:4b018b4:     protected final NettyTransportOptions options;
1:31c55f7:     protected final URI remote;
1:88efa01:     protected int maxFrameSize = DEFAULT_MAX_FRAME_SIZE;
1:31c55f7: 
1:31c55f7:     private final AtomicBoolean connected = new AtomicBoolean();
1:31c55f7:     private final AtomicBoolean closed = new AtomicBoolean();
1:31c55f7:     private final CountDownLatch connectLatch = new CountDownLatch(1);
1:154ff81:     private volatile IOException failureCause;
1:31c55f7: 
1:31c55f7:     /**
1:31c55f7:      * Create a new transport instance
1:31c55f7:      *
1:31c55f7:      * @param remoteLocation
1:31c55f7:      *        the URI that defines the remote resource to connect to.
1:31c55f7:      * @param options
1:31c55f7:      *        the transport options used to configure the socket connection.
1:31c55f7:      */
1:31c55f7:     public NettyTcpTransport(URI remoteLocation, NettyTransportOptions options) {
1:31c55f7:         this(null, remoteLocation, options);
18:31c55f7:     }
1:31c55f7: 
1:31c55f7:     /**
1:31c55f7:      * Create a new transport instance
1:31c55f7:      *
1:31c55f7:      * @param listener
1:31c55f7:      *        the TransportListener that will receive events from this Transport.
1:31c55f7:      * @param remoteLocation
1:31c55f7:      *        the URI that defines the remote resource to connect to.
1:31c55f7:      * @param options
1:31c55f7:      *        the transport options used to configure the socket connection.
1:31c55f7:      */
1:31c55f7:     public NettyTcpTransport(NettyTransportListener listener, URI remoteLocation, NettyTransportOptions options) {
1:4b018b4:         if (options == null) {
1:4b018b4:             throw new IllegalArgumentException("Transport Options cannot be null");
1:4b018b4:         }
1:4b018b4: 
1:4b018b4:         if (remoteLocation == null) {
1:4b018b4:             throw new IllegalArgumentException("Transport remote location cannot be null");
1:4b018b4:         }
1:4b018b4: 
1:31c55f7:         this.options = options;
1:31c55f7:         this.listener = listener;
1:31c55f7:         this.remote = remoteLocation;
1:31c55f7:     }
1:31c55f7: 
2:31c55f7:     @Override
1:31c55f7:     public void connect() throws IOException {
1:31c55f7: 
1:31c55f7:         if (listener == null) {
1:31c55f7:             throw new IllegalStateException("A transport listener must be set before connection attempts.");
1:31c55f7:         }
1:31c55f7: 
1:4b018b4:         final SslHandler sslHandler;
1:4b018b4:         if (isSSL()) {
1:4b018b4:             try {
1:4b018b4:                 sslHandler = NettyTransportSupport.createSslHandler(getRemoteLocation(), getSslOptions());
1:4b018b4:             } catch (Exception ex) {
1:4b018b4:                 // TODO: can we stop it throwing Exception?
1:4b018b4:                 throw IOExceptionSupport.create(ex);
1:4b018b4:             }
1:4b018b4:         } else {
1:4b018b4:             sslHandler = null;
1:4b018b4:         }
1:4b018b4: 
1:31c55f7:         group = new NioEventLoopGroup(1);
1:31c55f7: 
1:31c55f7:         bootstrap = new Bootstrap();
1:31c55f7:         bootstrap.group(group);
1:31c55f7:         bootstrap.channel(NioSocketChannel.class);
1:31c55f7:         bootstrap.handler(new ChannelInitializer<Channel>() {
1:31c55f7:             @Override
1:31c55f7:             public void initChannel(Channel connectedChannel) throws Exception {
1:4b018b4:                 configureChannel(connectedChannel, sslHandler);
1:31c55f7:             }
2:31c55f7:         });
1:31c55f7: 
1:31c55f7:         configureNetty(bootstrap, getTransportOptions());
1:31c55f7: 
1:31c55f7:         ChannelFuture future = bootstrap.connect(getRemoteHost(), getRemotePort());
1:31c55f7:         future.addListener(new ChannelFutureListener() {
1:31c55f7: 
1:31c55f7:             @Override
1:31c55f7:             public void operationComplete(ChannelFuture future) throws Exception {
1:4b018b4:                 if (!future.isSuccess()) {
1:4b018b4:                     handleException(future.channel(), IOExceptionSupport.create(future.cause()));
1:31c55f7:                 }
1:31c55f7:             }
1:31c55f7:         });
1:31c55f7: 
1:31c55f7:         try {
1:31c55f7:             connectLatch.await();
1:31c55f7:         } catch (InterruptedException ex) {
1:31c55f7:             LOG.debug("Transport connection was interrupted.");
1:31c55f7:             Thread.interrupted();
1:31c55f7:             failureCause = IOExceptionSupport.create(ex);
1:31c55f7:         }
1:31c55f7: 
1:31c55f7:         if (failureCause != null) {
1:31c55f7:             // Close out any Netty resources now as they are no longer needed.
2:31c55f7:             if (channel != null) {
2:31c55f7:                 channel.close().syncUninterruptibly();
1:31c55f7:                 channel = null;
1:31c55f7:             }
2:31c55f7:             if (group != null) {
1:154ff81:                 Future<?> fut = group.shutdownGracefully(0, SHUTDOWN_TIMEOUT, TimeUnit.MILLISECONDS);
1:154ff81:                 if (!fut.awaitUninterruptibly(2 * SHUTDOWN_TIMEOUT)) {
1:154ff81:                     LOG.trace("Channel group shutdown failed to complete in allotted time");
1:154ff81:                 }
1:31c55f7:                 group = null;
1:31c55f7:             }
1:31c55f7: 
1:31c55f7:             throw failureCause;
7:31c55f7:         } else {
1:31c55f7:             // Connected, allow any held async error to fire now and close the transport.
1:31c55f7:             channel.eventLoop().execute(new Runnable() {
1:31c55f7: 
1:31c55f7:                 @Override
1:31c55f7:                 public void run() {
1:4b018b4:                     if (failureCause != null) {
1:4b018b4:                         channel.pipeline().fireExceptionCaught(failureCause);
1:31c55f7:                     }
1:31c55f7:                 }
1:31c55f7:             });
1:31c55f7:         }
1:31c55f7:     }
1:31c55f7: 
1:31c55f7:     @Override
1:31c55f7:     public boolean isConnected() {
1:31c55f7:         return connected.get();
1:31c55f7:     }
1:31c55f7: 
1:31c55f7:     @Override
1:31c55f7:     public boolean isSSL() {
1:4b018b4:         return options.isSSL();
1:31c55f7:     }
1:31c55f7: 
1:31c55f7:     @Override
1:31c55f7:     public void close() throws IOException {
1:31c55f7:         if (closed.compareAndSet(false, true)) {
2:31c55f7:             connected.set(false);
1:154ff81:             try {
1:154ff81:                 if (channel != null) {
1:154ff81:                     channel.close().syncUninterruptibly();
1:154ff81:                 }
1:154ff81:             } finally {
1:154ff81:                 if (group != null) {
1:154ff81:                     Future<?> fut = group.shutdownGracefully(0, SHUTDOWN_TIMEOUT, TimeUnit.MILLISECONDS);
1:154ff81:                     if (!fut.awaitUninterruptibly(2 * SHUTDOWN_TIMEOUT)) {
1:154ff81:                         LOG.trace("Channel group shutdown failed to complete in allotted time");
1:154ff81:                     }
1:154ff81:                 }
1:31c55f7:             }
1:31c55f7:         }
1:31c55f7:     }
1:31c55f7: 
1:31c55f7:     @Override
1:31c55f7:     public ByteBuf allocateSendBuffer(int size) throws IOException {
1:31c55f7:         checkConnected();
1:31c55f7:         return channel.alloc().ioBuffer(size, size);
1:31c55f7:     }
1:31c55f7: 
1:31c55f7:     @Override
1:31c55f7:     public void send(ByteBuf output) throws IOException {
1:31c55f7:         checkConnected();
1:31c55f7:         int length = output.readableBytes();
1:31c55f7:         if (length == 0) {
1:31c55f7:             return;
1:31c55f7:         }
1:31c55f7: 
1:31c55f7:         LOG.trace("Attempted write of: {} bytes", length);
1:31c55f7: 
1:31c55f7:         channel.writeAndFlush(output);
1:31c55f7:     }
1:31c55f7: 
1:31c55f7:     @Override
1:31c55f7:     public NettyTransportListener getTransportListener() {
1:31c55f7:         return listener;
1:31c55f7:     }
1:31c55f7: 
1:31c55f7:     @Override
1:31c55f7:     public void setTransportListener(NettyTransportListener listener) {
1:31c55f7:         this.listener = listener;
1:31c55f7:     }
1:31c55f7: 
1:31c55f7:     @Override
1:31c55f7:     public NettyTransportOptions getTransportOptions() {
1:31c55f7:         return options;
1:31c55f7:     }
1:31c55f7: 
1:31c55f7:     @Override
1:31c55f7:     public URI getRemoteLocation() {
1:31c55f7:         return remote;
1:31c55f7:     }
1:31c55f7: 
1:31c55f7:     @Override
1:31c55f7:     public Principal getLocalPrincipal() {
1:4b018b4:         Principal result = null;
1:4b018b4: 
1:4b018b4:         if (isSSL()) {
1:4b018b4:             SslHandler sslHandler = channel.pipeline().get(SslHandler.class);
1:4b018b4:             result = sslHandler.engine().getSession().getLocalPrincipal();
1:31c55f7:         }
1:31c55f7: 
1:4b018b4:         return result;
1:31c55f7:     }
1:31c55f7: 
1:88efa01:     @Override
1:88efa01:     public void setMaxFrameSize(int maxFrameSize) {
1:88efa01:         if (connected.get()) {
1:88efa01:             throw new IllegalStateException("Cannot change Max Frame Size while connected.");
1:88efa01:         }
1:88efa01: 
1:88efa01:         this.maxFrameSize = maxFrameSize;
1:88efa01:     }
1:88efa01: 
1:88efa01:     @Override
1:88efa01:     public int getMaxFrameSize() {
1:88efa01:         return maxFrameSize;
1:88efa01:     }
1:88efa01: 
1:4b018b4:     //----- Internal implementation details, can be overridden as needed -----//
1:31c55f7: 
1:31c55f7:     protected String getRemoteHost() {
1:31c55f7:         return remote.getHost();
1:31c55f7:     }
1:31c55f7: 
1:31c55f7:     protected int getRemotePort() {
1:4b018b4:         if (remote.getPort() != -1) {
1:4b018b4:             return remote.getPort();
1:4b018b4:         } else {
1:4b018b4:             return isSSL() ? getSslOptions().getDefaultSslPort() : getTransportOptions().getDefaultTcpPort();
1:31c55f7:         }
1:31c55f7:     }
1:31c55f7: 
1:4b018b4:     protected void addAdditionalHandlers(ChannelPipeline pipeline) {
1:4b018b4: 
1:4b018b4:     }
1:4b018b4: 
1:4b018b4:     protected ChannelInboundHandlerAdapter createChannelHandler() {
1:4b018b4:         return new NettyTcpTransportHandler();
1:4b018b4:     }
1:4b018b4: 
1:4b018b4:     //----- Event Handlers which can be overridden in subclasses -------------//
1:4b018b4: 
1:4b018b4:     protected void handleConnected(Channel channel) throws Exception {
1:4b018b4:         LOG.trace("Channel has become active! Channel is {}", channel);
1:4b018b4:         connectionEstablished(channel);
1:4b018b4:     }
1:4b018b4: 
1:4b018b4:     protected void handleChannelInactive(Channel channel) throws Exception {
1:4b018b4:         LOG.trace("Channel has gone inactive! Channel is {}", channel);
1:4b018b4:         if (connected.compareAndSet(true, false) && !closed.get()) {
1:4b018b4:             LOG.trace("Firing onTransportClosed listener");
1:4b018b4:             listener.onTransportClosed();
1:4b018b4:         }
1:4b018b4:     }
1:4b018b4: 
1:4b018b4:     protected void handleException(Channel channel, Throwable cause) throws Exception {
1:4b018b4:         LOG.trace("Exception on channel! Channel is {}", channel);
1:4b018b4:         if (connected.compareAndSet(true, false) && !closed.get()) {
1:4b018b4:             LOG.trace("Firing onTransportError listener");
1:4b018b4:             if (failureCause != null) {
1:4b018b4:                 listener.onTransportError(failureCause);
1:4b018b4:             } else {
1:4b018b4:                 listener.onTransportError(cause);
1:4b018b4:             }
1:4b018b4:         } else {
1:4b018b4:             // Hold the first failure for later dispatch if connect succeeds.
1:4b018b4:             // This will then trigger disconnect using the first error reported.
1:4b018b4:             if (failureCause == null) {
1:4b018b4:                 LOG.trace("Holding error until connect succeeds: {}", cause.getMessage());
1:4b018b4:                 failureCause = IOExceptionSupport.create(cause);
1:4b018b4:             }
1:4b018b4: 
1:4b018b4:             connectionFailed(channel, failureCause);
1:4b018b4:         }
1:4b018b4:     }
1:4b018b4: 
1:4b018b4:     //----- State change handlers and checks ---------------------------------//
1:4b018b4: 
1:4b018b4:     protected final void checkConnected() throws IOException {
1:4b018b4:         if (!connected.get()) {
1:4b018b4:             throw new IOException("Cannot send to a non-connected transport.");
1:4b018b4:         }
1:4b018b4:     }
1:4b018b4: 
1:4b018b4:     /*
1:4b018b4:      * Called when the transport has successfully connected and is ready for use.
1:4b018b4:      */
1:4b018b4:     private void connectionEstablished(Channel connectedChannel) {
1:4b018b4:         channel = connectedChannel;
1:4b018b4:         connected.set(true);
1:4b018b4:         connectLatch.countDown();
1:4b018b4:     }
1:4b018b4: 
1:4b018b4:     /*
1:4b018b4:      * Called when the transport connection failed and an error should be returned.
1:4b018b4:      */
1:4b018b4:     private void connectionFailed(Channel failedChannel, IOException cause) {
1:4b018b4:         failureCause = cause;
1:4b018b4:         channel = failedChannel;
1:4b018b4:         connected.set(false);
1:4b018b4:         connectLatch.countDown();
1:4b018b4:     }
1:4b018b4: 
1:4b018b4:     private NettyTransportSslOptions getSslOptions() {
1:4b018b4:         return (NettyTransportSslOptions) getTransportOptions();
1:4b018b4:     }
1:4b018b4: 
1:4b018b4:     private void configureNetty(Bootstrap bootstrap, NettyTransportOptions options) {
1:31c55f7:         bootstrap.option(ChannelOption.TCP_NODELAY, options.isTcpNoDelay());
1:31c55f7:         bootstrap.option(ChannelOption.CONNECT_TIMEOUT_MILLIS, options.getConnectTimeout());
1:31c55f7:         bootstrap.option(ChannelOption.SO_KEEPALIVE, options.isTcpKeepAlive());
1:31c55f7:         bootstrap.option(ChannelOption.SO_LINGER, options.getSoLinger());
1:31c55f7:         bootstrap.option(ChannelOption.ALLOCATOR, PartialPooledByteBufAllocator.INSTANCE);
1:31c55f7: 
1:31c55f7:         if (options.getSendBufferSize() != -1) {
1:31c55f7:             bootstrap.option(ChannelOption.SO_SNDBUF, options.getSendBufferSize());
1:31c55f7:         }
1:31c55f7: 
1:31c55f7:         if (options.getReceiveBufferSize() != -1) {
1:31c55f7:             bootstrap.option(ChannelOption.SO_RCVBUF, options.getReceiveBufferSize());
1:31c55f7:             bootstrap.option(ChannelOption.RCVBUF_ALLOCATOR, new FixedRecvByteBufAllocator(options.getReceiveBufferSize()));
1:31c55f7:         }
1:31c55f7: 
1:31c55f7:         if (options.getTrafficClass() != -1) {
1:31c55f7:             bootstrap.option(ChannelOption.IP_TOS, options.getTrafficClass());
1:31c55f7:         }
1:31c55f7:     }
1:31c55f7: 
1:4b018b4:     private void configureChannel(final Channel channel, final SslHandler sslHandler) throws Exception {
3:31c55f7:         if (isSSL()) {
1:31c55f7:             channel.pipeline().addLast(sslHandler);
1:31c55f7:         }
1:31c55f7: 
1:154ff81:         if (getTransportOptions().isTraceBytes()) {
1:154ff81:             channel.pipeline().addLast("logger", new LoggingHandler(getClass()));
1:154ff81:         }
1:154ff81: 
1:4b018b4:         addAdditionalHandlers(channel.pipeline());
1:31c55f7: 
1:4b018b4:         channel.pipeline().addLast(createChannelHandler());
1:31c55f7:     }
1:31c55f7: 
1:31c55f7:     //----- Handle connection events -----------------------------------------//
1:31c55f7: 
1:4b018b4:     protected abstract class NettyDefaultHandler<E> extends SimpleChannelInboundHandler<E> {
1:4b018b4: 
1:4b018b4:         @Override
1:4b018b4:         public void channelRegistered(ChannelHandlerContext context) throws Exception {
1:4b018b4:             channel = context.channel();
1:4b018b4:         }
1:31c55f7: 
1:31c55f7:         @Override
1:31c55f7:         public void channelActive(ChannelHandlerContext context) throws Exception {
1:4b018b4:             // In the Secure case we need to let the handshake complete before we
1:4b018b4:             // trigger the connected event.
1:4b018b4:             if (!isSSL()) {
1:4b018b4:                 handleConnected(context.channel());
1:4b018b4:             } else {
1:4b018b4:                 SslHandler sslHandler = context.pipeline().get(SslHandler.class);
1:4b018b4:                 sslHandler.handshakeFuture().addListener(new GenericFutureListener<Future<Channel>>() {
1:4b018b4:                     @Override
1:4b018b4:                     public void operationComplete(Future<Channel> future) throws Exception {
1:4b018b4:                         if (future.isSuccess()) {
1:4b018b4:                             LOG.trace("SSL Handshake has completed: {}", channel);
1:4b018b4:                             handleConnected(channel);
1:4b018b4:                         } else {
1:4b018b4:                             LOG.trace("SSL Handshake has failed: {}", channel);
1:4b018b4:                             handleException(channel, future.cause());
1:4b018b4:                         }
1:4b018b4:                     }
1:4b018b4:                 });
1:4b018b4:             }
1:31c55f7:         }
1:31c55f7: 
1:31c55f7:         @Override
1:31c55f7:         public void channelInactive(ChannelHandlerContext context) throws Exception {
1:4b018b4:             handleChannelInactive(context.channel());
1:31c55f7:         }
1:31c55f7: 
1:31c55f7:         @Override
1:31c55f7:         public void exceptionCaught(ChannelHandlerContext context, Throwable cause) throws Exception {
1:4b018b4:             handleException(context.channel(), cause);
1:4b018b4:         }
1:31c55f7:     }
1:4b018b4: 
1:4b018b4:     //----- Handle Binary data from connection -------------------------------//
1:4b018b4: 
1:4b018b4:     protected class NettyTcpTransportHandler extends NettyDefaultHandler<ByteBuf> {
1:31c55f7: 
1:31c55f7:         @Override
1:31c55f7:         protected void channelRead0(ChannelHandlerContext ctx, ByteBuf buffer) throws Exception {
1:31c55f7:             LOG.trace("New data read: {} bytes incoming: {}", buffer.readableBytes(), buffer);
1:31c55f7:             listener.onData(buffer);
1:31c55f7:         }
1:31c55f7:     }
1:31c55f7: }
============================================================================
author:Timothy Bish
-------------------------------------------------------------------------------
commit:88efa01
/////////////////////////////////////////////////////////////////////////
1:     public static final int DEFAULT_MAX_FRAME_SIZE = 65535;
/////////////////////////////////////////////////////////////////////////
1:     protected int maxFrameSize = DEFAULT_MAX_FRAME_SIZE;
/////////////////////////////////////////////////////////////////////////
1:     @Override
1:     public void setMaxFrameSize(int maxFrameSize) {
1:         if (connected.get()) {
1:             throw new IllegalStateException("Cannot change Max Frame Size while connected.");
1:         }
1: 
1:         this.maxFrameSize = maxFrameSize;
1:     }
1: 
1:     @Override
1:     public int getMaxFrameSize() {
1:         return maxFrameSize;
1:     }
1: 
commit:154ff81
/////////////////////////////////////////////////////////////////////////
1: import io.netty.handler.logging.LoggingHandler;
/////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////
1:     private volatile IOException failureCause;
/////////////////////////////////////////////////////////////////////////
1:                 Future<?> fut = group.shutdownGracefully(0, SHUTDOWN_TIMEOUT, TimeUnit.MILLISECONDS);
1:                 if (!fut.awaitUninterruptibly(2 * SHUTDOWN_TIMEOUT)) {
1:                     LOG.trace("Channel group shutdown failed to complete in allotted time");
1:                 }
/////////////////////////////////////////////////////////////////////////
1:             try {
1:                 if (channel != null) {
1:                     channel.close().syncUninterruptibly();
1:                 }
1:             } finally {
1:                 if (group != null) {
1:                     Future<?> fut = group.shutdownGracefully(0, SHUTDOWN_TIMEOUT, TimeUnit.MILLISECONDS);
1:                     if (!fut.awaitUninterruptibly(2 * SHUTDOWN_TIMEOUT)) {
1:                         LOG.trace("Channel group shutdown failed to complete in allotted time");
1:                     }
1:                 }
/////////////////////////////////////////////////////////////////////////
1:         if (getTransportOptions().isTraceBytes()) {
1:             channel.pipeline().addLast("logger", new LoggingHandler(getClass()));
1:         }
1: 
commit:4b018b4
/////////////////////////////////////////////////////////////////////////
1: /*
/////////////////////////////////////////////////////////////////////////
1: import io.netty.channel.ChannelInboundHandlerAdapter;
1: import io.netty.channel.ChannelPipeline;
/////////////////////////////////////////////////////////////////////////
1:     protected final NettyTransportOptions options;
/////////////////////////////////////////////////////////////////////////
1:         if (options == null) {
1:             throw new IllegalArgumentException("Transport Options cannot be null");
1:         }
1: 
1:         if (remoteLocation == null) {
1:             throw new IllegalArgumentException("Transport remote location cannot be null");
1:         }
1: 
/////////////////////////////////////////////////////////////////////////
1:         final SslHandler sslHandler;
1:         if (isSSL()) {
1:             try {
1:                 sslHandler = NettyTransportSupport.createSslHandler(getRemoteLocation(), getSslOptions());
1:             } catch (Exception ex) {
1:                 // TODO: can we stop it throwing Exception?
1:                 throw IOExceptionSupport.create(ex);
1:             }
1:         } else {
1:             sslHandler = null;
1:         }
1: 
1:                 configureChannel(connectedChannel, sslHandler);
/////////////////////////////////////////////////////////////////////////
1:                 if (!future.isSuccess()) {
1:                     handleException(future.channel(), IOExceptionSupport.create(future.cause()));
/////////////////////////////////////////////////////////////////////////
1:                     if (failureCause != null) {
1:                         channel.pipeline().fireExceptionCaught(failureCause);
/////////////////////////////////////////////////////////////////////////
1:         return options.isSSL();
/////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////
1:         Principal result = null;
1: 
1:         if (isSSL()) {
1:             SslHandler sslHandler = channel.pipeline().get(SslHandler.class);
1:             result = sslHandler.engine().getSession().getLocalPrincipal();
1:         return result;
1:     //----- Internal implementation details, can be overridden as needed -----//
1:         if (remote.getPort() != -1) {
1:             return remote.getPort();
1:         } else {
1:             return isSSL() ? getSslOptions().getDefaultSslPort() : getTransportOptions().getDefaultTcpPort();
1:     protected void addAdditionalHandlers(ChannelPipeline pipeline) {
1: 
1:     }
1: 
1:     protected ChannelInboundHandlerAdapter createChannelHandler() {
1:         return new NettyTcpTransportHandler();
1:     }
1: 
1:     //----- Event Handlers which can be overridden in subclasses -------------//
1: 
1:     protected void handleConnected(Channel channel) throws Exception {
1:         LOG.trace("Channel has become active! Channel is {}", channel);
1:         connectionEstablished(channel);
1:     }
1: 
1:     protected void handleChannelInactive(Channel channel) throws Exception {
1:         LOG.trace("Channel has gone inactive! Channel is {}", channel);
1:         if (connected.compareAndSet(true, false) && !closed.get()) {
1:             LOG.trace("Firing onTransportClosed listener");
1:             listener.onTransportClosed();
1:         }
1:     }
1: 
1:     protected void handleException(Channel channel, Throwable cause) throws Exception {
1:         LOG.trace("Exception on channel! Channel is {}", channel);
1:         if (connected.compareAndSet(true, false) && !closed.get()) {
1:             LOG.trace("Firing onTransportError listener");
1:             if (failureCause != null) {
1:                 listener.onTransportError(failureCause);
1:             } else {
1:                 listener.onTransportError(cause);
1:             }
1:         } else {
1:             // Hold the first failure for later dispatch if connect succeeds.
1:             // This will then trigger disconnect using the first error reported.
1:             if (failureCause == null) {
1:                 LOG.trace("Holding error until connect succeeds: {}", cause.getMessage());
1:                 failureCause = IOExceptionSupport.create(cause);
1:             }
1: 
1:             connectionFailed(channel, failureCause);
1:         }
1:     }
1: 
1:     //----- State change handlers and checks ---------------------------------//
1: 
1:     protected final void checkConnected() throws IOException {
1:         if (!connected.get()) {
1:             throw new IOException("Cannot send to a non-connected transport.");
1:         }
1:     }
1: 
1:     /*
1:      * Called when the transport has successfully connected and is ready for use.
1:      */
1:     private void connectionEstablished(Channel connectedChannel) {
1:         channel = connectedChannel;
1:         connected.set(true);
1:         connectLatch.countDown();
1:     }
1: 
1:     /*
1:      * Called when the transport connection failed and an error should be returned.
1:      */
1:     private void connectionFailed(Channel failedChannel, IOException cause) {
1:         failureCause = cause;
1:         channel = failedChannel;
1:         connected.set(false);
1:         connectLatch.countDown();
1:     }
1: 
1:     private NettyTransportSslOptions getSslOptions() {
1:         return (NettyTransportSslOptions) getTransportOptions();
1:     }
1: 
1:     private void configureNetty(Bootstrap bootstrap, NettyTransportOptions options) {
/////////////////////////////////////////////////////////////////////////
1:     private void configureChannel(final Channel channel, final SslHandler sslHandler) throws Exception {
1:         addAdditionalHandlers(channel.pipeline());
1:         channel.pipeline().addLast(createChannelHandler());
1:     protected abstract class NettyDefaultHandler<E> extends SimpleChannelInboundHandler<E> {
1: 
1:         @Override
1:         public void channelRegistered(ChannelHandlerContext context) throws Exception {
1:             channel = context.channel();
1:         }
1:             // In the Secure case we need to let the handshake complete before we
1:             // trigger the connected event.
1:             if (!isSSL()) {
1:                 handleConnected(context.channel());
1:             } else {
1:                 SslHandler sslHandler = context.pipeline().get(SslHandler.class);
1:                 sslHandler.handshakeFuture().addListener(new GenericFutureListener<Future<Channel>>() {
1:                     @Override
1:                     public void operationComplete(Future<Channel> future) throws Exception {
1:                         if (future.isSuccess()) {
1:                             LOG.trace("SSL Handshake has completed: {}", channel);
1:                             handleConnected(channel);
1:                         } else {
1:                             LOG.trace("SSL Handshake has failed: {}", channel);
1:                             handleException(channel, future.cause());
1:                         }
1:                     }
1:                 });
1:             }
1:             handleChannelInactive(context.channel());
1:             handleException(context.channel(), cause);
1:     }
1: 
1:     //----- Handle Binary data from connection -------------------------------//
1: 
1:     protected class NettyTcpTransportHandler extends NettyDefaultHandler<ByteBuf> {
commit:31c55f7
/////////////////////////////////////////////////////////////////////////
1: /**
1:  * Licensed to the Apache Software Foundation (ASF) under one or more
1:  * contributor license agreements.  See the NOTICE file distributed with
1:  * this work for additional information regarding copyright ownership.
1:  * The ASF licenses this file to You under the Apache License, Version 2.0
1:  * (the "License"); you may not use this file except in compliance with
1:  * the License.  You may obtain a copy of the License at
1:  *
1:  *      http://www.apache.org/licenses/LICENSE-2.0
1:  *
1:  * Unless required by applicable law or agreed to in writing, software
1:  * distributed under the License is distributed on an "AS IS" BASIS,
1:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:  * See the License for the specific language governing permissions and
1:  * limitations under the License.
1:  */
1: package org.apache.activemq.transport.amqp.client.transport;
1: 
1: import java.io.IOException;
1: import java.net.URI;
1: import java.security.Principal;
1: import java.util.concurrent.CountDownLatch;
1: import java.util.concurrent.TimeUnit;
1: import java.util.concurrent.atomic.AtomicBoolean;
1: 
1: import org.apache.activemq.transport.amqp.client.util.IOExceptionSupport;
1: import org.slf4j.Logger;
1: import org.slf4j.LoggerFactory;
1: 
1: import io.netty.bootstrap.Bootstrap;
1: import io.netty.buffer.ByteBuf;
1: import io.netty.channel.Channel;
1: import io.netty.channel.ChannelFuture;
1: import io.netty.channel.ChannelFutureListener;
1: import io.netty.channel.ChannelHandlerContext;
1: import io.netty.channel.ChannelInitializer;
1: import io.netty.channel.ChannelOption;
1: import io.netty.channel.EventLoopGroup;
1: import io.netty.channel.FixedRecvByteBufAllocator;
1: import io.netty.channel.SimpleChannelInboundHandler;
1: import io.netty.channel.nio.NioEventLoopGroup;
1: import io.netty.channel.socket.nio.NioSocketChannel;
1: import io.netty.handler.ssl.SslHandler;
1: import io.netty.util.concurrent.Future;
1: import io.netty.util.concurrent.GenericFutureListener;
1: 
1: /**
1:  * TCP based transport that uses Netty as the underlying IO layer.
1:  */
1: public class NettyTcpTransport implements NettyTransport {
1: 
1:     private static final Logger LOG = LoggerFactory.getLogger(NettyTcpTransport.class);
1: 
0:     private static final int QUIET_PERIOD = 20;
1:     private static final int SHUTDOWN_TIMEOUT = 100;
1: 
1:     protected Bootstrap bootstrap;
1:     protected EventLoopGroup group;
1:     protected Channel channel;
1:     protected NettyTransportListener listener;
0:     protected NettyTransportOptions options;
1:     protected final URI remote;
0:     protected boolean secure;
1: 
1:     private final AtomicBoolean connected = new AtomicBoolean();
1:     private final AtomicBoolean closed = new AtomicBoolean();
1:     private final CountDownLatch connectLatch = new CountDownLatch(1);
0:     private IOException failureCause;
0:     private Throwable pendingFailure;
1: 
1:     /**
1:      * Create a new transport instance
1:      *
1:      * @param remoteLocation
1:      *        the URI that defines the remote resource to connect to.
1:      * @param options
1:      *        the transport options used to configure the socket connection.
1:      */
1:     public NettyTcpTransport(URI remoteLocation, NettyTransportOptions options) {
1:         this(null, remoteLocation, options);
1:     }
1: 
1:     /**
1:      * Create a new transport instance
1:      *
1:      * @param listener
1:      *        the TransportListener that will receive events from this Transport.
1:      * @param remoteLocation
1:      *        the URI that defines the remote resource to connect to.
1:      * @param options
1:      *        the transport options used to configure the socket connection.
1:      */
1:     public NettyTcpTransport(NettyTransportListener listener, URI remoteLocation, NettyTransportOptions options) {
1:         this.options = options;
1:         this.listener = listener;
1:         this.remote = remoteLocation;
0:         this.secure = remoteLocation.getScheme().equalsIgnoreCase("ssl");
1:     }
1: 
1:     @Override
1:     public void connect() throws IOException {
1: 
1:         if (listener == null) {
1:             throw new IllegalStateException("A transport listener must be set before connection attempts.");
1:         }
1: 
1:         group = new NioEventLoopGroup(1);
1: 
1:         bootstrap = new Bootstrap();
1:         bootstrap.group(group);
1:         bootstrap.channel(NioSocketChannel.class);
1:         bootstrap.handler(new ChannelInitializer<Channel>() {
1: 
1:             @Override
1:             public void initChannel(Channel connectedChannel) throws Exception {
0:                 configureChannel(connectedChannel);
1:             }
1:         });
1: 
1:         configureNetty(bootstrap, getTransportOptions());
1: 
1:         ChannelFuture future = bootstrap.connect(getRemoteHost(), getRemotePort());
1:         future.addListener(new ChannelFutureListener() {
1: 
1:             @Override
1:             public void operationComplete(ChannelFuture future) throws Exception {
0:                 if (future.isSuccess()) {
0:                     handleConnected(future.channel());
0:                 } else if (future.isCancelled()) {
0:                     connectionFailed(future.channel(), new IOException("Connection attempt was cancelled"));
1:                 } else {
0:                     connectionFailed(future.channel(), IOExceptionSupport.create(future.cause()));
1:                 }
1:             }
1:         });
1: 
1:         try {
1:             connectLatch.await();
1:         } catch (InterruptedException ex) {
1:             LOG.debug("Transport connection was interrupted.");
1:             Thread.interrupted();
1:             failureCause = IOExceptionSupport.create(ex);
1:         }
1: 
1:         if (failureCause != null) {
1:             // Close out any Netty resources now as they are no longer needed.
1:             if (channel != null) {
1:                 channel.close().syncUninterruptibly();
1:                 channel = null;
1:             }
1:             if (group != null) {
0:                 group.shutdownGracefully(QUIET_PERIOD, SHUTDOWN_TIMEOUT, TimeUnit.MILLISECONDS);
1:                 group = null;
1:             }
1: 
1:             throw failureCause;
1:         } else {
1:             // Connected, allow any held async error to fire now and close the transport.
1:             channel.eventLoop().execute(new Runnable() {
1: 
1:                 @Override
1:                 public void run() {
0:                     if (pendingFailure != null) {
0:                         channel.pipeline().fireExceptionCaught(pendingFailure);
1:                     }
1:                 }
1:             });
1:         }
1:     }
1: 
1:     @Override
1:     public boolean isConnected() {
1:         return connected.get();
1:     }
1: 
1:     @Override
1:     public boolean isSSL() {
0:         return secure;
1:     }
1: 
1:     @Override
1:     public void close() throws IOException {
1:         if (closed.compareAndSet(false, true)) {
1:             connected.set(false);
1:             if (channel != null) {
1:                 channel.close().syncUninterruptibly();
1:             }
1:             if (group != null) {
0:                 group.shutdownGracefully(QUIET_PERIOD, SHUTDOWN_TIMEOUT, TimeUnit.MILLISECONDS);
1:             }
1:         }
1:     }
1: 
1:     @Override
1:     public ByteBuf allocateSendBuffer(int size) throws IOException {
1:         checkConnected();
1:         return channel.alloc().ioBuffer(size, size);
1:     }
1: 
1:     @Override
1:     public void send(ByteBuf output) throws IOException {
1:         checkConnected();
1:         int length = output.readableBytes();
1:         if (length == 0) {
1:             return;
1:         }
1: 
1:         LOG.trace("Attempted write of: {} bytes", length);
1: 
1:         channel.writeAndFlush(output);
1:     }
1: 
1:     @Override
1:     public NettyTransportListener getTransportListener() {
1:         return listener;
1:     }
1: 
1:     @Override
1:     public void setTransportListener(NettyTransportListener listener) {
1:         this.listener = listener;
1:     }
1: 
1:     @Override
1:     public NettyTransportOptions getTransportOptions() {
0:         if (options == null) {
1:             if (isSSL()) {
0:                 options = NettyTransportSslOptions.INSTANCE;
1:             } else {
0:                 options = NettyTransportOptions.INSTANCE;
1:             }
1:         }
1: 
1:         return options;
1:     }
1: 
1:     @Override
1:     public URI getRemoteLocation() {
1:         return remote;
1:     }
1: 
1:     @Override
1:     public Principal getLocalPrincipal() {
0:         if (!isSSL()) {
0:             throw new UnsupportedOperationException("Not connected to a secure channel");
1:         }
1: 
0:         SslHandler sslHandler = channel.pipeline().get(SslHandler.class);
1: 
0:         return sslHandler.engine().getSession().getLocalPrincipal();
1:     }
1: 
0:     //----- Internal implementation details, can be overridden as needed --//
1: 
1:     protected String getRemoteHost() {
1:         return remote.getHost();
1:     }
1: 
1:     protected int getRemotePort() {
0:         int port = remote.getPort();
1: 
0:         if (port <= 0) {
1:             if (isSSL()) {
0:                 port = getSslOptions().getDefaultSslPort();
1:             } else {
0:                 port = getTransportOptions().getDefaultTcpPort();
1:             }
1:         }
1: 
0:         return port;
1:     }
1: 
0:     protected void configureNetty(Bootstrap bootstrap, NettyTransportOptions options) {
1:         bootstrap.option(ChannelOption.TCP_NODELAY, options.isTcpNoDelay());
1:         bootstrap.option(ChannelOption.CONNECT_TIMEOUT_MILLIS, options.getConnectTimeout());
1:         bootstrap.option(ChannelOption.SO_KEEPALIVE, options.isTcpKeepAlive());
1:         bootstrap.option(ChannelOption.SO_LINGER, options.getSoLinger());
1:         bootstrap.option(ChannelOption.ALLOCATOR, PartialPooledByteBufAllocator.INSTANCE);
1: 
1:         if (options.getSendBufferSize() != -1) {
1:             bootstrap.option(ChannelOption.SO_SNDBUF, options.getSendBufferSize());
1:         }
1: 
1:         if (options.getReceiveBufferSize() != -1) {
1:             bootstrap.option(ChannelOption.SO_RCVBUF, options.getReceiveBufferSize());
1:             bootstrap.option(ChannelOption.RCVBUF_ALLOCATOR, new FixedRecvByteBufAllocator(options.getReceiveBufferSize()));
1:         }
1: 
1:         if (options.getTrafficClass() != -1) {
1:             bootstrap.option(ChannelOption.IP_TOS, options.getTrafficClass());
1:         }
1:     }
1: 
0:     protected void configureChannel(final Channel channel) throws Exception {
1:         if (isSSL()) {
0:             SslHandler sslHandler = NettyTransportSupport.createSslHandler(getRemoteLocation(), getSslOptions());
0:             sslHandler.handshakeFuture().addListener(new GenericFutureListener<Future<Channel>>() {
1:                 @Override
0:                 public void operationComplete(Future<Channel> future) throws Exception {
0:                     if (future.isSuccess()) {
0:                         LOG.trace("SSL Handshake has completed: {}", channel);
0:                         connectionEstablished(channel);
1:                     } else {
0:                         LOG.trace("SSL Handshake has failed: {}", channel);
0:                         connectionFailed(channel, IOExceptionSupport.create(future.cause()));
1:                     }
1:                 }
1:             });
1: 
1:             channel.pipeline().addLast(sslHandler);
1:         }
1: 
0:         channel.pipeline().addLast(new NettyTcpTransportHandler());
1:     }
1: 
0:     protected void handleConnected(final Channel channel) throws Exception {
0:         if (!isSSL()) {
0:             connectionEstablished(channel);
1:         }
1:     }
1: 
0:     //----- State change handlers and checks ---------------------------------//
1: 
1:     /**
0:      * Called when the transport has successfully connected and is ready for use.
1:      */
0:     protected void connectionEstablished(Channel connectedChannel) {
0:         channel = connectedChannel;
0:         connected.set(true);
0:         connectLatch.countDown();
1:     }
1: 
1:     /**
0:      * Called when the transport connection failed and an error should be returned.
1:      *
0:      * @param failedChannel
0:      *      The Channel instance that failed.
0:      * @param cause
0:      *      An IOException that describes the cause of the failed connection.
1:      */
0:     protected void connectionFailed(Channel failedChannel, IOException cause) {
0:         failureCause = IOExceptionSupport.create(cause);
0:         channel = failedChannel;
1:         connected.set(false);
0:         connectLatch.countDown();
1:     }
1: 
0:     private NettyTransportSslOptions getSslOptions() {
0:         return (NettyTransportSslOptions) getTransportOptions();
1:     }
1: 
0:     private void checkConnected() throws IOException {
0:         if (!connected.get()) {
0:             throw new IOException("Cannot send to a non-connected transport.");
1:         }
1:     }
1: 
1:     //----- Handle connection events -----------------------------------------//
1: 
0:     private class NettyTcpTransportHandler extends SimpleChannelInboundHandler<ByteBuf> {
1: 
1:         @Override
1:         public void channelActive(ChannelHandlerContext context) throws Exception {
0:             LOG.trace("Channel has become active! Channel is {}", context.channel());
1:         }
1: 
1:         @Override
1:         public void channelInactive(ChannelHandlerContext context) throws Exception {
0:             LOG.trace("Channel has gone inactive! Channel is {}", context.channel());
0:             if (connected.compareAndSet(true, false) && !closed.get()) {
0:                 LOG.trace("Firing onTransportClosed listener");
0:                 listener.onTransportClosed();
1:             }
1:         }
1: 
1:         @Override
1:         public void exceptionCaught(ChannelHandlerContext context, Throwable cause) throws Exception {
0:             LOG.trace("Exception on channel! Channel is {}", context.channel());
0:             if (connected.compareAndSet(true, false) && !closed.get()) {
0:                 LOG.trace("Firing onTransportError listener");
0:                 if (pendingFailure != null) {
0:                     listener.onTransportError(pendingFailure);
1:                 } else {
0:                     listener.onTransportError(cause);
1:                 }
1:             } else {
0:                 // Hold the first failure for later dispatch if connect succeeds.
0:                 // This will then trigger disconnect using the first error reported.
0:                 if (pendingFailure != null) {
0:                     LOG.trace("Holding error until connect succeeds: {}", cause.getMessage());
0:                     pendingFailure = cause;
1:                 }
1:             }
1:         }
1: 
1:         @Override
1:         protected void channelRead0(ChannelHandlerContext ctx, ByteBuf buffer) throws Exception {
1:             LOG.trace("New data read: {} bytes incoming: {}", buffer.readableBytes(), buffer);
1:             listener.onData(buffer);
1:         }
1:     }
1: }
============================================================================