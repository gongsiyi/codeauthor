1:a0af351: /**
1:a0af351:  * Licensed to the Apache Software Foundation (ASF) under one or more
1:a0af351:  * contributor license agreements.  See the NOTICE file distributed with
1:a0af351:  * this work for additional information regarding copyright ownership.
1:a0af351:  * The ASF licenses this file to You under the Apache License, Version 2.0
1:a0af351:  * (the "License"); you may not use this file except in compliance with
1:a0af351:  * the License.  You may obtain a copy of the License at
1:a0af351:  *
1:a0af351:  *      http://www.apache.org/licenses/LICENSE-2.0
1:a0af351:  *
1:a0af351:  * Unless required by applicable law or agreed to in writing, software
1:a0af351:  * distributed under the License is distributed on an "AS IS" BASIS,
1:a0af351:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:a0af351:  * See the License for the specific language governing permissions and
1:a0af351:  * limitations under the License.
1:a0af351:  */
1:a0af351: package org.apache.activemq.transport.discovery.http;
14:a0af351: 
1:a0af351: import java.io.IOException;
1:a0af351: import java.io.PrintWriter;
1:a0af351: import java.util.ArrayList;
1:a0af351: import java.util.Map;
1:a0af351: import java.util.concurrent.ConcurrentHashMap;
1:9ef4259: import java.util.concurrent.ConcurrentMap;
1:9ef4259: 
1:a0af351: import javax.servlet.ServletException;
1:a0af351: import javax.servlet.http.HttpServlet;
1:a0af351: import javax.servlet.http.HttpServletRequest;
1:a0af351: import javax.servlet.http.HttpServletResponse;
1:a0af351: 
1:8bf987b: import org.slf4j.Logger;
1:8bf987b: import org.slf4j.LoggerFactory;
1:a0af351: 
1:a0af351: public class DiscoveryRegistryServlet extends HttpServlet {
1:ffa396c:     private static final long serialVersionUID = 1L;
1:9ef4259: 
1:8bf987b:     private static final Logger LOG = LoggerFactory.getLogger(HTTPDiscoveryAgent.class);
1:a0af351:     long maxKeepAge = 1000*60*60; // 1 hour.
1:9ef4259:     ConcurrentMap<String, ConcurrentMap<String, Long>> serviceGroups = new ConcurrentHashMap<String, ConcurrentMap<String, Long>>();
1:9ef4259: 
1:a0af351:     @Override
1:a0af351:     protected void doPut(HttpServletRequest req, HttpServletResponse resp) throws ServletException, IOException {
1:a0af351:         String group = req.getPathInfo();
1:a0af351:         String service = req.getHeader("service");
1:a0af351:         LOG.debug("Registering: group="+group+", service="+service);
1:9ef4259: 
1:9ef4259:         ConcurrentMap<String, Long> services = getServiceGroup(group);
1:a0af351:         services.put(service, System.currentTimeMillis());
1:a0af351:     }
1:a0af351: 
1:9ef4259:     private ConcurrentMap<String, Long> getServiceGroup(String group) {
1:9ef4259:         ConcurrentMap<String, Long> rc = serviceGroups.get(group);
1:a0af351:         if( rc == null ) {
1:a0af351:             rc = new ConcurrentHashMap<String, Long>();
1:a0af351:             serviceGroups.put(group, rc);
1:a0af351:         }
1:a0af351:         return rc;
1:a0af351:     }
1:a0af351: 
1:a0af351:     @Override
1:a0af351:     protected void doGet(HttpServletRequest req, HttpServletResponse resp) throws ServletException, IOException {
1:a0af351:         try {
1:a0af351:             long freshness = 1000*30;
1:a0af351:             String p = req.getParameter("freshness");
1:a0af351:             if( p!=null ) {
1:a0af351:                 freshness = Long.parseLong(p);
1:a0af351:             }
1:9ef4259: 
1:a0af351:             String group = req.getPathInfo();
1:a0af351:             LOG.debug("group="+group);
1:9ef4259:             ConcurrentMap<String, Long> services = getServiceGroup(group);
1:a0af351:             PrintWriter writer = resp.getWriter();
1:9ef4259: 
1:a0af351:             long now = System.currentTimeMillis();
1:9ef4259:             long dropTime = now-maxKeepAge;
1:a0af351:             long minimumTime = now-freshness;
1:9ef4259: 
1:a0af351:             ArrayList<String> dropList = new ArrayList<String>();
1:a0af351:             for (Map.Entry<String, Long> entry : services.entrySet()) {
1:a0af351:                 if( entry.getValue() > minimumTime ) {
1:a0af351:                     writer.println(entry.getKey());
1:a0af351:                 } else if( entry.getValue() < dropTime ) {
1:a0af351:                     dropList.add(entry.getKey());
1:a0af351:                 }
1:a0af351:             }
1:9ef4259: 
1:a0af351:             // We might as well get rid of the really old entries.
1:a0af351:             for (String service : dropList) {
1:a0af351:                 services.remove(service);
1:a0af351:             }
1:9ef4259: 
1:9ef4259: 
1:a0af351:         } catch (Exception e) {
1:a0af351:             resp.sendError(HttpServletResponse.SC_INTERNAL_SERVER_ERROR, "Error occured: "+e);
1:a0af351:         }
1:a0af351:     }
1:9ef4259: 
1:a0af351:     @Override
1:a0af351:     protected void doDelete(HttpServletRequest req, HttpServletResponse resp) throws ServletException, IOException {
1:a0af351:         String group = req.getPathInfo();
1:a0af351:         String service = req.getHeader("service");
1:a0af351:         LOG.debug("Unregistering: group="+group+", service="+service);
1:9ef4259: 
1:9ef4259:         ConcurrentMap<String, Long> services = getServiceGroup(group);
1:a0af351:         services.remove(service);
1:a0af351:     }
1:9ef4259: 
1:a0af351: }
============================================================================
author:Timothy Bish
-------------------------------------------------------------------------------
commit:9ef4259
/////////////////////////////////////////////////////////////////////////
1: import java.util.concurrent.ConcurrentMap;
1: 
/////////////////////////////////////////////////////////////////////////
1: 
1:     ConcurrentMap<String, ConcurrentMap<String, Long>> serviceGroups = new ConcurrentHashMap<String, ConcurrentMap<String, Long>>();
1: 
1: 
1:         ConcurrentMap<String, Long> services = getServiceGroup(group);
1:     private ConcurrentMap<String, Long> getServiceGroup(String group) {
1:         ConcurrentMap<String, Long> rc = serviceGroups.get(group);
/////////////////////////////////////////////////////////////////////////
1: 
1:             ConcurrentMap<String, Long> services = getServiceGroup(group);
1: 
1:             long dropTime = now-maxKeepAge;
1: 
/////////////////////////////////////////////////////////////////////////
1: 
1: 
1: 
1: 
1: 
1:         ConcurrentMap<String, Long> services = getServiceGroup(group);
1: 
author:Daniel Kulp
-------------------------------------------------------------------------------
commit:ffa396c
/////////////////////////////////////////////////////////////////////////
1:     private static final long serialVersionUID = 1L;
author:Hiram R. Chirino
-------------------------------------------------------------------------------
commit:9a1ad8c
commit:a0af351
/////////////////////////////////////////////////////////////////////////
1: /**
1:  * Licensed to the Apache Software Foundation (ASF) under one or more
1:  * contributor license agreements.  See the NOTICE file distributed with
1:  * this work for additional information regarding copyright ownership.
1:  * The ASF licenses this file to You under the Apache License, Version 2.0
1:  * (the "License"); you may not use this file except in compliance with
1:  * the License.  You may obtain a copy of the License at
1:  *
1:  *      http://www.apache.org/licenses/LICENSE-2.0
1:  *
1:  * Unless required by applicable law or agreed to in writing, software
1:  * distributed under the License is distributed on an "AS IS" BASIS,
1:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:  * See the License for the specific language governing permissions and
1:  * limitations under the License.
1:  */
1: package org.apache.activemq.transport.discovery.http;
1: 
1: import java.io.IOException;
1: import java.io.PrintWriter;
1: import java.util.ArrayList;
1: import java.util.Map;
1: import java.util.concurrent.ConcurrentHashMap;
1: 
1: import javax.servlet.ServletException;
1: import javax.servlet.http.HttpServlet;
1: import javax.servlet.http.HttpServletRequest;
1: import javax.servlet.http.HttpServletResponse;
1: 
0: import org.apache.commons.logging.Log;
0: import org.apache.commons.logging.LogFactory;
1: 
1: public class DiscoveryRegistryServlet extends HttpServlet {
1:     
0:     private static final Log LOG = LogFactory.getLog(HTTPDiscoveryAgent.class);
1:     long maxKeepAge = 1000*60*60; // 1 hour.
0:     ConcurrentHashMap<String, ConcurrentHashMap<String, Long>> serviceGroups = new ConcurrentHashMap<String, ConcurrentHashMap<String, Long>>();
1:     
1:     @Override
1:     protected void doPut(HttpServletRequest req, HttpServletResponse resp) throws ServletException, IOException {
1:         String group = req.getPathInfo();
1:         String service = req.getHeader("service");
1:         LOG.debug("Registering: group="+group+", service="+service);
1:         
0:         ConcurrentHashMap<String, Long> services = getServiceGroup(group);
1:         services.put(service, System.currentTimeMillis());
1:     }
1: 
0:     private ConcurrentHashMap<String, Long> getServiceGroup(String group) {
0:         ConcurrentHashMap<String, Long> rc = serviceGroups.get(group);
1:         if( rc == null ) {
1:             rc = new ConcurrentHashMap<String, Long>();
1:             serviceGroups.put(group, rc);
1:         }
1:         return rc;
1:     }
1: 
1:     @Override
1:     protected void doGet(HttpServletRequest req, HttpServletResponse resp) throws ServletException, IOException {
1:         try {
1:             long freshness = 1000*30;
1:             String p = req.getParameter("freshness");
1:             if( p!=null ) {
1:                 freshness = Long.parseLong(p);
1:             }
1:             
1:             String group = req.getPathInfo();
1:             LOG.debug("group="+group);
0:             ConcurrentHashMap<String, Long> services = getServiceGroup(group);
1:             PrintWriter writer = resp.getWriter();
1:             
1:             long now = System.currentTimeMillis();
0:             long dropTime = now-maxKeepAge;             
1:             long minimumTime = now-freshness;
1:             
1:             ArrayList<String> dropList = new ArrayList<String>();
1:             for (Map.Entry<String, Long> entry : services.entrySet()) {
1:                 if( entry.getValue() > minimumTime ) {
1:                     writer.println(entry.getKey());
1:                 } else if( entry.getValue() < dropTime ) {
1:                     dropList.add(entry.getKey());
1:                 }
1:             }
1:             
1:             // We might as well get rid of the really old entries.
1:             for (String service : dropList) {
1:                 services.remove(service);
1:             }
1:             
1:             
1:         } catch (Exception e) {
1:             resp.sendError(HttpServletResponse.SC_INTERNAL_SERVER_ERROR, "Error occured: "+e);
1:         }
1:     }
1:     
1:     @Override
1:     protected void doDelete(HttpServletRequest req, HttpServletResponse resp) throws ServletException, IOException {
1:         String group = req.getPathInfo();
1:         String service = req.getHeader("service");
1:         LOG.debug("Unregistering: group="+group+", service="+service);
1:         
0:         ConcurrentHashMap<String, Long> services = getServiceGroup(group);
1:         services.remove(service);
1:     }
1:         
1: }
author:Claus Ibsen
-------------------------------------------------------------------------------
commit:3b4aadc
/////////////////////////////////////////////////////////////////////////
author:Bosanac Dejan
-------------------------------------------------------------------------------
commit:8bf987b
/////////////////////////////////////////////////////////////////////////
1: import org.slf4j.Logger;
1: import org.slf4j.LoggerFactory;
1:     private static final Logger LOG = LoggerFactory.getLogger(HTTPDiscoveryAgent.class);
============================================================================