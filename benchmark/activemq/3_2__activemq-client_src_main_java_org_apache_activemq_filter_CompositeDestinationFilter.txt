1:d29ca2a: /**
1:57b4941:  * Licensed to the Apache Software Foundation (ASF) under one or more
1:57b4941:  * contributor license agreements.  See the NOTICE file distributed with
1:57b4941:  * this work for additional information regarding copyright ownership.
1:57b4941:  * The ASF licenses this file to You under the Apache License, Version 2.0
1:57b4941:  * (the "License"); you may not use this file except in compliance with
1:57b4941:  * the License.  You may obtain a copy of the License at
4:d29ca2a:  *
1:230a86c:  *      http://www.apache.org/licenses/LICENSE-2.0
1:d29ca2a:  *
1:d29ca2a:  * Unless required by applicable law or agreed to in writing, software
1:d29ca2a:  * distributed under the License is distributed on an "AS IS" BASIS,
1:d29ca2a:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:d29ca2a:  * See the License for the specific language governing permissions and
1:d29ca2a:  * limitations under the License.
1:d29ca2a:  */
1:d29ca2a: package org.apache.activemq.filter;
2:d29ca2a: 
1:d29ca2a: import org.apache.activemq.command.ActiveMQDestination;
1:d29ca2a: 
1:d29ca2a: /**
1:d29ca2a:  * A {@link DestinationFilter} used for composite destinations
1:b0c2a40:  * 
1:74a7a8b:  * 
1:d29ca2a:  */
1:d29ca2a: public class CompositeDestinationFilter extends DestinationFilter {
1:74a7a8b: 
1:d29ca2a:     private DestinationFilter filters[];
1:d29ca2a: 
1:d29ca2a:     public CompositeDestinationFilter(ActiveMQDestination destination) {
1:d29ca2a:         ActiveMQDestination[] destinations = destination.getCompositeDestinations();
1:d29ca2a:         filters = new DestinationFilter[destinations.length];
1:d29ca2a:         for (int i = 0; i < destinations.length; i++) {
1:d29ca2a:             ActiveMQDestination childDestination = destinations[i];
1:74a7a8b:             filters[i] = DestinationFilter.parseFilter(childDestination);
1:d29ca2a:         }
1:d29ca2a:     }
1:d29ca2a: 
1:d29ca2a:     public boolean matches(ActiveMQDestination destination) {
1:d29ca2a:         for (int i = 0; i < filters.length; i++) {
1:d29ca2a:             if (filters[i].matches(destination)) {
2:d29ca2a:                 return true;
1:d29ca2a:             }
1:d29ca2a:         }
1:d29ca2a:         return false;
1:d29ca2a:     }
1:d29ca2a: 
1:d29ca2a:     public boolean isWildcard() {
1:94b404d:         for (DestinationFilter filter : filters) {
1:94b404d:             if (filter.isWildcard()) {
1:94b404d:                 return true;
1:94b404d:             }
1:94b404d:         }
1:94b404d:         return false;
1:d29ca2a:     }
1:94b404d: 
1:d29ca2a: }
============================================================================
author:Hadrian Zbarcea
-------------------------------------------------------------------------------
commit:d54d046
author:Dhiraj Bokde
-------------------------------------------------------------------------------
commit:94b404d
/////////////////////////////////////////////////////////////////////////
1:         for (DestinationFilter filter : filters) {
1:             if (filter.isWildcard()) {
1:                 return true;
1:             }
1:         }
1:         return false;
1: 
author:Hiram R. Chirino
-------------------------------------------------------------------------------
commit:9a8f6e4
commit:b0c2a40
/////////////////////////////////////////////////////////////////////////
1:  * 
commit:74a7a8b
/////////////////////////////////////////////////////////////////////////
1:  * 
1: 
/////////////////////////////////////////////////////////////////////////
1:             filters[i] = DestinationFilter.parseFilter(childDestination);
commit:230a86c
/////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////
1:  *      http://www.apache.org/licenses/LICENSE-2.0
commit:57b4941
/////////////////////////////////////////////////////////////////////////
1:  * Licensed to the Apache Software Foundation (ASF) under one or more
1:  * contributor license agreements.  See the NOTICE file distributed with
1:  * this work for additional information regarding copyright ownership.
1:  * The ASF licenses this file to You under the Apache License, Version 2.0
1:  * (the "License"); you may not use this file except in compliance with
1:  * the License.  You may obtain a copy of the License at
commit:48b4869
/////////////////////////////////////////////////////////////////////////
0:  * Copyright 2005-2006 The Apache Software Foundation
commit:d29ca2a
/////////////////////////////////////////////////////////////////////////
1: /**
1:  *
0:  * Copyright 2004 The Apache Software Foundation
1:  *
0:  * Licensed under the Apache License, Version 2.0 (the "License");
0:  * you may not use this file except in compliance with the License.
0:  * You may obtain a copy of the License at
1:  *
0:  * http://www.apache.org/licenses/LICENSE-2.0
1:  *
1:  * Unless required by applicable law or agreed to in writing, software
1:  * distributed under the License is distributed on an "AS IS" BASIS,
1:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:  * See the License for the specific language governing permissions and
1:  * limitations under the License.
1:  */
1: package org.apache.activemq.filter;
1: 
1: import org.apache.activemq.command.ActiveMQDestination;
1: 
1: /**
1:  * A {@link DestinationFilter} used for composite destinations
1:  *
0:  * @version $Revision: 1.3 $
1:  */
1: public class CompositeDestinationFilter extends DestinationFilter {
1:     
1:     private DestinationFilter filters[];
1: 
1:     public CompositeDestinationFilter(ActiveMQDestination destination) {
1:         ActiveMQDestination[] destinations = destination.getCompositeDestinations();
1:         filters = new DestinationFilter[destinations.length];
1:         for (int i = 0; i < destinations.length; i++) {
1:             ActiveMQDestination childDestination = destinations[i];
0:             filters[i]= DestinationFilter.parseFilter(childDestination);
1:         }
1:     }
1: 
1:     public boolean matches(ActiveMQDestination destination) {
1:         for (int i = 0; i < filters.length; i++) {
1:             if (filters[i].matches(destination)) {
1:                 return true;
1:             }
1:         }
1:         return false;
1:     }
1: 
1:     public boolean isWildcard() {
1:         return true;
1:     }
1: }
============================================================================