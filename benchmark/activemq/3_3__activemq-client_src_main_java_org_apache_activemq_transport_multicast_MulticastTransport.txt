1:8704338: /**
1:57b4941:  * Licensed to the Apache Software Foundation (ASF) under one or more
1:57b4941:  * contributor license agreements.  See the NOTICE file distributed with
1:57b4941:  * this work for additional information regarding copyright ownership.
1:57b4941:  * The ASF licenses this file to You under the Apache License, Version 2.0
1:57b4941:  * (the "License"); you may not use this file except in compliance with
1:57b4941:  * the License.  You may obtain a copy of the License at
3:8704338:  *
1:230a86c:  *      http://www.apache.org/licenses/LICENSE-2.0
1:8704338:  *
1:8704338:  * Unless required by applicable law or agreed to in writing, software
1:8704338:  * distributed under the License is distributed on an "AS IS" BASIS,
1:8704338:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:8704338:  * See the License for the specific language governing permissions and
1:8704338:  * limitations under the License.
1:8704338:  */
1:8704338: package org.apache.activemq.transport.multicast;
3:8704338: 
1:8704338: import java.io.IOException;
1:5739c6c: import java.net.DatagramSocket;
1:5739c6c: import java.net.InetAddress;
1:5739c6c: import java.net.InetSocketAddress;
1:5739c6c: import java.net.MulticastSocket;
1:8704338: import java.net.SocketAddress;
1:5739c6c: import java.net.SocketException;
1:8704338: import java.net.URI;
1:8704338: import java.net.UnknownHostException;
1:8704338: 
1:74a7a8b: import org.apache.activemq.openwire.OpenWireFormat;
1:74a7a8b: import org.apache.activemq.transport.udp.CommandChannel;
1:74a7a8b: import org.apache.activemq.transport.udp.CommandDatagramSocket;
1:74a7a8b: import org.apache.activemq.transport.udp.DatagramHeaderMarshaller;
1:74a7a8b: import org.apache.activemq.transport.udp.UdpTransport;
1:74a7a8b: import org.apache.activemq.util.ServiceStopper;
1:8bf987b: import org.slf4j.Logger;
1:8bf987b: import org.slf4j.LoggerFactory;
1:74a7a8b: 
1:8704338: /**
1:8704338:  * A multicast based transport.
1:0bbc0ac:  * 
1:8704338:  * 
1:8704338:  */
1:8704338: public class MulticastTransport extends UdpTransport {
1:8704338: 
1:8bf987b:     private static final Logger LOG = LoggerFactory.getLogger(MulticastTransport.class);
1:8704338: 
1:5739c6c:     private static final int DEFAULT_IDLE_TIME = 5000;
1:5739c6c: 
1:5739c6c:     private MulticastSocket socket;
1:5739c6c:     private InetAddress mcastAddress;
1:5739c6c:     private int mcastPort;
1:5739c6c:     private int timeToLive = 1;
1:933eb2f:     private boolean loopBackMode;
1:5739c6c:     private long keepAliveInterval = DEFAULT_IDLE_TIME;
1:8704338: 
1:8704338:     public MulticastTransport(OpenWireFormat wireFormat, URI remoteLocation) throws UnknownHostException, IOException {
1:8704338:         super(wireFormat, remoteLocation);
5:8704338:     }
1:8704338: 
1:0ae30b3:     public long getKeepAliveInterval() {
1:0ae30b3:         return keepAliveInterval;
1:0ae30b3:     }
1:0ae30b3: 
1:0ae30b3:     public void setKeepAliveInterval(long keepAliveInterval) {
1:0ae30b3:         this.keepAliveInterval = keepAliveInterval;
1:0ae30b3:     }
1:0ae30b3: 
1:0ae30b3:     public boolean isLoopBackMode() {
1:0ae30b3:         return loopBackMode;
1:0ae30b3:     }
1:0ae30b3: 
1:0ae30b3:     public void setLoopBackMode(boolean loopBackMode) {
1:0ae30b3:         this.loopBackMode = loopBackMode;
1:0ae30b3:     }
1:0ae30b3: 
1:0ae30b3:     public int getTimeToLive() {
1:0ae30b3:         return timeToLive;
1:0ae30b3:     }
1:0ae30b3: 
1:0ae30b3:     public void setTimeToLive(int timeToLive) {
1:0ae30b3:         this.timeToLive = timeToLive;
1:0ae30b3:     }
1:0ae30b3: 
1:8704338:     protected String getProtocolName() {
1:8704338:         return "Multicast";
1:8704338:     }
1:8704338: 
1:8704338:     protected String getProtocolUriScheme() {
1:8704338:         return "multicast://";
1:5739c6c:     }
1:5739c6c: 
1:5739c6c:     protected void bind(DatagramSocket socket, SocketAddress localAddress) throws SocketException {
1:5739c6c:     }
1:5739c6c: 
1:5739c6c:     protected void doStop(ServiceStopper stopper) throws Exception {
1:5739c6c:         super.doStop(stopper);
1:5739c6c:         if (socket != null) {
1:5739c6c:             try {
1:8d589ec:                 socket.leaveGroup(getMulticastAddress());
1:74a7a8b:             } catch (IOException e) {
1:5739c6c:                 stopper.onException(this, e);
1:5739c6c:             }
1:5739c6c:             socket.close();
1:5739c6c:         }
1:5739c6c:     }
1:5739c6c: 
1:5739c6c:     protected CommandChannel createCommandChannel() throws IOException {
1:5739c6c:         socket = new MulticastSocket(mcastPort);
1:5739c6c:         socket.setLoopbackMode(loopBackMode);
1:5739c6c:         socket.setTimeToLive(timeToLive);
1:5739c6c: 
1:fc00993:         LOG.debug("Joining multicast address: " + getMulticastAddress());
1:8d589ec:         socket.joinGroup(getMulticastAddress());
1:74a7a8b:         socket.setSoTimeout((int)keepAliveInterval);
1:8d589ec: 
1:74a7a8b:         return new CommandDatagramSocket(this, getWireFormat(), getDatagramSize(), getTargetAddress(), createDatagramHeaderMarshaller(), getSocket());
1:8d589ec:     }
1:5739c6c: 
1:8d589ec:     protected InetAddress getMulticastAddress() {
1:8d589ec:         return mcastAddress;
1:5739c6c:     }
1:5739c6c: 
1:f3ef1a9:     protected MulticastSocket getSocket() {
1:f3ef1a9:         return socket;
1:f3ef1a9:     }
1:f3ef1a9: 
1:f3ef1a9:     protected void setSocket(MulticastSocket socket) {
1:f3ef1a9:         this.socket = socket;
1:f3ef1a9:     }
1:f3ef1a9: 
1:5739c6c:     protected InetSocketAddress createAddress(URI remoteLocation) throws UnknownHostException, IOException {
1:5739c6c:         this.mcastAddress = InetAddress.getByName(remoteLocation.getHost());
1:5739c6c:         this.mcastPort = remoteLocation.getPort();
1:5739c6c:         return new InetSocketAddress(mcastAddress, mcastPort);
1:5739c6c:     }
1:5739c6c: 
1:5739c6c:     protected DatagramHeaderMarshaller createDatagramHeaderMarshaller() {
1:5739c6c:         return new MulticastDatagramHeaderMarshaller("udp://dummyHostName:" + getPort());
1:5739c6c:     }
1:5739c6c: 
1:8704338: }
============================================================================
author:Hiram R. Chirino
-------------------------------------------------------------------------------
commit:9a8f6e4
commit:0bbc0ac
/////////////////////////////////////////////////////////////////////////
1:  * 
commit:933eb2f
/////////////////////////////////////////////////////////////////////////
1:     private boolean loopBackMode;
commit:fc00993
/////////////////////////////////////////////////////////////////////////
0:     private static final Log LOG = LogFactory.getLog(MulticastTransport.class);
/////////////////////////////////////////////////////////////////////////
1:         LOG.debug("Joining multicast address: " + getMulticastAddress());
commit:74a7a8b
/////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////
1: import org.apache.activemq.openwire.OpenWireFormat;
1: import org.apache.activemq.transport.udp.CommandChannel;
1: import org.apache.activemq.transport.udp.CommandDatagramSocket;
1: import org.apache.activemq.transport.udp.DatagramHeaderMarshaller;
1: import org.apache.activemq.transport.udp.UdpTransport;
1: import org.apache.activemq.util.ServiceStopper;
0: import org.apache.commons.logging.Log;
0: import org.apache.commons.logging.LogFactory;
1: 
/////////////////////////////////////////////////////////////////////////
1:             } catch (IOException e) {
/////////////////////////////////////////////////////////////////////////
1:         socket.setSoTimeout((int)keepAliveInterval);
1:         return new CommandDatagramSocket(this, getWireFormat(), getDatagramSize(), getTargetAddress(), createDatagramHeaderMarshaller(), getSocket());
commit:230a86c
/////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////
1:  *      http://www.apache.org/licenses/LICENSE-2.0
commit:57b4941
/////////////////////////////////////////////////////////////////////////
1:  * Licensed to the Apache Software Foundation (ASF) under one or more
1:  * contributor license agreements.  See the NOTICE file distributed with
1:  * this work for additional information regarding copyright ownership.
1:  * The ASF licenses this file to You under the Apache License, Version 2.0
1:  * (the "License"); you may not use this file except in compliance with
1:  * the License.  You may obtain a copy of the License at
author:Bosanac Dejan
-------------------------------------------------------------------------------
commit:8bf987b
/////////////////////////////////////////////////////////////////////////
1: import org.slf4j.Logger;
1: import org.slf4j.LoggerFactory;
/////////////////////////////////////////////////////////////////////////
1:     private static final Logger LOG = LoggerFactory.getLogger(MulticastTransport.class);
author:James Strachan
-------------------------------------------------------------------------------
commit:f3ef1a9
/////////////////////////////////////////////////////////////////////////
0:         return new CommandDatagramSocket(this, getWireFormat(), getDatagramSize(), getTargetAddress(),
0:                 createDatagramHeaderMarshaller(), getSocket());
1:     protected MulticastSocket getSocket() {
1:         return socket;
1:     }
1: 
1:     protected void setSocket(MulticastSocket socket) {
1:         this.socket = socket;
1:     }
1: 
commit:0ae30b3
/////////////////////////////////////////////////////////////////////////
1:     public long getKeepAliveInterval() {
1:         return keepAliveInterval;
1:     }
1: 
1:     public void setKeepAliveInterval(long keepAliveInterval) {
1:         this.keepAliveInterval = keepAliveInterval;
1:     }
1: 
1:     public boolean isLoopBackMode() {
1:         return loopBackMode;
1:     }
1: 
1:     public void setLoopBackMode(boolean loopBackMode) {
1:         this.loopBackMode = loopBackMode;
1:     }
1: 
1:     public int getTimeToLive() {
1:         return timeToLive;
1:     }
1: 
1:     public void setTimeToLive(int timeToLive) {
1:         this.timeToLive = timeToLive;
1:     }
1: 
commit:8d589ec
/////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////
1:                 socket.leaveGroup(getMulticastAddress());
/////////////////////////////////////////////////////////////////////////
0:         log.debug("Joining multicast address: " + getMulticastAddress());
1:         socket.joinGroup(getMulticastAddress());
0:         return new CommandDatagramSocket( this, getWireFormat(), getDatagramSize(), getTargetAddress(), createDatagramHeaderMarshaller(), socket);
1:     }
1: 
1:     protected InetAddress getMulticastAddress() {
1:         return mcastAddress;
commit:72b382d
/////////////////////////////////////////////////////////////////////////
0:         return new CommandDatagramSocket(this, socket, getWireFormat(), getDatagramSize(), mcastAddress, mcastPort, createDatagramHeaderMarshaller());
commit:5739c6c
/////////////////////////////////////////////////////////////////////////
0: import org.apache.activemq.transport.udp.CommandChannel;
0: import org.apache.activemq.transport.udp.CommandDatagramChannel;
0: import org.apache.activemq.transport.udp.CommandDatagramSocket;
0: import org.apache.activemq.transport.udp.DatagramHeaderMarshaller;
0: import org.apache.activemq.transport.udp.DefaultBufferPool;
0: import org.apache.activemq.util.ServiceStopper;
0: import org.apache.commons.logging.Log;
0: import org.apache.commons.logging.LogFactory;
1: import java.net.DatagramSocket;
1: import java.net.InetAddress;
1: import java.net.InetSocketAddress;
1: import java.net.MulticastSocket;
1: import java.net.SocketException;
0: import java.nio.channels.DatagramChannel;
/////////////////////////////////////////////////////////////////////////
0:     private static final Log log = LogFactory.getLog(MulticastTransport.class);
1:     private static final int DEFAULT_IDLE_TIME = 5000;
1: 
1:     private MulticastSocket socket;
1:     private InetAddress mcastAddress;
1:     private int mcastPort;
1:     private int timeToLive = 1;
0:     private boolean loopBackMode = false;
1:     private long keepAliveInterval = DEFAULT_IDLE_TIME;
/////////////////////////////////////////////////////////////////////////
1: 
1:     protected void bind(DatagramSocket socket, SocketAddress localAddress) throws SocketException {
1:     }
1: 
1:     protected void doStop(ServiceStopper stopper) throws Exception {
1:         super.doStop(stopper);
1:         if (socket != null) {
1:             try {
0:                 socket.leaveGroup(mcastAddress);
1:             }
0:             catch (IOException e) {
1:                 stopper.onException(this, e);
1:             }
1:             socket.close();
1:         }
1:     }
1: 
1:     protected CommandChannel createCommandChannel() throws IOException {
1:         socket = new MulticastSocket(mcastPort);
1:         socket.setLoopbackMode(loopBackMode);
1:         socket.setTimeToLive(timeToLive);
1: 
0:         log.debug("Joining multicast address: " + mcastAddress);
0:         socket.joinGroup(mcastAddress);
0:         socket.setSoTimeout((int) keepAliveInterval);
1: 
0:         return new CommandDatagramSocket(toString(), socket, getWireFormat(), getDatagramSize(), mcastAddress, mcastPort, createDatagramHeaderMarshaller());
1:     }
1: 
1:     protected InetSocketAddress createAddress(URI remoteLocation) throws UnknownHostException, IOException {
1:         this.mcastAddress = InetAddress.getByName(remoteLocation.getHost());
1:         this.mcastPort = remoteLocation.getPort();
1:         return new InetSocketAddress(mcastAddress, mcastPort);
1:     }
1: 
1:     protected DatagramHeaderMarshaller createDatagramHeaderMarshaller() {
1:         return new MulticastDatagramHeaderMarshaller("udp://dummyHostName:" + getPort());
1:     }
1: 
commit:8704338
/////////////////////////////////////////////////////////////////////////
1: /**
1:  *
0:  * Copyright 2005-2006 The Apache Software Foundation
1:  *
0:  * Licensed under the Apache License, Version 2.0 (the "License");
0:  * you may not use this file except in compliance with the License.
0:  * You may obtain a copy of the License at
1:  *
0:  * http://www.apache.org/licenses/LICENSE-2.0
1:  *
1:  * Unless required by applicable law or agreed to in writing, software
1:  * distributed under the License is distributed on an "AS IS" BASIS,
1:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:  * See the License for the specific language governing permissions and
1:  * limitations under the License.
1:  */
1: package org.apache.activemq.transport.multicast;
1: 
0: import org.apache.activemq.openwire.OpenWireFormat;
0: import org.apache.activemq.transport.udp.UdpTransport;
1: 
1: import java.io.IOException;
1: import java.net.SocketAddress;
1: import java.net.URI;
1: import java.net.UnknownHostException;
1: 
1: /**
1:  * A multicast based transport.
1:  * 
0:  * @version $Revision$
1:  */
1: public class MulticastTransport extends UdpTransport {
1: 
0:     public MulticastTransport(OpenWireFormat wireFormat, int port) throws UnknownHostException, IOException {
0:         super(wireFormat, port);
1:     }
1: 
0:     public MulticastTransport(OpenWireFormat wireFormat, SocketAddress socketAddress) throws IOException {
0:         super(wireFormat, socketAddress);
1:     }
1: 
1:     public MulticastTransport(OpenWireFormat wireFormat, URI remoteLocation) throws UnknownHostException, IOException {
1:         super(wireFormat, remoteLocation);
1:     }
1: 
0:     public MulticastTransport(OpenWireFormat wireFormat) throws IOException {
0:         super(wireFormat);
1:     }
1: 
1:     protected String getProtocolName() {
1:         return "Multicast";
1:     }
1: 
1:     protected String getProtocolUriScheme() {
1:         return "multicast://";
1:     }
1: }
============================================================================