1:ac8c8d1: /**
1:ac8c8d1:  * Licensed to the Apache Software Foundation (ASF) under one or more
1:ac8c8d1:  * contributor license agreements.  See the NOTICE file distributed with
1:ac8c8d1:  * this work for additional information regarding copyright ownership.
1:ac8c8d1:  * The ASF licenses this file to You under the Apache License, Version 2.0
1:ac8c8d1:  * (the "License"); you may not use this file except in compliance with
1:ac8c8d1:  * the License.  You may obtain a copy of the License at
1:ac8c8d1:  *
1:ac8c8d1:  *      http://www.apache.org/licenses/LICENSE-2.0
1:ac8c8d1:  *
1:ac8c8d1:  * Unless required by applicable law or agreed to in writing, software
1:ac8c8d1:  * distributed under the License is distributed on an "AS IS" BASIS,
1:ac8c8d1:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:ac8c8d1:  * See the License for the specific language governing permissions and
1:ac8c8d1:  * limitations under the License.
1:ac8c8d1:  */
1:ac8c8d1: package org.apache.activemq.broker;
4:ac8c8d1: 
1:ac8c8d1: import java.util.concurrent.TimeUnit;
1:ce16735: 
1:ac8c8d1: import javax.jms.Message;
1:ac8c8d1: import javax.jms.MessageConsumer;
1:ac8c8d1: import javax.jms.MessageProducer;
1:ac8c8d1: import javax.jms.Session;
1:ce16735: 
1:ac8c8d1: import org.apache.activemq.ActiveMQConnection;
1:ac8c8d1: import org.apache.activemq.ActiveMQConnectionFactory;
1:ac8c8d1: import org.apache.activemq.RedeliveryPolicy;
1:ac8c8d1: import org.apache.activemq.broker.region.policy.RedeliveryPolicyMap;
1:ac8c8d1: import org.apache.activemq.broker.region.policy.SharedDeadLetterStrategy;
1:ac8c8d1: import org.apache.activemq.broker.util.RedeliveryPlugin;
1:ac8c8d1: import org.apache.activemq.command.ActiveMQQueue;
1:ac8c8d1: import org.slf4j.Logger;
1:ac8c8d1: import org.slf4j.LoggerFactory;
1:ac8c8d1: 
1:ac8c8d1: public class BrokerRedeliveryTest extends org.apache.activemq.TestSupport {
1:ac8c8d1: 
1:ac8c8d1:     static final Logger LOG = LoggerFactory.getLogger(BrokerRedeliveryTest.class);
1:ac8c8d1:     BrokerService broker = null;
1:ac8c8d1: 
1:ac8c8d1:     final ActiveMQQueue destination = new ActiveMQQueue("Redelivery");
1:ac8c8d1:     final String data = "hi";
1:ac8c8d1:     final long redeliveryDelayMillis = 2000;
1:a3a41da:     long initialRedeliveryDelayMillis = 4000;
1:fc15f13:     int maxBrokerRedeliveries = 2;
1:ac8c8d1: 
1:ac8c8d1:     public void testScheduledRedelivery() throws Exception {
1:fc15f13:         doTestScheduledRedelivery(maxBrokerRedeliveries, true);
1:fc15f13:     }
1:ac8c8d1: 
1:fc15f13:     public void testInfiniteRedelivery() throws Exception {
1:a3a41da:         initialRedeliveryDelayMillis = redeliveryDelayMillis;
1:fc15f13:         maxBrokerRedeliveries = RedeliveryPolicy.NO_MAXIMUM_REDELIVERIES;
1:fc15f13:         doTestScheduledRedelivery(RedeliveryPolicy.DEFAULT_MAXIMUM_REDELIVERIES + 1, false);
1:fc15f13:     }
1:fc15f13: 
1:fc15f13:     public void doTestScheduledRedelivery(int maxBrokerRedeliveriesToValidate, boolean validateDLQ) throws Exception {
1:fc15f13: 
1:fc15f13:         startBroker(true);
1:fdd0534:         sendMessage(0);
1:ac8c8d1: 
1:ac8c8d1:         ActiveMQConnection consumerConnection = (ActiveMQConnection) createConnection();
1:ac8c8d1:         RedeliveryPolicy redeliveryPolicy = new RedeliveryPolicy();
1:ac8c8d1:         redeliveryPolicy.setInitialRedeliveryDelay(0);
1:ac8c8d1:         redeliveryPolicy.setMaximumRedeliveries(0);
1:ac8c8d1:         consumerConnection.setRedeliveryPolicy(redeliveryPolicy);
1:ac8c8d1:         consumerConnection.start();
1:ac8c8d1:         Session consumerSession = consumerConnection.createSession(true, Session.SESSION_TRANSACTED);
1:ac8c8d1:         MessageConsumer consumer = consumerSession.createConsumer(destination);
1:ac8c8d1:         Message message = consumer.receive(1000);
1:ac8c8d1:         assertNotNull("got message", message);
1:ac8c8d1:         LOG.info("got: " + message);
1:ac8c8d1:         consumerSession.rollback();
1:ac8c8d1: 
1:ce16735:         for (int i = 0; i < maxBrokerRedeliveriesToValidate; i++) {
1:ac8c8d1:             Message shouldBeNull = consumer.receive(500);
1:b6bca39:             assertNull("did not get message early: " + shouldBeNull, shouldBeNull);
1:ac8c8d1: 
1:ce16735:             TimeUnit.SECONDS.sleep(4);
1:ac8c8d1: 
1:ce16735:             Message brokerRedeliveryMessage = consumer.receive(1500);
1:ac8c8d1:             LOG.info("got: " + brokerRedeliveryMessage);
1:ac8c8d1:             assertNotNull("got message via broker redelivery after delay", brokerRedeliveryMessage);
1:ac8c8d1:             assertEquals("message matches", message.getStringProperty("data"), brokerRedeliveryMessage.getStringProperty("data"));
1:1d71cb7:             assertEquals("has expiryDelay specified - iteration:" + i, i == 0 ? initialRedeliveryDelayMillis : redeliveryDelayMillis, brokerRedeliveryMessage.getLongProperty(RedeliveryPlugin.REDELIVERY_DELAY));
1:ac8c8d1: 
1:ac8c8d1:             consumerSession.rollback();
2:ac8c8d1:         }
1:ac8c8d1: 
1:fc15f13:         if (validateDLQ) {
1:fc15f13:             MessageConsumer dlqConsumer = consumerSession.createConsumer(new ActiveMQQueue(SharedDeadLetterStrategy.DEFAULT_DEAD_LETTER_QUEUE_NAME));
1:fc15f13:             Message dlqMessage = dlqConsumer.receive(2000);
1:fc15f13:             assertNotNull("Got message from dql", dlqMessage);
1:fc15f13:             assertEquals("message matches", message.getStringProperty("data"), dlqMessage.getStringProperty("data"));
1:fc15f13:             consumerSession.commit();
1:fc15f13:         } else {
1:fc15f13:             // consume/commit ok
1:fc15f13:             message = consumer.receive(3000);
1:fc15f13:             assertNotNull("got message", message);
1:fc15f13:             assertEquals("redeliveries accounted for", maxBrokerRedeliveriesToValidate + 2, message.getLongProperty("JMSXDeliveryCount"));
1:fc15f13:             consumerSession.commit();
1:fc15f13:         }
1:fc15f13: 
1:fc15f13:         consumerConnection.close();
1:ac8c8d1:     }
1:ac8c8d1: 
1:fdd0534:     public void testNoScheduledRedeliveryOfExpired() throws Exception {
1:fc15f13:         startBroker(true);
1:fdd0534:         ActiveMQConnection consumerConnection = (ActiveMQConnection) createConnection();
1:fdd0534:         consumerConnection.start();
1:fdd0534:         Session consumerSession = consumerConnection.createSession(false, Session.CLIENT_ACKNOWLEDGE);
1:fdd0534:         MessageConsumer consumer = consumerSession.createConsumer(destination);
1:4350ded:         sendMessage(1500);
1:fdd0534:         Message message = consumer.receive(1000);
1:fdd0534:         assertNotNull("got message", message);
1:fdd0534: 
1:fdd0534:         // ensure there is another consumer to redispatch to
1:fdd0534:         MessageConsumer redeliverConsumer = consumerSession.createConsumer(destination);
1:fdd0534: 
1:fdd0534:         // allow consumed to expire so it gets redelivered
1:fdd0534:         TimeUnit.SECONDS.sleep(2);
1:fdd0534:         consumer.close();
1:fdd0534: 
1:fdd0534:         // should go to dlq as it has expired
1:fdd0534:         // validate DLQ
1:fdd0534:         MessageConsumer dlqConsumer = consumerSession.createConsumer(new ActiveMQQueue(SharedDeadLetterStrategy.DEFAULT_DEAD_LETTER_QUEUE_NAME));
1:fdd0534:         Message dlqMessage = dlqConsumer.receive(2000);
1:fdd0534:         assertNotNull("Got message from dql", dlqMessage);
1:fdd0534:         assertEquals("message matches", message.getStringProperty("data"), dlqMessage.getStringProperty("data"));
1:fdd0534:     }
1:fdd0534: 
1:fdd0534:     private void sendMessage(int timeToLive) throws Exception {
1:ac8c8d1:         ActiveMQConnection producerConnection = (ActiveMQConnection) createConnection();
1:ac8c8d1:         producerConnection.start();
1:ac8c8d1:         Session producerSession = producerConnection.createSession(false, Session.AUTO_ACKNOWLEDGE);
1:ac8c8d1:         MessageProducer producer = producerSession.createProducer(destination);
1:fdd0534:         if (timeToLive > 0) {
1:fdd0534:             producer.setTimeToLive(timeToLive);
1:fdd0534:         }
1:ac8c8d1:         Message message = producerSession.createMessage();
1:ac8c8d1:         message.setStringProperty("data", data);
1:ac8c8d1:         producer.send(message);
1:ac8c8d1:         producerConnection.close();
1:ac8c8d1:     }
1:ac8c8d1: 
1:ac8c8d1:     private void startBroker(boolean deleteMessages) throws Exception {
1:ac8c8d1:         broker = new BrokerService();
1:ce16735:         broker.setPersistent(false);
1:ac8c8d1:         broker.setSchedulerSupport(true);
1:ac8c8d1: 
1:ac8c8d1:         RedeliveryPlugin redeliveryPlugin = new RedeliveryPlugin();
1:ac8c8d1: 
1:ac8c8d1:         RedeliveryPolicy brokerRedeliveryPolicy = new RedeliveryPolicy();
1:ac8c8d1:         brokerRedeliveryPolicy.setRedeliveryDelay(redeliveryDelayMillis);
1:33b88d3:         brokerRedeliveryPolicy.setInitialRedeliveryDelay(initialRedeliveryDelayMillis);
1:ac8c8d1:         brokerRedeliveryPolicy.setMaximumRedeliveries(maxBrokerRedeliveries);
1:ac8c8d1: 
1:ac8c8d1:         RedeliveryPolicyMap redeliveryPolicyMap = new RedeliveryPolicyMap();
1:ac8c8d1:         redeliveryPolicyMap.setDefaultEntry(brokerRedeliveryPolicy);
1:ac8c8d1:         redeliveryPlugin.setRedeliveryPolicyMap(redeliveryPolicyMap);
1:ac8c8d1: 
1:ac8c8d1:         broker.setPlugins(new BrokerPlugin[]{redeliveryPlugin});
1:ac8c8d1: 
1:ac8c8d1:         if (deleteMessages) {
1:ac8c8d1:             broker.setDeleteAllMessagesOnStartup(true);
1:ac8c8d1:         }
1:ac8c8d1:         broker.start();
1:ac8c8d1:     }
1:ac8c8d1: 
1:ac8c8d1:     private void stopBroker() throws Exception {
1:ce16735:         if (broker != null) {
1:ac8c8d1:             broker.stop();
1:ce16735:             broker = null;
1:ce16735:         }
1:ac8c8d1:     }
1:ac8c8d1: 
1:ce16735:     @Override
1:ac8c8d1:     protected ActiveMQConnectionFactory createConnectionFactory() throws Exception {
1:ac8c8d1:         return new ActiveMQConnectionFactory("vm://localhost");
1:ac8c8d1:     }
1:ac8c8d1: 
2:ac8c8d1:     @Override
1:ac8c8d1:     protected void tearDown() throws Exception {
1:ac8c8d1:         stopBroker();
1:ac8c8d1:         super.tearDown();
1:ac8c8d1:     }
1:ac8c8d1: }
============================================================================
author:gtully
-------------------------------------------------------------------------------
commit:b6bca39
/////////////////////////////////////////////////////////////////////////
1:             assertNull("did not get message early: " + shouldBeNull, shouldBeNull);
commit:1d71cb7
/////////////////////////////////////////////////////////////////////////
1:             assertEquals("has expiryDelay specified - iteration:" + i, i == 0 ? initialRedeliveryDelayMillis : redeliveryDelayMillis, brokerRedeliveryMessage.getLongProperty(RedeliveryPlugin.REDELIVERY_DELAY));
commit:a3a41da
/////////////////////////////////////////////////////////////////////////
1:     long initialRedeliveryDelayMillis = 4000;
/////////////////////////////////////////////////////////////////////////
1:         initialRedeliveryDelayMillis = redeliveryDelayMillis;
commit:33b88d3
/////////////////////////////////////////////////////////////////////////
0:     final long initialRedeliveryDelayMillis = 4000;
/////////////////////////////////////////////////////////////////////////
0:             assertEquals("has expiryDelay specified", i == 0 ? initialRedeliveryDelayMillis : redeliveryDelayMillis, brokerRedeliveryMessage.getLongProperty(RedeliveryPlugin.REDELIVERY_DELAY));
/////////////////////////////////////////////////////////////////////////
1:         brokerRedeliveryPolicy.setInitialRedeliveryDelay(initialRedeliveryDelayMillis);
author:Timothy Bish
-------------------------------------------------------------------------------
commit:ce16735
/////////////////////////////////////////////////////////////////////////
1: 
1: 
/////////////////////////////////////////////////////////////////////////
1:         for (int i = 0; i < maxBrokerRedeliveriesToValidate; i++) {
1:             TimeUnit.SECONDS.sleep(4);
1:             Message brokerRedeliveryMessage = consumer.receive(1500);
/////////////////////////////////////////////////////////////////////////
1:         broker.setPersistent(false);
/////////////////////////////////////////////////////////////////////////
1:         if (broker != null) {
1:             broker = null;
1:         }
1:     @Override
author:Kevin Earls
-------------------------------------------------------------------------------
commit:4350ded
/////////////////////////////////////////////////////////////////////////
1:         sendMessage(1500);
author:Gary Tully
-------------------------------------------------------------------------------
commit:fc15f13
/////////////////////////////////////////////////////////////////////////
1:     int maxBrokerRedeliveries = 2;
1:         doTestScheduledRedelivery(maxBrokerRedeliveries, true);
1:     }
1:     public void testInfiniteRedelivery() throws Exception {
1:         maxBrokerRedeliveries = RedeliveryPolicy.NO_MAXIMUM_REDELIVERIES;
1:         doTestScheduledRedelivery(RedeliveryPolicy.DEFAULT_MAXIMUM_REDELIVERIES + 1, false);
1:     }
1: 
1:     public void doTestScheduledRedelivery(int maxBrokerRedeliveriesToValidate, boolean validateDLQ) throws Exception {
1: 
1:         startBroker(true);
/////////////////////////////////////////////////////////////////////////
0:         for (int i=0;i<maxBrokerRedeliveriesToValidate;i++) {
/////////////////////////////////////////////////////////////////////////
1:         if (validateDLQ) {
1:             MessageConsumer dlqConsumer = consumerSession.createConsumer(new ActiveMQQueue(SharedDeadLetterStrategy.DEFAULT_DEAD_LETTER_QUEUE_NAME));
1:             Message dlqMessage = dlqConsumer.receive(2000);
1:             assertNotNull("Got message from dql", dlqMessage);
1:             assertEquals("message matches", message.getStringProperty("data"), dlqMessage.getStringProperty("data"));
1:             consumerSession.commit();
1:         } else {
1:             // consume/commit ok
1:             message = consumer.receive(3000);
1:             assertNotNull("got message", message);
1:             assertEquals("redeliveries accounted for", maxBrokerRedeliveriesToValidate + 2, message.getLongProperty("JMSXDeliveryCount"));
1:             consumerSession.commit();
1:         }
1: 
1:         consumerConnection.close();
1:         startBroker(true);
/////////////////////////////////////////////////////////////////////////
commit:fdd0534
/////////////////////////////////////////////////////////////////////////
0: import org.apache.activemq.ActiveMQPrefetchPolicy;
/////////////////////////////////////////////////////////////////////////
1:         sendMessage(0);
/////////////////////////////////////////////////////////////////////////
1:     public void testNoScheduledRedeliveryOfExpired() throws Exception {
1:         ActiveMQConnection consumerConnection = (ActiveMQConnection) createConnection();
1:         consumerConnection.start();
1:         Session consumerSession = consumerConnection.createSession(false, Session.CLIENT_ACKNOWLEDGE);
1:         MessageConsumer consumer = consumerSession.createConsumer(destination);
0:         sendMessage(1000);
1:         Message message = consumer.receive(1000);
1:         assertNotNull("got message", message);
1: 
1:         // ensure there is another consumer to redispatch to
1:         MessageConsumer redeliverConsumer = consumerSession.createConsumer(destination);
1: 
1:         // allow consumed to expire so it gets redelivered
1:         TimeUnit.SECONDS.sleep(2);
1:         consumer.close();
1: 
1:         // should go to dlq as it has expired
1:         // validate DLQ
1:         MessageConsumer dlqConsumer = consumerSession.createConsumer(new ActiveMQQueue(SharedDeadLetterStrategy.DEFAULT_DEAD_LETTER_QUEUE_NAME));
1:         Message dlqMessage = dlqConsumer.receive(2000);
1:         assertNotNull("Got message from dql", dlqMessage);
1:         assertEquals("message matches", message.getStringProperty("data"), dlqMessage.getStringProperty("data"));
1:     }
1: 
1:     private void sendMessage(int timeToLive) throws Exception {
1:         if (timeToLive > 0) {
1:             producer.setTimeToLive(timeToLive);
1:         }
commit:ac8c8d1
/////////////////////////////////////////////////////////////////////////
1: /**
1:  * Licensed to the Apache Software Foundation (ASF) under one or more
1:  * contributor license agreements.  See the NOTICE file distributed with
1:  * this work for additional information regarding copyright ownership.
1:  * The ASF licenses this file to You under the Apache License, Version 2.0
1:  * (the "License"); you may not use this file except in compliance with
1:  * the License.  You may obtain a copy of the License at
1:  *
1:  *      http://www.apache.org/licenses/LICENSE-2.0
1:  *
1:  * Unless required by applicable law or agreed to in writing, software
1:  * distributed under the License is distributed on an "AS IS" BASIS,
1:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:  * See the License for the specific language governing permissions and
1:  * limitations under the License.
1:  */
1: package org.apache.activemq.broker;
1: 
1: import java.util.concurrent.TimeUnit;
1: import javax.jms.Message;
1: import javax.jms.MessageConsumer;
1: import javax.jms.MessageProducer;
1: import javax.jms.Session;
1: import org.apache.activemq.ActiveMQConnection;
1: import org.apache.activemq.ActiveMQConnectionFactory;
1: import org.apache.activemq.RedeliveryPolicy;
1: import org.apache.activemq.broker.region.policy.RedeliveryPolicyMap;
1: import org.apache.activemq.broker.region.policy.SharedDeadLetterStrategy;
1: import org.apache.activemq.broker.util.RedeliveryPlugin;
1: import org.apache.activemq.command.ActiveMQQueue;
1: import org.slf4j.Logger;
1: import org.slf4j.LoggerFactory;
1: 
1: public class BrokerRedeliveryTest extends org.apache.activemq.TestSupport {
1: 
1:     static final Logger LOG = LoggerFactory.getLogger(BrokerRedeliveryTest.class);
1:     BrokerService broker = null;
1: 
1:     final ActiveMQQueue destination = new ActiveMQQueue("Redelivery");
1:     final String data = "hi";
1:     final long redeliveryDelayMillis = 2000;
0:     final int maxBrokerRedeliveries = 2;
1: 
1:     public void testScheduledRedelivery() throws Exception {
1: 
0:         sendMessage();
1: 
1:         ActiveMQConnection consumerConnection = (ActiveMQConnection) createConnection();
1:         RedeliveryPolicy redeliveryPolicy = new RedeliveryPolicy();
1:         redeliveryPolicy.setInitialRedeliveryDelay(0);
1:         redeliveryPolicy.setMaximumRedeliveries(0);
1:         consumerConnection.setRedeliveryPolicy(redeliveryPolicy);
1:         consumerConnection.start();
1:         Session consumerSession = consumerConnection.createSession(true, Session.SESSION_TRANSACTED);
1:         MessageConsumer consumer = consumerSession.createConsumer(destination);
1:         Message message = consumer.receive(1000);
1:         assertNotNull("got message", message);
1:         LOG.info("got: " + message);
1:         consumerSession.rollback();
1: 
0:         for (int i=0;i<maxBrokerRedeliveries;i++) {
1:             Message shouldBeNull = consumer.receive(500);
0:             assertNull("did not get message after redelivery count exceeded: " + shouldBeNull, shouldBeNull);
1: 
0:             TimeUnit.SECONDS.sleep(3);
1: 
0:             Message brokerRedeliveryMessage = consumer.receive(500);
1:             LOG.info("got: " + brokerRedeliveryMessage);
1:             assertNotNull("got message via broker redelivery after delay", brokerRedeliveryMessage);
1:             assertEquals("message matches", message.getStringProperty("data"), brokerRedeliveryMessage.getStringProperty("data"));
0:             assertEquals("has expiryDelay specified", redeliveryDelayMillis, brokerRedeliveryMessage.getLongProperty(RedeliveryPlugin.REDELIVERY_DELAY));
1: 
1:             consumerSession.rollback();
1:         }
1: 
0:         // validate DLQ
0:         MessageConsumer dlqConsumer = consumerSession.createConsumer(new ActiveMQQueue(SharedDeadLetterStrategy.DEFAULT_DEAD_LETTER_QUEUE_NAME));
0:         Message dlqMessage = dlqConsumer.receive(2000);
0:         assertNotNull("Got message from dql", dlqMessage);
0:         assertEquals("message matches", message.getStringProperty("data"), dlqMessage.getStringProperty("data"));
0:         consumerSession.commit();
1:     }
1: 
0:     private void sendMessage() throws Exception {
1:         ActiveMQConnection producerConnection = (ActiveMQConnection) createConnection();
1:         producerConnection.start();
1:         Session producerSession = producerConnection.createSession(false, Session.AUTO_ACKNOWLEDGE);
1:         MessageProducer producer = producerSession.createProducer(destination);
1:         Message message = producerSession.createMessage();
1:         message.setStringProperty("data", data);
1:         producer.send(message);
1:         producerConnection.close();
1:     }
1: 
1:     private void startBroker(boolean deleteMessages) throws Exception {
1:         broker = new BrokerService();
1:         broker.setSchedulerSupport(true);
1: 
1: 
1:         RedeliveryPlugin redeliveryPlugin = new RedeliveryPlugin();
1: 
1:         RedeliveryPolicy brokerRedeliveryPolicy = new RedeliveryPolicy();
1:         brokerRedeliveryPolicy.setRedeliveryDelay(redeliveryDelayMillis);
0:         brokerRedeliveryPolicy.setInitialRedeliveryDelay(redeliveryDelayMillis);
1:         brokerRedeliveryPolicy.setMaximumRedeliveries(maxBrokerRedeliveries);
1: 
1:         RedeliveryPolicyMap redeliveryPolicyMap = new RedeliveryPolicyMap();
1:         redeliveryPolicyMap.setDefaultEntry(brokerRedeliveryPolicy);
1:         redeliveryPlugin.setRedeliveryPolicyMap(redeliveryPolicyMap);
1: 
1:         broker.setPlugins(new BrokerPlugin[]{redeliveryPlugin});
1: 
1:         if (deleteMessages) {
1:             broker.setDeleteAllMessagesOnStartup(true);
1:         }
1:         broker.start();
1:     }
1: 
1: 
1:     private void stopBroker() throws Exception {
0:         if (broker != null)
1:             broker.stop();
0:         broker = null;
1:     }
1: 
1:     protected ActiveMQConnectionFactory createConnectionFactory() throws Exception {
1:         return new ActiveMQConnectionFactory("vm://localhost");
1:     }
1: 
1:     @Override
0:     protected void setUp() throws Exception {
0:         super.setUp();
0:         startBroker(true);
1:     }
1: 
1:     @Override
1:     protected void tearDown() throws Exception {
1:         stopBroker();
1:         super.tearDown();
1:     }
1: }
author:Timothy A. Bish
-------------------------------------------------------------------------------
commit:ef24cc9
============================================================================