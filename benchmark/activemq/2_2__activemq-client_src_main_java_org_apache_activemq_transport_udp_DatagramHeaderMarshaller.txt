1:eba4c9c: /**
1:57b4941:  * Licensed to the Apache Software Foundation (ASF) under one or more
1:57b4941:  * contributor license agreements.  See the NOTICE file distributed with
1:57b4941:  * this work for additional information regarding copyright ownership.
1:57b4941:  * The ASF licenses this file to You under the Apache License, Version 2.0
1:57b4941:  * (the "License"); you may not use this file except in compliance with
1:57b4941:  * the License.  You may obtain a copy of the License at
3:eba4c9c:  *
1:230a86c:  *      http://www.apache.org/licenses/LICENSE-2.0
1:eba4c9c:  *
1:eba4c9c:  * Unless required by applicable law or agreed to in writing, software
1:eba4c9c:  * distributed under the License is distributed on an "AS IS" BASIS,
1:eba4c9c:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:eba4c9c:  * See the License for the specific language governing permissions and
1:eba4c9c:  * limitations under the License.
1:eba4c9c:  */
1:eba4c9c: package org.apache.activemq.transport.udp;
5:eba4c9c: 
1:8704338: 
1:5739c6c: import java.io.DataInputStream;
1:5739c6c: import java.io.DataOutputStream;
1:5739c6c: import java.net.DatagramPacket;
1:8704338: import java.net.SocketAddress;
1:eba4c9c: import java.nio.ByteBuffer;
1:3dd6d8a: import java.util.HashMap;
1:3dd6d8a: import java.util.Map;
1:eba4c9c: 
1:74a7a8b: import org.apache.activemq.command.Command;
1:74a7a8b: import org.apache.activemq.command.Endpoint;
1:74a7a8b: 
1:eba4c9c: /**
1:0bbc0ac:  * 
1:eba4c9c:  * 
1:eba4c9c:  */
1:eba4c9c: public class DatagramHeaderMarshaller {
1:eba4c9c: 
1:3dd6d8a:     // TODO for large dynamic networks
1:3dd6d8a:     // we may want to evict endpoints that disconnect
1:3dd6d8a:     // from a transport - e.g. for multicast
1:933eb2f:     private Map<SocketAddress, Endpoint> endpoints = new HashMap<SocketAddress, Endpoint>();
1:3dd6d8a:     
1:8704338:     /**
1:8704338:      * Reads any header if applicable and then creates an endpoint object
1:8704338:      */
1:8704338:     public Endpoint createEndpoint(ByteBuffer readBuffer, SocketAddress address) {
1:3dd6d8a:         return getEndpoint(address);
1:df26287:     }
1:df26287: 
1:5739c6c:     public Endpoint createEndpoint(DatagramPacket datagram, DataInputStream dataIn) {
1:3dd6d8a:         return getEndpoint(datagram.getSocketAddress());
1:5739c6c:     }
1:5739c6c: 
1:8704338:     public void writeHeader(Command command, ByteBuffer writeBuffer) {
1:8704338:         /*
1:8704338:         writeBuffer.putLong(command.getCounter());
1:8704338:         writeBuffer.putInt(command.getDataSize());
1:8704338:         byte flags = command.getFlags();
1:187f884:         //System.out.println("Writing header with counter: " + header.getCounter() + " size: " + header.getDataSize() + " with flags: " + flags);
1:187f884:         writeBuffer.put(flags);
1:8704338:         */
3:eba4c9c:     }
1:5739c6c: 
1:5739c6c:     public void writeHeader(Command command, DataOutputStream dataOut) {
1:5739c6c:     }
1:5739c6c: 
1:3dd6d8a:     /**
1:3dd6d8a:      * Gets the current endpoint object for this address or creates one if not available.
1:3dd6d8a:      * 
1:3dd6d8a:      * Note that this method does not need to be synchronized as its only ever going to be
1:3dd6d8a:      * used by the already-synchronized read() method of a CommandChannel 
1:3dd6d8a:      * 
1:3dd6d8a:      */
1:3dd6d8a:     protected Endpoint getEndpoint(SocketAddress address) {
1:933eb2f:         Endpoint endpoint = endpoints.get(address);
1:3dd6d8a:         if (endpoint == null) {
1:3dd6d8a:             endpoint = createEndpoint(address);
1:3dd6d8a:             endpoints.put(address, endpoint);
1:3dd6d8a:         }
1:3dd6d8a:         return endpoint;
1:3dd6d8a:     }
1:3dd6d8a: 
1:3dd6d8a:     protected Endpoint createEndpoint(SocketAddress address) {
1:3dd6d8a:         return new DatagramEndpoint(address.toString(), address);
1:3dd6d8a:     }
1:eba4c9c: }
============================================================================
author:Hiram R. Chirino
-------------------------------------------------------------------------------
commit:9a8f6e4
commit:0bbc0ac
/////////////////////////////////////////////////////////////////////////
1:  * 
commit:933eb2f
/////////////////////////////////////////////////////////////////////////
1:     private Map<SocketAddress, Endpoint> endpoints = new HashMap<SocketAddress, Endpoint>();
/////////////////////////////////////////////////////////////////////////
1:         Endpoint endpoint = endpoints.get(address);
commit:74a7a8b
/////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////
1: import org.apache.activemq.command.Command;
1: import org.apache.activemq.command.Endpoint;
1: 
commit:230a86c
/////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////
1:  *      http://www.apache.org/licenses/LICENSE-2.0
commit:57b4941
/////////////////////////////////////////////////////////////////////////
1:  * Licensed to the Apache Software Foundation (ASF) under one or more
1:  * contributor license agreements.  See the NOTICE file distributed with
1:  * this work for additional information regarding copyright ownership.
1:  * The ASF licenses this file to You under the Apache License, Version 2.0
1:  * (the "License"); you may not use this file except in compliance with
1:  * the License.  You may obtain a copy of the License at
author:James Strachan
-------------------------------------------------------------------------------
commit:3dd6d8a
/////////////////////////////////////////////////////////////////////////
1: import java.util.HashMap;
1: import java.util.Map;
/////////////////////////////////////////////////////////////////////////
1:     // TODO for large dynamic networks
1:     // we may want to evict endpoints that disconnect
1:     // from a transport - e.g. for multicast
0:     private Map endpoints = new HashMap();
1:     
1:         return getEndpoint(address);
1:         return getEndpoint(datagram.getSocketAddress());
/////////////////////////////////////////////////////////////////////////
1:     /**
1:      * Gets the current endpoint object for this address or creates one if not available.
1:      * 
1:      * Note that this method does not need to be synchronized as its only ever going to be
1:      * used by the already-synchronized read() method of a CommandChannel 
1:      * 
1:      */
1:     protected Endpoint getEndpoint(SocketAddress address) {
0:         Endpoint endpoint = (Endpoint) endpoints.get(address);
1:         if (endpoint == null) {
1:             endpoint = createEndpoint(address);
1:             endpoints.put(address, endpoint);
1:         }
1:         return endpoint;
1:     }
1: 
1:     protected Endpoint createEndpoint(SocketAddress address) {
1:         return new DatagramEndpoint(address.toString(), address);
1:     }
commit:364337b
/////////////////////////////////////////////////////////////////////////
commit:5739c6c
/////////////////////////////////////////////////////////////////////////
0: import org.activeio.ByteArrayOutputStream;
1: import java.io.DataInputStream;
1: import java.io.DataOutputStream;
1: import java.net.DatagramPacket;
0: import java.net.InetAddress;
/////////////////////////////////////////////////////////////////////////
1:     public Endpoint createEndpoint(DatagramPacket datagram, DataInputStream dataIn) {
0:         SocketAddress address = datagram.getSocketAddress();
0:         return new DatagramEndpoint(address.toString(), address);
1:     }
1: 
/////////////////////////////////////////////////////////////////////////
1: 
1:     public void writeHeader(Command command, DataOutputStream dataOut) {
1:     }
1: 
commit:8704338
/////////////////////////////////////////////////////////////////////////
0: import org.apache.activemq.command.Command;
0: import org.apache.activemq.command.Endpoint;
1: 
1: import java.net.SocketAddress;
/////////////////////////////////////////////////////////////////////////
1:     /**
1:      * Reads any header if applicable and then creates an endpoint object
1:      */
1:     public Endpoint createEndpoint(ByteBuffer readBuffer, SocketAddress address) {
0:         return new DatagramEndpoint(address.toString(), address);
1:     public void writeHeader(Command command, ByteBuffer writeBuffer) {
1:         /*
1:         writeBuffer.putLong(command.getCounter());
1:         writeBuffer.putInt(command.getDataSize());
1:         byte flags = command.getFlags();
1:         */
commit:df26287
/////////////////////////////////////////////////////////////////////////
0:     public DatagramHeader createDatagramHeader() {
0:         return new DatagramHeader();
1:     }
1: 
0:         DatagramHeader answer = createDatagramHeader();
/////////////////////////////////////////////////////////////////////////
commit:187f884
/////////////////////////////////////////////////////////////////////////
0:         //System.out.println("Read header with counter: " + answer.getCounter() + "size: " + answer.getDataSize() + " with flags: " + flags);
0:         byte flags = header.getFlags();
1:         //System.out.println("Writing header with counter: " + header.getCounter() + " size: " + header.getDataSize() + " with flags: " + flags);
1:         writeBuffer.put(flags);
commit:fcd06b2
/////////////////////////////////////////////////////////////////////////
0:         answer.setDataSize(readBuffer.getInt());
/////////////////////////////////////////////////////////////////////////
0:         writeBuffer.putInt(header.getDataSize());
0:         return 8 + 4 + 1;
commit:eba4c9c
/////////////////////////////////////////////////////////////////////////
1: /**
1:  *
0:  * Copyright 2005-2006 The Apache Software Foundation
1:  *
0:  * Licensed under the Apache License, Version 2.0 (the "License");
0:  * you may not use this file except in compliance with the License.
0:  * You may obtain a copy of the License at
1:  *
0:  * http://www.apache.org/licenses/LICENSE-2.0
1:  *
1:  * Unless required by applicable law or agreed to in writing, software
1:  * distributed under the License is distributed on an "AS IS" BASIS,
1:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:  * See the License for the specific language governing permissions and
1:  * limitations under the License.
1:  */
1: package org.apache.activemq.transport.udp;
1: 
1: 
1: import java.nio.ByteBuffer;
1: 
1: /**
1:  * 
0:  * @version $Revision$
1:  */
1: public class DatagramHeaderMarshaller {
1: 
0:     public DatagramHeader readHeader(ByteBuffer readBuffer) {
0:         DatagramHeader answer = new DatagramHeader();
0:         answer.setCounter(readBuffer.getLong());
0:         byte flags = readBuffer.get();
0:         answer.setFlags(flags);
0:         return answer;
1:     }
1: 
0:     public void writeHeader(DatagramHeader header, ByteBuffer writeBuffer) {
0:         writeBuffer.putLong(header.getCounter());
0:         writeBuffer.put(header.getFlags());
1:     }
1: 
0:     public int getHeaderSize(DatagramHeader header) {
0:         return 8 + 1;
1:     }
1: 
1: }
============================================================================