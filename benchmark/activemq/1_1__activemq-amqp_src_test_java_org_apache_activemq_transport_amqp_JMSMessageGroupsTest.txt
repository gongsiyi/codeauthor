1:c93b661: /**
1:c93b661:  * Licensed to the Apache Software Foundation (ASF) under one or more
1:c93b661:  * contributor license agreements.  See the NOTICE file distributed with
1:c93b661:  * this work for additional information regarding copyright ownership.
1:c93b661:  * The ASF licenses this file to You under the Apache License, Version 2.0
1:c93b661:  * (the "License"); you may not use this file except in compliance with
1:c93b661:  * the License.  You may obtain a copy of the License at
1:c93b661:  *
1:c93b661:  *      http://www.apache.org/licenses/LICENSE-2.0
1:c93b661:  *
1:c93b661:  * Unless required by applicable law or agreed to in writing, software
1:c93b661:  * distributed under the License is distributed on an "AS IS" BASIS,
1:c93b661:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:c93b661:  * See the License for the specific language governing permissions and
1:c93b661:  * limitations under the License.
1:c93b661:  */
1:c93b661: package org.apache.activemq.transport.amqp;
1:c93b661: 
1:c93b661: import static org.junit.Assert.assertNotNull;
1:c93b661: 
1:c93b661: import java.util.concurrent.atomic.AtomicInteger;
1:c93b661: 
1:c93b661: import javax.jms.BytesMessage;
1:c93b661: import javax.jms.DeliveryMode;
1:c93b661: import javax.jms.Message;
1:c93b661: import javax.jms.MessageConsumer;
1:c93b661: import javax.jms.MessageProducer;
1:c93b661: import javax.jms.Queue;
1:c93b661: import javax.jms.Session;
1:c93b661: 
1:c93b661: import org.junit.Test;
1:c93b661: import org.slf4j.Logger;
1:c93b661: import org.slf4j.LoggerFactory;
1:c93b661: 
1:240278d: public class JMSMessageGroupsTest extends JMSClientTestSupport {
1:c93b661: 
1:240278d:     protected static final Logger LOG = LoggerFactory.getLogger(JMSMessageGroupsTest.class);
1:c93b661: 
1:c93b661:     private static final int ITERATIONS = 10;
1:c93b661:     private static final int MESSAGE_COUNT = 10;
1:c93b661:     private static final int MESSAGE_SIZE = 200 * 1024;
1:94937e8:     private static final int RECEIVE_TIMEOUT = 3000;
1:c93b661:     private static final String JMSX_GROUP_ID = "JmsGroupsTest";
1:c93b661: 
1:94937e8:     @Test(timeout = 60000)
1:c93b661:     public void testGroupSeqIsNeverLost() throws Exception {
1:c93b661:         AtomicInteger sequenceCounter = new AtomicInteger();
1:c93b661: 
1:c93b661:         for (int i = 0; i < ITERATIONS; ++i) {
1:c93b661:             connection = createConnection();
1:c93b661:             {
1:c93b661:                 sendMessagesToBroker(MESSAGE_COUNT, sequenceCounter);
1:c93b661:                 readMessagesOnBroker(MESSAGE_COUNT);
1:c93b661:             }
1:c93b661:             connection.close();
1:c93b661:         }
1:c93b661:     }
1:c93b661: 
1:c93b661:     protected void readMessagesOnBroker(int count) throws Exception {
1:c93b661:         Session session = connection.createSession(false, Session.AUTO_ACKNOWLEDGE);
1:c93b661:         Queue queue = session.createQueue(getDestinationName());
1:c93b661:         MessageConsumer consumer = session.createConsumer(queue);
1:c93b661: 
1:c93b661:         for (int i = 0; i < MESSAGE_COUNT; ++i) {
1:c93b661:             Message message = consumer.receive(RECEIVE_TIMEOUT);
1:c93b661:             assertNotNull(message);
1:94937e8:             LOG.debug("Read message #{}: type = {}", i, message.getClass().getSimpleName());
1:c93b661:             String gid = message.getStringProperty("JMSXGroupID");
1:c93b661:             String seq = message.getStringProperty("JMSXGroupSeq");
1:94937e8:             LOG.debug("Message assigned JMSXGroupID := {}", gid);
1:94937e8:             LOG.debug("Message assigned JMSXGroupSeq := {}", seq);
1:c93b661:         }
1:c93b661: 
1:c93b661:         consumer.close();
1:c93b661:     }
1:c93b661: 
1:c93b661:     protected void sendMessagesToBroker(int count, AtomicInteger sequence) throws Exception {
1:c93b661:         Session session = connection.createSession(false, Session.AUTO_ACKNOWLEDGE);
1:c93b661:         Queue queue = session.createQueue(getDestinationName());
1:c93b661:         MessageProducer producer = session.createProducer(queue);
1:c93b661: 
1:c93b661:         byte[] buffer = new byte[MESSAGE_SIZE];
1:c93b661:         for (count = 0; count < MESSAGE_SIZE; count++) {
1:c93b661:             String s = String.valueOf(count % 10);
1:c93b661:             Character c = s.charAt(0);
1:c93b661:             int value = c.charValue();
1:c93b661:             buffer[count] = (byte) value;
1:c93b661:         }
1:c93b661: 
1:c93b661:         LOG.debug("Sending {} messages to destination: {}", MESSAGE_COUNT, queue);
1:c93b661:         for (int i = 1; i <= MESSAGE_COUNT; i++) {
1:c93b661:             BytesMessage message = session.createBytesMessage();
1:c93b661:             message.setJMSDeliveryMode(DeliveryMode.PERSISTENT);
1:c93b661:             message.setStringProperty("JMSXGroupID", JMSX_GROUP_ID);
1:c93b661:             message.setIntProperty("JMSXGroupSeq", sequence.incrementAndGet());
1:c93b661:             message.writeBytes(buffer);
1:c93b661:             producer.send(message);
1:c93b661:         }
1:c93b661: 
1:c93b661:         producer.close();
1:c93b661:     }
1:c93b661: }
============================================================================
author:Timothy Bish
-------------------------------------------------------------------------------
commit:240278d
/////////////////////////////////////////////////////////////////////////
1: public class JMSMessageGroupsTest extends JMSClientTestSupport {
1:     protected static final Logger LOG = LoggerFactory.getLogger(JMSMessageGroupsTest.class);
commit:94937e8
/////////////////////////////////////////////////////////////////////////
1:     private static final int RECEIVE_TIMEOUT = 3000;
1:     @Test(timeout = 60000)
/////////////////////////////////////////////////////////////////////////
1:             LOG.debug("Read message #{}: type = {}", i, message.getClass().getSimpleName());
1:             LOG.debug("Message assigned JMSXGroupID := {}", gid);
1:             LOG.debug("Message assigned JMSXGroupSeq := {}", seq);
commit:c93b661
/////////////////////////////////////////////////////////////////////////
1: /**
1:  * Licensed to the Apache Software Foundation (ASF) under one or more
1:  * contributor license agreements.  See the NOTICE file distributed with
1:  * this work for additional information regarding copyright ownership.
1:  * The ASF licenses this file to You under the Apache License, Version 2.0
1:  * (the "License"); you may not use this file except in compliance with
1:  * the License.  You may obtain a copy of the License at
1:  *
1:  *      http://www.apache.org/licenses/LICENSE-2.0
1:  *
1:  * Unless required by applicable law or agreed to in writing, software
1:  * distributed under the License is distributed on an "AS IS" BASIS,
1:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:  * See the License for the specific language governing permissions and
1:  * limitations under the License.
1:  */
1: package org.apache.activemq.transport.amqp;
1: 
1: import static org.junit.Assert.assertNotNull;
1: 
1: import java.util.concurrent.atomic.AtomicInteger;
1: 
1: import javax.jms.BytesMessage;
1: import javax.jms.DeliveryMode;
1: import javax.jms.Message;
1: import javax.jms.MessageConsumer;
1: import javax.jms.MessageProducer;
1: import javax.jms.Queue;
1: import javax.jms.Session;
1: 
1: import org.junit.Test;
1: import org.slf4j.Logger;
1: import org.slf4j.LoggerFactory;
1: 
0: public class JmsMessageGroupsTest extends JMSClientTestSupport {
1: 
0:     protected static final Logger LOG = LoggerFactory.getLogger(JmsMessageGroupsTest.class);
1: 
1:     private static final int ITERATIONS = 10;
1:     private static final int MESSAGE_COUNT = 10;
1:     private static final int MESSAGE_SIZE = 200 * 1024;
0:     private static final int RECEIVE_TIMEOUT = 5000;
1:     private static final String JMSX_GROUP_ID = "JmsGroupsTest";
1: 
0:     @Test(timeout = 60 * 1000)
1:     public void testGroupSeqIsNeverLost() throws Exception {
1:         AtomicInteger sequenceCounter = new AtomicInteger();
1: 
1:         for (int i = 0; i < ITERATIONS; ++i) {
1:             connection = createConnection();
1:             {
1:                 sendMessagesToBroker(MESSAGE_COUNT, sequenceCounter);
1:                 readMessagesOnBroker(MESSAGE_COUNT);
1:             }
1:             connection.close();
1:         }
1:     }
1: 
1:     protected void readMessagesOnBroker(int count) throws Exception {
1:         Session session = connection.createSession(false, Session.AUTO_ACKNOWLEDGE);
1:         Queue queue = session.createQueue(getDestinationName());
1:         MessageConsumer consumer = session.createConsumer(queue);
1: 
1:         for (int i = 0; i < MESSAGE_COUNT; ++i) {
1:             Message message = consumer.receive(RECEIVE_TIMEOUT);
1:             assertNotNull(message);
0:             LOG.info("Read message #{}: type = {}", i, message.getClass().getSimpleName());
1:             String gid = message.getStringProperty("JMSXGroupID");
1:             String seq = message.getStringProperty("JMSXGroupSeq");
0:             LOG.info("Message assigned JMSXGroupID := {}", gid);
0:             LOG.info("Message assigned JMSXGroupSeq := {}", seq);
1:         }
1: 
1:         consumer.close();
1:     }
1: 
1:     protected void sendMessagesToBroker(int count, AtomicInteger sequence) throws Exception {
1:         Session session = connection.createSession(false, Session.AUTO_ACKNOWLEDGE);
1:         Queue queue = session.createQueue(getDestinationName());
1:         MessageProducer producer = session.createProducer(queue);
1: 
1:         byte[] buffer = new byte[MESSAGE_SIZE];
1:         for (count = 0; count < MESSAGE_SIZE; count++) {
1:             String s = String.valueOf(count % 10);
1:             Character c = s.charAt(0);
1:             int value = c.charValue();
1:             buffer[count] = (byte) value;
1:         }
1: 
1:         LOG.debug("Sending {} messages to destination: {}", MESSAGE_COUNT, queue);
1:         for (int i = 1; i <= MESSAGE_COUNT; i++) {
1:             BytesMessage message = session.createBytesMessage();
1:             message.setJMSDeliveryMode(DeliveryMode.PERSISTENT);
1:             message.setStringProperty("JMSXGroupID", JMSX_GROUP_ID);
1:             message.setIntProperty("JMSXGroupSeq", sequence.incrementAndGet());
1:             message.writeBytes(buffer);
1:             producer.send(message);
1:         }
1: 
1:         producer.close();
1:     }
1: }
============================================================================