1:8e59e24: /**
1:8e59e24:  * Licensed to the Apache Software Foundation (ASF) under one or more
1:8e59e24:  * contributor license agreements.  See the NOTICE file distributed with
1:8e59e24:  * this work for additional information regarding copyright ownership.
1:8e59e24:  * The ASF licenses this file to You under the Apache License, Version 2.0
1:8e59e24:  * (the "License"); you may not use this file except in compliance with
1:8e59e24:  * the License.  You may obtain a copy of the License at
1:8e59e24:  *
1:8e59e24:  *      http://www.apache.org/licenses/LICENSE-2.0
1:8e59e24:  *
1:8e59e24:  * Unless required by applicable law or agreed to in writing, software
1:8e59e24:  * distributed under the License is distributed on an "AS IS" BASIS,
1:8e59e24:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:8e59e24:  * See the License for the specific language governing permissions and
1:8e59e24:  * limitations under the License.
1:8e59e24:  */
1:8e59e24: 
1:8e59e24: package org.apache.activemq.bugs;
1:8e59e24: 
1:8e59e24: import java.net.URI;
1:8e59e24: 
1:8e59e24: import javax.jms.Connection;
1:8e59e24: import javax.jms.Destination;
1:8e59e24: import javax.jms.Message;
1:8e59e24: import javax.jms.MessageConsumer;
1:8e59e24: import javax.jms.Session;
1:8e59e24: 
1:8e59e24: import org.apache.activemq.JmsMultipleBrokersTestSupport;
1:8e59e24: import org.apache.activemq.broker.jmx.BrokerView;
1:aef4ccf: import org.apache.activemq.util.Wait;
1:8bf987b: import org.slf4j.Logger;
1:8bf987b: import org.slf4j.LoggerFactory;
1:8e59e24: 
1:8e59e24: public class AMQ2439Test extends JmsMultipleBrokersTestSupport {
1:8bf987b:     private static final Logger LOG = LoggerFactory.getLogger(AMQ2439Test.class);
1:8e59e24:     Destination dest;
1:8e59e24: 
1:8e59e24:     
1:8e59e24:     public void testDuplicatesThroughNetwork() throws Exception {
1:8e59e24:         assertEquals("received expected amount", 500, receiveExactMessages("BrokerB", 500));
1:8e59e24:         assertEquals("received expected amount", 500, receiveExactMessages("BrokerB", 500));
1:8e59e24:         validateQueueStats();
1:8e59e24:     }
1:8e59e24:     
1:8e59e24:     private void validateQueueStats() throws Exception {
1:aef4ccf:        final BrokerView brokerView = brokers.get("BrokerA").broker.getAdminView();
1:8e59e24:        assertEquals("enequeue is correct", 1000, brokerView.getTotalEnqueueCount());
1:aef4ccf:        
1:aef4ccf:        assertTrue("dequeue is correct", Wait.waitFor(new Wait.Condition() {
1:aef4ccf:            public boolean isSatisified() throws Exception {
1:05f82a9:                LOG.info("dequeue count (want 1000), is : " + brokerView.getTotalDequeueCount());
1:aef4ccf:                return 1000 == brokerView.getTotalDequeueCount();
1:aef4ccf:            }
1:aef4ccf:        }));
1:8e59e24:     }
1:8e59e24: 
1:8e59e24:     protected int receiveExactMessages(String brokerName, int msgCount) throws Exception {
1:8e59e24:         
1:8e59e24:         BrokerItem brokerItem = brokers.get(brokerName);
1:8e59e24:         Connection connection = brokerItem.createConnection();
1:8e59e24:         connection.start();
1:8e59e24:         Session session = connection.createSession(false, Session.AUTO_ACKNOWLEDGE);       
1:8e59e24:         MessageConsumer consumer = session.createConsumer(dest);
1:8e59e24:         
1:8e59e24:         Message msg;
1:8e59e24:         int i;
1:8e59e24:         for (i = 0; i < msgCount; i++) {
1:8e59e24:             msg = consumer.receive(1000);
1:8e59e24:             if (msg == null) {
1:8e59e24:                 break;
1:8e59e24:             }
1:8e59e24:         }
1:8e59e24: 
1:8e59e24:         connection.close();
1:8e59e24:         brokerItem.connections.remove(connection);
1:8e59e24:         
1:8e59e24:         return i;
1:8e59e24:     }
1:8e59e24:     
1:8e59e24:     public void setUp() throws Exception {
1:8e59e24:         super.setUp();
1:8e59e24:         createBroker(new URI("broker:(tcp://localhost:61616)/BrokerA?persistent=true&deleteAllMessagesOnStartup=true&advisorySupport=false"));
1:8e59e24:         createBroker(new URI("broker:(tcp://localhost:61617)/BrokerB?persistent=true&deleteAllMessagesOnStartup=true&useJmx=false"));
1:8e59e24:         bridgeBrokers("BrokerA", "BrokerB");
1:8e59e24:         
1:8e59e24:         startAllBrokers();
1:8e59e24:         
1:8e59e24:         // Create queue
1:8e59e24:         dest = createDestination("TEST.FOO", false);
1:8e59e24:         sendMessages("BrokerA", dest, 1000);
1:8e59e24:     }   
1:8e59e24: }
============================================================================
author:Timothy A. Bish
-------------------------------------------------------------------------------
commit:ef24cc9
author:Bosanac Dejan
-------------------------------------------------------------------------------
commit:8bf987b
/////////////////////////////////////////////////////////////////////////
1: import org.slf4j.Logger;
1: import org.slf4j.LoggerFactory;
1:     private static final Logger LOG = LoggerFactory.getLogger(AMQ2439Test.class);
author:Gary Tully
-------------------------------------------------------------------------------
commit:05f82a9
/////////////////////////////////////////////////////////////////////////
0: import org.apache.commons.logging.Log;
0: import org.apache.commons.logging.LogFactory;
0:     private static final Log LOG = LogFactory.getLog(AMQ2439Test.class);
/////////////////////////////////////////////////////////////////////////
1:                LOG.info("dequeue count (want 1000), is : " + brokerView.getTotalDequeueCount());
commit:aef4ccf
/////////////////////////////////////////////////////////////////////////
1: import org.apache.activemq.util.Wait;
/////////////////////////////////////////////////////////////////////////
1:        final BrokerView brokerView = brokers.get("BrokerA").broker.getAdminView();
1:        
1:        assertTrue("dequeue is correct", Wait.waitFor(new Wait.Condition() {
1:            public boolean isSatisified() throws Exception {
1:                return 1000 == brokerView.getTotalDequeueCount();
1:            }
1:        }));
commit:8e59e24
/////////////////////////////////////////////////////////////////////////
1: /**
1:  * Licensed to the Apache Software Foundation (ASF) under one or more
1:  * contributor license agreements.  See the NOTICE file distributed with
1:  * this work for additional information regarding copyright ownership.
1:  * The ASF licenses this file to You under the Apache License, Version 2.0
1:  * (the "License"); you may not use this file except in compliance with
1:  * the License.  You may obtain a copy of the License at
1:  *
1:  *      http://www.apache.org/licenses/LICENSE-2.0
1:  *
1:  * Unless required by applicable law or agreed to in writing, software
1:  * distributed under the License is distributed on an "AS IS" BASIS,
1:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:  * See the License for the specific language governing permissions and
1:  * limitations under the License.
1:  */
1: 
1: package org.apache.activemq.bugs;
1: 
1: import java.net.URI;
1: 
1: import javax.jms.Connection;
1: import javax.jms.Destination;
1: import javax.jms.Message;
1: import javax.jms.MessageConsumer;
1: import javax.jms.Session;
1: 
1: import org.apache.activemq.JmsMultipleBrokersTestSupport;
1: import org.apache.activemq.broker.jmx.BrokerView;
1: 
1: public class AMQ2439Test extends JmsMultipleBrokersTestSupport {
1:     Destination dest;
1: 
1:     
1:     public void testDuplicatesThroughNetwork() throws Exception {
1:         assertEquals("received expected amount", 500, receiveExactMessages("BrokerB", 500));
1:         assertEquals("received expected amount", 500, receiveExactMessages("BrokerB", 500));
1:         validateQueueStats();
1:     }
1:     
1:     private void validateQueueStats() throws Exception {
0:        BrokerView brokerView = brokers.get("BrokerA").broker.getAdminView();
1:        assertEquals("enequeue is correct", 1000, brokerView.getTotalEnqueueCount());
0:        assertEquals("dequeue is correct", 1000, brokerView.getTotalDequeueCount());
1:     }
1: 
1:     protected int receiveExactMessages(String brokerName, int msgCount) throws Exception {
1:         
1:         BrokerItem brokerItem = brokers.get(brokerName);
1:         Connection connection = brokerItem.createConnection();
1:         connection.start();
1:         Session session = connection.createSession(false, Session.AUTO_ACKNOWLEDGE);       
1:         MessageConsumer consumer = session.createConsumer(dest);
1:         
1:         Message msg;
1:         int i;
1:         for (i = 0; i < msgCount; i++) {
1:             msg = consumer.receive(1000);
1:             if (msg == null) {
1:                 break;
1:             }
1:         }
1: 
1:         connection.close();
1:         brokerItem.connections.remove(connection);
1:         
1:         return i;
1:     }
1:     
1:     public void setUp() throws Exception {
1:         super.setUp();
1:         createBroker(new URI("broker:(tcp://localhost:61616)/BrokerA?persistent=true&deleteAllMessagesOnStartup=true&advisorySupport=false"));
1:         createBroker(new URI("broker:(tcp://localhost:61617)/BrokerB?persistent=true&deleteAllMessagesOnStartup=true&useJmx=false"));
1:         bridgeBrokers("BrokerA", "BrokerB");
1:         
1:         startAllBrokers();
1:         
1:         // Create queue
1:         dest = createDestination("TEST.FOO", false);
1:         sendMessages("BrokerA", dest, 1000);
1:     }   
1: }
============================================================================