1:8b04e15: /**
1:57b4941:  * Licensed to the Apache Software Foundation (ASF) under one or more
1:57b4941:  * contributor license agreements.  See the NOTICE file distributed with
1:57b4941:  * this work for additional information regarding copyright ownership.
1:57b4941:  * The ASF licenses this file to You under the Apache License, Version 2.0
1:57b4941:  * (the "License"); you may not use this file except in compliance with
1:57b4941:  * the License.  You may obtain a copy of the License at
4:8b04e15:  *
1:230a86c:  *      http://www.apache.org/licenses/LICENSE-2.0
1:8b04e15:  *
1:8b04e15:  * Unless required by applicable law or agreed to in writing, software
1:8b04e15:  * distributed under the License is distributed on an "AS IS" BASIS,
1:8b04e15:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:8b04e15:  * See the License for the specific language governing permissions and
1:8b04e15:  * limitations under the License.
1:8b04e15:  */
1:8b04e15: package org.apache.activemq.broker.ft;
1:230a86c: 
1:a70f96b: import java.io.File;
1:67d38fa: import java.util.concurrent.CountDownLatch;
1:67d38fa: import java.util.concurrent.TimeUnit;
1:67d38fa: import java.util.concurrent.atomic.AtomicReference;
1:6a67092: 
1:b5e46ef: import javax.jms.Message;
1:b6f63b0: import javax.jms.MessageConsumer;
1:b6f63b0: import javax.jms.TextMessage;
1:6a67092: 
1:8b04e15: import org.apache.activemq.ActiveMQConnectionFactory;
1:8b04e15: import org.apache.activemq.JmsTopicSendReceiveWithTwoConnectionsTest;
1:b5e46ef: import org.apache.activemq.advisory.AdvisorySupport;
1:8b04e15: import org.apache.activemq.broker.BrokerService;
1:b6f63b0: import org.apache.activemq.command.ActiveMQQueue;
1:b6f63b0: import org.apache.activemq.command.ActiveMQTopic;
1:c07d6c8: import org.apache.activemq.util.Wait;
1:8b04e15: import org.apache.activemq.xbean.BrokerFactoryBean;
1:8bf987b: import org.slf4j.Logger;
1:8bf987b: import org.slf4j.LoggerFactory;
1:8b04e15: import org.springframework.core.io.ClassPathResource;
1:67d38fa: 
1:8b04e15: /**
1:230a86c:  * Test failover for Queues
1:8b04e15:  */
1:1877a14: abstract public class QueueMasterSlaveTestSupport extends JmsTopicSendReceiveWithTwoConnectionsTest {
1:1877a14:     private static final transient Logger LOG = LoggerFactory.getLogger(QueueMasterSlaveTestSupport.class);
1:67d38fa: 
1:8b04e15:     protected BrokerService master;
1:67d38fa:     protected AtomicReference<BrokerService> slave = new AtomicReference<BrokerService>();
1:9ad65c6:     protected CountDownLatch slaveStarted;
1:230a86c:     protected int inflightMessageCount;
1:8b04e15:     protected int failureCount = 50;
1:fb62989:     protected String uriString = "failover://(tcp://localhost:62001,tcp://localhost:62002)?randomize=false&useExponentialBackOff=false";
9:8b04e15: 
1:d75e418:     @Override
1:230a86c:     protected void setUp() throws Exception {
1:9ad65c6:         slaveStarted = new CountDownLatch(1);
1:9ad65c6:         slave.set(null);
1:6a67092:         setMaxTestTime(TimeUnit.MINUTES.toMillis(10));
1:6a67092:         setAutoFail(true);
1:230a86c:         if (System.getProperty("basedir") == null) {
1:230a86c:             File file = new File(".");
1:230a86c:             System.setProperty("basedir", file.getAbsolutePath());
1:a70f96b:         }
1:3f4d4a5:         super.messageCount = 500;
1:230a86c:         failureCount = super.messageCount / 2;
1:8b04e15:         super.topic = isTopic();
1:1c4ef90:         createMaster();
1:1c4ef90:         createSlave();
1:8b04e15:         // wait for thing to connect
1:e733f71:         Thread.sleep(1000);
1:8b04e15:         super.setUp();
1:8b04e15:     }
1:1c4ef90: 
1:ee2462d:     protected String getSlaveXml() {
1:ee2462d:         return "org/apache/activemq/broker/ft/slave.xml";
1:ee2462d:     }
1:1c4ef90: 
1:ee2462d:     protected String getMasterXml() {
1:ee2462d:         return "org/apache/activemq/broker/ft/master.xml";
1:ee2462d:     }
1:8b04e15: 
1:d75e418:     @Override
1:230a86c:     protected void tearDown() throws Exception {
1:8b04e15:         super.tearDown();
1:fc0b359:         master.stop();
1:fc0b359:         master.waitUntilStopped();
1:b969358:         slaveStarted.await(60, TimeUnit.SECONDS);
1:67d38fa:         BrokerService brokerService = slave.get();
1:67d38fa:         if( brokerService!=null ) {
1:6a67092:             brokerService.stop();
1:67d38fa:         }
1:8b04e15:         master.stop();
1:8b04e15:     }
1:8b04e15: 
1:d75e418:     @Override
1:230a86c:     protected ActiveMQConnectionFactory createConnectionFactory() throws Exception {
1:8b04e15:         return new ActiveMQConnectionFactory(uriString);
1:8b04e15:     }
1:230a86c: 
1:d75e418:     @Override
1:230a86c:     protected void messageSent() throws Exception {
1:5a81bbb:         if (++inflightMessageCount == failureCount) {
1:8b04e15:             Thread.sleep(1000);
1:230a86c:             LOG.error("MASTER STOPPED!@!!!!");
1:8b04e15:             master.stop();
1:8b04e15:         }
1:8b04e15:     }
1:230a86c: 
1:230a86c:     protected boolean isTopic() {
1:8b04e15:         return false;
1:8b04e15:     }
1:6a67092: 
1:1c4ef90:     protected void createMaster() throws Exception {
1:6a67092:         BrokerFactoryBean brokerFactory = new BrokerFactoryBean(new ClassPathResource(getMasterXml()));
1:6a67092:         brokerFactory.afterPropertiesSet();
1:6a67092:         master = brokerFactory.getBroker();
1:6a67092:         master.start();
1:1c4ef90:     }
1:6a67092: 
1:1c4ef90:     protected void createSlave() throws Exception {
1:6a67092:         BrokerFactoryBean brokerFactory = new BrokerFactoryBean(new ClassPathResource(getSlaveXml()));
1:67d38fa:         brokerFactory.afterPropertiesSet();
1:67d38fa:         BrokerService broker = brokerFactory.getBroker();
1:67d38fa:         broker.start();
1:67d38fa:         slave.set(broker);
1:67d38fa:         slaveStarted.countDown();
1:1c4ef90:     }
1:b6f63b0: 
1:b6f63b0:     public void testVirtualTopicFailover() throws Exception {
1:b6f63b0: 
1:c35550f:         MessageConsumer qConsumer = session.createConsumer(new ActiveMQQueue("Consumer.A.VirtualTopic.TA1"));
1:b6f63b0:         assertNull("No message there yet", qConsumer.receive(1000));
1:b6f63b0:         qConsumer.close();
1:62ab556:         assertTrue("master is indeed the master", !master.isSlave());
1:b6f63b0:         master.stop();
1:b969358:         assertTrue("slave started", slaveStarted.await(60, TimeUnit.SECONDS));
1:d75e418:         assertTrue(!slave.get().isSlave());
1:b6f63b0: 
1:c07d6c8:         LOG.info("Sending post failover message to VT");
1:c07d6c8: 
1:b6f63b0:         final String text = "ForUWhenSlaveKicksIn";
1:b6f63b0:         producer.send(new ActiveMQTopic("VirtualTopic.TA1"), session.createTextMessage(text));
1:b6f63b0: 
1:c07d6c8:         // dest must survive failover - consumer created after send
1:c35550f:         qConsumer = session.createConsumer(new ActiveMQQueue("Consumer.A.VirtualTopic.TA1"));
1:d75e418: 
1:c07d6c8:         javax.jms.Message message = qConsumer.receive(10000);
1:b6f63b0:         assertNotNull("Get message after failover", message);
1:b6f63b0:         assertEquals("correct message", text, ((TextMessage)message).getText());
1:b6f63b0:     }
1:b5e46ef: 
1:b5e46ef:     public void testAdvisory() throws Exception {
1:c07d6c8:         final MessageConsumer advConsumer = session.createConsumer(AdvisorySupport.getMasterBrokerAdvisoryTopic());
1:c07d6c8:         final Message[] advisoryMessage = new Message[1];
1:c07d6c8:         advisoryMessage[0] = advConsumer.receive(5000);
1:c07d6c8:         LOG.info("received " + advisoryMessage[0]);
1:c07d6c8:         assertNotNull("Didn't received advisory", advisoryMessage[0]);
1:b5e46ef: 
1:b5e46ef:         master.stop();
1:b969358:         assertTrue("slave started", slaveStarted.await(60, TimeUnit.SECONDS));
1:fb62989:         LOG.info("slave started");
1:c07d6c8:         Wait.waitFor(new Wait.Condition() {
1:c07d6c8:             @Override
1:c07d6c8:             public boolean isSatisified() throws Exception {
1:c07d6c8:                 advisoryMessage[0] = advConsumer.receive(500);
1:c07d6c8:                 return advisoryMessage[0] != null;
1:c07d6c8:             }
1:c07d6c8:         });
1:c07d6c8:         LOG.info("received " + advisoryMessage[0]);
1:c07d6c8:         assertNotNull("Didn't received advisory", advisoryMessage[0]);
1:b5e46ef: 
1:b5e46ef:     }
1:8b04e15: }
============================================================================
author:gtully
-------------------------------------------------------------------------------
commit:62ab556
/////////////////////////////////////////////////////////////////////////
1:         assertTrue("master is indeed the master", !master.isSlave());
commit:c07d6c8
/////////////////////////////////////////////////////////////////////////
1: import org.apache.activemq.util.Wait;
/////////////////////////////////////////////////////////////////////////
1:         LOG.info("Sending post failover message to VT");
1: 
1:         // dest must survive failover - consumer created after send
1:         javax.jms.Message message = qConsumer.receive(10000);
1:         final MessageConsumer advConsumer = session.createConsumer(AdvisorySupport.getMasterBrokerAdvisoryTopic());
1:         final Message[] advisoryMessage = new Message[1];
1:         advisoryMessage[0] = advConsumer.receive(5000);
1:         LOG.info("received " + advisoryMessage[0]);
1:         assertNotNull("Didn't received advisory", advisoryMessage[0]);
1:         Wait.waitFor(new Wait.Condition() {
1:             @Override
1:             public boolean isSatisified() throws Exception {
1:                 advisoryMessage[0] = advConsumer.receive(500);
1:                 return advisoryMessage[0] != null;
1:             }
1:         });
1:         LOG.info("received " + advisoryMessage[0]);
1:         assertNotNull("Didn't received advisory", advisoryMessage[0]);
commit:9ad65c6
/////////////////////////////////////////////////////////////////////////
1:     protected CountDownLatch slaveStarted;
1:         slaveStarted = new CountDownLatch(1);
1:         slave.set(null);
/////////////////////////////////////////////////////////////////////////
0:         javax.jms.Message message = qConsumer.receive(20000);
0:         Message advisoryMessage = advConsumer.receive(5000);
0:         LOG.info("received " + advisoryMessage);
0:         assertNotNull("Didn't received advisory", advisoryMessage);
0:         advisoryMessage = advConsumer.receive(20000);
author:Dejan Bosanac
-------------------------------------------------------------------------------
commit:b969358
/////////////////////////////////////////////////////////////////////////
1:         slaveStarted.await(60, TimeUnit.SECONDS);
/////////////////////////////////////////////////////////////////////////
1:         assertTrue("slave started", slaveStarted.await(60, TimeUnit.SECONDS));
/////////////////////////////////////////////////////////////////////////
1:         assertTrue("slave started", slaveStarted.await(60, TimeUnit.SECONDS));
author:Timothy A. Bish
-------------------------------------------------------------------------------
commit:d75e418
/////////////////////////////////////////////////////////////////////////
1:     @Override
/////////////////////////////////////////////////////////////////////////
1:     @Override
/////////////////////////////////////////////////////////////////////////
1:     @Override
1:     @Override
/////////////////////////////////////////////////////////////////////////
0:         assertTrue(!master.isSlave());
1:         assertTrue(!slave.get().isSlave());
1: 
commit:ef24cc9
commit:6a67092
/////////////////////////////////////////////////////////////////////////
1: 
/////////////////////////////////////////////////////////////////////////
1:         setMaxTestTime(TimeUnit.MINUTES.toMillis(10));
1:         setAutoFail(true);
/////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////
1: 
0:         slaveStarted.await(5, TimeUnit.SECONDS);
1:             brokerService.stop();
/////////////////////////////////////////////////////////////////////////
1: 
1:         BrokerFactoryBean brokerFactory = new BrokerFactoryBean(new ClassPathResource(getMasterXml()));
1:         brokerFactory.afterPropertiesSet();
1:         master = brokerFactory.getBroker();
1:         master.start();
1: 
1:         BrokerFactoryBean brokerFactory = new BrokerFactoryBean(new ClassPathResource(getSlaveXml()));
author:Hiram R. Chirino
-------------------------------------------------------------------------------
commit:1877a14
/////////////////////////////////////////////////////////////////////////
1: abstract public class QueueMasterSlaveTestSupport extends JmsTopicSendReceiveWithTwoConnectionsTest {
1:     private static final transient Logger LOG = LoggerFactory.getLogger(QueueMasterSlaveTestSupport.class);
commit:67d38fa
/////////////////////////////////////////////////////////////////////////
1: import java.util.concurrent.CountDownLatch;
1: import java.util.concurrent.TimeUnit;
1: import java.util.concurrent.atomic.AtomicReference;
1: 
/////////////////////////////////////////////////////////////////////////
1:     protected AtomicReference<BrokerService> slave = new AtomicReference<BrokerService>();
0:     protected CountDownLatch slaveStarted = new CountDownLatch(1);
/////////////////////////////////////////////////////////////////////////
1:         
0:     	slaveStarted.await(5, TimeUnit.SECONDS);
1:         BrokerService brokerService = slave.get();
1:         if( brokerService!=null ) {
0:         	brokerService.stop();
1:         }
/////////////////////////////////////////////////////////////////////////
0: 		BrokerFactoryBean brokerFactory = new BrokerFactoryBean(new ClassPathResource(getMasterXml()));
1: 		brokerFactory.afterPropertiesSet();
0: 		master = brokerFactory.getBroker();
0: 		master.start();
0:     	BrokerFactoryBean brokerFactory = new BrokerFactoryBean(new ClassPathResource(getSlaveXml()));
1:         BrokerService broker = brokerFactory.getBroker();
1:         broker.start();
1:         slave.set(broker);
1:         slaveStarted.countDown();
commit:230a86c
/////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////
1:  *      http://www.apache.org/licenses/LICENSE-2.0
/////////////////////////////////////////////////////////////////////////
1:  * Test failover for Queues
0: public class QueueMasterSlaveTest extends JmsTopicSendReceiveWithTwoConnectionsTest {
0:     private static final transient Log LOG = LogFactory.getLog(QueueMasterSlaveTest.class);
1: 
1:     protected int inflightMessageCount;
0:     protected String uriString = "failover://(tcp://localhost:62001,tcp://localhost:62002)?randomize=false";
1:     protected void setUp() throws Exception {
1:         if (System.getProperty("basedir") == null) {
1:             File file = new File(".");
1:             System.setProperty("basedir", file.getAbsolutePath());
1:         failureCount = super.messageCount / 2;
0:         BrokerFactoryBean brokerFactory = new BrokerFactoryBean(new ClassPathResource(getMasterXml()));
0:         master = brokerFactory.getBroker();
0:         brokerFactory = new BrokerFactoryBean(new ClassPathResource(getSlaveXml()));
0:         slave = brokerFactory.getBroker();
/////////////////////////////////////////////////////////////////////////
1:     protected void tearDown() throws Exception {
1:     protected ActiveMQConnectionFactory createConnectionFactory() throws Exception {
1: 
1:     protected void messageSent() throws Exception {
0:         if (++inflightMessageCount >= failureCount) {
1:             LOG.error("MASTER STOPPED!@!!!!");
1: 
1:     protected boolean isTopic() {
commit:57b4941
/////////////////////////////////////////////////////////////////////////
1:  * Licensed to the Apache Software Foundation (ASF) under one or more
1:  * contributor license agreements.  See the NOTICE file distributed with
1:  * this work for additional information regarding copyright ownership.
1:  * The ASF licenses this file to You under the Apache License, Version 2.0
1:  * (the "License"); you may not use this file except in compliance with
1:  * the License.  You may obtain a copy of the License at
author:Gary Tully
-------------------------------------------------------------------------------
commit:fb62989
/////////////////////////////////////////////////////////////////////////
1:     protected String uriString = "failover://(tcp://localhost:62001,tcp://localhost:62002)?randomize=false&useExponentialBackOff=false";
/////////////////////////////////////////////////////////////////////////
1:         LOG.info("slave started");
0:         LOG.info("received " + advisoryMessage);
commit:0a5ce71
/////////////////////////////////////////////////////////////////////////
0:         assertTrue("slave started", slaveStarted.await(15, TimeUnit.SECONDS));
commit:c35550f
/////////////////////////////////////////////////////////////////////////
1:         MessageConsumer qConsumer = session.createConsumer(new ActiveMQQueue("Consumer.A.VirtualTopic.TA1"));
/////////////////////////////////////////////////////////////////////////
1:         qConsumer = session.createConsumer(new ActiveMQQueue("Consumer.A.VirtualTopic.TA1"));
commit:b6f63b0
/////////////////////////////////////////////////////////////////////////
1: import javax.jms.MessageConsumer;
1: import javax.jms.TextMessage;
1: import org.apache.activemq.command.ActiveMQQueue;
1: import org.apache.activemq.command.ActiveMQTopic;
/////////////////////////////////////////////////////////////////////////
1: 
1:     public void testVirtualTopicFailover() throws Exception {
1: 
0:         MessageConsumer qConsumer = createConsumer(session, new ActiveMQQueue("Consumer.A.VirtualTopic.TA1"));
1:         assertNull("No message there yet", qConsumer.receive(1000));
1:         qConsumer.close();
1:         master.stop();
0:         assertTrue("slave started", slaveStarted.await(10, TimeUnit.SECONDS));
1: 
1:         final String text = "ForUWhenSlaveKicksIn";
1:         producer.send(new ActiveMQTopic("VirtualTopic.TA1"), session.createTextMessage(text));
1: 
0:         qConsumer = createConsumer(session, new ActiveMQQueue("Consumer.A.VirtualTopic.TA1"));
0:         javax.jms.Message message = qConsumer.receive(4000);
1:         assertNotNull("Get message after failover", message);
1:         assertEquals("correct message", text, ((TextMessage)message).getText());
1:     }
commit:5a81bbb
/////////////////////////////////////////////////////////////////////////
1:         if (++inflightMessageCount == failureCount) {
author:Bosanac Dejan
-------------------------------------------------------------------------------
commit:b5e46ef
/////////////////////////////////////////////////////////////////////////
1: import javax.jms.Message;
1: import org.apache.activemq.advisory.AdvisorySupport;
/////////////////////////////////////////////////////////////////////////
1: 
1:     public void testAdvisory() throws Exception {
0:         MessageConsumer advConsumer = session.createConsumer(AdvisorySupport.getMasterBrokerAdvisoryTopic());
1: 
1:         master.stop();
0:         assertTrue("slave started", slaveStarted.await(15, TimeUnit.SECONDS));
0:         Message advisoryMessage = advConsumer.receive(5000);
0:         assertNotNull("Didn't received advisory", advisoryMessage);
1: 
1:     }
commit:fc0b359
/////////////////////////////////////////////////////////////////////////
1:         master.stop();
1:         master.waitUntilStopped();
commit:8bf987b
/////////////////////////////////////////////////////////////////////////
1: import org.slf4j.Logger;
1: import org.slf4j.LoggerFactory;
0:     private static final transient Logger LOG = LoggerFactory.getLogger(QueueMasterSlaveTest.class);
author:Robert Davies
-------------------------------------------------------------------------------
commit:3f4d4a5
/////////////////////////////////////////////////////////////////////////
1:         super.messageCount = 500;
commit:92bbce1
/////////////////////////////////////////////////////////////////////////
commit:1c4ef90
/////////////////////////////////////////////////////////////////////////
0:         messageCount = 10000;
1:         createMaster();
1:         createSlave();
/////////////////////////////////////////////////////////////////////////
1:     
1:     protected void createMaster() throws Exception {
0:         BrokerFactoryBean brokerFactory = new BrokerFactoryBean(new ClassPathResource(getMasterXml()));
0:         brokerFactory.afterPropertiesSet();
0:         master = brokerFactory.getBroker();
0:         master.start();
1:     }
1:     
1:     protected void createSlave() throws Exception {
0:         BrokerFactoryBean brokerFactory = new BrokerFactoryBean(new ClassPathResource(getSlaveXml()));
0:         brokerFactory.afterPropertiesSet();
0:         slave = brokerFactory.getBroker();
0:         slave.start();
1:     }
commit:985b4ce
/////////////////////////////////////////////////////////////////////////
0:             System.err.println("MASTER STOPPED!@!!!!");
commit:a70f96b
/////////////////////////////////////////////////////////////////////////
1: import java.io.File;
/////////////////////////////////////////////////////////////////////////
0:         if(System.getProperty("basedir")==null){
0:             File file=new File(".");
0:             System.setProperty("basedir",file.getAbsolutePath());
1:         }
commit:e733f71
/////////////////////////////////////////////////////////////////////////
1:             Thread.sleep(1000);
commit:8b04e15
/////////////////////////////////////////////////////////////////////////
1: /**
1:  *
0:  * Copyright 2005-2006 The Apache Software Foundation
1:  *
0:  * Licensed under the Apache License, Version 2.0 (the "License");
0:  * you may not use this file except in compliance with the License.
0:  * You may obtain a copy of the License at
1:  *
0:  * http://www.apache.org/licenses/LICENSE-2.0
1:  *
1:  * Unless required by applicable law or agreed to in writing, software
1:  * distributed under the License is distributed on an "AS IS" BASIS,
1:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:  * See the License for the specific language governing permissions and
1:  * limitations under the License.
1:  */
1: package org.apache.activemq.broker.ft;
1: 
1: import org.apache.activemq.ActiveMQConnectionFactory;
1: import org.apache.activemq.JmsTopicSendReceiveWithTwoConnectionsTest;
1: import org.apache.activemq.broker.BrokerService;
1: import org.apache.activemq.xbean.BrokerFactoryBean;
1: import org.springframework.core.io.ClassPathResource;
1: 
1: /**
0:  *Test failover for Queues
1:  *
1:  */
0: public class QueueMasterSlaveTest extends JmsTopicSendReceiveWithTwoConnectionsTest{
1: 
1:    
1:    
1:     protected BrokerService master;
0:     protected BrokerService slave;
0:     protected int inflightMessageCount = 0;
1:     protected int failureCount = 50;
0:     protected String uriString="failover://(tcp://localhost:62001,tcp://localhost:62002)?randomize=false";
1: 
0:     protected void setUp() throws Exception{
0:         failureCount = super.messageCount/2;
1:         super.topic = isTopic();
0:         BrokerFactoryBean brokerFactory=new BrokerFactoryBean(new ClassPathResource("org/apache/activemq/broker/ft/master.xml"));
0:         brokerFactory.afterPropertiesSet();
0:         master=brokerFactory.getBroker();
0:         brokerFactory=new BrokerFactoryBean(new ClassPathResource("org/apache/activemq/broker/ft/slave.xml"));
0:         brokerFactory.afterPropertiesSet();
0:         slave=brokerFactory.getBroker();
0:         master.start();
0:         slave.start();
1:         // wait for thing to connect
1:         Thread.sleep(1000);
1:         super.setUp();
1: 
1:     }
1: 
0:     protected void tearDown() throws Exception{
1:         super.tearDown();
0:         slave.stop();
1:         master.stop();
1:     }
1: 
0:     protected ActiveMQConnectionFactory createConnectionFactory() throws Exception{
1:         return new ActiveMQConnectionFactory(uriString);
1:     }
1:     
0:     protected void messageSent() throws Exception{
0:         if (++inflightMessageCount >= failureCount){
0:             inflightMessageCount = 0;
1:             master.stop();
1:         }
1:     }
1:     
0:     protected boolean isTopic(){
1:         return false;
1:     }
1: }
author:James Strachan
-------------------------------------------------------------------------------
commit:b19f17c
/////////////////////////////////////////////////////////////////////////
0: import org.apache.commons.logging.Log;
0: import org.apache.commons.logging.LogFactory;
/////////////////////////////////////////////////////////////////////////
0:     private static final transient Log log = LogFactory.getLog(QueueMasterSlaveTest.class);
/////////////////////////////////////////////////////////////////////////
0:             log.error("MASTER STOPPED!@!!!!");
commit:ee2462d
/////////////////////////////////////////////////////////////////////////
0:         BrokerFactoryBean brokerFactory=new BrokerFactoryBean(new ClassPathResource(getMasterXml()));
0:         brokerFactory=new BrokerFactoryBean(new ClassPathResource(getSlaveXml()));
/////////////////////////////////////////////////////////////////////////
1:     protected String getSlaveXml() {
1:         return "org/apache/activemq/broker/ft/slave.xml";
1:     }
0: 
1:     protected String getMasterXml() {
1:         return "org/apache/activemq/broker/ft/master.xml";
1:     }
0: 
============================================================================