1:1c5ecb3: /**
1:57b4941:  * Licensed to the Apache Software Foundation (ASF) under one or more
1:57b4941:  * contributor license agreements.  See the NOTICE file distributed with
1:57b4941:  * this work for additional information regarding copyright ownership.
1:57b4941:  * The ASF licenses this file to You under the Apache License, Version 2.0
1:57b4941:  * (the "License"); you may not use this file except in compliance with
1:57b4941:  * the License.  You may obtain a copy of the License at
3:1c5ecb3:  *
1:230a86c:  *      http://www.apache.org/licenses/LICENSE-2.0
1:1c5ecb3:  *
1:1c5ecb3:  * Unless required by applicable law or agreed to in writing, software
1:1c5ecb3:  * distributed under the License is distributed on an "AS IS" BASIS,
1:1c5ecb3:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:1c5ecb3:  * See the License for the specific language governing permissions and
1:1c5ecb3:  * limitations under the License.
1:1c5ecb3:  */
1:e6954f1: package org.apache.activemq.transport.reliable;
1:8704338: 
1:1c5ecb3: 
1:1c5ecb3: import java.io.IOException;
1:1c5ecb3: 
1:1c5ecb3: /**
1:1c5ecb3:  * A pluggable strategy for how to deal with dropped packets.
1:0bbc0ac:  * 
1:1c5ecb3:  * 
1:1c5ecb3:  */
1:8704338: public interface ReplayStrategy {
1:1c5ecb3: 
1:65fdf07:     /**
1:65fdf07:      * Deals with a dropped packet. 
1:65fdf07:      * 
1:65fdf07:      * @param transport the transport on which the packet was dropped
1:65fdf07:      * @param expectedCounter the expected command counter
1:65fdf07:      * @param actualCounter the actual command counter
1:f3ef1a9:      * @param nextAvailableCounter TODO
1:65fdf07:      * @return true if the command should be buffered or false if it should be discarded
1:65fdf07:      */
1:f3ef1a9:     boolean onDroppedPackets(ReliableTransport transport, int expectedCounter, int actualCounter, int nextAvailableCounter) throws IOException;
1:1c5ecb3: 
1:8704338:     void onReceivedPacket(ReliableTransport transport, long expectedCounter);
1:1c5ecb3: 
1:1c5ecb3: }
1:4446d55: 
============================================================================
author:Hiram R. Chirino
-------------------------------------------------------------------------------
commit:9a8f6e4
commit:0bbc0ac
/////////////////////////////////////////////////////////////////////////
1:  * 
commit:230a86c
/////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////
1:  *      http://www.apache.org/licenses/LICENSE-2.0
commit:57b4941
/////////////////////////////////////////////////////////////////////////
1:  * Licensed to the Apache Software Foundation (ASF) under one or more
1:  * contributor license agreements.  See the NOTICE file distributed with
1:  * this work for additional information regarding copyright ownership.
1:  * The ASF licenses this file to You under the Apache License, Version 2.0
1:  * (the "License"); you may not use this file except in compliance with
1:  * the License.  You may obtain a copy of the License at
author:James Strachan
-------------------------------------------------------------------------------
commit:f3ef1a9
/////////////////////////////////////////////////////////////////////////
1:      * @param nextAvailableCounter TODO
1:     boolean onDroppedPackets(ReliableTransport transport, int expectedCounter, int actualCounter, int nextAvailableCounter) throws IOException;
commit:65fdf07
/////////////////////////////////////////////////////////////////////////
1:     /**
1:      * Deals with a dropped packet. 
1:      * 
1:      * @param transport the transport on which the packet was dropped
1:      * @param expectedCounter the expected command counter
1:      * @param actualCounter the actual command counter
1:      * @return true if the command should be buffered or false if it should be discarded
1:      */
0:     boolean onDroppedPackets(ReliableTransport transport, int expectedCounter, int actualCounter) throws IOException;
commit:e6954f1
/////////////////////////////////////////////////////////////////////////
1: package org.apache.activemq.transport.reliable;
/////////////////////////////////////////////////////////////////////////
0:     void onDroppedPackets(ReliableTransport transport, int expectedCounter, int actualCounter) throws IOException;
commit:8704338
/////////////////////////////////////////////////////////////////////////
0: package org.apache.activemq.transport.replay;
1: 
0: import org.apache.activemq.transport.ReliableTransport;
/////////////////////////////////////////////////////////////////////////
1: public interface ReplayStrategy {
0:     void onDroppedPackets(ReliableTransport transport, long expectedCounter, long actualCounter) throws IOException;
1:     void onReceivedPacket(ReliableTransport transport, long expectedCounter);
commit:4446d55
/////////////////////////////////////////////////////////////////////////
0:     void onDroppedPackets(String name, long expectedCounter, long actualCounter) throws IOException;
0:     void onReceivedPacket(String name, long expectedCounter);
1: 
commit:1c5ecb3
/////////////////////////////////////////////////////////////////////////
1: /**
1:  *
0:  * Copyright 2005-2006 The Apache Software Foundation
1:  *
0:  * Licensed under the Apache License, Version 2.0 (the "License");
0:  * you may not use this file except in compliance with the License.
0:  * You may obtain a copy of the License at
1:  *
0:  * http://www.apache.org/licenses/LICENSE-2.0
1:  *
1:  * Unless required by applicable law or agreed to in writing, software
1:  * distributed under the License is distributed on an "AS IS" BASIS,
1:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:  * See the License for the specific language governing permissions and
1:  * limitations under the License.
1:  */
0: package org.apache.activemq.transport.udp.replay;
1: 
1: import java.io.IOException;
1: 
1: /**
1:  * A pluggable strategy for how to deal with dropped packets.
1:  * 
0:  * @version $Revision$
1:  */
0: public interface DatagramReplayStrategy {
1: 
0:     void onDroppedPackets(long expectedCounter, long actualCounter) throws IOException;
1: 
0:     void onReceivedPacket(long expectedCounter);
1: 
1: }
============================================================================