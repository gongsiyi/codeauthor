1:456a2ba: /**
1:456a2ba:  * Licensed to the Apache Software Foundation (ASF) under one or more
1:456a2ba:  * contributor license agreements.  See the NOTICE file distributed with
1:456a2ba:  * this work for additional information regarding copyright ownership.
1:456a2ba:  * The ASF licenses this file to You under the Apache License, Version 2.0
1:456a2ba:  * (the "License"); you may not use this file except in compliance with
1:456a2ba:  * the License.  You may obtain a copy of the License at
1:456a2ba:  *
1:456a2ba:  *      http://www.apache.org/licenses/LICENSE-2.0
1:456a2ba:  *
1:456a2ba:  * Unless required by applicable law or agreed to in writing, software
1:456a2ba:  * distributed under the License is distributed on an "AS IS" BASIS,
1:456a2ba:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:456a2ba:  * See the License for the specific language governing permissions and
1:456a2ba:  * limitations under the License.
1:456a2ba:  */
1:1aab71b: package org.apache.activemq.store.kahadb.disk.util;
1:456a2ba: 
1:47e6d04: import java.util.ArrayList;
1:47e6d04: 
1:456a2ba: /**
1:456a2ba:  * Provides a list of LinkedNode objects. 
1:456a2ba:  * 
1:456a2ba:  * @author chirino
1:456a2ba:  */
1:456a2ba: public class LinkedNodeList<T extends LinkedNode<T>> {
1:456a2ba: 
1:456a2ba:     T head;
1:456a2ba:     int size;
1:456a2ba: 
1:456a2ba:     public LinkedNodeList() {
1:456a2ba:     }
1:456a2ba: 
1:456a2ba:     public boolean isEmpty() {
1:456a2ba:         return head == null;
1:456a2ba:     }
1:456a2ba: 
1:456a2ba:     public void addLast(T node) {
1:456a2ba:         node.linkToTail(this);
1:456a2ba:     }
1:456a2ba: 
1:456a2ba:     public void addFirst(T node) {
1:456a2ba:         node.linkToHead(this);
1:456a2ba:     }
1:456a2ba: 
1:456a2ba:     public T getHead() {
1:456a2ba:         return head;
1:456a2ba:     }
1:456a2ba: 
1:456a2ba:     public T getTail() {
1:e11ece1:         return head != null ? head.prev : null;
1:456a2ba:     }
1:456a2ba:     
1:456a2ba:     public void clear() {
1:456a2ba:         while (head != null) {
1:456a2ba:             head.unlink();
1:456a2ba:         }
1:456a2ba:     }
1:456a2ba: 
1:456a2ba:     public void addLast(LinkedNodeList<T> list) {
1:456a2ba:         if (list.isEmpty()) {
1:456a2ba:             return;
1:456a2ba:         }
1:456a2ba:         if (head == null) {
1:456a2ba:             head = list.head;
1:47e6d04:             reparent(list);
1:456a2ba:         } else {
1:456a2ba:             getTail().linkAfter(list);
1:456a2ba:         }
1:456a2ba:     }
1:456a2ba: 
1:456a2ba:     public void addFirst(LinkedNodeList<T> list) {
1:456a2ba:         if (list.isEmpty()) {
1:456a2ba:             return;
1:456a2ba:         }
1:456a2ba:         if (head == null) {
2:456a2ba:             reparent(list);
1:456a2ba:             head = list.head;
2:456a2ba:             list.head = null;
1:456a2ba:         } else {
1:456a2ba:             getHead().linkBefore(list);
1:456a2ba:         }
1:456a2ba:     }
1:456a2ba: 
1:456a2ba:     public T reparent(LinkedNodeList<T> list) {
1:456a2ba:         size += list.size;
1:456a2ba:         T n = list.head;
1:456a2ba:         do {
1:456a2ba:             n.list = this;
1:456a2ba:             n = n.next;
1:456a2ba:         } while (n != list.head);
1:456a2ba:         list.head = null;
1:456a2ba:         list.size = 0;
1:456a2ba:         return n;
1:456a2ba:     }
1:456a2ba: 
1:456a2ba:     /**
1:456a2ba:      * Move the head to the tail and returns the new head node.
1:456a2ba:      * 
1:456a2ba:      * @return
1:456a2ba:      */
1:456a2ba:     public T rotate() {
1:c01e182:     	if( head ==null )
1:c01e182:     		return null;
1:050436d:         return head = head.getNextCircular();
1:456a2ba:     }
1:456a2ba: 
1:ba706d1:     /**
1:ba706d1:      * Move the head to the tail and returns the new head node.
1:ba706d1:      * 
1:ba706d1:      * @return
1:ba706d1:      */
1:ba706d1:     public void rotateTo(T head) {
1:ba706d1:     	assert head!=null: "Cannot rotate to a null head";
1:ba706d1:     	assert head.list == this : "Cannot rotate to a node not linked to this list";
1:ba706d1:         this.head = head;
1:ba706d1:     }
1:ba706d1: 
1:456a2ba:     public int size() {
1:456a2ba:         return size;
1:456a2ba:     }
1:456a2ba: 
1:456a2ba:     @Override
1:456a2ba:     public String toString() {
1:456a2ba:         StringBuilder sb = new StringBuilder();
1:456a2ba:         sb.append("[");
1:456a2ba:         boolean first=true;
1:456a2ba:         T cur = getHead();
1:456a2ba:         while( cur!=null ) {
1:456a2ba:             if( !first ) {
1:456a2ba:                 sb.append(", ");
1:456a2ba:             }
1:456a2ba:             sb.append(cur);
1:456a2ba:             first=false;
1:456a2ba:             cur = cur.getNext();
1:456a2ba:         }
1:456a2ba:         sb.append("]");
1:456a2ba:         return sb.toString();
1:456a2ba:     }
1:456a2ba:     
1:47e6d04:     /**
1:47e6d04:      * Copies the nodes of the LinkedNodeList to an ArrayList.
1:47e6d04:      * @return
1:47e6d04:      */
1:47e6d04:     public ArrayList<T> toArrayList() {
1:47e6d04:     	ArrayList<T> rc = new ArrayList<T>(size);
1:47e6d04:     	T cur = head;
1:47e6d04:     	while( cur!=null ) {
1:47e6d04:     		rc.add(cur);
1:47e6d04:     		cur = cur.getNext();
1:47e6d04:     	}
1:47e6d04:     	return rc;
1:47e6d04:     }
1:456a2ba: }
============================================================================
author:Hiram R. Chirino
-------------------------------------------------------------------------------
commit:c5cf038
commit:1aab71b
/////////////////////////////////////////////////////////////////////////
1: package org.apache.activemq.store.kahadb.disk.util;
commit:715010a
commit:ba706d1
/////////////////////////////////////////////////////////////////////////
1:     /**
1:      * Move the head to the tail and returns the new head node.
1:      * 
1:      * @return
1:      */
1:     public void rotateTo(T head) {
1:     	assert head!=null: "Cannot rotate to a null head";
1:     	assert head.list == this : "Cannot rotate to a node not linked to this list";
1:         this.head = head;
1:     }
1: 
commit:c01e182
/////////////////////////////////////////////////////////////////////////
1:     	if( head ==null )
1:     		return null;
commit:47e6d04
/////////////////////////////////////////////////////////////////////////
1: import java.util.ArrayList;
1: 
/////////////////////////////////////////////////////////////////////////
1:             reparent(list);
/////////////////////////////////////////////////////////////////////////
1:     /**
1:      * Copies the nodes of the LinkedNodeList to an ArrayList.
1:      * @return
1:      */
1:     public ArrayList<T> toArrayList() {
1:     	ArrayList<T> rc = new ArrayList<T>(size);
1:     	T cur = head;
1:     	while( cur!=null ) {
1:     		rc.add(cur);
1:     		cur = cur.getNext();
1:     	}
1:     	return rc;
1:     }
commit:050436d
/////////////////////////////////////////////////////////////////////////
1:         return head = head.getNextCircular();
commit:456a2ba
/////////////////////////////////////////////////////////////////////////
1: /**
1:  * Licensed to the Apache Software Foundation (ASF) under one or more
1:  * contributor license agreements.  See the NOTICE file distributed with
1:  * this work for additional information regarding copyright ownership.
1:  * The ASF licenses this file to You under the Apache License, Version 2.0
1:  * (the "License"); you may not use this file except in compliance with
1:  * the License.  You may obtain a copy of the License at
1:  *
1:  *      http://www.apache.org/licenses/LICENSE-2.0
1:  *
1:  * Unless required by applicable law or agreed to in writing, software
1:  * distributed under the License is distributed on an "AS IS" BASIS,
1:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:  * See the License for the specific language governing permissions and
1:  * limitations under the License.
1:  */
0: package org.apache.kahadb.util;
1: 
1: /**
1:  * Provides a list of LinkedNode objects. 
1:  * 
1:  * @author chirino
1:  */
1: public class LinkedNodeList<T extends LinkedNode<T>> {
1: 
1:     T head;
1:     int size;
1: 
1:     public LinkedNodeList() {
1:     }
1: 
1:     public boolean isEmpty() {
1:         return head == null;
1:     }
1: 
1:     public void addLast(T node) {
1:         node.linkToTail(this);
1:     }
1: 
1:     public void addFirst(T node) {
1:         node.linkToHead(this);
1:     }
1: 
1:     public T getHead() {
1:         return head;
1:     }
1: 
1:     public T getTail() {
0:         return head.prev;
1:     }
1:     
1:     public void clear() {
1:         while (head != null) {
1:             head.unlink();
1:         }
1:     }
1: 
1:     public void addLast(LinkedNodeList<T> list) {
1:         if (list.isEmpty()) {
1:             return;
1:         }
1:         if (head == null) {
1:             reparent(list);
1:             head = list.head;
1:             list.head = null;
1:         } else {
1:             getTail().linkAfter(list);
1:         }
1:     }
1: 
1:     public void addFirst(LinkedNodeList<T> list) {
1:         if (list.isEmpty()) {
1:             return;
1:         }
1:         if (head == null) {
1:             reparent(list);
1:             head = list.head;
1:             list.head = null;
1:         } else {
1:             getHead().linkBefore(list);
1:         }
1:     }
1: 
1:     public T reparent(LinkedNodeList<T> list) {
1:         size += list.size;
1:         T n = list.head;
1:         do {
1:             n.list = this;
1:             n = n.next;
1:         } while (n != list.head);
1:         list.head = null;
1:         list.size = 0;
1:         return n;
1:     }
1: 
1:     /**
1:      * Move the head to the tail and returns the new head node.
1:      * 
1:      * @return
1:      */
1:     public T rotate() {
0:         return head = head.getNext();
1:     }
1: 
1:     public int size() {
1:         return size;
1:     }
1: 
1:     @Override
1:     public String toString() {
1:         StringBuilder sb = new StringBuilder();
1:         sb.append("[");
1:         boolean first=true;
1:         T cur = getHead();
1:         while( cur!=null ) {
1:             if( !first ) {
1:                 sb.append(", ");
1:             }
1:             sb.append(cur);
1:             first=false;
1:             cur = cur.getNext();
1:         }
1:         sb.append("]");
1:         return sb.toString();
1:     }
1:     
1: }
author:Gary Tully
-------------------------------------------------------------------------------
commit:e11ece1
/////////////////////////////////////////////////////////////////////////
1:         return head != null ? head.prev : null;
============================================================================