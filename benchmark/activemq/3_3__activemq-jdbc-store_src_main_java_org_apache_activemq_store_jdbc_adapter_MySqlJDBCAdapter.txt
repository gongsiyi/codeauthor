1:ed1537b: /**
1:ed1537b:  * Licensed to the Apache Software Foundation (ASF) under one or more
1:ed1537b:  * contributor license agreements.  See the NOTICE file distributed with
1:ed1537b:  * this work for additional information regarding copyright ownership.
1:ed1537b:  * The ASF licenses this file to You under the Apache License, Version 2.0
1:ed1537b:  * (the "License"); you may not use this file except in compliance with
1:ed1537b:  * the License.  You may obtain a copy of the License at
2:ed1537b:  *
1:230a86c:  *      http://www.apache.org/licenses/LICENSE-2.0
1:ed1537b:  *
1:ed1537b:  * Unless required by applicable law or agreed to in writing, software
1:ed1537b:  * distributed under the License is distributed on an "AS IS" BASIS,
1:ed1537b:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:ed1537b:  * See the License for the specific language governing permissions and
1:ed1537b:  * limitations under the License.
1:ed1537b:  */
1:ed1537b: package org.apache.activemq.store.jdbc.adapter;
1:72278d5: 
1:af10622: import java.util.ArrayList;
1:af10622: import java.util.Arrays;
1:af10622: 
1:ed1537b: import org.apache.activemq.store.jdbc.Statements;
2:ed1537b: 
1:ed1537b: /**
1:ed1537b:  * 
1:80ac49d:  * @org.apache.xbean.XBean element="mysql-jdbc-adapter"
1:0bbc0ac:  * 
1:ed1537b:  */
1:ed1537b: public class MySqlJDBCAdapter extends DefaultJDBCAdapter {
1:ed1537b: 
1:5d2f52f:     // The transactional types..
1:5d2f52f:     public static final String INNODB = "INNODB";
1:5d2f52f:     public static final String NDBCLUSTER = "NDBCLUSTER";
1:5d2f52f:     public static final String BDB = "BDB";
1:5d2f52f: 
1:5d2f52f:     // The non transactional types..
1:5d2f52f:     public static final String MYISAM = "MYISAM";
1:5d2f52f:     public static final String ISAM = "ISAM";
1:5d2f52f:     public static final String MERGE = "MERGE";
1:5d2f52f:     public static final String HEAP = "HEAP";
1:5d2f52f: 
1:5d2f52f:     String engineType = INNODB;
1:72278d5:     String typeStatement = "ENGINE";
1:5d2f52f: 
1:adc45e8:     @Override
1:ed1537b:     public void setStatements(Statements statements) {
1:5d2f52f:         String type = engineType.toUpperCase();
1:5d2f52f:         if( !type.equals(INNODB) &&  !type.equals(NDBCLUSTER) ) {
1:5d2f52f:             // Don't use LOCK TABLE for the INNODB and NDBCLUSTER engine types...
1:5d2f52f:             statements.setLockCreateStatement("LOCK TABLE " + statements.getFullLockTableName() + " WRITE");
1:5d2f52f:         }
1:5d2f52f: 
1:6e26195:         statements.setBinaryDataType("LONGBLOB");
1:af10622:         
1:479f5e1:         
1:72278d5:         String typeClause = typeStatement + "=" + type;
1:af10622:         if( type.equals(NDBCLUSTER) ) {
1:af10622:             // in the NDBCLUSTER case we will create as INNODB and then alter to NDBCLUSTER
1:72278d5:             typeClause = typeStatement + "=" + INNODB;
1:af10622:         }
1:af10622:         
1:5d2f52f:         // Update the create statements so they use the right type of engine 
1:479f5e1:         String[] s = statements.getCreateSchemaStatements();
1:479f5e1:         for (int i = 0; i < s.length; i++) {
1:479f5e1:             if( s[i].startsWith("CREATE TABLE")) {
1:72278d5:                 s[i] = s[i]+ " " + typeClause;
1:479f5e1:             }
1:479f5e1:         }
1:af10622:         
1:af10622:         if( type.equals(NDBCLUSTER) ) {
1:af10622:             // Add the alter statements.
1:af10622:             ArrayList<String> l = new ArrayList<String>(Arrays.asList(s));
1:af10622:             l.add("ALTER TABLE "+statements.getFullMessageTableName()+" ENGINE="+NDBCLUSTER);
1:af10622:             l.add("ALTER TABLE "+statements.getFullAckTableName()+" ENGINE="+NDBCLUSTER);
1:af10622:             l.add("ALTER TABLE "+statements.getFullLockTableName()+" ENGINE="+NDBCLUSTER);
1:af10622:             l.add("FLUSH TABLES");
1:af10622:             s = l.toArray(new String[l.size()]);
1:af10622:             statements.setCreateSchemaStatements(s);
1:af10622:         }        
1:af10622:         
1:ed1537b:         super.setStatements(statements);
1:5d2f52f:     }
1:5d2f52f: 
1:5d2f52f:     public String getEngineType() {
1:5d2f52f:         return engineType;
1:5d2f52f:     }
1:5d2f52f: 
1:5d2f52f:     public void setEngineType(String engineType) {
1:5d2f52f:         this.engineType = engineType;
1:5d2f52f:     }
1:479f5e1: 
1:72278d5:     public String getTypeStatement() {
1:72278d5:         return typeStatement;
1:72278d5:     }
1:72278d5: 
1:72278d5:     public void setTypeStatement(String typeStatement) {
1:72278d5:         this.typeStatement = typeStatement;
1:72278d5:     }
2:ed1537b: }
============================================================================
author:Hiram R. Chirino
-------------------------------------------------------------------------------
commit:c5cf038
commit:0bbc0ac
/////////////////////////////////////////////////////////////////////////
1:  * 
commit:af10622
/////////////////////////////////////////////////////////////////////////
1: import java.util.ArrayList;
1: import java.util.Arrays;
1: 
/////////////////////////////////////////////////////////////////////////
1:         
0:         String typeClause = " TYPE="+type;
1:         if( type.equals(NDBCLUSTER) ) {
1:             // in the NDBCLUSTER case we will create as INNODB and then alter to NDBCLUSTER
0:             typeClause = " TYPE="+INNODB;
1:         }
1:         
0:                 s[i] = s[i]+typeClause;
1:         
1:         if( type.equals(NDBCLUSTER) ) {
1:             // Add the alter statements.
1:             ArrayList<String> l = new ArrayList<String>(Arrays.asList(s));
1:             l.add("ALTER TABLE "+statements.getFullMessageTableName()+" ENGINE="+NDBCLUSTER);
1:             l.add("ALTER TABLE "+statements.getFullAckTableName()+" ENGINE="+NDBCLUSTER);
1:             l.add("ALTER TABLE "+statements.getFullLockTableName()+" ENGINE="+NDBCLUSTER);
1:             l.add("FLUSH TABLES");
1:             s = l.toArray(new String[l.size()]);
1:             statements.setCreateSchemaStatements(s);
1:         }        
1:         
commit:5d2f52f
/////////////////////////////////////////////////////////////////////////
1:     // The transactional types..
1:     public static final String INNODB = "INNODB";
1:     public static final String NDBCLUSTER = "NDBCLUSTER";
1:     public static final String BDB = "BDB";
1: 
1:     // The non transactional types..
1:     public static final String MYISAM = "MYISAM";
1:     public static final String ISAM = "ISAM";
1:     public static final String MERGE = "MERGE";
1:     public static final String HEAP = "HEAP";
1: 
1:     String engineType = INNODB;
1: 
1:         String type = engineType.toUpperCase();
1:         if( !type.equals(INNODB) &&  !type.equals(NDBCLUSTER) ) {
1:             // Don't use LOCK TABLE for the INNODB and NDBCLUSTER engine types...
1:             statements.setLockCreateStatement("LOCK TABLE " + statements.getFullLockTableName() + " WRITE");
1:         }
1: 
1:         // Update the create statements so they use the right type of engine 
0:                 s[i] = s[i]+" TYPE="+type;
1:     }
1: 
1:     public String getEngineType() {
1:         return engineType;
1:     }
1: 
1:     public void setEngineType(String engineType) {
1:         this.engineType = engineType;
1:     }
commit:80ac49d
/////////////////////////////////////////////////////////////////////////
1:  * @org.apache.xbean.XBean element="mysql-jdbc-adapter"
commit:479f5e1
/////////////////////////////////////////////////////////////////////////
1:         
0:         // Use INNODB table since we need transaction support.
1:         String[] s = statements.getCreateSchemaStatements();
1:         for (int i = 0; i < s.length; i++) {
1:             if( s[i].startsWith("CREATE TABLE")) {
0:                 s[i] = s[i]+" TYPE=INNODB";
1:             }
1:         }
1:         
commit:230a86c
/////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////
1:  *      http://www.apache.org/licenses/LICENSE-2.0
author:Gary Tully
-------------------------------------------------------------------------------
commit:adc45e8
/////////////////////////////////////////////////////////////////////////
1:     @Override
commit:72278d5
/////////////////////////////////////////////////////////////////////////
1:     String typeStatement = "ENGINE";
/////////////////////////////////////////////////////////////////////////
1:         String typeClause = typeStatement + "=" + type;
1:             typeClause = typeStatement + "=" + INNODB;
1:                 s[i] = s[i]+ " " + typeClause;
/////////////////////////////////////////////////////////////////////////
1: 
1:     public String getTypeStatement() {
1:         return typeStatement;
1:     }
1: 
1:     public void setTypeStatement(String typeStatement) {
1:         this.typeStatement = typeStatement;
1:     }
author:James Strachan
-------------------------------------------------------------------------------
commit:6e26195
/////////////////////////////////////////////////////////////////////////
1:         statements.setBinaryDataType("LONGBLOB");
commit:ed1537b
/////////////////////////////////////////////////////////////////////////
1: /**
1:  *
1:  * Licensed to the Apache Software Foundation (ASF) under one or more
1:  * contributor license agreements.  See the NOTICE file distributed with
1:  * this work for additional information regarding copyright ownership.
1:  * The ASF licenses this file to You under the Apache License, Version 2.0
1:  * (the "License"); you may not use this file except in compliance with
1:  * the License.  You may obtain a copy of the License at
1:  *
0:  * http://www.apache.org/licenses/LICENSE-2.0
1:  *
1:  * Unless required by applicable law or agreed to in writing, software
1:  * distributed under the License is distributed on an "AS IS" BASIS,
1:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:  * See the License for the specific language governing permissions and
1:  * limitations under the License.
1:  */
1: package org.apache.activemq.store.jdbc.adapter;
1: 
1: import org.apache.activemq.store.jdbc.Statements;
1: 
1: /**
1:  * 
0:  * @version $Revision$
1:  */
1: public class MySqlJDBCAdapter extends DefaultJDBCAdapter {
1: 
1:     public void setStatements(Statements statements) {
0:         statements.setLockCreateStatement("LOCK TABLE " + statements.getFullLockTableName() + " WRITE");
1:         super.setStatements(statements);
1:     }    
1: }
============================================================================