1:1787eda: /**
1:1787eda:  * Licensed to the Apache Software Foundation (ASF) under one or more
1:1787eda:  * contributor license agreements.  See the NOTICE file distributed with
1:1787eda:  * this work for additional information regarding copyright ownership.
1:1787eda:  * The ASF licenses this file to You under the Apache License, Version 2.0
1:1787eda:  * (the "License"); you may not use this file except in compliance with
1:1787eda:  * the License.  You may obtain a copy of the License at
1:1787eda:  *
1:1787eda:  *      http://www.apache.org/licenses/LICENSE-2.0
1:1787eda:  *
1:1787eda:  * Unless required by applicable law or agreed to in writing, software
1:1787eda:  * distributed under the License is distributed on an "AS IS" BASIS,
1:1787eda:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:1787eda:  * See the License for the specific language governing permissions and
1:1787eda:  * limitations under the License.
1:1787eda:  */
1:1787eda: package org.apache.activemq.console;
1:1787eda: 
1:1787eda: import java.io.ByteArrayOutputStream;
1:1787eda: import java.util.Arrays;
1:1787eda: import java.util.LinkedList;
1:1787eda: import javax.jms.Connection;
1:1787eda: import org.apache.activemq.ActiveMQConnectionFactory;
1:1787eda: import org.apache.activemq.broker.BrokerService;
1:1787eda: import org.apache.activemq.command.ActiveMQDestination;
1:1787eda: import org.apache.activemq.command.ActiveMQQueue;
1:1787eda: import org.apache.activemq.command.ActiveMQTopic;
1:1787eda: import org.apache.activemq.console.command.QueryCommand;
1:1787eda: import org.apache.activemq.console.formatter.CommandShellOutputFormatter;
1:1787eda: import org.junit.After;
1:1787eda: import org.junit.Before;
1:1787eda: import org.junit.Test;
1:1787eda: import org.slf4j.LoggerFactory;
1:1787eda: 
1:1787eda: 
1:1787eda: import static org.junit.Assert.assertFalse;
1:1787eda: import static org.junit.Assert.assertTrue;
1:1787eda: 
1:1787eda: public class QueryCommandTest {
1:1787eda:     private static final org.slf4j.Logger LOG = LoggerFactory.getLogger(QueryCommandTest.class);
1:1787eda: 
1:1787eda:     final String CONNECTOR_NAME="tcp-openWire";
1:1787eda:     final String CLIENT_ID="some-id";
1:1787eda: 
1:1787eda:     BrokerService brokerService;
1:1787eda: 
1:1787eda: 
1:1787eda:     @Before
1:1787eda:     public void createBroker() throws Exception {
1:1787eda:         brokerService = new BrokerService();
1:1787eda:         brokerService.getManagementContext().setCreateConnector(false);
1:1787eda:         brokerService.setPersistent(false);
1:1787eda:         brokerService.setDestinations(new ActiveMQDestination[]{new ActiveMQQueue("Q1"), new ActiveMQQueue("Q2"), new ActiveMQTopic("T1")});
1:1787eda:         brokerService.addConnector("tcp://0.0.0.0:0").setName(CONNECTOR_NAME);
1:1787eda:         brokerService.start();
1:1787eda:     }
1:1787eda: 
1:1787eda:     @After
1:1787eda:     public void stopBroker() throws Exception {
1:1787eda:         if (brokerService != null) {
1:1787eda:             brokerService.stop();
1:1787eda:         }
1:1787eda:     }
1:1787eda: 
1:1787eda:     @Test
1:1787eda:     public void tryQuery() throws Exception {
1:1787eda: 
1:1787eda:         String result = executeQuery("-QQueue=* --view destinationName,EnqueueCount,DequeueCount");
1:1787eda:         assertTrue("Output valid", result.contains("Q1"));
1:1787eda:         assertTrue("Output valid", result.contains("Q2"));
1:1787eda:         assertFalse("Output valid", result.contains("T1"));
1:1787eda: 
1:1787eda:         result = executeQuery("-QQueue=Q2 --view destinationName,QueueSize");
1:1787eda:         assertTrue("size present", result.contains("QueueSize"));
1:1787eda:         assertTrue("Output valid", result.contains("Q2"));
1:1787eda:         assertFalse("Output valid", result.contains("Q1"));
1:1787eda:         assertFalse("Output valid", result.contains("T1"));
1:1787eda: 
1:1787eda:         result = executeQuery("-QQueue=* -xQQueue=Q1 --view destinationName,QueueSize");
1:1787eda:         assertTrue("size present", result.contains("QueueSize"));
1:1787eda:         assertTrue("q2", result.contains("Q2"));
1:1787eda:         assertFalse("!q1: " + result, result.contains("Q1"));
1:1787eda:         assertFalse("!t1", result.contains("T1"));
1:1787eda: 
1:1787eda:         result = executeQuery("-QTopic=* -QQueue=* --view destinationName");
1:1787eda:         assertTrue("got Q1", result.contains("Q1"));
1:1787eda:         assertTrue("got Q2", result.contains("Q2"));
1:1787eda:         assertTrue("got T1", result.contains("T1"));
1:1787eda: 
1:1787eda:         result = executeQuery("-QQueue=*");
1:1787eda:         assertTrue("got Q1", result.contains("Q1"));
1:1787eda:         assertTrue("got Q2", result.contains("Q2"));
1:1787eda:         assertFalse("!T1", result.contains("T1"));
1:1787eda: 
1:1787eda:         result = executeQuery("-QBroker=*");
1:1787eda:         assertTrue("got localhost", result.contains("localhost"));
1:1787eda: 
1:1787eda:         result = executeQuery("--view destinationName");
1:1787eda:         // all mbeans with a destinationName attribute
1:1787eda:         assertTrue("got Q1", result.contains("Q1"));
1:1787eda:         assertTrue("got Q2", result.contains("Q2"));
1:1787eda:         assertTrue("got T1", result.contains("T1"));
1:1787eda: 
1:1787eda:         result = executeQuery("--objname type=Broker,brokerName=*,destinationType=Queue,destinationName=*");
1:1787eda:         assertTrue("got Q1", result.contains("Q1"));
1:1787eda:         assertTrue("got Q2", result.contains("Q2"));
1:1787eda:         assertFalse("!T1", result.contains("T1"));
1:1787eda: 
1:1787eda:         result = executeQuery("--objname type=Broker,brokerName=*,destinationType=*,destinationName=* --xobjname type=Broker,brokerName=*,destinationType=Queue,destinationName=Q1");
1:1787eda:         assertFalse("!Q1", result.contains("Q1"));
1:1787eda:         assertTrue("got Q2", result.contains("Q2"));
1:1787eda:         assertTrue("T1", result.contains("T1"));
1:1787eda: 
1:1787eda:     }
1:1787eda: 
1:1787eda:     @Test
1:1787eda:     public void testConnection() throws Exception {
1:1787eda: 
1:1787eda:         ActiveMQConnectionFactory connectionFactory = new ActiveMQConnectionFactory(brokerService.getTransportConnectors().get(0).getPublishableConnectURI());
1:1787eda:         Connection connection = connectionFactory.createConnection();
1:1787eda:         connection.setClientID(CLIENT_ID);
1:1787eda:         connection.start();
1:1787eda: 
1:1787eda:         String result = executeQuery("-QConnection=* --view ClientId");
1:1787eda:         assertTrue("got client id", result.contains(CLIENT_ID));
1:1787eda: 
1:1787eda:         result = executeQuery("--objname type=Broker,brokerName=*,connector=clientConnectors,connectorName=* -xQNetworkConnector=*");
1:1787eda:         assertTrue("got named", result.contains(CONNECTOR_NAME));
1:1787eda: 
1:1787eda:         result = executeQuery("-QConnector=*");
1:1787eda:         assertTrue("got named", result.contains(CONNECTOR_NAME));
1:1787eda:     }
1:1787eda: 
1:1787eda: 
1:1787eda:     @Test
1:1787eda:     public void testInvoke() throws Exception {
1:1787eda: 
1:1787eda:         String result = executeQuery("-QQueue=Q* --view Paused");
1:1787eda:         assertTrue("got pause status", result.contains("Paused = false"));
1:1787eda: 
1:1787eda:         result = executeQuery("-QQueue=* --invoke pause");
1:1787eda:         LOG.info("result of invoke: " + result);
1:1787eda:         assertTrue("invoked", result.contains("Q1"));
1:1787eda:         assertTrue("invoked", result.contains("Q2"));
1:1787eda: 
1:1787eda:         result = executeQuery("-QQueue=Q2 --view Paused");
1:1787eda:         assertTrue("got pause status", result.contains("Paused = true"));
1:1787eda: 
1:1787eda:         result = executeQuery("-QQueue=Q2 --invoke resume");
1:1787eda:         LOG.info("result of invoke: " + result);
1:1787eda:         assertTrue("invoked", result.contains("Q2"));
1:1787eda: 
1:1787eda:         result = executeQuery("-QQueue=Q2 --view Paused");
1:1787eda:         assertTrue("pause status", result.contains("Paused = false"));
1:1787eda: 
1:1787eda:         result = executeQuery("-QQueue=Q1 --view Paused");
1:1787eda:         assertTrue("pause status", result.contains("Paused = true"));
1:1787eda: 
1:1787eda:         // op with string param
1:1787eda:         result = executeQuery("-QQueue=Q2 --invoke sendTextMessage,hi");
1:1787eda:         LOG.info("result of invoke: " + result);
1:1787eda:         assertTrue("invoked", result.contains("Q2"));
1:1787eda: 
1:1787eda:         result = executeQuery("-QQueue=Q2 --view EnqueueCount");
1:1787eda:         assertTrue("enqueueCount", result.contains("EnqueueCount = 1"));
1:1787eda:     }
1:1787eda: 
1:1787eda:     private String executeQuery(String query) throws Exception {
1:1787eda:         ByteArrayOutputStream byteArrayOutputStream = new ByteArrayOutputStream(1024);
1:1787eda:         CommandContext context = new CommandContext();
1:1787eda:         context.setFormatter(new CommandShellOutputFormatter(byteArrayOutputStream));
1:1787eda: 
1:1787eda:         QueryCommand queryCommand = new QueryCommand();
1:1787eda:         queryCommand.setJmxUseLocal(true);
1:1787eda:         queryCommand.setCommandContext(context);
1:1787eda: 
1:1787eda:         LinkedList<String> args = new LinkedList<>();
1:1787eda:         args.addAll(Arrays.asList(query.split(" ")));
1:1787eda:         queryCommand.execute(args);
1:1787eda: 
1:1787eda:         return byteArrayOutputStream.toString();
1:1787eda:     }
1:1787eda: }
============================================================================
author:gtully
-------------------------------------------------------------------------------
commit:1787eda
/////////////////////////////////////////////////////////////////////////
1: /**
1:  * Licensed to the Apache Software Foundation (ASF) under one or more
1:  * contributor license agreements.  See the NOTICE file distributed with
1:  * this work for additional information regarding copyright ownership.
1:  * The ASF licenses this file to You under the Apache License, Version 2.0
1:  * (the "License"); you may not use this file except in compliance with
1:  * the License.  You may obtain a copy of the License at
1:  *
1:  *      http://www.apache.org/licenses/LICENSE-2.0
1:  *
1:  * Unless required by applicable law or agreed to in writing, software
1:  * distributed under the License is distributed on an "AS IS" BASIS,
1:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:  * See the License for the specific language governing permissions and
1:  * limitations under the License.
1:  */
1: package org.apache.activemq.console;
1: 
1: import java.io.ByteArrayOutputStream;
1: import java.util.Arrays;
1: import java.util.LinkedList;
1: import javax.jms.Connection;
1: import org.apache.activemq.ActiveMQConnectionFactory;
1: import org.apache.activemq.broker.BrokerService;
1: import org.apache.activemq.command.ActiveMQDestination;
1: import org.apache.activemq.command.ActiveMQQueue;
1: import org.apache.activemq.command.ActiveMQTopic;
1: import org.apache.activemq.console.command.QueryCommand;
1: import org.apache.activemq.console.formatter.CommandShellOutputFormatter;
1: import org.junit.After;
1: import org.junit.Before;
1: import org.junit.Test;
1: import org.slf4j.LoggerFactory;
1: 
1: 
1: import static org.junit.Assert.assertFalse;
1: import static org.junit.Assert.assertTrue;
1: 
1: public class QueryCommandTest {
1:     private static final org.slf4j.Logger LOG = LoggerFactory.getLogger(QueryCommandTest.class);
1: 
1:     final String CONNECTOR_NAME="tcp-openWire";
1:     final String CLIENT_ID="some-id";
1: 
1:     BrokerService brokerService;
1: 
1: 
1:     @Before
1:     public void createBroker() throws Exception {
1:         brokerService = new BrokerService();
1:         brokerService.getManagementContext().setCreateConnector(false);
1:         brokerService.setPersistent(false);
1:         brokerService.setDestinations(new ActiveMQDestination[]{new ActiveMQQueue("Q1"), new ActiveMQQueue("Q2"), new ActiveMQTopic("T1")});
1:         brokerService.addConnector("tcp://0.0.0.0:0").setName(CONNECTOR_NAME);
1:         brokerService.start();
1:     }
1: 
1:     @After
1:     public void stopBroker() throws Exception {
1:         if (brokerService != null) {
1:             brokerService.stop();
1:         }
1:     }
1: 
1:     @Test
1:     public void tryQuery() throws Exception {
1: 
1:         String result = executeQuery("-QQueue=* --view destinationName,EnqueueCount,DequeueCount");
1:         assertTrue("Output valid", result.contains("Q1"));
1:         assertTrue("Output valid", result.contains("Q2"));
1:         assertFalse("Output valid", result.contains("T1"));
1: 
1:         result = executeQuery("-QQueue=Q2 --view destinationName,QueueSize");
1:         assertTrue("size present", result.contains("QueueSize"));
1:         assertTrue("Output valid", result.contains("Q2"));
1:         assertFalse("Output valid", result.contains("Q1"));
1:         assertFalse("Output valid", result.contains("T1"));
1: 
1:         result = executeQuery("-QQueue=* -xQQueue=Q1 --view destinationName,QueueSize");
1:         assertTrue("size present", result.contains("QueueSize"));
1:         assertTrue("q2", result.contains("Q2"));
1:         assertFalse("!q1: " + result, result.contains("Q1"));
1:         assertFalse("!t1", result.contains("T1"));
1: 
1:         result = executeQuery("-QTopic=* -QQueue=* --view destinationName");
1:         assertTrue("got Q1", result.contains("Q1"));
1:         assertTrue("got Q2", result.contains("Q2"));
1:         assertTrue("got T1", result.contains("T1"));
1: 
1:         result = executeQuery("-QQueue=*");
1:         assertTrue("got Q1", result.contains("Q1"));
1:         assertTrue("got Q2", result.contains("Q2"));
1:         assertFalse("!T1", result.contains("T1"));
1: 
1:         result = executeQuery("-QBroker=*");
1:         assertTrue("got localhost", result.contains("localhost"));
1: 
1:         result = executeQuery("--view destinationName");
1:         // all mbeans with a destinationName attribute
1:         assertTrue("got Q1", result.contains("Q1"));
1:         assertTrue("got Q2", result.contains("Q2"));
1:         assertTrue("got T1", result.contains("T1"));
1: 
1:         result = executeQuery("--objname type=Broker,brokerName=*,destinationType=Queue,destinationName=*");
1:         assertTrue("got Q1", result.contains("Q1"));
1:         assertTrue("got Q2", result.contains("Q2"));
1:         assertFalse("!T1", result.contains("T1"));
1: 
1:         result = executeQuery("--objname type=Broker,brokerName=*,destinationType=*,destinationName=* --xobjname type=Broker,brokerName=*,destinationType=Queue,destinationName=Q1");
1:         assertFalse("!Q1", result.contains("Q1"));
1:         assertTrue("got Q2", result.contains("Q2"));
1:         assertTrue("T1", result.contains("T1"));
1: 
1:     }
1: 
1:     @Test
1:     public void testConnection() throws Exception {
1: 
1:         ActiveMQConnectionFactory connectionFactory = new ActiveMQConnectionFactory(brokerService.getTransportConnectors().get(0).getPublishableConnectURI());
1:         Connection connection = connectionFactory.createConnection();
1:         connection.setClientID(CLIENT_ID);
1:         connection.start();
1: 
1:         String result = executeQuery("-QConnection=* --view ClientId");
1:         assertTrue("got client id", result.contains(CLIENT_ID));
1: 
1:         result = executeQuery("--objname type=Broker,brokerName=*,connector=clientConnectors,connectorName=* -xQNetworkConnector=*");
1:         assertTrue("got named", result.contains(CONNECTOR_NAME));
1: 
1:         result = executeQuery("-QConnector=*");
1:         assertTrue("got named", result.contains(CONNECTOR_NAME));
1:     }
1: 
1: 
1:     @Test
1:     public void testInvoke() throws Exception {
1: 
1:         String result = executeQuery("-QQueue=Q* --view Paused");
1:         assertTrue("got pause status", result.contains("Paused = false"));
1: 
1:         result = executeQuery("-QQueue=* --invoke pause");
1:         LOG.info("result of invoke: " + result);
1:         assertTrue("invoked", result.contains("Q1"));
1:         assertTrue("invoked", result.contains("Q2"));
1: 
1:         result = executeQuery("-QQueue=Q2 --view Paused");
1:         assertTrue("got pause status", result.contains("Paused = true"));
1: 
1:         result = executeQuery("-QQueue=Q2 --invoke resume");
1:         LOG.info("result of invoke: " + result);
1:         assertTrue("invoked", result.contains("Q2"));
1: 
1:         result = executeQuery("-QQueue=Q2 --view Paused");
1:         assertTrue("pause status", result.contains("Paused = false"));
1: 
1:         result = executeQuery("-QQueue=Q1 --view Paused");
1:         assertTrue("pause status", result.contains("Paused = true"));
1: 
1:         // op with string param
1:         result = executeQuery("-QQueue=Q2 --invoke sendTextMessage,hi");
1:         LOG.info("result of invoke: " + result);
1:         assertTrue("invoked", result.contains("Q2"));
1: 
1:         result = executeQuery("-QQueue=Q2 --view EnqueueCount");
1:         assertTrue("enqueueCount", result.contains("EnqueueCount = 1"));
1:     }
1: 
1:     private String executeQuery(String query) throws Exception {
1:         ByteArrayOutputStream byteArrayOutputStream = new ByteArrayOutputStream(1024);
1:         CommandContext context = new CommandContext();
1:         context.setFormatter(new CommandShellOutputFormatter(byteArrayOutputStream));
1: 
1:         QueryCommand queryCommand = new QueryCommand();
1:         queryCommand.setJmxUseLocal(true);
1:         queryCommand.setCommandContext(context);
1: 
1:         LinkedList<String> args = new LinkedList<>();
1:         args.addAll(Arrays.asList(query.split(" ")));
1:         queryCommand.execute(args);
1: 
1:         return byteArrayOutputStream.toString();
1:     }
1: }
============================================================================