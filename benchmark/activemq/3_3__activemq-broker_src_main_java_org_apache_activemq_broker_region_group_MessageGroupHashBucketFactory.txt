1:e7e15b5: /**
1:fc00993:  * Licensed to the Apache Software Foundation (ASF) under one or more
1:fc00993:  * contributor license agreements.  See the NOTICE file distributed with
1:fc00993:  * this work for additional information regarding copyright ownership.
1:fc00993:  * The ASF licenses this file to You under the Apache License, Version 2.0
1:fc00993:  * (the "License"); you may not use this file except in compliance with
1:fc00993:  * the License.  You may obtain a copy of the License at
3:e7e15b5:  *
1:fc00993:  *      http://www.apache.org/licenses/LICENSE-2.0
1:e7e15b5:  *
1:e7e15b5:  * Unless required by applicable law or agreed to in writing, software
1:e7e15b5:  * distributed under the License is distributed on an "AS IS" BASIS,
1:e7e15b5:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:e7e15b5:  * See the License for the specific language governing permissions and
1:e7e15b5:  * limitations under the License.
1:e7e15b5:  */
1:e7e15b5: package org.apache.activemq.broker.region.group;
1:e7e15b5: 
1:e7e15b5: /**
1:e7e15b5:  * A factory to create instances of {@link SimpleMessageGroupMap} when
1:e7e15b5:  * implementing the <a
1:3013c20:  * href="http://activemq.apache.org/message-groups.html">Message
1:e7e15b5:  * Groups</a> functionality.
1:e7e15b5:  * 
1:e7e15b5:  * @org.apache.xbean.XBean
1:0bbc0ac:  * 
1:e7e15b5:  * 
1:e7e15b5:  */
1:e7e15b5: public class MessageGroupHashBucketFactory implements MessageGroupMapFactory {
1:e7e15b5: 
1:e7e15b5:     private int bucketCount = 1024;
1:db2121b:     private int cacheSize = 64;
1:e7e15b5: 
1:e7e15b5:     public MessageGroupMap createMessageGroupMap() {
1:db2121b:         return new MessageGroupHashBucket(getBucketCount(), getCacheSize());
1:e7e15b5:     }
1:e7e15b5: 
1:e7e15b5:     public int getBucketCount() {
1:e7e15b5:         return bucketCount;
1:e7e15b5:     }
1:e7e15b5: 
1:e7e15b5:     /**
1:e7e15b5:      * Sets the number of hash buckets to use for the message group
1:e7e15b5:      * functionality. This is only applicable to using message groups to
1:e7e15b5:      * parallelize processing of a queue while preserving order across an
1:e7e15b5:      * individual JMSXGroupID header value. This value sets the number of hash
1:e7e15b5:      * buckets that will be used (i.e. the maximum possible concurrency).
1:e7e15b5:      */
1:e7e15b5:     public void setBucketCount(int bucketCount) {
1:e7e15b5:         this.bucketCount = bucketCount;
1:e7e15b5:     }
1:e7e15b5: 
1:db2121b:     public int getCacheSize() {
1:db2121b:         return cacheSize;
1:db2121b:     }
1:db2121b: 
1:db2121b:     public void setCacheSize(int cacheSize) {
1:db2121b:         this.cacheSize = cacheSize;
1:db2121b:     }
1:db2121b: 
1:e7e15b5: }
============================================================================
author:rajdavies
-------------------------------------------------------------------------------
commit:db2121b
/////////////////////////////////////////////////////////////////////////
1:     private int cacheSize = 64;
1:         return new MessageGroupHashBucket(getBucketCount(), getCacheSize());
/////////////////////////////////////////////////////////////////////////
1:     public int getCacheSize() {
1:         return cacheSize;
1:     }
1: 
1:     public void setCacheSize(int cacheSize) {
1:         this.cacheSize = cacheSize;
1:     }
1: 
author:Hiram R. Chirino
-------------------------------------------------------------------------------
commit:58aca86
commit:0bbc0ac
/////////////////////////////////////////////////////////////////////////
1:  * 
commit:fc00993
/////////////////////////////////////////////////////////////////////////
1:  * Licensed to the Apache Software Foundation (ASF) under one or more
1:  * contributor license agreements.  See the NOTICE file distributed with
1:  * this work for additional information regarding copyright ownership.
1:  * The ASF licenses this file to You under the Apache License, Version 2.0
1:  * (the "License"); you may not use this file except in compliance with
1:  * the License.  You may obtain a copy of the License at
1:  *      http://www.apache.org/licenses/LICENSE-2.0
author:James Strachan
-------------------------------------------------------------------------------
commit:3013c20
/////////////////////////////////////////////////////////////////////////
1:  * href="http://activemq.apache.org/message-groups.html">Message
commit:e7e15b5
/////////////////////////////////////////////////////////////////////////
1: /**
1:  *
0:  * Copyright 2005-2006 The Apache Software Foundation
1:  *
0:  * Licensed under the Apache License, Version 2.0 (the "License");
0:  * you may not use this file except in compliance with the License.
0:  * You may obtain a copy of the License at
1:  *
0:  * http://www.apache.org/licenses/LICENSE-2.0
1:  *
1:  * Unless required by applicable law or agreed to in writing, software
1:  * distributed under the License is distributed on an "AS IS" BASIS,
1:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:  * See the License for the specific language governing permissions and
1:  * limitations under the License.
1:  */
1: package org.apache.activemq.broker.region.group;
1: 
1: /**
1:  * A factory to create instances of {@link SimpleMessageGroupMap} when
1:  * implementing the <a
0:  * href="http://incubator.apache.org/activemq/message-groups.html">Message
1:  * Groups</a> functionality.
1:  * 
1:  * @org.apache.xbean.XBean
1:  * 
0:  * @version $Revision$
1:  */
1: public class MessageGroupHashBucketFactory implements MessageGroupMapFactory {
1: 
1:     private int bucketCount = 1024;
1: 
1:     public MessageGroupMap createMessageGroupMap() {
0:         return new MessageGroupHashBucket(bucketCount);
1:     }
1: 
1:     public int getBucketCount() {
1:         return bucketCount;
1:     }
1: 
1:     /**
1:      * Sets the number of hash buckets to use for the message group
1:      * functionality. This is only applicable to using message groups to
1:      * parallelize processing of a queue while preserving order across an
1:      * individual JMSXGroupID header value. This value sets the number of hash
1:      * buckets that will be used (i.e. the maximum possible concurrency).
1:      */
1:     public void setBucketCount(int bucketCount) {
1:         this.bucketCount = bucketCount;
1:     }
1: 
1: }
============================================================================