1:3f32507: /**
1:3f32507:  * Licensed to the Apache Software Foundation (ASF) under one or more
1:3f32507:  * contributor license agreements.  See the NOTICE file distributed with
1:3f32507:  * this work for additional information regarding copyright ownership.
1:3f32507:  * The ASF licenses this file to You under the Apache License, Version 2.0
1:3f32507:  * (the "License"); you may not use this file except in compliance with
1:3f32507:  * the License.  You may obtain a copy of the License at
1:3f32507:  *
1:3f32507:  *      http://www.apache.org/licenses/LICENSE-2.0
1:3f32507:  *
1:3f32507:  * Unless required by applicable law or agreed to in writing, software
1:3f32507:  * distributed under the License is distributed on an "AS IS" BASIS,
1:3f32507:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:3f32507:  * See the License for the specific language governing permissions and
1:3f32507:  * limitations under the License.
1:3f32507:  */
1:3f32507: package org.apache.activemq.store.kahadb;
1:3f32507: 
1:3f32507: import java.io.IOException;
1:3f32507: 
1:3f32507: import junit.framework.TestCase;
1:3f32507: 
1:3f32507: import org.apache.activemq.protobuf.Buffer;
1:3f32507: import org.apache.activemq.store.kahadb.data.KahaAddMessageCommand;
1:3f32507: import org.apache.activemq.store.kahadb.data.KahaDestination;
1:3f32507: import org.apache.activemq.store.kahadb.data.KahaDestination.DestinationType;
1:3f32507: import org.apache.activemq.store.kahadb.data.KahaEntryType;
1:3f32507: import org.apache.activemq.util.ByteSequence;
1:3f32507: import org.apache.activemq.util.DataByteArrayInputStream;
1:3f32507: import org.apache.activemq.util.DataByteArrayOutputStream;
1:3f32507: 
1:3f32507: public class PBMesssagesTest extends TestCase {
1:3f32507: 
1:3f32507:     @SuppressWarnings("rawtypes")
1:3f32507:     public void testKahaAddMessageCommand() throws IOException {
1:3f32507: 
1:3f32507:        KahaAddMessageCommand expected = new KahaAddMessageCommand();
1:3f32507:        expected.setDestination(new KahaDestination().setName("Foo").setType(DestinationType.QUEUE));
1:3f32507:        expected.setMessage(new Buffer(new byte[] {1,2,3,4,5,6} ));
1:3f32507:        expected.setMessageId("Hello World");
1:3f32507: 
1:3f32507:        int size = expected.serializedSizeFramed();
1:3f32507:        DataByteArrayOutputStream os = new DataByteArrayOutputStream(size + 1);
1:3f32507:        os.writeByte(expected.type().getNumber());
1:3f32507:        expected.writeFramed(os);
1:3f32507:        ByteSequence seq = os.toByteSequence();
1:3f32507: 
1:3f32507:        DataByteArrayInputStream is = new DataByteArrayInputStream(seq);
1:3f32507:        KahaEntryType type = KahaEntryType.valueOf(is.readByte());
1:3f32507:        JournalCommand message = (JournalCommand)type.createMessage();
1:3f32507:        message.mergeFramed(is);
1:3f32507: 
1:3f32507:        assertEquals(expected, message);
1:3f32507:     }
1:3f32507: 
1:3f32507: }
============================================================================
author:Hadrian Zbarcea
-------------------------------------------------------------------------------
commit:3f32507
/////////////////////////////////////////////////////////////////////////
1: /**
1:  * Licensed to the Apache Software Foundation (ASF) under one or more
1:  * contributor license agreements.  See the NOTICE file distributed with
1:  * this work for additional information regarding copyright ownership.
1:  * The ASF licenses this file to You under the Apache License, Version 2.0
1:  * (the "License"); you may not use this file except in compliance with
1:  * the License.  You may obtain a copy of the License at
1:  *
1:  *      http://www.apache.org/licenses/LICENSE-2.0
1:  *
1:  * Unless required by applicable law or agreed to in writing, software
1:  * distributed under the License is distributed on an "AS IS" BASIS,
1:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:  * See the License for the specific language governing permissions and
1:  * limitations under the License.
1:  */
1: package org.apache.activemq.store.kahadb;
1: 
1: import java.io.IOException;
1: 
1: import junit.framework.TestCase;
1: 
1: import org.apache.activemq.protobuf.Buffer;
1: import org.apache.activemq.store.kahadb.data.KahaAddMessageCommand;
1: import org.apache.activemq.store.kahadb.data.KahaDestination;
1: import org.apache.activemq.store.kahadb.data.KahaDestination.DestinationType;
1: import org.apache.activemq.store.kahadb.data.KahaEntryType;
1: import org.apache.activemq.util.ByteSequence;
1: import org.apache.activemq.util.DataByteArrayInputStream;
1: import org.apache.activemq.util.DataByteArrayOutputStream;
1: 
1: public class PBMesssagesTest extends TestCase {
1: 
1:     @SuppressWarnings("rawtypes")
1:     public void testKahaAddMessageCommand() throws IOException {
1: 
1:        KahaAddMessageCommand expected = new KahaAddMessageCommand();
1:        expected.setDestination(new KahaDestination().setName("Foo").setType(DestinationType.QUEUE));
1:        expected.setMessage(new Buffer(new byte[] {1,2,3,4,5,6} ));
1:        expected.setMessageId("Hello World");
1: 
1:        int size = expected.serializedSizeFramed();
1:        DataByteArrayOutputStream os = new DataByteArrayOutputStream(size + 1);
1:        os.writeByte(expected.type().getNumber());
1:        expected.writeFramed(os);
1:        ByteSequence seq = os.toByteSequence();
1: 
1:        DataByteArrayInputStream is = new DataByteArrayInputStream(seq);
1:        KahaEntryType type = KahaEntryType.valueOf(is.readByte());
1:        JournalCommand message = (JournalCommand)type.createMessage();
1:        message.mergeFramed(is);
1: 
1:        assertEquals(expected, message);
1:     }
1: 
1: }
author:Timothy A. Bish
-------------------------------------------------------------------------------
commit:4743a20
/////////////////////////////////////////////////////////////////////////
0: import org.apache.activemq.store.kahadb.data.KahaEntryType;
0:     @SuppressWarnings("rawtypes")
0: 
0: 
0: 
0: 
commit:ef24cc9
author:Hiram R. Chirino
-------------------------------------------------------------------------------
commit:1aab71b
/////////////////////////////////////////////////////////////////////////
0: import org.apache.activemq.util.ByteSequence;
0: import org.apache.activemq.util.DataByteArrayInputStream;
0: import org.apache.activemq.util.DataByteArrayOutputStream;
commit:f62737b
/////////////////////////////////////////////////////////////////////////
0: package org.apache.activemq.store.kahadb;
/////////////////////////////////////////////////////////////////////////
0: import org.apache.activemq.store.kahadb.data.KahaAddMessageCommand;
0: import org.apache.activemq.store.kahadb.data.KahaDestination;
0: import org.apache.activemq.store.kahadb.data.KahaEntryType;
0: import org.apache.activemq.store.kahadb.data.KahaDestination.DestinationType;
commit:456a2ba
/////////////////////////////////////////////////////////////////////////
0: /**
0:  * Licensed to the Apache Software Foundation (ASF) under one or more
0:  * contributor license agreements.  See the NOTICE file distributed with
0:  * this work for additional information regarding copyright ownership.
0:  * The ASF licenses this file to You under the Apache License, Version 2.0
0:  * (the "License"); you may not use this file except in compliance with
0:  * the License.  You may obtain a copy of the License at
0:  *
0:  *      http://www.apache.org/licenses/LICENSE-2.0
0:  *
0:  * Unless required by applicable law or agreed to in writing, software
0:  * distributed under the License is distributed on an "AS IS" BASIS,
0:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
0:  * See the License for the specific language governing permissions and
0:  * limitations under the License.
0:  */
0: package org.apache.kahadb.store;
0: 
0: import java.io.IOException;
0: 
0: import junit.framework.TestCase;
0: 
0: import org.apache.activemq.protobuf.Buffer;
0: import org.apache.kahadb.journal.Location;
0: import org.apache.kahadb.store.data.KahaAddMessageCommand;
0: import org.apache.kahadb.store.data.KahaDestination;
0: import org.apache.kahadb.store.data.KahaEntryType;
0: import org.apache.kahadb.store.data.KahaDestination.DestinationType;
0: import org.apache.kahadb.util.ByteSequence;
0: import org.apache.kahadb.util.DataByteArrayInputStream;
0: import org.apache.kahadb.util.DataByteArrayOutputStream;
0: 
0: public class PBMesssagesTest extends TestCase {
0: 
0:     public void testKahaAddMessageCommand() throws IOException {
0: 
0:        KahaAddMessageCommand expected = new KahaAddMessageCommand();
0:        expected.setDestination(new KahaDestination().setName("Foo").setType(DestinationType.QUEUE));
0:        expected.setMessage(new Buffer(new byte[] {1,2,3,4,5,6} ));
0:        expected.setMessageId("Hello World");
0:        
0:        int size = expected.serializedSizeFramed();
0:        DataByteArrayOutputStream os = new DataByteArrayOutputStream(size + 1);
0:        os.writeByte(expected.type().getNumber());
0:        expected.writeFramed(os);
0:        ByteSequence seq = os.toByteSequence();
0:        
0:        DataByteArrayInputStream is = new DataByteArrayInputStream(seq);
0:        KahaEntryType type = KahaEntryType.valueOf(is.readByte());
0:        JournalCommand message = (JournalCommand)type.createMessage();
0:        message.mergeFramed(is);
0:        
0:        assertEquals(expected, message);
0:     }
0:     
0: }
============================================================================