2:2528015: /**
1:57b4941:  * Licensed to the Apache Software Foundation (ASF) under one or more
1:57b4941:  * contributor license agreements.  See the NOTICE file distributed with
1:57b4941:  * this work for additional information regarding copyright ownership.
1:57b4941:  * The ASF licenses this file to You under the Apache License, Version 2.0
1:57b4941:  * (the "License"); you may not use this file except in compliance with
1:57b4941:  * the License.  You may obtain a copy of the License at
3:a107823:  *
1:5f1adbe:  *      http://www.apache.org/licenses/LICENSE-2.0
1:a107823:  *
1:a107823:  * Unless required by applicable law or agreed to in writing, software
1:a107823:  * distributed under the License is distributed on an "AS IS" BASIS,
1:a107823:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:a107823:  * See the License for the specific language governing permissions and
1:a107823:  * limitations under the License.
2:2528015:  */
1:a107823: package org.apache.activemq.transport.https;
1:2528015: 
1:540dd5c: import java.net.URI;
1:2528015: 
1:39da37d: import org.apache.activemq.broker.SslContext;
1:39da37d: import org.apache.activemq.transport.SecureSocketConnectorFactory;
1:a107823: import org.apache.activemq.transport.http.HttpTransportServer;
1:2528015: 
1:a107823: public class HttpsTransportServer extends HttpTransportServer {
1:2528015: 
1:789dc9c:     public HttpsTransportServer(URI uri, HttpsTransportFactory factory, SslContext context) {
1:ee4c8ee:         super(uri, factory);
1:39da37d:         this.socketConnectorFactory = new SecureSocketConnectorFactory(context);
1:2528015:     }
1:2528015: 
2:2528015: }
============================================================================
author:Hadrian Zbarcea
-------------------------------------------------------------------------------
commit:d54d046
author:Daniel Kulp
-------------------------------------------------------------------------------
commit:bc2e2d9
/////////////////////////////////////////////////////////////////////////
author:Hiram R. Chirino
-------------------------------------------------------------------------------
commit:9a1ad8c
commit:2528015
/////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////
0:     private String auth;
0: 	 public HttpsTransportServer(URI uri, HttpsTransportFactory factory) {
0:     	Krb5AndCertsSslSocketConnector sslConnector = new Krb5AndCertsSslSocketConnector();
1:     	
0:     	if(auth != null){
0:         	sslConnector.setMode(auth);
1:         }
1:     	
/////////////////////////////////////////////////////////////////////////
1:         
/////////////////////////////////////////////////////////////////////////
1:     /**
0: 	 * @return the auth
1: 	 */
0: 	public String getAuth() {
0: 		return auth;
1: 	}
1: 
1: 	/**
0: 	 * @param auth the auth to set
1: 	 */
0: 	public void setAuth(String auth) {
0: 		this.auth = auth;
1: 	}
1: 
commit:540dd5c
/////////////////////////////////////////////////////////////////////////
1: import java.net.URI;
0: 
0:     private String keyPassword = System.getProperty("javax.net.ssl.keyPassword");
0:     private String keyStorePassword = System.getProperty("javax.net.ssl.keyStorePassword");
0:     private String keyStore = System.getProperty("javax.net.ssl.keyStore");
0:     private String keyStoreType;
0:     private String secureRandomCertficateAlgorithm;
0:     private String trustCertificateAlgorithm;
0:     private String keyCertificateAlgorithm;
0:     private String protocol;
0:     public HttpsTransportServer(URI uri) {
0:         super(uri);
0:     }
0: 
0:     public void doStart() throws Exception {
0:         SslSocketConnector sslConnector = new SslSocketConnector();
0:         sslConnector.setKeystore(keyStore);
0:         sslConnector.setPassword(keyStorePassword);
0:         // if the keyPassword hasn't been set, default it to the
0:         // key store password
0:         if (keyPassword == null) {
0:             sslConnector.setKeyPassword(keyStorePassword);
0:         }
0:         if (keyStoreType != null) {
0:             sslConnector.setKeystoreType(keyStoreType);
0:         }
0:         if (secureRandomCertficateAlgorithm != null) {
0:             sslConnector.setSecureRandomAlgorithm(secureRandomCertficateAlgorithm);
0:         }
0:         if (keyCertificateAlgorithm != null) {
0:             sslConnector.setSslKeyManagerFactoryAlgorithm(keyCertificateAlgorithm);
0:         }
0:         if (trustCertificateAlgorithm != null) {
0:             sslConnector.setSslTrustManagerFactoryAlgorithm(trustCertificateAlgorithm);
0:         }
0:         if (protocol != null) {
0:             sslConnector.setProtocol(protocol);
0:         }
0: 
0:         super.doStart();
0:     }
0:     // Properties
0:     // --------------------------------------------------------------------------------
0:     public String getKeyStore() {
0:         return keyStore;
0:     }
0:     public void setKeyStore(String keyStore) {
0:         this.keyStore = keyStore;
0:     }
0:     public String getKeyPassword() {
0:         return keyPassword;
0:     }
0:     public void setKeyPassword(String keyPassword) {
0:         this.keyPassword = keyPassword;
0:     }
0:     public String getKeyStoreType() {
0:         return keyStoreType;
0:     }
0:     public void setKeyStoreType(String keyStoreType) {
0:         this.keyStoreType = keyStoreType;
0:     }
0:     public String getKeyStorePassword() {
0:         return keyStorePassword;
0:     }
0:     public void setKeyStorePassword(String keyStorePassword) {
0:         this.keyStorePassword = keyStorePassword;
0:     }
0:     public String getProtocol() {
0:         return protocol;
0:     }
0:     public void setProtocol(String protocol) {
0:         this.protocol = protocol;
0:     }
0:     public String getSecureRandomCertficateAlgorithm() {
0:         return secureRandomCertficateAlgorithm;
0:     }
0:     public void setSecureRandomCertficateAlgorithm(String secureRandomCertficateAlgorithm) {
0:         this.secureRandomCertficateAlgorithm = secureRandomCertficateAlgorithm;
0:     }
0:     public String getKeyCertificateAlgorithm() {
0:         return keyCertificateAlgorithm;
0:     }
0: 
0:     public void setKeyCertificateAlgorithm(String keyCertificateAlgorithm) {
0:         this.keyCertificateAlgorithm = keyCertificateAlgorithm;
0:     }
0: 
0:     public String getTrustCertificateAlgorithm() {
0:         return trustCertificateAlgorithm;
0:     }
0: 
0:     public void setTrustCertificateAlgorithm(String trustCertificateAlgorithm) {
0:         this.trustCertificateAlgorithm = trustCertificateAlgorithm;
0:     }
commit:5f1adbe
/////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////
1:  *      http://www.apache.org/licenses/LICENSE-2.0
commit:57b4941
/////////////////////////////////////////////////////////////////////////
1:  * Licensed to the Apache Software Foundation (ASF) under one or more
1:  * contributor license agreements.  See the NOTICE file distributed with
1:  * this work for additional information regarding copyright ownership.
1:  * The ASF licenses this file to You under the Apache License, Version 2.0
1:  * (the "License"); you may not use this file except in compliance with
1:  * the License.  You may obtain a copy of the License at
commit:a107823
/////////////////////////////////////////////////////////////////////////
0: /**
1:  *
0:  * Copyright 2005-2006 The Apache Software Foundation
1:  *
0:  * Licensed under the Apache License, Version 2.0 (the "License");
0:  * you may not use this file except in compliance with the License.
0:  * You may obtain a copy of the License at
1:  *
0:  * http://www.apache.org/licenses/LICENSE-2.0
1:  *
1:  * Unless required by applicable law or agreed to in writing, software
1:  * distributed under the License is distributed on an "AS IS" BASIS,
1:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:  * See the License for the specific language governing permissions and
1:  * limitations under the License.
0:  */
1: package org.apache.activemq.transport.https;
0: 
1: import org.apache.activemq.transport.http.HttpTransportServer;
0: import org.mortbay.jetty.security.SslSocketConnector;
0: 
0: import java.net.URI;
0: 
1: public class HttpsTransportServer extends HttpTransportServer {
0: 
0: 	private String keyPassword = System.getProperty( "javax.net.ssl.keyPassword" );
0: 	private String keyStorePassword = System.getProperty( "javax.net.ssl.keyStorePassword" );
0: 	private String keyStore = System.getProperty( "javax.net.ssl.keyStore" );
0: 	private String keyStoreType = null;
0: 	private String certificateAlgorithm = null;
0: 	private String protocol = null;
0: 	
0: 	public HttpsTransportServer( URI uri ) {
0: 		super( uri );
0: 	}
0: 
0: 	public void start() throws Exception {
0: 		SslSocketConnector sslConnector = new SslSocketConnector();
0: 		sslConnector.setKeystore( keyStore );
0: 		sslConnector.setPassword( keyStorePassword );
0: 		// if the keyPassword hasn't been set, default it to the
0: 		// key store password
0: 		if ( keyPassword == null ) {
0: 			sslConnector.setKeyPassword( keyStorePassword );	
0: 		}
0: 		if ( keyStoreType != null ) {
0: 			sslConnector.setKeystoreType( keyStoreType );
0: 		}
0: 		if ( certificateAlgorithm != null ) {
0: 			sslConnector.setAlgorithm( certificateAlgorithm );
0: 		}
0: 		if ( protocol != null ) {
0: 			sslConnector.setProtocol( protocol );
0: 		}
0: 		
0:         setConnector(sslConnector);
0: 		
0: 		super.start();
0: 	}
0: 	
0: 	// Properties
0: 	//--------------------------------------------------------------------------------
0: 	
0: 	public String getCertificateAlgorithm() {
0: 		return certificateAlgorithm;
0: 	}
0: 
0: 	public void setCertificateAlgorithm( String certificateAlgorithm ) {
0: 		this.certificateAlgorithm = certificateAlgorithm;
0: 	}
0: 
0: 	public String getKeyStore() {
0: 		return keyStore;
0: 	}
0: 
0: 	public void setKeyStore( String keyStore ) {
0: 		this.keyStore = keyStore;
0: 	}
0: 
0: 	public String getKeyPassword() {
0: 		return keyPassword;
0: 	}
0: 
0: 	public void setKeyPassword( String keyPassword ) {
0: 		this.keyPassword = keyPassword;
0: 	}
0: 
0: 	public String getKeyStoreType() {
0: 		return keyStoreType;
0: 	}
0: 
0: 	public void setKeyStoreType( String keyStoreType ) {
0: 		this.keyStoreType = keyStoreType;
0: 	}
0: 
0: 	public String getKeyStorePassword() {
0: 		return keyStorePassword;
0: 	}
0: 
0: 	public void setKeyStorePassword( String keyStorePassword ) {
0: 		this.keyStorePassword = keyStorePassword;
0: 	}
0: 
0: 	public String getProtocol() {
0: 		return protocol;
0: 	}
0: 
0: 	public void setProtocol( String protocol ) {
0: 		this.protocol = protocol;
0: 	}
0: 
0: }
commit:5be5a62
/////////////////////////////////////////////////////////////////////////
0:  *
0:  * Copyright 2005-2006 The Apache Software Foundation
0:  *
0:  * Licensed under the Apache License, Version 2.0 (the "License");
0:  * you may not use this file except in compliance with the License.
0:  * You may obtain a copy of the License at
0:  *
0:  *
0:  * distributed under the License is distributed on an "AS IS" BASIS,
0:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
0:  * See the License for the specific language governing permissions and
0:  * limitations under the License.
0:  */
commit:8abcfd1
/////////////////////////////////////////////////////////////////////////
0: package org.apache.activemq.transport.https;
0: import org.apache.activemq.transport.http.HttpTransportServer;
author:Claus Ibsen
-------------------------------------------------------------------------------
commit:3b4aadc
/////////////////////////////////////////////////////////////////////////
0: import java.net.URI;
0: 
author:Bosanac Dejan
-------------------------------------------------------------------------------
commit:39da37d
/////////////////////////////////////////////////////////////////////////
1: import org.apache.activemq.broker.SslContext;
1: import org.apache.activemq.transport.SecureSocketConnectorFactory;
0: import org.apache.activemq.transport.http.HttpTransportServer;
0: import org.eclipse.jetty.server.Connector;
0: 
1:         this.socketConnectorFactory = new SecureSocketConnectorFactory(context);
0:         Connector sslConnector = socketConnectorFactory.createConnector();
commit:e8a06c4
/////////////////////////////////////////////////////////////////////////
0: import org.eclipse.jetty.server.ssl.SslSocketConnector;
author:Timothy A. Bish
-------------------------------------------------------------------------------
commit:789dc9c
/////////////////////////////////////////////////////////////////////////
0: import javax.net.ssl.SSLContext;
0: 
0: import org.apache.activemq.broker.SslContext;
0: import org.eclipse.jetty.util.ssl.SslContextFactory;
/////////////////////////////////////////////////////////////////////////
0:     private SslContext context;
1:     public HttpsTransportServer(URI uri, HttpsTransportFactory factory, SslContext context) {
0:         this.context = context;
0:         SSLContext sslContext = context == null ? null : context.getSSLContext();
0:         
0: 		// Get a reference to the current ssl context factory...
0: 		SslContextFactory factory = sslConnector.getSslContextFactory();
0: 		
0: 		if (context != null) {
0: 			
0: 			// Should not be using this method since it does not use all of the values 
0: 			// from the passed SslContext instance.....
0: 			factory.setSslContext(sslContext);
0: 			
0: 		} else {
0: 			if (auth != null) {
0: 				sslConnector.setMode(auth);
0: 			}
0: 			if (keyStore != null) {
0: 				factory.setKeyStorePath(keyStore);
0: 			}
0: 			if (keyStorePassword != null) {
0: 				factory.setKeyStorePassword(keyStorePassword);
0: 			}
0: 			// if the keyPassword hasn't been set, default it to the
0: 			// key store password
0: 			if (keyPassword == null && keyStorePassword != null) {
0: 				factory.setKeyStorePassword(keyStorePassword);
0: 			}
0: 			if (keyStoreType != null) {
0: 				factory.setKeyStoreType(keyStoreType);
0: 			}
0: 			if (secureRandomCertficateAlgorithm != null) {
0: 				factory.setSecureRandomAlgorithm(secureRandomCertficateAlgorithm);
0: 			}
0: 			if (keyCertificateAlgorithm != null) {
0: 				factory.setSslKeyManagerFactoryAlgorithm(keyCertificateAlgorithm);
0: 			}
0: 			if (trustCertificateAlgorithm != null) {
0: 				factory.setTrustManagerFactoryAlgorithm(trustCertificateAlgorithm);
0: 			}
0: 			if (protocol != null) {
0: 				factory.setProtocol(protocol);
0: 			}
0: 		}
0:         
commit:e778467
/////////////////////////////////////////////////////////////////////////
0:      public HttpsTransportServer(URI uri, HttpsTransportFactory factory) {
0:         Krb5AndCertsSslSocketConnector sslConnector = new Krb5AndCertsSslSocketConnector();
0: 
0:         if(auth != null){
0:             sslConnector.setMode(auth);
0: 
0:         sslConnector.getSslContextFactory().setKeyStore(keyStore);
0:         sslConnector.getSslContextFactory().setKeyStorePassword(keyStorePassword);
0:             sslConnector.getSslContextFactory().setKeyStorePassword(keyStorePassword);
0:             sslConnector.getSslContextFactory().setKeyStoreType(keyStoreType);
0:             sslConnector.getSslContextFactory().setSecureRandomAlgorithm(secureRandomCertficateAlgorithm);
0:             sslConnector.getSslContextFactory().setSslKeyManagerFactoryAlgorithm(keyCertificateAlgorithm);
0:             sslConnector.getSslContextFactory().setTrustManagerFactoryAlgorithm(trustCertificateAlgorithm);
0:             sslConnector.getSslContextFactory().setProtocol(protocol);
0: 
/////////////////////////////////////////////////////////////////////////
0:      * @return the auth
0:      */
0:     public String getAuth() {
0:         return auth;
0:     }
0:     /**
0:      * @param auth the auth to set
0:      */
0:     public void setAuth(String auth) {
0:         this.auth = auth;
0:     }
author:Gary Tully
-------------------------------------------------------------------------------
commit:ee4c8ee
/////////////////////////////////////////////////////////////////////////
0:     public HttpsTransportServer(URI uri, HttpsTransportFactory factory) {
1:         super(uri, factory);
author:Frederick G. Oconer
-------------------------------------------------------------------------------
commit:ebf60bb
/////////////////////////////////////////////////////////////////////////
0: 	private String secureRandomCertficateAlgorithm = null;
0: 	private String trustCertificateAlgorithm = null;
0: 	private String keyCertificateAlgorithm = null;
/////////////////////////////////////////////////////////////////////////
0: 		if ( secureRandomCertficateAlgorithm != null ) {
0: 			sslConnector.setSecureRandomAlgorithm( secureRandomCertficateAlgorithm );
0: 		}
0: 		if ( keyCertificateAlgorithm != null ) {
0: 			sslConnector.setSslKeyManagerFactoryAlgorithm( keyCertificateAlgorithm );
0: 		}
0: 		if ( trustCertificateAlgorithm != null ) {
0: 			sslConnector.setSslTrustManagerFactoryAlgorithm( trustCertificateAlgorithm );
/////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////
0: 	public String getSecureRandomCertficateAlgorithm() {
0: 		return secureRandomCertficateAlgorithm;
0: 	}
0: 
0: 	public void setSecureRandomCertficateAlgorithm(String secureRandomCertficateAlgorithm) {
0: 		this.secureRandomCertficateAlgorithm = secureRandomCertficateAlgorithm;
0: 	}
0: 
0: 	public String getKeyCertificateAlgorithm() {
0: 		return keyCertificateAlgorithm;
0: 	}
0: 
0: 	public void setKeyCertificateAlgorithm(String keyCertificateAlgorithm) {
0: 		this.keyCertificateAlgorithm = keyCertificateAlgorithm;
0: 	}
0: 
0: 	public String getTrustCertificateAlgorithm() {
0: 		return trustCertificateAlgorithm;
0: 	}
0: 
0: 	public void setTrustCertificateAlgorithm(String trustCertificateAlgorithm) {
0: 		this.trustCertificateAlgorithm = trustCertificateAlgorithm;
0: 	}
0: 
author:Adrian T. Co
-------------------------------------------------------------------------------
commit:7531e3e
/////////////////////////////////////////////////////////////////////////
0: 	public void doStart() throws Exception {
/////////////////////////////////////////////////////////////////////////
0: 		super.doStart();
author:James Strachan
-------------------------------------------------------------------------------
commit:40a7d3b
/////////////////////////////////////////////////////////////////////////
0: /**
0:  * 
0:  * Copyright 2005 LogicBlaze, Inc. http://www.logicblaze.com
0:  * 
0:  * Licensed under the Apache License, Version 2.0 (the "License"); 
0:  * you may not use this file except in compliance with the License. 
0:  * You may obtain a copy of the License at 
0:  * 
0:  * http://www.apache.org/licenses/LICENSE-2.0
0:  * 
0:  * Unless required by applicable law or agreed to in writing, software
0:  * distributed under the License is distributed on an "AS IS" BASIS, 
0:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. 
0:  * See the License for the specific language governing permissions and 
0:  * limitations under the License. 
0:  * 
0:  **/
0: package org.activemq.transport.https;
0: 
0: import org.activemq.transport.http.HttpTransportServer;
0: import org.mortbay.jetty.security.SslSocketConnector;
0: 
0: import java.net.URI;
0: 
0: public class HttpsTransportServer extends HttpTransportServer {
0: 
0: 	private String keyPassword = System.getProperty( "javax.net.ssl.keyPassword" );
0: 	private String keyStorePassword = System.getProperty( "javax.net.ssl.keyStorePassword" );
0: 	private String keyStore = System.getProperty( "javax.net.ssl.keyStore" );
0: 	private String keyStoreType = null;
0: 	private String certificateAlgorithm = null;
0: 	private String protocol = null;
0: 	
0: 	public HttpsTransportServer( URI uri ) {
0: 		super( uri );
0: 	}
0: 
0: 	public void start() throws Exception {
0: 		SslSocketConnector sslConnector = new SslSocketConnector();
0: 		sslConnector.setKeystore( keyStore );
0: 		sslConnector.setPassword( keyStorePassword );
0: 		// if the keyPassword hasn't been set, default it to the
0: 		// key store password
0: 		if ( keyPassword == null ) {
0: 			sslConnector.setKeyPassword( keyStorePassword );	
0: 		}
0: 		if ( keyStoreType != null ) {
0: 			sslConnector.setKeystoreType( keyStoreType );
0: 		}
0: 		if ( certificateAlgorithm != null ) {
0: 			sslConnector.setAlgorithm( certificateAlgorithm );
0: 		}
0: 		if ( protocol != null ) {
0: 			sslConnector.setProtocol( protocol );
0: 		}
0: 		
0:         setConnector(sslConnector);
0: 		
0: 		super.start();
0: 	}
0: 	
0: 	// Properties
0: 	//--------------------------------------------------------------------------------
0: 	
0: 	public String getCertificateAlgorithm() {
0: 		return certificateAlgorithm;
0: 	}
0: 
0: 	public void setCertificateAlgorithm( String certificateAlgorithm ) {
0: 		this.certificateAlgorithm = certificateAlgorithm;
0: 	}
0: 
0: 	public String getKeyStore() {
0: 		return keyStore;
0: 	}
0: 
0: 	public void setKeyStore( String keyStore ) {
0: 		this.keyStore = keyStore;
0: 	}
0: 
0: 	public String getKeyPassword() {
0: 		return keyPassword;
0: 	}
0: 
0: 	public void setKeyPassword( String keyPassword ) {
0: 		this.keyPassword = keyPassword;
0: 	}
0: 
0: 	public String getKeyStoreType() {
0: 		return keyStoreType;
0: 	}
0: 
0: 	public void setKeyStoreType( String keyStoreType ) {
0: 		this.keyStoreType = keyStoreType;
0: 	}
0: 
0: 	public String getKeyStorePassword() {
0: 		return keyStorePassword;
0: 	}
0: 
0: 	public void setKeyStorePassword( String keyStorePassword ) {
0: 		this.keyStorePassword = keyStorePassword;
0: 	}
0: 
0: 	public String getProtocol() {
0: 		return protocol;
0: 	}
0: 
0: 	public void setProtocol( String protocol ) {
0: 		this.protocol = protocol;
0: 	}
0: 
0: }
============================================================================