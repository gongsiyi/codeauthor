1:3f32507: /*
1:3f32507:  * ? 2001-2009, Progress Software Corporation and/or its subsidiaries or affiliates.  All rights reserved.
1:3f32507:  *
1:3f32507:  * Licensed under the Apache License, Version 2.0 (the "License");
1:3f32507:  * you may not use this file except in compliance with the License.
1:3f32507:  * You may obtain a copy of the License at
1:3f32507:  *
1:3f32507:  *      http://www.apache.org/licenses/LICENSE-2.0
1:3f32507:  *
1:3f32507:  * Unless required by applicable law or agreed to in writing, software
1:3f32507:  * distributed under the License is distributed on an "AS IS" BASIS,
1:3f32507:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:3f32507:  * See the License for the specific language governing permissions and
1:3f32507:  * limitations under the License.
1:3f32507:  
1:3f32507: Sample Application
1:3f32507: 
1:3f32507: Writing a Basic JMS Application using Point-to-Point (Queues) with
1:3f32507: a Message Selector
1:3f32507: 
1:3f32507: This sample starts up with a username, and the queues you are
1:3f32507: sending on, and receiving on.
1:3f32507: 
1:3f32507: When messages are sent to a queue a property is set in the message header to
1:3f32507: a property value supplied on the command line. A separate command line
1:3f32507: value is used as a message selector for messages in the receive queue. In this
1:3f32507: sample we choose to create a property named "Department"
1:3f32507: 
1:3f32507: Writing a line and pressing enter will send the message only to the
1:3f32507: indicated 'Talk' partner (or QueueReceiver).
1:3f32507: 
1:3f32507: Usage:
1:3f32507:   java SelectorTalk -b <broker:port> -u <username> -p <password> -qs <queue> -qr <queue>
1:3f32507:             -s <selection>
1:3f32507:       -b broker:port points to your message broker
1:3f32507:                      Default: tcp://localhost:61616
1:3f32507:       -u username    must be unique (but is not checked)
1:3f32507:       -p password    password for user (not checked)
1:3f32507:       -qr queue      name of queue to receive
1:3f32507:       -qs queue      name of queue to send
1:3f32507:       -s selector    the message selection value
1:3f32507: 
1:3f32507: You must specify either a queue for sending or receiving (or both) as well as
1:3f32507: a value with which to select received messages.
1:3f32507: 
1:3f32507: 
1:3f32507: Suggested demonstration:
1:3f32507:   - In separate console windows with the environment set,
1:3f32507:     start instances of the application under unique user names.
1:3f32507:     For example:
1:3f32507:        java SelectorTalk -u BOB -s SALES -qr  Q1 -qs  Q2
1:3f32507:        java SelectorTalk -u SALLY -s SALES -qr  Q2 -qs   Q1
1:3f32507:   - Enter text and then press Enter to send the message.
1:3f32507:   - See messages appear under the user's indicated name.
1:3f32507:   - Try changing the message selector on one console and note that it will
1:3f32507:     no longer receive messages.
1:3f32507:   - Stop a session by pressing CTRL+C in its console window.
1:3f32507: 
1:3f32507: */
1:3f32507: import org.apache.activemq.*;
1:3f32507: 
1:3f32507: public class SelectorTalk
1:3f32507:     implements javax.jms.MessageListener
1:3f32507: {
1:3f32507:     private static final String DEFAULT_BROKER_NAME = "tcp://localhost:61616";
1:3f32507:     private static final String PROPERTY_NAME = "Department";
1:3f32507:     private static final String DEFAULT_PASSWORD = "password";
1:3f32507:     private static final int    MESSAGE_LIFESPAN = 1800000;  // milliseconds (30 minutes)
1:3f32507: 
1:3f32507:     private javax.jms.Connection connect = null;
1:3f32507:     private javax.jms.Session sendSession = null;
1:3f32507:     private javax.jms.Session receiveSession = null;
1:3f32507:     private javax.jms.MessageProducer sender = null;
1:3f32507: 
1:3f32507:     /** Create JMS client for sending and receiving messages. */
1:3f32507:     private void talker( String broker, String username, String password, String rQueue, String sQueue, String selection)
1:3f32507:     {
1:3f32507:         // Create a connection.
1:3f32507:         try
1:3f32507:          {
1:3f32507:             javax.jms.ConnectionFactory factory;
1:3f32507:             factory = new ActiveMQConnectionFactory(username, password, broker);
1:3f32507:             connect = factory.createConnection (username, password);
1:3f32507:             sendSession = connect.createSession(false,javax.jms.Session.AUTO_ACKNOWLEDGE);
1:3f32507:             receiveSession = connect.createSession(false,javax.jms.Session.AUTO_ACKNOWLEDGE);
1:3f32507:         }
1:3f32507:         catch (javax.jms.JMSException jmse)
1:3f32507:         {
1:3f32507:             System.err.println("error: Cannot connect to Broker - " + broker);
1:3f32507:             jmse.printStackTrace();
1:3f32507:             System.exit(1);
1:3f32507:         }
1:3f32507: 
1:3f32507:         // Create Sender and Receiver 'Talk' queues
1:3f32507:         try
1:3f32507:         {
1:3f32507:             if (sQueue != null)
1:3f32507:             {
1:3f32507:                 javax.jms.Queue sendQueue = sendSession.createQueue (sQueue);
1:3f32507:                 sender = sendSession.createProducer(sendQueue);
1:3f32507:             }
1:3f32507:             if (rQueue != null)
1:3f32507:             {
1:3f32507:                 //NOTE: the Queue Receiver is set up with the Message Selector:
1:3f32507:                 javax.jms.Queue receiveQueue = receiveSession.createQueue (rQueue);
1:3f32507:                 javax.jms.MessageConsumer qReceiver = receiveSession.createConsumer(receiveQueue, PROPERTY_NAME + " = \'" + selection + "\'");
1:3f32507:                 qReceiver.setMessageListener(this);
1:3f32507:                 connect.start();
1:3f32507:             }
1:3f32507:         }
1:3f32507:         catch (javax.jms.JMSException jmse)
1:3f32507:         {
1:3f32507:             jmse.printStackTrace();
1:3f32507:             exit();
1:3f32507:         }
1:3f32507: 
1:3f32507:         try
1:3f32507:         {
1:3f32507:             if (rQueue != null)
1:3f32507:                System.out.println ("");
1:3f32507:             else
1:3f32507:                System.out.println ("\nNo receiving queue specified.\n");
1:3f32507: 
1:3f32507:             // Read all standard input and send it as a message.
1:3f32507:             java.io.BufferedReader stdin =
1:3f32507:                 new java.io.BufferedReader( new java.io.InputStreamReader( System.in ) );
1:3f32507:             if (sQueue != null)
1:3f32507:                 System.out.println ("SelectorTalk application:\n"
1:3f32507: 			            	      + "=========================\n"
1:3f32507: 			            	  + "The application user " + username + " connects to the broker at " + DEFAULT_BROKER_NAME + ".\n"
1:3f32507: 							  + "The application will send messages with " + PROPERTY_NAME + " set to " + selection + " to the " + sQueue + " queue.\n"
1:3f32507:                               + "The application creates a receiver on the " + rQueue + " queue selecting only messages where " + PROPERTY_NAME + " is " + selection + ".\n\n"
1:3f32507: 
1:3f32507: 							  + "Type some text, and then press Enter to publish it as a TextMesssage from " + username + ".\n");
1:3f32507:             else
1:3f32507:                 System.out.println ("\nPress CTRL-C to exit.\n");
1:3f32507: 
1:3f32507:             while ( true )
1:3f32507:             {
1:3f32507:                 String s = stdin.readLine();
1:3f32507: 
1:3f32507:                 if ( s == null )
1:3f32507:                     exit();
1:3f32507:                 else if ( s.length() > 0 && sQueue != null)
1:3f32507:                 {
1:3f32507:                     javax.jms.TextMessage msg = sendSession.createTextMessage();
1:3f32507:                     msg.setText( username + ": " + s );
1:3f32507:                     // NOTE: here we set the property for each sent message.
1:3f32507:                     msg.setStringProperty(PROPERTY_NAME, selection);
1:3f32507:                     sender.send( msg,
1:3f32507:                                  javax.jms.DeliveryMode.PERSISTENT,
1:3f32507:                                  javax.jms.Message.DEFAULT_PRIORITY,
1:3f32507:                                  MESSAGE_LIFESPAN);
1:3f32507:                 }
1:3f32507:             }
1:3f32507:         }
1:3f32507:         catch ( java.io.IOException ioe )
1:3f32507:         {
1:3f32507:             ioe.printStackTrace();
1:3f32507:         }
1:3f32507:         catch ( javax.jms.JMSException jmse )
1:3f32507:         {
1:3f32507:             jmse.printStackTrace();
1:3f32507:         }
1:3f32507:         // Close the connection.
1:3f32507:         exit();
1:3f32507:     }
1:3f32507: 
1:3f32507:     /**
1:3f32507:      * Handle the message
1:3f32507:      * (as specified in the javax.jms.MessageListener interface).
1:3f32507:      */
1:3f32507:     public void onMessage( javax.jms.Message aMessage)
1:3f32507:     {
1:3f32507:         try
1:3f32507:         {
1:3f32507:             // Cast the message as a text message.
1:3f32507:             javax.jms.TextMessage textMessage = (javax.jms.TextMessage) aMessage;
1:3f32507: 
1:3f32507:             // This handler reads a single String from the
1:3f32507:             // message and prints it to the standard output.
1:3f32507:             try
1:3f32507:             {
1:3f32507:                 String string = textMessage.getText();
1:3f32507:                 System.out.println( string );
1:3f32507:             }
1:3f32507:             catch (javax.jms.JMSException jmse)
1:3f32507:             {
1:3f32507:                 jmse.printStackTrace();
1:3f32507:             }
1:3f32507:         }
1:3f32507:         catch (java.lang.RuntimeException rte)
1:3f32507:         {
1:3f32507:             rte.printStackTrace();
1:3f32507:         }
1:3f32507:     }
1:3f32507: 
1:3f32507:     /** Cleanup resources and then exit. */
1:3f32507:     private void exit()
1:3f32507:     {
1:3f32507:         try
1:3f32507:         {
1:3f32507:             connect.close();
1:3f32507:         }
1:3f32507:         catch (javax.jms.JMSException jmse)
1:3f32507:         {
1:3f32507:             jmse.printStackTrace();
1:3f32507:         }
1:3f32507: 
1:3f32507:         System.exit(0);
1:3f32507:     }
1:3f32507: 
1:3f32507:     //
1:3f32507:     // NOTE: the remainder of this sample deals with reading arguments
1:3f32507:     // and does not utilize any JMS classes or code.
1:3f32507:     //
1:3f32507: 
1:3f32507:     /** Main program entry point. */
1:3f32507:     public static void main(String argv[]) {
1:3f32507: 
1:3f32507:         // Is there anything to do?
1:3f32507:         if (argv.length == 0) {
1:3f32507:             printUsage();
1:3f32507:             System.exit(1);
1:3f32507:         }
1:3f32507: 
1:3f32507:         // Values to be read from parameters
1:3f32507:         String broker    	= DEFAULT_BROKER_NAME;
1:3f32507:         String username  	= null;
1:3f32507:         String password  	= DEFAULT_PASSWORD;
1:3f32507:         String qSender		= null;
1:3f32507:         String qReceiver	= null;
1:3f32507:         String selection    = null;
1:3f32507: 
1:3f32507:         // Check parameters
1:3f32507:         for (int i = 0; i < argv.length; i++) {
1:3f32507:             String arg = argv[i];
1:3f32507: 
1:3f32507:             // Options
1:3f32507:             if (!arg.startsWith("-")) {
1:3f32507:                 System.err.println ("error: unexpected argument - "+arg);
1:3f32507:                 printUsage();
1:3f32507:                 System.exit(1);
1:3f32507:             }
1:3f32507:             else {
1:3f32507:                 if (arg.equals("-b")) {
1:3f32507:                     if (i == argv.length - 1 || argv[i+1].startsWith("-")) {
1:3f32507:                         System.err.println("error: missing broker name:port");
1:3f32507:                         System.exit(1);
1:3f32507:                     }
1:3f32507:                     broker = argv[++i];
1:3f32507:                     continue;
1:3f32507:                 }
1:3f32507: 
1:3f32507:                 if (arg.equals("-u")) {
1:3f32507:                     if (i == argv.length - 1 || argv[i+1].startsWith("-")) {
1:3f32507:                         System.err.println("error: missing user name");
1:3f32507:                         System.exit(1);
1:3f32507:                     }
1:3f32507:                     username = argv[++i];
1:3f32507:                     continue;
1:3f32507:                 }
1:3f32507: 
1:3f32507:                 if (arg.equals("-p")) {
1:3f32507:                     if (i == argv.length - 1 || argv[i+1].startsWith("-")) {
1:3f32507:                         System.err.println("error: missing password");
1:3f32507:                         System.exit(1);
1:3f32507:                     }
1:3f32507:                     password = argv[++i];
1:3f32507:                     continue;
1:3f32507:                 }
1:3f32507: 
1:3f32507:                 if (arg.equals("-qr")) {
1:3f32507:                     if (i == argv.length - 1 || argv[i+1].startsWith("-")) {
1:3f32507:                         System.err.println("error: missing receive queue parameter");
1:3f32507:                         System.exit(1);
1:3f32507:                     }
1:3f32507:                     qReceiver = argv[++i];
1:3f32507:                     continue;
1:3f32507:                 }
1:3f32507: 
1:3f32507:                 if (arg.equals("-qs")) {
1:3f32507:                     if (i == argv.length - 1 || argv[i+1].startsWith("-")) {
1:3f32507:                         System.err.println("error: missing send queue parameter");
1:3f32507:                         System.exit(1);
1:3f32507:                     }
1:3f32507:                     qSender = argv[++i];
1:3f32507:                     continue;
1:3f32507:                 }
1:3f32507: 
1:3f32507:                 if (arg.equals("-s")) {
1:3f32507:                     if (i == argv.length - 1 || argv[i+1].startsWith("-")) {
1:3f32507:                         System.err.println("error: missing selectiion");
1:3f32507:                         System.exit(1);
1:3f32507:                     }
1:3f32507:                     selection = argv[++i];
1:3f32507:                     continue;
1:3f32507:                 }
1:3f32507: 
1:3f32507:                 if (arg.equals("-h")) {
1:3f32507:                     printUsage();
1:3f32507:                     System.exit(1);
1:3f32507:                 }
1:3f32507:             }
1:3f32507:         }
1:3f32507: 
1:3f32507:         // Check values read in.
1:3f32507:         if (username == null) {
1:3f32507:             System.err.println ("error: user name must be supplied");
1:3f32507:             printUsage();
1:3f32507:             System.exit(1);
1:3f32507:         }
1:3f32507: 
1:3f32507:         if (qReceiver == null && qSender == null) {
1:3f32507:             System.err.println ("error: receive queue, or send queue, must be supplied");
1:3f32507:             printUsage();
1:3f32507:             System.exit(1);
1:3f32507:         }
1:3f32507: 
1:3f32507:         if (selection == null) {
1:3f32507:             System.err.println ("error: selection must be supplied (e.g. -s SALES)\n");
1:3f32507:             printUsage();
1:3f32507:             System.exit(1);
1:3f32507:         }
1:3f32507: 
1:3f32507: 
1:3f32507:         // Start the JMS client for the "Talk".
1:3f32507:         SelectorTalk talk = new SelectorTalk();
1:3f32507:         talk.talker (broker, username, password, qReceiver, qSender, selection);
1:3f32507: 
1:3f32507:     }
1:3f32507: 
1:3f32507:     /** Prints the usage. */
1:3f32507:     private static void printUsage() {
1:3f32507: 
1:3f32507:         StringBuffer use = new StringBuffer();
1:3f32507:         use.append("usage: java SelectorTalk (options) ...\n\n");
1:3f32507:         use.append("options:\n");
1:3f32507:         use.append("  -b  name:port Specify name:port of broker.\n");
1:3f32507:         use.append("                Default broker: "+DEFAULT_BROKER_NAME+"\n");
1:3f32507:         use.append("  -u  name      Specify unique user name. (Required)\n");
1:3f32507:         use.append("  -p  password  Specify password for user.\n");
1:3f32507:         use.append("                Default password: "+DEFAULT_PASSWORD+"\n");
1:3f32507:         use.append("  -qr queue     Specify queue for receiving messages.\n");
1:3f32507:         use.append("  -qs queue     Specify queue for sending messages.\n");
1:3f32507:         use.append("  -s  selection required, selection used to receive messages.\n");
1:3f32507:         use.append("  -h            This help screen.\n");
1:3f32507:         System.err.println (use);
1:3f32507:     }
1:3f32507: 
1:3f32507: }
============================================================================
author:Hadrian Zbarcea
-------------------------------------------------------------------------------
commit:3f32507
/////////////////////////////////////////////////////////////////////////
1: /*
1:  * ? 2001-2009, Progress Software Corporation and/or its subsidiaries or affiliates.  All rights reserved.
1:  *
1:  * Licensed under the Apache License, Version 2.0 (the "License");
1:  * you may not use this file except in compliance with the License.
1:  * You may obtain a copy of the License at
1:  *
1:  *      http://www.apache.org/licenses/LICENSE-2.0
1:  *
1:  * Unless required by applicable law or agreed to in writing, software
1:  * distributed under the License is distributed on an "AS IS" BASIS,
1:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:  * See the License for the specific language governing permissions and
1:  * limitations under the License.
1:  
1: Sample Application
1: 
1: Writing a Basic JMS Application using Point-to-Point (Queues) with
1: a Message Selector
1: 
1: This sample starts up with a username, and the queues you are
1: sending on, and receiving on.
1: 
1: When messages are sent to a queue a property is set in the message header to
1: a property value supplied on the command line. A separate command line
1: value is used as a message selector for messages in the receive queue. In this
1: sample we choose to create a property named "Department"
1: 
1: Writing a line and pressing enter will send the message only to the
1: indicated 'Talk' partner (or QueueReceiver).
1: 
1: Usage:
1:   java SelectorTalk -b <broker:port> -u <username> -p <password> -qs <queue> -qr <queue>
1:             -s <selection>
1:       -b broker:port points to your message broker
1:                      Default: tcp://localhost:61616
1:       -u username    must be unique (but is not checked)
1:       -p password    password for user (not checked)
1:       -qr queue      name of queue to receive
1:       -qs queue      name of queue to send
1:       -s selector    the message selection value
1: 
1: You must specify either a queue for sending or receiving (or both) as well as
1: a value with which to select received messages.
1: 
1: 
1: Suggested demonstration:
1:   - In separate console windows with the environment set,
1:     start instances of the application under unique user names.
1:     For example:
1:        java SelectorTalk -u BOB -s SALES -qr  Q1 -qs  Q2
1:        java SelectorTalk -u SALLY -s SALES -qr  Q2 -qs   Q1
1:   - Enter text and then press Enter to send the message.
1:   - See messages appear under the user's indicated name.
1:   - Try changing the message selector on one console and note that it will
1:     no longer receive messages.
1:   - Stop a session by pressing CTRL+C in its console window.
1: 
1: */
1: import org.apache.activemq.*;
1: 
1: public class SelectorTalk
1:     implements javax.jms.MessageListener
1: {
1:     private static final String DEFAULT_BROKER_NAME = "tcp://localhost:61616";
1:     private static final String PROPERTY_NAME = "Department";
1:     private static final String DEFAULT_PASSWORD = "password";
1:     private static final int    MESSAGE_LIFESPAN = 1800000;  // milliseconds (30 minutes)
1: 
1:     private javax.jms.Connection connect = null;
1:     private javax.jms.Session sendSession = null;
1:     private javax.jms.Session receiveSession = null;
1:     private javax.jms.MessageProducer sender = null;
1: 
1:     /** Create JMS client for sending and receiving messages. */
1:     private void talker( String broker, String username, String password, String rQueue, String sQueue, String selection)
1:     {
1:         // Create a connection.
1:         try
1:          {
1:             javax.jms.ConnectionFactory factory;
1:             factory = new ActiveMQConnectionFactory(username, password, broker);
1:             connect = factory.createConnection (username, password);
1:             sendSession = connect.createSession(false,javax.jms.Session.AUTO_ACKNOWLEDGE);
1:             receiveSession = connect.createSession(false,javax.jms.Session.AUTO_ACKNOWLEDGE);
1:         }
1:         catch (javax.jms.JMSException jmse)
1:         {
1:             System.err.println("error: Cannot connect to Broker - " + broker);
1:             jmse.printStackTrace();
1:             System.exit(1);
1:         }
1: 
1:         // Create Sender and Receiver 'Talk' queues
1:         try
1:         {
1:             if (sQueue != null)
1:             {
1:                 javax.jms.Queue sendQueue = sendSession.createQueue (sQueue);
1:                 sender = sendSession.createProducer(sendQueue);
1:             }
1:             if (rQueue != null)
1:             {
1:                 //NOTE: the Queue Receiver is set up with the Message Selector:
1:                 javax.jms.Queue receiveQueue = receiveSession.createQueue (rQueue);
1:                 javax.jms.MessageConsumer qReceiver = receiveSession.createConsumer(receiveQueue, PROPERTY_NAME + " = \'" + selection + "\'");
1:                 qReceiver.setMessageListener(this);
1:                 connect.start();
1:             }
1:         }
1:         catch (javax.jms.JMSException jmse)
1:         {
1:             jmse.printStackTrace();
1:             exit();
1:         }
1: 
1:         try
1:         {
1:             if (rQueue != null)
1:                System.out.println ("");
1:             else
1:                System.out.println ("\nNo receiving queue specified.\n");
1: 
1:             // Read all standard input and send it as a message.
1:             java.io.BufferedReader stdin =
1:                 new java.io.BufferedReader( new java.io.InputStreamReader( System.in ) );
1:             if (sQueue != null)
1:                 System.out.println ("SelectorTalk application:\n"
1: 			            	      + "=========================\n"
1: 			            	  + "The application user " + username + " connects to the broker at " + DEFAULT_BROKER_NAME + ".\n"
1: 							  + "The application will send messages with " + PROPERTY_NAME + " set to " + selection + " to the " + sQueue + " queue.\n"
1:                               + "The application creates a receiver on the " + rQueue + " queue selecting only messages where " + PROPERTY_NAME + " is " + selection + ".\n\n"
1: 
1: 							  + "Type some text, and then press Enter to publish it as a TextMesssage from " + username + ".\n");
1:             else
1:                 System.out.println ("\nPress CTRL-C to exit.\n");
1: 
1:             while ( true )
1:             {
1:                 String s = stdin.readLine();
1: 
1:                 if ( s == null )
1:                     exit();
1:                 else if ( s.length() > 0 && sQueue != null)
1:                 {
1:                     javax.jms.TextMessage msg = sendSession.createTextMessage();
1:                     msg.setText( username + ": " + s );
1:                     // NOTE: here we set the property for each sent message.
1:                     msg.setStringProperty(PROPERTY_NAME, selection);
1:                     sender.send( msg,
1:                                  javax.jms.DeliveryMode.PERSISTENT,
1:                                  javax.jms.Message.DEFAULT_PRIORITY,
1:                                  MESSAGE_LIFESPAN);
1:                 }
1:             }
1:         }
1:         catch ( java.io.IOException ioe )
1:         {
1:             ioe.printStackTrace();
1:         }
1:         catch ( javax.jms.JMSException jmse )
1:         {
1:             jmse.printStackTrace();
1:         }
1:         // Close the connection.
1:         exit();
1:     }
1: 
1:     /**
1:      * Handle the message
1:      * (as specified in the javax.jms.MessageListener interface).
1:      */
1:     public void onMessage( javax.jms.Message aMessage)
1:     {
1:         try
1:         {
1:             // Cast the message as a text message.
1:             javax.jms.TextMessage textMessage = (javax.jms.TextMessage) aMessage;
1: 
1:             // This handler reads a single String from the
1:             // message and prints it to the standard output.
1:             try
1:             {
1:                 String string = textMessage.getText();
1:                 System.out.println( string );
1:             }
1:             catch (javax.jms.JMSException jmse)
1:             {
1:                 jmse.printStackTrace();
1:             }
1:         }
1:         catch (java.lang.RuntimeException rte)
1:         {
1:             rte.printStackTrace();
1:         }
1:     }
1: 
1:     /** Cleanup resources and then exit. */
1:     private void exit()
1:     {
1:         try
1:         {
1:             connect.close();
1:         }
1:         catch (javax.jms.JMSException jmse)
1:         {
1:             jmse.printStackTrace();
1:         }
1: 
1:         System.exit(0);
1:     }
1: 
1:     //
1:     // NOTE: the remainder of this sample deals with reading arguments
1:     // and does not utilize any JMS classes or code.
1:     //
1: 
1:     /** Main program entry point. */
1:     public static void main(String argv[]) {
1: 
1:         // Is there anything to do?
1:         if (argv.length == 0) {
1:             printUsage();
1:             System.exit(1);
1:         }
1: 
1:         // Values to be read from parameters
1:         String broker    	= DEFAULT_BROKER_NAME;
1:         String username  	= null;
1:         String password  	= DEFAULT_PASSWORD;
1:         String qSender		= null;
1:         String qReceiver	= null;
1:         String selection    = null;
1: 
1:         // Check parameters
1:         for (int i = 0; i < argv.length; i++) {
1:             String arg = argv[i];
1: 
1:             // Options
1:             if (!arg.startsWith("-")) {
1:                 System.err.println ("error: unexpected argument - "+arg);
1:                 printUsage();
1:                 System.exit(1);
1:             }
1:             else {
1:                 if (arg.equals("-b")) {
1:                     if (i == argv.length - 1 || argv[i+1].startsWith("-")) {
1:                         System.err.println("error: missing broker name:port");
1:                         System.exit(1);
1:                     }
1:                     broker = argv[++i];
1:                     continue;
1:                 }
1: 
1:                 if (arg.equals("-u")) {
1:                     if (i == argv.length - 1 || argv[i+1].startsWith("-")) {
1:                         System.err.println("error: missing user name");
1:                         System.exit(1);
1:                     }
1:                     username = argv[++i];
1:                     continue;
1:                 }
1: 
1:                 if (arg.equals("-p")) {
1:                     if (i == argv.length - 1 || argv[i+1].startsWith("-")) {
1:                         System.err.println("error: missing password");
1:                         System.exit(1);
1:                     }
1:                     password = argv[++i];
1:                     continue;
1:                 }
1: 
1:                 if (arg.equals("-qr")) {
1:                     if (i == argv.length - 1 || argv[i+1].startsWith("-")) {
1:                         System.err.println("error: missing receive queue parameter");
1:                         System.exit(1);
1:                     }
1:                     qReceiver = argv[++i];
1:                     continue;
1:                 }
1: 
1:                 if (arg.equals("-qs")) {
1:                     if (i == argv.length - 1 || argv[i+1].startsWith("-")) {
1:                         System.err.println("error: missing send queue parameter");
1:                         System.exit(1);
1:                     }
1:                     qSender = argv[++i];
1:                     continue;
1:                 }
1: 
1:                 if (arg.equals("-s")) {
1:                     if (i == argv.length - 1 || argv[i+1].startsWith("-")) {
1:                         System.err.println("error: missing selectiion");
1:                         System.exit(1);
1:                     }
1:                     selection = argv[++i];
1:                     continue;
1:                 }
1: 
1:                 if (arg.equals("-h")) {
1:                     printUsage();
1:                     System.exit(1);
1:                 }
1:             }
1:         }
1: 
1:         // Check values read in.
1:         if (username == null) {
1:             System.err.println ("error: user name must be supplied");
1:             printUsage();
1:             System.exit(1);
1:         }
1: 
1:         if (qReceiver == null && qSender == null) {
1:             System.err.println ("error: receive queue, or send queue, must be supplied");
1:             printUsage();
1:             System.exit(1);
1:         }
1: 
1:         if (selection == null) {
1:             System.err.println ("error: selection must be supplied (e.g. -s SALES)\n");
1:             printUsage();
1:             System.exit(1);
1:         }
1: 
1: 
1:         // Start the JMS client for the "Talk".
1:         SelectorTalk talk = new SelectorTalk();
1:         talk.talker (broker, username, password, qReceiver, qSender, selection);
1: 
1:     }
1: 
1:     /** Prints the usage. */
1:     private static void printUsage() {
1: 
1:         StringBuffer use = new StringBuffer();
1:         use.append("usage: java SelectorTalk (options) ...\n\n");
1:         use.append("options:\n");
1:         use.append("  -b  name:port Specify name:port of broker.\n");
1:         use.append("                Default broker: "+DEFAULT_BROKER_NAME+"\n");
1:         use.append("  -u  name      Specify unique user name. (Required)\n");
1:         use.append("  -p  password  Specify password for user.\n");
1:         use.append("                Default password: "+DEFAULT_PASSWORD+"\n");
1:         use.append("  -qr queue     Specify queue for receiving messages.\n");
1:         use.append("  -qs queue     Specify queue for sending messages.\n");
1:         use.append("  -s  selection required, selection used to receive messages.\n");
1:         use.append("  -h            This help screen.\n");
1:         System.err.println (use);
1:     }
1: 
1: }
author:Hiram Chirino
-------------------------------------------------------------------------------
commit:2ecf41d
/////////////////////////////////////////////////////////////////////////
0: /*
0:  * ? 2001-2009, Progress Software Corporation and/or its subsidiaries or affiliates.  All rights reserved.
0:  *
0:  * Licensed under the Apache License, Version 2.0 (the "License");
0:  * you may not use this file except in compliance with the License.
0:  * You may obtain a copy of the License at
0:  *
0:  *      http://www.apache.org/licenses/LICENSE-2.0
0:  *
0:  * Unless required by applicable law or agreed to in writing, software
0:  * distributed under the License is distributed on an "AS IS" BASIS,
0:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
0:  * See the License for the specific language governing permissions and
0:  * limitations under the License.
0:  
0: Sample Application
0: 
0: Writing a Basic JMS Application using Point-to-Point (Queues) with
0: a Message Selector
0: 
0: This sample starts up with a username, and the queues you are
0: sending on, and receiving on.
0: 
0: When messages are sent to a queue a property is set in the message header to
0: a property value supplied on the command line. A separate command line
0: value is used as a message selector for messages in the receive queue. In this
0: sample we choose to create a property named "Department"
0: 
0: Writing a line and pressing enter will send the message only to the
0: indicated 'Talk' partner (or QueueReceiver).
0: 
0: Usage:
0:   java SelectorTalk -b <broker:port> -u <username> -p <password> -qs <queue> -qr <queue>
0:             -s <selection>
0:       -b broker:port points to your message broker
0:                      Default: tcp://localhost:61616
0:       -u username    must be unique (but is not checked)
0:       -p password    password for user (not checked)
0:       -qr queue      name of queue to receive
0:       -qs queue      name of queue to send
0:       -s selector    the message selection value
0: 
0: You must specify either a queue for sending or receiving (or both) as well as
0: a value with which to select received messages.
0: 
0: 
0: Suggested demonstration:
0:   - In separate console windows with the environment set,
0:     start instances of the application under unique user names.
0:     For example:
0:        java SelectorTalk -u BOB -s SALES -qr  Q1 -qs  Q2
0:        java SelectorTalk -u SALLY -s SALES -qr  Q2 -qs   Q1
0:   - Enter text and then press Enter to send the message.
0:   - See messages appear under the user's indicated name.
0:   - Try changing the message selector on one console and note that it will
0:     no longer receive messages.
0:   - Stop a session by pressing CTRL+C in its console window.
0: 
0: */
0: import org.apache.activemq.*;
0: 
0: public class SelectorTalk
0:     implements javax.jms.MessageListener
0: {
0:     private static final String DEFAULT_BROKER_NAME = "tcp://localhost:61616";
0:     private static final String PROPERTY_NAME = "Department";
0:     private static final String DEFAULT_PASSWORD = "password";
0:     private static final int    MESSAGE_LIFESPAN = 1800000;  // milliseconds (30 minutes)
0: 
0:     private javax.jms.Connection connect = null;
0:     private javax.jms.Session sendSession = null;
0:     private javax.jms.Session receiveSession = null;
0:     private javax.jms.MessageProducer sender = null;
0: 
0:     /** Create JMS client for sending and receiving messages. */
0:     private void talker( String broker, String username, String password, String rQueue, String sQueue, String selection)
0:     {
0:         // Create a connection.
0:         try
0:          {
0:             javax.jms.ConnectionFactory factory;
0:             factory = new ActiveMQConnectionFactory(username, password, broker);
0:             connect = factory.createConnection (username, password);
0:             sendSession = connect.createSession(false,javax.jms.Session.AUTO_ACKNOWLEDGE);
0:             receiveSession = connect.createSession(false,javax.jms.Session.AUTO_ACKNOWLEDGE);
0:         }
0:         catch (javax.jms.JMSException jmse)
0:         {
0:             System.err.println("error: Cannot connect to Broker - " + broker);
0:             jmse.printStackTrace();
0:             System.exit(1);
0:         }
0: 
0:         // Create Sender and Receiver 'Talk' queues
0:         try
0:         {
0:             if (sQueue != null)
0:             {
0:                 javax.jms.Queue sendQueue = sendSession.createQueue (sQueue);
0:                 sender = sendSession.createProducer(sendQueue);
0:             }
0:             if (rQueue != null)
0:             {
0:                 //NOTE: the Queue Receiver is set up with the Message Selector:
0:                 javax.jms.Queue receiveQueue = receiveSession.createQueue (rQueue);
0:                 javax.jms.MessageConsumer qReceiver = receiveSession.createConsumer(receiveQueue, PROPERTY_NAME + " = \'" + selection + "\'");
0:                 qReceiver.setMessageListener(this);
0:                 connect.start();
0:             }
0:         }
0:         catch (javax.jms.JMSException jmse)
0:         {
0:             jmse.printStackTrace();
0:             exit();
0:         }
0: 
0:         try
0:         {
0:             if (rQueue != null)
0:                System.out.println ("");
0:             else
0:                System.out.println ("\nNo receiving queue specified.\n");
0: 
0:             // Read all standard input and send it as a message.
0:             java.io.BufferedReader stdin =
0:                 new java.io.BufferedReader( new java.io.InputStreamReader( System.in ) );
0:             if (sQueue != null)
0:                 System.out.println ("SelectorTalk application:\n"
0: 			            	      + "=========================\n"
0: 			            	  + "The application user " + username + " connects to the broker at " + DEFAULT_BROKER_NAME + ".\n"
0: 							  + "The application will send messages with " + PROPERTY_NAME + " set to " + selection + " to the " + sQueue + " queue.\n"
0:                               + "The application creates a receiver on the " + rQueue + " queue selecting only messages where " + PROPERTY_NAME + " is " + selection + ".\n\n"
0: 
0: 							  + "Type some text, and then press Enter to publish it as a TextMesssage from " + username + ".\n");
0:             else
0:                 System.out.println ("\nPress CTRL-C to exit.\n");
0: 
0:             while ( true )
0:             {
0:                 String s = stdin.readLine();
0: 
0:                 if ( s == null )
0:                     exit();
0:                 else if ( s.length() > 0 && sQueue != null)
0:                 {
0:                     javax.jms.TextMessage msg = sendSession.createTextMessage();
0:                     msg.setText( username + ": " + s );
0:                     // NOTE: here we set the property for each sent message.
0:                     msg.setStringProperty(PROPERTY_NAME, selection);
0:                     sender.send( msg,
0:                                  javax.jms.DeliveryMode.PERSISTENT,
0:                                  javax.jms.Message.DEFAULT_PRIORITY,
0:                                  MESSAGE_LIFESPAN);
0:                 }
0:             }
0:         }
0:         catch ( java.io.IOException ioe )
0:         {
0:             ioe.printStackTrace();
0:         }
0:         catch ( javax.jms.JMSException jmse )
0:         {
0:             jmse.printStackTrace();
0:         }
0:         // Close the connection.
0:         exit();
0:     }
0: 
0:     /**
0:      * Handle the message
0:      * (as specified in the javax.jms.MessageListener interface).
0:      */
0:     public void onMessage( javax.jms.Message aMessage)
0:     {
0:         try
0:         {
0:             // Cast the message as a text message.
0:             javax.jms.TextMessage textMessage = (javax.jms.TextMessage) aMessage;
0: 
0:             // This handler reads a single String from the
0:             // message and prints it to the standard output.
0:             try
0:             {
0:                 String string = textMessage.getText();
0:                 System.out.println( string );
0:             }
0:             catch (javax.jms.JMSException jmse)
0:             {
0:                 jmse.printStackTrace();
0:             }
0:         }
0:         catch (java.lang.RuntimeException rte)
0:         {
0:             rte.printStackTrace();
0:         }
0:     }
0: 
0:     /** Cleanup resources and then exit. */
0:     private void exit()
0:     {
0:         try
0:         {
0:             connect.close();
0:         }
0:         catch (javax.jms.JMSException jmse)
0:         {
0:             jmse.printStackTrace();
0:         }
0: 
0:         System.exit(0);
0:     }
0: 
0:     //
0:     // NOTE: the remainder of this sample deals with reading arguments
0:     // and does not utilize any JMS classes or code.
0:     //
0: 
0:     /** Main program entry point. */
0:     public static void main(String argv[]) {
0: 
0:         // Is there anything to do?
0:         if (argv.length == 0) {
0:             printUsage();
0:             System.exit(1);
0:         }
0: 
0:         // Values to be read from parameters
0:         String broker    	= DEFAULT_BROKER_NAME;
0:         String username  	= null;
0:         String password  	= DEFAULT_PASSWORD;
0:         String qSender		= null;
0:         String qReceiver	= null;
0:         String selection    = null;
0: 
0:         // Check parameters
0:         for (int i = 0; i < argv.length; i++) {
0:             String arg = argv[i];
0: 
0:             // Options
0:             if (!arg.startsWith("-")) {
0:                 System.err.println ("error: unexpected argument - "+arg);
0:                 printUsage();
0:                 System.exit(1);
0:             }
0:             else {
0:                 if (arg.equals("-b")) {
0:                     if (i == argv.length - 1 || argv[i+1].startsWith("-")) {
0:                         System.err.println("error: missing broker name:port");
0:                         System.exit(1);
0:                     }
0:                     broker = argv[++i];
0:                     continue;
0:                 }
0: 
0:                 if (arg.equals("-u")) {
0:                     if (i == argv.length - 1 || argv[i+1].startsWith("-")) {
0:                         System.err.println("error: missing user name");
0:                         System.exit(1);
0:                     }
0:                     username = argv[++i];
0:                     continue;
0:                 }
0: 
0:                 if (arg.equals("-p")) {
0:                     if (i == argv.length - 1 || argv[i+1].startsWith("-")) {
0:                         System.err.println("error: missing password");
0:                         System.exit(1);
0:                     }
0:                     password = argv[++i];
0:                     continue;
0:                 }
0: 
0:                 if (arg.equals("-qr")) {
0:                     if (i == argv.length - 1 || argv[i+1].startsWith("-")) {
0:                         System.err.println("error: missing receive queue parameter");
0:                         System.exit(1);
0:                     }
0:                     qReceiver = argv[++i];
0:                     continue;
0:                 }
0: 
0:                 if (arg.equals("-qs")) {
0:                     if (i == argv.length - 1 || argv[i+1].startsWith("-")) {
0:                         System.err.println("error: missing send queue parameter");
0:                         System.exit(1);
0:                     }
0:                     qSender = argv[++i];
0:                     continue;
0:                 }
0: 
0:                 if (arg.equals("-s")) {
0:                     if (i == argv.length - 1 || argv[i+1].startsWith("-")) {
0:                         System.err.println("error: missing selectiion");
0:                         System.exit(1);
0:                     }
0:                     selection = argv[++i];
0:                     continue;
0:                 }
0: 
0:                 if (arg.equals("-h")) {
0:                     printUsage();
0:                     System.exit(1);
0:                 }
0:             }
0:         }
0: 
0:         // Check values read in.
0:         if (username == null) {
0:             System.err.println ("error: user name must be supplied");
0:             printUsage();
0:             System.exit(1);
0:         }
0: 
0:         if (qReceiver == null && qSender == null) {
0:             System.err.println ("error: receive queue, or send queue, must be supplied");
0:             printUsage();
0:             System.exit(1);
0:         }
0: 
0:         if (selection == null) {
0:             System.err.println ("error: selection must be supplied (e.g. -s SALES)\n");
0:             printUsage();
0:             System.exit(1);
0:         }
0: 
0: 
0:         // Start the JMS client for the "Talk".
0:         SelectorTalk talk = new SelectorTalk();
0:         talk.talker (broker, username, password, qReceiver, qSender, selection);
0: 
0:     }
0: 
0:     /** Prints the usage. */
0:     private static void printUsage() {
0: 
0:         StringBuffer use = new StringBuffer();
0:         use.append("usage: java SelectorTalk (options) ...\n\n");
0:         use.append("options:\n");
0:         use.append("  -b  name:port Specify name:port of broker.\n");
0:         use.append("                Default broker: "+DEFAULT_BROKER_NAME+"\n");
0:         use.append("  -u  name      Specify unique user name. (Required)\n");
0:         use.append("  -p  password  Specify password for user.\n");
0:         use.append("                Default password: "+DEFAULT_PASSWORD+"\n");
0:         use.append("  -qr queue     Specify queue for receiving messages.\n");
0:         use.append("  -qs queue     Specify queue for sending messages.\n");
0:         use.append("  -s  selection required, selection used to receive messages.\n");
0:         use.append("  -h            This help screen.\n");
0:         System.err.println (use);
0:     }
0: 
0: }
============================================================================