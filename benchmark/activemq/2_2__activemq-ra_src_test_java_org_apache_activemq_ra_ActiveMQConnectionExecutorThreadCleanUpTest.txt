1:4b8cd46: /**
1:4b8cd46:  * Licensed to the Apache Software Foundation (ASF) under one or more
1:4b8cd46:  * contributor license agreements.  See the NOTICE file distributed with
1:4b8cd46:  * this work for additional information regarding copyright ownership.
1:4b8cd46:  * The ASF licenses this file to You under the Apache License, Version 2.0
1:4b8cd46:  * (the "License"); you may not use this file except in compliance with
1:4b8cd46:  * the License.  You may obtain a copy of the License at
1:4b8cd46:  *
1:4b8cd46:  *      http://www.apache.org/licenses/LICENSE-2.0
1:4b8cd46:  *
1:4b8cd46:  * Unless required by applicable law or agreed to in writing, software
1:4b8cd46:  * distributed under the License is distributed on an "AS IS" BASIS,
1:4b8cd46:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:4b8cd46:  * See the License for the specific language governing permissions and
1:4b8cd46:  * limitations under the License.
1:4b8cd46:  */
1:a1e595c: package org.apache.activemq.ra;
1:a1e595c: 
1:a1e595c: import java.util.Set;
1:a1e595c: import java.util.Iterator;
1:a1e595c: import javax.transaction.xa.XAResource;
1:a1e595c: 
1:a1e595c: import org.apache.activemq.broker.BrokerService;
1:4b8cd46: import org.apache.activemq.ra.ActiveMQResourceAdapter;
1:a1e595c: 
1:a1e595c: import org.junit.Assert;
1:a1e595c: import org.junit.After;
1:a1e595c: import org.junit.Before;
1:a1e595c: import org.junit.Test;
1:a1e595c: 
1:a1e595c: import org.slf4j.Logger;
1:a1e595c: import org.slf4j.LoggerFactory;
1:a1e595c: 
1:a1e595c: 
1:a1e595c: /**
1:a1e595c:  * Test for AMQ-6700.
1:a1e595c:  * Will fail to connect to embedded broker using JCA and uses
1:a1e595c:  * "ActiveMQ Connection Executor" thread to deal with low
1:a1e595c:  * level exception. This tests verifies if this thread gets
1:a1e595c:  * cleared up correctly after use.
1:a1e595c:  */
1:a1e595c: public class ActiveMQConnectionExecutorThreadCleanUpTest {
1:a1e595c: 
1:a1e595c:     protected static Logger LOG =
1:a1e595c:         LoggerFactory.getLogger(ActiveMQConnectionExecutorThreadCleanUpTest.class);
1:a1e595c:     protected static final String AMQ_CONN_EXECUTOR_THREAD_NAME =
1:a1e595c:         "ActiveMQ Connection Executor";
1:a1e595c:     private BrokerService broker = null;
1:a1e595c: 
1:a1e595c: 
1:a1e595c:     @Before
1:a1e595c:     public void setUp() throws Exception {
1:a1e595c:         LOG.info("Configuring broker programmatically.");
1:a1e595c:         broker = new BrokerService();
1:a1e595c:         broker.setPersistent(false);
1:a1e595c: 
1:a1e595c:         // explicitly limiting to 0 connections so that test is unable
1:a1e595c:         // to connect
1:a1e595c:         broker.addConnector("tcp://localhost:0?maximumConnections=0");
1:a1e595c:         broker.start();
1:a1e595c:         broker.waitUntilStarted(5000);
1:a1e595c:     }
1:a1e595c: 
1:a1e595c: 
1:a1e595c:     @After
1:a1e595c:     public void shutDown() throws Exception {
1:a1e595c:         if (broker != null) {
1:a1e595c:             if (broker.isStarted()) {
1:a1e595c:                 broker.stop();
1:a1e595c:                 broker.waitUntilStopped();
1:a1e595c:             }
1:a1e595c:         }
1:a1e595c:     }
1:a1e595c: 
1:a1e595c: 
1:a1e595c:     /**
1:a1e595c:      * This test tries to create connections into the broker using the
1:a1e595c:      * resource adapter's transaction recovery functionality.
1:a1e595c:      * If the broker does not accept the connection, the connection's
1:a1e595c:      * thread pool executor is used to deal with the error.
1:a1e595c:      * This has lead to race conditions where the thread was not shutdown
1:a1e595c:      * but got leaked.
1:a1e595c:      * @throws Exception
1:a1e595c:      */
1:a1e595c:     @Test
1:a1e595c:     public void testAMQConnectionExecutorThreadCleanUp() throws Exception {
1:a1e595c:         LOG.info("testAMQConnectionExecutorThreadCleanUp() started.");
1:a1e595c: 
1:a1e595c:         ActiveMQResourceAdapter ra = new ActiveMQResourceAdapter();
1:a1e595c:         ra.setServerUrl(broker.getTransportConnectorByScheme("tcp").getPublishableConnectString());
1:a1e595c:         LOG.info("Using brokerUrl " + ra.getServerUrl());
1:a1e595c: 
1:a1e595c:         // running in a small loop as very occasionally the call to
1:a1e595c:         // ActiveMQResourceAdapter.$2.makeConnection() raises an exception
1:a1e595c:         // rather than using the connection's executor task to deal with the
1:a1e595c:         // connection error.
1:a1e595c:         for (int i=0; i<10; i++) {
1:a1e595c:             LOG.debug("Iteration " + i);
1:a1e595c:             try {
1:a1e595c:                 XAResource[] resources = ra.getXAResources(null);
1:a1e595c:                 resources[0].recover(100);
1:a1e595c:             } catch (Exception ex) {
1:a1e595c:                 LOG.error(ex.getMessage());
1:a1e595c:             }
1:a1e595c:             // allow some small time for thread cleanup to happen
1:a1e595c:             Thread.sleep(300);
1:a1e595c: 
1:a1e595c:             // check if thread exists
1:a1e595c:             Assert.assertFalse("Thread named \"" +
1:4b8cd46:                     AMQ_CONN_EXECUTOR_THREAD_NAME +
1:a1e595c:                     "\" not cleared up with ActiveMQConnection.",
1:a1e595c:                 hasActiveMQConnectionExceutorThread());
1:a1e595c:         }
1:a1e595c:         ra.stop();
1:a1e595c:     }
1:a1e595c: 
1:a1e595c: 
1:a1e595c:     /**
1:a1e595c:      * Retrieves all threads from JVM and checks if any thread names contain
1:a1e595c:      * AMQ_CONN_EXECUTOR_THREAD_NAME.
1:4b8cd46:      *
1:a1e595c:      * @return true if such thread exists, otherwise false
1:a1e595c:      */
1:a1e595c:     public boolean hasActiveMQConnectionExceutorThread() {
1:a1e595c:         // retrieve all threads
1:a1e595c:         Set<Thread> threadSet = Thread.getAllStackTraces().keySet();
1:a1e595c:         Iterator<Thread> iter = threadSet.iterator();
1:a1e595c:         while (iter.hasNext()) {
1:a1e595c:             Thread thread = (Thread)iter.next();
1:a1e595c:             if (thread.getName().startsWith(AMQ_CONN_EXECUTOR_THREAD_NAME )) {
1:a1e595c:                 LOG.error("Thread with name {} found.", thread.getName());
1:a1e595c:                return true;
1:a1e595c:             }
1:a1e595c:         }
1:a1e595c:         LOG.debug("Thread with name {} not found.", AMQ_CONN_EXECUTOR_THREAD_NAME);
1:a1e595c:         return false;
1:a1e595c:     }
1:a1e595c: }
============================================================================
author:Christopher L. Shannon (cshannon)
-------------------------------------------------------------------------------
commit:4b8cd46
/////////////////////////////////////////////////////////////////////////
1: /**
1:  * Licensed to the Apache Software Foundation (ASF) under one or more
1:  * contributor license agreements.  See the NOTICE file distributed with
1:  * this work for additional information regarding copyright ownership.
1:  * The ASF licenses this file to You under the Apache License, Version 2.0
1:  * (the "License"); you may not use this file except in compliance with
1:  * the License.  You may obtain a copy of the License at
1:  *
1:  *      http://www.apache.org/licenses/LICENSE-2.0
1:  *
1:  * Unless required by applicable law or agreed to in writing, software
1:  * distributed under the License is distributed on an "AS IS" BASIS,
1:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:  * See the License for the specific language governing permissions and
1:  * limitations under the License.
1:  */
/////////////////////////////////////////////////////////////////////////
1: import org.apache.activemq.ra.ActiveMQResourceAdapter;
/////////////////////////////////////////////////////////////////////////
1:                     AMQ_CONN_EXECUTOR_THREAD_NAME +
/////////////////////////////////////////////////////////////////////////
1:      *
author:Torsten Mielke
-------------------------------------------------------------------------------
commit:a1e595c
/////////////////////////////////////////////////////////////////////////
1: package org.apache.activemq.ra;
1: 
1: import java.util.Set;
1: import java.util.Iterator;
1: import javax.transaction.xa.XAResource;
1: 
1: import org.apache.activemq.broker.BrokerService;
0: import org.apache.activemq.ra.ActiveMQResourceAdapter; 
1: 
1: import org.junit.Assert;
1: import org.junit.After;
1: import org.junit.Before;
1: import org.junit.Test;
1: 
1: import org.slf4j.Logger;
1: import org.slf4j.LoggerFactory;
1: 
1: 
1: /**
1:  * Test for AMQ-6700.
1:  * Will fail to connect to embedded broker using JCA and uses
1:  * "ActiveMQ Connection Executor" thread to deal with low
1:  * level exception. This tests verifies if this thread gets
1:  * cleared up correctly after use.
1:  */
1: public class ActiveMQConnectionExecutorThreadCleanUpTest {
1: 
1:     protected static Logger LOG =
1:         LoggerFactory.getLogger(ActiveMQConnectionExecutorThreadCleanUpTest.class);
1:     protected static final String AMQ_CONN_EXECUTOR_THREAD_NAME =
1:         "ActiveMQ Connection Executor";
1:     private BrokerService broker = null;
1: 
1: 
1:     @Before
1:     public void setUp() throws Exception {
1:         LOG.info("Configuring broker programmatically.");
1:         broker = new BrokerService();
1:         broker.setPersistent(false);
1: 
1:         // explicitly limiting to 0 connections so that test is unable
1:         // to connect
1:         broker.addConnector("tcp://localhost:0?maximumConnections=0");
1:         broker.start();
1:         broker.waitUntilStarted(5000);
1:     }
1: 
1: 
1:     @After
1:     public void shutDown() throws Exception {
1:         if (broker != null) {
1:             if (broker.isStarted()) {
1:                 broker.stop();
1:                 broker.waitUntilStopped();
1:             }
1:         }
1:     }
1: 
1: 
1:     /**
1:      * This test tries to create connections into the broker using the
1:      * resource adapter's transaction recovery functionality.
1:      * If the broker does not accept the connection, the connection's
1:      * thread pool executor is used to deal with the error.
1:      * This has lead to race conditions where the thread was not shutdown
1:      * but got leaked.
1:      * @throws Exception
1:      */
1:     @Test
1:     public void testAMQConnectionExecutorThreadCleanUp() throws Exception {
1:         LOG.info("testAMQConnectionExecutorThreadCleanUp() started.");
1: 
1:         ActiveMQResourceAdapter ra = new ActiveMQResourceAdapter();
1:         ra.setServerUrl(broker.getTransportConnectorByScheme("tcp").getPublishableConnectString());
1:         LOG.info("Using brokerUrl " + ra.getServerUrl());
1: 
1:         // running in a small loop as very occasionally the call to
1:         // ActiveMQResourceAdapter.$2.makeConnection() raises an exception
1:         // rather than using the connection's executor task to deal with the
1:         // connection error.
1:         for (int i=0; i<10; i++) {
1:             LOG.debug("Iteration " + i);
1:             try {
1:                 XAResource[] resources = ra.getXAResources(null);
1:                 resources[0].recover(100);
1:             } catch (Exception ex) {
1:                 LOG.error(ex.getMessage());
1:             }
1:             // allow some small time for thread cleanup to happen
1:             Thread.sleep(300);
1: 
1:             // check if thread exists
1:             Assert.assertFalse("Thread named \"" +
0:                     AMQ_CONN_EXECUTOR_THREAD_NAME + 
1:                     "\" not cleared up with ActiveMQConnection.",
1:                 hasActiveMQConnectionExceutorThread());
1:         }
1:         ra.stop();
1:     }
1: 
1: 
1:     /**
1:      * Retrieves all threads from JVM and checks if any thread names contain
1:      * AMQ_CONN_EXECUTOR_THREAD_NAME.
0:      * 
1:      * @return true if such thread exists, otherwise false
1:      */
1:     public boolean hasActiveMQConnectionExceutorThread() {
1:         // retrieve all threads
1:         Set<Thread> threadSet = Thread.getAllStackTraces().keySet();
1:         Iterator<Thread> iter = threadSet.iterator();
1:         while (iter.hasNext()) {
1:             Thread thread = (Thread)iter.next();
1:             if (thread.getName().startsWith(AMQ_CONN_EXECUTOR_THREAD_NAME )) {
1:                 LOG.error("Thread with name {} found.", thread.getName());
1:                return true;
1:             }
1:         }
1:         LOG.debug("Thread with name {} not found.", AMQ_CONN_EXECUTOR_THREAD_NAME);
1:         return false;
1:     }
1: }
============================================================================