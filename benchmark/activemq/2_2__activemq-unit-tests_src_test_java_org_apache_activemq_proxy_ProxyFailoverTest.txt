1:86565eb: /**
1:86565eb:  * Licensed to the Apache Software Foundation (ASF) under one or more
1:86565eb:  * contributor license agreements.  See the NOTICE file distributed with
1:86565eb:  * this work for additional information regarding copyright ownership.
1:86565eb:  * The ASF licenses this file to You under the Apache License, Version 2.0
1:86565eb:  * (the "License"); you may not use this file except in compliance with
1:86565eb:  * the License.  You may obtain a copy of the License at
1:86565eb:  *
1:86565eb:  *      http://www.apache.org/licenses/LICENSE-2.0
1:86565eb:  *
1:86565eb:  * Unless required by applicable law or agreed to in writing, software
1:86565eb:  * distributed under the License is distributed on an "AS IS" BASIS,
1:86565eb:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:86565eb:  * See the License for the specific language governing permissions and
1:86565eb:  * limitations under the License.
1:86565eb:  */
1:86565eb: package org.apache.activemq.proxy;
7:86565eb: 
1:86565eb: import junit.framework.TestCase;
1:86565eb: import org.apache.activemq.ActiveMQConnectionFactory;
1:86565eb: import org.apache.activemq.broker.BrokerService;
1:86565eb: import org.apache.activemq.util.ConsumerThread;
1:86565eb: import org.apache.activemq.util.ProducerThread;
1:86565eb: 
1:0b1b6fa: import java.util.concurrent.TimeUnit;
1:0b1b6fa: 
1:86565eb: import javax.jms.Connection;
1:86565eb: import javax.jms.Session;
1:86565eb: import java.net.URI;
1:86565eb: 
1:86565eb: public class ProxyFailoverTest extends TestCase {
1:86565eb: 
1:86565eb:     BrokerService proxyBroker;
1:86565eb:     BrokerService remoteBroker;
1:86565eb: 
1:86565eb:     @Override
1:86565eb:     protected void setUp() throws Exception {
1:86565eb:         startRemoteBroker(true);
1:86565eb:         proxyBroker = new BrokerService();
1:86565eb:         ProxyConnector connector = new ProxyConnector();
1:86565eb:         connector.setBind(new URI("tcp://localhost:51618"));
1:86565eb:         connector.setProxyToLocalBroker(false);
1:86565eb:         connector.setRemote(new URI("failover:(tcp://localhost:61616)"));
1:86565eb:         proxyBroker.addProxyConnector(connector);
1:86565eb:         proxyBroker.setPersistent(false);
1:86565eb:         proxyBroker.setUseJmx(false);
1:86565eb:         proxyBroker.start();
1:86565eb:         proxyBroker.waitUntilStarted();
1:86565eb:     }
1:86565eb: 
1:86565eb:     @Override
1:86565eb:     protected void tearDown() throws Exception {
1:86565eb:         proxyBroker.stop();
1:86565eb:         proxyBroker.waitUntilStopped();
1:86565eb:         remoteBroker.stop();
1:86565eb:         remoteBroker.waitUntilStopped();
1:86565eb:     }
1:86565eb: 
1:86565eb:     public void testFailover() throws Exception {
1:86565eb:         ActiveMQConnectionFactory producerFactory = new ActiveMQConnectionFactory("failover:(tcp://localhost:61616,tcp://localhost:61626)?randomize=false");
1:86565eb:         Connection producerConnection = producerFactory.createConnection();
1:86565eb:         producerConnection.start();
1:86565eb:         Session producerSession = producerConnection.createSession(false, Session.AUTO_ACKNOWLEDGE);
1:86565eb:         ProducerThread producer = new ProducerThread(producerSession, producerSession.createQueue("ProxyTest"));
1:86565eb:         producer.setSleep(10);
1:86565eb:         producer.start();
1:86565eb: 
1:182da65:         ActiveMQConnectionFactory consumerFactory = new ActiveMQConnectionFactory("tcp://localhost:51618");
1:86565eb:         Connection consumerConnection = consumerFactory.createConnection();
1:86565eb:         consumerConnection.start();
1:86565eb:         Session consumerSession = consumerConnection.createSession(false, Session.AUTO_ACKNOWLEDGE);
1:86565eb:         ConsumerThread consumer = new ConsumerThread(consumerSession, consumerSession.createQueue("ProxyTest"));
1:86565eb:         consumer.start();
1:86565eb: 
1:0b1b6fa:         TimeUnit.SECONDS.sleep(15);
1:86565eb: 
1:86565eb:         remoteBroker.stop();
1:86565eb:         remoteBroker.waitUntilStopped();
1:86565eb:         startRemoteBroker(false);
1:86565eb: 
1:86565eb:         producer.join();
1:86565eb:         consumer.join();
1:86565eb: 
1:86565eb:         assertEquals(1000, consumer.getReceived());
1:86565eb:     }
1:86565eb: 
1:86565eb:     protected void startRemoteBroker(boolean delete) throws Exception {
1:86565eb:         remoteBroker = new BrokerService();
1:86565eb:         remoteBroker.addConnector("tcp://localhost:61616");
1:86565eb:         if (delete) {
1:86565eb:             remoteBroker.deleteAllMessages();
1:86565eb:         }
1:86565eb:         remoteBroker.setUseJmx(false);
1:86565eb:         remoteBroker.start();
1:86565eb:         remoteBroker.waitUntilStarted();
1:86565eb:     }
1:86565eb: }
============================================================================
author:Timothy A. Bish
-------------------------------------------------------------------------------
commit:ef24cc9
commit:0b1b6fa
/////////////////////////////////////////////////////////////////////////
1: import java.util.concurrent.TimeUnit;
1: 
/////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////
1:         TimeUnit.SECONDS.sleep(15);
/////////////////////////////////////////////////////////////////////////
commit:bbd4b33
/////////////////////////////////////////////////////////////////////////
0:         Thread.sleep(10*1000);
author:Bosanac Dejan
-------------------------------------------------------------------------------
commit:182da65
/////////////////////////////////////////////////////////////////////////
0:         //ActiveMQConnectionFactory consumerFactory = new ActiveMQConnectionFactory("tcp://localhost:51618?wireFormat.cacheEnabled=false");
1:         ActiveMQConnectionFactory consumerFactory = new ActiveMQConnectionFactory("tcp://localhost:51618");
commit:86565eb
/////////////////////////////////////////////////////////////////////////
1: /**
1:  * Licensed to the Apache Software Foundation (ASF) under one or more
1:  * contributor license agreements.  See the NOTICE file distributed with
1:  * this work for additional information regarding copyright ownership.
1:  * The ASF licenses this file to You under the Apache License, Version 2.0
1:  * (the "License"); you may not use this file except in compliance with
1:  * the License.  You may obtain a copy of the License at
1:  *
1:  *      http://www.apache.org/licenses/LICENSE-2.0
1:  *
1:  * Unless required by applicable law or agreed to in writing, software
1:  * distributed under the License is distributed on an "AS IS" BASIS,
1:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:  * See the License for the specific language governing permissions and
1:  * limitations under the License.
1:  */
1: package org.apache.activemq.proxy;
1: 
1: import junit.framework.TestCase;
1: import org.apache.activemq.ActiveMQConnectionFactory;
1: import org.apache.activemq.broker.BrokerService;
1: import org.apache.activemq.util.ConsumerThread;
1: import org.apache.activemq.util.ProducerThread;
1: 
1: import javax.jms.Connection;
1: import javax.jms.Session;
1: import java.net.URI;
1: 
1: public class ProxyFailoverTest extends TestCase {
1: 
1:     BrokerService proxyBroker;
1:     BrokerService remoteBroker;
1: 
1:     @Override
1:     protected void setUp() throws Exception {
1: 
1:         startRemoteBroker(true);
1: 
1:         proxyBroker = new BrokerService();
1:         ProxyConnector connector = new ProxyConnector();
1:         connector.setBind(new URI("tcp://localhost:51618"));
1:         connector.setProxyToLocalBroker(false);
1:         connector.setRemote(new URI("failover:(tcp://localhost:61616)"));
1:         proxyBroker.addProxyConnector(connector);
1:         proxyBroker.setPersistent(false);
1:         proxyBroker.setUseJmx(false);
1:         proxyBroker.start();
1:         proxyBroker.waitUntilStarted();
1: 
1:     }
1: 
1:     @Override
1:     protected void tearDown() throws Exception {
1:         proxyBroker.stop();
1:         proxyBroker.waitUntilStopped();
1: 
1:         remoteBroker.stop();
1:         remoteBroker.waitUntilStopped();
1:     }
1: 
1:     public void testFailover() throws Exception {
1:         ActiveMQConnectionFactory producerFactory = new ActiveMQConnectionFactory("failover:(tcp://localhost:61616,tcp://localhost:61626)?randomize=false");
1:         Connection producerConnection = producerFactory.createConnection();
1:         producerConnection.start();
1:         Session producerSession = producerConnection.createSession(false, Session.AUTO_ACKNOWLEDGE);
1:         ProducerThread producer = new ProducerThread(producerSession, producerSession.createQueue("ProxyTest"));
1:         producer.setSleep(10);
1:         producer.start();
1: 
1: 
0:         ActiveMQConnectionFactory consumerFactory = new ActiveMQConnectionFactory("tcp://localhost:51618?wireFormat.cacheEnabled=false");
0:         // if used with cached enabled it will fail
0:         //ActiveMQConnectionFactory consumerFactory = new ActiveMQConnectionFactory("tcp://localhost:51618");
1:         Connection consumerConnection = consumerFactory.createConnection();
1:         consumerConnection.start();
1:         Session consumerSession = consumerConnection.createSession(false, Session.AUTO_ACKNOWLEDGE);
1:         ConsumerThread consumer = new ConsumerThread(consumerSession, consumerSession.createQueue("ProxyTest"));
1:         consumer.start();
1: 
0:         Thread.sleep(5000);
1: 
1:         remoteBroker.stop();
1:         remoteBroker.waitUntilStopped();
1:         startRemoteBroker(false);
1: 
1:         producer.join();
1:         consumer.join();
1: 
1:         assertEquals(1000, consumer.getReceived());
1: 
1:     }
1: 
1:     protected void startRemoteBroker(boolean delete) throws Exception {
1:         remoteBroker = new BrokerService();
1:         remoteBroker.addConnector("tcp://localhost:61616");
1:         if (delete) {
1:             remoteBroker.deleteAllMessages();
1:         }
1:         remoteBroker.setUseJmx(false);
1:         remoteBroker.start();
1:         remoteBroker.waitUntilStarted();
1:     }
1: }
============================================================================