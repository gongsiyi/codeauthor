1:27484b9: /**
1:27484b9:  * Licensed to the Apache Software Foundation (ASF) under one or more
1:27484b9:  * contributor license agreements.  See the NOTICE file distributed with
1:27484b9:  * this work for additional information regarding copyright ownership.
1:27484b9:  * The ASF licenses this file to You under the Apache License, Version 2.0
1:27484b9:  * (the "License"); you may not use this file except in compliance with
1:27484b9:  * the License.  You may obtain a copy of the License at
1:27484b9:  *
1:27484b9:  *      http://www.apache.org/licenses/LICENSE-2.0
1:27484b9:  *
1:27484b9:  * Unless required by applicable law or agreed to in writing, software
1:27484b9:  * distributed under the License is distributed on an "AS IS" BASIS,
1:27484b9:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:27484b9:  * See the License for the specific language governing permissions and
1:27484b9:  * limitations under the License.
1:27484b9:  */
1:27484b9: package org.apache.activemq.bugs;
2:27484b9: 
1:27484b9: import org.apache.activemq.ActiveMQConnectionFactory;
1:27484b9: import org.apache.activemq.broker.BrokerService;
1:27484b9: import org.apache.activemq.broker.region.policy.PolicyEntry;
1:27484b9: import org.apache.activemq.broker.region.policy.PolicyMap;
1:27484b9: import org.apache.activemq.command.ActiveMQQueue;
1:27484b9: import org.apache.activemq.store.kahadb.KahaDBPersistenceAdapter;
1:65cef69: import org.apache.activemq.store.kahadb.disk.journal.Journal;
1:27484b9: import org.apache.activemq.util.ConsumerThread;
1:27484b9: import org.apache.activemq.util.ProducerThread;
1:8bf987b: import org.slf4j.Logger;
1:8bf987b: import org.slf4j.LoggerFactory;
1:27484b9: import org.junit.Test;
1:27484b9: 
1:27484b9: import javax.jms.*;
1:27484b9: 
1:27484b9: import java.io.File;
1:62bdbb0: import java.util.Arrays;
1:27484b9: 
1:27484b9: import static org.junit.Assert.assertEquals;
1:27484b9: 
1:27484b9: public class AMQ3120Test {
1:27484b9: 
1:8bf987b:     private static final Logger LOG = LoggerFactory.getLogger(AMQ3120Test.class);
1:27484b9: 
1:27484b9:     BrokerService broker = null;
1:27484b9:     File kahaDbDir = null;
1:27484b9:     private final Destination destination = new ActiveMQQueue("AMQ3120Test");
1:27484b9:     final String payload = new String(new byte[1024]);
1:27484b9: 
1:27484b9:     protected void startBroker(boolean delete) throws Exception {
1:27484b9:         broker = new BrokerService();
1:27484b9: 
1:27484b9:         //Start with a clean directory
1:27484b9:         kahaDbDir = new File(broker.getBrokerDataDirectory(), "KahaDB");
1:27484b9:         deleteDir(kahaDbDir);
1:27484b9: 
1:27484b9:         broker.setSchedulerSupport(false);
1:27484b9:         broker.setDeleteAllMessagesOnStartup(delete);
1:27484b9:         broker.setPersistent(true);
1:27484b9:         broker.setUseJmx(false);
1:27484b9:         broker.addConnector("tcp://localhost:0");
1:27484b9: 
1:27484b9:         PolicyMap map = new PolicyMap();
1:27484b9:         PolicyEntry entry = new PolicyEntry();
1:27484b9:         entry.setUseCache(false);
1:27484b9:         map.setDefaultEntry(entry);
1:27484b9:         broker.setDestinationPolicy(map);
1:27484b9: 
1:27484b9:         configurePersistence(broker, delete);
1:27484b9: 
1:27484b9:         broker.start();
1:27484b9:         LOG.info("Starting broker..");
1:27484b9:     }
1:27484b9: 
1:27484b9:     protected void configurePersistence(BrokerService brokerService, boolean deleteAllOnStart) throws Exception {
1:27484b9:         KahaDBPersistenceAdapter adapter = (KahaDBPersistenceAdapter) brokerService.getPersistenceAdapter();
1:27484b9: 
1:27484b9:         // ensure there are a bunch of data files but multiple entries in each
1:27484b9:         adapter.setJournalMaxFileLength(1024 * 20);
1:27484b9: 
1:27484b9:         // speed up the test case, checkpoint an cleanup early and often
1:27484b9:         adapter.setCheckpointInterval(500);
1:27484b9:         adapter.setCleanupInterval(500);
1:65cef69:         adapter.setPreallocationScope(Journal.PreallocationScope.ENTIRE_JOURNAL.name());
1:27484b9: 
1:27484b9:         if (!deleteAllOnStart) {
1:27484b9:             adapter.setForceRecoverIndex(true);
1:27484b9:         }
1:27484b9: 
1:27484b9:     }
1:27484b9: 
1:27484b9:     private boolean deleteDir(File dir) {
1:27484b9:         if (dir.isDirectory()) {
1:27484b9:             String[] children = dir.list();
1:27484b9:             for (int i = 0; i < children.length; i++) {
1:27484b9:                 boolean success = deleteDir(new File(dir, children[i]));
1:27484b9:                 if (!success) {
1:27484b9:                     return false;
1:27484b9:                 }
1:27484b9:             }
1:27484b9:         }
1:27484b9: 
1:27484b9:         return dir.delete();
1:27484b9:     }
1:27484b9: 
1:27484b9:     private int getFileCount(File dir){
1:27484b9:         if (dir.isDirectory()) {
1:27484b9:             String[] children = dir.list();
1:62bdbb0:             LOG.info("Children: " + Arrays.asList(children));
1:27484b9:             return children.length;
1:27484b9:         }
1:27484b9: 
1:27484b9:         return 0;
1:27484b9:     }
1:27484b9: 
1:27484b9:     @Test
1:27484b9:     public void testCleanupOfFiles() throws Exception {
1:6b643dc:         final int messageCount = 500;
1:6b643dc:         startBroker(true);
1:27484b9:         int fileCount = getFileCount(kahaDbDir);
1:65cef69:         assertEquals(4, fileCount);
1:27484b9: 
1:27484b9:         Connection connection = new ActiveMQConnectionFactory(
1:27484b9:                 broker.getTransportConnectors().get(0).getConnectUri()).createConnection();
1:27484b9:         connection.start();
1:27484b9:         Session producerSess = connection.createSession(false, Session.AUTO_ACKNOWLEDGE);
1:27484b9:         Session consumerSess = connection.createSession(false, Session.AUTO_ACKNOWLEDGE);
1:27484b9: 
1:27484b9:         ProducerThread producer = new ProducerThread(producerSess, destination) {
1:27484b9:             @Override
1:27484b9:             protected Message createMessage(int i) throws Exception {
1:9f0ab46:                 return session.createTextMessage(payload + "::" + i);
1:27484b9:             }
1:27484b9:         };
1:6b643dc:         producer.setSleep(650);
1:6b643dc:         producer.setMessageCount(messageCount);
1:27484b9:         ConsumerThread consumer = new ConsumerThread(consumerSess, destination);
1:27484b9:         consumer.setBreakOnNull(false);
1:6b643dc:         consumer.setMessageCount(messageCount);
1:27484b9: 
1:27484b9:         producer.start();
1:27484b9:         consumer.start();
1:27484b9: 
1:27484b9:         producer.join();
1:27484b9:         consumer.join();
1:27484b9: 
1:6b643dc:         assertEquals("consumer got all produced messages", producer.getMessageCount(), consumer.getReceived());
1:27484b9: 
1:27484b9:         broker.stop();
1:27484b9:         broker.waitUntilStopped();
1:27484b9: 
1:27484b9:     }
1:27484b9: 
1:27484b9: }
============================================================================
author:gtully
-------------------------------------------------------------------------------
commit:65cef69
/////////////////////////////////////////////////////////////////////////
1: import org.apache.activemq.store.kahadb.disk.journal.Journal;
/////////////////////////////////////////////////////////////////////////
1:         adapter.setPreallocationScope(Journal.PreallocationScope.ENTIRE_JOURNAL.name());
/////////////////////////////////////////////////////////////////////////
1:         assertEquals(4, fileCount);
commit:62bdbb0
/////////////////////////////////////////////////////////////////////////
1: import java.util.Arrays;
/////////////////////////////////////////////////////////////////////////
1:             LOG.info("Children: " + Arrays.asList(children));
/////////////////////////////////////////////////////////////////////////
0:         assertEquals(5, fileCount);
author:Dejan Bosanac
-------------------------------------------------------------------------------
commit:9f0ab46
/////////////////////////////////////////////////////////////////////////
1:                 return session.createTextMessage(payload + "::" + i);
author:Timothy A. Bish
-------------------------------------------------------------------------------
commit:ef24cc9
author:Gary Tully
-------------------------------------------------------------------------------
commit:6b643dc
/////////////////////////////////////////////////////////////////////////
1:         final int messageCount = 500;
1:         startBroker(true);
/////////////////////////////////////////////////////////////////////////
1:         producer.setSleep(650);
1:         producer.setMessageCount(messageCount);
1:         consumer.setMessageCount(messageCount);
/////////////////////////////////////////////////////////////////////////
1:         assertEquals("consumer got all produced messages", producer.getMessageCount(), consumer.getReceived());
author:Bosanac Dejan
-------------------------------------------------------------------------------
commit:8bf987b
/////////////////////////////////////////////////////////////////////////
1: import org.slf4j.Logger;
1: import org.slf4j.LoggerFactory;
/////////////////////////////////////////////////////////////////////////
1:     private static final Logger LOG = LoggerFactory.getLogger(AMQ3120Test.class);
commit:27484b9
/////////////////////////////////////////////////////////////////////////
1: /**
1:  * Licensed to the Apache Software Foundation (ASF) under one or more
1:  * contributor license agreements.  See the NOTICE file distributed with
1:  * this work for additional information regarding copyright ownership.
1:  * The ASF licenses this file to You under the Apache License, Version 2.0
1:  * (the "License"); you may not use this file except in compliance with
1:  * the License.  You may obtain a copy of the License at
1:  *
1:  *      http://www.apache.org/licenses/LICENSE-2.0
1:  *
1:  * Unless required by applicable law or agreed to in writing, software
1:  * distributed under the License is distributed on an "AS IS" BASIS,
1:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:  * See the License for the specific language governing permissions and
1:  * limitations under the License.
1:  */
1: package org.apache.activemq.bugs;
1: 
1: import org.apache.activemq.ActiveMQConnectionFactory;
1: import org.apache.activemq.broker.BrokerService;
1: import org.apache.activemq.broker.region.policy.PolicyEntry;
1: import org.apache.activemq.broker.region.policy.PolicyMap;
1: import org.apache.activemq.command.ActiveMQQueue;
1: import org.apache.activemq.store.kahadb.KahaDBPersistenceAdapter;
1: import org.apache.activemq.util.ConsumerThread;
1: import org.apache.activemq.util.ProducerThread;
0: import org.apache.commons.logging.Log;
0: import org.apache.commons.logging.LogFactory;
1: import org.junit.Test;
1: 
1: import javax.jms.*;
1: 
1: import java.io.File;
1: 
1: import static org.junit.Assert.assertEquals;
1: 
1: public class AMQ3120Test {
1: 
0:     private static final Log LOG = LogFactory.getLog(AMQ3120Test.class);
1: 
1:     BrokerService broker = null;
1:     File kahaDbDir = null;
1:     private final Destination destination = new ActiveMQQueue("AMQ3120Test");
1:     final String payload = new String(new byte[1024]);
1: 
1:     protected void startBroker(boolean delete) throws Exception {
1:         broker = new BrokerService();
1: 
1:         //Start with a clean directory
1:         kahaDbDir = new File(broker.getBrokerDataDirectory(), "KahaDB");
1:         deleteDir(kahaDbDir);
1: 
1:         broker.setSchedulerSupport(false);
1:         broker.setDeleteAllMessagesOnStartup(delete);
1:         broker.setPersistent(true);
1:         broker.setUseJmx(false);
1:         broker.addConnector("tcp://localhost:0");
1: 
1:         PolicyMap map = new PolicyMap();
1:         PolicyEntry entry = new PolicyEntry();
1:         entry.setUseCache(false);
1:         map.setDefaultEntry(entry);
1:         broker.setDestinationPolicy(map);
1: 
1:         configurePersistence(broker, delete);
1: 
1:         broker.start();
1:         LOG.info("Starting broker..");
1:     }
1: 
1:     protected void configurePersistence(BrokerService brokerService, boolean deleteAllOnStart) throws Exception {
1:         KahaDBPersistenceAdapter adapter = (KahaDBPersistenceAdapter) brokerService.getPersistenceAdapter();
1: 
1:         // ensure there are a bunch of data files but multiple entries in each
1:         adapter.setJournalMaxFileLength(1024 * 20);
1: 
1:         // speed up the test case, checkpoint an cleanup early and often
1:         adapter.setCheckpointInterval(500);
1:         adapter.setCleanupInterval(500);
1: 
1:         if (!deleteAllOnStart) {
1:             adapter.setForceRecoverIndex(true);
1:         }
1: 
1:     }
1: 
1:     private boolean deleteDir(File dir) {
1:         if (dir.isDirectory()) {
1:             String[] children = dir.list();
1:             for (int i = 0; i < children.length; i++) {
1:                 boolean success = deleteDir(new File(dir, children[i]));
1:                 if (!success) {
1:                     return false;
1:                 }
1:             }
1:         }
1: 
1:         return dir.delete();
1:     }
1: 
1:     private int getFileCount(File dir){
1:         if (dir.isDirectory()) {
1:             String[] children = dir.list();
1:             return children.length;
1:         }
1: 
1:         return 0;
1:     }
1: 
1:     @Test
1:     public void testCleanupOfFiles() throws Exception {
1: 
0:         startBroker(false);
1:         int fileCount = getFileCount(kahaDbDir);
0:         assertEquals(4, fileCount);
1: 
1:         Connection connection = new ActiveMQConnectionFactory(
1:                 broker.getTransportConnectors().get(0).getConnectUri()).createConnection();
1:         connection.start();
1:         Session producerSess = connection.createSession(false, Session.AUTO_ACKNOWLEDGE);
1:         Session consumerSess = connection.createSession(false, Session.AUTO_ACKNOWLEDGE);
1: 
1:         ProducerThread producer = new ProducerThread(producerSess, destination) {
1:             @Override
1:             protected Message createMessage(int i) throws Exception {
0:                 return sess.createTextMessage(payload + "::" + i);
1:             }
1:         };
0:         producer.setSleep(1500);
1:         ConsumerThread consumer = new ConsumerThread(consumerSess, destination);
1:         consumer.setBreakOnNull(false);
1: 
1:         producer.start();
1:         consumer.start();
1: 
1:         producer.join();
1:         consumer.join();
1: 
1: 
1:         broker.stop();
1:         broker.waitUntilStopped();
1: 
1:     }
1: 
1: }
============================================================================