1:6b4509c: /**
1:6b4509c:  * Licensed to the Apache Software Foundation (ASF) under one or more
1:6b4509c:  * contributor license agreements.  See the NOTICE file distributed with
1:6b4509c:  * this work for additional information regarding copyright ownership.
1:6b4509c:  * The ASF licenses this file to You under the Apache License, Version 2.0
1:6b4509c:  * (the "License"); you may not use this file except in compliance with
1:6b4509c:  * the License.  You may obtain a copy of the License at
2:6b4509c:  *
1:6b4509c:  *      http://www.apache.org/licenses/LICENSE-2.0
1:6b4509c:  *
1:6b4509c:  * Unless required by applicable law or agreed to in writing, software
1:6b4509c:  * distributed under the License is distributed on an "AS IS" BASIS,
1:6b4509c:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:6b4509c:  * See the License for the specific language governing permissions and
1:6b4509c:  * limitations under the License.
1:6b4509c:  */
1:6b4509c: package org.apache.activemq.transport.tcp;
2:6b4509c: 
1:6b4509c: import java.io.IOException;
1:6b4509c: import java.net.InetAddress;
1:6b4509c: import java.net.Socket;
1:6b4509c: import java.net.UnknownHostException;
1:6b4509c: import java.util.Random;
1:6b4509c: import java.util.concurrent.ConcurrentHashMap;
1:9ef4259: import java.util.concurrent.ConcurrentMap;
1:4743a20: 
1:6b4509c: import javax.net.SocketFactory;
1:4743a20: 
1:8bf987b: import org.slf4j.Logger;
1:8bf987b: import org.slf4j.LoggerFactory;
1:6b4509c: 
1:6b4509c: /**
1:4743a20:  *
1:0bbc0ac:  *
1:6b4509c:  * Automatically generated socket.close() calls to simulate network faults
1:6b4509c:  */
1:6b4509c: public class SocketTstFactory extends SocketFactory {
1:8bf987b:     private static final Logger LOG = LoggerFactory.getLogger(SocketTstFactory.class);
1:6b4509c: 
1:9ef4259:     private static final ConcurrentMap<InetAddress, Integer> closeIter = new ConcurrentHashMap<InetAddress, Integer>();
1:6b4509c: 
1:6b4509c:     private class SocketTst {
1:6b4509c: 
1:4743a20:         private class Bagot implements Runnable {
1:4743a20:             private final Thread processus;
1:4743a20:             private final Socket socket;
1:4743a20:             private final InetAddress address;
1:6b4509c: 
1:4743a20:             public Bagot(Random rnd, Socket socket, InetAddress address) {
1:4743a20:                 this.processus = new Thread(this, "Network Faults maker : undefined");
1:4743a20:                 this.socket = socket;
1:4743a20:                 this.address = address;
1:4743a20:             }
1:6b4509c: 
1:4743a20:             public void start() {
1:4743a20:                 this.processus.setName("Network Faults maker : " + this.socket.toString());
1:4743a20:                 this.processus.start();
1:4743a20:             }
1:6b4509c: 
1:4743a20:             @Override
1:4743a20:             public void run() {
1:4743a20:                 int lastDelayVal;
1:4743a20:                 Integer lastDelay;
1:4743a20:                 while (!this.processus.isInterrupted()) {
1:4743a20:                     if (!this.socket.isClosed()) {
1:4743a20:                         try {
1:4743a20:                             lastDelay = closeIter.get(this.address);
1:4743a20:                             if (lastDelay == null) {
1:4743a20:                                 lastDelayVal = 0;
1:4743a20:                             } else {
1:4743a20:                                 lastDelayVal = lastDelay.intValue();
1:4743a20:                                 if (lastDelayVal > 10)
1:4743a20:                                     lastDelayVal += 20;
1:4743a20:                                 else
1:4743a20:                                     lastDelayVal += 1;
1:4743a20:                             }
1:6b4509c: 
1:4743a20:                             lastDelay = new Integer(lastDelayVal);
1:6b4509c: 
1:4743a20:                             LOG.info("Trying to close client socket " + socket.toString() + " in " + lastDelayVal + " milliseconds");
1:6b4509c: 
1:4743a20:                             try {
1:4743a20:                                 Thread.sleep(lastDelayVal);
1:4743a20:                             } catch (InterruptedException e) {
1:4743a20:                                 this.processus.interrupt();
1:4743a20:                                 Thread.currentThread().interrupt();
1:4743a20:                             } catch (IllegalArgumentException e) {
1:4743a20:                             }
1:6b4509c: 
1:4743a20:                             this.socket.close();
1:4743a20:                             closeIter.put(this.address, lastDelay);
1:4743a20:                             LOG.info("Client socket " + this.socket.toString() + " is closed.");
1:4743a20:                         } catch (IOException e) {
1:4743a20:                         }
1:4743a20:                     }
1:6b4509c: 
1:4743a20:                     this.processus.interrupt();
1:4743a20:                 }
1:4743a20:             }
1:4743a20:         }
1:6b4509c: 
1:4743a20:         private final Bagot bagot;
1:4743a20:         private final Socket socket;
1:6b4509c: 
1:4743a20:         public SocketTst(InetAddress address, int port, Random rnd) throws IOException {
1:4743a20:             this.socket = new Socket(address, port);
1:4743a20:             bagot = new Bagot(rnd, this.socket, address);
1:4743a20:         }
1:6b4509c: 
1:4743a20:         public SocketTst(InetAddress address, int port, InetAddress localAddr, int localPort, Random rnd) throws IOException {
1:4743a20:             this.socket = new Socket(address, port, localAddr, localPort);
1:4743a20:             bagot = new Bagot(rnd, this.socket, address);
1:4743a20:         }
1:6b4509c: 
1:4743a20:         public SocketTst(String address, int port, Random rnd) throws UnknownHostException, IOException {
1:4743a20:             this.socket = new Socket(address, port);
1:4743a20:             bagot = new Bagot(rnd, this.socket, InetAddress.getByName(address));
1:4743a20:         }
1:6b4509c: 
1:4743a20:         public SocketTst(String address, int port, InetAddress localAddr, int localPort, Random rnd) throws IOException {
1:4743a20:             this.socket = new Socket(address, port, localAddr, localPort);
1:4743a20:             bagot = new Bagot(rnd, this.socket, InetAddress.getByName(address));
1:4743a20:         }
1:6b4509c: 
1:4743a20:         public Socket getSocket() {
1:4743a20:             return this.socket;
1:4743a20:         }
1:4743a20: 
1:4743a20:         public void startBagot() {
1:4743a20:             bagot.start();
1:4743a20:         }
1:6b4509c:     };
1:6b4509c: 
1:4743a20:     private final Random rnd;
1:6b4509c: 
1:6b4509c:     public SocketTstFactory() {
1:4743a20:         super();
1:4743a20:         LOG.info("Creating a new SocketTstFactory");
1:4743a20:         this.rnd = new Random();
17:6b4509c:     }
1:6b4509c: 
1:4743a20:     @Override
1:6b4509c:     public Socket createSocket(InetAddress host, int port) throws IOException {
1:4743a20:         SocketTst sockTst;
1:4743a20:         sockTst = new SocketTst(host, port, this.rnd);
1:4743a20:         sockTst.startBagot();
1:4743a20:         return sockTst.getSocket();
1:6b4509c:     }
1:6b4509c: 
1:4743a20:     @Override
1:6b4509c:     public Socket createSocket(InetAddress host, int port, InetAddress localAddress, int localPort) throws IOException {
1:4743a20:         SocketTst sockTst;
1:4743a20:         sockTst = new SocketTst(host, port, localAddress, localPort, this.rnd);
1:4743a20:         sockTst.startBagot();
1:4743a20:         return sockTst.getSocket();
1:6b4509c:     }
1:6b4509c: 
1:4743a20:     @Override
1:6b4509c:     public Socket createSocket(String host, int port) throws IOException {
1:4743a20:         SocketTst sockTst;
1:4743a20:         sockTst = new SocketTst(host, port, this.rnd);
1:4743a20:         sockTst.startBagot();
1:4743a20:         return sockTst.getSocket();
1:6b4509c:     }
1:6b4509c: 
1:4743a20:     @Override
1:6b4509c:     public Socket createSocket(String host, int port, InetAddress localAddress, int localPort) throws IOException {
1:4743a20:         SocketTst sockTst;
1:4743a20:         sockTst = new SocketTst(host, port, localAddress, localPort, this.rnd);
1:4743a20:         sockTst.startBagot();
1:4743a20:         return sockTst.getSocket();
1:6b4509c:     }
1:6b4509c: 
1:6b4509c:     private final static SocketTstFactory client = new SocketTstFactory();
1:6b4509c: 
1:6b4509c:     public static SocketFactory getDefault() {
1:4743a20:         return client;
1:6b4509c:     }
1:6b4509c: }
============================================================================
author:Hadrian Zbarcea
-------------------------------------------------------------------------------
commit:f9bec8f
author:Timothy Bish
-------------------------------------------------------------------------------
commit:9ef4259
/////////////////////////////////////////////////////////////////////////
1: import java.util.concurrent.ConcurrentMap;
/////////////////////////////////////////////////////////////////////////
1:     private static final ConcurrentMap<InetAddress, Integer> closeIter = new ConcurrentHashMap<InetAddress, Integer>();
author:Timothy A. Bish
-------------------------------------------------------------------------------
commit:4743a20
/////////////////////////////////////////////////////////////////////////
1: 
1: 
1:  *
0:     private static final ConcurrentHashMap<InetAddress, Integer> closeIter = new ConcurrentHashMap<InetAddress, Integer>();
1:         private class Bagot implements Runnable {
1:             private final Thread processus;
1:             private final Socket socket;
1:             private final InetAddress address;
1:             public Bagot(Random rnd, Socket socket, InetAddress address) {
1:                 this.processus = new Thread(this, "Network Faults maker : undefined");
1:                 this.socket = socket;
1:                 this.address = address;
1:             }
1:             public void start() {
1:                 this.processus.setName("Network Faults maker : " + this.socket.toString());
1:                 this.processus.start();
1:             }
1:             @Override
1:             public void run() {
1:                 int lastDelayVal;
1:                 Integer lastDelay;
1:                 while (!this.processus.isInterrupted()) {
1:                     if (!this.socket.isClosed()) {
1:                         try {
1:                             lastDelay = closeIter.get(this.address);
1:                             if (lastDelay == null) {
1:                                 lastDelayVal = 0;
1:                             } else {
1:                                 lastDelayVal = lastDelay.intValue();
1:                                 if (lastDelayVal > 10)
1:                                     lastDelayVal += 20;
1:                                 else
1:                                     lastDelayVal += 1;
1:                             }
1:                             lastDelay = new Integer(lastDelayVal);
1:                             LOG.info("Trying to close client socket " + socket.toString() + " in " + lastDelayVal + " milliseconds");
1:                             try {
1:                                 Thread.sleep(lastDelayVal);
1:                             } catch (InterruptedException e) {
1:                                 this.processus.interrupt();
1:                                 Thread.currentThread().interrupt();
1:                             } catch (IllegalArgumentException e) {
1:                             }
1:                             this.socket.close();
1:                             closeIter.put(this.address, lastDelay);
1:                             LOG.info("Client socket " + this.socket.toString() + " is closed.");
1:                         } catch (IOException e) {
1:                         }
1:                     }
1:                     this.processus.interrupt();
1:                 }
1:             }
1:         }
1:         private final Bagot bagot;
1:         private final Socket socket;
1:         public SocketTst(InetAddress address, int port, Random rnd) throws IOException {
1:             this.socket = new Socket(address, port);
1:             bagot = new Bagot(rnd, this.socket, address);
1:         }
1:         public SocketTst(InetAddress address, int port, InetAddress localAddr, int localPort, Random rnd) throws IOException {
1:             this.socket = new Socket(address, port, localAddr, localPort);
1:             bagot = new Bagot(rnd, this.socket, address);
1:         }
1:         public SocketTst(String address, int port, Random rnd) throws UnknownHostException, IOException {
1:             this.socket = new Socket(address, port);
1:             bagot = new Bagot(rnd, this.socket, InetAddress.getByName(address));
1:         }
1:         public SocketTst(String address, int port, InetAddress localAddr, int localPort, Random rnd) throws IOException {
1:             this.socket = new Socket(address, port, localAddr, localPort);
1:             bagot = new Bagot(rnd, this.socket, InetAddress.getByName(address));
1:         }
1:         public Socket getSocket() {
1:             return this.socket;
1:         }
1: 
1:         public void startBagot() {
1:             bagot.start();
1:         }
1:     private final Random rnd;
1:         super();
1:         LOG.info("Creating a new SocketTstFactory");
1:         this.rnd = new Random();
1:     @Override
1:         SocketTst sockTst;
1:         sockTst = new SocketTst(host, port, this.rnd);
1:         sockTst.startBagot();
1:         return sockTst.getSocket();
1:     @Override
1:         SocketTst sockTst;
1:         sockTst = new SocketTst(host, port, localAddress, localPort, this.rnd);
1:         sockTst.startBagot();
1:         return sockTst.getSocket();
1:     @Override
1:         SocketTst sockTst;
1:         sockTst = new SocketTst(host, port, this.rnd);
1:         sockTst.startBagot();
1:         return sockTst.getSocket();
1:     @Override
1:         SocketTst sockTst;
1:         sockTst = new SocketTst(host, port, localAddress, localPort, this.rnd);
1:         sockTst.startBagot();
1:         return sockTst.getSocket();
1:         return client;
commit:ef24cc9
author:Hiram R. Chirino
-------------------------------------------------------------------------------
commit:0bbc0ac
/////////////////////////////////////////////////////////////////////////
1:  * 
author:Bosanac Dejan
-------------------------------------------------------------------------------
commit:8bf987b
/////////////////////////////////////////////////////////////////////////
1: import org.slf4j.Logger;
1: import org.slf4j.LoggerFactory;
/////////////////////////////////////////////////////////////////////////
1:     private static final Logger LOG = LoggerFactory.getLogger(SocketTstFactory.class);
author:Gary Tully
-------------------------------------------------------------------------------
commit:6b4509c
/////////////////////////////////////////////////////////////////////////
1: /**
1:  * Licensed to the Apache Software Foundation (ASF) under one or more
1:  * contributor license agreements.  See the NOTICE file distributed with
1:  * this work for additional information regarding copyright ownership.
1:  * The ASF licenses this file to You under the Apache License, Version 2.0
1:  * (the "License"); you may not use this file except in compliance with
1:  * the License.  You may obtain a copy of the License at
1:  *
1:  *      http://www.apache.org/licenses/LICENSE-2.0
1:  *
1:  * Unless required by applicable law or agreed to in writing, software
1:  * distributed under the License is distributed on an "AS IS" BASIS,
1:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:  * See the License for the specific language governing permissions and
1:  * limitations under the License.
1:  */
1: package org.apache.activemq.transport.tcp;
1: 
1: import java.io.IOException;
1: import java.net.InetAddress;
1: import java.net.Socket;
1: import java.net.UnknownHostException;
1: import java.util.Random;
1: import java.util.concurrent.ConcurrentHashMap;
1: import javax.net.SocketFactory;
0: import org.apache.commons.logging.Log;
0: import org.apache.commons.logging.LogFactory;
1: 
1: /**
0:  * @version $Revision$
1:  *
1:  * Automatically generated socket.close() calls to simulate network faults
1:  */
1: public class SocketTstFactory extends SocketFactory {
0:     private static final Log LOG = LogFactory.getLog(SocketTstFactory.class);
1: 
0:     private static final ConcurrentHashMap<InetAddress, Integer>	closeIter = new ConcurrentHashMap<InetAddress, Integer>();
1: 
1:     private class SocketTst {
1: 
0: 	private class Bagot implements Runnable {
0: 		private Thread			processus;
0: 		private Random	rnd;
0: 		private Socket			socket;
0: 		private final InetAddress	address;
1: 
0: 		public Bagot(Random rnd, Socket socket, InetAddress address) {
0: 			this.processus  = new Thread(this, "Network Faults maker : undefined");
0: 			this.rnd	= rnd;
0: 			this.socket	= socket;
0: 			this.address	= address;
1: 		}
1: 
0: 		public void start() {
0: 			this.processus.setName("Network Faults maker : " + this.socket.toString());
0: 			this.processus.start();
1: 		}
1: 
0: 		public void run () {
0: 			int 	lastDelayVal;
0: 			Integer lastDelay;
0: 			while (!this.processus.isInterrupted()) {
0: 				if (!this.socket.isClosed()) {
0: 					try {
0: 						lastDelay = closeIter.get(this.address);
0: 						if (lastDelay == null) { 
0: 							lastDelayVal = 0;
1: 						}
0: 						else {
0: 							lastDelayVal = lastDelay.intValue();
0: 							if (lastDelayVal > 10)
0: 								lastDelayVal += 20;
0: 							else	lastDelayVal += 1;	
1: 						}
1: 
0: 						lastDelay = new Integer(lastDelayVal);
1: 
0: 						LOG.info("Trying to close client socket " + socket.toString() +  " in " + lastDelayVal + " milliseconds");
1: 
0: 						try {
0: 							Thread.sleep(lastDelayVal);
0: 						} catch (InterruptedException e) {
0: 							this.processus.interrupt();
0: 							Thread.currentThread().interrupt();
0: 						} catch (IllegalArgumentException e) {
1: 						}
1: 							
0: 						this.socket.close();
0: 						closeIter.put(this.address, lastDelay);
0: 						LOG.info("Client socket " + this.socket.toString() + " is closed.");
0: 					} catch (IOException e) {
1: 					}
1: 				}
1: 
0: 				this.processus.interrupt();
1: 			}
1: 		}
1: 	}
1: 
0: 	private	final Bagot		bagot;
0: 	private final Socket		socket;
1: 
0: 	public SocketTst(InetAddress address, int port, Random rnd) throws IOException {
0: 		this.socket = new Socket(address, port);
0: 		bagot = new Bagot(rnd, this.socket, address);
1: 	}
1: 
0: 	public SocketTst(InetAddress address, int port, InetAddress localAddr, int localPort, Random rnd) throws IOException {
0: 		this.socket = new Socket(address, port, localAddr, localPort);
0: 		bagot = new Bagot(rnd, this.socket, address);
1: 	}
1: 
0: 	public SocketTst(String address, int port, Random rnd) throws UnknownHostException, IOException {
0: 		this.socket = new Socket(address, port);
0: 		bagot = new Bagot(rnd, this.socket, InetAddress.getByName(address));
1: 	}
1: 
0: 	public SocketTst(String address, int port, InetAddress localAddr, int localPort, Random rnd) throws IOException {
0: 		this.socket = new Socket(address, port, localAddr, localPort);
0: 		bagot = new Bagot(rnd, this.socket, InetAddress.getByName(address));
1: 	}
1: 
0: 	public Socket getSocket() {
0: 		return this.socket;
1: 	}
1: 
0: 	public void startBagot() {
0: 		bagot.start();
1: 	}
1:     };
1: 
0:     private final Random		rnd;
1: 
1:     public SocketTstFactory() {
0: 	super();
0: 	LOG.info("Creating a new SocketTstFactory");
0: 	this.rnd	= new Random();
1:     }
1: 
1:     public Socket createSocket(InetAddress host, int port) throws IOException {
0: 	SocketTst sockTst;
0: 	sockTst = new SocketTst(host, port, this.rnd);
0: 	sockTst.startBagot();
0: 	return sockTst.getSocket();
1:     }
1: 
1:     public Socket createSocket(InetAddress host, int port, InetAddress localAddress, int localPort) throws IOException {
0: 	SocketTst	sockTst;
0: 	sockTst = new SocketTst(host, port, localAddress, localPort, this.rnd);
0: 	sockTst.startBagot();
0: 	return sockTst.getSocket();
1:     }
1: 
1:     public Socket createSocket(String host, int port) throws IOException {
0: 	SocketTst	sockTst;
0: 	sockTst = new SocketTst(host, port, this.rnd);
0: 	sockTst.startBagot();
0: 	return sockTst.getSocket();
1:     }
1: 
1:     public Socket createSocket(String host, int port, InetAddress localAddress, int localPort) throws IOException {
0: 	SocketTst	sockTst;
0: 	sockTst = new SocketTst(host, port, localAddress, localPort, this.rnd);
0: 	sockTst.startBagot();
0: 	return sockTst.getSocket();
1:     }
1: 
1:     private final static SocketTstFactory client = new SocketTstFactory();
1: 
1:     public static SocketFactory getDefault() {
0: 	return client;
1:     }
1: }
============================================================================