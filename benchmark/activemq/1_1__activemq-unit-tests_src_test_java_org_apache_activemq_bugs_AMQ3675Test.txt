1:5aa8b30: /**
1:5aa8b30:  * Licensed to the Apache Software Foundation (ASF) under one or more
1:5aa8b30:  * contributor license agreements.  See the NOTICE file distributed with
1:5aa8b30:  * this work for additional information regarding copyright ownership.
1:5aa8b30:  * The ASF licenses this file to You under the Apache License, Version 2.0
1:5aa8b30:  * (the "License"); you may not use this file except in compliance with
1:5aa8b30:  * the License.  You may obtain a copy of the License at
1:5aa8b30:  *
1:5aa8b30:  *      http://www.apache.org/licenses/LICENSE-2.0
1:5aa8b30:  *
1:5aa8b30:  * Unless required by applicable law or agreed to in writing, software
1:5aa8b30:  * distributed under the License is distributed on an "AS IS" BASIS,
1:5aa8b30:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:5aa8b30:  * See the License for the specific language governing permissions and
1:5aa8b30:  * limitations under the License.
1:5aa8b30:  */
1:5aa8b30: 
1:5aa8b30: package org.apache.activemq.bugs;
1:5aa8b30: 
1:5aa8b30: import static org.junit.Assert.*;
1:5aa8b30: 
1:5aa8b30: import javax.jms.Connection;
1:5aa8b30: import javax.jms.DeliveryMode;
1:5aa8b30: import javax.jms.MessageProducer;
1:5aa8b30: import javax.jms.Session;
1:5aa8b30: import javax.jms.TopicSubscriber;
1:5aa8b30: import javax.management.ObjectName;
1:5aa8b30: 
1:5aa8b30: import org.apache.activemq.ActiveMQConnectionFactory;
1:5aa8b30: import org.apache.activemq.broker.BrokerService;
1:5aa8b30: import org.apache.activemq.broker.TransportConnector;
1:5aa8b30: import org.apache.activemq.broker.jmx.BrokerView;
1:5aa8b30: import org.apache.activemq.broker.jmx.TopicViewMBean;
1:5aa8b30: import org.apache.activemq.command.ActiveMQTopic;
1:5aa8b30: import org.apache.activemq.util.Wait;
1:5aa8b30: import org.junit.After;
1:5aa8b30: import org.junit.Before;
1:5aa8b30: import org.junit.Test;
1:5aa8b30: import org.slf4j.Logger;
1:5aa8b30: import org.slf4j.LoggerFactory;
1:5aa8b30: 
1:5aa8b30: public class AMQ3675Test {
1:5aa8b30: 
1:5aa8b30:     private static Logger LOG = LoggerFactory.getLogger(AMQ3675Test.class);
1:5aa8b30: 
1:5aa8b30:     private final static int deliveryMode = DeliveryMode.NON_PERSISTENT;
1:5aa8b30:     private final static ActiveMQTopic destination = new ActiveMQTopic("XYZ");
1:5aa8b30: 
1:5aa8b30:     private ActiveMQConnectionFactory factory;
1:5aa8b30:     private BrokerService broker;
1:5aa8b30: 
1:5aa8b30:     public TopicViewMBean getTopicView() throws Exception {
1:5aa8b30:         ObjectName destinationName = broker.getAdminView().getTopics()[0];
1:5aa8b30:         TopicViewMBean topicView = (TopicViewMBean) broker.getManagementContext().newProxyInstance(destinationName, TopicViewMBean.class, true);
1:5aa8b30:         return topicView;
1:5aa8b30:     }
1:5aa8b30: 
1:5aa8b30:     @Test
1:5aa8b30:     public void countConsumers() throws Exception {
1:5aa8b30: 
1:5aa8b30:         final Connection producerConnection = factory.createConnection();
1:5aa8b30:         producerConnection.start();
1:5aa8b30:         final Connection consumerConnection = factory.createConnection();
1:5aa8b30: 
1:5aa8b30:         consumerConnection.setClientID("subscriber1");
1:5aa8b30:         Session consumerMQSession = consumerConnection.createSession(false, Session.CLIENT_ACKNOWLEDGE);
1:5aa8b30:         TopicSubscriber consumer = consumerMQSession.createDurableSubscriber(destination, "myTopic");
1:5aa8b30:         consumerConnection.start();
1:5aa8b30: 
1:5aa8b30:         Session session = producerConnection.createSession(false, Session.AUTO_ACKNOWLEDGE);
1:5aa8b30:         MessageProducer producer = session.createProducer(destination);
1:5aa8b30:         producer.setDeliveryMode(deliveryMode);
1:5aa8b30: 
1:5aa8b30:         final BrokerView brokerView = broker.getAdminView();
1:5aa8b30:         final TopicViewMBean topicView = getTopicView();
1:5aa8b30: 
1:5aa8b30:         assertTrue("Should have one consumer on topic: ", Wait.waitFor(new Wait.Condition() {
1:5aa8b30:             @Override
1:5aa8b30:             public boolean isSatisified() throws Exception {
1:5aa8b30:                 return topicView.getConsumerCount() == 1;
1:5aa8b30:             }
1:5aa8b30:         }));
1:5aa8b30: 
1:5aa8b30:         consumer.close();
1:5aa8b30: 
1:5aa8b30:         assertTrue("Durable consumer should now be inactive.", Wait.waitFor(new Wait.Condition() {
1:5aa8b30:             @Override
1:5aa8b30:             public boolean isSatisified() throws Exception {
1:5aa8b30:                 return brokerView.getInactiveDurableTopicSubscribers().length == 1;
1:5aa8b30:             }
1:5aa8b30:         }));
1:5aa8b30: 
1:5aa8b30:         try {
1:5aa8b30:             brokerView.removeTopic(destination.getTopicName());
1:5aa8b30:         } catch (Exception e1) {
1:5aa8b30:             fail("Unable to remove destination:" + destination.getPhysicalName());
1:5aa8b30:         }
1:5aa8b30: 
1:5aa8b30:         assertTrue("Should have no topics on the broker", Wait.waitFor(new Wait.Condition() {
1:5aa8b30:             @Override
1:5aa8b30:             public boolean isSatisified() throws Exception {
1:5aa8b30:                 return brokerView.getTopics().length == 0;
1:5aa8b30:             }
1:5aa8b30:         }));
1:5aa8b30: 
1:5aa8b30:         try {
1:5aa8b30:             brokerView.destroyDurableSubscriber("subscriber1", "myTopic");
1:5aa8b30:         } catch(Exception e) {
1:5aa8b30:             fail("Exception not expected when attempting to delete Durable consumer.");
1:5aa8b30:         }
1:5aa8b30: 
1:5aa8b30:         assertTrue("Should be no durable consumers active or inactive.", Wait.waitFor(new Wait.Condition() {
1:5aa8b30:             @Override
1:5aa8b30:             public boolean isSatisified() throws Exception {
1:5aa8b30:                 return brokerView.getInactiveDurableTopicSubscribers().length == 0 &&
1:5aa8b30:                        brokerView.getDurableTopicSubscribers().length == 0;
1:5aa8b30:             }
1:5aa8b30:         }));
1:5aa8b30: 
1:5aa8b30:         consumer = consumerMQSession.createDurableSubscriber(destination, "myTopic");
1:5aa8b30: 
1:5aa8b30:         consumer.close();
1:5aa8b30: 
1:5aa8b30:         assertTrue("Should be one consumer on the Topic.", Wait.waitFor(new Wait.Condition() {
1:5aa8b30:             @Override
1:5aa8b30:             public boolean isSatisified() throws Exception {
1:5aa8b30:                 LOG.info("Number of inactive consumers: " + brokerView.getInactiveDurableTopicSubscribers().length);
1:5aa8b30:                 return brokerView.getInactiveDurableTopicSubscribers().length == 1;
1:5aa8b30:             }
1:5aa8b30:         }));
1:5aa8b30: 
1:5aa8b30:         final TopicViewMBean recreatedTopicView = getTopicView();
1:5aa8b30: 
1:5aa8b30:         assertTrue("Should have one consumer on topic: ", Wait.waitFor(new Wait.Condition() {
1:5aa8b30:             @Override
1:5aa8b30:             public boolean isSatisified() throws Exception {
1:5aa8b30:                 return recreatedTopicView.getConsumerCount() == 1;
1:5aa8b30:             }
1:5aa8b30:         }));
1:5aa8b30:     }
1:5aa8b30: 
1:5aa8b30:     @Before
1:5aa8b30:     public void setUp() throws Exception {
1:5aa8b30:         broker = new BrokerService();
1:5aa8b30:         broker.setPersistent(false);
1:5aa8b30:         broker.setUseJmx(true);
1:5aa8b30:         broker.setAdvisorySupport(false);
1:5aa8b30:         broker.setDeleteAllMessagesOnStartup(true);
1:5aa8b30:         TransportConnector connector = broker.addConnector("tcp://localhost:0");
1:5aa8b30:         broker.start();
1:5aa8b30: 
1:5aa8b30:         factory = new ActiveMQConnectionFactory(connector.getPublishableConnectString());
1:5aa8b30:         factory.setAlwaysSyncSend(true);
1:5aa8b30:         factory.setDispatchAsync(false);
1:5aa8b30:     }
1:5aa8b30: 
1:5aa8b30:     @After
1:5aa8b30:     public void tearDown() throws Exception {
1:5aa8b30:         broker.stop();
1:5aa8b30:     }
1:5aa8b30: }
============================================================================
author:Timothy A. Bish
-------------------------------------------------------------------------------
commit:ef24cc9
commit:5aa8b30
/////////////////////////////////////////////////////////////////////////
1: /**
1:  * Licensed to the Apache Software Foundation (ASF) under one or more
1:  * contributor license agreements.  See the NOTICE file distributed with
1:  * this work for additional information regarding copyright ownership.
1:  * The ASF licenses this file to You under the Apache License, Version 2.0
1:  * (the "License"); you may not use this file except in compliance with
1:  * the License.  You may obtain a copy of the License at
1:  *
1:  *      http://www.apache.org/licenses/LICENSE-2.0
1:  *
1:  * Unless required by applicable law or agreed to in writing, software
1:  * distributed under the License is distributed on an "AS IS" BASIS,
1:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:  * See the License for the specific language governing permissions and
1:  * limitations under the License.
1:  */
1: 
1: package org.apache.activemq.bugs;
1: 
1: import static org.junit.Assert.*;
1: 
1: import javax.jms.Connection;
1: import javax.jms.DeliveryMode;
1: import javax.jms.MessageProducer;
1: import javax.jms.Session;
1: import javax.jms.TopicSubscriber;
1: import javax.management.ObjectName;
1: 
1: import org.apache.activemq.ActiveMQConnectionFactory;
1: import org.apache.activemq.broker.BrokerService;
1: import org.apache.activemq.broker.TransportConnector;
1: import org.apache.activemq.broker.jmx.BrokerView;
1: import org.apache.activemq.broker.jmx.TopicViewMBean;
1: import org.apache.activemq.command.ActiveMQTopic;
1: import org.apache.activemq.util.Wait;
1: import org.junit.After;
1: import org.junit.Before;
1: import org.junit.Test;
1: import org.slf4j.Logger;
1: import org.slf4j.LoggerFactory;
1: 
1: public class AMQ3675Test {
1: 
1:     private static Logger LOG = LoggerFactory.getLogger(AMQ3675Test.class);
1: 
1:     private final static int deliveryMode = DeliveryMode.NON_PERSISTENT;
1:     private final static ActiveMQTopic destination = new ActiveMQTopic("XYZ");
1: 
1:     private ActiveMQConnectionFactory factory;
1:     private BrokerService broker;
1: 
1:     public TopicViewMBean getTopicView() throws Exception {
1:         ObjectName destinationName = broker.getAdminView().getTopics()[0];
1:         TopicViewMBean topicView = (TopicViewMBean) broker.getManagementContext().newProxyInstance(destinationName, TopicViewMBean.class, true);
1:         return topicView;
1:     }
1: 
1:     @Test
1:     public void countConsumers() throws Exception {
1: 
1:         final Connection producerConnection = factory.createConnection();
1:         producerConnection.start();
1:         final Connection consumerConnection = factory.createConnection();
1: 
1:         consumerConnection.setClientID("subscriber1");
1:         Session consumerMQSession = consumerConnection.createSession(false, Session.CLIENT_ACKNOWLEDGE);
1:         TopicSubscriber consumer = consumerMQSession.createDurableSubscriber(destination, "myTopic");
1:         consumerConnection.start();
1: 
1:         Session session = producerConnection.createSession(false, Session.AUTO_ACKNOWLEDGE);
1:         MessageProducer producer = session.createProducer(destination);
1:         producer.setDeliveryMode(deliveryMode);
1: 
1:         final BrokerView brokerView = broker.getAdminView();
1:         final TopicViewMBean topicView = getTopicView();
1: 
1:         assertTrue("Should have one consumer on topic: ", Wait.waitFor(new Wait.Condition() {
1:             @Override
1:             public boolean isSatisified() throws Exception {
1:                 return topicView.getConsumerCount() == 1;
1:             }
1:         }));
1: 
1:         consumer.close();
1: 
1:         assertTrue("Durable consumer should now be inactive.", Wait.waitFor(new Wait.Condition() {
1:             @Override
1:             public boolean isSatisified() throws Exception {
1:                 return brokerView.getInactiveDurableTopicSubscribers().length == 1;
1:             }
1:         }));
1: 
1:         try {
1:             brokerView.removeTopic(destination.getTopicName());
1:         } catch (Exception e1) {
1:             fail("Unable to remove destination:" + destination.getPhysicalName());
1:         }
1: 
1:         assertTrue("Should have no topics on the broker", Wait.waitFor(new Wait.Condition() {
1:             @Override
1:             public boolean isSatisified() throws Exception {
1:                 return brokerView.getTopics().length == 0;
1:             }
1:         }));
1: 
1:         try {
1:             brokerView.destroyDurableSubscriber("subscriber1", "myTopic");
1:         } catch(Exception e) {
1:             fail("Exception not expected when attempting to delete Durable consumer.");
1:         }
1: 
1:         assertTrue("Should be no durable consumers active or inactive.", Wait.waitFor(new Wait.Condition() {
1:             @Override
1:             public boolean isSatisified() throws Exception {
1:                 return brokerView.getInactiveDurableTopicSubscribers().length == 0 &&
1:                        brokerView.getDurableTopicSubscribers().length == 0;
1:             }
1:         }));
1: 
1:         consumer = consumerMQSession.createDurableSubscriber(destination, "myTopic");
1: 
1:         consumer.close();
1: 
1:         assertTrue("Should be one consumer on the Topic.", Wait.waitFor(new Wait.Condition() {
1:             @Override
1:             public boolean isSatisified() throws Exception {
1:                 LOG.info("Number of inactive consumers: " + brokerView.getInactiveDurableTopicSubscribers().length);
1:                 return brokerView.getInactiveDurableTopicSubscribers().length == 1;
1:             }
1:         }));
1: 
1:         final TopicViewMBean recreatedTopicView = getTopicView();
1: 
1:         assertTrue("Should have one consumer on topic: ", Wait.waitFor(new Wait.Condition() {
1:             @Override
1:             public boolean isSatisified() throws Exception {
1:                 return recreatedTopicView.getConsumerCount() == 1;
1:             }
1:         }));
1:     }
1: 
1:     @Before
1:     public void setUp() throws Exception {
1:         broker = new BrokerService();
1:         broker.setPersistent(false);
1:         broker.setUseJmx(true);
1:         broker.setAdvisorySupport(false);
1:         broker.setDeleteAllMessagesOnStartup(true);
1:         TransportConnector connector = broker.addConnector("tcp://localhost:0");
1:         broker.start();
1: 
1:         factory = new ActiveMQConnectionFactory(connector.getPublishableConnectString());
1:         factory.setAlwaysSyncSend(true);
1:         factory.setDispatchAsync(false);
1:     }
1: 
1:     @After
1:     public void tearDown() throws Exception {
1:         broker.stop();
1:     }
1: }
============================================================================