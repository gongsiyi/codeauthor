1:80ecfb7: /**
1:80ecfb7:  * Licensed to the Apache Software Foundation (ASF) under one or more
1:80ecfb7:  * contributor license agreements.  See the NOTICE file distributed with
1:80ecfb7:  * this work for additional information regarding copyright ownership.
1:80ecfb7:  * The ASF licenses this file to You under the Apache License, Version 2.0
1:80ecfb7:  * (the "License"); you may not use this file except in compliance with
1:80ecfb7:  * the License.  You may obtain a copy of the License at
1:80ecfb7:  *
1:80ecfb7:  *      http://www.apache.org/licenses/LICENSE-2.0
1:80ecfb7:  *
1:80ecfb7:  * Unless required by applicable law or agreed to in writing, software
1:80ecfb7:  * distributed under the License is distributed on an "AS IS" BASIS,
1:80ecfb7:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:80ecfb7:  * See the License for the specific language governing permissions and
1:80ecfb7:  * limitations under the License.
1:80ecfb7:  */
1:80ecfb7: package org.apache.activemq.bugs;
1:80ecfb7: 
1:80ecfb7: import java.io.File;
1:80ecfb7: import java.util.Vector;
1:80ecfb7: import java.util.concurrent.atomic.AtomicInteger;
1:dafc825: 
1:80ecfb7: import javax.jms.Connection;
1:80ecfb7: import javax.jms.DeliveryMode;
1:80ecfb7: import javax.jms.Destination;
1:80ecfb7: import javax.jms.Message;
1:80ecfb7: import javax.jms.MessageConsumer;
1:80ecfb7: import javax.jms.MessageProducer;
1:80ecfb7: import javax.jms.Session;
1:dafc825: 
1:80ecfb7: import org.apache.activemq.ActiveMQConnectionFactory;
1:80ecfb7: import org.apache.activemq.ActiveMQPrefetchPolicy;
1:80ecfb7: import org.apache.activemq.TestSupport;
1:80ecfb7: import org.apache.activemq.broker.BrokerService;
1:80ecfb7: import org.apache.activemq.broker.region.policy.PolicyEntry;
1:80ecfb7: import org.apache.activemq.broker.region.policy.PolicyMap;
1:80ecfb7: import org.apache.activemq.command.ActiveMQQueue;
1:80ecfb7: import org.apache.activemq.util.Wait;
1:5a80cee: import org.junit.After;
1:5a80cee: import org.junit.Before;
1:5a80cee: import org.junit.runners.BlockJUnit4ClassRunner;
1:5a80cee: import org.junit.runner.RunWith;
1:5a80cee: import org.junit.Test;
1:80ecfb7: import org.slf4j.Logger;
1:80ecfb7: import org.slf4j.LoggerFactory;
1:80ecfb7: 
1:5a80cee: import static org.junit.Assert.*;
1:5a80cee: 
1:5a80cee: 
1:5a80cee: @RunWith(BlockJUnit4ClassRunner.class)
1:80ecfb7: public class MemoryUsageBlockResumeTest extends TestSupport implements Thread.UncaughtExceptionHandler {
1:80ecfb7: 
1:80ecfb7:     public int deliveryMode = DeliveryMode.PERSISTENT;
1:80ecfb7: 
1:80ecfb7:     private static final Logger LOG = LoggerFactory.getLogger(MemoryUsageBlockResumeTest.class);
1:80ecfb7:     private static byte[] buf = new byte[4 * 1024];
1:80ecfb7:     private static byte[] bigBuf = new byte[48 * 1024];
1:80ecfb7: 
1:80ecfb7:     private BrokerService broker;
1:80ecfb7:     AtomicInteger messagesSent = new AtomicInteger(0);
1:80ecfb7:     AtomicInteger messagesConsumed = new AtomicInteger(0);
1:80ecfb7: 
1:80ecfb7:     protected long messageReceiveTimeout = 10000L;
1:80ecfb7: 
1:80ecfb7:     Destination destination = new ActiveMQQueue("FooTwo");
1:80ecfb7:     Destination bigDestination = new ActiveMQQueue("FooTwoBig");
1:80ecfb7: 
1:80ecfb7:     private String connectionUri;
1:dafc825:     private final Vector<Throwable> exceptions = new Vector<Throwable>();
1:80ecfb7: 
1:5a80cee:     @Test(timeout = 60 * 1000)
1:80ecfb7:     public void testBlockByOtherResumeNoException() throws Exception {
1:80ecfb7: 
1:80ecfb7:         ActiveMQConnectionFactory factory = new ActiveMQConnectionFactory(connectionUri);
1:80ecfb7: 
1:80ecfb7:         // ensure more than on message can be pending when full
1:80ecfb7:         factory.setProducerWindowSize(48*1024);
1:80ecfb7:         // ensure messages are spooled to disk for this consumer
1:80ecfb7:         ActiveMQPrefetchPolicy prefetch = new ActiveMQPrefetchPolicy();
1:80ecfb7:         prefetch.setTopicPrefetch(10);
1:80ecfb7:         factory.setPrefetchPolicy(prefetch);
1:80ecfb7:         Connection consumerConnection = factory.createConnection();
1:80ecfb7:         consumerConnection.start();
1:80ecfb7: 
1:80ecfb7:         Session consumerSession = consumerConnection.createSession(false, Session.AUTO_ACKNOWLEDGE);
1:80ecfb7:         MessageConsumer consumer = consumerSession.createConsumer(bigDestination);
1:80ecfb7: 
1:80ecfb7:         final Connection producerConnection = factory.createConnection();
1:80ecfb7:         producerConnection.start();
1:80ecfb7: 
1:80ecfb7:         final int fillWithBigCount = 10;
1:80ecfb7:         Session session = producerConnection.createSession(false, Session.AUTO_ACKNOWLEDGE);
1:80ecfb7:         MessageProducer producer = session.createProducer(null);
1:80ecfb7:         producer.setDeliveryMode(deliveryMode);
1:80ecfb7:         for (int idx = 0; idx < fillWithBigCount; ++idx) {
1:80ecfb7:             Message message = session.createTextMessage(new String(bigBuf) + idx);
1:80ecfb7:             producer.send(bigDestination, message);
1:80ecfb7:             messagesSent.incrementAndGet();
1:80ecfb7:             LOG.info("After big: " + idx + ", System Memory Usage " + broker.getSystemUsage().getMemoryUsage().getPercentUsage());
1:80ecfb7:         }
1:80ecfb7: 
1:80ecfb7:         // will block on pfc
1:80ecfb7:         final int toSend = 20;
1:80ecfb7:         Thread producingThread = new Thread("Producing thread") {
1:80ecfb7:             @Override
1:80ecfb7:             public void run() {
1:80ecfb7:                 try {
1:80ecfb7:                     Session session = producerConnection.createSession(false, Session.AUTO_ACKNOWLEDGE);
1:80ecfb7:                     MessageProducer producer = session.createProducer(destination);
1:80ecfb7:                     producer.setDeliveryMode(deliveryMode);
1:80ecfb7:                     for (int idx = 0; idx < toSend; ++idx) {
1:80ecfb7:                         Message message = session.createTextMessage(new String(buf) + idx);
1:80ecfb7:                         producer.send(destination, message);
1:80ecfb7:                         messagesSent.incrementAndGet();
1:80ecfb7:                         LOG.info("After little:" + idx + ", System Memory Usage " + broker.getSystemUsage().getMemoryUsage().getPercentUsage());
1:80ecfb7:                     }
1:80ecfb7:                 } catch (Throwable ex) {
1:80ecfb7:                     ex.printStackTrace();
1:80ecfb7:                 }
1:80ecfb7:             }
1:80ecfb7:         };
1:80ecfb7:         producingThread.start();
1:80ecfb7: 
1:80ecfb7:         Thread producingThreadTwo = new Thread("Producing thread") {
1:80ecfb7:             @Override
1:80ecfb7:             public void run() {
1:80ecfb7:                 try {
1:80ecfb7:                     Session session = producerConnection.createSession(false, Session.AUTO_ACKNOWLEDGE);
1:80ecfb7:                     MessageProducer producer = session.createProducer(destination);
1:80ecfb7:                     producer.setDeliveryMode(deliveryMode);
1:80ecfb7:                     for (int idx = 0; idx < toSend; ++idx) {
1:80ecfb7:                         Message message = session.createTextMessage(new String(buf) + idx);
1:80ecfb7:                         producer.send(destination, message);
1:80ecfb7:                         messagesSent.incrementAndGet();
1:80ecfb7:                         LOG.info("After little:" + idx + ", System Memory Usage " + broker.getSystemUsage().getMemoryUsage().getPercentUsage());
1:80ecfb7:                     }
1:80ecfb7:                 } catch (Throwable ex) {
1:80ecfb7:                     ex.printStackTrace();
1:80ecfb7:                 }
1:80ecfb7:             }
1:80ecfb7:         };
1:80ecfb7:         producingThreadTwo.start();
1:80ecfb7: 
1:80ecfb7:         assertTrue("producer has sent x in a reasonable time", Wait.waitFor(new Wait.Condition()
1:80ecfb7:         {
1:80ecfb7:             @Override
1:80ecfb7:             public boolean isSatisified() throws Exception {
1:80ecfb7:                  LOG.info("Checking for : X sent, System Memory Usage " + broker.getSystemUsage().getMemoryUsage().getPercentUsage() + ", sent:  " + messagesSent);
1:80ecfb7:                 return messagesSent.get() > 20;
1:80ecfb7:             }
1:80ecfb7:         }));
1:80ecfb7: 
1:80ecfb7: 
1:80ecfb7:         LOG.info("Consuming from big q to allow delivery to smaller q from pending");
1:80ecfb7:         int count = 0;
1:80ecfb7: 
1:80ecfb7:         Message m = null;
1:80ecfb7: 
1:80ecfb7:         for (;count < 10; count++) {
1:80ecfb7:             assertTrue((m = consumer.receive(messageReceiveTimeout)) != null);
1:80ecfb7:             LOG.info("Recieved Message (" + count + "):" + m + ", System Memory Usage " + broker.getSystemUsage().getMemoryUsage().getPercentUsage());
1:80ecfb7:             messagesConsumed.incrementAndGet();
1:80ecfb7:         }
1:80ecfb7:         consumer.close();
1:80ecfb7: 
1:80ecfb7:         producingThread.join();
1:80ecfb7:         producingThreadTwo.join();
1:80ecfb7: 
1:80ecfb7:         assertEquals("Incorrect number of Messages Sent: " + messagesSent.get(), messagesSent.get(), fillWithBigCount +  toSend*2);
1:80ecfb7: 
1:80ecfb7:         // consume all little messages
1:80ecfb7:         consumer = consumerSession.createConsumer(destination);
1:80ecfb7:         for (count = 0;count < toSend*2; count++) {
1:80ecfb7:             assertTrue((m = consumer.receive(messageReceiveTimeout)) != null);
1:80ecfb7:             LOG.info("Recieved Message (" + count + "):" + m + ", System Memory Usage " + broker.getSystemUsage().getMemoryUsage().getPercentUsage() );
1:80ecfb7:             messagesConsumed.incrementAndGet();
1:80ecfb7:         }
1:80ecfb7: 
1:80ecfb7:         assertEquals("Incorrect number of Messages consumed: " + messagesConsumed.get(), messagesSent.get(), messagesConsumed.get());
1:80ecfb7: 
1:80ecfb7:         //assertTrue("no exceptions: " + exceptions, exceptions.isEmpty());
1:80ecfb7:     }
1:80ecfb7: 
1:80ecfb7:     @Override
1:5a80cee:     @Before
1:80ecfb7:     public void setUp() throws Exception {
1:80ecfb7: 
1:80ecfb7:         Thread.setDefaultUncaughtExceptionHandler(this);
1:80ecfb7:         broker = new BrokerService();
1:80ecfb7:         broker.setDataDirectory("target" + File.separator + "activemq-data");
1:80ecfb7:         broker.setPersistent(true);
1:dafc825:         broker.setUseJmx(false);
1:80ecfb7:         broker.setAdvisorySupport(false);
1:80ecfb7:         broker.setDeleteAllMessagesOnStartup(true);
1:80ecfb7: 
1:80ecfb7:         setDefaultPersistenceAdapter(broker);
1:80ecfb7:         broker.getSystemUsage().getMemoryUsage().setLimit((30 * 16 * 1024));
1:80ecfb7: 
1:80ecfb7:         PolicyEntry defaultPolicy = new PolicyEntry();
1:80ecfb7:         defaultPolicy.setOptimizedDispatch(true);
1:80ecfb7:         PolicyMap policyMap = new PolicyMap();
1:80ecfb7:         policyMap.setDefaultEntry(defaultPolicy);
1:80ecfb7:         broker.setDestinationPolicy(policyMap);
1:80ecfb7: 
1:80ecfb7:         broker.addConnector("tcp://localhost:0");
1:80ecfb7:         broker.start();
1:80ecfb7: 
1:80ecfb7:         connectionUri = broker.getTransportConnectors().get(0).getPublishableConnectString();
1:80ecfb7:     }
1:80ecfb7: 
1:80ecfb7:     @Override
1:5a80cee:     @After
1:80ecfb7:     public void tearDown() throws Exception {
1:80ecfb7:         if (broker != null) {
1:80ecfb7:             broker.stop();
1:80ecfb7:         }
1:80ecfb7:     }
1:80ecfb7: 
1:80ecfb7:     @Override
1:80ecfb7:     public void uncaughtException(Thread t, Throwable e) {
1:80ecfb7:         LOG.error("Unexpected Unhandeled ex on: " + t, e);
1:80ecfb7:         exceptions.add(e);
1:80ecfb7:     }
1:80ecfb7: }
============================================================================
author:Kevin Earls
-------------------------------------------------------------------------------
commit:5a80cee
/////////////////////////////////////////////////////////////////////////
1: import org.junit.After;
1: import org.junit.Before;
1: import org.junit.runners.BlockJUnit4ClassRunner;
1: import org.junit.runner.RunWith;
1: import org.junit.Test;
1: import static org.junit.Assert.*;
1: 
1: 
1: @RunWith(BlockJUnit4ClassRunner.class)
/////////////////////////////////////////////////////////////////////////
1:     @Test(timeout = 60 * 1000)
/////////////////////////////////////////////////////////////////////////
1:     @Before
/////////////////////////////////////////////////////////////////////////
1:     @After
author:Timothy A. Bish
-------------------------------------------------------------------------------
commit:ef24cc9
commit:dafc825
/////////////////////////////////////////////////////////////////////////
1: 
/////////////////////////////////////////////////////////////////////////
1: 
/////////////////////////////////////////////////////////////////////////
1:     private final Vector<Throwable> exceptions = new Vector<Throwable>();
/////////////////////////////////////////////////////////////////////////
1:         broker.setUseJmx(false);
author:Gary Tully
-------------------------------------------------------------------------------
commit:80ecfb7
/////////////////////////////////////////////////////////////////////////
1: /**
1:  * Licensed to the Apache Software Foundation (ASF) under one or more
1:  * contributor license agreements.  See the NOTICE file distributed with
1:  * this work for additional information regarding copyright ownership.
1:  * The ASF licenses this file to You under the Apache License, Version 2.0
1:  * (the "License"); you may not use this file except in compliance with
1:  * the License.  You may obtain a copy of the License at
1:  *
1:  *      http://www.apache.org/licenses/LICENSE-2.0
1:  *
1:  * Unless required by applicable law or agreed to in writing, software
1:  * distributed under the License is distributed on an "AS IS" BASIS,
1:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:  * See the License for the specific language governing permissions and
1:  * limitations under the License.
1:  */
1: package org.apache.activemq.bugs;
1: 
1: import java.io.File;
1: import java.util.Vector;
1: import java.util.concurrent.atomic.AtomicInteger;
1: import javax.jms.Connection;
1: import javax.jms.DeliveryMode;
1: import javax.jms.Destination;
1: import javax.jms.Message;
1: import javax.jms.MessageConsumer;
1: import javax.jms.MessageProducer;
1: import javax.jms.Session;
1: import org.apache.activemq.ActiveMQConnectionFactory;
1: import org.apache.activemq.ActiveMQPrefetchPolicy;
1: import org.apache.activemq.TestSupport;
1: import org.apache.activemq.broker.BrokerService;
1: import org.apache.activemq.broker.region.policy.PolicyEntry;
1: import org.apache.activemq.broker.region.policy.PolicyMap;
1: import org.apache.activemq.command.ActiveMQQueue;
1: import org.apache.activemq.util.Wait;
1: import org.slf4j.Logger;
1: import org.slf4j.LoggerFactory;
1: 
1: public class MemoryUsageBlockResumeTest extends TestSupport implements Thread.UncaughtExceptionHandler {
1: 
1:     public int deliveryMode = DeliveryMode.PERSISTENT;
1: 
1:     private static final Logger LOG = LoggerFactory.getLogger(MemoryUsageBlockResumeTest.class);
1:     private static byte[] buf = new byte[4 * 1024];
1:     private static byte[] bigBuf = new byte[48 * 1024];
1: 
1:     private BrokerService broker;
1:     AtomicInteger messagesSent = new AtomicInteger(0);
1:     AtomicInteger messagesConsumed = new AtomicInteger(0);
1: 
1:     protected long messageReceiveTimeout = 10000L;
1: 
1:     Destination destination = new ActiveMQQueue("FooTwo");
1:     Destination bigDestination = new ActiveMQQueue("FooTwoBig");
1: 
1:     private String connectionUri;
0:     private Vector<Throwable> exceptions = new Vector<Throwable>();
1: 
1:     public void testBlockByOtherResumeNoException() throws Exception {
1: 
1:         ActiveMQConnectionFactory factory = new ActiveMQConnectionFactory(connectionUri);
1: 
1:         // ensure more than on message can be pending when full
1:         factory.setProducerWindowSize(48*1024);
1:         // ensure messages are spooled to disk for this consumer
1:         ActiveMQPrefetchPolicy prefetch = new ActiveMQPrefetchPolicy();
1:         prefetch.setTopicPrefetch(10);
1:         factory.setPrefetchPolicy(prefetch);
1:         Connection consumerConnection = factory.createConnection();
1:         consumerConnection.start();
1: 
1:         Session consumerSession = consumerConnection.createSession(false, Session.AUTO_ACKNOWLEDGE);
1:         MessageConsumer consumer = consumerSession.createConsumer(bigDestination);
1: 
1:         final Connection producerConnection = factory.createConnection();
1:         producerConnection.start();
1: 
1:         final int fillWithBigCount = 10;
1:         Session session = producerConnection.createSession(false, Session.AUTO_ACKNOWLEDGE);
1:         MessageProducer producer = session.createProducer(null);
1:         producer.setDeliveryMode(deliveryMode);
1:         for (int idx = 0; idx < fillWithBigCount; ++idx) {
1:             Message message = session.createTextMessage(new String(bigBuf) + idx);
1:             producer.send(bigDestination, message);
1:             messagesSent.incrementAndGet();
1:             LOG.info("After big: " + idx + ", System Memory Usage " + broker.getSystemUsage().getMemoryUsage().getPercentUsage());
1:         }
1: 
1:         // will block on pfc
1:         final int toSend = 20;
1:         Thread producingThread = new Thread("Producing thread") {
1:             @Override
1:             public void run() {
1:                 try {
1:                     Session session = producerConnection.createSession(false, Session.AUTO_ACKNOWLEDGE);
1:                     MessageProducer producer = session.createProducer(destination);
1:                     producer.setDeliveryMode(deliveryMode);
1:                     for (int idx = 0; idx < toSend; ++idx) {
1:                         Message message = session.createTextMessage(new String(buf) + idx);
1:                         producer.send(destination, message);
1:                         messagesSent.incrementAndGet();
1:                         LOG.info("After little:" + idx + ", System Memory Usage " + broker.getSystemUsage().getMemoryUsage().getPercentUsage());
1:                     }
1:                 } catch (Throwable ex) {
1:                     ex.printStackTrace();
1:                 }
1:             }
1:         };
1:         producingThread.start();
1: 
1:         Thread producingThreadTwo = new Thread("Producing thread") {
1:             @Override
1:             public void run() {
1:                 try {
1:                     Session session = producerConnection.createSession(false, Session.AUTO_ACKNOWLEDGE);
1:                     MessageProducer producer = session.createProducer(destination);
1:                     producer.setDeliveryMode(deliveryMode);
1:                     for (int idx = 0; idx < toSend; ++idx) {
1:                         Message message = session.createTextMessage(new String(buf) + idx);
1:                         producer.send(destination, message);
1:                         messagesSent.incrementAndGet();
1:                         LOG.info("After little:" + idx + ", System Memory Usage " + broker.getSystemUsage().getMemoryUsage().getPercentUsage());
1:                     }
1:                 } catch (Throwable ex) {
1:                     ex.printStackTrace();
1:                 }
1:             }
1:         };
1:         producingThreadTwo.start();
1: 
1:         assertTrue("producer has sent x in a reasonable time", Wait.waitFor(new Wait.Condition()
1:         {
1:             @Override
1:             public boolean isSatisified() throws Exception {
1:                  LOG.info("Checking for : X sent, System Memory Usage " + broker.getSystemUsage().getMemoryUsage().getPercentUsage() + ", sent:  " + messagesSent);
1:                 return messagesSent.get() > 20;
1:             }
1:         }));
1: 
1: 
1:         LOG.info("Consuming from big q to allow delivery to smaller q from pending");
1:         int count = 0;
1: 
1:         Message m = null;
1: 
1:         for (;count < 10; count++) {
1:             assertTrue((m = consumer.receive(messageReceiveTimeout)) != null);
1:             LOG.info("Recieved Message (" + count + "):" + m + ", System Memory Usage " + broker.getSystemUsage().getMemoryUsage().getPercentUsage());
1:             messagesConsumed.incrementAndGet();
1:         }
1:         consumer.close();
1: 
1:         producingThread.join();
1:         producingThreadTwo.join();
1: 
1:         assertEquals("Incorrect number of Messages Sent: " + messagesSent.get(), messagesSent.get(), fillWithBigCount +  toSend*2);
1: 
1:         // consume all little messages
1:         consumer = consumerSession.createConsumer(destination);
1:         for (count = 0;count < toSend*2; count++) {
1:             assertTrue((m = consumer.receive(messageReceiveTimeout)) != null);
1:             LOG.info("Recieved Message (" + count + "):" + m + ", System Memory Usage " + broker.getSystemUsage().getMemoryUsage().getPercentUsage() );
1:             messagesConsumed.incrementAndGet();
1:         }
1: 
1:         assertEquals("Incorrect number of Messages consumed: " + messagesConsumed.get(), messagesSent.get(), messagesConsumed.get());
1: 
1:         //assertTrue("no exceptions: " + exceptions, exceptions.isEmpty());
1:     }
1: 
1:     @Override
1:     public void setUp() throws Exception {
1: 
1:         Thread.setDefaultUncaughtExceptionHandler(this);
1:         broker = new BrokerService();
1:         broker.setDataDirectory("target" + File.separator + "activemq-data");
1:         broker.setPersistent(true);
0:         broker.setUseJmx(true);
1:         broker.setAdvisorySupport(false);
1:         broker.setDeleteAllMessagesOnStartup(true);
1: 
1:         setDefaultPersistenceAdapter(broker);
1:         broker.getSystemUsage().getMemoryUsage().setLimit((30 * 16 * 1024));
1: 
1:         PolicyEntry defaultPolicy = new PolicyEntry();
1:         defaultPolicy.setOptimizedDispatch(true);
1:         PolicyMap policyMap = new PolicyMap();
1:         policyMap.setDefaultEntry(defaultPolicy);
1:         broker.setDestinationPolicy(policyMap);
1: 
1:         broker.addConnector("tcp://localhost:0");
1:         broker.start();
1: 
1:         connectionUri = broker.getTransportConnectors().get(0).getPublishableConnectString();
1:     }
1: 
1:     @Override
1:     public void tearDown() throws Exception {
1:         if (broker != null) {
1:             broker.stop();
1:         }
1:     }
1: 
1:     @Override
1:     public void uncaughtException(Thread t, Throwable e) {
1:         LOG.error("Unexpected Unhandeled ex on: " + t, e);
1:         exceptions.add(e);
1:     }
1: }
============================================================================