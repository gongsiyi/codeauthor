1:157d630: /**
1:157d630:  * Licensed to the Apache Software Foundation (ASF) under one or more
1:157d630:  * contributor license agreements.  See the NOTICE file distributed with
1:157d630:  * this work for additional information regarding copyright ownership.
1:157d630:  * The ASF licenses this file to You under the Apache License, Version 2.0
1:157d630:  * (the "License"); you may not use this file except in compliance with
1:157d630:  * the License.  You may obtain a copy of the License at
1:b0c2a40:  *
1:157d630:  *      http://www.apache.org/licenses/LICENSE-2.0
2:157d630:  *
1:157d630:  * Unless required by applicable law or agreed to in writing, software
1:157d630:  * distributed under the License is distributed on an "AS IS" BASIS,
1:157d630:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:157d630:  * See the License for the specific language governing permissions and
1:157d630:  * limitations under the License.
1:157d630:  */
1:157d630: package org.apache.activemq.perf;
1:157d630: 
1:157d630: import java.util.ArrayList;
1:157d630: import java.util.List;
1:4743a20: 
1:157d630: import javax.jms.Connection;
1:157d630: import javax.jms.ConnectionFactory;
1:157d630: import javax.jms.JMSException;
1:4743a20: 
1:157d630: import junit.framework.TestCase;
1:4743a20: 
1:157d630: import org.apache.activemq.ActiveMQConnection;
1:157d630: import org.apache.activemq.ActiveMQConnectionFactory;
1:157d630: import org.apache.activemq.broker.BrokerService;
1:157d630: import org.apache.activemq.broker.TransportConnector;
1:8bf987b: import org.slf4j.Logger;
1:8bf987b: import org.slf4j.LoggerFactory;
1:157d630: 
1:157d630: /**
1:4743a20:  *
1:157d630:  */
1:157d630: public class ConnectionChurnTest extends TestCase {
1:157d630:     protected static final int CONNECTION_COUNT = 200;
1:8bf987b:     private static final Logger LOG = LoggerFactory.getLogger(ConnectionChurnTest.class);
1:157d630:     protected BrokerService broker;
1:cf03717:     protected String bindAddress = ActiveMQConnectionFactory.DEFAULT_BROKER_BIND_URL+"?transport.closeAsync=false";
1:157d630:     protected int topicCount;
1:157d630: 
1:157d630:     public void testPerformance() throws Exception {
1:157d630:         ConnectionFactory factory = createConnectionFactory();
1:4743a20:         List<Connection> list = new ArrayList<Connection>();
1:157d630:         for (int i = 0; i < CONNECTION_COUNT; i++) {
1:157d630:             Connection connection = factory.createConnection();
1:157d630:             connection.start();
1:157d630:             list.add(connection);
1:157d630:             LOG.info("Created " + i);
1:157d630:             if (i % 100 == 0) {
1:157d630:                 closeConnections(list);
1:157d630:             }
1:157d630:         }
1:157d630:         closeConnections(list);
1:157d630:     }
1:157d630: 
1:157d630:     protected void closeConnections(List<Connection> list) throws JMSException {
1:157d630:         for (Connection c : list) {
1:157d630:             c.close();
1:157d630:         }
1:157d630:         for (TransportConnector tc : broker.getTransportConnectors()) {
1:157d630:             System.out.println(tc.getConnections().size());
1:157d630:         }
1:157d630:         list.clear();
1:157d630:     }
1:157d630: 
1:4743a20:     @Override
1:157d630:     protected void setUp() throws Exception {
1:157d630:         if (broker == null) {
1:157d630:             broker = createBroker();
1:157d630:         }
1:157d630:         super.setUp();
1:157d630:     }
1:157d630: 
1:4743a20:     @Override
1:157d630:     protected void tearDown() throws Exception {
1:157d630:         super.tearDown();
1:157d630:         if (broker != null) {
1:157d630:             broker.stop();
1:157d630:         }
1:157d630:     }
1:157d630: 
1:157d630:     protected ActiveMQConnectionFactory createConnectionFactory()
1:157d630:             throws Exception {
1:157d630:         ActiveMQConnectionFactory cf = new ActiveMQConnectionFactory(
1:157d630:                 ActiveMQConnection.DEFAULT_BROKER_URL);
1:157d630:         return cf;
1:157d630:     }
1:157d630: 
1:157d630:     protected BrokerService createBroker() throws Exception {
1:157d630:         BrokerService answer = new BrokerService();
1:157d630:         configureBroker(answer);
1:157d630:         answer.start();
1:157d630:         return answer;
1:157d630:     }
1:157d630: 
1:157d630:     protected void configureBroker(BrokerService answer) throws Exception {
1:157d630:         answer.setPersistent(false);
1:157d630:         answer.addConnector(bindAddress);
1:157d630:         answer.setDeleteAllMessagesOnStartup(true);
1:157d630:     }
1:157d630: }
============================================================================
author:Timothy A. Bish
-------------------------------------------------------------------------------
commit:4743a20
/////////////////////////////////////////////////////////////////////////
1: 
1: 
1: 
/////////////////////////////////////////////////////////////////////////
1:  *
/////////////////////////////////////////////////////////////////////////
1:         List<Connection> list = new ArrayList<Connection>();
/////////////////////////////////////////////////////////////////////////
1:     @Override
/////////////////////////////////////////////////////////////////////////
1:     @Override
commit:ef24cc9
author:Hiram R. Chirino
-------------------------------------------------------------------------------
commit:b0c2a40
/////////////////////////////////////////////////////////////////////////
1:  * 
author:Bosanac Dejan
-------------------------------------------------------------------------------
commit:8bf987b
/////////////////////////////////////////////////////////////////////////
1: import org.slf4j.Logger;
1: import org.slf4j.LoggerFactory;
1:     private static final Logger LOG = LoggerFactory.getLogger(ConnectionChurnTest.class);
author:Robert Davies
-------------------------------------------------------------------------------
commit:cf03717
/////////////////////////////////////////////////////////////////////////
1:     protected String bindAddress = ActiveMQConnectionFactory.DEFAULT_BROKER_BIND_URL+"?transport.closeAsync=false";
commit:157d630
/////////////////////////////////////////////////////////////////////////
1: /**
1:  * Licensed to the Apache Software Foundation (ASF) under one or more
1:  * contributor license agreements.  See the NOTICE file distributed with
1:  * this work for additional information regarding copyright ownership.
1:  * The ASF licenses this file to You under the Apache License, Version 2.0
1:  * (the "License"); you may not use this file except in compliance with
1:  * the License.  You may obtain a copy of the License at
1:  *
1:  *      http://www.apache.org/licenses/LICENSE-2.0
1:  *
1:  * Unless required by applicable law or agreed to in writing, software
1:  * distributed under the License is distributed on an "AS IS" BASIS,
1:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:  * See the License for the specific language governing permissions and
1:  * limitations under the License.
1:  */
1: package org.apache.activemq.perf;
1: 
1: import java.util.ArrayList;
1: import java.util.List;
1: import javax.jms.Connection;
1: import javax.jms.ConnectionFactory;
1: import javax.jms.JMSException;
1: import junit.framework.TestCase;
1: import org.apache.activemq.ActiveMQConnection;
1: import org.apache.activemq.ActiveMQConnectionFactory;
1: import org.apache.activemq.broker.BrokerService;
1: import org.apache.activemq.broker.TransportConnector;
0: import org.apache.commons.logging.Log;
0: import org.apache.commons.logging.LogFactory;
1: 
1: /**
0:  * @version $Revision: 1.3 $
1:  */
1: public class ConnectionChurnTest extends TestCase {
1:     protected static final int CONNECTION_COUNT = 200;
0:     private static final Log LOG = LogFactory.getLog(ConnectionChurnTest.class);
1:     protected BrokerService broker;
0:     protected String bindAddress = ActiveMQConnection.DEFAULT_BROKER_BIND_URL+"?transport.closeAsync=false";
1:     protected int topicCount;
1: 
1:     public void testPerformance() throws Exception {
1:         ConnectionFactory factory = createConnectionFactory();
0:         List<Connection> list = new ArrayList();
1:         for (int i = 0; i < CONNECTION_COUNT; i++) {
1:             Connection connection = factory.createConnection();
1:             connection.start();
1:             list.add(connection);
1:             LOG.info("Created " + i);
1:             if (i % 100 == 0) {
1:                 closeConnections(list);
1:             }
1:         }
1:         closeConnections(list);
1:     }
1: 
1:     protected void closeConnections(List<Connection> list) throws JMSException {
1:         for (Connection c : list) {
1:             c.close();
1:         }
1:         for (TransportConnector tc : broker.getTransportConnectors()) {
1:             System.out.println(tc.getConnections().size());
1:         }
1:         list.clear();
1:     }
1: 
1:     protected void setUp() throws Exception {
1:         if (broker == null) {
1:             broker = createBroker();
1:         }
1:         super.setUp();
1:     }
1: 
1:     protected void tearDown() throws Exception {
1:         super.tearDown();
1:         if (broker != null) {
1:             broker.stop();
1:         }
1:     }
1: 
1:     protected ActiveMQConnectionFactory createConnectionFactory()
1:             throws Exception {
1:         ActiveMQConnectionFactory cf = new ActiveMQConnectionFactory(
1:                 ActiveMQConnection.DEFAULT_BROKER_URL);
1:         return cf;
1:     }
1: 
1:     protected BrokerService createBroker() throws Exception {
1:         BrokerService answer = new BrokerService();
1:         configureBroker(answer);
1:         answer.start();
1:         return answer;
1:     }
1: 
1:     protected void configureBroker(BrokerService answer) throws Exception {
1:         answer.setPersistent(false);
1:         answer.addConnector(bindAddress);
1:         answer.setDeleteAllMessagesOnStartup(true);
1:     }
1: }
============================================================================