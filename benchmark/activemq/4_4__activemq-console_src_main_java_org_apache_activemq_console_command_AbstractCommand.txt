1:a107823: /**
1:57b4941:  * Licensed to the Apache Software Foundation (ASF) under one or more
1:57b4941:  * contributor license agreements.  See the NOTICE file distributed with
1:57b4941:  * this work for additional information regarding copyright ownership.
1:57b4941:  * The ASF licenses this file to You under the Apache License, Version 2.0
1:57b4941:  * (the "License"); you may not use this file except in compliance with
1:57b4941:  * the License.  You may obtain a copy of the License at
3:a107823:  *
1:5f1adbe:  *      http://www.apache.org/licenses/LICENSE-2.0
1:a107823:  *
1:a107823:  * Unless required by applicable law or agreed to in writing, software
1:a107823:  * distributed under the License is distributed on an "AS IS" BASIS,
1:a107823:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:a107823:  * See the License for the specific language governing permissions and
1:a107823:  * limitations under the License.
1:a107823:  */
1:a107823: package org.apache.activemq.console.command;
5:a107823: 
1:9f0ab46: import java.io.BufferedReader;
1:9f0ab46: import java.io.IOException;
1:9f0ab46: import java.io.InputStream;
1:9f0ab46: import java.io.InputStreamReader;
1:73f9131: import java.net.ConnectException;
1:5f1adbe: import java.util.List;
1:5f1adbe: 
1:a107823: import org.apache.activemq.ActiveMQConnectionMetaData;
1:54eb93e: import org.apache.activemq.console.CommandContext;
1:9f0ab46: import org.apache.activemq.util.IntrospectionSupport;
1:a107823: 
1:a107823: public abstract class AbstractCommand implements Command {
1:a107823:     public static final String COMMAND_OPTION_DELIMETER = ",";
1:a107823: 
1:5f1adbe:     private boolean isPrintHelp;
1:5f1adbe:     private boolean isPrintVersion;
1:a107823: 
1:54eb93e:     protected CommandContext context;
1:54eb93e: 
1:54eb93e:     public void setCommandContext(CommandContext context) {
1:54eb93e:         this.context = context;
1:54eb93e:     }
1:73f9131:     
1:a107823:     /**
1:5f1adbe:      * Execute a generic command, which includes parsing the options for the
1:5f1adbe:      * command and running the specific task.
1:5f1adbe:      * 
1:a107823:      * @param tokens - command arguments
1:a107823:      * @throws Exception
1:a107823:      */
1:5f1adbe:     public void execute(List<String> tokens) throws Exception {
1:a107823:         // Parse the options specified by "-"
1:a107823:         parseOptions(tokens);
1:54eb93e: 
1:a107823:         // Print the help file of the task
1:a107823:         if (isPrintHelp) {
1:a107823:             printHelp();
1:a107823: 
1:5f1adbe:             // Print the AMQ version
1:a107823:         } else if (isPrintVersion) {
1:54eb93e:             context.printVersion(ActiveMQConnectionMetaData.PROVIDER_VERSION);
1:a107823: 
1:5f1adbe:             // Run the specified task
1:a107823:         } else {
1:a107823:             runTask(tokens);
3:a107823:         }
1:a107823:     }
1:a107823: 
1:a107823:     /**
1:5f1adbe:      * Parse any option parameters in the command arguments specified by a '-'
1:5f1adbe:      * as the first character of the token.
1:5f1adbe:      * 
1:a107823:      * @param tokens - command arguments
1:a107823:      * @throws Exception
1:a107823:      */
1:5f1adbe:     protected void parseOptions(List<String> tokens) throws Exception {
1:a107823:         while (!tokens.isEmpty()) {
1:5f1adbe:             String token = tokens.remove(0);
1:a107823:             if (token.startsWith("-")) {
1:a107823:                 // Token is an option
1:a107823:                 handleOption(token, tokens);
1:a107823:             } else {
1:a107823:                 // Push back to list of tokens
1:a107823:                 tokens.add(0, token);
1:a107823:                 return;
1:a107823:             }
1:a107823:         }
1:a107823:     }
1:a107823: 
1:a107823:     /**
1:5f1adbe:      * Handle the general options for each command, which includes -h, -?,
1:5f1adbe:      * --help, -D, --version.
1:5f1adbe:      * 
1:a107823:      * @param token - option token to handle
1:a107823:      * @param tokens - succeeding command arguments
1:a107823:      * @throws Exception
1:a107823:      */
1:5f1adbe:     protected void handleOption(String token, List<String> tokens) throws Exception {
1:0dec0b6:         isPrintHelp = false;
1:0dec0b6:         isPrintVersion = false;
1:a107823:         // If token is a help option
1:a107823:         if (token.equals("-h") || token.equals("-?") || token.equals("--help")) {
1:a107823:             isPrintHelp = true;
1:a107823:             tokens.clear();
1:a107823: 
1:5f1adbe:             // If token is a version option
1:a107823:         } else if (token.equals("--version")) {
1:a107823:             isPrintVersion = true;
1:a107823:             tokens.clear();
1:5f1adbe:         } else if (token.startsWith("-D")) {
1:5f1adbe:             // If token is a system property define option
1:a107823:             String key = token.substring(2);
1:a107823:             String value = "";
1:a107823:             int pos = key.indexOf("=");
1:a107823:             if (pos >= 0) {
1:a107823:                 value = key.substring(pos + 1);
1:a107823:                 key = key.substring(0, pos);
1:a107823:             }
1:a107823:             System.setProperty(key, value);
1:5f1adbe:         } else {
1:9f0ab46:             if (token.startsWith("--")) {
1:9f0ab46:                 String prop = token.substring(2);
1:9f0ab46:                 if (tokens.isEmpty() || tokens.get(0).startsWith("-")) {
1:9f0ab46:                     context.print("Property '" + prop + "' is not specified!");
1:9f0ab46:                 } else if (IntrospectionSupport.setProperty(this, prop, tokens.remove(0))) {
1:9f0ab46:                     return;
1:9f0ab46:                 }
1:9f0ab46:             }
1:5f1adbe:             // Token is unrecognized
1:54eb93e:             context.printInfo("Unrecognized option: " + token);
1:26f4d2a:             isPrintHelp = true;
1:a107823:         }
1:a107823:     }
1:a107823: 
1:a107823:     /**
1:a107823:      * Run the specific task.
1:5f1adbe:      * 
1:a107823:      * @param tokens - command arguments
1:a107823:      * @throws Exception
1:a107823:      */
1:5f1adbe:     protected abstract void runTask(List<String> tokens) throws Exception;
1:a107823: 
1:a107823:     /**
1:a107823:      * Print the help messages for the specific task
1:a107823:      */
1:5f1adbe:     protected abstract void printHelp();
1:9f0ab46: 
1:9f0ab46:     protected void printHelpFromFile() {
1:9f0ab46:         BufferedReader reader = null;
1:9f0ab46:         try {
1:9f0ab46:             InputStream is = getClass().getResourceAsStream(getName() + ".txt");
1:9f0ab46:             reader = new BufferedReader(new InputStreamReader(is));
1:9f0ab46:             String line;
1:9f0ab46:             while ((line = reader.readLine()) != null) {
1:9f0ab46:                 context.print(line);
1:9f0ab46:             }
1:9f0ab46:         } catch (Exception e) {} finally {
1:9f0ab46:             if (reader != null) {
1:9f0ab46:                 try {
1:9f0ab46:                     reader.close();
1:9f0ab46:                 } catch (IOException e) {}
1:9f0ab46:             }
1:9f0ab46:         }
1:9f0ab46:     }
1:a107823: 
1:32ca1f5:     protected void handleException(Exception exception, String serviceUrl) throws Exception {
1:73f9131:         Throwable cause = exception.getCause();
1:73f9131:         while (true) {
1:73f9131:             Throwable next = cause.getCause();
1:73f9131:             if (next == null) {
1:73f9131:                 break;
1:73f9131:             }
1:73f9131:             cause = next;
1:73f9131:         }
1:73f9131:         if (cause instanceof ConnectException) {
1:73f9131:             context.printInfo("Broker not available at: " + serviceUrl);
1:73f9131:         } else {
1:32ca1f5:             context.printInfo("Failed to execute " + getName() + " task.");
1:32ca1f5:             throw exception;
1:73f9131:         }
1:73f9131:     }
1:a107823: }
============================================================================
author:Dejan Bosanac
-------------------------------------------------------------------------------
commit:32ca1f5
/////////////////////////////////////////////////////////////////////////
1:     protected void handleException(Exception exception, String serviceUrl) throws Exception {
/////////////////////////////////////////////////////////////////////////
1:             context.printInfo("Failed to execute " + getName() + " task.");
1:             throw exception;
commit:73f9131
/////////////////////////////////////////////////////////////////////////
1: import java.net.ConnectException;
/////////////////////////////////////////////////////////////////////////
1: 
0:     protected void handleException(Throwable exception, String serviceUrl) {
1:         Throwable cause = exception.getCause();
1:         while (true) {
1:             Throwable next = cause.getCause();
1:             if (next == null) {
1:                 break;
1:             }
1:             cause = next;
1:         }
1:         if (cause instanceof ConnectException) {
1:             context.printInfo("Broker not available at: " + serviceUrl);
1:         } else {
0:             context.printException(new RuntimeException("Failed to execute " + getName() + " task. Reason: " + exception));
1:         }
1:     }
commit:9f0ab46
/////////////////////////////////////////////////////////////////////////
1: import java.io.BufferedReader;
1: import java.io.IOException;
1: import java.io.InputStream;
1: import java.io.InputStreamReader;
1: import org.apache.activemq.util.IntrospectionSupport;
/////////////////////////////////////////////////////////////////////////
1:             if (token.startsWith("--")) {
1:                 String prop = token.substring(2);
1:                 if (tokens.isEmpty() || tokens.get(0).startsWith("-")) {
1:                     context.print("Property '" + prop + "' is not specified!");
1:                 } else if (IntrospectionSupport.setProperty(this, prop, tokens.remove(0))) {
1:                     return;
1:                 }
1:             }
/////////////////////////////////////////////////////////////////////////
1: 
1:     protected void printHelpFromFile() {
1:         BufferedReader reader = null;
1:         try {
1:             InputStream is = getClass().getResourceAsStream(getName() + ".txt");
1:             reader = new BufferedReader(new InputStreamReader(is));
1:             String line;
1:             while ((line = reader.readLine()) != null) {
1:                 context.print(line);
1:             }
1:         } catch (Exception e) {} finally {
1:             if (reader != null) {
1:                 try {
1:                     reader.close();
1:                 } catch (IOException e) {}
1:             }
1:         }
1:     }
author:Guillaume Nodet
-------------------------------------------------------------------------------
commit:0dec0b6
/////////////////////////////////////////////////////////////////////////
1:         isPrintHelp = false;
1:         isPrintVersion = false;
author:Hiram R. Chirino
-------------------------------------------------------------------------------
commit:54eb93e
/////////////////////////////////////////////////////////////////////////
1: import org.apache.activemq.console.CommandContext;
/////////////////////////////////////////////////////////////////////////
1:     protected CommandContext context;
1: 
1:     public void setCommandContext(CommandContext context) {
1:         this.context = context;
1:     }
1:     
/////////////////////////////////////////////////////////////////////////
1:             context.printVersion(ActiveMQConnectionMetaData.PROVIDER_VERSION);
/////////////////////////////////////////////////////////////////////////
1:             context.printInfo("Unrecognized option: " + token);
commit:5f1adbe
/////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////
1:  *      http://www.apache.org/licenses/LICENSE-2.0
/////////////////////////////////////////////////////////////////////////
1: import java.util.List;
1: 
1:     private boolean isPrintHelp;
1:     private boolean isPrintVersion;
1:      * Execute a generic command, which includes parsing the options for the
1:      * command and running the specific task.
1:      * 
1:     public void execute(List<String> tokens) throws Exception {
/////////////////////////////////////////////////////////////////////////
1:             // Print the AMQ version
1:             // Run the specified task
1:      * Parse any option parameters in the command arguments specified by a '-'
1:      * as the first character of the token.
1:      * 
1:     protected void parseOptions(List<String> tokens) throws Exception {
1:             String token = tokens.remove(0);
/////////////////////////////////////////////////////////////////////////
1:      * Handle the general options for each command, which includes -h, -?,
1:      * --help, -D, --version.
1:      * 
1:     protected void handleOption(String token, List<String> tokens) throws Exception {
1:             // If token is a version option
1:         } else if (token.startsWith("-D")) {
1:             // If token is a system property define option
/////////////////////////////////////////////////////////////////////////
1:         } else {
1:             // Token is unrecognized
/////////////////////////////////////////////////////////////////////////
1:      * 
1:     protected abstract void runTask(List<String> tokens) throws Exception;
1:     protected abstract void printHelp();
commit:57b4941
/////////////////////////////////////////////////////////////////////////
1:  * Licensed to the Apache Software Foundation (ASF) under one or more
1:  * contributor license agreements.  See the NOTICE file distributed with
1:  * this work for additional information regarding copyright ownership.
1:  * The ASF licenses this file to You under the Apache License, Version 2.0
1:  * (the "License"); you may not use this file except in compliance with
1:  * the License.  You may obtain a copy of the License at
commit:a107823
/////////////////////////////////////////////////////////////////////////
1: /**
1:  *
0:  * Copyright 2005-2006 The Apache Software Foundation
1:  *
0:  * Licensed under the Apache License, Version 2.0 (the "License");
0:  * you may not use this file except in compliance with the License.
0:  * You may obtain a copy of the License at
1:  *
0:  * http://www.apache.org/licenses/LICENSE-2.0
1:  *
1:  * Unless required by applicable law or agreed to in writing, software
1:  * distributed under the License is distributed on an "AS IS" BASIS,
1:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:  * See the License for the specific language governing permissions and
1:  * limitations under the License.
1:  */
1: package org.apache.activemq.console.command;
1: 
1: import org.apache.activemq.ActiveMQConnectionMetaData;
0: import org.apache.activemq.console.formatter.GlobalWriter;
1: 
0: import java.util.List;
1: 
1: public abstract class AbstractCommand implements Command {
1:     public static final String COMMAND_OPTION_DELIMETER = ",";
1: 
0:     private boolean isPrintHelp    = false;
0:     private boolean isPrintVersion = false;
1: 
1:     /**
0:      * Exceute a generic command, which includes parsing the options for the command and running the specific task.
1:      * @param tokens - command arguments
1:      * @throws Exception
1:      */
0:     public void execute(List tokens) throws Exception {
1:         // Parse the options specified by "-"
1:         parseOptions(tokens);
1: 
1:         // Print the help file of the task
1:         if (isPrintHelp) {
1:             printHelp();
1: 
0:         // Print the AMQ version
1:         } else if (isPrintVersion) {
0:             GlobalWriter.printVersion(ActiveMQConnectionMetaData.PROVIDER_VERSION);
1: 
0:         // Run the specified task
1:         } else {
1:             runTask(tokens);
1:         }
1:     }
1: 
1:     /**
0:      * Parse any option parameters in the command arguments specified by a '-' as the first character of the token.
1:      * @param tokens - command arguments
1:      * @throws Exception
1:      */
0:     protected void parseOptions(List tokens) throws Exception {
1:         while (!tokens.isEmpty()) {
0:             String token = (String)tokens.remove(0);
1:             if (token.startsWith("-")) {
1:                 // Token is an option
1:                 handleOption(token, tokens);
1:             } else {
1:                 // Push back to list of tokens
1:                 tokens.add(0, token);
1:                 return;
1:             }
1:         }
1:     }
1: 
1:     /**
0:      * Handle the general options for each command, which includes -h, -?, --help, -D, --version.
1:      * @param token - option token to handle
1:      * @param tokens - succeeding command arguments
1:      * @throws Exception
1:      */
0:     protected void handleOption(String token, List tokens) throws Exception {
1:         // If token is a help option
1:         if (token.equals("-h") || token.equals("-?") || token.equals("--help")) {
1:             isPrintHelp = true;
1:             tokens.clear();
1: 
0:         // If token is a version option
1:         } else if (token.equals("--version")) {
1:             isPrintVersion = true;
1:             tokens.clear();
1:         }
1: 
0:         // If token is a system property define option
0:         else if (token.startsWith("-D")) {
1:             String key = token.substring(2);
1:             String value = "";
1:             int pos = key.indexOf("=");
1:             if (pos >= 0) {
1:                 value = key.substring(pos + 1);
1:                 key = key.substring(0, pos);
1:             }
1:             System.setProperty(key, value);
1: 
1:         }
1: 
0:         // Token is unrecognized
0:         else {
0:             GlobalWriter.printInfo("Ignoring unrecognized option: " + token);
1:         }
1:     }
1: 
1:     /**
1:      * Run the specific task.
1:      * @param tokens - command arguments
1:      * @throws Exception
1:      */
0:     abstract protected void runTask(List tokens) throws Exception;
1: 
1:     /**
1:      * Print the help messages for the specific task
1:      */
0:     abstract protected void printHelp();
1: }
author:Adrian T. Co
-------------------------------------------------------------------------------
commit:26f4d2a
/////////////////////////////////////////////////////////////////////////
0:             GlobalWriter.printInfo("Unrecognized option: " + token);
1:             isPrintHelp = true;
commit:7fa8660
/////////////////////////////////////////////////////////////////////////
0: package org.apache.activemq.console.command;
0: import org.apache.activemq.console.formatter.GlobalWriter;
commit:4b8822f
/////////////////////////////////////////////////////////////////////////
0: /**
0:  *
0:  * Copyright 2005-2006 The Apache Software Foundation
0:  *
0:  * Licensed under the Apache License, Version 2.0 (the "License");
0:  * you may not use this file except in compliance with the License.
0:  * You may obtain a copy of the License at
0:  *
0:  * http://www.apache.org/licenses/LICENSE-2.0
0:  *
0:  * Unless required by applicable law or agreed to in writing, software
0:  * distributed under the License is distributed on an "AS IS" BASIS,
0:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
0:  * See the License for the specific language governing permissions and
0:  * limitations under the License.
0:  */
0: package org.apache.activemq.broker.console.command;
0: 
0: import org.apache.activemq.ActiveMQConnectionMetaData;
0: import org.apache.activemq.broker.console.formatter.GlobalWriter;
0: 
0: import java.util.List;
0: 
0: public abstract class AbstractCommand implements Command {
0:     public static final String COMMAND_OPTION_DELIMETER = ",";
0: 
0:     private boolean isPrintHelp    = false;
0:     private boolean isPrintVersion = false;
0: 
0:     /**
0:      * Exceute a generic command, which includes parsing the options for the command and running the specific task.
0:      * @param tokens - command arguments
0:      * @throws Exception
0:      */
0:     public void execute(List tokens) throws Exception {
0:         // Parse the options specified by "-"
0:         parseOptions(tokens);
0: 
0:         // Print the help file of the task
0:         if (isPrintHelp) {
0:             printHelp();
0: 
0:         // Print the AMQ version
0:         } else if (isPrintVersion) {
0:             GlobalWriter.printVersion(ActiveMQConnectionMetaData.PROVIDER_VERSION);
0: 
0:         // Run the specified task
0:         } else {
0:             runTask(tokens);
0:         }
0:     }
0: 
0:     /**
0:      * Parse any option parameters in the command arguments specified by a '-' as the first character of the token.
0:      * @param tokens - command arguments
0:      * @throws Exception
0:      */
0:     protected void parseOptions(List tokens) throws Exception {
0:         while (!tokens.isEmpty()) {
0:             String token = (String)tokens.remove(0);
0:             if (token.startsWith("-")) {
0:                 // Token is an option
0:                 handleOption(token, tokens);
0:             } else {
0:                 // Push back to list of tokens
0:                 tokens.add(0, token);
0:                 return;
0:             }
0:         }
0:     }
0: 
0:     /**
0:      * Handle the general options for each command, which includes -h, -?, --help, -D, --version.
0:      * @param token - option token to handle
0:      * @param tokens - succeeding command arguments
0:      * @throws Exception
0:      */
0:     protected void handleOption(String token, List tokens) throws Exception {
0:         // If token is a help option
0:         if (token.equals("-h") || token.equals("-?") || token.equals("--help")) {
0:             isPrintHelp = true;
0:             tokens.clear();
0: 
0:         // If token is a version option
0:         } else if (token.equals("--version")) {
0:             isPrintVersion = true;
0:             tokens.clear();
0:         }
0: 
0:         // If token is a system property define option
0:         else if (token.startsWith("-D")) {
0:             String key = token.substring(2);
0:             String value = "";
0:             int pos = key.indexOf("=");
0:             if (pos >= 0) {
0:                 value = key.substring(pos + 1);
0:                 key = key.substring(0, pos);
0:             }
0:             System.setProperty(key, value);
0: 
0:         }
0: 
0:         // Token is unrecognized
0:         else {
0:             GlobalWriter.printInfo("Ignoring unrecognized option: " + token);
0:         }
0:     }
0: 
0:     /**
0:      * Run the specific task.
0:      * @param tokens - command arguments
0:      * @throws Exception
0:      */
0:     abstract protected void runTask(List tokens) throws Exception;
0: 
0:     /**
0:      * Print the help messages for the specific task
0:      */
0:     abstract protected void printHelp();
0: }
============================================================================