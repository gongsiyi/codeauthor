1:d29ca2a: /**
1:57b4941:  * Licensed to the Apache Software Foundation (ASF) under one or more
1:57b4941:  * contributor license agreements.  See the NOTICE file distributed with
1:57b4941:  * this work for additional information regarding copyright ownership.
1:57b4941:  * The ASF licenses this file to You under the Apache License, Version 2.0
1:57b4941:  * (the "License"); you may not use this file except in compliance with
1:57b4941:  * the License.  You may obtain a copy of the License at
3:d29ca2a:  *
1:230a86c:  *      http://www.apache.org/licenses/LICENSE-2.0
1:d29ca2a:  *
1:d29ca2a:  * Unless required by applicable law or agreed to in writing, software
1:d29ca2a:  * distributed under the License is distributed on an "AS IS" BASIS,
1:d29ca2a:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:d29ca2a:  * See the License for the specific language governing permissions and
1:d29ca2a:  * limitations under the License.
1:d29ca2a:  */
1:d29ca2a: package org.apache.activemq.transport;
1:7d87837: 
1:d29ca2a: import java.io.IOException;
1:d29ca2a: import java.net.MalformedURLException;
1:d29ca2a: import java.net.URI;
1:d29ca2a: import java.net.URISyntaxException;
1:d29ca2a: import java.net.UnknownHostException;
1:d29ca2a: import java.util.HashMap;
1:d29ca2a: import java.util.Map;
1:74a7a8b: import java.util.concurrent.ConcurrentHashMap;
1:9ef4259: import java.util.concurrent.ConcurrentMap;
1:74a7a8b: import java.util.concurrent.Executor;
1:04ee70a: 
1:9ef4259: import org.apache.activemq.util.FactoryFinder;
1:9ef4259: import org.apache.activemq.util.IOExceptionSupport;
1:9ef4259: import org.apache.activemq.util.IntrospectionSupport;
1:9ef4259: import org.apache.activemq.util.URISupport;
1:9ef4259: import org.apache.activemq.wireformat.WireFormat;
1:9ef4259: import org.apache.activemq.wireformat.WireFormatFactory;
1:9ef4259: 
1:d29ca2a: public abstract class TransportFactory {
1:9a8f6e4: 
1:ecf89a6:     private static final FactoryFinder TRANSPORT_FACTORY_FINDER = new FactoryFinder("META-INF/services/org/apache/activemq/transport/");
1:ecf89a6:     private static final FactoryFinder WIREFORMAT_FACTORY_FINDER = new FactoryFinder("META-INF/services/org/apache/activemq/wireformat/");
1:9ef4259:     private static final ConcurrentMap<String, TransportFactory> TRANSPORT_FACTORYS = new ConcurrentHashMap<String, TransportFactory>();
1:ecf89a6: 
1:f561d6b:     private static final String WRITE_TIMEOUT_FILTER = "soWriteTimeout";
1:0d2172b:     private static final String THREAD_NAME_FILTER = "threadName";
1:f451ad0: 
1:5d99c99:     public abstract TransportServer doBind(URI location) throws IOException;
1:f451ad0: 
1:d29ca2a:     public Transport doConnect(URI location, Executor ex) throws Exception {
1:d29ca2a:         return doConnect(location);
5:d29ca2a:     }
14:d29ca2a: 
1:d29ca2a:     public Transport doCompositeConnect(URI location, Executor ex) throws Exception {
1:d29ca2a:         return doCompositeConnect(location);
1:d29ca2a:     }
1:d29ca2a: 
1:d29ca2a:     /**
1:d29ca2a:      * Creates a normal transport.
1:d78c1ff:      *
1:d29ca2a:      * @param location
1:d29ca2a:      * @return the transport
1:d29ca2a:      * @throws Exception
1:d29ca2a:      */
1:d29ca2a:     public static Transport connect(URI location) throws Exception {
2:d29ca2a:         TransportFactory tf = findTransportFactory(location);
1:d29ca2a:         return tf.doConnect(location);
1:6cc18ca:     }
1:3910056: 
1:5d99c99:     /**
1:d29ca2a:      * Creates a normal transport.
1:d29ca2a:      *
1:d29ca2a:      * @param location
1:d29ca2a:      * @param ex
1:d29ca2a:      * @return the transport
1:d29ca2a:      * @throws Exception
1:5d99c99:      */
1:d29ca2a:     public static Transport connect(URI location, Executor ex) throws Exception {
1:3910056:         TransportFactory tf = findTransportFactory(location);
1:d29ca2a:         return tf.doConnect(location, ex);
1:7d87837:     }
1:d29ca2a: 
1:d29ca2a:     /**
1:d29ca2a:      * Creates a slimmed down transport that is more efficient so that it can be
1:d29ca2a:      * used by composite transports like reliable and HA.
1:d29ca2a:      *
1:d29ca2a:      * @param location
1:d29ca2a:      * @return the Transport
1:d29ca2a:      * @throws Exception
1:d29ca2a:      */
1:d29ca2a:     public static Transport compositeConnect(URI location) throws Exception {
1:d29ca2a:         TransportFactory tf = findTransportFactory(location);
1:d29ca2a:         return tf.doCompositeConnect(location);
1:3910056:     }
1:d29ca2a: 
1:d29ca2a:     /**
1:d29ca2a:      * Creates a slimmed down transport that is more efficient so that it can be
1:d29ca2a:      * used by composite transports like reliable and HA.
1:d29ca2a:      *
1:d29ca2a:      * @param location
1:d29ca2a:      * @param ex
1:d29ca2a:      * @return the Transport
1:d29ca2a:      * @throws Exception
1:d29ca2a:      */
1:d29ca2a:     public static Transport compositeConnect(URI location, Executor ex) throws Exception {
1:d29ca2a:         TransportFactory tf = findTransportFactory(location);
1:d29ca2a:         return tf.doCompositeConnect(location, ex);
1:5d99c99:     }
1:5d99c99: 
1:5d99c99:     public static TransportServer bind(URI location) throws IOException {
1:d29ca2a:         TransportFactory tf = findTransportFactory(location);
1:7d87837:         return tf.doBind(location);
1:3910056:     }
1:d29ca2a: 
1:d29ca2a:     public Transport doConnect(URI location) throws Exception {
1:7d87837:         try {
1:784b93d:             Map<String, String> options = new HashMap<String, String>(URISupport.parseParameters(location));
1:190a44b:             if( !options.containsKey("wireFormat.host") ) {
1:190a44b:                 options.put("wireFormat.host", location.getHost());
1:190a44b:             }
1:d29ca2a:             WireFormat wf = createWireFormat(options);
1:d29ca2a:             Transport transport = createTransport(location, wf);
1:d29ca2a:             Transport rc = configure(transport, wf, options);
1:04ee70a:             //remove auto
1:04ee70a:             IntrospectionSupport.extractProperties(options, "auto.");
1:04ee70a: 
1:d29ca2a:             if (!options.isEmpty()) {
1:d29ca2a:                 throw new IllegalArgumentException("Invalid connect parameters: " + options);
1:d29ca2a:             }
1:d29ca2a:             return rc;
1:f812e34:         } catch (URISyntaxException e) {
1:d29ca2a:             throw IOExceptionSupport.create(e);
1:d29ca2a:         }
1:d29ca2a:     }
1:d29ca2a: 
1:d29ca2a:     public Transport doCompositeConnect(URI location) throws Exception {
2:d29ca2a:         try {
1:784b93d:             Map<String, String> options = new HashMap<String, String>(URISupport.parseParameters(location));
1:d29ca2a:             WireFormat wf = createWireFormat(options);
1:d29ca2a:             Transport transport = createTransport(location, wf);
1:d29ca2a:             Transport rc = compositeConfigure(transport, wf, options);
1:d29ca2a:             if (!options.isEmpty()) {
1:d29ca2a:                 throw new IllegalArgumentException("Invalid connect parameters: " + options);
1:d29ca2a:             }
1:d29ca2a:             return rc;
1:f812e34:         } catch (URISyntaxException e) {
1:d29ca2a:             throw IOExceptionSupport.create(e);
1:d29ca2a:         }
1:d29ca2a:     }
1:d29ca2a: 
1:d29ca2a:      /**
1:c338d3e:       * Allow registration of a transport factory without wiring via META-INF classes
1:c338d3e:      * @param scheme
1:c338d3e:      * @param tf
1:d29ca2a:      */
1:c338d3e:     public static void registerTransportFactory(String scheme, TransportFactory tf) {
1:c338d3e:         TRANSPORT_FACTORYS.put(scheme, tf);
1:d29ca2a:       }
1:d29ca2a: 
1:d29ca2a:     /**
1:d29ca2a:      * Factory method to create a new transport
1:f812e34:      *
1:f812e34:      * @throws IOException
1:f812e34:      * @throws UnknownHostException
1:d29ca2a:      */
1:d29ca2a:     protected Transport createTransport(URI location, WireFormat wf) throws MalformedURLException, UnknownHostException, IOException {
1:d29ca2a:         throw new IOException("createTransport() method not implemented!");
1:d29ca2a:     }
1:d29ca2a: 
1:d29ca2a:     /**
1:d29ca2a:      * @param location
1:b4b8499:      * @return
2:d29ca2a:      * @throws IOException
1:b4b8499:      */
1:9a8f6e4:     public static TransportFactory findTransportFactory(URI location) throws IOException {
1:d29ca2a:         String scheme = location.getScheme();
1:fc00993:         if (scheme == null) {
1:d29ca2a:             throw new IOException("Transport not scheme specified: [" + location + "]");
1:fc00993:         }
1:933eb2f:         TransportFactory tf = TRANSPORT_FACTORYS.get(scheme);
1:d29ca2a:         if (tf == null) {
1:d29ca2a:             // Try to load if from a META-INF property.
1:d29ca2a:             try {
1:fc00993:                 tf = (TransportFactory)TRANSPORT_FACTORY_FINDER.newInstance(scheme);
1:fc00993:                 TRANSPORT_FACTORYS.put(scheme, tf);
1:f812e34:             } catch (Throwable e) {
1:d29ca2a:                 throw IOExceptionSupport.create("Transport scheme NOT recognized: [" + scheme + "]", e);
1:d29ca2a:             }
1:d29ca2a:         }
1:d29ca2a:         return tf;
1:d29ca2a:     }
1:b4b8499: 
1:933eb2f:     protected WireFormat createWireFormat(Map<String, String> options) throws IOException {
1:d29ca2a:         WireFormatFactory factory = createWireFormatFactory(options);
1:d29ca2a:         WireFormat format = factory.createWireFormat();
1:d29ca2a:         return format;
1:d29ca2a:     }
1:d29ca2a: 
1:933eb2f:     protected WireFormatFactory createWireFormatFactory(Map<String, String> options) throws IOException {
1:9ef4259:         String wireFormat = options.remove("wireFormat");
1:fc00993:         if (wireFormat == null) {
1:d29ca2a:             wireFormat = getDefaultWireFormatType();
1:fc00993:         }
1:d29ca2a: 
1:d29ca2a:         try {
1:fc00993:             WireFormatFactory wff = (WireFormatFactory)WIREFORMAT_FACTORY_FINDER.newInstance(wireFormat);
1:d29ca2a:             IntrospectionSupport.setProperties(wff, options, "wireFormat.");
1:d29ca2a:             return wff;
1:f812e34:         } catch (Throwable e) {
1:d29ca2a:             throw IOExceptionSupport.create("Could not create wire format factory for: " + wireFormat + ", reason: " + e, e);
1:d29ca2a:         }
1:d29ca2a:     }
1:d29ca2a: 
1:d29ca2a:     protected String getDefaultWireFormatType() {
1:d29ca2a:         return "default";
1:d29ca2a:     }
1:b4b8499: 
1:b4b8499:     /**
1:f812e34:      * Fully configures and adds all need transport filters so that the
1:f812e34:      * transport can be used by the JMS client.
1:b4b8499:      *
1:d78c1ff:      * @param transport
1:d78c1ff:      * @param wf
1:d78c1ff:      * @param options
1:d78c1ff:      * @return
1:d78c1ff:      * @throws Exception
1:d78c1ff:      */
1:0885c60:     @SuppressWarnings("rawtypes")
1:b4b8499:     public Transport configure(Transport transport, WireFormat wf, Map options) throws Exception {
1:f812e34:         transport = compositeConfigure(transport, wf, options);
1:f812e34: 
1:d29ca2a:         transport = new MutexTransport(transport);
1:d29ca2a:         transport = new ResponseCorrelator(transport);
1:f812e34: 
1:d29ca2a:         return transport;
1:d29ca2a:     }
1:d78c1ff: 
1:b4b8499:     /**
1:f812e34:      * Fully configures and adds all need transport filters so that the
1:f812e34:      * transport can be used by the ActiveMQ message broker. The main difference
1:f812e34:      * between this and the configure() method is that the broker does not issue
1:f812e34:      * requests to the client so the ResponseCorrelator is not needed.
1:b4b8499:      *
1:b4b8499:      * @param transport
1:b4b8499:      * @param format
1:b4b8499:      * @param options
1:b4b8499:      * @return
1:b4b8499:      * @throws Exception
1:b4b8499:      */
1:0885c60:     @SuppressWarnings("rawtypes")
1:f812e34:     public Transport serverConfigure(Transport transport, WireFormat format, HashMap options) throws Exception {
1:0d2172b:         if (options.containsKey(THREAD_NAME_FILTER)) {
1:0d2172b:             transport = new ThreadNameFilter(transport);
1:d78c1ff:         }
1:f812e34:         transport = compositeConfigure(transport, format, options);
1:d78c1ff:         transport = new MutexTransport(transport);
1:d78c1ff:         return transport;
1:f812e34:     }
1:f812e34: 
1:d78c1ff:     /**
1:f812e34:      * Similar to configure(...) but this avoid adding in the MutexTransport and
1:f812e34:      * ResponseCorrelator transport layers so that the resulting transport can
1:f812e34:      * more efficiently be used as part of a composite transport.
1:d29ca2a:      *
1:b4b8499:      * @param transport
1:1bf7a48:      * @param format
1:b4b8499:      * @param options
1:d29ca2a:      * @return
1:d29ca2a:      */
1:0885c60:     @SuppressWarnings("rawtypes")
1:d29ca2a:     public Transport compositeConfigure(Transport transport, WireFormat format, Map options) {
1:753b210:         if (options.containsKey(WRITE_TIMEOUT_FILTER)) {
1:753b210:             transport = new WriteTimeoutFilter(transport);
1:753b210:             String soWriteTimeout = (String)options.remove(WRITE_TIMEOUT_FILTER);
1:753b210:             if (soWriteTimeout!=null) {
1:753b210:                 ((WriteTimeoutFilter)transport).setWriteTimeout(Long.parseLong(soWriteTimeout));
1:d29ca2a:             }
1:d29ca2a:         }
2:d29ca2a:         IntrospectionSupport.setProperties(transport, options);
1:d29ca2a:         return transport;
1:d29ca2a:     }
1:d29ca2a: 
1:0885c60:     @SuppressWarnings("rawtypes")
1:ee4c8ee:     protected String getOption(Map options, String key, String def) {
1:ee4c8ee:         String rc = (String) options.remove(key);
1:ee4c8ee:         if( rc == null ) {
1:ee4c8ee:             rc = def;
1:d29ca2a:         }
1:ee4c8ee:         return rc;
1:d29ca2a:     }
1:d29ca2a: }
============================================================================
author:Hadrian Zbarcea
-------------------------------------------------------------------------------
commit:d54d046
author:Christopher L. Shannon (cshannon)
-------------------------------------------------------------------------------
commit:9ab9488
/////////////////////////////////////////////////////////////////////////
commit:04ee70a
/////////////////////////////////////////////////////////////////////////
0: import java.net.Socket;
0: import java.nio.ByteBuffer;
0: import javax.net.ssl.SSLEngine;
1: 
/////////////////////////////////////////////////////////////////////////
1:             //remove auto
1:             IntrospectionSupport.extractProperties(options, "auto.");
1: 
author:Timothy Bish
-------------------------------------------------------------------------------
commit:9ef4259
/////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////
1: import java.util.concurrent.ConcurrentMap;
1: import org.apache.activemq.util.FactoryFinder;
1: import org.apache.activemq.util.IOExceptionSupport;
1: import org.apache.activemq.util.IntrospectionSupport;
1: import org.apache.activemq.util.URISupport;
1: import org.apache.activemq.wireformat.WireFormat;
1: import org.apache.activemq.wireformat.WireFormatFactory;
1: 
1:     private static final ConcurrentMap<String, TransportFactory> TRANSPORT_FACTORYS = new ConcurrentHashMap<String, TransportFactory>();
/////////////////////////////////////////////////////////////////////////
1:         String wireFormat = options.remove("wireFormat");
author:Hiram Chirino
-------------------------------------------------------------------------------
commit:190a44b
/////////////////////////////////////////////////////////////////////////
1:             if( !options.containsKey("wireFormat.host") ) {
1:                 options.put("wireFormat.host", location.getHost());
1:             }
author:Hiram R. Chirino
-------------------------------------------------------------------------------
commit:9a8f6e4
/////////////////////////////////////////////////////////////////////////
0: import org.apache.activemq.util.FactoryFinder;
0: import org.apache.activemq.util.IOExceptionSupport;
0: import org.apache.activemq.util.IntrospectionSupport;
0: import org.apache.activemq.util.URISupport;
0: import org.apache.activemq.wireformat.WireFormat;
0: import org.apache.activemq.wireformat.WireFormatFactory;
1: 
/////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////
1:     public static TransportFactory findTransportFactory(URI location) throws IOException {
commit:e16a638
/////////////////////////////////////////////////////////////////////////
0:         String wireFormat = (String)options.remove("wireFormat");
commit:6cc18ca
/////////////////////////////////////////////////////////////////////////
0: import org.apache.activemq.broker.BrokerServiceAware;
/////////////////////////////////////////////////////////////////////////
0:         if( brokerService!=null && tf instanceof BrokerServiceAware ) {
0:             ((BrokerServiceAware)tf).setBrokerService(brokerService);
1:         }
commit:7d87837
/////////////////////////////////////////////////////////////////////////
0: import javax.net.ssl.SSLContext;
1: 
0: import org.apache.activemq.broker.SslContext;
/////////////////////////////////////////////////////////////////////////
1:         try {
0:             if( brokerService!=null ) {
0:                 SslContext.setCurrentSslContext(brokerService.getSslContext());
1:             }
1:             return tf.doBind(location);
0:         } finally {
0:             SslContext.setCurrentSslContext(null);
commit:5d99c99
/////////////////////////////////////////////////////////////////////////
1:     public abstract TransportServer doBind(URI location) throws IOException;
/////////////////////////////////////////////////////////////////////////
1:     public static TransportServer bind(URI location) throws IOException {
0:         return tf.doBind(location);
1:     }
1: 
1:     /**
0:      * @deprecated 
1:      */
0:     public static TransportServer bind(String brokerId, URI location) throws IOException {
0:         return bind(location);
0:         if (brokerService != null && tf instanceof BrokerServiceAware) {
0:             ((BrokerServiceAware)tf).setBrokerService(brokerService);
0:         return tf.doBind(location);
commit:3910056
/////////////////////////////////////////////////////////////////////////
0: import org.apache.activemq.broker.BrokerService;
0: import org.apache.activemq.broker.BrokerServiceAware;
/////////////////////////////////////////////////////////////////////////
1:     
0:     public static TransportServer bind(BrokerService brokerService, URI location) throws IOException {
1:         TransportFactory tf = findTransportFactory(location);
0:         if (tf instanceof BrokerServiceAware) {
0:         	((BrokerServiceAware)tf).setBrokerService(brokerService);
1:         }
0:         return tf.doBind(brokerService.getBrokerName(), location);
1:     }    
commit:933eb2f
/////////////////////////////////////////////////////////////////////////
0:     private static final ConcurrentHashMap<String, TransportFactory> TRANSPORT_FACTORYS = new ConcurrentHashMap<String, TransportFactory>();
/////////////////////////////////////////////////////////////////////////
0:             Map<String, String> options = new HashMap<String, String>(URISupport.parseParamters(location));
/////////////////////////////////////////////////////////////////////////
0:             Map<String, String> options = new HashMap<String, String>(URISupport.parseParamters(location));
/////////////////////////////////////////////////////////////////////////
1:         TransportFactory tf = TRANSPORT_FACTORYS.get(scheme);
/////////////////////////////////////////////////////////////////////////
1:     protected WireFormat createWireFormat(Map<String, String> options) throws IOException {
1:     protected WireFormatFactory createWireFormatFactory(Map<String, String> options) throws IOException {
commit:ecf89a6
/////////////////////////////////////////////////////////////////////////
1:     private static final FactoryFinder TRANSPORT_FACTORY_FINDER = new FactoryFinder("META-INF/services/org/apache/activemq/transport/");
1:     private static final FactoryFinder WIREFORMAT_FACTORY_FINDER = new FactoryFinder("META-INF/services/org/apache/activemq/wireformat/");
0:     private static final ConcurrentHashMap TRANSPORT_FACTORYS = new ConcurrentHashMap();
1: 
/////////////////////////////////////////////////////////////////////////
commit:fc00993
/////////////////////////////////////////////////////////////////////////
0:     private static final FactoryFinder TRANSPORT_FACTORY_FINDER = new FactoryFinder("META-INF/services/org/apache/activemq/transport/");
0:     private static final FactoryFinder WIREFORMAT_FACTORY_FINDER = new FactoryFinder("META-INF/services/org/apache/activemq/wireformat/");
0:     private static final ConcurrentHashMap TRANSPORT_FACTORYS = new ConcurrentHashMap();
/////////////////////////////////////////////////////////////////////////
1:         if (scheme == null) {
1:         }
0:         TransportFactory tf = (TransportFactory)TRANSPORT_FACTORYS.get(scheme);
1:                 tf = (TransportFactory)TRANSPORT_FACTORY_FINDER.newInstance(scheme);
1:                 TRANSPORT_FACTORYS.put(scheme, tf);
/////////////////////////////////////////////////////////////////////////
1:         if (wireFormat == null) {
1:         }
1:             WireFormatFactory wff = (WireFormatFactory)WIREFORMAT_FACTORY_FINDER.newInstance(wireFormat);
commit:74a7a8b
/////////////////////////////////////////////////////////////////////////
1: import java.util.concurrent.ConcurrentHashMap;
1: import java.util.concurrent.Executor;
/////////////////////////////////////////////////////////////////////////
commit:f812e34
/////////////////////////////////////////////////////////////////////////
1:         } catch (URISyntaxException e) {
/////////////////////////////////////////////////////////////////////////
1:         } catch (URISyntaxException e) {
1:      * 
1:      * @throws IOException
1:      * @throws UnknownHostException
/////////////////////////////////////////////////////////////////////////
0:         if (scheme == null)
0:         TransportFactory tf = (TransportFactory)transportFactorys.get(scheme);
0:                 tf = (TransportFactory)transportFactoryFinder.newInstance(scheme);
1:             } catch (Throwable e) {
/////////////////////////////////////////////////////////////////////////
0:         String wireFormat = (String)options.get("wireFormat");
0:             WireFormatFactory wff = (WireFormatFactory)wireFormatFactoryFinder.newInstance(wireFormat);
1:         } catch (Throwable e) {
/////////////////////////////////////////////////////////////////////////
1:      * Fully configures and adds all need transport filters so that the
1:      * transport can be used by the JMS client.
/////////////////////////////////////////////////////////////////////////
1:         transport = compositeConfigure(transport, wf, options);
1: 
1: 
1:      * Fully configures and adds all need transport filters so that the
1:      * transport can be used by the ActiveMQ message broker. The main difference
1:      * between this and the configure() method is that the broker does not issue
1:      * requests to the client so the ResponseCorrelator is not needed.
/////////////////////////////////////////////////////////////////////////
1:     public Transport serverConfigure(Transport transport, WireFormat format, HashMap options) throws Exception {
1:         transport = compositeConfigure(transport, format, options);
1:     }
1: 
1:      * Similar to configure(...) but this avoid adding in the MutexTransport and
1:      * ResponseCorrelator transport layers so that the resulting transport can
1:      * more efficiently be used as part of a composite transport.
commit:230a86c
/////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////
1:  *      http://www.apache.org/licenses/LICENSE-2.0
commit:86cbdfd
/////////////////////////////////////////////////////////////////////////
0: import java.util.concurrent.ConcurrentHashMap;
0: import java.util.concurrent.Executor;
commit:d78c1ff
/////////////////////////////////////////////////////////////////////////
0:      * Fully configures and adds all need transport filters so that the transport
0:      * can be used by the ActiveMQ message broker.  The main difference between this and the 
0:      * configure() method is that the broker does not issue requests to the client so the
0:      * ResponseCorrelator is not needed.
1:      * 
1:      * @param transport
1:      * @param wf
1:      * @param options
1:      * @return
1:      * @throws Exception
1:      */
0: 	public Transport serverConfigure(Transport transport, WireFormat format, HashMap options) throws Exception {
0:     	transport = compositeConfigure(transport, format, options);    	
1:         transport = new MutexTransport(transport);
1:         return transport;
1: 	}
1:     
1:     /**
commit:88acb0e
/////////////////////////////////////////////////////////////////////////
0: import org.apache.activemq.util.FactoryFinder;
0: import org.apache.activemq.wireformat.WireFormat;
0: import org.apache.activemq.wireformat.WireFormatFactory;
commit:57b4941
/////////////////////////////////////////////////////////////////////////
1:  * Licensed to the Apache Software Foundation (ASF) under one or more
1:  * contributor license agreements.  See the NOTICE file distributed with
1:  * this work for additional information regarding copyright ownership.
1:  * The ASF licenses this file to You under the Apache License, Version 2.0
1:  * (the "License"); you may not use this file except in compliance with
1:  * the License.  You may obtain a copy of the License at
commit:b4b8499
/////////////////////////////////////////////////////////////////////////
1:     /**
0:      * Fully configures and adds all need transport filters so that the transport
0:      * can be used by the JMS client.
1:      * 
1:      * @param transport
0:      * @param wf
1:      * @param options
1:      * @return
1:      * @throws Exception
1:      */
1:     public Transport configure(Transport transport, WireFormat wf, Map options) throws Exception {
0:     	transport = compositeConfigure(transport, wf, options);
1:     	
1:         
1:     /**
0:      * Similar to configure(...) but this avoid adding in the MutexTransport and ResponseCorrelator transport layers
0:      * so that the resulting transport can more efficiently be used as part of a composite transport.
1:      * 
1:      * @param transport
1:      * @param format
1:      * @param options
1:      * @return
1:      */
commit:f451ad0
/////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////
0: import org.apache.activeio.command.WireFormat;
0: import org.apache.activeio.command.WireFormatFactory;
0: import org.apache.activeio.util.FactoryFinder;
0: import org.apache.activemq.util.IOExceptionSupport;
0: import org.apache.activemq.util.IntrospectionSupport;
0: import org.apache.activemq.util.URISupport;
1: 
0: import edu.emory.mathcs.backport.java.util.concurrent.ConcurrentHashMap;
0: import edu.emory.mathcs.backport.java.util.concurrent.Executor;
1: 
commit:48b4869
/////////////////////////////////////////////////////////////////////////
0:  * Copyright 2005-2006 The Apache Software Foundation
commit:d29ca2a
/////////////////////////////////////////////////////////////////////////
1: /**
1:  *
0:  * Copyright 2004 The Apache Software Foundation
1:  *
0:  * Licensed under the Apache License, Version 2.0 (the "License");
0:  * you may not use this file except in compliance with the License.
0:  * You may obtain a copy of the License at
1:  *
0:  * http://www.apache.org/licenses/LICENSE-2.0
1:  *
1:  * Unless required by applicable law or agreed to in writing, software
1:  * distributed under the License is distributed on an "AS IS" BASIS,
1:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:  * See the License for the specific language governing permissions and
1:  * limitations under the License.
1:  */
1: package org.apache.activemq.transport;
1: 
0: import edu.emory.mathcs.backport.java.util.concurrent.ConcurrentHashMap;
0: import edu.emory.mathcs.backport.java.util.concurrent.Executor;
1: 
0: import org.activeio.FactoryFinder;
0: import org.activeio.command.WireFormat;
0: import org.activeio.command.WireFormatFactory;
0: import org.apache.activemq.util.IOExceptionSupport;
0: import org.apache.activemq.util.IntrospectionSupport;
0: import org.apache.activemq.util.URISupport;
1: 
1: import java.io.IOException;
1: import java.net.MalformedURLException;
1: import java.net.URI;
1: import java.net.URISyntaxException;
1: import java.net.UnknownHostException;
1: import java.util.HashMap;
1: import java.util.Map;
1: 
1: public abstract class TransportFactory {
1: 
0:     public abstract TransportServer doBind(String brokerId, URI location) throws IOException;
1: 
1:     public Transport doConnect(URI location, Executor ex) throws Exception {
1:         return doConnect(location);
1:     }
1: 
1:     public Transport doCompositeConnect(URI location, Executor ex) throws Exception {
1:         return doCompositeConnect(location);
1:     }
1: 
0:     static final private FactoryFinder transportFactoryFinder = new FactoryFinder("META-INF/services/org/apache/activemq/transport/");
0:     static final private FactoryFinder wireFormatFactoryFinder = new FactoryFinder("META-INF/services/org/apache/activemq/wireformat/");
1: 
0:     static final private ConcurrentHashMap transportFactorys = new ConcurrentHashMap();
1: 
1:     /**
1:      * Creates a normal transport.
1:      * 
1:      * @param location
1:      * @return the transport
1:      * @throws Exception
1:      */
1:     public static Transport connect(URI location) throws Exception {
1:         TransportFactory tf = findTransportFactory(location);
1:         return tf.doConnect(location);
1:     }
1: 
1:     /**
1:      * Creates a normal transport.
1:      * 
1:      * @param location
1:      * @param ex
1:      * @return the transport
1:      * @throws Exception
1:      */
1:     public static Transport connect(URI location, Executor ex) throws Exception {
1:         TransportFactory tf = findTransportFactory(location);
1:         return tf.doConnect(location, ex);
1:     }
1: 
1:     /**
1:      * Creates a slimmed down transport that is more efficient so that it can be
1:      * used by composite transports like reliable and HA.
1:      * 
1:      * @param location
1:      * @return the Transport
1:      * @throws Exception
1:      */
1:     public static Transport compositeConnect(URI location) throws Exception {
1:         TransportFactory tf = findTransportFactory(location);
1:         return tf.doCompositeConnect(location);
1:     }
1: 
1:     /**
1:      * Creates a slimmed down transport that is more efficient so that it can be
1:      * used by composite transports like reliable and HA.
1:      * 
1:      * @param location
1:      * @param ex
1:      * @return the Transport
1:      * @throws Exception
1:      */
1:     public static Transport compositeConnect(URI location, Executor ex) throws Exception {
1:         TransportFactory tf = findTransportFactory(location);
1:         return tf.doCompositeConnect(location, ex);
1:     }
1: 
0:     public static TransportServer bind(String brokerId, URI location) throws IOException {
1:         TransportFactory tf = findTransportFactory(location);
0:         return tf.doBind(brokerId, location);
1:     }
1: 
1:     public Transport doConnect(URI location) throws Exception {
1:         try {
0:             Map options = new HashMap(URISupport.parseParamters(location));
1:             WireFormat wf = createWireFormat(options);
1:             Transport transport = createTransport(location, wf);
1:             Transport rc = configure(transport, wf, options);
1:             if (!options.isEmpty()) {
1:                 throw new IllegalArgumentException("Invalid connect parameters: " + options);
1:             }
1:             return rc;
1:         }
0:         catch (URISyntaxException e) {
1:             throw IOExceptionSupport.create(e);
1:         }
1:     }
1: 
1:     public Transport doCompositeConnect(URI location) throws Exception {
1:         try {
0:             Map options = new HashMap(URISupport.parseParamters(location));
1:             WireFormat wf = createWireFormat(options);
1:             Transport transport = createTransport(location, wf);
1:             Transport rc = compositeConfigure(transport, wf, options);
1:             if (!options.isEmpty()) {
1:                 throw new IllegalArgumentException("Invalid connect parameters: " + options);
1:             }
1:             return rc;
1: 
1:         }
0:         catch (URISyntaxException e) {
1:             throw IOExceptionSupport.create(e);
1:         }
1:     }
1: 
1:     /**
1:      * Factory method to create a new transport
1:      * @throws IOException 
0:      * @throws UnknownHostException 
1:      */
1:     protected Transport createTransport(URI location, WireFormat wf) throws MalformedURLException, UnknownHostException, IOException {
1:         throw new IOException("createTransport() method not implemented!");
1:     }
1: 
1:     /**
1:      * @param location
1:      * @return
1:      * @throws IOException
1:      */
0:     private static TransportFactory findTransportFactory(URI location) throws IOException {
1:         String scheme = location.getScheme();
0:         if( scheme == null )
1:             throw new IOException("Transport not scheme specified: [" + location + "]");
0:         TransportFactory tf = (TransportFactory) transportFactorys.get(scheme);
1:         if (tf == null) {
1:             // Try to load if from a META-INF property.
1:             try {
0:                 tf = (TransportFactory) transportFactoryFinder.newInstance(scheme);
0:                 transportFactorys.put(scheme, tf);
1:             }
0:             catch (Throwable e) {
1:                 throw IOExceptionSupport.create("Transport scheme NOT recognized: [" + scheme + "]", e);
1:             }
1:         }
1:         return tf;
1:     }
1: 
0:     protected WireFormat createWireFormat(Map options) throws IOException {
1:         WireFormatFactory factory = createWireFormatFactory(options);
1:         WireFormat format = factory.createWireFormat();
1:         return format;
1:     }
1: 
0:     protected WireFormatFactory createWireFormatFactory(Map options) throws IOException {
0:         String wireFormat = (String) options.get("wireFormat");
0:         if (wireFormat == null)
1:             wireFormat = getDefaultWireFormatType();
1: 
1:         try {
0:             WireFormatFactory wff = (WireFormatFactory) wireFormatFactoryFinder.newInstance(wireFormat);
1:             IntrospectionSupport.setProperties(wff, options, "wireFormat.");
1:             return wff;
1:         }
0:         catch (Throwable e) {
1:             throw IOExceptionSupport.create("Could not create wire format factory for: " + wireFormat + ", reason: " + e, e);
1:         }
1:     }
1: 
1:     protected String getDefaultWireFormatType() {
1:         return "default";
1:     }
1: 
0:     protected Transport configure(Transport transport, WireFormat wf, Map options) {
1:         IntrospectionSupport.setProperties(transport, options);
1:         transport = new MutexTransport(transport);
1:         transport = new ResponseCorrelator(transport);
1:         return transport;
1:     }
1: 
1:     public Transport compositeConfigure(Transport transport, WireFormat format, Map options) {
1:         IntrospectionSupport.setProperties(transport, options);
1:         return transport;
1:     }
1: 
1: }
author:Timothy A. Bish
-------------------------------------------------------------------------------
commit:6f2ac63
/////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////
0:     public Transport serverConfigure(Transport transport, WireFormat format, HashMap options) throws Exception {
commit:0885c60
/////////////////////////////////////////////////////////////////////////
0: 
/////////////////////////////////////////////////////////////////////////
0:      *
/////////////////////////////////////////////////////////////////////////
0:      *
/////////////////////////////////////////////////////////////////////////
0:      *
/////////////////////////////////////////////////////////////////////////
0:      *
/////////////////////////////////////////////////////////////////////////
0:      * @deprecated
0: 
/////////////////////////////////////////////////////////////////////////
0:     }
/////////////////////////////////////////////////////////////////////////
0: 
/////////////////////////////////////////////////////////////////////////
0:      *
/////////////////////////////////////////////////////////////////////////
0:      *
1:     @SuppressWarnings("rawtypes")
/////////////////////////////////////////////////////////////////////////
0:      *
1:     @SuppressWarnings("rawtypes")
0: 	public Transport serverConfigure(Transport transport, WireFormat format, HashMap options) throws Exception {
/////////////////////////////////////////////////////////////////////////
0:      *
1:     @SuppressWarnings("rawtypes")
/////////////////////////////////////////////////////////////////////////
1:     @SuppressWarnings("rawtypes")
author:Gary Tully
-------------------------------------------------------------------------------
commit:ee4c8ee
/////////////////////////////////////////////////////////////////////////
1:     protected String getOption(Map options, String key, String def) {
1:         String rc = (String) options.remove(key);
1:         if( rc == null ) {
1:             rc = def;
0:         }
1:         return rc;
0:     }
commit:753b210
/////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////
1:         if (options.containsKey(WRITE_TIMEOUT_FILTER)) {
1:             transport = new WriteTimeoutFilter(transport);
1:             String soWriteTimeout = (String)options.remove(WRITE_TIMEOUT_FILTER);
1:             if (soWriteTimeout!=null) {
1:                 ((WriteTimeoutFilter)transport).setWriteTimeout(Long.parseLong(soWriteTimeout));
0:             }
0:         }
commit:f561d6b
/////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////
1:     private static final String WRITE_TIMEOUT_FILTER = "soWriteTimeout";
/////////////////////////////////////////////////////////////////////////
0:         if (options.containsKey(WRITE_TIMEOUT_FILTER)) {
0:             transport = new WriteTimeoutFilter(transport);
0:             String soWriteTimeout = (String)options.get(WRITE_TIMEOUT_FILTER);
0:             if (soWriteTimeout!=null) ((WriteTimeoutFilter)transport).setWriteTimeout(Long.parseLong(soWriteTimeout));
0:         }
commit:0d2172b
/////////////////////////////////////////////////////////////////////////
1:     private static final String THREAD_NAME_FILTER = "threadName";
0:     
/////////////////////////////////////////////////////////////////////////
1:         if (options.containsKey(THREAD_NAME_FILTER)) {
1:             transport = new ThreadNameFilter(transport);
0:         }
author:Bosanac Dejan
-------------------------------------------------------------------------------
commit:784b93d
/////////////////////////////////////////////////////////////////////////
1:             Map<String, String> options = new HashMap<String, String>(URISupport.parseParameters(location));
/////////////////////////////////////////////////////////////////////////
1:             Map<String, String> options = new HashMap<String, String>(URISupport.parseParameters(location));
author:Robert Davies
-------------------------------------------------------------------------------
commit:c338d3e
/////////////////////////////////////////////////////////////////////////
0:     
0:      /**
1:       * Allow registration of a transport factory without wiring via META-INF classes
1:      * @param scheme
1:      * @param tf
0:      */
1:     public static void registerTransportFactory(String scheme, TransportFactory tf) {
1:         TRANSPORT_FACTORYS.put(scheme, tf);
0:       }
author:James Strachan
-------------------------------------------------------------------------------
commit:1bf7a48
/////////////////////////////////////////////////////////////////////////
1:      * @param format
commit:f3ef1a9
/////////////////////////////////////////////////////////////////////////
0:     protected Transport configure(Transport transport, WireFormat wf, Map options) throws Exception {
============================================================================