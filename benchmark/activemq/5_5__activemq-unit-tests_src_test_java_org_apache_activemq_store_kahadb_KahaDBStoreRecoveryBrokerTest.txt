1:456a2ba: /**
1:456a2ba:  * Licensed to the Apache Software Foundation (ASF) under one or more
1:456a2ba:  * contributor license agreements.  See the NOTICE file distributed with
1:456a2ba:  * this work for additional information regarding copyright ownership.
1:456a2ba:  * The ASF licenses this file to You under the Apache License, Version 2.0
1:456a2ba:  * (the "License"); you may not use this file except in compliance with
1:456a2ba:  * the License.  You may obtain a copy of the License at
3:456a2ba:  *
1:456a2ba:  *      http://www.apache.org/licenses/LICENSE-2.0
1:0bbc0ac:  *
1:456a2ba:  * Unless required by applicable law or agreed to in writing, software
1:456a2ba:  * distributed under the License is distributed on an "AS IS" BASIS,
1:456a2ba:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:456a2ba:  * See the License for the specific language governing permissions and
1:456a2ba:  * limitations under the License.
1:456a2ba:  */
1:f62737b: package org.apache.activemq.store.kahadb;
10:456a2ba: 
1:456a2ba: import java.io.File;
1:95f17c2: import java.io.IOException;
1:5f7fc14: import java.io.RandomAccessFile;
1:456a2ba: import java.util.ArrayList;
1:456a2ba: 
1:4743a20: import junit.framework.Test;
1:4743a20: 
1:4743a20: import org.apache.activemq.broker.BrokerService;
1:4743a20: import org.apache.activemq.broker.RecoveryBrokerTest;
1:4743a20: import org.apache.activemq.broker.StubConnection;
1:4743a20: import org.apache.activemq.command.ActiveMQDestination;
1:4743a20: import org.apache.activemq.command.ActiveMQQueue;
1:4743a20: import org.apache.activemq.command.ConnectionInfo;
1:4743a20: import org.apache.activemq.command.ConsumerInfo;
1:4743a20: import org.apache.activemq.command.Message;
1:4743a20: import org.apache.activemq.command.MessageAck;
1:4743a20: import org.apache.activemq.command.ProducerInfo;
1:4743a20: import org.apache.activemq.command.SessionInfo;
1:95f17c2: import org.apache.commons.io.FileUtils;
1:4743a20: 
1:456a2ba: 
1:456a2ba: /**
1:4743a20:  * Used to verify that recovery works correctly against
1:4743a20:  *
1:4743a20:  *
1:456a2ba:  */
1:456a2ba: public class KahaDBStoreRecoveryBrokerTest extends RecoveryBrokerTest {
1:95f17c2:     public static final String KAHADB_DIR_BASE = "target/activemq-data/kahadb";
1:95f17c2:     public static String kahaDbDirectoryName;
1:456a2ba: 
1:06f24e2:     enum CorruptionType { None, FailToLoad, LoadInvalid, LoadCorrupt, LoadOrderIndex0 };
1:dcf1f5e:     public CorruptionType  failTest = CorruptionType.None;
1:456a2ba: 
1:4743a20:     @Override
1:95f17c2:     protected void setUp() throws Exception {
1:95f17c2:         kahaDbDirectoryName = KAHADB_DIR_BASE + "/" + System.currentTimeMillis();
1:95f17c2:         super.setUp();
1:95f17c2:     }
1:95f17c2: 
1:95f17c2:     @Override
1:95f17c2:     protected void tearDown() throws Exception {
1:95f17c2:         super.tearDown();
1:95f17c2:         try {
1:95f17c2:             File kahaDbDir = new File(kahaDbDirectoryName);
1:95f17c2:             FileUtils.deleteDirectory(kahaDbDir);
1:95f17c2:         } catch (IOException e) {
1:95f17c2:         }
1:95f17c2:     }
1:95f17c2: 
1:95f17c2:     @Override
1:456a2ba:     protected BrokerService createBroker() throws Exception {
1:456a2ba:         BrokerService broker = new BrokerService();
1:456a2ba:         KahaDBStore kaha = new KahaDBStore();
1:95f17c2:         kaha.setDirectory(new File(kahaDbDirectoryName));
1:456a2ba:         kaha.deleteAllMessages();
1:06f24e2:         kaha.setCheckForCorruptJournalFiles(failTest == CorruptionType.LoadOrderIndex0);
1:456a2ba:         broker.setPersistenceAdapter(kaha);
1:456a2ba:         return broker;
1:456a2ba:     }
1:4743a20: 
1:4743a20:     @Override
1:4743a20:     @SuppressWarnings("resource")
1:456a2ba:     protected BrokerService createRestartedBroker() throws Exception {
1:4743a20: 
1:5f7fc14:         // corrupting index
1:95f17c2:         File index = new File(kahaDbDirectoryName + "/db.data");
1:5f7fc14:         RandomAccessFile raf = new RandomAccessFile(index, "rw");
1:dcf1f5e:         switch (failTest) {
1:dcf1f5e:             case FailToLoad:
1:dcf1f5e:                 index.delete();
1:dcf1f5e:                 raf = new RandomAccessFile(index, "rw");
1:dcf1f5e:                 raf.seek(index.length());
1:dcf1f5e:                 raf.writeBytes("corrupt");
1:dcf1f5e:                 break;
1:dcf1f5e:             case LoadInvalid:
1:dcf1f5e:                 // page size 0
1:dcf1f5e:                 raf.seek(0);
1:dcf1f5e:                 raf.writeBytes("corrupt and cannot load metadata");
1:dcf1f5e:                 break;
1:dcf1f5e:             case LoadCorrupt:
1:dcf1f5e:                 // loadable but invalid metadata
1:dcf1f5e:                 // location of order index low priority index for first destination...
1:dcf1f5e:                 raf.seek(8*1024 + 57);
1:dcf1f5e:                 raf.writeLong(Integer.MAX_VALUE-10);
1:dcf1f5e:                 break;
1:06f24e2:             case LoadOrderIndex0:
1:06f24e2:                 // loadable but invalid metadata
1:06f24e2:                 // location of order index default priority index size
1:06f24e2:                 // so looks like there are no ids in the order index
1:06f24e2:                 // picked up by setCheckForCorruptJournalFiles
1:06f24e2:                 raf.seek(12*1024 + 21);
1:06f24e2:                 raf.writeShort(0);
1:06f24e2:                 raf.writeChar(0);
1:06f24e2:                 raf.writeLong(-1);
1:06f24e2:                 break;
1:dcf1f5e:             default:
1:456a2ba:         }
1:5f7fc14:         raf.close();
1:456a2ba: 
1:5f7fc14:         // starting broker
1:456a2ba:         BrokerService broker = new BrokerService();
1:456a2ba:         KahaDBStore kaha = new KahaDBStore();
1:06f24e2:         kaha.setCheckForCorruptJournalFiles(failTest == CorruptionType.LoadOrderIndex0);
1:5f7fc14:         // uncomment if you want to test archiving
1:5f7fc14:         //kaha.setArchiveCorruptedIndex(true);
1:95f17c2:         kaha.setDirectory(new File(kahaDbDirectoryName));
1:456a2ba:         broker.setPersistenceAdapter(kaha);
1:456a2ba:         return broker;
1:dcf1f5e:     }
1:456a2ba: 
1:456a2ba:     public static Test suite() {
1:456a2ba:         return suite(KahaDBStoreRecoveryBrokerTest.class);
1:456a2ba:     }
1:4743a20: 
1:456a2ba:     public static void main(String[] args) {
1:456a2ba:         junit.textui.TestRunner.run(suite());
1:456a2ba:     }
1:456a2ba: 
1:dcf1f5e:     public void initCombosForTestLargeQueuePersistentMessagesNotLostOnRestart() {
1:06f24e2:         this.addCombinationValues("failTest", new CorruptionType[]{CorruptionType.FailToLoad, CorruptionType.LoadInvalid, CorruptionType.LoadCorrupt, CorruptionType.LoadOrderIndex0} );
1:dcf1f5e:     }
1:456a2ba: 
1:456a2ba:     public void testLargeQueuePersistentMessagesNotLostOnRestart() throws Exception {
1:456a2ba: 
1:456a2ba:         ActiveMQDestination destination = new ActiveMQQueue("TEST");
1:456a2ba: 
1:456a2ba:         // Setup the producer and send the message.
1:456a2ba:         StubConnection connection = createConnection();
1:456a2ba:         ConnectionInfo connectionInfo = createConnectionInfo();
1:456a2ba:         SessionInfo sessionInfo = createSessionInfo(connectionInfo);
1:456a2ba:         ProducerInfo producerInfo = createProducerInfo(sessionInfo);
1:456a2ba:         connection.send(connectionInfo);
1:456a2ba:         connection.send(sessionInfo);
1:456a2ba:         connection.send(producerInfo);
1:4743a20: 
1:456a2ba:         ArrayList<String> expected = new ArrayList<String>();
1:4743a20: 
1:456a2ba:         int MESSAGE_COUNT = 10000;
1:456a2ba:         for(int i=0; i < MESSAGE_COUNT; i++) {
1:456a2ba:             Message message = createMessage(producerInfo, destination);
1:456a2ba:             message.setPersistent(true);
1:456a2ba:             connection.send(message);
1:456a2ba:             expected.add(message.getMessageId().toString());
1:456a2ba:         }
1:456a2ba:         connection.request(closeConnectionInfo(connectionInfo));
1:456a2ba: 
1:456a2ba:         // restart the broker.
1:456a2ba:         restartBroker();
1:456a2ba: 
1:456a2ba:         // Setup the consumer and receive the message.
1:456a2ba:         connection = createConnection();
1:456a2ba:         connectionInfo = createConnectionInfo();
1:456a2ba:         sessionInfo = createSessionInfo(connectionInfo);
1:456a2ba:         connection.send(connectionInfo);
1:456a2ba:         connection.send(sessionInfo);
1:456a2ba:         ConsumerInfo consumerInfo = createConsumerInfo(sessionInfo, destination);
1:456a2ba:         connection.send(consumerInfo);
1:456a2ba:         producerInfo = createProducerInfo(sessionInfo);
1:456a2ba:         connection.send(producerInfo);
1:456a2ba: 
1:456a2ba:         for(int i=0; i < MESSAGE_COUNT/2; i++) {
1:456a2ba:             Message m = receiveMessage(connection);
1:456a2ba:             assertNotNull("Should have received message "+expected.get(0)+" by now!", m);
1:456a2ba:             assertEquals(expected.remove(0), m.getMessageId().toString());
1:456a2ba:             MessageAck ack = createAck(consumerInfo, m, 1, MessageAck.STANDARD_ACK_TYPE);
1:456a2ba:             connection.send(ack);
1:456a2ba:         }
1:4743a20: 
1:456a2ba:         connection.request(closeConnectionInfo(connectionInfo));
1:4743a20: 
1:456a2ba:         // restart the broker.
1:456a2ba:         restartBroker();
1:4743a20: 
1:456a2ba:         // Setup the consumer and receive the message.
1:456a2ba:         connection = createConnection();
1:456a2ba:         connectionInfo = createConnectionInfo();
1:456a2ba:         sessionInfo = createSessionInfo(connectionInfo);
1:456a2ba:         connection.send(connectionInfo);
1:456a2ba:         connection.send(sessionInfo);
1:456a2ba:         consumerInfo = createConsumerInfo(sessionInfo, destination);
1:456a2ba:         connection.send(consumerInfo);
1:456a2ba: 
1:456a2ba:         for(int i=0; i < MESSAGE_COUNT/2; i++) {
1:456a2ba:             Message m = receiveMessage(connection);
1:456a2ba:             assertNotNull("Should have received message "+expected.get(i)+" by now!", m);
1:456a2ba:             assertEquals(expected.get(i), m.getMessageId().toString());
1:456a2ba:             MessageAck ack = createAck(consumerInfo, m, 1, MessageAck.STANDARD_ACK_TYPE);
1:456a2ba:             connection.send(ack);
1:4743a20: 
1:4743a20: 
1:456a2ba:         }
1:456a2ba: 
1:456a2ba:         connection.request(closeConnectionInfo(connectionInfo));
1:456a2ba:     }
1:456a2ba: }
============================================================================
author:gtully
-------------------------------------------------------------------------------
commit:06f24e2
/////////////////////////////////////////////////////////////////////////
1:     enum CorruptionType { None, FailToLoad, LoadInvalid, LoadCorrupt, LoadOrderIndex0 };
/////////////////////////////////////////////////////////////////////////
1:         kaha.setCheckForCorruptJournalFiles(failTest == CorruptionType.LoadOrderIndex0);
/////////////////////////////////////////////////////////////////////////
1:             case LoadOrderIndex0:
1:                 // loadable but invalid metadata
1:                 // location of order index default priority index size
1:                 // so looks like there are no ids in the order index
1:                 // picked up by setCheckForCorruptJournalFiles
1:                 raf.seek(12*1024 + 21);
1:                 raf.writeShort(0);
1:                 raf.writeChar(0);
1:                 raf.writeLong(-1);
1:                 break;
/////////////////////////////////////////////////////////////////////////
1:         kaha.setCheckForCorruptJournalFiles(failTest == CorruptionType.LoadOrderIndex0);
/////////////////////////////////////////////////////////////////////////
1:         this.addCombinationValues("failTest", new CorruptionType[]{CorruptionType.FailToLoad, CorruptionType.LoadInvalid, CorruptionType.LoadCorrupt, CorruptionType.LoadOrderIndex0} );
author:Timothy A. Bish
-------------------------------------------------------------------------------
commit:95f17c2
/////////////////////////////////////////////////////////////////////////
1: import java.io.IOException;
/////////////////////////////////////////////////////////////////////////
1: import org.apache.commons.io.FileUtils;
/////////////////////////////////////////////////////////////////////////
1:     public static final String KAHADB_DIR_BASE = "target/activemq-data/kahadb";
1:     public static String kahaDbDirectoryName;
1:     protected void setUp() throws Exception {
1:         kahaDbDirectoryName = KAHADB_DIR_BASE + "/" + System.currentTimeMillis();
1:         super.setUp();
1:     }
1: 
1:     @Override
1:     protected void tearDown() throws Exception {
1:         super.tearDown();
1:         try {
1:             File kahaDbDir = new File(kahaDbDirectoryName);
1:             FileUtils.deleteDirectory(kahaDbDir);
1:         } catch (IOException e) {
1:         }
1:     }
1: 
1:     @Override
1:         kaha.setDirectory(new File(kahaDbDirectoryName));
/////////////////////////////////////////////////////////////////////////
1:         File index = new File(kahaDbDirectoryName + "/db.data");
/////////////////////////////////////////////////////////////////////////
1:         kaha.setDirectory(new File(kahaDbDirectoryName));
commit:4743a20
/////////////////////////////////////////////////////////////////////////
1: import junit.framework.Test;
1: 
1: import org.apache.activemq.broker.BrokerService;
1: import org.apache.activemq.broker.RecoveryBrokerTest;
1: import org.apache.activemq.broker.StubConnection;
1: import org.apache.activemq.command.ActiveMQDestination;
1: import org.apache.activemq.command.ActiveMQQueue;
1: import org.apache.activemq.command.ConnectionInfo;
1: import org.apache.activemq.command.ConsumerInfo;
1: import org.apache.activemq.command.Message;
1: import org.apache.activemq.command.MessageAck;
1: import org.apache.activemq.command.ProducerInfo;
1: import org.apache.activemq.command.SessionInfo;
1: 
1:  * Used to verify that recovery works correctly against
1:  *
1:  *
1:     @Override
/////////////////////////////////////////////////////////////////////////
1: 
1:     @Override
1:     @SuppressWarnings("resource")
/////////////////////////////////////////////////////////////////////////
1: 
1: 
/////////////////////////////////////////////////////////////////////////
1: 
1: 
/////////////////////////////////////////////////////////////////////////
1: 
1: 
/////////////////////////////////////////////////////////////////////////
1: 
1: 
1: 
commit:ef24cc9
author:Hiram R. Chirino
-------------------------------------------------------------------------------
commit:1aab71b
/////////////////////////////////////////////////////////////////////////
commit:0bbc0ac
/////////////////////////////////////////////////////////////////////////
1:  * 
commit:f62737b
/////////////////////////////////////////////////////////////////////////
1: package org.apache.activemq.store.kahadb;
0: import java.net.URI;
0: import org.apache.activemq.broker.BrokerFactory;
/////////////////////////////////////////////////////////////////////////
0:  * @version $Revision: 712224 $
commit:456a2ba
/////////////////////////////////////////////////////////////////////////
1: /**
1:  * Licensed to the Apache Software Foundation (ASF) under one or more
1:  * contributor license agreements.  See the NOTICE file distributed with
1:  * this work for additional information regarding copyright ownership.
1:  * The ASF licenses this file to You under the Apache License, Version 2.0
1:  * (the "License"); you may not use this file except in compliance with
1:  * the License.  You may obtain a copy of the License at
1:  *
1:  *      http://www.apache.org/licenses/LICENSE-2.0
1:  *
1:  * Unless required by applicable law or agreed to in writing, software
1:  * distributed under the License is distributed on an "AS IS" BASIS,
1:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:  * See the License for the specific language governing permissions and
1:  * limitations under the License.
1:  */
0: package org.apache.kahadb.store;
1: 
1: import java.io.File;
1: import java.util.ArrayList;
1: 
0: import junit.framework.Test;
1: 
0: import org.apache.activemq.broker.BrokerService;
0: import org.apache.activemq.broker.RecoveryBrokerTest;
0: import org.apache.activemq.broker.StubConnection;
0: import org.apache.activemq.command.ActiveMQDestination;
0: import org.apache.activemq.command.ActiveMQQueue;
0: import org.apache.activemq.command.ConnectionInfo;
0: import org.apache.activemq.command.ConsumerInfo;
0: import org.apache.activemq.command.Message;
0: import org.apache.activemq.command.MessageAck;
0: import org.apache.activemq.command.ProducerInfo;
0: import org.apache.activemq.command.SessionInfo;
1: 
1: 
1: /**
0:  * Used to verify that recovery works correctly against 
1:  * 
0:  * @version $Revision$
1:  */
1: public class KahaDBStoreRecoveryBrokerTest extends RecoveryBrokerTest {
1: 
1:     protected BrokerService createBroker() throws Exception {
1:         BrokerService broker = new BrokerService();
1:         KahaDBStore kaha = new KahaDBStore();
0:         kaha.setDirectory(new File("target/activemq-data/kahadb"));
1:         kaha.deleteAllMessages();
1:         broker.setPersistenceAdapter(kaha);
1:         return broker;
1:     }
1:     
1:     protected BrokerService createRestartedBroker() throws Exception {
1:         BrokerService broker = new BrokerService();
1:         KahaDBStore kaha = new KahaDBStore();
0:         kaha.setDirectory(new File("target/activemq-data/kahadb"));
1:         broker.setPersistenceAdapter(kaha);
1:         return broker;
1:     }
1:     
1:     public static Test suite() {
1:         return suite(KahaDBStoreRecoveryBrokerTest.class);
1:     }
1:     
1:     public static void main(String[] args) {
1:         junit.textui.TestRunner.run(suite());
1:     }
1: 
1:     
1:     public void testLargeQueuePersistentMessagesNotLostOnRestart() throws Exception {
1: 
1:         ActiveMQDestination destination = new ActiveMQQueue("TEST");
1: 
1:         // Setup the producer and send the message.
1:         StubConnection connection = createConnection();
1:         ConnectionInfo connectionInfo = createConnectionInfo();
1:         SessionInfo sessionInfo = createSessionInfo(connectionInfo);
1:         ProducerInfo producerInfo = createProducerInfo(sessionInfo);
1:         connection.send(connectionInfo);
1:         connection.send(sessionInfo);
1:         connection.send(producerInfo);
1:         
1:         ArrayList<String> expected = new ArrayList<String>();
1:         
1:         int MESSAGE_COUNT = 10000;
1:         for(int i=0; i < MESSAGE_COUNT; i++) {
1:             Message message = createMessage(producerInfo, destination);
1:             message.setPersistent(true);
1:             connection.send(message);
1:             expected.add(message.getMessageId().toString());
1:         }
1:         connection.request(closeConnectionInfo(connectionInfo));
1: 
1:         // restart the broker.
1:         restartBroker();
1: 
1:         // Setup the consumer and receive the message.
1:         connection = createConnection();
1:         connectionInfo = createConnectionInfo();
1:         sessionInfo = createSessionInfo(connectionInfo);
1:         connection.send(connectionInfo);
1:         connection.send(sessionInfo);
1:         ConsumerInfo consumerInfo = createConsumerInfo(sessionInfo, destination);
1:         connection.send(consumerInfo);
1:         producerInfo = createProducerInfo(sessionInfo);
1:         connection.send(producerInfo);
1: 
1:         for(int i=0; i < MESSAGE_COUNT/2; i++) {
1:             Message m = receiveMessage(connection);
1:             assertNotNull("Should have received message "+expected.get(0)+" by now!", m);
1:             assertEquals(expected.remove(0), m.getMessageId().toString());
1:             MessageAck ack = createAck(consumerInfo, m, 1, MessageAck.STANDARD_ACK_TYPE);
1:             connection.send(ack);
1:         }
1:         
1:         connection.request(closeConnectionInfo(connectionInfo));
1:         
1:         // restart the broker.
1:         restartBroker();
1: 
1:         // Setup the consumer and receive the message.
1:         connection = createConnection();
1:         connectionInfo = createConnectionInfo();
1:         sessionInfo = createSessionInfo(connectionInfo);
1:         connection.send(connectionInfo);
1:         connection.send(sessionInfo);
1:         consumerInfo = createConsumerInfo(sessionInfo, destination);
1:         connection.send(consumerInfo);
1: 
1:         for(int i=0; i < MESSAGE_COUNT/2; i++) {
1:             Message m = receiveMessage(connection);
1:             assertNotNull("Should have received message "+expected.get(i)+" by now!", m);
1:             assertEquals(expected.get(i), m.getMessageId().toString());
1:             MessageAck ack = createAck(consumerInfo, m, 1, MessageAck.STANDARD_ACK_TYPE);
1:             connection.send(ack);
1:             
1:             
1:         }
1:         
1:         connection.request(closeConnectionInfo(connectionInfo));
1:     }
1: }
author:Gary Tully
-------------------------------------------------------------------------------
commit:dcf1f5e
/////////////////////////////////////////////////////////////////////////
0: import org.apache.kahadb.page.PageFile;
/////////////////////////////////////////////////////////////////////////
0:     enum CorruptionType { None, FailToLoad, LoadInvalid, LoadCorrupt };
1:     public CorruptionType  failTest = CorruptionType.None;
0: 
/////////////////////////////////////////////////////////////////////////
1:         switch (failTest) {
1:             case FailToLoad:
1:                 index.delete();
1:                 raf = new RandomAccessFile(index, "rw");
1:                 raf.seek(index.length());
1:                 raf.writeBytes("corrupt");
1:                 break;
1:             case LoadInvalid:
1:                 // page size 0
1:                 raf.seek(0);
1:                 raf.writeBytes("corrupt and cannot load metadata");
1:                 break;
1:             case LoadCorrupt:
1:                 // loadable but invalid metadata
1:                 // location of order index low priority index for first destination...
1:                 raf.seek(8*1024 + 57);
1:                 raf.writeLong(Integer.MAX_VALUE-10);
1:                 break;
1:             default:
1:         }
/////////////////////////////////////////////////////////////////////////
1:     public void initCombosForTestLargeQueuePersistentMessagesNotLostOnRestart() {
0:         this.addCombinationValues("failTest", new CorruptionType[]{CorruptionType.FailToLoad, CorruptionType.LoadInvalid, CorruptionType.LoadCorrupt} );
1:     }
0: 
author:Bosanac Dejan
-------------------------------------------------------------------------------
commit:5f7fc14
/////////////////////////////////////////////////////////////////////////
0: import org.apache.activemq.command.*;
0: 
0: import java.io.File;
1: import java.io.RandomAccessFile;
0: import java.util.ArrayList;
/////////////////////////////////////////////////////////////////////////
0: 
1:         // corrupting index
0:         File index = new File("target/activemq-data/kahadb/db.data");
0:         index.delete();
1:         RandomAccessFile raf = new RandomAccessFile(index, "rw");
0:         raf.seek(index.length());
0:         raf.writeBytes("corrupt");
1:         raf.close();
0: 
1:         // starting broker
1:         // uncomment if you want to test archiving
1:         //kaha.setArchiveCorruptedIndex(true);
============================================================================