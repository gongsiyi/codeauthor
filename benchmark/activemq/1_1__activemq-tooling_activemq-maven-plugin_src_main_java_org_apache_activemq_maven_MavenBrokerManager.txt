1:c0eae1b: /**
1:c0eae1b:  * Licensed to the Apache Software Foundation (ASF) under one or more
1:c0eae1b:  * contributor license agreements.  See the NOTICE file distributed with
1:c0eae1b:  * this work for additional information regarding copyright ownership.
1:c0eae1b:  * The ASF licenses this file to You under the Apache License, Version 2.0
1:c0eae1b:  * (the "License"); you may not use this file except in compliance with
1:c0eae1b:  * the License.  You may obtain a copy of the License at
1:c0eae1b:  *
1:c0eae1b:  *      http://www.apache.org/licenses/LICENSE-2.0
1:c0eae1b:  *
1:c0eae1b:  * Unless required by applicable law or agreed to in writing, software
1:c0eae1b:  * distributed under the License is distributed on an "AS IS" BASIS,
1:c0eae1b:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:c0eae1b:  * See the License for the specific language governing permissions and
1:c0eae1b:  * limitations under the License.
1:c0eae1b:  */
1:c0eae1b: package org.apache.activemq.maven;
1:c0eae1b: 
1:c0eae1b: import org.apache.activemq.broker.BrokerService;
1:c0eae1b: import org.apache.maven.plugin.MojoExecutionException;
1:c0eae1b: 
1:c0eae1b: /**
1:c0eae1b:  * Manager of the broker used by the maven plugin.
1:c0eae1b:  */
1:c0eae1b: public interface MavenBrokerManager {
1:c0eae1b:     /**
1:c0eae1b:      * Start the broker using the fork setting and configuration at the given URI.
1:c0eae1b:      *
1:c0eae1b:      * @param fork true => run the broker asynchronously; false => run the broker synchronously (this method does not
1:c0eae1b:      *             return until the broker shuts down)
1:c0eae1b:      * @param configUri URI of the broker configuration; prefix with "xbean:file" to read XML configuration from a file.
1:c0eae1b:      * @throws MojoExecutionException
1:c0eae1b:      */
1:c0eae1b:     void start(boolean fork, String configUri) throws MojoExecutionException;
1:c0eae1b: 
1:c0eae1b:     /**
1:c0eae1b:      * Stop the broker.
1:c0eae1b:      *
1:c0eae1b:      * @throws MojoExecutionException
1:c0eae1b:      */
1:c0eae1b:     void stop() throws MojoExecutionException;
1:c0eae1b: 
1:c0eae1b:     /**
1:c0eae1b:      * Return the broker service created.
1:c0eae1b:      */
1:c0eae1b:     BrokerService getBroker();
1:c0eae1b: 
1:c0eae1b:     /**
1:c0eae1b:      * Set the broker service managed to the one given.
1:c0eae1b:      *
1:c0eae1b:      * @param broker activemq instance to manage.
1:c0eae1b:      */
1:c0eae1b:     void setBroker(BrokerService broker);
1:c0eae1b: }
============================================================================
author:artnaseef
-------------------------------------------------------------------------------
commit:c0eae1b
/////////////////////////////////////////////////////////////////////////
1: /**
1:  * Licensed to the Apache Software Foundation (ASF) under one or more
1:  * contributor license agreements.  See the NOTICE file distributed with
1:  * this work for additional information regarding copyright ownership.
1:  * The ASF licenses this file to You under the Apache License, Version 2.0
1:  * (the "License"); you may not use this file except in compliance with
1:  * the License.  You may obtain a copy of the License at
1:  *
1:  *      http://www.apache.org/licenses/LICENSE-2.0
1:  *
1:  * Unless required by applicable law or agreed to in writing, software
1:  * distributed under the License is distributed on an "AS IS" BASIS,
1:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:  * See the License for the specific language governing permissions and
1:  * limitations under the License.
1:  */
1: package org.apache.activemq.maven;
1: 
1: import org.apache.activemq.broker.BrokerService;
1: import org.apache.maven.plugin.MojoExecutionException;
1: 
1: /**
1:  * Manager of the broker used by the maven plugin.
1:  */
1: public interface MavenBrokerManager {
1:     /**
1:      * Start the broker using the fork setting and configuration at the given URI.
1:      *
1:      * @param fork true => run the broker asynchronously; false => run the broker synchronously (this method does not
1:      *             return until the broker shuts down)
1:      * @param configUri URI of the broker configuration; prefix with "xbean:file" to read XML configuration from a file.
1:      * @throws MojoExecutionException
1:      */
1:     void start(boolean fork, String configUri) throws MojoExecutionException;
1: 
1:     /**
1:      * Stop the broker.
1:      *
1:      * @throws MojoExecutionException
1:      */
1:     void stop() throws MojoExecutionException;
1: 
1:     /**
1:      * Return the broker service created.
1:      */
1:     BrokerService getBroker();
1: 
1:     /**
1:      * Set the broker service managed to the one given.
1:      *
1:      * @param broker activemq instance to manage.
1:      */
1:     void setBroker(BrokerService broker);
1: }
============================================================================