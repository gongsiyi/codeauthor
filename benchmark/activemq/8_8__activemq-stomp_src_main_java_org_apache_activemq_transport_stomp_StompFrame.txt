1:dc98d96: /**
1:57b4941:  * Licensed to the Apache Software Foundation (ASF) under one or more
1:57b4941:  * contributor license agreements.  See the NOTICE file distributed with
1:57b4941:  * this work for additional information regarding copyright ownership.
1:57b4941:  * The ASF licenses this file to You under the Apache License, Version 2.0
1:57b4941:  * (the "License"); you may not use this file except in compliance with
1:57b4941:  * the License.  You may obtain a copy of the License at
1:dc98d96:  *
1:230a86c:  *      http://www.apache.org/licenses/LICENSE-2.0
1:dc98d96:  *
1:dc98d96:  * Unless required by applicable law or agreed to in writing, software
1:dc98d96:  * distributed under the License is distributed on an "AS IS" BASIS,
1:dc98d96:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:dc98d96:  * See the License for the specific language governing permissions and
1:dc98d96:  * limitations under the License.
1:dc98d96:  */
1:98b61e4: package org.apache.activemq.transport.stomp;
1:dc98d96: 
1:b53e4b5: import java.io.UnsupportedEncodingException;
1:05de2b1: import java.util.Arrays;
1:dc98d96: import java.util.HashMap;
1:4b44d31: import java.util.Locale;
1:dc98d96: import java.util.Map;
1:dc98d96: 
1:dc98d96: import org.apache.activemq.command.Command;
1:dc98d96: import org.apache.activemq.command.Endpoint;
1:dc98d96: import org.apache.activemq.command.Response;
1:dc98d96: import org.apache.activemq.state.CommandVisitor;
1:d618ab3: import org.apache.activemq.util.MarshallingSupport;
1:dc98d96: 
1:dc98d96: /**
1:dc98d96:  * Represents all the data in a STOMP frame.
1:dc98d96:  *
1:f812e34:  * @author <a href="http://hiramchirino.com">chirino</a>
1:dc98d96:  */
1:530884a: public class StompFrame implements Command {
1:dc98d96: 
1:b41e1a7:     public static final byte[] NO_DATA = new byte[] {};
1:dc98d96: 
1:f812e34:     private String action;
1:933eb2f:     private Map<String, String> headers = new HashMap<String, String>();
1:f812e34:     private byte[] content = NO_DATA;
1:dc98d96: 
1:f8f24e8:     private transient Object transportContext = null;
1:f8f24e8: 
1:da98de0:     public StompFrame(String command) {
1:8fd00fa:         this(command, null, null);
21:dc98d96:     }
1:8fd00fa: 
1:da98de0:     public StompFrame(String command, Map<String, String> headers) {
1:8fd00fa:         this(command, headers, null);
1:dc98d96:     }
1:8fd00fa: 
1:933eb2f:     public StompFrame(String command, Map<String, String> headers, byte[] data) {
1:f812e34:         this.action = command;
1:da98de0:         if (headers != null)
1:f812e34:             this.headers = headers;
1:da98de0:         if (data != null)
1:f812e34:             this.content = data;
1:f812e34:     }
1:dc98d96: 
1:f812e34:     public StompFrame() {
1:f812e34:     }
1:dc98d96: 
1:f812e34:     public String getAction() {
1:f812e34:         return action;
1:f812e34:     }
1:dc98d96: 
1:f812e34:     public void setAction(String command) {
1:f812e34:         this.action = command;
1:f812e34:     }
1:dc98d96: 
1:f812e34:     public byte[] getContent() {
1:f812e34:         return content;
1:f812e34:     }
1:dc98d96: 
1:da98de0:     public String getBody() {
1:05de2b1:         try {
1:8fd00fa:             return new String(content, "UTF-8");
1:8fd00fa:         } catch (UnsupportedEncodingException e) {
1:8fd00fa:             return new String(content);
1:dc98d96:         }
1:dc98d96:     }
1:dc98d96: 
1:f812e34:     public void setContent(byte[] data) {
1:f812e34:         this.content = data;
1:f812e34:     }
1:dc98d96: 
1:933eb2f:     public Map<String, String> getHeaders() {
1:f812e34:         return headers;
1:f812e34:     }
1:dc98d96: 
1:933eb2f:     public void setHeaders(Map<String, String> headers) {
1:f812e34:         this.headers = headers;
1:f812e34:     }
1:8fd00fa: 
1:25c99a6:     @Override
1:f812e34:     public int getCommandId() {
1:f812e34:         return 0;
1:f812e34:     }
1:dc98d96: 
1:25c99a6:     @Override
1:f812e34:     public Endpoint getFrom() {
1:f812e34:         return null;
1:f812e34:     }
1:dc98d96: 
1:25c99a6:     @Override
1:f812e34:     public Endpoint getTo() {
1:f812e34:         return null;
1:f812e34:     }
1:dc98d96: 
1:25c99a6:     @Override
1:f812e34:     public boolean isBrokerInfo() {
1:f812e34:         return false;
1:f812e34:     }
1:dc98d96: 
1:25c99a6:     @Override
1:f812e34:     public boolean isMessage() {
1:f812e34:         return false;
1:f812e34:     }
1:dc98d96: 
1:25c99a6:     @Override
1:f812e34:     public boolean isMessageAck() {
1:f812e34:         return false;
1:f812e34:     }
1:dc98d96: 
1:25c99a6:     @Override
1:f812e34:     public boolean isMessageDispatch() {
1:f812e34:         return false;
1:f812e34:     }
1:dc98d96: 
1:25c99a6:     @Override
1:f812e34:     public boolean isMessageDispatchNotification() {
1:f812e34:         return false;
1:f812e34:     }
1:dc98d96: 
1:25c99a6:     @Override
1:f812e34:     public boolean isResponse() {
1:f812e34:         return false;
1:f812e34:     }
1:dc98d96: 
1:25c99a6:     @Override
1:f812e34:     public boolean isResponseRequired() {
1:f812e34:         return false;
1:f812e34:     }
1:dc98d96: 
1:25c99a6:     @Override
1:f812e34:     public boolean isShutdownInfo() {
1:f812e34:         return false;
1:f812e34:     }
1:dc98d96: 
1:25c99a6:     @Override
1:f392884:     public boolean isConnectionControl() {
10:dc98d96:         return false;
1:dc98d96:     }
1:8fd00fa: 
1:25c99a6:     @Override
1:25c99a6:     public boolean isConsumerControl() {
1:25c99a6:         return false;
1:25c99a6:     }
1:25c99a6: 
1:25c99a6:     @Override
1:f812e34:     public boolean isWireFormatInfo() {
1:f812e34:         return false;
1:f812e34:     }
1:dc98d96: 
1:25c99a6:     @Override
1:f812e34:     public void setCommandId(int value) {
1:f812e34:     }
1:dc98d96: 
1:25c99a6:     @Override
1:f812e34:     public void setFrom(Endpoint from) {
1:f812e34:     }
1:dc98d96: 
1:25c99a6:     @Override
1:f812e34:     public void setResponseRequired(boolean responseRequired) {
1:f812e34:     }
1:dc98d96: 
1:25c99a6:     @Override
1:f812e34:     public void setTo(Endpoint to) {
1:f812e34:     }
1:dc98d96: 
1:25c99a6:     @Override
1:f812e34:     public Response visit(CommandVisitor visitor) throws Exception {
1:f812e34:         return null;
1:f812e34:     }
1:dc98d96: 
1:25c99a6:     @Override
1:f812e34:     public byte getDataStructureType() {
1:f812e34:         return 0;
1:f812e34:     }
1:dc98d96: 
1:25c99a6:     @Override
1:f812e34:     public boolean isMarshallAware() {
1:f812e34:         return false;
1:f812e34:     }
1:dc98d96: 
1:25c99a6:     @Override
1:f812e34:     public String toString() {
1:d618ab3:         return format(true);
1:dc98d96:     }
1:8fd00fa: 
1:d618ab3:     public String format() {
1:d618ab3:         return format(false);
1:dc98d96:     }
2:8fd00fa: 
1:d618ab3:     public String format(boolean forLogging) {
1:f731156:         if( !forLogging && getAction().equals(Stomp.Commands.KEEPALIVE) ) {
1:f731156:             return "\n";
1:f731156:         }
1:0885c60:         StringBuilder buffer = new StringBuilder();
1:f812e34:         buffer.append(getAction());
1:f812e34:         buffer.append("\n");
1:0885c60:         Map<String, String> headers = getHeaders();
1:0885c60:         for (Map.Entry<String, String> entry : headers.entrySet()) {
1:f812e34:             buffer.append(entry.getKey());
1:f812e34:             buffer.append(":");
1:4b44d31:             if (forLogging && entry.getKey().toString().toLowerCase(Locale.ENGLISH).contains(Stomp.Headers.Connect.PASSCODE)) {
1:400990f:                 buffer.append("*****");
1:400990f:             } else {
1:f812e34:                 buffer.append(entry.getValue());
1:f812e34:             }
1:f812e34:             buffer.append("\n");
1:05de2b1:         }
1:f812e34:         buffer.append("\n");
1:f812e34:         if (getContent() != null) {
1:f812e34:             try {
1:d618ab3:                 String contentString = new String(getContent(), "UTF-8");
1:d618ab3:                 if (forLogging) {
1:d618ab3:                     contentString = MarshallingSupport.truncate64(contentString);
1:05de2b1:                 }
1:d618ab3:                 buffer.append(contentString);
1:f812e34:             } catch (Throwable e) {
1:f812e34:                 buffer.append(Arrays.toString(getContent()));
1:f812e34:             }
1:f812e34:         }
1:93a379f:         // terminate the frame
1:93a379f:         buffer.append('\u0000');
1:f812e34:         return buffer.toString();
1:f812e34:     }
1:f8f24e8: 
1:f8f24e8:     /**
1:f8f24e8:      * Transports may wish to associate additional data with the connection. For
1:f8f24e8:      * example, an SSL transport may use this field to attach the client
1:f8f24e8:      * certificates used when the connection was established.
1:dc98d96:      *
1:f8f24e8:      * @return the transport context.
1:f8f24e8:      */
1:f8f24e8:     public Object getTransportContext() {
1:f8f24e8:         return transportContext;
1:05de2b1:     }
1:f8f24e8: 
1:f8f24e8:     /**
1:f8f24e8:      * Transports may wish to associate additional data with the connection. For
1:f8f24e8:      * example, an SSL transport may use this field to attach the client
1:f8f24e8:      * certificates used when the connection was established.
1:dc98d96:      *
1:f8f24e8:      * @param transportContext value used to set the transport context
1:f8f24e8:      */
1:f8f24e8:     public void setTransportContext(Object transportContext) {
1:f8f24e8:         this.transportContext = transportContext;
1:05de2b1:     }
1:dc98d96: }
============================================================================
author:Timothy Bish
-------------------------------------------------------------------------------
commit:25c99a6
/////////////////////////////////////////////////////////////////////////
1:     @Override
1:     @Override
1:     @Override
1:     @Override
1:     @Override
1:     @Override
1:     @Override
1:     @Override
1:     @Override
1:     @Override
1:     @Override
1:     @Override
1:     @Override
1:     public boolean isConsumerControl() {
1:         return false;
1:     }
1: 
1:     @Override
1:     @Override
1:     @Override
1:     @Override
1:     @Override
1:     @Override
1:     @Override
1:     @Override
1:     @Override
author:Hiram Chirino
-------------------------------------------------------------------------------
commit:f731156
/////////////////////////////////////////////////////////////////////////
1:         if( !forLogging && getAction().equals(Stomp.Commands.KEEPALIVE) ) {
1:             return "\n";
1:         }
author:Hiram R. Chirino
-------------------------------------------------------------------------------
commit:c5cf038
commit:b41e1a7
/////////////////////////////////////////////////////////////////////////
1:     public static final byte[] NO_DATA = new byte[] {};
commit:933eb2f
/////////////////////////////////////////////////////////////////////////
1:     private Map<String, String> headers = new HashMap<String, String>();
1:     public StompFrame(String command, Map<String, String> headers, byte[] data) {
/////////////////////////////////////////////////////////////////////////
1:     public Map<String, String> getHeaders() {
1:     public void setHeaders(Map<String, String> headers) {
commit:ecf89a6
/////////////////////////////////////////////////////////////////////////
0:     private Map<String,String> headers = new HashMap<String,String>();
0:     public StompFrame(String command, Map<String,String> headers, byte[] data) {
/////////////////////////////////////////////////////////////////////////
0:     public Map<String,String> getHeaders() {
0:     public void setHeaders(Map<String,String> headers) {
commit:f812e34
/////////////////////////////////////////////////////////////////////////
1:  * @author <a href="http://hiramchirino.com">chirino</a>
0:     private static final byte[] NO_DATA = new byte[] {};
1:     private String action;
0:     private Map headers = Collections.EMPTY_MAP;
1:     private byte[] content = NO_DATA;
0:     public StompFrame(String command, HashMap headers, byte[] data) {
1:         this.action = command;
1:         this.headers = headers;
1:         this.content = data;
1:     }
1:     public StompFrame() {
1:     }
1:     public String getAction() {
1:         return action;
1:     }
1:     public void setAction(String command) {
1:         this.action = command;
1:     }
1:     public byte[] getContent() {
1:         return content;
1:     }
1:     public void setContent(byte[] data) {
1:         this.content = data;
1:     }
0:     public Map getHeaders() {
1:         return headers;
1:     }
0:     public void setHeaders(Map headers) {
1:         this.headers = headers;
1:     }
0:     //
0:     // Methods in the Command interface
0:     //
1:     public int getCommandId() {
1:         return 0;
1:     }
1:     public Endpoint getFrom() {
1:         return null;
1:     }
1:     public Endpoint getTo() {
1:         return null;
1:     }
1:     public boolean isBrokerInfo() {
1:         return false;
1:     }
1:     public boolean isMessage() {
1:         return false;
1:     }
1:     public boolean isMessageAck() {
1:         return false;
1:     }
1:     public boolean isMessageDispatch() {
1:         return false;
1:     }
1:     public boolean isMessageDispatchNotification() {
1:         return false;
1:     }
1:     public boolean isResponse() {
1:         return false;
1:     }
1:     public boolean isResponseRequired() {
1:         return false;
1:     }
1:     public boolean isShutdownInfo() {
1:         return false;
1:     }
1:     public boolean isWireFormatInfo() {
1:         return false;
1:     }
1:     public void setCommandId(int value) {
1:     }
1:     public void setFrom(Endpoint from) {
1:     }
1:     public void setResponseRequired(boolean responseRequired) {
1:     }
1:     public void setTo(Endpoint to) {
1:     }
1:     public Response visit(CommandVisitor visitor) throws Exception {
1:         return null;
1:     }
1:     public byte getDataStructureType() {
1:         return 0;
1:     }
1:     public boolean isMarshallAware() {
1:         return false;
1:     }
1:     public String toString() {
0:         StringBuffer buffer = new StringBuffer();
1:         buffer.append(getAction());
1:         buffer.append("\n");
0:         Map headers = getHeaders();
0:         for (Iterator iter = headers.entrySet().iterator(); iter.hasNext();) {
0:             Map.Entry entry = (Map.Entry)iter.next();
1:             buffer.append(entry.getKey());
1:             buffer.append(":");
1:             buffer.append(entry.getValue());
1:             buffer.append("\n");
1:         }
1:         buffer.append("\n");
1:         if (getContent() != null) {
1:             try {
0:                 buffer.append(new String(getContent()));
1:             } catch (Throwable e) {
1:                 buffer.append(Arrays.toString(getContent()));
1:             }
1:         }
1:         return buffer.toString();
1:     }
commit:230a86c
/////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////
1:  *      http://www.apache.org/licenses/LICENSE-2.0
commit:05de2b1
/////////////////////////////////////////////////////////////////////////
1: import java.util.Arrays;
0: import java.util.Iterator;
/////////////////////////////////////////////////////////////////////////
0: 	public String toString() {
0: 		StringBuffer buffer = new StringBuffer();
0: 		buffer.append(getAction());
0: 		buffer.append("\n");
0: 		Map headers = getHeaders();
0: 		for (Iterator iter = headers.entrySet().iterator(); iter.hasNext();) {
0: 			Map.Entry entry = (Map.Entry) iter.next();
0: 			buffer.append(entry.getKey());
0: 			buffer.append(":");
0: 			buffer.append(entry.getValue());
0: 			buffer.append("\n");
1: 		}
0: 		buffer.append("\n");
0: 		if( getContent()!=null ) {
1: 			try {
0: 				buffer.append(new String(getContent()));
0: 			} catch (Throwable e) {
0: 				buffer.append(Arrays.toString(getContent()));
1: 			}
1: 		}
0: 		return buffer.toString();
1: 	}
commit:57b4941
/////////////////////////////////////////////////////////////////////////
1:  * Licensed to the Apache Software Foundation (ASF) under one or more
1:  * contributor license agreements.  See the NOTICE file distributed with
1:  * this work for additional information regarding copyright ownership.
1:  * The ASF licenses this file to You under the Apache License, Version 2.0
1:  * (the "License"); you may not use this file except in compliance with
1:  * the License.  You may obtain a copy of the License at
commit:98b61e4
/////////////////////////////////////////////////////////////////////////
1: package org.apache.activemq.transport.stomp;
commit:530884a
/////////////////////////////////////////////////////////////////////////
1: public class StompFrame implements Command {
/////////////////////////////////////////////////////////////////////////
0: 	public StompFrame(String command, HashMap headers, byte[] data) {
0: 	public StompFrame() {
commit:dc98d96
/////////////////////////////////////////////////////////////////////////
1: /**
1:  *
0:  * Copyright 2005-2006 The Apache Software Foundation
1:  *
0:  * Licensed under the Apache License, Version 2.0 (the "License");
0:  * you may not use this file except in compliance with the License.
0:  * You may obtain a copy of the License at
1:  *
0:  * http://www.apache.org/licenses/LICENSE-2.0
1:  *
1:  * Unless required by applicable law or agreed to in writing, software
1:  * distributed under the License is distributed on an "AS IS" BASIS,
1:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:  * See the License for the specific language governing permissions and
1:  * limitations under the License.
1:  */
0: package org.apache.activemq.transport.stomp2;
1: 
0: import java.util.Collections;
1: import java.util.HashMap;
1: import java.util.Map;
1: 
1: import org.apache.activemq.command.Command;
1: import org.apache.activemq.command.Endpoint;
1: import org.apache.activemq.command.Response;
1: import org.apache.activemq.state.CommandVisitor;
1: 
1: /**
1:  * Represents all the data in a STOMP frame.
1:  * 
0:  * @author <a href="http://hiramchirino.com">chirino</a> 
1:  */
0: public class StompCommand implements Command {
1: 
0:     private static final byte[] NO_DATA = new byte[]{};
1: 
0: 	private String action;
0: 	private Map headers = Collections.EMPTY_MAP;
0: 	private byte[] content = NO_DATA;
1: 
0: 	public StompCommand(String command, HashMap headers, byte[] data) {
0: 		this.action = command;
0: 		this.headers = headers;
0: 		this.content = data;
1: 	}
1: 
0: 	public StompCommand() {
1: 	}
1: 
0: 	public String getAction() {
0: 		return action;
1: 	}
1: 
0: 	public void setAction(String command) {
0: 		this.action = command;
1: 	}
1: 
0: 	public byte[] getContent() {
0: 		return content;
1: 	}
1: 
0: 	public void setContent(byte[] data) {
0: 		this.content = data;
1: 	}
1: 
0: 	public Map getHeaders() {
0: 		return headers;
1: 	}
1: 
0: 	public void setHeaders(Map headers) {
0: 		this.headers = headers;
1: 	}
1: 
0: 	//
0: 	// Methods in the Command interface
0: 	//
0: 	public int getCommandId() {
0: 		return 0;
1: 	}
1: 
0: 	public Endpoint getFrom() {
0: 		return null;
1: 	}
1: 
0: 	public Endpoint getTo() {
0: 		return null;
1: 	}
1: 
0: 	public boolean isBrokerInfo() {
1: 		return false;
1: 	}
1: 
0: 	public boolean isMessage() {
1: 		return false;
1: 	}
1: 
0: 	public boolean isMessageAck() {
1: 		return false;
1: 	}
1: 
0: 	public boolean isMessageDispatch() {
1: 		return false;
1: 	}
1: 
0: 	public boolean isMessageDispatchNotification() {
1: 		return false;
1: 	}
1: 
0: 	public boolean isResponse() {
1: 		return false;
1: 	}
1: 
0: 	public boolean isResponseRequired() {
1: 		return false;
1: 	}
1: 
0: 	public boolean isShutdownInfo() {
1: 		return false;
1: 	}
1: 
0: 	public boolean isWireFormatInfo() {
1: 		return false;
1: 	}
1: 
0: 	public void setCommandId(int value) {
1: 	}
1: 
0: 	public void setFrom(Endpoint from) {
1: 	}
1: 
0: 	public void setResponseRequired(boolean responseRequired) {
1: 	}
1: 
0: 	public void setTo(Endpoint to) {
1: 	}
1: 
0: 	public Response visit(CommandVisitor visitor) throws Exception {
0: 		return null;
1: 	}
1: 
0: 	public byte getDataStructureType() {
0: 		return 0;
1: 	}
1: 
0: 	public boolean isMarshallAware() {
1: 		return false;
1: 	}
1: 
1: }
author:Timothy A. Bish
-------------------------------------------------------------------------------
commit:f8f24e8
/////////////////////////////////////////////////////////////////////////
1:     private transient Object transportContext = null;
1: 
/////////////////////////////////////////////////////////////////////////
1: 
1:     /**
1:      * Transports may wish to associate additional data with the connection. For
1:      * example, an SSL transport may use this field to attach the client
1:      * certificates used when the connection was established.
0:      *
1:      * @return the transport context.
1:      */
1:     public Object getTransportContext() {
1:         return transportContext;
0:     }
1: 
1:     /**
1:      * Transports may wish to associate additional data with the connection. For
1:      * example, an SSL transport may use this field to attach the client
1:      * certificates used when the connection was established.
0:      *
1:      * @param transportContext value used to set the transport context
1:      */
1:     public void setTransportContext(Object transportContext) {
1:         this.transportContext = transportContext;
0:     }
commit:0885c60
/////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////
1:         StringBuilder buffer = new StringBuilder();
1:         Map<String, String> headers = getHeaders();
1:         for (Map.Entry<String, String> entry : headers.entrySet()) {
commit:8fd00fa
/////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////
0:  *
/////////////////////////////////////////////////////////////////////////
1:         this(command, null, null);
1: 
1:         this(command, headers, null);
0:     }
1: 
0:             this.headers = headers;
0:             this.content = data;
1: 
/////////////////////////////////////////////////////////////////////////
1: 
0:         try {
1:             return new String(content, "UTF-8");
1:         } catch (UnsupportedEncodingException e) {
1:             return new String(content);
0:         }
/////////////////////////////////////////////////////////////////////////
1: 
/////////////////////////////////////////////////////////////////////////
0:     public String marshal() {
0:         return toString(false);
0:     }
1: 
0:         return toString(true);
0:     }
1: 
0:     private String toString(boolean hidePasscode) {
0:         Map<String, String> headers = getHeaders();
0:         for (Iterator<Map.Entry<String,String>> iter = headers.entrySet().iterator(); iter.hasNext();) {
0:             Map.Entry<String, String> entry = (Map.Entry<String,String>)iter.next();
0:             if (hidePasscode && entry.getKey().toString().toLowerCase().contains(Stomp.Headers.Connect.PASSCODE)) {
author:Claus Ibsen
-------------------------------------------------------------------------------
commit:4b44d31
/////////////////////////////////////////////////////////////////////////
1: import java.util.Locale;
/////////////////////////////////////////////////////////////////////////
1:             if (forLogging && entry.getKey().toString().toLowerCase(Locale.ENGLISH).contains(Stomp.Headers.Connect.PASSCODE)) {
author:Gary Tully
-------------------------------------------------------------------------------
commit:93a379f
/////////////////////////////////////////////////////////////////////////
1:         // terminate the frame
1:         buffer.append('\u0000');
commit:d618ab3
/////////////////////////////////////////////////////////////////////////
1: import org.apache.activemq.util.MarshallingSupport;
/////////////////////////////////////////////////////////////////////////
1:         return format(true);
1:     public String format() {
1:         return format(false);
0:     }
0: 
1:     public String format(boolean forLogging) {
0:         Map headers = getHeaders();
0:         for (Iterator iter = headers.entrySet().iterator(); iter.hasNext();) {
0:             Map.Entry entry = (Map.Entry)iter.next();
0:             if (forLogging && entry.getKey().toString().toLowerCase().contains(Stomp.Headers.Connect.PASSCODE)) {
/////////////////////////////////////////////////////////////////////////
1:                 String contentString = new String(getContent(), "UTF-8");
1:                 if (forLogging) {
1:                     contentString = MarshallingSupport.truncate64(contentString);
0:                 }
1:                 buffer.append(contentString);
commit:400990f
/////////////////////////////////////////////////////////////////////////
0:             if (entry.getKey().toString().toLowerCase().contains(Stomp.Headers.Connect.PASSCODE)) {
1:                 buffer.append("*****");
1:             } else {
0:                 buffer.append(entry.getValue());
0:             }
author:Bosanac Dejan
-------------------------------------------------------------------------------
commit:b53e4b5
/////////////////////////////////////////////////////////////////////////
1: import java.io.UnsupportedEncodingException;
/////////////////////////////////////////////////////////////////////////
0:     	try {
0:     		return new String(content, "UTF-8");
0:     	} catch (UnsupportedEncodingException e) {
0:     		return new String(content);
0:     	}
commit:684f5df
/////////////////////////////////////////////////////////////////////////
0:                 buffer.append(new String(getContent(), "UTF-8"));
commit:da98de0
/////////////////////////////////////////////////////////////////////////
1:     public StompFrame(String command) {
0:     	this(command, null, null);
0:     }
0:     
1:     public StompFrame(String command, Map<String, String> headers) {
0:     	this(command, headers, null);
0:     }    
0:     
1:         if (headers != null)
0:         	this.headers = headers;
1:         if (data != null)
0:         	this.content = data;
0:     
/////////////////////////////////////////////////////////////////////////
0:     
1:     public String getBody() {
0:     	return new String(content);
0:     }
author:Robert Davies
-------------------------------------------------------------------------------
commit:f392884
/////////////////////////////////////////////////////////////////////////
0:     
1:     public boolean isConnectionControl() {
0:         return false;
0:     }
============================================================================