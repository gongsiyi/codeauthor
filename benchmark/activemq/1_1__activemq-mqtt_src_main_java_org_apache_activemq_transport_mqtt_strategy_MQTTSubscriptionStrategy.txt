1:413e484: /**
1:413e484:  * Licensed to the Apache Software Foundation (ASF) under one or more
1:413e484:  * contributor license agreements.  See the NOTICE file distributed with
1:413e484:  * this work for additional information regarding copyright ownership.
1:413e484:  * The ASF licenses this file to You under the Apache License, Version 2.0
1:413e484:  * (the "License"); you may not use this file except in compliance with
1:413e484:  * the License.  You may obtain a copy of the License at
1:413e484:  *
1:413e484:  *      http://www.apache.org/licenses/LICENSE-2.0
1:413e484:  *
1:413e484:  * Unless required by applicable law or agreed to in writing, software
1:413e484:  * distributed under the License is distributed on an "AS IS" BASIS,
1:413e484:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:413e484:  * See the License for the specific language governing permissions and
1:413e484:  * limitations under the License.
1:413e484:  */
1:413e484: package org.apache.activemq.transport.mqtt.strategy;
1:413e484: 
1:413e484: import org.apache.activemq.command.ActiveMQDestination;
1:ec049a0: import org.apache.activemq.command.ConsumerId;
1:413e484: import org.apache.activemq.transport.mqtt.MQTTProtocolConverter;
1:413e484: import org.apache.activemq.transport.mqtt.MQTTProtocolException;
1:413e484: import org.apache.activemq.transport.mqtt.MQTTSubscription;
1:413e484: import org.fusesource.mqtt.client.QoS;
1:ec049a0: import org.fusesource.mqtt.client.Topic;
1:413e484: import org.fusesource.mqtt.codec.CONNECT;
1:413e484: 
1:413e484: /**
1:413e484:  * Subscription management strategy used to control how MQTT clients
1:413e484:  * subscribe to destination and how messages are addressed in order to
1:413e484:  * arrive on the appropriate destinations.
1:413e484:  */
1:413e484: public interface MQTTSubscriptionStrategy {
1:413e484: 
1:413e484:     /**
1:413e484:      * Initialize the strategy before first use.
1:413e484:      *
1:413e484:      * @param protocol
1:413e484:      *        the MQTTProtocolConverter that is initializing the strategy
1:413e484:      *
1:413e484:      * @throws MQTTProtocolException if an error occurs during initialization.
1:413e484:      */
1:413e484:     public void initialize(MQTTProtocolConverter protocol) throws MQTTProtocolException;
1:413e484: 
1:413e484:     /**
1:413e484:      * Allows the strategy to perform any needed actions on client connect
1:413e484:      * prior to the CONNACK frame being sent back such as recovering old
1:413e484:      * subscriptions and performing any clean session actions.
1:413e484:      *
1:413e484:      * @throws MQTTProtocolException if an error occurs while processing the connect actions.
1:413e484:      */
1:413e484:     public void onConnect(CONNECT connect) throws MQTTProtocolException;
1:413e484: 
1:413e484:     /**
1:ec049a0:      * Called for each Topic that a client requests to subscribe to.  The strategy needs
1:ec049a0:      * check each Topic for duplicate subscription requests and change of QoS state.
1:ec049a0:      *
1:ec049a0:      * @param topic
1:ec049a0:      *        the MQTT Topic instance being subscribed to.
1:ec049a0:      *
1:ec049a0:      * @return the assigned QoS value given to the new subscription.
1:ec049a0:      *
1:ec049a0:      * @throws MQTTProtocolException if an error occurs while processing the subscribe actions.
1:ec049a0:      */
1:ec049a0:     public byte onSubscribe(Topic topic) throws MQTTProtocolException;
1:ec049a0: 
1:ec049a0:     /**
1:413e484:      * Called when a new Subscription is being requested.  This method allows the
1:413e484:      * strategy to create a specific type of subscription for the client such as
1:413e484:      * mapping topic subscriptions to Queues etc.
1:413e484:      *
1:413e484:      * @param topicName
1:413e484:      *        the requested Topic name to subscribe to.
1:413e484:      * @param requestedQoS
1:413e484:      *        the QoS level that the client has requested for this subscription.
1:413e484:      *
1:413e484:      * @return the assigned QoS value given to the new subscription
1:413e484:      *
1:413e484:      * @throws MQTTProtocolException if an error occurs while processing the subscribe actions.
1:413e484:      */
1:413e484:     public byte onSubscribe(String topicName, QoS requestedQoS) throws MQTTProtocolException;
1:413e484: 
1:413e484:     /**
1:413e484:      * Called when a client sends a duplicate subscribe request which should
1:413e484:      * force any retained messages on that topic to be replayed again as though
1:413e484:      * the client had just subscribed for the first time.  The method should
1:413e484:      * not unsubscribe the client as it might miss messages sent while the
1:413e484:      * subscription is being recreated.
1:413e484:      *
2:413e484:      * @param subscription
1:413e484:      *        the MQTTSubscription that contains the subscription state.
1:413e484:      */
1:413e484:     public void onReSubscribe(MQTTSubscription subscription) throws MQTTProtocolException;
1:413e484: 
1:413e484:     /**
1:413e484:      * Called when a client requests an un-subscribe a previous subscription.
1:413e484:      *
1:ec049a0:      * @param topicName
1:ec049a0:      *        the name of the Topic the client wishes to unsubscribe from.
1:413e484:      *
1:413e484:      * @throws MQTTProtocolException if an error occurs during the un-subscribe processing.
1:413e484:      */
1:ec049a0:     public void onUnSubscribe(String topicName) throws MQTTProtocolException;
1:413e484: 
1:413e484:     /**
1:413e484:      * Intercepts PUBLISH operations from the client and allows the strategy to map the
1:413e484:      * target destination so that the send operation will land in the destinations that
1:413e484:      * this strategy has mapped the incoming subscribe requests to.
1:413e484:      *
1:413e484:      * @param topicName
1:413e484:      *        the targeted Topic that the client sent the message to.
1:413e484:      *
1:413e484:      * @return an ActiveMQ Topic instance that lands the send in the correct destinations.
1:413e484:      */
1:413e484:     public ActiveMQDestination onSend(String topicName);
1:413e484: 
1:413e484:     /**
1:413e484:      * Intercepts send operations from the broker and allows the strategy to map the
1:413e484:      * target topic name so that the client sees a valid Topic name.
1:413e484:      *
1:413e484:      * @param destination
1:413e484:      *        the destination that the message was dispatched from
1:413e484:      *
1:413e484:      * @return an Topic name that is valid for the receiving client.
1:413e484:      */
1:413e484:     public String onSend(ActiveMQDestination destination);
1:413e484: 
1:413e484:     /**
1:413e484:      * Allows the protocol handler to interrogate an destination name to determine if it
1:413e484:      * is equivalent to the MQTT control topic (starts with $).  Since the mapped destinations
1:413e484:      * that the strategy might alter the naming scheme the strategy must provide a way to
1:413e484:      * reverse map and determine if the destination was originally an MQTT control topic.
1:413e484:      *
1:413e484:      * @param destination
1:413e484:      *        the destination to query.
1:413e484:      *
1:413e484:      * @return true if the destination is an MQTT control topic.
1:413e484:      */
1:413e484:     public boolean isControlTopic(ActiveMQDestination destination);
1:413e484: 
1:413e484:     /**
1:413e484:      * Sets the {@link MQTTProtocolConverter} that is the parent of this strategy object.
1:413e484:      *
1:413e484:      * @param parent
1:413e484:      *        the {@link MQTTProtocolConverter} that owns this strategy.
1:413e484:      */
1:413e484:     public void setProtocolConverter(MQTTProtocolConverter parent);
1:413e484: 
1:413e484:     /**
1:413e484:      * @return the {@link MQTTProtocolConverter} that owns this strategy.
1:413e484:      */
1:413e484:     public MQTTProtocolConverter getProtocolConverter();
1:413e484: 
1:ec049a0:     /**
1:ec049a0:      * Lookup an {@link MQTTSubscription} instance based on known {@link ConsumerId} value.
1:ec049a0:      *
1:ec049a0:      * @param consumer
1:ec049a0:      *        the consumer ID to lookup.
1:ec049a0:      *
1:ec049a0:      * @return the {@link MQTTSubscription} for the consumer or null if no subscription exists.
1:ec049a0:      */
1:ec049a0:     public MQTTSubscription getSubscription(ConsumerId consumer);
1:ec049a0: 
1:413e484: }
============================================================================
author:Timothy Bish
-------------------------------------------------------------------------------
commit:ec049a0
/////////////////////////////////////////////////////////////////////////
1: import org.apache.activemq.command.ConsumerId;
1: import org.fusesource.mqtt.client.Topic;
/////////////////////////////////////////////////////////////////////////
1:      * Called for each Topic that a client requests to subscribe to.  The strategy needs
1:      * check each Topic for duplicate subscription requests and change of QoS state.
1:      *
1:      * @param topic
1:      *        the MQTT Topic instance being subscribed to.
1:      *
1:      * @return the assigned QoS value given to the new subscription.
1:      *
1:      * @throws MQTTProtocolException if an error occurs while processing the subscribe actions.
1:      */
1:     public byte onSubscribe(Topic topic) throws MQTTProtocolException;
1: 
1:     /**
/////////////////////////////////////////////////////////////////////////
1:      * @param topicName
1:      *        the name of the Topic the client wishes to unsubscribe from.
1:     public void onUnSubscribe(String topicName) throws MQTTProtocolException;
/////////////////////////////////////////////////////////////////////////
1:     /**
1:      * Lookup an {@link MQTTSubscription} instance based on known {@link ConsumerId} value.
1:      *
1:      * @param consumer
1:      *        the consumer ID to lookup.
1:      *
1:      * @return the {@link MQTTSubscription} for the consumer or null if no subscription exists.
1:      */
1:     public MQTTSubscription getSubscription(ConsumerId consumer);
1: 
commit:413e484
/////////////////////////////////////////////////////////////////////////
1: /**
1:  * Licensed to the Apache Software Foundation (ASF) under one or more
1:  * contributor license agreements.  See the NOTICE file distributed with
1:  * this work for additional information regarding copyright ownership.
1:  * The ASF licenses this file to You under the Apache License, Version 2.0
1:  * (the "License"); you may not use this file except in compliance with
1:  * the License.  You may obtain a copy of the License at
1:  *
1:  *      http://www.apache.org/licenses/LICENSE-2.0
1:  *
1:  * Unless required by applicable law or agreed to in writing, software
1:  * distributed under the License is distributed on an "AS IS" BASIS,
1:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:  * See the License for the specific language governing permissions and
1:  * limitations under the License.
1:  */
1: package org.apache.activemq.transport.mqtt.strategy;
1: 
1: import org.apache.activemq.command.ActiveMQDestination;
1: import org.apache.activemq.transport.mqtt.MQTTProtocolConverter;
1: import org.apache.activemq.transport.mqtt.MQTTProtocolException;
1: import org.apache.activemq.transport.mqtt.MQTTSubscription;
1: import org.fusesource.mqtt.client.QoS;
1: import org.fusesource.mqtt.codec.CONNECT;
1: 
1: /**
1:  * Subscription management strategy used to control how MQTT clients
1:  * subscribe to destination and how messages are addressed in order to
1:  * arrive on the appropriate destinations.
1:  */
1: public interface MQTTSubscriptionStrategy {
1: 
1:     /**
1:      * Initialize the strategy before first use.
1:      *
1:      * @param protocol
1:      *        the MQTTProtocolConverter that is initializing the strategy
1:      *
1:      * @throws MQTTProtocolException if an error occurs during initialization.
1:      */
1:     public void initialize(MQTTProtocolConverter protocol) throws MQTTProtocolException;
1: 
1:     /**
1:      * Allows the strategy to perform any needed actions on client connect
1:      * prior to the CONNACK frame being sent back such as recovering old
1:      * subscriptions and performing any clean session actions.
1:      *
1:      * @throws MQTTProtocolException if an error occurs while processing the connect actions.
1:      */
1:     public void onConnect(CONNECT connect) throws MQTTProtocolException;
1: 
1:     /**
1:      * Called when a new Subscription is being requested.  This method allows the
1:      * strategy to create a specific type of subscription for the client such as
1:      * mapping topic subscriptions to Queues etc.
1:      *
1:      * @param topicName
1:      *        the requested Topic name to subscribe to.
1:      * @param requestedQoS
1:      *        the QoS level that the client has requested for this subscription.
1:      *
1:      * @return the assigned QoS value given to the new subscription
1:      *
1:      * @throws MQTTProtocolException if an error occurs while processing the subscribe actions.
1:      */
1:     public byte onSubscribe(String topicName, QoS requestedQoS) throws MQTTProtocolException;
1: 
1:     /**
1:      * Called when a client sends a duplicate subscribe request which should
1:      * force any retained messages on that topic to be replayed again as though
1:      * the client had just subscribed for the first time.  The method should
1:      * not unsubscribe the client as it might miss messages sent while the
1:      * subscription is being recreated.
1:      *
1:      * @param subscription
1:      *        the MQTTSubscription that contains the subscription state.
1:      */
1:     public void onReSubscribe(MQTTSubscription subscription) throws MQTTProtocolException;
1: 
1:     /**
1:      * Called when a client requests an un-subscribe a previous subscription.
1:      *
1:      * @param subscription
0:      *        the {@link MQTTSubscription} that is being removed.
1:      *
1:      * @throws MQTTProtocolException if an error occurs during the un-subscribe processing.
1:      */
0:     public void onUnSubscribe(MQTTSubscription subscription) throws MQTTProtocolException;
1: 
1:     /**
1:      * Intercepts PUBLISH operations from the client and allows the strategy to map the
1:      * target destination so that the send operation will land in the destinations that
1:      * this strategy has mapped the incoming subscribe requests to.
1:      *
1:      * @param topicName
1:      *        the targeted Topic that the client sent the message to.
1:      *
1:      * @return an ActiveMQ Topic instance that lands the send in the correct destinations.
1:      */
1:     public ActiveMQDestination onSend(String topicName);
1: 
1:     /**
1:      * Intercepts send operations from the broker and allows the strategy to map the
1:      * target topic name so that the client sees a valid Topic name.
1:      *
1:      * @param destination
1:      *        the destination that the message was dispatched from
1:      *
1:      * @return an Topic name that is valid for the receiving client.
1:      */
1:     public String onSend(ActiveMQDestination destination);
1: 
1:     /**
1:      * Allows the protocol handler to interrogate an destination name to determine if it
1:      * is equivalent to the MQTT control topic (starts with $).  Since the mapped destinations
1:      * that the strategy might alter the naming scheme the strategy must provide a way to
1:      * reverse map and determine if the destination was originally an MQTT control topic.
1:      *
1:      * @param destination
1:      *        the destination to query.
1:      *
1:      * @return true if the destination is an MQTT control topic.
1:      */
1:     public boolean isControlTopic(ActiveMQDestination destination);
1: 
1:     /**
1:      * Sets the {@link MQTTProtocolConverter} that is the parent of this strategy object.
1:      *
1:      * @param parent
1:      *        the {@link MQTTProtocolConverter} that owns this strategy.
1:      */
1:     public void setProtocolConverter(MQTTProtocolConverter parent);
1: 
1:     /**
1:      * @return the {@link MQTTProtocolConverter} that owns this strategy.
1:      */
1:     public MQTTProtocolConverter getProtocolConverter();
1: 
1: }
============================================================================