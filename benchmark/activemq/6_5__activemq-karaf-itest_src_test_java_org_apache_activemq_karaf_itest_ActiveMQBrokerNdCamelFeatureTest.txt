1:b65fd27: /**
1:b65fd27:  * Licensed to the Apache Software Foundation (ASF) under one or more
1:b65fd27:  * contributor license agreements.  See the NOTICE file distributed with
1:b65fd27:  * this work for additional information regarding copyright ownership.
1:b65fd27:  * The ASF licenses this file to You under the Apache License, Version 2.0
1:b65fd27:  * (the "License"); you may not use this file except in compliance with
1:b65fd27:  * the License.  You may obtain a copy of the License at
1:b65fd27:  *
1:b65fd27:  *      http://www.apache.org/licenses/LICENSE-2.0
1:b65fd27:  *
1:b65fd27:  * Unless required by applicable law or agreed to in writing, software
1:b65fd27:  * distributed under the License is distributed on an "AS IS" BASIS,
1:b65fd27:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:b65fd27:  * See the License for the specific language governing permissions and
1:b65fd27:  * limitations under the License.
1:b65fd27:  */
1:b65fd27: package org.apache.activemq.karaf.itest;
13:b65fd27: 
1:25f18ad: import java.io.File;
1:0f492f3: 
1:b65fd27: import org.junit.Test;
1:b65fd27: import org.junit.runner.RunWith;
1:b65fd27: import org.ops4j.pax.exam.Option;
1:9743dbd: import org.ops4j.pax.exam.Configuration;
1:9743dbd: import org.ops4j.pax.exam.junit.PaxExam;
1:b65fd27: 
1:b65fd27: import static org.junit.Assert.assertEquals;
1:b65fd27: import static org.junit.Assert.assertTrue;
1:4dd3aa4: import static org.ops4j.pax.exam.CoreOptions.composite;
1:25f18ad: import static org.ops4j.pax.exam.karaf.options.KarafDistributionOption.editConfigurationFilePut;
1:4dd3aa4: import static org.ops4j.pax.exam.karaf.options.KarafDistributionOption.replaceConfigurationFile;
1:25f18ad: 
1:6c2ce67: @RunWith(PaxExam.class)
1:50ea308: public class ActiveMQBrokerNdCamelFeatureTest extends AbstractFeatureTest {
1:25f18ad: 
1:b65fd27:     @Configuration
1:b65fd27:     public static Option[] configure() {
1:4dd3aa4:         return new Option[] //
1:4dd3aa4:         {
1:4dd3aa4:          composite(configure("activemq", "activemq-camel")),
1:4dd3aa4:          editConfigurationFilePut("etc/system.properties", "camel.version", camelVersion()),
1:4dd3aa4:          replaceConfigurationFile("etc/activemq.xml", new File(RESOURCE_BASE + "activemq-nd-camel.xml")),
1:4dd3aa4:          replaceConfigurationFile("etc/org.apache.activemq.server-default.cfg", new File(RESOURCE_BASE + "org.apache.activemq.server-default.cfg"))
1:4dd3aa4:         };
1:25f18ad:     }
1:25f18ad: 
1:b70fc9a:     @Test(timeout = 2 * 60 * 1000)
1:b65fd27:     public void test() throws Throwable {
1:4dd3aa4:         System.err.println(executeCommand("feature:list -i").trim());
1:25f18ad:         assertFeatureInstalled("activemq");
1:50ea308:         assertBrokerStarted();
1:4dd3aa4:         withinReason(new Runnable() {
1:4dd3aa4:             public void run() {
1:4dd3aa4:                 getBundle("org.apache.activemq.activemq-camel");
1:25f18ad:                 assertTrue("we have camel consumers", executeCommand("activemq:dstat").trim().contains("camel_in"));
1:25f18ad:             }
1:25f18ad:         });
1:25f18ad: 
1:b65fd27:         // produce and consume
1:50ea308:         JMSTester jms = new JMSTester();
1:50ea308:         jms.produceMessage("camel_in");
1:50ea308:         assertEquals("got our message", "camel_in", jms.consumeMessage("camel_out"));
1:50ea308:         jms.close();
6:b65fd27:     }
1:b65fd27: }
============================================================================
author:Christian Schneider
-------------------------------------------------------------------------------
commit:50ea308
/////////////////////////////////////////////////////////////////////////
1: public class ActiveMQBrokerNdCamelFeatureTest extends AbstractFeatureTest {
/////////////////////////////////////////////////////////////////////////
1:         assertBrokerStarted();
1:         JMSTester jms = new JMSTester();
1:         jms.produceMessage("camel_in");
1:         assertEquals("got our message", "camel_in", jms.consumeMessage("camel_out"));
1:         jms.close();
commit:4dd3aa4
/////////////////////////////////////////////////////////////////////////
1: import static org.ops4j.pax.exam.CoreOptions.composite;
1: import static org.ops4j.pax.exam.karaf.options.KarafDistributionOption.replaceConfigurationFile;
1:         return new Option[] //
1:         {
1:          composite(configure("activemq", "activemq-camel")),
1:          editConfigurationFilePut("etc/system.properties", "camel.version", camelVersion()),
1:          replaceConfigurationFile("etc/activemq.xml", new File(RESOURCE_BASE + "activemq-nd-camel.xml")),
1:          replaceConfigurationFile("etc/org.apache.activemq.server-default.cfg", new File(RESOURCE_BASE + "org.apache.activemq.server-default.cfg"))
1:         };
1:         System.err.println(executeCommand("feature:list -i").trim());
1:         withinReason(new Runnable() {
1:             public void run() {
1:                 getBundle("org.apache.activemq.activemq-camel");
commit:b0884f8
/////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////
author:Christopher L. Shannon (cshannon)
-------------------------------------------------------------------------------
commit:6c2ce67
/////////////////////////////////////////////////////////////////////////
1: @RunWith(PaxExam.class)
commit:28e4090
/////////////////////////////////////////////////////////////////////////
0: //@RunWith(PaxExam.class)
0: @Ignore
commit:0f492f3
/////////////////////////////////////////////////////////////////////////
1: 
0: import org.apache.karaf.features.Feature;
/////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////
0:                 configure("activemq", "activemq-camel"));
0:         System.err.println(executeCommand("feature:list").trim());
0:         assertTrue("activemq-camel bundle installed", verifyBundleInstalled("org.apache.activemq.activemq-camel"));
author:gtully
-------------------------------------------------------------------------------
commit:3a6d67e
/////////////////////////////////////////////////////////////////////////
commit:25f18ad
/////////////////////////////////////////////////////////////////////////
1: import java.io.File;
0: import java.util.Date;
0: import org.junit.Ignore;
/////////////////////////////////////////////////////////////////////////
1: import static org.ops4j.pax.exam.karaf.options.KarafDistributionOption.editConfigurationFilePut;
0: import static org.ops4j.pax.exam.karaf.options.KarafDistributionOption.replaceConfigurationFile;
0:         return append(
0:                 editConfigurationFilePut("etc/system.properties", "camel.version", MavenUtils.getArtifactVersion("org.apache.camel.karaf", "apache-camel")),
0:                 configure("activemq"));
0:     @Ignore("java.lang.IllegalArgumentException: BundleContext must be specified - needs investigation")
1:         assertFeatureInstalled("activemq");
1: 
0:         executeCommand("features:addurl " + getCamelFeatureUrl());
0:         installAndAssertFeature("activemq-camel");
1: 
0:         withinReason(new Callable<Boolean>() {
0:             @Override
0:             public Boolean call() throws Exception {
0:                 assertTrue("activemq-camel bundle installed", verifyBundleInstalled("org.apache.activemq.activemq-camel"));
0:                 return true;
1:             }
1:         });
1: 
0:         // start broker with embedded camel route
0:         String karafDir = System.getProperty("karaf.base");
0:         File target = new File(karafDir + "/etc/activemq.xml");
0:         copyFile(new File(basedir + "/../../../src/test/resources/org/apache/activemq/karaf/itest/activemq-nd-camel.xml"), target);
0:         target = new File(karafDir + "/etc/org.apache.activemq.server-default.cfg");
0:         copyFile(new File(basedir + "/../../../src/test/resources/org/apache/activemq/karaf/itest/org.apache.activemq.server-default.cfg"), target);
1: 
/////////////////////////////////////////////////////////////////////////
0:         withinReason(new Callable<Boolean>(){
0:             @Override
0:             public Boolean call() throws Exception {
1:                 assertTrue("we have camel consumers", executeCommand("activemq:dstat").trim().contains("camel_in"));
0:                 return true;
1:             }
0:         });
commit:9743dbd
/////////////////////////////////////////////////////////////////////////
1: import org.ops4j.pax.exam.Configuration;
1: import org.ops4j.pax.exam.junit.PaxExam;
0: import static org.ops4j.pax.exam.karaf.options.KarafDistributionOption.features;
0: @RunWith(PaxExam.class)
0:         return configureBrokerStart(append(features(getCamelFeatureUrl(
author:Kevin Earls
-------------------------------------------------------------------------------
commit:b70fc9a
/////////////////////////////////////////////////////////////////////////
1:     @Test(timeout = 2 * 60 * 1000)
author:Dejan Bosanac
-------------------------------------------------------------------------------
commit:26c41d0
/////////////////////////////////////////////////////////////////////////
0:         Option[] baseOptions = configure("activemq", "activemq-camel");
/////////////////////////////////////////////////////////////////////////
0:         System.err.println(executeCommand("osgi:list").trim());
author:Gary Tully
-------------------------------------------------------------------------------
commit:14a9381
/////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////
0: public class ActiveMQBrokerNdCamelFeatureTest extends AbstractJmsFeatureTest {
/////////////////////////////////////////////////////////////////////////
commit:b65fd27
/////////////////////////////////////////////////////////////////////////
1: /**
1:  * Licensed to the Apache Software Foundation (ASF) under one or more
1:  * contributor license agreements.  See the NOTICE file distributed with
1:  * this work for additional information regarding copyright ownership.
1:  * The ASF licenses this file to You under the Apache License, Version 2.0
1:  * (the "License"); you may not use this file except in compliance with
1:  * the License.  You may obtain a copy of the License at
1:  *
1:  *      http://www.apache.org/licenses/LICENSE-2.0
1:  *
1:  * Unless required by applicable law or agreed to in writing, software
1:  * distributed under the License is distributed on an "AS IS" BASIS,
1:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:  * See the License for the specific language governing permissions and
1:  * limitations under the License.
1:  */
1: package org.apache.activemq.karaf.itest;
1: 
0: import java.util.concurrent.Callable;
0: import javax.jms.Connection;
0: import javax.jms.MessageConsumer;
0: import javax.jms.Session;
0: import javax.jms.TextMessage;
0: import org.apache.activemq.ActiveMQConnectionFactory;
1: import org.junit.Test;
1: import org.junit.runner.RunWith;
0: import org.ops4j.pax.exam.MavenUtils;
1: import org.ops4j.pax.exam.Option;
0: import org.ops4j.pax.exam.junit.Configuration;
0: import org.ops4j.pax.exam.junit.JUnit4TestRunner;
1: 
1: 
1: import static org.junit.Assert.assertEquals;
1: import static org.junit.Assert.assertTrue;
0: import static org.openengsb.labs.paxexam.karaf.options.KarafDistributionOption.editConfigurationFilePut;
0: import static org.ops4j.pax.exam.CoreOptions.scanFeatures;
1: 
0: @RunWith(JUnit4TestRunner.class)
0: public class ActiveMQBrokerNdCamelFeatureTest extends AbstractFeatureTest {
1: 
1:     @Configuration
1:     public static Option[] configure() {
0:         Option[] baseOptions = configure("activemq");
0:         return configureBrokerStart(append(scanFeatures(getCamelFeatureUrl(
0:                 MavenUtils.getArtifactVersion("org.apache.camel.karaf", "apache-camel")
0:         ), "activemq-camel"), baseOptions), "activemq-nd-camel");
1:     }
1: 
0:     @Test
1:     public void test() throws Throwable {
0:         System.err.println(executeCommand("features:list").trim());
1: 
0:         withinReason(new Callable<Boolean>() {
0:             @Override
0:             public Boolean call() throws Exception {
0:                 assertEquals("brokerName = amq-broker", executeCommand("activemq:list").trim());
0:                 return true;
1:             }
0:         });
1: 
1: 
0:         withinReason(new Callable<Boolean>(){
0:             @Override
0:             public Boolean call() throws Exception {
0:                 assertTrue(executeCommand("activemq:bstat").trim().contains("BrokerName = amq-broker"));
0:                 return true;
1:             }
0:         });
1: 
0:         System.err.println(executeCommand("activemq:bstat").trim());
1: 
1:         // produce and consume
0:         final String nameAndPayload = String.valueOf(System.currentTimeMillis());
0:         produceMessage("camel_in");
0:         assertEquals("got our message", "camel_in", consumeMessage("camel_out"));
1:     }
1: 
0:     protected String consumeMessage(String nameAndPayload) throws Exception {
0:         ActiveMQConnectionFactory factory = new ActiveMQConnectionFactory();
0:         Connection connection = factory.createConnection(USER,PASSWORD);
0:         connection.start();
0:         Session session = connection.createSession(false, Session.AUTO_ACKNOWLEDGE);
0:         MessageConsumer consumer = session.createConsumer(session.createQueue(nameAndPayload));
0:         TextMessage message = (TextMessage) consumer.receive(10000);
0:         System.err.println("message: " + message);
0:         connection.close();
0:         return message.getText();
1:     }
1: 
0:     protected void produceMessage(String nameAndPayload) throws Exception {
0:         ActiveMQConnectionFactory factory = new ActiveMQConnectionFactory();
0:         Connection connection = factory.createConnection(USER,PASSWORD);
0:         connection.start();
0:         Session session = connection.createSession(false, Session.AUTO_ACKNOWLEDGE);
0:         session.createProducer(session.createQueue(nameAndPayload)).send(session.createTextMessage(nameAndPayload));
0:         connection.close();
1:     }
1: 
1: }
============================================================================