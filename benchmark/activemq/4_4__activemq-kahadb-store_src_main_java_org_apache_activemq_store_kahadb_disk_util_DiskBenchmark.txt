1:456a2ba: /**
1:456a2ba:  * Licensed to the Apache Software Foundation (ASF) under one or more
1:456a2ba:  * contributor license agreements.  See the NOTICE file distributed with
1:456a2ba:  * this work for additional information regarding copyright ownership.
1:456a2ba:  * The ASF licenses this file to You under the Apache License, Version 2.0
1:456a2ba:  * (the "License"); you may not use this file except in compliance with
1:456a2ba:  * the License.  You may obtain a copy of the License at
1:456a2ba:  *
1:456a2ba:  *      http://www.apache.org/licenses/LICENSE-2.0
1:456a2ba:  *
1:456a2ba:  * Unless required by applicable law or agreed to in writing, software
1:456a2ba:  * distributed under the License is distributed on an "AS IS" BASIS,
1:456a2ba:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:456a2ba:  * See the License for the specific language governing permissions and
1:456a2ba:  * limitations under the License.
1:456a2ba:  */
1:1aab71b: package org.apache.activemq.store.kahadb.disk.util;
1:45e59e6: 
1:456a2ba: import java.io.File;
1:456a2ba: import java.io.RandomAccessFile;
1:456a2ba: import java.util.ArrayList;
1:456a2ba: import java.util.Arrays;
24:456a2ba: 
1:12b26b6: import org.apache.activemq.util.RecoverableRandomAccessFile;
1:12b26b6: 
1:456a2ba: /**
1:456a2ba:  * This class is used to get a benchmark the raw disk performance.
1:456a2ba:  */
1:456a2ba: public class DiskBenchmark {
1:456a2ba: 
1:ef619b6:     private static final boolean SKIP_METADATA_UPDATE =
1:ef619b6:         Boolean.getBoolean("org.apache.activemq.file.skipMetadataUpdate");
1:ef619b6: 
1:456a2ba:     boolean verbose;
1:456a2ba:     // reads and writes work with 4k of data at a time.
1:ef619b6:     int bs = 1024 * 4;
1:456a2ba:     // Work with 100 meg file.
1:ef619b6:     long size = 1024 * 1024 * 500;
1:ef619b6:     long sampleInterval = 10 * 1000;
1:ef619b6: 
1:456a2ba:     public static void main(String[] args) {
1:456a2ba: 
1:456a2ba:         DiskBenchmark benchmark = new DiskBenchmark();
1:456a2ba:         args = CommandLineSupport.setOptions(benchmark, args);
1:456a2ba:         ArrayList<String> files = new ArrayList<String>();
1:456a2ba:         if (args.length == 0) {
1:456a2ba:             files.add("disk-benchmark.dat");
1:456a2ba:         } else {
1:456a2ba:             files.addAll(Arrays.asList(args));
4:456a2ba:         }
1:ef619b6: 
1:456a2ba:         for (String f : files) {
1:456a2ba:             try {
1:456a2ba:                 File file = new File(f);
1:456a2ba:                 if (file.exists()) {
1:2c92c34:                     System.out.println("File " + file + " already exists, will not benchmark.");
1:456a2ba:                 } else {
1:456a2ba:                     System.out.println("Benchmarking: " + file.getCanonicalPath());
1:456a2ba:                     Report report = benchmark.benchmark(file);
1:456a2ba:                     file.delete();
1:456a2ba:                     System.out.println(report.toString());
1:456a2ba:                 }
1:456a2ba:             } catch (Throwable e) {
1:456a2ba:                 if (benchmark.verbose) {
1:456a2ba:                     System.out.println("ERROR:");
1:456a2ba:                     e.printStackTrace(System.out);
1:456a2ba:                 } else {
1:456a2ba:                     System.out.println("ERROR: " + e);
1:456a2ba:                 }
1:456a2ba:             }
1:456a2ba:         }
1:ef619b6: 
1:456a2ba:     }
1:456a2ba: 
1:456a2ba:     public static class Report {
1:456a2ba: 
1:456a2ba:         public int size;
1:ef619b6: 
1:456a2ba:         public int writes;
1:456a2ba:         public long writeDuration;
1:ef619b6: 
1:456a2ba:         public int syncWrites;
1:456a2ba:         public long syncWriteDuration;
1:ef619b6: 
1:456a2ba:         public int reads;
1:456a2ba:         public long readDuration;
1:456a2ba: 
1:456a2ba:         @Override
1:456a2ba:         public String toString() {
1:ef619b6:             return "Writes: \n" + "  " + writes + " writes of size " + size + " written in " + (writeDuration / 1000.0) + " seconds.\n" + "  " + getWriteRate()
1:ef619b6:                 + " writes/second.\n" + "  " + getWriteSizeRate() + " megs/second.\n" + "\n" + "Sync Writes: \n" + "  " + syncWrites + " writes of size "
1:ef619b6:                 + size + " written in " + (syncWriteDuration / 1000.0) + " seconds.\n" + "  " + getSyncWriteRate() + " writes/second.\n" + "  "
1:ef619b6:                 + getSyncWriteSizeRate() + " megs/second.\n" + "\n" + "Reads: \n" + "  " + reads + " reads of size " + size + " read in "
1:ef619b6:                 + (readDuration / 1000.0) + " seconds.\n" + "  " + getReadRate() + " writes/second.\n" + "  " + getReadSizeRate() + " megs/second.\n" + "\n"
1:ef619b6:                 + "";
1:456a2ba:         }
1:456a2ba: 
1:456a2ba:         private float getWriteSizeRate() {
1:456a2ba:             float rc = writes;
1:456a2ba:             rc *= size;
1:ef619b6:             rc /= (1024 * 1024); // put it in megs
1:ef619b6:             rc /= (writeDuration / 1000.0); // get rate.
1:456a2ba:             return rc;
1:456a2ba:         }
1:456a2ba: 
1:456a2ba:         private float getWriteRate() {
1:456a2ba:             float rc = writes;
1:ef619b6:             rc /= (writeDuration / 1000.0); // get rate.
1:456a2ba:             return rc;
1:456a2ba:         }
1:ef619b6: 
1:456a2ba:         private float getSyncWriteSizeRate() {
1:456a2ba:             float rc = syncWrites;
1:456a2ba:             rc *= size;
1:ef619b6:             rc /= (1024 * 1024); // put it in megs
1:ef619b6:             rc /= (syncWriteDuration / 1000.0); // get rate.
1:456a2ba:             return rc;
1:456a2ba:         }
1:456a2ba: 
1:456a2ba:         private float getSyncWriteRate() {
1:456a2ba:             float rc = syncWrites;
1:ef619b6:             rc /= (syncWriteDuration / 1000.0); // get rate.
1:456a2ba:             return rc;
1:456a2ba:         }
1:ef619b6: 
1:456a2ba:         private float getReadSizeRate() {
1:456a2ba:             float rc = reads;
1:456a2ba:             rc *= size;
1:ef619b6:             rc /= (1024 * 1024); // put it in megs
1:ef619b6:             rc /= (readDuration / 1000.0); // get rate.
1:456a2ba:             return rc;
1:456a2ba:         }
1:456a2ba: 
1:456a2ba:         private float getReadRate() {
1:456a2ba:             float rc = reads;
1:ef619b6:             rc /= (readDuration / 1000.0); // get rate.
1:456a2ba:             return rc;
1:456a2ba:         }
1:456a2ba: 
1:456a2ba:         public int getSize() {
1:456a2ba:             return size;
1:456a2ba:         }
1:456a2ba: 
1:456a2ba:         public void setSize(int size) {
1:456a2ba:             this.size = size;
1:456a2ba:         }
1:456a2ba: 
1:456a2ba:         public int getWrites() {
1:456a2ba:             return writes;
1:456a2ba:         }
1:456a2ba: 
1:456a2ba:         public void setWrites(int writes) {
1:456a2ba:             this.writes = writes;
1:456a2ba:         }
1:456a2ba: 
1:456a2ba:         public long getWriteDuration() {
1:456a2ba:             return writeDuration;
1:456a2ba:         }
1:456a2ba: 
1:456a2ba:         public void setWriteDuration(long writeDuration) {
1:456a2ba:             this.writeDuration = writeDuration;
1:456a2ba:         }
1:456a2ba: 
1:456a2ba:         public int getSyncWrites() {
1:456a2ba:             return syncWrites;
1:456a2ba:         }
1:456a2ba: 
1:456a2ba:         public void setSyncWrites(int syncWrites) {
1:456a2ba:             this.syncWrites = syncWrites;
1:456a2ba:         }
1:456a2ba: 
1:456a2ba:         public long getSyncWriteDuration() {
1:456a2ba:             return syncWriteDuration;
1:456a2ba:         }
1:456a2ba: 
1:456a2ba:         public void setSyncWriteDuration(long syncWriteDuration) {
1:456a2ba:             this.syncWriteDuration = syncWriteDuration;
1:456a2ba:         }
1:456a2ba: 
1:456a2ba:         public int getReads() {
1:456a2ba:             return reads;
1:456a2ba:         }
1:456a2ba: 
1:456a2ba:         public void setReads(int reads) {
1:456a2ba:             this.reads = reads;
1:456a2ba:         }
1:456a2ba: 
1:456a2ba:         public long getReadDuration() {
1:456a2ba:             return readDuration;
1:456a2ba:         }
1:456a2ba: 
1:456a2ba:         public void setReadDuration(long readDuration) {
1:456a2ba:             this.readDuration = readDuration;
1:456a2ba:         }
1:456a2ba:     }
1:456a2ba: 
1:45e59e6:     public Report benchmark(File file) throws Exception {
1:456a2ba:         Report rc = new Report();
1:ef619b6: 
1:456a2ba:         // Initialize the block we will be writing to disk.
1:ef619b6:         byte[] data = new byte[bs];
1:456a2ba:         for (int i = 0; i < data.length; i++) {
1:ef619b6:             data[i] = (byte) ('a' + (i % 26));
1:456a2ba:         }
1:456a2ba:         rc.size = data.length;
1:ef619b6: 
1:12b26b6:         long start;
1:12b26b6:         long now;
1:12b26b6:         int ioCount;
1:12b26b6: 
1:12b26b6:         try(RecoverableRandomAccessFile raf = new RecoverableRandomAccessFile(file, "rw")) {
1:12b26b6:             preallocateDataFile(raf, file.getParentFile());
1:12b26b6:             start = System.currentTimeMillis();
1:12b26b6:             now = System.currentTimeMillis();
1:12b26b6:             ioCount = 0;
1:12b26b6: 
1:12b26b6:             // Figure out how many writes we can do in the sample interval.
1:12b26b6:             while (true) {
2:ef619b6:                 if ((now - start) > sampleInterval) {
4:456a2ba:                     break;
1:456a2ba:                 }
1:12b26b6:                 raf.seek(0);
1:12b26b6:                 for (long i = 0; i + data.length < size; i += data.length) {
1:12b26b6:                     raf.write(data);
1:12b26b6:                     ioCount++;
1:12b26b6:                     now = System.currentTimeMillis();
1:12b26b6:                     if ((now - start) > sampleInterval) {
1:12b26b6:                         break;
1:12b26b6:                     }
1:12b26b6:                 }
1:12b26b6:                 // Sync to disk so that the we actually write the data to disk..
1:12b26b6:                 // otherwise OS buffering might not really do the write.
1:12b26b6:                 raf.getChannel().force(!SKIP_METADATA_UPDATE);
1:456a2ba:             }
1:2c92c34:             raf.getChannel().force(!SKIP_METADATA_UPDATE);
1:456a2ba:         }
6:456a2ba:         now = System.currentTimeMillis();
1:ef619b6: 
1:456a2ba:         rc.size = data.length;
1:456a2ba:         rc.writes = ioCount;
1:ef619b6:         rc.writeDuration = (now - start);
1:456a2ba: 
1:12b26b6:         try(RecoverableRandomAccessFile raf = new RecoverableRandomAccessFile(file, "rw")) {
1:12b26b6:             start = System.currentTimeMillis();
1:12b26b6:             now = System.currentTimeMillis();
1:12b26b6:             ioCount = 0;
1:12b26b6:             while (true) {
1:ef619b6:                 if ((now - start) > sampleInterval) {
1:456a2ba:                     break;
1:456a2ba:                 }
1:12b26b6:                 for (long i = 0; i + data.length < size; i += data.length) {
1:12b26b6:                     raf.seek(i);
1:12b26b6:                     raf.write(data);
1:12b26b6:                     raf.getChannel().force(!SKIP_METADATA_UPDATE);
1:12b26b6:                     ioCount++;
1:12b26b6:                     now = System.currentTimeMillis();
1:12b26b6:                     if ((now - start) > sampleInterval) {
1:12b26b6:                         break;
1:12b26b6:                     }
1:12b26b6:                 }
1:456a2ba:             }
1:456a2ba:         }
1:456a2ba:         now = System.currentTimeMillis();
1:456a2ba:         rc.syncWrites = ioCount;
1:ef619b6:         rc.syncWriteDuration = (now - start);
1:456a2ba: 
1:12b26b6:         try(RecoverableRandomAccessFile raf = new RecoverableRandomAccessFile(file, "rw")) {
1:12b26b6:             start = System.currentTimeMillis();
1:12b26b6:             now = System.currentTimeMillis();
1:12b26b6:             ioCount = 0;
1:12b26b6:             while (true) {
1:ef619b6:                 if ((now - start) > sampleInterval) {
1:456a2ba:                     break;
1:456a2ba:                 }
1:12b26b6:                 raf.seek(0);
1:12b26b6:                 for (long i = 0; i + data.length < size; i += data.length) {
1:12b26b6:                     raf.seek(i);
1:12b26b6:                     raf.readFully(data);
1:12b26b6:                     ioCount++;
1:12b26b6:                     now = System.currentTimeMillis();
1:12b26b6:                     if ((now - start) > sampleInterval) {
1:12b26b6:                         break;
1:12b26b6:                     }
1:12b26b6:                 }
1:456a2ba:             }
1:456a2ba:         }
1:ef619b6: 
1:456a2ba:         rc.reads = ioCount;
1:ef619b6:         rc.readDuration = (now - start);
1:456a2ba:         return rc;
1:456a2ba:     }
1:456a2ba: 
1:45e59e6:     private void preallocateDataFile(RecoverableRandomAccessFile raf, File location) throws Exception {
1:45e59e6:         File tmpFile;
1:45e59e6:         if (location != null && location.isDirectory()) {
1:45e59e6:             tmpFile = new File(location, "template.dat");
1:45e59e6:         }else {
1:45e59e6:             tmpFile = new File("template.dat");
1:45e59e6:         }
1:45e59e6:         if (tmpFile.exists()) {
1:45e59e6:             tmpFile.delete();
1:45e59e6:         }
1:351faf2:         try (RandomAccessFile templateFile = new RandomAccessFile(tmpFile, "rw");) {
1:351faf2:             templateFile.setLength(size);
1:351faf2:             templateFile.getChannel().force(true);
1:351faf2:             templateFile.getChannel().transferTo(0, size, raf.getChannel());
1:351faf2:         }
1:45e59e6:         tmpFile.delete();
1:45e59e6:     }
1:45e59e6: 
1:456a2ba:     public boolean isVerbose() {
1:456a2ba:         return verbose;
1:456a2ba:     }
1:456a2ba: 
1:456a2ba:     public void setVerbose(boolean verbose) {
1:456a2ba:         this.verbose = verbose;
1:456a2ba:     }
1:456a2ba: 
1:456a2ba:     public int getBs() {
1:456a2ba:         return bs;
1:456a2ba:     }
1:456a2ba: 
1:456a2ba:     public void setBs(int bs) {
1:456a2ba:         this.bs = bs;
1:456a2ba:     }
1:456a2ba: 
1:456a2ba:     public long getSize() {
1:456a2ba:         return size;
1:456a2ba:     }
1:456a2ba: 
1:456a2ba:     public void setSize(long size) {
1:456a2ba:         this.size = size;
1:456a2ba:     }
1:456a2ba: 
1:456a2ba:     public long getSampleInterval() {
1:456a2ba:         return sampleInterval;
1:456a2ba:     }
1:456a2ba: 
1:456a2ba:     public void setSampleInterval(long sampleInterval) {
1:456a2ba:         this.sampleInterval = sampleInterval;
1:456a2ba:     }
1:456a2ba: }
============================================================================
author:Christopher L. Shannon (cshannon)
-------------------------------------------------------------------------------
commit:351faf2
/////////////////////////////////////////////////////////////////////////
1:         try (RandomAccessFile templateFile = new RandomAccessFile(tmpFile, "rw");) {
1:             templateFile.setLength(size);
1:             templateFile.getChannel().force(true);
1:             templateFile.getChannel().transferTo(0, size, raf.getChannel());
1:         }
commit:12b26b6
/////////////////////////////////////////////////////////////////////////
1: import org.apache.activemq.util.RecoverableRandomAccessFile;
1: 
/////////////////////////////////////////////////////////////////////////
1:         long start;
1:         long now;
1:         int ioCount;
1: 
1:         try(RecoverableRandomAccessFile raf = new RecoverableRandomAccessFile(file, "rw")) {
1:             preallocateDataFile(raf, file.getParentFile());
1:             start = System.currentTimeMillis();
1:             now = System.currentTimeMillis();
1:             ioCount = 0;
1: 
1:             // Figure out how many writes we can do in the sample interval.
1:             while (true) {
1:                 raf.seek(0);
1:                 for (long i = 0; i + data.length < size; i += data.length) {
1:                     raf.write(data);
1:                     ioCount++;
1:                     now = System.currentTimeMillis();
1:                     if ((now - start) > sampleInterval) {
1:                         break;
1:                     }
1:                 }
1:                 // Sync to disk so that the we actually write the data to disk..
1:                 // otherwise OS buffering might not really do the write.
1:                 raf.getChannel().force(!SKIP_METADATA_UPDATE);
1:         try(RecoverableRandomAccessFile raf = new RecoverableRandomAccessFile(file, "rw")) {
1:             start = System.currentTimeMillis();
1:             now = System.currentTimeMillis();
1:             ioCount = 0;
1:             while (true) {
1:                 for (long i = 0; i + data.length < size; i += data.length) {
1:                     raf.seek(i);
1:                     raf.write(data);
1:                     raf.getChannel().force(!SKIP_METADATA_UPDATE);
1:                     ioCount++;
1:                     now = System.currentTimeMillis();
1:                     if ((now - start) > sampleInterval) {
1:                         break;
1:                     }
1:                 }
1:         try(RecoverableRandomAccessFile raf = new RecoverableRandomAccessFile(file, "rw")) {
1:             start = System.currentTimeMillis();
1:             now = System.currentTimeMillis();
1:             ioCount = 0;
1:             while (true) {
1:                 raf.seek(0);
1:                 for (long i = 0; i + data.length < size; i += data.length) {
1:                     raf.seek(i);
1:                     raf.readFully(data);
1:                     ioCount++;
1:                     now = System.currentTimeMillis();
1:                     if ((now - start) > sampleInterval) {
1:                         break;
1:                     }
1:                 }
author:Christian Posta
-------------------------------------------------------------------------------
commit:2c92c34
/////////////////////////////////////////////////////////////////////////
1:                     System.out.println("File " + file + " already exists, will not benchmark.");
/////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////
1:                 raf.getChannel().force(!SKIP_METADATA_UPDATE);
/////////////////////////////////////////////////////////////////////////
commit:45e59e6
/////////////////////////////////////////////////////////////////////////
0: import org.apache.activemq.util.RecoverableRandomAccessFile;
1: 
/////////////////////////////////////////////////////////////////////////
1:     public Report benchmark(File file) throws Exception {
/////////////////////////////////////////////////////////////////////////
0:         RecoverableRandomAccessFile raf = new RecoverableRandomAccessFile(file, "rw");
0: //        RandomAccessFile raf = new RandomAccessFile(file, "rw");
0:         preallocateDataFile(raf, file.getParentFile());
/////////////////////////////////////////////////////////////////////////
0:         raf = new RecoverableRandomAccessFile(file, "rw");
/////////////////////////////////////////////////////////////////////////
0:         raf = new RecoverableRandomAccessFile(file, "rw");
/////////////////////////////////////////////////////////////////////////
1:     private void preallocateDataFile(RecoverableRandomAccessFile raf, File location) throws Exception {
1:         File tmpFile;
1:         if (location != null && location.isDirectory()) {
1:             tmpFile = new File(location, "template.dat");
1:         }else {
1:             tmpFile = new File("template.dat");
1:         }
1:         if (tmpFile.exists()) {
1:             tmpFile.delete();
1:         }
0:         System.out.println("Using a template file: " + tmpFile.getAbsolutePath());
0:         RandomAccessFile templateFile = new RandomAccessFile(tmpFile, "rw");
0:         templateFile.setLength(size);
0:         templateFile.getChannel().force(true);
0:         templateFile.getChannel().transferTo(0, size, raf.getChannel());
0:         templateFile.close();
1:         tmpFile.delete();
1:     }
1: 
author:Timothy Bish
-------------------------------------------------------------------------------
commit:ef619b6
/////////////////////////////////////////////////////////////////////////
1:     private static final boolean SKIP_METADATA_UPDATE =
1:         Boolean.getBoolean("org.apache.activemq.file.skipMetadataUpdate");
1: 
1:     int bs = 1024 * 4;
1:     long size = 1024 * 1024 * 500;
1:     long sampleInterval = 10 * 1000;
1: 
/////////////////////////////////////////////////////////////////////////
1: 
1: 
1: 
1: 
1:             return "Writes: \n" + "  " + writes + " writes of size " + size + " written in " + (writeDuration / 1000.0) + " seconds.\n" + "  " + getWriteRate()
1:                 + " writes/second.\n" + "  " + getWriteSizeRate() + " megs/second.\n" + "\n" + "Sync Writes: \n" + "  " + syncWrites + " writes of size "
1:                 + size + " written in " + (syncWriteDuration / 1000.0) + " seconds.\n" + "  " + getSyncWriteRate() + " writes/second.\n" + "  "
1:                 + getSyncWriteSizeRate() + " megs/second.\n" + "\n" + "Reads: \n" + "  " + reads + " reads of size " + size + " read in "
1:                 + (readDuration / 1000.0) + " seconds.\n" + "  " + getReadRate() + " writes/second.\n" + "  " + getReadSizeRate() + " megs/second.\n" + "\n"
1:                 + "";
1:             rc /= (1024 * 1024); // put it in megs
1:             rc /= (writeDuration / 1000.0); // get rate.
1:             rc /= (writeDuration / 1000.0); // get rate.
1: 
1:             rc /= (1024 * 1024); // put it in megs
1:             rc /= (syncWriteDuration / 1000.0); // get rate.
1:             rc /= (syncWriteDuration / 1000.0); // get rate.
1: 
1:             rc /= (1024 * 1024); // put it in megs
1:             rc /= (readDuration / 1000.0); // get rate.
1:             rc /= (readDuration / 1000.0); // get rate.
/////////////////////////////////////////////////////////////////////////
1: 
1:         byte[] data = new byte[bs];
1:             data[i] = (byte) ('a' + (i % 26));
1: 
1: 
0:         int ioCount = 0;
0:         while (true) {
1:             if ((now - start) > sampleInterval) {
0:             for (long i = 0; i + data.length < size; i += data.length) {
1:                 if ((now - start) > sampleInterval) {
0:             // Sync to disk so that the we actually write the data to disk..
0:             // otherwise OS buffering might not really do the write.
0:             raf.getChannel().force(!SKIP_METADATA_UPDATE);
0:         raf.getChannel().force(!SKIP_METADATA_UPDATE);
1: 
1:         rc.writeDuration = (now - start);
0:         ioCount = 0;
0:         while (true) {
1:             if ((now - start) > sampleInterval) {
0:             for (long i = 0; i + data.length < size; i += data.length) {
0:                 raf.getChannel().force(false);
1:                 if ((now - start) > sampleInterval) {
/////////////////////////////////////////////////////////////////////////
1:         rc.syncWriteDuration = (now - start);
0:         ioCount = 0;
0:         while (true) {
0:             if ((now - start) > sampleInterval) {
0:             for (long i = 0; i + data.length < size; i += data.length) {
0:                 if ((now - start) > sampleInterval) {
1: 
1:         rc.readDuration = (now - start);
commit:97b12c7
/////////////////////////////////////////////////////////////////////////
0:             raf.getFD().sync();
0:         raf.getFD().sync();
/////////////////////////////////////////////////////////////////////////
0:                 raf.getFD().sync();
commit:c50b6c3
/////////////////////////////////////////////////////////////////////////
0:             raf.getChannel().force(false);
0:         raf.getChannel().force(false);
/////////////////////////////////////////////////////////////////////////
0:                 raf.getChannel().force(false);
author:Hiram R. Chirino
-------------------------------------------------------------------------------
commit:c5cf038
commit:1aab71b
/////////////////////////////////////////////////////////////////////////
1: package org.apache.activemq.store.kahadb.disk.util;
commit:715010a
commit:456a2ba
/////////////////////////////////////////////////////////////////////////
1: /**
1:  * Licensed to the Apache Software Foundation (ASF) under one or more
1:  * contributor license agreements.  See the NOTICE file distributed with
1:  * this work for additional information regarding copyright ownership.
1:  * The ASF licenses this file to You under the Apache License, Version 2.0
1:  * (the "License"); you may not use this file except in compliance with
1:  * the License.  You may obtain a copy of the License at
1:  *
1:  *      http://www.apache.org/licenses/LICENSE-2.0
1:  *
1:  * Unless required by applicable law or agreed to in writing, software
1:  * distributed under the License is distributed on an "AS IS" BASIS,
1:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:  * See the License for the specific language governing permissions and
1:  * limitations under the License.
1:  */
0: package org.apache.kahadb.util;
1: 
1: import java.io.File;
0: import java.io.FileNotFoundException;
0: import java.io.IOException;
1: import java.io.RandomAccessFile;
1: import java.util.ArrayList;
1: import java.util.Arrays;
1: 
1: /**
1:  * This class is used to get a benchmark the raw disk performance.
1:  */
1: public class DiskBenchmark {
1: 
1:     boolean verbose;
1:     // reads and writes work with 4k of data at a time.
0:     int bs=1024*4; 
1:     // Work with 100 meg file.
0:     long size=1024*1024*500; 
0:     long sampleInterval = 10*1000; 
1:     
1:     public static void main(String[] args) {
1: 
1:         DiskBenchmark benchmark = new DiskBenchmark();
1:         args = CommandLineSupport.setOptions(benchmark, args);
1:         ArrayList<String> files = new ArrayList<String>();
1:         if (args.length == 0) {
1:             files.add("disk-benchmark.dat");
1:         } else {
1:             files.addAll(Arrays.asList(args));
1:         }
1: 
1:         for (String f : files) {
1:             try {
1:                 File file = new File(f);
1:                 if (file.exists()) {
0:                     System.out.println("File " + file + " allready exists, will not benchmark.");
1:                 } else {
1:                     System.out.println("Benchmarking: " + file.getCanonicalPath());
1:                     Report report = benchmark.benchmark(file);
1:                     file.delete();
1:                     System.out.println(report.toString());
1:                 }
1:             } catch (Throwable e) {
1:                 if (benchmark.verbose) {
1:                     System.out.println("ERROR:");
1:                     e.printStackTrace(System.out);
1:                 } else {
1:                     System.out.println("ERROR: " + e);
1:                 }
1:             }
1:         }
1: 
1:     }
1:     
1:     public static class Report {
1: 
1:         public int size;
1:         
1:         public int writes;
1:         public long writeDuration;
1:         
1:         public int syncWrites;
1:         public long syncWriteDuration;
1:         
1:         public int reads;
1:         public long readDuration;
1: 
1:         @Override
1:         public String toString() {
0:             return 
0:             "Writes: \n" +
0:             "  "+writes+" writes of size "+size+" written in "+(writeDuration/1000.0)+" seconds.\n"+
0:             "  "+getWriteRate()+" writes/second.\n"+
0:             "  "+getWriteSizeRate()+" megs/second.\n"+
0:             "\n"+
0:             "Sync Writes: \n" +
0:             "  "+syncWrites+" writes of size "+size+" written in "+(syncWriteDuration/1000.0)+" seconds.\n"+
0:             "  "+getSyncWriteRate()+" writes/second.\n"+
0:             "  "+getSyncWriteSizeRate()+" megs/second.\n"+
0:             "\n"+
0:             "Reads: \n" +
0:             "  "+reads+" reads of size "+size+" read in "+(readDuration/1000.0)+" seconds.\n"+
0:             "  "+getReadRate()+" writes/second.\n"+
0:             "  "+getReadSizeRate()+" megs/second.\n"+
0:             "\n"+
0:             "";
1:         }
1: 
1:         private float getWriteSizeRate() {
1:             float rc = writes;
1:             rc *= size;
0:             rc /= (1024*1024); // put it in megs
0:             rc /= (writeDuration/1000.0); // get rate. 
1:             return rc;
1:         }
1: 
1:         private float getWriteRate() {
1:             float rc = writes;
0:             rc /= (writeDuration/1000.0); // get rate. 
1:             return rc;
1:         }
1:         
1:         private float getSyncWriteSizeRate() {
1:             float rc = syncWrites;
1:             rc *= size;
0:             rc /= (1024*1024); // put it in megs
0:             rc /= (syncWriteDuration/1000.0); // get rate. 
1:             return rc;
1:         }
1: 
1:         private float getSyncWriteRate() {
1:             float rc = syncWrites;
0:             rc /= (syncWriteDuration/1000.0); // get rate. 
1:             return rc;
1:         }
1:         private float getReadSizeRate() {
1:             float rc = reads;
1:             rc *= size;
0:             rc /= (1024*1024); // put it in megs
0:             rc /= (readDuration/1000.0); // get rate. 
1:             return rc;
1:         }
1: 
1:         private float getReadRate() {
1:             float rc = reads;
0:             rc /= (readDuration/1000.0); // get rate. 
1:             return rc;
1:         }
1: 
1:         public int getSize() {
1:             return size;
1:         }
1: 
1:         public void setSize(int size) {
1:             this.size = size;
1:         }
1: 
1:         public int getWrites() {
1:             return writes;
1:         }
1: 
1:         public void setWrites(int writes) {
1:             this.writes = writes;
1:         }
1: 
1:         public long getWriteDuration() {
1:             return writeDuration;
1:         }
1: 
1:         public void setWriteDuration(long writeDuration) {
1:             this.writeDuration = writeDuration;
1:         }
1: 
1:         public int getSyncWrites() {
1:             return syncWrites;
1:         }
1: 
1:         public void setSyncWrites(int syncWrites) {
1:             this.syncWrites = syncWrites;
1:         }
1: 
1:         public long getSyncWriteDuration() {
1:             return syncWriteDuration;
1:         }
1: 
1:         public void setSyncWriteDuration(long syncWriteDuration) {
1:             this.syncWriteDuration = syncWriteDuration;
1:         }
1: 
1:         public int getReads() {
1:             return reads;
1:         }
1: 
1:         public void setReads(int reads) {
1:             this.reads = reads;
1:         }
1: 
1:         public long getReadDuration() {
1:             return readDuration;
1:         }
1: 
1:         public void setReadDuration(long readDuration) {
1:             this.readDuration = readDuration;
1:         }
1:     }
1: 
1: 
0:     public Report benchmark(File file) throws IOException {
1:         Report rc = new Report();
1:         
1:         // Initialize the block we will be writing to disk.
0:         byte []data = new byte[bs];
1:         for (int i = 0; i < data.length; i++) {
0:             data[i] = (byte)('a'+(i%26));
1:         }
1:         
1:         rc.size = data.length;
0:         RandomAccessFile raf = new RandomAccessFile(file, "rw");
0:         raf.setLength(size);
1:         
0:         // Figure out how many writes we can do in the sample interval.
0:         long start = System.currentTimeMillis();
0:         long now = System.currentTimeMillis();
0:         int ioCount=0;
0:         while( true ) {
0:             if( (now-start)>sampleInterval ) {
1:                 break;
1:             }
0:             raf.seek(0);
0:             for( long i=0; i+data.length < size; i+=data.length) {
0:                 raf.write(data);
0:                 ioCount++;
1:                 now = System.currentTimeMillis();
0:                 if( (now-start)>sampleInterval ) {
1:                     break;
1:                 }
1:             }
0:             // Sync to disk so that the we actually write the data to disk.. otherwise 
0:             // OS buffering might not really do the write.
0:             raf.getFD().sync();
1:         }
0:         raf.getFD().sync();
0:         raf.close();
1:         now = System.currentTimeMillis();
1:         
1:         rc.size = data.length;
1:         rc.writes = ioCount;
0:         rc.writeDuration = (now-start);
1: 
0:         raf = new RandomAccessFile(file, "rw");
0:         start = System.currentTimeMillis();
1:         now = System.currentTimeMillis();
0:         ioCount=0;
0:         while( true ) {
0:             if( (now-start)>sampleInterval ) {
1:                 break;
1:             }
0:             for( long i=0; i+data.length < size; i+=data.length) {
0:                 raf.seek(i);
0:                 raf.write(data);
0:                 raf.getFD().sync();
0:                 ioCount++;
1:                 now = System.currentTimeMillis();
0:                 if( (now-start)>sampleInterval ) {
1:                     break;
1:                 }
1:             }
1:         }
0:         raf.close();
1:         now = System.currentTimeMillis();
1:         rc.syncWrites = ioCount;
0:         rc.syncWriteDuration = (now-start);
1: 
0:         raf = new RandomAccessFile(file, "rw");
0:         start = System.currentTimeMillis();
1:         now = System.currentTimeMillis();
0:         ioCount=0;
0:         while( true ) {
0:             if( (now-start)>sampleInterval ) {
1:                 break;
1:             }
0:             raf.seek(0);
0:             for( long i=0; i+data.length < size; i+=data.length) {
0:                 raf.seek(i);
0:                 raf.readFully(data);
0:                 ioCount++;
1:                 now = System.currentTimeMillis();
0:                 if( (now-start)>sampleInterval ) {
1:                     break;
1:                 }
1:             }
1:         }
0:         raf.close();
1:         
1:         rc.reads = ioCount;
0:         rc.readDuration = (now-start);
1:         return rc;
1:     }
1: 
1: 
1:     public boolean isVerbose() {
1:         return verbose;
1:     }
1: 
1: 
1:     public void setVerbose(boolean verbose) {
1:         this.verbose = verbose;
1:     }
1: 
1: 
1:     public int getBs() {
1:         return bs;
1:     }
1: 
1: 
1:     public void setBs(int bs) {
1:         this.bs = bs;
1:     }
1: 
1: 
1:     public long getSize() {
1:         return size;
1:     }
1: 
1: 
1:     public void setSize(long size) {
1:         this.size = size;
1:     }
1: 
1: 
1:     public long getSampleInterval() {
1:         return sampleInterval;
1:     }
1: 
1: 
1:     public void setSampleInterval(long sampleInterval) {
1:         this.sampleInterval = sampleInterval;
1:     }
1: 
1: }
============================================================================