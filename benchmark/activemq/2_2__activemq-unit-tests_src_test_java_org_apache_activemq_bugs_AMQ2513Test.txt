1:df52a09: /**
1:df52a09:  * Licensed to the Apache Software Foundation (ASF) under one or more
1:df52a09:  * contributor license agreements.  See the NOTICE file distributed with
1:df52a09:  * this work for additional information regarding copyright ownership.
1:df52a09:  * The ASF licenses this file to You under the Apache License, Version 2.0
1:df52a09:  * (the "License"); you may not use this file except in compliance with
1:df52a09:  * the License.  You may obtain a copy of the License at
1:df52a09:  *
1:df52a09:  *      http://www.apache.org/licenses/LICENSE-2.0
1:df52a09:  *
1:df52a09:  * Unless required by applicable law or agreed to in writing, software
1:df52a09:  * distributed under the License is distributed on an "AS IS" BASIS,
1:df52a09:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:df52a09:  * See the License for the specific language governing permissions and
1:df52a09:  * limitations under the License.
1:df52a09:  */
1:df52a09: package org.apache.activemq.bugs;
15:df52a09: 
1:df52a09: import javax.jms.Connection;
1:df52a09: import javax.jms.DeliveryMode;
1:df52a09: import javax.jms.MessageProducer;
1:df52a09: import javax.jms.Session;
1:df52a09: import javax.management.ObjectName;
1:df52a09: 
1:df52a09: import junit.framework.TestCase;
1:df52a09: 
1:df52a09: import org.apache.activemq.ActiveMQConnectionFactory;
1:df52a09: import org.apache.activemq.broker.BrokerService;
1:df52a09: import org.apache.activemq.broker.jmx.DestinationViewMBean;
1:df52a09: import org.apache.activemq.broker.jmx.ManagementContext;
1:df52a09: 
1:df52a09: /**
1:df52a09:  * This unit test verifies an issue when
1:42e51a3:  * javax.management.InstanceNotFoundException is thrown after subsequent startups when
1:df52a09:  * managementContext createConnector="false"
1:df52a09:  *
1:df52a09:  */
1:df52a09: public class AMQ2513Test extends TestCase {
1:df52a09: 
1:42e51a3:     private BrokerService broker;
1:42e51a3:     private String connectionUri;
1:42e51a3: 
1:42e51a3:     void createBroker(boolean deleteAllMessagesOnStartup) throws Exception {
1:df52a09:         broker = new BrokerService();
1:df52a09:         broker.setBrokerName("localhost");
1:df52a09:         broker.setUseJmx(true);
1:df52a09:         broker.setDeleteAllMessagesOnStartup(deleteAllMessagesOnStartup);
1:42e51a3:         broker.addConnector("tcp://localhost:0");
1:df52a09: 
1:df52a09:         ManagementContext ctx = new ManagementContext();
1:df52a09:         //if createConnector == true everything is fine
1:df52a09:         ctx.setCreateConnector(false);
1:df52a09:         broker.setManagementContext(ctx);
1:df52a09: 
1:42e51a3:         broker.start();
1:df52a09:         broker.waitUntilStarted();
1:42e51a3: 
1:42e51a3:         connectionUri = broker.getTransportConnectors().get(0).getPublishableConnectString();
2:df52a09:     }
1:42e51a3: 
1:42e51a3:     public void testJmx() throws Exception{
1:42e51a3:         createBroker(true);
1:42e51a3: 
1:42e51a3:         ActiveMQConnectionFactory factory = new ActiveMQConnectionFactory(connectionUri);
1:df52a09:         Connection connection = factory.createConnection();
1:df52a09:         Session session = connection.createSession(false, Session.AUTO_ACKNOWLEDGE);
1:df52a09:         MessageProducer producer = session.createProducer(session.createQueue("test"));
1:df52a09:         producer.setDeliveryMode(DeliveryMode.PERSISTENT);
1:df52a09:         connection.start();
1:42e51a3: 
1:df52a09:         producer.send(session.createTextMessage("test123"));
1:42e51a3: 
1:df52a09:         DestinationViewMBean dv = createView();
1:df52a09:         assertTrue(dv.getQueueSize() > 0);
1:42e51a3: 
1:df52a09:         connection.close();
1:42e51a3: 
1:df52a09:         broker.stop();
1:df52a09:         broker.waitUntilStopped();
1:42e51a3: 
1:df52a09:         createBroker(false);
1:42e51a3:         factory = new ActiveMQConnectionFactory(connectionUri);
1:df52a09:         connection = factory.createConnection();
1:df52a09:         session = connection.createSession(false, Session.AUTO_ACKNOWLEDGE);
1:df52a09:         producer = session.createProducer(session.createQueue("test"));
1:df52a09:         producer.setDeliveryMode(DeliveryMode.PERSISTENT);
1:df52a09:         connection.start();
1:df52a09:         producer.send(session.createTextMessage("test123"));
1:df52a09:         connection.close();
1:42e51a3: 
1:df52a09:         dv = createView();
1:df52a09:         assertTrue(dv.getQueueSize() > 0);
1:42e51a3: 
1:df52a09:         broker.stop();
1:df52a09:         broker.waitUntilStopped();
1:42e51a3: 
1:42e51a3:     }
1:42e51a3: 
1:42e51a3:     DestinationViewMBean createView() throws Exception {
1:df52a09:         String domain = "org.apache.activemq";
1:19bf943:         ObjectName name = new ObjectName(domain + ":type=Broker,brokerName=localhost," +
1:19bf943:                                                   "destinationType=Queue,destinationName=test");
1:df52a09:         return (DestinationViewMBean) broker.getManagementContext().newProxyInstance(name, DestinationViewMBean.class,
1:df52a09:                 true);
1:df52a09:     }
1:42e51a3: 
1:df52a09: }
============================================================================
author:Timothy A. Bish
-------------------------------------------------------------------------------
commit:ef24cc9
commit:19bf943
/////////////////////////////////////////////////////////////////////////
1:         ObjectName name = new ObjectName(domain + ":type=Broker,brokerName=localhost," +
1:                                                   "destinationType=Queue,destinationName=test");
commit:42e51a3
/////////////////////////////////////////////////////////////////////////
1:  * javax.management.InstanceNotFoundException is thrown after subsequent startups when
1:     private BrokerService broker;
1:     private String connectionUri;
1: 
1:     void createBroker(boolean deleteAllMessagesOnStartup) throws Exception {
1:         broker.addConnector("tcp://localhost:0");
1:         broker.start();
1: 
1:         connectionUri = broker.getTransportConnectors().get(0).getPublishableConnectString();
1: 
1:     public void testJmx() throws Exception{
1:         createBroker(true);
1: 
1:         ActiveMQConnectionFactory factory = new ActiveMQConnectionFactory(connectionUri);
1: 
1: 
1: 
1: 
1: 
1:         factory = new ActiveMQConnectionFactory(connectionUri);
/////////////////////////////////////////////////////////////////////////
1: 
1: 
1: 
1:     }
1: 
1:     DestinationViewMBean createView() throws Exception {
1: 
author:Bosanac Dejan
-------------------------------------------------------------------------------
commit:df52a09
/////////////////////////////////////////////////////////////////////////
1: /**
1:  * Licensed to the Apache Software Foundation (ASF) under one or more
1:  * contributor license agreements.  See the NOTICE file distributed with
1:  * this work for additional information regarding copyright ownership.
1:  * The ASF licenses this file to You under the Apache License, Version 2.0
1:  * (the "License"); you may not use this file except in compliance with
1:  * the License.  You may obtain a copy of the License at
1:  *
1:  *      http://www.apache.org/licenses/LICENSE-2.0
1:  *
1:  * Unless required by applicable law or agreed to in writing, software
1:  * distributed under the License is distributed on an "AS IS" BASIS,
1:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:  * See the License for the specific language governing permissions and
1:  * limitations under the License.
1:  */
1: package org.apache.activemq.bugs;
1: 
1: import javax.jms.Connection;
1: import javax.jms.DeliveryMode;
1: import javax.jms.MessageProducer;
1: import javax.jms.Session;
1: import javax.management.ObjectName;
1: 
1: import junit.framework.TestCase;
1: 
1: import org.apache.activemq.ActiveMQConnectionFactory;
1: import org.apache.activemq.broker.BrokerService;
1: import org.apache.activemq.broker.jmx.DestinationViewMBean;
1: import org.apache.activemq.broker.jmx.ManagementContext;
1: 
1: /**
1:  * This unit test verifies an issue when
0:  * javax.management.InstanceNotFoundException is thrown after subsequent startups when 
1:  * managementContext createConnector="false"
1:  *
1:  */
1: public class AMQ2513Test extends TestCase {
1: 
0: 	BrokerService broker;
1: 	
0: 	void createBroker(boolean deleteAllMessagesOnStartup) throws Exception {
1:         broker = new BrokerService();
1:         broker.setBrokerName("localhost");
1:         broker.setUseJmx(true);
1:         broker.setDeleteAllMessagesOnStartup(deleteAllMessagesOnStartup);
0:         broker.addConnector("tcp://localhost:61616");
1: 
1:         ManagementContext ctx = new ManagementContext();
1:         //if createConnector == true everything is fine
1:         ctx.setCreateConnector(false);
1:         broker.setManagementContext(ctx);
1:         
0:         broker.start();
1: 
1:         broker.waitUntilStarted();
1:     }
1: 	
0: 	public void testJmx() throws Exception{
0: 		createBroker(true);
1: 		
0: 		ActiveMQConnectionFactory factory = new ActiveMQConnectionFactory("tcp://localhost:61616");
1:         Connection connection = factory.createConnection();
1:         Session session = connection.createSession(false, Session.AUTO_ACKNOWLEDGE);
1:         MessageProducer producer = session.createProducer(session.createQueue("test"));
1:         producer.setDeliveryMode(DeliveryMode.PERSISTENT);
1:         connection.start();
1:         
1:         producer.send(session.createTextMessage("test123"));
1:         
1:         DestinationViewMBean dv = createView();
1:         assertTrue(dv.getQueueSize() > 0);
1:         
1:         connection.close();
1:         
1:         broker.stop();
1:         broker.waitUntilStopped();
1:         
1:         createBroker(false);
0:         factory = new ActiveMQConnectionFactory("tcp://localhost:61616");
1:         connection = factory.createConnection();
1:         session = connection.createSession(false, Session.AUTO_ACKNOWLEDGE);
1:         producer = session.createProducer(session.createQueue("test"));
1:         producer.setDeliveryMode(DeliveryMode.PERSISTENT);
1:         connection.start();
1:         producer.send(session.createTextMessage("test123"));
1:         connection.close();
1:         
1:         dv = createView();
1:         assertTrue(dv.getQueueSize() > 0);
1:         
1:         broker.stop();
1:         broker.waitUntilStopped();
1:         
1: 	}
1: 	
0: 	DestinationViewMBean createView() throws Exception {
1:         String domain = "org.apache.activemq";
0:         ObjectName name = new ObjectName(domain + ":BrokerName=localhost,Type=Queue,Destination=test");
1:         return (DestinationViewMBean) broker.getManagementContext().newProxyInstance(name, DestinationViewMBean.class,
1:                 true);
1:     }
1: 	
1: }
============================================================================