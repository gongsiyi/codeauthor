1:456a2ba: /**
1:456a2ba:  * Licensed to the Apache Software Foundation (ASF) under one or more
1:456a2ba:  * contributor license agreements.  See the NOTICE file distributed with
1:456a2ba:  * this work for additional information regarding copyright ownership.
1:456a2ba:  * The ASF licenses this file to You under the Apache License, Version 2.0
1:456a2ba:  * (the "License"); you may not use this file except in compliance with
1:456a2ba:  * the License.  You may obtain a copy of the License at
1:456a2ba:  *
1:456a2ba:  *      http://www.apache.org/licenses/LICENSE-2.0
1:456a2ba:  *
1:456a2ba:  * Unless required by applicable law or agreed to in writing, software
1:456a2ba:  * distributed under the License is distributed on an "AS IS" BASIS,
1:456a2ba:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:456a2ba:  * See the License for the specific language governing permissions and
1:456a2ba:  * limitations under the License.
1:456a2ba:  */
1:1aab71b: package org.apache.activemq.store.kahadb.disk.journal;
2:456a2ba: 
1:456a2ba: import java.io.File;
1:456a2ba: import java.io.FilenameFilter;
1:456a2ba: import java.io.IOException;
1:456a2ba: import java.util.ArrayList;
1:456a2ba: import java.util.Collections;
1:456a2ba: import java.util.List;
1:456a2ba: 
1:456a2ba: /**
1:456a2ba:  * An AsyncDataManager that works in read only mode against multiple data directories.
1:456a2ba:  * Useful for reading back archived data files.
1:456a2ba:  */
1:456a2ba: public class ReadOnlyJournal extends Journal {
1:456a2ba:     
1:456a2ba:     private final ArrayList<File> dirs;
1:456a2ba: 
1:456a2ba:     public ReadOnlyJournal(final ArrayList<File> dirs) {
1:456a2ba:         this.dirs = dirs;
1:456a2ba:     }
1:456a2ba: 
1:456a2ba:     public synchronized void start() throws IOException {
1:456a2ba:         if (started) {
1:456a2ba:             return;
1:456a2ba:         }
1:456a2ba: 
1:456a2ba:         started = true;
1:456a2ba:                 
1:456a2ba:         ArrayList<File> files = new ArrayList<File>();
1:456a2ba:         for (File directory : dirs) {
1:456a2ba:             final File d = directory;
1:456a2ba:             File[] f = d.listFiles(new FilenameFilter() {
1:456a2ba:                 public boolean accept(File dir, String n) {
1:456a2ba:                     return dir.equals(d) && n.startsWith(filePrefix);
1:456a2ba:                 }
1:456a2ba:             });
1:456a2ba:             for (int i = 0; i < f.length; i++) {
1:456a2ba:                 files.add(f[i]);
1:456a2ba:             }
1:456a2ba:         }
1:456a2ba:        
1:456a2ba:         for (File file : files) {
1:456a2ba:             try {
1:456a2ba:                 String n = file.getName();
1:456a2ba:                 String numStr = n.substring(filePrefix.length(), n.length());
1:456a2ba:                 int num = Integer.parseInt(numStr);
1:95f7262:                 DataFile dataFile = new ReadOnlyDataFile(file, num);
1:456a2ba:                 fileMap.put(dataFile.getDataFileId(), dataFile);
1:456a2ba:                 totalLength.addAndGet(dataFile.getLength());
1:456a2ba:             } catch (NumberFormatException e) {
1:456a2ba:                 // Ignore file that do not match the pattern.
1:456a2ba:             }
1:456a2ba:         }
1:456a2ba: 
1:456a2ba:         // Sort the list so that we can link the DataFiles together in the
1:456a2ba:         // right order.
1:456a2ba:         List<DataFile> list = new ArrayList<DataFile>(fileMap.values());
1:456a2ba:         Collections.sort(list);
1:456a2ba:         for (DataFile df : list) {
1:456a2ba:             dataFiles.addLast(df);
1:456a2ba:             fileByFileMap.put(df.getFile(), df);
1:456a2ba:         }
1:456a2ba:         
1:456a2ba: //        // Need to check the current Write File to see if there was a partial
1:456a2ba: //        // write to it.
1:456a2ba: //        if (!dataFiles.isEmpty()) {
1:456a2ba: //
1:456a2ba: //            // See if the lastSyncedLocation is valid..
1:456a2ba: //            Location l = lastAppendLocation.get();
1:456a2ba: //            if (l != null && l.getDataFileId() != dataFiles.getTail().getDataFileId().intValue()) {
1:456a2ba: //                l = null;
1:456a2ba: //            }
1:456a2ba: //            
1:456a2ba: //            // If we know the last location that was ok.. then we can skip lots
1:456a2ba: //            // of checking
1:456a2ba: //            try {
1:456a2ba: //                l = recoveryCheck(dataFiles.getTail(), l);
1:456a2ba: //                lastAppendLocation.set(l);
1:456a2ba: //            } catch (IOException e) {
1:456a2ba: //                LOG.warn("recovery check failed", e);
1:456a2ba: //            }
1:456a2ba: //        }
1:456a2ba:     }
1:456a2ba:     
1:456a2ba:     public synchronized void close() throws IOException {
1:456a2ba:         if (!started) {
1:456a2ba:             return;
1:456a2ba:         }
1:456a2ba:         accessorPool.close();
1:456a2ba:         fileMap.clear();
1:456a2ba:         fileByFileMap.clear();
1:456a2ba:         started = false;
1:456a2ba:     }
1:456a2ba: 
1:456a2ba:     
1:456a2ba:     public Location getFirstLocation() throws IllegalStateException, IOException {
1:456a2ba:         if( dataFiles.isEmpty() ) {
1:456a2ba:             return null;
1:456a2ba:         }
1:456a2ba:         
1:456a2ba:         DataFile first = dataFiles.getHead();
1:456a2ba:         Location cur = new Location();
1:456a2ba:         cur.setDataFileId(first.getDataFileId());
1:456a2ba:         cur.setOffset(0);
1:456a2ba:         cur.setSize(0);
1:456a2ba:         return getNextLocation(cur);
1:456a2ba:     }
1:456a2ba:     
1:456a2ba:     @Override
1:456a2ba:     public synchronized boolean delete() throws IOException {
1:456a2ba:         throw new RuntimeException("Cannot delete a ReadOnlyAsyncDataManager");
1:456a2ba:     }    
1:456a2ba: }
============================================================================
author:gtully
-------------------------------------------------------------------------------
commit:95f7262
/////////////////////////////////////////////////////////////////////////
1:                 DataFile dataFile = new ReadOnlyDataFile(file, num);
author:Hiram R. Chirino
-------------------------------------------------------------------------------
commit:c5cf038
commit:1aab71b
/////////////////////////////////////////////////////////////////////////
1: package org.apache.activemq.store.kahadb.disk.journal;
commit:715010a
commit:f73b622
/////////////////////////////////////////////////////////////////////////
commit:456a2ba
/////////////////////////////////////////////////////////////////////////
1: /**
1:  * Licensed to the Apache Software Foundation (ASF) under one or more
1:  * contributor license agreements.  See the NOTICE file distributed with
1:  * this work for additional information regarding copyright ownership.
1:  * The ASF licenses this file to You under the Apache License, Version 2.0
1:  * (the "License"); you may not use this file except in compliance with
1:  * the License.  You may obtain a copy of the License at
1:  *
1:  *      http://www.apache.org/licenses/LICENSE-2.0
1:  *
1:  * Unless required by applicable law or agreed to in writing, software
1:  * distributed under the License is distributed on an "AS IS" BASIS,
1:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:  * See the License for the specific language governing permissions and
1:  * limitations under the License.
1:  */
0: package org.apache.kahadb.journal;
1: 
1: import java.io.File;
1: import java.io.FilenameFilter;
1: import java.io.IOException;
1: import java.util.ArrayList;
1: import java.util.Collections;
1: import java.util.List;
1: 
0: import org.apache.commons.logging.Log;
0: import org.apache.commons.logging.LogFactory;
1: 
1: /**
1:  * An AsyncDataManager that works in read only mode against multiple data directories.
1:  * Useful for reading back archived data files.
1:  */
1: public class ReadOnlyJournal extends Journal {
1:     
0:     private static final Log LOG = LogFactory.getLog(ReadOnlyJournal.class);
1:     private final ArrayList<File> dirs;
1: 
1:     public ReadOnlyJournal(final ArrayList<File> dirs) {
1:         this.dirs = dirs;
1:     }
1: 
0:     @SuppressWarnings("unchecked")
1:     public synchronized void start() throws IOException {
1:         if (started) {
1:             return;
1:         }
1: 
1:         started = true;
1:                 
1:         ArrayList<File> files = new ArrayList<File>();
1:         for (File directory : dirs) {
1:             final File d = directory;
1:             File[] f = d.listFiles(new FilenameFilter() {
1:                 public boolean accept(File dir, String n) {
1:                     return dir.equals(d) && n.startsWith(filePrefix);
1:                 }
1:             });
1:             for (int i = 0; i < f.length; i++) {
1:                 files.add(f[i]);
1:             }
1:         }
1:        
1:         for (File file : files) {
1:             try {
1:                 String n = file.getName();
1:                 String numStr = n.substring(filePrefix.length(), n.length());
1:                 int num = Integer.parseInt(numStr);
0:                 DataFile dataFile = new ReadOnlyDataFile(file, num, preferedFileLength);
1:                 fileMap.put(dataFile.getDataFileId(), dataFile);
1:                 totalLength.addAndGet(dataFile.getLength());
1:             } catch (NumberFormatException e) {
1:                 // Ignore file that do not match the pattern.
1:             }
1:         }
1: 
1:         // Sort the list so that we can link the DataFiles together in the
1:         // right order.
1:         List<DataFile> list = new ArrayList<DataFile>(fileMap.values());
1:         Collections.sort(list);
1:         for (DataFile df : list) {
1:             dataFiles.addLast(df);
1:             fileByFileMap.put(df.getFile(), df);
1:         }
1:         
1: //        // Need to check the current Write File to see if there was a partial
1: //        // write to it.
1: //        if (!dataFiles.isEmpty()) {
1: //
1: //            // See if the lastSyncedLocation is valid..
1: //            Location l = lastAppendLocation.get();
1: //            if (l != null && l.getDataFileId() != dataFiles.getTail().getDataFileId().intValue()) {
1: //                l = null;
1: //            }
1: //            
1: //            // If we know the last location that was ok.. then we can skip lots
1: //            // of checking
1: //            try {
1: //                l = recoveryCheck(dataFiles.getTail(), l);
1: //                lastAppendLocation.set(l);
1: //            } catch (IOException e) {
1: //                LOG.warn("recovery check failed", e);
1: //            }
1: //        }
1:     }
1:     
1:     public synchronized void close() throws IOException {
1:         if (!started) {
1:             return;
1:         }
1:         accessorPool.close();
1:         fileMap.clear();
1:         fileByFileMap.clear();
1:         started = false;
1:     }
1: 
1:     
1:     public Location getFirstLocation() throws IllegalStateException, IOException {
1:         if( dataFiles.isEmpty() ) {
1:             return null;
1:         }
1:         
1:         DataFile first = dataFiles.getHead();
1:         Location cur = new Location();
1:         cur.setDataFileId(first.getDataFileId());
1:         cur.setOffset(0);
1:         cur.setSize(0);
1:         return getNextLocation(cur);
1:     }
1:     
1:     @Override
1:     public synchronized boolean delete() throws IOException {
1:         throw new RuntimeException("Cannot delete a ReadOnlyAsyncDataManager");
1:     }    
1: }
============================================================================