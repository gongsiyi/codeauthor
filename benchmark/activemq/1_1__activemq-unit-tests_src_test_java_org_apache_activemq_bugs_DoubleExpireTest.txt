1:a5fc6dd: /**
1:a5fc6dd:  * Licensed to the Apache Software Foundation (ASF) under one or more
1:a5fc6dd:  * contributor license agreements.  See the NOTICE file distributed with
1:a5fc6dd:  * this work for additional information regarding copyright ownership.
1:a5fc6dd:  * The ASF licenses this file to You under the Apache License, Version 2.0
1:a5fc6dd:  * (the "License"); you may not use this file except in compliance with
1:a5fc6dd:  * the License.  You may obtain a copy of the License at
1:a5fc6dd:  *
1:a5fc6dd:  *      http://www.apache.org/licenses/LICENSE-2.0
1:a5fc6dd:  *
1:a5fc6dd:  * Unless required by applicable law or agreed to in writing, software
1:a5fc6dd:  * distributed under the License is distributed on an "AS IS" BASIS,
1:a5fc6dd:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:a5fc6dd:  * See the License for the specific language governing permissions and
1:a5fc6dd:  * limitations under the License.
1:a5fc6dd:  */
1:a5fc6dd: 
1:a5fc6dd: package org.apache.activemq.bugs;
1:a5fc6dd: 
1:a5fc6dd: import java.util.concurrent.TimeoutException;
1:a5fc6dd: 
1:a5fc6dd: import javax.jms.Connection;
1:a5fc6dd: import javax.jms.Message;
1:a5fc6dd: import javax.jms.MessageConsumer;
1:a5fc6dd: import javax.jms.MessageProducer;
1:a5fc6dd: import javax.jms.Session;
1:a5fc6dd: 
1:a5fc6dd: import org.apache.activemq.EmbeddedBrokerTestSupport;
1:a5fc6dd: import org.apache.activemq.broker.region.Queue;
1:a5fc6dd: import org.apache.activemq.command.ActiveMQDestination;
1:a5fc6dd: import org.junit.Assert;
1:a5fc6dd: 
1:a5fc6dd: public class DoubleExpireTest extends EmbeddedBrokerTestSupport {
1:a5fc6dd: 
1:a5fc6dd: 	private static final long MESSAGE_TTL_MILLIS = 1000;
1:a5fc6dd: 	private static final long MAX_TEST_TIME_MILLIS = 60000;
1:a5fc6dd: 
1:a5fc6dd: 	public void setUp() throws Exception {
1:a5fc6dd: 		setAutoFail(true);
1:a5fc6dd: 		setMaxTestTime(MAX_TEST_TIME_MILLIS);
1:a5fc6dd: 		super.setUp();
1:a5fc6dd: 	}
1:a5fc6dd: 
1:a5fc6dd: 	/**
1:a5fc6dd: 	 * This test verifies that a message that expires can be be resent to queue
1:a5fc6dd: 	 * with a new expiration and that it will be processed as a new message and
1:a5fc6dd: 	 * allowed to re-expire.
1:a5fc6dd: 	 * <p>
1:a5fc6dd: 	 * <b>NOTE:</b> This test fails on AMQ 5.4.2 because the originalExpiration
1:a5fc6dd: 	 * timestamp is not cleared when the message is resent.
1:a5fc6dd: 	 */
1:a5fc6dd: 	public void testDoubleExpireWithoutMove() throws Exception {
1:a5fc6dd: 		// Create the default dead letter queue.
1:a5fc6dd: 		final ActiveMQDestination DLQ = createDestination("ActiveMQ.DLQ");
1:a5fc6dd: 
1:a5fc6dd: 		Connection conn = createConnection();
1:a5fc6dd: 		try {
1:a5fc6dd: 			conn.start();
1:a5fc6dd: 			Session session = conn.createSession(false,
1:a5fc6dd: 					Session.AUTO_ACKNOWLEDGE);
1:a5fc6dd: 
1:a5fc6dd: 			// Verify that the test queue and DLQ are empty.
1:a5fc6dd: 			Assert.assertEquals(0, getSize(destination));
1:a5fc6dd: 			Assert.assertEquals(0, getSize(DLQ));
1:a5fc6dd: 
1:a5fc6dd: 			// Enqueue a message to the test queue that will expire after 1s.
1:a5fc6dd: 			MessageProducer producer = session.createProducer(destination);
1:a5fc6dd: 			Message testMessage = session.createTextMessage("test message");
1:a5fc6dd: 			producer.send(testMessage, Message.DEFAULT_DELIVERY_MODE,
1:a5fc6dd: 					Message.DEFAULT_PRIORITY, MESSAGE_TTL_MILLIS);
1:a5fc6dd: 			Assert.assertEquals(1, getSize(destination));
1:a5fc6dd: 
1:a5fc6dd: 			// Wait for the message to expire.
1:a5fc6dd: 			waitForSize(destination, 0, MAX_TEST_TIME_MILLIS);
1:a5fc6dd: 			Assert.assertEquals(1, getSize(DLQ));
1:a5fc6dd: 
1:a5fc6dd: 			// Consume the message from the DLQ and re-enqueue it to the test
1:a5fc6dd: 			// queue so that it expires after 1s.
1:a5fc6dd: 			MessageConsumer consumer = session.createConsumer(DLQ);
1:a5fc6dd: 			Message expiredMessage = consumer.receive();
1:a5fc6dd: 			Assert.assertEquals(testMessage.getJMSMessageID(), expiredMessage
1:a5fc6dd: 					.getJMSMessageID());
1:a5fc6dd: 
1:a5fc6dd: 			producer.send(expiredMessage, Message.DEFAULT_DELIVERY_MODE,
1:a5fc6dd: 					Message.DEFAULT_PRIORITY, MESSAGE_TTL_MILLIS);
1:a5fc6dd: 			Assert.assertEquals(1, getSize(destination));
1:a5fc6dd: 			Assert.assertEquals(0, getSize(DLQ));
1:a5fc6dd: 
1:a5fc6dd: 			// Verify that the resent message is "different" in that it has
1:a5fc6dd: 			// another ID.
1:a5fc6dd: 			Assert.assertNotSame(testMessage.getJMSMessageID(), expiredMessage
1:a5fc6dd: 					.getJMSMessageID());
1:a5fc6dd: 
1:a5fc6dd: 			// Wait for the message to re-expire.
1:a5fc6dd: 			waitForSize(destination, 0, MAX_TEST_TIME_MILLIS);
1:a5fc6dd: 			Assert.assertEquals(1, getSize(DLQ));
1:a5fc6dd: 
1:a5fc6dd: 			// Re-consume the message from the DLQ.
1:a5fc6dd: 			Message reexpiredMessage = consumer.receive();
1:a5fc6dd: 			Assert.assertEquals(expiredMessage.getJMSMessageID(), reexpiredMessage
1:a5fc6dd: 					.getJMSMessageID());
1:a5fc6dd: 		} finally {
1:a5fc6dd: 			conn.close();
1:a5fc6dd: 		}
1:a5fc6dd: 	}
1:a5fc6dd: 
1:a5fc6dd: 	/**
1:a5fc6dd: 	 * A helper method that returns the embedded broker's implementation of a
1:a5fc6dd: 	 * JMS queue.
1:a5fc6dd: 	 */
1:a5fc6dd: 	private Queue getPhysicalDestination(ActiveMQDestination destination)
1:a5fc6dd: 			throws Exception {
1:a5fc6dd: 		return (Queue) broker.getAdminView().getBroker().getDestinationMap()
1:a5fc6dd: 				.get(destination);
1:a5fc6dd: 	}
1:a5fc6dd: 
1:a5fc6dd: 	/**
1:a5fc6dd: 	 * A helper method that returns the size of the specified queue/topic.
1:a5fc6dd: 	 */
1:a5fc6dd: 	private long getSize(ActiveMQDestination destination) throws Exception {
1:a5fc6dd: 		return getPhysicalDestination(destination) != null ? getPhysicalDestination(
1:a5fc6dd: 				destination).getDestinationStatistics().getMessages()
1:a5fc6dd: 				.getCount()
1:a5fc6dd: 				: 0;
1:a5fc6dd: 	}
1:a5fc6dd: 
1:a5fc6dd: 	/**
1:a5fc6dd: 	 * A helper method that waits for a destination to reach a certain size.
1:a5fc6dd: 	 */
1:a5fc6dd: 	private void waitForSize(ActiveMQDestination destination, int size,
1:a5fc6dd: 			long timeoutMillis) throws Exception, TimeoutException {
1:a5fc6dd: 		long startTimeMillis = System.currentTimeMillis();
1:a5fc6dd: 
1:a5fc6dd: 		while (getSize(destination) != size
1:a5fc6dd: 				&& System.currentTimeMillis() < (startTimeMillis + timeoutMillis)) {
1:a5fc6dd: 			Thread.sleep(250);
1:a5fc6dd: 		}
1:a5fc6dd: 
1:a5fc6dd: 		if (getSize(destination) != size) {
1:a5fc6dd: 			throw new TimeoutException("Destination "
1:a5fc6dd: 					+ destination.getPhysicalName() + " did not reach size "
1:a5fc6dd: 					+ size + " within " + timeoutMillis + "ms.");
1:a5fc6dd: 		}
1:a5fc6dd: 	}
1:a5fc6dd: }
============================================================================
author:Timothy A. Bish
-------------------------------------------------------------------------------
commit:ef24cc9
commit:a5fc6dd
/////////////////////////////////////////////////////////////////////////
1: /**
1:  * Licensed to the Apache Software Foundation (ASF) under one or more
1:  * contributor license agreements.  See the NOTICE file distributed with
1:  * this work for additional information regarding copyright ownership.
1:  * The ASF licenses this file to You under the Apache License, Version 2.0
1:  * (the "License"); you may not use this file except in compliance with
1:  * the License.  You may obtain a copy of the License at
1:  *
1:  *      http://www.apache.org/licenses/LICENSE-2.0
1:  *
1:  * Unless required by applicable law or agreed to in writing, software
1:  * distributed under the License is distributed on an "AS IS" BASIS,
1:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:  * See the License for the specific language governing permissions and
1:  * limitations under the License.
1:  */
1: 
1: package org.apache.activemq.bugs;
1: 
1: import java.util.concurrent.TimeoutException;
1: 
1: import javax.jms.Connection;
1: import javax.jms.Message;
1: import javax.jms.MessageConsumer;
1: import javax.jms.MessageProducer;
1: import javax.jms.Session;
1: 
1: import org.apache.activemq.EmbeddedBrokerTestSupport;
1: import org.apache.activemq.broker.region.Queue;
1: import org.apache.activemq.command.ActiveMQDestination;
1: import org.junit.Assert;
1: 
1: public class DoubleExpireTest extends EmbeddedBrokerTestSupport {
1: 
1: 	private static final long MESSAGE_TTL_MILLIS = 1000;
1: 	private static final long MAX_TEST_TIME_MILLIS = 60000;
1: 
1: 	public void setUp() throws Exception {
1: 		setAutoFail(true);
1: 		setMaxTestTime(MAX_TEST_TIME_MILLIS);
1: 		super.setUp();
1: 	}
1: 
1: 	/**
1: 	 * This test verifies that a message that expires can be be resent to queue
1: 	 * with a new expiration and that it will be processed as a new message and
1: 	 * allowed to re-expire.
1: 	 * <p>
1: 	 * <b>NOTE:</b> This test fails on AMQ 5.4.2 because the originalExpiration
1: 	 * timestamp is not cleared when the message is resent.
1: 	 */
1: 	public void testDoubleExpireWithoutMove() throws Exception {
1: 		// Create the default dead letter queue.
1: 		final ActiveMQDestination DLQ = createDestination("ActiveMQ.DLQ");
1: 
1: 		Connection conn = createConnection();
1: 		try {
1: 			conn.start();
1: 			Session session = conn.createSession(false,
1: 					Session.AUTO_ACKNOWLEDGE);
1: 
1: 			// Verify that the test queue and DLQ are empty.
1: 			Assert.assertEquals(0, getSize(destination));
1: 			Assert.assertEquals(0, getSize(DLQ));
1: 
1: 			// Enqueue a message to the test queue that will expire after 1s.
1: 			MessageProducer producer = session.createProducer(destination);
1: 			Message testMessage = session.createTextMessage("test message");
1: 			producer.send(testMessage, Message.DEFAULT_DELIVERY_MODE,
1: 					Message.DEFAULT_PRIORITY, MESSAGE_TTL_MILLIS);
1: 			Assert.assertEquals(1, getSize(destination));
1: 
1: 			// Wait for the message to expire.
1: 			waitForSize(destination, 0, MAX_TEST_TIME_MILLIS);
1: 			Assert.assertEquals(1, getSize(DLQ));
1: 
1: 			// Consume the message from the DLQ and re-enqueue it to the test
1: 			// queue so that it expires after 1s.
1: 			MessageConsumer consumer = session.createConsumer(DLQ);
1: 			Message expiredMessage = consumer.receive();
1: 			Assert.assertEquals(testMessage.getJMSMessageID(), expiredMessage
1: 					.getJMSMessageID());
1: 
1: 			producer.send(expiredMessage, Message.DEFAULT_DELIVERY_MODE,
1: 					Message.DEFAULT_PRIORITY, MESSAGE_TTL_MILLIS);
1: 			Assert.assertEquals(1, getSize(destination));
1: 			Assert.assertEquals(0, getSize(DLQ));
1: 
1: 			// Verify that the resent message is "different" in that it has
1: 			// another ID.
1: 			Assert.assertNotSame(testMessage.getJMSMessageID(), expiredMessage
1: 					.getJMSMessageID());
1: 
1: 			// Wait for the message to re-expire.
1: 			waitForSize(destination, 0, MAX_TEST_TIME_MILLIS);
1: 			Assert.assertEquals(1, getSize(DLQ));
1: 
1: 			// Re-consume the message from the DLQ.
1: 			Message reexpiredMessage = consumer.receive();
1: 			Assert.assertEquals(expiredMessage.getJMSMessageID(), reexpiredMessage
1: 					.getJMSMessageID());
1: 		} finally {
1: 			conn.close();
1: 		}
1: 	}
1: 
1: 	/**
1: 	 * A helper method that returns the embedded broker's implementation of a
1: 	 * JMS queue.
1: 	 */
1: 	private Queue getPhysicalDestination(ActiveMQDestination destination)
1: 			throws Exception {
1: 		return (Queue) broker.getAdminView().getBroker().getDestinationMap()
1: 				.get(destination);
1: 	}
1: 
1: 	/**
1: 	 * A helper method that returns the size of the specified queue/topic.
1: 	 */
1: 	private long getSize(ActiveMQDestination destination) throws Exception {
1: 		return getPhysicalDestination(destination) != null ? getPhysicalDestination(
1: 				destination).getDestinationStatistics().getMessages()
1: 				.getCount()
1: 				: 0;
1: 	}
1: 
1: 	/**
1: 	 * A helper method that waits for a destination to reach a certain size.
1: 	 */
1: 	private void waitForSize(ActiveMQDestination destination, int size,
1: 			long timeoutMillis) throws Exception, TimeoutException {
1: 		long startTimeMillis = System.currentTimeMillis();
1: 
1: 		while (getSize(destination) != size
1: 				&& System.currentTimeMillis() < (startTimeMillis + timeoutMillis)) {
1: 			Thread.sleep(250);
1: 		}
1: 
1: 		if (getSize(destination) != size) {
1: 			throw new TimeoutException("Destination "
1: 					+ destination.getPhysicalName() + " did not reach size "
1: 					+ size + " within " + timeoutMillis + "ms.");
1: 		}
1: 	}
1: }
============================================================================