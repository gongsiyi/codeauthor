1:04ee70a: /**
1:04ee70a:  * Licensed to the Apache Software Foundation (ASF) under one or more
1:04ee70a:  * contributor license agreements.  See the NOTICE file distributed with
1:04ee70a:  * this work for additional information regarding copyright ownership.
1:04ee70a:  * The ASF licenses this file to You under the Apache License, Version 2.0
1:04ee70a:  * (the "License"); you may not use this file except in compliance with
1:04ee70a:  * the License.  You may obtain a copy of the License at
1:04ee70a:  *
1:04ee70a:  *      http://www.apache.org/licenses/LICENSE-2.0
1:04ee70a:  *
1:04ee70a:  * Unless required by applicable law or agreed to in writing, software
1:04ee70a:  * distributed under the License is distributed on an "AS IS" BASIS,
1:04ee70a:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:04ee70a:  * See the License for the specific language governing permissions and
1:04ee70a:  * limitations under the License.
1:04ee70a:  */
1:04ee70a: package org.apache.activemq.transport.auto;
4:04ee70a: 
1:04ee70a: import java.util.Arrays;
1:04ee70a: 
1:04ee70a: import javax.jms.Connection;
1:04ee70a: import javax.jms.ConnectionFactory;
1:04ee70a: import javax.jms.JMSException;
1:04ee70a: import javax.jms.MessageProducer;
1:04ee70a: import javax.jms.Session;
1:04ee70a: 
1:04ee70a: import org.apache.activemq.ActiveMQConnectionFactory;
1:04ee70a: import org.apache.activemq.broker.BrokerService;
1:04ee70a: import org.apache.activemq.command.ActiveMQQueue;
1:04ee70a: import org.apache.activemq.command.ActiveMQTextMessage;
1:04ee70a: import org.junit.After;
1:04ee70a: import org.junit.Before;
1:04ee70a: import org.junit.Test;
1:04ee70a: import org.junit.runner.RunWith;
1:04ee70a: import org.junit.runners.Parameterized;
1:04ee70a: import org.junit.runners.Parameterized.Parameters;
1:04ee70a: 
1:04ee70a: @RunWith(Parameterized.class)
1:04ee70a: public class AutoTransportConfigureTest {
1:04ee70a: 
1:04ee70a:     public static final String KEYSTORE_TYPE = "jks";
1:04ee70a:     public static final String PASSWORD = "password";
1:04ee70a:     public static final String SERVER_KEYSTORE = "src/test/resources/server.keystore";
1:04ee70a:     public static final String TRUST_KEYSTORE = "src/test/resources/client.keystore";
1:04ee70a: 
1:04ee70a:     private BrokerService brokerService;
1:04ee70a:     private String url;
1:04ee70a: 
1:04ee70a:     @Parameters
1:04ee70a:     public static Iterable<Object[]> parameters() {
1:31c55f7:         return Arrays.asList(new Object[][] { { "auto" }, { "auto+nio" }, { "auto+ssl" }, { "auto+nio+ssl" } });
1:04ee70a:     }
1:04ee70a: 
1:04ee70a:     private String transportType;
1:04ee70a: 
1:04ee70a:     public AutoTransportConfigureTest(String transportType) {
1:04ee70a:         super();
1:04ee70a:         this.transportType = transportType;
1:04ee70a:     }
1:04ee70a: 
1:04ee70a:     @Before
1:04ee70a:     public void setUp() throws Exception {
1:04ee70a:         System.setProperty("javax.net.ssl.trustStore", TRUST_KEYSTORE);
1:04ee70a:         System.setProperty("javax.net.ssl.trustStorePassword", PASSWORD);
1:04ee70a:         System.setProperty("javax.net.ssl.trustStoreType", KEYSTORE_TYPE);
1:04ee70a:         System.setProperty("javax.net.ssl.keyStore", SERVER_KEYSTORE);
1:04ee70a:         System.setProperty("javax.net.ssl.keyStorePassword", PASSWORD);
1:04ee70a:         System.setProperty("javax.net.ssl.keyStoreType", KEYSTORE_TYPE);
1:04ee70a: 
1:04ee70a:     }
1:04ee70a: 
1:04ee70a:     @After
1:31c55f7:     public void tearDown() throws Exception {
1:04ee70a:         if (this.brokerService != null) {
1:04ee70a:             this.brokerService.stop();
1:04ee70a:             this.brokerService.waitUntilStopped();
1:04ee70a:         }
1:04ee70a:     }
1:04ee70a: 
1:04ee70a:     protected void createBroker(String uriConfig) throws Exception {
1:04ee70a:         brokerService = new BrokerService();
1:04ee70a:         brokerService.setPersistent(false);
1:04ee70a:         url = brokerService.addConnector(uriConfig).getPublishableConnectString();
1:04ee70a:         brokerService.start();
1:04ee70a:         brokerService.waitUntilStarted();
1:04ee70a: 
1:04ee70a:     }
1:04ee70a: 
1:31c55f7:     @Test(expected = JMSException.class)
1:04ee70a:     public void testUrlConfiguration() throws Exception {
1:04ee70a:         createBroker(transportType + "://localhost:0?wireFormat.maxFrameSize=10");
1:04ee70a: 
1:04ee70a:         ConnectionFactory factory = new ActiveMQConnectionFactory(url);
1:04ee70a:         sendMessage(factory.createConnection());
1:04ee70a:     }
1:04ee70a: 
1:31c55f7:     @Test(expected = JMSException.class)
1:04ee70a:     public void testUrlConfigurationOpenWireFail() throws Exception {
1:04ee70a:         createBroker(transportType + "://localhost:0?wireFormat.default.maxFrameSize=10");
1:04ee70a: 
1:04ee70a:         ConnectionFactory factory = new ActiveMQConnectionFactory(url);
1:04ee70a:         sendMessage(factory.createConnection());
1:04ee70a:     }
1:04ee70a: 
1:04ee70a:     @Test
1:04ee70a:     public void testUrlConfigurationOpenWireSuccess() throws Exception {
1:31c55f7:         // Will work because max frame size only applies to stomp
1:31c55f7:         createBroker(transportType + "://localhost:0?wireFormat.stomp.maxFrameSize=10");
1:04ee70a: 
1:04ee70a:         ConnectionFactory factory = new ActiveMQConnectionFactory(url);
1:04ee70a:         sendMessage(factory.createConnection());
1:04ee70a:     }
1:04ee70a: 
1:31c55f7:     @Test(expected = JMSException.class)
1:04ee70a:     public void testUrlConfigurationOpenWireNotAvailable() throws Exception {
1:31c55f7:         // only stomp is available so should fail
1:31c55f7:         createBroker(transportType + "://localhost:0?auto.protocols=stomp");
1:04ee70a: 
1:04ee70a:         ConnectionFactory factory = new ActiveMQConnectionFactory(url);
1:04ee70a:         sendMessage(factory.createConnection());
1:04ee70a:     }
1:04ee70a: 
1:04ee70a:     @Test
1:04ee70a:     public void testUrlConfigurationOpenWireAvailable() throws Exception {
1:31c55f7:         // only open wire is available
1:04ee70a:         createBroker(transportType + "://localhost:0?auto.protocols=default");
1:04ee70a: 
1:04ee70a:         ConnectionFactory factory = new ActiveMQConnectionFactory(url);
1:04ee70a:         sendMessage(factory.createConnection());
1:04ee70a:     }
1:04ee70a: 
1:04ee70a:     @Test
1:04ee70a:     public void testUrlConfigurationOpenWireAndAmqpAvailable() throws Exception {
1:31c55f7:         createBroker(transportType + "://localhost:0?auto.protocols=default,stomp");
1:04ee70a: 
1:04ee70a:         ConnectionFactory factory = new ActiveMQConnectionFactory(url);
1:04ee70a:         sendMessage(factory.createConnection());
1:04ee70a:     }
1:04ee70a: 
1:04ee70a:     protected void sendMessage(Connection connection) throws JMSException {
1:04ee70a:         connection.start();
1:04ee70a:         Session session = connection.createSession(false, Session.AUTO_ACKNOWLEDGE);
1:04ee70a:         MessageProducer producer = session.createProducer(new ActiveMQQueue("test"));
1:04ee70a:         ActiveMQTextMessage message = new ActiveMQTextMessage();
1:04ee70a:         message.setText("this is a test");
1:04ee70a:         producer.send(message);
1:04ee70a:     }
1:04ee70a: }
============================================================================
author:Timothy Bish
-------------------------------------------------------------------------------
commit:31c55f7
/////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////
1:         return Arrays.asList(new Object[][] { { "auto" }, { "auto+nio" }, { "auto+ssl" }, { "auto+nio+ssl" } });
/////////////////////////////////////////////////////////////////////////
1:     public void tearDown() throws Exception {
/////////////////////////////////////////////////////////////////////////
1:     @Test(expected = JMSException.class)
/////////////////////////////////////////////////////////////////////////
1:     @Test(expected = JMSException.class)
/////////////////////////////////////////////////////////////////////////
1:         // Will work because max frame size only applies to stomp
1:         createBroker(transportType + "://localhost:0?wireFormat.stomp.maxFrameSize=10");
1:     @Test(expected = JMSException.class)
1:         // only stomp is available so should fail
1:         createBroker(transportType + "://localhost:0?auto.protocols=stomp");
/////////////////////////////////////////////////////////////////////////
1:         // only open wire is available
/////////////////////////////////////////////////////////////////////////
1:         createBroker(transportType + "://localhost:0?auto.protocols=default,stomp");
/////////////////////////////////////////////////////////////////////////
author:Christopher L. Shannon (cshannon)
-------------------------------------------------------------------------------
commit:04ee70a
/////////////////////////////////////////////////////////////////////////
1: /**
1:  * Licensed to the Apache Software Foundation (ASF) under one or more
1:  * contributor license agreements.  See the NOTICE file distributed with
1:  * this work for additional information regarding copyright ownership.
1:  * The ASF licenses this file to You under the Apache License, Version 2.0
1:  * (the "License"); you may not use this file except in compliance with
1:  * the License.  You may obtain a copy of the License at
1:  *
1:  *      http://www.apache.org/licenses/LICENSE-2.0
1:  *
1:  * Unless required by applicable law or agreed to in writing, software
1:  * distributed under the License is distributed on an "AS IS" BASIS,
1:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:  * See the License for the specific language governing permissions and
1:  * limitations under the License.
1:  */
1: package org.apache.activemq.transport.auto;
1: 
1: import java.util.Arrays;
1: 
1: import javax.jms.Connection;
1: import javax.jms.ConnectionFactory;
1: import javax.jms.JMSException;
1: import javax.jms.MessageProducer;
1: import javax.jms.Session;
1: 
1: import org.apache.activemq.ActiveMQConnectionFactory;
1: import org.apache.activemq.broker.BrokerService;
1: import org.apache.activemq.command.ActiveMQQueue;
1: import org.apache.activemq.command.ActiveMQTextMessage;
1: import org.junit.After;
1: import org.junit.Before;
1: import org.junit.Test;
1: import org.junit.runner.RunWith;
1: import org.junit.runners.Parameterized;
1: import org.junit.runners.Parameterized.Parameters;
1: 
1: 
1: @RunWith(Parameterized.class)
1: public class AutoTransportConfigureTest {
1: 
1:     public static final String KEYSTORE_TYPE = "jks";
1:     public static final String PASSWORD = "password";
1:     public static final String SERVER_KEYSTORE = "src/test/resources/server.keystore";
1:     public static final String TRUST_KEYSTORE = "src/test/resources/client.keystore";
1: 
1:     private BrokerService brokerService;
1:     private String url;
1: 
1:     @Parameters
1:     public static Iterable<Object[]> parameters() {
0:         return Arrays.asList(new Object[][]{
0:                 {"auto"},
0:                 {"auto+nio"},
0:                 {"auto+ssl"},
0:                 {"auto+nio+ssl"}
0:         });
1:     }
1: 
1:     private String transportType;
1: 
1:     public AutoTransportConfigureTest(String transportType) {
1:         super();
1:         this.transportType = transportType;
1:     }
1: 
1:     @Before
1:     public void setUp() throws Exception {
1:         System.setProperty("javax.net.ssl.trustStore", TRUST_KEYSTORE);
1:         System.setProperty("javax.net.ssl.trustStorePassword", PASSWORD);
1:         System.setProperty("javax.net.ssl.trustStoreType", KEYSTORE_TYPE);
1:         System.setProperty("javax.net.ssl.keyStore", SERVER_KEYSTORE);
1:         System.setProperty("javax.net.ssl.keyStorePassword", PASSWORD);
1:         System.setProperty("javax.net.ssl.keyStoreType", KEYSTORE_TYPE);
1: 
1:     }
1: 
1:     @After
0:     public void tearDown() throws Exception{
1:         if (this.brokerService != null) {
1:             this.brokerService.stop();
1:             this.brokerService.waitUntilStopped();
1:         }
1:     }
1: 
1:     protected void createBroker(String uriConfig) throws Exception {
1:         brokerService = new BrokerService();
1:         brokerService.setPersistent(false);
1:         url = brokerService.addConnector(uriConfig).getPublishableConnectString();
1:         brokerService.start();
1:         brokerService.waitUntilStarted();
1: 
1:     }
1: 
0:     @Test(expected=JMSException.class)
1:     public void testUrlConfiguration() throws Exception {
1:         createBroker(transportType + "://localhost:0?wireFormat.maxFrameSize=10");
1: 
1:         ConnectionFactory factory = new ActiveMQConnectionFactory(url);
1:         sendMessage(factory.createConnection());
1:     }
1: 
0:     @Test(expected=JMSException.class)
1:     public void testUrlConfigurationOpenWireFail() throws Exception {
1:         createBroker(transportType + "://localhost:0?wireFormat.default.maxFrameSize=10");
1: 
1:         ConnectionFactory factory = new ActiveMQConnectionFactory(url);
1:         sendMessage(factory.createConnection());
1:     }
1: 
1:     @Test
1:     public void testUrlConfigurationOpenWireSuccess() throws Exception {
0:         //Will work because max frame size only applies to amqp
0:         createBroker(transportType + "://localhost:0?wireFormat.amqp.maxFrameSize=10");
1: 
1:         ConnectionFactory factory = new ActiveMQConnectionFactory(url);
1:         sendMessage(factory.createConnection());
1:     }
1: 
0:     @Test(expected=JMSException.class)
1:     public void testUrlConfigurationOpenWireNotAvailable() throws Exception {
0:         //only amqp is available so should fail
0:         createBroker(transportType + "://localhost:0?auto.protocols=amqp");
1: 
1:         ConnectionFactory factory = new ActiveMQConnectionFactory(url);
1:         sendMessage(factory.createConnection());
1:     }
1: 
1:     @Test
1:     public void testUrlConfigurationOpenWireAvailable() throws Exception {
0:         //only open wire is available
1:         createBroker(transportType + "://localhost:0?auto.protocols=default");
1: 
1:         ConnectionFactory factory = new ActiveMQConnectionFactory(url);
1:         sendMessage(factory.createConnection());
1:     }
1: 
1:     @Test
1:     public void testUrlConfigurationOpenWireAndAmqpAvailable() throws Exception {
0:         createBroker(transportType + "://localhost:0?auto.protocols=default,amqp");
1: 
1:         ConnectionFactory factory = new ActiveMQConnectionFactory(url);
1:         sendMessage(factory.createConnection());
1:     }
1: 
1: 
1:     protected void sendMessage(Connection connection) throws JMSException {
1:         connection.start();
1:         Session session = connection.createSession(false, Session.AUTO_ACKNOWLEDGE);
1:         MessageProducer producer = session.createProducer(new ActiveMQQueue("test"));
1:         ActiveMQTextMessage message = new ActiveMQTextMessage();
1:         message.setText("this is a test");
1:         producer.send(message);
1:     }
1: 
1: }
============================================================================