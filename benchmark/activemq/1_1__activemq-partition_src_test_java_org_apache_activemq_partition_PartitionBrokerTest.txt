1:7c63788: /**
1:7c63788:  * Licensed to the Apache Software Foundation (ASF) under one or more
1:7c63788:  * contributor license agreements.  See the NOTICE file distributed with
1:7c63788:  * this work for additional information regarding copyright ownership.
1:7c63788:  * The ASF licenses this file to You under the Apache License, Version 2.0
1:7c63788:  * (the "License"); you may not use this file except in compliance with
1:7c63788:  * the License.  You may obtain a copy of the License at
1:7c63788:  *
1:7c63788:  *      http://www.apache.org/licenses/LICENSE-2.0
1:7c63788:  *
1:7c63788:  * Unless required by applicable law or agreed to in writing, software
1:7c63788:  * distributed under the License is distributed on an "AS IS" BASIS,
1:7c63788:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:7c63788:  * See the License for the specific language governing permissions and
1:7c63788:  * limitations under the License.
1:7c63788:  */
1:7c63788: package org.apache.activemq.partition;
1:7c63788: 
1:7c63788: import org.apache.activemq.ActiveMQConnectionFactory;
1:7c63788: import org.apache.activemq.AutoFailTestSupport;
1:7c63788: import org.apache.activemq.broker.BrokerPlugin;
1:7c63788: import org.apache.activemq.broker.BrokerService;
1:7c63788: import org.apache.activemq.broker.TransportConnector;
1:7c63788: import org.apache.activemq.partition.dto.Partitioning;
1:7c63788: import org.apache.activemq.partition.dto.Target;
1:25f70ad: import org.junit.After;
1:25f70ad: import org.junit.Before;
1:25f70ad: import org.junit.Test;
1:7c63788: 
1:f88f280: import javax.jms.*;
1:7c63788: import java.io.IOException;
1:7c63788: import java.net.URISyntaxException;
1:7c63788: import java.util.ArrayList;
1:7c63788: import java.util.HashMap;
1:7c63788: import java.util.concurrent.TimeUnit;
1:7c63788: 
1:25f70ad: import static org.junit.Assert.*;
1:25f70ad: 
1:7c63788: /**
1:7c63788:  * Unit tests for the PartitionBroker plugin.
1:7c63788:  */
1:25f70ad: public class PartitionBrokerTest {
1:7c63788: 
1:7c63788:     protected HashMap<String, BrokerService> brokers = new HashMap<String, BrokerService>();
1:7c63788:     protected ArrayList<Connection> connections = new ArrayList<Connection>();
1:7c63788:     Partitioning partitioning;
1:7c63788: 
1:25f70ad:     @Before
1:25f70ad:     public void setUp() throws Exception {
1:7c63788:         partitioning = new Partitioning();
1:7c63788:         partitioning.brokers = new HashMap<String, String>();
2:7c63788:     }
1:7c63788: 
1:25f70ad:     /**
1:25f70ad:      * Partitioning can only re-direct failover clients since those
1:25f70ad:      * can re-connect and re-establish their state with another broker.
1:25f70ad:      */
1:25f70ad:     @Test(timeout = 1000*60*60)
1:25f70ad:     public void testNonFailoverClientHasNoPartitionEffect() throws Exception {
1:7c63788: 
1:25f70ad:         partitioning.byClientId = new HashMap<String, Target>();
1:25f70ad:         partitioning.byClientId.put("client1", new Target("broker1"));
1:25f70ad:         createBrokerCluster(2);
1:25f70ad: 
1:25f70ad:         Connection connection = createConnectionToUrl(getConnectURL("broker2"));
1:25f70ad:         within(5, TimeUnit.SECONDS, new Task() {
1:25f70ad:             public void run() throws Exception {
1:25f70ad:                 assertEquals(0, getTransportConnector("broker1").getConnections().size());
1:25f70ad:                 assertEquals(1, getTransportConnector("broker2").getConnections().size());
1:25f70ad:             }
1:25f70ad:         });
1:25f70ad: 
1:25f70ad:         connection.setClientID("client1");
1:25f70ad:         connection.start();
1:25f70ad: 
1:25f70ad:         Thread.sleep(1000);
1:25f70ad:         assertEquals(0, getTransportConnector("broker1").getConnections().size());
1:25f70ad:         assertEquals(1, getTransportConnector("broker2").getConnections().size());
1:25f70ad:     }
1:25f70ad: 
1:25f70ad:     @Test(timeout = 1000*60*60)
1:7c63788:     public void testPartitionByClientId() throws Exception {
1:7c63788:         partitioning.byClientId = new HashMap<String, Target>();
1:7c63788:         partitioning.byClientId.put("client1", new Target("broker1"));
1:7c63788:         partitioning.byClientId.put("client2", new Target("broker2"));
1:7c63788:         createBrokerCluster(2);
1:7c63788: 
2:7c63788:         Connection connection = createConnectionTo("broker2");
1:7c63788: 
1:7c63788:         within(5, TimeUnit.SECONDS, new Task() {
1:7c63788:             public void run() throws Exception {
1:7c63788:                 assertEquals(0, getTransportConnector("broker1").getConnections().size());
1:7c63788:                 assertEquals(1, getTransportConnector("broker2").getConnections().size());
1:7c63788:             }
1:7c63788:         });
1:7c63788: 
1:7c63788:         connection.setClientID("client1");
1:7c63788:         connection.start();
1:7c63788:         within(5, TimeUnit.SECONDS, new Task() {
1:7c63788:             public void run() throws Exception {
1:7c63788:                 assertEquals(1, getTransportConnector("broker1").getConnections().size());
1:7c63788:                 assertEquals(0, getTransportConnector("broker2").getConnections().size());
1:7c63788:             }
1:7c63788:         });
1:7c63788:     }
1:f88f280: 
1:25f70ad:     @Test(timeout = 1000*60*60)
1:7c63788:     public void testPartitionByQueue() throws Exception {
1:7c63788:         partitioning.byQueue = new HashMap<String, Target>();
1:7c63788:         partitioning.byQueue.put("foo", new Target("broker1"));
1:7c63788:         createBrokerCluster(2);
1:7c63788: 
1:f88f280:         Connection connection2 = createConnectionTo("broker2");
1:7c63788: 
1:7c63788:         within(5, TimeUnit.SECONDS, new Task() {
1:7c63788:             public void run() throws Exception {
1:7c63788:                 assertEquals(0, getTransportConnector("broker1").getConnections().size());
1:7c63788:                 assertEquals(1, getTransportConnector("broker2").getConnections().size());
1:7c63788:             }
1:7c63788:         });
1:7c63788: 
1:f88f280:         Session session2 = connection2.createSession(false, Session.AUTO_ACKNOWLEDGE);
1:f88f280:         MessageConsumer consumer = session2.createConsumer(session2.createQueue("foo"));
1:7c63788: 
1:7c63788:         within(5, TimeUnit.SECONDS, new Task() {
1:7c63788:             public void run() throws Exception {
1:7c63788:                 assertEquals(1, getTransportConnector("broker1").getConnections().size());
1:7c63788:                 assertEquals(0, getTransportConnector("broker2").getConnections().size());
1:7c63788:             }
1:7c63788:         });
1:7c63788: 
1:f88f280:         Connection connection1 = createConnectionTo("broker2");
1:f88f280:         Session session1 = connection1.createSession(false, Session.AUTO_ACKNOWLEDGE);
1:f88f280:         MessageProducer producer = session1.createProducer(session1.createQueue("foo"));
1:f88f280: 
1:f88f280:         within(5, TimeUnit.SECONDS, new Task() {
1:f88f280:             public void run() throws Exception {
1:f88f280:                 assertEquals(1, getTransportConnector("broker1").getConnections().size());
1:f88f280:                 assertEquals(1, getTransportConnector("broker2").getConnections().size());
1:f88f280:             }
1:f88f280:         });
1:f88f280: 
1:f88f280:         for (int i = 0; i < 100; i++) {
1:f88f280:             producer.send(session1.createTextMessage("#" + i));
1:f88f280:         }
1:f88f280: 
1:f88f280:         within(5, TimeUnit.SECONDS, new Task() {
1:f88f280:             public void run() throws Exception {
1:f88f280:                 assertEquals(2, getTransportConnector("broker1").getConnections().size());
1:f88f280:                 assertEquals(0, getTransportConnector("broker2").getConnections().size());
1:f88f280:             }
1:f88f280:         });
1:7c63788:     }
1:f88f280: 
1:f88f280: 
1:7c63788:     static interface Task {
1:7c63788:         public void run() throws Exception;
1:7c63788:     }
1:7c63788: 
1:7c63788:     private void within(int time, TimeUnit unit, Task task) throws InterruptedException {
1:7c63788:         long timeMS = unit.toMillis(time);
1:7c63788:         long deadline = System.currentTimeMillis() + timeMS;
1:7c63788:         while (true) {
1:7c63788:             try {
1:7c63788:                 task.run();
1:7c63788:                 return;
1:7c63788:             } catch (Throwable e) {
1:7c63788:                 long remaining = deadline - System.currentTimeMillis();
1:7c63788:                 if( remaining <=0 ) {
1:7c63788:                     if( e instanceof RuntimeException ) {
1:7c63788:                         throw (RuntimeException)e;
1:7c63788:                     }
1:7c63788:                     if( e instanceof Error ) {
1:7c63788:                         throw (Error)e;
1:7c63788:                     }
1:7c63788:                     throw new RuntimeException(e);
1:7c63788:                 }
1:7c63788:                 Thread.sleep(Math.min(timeMS/10, remaining));
1:7c63788:             }
1:7c63788:         }
1:7c63788:     }
1:7c63788: 
1:7c63788:     protected Connection createConnectionTo(String brokerId) throws IOException, URISyntaxException, JMSException {
1:25f70ad:         return createConnectionToUrl("failover://(" + getConnectURL(brokerId) + ")");
1:25f70ad:     }
1:25f70ad: 
1:25f70ad:     private Connection createConnectionToUrl(String url) throws JMSException {
1:7c63788:         ActiveMQConnectionFactory factory = new ActiveMQConnectionFactory(url);
1:7c63788:         Connection connection = factory.createConnection();
1:7c63788:         connections.add(connection);
1:7c63788:         return connection;
1:7c63788:     }
1:7c63788: 
1:7c63788:     protected String getConnectURL(String broker) throws IOException, URISyntaxException {
1:7c63788:         TransportConnector tcp = getTransportConnector(broker);
1:7c63788:         return tcp.getConnectUri().toString();
1:7c63788:     }
1:7c63788: 
1:7c63788:     private TransportConnector getTransportConnector(String broker) {
1:7c63788:         BrokerService brokerService = brokers.get(broker);
1:7c63788:         if( brokerService==null ) {
1:7c63788:             throw new IllegalArgumentException("Invalid broker id");
1:7c63788:         }
1:7c63788:         return brokerService.getTransportConnectorByName("tcp");
1:7c63788:     }
1:7c63788: 
1:7c63788:     protected void createBrokerCluster(int brokerCount) throws Exception {
1:7c63788:         for (int i = 1; i <= brokerCount; i++) {
1:7c63788:             String brokerId = "broker" + i;
1:7c63788:             BrokerService broker = createBroker(brokerId);
1:7c63788:             broker.setPersistent(false);
1:7c63788:             broker.addConnector("tcp://localhost:0").setName("tcp");
1:25f70ad:             addPartitionBrokerPlugin(broker);
1:7c63788:             broker.start();
1:7c63788:             broker.waitUntilStarted();
1:7c63788:             partitioning.brokers.put(brokerId, getConnectURL(brokerId));
1:7c63788:         }
1:7c63788:     }
1:7c63788: 
1:25f70ad:     protected void addPartitionBrokerPlugin(BrokerService broker) {
1:25f70ad:         PartitionBrokerPlugin plugin = new PartitionBrokerPlugin();
1:25f70ad:         plugin.setConfig(partitioning);
1:25f70ad:         broker.setPlugins(new BrokerPlugin[]{plugin});
1:25f70ad:     }
1:25f70ad: 
1:7c63788:     protected BrokerService createBroker(String name) {
1:7c63788:         BrokerService broker = new BrokerService();
1:7c63788:         broker.setBrokerName(name);
1:7c63788:         brokers.put(name, broker);
1:7c63788:         return broker;
1:7c63788:     }
1:7c63788: 
1:25f70ad:     @After
1:25f70ad:     public void tearDown() throws Exception {
1:7c63788:         for (Connection connection : connections) {
1:7c63788:             try {
1:7c63788:                 connection.close();
1:7c63788:             } catch (Throwable e) {
1:7c63788:             }
1:7c63788:         }
1:7c63788:         connections.clear();
1:7c63788:         for (BrokerService broker : brokers.values()) {
1:7c63788:             try {
1:7c63788:                 broker.stop();
1:7c63788:                 broker.waitUntilStopped();
1:7c63788:             } catch (Throwable e) {
1:7c63788:             }
1:7c63788:         }
1:7c63788:         brokers.clear();
1:7c63788:     }
1:7c63788: 
1:7c63788: }
============================================================================
author:Hiram Chirino
-------------------------------------------------------------------------------
commit:25f70ad
/////////////////////////////////////////////////////////////////////////
1: import org.junit.After;
1: import org.junit.Before;
1: import org.junit.Test;
/////////////////////////////////////////////////////////////////////////
1: import static org.junit.Assert.*;
1: 
1: public class PartitionBrokerTest {
1:     @Before
1:     public void setUp() throws Exception {
1:     /**
1:      * Partitioning can only re-direct failover clients since those
1:      * can re-connect and re-establish their state with another broker.
1:      */
1:     @Test(timeout = 1000*60*60)
1:     public void testNonFailoverClientHasNoPartitionEffect() throws Exception {
1:         partitioning.byClientId = new HashMap<String, Target>();
1:         partitioning.byClientId.put("client1", new Target("broker1"));
1:         createBrokerCluster(2);
1: 
1:         Connection connection = createConnectionToUrl(getConnectURL("broker2"));
1:         within(5, TimeUnit.SECONDS, new Task() {
1:             public void run() throws Exception {
1:                 assertEquals(0, getTransportConnector("broker1").getConnections().size());
1:                 assertEquals(1, getTransportConnector("broker2").getConnections().size());
1:             }
1:         });
1: 
1:         connection.setClientID("client1");
1:         connection.start();
1: 
1:         Thread.sleep(1000);
1:         assertEquals(0, getTransportConnector("broker1").getConnections().size());
1:         assertEquals(1, getTransportConnector("broker2").getConnections().size());
1:     }
1: 
1:     @Test(timeout = 1000*60*60)
/////////////////////////////////////////////////////////////////////////
1:     @Test(timeout = 1000*60*60)
/////////////////////////////////////////////////////////////////////////
1:         return createConnectionToUrl("failover://(" + getConnectURL(brokerId) + ")");
1:     }
1: 
1:     private Connection createConnectionToUrl(String url) throws JMSException {
/////////////////////////////////////////////////////////////////////////
1:             addPartitionBrokerPlugin(broker);
1:     protected void addPartitionBrokerPlugin(BrokerService broker) {
1:         PartitionBrokerPlugin plugin = new PartitionBrokerPlugin();
1:         plugin.setConfig(partitioning);
1:         broker.setPlugins(new BrokerPlugin[]{plugin});
1:     }
1: 
/////////////////////////////////////////////////////////////////////////
1:     @After
1:     public void tearDown() throws Exception {
/////////////////////////////////////////////////////////////////////////
commit:f88f280
/////////////////////////////////////////////////////////////////////////
1: import javax.jms.*;
/////////////////////////////////////////////////////////////////////////
1:         Connection connection2 = createConnectionTo("broker2");
/////////////////////////////////////////////////////////////////////////
1:         Session session2 = connection2.createSession(false, Session.AUTO_ACKNOWLEDGE);
1:         MessageConsumer consumer = session2.createConsumer(session2.createQueue("foo"));
/////////////////////////////////////////////////////////////////////////
1: 
1:         Connection connection1 = createConnectionTo("broker2");
1:         Session session1 = connection1.createSession(false, Session.AUTO_ACKNOWLEDGE);
1:         MessageProducer producer = session1.createProducer(session1.createQueue("foo"));
1: 
1:         within(5, TimeUnit.SECONDS, new Task() {
1:             public void run() throws Exception {
1:                 assertEquals(1, getTransportConnector("broker1").getConnections().size());
1:                 assertEquals(1, getTransportConnector("broker2").getConnections().size());
1:             }
1:         });
1: 
1:         for (int i = 0; i < 100; i++) {
1:             producer.send(session1.createTextMessage("#" + i));
1:         }
1: 
1:         within(5, TimeUnit.SECONDS, new Task() {
1:             public void run() throws Exception {
1:                 assertEquals(2, getTransportConnector("broker1").getConnections().size());
1:                 assertEquals(0, getTransportConnector("broker2").getConnections().size());
1:             }
1:         });
1: 
1: 
commit:7c63788
/////////////////////////////////////////////////////////////////////////
1: /**
1:  * Licensed to the Apache Software Foundation (ASF) under one or more
1:  * contributor license agreements.  See the NOTICE file distributed with
1:  * this work for additional information regarding copyright ownership.
1:  * The ASF licenses this file to You under the Apache License, Version 2.0
1:  * (the "License"); you may not use this file except in compliance with
1:  * the License.  You may obtain a copy of the License at
1:  *
1:  *      http://www.apache.org/licenses/LICENSE-2.0
1:  *
1:  * Unless required by applicable law or agreed to in writing, software
1:  * distributed under the License is distributed on an "AS IS" BASIS,
1:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:  * See the License for the specific language governing permissions and
1:  * limitations under the License.
1:  */
1: package org.apache.activemq.partition;
1: 
1: import org.apache.activemq.ActiveMQConnectionFactory;
1: import org.apache.activemq.AutoFailTestSupport;
1: import org.apache.activemq.broker.BrokerPlugin;
1: import org.apache.activemq.broker.BrokerService;
1: import org.apache.activemq.broker.TransportConnector;
1: import org.apache.activemq.partition.dto.Partitioning;
1: import org.apache.activemq.partition.dto.Target;
1: 
0: import javax.jms.Connection;
0: import javax.jms.JMSException;
0: import javax.jms.MessageProducer;
0: import javax.jms.Session;
1: import java.io.IOException;
1: import java.net.URISyntaxException;
1: import java.util.ArrayList;
1: import java.util.HashMap;
1: import java.util.concurrent.TimeUnit;
1: 
1: /**
1:  * Unit tests for the PartitionBroker plugin.
1:  */
0: public class PartitionBrokerTest extends AutoFailTestSupport {
1: 
1:     protected HashMap<String, BrokerService> brokers = new HashMap<String, BrokerService>();
1:     protected ArrayList<Connection> connections = new ArrayList<Connection>();
1:     Partitioning partitioning;
1: 
0:     @Override
0:     protected void setUp() throws Exception {
0:         super.setUp();
1:         partitioning = new Partitioning();
1:         partitioning.brokers = new HashMap<String, String>();
1:     }
1: 
1: 
1:     public void testPartitionByClientId() throws Exception {
1:         partitioning.byClientId = new HashMap<String, Target>();
1:         partitioning.byClientId.put("client1", new Target("broker1"));
1:         partitioning.byClientId.put("client2", new Target("broker2"));
1:         createBrokerCluster(2);
1: 
1:         Connection connection = createConnectionTo("broker2");
1: 
1:         within(5, TimeUnit.SECONDS, new Task() {
1:             public void run() throws Exception {
1:                 assertEquals(0, getTransportConnector("broker1").getConnections().size());
1:                 assertEquals(1, getTransportConnector("broker2").getConnections().size());
1:             }
1:         });
1: 
1:         connection.setClientID("client1");
1:         connection.start();
1:         within(5, TimeUnit.SECONDS, new Task() {
1:             public void run() throws Exception {
1:                 assertEquals(1, getTransportConnector("broker1").getConnections().size());
1:                 assertEquals(0, getTransportConnector("broker2").getConnections().size());
1:             }
1:         });
1:     }
1: 
1:     public void testPartitionByQueue() throws Exception {
1:         partitioning.byQueue = new HashMap<String, Target>();
1:         partitioning.byQueue.put("foo", new Target("broker1"));
1:         createBrokerCluster(2);
1: 
1:         Connection connection = createConnectionTo("broker2");
1: 
1:         within(5, TimeUnit.SECONDS, new Task() {
1:             public void run() throws Exception {
1:                 assertEquals(0, getTransportConnector("broker1").getConnections().size());
1:                 assertEquals(1, getTransportConnector("broker2").getConnections().size());
1:             }
1:         });
1: 
0:         Session session = connection.createSession(false, Session.AUTO_ACKNOWLEDGE);
0:         MessageProducer producer = session.createProducer(session.createQueue("foo"));
0:         for (int i = 0; i < 100; i++) {
0:             producer.send(session.createTextMessage("#"+i));
1:         }
1: 
1:         within(5, TimeUnit.SECONDS, new Task() {
1:             public void run() throws Exception {
1:                 assertEquals(1, getTransportConnector("broker1").getConnections().size());
1:                 assertEquals(0, getTransportConnector("broker2").getConnections().size());
1:             }
1:         });
1:     }
1:     static interface Task {
1:         public void run() throws Exception;
1:     }
1: 
1:     private void within(int time, TimeUnit unit, Task task) throws InterruptedException {
1:         long timeMS = unit.toMillis(time);
1:         long deadline = System.currentTimeMillis() + timeMS;
1:         while (true) {
1:             try {
1:                 task.run();
1:                 return;
1:             } catch (Throwable e) {
1:                 long remaining = deadline - System.currentTimeMillis();
1:                 if( remaining <=0 ) {
1:                     if( e instanceof RuntimeException ) {
1:                         throw (RuntimeException)e;
1:                     }
1:                     if( e instanceof Error ) {
1:                         throw (Error)e;
1:                     }
1:                     throw new RuntimeException(e);
1:                 }
1:                 Thread.sleep(Math.min(timeMS/10, remaining));
1:             }
1:         }
1:     }
1: 
1:     protected Connection createConnectionTo(String brokerId) throws IOException, URISyntaxException, JMSException {
0:         String url = "failover://(" + getConnectURL(brokerId) + ")";
1:         ActiveMQConnectionFactory factory = new ActiveMQConnectionFactory(url);
1:         Connection connection = factory.createConnection();
1:         connections.add(connection);
1:         return connection;
1:     }
1: 
1:     protected String getConnectURL(String broker) throws IOException, URISyntaxException {
1:         TransportConnector tcp = getTransportConnector(broker);
1:         return tcp.getConnectUri().toString();
1:     }
1: 
1:     private TransportConnector getTransportConnector(String broker) {
1:         BrokerService brokerService = brokers.get(broker);
1:         if( brokerService==null ) {
1:             throw new IllegalArgumentException("Invalid broker id");
1:         }
1:         return brokerService.getTransportConnectorByName("tcp");
1:     }
1: 
1:     protected void createBrokerCluster(int brokerCount) throws Exception {
1:         for (int i = 1; i <= brokerCount; i++) {
1:             String brokerId = "broker" + i;
1:             BrokerService broker = createBroker(brokerId);
1:             broker.setPersistent(false);
0:             PartitionBrokerPlugin plugin = new PartitionBrokerPlugin();
0:             plugin.setConfig(partitioning);
0:             broker.setPlugins(new BrokerPlugin[]{plugin});
1:             broker.addConnector("tcp://localhost:0").setName("tcp");
1:             broker.start();
1:             broker.waitUntilStarted();
1:             partitioning.brokers.put(brokerId, getConnectURL(brokerId));
1:         }
1:     }
1: 
1:     protected BrokerService createBroker(String name) {
1:         BrokerService broker = new BrokerService();
1:         broker.setBrokerName(name);
1:         brokers.put(name, broker);
1:         return broker;
1:     }
1: 
0:     @Override
0:     protected void tearDown() throws Exception {
1:         for (Connection connection : connections) {
1:             try {
1:                 connection.close();
1:             } catch (Throwable e) {
1:             }
1:         }
1:         connections.clear();
1:         for (BrokerService broker : brokers.values()) {
1:             try {
1:                 broker.stop();
1:                 broker.waitUntilStopped();
1:             } catch (Throwable e) {
1:             }
1:         }
1:         brokers.clear();
0:         super.tearDown();
1:     }
1: 
1: }
============================================================================