1:d29ca2a: /**
1:57b4941:  * Licensed to the Apache Software Foundation (ASF) under one or more
1:57b4941:  * contributor license agreements.  See the NOTICE file distributed with
1:57b4941:  * this work for additional information regarding copyright ownership.
1:57b4941:  * The ASF licenses this file to You under the Apache License, Version 2.0
1:57b4941:  * (the "License"); you may not use this file except in compliance with
1:57b4941:  * the License.  You may obtain a copy of the License at
3:d29ca2a:  *
1:230a86c:  *      http://www.apache.org/licenses/LICENSE-2.0
1:d29ca2a:  *
1:d29ca2a:  * Unless required by applicable law or agreed to in writing, software
1:d29ca2a:  * distributed under the License is distributed on an "AS IS" BASIS,
1:d29ca2a:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:d29ca2a:  * See the License for the specific language governing permissions and
1:d29ca2a:  * limitations under the License.
1:d29ca2a:  */
1:d29ca2a: package org.apache.activemq.broker.region.policy;
2:d29ca2a: 
1:74a7a8b: import javax.jms.MessageListener;
1:74a7a8b: 
1:d29ca2a: import org.apache.activemq.command.ActiveMQDestination;
1:d29ca2a: import org.apache.activemq.command.Message;
1:d29ca2a: 
1:d29ca2a: /**
1:d29ca2a:  * Represents some kind of query which will load initial messages from some source for a new topic subscriber.
1:0bbc0ac:  * 
1:d29ca2a:  * 
1:d29ca2a:  */
1:d29ca2a: public interface MessageQuery {
1:d29ca2a:     
1:d29ca2a:     /**
1:d29ca2a:      * Executes the query for messages; each message is passed into the listener
1:d29ca2a:      * 
1:d29ca2a:      * @param destination the destination on which the query is to be performed
1:d29ca2a:      * @param listener is the listener to notify as each message is created or loaded
1:d29ca2a:      */
1:fc00993:     void execute(ActiveMQDestination destination, MessageListener listener) throws Exception;
1:d29ca2a: 
1:d29ca2a:     /**
1:d29ca2a:      * Returns true if the given update is valid and does not overlap with the initial message query.
1:d29ca2a:      * When performing an initial load from some source, there is a chance that an update may occur which is logically before
1:d29ca2a:      * the message sent on the initial load - so this method provides a hook where the query instance can keep track of the version IDs
1:d29ca2a:      * of the messages sent so that if an older version is sent as an update it can be excluded to avoid going backwards in time.
1:d29ca2a:      * 
1:d29ca2a:      * e.g. if the execute() method creates version 2 of an object and then an update message is sent for version 1, this method should return false to 
1:d29ca2a:      * hide the old update message.
1:d29ca2a:      * 
1:d29ca2a:      * @param message the update message which may have been sent before the query actually completed
1:d29ca2a:      * @return true if the update message is valid otherwise false in which case the update message will be discarded.
1:d29ca2a:      */
1:fc00993:     boolean validateUpdate(Message message);
1:d29ca2a: 
1:d29ca2a: }
============================================================================
author:Hiram R. Chirino
-------------------------------------------------------------------------------
commit:58aca86
commit:0bbc0ac
/////////////////////////////////////////////////////////////////////////
1:  * 
commit:fc00993
/////////////////////////////////////////////////////////////////////////
1:     void execute(ActiveMQDestination destination, MessageListener listener) throws Exception;
/////////////////////////////////////////////////////////////////////////
1:     boolean validateUpdate(Message message);
commit:74a7a8b
/////////////////////////////////////////////////////////////////////////
1: import javax.jms.MessageListener;
1: 
commit:230a86c
/////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////
1:  *      http://www.apache.org/licenses/LICENSE-2.0
commit:57b4941
/////////////////////////////////////////////////////////////////////////
1:  * Licensed to the Apache Software Foundation (ASF) under one or more
1:  * contributor license agreements.  See the NOTICE file distributed with
1:  * this work for additional information regarding copyright ownership.
1:  * The ASF licenses this file to You under the Apache License, Version 2.0
1:  * (the "License"); you may not use this file except in compliance with
1:  * the License.  You may obtain a copy of the License at
commit:48b4869
/////////////////////////////////////////////////////////////////////////
0:  * Copyright 2005-2006 The Apache Software Foundation
commit:d29ca2a
/////////////////////////////////////////////////////////////////////////
1: /**
1:  *
0:  * Copyright 2004 The Apache Software Foundation
1:  *
0:  * Licensed under the Apache License, Version 2.0 (the "License");
0:  * you may not use this file except in compliance with the License.
0:  * You may obtain a copy of the License at
1:  *
0:  * http://www.apache.org/licenses/LICENSE-2.0
1:  *
1:  * Unless required by applicable law or agreed to in writing, software
1:  * distributed under the License is distributed on an "AS IS" BASIS,
1:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:  * See the License for the specific language governing permissions and
1:  * limitations under the License.
1:  */
1: package org.apache.activemq.broker.region.policy;
1: 
1: import org.apache.activemq.command.ActiveMQDestination;
1: import org.apache.activemq.command.Message;
1: 
0: import javax.jms.MessageListener;
1: 
1: /**
1:  * Represents some kind of query which will load initial messages from some source for a new topic subscriber.
1:  * 
0:  * @version $Revision$
1:  */
1: public interface MessageQuery {
1:     
1:     /**
1:      * Executes the query for messages; each message is passed into the listener
1:      * 
1:      * @param destination the destination on which the query is to be performed
1:      * @param listener is the listener to notify as each message is created or loaded
1:      */
0:     public void execute(ActiveMQDestination destination, MessageListener listener) throws Exception;
1: 
1:     /**
1:      * Returns true if the given update is valid and does not overlap with the initial message query.
1:      * When performing an initial load from some source, there is a chance that an update may occur which is logically before
1:      * the message sent on the initial load - so this method provides a hook where the query instance can keep track of the version IDs
1:      * of the messages sent so that if an older version is sent as an update it can be excluded to avoid going backwards in time.
1:      * 
1:      * e.g. if the execute() method creates version 2 of an object and then an update message is sent for version 1, this method should return false to 
1:      * hide the old update message.
1:      * 
1:      * @param message the update message which may have been sent before the query actually completed
1:      * @return true if the update message is valid otherwise false in which case the update message will be discarded.
1:      */
0:     public boolean validateUpdate(Message message);
1: 
1: }
============================================================================