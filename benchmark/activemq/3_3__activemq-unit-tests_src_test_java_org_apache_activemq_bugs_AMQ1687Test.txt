1:6c86745: /**
1:6c86745:  * Licensed to the Apache Software Foundation (ASF) under one or more
1:6c86745:  * contributor license agreements.  See the NOTICE file distributed with
1:6c86745:  * this work for additional information regarding copyright ownership.
1:6c86745:  * The ASF licenses this file to You under the Apache License, Version 2.0
1:6c86745:  * (the "License"); you may not use this file except in compliance with
1:6c86745:  * the License.  You may obtain a copy of the License at
3:6c86745:  *
1:6c86745:  *      http://www.apache.org/licenses/LICENSE-2.0
1:b0c2a40:  *
1:6c86745:  * Unless required by applicable law or agreed to in writing, software
1:6c86745:  * distributed under the License is distributed on an "AS IS" BASIS,
1:6c86745:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:6c86745:  * See the License for the specific language governing permissions and
1:6c86745:  * limitations under the License.
1:6c86745:  */
1:6c86745: package org.apache.activemq.bugs;
9:6c86745: 
1:6c86745: import javax.jms.Connection;
1:6c86745: import javax.jms.ConnectionFactory;
1:6c86745: import javax.jms.MessageConsumer;
1:6c86745: import javax.jms.MessageProducer;
1:6c86745: import javax.jms.Session;
1:6c86745: 
1:6c86745: import org.apache.activemq.ActiveMQConnectionFactory;
1:6c86745: import org.apache.activemq.EmbeddedBrokerTestSupport;
1:6c86745: import org.apache.activemq.command.ActiveMQQueue;
1:6c86745: import org.apache.activemq.command.ActiveMQTopic;
1:6c86745: import org.apache.activemq.spring.ConsumerBean;
1:6c86745: 
1:6c86745: /**
1:42e51a3:  *
1:42e51a3:  *
1:6c86745:  */
1:6c86745: public class AMQ1687Test extends EmbeddedBrokerTestSupport {
1:6c86745: 
1:6c86745:     private Connection connection;
1:6c86745: 
1:6c86745:     @Override
1:6c86745:     protected ConnectionFactory createConnectionFactory() throws Exception {
1:6c86745:         //prefetch change is not required, but test will not fail w/o it, only spew errors in the AMQ log.
1:0e7d5a9:         return new ActiveMQConnectionFactory(
1:0e7d5a9:                 broker.getTransportConnectors().get(0).getPublishableConnectString() +"?jms.prefetchPolicy.all=5");
1:6c86745:     }
1:42e51a3: 
1:6c86745:     public void testVirtualTopicCreation() throws Exception {
1:6c86745:         if (connection == null) {
1:6c86745:             connection = createConnection();
1:6c86745:         }
1:6c86745:         connection.start();
1:6c86745: 
1:6c86745:         ConsumerBean messageList = new ConsumerBean();
1:6c86745:         messageList.setVerbose(true);
1:42e51a3: 
1:6c86745:         String queueAName = getVirtualTopicConsumerName();
1:6c86745:         String queueBName = getVirtualTopicConsumerNameB();
1:42e51a3: 
1:6c86745:         // create consumer 'cluster'
1:6c86745:         ActiveMQQueue queue1 = new ActiveMQQueue(queueAName);
1:6c86745:         ActiveMQQueue queue2 = new ActiveMQQueue(queueBName);
1:6c86745: 
1:6c86745:         Session session = connection.createSession(false, Session.AUTO_ACKNOWLEDGE);
1:6c86745:         MessageConsumer c1 = session.createConsumer(queue1);
1:6c86745:         MessageConsumer c2 = session.createConsumer(queue2);
1:6c86745: 
1:6c86745:         c1.setMessageListener(messageList);
1:6c86745:         c2.setMessageListener(messageList);
1:6c86745: 
1:6c86745:         // create topic producer
1:6c86745:         ActiveMQTopic topic = new ActiveMQTopic(getVirtualTopicName());
1:6c86745:         MessageProducer producer = session.createProducer(topic);
1:6c86745:         assertNotNull(producer);
1:6c86745: 
1:6c86745:         int total = 100;
1:6c86745:         for (int i = 0; i < total; i++) {
1:6c86745:             producer.send(session.createTextMessage("message: " + i));
1:6c86745:         }
1:42e51a3: 
1:6c86745:         messageList.assertMessagesArrived(total*2);
1:6c86745:     }
1:6c86745: 
1:6c86745:     protected String getVirtualTopicName() {
1:6c86745:         return "VirtualTopic.TEST";
1:6c86745:     }
1:6c86745: 
1:6c86745:     protected String getVirtualTopicConsumerName() {
1:6c86745:         return "Consumer.A.VirtualTopic.TEST";
1:6c86745:     }
1:6c86745: 
1:6c86745:     protected String getVirtualTopicConsumerNameB() {
1:6c86745:         return "Consumer.B.VirtualTopic.TEST";
1:6c86745:     }
1:42e51a3: 
1:6c86745:     protected void setUp() throws Exception {
1:0e7d5a9:         this.bindAddress="tcp://localhost:0";
1:6c86745:         super.setUp();
1:6c86745:     }
1:6c86745:     protected void tearDown() throws Exception {
1:6c86745:         if (connection != null) {
1:6c86745:             connection.close();
1:6c86745:         }
1:6c86745:         super.tearDown();
1:6c86745:     }
1:6c86745: }
============================================================================
author:Timothy A. Bish
-------------------------------------------------------------------------------
commit:ef24cc9
commit:0e7d5a9
/////////////////////////////////////////////////////////////////////////
1:         return new ActiveMQConnectionFactory(
1:                 broker.getTransportConnectors().get(0).getPublishableConnectString() +"?jms.prefetchPolicy.all=5");
/////////////////////////////////////////////////////////////////////////
1:         this.bindAddress="tcp://localhost:0";
commit:42e51a3
/////////////////////////////////////////////////////////////////////////
1:  *
1:  *
/////////////////////////////////////////////////////////////////////////
1: 
/////////////////////////////////////////////////////////////////////////
1: 
1: 
/////////////////////////////////////////////////////////////////////////
1: 
/////////////////////////////////////////////////////////////////////////
1: 
author:Hiram R. Chirino
-------------------------------------------------------------------------------
commit:b0c2a40
/////////////////////////////////////////////////////////////////////////
1:  * 
author:Robert Davies
-------------------------------------------------------------------------------
commit:6c86745
/////////////////////////////////////////////////////////////////////////
1: /**
1:  * Licensed to the Apache Software Foundation (ASF) under one or more
1:  * contributor license agreements.  See the NOTICE file distributed with
1:  * this work for additional information regarding copyright ownership.
1:  * The ASF licenses this file to You under the Apache License, Version 2.0
1:  * (the "License"); you may not use this file except in compliance with
1:  * the License.  You may obtain a copy of the License at
1:  *
1:  *      http://www.apache.org/licenses/LICENSE-2.0
1:  *
1:  * Unless required by applicable law or agreed to in writing, software
1:  * distributed under the License is distributed on an "AS IS" BASIS,
1:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:  * See the License for the specific language governing permissions and
1:  * limitations under the License.
1:  */
1: package org.apache.activemq.bugs;
1: 
1: import javax.jms.Connection;
1: import javax.jms.ConnectionFactory;
1: import javax.jms.MessageConsumer;
1: import javax.jms.MessageProducer;
1: import javax.jms.Session;
1: 
1: import org.apache.activemq.ActiveMQConnectionFactory;
1: import org.apache.activemq.EmbeddedBrokerTestSupport;
1: import org.apache.activemq.command.ActiveMQQueue;
1: import org.apache.activemq.command.ActiveMQTopic;
1: import org.apache.activemq.spring.ConsumerBean;
1: 
1: /**
1:  * 
0:  * @version $Revision: $
1:  */
1: public class AMQ1687Test extends EmbeddedBrokerTestSupport {
1: 
1:     private Connection connection;
1: 
1:     @Override
1:     protected ConnectionFactory createConnectionFactory() throws Exception {
1:         //prefetch change is not required, but test will not fail w/o it, only spew errors in the AMQ log.
0:         return new ActiveMQConnectionFactory(this.bindAddress+"?jms.prefetchPolicy.all=5");
0:         //return super.createConnectionFactory();
0:         //return new ActiveMQConnectionFactory("tcp://localhost:61616");
1:     }
1:     
1:     public void testVirtualTopicCreation() throws Exception {
1:         if (connection == null) {
1:             connection = createConnection();
1:         }
1:         connection.start();
1: 
1:         ConsumerBean messageList = new ConsumerBean();
1:         messageList.setVerbose(true);
1:         
1:         String queueAName = getVirtualTopicConsumerName();
1:         String queueBName = getVirtualTopicConsumerNameB();
1:         
1:         // create consumer 'cluster'
1:         ActiveMQQueue queue1 = new ActiveMQQueue(queueAName);
1:         ActiveMQQueue queue2 = new ActiveMQQueue(queueBName);
1: 
1:         Session session = connection.createSession(false, Session.AUTO_ACKNOWLEDGE);
1:         MessageConsumer c1 = session.createConsumer(queue1);
1:         MessageConsumer c2 = session.createConsumer(queue2);
1: 
1:         c1.setMessageListener(messageList);
1:         c2.setMessageListener(messageList);
1: 
1:         // create topic producer
1:         ActiveMQTopic topic = new ActiveMQTopic(getVirtualTopicName());
1:         MessageProducer producer = session.createProducer(topic);
1:         assertNotNull(producer);
1: 
1:         int total = 100;
1:         for (int i = 0; i < total; i++) {
1:             producer.send(session.createTextMessage("message: " + i));
1:         }
1:         
1:         messageList.assertMessagesArrived(total*2);
1:     }
1: 
1: 
1:     protected String getVirtualTopicName() {
1:         return "VirtualTopic.TEST";
1:     }
1: 
1: 
1:     protected String getVirtualTopicConsumerName() {
1:         return "Consumer.A.VirtualTopic.TEST";
1:     }
1: 
1:     protected String getVirtualTopicConsumerNameB() {
1:         return "Consumer.B.VirtualTopic.TEST";
1:     }
1:     
1:     
1:     protected void setUp() throws Exception {
0:         this.bindAddress="tcp://localhost:61616";
1:         super.setUp();
1:     }
1:     protected void tearDown() throws Exception {
1:         if (connection != null) {
1:             connection.close();
1:         }
1:         super.tearDown();
1:     }
1: }
============================================================================