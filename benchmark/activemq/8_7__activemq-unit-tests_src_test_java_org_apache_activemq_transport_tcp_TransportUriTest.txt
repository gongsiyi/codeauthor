1:fc00993: /**
1:fdb9c41:  * Licensed to the Apache Software Foundation (ASF) under one or more
1:fdb9c41:  * contributor license agreements.  See the NOTICE file distributed with
1:fdb9c41:  * this work for additional information regarding copyright ownership.
1:fdb9c41:  * The ASF licenses this file to You under the Apache License, Version 2.0
1:fdb9c41:  * (the "License"); you may not use this file except in compliance with
1:fdb9c41:  * the License.  You may obtain a copy of the License at
1:0bbc0ac:  *
1:fdb9c41:  *      http://www.apache.org/licenses/LICENSE-2.0
3:fdb9c41:  *
1:fdb9c41:  * Unless required by applicable law or agreed to in writing, software
1:fdb9c41:  * distributed under the License is distributed on an "AS IS" BASIS,
1:fdb9c41:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:fdb9c41:  * See the License for the specific language governing permissions and
1:fdb9c41:  * limitations under the License.
1:fdb9c41:  */
1:fdb9c41: package org.apache.activemq.transport.tcp;
1:74a7a8b: 
1:74a7a8b: import javax.jms.Connection;
1:74a7a8b: import javax.jms.JMSException;
1:1bc5504: 
1:049b43c: import junit.framework.Test;
1:1bc5504: 
1:fdb9c41: import org.apache.activemq.ActiveMQConnectionFactory;
1:fdb9c41: import org.apache.activemq.EmbeddedBrokerTestSupport;
1:f6d4f9f: import org.apache.activemq.broker.BrokerService;
1:8bf987b: import org.slf4j.Logger;
1:8bf987b: import org.slf4j.LoggerFactory;
1:049b43c: 
1:fdb9c41: /**
1:1bc5504:  *
1:fdb9c41:  */
1:fdb9c41: public class TransportUriTest extends EmbeddedBrokerTestSupport {
1:049b43c: 
1:8bf987b:     private static final Logger LOG = LoggerFactory.getLogger(TransportUriTest.class);
1:dfeecb4:     private static final String DIFF_SERV = "&diffServ=";
1:dfeecb4:     private static final String TOS = "&typeOfService=";
1:049b43c: 
1:fae5c5f:     protected Connection connection;
1:1bc5504: 
1:049b43c:     public String prefix;
1:049b43c:     public String postfix;
1:049b43c: 
1:e6e7ba7:     public void initCombosForTestUriOptionsWork() {
1:e6e7ba7:         initSharedCombos();
1:e6e7ba7:     }
1:e6e7ba7: 
1:e6e7ba7:     public void testUriOptionsWork() throws Exception {
1:e6e7ba7:         String uri = prefix + bindAddress + postfix;
1:e6e7ba7:         LOG.info("Connecting via: " + uri);
1:e6e7ba7: 
1:e6e7ba7:         connection = new ActiveMQConnectionFactory(uri).createConnection();
1:e6e7ba7:         connection.start();
1:e6e7ba7:     }
1:e6e7ba7: 
1:e6e7ba7:     public void initCombosForTestValidDiffServOptionsWork() {
1:e6e7ba7:         initSharedCombos();
1:e6e7ba7:     }
1:e6e7ba7: 
1:e6e7ba7:     public void testValidDiffServOptionsWork() throws Exception {
1:e6e7ba7:         String[] validIntegerOptions = {"0", "1", "32", "62", "63"};
1:e6e7ba7:         for (String opt : validIntegerOptions) {
1:e6e7ba7:             testValidOptionsWork(DIFF_SERV + opt, "");
1:e6e7ba7:         }
1:e6e7ba7:         String[] validNameOptions = { "CS0", "CS1", "CS2", "CS3", "CS4", "CS5", "CS6",
1:e6e7ba7:                 "CS7", "EF", "AF11", "AF12","AF13", "AF21", "AF22", "AF23", "AF31",
1:e6e7ba7:                 "AF32", "AF33", "AF41", "AF42", "AF43" };
1:e6e7ba7:         for (String opt : validNameOptions) {
1:e6e7ba7:             testValidOptionsWork(DIFF_SERV + opt, "");
1:e6e7ba7:         }
1:e6e7ba7:     }
1:e6e7ba7: 
1:e6e7ba7:     public void initCombosForTestInvalidDiffServOptionDoesNotWork() {
1:e6e7ba7:         initSharedCombos();
1:e6e7ba7:     }
1:e6e7ba7: 
1:e6e7ba7:     public void testInvalidDiffServOptionsDoesNotWork() throws Exception {
1:e6e7ba7:         String[] invalidIntegerOptions = {"-2", "-1", "64", "65", "100", "255"};
1:e6e7ba7:         for (String opt : invalidIntegerOptions) {
1:e6e7ba7:             testInvalidOptionsDoNotWork(DIFF_SERV + opt, "");
1:e6e7ba7:         }
1:e6e7ba7:         String[] invalidNameOptions = {"hi", "", "A", "AF", "-AF21"};
1:e6e7ba7:         for (String opt : invalidNameOptions) {
1:e6e7ba7:             testInvalidOptionsDoNotWork(DIFF_SERV + opt, "");
1:e6e7ba7:         }
1:e6e7ba7:     }
1:e6e7ba7: 
1:e6e7ba7:     public void initCombosForTestValidTypeOfServiceOptionsWork() {
1:e6e7ba7:         initSharedCombos();
1:e6e7ba7:     }
1:e6e7ba7: 
1:e6e7ba7:     public void testValidTypeOfServiceOptionsWork() throws Exception {
1:e6e7ba7:         int[] validOptions = {0, 1, 32, 100, 254, 255};
1:e6e7ba7:         for (int opt : validOptions) {
1:e6e7ba7:             testValidOptionsWork(TOS + opt, "");
1:e6e7ba7:         }
1:e6e7ba7:     }
1:e6e7ba7: 
1:e6e7ba7:     public void initCombosForTestInvalidTypeOfServiceOptionDoesNotWork() {
1:e6e7ba7:         initSharedCombos();
1:e6e7ba7:     }
1:e6e7ba7: 
1:e6e7ba7:     public void testInvalidTypeOfServiceOptionDoesNotWork() throws Exception {
1:e6e7ba7:         int[] invalidOptions = {-2, -1, 256, 257};
1:e6e7ba7:         for (int opt : invalidOptions) {
1:e6e7ba7:             testInvalidOptionsDoNotWork(TOS + opt, "");
1:e6e7ba7:         }
1:e6e7ba7:     }
1:e6e7ba7: 
1:e6e7ba7:     public void initCombosForTestDiffServAndTypeOfServiceMutuallyExclusive() {
1:e6e7ba7:         initSharedCombos();
1:e6e7ba7:     }
1:e6e7ba7: 
1:e6e7ba7:     public void testDiffServAndTypeServiceMutuallyExclusive() {
1:e6e7ba7:         String msg = "It should not be possible to set both Differentiated "
1:e6e7ba7:             + "Services and Type of Service options on the same connection "
1:e6e7ba7:             + "URI.";
1:e6e7ba7:         testInvalidOptionsDoNotWork(TOS + 32 + DIFF_SERV, msg);
1:e6e7ba7:         testInvalidOptionsDoNotWork(DIFF_SERV + 32 + TOS + 32, msg);
1:e6e7ba7:     }
1:e6e7ba7: 
1:049b43c:     public void initCombosForTestBadVersionNumberDoesNotWork() {
1:dfeecb4:         initSharedCombos();
1:049b43c:     }
1:049b43c: 
1:f6d4f9f:     public void testBadVersionNumberDoesNotWork() throws Exception {
1:dfeecb4:         testInvalidOptionsDoNotWork("&minmumWireFormatVersion=65535", "");
1:dfeecb4:     }
1:049b43c: 
1:049b43c:     public void initCombosForTestBadPropertyNameFails() {
7:dfeecb4:         initSharedCombos();
1:049b43c:     }
1:1bc5504: 
1:dfeecb4:     public void testBadPropertyNameFails() throws Exception {
1:dfeecb4:         testInvalidOptionsDoNotWork("&cheese=abc", "");
3:dfeecb4:     }
1:dfeecb4: 
1:dfeecb4:     private void initSharedCombos() {
2:049b43c:         addCombinationValues("prefix", new Object[] {""});
1:dfeecb4:         // TODO: Add more combinations.
1:dfeecb4:         addCombinationValues("postfix", new Object[]
1:0aa5c2a:             {"?tcpNoDelay=true&keepAlive=true&soLinger=0"});
1:52d5189:         addCombinationValues("postfix", new Object[]
1:52d5189:             {"?tcpNoDelay=true&keepAlive=true&soLinger=-1"});
1:049b43c:     }
1:049b43c: 
1:e6e7ba7:     private void testValidOptionsWork(String options, String msg) {
1:e6e7ba7:         String uri = prefix + bindAddress + postfix + options;
1:e6e7ba7:         LOG.info("Connecting via: " + uri);
1:e6e7ba7: 
1:e6e7ba7:         try {
1:e6e7ba7:             connection = new ActiveMQConnectionFactory(uri).createConnection();
1:e6e7ba7:             connection.start();
1:e6e7ba7:         } catch (Exception unexpected) {
1:e6e7ba7:             fail("Valid options '" + options + "' on URI '" + uri + "' should "
1:e6e7ba7:                  + "not have caused an exception to be thrown. " + msg
1:e6e7ba7:                  + " Exception: " + unexpected);
1:e6e7ba7:         }
1:e6e7ba7:     }
1:dfeecb4: 
1:dfeecb4:     private void testInvalidOptionsDoNotWork(String options, String msg) {
2:dfeecb4:         String uri = prefix + bindAddress + postfix + options;
2:049b43c:         LOG.info("Connecting via: " + uri);
1:dfeecb4: 
1:54fa83d:         try {
2:54fa83d:             connection = new ActiveMQConnectionFactory(uri).createConnection();
2:54fa83d:             connection.start();
1:dfeecb4:             fail("Invalid options '" + options + "' on URI '" + uri + "' should"
1:dfeecb4:                  + " have caused an exception to be thrown. " + msg);
2:74a7a8b:         } catch (Exception expected) {
1:dfeecb4:         }
1:dfeecb4:     }
6:dfeecb4: 
1:9524835:     @Override
1:fdb9c41:     protected void setUp() throws Exception {
1:fae5c5f:         bindAddress = "tcp://localhost:61616";
1:fdb9c41:         super.setUp();
1:dfeecb4:     }
1:dfeecb4: 
1:9524835:     @Override
1:fdb9c41:     protected void tearDown() throws Exception {
1:fdb9c41:         if (connection != null) {
1:54fa83d:             try {
1:f6d4f9f:                 connection.close();
1:74a7a8b:             } catch (JMSException e) {
1:f6d4f9f:                 e.printStackTrace();
1:dfeecb4:             }
1:dfeecb4:         }
1:fdb9c41:         super.tearDown();
1:dfeecb4:     }
1:dfeecb4: 
1:9524835:     @Override
1:f6d4f9f:     protected BrokerService createBroker() throws Exception {
1:f6d4f9f:         BrokerService answer = new BrokerService();
1:f6d4f9f:         answer.setUseJmx(false);
1:f6d4f9f:         answer.setPersistent(isPersistent());
1:f6d4f9f:         answer.addConnector(bindAddress);
1:f6d4f9f:         return answer;
1:dfeecb4:     }
1:1bc5504: 
1:049b43c:     public static Test suite() {
1:049b43c:         return suite(TransportUriTest.class);
1:049b43c:     }
1:dfeecb4: }
============================================================================
author:Timothy Bish
-------------------------------------------------------------------------------
commit:e6e7ba7
/////////////////////////////////////////////////////////////////////////
1:     public void initCombosForTestUriOptionsWork() {
1:         initSharedCombos();
1:     }
1: 
1:     public void testUriOptionsWork() throws Exception {
1:         String uri = prefix + bindAddress + postfix;
1:         LOG.info("Connecting via: " + uri);
1: 
1:         connection = new ActiveMQConnectionFactory(uri).createConnection();
1:         connection.start();
1:     }
1: 
1:     public void initCombosForTestValidDiffServOptionsWork() {
1:         initSharedCombos();
1:     }
1: 
1:     public void testValidDiffServOptionsWork() throws Exception {
1:         String[] validIntegerOptions = {"0", "1", "32", "62", "63"};
1:         for (String opt : validIntegerOptions) {
1:             testValidOptionsWork(DIFF_SERV + opt, "");
1:         }
1:         String[] validNameOptions = { "CS0", "CS1", "CS2", "CS3", "CS4", "CS5", "CS6",
1:                 "CS7", "EF", "AF11", "AF12","AF13", "AF21", "AF22", "AF23", "AF31",
1:                 "AF32", "AF33", "AF41", "AF42", "AF43" };
1:         for (String opt : validNameOptions) {
1:             testValidOptionsWork(DIFF_SERV + opt, "");
1:         }
1:     }
1: 
1:     public void initCombosForTestInvalidDiffServOptionDoesNotWork() {
1:         initSharedCombos();
1:     }
1: 
1:     public void testInvalidDiffServOptionsDoesNotWork() throws Exception {
1:         String[] invalidIntegerOptions = {"-2", "-1", "64", "65", "100", "255"};
1:         for (String opt : invalidIntegerOptions) {
1:             testInvalidOptionsDoNotWork(DIFF_SERV + opt, "");
1:         }
1:         String[] invalidNameOptions = {"hi", "", "A", "AF", "-AF21"};
1:         for (String opt : invalidNameOptions) {
1:             testInvalidOptionsDoNotWork(DIFF_SERV + opt, "");
1:         }
1:     }
1: 
1:     public void initCombosForTestValidTypeOfServiceOptionsWork() {
1:         initSharedCombos();
1:     }
1: 
1:     public void testValidTypeOfServiceOptionsWork() throws Exception {
1:         int[] validOptions = {0, 1, 32, 100, 254, 255};
1:         for (int opt : validOptions) {
1:             testValidOptionsWork(TOS + opt, "");
1:         }
1:     }
1: 
1:     public void initCombosForTestInvalidTypeOfServiceOptionDoesNotWork() {
1:         initSharedCombos();
1:     }
1: 
1:     public void testInvalidTypeOfServiceOptionDoesNotWork() throws Exception {
1:         int[] invalidOptions = {-2, -1, 256, 257};
1:         for (int opt : invalidOptions) {
1:             testInvalidOptionsDoNotWork(TOS + opt, "");
1:         }
1:     }
1: 
1:     public void initCombosForTestDiffServAndTypeOfServiceMutuallyExclusive() {
1:         initSharedCombos();
1:     }
1: 
1:     public void testDiffServAndTypeServiceMutuallyExclusive() {
1:         String msg = "It should not be possible to set both Differentiated "
1:             + "Services and Type of Service options on the same connection "
1:             + "URI.";
1:         testInvalidOptionsDoNotWork(TOS + 32 + DIFF_SERV, msg);
1:         testInvalidOptionsDoNotWork(DIFF_SERV + 32 + TOS + 32, msg);
1:     }
1: 
/////////////////////////////////////////////////////////////////////////
1:     private void testValidOptionsWork(String options, String msg) {
1:         String uri = prefix + bindAddress + postfix + options;
1:         LOG.info("Connecting via: " + uri);
1: 
1:         try {
1:             connection = new ActiveMQConnectionFactory(uri).createConnection();
1:             connection.start();
1:         } catch (Exception unexpected) {
1:             fail("Valid options '" + options + "' on URI '" + uri + "' should "
1:                  + "not have caused an exception to be thrown. " + msg
1:                  + " Exception: " + unexpected);
1:         }
1:     }
commit:1bc5504
/////////////////////////////////////////////////////////////////////////
1: 
1: 
/////////////////////////////////////////////////////////////////////////
1:  *
/////////////////////////////////////////////////////////////////////////
1: 
0: //    public void initCombosForTestUriOptionsWork() {
0: //        initSharedCombos();
0: //    }
0: //
0: //    public void testUriOptionsWork() throws Exception {
0: //        String uri = prefix + bindAddress + postfix;
0: //        LOG.info("Connecting via: " + uri);
0: //
0: //        connection = new ActiveMQConnectionFactory(uri).createConnection();
0: //        connection.start();
0: //    }
0: //
0: //    public void initCombosForTestValidDiffServOptionsWork() {
0: //        initSharedCombos();
0: //    }
0: //
0: //    public void testValidDiffServOptionsWork() throws Exception {
0: //        String[] validIntegerOptions = {"0", "1", "32", "62", "63"};
0: //        for (String opt : validIntegerOptions) {
0: //            testValidOptionsWork(DIFF_SERV + opt, "");
0: //        }
0: //        String[] validNameOptions = { "CS0", "CS1", "CS2", "CS3", "CS4", "CS5", "CS6",
0: //                "CS7", "EF", "AF11", "AF12","AF13", "AF21", "AF22", "AF23", "AF31",
0: //                "AF32", "AF33", "AF41", "AF42", "AF43" };
0: //        for (String opt : validNameOptions) {
0: //            testValidOptionsWork(DIFF_SERV + opt, "");
0: //        }
0: //    }
0: //
0: //    public void initCombosForTestInvalidDiffServOptionDoesNotWork() {
0: //        initSharedCombos();
0: //    }
0: //
0: //    public void testInvalidDiffServOptionsDoesNotWork() throws Exception {
0: //        String[] invalidIntegerOptions = {"-2", "-1", "64", "65", "100", "255"};
0: //        for (String opt : invalidIntegerOptions) {
0: //            testInvalidOptionsDoNotWork(DIFF_SERV + opt, "");
0: //        }
0: //        String[] invalidNameOptions = {"hi", "", "A", "AF", "-AF21"};
0: //        for (String opt : invalidNameOptions) {
0: //            testInvalidOptionsDoNotWork(DIFF_SERV + opt, "");
0: //        }
0: //    }
0: //
0: //    public void initCombosForTestValidTypeOfServiceOptionsWork() {
0: //        initSharedCombos();
0: //    }
0: //
0: //    public void testValidTypeOfServiceOptionsWork() throws Exception {
0: //        int[] validOptions = {0, 1, 32, 100, 254, 255};
0: //        for (int opt : validOptions) {
0: //            testValidOptionsWork(TOS + opt, "");
0: //        }
0: //    }
0: //
0: //    public void initCombosForTestInvalidTypeOfServiceOptionDoesNotWork() {
0: //        initSharedCombos();
0: //    }
0: //
0: //    public void testInvalidTypeOfServiceOptionDoesNotWork() throws Exception {
0: //        int[] invalidOptions = {-2, -1, 256, 257};
0: //        for (int opt : invalidOptions) {
0: //            testInvalidOptionsDoNotWork(TOS + opt, "");
0: //        }
0: //    }
0: //
0: //    public void initCombosForTestDiffServAndTypeOfServiceMutuallyExclusive() {
0: //        initSharedCombos();
0: //    }
0: //
0: //    public void testDiffServAndTypeServiceMutuallyExclusive() {
0: //        String msg = "It should not be possible to set both Differentiated "
0: //            + "Services and Type of Service options on the same connection "
0: //            + "URI.";
0: //        testInvalidOptionsDoNotWork(TOS + 32 + DIFF_SERV, msg);
0: //        testInvalidOptionsDoNotWork(DIFF_SERV + 32 + TOS + 32, msg);
0: //    }
0: //
/////////////////////////////////////////////////////////////////////////
1: 
/////////////////////////////////////////////////////////////////////////
0: //    private void testValidOptionsWork(String options, String msg) {
0: //        String uri = prefix + bindAddress + postfix + options;
0: //        LOG.info("Connecting via: " + uri);
0: //
0: //        try {
0: //            connection = new ActiveMQConnectionFactory(uri).createConnection();
0: //            connection.start();
0: //        } catch (Exception unexpected) {
0: //            fail("Valid options '" + options + "' on URI '" + uri + "' should "
0: //                 + "not have caused an exception to be thrown. " + msg
0: //                 + " Exception: " + unexpected);
0: //        }
0: //    }
/////////////////////////////////////////////////////////////////////////
1: 
author:Timothy A. Bish
-------------------------------------------------------------------------------
commit:ef24cc9
author:Gary Tully
-------------------------------------------------------------------------------
commit:52d5189
/////////////////////////////////////////////////////////////////////////
1:         addCombinationValues("postfix", new Object[]
1:             {"?tcpNoDelay=true&keepAlive=true&soLinger=-1"});
commit:0aa5c2a
/////////////////////////////////////////////////////////////////////////
1:             {"?tcpNoDelay=true&keepAlive=true&soLinger=0"});
commit:fe50dd6
/////////////////////////////////////////////////////////////////////////
author:Hiram R. Chirino
-------------------------------------------------------------------------------
commit:0bbc0ac
/////////////////////////////////////////////////////////////////////////
1:  * 
commit:fc00993
/////////////////////////////////////////////////////////////////////////
1: /**
commit:74a7a8b
/////////////////////////////////////////////////////////////////////////
1: import javax.jms.Connection;
1: import javax.jms.JMSException;
1: 
/////////////////////////////////////////////////////////////////////////
0:         // System.out.println("Connecting via: " + uri);
/////////////////////////////////////////////////////////////////////////
0:         // System.out.println("Connecting via: " + uri);
1:         } catch (Exception expected) {
0:         // System.out.println("Connecting via: " + uri);
1:         } catch (Exception expected) {
/////////////////////////////////////////////////////////////////////////
1:             } catch (JMSException e) {
commit:7d54de6
/////////////////////////////////////////////////////////////////////////
0: //        System.out.println("Connecting via: " + uri);
/////////////////////////////////////////////////////////////////////////
0: //        System.out.println("Connecting via: " + uri);
0:         catch (Exception expected) {
0: //        System.out.println("Connecting via: " + uri);
0:         catch (Exception expected) {
author:Bosanac Dejan
-------------------------------------------------------------------------------
commit:8bf987b
/////////////////////////////////////////////////////////////////////////
1: import org.slf4j.Logger;
1: import org.slf4j.LoggerFactory;
1:     private static final Logger LOG = LoggerFactory.getLogger(TransportUriTest.class);
commit:049b43c
/////////////////////////////////////////////////////////////////////////
1: import junit.framework.Test;
1: 
0: import org.apache.commons.logging.Log;
0: import org.apache.commons.logging.LogFactory;
0: 	private static final Log LOG = LogFactory.getLog(TransportUriTest.class);
1: 	
1:     
1:     public String prefix;
1:     public String postfix;
1:     
0:     public void initCombosForTestUriOptionsWork() {
1: 		addCombinationValues("prefix", new Object[] {""});
0: 		addCombinationValues("postfix", new Object[] {"?tcpNoDelay=true&keepAlive=true"});
1: 	}
1:         LOG.info("Connecting via: " + uri);
1:     
1: 	public void initCombosForTestBadVersionNumberDoesNotWork() {
1: 		addCombinationValues("prefix", new Object[] {""});
0: 		addCombinationValues("postfix", new Object[] {"?tcpNoDelay=true&keepAlive=true"});
1: 	}
1:         LOG.info("Connecting via: " + uri);
/////////////////////////////////////////////////////////////////////////
1: 	public void initCombosForTestBadPropertyNameFails() {
0: 		addCombinationValues("prefix", new Object[] {""});
0: 		addCombinationValues("postfix", new Object[] {"?tcpNoDelay=true&keepAlive=true"});
1: 	}
1: 	
0:         LOG.info("Connecting via: " + uri);
/////////////////////////////////////////////////////////////////////////
1:     
1:     public static Test suite() {
1:     	return suite(TransportUriTest.class);
1:     }
author:Robert Davies
-------------------------------------------------------------------------------
commit:9524835
/////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////
0:         String[] validNameOptions = { "CS0", "CS1", "CS2", "CS3", "CS4", "CS5", "CS6",
0:                 "CS7", "EF", "AF11", "AF12","AF13", "AF21", "AF22", "AF23", "AF31", 
0:                 "AF32", "AF33", "AF41", "AF42", "AF43" };
/////////////////////////////////////////////////////////////////////////
1:     @Override
1:     @Override
/////////////////////////////////////////////////////////////////////////
1:     @Override
commit:dfeecb4
/////////////////////////////////////////////////////////////////////////
0:     private static final Log LOG = LogFactory.getLog(TransportUriTest.class);
1:     private static final String DIFF_SERV = "&diffServ=";
1:     private static final String TOS = "&typeOfService=";
1: 
1: 
1: 
1:         initSharedCombos();
1:     }
/////////////////////////////////////////////////////////////////////////
1:         initSharedCombos();
0:             testValidOptionsWork(DIFF_SERV + opt, "");
0:             "AF22", "AF23", "AF31", "AF32", "AF33", "AF41", "AF42", "AF43"};
0:             testValidOptionsWork(DIFF_SERV + opt, "");
1:         initSharedCombos();
0:             testInvalidOptionsDoNotWork(DIFF_SERV + opt, "");
0:             testInvalidOptionsDoNotWork(DIFF_SERV + opt, "");
0:     public void initCombosForTestValidTypeOfServiceOptionsWork() {
1:         initSharedCombos();
1:     }
0:     public void testValidTypeOfServiceOptionsWork() throws Exception {
0:         int[] validOptions = {0, 1, 32, 100, 254, 255};
0:         for (int opt : validOptions) {
0:             testValidOptionsWork(TOS + opt, "");
0:     public void initCombosForTestInvalidTypeOfServiceOptionDoesNotWork() {
1:         initSharedCombos();
1:     }
1: 
0:     public void testInvalidTypeOfServiceOptionDoesNotWork() throws Exception {
0:         int[] invalidOptions = {-2, -1, 256, 257};
0:         for (int opt : invalidOptions) {
0:             testInvalidOptionsDoNotWork(TOS + opt, "");
1:         }
1:     }
1: 
0:     public void initCombosForTestDiffServAndTypeOfServiceMutuallyExclusive() {
1:         initSharedCombos();
1:     }
1: 
0:     public void testDiffServAndTypeServiceMutuallyExclusive() {
0:         String msg = "It should not be possible to set both Differentiated "
0:             + "Services and Type of Service options on the same connection "
0:             + "URI.";
0:         testInvalidOptionsDoNotWork(TOS + 32 + DIFF_SERV, msg);
0:         testInvalidOptionsDoNotWork(DIFF_SERV + 32 + TOS + 32, msg);
1:     }
1: 
0:     public void initCombosForTestBadVersionNumberDoesNotWork() {
1:         initSharedCombos();
1:     }
1:         testInvalidOptionsDoNotWork("&minmumWireFormatVersion=65535", "");
1:     }
1: 
0:     public void initCombosForTestBadPropertyNameFails() {
1:         initSharedCombos();
1:     }
1:         
1:     public void testBadPropertyNameFails() throws Exception {
1:         testInvalidOptionsDoNotWork("&cheese=abc", "");
1:     }
1: 
1:     private void initSharedCombos() {
0:         addCombinationValues("prefix", new Object[] {""});
1:         // TODO: Add more combinations.
1:         addCombinationValues("postfix", new Object[]
0:             {"?tcpNoDelay=true&keepAlive=true"});
1:     }
1: 
0:     private void testValidOptionsWork(String options, String msg) {
1:         String uri = prefix + bindAddress + postfix + options;
0:         } catch (Exception unexpected) {
0:             fail("Valid options '" + options + "' on URI '" + uri + "' should "
0:                  + "not have caused an exception to be thrown. " + msg
0:                  + " Exception: " + unexpected);
1:     private void testInvalidOptionsDoNotWork(String options, String msg) {
1:         String uri = prefix + bindAddress + postfix + options;
1:             fail("Invalid options '" + options + "' on URI '" + uri + "' should"
1:                  + " have caused an exception to be thrown. " + msg);
/////////////////////////////////////////////////////////////////////////
0:         return suite(TransportUriTest.class);
commit:54fa83d
/////////////////////////////////////////////////////////////////////////
0: 
0:     public void initCombosForTestValidDiffServOptionsWork() {
0: 	addCombinationValues("prefix", new Object[] {""});
0: 	// TODO: Add more combinations so that we know it plays nice with other
0: 	// transport options.
0: 	addCombinationValues("postfix", new Object[] {"?tcpNoDelay=true&keepAlive=true"});
0:     }
0: 
0:     public void testValidDiffServOptionsWork() throws Exception {
0:         String[] validIntegerOptions = {"0", "1", "32", "62", "63"};
0:         for (String opt : validIntegerOptions) {
0:             testValidDiffServOption(opt);
0:         }
0:         String[] validNameOptions = {"EF", "AF11", "AF12", "AF13", "AF21",
0:                                      "AF22", "AF23", "AF31", "AF32", "AF33",
0:                                      "AF41", "AF42", "AF43"};
0:         for (String opt : validNameOptions) {
0:             testValidDiffServOption(opt);
0:         }
0:     }
0: 
0:     private void testValidDiffServOption(String value) {
0:         String uri = prefix + bindAddress + postfix + "&diffServ=" + value;
0:         LOG.info("Connecting via: " + uri);
0: 
1:         try {
1:             connection = new ActiveMQConnectionFactory(uri).createConnection();
1:             connection.start();
0:         } catch (Exception e) {
0: 	    fail("Valid Differentiated Services option: diffServ=" + value
0: 		 + ", should not have thrown an exception: " + e);
0:         }
0:     }
0: 
0:     public void initCombosForTestInvalidDiffServOptionDoesNotWork() {
0: 	addCombinationValues("prefix", new Object[] {""});
0: 	// TODO: Add more combinations so that we know it plays nice with other
0: 	// transport options.
0: 	addCombinationValues("postfix", new Object[] {"?tcpNoDelay=true&keepAlive=true"});
0:     }
0: 
0:     public void testInvalidDiffServOptionsDoesNotWork() throws Exception {
0:         String[] invalidIntegerOptions = {"-2", "-1", "64", "65", "100", "255"};
0:         for (String opt : invalidIntegerOptions) {
0:             testInvalidDiffServOption(opt);
0:         }
0:         String[] invalidNameOptions = {"hi", "", "A", "AF", "-AF21"};
0:         for (String opt : invalidNameOptions) {
0:             testInvalidDiffServOption(opt);
0:         }
0:     }
0: 
0:     private void testInvalidDiffServOption(String value) {
0:         String uri = prefix + bindAddress + postfix + "&diffServ=" + value;
0:         LOG.info("Connecting via: " + uri);
0: 
1:         try {
1:             connection = new ActiveMQConnectionFactory(uri).createConnection();
1:             connection.start();
0:             fail("Invalid Differentiated Services option: diffServ=" + value
0:                  + " should have thrown an exception!");
0:         } catch (Exception expected) {
0:         }
0:     }
0: 
author:Adrian T. Co
-------------------------------------------------------------------------------
commit:fae5c5f
/////////////////////////////////////////////////////////////////////////
0:     protected String prefix = "";
0:     protected String postfix = "?tcpNoDelay=true&keepAlive=true";
1:     protected Connection connection;
0:         String uri = prefix + bindAddress + postfix;
/////////////////////////////////////////////////////////////////////////
0:         String uri = prefix + bindAddress + postfix + "&minmumWireFormatVersion=65535";
/////////////////////////////////////////////////////////////////////////
0:         String uri = prefix + bindAddress + postfix + "&cheese=abc";
/////////////////////////////////////////////////////////////////////////
0:             expected.printStackTrace();
1:         bindAddress = "tcp://localhost:61616";
author:James Strachan
-------------------------------------------------------------------------------
commit:f6d4f9f
/////////////////////////////////////////////////////////////////////////
1: import org.apache.activemq.broker.BrokerService;
0: import javax.jms.JMSException;
/////////////////////////////////////////////////////////////////////////
1:     public void testBadVersionNumberDoesNotWork() throws Exception {
0:         String uri = bindAddress + postfix + "&minmumWireFormatVersion=65535";
0:         System.out.println("Connecting via: " + uri);
0: 
0:         try {
0:             connection = new ActiveMQConnectionFactory(uri).createConnection();
0:             connection.start();
0:             fail("Should have thrown an exception!");
0:         }
0:         catch (Exception e) {
0:             System.out.println("Caught expected exception: " + e);
0:         }
0:     }
0: 
0: 
0:     public void testBadPropertyNameFails() throws Exception {
0:         String uri = bindAddress + postfix + "&cheese=abc";
0:         System.out.println("Connecting via: " + uri);
0: 
0:         try {
0:             connection = new ActiveMQConnectionFactory(uri).createConnection();
0:             connection.start();
0:             fail("Should have thrown an exception!");
0:         }
0:         catch (Exception e) {
0:             System.out.println("Caught expected exception: " + e);
0:         }
0:     }
0: 
0: 
/////////////////////////////////////////////////////////////////////////
0:             try {
1:                 connection.close();
0:             }
0:             catch (JMSException e) {
1:                 e.printStackTrace();
0:             }
1:     protected BrokerService createBroker() throws Exception {
1:         BrokerService answer = new BrokerService();
1:         answer.setUseJmx(false);
1:         answer.setPersistent(isPersistent());
1:         answer.addConnector(bindAddress);
1:         return answer;
0:     }
commit:fdb9c41
/////////////////////////////////////////////////////////////////////////
0: /*
1:  * Licensed to the Apache Software Foundation (ASF) under one or more
1:  * contributor license agreements.  See the NOTICE file distributed with
1:  * this work for additional information regarding copyright ownership.
1:  * The ASF licenses this file to You under the Apache License, Version 2.0
1:  * (the "License"); you may not use this file except in compliance with
1:  * the License.  You may obtain a copy of the License at
1:  *
1:  *      http://www.apache.org/licenses/LICENSE-2.0
1:  *
1:  * Unless required by applicable law or agreed to in writing, software
1:  * distributed under the License is distributed on an "AS IS" BASIS,
1:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:  * See the License for the specific language governing permissions and
1:  * limitations under the License.
1:  */
1: package org.apache.activemq.transport.tcp;
0: 
1: import org.apache.activemq.ActiveMQConnectionFactory;
1: import org.apache.activemq.EmbeddedBrokerTestSupport;
0: 
0: import javax.jms.Connection;
0: 
1: /**
1:  * 
0:  * @version $Revision$
1:  */
1: public class TransportUriTest extends EmbeddedBrokerTestSupport {
0: 
0:     private String postfix = "?tcpNoDelay=true&keepAlive=true";
0:     private Connection connection;
0: 
0:     public void testUriOptionsWork() throws Exception {
0:         String uri = bindAddress + postfix;
0:         System.out.println("Connecting via: " + uri);
0: 
0:         connection = new ActiveMQConnectionFactory(uri).createConnection();
0:         connection.start();
0:     }
0: 
1:     protected void setUp() throws Exception {
0:         bindAddress = "tcp://localhost:6161";
1:         super.setUp();
0:     }
0: 
1:     protected void tearDown() throws Exception {
1:         if (connection != null) {
0:             connection.close();
0:         }
1:         super.tearDown();
0:     }
0: 
0: }
============================================================================