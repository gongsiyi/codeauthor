1:987769a: /**
1:987769a:  * Licensed to the Apache Software Foundation (ASF) under one or more
1:987769a:  * contributor license agreements.  See the NOTICE file distributed with
1:987769a:  * this work for additional information regarding copyright ownership.
1:987769a:  * The ASF licenses this file to You under the Apache License, Version 2.0
1:987769a:  * (the "License"); you may not use this file except in compliance with
1:987769a:  * the License.  You may obtain a copy of the License at
1:987769a:  *
1:987769a:  *      http://www.apache.org/licenses/LICENSE-2.0
1:987769a:  *
1:987769a:  * Unless required by applicable law or agreed to in writing, software
1:987769a:  * distributed under the License is distributed on an "AS IS" BASIS,
1:987769a:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:987769a:  * See the License for the specific language governing permissions and
1:987769a:  * limitations under the License.
1:987769a:  */
1:987769a: package org.apache.activemq.web;
2:987769a: 
1:f44c3d2: import static org.junit.Assert.assertEquals;
1:f44c3d2: import static org.junit.Assert.assertNotNull;
1:f44c3d2: import static org.junit.Assert.assertTrue;
1:987769a: 
1:f44c3d2: import java.io.ByteArrayInputStream;
1:f44c3d2: import java.util.concurrent.CountDownLatch;
1:f44c3d2: import java.util.concurrent.atomic.AtomicInteger;
1:f44c3d2: 
1:987769a: import org.eclipse.jetty.client.HttpClient;
1:f44c3d2: import org.eclipse.jetty.client.api.Request;
1:f44c3d2: import org.eclipse.jetty.client.api.Result;
1:f44c3d2: import org.eclipse.jetty.client.util.BufferingResponseListener;
1:f44c3d2: import org.eclipse.jetty.client.util.InputStreamContentProvider;
1:f44c3d2: import org.eclipse.jetty.http.HttpMethod;
1:987769a: import org.eclipse.jetty.http.HttpStatus;
1:987769a: import org.junit.Ignore;
1:bdf7aa4: import org.junit.Test;
1:bdf7aa4: 
1:987769a: public class RestPersistentTest extends JettyTestSupport {
1:987769a: 
1:987769a:     @Override
1:987769a:     protected boolean isPersistent() {
1:987769a:         // need persistent for post/get
1:987769a:         return true;
1:987769a:     }
1:987769a: 
1:bdf7aa4:     @Test(timeout = 60 * 1000)
1:987769a:     public void testPostAndGetWithQueue() throws Exception {
1:987769a:         postAndGet("queue");
1:987769a:     }
1:987769a: 
1:bdf7aa4:     @Test(timeout = 60 * 1000)
1:bdf7aa4:     @Ignore("Needs a JIRA")
1:987769a:     public void testPostAndGetWithTopic() throws Exception {
1:987769a:         // TODO: problems with topics
1:987769a:         // postAndGet("topic");
1:987769a:     }
1:987769a: 
1:987769a:     public void postAndGet(String destinationType) throws Exception {
1:c5cebd5:         int port = getPort();
1:987769a: 
1:c5cebd5:         final String urlGET="http://localhost:" + port + "/message/upcTest?clientId=consumer1&readTimeout=5000&type="+destinationType;
1:c5cebd5:         final String urlPOST="http://localhost:" + port + "/message/upcTest?type="+destinationType;
1:987769a: 
1:987769a:         final String message1="<itemPolicy><upc>1001</upc></itemPolicy>";
1:987769a:         final String property1="terminalNumber=lane1";
1:987769a:         final String selector1="terminalNumber='lane1'";
1:987769a: 
1:987769a:         HttpClient httpClient = new HttpClient();
1:987769a:         httpClient.start();
1:987769a: 
1:987769a:         //post first message
1:987769a:         // TODO: a problem with GET before POST
1:987769a:         // getMessage(httpClient, urlGET, selector1, null);  //should NOT receive message1
1:987769a:         postMessage(httpClient, urlPOST, property1, message1);
1:987769a:         getMessage(httpClient, urlGET, selector1, message1);  //should receive message1
1:987769a:     }
1:987769a: 
1:987769a:     private void postMessage(HttpClient httpClient, String url, String properties, String message) throws Exception
1:987769a:     {
1:f44c3d2:         final CountDownLatch latch = new CountDownLatch(1);
1:f44c3d2:         final StringBuffer buf = new StringBuffer();
1:f44c3d2:         final AtomicInteger status = new AtomicInteger();
1:f44c3d2:         httpClient.newRequest(url+"&"+properties)
1:f44c3d2:             .header("Content-Type","text/xml")
1:f44c3d2:            .content(new InputStreamContentProvider(new ByteArrayInputStream(message.getBytes("UTF-8"))))
1:f44c3d2:            .method(HttpMethod.POST).send(new BufferingResponseListener() {
1:f44c3d2:             @Override
1:f44c3d2:             public void onComplete(Result result) {
1:f44c3d2:                 status.getAndSet(result.getResponse().getStatus());
1:f44c3d2:                 buf.append(getContentAsString());
1:f44c3d2:                 latch.countDown();
1:f44c3d2:             }
1:f44c3d2:         });
1:987769a: 
1:f44c3d2:         latch.await();
1:f44c3d2:         assertTrue("success status", HttpStatus.isSuccess(status.get()));
1:987769a:      }
1:987769a: 
1:987769a:     private void getMessage(HttpClient httpClient, String url, String selector, String expectedMessage) throws Exception
1:987769a:     {
1:f44c3d2: 
1:f44c3d2:         final CountDownLatch latch = new CountDownLatch(1);
1:f44c3d2:         final StringBuffer buf = new StringBuffer();
1:f44c3d2:         final AtomicInteger status = new AtomicInteger();
1:f44c3d2:         Request request = httpClient.newRequest(url)
1:f44c3d2:             .header("accept", "text/xml")
1:f44c3d2:             .header("Content-Type","text/xml");
1:f44c3d2: 
1:987769a:         if(selector!=null)
1:987769a:         {
1:f44c3d2:             request.header("selector", selector);
1:987769a:         }
1:f44c3d2: 
1:f44c3d2:         request.method(HttpMethod.GET).send(new BufferingResponseListener() {
1:f44c3d2:             @Override
1:f44c3d2:             public void onComplete(Result result) {
1:f44c3d2:                 status.getAndSet(result.getResponse().getStatus());
1:f44c3d2:                 buf.append(getContentAsString());
1:f44c3d2:                 latch.countDown();
1:f44c3d2:             }
1:f44c3d2:         });
1:f44c3d2: 
1:f44c3d2:         latch.await();
1:f44c3d2:         assertTrue("success status", HttpStatus.isSuccess(status.get()));
1:987769a: 
1:987769a:         if(expectedMessage!=null)
1:987769a:         {
1:f44c3d2:             assertNotNull(buf.toString());
1:f44c3d2:             assertEquals(expectedMessage, buf.toString().trim());
1:987769a:         }
1:987769a:      }
1:987769a: }
============================================================================
author:Christopher L. Shannon (cshannon)
-------------------------------------------------------------------------------
commit:f44c3d2
/////////////////////////////////////////////////////////////////////////
1: import static org.junit.Assert.assertEquals;
1: import static org.junit.Assert.assertNotNull;
1: import static org.junit.Assert.assertTrue;
1: import java.io.ByteArrayInputStream;
1: import java.util.concurrent.CountDownLatch;
1: import java.util.concurrent.atomic.AtomicInteger;
1: 
1: import org.eclipse.jetty.client.api.Request;
1: import org.eclipse.jetty.client.api.Result;
1: import org.eclipse.jetty.client.util.BufferingResponseListener;
1: import org.eclipse.jetty.client.util.InputStreamContentProvider;
1: import org.eclipse.jetty.http.HttpMethod;
/////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////
1:         final CountDownLatch latch = new CountDownLatch(1);
1:         final StringBuffer buf = new StringBuffer();
1:         final AtomicInteger status = new AtomicInteger();
1:         httpClient.newRequest(url+"&"+properties)
1:             .header("Content-Type","text/xml")
1:            .content(new InputStreamContentProvider(new ByteArrayInputStream(message.getBytes("UTF-8"))))
1:            .method(HttpMethod.POST).send(new BufferingResponseListener() {
1:             @Override
1:             public void onComplete(Result result) {
1:                 status.getAndSet(result.getResponse().getStatus());
1:                 buf.append(getContentAsString());
1:                 latch.countDown();
1:             }
1:         });
1:         latch.await();
1:         assertTrue("success status", HttpStatus.isSuccess(status.get()));
1: 
1:         final CountDownLatch latch = new CountDownLatch(1);
1:         final StringBuffer buf = new StringBuffer();
1:         final AtomicInteger status = new AtomicInteger();
1:         Request request = httpClient.newRequest(url)
1:             .header("accept", "text/xml")
1:             .header("Content-Type","text/xml");
1: 
1:             request.header("selector", selector);
1: 
1:         request.method(HttpMethod.GET).send(new BufferingResponseListener() {
1:             @Override
1:             public void onComplete(Result result) {
1:                 status.getAndSet(result.getResponse().getStatus());
1:                 buf.append(getContentAsString());
1:                 latch.countDown();
1:             }
1:         });
1: 
1:         latch.await();
1:         assertTrue("success status", HttpStatus.isSuccess(status.get()));
1:             assertNotNull(buf.toString());
1:             assertEquals(expectedMessage, buf.toString().trim());
author:Hadrian Zbarcea
-------------------------------------------------------------------------------
commit:c5cebd5
/////////////////////////////////////////////////////////////////////////
1:         int port = getPort();
1:         final String urlGET="http://localhost:" + port + "/message/upcTest?clientId=consumer1&readTimeout=5000&type="+destinationType;
1:         final String urlPOST="http://localhost:" + port + "/message/upcTest?type="+destinationType;
author:Kevin Earls
-------------------------------------------------------------------------------
commit:bdf7aa4
/////////////////////////////////////////////////////////////////////////
1: import org.junit.Test;
1: 
0: import static org.junit.Assert.*;
/////////////////////////////////////////////////////////////////////////
1:     @Test(timeout = 60 * 1000)
1:     @Test(timeout = 60 * 1000)
1:     @Ignore("Needs a JIRA")
author:Claus Ibsen
-------------------------------------------------------------------------------
commit:987769a
/////////////////////////////////////////////////////////////////////////
1: /**
1:  * Licensed to the Apache Software Foundation (ASF) under one or more
1:  * contributor license agreements.  See the NOTICE file distributed with
1:  * this work for additional information regarding copyright ownership.
1:  * The ASF licenses this file to You under the Apache License, Version 2.0
1:  * (the "License"); you may not use this file except in compliance with
1:  * the License.  You may obtain a copy of the License at
1:  *
1:  *      http://www.apache.org/licenses/LICENSE-2.0
1:  *
1:  * Unless required by applicable law or agreed to in writing, software
1:  * distributed under the License is distributed on an "AS IS" BASIS,
1:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:  * See the License for the specific language governing permissions and
1:  * limitations under the License.
1:  */
1: package org.apache.activemq.web;
1: 
0: import java.io.ByteArrayInputStream;
1: 
0: import org.eclipse.jetty.client.ContentExchange;
1: import org.eclipse.jetty.client.HttpClient;
1: import org.eclipse.jetty.http.HttpStatus;
1: import org.junit.Ignore;
1: 
1: public class RestPersistentTest extends JettyTestSupport {
1: 
1:     @Override
1:     protected boolean isPersistent() {
1:         // need persistent for post/get
1:         return true;
1:     }
1: 
1:     public void testPostAndGetWithQueue() throws Exception {
1:         postAndGet("queue");
1:     }
1: 
1:     public void testPostAndGetWithTopic() throws Exception {
1:         // TODO: problems with topics
1:         // postAndGet("topic");
1:     }
1: 
1:     public void postAndGet(String destinationType) throws Exception {
1: 
0:         final String urlGET="http://localhost:8080/message/upcTest?clientId=consumer1&readTimeout=5000&type="+destinationType;
0:         final String urlPOST="http://localhost:8080/message/upcTest?type="+destinationType;
1: 
1:         final String message1="<itemPolicy><upc>1001</upc></itemPolicy>";
1:         final String property1="terminalNumber=lane1";
1:         final String selector1="terminalNumber='lane1'";
1: 
1:         HttpClient httpClient = new HttpClient();
1:         httpClient.start();
0:         httpClient.setConnectorType(HttpClient.CONNECTOR_SELECT_CHANNEL);
1: 
1:         //post first message
1:         // TODO: a problem with GET before POST
1:         // getMessage(httpClient, urlGET, selector1, null);  //should NOT receive message1
1:         postMessage(httpClient, urlPOST, property1, message1);
1:         getMessage(httpClient, urlGET, selector1, message1);  //should receive message1
1:     }
1: 
1:     private void postMessage(HttpClient httpClient, String url, String properties, String message) throws Exception
1:     {
0:         ContentExchange contentExchange = new ContentExchange();
0:         contentExchange.setMethod("POST");
0:         contentExchange.setURL(url+"&"+properties);
0:         //contentExchange.setRequestHeader("accept", "text/xml");
0:         contentExchange.setRequestHeader("Content-Type","text/xml");
0:         contentExchange.setRequestContentSource(new ByteArrayInputStream(message.getBytes("UTF-8")));
1: 
0:         httpClient.send(contentExchange);
0:         contentExchange.waitForDone();
0:         assertTrue("success status", HttpStatus.isSuccess(contentExchange.getResponseStatus()));
1:      }
1: 
1:     private void getMessage(HttpClient httpClient, String url, String selector, String expectedMessage) throws Exception
1:     {
0:         ContentExchange contentExchange = new ContentExchange(true);
0:         contentExchange.setURL(url);
0:         contentExchange.setRequestHeader("accept", "text/xml");
0:         contentExchange.setRequestHeader("Content-Type","text/xml");
1:         if(selector!=null)
1:         {
0:             contentExchange.setRequestHeader("selector", selector);
1:         }
0:         httpClient.send(contentExchange);
0:         contentExchange.waitForDone();
0:         assertTrue("success status", HttpStatus.isSuccess(contentExchange.getResponseStatus()));
1: 
1:         if(expectedMessage!=null)
1:         {
0:             assertNotNull(contentExchange.getResponseContent());
0:             assertEquals(expectedMessage, contentExchange.getResponseContent().trim());
1:         }
1:      }
1: }
============================================================================