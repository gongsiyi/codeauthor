1:88acb0e: /**
1:88acb0e:  * Licensed to the Apache Software Foundation (ASF) under one or more
1:88acb0e:  * contributor license agreements.  See the NOTICE file distributed with
1:88acb0e:  * this work for additional information regarding copyright ownership.
1:88acb0e:  * The ASF licenses this file to You under the Apache License, Version 2.0
1:88acb0e:  * (the "License"); you may not use this file except in compliance with
1:88acb0e:  * the License.  You may obtain a copy of the License at
2:88acb0e:  *
1:230a86c:  *      http://www.apache.org/licenses/LICENSE-2.0
1:88acb0e:  *
1:88acb0e:  * Unless required by applicable law or agreed to in writing, software
1:88acb0e:  * distributed under the License is distributed on an "AS IS" BASIS,
1:88acb0e:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:88acb0e:  * See the License for the specific language governing permissions and
1:88acb0e:  * limitations under the License.
1:88acb0e:  */
1:88acb0e: package org.apache.activemq.wireformat;
1:88acb0e: 
1:4821b9d: import java.io.DataInput;
1:4821b9d: import java.io.DataOutput;
1:88acb0e: import java.io.IOException;
1:88acb0e: 
1:88acb0e: import org.apache.activemq.util.ByteSequence;
1:88acb0e: 
1:88acb0e: 
1:88acb0e: /**
1:88acb0e:  * Provides a mechanism to marshal commands into and out of packets
1:88acb0e:  * or into and out of streams, Channels and Datagrams.
1:b0c2a40:  *
1:88acb0e:  * 
1:88acb0e:  */
1:88acb0e: public interface WireFormat {
1:88acb0e: 
1:88acb0e:     /**
1:88acb0e:      * Packet based marshaling 
1:88acb0e:      */
1:88acb0e:     ByteSequence marshal(Object command) throws IOException;
1:88acb0e:     
1:88acb0e:     /**
1:88acb0e:      * Packet based un-marshaling 
1:88acb0e:      */
1:88acb0e:     Object unmarshal(ByteSequence packet) throws IOException;
1:88acb0e: 
1:88acb0e:     /**
1:88acb0e:      * Stream based marshaling 
1:88acb0e:      */
1:4821b9d:     void marshal(Object command, DataOutput out) throws IOException;
1:88acb0e:     
1:88acb0e:     /**
1:88acb0e:      * Packet based un-marshaling 
1:88acb0e:      */
1:4821b9d:     Object unmarshal(DataInput in) throws IOException;
1:88acb0e:     
1:88acb0e:     /**
1:88acb0e:      * @param the version of the wire format
1:88acb0e:      */
1:fc00993:     void setVersion(int version);
1:88acb0e:     
1:88acb0e:     /**
1:88acb0e:      * @return the version of the wire format
1:88acb0e:      */
1:fc00993:     int getVersion();
1:88acb0e:     
1:88acb0e: }
============================================================================
author:Hiram R. Chirino
-------------------------------------------------------------------------------
commit:9a8f6e4
commit:b0c2a40
/////////////////////////////////////////////////////////////////////////
1:  * 
commit:8978ac0
/////////////////////////////////////////////////////////////////////////
commit:fc00993
/////////////////////////////////////////////////////////////////////////
1:     void setVersion(int version);
1:     int getVersion();
commit:230a86c
/////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////
1:  *      http://www.apache.org/licenses/LICENSE-2.0
commit:88acb0e
/////////////////////////////////////////////////////////////////////////
1: /**
1:  *
1:  * Licensed to the Apache Software Foundation (ASF) under one or more
1:  * contributor license agreements.  See the NOTICE file distributed with
1:  * this work for additional information regarding copyright ownership.
1:  * The ASF licenses this file to You under the Apache License, Version 2.0
1:  * (the "License"); you may not use this file except in compliance with
1:  * the License.  You may obtain a copy of the License at
1:  *
0:  * http://www.apache.org/licenses/LICENSE-2.0
1:  *
1:  * Unless required by applicable law or agreed to in writing, software
1:  * distributed under the License is distributed on an "AS IS" BASIS,
1:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:  * See the License for the specific language governing permissions and
1:  * limitations under the License.
1:  */
1: package org.apache.activemq.wireformat;
1: 
0: import java.io.DataInputStream;
0: import java.io.DataOutputStream;
1: import java.io.IOException;
1: 
1: import org.apache.activemq.util.ByteSequence;
1: 
1: 
1: /**
1:  * Provides a mechanism to marshal commands into and out of packets
1:  * or into and out of streams, Channels and Datagrams.
1:  *
0:  * @version $Revision: 1.1 $
1:  */
1: public interface WireFormat {
1: 
1:     /**
1:      * Packet based marshaling 
1:      */
1:     ByteSequence marshal(Object command) throws IOException;
1:     
1:     /**
1:      * Packet based un-marshaling 
1:      */
1:     Object unmarshal(ByteSequence packet) throws IOException;
1: 
1:     /**
1:      * Stream based marshaling 
1:      */
0:     void marshal(Object command, DataOutputStream out) throws IOException;
1:     
1:     /**
1:      * Packet based un-marshaling 
1:      */
0:     Object unmarshal(DataInputStream in) throws IOException;
1:     
1:     /**
1:      * @param the version of the wire format
1:      */
0:     public void setVersion(int version);
1:     
1:     /**
1:      * @return the version of the wire format
1:      */
0:     public int getVersion();
1:     
1: }
author:Bosanac Dejan
-------------------------------------------------------------------------------
commit:15065b7
/////////////////////////////////////////////////////////////////////////
0:     /**
0:      * @return true if message is being received
0:      */
0:     boolean inReceive();
0:     
author:Robert Davies
-------------------------------------------------------------------------------
commit:4821b9d
/////////////////////////////////////////////////////////////////////////
1: import java.io.DataInput;
1: import java.io.DataOutput;
/////////////////////////////////////////////////////////////////////////
1:     void marshal(Object command, DataOutput out) throws IOException;
1:     Object unmarshal(DataInput in) throws IOException;
============================================================================