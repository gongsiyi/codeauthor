1:dc4ceb4: /**
1:dc4ceb4:  * Licensed to the Apache Software Foundation (ASF) under one or more
1:dc4ceb4:  * contributor license agreements.  See the NOTICE file distributed with
1:dc4ceb4:  * this work for additional information regarding copyright ownership.
1:dc4ceb4:  * The ASF licenses this file to You under the Apache License, Version 2.0
1:dc4ceb4:  * (the "License"); you may not use this file except in compliance with
1:dc4ceb4:  * the License.  You may obtain a copy of the License at
1:dc4ceb4:  *
1:dc4ceb4:  *      http://www.apache.org/licenses/LICENSE-2.0
1:dc4ceb4:  *
1:dc4ceb4:  * Unless required by applicable law or agreed to in writing, software
1:dc4ceb4:  * distributed under the License is distributed on an "AS IS" BASIS,
1:dc4ceb4:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:dc4ceb4:  * See the License for the specific language governing permissions and
1:dc4ceb4:  * limitations under the License.
1:dc4ceb4:  */
1:dc4ceb4: package org.apache.activemq.transport.amqp;
2:dc4ceb4: 
1:dc4ceb4: import org.fusesource.hawtbuf.Buffer;
1:dc4ceb4: 
1:dc4ceb4: /**
1:3306467:  * Represents the AMQP protocol handshake packet that is sent during the
1:3306467:  * initial exchange with a remote peer.
1:dc4ceb4:  */
1:dc4ceb4: public class AmqpHeader {
1:dc4ceb4: 
1:f2653e6:     static final Buffer PREFIX = new Buffer(new byte[] { 'A', 'M', 'Q', 'P' });
1:dc4ceb4: 
1:dc4ceb4:     private Buffer buffer;
1:dc4ceb4: 
1:f2653e6:     public AmqpHeader() {
1:f2653e6:         this(new Buffer(new byte[] { 'A', 'M', 'Q', 'P', 0, 1, 0, 0 }));
1:dc4ceb4:     }
1:dc4ceb4: 
1:f2653e6:     public AmqpHeader(Buffer buffer) {
1:61a3eab:         this(buffer, true);
1:61a3eab:     }
1:61a3eab: 
1:61a3eab:     public AmqpHeader(Buffer buffer, boolean validate) {
1:61a3eab:         setBuffer(buffer, validate);
1:dc4ceb4:     }
1:dc4ceb4: 
1:dc4ceb4:     public int getProtocolId() {
1:dc4ceb4:         return buffer.get(4) & 0xFF;
1:dc4ceb4:     }
1:f2653e6: 
1:dc4ceb4:     public void setProtocolId(int value) {
1:f2653e6:         buffer.data[buffer.offset + 4] = (byte) value;
1:dc4ceb4:     }
1:dc4ceb4: 
1:dc4ceb4:     public int getMajor() {
1:dc4ceb4:         return buffer.get(5) & 0xFF;
1:dc4ceb4:     }
1:f2653e6: 
1:dc4ceb4:     public void setMajor(int value) {
1:f2653e6:         buffer.data[buffer.offset + 5] = (byte) value;
1:dc4ceb4:     }
1:dc4ceb4: 
1:dc4ceb4:     public int getMinor() {
1:dc4ceb4:         return buffer.get(6) & 0xFF;
1:dc4ceb4:     }
1:f2653e6: 
1:dc4ceb4:     public void setMinor(int value) {
1:f2653e6:         buffer.data[buffer.offset + 6] = (byte) value;
1:dc4ceb4:     }
1:dc4ceb4: 
1:dc4ceb4:     public int getRevision() {
1:dc4ceb4:         return buffer.get(7) & 0xFF;
1:dc4ceb4:     }
1:f2653e6: 
1:dc4ceb4:     public void setRevision(int value) {
1:f2653e6:         buffer.data[buffer.offset + 7] = (byte) value;
1:dc4ceb4:     }
1:dc4ceb4: 
1:dc4ceb4:     public Buffer getBuffer() {
1:dc4ceb4:         return buffer;
1:dc4ceb4:     }
1:f2653e6: 
1:dc4ceb4:     public void setBuffer(Buffer value) {
1:61a3eab:         setBuffer(value, true);
1:61a3eab:     }
1:61a3eab: 
1:61a3eab:     public void setBuffer(Buffer value, boolean validate) {
1:61a3eab:         if (validate && !value.startsWith(PREFIX) || value.length() != 8) {
1:dc4ceb4:             throw new IllegalArgumentException("Not an AMQP header buffer");
1:dc4ceb4:         }
1:dc4ceb4:         buffer = value.buffer();
1:dc4ceb4:     }
1:dc4ceb4: 
1:61a3eab:     public boolean hasValidPrefix() {
1:61a3eab:         return buffer.startsWith(PREFIX);
1:61a3eab:     }
1:61a3eab: 
1:dc4ceb4:     @Override
1:dc4ceb4:     public String toString() {
1:61a3eab:         StringBuilder builder = new StringBuilder();
1:61a3eab:         for (int i = 0; i < buffer.length(); ++i) {
1:61a3eab:             char value = (char) buffer.get(i);
1:61a3eab:             if (Character.isLetter(value)) {
1:61a3eab:                 builder.append(value);
1:61a3eab:             } else {
1:61a3eab:                 builder.append(",");
1:61a3eab:                 builder.append((int) value);
1:61a3eab:             }
1:61a3eab:         }
1:61a3eab:         return builder.toString();
1:dc4ceb4:     }
1:dc4ceb4: }
============================================================================
author:Timothy Bish
-------------------------------------------------------------------------------
commit:3306467
/////////////////////////////////////////////////////////////////////////
1:  * Represents the AMQP protocol handshake packet that is sent during the
1:  * initial exchange with a remote peer.
commit:61a3eab
/////////////////////////////////////////////////////////////////////////
1:         this(buffer, true);
1:     }
1: 
1:     public AmqpHeader(Buffer buffer, boolean validate) {
1:         setBuffer(buffer, validate);
/////////////////////////////////////////////////////////////////////////
1:         setBuffer(value, true);
1:     }
1: 
1:     public void setBuffer(Buffer value, boolean validate) {
1:         if (validate && !value.startsWith(PREFIX) || value.length() != 8) {
1:     public boolean hasValidPrefix() {
1:         return buffer.startsWith(PREFIX);
1:     }
1: 
1:         StringBuilder builder = new StringBuilder();
1:         for (int i = 0; i < buffer.length(); ++i) {
1:             char value = (char) buffer.get(i);
1:             if (Character.isLetter(value)) {
1:                 builder.append(value);
1:             } else {
1:                 builder.append(",");
1:                 builder.append((int) value);
1:             }
1:         }
1:         return builder.toString();
commit:f2653e6
/////////////////////////////////////////////////////////////////////////
1:     static final Buffer PREFIX = new Buffer(new byte[] { 'A', 'M', 'Q', 'P' });
1:     public AmqpHeader() {
1:         this(new Buffer(new byte[] { 'A', 'M', 'Q', 'P', 0, 1, 0, 0 }));
1:     public AmqpHeader(Buffer buffer) {
1: 
1:         buffer.data[buffer.offset + 4] = (byte) value;
1: 
1:         buffer.data[buffer.offset + 5] = (byte) value;
1: 
1:         buffer.data[buffer.offset + 6] = (byte) value;
1: 
1:         buffer.data[buffer.offset + 7] = (byte) value;
1: 
0:         if (!value.startsWith(PREFIX) || value.length() != 8) {
author:Hiram R. Chirino
-------------------------------------------------------------------------------
commit:dc4ceb4
/////////////////////////////////////////////////////////////////////////
1: /**
1:  * Licensed to the Apache Software Foundation (ASF) under one or more
1:  * contributor license agreements.  See the NOTICE file distributed with
1:  * this work for additional information regarding copyright ownership.
1:  * The ASF licenses this file to You under the Apache License, Version 2.0
1:  * (the "License"); you may not use this file except in compliance with
1:  * the License.  You may obtain a copy of the License at
1:  *
1:  *      http://www.apache.org/licenses/LICENSE-2.0
1:  *
1:  * Unless required by applicable law or agreed to in writing, software
1:  * distributed under the License is distributed on an "AS IS" BASIS,
1:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:  * See the License for the specific language governing permissions and
1:  * limitations under the License.
1:  */
1: package org.apache.activemq.transport.amqp;
1: 
1: import org.fusesource.hawtbuf.Buffer;
1: 
1: /**
0:  * @author <a href="http://hiramchirino.com">Hiram Chirino</a>
1:  */
1: public class AmqpHeader {
1: 
0:     static final Buffer PREFIX = new Buffer(new byte[]{
0:       'A', 'M', 'Q', 'P'
0:     });
1: 
1:     private Buffer buffer;
1: 
0:     public AmqpHeader(){
0:         this(new Buffer(new byte[]{
0:           'A', 'M', 'Q', 'P', 0, 1, 0, 0
0:         }));
1:     }
1: 
0:     public AmqpHeader(Buffer buffer){
0:         setBuffer(buffer);
1:     }
1: 
1:     public int getProtocolId() {
1:         return buffer.get(4) & 0xFF;
1:     }
1:     public void setProtocolId(int value) {
0:         buffer.data[buffer.offset+4] = (byte) value;
1:     }
1: 
1:     public int getMajor() {
1:         return buffer.get(5) & 0xFF;
1:     }
1:     public void setMajor(int value) {
0:         buffer.data[buffer.offset+5] = (byte) value;
1:     }
1: 
1:     public int getMinor() {
1:         return buffer.get(6) & 0xFF;
1:     }
1:     public void setMinor(int value) {
0:         buffer.data[buffer.offset+6] = (byte) value;
1:     }
1: 
1:     public int getRevision() {
1:         return buffer.get(7) & 0xFF;
1:     }
1:     public void setRevision(int value) {
0:         buffer.data[buffer.offset+7] = (byte) value;
1:     }
1: 
1:     public Buffer getBuffer() {
1:         return buffer;
1:     }
1:     public void setBuffer(Buffer value) {
0:         if( !value.startsWith(PREFIX) || value.length()!=8 ) {
1:             throw new IllegalArgumentException("Not an AMQP header buffer");
1:         }
1:         buffer = value.buffer();
1:     }
1: 
1: 
1:     @Override
1:     public String toString() {
0:         return buffer.toString();
1:     }
1: }
============================================================================