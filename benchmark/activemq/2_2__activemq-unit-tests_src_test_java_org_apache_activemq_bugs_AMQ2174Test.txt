1:0f492f3: /**
1:0f492f3:  * Licensed to the Apache Software Foundation (ASF) under one or more
1:0f492f3:  * contributor license agreements.  See the NOTICE file distributed with
1:0f492f3:  * this work for additional information regarding copyright ownership.
1:0f492f3:  * The ASF licenses this file to You under the Apache License, Version 2.0
1:0f492f3:  * (the "License"); you may not use this file except in compliance with
1:0f492f3:  * the License.  You may obtain a copy of the License at
1:0f492f3:  *
1:0f492f3:  *      http://www.apache.org/licenses/LICENSE-2.0
1:0f492f3:  *
1:0f492f3:  * Unless required by applicable law or agreed to in writing, software
1:0f492f3:  * distributed under the License is distributed on an "AS IS" BASIS,
1:0f492f3:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:0f492f3:  * See the License for the specific language governing permissions and
1:0f492f3:  * limitations under the License.
1:0f492f3:  */
1:3f5cfcf: package org.apache.activemq.bugs;
1:3f5cfcf: 
1:3f5cfcf: import static org.junit.Assert.assertEquals;
1:3f5cfcf: import static org.junit.Assert.assertNotNull;
1:3f5cfcf: import static org.junit.Assert.assertNull;
1:3f5cfcf: 
1:3f5cfcf: import javax.jms.Connection;
1:3f5cfcf: import javax.jms.Message;
1:3f5cfcf: import javax.jms.MessageConsumer;
1:3f5cfcf: import javax.jms.MessageProducer;
1:3f5cfcf: import javax.jms.Session;
1:3f5cfcf: import javax.jms.Topic;
1:3f5cfcf: 
1:3f5cfcf: import org.apache.activemq.ActiveMQConnectionFactory;
1:3f5cfcf: import org.apache.activemq.broker.BrokerService;
1:3f5cfcf: import org.junit.After;
1:3f5cfcf: import org.junit.Before;
1:3f5cfcf: import org.junit.Rule;
1:3f5cfcf: import org.junit.Test;
1:3f5cfcf: import org.junit.rules.TestName;
1:3f5cfcf: 
1:3f5cfcf: /**
1:3f5cfcf:  * Test cases to investigate subscription problems
1:3f5cfcf:  */
1:3f5cfcf: public class AMQ2174Test {
1:3f5cfcf: 
1:3f5cfcf:     @Rule
1:3f5cfcf:     public TestName testName = new TestName();
1:3f5cfcf: 
1:3f5cfcf:     private BrokerService broker;
1:3f5cfcf:     private ActiveMQConnectionFactory cf;
1:3f5cfcf: 
1:3f5cfcf:     @Before
1:3f5cfcf:     public void setUp() throws Exception {
1:3f5cfcf:         broker = new BrokerService();
1:3f5cfcf:         broker.setDeleteAllMessagesOnStartup(true);
1:3f5cfcf:         broker.addConnector("tcp://localhost:0");
1:3f5cfcf:         broker.setUseJmx(false);
1:3f5cfcf:         broker.start();
1:3f5cfcf:         broker.waitUntilStarted();
1:3f5cfcf: 
1:3f5cfcf:         String connectionURI = broker.getTransportConnectors().get(0).getConnectUri().toString();
1:3f5cfcf:         cf = new ActiveMQConnectionFactory(connectionURI);
1:3f5cfcf:     }
1:3f5cfcf: 
1:3f5cfcf:     @After
1:3f5cfcf:     public void tearDown() throws Exception {
1:3f5cfcf:         broker.stop();
1:3f5cfcf:     }
1:3f5cfcf: 
1:3f5cfcf:     @Test(timeout = 60000)
1:3f5cfcf:     public void testChangeDurableSub() throws Exception {
1:3f5cfcf: 
1:3f5cfcf:         Connection connection = cf.createConnection();
1:3f5cfcf:         connection.setClientID(testName.getMethodName());
1:3f5cfcf:         connection.start();
1:3f5cfcf: 
1:3f5cfcf:         Session session = connection.createSession(false, Session.AUTO_ACKNOWLEDGE);
1:3f5cfcf:         Topic destination = session.createTopic(testName.getMethodName());
1:3f5cfcf:         MessageConsumer consumer = session.createDurableSubscriber(destination, testName.getMethodName(), "color = 'red'", false);
1:3f5cfcf:         consumer.close();
1:3f5cfcf: 
1:3f5cfcf:         sendMessages();
1:3f5cfcf: 
1:3f5cfcf:         consumer = session.createDurableSubscriber(destination, testName.getMethodName(), "color = 'red'", false);
1:3f5cfcf:         Message received = consumer.receive(2000);
1:3f5cfcf:         assertNotNull(received);
1:3f5cfcf:         assertEquals("red", received.getStringProperty("color"));
1:3f5cfcf:         assertNull(consumer.receive(10));
1:3f5cfcf:         consumer.close();
1:3f5cfcf: 
1:3f5cfcf:         sendMessages();
1:3f5cfcf: 
1:3f5cfcf:         consumer = session.createDurableSubscriber(destination, testName.getMethodName(), "color = 'green'", false);
1:3f5cfcf:         received = consumer.receive(500);
1:3f5cfcf:         assertNull(received);
1:3f5cfcf: 
1:3f5cfcf:         sendMessages();
1:3f5cfcf: 
1:3f5cfcf:         received = consumer.receive(2000);
1:3f5cfcf:         assertNotNull(received);
1:3f5cfcf:         assertEquals("green", received.getStringProperty("color"));
1:3f5cfcf:         assertNull(consumer.receive(10));
1:3f5cfcf:         consumer.close();
1:3f5cfcf: 
1:3f5cfcf:         consumer = session.createDurableSubscriber(destination, testName.getMethodName());
1:3f5cfcf: 
1:3f5cfcf:         sendMessages();
1:3f5cfcf: 
1:3f5cfcf:         received = consumer.receive(2000);
1:3f5cfcf:         assertNotNull(received);
1:3f5cfcf:         assertEquals("red", received.getStringProperty("color"));
1:3f5cfcf:         received = consumer.receive(2000);
1:3f5cfcf:         assertNotNull(received);
1:3f5cfcf:         assertEquals("green", received.getStringProperty("color"));
1:3f5cfcf:         received = consumer.receive(2000);
1:3f5cfcf:         assertNotNull(received);
1:3f5cfcf:         assertEquals("blue", received.getStringProperty("color"));
1:3f5cfcf:         assertNull(consumer.receive(10));
1:3f5cfcf: 
1:3f5cfcf:         consumer.close();
1:3f5cfcf:     }
1:3f5cfcf: 
1:3f5cfcf:     private void sendMessages() throws Exception {
1:3f5cfcf:         Connection connection = cf.createConnection();
1:3f5cfcf:         Session session = connection.createSession(false, Session.AUTO_ACKNOWLEDGE);
1:3f5cfcf:         Topic destination = session.createTopic(testName.getMethodName());
1:3f5cfcf:         MessageProducer producer = session.createProducer(destination);
1:3f5cfcf: 
1:3f5cfcf:         Message message1 = session.createMessage();
1:3f5cfcf:         Message message2 = session.createMessage();
1:3f5cfcf:         Message message3 = session.createMessage();
1:3f5cfcf: 
1:3f5cfcf:         message1.setStringProperty("color", "red");
1:3f5cfcf:         message2.setStringProperty("color", "green");
1:3f5cfcf:         message3.setStringProperty("color", "blue");
1:3f5cfcf: 
1:3f5cfcf:         producer.send(message1);
1:3f5cfcf:         producer.send(message2);
1:3f5cfcf:         producer.send(message3);
1:3f5cfcf: 
1:3f5cfcf:         connection.close();
1:3f5cfcf:     }
1:3f5cfcf: 
1:3f5cfcf: }
============================================================================
author:Christopher L. Shannon (cshannon)
-------------------------------------------------------------------------------
commit:0f492f3
/////////////////////////////////////////////////////////////////////////
1: /**
1:  * Licensed to the Apache Software Foundation (ASF) under one or more
1:  * contributor license agreements.  See the NOTICE file distributed with
1:  * this work for additional information regarding copyright ownership.
1:  * The ASF licenses this file to You under the Apache License, Version 2.0
1:  * (the "License"); you may not use this file except in compliance with
1:  * the License.  You may obtain a copy of the License at
1:  *
1:  *      http://www.apache.org/licenses/LICENSE-2.0
1:  *
1:  * Unless required by applicable law or agreed to in writing, software
1:  * distributed under the License is distributed on an "AS IS" BASIS,
1:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:  * See the License for the specific language governing permissions and
1:  * limitations under the License.
1:  */
author:Timothy Bish
-------------------------------------------------------------------------------
commit:3f5cfcf
/////////////////////////////////////////////////////////////////////////
1: package org.apache.activemq.bugs;
1: 
1: import static org.junit.Assert.assertEquals;
1: import static org.junit.Assert.assertNotNull;
1: import static org.junit.Assert.assertNull;
1: 
1: import javax.jms.Connection;
1: import javax.jms.Message;
1: import javax.jms.MessageConsumer;
1: import javax.jms.MessageProducer;
1: import javax.jms.Session;
1: import javax.jms.Topic;
1: 
1: import org.apache.activemq.ActiveMQConnectionFactory;
1: import org.apache.activemq.broker.BrokerService;
1: import org.junit.After;
1: import org.junit.Before;
1: import org.junit.Rule;
1: import org.junit.Test;
1: import org.junit.rules.TestName;
1: 
1: /**
1:  * Test cases to investigate subscription problems
1:  */
1: public class AMQ2174Test {
1: 
1:     @Rule
1:     public TestName testName = new TestName();
1: 
1:     private BrokerService broker;
1:     private ActiveMQConnectionFactory cf;
1: 
1:     @Before
1:     public void setUp() throws Exception {
1:         broker = new BrokerService();
1:         broker.setDeleteAllMessagesOnStartup(true);
1:         broker.addConnector("tcp://localhost:0");
1:         broker.setUseJmx(false);
1:         broker.start();
1:         broker.waitUntilStarted();
1: 
1:         String connectionURI = broker.getTransportConnectors().get(0).getConnectUri().toString();
1:         cf = new ActiveMQConnectionFactory(connectionURI);
1:     }
1: 
1:     @After
1:     public void tearDown() throws Exception {
1:         broker.stop();
1:     }
1: 
1:     @Test(timeout = 60000)
1:     public void testChangeDurableSub() throws Exception {
1: 
1:         Connection connection = cf.createConnection();
1:         connection.setClientID(testName.getMethodName());
1:         connection.start();
1: 
1:         Session session = connection.createSession(false, Session.AUTO_ACKNOWLEDGE);
1:         Topic destination = session.createTopic(testName.getMethodName());
1:         MessageConsumer consumer = session.createDurableSubscriber(destination, testName.getMethodName(), "color = 'red'", false);
1:         consumer.close();
1: 
1:         sendMessages();
1: 
1:         consumer = session.createDurableSubscriber(destination, testName.getMethodName(), "color = 'red'", false);
1:         Message received = consumer.receive(2000);
1:         assertNotNull(received);
1:         assertEquals("red", received.getStringProperty("color"));
1:         assertNull(consumer.receive(10));
1:         consumer.close();
1: 
1:         sendMessages();
1: 
1:         consumer = session.createDurableSubscriber(destination, testName.getMethodName(), "color = 'green'", false);
1:         received = consumer.receive(500);
1:         assertNull(received);
1: 
1:         sendMessages();
1: 
1:         received = consumer.receive(2000);
1:         assertNotNull(received);
1:         assertEquals("green", received.getStringProperty("color"));
1:         assertNull(consumer.receive(10));
1:         consumer.close();
1: 
1:         consumer = session.createDurableSubscriber(destination, testName.getMethodName());
1: 
1:         sendMessages();
1: 
1:         received = consumer.receive(2000);
1:         assertNotNull(received);
1:         assertEquals("red", received.getStringProperty("color"));
1:         received = consumer.receive(2000);
1:         assertNotNull(received);
1:         assertEquals("green", received.getStringProperty("color"));
1:         received = consumer.receive(2000);
1:         assertNotNull(received);
1:         assertEquals("blue", received.getStringProperty("color"));
1:         assertNull(consumer.receive(10));
1: 
1:         consumer.close();
1:     }
1: 
1:     private void sendMessages() throws Exception {
1:         Connection connection = cf.createConnection();
1:         Session session = connection.createSession(false, Session.AUTO_ACKNOWLEDGE);
1:         Topic destination = session.createTopic(testName.getMethodName());
1:         MessageProducer producer = session.createProducer(destination);
1: 
1:         Message message1 = session.createMessage();
1:         Message message2 = session.createMessage();
1:         Message message3 = session.createMessage();
1: 
1:         message1.setStringProperty("color", "red");
1:         message2.setStringProperty("color", "green");
1:         message3.setStringProperty("color", "blue");
1: 
1:         producer.send(message1);
1:         producer.send(message2);
1:         producer.send(message3);
1: 
1:         connection.close();
1:     }
1: 
1: }
============================================================================