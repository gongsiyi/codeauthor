1:bd0ad68: /**
1:bd0ad68:  * Licensed to the Apache Software Foundation (ASF) under one or more
1:bd0ad68:  * contributor license agreements.  See the NOTICE file distributed with
1:bd0ad68:  * this work for additional information regarding copyright ownership.
1:bd0ad68:  * The ASF licenses this file to You under the Apache License, Version 2.0
1:bd0ad68:  * (the "License"); you may not use this file except in compliance with
1:bd0ad68:  * the License.  You may obtain a copy of the License at
3:bd0ad68:  *
1:5f1adbe:  *      http://www.apache.org/licenses/LICENSE-2.0
1:bd0ad68:  *
1:bd0ad68:  * Unless required by applicable law or agreed to in writing, software
1:bd0ad68:  * distributed under the License is distributed on an "AS IS" BASIS,
1:bd0ad68:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:bd0ad68:  * See the License for the specific language governing permissions and
1:bd0ad68:  * limitations under the License.
1:bd0ad68:  */
1:bd0ad68: package org.apache.activemq.openwire.tool;
10:bd0ad68: 
1:bd0ad68: import java.io.File;
1:bd0ad68: import java.io.PrintWriter;
1:bd0ad68: import java.util.Iterator;
1:bd0ad68: import java.util.List;
1:bd0ad68: 
1:bd0ad68: import org.codehaus.jam.JAnnotation;
1:bd0ad68: import org.codehaus.jam.JClass;
1:bd0ad68: import org.codehaus.jam.JPackage;
1:bd0ad68: import org.codehaus.jam.JProperty;
1:bd0ad68: 
1:bd0ad68: /**
1:0bbc0ac:  * 
1:bd0ad68:  */
1:bd0ad68: public class JavaTestsGenerator extends MultiSourceGenerator {
1:bd0ad68: 
1:540dd5c:     protected String targetDir = "src/test/java";
1:bd0ad68: 
1:540dd5c:     public Object run() {
1:540dd5c:         if (destDir == null) {
1:540dd5c:             destDir = new File(targetDir + "/org/apache/activemq/openwire/v" + getOpenwireVersion());
1:540dd5c:         }
1:540dd5c:         return super.run();
1:540dd5c:     }
1:540dd5c: 
1:540dd5c:     protected String getClassName(JClass jclass) {
1:540dd5c:         if (isAbstract(jclass)) {
1:540dd5c:             return super.getClassName(jclass) + "TestSupport";
1:540dd5c:         } else {
1:540dd5c:             return super.getClassName(jclass) + "Test";
1:540dd5c:         }
1:540dd5c:     }
1:bd0ad68: 
1:bd0ad68:     protected String getBaseClassName(JClass jclass) {
1:bd0ad68:         String answer = "DataFileGeneratorTestSupport";
1:bd0ad68:         if (superclass != null) {
1:bd0ad68:             String name = superclass.getSimpleName();
1:540dd5c:             if (name != null && !name.equals("JNDIBaseStorable") && !name.equals("DataStructureSupport") && !name.equals("Object")) {
1:540dd5c:                 answer = name + "Test";
1:540dd5c:                 if (isAbstract(getJclass().getSuperclass())) {
1:540dd5c:                     answer += "Support";
1:540dd5c:                 }
15:bd0ad68:             }
1:bd0ad68:         }
1:bd0ad68:         return answer;
1:bd0ad68:     }
1:bd0ad68: 
1:540dd5c:     private void generateLicence(PrintWriter out) {
1:540dd5c:         out.println("/**");
1:540dd5c:         out.println(" *");
1:540dd5c:         out.println(" * Licensed to the Apache Software Foundation (ASF) under one or more");
1:540dd5c:         out.println(" * contributor license agreements.  See the NOTICE file distributed with");
1:540dd5c:         out.println(" * this work for additional information regarding copyright ownership.");
1:540dd5c:         out.println(" * The ASF licenses this file to You under the Apache License, Version 2.0");
1:540dd5c:         out.println(" * (the \"License\"); you may not use this file except in compliance with");
1:540dd5c:         out.println(" * the License.  You may obtain a copy of the License at");
1:540dd5c:         out.println(" *");
1:540dd5c:         out.println(" * http://www.apache.org/licenses/LICENSE-2.0");
1:540dd5c:         out.println(" *");
1:540dd5c:         out.println(" * Unless required by applicable law or agreed to in writing, software");
1:540dd5c:         out.println(" * distributed under the License is distributed on an \"AS IS\" BASIS,");
1:540dd5c:         out.println(" * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.");
1:540dd5c:         out.println(" * See the License for the specific language governing permissions and");
1:540dd5c:         out.println(" * limitations under the License.");
1:540dd5c:         out.println(" */");
1:540dd5c:     }
1:bd0ad68: 
1:540dd5c:     protected void generateFile(PrintWriter out) {
1:bd0ad68: 
1:540dd5c:         generateLicence(out);
1:bd0ad68: 
1:540dd5c:         out.println("package org.apache.activemq.openwire.v" + openwireVersion + ";");
1:540dd5c:         out.println("");
1:540dd5c:         out.println("import java.io.DataInputStream;");
1:540dd5c:         out.println("import java.io.DataOutputStream;");
1:540dd5c:         out.println("import java.io.IOException;");
1:540dd5c:         out.println("");
1:540dd5c:         out.println("import org.apache.activemq.openwire.*;");
1:540dd5c:         out.println("import org.apache.activemq.command.*;");
1:540dd5c:         out.println("");
1:540dd5c:         for (int i = 0; i < getJclass().getImportedPackages().length; i++) {
1:540dd5c:             JPackage pkg = getJclass().getImportedPackages()[i];
1:540dd5c:             for (int j = 0; j < pkg.getClasses().length; j++) {
1:540dd5c:                 JClass clazz = pkg.getClasses()[j];
1:540dd5c:                 out.println("import " + clazz.getQualifiedName() + ";");
1:540dd5c:             }
1:540dd5c:         }
1:bd0ad68: 
1:540dd5c:         out.println("");
1:540dd5c:         out.println("/**");
1:540dd5c:         out.println(" * Test case for the OpenWire marshalling for " + jclass.getSimpleName() + "");
1:540dd5c:         out.println(" *");
1:540dd5c:         out.println(" *");
1:540dd5c:         out.println(" * NOTE!: This file is auto generated - do not modify!");
1:540dd5c:         out.println(" *        if you need to make a change, please see the modify the groovy scripts in the");
1:540dd5c:         out.println(" *        under src/gram/script and then use maven openwire:generate to regenerate ");
1:540dd5c:         out.println(" *        this file.");
1:540dd5c:         out.println(" *");
1:b0c2a40:         out.println(" * ");
1:540dd5c:         out.println(" */");
1:540dd5c:         out.println("public " + getAbstractClassText() + "class " + className + " extends " + baseClass + " {");
1:540dd5c:         out.println("");
1:540dd5c:         if (!isAbstractClass()) {
1:540dd5c:             out.println("");
1:540dd5c:             out.println("    public static " + jclass.getSimpleName() + "Test SINGLETON = new " + jclass.getSimpleName() + "Test();");
1:540dd5c:             out.println("");
1:540dd5c:             out.println("    public Object createObject() throws Exception {");
1:540dd5c:             out.println("        " + jclass.getSimpleName() + " info = new " + jclass.getSimpleName() + "();");
1:540dd5c:             out.println("        populateObject(info);");
1:540dd5c:             out.println("        return info;");
1:540dd5c:             out.println("    }");
1:540dd5c:         }
1:540dd5c:         out.println("");
1:540dd5c:         out.println("    protected void populateObject(Object object) throws Exception {");
1:540dd5c:         out.println("        super.populateObject(object);");
1:540dd5c:         out.println("        " + getJclass().getSimpleName() + " info = (" + getJclass().getSimpleName() + ") object;");
1:540dd5c:         out.println("");
1:bd0ad68: 
1:540dd5c:         TestDataGenerator generator = new TestDataGenerator();
1:bd0ad68: 
1:540dd5c:         List properties = getProperties();
1:540dd5c:         for (Iterator iter = properties.iterator(); iter.hasNext();) {
1:540dd5c:             JProperty property = (JProperty)iter.next();
1:bd0ad68: 
1:540dd5c:             JAnnotation annotation = property.getAnnotation("openwire:property");
1:540dd5c:             String size = stringValue(annotation, "size");
1:540dd5c:             String testSize = stringValue(annotation, "testSize");
1:540dd5c:             String type = property.getType().getSimpleName();
1:540dd5c: //            boolean cached = isCachedProperty(property);
1:540dd5c:             String propertyName = property.getSimpleName();
1:540dd5c:             if ("-1".equals(testSize)) {
1:540dd5c:                 continue;
1:540dd5c:             }
1:bd0ad68: 
1:540dd5c:             String setterName = property.getSetter().getSimpleName();
1:540dd5c: 
1:540dd5c:             if (type.equals("boolean")) {
1:540dd5c:                 out.println("        info." + setterName + "(" + generator.createBool() + ");");
1:540dd5c:             } else if (type.equals("byte")) {
1:540dd5c:                 out.println("        info." + setterName + "(" + generator.createByte() + ");");
1:540dd5c:             } else if (type.equals("char")) {
1:540dd5c:                 out.println("        info." + setterName + "(" + generator.createChar() + ");");
1:540dd5c:             } else if (type.equals("short")) {
1:540dd5c:                 out.println("        info." + setterName + "(" + generator.createShort() + ");");
1:540dd5c:             } else if (type.equals("int")) {
1:540dd5c:                 out.println("        info." + setterName + "(" + generator.createInt() + ");");
1:540dd5c:             } else if (type.equals("long")) {
1:540dd5c:                 out.println("        info." + setterName + "(" + generator.createLong() + ");");
1:540dd5c:             } else if (type.equals("byte[]")) {
1:540dd5c:                 out.println("        info." + setterName + "(" + generator.createByteArray(propertyName) + ");");
1:540dd5c:             } else if (type.equals("String")) {
1:540dd5c:                 out.println("        info." + setterName + "(\"" + generator.createString(propertyName) + "\");");
1:540dd5c:             } else if (type.equals("ByteSequence")) {
1:540dd5c:                 out.println("        {");
1:540dd5c:                 out.println("            byte data[] = " + generator.createByteArray(propertyName) + ";");
1:540dd5c:                 out.println("            info." + setterName + "(new org.apache.activemq.util.ByteSequence(data,0,data.length));");
1:540dd5c:                 out.println("}");
1:540dd5c:             } else if (type.equals("Throwable")) {
1:540dd5c:                 out.println("        info." + setterName + "(createThrowable(\"" + generator.createString(propertyName) + "\"));");
1:540dd5c:             } else {
1:540dd5c:                 if (property.getType().isArrayType()) {
1:540dd5c:                     String arrayType = property.getType().getArrayComponentType().getSimpleName();
1:540dd5c:                     if (size == null) {
1:540dd5c:                         size = "2";
1:540dd5c:                     }
1:540dd5c:                     if (arrayType == jclass.getSimpleName()) {
1:540dd5c:                         size = "0";
1:540dd5c:                     }
1:540dd5c:                     out.println("        {");
1:540dd5c:                     out.println("            " + arrayType + " value[] = new " + arrayType + "[" + size + "];");
1:540dd5c:                     out.println("            for( int i=0; i < " + size + "; i++ ) {");
1:540dd5c:                     out.println("                value[i] = create" + arrayType + "(\"" + generator.createString(propertyName) + "\");");
1:540dd5c:                     out.println("            }");
1:540dd5c:                     out.println("            info." + setterName + "(value);");
1:540dd5c:                     out.println("        }");
1:540dd5c:                 } else {
1:540dd5c:                     out.println("        info." + setterName + "(create" + type + "(\"" + generator.createString(propertyName) + "\"));");
1:540dd5c:                 }
1:540dd5c:             }
1:540dd5c:         }
1:540dd5c: 
1:540dd5c:         out.println("    }");
1:540dd5c:         out.println("}");
1:540dd5c:     }
1:540dd5c: 
1:540dd5c:     public String getTargetDir() {
1:540dd5c:         return targetDir;
1:540dd5c:     }
1:540dd5c: 
1:540dd5c:     public void setTargetDir(String targetDir) {
1:540dd5c:         this.targetDir = targetDir;
1:540dd5c:     }
1:bd0ad68: }
============================================================================
author:Hiram R. Chirino
-------------------------------------------------------------------------------
commit:b0c2a40
/////////////////////////////////////////////////////////////////////////
1:         out.println(" * ");
commit:0bbc0ac
/////////////////////////////////////////////////////////////////////////
1:  * 
commit:540dd5c
/////////////////////////////////////////////////////////////////////////
1:     protected String targetDir = "src/test/java";
1:     public Object run() {
1:         if (destDir == null) {
1:             destDir = new File(targetDir + "/org/apache/activemq/openwire/v" + getOpenwireVersion());
1:         }
1:         return super.run();
1:     }
1: 
1:     protected String getClassName(JClass jclass) {
1:         if (isAbstract(jclass)) {
1:             return super.getClassName(jclass) + "TestSupport";
1:         } else {
1:             return super.getClassName(jclass) + "Test";
1:         }
1:     }
1:             if (name != null && !name.equals("JNDIBaseStorable") && !name.equals("DataStructureSupport") && !name.equals("Object")) {
1:                 answer = name + "Test";
1:                 if (isAbstract(getJclass().getSuperclass())) {
1:                     answer += "Support";
1:                 }
1:     private void generateLicence(PrintWriter out) {
1:         out.println("/**");
1:         out.println(" *");
1:         out.println(" * Licensed to the Apache Software Foundation (ASF) under one or more");
1:         out.println(" * contributor license agreements.  See the NOTICE file distributed with");
1:         out.println(" * this work for additional information regarding copyright ownership.");
1:         out.println(" * The ASF licenses this file to You under the Apache License, Version 2.0");
1:         out.println(" * (the \"License\"); you may not use this file except in compliance with");
1:         out.println(" * the License.  You may obtain a copy of the License at");
1:         out.println(" *");
1:         out.println(" * http://www.apache.org/licenses/LICENSE-2.0");
1:         out.println(" *");
1:         out.println(" * Unless required by applicable law or agreed to in writing, software");
1:         out.println(" * distributed under the License is distributed on an \"AS IS\" BASIS,");
1:         out.println(" * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.");
1:         out.println(" * See the License for the specific language governing permissions and");
1:         out.println(" * limitations under the License.");
1:         out.println(" */");
1:     }
1:     protected void generateFile(PrintWriter out) {
1:         generateLicence(out);
1:         out.println("package org.apache.activemq.openwire.v" + openwireVersion + ";");
1:         out.println("");
1:         out.println("import java.io.DataInputStream;");
1:         out.println("import java.io.DataOutputStream;");
1:         out.println("import java.io.IOException;");
1:         out.println("");
1:         out.println("import org.apache.activemq.openwire.*;");
1:         out.println("import org.apache.activemq.command.*;");
1:         out.println("");
1:         for (int i = 0; i < getJclass().getImportedPackages().length; i++) {
1:             JPackage pkg = getJclass().getImportedPackages()[i];
1:             for (int j = 0; j < pkg.getClasses().length; j++) {
1:                 JClass clazz = pkg.getClasses()[j];
1:                 out.println("import " + clazz.getQualifiedName() + ";");
1:             }
1:         }
1:         out.println("");
1:         out.println("/**");
1:         out.println(" * Test case for the OpenWire marshalling for " + jclass.getSimpleName() + "");
1:         out.println(" *");
1:         out.println(" *");
1:         out.println(" * NOTE!: This file is auto generated - do not modify!");
1:         out.println(" *        if you need to make a change, please see the modify the groovy scripts in the");
1:         out.println(" *        under src/gram/script and then use maven openwire:generate to regenerate ");
1:         out.println(" *        this file.");
1:         out.println(" *");
0:         out.println(" * @version $Revision: $");
1:         out.println(" */");
1:         out.println("public " + getAbstractClassText() + "class " + className + " extends " + baseClass + " {");
1:         out.println("");
1:         if (!isAbstractClass()) {
1:             out.println("");
1:             out.println("    public static " + jclass.getSimpleName() + "Test SINGLETON = new " + jclass.getSimpleName() + "Test();");
1:             out.println("");
1:             out.println("    public Object createObject() throws Exception {");
1:             out.println("        " + jclass.getSimpleName() + " info = new " + jclass.getSimpleName() + "();");
1:             out.println("        populateObject(info);");
1:             out.println("        return info;");
1:             out.println("    }");
1:         }
1:         out.println("");
1:         out.println("    protected void populateObject(Object object) throws Exception {");
1:         out.println("        super.populateObject(object);");
1:         out.println("        " + getJclass().getSimpleName() + " info = (" + getJclass().getSimpleName() + ") object;");
1:         out.println("");
1:         TestDataGenerator generator = new TestDataGenerator();
1:         List properties = getProperties();
1:         for (Iterator iter = properties.iterator(); iter.hasNext();) {
1:             JProperty property = (JProperty)iter.next();
1:             JAnnotation annotation = property.getAnnotation("openwire:property");
1:             String size = stringValue(annotation, "size");
1:             String testSize = stringValue(annotation, "testSize");
1:             String type = property.getType().getSimpleName();
1: //            boolean cached = isCachedProperty(property);
1:             String propertyName = property.getSimpleName();
1:             if ("-1".equals(testSize)) {
1:                 continue;
1:             }
1:             String setterName = property.getSetter().getSimpleName();
1: 
1:             if (type.equals("boolean")) {
1:                 out.println("        info." + setterName + "(" + generator.createBool() + ");");
1:             } else if (type.equals("byte")) {
1:                 out.println("        info." + setterName + "(" + generator.createByte() + ");");
1:             } else if (type.equals("char")) {
1:                 out.println("        info." + setterName + "(" + generator.createChar() + ");");
1:             } else if (type.equals("short")) {
1:                 out.println("        info." + setterName + "(" + generator.createShort() + ");");
1:             } else if (type.equals("int")) {
1:                 out.println("        info." + setterName + "(" + generator.createInt() + ");");
1:             } else if (type.equals("long")) {
1:                 out.println("        info." + setterName + "(" + generator.createLong() + ");");
1:             } else if (type.equals("byte[]")) {
1:                 out.println("        info." + setterName + "(" + generator.createByteArray(propertyName) + ");");
1:             } else if (type.equals("String")) {
1:                 out.println("        info." + setterName + "(\"" + generator.createString(propertyName) + "\");");
1:             } else if (type.equals("ByteSequence")) {
1:                 out.println("        {");
1:                 out.println("            byte data[] = " + generator.createByteArray(propertyName) + ";");
1:                 out.println("            info." + setterName + "(new org.apache.activemq.util.ByteSequence(data,0,data.length));");
1:                 out.println("}");
1:             } else if (type.equals("Throwable")) {
1:                 out.println("        info." + setterName + "(createThrowable(\"" + generator.createString(propertyName) + "\"));");
1:             } else {
1:                 if (property.getType().isArrayType()) {
1:                     String arrayType = property.getType().getArrayComponentType().getSimpleName();
1:                     if (size == null) {
1:                         size = "2";
1:                     }
1:                     if (arrayType == jclass.getSimpleName()) {
1:                         size = "0";
1:                     }
1:                     out.println("        {");
1:                     out.println("            " + arrayType + " value[] = new " + arrayType + "[" + size + "];");
1:                     out.println("            for( int i=0; i < " + size + "; i++ ) {");
1:                     out.println("                value[i] = create" + arrayType + "(\"" + generator.createString(propertyName) + "\");");
1:                     out.println("            }");
1:                     out.println("            info." + setterName + "(value);");
1:                     out.println("        }");
1:                 } else {
1:                     out.println("        info." + setterName + "(create" + type + "(\"" + generator.createString(propertyName) + "\"));");
1:                 }
1:             }
1:         }
1: 
1:         out.println("    }");
1:         out.println("}");
1:     }
1: 
1:     public String getTargetDir() {
1:         return targetDir;
1:     }
1: 
1:     public void setTargetDir(String targetDir) {
1:         this.targetDir = targetDir;
1:     }
commit:5f1adbe
/////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////
1:  *      http://www.apache.org/licenses/LICENSE-2.0
commit:bd0ad68
/////////////////////////////////////////////////////////////////////////
1: /**
1:  *
1:  * Licensed to the Apache Software Foundation (ASF) under one or more
1:  * contributor license agreements.  See the NOTICE file distributed with
1:  * this work for additional information regarding copyright ownership.
1:  * The ASF licenses this file to You under the Apache License, Version 2.0
1:  * (the "License"); you may not use this file except in compliance with
1:  * the License.  You may obtain a copy of the License at
1:  *
0:  * http://www.apache.org/licenses/LICENSE-2.0
1:  *
1:  * Unless required by applicable law or agreed to in writing, software
1:  * distributed under the License is distributed on an "AS IS" BASIS,
1:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:  * See the License for the specific language governing permissions and
1:  * limitations under the License.
1:  */
1: package org.apache.activemq.openwire.tool;
1: 
1: import java.io.File;
1: import java.io.PrintWriter;
1: import java.util.Iterator;
1: import java.util.List;
1: 
1: import org.codehaus.jam.JAnnotation;
1: import org.codehaus.jam.JClass;
1: import org.codehaus.jam.JPackage;
1: import org.codehaus.jam.JProperty;
1: 
1: 
1: /**
1:  * 
0:  * @version $Revision: 384826 $
1:  */
1: public class JavaTestsGenerator extends MultiSourceGenerator {
1: 
0: 	protected String targetDir="src/test/java";
1: 
0: 	public Object run() {
0: 		if (destDir == null) {
0: 			destDir = new File(targetDir+"/org/apache/activemq/openwire/v" + getOpenwireVersion());
1: 		}
0: 		return super.run();
1: 	}
1: 	
0: 	protected String getClassName(JClass jclass) {
0:     	if( isAbstract(jclass) ) {
0:         	return super.getClassName(jclass) + "TestSupport";
0:     	} else {
0:         	return super.getClassName(jclass) + "Test";
1:     	}
1: 	}
1: 
1:     protected String getBaseClassName(JClass jclass) {
1:         String answer = "DataFileGeneratorTestSupport";
1:         if (superclass != null) {
1:             String name = superclass.getSimpleName();
0:             if (name!=null 
0:             		&& !name.equals("JNDIBaseStorable") 
0:     				&& !name.equals("DataStructureSupport") 
0:     				&& !name.equals("Object")) {
0:         	   answer = name + "Test";
0:     		   if (isAbstract(getJclass().getSuperclass())) 
0:     			   answer += "Support";
1:             }
1:         }
1:         return answer;
1:     }
1: 
0: 	private void generateLicence(PrintWriter out) {
0: out.println("/**");
0: out.println(" *");
0: out.println(" * Licensed to the Apache Software Foundation (ASF) under one or more");
0: out.println(" * contributor license agreements.  See the NOTICE file distributed with");
0: out.println(" * this work for additional information regarding copyright ownership.");
0: out.println(" * The ASF licenses this file to You under the Apache License, Version 2.0");
0: out.println(" * (the \"License\"); you may not use this file except in compliance with");
0: out.println(" * the License.  You may obtain a copy of the License at");
0: out.println(" *");
0: out.println(" * http://www.apache.org/licenses/LICENSE-2.0");
0: out.println(" *");
0: out.println(" * Unless required by applicable law or agreed to in writing, software");
0: out.println(" * distributed under the License is distributed on an \"AS IS\" BASIS,");
0: out.println(" * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.");
0: out.println(" * See the License for the specific language governing permissions and");
0: out.println(" * limitations under the License.");
0: out.println(" */");
1: 	}
1: 	
0: 	protected void generateFile(PrintWriter out) {
1: 
0: 		generateLicence(out);
1: 
0: out.println("package org.apache.activemq.openwire.v"+openwireVersion+";");
0: out.println("");
0: out.println("import java.io.DataInputStream;");
0: out.println("import java.io.DataOutputStream;");
0: out.println("import java.io.IOException;");
0: out.println("");
0: out.println("import org.apache.activemq.openwire.*;");
0: out.println("import org.apache.activemq.command.*;");
0: out.println("");
0: 		for (int i = 0; i < getJclass().getImportedPackages().length; i++) {
0: 			JPackage pkg = getJclass().getImportedPackages()[i];
0: 			for (int j = 0; j < pkg.getClasses().length; j++) {
0: 				JClass clazz = pkg.getClasses()[j];
0: out.println("import " + clazz.getQualifiedName() + ";");
1: 			}
1: 		}
1: 
0: 		boolean marshallerAware = isMarshallAware(jclass);
1: 
0: out.println("");
0: out.println("/**");
0: out.println(" * Test case for the OpenWire marshalling for "+jclass.getSimpleName()+"");
0: out.println(" *");
0: out.println(" *");
0: out.println(" * NOTE!: This file is auto generated - do not modify!");
0: out.println(" *        if you need to make a change, please see the modify the groovy scripts in the");
0: out.println(" *        under src/gram/script and then use maven openwire:generate to regenerate ");
0: out.println(" *        this file.");
0: out.println(" *");
0: out.println(" * @version $Revision: $");
0: out.println(" */");
0: out.println("public "+getAbstractClassText()+"class "+className+" extends "+baseClass+" {");
0: out.println("");
0: 		if (!isAbstractClass()) {
0: out.println("");
0: out.println("    public static "+jclass.getSimpleName()+"Test SINGLETON = new "+jclass.getSimpleName()+"Test();");
0: out.println("");
0: out.println("    public Object createObject() throws Exception {");
0: out.println("        "+jclass.getSimpleName()+" info = new "+jclass.getSimpleName()+"();");
0: out.println("        populateObject(info);");
0: out.println("        return info;");
0: out.println("    }");
1: 		}
0: out.println("");
0: out.println("    protected void populateObject(Object object) throws Exception {");
0: out.println("        super.populateObject(object);");
0: out.println("        "+getJclass().getSimpleName()+" info = ("+getJclass().getSimpleName()+") object;");
0: out.println("");
1: 
0: 		TestDataGenerator generator = new TestDataGenerator();
1: 
0: 		List properties = getProperties();
0: 		for (Iterator iter = properties.iterator(); iter.hasNext();) {
0: 			JProperty property = (JProperty) iter.next();
1: 
0: 			JAnnotation annotation = property.getAnnotation("openwire:property");		   
0: 			String size = stringValue(annotation, "size");
0: 			String testSize = stringValue(annotation, "testSize");
0: 		    String type = property.getType().getSimpleName();
0: 		    boolean cached = isCachedProperty(property);
0: 		    String propertyName = property.getSimpleName();
0: 		    if ("-1".equals(testSize)) 
0: 		    	continue;
1: 		   		    
1: 		    
0: 		    String setterName = property.getSetter().getSimpleName();
1: 		    
0: 		    if( type.equals("boolean")) {
0: out.println("        info."+setterName+"("+generator.createBool()+");");
0: 		    } else if( type.equals("byte")) {
0: out.println("        info."+setterName+"("+generator.createByte()+");");
0: 		    } else if( type.equals("char")) {
0: out.println("        info."+setterName+"("+generator.createChar()+");");
0: 		    } else if( type.equals("short")) {
0: out.println("        info."+setterName+"("+generator.createShort()+");");
0: 		    } else if( type.equals("int")) {
0: out.println("        info."+setterName+"("+generator.createInt()+");");
0: 		    } else if( type.equals("long")) {
0: out.println("        info."+setterName+"("+generator.createLong()+");");
0: 		    } else if( type.equals("byte[]")) {
0: out.println("        info."+setterName+"("+generator.createByteArray(propertyName)+");");
0: 		    } else if( type.equals("String")) {
0: out.println("        info."+setterName+"(\""+generator.createString(propertyName)+"\");");
0: 		    } else if( type.equals("ByteSequence")) {
0: out.println("        {");
0: out.println("            byte data[] = "+generator.createByteArray(propertyName)+";");
0: out.println("            info."+setterName+"(new org.apache.activemq.util.ByteSequence(data,0,data.length));");
0: out.println(        "}");       
0: 		    } else if( type.equals("Throwable")) {
0: out.println("        info."+setterName+"(createThrowable(\""+generator.createString(propertyName)+"\"));");
0: 		    } else {
0: 			    if( property.getType().isArrayType() ) {
0: 			    	String arrayType = property.getType().getArrayComponentType().getSimpleName();
0: 		      	    if (size == null) 
0: 		      	      size = "2";
0: 			  	    if (arrayType == jclass.getSimpleName())
0: 			  	      size = "0";
0: out.println("        {");
0: out.println("            "+arrayType+" value[] = new "+arrayType+"["+size+"];");
0: out.println("            for( int i=0; i < "+size+"; i++ ) {");
0: out.println("                value[i] = create"+arrayType+"(\""+generator.createString(propertyName)+"\");");
0: out.println("            }");
0: out.println("            info."+setterName+"(value);");
0: out.println("        }");
0: 	    		} else {
0: out.println("        info."+setterName+"(create"+type+"(\""+generator.createString(propertyName)+"\"));");
1: 	            }
1: 	        }
1: 	    }
1:             
0: out.println("    }"); 
0: out.println("}");  
1: 	}
1: 
0: 	public String getTargetDir() {
0: 		return targetDir;
1: 	}
1: 
0: 	public void setTargetDir(String targetDir) {
0: 		this.targetDir = targetDir;
1: 	}
1: }
1: 
author:Robert Davies
-------------------------------------------------------------------------------
commit:f50bf9c
/////////////////////////////////////////////////////////////////////////
============================================================================