1:61a3eab: /**
1:61a3eab:  * Licensed to the Apache Software Foundation (ASF) under one or more
1:61a3eab:  * contributor license agreements.  See the NOTICE file distributed with
1:61a3eab:  * this work for additional information regarding copyright ownership.
1:61a3eab:  * The ASF licenses this file to You under the Apache License, Version 2.0
1:61a3eab:  * (the "License"); you may not use this file except in compliance with
1:61a3eab:  * the License.  You may obtain a copy of the License at
1:61a3eab:  *
1:61a3eab:  *      http://www.apache.org/licenses/LICENSE-2.0
1:61a3eab:  *
1:61a3eab:  * Unless required by applicable law or agreed to in writing, software
1:61a3eab:  * distributed under the License is distributed on an "AS IS" BASIS,
1:61a3eab:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:61a3eab:  * See the License for the specific language governing permissions and
1:61a3eab:  * limitations under the License.
1:61a3eab:  */
1:61a3eab: package org.apache.activemq.transport.amqp.protocol;
1:61a3eab: 
1:61a3eab: import static org.junit.Assert.assertNotNull;
1:61a3eab: import static org.junit.Assert.assertTrue;
1:61a3eab: 
1:61a3eab: import java.io.IOException;
1:61a3eab: import java.io.InputStream;
1:61a3eab: import java.io.OutputStream;
1:61a3eab: import java.net.Socket;
1:61a3eab: import java.net.UnknownHostException;
1:94937e8: import java.util.concurrent.TimeUnit;
1:61a3eab: 
1:61a3eab: import javax.net.SocketFactory;
1:61a3eab: import javax.net.ssl.SSLSocketFactory;
1:61a3eab: 
1:61a3eab: import org.apache.activemq.transport.amqp.AmqpHeader;
1:61a3eab: import org.apache.activemq.transport.amqp.AmqpTestSupport;
1:61a3eab: import org.apache.activemq.util.Wait;
1:61a3eab: import org.fusesource.hawtbuf.Buffer;
1:61a3eab: import org.junit.Before;
1:61a3eab: import org.junit.Test;
1:61a3eab: import org.slf4j.Logger;
1:61a3eab: import org.slf4j.LoggerFactory;
1:61a3eab: 
1:61a3eab: /**
1:61a3eab:  * Test that the Broker handles connections from older clients or
1:61a3eab:  * non-AMQP client correctly by returning an AMQP header prior to
1:61a3eab:  * closing the socket.
1:61a3eab:  */
1:61a3eab: public class UnsupportedClientTest extends AmqpTestSupport {
1:61a3eab: 
1:61a3eab:     private static final Logger LOG = LoggerFactory.getLogger(UnsupportedClientTest.class);
1:61a3eab: 
1:61a3eab:     @Override
1:61a3eab:     @Before
1:61a3eab:     public void setUp() throws Exception {
1:61a3eab:         System.setProperty("javax.net.ssl.trustStore", "src/test/resources/client.keystore");
1:61a3eab:         System.setProperty("javax.net.ssl.trustStorePassword", "password");
1:61a3eab:         System.setProperty("javax.net.ssl.trustStoreType", "jks");
1:61a3eab:         System.setProperty("javax.net.ssl.keyStore", "src/test/resources/server.keystore");
1:61a3eab:         System.setProperty("javax.net.ssl.keyStorePassword", "password");
1:61a3eab:         System.setProperty("javax.net.ssl.keyStoreType", "jks");
1:61a3eab: 
1:61a3eab:         super.setUp();
1:61a3eab:     }
1:61a3eab: 
1:c49db02:     @Override
1:c49db02:     public String getAdditionalConfig() {
1:c49db02:         return "&wireFormat.allowNonSaslConnections=false";
1:c49db02:     }
1:c49db02: 
1:61a3eab:     @Test(timeout = 60000)
1:61a3eab:     public void testOlderProtocolIsRejected() throws Exception {
1:61a3eab: 
1:61a3eab:         AmqpHeader header = new AmqpHeader();
1:61a3eab: 
1:c49db02:         header.setProtocolId(3);
1:61a3eab:         header.setMajor(0);
1:61a3eab:         header.setMinor(9);
1:61a3eab:         header.setRevision(1);
1:61a3eab: 
1:61a3eab:         // Test TCP
1:36bd069:         doTestInvalidHeaderProcessing(amqpPort, header, false);
1:61a3eab: 
1:61a3eab:         // Test SSL
1:36bd069:         doTestInvalidHeaderProcessing(amqpSslPort, header, true);
1:61a3eab: 
1:61a3eab:         // Test NIO
1:36bd069:         doTestInvalidHeaderProcessing(amqpNioPort, header, false);
1:61a3eab: 
1:61a3eab:         // Test NIO+SSL
1:36bd069:         doTestInvalidHeaderProcessing(amqpNioPlusSslPort, header, true);
1:61a3eab:     }
1:61a3eab: 
1:61a3eab:     @Test(timeout = 60000)
1:61a3eab:     public void testNewerMajorIsRejected() throws Exception {
1:61a3eab: 
1:61a3eab:         AmqpHeader header = new AmqpHeader();
1:61a3eab: 
1:c49db02:         header.setProtocolId(3);
1:61a3eab:         header.setMajor(2);
1:61a3eab:         header.setMinor(0);
1:61a3eab:         header.setRevision(0);
1:61a3eab: 
1:61a3eab:         // Test TCP
1:36bd069:         doTestInvalidHeaderProcessing(amqpPort, header, false);
1:61a3eab: 
1:61a3eab:         // Test SSL
1:36bd069:         doTestInvalidHeaderProcessing(amqpSslPort, header, true);
1:61a3eab: 
1:61a3eab:         // Test NIO
1:36bd069:         doTestInvalidHeaderProcessing(amqpNioPort, header, false);
1:61a3eab: 
1:61a3eab:         // Test NIO+SSL
1:36bd069:         doTestInvalidHeaderProcessing(amqpNioPlusSslPort, header, true);
1:61a3eab:     }
1:61a3eab: 
1:61a3eab:     @Test(timeout = 60000)
1:61a3eab:     public void testNewerMinorIsRejected() throws Exception {
1:61a3eab: 
1:61a3eab:         AmqpHeader header = new AmqpHeader();
1:61a3eab: 
1:c49db02:         header.setProtocolId(3);
1:61a3eab:         header.setMajor(1);
1:61a3eab:         header.setMinor(1);
1:61a3eab:         header.setRevision(0);
1:61a3eab: 
1:61a3eab:         // Test TCP
1:36bd069:         doTestInvalidHeaderProcessing(amqpPort, header, false);
1:61a3eab: 
1:61a3eab:         // Test SSL
1:36bd069:         doTestInvalidHeaderProcessing(amqpSslPort, header, true);
1:61a3eab: 
1:61a3eab:         // Test NIO
1:36bd069:         doTestInvalidHeaderProcessing(amqpNioPort, header, false);
1:61a3eab: 
1:61a3eab:         // Test NIO+SSL
1:36bd069:         doTestInvalidHeaderProcessing(amqpNioPlusSslPort, header, true);
1:61a3eab:     }
1:61a3eab: 
1:61a3eab:     @Test(timeout = 60000)
1:61a3eab:     public void testNewerRevisionIsRejected() throws Exception {
1:61a3eab: 
1:61a3eab:         AmqpHeader header = new AmqpHeader();
1:61a3eab: 
1:c49db02:         header.setProtocolId(3);
1:61a3eab:         header.setMajor(1);
1:61a3eab:         header.setMinor(0);
1:61a3eab:         header.setRevision(1);
1:61a3eab: 
1:61a3eab:         // Test TCP
1:36bd069:         doTestInvalidHeaderProcessing(amqpPort, header, false);
1:61a3eab: 
1:61a3eab:         // Test SSL
1:36bd069:         doTestInvalidHeaderProcessing(amqpSslPort, header, true);
1:61a3eab: 
1:61a3eab:         // Test NIO
1:36bd069:         doTestInvalidHeaderProcessing(amqpNioPort, header, false);
1:61a3eab: 
1:61a3eab:         // Test NIO+SSL
1:36bd069:         doTestInvalidHeaderProcessing(amqpNioPlusSslPort, header, true);
1:61a3eab:     }
1:61a3eab: 
1:61a3eab:     @Test(timeout = 60000)
1:c49db02:     public void testNonSaslClientIsRejected() throws Exception {
1:c49db02: 
1:c49db02:         AmqpHeader header = new AmqpHeader();
1:c49db02: 
1:c49db02:         header.setProtocolId(0);
1:c49db02:         header.setMajor(1);
1:c49db02:         header.setMinor(0);
1:c49db02:         header.setRevision(0);
1:c49db02: 
1:c49db02:         // Test TCP
1:c49db02:         doTestInvalidHeaderProcessing(amqpPort, header, false);
1:c49db02: 
1:c49db02:         // Test SSL
1:c49db02:         doTestInvalidHeaderProcessing(amqpSslPort, header, true);
1:c49db02: 
1:c49db02:         // Test NIO
1:c49db02:         doTestInvalidHeaderProcessing(amqpNioPort, header, false);
1:c49db02: 
1:c49db02:         // Test NIO+SSL
1:c49db02:         doTestInvalidHeaderProcessing(amqpNioPlusSslPort, header, true);
1:c49db02:     }
1:c49db02: 
1:c49db02:     @Test(timeout = 60000)
1:c49db02:     public void testUnkownProtocolIdIsRejected() throws Exception {
1:c49db02: 
1:c49db02:         AmqpHeader header = new AmqpHeader();
1:c49db02: 
1:c49db02:         header.setProtocolId(5);
1:c49db02:         header.setMajor(1);
1:c49db02:         header.setMinor(0);
1:c49db02:         header.setRevision(0);
1:c49db02: 
1:c49db02:         // Test TCP
1:c49db02:         doTestInvalidHeaderProcessing(amqpPort, header, false);
1:c49db02: 
1:c49db02:         // Test SSL
1:c49db02:         doTestInvalidHeaderProcessing(amqpSslPort, header, true);
1:c49db02: 
1:c49db02:         // Test NIO
1:c49db02:         doTestInvalidHeaderProcessing(amqpNioPort, header, false);
1:c49db02: 
1:c49db02:         // Test NIO+SSL
1:c49db02:         doTestInvalidHeaderProcessing(amqpNioPlusSslPort, header, true);
1:c49db02:     }
1:c49db02: 
1:c49db02:     @Test(timeout = 60000)
1:61a3eab:     public void testInvalidProtocolHeader() throws Exception {
1:61a3eab: 
1:61a3eab:         AmqpHeader header = new AmqpHeader(new Buffer(new byte[]{'S', 'T', 'O', 'M', 'P', 0, 0, 0}), false);
1:61a3eab: 
1:61a3eab:         // Test TCP
1:36bd069:         doTestInvalidHeaderProcessing(amqpPort, header, false);
1:61a3eab: 
1:61a3eab:         // Test SSL
1:36bd069:         doTestInvalidHeaderProcessing(amqpSslPort, header, true);
1:61a3eab: 
1:61a3eab:         // Test NIO
1:36bd069:         doTestInvalidHeaderProcessing(amqpNioPort, header, false);
1:61a3eab: 
1:61a3eab:         // Test NIO+SSL
1:36bd069:         doTestInvalidHeaderProcessing(amqpNioPlusSslPort, header, true);
1:61a3eab:     }
1:61a3eab: 
1:61a3eab:     protected void doTestInvalidHeaderProcessing(int port, final AmqpHeader header, boolean ssl) throws Exception {
1:61a3eab:         final ClientConnection connection = createClientConnection(ssl);
1:61a3eab:         connection.open("localhost", port);
1:61a3eab:         connection.send(header);
1:61a3eab: 
1:61a3eab:         AmqpHeader response = connection.readAmqpHeader();
1:61a3eab:         assertNotNull(response);
1:61a3eab:         LOG.info("Broker responded with: {}", response);
1:61a3eab: 
1:61a3eab:         assertTrue("Broker should have closed client connection", Wait.waitFor(new Wait.Condition() {
1:61a3eab: 
1:61a3eab:             @Override
1:61a3eab:             public boolean isSatisified() throws Exception {
1:61a3eab:                 try {
1:61a3eab:                     connection.send(header);
1:61a3eab:                     return false;
1:61a3eab:                 } catch (Exception e) {
1:61a3eab:                     return true;
1:61a3eab:                 }
1:61a3eab:             }
1:94937e8:         }, TimeUnit.SECONDS.toMillis(15), TimeUnit.MILLISECONDS.toMillis(250)));
1:61a3eab:     }
1:61a3eab: 
1:61a3eab:     private ClientConnection createClientConnection(boolean ssl) {
1:61a3eab:         if (ssl) {
1:61a3eab:             return new SslClientConnection();
1:61a3eab:         } else {
1:61a3eab:             return new ClientConnection();
1:61a3eab:         }
1:61a3eab:     }
1:61a3eab: 
1:61a3eab:     private class ClientConnection {
1:61a3eab: 
1:61a3eab:         protected static final long RECEIVE_TIMEOUT = 10000;
1:61a3eab:         protected Socket clientSocket;
1:61a3eab: 
1:61a3eab:         public void open(String host, int port) throws IOException, UnknownHostException {
1:61a3eab:             clientSocket = new Socket(host, port);
1:61a3eab:             clientSocket.setTcpNoDelay(true);
1:61a3eab:         }
1:61a3eab: 
1:61a3eab:         public void send(AmqpHeader header) throws Exception {
1:61a3eab:             OutputStream outputStream = clientSocket.getOutputStream();
1:61a3eab:             header.getBuffer().writeTo(outputStream);
1:61a3eab:             outputStream.flush();
1:61a3eab:         }
1:61a3eab: 
1:61a3eab:         public AmqpHeader readAmqpHeader() throws Exception {
1:61a3eab:             clientSocket.setSoTimeout((int)RECEIVE_TIMEOUT);
1:61a3eab:             InputStream is = clientSocket.getInputStream();
1:61a3eab: 
1:61a3eab:             byte[] header = new byte[8];
1:61a3eab:             int read = is.read(header);
1:61a3eab:             if (read == header.length) {
1:61a3eab:                 return new AmqpHeader(new Buffer(header));
1:61a3eab:             } else {
1:61a3eab:                 return null;
1:61a3eab:             }
1:61a3eab:         }
1:61a3eab:     }
1:61a3eab: 
1:61a3eab:     private class SslClientConnection extends ClientConnection {
1:61a3eab: 
1:61a3eab:         @Override
1:61a3eab:         public void open(String host, int port) throws IOException, UnknownHostException {
1:61a3eab:             SocketFactory factory = SSLSocketFactory.getDefault();
1:61a3eab:             clientSocket = factory.createSocket(host, port);
1:61a3eab:             clientSocket.setTcpNoDelay(true);
1:61a3eab:         }
1:61a3eab:     }
1:61a3eab: 
1:61a3eab:     @Override
1:61a3eab:     protected boolean isUseTcpConnector() {
1:61a3eab:         return true;
1:61a3eab:     }
1:61a3eab: 
1:61a3eab:     @Override
1:61a3eab:     protected boolean isUseSslConnector() {
1:61a3eab:         return true;
1:61a3eab:     }
1:61a3eab: 
1:61a3eab:     @Override
1:61a3eab:     protected boolean isUseNioConnector() {
1:61a3eab:         return true;
1:61a3eab:     }
1:61a3eab: 
1:61a3eab:     @Override
1:61a3eab:     protected boolean isUseNioPlusSslConnector() {
1:61a3eab:         return true;
1:61a3eab:     }
1:61a3eab: }
============================================================================
author:Timothy Bish
-------------------------------------------------------------------------------
commit:c49db02
/////////////////////////////////////////////////////////////////////////
1:     @Override
1:     public String getAdditionalConfig() {
1:         return "&wireFormat.allowNonSaslConnections=false";
1:     }
1: 
1:         header.setProtocolId(3);
/////////////////////////////////////////////////////////////////////////
1:         header.setProtocolId(3);
/////////////////////////////////////////////////////////////////////////
1:         header.setProtocolId(3);
/////////////////////////////////////////////////////////////////////////
1:         header.setProtocolId(3);
/////////////////////////////////////////////////////////////////////////
1:     public void testNonSaslClientIsRejected() throws Exception {
1: 
1:         AmqpHeader header = new AmqpHeader();
1: 
1:         header.setProtocolId(0);
1:         header.setMajor(1);
1:         header.setMinor(0);
1:         header.setRevision(0);
1: 
1:         // Test TCP
1:         doTestInvalidHeaderProcessing(amqpPort, header, false);
1: 
1:         // Test SSL
1:         doTestInvalidHeaderProcessing(amqpSslPort, header, true);
1: 
1:         // Test NIO
1:         doTestInvalidHeaderProcessing(amqpNioPort, header, false);
1: 
1:         // Test NIO+SSL
1:         doTestInvalidHeaderProcessing(amqpNioPlusSslPort, header, true);
1:     }
1: 
1:     @Test(timeout = 60000)
1:     public void testUnkownProtocolIdIsRejected() throws Exception {
1: 
1:         AmqpHeader header = new AmqpHeader();
1: 
1:         header.setProtocolId(5);
1:         header.setMajor(1);
1:         header.setMinor(0);
1:         header.setRevision(0);
1: 
1:         // Test TCP
1:         doTestInvalidHeaderProcessing(amqpPort, header, false);
1: 
1:         // Test SSL
1:         doTestInvalidHeaderProcessing(amqpSslPort, header, true);
1: 
1:         // Test NIO
1:         doTestInvalidHeaderProcessing(amqpNioPort, header, false);
1: 
1:         // Test NIO+SSL
1:         doTestInvalidHeaderProcessing(amqpNioPlusSslPort, header, true);
1:     }
1: 
1:     @Test(timeout = 60000)
commit:36bd069
/////////////////////////////////////////////////////////////////////////
1:         doTestInvalidHeaderProcessing(amqpPort, header, false);
1:         doTestInvalidHeaderProcessing(amqpSslPort, header, true);
1:         doTestInvalidHeaderProcessing(amqpNioPort, header, false);
1:         doTestInvalidHeaderProcessing(amqpNioPlusSslPort, header, true);
/////////////////////////////////////////////////////////////////////////
1:         doTestInvalidHeaderProcessing(amqpPort, header, false);
1:         doTestInvalidHeaderProcessing(amqpSslPort, header, true);
1:         doTestInvalidHeaderProcessing(amqpNioPort, header, false);
1:         doTestInvalidHeaderProcessing(amqpNioPlusSslPort, header, true);
/////////////////////////////////////////////////////////////////////////
1:         doTestInvalidHeaderProcessing(amqpPort, header, false);
1:         doTestInvalidHeaderProcessing(amqpSslPort, header, true);
1:         doTestInvalidHeaderProcessing(amqpNioPort, header, false);
1:         doTestInvalidHeaderProcessing(amqpNioPlusSslPort, header, true);
/////////////////////////////////////////////////////////////////////////
1:         doTestInvalidHeaderProcessing(amqpPort, header, false);
1:         doTestInvalidHeaderProcessing(amqpSslPort, header, true);
1:         doTestInvalidHeaderProcessing(amqpNioPort, header, false);
1:         doTestInvalidHeaderProcessing(amqpNioPlusSslPort, header, true);
/////////////////////////////////////////////////////////////////////////
1:         doTestInvalidHeaderProcessing(amqpPort, header, false);
1:         doTestInvalidHeaderProcessing(amqpSslPort, header, true);
1:         doTestInvalidHeaderProcessing(amqpNioPort, header, false);
1:         doTestInvalidHeaderProcessing(amqpNioPlusSslPort, header, true);
commit:94937e8
/////////////////////////////////////////////////////////////////////////
1: import java.util.concurrent.TimeUnit;
/////////////////////////////////////////////////////////////////////////
1:         }, TimeUnit.SECONDS.toMillis(15), TimeUnit.MILLISECONDS.toMillis(250)));
commit:61a3eab
/////////////////////////////////////////////////////////////////////////
1: /**
1:  * Licensed to the Apache Software Foundation (ASF) under one or more
1:  * contributor license agreements.  See the NOTICE file distributed with
1:  * this work for additional information regarding copyright ownership.
1:  * The ASF licenses this file to You under the Apache License, Version 2.0
1:  * (the "License"); you may not use this file except in compliance with
1:  * the License.  You may obtain a copy of the License at
1:  *
1:  *      http://www.apache.org/licenses/LICENSE-2.0
1:  *
1:  * Unless required by applicable law or agreed to in writing, software
1:  * distributed under the License is distributed on an "AS IS" BASIS,
1:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:  * See the License for the specific language governing permissions and
1:  * limitations under the License.
1:  */
1: package org.apache.activemq.transport.amqp.protocol;
1: 
1: import static org.junit.Assert.assertNotNull;
1: import static org.junit.Assert.assertTrue;
1: 
1: import java.io.IOException;
1: import java.io.InputStream;
1: import java.io.OutputStream;
1: import java.net.Socket;
1: import java.net.UnknownHostException;
1: 
1: import javax.net.SocketFactory;
1: import javax.net.ssl.SSLSocketFactory;
1: 
1: import org.apache.activemq.transport.amqp.AmqpHeader;
1: import org.apache.activemq.transport.amqp.AmqpTestSupport;
1: import org.apache.activemq.util.Wait;
1: import org.fusesource.hawtbuf.Buffer;
1: import org.junit.Before;
1: import org.junit.Test;
1: import org.slf4j.Logger;
1: import org.slf4j.LoggerFactory;
1: 
1: /**
1:  * Test that the Broker handles connections from older clients or
1:  * non-AMQP client correctly by returning an AMQP header prior to
1:  * closing the socket.
1:  */
1: public class UnsupportedClientTest extends AmqpTestSupport {
1: 
1:     private static final Logger LOG = LoggerFactory.getLogger(UnsupportedClientTest.class);
1: 
1:     @Override
1:     @Before
1:     public void setUp() throws Exception {
1:         System.setProperty("javax.net.ssl.trustStore", "src/test/resources/client.keystore");
1:         System.setProperty("javax.net.ssl.trustStorePassword", "password");
1:         System.setProperty("javax.net.ssl.trustStoreType", "jks");
1:         System.setProperty("javax.net.ssl.keyStore", "src/test/resources/server.keystore");
1:         System.setProperty("javax.net.ssl.keyStorePassword", "password");
1:         System.setProperty("javax.net.ssl.keyStoreType", "jks");
1: 
1:         super.setUp();
1:     }
1: 
1:     @Test(timeout = 60000)
1:     public void testOlderProtocolIsRejected() throws Exception {
1: 
1:         AmqpHeader header = new AmqpHeader();
1: 
1:         header.setMajor(0);
1:         header.setMinor(9);
1:         header.setRevision(1);
1: 
1:         // Test TCP
0:         doTestInvalidHeaderProcessing(port, header, false);
1: 
1:         // Test SSL
0:         doTestInvalidHeaderProcessing(sslPort, header, true);
1: 
1:         // Test NIO
0:         doTestInvalidHeaderProcessing(nioPort, header, false);
1: 
1:         // Test NIO+SSL
0:         doTestInvalidHeaderProcessing(nioPlusSslPort, header, true);
1:     }
1: 
1:     @Test(timeout = 60000)
1:     public void testNewerMajorIsRejected() throws Exception {
1: 
1:         AmqpHeader header = new AmqpHeader();
1: 
1:         header.setMajor(2);
1:         header.setMinor(0);
1:         header.setRevision(0);
1: 
1:         // Test TCP
0:         doTestInvalidHeaderProcessing(port, header, false);
1: 
1:         // Test SSL
0:         doTestInvalidHeaderProcessing(sslPort, header, true);
1: 
1:         // Test NIO
0:         doTestInvalidHeaderProcessing(nioPort, header, false);
1: 
1:         // Test NIO+SSL
0:         doTestInvalidHeaderProcessing(nioPlusSslPort, header, true);
1:     }
1: 
1:     @Test(timeout = 60000)
1:     public void testNewerMinorIsRejected() throws Exception {
1: 
1:         AmqpHeader header = new AmqpHeader();
1: 
1:         header.setMajor(1);
1:         header.setMinor(1);
1:         header.setRevision(0);
1: 
1:         // Test TCP
0:         doTestInvalidHeaderProcessing(port, header, false);
1: 
1:         // Test SSL
0:         doTestInvalidHeaderProcessing(sslPort, header, true);
1: 
1:         // Test NIO
0:         doTestInvalidHeaderProcessing(nioPort, header, false);
1: 
1:         // Test NIO+SSL
0:         doTestInvalidHeaderProcessing(nioPlusSslPort, header, true);
1:     }
1: 
1:     @Test(timeout = 60000)
1:     public void testNewerRevisionIsRejected() throws Exception {
1: 
1:         AmqpHeader header = new AmqpHeader();
1: 
1:         header.setMajor(1);
1:         header.setMinor(0);
1:         header.setRevision(1);
1: 
1:         // Test TCP
0:         doTestInvalidHeaderProcessing(port, header, false);
1: 
1:         // Test SSL
0:         doTestInvalidHeaderProcessing(sslPort, header, true);
1: 
1:         // Test NIO
0:         doTestInvalidHeaderProcessing(nioPort, header, false);
1: 
1:         // Test NIO+SSL
0:         doTestInvalidHeaderProcessing(nioPlusSslPort, header, true);
1:     }
1: 
1:     @Test(timeout = 60000)
1:     public void testInvalidProtocolHeader() throws Exception {
1: 
1:         AmqpHeader header = new AmqpHeader(new Buffer(new byte[]{'S', 'T', 'O', 'M', 'P', 0, 0, 0}), false);
1: 
1:         // Test TCP
0:         doTestInvalidHeaderProcessing(port, header, false);
1: 
1:         // Test SSL
0:         doTestInvalidHeaderProcessing(sslPort, header, true);
1: 
1:         // Test NIO
0:         doTestInvalidHeaderProcessing(nioPort, header, false);
1: 
1:         // Test NIO+SSL
0:         doTestInvalidHeaderProcessing(nioPlusSslPort, header, true);
1:     }
1: 
1:     protected void doTestInvalidHeaderProcessing(int port, final AmqpHeader header, boolean ssl) throws Exception {
1:         final ClientConnection connection = createClientConnection(ssl);
1:         connection.open("localhost", port);
1:         connection.send(header);
1: 
1:         AmqpHeader response = connection.readAmqpHeader();
1:         assertNotNull(response);
1:         LOG.info("Broker responded with: {}", response);
1: 
1:         assertTrue("Broker should have closed client connection", Wait.waitFor(new Wait.Condition() {
1: 
1:             @Override
1:             public boolean isSatisified() throws Exception {
1:                 try {
1:                     connection.send(header);
1:                     return false;
1:                 } catch (Exception e) {
1:                     return true;
1:                 }
1:             }
0:         }));
1:     }
1: 
1:     private ClientConnection createClientConnection(boolean ssl) {
1:         if (ssl) {
1:             return new SslClientConnection();
1:         } else {
1:             return new ClientConnection();
1:         }
1:     }
1: 
1:     private class ClientConnection {
1: 
1:         protected static final long RECEIVE_TIMEOUT = 10000;
1:         protected Socket clientSocket;
1: 
1:         public void open(String host, int port) throws IOException, UnknownHostException {
1:             clientSocket = new Socket(host, port);
1:             clientSocket.setTcpNoDelay(true);
1:         }
1: 
1:         public void send(AmqpHeader header) throws Exception {
1:             OutputStream outputStream = clientSocket.getOutputStream();
1:             header.getBuffer().writeTo(outputStream);
1:             outputStream.flush();
1:         }
1: 
1:         public AmqpHeader readAmqpHeader() throws Exception {
1:             clientSocket.setSoTimeout((int)RECEIVE_TIMEOUT);
1:             InputStream is = clientSocket.getInputStream();
1: 
1:             byte[] header = new byte[8];
1:             int read = is.read(header);
1:             if (read == header.length) {
1:                 return new AmqpHeader(new Buffer(header));
1:             } else {
1:                 return null;
1:             }
1:         }
1:     }
1: 
1:     private class SslClientConnection extends ClientConnection {
1: 
1:         @Override
1:         public void open(String host, int port) throws IOException, UnknownHostException {
1:             SocketFactory factory = SSLSocketFactory.getDefault();
1:             clientSocket = factory.createSocket(host, port);
1:             clientSocket.setTcpNoDelay(true);
1:         }
1:     }
1: 
1:     @Override
1:     protected boolean isUseTcpConnector() {
1:         return true;
1:     }
1: 
1:     @Override
1:     protected boolean isUseSslConnector() {
1:         return true;
1:     }
1: 
1:     @Override
1:     protected boolean isUseNioConnector() {
1:         return true;
1:     }
1: 
1:     @Override
1:     protected boolean isUseNioPlusSslConnector() {
1:         return true;
1:     }
1: }
============================================================================