1:1a566ec: /**
1:1a566ec:  * Licensed to the Apache Software Foundation (ASF) under one or more
1:1a566ec:  * contributor license agreements.  See the NOTICE file distributed with
1:1a566ec:  * this work for additional information regarding copyright ownership.
1:1a566ec:  * The ASF licenses this file to You under the Apache License, Version 2.0
1:1a566ec:  * (the "License"); you may not use this file except in compliance with
1:1a566ec:  * the License.  You may obtain a copy of the License at
1:1a566ec:  *
1:1a566ec:  *      http://www.apache.org/licenses/LICENSE-2.0
1:1a566ec:  *
1:1a566ec:  * Unless required by applicable law or agreed to in writing, software
1:1a566ec:  * distributed under the License is distributed on an "AS IS" BASIS,
1:1a566ec:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:1a566ec:  * See the License for the specific language governing permissions and
1:1a566ec:  * limitations under the License.
1:1a566ec:  */
1:1a566ec: package org.apache.activemq.broker.region;
1:1a566ec: 
1:1a566ec: import static org.junit.Assert.*;
1:1a566ec: 
1:1a566ec: import java.io.IOException;
1:1a566ec: 
1:1a566ec: import org.apache.activemq.broker.BrokerService;
1:1a566ec: import org.apache.activemq.broker.Connection;
1:1a566ec: import org.apache.activemq.broker.ConnectionContext;
1:1a566ec: import org.apache.activemq.broker.Connector;
1:1a566ec: import org.apache.activemq.broker.ProducerBrokerExchange;
1:1a566ec: import org.apache.activemq.command.ActiveMQQueue;
1:1a566ec: import org.apache.activemq.command.ActiveMQTextMessage;
1:1a566ec: import org.apache.activemq.command.Command;
1:1a566ec: import org.apache.activemq.command.ConnectionControl;
1:1a566ec: import org.apache.activemq.command.Message;
1:1a566ec: import org.apache.activemq.command.MessageId;
1:1a566ec: import org.apache.activemq.command.ProducerInfo;
1:1a566ec: import org.apache.activemq.command.Response;
1:1a566ec: import org.apache.activemq.state.ProducerState;
1:1a566ec: import org.apache.activemq.store.MessageStore;
1:1a566ec: import org.apache.activemq.store.PersistenceAdapter;
1:1a566ec: import org.apache.activemq.usage.MemoryUsage;
1:1a566ec: import org.junit.After;
1:1a566ec: import org.junit.Before;
1:1a566ec: import org.junit.Test;
1:1a566ec: import org.slf4j.Logger;
1:1a566ec: import org.slf4j.LoggerFactory;
1:1a566ec: 
1:1a566ec: public class QueueOptimizedDispatchExceptionTest {
1:1a566ec: 
1:1a566ec:     private static final Logger LOG = LoggerFactory.getLogger(QueueOptimizedDispatchExceptionTest.class);
1:1a566ec: 
1:1a566ec:     private static final String brokerName = "testBroker";
1:1a566ec:     private static final String brokerUrl = "vm://" + brokerName;
1:1a566ec:     private static final int count = 50;
1:1a566ec: 
1:1a566ec:     private final static String mesageIdRoot = "11111:22222:";
1:1a566ec:     private final ActiveMQQueue destination = new ActiveMQQueue("queue-"
1:1a566ec:             + QueueOptimizedDispatchExceptionTest.class.getSimpleName());
1:1a566ec:     private final int messageBytesSize = 256;
1:1a566ec:     private final String text = new String(new byte[messageBytesSize]);
1:1a566ec: 
1:1a566ec:     private BrokerService broker;
1:1a566ec: 
1:1a566ec:     @Before
1:1a566ec:     public void setUp() throws Exception {
1:1a566ec: 
1:1a566ec:         // Setup and start the broker
1:1a566ec:         broker = new BrokerService();
1:1a566ec:         broker.setBrokerName(brokerName);
1:1a566ec:         broker.setPersistent(false);
1:1a566ec:         broker.setSchedulerSupport(false);
1:1a566ec:         broker.setUseJmx(false);
1:1a566ec:         broker.setUseShutdownHook(false);
1:1a566ec:         broker.addConnector(brokerUrl);
1:1a566ec: 
1:1a566ec:         // Start the broker
1:1a566ec:         broker.start();
1:1a566ec:         broker.waitUntilStarted();
1:1a566ec:     }
1:1a566ec: 
1:1a566ec:     @After
1:1a566ec:     public void tearDown() throws Exception {
1:1a566ec:         broker.stop();
1:1a566ec:         broker.waitUntilStopped();
1:1a566ec:     }
1:1a566ec: 
1:1a566ec:     private class MockMemoryUsage extends MemoryUsage {
1:1a566ec: 
1:1a566ec:         private boolean full = true;
1:1a566ec: 
1:1a566ec:         public void setFull(boolean full) {
1:1a566ec:             this.full = full;
1:1a566ec:         }
1:1a566ec: 
1:1a566ec:         @Override
1:1a566ec:         public boolean isFull() {
1:1a566ec:             return full;
1:1a566ec:         }
1:1a566ec:     }
1:1a566ec: 
1:1a566ec:     @Test
1:1a566ec:     public void TestOptimizedDispatchCME() throws Exception {
1:1a566ec:         final PersistenceAdapter persistenceAdapter = broker.getPersistenceAdapter();
1:1a566ec:         final MessageStore queueMessageStore =
1:1a566ec:             persistenceAdapter.createQueueMessageStore(destination);
1:1a566ec:         final ConnectionContext contextNotInTx = new ConnectionContext();
1:1a566ec:         contextNotInTx.setConnection(new Connection() {
1:1a566ec: 
1:1a566ec:             @Override
1:1a566ec:             public void stop() throws Exception {
1:1a566ec:             }
1:1a566ec: 
1:1a566ec:             @Override
1:1a566ec:             public void start() throws Exception {
1:1a566ec:             }
1:1a566ec: 
1:1a566ec:             @Override
1:1a566ec:             public void updateClient(ConnectionControl control) {
1:1a566ec:             }
1:1a566ec: 
1:1a566ec:             @Override
1:1a566ec:             public void serviceExceptionAsync(IOException e) {
1:1a566ec:             }
1:1a566ec: 
1:1a566ec:             @Override
1:1a566ec:             public void serviceException(Throwable error) {
1:1a566ec:             }
1:1a566ec: 
1:1a566ec:             @Override
1:1a566ec:             public Response service(Command command) {
1:1a566ec:                 return null;
1:1a566ec:             }
1:1a566ec: 
1:1a566ec:             @Override
1:1a566ec:             public boolean isSlow() {
1:1a566ec:                 return false;
1:1a566ec:             }
1:1a566ec: 
1:1a566ec:             @Override
1:1a566ec:             public boolean isNetworkConnection() {
1:1a566ec:                 return false;
1:1a566ec:             }
1:1a566ec: 
1:1a566ec:             @Override
1:1a566ec:             public boolean isManageable() {
1:1a566ec:                 return false;
1:1a566ec:             }
1:1a566ec: 
1:1a566ec:             @Override
1:1a566ec:             public boolean isFaultTolerantConnection() {
1:1a566ec:                 return false;
1:1a566ec:             }
1:1a566ec: 
1:1a566ec:             @Override
1:1a566ec:             public boolean isConnected() {
1:1a566ec:                 return true;
1:1a566ec:             }
1:1a566ec: 
1:1a566ec:             @Override
1:1a566ec:             public boolean isBlocked() {
1:1a566ec:                 return false;
1:1a566ec:             }
1:1a566ec: 
1:1a566ec:             @Override
1:1a566ec:             public boolean isActive() {
1:1a566ec:                 return false;
1:1a566ec:             }
1:1a566ec: 
1:1a566ec:             @Override
1:1a566ec:             public ConnectionStatistics getStatistics() {
1:1a566ec:                 return null;
1:1a566ec:             }
1:1a566ec: 
1:1a566ec:             @Override
1:1a566ec:             public String getRemoteAddress() {
1:1a566ec:                 return null;
1:1a566ec:             }
1:1a566ec: 
1:1a566ec:             @Override
1:1a566ec:             public int getDispatchQueueSize() {
1:1a566ec:                 return 0;
1:1a566ec:             }
1:1a566ec: 
1:1a566ec:             @Override
1:1a566ec:             public Connector getConnector() {
1:1a566ec:                 // TODO Auto-generated method stub
1:1a566ec:                 return null;
1:1a566ec:             }
1:1a566ec: 
1:1a566ec:             @Override
1:1a566ec:             public String getConnectionId() {
1:1a566ec:                 return null;
1:1a566ec:             }
1:1a566ec: 
1:1a566ec:             @Override
1:1a566ec:             public void dispatchSync(Command message) {
1:1a566ec:             }
1:1a566ec: 
1:1a566ec:             @Override
1:1a566ec:             public void dispatchAsync(Command command) {
1:1a566ec:             }
1:93ca044: 
1:93ca044:             @Override
1:93ca044:             public int getActiveTransactionCount() {
1:93ca044:                 return 0;
1:93ca044:             }
1:93ca044: 
1:93ca044:             @Override
1:93ca044:             public Long getOldestActiveTransactionDuration() {
1:93ca044:                 return null;
1:93ca044:             }
1:1a566ec:         });
1:1a566ec: 
1:1a566ec:         final DestinationStatistics destinationStatistics = new DestinationStatistics();
1:1a566ec:         final Queue queue = new Queue(broker, destination,
1:1a566ec:                 queueMessageStore, destinationStatistics, broker.getTaskRunnerFactory());
1:1a566ec: 
1:1a566ec:         final MockMemoryUsage usage = new MockMemoryUsage();
1:1a566ec: 
1:1a566ec:         queue.setOptimizedDispatch(true);
1:1a566ec:         queue.initialize();
1:1a566ec:         queue.start();
1:1a566ec:         queue.memoryUsage = usage;
1:1a566ec: 
1:1a566ec:         ProducerBrokerExchange producerExchange = new ProducerBrokerExchange();
1:1a566ec:         ProducerInfo producerInfo = new ProducerInfo();
1:1a566ec:         ProducerState producerState = new ProducerState(producerInfo);
1:1a566ec:         producerExchange.setProducerState(producerState);
1:1a566ec:         producerExchange.setConnectionContext(contextNotInTx);
1:1a566ec: 
1:1a566ec:         // populate the queue store, exceed memory limit so that cache is disabled
1:1a566ec:         for (int i = 0; i < count; i++) {
1:1a566ec:             Message message = getMessage(i);
1:1a566ec:             queue.send(producerExchange, message);
1:1a566ec:         }
1:1a566ec: 
1:1a566ec:         usage.setFull(false);
1:1a566ec: 
1:1a566ec:         try {
1:1a566ec:             queue.wakeup();
1:1a566ec:         } catch(Exception e) {
1:1a566ec:             LOG.error("Queue threw an unexpected exception: " + e.toString());
1:1a566ec:             fail("Should not throw an exception.");
1:1a566ec:         }
1:1a566ec:     }
1:1a566ec: 
1:1a566ec:     private Message getMessage(int i) throws Exception {
1:1a566ec:         ActiveMQTextMessage message = new ActiveMQTextMessage();
1:1a566ec:         message.setMessageId(new MessageId(mesageIdRoot + i));
1:1a566ec:         message.setDestination(destination);
1:1a566ec:         message.setPersistent(false);
1:1a566ec:         message.setResponseRequired(true);
1:1a566ec:         message.setText("Msg:" + i + " " + text);
1:1a566ec:         assertEquals(message.getMessageId().getProducerSequenceId(), i);
1:1a566ec:         return message;
1:1a566ec:     }
1:1a566ec: }
============================================================================
author:Hiram Chirino
-------------------------------------------------------------------------------
commit:93ca044
/////////////////////////////////////////////////////////////////////////
1: 
1:             @Override
1:             public int getActiveTransactionCount() {
1:                 return 0;
1:             }
1: 
1:             @Override
1:             public Long getOldestActiveTransactionDuration() {
1:                 return null;
1:             }
author:Timothy A. Bish
-------------------------------------------------------------------------------
commit:ef24cc9
commit:1a566ec
/////////////////////////////////////////////////////////////////////////
1: /**
1:  * Licensed to the Apache Software Foundation (ASF) under one or more
1:  * contributor license agreements.  See the NOTICE file distributed with
1:  * this work for additional information regarding copyright ownership.
1:  * The ASF licenses this file to You under the Apache License, Version 2.0
1:  * (the "License"); you may not use this file except in compliance with
1:  * the License.  You may obtain a copy of the License at
1:  *
1:  *      http://www.apache.org/licenses/LICENSE-2.0
1:  *
1:  * Unless required by applicable law or agreed to in writing, software
1:  * distributed under the License is distributed on an "AS IS" BASIS,
1:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:  * See the License for the specific language governing permissions and
1:  * limitations under the License.
1:  */
1: package org.apache.activemq.broker.region;
1: 
1: import static org.junit.Assert.*;
1: 
1: import java.io.IOException;
1: 
1: import org.apache.activemq.broker.BrokerService;
1: import org.apache.activemq.broker.Connection;
1: import org.apache.activemq.broker.ConnectionContext;
1: import org.apache.activemq.broker.Connector;
1: import org.apache.activemq.broker.ProducerBrokerExchange;
0: import org.apache.activemq.broker.region.DestinationStatistics;
0: import org.apache.activemq.broker.region.Queue;
1: import org.apache.activemq.command.ActiveMQQueue;
1: import org.apache.activemq.command.ActiveMQTextMessage;
1: import org.apache.activemq.command.Command;
1: import org.apache.activemq.command.ConnectionControl;
1: import org.apache.activemq.command.Message;
1: import org.apache.activemq.command.MessageId;
1: import org.apache.activemq.command.ProducerInfo;
1: import org.apache.activemq.command.Response;
1: import org.apache.activemq.state.ProducerState;
1: import org.apache.activemq.store.MessageStore;
1: import org.apache.activemq.store.PersistenceAdapter;
1: import org.apache.activemq.usage.MemoryUsage;
1: import org.junit.After;
1: import org.junit.Before;
1: import org.junit.Test;
1: import org.slf4j.Logger;
1: import org.slf4j.LoggerFactory;
1: 
1: public class QueueOptimizedDispatchExceptionTest {
1: 
1:     private static final Logger LOG = LoggerFactory.getLogger(QueueOptimizedDispatchExceptionTest.class);
1: 
1:     private static final String brokerName = "testBroker";
1:     private static final String brokerUrl = "vm://" + brokerName;
1:     private static final int count = 50;
1: 
1:     private final static String mesageIdRoot = "11111:22222:";
1:     private final ActiveMQQueue destination = new ActiveMQQueue("queue-"
1:             + QueueOptimizedDispatchExceptionTest.class.getSimpleName());
1:     private final int messageBytesSize = 256;
1:     private final String text = new String(new byte[messageBytesSize]);
1: 
1:     private BrokerService broker;
1: 
1:     @Before
1:     public void setUp() throws Exception {
1: 
1:         // Setup and start the broker
1:         broker = new BrokerService();
1:         broker.setBrokerName(brokerName);
1:         broker.setPersistent(false);
1:         broker.setSchedulerSupport(false);
1:         broker.setUseJmx(false);
1:         broker.setUseShutdownHook(false);
1:         broker.addConnector(brokerUrl);
1: 
1:         // Start the broker
1:         broker.start();
1:         broker.waitUntilStarted();
1:     }
1: 
1:     @After
1:     public void tearDown() throws Exception {
1:         broker.stop();
1:         broker.waitUntilStopped();
1:     }
1: 
1:     private class MockMemoryUsage extends MemoryUsage {
1: 
1:         private boolean full = true;
1: 
1:         public void setFull(boolean full) {
1:             this.full = full;
1:         }
1: 
1:         @Override
1:         public boolean isFull() {
1:             return full;
1:         }
1:     }
1: 
1:     @Test
1:     public void TestOptimizedDispatchCME() throws Exception {
1:         final PersistenceAdapter persistenceAdapter = broker.getPersistenceAdapter();
1:         final MessageStore queueMessageStore =
1:             persistenceAdapter.createQueueMessageStore(destination);
1:         final ConnectionContext contextNotInTx = new ConnectionContext();
1:         contextNotInTx.setConnection(new Connection() {
1: 
1:             @Override
1:             public void stop() throws Exception {
1:             }
1: 
1:             @Override
1:             public void start() throws Exception {
1:             }
1: 
1:             @Override
1:             public void updateClient(ConnectionControl control) {
1:             }
1: 
1:             @Override
1:             public void serviceExceptionAsync(IOException e) {
1:             }
1: 
1:             @Override
1:             public void serviceException(Throwable error) {
1:             }
1: 
1:             @Override
1:             public Response service(Command command) {
1:                 return null;
1:             }
1: 
1:             @Override
1:             public boolean isSlow() {
1:                 return false;
1:             }
1: 
1:             @Override
1:             public boolean isNetworkConnection() {
1:                 return false;
1:             }
1: 
1:             @Override
1:             public boolean isManageable() {
1:                 return false;
1:             }
1: 
1:             @Override
1:             public boolean isFaultTolerantConnection() {
1:                 return false;
1:             }
1: 
1:             @Override
1:             public boolean isConnected() {
1:                 return true;
1:             }
1: 
1:             @Override
1:             public boolean isBlocked() {
1:                 return false;
1:             }
1: 
1:             @Override
1:             public boolean isActive() {
1:                 return false;
1:             }
1: 
1:             @Override
1:             public ConnectionStatistics getStatistics() {
1:                 return null;
1:             }
1: 
1:             @Override
1:             public String getRemoteAddress() {
1:                 return null;
1:             }
1: 
1:             @Override
1:             public int getDispatchQueueSize() {
1:                 return 0;
1:             }
1: 
1:             @Override
1:             public Connector getConnector() {
1:                 // TODO Auto-generated method stub
1:                 return null;
1:             }
1: 
1:             @Override
1:             public String getConnectionId() {
1:                 return null;
1:             }
1: 
1:             @Override
1:             public void dispatchSync(Command message) {
1:             }
1: 
1:             @Override
1:             public void dispatchAsync(Command command) {
1:             }
1:         });
1: 
1:         final DestinationStatistics destinationStatistics = new DestinationStatistics();
1:         final Queue queue = new Queue(broker, destination,
1:                 queueMessageStore, destinationStatistics, broker.getTaskRunnerFactory());
1: 
1:         final MockMemoryUsage usage = new MockMemoryUsage();
1: 
1:         queue.setOptimizedDispatch(true);
1:         queue.initialize();
1:         queue.start();
1:         queue.memoryUsage = usage;
1: 
1:         ProducerBrokerExchange producerExchange = new ProducerBrokerExchange();
1:         ProducerInfo producerInfo = new ProducerInfo();
1:         ProducerState producerState = new ProducerState(producerInfo);
1:         producerExchange.setProducerState(producerState);
1:         producerExchange.setConnectionContext(contextNotInTx);
1: 
1:         // populate the queue store, exceed memory limit so that cache is disabled
1:         for (int i = 0; i < count; i++) {
1:             Message message = getMessage(i);
1:             queue.send(producerExchange, message);
1:         }
1: 
1:         usage.setFull(false);
1: 
1:         try {
1:             queue.wakeup();
1:         } catch(Exception e) {
1:             LOG.error("Queue threw an unexpected exception: " + e.toString());
1:             fail("Should not throw an exception.");
1:         }
1:     }
1: 
1:     private Message getMessage(int i) throws Exception {
1:         ActiveMQTextMessage message = new ActiveMQTextMessage();
1:         message.setMessageId(new MessageId(mesageIdRoot + i));
1:         message.setDestination(destination);
1:         message.setPersistent(false);
1:         message.setResponseRequired(true);
1:         message.setText("Msg:" + i + " " + text);
1:         assertEquals(message.getMessageId().getProducerSequenceId(), i);
1:         return message;
1:     }
1: }
author:Hiram R. Chirino
-------------------------------------------------------------------------------
commit:9a8f6e4
/////////////////////////////////////////////////////////////////////////
============================================================================