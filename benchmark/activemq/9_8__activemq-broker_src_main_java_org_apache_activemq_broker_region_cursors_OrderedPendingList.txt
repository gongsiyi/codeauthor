1:00879cf: /**
1:00879cf:  * Licensed to the Apache Software Foundation (ASF) under one or more
1:00879cf:  * contributor license agreements.  See the NOTICE file distributed with
1:00879cf:  * this work for additional information regarding copyright ownership.
1:00879cf:  * The ASF licenses this file to You under the Apache License, Version 2.0
1:00879cf:  * (the "License"); you may not use this file except in compliance with
1:00879cf:  * the License.  You may obtain a copy of the License at
1:00879cf:  *
1:00879cf:  *      http://www.apache.org/licenses/LICENSE-2.0
1:00879cf:  *
1:00879cf:  * Unless required by applicable law or agreed to in writing, software
1:00879cf:  * distributed under the License is distributed on an "AS IS" BASIS,
1:00879cf:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:00879cf:  * See the License for the specific language governing permissions and
1:00879cf:  * limitations under the License.
1:00879cf:  */
1:00879cf: package org.apache.activemq.broker.region.cursors;
1:00879cf: 
1:00879cf: import java.util.ArrayList;
1:cb1b92b: import java.util.Collection;
1:00879cf: import java.util.HashMap;
1:00879cf: import java.util.Iterator;
1:00879cf: import java.util.List;
1:00879cf: import java.util.Map;
1:fd37e8c: 
1:00879cf: import org.apache.activemq.broker.region.MessageReference;
1:00879cf: import org.apache.activemq.command.MessageId;
1:734fb7d: import org.apache.activemq.management.SizeStatisticImpl;
1:00879cf: 
1:00879cf: public class OrderedPendingList implements PendingList {
1:cb1b92b: 
1:cb1b92b:     private PendingNode root = null;
1:cb1b92b:     private PendingNode tail = null;
1:cb1b92b:     private final Map<MessageId, PendingNode> map = new HashMap<MessageId, PendingNode>();
1:734fb7d:     private final SizeStatisticImpl messageSize;
1:734fb7d:     private final PendingMessageHelper pendingMessageHelper;
1:00879cf: 
1:734fb7d:     public OrderedPendingList() {
1:734fb7d:         messageSize = new SizeStatisticImpl("messageSize", "The size in bytes of the pending messages");
1:734fb7d:         messageSize.setEnabled(true);
1:734fb7d:         pendingMessageHelper = new PendingMessageHelper(map, messageSize);
1:734fb7d:     }
1:f47b370: 
1:f47b370:     @Override
1:00879cf:     public PendingNode addMessageFirst(MessageReference message) {
1:00879cf:         PendingNode node = new PendingNode(this, message);
1:00879cf:         if (root == null) {
1:00879cf:             root = node;
1:00879cf:             tail = node;
1:cb1b92b:         } else {
1:00879cf:             root.linkBefore(node);
1:fd37e8c:             root = node;
3:00879cf:         }
1:734fb7d:         pendingMessageHelper.addToMap(message, node);
1:00879cf:         return node;
1:00879cf:     }
1:734fb7d: 
1:734fb7d:     @Override
1:00879cf:     public PendingNode addMessageLast(MessageReference message) {
1:00879cf:         PendingNode node = new PendingNode(this, message);
1:00879cf:         if (root == null) {
1:00879cf:             root = node;
2:00879cf:         } else {
1:00879cf:             tail.linkAfter(node);
1:00879cf:         }
1:00879cf:         tail = node;
1:734fb7d:         pendingMessageHelper.addToMap(message, node);
1:00879cf:         return node;
1:00879cf:     }
1:e947927: 
1:734fb7d:     @Override
1:00879cf:     public void clear() {
1:00879cf:         this.root = null;
1:00879cf:         this.tail = null;
1:00879cf:         this.map.clear();
1:734fb7d:         this.messageSize.reset();
1:00879cf:     }
1:00879cf: 
1:734fb7d:     @Override
1:00879cf:     public boolean isEmpty() {
1:00879cf:         return this.map.isEmpty();
1:00879cf:     }
1:00879cf: 
1:734fb7d:     @Override
1:00879cf:     public Iterator<MessageReference> iterator() {
1:00879cf:         return new Iterator<MessageReference>() {
1:00879cf:             private PendingNode current = null;
1:00879cf:             private PendingNode next = root;
1:00879cf: 
1:734fb7d:             @Override
1:00879cf:             public boolean hasNext() {
1:00879cf:                 return next != null;
1:00879cf:             }
1:00879cf: 
1:734fb7d:             @Override
1:00879cf:             public MessageReference next() {
1:00879cf:                 MessageReference result = null;
1:00879cf:                 this.current = this.next;
1:00879cf:                 result = this.current.getMessage();
1:00879cf:                 this.next = (PendingNode) this.next.getNext();
1:00879cf:                 return result;
1:00879cf:             }
1:00879cf: 
1:734fb7d:             @Override
1:00879cf:             public void remove() {
1:00879cf:                 if (this.current != null && this.current.getMessage() != null) {
1:734fb7d:                     pendingMessageHelper.removeFromMap(this.current.getMessage());
1:00879cf:                 }
1:00879cf:                 removeNode(this.current);
1:00879cf:             }
1:00879cf:         };
1:00879cf:     }
1:00879cf: 
1:734fb7d:     @Override
1:9c9b856:     public PendingNode remove(MessageReference message) {
1:9c9b856:         PendingNode node = null;
1:00879cf:         if (message != null) {
1:734fb7d:             node = pendingMessageHelper.removeFromMap(message);
1:00879cf:             removeNode(node);
1:fd37e8c:         }
1:9c9b856:         return node;
1:00879cf:     }
1:00879cf: 
1:734fb7d:     @Override
1:00879cf:     public int size() {
1:00879cf:         return this.map.size();
1:00879cf:     }
1:00879cf: 
1:734fb7d:     @Override
1:734fb7d:     public long messageSize() {
1:734fb7d:         return this.messageSize.getTotalSize();
1:734fb7d:     }
1:734fb7d: 
1:00879cf:     void removeNode(PendingNode node) {
1:00879cf:         if (node != null) {
1:734fb7d:             pendingMessageHelper.removeFromMap(node.getMessage());
1:00879cf:             if (root == node) {
1:00879cf:                 root = (PendingNode) node.getNext();
1:00879cf:             }
1:00879cf:             if (tail == node) {
1:00879cf:                 tail = (PendingNode) node.getPrevious();
1:00879cf:             }
1:00879cf:             node.unlink();
1:00879cf:         }
1:00879cf:     }
1:00879cf: 
1:00879cf:     List<PendingNode> getAsList() {
1:00879cf:         List<PendingNode> result = new ArrayList<PendingNode>(size());
1:00879cf:         PendingNode node = root;
1:00879cf:         while (node != null) {
1:00879cf:             result.add(node);
1:00879cf:             node = (PendingNode) node.getNext();
1:00879cf:         }
1:00879cf:         return result;
1:00879cf:     }
1:00879cf: 
1:734fb7d:     @Override
1:00879cf:     public String toString() {
1:00879cf:         return "OrderedPendingList(" + System.identityHashCode(this) + ")";
1:cb1b92b:     }
1:00879cf: 
1:e947927:     @Override
1:cb1b92b:     public boolean contains(MessageReference message) {
1:fd37e8c:         if (message != null) {
1:673c292:             return this.map.containsKey(message.getMessageId());
1:fd37e8c:         }
1:fd37e8c:         return false;
1:cb1b92b:     }
1:cb1b92b: 
1:cb1b92b:     @Override
1:cb1b92b:     public Collection<MessageReference> values() {
1:2b84cd6:         return getValues(this);
1:2b84cd6:     }
1:2b84cd6: 
1:2b84cd6:     public static Collection<MessageReference> getValues(final PendingList pendingList) {
1:cb1b92b:         List<MessageReference> messageReferences = new ArrayList<MessageReference>();
1:2b84cd6:         Iterator<MessageReference> iterator = pendingList.iterator();
1:fb5a972:         while (iterator.hasNext()) {
1:fb5a972:             messageReferences.add(iterator.next());
1:cb1b92b:         }
1:cb1b92b:         return messageReferences;
1:cb1b92b:     }
1:cb1b92b: 
1:cb1b92b:     @Override
1:cb1b92b:     public void addAll(PendingList pendingList) {
1:fd37e8c:         if (pendingList != null) {
1:fd37e8c:             for(MessageReference messageReference : pendingList) {
1:fd37e8c:                 addMessageLast(messageReference);
1:fd37e8c:             }
1:cb1b92b:         }
1:cb1b92b:     }
1:00879cf: 
1:cb1b92b:     @Override
1:e947927:     public MessageReference get(MessageId messageId) {
1:e947927:         PendingNode node = map.get(messageId);
1:e947927:         if (node != null) {
1:e947927:             return node.getMessage();
1:e947927:         }
1:e947927:         return null;
1:e947927:     }
1:00879cf: 
1:f47b370:     public void insertAtHead(List<MessageReference> list) {
1:f47b370:         if (list != null && !list.isEmpty()) {
1:f47b370:             PendingNode newHead = null;
1:f47b370:             PendingNode appendNode = null;
1:f47b370:             for (MessageReference ref : list) {
1:f47b370:                 PendingNode node = new PendingNode(this, ref);
1:f47b370:                 pendingMessageHelper.addToMap(ref, node);
1:f47b370:                 if (newHead == null) {
1:f47b370:                     newHead = node;
1:f47b370:                     appendNode = node;
1:f47b370:                     continue;
1:f47b370:                 }
1:f47b370:                 appendNode.linkAfter(node);
1:f47b370:                 appendNode = node;
1:f47b370:             }
1:f47b370:             // insert this new list at root
1:f47b370:             if (root == null) {
1:f47b370:                 root = newHead;
1:f47b370:                 tail = appendNode;
1:f47b370:             } else {
1:f47b370:                 appendNode.linkAfter(root);
1:f47b370:                 root = newHead;
1:f47b370:             }
1:f47b370:         }
1:f47b370:     }
1:f47b370: 
1:00879cf: }
============================================================================
author:gtully
-------------------------------------------------------------------------------
commit:604f707
/////////////////////////////////////////////////////////////////////////
commit:f47b370
/////////////////////////////////////////////////////////////////////////
1: 
1:     @Override
1:     public void insertAtHead(List<MessageReference> list) {
1:         if (list != null && !list.isEmpty()) {
1:             PendingNode newHead = null;
1:             PendingNode appendNode = null;
1:             for (MessageReference ref : list) {
1:                 PendingNode node = new PendingNode(this, ref);
1:                 pendingMessageHelper.addToMap(ref, node);
1:                 if (newHead == null) {
1:                     newHead = node;
1:                     appendNode = node;
1:                     continue;
1:                 }
1:                 appendNode.linkAfter(node);
1:                 appendNode = node;
1:             }
1:             // insert this new list at root
1:             if (root == null) {
1:                 root = newHead;
1:                 tail = appendNode;
1:             } else {
1:                 appendNode.linkAfter(root);
1:                 root = newHead;
1:             }
1:         }
1:     }
1: 
commit:2b84cd6
/////////////////////////////////////////////////////////////////////////
1:         return getValues(this);
1:     }
1: 
1:     public static Collection<MessageReference> getValues(final PendingList pendingList) {
1:         Iterator<MessageReference> iterator = pendingList.iterator();
author:Christopher L. Shannon
-------------------------------------------------------------------------------
commit:673c292
/////////////////////////////////////////////////////////////////////////
1:             return this.map.containsKey(message.getMessageId());
author:Christopher L. Shannon (cshannon)
-------------------------------------------------------------------------------
commit:734fb7d
/////////////////////////////////////////////////////////////////////////
1: import org.apache.activemq.management.SizeStatisticImpl;
1:     private final SizeStatisticImpl messageSize;
1:     private final PendingMessageHelper pendingMessageHelper;
1:     public OrderedPendingList() {
1:         messageSize = new SizeStatisticImpl("messageSize", "The size in bytes of the pending messages");
1:         messageSize.setEnabled(true);
1:         pendingMessageHelper = new PendingMessageHelper(map, messageSize);
1:     }
1: 
1:     @Override
/////////////////////////////////////////////////////////////////////////
1:         pendingMessageHelper.addToMap(message, node);
1:     @Override
/////////////////////////////////////////////////////////////////////////
1:         pendingMessageHelper.addToMap(message, node);
1:     @Override
1:         this.messageSize.reset();
1:     @Override
1:     @Override
1:             @Override
1:             @Override
/////////////////////////////////////////////////////////////////////////
1:             @Override
1:                     pendingMessageHelper.removeFromMap(this.current.getMessage());
1:     @Override
1:             node = pendingMessageHelper.removeFromMap(message);
1:     @Override
1:     @Override
1:     public long messageSize() {
1:         return this.messageSize.getTotalSize();
1:     }
1: 
1:             pendingMessageHelper.removeFromMap(node.getMessage());
author:Dejan Bosanac
-------------------------------------------------------------------------------
commit:e947927
/////////////////////////////////////////////////////////////////////////
1: 
1:     @Override
1:     public MessageReference get(MessageId messageId) {
1:         PendingNode node = map.get(messageId);
1:         if (node != null) {
1:             return node.getMessage();
1:         }
1:         return null;
1:     }
author:Bosanac Dejan
-------------------------------------------------------------------------------
commit:fb5a972
/////////////////////////////////////////////////////////////////////////
0:         Iterator<MessageReference> iterator = iterator();
1:         while (iterator.hasNext()) {
1:             messageReferences.add(iterator.next());
author:Hiram R. Chirino
-------------------------------------------------------------------------------
commit:58aca86
author:Timothy A. Bish
-------------------------------------------------------------------------------
commit:fd37e8c
/////////////////////////////////////////////////////////////////////////
1: 
/////////////////////////////////////////////////////////////////////////
1:             root = node;
/////////////////////////////////////////////////////////////////////////
1:         if (message != null) {
0:             for (PendingNode value : map.values()) {
0:                 if (value.getMessage().equals(message)) {
0:                     return true;
1:                 }
1:             }
1:         return false;
/////////////////////////////////////////////////////////////////////////
1:         if (pendingList != null) {
1:             for(MessageReference messageReference : pendingList) {
1:                 addMessageLast(messageReference);
1:             }
commit:cb1b92b
/////////////////////////////////////////////////////////////////////////
1: import java.util.Collection;
/////////////////////////////////////////////////////////////////////////
1: 
1:     private PendingNode root = null;
1:     private PendingNode tail = null;
1:     private final Map<MessageId, PendingNode> map = new HashMap<MessageId, PendingNode>();
/////////////////////////////////////////////////////////////////////////
1:     @Override
1:     public boolean contains(MessageReference message) {
0:         if(map.values().contains(message)) {
0:             return true;
1:         } else {
0:             return false;
1:         }
1:     }
1: 
1:     @Override
1:     public Collection<MessageReference> values() {
1:         List<MessageReference> messageReferences = new ArrayList<MessageReference>();
0:         for(PendingNode pendingNode : map.values()) {
0:             messageReferences.add(pendingNode.getMessage());
1:         }
1:         return messageReferences;
1:     }
1: 
1:     @Override
1:     public void addAll(PendingList pendingList) {
0:         for(MessageReference messageReference : pendingList) {
0:             addMessageLast(messageReference);
1:         }
1:     }
author:Gary Tully
-------------------------------------------------------------------------------
commit:9c9b856
/////////////////////////////////////////////////////////////////////////
1:     public PendingNode remove(MessageReference message) {
1:         PendingNode node = null;
0:             node = this.map.remove(message.getMessageId());
1:         return node;
author:Robert Davies
-------------------------------------------------------------------------------
commit:00879cf
/////////////////////////////////////////////////////////////////////////
1: /**
1:  * Licensed to the Apache Software Foundation (ASF) under one or more
1:  * contributor license agreements.  See the NOTICE file distributed with
1:  * this work for additional information regarding copyright ownership.
1:  * The ASF licenses this file to You under the Apache License, Version 2.0
1:  * (the "License"); you may not use this file except in compliance with
1:  * the License.  You may obtain a copy of the License at
1:  *
1:  *      http://www.apache.org/licenses/LICENSE-2.0
1:  *
1:  * Unless required by applicable law or agreed to in writing, software
1:  * distributed under the License is distributed on an "AS IS" BASIS,
1:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:  * See the License for the specific language governing permissions and
1:  * limitations under the License.
1:  */
1: package org.apache.activemq.broker.region.cursors;
1: 
1: import java.util.ArrayList;
1: import java.util.HashMap;
1: import java.util.Iterator;
1: import java.util.List;
1: import java.util.Map;
1: import org.apache.activemq.broker.region.MessageReference;
1: import org.apache.activemq.command.MessageId;
1: 
1: public class OrderedPendingList implements PendingList {
0:     PendingNode root = null;
0:     PendingNode tail = null;
0:     final Map<MessageId, PendingNode> map = new HashMap<MessageId, PendingNode>();
1: 
1:     public PendingNode addMessageFirst(MessageReference message) {
1:         PendingNode node = new PendingNode(this, message);
1:         if (root == null) {
1:             root = node;
1:             tail = node;
1:         } else {
1:             root.linkBefore(node);
1:         }
0:         this.map.put(message.getMessageId(), node);
1:         return node;
1:     }
1: 
1:     public PendingNode addMessageLast(MessageReference message) {
1:         PendingNode node = new PendingNode(this, message);
1:         if (root == null) {
1:             root = node;
1:         } else {
1:             tail.linkAfter(node);
1:         }
1:         tail = node;
0:         this.map.put(message.getMessageId(), node);
1:         return node;
1:     }
1: 
1:     public void clear() {
1:         this.root = null;
1:         this.tail = null;
1:         this.map.clear();
1:     }
1: 
1:     public boolean isEmpty() {
1:         return this.map.isEmpty();
1:     }
1: 
1:     public Iterator<MessageReference> iterator() {
1:         return new Iterator<MessageReference>() {
1:             private PendingNode current = null;
1:             private PendingNode next = root;
1: 
1:             public boolean hasNext() {
1:                 return next != null;
1:             }
1: 
1:             public MessageReference next() {
1:                 MessageReference result = null;
1:                 this.current = this.next;
1:                 result = this.current.getMessage();
1:                 this.next = (PendingNode) this.next.getNext();
1:                 return result;
1:             }
1: 
1:             public void remove() {
1:                 if (this.current != null && this.current.getMessage() != null) {
0:                     map.remove(this.current.getMessage().getMessageId());
1:                 }
1:                 removeNode(this.current);
1:             }
1:         };
1:     }
1: 
0:     public void remove(MessageReference message) {
1:         if (message != null) {
0:             PendingNode node = this.map.remove(message.getMessageId());
1:             removeNode(node);
1:         }
1:     }
1: 
1:     public int size() {
1:         return this.map.size();
1:     }
1: 
1:     void removeNode(PendingNode node) {
1:         if (node != null) {
0:             map.remove(node.getMessage().getMessageId());
1:             if (root == node) {
1:                 root = (PendingNode) node.getNext();
1:             }
1:             if (tail == node) {
1:                 tail = (PendingNode) node.getPrevious();
1:             }
1:             node.unlink();
1:         }
1:     }
1: 
1:     List<PendingNode> getAsList() {
1:         List<PendingNode> result = new ArrayList<PendingNode>(size());
1:         PendingNode node = root;
1:         while (node != null) {
1:             result.add(node);
1:             node = (PendingNode) node.getNext();
1:         }
1:         return result;
1:     }
1: 
0:     @Override
1:     public String toString() {
1:         return "OrderedPendingList(" + System.identityHashCode(this) + ")";
1:     }
1: 
1: }
============================================================================