1:aecbd1c: /**
1:57b4941:  * Licensed to the Apache Software Foundation (ASF) under one or more
1:57b4941:  * contributor license agreements.  See the NOTICE file distributed with
1:57b4941:  * this work for additional information regarding copyright ownership.
1:57b4941:  * The ASF licenses this file to You under the Apache License, Version 2.0
1:57b4941:  * (the "License"); you may not use this file except in compliance with
1:57b4941:  * the License.  You may obtain a copy of the License at
1:aecbd1c:  *
1:230a86c:  *      http://www.apache.org/licenses/LICENSE-2.0
1:aecbd1c:  *
1:aecbd1c:  * Unless required by applicable law or agreed to in writing, software
1:aecbd1c:  * distributed under the License is distributed on an "AS IS" BASIS,
1:aecbd1c:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:aecbd1c:  * See the License for the specific language governing permissions and
1:aecbd1c:  * limitations under the License.
1:aecbd1c:  */
1:aecbd1c: package org.apache.activemq.broker.jmx;
1:c07b233: 
1:00879cf: import java.io.IOException;
1:74a7a8b: import java.util.List;
1:74a7a8b: import java.util.Map;
1:c07b233: 
1:944f9d6: import javax.jms.InvalidSelectorException;
1:00879cf: import javax.management.MalformedObjectNameException;
1:00879cf: import javax.management.ObjectName;
1:aecbd1c: import javax.management.openmbean.CompositeData;
1:aecbd1c: import javax.management.openmbean.OpenDataException;
1:aecbd1c: import javax.management.openmbean.TabularData;
1:74a7a8b: 
1:aecbd1c: public interface DestinationViewMBean {
1:fc00993: 
1:83c3dca:     /**
1:d680ba1:      * Returns the name of this destination
1:fe63c29:      */
1:ced6909:     @MBeanInfo("Name of this destination.")
1:fc00993:     String getName();
1:fc00993: 
1:c07b233:     /**
1:5e05df1:      * Resets the management counters.
1:fc00993:      */
1:ced6909:     @MBeanInfo("Resets statistics.")
1:fc00993:     void resetStatistics();
1:944f9d6: 
1:fe63c29:     /**
1:2632922:      * Returns the number of messages that have been sent to the destination.
1:dda5c93:      *
1:aecbd1c:      * @return The number of messages that have been sent to the destination.
1:aecbd1c:      */
1:ced6909:     @MBeanInfo("Number of messages that have been sent to the destination.")
1:fc00993:     long getEnqueueCount();
1:fc00993: 
1:fc00993:     /**
1:fc00993:      * Returns the number of messages that have been delivered (potentially not
1:fc00993:      * acknowledged) to consumers.
1:fc00993:      *
1:fc00993:      * @return The number of messages that have been delivered (potentially not
1:fc00993:      *         acknowledged) to consumers.
1:aecbd1c:      */
1:0e74c52:     @MBeanInfo("Number of messages that has been delivered to consumers, including those not acknowledged")
1:fc00993:     long getDispatchCount();
1:fc00993: 
1:aecbd1c:     /**
1:fc00993:      * Returns the number of messages that have been acknowledged from the
1:fc00993:      * destination.
1:fc00993:      *
1:fc00993:      * @return The number of messages that have been acknowledged from the
1:fc00993:      *         destination.
1:aecbd1c:      */
1:0e74c52:     @MBeanInfo("Number of messages that has been acknowledged (and removed) from the destination.")
1:fc00993:     long getDequeueCount();
1:2a153b0: 
1:2a153b0:     /**
1:25e3c1b:      * Returns the number of messages that have been acknowledged by network subscriptions from the
1:25e3c1b:      * destination.
1:25e3c1b:      *
1:25e3c1b:      * @return The number of messages that have been acknowledged by network subscriptions from the
1:25e3c1b:      *         destination.
1:25e3c1b:      */
1:25e3c1b:     @MBeanInfo("Number of messages that have been forwarded (to a networked broker) from the destination.")
1:25e3c1b:     long getForwardCount();
1:25e3c1b: 
1:25e3c1b:     /**
1:2a153b0:      * Returns the number of messages that have been dispatched but not
1:2a153b0:      * acknowledged
1:2a153b0:      *
1:2a153b0:      * @return The number of messages that have been dispatched but not
1:2a153b0:      * acknowledged
1:2a153b0:      */
1:ced6909:     @MBeanInfo("Number of messages that have been dispatched to, but not acknowledged by, consumers.")
1:2a153b0:     long getInFlightCount();
1:c6a485f: 
1:c6a485f:     /**
1:c6a485f:      * Returns the number of messages that have expired
1:c6a485f:      *
1:c6a485f:      * @return The number of messages that have expired
1:c6a485f:      */
1:ced6909:     @MBeanInfo("Number of messages that have been expired.")
1:c6a485f:     long getExpiredCount();
1:c6a485f: 
1:aecbd1c:     /**
1:2632922:      * Returns the number of consumers subscribed this destination.
1:fc00993:      *
1:2632922:      * @return The number of consumers subscribed this destination.
1:aecbd1c:      */
1:ced6909:     @MBeanInfo("Number of consumers subscribed to this destination.")
1:fc00993:     long getConsumerCount();
1:83c3dca: 
1:83c3dca:     /**
1:83c3dca:      * @return the number of producers publishing to the destination
1:83c3dca:      */
1:0e74c52:     @MBeanInfo("Number of producers attached to this destination")
1:83c3dca:     long getProducerCount();
1:ced6909: 
1:aecbd1c:     /**
1:fc00993:      * Returns the number of messages in this destination which are yet to be
1:fc00993:      * consumed
1:fc00993:      *
1:fc00993:      * @return Returns the number of messages in this destination which are yet
1:fc00993:      *         to be consumed
1:aecbd1c:      */
1:0e74c52:     @MBeanInfo("Number of messages on this destination, including any that have been dispatched but not acknowledged")
1:fc00993:     long getQueueSize();
8:aecbd1c: 
1:aecbd1c:     /**
1:5e05df1:      * Returns the memory size of all messages in this destination's store
1:785b16b:      *
1:5e05df1:      * @return Returns the memory size of all messages in this destination's store
1:785b16b:      */
1:785b16b:     @MBeanInfo("The memory size of all messages in this destination's store.")
1:785b16b:     long getStoreMessageSize();
1:785b16b: 
1:785b16b:     /**
1:944f9d6:      * @return An array of all the messages in the destination's queue.
1:944f9d6:      */
1:ced6909:     @MBeanInfo("An array of all messages in the destination. Not HTML friendly.")
1:fc00993:     CompositeData[] browse() throws OpenDataException;
1:fc00993: 
1:944f9d6:     /**
1:944f9d6:      * @return A list of all the messages in the destination's queue.
1:fc00993:      */
1:ced6909:     @MBeanInfo("A list of all messages in the destination. Not HTML friendly.")
1:fc00993:     TabularData browseAsTable() throws OpenDataException;
1:fc00993: 
1:fc00993:     /**
1:fc00993:      * @return An array of all the messages in the destination's queue.
1:fc00993:      * @throws InvalidSelectorException
1:fc00993:      */
1:ced6909:     @MBeanInfo("An array of all messages in the destination based on an SQL-92 selection on the message headers or XPATH on the body. Not HTML friendly.")
1:ced6909:     CompositeData[] browse(@MBeanInfo("selector") String selector) throws OpenDataException, InvalidSelectorException;
1:fc00993: 
1:fc00993:     /**
1:fc00993:      * @return A list of all the messages in the destination's queue.
1:fc00993:      * @throws InvalidSelectorException
1:944f9d6:      */
1:ced6909:     @MBeanInfo("A list of all messages in the destination based on an SQL-92 selection on the message headers or XPATH on the body. Not HTML friendly.")
1:ced6909:     TabularData browseAsTable(@MBeanInfo("selector") String selector) throws OpenDataException, InvalidSelectorException;
1:944f9d6: 
1:944f9d6:     /**
1:5cd2921:      * Sends a TextMesage to the destination.
1:fc00993:      *
1:5cd2921:      * @param body the text to send
1:aecbd1c:      * @return the message id of the message sent.
1:5cd2921:      * @throws Exception
1:aecbd1c:      */
1:ced6909:     @MBeanInfo("Sends a TextMessage to the destination.")
1:ced6909:     String sendTextMessage(@MBeanInfo("body") String body) throws Exception;
1:aecbd1c: 
1:aecbd1c:     /**
1:dda5c93:      * Sends a TextMessage to the destination.
1:5cd2921:      *
1:dda5c93:      * @param properties the message properties to set as a comma sep name=value list. Can only
1:dda5c93:      *                contain Strings maped to primitive types or JMS properties. eg: body=hi,JMSReplyTo=Queue2
1:dda5c93:      * @return the message id of the message sent.
1:dda5c93:      * @throws Exception
1:dda5c93:      */
1:dda5c93:     @MBeanInfo("Sends a TextMessage to the destination.")
1:dda5c93:     public String sendTextMessageWithProperties(String properties) throws Exception;
1:dda5c93: 
1:dda5c93:     /**
1:aecbd1c:      * Sends a TextMesage to the destination.
1:fc00993:      *
1:fc00993:      * @param headers the message headers and properties to set. Can only
1:fc00993:      *                container Strings maped to primitive types.
1:aecbd1c:      * @param body the text to send
1:aecbd1c:      * @return the message id of the message sent.
1:aecbd1c:      * @throws Exception
1:aecbd1c:      */
1:ced6909:     @MBeanInfo("Sends a TextMessage to the destination.")
1:ced6909:     String sendTextMessage(@MBeanInfo("headers") Map<?,?> headers, @MBeanInfo("body") String body) throws Exception;
1:fc00993: 
1:aecbd1c:     /**
1:aecbd1c:      * Sends a TextMesage to the destination.
1:aecbd1c:      * @param body the text to send
1:5cd2921:      * @param user
1:5cd2921:      * @param password
1:5e05df1:      * @return a string value
1:5cd2921:      * @throws Exception
1:5cd2921:      */
1:ced6909:     @MBeanInfo("Sends a TextMessage to a password-protected destination.")
1:ced6909:     String sendTextMessage(@MBeanInfo("body") String body, @MBeanInfo("user") String user, @MBeanInfo("password") String password) throws Exception;
1:5cd2921: 
1:5cd2921:     /**
1:5e05df1:      *
1:5cd2921:      * @param headers the message headers and properties to set. Can only
1:5cd2921:      *                container Strings maped to primitive types.
1:5cd2921:      * @param body the text to send
1:5cd2921:      * @param user
1:5cd2921:      * @param password
1:5e05df1:      *
1:5e05df1:      * @return a string value
1:fc00993:      *
1:aecbd1c:      * @throws Exception
1:5cd2921:      */
1:ced6909:     @MBeanInfo("Sends a TextMessage to a password-protected destination.")
1:fc8c8d3:     String sendTextMessage(@MBeanInfo("headers") Map<String,String> headers, @MBeanInfo("body") String body, @MBeanInfo("user") String user, @MBeanInfo("password") String password) throws Exception;
1:5e05df1: 
1:5cd2921:     /**
1:83c3dca:      * @return the percentage of amount of memory used
1:83c3dca:      */
1:ced6909:     @MBeanInfo("The percentage of the memory limit used")
1:23cda2d:     int getMemoryPercentUsage();
1:aecbd1c: 
1:83c3dca:     /**
1:90eb05c:      * @return the amount of memory currently used by this destination
1:aecbd1c:      */
1:0e74c52:     @MBeanInfo("Memory used by undelivered messages in bytes")
1:90eb05c:     long getMemoryUsageByteCount();
1:aecbd1c: 
1:aecbd1c:     /**
1:83c3dca:      * @return the amount of memory allocated to this destination
1:83c3dca:      */
1:0e74c52:     @MBeanInfo("Memory limit, in bytes, used by undelivered messages before paging to temporary storage.")
1:fc00993:     long getMemoryLimit();
1:fc00993: 
1:83c3dca:     /**
1:83c3dca:      * set the amount of memory allocated to this destination
1:83c3dca:      * @param limit
1:83c3dca:      */
1:fc00993:     void setMemoryLimit(long limit);
1:83c3dca: 
1:83c3dca:     /**
1:83c3dca:      * @return the portion of memory from the broker memory limit for this destination
1:83c3dca:      */
1:ced6909:     @MBeanInfo("Portion of memory from the broker memory limit for this destination")
1:23cda2d:     float getMemoryUsagePortion();
1:83c3dca: 
1:83c3dca:     /**
1:83c3dca:      * set the portion of memory from the broker memory limit for this destination
1:83c3dca:      * @param value
1:83c3dca:      */
1:ced6909:     void setMemoryUsagePortion(@MBeanInfo("bytes") float value);
1:aecbd1c: 
1:aecbd1c:     /**
1:9b07e43:      * Browses the current destination returning a list of messages
1:aecbd1c:      */
1:ced6909:     @MBeanInfo("A list of all messages in the destination. Not HTML friendly.")
1:ced6909:     List<?> browseMessages() throws InvalidSelectorException;
1:aecbd1c: 
1:aecbd1c:     /**
1:fc00993:      * Browses the current destination with the given selector returning a list
1:fc00993:      * of messages
7:07d4e8c:      */
1:ced6909:     @MBeanInfo("A list of all messages in the destination based on an SQL-92 selection on the message headers or XPATH on the body. Not HTML friendly.")
1:ced6909:     List<?> browseMessages(String selector) throws InvalidSelectorException;
1:fc00993: 
7:07d4e8c:     /**
1:c07b233:      * @return longest time a message is held by a destination
1:c07b233:      */
1:0e74c52:     @MBeanInfo("The longest time a message was held on this destination")
1:fc00993:     long getMaxEnqueueTime();
1:c07b233: 
1:c07b233:     /**
1:c07b233:      * @return shortest time a message is held by a destination
1:c07b233:      */
1:0e74c52:     @MBeanInfo("The shortest time a message was held on this destination")
1:fc00993:     long getMinEnqueueTime();
1:f71e2fe: 
1:0e74c52:     @MBeanInfo("Average time a message was held on this destination.")
1:fc00993:     double getAverageEnqueueTime();
1:83c3dca: 
1:f71e2fe:     @MBeanInfo("Average message size on this destination")
1:dbf2c28:     long getAverageMessageSize();
1:f71e2fe: 
1:f71e2fe:     @MBeanInfo("Max message size on this destination")
1:f71e2fe:     public long getMaxMessageSize();
1:f71e2fe: 
1:f71e2fe:     @MBeanInfo("Min message size on this destination")
1:f71e2fe:     public long getMinMessageSize();
1:f71e2fe: 
1:83c3dca:     /**
1:83c3dca:      * @return the producerFlowControl
1:83c3dca:      */
1:0e74c52:     @MBeanInfo("Flow control is enabled for producers")
1:83c3dca:     boolean isProducerFlowControl();
1:c07b233: 
1:83c3dca:     /**
1:83c3dca:      * @param producerFlowControl the producerFlowControl to set
1:83c3dca:      */
1:ced6909:     public void setProducerFlowControl(@MBeanInfo("producerFlowControl") boolean producerFlowControl);
1:83c3dca: 
1:83c3dca:     /**
1:fe63c29:      * @return if we treat consumers as alwaysRetroactive
1:c07b233:      */
1:0e74c52:     @MBeanInfo("Always treat consumers as retroactive")
1:fe63c29:     boolean isAlwaysRetroactive();
1:fe63c29: 
1:c07b233:     /**
1:fe63c29:      * @param alwaysRetroactive set as always retroActive
1:fe63c29:      */
1:fe63c29:     public void setAlwaysRetroactive(@MBeanInfo("alwaysRetroactive") boolean alwaysRetroactive);
1:fe63c29: 
1:fe63c29:     /**
1:48764be:      * Set's the interval at which warnings about producers being blocked by
1:48764be:      * resource usage will be triggered. Values of 0 or less will disable
1:48764be:      * warnings
1:aecbd1c:      *
1:48764be:      * @param blockedProducerWarningInterval the interval at which warning about
1:48764be:      *            blocked producers will be triggered.
1:07d4e8c:      */
1:48764be:     public void setBlockedProducerWarningInterval(@MBeanInfo("blockedProducerWarningInterval")  long blockedProducerWarningInterval);
1:fc00993: 
1:07d4e8c:     /**
1:aecbd1c:      *
1:48764be:      * @return the interval at which warning about blocked producers will be
1:48764be:      *         triggered.
1:07d4e8c:      */
1:48764be:     @MBeanInfo("Blocked Producer Warning Interval")
1:48764be:     public long getBlockedProducerWarningInterval();
1:fc00993: 
1:07d4e8c:     /**
1:83c3dca:      * @return the maxProducersToAudit
1:83c3dca:      */
1:ced6909:     @MBeanInfo("Maximum number of producers to audit")
1:83c3dca:     public int getMaxProducersToAudit();
1:83c3dca: 
1:83c3dca:     /**
1:83c3dca:      * @param maxProducersToAudit the maxProducersToAudit to set
1:83c3dca:      */
1:ced6909:     public void setMaxProducersToAudit(@MBeanInfo("maxProducersToAudit") int maxProducersToAudit);
1:83c3dca: 
1:83c3dca:     /**
1:83c3dca:      * @return the maxAuditDepth
1:83c3dca:      */
1:ced6909:     @MBeanInfo("Max audit depth")
1:83c3dca:     public int getMaxAuditDepth();
1:83c3dca: 
1:83c3dca:     /**
1:83c3dca:      * @param maxAuditDepth the maxAuditDepth to set
1:83c3dca:      */
1:ced6909:     public void setMaxAuditDepth(@MBeanInfo("maxAuditDepth") int maxAuditDepth);
1:4dde323: 
1:4dde323:     /**
1:4dde323:      * @return the maximum number of message to be paged into the
1:4dde323:      * destination
1:4dde323:      */
1:ced6909:     @MBeanInfo("Maximum number of messages to be paged in")
1:4dde323:     public int getMaxPageSize();
1:4dde323: 
1:4dde323:     /**
1:4dde323:      * @param pageSize
1:4dde323:      * Set the maximum number of messages to page into the destination
1:4dde323:      */
1:ced6909:     public void setMaxPageSize(@MBeanInfo("pageSize") int pageSize);
1:4dde323: 
1:4dde323:     /**
1:aad7e73:      * @return true if caching is allowed of for the destination
1:4dde323:      */
1:aad7e73:     @MBeanInfo("Caching is allowed")
1:4dde323:     public boolean isUseCache();
1:4dde323: 
1:4dde323:     /**
1:00879cf:      * @return true if prioritized messages are enabled for the destination
1:00879cf:      */
1:00879cf:     @MBeanInfo("Prioritized messages is enabled")
1:00879cf:     public boolean isPrioritizedMessages();
1:00879cf: 
1:00879cf:     /**
1:4dde323:      * @param value
1:4dde323:      * enable/disable caching on the destination
1:4dde323:      */
1:ced6909:     public void setUseCache(@MBeanInfo("cache") boolean value);
1:aecbd1c: 
1:07d4e8c:     /**
1:947659c:      * Returns all the current subscription MBeans matching this destination
4:07d4e8c:      *
1:947659c:      * @return the names of the subscriptions for this destination
1:07d4e8c:      */
1:0e74c52:     @MBeanInfo("Subscription MBeans matching this destination")
1:947659c:     ObjectName[] getSubscriptions() throws IOException, MalformedObjectNameException;
1:383d12e: 
1:aecbd1c: 
1:383d12e:     /**
1:383d12e:      * Returns the slow consumer strategy MBean for this destination
1:383d12e:      *
1:383d12e:      * @return the name of the slow consumer handler MBean for this destination
1:383d12e:      */
1:0e74c52:     @MBeanInfo("Optional slowConsumer handler MBean for this destination")
1:383d12e:     ObjectName getSlowConsumerStrategy() throws IOException, MalformedObjectNameException;
1:383d12e: 
1:7410257:     /**
1:7410257:      * @return A string of destination options, name value pairs as URL queryString.
1:7410257:      */
1:0e74c52:     @MBeanInfo("Destination options as name value pairs in a URL queryString")
1:7410257:     String getOptions();
1:7410257: 
1:e1f170d:     /**
1:e1f170d:      * @return true if this is dead letter queue
1:e1f170d:      */
1:e1f170d:     @MBeanInfo("Dead Letter Queue")
1:e1f170d:     boolean isDLQ();
1:e1f170d: 
1:d2c0edd:     /**
1:d2c0edd:      * @param value
1:d2c0edd:      * enable/disable the DLQ flag
1:d2c0edd:      */
1:d2c0edd:     void setDLQ(boolean value);
1:d2c0edd: 
1:0e74c52:     @MBeanInfo("Number of messages blocked for flow control")
1:0736953:     long getBlockedSends();
1:0736953: 
1:0e74c52:     @MBeanInfo("Average time (ms) messages have been blocked by flow control")
1:0736953:     double getAverageBlockedTime();
1:0736953: 
1:0e74c52:     @MBeanInfo("Total time (ms) messages have been blocked by flow control")
1:0736953:     long getTotalBlockedTime();
1:0736953: 
1:86cbdfd: }
============================================================================
author:gtully
-------------------------------------------------------------------------------
commit:d2c0edd
/////////////////////////////////////////////////////////////////////////
1:     /**
1:      * @param value
1:      * enable/disable the DLQ flag
1:      */
1:     void setDLQ(boolean value);
1: 
commit:0e74c52
/////////////////////////////////////////////////////////////////////////
1:     @MBeanInfo("Number of messages that has been delivered to consumers, including those not acknowledged")
/////////////////////////////////////////////////////////////////////////
1:     @MBeanInfo("Number of messages that has been acknowledged (and removed) from the destination.")
/////////////////////////////////////////////////////////////////////////
1:     @MBeanInfo("Number of producers attached to this destination")
/////////////////////////////////////////////////////////////////////////
1:     @MBeanInfo("Number of messages on this destination, including any that have been dispatched but not acknowledged")
/////////////////////////////////////////////////////////////////////////
1:     @MBeanInfo("Memory used by undelivered messages in bytes")
1:     @MBeanInfo("Memory limit, in bytes, used by undelivered messages before paging to temporary storage.")
/////////////////////////////////////////////////////////////////////////
1:     @MBeanInfo("The longest time a message was held on this destination")
1:     @MBeanInfo("The shortest time a message was held on this destination")
1:     @MBeanInfo("Average time a message was held on this destination.")
/////////////////////////////////////////////////////////////////////////
1:     @MBeanInfo("Flow control is enabled for producers")
/////////////////////////////////////////////////////////////////////////
1:     @MBeanInfo("Always treat consumers as retroactive")
/////////////////////////////////////////////////////////////////////////
1:     @MBeanInfo("Subscription MBeans matching this destination")
/////////////////////////////////////////////////////////////////////////
1:     @MBeanInfo("Optional slowConsumer handler MBean for this destination")
1:     @MBeanInfo("Destination options as name value pairs in a URL queryString")
/////////////////////////////////////////////////////////////////////////
1:     @MBeanInfo("Number of messages blocked for flow control")
1:     @MBeanInfo("Average time (ms) messages have been blocked by flow control")
1:     @MBeanInfo("Total time (ms) messages have been blocked by flow control")
commit:25e3c1b
/////////////////////////////////////////////////////////////////////////
1:      * Returns the number of messages that have been acknowledged by network subscriptions from the
1:      * destination.
1:      *
1:      * @return The number of messages that have been acknowledged by network subscriptions from the
1:      *         destination.
1:      */
1:     @MBeanInfo("Number of messages that have been forwarded (to a networked broker) from the destination.")
1:     long getForwardCount();
1: 
1:     /**
author:Timothy Bish
-------------------------------------------------------------------------------
commit:5e05df1
/////////////////////////////////////////////////////////////////////////
1:      * Resets the management counters.
/////////////////////////////////////////////////////////////////////////
1:      * Returns the memory size of all messages in this destination's store
1:      * @return Returns the memory size of all messages in this destination's store
/////////////////////////////////////////////////////////////////////////
1:      * @return a string value
/////////////////////////////////////////////////////////////////////////
1:      *
1:      * @return a string value
1:      *
1: 
author:Christopher L. Shannon (cshannon)
-------------------------------------------------------------------------------
commit:785b16b
/////////////////////////////////////////////////////////////////////////
0:      * Returns the memory size of all messages in this destination's store 
1:      *
0:      * @return Returns the memory size of all messages in this destination's store 
1:      */
1:     @MBeanInfo("The memory size of all messages in this destination's store.")
1:     long getStoreMessageSize();
1: 
1:     /**
author:Claus Ibsen
-------------------------------------------------------------------------------
commit:dbf2c28
/////////////////////////////////////////////////////////////////////////
1:     long getAverageMessageSize();
author:Robert Davies
-------------------------------------------------------------------------------
commit:f71e2fe
/////////////////////////////////////////////////////////////////////////
1: 
1:     @MBeanInfo("Average message size on this destination")
0:     double getAverageMessageSize();
1: 
1:     @MBeanInfo("Max message size on this destination")
1:     public long getMaxMessageSize();
1: 
1:     @MBeanInfo("Min message size on this destination")
1:     public long getMinMessageSize();
1: 
commit:0736953
/////////////////////////////////////////////////////////////////////////
0:     @MBeanInfo("Get number of messages blocked for Flow Control")
1:     long getBlockedSends();
1: 
0:     @MBeanInfo("get the average time (ms) a message is blocked for Flow Control")
1:     double getAverageBlockedTime();
1: 
0:     @MBeanInfo("Get the total time (ms) messages are blocked for Flow Control")
1:     long getTotalBlockedTime();
1: 
commit:00879cf
/////////////////////////////////////////////////////////////////////////
1: import java.io.IOException;
1: import javax.management.MalformedObjectNameException;
1: import javax.management.ObjectName;
/////////////////////////////////////////////////////////////////////////
1:      * @return true if prioritized messages are enabled for the destination
1:      */
1:     @MBeanInfo("Prioritized messages is enabled")
1:     public boolean isPrioritizedMessages();
1:     
1:     /**
commit:5cd2921
/////////////////////////////////////////////////////////////////////////
1:      * Sends a TextMesage to the destination.
1:      * @param body the text to send
1:      * @param user
1:      * @param password
0:      * @return
1:      * @throws Exception
1:      */
0:     String sendTextMessage(String body, String user, String password) throws Exception;
1:     
1:     /**
1:      * 
1:      * @param headers the message headers and properties to set. Can only
1:      *                container Strings maped to primitive types.
1:      * @param body the text to send
1:      * @param user
1:      * @param password
0:      * @return
1:      * @throws Exception
1:      */
0:     String sendTextMessage(Map headers, String body, String user, String password) throws Exception;
1:     /**
commit:4dde323
/////////////////////////////////////////////////////////////////////////
1:     
1:     /**
1:      * @return the maximum number of message to be paged into the 
1:      * destination
1:      */
1:     public int getMaxPageSize();
1:     
1:     /**
1:      * @param pageSize
1:      * Set the maximum number of messages to page into the destination
1:      */
0:     public void setMaxPageSize(int pageSize);
1:     
1:     /**
0:      * @return true if caching is enabled of for the destination
1:      */
1:     public boolean isUseCache();
1:     
1:     /**
1:      * @param value
1:      * enable/disable caching on the destination
1:      */
0:     public void setUseCache(boolean value);
commit:2a153b0
/////////////////////////////////////////////////////////////////////////
1:     
1:     /**
1:      * Returns the number of messages that have been dispatched but not
1:      * acknowledged
1:      * 
1:      * @return The number of messages that have been dispatched but not
1:      * acknowledged
1:      */
1:     long getInFlightCount();
commit:23cda2d
/////////////////////////////////////////////////////////////////////////
1:     int getMemoryPercentUsage();
/////////////////////////////////////////////////////////////////////////
1:     float getMemoryUsagePortion();
0:     void setMemoryUsagePortion(float value);
commit:83c3dca
/////////////////////////////////////////////////////////////////////////
1:     
1:     /**
1:      * @return the number of producers publishing to the destination
1:      */
1:     long getProducerCount();
/////////////////////////////////////////////////////////////////////////
1:     /**
1:      * @return the percentage of amount of memory used
1:      */
1:     /**
1:      * @return the amount of memory allocated to this destination
1:      */
1:     /**
1:      * set the amount of memory allocated to this destination
1:      * @param limit
1:      */
1:     
1:     /**
1:      * @return the portion of memory from the broker memory limit for this destination
1:      */
0:     float getMemoryLimitPortion();
1:     
1:     /**
1:      * set the portion of memory from the broker memory limit for this destination
1:      * @param value
1:      */
0:     void setMemoryLimitPortion(float value);
/////////////////////////////////////////////////////////////////////////
1:     
1:     /**
1:      * @return the producerFlowControl
1:      */
1:     boolean isProducerFlowControl();
1:     /**
1:      * @param producerFlowControl the producerFlowControl to set
1:      */
0:     public void setProducerFlowControl(boolean producerFlowControl);
1:     
1:     /**
1:      * @return the maxProducersToAudit
1:      */
1:     public int getMaxProducersToAudit();
1:     
1:     /**
1:      * @param maxProducersToAudit the maxProducersToAudit to set
1:      */
0:     public void setMaxProducersToAudit(int maxProducersToAudit);
1:     
1:     /**
1:      * @return the maxAuditDepth
1:      */
1:     public int getMaxAuditDepth();
1:     
1:     /**
1:      * @param maxAuditDepth the maxAuditDepth to set
1:      */
0:     public void setMaxAuditDepth(int maxAuditDepth);
commit:c07b233
/////////////////////////////////////////////////////////////////////////
1:     
1:        
1:     /**
1:      * @return longest time a message is held by a destination
1:      */
0:     public long getMaxEnqueueTime();
1:     
1:     /**
1:      * @return shortest time a message is held by a destination
1:      */
0:     public long getMinEnqueueTime();
1:     
1:     /**
0:      * @return average time a message is held by a destination
1:      */
0:     public double getAverageEnqueueTime();
author:Gary Tully
-------------------------------------------------------------------------------
commit:dda5c93
/////////////////////////////////////////////////////////////////////////
1:      * Sends a TextMessage to the destination.
1:      *
1:      * @param properties the message properties to set as a comma sep name=value list. Can only
1:      *                contain Strings maped to primitive types or JMS properties. eg: body=hi,JMSReplyTo=Queue2
1:      * @return the message id of the message sent.
1:      * @throws Exception
1:      */
1:     @MBeanInfo("Sends a TextMessage to the destination.")
1:     public String sendTextMessageWithProperties(String properties) throws Exception;
1: 
1:     /**
commit:7410257
/////////////////////////////////////////////////////////////////////////
1:     /**
1:      * @return A string of destination options, name value pairs as URL queryString.
1:      */
0:     @MBeanInfo("returns the destination options, name value pairs as URL queryString")
1:     String getOptions();
1: 
commit:fe63c29
/////////////////////////////////////////////////////////////////////////
1:      * @return if we treat consumers as alwaysRetroactive
1:      */
0:     @MBeanInfo("Always treat consumers as retroActive")
1:     boolean isAlwaysRetroactive();
1:     
1:     /**
1:      * @param alwaysRetroactive set as always retroActive
1:      */
1:     public void setAlwaysRetroactive(@MBeanInfo("alwaysRetroactive") boolean alwaysRetroactive);    
1:     
1:     /**
commit:aad7e73
/////////////////////////////////////////////////////////////////////////
1:      * @return true if caching is allowed of for the destination
1:     @MBeanInfo("Caching is allowed")
commit:383d12e
/////////////////////////////////////////////////////////////////////////
1: 
1:     /**
1:      * Returns the slow consumer strategy MBean for this destination
1:      *
1:      * @return the name of the slow consumer handler MBean for this destination
1:      */
0:     @MBeanInfo("returns the optional slowConsumer handler MBeans for this destination")
1:     ObjectName getSlowConsumerStrategy() throws IOException, MalformedObjectNameException;
1: 
commit:c6a485f
/////////////////////////////////////////////////////////////////////////
1:     
1:     /**
1:      * Returns the number of messages that have expired
1:      * 
1:      * @return The number of messages that have expired
1:      */
1:     long getExpiredCount();
1: 
author:Bosanac Dejan
-------------------------------------------------------------------------------
commit:fc8c8d3
/////////////////////////////////////////////////////////////////////////
1:     String sendTextMessage(@MBeanInfo("headers") Map<String,String> headers, @MBeanInfo("body") String body, @MBeanInfo("user") String user, @MBeanInfo("password") String password) throws Exception;
commit:e1f170d
/////////////////////////////////////////////////////////////////////////
1:     /**
1:      * @return true if this is dead letter queue
1:      */
1:     @MBeanInfo("Dead Letter Queue")
1:     boolean isDLQ();
1: 
commit:ced6909
/////////////////////////////////////////////////////////////////////////
1:     @MBeanInfo("Name of this destination.")
1:     @MBeanInfo("Resets statistics.")
/////////////////////////////////////////////////////////////////////////
1:     @MBeanInfo("Number of messages that have been sent to the destination.")
/////////////////////////////////////////////////////////////////////////
0:     @MBeanInfo("Number of messages that have been delivered (but potentially not acknowledged) to consumers.")
/////////////////////////////////////////////////////////////////////////
0:     @MBeanInfo("Number of messages that have been acknowledged (and removed from) from the destination.")
/////////////////////////////////////////////////////////////////////////
1:     @MBeanInfo("Number of messages that have been dispatched to, but not acknowledged by, consumers.")
1:     @MBeanInfo("Number of messages that have been expired.")
1:     
1:     @MBeanInfo("Number of consumers subscribed to this destination.")
0:     @MBeanInfo("Number of producers publishing to this destination")
/////////////////////////////////////////////////////////////////////////
0:     @MBeanInfo("Number of messages in the destination which are yet to be consumed.  Potentially dispatched but unacknowledged.")
1:     @MBeanInfo("An array of all messages in the destination. Not HTML friendly.")
1:     @MBeanInfo("A list of all messages in the destination. Not HTML friendly.")
1:     @MBeanInfo("An array of all messages in the destination based on an SQL-92 selection on the message headers or XPATH on the body. Not HTML friendly.")
1:     CompositeData[] browse(@MBeanInfo("selector") String selector) throws OpenDataException, InvalidSelectorException;
1:     @MBeanInfo("A list of all messages in the destination based on an SQL-92 selection on the message headers or XPATH on the body. Not HTML friendly.")
1:     TabularData browseAsTable(@MBeanInfo("selector") String selector) throws OpenDataException, InvalidSelectorException;
/////////////////////////////////////////////////////////////////////////
1:     @MBeanInfo("Sends a TextMessage to the destination.")
1:     String sendTextMessage(@MBeanInfo("body") String body) throws Exception;
/////////////////////////////////////////////////////////////////////////
1:     @MBeanInfo("Sends a TextMessage to the destination.")
1:     String sendTextMessage(@MBeanInfo("headers") Map<?,?> headers, @MBeanInfo("body") String body) throws Exception;
/////////////////////////////////////////////////////////////////////////
1:     @MBeanInfo("Sends a TextMessage to a password-protected destination.")
1:     String sendTextMessage(@MBeanInfo("body") String body, @MBeanInfo("user") String user, @MBeanInfo("password") String password) throws Exception;
/////////////////////////////////////////////////////////////////////////
1:     @MBeanInfo("Sends a TextMessage to a password-protected destination.")
0:     String sendTextMessage(@MBeanInfo("headers") Map<?,?> headers, @MBeanInfo("body") String body, @MBeanInfo("user") String user, @MBeanInfo("password") String password) throws Exception;
1:     @MBeanInfo("The percentage of the memory limit used")
0:     @MBeanInfo("Memory limit, in bytes, used for holding undelivered messages before paging to temporary storage.")
/////////////////////////////////////////////////////////////////////////
1:     @MBeanInfo("Portion of memory from the broker memory limit for this destination")
1:     void setMemoryUsagePortion(@MBeanInfo("bytes") float value);
1:     @MBeanInfo("A list of all messages in the destination. Not HTML friendly.")
1:     List<?> browseMessages() throws InvalidSelectorException;
1:     @MBeanInfo("A list of all messages in the destination based on an SQL-92 selection on the message headers or XPATH on the body. Not HTML friendly.")
1:     List<?> browseMessages(String selector) throws InvalidSelectorException;
0:     @MBeanInfo("The longest time a message has been held this destination.")
0:     @MBeanInfo("The shortest time a message has been held this destination.")
0:     @MBeanInfo("Average time a message has been held this destination.")
0:     @MBeanInfo("Producers are flow controlled")
1:     public void setProducerFlowControl(@MBeanInfo("producerFlowControl") boolean producerFlowControl);
1:     @MBeanInfo("Maximum number of producers to audit") 
1:     public void setMaxProducersToAudit(@MBeanInfo("maxProducersToAudit") int maxProducersToAudit);
1:     @MBeanInfo("Max audit depth")
1:     public void setMaxAuditDepth(@MBeanInfo("maxAuditDepth") int maxAuditDepth);
1:     @MBeanInfo("Maximum number of messages to be paged in")
1:     public void setMaxPageSize(@MBeanInfo("pageSize") int pageSize);
0:     @MBeanInfo("Caching is enabled")
1:     public void setUseCache(@MBeanInfo("cache") boolean value);
0:     @MBeanInfo("returns all the current subscription MBeans matching this destination")
author:Hiram R. Chirino
-------------------------------------------------------------------------------
commit:58aca86
commit:fc00993
/////////////////////////////////////////////////////////////////////////
1: 
1:     String getName();
1: 
1:     /**
0:      * Resets the managment counters.
1:      */
1:     void resetStatistics();
1:      * 
1:     long getEnqueueCount();
1: 
1:      * Returns the number of messages that have been delivered (potentially not
1:      * acknowledged) to consumers.
1:      * 
1:      * @return The number of messages that have been delivered (potentially not
1:      *         acknowledged) to consumers.
1:     long getDispatchCount();
1: 
1:      * Returns the number of messages that have been acknowledged from the
1:      * destination.
1:      * 
1:      * @return The number of messages that have been acknowledged from the
1:      *         destination.
1:     long getDequeueCount();
1:      * 
1:     long getConsumerCount();
1:      * Returns the number of messages in this destination which are yet to be
1:      * consumed
1:      * 
1:      * @return Returns the number of messages in this destination which are yet
1:      *         to be consumed
1:     long getQueueSize();
1:     CompositeData[] browse() throws OpenDataException;
1: 
1:     TabularData browseAsTable() throws OpenDataException;
1: 
1:     /**
1:      * @return An array of all the messages in the destination's queue.
1:      * @throws InvalidSelectorException
1:      */
0:     CompositeData[] browse(String selector) throws OpenDataException, InvalidSelectorException;
1: 
1:     /**
1:      * @return A list of all the messages in the destination's queue.
1:      * @throws InvalidSelectorException
1:      */
0:     TabularData browseAsTable(String selector) throws OpenDataException, InvalidSelectorException;
1:      * 
0:     String sendTextMessage(String body) throws Exception;
1:      * 
1:      * @param headers the message headers and properties to set. Can only
1:      *                container Strings maped to primitive types.
0:     String sendTextMessage(Map headers, String body) throws Exception;
0:     int getMemoryPercentageUsed();
1: 
1:     long getMemoryLimit();
1: 
1:     void setMemoryLimit(long limit);
0:     List browseMessages() throws InvalidSelectorException;
1:      * Browses the current destination with the given selector returning a list
1:      * of messages
0:     List browseMessages(String selector) throws InvalidSelectorException;
1: 
1:     long getMaxEnqueueTime();
1: 
1:     long getMinEnqueueTime();
1: 
1:     double getAverageEnqueueTime();
commit:74a7a8b
/////////////////////////////////////////////////////////////////////////
1: import java.util.List;
1: import java.util.Map;
1: 
commit:230a86c
/////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////
1:  *      http://www.apache.org/licenses/LICENSE-2.0
commit:86cbdfd
/////////////////////////////////////////////////////////////////////////
1: }
commit:57b4941
/////////////////////////////////////////////////////////////////////////
1:  * Licensed to the Apache Software Foundation (ASF) under one or more
1:  * contributor license agreements.  See the NOTICE file distributed with
1:  * this work for additional information regarding copyright ownership.
1:  * The ASF licenses this file to You under the Apache License, Version 2.0
1:  * (the "License"); you may not use this file except in compliance with
1:  * the License.  You may obtain a copy of the License at
commit:944f9d6
/////////////////////////////////////////////////////////////////////////
1: import javax.jms.InvalidSelectorException;
/////////////////////////////////////////////////////////////////////////
1:      * @return An array of all the messages in the destination's queue.
0:      * @throws InvalidSelectorException 
1:      */
0:     public CompositeData[] browse(String selector) throws OpenDataException, InvalidSelectorException;
1:     
1:     /**
1:      * @return A list of all the messages in the destination's queue.
0:      * @throws InvalidSelectorException 
1:      */
0:     public TabularData browseAsTable(String selector) throws OpenDataException, InvalidSelectorException;
1: 
1:     /**
commit:aecbd1c
/////////////////////////////////////////////////////////////////////////
1: /**
1:  *
0:  * Copyright 2005-2006 The Apache Software Foundation
1:  *
0:  * Licensed under the Apache License, Version 2.0 (the "License");
0:  * you may not use this file except in compliance with the License.
0:  * You may obtain a copy of the License at
1:  *
0:  * http://www.apache.org/licenses/LICENSE-2.0
1:  *
1:  * Unless required by applicable law or agreed to in writing, software
1:  * distributed under the License is distributed on an "AS IS" BASIS,
1:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:  * See the License for the specific language governing permissions and
1:  * limitations under the License.
1:  */
1: package org.apache.activemq.broker.jmx;
1: 
0: import java.util.Map;
1: 
1: import javax.management.openmbean.CompositeData;
1: import javax.management.openmbean.OpenDataException;
1: import javax.management.openmbean.TabularData;
1: 
1: 
1: public interface DestinationViewMBean {
1:     
1: 	/**
0: 	 * Resets the managment counters.
1: 	 */
0:     public void resetStatistics();
1: 
1:     /**
1:      * @return The number of messages that have been sent to the destination.
1:      */
0:     public long getEnqueueCount();
1: 
1:     /**
0:      * @return The number of messages that have been received from the destination.
1:      */
0:     public long getDequeueCount();
1: 
1:     /**
0:      * @return The number of consmers subscribed to messages from this destination.
1:      */
0:     public long getConsumerCount();
1: 
1:     /**
0:      * @return The number of messages being buffered by this destination
1:      */
0:     public long getQueueSize();
1:     
1:     /**
0:      * @return An array of all the messages in the destination's queue.
1:      */
0:     public CompositeData[] browse() throws OpenDataException;
1:     
1:     /**
0:      * @return A list of all the messages in the destination's queue.
1:      */
0:     public TabularData browseAsTable() throws OpenDataException;
1: 
1:     /**
1:      * Sends a TextMesage to the destination.
1:      * @param body the text to send
1:      * @return the message id of the message sent.
1:      * @throws Exception
1:      */
0:     public String sendTextMessage(String body) throws Exception;
1: 
1:     /**
1:      * Sends a TextMesage to the destination.
0:      * @param headers the message headers and properties to set.  Can only container Strings maped to primitive types.
1:      * @param body the text to send
1:      * @return the message id of the message sent.
1:      * @throws Exception
1:      */
0:     public String sendTextMessage(Map headers, String body) throws Exception;
1: 
0:     public int getMemoryPercentageUsed();
0:     public long getMemoryLimit();
0:     public void setMemoryLimit(long limit);
1: 
commit:36722d8
/////////////////////////////////////////////////////////////////////////
0: 
0:     public int getMemoryPercentageUsed();
0:     public long getMemoryLimit();
0:     public void setMemoryLimit(long limit);
0: 
commit:07d4e8c
/////////////////////////////////////////////////////////////////////////
1: /**
1:  *
0:  * Copyright 2005-2006 The Apache Software Foundation
1:  *
0:  * Licensed under the Apache License, Version 2.0 (the "License");
0:  * you may not use this file except in compliance with the License.
0:  * You may obtain a copy of the License at
1:  *
0:  * http://www.apache.org/licenses/LICENSE-2.0
1:  *
0:  * Unless required by applicable law or agreed to in writing, software
0:  * distributed under the License is distributed on an "AS IS" BASIS,
0:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
0:  * See the License for the specific language governing permissions and
0:  * limitations under the License.
1:  */
0: package org.apache.activemq.broker.jmx;
0: 
0: import java.util.Map;
0: 
0: import javax.management.openmbean.CompositeData;
0: import javax.management.openmbean.OpenDataException;
0: import javax.management.openmbean.TabularData;
0: 
0: 
0: public interface DestinationViewMBean {
0:     
1: 	/**
0: 	 * Resets the managment counters.
1: 	 */
0:     public void resetStatistics();
0: 
1:     /**
0:      * @return The number of messages that have been sent to the destination.
1:      */
0:     public long getEnqueueCount();
0: 
1:     /**
0:      * @return The number of messages that have been received from the destination.
1:      */
0:     public long getDequeueCount();
0: 
1:     /**
0:      * @return The number of consmers subscribed to messages from this destination.
1:      */
0:     public long getConsumerCount();
0: 
1:     /**
0:      * @return The number of messages being buffered by this destination
1:      */
0:     public long getQueueSize();
0:     
1:     /**
0:      * @return An array of all the messages in the destination's queue.
1:      */
0:     public CompositeData[] browse() throws OpenDataException;
0:     
1:     /**
0:      * @return A list of all the messages in the destination's queue.
1:      */
0:     public TabularData browseAsTable() throws OpenDataException;
0: 
1:     /**
0:      * Sends a TextMesage to the destination.
0:      * @param body the text to send
0:      * @return the message id of the message sent.
0:      * @throws Exception
1:      */
0:     public String sendTextMessage(String body) throws Exception;
0: 
1:     /**
0:      * Sends a TextMesage to the destination.
0:      * @param headers the message headers and properties to set.  Can only container Strings maped to primitive types.
0:      * @param body the text to send
0:      * @return the message id of the message sent.
0:      * @throws Exception
1:      */
0:     public String sendTextMessage(Map headers, String body) throws Exception;
0: }
commit:e6f5d30
commit:48b4869
/////////////////////////////////////////////////////////////////////////
0:  * Copyright 2005-2006 The Apache Software Foundation
commit:d29ca2a
/////////////////////////////////////////////////////////////////////////
0: /**
0:  *
0:  * Copyright 2004 The Apache Software Foundation
0:  *
0:  * Licensed under the Apache License, Version 2.0 (the "License");
0:  * you may not use this file except in compliance with the License.
0:  * You may obtain a copy of the License at
0:  *
0:  * http://www.apache.org/licenses/LICENSE-2.0
0:  *
0:  * Unless required by applicable law or agreed to in writing, software
0:  * distributed under the License is distributed on an "AS IS" BASIS,
0:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
0:  * See the License for the specific language governing permissions and
0:  * limitations under the License.
0:  */
0: package org.apache.activemq.broker.jmx;
0: 
0: 
0: public interface DestinationViewMBean {
0:     
0:     public void gc();
0:     public void resetStatistics();
0: 
0:     public long getEnqueueCount();
0:     public long getDequeueCount();
0:     public long getConsumerCount();
0:     public long getMessages();
0:     public long getMessagesCached();
0: 
0: }
author:Timothy A. Bish
-------------------------------------------------------------------------------
commit:90eb05c
/////////////////////////////////////////////////////////////////////////
0: 
/////////////////////////////////////////////////////////////////////////
0:      *
/////////////////////////////////////////////////////////////////////////
0:      *
/////////////////////////////////////////////////////////////////////////
0:      *
0: 
0:      *
/////////////////////////////////////////////////////////////////////////
0:      *
0: 
0:      *
0: 
/////////////////////////////////////////////////////////////////////////
0:      *
/////////////////////////////////////////////////////////////////////////
0:      *
/////////////////////////////////////////////////////////////////////////
0:      *
/////////////////////////////////////////////////////////////////////////
0: 
0:      *
/////////////////////////////////////////////////////////////////////////
1:      * @return the amount of memory currently used by this destination
0:      */
0:     @MBeanInfo("Memory usage, in bytes, used by undelivered messages")
1:     long getMemoryUsageByteCount();
0: 
0:     /**
/////////////////////////////////////////////////////////////////////////
0: 
0: 
/////////////////////////////////////////////////////////////////////////
0: 
0: 
0: 
0: 
0:     public void setAlwaysRetroactive(@MBeanInfo("alwaysRetroactive") boolean alwaysRetroactive);
0: 
0:      *
0:      *
0: 
0:     @MBeanInfo("Maximum number of producers to audit")
0: 
0: 
0: 
0: 
0:      * @return the maximum number of message to be paged into the
0: 
0: 
0: 
0: 
/////////////////////////////////////////////////////////////////////////
0:      *
author:Colin W Macnaughton
-------------------------------------------------------------------------------
commit:48764be
/////////////////////////////////////////////////////////////////////////
0:     
1:      * Set's the interval at which warnings about producers being blocked by
1:      * resource usage will be triggered. Values of 0 or less will disable
1:      * warnings
0:      * 
1:      * @param blockedProducerWarningInterval the interval at which warning about
1:      *            blocked producers will be triggered.
0:      */
1:     public void setBlockedProducerWarningInterval(@MBeanInfo("blockedProducerWarningInterval")  long blockedProducerWarningInterval);
0: 
0:     /**
0:      * 
1:      * @return the interval at which warning about blocked producers will be
1:      *         triggered.
0:      */
1:     @MBeanInfo("Blocked Producer Warning Interval")
1:     public long getBlockedProducerWarningInterval();
0:     
0:     /**
author:James Strachan
-------------------------------------------------------------------------------
commit:947659c
/////////////////////////////////////////////////////////////////////////
0: import java.io.IOException;
0: import javax.management.ObjectName;
0: import javax.management.MalformedObjectNameException;
/////////////////////////////////////////////////////////////////////////
0:     /**
1:      * Returns all the current subscription MBeans matching this destination
0:      * 
1:      * @return the names of the subscriptions for this destination
0:      */
1:     ObjectName[] getSubscriptions() throws IOException, MalformedObjectNameException;
0: 
commit:2632922
/////////////////////////////////////////////////////////////////////////
1:      * Returns the number of messages that have been sent to the destination.
0:      *
0:      * Returns the number of messages that have been delivered (potentially not acknowledged) to consumers.
0:      *
0:      * Returns the number of messages that have been acknowledged from the destination.
0:      *
1:      * Returns the number of consumers subscribed this destination.
0:      *
1:      * @return The number of consumers subscribed this destination.
0:      * Returns the number of messages in this destination which are yet to be consumed
0:      *
0:      * @return Returns the number of messages in this destination which are yet to be consumed
commit:9b07e43
/////////////////////////////////////////////////////////////////////////
0: import java.util.List;
0: import java.util.Map;
0: 
/////////////////////////////////////////////////////////////////////////
0:     /**
1:      * Browses the current destination returning a list of messages
0:      */
0:     public List browseMessages() throws InvalidSelectorException;
0: 
0:     /**
0:      * Browses the current destination with the given selector returning a list of messages
0:      */
0:     public List browseMessages(String selector) throws InvalidSelectorException;
0: 
commit:d680ba1
/////////////////////////////////////////////////////////////////////////
0:     /**
1:      * Returns the name of this destination
0:      */
0:     public String getName();
0:     
author:Jonas B. Lim
-------------------------------------------------------------------------------
commit:36de58b
/////////////////////////////////////////////////////////////////////////
0:     
0:      * @return The number of messages that have been delivered (potentially not acknowledged) to consumers.
0:      */
0:     public long getDispatchCount();
0:     
0:     /**
0:      * @return The number of messages that have been acknowledged from the destination.
============================================================================