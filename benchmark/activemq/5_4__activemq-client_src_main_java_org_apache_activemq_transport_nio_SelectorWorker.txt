1:885c379: /**
1:885c379:  * Licensed to the Apache Software Foundation (ASF) under one or more
1:885c379:  * contributor license agreements.  See the NOTICE file distributed with
1:885c379:  * this work for additional information regarding copyright ownership.
1:885c379:  * The ASF licenses this file to You under the Apache License, Version 2.0
1:885c379:  * (the "License"); you may not use this file except in compliance with
1:885c379:  * the License.  You may obtain a copy of the License at
2:885c379:  *
1:230a86c:  *      http://www.apache.org/licenses/LICENSE-2.0
1:885c379:  *
1:885c379:  * Unless required by applicable law or agreed to in writing, software
1:885c379:  * distributed under the License is distributed on an "AS IS" BASIS,
1:885c379:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:885c379:  * See the License for the specific language governing permissions and
1:885c379:  * limitations under the License.
1:885c379:  */
1:885c379: package org.apache.activemq.transport.nio;
23:885c379: 
1:885c379: import java.io.IOException;
1:885c379: import java.nio.channels.SelectionKey;
1:885c379: import java.nio.channels.Selector;
1:885c379: import java.util.Iterator;
1:885c379: import java.util.Set;
1:662324c: import java.util.concurrent.ConcurrentLinkedQueue;
1:885c379: import java.util.concurrent.atomic.AtomicInteger;
1:885c379: 
1:4535e8f: import org.slf4j.Logger;
1:4535e8f: import org.slf4j.LoggerFactory;
1:4535e8f: 
1:885c379: public class SelectorWorker implements Runnable {
1:f812e34: 
1:4535e8f:     private static final Logger LOG = LoggerFactory.getLogger(SelectorWorker.class);
1:4535e8f: 
1:fc00993:     private static final AtomicInteger NEXT_ID = new AtomicInteger();
1:f812e34: 
1:f812e34:     final SelectorManager manager;
1:f812e34:     final Selector selector;
1:f812e34:     final int id = NEXT_ID.getAndIncrement();
1:fc00993:     private final int maxChannelsPerWorker;
1:662324c: 
1:662324c:     final AtomicInteger retainCounter = new AtomicInteger(1);
1:662324c:     private final ConcurrentLinkedQueue<Runnable> ioTasks = new ConcurrentLinkedQueue<Runnable>();
1:5adbafe: 
1:f812e34:     public SelectorWorker(SelectorManager manager) throws IOException {
1:f812e34:         this.manager = manager;
1:f812e34:         selector = Selector.open();
1:f812e34:         maxChannelsPerWorker = manager.getMaxChannelsPerWorker();
1:662324c:         manager.getSelectorExecutor().execute(this);
1:3634d64:     }
1:662324c: 
1:662324c:     void retain() {
1:662324c:         if (retainCounter.incrementAndGet() == maxChannelsPerWorker) {
1:f812e34:             manager.onWorkerFullEvent(this);
4:f812e34:         }
1:f812e34:     }
1:662324c: 
1:662324c:     void release() {
1:662324c:         int use = retainCounter.decrementAndGet();
1:662324c:         if (use == 0) {
2:f812e34:             manager.onWorkerEmptyEvent(this);
1:3cbe3f1:         } else if (use == maxChannelsPerWorker - 1) {
1:f812e34:             manager.onWorkerNotFullEvent(this);
1:f812e34:         }
1:f812e34:     }
1:662324c: 
1:5adbafe:     boolean isReleased() {
1:5adbafe:         return retainCounter.get() == 0;
1:5adbafe:     }
1:662324c: 
1:662324c:     public void addIoTask(Runnable work) {
1:662324c:         ioTasks.add(work);
1:662324c:         selector.wakeup();
1:662324c:     }
1:5adbafe: 
1:662324c:     private void processIoTasks() {
1:5adbafe:         Runnable task;
1:5adbafe:         while ((task = ioTasks.poll()) != null) {
1:662324c:             try {
1:662324c:                 task.run();
1:662324c:             } catch (Throwable e) {
1:4535e8f:                 LOG.debug(e.getMessage(), e);
1:662324c:             }
1:662324c:         }
1:662324c:     }
1:662324c: 
1:5adbafe:     @Override
1:f812e34:     public void run() {
1:662324c: 
1:f812e34:         String origName = Thread.currentThread().getName();
1:662324c:         try {
1:f812e34:             Thread.currentThread().setName("Selector Worker: " + id);
1:662324c:             while (!isReleased()) {
1:5adbafe: 
1:5adbafe:                 processIoTasks();
1:5adbafe: 
1:5adbafe:                 int count = selector.select(10);
1:5adbafe: 
1:fc00993:                 if (count == 0) {
1:3634d64:                     continue;
1:fc00993:                 }
1:662324c: 
1:f812e34:                 // Get a java.util.Set containing the SelectionKey objects
1:f812e34:                 // for all channels that are ready for I/O.
1:5adbafe:                 Set<SelectionKey> keys = selector.selectedKeys();
1:f812e34: 
1:5adbafe:                 for (Iterator<SelectionKey> i = keys.iterator(); i.hasNext();) {
1:5adbafe:                     final SelectionKey key = i.next();
1:f812e34:                     i.remove();
1:f812e34: 
1:5adbafe:                     final SelectorSelection s = (SelectorSelection) key.attachment();
1:f812e34:                     try {
1:5adbafe:                         if (key.isValid()) {
1:662324c:                             key.interestOps(0);
1:662324c:                         }
1:f812e34: 
1:f812e34:                         // Kick off another thread to find newly selected keys
1:f812e34:                         // while we process the
1:f812e34:                         // currently selected keys
1:f812e34:                         manager.getChannelExecutor().execute(new Runnable() {
1:5adbafe:                             @Override
1:f812e34:                             public void run() {
1:f812e34:                                 try {
1:f812e34:                                     s.onSelect();
1:f812e34:                                     s.enable();
1:662324c:                                 } catch (Throwable e) {
1:f812e34:                                     s.onError(e);
1:fc00993:                                 }
1:f812e34:                             }
1:f812e34:                         });
1:f812e34: 
1:5adbafe:                     } catch (Throwable e) {
1:f812e34:                         s.onError(e);
1:f812e34:                     }
1:f812e34:                 }
1:f812e34:             }
2:f812e34:         } catch (Throwable e) {
1:662324c:             e.printStackTrace();
1:f812e34:             // Notify all the selections that the error occurred.
1:5adbafe:             Set<SelectionKey> keys = selector.keys();
1:5adbafe:             for (Iterator<SelectionKey> i = keys.iterator(); i.hasNext();) {
1:5adbafe:                 SelectionKey key = i.next();
1:5adbafe:                 SelectorSelection s = (SelectorSelection) key.attachment();
1:f812e34:                 s.onError(e);
1:f812e34:             }
1:f812e34:         } finally {
1:f812e34:             try {
1:662324c:                 manager.onWorkerEmptyEvent(this);
1:662324c:                 selector.close();
1:662324c:             } catch (IOException ignore) {
1:4535e8f:                 LOG.debug(ignore.getMessage(), ignore);
1:662324c:             }
1:f812e34:             Thread.currentThread().setName(origName);
1:f812e34:         }
1:f812e34:     }
1:f812e34: }
============================================================================
author:Christopher L. Shannon (cshannon)
-------------------------------------------------------------------------------
commit:4535e8f
/////////////////////////////////////////////////////////////////////////
1: import org.slf4j.Logger;
1: import org.slf4j.LoggerFactory;
1: 
1:     private static final Logger LOG = LoggerFactory.getLogger(SelectorWorker.class);
1: 
/////////////////////////////////////////////////////////////////////////
1:                 LOG.debug(e.getMessage(), e);
/////////////////////////////////////////////////////////////////////////
1:                 LOG.debug(ignore.getMessage(), ignore);
author:Timothy Bish
-------------------------------------------------------------------------------
commit:5adbafe
/////////////////////////////////////////////////////////////////////////
1: 
/////////////////////////////////////////////////////////////////////////
1:     boolean isReleased() {
1:         return retainCounter.get() == 0;
1:     }
1: 
1:         Runnable task;
1:         while ((task = ioTasks.poll()) != null) {
/////////////////////////////////////////////////////////////////////////
1:     @Override
1: 
1:                 processIoTasks();
1: 
1:                 int count = selector.select(10);
1: 
1:                 Set<SelectionKey> keys = selector.selectedKeys();
1:                 for (Iterator<SelectionKey> i = keys.iterator(); i.hasNext();) {
1:                     final SelectionKey key = i.next();
1:                     final SelectorSelection s = (SelectorSelection) key.attachment();
1:                         if (key.isValid()) {
/////////////////////////////////////////////////////////////////////////
1:                             @Override
/////////////////////////////////////////////////////////////////////////
1:         } catch (Throwable e) {
1:             Set<SelectionKey> keys = selector.keys();
1:             for (Iterator<SelectionKey> i = keys.iterator(); i.hasNext();) {
1:                 SelectionKey key = i.next();
1:                 SelectorSelection s = (SelectorSelection) key.attachment();
/////////////////////////////////////////////////////////////////////////
0:                 ignore.printStackTrace();
author:Hiram R. Chirino
-------------------------------------------------------------------------------
commit:9a8f6e4
commit:3634d64
/////////////////////////////////////////////////////////////////////////
0:     private boolean processIoTasks() {
0:         boolean rc = false;
0:                 rc = true;
0:         return rc;
/////////////////////////////////////////////////////////////////////////
0:                 if( processIoTasks() ) {
1:                     continue;
1:                 }
commit:662324c
/////////////////////////////////////////////////////////////////////////
1: import java.util.concurrent.ConcurrentLinkedQueue;
/////////////////////////////////////////////////////////////////////////
1: 
1:     final AtomicInteger retainCounter = new AtomicInteger(1);
1:     private final ConcurrentLinkedQueue<Runnable> ioTasks = new ConcurrentLinkedQueue<Runnable>();
1:         manager.getSelectorExecutor().execute(this);
1:     void retain() {
1:         if (retainCounter.incrementAndGet() == maxChannelsPerWorker) {
1:     void release() {
1:         int use = retainCounter.decrementAndGet();
1:         if (use == 0) {
0:         } else if (use < maxChannelsPerWorker) {
1:     
0:     boolean isReleased() {
0:         return retainCounter.get()==0;
1: 
1:     public void addIoTask(Runnable work) {
1:         ioTasks.add(work);
1:         selector.wakeup();
1:     }
1:     
1:     private void processIoTasks() {
0:         Runnable task; 
0:         while( (task= ioTasks.poll()) !=null ) {
1:             try {
1:                 task.run();
1:             } catch (Throwable e) {
1:                 e.printStackTrace();
1:             }
1:         }
1:     }
1: 
1:     
1: 
1:             while (!isReleased()) {
0:                 processIoTasks();
/////////////////////////////////////////////////////////////////////////
0:                         if( key.isValid() ) {
1:                             key.interestOps(0);
1:                         }
/////////////////////////////////////////////////////////////////////////
1:             
1:         } catch (Throwable e) {
/////////////////////////////////////////////////////////////////////////
1:             try {
1:                 manager.onWorkerEmptyEvent(this);
1:                 selector.close();
1:             } catch (IOException ignore) {
1:             }
commit:fc00993
/////////////////////////////////////////////////////////////////////////
1:     private static final AtomicInteger NEXT_ID = new AtomicInteger();
1:     private final int maxChannelsPerWorker;
/////////////////////////////////////////////////////////////////////////
1:                 if (count == 0) {
1:                 }
0:                 if (!isRunning()) {
1:                 }
commit:f812e34
/////////////////////////////////////////////////////////////////////////
0:     private final static AtomicInteger NEXT_ID = new AtomicInteger();
1:     final SelectorManager manager;
1:     final Selector selector;
1:     final int id = NEXT_ID.getAndIncrement();
0:     final AtomicInteger useCounter = new AtomicInteger();
0:     final private int maxChannelsPerWorker;
1:     public SelectorWorker(SelectorManager manager) throws IOException {
1:         this.manager = manager;
1:         selector = Selector.open();
1:         maxChannelsPerWorker = manager.getMaxChannelsPerWorker();
1:     }
0:     void incrementUseCounter() {
0:         int use = useCounter.getAndIncrement();
0:         if (use == 0) {
0:             manager.getSelectorExecutor().execute(this);
0:         } else if (use + 1 == maxChannelsPerWorker) {
1:             manager.onWorkerFullEvent(this);
1:         }
1:     }
0:     void decrementUseCounter() {
0:         int use = useCounter.getAndDecrement();
0:         if (use == 1) {
1:             manager.onWorkerEmptyEvent(this);
0:         } else if (use == maxChannelsPerWorker) {
1:             manager.onWorkerNotFullEvent(this);
1:         }
1:     }
0:     boolean isRunning() {
0:         return useCounter.get() != 0;
1:     }
1:     public void run() {
1:         String origName = Thread.currentThread().getName();
1:         try {
1:             Thread.currentThread().setName("Selector Worker: " + id);
0:             while (isRunning()) {
0:                 int count = selector.select(10);
0:                 if (count == 0)
0:                     continue;
0:                 if (!isRunning())
0:                     return;
1:                 // Get a java.util.Set containing the SelectionKey objects
1:                 // for all channels that are ready for I/O.
0:                 Set keys = selector.selectedKeys();
0:                 for (Iterator i = keys.iterator(); i.hasNext();) {
0:                     final SelectionKey key = (SelectionKey)i.next();
1:                     i.remove();
0:                     final SelectorSelection s = (SelectorSelection)key.attachment();
1:                     try {
0:                         s.disable();
1:                         // Kick off another thread to find newly selected keys
1:                         // while we process the
1:                         // currently selected keys
1:                         manager.getChannelExecutor().execute(new Runnable() {
1:                             public void run() {
1:                                 try {
1:                                     s.onSelect();
1:                                     s.enable();
1:                                 } catch (Throwable e) {
1:                                     s.onError(e);
1:                                 }
1:                             }
1:                         });
1: 
1:                     } catch (Throwable e) {
1:                         s.onError(e);
1:                     }
1: 
1:                 }
1: 
1:             }
0:         } catch (IOException e) {
1: 
0:             // Don't accept any more slections
1:             manager.onWorkerEmptyEvent(this);
1: 
1:             // Notify all the selections that the error occurred.
0:             Set keys = selector.keys();
0:             for (Iterator i = keys.iterator(); i.hasNext();) {
0:                 SelectionKey key = (SelectionKey)i.next();
0:                 SelectorSelection s = (SelectorSelection)key.attachment();
1:                 s.onError(e);
1:             }
1: 
1:         } finally {
1:             Thread.currentThread().setName(origName);
1:         }
1:     }
1: }
commit:230a86c
/////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////
1:  *      http://www.apache.org/licenses/LICENSE-2.0
commit:885c379
/////////////////////////////////////////////////////////////////////////
1: /**
1:  *
1:  * Licensed to the Apache Software Foundation (ASF) under one or more
1:  * contributor license agreements.  See the NOTICE file distributed with
1:  * this work for additional information regarding copyright ownership.
1:  * The ASF licenses this file to You under the Apache License, Version 2.0
1:  * (the "License"); you may not use this file except in compliance with
1:  * the License.  You may obtain a copy of the License at
1:  *
0:  * http://www.apache.org/licenses/LICENSE-2.0
1:  *
1:  * Unless required by applicable law or agreed to in writing, software
1:  * distributed under the License is distributed on an "AS IS" BASIS,
1:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:  * See the License for the specific language governing permissions and
1:  * limitations under the License.
1:  */
1: package org.apache.activemq.transport.nio;
1: 
1: import java.io.IOException;
1: import java.nio.channels.SelectionKey;
1: import java.nio.channels.Selector;
1: import java.util.Iterator;
1: import java.util.Set;
1: import java.util.concurrent.atomic.AtomicInteger;
1: 
1: 
1: public class SelectorWorker implements Runnable {
1: 
0: 	private final static AtomicInteger NEXT_ID = new AtomicInteger();
1: 
0: 	final SelectorManager manager;
0: 	final Selector selector;
0: 	final int id = NEXT_ID.getAndIncrement(); 
0: 	final AtomicInteger useCounter = new AtomicInteger();
0: 	final private int maxChannelsPerWorker;
1: 
1: 
0: 	public SelectorWorker(SelectorManager manager) throws IOException {
0: 		this.manager = manager;
0: 		selector = Selector.open();
0: 		maxChannelsPerWorker = manager.getMaxChannelsPerWorker();
0: 	}
1: 	
0: 	void incrementUseCounter() {
0: 		int use = useCounter.getAndIncrement();
0: 		if( use == 0 ) {
0: 			manager.getSelectorExecutor().execute(this);
0: 		} else if( use+1 == maxChannelsPerWorker ) {
0: 			manager.onWorkerFullEvent(this);
0: 		}
0: 	}
1: 
0: 	void decrementUseCounter() {
0: 		int use = useCounter.getAndDecrement();
0: 		if (use == 1) {
0: 			manager.onWorkerEmptyEvent(this);
0: 		} else if (use == maxChannelsPerWorker ) {
0: 			manager.onWorkerNotFullEvent(this);
0: 		}
0: 	}
1: 
0: 	boolean isRunning() {
0: 		return useCounter.get()!=0;
0: 	}
1: 
0: 	public void run() {
1: 
0: 		String origName = Thread.currentThread().getName();
0: 		try {
0: 			Thread.currentThread().setName("Selector Worker: " + id);
0: 			while (isRunning()) {
1: 
0: 				int count = selector.select(10);
0: 				if (count == 0)
0: 					continue;
1: 				
0: 				if (!isRunning())
0: 					return;
1: 
0: 				// Get a java.util.Set containing the SelectionKey objects
0: 				// for all channels that are ready for I/O.
0: 				Set keys = selector.selectedKeys();
1: 
0: 				for (Iterator i = keys.iterator(); i.hasNext();) {
0: 					final SelectionKey key = (SelectionKey) i.next();
0: 					i.remove();
1: 
0: 					final SelectorSelection s = (SelectorSelection) key.attachment();
0: 					try {
0: 						s.disable();
1: 						
0: 						// Kick off another thread to find newly selected keys while we process the 
0: 						// currently selected keys                
0: 						manager.getChannelExecutor().execute(new Runnable() {
0: 							public void run() {
0: 								try {
0: 									s.onSelect();
0: 									s.enable();
0: 								} catch (Throwable e) {
0: 									s.onError(e);
0: 								}
0: 							}
0: 						});
1: 						
0: 					} catch ( Throwable e ) {
0: 						s.onError(e);
0: 					}
1: 					
0: 				}
1: 
0: 			}
0: 		} catch (IOException e) {
1: 			
0: 			// Don't accept any more slections
0: 			manager.onWorkerEmptyEvent(this);
1: 
0: 			// Notify all the selections that the error occurred.
0: 			Set keys = selector.keys();
0: 			for (Iterator i = keys.iterator(); i.hasNext();) {
0: 				SelectionKey key = (SelectionKey) i.next();
0: 				SelectorSelection s = (SelectorSelection) key.attachment();
0: 				s.onError(e);
0: 			}
1: 			
0: 		} finally {
0: 			Thread.currentThread().setName(origName);
0: 		}
0: 	}
commit:8e8b820
/////////////////////////////////////////////////////////////////////////
0: /**
0:  *
0:  * Licensed to the Apache Software Foundation (ASF) under one or more
0:  * contributor license agreements.  See the NOTICE file distributed with
0:  * this work for additional information regarding copyright ownership.
0:  * The ASF licenses this file to You under the Apache License, Version 2.0
0:  * (the "License"); you may not use this file except in compliance with
0:  * the License.  You may obtain a copy of the License at
0:  *
0:  * http://www.apache.org/licenses/LICENSE-2.0
0:  *
0:  * Unless required by applicable law or agreed to in writing, software
0:  * distributed under the License is distributed on an "AS IS" BASIS,
0:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
0:  * See the License for the specific language governing permissions and
0:  * limitations under the License.
0:  */
0: package org.apache.activemq.transport.nio;
0: 
0: import java.io.IOException;
0: import java.nio.channels.SelectionKey;
0: import java.nio.channels.Selector;
0: import java.util.Iterator;
0: import java.util.Set;
0: import java.util.concurrent.atomic.AtomicInteger;
0: 
0: 
0: public class SelectorWorker implements Runnable {
0: 
0: 	private final static AtomicInteger NEXT_ID = new AtomicInteger();
0: 
0: 	final SelectorManager manager;
0: 	final Selector selector;
0: 	final int id = NEXT_ID.getAndIncrement(); 
0: 	final AtomicInteger useCounter = new AtomicInteger();
0: 	final private int maxChannelsPerWorker;
0: 
0: 
0: 	public SelectorWorker(SelectorManager manager) throws IOException {
0: 		this.manager = manager;
0: 		selector = Selector.open();
0: 		maxChannelsPerWorker = manager.getMaxChannelsPerWorker();
0: 	}
0: 	
0: 	void incrementUseCounter() {
0: 		int use = useCounter.getAndIncrement();
0: 		if( use == 0 ) {
0: 			manager.getSelectorExecutor().execute(this);
0: 		} else if( use+1 == maxChannelsPerWorker ) {
0: 			manager.onWorkerFullEvent(this);
0: 		}
0: 	}
0: 
0: 	void decrementUseCounter() {
0: 		int use = useCounter.getAndDecrement();
0: 		if (use == 1) {
0: 			manager.onWorkerEmptyEvent(this);
0: 		} else if (use == maxChannelsPerWorker ) {
0: 			manager.onWorkerNotFullEvent(this);
0: 		}
0: 	}
0: 
0: 	boolean isRunning() {
0: 		return useCounter.get()!=0;
0: 	}
0: 
0: 	public void run() {
0: 
0: 		String origName = Thread.currentThread().getName();
0: 		try {
0: 			Thread.currentThread().setName("Selector Worker: " + id);
0: 			while (isRunning()) {
0: 
0: 				int count = selector.select(10);
0: 				if (count == 0)
0: 					continue;
0: 				
0: 				if (!isRunning())
0: 					return;
0: 
0: 				// Get a java.util.Set containing the SelectionKey objects
0: 				// for all channels that are ready for I/O.
0: 				Set keys = selector.selectedKeys();
0: 
0: 				for (Iterator i = keys.iterator(); i.hasNext();) {
0: 					final SelectionKey key = (SelectionKey) i.next();
0: 					i.remove();
0: 
0: 					final SelectorSelection s = (SelectorSelection) key.attachment();
0: 					try {
0: 						s.disable();
0: 						
0: 						// Kick off another thread to find newly selected keys while we process the 
0: 						// currently selected keys                
0: 						manager.getChannelExecutor().execute(new Runnable() {
0: 							public void run() {
0: 								try {
0: 									s.onSelect();
0: 									s.enable();
0: 								} catch (Throwable e) {
0: 									s.onError(e);
0: 								}
0: 							}
0: 						});
0: 						
0: 					} catch ( Throwable e ) {
0: 						s.onError(e);
0: 					}
0: 					
0: 				}
0: 
0: 			}
0: 		} catch (IOException e) {
0: 			
0: 			// Don't accept any more slections
0: 			manager.onWorkerEmptyEvent(this);
0: 
0: 			// Notify all the selections that the error occurred.
0: 			Set keys = selector.keys();
0: 			for (Iterator i = keys.iterator(); i.hasNext();) {
0: 				SelectionKey key = (SelectionKey) i.next();
0: 				SelectorSelection s = (SelectorSelection) key.attachment();
0: 				s.onError(e);
0: 			}
0: 			
0: 		} finally {
0: 			Thread.currentThread().setName(origName);
0: 		}
0: 	}
0: }
author:Bosanac Dejan
-------------------------------------------------------------------------------
commit:3cbe3f1
/////////////////////////////////////////////////////////////////////////
1:         } else if (use == maxChannelsPerWorker - 1) {
/////////////////////////////////////////////////////////////////////////
0:     private void processIoTasks() {
/////////////////////////////////////////////////////////////////////////
0:             	
0:             	processIoTasks();
0:             	
0:             	int count = selector.select(10);
0:             	
/////////////////////////////////////////////////////////////////////////
0:         } catch (Throwable e) {         	
0:             e.printStackTrace();
/////////////////////////////////////////////////////////////////////////
0:             	ignore.printStackTrace();
commit:db68273
/////////////////////////////////////////////////////////////////////////
0: import java.nio.channels.ClosedSelectorException;
/////////////////////////////////////////////////////////////////////////
0:                 lockBarrier();
0:                 
/////////////////////////////////////////////////////////////////////////
0:         } catch (ClosedSelectorException cse) {
0:             // Don't accept any more selections
0:             manager.onWorkerEmptyEvent(this);
commit:a9e7e94
/////////////////////////////////////////////////////////////////////////
0:             // Don't accept any more selections
/////////////////////////////////////////////////////////////////////////
0:     public void close() throws IOException {
0:         selector.close();
0:     }
author:Gary Tully
-------------------------------------------------------------------------------
commit:63baaf0
/////////////////////////////////////////////////////////////////////////
0: 
0: import java.util.concurrent.locks.ReadWriteLock;
0: import java.util.concurrent.locks.ReentrantReadWriteLock;
/////////////////////////////////////////////////////////////////////////
0:     private final ReadWriteLock selectorLock = new ReentrantReadWriteLock();
0:        
/////////////////////////////////////////////////////////////////////////
0:                 
0:                 lockBarrier();       	
/////////////////////////////////////////////////////////////////////////
0: 
0:     private void lockBarrier() {
0:         selectorLock.writeLock().lock();
0:         selectorLock.writeLock().unlock();
0: 	}
0: 
0:     public void lock() {
0:         selectorLock.readLock().lock();
0:         selector.wakeup();
0:     }
0: 
0: 	public void unlock() {
0: 	    selectorLock.readLock().unlock();
0: 	}
0: 	
============================================================================