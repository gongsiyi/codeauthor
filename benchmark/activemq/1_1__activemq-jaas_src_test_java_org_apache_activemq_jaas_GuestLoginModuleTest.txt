1:d3ec081: /**
1:d3ec081:  * Licensed to the Apache Software Foundation (ASF) under one or more
1:d3ec081:  * contributor license agreements.  See the NOTICE file distributed with
1:d3ec081:  * this work for additional information regarding copyright ownership.
1:d3ec081:  * The ASF licenses this file to You under the Apache License, Version 2.0
1:d3ec081:  * (the "License"); you may not use this file except in compliance with
1:d3ec081:  * the License.  You may obtain a copy of the License at
1:d3ec081:  *
1:d3ec081:  *      http://www.apache.org/licenses/LICENSE-2.0
1:d3ec081:  *
1:d3ec081:  * Unless required by applicable law or agreed to in writing, software
1:d3ec081:  * distributed under the License is distributed on an "AS IS" BASIS,
1:d3ec081:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:d3ec081:  * See the License for the specific language governing permissions and
1:d3ec081:  * limitations under the License.
1:d3ec081:  */
1:d3ec081: package org.apache.activemq.jaas;
1:d3ec081: 
1:d3ec081: import java.io.IOException;
1:d3ec081: import java.net.URL;
1:d3ec081: import java.util.Set;
1:d3ec081: 
1:d3ec081: import javax.security.auth.Subject;
1:d3ec081: import javax.security.auth.callback.Callback;
1:d3ec081: import javax.security.auth.callback.CallbackHandler;
1:d3ec081: import javax.security.auth.callback.UnsupportedCallbackException;
1:d3ec081: import javax.security.auth.login.LoginContext;
1:d3ec081: import javax.security.auth.login.LoginException;
1:d3ec081: 
1:d3ec081: import junit.framework.TestCase;
1:d3ec081: 
1:d3ec081: 
1:d3ec081: /**
1:d3ec081:  * @version $Rev: $ $Date: $
1:d3ec081:  */
1:d3ec081: public class GuestLoginModuleTest extends TestCase {
1:d3ec081: 
1:d3ec081:     static {
1:d3ec081:         String path = System.getProperty("java.security.auth.login.config");
1:d3ec081:         if (path == null) {
1:d3ec081:             URL resource = GuestLoginModuleTest.class.getClassLoader().getResource("login.config");
1:d3ec081:             if (resource != null) {
1:d3ec081:                 path = resource.getFile();
1:d3ec081:                 System.setProperty("java.security.auth.login.config", path);
1:d3ec081:             }
1:d3ec081:         }
1:d3ec081:     }
1:d3ec081: 
1:d3ec081:     public void testLogin() throws LoginException {
1:d3ec081:         LoginContext context = new LoginContext("GuestLogin", new CallbackHandler() {
1:d3ec081:             public void handle(Callback[] callbacks) throws IOException, UnsupportedCallbackException {
1:d3ec081:                 assertEquals("Should have no Callbacks", 0, callbacks.length);
1:d3ec081:             }
1:d3ec081:         });
1:d3ec081:         context.login();
1:d3ec081: 
1:d3ec081:         Subject subject = context.getSubject();
1:d3ec081: 
1:d3ec081:         assertEquals("Should have two principals", 2, subject.getPrincipals().size());
1:d3ec081:         assertEquals("Should have one user principal", 1, subject.getPrincipals(UserPrincipal.class).size());
1:d3ec081:         assertTrue("User principal is 'foo'",subject.getPrincipals(UserPrincipal.class).contains(new UserPrincipal("foo")));
1:d3ec081: 
1:d3ec081:         assertEquals("Should have one group principal", 1, subject.getPrincipals(GroupPrincipal.class).size());
1:d3ec081:         assertTrue("Group principal is 'bar'", subject.getPrincipals(GroupPrincipal.class).contains(new GroupPrincipal("bar")));
1:d3ec081: 
1:d3ec081:         context.logout();
1:d3ec081: 
1:d3ec081:         assertEquals("Should have zero principals", 0, subject.getPrincipals().size());
1:d3ec081:     }
1:d3ec081: 
1:d3ec081:     public void testLoginWithDefaults() throws LoginException {
1:d3ec081:         LoginContext context = new LoginContext("GuestLoginWithDefaults", new CallbackHandler() {
1:d3ec081:             public void handle(Callback[] callbacks) throws IOException, UnsupportedCallbackException {
1:d3ec081:                 assertEquals("Should have no Callbacks", 0, callbacks.length);
1:d3ec081:             }
1:d3ec081:         });
1:d3ec081:         context.login();
1:d3ec081: 
1:d3ec081:         Subject subject = context.getSubject();
1:d3ec081: 
1:d3ec081:         assertEquals("Should have two principals", 2, subject.getPrincipals().size());
1:d3ec081:         assertEquals("Should have one user principal", 1, subject.getPrincipals(UserPrincipal.class).size());
1:d3ec081:         assertTrue("User principal is 'guest'",subject.getPrincipals(UserPrincipal.class).contains(new UserPrincipal("guest")));
1:d3ec081: 
1:d3ec081:         assertEquals("Should have one group principal", 1, subject.getPrincipals(GroupPrincipal.class).size());
1:d3ec081:         assertTrue("Group principal is 'guests'", subject.getPrincipals(GroupPrincipal.class).contains(new GroupPrincipal("guests")));
1:d3ec081: 
1:d3ec081:         context.logout();
1:d3ec081: 
1:d3ec081:         assertEquals("Should have zero principals", 0, subject.getPrincipals().size());
1:d3ec081:     }
1:d3ec081: }
============================================================================
author:Robert Davies
-------------------------------------------------------------------------------
commit:d3ec081
/////////////////////////////////////////////////////////////////////////
1: /**
1:  * Licensed to the Apache Software Foundation (ASF) under one or more
1:  * contributor license agreements.  See the NOTICE file distributed with
1:  * this work for additional information regarding copyright ownership.
1:  * The ASF licenses this file to You under the Apache License, Version 2.0
1:  * (the "License"); you may not use this file except in compliance with
1:  * the License.  You may obtain a copy of the License at
1:  *
1:  *      http://www.apache.org/licenses/LICENSE-2.0
1:  *
1:  * Unless required by applicable law or agreed to in writing, software
1:  * distributed under the License is distributed on an "AS IS" BASIS,
1:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:  * See the License for the specific language governing permissions and
1:  * limitations under the License.
1:  */
1: package org.apache.activemq.jaas;
1: 
1: import java.io.IOException;
1: import java.net.URL;
1: import java.util.Set;
1: 
1: import javax.security.auth.Subject;
1: import javax.security.auth.callback.Callback;
1: import javax.security.auth.callback.CallbackHandler;
1: import javax.security.auth.callback.UnsupportedCallbackException;
1: import javax.security.auth.login.LoginContext;
1: import javax.security.auth.login.LoginException;
1: 
1: import junit.framework.TestCase;
1: 
1: 
1: /**
1:  * @version $Rev: $ $Date: $
1:  */
1: public class GuestLoginModuleTest extends TestCase {
1: 
1:     static {
1:         String path = System.getProperty("java.security.auth.login.config");
1:         if (path == null) {
1:             URL resource = GuestLoginModuleTest.class.getClassLoader().getResource("login.config");
1:             if (resource != null) {
1:                 path = resource.getFile();
1:                 System.setProperty("java.security.auth.login.config", path);
1:             }
1:         }
1:     }
1: 
1:     public void testLogin() throws LoginException {
1:         LoginContext context = new LoginContext("GuestLogin", new CallbackHandler() {
1:             public void handle(Callback[] callbacks) throws IOException, UnsupportedCallbackException {
1:                 assertEquals("Should have no Callbacks", 0, callbacks.length);
1:             }
1:         });
1:         context.login();
1: 
1:         Subject subject = context.getSubject();
1: 
1:         assertEquals("Should have two principals", 2, subject.getPrincipals().size());
1:         assertEquals("Should have one user principal", 1, subject.getPrincipals(UserPrincipal.class).size());
1:         assertTrue("User principal is 'foo'",subject.getPrincipals(UserPrincipal.class).contains(new UserPrincipal("foo")));
1: 
1:         assertEquals("Should have one group principal", 1, subject.getPrincipals(GroupPrincipal.class).size());
1:         assertTrue("Group principal is 'bar'", subject.getPrincipals(GroupPrincipal.class).contains(new GroupPrincipal("bar")));
1: 
1:         context.logout();
1: 
1:         assertEquals("Should have zero principals", 0, subject.getPrincipals().size());
1:     }
1: 
1:     public void testLoginWithDefaults() throws LoginException {
1:         LoginContext context = new LoginContext("GuestLoginWithDefaults", new CallbackHandler() {
1:             public void handle(Callback[] callbacks) throws IOException, UnsupportedCallbackException {
1:                 assertEquals("Should have no Callbacks", 0, callbacks.length);
1:             }
1:         });
1:         context.login();
1: 
1:         Subject subject = context.getSubject();
1: 
1:         assertEquals("Should have two principals", 2, subject.getPrincipals().size());
1:         assertEquals("Should have one user principal", 1, subject.getPrincipals(UserPrincipal.class).size());
1:         assertTrue("User principal is 'guest'",subject.getPrincipals(UserPrincipal.class).contains(new UserPrincipal("guest")));
1: 
1:         assertEquals("Should have one group principal", 1, subject.getPrincipals(GroupPrincipal.class).size());
1:         assertTrue("Group principal is 'guests'", subject.getPrincipals(GroupPrincipal.class).contains(new GroupPrincipal("guests")));
1: 
1:         context.logout();
1: 
1:         assertEquals("Should have zero principals", 0, subject.getPrincipals().size());
1:     }
1: }
============================================================================