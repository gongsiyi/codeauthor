1:fddbac2: /*
1:fddbac2:  * Licensed to the Apache Software Foundation (ASF) under one or more
1:fddbac2:  * contributor license agreements.  See the NOTICE file distributed with
1:fddbac2:  * this work for additional information regarding copyright ownership.
1:fddbac2:  * The ASF licenses this file to You under the Apache License, Version 2.0
1:fddbac2:  * (the "License"); you may not use this file except in compliance with
1:fddbac2:  * the License.  You may obtain a copy of the License at
1:fddbac2:  *
1:fddbac2:  *      http://www.apache.org/licenses/LICENSE-2.0
1:fddbac2:  *
1:fddbac2:  * Unless required by applicable law or agreed to in writing, software
1:fddbac2:  * distributed under the License is distributed on an "AS IS" BASIS,
1:fddbac2:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:fddbac2:  * See the License for the specific language governing permissions and
1:fddbac2:  * limitations under the License.
1:fddbac2:  */
1:fddbac2: package org.apache.activemq.transport.amqp.client.util;
1:fddbac2: 
1:fddbac2: import java.lang.reflect.InvocationHandler;
1:fddbac2: import java.lang.reflect.InvocationTargetException;
1:fddbac2: import java.lang.reflect.Method;
1:fddbac2: import java.nio.ByteBuffer;
1:fddbac2: import java.util.ArrayList;
1:fddbac2: import java.util.Collections;
1:fddbac2: import java.util.Map;
1:fddbac2: 
1:fddbac2: import org.apache.qpid.proton.engine.Connection;
1:fddbac2: import org.apache.qpid.proton.engine.Delivery;
1:fddbac2: import org.apache.qpid.proton.engine.Link;
1:fddbac2: import org.apache.qpid.proton.engine.Receiver;
1:fddbac2: import org.apache.qpid.proton.engine.Sasl;
1:fddbac2: import org.apache.qpid.proton.engine.Sender;
1:fddbac2: import org.apache.qpid.proton.engine.Session;
1:fddbac2: import org.apache.qpid.proton.engine.Transport;
1:fddbac2: 
1:fddbac2: /**
1:fddbac2:  * Utility that creates proxy objects for the Proton objects which
1:fddbac2:  * won't allow any mutating operations to be applied so that the test
1:fddbac2:  * code does not interact with the proton engine outside the client
1:fddbac2:  * serialization thread.
1:fddbac2:  */
1:fddbac2: public final class UnmodifiableProxy {
1:fddbac2: 
1:fddbac2:     private static ArrayList<String> blacklist = new ArrayList<>();
1:fddbac2: 
1:fddbac2:     // These methods are mutating but don't take an arguments so they
1:fddbac2:     // aren't automatically filtered out.  We will have to keep an eye
1:fddbac2:     // on proton API in the future and modify this list as it evolves.
1:fddbac2:     static {
1:fddbac2:         blacklist.add("close");
1:fddbac2:         blacklist.add("free");
1:fddbac2:         blacklist.add("open");
1:fddbac2:         blacklist.add("sasl");
1:fddbac2:         blacklist.add("session");
1:fddbac2:         blacklist.add("close_head");
1:fddbac2:         blacklist.add("close_tail");
1:fddbac2:         blacklist.add("outputConsumed");
1:fddbac2:         blacklist.add("process");
1:fddbac2:         blacklist.add("processInput");
1:fddbac2:         blacklist.add("unbind");
1:fddbac2:         blacklist.add("settle");
1:fddbac2:         blacklist.add("clear");
1:fddbac2:         blacklist.add("detach");
1:fddbac2:         blacklist.add("abort");
1:fddbac2:     }
1:fddbac2: 
1:fddbac2:     private UnmodifiableProxy() {}
1:fddbac2: 
1:fddbac2:     public static Transport transportProxy(final Transport target) {
1:fddbac2:         Transport wrap = wrap(Transport.class, target);
1:fddbac2:         return wrap;
1:fddbac2:     }
1:fddbac2: 
1:fddbac2:     public static Sasl saslProxy(final Sasl target) {
1:fddbac2:         return wrap(Sasl.class, target);
1:fddbac2:     }
1:fddbac2: 
1:fddbac2:     public static Connection connectionProxy(final Connection target) {
1:fddbac2:         return wrap(Connection.class, target);
1:fddbac2:     }
1:fddbac2: 
1:fddbac2:     public static Session sessionProxy(final Session target) {
1:fddbac2:         return wrap(Session.class, target);
1:fddbac2:     }
1:fddbac2: 
1:fddbac2:     public static Delivery deliveryProxy(final Delivery target) {
1:fddbac2:         return wrap(Delivery.class, target);
1:fddbac2:     }
1:fddbac2: 
1:fddbac2:     public static Link linkProxy(final Link target) {
1:fddbac2:         return wrap(Link.class, target);
1:fddbac2:     }
1:fddbac2: 
1:fddbac2:     public static Receiver receiverProxy(final Receiver target) {
1:fddbac2:        return wrap(Receiver.class, target);
1:fddbac2:     }
1:fddbac2: 
1:fddbac2:     public static Sender senderProxy(final Sender target) {
1:fddbac2:         return wrap(Sender.class, target);
1:fddbac2:     }
1:fddbac2: 
1:fddbac2:     private static boolean isProtonType(Class<?> clazz) {
1:fddbac2:         String packageName = clazz.getPackage().getName();
1:fddbac2: 
1:fddbac2:         if (packageName.startsWith("org.apache.qpid.proton.")) {
1:fddbac2:             return true;
1:fddbac2:         }
1:fddbac2: 
1:fddbac2:         return false;
1:fddbac2:     }
1:fddbac2: 
1:fddbac2:     private static <T> T wrap(Class<T> type, final Object target) {
1:fddbac2:         return type.cast(java.lang.reflect.Proxy.newProxyInstance(type.getClassLoader(), new Class[]{type}, new InvocationHandler() {
1:fddbac2:             @Override
1:fddbac2:             public Object invoke(Object o, Method method, Object[] objects) throws Throwable {
1:fddbac2:                 if ("toString".equals(method.getName()) && method.getParameterTypes().length == 0) {
1:fddbac2:                     return "Unmodifiable proxy -> (" + method.invoke(target, objects) + ")";
1:fddbac2:                 }
1:fddbac2: 
1:fddbac2:                 // Don't let methods that mutate be invoked.
1:fddbac2:                 if (method.getParameterTypes().length > 0) {
1:fddbac2:                     throw new UnsupportedOperationException("Cannot mutate outside the Client work thread");
1:fddbac2:                 }
1:fddbac2: 
1:fddbac2:                 if (blacklist.contains(method.getName())) {
1:fddbac2:                     throw new UnsupportedOperationException("Cannot mutate outside the Client work thread");
1:fddbac2:                 }
1:fddbac2: 
1:fddbac2:                 Class<?> returnType = method.getReturnType();
1:fddbac2: 
1:fddbac2:                 try {
1:fddbac2:                     Object result = method.invoke(target, objects);
1:fddbac2:                     if (result == null) {
1:fddbac2:                         return null;
1:fddbac2:                     }
1:fddbac2: 
1:fddbac2:                     if (returnType.isPrimitive() || returnType.isArray() || Object.class.equals(returnType)) {
1:fddbac2:                         // Skip any other checks
1:fddbac2:                     } else if (returnType.isAssignableFrom(ByteBuffer.class)) {
1:fddbac2:                         // Buffers are modifiable but we can just return null to indicate
1:fddbac2:                         // there's nothing there to access.
1:fddbac2:                         result = null;
1:fddbac2:                     } else if (returnType.isAssignableFrom(Map.class)) {
1:fddbac2:                         // Prevent return of modifiable maps
1:fddbac2:                         result = Collections.unmodifiableMap((Map<?, ?>) result);
1:fddbac2:                     } else if (isProtonType(returnType) && returnType.isInterface()) {
1:fddbac2: 
1:fddbac2:                         // Can't handle the crazy Source / Target types yet as there's two
1:fddbac2:                         // different types for Source and Target the result can't be cast to
1:fddbac2:                         // the one people actually want to use.
1:fddbac2:                         if (!returnType.getName().equals("org.apache.qpid.proton.amqp.transport.Source") &&
1:fddbac2:                             !returnType.getName().equals("org.apache.qpid.proton.amqp.messaging.Source") &&
1:fddbac2:                             !returnType.getName().equals("org.apache.qpid.proton.amqp.transport.Target") &&
1:fddbac2:                             !returnType.getName().equals("org.apache.qpid.proton.amqp.messaging.Target")) {
1:fddbac2: 
1:fddbac2:                             result = wrap(returnType, result);
1:fddbac2:                         }
1:fddbac2:                     }
1:fddbac2: 
1:fddbac2:                     return result;
1:fddbac2:                 } catch (InvocationTargetException e) {
1:fddbac2:                     throw e.getTargetException();
1:fddbac2:                 }
1:fddbac2:             }
1:fddbac2:         }));
1:fddbac2:     }
1:fddbac2: }
============================================================================
author:Timothy Bish
-------------------------------------------------------------------------------
commit:fddbac2
/////////////////////////////////////////////////////////////////////////
1: /*
1:  * Licensed to the Apache Software Foundation (ASF) under one or more
1:  * contributor license agreements.  See the NOTICE file distributed with
1:  * this work for additional information regarding copyright ownership.
1:  * The ASF licenses this file to You under the Apache License, Version 2.0
1:  * (the "License"); you may not use this file except in compliance with
1:  * the License.  You may obtain a copy of the License at
1:  *
1:  *      http://www.apache.org/licenses/LICENSE-2.0
1:  *
1:  * Unless required by applicable law or agreed to in writing, software
1:  * distributed under the License is distributed on an "AS IS" BASIS,
1:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:  * See the License for the specific language governing permissions and
1:  * limitations under the License.
1:  */
1: package org.apache.activemq.transport.amqp.client.util;
1: 
1: import java.lang.reflect.InvocationHandler;
1: import java.lang.reflect.InvocationTargetException;
1: import java.lang.reflect.Method;
1: import java.nio.ByteBuffer;
1: import java.util.ArrayList;
1: import java.util.Collections;
1: import java.util.Map;
1: 
1: import org.apache.qpid.proton.engine.Connection;
1: import org.apache.qpid.proton.engine.Delivery;
1: import org.apache.qpid.proton.engine.Link;
1: import org.apache.qpid.proton.engine.Receiver;
1: import org.apache.qpid.proton.engine.Sasl;
1: import org.apache.qpid.proton.engine.Sender;
1: import org.apache.qpid.proton.engine.Session;
1: import org.apache.qpid.proton.engine.Transport;
1: 
1: /**
1:  * Utility that creates proxy objects for the Proton objects which
1:  * won't allow any mutating operations to be applied so that the test
1:  * code does not interact with the proton engine outside the client
1:  * serialization thread.
1:  */
1: public final class UnmodifiableProxy {
1: 
1:     private static ArrayList<String> blacklist = new ArrayList<>();
1: 
1:     // These methods are mutating but don't take an arguments so they
1:     // aren't automatically filtered out.  We will have to keep an eye
1:     // on proton API in the future and modify this list as it evolves.
1:     static {
1:         blacklist.add("close");
1:         blacklist.add("free");
1:         blacklist.add("open");
1:         blacklist.add("sasl");
1:         blacklist.add("session");
1:         blacklist.add("close_head");
1:         blacklist.add("close_tail");
1:         blacklist.add("outputConsumed");
1:         blacklist.add("process");
1:         blacklist.add("processInput");
1:         blacklist.add("unbind");
1:         blacklist.add("settle");
1:         blacklist.add("clear");
1:         blacklist.add("detach");
1:         blacklist.add("abort");
1:     }
1: 
1:     private UnmodifiableProxy() {}
1: 
1:     public static Transport transportProxy(final Transport target) {
1:         Transport wrap = wrap(Transport.class, target);
1:         return wrap;
1:     }
1: 
1:     public static Sasl saslProxy(final Sasl target) {
1:         return wrap(Sasl.class, target);
1:     }
1: 
1:     public static Connection connectionProxy(final Connection target) {
1:         return wrap(Connection.class, target);
1:     }
1: 
1:     public static Session sessionProxy(final Session target) {
1:         return wrap(Session.class, target);
1:     }
1: 
1:     public static Delivery deliveryProxy(final Delivery target) {
1:         return wrap(Delivery.class, target);
1:     }
1: 
1:     public static Link linkProxy(final Link target) {
1:         return wrap(Link.class, target);
1:     }
1: 
1:     public static Receiver receiverProxy(final Receiver target) {
1:        return wrap(Receiver.class, target);
1:     }
1: 
1:     public static Sender senderProxy(final Sender target) {
1:         return wrap(Sender.class, target);
1:     }
1: 
1:     private static boolean isProtonType(Class<?> clazz) {
1:         String packageName = clazz.getPackage().getName();
1: 
1:         if (packageName.startsWith("org.apache.qpid.proton.")) {
1:             return true;
1:         }
1: 
1:         return false;
1:     }
1: 
1:     private static <T> T wrap(Class<T> type, final Object target) {
1:         return type.cast(java.lang.reflect.Proxy.newProxyInstance(type.getClassLoader(), new Class[]{type}, new InvocationHandler() {
1:             @Override
1:             public Object invoke(Object o, Method method, Object[] objects) throws Throwable {
1:                 if ("toString".equals(method.getName()) && method.getParameterTypes().length == 0) {
1:                     return "Unmodifiable proxy -> (" + method.invoke(target, objects) + ")";
1:                 }
1: 
1:                 // Don't let methods that mutate be invoked.
1:                 if (method.getParameterTypes().length > 0) {
1:                     throw new UnsupportedOperationException("Cannot mutate outside the Client work thread");
1:                 }
1: 
1:                 if (blacklist.contains(method.getName())) {
1:                     throw new UnsupportedOperationException("Cannot mutate outside the Client work thread");
1:                 }
1: 
1:                 Class<?> returnType = method.getReturnType();
1: 
1:                 try {
1:                     Object result = method.invoke(target, objects);
1:                     if (result == null) {
1:                         return null;
1:                     }
1: 
1:                     if (returnType.isPrimitive() || returnType.isArray() || Object.class.equals(returnType)) {
1:                         // Skip any other checks
1:                     } else if (returnType.isAssignableFrom(ByteBuffer.class)) {
1:                         // Buffers are modifiable but we can just return null to indicate
1:                         // there's nothing there to access.
1:                         result = null;
1:                     } else if (returnType.isAssignableFrom(Map.class)) {
1:                         // Prevent return of modifiable maps
1:                         result = Collections.unmodifiableMap((Map<?, ?>) result);
1:                     } else if (isProtonType(returnType) && returnType.isInterface()) {
1: 
1:                         // Can't handle the crazy Source / Target types yet as there's two
1:                         // different types for Source and Target the result can't be cast to
1:                         // the one people actually want to use.
1:                         if (!returnType.getName().equals("org.apache.qpid.proton.amqp.transport.Source") &&
1:                             !returnType.getName().equals("org.apache.qpid.proton.amqp.messaging.Source") &&
1:                             !returnType.getName().equals("org.apache.qpid.proton.amqp.transport.Target") &&
1:                             !returnType.getName().equals("org.apache.qpid.proton.amqp.messaging.Target")) {
1: 
1:                             result = wrap(returnType, result);
1:                         }
1:                     }
1: 
1:                     return result;
1:                 } catch (InvocationTargetException e) {
1:                     throw e.getTargetException();
1:                 }
1:             }
1:         }));
1:     }
1: }
============================================================================