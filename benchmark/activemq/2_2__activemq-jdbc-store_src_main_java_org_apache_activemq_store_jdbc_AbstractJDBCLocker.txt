1:efaa351: /**
1:efaa351:  * Licensed to the Apache Software Foundation (ASF) under one or more
1:efaa351:  * contributor license agreements.  See the NOTICE file distributed with
1:efaa351:  * this work for additional information regarding copyright ownership.
1:efaa351:  * The ASF licenses this file to You under the Apache License, Version 2.0
1:efaa351:  * (the "License"); you may not use this file except in compliance with
1:efaa351:  * the License.  You may obtain a copy of the License at
1:efaa351:  *
1:efaa351:  *      http://www.apache.org/licenses/LICENSE-2.0
1:efaa351:  *
1:efaa351:  * Unless required by applicable law or agreed to in writing, software
1:efaa351:  * distributed under the License is distributed on an "AS IS" BASIS,
1:efaa351:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:efaa351:  * See the License for the specific language governing permissions and
1:efaa351:  * limitations under the License.
1:efaa351:  */
1:efaa351: package org.apache.activemq.store.jdbc;
1:efaa351: 
1:efaa351: import java.io.IOException;
1:efaa351: import java.sql.Connection;
1:efaa351: import java.sql.SQLException;
1:efaa351: import java.sql.Statement;
1:efaa351: import javax.sql.DataSource;
1:efaa351: import org.apache.activemq.broker.AbstractLocker;
1:efaa351: import org.apache.activemq.store.PersistenceAdapter;
1:efaa351: import org.slf4j.Logger;
1:efaa351: import org.slf4j.LoggerFactory;
1:efaa351: 
1:efaa351: public abstract class AbstractJDBCLocker extends AbstractLocker {
1:efaa351:     private static final Logger LOG = LoggerFactory.getLogger(AbstractJDBCLocker.class);
1:efaa351:     protected DataSource dataSource;
1:8a8fcb6:     private Statements statements;
1:8a8fcb6:     protected JDBCPersistenceAdapter jdbcAdapter;
1:efaa351: 
1:efaa351:     protected boolean createTablesOnStartup;
1:efaa351:     protected int queryTimeout = -1;
1:efaa351: 
1:efaa351:     public void configure(PersistenceAdapter adapter) throws IOException {
1:efaa351:         if (adapter instanceof JDBCPersistenceAdapter) {
1:8a8fcb6:             this.jdbcAdapter = (JDBCPersistenceAdapter) adapter;
1:efaa351:             this.dataSource = ((JDBCPersistenceAdapter) adapter).getLockDataSource();
1:8a8fcb6:             // we cannot get the statements (yet) as they may be configured later
1:efaa351:         }
1:efaa351:     }
1:efaa351: 
1:8a8fcb6:     protected Statements getStatements() {
1:8a8fcb6:         if (statements == null && jdbcAdapter != null) {
1:8a8fcb6:             statements = jdbcAdapter.getStatements();
1:8a8fcb6:         }
1:8a8fcb6:         return statements;
1:8a8fcb6:     }
1:8a8fcb6: 
1:efaa351:     public void setDataSource(DataSource dataSource) {
1:efaa351:         this.dataSource = dataSource;
1:efaa351:     }
1:efaa351: 
1:efaa351:     public void setStatements(Statements statements) {
1:efaa351:         this.statements = statements;
1:efaa351:     }
1:efaa351: 
1:efaa351:     protected void setQueryTimeout(Statement statement) throws SQLException {
1:efaa351:         if (queryTimeout > 0) {
1:efaa351:             statement.setQueryTimeout(queryTimeout);
1:efaa351:         }
1:efaa351:     }
1:efaa351: 
1:efaa351:     public int getQueryTimeout() {
1:efaa351:         return queryTimeout;
1:efaa351:     }
1:efaa351: 
1:efaa351:     public void setQueryTimeout(int queryTimeout) {
1:efaa351:         this.queryTimeout = queryTimeout;
1:efaa351:     }
1:efaa351: 
1:efaa351:     public void setCreateTablesOnStartup(boolean createTablesOnStartup) {
1:efaa351:         this.createTablesOnStartup = createTablesOnStartup;
1:efaa351:     }
1:efaa351: 
1:efaa351:     protected Connection getConnection() throws SQLException {
1:efaa351:         return dataSource.getConnection();
1:efaa351:     }
1:efaa351: 
1:efaa351:     protected void close(Connection connection) {
1:efaa351:         if (null != connection) {
1:efaa351:             try {
1:efaa351:                 connection.close();
1:efaa351:             } catch (SQLException e1) {
1:efaa351:                 LOG.debug("exception while closing connection: " + e1, e1);
1:efaa351:             }
1:efaa351:         }
1:efaa351:     }
1:efaa351: 
1:efaa351:     protected void close(Statement statement) {
1:efaa351:         if (null != statement) {
1:efaa351:             try {
1:efaa351:                 statement.close();
1:efaa351:             } catch (SQLException e1) {
1:efaa351:                 LOG.debug("exception while closing statement: " + e1, e1);
1:efaa351:             }
1:efaa351:         }
1:efaa351:     }
1:efaa351: 
1:efaa351:     @Override
1:efaa351:     public void preStart() {
1:efaa351:         if (createTablesOnStartup) {
1:8a8fcb6: 
1:8a8fcb6:             String[] createStatements = getStatements().getCreateLockSchemaStatements();
1:efaa351: 
1:efaa351:             Connection connection = null;
1:efaa351:             Statement statement = null;
1:efaa351:             try {
1:efaa351:                 connection = getConnection();
1:efaa351:                 statement = connection.createStatement();
1:efaa351:                 setQueryTimeout(statement);
1:efaa351: 
1:efaa351:                 for (int i = 0; i < createStatements.length; i++) {
1:efaa351:                     LOG.debug("Executing SQL: " + createStatements[i]);
1:efaa351:                     try {
1:efaa351:                         statement.execute(createStatements[i]);
1:efaa351:                     } catch (SQLException e) {
1:efaa351:                         LOG.info("Could not create lock tables; they could already exist." + " Failure was: "
1:efaa351:                                 + createStatements[i] + " Message: " + e.getMessage() + " SQLState: " + e.getSQLState()
1:efaa351:                                 + " Vendor code: " + e.getErrorCode());
1:efaa351:                     }
1:efaa351:                 }
1:efaa351:             } catch (SQLException e) {
1:efaa351:                 LOG.warn("Could not create lock tables; Failure Message: " + e.getMessage() + " SQLState: " + e.getSQLState()
1:efaa351:                         + " Vendor code: " + e.getErrorCode(), e);
1:efaa351:             } finally {
1:efaa351:                 close(statement);
1:efaa351:                 close(connection);
1:efaa351:             }
1:efaa351:         }
1:efaa351:     }
1:efaa351: 
1:efaa351: }
============================================================================
author:Claus Ibsen
-------------------------------------------------------------------------------
commit:8a8fcb6
/////////////////////////////////////////////////////////////////////////
1:     private Statements statements;
1:     protected JDBCPersistenceAdapter jdbcAdapter;
1:             this.jdbcAdapter = (JDBCPersistenceAdapter) adapter;
1:             // we cannot get the statements (yet) as they may be configured later
1:     protected Statements getStatements() {
1:         if (statements == null && jdbcAdapter != null) {
1:             statements = jdbcAdapter.getStatements();
1:         }
1:         return statements;
1:     }
1: 
/////////////////////////////////////////////////////////////////////////
1: 
1:             String[] createStatements = getStatements().getCreateLockSchemaStatements();
author:gtully
-------------------------------------------------------------------------------
commit:efaa351
/////////////////////////////////////////////////////////////////////////
1: /**
1:  * Licensed to the Apache Software Foundation (ASF) under one or more
1:  * contributor license agreements.  See the NOTICE file distributed with
1:  * this work for additional information regarding copyright ownership.
1:  * The ASF licenses this file to You under the Apache License, Version 2.0
1:  * (the "License"); you may not use this file except in compliance with
1:  * the License.  You may obtain a copy of the License at
1:  *
1:  *      http://www.apache.org/licenses/LICENSE-2.0
1:  *
1:  * Unless required by applicable law or agreed to in writing, software
1:  * distributed under the License is distributed on an "AS IS" BASIS,
1:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:  * See the License for the specific language governing permissions and
1:  * limitations under the License.
1:  */
1: package org.apache.activemq.store.jdbc;
1: 
1: import java.io.IOException;
1: import java.sql.Connection;
1: import java.sql.SQLException;
1: import java.sql.Statement;
1: import javax.sql.DataSource;
1: import org.apache.activemq.broker.AbstractLocker;
1: import org.apache.activemq.store.PersistenceAdapter;
1: import org.slf4j.Logger;
1: import org.slf4j.LoggerFactory;
1: 
1: public abstract class AbstractJDBCLocker extends AbstractLocker {
1:     private static final Logger LOG = LoggerFactory.getLogger(AbstractJDBCLocker.class);
1:     protected DataSource dataSource;
0:     protected Statements statements;
1: 
1:     protected boolean createTablesOnStartup;
1:     protected int queryTimeout = -1;
1: 
1:     public void configure(PersistenceAdapter adapter) throws IOException {
1:         if (adapter instanceof JDBCPersistenceAdapter) {
1:             this.dataSource = ((JDBCPersistenceAdapter) adapter).getLockDataSource();
0:             this.statements = ((JDBCPersistenceAdapter) adapter).getStatements();
1:         }
1:     }
1: 
1:     public void setDataSource(DataSource dataSource) {
1:         this.dataSource = dataSource;
1:     }
1: 
1:     public void setStatements(Statements statements) {
1:         this.statements = statements;
1:     }
1: 
1:     protected void setQueryTimeout(Statement statement) throws SQLException {
1:         if (queryTimeout > 0) {
1:             statement.setQueryTimeout(queryTimeout);
1:         }
1:     }
1: 
1:     public int getQueryTimeout() {
1:         return queryTimeout;
1:     }
1: 
1:     public void setQueryTimeout(int queryTimeout) {
1:         this.queryTimeout = queryTimeout;
1:     }
1: 
1:     public void setCreateTablesOnStartup(boolean createTablesOnStartup) {
1:         this.createTablesOnStartup = createTablesOnStartup;
1:     }
1: 
1:     protected Connection getConnection() throws SQLException {
1:         return dataSource.getConnection();
1:     }
1: 
1:     protected void close(Connection connection) {
1:         if (null != connection) {
1:             try {
1:                 connection.close();
1:             } catch (SQLException e1) {
1:                 LOG.debug("exception while closing connection: " + e1, e1);
1:             }
1:         }
1:     }
1: 
1:     protected void close(Statement statement) {
1:         if (null != statement) {
1:             try {
1:                 statement.close();
1:             } catch (SQLException e1) {
1:                 LOG.debug("exception while closing statement: " + e1, e1);
1:             }
1:         }
1:     }
1: 
1:     @Override
1:     public void preStart() {
1:         if (createTablesOnStartup) {
0:             String[] createStatements = this.statements.getCreateLockSchemaStatements();
1: 
1:             Connection connection = null;
1:             Statement statement = null;
1:             try {
1:                 connection = getConnection();
1:                 statement = connection.createStatement();
1:                 setQueryTimeout(statement);
1: 
1:                 for (int i = 0; i < createStatements.length; i++) {
1:                     LOG.debug("Executing SQL: " + createStatements[i]);
1:                     try {
1:                         statement.execute(createStatements[i]);
1:                     } catch (SQLException e) {
1:                         LOG.info("Could not create lock tables; they could already exist." + " Failure was: "
1:                                 + createStatements[i] + " Message: " + e.getMessage() + " SQLState: " + e.getSQLState()
1:                                 + " Vendor code: " + e.getErrorCode());
1:                     }
1:                 }
1:             } catch (SQLException e) {
1:                 LOG.warn("Could not create lock tables; Failure Message: " + e.getMessage() + " SQLState: " + e.getSQLState()
1:                         + " Vendor code: " + e.getErrorCode(), e);
1:             } finally {
1:                 close(statement);
1:                 close(connection);
1:             }
1:         }
1:     }
1: 
1: }
============================================================================