1:d29ca2a: /**
1:57b4941:  * Licensed to the Apache Software Foundation (ASF) under one or more
1:57b4941:  * contributor license agreements.  See the NOTICE file distributed with
1:57b4941:  * this work for additional information regarding copyright ownership.
1:57b4941:  * The ASF licenses this file to You under the Apache License, Version 2.0
1:57b4941:  * (the "License"); you may not use this file except in compliance with
1:57b4941:  * the License.  You may obtain a copy of the License at
3:d29ca2a:  *
1:230a86c:  *      http://www.apache.org/licenses/LICENSE-2.0
1:d29ca2a:  *
1:d29ca2a:  * Unless required by applicable law or agreed to in writing, software
1:d29ca2a:  * distributed under the License is distributed on an "AS IS" BASIS,
1:d29ca2a:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:d29ca2a:  * See the License for the specific language governing permissions and
1:d29ca2a:  * limitations under the License.
1:d29ca2a:  */
1:d29ca2a: package org.apache.activemq.command;
6:d29ca2a: 
1:d29ca2a: import org.apache.activemq.state.CommandVisitor;
1:d29ca2a: 
1:d29ca2a: /**
1:4afa5d6:  * @openwire:marshaller code="22"
1:b0c2a40:  * 
1:d29ca2a:  */
1:d29ca2a: public class MessageAck extends BaseCommand {
1:d29ca2a: 
1:230a86c:     public static final byte DATA_STRUCTURE_TYPE = CommandTypes.MESSAGE_ACK;
1:d29ca2a: 
1:d29ca2a:     /**
1:230a86c:      * Used to let the broker know that the message has been delivered to the
1:230a86c:      * client. Message will still be retained until an standard ack is received.
1:230a86c:      * This is used get the broker to send more messages past prefetch limits
1:230a86c:      * when an standard ack has not been sent.
1:d29ca2a:      */
1:230a86c:     public static final byte DELIVERED_ACK_TYPE = 0;
1:230a86c: 
1:d29ca2a:     /**
1:d29ca2a:      * The standard ack case where a client wants the message to be discarded.
1:d29ca2a:      */
1:230a86c:     public static final byte STANDARD_ACK_TYPE = 2;
1:d29ca2a: 
1:d29ca2a:     /**
1:230a86c:      * In case the client want's to explicitly let the broker know that a
1:230a86c:      * message was not processed and the message was considered a poison
1:230a86c:      * message.
1:d29ca2a:      */
1:230a86c:     public static final byte POSION_ACK_TYPE = 1;
1:230a86c: 
1:c256dcf:     /**
1:c256dcf:      * In case the client want's to explicitly let the broker know that a
1:c256dcf:      * message was not processed and it was re-delivered to the consumer
1:c256dcf:      * but it was not yet considered to be a poison message.  The messageCount 
1:c256dcf:      * field will hold the number of times the message was re-delivered. 
1:c256dcf:      */
1:c256dcf:     public static final byte REDELIVERED_ACK_TYPE = 3;
1:c256dcf:     
1:e10f75c:     /**
1:ab3b155:      * The  ack case where a client wants only an individual message to be discarded.
1:ab3b155:      */
1:ab3b155:     public static final byte INDIVIDUAL_ACK_TYPE = 4;
1:d29ca2a: 
1:3432a75: /**
1:3432a75:      * The ack case where a durable topic subscription does not match a selector.
1:3432a75:      */
1:3432a75:     public static final byte UNMATCHED_ACK_TYPE = 5;
1:d29ca2a: 
1:b136df1:     /**
1:b136df1:      * the case where a consumer does not dispatch because message has expired inflight
1:b136df1:      */
1:b136df1:     public static final byte EXPIRED_ACK_TYPE = 6;
1:b136df1: 
1:d29ca2a:     protected byte ackType;
1:d29ca2a:     protected ConsumerId consumerId;
1:d29ca2a:     protected MessageId firstMessageId;
1:d29ca2a:     protected MessageId lastMessageId;
1:d29ca2a:     protected ActiveMQDestination destination;
1:d29ca2a:     protected TransactionId transactionId;
1:d29ca2a:     protected int messageCount;
1:e10f75c:     protected Throwable poisonCause;
1:230a86c: 
1:d29ca2a:     protected transient String consumerKey;
1:230a86c: 
1:d29ca2a:     public MessageAck() {
1:d29ca2a:     }
1:d29ca2a: 
1:d29ca2a:     public MessageAck(MessageDispatch md, byte ackType, int messageCount) {
1:d29ca2a:         this.ackType = ackType;
1:d29ca2a:         this.consumerId = md.getConsumerId();
1:d29ca2a:         this.destination = md.getDestination();
1:d29ca2a:         this.lastMessageId = md.getMessage().getMessageId();
1:230a86c:         this.messageCount = messageCount;
1:d29ca2a:     }
1:230a86c: 
1:179d95e:     public MessageAck(Message message, byte ackType, int messageCount) {
1:179d95e:         this.ackType = ackType;
1:179d95e:         this.destination = message.getDestination();
1:179d95e:         this.lastMessageId = message.getMessageId();
1:179d95e:         this.messageCount = messageCount;
1:179d95e:     }
1:d29ca2a: 
1:d29ca2a:     public void copy(MessageAck copy) {
1:d29ca2a:         super.copy(copy);
1:d29ca2a:         copy.firstMessageId = firstMessageId;
1:d29ca2a:         copy.lastMessageId = lastMessageId;
1:d29ca2a:         copy.destination = destination;
1:d29ca2a:         copy.transactionId = transactionId;
1:d29ca2a:         copy.ackType = ackType;
1:d29ca2a:         copy.consumerId = consumerId;
1:d29ca2a:     }
1:d29ca2a: 
1:d29ca2a:     public byte getDataStructureType() {
1:d29ca2a:         return DATA_STRUCTURE_TYPE;
1:d29ca2a:     }
1:230a86c: 
1:d29ca2a:     public boolean isMessageAck() {
1:d29ca2a:         return true;
1:d29ca2a:     }
1:d29ca2a: 
1:d29ca2a:     public boolean isPoisonAck() {
1:230a86c:         return ackType == POSION_ACK_TYPE;
1:d29ca2a:     }
1:d29ca2a: 
1:d29ca2a:     public boolean isStandardAck() {
1:230a86c:         return ackType == STANDARD_ACK_TYPE;
1:d29ca2a:     }
1:230a86c: 
1:d29ca2a:     public boolean isDeliveredAck() {
1:230a86c:         return ackType == DELIVERED_ACK_TYPE;
1:d29ca2a:     }
1:c256dcf:     
1:c256dcf:     public boolean isRedeliveredAck() {
1:c256dcf:         return ackType == REDELIVERED_ACK_TYPE;
1:c256dcf:     }
1:230a86c:     
1:ab3b155:     public boolean isIndividualAck() {
1:ab3b155:         return ackType == INDIVIDUAL_ACK_TYPE;
1:d29ca2a:     }
1:d29ca2a: 
1:3432a75:     public boolean isUnmatchedAck() {
1:3432a75:         return ackType == UNMATCHED_ACK_TYPE;
1:3432a75:     }
1:d29ca2a: 
1:b136df1:     public boolean isExpiredAck() {
1:b136df1:         return ackType == EXPIRED_ACK_TYPE;
1:b136df1:     }
1:b136df1: 
1:d29ca2a:     /**
1:d29ca2a:      * @openwire:property version=1 cache=true
1:d29ca2a:      */
1:d29ca2a:     public ActiveMQDestination getDestination() {
1:d29ca2a:         return destination;
1:d29ca2a:     }
1:230a86c: 
1:d29ca2a:     public void setDestination(ActiveMQDestination destination) {
1:d29ca2a:         this.destination = destination;
1:d29ca2a:     }
1:d29ca2a: 
1:d29ca2a:     /**
1:d29ca2a:      * @openwire:property version=1 cache=true
1:d29ca2a:      */
1:d29ca2a:     public TransactionId getTransactionId() {
1:d29ca2a:         return transactionId;
1:230a86c:     }
1:230a86c: 
1:d29ca2a:     public void setTransactionId(TransactionId transactionId) {
1:d29ca2a:         this.transactionId = transactionId;
1:d29ca2a:     }
1:230a86c: 
1:d29ca2a:     public boolean isInTransaction() {
1:230a86c:         return transactionId != null;
1:d29ca2a:     }
1:d29ca2a: 
1:d29ca2a:     /**
1:d29ca2a:      * @openwire:property version=1 cache=true
1:d29ca2a:      */
1:d29ca2a:     public ConsumerId getConsumerId() {
1:d29ca2a:         return consumerId;
1:d29ca2a:     }
1:230a86c: 
1:d29ca2a:     public void setConsumerId(ConsumerId consumerId) {
1:d29ca2a:         this.consumerId = consumerId;
1:d29ca2a:     }
1:230a86c: 
1:d29ca2a:     /**
1:d29ca2a:      * @openwire:property version=1
1:d29ca2a:      */
1:d29ca2a:     public byte getAckType() {
1:d29ca2a:         return ackType;
1:d29ca2a:     }
1:230a86c: 
1:d29ca2a:     public void setAckType(byte ackType) {
1:d29ca2a:         this.ackType = ackType;
1:d29ca2a:     }
1:d29ca2a: 
1:d29ca2a:     /**
1:d29ca2a:      * @openwire:property version=1
1:d29ca2a:      */
1:d29ca2a:     public MessageId getFirstMessageId() {
1:d29ca2a:         return firstMessageId;
1:d29ca2a:     }
1:230a86c: 
1:d29ca2a:     public void setFirstMessageId(MessageId firstMessageId) {
1:d29ca2a:         this.firstMessageId = firstMessageId;
1:d29ca2a:     }
1:d29ca2a: 
1:d29ca2a:     /**
1:d29ca2a:      * @openwire:property version=1
1:d29ca2a:      */
1:d29ca2a:     public MessageId getLastMessageId() {
1:d29ca2a:         return lastMessageId;
1:d29ca2a:     }
1:230a86c: 
1:d29ca2a:     public void setLastMessageId(MessageId lastMessageId) {
1:d29ca2a:         this.lastMessageId = lastMessageId;
1:d29ca2a:     }
1:d29ca2a: 
1:d29ca2a:     /**
1:d29ca2a:      * The number of messages being acknowledged in the range.
1:230a86c:      * 
1:d29ca2a:      * @openwire:property version=1
1:d29ca2a:      */
1:d29ca2a:     public int getMessageCount() {
1:d29ca2a:         return messageCount;
1:d29ca2a:     }
1:230a86c: 
1:d29ca2a:     public void setMessageCount(int messageCount) {
1:d29ca2a:         this.messageCount = messageCount;
1:d29ca2a:     }
1:d29ca2a: 
1:d29ca2a:     /**
1:e10f75c:      * The cause of a poison ack, if a message listener
1:e10f75c:      * throws an exception it will be recorded here
1:d29ca2a:      *
1:e10f75c:      * @openwire:property version=7
1:e10f75c:      */
1:e10f75c:     public Throwable getPoisonCause() {
1:e10f75c:         return poisonCause;
1:d29ca2a:     }
1:d29ca2a: 
1:e10f75c:     public void setPoisonCause(Throwable poisonCause) {
1:e10f75c:         this.poisonCause = poisonCause;
1:e10f75c:     }
1:d29ca2a: 
1:7f5213b:     public Response visit(CommandVisitor visitor) throws Exception {
1:230a86c:         return visitor.processMessageAck(this);
1:e10f75c:     }
1:d29ca2a: 
1:ab3b155:     /**
1:d29ca2a:      * A helper method to allow a single message ID to be acknowledged
1:d29ca2a:      */
1:d29ca2a:     public void setMessageID(MessageId messageID) {
1:d29ca2a:         setFirstMessageId(messageID);
1:d29ca2a:         setLastMessageId(messageID);
1:d29ca2a:         setMessageCount(1);
1:d29ca2a:     }
1:d29ca2a: 
1:d29ca2a: }
============================================================================
author:Hadrian Zbarcea
-------------------------------------------------------------------------------
commit:d54d046
author:gtully
-------------------------------------------------------------------------------
commit:b136df1
/////////////////////////////////////////////////////////////////////////
1:     /**
1:      * the case where a consumer does not dispatch because message has expired inflight
1:      */
1:     public static final byte EXPIRED_ACK_TYPE = 6;
1: 
/////////////////////////////////////////////////////////////////////////
1:     public boolean isExpiredAck() {
1:         return ackType == EXPIRED_ACK_TYPE;
1:     }
1: 
author:Hiram R. Chirino
-------------------------------------------------------------------------------
commit:9a8f6e4
commit:b0c2a40
/////////////////////////////////////////////////////////////////////////
1:  * 
commit:c256dcf
/////////////////////////////////////////////////////////////////////////
1:     /**
1:      * In case the client want's to explicitly let the broker know that a
1:      * message was not processed and it was re-delivered to the consumer
1:      * but it was not yet considered to be a poison message.  The messageCount 
1:      * field will hold the number of times the message was re-delivered. 
1:      */
1:     public static final byte REDELIVERED_ACK_TYPE = 3;
1:     
/////////////////////////////////////////////////////////////////////////
1:     
1:     public boolean isRedeliveredAck() {
1:         return ackType == REDELIVERED_ACK_TYPE;
1:     }
commit:230a86c
/////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////
1:  *      http://www.apache.org/licenses/LICENSE-2.0
/////////////////////////////////////////////////////////////////////////
1:     public static final byte DATA_STRUCTURE_TYPE = CommandTypes.MESSAGE_ACK;
1:      * Used to let the broker know that the message has been delivered to the
1:      * client. Message will still be retained until an standard ack is received.
1:      * This is used get the broker to send more messages past prefetch limits
1:      * when an standard ack has not been sent.
1:     public static final byte DELIVERED_ACK_TYPE = 0;
1: 
1:     public static final byte STANDARD_ACK_TYPE = 2;
1:      * In case the client want's to explicitly let the broker know that a
1:      * message was not processed and the message was considered a poison
1:      * message.
1:     public static final byte POSION_ACK_TYPE = 1;
1: 
/////////////////////////////////////////////////////////////////////////
1: 
1: 
/////////////////////////////////////////////////////////////////////////
1:         this.messageCount = messageCount;
1: 
/////////////////////////////////////////////////////////////////////////
1: 
1:         return ackType == POSION_ACK_TYPE;
1:         return ackType == STANDARD_ACK_TYPE;
1: 
1:         return ackType == DELIVERED_ACK_TYPE;
1: 
1: 
/////////////////////////////////////////////////////////////////////////
1:     }
1: 
1: 
1:         return transactionId != null;
/////////////////////////////////////////////////////////////////////////
1: 
1: 
1: 
/////////////////////////////////////////////////////////////////////////
1: 
/////////////////////////////////////////////////////////////////////////
1: 
1:      * 
1: 
1:         return visitor.processMessageAck(this);
commit:57b4941
/////////////////////////////////////////////////////////////////////////
1:  * Licensed to the Apache Software Foundation (ASF) under one or more
1:  * contributor license agreements.  See the NOTICE file distributed with
1:  * this work for additional information regarding copyright ownership.
1:  * The ASF licenses this file to You under the Apache License, Version 2.0
1:  * (the "License"); you may not use this file except in compliance with
1:  * the License.  You may obtain a copy of the License at
commit:7f5213b
/////////////////////////////////////////////////////////////////////////
1:     public Response visit(CommandVisitor visitor) throws Exception {
commit:48b4869
/////////////////////////////////////////////////////////////////////////
0:  * Copyright 2005-2006 The Apache Software Foundation
commit:d29ca2a
/////////////////////////////////////////////////////////////////////////
1: /**
1:  *
0:  * Copyright 2004 The Apache Software Foundation
1:  *
0:  * Licensed under the Apache License, Version 2.0 (the "License");
0:  * you may not use this file except in compliance with the License.
0:  * You may obtain a copy of the License at
1:  *
0:  * http://www.apache.org/licenses/LICENSE-2.0
1:  *
1:  * Unless required by applicable law or agreed to in writing, software
1:  * distributed under the License is distributed on an "AS IS" BASIS,
1:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:  * See the License for the specific language governing permissions and
1:  * limitations under the License.
1:  */
1: package org.apache.activemq.command;
1: 
1: import org.apache.activemq.state.CommandVisitor;
1: 
1: 
1: /**
1:  * 
0:  * @openwire:marshaller
0:  * @version $Revision: 1.11 $
1:  */
1: public class MessageAck extends BaseCommand {
1: 
0:     public static final byte DATA_STRUCTURE_TYPE=CommandTypes.MESSAGE_ACK;
1: 
1:     /**
0:      * Used to let the broker know that the message has been delivered to the 
0:      * client.  Message will still be retained until an standard ack is received.
0:      * This is used get the broker to send more messages past prefetch limits when
0:      * an standard ack has not been sent.
1:      */
0:     public static final byte DELIVERED_ACK_TYPE=0;
1:     
1:     /**
1:      * The standard ack case where a client wants the message to be discarded.
1:      */
0:     public static final byte STANDARD_ACK_TYPE=2;
1: 
1:     /**
0:      * In case the client want's to explicitly let the broker know that a 
0:      * message was not processed and the message was considered a poison message.
1:      */
0:     public static final byte POSION_ACK_TYPE=1;
1:     
1:     protected byte ackType;
1:     protected ConsumerId consumerId;
1:     protected MessageId firstMessageId;
1:     protected MessageId lastMessageId;
1:     protected ActiveMQDestination destination;
1:     protected TransactionId transactionId;
1:     protected int messageCount;
1:     
1:     protected transient String consumerKey;
1:     
1:     public MessageAck() {
1:     }
1: 
1:     public MessageAck(MessageDispatch md, byte ackType, int messageCount) {
1:         this.ackType = ackType;
1:         this.consumerId = md.getConsumerId();
1:         this.destination = md.getDestination();
1:         this.lastMessageId = md.getMessage().getMessageId();
0:         this.messageCount=messageCount;
1:     }
1:     
1:     public void copy(MessageAck copy) {
1:         super.copy(copy);
1:         copy.firstMessageId = firstMessageId;
1:         copy.lastMessageId = lastMessageId;
1:         copy.destination = destination;
1:         copy.transactionId = transactionId;
1:         copy.ackType = ackType;
1:         copy.consumerId = consumerId;
1:     }
1: 
1: 
1:     public byte getDataStructureType() {
1:         return DATA_STRUCTURE_TYPE;
1:     }
1:     
1:     public boolean isMessageAck() {
1:         return true;
1:     }
1: 
1:     public boolean isPoisonAck() {
0:         return ackType==POSION_ACK_TYPE;
1:     }
1: 
1:     public boolean isStandardAck() {
0:         return ackType==STANDARD_ACK_TYPE;
1:     }
1:     
1:     public boolean isDeliveredAck() {
0:         return ackType==DELIVERED_ACK_TYPE;
1:     }
1:      
1:     /**
1:      * @openwire:property version=1 cache=true
1:      */
1:     public ActiveMQDestination getDestination() {
1:         return destination;
1:     }
1:     public void setDestination(ActiveMQDestination destination) {
1:         this.destination = destination;
1:     }
1: 
1:     /**
1:      * @openwire:property version=1 cache=true
1:      */
1:     public TransactionId getTransactionId() {
1:         return transactionId;
1:     }    
1:     public void setTransactionId(TransactionId transactionId) {
1:         this.transactionId = transactionId;
1:     }
1:     
1:     public boolean isInTransaction() {
0:         return transactionId!=null;
1:     }
1: 
1:     /**
1:      * @openwire:property version=1 cache=true
1:      */
1:     public ConsumerId getConsumerId() {
1:         return consumerId;
1:     }
1:     public void setConsumerId(ConsumerId consumerId) {
1:         this.consumerId = consumerId;
1:     }
1:     
1:     /**
1:      * @openwire:property version=1
1:      */
1:     public byte getAckType() {
1:         return ackType;
1:     }
1:     public void setAckType(byte ackType) {
1:         this.ackType = ackType;
1:     }
1: 
1:     /**
1:      * @openwire:property version=1
1:      */
1:     public MessageId getFirstMessageId() {
1:         return firstMessageId;
1:     }
1:     public void setFirstMessageId(MessageId firstMessageId) {
1:         this.firstMessageId = firstMessageId;
1:     }
1: 
1:     /**
1:      * @openwire:property version=1
1:      */
1:     public MessageId getLastMessageId() {
1:         return lastMessageId;
1:     }
1:     public void setLastMessageId(MessageId lastMessageId) {
1:         this.lastMessageId = lastMessageId;
1:     }
1: 
1:     /**
1:      * The number of messages being acknowledged in the range.
1:      * @openwire:property version=1
1:      */
1:     public int getMessageCount() {
1:         return messageCount;
1:     }
1:     public void setMessageCount(int messageCount) {
1:         this.messageCount = messageCount;
1:     }
1: 
0:     public Response visit(CommandVisitor visitor) throws Throwable {
0:         return visitor.processMessageAck( this );
1:     }
1: 
1:     /**
1:      * A helper method to allow a single message ID to be acknowledged
1:      */
1:     public void setMessageID(MessageId messageID) {
1:         setFirstMessageId(messageID);
1:         setLastMessageId(messageID);
1:         setMessageCount(1);
1:     }
1: 
1: }
author:Gary Tully
-------------------------------------------------------------------------------
commit:179d95e
/////////////////////////////////////////////////////////////////////////
1:     public MessageAck(Message message, byte ackType, int messageCount) {
1:         this.ackType = ackType;
1:         this.destination = message.getDestination();
1:         this.lastMessageId = message.getMessageId();
1:         this.messageCount = messageCount;
1:     }
0: 
commit:e10f75c
/////////////////////////////////////////////////////////////////////////
1:     protected Throwable poisonCause;
/////////////////////////////////////////////////////////////////////////
1:     /**
1:      * The cause of a poison ack, if a message listener
1:      * throws an exception it will be recorded here
0:      *
1:      * @openwire:property version=7
1:      */
1:     public Throwable getPoisonCause() {
1:         return poisonCause;
1:     }
0: 
1:     public void setPoisonCause(Throwable poisonCause) {
1:         this.poisonCause = poisonCause;
1:     }
0: 
commit:3432a75
/////////////////////////////////////////////////////////////////////////
0: 
1: /**
1:      * The ack case where a durable topic subscription does not match a selector.
1:      */
1:     public static final byte UNMATCHED_ACK_TYPE = 5;
0: 
/////////////////////////////////////////////////////////////////////////
1:     public boolean isUnmatchedAck() {
1:         return ackType == UNMATCHED_ACK_TYPE;
1:     }
0: 
author:Robert Davies
-------------------------------------------------------------------------------
commit:ab3b155
/////////////////////////////////////////////////////////////////////////
1:     /**
1:      * The  ack case where a client wants only an individual message to be discarded.
1:      */
1:     public static final byte INDIVIDUAL_ACK_TYPE = 4;
0:     
/////////////////////////////////////////////////////////////////////////
0:     
1:     public boolean isIndividualAck() {
1:         return ackType == INDIVIDUAL_ACK_TYPE;
0:     }
author:James Strachan
-------------------------------------------------------------------------------
commit:4afa5d6
/////////////////////////////////////////////////////////////////////////
1:  * @openwire:marshaller code="22"
============================================================================