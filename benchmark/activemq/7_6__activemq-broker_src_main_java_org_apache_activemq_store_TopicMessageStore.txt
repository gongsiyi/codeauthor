1:d29ca2a: /**
1:fc00993:  * Licensed to the Apache Software Foundation (ASF) under one or more
1:fc00993:  * contributor license agreements.  See the NOTICE file distributed with
1:fc00993:  * this work for additional information regarding copyright ownership.
1:fc00993:  * The ASF licenses this file to You under the Apache License, Version 2.0
1:fc00993:  * (the "License"); you may not use this file except in compliance with
1:fc00993:  * the License.  You may obtain a copy of the License at
2:fc00993:  *
1:fc00993:  *      http://www.apache.org/licenses/LICENSE-2.0
1:b0c2a40:  *
1:fc00993:  * Unless required by applicable law or agreed to in writing, software
1:fc00993:  * distributed under the License is distributed on an "AS IS" BASIS,
1:fc00993:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:fc00993:  * See the License for the specific language governing permissions and
1:fc00993:  * limitations under the License.
1:d29ca2a:  */
1:d29ca2a: package org.apache.activemq.store;
6:d29ca2a: 
1:d29ca2a: import java.io.IOException;
1:5e05df1: 
1:d29ca2a: import javax.jms.JMSException;
1:5e05df1: 
1:d29ca2a: import org.apache.activemq.broker.ConnectionContext;
1:3432a75: import org.apache.activemq.command.MessageAck;
1:d29ca2a: import org.apache.activemq.command.MessageId;
1:d29ca2a: import org.apache.activemq.command.SubscriptionInfo;
1:f812e34: 
1:d29ca2a: /**
1:d29ca2a:  * A MessageStore for durable topic subscriptions
1:d29ca2a:  */
1:f812e34: public interface TopicMessageStore extends MessageStore {
1:5e05df1: 
1:d29ca2a:     /**
1:f812e34:      * Stores the last acknowledged messgeID for the given subscription so that
1:f812e34:      * we can recover and commence dispatching messages from the last checkpoint
1:5e05df1:      *
1:4eef609:      * @param context
1:b6ba20b:      * @param clientId
1:b6ba20b:      * @param subscriptionName
1:d29ca2a:      * @param messageId
1:5e05df1:      * @param ack
1:5e05df1:      *
3:4eef609:      * @throws IOException
1:d29ca2a:      */
1:3432a75:     void acknowledge(ConnectionContext context, String clientId, String subscriptionName, MessageId messageId, MessageAck ack) throws IOException;
1:5e05df1: 
1:d29ca2a:     /**
1:b6ba20b:      * @param clientId
1:b6ba20b:      * @param subscriptionName
1:5e05df1:      *
1:b6ba20b:      * @throws IOException
1:d29ca2a:      * @throws JMSException
1:d29ca2a:      */
1:fc00993:     void deleteSubscription(String clientId, String subscriptionName) throws IOException;
1:d29ca2a: 
1:d29ca2a:     /**
1:f812e34:      * For the new subscription find the last acknowledged message ID and then
1:f812e34:      * find any new messages since then and dispatch them to the subscription.
1:f812e34:      * <p/> e.g. if we dispatched some messages to a new durable topic
1:f812e34:      * subscriber, then went down before acknowledging any messages, we need to
1:f812e34:      * know the correct point from which to recover from.
1:5e05df1:      *
5:4eef609:      * @param clientId
5:4eef609:      * @param subscriptionName
1:4eef609:      * @param listener
1:5e05df1:      *
1:7f5213b:      * @throws Exception
1:d29ca2a:      */
1:fc00993:     void recoverSubscription(String clientId, String subscriptionName, MessageRecoveryListener listener) throws Exception;
1:f812e34: 
1:d29ca2a:     /**
1:f812e34:      * For an active subscription - retrieve messages from the store for the
1:f812e34:      * subscriber after the lastMessageId messageId <p/>
1:5e05df1:      *
1:f812e34:      * @param clientId
1:f812e34:      * @param subscriptionName
1:4eef609:      * @param maxReturned
1:4eef609:      * @param listener
1:5e05df1:      *
2:b6ba20b:      * @throws Exception
1:b6ba20b:      */
1:fc00993:     void recoverNextMessages(String clientId, String subscriptionName, int maxReturned, MessageRecoveryListener listener) throws Exception;
1:d29ca2a: 
1:b6ba20b:     /**
1:64f3492:      * A hint to the Store to reset any batching state for a durable subscriber
1:5e05df1:      *
1:4eef609:      * @param clientId
1:4eef609:      * @param subscriptionName
1:b6ba20b:      */
1:fc00993:     void resetBatching(String clientId, String subscriptionName);
1:d29ca2a: 
1:b6ba20b:     /**
1:f812e34:      * Get the number of messages ready to deliver from the store to a durable
1:f812e34:      * subscriber
1:5e05df1:      *
1:4eef609:      * @param clientId
1:4eef609:      * @param subscriberName
1:5e05df1:      *
1:4eef609:      * @return the outstanding message count
1:5e05df1:      *
1:4eef609:      * @throws IOException
3:4eef609:      */
1:fc00993:     int getMessageCount(String clientId, String subscriberName) throws IOException;
1:f812e34: 
1:cf3d419:     /**
1:cf3d419:      * Get the total size of the messages ready to deliver from the store to the
1:cf3d419:      * durable subscriber
1:cf3d419:      *
1:cf3d419:      * @param clientId
1:cf3d419:      * @param subscriberName
1:cf3d419:      * @return
1:cf3d419:      * @throws IOException
1:cf3d419:      */
1:734fb7d:     long getMessageSize(String clientId, String subscriberName) throws IOException;
1:734fb7d: 
1:9b64c37:     /**
1:cf3d419:      * The subscription metrics contained in this store
1:cf3d419:      *
1:cf3d419:      * @param subscriptionKey
1:cf3d419:      * @return
1:cf3d419:      */
1:cf3d419:     MessageStoreSubscriptionStatistics getMessageStoreSubStatistics();
1:cf3d419: 
1:cf3d419:     /**
1:d29ca2a:      * Finds the subscriber entry for the given consumer info
1:5e05df1:      *
1:4eef609:      * @param clientId
1:4eef609:      * @param subscriptionName
1:5e05df1:      *
1:4eef609:      * @return the SubscriptionInfo
1:5e05df1:      *
1:4eef609:      * @throws IOException
1:9b64c37:      */
1:fc00993:     SubscriptionInfo lookupSubscription(String clientId, String subscriptionName) throws IOException;
1:9b64c37: 
1:d29ca2a:     /**
1:2728ccb:      * Lists all the durable subscriptions for a given destination.
1:5e05df1:      *
1:4eef609:      * @return an array SubscriptionInfos
1:4eef609:      * @throws IOException
1:d29ca2a:      */
1:fc00993:     SubscriptionInfo[] getAllSubscriptions() throws IOException;
1:d29ca2a: 
3:4eef609:     /**
1:f812e34:      * Inserts the subscriber info due to a subscription change <p/> If this is
1:f812e34:      * a new subscription and the retroactive is false, then the last message
1:f812e34:      * sent to the topic should be set as the last message acknowledged by they
1:f812e34:      * new subscription. Otherwise, if retroactive is true, then create the
1:f812e34:      * subscription without it having an acknowledged message so that on
1:f812e34:      * recovery, all message recorded for the topic get replayed.
1:5e05df1:      *
1:5e05df1:      * @param subscriptionInfo
1:4eef609:      * @param retroactive
1:5e05df1:      *
1:4eef609:      * @throws IOException
1:d29ca2a:      */
1:c0090f6:     void addSubscription(SubscriptionInfo subscriptionInfo, boolean retroactive) throws IOException;
1:d29ca2a: }
============================================================================
author:Hadrian Zbarcea
-------------------------------------------------------------------------------
commit:d54d046
author:Christopher L. Shannon (cshannon)
-------------------------------------------------------------------------------
commit:cf3d419
/////////////////////////////////////////////////////////////////////////
1:     /**
1:      * Get the total size of the messages ready to deliver from the store to the
1:      * durable subscriber
1:      *
1:      * @param clientId
1:      * @param subscriberName
1:      * @return
1:      * @throws IOException
1:      */
1:      * The subscription metrics contained in this store
1:      *
1:      * @param subscriptionKey
1:      * @return
1:      */
1:     MessageStoreSubscriptionStatistics getMessageStoreSubStatistics();
1: 
1:     /**
commit:734fb7d
/////////////////////////////////////////////////////////////////////////
1:     long getMessageSize(String clientId, String subscriberName) throws IOException;
1: 
author:Timothy Bish
-------------------------------------------------------------------------------
commit:5e05df1
/////////////////////////////////////////////////////////////////////////
1: 
1: 
/////////////////////////////////////////////////////////////////////////
1: 
1:      *
1:      * @param ack
1:      *
1: 
1:      *
/////////////////////////////////////////////////////////////////////////
1:      *
1:      *
/////////////////////////////////////////////////////////////////////////
1:      *
1:      *
1:      *
/////////////////////////////////////////////////////////////////////////
1:      *
1:      *
1:      *
1:      *
1:      *
1:      *
1:      *
/////////////////////////////////////////////////////////////////////////
1:      *
1:      * @param subscriptionInfo
1:      *
author:Claus Ibsen
-------------------------------------------------------------------------------
commit:c0090f6
/////////////////////////////////////////////////////////////////////////
1:     void addSubscription(SubscriptionInfo subscriptionInfo, boolean retroactive) throws IOException;
author:Hiram R. Chirino
-------------------------------------------------------------------------------
commit:58aca86
commit:b0c2a40
/////////////////////////////////////////////////////////////////////////
1:  * 
commit:fc00993
/////////////////////////////////////////////////////////////////////////
1:  * Licensed to the Apache Software Foundation (ASF) under one or more
1:  * contributor license agreements.  See the NOTICE file distributed with
1:  * this work for additional information regarding copyright ownership.
1:  * The ASF licenses this file to You under the Apache License, Version 2.0
1:  * (the "License"); you may not use this file except in compliance with
1:  * the License.  You may obtain a copy of the License at
1:  *
1:  *      http://www.apache.org/licenses/LICENSE-2.0
1:  *
1:  * Unless required by applicable law or agreed to in writing, software
1:  * distributed under the License is distributed on an "AS IS" BASIS,
1:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:  * See the License for the specific language governing permissions and
1:  * limitations under the License.
/////////////////////////////////////////////////////////////////////////
0:     void acknowledge(ConnectionContext context, String clientId, String subscriptionName, MessageId messageId) throws IOException;
/////////////////////////////////////////////////////////////////////////
1:     void deleteSubscription(String clientId, String subscriptionName) throws IOException;
/////////////////////////////////////////////////////////////////////////
1:     void recoverSubscription(String clientId, String subscriptionName, MessageRecoveryListener listener) throws Exception;
/////////////////////////////////////////////////////////////////////////
1:     void recoverNextMessages(String clientId, String subscriptionName, int maxReturned, MessageRecoveryListener listener) throws Exception;
1:     void resetBatching(String clientId, String subscriptionName);
/////////////////////////////////////////////////////////////////////////
1:     int getMessageCount(String clientId, String subscriberName) throws IOException;
/////////////////////////////////////////////////////////////////////////
1:     SubscriptionInfo lookupSubscription(String clientId, String subscriptionName) throws IOException;
/////////////////////////////////////////////////////////////////////////
1:     SubscriptionInfo[] getAllSubscriptions() throws IOException;
/////////////////////////////////////////////////////////////////////////
0:     void addSubsciption(SubscriptionInfo subscriptionInfo, boolean retroactive) throws IOException;
commit:f812e34
/////////////////////////////////////////////////////////////////////////
1: 
1: public interface TopicMessageStore extends MessageStore {
1:      * Stores the last acknowledged messgeID for the given subscription so that
1:      * we can recover and commence dispatching messages from the last checkpoint
/////////////////////////////////////////////////////////////////////////
0:     public void acknowledge(ConnectionContext context, String clientId, String subscriptionName,
0:                             MessageId messageId) throws IOException;
/////////////////////////////////////////////////////////////////////////
0:     public void deleteSubscription(String clientId, String subscriptionName) throws IOException;
1:      * For the new subscription find the last acknowledged message ID and then
1:      * find any new messages since then and dispatch them to the subscription.
1:      * <p/> e.g. if we dispatched some messages to a new durable topic
1:      * subscriber, then went down before acknowledging any messages, we need to
1:      * know the correct point from which to recover from.
/////////////////////////////////////////////////////////////////////////
0:     public void recoverSubscription(String clientId, String subscriptionName, MessageRecoveryListener listener)
0:         throws Exception;
1:      * For an active subscription - retrieve messages from the store for the
1:      * subscriber after the lastMessageId messageId <p/>
/////////////////////////////////////////////////////////////////////////
0:     public void recoverNextMessages(String clientId, String subscriptionName, int maxReturned,
0:                                     MessageRecoveryListener listener) throws Exception;
0:      * 
1:      * @param clientId
1:      * @param subscriptionName
0:      * 
0:     public void resetBatching(String clientId, String subscriptionName);
1: 
1:      * Get the number of messages ready to deliver from the store to a durable
1:      * subscriber
0:      * 
0:     public int getMessageCount(String clientId, String subscriberName) throws IOException;
1: 
/////////////////////////////////////////////////////////////////////////
0:     public SubscriptionInfo lookupSubscription(String clientId, String subscriptionName) throws IOException;
/////////////////////////////////////////////////////////////////////////
1:      * Inserts the subscriber info due to a subscription change <p/> If this is
1:      * a new subscription and the retroactive is false, then the last message
1:      * sent to the topic should be set as the last message acknowledged by they
1:      * new subscription. Otherwise, if retroactive is true, then create the
1:      * subscription without it having an acknowledged message so that on
1:      * recovery, all message recorded for the topic get replayed.
/////////////////////////////////////////////////////////////////////////
0:     public void addSubsciption(SubscriptionInfo subscriptionInfo, boolean retroactive) throws IOException;
commit:2728ccb
/////////////////////////////////////////////////////////////////////////
1:      * Lists all the durable subscriptions for a given destination.
/////////////////////////////////////////////////////////////////////////
0:     public void addSubsciption(SubscriptionInfo subscriptionInfo, boolean retroactive)
commit:57b4941
/////////////////////////////////////////////////////////////////////////
0:  * Licensed to the Apache Software Foundation (ASF) under one or more
0:  * contributor license agreements.  See the NOTICE file distributed with
0:  * this work for additional information regarding copyright ownership.
0:  * The ASF licenses this file to You under the Apache License, Version 2.0
0:  * (the "License"); you may not use this file except in compliance with
0:  * the License.  You may obtain a copy of the License at
commit:7f5213b
/////////////////////////////////////////////////////////////////////////
1:      * @throws Exception 
0:     public void recoverSubscription(String clientId, String subscriptionName, MessageRecoveryListener listener) throws Exception;
commit:9b64c37
/////////////////////////////////////////////////////////////////////////
0:      * Lists all the durable subscirptions for a given destination.
0:      * 
0:      * @param clientId TODO
0:      * @param subscriptionName TODO
0:      * @return
1:      */
0:     public SubscriptionInfo[] getAllSubscriptions() throws IOException;
1: 
1:     /**
commit:48b4869
/////////////////////////////////////////////////////////////////////////
0:  * Copyright 2005-2006 The Apache Software Foundation
commit:d29ca2a
/////////////////////////////////////////////////////////////////////////
1: /**
0:  *
0:  * Copyright 2004 The Apache Software Foundation
0:  *
0:  * Licensed under the Apache License, Version 2.0 (the "License");
0:  * you may not use this file except in compliance with the License.
0:  * You may obtain a copy of the License at
0:  *
0:  * http://www.apache.org/licenses/LICENSE-2.0
0:  *
0:  * Unless required by applicable law or agreed to in writing, software
0:  * distributed under the License is distributed on an "AS IS" BASIS,
0:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
0:  * See the License for the specific language governing permissions and
0:  * limitations under the License.
1:  */
1: package org.apache.activemq.store;
1: 
1: import java.io.IOException;
1: 
1: import javax.jms.JMSException;
1: 
1: import org.apache.activemq.broker.ConnectionContext;
1: import org.apache.activemq.command.MessageId;
1: import org.apache.activemq.command.SubscriptionInfo;
1: 
1: /**
1:  * A MessageStore for durable topic subscriptions
0:  *
0:  * @version $Revision: 1.4 $
1:  */
0: public interface TopicMessageStore extends MessageStore {
1: 
1:     /**
0:      * Stores the last acknowledged messgeID for the given subscription
0:      * so that we can recover and commence dispatching messages from the last
0:      * checkpoint
0:      * @param context TODO
1:      * @param messageId
0:      * @param subscriptionPersistentId
1:      */
0:     public void acknowledge(ConnectionContext context, String clientId, String subscriptionName, MessageId messageId) throws IOException;
1: 
1:     /**
0:      * @param sub
1:      * @throws JMSException 
1:      */
0:     public void deleteSubscription(String clientId, String subscriptionName) throws IOException;
1:     
1:     /**
0:      * For the new subscription find the last acknowledged message ID
0:      * and then find any new messages since then and dispatch them
0:      * to the subscription.
0:      * <p/>
0:      * e.g. if we dispatched some messages to a new durable topic subscriber, then went down before
0:      * acknowledging any messages, we need to know the correct point from which to recover from.
0:      * @param subscription
0:      *
0:      * @throws Throwable 
1:      */
0:     public void recoverSubscription(String clientId, String subscriptionName, MessageRecoveryListener listener) throws Throwable;
1: 
1:     /**
1:      * Finds the subscriber entry for the given consumer info
0:      * 
0:      * @param clientId TODO
0:      * @param subscriptionName TODO
0:      * @return
1:      */
0:     public SubscriptionInfo lookupSubscription(String clientId, String subscriptionName) throws IOException;
1: 
1:     /**
0:      * Inserts the subscriber info due to a subscription change
0:      * <p/>
0:      * If this is a new subscription and the retroactive is false, then the last
0:      * message sent to the topic should be set as the last message acknowledged by they new
0:      * subscription.  Otherwise, if retroactive is true, then create the subscription without 
0:      * it having an acknowledged message so that on recovery, all message recorded for the 
0:      * topic get replayed.
0:      * @param retroactive TODO
0:      *
1:      */
0:     public void addSubsciption(String clientId, String subscriptionName, String selector, boolean retroactive) throws IOException;
1: 
1: }
author:Gary Tully
-------------------------------------------------------------------------------
commit:64f3492
/////////////////////////////////////////////////////////////////////////
1:      * A hint to the Store to reset any batching state for a durable subscriber
commit:3432a75
/////////////////////////////////////////////////////////////////////////
1: import org.apache.activemq.command.MessageAck;
/////////////////////////////////////////////////////////////////////////
1:     void acknowledge(ConnectionContext context, String clientId, String subscriptionName, MessageId messageId, MessageAck ack) throws IOException;
author:Robert Davies
-------------------------------------------------------------------------------
commit:ea84378
/////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////
0:     
commit:1722001
/////////////////////////////////////////////////////////////////////////
0: 
0: 
commit:629bc81
/////////////////////////////////////////////////////////////////////////
0:     public void recoverNextMessages(String clientId,String subscriptionName,int maxReturned,
0:     public void resetBatching(String clientId,String subscriptionName);
commit:b6ba20b
/////////////////////////////////////////////////////////////////////////
1:     /**
0:      * A hint to the Store to reset any batching state for a durable subsriber
1:      * @param clientId 
1:      * @param subscriptionName 
0:      * @param nextToDispatch 
0:      *
1:      */
0:     public void resetBatching(String clientId,String subscriptionName,MessageId nextToDispatch);
0:      * Get the next  messageId to deliver to a subscriber after the MessageId provided
0:      * @param id 
0:      * @return the next messageId or null
1:      * @throws Exception 
0:     public MessageId getNextMessageIdToDeliver(String clientId,String subscriptionName,MessageId id) throws Exception;
0:     
0:     
1:     /**
0:      * Get the previous  messageId to deliver to a subscriber before the MessageId provided
1:      * @param clientId
1:      * @param subscriptionName
0:      * @param id 
0:      * @return the next messageId or null
1:      * @throws IOException 
1:      * @throws Exception 
1:      */
0:     public MessageId getPreviousMessageIdToDeliver(String clientId,String subscriptionName,MessageId id) throws Exception;
commit:4eef609
/////////////////////////////////////////////////////////////////////////
0:  * 
0:  * Licensed to the Apache Software Foundation (ASF) under one or more contributor license agreements. See the NOTICE
0:  * file distributed with this work for additional information regarding copyright ownership. The ASF licenses this file
0:  * to You under the Apache License, Version 2.0 (the "License"); you may not use this file except in compliance with the
0:  * License. You may obtain a copy of the License at
0:  * 
0:  * 
0:  * Unless required by applicable law or agreed to in writing, software distributed under the License is distributed on
0:  * an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the License for the
0:  * specific language governing permissions and limitations under the License.
0: import org.apache.activemq.command.Message;
0:  * 
0: public interface TopicMessageStore extends MessageStore{
0:      * Stores the last acknowledged messgeID for the given subscription so that we can recover and commence dispatching
0:      * messages from the last checkpoint
0:      * 
1:      * @param context
1:      * @param clientId
1:      * @param subscriptionName
1:      * @throws IOException
0:     public void acknowledge(ConnectionContext context,String clientId,String subscriptionName,MessageId messageId)
0:                     throws IOException;
1:      * @param clientId
1:      * @param subscriptionName
1:      * @throws IOException
0:      * @throws JMSException
0:     public void deleteSubscription(String clientId,String subscriptionName) throws IOException;
0: 
1:     /**
0:      * For the new subscription find the last acknowledged message ID and then find any new messages since then and
0:      * dispatch them to the subscription. <p/> e.g. if we dispatched some messages to a new durable topic subscriber,
0:      * then went down before acknowledging any messages, we need to know the correct point from which to recover from.
0:      * 
1:      * @param clientId
1:      * @param subscriptionName
1:      * @param listener
0:      * @param subscription
0:      * 
0:      * @throws Exception
1:      */
0:     public void recoverSubscription(String clientId,String subscriptionName,MessageRecoveryListener listener)
0:                     throws Exception;
0: 
1:     /**
0:      * For an active subscription - retrieve messages from the store for the subscriber after the lastMessageId
0:      * messageId <p/>
0:      * 
1:      * @param clientId
1:      * @param subscriptionName
0:      * @param lastMessageId
1:      * @param maxReturned
1:      * @param listener
0:      * 
0:      * @throws Exception
1:      */
0:     public void recoverNextMessages(String clientId,String subscriptionName,MessageId lastMessageId,int maxReturned,
0:                     MessageRecoveryListener listener) throws Exception;
0: 
0:      * Get the next un-acknowledged message to deliver to a subscriber
1:      * @param clientId
1:      * @param subscriptionName
0:      * @return the next message or null
1:      * @throws IOException 
0:     public Message getNextMessageToDeliver(String clientId,String subscriptionName) throws IOException;
0:     
0:     
1:     /**
0:      * Get the number of messages ready to deliver from the store to a durable subscriber
1:      * @param clientId
1:      * @param subscriberName
1:      * @return the outstanding message count
1:      * @throws IOException
1:      */
0:     public int getMessageCount(String clientId,String subscriberName) throws IOException;
0:     
1:      * @param clientId
1:      * @param subscriptionName
1:      * @return the SubscriptionInfo
1:      * @throws IOException
0:     public SubscriptionInfo lookupSubscription(String clientId,String subscriptionName) throws IOException;
1:      * @return an array SubscriptionInfos
1:      * @throws IOException
0:      * Inserts the subscriber info due to a subscription change <p/> If this is a new subscription and the retroactive
0:      * is false, then the last message sent to the topic should be set as the last message acknowledged by they new
0:      * subscription. Otherwise, if retroactive is true, then create the subscription without it having an acknowledged
0:      * message so that on recovery, all message recorded for the topic get replayed.
0:      * 
1:      * @param clientId
1:      * @param subscriptionName
0:      * @param selector
1:      * @param retroactive
1:      * @throws IOException
0:      * 
0:     public void addSubsciption(String clientId,String subscriptionName,String selector,boolean retroactive)
0:                     throws IOException;
============================================================================