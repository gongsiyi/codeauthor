1:7ae2055: /**
1:7ae2055:  * Licensed to the Apache Software Foundation (ASF) under one or more
1:7ae2055:  * contributor license agreements.  See the NOTICE file distributed with
1:7ae2055:  * this work for additional information regarding copyright ownership.
1:7ae2055:  * The ASF licenses this file to You under the Apache License, Version 2.0
1:7ae2055:  * (the "License"); you may not use this file except in compliance with
1:7ae2055:  * the License.  You may obtain a copy of the License at
1:7ae2055:  *
1:7ae2055:  *      http://www.apache.org/licenses/LICENSE-2.0
1:7ae2055:  *
1:7ae2055:  * Unless required by applicable law or agreed to in writing, software
1:7ae2055:  * distributed under the License is distributed on an "AS IS" BASIS,
1:7ae2055:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:7ae2055:  * See the License for the specific language governing permissions and
1:7ae2055:  * limitations under the License.
1:7ae2055:  */
1:7ae2055: package org.apache.activemq.broker.scheduler;
1:cc40251: 
1:433912f: import static org.junit.Assert.assertEquals;
1:433912f: import static org.junit.Assert.assertNotNull;
1:433912f: 
1:e3154c3: import java.util.List;
1:7ae2055: import java.util.concurrent.CountDownLatch;
1:7ae2055: import java.util.concurrent.TimeUnit;
1:7ae2055: import java.util.concurrent.atomic.AtomicInteger;
1:b3c1327: 
1:7ae2055: import javax.jms.Connection;
1:cc40251: import javax.jms.JMSException;
1:7ae2055: import javax.jms.Message;
1:7ae2055: import javax.jms.MessageConsumer;
1:7ae2055: import javax.jms.MessageListener;
1:7ae2055: import javax.jms.MessageProducer;
1:7ae2055: import javax.jms.Session;
1:7ae2055: import javax.jms.TextMessage;
1:f21992e: 
1:f21992e: import org.apache.activemq.ActiveMQConnectionFactory;
1:7ae2055: import org.apache.activemq.ScheduledMessage;
1:f21992e: import org.apache.activemq.util.ProducerThread;
1:f21992e: import org.apache.activemq.util.Wait;
1:433912f: import org.junit.Test;
1:386210f: import org.slf4j.Logger;
1:386210f: import org.slf4j.LoggerFactory;
1:cc40251: 
1:433912f: public class JmsSchedulerTest extends JobSchedulerTestSupport {
7:e3154c3: 
1:386210f:     private static final Logger LOG = LoggerFactory.getLogger(JmsSchedulerTest.class);
1:386210f: 
1:433912f:     @Test
1:e3154c3:     public void testCron() throws Exception {
1:e3154c3:         final int COUNT = 10;
1:e3154c3:         final AtomicInteger count = new AtomicInteger();
1:e3154c3:         Connection connection = createConnection();
1:cc40251: 
1:e3154c3:         Session session = connection.createSession(false, Session.AUTO_ACKNOWLEDGE);
1:cc40251: 
1:e3154c3:         MessageConsumer consumer = session.createConsumer(destination);
1:06d6e08: 
1:e3154c3:         final CountDownLatch latch = new CountDownLatch(COUNT);
1:e3154c3:         consumer.setMessageListener(new MessageListener() {
1:b3c1327:             @Override
1:e3154c3:             public void onMessage(Message message) {
1:e3154c3:                 count.incrementAndGet();
1:386210f:                 latch.countDown();
1:386210f:                 LOG.info("Received scheduled message, waiting for {} more", latch.getCount());
1:e8a4a32:             }
1:e3154c3:         });
1:5f49054: 
1:e3154c3:         connection.start();
1:e3154c3:         MessageProducer producer = session.createProducer(destination);
1:e3154c3:         TextMessage message = session.createTextMessage("test msg");
1:e3154c3:         long time = 1000;
1:e3154c3:         message.setStringProperty(ScheduledMessage.AMQ_SCHEDULED_CRON, "* * * * *");
1:e75affa:         message.setLongProperty(ScheduledMessage.AMQ_SCHEDULED_DELAY, time);
1:e3154c3:         message.setLongProperty(ScheduledMessage.AMQ_SCHEDULED_PERIOD, 500);
1:e3154c3:         message.setIntProperty(ScheduledMessage.AMQ_SCHEDULED_REPEAT, COUNT - 1);
1:b3c1327: 
1:e3154c3:         producer.send(message);
1:e3154c3:         producer.close();
1:b3c1327: 
1:e3154c3:         Thread.sleep(500);
1:e3154c3:         SchedulerBroker sb = (SchedulerBroker) this.broker.getBroker().getAdaptor(SchedulerBroker.class);
1:e3154c3:         JobScheduler js = sb.getJobScheduler();
1:e3154c3:         List<Job> list = js.getAllJobs();
1:e3154c3:         assertEquals(1, list.size());
1:fab6ba1:         latch.await(240, TimeUnit.SECONDS);
1:fab6ba1:         assertEquals(COUNT, count.get());
1:281fbb1:         connection.close();
1:f21992e:     }
1:f21992e: 
1:433912f:     @Test
1:7ae2055:     public void testSchedule() throws Exception {
1:7ae2055:         final int COUNT = 1;
1:7ae2055:         Connection connection = createConnection();
1:f21992e: 
1:7ae2055:         Session session = connection.createSession(false, Session.AUTO_ACKNOWLEDGE);
1:f21992e: 
1:7ae2055:         MessageConsumer consumer = session.createConsumer(destination);
1:f21992e: 
1:7ae2055:         final CountDownLatch latch = new CountDownLatch(COUNT);
1:7ae2055:         consumer.setMessageListener(new MessageListener() {
1:b3c1327:             @Override
1:7ae2055:             public void onMessage(Message message) {
1:386210f:                 latch.countDown();
1:e8a4a32:             }
1:7ae2055:         });
1:f21992e: 
1:7ae2055:         connection.start();
1:e3154c3:         long time = 5000;
1:7ae2055:         MessageProducer producer = session.createProducer(destination);
1:7ae2055:         TextMessage message = session.createTextMessage("test msg");
1:f21992e: 
1:e3154c3:         message.setLongProperty(ScheduledMessage.AMQ_SCHEDULED_DELAY, time);
1:f21992e: 
1:7ae2055:         producer.send(message);
1:7ae2055:         producer.close();
1:e3154c3:         // make sure the message isn't delivered early
1:7ae2055:         Thread.sleep(2000);
1:7ae2055:         assertEquals(latch.getCount(), COUNT);
1:cc40251:         latch.await(5, TimeUnit.SECONDS);
2:7ae2055:         assertEquals(latch.getCount(), 0);
1:281fbb1:         connection.close();
1:e3154c3:     }
1:f21992e: 
1:433912f:     @Test
1:cc40251:     public void testTransactedSchedule() throws Exception {
1:cc40251:         final int COUNT = 1;
1:cc40251:         Connection connection = createConnection();
1:f21992e: 
1:cc40251:         final Session session = connection.createSession(true, Session.SESSION_TRANSACTED);
1:5f49054: 
1:cc40251:         MessageConsumer consumer = session.createConsumer(destination);
1:5f49054: 
1:cc40251:         final CountDownLatch latch = new CountDownLatch(COUNT);
1:cc40251:         consumer.setMessageListener(new MessageListener() {
1:b3c1327:             @Override
1:cc40251:             public void onMessage(Message message) {
1:cc40251:                 try {
1:cc40251:                     session.commit();
1:cc40251:                 } catch (JMSException e) {
1:cc40251:                     e.printStackTrace();
1:cc40251:                 }
1:5f49054:                 latch.countDown();
1:cc40251:             }
1:cc40251:         });
1:e8a4a32: 
1:cc40251:         connection.start();
1:cc40251:         long time = 5000;
1:cc40251:         MessageProducer producer = session.createProducer(destination);
1:cc40251:         TextMessage message = session.createTextMessage("test msg");
1:e8a4a32: 
1:cc40251:         message.setLongProperty(ScheduledMessage.AMQ_SCHEDULED_DELAY, time);
1:e8a4a32: 
1:cc40251:         producer.send(message);
1:cc40251:         session.commit();
1:cc40251:         producer.close();
1:cc40251:         // make sure the message isn't delivered early
1:cc40251:         Thread.sleep(2000);
1:cc40251:         assertEquals(latch.getCount(), COUNT);
1:005403e:         latch.await(10, TimeUnit.SECONDS);
1:cc40251:         assertEquals(latch.getCount(), 0);
1:281fbb1:         connection.close();
1:cc40251:     }
1:e8a4a32: 
1:433912f:     @Test
1:7ae2055:     public void testScheduleRepeated() throws Exception {
1:7ae2055:         final int NUMBER = 10;
1:7ae2055:         final AtomicInteger count = new AtomicInteger();
1:7ae2055:         Connection connection = createConnection();
1:cc40251: 
1:7ae2055:         Session session = connection.createSession(false, Session.AUTO_ACKNOWLEDGE);
1:cc40251: 
1:7ae2055:         MessageConsumer consumer = session.createConsumer(destination);
1:cc40251: 
1:7ae2055:         final CountDownLatch latch = new CountDownLatch(NUMBER);
1:7ae2055:         consumer.setMessageListener(new MessageListener() {
1:b3c1327:             @Override
1:7ae2055:             public void onMessage(Message message) {
1:7ae2055:                 count.incrementAndGet();
1:cc40251:                 latch.countDown();
1:386210f:                 LOG.info("Received scheduled message, waiting for {} more", latch.getCount());
1:e3154c3:             }
1:7ae2055:         });
1:cc40251: 
1:7ae2055:         connection.start();
1:7ae2055:         MessageProducer producer = session.createProducer(destination);
1:7ae2055:         TextMessage message = session.createTextMessage("test msg");
1:e3154c3:         long time = 1000;
1:e3154c3:         message.setLongProperty(ScheduledMessage.AMQ_SCHEDULED_DELAY, time);
1:e3154c3:         message.setLongProperty(ScheduledMessage.AMQ_SCHEDULED_PERIOD, 500);
1:e3154c3:         message.setIntProperty(ScheduledMessage.AMQ_SCHEDULED_REPEAT, NUMBER - 1);
1:7ae2055:         producer.send(message);
1:7ae2055:         producer.close();
1:7ae2055:         assertEquals(latch.getCount(), NUMBER);
1:e3154c3:         latch.await(10, TimeUnit.SECONDS);
1:e3154c3:         assertEquals(0, latch.getCount());
1:e3154c3:         // wait a little longer - make sure we only get NUMBER of replays
1:7ae2055:         Thread.sleep(1000);
1:7ae2055:         assertEquals(NUMBER, count.get());
1:281fbb1:         connection.close();
6:7ae2055:     }
1:5f49054: 
1:433912f:     @Test
1:e8a4a32:     public void testScheduleRestart() throws Exception {
1:e8a4a32:         // send a message
1:e8a4a32:         Connection connection = createConnection();
1:e8a4a32:         Session session = connection.createSession(false, Session.AUTO_ACKNOWLEDGE);
1:e8a4a32:         connection.start();
1:e8a4a32:         MessageProducer producer = session.createProducer(destination);
1:e8a4a32:         TextMessage message = session.createTextMessage("test msg");
1:e8a4a32:         long time = 5000;
1:e8a4a32:         message.setLongProperty(ScheduledMessage.AMQ_SCHEDULED_DELAY, time);
1:e8a4a32:         producer.send(message);
1:e8a4a32:         producer.close();
1:e8a4a32: 
1:e8a4a32:         //restart broker
1:e8a4a32:         broker.stop();
1:e8a4a32:         broker.waitUntilStopped();
1:5f49054: 
1:e8a4a32:         broker = createBroker(false);
1:e8a4a32:         broker.start();
1:e8a4a32:         broker.waitUntilStarted();
1:5f49054: 
1:e8a4a32:         // consume the message
1:e8a4a32:         connection = createConnection();
1:e8a4a32:         connection.start();
1:e8a4a32:         session = connection.createSession(false, Session.AUTO_ACKNOWLEDGE);
1:e8a4a32:         MessageConsumer consumer = session.createConsumer(destination);
1:005403e:         Message msg = consumer.receive(10000);
1:e8a4a32:         assertNotNull("Didn't receive the message", msg);
1:5f49054: 
1:06d6e08:         //send another message
1:06d6e08:         producer = session.createProducer(destination);
1:06d6e08:         message.setLongProperty(ScheduledMessage.AMQ_SCHEDULED_DELAY, time);
1:06d6e08:         producer.send(message);
1:06d6e08:         producer.close();
1:281fbb1:         connection.close();
1:e8a4a32:     }
1:e8a4a32: 
1:433912f:     @Test
1:f21992e:     public void testJobSchedulerStoreUsage() throws Exception {
1:b3c1327: 
1:f21992e:         // Shrink the store limit down so we get the producer to block
1:f21992e:         broker.getSystemUsage().getJobSchedulerUsage().setLimit(10 * 1024);
1:b3c1327: 
1:f21992e:         ActiveMQConnectionFactory factory = new ActiveMQConnectionFactory("vm://localhost");
1:5fd307c:         Connection connection = factory.createConnection();
1:5fd307c:         connection.start();
1:5fd307c:         Session sess = connection.createSession(false, Session.AUTO_ACKNOWLEDGE);
1:f21992e:         final long time = 5000;
1:f21992e:         final ProducerThread producer = new ProducerThread(sess, destination) {
1:f21992e:             @Override
1:f21992e:             protected Message createMessage(int i) throws Exception {
1:f21992e:                 Message message = super.createMessage(i);
1:f21992e:                 message.setLongProperty(ScheduledMessage.AMQ_SCHEDULED_DELAY, time);
1:f21992e:                 return message;
1:b3c1327:             }
1:f21992e:         };
1:f21992e:         producer.setMessageCount(100);
1:f21992e:         producer.start();
1:b3c1327: 
1:f21992e:         MessageConsumer consumer = sess.createConsumer(destination);
1:f21992e:         final CountDownLatch latch = new CountDownLatch(100);
1:f21992e:         consumer.setMessageListener(new MessageListener() {
1:b3c1327:             @Override
1:f21992e:             public void onMessage(Message message) {
1:f21992e:                 latch.countDown();
1:f21992e:             }
1:f21992e:         });
1:f21992e: 
1:b3c1327:         // wait for the producer to block, which should happen immediately, and also wait long
1:f21992e:         // enough for the delay to elapse.  We should see no deliveries as the send should block
1:f21992e:         // on the first message.
1:f21992e:         Thread.sleep(10000l);
1:b3c1327: 
1:f21992e:         assertEquals(100, latch.getCount());
1:f21992e: 
1:f21992e:         // Increase the store limit so the producer unblocks.  Everything should enqueue at this point.
1:f21992e:         broker.getSystemUsage().getJobSchedulerUsage().setLimit(1024 * 1024 * 33);
1:f21992e: 
1:f21992e:         // Wait long enough that the messages are enqueued and the delivery delay has elapsed.
1:f21992e:         Thread.sleep(10000l);
1:f21992e: 
1:f21992e:         // Make sure we sent all the messages we expected to send
1:f21992e:         Wait.waitFor(new Wait.Condition() {
1:b3c1327:             @Override
1:f21992e:             public boolean isSatisified() throws Exception {
1:f21992e:                 return producer.getSentCount() == producer.getMessageCount();
1:f21992e:             }
1:f21992e:         }, 20000l);
1:b3c1327: 
1:f21992e:         assertEquals("Producer didn't send all messages", producer.getMessageCount(), producer.getSentCount());
1:b3c1327: 
1:f21992e:         // Make sure we got all the messages we expected to get
1:f21992e:         latch.await(20000l, TimeUnit.MILLISECONDS);
1:b3c1327: 
1:f21992e:         assertEquals("Consumer did not receive all messages.", 0, latch.getCount());
1:5fd307c:         connection.close();
1:f21992e:     }
1:7ae2055: }
============================================================================
author:gtully
-------------------------------------------------------------------------------
commit:005403e
/////////////////////////////////////////////////////////////////////////
1:         latch.await(10, TimeUnit.SECONDS);
/////////////////////////////////////////////////////////////////////////
1:         Message msg = consumer.receive(10000);
commit:281fbb1
/////////////////////////////////////////////////////////////////////////
1:         connection.close();
/////////////////////////////////////////////////////////////////////////
1:         connection.close();
/////////////////////////////////////////////////////////////////////////
1:         connection.close();
/////////////////////////////////////////////////////////////////////////
1:         connection.close();
/////////////////////////////////////////////////////////////////////////
1:         connection.close();
/////////////////////////////////////////////////////////////////////////
0:         conn.close();
author:Timothy Bish
-------------------------------------------------------------------------------
commit:5fd307c
/////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////
1:         Connection connection = factory.createConnection();
1:         connection.start();
1:         Session sess = connection.createSession(false, Session.AUTO_ACKNOWLEDGE);
/////////////////////////////////////////////////////////////////////////
1:         connection.close();
commit:386210f
/////////////////////////////////////////////////////////////////////////
1: import org.slf4j.Logger;
1: import org.slf4j.LoggerFactory;
1:     private static final Logger LOG = LoggerFactory.getLogger(JmsSchedulerTest.class);
1: 
/////////////////////////////////////////////////////////////////////////
1:                 latch.countDown();
1:                 LOG.info("Received scheduled message, waiting for {} more", latch.getCount());
/////////////////////////////////////////////////////////////////////////
1:                 latch.countDown();
1:                 LOG.info("Received scheduled message, waiting for {} more", latch.getCount());
commit:433912f
/////////////////////////////////////////////////////////////////////////
1: import static org.junit.Assert.assertEquals;
1: import static org.junit.Assert.assertNotNull;
1: 
/////////////////////////////////////////////////////////////////////////
1: import org.junit.Test;
1: public class JmsSchedulerTest extends JobSchedulerTestSupport {
1:     @Test
/////////////////////////////////////////////////////////////////////////
1:     @Test
/////////////////////////////////////////////////////////////////////////
1:     @Test
/////////////////////////////////////////////////////////////////////////
1:     @Test
/////////////////////////////////////////////////////////////////////////
1:     @Test
/////////////////////////////////////////////////////////////////////////
1:     @Test
/////////////////////////////////////////////////////////////////////////
author:Timothy A. Bish
-------------------------------------------------------------------------------
commit:b3c1327
/////////////////////////////////////////////////////////////////////////
1: 
/////////////////////////////////////////////////////////////////////////
1:             @Override
/////////////////////////////////////////////////////////////////////////
1:             @Override
/////////////////////////////////////////////////////////////////////////
1:             @Override
/////////////////////////////////////////////////////////////////////////
1:             @Override
/////////////////////////////////////////////////////////////////////////
1: 
1: 
1: 
1: 
/////////////////////////////////////////////////////////////////////////
1:             }
1: 
1:             @Override
1:         // wait for the producer to block, which should happen immediately, and also wait long
1: 
/////////////////////////////////////////////////////////////////////////
1:             @Override
1: 
1: 
1: 
/////////////////////////////////////////////////////////////////////////
0:         answer.setPersistent(true);
commit:ef24cc9
commit:f21992e
/////////////////////////////////////////////////////////////////////////
1: 
1: import org.apache.activemq.ActiveMQConnectionFactory;
1: import org.apache.activemq.util.ProducerThread;
1: import org.apache.activemq.util.Wait;
/////////////////////////////////////////////////////////////////////////
1:     
1:     public void testJobSchedulerStoreUsage() throws Exception {
1:         
1:         // Shrink the store limit down so we get the producer to block
1:         broker.getSystemUsage().getJobSchedulerUsage().setLimit(10 * 1024);
1:         
1:         
1:         ActiveMQConnectionFactory factory = new ActiveMQConnectionFactory("vm://localhost");
0:         Connection conn = factory.createConnection();
0:         conn.start();
0:         Session sess = conn.createSession(false, Session.AUTO_ACKNOWLEDGE);
1:         final long time = 5000;
1:         final ProducerThread producer = new ProducerThread(sess, destination) {
1:             @Override
1:             protected Message createMessage(int i) throws Exception {
1:                 Message message = super.createMessage(i);
1:                 message.setLongProperty(ScheduledMessage.AMQ_SCHEDULED_DELAY, time);
1:                 return message;
1:             }  
1:         };
1:         producer.setMessageCount(100);
1:         producer.start();
1:         
1:         MessageConsumer consumer = sess.createConsumer(destination);
1:         final CountDownLatch latch = new CountDownLatch(100);
1:         consumer.setMessageListener(new MessageListener() {
1:             public void onMessage(Message message) {
1:                 latch.countDown();
1:             }
1:         });
1: 
0:         // wait for the producer to block, which should happen immediately, and also wait long 
1:         // enough for the delay to elapse.  We should see no deliveries as the send should block
1:         // on the first message.
1:         Thread.sleep(10000l);
1:         
1:         assertEquals(100, latch.getCount());
1: 
1:         // Increase the store limit so the producer unblocks.  Everything should enqueue at this point.
1:         broker.getSystemUsage().getJobSchedulerUsage().setLimit(1024 * 1024 * 33);
1: 
1:         // Wait long enough that the messages are enqueued and the delivery delay has elapsed.
1:         Thread.sleep(10000l);
1: 
1:         // Make sure we sent all the messages we expected to send
1:         Wait.waitFor(new Wait.Condition() {
1:             public boolean isSatisified() throws Exception {
1:                 return producer.getSentCount() == producer.getMessageCount();
1:             }
1:         }, 20000l);
1:         
1:         assertEquals("Producer didn't send all messages", producer.getMessageCount(), producer.getSentCount());
1:         
1:         // Make sure we got all the messages we expected to get
1:         latch.await(20000l, TimeUnit.MILLISECONDS);
1:         
1:         assertEquals("Consumer did not receive all messages.", 0, latch.getCount());
1:     }
commit:5f49054
/////////////////////////////////////////////////////////////////////////
1: 
/////////////////////////////////////////////////////////////////////////
1:                 latch.countDown();
/////////////////////////////////////////////////////////////////////////
1: 
/////////////////////////////////////////////////////////////////////////
1: 
1: 
1: 
1: 
/////////////////////////////////////////////////////////////////////////
1: 
author:Gary Tully
-------------------------------------------------------------------------------
commit:92b3ae2
/////////////////////////////////////////////////////////////////////////
0:         answer.setSchedulerSupport(true);
commit:b84da17
/////////////////////////////////////////////////////////////////////////
0:         latch.await(120,TimeUnit.SECONDS);
commit:b836af8
/////////////////////////////////////////////////////////////////////////
0:         long time = System.currentTimeMillis() + 4000;
author:Bosanac Dejan
-------------------------------------------------------------------------------
commit:06d6e08
/////////////////////////////////////////////////////////////////////////
1: 
1:         //send another message
1:         producer = session.createProducer(destination);
1:         message.setLongProperty(ScheduledMessage.AMQ_SCHEDULED_DELAY, time);
1:         producer.send(message);
1:         producer.close();
commit:e8a4a32
/////////////////////////////////////////////////////////////////////////
1:     
1:     public void testScheduleRestart() throws Exception {
1:         // send a message
1:         Connection connection = createConnection();
1:         Session session = connection.createSession(false, Session.AUTO_ACKNOWLEDGE);
1:         connection.start();
1:         MessageProducer producer = session.createProducer(destination);
1:         TextMessage message = session.createTextMessage("test msg");
1:         long time = 5000;
1:         message.setLongProperty(ScheduledMessage.AMQ_SCHEDULED_DELAY, time);
1:         producer.send(message);
1:         producer.close();
1:         
1:         //restart broker
1:         broker.stop();
1:         broker.waitUntilStopped();
1:         
1:         broker = createBroker(false);
1:         broker.start();
1:         broker.waitUntilStarted();
1:         
1:         
1:         // consume the message
1:         connection = createConnection();
1:         connection.start();
1:         session = connection.createSession(false, Session.AUTO_ACKNOWLEDGE);
1:         MessageConsumer consumer = session.createConsumer(destination);
0:         Message msg = consumer.receive(5000);
1:         assertNotNull("Didn't receive the message", msg);
1:     }
/////////////////////////////////////////////////////////////////////////
0:         return createBroker(true);
1:     }
1:     
0:     protected BrokerService createBroker(boolean delete) throws Exception {
0:         if (delete) {
0:             IOHelper.mkdirs(schedulerDirectory);
0:             IOHelper.deleteChildren(schedulerDirectory);
1:         }
commit:fab6ba1
/////////////////////////////////////////////////////////////////////////
1:         latch.await(240, TimeUnit.SECONDS);
1:         assertEquals(COUNT, count.get());
author:Robert Davies
-------------------------------------------------------------------------------
commit:cc40251
/////////////////////////////////////////////////////////////////////////
1: import javax.jms.JMSException;
/////////////////////////////////////////////////////////////////////////
1:     
1:     public void testTransactedSchedule() throws Exception {
1:         final int COUNT = 1;
1:         Connection connection = createConnection();
1: 
1:         final Session session = connection.createSession(true, Session.SESSION_TRANSACTED);
1: 
1:         MessageConsumer consumer = session.createConsumer(destination);
1: 
1:         final CountDownLatch latch = new CountDownLatch(COUNT);
1:         consumer.setMessageListener(new MessageListener() {
1:             public void onMessage(Message message) {
1:                 latch.countDown();
1:                 try {
1:                     session.commit();
1:                 } catch (JMSException e) {
1:                     e.printStackTrace();
1:                 }
1:             }
1:         });
1: 
1:         connection.start();
1:         long time = 5000;
1:         MessageProducer producer = session.createProducer(destination);
1:         TextMessage message = session.createTextMessage("test msg");
1: 
1:         message.setLongProperty(ScheduledMessage.AMQ_SCHEDULED_DELAY, time);
1: 
1:         producer.send(message);
1:         session.commit();
1:         producer.close();
1:         // make sure the message isn't delivered early
1:         Thread.sleep(2000);
1:         assertEquals(latch.getCount(), COUNT);
1:         latch.await(5, TimeUnit.SECONDS);
1:         assertEquals(latch.getCount(), 0);
1:     }
1: 
commit:e75affa
/////////////////////////////////////////////////////////////////////////
1:         message.setLongProperty(ScheduledMessage.AMQ_SCHEDULED_DELAY, time);
commit:e3154c3
/////////////////////////////////////////////////////////////////////////
0: import java.io.File;
1: import java.util.List;
/////////////////////////////////////////////////////////////////////////
0: import org.apache.activemq.util.IOHelper;
1:     public void testCron() throws Exception {
1:         final int COUNT = 10;
1:         final AtomicInteger count = new AtomicInteger();
1:         Connection connection = createConnection();
1: 
1:         Session session = connection.createSession(false, Session.AUTO_ACKNOWLEDGE);
1: 
1:         MessageConsumer consumer = session.createConsumer(destination);
1: 
1:         final CountDownLatch latch = new CountDownLatch(COUNT);
1:         consumer.setMessageListener(new MessageListener() {
1:             public void onMessage(Message message) {
0:                 latch.countDown();
1:                 count.incrementAndGet();
1:             }
1:         });
1: 
1:         connection.start();
1:         MessageProducer producer = session.createProducer(destination);
1:         TextMessage message = session.createTextMessage("test msg");
1:         long time = 1000;
1:         message.setStringProperty(ScheduledMessage.AMQ_SCHEDULED_CRON, "* * * * *");
1:         message.setLongProperty(ScheduledMessage.AMQ_SCHEDULED_DELAY, time);
1:         message.setLongProperty(ScheduledMessage.AMQ_SCHEDULED_PERIOD, 500);
1:         message.setIntProperty(ScheduledMessage.AMQ_SCHEDULED_REPEAT, COUNT - 1);
1: 
1:         producer.send(message);
1:         producer.close();
1: 
1:         Thread.sleep(500);
1:         SchedulerBroker sb = (SchedulerBroker) this.broker.getBroker().getAdaptor(SchedulerBroker.class);
1:         JobScheduler js = sb.getJobScheduler();
1:         List<Job> list = js.getAllJobs();
1:         assertEquals(1, list.size());
0:         latch.await(2,TimeUnit.MINUTES);
0:         assertEquals(COUNT,count.get());
1:     }
1: 
/////////////////////////////////////////////////////////////////////////
1:         long time = 5000;
0: 
0: 
1:         // make sure the message isn't delivered early
/////////////////////////////////////////////////////////////////////////
1:         long time = 1000;
1:         message.setLongProperty(ScheduledMessage.AMQ_SCHEDULED_DELAY, time);
1:         message.setLongProperty(ScheduledMessage.AMQ_SCHEDULED_PERIOD, 500);
1:         message.setIntProperty(ScheduledMessage.AMQ_SCHEDULED_REPEAT, NUMBER - 1);
1:         latch.await(10, TimeUnit.SECONDS);
1:         assertEquals(0, latch.getCount());
1:         // wait a little longer - make sure we only get NUMBER of replays
/////////////////////////////////////////////////////////////////////////
0: 
0:         File schedulerDirectory = new File("target/scheduler");
0:         IOHelper.mkdirs(schedulerDirectory);
0:         IOHelper.deleteChildren(schedulerDirectory);
0:         answer.setDeleteAllMessagesOnStartup(true);
0:         answer.setSchedulerDirectoryFile(schedulerDirectory);
commit:7ae2055
/////////////////////////////////////////////////////////////////////////
1: /**
1:  * Licensed to the Apache Software Foundation (ASF) under one or more
1:  * contributor license agreements.  See the NOTICE file distributed with
1:  * this work for additional information regarding copyright ownership.
1:  * The ASF licenses this file to You under the Apache License, Version 2.0
1:  * (the "License"); you may not use this file except in compliance with
1:  * the License.  You may obtain a copy of the License at
1:  *
1:  *      http://www.apache.org/licenses/LICENSE-2.0
1:  *
1:  * Unless required by applicable law or agreed to in writing, software
1:  * distributed under the License is distributed on an "AS IS" BASIS,
1:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:  * See the License for the specific language governing permissions and
1:  * limitations under the License.
1:  */
1: package org.apache.activemq.broker.scheduler;
0: 
1: import java.util.concurrent.CountDownLatch;
1: import java.util.concurrent.TimeUnit;
1: import java.util.concurrent.atomic.AtomicInteger;
1: import javax.jms.Connection;
1: import javax.jms.Message;
1: import javax.jms.MessageConsumer;
1: import javax.jms.MessageListener;
1: import javax.jms.MessageProducer;
1: import javax.jms.Session;
1: import javax.jms.TextMessage;
0: import org.apache.activemq.EmbeddedBrokerTestSupport;
1: import org.apache.activemq.ScheduledMessage;
0: import org.apache.activemq.broker.BrokerService;
0: 
0: public class JmsSchedulerTest extends EmbeddedBrokerTestSupport {
0: 
0:     
1:     public void testSchedule() throws Exception {
1:         final int COUNT = 1;
1:         Connection connection = createConnection();
0: 
1:         Session session = connection.createSession(false, Session.AUTO_ACKNOWLEDGE);
0: 
1:         MessageConsumer consumer = session.createConsumer(destination);
0: 
1:         final CountDownLatch latch = new CountDownLatch(COUNT);
1:         consumer.setMessageListener(new MessageListener() {
1:             public void onMessage(Message message) {
0:                 latch.countDown();
1:             }
1:         });
0: 
1:         connection.start();
0:         long time =  5000;
1:         MessageProducer producer = session.createProducer(destination);
1:         TextMessage message = session.createTextMessage("test msg");
0:         
0:         message.setLongProperty(ScheduledMessage.AMQ_SCHEDULED_PERIOD, time);
0:       
1:         producer.send(message);
1:         producer.close();
0:         //make sure the message isn't delivered early
1:         Thread.sleep(2000);
1:         assertEquals(latch.getCount(), COUNT);
0:         latch.await(5, TimeUnit.SECONDS);
1:         assertEquals(latch.getCount(), 0);
1:     }
0: 
1:     public void testScheduleRepeated() throws Exception {
1:         final int NUMBER = 10;
1:         final AtomicInteger count = new AtomicInteger();
1:         Connection connection = createConnection();
0: 
1:         Session session = connection.createSession(false, Session.AUTO_ACKNOWLEDGE);
0: 
1:         MessageConsumer consumer = session.createConsumer(destination);
0: 
1:         final CountDownLatch latch = new CountDownLatch(NUMBER);
1:         consumer.setMessageListener(new MessageListener() {
1:             public void onMessage(Message message) {
0:                 latch.countDown();
1:                 count.incrementAndGet();
1:             }
1:         });
0: 
1:         connection.start();
1:         MessageProducer producer = session.createProducer(destination);
1:         TextMessage message = session.createTextMessage("test msg");
0:         long time = System.currentTimeMillis() + 1000;
0:         message.setLongProperty(ScheduledMessage.AMQ_SCHEDULED_START, time);
0:         message.setLongProperty(ScheduledMessage.AMQ_SCHEDULED_PERIOD, 50);
0:         message.setIntProperty(ScheduledMessage.AMQ_SCHEDULED_REPEAT, NUMBER-1);
1:         producer.send(message);
1:         producer.close();
1:         assertEquals(latch.getCount(), NUMBER);
0:         latch.await(5, TimeUnit.SECONDS);
1:         assertEquals(latch.getCount(), 0);
0:         //wait a little longer - make sure we only get NUMBER of replays
1:         Thread.sleep(1000);
1:         assertEquals(NUMBER, count.get());
1:     }
0: 
0:     @Override
0:     protected void setUp() throws Exception {
0:         bindAddress = "vm://localhost";
0:         super.setUp();
1:     }
0:     
0:     @Override
0:     protected BrokerService createBroker() throws Exception {
0:         BrokerService answer = new BrokerService();
0:         answer.setPersistent(isPersistent());
0:         answer.setDataDirectory("target");
0:         answer.setUseJmx(false);
0:         answer.addConnector(bindAddress);
0:         return answer;
1:     }
1: }
============================================================================