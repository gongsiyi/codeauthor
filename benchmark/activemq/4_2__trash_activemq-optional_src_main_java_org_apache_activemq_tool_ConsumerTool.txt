1:40a7d3b: /**
1:57b4941:  * Licensed to the Apache Software Foundation (ASF) under one or more
1:57b4941:  * contributor license agreements.  See the NOTICE file distributed with
1:57b4941:  * this work for additional information regarding copyright ownership.
1:57b4941:  * The ASF licenses this file to You under the Apache License, Version 2.0
1:57b4941:  * (the "License"); you may not use this file except in compliance with
1:57b4941:  * the License.  You may obtain a copy of the License at
3:5be5a62:  *
1:5f1adbe:  *      http://www.apache.org/licenses/LICENSE-2.0
1:5be5a62:  *
1:40a7d3b:  * Unless required by applicable law or agreed to in writing, software
1:5be5a62:  * distributed under the License is distributed on an "AS IS" BASIS,
1:5be5a62:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:5be5a62:  * See the License for the specific language governing permissions and
1:5be5a62:  * limitations under the License.
1:5be5a62:  */
1:8abcfd1: package org.apache.activemq.tool;
1:540dd5c: 
1:540dd5c: import java.io.IOException;
1:40a7d3b: import javax.jms.Connection;
1:40a7d3b: import javax.jms.JMSException;
1:40a7d3b: import javax.jms.Message;
1:40a7d3b: import javax.jms.MessageConsumer;
1:40a7d3b: import javax.jms.MessageListener;
1:40a7d3b: import javax.jms.Session;
1:40a7d3b: import javax.jms.TextMessage;
1:40a7d3b: import javax.jms.Topic;
6:40a7d3b: 
1:40a7d3b: /**
1:40a7d3b:  * A simple tool for consuming messages
1:b0c2a40:  * 
1:540dd5c:  * 
2:40a7d3b:  */
1:40a7d3b: public class ConsumerTool extends ToolSupport implements MessageListener {
1:40a7d3b: 
1:540dd5c:     protected int count;
1:40a7d3b:     protected int dumpCount = 10;
1:40a7d3b:     protected boolean verbose = true;
1:540dd5c:     protected int maxiumMessages;
1:40a7d3b:     private boolean pauseBeforeShutdown;
1:40a7d3b: 
1:40a7d3b:     public static void main(String[] args) {
1:40a7d3b:         ConsumerTool tool = new ConsumerTool();
1:40a7d3b:         if (args.length > 0) {
1:40a7d3b:             tool.url = args[0];
7:40a7d3b:         }
1:40a7d3b:         if (args.length > 1) {
1:40a7d3b:             tool.topic = args[1].equalsIgnoreCase("true");
1:40a7d3b:         }
1:40a7d3b:         if (args.length > 2) {
1:40a7d3b:             tool.subject = args[2];
1:40a7d3b:         }
1:40a7d3b:         if (args.length > 3) {
1:40a7d3b:             tool.durable = args[3].equalsIgnoreCase("true");
1:40a7d3b:         }
1:40a7d3b:         if (args.length > 4) {
1:40a7d3b:             tool.maxiumMessages = Integer.parseInt(args[4]);
1:40a7d3b:         }
1:40a7d3b:         tool.run();
1:40a7d3b:     }
1:40a7d3b: 
1:40a7d3b:     public void run() {
1:40a7d3b:         try {
1:40a7d3b:             System.out.println("Connecting to URL: " + url);
1:40a7d3b:             System.out.println("Consuming " + (topic ? "topic" : "queue") + ": " + subject);
1:40a7d3b:             System.out.println("Using " + (durable ? "durable" : "non-durable") + " subscription");
1:40a7d3b: 
1:40a7d3b:             Connection connection = createConnection();
1:40a7d3b:             Session session = createSession(connection);
1:40a7d3b:             MessageConsumer consumer = null;
1:40a7d3b:             if (durable && topic) {
1:540dd5c:                 consumer = session.createDurableSubscriber((Topic)destination, consumerName);
1:540dd5c:             } else {
1:40a7d3b:                 consumer = session.createConsumer(destination);
1:40a7d3b:             }
1:40a7d3b:             if (maxiumMessages <= 0) {
1:40a7d3b:                 consumer.setMessageListener(this);
1:40a7d3b:             }
1:40a7d3b:             connection.start();
1:40a7d3b: 
1:40a7d3b:             if (maxiumMessages > 0) {
1:40a7d3b:                 consumeMessagesAndClose(connection, session, consumer);
1:40a7d3b:             }
1:540dd5c:         } catch (Exception e) {
1:40a7d3b:             System.out.println("Caught: " + e);
1:40a7d3b:             e.printStackTrace();
1:40a7d3b:         }
1:40a7d3b:     }
1:40a7d3b: 
1:40a7d3b:     public void onMessage(Message message) {
1:40a7d3b:         try {
1:40a7d3b:             if (message instanceof TextMessage) {
1:540dd5c:                 TextMessage txtMsg = (TextMessage)message;
1:40a7d3b:                 if (verbose) {
1:540dd5c: 
1:540dd5c:                     String msg = txtMsg.getText();
1:540dd5c:                     if (msg.length() > 50) {
1:540dd5c:                         msg = msg.substring(0, 50) + "...";
1:540dd5c:                     }
1:540dd5c: 
1:40a7d3b:                     System.out.println("Received: " + msg);
1:40a7d3b:                 }
1:540dd5c:             } else {
1:40a7d3b:                 if (verbose) {
1:40a7d3b:                     System.out.println("Received: " + message);
1:40a7d3b:                 }
1:40a7d3b:             }
1:40a7d3b:             /*
1:540dd5c:              * if (++count % dumpCount == 0) { dumpStats(connection); }
1:540dd5c:              */
1:540dd5c:         } catch (JMSException e) {
1:40a7d3b:             System.out.println("Caught: " + e);
1:40a7d3b:             e.printStackTrace();
1:40a7d3b:         }
1:40a7d3b:     }
1:40a7d3b: 
1:40a7d3b:     protected void consumeMessagesAndClose(Connection connection, Session session, MessageConsumer consumer) throws JMSException, IOException {
1:40a7d3b:         System.out.println("We are about to wait until we consume: " + maxiumMessages + " message(s) then we will shutdown");
1:40a7d3b: 
1:40a7d3b:         for (int i = 0; i < maxiumMessages; i++) {
1:40a7d3b:             Message message = consumer.receive();
1:40a7d3b:             onMessage(message);
1:40a7d3b:         }
1:40a7d3b:         System.out.println("Closing connection");
1:40a7d3b:         consumer.close();
1:40a7d3b:         session.close();
1:40a7d3b:         connection.close();
1:40a7d3b:         if (pauseBeforeShutdown) {
1:40a7d3b:             System.out.println("Press return to shut down");
1:40a7d3b:             System.in.read();
1:86cbdfd:         }
1:40a7d3b:     }
1:40a7d3b: }
============================================================================
author:Hadrian Zbarcea
-------------------------------------------------------------------------------
commit:d54d046
author:Hiram R. Chirino
-------------------------------------------------------------------------------
commit:ecaae53
commit:b0c2a40
/////////////////////////////////////////////////////////////////////////
1:  * 
commit:540dd5c
/////////////////////////////////////////////////////////////////////////
1: import java.io.IOException;
1: 
/////////////////////////////////////////////////////////////////////////
1:  * 
1:     protected int count;
1:     protected int maxiumMessages;
/////////////////////////////////////////////////////////////////////////
1:                 consumer = session.createDurableSubscriber((Topic)destination, consumerName);
1:             } else {
/////////////////////////////////////////////////////////////////////////
1:         } catch (Exception e) {
/////////////////////////////////////////////////////////////////////////
1:                 TextMessage txtMsg = (TextMessage)message;
1: 
1:                     String msg = txtMsg.getText();
1:                     if (msg.length() > 50) {
1:                         msg = msg.substring(0, 50) + "...";
1:                     }
1: 
1:             } else {
1:              * if (++count % dumpCount == 0) { dumpStats(connection); }
1:              */
1:         } catch (JMSException e) {
commit:5f1adbe
/////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////
1:  *      http://www.apache.org/licenses/LICENSE-2.0
commit:86cbdfd
/////////////////////////////////////////////////////////////////////////
1: }
commit:57b4941
/////////////////////////////////////////////////////////////////////////
1:  * Licensed to the Apache Software Foundation (ASF) under one or more
1:  * contributor license agreements.  See the NOTICE file distributed with
1:  * this work for additional information regarding copyright ownership.
1:  * The ASF licenses this file to You under the Apache License, Version 2.0
1:  * (the "License"); you may not use this file except in compliance with
1:  * the License.  You may obtain a copy of the License at
commit:5be5a62
/////////////////////////////////////////////////////////////////////////
1:  *
0:  * Copyright 2005-2006 The Apache Software Foundation
1:  *
0:  * Licensed under the Apache License, Version 2.0 (the "License");
0:  * you may not use this file except in compliance with the License.
0:  * You may obtain a copy of the License at
1:  *
1:  *
1:  * distributed under the License is distributed on an "AS IS" BASIS,
1:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:  * See the License for the specific language governing permissions and
1:  * limitations under the License.
1:  */
commit:8abcfd1
/////////////////////////////////////////////////////////////////////////
1: package org.apache.activemq.tool;
author:Claus Ibsen
-------------------------------------------------------------------------------
commit:3b4aadc
/////////////////////////////////////////////////////////////////////////
author:James Strachan
-------------------------------------------------------------------------------
commit:40a7d3b
/////////////////////////////////////////////////////////////////////////
1: /**
0:  * 
0:  * Copyright 2004 Protique Ltd
0:  * 
0:  * Licensed under the Apache License, Version 2.0 (the "License"); 
0:  * you may not use this file except in compliance with the License. 
0:  * You may obtain a copy of the License at 
0:  * 
0:  * http://www.apache.org/licenses/LICENSE-2.0
0:  * 
1:  * Unless required by applicable law or agreed to in writing, software
0:  * distributed under the License is distributed on an "AS IS" BASIS, 
0:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. 
0:  * See the License for the specific language governing permissions and 
0:  * limitations under the License. 
0:  * 
0:  **/
0: package org.activemq.tool;
1: 
1: import javax.jms.Connection;
1: import javax.jms.JMSException;
1: import javax.jms.Message;
1: import javax.jms.MessageConsumer;
1: import javax.jms.MessageListener;
1: import javax.jms.Session;
1: import javax.jms.TextMessage;
1: import javax.jms.Topic;
0: import java.io.IOException;
1: 
1: /**
1:  * A simple tool for consuming messages
0:  *
0:  * @version $Revision$
1:  */
1: public class ConsumerTool extends ToolSupport implements MessageListener {
1: 
0:     protected int count = 0;
1:     protected int dumpCount = 10;
1:     protected boolean verbose = true;
0:     protected int maxiumMessages = 0;
1:     private boolean pauseBeforeShutdown;
1: 
1: 
1:     public static void main(String[] args) {
1:         ConsumerTool tool = new ConsumerTool();
1:         if (args.length > 0) {
1:             tool.url = args[0];
1:         }
1:         if (args.length > 1) {
1:             tool.topic = args[1].equalsIgnoreCase("true");
1:         }
1:         if (args.length > 2) {
1:             tool.subject = args[2];
1:         }
1:         if (args.length > 3) {
1:             tool.durable = args[3].equalsIgnoreCase("true");
1:         }
1:         if (args.length > 4) {
1:             tool.maxiumMessages = Integer.parseInt(args[4]);
1:         }
1:         tool.run();
1:     }
1: 
1:     public void run() {
1:         try {
1:             System.out.println("Connecting to URL: " + url);
1:             System.out.println("Consuming " + (topic ? "topic" : "queue") + ": " + subject);
1:             System.out.println("Using " + (durable ? "durable" : "non-durable") + " subscription");
1: 
1:             Connection connection = createConnection();
1:             Session session = createSession(connection);
1:             MessageConsumer consumer = null;
1:             if (durable && topic) {
0:                 consumer = session.createDurableSubscriber((Topic) destination, consumerName);
1:             }
0:             else {
1:                 consumer = session.createConsumer(destination);
1:             }
1:             if (maxiumMessages <= 0) {
1:                 consumer.setMessageListener(this);
1:             }
1:             connection.start();
1: 
1:             if (maxiumMessages > 0) {
1:                 consumeMessagesAndClose(connection, session, consumer);
1:             }
1:         }
0:         catch (Exception e) {
1:             System.out.println("Caught: " + e);
1:             e.printStackTrace();
1:         }
1:     }
1: 
1:     public void onMessage(Message message) {
1:         try {
1:             if (message instanceof TextMessage) {
0:                 TextMessage txtMsg = (TextMessage) message;
1:                 if (verbose) {
1:                 	
0:                 	String msg = txtMsg.getText();
0:                 	if( msg.length() > 50 )
0:                 		msg = msg.substring(0, 50)+"...";
1:                 	
1:                     System.out.println("Received: " + msg);
1:                 }
1:             }
0:             else {
1:                 if (verbose) {
1:                     System.out.println("Received: " + message);
1:                 }
1:             }
1:             /*
0:             if (++count % dumpCount == 0) {
0:                 dumpStats(connection);
1:             }
1:             */
1:         }
0:         catch (JMSException e) {
1:             System.out.println("Caught: " + e);
1:             e.printStackTrace();
1:         }
1:     }
1: 
1: 
1:     protected void consumeMessagesAndClose(Connection connection, Session session, MessageConsumer consumer) throws JMSException, IOException {
1:         System.out.println("We are about to wait until we consume: " + maxiumMessages + " message(s) then we will shutdown");
1: 
1:         for (int i = 0; i < maxiumMessages; i++) {
1:             Message message = consumer.receive();
1:             onMessage(message);
1:         }
1:         System.out.println("Closing connection");
1:         consumer.close();
1:         session.close();
1:         connection.close();
1:         if (pauseBeforeShutdown) {
1:             System.out.println("Press return to shut down");
1:             System.in.read();
1:         }
1:     }
1: }
============================================================================