1:d29ca2a: /**
1:57b4941:  * Licensed to the Apache Software Foundation (ASF) under one or more
1:57b4941:  * contributor license agreements.  See the NOTICE file distributed with
1:57b4941:  * this work for additional information regarding copyright ownership.
1:57b4941:  * The ASF licenses this file to You under the Apache License, Version 2.0
1:57b4941:  * (the "License"); you may not use this file except in compliance with
1:57b4941:  * the License.  You may obtain a copy of the License at
2:d29ca2a:  *
1:230a86c:  *      http://www.apache.org/licenses/LICENSE-2.0
1:d29ca2a:  *
1:d29ca2a:  * Unless required by applicable law or agreed to in writing, software
1:d29ca2a:  * distributed under the License is distributed on an "AS IS" BASIS,
1:d29ca2a:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:d29ca2a:  * See the License for the specific language governing permissions and
1:d29ca2a:  * limitations under the License.
1:d29ca2a:  */
1:d29ca2a: package org.apache.activemq.broker.region;
1:74a7a8b: 
1:74a7a8b: import java.util.Map;
1:74a7a8b: import java.util.Set;
1:013f372: import org.apache.activemq.Service;
1:d29ca2a: import org.apache.activemq.broker.ConnectionContext;
1:84eb9f8: import org.apache.activemq.broker.ConsumerBrokerExchange;
1:84eb9f8: import org.apache.activemq.broker.ProducerBrokerExchange;
1:d29ca2a: import org.apache.activemq.command.ActiveMQDestination;
1:8d3ca90: import org.apache.activemq.command.ConsumerControl;
1:d29ca2a: import org.apache.activemq.command.ConsumerInfo;
1:d29ca2a: import org.apache.activemq.command.Message;
1:d29ca2a: import org.apache.activemq.command.MessageAck;
1:4098942: import org.apache.activemq.command.MessageDispatchNotification;
1:9d671b7: import org.apache.activemq.command.MessagePull;
1:634da7a: import org.apache.activemq.command.ProducerInfo;
1:d29ca2a: import org.apache.activemq.command.RemoveSubscriptionInfo;
1:9d671b7: import org.apache.activemq.command.Response;
1:d29ca2a: 
1:d29ca2a: /**
1:d29ca2a:  * A Region is used to implement the different QOS options available to 
1:013f372:  * a broker.  A Broker is composed of multiple message processing Regions that
1:d29ca2a:  * provide different QOS options.
1:b0c2a40:  * 
1:d29ca2a:  * 
1:d29ca2a:  */
1:013f372: public interface Region extends Service {
1:d29ca2a: 
1:d29ca2a:     /**
1:d29ca2a:      * Used to create a destination.  Usually, this method is invoked as a side-effect of sending
1:013f372:      * a message to a destination that does not exist yet.
1:d29ca2a:      * 
1:d29ca2a:      * @param context
1:d29ca2a:      * @param destination the destination to create.
1:204f91f:      * @param createIfTemporary 
1:d29ca2a:      * @return TODO
1:7f5213b:      * @throws Exception TODO
1:d29ca2a:      */
1:204f91f:     Destination addDestination(ConnectionContext context, ActiveMQDestination destination, boolean createIfTemporary) throws Exception;
1:d29ca2a:     
1:d29ca2a:     /**
1:013f372:      * Used to destroy a destination.  
1:013f372:      * This should try to quiesce use of the destination up to the timeout allotted time before removing the destination.
1:d29ca2a:      * This will remove all persistent messages associated with the destination.
1:d29ca2a:      * 
1:013f372:      * @param context the environment the operation is being executed under.
1:d29ca2a:      * @param destination what is being removed from the broker.
1:d29ca2a:      * @param timeout the max amount of time to wait for the destination to quiesce
1:7f5213b:      * @throws Exception TODO
1:d29ca2a:      */
1:fc00993:     void removeDestination(ConnectionContext context, ActiveMQDestination destination, long timeout) throws Exception;
1:d29ca2a: 
1:d29ca2a:     /**
1:4d17a70:      * Returns a reference to the concurrent hash map that holds known destinations, do not modify
1:d680ba1:      */
1:ecf89a6:     Map<ActiveMQDestination, Destination> getDestinationMap();
1:d29ca2a:     
1:634da7a: 
1:634da7a:     /**
1:d29ca2a:      * Adds a consumer.
1:013f372:      * @param context the environment the operation is being executed under.
1:0def1d4:      * @return TODO
1:7f5213b:      * @throws Exception TODO
1:d29ca2a:      */
1:fc00993:     Subscription addConsumer(ConnectionContext context, ConsumerInfo info) throws Exception;
1:d29ca2a: 
1:d29ca2a:     /**
1:d29ca2a:      * Removes a consumer.
1:013f372:      * @param context the environment the operation is being executed under.
1:7f5213b:      * @throws Exception TODO
1:d29ca2a:      */
1:fc00993:     void removeConsumer(ConnectionContext context, ConsumerInfo info) throws Exception;
1:d29ca2a:     
1:d29ca2a:     /**
1:634da7a:      * Adds a Producer.
1:013f372:      * @param context the environment the operation is being executed under.
1:7f5213b:      * @throws Exception TODO
1:634da7a:      */
1:634da7a:     void addProducer(ConnectionContext context, ProducerInfo info) throws Exception;
1:634da7a: 
1:634da7a:     /**
1:634da7a:      * Removes a Producer.
1:013f372:      * @param context the environment the operation is being executed under.
1:634da7a:      * @throws Exception TODO
1:634da7a:      */
1:634da7a:     void removeProducer(ConnectionContext context, ProducerInfo info) throws Exception;
1:634da7a: 
1:4098942: 
1:4098942:     /**
1:d29ca2a:      * Deletes a durable subscription.
1:013f372:      * @param context the environment the operation is being executed under.
1:d29ca2a:      * @param info TODO
1:634da7a:      * @throws Exception TODO
1:d29ca2a:      */
1:fc00993:     void removeSubscription(ConnectionContext context, RemoveSubscriptionInfo info) throws Exception;
1:d29ca2a:     
1:d29ca2a:     /**
1:d29ca2a:      * Send a message to the broker to using the specified destination.  The destination specified
1:d29ca2a:      * in the message does not need to match the destination the message is sent to.  This is 
1:d29ca2a:      * handy in case the message is being sent to a dead letter destination.
1:84eb9f8:      * @param producerExchange the environment the operation is being executed under.
1:84eb9f8:      * @param message 
1:7f5213b:      * @throws Exception TODO
1:d29ca2a:      */
1:fc00993:     void send(ProducerBrokerExchange producerExchange, Message message) throws Exception;
1:d29ca2a:     
1:d29ca2a:     /**
1:d29ca2a:      * Used to acknowledge the receipt of a message by a client.
1:84eb9f8:      * @param consumerExchange the environment the operation is being executed under.
1:7f5213b:      * @throws Exception TODO
1:d29ca2a:      */
1:fc00993:     void acknowledge(ConsumerBrokerExchange consumerExchange, MessageAck ack) throws Exception;
1:d29ca2a:     
1:06a5829:     /**
1:9d671b7:      * Allows a consumer to pull a message from a queue
1:9d671b7:      */
1:fc00993:     Response messagePull(ConnectionContext context, MessagePull pull) throws Exception;
1:d29ca2a: 
1:9d671b7:     /**
1:4098942:      * Process a notification of a dispatch - used by a Slave Broker
1:4098942:      * @param messageDispatchNotification
1:7f5213b:      * @throws Exception TODO
1:4098942:      */
1:fc00993:     void processDispatchNotification(MessageDispatchNotification messageDispatchNotification) throws Exception;
1:9d671b7: 
1:fc00993:     void gc();
1:06a5829: 
1:d680ba1:     /**
1:06a5829:      * Provide an exact or wildcard lookup of destinations in the region
1:d29ca2a:      * 
1:06a5829:      * @return a set of matching destination objects.
1:06a5829:      */
1:5076808:     Set<Destination> getDestinations(ActiveMQDestination destination);
1:d680ba1:     
1:8d3ca90:     void processConsumerControl(ConsumerBrokerExchange consumerExchange, ConsumerControl control);
1:55da9bc: 
1:55da9bc:     void reapplyInterceptor();
1:8d3ca90:     
1:d29ca2a: }
============================================================================
author:Hadrian Zbarcea
-------------------------------------------------------------------------------
commit:5076808
/////////////////////////////////////////////////////////////////////////
1:     Set<Destination> getDestinations(ActiveMQDestination destination);
commit:d54d046
author:Dejan Bosanac
-------------------------------------------------------------------------------
commit:55da9bc
/////////////////////////////////////////////////////////////////////////
1: 
1:     void reapplyInterceptor();
author:Hiram R. Chirino
-------------------------------------------------------------------------------
commit:58aca86
commit:b0c2a40
/////////////////////////////////////////////////////////////////////////
1:  * 
commit:ecf89a6
/////////////////////////////////////////////////////////////////////////
1:     Map<ActiveMQDestination, Destination> getDestinationMap();
commit:fc00993
/////////////////////////////////////////////////////////////////////////
0:     Destination addDestination(ConnectionContext context, ActiveMQDestination destination) throws Exception;
/////////////////////////////////////////////////////////////////////////
1:     void removeDestination(ConnectionContext context, ActiveMQDestination destination, long timeout) throws Exception;
0:     Map getDestinationMap();
/////////////////////////////////////////////////////////////////////////
1:     Subscription addConsumer(ConnectionContext context, ConsumerInfo info) throws Exception;
1:     void removeConsumer(ConnectionContext context, ConsumerInfo info) throws Exception;
/////////////////////////////////////////////////////////////////////////
1:     void removeSubscription(ConnectionContext context, RemoveSubscriptionInfo info) throws Exception;
/////////////////////////////////////////////////////////////////////////
1:     void send(ProducerBrokerExchange producerExchange, Message message) throws Exception;
1:     void acknowledge(ConsumerBrokerExchange consumerExchange, MessageAck ack) throws Exception;
1:     Response messagePull(ConnectionContext context, MessagePull pull) throws Exception;
1:     void processDispatchNotification(MessageDispatchNotification messageDispatchNotification) throws Exception;
1:     void gc();
0:     Set getDestinations(ActiveMQDestination destination);
commit:74a7a8b
/////////////////////////////////////////////////////////////////////////
1: import java.util.Map;
1: import java.util.Set;
1: 
/////////////////////////////////////////////////////////////////////////
commit:230a86c
/////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////
1:  *      http://www.apache.org/licenses/LICENSE-2.0
commit:57b4941
/////////////////////////////////////////////////////////////////////////
1:  * Licensed to the Apache Software Foundation (ASF) under one or more
1:  * contributor license agreements.  See the NOTICE file distributed with
1:  * this work for additional information regarding copyright ownership.
1:  * The ASF licenses this file to You under the Apache License, Version 2.0
1:  * (the "License"); you may not use this file except in compliance with
1:  * the License.  You may obtain a copy of the License at
commit:7f5213b
/////////////////////////////////////////////////////////////////////////
1:      * @throws Exception TODO
0:     public Destination addDestination(ConnectionContext context, ActiveMQDestination destination) throws Exception;
/////////////////////////////////////////////////////////////////////////
1:      * @throws Exception TODO
0:     public void removeDestination(ConnectionContext context, ActiveMQDestination destination, long timeout) throws Exception;
1:      * @throws Exception TODO
0:     public void addConsumer(ConnectionContext context, ConsumerInfo info) throws Exception;
1:      * @throws Exception TODO
0:     public void removeConsumer(ConnectionContext context, ConsumerInfo info) throws Exception;
1:      * @throws Exception TODO
0:     public void removeSubscription(ConnectionContext context, RemoveSubscriptionInfo info) throws Exception;
1:      * @throws Exception TODO
0:     public void send(ConnectionContext context, Message message) throws Exception;
1:      * @throws Exception TODO
0:     public void acknowledge(ConnectionContext context, MessageAck ack) throws Exception;
1:      * @throws Exception TODO
0:     public void processDispatchNotification(MessageDispatchNotification messageDispatchNotification) throws Exception;
commit:013f372
/////////////////////////////////////////////////////////////////////////
1: import org.apache.activemq.Service;
/////////////////////////////////////////////////////////////////////////
1:  * a broker.  A Broker is composed of multiple message processing Regions that
1: public interface Region extends Service {
1:      * a message to a destination that does not exist yet.
/////////////////////////////////////////////////////////////////////////
1:      * Used to destroy a destination.  
1:      * This should try to quiesce use of the destination up to the timeout allotted time before removing the destination.
1:      * @param context the environment the operation is being executed under.
/////////////////////////////////////////////////////////////////////////
1:      * @param context the environment the operation is being executed under.
1:      * @param context the environment the operation is being executed under.
1:      * @param context the environment the operation is being executed under.
/////////////////////////////////////////////////////////////////////////
1:      * @param context the environment the operation is being executed under.
1:      * @param context the environment the operation is being executed under.
commit:48b4869
/////////////////////////////////////////////////////////////////////////
0:  * Copyright 2005-2006 The Apache Software Foundation
commit:d29ca2a
/////////////////////////////////////////////////////////////////////////
1: /**
1:  *
0:  * Copyright 2004 The Apache Software Foundation
1:  *
0:  * Licensed under the Apache License, Version 2.0 (the "License");
0:  * you may not use this file except in compliance with the License.
0:  * You may obtain a copy of the License at
1:  *
0:  * http://www.apache.org/licenses/LICENSE-2.0
1:  *
1:  * Unless required by applicable law or agreed to in writing, software
1:  * distributed under the License is distributed on an "AS IS" BASIS,
1:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:  * See the License for the specific language governing permissions and
1:  * limitations under the License.
1:  */
1: package org.apache.activemq.broker.region;
1: 
1: import org.apache.activemq.broker.ConnectionContext;
1: import org.apache.activemq.command.ActiveMQDestination;
1: import org.apache.activemq.command.ConsumerInfo;
1: import org.apache.activemq.command.Message;
1: import org.apache.activemq.command.MessageAck;
1: import org.apache.activemq.command.RemoveSubscriptionInfo;
1: 
1: /**
1:  * A Region is used to implement the different QOS options available to 
0:  * a broker.  A Broker is composed of multiple mesasge processing Regions that
1:  * provide different QOS options.
1:  * 
0:  * @version $Revision$
1:  */
0: public interface Region {
1: 
1:     /**
1:      * Used to create a destination.  Usually, this method is invoked as a side-effect of sending
0:      * a message to a destiantion that does not exist yet.
1:      * 
1:      * @param context
1:      * @param destination the destination to create.
1:      * @return TODO
1:      */
0:     public Destination addDestination(ConnectionContext context, ActiveMQDestination destination) throws Throwable;
1:     
1:     /**
0:      * Used to destory a destination.  
0:      * This shoud try to quiesce use of the destination up to the timeout alotted time before removing the destination.
1:      * This will remove all persistent messages associated with the destination.
1:      * 
0:      * @param context the enviorment the operation is being executed under.
1:      * @param destination what is being removed from the broker.
1:      * @param timeout the max amount of time to wait for the destination to quiesce
1:      */
0:     public void removeDestination(ConnectionContext context, ActiveMQDestination destination, long timeout) throws Throwable;
1: 
1:     /**
1:      * Adds a consumer.
0:      * @param context the enviorment the operation is being executed under.
1:      */
0:     public void addConsumer(ConnectionContext context, ConsumerInfo info) throws Throwable;
1: 
1:     /**
1:      * Removes a consumer.
0:      * @param context the enviorment the operation is being executed under.
1:      */
0:     public void removeConsumer(ConnectionContext context, ConsumerInfo info) throws Throwable;
1: 
1:     /**
1:      * Deletes a durable subscription.
0:      * @param context the enviorment the operation is being executed under.
1:      * @param info TODO
1:      */
0:     public void removeSubscription(ConnectionContext context, RemoveSubscriptionInfo info) throws Throwable;
1:     
1:     /**
1:      * Send a message to the broker to using the specified destination.  The destination specified
1:      * in the message does not need to match the destination the message is sent to.  This is 
1:      * handy in case the message is being sent to a dead letter destination.
0:      * @param context the enviorment the operation is being executed under.
1:      */
0:     public void send(ConnectionContext context, Message message) throws Throwable;
1:     
1:     /**
1:      * Used to acknowledge the receipt of a message by a client.
0:      * @param context the enviorment the operation is being executed under.
1:      */
0:     public void acknowledge(ConnectionContext context, MessageAck ack) throws Throwable;
1: 
0:     public void gc();
1:     
1: }
author:Gary Tully
-------------------------------------------------------------------------------
commit:4d17a70
/////////////////////////////////////////////////////////////////////////
1:      * Returns a reference to the concurrent hash map that holds known destinations, do not modify
commit:8d3ca90
/////////////////////////////////////////////////////////////////////////
1: import org.apache.activemq.command.ConsumerControl;
/////////////////////////////////////////////////////////////////////////
1:     void processConsumerControl(ConsumerBrokerExchange consumerExchange, ConsumerControl control);
1:     
author:Robert Davies
-------------------------------------------------------------------------------
commit:204f91f
/////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////
1:      * @param createIfTemporary 
1:     Destination addDestination(ConnectionContext context, ActiveMQDestination destination, boolean createIfTemporary) throws Exception;
commit:634da7a
/////////////////////////////////////////////////////////////////////////
1: import org.apache.activemq.command.ProducerInfo;
/////////////////////////////////////////////////////////////////////////
1:     
1:     /**
1:      * Adds a Producer.
0:      * @param context the environment the operation is being executed under.
1:      * @throws Exception TODO
1:      */
1:     void addProducer(ConnectionContext context, ProducerInfo info) throws Exception;
1: 
1:     /**
1:      * Removes a Producer.
0:      * @param context the environment the operation is being executed under.
1:      * @throws Exception TODO
1:      */
1:     void removeProducer(ConnectionContext context, ProducerInfo info) throws Exception;
1: 
commit:5f4db41
/////////////////////////////////////////////////////////////////////////
0:     Set <Destination>getDestinations(ActiveMQDestination destination);
commit:84eb9f8
/////////////////////////////////////////////////////////////////////////
1: import org.apache.activemq.broker.ConsumerBrokerExchange;
1: import org.apache.activemq.broker.ProducerBrokerExchange;
/////////////////////////////////////////////////////////////////////////
1:      * @param producerExchange the environment the operation is being executed under.
1:      * @param message 
0:     public void send(ProducerBrokerExchange producerExchange, Message message) throws Exception;
1:      * @param consumerExchange the environment the operation is being executed under.
0:     public void acknowledge(ConsumerBrokerExchange consumerExchange, MessageAck ack) throws Exception;
commit:4098942
/////////////////////////////////////////////////////////////////////////
1: import org.apache.activemq.command.MessageDispatchNotification;
/////////////////////////////////////////////////////////////////////////
1:     
1:     /**
1:      * Process a notification of a dispatch - used by a Slave Broker
1:      * @param messageDispatchNotification
0:      * @throws Throwable
1:      */
0:     public void processDispatchNotification(MessageDispatchNotification messageDispatchNotification) throws Throwable;
author:James Strachan
-------------------------------------------------------------------------------
commit:9d671b7
/////////////////////////////////////////////////////////////////////////
1: import org.apache.activemq.command.MessagePull;
1: import org.apache.activemq.command.Response;
/////////////////////////////////////////////////////////////////////////
1:      * Allows a consumer to pull a message from a queue
1:      */
0:     public Response messagePull(ConnectionContext context, MessagePull pull) throws Exception;
1: 
1:     /**
commit:06a5829
/////////////////////////////////////////////////////////////////////////
0: import java.util.Set;
/////////////////////////////////////////////////////////////////////////
1: 
1:     /**
1:      * Provide an exact or wildcard lookup of destinations in the region
0:      * 
1:      * @return a set of matching destination objects.
1:      */
0:     public Set getDestinations(ActiveMQDestination destination);
commit:d680ba1
/////////////////////////////////////////////////////////////////////////
0: import java.util.Map;
1: 
/////////////////////////////////////////////////////////////////////////
0:      * Returns a copy of the current destinations available in the region
0:      * 
0:      * @return a copy of the regions currently active at the time of the call with the key the destination and the value the Destination.
1:      */
0:     public Map getDestinationMap();
0:     
0: 
1:     /**
commit:0def1d4
/////////////////////////////////////////////////////////////////////////
1:      * @return TODO
0:     public Subscription addConsumer(ConnectionContext context, ConsumerInfo info) throws Exception;
============================================================================