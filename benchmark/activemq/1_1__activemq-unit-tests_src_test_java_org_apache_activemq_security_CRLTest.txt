1:0fd174b: /**
1:0fd174b:  * Licensed to the Apache Software Foundation (ASF) under one or more
1:0fd174b:  * contributor license agreements.  See the NOTICE file distributed with
1:0fd174b:  * this work for additional information regarding copyright ownership.
1:0fd174b:  * The ASF licenses this file to You under the Apache License, Version 2.0
1:0fd174b:  * (the "License"); you may not use this file except in compliance with
1:0fd174b:  * the License.  You may obtain a copy of the License at
1:0fd174b:  *
1:0fd174b:  *      http://www.apache.org/licenses/LICENSE-2.0
1:0fd174b:  *
1:0fd174b:  * Unless required by applicable law or agreed to in writing, software
1:0fd174b:  * distributed under the License is distributed on an "AS IS" BASIS,
1:0fd174b:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:0fd174b:  * See the License for the specific language governing permissions and
1:0fd174b:  * limitations under the License.
1:0fd174b:  */
1:0fd174b: package org.apache.activemq.security;
1:0fd174b: 
1:0fd174b: 
1:0fd174b: import junit.framework.TestCase;
1:0fd174b: import org.apache.activemq.ActiveMQConnectionFactory;
1:0fd174b: import org.apache.activemq.broker.BrokerFactory;
1:0fd174b: import org.apache.activemq.broker.BrokerService;
1:0fd174b: import org.junit.After;
1:0fd174b: import org.junit.Before;
1:0fd174b: import org.junit.Test;
1:0fd174b: 
1:0fd174b: import javax.jms.*;
1:0fd174b: 
1:0fd174b: import static junit.framework.TestCase.assertTrue;
1:0fd174b: 
1:0fd174b: public class CRLTest {
1:0fd174b: 
1:0fd174b:     BrokerService broker;
1:0fd174b: 
1:0fd174b:     @Before
1:0fd174b:     public void setup() throws Exception {
1:0fd174b:         broker = BrokerFactory.createBroker("xbean:src/test/resources/org/apache/activemq/security/activemq-revoke.xml");
1:0fd174b:         broker.waitUntilStarted();
1:0fd174b:     }
1:0fd174b: 
1:0fd174b:     @After
1:0fd174b:     public void after() throws Exception {
1:0fd174b:         broker.stop();
1:0fd174b:         broker.waitUntilStopped();
1:0fd174b:     }
1:0fd174b: 
1:0fd174b:     @Test
1:0fd174b:     public void testCRL() throws Exception {
1:0fd174b:         System.setProperty("javax.net.ssl.trustStore", "src/test/resources/org/apache/activemq/security/client.ts");
1:0fd174b:         System.setProperty("javax.net.ssl.trustStorePassword", "password");
1:0fd174b:         System.setProperty("javax.net.ssl.trustStoreType", "jks");
1:0fd174b:         System.setProperty("javax.net.ssl.keyStore", "src/test/resources/org/apache/activemq/security/activemq-revoke.jks");
1:0fd174b:         System.setProperty("javax.net.ssl.keyStorePassword", "password");
1:0fd174b:         System.setProperty("javax.net.ssl.keyStoreType", "jks");
1:0fd174b: 
1:0fd174b: 
1:0fd174b:         boolean failed = false;
1:0fd174b:         try {
1:0fd174b:             basicSendReceive("ssl://localhost:61617");
1:0fd174b:         } catch (Exception e) {
1:0fd174b:             failed = true;
1:0fd174b:         }
1:0fd174b: 
1:0fd174b:         assertTrue("Send should have failed", failed);
1:0fd174b:     }
1:0fd174b: 
1:0fd174b:     public void basicSendReceive(String uri) throws Exception {
1:0fd174b:         ActiveMQConnectionFactory factory = new ActiveMQConnectionFactory(uri);
1:0fd174b:         Connection connection = factory.createConnection();
1:0fd174b:         Session session = connection.createSession(false, Session.AUTO_ACKNOWLEDGE);
1:0fd174b:         connection.start();
1:0fd174b: 
1:0fd174b:         String body = "hello world!";
1:0fd174b:         Queue destination = session.createQueue("TEST");
1:0fd174b:         MessageProducer producer = session.createProducer(destination);
1:0fd174b:         producer.send(session.createTextMessage(body));
1:0fd174b: 
1:0fd174b:         MessageConsumer consumer = session.createConsumer(destination);
1:0fd174b:         Message received = consumer.receive(2000);
1:0fd174b:         TestCase.assertEquals(body, ((TextMessage)received).getText());
1:0fd174b:     }
1:0fd174b: 
1:0fd174b: }
============================================================================
author:Dejan Bosanac
-------------------------------------------------------------------------------
commit:0fd174b
/////////////////////////////////////////////////////////////////////////
1: /**
1:  * Licensed to the Apache Software Foundation (ASF) under one or more
1:  * contributor license agreements.  See the NOTICE file distributed with
1:  * this work for additional information regarding copyright ownership.
1:  * The ASF licenses this file to You under the Apache License, Version 2.0
1:  * (the "License"); you may not use this file except in compliance with
1:  * the License.  You may obtain a copy of the License at
1:  *
1:  *      http://www.apache.org/licenses/LICENSE-2.0
1:  *
1:  * Unless required by applicable law or agreed to in writing, software
1:  * distributed under the License is distributed on an "AS IS" BASIS,
1:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:  * See the License for the specific language governing permissions and
1:  * limitations under the License.
1:  */
1: package org.apache.activemq.security;
1: 
1: 
1: import junit.framework.TestCase;
1: import org.apache.activemq.ActiveMQConnectionFactory;
1: import org.apache.activemq.broker.BrokerFactory;
1: import org.apache.activemq.broker.BrokerService;
1: import org.junit.After;
1: import org.junit.Before;
1: import org.junit.Test;
1: 
1: import javax.jms.*;
1: 
1: import static junit.framework.TestCase.assertTrue;
1: 
1: public class CRLTest {
1: 
1:     BrokerService broker;
1: 
1:     @Before
1:     public void setup() throws Exception {
1:         broker = BrokerFactory.createBroker("xbean:src/test/resources/org/apache/activemq/security/activemq-revoke.xml");
1:         broker.waitUntilStarted();
1:     }
1: 
1:     @After
1:     public void after() throws Exception {
1:         broker.stop();
1:         broker.waitUntilStopped();
1:     }
1: 
1:     @Test
1:     public void testCRL() throws Exception {
1:         System.setProperty("javax.net.ssl.trustStore", "src/test/resources/org/apache/activemq/security/client.ts");
1:         System.setProperty("javax.net.ssl.trustStorePassword", "password");
1:         System.setProperty("javax.net.ssl.trustStoreType", "jks");
1:         System.setProperty("javax.net.ssl.keyStore", "src/test/resources/org/apache/activemq/security/activemq-revoke.jks");
1:         System.setProperty("javax.net.ssl.keyStorePassword", "password");
1:         System.setProperty("javax.net.ssl.keyStoreType", "jks");
1: 
1: 
1:         boolean failed = false;
1:         try {
1:             basicSendReceive("ssl://localhost:61617");
1:         } catch (Exception e) {
1:             failed = true;
1:         }
1: 
1:         assertTrue("Send should have failed", failed);
1:     }
1: 
1:     public void basicSendReceive(String uri) throws Exception {
1:         ActiveMQConnectionFactory factory = new ActiveMQConnectionFactory(uri);
1:         Connection connection = factory.createConnection();
1:         Session session = connection.createSession(false, Session.AUTO_ACKNOWLEDGE);
1:         connection.start();
1: 
1:         String body = "hello world!";
1:         Queue destination = session.createQueue("TEST");
1:         MessageProducer producer = session.createProducer(destination);
1:         producer.send(session.createTextMessage(body));
1: 
1:         MessageConsumer consumer = session.createConsumer(destination);
1:         Message received = consumer.receive(2000);
1:         TestCase.assertEquals(body, ((TextMessage)received).getText());
1:     }
1: 
1: }
============================================================================