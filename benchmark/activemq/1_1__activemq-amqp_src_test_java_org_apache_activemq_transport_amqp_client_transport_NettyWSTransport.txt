1:31c55f7: /*
1:31c55f7:  * Licensed to the Apache Software Foundation (ASF) under one or more
1:31c55f7:  * contributor license agreements.  See the NOTICE file distributed with
1:31c55f7:  * this work for additional information regarding copyright ownership.
1:31c55f7:  * The ASF licenses this file to You under the Apache License, Version 2.0
1:31c55f7:  * (the "License"); you may not use this file except in compliance with
1:31c55f7:  * the License.  You may obtain a copy of the License at
2:31c55f7:  *
1:31c55f7:  *      http://www.apache.org/licenses/LICENSE-2.0
1:31c55f7:  *
1:31c55f7:  * Unless required by applicable law or agreed to in writing, software
1:31c55f7:  * distributed under the License is distributed on an "AS IS" BASIS,
1:31c55f7:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:31c55f7:  * See the License for the specific language governing permissions and
1:31c55f7:  * limitations under the License.
3:31c55f7:  */
1:31c55f7: package org.apache.activemq.transport.amqp.client.transport;
46:31c55f7: 
1:31c55f7: import java.io.IOException;
1:31c55f7: import java.net.URI;
1:4b018b4: import java.nio.charset.StandardCharsets;
1:31c55f7: 
1:31c55f7: import org.slf4j.Logger;
1:31c55f7: import org.slf4j.LoggerFactory;
1:31c55f7: 
1:31c55f7: import io.netty.buffer.ByteBuf;
1:31c55f7: import io.netty.channel.Channel;
1:31c55f7: import io.netty.channel.ChannelHandlerContext;
1:4b018b4: import io.netty.channel.ChannelInboundHandlerAdapter;
1:4b018b4: import io.netty.channel.ChannelPipeline;
1:31c55f7: import io.netty.handler.codec.http.DefaultHttpHeaders;
1:31c55f7: import io.netty.handler.codec.http.FullHttpResponse;
1:31c55f7: import io.netty.handler.codec.http.HttpClientCodec;
1:31c55f7: import io.netty.handler.codec.http.HttpObjectAggregator;
1:31c55f7: import io.netty.handler.codec.http.websocketx.BinaryWebSocketFrame;
1:31c55f7: import io.netty.handler.codec.http.websocketx.CloseWebSocketFrame;
1:0eb11bf: import io.netty.handler.codec.http.websocketx.ContinuationWebSocketFrame;
1:4b018b4: import io.netty.handler.codec.http.websocketx.PingWebSocketFrame;
1:31c55f7: import io.netty.handler.codec.http.websocketx.PongWebSocketFrame;
1:31c55f7: import io.netty.handler.codec.http.websocketx.TextWebSocketFrame;
1:31c55f7: import io.netty.handler.codec.http.websocketx.WebSocketClientHandshaker;
1:31c55f7: import io.netty.handler.codec.http.websocketx.WebSocketClientHandshakerFactory;
1:31c55f7: import io.netty.handler.codec.http.websocketx.WebSocketFrame;
1:31c55f7: import io.netty.handler.codec.http.websocketx.WebSocketVersion;
1:31c55f7: 
3:31c55f7: /**
1:31c55f7:  * Transport for communicating over WebSockets
1:31c55f7:  */
1:4b018b4: public class NettyWSTransport extends NettyTcpTransport {
1:31c55f7: 
1:31c55f7:     private static final Logger LOG = LoggerFactory.getLogger(NettyWSTransport.class);
1:31c55f7: 
1:4b018b4:     private static final String AMQP_SUB_PROTOCOL = "amqp";
1:31c55f7: 
1:31c55f7:     /**
1:31c55f7:      * Create a new transport instance
1:31c55f7:      *
1:31c55f7:      * @param remoteLocation
1:31c55f7:      *        the URI that defines the remote resource to connect to.
1:31c55f7:      * @param options
1:31c55f7:      *        the transport options used to configure the socket connection.
1:31c55f7:      */
1:31c55f7:     public NettyWSTransport(URI remoteLocation, NettyTransportOptions options) {
1:31c55f7:         this(null, remoteLocation, options);
51:31c55f7:     }
1:31c55f7: 
1:31c55f7:     /**
1:31c55f7:      * Create a new transport instance
1:31c55f7:      *
1:31c55f7:      * @param listener
1:31c55f7:      *        the TransportListener that will receive events from this Transport.
1:31c55f7:      * @param remoteLocation
1:31c55f7:      *        the URI that defines the remote resource to connect to.
1:31c55f7:      * @param options
1:31c55f7:      *        the transport options used to configure the socket connection.
1:31c55f7:      */
1:31c55f7:     public NettyWSTransport(NettyTransportListener listener, URI remoteLocation, NettyTransportOptions options) {
1:4b018b4:         super(listener, remoteLocation, options);
1:31c55f7:     }
1:31c55f7: 
15:31c55f7:     @Override
1:31c55f7:     public void send(ByteBuf output) throws IOException {
2:31c55f7:         checkConnected();
1:31c55f7:         int length = output.readableBytes();
1:31c55f7:         if (length == 0) {
1:31c55f7:             return;
1:31c55f7:         }
1:31c55f7: 
1:31c55f7:         LOG.trace("Attempted write of: {} bytes", length);
1:31c55f7: 
1:31c55f7:         channel.writeAndFlush(new BinaryWebSocketFrame(output));
1:31c55f7:     }
1:31c55f7: 
1:31c55f7:     @Override
1:4b018b4:     protected ChannelInboundHandlerAdapter createChannelHandler() {
1:4b018b4:         return new NettyWebSocketTransportHandler();
1:31c55f7:     }
1:31c55f7: 
1:31c55f7:     @Override
1:4b018b4:     protected void addAdditionalHandlers(ChannelPipeline pipeline) {
1:4b018b4:         pipeline.addLast(new HttpClientCodec());
1:4b018b4:         pipeline.addLast(new HttpObjectAggregator(8192));
1:31c55f7:     }
1:31c55f7: 
1:31c55f7:     @Override
1:4b018b4:     protected void handleConnected(Channel channel) throws Exception {
1:4b018b4:         LOG.trace("Channel has become active, awaiting WebSocket handshake! Channel is {}", channel);
1:31c55f7:     }
1:31c55f7: 
1:31c55f7:     //----- Handle connection events -----------------------------------------//
1:31c55f7: 
1:4b018b4:     private class NettyWebSocketTransportHandler extends NettyDefaultHandler<Object> {
1:31c55f7: 
1:31c55f7:         private final WebSocketClientHandshaker handshaker;
1:31c55f7: 
1:4b018b4:         public NettyWebSocketTransportHandler() {
1:31c55f7:             handshaker = WebSocketClientHandshakerFactory.newHandshaker(
1:88efa01:                 getRemoteLocation(), WebSocketVersion.V13, AMQP_SUB_PROTOCOL,
1:88efa01:                 true, new DefaultHttpHeaders(), getMaxFrameSize());
1:31c55f7:         }
1:31c55f7: 
1:31c55f7:         @Override
1:31c55f7:         public void channelActive(ChannelHandlerContext context) throws Exception {
1:31c55f7:             handshaker.handshake(context.channel());
1:31c55f7: 
1:4b018b4:             super.channelActive(context);
1:31c55f7:         }
1:31c55f7: 
1:31c55f7:         @Override
1:31c55f7:         protected void channelRead0(ChannelHandlerContext ctx, Object message) throws Exception {
1:31c55f7:             LOG.trace("New data read: incoming: {}", message);
1:31c55f7: 
1:31c55f7:             Channel ch = ctx.channel();
1:31c55f7:             if (!handshaker.isHandshakeComplete()) {
1:31c55f7:                 handshaker.finishHandshake(ch, (FullHttpResponse) message);
1:4b018b4:                 LOG.trace("WebSocket Client connected! {}", ctx.channel());
1:4b018b4:                 // Now trigger super processing as we are really connected.
1:4b018b4:                 NettyWSTransport.super.handleConnected(ch);
1:31c55f7:                 return;
1:31c55f7:             }
1:31c55f7: 
1:31c55f7:             // We shouldn't get this since we handle the handshake previously.
1:31c55f7:             if (message instanceof FullHttpResponse) {
1:31c55f7:                 FullHttpResponse response = (FullHttpResponse) message;
1:31c55f7:                 throw new IllegalStateException(
1:154ff81:                     "Unexpected FullHttpResponse (getStatus=" + response.status() +
1:4b018b4:                     ", content=" + response.content().toString(StandardCharsets.UTF_8) + ')');
1:31c55f7:             }
1:31c55f7: 
1:31c55f7:             WebSocketFrame frame = (WebSocketFrame) message;
1:31c55f7:             if (frame instanceof TextWebSocketFrame) {
1:31c55f7:                 TextWebSocketFrame textFrame = (TextWebSocketFrame) frame;
1:31c55f7:                 LOG.warn("WebSocket Client received message: " + textFrame.text());
1:31c55f7:                 ctx.fireExceptionCaught(new IOException("Received invalid frame over WebSocket."));
1:31c55f7:             } else if (frame instanceof BinaryWebSocketFrame) {
1:31c55f7:                 BinaryWebSocketFrame binaryFrame = (BinaryWebSocketFrame) frame;
1:4b018b4:                 LOG.trace("WebSocket Client received data: {} bytes", binaryFrame.content().readableBytes());
1:31c55f7:                 listener.onData(binaryFrame.content());
1:0eb11bf:             } else if (frame instanceof ContinuationWebSocketFrame) {
1:0eb11bf:                 ContinuationWebSocketFrame binaryFrame = (ContinuationWebSocketFrame) frame;
1:0eb11bf:                 LOG.trace("WebSocket Client received data continuation: {} bytes", binaryFrame.content().readableBytes());
1:0eb11bf:                 listener.onData(binaryFrame.content());
1:4b018b4:             } else if (frame instanceof PingWebSocketFrame) {
1:4b018b4:                 LOG.trace("WebSocket Client received ping, response with pong");
1:4b018b4:                 ch.write(new PongWebSocketFrame(frame.content()));
1:31c55f7:             } else if (frame instanceof CloseWebSocketFrame) {
1:31c55f7:                 LOG.trace("WebSocket Client received closing");
1:31c55f7:                 ch.close();
1:31c55f7:             }
1:31c55f7:         }
1:31c55f7:     }
1:31c55f7: }
============================================================================
author:Timothy Bish
-------------------------------------------------------------------------------
commit:0eb11bf
/////////////////////////////////////////////////////////////////////////
1: import io.netty.handler.codec.http.websocketx.ContinuationWebSocketFrame;
/////////////////////////////////////////////////////////////////////////
1:             } else if (frame instanceof ContinuationWebSocketFrame) {
1:                 ContinuationWebSocketFrame binaryFrame = (ContinuationWebSocketFrame) frame;
1:                 LOG.trace("WebSocket Client received data continuation: {} bytes", binaryFrame.content().readableBytes());
1:                 listener.onData(binaryFrame.content());
commit:88efa01
/////////////////////////////////////////////////////////////////////////
1:                 getRemoteLocation(), WebSocketVersion.V13, AMQP_SUB_PROTOCOL,
1:                 true, new DefaultHttpHeaders(), getMaxFrameSize());
commit:154ff81
/////////////////////////////////////////////////////////////////////////
1:                     "Unexpected FullHttpResponse (getStatus=" + response.status() +
commit:4b018b4
/////////////////////////////////////////////////////////////////////////
1: import java.nio.charset.StandardCharsets;
1: import io.netty.channel.ChannelInboundHandlerAdapter;
1: import io.netty.channel.ChannelPipeline;
1: import io.netty.handler.codec.http.websocketx.PingWebSocketFrame;
1: public class NettyWSTransport extends NettyTcpTransport {
1:     private static final String AMQP_SUB_PROTOCOL = "amqp";
/////////////////////////////////////////////////////////////////////////
1:         super(listener, remoteLocation, options);
/////////////////////////////////////////////////////////////////////////
1:     protected ChannelInboundHandlerAdapter createChannelHandler() {
1:         return new NettyWebSocketTransportHandler();
1:     protected void addAdditionalHandlers(ChannelPipeline pipeline) {
1:         pipeline.addLast(new HttpClientCodec());
1:         pipeline.addLast(new HttpObjectAggregator(8192));
1:     protected void handleConnected(Channel channel) throws Exception {
1:         LOG.trace("Channel has become active, awaiting WebSocket handshake! Channel is {}", channel);
1:     private class NettyWebSocketTransportHandler extends NettyDefaultHandler<Object> {
1:         public NettyWebSocketTransportHandler() {
0:                 getRemoteLocation(), WebSocketVersion.V13, AMQP_SUB_PROTOCOL, true, new DefaultHttpHeaders());
1:             super.channelActive(context);
/////////////////////////////////////////////////////////////////////////
1:                 LOG.trace("WebSocket Client connected! {}", ctx.channel());
1:                 // Now trigger super processing as we are really connected.
1:                 NettyWSTransport.super.handleConnected(ch);
/////////////////////////////////////////////////////////////////////////
1:                     ", content=" + response.content().toString(StandardCharsets.UTF_8) + ')');
/////////////////////////////////////////////////////////////////////////
1:                 LOG.trace("WebSocket Client received data: {} bytes", binaryFrame.content().readableBytes());
1:             } else if (frame instanceof PingWebSocketFrame) {
1:                 LOG.trace("WebSocket Client received ping, response with pong");
1:                 ch.write(new PongWebSocketFrame(frame.content()));
commit:31c55f7
/////////////////////////////////////////////////////////////////////////
1: /*
1:  * Licensed to the Apache Software Foundation (ASF) under one or more
1:  * contributor license agreements.  See the NOTICE file distributed with
1:  * this work for additional information regarding copyright ownership.
1:  * The ASF licenses this file to You under the Apache License, Version 2.0
1:  * (the "License"); you may not use this file except in compliance with
1:  * the License.  You may obtain a copy of the License at
1:  *
1:  *      http://www.apache.org/licenses/LICENSE-2.0
1:  *
1:  * Unless required by applicable law or agreed to in writing, software
1:  * distributed under the License is distributed on an "AS IS" BASIS,
1:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:  * See the License for the specific language governing permissions and
1:  * limitations under the License.
1:  */
1: package org.apache.activemq.transport.amqp.client.transport;
1: 
1: import java.io.IOException;
1: import java.net.URI;
0: import java.security.Principal;
0: import java.util.concurrent.TimeUnit;
0: import java.util.concurrent.atomic.AtomicBoolean;
1: 
0: import org.apache.activemq.transport.amqp.client.util.IOExceptionSupport;
1: import org.slf4j.Logger;
1: import org.slf4j.LoggerFactory;
1: 
0: import io.netty.bootstrap.Bootstrap;
1: import io.netty.buffer.ByteBuf;
1: import io.netty.channel.Channel;
0: import io.netty.channel.ChannelFuture;
0: import io.netty.channel.ChannelFutureListener;
1: import io.netty.channel.ChannelHandlerContext;
0: import io.netty.channel.ChannelInitializer;
0: import io.netty.channel.ChannelOption;
0: import io.netty.channel.ChannelPromise;
0: import io.netty.channel.EventLoopGroup;
0: import io.netty.channel.FixedRecvByteBufAllocator;
0: import io.netty.channel.SimpleChannelInboundHandler;
0: import io.netty.channel.nio.NioEventLoopGroup;
0: import io.netty.channel.socket.nio.NioSocketChannel;
1: import io.netty.handler.codec.http.DefaultHttpHeaders;
1: import io.netty.handler.codec.http.FullHttpResponse;
1: import io.netty.handler.codec.http.HttpClientCodec;
1: import io.netty.handler.codec.http.HttpObjectAggregator;
1: import io.netty.handler.codec.http.websocketx.BinaryWebSocketFrame;
1: import io.netty.handler.codec.http.websocketx.CloseWebSocketFrame;
1: import io.netty.handler.codec.http.websocketx.PongWebSocketFrame;
1: import io.netty.handler.codec.http.websocketx.TextWebSocketFrame;
1: import io.netty.handler.codec.http.websocketx.WebSocketClientHandshaker;
1: import io.netty.handler.codec.http.websocketx.WebSocketClientHandshakerFactory;
1: import io.netty.handler.codec.http.websocketx.WebSocketFrame;
1: import io.netty.handler.codec.http.websocketx.WebSocketVersion;
0: import io.netty.handler.ssl.SslHandler;
0: import io.netty.util.CharsetUtil;
0: import io.netty.util.concurrent.Future;
0: import io.netty.util.concurrent.GenericFutureListener;
1: 
1: /**
1:  * Transport for communicating over WebSockets
1:  */
0: public class NettyWSTransport implements NettyTransport {
1: 
1:     private static final Logger LOG = LoggerFactory.getLogger(NettyWSTransport.class);
1: 
0:     private static final int QUIET_PERIOD = 20;
0:     private static final int SHUTDOWN_TIMEOUT = 100;
1: 
0:     protected Bootstrap bootstrap;
0:     protected EventLoopGroup group;
0:     protected Channel channel;
0:     protected NettyTransportListener listener;
0:     protected NettyTransportOptions options;
0:     protected final URI remote;
0:     protected boolean secure;
1: 
0:     private final AtomicBoolean connected = new AtomicBoolean();
0:     private final AtomicBoolean closed = new AtomicBoolean();
0:     private ChannelPromise handshakeFuture;
0:     private IOException failureCause;
0:     private Throwable pendingFailure;
1: 
1:     /**
1:      * Create a new transport instance
1:      *
1:      * @param remoteLocation
1:      *        the URI that defines the remote resource to connect to.
1:      * @param options
1:      *        the transport options used to configure the socket connection.
1:      */
1:     public NettyWSTransport(URI remoteLocation, NettyTransportOptions options) {
1:         this(null, remoteLocation, options);
1:     }
1: 
1:     /**
1:      * Create a new transport instance
1:      *
1:      * @param listener
1:      *        the TransportListener that will receive events from this Transport.
1:      * @param remoteLocation
1:      *        the URI that defines the remote resource to connect to.
1:      * @param options
1:      *        the transport options used to configure the socket connection.
1:      */
1:     public NettyWSTransport(NettyTransportListener listener, URI remoteLocation, NettyTransportOptions options) {
0:         this.options = options;
0:         this.listener = listener;
0:         this.remote = remoteLocation;
0:         this.secure = remoteLocation.getScheme().equalsIgnoreCase("wss");
1:     }
1: 
1:     @Override
0:     public void connect() throws IOException {
1: 
0:         if (listener == null) {
0:             throw new IllegalStateException("A transport listener must be set before connection attempts.");
1:         }
1: 
0:         group = new NioEventLoopGroup(1);
1: 
0:         bootstrap = new Bootstrap();
0:         bootstrap.group(group);
0:         bootstrap.channel(NioSocketChannel.class);
0:         bootstrap.handler(new ChannelInitializer<Channel>() {
1: 
1:             @Override
0:             public void initChannel(Channel connectedChannel) throws Exception {
0:                 configureChannel(connectedChannel);
1:             }
0:         });
1: 
0:         configureNetty(bootstrap, getTransportOptions());
1: 
0:         ChannelFuture future;
0:         try {
0:             future = bootstrap.connect(getRemoteHost(), getRemotePort());
0:             future.addListener(new ChannelFutureListener() {
1: 
1:                 @Override
0:                 public void operationComplete(ChannelFuture future) throws Exception {
0:                     if (future.isSuccess()) {
0:                         handleConnected(future.channel());
0:                     } else if (future.isCancelled()) {
0:                         connectionFailed(future.channel(), new IOException("Connection attempt was cancelled"));
0:                     } else {
0:                         connectionFailed(future.channel(), IOExceptionSupport.create(future.cause()));
1:                     }
1:                 }
0:             });
1: 
0:             future.sync();
1: 
0:             // Now wait for WS protocol level handshake completion
0:             handshakeFuture.await();
0:         } catch (InterruptedException ex) {
0:             LOG.debug("Transport connection attempt was interrupted.");
0:             Thread.interrupted();
0:             failureCause = IOExceptionSupport.create(ex);
1:         }
1: 
0:         if (failureCause != null) {
0:             // Close out any Netty resources now as they are no longer needed.
0:             if (channel != null) {
0:                 channel.close().syncUninterruptibly();
0:                 channel = null;
1:             }
0:             if (group != null) {
0:                 group.shutdownGracefully(QUIET_PERIOD, SHUTDOWN_TIMEOUT, TimeUnit.MILLISECONDS);
0:                 group = null;
1:             }
1: 
0:             throw failureCause;
0:         } else {
0:             // Connected, allow any held async error to fire now and close the transport.
0:             channel.eventLoop().execute(new Runnable() {
1: 
1:                 @Override
0:                 public void run() {
0:                     if (pendingFailure != null) {
0:                         channel.pipeline().fireExceptionCaught(pendingFailure);
1:                     }
1:                 }
0:             });
1:         }
1:     }
1: 
1:     @Override
0:     public boolean isConnected() {
0:         return connected.get();
1:     }
1: 
1:     @Override
0:     public boolean isSSL() {
0:         return secure;
1:     }
1: 
1:     @Override
0:     public void close() throws IOException {
0:         if (closed.compareAndSet(false, true)) {
0:             connected.set(false);
0:             if (channel != null) {
0:                 channel.close().syncUninterruptibly();
1:             }
0:             if (group != null) {
0:                 group.shutdownGracefully(QUIET_PERIOD, SHUTDOWN_TIMEOUT, TimeUnit.MILLISECONDS);
1:             }
1:         }
1:     }
1: 
1:     @Override
0:     public ByteBuf allocateSendBuffer(int size) throws IOException {
1:         checkConnected();
0:         return channel.alloc().ioBuffer(size, size);
1:     }
1: 
1:     @Override
1:     public void send(ByteBuf output) throws IOException {
1:         checkConnected();
1:         int length = output.readableBytes();
1:         if (length == 0) {
1:             return;
1:         }
1: 
1:         LOG.trace("Attempted write of: {} bytes", length);
1: 
1:         channel.writeAndFlush(new BinaryWebSocketFrame(output));
1:     }
1: 
1:     @Override
0:     public NettyTransportListener getTransportListener() {
0:         return listener;
1:     }
1: 
1:     @Override
0:     public void setTransportListener(NettyTransportListener listener) {
0:         this.listener = listener;
1:     }
1: 
1:     @Override
0:     public NettyTransportOptions getTransportOptions() {
0:         if (options == null) {
0:             if (isSSL()) {
0:                 options = NettyTransportSslOptions.INSTANCE;
0:             } else {
0:                 options = NettyTransportOptions.INSTANCE;
1:             }
1:         }
1: 
0:         return options;
1:     }
1: 
1:     @Override
0:     public URI getRemoteLocation() {
0:         return remote;
1:     }
1: 
1:     @Override
0:     public Principal getLocalPrincipal() {
0:         if (!isSSL()) {
0:             throw new UnsupportedOperationException("Not connected to a secure channel");
1:         }
1: 
0:         SslHandler sslHandler = channel.pipeline().get(SslHandler.class);
1: 
0:         return sslHandler.engine().getSession().getLocalPrincipal();
1:     }
1: 
0:     //----- Internal implementation details, can be overridden as needed --//
1: 
0:     protected String getRemoteHost() {
0:         return remote.getHost();
1:     }
1: 
0:     protected int getRemotePort() {
0:         int port = remote.getPort();
1: 
0:         if (port <= 0) {
0:             if (isSSL()) {
0:                 port = getSslOptions().getDefaultSslPort();
0:             } else {
0:                 port = getTransportOptions().getDefaultTcpPort();
1:             }
1:         }
1: 
0:         return port;
1:     }
1: 
0:     protected void configureNetty(Bootstrap bootstrap, NettyTransportOptions options) {
0:         bootstrap.option(ChannelOption.TCP_NODELAY, options.isTcpNoDelay());
0:         bootstrap.option(ChannelOption.CONNECT_TIMEOUT_MILLIS, options.getConnectTimeout());
0:         bootstrap.option(ChannelOption.SO_KEEPALIVE, options.isTcpKeepAlive());
0:         bootstrap.option(ChannelOption.SO_LINGER, options.getSoLinger());
0:         bootstrap.option(ChannelOption.ALLOCATOR, PartialPooledByteBufAllocator.INSTANCE);
1: 
0:         if (options.getSendBufferSize() != -1) {
0:             bootstrap.option(ChannelOption.SO_SNDBUF, options.getSendBufferSize());
1:         }
1: 
0:         if (options.getReceiveBufferSize() != -1) {
0:             bootstrap.option(ChannelOption.SO_RCVBUF, options.getReceiveBufferSize());
0:             bootstrap.option(ChannelOption.RCVBUF_ALLOCATOR, new FixedRecvByteBufAllocator(options.getReceiveBufferSize()));
1:         }
1: 
0:         if (options.getTrafficClass() != -1) {
0:             bootstrap.option(ChannelOption.IP_TOS, options.getTrafficClass());
1:         }
1:     }
1: 
0:     protected void configureChannel(final Channel channel) throws Exception {
0:         if (isSSL()) {
0:             SslHandler sslHandler = NettyTransportSupport.createSslHandler(getRemoteLocation(), getSslOptions());
0:             sslHandler.handshakeFuture().addListener(new GenericFutureListener<Future<Channel>>() {
1:                 @Override
0:                 public void operationComplete(Future<Channel> future) throws Exception {
0:                     if (future.isSuccess()) {
0:                         LOG.trace("SSL Handshake has completed: {}", channel);
0:                         connectionEstablished(channel);
0:                     } else {
0:                         LOG.trace("SSL Handshake has failed: {}", channel);
0:                         connectionFailed(channel, IOExceptionSupport.create(future.cause()));
1:                     }
1:                 }
0:             });
1: 
0:             channel.pipeline().addLast(sslHandler);
1:         }
1: 
0:         channel.pipeline().addLast(new HttpClientCodec());
0:         channel.pipeline().addLast(new HttpObjectAggregator(8192));
0:         channel.pipeline().addLast(new NettyTcpTransportHandler());
1:     }
1: 
0:     protected void handleConnected(final Channel channel) throws Exception {
0:         if (!isSSL()) {
0:             connectionEstablished(channel);
1:         }
1:     }
1: 
0:     //----- State change handlers and checks ---------------------------------//
1: 
1:     /**
0:      * Called when the transport has successfully connected and is ready for use.
1:      */
0:     protected void connectionEstablished(Channel connectedChannel) {
0:         LOG.info("WebSocket connectionEstablished! {}", connectedChannel);
0:         channel = connectedChannel;
0:         connected.set(true);
1:     }
1: 
1:     /**
0:      * Called when the transport connection failed and an error should be returned.
1:      *
0:      * @param failedChannel
0:      *      The Channel instance that failed.
0:      * @param cause
0:      *      An IOException that describes the cause of the failed connection.
1:      */
0:     protected void connectionFailed(Channel failedChannel, IOException cause) {
0:         failureCause = IOExceptionSupport.create(cause);
0:         channel = failedChannel;
0:         connected.set(false);
0:         handshakeFuture.setFailure(cause);
1:     }
1: 
0:     private NettyTransportSslOptions getSslOptions() {
0:         return (NettyTransportSslOptions) getTransportOptions();
1:     }
1: 
0:     private void checkConnected() throws IOException {
0:         if (!connected.get()) {
0:             throw new IOException("Cannot send to a non-connected transport.");
1:         }
1:     }
1: 
1:     //----- Handle connection events -----------------------------------------//
1: 
0:     private class NettyTcpTransportHandler extends SimpleChannelInboundHandler<Object> {
1: 
1:         private final WebSocketClientHandshaker handshaker;
1: 
0:         public NettyTcpTransportHandler() {
1:             handshaker = WebSocketClientHandshakerFactory.newHandshaker(
0:                 remote, WebSocketVersion.V13, "amqp", false, new DefaultHttpHeaders());
1:         }
1: 
1:         @Override
0:         public void handlerAdded(ChannelHandlerContext context) {
0:             LOG.trace("Handler has become added! Channel is {}", context.channel());
0:             handshakeFuture = context.newPromise();
1:         }
1: 
1:         @Override
1:         public void channelActive(ChannelHandlerContext context) throws Exception {
0:             LOG.trace("Channel has become active! Channel is {}", context.channel());
1:             handshaker.handshake(context.channel());
1:         }
1: 
1:         @Override
0:         public void channelInactive(ChannelHandlerContext context) throws Exception {
0:             LOG.trace("Channel has gone inactive! Channel is {}", context.channel());
0:             if (connected.compareAndSet(true, false) && !closed.get()) {
0:                 LOG.trace("Firing onTransportClosed listener");
0:                 listener.onTransportClosed();
1:             }
1:         }
1: 
1:         @Override
0:         public void exceptionCaught(ChannelHandlerContext context, Throwable cause) throws Exception {
0:             LOG.trace("Exception on channel! Channel is {} -> {}", context.channel(), cause.getMessage());
0:             LOG.trace("Error Stack: ", cause);
0:             if (connected.compareAndSet(true, false) && !closed.get()) {
0:                 LOG.trace("Firing onTransportError listener");
0:                 if (pendingFailure != null) {
0:                     listener.onTransportError(pendingFailure);
0:                 } else {
0:                     listener.onTransportError(cause);
1:                 }
0:             } else {
0:                 // Hold the first failure for later dispatch if connect succeeds.
0:                 // This will then trigger disconnect using the first error reported.
0:                 if (pendingFailure != null) {
0:                     LOG.trace("Holding error until connect succeeds: {}", cause.getMessage());
0:                     pendingFailure = cause;
1:                 }
1: 
0:                 if (!handshakeFuture.isDone()) {
0:                     handshakeFuture.setFailure(cause);
1:                 }
1:             }
1:         }
1: 
1:         @Override
1:         protected void channelRead0(ChannelHandlerContext ctx, Object message) throws Exception {
1:             LOG.trace("New data read: incoming: {}", message);
1: 
1:             Channel ch = ctx.channel();
1:             if (!handshaker.isHandshakeComplete()) {
1:                 handshaker.finishHandshake(ch, (FullHttpResponse) message);
0:                 LOG.info("WebSocket Client connected! {}", ctx.channel());
0:                 handshakeFuture.setSuccess();
1:                 return;
1:             }
1: 
1:             // We shouldn't get this since we handle the handshake previously.
1:             if (message instanceof FullHttpResponse) {
1:                 FullHttpResponse response = (FullHttpResponse) message;
1:                 throw new IllegalStateException(
0:                     "Unexpected FullHttpResponse (getStatus=" + response.getStatus() +
0:                     ", content=" + response.content().toString(CharsetUtil.UTF_8) + ')');
1:             }
1: 
1:             WebSocketFrame frame = (WebSocketFrame) message;
1:             if (frame instanceof TextWebSocketFrame) {
1:                 TextWebSocketFrame textFrame = (TextWebSocketFrame) frame;
1:                 LOG.warn("WebSocket Client received message: " + textFrame.text());
1:                 ctx.fireExceptionCaught(new IOException("Received invalid frame over WebSocket."));
1:             } else if (frame instanceof BinaryWebSocketFrame) {
1:                 BinaryWebSocketFrame binaryFrame = (BinaryWebSocketFrame) frame;
0:                 LOG.info("WebSocket Client received data: {} bytes", binaryFrame.content().readableBytes());
1:                 listener.onData(binaryFrame.content());
0:             } else if (frame instanceof PongWebSocketFrame) {
0:                 LOG.trace("WebSocket Client received pong");
1:             } else if (frame instanceof CloseWebSocketFrame) {
1:                 LOG.trace("WebSocket Client received closing");
1:                 ch.close();
1:             }
1:         }
1:     }
1: }
============================================================================