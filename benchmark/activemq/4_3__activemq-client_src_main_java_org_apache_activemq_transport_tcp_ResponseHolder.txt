1:d29ca2a: /**
1:57b4941:  * Licensed to the Apache Software Foundation (ASF) under one or more
1:57b4941:  * contributor license agreements.  See the NOTICE file distributed with
1:57b4941:  * this work for additional information regarding copyright ownership.
1:57b4941:  * The ASF licenses this file to You under the Apache License, Version 2.0
1:57b4941:  * (the "License"); you may not use this file except in compliance with
1:57b4941:  * the License.  You may obtain a copy of the License at
1:74a7a8b:  *
1:230a86c:  *      http://www.apache.org/licenses/LICENSE-2.0
1:b0c2a40:  *
1:d29ca2a:  * Unless required by applicable law or agreed to in writing, software
1:d29ca2a:  * distributed under the License is distributed on an "AS IS" BASIS,
1:d29ca2a:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:d29ca2a:  * See the License for the specific language governing permissions and
1:d29ca2a:  * limitations under the License.
1:d29ca2a:  */
1:d29ca2a: package org.apache.activemq.transport.tcp;
1:d29ca2a: 
1:d29ca2a: import org.apache.activemq.command.Response;
1:d29ca2a: 
1:d29ca2a: /**
1:d29ca2a:  * ResponseHolder utility
1:d29ca2a:  */
1:d29ca2a: public class ResponseHolder {
1:d29ca2a:     protected Response response;
1:d29ca2a:     protected Object lock = new Object();
1:d29ca2a:     protected boolean notified;
1:d29ca2a: 
1:d29ca2a:     /**
1:d29ca2a:      * Construct a receipt holder
1:d29ca2a:      */
1:d29ca2a:     public ResponseHolder() {
2:d29ca2a:     }
1:d29ca2a: 
1:d29ca2a:     /**
1:d29ca2a:      * Set the Response for this holder
1:d8c0ff1:      *
1:d8c0ff1:      * @param response
1:d8c0ff1:      *      the response returned from the remote peer.
1:d29ca2a:      */
1:d29ca2a:     public void setResponse(Response r) {
1:d29ca2a:         synchronized (lock) {
1:d29ca2a:             this.response = r;
1:d29ca2a:             notified = true;
1:d29ca2a:             lock.notify();
1:d29ca2a:         }
1:d29ca2a:     }
1:d29ca2a: 
1:d29ca2a:     /**
1:d29ca2a:      * Get the Response
1:d8c0ff1:      *
1:d29ca2a:      * @return the Response or null if it is closed
1:d29ca2a:      */
1:d29ca2a:     public Response getResponse() {
1:d29ca2a:         return getResponse(0);
1:d29ca2a:     }
1:d29ca2a: 
1:d29ca2a:     /**
1:d8c0ff1:      * wait up to <Code>timeout</Code> timeout milliseconds to get a receipt
1:d8c0ff1:      *
1:d29ca2a:      * @param timeout
1:d8c0ff1:      * @return the Response that was set or null if none set yet.
1:d29ca2a:      */
1:d29ca2a:     public Response getResponse(int timeout) {
1:d29ca2a:         synchronized (lock) {
1:d29ca2a:             if (!notified) {
1:d29ca2a:                 try {
1:d29ca2a:                     lock.wait(timeout);
1:74a7a8b:                 } catch (InterruptedException e) {
1:cfbb3c8:                     Thread.currentThread().interrupt();
1:d29ca2a:                 }
1:d29ca2a:             }
1:d29ca2a:         }
1:d29ca2a:         return this.response;
1:d29ca2a:     }
1:d29ca2a: 
1:d29ca2a:     /**
1:d29ca2a:      * close this holder
1:d29ca2a:      */
1:d29ca2a:     public void close() {
1:d29ca2a:         synchronized (lock) {
1:d29ca2a:             notified = true;
1:d29ca2a:             lock.notifyAll();
1:d29ca2a:         }
1:d29ca2a:     }
1:d29ca2a: }
============================================================================
author:Hadrian Zbarcea
-------------------------------------------------------------------------------
commit:d54d046
author:Timothy Bish
-------------------------------------------------------------------------------
commit:d8c0ff1
/////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////
1:      *
1:      * @param response
1:      *      the response returned from the remote peer.
/////////////////////////////////////////////////////////////////////////
1:      *
/////////////////////////////////////////////////////////////////////////
1:      * wait up to <Code>timeout</Code> timeout milliseconds to get a receipt
1:      *
1:      * @return the Response that was set or null if none set yet.
author:Hiram R. Chirino
-------------------------------------------------------------------------------
commit:9a8f6e4
commit:b0c2a40
/////////////////////////////////////////////////////////////////////////
1:  * 
commit:74a7a8b
/////////////////////////////////////////////////////////////////////////
1:      * 
/////////////////////////////////////////////////////////////////////////
0:      * 
/////////////////////////////////////////////////////////////////////////
1:                 } catch (InterruptedException e) {
commit:230a86c
/////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////
1:  *      http://www.apache.org/licenses/LICENSE-2.0
commit:57b4941
/////////////////////////////////////////////////////////////////////////
1:  * Licensed to the Apache Software Foundation (ASF) under one or more
1:  * contributor license agreements.  See the NOTICE file distributed with
1:  * this work for additional information regarding copyright ownership.
1:  * The ASF licenses this file to You under the Apache License, Version 2.0
1:  * (the "License"); you may not use this file except in compliance with
1:  * the License.  You may obtain a copy of the License at
commit:48b4869
/////////////////////////////////////////////////////////////////////////
0:  * Copyright 2005-2006 The Apache Software Foundation
commit:d29ca2a
/////////////////////////////////////////////////////////////////////////
1: /**
0:  *
0:  * Copyright 2004 The Apache Software Foundation
0:  *
0:  * Licensed under the Apache License, Version 2.0 (the "License");
0:  * you may not use this file except in compliance with the License.
0:  * You may obtain a copy of the License at
0:  *
0:  * http://www.apache.org/licenses/LICENSE-2.0
0:  *
1:  * Unless required by applicable law or agreed to in writing, software
1:  * distributed under the License is distributed on an "AS IS" BASIS,
1:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:  * See the License for the specific language governing permissions and
1:  * limitations under the License.
1:  */
1: package org.apache.activemq.transport.tcp;
1: 
1: import org.apache.activemq.command.Response;
1: 
1: /**
1:  * ResponseHolder utility
0:  * 
0:  * @version $Revision: 1.1.1.1 $
1:  */
1: public class ResponseHolder {
1:     protected Response response;
1:     protected Object lock = new Object();
1:     protected boolean notified;
1: 
1:     /**
1:      * Construct a receipt holder
1:      */
1:     public ResponseHolder() {
1:     }
1: 
1:     /**
1:      * Set the Response for this holder
0:      *
0:      * @param r
1:      */
1:     public void setResponse(Response r) {
1:         synchronized (lock) {
1:             this.response = r;
1:             notified = true;
1:             lock.notify();
1:         }
1:     }
1: 
1:     /**
1:      * Get the Response
0:      * 
1:      * @return the Response or null if it is closed
1:      */
1:     public Response getResponse() {
1:         return getResponse(0);
1:     }
1: 
1:     /**
0:      * wait upto <Code>timeout</Code> timeout ms to get a receipt
0:      *
1:      * @param timeout
0:      * @return
1:      */
1:     public Response getResponse(int timeout) {
1:         synchronized (lock) {
1:             if (!notified) {
1:                 try {
1:                     lock.wait(timeout);
1:                 }
0:                 catch (InterruptedException e) {
0:                     e.printStackTrace();
1:                 }
1:             }
1:         }
1:         return this.response;
1:     }
1: 
1:     /**
1:      * close this holder
1:      */
1:     public void close() {
1:         synchronized (lock) {
1:             notified = true;
1:             lock.notifyAll();
1:         }
1:     }
1: }
author:James Strachan
-------------------------------------------------------------------------------
commit:cfbb3c8
/////////////////////////////////////////////////////////////////////////
1:                     Thread.currentThread().interrupt();
============================================================================