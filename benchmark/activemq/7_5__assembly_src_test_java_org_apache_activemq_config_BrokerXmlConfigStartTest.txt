1:d3fb1aa: /**
1:d3fb1aa:  * Licensed to the Apache Software Foundation (ASF) under one or more
1:d3fb1aa:  * contributor license agreements.  See the NOTICE file distributed with
1:d3fb1aa:  * this work for additional information regarding copyright ownership.
1:d3fb1aa:  * The ASF licenses this file to You under the Apache License, Version 2.0
1:d3fb1aa:  * (the "License"); you may not use this file except in compliance with
1:d3fb1aa:  * the License.  You may obtain a copy of the License at
1:d3fb1aa:  *
1:d3fb1aa:  *      http://www.apache.org/licenses/LICENSE-2.0
1:d3fb1aa:  *
1:d3fb1aa:  * Unless required by applicable law or agreed to in writing, software
1:d3fb1aa:  * distributed under the License is distributed on an "AS IS" BASIS,
1:d3fb1aa:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:d3fb1aa:  * See the License for the specific language governing permissions and
1:d3fb1aa:  * limitations under the License.
1:d3fb1aa:  */
1:d3fb1aa: package org.apache.activemq.config;
6:d3fb1aa: 
1:d3fb1aa: import java.io.File;
1:d3fb1aa: import java.io.FileFilter;
1:d3fb1aa: import java.io.FileInputStream;
1:07dad1c: import java.io.IOException;
1:d3fb1aa: import java.net.URI;
1:af8f5f9: import java.util.ArrayList;
1:af8f5f9: import java.util.Collection;
1:af8f5f9: import java.util.List;
1:d3fb1aa: import java.util.Properties;
1:d3fb1aa: import java.util.concurrent.TimeUnit;
1:0530aac: import java.util.concurrent.TimeoutException;
1:d3fb1aa: 
1:d3fb1aa: import javax.jms.Connection;
1:d3fb1aa: 
1:d3fb1aa: import junit.framework.TestCase;
1:d3fb1aa: import org.apache.activemq.ActiveMQConnectionFactory;
1:d3fb1aa: import org.apache.activemq.broker.BrokerFactory;
1:d3fb1aa: import org.apache.activemq.broker.BrokerService;
1:d3fb1aa: import org.apache.activemq.broker.TransportConnector;
1:d3fb1aa: import org.apache.activemq.transport.stomp.StompConnection;
1:b469638: import org.apache.activemq.util.URISupport;
1:af8f5f9: import org.junit.After;
1:af8f5f9: import org.junit.Before;
1:af8f5f9: import org.junit.Ignore;
1:af8f5f9: import org.junit.Test;
1:af8f5f9: import org.junit.runner.RunWith;
1:af8f5f9: import org.junit.runners.Parameterized;
1:8bf987b: import org.slf4j.Logger;
1:8bf987b: import org.slf4j.LoggerFactory;
1:d3fb1aa: 
1:af8f5f9: @RunWith(value = Parameterized.class)
1:af8f5f9: public class BrokerXmlConfigStartTest {
1:d3fb1aa: 
1:8bf987b:     private static final Logger LOG = LoggerFactory.getLogger(BrokerXmlConfigStartTest.class);
1:d3fb1aa:     Properties secProps;
1:d3fb1aa: 
1:af8f5f9:     private String configUrl;
1:0530aac:     private String shortName;
1:af8f5f9: 
1:0530aac:     @Parameterized.Parameters(name = "{1}")
1:07dad1c:     public static Collection<String[]> getTestParameters() throws IOException {
1:af8f5f9:         List<String[]> configUrls = new ArrayList<String[]>();
1:0530aac:         configUrls.add(new String[]{"xbean:src/release/conf/activemq.xml", "activemq.xml"});
1:af8f5f9: 
1:07dad1c:         String osName=System.getProperty("os.name");
1:07dad1c:         LOG.info("os.name {} ", osName);
1:d3fb1aa:         File sampleConfDir = new File("target/conf");
1:07dad1c:         String sampleConfDirPath = sampleConfDir.getAbsolutePath();
1:07dad1c:         if (osName.toLowerCase().contains("windows")) {
1:07dad1c:             sampleConfDirPath = sampleConfDirPath.substring(2); // Chop off drive letter and :
1:07dad1c:             sampleConfDirPath = sampleConfDirPath.replace("\\", "/");
1:07dad1c:         }
1:07dad1c: 
1:d3fb1aa:         for (File xmlFile : sampleConfDir.listFiles(new FileFilter() {
1:d3fb1aa:             public boolean accept(File pathname) {
1:d3fb1aa:                 return pathname.isFile() &&
1:af8f5f9:                         pathname.getName().startsWith("activemq-") &&
1:af8f5f9:                         pathname.getName().endsWith("xml");
1:d3fb1aa:             }})) {
1:07dad1c:             configUrls.add(new String[]{"xbean:" + sampleConfDirPath + "/" + xmlFile.getName(), xmlFile.getName()});
2:d3fb1aa:         }
1:af8f5f9: 
1:af8f5f9:         return configUrls;
1:d3fb1aa:     }
1:af8f5f9: 
1:d3fb1aa: 
1:0530aac:     public BrokerXmlConfigStartTest(String config, String configFileShortName) {
1:af8f5f9:         this.configUrl = config;
1:0530aac:         this.shortName = configFileShortName;
1:af8f5f9:     }
1:af8f5f9: 
1:af8f5f9:     @Test
1:af8f5f9:     public void testStartBrokerUsingXmlConfig1() throws Exception {
1:d3fb1aa:         BrokerService broker = null;
1:d3fb1aa:         LOG.info("Broker config: " + configUrl);
1:d3fb1aa:         System.err.println("Broker config: " + configUrl);
1:d3fb1aa:         broker = BrokerFactory.createBroker(configUrl);
1:0530aac:         if ("activemq-leveldb-replicating.xml".equals(shortName)) {
1:0530aac:             try {
1:0530aac:                 broker.start();
1:0530aac:             } catch (TimeoutException expectedWithNoZk) {
1:0530aac:                 return;
1:0530aac:             }
1:0530aac:         } else {
1:0530aac:             broker.start();
1:0530aac:         }
1:d3fb1aa:         // alive, now try connect to connect
1:d3fb1aa:         try {
1:d3fb1aa:             for (TransportConnector transport : broker.getTransportConnectors()) {
1:b469638:                 final URI UriToConnectTo = URISupport.removeQuery(transport.getConnectUri());
1:4d37271: 
1:d3fb1aa:                 if (UriToConnectTo.getScheme().startsWith("stomp")) {
1:d3fb1aa:                     LOG.info("validating alive with connection to: " + UriToConnectTo);
1:d3fb1aa:                     StompConnection connection = new StompConnection();
1:d3fb1aa:                     connection.open(UriToConnectTo.getHost(), UriToConnectTo.getPort());
1:d3fb1aa:                     connection.close();
1:d3fb1aa:                     break;
1:d3fb1aa:                 } else if (UriToConnectTo.getScheme().startsWith("tcp")) {
1:d3fb1aa:                     LOG.info("validating alive with connection to: " + UriToConnectTo);
1:d3fb1aa:                     ActiveMQConnectionFactory connectionFactory = new ActiveMQConnectionFactory(UriToConnectTo);
1:d3fb1aa:                     Connection connection = connectionFactory.createConnection(secProps.getProperty("activemq.username"),
1:d3fb1aa:                             secProps.getProperty("activemq.password"));
1:d3fb1aa:                     connection.start();
1:d3fb1aa:                     connection.close();
1:d3fb1aa:                     break;
1:d3fb1aa:                 } else {
1:d3fb1aa:                     LOG.info("not validating connection to: " + UriToConnectTo);
1:d3fb1aa:                 }
1:d3fb1aa:             }
1:d3fb1aa:         } finally {
1:d3fb1aa:             if (broker != null) {
1:d3fb1aa:                 broker.stop();
1:4d37271:                 broker.waitUntilStopped();
1:d3fb1aa:                 broker = null;
1:d3fb1aa:             }
1:d3fb1aa:         }
1:d3fb1aa:     }
1:d3fb1aa: 
1:af8f5f9:     @Before
1:d3fb1aa:     public void setUp() throws Exception {
1:d3fb1aa:         System.setProperty("activemq.base", "target");
1:b469638:         System.setProperty("activemq.home", "target"); // not a valid home but ok for xml validation
1:b469638:         System.setProperty("activemq.data", "target");
1:b469638:         System.setProperty("activemq.conf", "target/conf");
1:d3fb1aa:         secProps = new Properties();
1:d3fb1aa:         secProps.load(new FileInputStream(new File("target/conf/credentials.properties")));
1:d3fb1aa:     }
1:4d37271: 
1:af8f5f9:     @After
1:d3fb1aa:     public void tearDown() throws Exception {
1:d3fb1aa:         TimeUnit.SECONDS.sleep(1);
1:d3fb1aa:     }
1:d3fb1aa: }
============================================================================
author:Hadrian Zbarcea
-------------------------------------------------------------------------------
commit:d54d046
author:Kevin Earls
-------------------------------------------------------------------------------
commit:07dad1c
/////////////////////////////////////////////////////////////////////////
1: import java.io.IOException;
/////////////////////////////////////////////////////////////////////////
1:     public static Collection<String[]> getTestParameters() throws IOException {
1:         String osName=System.getProperty("os.name");
1:         LOG.info("os.name {} ", osName);
1:         String sampleConfDirPath = sampleConfDir.getAbsolutePath();
1:         if (osName.toLowerCase().contains("windows")) {
1:             sampleConfDirPath = sampleConfDirPath.substring(2); // Chop off drive letter and :
1:             sampleConfDirPath = sampleConfDirPath.replace("\\", "/");
1:         }
1: 
1:             configUrls.add(new String[]{"xbean:" + sampleConfDirPath + "/" + xmlFile.getName(), xmlFile.getName()});
author:gtully
-------------------------------------------------------------------------------
commit:0530aac
/////////////////////////////////////////////////////////////////////////
1: import java.util.concurrent.TimeoutException;
/////////////////////////////////////////////////////////////////////////
1:     private String shortName;
1:     @Parameterized.Parameters(name = "{1}")
1:         configUrls.add(new String[]{"xbean:src/release/conf/activemq.xml", "activemq.xml"});
/////////////////////////////////////////////////////////////////////////
0:             configUrls.add(new String[]{"xbean:" + sampleConfDir.getAbsolutePath() + "/" + xmlFile.getName(), xmlFile.getName()});
1:     public BrokerXmlConfigStartTest(String config, String configFileShortName) {
1:         this.shortName = configFileShortName;
/////////////////////////////////////////////////////////////////////////
1:         if ("activemq-leveldb-replicating.xml".equals(shortName)) {
1:             try {
1:                 broker.start();
1:             } catch (TimeoutException expectedWithNoZk) {
1:                 return;
1:             }
1:         } else {
1:             broker.start();
1:         }
author:Timothy A. Bish
-------------------------------------------------------------------------------
commit:4d37271
/////////////////////////////////////////////////////////////////////////
1: 
/////////////////////////////////////////////////////////////////////////
1:                 broker.waitUntilStopped();
/////////////////////////////////////////////////////////////////////////
1: 
commit:af8f5f9
/////////////////////////////////////////////////////////////////////////
1: import java.util.ArrayList;
1: import java.util.Collection;
1: import java.util.List;
/////////////////////////////////////////////////////////////////////////
1: import org.junit.After;
1: import org.junit.Before;
1: import org.junit.Ignore;
1: import org.junit.Test;
1: import org.junit.runner.RunWith;
1: import org.junit.runners.Parameterized;
1: @RunWith(value = Parameterized.class)
1: public class BrokerXmlConfigStartTest {
1:     private String configUrl;
1: 
0:     @Parameterized.Parameters
0:     public static Collection<String[]> getTestParameters() {
1:         List<String[]> configUrls = new ArrayList<String[]>();
0:         configUrls.add(new String[]{"xbean:src/release/conf/activemq.xml"});
1: 
1:                         pathname.getName().startsWith("activemq-") &&
1:                         pathname.getName().endsWith("xml");
1: 
0:             configUrls.add(new String[]{"xbean:" + sampleConfDir.getAbsolutePath() + "/" + xmlFile.getName()});
1: 
1:         return configUrls;
0:     public BrokerXmlConfigStartTest(String config) {
1:         this.configUrl = config;
1:     }
1: 
1:     @Test
1:     public void testStartBrokerUsingXmlConfig1() throws Exception {
/////////////////////////////////////////////////////////////////////////
1:     @Before
/////////////////////////////////////////////////////////////////////////
1:     @After
author:Hiram R. Chirino
-------------------------------------------------------------------------------
commit:9a8f6e4
/////////////////////////////////////////////////////////////////////////
author:Gary Tully
-------------------------------------------------------------------------------
commit:b469638
/////////////////////////////////////////////////////////////////////////
0: import org.apache.activemq.broker.BrokerContext;
1: import org.apache.activemq.util.URISupport;
/////////////////////////////////////////////////////////////////////////
1:                 final URI UriToConnectTo = URISupport.removeQuery(transport.getConnectUri());
/////////////////////////////////////////////////////////////////////////
1:         System.setProperty("activemq.home", "target"); // not a valid home but ok for xml validation
1:         System.setProperty("activemq.data", "target");
1:         System.setProperty("activemq.conf", "target/conf");
commit:d3fb1aa
/////////////////////////////////////////////////////////////////////////
1: /**
1:  * Licensed to the Apache Software Foundation (ASF) under one or more
1:  * contributor license agreements.  See the NOTICE file distributed with
1:  * this work for additional information regarding copyright ownership.
1:  * The ASF licenses this file to You under the Apache License, Version 2.0
1:  * (the "License"); you may not use this file except in compliance with
1:  * the License.  You may obtain a copy of the License at
1:  *
1:  *      http://www.apache.org/licenses/LICENSE-2.0
1:  *
1:  * Unless required by applicable law or agreed to in writing, software
1:  * distributed under the License is distributed on an "AS IS" BASIS,
1:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:  * See the License for the specific language governing permissions and
1:  * limitations under the License.
1:  */
1: package org.apache.activemq.config;
1: 
1: import java.io.File;
1: import java.io.FileFilter;
1: import java.io.FileInputStream;
1: import java.net.URI;
1: import java.util.Properties;
1: import java.util.concurrent.TimeUnit;
1: 
1: import javax.jms.Connection;
0: import javax.jms.JMSException;
1: 
1: import junit.framework.TestCase;
1: import org.apache.activemq.ActiveMQConnectionFactory;
1: import org.apache.activemq.broker.BrokerFactory;
1: import org.apache.activemq.broker.BrokerService;
0: import org.apache.activemq.broker.TransportConnection;
1: import org.apache.activemq.broker.TransportConnector;
1: import org.apache.activemq.transport.stomp.StompConnection;
0: import org.apache.commons.logging.Log;
0: import org.apache.commons.logging.LogFactory;
1: 
0: public class BrokerXmlConfigStartTest extends TestCase {
1: 
0:     private static final Log LOG = LogFactory.getLog(BrokerXmlConfigStartTest.class);
1:     Properties secProps;
0:     public void testStartBrokerUsingXmlConfig() throws Exception {
0:         doTestStartBrokerUsingXmlConfig("xbean:src/release/conf/activemq.xml");
1:     }
1: 
0:     public void testStartBrokerUsingSampleConfig() throws Exception {
0:         // resource:copy-resource brings all config files into target/conf
1:         File sampleConfDir = new File("target/conf");
1:         
1:         for (File xmlFile : sampleConfDir.listFiles(new FileFilter() {
1:             public boolean accept(File pathname) {
1:                 return pathname.isFile() &&
0:                 pathname.getName().startsWith("activemq-") &&
0:                 pathname.getName().endsWith("xml");
1:             }})) {
1:             
0:             doTestStartBrokerUsingXmlConfig("xbean:" + sampleConfDir.getAbsolutePath() + "/" + xmlFile.getName());
1:         }
1:     }
1: 
0:     public void doTestStartBrokerUsingXmlConfig(String configUrl) throws Exception {
1: 
1:         BrokerService broker = null;
1:         LOG.info("Broker config: " + configUrl);
1:         System.err.println("Broker config: " + configUrl);
1:         broker = BrokerFactory.createBroker(configUrl);
1:         // alive, now try connect to connect
1:         try {
1:             for (TransportConnector transport : broker.getTransportConnectors()) {
0:                 final URI UriToConnectTo = transport.getConnectUri();
1:                  
1:                 if (UriToConnectTo.getScheme().startsWith("stomp")) {
1:                     LOG.info("validating alive with connection to: " + UriToConnectTo);
1:                     StompConnection connection = new StompConnection();
1:                     connection.open(UriToConnectTo.getHost(), UriToConnectTo.getPort());
1:                     connection.close();
1:                     break;
1:                 } else if (UriToConnectTo.getScheme().startsWith("tcp")) {
1:                     LOG.info("validating alive with connection to: " + UriToConnectTo);
1:                     ActiveMQConnectionFactory connectionFactory = new ActiveMQConnectionFactory(UriToConnectTo);
1:                     Connection connection = connectionFactory.createConnection(secProps.getProperty("activemq.username"),
1:                             secProps.getProperty("activemq.password"));
1:                     connection.start();
1:                     connection.close();
1:                     break;
1:                 } else {
1:                     LOG.info("not validating connection to: " + UriToConnectTo);
1:                 }
1:             }
1:         } finally {
1:             if (broker != null) {
1:                 broker.stop();
1:                 broker = null;
1:             }
1:         }
1:     }
1: 
1:     public void setUp() throws Exception {
1:         System.setProperty("activemq.base", "target");
1:         secProps = new Properties();
1:         secProps.load(new FileInputStream(new File("target/conf/credentials.properties")));
1:     }
1:     
1:     public void tearDown() throws Exception {
1:         TimeUnit.SECONDS.sleep(1);
1:     }
1: }
author:Bosanac Dejan
-------------------------------------------------------------------------------
commit:8bf987b
/////////////////////////////////////////////////////////////////////////
1: import org.slf4j.Logger;
1: import org.slf4j.LoggerFactory;
1:     private static final Logger LOG = LoggerFactory.getLogger(BrokerXmlConfigStartTest.class);
============================================================================