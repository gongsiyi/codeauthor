1:2117768: /**
1:2117768:  * Licensed to the Apache Software Foundation (ASF) under one or more
1:2117768:  * contributor license agreements.  See the NOTICE file distributed with
1:2117768:  * this work for additional information regarding copyright ownership.
1:2117768:  * The ASF licenses this file to You under the Apache License, Version 2.0
1:2117768:  * (the "License"); you may not use this file except in compliance with
1:2117768:  * the License.  You may obtain a copy of the License at
1:2117768:  *
1:2117768:  *      http://www.apache.org/licenses/LICENSE-2.0
1:2117768:  *
1:2117768:  * Unless required by applicable law or agreed to in writing, software
1:2117768:  * distributed under the License is distributed on an "AS IS" BASIS,
1:2117768:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:2117768:  * See the License for the specific language governing permissions and
1:2117768:  * limitations under the License.
1:2117768:  */
1:2117768: package org.apache.activemq.store.kahadb;
1:2117768: 
1:2117768: import java.util.Arrays;
1:2117768: import java.util.Collection;
1:2117768: 
1:2117768: import javax.jms.Connection;
1:2117768: import javax.jms.JMSException;
1:2117768: import javax.jms.Session;
1:2117768: 
1:2117768: import org.apache.activemq.ActiveMQConnectionFactory;
1:2117768: import org.apache.activemq.command.ActiveMQDestination;
1:2117768: import org.apache.activemq.command.ActiveMQQueue;
1:2117768: import org.apache.commons.io.filefilter.WildcardFileFilter;
1:2117768: import org.junit.runner.RunWith;
1:2117768: import org.junit.runners.Parameterized;
1:2117768: import org.junit.runners.Parameterized.Parameters;
1:2117768: import org.slf4j.Logger;
1:2117768: import org.slf4j.LoggerFactory;
1:2117768: 
1:2117768: /**
1:2117768:  * AMQ-5875
1:2117768:  *
1:2117768:  * This test shows that when multiple destinations share a single KahaDB
1:2117768:  * instance when using mKahaDB, that the deletion of one Queue will not cause
1:2117768:  * the store to be deleted if another destination is still attached.  This
1:2117768:  * issue was related to Topics but this test makes sure Queues work as well.
1:2117768:  *
1:2117768:  * */
1:2117768: @RunWith(Parameterized.class)
1:2117768: public class MultiKahaDBQueueDeletionTest extends AbstractMultiKahaDBDeletionTest {
1:2117768: 
1:2117768:     protected static final Logger LOG = LoggerFactory
1:2117768:             .getLogger(MultiKahaDBTopicDeletionTest.class);
1:2117768: 
1:2117768:     protected static ActiveMQQueue QUEUE1 = new ActiveMQQueue("test.>");
1:2117768:     protected static ActiveMQQueue QUEUE2 = new ActiveMQQueue("test.t.queue");
1:2117768: 
1:2117768:     @Parameters
1:2117768:     public static Collection<Object[]> data() {
1:2117768: 
1:2117768:         //Test with queues created in different orders
1:2117768:         return Arrays.asList(new Object[][] {
1:2117768:                 {QUEUE1, QUEUE2},
1:2117768:                 {QUEUE2, QUEUE1}
1:2117768:         });
1:2117768:     }
1:2117768: 
1:2117768:     public MultiKahaDBQueueDeletionTest(ActiveMQQueue dest1, ActiveMQQueue dest2) {
1:2117768:         super(dest1, dest2);
1:2117768:     }
1:2117768: 
1:2117768:     /* (non-Javadoc)
1:2117768:      * @see org.apache.activemq.store.kahadb.AbstractMultiKahaDBDeletionTest#createConsumer(org.apache.activemq.command.ActiveMQDestination)
1:2117768:      */
1:2117768:     @Override
1:2117768:     protected void createConsumer(ActiveMQDestination dest) throws JMSException {
1:2117768:         ActiveMQConnectionFactory factory = new ActiveMQConnectionFactory(
1:2117768:                 brokerConnectURI);
1:2117768:         Connection connection = factory.createConnection();
1:2117768:         connection.setClientID("client1");
1:2117768:         connection.start();
1:2117768:         Session session = connection.createSession(false,
1:2117768:                 Session.AUTO_ACKNOWLEDGE);
1:2117768:         session.createConsumer(dest);
1:2117768:     }
1:2117768: 
1:2117768:     /* (non-Javadoc)
1:2117768:      * @see org.apache.activemq.store.kahadb.AbstractMultiKahaDBDeletionTest#getStoreFileFilter()
1:2117768:      */
1:2117768:     @Override
1:2117768:     protected WildcardFileFilter getStoreFileFilter() {
1:2117768:         return new WildcardFileFilter("queue*");
1:2117768:     }
1:2117768: 
1:2117768: }
============================================================================
author:Christopher L. Shannon (cshannon)
-------------------------------------------------------------------------------
commit:2117768
/////////////////////////////////////////////////////////////////////////
1: /**
1:  * Licensed to the Apache Software Foundation (ASF) under one or more
1:  * contributor license agreements.  See the NOTICE file distributed with
1:  * this work for additional information regarding copyright ownership.
1:  * The ASF licenses this file to You under the Apache License, Version 2.0
1:  * (the "License"); you may not use this file except in compliance with
1:  * the License.  You may obtain a copy of the License at
1:  *
1:  *      http://www.apache.org/licenses/LICENSE-2.0
1:  *
1:  * Unless required by applicable law or agreed to in writing, software
1:  * distributed under the License is distributed on an "AS IS" BASIS,
1:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:  * See the License for the specific language governing permissions and
1:  * limitations under the License.
1:  */
1: package org.apache.activemq.store.kahadb;
1: 
1: import java.util.Arrays;
1: import java.util.Collection;
1: 
1: import javax.jms.Connection;
1: import javax.jms.JMSException;
1: import javax.jms.Session;
1: 
1: import org.apache.activemq.ActiveMQConnectionFactory;
1: import org.apache.activemq.command.ActiveMQDestination;
1: import org.apache.activemq.command.ActiveMQQueue;
1: import org.apache.commons.io.filefilter.WildcardFileFilter;
1: import org.junit.runner.RunWith;
1: import org.junit.runners.Parameterized;
1: import org.junit.runners.Parameterized.Parameters;
1: import org.slf4j.Logger;
1: import org.slf4j.LoggerFactory;
1: 
1: /**
1:  * AMQ-5875
1:  *
1:  * This test shows that when multiple destinations share a single KahaDB
1:  * instance when using mKahaDB, that the deletion of one Queue will not cause
1:  * the store to be deleted if another destination is still attached.  This
1:  * issue was related to Topics but this test makes sure Queues work as well.
1:  *
1:  * */
1: @RunWith(Parameterized.class)
1: public class MultiKahaDBQueueDeletionTest extends AbstractMultiKahaDBDeletionTest {
1: 
1:     protected static final Logger LOG = LoggerFactory
1:             .getLogger(MultiKahaDBTopicDeletionTest.class);
1: 
1:     protected static ActiveMQQueue QUEUE1 = new ActiveMQQueue("test.>");
1:     protected static ActiveMQQueue QUEUE2 = new ActiveMQQueue("test.t.queue");
1: 
1:     @Parameters
1:     public static Collection<Object[]> data() {
1: 
1:         //Test with queues created in different orders
1:         return Arrays.asList(new Object[][] {
1:                 {QUEUE1, QUEUE2},
1:                 {QUEUE2, QUEUE1}
1:         });
1:     }
1: 
1:     public MultiKahaDBQueueDeletionTest(ActiveMQQueue dest1, ActiveMQQueue dest2) {
1:         super(dest1, dest2);
1:     }
1: 
1:     /* (non-Javadoc)
1:      * @see org.apache.activemq.store.kahadb.AbstractMultiKahaDBDeletionTest#createConsumer(org.apache.activemq.command.ActiveMQDestination)
1:      */
1:     @Override
1:     protected void createConsumer(ActiveMQDestination dest) throws JMSException {
1:         ActiveMQConnectionFactory factory = new ActiveMQConnectionFactory(
1:                 brokerConnectURI);
1:         Connection connection = factory.createConnection();
1:         connection.setClientID("client1");
1:         connection.start();
1:         Session session = connection.createSession(false,
1:                 Session.AUTO_ACKNOWLEDGE);
1:         session.createConsumer(dest);
1:     }
1: 
1:     /* (non-Javadoc)
1:      * @see org.apache.activemq.store.kahadb.AbstractMultiKahaDBDeletionTest#getStoreFileFilter()
1:      */
1:     @Override
1:     protected WildcardFileFilter getStoreFileFilter() {
1:         return new WildcardFileFilter("queue*");
1:     }
1: 
1: }
============================================================================