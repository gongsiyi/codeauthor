1:063d21f: /**
1:063d21f:  * Licensed to the Apache Software Foundation (ASF) under one or more
1:063d21f:  * contributor license agreements.  See the NOTICE file distributed with
1:063d21f:  * this work for additional information regarding copyright ownership.
1:063d21f:  * The ASF licenses this file to You under the Apache License, Version 2.0
1:063d21f:  * (the "License"); you may not use this file except in compliance with
1:063d21f:  * the License.  You may obtain a copy of the License at
1:063d21f:  *
1:063d21f:  *      http://www.apache.org/licenses/LICENSE-2.0
1:063d21f:  *
1:063d21f:  * Unless required by applicable law or agreed to in writing, software
1:063d21f:  * distributed under the License is distributed on an "AS IS" BASIS,
1:063d21f:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:063d21f:  * See the License for the specific language governing permissions and
1:063d21f:  * limitations under the License.
1:063d21f:  */
1:063d21f: package org.apache.activemq.bugs;
1:063d21f: 
1:063d21f: import org.apache.activemq.command.XATransactionId;
1:063d21f: import org.junit.Test;
1:063d21f: 
1:063d21f: import static org.junit.Assert.assertNotEquals;
1:063d21f: 
1:063d21f: public class AMQ7013Test {
1:063d21f: 
1:063d21f:     @Test
1:063d21f:     public void hashTest() throws Exception{
1:063d21f: 
1:063d21f:         byte[] globalId1 = hexStringToByteArray("00000000000000000000ffff0a970616dbbe2c3b5b42f94800002259");
1:063d21f:         byte[] branchQualifier1 = hexStringToByteArray("00000000000000000000ffff0a970616dbbe2c3b5b42f94800002259");
1:063d21f:         XATransactionId id1 = new XATransactionId();
1:063d21f:         id1.setGlobalTransactionId(globalId1);
1:063d21f:         id1.setBranchQualifier(branchQualifier1);
1:063d21f:         id1.setFormatId(131077);
1:063d21f: 
1:063d21f:         byte[] globalId2 = hexStringToByteArray("00000000000000000000ffff0a970616dbbe2c3b5b42f948000021d2");
1:063d21f:         byte[] branchQualifier2 = hexStringToByteArray("00000000000000000000ffff0a970616dbbe2c3b5b42f948000021d2");
1:063d21f:         XATransactionId id2 = new XATransactionId();
1:063d21f:         id2.setGlobalTransactionId(globalId2);
1:063d21f:         id2.setBranchQualifier(branchQualifier2);
1:063d21f:         id2.setFormatId(131077);
1:063d21f: 
1:063d21f:         assertNotEquals(id1.hashCode(), id2.hashCode());
1:063d21f:     }
1:063d21f: 
1:063d21f:     public byte[] hexStringToByteArray(String s) {
1:063d21f:         int len = s.length();
1:063d21f:         byte[] data = new byte[len / 2];
1:063d21f:         for (int i = 0; i < len; i += 2) {
1:063d21f:             data[i / 2] = (byte) ((Character.digit(s.charAt(i), 16) << 4)
1:063d21f:                     + Character.digit(s.charAt(i+1), 16));
1:063d21f:         }
1:063d21f:         return data;
1:063d21f:     }
1:063d21f: }
============================================================================
author:jgoodyear
-------------------------------------------------------------------------------
commit:063d21f
/////////////////////////////////////////////////////////////////////////
1: /**
1:  * Licensed to the Apache Software Foundation (ASF) under one or more
1:  * contributor license agreements.  See the NOTICE file distributed with
1:  * this work for additional information regarding copyright ownership.
1:  * The ASF licenses this file to You under the Apache License, Version 2.0
1:  * (the "License"); you may not use this file except in compliance with
1:  * the License.  You may obtain a copy of the License at
1:  *
1:  *      http://www.apache.org/licenses/LICENSE-2.0
1:  *
1:  * Unless required by applicable law or agreed to in writing, software
1:  * distributed under the License is distributed on an "AS IS" BASIS,
1:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:  * See the License for the specific language governing permissions and
1:  * limitations under the License.
1:  */
1: package org.apache.activemq.bugs;
1: 
1: import org.apache.activemq.command.XATransactionId;
1: import org.junit.Test;
1: 
1: import static org.junit.Assert.assertNotEquals;
1: 
1: public class AMQ7013Test {
1: 
1:     @Test
1:     public void hashTest() throws Exception{
1: 
1:         byte[] globalId1 = hexStringToByteArray("00000000000000000000ffff0a970616dbbe2c3b5b42f94800002259");
1:         byte[] branchQualifier1 = hexStringToByteArray("00000000000000000000ffff0a970616dbbe2c3b5b42f94800002259");
1:         XATransactionId id1 = new XATransactionId();
1:         id1.setGlobalTransactionId(globalId1);
1:         id1.setBranchQualifier(branchQualifier1);
1:         id1.setFormatId(131077);
1: 
1:         byte[] globalId2 = hexStringToByteArray("00000000000000000000ffff0a970616dbbe2c3b5b42f948000021d2");
1:         byte[] branchQualifier2 = hexStringToByteArray("00000000000000000000ffff0a970616dbbe2c3b5b42f948000021d2");
1:         XATransactionId id2 = new XATransactionId();
1:         id2.setGlobalTransactionId(globalId2);
1:         id2.setBranchQualifier(branchQualifier2);
1:         id2.setFormatId(131077);
1: 
1:         assertNotEquals(id1.hashCode(), id2.hashCode());
1:     }
1: 
1:     public byte[] hexStringToByteArray(String s) {
1:         int len = s.length();
1:         byte[] data = new byte[len / 2];
1:         for (int i = 0; i < len; i += 2) {
1:             data[i / 2] = (byte) ((Character.digit(s.charAt(i), 16) << 4)
1:                     + Character.digit(s.charAt(i+1), 16));
1:         }
1:         return data;
1:     }
1: }
============================================================================