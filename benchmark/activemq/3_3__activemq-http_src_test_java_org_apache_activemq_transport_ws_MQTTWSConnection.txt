1:27edaff: /**
1:27edaff:  * Licensed to the Apache Software Foundation (ASF) under one or more
1:27edaff:  * contributor license agreements.  See the NOTICE file distributed with
1:27edaff:  * this work for additional information regarding copyright ownership.
1:27edaff:  * The ASF licenses this file to You under the Apache License, Version 2.0
1:27edaff:  * (the "License"); you may not use this file except in compliance with
1:27edaff:  * the License.  You may obtain a copy of the License at
1:27edaff:  *
1:27edaff:  *      http://www.apache.org/licenses/LICENSE-2.0
1:27edaff:  *
1:27edaff:  * Unless required by applicable law or agreed to in writing, software
1:27edaff:  * distributed under the License is distributed on an "AS IS" BASIS,
1:27edaff:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:27edaff:  * See the License for the specific language governing permissions and
1:27edaff:  * limitations under the License.
1:27edaff:  */
1:27edaff: package org.apache.activemq.transport.ws;
1:27edaff: 
1:27edaff: import java.io.IOException;
1:f44c3d2: import java.nio.ByteBuffer;
1:27edaff: import java.util.UUID;
1:27edaff: import java.util.concurrent.BlockingQueue;
1:27edaff: import java.util.concurrent.CountDownLatch;
1:27edaff: import java.util.concurrent.LinkedBlockingDeque;
1:27edaff: import java.util.concurrent.TimeUnit;
1:27edaff: 
1:27edaff: import org.apache.activemq.transport.mqtt.MQTTWireFormat;
1:27edaff: import org.apache.activemq.util.ByteSequence;
1:f44c3d2: import org.eclipse.jetty.websocket.api.Session;
1:f44c3d2: import org.eclipse.jetty.websocket.api.WebSocketAdapter;
1:f44c3d2: import org.eclipse.jetty.websocket.api.WebSocketListener;
1:27edaff: import org.fusesource.hawtbuf.UTF8Buffer;
1:27edaff: import org.fusesource.mqtt.codec.CONNACK;
1:27edaff: import org.fusesource.mqtt.codec.CONNECT;
1:27edaff: import org.fusesource.mqtt.codec.DISCONNECT;
1:27edaff: import org.fusesource.mqtt.codec.MQTTFrame;
1:27edaff: import org.fusesource.mqtt.codec.PINGREQ;
1:27edaff: import org.fusesource.mqtt.codec.PINGRESP;
1:27edaff: import org.fusesource.mqtt.codec.PUBACK;
1:27edaff: import org.fusesource.mqtt.codec.PUBCOMP;
1:27edaff: import org.fusesource.mqtt.codec.PUBLISH;
1:27edaff: import org.fusesource.mqtt.codec.PUBREC;
1:27edaff: import org.fusesource.mqtt.codec.PUBREL;
1:27edaff: import org.fusesource.mqtt.codec.SUBACK;
1:27edaff: import org.slf4j.Logger;
1:27edaff: import org.slf4j.LoggerFactory;
1:27edaff: 
1:27edaff: /**
1:27edaff:  * Implements a simple WebSocket based MQTT Client that can be used for unit testing.
1:27edaff:  */
1:f44c3d2: public class MQTTWSConnection extends WebSocketAdapter implements WebSocketListener {
1:27edaff: 
1:27edaff:     private static final Logger LOG = LoggerFactory.getLogger(MQTTWSConnection.class);
1:27edaff: 
1:27edaff:     private static final MQTTFrame PING_RESP_FRAME = new PINGRESP().encode();
1:27edaff: 
1:f44c3d2:     private Session connection;
1:27edaff:     private final CountDownLatch connectLatch = new CountDownLatch(1);
1:27edaff:     private final MQTTWireFormat wireFormat = new MQTTWireFormat();
1:27edaff: 
1:e69367f:     private final BlockingQueue<MQTTFrame> prefetch = new LinkedBlockingDeque<>();
1:27edaff: 
1:e69367f:     private boolean writePartialFrames;
1:27edaff:     private int closeCode = -1;
1:27edaff:     private String closeMessage;
1:27edaff: 
1:f44c3d2:     @Override
1:27edaff:     public boolean isConnected() {
1:27edaff:         return connection != null ? connection.isOpen() : false;
1:27edaff:     }
1:27edaff: 
1:27edaff:     public void close() {
1:27edaff:         if (connection != null) {
1:27edaff:             connection.close();
1:27edaff:         }
1:27edaff:     }
1:27edaff: 
1:913f644:     protected Session getConnection() {
1:913f644:         return connection;
1:913f644:     }
1:27edaff: 
1:27edaff:     //----- Connection and Disconnection methods -----------------------------//
1:27edaff: 
1:27edaff:     public void connect() throws Exception {
1:27edaff:         connect(UUID.randomUUID().toString());
1:27edaff:     }
1:27edaff: 
1:27edaff:     public void connect(String clientId) throws Exception {
1:27edaff:         CONNECT command = new CONNECT();
1:27edaff:         command.clientId(new UTF8Buffer(clientId));
1:27edaff:         command.cleanSession(false);
1:27edaff:         command.version(3);
1:27edaff:         command.keepAlive((short) 0);
1:bd442a3:         connect(command);
1:bd442a3:     }
1:27edaff: 
1:bd442a3:     public void connect(CONNECT command) throws Exception {
1:27edaff:         checkConnected();
1:27edaff: 
1:e69367f:         sendBytes(wireFormat.marshal(command.encode()));
1:27edaff: 
1:27edaff:         MQTTFrame incoming = receive(15, TimeUnit.SECONDS);
1:bd442a3: 
1:27edaff:         if (incoming == null || incoming.messageType() != CONNACK.TYPE) {
1:27edaff:             throw new IOException("Failed to connect to remote service.");
1:f8bfff0:         } else {
1:f8bfff0:             CONNACK connack = new CONNACK().decode(incoming);
1:f8bfff0:             if (!connack.code().equals(CONNACK.Code.CONNECTION_ACCEPTED)) {
1:f8bfff0:                 throw new IOException("Failed to connect to remote service: " + connack.code());
1:27edaff:             }
1:27edaff:         }
2:f44c3d2:     }
1:27edaff: 
1:27edaff:     public void disconnect() throws Exception {
1:27edaff:         if (!isConnected()) {
1:27edaff:             return;
1:27edaff:         }
1:27edaff: 
1:27edaff:         DISCONNECT command = new DISCONNECT();
1:e69367f:         sendBytes(wireFormat.marshal(command.encode()));
1:27edaff:     }
1:27edaff: 
1:27edaff:     //---- Send methods ------------------------------------------------------//
1:27edaff: 
1:27edaff:     public void sendFrame(MQTTFrame frame) throws Exception {
1:27edaff:         checkConnected();
1:e69367f:         sendBytes(wireFormat.marshal(frame));
1:27edaff:     }
1:27edaff: 
1:27edaff:     public void keepAlive() throws Exception {
1:27edaff:         checkConnected();
1:e69367f:         sendBytes(wireFormat.marshal(new PINGREQ().encode()));
1:27edaff:     }
1:27edaff: 
1:27edaff:     //----- Receive methods --------------------------------------------------//
1:27edaff: 
1:27edaff:     public MQTTFrame receive() throws Exception {
1:27edaff:         checkConnected();
1:27edaff:         return prefetch.take();
1:27edaff:     }
1:27edaff: 
1:27edaff:     public MQTTFrame receive(long timeout, TimeUnit unit) throws Exception {
1:27edaff:         checkConnected();
1:27edaff:         return prefetch.poll(timeout, unit);
1:27edaff:     }
1:27edaff: 
1:27edaff:     public MQTTFrame receiveNoWait() throws Exception {
1:27edaff:         checkConnected();
1:27edaff:         return prefetch.poll();
1:27edaff:     }
1:27edaff: 
1:27edaff:     //---- Blocking state change calls ---------------------------------------//
1:27edaff: 
1:27edaff:     public void awaitConnection() throws InterruptedException {
1:27edaff:         connectLatch.await();
1:27edaff:     }
1:27edaff: 
1:27edaff:     public boolean awaitConnection(long time, TimeUnit unit) throws InterruptedException {
1:27edaff:         return connectLatch.await(time, unit);
1:27edaff:     }
1:27edaff: 
1:27edaff:     //----- Property Accessors -----------------------------------------------//
1:27edaff: 
1:27edaff:     public int getCloseCode() {
1:27edaff:         return closeCode;
1:27edaff:     }
1:27edaff: 
1:27edaff:     public String getCloseMessage() {
1:27edaff:         return closeMessage;
1:27edaff:     }
1:27edaff: 
1:e69367f:     public boolean isWritePartialFrames() {
1:e69367f:         return writePartialFrames;
1:e69367f:     }
1:e69367f: 
1:e69367f:     public MQTTWSConnection setWritePartialFrames(boolean value) {
1:e69367f:         this.writePartialFrames = value;
1:e69367f:         return this;
1:e69367f:     }
1:e69367f: 
1:27edaff:     //----- WebSocket callback handlers --------------------------------------//
1:27edaff: 
1:27edaff:     @Override
1:f44c3d2:     public void onWebSocketBinary(byte[] data, int offset, int length) {
1:27edaff:         if (data ==null || length <= 0) {
1:27edaff:             return;
1:27edaff:         }
1:27edaff: 
1:27edaff:         MQTTFrame frame = null;
1:27edaff: 
1:27edaff:         try {
1:27edaff:             frame = (MQTTFrame)wireFormat.unmarshal(new ByteSequence(data, offset, length));
1:27edaff:         } catch (IOException e) {
1:27edaff:             LOG.error("Could not decode incoming MQTT Frame: ", e.getMessage());
1:27edaff:             connection.close();
1:27edaff:         }
1:27edaff: 
1:27edaff:         try {
1:27edaff:             switch (frame.messageType()) {
1:27edaff:             case PINGREQ.TYPE:
1:27edaff:                 PINGREQ ping = new PINGREQ().decode(frame);
1:27edaff:                 LOG.info("WS-Client read frame: {}", ping);
1:27edaff:                 sendFrame(PING_RESP_FRAME);
1:27edaff:                 break;
1:27edaff:             case PINGRESP.TYPE:
1:27edaff:                 LOG.info("WS-Client ping response received.");
1:27edaff:                 break;
1:27edaff:             case CONNACK.TYPE:
1:27edaff:                 CONNACK connAck = new CONNACK().decode(frame);
1:27edaff:                 LOG.info("WS-Client read frame: {}", connAck);
1:27edaff:                 prefetch.put(frame);
1:27edaff:                 break;
1:27edaff:             case SUBACK.TYPE:
1:27edaff:                 SUBACK subAck = new SUBACK().decode(frame);
1:27edaff:                 LOG.info("WS-Client read frame: {}", subAck);
1:27edaff:                 prefetch.put(frame);
1:27edaff:                 break;
1:27edaff:             case PUBLISH.TYPE:
1:27edaff:                 PUBLISH publish = new PUBLISH().decode(frame);
1:27edaff:                 LOG.info("WS-Client read frame: {}", publish);
1:27edaff:                 prefetch.put(frame);
1:27edaff:                 break;
1:27edaff:             case PUBACK.TYPE:
1:27edaff:                 PUBACK pubAck = new PUBACK().decode(frame);
1:27edaff:                 LOG.info("WS-Client read frame: {}", pubAck);
1:27edaff:                 prefetch.put(frame);
1:27edaff:                 break;
1:27edaff:             case PUBREC.TYPE:
1:27edaff:                 PUBREC pubRec = new PUBREC().decode(frame);
1:27edaff:                 LOG.info("WS-Client read frame: {}", pubRec);
1:27edaff:                 prefetch.put(frame);
1:27edaff:                 break;
1:27edaff:             case PUBREL.TYPE:
1:27edaff:                 PUBREL pubRel = new PUBREL().decode(frame);
1:27edaff:                 LOG.info("WS-Client read frame: {}", pubRel);
1:27edaff:                 prefetch.put(frame);
1:27edaff:                 break;
1:27edaff:             case PUBCOMP.TYPE:
1:27edaff:                 PUBCOMP pubComp = new PUBCOMP().decode(frame);
1:27edaff:                 LOG.info("WS-Client read frame: {}", pubComp);
1:27edaff:                 prefetch.put(frame);
1:27edaff:                 break;
1:27edaff:             default:
1:27edaff:                 LOG.error("Unknown MQTT  Frame received.");
1:27edaff:                 connection.close();
1:27edaff:             }
1:27edaff:         } catch (Exception e) {
1:27edaff:             LOG.error("Could not decode incoming MQTT Frame: ", e.getMessage());
1:27edaff:             connection.close();
1:27edaff:         }
1:27edaff:     }
1:27edaff: 
1:27edaff:     //----- Internal implementation ------------------------------------------//
1:27edaff: 
1:e69367f:     private void sendBytes(ByteSequence payload) throws IOException {
1:e69367f:         if (!isWritePartialFrames()) {
1:e69367f:             connection.getRemote().sendBytes(ByteBuffer.wrap(payload.data, payload.offset, payload.length));
1:e69367f:         } else {
1:e69367f:             connection.getRemote().sendBytes(ByteBuffer.wrap(
1:e69367f:                 payload.data, payload.offset, payload.length / 2));
1:e69367f:             connection.getRemote().sendBytes(ByteBuffer.wrap(
1:e69367f:                 payload.data, payload.offset + payload.length / 2, payload.length / 2));
1:e69367f:         }
1:e69367f:     }
1:e69367f: 
1:27edaff:     private void checkConnected() throws IOException {
1:27edaff:         if (!isConnected()) {
1:27edaff:             throw new IOException("MQTT WS Connection is closed.");
1:27edaff:         }
1:27edaff:     }
1:27edaff: 
1:27edaff:     @Override
1:f44c3d2:     public void onWebSocketClose(int statusCode, String reason) {
1:f44c3d2:         LOG.trace("MQTT WS Connection closed, code:{} message:{}", statusCode, reason);
1:27edaff: 
1:27edaff:         this.connection = null;
1:f44c3d2:         this.closeCode = statusCode;
1:f44c3d2:         this.closeMessage = reason;
1:27edaff: 
1:27edaff:     }
1:913f644: 
1:27edaff:     @Override
1:31c55f7:     public void onWebSocketConnect(org.eclipse.jetty.websocket.api.Session session) {
1:f44c3d2:         this.connection = session;
1:27edaff:         this.connectLatch.countDown();
1:27edaff:     }
1:27edaff: }
============================================================================
author:Timothy Bish
-------------------------------------------------------------------------------
commit:e69367f
/////////////////////////////////////////////////////////////////////////
1:     private final BlockingQueue<MQTTFrame> prefetch = new LinkedBlockingDeque<>();
1:     private boolean writePartialFrames;
/////////////////////////////////////////////////////////////////////////
1:         sendBytes(wireFormat.marshal(command.encode()));
/////////////////////////////////////////////////////////////////////////
1:         sendBytes(wireFormat.marshal(command.encode()));
1:         sendBytes(wireFormat.marshal(frame));
1:         sendBytes(wireFormat.marshal(new PINGREQ().encode()));
/////////////////////////////////////////////////////////////////////////
1:     public boolean isWritePartialFrames() {
1:         return writePartialFrames;
1:     }
1: 
1:     public MQTTWSConnection setWritePartialFrames(boolean value) {
1:         this.writePartialFrames = value;
1:         return this;
1:     }
1: 
/////////////////////////////////////////////////////////////////////////
1:     private void sendBytes(ByteSequence payload) throws IOException {
1:         if (!isWritePartialFrames()) {
1:             connection.getRemote().sendBytes(ByteBuffer.wrap(payload.data, payload.offset, payload.length));
1:         } else {
1:             connection.getRemote().sendBytes(ByteBuffer.wrap(
1:                 payload.data, payload.offset, payload.length / 2));
1:             connection.getRemote().sendBytes(ByteBuffer.wrap(
1:                 payload.data, payload.offset + payload.length / 2, payload.length / 2));
1:         }
1:     }
1: 
commit:31c55f7
/////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////
1:     public void onWebSocketConnect(org.eclipse.jetty.websocket.api.Session session) {
commit:27edaff
/////////////////////////////////////////////////////////////////////////
1: /**
1:  * Licensed to the Apache Software Foundation (ASF) under one or more
1:  * contributor license agreements.  See the NOTICE file distributed with
1:  * this work for additional information regarding copyright ownership.
1:  * The ASF licenses this file to You under the Apache License, Version 2.0
1:  * (the "License"); you may not use this file except in compliance with
1:  * the License.  You may obtain a copy of the License at
1:  *
1:  *      http://www.apache.org/licenses/LICENSE-2.0
1:  *
1:  * Unless required by applicable law or agreed to in writing, software
1:  * distributed under the License is distributed on an "AS IS" BASIS,
1:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:  * See the License for the specific language governing permissions and
1:  * limitations under the License.
1:  */
1: package org.apache.activemq.transport.ws;
1: 
1: import java.io.IOException;
1: import java.util.UUID;
1: import java.util.concurrent.BlockingQueue;
1: import java.util.concurrent.CountDownLatch;
1: import java.util.concurrent.LinkedBlockingDeque;
1: import java.util.concurrent.TimeUnit;
1: 
1: import org.apache.activemq.transport.mqtt.MQTTWireFormat;
1: import org.apache.activemq.util.ByteSequence;
0: import org.eclipse.jetty.websocket.WebSocket;
1: import org.fusesource.hawtbuf.UTF8Buffer;
1: import org.fusesource.mqtt.codec.CONNACK;
1: import org.fusesource.mqtt.codec.CONNECT;
1: import org.fusesource.mqtt.codec.DISCONNECT;
1: import org.fusesource.mqtt.codec.MQTTFrame;
1: import org.fusesource.mqtt.codec.PINGREQ;
1: import org.fusesource.mqtt.codec.PINGRESP;
1: import org.fusesource.mqtt.codec.PUBACK;
1: import org.fusesource.mqtt.codec.PUBCOMP;
1: import org.fusesource.mqtt.codec.PUBLISH;
1: import org.fusesource.mqtt.codec.PUBREC;
1: import org.fusesource.mqtt.codec.PUBREL;
1: import org.fusesource.mqtt.codec.SUBACK;
1: import org.slf4j.Logger;
1: import org.slf4j.LoggerFactory;
1: 
1: /**
1:  * Implements a simple WebSocket based MQTT Client that can be used for unit testing.
1:  */
0: public class MQTTWSConnection implements WebSocket, WebSocket.OnBinaryMessage {
1: 
1:     private static final Logger LOG = LoggerFactory.getLogger(MQTTWSConnection.class);
1: 
1:     private static final MQTTFrame PING_RESP_FRAME = new PINGRESP().encode();
1: 
0:     private Connection connection;
1:     private final CountDownLatch connectLatch = new CountDownLatch(1);
1:     private final MQTTWireFormat wireFormat = new MQTTWireFormat();
1: 
0:     private final BlockingQueue<MQTTFrame> prefetch = new LinkedBlockingDeque<MQTTFrame>();
1: 
1:     private int closeCode = -1;
1:     private String closeMessage;
1: 
1:     public boolean isConnected() {
1:         return connection != null ? connection.isOpen() : false;
1:     }
1: 
1:     public void close() {
1:         if (connection != null) {
1:             connection.close();
1:         }
1:     }
1: 
1:     //----- Connection and Disconnection methods -----------------------------//
1: 
1:     public void connect() throws Exception {
1:         connect(UUID.randomUUID().toString());
1:     }
1: 
1:     public void connect(String clientId) throws Exception {
1:         checkConnected();
1: 
1:         CONNECT command = new CONNECT();
1: 
1:         command.clientId(new UTF8Buffer(clientId));
1:         command.cleanSession(false);
1:         command.version(3);
1:         command.keepAlive((short) 0);
1: 
0:         ByteSequence payload = wireFormat.marshal(command.encode());
0:         connection.sendMessage(payload.data, 0, payload.length);
1: 
1:         MQTTFrame incoming = receive(15, TimeUnit.SECONDS);
1:         if (incoming == null || incoming.messageType() != CONNACK.TYPE) {
1:             throw new IOException("Failed to connect to remote service.");
1:         }
1:     }
1: 
1:     public void disconnect() throws Exception {
1:         if (!isConnected()) {
1:             return;
1:         }
1: 
1:         DISCONNECT command = new DISCONNECT();
0:         ByteSequence payload = wireFormat.marshal(command.encode());
0:         connection.sendMessage(payload.data, 0, payload.length);
1:     }
1: 
1:     //---- Send methods ------------------------------------------------------//
1: 
1:     public void sendFrame(MQTTFrame frame) throws Exception {
1:         checkConnected();
0:         ByteSequence payload = wireFormat.marshal(frame);
0:         connection.sendMessage(payload.data, 0, payload.length);
1:     }
1: 
1:     public void keepAlive() throws Exception {
1:         checkConnected();
0:         ByteSequence payload = wireFormat.marshal(new PINGREQ().encode());
0:         connection.sendMessage(payload.data, 0, payload.length);
1:     }
1: 
1:     //----- Receive methods --------------------------------------------------//
1: 
1:     public MQTTFrame receive() throws Exception {
1:         checkConnected();
1:         return prefetch.take();
1:     }
1: 
1:     public MQTTFrame receive(long timeout, TimeUnit unit) throws Exception {
1:         checkConnected();
1:         return prefetch.poll(timeout, unit);
1:     }
1: 
1:     public MQTTFrame receiveNoWait() throws Exception {
1:         checkConnected();
1:         return prefetch.poll();
1:     }
1: 
1:     //---- Blocking state change calls ---------------------------------------//
1: 
1:     public void awaitConnection() throws InterruptedException {
1:         connectLatch.await();
1:     }
1: 
1:     public boolean awaitConnection(long time, TimeUnit unit) throws InterruptedException {
1:         return connectLatch.await(time, unit);
1:     }
1: 
1:     //----- Property Accessors -----------------------------------------------//
1: 
1:     public int getCloseCode() {
1:         return closeCode;
1:     }
1: 
1:     public String getCloseMessage() {
1:         return closeMessage;
1:     }
1: 
1:     //----- WebSocket callback handlers --------------------------------------//
1: 
1:     @Override
0:     public void onMessage(byte[] data, int offset, int length) {
1:         if (data ==null || length <= 0) {
1:             return;
1:         }
1: 
1:         MQTTFrame frame = null;
1: 
1:         try {
1:             frame = (MQTTFrame)wireFormat.unmarshal(new ByteSequence(data, offset, length));
1:         } catch (IOException e) {
1:             LOG.error("Could not decode incoming MQTT Frame: ", e.getMessage());
1:             connection.close();
1:         }
1: 
1:         try {
1:             switch (frame.messageType()) {
1:             case PINGREQ.TYPE:
1:                 PINGREQ ping = new PINGREQ().decode(frame);
1:                 LOG.info("WS-Client read frame: {}", ping);
1:                 sendFrame(PING_RESP_FRAME);
1:                 break;
1:             case PINGRESP.TYPE:
1:                 LOG.info("WS-Client ping response received.");
1:                 break;
1:             case CONNACK.TYPE:
1:                 CONNACK connAck = new CONNACK().decode(frame);
1:                 LOG.info("WS-Client read frame: {}", connAck);
1:                 prefetch.put(frame);
1:                 break;
1:             case SUBACK.TYPE:
1:                 SUBACK subAck = new SUBACK().decode(frame);
1:                 LOG.info("WS-Client read frame: {}", subAck);
1:                 prefetch.put(frame);
1:                 break;
1:             case PUBLISH.TYPE:
1:                 PUBLISH publish = new PUBLISH().decode(frame);
1:                 LOG.info("WS-Client read frame: {}", publish);
1:                 prefetch.put(frame);
1:                 break;
1:             case PUBACK.TYPE:
1:                 PUBACK pubAck = new PUBACK().decode(frame);
1:                 LOG.info("WS-Client read frame: {}", pubAck);
1:                 prefetch.put(frame);
1:                 break;
1:             case PUBREC.TYPE:
1:                 PUBREC pubRec = new PUBREC().decode(frame);
1:                 LOG.info("WS-Client read frame: {}", pubRec);
1:                 prefetch.put(frame);
1:                 break;
1:             case PUBREL.TYPE:
1:                 PUBREL pubRel = new PUBREL().decode(frame);
1:                 LOG.info("WS-Client read frame: {}", pubRel);
1:                 prefetch.put(frame);
1:                 break;
1:             case PUBCOMP.TYPE:
1:                 PUBCOMP pubComp = new PUBCOMP().decode(frame);
1:                 LOG.info("WS-Client read frame: {}", pubComp);
1:                 prefetch.put(frame);
1:                 break;
1:             default:
1:                 LOG.error("Unknown MQTT  Frame received.");
1:                 connection.close();
1:             }
1:         } catch (Exception e) {
1:             LOG.error("Could not decode incoming MQTT Frame: ", e.getMessage());
1:             connection.close();
1:         }
1:     }
1: 
1:     @Override
0:     public void onOpen(Connection connection) {
0:         this.connection = connection;
1:         this.connectLatch.countDown();
1:     }
1: 
1:     @Override
0:     public void onClose(int closeCode, String message) {
0:         LOG.trace("MQTT WS Connection closed, code:{} message:{}", closeCode, message);
1: 
1:         this.connection = null;
0:         this.closeCode = closeCode;
0:         this.closeMessage = message;
1:     }
1: 
1:     //----- Internal implementation ------------------------------------------//
1: 
1:     private void checkConnected() throws IOException {
1:         if (!isConnected()) {
1:             throw new IOException("MQTT WS Connection is closed.");
1:         }
1:     }
1: }
author:Christopher L. Shannon (cshannon)
-------------------------------------------------------------------------------
commit:bd442a3
/////////////////////////////////////////////////////////////////////////
1:         connect(command);
1:     }
1: 
1:     public void connect(CONNECT command) throws Exception {
0:         checkConnected();
commit:913f644
/////////////////////////////////////////////////////////////////////////
1:     protected Session getConnection() {
1:         return connection;
1:     }
1: 
commit:f44c3d2
/////////////////////////////////////////////////////////////////////////
1: import java.nio.ByteBuffer;
/////////////////////////////////////////////////////////////////////////
1: import org.eclipse.jetty.websocket.api.Session;
1: import org.eclipse.jetty.websocket.api.WebSocketAdapter;
1: import org.eclipse.jetty.websocket.api.WebSocketListener;
/////////////////////////////////////////////////////////////////////////
1: public class MQTTWSConnection extends WebSocketAdapter implements WebSocketListener {
1:     private Session connection;
/////////////////////////////////////////////////////////////////////////
1:     @Override
/////////////////////////////////////////////////////////////////////////
0:         connection.getRemote().sendBytes(ByteBuffer.wrap(payload.data));
/////////////////////////////////////////////////////////////////////////
0:         connection.getRemote().sendBytes(ByteBuffer.wrap(payload.data));
/////////////////////////////////////////////////////////////////////////
0:         connection.getRemote().sendBytes(ByteBuffer.wrap(payload.data));
0:         connection.getRemote().sendBytes(ByteBuffer.wrap(payload.data));
/////////////////////////////////////////////////////////////////////////
1:     public void onWebSocketBinary(byte[] data, int offset, int length) {
/////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////
0: 
0:     /* (non-Javadoc)
0:      * @see org.eclipse.jetty.websocket.api.WebSocketListener#onWebSocketClose(int, java.lang.String)
0:      */
0:     @Override
1:     public void onWebSocketClose(int statusCode, String reason) {
1:         LOG.trace("MQTT WS Connection closed, code:{} message:{}", statusCode, reason);
0: 
0:         this.connection = null;
1:         this.closeCode = statusCode;
1:         this.closeMessage = reason;
0: 
1:     }
0: 
0:     /* (non-Javadoc)
0:      * @see org.eclipse.jetty.websocket.api.WebSocketListener#onWebSocketConnect(org.eclipse.jetty.websocket.api.Session)
0:      */
0:     @Override
0:     public void onWebSocketConnect(
0:             org.eclipse.jetty.websocket.api.Session session) {
1:         this.connection = session;
0:         this.connectLatch.countDown();
1:     }
0: 
author:Dejan Bosanac
-------------------------------------------------------------------------------
commit:f8bfff0
/////////////////////////////////////////////////////////////////////////
0: 
1:         } else {
1:             CONNACK connack = new CONNACK().decode(incoming);
1:             if (!connack.code().equals(CONNACK.Code.CONNECTION_ACCEPTED)) {
1:                 throw new IOException("Failed to connect to remote service: " + connack.code());
0:             }
============================================================================