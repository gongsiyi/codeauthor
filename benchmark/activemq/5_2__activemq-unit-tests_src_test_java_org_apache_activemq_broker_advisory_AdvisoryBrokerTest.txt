1:d29ca2a: /**
1:57b4941:  * Licensed to the Apache Software Foundation (ASF) under one or more
1:57b4941:  * contributor license agreements.  See the NOTICE file distributed with
1:57b4941:  * this work for additional information regarding copyright ownership.
1:57b4941:  * The ASF licenses this file to You under the Apache License, Version 2.0
1:57b4941:  * (the "License"); you may not use this file except in compliance with
1:57b4941:  * the License.  You may obtain a copy of the License at
3:5be5a62:  *
1:230a86c:  *      http://www.apache.org/licenses/LICENSE-2.0
1:5be5a62:  *
1:5be5a62:  * Unless required by applicable law or agreed to in writing, software
1:5be5a62:  * distributed under the License is distributed on an "AS IS" BASIS,
1:5be5a62:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:5be5a62:  * See the License for the specific language governing permissions and
1:5be5a62:  * limitations under the License.
1:5be5a62:  */
1:d29ca2a: package org.apache.activemq.broker.advisory;
1:d29ca2a: 
1:d29ca2a: import junit.framework.Test;
1:d29ca2a: 
1:d29ca2a: import org.apache.activemq.advisory.AdvisorySupport;
1:d29ca2a: import org.apache.activemq.broker.BrokerTestSupport;
1:d29ca2a: import org.apache.activemq.broker.StubConnection;
1:d29ca2a: import org.apache.activemq.command.ActiveMQDestination;
1:d29ca2a: import org.apache.activemq.command.ActiveMQQueue;
1:d29ca2a: import org.apache.activemq.command.ConnectionInfo;
1:d29ca2a: import org.apache.activemq.command.ConsumerInfo;
1:d29ca2a: import org.apache.activemq.command.Message;
1:d29ca2a: import org.apache.activemq.command.ProducerInfo;
1:d29ca2a: import org.apache.activemq.command.RemoveInfo;
1:d29ca2a: import org.apache.activemq.command.SessionInfo;
1:d29ca2a: 
1:d29ca2a: public class AdvisoryBrokerTest extends BrokerTestSupport {
1:d29ca2a:      
1:7f5213b:     public void testConnectionAdvisories() throws Exception {
1:d29ca2a:         
1:d29ca2a:         ActiveMQDestination destination = AdvisorySupport.getConnectionAdvisoryTopic();
1:d29ca2a:         
1:d29ca2a:         // Setup a first connection
1:d29ca2a:         StubConnection connection1 = createConnection();
1:d29ca2a:         ConnectionInfo connectionInfo1 = createConnectionInfo();
1:d29ca2a:         SessionInfo sessionInfo1 = createSessionInfo(connectionInfo1);
1:d29ca2a:         ConsumerInfo consumerInfo1 = createConsumerInfo(sessionInfo1, destination);
1:d29ca2a:         consumerInfo1.setPrefetchSize(100);
1:d29ca2a:         
1:d29ca2a:         connection1.send(connectionInfo1);
1:d29ca2a:         connection1.send(sessionInfo1);
1:d29ca2a:         connection1.send(consumerInfo1);
1:d29ca2a: 
1:d29ca2a:         // We should get an advisory of our own connection.
1:d29ca2a:         Message m1 = receiveMessage(connection1);
1:d29ca2a:         assertNotNull(m1);
1:d29ca2a:         assertNotNull(m1.getDataStructure());
1:d29ca2a:         assertEquals(((ConnectionInfo)m1.getDataStructure()).getConnectionId(), connectionInfo1.getConnectionId());
1:d29ca2a: 
1:d29ca2a:         // Setup a second connection 
1:d29ca2a:         StubConnection connection2 = createConnection();
1:d29ca2a:         ConnectionInfo connectionInfo2 = createConnectionInfo();
1:d29ca2a:         connection2.send(connectionInfo2);
1:d29ca2a:         
1:d29ca2a:         // We should get an advisory of the second connection.
1:d29ca2a:         m1 = receiveMessage(connection1);
1:d29ca2a:         assertNotNull(m1);
1:d29ca2a:         assertNotNull(m1.getDataStructure());
1:d29ca2a:         assertEquals(((ConnectionInfo)m1.getDataStructure()).getConnectionId(), connectionInfo2.getConnectionId());
1:d29ca2a: 
1:d29ca2a:         // Close the second connection.
5:d29ca2a:         connection2.send(closeConnectionInfo(connectionInfo2));
1:d29ca2a:         connection2.stop();
1:d29ca2a: 
1:d29ca2a:         // We should get an advisory of the second connection closing
1:d29ca2a:         m1 = receiveMessage(connection1);
1:d29ca2a:         assertNotNull(m1);
1:d29ca2a:         assertNotNull(m1.getDataStructure());
1:d29ca2a:         RemoveInfo r = (RemoveInfo) m1.getDataStructure();
1:d29ca2a:         assertEquals(r.getObjectId(), connectionInfo2.getConnectionId());
1:d29ca2a:         
1:d29ca2a:         assertNoMessagesLeft(connection1);
1:d29ca2a:     }
1:d29ca2a: 
1:7f5213b:     public void testConsumerAdvisories() throws Exception {
1:d29ca2a: 
1:d29ca2a:         ActiveMQDestination queue = new ActiveMQQueue("test");
1:d29ca2a:         ActiveMQDestination destination = AdvisorySupport.getConsumerAdvisoryTopic(queue);
1:d29ca2a:         
1:d29ca2a:         // Setup a first connection
1:d29ca2a:         StubConnection connection1 = createConnection();
1:d29ca2a:         ConnectionInfo connectionInfo1 = createConnectionInfo();
1:d29ca2a:         SessionInfo sessionInfo1 = createSessionInfo(connectionInfo1);
1:d29ca2a:         ConsumerInfo consumerInfo1 = createConsumerInfo(sessionInfo1, destination);
1:d29ca2a:         consumerInfo1.setPrefetchSize(100);
1:d29ca2a:         
1:d29ca2a:         connection1.send(connectionInfo1);
1:d29ca2a:         connection1.send(sessionInfo1);
1:d29ca2a:         connection1.send(consumerInfo1);
1:d29ca2a: 
1:d29ca2a:         // We should not see and advisory for the advisory consumer.
1:d29ca2a:         assertNoMessagesLeft(connection1);
1:d29ca2a: 
1:d29ca2a:         // Setup a second consumer.
1:d29ca2a:         StubConnection connection2 = createConnection();
1:d29ca2a:         ConnectionInfo connectionInfo2 = createConnectionInfo();
1:d29ca2a:         SessionInfo sessionInfo2 = createSessionInfo(connectionInfo2);
1:d29ca2a:         ConsumerInfo consumerInfo2 = createConsumerInfo(sessionInfo2, queue);
1:d29ca2a:         consumerInfo1.setPrefetchSize(100);
1:d29ca2a:         
1:d29ca2a:         connection2.send(connectionInfo2);
1:d29ca2a:         connection2.send(sessionInfo2);
1:d29ca2a:         connection2.send(consumerInfo2);
1:d29ca2a:         
1:d29ca2a:         // We should get an advisory of the new consumer.
1:d29ca2a:         Message m1 = receiveMessage(connection1);
1:d29ca2a:         assertNotNull(m1);
1:d29ca2a:         assertNotNull(m1.getDataStructure());
1:d29ca2a:         assertEquals(((ConsumerInfo)m1.getDataStructure()).getConsumerId(), consumerInfo2.getConsumerId());
1:d29ca2a: 
1:d29ca2a:         // Close the second connection.
1:1d846a9:         connection2.request(closeConnectionInfo(connectionInfo2));
1:d29ca2a:         connection2.stop();
1:d29ca2a: 
1:d29ca2a:         // We should get an advisory of the consumer closing
1:d29ca2a:         m1 = receiveMessage(connection1);
1:d29ca2a:         assertNotNull(m1);
1:d29ca2a:         assertNotNull(m1.getDataStructure());
1:d29ca2a:         RemoveInfo r = (RemoveInfo) m1.getDataStructure();
1:d29ca2a:         assertEquals(r.getObjectId(), consumerInfo2.getConsumerId());
1:d29ca2a:         
1:d29ca2a:         assertNoMessagesLeft(connection2);
1:d29ca2a:     }
1:d29ca2a: 
1:7f5213b:     public void testConsumerAdvisoriesReplayed() throws Exception {
1:d29ca2a: 
1:d29ca2a:         ActiveMQDestination queue = new ActiveMQQueue("test");
1:d29ca2a:         ActiveMQDestination destination = AdvisorySupport.getConsumerAdvisoryTopic(queue);
1:d29ca2a:         
1:d29ca2a:         // Setup a first connection
1:d29ca2a:         StubConnection connection1 = createConnection();
1:d29ca2a:         ConnectionInfo connectionInfo1 = createConnectionInfo();
1:d29ca2a:         SessionInfo sessionInfo1 = createSessionInfo(connectionInfo1);
1:d29ca2a:         
1:d29ca2a:         connection1.send(connectionInfo1);
1:d29ca2a:         connection1.send(sessionInfo1);
1:d29ca2a: 
1:d29ca2a:         // Setup a second consumer.
1:d29ca2a:         StubConnection connection2 = createConnection();
1:d29ca2a:         ConnectionInfo connectionInfo2 = createConnectionInfo();
1:d29ca2a:         SessionInfo sessionInfo2 = createSessionInfo(connectionInfo2);
1:d29ca2a:         ConsumerInfo consumerInfo2 = createConsumerInfo(sessionInfo2, queue);
1:d29ca2a:         consumerInfo2.setPrefetchSize(100);        
1:d29ca2a:         connection2.send(connectionInfo2);
1:d29ca2a:         connection2.send(sessionInfo2);
1:d29ca2a:         connection2.send(consumerInfo2);
1:d29ca2a:         
1:d29ca2a:         // We should get an advisory of the previous consumer.        
1:d29ca2a:         ConsumerInfo consumerInfo1 = createConsumerInfo(sessionInfo1, destination);
1:d29ca2a:         consumerInfo1.setPrefetchSize(100);
1:d29ca2a:         connection1.send(consumerInfo1);
1:d29ca2a: 
1:d29ca2a:         Message m1 = receiveMessage(connection1);
1:d29ca2a:         assertNotNull(m1);
1:d29ca2a:         assertNotNull(m1.getDataStructure());
1:d29ca2a:         assertEquals(((ConsumerInfo)m1.getDataStructure()).getConsumerId(), consumerInfo2.getConsumerId());
1:d29ca2a: 
1:d29ca2a:         // Close the second connection.
1:12fa4de:         connection2.request(closeConnectionInfo(connectionInfo2));
1:d29ca2a:         connection2.stop();
1:d29ca2a: 
1:d29ca2a:         // We should get an advisory of the consumer closing
1:d29ca2a:         m1 = receiveMessage(connection1);
1:d29ca2a:         assertNotNull(m1);
1:d29ca2a:         assertNotNull(m1.getDataStructure());
1:d29ca2a:         RemoveInfo r = (RemoveInfo) m1.getDataStructure();
1:d29ca2a:         assertEquals(r.getObjectId(), consumerInfo2.getConsumerId());
1:d29ca2a:         
1:d29ca2a:         assertNoMessagesLeft(connection2);
1:d29ca2a:     }
1:d29ca2a: 
1:d29ca2a: 
1:7f5213b:     public void testProducerAdvisories() throws Exception {
1:d29ca2a: 
1:d29ca2a:         ActiveMQDestination queue = new ActiveMQQueue("test");
1:d29ca2a:         ActiveMQDestination destination = AdvisorySupport.getProducerAdvisoryTopic(queue);
1:d29ca2a:         
1:d29ca2a:         // Setup a first connection
1:d29ca2a:         StubConnection connection1 = createConnection();
1:d29ca2a:         ConnectionInfo connectionInfo1 = createConnectionInfo();
1:d29ca2a:         SessionInfo sessionInfo1 = createSessionInfo(connectionInfo1);
1:d29ca2a:         ConsumerInfo consumerInfo1 = createConsumerInfo(sessionInfo1, destination);
1:d29ca2a:         consumerInfo1.setPrefetchSize(100);
1:d29ca2a:         
1:d29ca2a:         connection1.send(connectionInfo1);
1:d29ca2a:         connection1.send(sessionInfo1);
1:d29ca2a:         connection1.send(consumerInfo1);
1:d29ca2a: 
1:d29ca2a:         assertNoMessagesLeft(connection1);
1:d29ca2a: 
1:d29ca2a:         // Setup a producer.
1:d29ca2a:         StubConnection connection2 = createConnection();
1:d29ca2a:         ConnectionInfo connectionInfo2 = createConnectionInfo();
1:d29ca2a:         SessionInfo sessionInfo2 = createSessionInfo(connectionInfo2);
1:d29ca2a:         ProducerInfo producerInfo2 = createProducerInfo(sessionInfo2);
1:d29ca2a:         producerInfo2.setDestination(queue);
1:d29ca2a:         
1:d29ca2a:         connection2.send(connectionInfo2);
1:d29ca2a:         connection2.send(sessionInfo2);
1:d29ca2a:         connection2.send(producerInfo2);
1:d29ca2a:         
1:d29ca2a:         // We should get an advisory of the new produver.
1:d29ca2a:         Message m1 = receiveMessage(connection1);
1:d29ca2a:         assertNotNull(m1);
1:d29ca2a:         assertNotNull(m1.getDataStructure());
1:d29ca2a:         assertEquals(((ProducerInfo)m1.getDataStructure()).getProducerId(), producerInfo2.getProducerId());
1:d29ca2a: 
1:d29ca2a:         // Close the second connection.
1:12fa4de:         connection2.request(closeConnectionInfo(connectionInfo2));
1:d29ca2a:         connection2.stop();
1:d29ca2a: 
1:d29ca2a:         // We should get an advisory of the producer closing
1:d29ca2a:         m1 = receiveMessage(connection1);
1:d29ca2a:         assertNotNull(m1);
1:d29ca2a:         assertNotNull(m1.getDataStructure());
1:d29ca2a:         RemoveInfo r = (RemoveInfo) m1.getDataStructure();
1:d29ca2a:         assertEquals(r.getObjectId(), producerInfo2.getProducerId());
1:d29ca2a:         
1:d29ca2a:         assertNoMessagesLeft(connection2);
1:d29ca2a:     }
1:d29ca2a:     
1:7f5213b:     public void testProducerAdvisoriesReplayed() throws Exception {
1:d29ca2a: 
1:d29ca2a:         ActiveMQDestination queue = new ActiveMQQueue("test");
1:d29ca2a:         ActiveMQDestination destination = AdvisorySupport.getProducerAdvisoryTopic(queue);
1:d29ca2a:         
1:d29ca2a:         // Setup a first connection
1:d29ca2a:         StubConnection connection1 = createConnection();
1:d29ca2a:         ConnectionInfo connectionInfo1 = createConnectionInfo();
1:d29ca2a:         SessionInfo sessionInfo1 = createSessionInfo(connectionInfo1);
1:d29ca2a:         
1:d29ca2a:         connection1.send(connectionInfo1);
1:d29ca2a:         connection1.send(sessionInfo1);
1:d29ca2a: 
1:d29ca2a:         // Setup a producer.
1:d29ca2a:         StubConnection connection2 = createConnection();
1:d29ca2a:         ConnectionInfo connectionInfo2 = createConnectionInfo();
1:d29ca2a:         SessionInfo sessionInfo2 = createSessionInfo(connectionInfo2);
1:d29ca2a:         ProducerInfo producerInfo2 = createProducerInfo(sessionInfo2);
1:d29ca2a:         producerInfo2.setDestination(queue);
1:d29ca2a:         
1:d29ca2a:         connection2.send(connectionInfo2);
1:d29ca2a:         connection2.send(sessionInfo2);
1:d29ca2a:         connection2.send(producerInfo2);
1:d29ca2a:         
1:d29ca2a:         // Create the advisory consumer.. it should see the previous producer        
1:d29ca2a:         ConsumerInfo consumerInfo1 = createConsumerInfo(sessionInfo1, destination);
1:d29ca2a:         consumerInfo1.setPrefetchSize(100);
1:d29ca2a:         connection1.send(consumerInfo1);
1:d29ca2a: 
1:d29ca2a:         Message m1 = receiveMessage(connection1);
1:d29ca2a:         assertNotNull(m1);
1:d29ca2a:         assertNotNull(m1.getDataStructure());
1:d29ca2a:         assertEquals(((ProducerInfo)m1.getDataStructure()).getProducerId(), producerInfo2.getProducerId());
1:d29ca2a: 
1:d29ca2a:         // Close the second connection.
1:12fa4de:         connection2.request(closeConnectionInfo(connectionInfo2));
1:d29ca2a:         connection2.stop();
1:d29ca2a: 
1:d29ca2a:         // We should get an advisory of the producer closing
1:d29ca2a:         m1 = receiveMessage(connection1);
1:d29ca2a:         assertNotNull(m1);
1:d29ca2a:         assertNotNull(m1.getDataStructure());
1:d29ca2a:         RemoveInfo r = (RemoveInfo) m1.getDataStructure();
1:d29ca2a:         assertEquals(r.getObjectId(), producerInfo2.getProducerId());
1:d29ca2a:         
1:d29ca2a:         assertNoMessagesLeft(connection2);
1:d29ca2a:     }
1:d29ca2a: 
1:7f5213b:     public void testProducerAdvisoriesReplayedOnlyTargetNewConsumer() throws Exception {
1:d29ca2a: 
1:d29ca2a:         ActiveMQDestination queue = new ActiveMQQueue("test");
1:d29ca2a:         ActiveMQDestination destination = AdvisorySupport.getProducerAdvisoryTopic(queue);
1:d29ca2a:         
1:d29ca2a:         // Setup a first connection
1:d29ca2a:         StubConnection connection1 = createConnection();
1:d29ca2a:         ConnectionInfo connectionInfo1 = createConnectionInfo();
1:d29ca2a:         SessionInfo sessionInfo1 = createSessionInfo(connectionInfo1);
1:d29ca2a:         connection1.send(connectionInfo1);
1:d29ca2a:         connection1.send(sessionInfo1);
1:d29ca2a:         // Create the first consumer..         
1:d29ca2a:         ConsumerInfo consumerInfo1 = createConsumerInfo(sessionInfo1, destination);
1:d29ca2a:         consumerInfo1.setPrefetchSize(100);
1:d29ca2a:         connection1.send(consumerInfo1);
1:d29ca2a: 
1:d29ca2a:         // Setup a producer.
1:d29ca2a:         StubConnection connection2 = createConnection();
1:d29ca2a:         ConnectionInfo connectionInfo2 = createConnectionInfo();
1:d29ca2a:         SessionInfo sessionInfo2 = createSessionInfo(connectionInfo2);
1:d29ca2a:         ProducerInfo producerInfo2 = createProducerInfo(sessionInfo2);
1:d29ca2a:         producerInfo2.setDestination(queue);        
1:d29ca2a:         connection2.send(connectionInfo2);
1:d29ca2a:         connection2.send(sessionInfo2);
1:d29ca2a:         connection2.send(producerInfo2);
1:d29ca2a:         
1:d29ca2a:         Message m1 = receiveMessage(connection1);
1:d29ca2a:         assertNotNull(m1);
1:d29ca2a:         assertNotNull(m1.getDataStructure());
1:d29ca2a:         assertEquals(((ProducerInfo)m1.getDataStructure()).getProducerId(), producerInfo2.getProducerId());
1:d29ca2a:         
1:d29ca2a:         // Create the 2nd consumer..         
1:d29ca2a:         ConsumerInfo consumerInfo2 = createConsumerInfo(sessionInfo2, destination);
1:d29ca2a:         consumerInfo2.setPrefetchSize(100);
1:d29ca2a:         connection2.send(consumerInfo2);
1:d29ca2a: 
1:d29ca2a:         // The second consumer should se a replay
1:d29ca2a:         m1 = receiveMessage(connection2);
1:d29ca2a:         assertNotNull(m1);
1:d29ca2a:         assertNotNull(m1.getDataStructure());
1:d29ca2a:         assertEquals(((ProducerInfo)m1.getDataStructure()).getProducerId(), producerInfo2.getProducerId());
1:d29ca2a: 
1:d29ca2a:         // But the first consumer should not see the replay.
1:d29ca2a:         assertNoMessagesLeft(connection1);
1:d29ca2a:     }
1:d29ca2a: 
1:d29ca2a:     public static Test suite() {
1:d29ca2a:         return suite(AdvisoryBrokerTest.class);
1:d29ca2a:     }
1:d29ca2a:     
1:d29ca2a:     public static void main(String[] args) {
1:d29ca2a:         junit.textui.TestRunner.run(suite());
1:d29ca2a:     }
1:d29ca2a: 
1:d29ca2a: }
============================================================================
author:Hadrian Zbarcea
-------------------------------------------------------------------------------
commit:f9bec8f
author:Timothy A. Bish
-------------------------------------------------------------------------------
commit:ef24cc9
author:Hiram R. Chirino
-------------------------------------------------------------------------------
commit:9a8f6e4
/////////////////////////////////////////////////////////////////////////
commit:230a86c
/////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////
1:  *      http://www.apache.org/licenses/LICENSE-2.0
commit:57b4941
/////////////////////////////////////////////////////////////////////////
1:  * Licensed to the Apache Software Foundation (ASF) under one or more
1:  * contributor license agreements.  See the NOTICE file distributed with
1:  * this work for additional information regarding copyright ownership.
1:  * The ASF licenses this file to You under the Apache License, Version 2.0
1:  * (the "License"); you may not use this file except in compliance with
1:  * the License.  You may obtain a copy of the License at
commit:7f5213b
/////////////////////////////////////////////////////////////////////////
1:     public void testConnectionAdvisories() throws Exception {
/////////////////////////////////////////////////////////////////////////
1:     public void testConsumerAdvisories() throws Exception {
/////////////////////////////////////////////////////////////////////////
1:     public void testConsumerAdvisoriesReplayed() throws Exception {
/////////////////////////////////////////////////////////////////////////
1:     public void testProducerAdvisories() throws Exception {
/////////////////////////////////////////////////////////////////////////
1:     public void testProducerAdvisoriesReplayed() throws Exception {
/////////////////////////////////////////////////////////////////////////
1:     public void testProducerAdvisoriesReplayedOnlyTargetNewConsumer() throws Exception {
commit:5be5a62
/////////////////////////////////////////////////////////////////////////
1:  *
0:  * Copyright 2005-2006 The Apache Software Foundation
1:  *
0:  * Licensed under the Apache License, Version 2.0 (the "License");
0:  * you may not use this file except in compliance with the License.
0:  * You may obtain a copy of the License at
1:  *
0:  * http://www.apache.org/licenses/LICENSE-2.0
1:  *
1:  * Unless required by applicable law or agreed to in writing, software
1:  * distributed under the License is distributed on an "AS IS" BASIS,
1:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:  * See the License for the specific language governing permissions and
1:  * limitations under the License.
1:  */
commit:d29ca2a
/////////////////////////////////////////////////////////////////////////
1: /**
0: * <a href="http://activemq.org">ActiveMQ: The Open Source Message Fabric</a>
0: *
0: * Copyright 2005 (C) LogicBlaze, Inc. http://www.logicblaze.com
0: *
0: * Licensed under the Apache License, Version 2.0 (the "License");
0: * you may not use this file except in compliance with the License.
0: * You may obtain a copy of the License at
0: *
0: * http://www.apache.org/licenses/LICENSE-2.0
0: *
0: * Unless required by applicable law or agreed to in writing, software
0: * distributed under the License is distributed on an "AS IS" BASIS,
0: * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
0: * See the License for the specific language governing permissions and
0: * limitations under the License.
0: *
0: **/
1: package org.apache.activemq.broker.advisory;
1: 
1: import junit.framework.Test;
1: 
1: import org.apache.activemq.advisory.AdvisorySupport;
1: import org.apache.activemq.broker.BrokerTestSupport;
1: import org.apache.activemq.broker.StubConnection;
1: import org.apache.activemq.command.ActiveMQDestination;
1: import org.apache.activemq.command.ActiveMQQueue;
1: import org.apache.activemq.command.ConnectionInfo;
1: import org.apache.activemq.command.ConsumerInfo;
1: import org.apache.activemq.command.Message;
1: import org.apache.activemq.command.ProducerInfo;
1: import org.apache.activemq.command.RemoveInfo;
1: import org.apache.activemq.command.SessionInfo;
1: 
1: public class AdvisoryBrokerTest extends BrokerTestSupport {
1:      
0:     public void testConnectionAdvisories() throws Throwable {
1:         
1:         ActiveMQDestination destination = AdvisorySupport.getConnectionAdvisoryTopic();
1:         
1:         // Setup a first connection
1:         StubConnection connection1 = createConnection();
1:         ConnectionInfo connectionInfo1 = createConnectionInfo();
1:         SessionInfo sessionInfo1 = createSessionInfo(connectionInfo1);
1:         ConsumerInfo consumerInfo1 = createConsumerInfo(sessionInfo1, destination);
1:         consumerInfo1.setPrefetchSize(100);
1:         
1:         connection1.send(connectionInfo1);
1:         connection1.send(sessionInfo1);
1:         connection1.send(consumerInfo1);
1: 
1:         // We should get an advisory of our own connection.
1:         Message m1 = receiveMessage(connection1);
1:         assertNotNull(m1);
1:         assertNotNull(m1.getDataStructure());
1:         assertEquals(((ConnectionInfo)m1.getDataStructure()).getConnectionId(), connectionInfo1.getConnectionId());
1: 
1:         // Setup a second connection 
1:         StubConnection connection2 = createConnection();
1:         ConnectionInfo connectionInfo2 = createConnectionInfo();
1:         connection2.send(connectionInfo2);
1:         
1:         // We should get an advisory of the second connection.
1:         m1 = receiveMessage(connection1);
1:         assertNotNull(m1);
1:         assertNotNull(m1.getDataStructure());
1:         assertEquals(((ConnectionInfo)m1.getDataStructure()).getConnectionId(), connectionInfo2.getConnectionId());
1: 
1:         // Close the second connection.
1:         connection2.send(closeConnectionInfo(connectionInfo2));
1:         connection2.stop();
1: 
1:         // We should get an advisory of the second connection closing
1:         m1 = receiveMessage(connection1);
1:         assertNotNull(m1);
1:         assertNotNull(m1.getDataStructure());
1:         RemoveInfo r = (RemoveInfo) m1.getDataStructure();
1:         assertEquals(r.getObjectId(), connectionInfo2.getConnectionId());
1:         
1:         assertNoMessagesLeft(connection1);
1:     }
1: 
0:     public void testConsumerAdvisories() throws Throwable {
1: 
1:         ActiveMQDestination queue = new ActiveMQQueue("test");
1:         ActiveMQDestination destination = AdvisorySupport.getConsumerAdvisoryTopic(queue);
1:         
1:         // Setup a first connection
1:         StubConnection connection1 = createConnection();
1:         ConnectionInfo connectionInfo1 = createConnectionInfo();
1:         SessionInfo sessionInfo1 = createSessionInfo(connectionInfo1);
1:         ConsumerInfo consumerInfo1 = createConsumerInfo(sessionInfo1, destination);
1:         consumerInfo1.setPrefetchSize(100);
1:         
1:         connection1.send(connectionInfo1);
1:         connection1.send(sessionInfo1);
1:         connection1.send(consumerInfo1);
1: 
1:         // We should not see and advisory for the advisory consumer.
1:         assertNoMessagesLeft(connection1);
1: 
1:         // Setup a second consumer.
1:         StubConnection connection2 = createConnection();
1:         ConnectionInfo connectionInfo2 = createConnectionInfo();
1:         SessionInfo sessionInfo2 = createSessionInfo(connectionInfo2);
1:         ConsumerInfo consumerInfo2 = createConsumerInfo(sessionInfo2, queue);
1:         consumerInfo1.setPrefetchSize(100);
1:         
1:         connection2.send(connectionInfo2);
1:         connection2.send(sessionInfo2);
1:         connection2.send(consumerInfo2);
1:         
1:         // We should get an advisory of the new consumer.
1:         Message m1 = receiveMessage(connection1);
1:         assertNotNull(m1);
1:         assertNotNull(m1.getDataStructure());
1:         assertEquals(((ConsumerInfo)m1.getDataStructure()).getConsumerId(), consumerInfo2.getConsumerId());
1: 
1:         // Close the second connection.
1:         connection2.send(closeConnectionInfo(connectionInfo2));
1:         connection2.stop();
1: 
1:         // We should get an advisory of the consumer closing
1:         m1 = receiveMessage(connection1);
1:         assertNotNull(m1);
1:         assertNotNull(m1.getDataStructure());
1:         RemoveInfo r = (RemoveInfo) m1.getDataStructure();
1:         assertEquals(r.getObjectId(), consumerInfo2.getConsumerId());
1:         
1:         assertNoMessagesLeft(connection2);
1:     }
1: 
0:     public void testConsumerAdvisoriesReplayed() throws Throwable {
1: 
1:         ActiveMQDestination queue = new ActiveMQQueue("test");
1:         ActiveMQDestination destination = AdvisorySupport.getConsumerAdvisoryTopic(queue);
1:         
1:         // Setup a first connection
1:         StubConnection connection1 = createConnection();
1:         ConnectionInfo connectionInfo1 = createConnectionInfo();
1:         SessionInfo sessionInfo1 = createSessionInfo(connectionInfo1);
1:         
1:         connection1.send(connectionInfo1);
1:         connection1.send(sessionInfo1);
1: 
1:         // Setup a second consumer.
1:         StubConnection connection2 = createConnection();
1:         ConnectionInfo connectionInfo2 = createConnectionInfo();
1:         SessionInfo sessionInfo2 = createSessionInfo(connectionInfo2);
1:         ConsumerInfo consumerInfo2 = createConsumerInfo(sessionInfo2, queue);
1:         consumerInfo2.setPrefetchSize(100);        
1:         connection2.send(connectionInfo2);
1:         connection2.send(sessionInfo2);
1:         connection2.send(consumerInfo2);
1:         
1:         // We should get an advisory of the previous consumer.        
1:         ConsumerInfo consumerInfo1 = createConsumerInfo(sessionInfo1, destination);
1:         consumerInfo1.setPrefetchSize(100);
1:         connection1.send(consumerInfo1);
1: 
1:         Message m1 = receiveMessage(connection1);
1:         assertNotNull(m1);
1:         assertNotNull(m1.getDataStructure());
1:         assertEquals(((ConsumerInfo)m1.getDataStructure()).getConsumerId(), consumerInfo2.getConsumerId());
1: 
1:         // Close the second connection.
1:         connection2.send(closeConnectionInfo(connectionInfo2));
1:         connection2.stop();
1: 
1:         // We should get an advisory of the consumer closing
1:         m1 = receiveMessage(connection1);
1:         assertNotNull(m1);
1:         assertNotNull(m1.getDataStructure());
1:         RemoveInfo r = (RemoveInfo) m1.getDataStructure();
1:         assertEquals(r.getObjectId(), consumerInfo2.getConsumerId());
1:         
1:         assertNoMessagesLeft(connection2);
1:     }
1: 
1: 
0:     public void testProducerAdvisories() throws Throwable {
1: 
1:         ActiveMQDestination queue = new ActiveMQQueue("test");
1:         ActiveMQDestination destination = AdvisorySupport.getProducerAdvisoryTopic(queue);
1:         
1:         // Setup a first connection
1:         StubConnection connection1 = createConnection();
1:         ConnectionInfo connectionInfo1 = createConnectionInfo();
1:         SessionInfo sessionInfo1 = createSessionInfo(connectionInfo1);
1:         ConsumerInfo consumerInfo1 = createConsumerInfo(sessionInfo1, destination);
1:         consumerInfo1.setPrefetchSize(100);
1:         
1:         connection1.send(connectionInfo1);
1:         connection1.send(sessionInfo1);
1:         connection1.send(consumerInfo1);
1: 
1:         assertNoMessagesLeft(connection1);
1: 
1:         // Setup a producer.
1:         StubConnection connection2 = createConnection();
1:         ConnectionInfo connectionInfo2 = createConnectionInfo();
1:         SessionInfo sessionInfo2 = createSessionInfo(connectionInfo2);
1:         ProducerInfo producerInfo2 = createProducerInfo(sessionInfo2);
1:         producerInfo2.setDestination(queue);
1:         
1:         connection2.send(connectionInfo2);
1:         connection2.send(sessionInfo2);
1:         connection2.send(producerInfo2);
1:         
1:         // We should get an advisory of the new produver.
1:         Message m1 = receiveMessage(connection1);
1:         assertNotNull(m1);
1:         assertNotNull(m1.getDataStructure());
1:         assertEquals(((ProducerInfo)m1.getDataStructure()).getProducerId(), producerInfo2.getProducerId());
1: 
1:         // Close the second connection.
1:         connection2.send(closeConnectionInfo(connectionInfo2));
1:         connection2.stop();
1: 
1:         // We should get an advisory of the producer closing
1:         m1 = receiveMessage(connection1);
1:         assertNotNull(m1);
1:         assertNotNull(m1.getDataStructure());
1:         RemoveInfo r = (RemoveInfo) m1.getDataStructure();
1:         assertEquals(r.getObjectId(), producerInfo2.getProducerId());
1:         
1:         assertNoMessagesLeft(connection2);
1:     }
1:     
0:     public void testProducerAdvisoriesReplayed() throws Throwable {
1: 
1:         ActiveMQDestination queue = new ActiveMQQueue("test");
1:         ActiveMQDestination destination = AdvisorySupport.getProducerAdvisoryTopic(queue);
1:         
1:         // Setup a first connection
1:         StubConnection connection1 = createConnection();
1:         ConnectionInfo connectionInfo1 = createConnectionInfo();
1:         SessionInfo sessionInfo1 = createSessionInfo(connectionInfo1);
1:         
1:         connection1.send(connectionInfo1);
1:         connection1.send(sessionInfo1);
1: 
1:         // Setup a producer.
1:         StubConnection connection2 = createConnection();
1:         ConnectionInfo connectionInfo2 = createConnectionInfo();
1:         SessionInfo sessionInfo2 = createSessionInfo(connectionInfo2);
1:         ProducerInfo producerInfo2 = createProducerInfo(sessionInfo2);
1:         producerInfo2.setDestination(queue);
1:         
1:         connection2.send(connectionInfo2);
1:         connection2.send(sessionInfo2);
1:         connection2.send(producerInfo2);
1:         
1:         // Create the advisory consumer.. it should see the previous producer        
1:         ConsumerInfo consumerInfo1 = createConsumerInfo(sessionInfo1, destination);
1:         consumerInfo1.setPrefetchSize(100);
1:         connection1.send(consumerInfo1);
1: 
1:         Message m1 = receiveMessage(connection1);
1:         assertNotNull(m1);
1:         assertNotNull(m1.getDataStructure());
1:         assertEquals(((ProducerInfo)m1.getDataStructure()).getProducerId(), producerInfo2.getProducerId());
1: 
1:         // Close the second connection.
1:         connection2.send(closeConnectionInfo(connectionInfo2));
1:         connection2.stop();
1: 
1:         // We should get an advisory of the producer closing
1:         m1 = receiveMessage(connection1);
1:         assertNotNull(m1);
1:         assertNotNull(m1.getDataStructure());
1:         RemoveInfo r = (RemoveInfo) m1.getDataStructure();
1:         assertEquals(r.getObjectId(), producerInfo2.getProducerId());
1:         
1:         assertNoMessagesLeft(connection2);
1:     }
1: 
0:     public void testProducerAdvisoriesReplayedOnlyTargetNewConsumer() throws Throwable {
1: 
1:         ActiveMQDestination queue = new ActiveMQQueue("test");
1:         ActiveMQDestination destination = AdvisorySupport.getProducerAdvisoryTopic(queue);
1:         
1:         // Setup a first connection
1:         StubConnection connection1 = createConnection();
1:         ConnectionInfo connectionInfo1 = createConnectionInfo();
1:         SessionInfo sessionInfo1 = createSessionInfo(connectionInfo1);
1:         connection1.send(connectionInfo1);
1:         connection1.send(sessionInfo1);
1:         // Create the first consumer..         
1:         ConsumerInfo consumerInfo1 = createConsumerInfo(sessionInfo1, destination);
1:         consumerInfo1.setPrefetchSize(100);
1:         connection1.send(consumerInfo1);
1: 
1:         // Setup a producer.
1:         StubConnection connection2 = createConnection();
1:         ConnectionInfo connectionInfo2 = createConnectionInfo();
1:         SessionInfo sessionInfo2 = createSessionInfo(connectionInfo2);
1:         ProducerInfo producerInfo2 = createProducerInfo(sessionInfo2);
1:         producerInfo2.setDestination(queue);        
1:         connection2.send(connectionInfo2);
1:         connection2.send(sessionInfo2);
1:         connection2.send(producerInfo2);
1:         
1:         Message m1 = receiveMessage(connection1);
1:         assertNotNull(m1);
1:         assertNotNull(m1.getDataStructure());
1:         assertEquals(((ProducerInfo)m1.getDataStructure()).getProducerId(), producerInfo2.getProducerId());
1:         
1:         // Create the 2nd consumer..         
1:         ConsumerInfo consumerInfo2 = createConsumerInfo(sessionInfo2, destination);
1:         consumerInfo2.setPrefetchSize(100);
1:         connection2.send(consumerInfo2);
1: 
1:         // The second consumer should se a replay
1:         m1 = receiveMessage(connection2);
1:         assertNotNull(m1);
1:         assertNotNull(m1.getDataStructure());
1:         assertEquals(((ProducerInfo)m1.getDataStructure()).getProducerId(), producerInfo2.getProducerId());
1: 
1:         // But the first consumer should not see the replay.
1:         assertNoMessagesLeft(connection1);
1:     }
1: 
1:     public static Test suite() {
1:         return suite(AdvisoryBrokerTest.class);
1:     }
1:     
1:     public static void main(String[] args) {
1:         junit.textui.TestRunner.run(suite());
1:     }
1: 
1: }
author:Bosanac Dejan
-------------------------------------------------------------------------------
commit:17851fa
/////////////////////////////////////////////////////////////////////////
0: import javax.management.remote.JMXConnector;
0: import javax.management.remote.JMXConnectorFactory;
0: import javax.management.remote.JMXServiceURL;
0: 
author:Robert Davies
-------------------------------------------------------------------------------
commit:1d846a9
/////////////////////////////////////////////////////////////////////////
1:         connection2.request(closeConnectionInfo(connectionInfo2));
commit:12fa4de
/////////////////////////////////////////////////////////////////////////
1:         connection2.request(closeConnectionInfo(connectionInfo2));
/////////////////////////////////////////////////////////////////////////
1:         connection2.request(closeConnectionInfo(connectionInfo2));
/////////////////////////////////////////////////////////////////////////
1:         connection2.request(closeConnectionInfo(connectionInfo2));
============================================================================