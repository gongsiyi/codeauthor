1:960dce7: /**
1:960dce7:  * Licensed to the Apache Software Foundation (ASF) under one or more
1:960dce7:  * contributor license agreements.  See the NOTICE file distributed with
1:960dce7:  * this work for additional information regarding copyright ownership.
1:960dce7:  * The ASF licenses this file to You under the Apache License, Version 2.0
1:960dce7:  * (the "License"); you may not use this file except in compliance with
1:960dce7:  * the License.  You may obtain a copy of the License at
1:540dd5c:  *
1:540dd5c:  *      http://www.apache.org/licenses/LICENSE-2.0
1:540dd5c:  *
1:960dce7:  * Unless required by applicable law or agreed to in writing, software
1:960dce7:  * distributed under the License is distributed on an "AS IS" BASIS,
1:960dce7:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:960dce7:  * See the License for the specific language governing permissions and
1:960dce7:  * limitations under the License.
1:960dce7:  */
1:a88906f: package org.apache.activemq.tool.sampler;
2:a88906f: 
1:a88906f: import java.util.Iterator;
1:a88906f: import java.util.List;
1:e47e0e0: import java.util.concurrent.CopyOnWriteArrayList;
1:a88906f: 
1:540dd5c: import org.apache.activemq.tool.reports.AbstractPerfReportWriter;
1:540dd5c: 
1:a88906f: public class ThroughputSamplerTask extends AbstractPerformanceSampler {
1:a88906f: 
1:e47e0e0:     private final List<MeasurableClient> clients = new CopyOnWriteArrayList<>();
1:a88906f: 
1:a88906f:     public void registerClient(MeasurableClient client) {
1:e47e0e0:         clients.add(client);
3:a88906f:     }
1:a88906f: 
1:e47e0e0:     @Override
1:540dd5c:     public void sampleData() {
1:540dd5c:         for (Iterator<MeasurableClient> i = clients.iterator(); i.hasNext();) {
1:540dd5c:             MeasurableClient client = i.next();
1:a88906f:             if (perfReportWriter != null) {
1:540dd5c:                 perfReportWriter.writeCsvData(AbstractPerfReportWriter.REPORT_PLUGIN_THROUGHPUT, "index=" + sampleIndex + ",clientName=" + client.getClientName() + ",throughput="
1:540dd5c:                                                                                                  + client.getThroughput());
1:a88906f:             }
1:a88906f:             client.reset();
1:540dd5c:         }
1:a88906f:     }
1:a88906f: 
1:e47e0e0:     @Override
1:a88906f:     protected void onSamplerStart() {
1:a88906f:         // Reset the throughput of the clients
1:540dd5c:         for (Iterator<MeasurableClient> i = clients.iterator(); i.hasNext();) {
1:540dd5c:             MeasurableClient client = i.next();
1:a88906f:             client.reset();
1:a88906f:         }
1:a88906f:     }
1:a88906f: }
============================================================================
author:Timothy Bish
-------------------------------------------------------------------------------
commit:e47e0e0
/////////////////////////////////////////////////////////////////////////
1: import java.util.concurrent.CopyOnWriteArrayList;
1:     private final List<MeasurableClient> clients = new CopyOnWriteArrayList<>();
1:         clients.add(client);
1:     @Override
/////////////////////////////////////////////////////////////////////////
1:     @Override
author:Timothy A. Bish
-------------------------------------------------------------------------------
commit:87e878b
author:Hiram R. Chirino
-------------------------------------------------------------------------------
commit:540dd5c
/////////////////////////////////////////////////////////////////////////
1:  *
1:  *      http://www.apache.org/licenses/LICENSE-2.0
1:  *
/////////////////////////////////////////////////////////////////////////
1: import org.apache.activemq.tool.reports.AbstractPerfReportWriter;
1: 
0:     private List<MeasurableClient> clients = new ArrayList<MeasurableClient>();
/////////////////////////////////////////////////////////////////////////
1:     public void sampleData() {
1:         for (Iterator<MeasurableClient> i = clients.iterator(); i.hasNext();) {
1:             MeasurableClient client = i.next();
1:                 perfReportWriter.writeCsvData(AbstractPerfReportWriter.REPORT_PLUGIN_THROUGHPUT, "index=" + sampleIndex + ",clientName=" + client.getClientName() + ",throughput="
1:                                                                                                  + client.getThroughput());
1:     }
1:         for (Iterator<MeasurableClient> i = clients.iterator(); i.hasNext();) {
1:             MeasurableClient client = i.next();
commit:960dce7
/////////////////////////////////////////////////////////////////////////
1: /**
1:  * Licensed to the Apache Software Foundation (ASF) under one or more
1:  * contributor license agreements.  See the NOTICE file distributed with
1:  * this work for additional information regarding copyright ownership.
1:  * The ASF licenses this file to You under the Apache License, Version 2.0
1:  * (the "License"); you may not use this file except in compliance with
1:  * the License.  You may obtain a copy of the License at
0:  * 
0:  * http://www.apache.org/licenses/LICENSE-2.0
0:  * 
1:  * Unless required by applicable law or agreed to in writing, software
1:  * distributed under the License is distributed on an "AS IS" BASIS,
1:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:  * See the License for the specific language governing permissions and
1:  * limitations under the License.
1:  */
commit:a88906f
/////////////////////////////////////////////////////////////////////////
1: package org.apache.activemq.tool.sampler;
1: 
0: import org.apache.activemq.tool.reports.plugins.ReportPlugin;
1: 
0: import java.util.ArrayList;
1: import java.util.Iterator;
1: import java.util.List;
1: 
1: public class ThroughputSamplerTask extends AbstractPerformanceSampler {
1: 
0:     private final Object mutex = new Object();
0:     private List clients = new ArrayList();
1: 
1:     public void registerClient(MeasurableClient client) {
0:         synchronized (mutex) {
0:             clients.add(client);
1:         }
1:     }
1: 
0: 	public void sampleData() {
0: 		for (Iterator i = clients.iterator(); i.hasNext();) {
0:             MeasurableClient client = (MeasurableClient) i.next();
1:             if (perfReportWriter != null) {
0:             	perfReportWriter.writeCsvData(ReportPlugin.REPORT_PLUGIN_THROUGHPUT,
0:                         "index=" + sampleIndex + ",clientName=" + client.getClientName() +
0:                         ",throughput=" + client.getThroughput());
1:             }
1:             client.reset();
1:         }
1: 	}
1: 
1:     protected void onSamplerStart() {
1:         // Reset the throughput of the clients
0:         for (Iterator i = clients.iterator(); i.hasNext();) {
0:             MeasurableClient client = (MeasurableClient) i.next();
1:             client.reset();
1:         }
1:     }
1: }
author:James Strachan
-------------------------------------------------------------------------------
commit:dd55c21
author:Adrian T. Co
-------------------------------------------------------------------------------
commit:7450969
/////////////////////////////////////////////////////////////////////////
commit:fddc01d
/////////////////////////////////////////////////////////////////////////
0: import org.apache.activemq.tool.reports.AbstractPerfReportWriter;
/////////////////////////////////////////////////////////////////////////
0:             	perfReportWriter.writeCsvData(AbstractPerfReportWriter.REPORT_PLUGIN_THROUGHPUT,
commit:cc1986f
/////////////////////////////////////////////////////////////////////////
0:     public void registerClient(MeasurableClient client) {
0:         synchronized (mutex) {
0:             clients.add(client);
0:         }
0:     }
0: 
/////////////////////////////////////////////////////////////////////////
commit:80bf241
/////////////////////////////////////////////////////////////////////////
0: package org.apache.activemq.tool.sampler;
0: 
0: import org.apache.activemq.tool.reports.plugins.ReportPlugin;
0: 
0: import java.util.ArrayList;
0: import java.util.Iterator;
0: import java.util.List;
0: 
0: public class ThroughputSamplerTask extends AbstractPerformanceSampler {
0: 
0:     private final Object mutex = new Object();
0:     private List clients = new ArrayList();
0: 
0: 	public void sampleData() {
0: 		for (Iterator i = clients.iterator(); i.hasNext();) {
0:             MeasurableClient client = (MeasurableClient) i.next();
0:             if (perfReportWriter != null) {
0:             	perfReportWriter.writeCsvData(ReportPlugin.REPORT_PLUGIN_THROUGHPUT,
0:                         "index=" + sampleIndex + ",clientName=" + client.getClientName() +
0:                         ",throughput=" + client.getThroughput());
0:             }
0:             client.reset();
0:         }
0: 	}
0: 
0: 	public void registerClient(MeasurableClient client) {
0:         synchronized (mutex) {
0:             clients.add(client);
0:         }
0:     }
0: 
0:     protected void onSamplerStart() {
0:         // Reset the throughput of the clients
0:         for (Iterator i = clients.iterator(); i.hasNext();) {
0:             MeasurableClient client = (MeasurableClient) i.next();
0:             client.reset();
0:         }
0:     }
0: }
============================================================================