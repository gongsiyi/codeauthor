1:cfe5e98: /**
1:cfe5e98:  * Licensed to the Apache Software Foundation (ASF) under one or more
1:cfe5e98:  * contributor license agreements.  See the NOTICE file distributed with
1:cfe5e98:  * this work for additional information regarding copyright ownership.
1:cfe5e98:  * The ASF licenses this file to You under the Apache License, Version 2.0
1:cfe5e98:  * (the "License"); you may not use this file except in compliance with
1:cfe5e98:  * the License.  You may obtain a copy of the License at
1:cfe5e98:  *
1:cfe5e98:  *      http://www.apache.org/licenses/LICENSE-2.0
1:cfe5e98:  *
1:cfe5e98:  * Unless required by applicable law or agreed to in writing, software
1:cfe5e98:  * distributed under the License is distributed on an "AS IS" BASIS,
1:cfe5e98:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:cfe5e98:  * See the License for the specific language governing permissions and
1:cfe5e98:  * limitations under the License.
1:cfe5e98:  */
1:cfe5e98: package org.apache.activemq.console.command.store;
5:cfe5e98: 
1:cfe5e98: import java.io.BufferedOutputStream;
1:cfe5e98: import java.io.File;
1:cfe5e98: import java.io.FileOutputStream;
1:cfe5e98: import java.io.IOException;
1:cfe5e98: import java.net.URI;
1:cfe5e98: import java.net.URISyntaxException;
1:cfe5e98: import java.util.HashMap;
1:cfe5e98: 
1:38ab4b1: import org.apache.activemq.broker.BrokerFactory;
1:38ab4b1: import org.apache.activemq.broker.BrokerService;
1:38ab4b1: import org.apache.activemq.command.ActiveMQDestination;
1:38ab4b1: import org.apache.activemq.command.ActiveMQQueue;
1:38ab4b1: import org.apache.activemq.command.ActiveMQTopic;
1:38ab4b1: import org.apache.activemq.command.Message;
1:38ab4b1: import org.apache.activemq.command.MessageAck;
1:38ab4b1: import org.apache.activemq.command.MessageId;
1:38ab4b1: import org.apache.activemq.command.SubscriptionInfo;
1:38ab4b1: import org.apache.activemq.command.XATransactionId;
1:38ab4b1: import org.apache.activemq.console.command.store.proto.MessagePB;
1:38ab4b1: import org.apache.activemq.console.command.store.proto.QueueEntryPB;
1:38ab4b1: import org.apache.activemq.console.command.store.proto.QueuePB;
1:38ab4b1: import org.apache.activemq.openwire.OpenWireFormat;
1:38ab4b1: import org.apache.activemq.store.MessageRecoveryListener;
1:38ab4b1: import org.apache.activemq.store.MessageStore;
1:38ab4b1: import org.apache.activemq.store.PersistenceAdapter;
1:38ab4b1: import org.apache.activemq.store.TopicMessageStore;
1:38ab4b1: import org.apache.activemq.store.TransactionRecoveryListener;
1:38ab4b1: import org.fusesource.hawtbuf.AsciiBuffer;
1:38ab4b1: import org.fusesource.hawtbuf.DataByteArrayOutputStream;
1:38ab4b1: import org.fusesource.hawtbuf.UTF8Buffer;
1:38ab4b1: 
1:833d308: import com.fasterxml.jackson.databind.ObjectMapper;
1:833d308: 
1:cfe5e98: /**
1:cfe5e98:  * @author <a href="http://hiramchirino.com">Hiram Chirino</a>
1:cfe5e98:  */
1:cfe5e98: public class StoreExporter {
1:cfe5e98: 
1:dee9e93:     static final int OPENWIRE_VERSION = 8;
1:dee9e93:     static final boolean TIGHT_ENCODING = false;
1:dee9e93: 
1:cfe5e98:     URI config;
1:cfe5e98:     File file;
1:cfe5e98: 
1:38ab4b1:     private final ObjectMapper mapper = new ObjectMapper();
1:dee9e93:     private final AsciiBuffer ds_kind = new AsciiBuffer("ds");
1:dee9e93:     private final AsciiBuffer ptp_kind = new AsciiBuffer("ptp");
1:dee9e93:     private final AsciiBuffer codec_id = new AsciiBuffer("openwire");
1:dee9e93:     private final OpenWireFormat wireformat = new OpenWireFormat();
1:dee9e93: 
1:cfe5e98:     public StoreExporter() throws URISyntaxException {
1:cfe5e98:         config = new URI("xbean:activemq.xml");
1:dee9e93:         wireformat.setCacheEnabled(false);
1:dee9e93:         wireformat.setTightEncodingEnabled(TIGHT_ENCODING);
1:dee9e93:         wireformat.setVersion(OPENWIRE_VERSION);
5:cfe5e98:     }
1:cfe5e98: 
1:cfe5e98:     public void execute() throws Exception {
1:cfe5e98:         if (config == null) {
1:cfe5e98:             throw new Exception("required --config option missing");
1:cfe5e98:         }
1:cfe5e98:         if (file == null) {
1:cfe5e98:             throw new Exception("required --file option missing");
1:cfe5e98:         }
1:cfe5e98:         System.out.println("Loading: " + config);
1:60646c9:         BrokerFactory.setStartDefault(false); // to avoid the broker auto-starting..
1:cfe5e98:         BrokerService broker = BrokerFactory.createBroker(config);
1:60646c9:         BrokerFactory.resetStartDefault();
1:cfe5e98:         PersistenceAdapter store = broker.getPersistenceAdapter();
1:cfe5e98:         System.out.println("Starting: " + store);
1:cfe5e98:         store.start();
1:cfe5e98:         try {
1:cfe5e98:             BufferedOutputStream fos = new BufferedOutputStream(new FileOutputStream(file));
1:cfe5e98:             try {
1:cfe5e98:                 export(store, fos);
1:cfe5e98:             } finally {
1:cfe5e98:                 fos.close();
1:cfe5e98:             }
1:cfe5e98:         } finally {
1:cfe5e98:             store.stop();
1:cfe5e98:         }
1:cfe5e98:     }
1:cfe5e98: 
1:cfe5e98:     void export(PersistenceAdapter store, BufferedOutputStream fos) throws Exception {
1:cfe5e98: 
1:cfe5e98: 
1:cfe5e98:         final long[] messageKeyCounter = new long[]{0};
1:cfe5e98:         final long[] containerKeyCounter = new long[]{0};
1:cfe5e98:         final ExportStreamManager manager = new ExportStreamManager(fos, 1);
1:cfe5e98: 
1:cfe5e98: 
1:cfe5e98:         final int[] preparedTxs = new int[]{0};
1:cfe5e98:         store.createTransactionStore().recover(new TransactionRecoveryListener() {
1:38ab4b1:             @Override
1:cfe5e98:             public void recover(XATransactionId xid, Message[] addedMessages, MessageAck[] aks) {
1:cfe5e98:                 preparedTxs[0] += 1;
1:cfe5e98:             }
1:cfe5e98:         });
1:cfe5e98: 
1:cfe5e98:         if (preparedTxs[0] > 0) {
1:cfe5e98:             throw new Exception("Cannot export a store with prepared XA transactions.  Please commit or rollback those transactions before attempting to export.");
1:cfe5e98:         }
1:cfe5e98: 
1:cfe5e98:         for (ActiveMQDestination odest : store.getDestinations()) {
1:cfe5e98:             containerKeyCounter[0]++;
1:cfe5e98:             if (odest instanceof ActiveMQQueue) {
1:cfe5e98:                 ActiveMQQueue dest = (ActiveMQQueue) odest;
1:cfe5e98:                 MessageStore queue = store.createQueueMessageStore(dest);
1:cfe5e98: 
1:cfe5e98:                 QueuePB.Bean destRecord = new QueuePB.Bean();
1:cfe5e98:                 destRecord.setKey(containerKeyCounter[0]);
1:cfe5e98:                 destRecord.setBindingKind(ptp_kind);
1:cfe5e98: 
1:cfe5e98:                 final long[] seqKeyCounter = new long[]{0};
1:cfe5e98: 
1:cfe5e98:                 HashMap<String, Object> jsonMap = new HashMap<String, Object>();
1:cfe5e98:                 jsonMap.put("@class", "queue_destination");
1:cfe5e98:                 jsonMap.put("name", dest.getQueueName());
1:cfe5e98:                 String json = mapper.writeValueAsString(jsonMap);
1:cfe5e98:                 System.out.println(json);
1:cfe5e98:                 destRecord.setBindingData(new UTF8Buffer(json));
1:cfe5e98:                 manager.store_queue(destRecord);
1:cfe5e98: 
1:cfe5e98:                 queue.recover(new MessageRecoveryListener() {
1:38ab4b1:                     @Override
1:cfe5e98:                     public boolean hasSpace() {
1:cfe5e98:                         return true;
1:cfe5e98:                     }
1:cfe5e98: 
1:38ab4b1:                     @Override
1:cfe5e98:                     public boolean recoverMessageReference(MessageId ref) throws Exception {
1:cfe5e98:                         return true;
1:cfe5e98:                     }
1:cfe5e98: 
1:38ab4b1:                     @Override
1:cfe5e98:                     public boolean isDuplicate(MessageId ref) {
1:cfe5e98:                         return false;
1:cfe5e98:                     }
1:cfe5e98: 
1:38ab4b1:                     @Override
1:cfe5e98:                     public boolean recoverMessage(Message message) throws IOException {
1:cfe5e98:                         messageKeyCounter[0]++;
1:cfe5e98:                         seqKeyCounter[0]++;
1:cfe5e98: 
1:dee9e93:                         MessagePB.Bean messageRecord = createMessagePB(message, messageKeyCounter[0]);
1:cfe5e98:                         manager.store_message(messageRecord);
1:cfe5e98: 
1:dee9e93:                         QueueEntryPB.Bean entryRecord = createQueueEntryPB(message, containerKeyCounter[0], seqKeyCounter[0], messageKeyCounter[0]);
1:cfe5e98:                         manager.store_queue_entry(entryRecord);
1:dee9e93: 
1:cfe5e98:                         return true;
1:cfe5e98:                     }
1:cfe5e98:                 });
1:cfe5e98: 
1:cfe5e98:             } else if (odest instanceof ActiveMQTopic) {
1:cfe5e98:                 ActiveMQTopic dest = (ActiveMQTopic) odest;
1:cfe5e98: 
1:cfe5e98:                 TopicMessageStore topic = store.createTopicMessageStore(dest);
1:cfe5e98:                 for (SubscriptionInfo sub : topic.getAllSubscriptions()) {
1:cfe5e98: 
1:cfe5e98:                     QueuePB.Bean destRecord = new QueuePB.Bean();
1:cfe5e98:                     destRecord.setKey(containerKeyCounter[0]);
1:cfe5e98:                     destRecord.setBindingKind(ds_kind);
1:cfe5e98: 
1:cfe5e98:                     // TODO: use a real JSON encoder like jackson.
1:cfe5e98:                     HashMap<String, Object> jsonMap = new HashMap<String, Object>();
1:cfe5e98:                     jsonMap.put("@class", "dsub_destination");
1:38ab4b1:                     jsonMap.put("name", sub.getClientId() + ":" + sub.getSubscriptionName());
1:cfe5e98:                     HashMap<String, Object> jsonTopic = new HashMap<String, Object>();
1:cfe5e98:                     jsonTopic.put("name", dest.getTopicName());
1:cfe5e98:                     jsonMap.put("topics", new Object[]{jsonTopic});
1:cfe5e98:                     if (sub.getSelector() != null) {
1:cfe5e98:                         jsonMap.put("selector", sub.getSelector());
1:cfe5e98:                     }
1:833d308:                     jsonMap.put("noLocal", sub.isNoLocal());
1:cfe5e98:                     String json = mapper.writeValueAsString(jsonMap);
1:cfe5e98:                     System.out.println(json);
1:cfe5e98: 
1:cfe5e98:                     destRecord.setBindingData(new UTF8Buffer(json));
1:cfe5e98:                     manager.store_queue(destRecord);
1:cfe5e98: 
1:cfe5e98:                     final long seqKeyCounter[] = new long[]{0};
1:38ab4b1:                     topic.recoverSubscription(sub.getClientId(), sub.getSubscriptionName(), new MessageRecoveryListener() {
1:38ab4b1:                         @Override
1:cfe5e98:                         public boolean hasSpace() {
1:cfe5e98:                             return true;
1:cfe5e98:                         }
1:cfe5e98: 
1:38ab4b1:                         @Override
1:cfe5e98:                         public boolean recoverMessageReference(MessageId ref) throws Exception {
1:cfe5e98:                             return true;
1:cfe5e98:                         }
1:cfe5e98: 
1:38ab4b1:                         @Override
1:cfe5e98:                         public boolean isDuplicate(MessageId ref) {
1:cfe5e98:                             return false;
1:cfe5e98:                         }
1:cfe5e98: 
1:38ab4b1:                         @Override
1:cfe5e98:                         public boolean recoverMessage(Message message) throws IOException {
1:cfe5e98:                             messageKeyCounter[0]++;
1:cfe5e98:                             seqKeyCounter[0]++;
1:cfe5e98: 
1:dee9e93:                             MessagePB.Bean messageRecord = createMessagePB(message, messageKeyCounter[0]);
1:cfe5e98:                             manager.store_message(messageRecord);
1:cfe5e98: 
1:dee9e93:                             QueueEntryPB.Bean entryRecord = createQueueEntryPB(message, containerKeyCounter[0], seqKeyCounter[0], messageKeyCounter[0]);
1:cfe5e98:                             manager.store_queue_entry(entryRecord);
1:cfe5e98:                             return true;
1:cfe5e98:                         }
1:cfe5e98:                     });
1:cfe5e98: 
1:cfe5e98:                 }
1:cfe5e98:             }
1:cfe5e98:         }
1:cfe5e98:         manager.finish();
1:cfe5e98:     }
1:cfe5e98: 
1:dee9e93:     private QueueEntryPB.Bean createQueueEntryPB(Message message, long queueKey, long queueSeq, long messageKey) {
1:dee9e93:         QueueEntryPB.Bean entryRecord = new QueueEntryPB.Bean();
1:dee9e93:         entryRecord.setQueueKey(queueKey);
1:dee9e93:         entryRecord.setQueueSeq(queueSeq);
1:dee9e93:         entryRecord.setMessageKey(messageKey);
1:dee9e93:         entryRecord.setSize(message.getSize());
1:dee9e93:         if (message.getExpiration() != 0) {
1:dee9e93:             entryRecord.setExpiration(message.getExpiration());
1:dee9e93:         }
1:dee9e93:         if (message.getRedeliveryCounter() != 0) {
1:dee9e93:             entryRecord.setRedeliveries(message.getRedeliveryCounter());
1:dee9e93:         }
1:dee9e93:         return entryRecord;
1:dee9e93:     }
1:dee9e93: 
1:dee9e93:     private MessagePB.Bean createMessagePB(Message message, long messageKey) throws IOException {
1:dee9e93:         DataByteArrayOutputStream mos = new DataByteArrayOutputStream();
1:dee9e93:         mos.writeBoolean(TIGHT_ENCODING);
1:dee9e93:         mos.writeVarInt(OPENWIRE_VERSION);
1:dee9e93:         wireformat.marshal(message, mos);
1:dee9e93: 
1:dee9e93:         MessagePB.Bean messageRecord = new MessagePB.Bean();
1:dee9e93:         messageRecord.setCodec(codec_id);
1:dee9e93:         messageRecord.setMessageKey(messageKey);
1:dee9e93:         messageRecord.setSize(message.getSize());
1:dee9e93:         messageRecord.setValue(mos.toBuffer());
1:dee9e93:         return messageRecord;
1:dee9e93:     }
1:dee9e93: 
1:cfe5e98:     public File getFile() {
1:cfe5e98:         return file;
1:cfe5e98:     }
1:cfe5e98: 
1:cfe5e98:     public void setFile(String file) {
1:cfe5e98:         setFile(new File(file));
1:cfe5e98:     }
1:cfe5e98: 
1:cfe5e98:     public void setFile(File file) {
1:cfe5e98:         this.file = file;
1:cfe5e98:     }
1:cfe5e98: 
1:cfe5e98:     public URI getConfig() {
1:cfe5e98:         return config;
1:cfe5e98:     }
1:cfe5e98: 
1:cfe5e98:     public void setConfig(URI config) {
1:cfe5e98:         this.config = config;
1:cfe5e98:     }
1:cfe5e98: }
============================================================================
author:Timothy Bish
-------------------------------------------------------------------------------
commit:833d308
/////////////////////////////////////////////////////////////////////////
1: import com.fasterxml.jackson.databind.ObjectMapper;
1: 
/////////////////////////////////////////////////////////////////////////
1:                     jsonMap.put("noLocal", sub.isNoLocal());
commit:38ab4b1
/////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////
1: import org.apache.activemq.broker.BrokerFactory;
1: import org.apache.activemq.broker.BrokerService;
1: import org.apache.activemq.command.ActiveMQDestination;
1: import org.apache.activemq.command.ActiveMQQueue;
1: import org.apache.activemq.command.ActiveMQTopic;
1: import org.apache.activemq.command.Message;
1: import org.apache.activemq.command.MessageAck;
1: import org.apache.activemq.command.MessageId;
1: import org.apache.activemq.command.SubscriptionInfo;
1: import org.apache.activemq.command.XATransactionId;
1: import org.apache.activemq.console.command.store.proto.MessagePB;
1: import org.apache.activemq.console.command.store.proto.QueueEntryPB;
1: import org.apache.activemq.console.command.store.proto.QueuePB;
1: import org.apache.activemq.openwire.OpenWireFormat;
1: import org.apache.activemq.store.MessageRecoveryListener;
1: import org.apache.activemq.store.MessageStore;
1: import org.apache.activemq.store.PersistenceAdapter;
1: import org.apache.activemq.store.TopicMessageStore;
1: import org.apache.activemq.store.TransactionRecoveryListener;
0: import org.codehaus.jackson.map.ObjectMapper;
1: import org.fusesource.hawtbuf.AsciiBuffer;
1: import org.fusesource.hawtbuf.DataByteArrayOutputStream;
1: import org.fusesource.hawtbuf.UTF8Buffer;
1: 
/////////////////////////////////////////////////////////////////////////
1:     private final ObjectMapper mapper = new ObjectMapper();
/////////////////////////////////////////////////////////////////////////
1:             @Override
/////////////////////////////////////////////////////////////////////////
1:                     @Override
1:                     @Override
1:                     @Override
1:                     @Override
/////////////////////////////////////////////////////////////////////////
1:                     jsonMap.put("name", sub.getClientId() + ":" + sub.getSubscriptionName());
/////////////////////////////////////////////////////////////////////////
1:                     topic.recoverSubscription(sub.getClientId(), sub.getSubscriptionName(), new MessageRecoveryListener() {
1:                         @Override
1:                         @Override
1:                         @Override
1:                         @Override
author:Dejan Bosanac
-------------------------------------------------------------------------------
commit:4da588d
/////////////////////////////////////////////////////////////////////////
0: import com.fasterxml.jackson.databind.ObjectMapper;
author:Hiram R. Chirino
-------------------------------------------------------------------------------
commit:60646c9
/////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////
1:         BrokerFactory.setStartDefault(false); // to avoid the broker auto-starting..
1:         BrokerFactory.resetStartDefault();
commit:dee9e93
/////////////////////////////////////////////////////////////////////////
1:     static final int OPENWIRE_VERSION = 8;
1:     static final boolean TIGHT_ENCODING = false;
1: 
0:     private ObjectMapper mapper = new ObjectMapper();
1:     private final AsciiBuffer ds_kind = new AsciiBuffer("ds");
1:     private final AsciiBuffer ptp_kind = new AsciiBuffer("ptp");
1:     private final AsciiBuffer codec_id = new AsciiBuffer("openwire");
1:     private final OpenWireFormat wireformat = new OpenWireFormat();
1: 
1:         wireformat.setCacheEnabled(false);
1:         wireformat.setTightEncodingEnabled(TIGHT_ENCODING);
1:         wireformat.setVersion(OPENWIRE_VERSION);
/////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////
1:                         MessagePB.Bean messageRecord = createMessagePB(message, messageKeyCounter[0]);
1:                         QueueEntryPB.Bean entryRecord = createQueueEntryPB(message, containerKeyCounter[0], seqKeyCounter[0], messageKeyCounter[0]);
1: 
/////////////////////////////////////////////////////////////////////////
1:                             MessagePB.Bean messageRecord = createMessagePB(message, messageKeyCounter[0]);
1:                             QueueEntryPB.Bean entryRecord = createQueueEntryPB(message, containerKeyCounter[0], seqKeyCounter[0], messageKeyCounter[0]);
/////////////////////////////////////////////////////////////////////////
1:     private QueueEntryPB.Bean createQueueEntryPB(Message message, long queueKey, long queueSeq, long messageKey) {
1:         QueueEntryPB.Bean entryRecord = new QueueEntryPB.Bean();
1:         entryRecord.setQueueKey(queueKey);
1:         entryRecord.setQueueSeq(queueSeq);
1:         entryRecord.setMessageKey(messageKey);
1:         entryRecord.setSize(message.getSize());
1:         if (message.getExpiration() != 0) {
1:             entryRecord.setExpiration(message.getExpiration());
1:         }
1:         if (message.getRedeliveryCounter() != 0) {
1:             entryRecord.setRedeliveries(message.getRedeliveryCounter());
1:         }
1:         return entryRecord;
1:     }
1: 
1:     private MessagePB.Bean createMessagePB(Message message, long messageKey) throws IOException {
1:         DataByteArrayOutputStream mos = new DataByteArrayOutputStream();
1:         mos.writeBoolean(TIGHT_ENCODING);
1:         mos.writeVarInt(OPENWIRE_VERSION);
1:         wireformat.marshal(message, mos);
1: 
1:         MessagePB.Bean messageRecord = new MessagePB.Bean();
1:         messageRecord.setCodec(codec_id);
1:         messageRecord.setMessageKey(messageKey);
1:         messageRecord.setSize(message.getSize());
1:         messageRecord.setValue(mos.toBuffer());
1:         return messageRecord;
1:     }
1: 
commit:cfe5e98
/////////////////////////////////////////////////////////////////////////
1: /**
1:  * Licensed to the Apache Software Foundation (ASF) under one or more
1:  * contributor license agreements.  See the NOTICE file distributed with
1:  * this work for additional information regarding copyright ownership.
1:  * The ASF licenses this file to You under the Apache License, Version 2.0
1:  * (the "License"); you may not use this file except in compliance with
1:  * the License.  You may obtain a copy of the License at
1:  *
1:  *      http://www.apache.org/licenses/LICENSE-2.0
1:  *
1:  * Unless required by applicable law or agreed to in writing, software
1:  * distributed under the License is distributed on an "AS IS" BASIS,
1:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:  * See the License for the specific language governing permissions and
1:  * limitations under the License.
1:  */
1: package org.apache.activemq.console.command.store;
1: 
0: import org.apache.activemq.broker.BrokerFactory;
0: import org.apache.activemq.broker.BrokerService;
0: import org.apache.activemq.command.*;
0: import org.apache.activemq.console.command.store.proto.MessagePB;
0: import org.apache.activemq.console.command.store.proto.QueueEntryPB;
0: import org.apache.activemq.console.command.store.proto.QueuePB;
0: import org.apache.activemq.openwire.OpenWireFormat;
0: import org.apache.activemq.store.*;
0: import org.apache.activemq.xbean.XBeanBrokerFactory;
0: import org.codehaus.jackson.map.ObjectMapper;
0: import org.fusesource.hawtbuf.AsciiBuffer;
0: import org.fusesource.hawtbuf.DataByteArrayOutputStream;
0: import org.fusesource.hawtbuf.UTF8Buffer;
1: 
1: import java.io.BufferedOutputStream;
1: import java.io.File;
1: import java.io.FileOutputStream;
1: import java.io.IOException;
1: import java.net.URI;
1: import java.net.URISyntaxException;
1: import java.util.HashMap;
1: 
1: /**
1:  * @author <a href="http://hiramchirino.com">Hiram Chirino</a>
1:  */
1: public class StoreExporter {
1: 
1:     URI config;
1:     File file;
1: 
1:     public StoreExporter() throws URISyntaxException {
1:         config = new URI("xbean:activemq.xml");
1:     }
1: 
1:     public void execute() throws Exception {
1:         if (config == null) {
1:             throw new Exception("required --config option missing");
1:         }
1:         if (file == null) {
1:             throw new Exception("required --file option missing");
1:         }
1:         System.out.println("Loading: " + config);
0:         XBeanBrokerFactory.setStartDefault(false); // to avoid the broker auto-starting..
1:         BrokerService broker = BrokerFactory.createBroker(config);
0:         XBeanBrokerFactory.resetStartDefault();
1:         PersistenceAdapter store = broker.getPersistenceAdapter();
1:         System.out.println("Starting: " + store);
1:         store.start();
1:         try {
1:             BufferedOutputStream fos = new BufferedOutputStream(new FileOutputStream(file));
1:             try {
1:                 export(store, fos);
1:             } finally {
1:                 fos.close();
1:             }
1:         } finally {
1:             store.stop();
1:         }
1:     }
1: 
0:     static final int OPENWIRE_VERSION = 8;
0:     static final boolean TIGHT_ENCODING = false;
1: 
1:     void export(PersistenceAdapter store, BufferedOutputStream fos) throws Exception {
1: 
0:         ObjectMapper mapper = new ObjectMapper();
0:         final AsciiBuffer ds_kind = new AsciiBuffer("ds");
0:         final AsciiBuffer ptp_kind = new AsciiBuffer("ptp");
0:         final AsciiBuffer codec_id = new AsciiBuffer("openwire");
0:         final OpenWireFormat wireformat = new OpenWireFormat();
0:         wireformat.setCacheEnabled(false);
0:         wireformat.setTightEncodingEnabled(TIGHT_ENCODING);
0:         wireformat.setVersion(OPENWIRE_VERSION);
1: 
1:         final long[] messageKeyCounter = new long[]{0};
1:         final long[] containerKeyCounter = new long[]{0};
1:         final ExportStreamManager manager = new ExportStreamManager(fos, 1);
1: 
1: 
1:         final int[] preparedTxs = new int[]{0};
1:         store.createTransactionStore().recover(new TransactionRecoveryListener() {
1:             public void recover(XATransactionId xid, Message[] addedMessages, MessageAck[] aks) {
1:                 preparedTxs[0] += 1;
1:             }
1:         });
1: 
1:         if (preparedTxs[0] > 0) {
1:             throw new Exception("Cannot export a store with prepared XA transactions.  Please commit or rollback those transactions before attempting to export.");
1:         }
1: 
1:         for (ActiveMQDestination odest : store.getDestinations()) {
1:             containerKeyCounter[0]++;
1:             if (odest instanceof ActiveMQQueue) {
1:                 ActiveMQQueue dest = (ActiveMQQueue) odest;
1:                 MessageStore queue = store.createQueueMessageStore(dest);
1: 
1:                 QueuePB.Bean destRecord = new QueuePB.Bean();
1:                 destRecord.setKey(containerKeyCounter[0]);
1:                 destRecord.setBindingKind(ptp_kind);
1: 
1:                 final long[] seqKeyCounter = new long[]{0};
1: 
1:                 HashMap<String, Object> jsonMap = new HashMap<String, Object>();
1:                 jsonMap.put("@class", "queue_destination");
1:                 jsonMap.put("name", dest.getQueueName());
1:                 String json = mapper.writeValueAsString(jsonMap);
1:                 System.out.println(json);
1:                 destRecord.setBindingData(new UTF8Buffer(json));
1:                 manager.store_queue(destRecord);
1: 
1:                 queue.recover(new MessageRecoveryListener() {
1:                     public boolean hasSpace() {
1:                         return true;
1:                     }
1: 
1:                     public boolean recoverMessageReference(MessageId ref) throws Exception {
1:                         return true;
1:                     }
1: 
1:                     public boolean isDuplicate(MessageId ref) {
1:                         return false;
1:                     }
1: 
1:                     public boolean recoverMessage(Message message) throws IOException {
1:                         messageKeyCounter[0]++;
1:                         seqKeyCounter[0]++;
1: 
0:                         DataByteArrayOutputStream mos = new DataByteArrayOutputStream();
0:                         mos.writeBoolean(TIGHT_ENCODING);
0:                         mos.writeVarInt(OPENWIRE_VERSION);
0:                         wireformat.marshal(message, mos);
1: 
0:                         MessagePB.Bean messageRecord = new MessagePB.Bean();
0:                         messageRecord.setCodec(codec_id);
0:                         messageRecord.setMessageKey(messageKeyCounter[0]);
0:                         messageRecord.setSize(message.getSize());
0:                         messageRecord.setValue(mos.toBuffer());
0:                         //                record.setCompression()
1:                         manager.store_message(messageRecord);
1: 
0:                         QueueEntryPB.Bean entryRecord = new QueueEntryPB.Bean();
0:                         entryRecord.setQueueKey(containerKeyCounter[0]);
0:                         entryRecord.setQueueSeq(seqKeyCounter[0]);
0:                         entryRecord.setMessageKey(messageKeyCounter[0]);
0:                         entryRecord.setSize(message.getSize());
0:                         if (message.getExpiration() != 0) {
0:                             entryRecord.setExpiration(message.getExpiration());
1:                         }
0:                         if (message.getRedeliveryCounter() != 0) {
0:                             entryRecord.setRedeliveries(message.getRedeliveryCounter());
1:                         }
1:                         manager.store_queue_entry(entryRecord);
1:                         return true;
1:                     }
1:                 });
1: 
1:             } else if (odest instanceof ActiveMQTopic) {
1:                 ActiveMQTopic dest = (ActiveMQTopic) odest;
1: 
1:                 TopicMessageStore topic = store.createTopicMessageStore(dest);
1:                 for (SubscriptionInfo sub : topic.getAllSubscriptions()) {
1: 
1:                     QueuePB.Bean destRecord = new QueuePB.Bean();
1:                     destRecord.setKey(containerKeyCounter[0]);
1:                     destRecord.setBindingKind(ds_kind);
1: 
1:                     // TODO: use a real JSON encoder like jackson.
1:                     HashMap<String, Object> jsonMap = new HashMap<String, Object>();
1:                     jsonMap.put("@class", "dsub_destination");
0:                     jsonMap.put("name", sub.getClientId() + ":" + sub.getSubcriptionName());
1:                     HashMap<String, Object> jsonTopic = new HashMap<String, Object>();
1:                     jsonTopic.put("name", dest.getTopicName());
1:                     jsonMap.put("topics", new Object[]{jsonTopic});
1:                     if (sub.getSelector() != null) {
1:                         jsonMap.put("selector", sub.getSelector());
1:                     }
1:                     String json = mapper.writeValueAsString(jsonMap);
1:                     System.out.println(json);
1: 
1:                     destRecord.setBindingData(new UTF8Buffer(json));
1:                     manager.store_queue(destRecord);
1: 
1:                     final long seqKeyCounter[] = new long[]{0};
0:                     topic.recoverSubscription(sub.getClientId(), sub.getSubcriptionName(), new MessageRecoveryListener() {
1:                         public boolean hasSpace() {
1:                             return true;
1:                         }
1: 
1:                         public boolean recoverMessageReference(MessageId ref) throws Exception {
1:                             return true;
1:                         }
1: 
1:                         public boolean isDuplicate(MessageId ref) {
1:                             return false;
1:                         }
1: 
1:                         public boolean recoverMessage(Message message) throws IOException {
1:                             messageKeyCounter[0]++;
1:                             seqKeyCounter[0]++;
1: 
0:                             DataByteArrayOutputStream mos = new DataByteArrayOutputStream();
0:                             mos.writeBoolean(TIGHT_ENCODING);
0:                             mos.writeVarInt(OPENWIRE_VERSION);
0:                             wireformat.marshal(mos);
1: 
0:                             MessagePB.Bean messageRecord = new MessagePB.Bean();
0:                             messageRecord.setCodec(codec_id);
0:                             messageRecord.setMessageKey(messageKeyCounter[0]);
0:                             messageRecord.setSize(message.getSize());
0:                             messageRecord.setValue(mos.toBuffer());
0:                             //                record.setCompression()
1:                             manager.store_message(messageRecord);
1: 
0:                             QueueEntryPB.Bean entryRecord = new QueueEntryPB.Bean();
0:                             entryRecord.setQueueKey(containerKeyCounter[0]);
0:                             entryRecord.setQueueSeq(seqKeyCounter[0]);
0:                             entryRecord.setMessageKey(messageKeyCounter[0]);
0:                             entryRecord.setSize(message.getSize());
0:                             if (message.getExpiration() != 0) {
0:                                 entryRecord.setExpiration(message.getExpiration());
1:                             }
0:                             if (message.getRedeliveryCounter() != 0) {
0:                                 entryRecord.setRedeliveries(message.getRedeliveryCounter());
1:                             }
1:                             manager.store_queue_entry(entryRecord);
1:                             return true;
1:                         }
1:                     });
1: 
1:                 }
1:             }
1:         }
1:         manager.finish();
1:     }
1: 
1:     public File getFile() {
1:         return file;
1:     }
1: 
1:     public void setFile(String file) {
1:         setFile(new File(file));
1:     }
1: 
1:     public void setFile(File file) {
1:         this.file = file;
1:     }
1: 
1:     public URI getConfig() {
1:         return config;
1:     }
1: 
1:     public void setConfig(URI config) {
1:         this.config = config;
1:     }
1: }
============================================================================