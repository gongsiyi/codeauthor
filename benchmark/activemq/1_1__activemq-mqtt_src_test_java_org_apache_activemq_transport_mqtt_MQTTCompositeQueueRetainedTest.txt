1:f55edcf: /**
1:f55edcf:  * Licensed to the Apache Software Foundation (ASF) under one or more
1:f55edcf:  * contributor license agreements.  See the NOTICE file distributed with
1:f55edcf:  * this work for additional information regarding copyright ownership.
1:f55edcf:  * The ASF licenses this file to You under the Apache License, Version 2.0
1:f55edcf:  * (the "License"); you may not use this file except in compliance with
1:f55edcf:  * the License.  You may obtain a copy of the License at
1:f55edcf:  *
1:f55edcf:  *      http://www.apache.org/licenses/LICENSE-2.0
1:f55edcf:  *
1:f55edcf:  * Unless required by applicable law or agreed to in writing, software
1:f55edcf:  * distributed under the License is distributed on an "AS IS" BASIS,
1:f55edcf:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:f55edcf:  * See the License for the specific language governing permissions and
1:f55edcf:  * limitations under the License.
1:f55edcf:  */
1:f55edcf: package org.apache.activemq.transport.mqtt;
1:f55edcf: 
1:f55edcf: import static org.junit.Assert.assertEquals;
1:f55edcf: import static org.junit.Assert.assertFalse;
1:f55edcf: import static org.junit.Assert.assertNotNull;
1:f55edcf: import static org.junit.Assert.assertNull;
1:f55edcf: import static org.junit.Assert.assertTrue;
1:f55edcf: 
1:f55edcf: import java.util.ArrayList;
1:f55edcf: 
1:f55edcf: import javax.jms.MessageConsumer;
1:f55edcf: import javax.jms.Session;
1:f55edcf: 
1:f55edcf: import org.apache.activemq.ActiveMQConnection;
1:f55edcf: import org.apache.activemq.ActiveMQConnectionFactory;
1:f55edcf: import org.apache.activemq.broker.BrokerService;
1:f55edcf: import org.apache.activemq.broker.region.DestinationInterceptor;
1:f55edcf: import org.apache.activemq.broker.region.policy.RetainedMessageSubscriptionRecoveryPolicy;
1:f55edcf: import org.apache.activemq.broker.region.virtual.CompositeTopic;
1:f55edcf: import org.apache.activemq.broker.region.virtual.VirtualDestination;
1:f55edcf: import org.apache.activemq.broker.region.virtual.VirtualDestinationInterceptor;
1:f55edcf: import org.apache.activemq.command.ActiveMQDestination;
1:f55edcf: import org.apache.activemq.command.ActiveMQMessage;
1:f55edcf: import org.apache.activemq.command.ActiveMQQueue;
1:f55edcf: import org.apache.activemq.command.ActiveMQTopic;
1:f55edcf: import org.apache.activemq.util.ByteSequence;
1:f55edcf: import org.junit.Test;
1:f55edcf: 
1:f55edcf: /**
1:f55edcf:  *
1:f55edcf:  */
1:f55edcf: public class MQTTCompositeQueueRetainedTest extends MQTTTestSupport {
1:f55edcf: 
1:f55edcf:     // configure composite topic
1:f55edcf:     private static final String COMPOSITE_TOPIC = "Composite.TopicA";
1:f55edcf:     private static final String FORWARD_QUEUE = "Composite.Queue.A";
1:f55edcf:     private static final String FORWARD_TOPIC = "Composite.Topic.A";
1:f55edcf: 
1:f55edcf:     private static final int NUM_MESSAGES = 25;
1:f55edcf: 
1:f55edcf:     @Override
1:fd2805f:     protected BrokerService createBroker(boolean deleteAllOnStart) throws Exception {
1:fd2805f:         BrokerService brokerService = new BrokerService();
1:f55edcf:         brokerService.setPersistent(isPersistent());
1:f55edcf:         brokerService.setAdvisorySupport(false);
1:f55edcf:         brokerService.setSchedulerSupport(isSchedulerSupportEnabled());
1:f55edcf:         brokerService.setPopulateJMSXUserID(true);
1:101b712:         brokerService.setUseJmx(false);
1:f55edcf: 
1:f55edcf:         final CompositeTopic compositeTopic = new CompositeTopic();
1:f55edcf:         compositeTopic.setName(COMPOSITE_TOPIC);
1:f55edcf:         final ArrayList<ActiveMQDestination> forwardDestinations = new ArrayList<ActiveMQDestination>();
1:f55edcf:         forwardDestinations.add(new ActiveMQQueue(FORWARD_QUEUE));
1:f55edcf:         forwardDestinations.add(new ActiveMQTopic(FORWARD_TOPIC));
1:f55edcf:         compositeTopic.setForwardTo(forwardDestinations);
1:f55edcf:         // NOTE: allows retained messages to be set on the Composite
1:f55edcf:         compositeTopic.setForwardOnly(false);
1:f55edcf: 
1:f55edcf:         final VirtualDestinationInterceptor destinationInterceptor = new VirtualDestinationInterceptor();
1:f55edcf:         destinationInterceptor.setVirtualDestinations(new VirtualDestination[] {compositeTopic} );
1:f55edcf:         brokerService.setDestinationInterceptors(new DestinationInterceptor[] { destinationInterceptor });
1:fd2805f: 
1:fd2805f:         return brokerService;
1:f55edcf:     }
1:f55edcf: 
1:f55edcf:     @Test(timeout = 60 * 1000)
1:f55edcf:     public void testSendMQTTReceiveJMSCompositeDestinations() throws Exception {
1:f55edcf: 
1:f55edcf:         final MQTTClientProvider provider = getMQTTClientProvider();
1:f55edcf:         initializeConnection(provider);
1:f55edcf: 
1:f55edcf:         // send retained message
1:f55edcf:         final String MQTT_TOPIC = "Composite/TopicA";
1:f55edcf:         final String RETAINED = "RETAINED";
1:f55edcf:         provider.publish(MQTT_TOPIC, RETAINED.getBytes(), AT_LEAST_ONCE, true);
1:f55edcf: 
1:f55edcf:         ActiveMQConnection activeMQConnection = (ActiveMQConnection) new ActiveMQConnectionFactory(jmsUri).createConnection();
1:f55edcf:         // MUST set to true to receive retained messages
1:f55edcf:         activeMQConnection.setUseRetroactiveConsumer(true);
1:f55edcf:         activeMQConnection.setClientID("jms-client");
1:f55edcf:         activeMQConnection.start();
1:f55edcf:         Session s = activeMQConnection.createSession(false, Session.AUTO_ACKNOWLEDGE);
1:f55edcf: 
1:f55edcf:         javax.jms.Queue jmsQueue = s.createQueue(FORWARD_QUEUE);
1:f55edcf:         javax.jms.Topic jmsTopic = s.createTopic(FORWARD_TOPIC);
1:f55edcf: 
1:f55edcf:         MessageConsumer queueConsumer = s.createConsumer(jmsQueue);
1:f55edcf:         MessageConsumer topicConsumer = s.createDurableSubscriber(jmsTopic, "jms-subscription");
1:f55edcf: 
1:f55edcf:         // check whether we received retained message twice on mapped Queue, once marked as RETAINED
1:f55edcf:         ActiveMQMessage message;
1:f55edcf:         ByteSequence bs;
1:f55edcf:         for (int i = 0; i < 2; i++) {
1:f55edcf:             message = (ActiveMQMessage) queueConsumer.receive(5000);
1:f55edcf:             assertNotNull("Should get retained message from " + FORWARD_QUEUE, message);
1:f55edcf:             bs = message.getContent();
1:f55edcf:             assertEquals(RETAINED, new String(bs.data, bs.offset, bs.length));
1:f55edcf:             assertTrue(message.getBooleanProperty(RetainedMessageSubscriptionRecoveryPolicy.RETAIN_PROPERTY) != message.getBooleanProperty(RetainedMessageSubscriptionRecoveryPolicy.RETAINED_PROPERTY));
1:f55edcf:         }
1:f55edcf: 
1:f55edcf:         // check whether we received retained message on mapped Topic
1:f55edcf:         message = (ActiveMQMessage) topicConsumer.receive(5000);
1:f55edcf:         assertNotNull("Should get retained message from " + FORWARD_TOPIC, message);
1:f55edcf:         bs = message.getContent();
1:f55edcf:         assertEquals(RETAINED, new String(bs.data, bs.offset, bs.length));
1:f55edcf:         assertFalse(message.getBooleanProperty(RetainedMessageSubscriptionRecoveryPolicy.RETAIN_PROPERTY));
1:f55edcf:         assertTrue(message.getBooleanProperty(RetainedMessageSubscriptionRecoveryPolicy.RETAINED_PROPERTY));
1:f55edcf: 
1:f55edcf:         for (int i = 0; i < NUM_MESSAGES; i++) {
1:f55edcf:             String payload = "Test Message: " + i;
1:f55edcf:             provider.publish(MQTT_TOPIC, payload.getBytes(), AT_LEAST_ONCE);
1:f55edcf: 
1:f55edcf:             message = (ActiveMQMessage) queueConsumer.receive(5000);
1:f55edcf:             assertNotNull("Should get a message from " + FORWARD_QUEUE, message);
1:f55edcf:             bs = message.getContent();
1:f55edcf:             assertEquals(payload, new String(bs.data, bs.offset, bs.length));
1:f55edcf: 
1:f55edcf:             message = (ActiveMQMessage) topicConsumer.receive(5000);
1:f55edcf:             assertNotNull("Should get a message from " + FORWARD_TOPIC, message);
1:f55edcf:             bs = message.getContent();
1:f55edcf:             assertEquals(payload, new String(bs.data, bs.offset, bs.length));
1:f55edcf:         }
1:f55edcf: 
1:f55edcf:         // close consumer and look for retained messages again
1:f55edcf:         queueConsumer.close();
1:f55edcf:         topicConsumer.close();
1:f55edcf: 
1:f55edcf:         queueConsumer = s.createConsumer(jmsQueue);
1:f55edcf:         topicConsumer = s.createDurableSubscriber(jmsTopic, "jms-subscription");
1:f55edcf: 
1:f55edcf:         // check whether we received retained message on mapped Queue, again
1:f55edcf:         message = (ActiveMQMessage) queueConsumer.receive(5000);
1:f55edcf:         assertNotNull("Should get recovered retained message from " + FORWARD_QUEUE, message);
1:f55edcf:         bs = message.getContent();
1:f55edcf:         assertEquals(RETAINED, new String(bs.data, bs.offset, bs.length));
1:f55edcf:         assertTrue(message.getBooleanProperty(RetainedMessageSubscriptionRecoveryPolicy.RETAINED_PROPERTY));
1:829a186:         assertNull("Should not get second retained message from " + FORWARD_QUEUE, queueConsumer.receive(2000));
1:f55edcf: 
1:f55edcf:         // check whether we received retained message on mapped Topic, again
1:f55edcf:         message = (ActiveMQMessage) topicConsumer.receive(5000);
1:f55edcf:         assertNotNull("Should get recovered retained message from " + FORWARD_TOPIC, message);
1:f55edcf:         bs = message.getContent();
1:f55edcf:         assertEquals(RETAINED, new String(bs.data, bs.offset, bs.length));
1:f55edcf:         assertTrue(message.getBooleanProperty(RetainedMessageSubscriptionRecoveryPolicy.RETAINED_PROPERTY));
1:829a186:         assertNull("Should not get second retained message from " + FORWARD_TOPIC, topicConsumer.receive(2000));
1:f55edcf: 
1:f55edcf:         // create second queue consumer and verify that it doesn't trigger message recovery
1:f55edcf:         final MessageConsumer queueConsumer2 = s.createConsumer(jmsQueue);
1:829a186:         assertNull("Second consumer MUST not receive retained message from " + FORWARD_QUEUE, queueConsumer2.receive(2000));
1:f55edcf: 
1:f55edcf:         activeMQConnection.close();
1:f55edcf:         provider.disconnect();
1:f55edcf:     }
1:f55edcf: }
============================================================================
author:Timothy Bish
-------------------------------------------------------------------------------
commit:fd2805f
/////////////////////////////////////////////////////////////////////////
1:     protected BrokerService createBroker(boolean deleteAllOnStart) throws Exception {
1:         BrokerService brokerService = new BrokerService();
/////////////////////////////////////////////////////////////////////////
1: 
1:         return brokerService;
commit:101b712
/////////////////////////////////////////////////////////////////////////
1:         brokerService.setUseJmx(false);
commit:829a186
/////////////////////////////////////////////////////////////////////////
1:         assertNull("Should not get second retained message from " + FORWARD_QUEUE, queueConsumer.receive(2000));
/////////////////////////////////////////////////////////////////////////
1:         assertNull("Should not get second retained message from " + FORWARD_TOPIC, topicConsumer.receive(2000));
1:         assertNull("Second consumer MUST not receive retained message from " + FORWARD_QUEUE, queueConsumer2.receive(2000));
commit:f55edcf
/////////////////////////////////////////////////////////////////////////
1: /**
1:  * Licensed to the Apache Software Foundation (ASF) under one or more
1:  * contributor license agreements.  See the NOTICE file distributed with
1:  * this work for additional information regarding copyright ownership.
1:  * The ASF licenses this file to You under the Apache License, Version 2.0
1:  * (the "License"); you may not use this file except in compliance with
1:  * the License.  You may obtain a copy of the License at
1:  *
1:  *      http://www.apache.org/licenses/LICENSE-2.0
1:  *
1:  * Unless required by applicable law or agreed to in writing, software
1:  * distributed under the License is distributed on an "AS IS" BASIS,
1:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:  * See the License for the specific language governing permissions and
1:  * limitations under the License.
1:  */
1: package org.apache.activemq.transport.mqtt;
1: 
1: import static org.junit.Assert.assertEquals;
1: import static org.junit.Assert.assertFalse;
1: import static org.junit.Assert.assertNotNull;
1: import static org.junit.Assert.assertNull;
1: import static org.junit.Assert.assertTrue;
1: 
1: import java.util.ArrayList;
1: 
1: import javax.jms.MessageConsumer;
1: import javax.jms.Session;
1: 
1: import org.apache.activemq.ActiveMQConnection;
1: import org.apache.activemq.ActiveMQConnectionFactory;
1: import org.apache.activemq.broker.BrokerService;
1: import org.apache.activemq.broker.region.DestinationInterceptor;
1: import org.apache.activemq.broker.region.policy.RetainedMessageSubscriptionRecoveryPolicy;
1: import org.apache.activemq.broker.region.virtual.CompositeTopic;
1: import org.apache.activemq.broker.region.virtual.VirtualDestination;
1: import org.apache.activemq.broker.region.virtual.VirtualDestinationInterceptor;
1: import org.apache.activemq.command.ActiveMQDestination;
1: import org.apache.activemq.command.ActiveMQMessage;
1: import org.apache.activemq.command.ActiveMQQueue;
1: import org.apache.activemq.command.ActiveMQTopic;
1: import org.apache.activemq.util.ByteSequence;
1: import org.junit.Test;
1: 
1: /**
1:  *
1:  */
1: public class MQTTCompositeQueueRetainedTest extends MQTTTestSupport {
1: 
1:     // configure composite topic
1:     private static final String COMPOSITE_TOPIC = "Composite.TopicA";
1:     private static final String FORWARD_QUEUE = "Composite.Queue.A";
1:     private static final String FORWARD_TOPIC = "Composite.Topic.A";
1: 
1:     private static final int NUM_MESSAGES = 25;
1: 
1:     @Override
0:     protected void createBroker() throws Exception {
0:         brokerService = new BrokerService();
1:         brokerService.setPersistent(isPersistent());
1:         brokerService.setAdvisorySupport(false);
1:         brokerService.setSchedulerSupport(isSchedulerSupportEnabled());
1:         brokerService.setPopulateJMSXUserID(true);
1: 
1:         final CompositeTopic compositeTopic = new CompositeTopic();
1:         compositeTopic.setName(COMPOSITE_TOPIC);
1:         final ArrayList<ActiveMQDestination> forwardDestinations = new ArrayList<ActiveMQDestination>();
1:         forwardDestinations.add(new ActiveMQQueue(FORWARD_QUEUE));
1:         forwardDestinations.add(new ActiveMQTopic(FORWARD_TOPIC));
1:         compositeTopic.setForwardTo(forwardDestinations);
1:         // NOTE: allows retained messages to be set on the Composite
1:         compositeTopic.setForwardOnly(false);
1: 
1:         final VirtualDestinationInterceptor destinationInterceptor = new VirtualDestinationInterceptor();
1:         destinationInterceptor.setVirtualDestinations(new VirtualDestination[] {compositeTopic} );
1:         brokerService.setDestinationInterceptors(new DestinationInterceptor[] { destinationInterceptor });
1:     }
1: 
1:     @Test(timeout = 60 * 1000)
1:     public void testSendMQTTReceiveJMSCompositeDestinations() throws Exception {
1: 
1:         final MQTTClientProvider provider = getMQTTClientProvider();
1:         initializeConnection(provider);
1: 
1:         // send retained message
1:         final String MQTT_TOPIC = "Composite/TopicA";
1:         final String RETAINED = "RETAINED";
1:         provider.publish(MQTT_TOPIC, RETAINED.getBytes(), AT_LEAST_ONCE, true);
1: 
1:         ActiveMQConnection activeMQConnection = (ActiveMQConnection) new ActiveMQConnectionFactory(jmsUri).createConnection();
1:         // MUST set to true to receive retained messages
1:         activeMQConnection.setUseRetroactiveConsumer(true);
1:         activeMQConnection.setClientID("jms-client");
1:         activeMQConnection.start();
1:         Session s = activeMQConnection.createSession(false, Session.AUTO_ACKNOWLEDGE);
1: 
1:         javax.jms.Queue jmsQueue = s.createQueue(FORWARD_QUEUE);
1:         javax.jms.Topic jmsTopic = s.createTopic(FORWARD_TOPIC);
1: 
1:         MessageConsumer queueConsumer = s.createConsumer(jmsQueue);
1:         MessageConsumer topicConsumer = s.createDurableSubscriber(jmsTopic, "jms-subscription");
1: 
1:         // check whether we received retained message twice on mapped Queue, once marked as RETAINED
1:         ActiveMQMessage message;
1:         ByteSequence bs;
1:         for (int i = 0; i < 2; i++) {
1:             message = (ActiveMQMessage) queueConsumer.receive(5000);
1:             assertNotNull("Should get retained message from " + FORWARD_QUEUE, message);
1:             bs = message.getContent();
1:             assertEquals(RETAINED, new String(bs.data, bs.offset, bs.length));
1:             assertTrue(message.getBooleanProperty(RetainedMessageSubscriptionRecoveryPolicy.RETAIN_PROPERTY) != message.getBooleanProperty(RetainedMessageSubscriptionRecoveryPolicy.RETAINED_PROPERTY));
1:         }
1: 
1:         // check whether we received retained message on mapped Topic
1:         message = (ActiveMQMessage) topicConsumer.receive(5000);
1:         assertNotNull("Should get retained message from " + FORWARD_TOPIC, message);
1:         bs = message.getContent();
1:         assertEquals(RETAINED, new String(bs.data, bs.offset, bs.length));
1:         assertFalse(message.getBooleanProperty(RetainedMessageSubscriptionRecoveryPolicy.RETAIN_PROPERTY));
1:         assertTrue(message.getBooleanProperty(RetainedMessageSubscriptionRecoveryPolicy.RETAINED_PROPERTY));
1: 
1:         for (int i = 0; i < NUM_MESSAGES; i++) {
1:             String payload = "Test Message: " + i;
1:             provider.publish(MQTT_TOPIC, payload.getBytes(), AT_LEAST_ONCE);
1: 
1:             message = (ActiveMQMessage) queueConsumer.receive(5000);
1:             assertNotNull("Should get a message from " + FORWARD_QUEUE, message);
1:             bs = message.getContent();
1:             assertEquals(payload, new String(bs.data, bs.offset, bs.length));
1: 
1:             message = (ActiveMQMessage) topicConsumer.receive(5000);
1:             assertNotNull("Should get a message from " + FORWARD_TOPIC, message);
1:             bs = message.getContent();
1:             assertEquals(payload, new String(bs.data, bs.offset, bs.length));
1:         }
1: 
1:         // close consumer and look for retained messages again
1:         queueConsumer.close();
1:         topicConsumer.close();
1: 
1:         queueConsumer = s.createConsumer(jmsQueue);
1:         topicConsumer = s.createDurableSubscriber(jmsTopic, "jms-subscription");
1: 
1:         // check whether we received retained message on mapped Queue, again
1:         message = (ActiveMQMessage) queueConsumer.receive(5000);
1:         assertNotNull("Should get recovered retained message from " + FORWARD_QUEUE, message);
1:         bs = message.getContent();
1:         assertEquals(RETAINED, new String(bs.data, bs.offset, bs.length));
1:         assertTrue(message.getBooleanProperty(RetainedMessageSubscriptionRecoveryPolicy.RETAINED_PROPERTY));
0:         assertNull("Should not get second retained message from " + FORWARD_QUEUE, queueConsumer.receive(5000));
1: 
1:         // check whether we received retained message on mapped Topic, again
1:         message = (ActiveMQMessage) topicConsumer.receive(5000);
1:         assertNotNull("Should get recovered retained message from " + FORWARD_TOPIC, message);
1:         bs = message.getContent();
1:         assertEquals(RETAINED, new String(bs.data, bs.offset, bs.length));
1:         assertTrue(message.getBooleanProperty(RetainedMessageSubscriptionRecoveryPolicy.RETAINED_PROPERTY));
0:         assertNull("Should not get second retained message from " + FORWARD_TOPIC, topicConsumer.receive(5000));
1: 
1:         // create second queue consumer and verify that it doesn't trigger message recovery
1:         final MessageConsumer queueConsumer2 = s.createConsumer(jmsQueue);
0:         assertNull("Second consumer MUST not receive retained message from " + FORWARD_QUEUE, queueConsumer2.receive(5000));
1: 
1:         activeMQConnection.close();
1:         provider.disconnect();
1:     }
1: }
============================================================================