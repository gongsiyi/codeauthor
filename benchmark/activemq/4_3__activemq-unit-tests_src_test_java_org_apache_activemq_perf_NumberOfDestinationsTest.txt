1:a0426cb: /**
1:a0426cb:  * Licensed to the Apache Software Foundation (ASF) under one or more
1:a0426cb:  * contributor license agreements.  See the NOTICE file distributed with
1:a0426cb:  * this work for additional information regarding copyright ownership.
1:a0426cb:  * The ASF licenses this file to You under the Apache License, Version 2.0
1:a0426cb:  * (the "License"); you may not use this file except in compliance with
1:a0426cb:  * the License.  You may obtain a copy of the License at
1:a0426cb:  *
1:a0426cb:  *      http://www.apache.org/licenses/LICENSE-2.0
1:a0426cb:  *
1:a0426cb:  * Unless required by applicable law or agreed to in writing, software
1:a0426cb:  * distributed under the License is distributed on an "AS IS" BASIS,
1:a0426cb:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:a0426cb:  * See the License for the specific language governing permissions and
1:a0426cb:  * limitations under the License.
1:a0426cb:  */
1:a0426cb: package org.apache.activemq.perf;
1:a0426cb: 
1:a0426cb: /**
1:a0426cb:  * A NumberOfDestinationsTest
1:a0426cb:  *
1:a0426cb:  */
1:a0426cb: import java.io.File;
1:a0426cb: import javax.jms.Connection;
1:a0426cb: import javax.jms.ConnectionFactory;
1:a0426cb: import javax.jms.Destination;
1:a0426cb: import javax.jms.JMSException;
1:a0426cb: import javax.jms.Message;
1:a0426cb: import javax.jms.MessageProducer;
1:a0426cb: import javax.jms.Session;
1:a0426cb: import junit.framework.TestCase;
1:dc6dc7e: import org.apache.activemq.ActiveMQConnectionFactory;
1:dc6dc7e: import org.apache.activemq.broker.BrokerService;
1:dc6dc7e: import org.apache.activemq.store.kahadb.KahaDBPersistenceAdapter;
1:8bf987b: import org.slf4j.Logger;
1:8bf987b: import org.slf4j.LoggerFactory;
1:a0426cb: /**
1:b0c2a40:  * 
1:a0426cb:  */
1:a0426cb: public class NumberOfDestinationsTest extends TestCase {
1:a0426cb:     protected static final int MESSAGE_COUNT = 1;
1:a0426cb:     protected static final int NUMBER_OF_DESTINATIONS = 100000;
1:8bf987b:     private static final Logger LOG = LoggerFactory.getLogger(NumberOfDestinationsTest.class);
1:a0426cb:     protected BrokerService broker;
1:a0426cb:     protected String bindAddress = "vm://localhost";
1:a0426cb:     protected int destinationCount;
1:a0426cb: 
1:a0426cb:     public void testDestinations() throws Exception {
1:a0426cb:         ConnectionFactory factory = createConnectionFactory();
1:a0426cb:         Connection connection = factory.createConnection();
1:a0426cb:         Session session = connection.createSession(false, Session.AUTO_ACKNOWLEDGE);
1:a0426cb:         MessageProducer mp = session.createProducer(null);
1:a0426cb:         for (int j = 0; j < NUMBER_OF_DESTINATIONS; j++) {
1:a0426cb:             Destination dest = getDestination(session);
1:a0426cb:           
1:a0426cb:             for (int i = 0; i < MESSAGE_COUNT; i++) {
1:a0426cb:                 Message msg = session.createTextMessage("test" + i);
1:a0426cb:                 mp.send(dest, msg);
1:a0426cb:                 
1:a0426cb:             }
1:a0426cb:             if (j % 500 == 0) {
1:a0426cb:                 LOG.info("Iterator " + j);
1:a0426cb:             }
1:a0426cb:         }
1:a0426cb:         
1:a0426cb:         connection.close();
1:a0426cb:     }
1:a0426cb: 
1:a0426cb:     protected Destination getDestination(Session session) throws JMSException {
1:a0426cb:         String topicName = getClass().getName() + "." + destinationCount++;
1:a0426cb:         return session.createTopic(topicName);
1:a0426cb:     }
1:a0426cb: 
1:dc6dc7e:     @Override
1:a0426cb:     protected void setUp() throws Exception {
1:a0426cb:         if (broker == null) {
1:a0426cb:             broker = createBroker();
1:a0426cb:         }
1:a0426cb:         super.setUp();
1:a0426cb:     }
1:a0426cb: 
1:dc6dc7e:     @Override
1:a0426cb:     protected void tearDown() throws Exception {
1:a0426cb:         super.tearDown();
1:a0426cb:         if (broker != null) {
1:a0426cb:             broker.stop();
1:a0426cb:         }
1:a0426cb:     }
1:a0426cb: 
1:a0426cb:     protected ActiveMQConnectionFactory createConnectionFactory() throws Exception {
1:a0426cb:         ActiveMQConnectionFactory cf = new ActiveMQConnectionFactory(bindAddress);
1:a0426cb:         return cf;
1:a0426cb:     }
1:a0426cb: 
1:a0426cb:     protected BrokerService createBroker() throws Exception {
1:a0426cb:         BrokerService answer = new BrokerService();
1:a0426cb:         configureBroker(answer);
1:a0426cb:         answer.start();
1:a0426cb:         return answer;
1:a0426cb:     }
1:a0426cb: 
1:a0426cb:     protected void configureBroker(BrokerService answer) throws Exception {
1:a0426cb:         File dataFileDir = new File("target/test-amq-data/perfTest/kahadb");
1:a0426cb: 
1:dc6dc7e:         KahaDBPersistenceAdapter kaha = new KahaDBPersistenceAdapter();
1:a0426cb:         kaha.setDirectory(dataFileDir);
1:a0426cb:         //answer.setUseJmx(false);
1:a0426cb: 
1:a0426cb:         // The setEnableJournalDiskSyncs(false) setting is a little dangerous right now, as I have not verified 
1:a0426cb:         // what happens if the index is updated but a journal update is lost.
1:a0426cb:         // Index is going to be in consistent, but can it be repaired?
1:a0426cb:         //kaha.setEnableJournalDiskSyncs(false);
1:a0426cb:         // Using a bigger journal file size makes he take fewer spikes as it is not switching files as often.
1:a0426cb:         //kaha.setJournalMaxFileLength(1024*100);
1:a0426cb:         
1:a0426cb:         // small batch means more frequent and smaller writes
1:a0426cb:         //kaha.setIndexWriteBatchSize(100);
1:a0426cb:         // do the index write in a separate thread
1:a0426cb:         //kaha.setEnableIndexWriteAsync(true);
1:a0426cb:         
1:a0426cb:         answer.setPersistenceAdapter(kaha);
1:a0426cb:         answer.setAdvisorySupport(false);
1:a0426cb:         answer.setEnableStatistics(false);
1:a0426cb:         answer.addConnector(bindAddress);
1:a0426cb:         answer.setDeleteAllMessagesOnStartup(true);
1:a0426cb:     }
1:a0426cb: }
============================================================================
author:Timothy A. Bish
-------------------------------------------------------------------------------
commit:ef24cc9
author:Hiram R. Chirino
-------------------------------------------------------------------------------
commit:b0c2a40
/////////////////////////////////////////////////////////////////////////
1:  * 
author:Bosanac Dejan
-------------------------------------------------------------------------------
commit:8bf987b
/////////////////////////////////////////////////////////////////////////
1: import org.slf4j.Logger;
1: import org.slf4j.LoggerFactory;
1:     private static final Logger LOG = LoggerFactory.getLogger(NumberOfDestinationsTest.class);
author:Robert Davies
-------------------------------------------------------------------------------
commit:dc6dc7e
/////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////
1: import org.apache.activemq.ActiveMQConnectionFactory;
1: import org.apache.activemq.broker.BrokerService;
1: import org.apache.activemq.store.kahadb.KahaDBPersistenceAdapter;
0: import org.apache.commons.logging.Log;
0: import org.apache.commons.logging.LogFactory;
/////////////////////////////////////////////////////////////////////////
1:     @Override
/////////////////////////////////////////////////////////////////////////
1:     @Override
/////////////////////////////////////////////////////////////////////////
1:         KahaDBPersistenceAdapter kaha = new KahaDBPersistenceAdapter();
commit:a0426cb
/////////////////////////////////////////////////////////////////////////
1: /**
1:  * Licensed to the Apache Software Foundation (ASF) under one or more
1:  * contributor license agreements.  See the NOTICE file distributed with
1:  * this work for additional information regarding copyright ownership.
1:  * The ASF licenses this file to You under the Apache License, Version 2.0
1:  * (the "License"); you may not use this file except in compliance with
1:  * the License.  You may obtain a copy of the License at
1:  *
1:  *      http://www.apache.org/licenses/LICENSE-2.0
1:  *
1:  * Unless required by applicable law or agreed to in writing, software
1:  * distributed under the License is distributed on an "AS IS" BASIS,
1:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:  * See the License for the specific language governing permissions and
1:  * limitations under the License.
1:  */
1: package org.apache.activemq.perf;
1: 
1: /**
1:  * A NumberOfDestinationsTest
1:  *
1:  */
0: import org.apache.activemq.ActiveMQConnectionFactory;
0: import org.apache.activemq.broker.BrokerService;
0: import org.apache.activemq.store.kahadb.KahaDBStore;
0: import org.apache.commons.logging.Log;
0: import org.apache.commons.logging.LogFactory;
1: import java.io.File;
1: import javax.jms.Connection;
1: import javax.jms.ConnectionFactory;
1: import javax.jms.Destination;
1: import javax.jms.JMSException;
1: import javax.jms.Message;
1: import javax.jms.MessageProducer;
1: import javax.jms.Session;
0: import javax.jms.TemporaryQueue;
0: import javax.jms.TemporaryTopic;
1: import junit.framework.TestCase;
1: /**
0:  * @version $Revision: 1.3 $
1:  */
1: public class NumberOfDestinationsTest extends TestCase {
1:     protected static final int MESSAGE_COUNT = 1;
1:     protected static final int NUMBER_OF_DESTINATIONS = 100000;
0:     private static final Log LOG = LogFactory.getLog(NumberOfDestinationsTest.class);
1:     protected BrokerService broker;
1:     protected String bindAddress = "vm://localhost";
1:     protected int destinationCount;
1: 
1:     public void testDestinations() throws Exception {
1:         ConnectionFactory factory = createConnectionFactory();
1:         Connection connection = factory.createConnection();
1:         Session session = connection.createSession(false, Session.AUTO_ACKNOWLEDGE);
1:         MessageProducer mp = session.createProducer(null);
1:         for (int j = 0; j < NUMBER_OF_DESTINATIONS; j++) {
1:             Destination dest = getDestination(session);
1:           
1:             for (int i = 0; i < MESSAGE_COUNT; i++) {
1:                 Message msg = session.createTextMessage("test" + i);
1:                 mp.send(dest, msg);
1:                 
1:             }
1:             if (j % 500 == 0) {
1:                 LOG.info("Iterator " + j);
1:             }
1:         }
1:         
1:         connection.close();
1:     }
1: 
1:     protected Destination getDestination(Session session) throws JMSException {
1:         String topicName = getClass().getName() + "." + destinationCount++;
1:         return session.createTopic(topicName);
1:     }
1: 
1:     protected void setUp() throws Exception {
1:         if (broker == null) {
1:             broker = createBroker();
1:         }
1:         super.setUp();
1:     }
1: 
1:     protected void tearDown() throws Exception {
1:         super.tearDown();
1:         if (broker != null) {
1:             broker.stop();
1:         }
1:     }
1: 
1:     protected ActiveMQConnectionFactory createConnectionFactory() throws Exception {
1:         ActiveMQConnectionFactory cf = new ActiveMQConnectionFactory(bindAddress);
1:         return cf;
1:     }
1: 
1:     protected BrokerService createBroker() throws Exception {
1:         BrokerService answer = new BrokerService();
1:         configureBroker(answer);
1:         answer.start();
1:         return answer;
1:     }
1: 
1:     protected void configureBroker(BrokerService answer) throws Exception {
1:         File dataFileDir = new File("target/test-amq-data/perfTest/kahadb");
1: 
0:         KahaDBStore kaha = new KahaDBStore();
1:         kaha.setDirectory(dataFileDir);
1:         //answer.setUseJmx(false);
1: 
1:         // The setEnableJournalDiskSyncs(false) setting is a little dangerous right now, as I have not verified 
1:         // what happens if the index is updated but a journal update is lost.
1:         // Index is going to be in consistent, but can it be repaired?
1:         //kaha.setEnableJournalDiskSyncs(false);
1:         // Using a bigger journal file size makes he take fewer spikes as it is not switching files as often.
1:         //kaha.setJournalMaxFileLength(1024*100);
1:         
1:         // small batch means more frequent and smaller writes
1:         //kaha.setIndexWriteBatchSize(100);
1:         // do the index write in a separate thread
1:         //kaha.setEnableIndexWriteAsync(true);
1:         
1:         answer.setPersistenceAdapter(kaha);
1:         answer.setAdvisorySupport(false);
1:         answer.setEnableStatistics(false);
1:         answer.addConnector(bindAddress);
1:         answer.setDeleteAllMessagesOnStartup(true);
1:     }
1: }
============================================================================