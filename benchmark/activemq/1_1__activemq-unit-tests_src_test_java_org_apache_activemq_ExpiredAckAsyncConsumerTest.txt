1:f10aab6: /**
1:f10aab6:  * Licensed to the Apache Software Foundation (ASF) under one or more
1:f10aab6:  * contributor license agreements.  See the NOTICE file distributed with
1:f10aab6:  * this work for additional information regarding copyright ownership.
1:f10aab6:  * The ASF licenses this file to You under the Apache License, Version 2.0
1:f10aab6:  * (the "License"); you may not use this file except in compliance with
1:f10aab6:  * the License.  You may obtain a copy of the License at
1:f10aab6:  *
1:f10aab6:  *      http://www.apache.org/licenses/LICENSE-2.0
1:f10aab6:  *
1:f10aab6:  * Unless required by applicable law or agreed to in writing, software
1:f10aab6:  * distributed under the License is distributed on an "AS IS" BASIS,
1:f10aab6:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:f10aab6:  * See the License for the specific language governing permissions and
1:f10aab6:  * limitations under the License.
1:f10aab6:  */
1:f10aab6: package org.apache.activemq;
1:f10aab6: 
1:f10aab6: import static org.junit.Assert.assertFalse;
1:f10aab6: import static org.junit.Assert.assertTrue;
1:f10aab6: 
1:f10aab6: import java.util.concurrent.ExecutorService;
1:f10aab6: import java.util.concurrent.Executors;
1:f10aab6: import java.util.concurrent.LinkedBlockingQueue;
1:f10aab6: import java.util.concurrent.atomic.AtomicBoolean;
1:f10aab6: 
1:f10aab6: import javax.jms.Connection;
1:f10aab6: import javax.jms.ConnectionConsumer;
1:f10aab6: import javax.jms.ExceptionListener;
1:f10aab6: import javax.jms.JMSException;
1:f10aab6: import javax.jms.Message;
1:f10aab6: import javax.jms.MessageListener;
1:f10aab6: import javax.jms.MessageProducer;
1:f10aab6: import javax.jms.Queue;
1:f10aab6: import javax.jms.ServerSession;
1:f10aab6: import javax.jms.ServerSessionPool;
1:f10aab6: import javax.jms.Session;
1:f10aab6: import javax.jms.TextMessage;
1:f10aab6: 
1:f10aab6: import org.apache.activemq.broker.BrokerService;
1:f10aab6: import org.apache.activemq.broker.region.policy.PolicyEntry;
1:f10aab6: import org.apache.activemq.broker.region.policy.PolicyMap;
1:f10aab6: import org.apache.activemq.command.ActiveMQQueue;
1:f10aab6: import org.apache.activemq.util.Wait;
1:f10aab6: import org.junit.After;
1:f10aab6: import org.junit.Before;
1:f10aab6: import org.junit.Test;
1:f10aab6: import org.slf4j.Logger;
1:f10aab6: import org.slf4j.LoggerFactory;
1:f10aab6: 
1:f10aab6: 
1:f10aab6: /**
1:f10aab6:  * The purpose of this test is to show that AMQ-5851 is fixed.  When running in an application
1:f10aab6:  * container, if multiple messages were consumed asynchronously and the messages had a short TTL,
1:f10aab6:  * it was possible to get an exception on the broker when a message acknowledgement was received.
1:f10aab6:  * This is because the original expiration strategy was excessive and when an expired Ack was received,
1:f10aab6:  * all dispatched messages were checked for expiration instead of only the messages tied to that Ack.
1:f10aab6:  * This caused an issue because sometimes a thread would finish and send back a standard ack,
1:f10aab6:  * but another expired ack would have already cleared the message from the dispach list.
1:f10aab6:  * Now only messages tied to the MessageAck are expired which fixes this problem.
1:f10aab6:  *
1:f10aab6:  */
1:f10aab6: public class ExpiredAckAsyncConsumerTest {
1:f10aab6:     private static final Logger LOG = LoggerFactory.getLogger(ExpiredAckAsyncConsumerTest.class);
1:f10aab6: 
1:f10aab6:     private BrokerService broker;
1:f10aab6:     private Connection connection;
1:f10aab6:     private ConnectionConsumer connectionConsumer;
1:f10aab6:     private Queue queue;
1:f10aab6:     private AtomicBoolean finished = new AtomicBoolean();
1:f10aab6:     private AtomicBoolean failed = new AtomicBoolean();
1:f10aab6: 
1:f10aab6: 
1:f10aab6:     @Before
1:f10aab6:     public void setUp() throws Exception {
1:f10aab6: 
1:f10aab6:         broker = new BrokerService();
1:f10aab6:         broker.addConnector("tcp://localhost:0");
1:f10aab6:         broker.setDeleteAllMessagesOnStartup(true);
1:f10aab6: 
1:f10aab6:         PolicyMap policyMap = new PolicyMap();
1:f10aab6:         PolicyEntry defaultEntry = new PolicyEntry();
1:f10aab6:         policyMap.setDefaultEntry(defaultEntry);
1:f10aab6:         broker.setDestinationPolicy(policyMap);
1:f10aab6:         broker.start();
1:f10aab6:         broker.waitUntilStarted();
1:f10aab6: 
1:f10aab6:         ActiveMQConnectionFactory factory = new ActiveMQConnectionFactory(broker.getTransportConnectors().get(0).getConnectUri().toString());
1:f10aab6:         factory.setExceptionListener(new ExceptionListener() {
1:f10aab6:             @Override
1:f10aab6:             public void onException(JMSException exception) {
1:f10aab6:                 failed.set(true);
1:f10aab6:             }
1:f10aab6:         });
1:f10aab6:         connection = factory.createConnection();
1:f10aab6:         queue = createQueue();
1:f10aab6:         connection.start();
1:f10aab6:     }
1:f10aab6: 
1:f10aab6:     @After
1:f10aab6:     public void tearDown() throws Exception {
1:f10aab6:         connectionConsumer.close();
1:f10aab6:         connection.close();
1:f10aab6:         broker.stop();
1:f10aab6:         broker.waitUntilStopped();
1:f10aab6:     }
1:f10aab6: 
1:f10aab6: 
1:f10aab6:     @Test(timeout = 60 * 1000)
1:f10aab6:     public void testAsyncMessageExpiration() throws Exception {
1:f10aab6:         ExecutorService executors = Executors.newFixedThreadPool(1);
1:f10aab6:         final Session session = connection.createSession(false, Session.AUTO_ACKNOWLEDGE);
1:f10aab6:         final MessageProducer producer = session.createProducer(queue);
1:f10aab6:         producer.setTimeToLive(10L);
1:f10aab6: 
1:f10aab6:         //Send 30 messages and make sure we can consume with multiple threads without failing
1:f10aab6:         //even when messages are expired
1:f10aab6:         executors.submit(new Runnable() {
1:f10aab6:             @Override
1:f10aab6:             public void run() {
1:f10aab6:                 try {
1:f10aab6:                     Thread.sleep(100);
1:f10aab6:                     int count = 0;
1:f10aab6:                     while (!failed.get() && count < 30) {
1:f10aab6:                         producer.send(session.createTextMessage("Hello World: " + count));
1:f10aab6:                         LOG.info("sending: " + count);
1:f10aab6:                         count++;
1:f10aab6:                         Thread.sleep(100L);
1:f10aab6:                     }
1:f10aab6:                     finished.set(true);
1:f10aab6:                 } catch (Exception e) {
1:f10aab6:                     e.printStackTrace();
1:f10aab6:                 }
1:f10aab6: 
1:f10aab6:             }
1:f10aab6:         });
1:f10aab6: 
1:f10aab6:         connectionConsumer = connection.createConnectionConsumer(
1:f10aab6:                 queue, null, new TestServerSessionPool(connection), 1000);
1:f10aab6: 
1:f10aab6:         assertTrue("received messages", Wait.waitFor(new Wait.Condition() {
1:f10aab6:             @Override
1:f10aab6:             public boolean isSatisified() throws Exception {
1:f10aab6:                 return finished.get();
1:f10aab6:             }
1:f10aab6:         }));
1:f10aab6: 
1:f10aab6:         assertFalse("An exception was received on receive", failed.get());
1:f10aab6:     }
1:f10aab6: 
1:f10aab6: 
1:f10aab6:     protected Queue createQueue() {
1:f10aab6:         return new ActiveMQQueue("TEST");
1:f10aab6:     }
1:f10aab6: 
1:f10aab6: 
1:f10aab6:     /**
1:f10aab6:      * Simulate a ServerSessionPool in an application server with 15 threads
1:f10aab6:      *
1:f10aab6:      */
1:f10aab6:     private class TestServerSessionPool implements ServerSessionPool {
1:f10aab6:         Connection connection;
1:f10aab6:         LinkedBlockingQueue<TestServerSession> serverSessions = new LinkedBlockingQueue<>(10);
1:f10aab6: 
1:f10aab6:         public TestServerSessionPool(Connection connection) throws JMSException {
1:f10aab6:             this.connection = connection;
1:f10aab6:             for (int i = 0; i < 15; i++) {
1:f10aab6:                 addSession();
1:f10aab6:             }
1:f10aab6:         }
1:f10aab6: 
1:f10aab6:         @Override
1:f10aab6:         public ServerSession getServerSession() throws JMSException {
1:f10aab6:             try {
1:f10aab6:                 return serverSessions.take();
1:f10aab6:             } catch (InterruptedException e) {
1:f10aab6:                 throw new RuntimeException("could not get session");
1:f10aab6:             }
1:f10aab6:         }
1:f10aab6: 
1:f10aab6:         public void addSession() {
1:f10aab6:             try {
1:f10aab6:                 serverSessions.add(new TestServerSession(this));
1:f10aab6:             } catch (Exception e) {
1:f10aab6:             }
1:f10aab6:         }
1:f10aab6:     }
1:f10aab6: 
1:f10aab6:     /**
1:f10aab6:      * Simulate a ServerSession
1:f10aab6:      *
1:f10aab6:      */
1:f10aab6:     private class TestServerSession implements ServerSession {
1:f10aab6:         TestServerSessionPool pool;
1:f10aab6:         Session session;
1:f10aab6: 
1:f10aab6:         public TestServerSession(TestServerSessionPool pool) throws JMSException {
1:f10aab6:             this.pool = pool;
1:f10aab6:             session = pool.connection.createSession(false, Session.AUTO_ACKNOWLEDGE);
1:f10aab6:             session.setMessageListener(new TestMessageListener());
1:f10aab6:         }
1:f10aab6: 
1:f10aab6:         @Override
1:f10aab6:         public Session getSession() throws JMSException {
1:f10aab6:             return session;
1:f10aab6:         }
1:f10aab6: 
1:f10aab6:         @Override
1:f10aab6:         public void start() throws JMSException {
1:f10aab6:             new Thread() {
1:f10aab6:                 @Override
1:f10aab6:                 public void run() {
1:f10aab6:                     //execute run on the session
1:f10aab6:                     if (!finished.get()) {
1:f10aab6:                         try {
1:f10aab6:                             session.run();
1:f10aab6:                             pool.addSession();
1:f10aab6:                         } catch (Exception e) {
1:f10aab6:                         }
1:f10aab6:                     }
1:f10aab6:                 }
1:f10aab6:             }.start();
1:f10aab6:         }
1:f10aab6:     }
1:f10aab6: 
1:f10aab6: 
1:f10aab6:     private class TestMessageListener implements MessageListener {
1:f10aab6:         @Override
1:f10aab6:         public void onMessage(Message message) {
1:f10aab6:             try {
1:f10aab6:                 Thread.sleep(1000L);
1:f10aab6:                 String text = ((TextMessage) message).getText();
1:f10aab6:                 LOG.info("got message: " + text);
1:f10aab6:             } catch (Exception e) {
1:f10aab6:                 LOG.error("in onMessage", e);
1:f10aab6:             }
1:f10aab6:         }
1:f10aab6:     }
1:f10aab6: 
1:f10aab6: }
============================================================================
author:Christopher L. Shannon (cshannon)
-------------------------------------------------------------------------------
commit:f10aab6
/////////////////////////////////////////////////////////////////////////
1: /**
1:  * Licensed to the Apache Software Foundation (ASF) under one or more
1:  * contributor license agreements.  See the NOTICE file distributed with
1:  * this work for additional information regarding copyright ownership.
1:  * The ASF licenses this file to You under the Apache License, Version 2.0
1:  * (the "License"); you may not use this file except in compliance with
1:  * the License.  You may obtain a copy of the License at
1:  *
1:  *      http://www.apache.org/licenses/LICENSE-2.0
1:  *
1:  * Unless required by applicable law or agreed to in writing, software
1:  * distributed under the License is distributed on an "AS IS" BASIS,
1:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:  * See the License for the specific language governing permissions and
1:  * limitations under the License.
1:  */
1: package org.apache.activemq;
1: 
1: import static org.junit.Assert.assertFalse;
1: import static org.junit.Assert.assertTrue;
1: 
1: import java.util.concurrent.ExecutorService;
1: import java.util.concurrent.Executors;
1: import java.util.concurrent.LinkedBlockingQueue;
1: import java.util.concurrent.atomic.AtomicBoolean;
1: 
1: import javax.jms.Connection;
1: import javax.jms.ConnectionConsumer;
1: import javax.jms.ExceptionListener;
1: import javax.jms.JMSException;
1: import javax.jms.Message;
1: import javax.jms.MessageListener;
1: import javax.jms.MessageProducer;
1: import javax.jms.Queue;
1: import javax.jms.ServerSession;
1: import javax.jms.ServerSessionPool;
1: import javax.jms.Session;
1: import javax.jms.TextMessage;
1: 
1: import org.apache.activemq.broker.BrokerService;
1: import org.apache.activemq.broker.region.policy.PolicyEntry;
1: import org.apache.activemq.broker.region.policy.PolicyMap;
1: import org.apache.activemq.command.ActiveMQQueue;
1: import org.apache.activemq.util.Wait;
1: import org.junit.After;
1: import org.junit.Before;
1: import org.junit.Test;
1: import org.slf4j.Logger;
1: import org.slf4j.LoggerFactory;
1: 
1: 
1: /**
1:  * The purpose of this test is to show that AMQ-5851 is fixed.  When running in an application
1:  * container, if multiple messages were consumed asynchronously and the messages had a short TTL,
1:  * it was possible to get an exception on the broker when a message acknowledgement was received.
1:  * This is because the original expiration strategy was excessive and when an expired Ack was received,
1:  * all dispatched messages were checked for expiration instead of only the messages tied to that Ack.
1:  * This caused an issue because sometimes a thread would finish and send back a standard ack,
1:  * but another expired ack would have already cleared the message from the dispach list.
1:  * Now only messages tied to the MessageAck are expired which fixes this problem.
1:  *
1:  */
1: public class ExpiredAckAsyncConsumerTest {
1:     private static final Logger LOG = LoggerFactory.getLogger(ExpiredAckAsyncConsumerTest.class);
1: 
1:     private BrokerService broker;
1:     private Connection connection;
1:     private ConnectionConsumer connectionConsumer;
1:     private Queue queue;
1:     private AtomicBoolean finished = new AtomicBoolean();
1:     private AtomicBoolean failed = new AtomicBoolean();
1: 
1: 
1:     @Before
1:     public void setUp() throws Exception {
1: 
1:         broker = new BrokerService();
1:         broker.addConnector("tcp://localhost:0");
1:         broker.setDeleteAllMessagesOnStartup(true);
1: 
1:         PolicyMap policyMap = new PolicyMap();
1:         PolicyEntry defaultEntry = new PolicyEntry();
1:         policyMap.setDefaultEntry(defaultEntry);
1:         broker.setDestinationPolicy(policyMap);
1:         broker.start();
1:         broker.waitUntilStarted();
1: 
1:         ActiveMQConnectionFactory factory = new ActiveMQConnectionFactory(broker.getTransportConnectors().get(0).getConnectUri().toString());
1:         factory.setExceptionListener(new ExceptionListener() {
1:             @Override
1:             public void onException(JMSException exception) {
1:                 failed.set(true);
1:             }
1:         });
1:         connection = factory.createConnection();
1:         queue = createQueue();
1:         connection.start();
1:     }
1: 
1:     @After
1:     public void tearDown() throws Exception {
1:         connectionConsumer.close();
1:         connection.close();
1:         broker.stop();
1:         broker.waitUntilStopped();
1:     }
1: 
1: 
1:     @Test(timeout = 60 * 1000)
1:     public void testAsyncMessageExpiration() throws Exception {
1:         ExecutorService executors = Executors.newFixedThreadPool(1);
1:         final Session session = connection.createSession(false, Session.AUTO_ACKNOWLEDGE);
1:         final MessageProducer producer = session.createProducer(queue);
1:         producer.setTimeToLive(10L);
1: 
1:         //Send 30 messages and make sure we can consume with multiple threads without failing
1:         //even when messages are expired
1:         executors.submit(new Runnable() {
1:             @Override
1:             public void run() {
1:                 try {
1:                     Thread.sleep(100);
1:                     int count = 0;
1:                     while (!failed.get() && count < 30) {
1:                         producer.send(session.createTextMessage("Hello World: " + count));
1:                         LOG.info("sending: " + count);
1:                         count++;
1:                         Thread.sleep(100L);
1:                     }
1:                     finished.set(true);
1:                 } catch (Exception e) {
1:                     e.printStackTrace();
1:                 }
1: 
1:             }
1:         });
1: 
1:         connectionConsumer = connection.createConnectionConsumer(
1:                 queue, null, new TestServerSessionPool(connection), 1000);
1: 
1:         assertTrue("received messages", Wait.waitFor(new Wait.Condition() {
1:             @Override
1:             public boolean isSatisified() throws Exception {
1:                 return finished.get();
1:             }
1:         }));
1: 
1:         assertFalse("An exception was received on receive", failed.get());
1:     }
1: 
1: 
1:     protected Queue createQueue() {
1:         return new ActiveMQQueue("TEST");
1:     }
1: 
1: 
1:     /**
1:      * Simulate a ServerSessionPool in an application server with 15 threads
1:      *
1:      */
1:     private class TestServerSessionPool implements ServerSessionPool {
1:         Connection connection;
1:         LinkedBlockingQueue<TestServerSession> serverSessions = new LinkedBlockingQueue<>(10);
1: 
1:         public TestServerSessionPool(Connection connection) throws JMSException {
1:             this.connection = connection;
1:             for (int i = 0; i < 15; i++) {
1:                 addSession();
1:             }
1:         }
1: 
1:         @Override
1:         public ServerSession getServerSession() throws JMSException {
1:             try {
1:                 return serverSessions.take();
1:             } catch (InterruptedException e) {
1:                 throw new RuntimeException("could not get session");
1:             }
1:         }
1: 
1:         public void addSession() {
1:             try {
1:                 serverSessions.add(new TestServerSession(this));
1:             } catch (Exception e) {
1:             }
1:         }
1:     }
1: 
1:     /**
1:      * Simulate a ServerSession
1:      *
1:      */
1:     private class TestServerSession implements ServerSession {
1:         TestServerSessionPool pool;
1:         Session session;
1: 
1:         public TestServerSession(TestServerSessionPool pool) throws JMSException {
1:             this.pool = pool;
1:             session = pool.connection.createSession(false, Session.AUTO_ACKNOWLEDGE);
1:             session.setMessageListener(new TestMessageListener());
1:         }
1: 
1:         @Override
1:         public Session getSession() throws JMSException {
1:             return session;
1:         }
1: 
1:         @Override
1:         public void start() throws JMSException {
1:             new Thread() {
1:                 @Override
1:                 public void run() {
1:                     //execute run on the session
1:                     if (!finished.get()) {
1:                         try {
1:                             session.run();
1:                             pool.addSession();
1:                         } catch (Exception e) {
1:                         }
1:                     }
1:                 }
1:             }.start();
1:         }
1:     }
1: 
1: 
1:     private class TestMessageListener implements MessageListener {
1:         @Override
1:         public void onMessage(Message message) {
1:             try {
1:                 Thread.sleep(1000L);
1:                 String text = ((TextMessage) message).getText();
1:                 LOG.info("got message: " + text);
1:             } catch (Exception e) {
1:                 LOG.error("in onMessage", e);
1:             }
1:         }
1:     }
1: 
1: }
============================================================================