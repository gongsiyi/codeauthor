1:5be5a62: /**
1:57b4941:  * Licensed to the Apache Software Foundation (ASF) under one or more
1:57b4941:  * contributor license agreements.  See the NOTICE file distributed with
1:57b4941:  * this work for additional information regarding copyright ownership.
1:57b4941:  * The ASF licenses this file to You under the Apache License, Version 2.0
1:57b4941:  * (the "License"); you may not use this file except in compliance with
1:57b4941:  * the License.  You may obtain a copy of the License at
3:5be5a62:  *
1:5f1adbe:  *      http://www.apache.org/licenses/LICENSE-2.0
1:5be5a62:  *
1:40a7d3b:  * Unless required by applicable law or agreed to in writing, software
1:5be5a62:  * distributed under the License is distributed on an "AS IS" BASIS,
1:5be5a62:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:5be5a62:  * See the License for the specific language governing permissions and
1:5be5a62:  * limitations under the License.
1:5be5a62:  */
1:8abcfd1: package org.apache.activemq.tool;
32:40a7d3b: 
1:7f5213b: import java.io.IOException;
1:7f5213b: import java.util.ArrayList;
1:7f5213b: import java.util.Collections;
1:7f5213b: import java.util.Iterator;
1:7f5213b: import java.util.List;
1:7f5213b: import java.util.Random;
1:540dd5c: import java.util.concurrent.CountDownLatch;
1:540dd5c: import java.util.concurrent.TimeUnit;
1:540dd5c: import java.util.concurrent.atomic.AtomicBoolean;
1:540dd5c: import java.util.concurrent.atomic.AtomicInteger;
1:40a7d3b: import javax.jms.BytesMessage;
1:40a7d3b: import javax.jms.Connection;
1:40a7d3b: import javax.jms.DeliveryMode;
1:40a7d3b: import javax.jms.Destination;
1:40a7d3b: import javax.jms.JMSException;
1:40a7d3b: import javax.jms.Message;
1:40a7d3b: import javax.jms.MessageConsumer;
1:40a7d3b: import javax.jms.MessageProducer;
1:40a7d3b: import javax.jms.Session;
1:40a7d3b: 
1:40a7d3b: import junit.framework.TestCase;
1:7f5213b: import org.apache.activemq.ActiveMQConnectionFactory;
1:7f5213b: import org.apache.activemq.command.ActiveMQQueue;
1:7f5213b: 
2:40a7d3b: /**
1:b0c2a40:  * 
1:40a7d3b:  */
1:40a7d3b: public class AcidTestTool extends TestCase {
1:7f5213b: 
1:40a7d3b: 
1:40a7d3b:     // Worker configuration.
1:40a7d3b:     protected int recordSize = 1024;
1:40a7d3b:     protected int batchSize = 5;
1:40a7d3b:     protected int workerThinkTime = 500;
1:40a7d3b:     protected Destination target;
1:540dd5c: 
1:540dd5c:     private Random random = new Random();
1:540dd5c:     private byte data[];
1:540dd5c:     private int workerCount = 10;
1:540dd5c:     private AtomicBoolean ignoreJMSErrors = new AtomicBoolean(false);
1:40a7d3b:     private ActiveMQConnectionFactory factory;
1:40a7d3b:     private Connection connection;
1:540dd5c:     private AtomicInteger publishedBatches = new AtomicInteger(0);
1:540dd5c:     private AtomicInteger consumedBatches = new AtomicInteger(0);
1:540dd5c:     private List<Throwable> errors = Collections.synchronizedList(new ArrayList<Throwable>());
1:40a7d3b: 
1:40a7d3b:     private interface Worker extends Runnable {
1:540dd5c:         boolean waitForExit(long i) throws InterruptedException;
12:40a7d3b:     }
1:540dd5c: 
1:40a7d3b:     private final class ProducerWorker implements Worker {
1:40a7d3b: 
1:540dd5c:         private Session session;
1:40a7d3b:         private MessageProducer producer;
1:40a7d3b:         private BytesMessage message;
1:540dd5c:         private CountDownLatch doneLatch = new CountDownLatch(1);
1:40a7d3b: 
1:40a7d3b:         ProducerWorker(Session session, String workerId) throws JMSException {
1:40a7d3b:             this.session = session;
1:40a7d3b:             producer = session.createProducer(target);
1:40a7d3b:             producer.setDeliveryMode(DeliveryMode.PERSISTENT);
1:40a7d3b:             message = session.createBytesMessage();
1:40a7d3b:             message.setStringProperty("workerId", workerId);
1:40a7d3b:             message.writeBytes(data);
1:40a7d3b:         }
1:40a7d3b: 
1:40a7d3b:         public void run() {
5:40a7d3b:             try {
1:540dd5c:                 for (int batchId = 0; true; batchId++) {
1:540dd5c:                     // System.out.println("Sending batch: "+workerId+"
1:540dd5c:                     // "+batchId);
1:540dd5c:                     for (int msgId = 0; msgId < batchSize; msgId++) {
1:540dd5c:                         // Sleep some random amount of time less than
1:540dd5c:                         // workerThinkTime
1:540dd5c:                         try {
1:540dd5c:                             Thread.sleep(random.nextInt(workerThinkTime));
1:540dd5c:                         } catch (InterruptedException e1) {
1:540dd5c:                             return;
1:540dd5c:                         }
1:540dd5c: 
1:540dd5c:                         message.setIntProperty("batch-id", batchId);
1:540dd5c:                         message.setIntProperty("msg-id", msgId);
1:540dd5c: 
1:540dd5c:                         producer.send(message);
1:540dd5c:                     }
1:40a7d3b:                     session.commit();
1:540dd5c:                     publishedBatches.incrementAndGet();
1:540dd5c:                     // System.out.println("Commited send batch: "+workerId+"
1:540dd5c:                     // "+batchId);
1:40a7d3b:                 }
1:540dd5c:             } catch (JMSException e) {
1:540dd5c:                 if (!ignoreJMSErrors.get()) {
1:540dd5c:                     e.printStackTrace();
1:540dd5c:                     errors.add(e);
1:540dd5c:                 }
1:540dd5c:                 return;
1:540dd5c:             } catch (Throwable e) {
1:540dd5c:                 e.printStackTrace();
1:540dd5c:                 errors.add(e);
1:540dd5c:                 return;
1:40a7d3b:             } finally {
1:40a7d3b:                 System.out.println("Producer exiting.");
1:40a7d3b:                 doneLatch.countDown();
1:86cbdfd:             }
1:40a7d3b:         }
1:40a7d3b: 
1:40a7d3b:         public boolean waitForExit(long i) throws InterruptedException {
1:40a7d3b:             return doneLatch.await(i, TimeUnit.MILLISECONDS);
1:40a7d3b:         }
1:40a7d3b:     }
1:540dd5c: 
1:40a7d3b:     private final class ConsumerWorker implements Worker {
1:540dd5c: 
1:540dd5c:         private Session session;
1:40a7d3b:         private MessageConsumer consumer;
1:40a7d3b:         private final long timeout;
1:540dd5c:         private CountDownLatch doneLatch = new CountDownLatch(1);
1:540dd5c: 
1:40a7d3b:         ConsumerWorker(Session session, String workerId, long timeout) throws JMSException {
1:40a7d3b:             this.session = session;
1:40a7d3b:             this.timeout = timeout;
1:540dd5c:             consumer = session.createConsumer(target, "workerId='" + workerId + "'");
1:40a7d3b:         }
1:40a7d3b: 
1:40a7d3b:         public void run() {
1:40a7d3b: 
1:540dd5c:             try {
1:540dd5c:                 int batchId = 0;
1:540dd5c:                 while (true) {
1:540dd5c:                     for (int msgId = 0; msgId < batchSize; msgId++) {
1:540dd5c: 
1:540dd5c:                         // Sleep some random amount of time less than
1:540dd5c:                         // workerThinkTime
1:540dd5c:                         try {
1:540dd5c:                             Thread.sleep(random.nextInt(workerThinkTime));
1:540dd5c:                         } catch (InterruptedException e1) {
1:540dd5c:                             return;
1:540dd5c:                         }
1:540dd5c: 
1:540dd5c:                         Message message = consumer.receive(timeout);
1:540dd5c:                         if (msgId > 0) {
1:540dd5c:                             assertNotNull(message);
1:540dd5c:                             assertEquals(message.getIntProperty("batch-id"), batchId);
1:540dd5c:                             assertEquals(message.getIntProperty("msg-id"), msgId);
1:540dd5c:                         } else {
1:540dd5c:                             if (message == null) {
1:540dd5c:                                 System.out.println("At end of batch an don't have a next batch to process.  done.");
1:540dd5c:                                 return;
1:540dd5c:                             }
1:540dd5c:                             assertEquals(msgId, message.getIntProperty("msg-id"));
1:540dd5c:                             batchId = message.getIntProperty("batch-id");
1:540dd5c:                             // System.out.println("Receiving batch: "+workerId+"
1:540dd5c:                             // "+batchId);
1:540dd5c:                         }
1:540dd5c: 
1:540dd5c:                     }
1:40a7d3b:                     session.commit();
1:40a7d3b:                     consumedBatches.incrementAndGet();
1:540dd5c:                     // System.out.println("Commited receive batch: "+workerId+"
1:540dd5c:                     // "+batchId);
1:540dd5c:                 }
1:540dd5c:             } catch (JMSException e) {
1:540dd5c:                 if (!ignoreJMSErrors.get()) {
1:540dd5c:                     e.printStackTrace();
1:540dd5c:                     errors.add(e);
1:40a7d3b:                 }
1:540dd5c:                 return;
1:540dd5c:             } catch (Throwable e) {
1:540dd5c:                 e.printStackTrace();
1:540dd5c:                 errors.add(e);
1:540dd5c:                 return;
1:40a7d3b:             } finally {
1:40a7d3b:                 System.out.println("Consumer exiting.");
1:40a7d3b:                 doneLatch.countDown();
1:40a7d3b:             }
1:40a7d3b:         }
1:40a7d3b: 
1:40a7d3b:         public boolean waitForExit(long i) throws InterruptedException {
1:40a7d3b:             return doneLatch.await(i, TimeUnit.MILLISECONDS);
1:40a7d3b:         }
1:40a7d3b:     }
1:40a7d3b: 
1:40a7d3b:     /**
1:40a7d3b:      * @see junit.framework.TestCase#setUp()
1:40a7d3b:      */
1:40a7d3b:     protected void setUp() throws Exception {
1:40a7d3b:         factory = new ActiveMQConnectionFactory("tcp://localhost:61616");
1:40a7d3b:         this.target = new ActiveMQQueue(getClass().getName());
1:40a7d3b:     }
1:40a7d3b: 
1:40a7d3b:     protected void tearDown() throws Exception {
1:540dd5c:         if (connection != null) {
1:540dd5c:             try {
1:540dd5c:                 connection.close();
1:540dd5c:             } catch (Throwable ignore) {
1:540dd5c:             }
1:40a7d3b:             connection = null;
1:40a7d3b:         }
1:40a7d3b:     }
1:540dd5c: 
1:40a7d3b:     /**
1:40a7d3b:      * @throws InterruptedException
1:40a7d3b:      * @throws JMSException
1:40a7d3b:      * @throws JMSException
1:40a7d3b:      */
1:40a7d3b:     private void reconnect() throws InterruptedException, JMSException {
1:540dd5c:         if (connection != null) {
1:540dd5c:             try {
1:540dd5c:                 connection.close();
1:540dd5c:             } catch (Throwable ignore) {
1:540dd5c:             }
1:40a7d3b:             connection = null;
1:40a7d3b:         }
1:540dd5c: 
1:540dd5c:         long reconnectDelay = 1000;
1:540dd5c: 
1:540dd5c:         while (connection == null) {
1:540dd5c:             if (reconnectDelay > 1000 * 10) {
1:540dd5c:                 reconnectDelay = 1000 * 10;
1:40a7d3b:             }
1:540dd5c:             try {
1:540dd5c:                 connection = factory.createConnection();
1:540dd5c:                 connection.start();
1:540dd5c:             } catch (JMSException e) {
1:540dd5c:                 Thread.sleep(reconnectDelay);
1:540dd5c:                 reconnectDelay *= 2;
1:540dd5c:             }
1:40a7d3b:         }
1:40a7d3b:     }
1:40a7d3b: 
1:40a7d3b:     /**
1:540dd5c:      * @throws Throwable
1:40a7d3b:      * @throws IOException
1:40a7d3b:      */
1:40a7d3b:     public void testAcidTransactions() throws Throwable {
1:40a7d3b: 
1:540dd5c:         System.out.println("Client threads write records using: Record Size: " + recordSize + ", Batch Size: " + batchSize + ", Worker Think Time: " + workerThinkTime);
1:40a7d3b: 
1:40a7d3b:         // Create the record and fill it with some values.
1:40a7d3b:         data = new byte[recordSize];
1:40a7d3b:         for (int i = 0; i < data.length; i++) {
1:540dd5c:             data[i] = (byte)i;
1:40a7d3b:         }
1:40a7d3b: 
2:40a7d3b:         System.out.println("==============================================");
1:40a7d3b:         System.out.println("===> Start the server now.");
1:40a7d3b:         System.out.println("==============================================");
1:40a7d3b:         reconnect();
1:540dd5c: 
1:40a7d3b:         System.out.println("Starting " + workerCount + " Workers...");
1:933eb2f:         ArrayList<Worker> workers = new ArrayList<Worker>();
1:540dd5c:         for (int i = 0; i < workerCount; i++) {
1:540dd5c:             String workerId = "worker-" + i;
1:40a7d3b: 
1:540dd5c:             Worker w = new ConsumerWorker(connection.createSession(true, Session.SESSION_TRANSACTED), workerId, 1000 * 5);
2:40a7d3b:             workers.add(w);
1:540dd5c:             new Thread(w, "Consumer:" + workerId).start();
1:40a7d3b: 
1:540dd5c:             w = new ProducerWorker(connection.createSession(true, Session.SESSION_TRANSACTED), workerId);
1:540dd5c:             workers.add(w);
1:540dd5c:             new Thread(w, "Producer:" + workerId).start();
1:540dd5c:         }
1:540dd5c: 
1:540dd5c:         System.out.println("Waiting for " + (workerCount * 10) + " batches to be delivered.");
1:40a7d3b: 
1:40a7d3b:         //
1:540dd5c:         // Wait for about 5 batches of messages per worker to be consumed before
1:540dd5c:         // restart.
1:40a7d3b:         // 
1:540dd5c:         while (publishedBatches.get() < workerCount * 5) {
1:540dd5c:             System.out.println("Stats: Produced Batches: " + this.publishedBatches.get() + ", Consumed Batches: " + this.consumedBatches.get());
1:40a7d3b:             Thread.sleep(1000);
1:40a7d3b:         }
1:540dd5c: 
1:40a7d3b:         System.out.println("==============================================");
1:40a7d3b:         System.out.println("===> Server is under load now.  Kill it!");
1:40a7d3b:         System.out.println("==============================================");
1:40a7d3b:         ignoreJMSErrors.set(true);
1:40a7d3b: 
1:40a7d3b:         // Wait for all the workers to finish.
1:40a7d3b:         System.out.println("Waiting for all workers to exit due to server shutdown.");
1:933eb2f:         for (Iterator<Worker> iter = workers.iterator(); iter.hasNext();) {
1:933eb2f:             Worker worker = iter.next();
1:540dd5c:             while (!worker.waitForExit(1000)) {
1:540dd5c:                 System.out.println("==============================================");
1:40a7d3b:                 System.out.println("===> Server is under load now.  Kill it!");
1:40a7d3b:                 System.out.println("==============================================");
1:540dd5c:                 System.out.println("Stats: Produced Batches: " + this.publishedBatches.get() + ", Consumed Batches: " + this.consumedBatches.get());
1:40a7d3b:             }
1:40a7d3b:         }
1:40a7d3b:         workers.clear();
1:540dd5c: 
1:540dd5c:         // No errors should have occurred so far.
1:540dd5c:         if (errors.size() > 0) {
1:933eb2f:             throw errors.get(0);
1:540dd5c:         }
1:540dd5c: 
1:40a7d3b:         System.out.println("==============================================");
1:40a7d3b:         System.out.println("===> Start the server now.");
1:40a7d3b:         System.out.println("==============================================");
1:40a7d3b:         reconnect();
1:40a7d3b: 
1:40a7d3b:         System.out.println("Restarted.");
1:540dd5c: 
1:540dd5c:         // Validate the all transactions were commited as a uow. Looking for
1:540dd5c:         // partial commits.
1:540dd5c:         for (int i = 0; i < workerCount; i++) {
1:540dd5c:             String workerId = "worker-" + i;
1:540dd5c:             Worker w = new ConsumerWorker(connection.createSession(true, Session.SESSION_TRANSACTED), workerId, 5 * 1000);
1:40a7d3b:             workers.add(w);
1:540dd5c:             new Thread(w, "Consumer:" + workerId).start();
1:40a7d3b:         }
1:40a7d3b: 
1:40a7d3b:         System.out.println("Waiting for restarted consumers to finish consuming all messages..");
1:933eb2f:         for (Iterator<Worker> iter = workers.iterator(); iter.hasNext();) {
1:933eb2f:             Worker worker = iter.next();
1:540dd5c:             while (!worker.waitForExit(1000 * 5)) {
1:40a7d3b:                 System.out.println("Waiting for restarted consumers to finish consuming all messages..");
1:540dd5c:                 System.out.println("Stats: Produced Batches: " + this.publishedBatches.get() + ", Consumed Batches: " + this.consumedBatches.get());
1:40a7d3b:             }
1:40a7d3b:         }
1:40a7d3b:         workers.clear();
1:540dd5c: 
1:40a7d3b:         System.out.println("Workers finished..");
1:540dd5c:         System.out.println("Stats: Produced Batches: " + this.publishedBatches.get() + ", Consumed Batches: " + this.consumedBatches.get());
1:540dd5c: 
1:540dd5c:         if (errors.size() > 0) {
1:933eb2f:             throw errors.get(0);
1:540dd5c:         }
1:540dd5c: 
1:40a7d3b:     }
1:40a7d3b: 
1:40a7d3b:     public static void main(String[] args) {
1:40a7d3b:         try {
1:40a7d3b:             AcidTestTool tool = new AcidTestTool();
1:40a7d3b:             tool.setUp();
1:40a7d3b:             tool.testAcidTransactions();
1:40a7d3b:             tool.tearDown();
3:40a7d3b:         } catch (Throwable e) {
1:540dd5c:             System.out.println("Test Failed: " + e.getMessage());
5:40a7d3b:             e.printStackTrace();
1:40a7d3b:         }
1:40a7d3b:     }
1:40a7d3b: }
============================================================================
author:Hadrian Zbarcea
-------------------------------------------------------------------------------
commit:d54d046
author:Hiram R. Chirino
-------------------------------------------------------------------------------
commit:ecaae53
commit:b0c2a40
/////////////////////////////////////////////////////////////////////////
1:  * 
commit:540dd5c
/////////////////////////////////////////////////////////////////////////
1: import java.util.concurrent.CountDownLatch;
1: import java.util.concurrent.TimeUnit;
1: import java.util.concurrent.atomic.AtomicBoolean;
1: import java.util.concurrent.atomic.AtomicInteger;
/////////////////////////////////////////////////////////////////////////
1: 
1:     private Random random = new Random();
1:     private byte data[];
1:     private int workerCount = 10;
1:     private AtomicBoolean ignoreJMSErrors = new AtomicBoolean(false);
1:     private AtomicInteger publishedBatches = new AtomicInteger(0);
1:     private AtomicInteger consumedBatches = new AtomicInteger(0);
1:     private List<Throwable> errors = Collections.synchronizedList(new ArrayList<Throwable>());
1:         boolean waitForExit(long i) throws InterruptedException;
1: 
1:         private Session session;
1:         private CountDownLatch doneLatch = new CountDownLatch(1);
/////////////////////////////////////////////////////////////////////////
1:                 for (int batchId = 0; true; batchId++) {
1:                     // System.out.println("Sending batch: "+workerId+"
1:                     // "+batchId);
1:                     for (int msgId = 0; msgId < batchSize; msgId++) {
1:                         // Sleep some random amount of time less than
1:                         // workerThinkTime
1:                         try {
1:                             Thread.sleep(random.nextInt(workerThinkTime));
1:                         } catch (InterruptedException e1) {
1:                             return;
1:                         }
1: 
1:                         message.setIntProperty("batch-id", batchId);
1:                         message.setIntProperty("msg-id", msgId);
1: 
1:                         producer.send(message);
1:                     }
1:                     publishedBatches.incrementAndGet();
1:                     // System.out.println("Commited send batch: "+workerId+"
1:                     // "+batchId);
1:             } catch (JMSException e) {
1:                 if (!ignoreJMSErrors.get()) {
1:                     e.printStackTrace();
1:                     errors.add(e);
1:                 }
1:                 return;
1:             } catch (Throwable e) {
1:                 e.printStackTrace();
1:                 errors.add(e);
1:                 return;
/////////////////////////////////////////////////////////////////////////
1: 
1:         private Session session;
1:         private CountDownLatch doneLatch = new CountDownLatch(1);
1: 
1:             consumer = session.createConsumer(target, "workerId='" + workerId + "'");
1:             try {
1:                 int batchId = 0;
1:                 while (true) {
1:                     for (int msgId = 0; msgId < batchSize; msgId++) {
1: 
1:                         // Sleep some random amount of time less than
1:                         // workerThinkTime
1:                         try {
1:                             Thread.sleep(random.nextInt(workerThinkTime));
1:                         } catch (InterruptedException e1) {
1:                             return;
1:                         }
1: 
1:                         Message message = consumer.receive(timeout);
1:                         if (msgId > 0) {
1:                             assertNotNull(message);
1:                             assertEquals(message.getIntProperty("batch-id"), batchId);
1:                             assertEquals(message.getIntProperty("msg-id"), msgId);
1:                         } else {
1:                             if (message == null) {
1:                                 System.out.println("At end of batch an don't have a next batch to process.  done.");
1:                                 return;
1:                             }
1:                             assertEquals(msgId, message.getIntProperty("msg-id"));
1:                             batchId = message.getIntProperty("batch-id");
1:                             // System.out.println("Receiving batch: "+workerId+"
1:                             // "+batchId);
1:                         }
1: 
1:                     }
1:                     // System.out.println("Commited receive batch: "+workerId+"
1:                     // "+batchId);
1:             } catch (JMSException e) {
1:                 if (!ignoreJMSErrors.get()) {
1:                     e.printStackTrace();
1:                     errors.add(e);
1:                 }
1:                 return;
1:             } catch (Throwable e) {
1:                 e.printStackTrace();
1:                 errors.add(e);
1:                 return;
/////////////////////////////////////////////////////////////////////////
1: 
/////////////////////////////////////////////////////////////////////////
1:         if (connection != null) {
1:             try {
1:                 connection.close();
1:             } catch (Throwable ignore) {
1:             }
1: 
1:         if (connection != null) {
1:             try {
1:                 connection.close();
1:             } catch (Throwable ignore) {
1:             }
1: 
1:         long reconnectDelay = 1000;
1: 
1:         while (connection == null) {
1:             if (reconnectDelay > 1000 * 10) {
1:                 reconnectDelay = 1000 * 10;
1:             try {
1:                 connection = factory.createConnection();
1:                 connection.start();
1:             } catch (JMSException e) {
1:                 Thread.sleep(reconnectDelay);
1:                 reconnectDelay *= 2;
1:             }
1:      * @throws Throwable
1:         System.out.println("Client threads write records using: Record Size: " + recordSize + ", Batch Size: " + batchSize + ", Worker Think Time: " + workerThinkTime);
1:             data[i] = (byte)i;
1: 
1:         for (int i = 0; i < workerCount; i++) {
1:             String workerId = "worker-" + i;
1:             Worker w = new ConsumerWorker(connection.createSession(true, Session.SESSION_TRANSACTED), workerId, 1000 * 5);
1:             new Thread(w, "Consumer:" + workerId).start();
1:             w = new ProducerWorker(connection.createSession(true, Session.SESSION_TRANSACTED), workerId);
1:             workers.add(w);
1:             new Thread(w, "Producer:" + workerId).start();
1:         }
1: 
1:         System.out.println("Waiting for " + (workerCount * 10) + " batches to be delivered.");
1:         // Wait for about 5 batches of messages per worker to be consumed before
1:         // restart.
1:         while (publishedBatches.get() < workerCount * 5) {
1:             System.out.println("Stats: Produced Batches: " + this.publishedBatches.get() + ", Consumed Batches: " + this.consumedBatches.get());
1: 
/////////////////////////////////////////////////////////////////////////
1:             while (!worker.waitForExit(1000)) {
1:                 System.out.println("==============================================");
1:                 System.out.println("Stats: Produced Batches: " + this.publishedBatches.get() + ", Consumed Batches: " + this.consumedBatches.get());
1: 
1:         // No errors should have occurred so far.
1:         if (errors.size() > 0) {
1:         }
1: 
1: 
1:         // Validate the all transactions were commited as a uow. Looking for
1:         // partial commits.
1:         for (int i = 0; i < workerCount; i++) {
1:             String workerId = "worker-" + i;
1:             Worker w = new ConsumerWorker(connection.createSession(true, Session.SESSION_TRANSACTED), workerId, 5 * 1000);
1:             new Thread(w, "Consumer:" + workerId).start();
1:             while (!worker.waitForExit(1000 * 5)) {
1:                 System.out.println("Stats: Produced Batches: " + this.publishedBatches.get() + ", Consumed Batches: " + this.consumedBatches.get());
1:         System.out.println("Stats: Produced Batches: " + this.publishedBatches.get() + ", Consumed Batches: " + this.consumedBatches.get());
1: 
1:         if (errors.size() > 0) {
1:         }
1: 
1: 
/////////////////////////////////////////////////////////////////////////
1:             System.out.println("Test Failed: " + e.getMessage());
commit:5f1adbe
/////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////
1:  *      http://www.apache.org/licenses/LICENSE-2.0
commit:933eb2f
/////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////
0:     List<Throwable> errors = Collections.synchronizedList(new ArrayList<Throwable>());
/////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////
1:         ArrayList<Worker> workers = new ArrayList<Worker>();
/////////////////////////////////////////////////////////////////////////
1:         for (Iterator<Worker> iter = workers.iterator(); iter.hasNext();) {
1:             Worker worker = iter.next();
/////////////////////////////////////////////////////////////////////////
1:             throw errors.get(0);
/////////////////////////////////////////////////////////////////////////
1:         for (Iterator<Worker> iter = workers.iterator(); iter.hasNext();) {
1:             Worker worker = iter.next();
/////////////////////////////////////////////////////////////////////////
1:             throw errors.get(0);
commit:86cbdfd
/////////////////////////////////////////////////////////////////////////
0: import java.util.concurrent.CountDownLatch;
0: import java.util.concurrent.TimeUnit;
0: import java.util.concurrent.atomic.AtomicBoolean;
0: import java.util.concurrent.atomic.AtomicInteger;
/////////////////////////////////////////////////////////////////////////
1: }
commit:57b4941
/////////////////////////////////////////////////////////////////////////
1:  * Licensed to the Apache Software Foundation (ASF) under one or more
1:  * contributor license agreements.  See the NOTICE file distributed with
1:  * this work for additional information regarding copyright ownership.
1:  * The ASF licenses this file to You under the Apache License, Version 2.0
1:  * (the "License"); you may not use this file except in compliance with
1:  * the License.  You may obtain a copy of the License at
commit:7f5213b
/////////////////////////////////////////////////////////////////////////
1: import java.io.IOException;
0: import java.io.PrintWriter;
1: import java.util.ArrayList;
1: import java.util.Collections;
1: import java.util.Iterator;
1: import java.util.List;
1: import java.util.Random;
/////////////////////////////////////////////////////////////////////////
1: import org.apache.activemq.ActiveMQConnectionFactory;
1: import org.apache.activemq.command.ActiveMQQueue;
1: 
0: import edu.emory.mathcs.backport.java.util.concurrent.CountDownLatch;
0: import edu.emory.mathcs.backport.java.util.concurrent.TimeUnit;
0: import edu.emory.mathcs.backport.java.util.concurrent.atomic.AtomicBoolean;
0: import edu.emory.mathcs.backport.java.util.concurrent.atomic.AtomicInteger;
1: 
/////////////////////////////////////////////////////////////////////////
0:      * @throws Throwable 
commit:5be5a62
/////////////////////////////////////////////////////////////////////////
1: /**
1:  *
0:  * Copyright 2005-2006 The Apache Software Foundation
1:  *
0:  * Licensed under the Apache License, Version 2.0 (the "License");
0:  * you may not use this file except in compliance with the License.
0:  * You may obtain a copy of the License at
1:  *
1:  *
1:  * distributed under the License is distributed on an "AS IS" BASIS,
1:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:  * See the License for the specific language governing permissions and
1:  * limitations under the License.
1:  */
commit:8abcfd1
/////////////////////////////////////////////////////////////////////////
1: package org.apache.activemq.tool;
0: import org.apache.activemq.ActiveMQConnectionFactory;
0: import org.apache.activemq.command.ActiveMQQueue;
author:Claus Ibsen
-------------------------------------------------------------------------------
commit:3b4aadc
/////////////////////////////////////////////////////////////////////////
author:James Strachan
-------------------------------------------------------------------------------
commit:40a7d3b
/////////////////////////////////////////////////////////////////////////
1: /** 
0:  * 
0:  * Copyright 2004 Protique Ltd
0:  * 
0:  * Licensed under the Apache License, Version 2.0 (the "License"); 
0:  * you may not use this file except in compliance with the License. 
0:  * You may obtain a copy of the License at 
0:  * 
0:  * http://www.apache.org/licenses/LICENSE-2.0
0:  * 
1:  * Unless required by applicable law or agreed to in writing, software
0:  * distributed under the License is distributed on an "AS IS" BASIS, 
0:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. 
0:  * See the License for the specific language governing permissions and 
0:  * limitations under the License. 
0:  * 
0:  **/
1: 
0: package org.activemq.tool;
1: 
0: import edu.emory.mathcs.backport.java.util.concurrent.CountDownLatch;
0: import edu.emory.mathcs.backport.java.util.concurrent.TimeUnit;
0: import edu.emory.mathcs.backport.java.util.concurrent.atomic.AtomicBoolean;
0: import edu.emory.mathcs.backport.java.util.concurrent.atomic.AtomicInteger;
1: 
0: import org.activemq.ActiveMQConnectionFactory;
0: import org.activemq.command.ActiveMQQueue;
1: 
1: import javax.jms.BytesMessage;
1: import javax.jms.Connection;
1: import javax.jms.DeliveryMode;
1: import javax.jms.Destination;
1: import javax.jms.JMSException;
1: import javax.jms.Message;
1: import javax.jms.MessageConsumer;
1: import javax.jms.MessageProducer;
1: import javax.jms.Session;
1: 
0: import java.io.IOException;
0: import java.io.PrintWriter;
0: import java.util.ArrayList;
0: import java.util.Collections;
0: import java.util.Iterator;
0: import java.util.List;
0: import java.util.Random;
1: 
1: import junit.framework.TestCase;
1: 
1: /**
0:  * @version $Revision$
1:  */
1: public class AcidTestTool extends TestCase {
1: 
0:     private Random random = new Random();
0:     private byte data[];
0:     private int workerCount = 10;
0:     private PrintWriter statWriter;
1: 
1:     // Worker configuration.
1:     protected int recordSize = 1024;
1:     protected int batchSize = 5;
1:     protected int workerThinkTime = 500;
0:     AtomicBoolean ignoreJMSErrors = new AtomicBoolean(false);
1: 
1:     protected Destination target;
1:     private ActiveMQConnectionFactory factory;
1:     private Connection connection;
1:     
0:     AtomicInteger publishedBatches = new AtomicInteger(0);
0:     AtomicInteger consumedBatches = new AtomicInteger(0);
1:     
0:     List errors = Collections.synchronizedList(new ArrayList());
1: 
1:     private interface Worker extends Runnable {
0:         public boolean waitForExit(long i) throws InterruptedException;
1:     }
1:     
1:     private final class ProducerWorker implements Worker {
1: 
0:         Session session;
1:         private MessageProducer producer;
1:         private BytesMessage message;
0:         CountDownLatch doneLatch = new CountDownLatch(1);
0:         private final String workerId;
1: 
1:         ProducerWorker(Session session, String workerId) throws JMSException {
1:             this.session = session;
0:             this.workerId = workerId;
1:             producer = session.createProducer(target);
1:             producer.setDeliveryMode(DeliveryMode.PERSISTENT);
1:             message = session.createBytesMessage();
1:             message.setStringProperty("workerId", workerId);
1:             message.writeBytes(data);
1:         }
1: 
1:         public void run() {
1:             try {
0:                 for( int batchId=0; true; batchId++ ) {
0: //				    System.out.println("Sending batch: "+workerId+" "+batchId);
0:                     for( int msgId=0; msgId < batchSize; msgId++ ) {
0:     	                // Sleep some random amount of time less than workerThinkTime
1:     	                try {
0:     	                    Thread.sleep(random.nextInt(workerThinkTime));
0:     	                } catch (InterruptedException e1) {
0:     	                    return;
1:     	                }			
1:     	                
0: 					    message.setIntProperty("batch-id",batchId);
0: 					    message.setIntProperty("msg-id",msgId);
1: 	
1: 					    
0: 					    producer.send(message);    		                
1:                     } 
1:                     session.commit();
0:                     publishedBatches.incrementAndGet();	                    
0: //				    System.out.println("Commited send batch: "+workerId+" "+batchId);
1:                 }
0: 			} catch (JMSException e) {
0: 			    if( !ignoreJMSErrors.get() ) {
1: 				    e.printStackTrace();
0: 				    errors.add(e);
1: 			    }
0: 				return;
1: 			} catch (Throwable e) {
1: 			    e.printStackTrace();
0: 			    errors.add(e);
0: 				return;
1:             } finally {
1:                 System.out.println("Producer exiting.");
1:                 doneLatch.countDown();
1:             }
1:         }
1: 
1:         public boolean waitForExit(long i) throws InterruptedException {
1:             return doneLatch.await(i, TimeUnit.MILLISECONDS);
1:         }
1:     }
1:     
1:     private final class ConsumerWorker implements Worker {
1: 
0:         Session session;
1:         private MessageConsumer consumer;
1:         private final long timeout;
0:         CountDownLatch doneLatch = new CountDownLatch(1);
0:         private final String workerId;
1:         
1:         ConsumerWorker(Session session, String workerId, long timeout) throws JMSException {
1:             this.session = session;
0:             this.workerId = workerId;
1:             this.timeout = timeout;
0:             consumer = session.createConsumer(target,"workerId='"+workerId+"'");
1:         }
1: 
1:         public void run() {
1:             
1:             try {
0:                 int batchId=0;
0:                 while( true ) {
0:                     for( int msgId=0; msgId < batchSize; msgId++ ) {
1: 
0:                         // Sleep some random amount of time less than workerThinkTime
1:     	                try {
0:     	                    Thread.sleep(random.nextInt(workerThinkTime));
0:     	                } catch (InterruptedException e1) {
0:     	                    return;
1:     	                }			
1:                         
0: 	                    Message message = consumer.receive(timeout);	                    
0: 	                    if( msgId > 0 ) {
0: 	                        assertNotNull(message);	                        
0: 	                        assertEquals(message.getIntProperty("batch-id"), batchId);
0: 	                        assertEquals(message.getIntProperty("msg-id"), msgId);
0: 	                    } else {
0: 	                        if( message==null ) {
0: 	                            System.out.println("At end of batch an don't have a next batch to process.  done.");
0: 		                        return;
1: 	                        }
0: 	                        assertEquals(msgId, message.getIntProperty("msg-id") );
0: 	                        batchId = message.getIntProperty("batch-id");
0: //	    				    System.out.println("Receiving batch: "+workerId+" "+batchId);
1: 	                    }	     
1: 	                    
1:                     } 
1:                     session.commit();
1:                     consumedBatches.incrementAndGet();
0: //				    System.out.println("Commited receive batch: "+workerId+" "+batchId);
1:                 }
0: 			} catch (JMSException e) {
0: 			    if( !ignoreJMSErrors.get() ) {
1: 				    e.printStackTrace();
0: 				    errors.add(e);
1: 			    }
0: 				return;
1: 			} catch (Throwable e) {
1: 			    e.printStackTrace();
0: 			    errors.add(e);
0: 				return;
1:             } finally {
1:                 System.out.println("Consumer exiting.");
1:                 doneLatch.countDown();
1:             }
1:         }
1: 
1:         public boolean waitForExit(long i) throws InterruptedException {
1:             return doneLatch.await(i, TimeUnit.MILLISECONDS);
1:         }
1:     }
1:     
1:     /**
1:      * @see junit.framework.TestCase#setUp()
1:      */
1:     protected void setUp() throws Exception {
1:         factory = new ActiveMQConnectionFactory("tcp://localhost:61616");
1:         this.target = new ActiveMQQueue(getClass().getName());
1:     }
1: 
1:     protected void tearDown() throws Exception {
0:         if( connection!=null ) {
0:             try { connection.close(); } catch (Throwable ignore) {}
1:             connection = null;
1:         }
1:     }
1:     
1:     /**
1:      * @throws InterruptedException
1:      * @throws JMSException
1:      * @throws JMSException
0:      * 
1:      */
1:     private void reconnect() throws InterruptedException, JMSException {
0:         if( connection!=null ) {
0:             try { connection.close(); } catch (Throwable ignore) {}
1:             connection = null;
1:         }
1:         
0:         long reconnectDelay=1000;
0:         JMSException lastError=null;
1:         
0:         while( connection == null) {
0:             if( reconnectDelay > 1000*10 ) {
0:                 reconnectDelay = 1000*10;
1:             }
1: 	        try {
0: 	            connection = factory.createConnection();
0: 	            connection.start();
0: 	        } catch (JMSException e) {
0:                 lastError = e;
0: 	            Thread.sleep(reconnectDelay);
0: 	            reconnectDelay*=2;
1: 	        }
1:         }
1:     }
1: 
1:     /**
0:      * @throws Throwable
1:      * @throws IOException
0:      * 
1:      */
1:     public void testAcidTransactions() throws Throwable {
1: 
0:         System.out.println("Client threads write records using: Record Size: " + recordSize + ", Batch Size: "
0:                 + batchSize + ", Worker Think Time: " + workerThinkTime);
1: 
1:         // Create the record and fill it with some values.
1:         data = new byte[recordSize];
1:         for (int i = 0; i < data.length; i++) {
0:             data[i] = (byte) i;
1:         }
1: 
1:         System.out.println("==============================================");
1:         System.out.println("===> Start the server now.");
1:         System.out.println("==============================================");
1:         reconnect();
1:         
1:         System.out.println("Starting " + workerCount + " Workers...");
0:         ArrayList workers = new ArrayList();
0:         for( int i=0; i< workerCount; i++ ){        
0:             String workerId = "worker-"+i;
1:             
0:             Worker w = new ConsumerWorker(connection.createSession(true,Session.SESSION_TRANSACTED), workerId, 1000*5);
1:             workers.add(w);
0:             new Thread(w,"Consumer:"+workerId).start();
1: 
0:             w = new ProducerWorker(connection.createSession(true,Session.SESSION_TRANSACTED), workerId);
1:             workers.add(w);
0:             new Thread(w,"Producer:"+workerId).start();
1:         }        
1: 
0:         System.out.println("Waiting for "+(workerCount*10)+" batches to be delivered.");
1: 
1:         //
0:         // Wait for about 5 batches of messages per worker to be consumed before restart. 
1:         // 
0:         while( publishedBatches.get() <  workerCount*5) {
0:             System.out.println("Stats: Produced Batches: "+this.publishedBatches.get()+", Consumed Batches: "+this.consumedBatches.get());
1:             Thread.sleep(1000);
1:         }
1:         
1:         System.out.println("==============================================");
1:         System.out.println("===> Server is under load now.  Kill it!");
1:         System.out.println("==============================================");
1:         ignoreJMSErrors.set(true);
1: 
1:         // Wait for all the workers to finish.
1:         System.out.println("Waiting for all workers to exit due to server shutdown.");
0:         for (Iterator iter = workers.iterator(); iter.hasNext();) {
0:             Worker worker = (Worker) iter.next();
0:             while( !worker.waitForExit(1000) ) {
1:                 System.out.println("==============================================");
1:                 System.out.println("===> Server is under load now.  Kill it!");
1:                 System.out.println("==============================================");                
0:                 System.out.println("Stats: Produced Batches: "+this.publishedBatches.get()+", Consumed Batches: "+this.consumedBatches.get());            
1:             }
1:         }
1:         workers.clear();
1:         
0:         // No errors should have occured so far.
0:         if( errors.size()>0 )
0:             throw (Throwable) errors.get(0);
1:         
1:         System.out.println("==============================================");
1:         System.out.println("===> Start the server now.");
1:         System.out.println("==============================================");
1:         reconnect();
1: 
1:         System.out.println("Restarted.");
1:         
0:         // Validate the all transactions were commited as a uow.  Looking for partial commits.
0:         for( int i=0; i< workerCount; i++ ){
0:             String workerId = "worker-"+i;
0:             Worker w = new ConsumerWorker(connection.createSession(true,Session.SESSION_TRANSACTED), workerId, 5*1000);
1:             workers.add(w);
0:             new Thread(w, "Consumer:"+workerId).start();
1:         }
1: 
1:         System.out.println("Waiting for restarted consumers to finish consuming all messages..");
0:         for (Iterator iter = workers.iterator(); iter.hasNext();) {
0:             Worker worker = (Worker) iter.next();
0:             while( !worker.waitForExit(1000*5) ) {
1:                 System.out.println("Waiting for restarted consumers to finish consuming all messages..");
0:                 System.out.println("Stats: Produced Batches: "+this.publishedBatches.get()+", Consumed Batches: "+this.consumedBatches.get());            
1:             }
1:         }
1:         workers.clear();
1: 
1:         System.out.println("Workers finished..");
0:         System.out.println("Stats: Produced Batches: "+this.publishedBatches.get()+", Consumed Batches: "+this.consumedBatches.get());                    
1:         
0:         if( errors.size()>0 )
0:             throw (Throwable) errors.get(0);
1:         
1:     }
1:     
1:     public static void main(String[] args) {
1:         try {
1:             AcidTestTool tool = new AcidTestTool();
1:             tool.setUp();
1:             tool.testAcidTransactions();
1:             tool.tearDown();
1:         } catch (Throwable e) {
0:             System.out.println("Test Failed: "+e.getMessage());
1:             e.printStackTrace();
1:         }
1:     }
1: }
============================================================================