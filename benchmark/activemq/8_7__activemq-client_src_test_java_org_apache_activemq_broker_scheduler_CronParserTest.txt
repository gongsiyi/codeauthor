1:e3154c3: /**
1:e3154c3:  * Licensed to the Apache Software Foundation (ASF) under one or more
1:e3154c3:  * contributor license agreements.  See the NOTICE file distributed with
1:e3154c3:  * this work for additional information regarding copyright ownership.
1:e3154c3:  * The ASF licenses this file to You under the Apache License, Version 2.0
1:e3154c3:  * (the "License"); you may not use this file except in compliance with
1:e3154c3:  * the License.  You may obtain a copy of the License at
1:e3154c3:  *
1:e3154c3:  *      http://www.apache.org/licenses/LICENSE-2.0
1:e3154c3:  *
1:e3154c3:  * Unless required by applicable law or agreed to in writing, software
1:e3154c3:  * distributed under the License is distributed on an "AS IS" BASIS,
1:e3154c3:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:e3154c3:  * See the License for the specific language governing permissions and
1:e3154c3:  * limitations under the License.
1:e3154c3:  */
1:e3154c3: package org.apache.activemq.broker.scheduler;
1:74a4550: 
1:e3154c3: import static org.junit.Assert.assertEquals;
1:74a4550: 
1:e3154c3: import static org.junit.Assert.fail;
1:e0c678e: 
1:051e2b7: import java.time.*;
1:363a1cf: import java.util.Calendar;
1:e3154c3: import java.util.List;
1:e3154c3: import javax.jms.MessageFormatException;
1:e3154c3: import org.junit.Test;
1:3d61acf: import org.slf4j.Logger;
1:3d61acf: import org.slf4j.LoggerFactory;
3:e0c678e: 
1:e3154c3: public class CronParserTest {
1:e0c678e: 
1:3d61acf:     private static final Logger LOG = LoggerFactory.getLogger(CronParserTest.class);
1:3d61acf: 
1:e3154c3:     @Test
1:e0c678e:     public void testgetNextTimeDayOfWeek() throws MessageFormatException {
1:74a4550: 
1:74a4550:         // using an absolute date so that result will be absolute - Monday 15 Nov 2010
1:e0c678e:         Calendar current = Calendar.getInstance();
1:e0c678e:         current.set(2010, Calendar.NOVEMBER, 15, 9, 15, 30);
1:3d61acf:         LOG.debug("start:" + current.getTime());
1:74a4550: 
1:e0c678e:         String test = "* * * * 5";
1:e0c678e:         long next = CronParser.getNextScheduledTime(test, current.getTimeInMillis());
1:74a4550: 
1:e0c678e:         Calendar result = Calendar.getInstance();
1:e0c678e:         result.setTimeInMillis(next);
1:3d61acf:         LOG.debug("next:" + result.getTime());
1:74a4550: 
1:3d61acf:         assertEquals(0,result.get(Calendar.SECOND));
1:3d61acf:         assertEquals(0,result.get(Calendar.MINUTE));
1:3d61acf:         assertEquals(0,result.get(Calendar.HOUR));
1:e0c678e:         // expecting Friday 19th
1:e0c678e:         assertEquals(19,result.get(Calendar.DAY_OF_MONTH));
1:e0c678e:         assertEquals(Calendar.NOVEMBER,result.get(Calendar.MONTH));
1:e0c678e:         assertEquals(2010,result.get(Calendar.YEAR));
1:e0c678e:     }
1:74a4550: 
1:74a4550:     @Test
1:3d61acf:     public void testgetNextTimeDayOfWeekVariant() throws MessageFormatException {
1:74a4550: 
1:3d61acf:         // using an absolute date so that result will be absolute - Monday 7 March 2011
1:74a4550:         Calendar current = Calendar.getInstance();
1:74a4550:         current.set(2011, Calendar.MARCH, 7, 9, 15, 30);
1:3d61acf:         LOG.debug("start:" + current.getTime());
1:74a4550: 
1:74a4550:         String test = "50 20 * * 5";
1:74a4550:         long next = CronParser.getNextScheduledTime(test, current.getTimeInMillis());
1:74a4550: 
1:74a4550:         Calendar result = Calendar.getInstance();
1:74a4550:         result.setTimeInMillis(next);
1:3d61acf:         LOG.debug("next:" + result.getTime());
1:74a4550: 
1:3d61acf:         assertEquals(0,result.get(Calendar.SECOND));
1:74a4550:         assertEquals(50,result.get(Calendar.MINUTE));
1:74a4550:         assertEquals(20,result.get(Calendar.HOUR_OF_DAY));
1:74a4550:         // expecting Friday 11th
1:74a4550:         assertEquals(11,result.get(Calendar.DAY_OF_MONTH));
1:74a4550:         assertEquals(Calendar.FRIDAY,result.get(Calendar.DAY_OF_WEEK));
1:74a4550:         assertEquals(Calendar.MARCH,result.get(Calendar.MONTH));
1:74a4550:         assertEquals(2011,result.get(Calendar.YEAR));
1:3d61acf: 
1:3d61acf:         // Match to the day of week, but to late to run, should just a week forward.
1:3d61acf:         current = Calendar.getInstance();
1:3d61acf:         current.set(2011, Calendar.MARCH, 11, 22, 0, 30);
1:3d61acf:         LOG.debug("update:" + current.getTime());
1:3d61acf: 
1:3d61acf:         next = CronParser.getNextScheduledTime(test, current.getTimeInMillis());
1:3d61acf: 
1:3d61acf:         result = Calendar.getInstance();
1:3d61acf:         result.setTimeInMillis(next);
1:3d61acf:         LOG.debug("next:" + result.getTime());
1:3d61acf: 
1:3d61acf:         //assertEquals(0,result.get(Calendar.SECOND));
1:3d61acf:         assertEquals(50,result.get(Calendar.MINUTE));
1:3d61acf:         assertEquals(20,result.get(Calendar.HOUR_OF_DAY));
1:3d61acf:         // expecting Friday 18th
1:3d61acf:         assertEquals(18,result.get(Calendar.DAY_OF_MONTH));
1:3d61acf:         assertEquals(Calendar.FRIDAY,result.get(Calendar.DAY_OF_WEEK));
1:3d61acf:         assertEquals(Calendar.MARCH,result.get(Calendar.MONTH));
1:3d61acf:         assertEquals(2011,result.get(Calendar.YEAR));
1:3d61acf:     }
1:3d61acf: 
1:3d61acf:     @Test
1:3d61acf:     public void testgetNextTimeMonthVariant() throws MessageFormatException {
1:3d61acf: 
1:3d61acf:         // using an absolute date so that result will be absolute - Monday 7 March 2011
1:3d61acf:         Calendar current = Calendar.getInstance();
1:3d61acf:         current.set(2011, Calendar.MARCH, 7, 9, 15, 30);
1:3d61acf:         LOG.debug("start:" + current.getTime());
1:3d61acf: 
1:3d61acf:         String test = "0 20 * 4,5 0";
1:3d61acf:         long next = CronParser.getNextScheduledTime(test, current.getTimeInMillis());
1:3d61acf: 
1:3d61acf:         Calendar result = Calendar.getInstance();
1:3d61acf:         result.setTimeInMillis(next);
1:3d61acf:         LOG.debug("next:" + result.getTime());
1:3d61acf: 
1:3d61acf:         assertEquals(0,result.get(Calendar.SECOND));
1:3d61acf:         assertEquals(0,result.get(Calendar.MINUTE));
1:3d61acf:         assertEquals(20,result.get(Calendar.HOUR_OF_DAY));
1:3d61acf:         // expecting Sunday 3rd of April
1:3d61acf:         assertEquals(Calendar.APRIL,result.get(Calendar.MONTH));
1:3d61acf:         assertEquals(3,result.get(Calendar.DAY_OF_MONTH));
1:3d61acf:         assertEquals(Calendar.SUNDAY,result.get(Calendar.DAY_OF_WEEK));
1:3d61acf:         assertEquals(2011,result.get(Calendar.YEAR));
1:3d61acf: 
1:3d61acf:         current = Calendar.getInstance();
1:3d61acf:         current.set(2011, Calendar.APRIL, 30, 22, 0, 30);
1:3d61acf:         LOG.debug("update:" + current.getTime());
1:3d61acf: 
1:3d61acf:         next = CronParser.getNextScheduledTime(test, current.getTimeInMillis());
1:3d61acf: 
1:3d61acf:         result = Calendar.getInstance();
1:3d61acf:         result.setTimeInMillis(next);
1:3d61acf:         LOG.debug("next:" + result.getTime());
1:3d61acf: 
1:3d61acf:         assertEquals(0,result.get(Calendar.SECOND));
1:3d61acf:         assertEquals(0,result.get(Calendar.MINUTE));
1:3d61acf:         assertEquals(20,result.get(Calendar.HOUR_OF_DAY));
1:3d61acf:         // expecting Sunday 1st of May
1:3d61acf:         assertEquals(1,result.get(Calendar.DAY_OF_MONTH));
1:3d61acf:         assertEquals(Calendar.SUNDAY,result.get(Calendar.DAY_OF_WEEK));
1:3d61acf:         assertEquals(Calendar.MAY,result.get(Calendar.MONTH));
1:3d61acf:         assertEquals(2011,result.get(Calendar.YEAR));
1:3d61acf: 
1:3d61acf:         // Move past last time and see if reschedule to next year works.
1:3d61acf:         current = Calendar.getInstance();
1:3d61acf:         current.set(2011, Calendar.MAY, 30, 22, 0, 30);
1:3d61acf:         LOG.debug("update:" + current.getTime());
1:3d61acf: 
1:3d61acf:         next = CronParser.getNextScheduledTime(test, current.getTimeInMillis());
1:3d61acf: 
1:3d61acf:         result = Calendar.getInstance();
1:3d61acf:         result.setTimeInMillis(next);
1:3d61acf:         LOG.debug("next:" + result.getTime());
1:3d61acf: 
1:3d61acf:         assertEquals(0,result.get(Calendar.SECOND));
1:3d61acf:         assertEquals(0,result.get(Calendar.MINUTE));
1:3d61acf:         assertEquals(20,result.get(Calendar.HOUR_OF_DAY));
1:3d61acf:         // expecting Sunday 1st of April - 2012
1:3d61acf:         assertEquals(1,result.get(Calendar.DAY_OF_MONTH));
1:3d61acf:         assertEquals(Calendar.SUNDAY,result.get(Calendar.DAY_OF_WEEK));
1:3d61acf:         assertEquals(Calendar.APRIL,result.get(Calendar.MONTH));
1:3d61acf:         assertEquals(2012,result.get(Calendar.YEAR));
1:74a4550:     }
1:74a4550: 
1:e0c678e:     @Test
1:e0c678e:     public void testgetNextTimeMonth() throws MessageFormatException {
1:74a4550: 
2:e0c678e:         // using an absolute date so that result will be absolute - Monday 15 Nov 2010
1:e0c678e:         Calendar current = Calendar.getInstance();
1:e0c678e:         current.set(2010, Calendar.NOVEMBER, 15, 9, 15, 30);
1:3d61acf:         LOG.debug("start:" + current.getTime());
1:74a4550: 
1:e0c678e:         String test = "* * * 12 *";
1:e0c678e:         long next = CronParser.getNextScheduledTime(test, current.getTimeInMillis());
1:74a4550: 
1:e0c678e:         Calendar result = Calendar.getInstance();
1:e0c678e:         result.setTimeInMillis(next);
1:3d61acf:         LOG.debug("next:" + result.getTime());
1:74a4550: 
1:3d61acf:         assertEquals(0,result.get(Calendar.SECOND));
1:3d61acf:         assertEquals(0,result.get(Calendar.MINUTE));
1:3d61acf:         assertEquals(0,result.get(Calendar.HOUR_OF_DAY));
1:3d61acf:         assertEquals(1,result.get(Calendar.DAY_OF_MONTH));
1:e0c678e:         assertEquals(Calendar.DECEMBER,result.get(Calendar.MONTH));
1:e0c678e:         assertEquals(2010,result.get(Calendar.YEAR));
1:e0c678e:     }
1:74a4550: 
1:e0c678e:     @Test
1:7738e86:     public void testgetStartNextMonth() throws MessageFormatException {
1:7738e86: 
1:7738e86:         // using an absolute date so that result will be absolute - Wednesday 15 Dec 2010
1:7738e86:         Calendar current = Calendar.getInstance();
1:7738e86:         current.set(2010, Calendar.DECEMBER, 15, 9, 15, 30);
1:7738e86:         LOG.debug("start:" + current.getTime());
1:7738e86: 
1:7738e86:         String test = "* * 1 * *";
1:7738e86:         long next = CronParser.getNextScheduledTime(test, current.getTimeInMillis());
1:7738e86: 
1:7738e86:         Calendar result = Calendar.getInstance();
1:7738e86:         result.setTimeInMillis(next);
1:7738e86:         LOG.debug("next:" + result.getTime());
1:7738e86: 
1:7738e86:         assertEquals(0,result.get(Calendar.SECOND));
1:7738e86:         assertEquals(0,result.get(Calendar.MINUTE));
1:7738e86:         assertEquals(0,result.get(Calendar.HOUR_OF_DAY));
1:7738e86:         assertEquals(1,result.get(Calendar.DAY_OF_MONTH));
1:7738e86:         assertEquals(Calendar.JANUARY,result.get(Calendar.MONTH));
1:7738e86:         assertEquals(2011,result.get(Calendar.YEAR));
1:7738e86:     }
1:7738e86: 
1:7738e86:     @Test
1:7738e86:     public void testgetNextStartCurrMonth() throws MessageFormatException {
1:7738e86: 
1:7738e86:         // using an absolute date so that result will be absolute - Wednesday 15 Dec 2010
1:7738e86:         Calendar current = Calendar.getInstance();
1:7738e86:         current.set(2010, Calendar.DECEMBER, 15, 9, 15, 30);
1:7738e86:         LOG.debug("start:" + current.getTime());
1:7738e86: 
1:7738e86:         String test = "* * 1 12 *";
1:7738e86:         long next = CronParser.getNextScheduledTime(test, current.getTimeInMillis());
1:7738e86: 
1:7738e86:         Calendar result = Calendar.getInstance();
1:7738e86:         result.setTimeInMillis(next);
1:7738e86:         LOG.debug("next:" + result.getTime());
1:7738e86: 
1:7738e86:         assertEquals(0,result.get(Calendar.SECOND));
1:7738e86:         assertEquals(0,result.get(Calendar.MINUTE));
1:7738e86:         assertEquals(0,result.get(Calendar.HOUR_OF_DAY));
1:7738e86:         assertEquals(1,result.get(Calendar.DAY_OF_MONTH));
1:7738e86:         assertEquals(Calendar.DECEMBER,result.get(Calendar.MONTH));
1:7738e86:         assertEquals(2011,result.get(Calendar.YEAR));
1:7738e86:     }
1:7738e86: 
1:7738e86:     @Test
1:e0c678e:     public void testgetNextTimeDays() throws MessageFormatException {
1:74a4550: 
1:e0c678e:         // using an absolute date so that result will be absolute - Monday 15 Nov 2010
1:e0c678e:         Calendar current = Calendar.getInstance();
1:e0c678e:         current.set(2010, Calendar.NOVEMBER, 15, 9, 15, 30);
1:3d61acf:         LOG.debug("start:" + current.getTime());
1:74a4550: 
1:e0c678e:         String test = "* * 16 * *";
1:e0c678e:         long next = CronParser.getNextScheduledTime(test, current.getTimeInMillis());
1:74a4550: 
1:e0c678e:         Calendar result = Calendar.getInstance();
1:e0c678e:         result.setTimeInMillis(next);
1:3d61acf:         LOG.debug("next:" + result.getTime());
1:74a4550: 
1:3d61acf:         assertEquals(0,result.get(Calendar.SECOND));
1:3d61acf:         assertEquals(0,result.get(Calendar.MINUTE));
1:3d61acf:         assertEquals(0,result.get(Calendar.HOUR));
1:e0c678e:         assertEquals(16,result.get(Calendar.DAY_OF_MONTH));
1:e0c678e:         assertEquals(Calendar.NOVEMBER,result.get(Calendar.MONTH));
1:e0c678e:         assertEquals(2010,result.get(Calendar.YEAR));
1:e0c678e:     }
1:74a4550: 
1:e0c678e:     @Test
1:e3154c3:     public void testgetNextTimeMinutes() throws MessageFormatException {
1:e3154c3:         String test = "30 * * * *";
1:e3154c3:         long current = 20*60*1000;
1:363a1cf:         Calendar calender = Calendar.getInstance();
1:363a1cf:         calender.setTimeInMillis(current);
1:60c9d03:         int startHours = calender.get(Calendar.HOUR_OF_DAY);
1:60c9d03:         int startMinutes = calender.get(Calendar.MINUTE);
1:3d61acf:         LOG.debug("start:" + calender.getTime());
1:e3154c3:         long next = CronParser.getNextScheduledTime(test, current);
1:74a4550: 
1:363a1cf:         calender.setTimeInMillis(next);
1:3d61acf:         LOG.debug("next:" + calender.getTime());
1:e3154c3:         long result = next - current;
1:0f445a5:         if (startHours == 20 && startMinutes == 50) {
1:0f445a5:             assertEquals(60*40*1000,result); // allow for 30 min offset timezone
1:60c9d03:         } else {
1:60c9d03:             assertEquals(60*10*1000,result);
1:60c9d03:         }
1:e3154c3:     }
1:74a4550: 
1:e3154c3:     @Test
1:e3154c3:     public void testgetNextTimeHours() throws MessageFormatException {
1:e3154c3:         String test = "* 1 * * *";
1:74a4550: 
1:363a1cf:         Calendar calender = Calendar.getInstance();
1:363a1cf:         calender.set(1972, 2, 2, 17, 10, 0);
1:363a1cf:         long current = calender.getTimeInMillis();
1:e3154c3:         long next = CronParser.getNextScheduledTime(test, current);
1:74a4550: 
1:363a1cf:         calender.setTimeInMillis(next);
1:e3154c3:         long result = next - current;
1:3d61acf:         long expected = 60*1000*60*8 + 60 * 1000;
1:f782fc0:         assertEquals(expected,result);
1:e3154c3:     }
1:e0c678e: 
1:363a1cf:     @Test
1:363a1cf:     public void testgetNextTimeHoursZeroMin() throws MessageFormatException {
1:363a1cf:         String test = "0 1 * * *";
1:74a4550: 
1:363a1cf:         Calendar calender = Calendar.getInstance();
1:363a1cf:         calender.set(1972, 2, 2, 17, 10, 0);
1:363a1cf:         long current = calender.getTimeInMillis();
1:363a1cf:         long next = CronParser.getNextScheduledTime(test, current);
1:e0c678e: 
1:363a1cf:         calender.setTimeInMillis(next);
1:363a1cf:         long result = next - current;
1:363a1cf:         long expected = 60*1000*60*7 + 60*1000*50;
1:363a1cf:         assertEquals(expected,result);
1:363a1cf:     }
1:e0c678e: 
1:e3154c3:     @Test
1:e3154c3:     public void testValidate() {
1:e3154c3:         try {
1:3aaa1e7:             CronParser.validate("30 08 10 06 ? ");
1:3aaa1e7:             CronParser.validate("30 08 ? 06 5 ");
1:3aaa1e7:             CronParser.validate("30 08 ? 06 * ");
1:e3154c3:             CronParser.validate("* * * * * ");
1:e3154c3:             CronParser.validate("* * * * 1-6 ");
1:e3154c3:             CronParser.validate("* * * * 1,2,5 ");
1:e3154c3:             CronParser.validate("*/10 0-4,8-12 * * 1-2,3-6/2 ");
1:e0c678e: 
1:e3154c3:         } catch (Exception e) {
1:e3154c3:             fail("Should be valid ");
1:e3154c3:         }
1:e0c678e: 
1:e3154c3:         try {
1:e3154c3:             CronParser.validate("61 08 10 06 * ");
1:e3154c3:             fail("Should not be valid ");
1:e3154c3:         } catch (Exception e) {
1:e3154c3:         }
1:e3154c3:         try {
1:e3154c3:             CronParser.validate("61 08 06 * ");
1:e3154c3:             fail("Should not be valid ");
1:e3154c3:         } catch (Exception e) {
1:e3154c3:         }
1:e3154c3:     }
1:e0c678e: 
1:e3154c3:     @Test
1:e3154c3:     public void testGetNextCommaSeparated() throws MessageFormatException {
1:e3154c3:         String token = "3,5,7";
1:e3154c3:         // test minimum values
1:051e2b7:         int next = CronParser.getNext(createEntry(token, 1, 10), 3, null);
1:e3154c3:         assertEquals(2, next);
1:051e2b7:         next = CronParser.getNext(createEntry(token, 1, 10), 8, null);
1:e3154c3:         assertEquals(4, next);
1:051e2b7:         next = CronParser.getNext(createEntry(token, 1, 10), 1, null);
1:e3154c3:         assertEquals(2, next);
1:e3154c3:     }
1:e0c678e: 
1:e3154c3:     @Test
1:e3154c3:     public void testGetNextRange() throws MessageFormatException {
1:e3154c3:         String token = "3-5";
1:e3154c3:         // test minimum values
1:051e2b7:         int next = CronParser.getNext(createEntry(token, 1, 10), 3, null);
1:e3154c3:         assertEquals(1, next);
1:051e2b7:         next = CronParser.getNext(createEntry(token, 1, 10), 5, null);
1:e3154c3:         assertEquals(7, next);
1:051e2b7:         next = CronParser.getNext(createEntry(token, 1, 10), 6, null);
1:e3154c3:         assertEquals(6, next);
1:051e2b7:         next = CronParser.getNext(createEntry(token, 1, 10), 1, null);
1:e3154c3:         assertEquals(2, next);
1:e3154c3:     }
1:e0c678e: 
1:e3154c3:     @Test
1:e3154c3:     public void testGetNextExact() throws MessageFormatException {
1:e3154c3:         String token = "3";
1:051e2b7:         int next = CronParser.getNext(createEntry(token, 0, 10), 2, null);
1:e3154c3:         assertEquals(1, next);
1:051e2b7:         next = CronParser.getNext(createEntry(token, 0, 10), 3, null);
1:e3154c3:         assertEquals(10, next);
1:051e2b7:         next = CronParser.getNext(createEntry(token, 0, 10), 1, null);
1:e3154c3:         assertEquals(2, next);
1:e3154c3:     }
1:e0c678e: 
1:e3154c3:     @Test
1:e3154c3:     public void testTokenize() {
1:e3154c3:         String test = "*/5 * * * *";
1:e3154c3:         List<String> list = CronParser.tokenize(test);
1:e3154c3:         assertEquals(list.size(), 5);
1:e0c678e: 
1:e3154c3:         test = "*/5 * * * * *";
1:e3154c3:         try {
1:e3154c3:             list = CronParser.tokenize(test);
1:e3154c3:             fail("Should have throw an exception");
1:e3154c3:         } catch (Throwable e) {
1:e3154c3:         }
1:e0c678e: 
1:e3154c3:         test = "*/5 * * * *";
1:e3154c3:         try {
1:e3154c3:             list = CronParser.tokenize(test);
1:e3154c3:             fail("Should have throw an exception");
1:e3154c3:         } catch (Throwable e) {
1:e3154c3:         }
1:e0c678e: 
1:e0c678e:         test = "0 1 2 3 4";
1:e0c678e:         list = CronParser.tokenize(test);
1:e0c678e:         assertEquals(list.size(), 5);
1:74a4550: 
1:e0c678e:         assertEquals(list.get(0), "0");
1:e0c678e:         assertEquals(list.get(1), "1");
1:e0c678e:         assertEquals(list.get(2), "2");
1:e0c678e:         assertEquals(list.get(3), "3");
1:e0c678e:         assertEquals(list.get(4), "4");
1:e3154c3:     }
1:74a4550: 
1:051e2b7:     //added tests from https://issues.apache.org/jira/browse/AMQ-6327
1:051e2b7:     @Test
1:051e2b7:     public void testGetNext() throws MessageFormatException {
1:051e2b7:         testGetNextSingle("0 0 1 * *", "2016-04-15T00:00:00", "2016-05-01T00:00:00");
1:051e2b7:         testGetNextSingle("0 0 1,15 * *", "2016-04-15T00:00:00", "2016-05-01T00:00:00");
1:051e2b7:         testGetNextSingle("0 0 1 * *", "2016-05-15T00:00:00", "2016-06-01T00:00:00");
1:051e2b7:         testGetNextSingle("0 0 1,15 * *", "2016-05-15T00:00:00", "2016-06-01T00:00:00");
1:051e2b7:         testGetNextSingle("0 0 1 * *", "2016-06-15T00:00:00", "2016-07-01T00:00:00");
1:051e2b7:         testGetNextSingle("0 0 1,15 * *", "2016-06-15T00:00:00", "2016-07-01T00:00:00");
1:051e2b7:     }
1:051e2b7: 
1:051e2b7:     private void testGetNextSingle(String cronExp, String now, String expected) throws MessageFormatException {
1:051e2b7: 
1:051e2b7:         LocalDateTime nowDate = LocalDateTime.parse(now);
1:051e2b7:         LocalDateTime expDate = LocalDateTime.parse(expected);
1:051e2b7:         long next = CronParser.getNextScheduledTime(cronExp, nowDate.toInstant(OffsetDateTime.now().getOffset()).toEpochMilli());
1:051e2b7: 
1:051e2b7:         assertEquals(expDate, LocalDateTime.ofInstant(Instant.ofEpochMilli(next), ZoneId.systemDefault()));
1:051e2b7:     }
1:051e2b7: 
1:e3154c3:     public void testGetNextScheduledTime() {
1:e3154c3:         fail("Not yet implemented");
1:e3154c3:     }
1:e0c678e: 
1:e3154c3:     CronParser.CronEntry createEntry(String str, int start, int end) {
1:e3154c3:         return new CronParser.CronEntry("test", str, start, end);
1:e3154c3:     }
1:e0c678e: 
1:e3154c3: }
============================================================================
author:Sami Nurminen
-------------------------------------------------------------------------------
commit:051e2b7
/////////////////////////////////////////////////////////////////////////
1: import java.time.*;
/////////////////////////////////////////////////////////////////////////
1:         int next = CronParser.getNext(createEntry(token, 1, 10), 3, null);
1:         next = CronParser.getNext(createEntry(token, 1, 10), 8, null);
1:         next = CronParser.getNext(createEntry(token, 1, 10), 1, null);
/////////////////////////////////////////////////////////////////////////
1:         int next = CronParser.getNext(createEntry(token, 1, 10), 3, null);
1:         next = CronParser.getNext(createEntry(token, 1, 10), 5, null);
1:         next = CronParser.getNext(createEntry(token, 1, 10), 6, null);
1:         next = CronParser.getNext(createEntry(token, 1, 10), 1, null);
1:         int next = CronParser.getNext(createEntry(token, 0, 10), 2, null);
1:         next = CronParser.getNext(createEntry(token, 0, 10), 3, null);
1:         next = CronParser.getNext(createEntry(token, 0, 10), 1, null);
/////////////////////////////////////////////////////////////////////////
1:     //added tests from https://issues.apache.org/jira/browse/AMQ-6327
1:     @Test
1:     public void testGetNext() throws MessageFormatException {
1:         testGetNextSingle("0 0 1 * *", "2016-04-15T00:00:00", "2016-05-01T00:00:00");
1:         testGetNextSingle("0 0 1,15 * *", "2016-04-15T00:00:00", "2016-05-01T00:00:00");
1:         testGetNextSingle("0 0 1 * *", "2016-05-15T00:00:00", "2016-06-01T00:00:00");
1:         testGetNextSingle("0 0 1,15 * *", "2016-05-15T00:00:00", "2016-06-01T00:00:00");
1:         testGetNextSingle("0 0 1 * *", "2016-06-15T00:00:00", "2016-07-01T00:00:00");
1:         testGetNextSingle("0 0 1,15 * *", "2016-06-15T00:00:00", "2016-07-01T00:00:00");
1:     }
1: 
1:     private void testGetNextSingle(String cronExp, String now, String expected) throws MessageFormatException {
1: 
1:         LocalDateTime nowDate = LocalDateTime.parse(now);
1:         LocalDateTime expDate = LocalDateTime.parse(expected);
1:         long next = CronParser.getNextScheduledTime(cronExp, nowDate.toInstant(OffsetDateTime.now().getOffset()).toEpochMilli());
1: 
1:         assertEquals(expDate, LocalDateTime.ofInstant(Instant.ofEpochMilli(next), ZoneId.systemDefault()));
1:     }
1: 
author:Christopher L. Shannon (cshannon)
-------------------------------------------------------------------------------
commit:0f445a5
/////////////////////////////////////////////////////////////////////////
1:         if (startHours == 20 && startMinutes == 50) {
1:             assertEquals(60*40*1000,result); // allow for 30 min offset timezone
author:Matt Warhaftig
-------------------------------------------------------------------------------
commit:7738e86
/////////////////////////////////////////////////////////////////////////
1:     public void testgetStartNextMonth() throws MessageFormatException {
1: 
1:         // using an absolute date so that result will be absolute - Wednesday 15 Dec 2010
1:         Calendar current = Calendar.getInstance();
1:         current.set(2010, Calendar.DECEMBER, 15, 9, 15, 30);
1:         LOG.debug("start:" + current.getTime());
1: 
1:         String test = "* * 1 * *";
1:         long next = CronParser.getNextScheduledTime(test, current.getTimeInMillis());
1: 
1:         Calendar result = Calendar.getInstance();
1:         result.setTimeInMillis(next);
1:         LOG.debug("next:" + result.getTime());
1: 
1:         assertEquals(0,result.get(Calendar.SECOND));
1:         assertEquals(0,result.get(Calendar.MINUTE));
1:         assertEquals(0,result.get(Calendar.HOUR_OF_DAY));
1:         assertEquals(1,result.get(Calendar.DAY_OF_MONTH));
1:         assertEquals(Calendar.JANUARY,result.get(Calendar.MONTH));
1:         assertEquals(2011,result.get(Calendar.YEAR));
1:     }
1: 
1:     @Test
1:     public void testgetNextStartCurrMonth() throws MessageFormatException {
1: 
1:         // using an absolute date so that result will be absolute - Wednesday 15 Dec 2010
1:         Calendar current = Calendar.getInstance();
1:         current.set(2010, Calendar.DECEMBER, 15, 9, 15, 30);
1:         LOG.debug("start:" + current.getTime());
1: 
1:         String test = "* * 1 12 *";
1:         long next = CronParser.getNextScheduledTime(test, current.getTimeInMillis());
1: 
1:         Calendar result = Calendar.getInstance();
1:         result.setTimeInMillis(next);
1:         LOG.debug("next:" + result.getTime());
1: 
1:         assertEquals(0,result.get(Calendar.SECOND));
1:         assertEquals(0,result.get(Calendar.MINUTE));
1:         assertEquals(0,result.get(Calendar.HOUR_OF_DAY));
1:         assertEquals(1,result.get(Calendar.DAY_OF_MONTH));
1:         assertEquals(Calendar.DECEMBER,result.get(Calendar.MONTH));
1:         assertEquals(2011,result.get(Calendar.YEAR));
1:     }
1: 
1:     @Test
author:gtully
-------------------------------------------------------------------------------
commit:60c9d03
/////////////////////////////////////////////////////////////////////////
1:         int startHours = calender.get(Calendar.HOUR_OF_DAY);
1:         int startMinutes = calender.get(Calendar.MINUTE);
0:         if (startHours == 8 && startMinutes == 50) {
0:             assertEquals(60*40*1000,result);
1:         } else {
1:             assertEquals(60*10*1000,result);
1:         }
author:Hiram R. Chirino
-------------------------------------------------------------------------------
commit:9a8f6e4
author:Timothy A. Bish
-------------------------------------------------------------------------------
commit:3aaa1e7
/////////////////////////////////////////////////////////////////////////
1:             CronParser.validate("30 08 10 06 ? ");
1:             CronParser.validate("30 08 ? 06 5 ");
1:             CronParser.validate("30 08 ? 06 * ");
commit:3d61acf
/////////////////////////////////////////////////////////////////////////
1: import org.slf4j.Logger;
1: import org.slf4j.LoggerFactory;
1:     private static final Logger LOG = LoggerFactory.getLogger(CronParserTest.class);
1: 
1:         LOG.debug("start:" + current.getTime());
1:         LOG.debug("next:" + result.getTime());
1:         assertEquals(0,result.get(Calendar.SECOND));
1:         assertEquals(0,result.get(Calendar.MINUTE));
1:         assertEquals(0,result.get(Calendar.HOUR));
/////////////////////////////////////////////////////////////////////////
1:     public void testgetNextTimeDayOfWeekVariant() throws MessageFormatException {
1:         // using an absolute date so that result will be absolute - Monday 7 March 2011
1:         LOG.debug("start:" + current.getTime());
1:         LOG.debug("next:" + result.getTime());
1:         assertEquals(0,result.get(Calendar.SECOND));
/////////////////////////////////////////////////////////////////////////
1: 
1:         // Match to the day of week, but to late to run, should just a week forward.
1:         current = Calendar.getInstance();
1:         current.set(2011, Calendar.MARCH, 11, 22, 0, 30);
1:         LOG.debug("update:" + current.getTime());
1: 
1:         next = CronParser.getNextScheduledTime(test, current.getTimeInMillis());
1: 
1:         result = Calendar.getInstance();
1:         result.setTimeInMillis(next);
1:         LOG.debug("next:" + result.getTime());
1: 
1:         //assertEquals(0,result.get(Calendar.SECOND));
1:         assertEquals(50,result.get(Calendar.MINUTE));
1:         assertEquals(20,result.get(Calendar.HOUR_OF_DAY));
1:         // expecting Friday 18th
1:         assertEquals(18,result.get(Calendar.DAY_OF_MONTH));
1:         assertEquals(Calendar.FRIDAY,result.get(Calendar.DAY_OF_WEEK));
1:         assertEquals(Calendar.MARCH,result.get(Calendar.MONTH));
1:         assertEquals(2011,result.get(Calendar.YEAR));
1:     }
1: 
1:     @Test
1:     public void testgetNextTimeMonthVariant() throws MessageFormatException {
1: 
1:         // using an absolute date so that result will be absolute - Monday 7 March 2011
1:         Calendar current = Calendar.getInstance();
1:         current.set(2011, Calendar.MARCH, 7, 9, 15, 30);
1:         LOG.debug("start:" + current.getTime());
1: 
1:         String test = "0 20 * 4,5 0";
1:         long next = CronParser.getNextScheduledTime(test, current.getTimeInMillis());
1: 
1:         Calendar result = Calendar.getInstance();
1:         result.setTimeInMillis(next);
1:         LOG.debug("next:" + result.getTime());
1: 
1:         assertEquals(0,result.get(Calendar.SECOND));
1:         assertEquals(0,result.get(Calendar.MINUTE));
1:         assertEquals(20,result.get(Calendar.HOUR_OF_DAY));
1:         // expecting Sunday 3rd of April
1:         assertEquals(Calendar.APRIL,result.get(Calendar.MONTH));
1:         assertEquals(3,result.get(Calendar.DAY_OF_MONTH));
1:         assertEquals(Calendar.SUNDAY,result.get(Calendar.DAY_OF_WEEK));
1:         assertEquals(2011,result.get(Calendar.YEAR));
1: 
1:         current = Calendar.getInstance();
1:         current.set(2011, Calendar.APRIL, 30, 22, 0, 30);
1:         LOG.debug("update:" + current.getTime());
1: 
1:         next = CronParser.getNextScheduledTime(test, current.getTimeInMillis());
1: 
1:         result = Calendar.getInstance();
1:         result.setTimeInMillis(next);
1:         LOG.debug("next:" + result.getTime());
1: 
1:         assertEquals(0,result.get(Calendar.SECOND));
1:         assertEquals(0,result.get(Calendar.MINUTE));
1:         assertEquals(20,result.get(Calendar.HOUR_OF_DAY));
1:         // expecting Sunday 1st of May
1:         assertEquals(1,result.get(Calendar.DAY_OF_MONTH));
1:         assertEquals(Calendar.SUNDAY,result.get(Calendar.DAY_OF_WEEK));
1:         assertEquals(Calendar.MAY,result.get(Calendar.MONTH));
1:         assertEquals(2011,result.get(Calendar.YEAR));
1: 
1:         // Move past last time and see if reschedule to next year works.
1:         current = Calendar.getInstance();
1:         current.set(2011, Calendar.MAY, 30, 22, 0, 30);
1:         LOG.debug("update:" + current.getTime());
1: 
1:         next = CronParser.getNextScheduledTime(test, current.getTimeInMillis());
1: 
1:         result = Calendar.getInstance();
1:         result.setTimeInMillis(next);
1:         LOG.debug("next:" + result.getTime());
1: 
1:         assertEquals(0,result.get(Calendar.SECOND));
1:         assertEquals(0,result.get(Calendar.MINUTE));
1:         assertEquals(20,result.get(Calendar.HOUR_OF_DAY));
1:         // expecting Sunday 1st of April - 2012
1:         assertEquals(1,result.get(Calendar.DAY_OF_MONTH));
1:         assertEquals(Calendar.SUNDAY,result.get(Calendar.DAY_OF_WEEK));
1:         assertEquals(Calendar.APRIL,result.get(Calendar.MONTH));
1:         assertEquals(2012,result.get(Calendar.YEAR));
1:         LOG.debug("start:" + current.getTime());
1:         LOG.debug("next:" + result.getTime());
1:         assertEquals(0,result.get(Calendar.SECOND));
1:         assertEquals(0,result.get(Calendar.MINUTE));
1:         assertEquals(0,result.get(Calendar.HOUR_OF_DAY));
1:         assertEquals(1,result.get(Calendar.DAY_OF_MONTH));
/////////////////////////////////////////////////////////////////////////
1:         LOG.debug("start:" + current.getTime());
1:         LOG.debug("next:" + result.getTime());
1:         assertEquals(0,result.get(Calendar.SECOND));
1:         assertEquals(0,result.get(Calendar.MINUTE));
1:         assertEquals(0,result.get(Calendar.HOUR));
/////////////////////////////////////////////////////////////////////////
1:         LOG.debug("start:" + calender.getTime());
1:         LOG.debug("next:" + calender.getTime());
/////////////////////////////////////////////////////////////////////////
1:         long expected = 60*1000*60*8 + 60 * 1000;
/////////////////////////////////////////////////////////////////////////
commit:74a4550
/////////////////////////////////////////////////////////////////////////
1: 
1: 
1: 
1: 
1: 
/////////////////////////////////////////////////////////////////////////
1: 
1:     @Test
0:     public void testgetNextTimeCase1() throws MessageFormatException {
1: 
1: 
1:         // using an absolute date so that result will be absolute - Monday 15 Nov 2010
1:         Calendar current = Calendar.getInstance();
1:         current.set(2011, Calendar.MARCH, 7, 9, 15, 30);
0:         System.out.println("start:" + current.getTime());
1: 
1:         String test = "50 20 * * 5";
1:         long next = CronParser.getNextScheduledTime(test, current.getTimeInMillis());
1: 
1:         Calendar result = Calendar.getInstance();
1:         result.setTimeInMillis(next);
0:         System.out.println("next:" + result.getTime());
1: 
0:         assertEquals(30,result.get(Calendar.SECOND));
1:         assertEquals(50,result.get(Calendar.MINUTE));
1:         assertEquals(20,result.get(Calendar.HOUR_OF_DAY));
1:         // expecting Friday 11th
1:         assertEquals(11,result.get(Calendar.DAY_OF_MONTH));
1:         assertEquals(Calendar.FRIDAY,result.get(Calendar.DAY_OF_WEEK));
1:         assertEquals(Calendar.MARCH,result.get(Calendar.MONTH));
1:         assertEquals(2011,result.get(Calendar.YEAR));
1:     }
1: 
1: 
1: 
1: 
1: 
1: 
/////////////////////////////////////////////////////////////////////////
1: 
/////////////////////////////////////////////////////////////////////////
1: 
1: 
/////////////////////////////////////////////////////////////////////////
1: 
/////////////////////////////////////////////////////////////////////////
1: 
1: 
1: 
1: 
/////////////////////////////////////////////////////////////////////////
1: 
1: 
/////////////////////////////////////////////////////////////////////////
1: 
1: 
commit:e0c678e
/////////////////////////////////////////////////////////////////////////
1: 
/////////////////////////////////////////////////////////////////////////
1:     public void testgetNextTimeDayOfWeek() throws MessageFormatException {
1:         
1:         
1:         // using an absolute date so that result will be absolute - Monday 15 Nov 2010
1:         Calendar current = Calendar.getInstance();
1:         current.set(2010, Calendar.NOVEMBER, 15, 9, 15, 30);
0:         System.out.println("start:" + current.getTime());
1:         
1:         String test = "* * * * 5";
1:         long next = CronParser.getNextScheduledTime(test, current.getTimeInMillis());
1:         
1:         Calendar result = Calendar.getInstance();
1:         result.setTimeInMillis(next);
0:         System.out.println("next:" + result.getTime());
1:         
0:         assertEquals(30,result.get(Calendar.SECOND));
0:         assertEquals(15,result.get(Calendar.MINUTE));
0:         assertEquals(9,result.get(Calendar.HOUR));
1:         // expecting Friday 19th
1:         assertEquals(19,result.get(Calendar.DAY_OF_MONTH));
1:         assertEquals(Calendar.NOVEMBER,result.get(Calendar.MONTH));
1:         assertEquals(2010,result.get(Calendar.YEAR));
1:     }
1:     
1:     @Test
1:     public void testgetNextTimeMonth() throws MessageFormatException {
1:         
1:         
1:         // using an absolute date so that result will be absolute - Monday 15 Nov 2010
1:         Calendar current = Calendar.getInstance();
1:         current.set(2010, Calendar.NOVEMBER, 15, 9, 15, 30);
0:         System.out.println("start:" + current.getTime());
1:         
1:         String test = "* * * 12 *";
1:         long next = CronParser.getNextScheduledTime(test, current.getTimeInMillis());
1:         
1:         Calendar result = Calendar.getInstance();
1:         result.setTimeInMillis(next);
0:         System.out.println("next:" + result.getTime());
1:         
0:         assertEquals(30,result.get(Calendar.SECOND));
0:         assertEquals(15,result.get(Calendar.MINUTE));
0:         assertEquals(9,result.get(Calendar.HOUR));
0:         assertEquals(15,result.get(Calendar.DAY_OF_MONTH));
1:         assertEquals(Calendar.DECEMBER,result.get(Calendar.MONTH));
1:         assertEquals(2010,result.get(Calendar.YEAR));
1:     }
1:     
1:     @Test
1:     public void testgetNextTimeDays() throws MessageFormatException {
1: 
1: 
1:         // using an absolute date so that result will be absolute - Monday 15 Nov 2010
1:         Calendar current = Calendar.getInstance();
1:         current.set(2010, Calendar.NOVEMBER, 15, 9, 15, 30);
0:         System.out.println("start:" + current.getTime());
1:         
1:         String test = "* * 16 * *";
1:         long next = CronParser.getNextScheduledTime(test, current.getTimeInMillis());
1: 
1:         Calendar result = Calendar.getInstance();
1:         result.setTimeInMillis(next);
0:         System.out.println("next:" + result.getTime());
1:         
0:         assertEquals(30,result.get(Calendar.SECOND));
0:         assertEquals(15,result.get(Calendar.MINUTE));
0:         assertEquals(9,result.get(Calendar.HOUR));
1:         assertEquals(16,result.get(Calendar.DAY_OF_MONTH));
1:         assertEquals(Calendar.NOVEMBER,result.get(Calendar.MONTH));
1:         assertEquals(2010,result.get(Calendar.YEAR));
1:     }
1:     
1:     @Test
/////////////////////////////////////////////////////////////////////////
1:         test = "0 1 2 3 4";
1:         list = CronParser.tokenize(test);
1:         assertEquals(list.size(), 5);
0:         
1:         assertEquals(list.get(0), "0");
1:         assertEquals(list.get(1), "1");
1:         assertEquals(list.get(2), "2");
1:         assertEquals(list.get(3), "3");
1:         assertEquals(list.get(4), "4");
0:         
author:Gary Tully
-------------------------------------------------------------------------------
commit:363a1cf
/////////////////////////////////////////////////////////////////////////
0: 
1: import java.util.Calendar;
/////////////////////////////////////////////////////////////////////////
1:         Calendar calender = Calendar.getInstance();
1:         calender.setTimeInMillis(current);
0:         System.out.println("start:" + calender.getTime());
0:         
1:         calender.setTimeInMillis(next);
0:         System.out.println("next:" + calender.getTime());
/////////////////////////////////////////////////////////////////////////
0:         
1:         Calendar calender = Calendar.getInstance();
1:         calender.set(1972, 2, 2, 17, 10, 0);
1:         long current = calender.getTimeInMillis();
0:         
1:         calender.setTimeInMillis(next);
0:         long expected = 60*1000*60*8;
0: 
1:     @Test
1:     public void testgetNextTimeHoursZeroMin() throws MessageFormatException {
1:         String test = "0 1 * * *";
0:         
1:         Calendar calender = Calendar.getInstance();
1:         calender.set(1972, 2, 2, 17, 10, 0);
1:         long current = calender.getTimeInMillis();
1:         long next = CronParser.getNextScheduledTime(test, current);
0:         
1:         calender.setTimeInMillis(next);
1:         long result = next - current;
1:         long expected = 60*1000*60*7 + 60*1000*50;
1:         assertEquals(expected,result);
1:     }
0: 
author:Robert Davies
-------------------------------------------------------------------------------
commit:f782fc0
/////////////////////////////////////////////////////////////////////////
0:         long expected = 60*1000*60*18;
1:         assertEquals(expected,result);
commit:e3154c3
/////////////////////////////////////////////////////////////////////////
1: /**
1:  * Licensed to the Apache Software Foundation (ASF) under one or more
1:  * contributor license agreements.  See the NOTICE file distributed with
1:  * this work for additional information regarding copyright ownership.
1:  * The ASF licenses this file to You under the Apache License, Version 2.0
1:  * (the "License"); you may not use this file except in compliance with
1:  * the License.  You may obtain a copy of the License at
1:  *
1:  *      http://www.apache.org/licenses/LICENSE-2.0
1:  *
1:  * Unless required by applicable law or agreed to in writing, software
1:  * distributed under the License is distributed on an "AS IS" BASIS,
1:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:  * See the License for the specific language governing permissions and
1:  * limitations under the License.
1:  */
1: package org.apache.activemq.broker.scheduler;
0: 
1: import static org.junit.Assert.assertEquals;
1: import static org.junit.Assert.fail;
1: import java.util.List;
1: import javax.jms.MessageFormatException;
1: import org.junit.Test;
0: 
1: public class CronParserTest {
0: 
1:     @Test
1:     public void testgetNextTimeMinutes() throws MessageFormatException {
1:         String test = "30 * * * *";
1:         long current = 20*60*1000;
1:         long next = CronParser.getNextScheduledTime(test, current);
1:         long result = next - current;
0:         assertEquals(60*10*1000,result);
1:     }
0:     
1:     @Test
1:     public void testgetNextTimeHours() throws MessageFormatException {
1:         String test = "* 1 * * *";
0:         long current = 60*1000*60*5;
1:         long next = CronParser.getNextScheduledTime(test, current);
1:         long result = next - current;
0:         assertEquals(60*1000*60*18,result);
1:     }
0:     
1:     @Test
1:     public void testValidate() {
1:         try {
0:             CronParser.validate("30 08 10 06 * ");
1:             CronParser.validate("* * * * * ");
1:             CronParser.validate("* * * * 1-6 ");
1:             CronParser.validate("* * * * 1,2,5 ");
1:             CronParser.validate("*/10 0-4,8-12 * * 1-2,3-6/2 ");
0: 
1:         } catch (Exception e) {
1:             fail("Should be valid ");
1:         }
0: 
1:         try {
1:             CronParser.validate("61 08 10 06 * ");
1:             fail("Should not be valid ");
1:         } catch (Exception e) {
1:         }
1:         try {
1:             CronParser.validate("61 08 06 * ");
1:             fail("Should not be valid ");
1:         } catch (Exception e) {
1:         }
1:     }
0: 
1:     @Test
1:     public void testGetNextCommaSeparated() throws MessageFormatException {
1:         String token = "3,5,7";
1:         // test minimum values
0:         int next = CronParser.getNext(createEntry(token, 1, 10), 3);
1:         assertEquals(2, next);
0:         next = CronParser.getNext(createEntry(token, 1, 10), 8);
1:         assertEquals(4, next);
0:         next = CronParser.getNext(createEntry(token, 1, 10), 1);
1:         assertEquals(2, next);
1:     }
0: 
1:     @Test
1:     public void testGetNextRange() throws MessageFormatException {
1:         String token = "3-5";
1:         // test minimum values
0:         int next = CronParser.getNext(createEntry(token, 1, 10), 3);
1:         assertEquals(1, next);
0:         next = CronParser.getNext(createEntry(token, 1, 10), 5);
1:         assertEquals(7, next);
0:         next = CronParser.getNext(createEntry(token, 1, 10), 6);
1:         assertEquals(6, next);
0:         next = CronParser.getNext(createEntry(token, 1, 10), 1);
1:         assertEquals(2, next);
1:     }
0: 
1:     @Test
1:     public void testGetNextExact() throws MessageFormatException {
1:         String token = "3";
0:         int next = CronParser.getNext(createEntry(token, 0, 10), 2);
1:         assertEquals(1, next);
0:         next = CronParser.getNext(createEntry(token, 0, 10), 3);
1:         assertEquals(10, next);
0:         next = CronParser.getNext(createEntry(token, 0, 10), 1);
1:         assertEquals(2, next);
1:     }
0: 
1:     @Test
1:     public void testTokenize() {
1:         String test = "*/5 * * * *";
1:         List<String> list = CronParser.tokenize(test);
1:         assertEquals(list.size(), 5);
0: 
1:         test = "*/5 * * * * *";
1:         try {
1:             list = CronParser.tokenize(test);
1:             fail("Should have throw an exception");
1:         } catch (Throwable e) {
1:         }
0: 
1:         test = "*/5 * * * *";
1:         try {
1:             list = CronParser.tokenize(test);
1:             fail("Should have throw an exception");
1:         } catch (Throwable e) {
1:         }
0: 
1:     }
0: 
1:     public void testGetNextScheduledTime() {
1:         fail("Not yet implemented");
1:     }
0: 
1:     CronParser.CronEntry createEntry(String str, int start, int end) {
1:         return new CronParser.CronEntry("test", str, start, end);
1:     }
0: 
1: }
============================================================================