1:a677c21: /**
1:57b4941:  * Licensed to the Apache Software Foundation (ASF) under one or more
1:57b4941:  * contributor license agreements.  See the NOTICE file distributed with
1:57b4941:  * this work for additional information regarding copyright ownership.
1:57b4941:  * The ASF licenses this file to You under the Apache License, Version 2.0
1:57b4941:  * (the "License"); you may not use this file except in compliance with
1:57b4941:  * the License.  You may obtain a copy of the License at
1:b0c2a40:  *
1:230a86c:  *      http://www.apache.org/licenses/LICENSE-2.0
5:a677c21:  *
1:a677c21:  * Unless required by applicable law or agreed to in writing, software
1:a677c21:  * distributed under the License is distributed on an "AS IS" BASIS,
1:a677c21:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:a677c21:  * See the License for the specific language governing permissions and
1:a677c21:  * limitations under the License.
1:a677c21:  */
2:a677c21: 
1:a677c21: package org.apache.activemq.usecases;
1:74a7a8b: 
1:a677c21: import javax.jms.Connection;
1:a677c21: import javax.jms.Destination;
1:a677c21: import javax.jms.IllegalStateException;
1:a677c21: import javax.jms.JMSException;
1:a677c21: import javax.jms.Message;
1:a677c21: import javax.jms.MessageConsumer;
1:a677c21: import javax.jms.MessageListener;
1:a677c21: import javax.jms.Session;
1:a677c21: 
1:a677c21: import org.apache.activemq.test.TestSupport;
1:a677c21: 
1:a677c21: /**
1:4743a20:  *
1:a677c21:  */
1:a677c21: public class ChangeSessionDeliveryModeTest extends TestSupport implements MessageListener {
1:a677c21: 
1:a677c21:     /**
1:74a7a8b:      * test following condition- which are defined by JMS Spec 1.1:
1:74a7a8b:      * MessageConsumers cannot use a MessageListener and receive() from the same
1:74a7a8b:      * session
1:4743a20:      *
1:a677c21:      * @throws Exception
1:a677c21:      */
1:a677c21:     public void testDoChangeSessionDeliveryMode() throws Exception {
1:a677c21:         Destination destination = createDestination("foo.bar");
1:a677c21:         Connection connection = createConnection();
1:a677c21:         connection.start();
1:a677c21:         Session consumerSession = connection.createSession(false, Session.AUTO_ACKNOWLEDGE);
1:a677c21:         MessageConsumer consumer1 = consumerSession.createConsumer(destination);
1:a677c21:         consumer1.setMessageListener(this);
1:a677c21:         MessageConsumer consumer2 = consumerSession.createConsumer(destination);
1:74a7a8b: 
1:a677c21:         try {
1:a677c21:             consumer2.receive(10);
1:a677c21:             fail("Did not receive expected exception.");
1:74a7a8b:         } catch (JMSException e) {
1:a677c21:             assertTrue(e instanceof IllegalStateException);
3:a677c21:         }
1:a677c21:     }
1:a677c21: 
1:4743a20:     @Override
1:a677c21:     public void onMessage(Message msg) {
1:86cbdfd:     }
1:a677c21: }
============================================================================
author:Hadrian Zbarcea
-------------------------------------------------------------------------------
commit:f9bec8f
author:Timothy A. Bish
-------------------------------------------------------------------------------
commit:4743a20
/////////////////////////////////////////////////////////////////////////
1:  *
/////////////////////////////////////////////////////////////////////////
1:      *
/////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////
1:     @Override
commit:ef24cc9
author:Hiram R. Chirino
-------------------------------------------------------------------------------
commit:b0c2a40
/////////////////////////////////////////////////////////////////////////
1:  * 
commit:74a7a8b
/////////////////////////////////////////////////////////////////////////
1: 
/////////////////////////////////////////////////////////////////////////
1:      * test following condition- which are defined by JMS Spec 1.1:
1:      * MessageConsumers cannot use a MessageListener and receive() from the same
1:      * session
/////////////////////////////////////////////////////////////////////////
1: 
1:         } catch (JMSException e) {
commit:230a86c
/////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////
1:  *      http://www.apache.org/licenses/LICENSE-2.0
commit:86cbdfd
/////////////////////////////////////////////////////////////////////////
1: }
commit:57b4941
/////////////////////////////////////////////////////////////////////////
1:  * Licensed to the Apache Software Foundation (ASF) under one or more
1:  * contributor license agreements.  See the NOTICE file distributed with
1:  * this work for additional information regarding copyright ownership.
1:  * The ASF licenses this file to You under the Apache License, Version 2.0
1:  * (the "License"); you may not use this file except in compliance with
1:  * the License.  You may obtain a copy of the License at
author:James Strachan
-------------------------------------------------------------------------------
commit:a677c21
/////////////////////////////////////////////////////////////////////////
1: /**
1:  *
0:  * Copyright 2005-2006 The Apache Software Foundation
1:  *
0:  * Licensed under the Apache License, Version 2.0 (the "License");
0:  * you may not use this file except in compliance with the License.
0:  * You may obtain a copy of the License at
1:  *
0:  * http://www.apache.org/licenses/LICENSE-2.0
1:  *
1:  * Unless required by applicable law or agreed to in writing, software
1:  * distributed under the License is distributed on an "AS IS" BASIS,
1:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:  * See the License for the specific language governing permissions and
1:  * limitations under the License.
1:  */
1: 
1: package org.apache.activemq.usecases;
1: import javax.jms.Connection;
1: import javax.jms.Destination;
1: import javax.jms.IllegalStateException;
1: import javax.jms.JMSException;
1: import javax.jms.Message;
1: import javax.jms.MessageConsumer;
1: import javax.jms.MessageListener;
1: import javax.jms.Session;
1: 
1: import org.apache.activemq.test.TestSupport;
1: 
1: /**
0:  * @version $Revision: 1.1.1.1 $
1:  */
1: public class ChangeSessionDeliveryModeTest extends TestSupport implements MessageListener {
1: 
1:     /**
0:      * test following condition- which are defined by JMS Spec 1.1: MessageConsumers cannot use a MessageListener and
0:      * receive() from the same session
1:      * 
1:      * @throws Exception
1:      */
1:     public void testDoChangeSessionDeliveryMode() throws Exception {
1:         Destination destination = createDestination("foo.bar");
1:         Connection connection = createConnection();
1:         connection.start();
1:         Session consumerSession = connection.createSession(false, Session.AUTO_ACKNOWLEDGE);
1:         MessageConsumer consumer1 = consumerSession.createConsumer(destination);
1:         consumer1.setMessageListener(this);
0:         JMSException jmsEx = null;
1:         MessageConsumer consumer2 = consumerSession.createConsumer(destination);
1:         
1:         try {
1:             consumer2.receive(10);
1:             fail("Did not receive expected exception.");
1:         }
0:         catch (JMSException e) {
1:             assertTrue(e instanceof IllegalStateException);
1:         }
1:     }
1: 
1:     public void onMessage(Message msg) {
1:     }
1: }
============================================================================