1:d29ca2a: /**
1:57b4941:  * Licensed to the Apache Software Foundation (ASF) under one or more
1:57b4941:  * contributor license agreements.  See the NOTICE file distributed with
1:57b4941:  * this work for additional information regarding copyright ownership.
1:57b4941:  * The ASF licenses this file to You under the Apache License, Version 2.0
1:57b4941:  * (the "License"); you may not use this file except in compliance with
1:57b4941:  * the License.  You may obtain a copy of the License at
3:d29ca2a:  *
1:230a86c:  *      http://www.apache.org/licenses/LICENSE-2.0
1:d29ca2a:  *
1:d29ca2a:  * Unless required by applicable law or agreed to in writing, software
1:d29ca2a:  * distributed under the License is distributed on an "AS IS" BASIS,
1:d29ca2a:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:d29ca2a:  * See the License for the specific language governing permissions and
1:d29ca2a:  * limitations under the License.
1:d29ca2a:  */
1:d29ca2a: package org.apache.activemq.transaction;
9:d29ca2a: 
1:d29ca2a: import java.io.IOException;
1:d29ca2a: import javax.transaction.xa.XAException;
1:d29ca2a: import org.apache.activemq.broker.ConnectionContext;
1:d29ca2a: import org.apache.activemq.command.LocalTransactionId;
1:d29ca2a: import org.apache.activemq.command.TransactionId;
1:d29ca2a: import org.apache.activemq.store.TransactionStore;
1:8bf987b: import org.slf4j.Logger;
1:8bf987b: import org.slf4j.LoggerFactory;
1:d29ca2a: 
1:d29ca2a: /**
1:b0c2a40:  * 
1:d29ca2a:  */
1:d29ca2a: public class LocalTransaction extends Transaction {
1:74a7a8b: 
1:8bf987b:     private static final Logger LOG = LoggerFactory.getLogger(LocalTransaction.class);
1:74a7a8b: 
1:d29ca2a:     private final TransactionStore transactionStore;
1:d29ca2a:     private final LocalTransactionId xid;
1:d29ca2a:     private final ConnectionContext context;
1:d29ca2a: 
1:d29ca2a:     public LocalTransaction(TransactionStore transactionStore, LocalTransactionId xid, ConnectionContext context) {
1:d29ca2a:         this.transactionStore = transactionStore;
1:d29ca2a:         this.xid = xid;
1:d29ca2a:         this.context = context;
6:d29ca2a:     }
1:d29ca2a: 
1:27262c8:     @Override
1:d29ca2a:     public void commit(boolean onePhase) throws XAException, IOException {
1:e45bb06:         if (LOG.isDebugEnabled()) {
1:e45bb06:             LOG.debug("commit: "  + xid
1:e45bb06:                     + " syncCount: " + size());
1:e45bb06:         }
1:e45bb06:         
1:d29ca2a:         // Get ready for commit.
3:d29ca2a:         try {
1:d29ca2a:             prePrepare();
1:74a7a8b:         } catch (XAException e) {
1:d29ca2a:             throw e;
1:74a7a8b:         } catch (Throwable e) {
1:fc00993:             LOG.warn("COMMIT FAILED: ", e);
1:d29ca2a:             rollback();
1:d29ca2a:             // Let them know we rolled back.
1:13bbe52:             XAException xae = new XAException("COMMIT FAILED: Transaction rolled back");
1:d29ca2a:             xae.errorCode = XAException.XA_RBOTHER;
3:d29ca2a:             xae.initCause(e);
3:d29ca2a:             throw xae;
1:d29ca2a:         }
1:d29ca2a: 
1:d29ca2a:         setState(Transaction.FINISHED_STATE);
1:d29ca2a:         context.getTransactions().remove(xid);
1:9eb93f1:         try {
1:13bbe52:             transactionStore.commit(getTransactionId(), false, preCommitTask, postCommitTask);
1:9eb93f1:             this.waitPostCommitDone(postCommitTask);
1:9eb93f1:         } catch (Throwable t) {
1:9eb93f1:             LOG.warn("Store COMMIT FAILED: ", t);
1:9eb93f1:             rollback();
1:13bbe52:             XAException xae = new XAException("STORE COMMIT FAILED: Transaction rolled back");
1:9eb93f1:             xae.errorCode = XAException.XA_RBOTHER;
1:9eb93f1:             xae.initCause(t);
1:9eb93f1:             throw xae;
1:9eb93f1:         }
1:d29ca2a:     }
1:74a7a8b: 
1:27262c8:     @Override
1:d29ca2a:     public void rollback() throws XAException, IOException {
1:d29ca2a: 
1:e45bb06:         if (LOG.isDebugEnabled()) {
1:e45bb06:             LOG.debug("rollback: "  + xid
1:e45bb06:                     + " syncCount: " + size());
1:e45bb06:         }
1:d29ca2a:         setState(Transaction.FINISHED_STATE);
1:d29ca2a:         context.getTransactions().remove(xid);
1:6d44ae6:         transactionStore.rollback(getTransactionId());
1:6d44ae6:         try {
1:6d44ae6:             fireAfterRollback();
1:6d44ae6:         } catch (Throwable e) {
1:6d44ae6:             LOG.warn("POST ROLLBACK FAILED: ", e);
1:6d44ae6:             XAException xae = new XAException("POST ROLLBACK FAILED");
1:6d44ae6:             xae.errorCode = XAException.XAER_RMERR;
1:6d44ae6:             xae.initCause(e);
1:6d44ae6:             throw xae;
1:d29ca2a:         }
1:d29ca2a:     }
1:d29ca2a: 
1:27262c8:     @Override
1:d29ca2a:     public int prepare() throws XAException {
1:13bbe52:         XAException xae = new XAException("Prepare not implemented on Local Transactions");
3:d29ca2a:         xae.errorCode = XAException.XAER_RMERR;
1:d29ca2a:         throw xae;
1:d29ca2a:     }
1:d29ca2a: 
1:27262c8:     @Override
1:d29ca2a:     public TransactionId getTransactionId() {
1:d29ca2a:         return xid;
1:d29ca2a:     }
1:e1389a6:     
1:e1389a6:     @Override
1:8bf987b:     public Logger getLog() {
1:e1389a6:         return LOG;
1:e1389a6:     }
1:d29ca2a: }
============================================================================
author:Hadrian Zbarcea
-------------------------------------------------------------------------------
commit:d54d046
author:gtully
-------------------------------------------------------------------------------
commit:6d44ae6
/////////////////////////////////////////////////////////////////////////
1:         transactionStore.rollback(getTransactionId());
1:         try {
1:             fireAfterRollback();
1:         } catch (Throwable e) {
1:             LOG.warn("POST ROLLBACK FAILED: ", e);
1:             XAException xae = new XAException("POST ROLLBACK FAILED");
1:             xae.errorCode = XAException.XAER_RMERR;
1:             xae.initCause(e);
1:             throw xae;
author:Gary Tully
-------------------------------------------------------------------------------
commit:13bbe52
/////////////////////////////////////////////////////////////////////////
1:             XAException xae = new XAException("COMMIT FAILED: Transaction rolled back");
/////////////////////////////////////////////////////////////////////////
1:             transactionStore.commit(getTransactionId(), false, preCommitTask, postCommitTask);
1:             XAException xae = new XAException("STORE COMMIT FAILED: Transaction rolled back");
/////////////////////////////////////////////////////////////////////////
1:         XAException xae = new XAException("Prepare not implemented on Local Transactions");
commit:9eb93f1
/////////////////////////////////////////////////////////////////////////
1:         try {
0:             transactionStore.commit(getTransactionId(), false,preCommitTask, postCommitTask);
1:             this.waitPostCommitDone(postCommitTask);
1:         } catch (Throwable t) {
1:             LOG.warn("Store COMMIT FAILED: ", t);
1:             rollback();
0:             XAException xae = new XAException("STORE COMMIT FAILED: Transaction rolled back.");
1:             xae.errorCode = XAException.XA_RBOTHER;
1:             xae.initCause(t);
1:             throw xae;
1:         }
commit:e1389a6
/////////////////////////////////////////////////////////////////////////
0:         transactionStore.commit(getTransactionId(), false, postCommitTask);
0:         this.waitPostCommitDone(postCommitTask);
/////////////////////////////////////////////////////////////////////////
1:     
1:     @Override
0:     public Log getLog() {
1:         return LOG;
1:     }
commit:e45bb06
/////////////////////////////////////////////////////////////////////////
1:         if (LOG.isDebugEnabled()) {
1:             LOG.debug("commit: "  + xid
1:                     + " syncCount: " + size());
1:         }
1:         
/////////////////////////////////////////////////////////////////////////
1:         if (LOG.isDebugEnabled()) {
1:             LOG.debug("rollback: "  + xid
1:                     + " syncCount: " + size());
1:         }
author:Hiram R. Chirino
-------------------------------------------------------------------------------
commit:58aca86
commit:b0c2a40
/////////////////////////////////////////////////////////////////////////
1:  * 
commit:fc00993
/////////////////////////////////////////////////////////////////////////
0:     private static final Log LOG = LogFactory.getLog(LocalTransaction.class);
/////////////////////////////////////////////////////////////////////////
1:             LOG.warn("COMMIT FAILED: ", e);
/////////////////////////////////////////////////////////////////////////
0:             LOG.warn("POST COMMIT FAILED: ", e);
/////////////////////////////////////////////////////////////////////////
0:             LOG.warn("POST ROLLBACK FAILED: ", e);
commit:74a7a8b
/////////////////////////////////////////////////////////////////////////
1: 
1: 
/////////////////////////////////////////////////////////////////////////
1:         } catch (XAException e) {
1:         } catch (Throwable e) {
/////////////////////////////////////////////////////////////////////////
1: 
0:         } catch (Throwable e) {
0:             // I guess this could happen. Post commit task failed
/////////////////////////////////////////////////////////////////////////
0:         } catch (Throwable e) {
commit:230a86c
/////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////
1:  *      http://www.apache.org/licenses/LICENSE-2.0
commit:57b4941
/////////////////////////////////////////////////////////////////////////
1:  * Licensed to the Apache Software Foundation (ASF) under one or more
1:  * contributor license agreements.  See the NOTICE file distributed with
1:  * this work for additional information regarding copyright ownership.
1:  * The ASF licenses this file to You under the Apache License, Version 2.0
1:  * (the "License"); you may not use this file except in compliance with
1:  * the License.  You may obtain a copy of the License at
commit:48b4869
/////////////////////////////////////////////////////////////////////////
0:  * Copyright 2005-2006 The Apache Software Foundation
commit:d29ca2a
/////////////////////////////////////////////////////////////////////////
1: /**
1:  *
0:  * Copyright 2004 The Apache Software Foundation
1:  *
0:  * Licensed under the Apache License, Version 2.0 (the "License");
0:  * you may not use this file except in compliance with the License.
0:  * You may obtain a copy of the License at
1:  *
0:  * http://www.apache.org/licenses/LICENSE-2.0
1:  *
1:  * Unless required by applicable law or agreed to in writing, software
1:  * distributed under the License is distributed on an "AS IS" BASIS,
1:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:  * See the License for the specific language governing permissions and
1:  * limitations under the License.
1:  */
1: package org.apache.activemq.transaction;
1: 
1: import java.io.IOException;
1: 
1: import javax.transaction.xa.XAException;
1: 
1: import org.apache.activemq.broker.ConnectionContext;
1: import org.apache.activemq.command.LocalTransactionId;
1: import org.apache.activemq.command.TransactionId;
1: import org.apache.activemq.store.TransactionStore;
0: import org.apache.commons.logging.Log;
0: import org.apache.commons.logging.LogFactory;
1: 
1: /**
0:  * @version $Revision: 1.3 $
1:  */
1: public class LocalTransaction extends Transaction {
1:     
0:     private static final Log log = LogFactory.getLog(LocalTransaction.class);
1:     
1:     private final TransactionStore transactionStore;
1:     private final LocalTransactionId xid;
1:     private final ConnectionContext context;
1: 
1:     public LocalTransaction(TransactionStore transactionStore, LocalTransactionId xid, ConnectionContext context) {
1:         this.transactionStore = transactionStore;
1:         this.xid = xid;
1:         this.context = context;
1:     }
1: 
1:     public void commit(boolean onePhase) throws XAException, IOException {
1:         // Get ready for commit.
1:         try {
1:             prePrepare();
1:         }
0:         catch (XAException e) {
1:             throw e;
1:         }
0:         catch (Throwable e) {
0:             log.warn("COMMIT FAILED: ", e);
1:             rollback();
1:             // Let them know we rolled back.
0:             XAException xae = new XAException("COMMIT FAILED: Transaction rolled back.");
1:             xae.errorCode = XAException.XA_RBOTHER;
1:             xae.initCause(e);
1:             throw xae;
1:         }
1: 
1:         setState(Transaction.FINISHED_STATE);
1:         context.getTransactions().remove(xid);
0:         transactionStore.commit(getTransactionId(), false);
1:         
1:         try {
0:             fireAfterCommit();
1:         }
0:         catch (Throwable e) {
0:             // I guess this could happen.  Post commit task failed
0:             // to execute properly.
0:             log.warn("POST COMMIT FAILED: ", e);
0:             XAException xae = new XAException("POST COMMIT FAILED");
1:             xae.errorCode = XAException.XAER_RMERR;
1:             xae.initCause(e);
1:             throw xae;
1:         }
1:     }
1: 
1:     public void rollback() throws XAException, IOException {
1: 
1:         setState(Transaction.FINISHED_STATE);
1:         context.getTransactions().remove(xid);
0:         transactionStore.rollback(getTransactionId());
1: 
1:         try {
0:             fireAfterRollback();
1:         }
0:         catch (Throwable e) {
0:             log.warn("POST ROLLBACK FAILED: ", e);
0:             XAException xae = new XAException("POST ROLLBACK FAILED");
1:             xae.errorCode = XAException.XAER_RMERR;
1:             xae.initCause(e);
1:             throw xae;
1:         }
1:     }
1: 
1:     public int prepare() throws XAException {
0:         XAException xae = new XAException("Prepare not implemented on Local Transactions.");
1:         xae.errorCode = XAException.XAER_RMERR;
1:         throw xae;
1:     }
1: 
1:     public TransactionId getTransactionId() {
1:         return xid;
1:     }
1: 
1: }
author:Bosanac Dejan
-------------------------------------------------------------------------------
commit:8bf987b
/////////////////////////////////////////////////////////////////////////
1: import org.slf4j.Logger;
1: import org.slf4j.LoggerFactory;
1:     private static final Logger LOG = LoggerFactory.getLogger(LocalTransaction.class);
/////////////////////////////////////////////////////////////////////////
1:     public Logger getLog() {
commit:5cc101b
/////////////////////////////////////////////////////////////////////////
0:         // Sync on transaction store to avoid out of order messages in the cursor
0:         // https://issues.apache.org/activemq/browse/AMQ-2594
/////////////////////////////////////////////////////////////////////////
0:         // Sync on transaction store to avoid out of order messages in the cursor
0:         // https://issues.apache.org/activemq/browse/AMQ-2594
commit:8183ed5
/////////////////////////////////////////////////////////////////////////
0:         synchronized (transactionStore) {
0:             transactionStore.commit(getTransactionId(), false);
0:             try {
0:                 fireAfterCommit();
0:             } catch (Throwable e) {
0:                 // I guess this could happen. Post commit task failed
0:                 // to execute properly.
0:                 LOG.warn("POST COMMIT FAILED: ", e);
0:                 XAException xae = new XAException("POST COMMIT FAILED");
0:                 xae.errorCode = XAException.XAER_RMERR;
0:                 xae.initCause(e);
0:                 throw xae;
0:             }
/////////////////////////////////////////////////////////////////////////
0:         synchronized (transactionStore) {
0:            transactionStore.rollback(getTransactionId());
0:             try {
0:                 fireAfterRollback();
0:             } catch (Throwable e) {
0:                 LOG.warn("POST ROLLBACK FAILED: ", e);
0:                 XAException xae = new XAException("POST ROLLBACK FAILED");
0:                 xae.errorCode = XAException.XAER_RMERR;
0:                 xae.initCause(e);
0:                 throw xae;
0:             }
author:Robert Davies
-------------------------------------------------------------------------------
commit:27262c8
/////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////
1:     @Override
/////////////////////////////////////////////////////////////////////////
0:         transactionStore.commit(getTransactionId(), false,preCommitTask, postCommitTask);
1:     @Override
/////////////////////////////////////////////////////////////////////////
1:     @Override
1:     @Override
============================================================================