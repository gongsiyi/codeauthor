1:d29ca2a: /**
1:57b4941:  * Licensed to the Apache Software Foundation (ASF) under one or more
1:57b4941:  * contributor license agreements.  See the NOTICE file distributed with
1:57b4941:  * this work for additional information regarding copyright ownership.
1:57b4941:  * The ASF licenses this file to You under the Apache License, Version 2.0
1:57b4941:  * (the "License"); you may not use this file except in compliance with
1:57b4941:  * the License.  You may obtain a copy of the License at
3:d29ca2a:  *
1:230a86c:  *      http://www.apache.org/licenses/LICENSE-2.0
1:d29ca2a:  *
1:d29ca2a:  * Unless required by applicable law or agreed to in writing, software
1:d29ca2a:  * distributed under the License is distributed on an "AS IS" BASIS,
1:d29ca2a:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:d29ca2a:  * See the License for the specific language governing permissions and
1:d29ca2a:  * limitations under the License.
1:d29ca2a:  */
1:d29ca2a: package org.apache.activemq.network;
13:d29ca2a: 
1:d29ca2a: import javax.jms.DeliveryMode;
1:d29ca2a: 
1:230a86c: import junit.framework.Test;
1:41c9366: 
1:d29ca2a: import org.apache.activemq.broker.StubConnection;
1:d29ca2a: import org.apache.activemq.command.ActiveMQDestination;
1:41c9366: import org.apache.activemq.command.ActiveMQMessage;
1:d29ca2a: import org.apache.activemq.command.ConnectionInfo;
1:d29ca2a: import org.apache.activemq.command.ConsumerInfo;
1:d29ca2a: import org.apache.activemq.command.Message;
1:d29ca2a: import org.apache.activemq.command.ProducerInfo;
1:d29ca2a: import org.apache.activemq.command.SessionInfo;
1:d29ca2a: 
1:d29ca2a: public class ForwardingBridgeTest extends NetworkTestSupport {
1:f812e34: 
1:d29ca2a:     public ActiveMQDestination destination;
1:d29ca2a:     public byte destinationType;
1:d29ca2a:     public int deliveryMode;
1:d29ca2a:     private ForwardingBridge bridge;
1:d29ca2a: 
1:41c9366:     public void initCombosForTestForwardMessageCompressed() {
1:41c9366:         addCombinationValues("deliveryMode", new Object[] {new Integer(DeliveryMode.NON_PERSISTENT),
1:41c9366:                                                            new Integer(DeliveryMode.PERSISTENT)});
1:41c9366:         addCombinationValues("destinationType", new Object[] {new Byte(ActiveMQDestination.QUEUE_TYPE),
1:41c9366:                                                               new Byte(ActiveMQDestination.TOPIC_TYPE)});
1:41c9366:     }
1:41c9366: 
1:41c9366:     public void testForwardMessageCompressed() throws Exception {
1:41c9366: 
1:41c9366:         bridge.setUseCompression(true);
1:41c9366: 
1:41c9366:         // Start a producer on local broker
1:41c9366:         StubConnection connection1 = createConnection();
1:41c9366:         ConnectionInfo connectionInfo1 = createConnectionInfo();
1:41c9366:         SessionInfo sessionInfo1 = createSessionInfo(connectionInfo1);
1:41c9366:         ProducerInfo producerInfo = createProducerInfo(sessionInfo1);
1:41c9366:         connection1.send(connectionInfo1);
1:41c9366:         connection1.send(sessionInfo1);
1:41c9366:         connection1.send(producerInfo);
1:41c9366: 
1:41c9366:         destination = createDestinationInfo(connection1, connectionInfo1, destinationType);
1:41c9366: 
1:41c9366:         // Start a consumer on a remote broker
1:41c9366:         StubConnection connection2 = createRemoteConnection();
1:41c9366:         ConnectionInfo connectionInfo2 = createConnectionInfo();
1:41c9366:         SessionInfo sessionInfo2 = createSessionInfo(connectionInfo2);
1:41c9366:         connection2.send(connectionInfo2);
1:41c9366:         connection2.send(sessionInfo2);
1:41c9366:         ConsumerInfo consumerInfo = createConsumerInfo(sessionInfo2, destination);
1:41c9366:         connection2.send(consumerInfo);
1:41c9366:         Thread.sleep(1000);
1:41c9366:         // Give forwarding bridge a chance to finish setting up
1:41c9366:         try {
1:41c9366:             Thread.sleep(1000);
1:41c9366:         } catch (InterruptedException ie) {
1:41c9366:             ie.printStackTrace();
1:41c9366:         }
1:41c9366: 
1:41c9366:         // Send the message to the local boker.
1:41c9366:         connection1.send(createMessage(producerInfo, destination, deliveryMode));
1:41c9366: 
1:41c9366:         // Make sure the message was delivered via the remote.
1:41c9366:         Message m = receiveMessage(connection2);
1:41c9366:         assertNotNull(m);
1:41c9366: 
1:41c9366:         // Make sure its compressed now
1:41c9366:         ActiveMQMessage message = (ActiveMQMessage) m;
1:41c9366:         assertTrue(message.isCompressed());
1:41c9366:     }
1:41c9366: 
1:f812e34:     public void initCombosForTestAddConsumerThenSend() {
1:f812e34:         addCombinationValues("deliveryMode", new Object[] {new Integer(DeliveryMode.NON_PERSISTENT),
1:f812e34:                                                            new Integer(DeliveryMode.PERSISTENT)});
1:f812e34:         addCombinationValues("destinationType", new Object[] {new Byte(ActiveMQDestination.QUEUE_TYPE),
1:933eb2f:                                                               new Byte(ActiveMQDestination.TOPIC_TYPE)});
1:f812e34:     }
1:f812e34: 
1:7f5213b:     public void testAddConsumerThenSend() throws Exception {
1:f812e34:         // Start a producer on local broker
1:d29ca2a:         StubConnection connection1 = createConnection();
1:d29ca2a:         ConnectionInfo connectionInfo1 = createConnectionInfo();
1:f812e34:         SessionInfo sessionInfo1 = createSessionInfo(connectionInfo1);
1:d29ca2a:         ProducerInfo producerInfo = createProducerInfo(sessionInfo1);
1:d29ca2a:         connection1.send(connectionInfo1);
1:d29ca2a:         connection1.send(sessionInfo1);
1:d29ca2a:         connection1.send(producerInfo);
1:f812e34: 
1:d29ca2a:         destination = createDestinationInfo(connection1, connectionInfo1, destinationType);
1:f812e34: 
1:d29ca2a:         // Start a consumer on a remote broker
1:d29ca2a:         StubConnection connection2 = createRemoteConnection();
1:d29ca2a:         ConnectionInfo connectionInfo2 = createConnectionInfo();
1:f812e34:         SessionInfo sessionInfo2 = createSessionInfo(connectionInfo2);
1:d29ca2a:         connection2.send(connectionInfo2);
1:d29ca2a:         connection2.send(sessionInfo2);
1:f812e34:         ConsumerInfo consumerInfo = createConsumerInfo(sessionInfo2, destination);
1:d29ca2a:         connection2.send(consumerInfo);
1:3a7c673:         Thread.sleep(1000);
1:3a7c673:         // Give forwarding bridge a chance to finish setting up
1:3a7c673:         try {
1:d29ca2a:             Thread.sleep(1000);
1:3a7c673:         } catch (InterruptedException ie) {
1:3a7c673:             ie.printStackTrace();
1:3a7c673:         }
1:f812e34: 
1:d29ca2a:         // Send the message to the local boker.
1:d29ca2a:         connection1.send(createMessage(producerInfo, destination, deliveryMode));
1:f812e34: 
1:d29ca2a:         // Make sure the message was delivered via the remote.
1:3a7c673: 
1:d29ca2a:         Message m = receiveMessage(connection2);
1:d29ca2a:         assertNotNull(m);
3:d29ca2a:     }
1:d29ca2a: 
1:d29ca2a:     protected void setUp() throws Exception {
1:d29ca2a:         super.setUp();
1:d29ca2a:         bridge = new ForwardingBridge(createTransport(), createRemoteTransport());
1:d29ca2a:         bridge.setClientId("local-remote-bridge");
1:d29ca2a:         bridge.setDispatchAsync(false);
1:f812e34:         bridge.start();
1:d29ca2a:     }
1:f812e34: 
1:d29ca2a:     protected void tearDown() throws Exception {
1:d29ca2a:         bridge.stop();
1:d29ca2a:         super.tearDown();
1:d29ca2a:     }
1:f812e34: 
1:d29ca2a:     public static Test suite() {
1:d29ca2a:         return suite(ForwardingBridgeTest.class);
1:d29ca2a:     }
1:f812e34: 
1:d29ca2a:     public static void main(String[] args) {
1:d29ca2a:         junit.textui.TestRunner.run(suite());
1:d29ca2a:     }
1:d29ca2a: 
1:d29ca2a: }
============================================================================
author:Hadrian Zbarcea
-------------------------------------------------------------------------------
commit:f9bec8f
author:Timothy A. Bish
-------------------------------------------------------------------------------
commit:ef24cc9
commit:41c9366
/////////////////////////////////////////////////////////////////////////
1: 
1: import org.apache.activemq.command.ActiveMQMessage;
/////////////////////////////////////////////////////////////////////////
1:     public void initCombosForTestForwardMessageCompressed() {
1:         addCombinationValues("deliveryMode", new Object[] {new Integer(DeliveryMode.NON_PERSISTENT),
1:                                                            new Integer(DeliveryMode.PERSISTENT)});
1:         addCombinationValues("destinationType", new Object[] {new Byte(ActiveMQDestination.QUEUE_TYPE),
1:                                                               new Byte(ActiveMQDestination.TOPIC_TYPE)});
1:     }
1: 
1:     public void testForwardMessageCompressed() throws Exception {
1: 
1:         bridge.setUseCompression(true);
1: 
1:         // Start a producer on local broker
1:         StubConnection connection1 = createConnection();
1:         ConnectionInfo connectionInfo1 = createConnectionInfo();
1:         SessionInfo sessionInfo1 = createSessionInfo(connectionInfo1);
1:         ProducerInfo producerInfo = createProducerInfo(sessionInfo1);
1:         connection1.send(connectionInfo1);
1:         connection1.send(sessionInfo1);
1:         connection1.send(producerInfo);
1: 
1:         destination = createDestinationInfo(connection1, connectionInfo1, destinationType);
1: 
1:         // Start a consumer on a remote broker
1:         StubConnection connection2 = createRemoteConnection();
1:         ConnectionInfo connectionInfo2 = createConnectionInfo();
1:         SessionInfo sessionInfo2 = createSessionInfo(connectionInfo2);
1:         connection2.send(connectionInfo2);
1:         connection2.send(sessionInfo2);
1:         ConsumerInfo consumerInfo = createConsumerInfo(sessionInfo2, destination);
1:         connection2.send(consumerInfo);
1:         Thread.sleep(1000);
1:         // Give forwarding bridge a chance to finish setting up
1:         try {
1:             Thread.sleep(1000);
1:         } catch (InterruptedException ie) {
1:             ie.printStackTrace();
1:         }
1: 
1:         // Send the message to the local boker.
1:         connection1.send(createMessage(producerInfo, destination, deliveryMode));
1: 
1:         // Make sure the message was delivered via the remote.
1:         Message m = receiveMessage(connection2);
1:         assertNotNull(m);
1: 
1:         // Make sure its compressed now
1:         ActiveMQMessage message = (ActiveMQMessage) m;
1:         assertTrue(message.isCompressed());
1:     }
1: 
author:Hiram R. Chirino
-------------------------------------------------------------------------------
commit:933eb2f
/////////////////////////////////////////////////////////////////////////
1:                                                               new Byte(ActiveMQDestination.TOPIC_TYPE)});
commit:f812e34
/////////////////////////////////////////////////////////////////////////
1: 
1:     public void initCombosForTestAddConsumerThenSend() {
1:         addCombinationValues("deliveryMode", new Object[] {new Integer(DeliveryMode.NON_PERSISTENT),
1:                                                            new Integer(DeliveryMode.PERSISTENT)});
1:         addCombinationValues("destinationType", new Object[] {new Byte(ActiveMQDestination.QUEUE_TYPE),
0:                                                               new Byte(ActiveMQDestination.TOPIC_TYPE),});
1:     }
1: 
1:         // Start a producer on local broker
1:         SessionInfo sessionInfo1 = createSessionInfo(connectionInfo1);
/////////////////////////////////////////////////////////////////////////
1:         SessionInfo sessionInfo2 = createSessionInfo(connectionInfo2);
1:         ConsumerInfo consumerInfo = createConsumerInfo(sessionInfo2, destination);
/////////////////////////////////////////////////////////////////////////
1: 
1: 
1: 
1: 
1:         bridge.start();
1: 
1: 
1: 
commit:230a86c
/////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////
1:  *      http://www.apache.org/licenses/LICENSE-2.0
/////////////////////////////////////////////////////////////////////////
1: import junit.framework.Test;
/////////////////////////////////////////////////////////////////////////
commit:3a7c673
/////////////////////////////////////////////////////////////////////////
1:         // Give forwarding bridge a chance to finish setting up
1:         try {
1:             Thread.sleep(1000);
1:         } catch (InterruptedException ie) {
1:             ie.printStackTrace();
1:         }
1:         
/////////////////////////////////////////////////////////////////////////
0:         bridge.start();        
commit:57b4941
/////////////////////////////////////////////////////////////////////////
1:  * Licensed to the Apache Software Foundation (ASF) under one or more
1:  * contributor license agreements.  See the NOTICE file distributed with
1:  * this work for additional information regarding copyright ownership.
1:  * The ASF licenses this file to You under the Apache License, Version 2.0
1:  * (the "License"); you may not use this file except in compliance with
1:  * the License.  You may obtain a copy of the License at
commit:7f5213b
/////////////////////////////////////////////////////////////////////////
1:     public void testAddConsumerThenSend() throws Exception {
commit:48b4869
/////////////////////////////////////////////////////////////////////////
0:  * Copyright 2005-2006 The Apache Software Foundation
commit:d29ca2a
/////////////////////////////////////////////////////////////////////////
1: /**
1:  *
0:  * Copyright 2004 The Apache Software Foundation
1:  *
0:  * Licensed under the Apache License, Version 2.0 (the "License");
0:  * you may not use this file except in compliance with the License.
0:  * You may obtain a copy of the License at
1:  *
0:  * http://www.apache.org/licenses/LICENSE-2.0
1:  *
1:  * Unless required by applicable law or agreed to in writing, software
1:  * distributed under the License is distributed on an "AS IS" BASIS,
1:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:  * See the License for the specific language governing permissions and
1:  * limitations under the License.
1:  */
1: package org.apache.activemq.network;
1: 
1: import javax.jms.DeliveryMode;
1: 
1: import org.apache.activemq.broker.StubConnection;
1: import org.apache.activemq.command.ActiveMQDestination;
1: import org.apache.activemq.command.ConnectionInfo;
1: import org.apache.activemq.command.ConsumerInfo;
1: import org.apache.activemq.command.Message;
1: import org.apache.activemq.command.ProducerInfo;
1: import org.apache.activemq.command.SessionInfo;
0: import org.apache.activemq.network.ForwardingBridge;
1: 
0: import junit.framework.Test;
1: 
1: 
1: public class ForwardingBridgeTest extends NetworkTestSupport {
1:     
1:     public ActiveMQDestination destination;
1:     public byte destinationType;
1:     public int deliveryMode;
1:     private ForwardingBridge bridge;
1: 
0:     public void initCombosForTestAddConsumerThenSend() {    
0:         addCombinationValues( "deliveryMode", new Object[]{ 
0:                 new Integer(DeliveryMode.NON_PERSISTENT), 
0:                 new Integer(DeliveryMode.PERSISTENT)} );        
0:         addCombinationValues( "destinationType", new Object[]{ 
0:                 new Byte(ActiveMQDestination.QUEUE_TYPE), 
0:                 new Byte(ActiveMQDestination.TOPIC_TYPE), 
0:                 } );
1:     }    
0:     public void testAddConsumerThenSend() throws Throwable {
1:         
0:         // Start a producer on local broker 
1:         StubConnection connection1 = createConnection();
1:         ConnectionInfo connectionInfo1 = createConnectionInfo();
0:         SessionInfo sessionInfo1 = createSessionInfo(connectionInfo1);        
1:         ProducerInfo producerInfo = createProducerInfo(sessionInfo1);
1:         connection1.send(connectionInfo1);
1:         connection1.send(sessionInfo1);
1:         connection1.send(producerInfo);
1: 
1:         destination = createDestinationInfo(connection1, connectionInfo1, destinationType);
1: 
1:         // Start a consumer on a remote broker
1:         StubConnection connection2 = createRemoteConnection();
1:         ConnectionInfo connectionInfo2 = createConnectionInfo();
0:         SessionInfo sessionInfo2 = createSessionInfo(connectionInfo2);        
1:         connection2.send(connectionInfo2);
1:         connection2.send(sessionInfo2);
0:         ConsumerInfo consumerInfo = createConsumerInfo(sessionInfo2, destination);        
1:         connection2.send(consumerInfo);
1:         
1:         // Send the message to the local boker.
1:         connection1.send(createMessage(producerInfo, destination, deliveryMode));
1:         
1:         // Make sure the message was delivered via the remote.
1:         Message m = receiveMessage(connection2);
1:         assertNotNull(m);
1:     }
1:     
1:     protected void setUp() throws Exception {
1:         super.setUp();
1:         bridge = new ForwardingBridge(createTransport(), createRemoteTransport());
1:         bridge.setClientId("local-remote-bridge");
1:         bridge.setDispatchAsync(false);
0:         bridge.start();
1:         
0:         // PATCH: Give forwarding bridge a chance to finish setting up
0:         try {
1:             Thread.sleep(1000);
0:         } catch (InterruptedException ie) {
0:             ie.printStackTrace();
1:         }
1:     }
1:     
1:     protected void tearDown() throws Exception {
1:         bridge.stop();
1:         super.tearDown();
1:     }
1:     
1:     public static Test suite() {
1:         return suite(ForwardingBridgeTest.class);
1:     }
1:     
1:     public static void main(String[] args) {
1:         junit.textui.TestRunner.run(suite());
1:     }
1: 
1: }
author:Robert Davies
-------------------------------------------------------------------------------
commit:bfaff9b
/////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////
0:         Thread.sleep(1000);
0:         
============================================================================