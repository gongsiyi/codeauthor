1:e5de25f: /**
1:e5de25f:  * Licensed to the Apache Software Foundation (ASF) under one or more
1:e5de25f:  * contributor license agreements.  See the NOTICE file distributed with
1:e5de25f:  * this work for additional information regarding copyright ownership.
1:e5de25f:  * The ASF licenses this file to You under the Apache License, Version 2.0
1:e5de25f:  * (the "License"); you may not use this file except in compliance with
1:e5de25f:  * the License.  You may obtain a copy of the License at
1:e5de25f:  *
1:e5de25f:  *      http://www.apache.org/licenses/LICENSE-2.0
1:e5de25f:  *
1:e5de25f:  * Unless required by applicable law or agreed to in writing, software
1:e5de25f:  * distributed under the License is distributed on an "AS IS" BASIS,
1:e5de25f:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:e5de25f:  * See the License for the specific language governing permissions and
1:e5de25f:  * limitations under the License.
1:e5de25f:  */
1:a8a032a: package org.apache.activemq.network;
1:a8a032a: 
1:a8a032a: import java.net.URI;
1:a8a032a: 
1:a8a032a: import javax.jms.Connection;
1:a8a032a: import javax.jms.Session;
1:a8a032a: 
1:a8a032a: import org.apache.activemq.ActiveMQConnectionFactory;
1:a8a032a: import org.apache.activemq.broker.BrokerService;
1:a8a032a: import org.apache.activemq.xbean.BrokerFactoryBean;
1:a8a032a: import org.junit.After;
1:a8a032a: import org.junit.Before;
1:a8a032a: import org.slf4j.Logger;
1:a8a032a: import org.slf4j.LoggerFactory;
1:a8a032a: import org.springframework.core.io.ClassPathResource;
1:a8a032a: import org.springframework.core.io.Resource;
1:a8a032a: 
1:a8a032a: public class BaseNetworkTest {
1:a8a032a: 
1:a8a032a:     protected final Logger LOG = LoggerFactory.getLogger(getClass());
1:a8a032a: 
1:a8a032a:     protected Connection localConnection;
1:a8a032a:     protected Connection remoteConnection;
1:a8a032a:     protected BrokerService localBroker;
1:a8a032a:     protected BrokerService remoteBroker;
1:a8a032a:     protected Session localSession;
1:a8a032a:     protected Session remoteSession;
1:a8a032a: 
1:a8a032a:     @Before
1:a8a032a:     public final void setUp() throws Exception {
1:a8a032a:         doSetUp(true);
1:a8a032a:     }
1:a8a032a: 
1:a8a032a:     @After
1:a8a032a:     public final void tearDown() throws Exception {
1:a8a032a:         doTearDown();
1:a8a032a:     }
1:a8a032a: 
1:a8a032a:     protected void doTearDown() throws Exception {
1:a8a032a:         localConnection.close();
1:a8a032a:         remoteConnection.close();
1:a8a032a:         localBroker.stop();
1:a8a032a:         remoteBroker.stop();
1:a8a032a:     }
1:a8a032a: 
1:a8a032a:     protected void doSetUp(boolean deleteAllMessages) throws Exception {
1:a8a032a:         remoteBroker = createRemoteBroker();
1:a8a032a:         remoteBroker.setDeleteAllMessagesOnStartup(deleteAllMessages);
1:a8a032a:         remoteBroker.start();
1:a8a032a:         remoteBroker.waitUntilStarted();
1:a8a032a:         localBroker = createLocalBroker();
1:a8a032a:         localBroker.setDeleteAllMessagesOnStartup(deleteAllMessages);
1:a8a032a:         localBroker.start();
1:a8a032a:         localBroker.waitUntilStarted();
1:a8a032a:         URI localURI = localBroker.getVmConnectorURI();
1:a8a032a:         ActiveMQConnectionFactory fac = new ActiveMQConnectionFactory(localURI);
1:a8a032a:         fac.setAlwaysSyncSend(true);
1:a8a032a:         fac.setDispatchAsync(false);
1:a8a032a:         localConnection = fac.createConnection();
1:a8a032a:         localConnection.setClientID("clientId");
1:a8a032a:         localConnection.start();
1:a8a032a:         URI remoteURI = remoteBroker.getVmConnectorURI();
1:a8a032a:         fac = new ActiveMQConnectionFactory(remoteURI);
1:a8a032a:         remoteConnection = fac.createConnection();
1:a8a032a:         remoteConnection.setClientID("clientId");
1:a8a032a:         remoteConnection.start();
1:a8a032a:         localSession = localConnection.createSession(false, Session.AUTO_ACKNOWLEDGE);
1:a8a032a:         remoteSession = remoteConnection.createSession(false, Session.AUTO_ACKNOWLEDGE);
1:a8a032a:     }
1:a8a032a: 
1:a8a032a:     protected String getRemoteBrokerURI() {
1:a8a032a:         return "org/apache/activemq/network/remoteBroker.xml";
1:a8a032a:     }
1:a8a032a: 
1:a8a032a:     protected String getLocalBrokerURI() {
1:a8a032a:         return "org/apache/activemq/network/localBroker.xml";
1:a8a032a:     }
1:a8a032a: 
1:a8a032a:     protected BrokerService createBroker(String uri) throws Exception {
1:a8a032a:         Resource resource = new ClassPathResource(uri);
1:a8a032a:         BrokerFactoryBean factory = new BrokerFactoryBean(resource);
1:a8a032a:         resource = new ClassPathResource(uri);
1:a8a032a:         factory = new BrokerFactoryBean(resource);
1:a8a032a:         factory.afterPropertiesSet();
1:a8a032a:         BrokerService result = factory.getBroker();
1:a8a032a:         return result;
1:a8a032a:     }
1:a8a032a: 
1:a8a032a:     protected BrokerService createLocalBroker() throws Exception {
1:a8a032a:         return createBroker(getLocalBrokerURI());
1:a8a032a:     }
1:a8a032a: 
1:a8a032a:     protected BrokerService createRemoteBroker() throws Exception {
1:a8a032a:         return createBroker(getRemoteBrokerURI());
1:a8a032a:     }
1:a8a032a: }
============================================================================
author:Christopher L. Shannon (cshannon)
-------------------------------------------------------------------------------
commit:e5de25f
/////////////////////////////////////////////////////////////////////////
1: /**
1:  * Licensed to the Apache Software Foundation (ASF) under one or more
1:  * contributor license agreements.  See the NOTICE file distributed with
1:  * this work for additional information regarding copyright ownership.
1:  * The ASF licenses this file to You under the Apache License, Version 2.0
1:  * (the "License"); you may not use this file except in compliance with
1:  * the License.  You may obtain a copy of the License at
1:  *
1:  *      http://www.apache.org/licenses/LICENSE-2.0
1:  *
1:  * Unless required by applicable law or agreed to in writing, software
1:  * distributed under the License is distributed on an "AS IS" BASIS,
1:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:  * See the License for the specific language governing permissions and
1:  * limitations under the License.
1:  */
author:?ukasz Dywicki
-------------------------------------------------------------------------------
commit:a8a032a
/////////////////////////////////////////////////////////////////////////
1: package org.apache.activemq.network;
1: 
1: import java.net.URI;
1: 
1: import javax.jms.Connection;
1: import javax.jms.Session;
1: 
1: import org.apache.activemq.ActiveMQConnectionFactory;
1: import org.apache.activemq.broker.BrokerService;
1: import org.apache.activemq.xbean.BrokerFactoryBean;
1: import org.junit.After;
1: import org.junit.Before;
1: import org.slf4j.Logger;
1: import org.slf4j.LoggerFactory;
1: import org.springframework.core.io.ClassPathResource;
1: import org.springframework.core.io.Resource;
1: 
1: public class BaseNetworkTest {
1: 
1:     protected final Logger LOG = LoggerFactory.getLogger(getClass());
1: 
1:     protected Connection localConnection;
1:     protected Connection remoteConnection;
1:     protected BrokerService localBroker;
1:     protected BrokerService remoteBroker;
1:     protected Session localSession;
1:     protected Session remoteSession;
1: 
1:     @Before
1:     public final void setUp() throws Exception {
1:         doSetUp(true);
1:     }
1: 
1:     @After
1:     public final void tearDown() throws Exception {
1:         doTearDown();
1:     }
1: 
1:     protected void doTearDown() throws Exception {
1:         localConnection.close();
1:         remoteConnection.close();
1:         localBroker.stop();
1:         remoteBroker.stop();
1:     }
1: 
1:     protected void doSetUp(boolean deleteAllMessages) throws Exception {
1:         remoteBroker = createRemoteBroker();
1:         remoteBroker.setDeleteAllMessagesOnStartup(deleteAllMessages);
1:         remoteBroker.start();
1:         remoteBroker.waitUntilStarted();
1:         localBroker = createLocalBroker();
1:         localBroker.setDeleteAllMessagesOnStartup(deleteAllMessages);
1:         localBroker.start();
1:         localBroker.waitUntilStarted();
1:         URI localURI = localBroker.getVmConnectorURI();
1:         ActiveMQConnectionFactory fac = new ActiveMQConnectionFactory(localURI);
1:         fac.setAlwaysSyncSend(true);
1:         fac.setDispatchAsync(false);
1:         localConnection = fac.createConnection();
1:         localConnection.setClientID("clientId");
1:         localConnection.start();
1:         URI remoteURI = remoteBroker.getVmConnectorURI();
1:         fac = new ActiveMQConnectionFactory(remoteURI);
1:         remoteConnection = fac.createConnection();
1:         remoteConnection.setClientID("clientId");
1:         remoteConnection.start();
1:         localSession = localConnection.createSession(false, Session.AUTO_ACKNOWLEDGE);
1:         remoteSession = remoteConnection.createSession(false, Session.AUTO_ACKNOWLEDGE);
1:     }
1: 
1:     protected String getRemoteBrokerURI() {
1:         return "org/apache/activemq/network/remoteBroker.xml";
1:     }
1: 
1:     protected String getLocalBrokerURI() {
1:         return "org/apache/activemq/network/localBroker.xml";
1:     }
1: 
1:     protected BrokerService createBroker(String uri) throws Exception {
1:         Resource resource = new ClassPathResource(uri);
1:         BrokerFactoryBean factory = new BrokerFactoryBean(resource);
1:         resource = new ClassPathResource(uri);
1:         factory = new BrokerFactoryBean(resource);
1:         factory.afterPropertiesSet();
1:         BrokerService result = factory.getBroker();
1:         return result;
1:     }
1: 
1:     protected BrokerService createLocalBroker() throws Exception {
1:         return createBroker(getLocalBrokerURI());
1:     }
1: 
1:     protected BrokerService createRemoteBroker() throws Exception {
1:         return createBroker(getRemoteBrokerURI());
1:     }
1: }
============================================================================