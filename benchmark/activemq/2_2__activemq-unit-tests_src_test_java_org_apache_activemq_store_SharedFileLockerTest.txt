1:89c75ca: /**
1:89c75ca:  * Licensed to the Apache Software Foundation (ASF) under one or more
1:89c75ca:  * contributor license agreements. See the NOTICE file distributed with
1:89c75ca:  * this work for additional information regarding copyright ownership.
1:89c75ca:  * The ASF licenses this file to You under the Apache License, Version 2.0
1:89c75ca:  * (the "License"); you may not use this file except in compliance with
1:89c75ca:  * the License. You may obtain a copy of the License at
1:89c75ca:  *
1:89c75ca:  *     http://www.apache.org/licenses/LICENSE-2.0
1:89c75ca:  *
1:89c75ca:  * Unless required by applicable law or agreed to in writing, software
1:89c75ca:  * distributed under the License is distributed on an "AS IS" BASIS,
1:89c75ca:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:89c75ca:  * See the License for the specific language governing permissions and
1:89c75ca:  * limitations under the License.
1:89c75ca:  */
16:89c75ca: 
1:89c75ca: package org.apache.activemq.store;
1:89c75ca: 
1:89c75ca: import java.io.File;
1:9bc602b: import java.io.IOException;
1:9bc602b: import java.util.concurrent.CountDownLatch;
1:9bc602b: import java.util.concurrent.ExecutorService;
1:9bc602b: import java.util.concurrent.Executors;
1:9bc602b: import java.util.concurrent.TimeUnit;
1:89c75ca: import java.util.concurrent.atomic.AtomicInteger;
1:9bc602b: import java.util.concurrent.atomic.AtomicLong;
1:9bc602b: import org.apache.activemq.broker.LockableServiceSupport;
1:9bc602b: import org.apache.activemq.broker.Locker;
1:0a16138: import org.apache.activemq.util.DefaultTestAppender;
1:0a16138: import org.apache.activemq.util.IOHelper;
1:9bc602b: import org.apache.activemq.util.LockFile;
1:9bc602b: import org.apache.activemq.util.ServiceStopper;
1:9bc602b: import org.apache.activemq.util.Wait;
1:c17b7fd: import org.apache.log4j.Level;
1:0a16138: import org.apache.log4j.Logger;
1:0a16138: import org.apache.log4j.spi.LoggingEvent;
1:89c75ca: import org.junit.Assert;
1:89c75ca: import org.junit.Rule;
1:89c75ca: import org.junit.Test;
1:89c75ca: import org.junit.rules.TemporaryFolder;
1:9bc602b: import org.slf4j.LoggerFactory;
1:89c75ca: 
1:89c75ca: 
1:802e968: import static org.junit.Assert.assertTrue;
1:89c75ca: 
1:9bc602b: public class SharedFileLockerTest {
1:9bc602b:     private static final org.slf4j.Logger LOG = LoggerFactory.getLogger(SharedFileLockerTest.class);
1:89c75ca: 
1:9bc602b:     @Rule
1:9bc602b:     public TemporaryFolder testFolder;
1:0a16138: 
1:0a16138: 
1:9bc602b:     public SharedFileLockerTest() {
1:9bc602b:         File file = new File(IOHelper.getDefaultDataDirectory());
1:9bc602b:         file.mkdir();
1:0a16138: 
1:9bc602b:         // TemporaryFolder will make sure the files are removed after the test is done
1:9bc602b:         testFolder = new TemporaryFolder(file);
1:0a16138: 
1:9bc602b:     }
1:0a16138: 
1:9bc602b:     @Test
1:a01578a:     public void testStopNoStart() throws Exception {
1:a01578a:         SharedFileLocker locker1 = new SharedFileLocker();
1:a01578a:         locker1.setDirectory(testFolder.getRoot());
1:a01578a:         locker1.stop();
1:a01578a:     }
1:a01578a: 
1:a01578a:     @Test
1:9bc602b:     public void testLoop() throws Exception {
1:9bc602b:         // Increase the number of iterations if you are debugging races
1:9bc602b:         for (int i = 0; i < 100; i++) {
1:9bc602b:             internalLoop(5);
1:9bc602b:         }
1:ab8f54b: 
1:9bc602b:     }
1:ab8f54b: 
1:ab8f54b: 
1:9bc602b:     @Test
1:9bc602b:     public void testLogging() throws Exception {
1:9bc602b:         // using a bigger wait here
1:9bc602b:         // to make sure we won't log any extra info
1:9bc602b:         internalLoop(100);
1:9bc602b:     }
1:89c75ca: 
1:9bc602b:     private void internalLoop(long timewait) throws Exception {
1:9bc602b:         final AtomicInteger logCounts = new AtomicInteger(0);
1:9bc602b:         DefaultTestAppender appender = new DefaultTestAppender() {
1:9bc602b:             @Override
1:9bc602b:             public void doAppend(LoggingEvent event) {
1:c17b7fd:                 if (event.getLevel() == Level.INFO) {
1:c17b7fd:                     logCounts.incrementAndGet();
1:c17b7fd:                 }
1:ab8f54b:             }
1:9bc602b:         };
1:0a16138: 
1:9bc602b:         Logger.getRootLogger().addAppender(appender);
1:9bc602b: 
1:9bc602b:         final AtomicInteger errors = new AtomicInteger(0);
1:9bc602b: 
1:9bc602b:         Thread thread = null;
1:9bc602b: 
1:9bc602b:         SharedFileLocker locker1 = new SharedFileLocker();
1:9bc602b:         locker1.setDirectory(testFolder.getRoot());
1:89c75ca: 
1:9bc602b:         final SharedFileLocker locker2 = new SharedFileLocker();
1:9bc602b:         locker2.setLockAcquireSleepInterval(1);
1:9bc602b:         locker2.setDirectory(testFolder.getRoot());
1:9bc602b: 
1:9bc602b: 
1:9bc602b:         try {
1:9bc602b:             locker1.doStart();
1:9bc602b: 
1:802e968:             assertTrue(locker1.keepAlive());
1:9bc602b: 
1:9bc602b:             thread = new Thread("Locker Thread") {
1:9bc602b:                 public void run() {
1:9bc602b:                     try {
1:9bc602b:                         locker2.doStart();
1:9bc602b:                     } catch (Throwable e) {
1:9bc602b:                         errors.incrementAndGet();
1:9bc602b:                     }
1:9bc602b:                 }
1:9bc602b:             };
1:9bc602b: 
1:9bc602b:             thread.start();
1:9bc602b: 
1:9bc602b:             // I need to make sure the info was already logged
1:9bc602b:             // but I don't want to have an unecessary wait here,
1:9bc602b:             // as I want the test to run as fast as possible
1:9bc602b:             {
1:9bc602b:                 long timeout = System.currentTimeMillis() + 5000;
1:9bc602b:                 while (logCounts.get() < 1 && System.currentTimeMillis() < timeout) {
1:9bc602b:                     Thread.sleep(1);
1:9bc602b:                 }
1:9bc602b:             }
1:9bc602b: 
1:9bc602b:             if (timewait > 0) {
1:9bc602b:                 Thread.sleep(timewait);
1:9bc602b:             }
1:9bc602b: 
1:802e968:             assertTrue(thread.isAlive());
1:9bc602b: 
1:9bc602b:             locker1.stop();
1:9bc602b: 
1:9bc602b:             // 10 seconds here is an eternity, but it should only take milliseconds
1:9bc602b:             thread.join(5000);
1:9bc602b: 
1:9bc602b:             Assert.assertEquals("Extra logs in place", 1, logCounts.get());
1:9bc602b: 
1:ab8f54b:             long timeout = System.currentTimeMillis() + 5000;
1:9bc602b: 
1:9bc602b:             while (timeout > System.currentTimeMillis() && !locker2.keepAlive()) {
1:9bc602b:                 Thread.sleep(1);
1:ab8f54b:             }
1:ab8f54b: 
1:802e968:             assertTrue(locker2.keepAlive());
1:ab8f54b: 
1:9bc602b:             locker2.stop();
1:0a16138: 
1:9bc602b:             Assert.assertEquals(0, errors.get());
1:0a16138: 
1:9bc602b:         } finally {
1:0a16138: 
1:0a16138: 
1:9bc602b:             Logger.getRootLogger().removeAppender(appender);
1:0a16138: 
1:9bc602b:             // to make sure we won't leak threads if the test ever failed for any reason
1:9bc602b:             thread.join(1000);
1:9bc602b:             if (thread.isAlive()) {
1:9bc602b:                 thread.interrupt();
1:9bc602b:             }
1:89c75ca: 
1:9bc602b:             File lockFile = new File(testFolder.getRoot(), "lock");
1:9bc602b:             lockFile.delete();
1:9bc602b:         }
1:9bc602b: 
1:9bc602b:     }
1:89c75ca: 
1:9bc602b:     @Test
1:9bc602b:     public void verifyLockAcquireWaitsForLockDrop() throws Exception {
1:9bc602b: 
1:9bc602b:         final AtomicInteger logCounts = new AtomicInteger(0);
1:9bc602b:         DefaultTestAppender appender = new DefaultTestAppender() {
1:9bc602b:             @Override
1:9bc602b:             public void doAppend(LoggingEvent event) {
2:9bc602b:                 logCounts.incrementAndGet();
1:9bc602b:             }
1:9bc602b:         };
1:9bc602b:         Logger sharedFileLogger = Logger.getLogger(SharedFileLocker.class);
1:9bc602b:         sharedFileLogger.addAppender(appender);
1:9bc602b: 
1:9bc602b:         LockableServiceSupport config = new LockableServiceSupport() {
1:9bc602b: 
1:9bc602b:             @Override
1:9bc602b:             public long getLockKeepAlivePeriod() {
1:9bc602b:                 return 500;
1:9bc602b:             }
1:9bc602b: 
1:9bc602b:             @Override
1:9bc602b:             public Locker createDefaultLocker() throws IOException {
1:9bc602b:                 return null;
1:9bc602b:             }
1:9bc602b: 
1:9bc602b:             public void init() throws Exception {
1:9bc602b:             }
1:9bc602b: 
1:9bc602b:             protected void doStop(ServiceStopper stopper) throws Exception {
1:9bc602b:             }
1:9bc602b: 
1:9bc602b:             protected void doStart() throws Exception {
1:9bc602b:             }
1:9bc602b:         };
1:9bc602b: 
1:9bc602b:         final SharedFileLocker underTest = new SharedFileLocker();
1:9bc602b:         underTest.setDirectory(testFolder.getRoot());
1:9bc602b:         underTest.setLockAcquireSleepInterval(5);
1:9bc602b:         underTest.setLockable(config);
1:9bc602b: 
1:9bc602b:         // get the in jvm lock
1:9bc602b:         File lockFile = new File(testFolder.getRoot(), "lock");
1:9bc602b:         String jvmProp = LockFile.class.getName() + ".lock." + lockFile.getCanonicalPath();
1:9bc602b:         System.getProperties().put(jvmProp, jvmProp);
1:9bc602b: 
1:9bc602b:         final CountDownLatch locked = new CountDownLatch(1);
1:9bc602b:         ExecutorService executorService = Executors.newSingleThreadExecutor();
1:9bc602b:         try {
1:9bc602b:             final AtomicLong acquireTime = new AtomicLong(0l);
1:9bc602b:             executorService.execute(new Runnable() {
1:9bc602b:                 @Override
1:9bc602b:                 public void run() {
1:9bc602b:                     try {
1:9bc602b:                         underTest.start();
1:9bc602b:                         acquireTime.set(System.currentTimeMillis());
1:9bc602b:                         locked.countDown();
1:9bc602b:                     } catch (Exception e) {
1:9bc602b:                         e.printStackTrace();
1:9bc602b:                     }
1:9bc602b:                 }
1:9bc602b:             });
1:9bc602b: 
1:9bc602b:             assertTrue("locker failed to obtain lock", Wait.waitFor(new Wait.Condition() {
1:9bc602b:                 @Override
1:9bc602b:                 public boolean isSatisified() throws Exception {
1:9bc602b:                     return logCounts.get() > 0;
1:9bc602b:                 }
1:9bc602b:             }, 5000, 10));
1:9bc602b: 
1:9bc602b:             // release vm lock
1:9bc602b:             long releaseTime = System.currentTimeMillis();
1:9bc602b:             System.getProperties().remove(jvmProp);
1:9bc602b: 
1:9bc602b:             assertTrue("locker got lock", locked.await(5, TimeUnit.SECONDS));
1:9bc602b: 
1:9bc602b:             // verify delay in start
1:9bc602b:             LOG.info("ReleaseTime: " + releaseTime + ", AcquireTime:" + acquireTime.get());
1:9bc602b:             assertTrue("acquire delayed for keepAlive: " + config.getLockKeepAlivePeriod(), acquireTime.get() >= releaseTime + config.getLockKeepAlivePeriod());
1:9bc602b: 
1:9bc602b:         } finally {
1:9bc602b:             executorService.shutdownNow();
1:9bc602b:             underTest.stop();
1:9bc602b:             lockFile.delete();
1:9bc602b:             sharedFileLogger.removeAppender(appender);
1:9bc602b:         }
1:9bc602b:     }
1:ab8f54b: }
============================================================================
author:gtully
-------------------------------------------------------------------------------
commit:c17b7fd
/////////////////////////////////////////////////////////////////////////
1: import org.apache.log4j.Level;
/////////////////////////////////////////////////////////////////////////
1:                 if (event.getLevel() == Level.INFO) {
1:                     logCounts.incrementAndGet();
1:                 }
commit:a01578a
/////////////////////////////////////////////////////////////////////////
1:     public void testStopNoStart() throws Exception {
1:         SharedFileLocker locker1 = new SharedFileLocker();
1:         locker1.setDirectory(testFolder.getRoot());
1:         locker1.stop();
1:     }
1: 
1:     @Test
commit:802e968
/////////////////////////////////////////////////////////////////////////
1: import static org.junit.Assert.assertTrue;
/////////////////////////////////////////////////////////////////////////
1:             assertTrue(locker1.keepAlive());
/////////////////////////////////////////////////////////////////////////
1:             assertTrue(thread.isAlive());
/////////////////////////////////////////////////////////////////////////
1:             assertTrue(locker2.keepAlive());
commit:9bc602b
/////////////////////////////////////////////////////////////////////////
1: import java.io.IOException;
1: import java.util.concurrent.CountDownLatch;
1: import java.util.concurrent.ExecutorService;
1: import java.util.concurrent.Executors;
1: import java.util.concurrent.TimeUnit;
1: import java.util.concurrent.atomic.AtomicLong;
1: import org.apache.activemq.broker.LockableServiceSupport;
1: import org.apache.activemq.broker.Locker;
1: import org.apache.activemq.util.LockFile;
1: import org.apache.activemq.util.ServiceStopper;
1: import org.apache.activemq.util.Wait;
1: import org.slf4j.LoggerFactory;
0: import static junit.framework.Assert.assertTrue;
1: public class SharedFileLockerTest {
1:     private static final org.slf4j.Logger LOG = LoggerFactory.getLogger(SharedFileLockerTest.class);
1:     @Rule
1:     public TemporaryFolder testFolder;
1:     public SharedFileLockerTest() {
1:         File file = new File(IOHelper.getDefaultDataDirectory());
1:         file.mkdir();
1:         // TemporaryFolder will make sure the files are removed after the test is done
1:         testFolder = new TemporaryFolder(file);
1:     }
1:     @Test
1:     public void testLoop() throws Exception {
1:         // Increase the number of iterations if you are debugging races
1:         for (int i = 0; i < 100; i++) {
1:             internalLoop(5);
1:         }
1:     }
1:     @Test
1:     public void testLogging() throws Exception {
1:         // using a bigger wait here
1:         // to make sure we won't log any extra info
1:         internalLoop(100);
1:     }
1:     private void internalLoop(long timewait) throws Exception {
1:         final AtomicInteger logCounts = new AtomicInteger(0);
1:         DefaultTestAppender appender = new DefaultTestAppender() {
1:             @Override
1:             public void doAppend(LoggingEvent event) {
1:                 logCounts.incrementAndGet();
1:         };
1:         Logger.getRootLogger().addAppender(appender);
1:         final AtomicInteger errors = new AtomicInteger(0);
1: 
1:         Thread thread = null;
1: 
1:         SharedFileLocker locker1 = new SharedFileLocker();
1:         locker1.setDirectory(testFolder.getRoot());
1: 
1:         final SharedFileLocker locker2 = new SharedFileLocker();
1:         locker2.setLockAcquireSleepInterval(1);
1:         locker2.setDirectory(testFolder.getRoot());
1: 
1: 
1:         try {
1:             locker1.doStart();
1: 
0:             Assert.assertTrue(locker1.keepAlive());
1: 
1:             thread = new Thread("Locker Thread") {
1:                 public void run() {
1:                     try {
1:                         locker2.doStart();
1:                     } catch (Throwable e) {
1:                         errors.incrementAndGet();
1:                     }
1:                 }
1:             };
1: 
1:             thread.start();
1: 
1:             // I need to make sure the info was already logged
1:             // but I don't want to have an unecessary wait here,
1:             // as I want the test to run as fast as possible
1:             {
1:                 long timeout = System.currentTimeMillis() + 5000;
1:                 while (logCounts.get() < 1 && System.currentTimeMillis() < timeout) {
1:                     Thread.sleep(1);
1:                 }
1:             }
1: 
1:             if (timewait > 0) {
1:                 Thread.sleep(timewait);
1:             }
1: 
0:             Assert.assertTrue(thread.isAlive());
1: 
1:             locker1.stop();
1: 
1:             // 10 seconds here is an eternity, but it should only take milliseconds
1:             thread.join(5000);
1: 
1:             Assert.assertEquals("Extra logs in place", 1, logCounts.get());
1: 
1: 
1:             while (timeout > System.currentTimeMillis() && !locker2.keepAlive()) {
1:                 Thread.sleep(1);
0:             Assert.assertTrue(locker2.keepAlive());
1:             locker2.stop();
1:             Assert.assertEquals(0, errors.get());
1:         } finally {
1:             Logger.getRootLogger().removeAppender(appender);
1:             // to make sure we won't leak threads if the test ever failed for any reason
1:             thread.join(1000);
1:             if (thread.isAlive()) {
1:                 thread.interrupt();
1:             }
1:             File lockFile = new File(testFolder.getRoot(), "lock");
1:             lockFile.delete();
1:         }
1:     }
1: 
1:     @Test
1:     public void verifyLockAcquireWaitsForLockDrop() throws Exception {
1: 
1:         final AtomicInteger logCounts = new AtomicInteger(0);
1:         DefaultTestAppender appender = new DefaultTestAppender() {
1:             @Override
1:             public void doAppend(LoggingEvent event) {
1:                 logCounts.incrementAndGet();
1:             }
1:         };
1:         Logger sharedFileLogger = Logger.getLogger(SharedFileLocker.class);
1:         sharedFileLogger.addAppender(appender);
1: 
1:         LockableServiceSupport config = new LockableServiceSupport() {
1: 
1:             @Override
1:             public long getLockKeepAlivePeriod() {
1:                 return 500;
1:             }
1: 
1:             @Override
1:             public Locker createDefaultLocker() throws IOException {
1:                 return null;
1:             }
1: 
1:             public void init() throws Exception {
1:             }
1: 
1:             protected void doStop(ServiceStopper stopper) throws Exception {
1:             }
1: 
1:             protected void doStart() throws Exception {
1:             }
1:         };
1: 
1:         final SharedFileLocker underTest = new SharedFileLocker();
1:         underTest.setDirectory(testFolder.getRoot());
1:         underTest.setLockAcquireSleepInterval(5);
1:         underTest.setLockable(config);
1: 
1:         // get the in jvm lock
1:         File lockFile = new File(testFolder.getRoot(), "lock");
1:         String jvmProp = LockFile.class.getName() + ".lock." + lockFile.getCanonicalPath();
1:         System.getProperties().put(jvmProp, jvmProp);
1: 
1:         final CountDownLatch locked = new CountDownLatch(1);
1:         ExecutorService executorService = Executors.newSingleThreadExecutor();
1:         try {
1:             final AtomicLong acquireTime = new AtomicLong(0l);
1:             executorService.execute(new Runnable() {
1:                 @Override
1:                 public void run() {
1:                     try {
1:                         underTest.start();
1:                         acquireTime.set(System.currentTimeMillis());
1:                         locked.countDown();
1:                     } catch (Exception e) {
1:                         e.printStackTrace();
1:                     }
1:                 }
1:             });
1: 
1:             assertTrue("locker failed to obtain lock", Wait.waitFor(new Wait.Condition() {
1:                 @Override
1:                 public boolean isSatisified() throws Exception {
1:                     return logCounts.get() > 0;
1:                 }
1:             }, 5000, 10));
1: 
1:             // release vm lock
1:             long releaseTime = System.currentTimeMillis();
1:             System.getProperties().remove(jvmProp);
1: 
1:             assertTrue("locker got lock", locked.await(5, TimeUnit.SECONDS));
1: 
1:             // verify delay in start
1:             LOG.info("ReleaseTime: " + releaseTime + ", AcquireTime:" + acquireTime.get());
1:             assertTrue("acquire delayed for keepAlive: " + config.getLockKeepAlivePeriod(), acquireTime.get() >= releaseTime + config.getLockKeepAlivePeriod());
1: 
1:         } finally {
1:             executorService.shutdownNow();
1:             underTest.stop();
1:             lockFile.delete();
1:             sharedFileLogger.removeAppender(appender);
1:         }
1:     }
author:Clebert Suconic
-------------------------------------------------------------------------------
commit:ab8f54b
/////////////////////////////////////////////////////////////////////////
0:    public void testLoop() throws Exception
0:    {
0:       // Increase the number of iterations if you are debugging races
0:       for (int i = 0 ; i < 100; i++)
0:       {
0:          internalLoop(5);
1:       }
1: 
1:    }
1: 
1: 
0:    @Test
0:       // using a bigger wait here
0:       // to make sure we won't log any extra info
0:       internalLoop(100);
1:    }
1: 
0:    private void internalLoop(long timewait) throws Exception
0:    {
/////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////
0:          // I need to make sure the info was already logged
0:          // but I don't want to have an unecessary wait here,
0:          // as I want the test to run as fast as possible
0:          {
1:             long timeout = System.currentTimeMillis() + 5000;
0:             while (logCounts.get() < 1 && System.currentTimeMillis() < timeout)
0:             {
0:                Thread.sleep(1);
0:             }
0:          }
1: 
0:          if (timewait > 0)
0:          {
0:             Thread.sleep(timewait);
0:          }
commit:0a16138
/////////////////////////////////////////////////////////////////////////
1: import org.apache.activemq.util.DefaultTestAppender;
1: import org.apache.activemq.util.IOHelper;
1: import org.apache.log4j.Logger;
1: import org.apache.log4j.spi.LoggingEvent;
/////////////////////////////////////////////////////////////////////////
0:    public TemporaryFolder testFolder;
1: 
1: 
0:    public SharedFileLockerTest()
0:    {
0:       File file = new File(IOHelper.getDefaultDataDirectory());
0:       file.mkdir();
1: 
0:       // TemporaryFolder will make sure the files are removed after the test is done
0:       testFolder = new TemporaryFolder(file);
1: 
0:    }
0:    public void testLogging() throws Exception
0:       final AtomicInteger logCounts = new AtomicInteger(0);
0:       DefaultTestAppender appender = new DefaultTestAppender() {
0:          @Override
0:          public void doAppend(LoggingEvent event) {
0:             logCounts.incrementAndGet();
0:          }
0:       };
1: 
0:       Logger.getRootLogger().addAppender(appender);
1: 
/////////////////////////////////////////////////////////////////////////
0:          Assert.assertEquals("Extra logs in place", 1, logCounts.get());
1: 
/////////////////////////////////////////////////////////////////////////
0:          Assert.assertEquals(0, errors.get());
1: 
1: 
1: 
0:          Logger.getRootLogger().removeAppender(appender);
1: 
commit:89c75ca
/////////////////////////////////////////////////////////////////////////
1: /**
1:  * Licensed to the Apache Software Foundation (ASF) under one or more
1:  * contributor license agreements. See the NOTICE file distributed with
1:  * this work for additional information regarding copyright ownership.
1:  * The ASF licenses this file to You under the Apache License, Version 2.0
1:  * (the "License"); you may not use this file except in compliance with
1:  * the License. You may obtain a copy of the License at
1:  *
1:  *     http://www.apache.org/licenses/LICENSE-2.0
1:  *
1:  * Unless required by applicable law or agreed to in writing, software
1:  * distributed under the License is distributed on an "AS IS" BASIS,
1:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:  * See the License for the specific language governing permissions and
1:  * limitations under the License.
1:  */
1: 
1: package org.apache.activemq.store;
1: 
1: import java.io.File;
1: import java.util.concurrent.atomic.AtomicInteger;
1: 
1: import org.junit.Assert;
1: import org.junit.Rule;
1: import org.junit.Test;
1: import org.junit.rules.TemporaryFolder;
1: 
0: public class SharedFileLockerTest
0: {
0:    @Rule
0:    public TemporaryFolder testFolder = new TemporaryFolder();
1: 
0:    @Test
0:    public void testLock() throws Exception
0:    {
0:       final AtomicInteger errors = new AtomicInteger(0);
1: 
0:       Thread thread = null;
1: 
0:       SharedFileLocker locker1 = new SharedFileLocker();
0:       locker1.setDirectory(testFolder.getRoot());
1: 
0:       final SharedFileLocker locker2 = new SharedFileLocker();
0:       locker2.setLockAcquireSleepInterval(1);
0:       locker2.setDirectory(testFolder.getRoot());
1: 
1: 
0:       try
0:       {
0:          locker1.doStart();
1: 
0:          Assert.assertTrue(locker1.keepAlive());
1: 
0:          Thread.sleep(10);
1: 
0:          thread = new Thread("Locker Thread")
0:          {
0:             public void run()
0:             {
0:                try
0:                {
0:                   locker2.doStart();
0:                }
0:                catch (Throwable e)
0:                {
0:                   errors.incrementAndGet();
0:                }
0:             }
0:          };
1: 
0:          thread.start();
1: 
0:          // Waiting some small time here, you shouldn't see many messages
0:          Thread.sleep(100);
1: 
0:          Assert.assertTrue(thread.isAlive());
1: 
0:          locker1.stop();
1: 
0:          // 10 seconds here is an eternity, but it should only take milliseconds
0:          thread.join(5000);
1: 
0:          long timeout = System.currentTimeMillis() + 5000;
1: 
0:          while (timeout > System.currentTimeMillis() && !locker2.keepAlive())
0:          {
0:             Thread.sleep(1);
0:          }
1: 
0:          Assert.assertTrue(locker2.keepAlive());
1: 
0:          locker2.stop();
1: 
0:       }
0:       finally
0:       {
0:          // to make sure we won't leak threads if the test ever failed for any reason
0:          thread.join(1000);
0:          if (thread.isAlive())
0:          {
0:             thread.interrupt();
0:          }
1: 
0:          File lockFile = new File(testFolder.getRoot(), "lock");
0:          lockFile.delete();
0:       }
1: 
0:    }
0: }
============================================================================