1:43c3cae: /**
1:43c3cae:  * Licensed to the Apache Software Foundation (ASF) under one or more
1:43c3cae:  * contributor license agreements.  See the NOTICE file distributed with
1:43c3cae:  * this work for additional information regarding copyright ownership.
1:43c3cae:  * The ASF licenses this file to You under the Apache License, Version 2.0
1:43c3cae:  * (the "License"); you may not use this file except in compliance with
1:43c3cae:  * the License.  You may obtain a copy of the License at
1:43c3cae:  *
1:43c3cae:  *      http://www.apache.org/licenses/LICENSE-2.0
1:43c3cae:  *
1:43c3cae:  * Unless required by applicable law or agreed to in writing, software
1:43c3cae:  * distributed under the License is distributed on an "AS IS" BASIS,
1:43c3cae:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:43c3cae:  * See the License for the specific language governing permissions and
1:43c3cae:  * limitations under the License.
1:43c3cae:  */
1:43c3cae: package org.apache.activemq.plugin;
1:43c3cae: 
1:43c3cae: import java.util.ArrayList;
1:43c3cae: import java.util.Arrays;
1:cc81680: import java.util.Collections;
1:cc81680: import java.util.HashSet;
1:43c3cae: import java.util.List;
1:cc81680: import java.util.Set;
1:43c3cae: 
1:cc81680: import org.apache.activemq.broker.ConnectionContext;
1:43c3cae: import org.apache.activemq.broker.region.CompositeDestinationInterceptor;
1:43c3cae: import org.apache.activemq.broker.region.DestinationInterceptor;
1:43c3cae: import org.apache.activemq.broker.region.RegionBroker;
1:43c3cae: import org.apache.activemq.broker.region.virtual.VirtualDestination;
1:43c3cae: import org.apache.activemq.broker.region.virtual.VirtualDestinationInterceptor;
1:cc81680: import org.slf4j.Logger;
1:cc81680: import org.slf4j.LoggerFactory;
1:43c3cae: 
1:43c3cae: public abstract class UpdateVirtualDestinationsTask implements Runnable {
1:43c3cae: 
1:cc81680:     public static final Logger LOG = LoggerFactory.getLogger(UpdateVirtualDestinationsTask.class);
1:43c3cae:     private final AbstractRuntimeConfigurationBroker plugin;
1:43c3cae: 
1:43c3cae:     public UpdateVirtualDestinationsTask(
1:43c3cae:             AbstractRuntimeConfigurationBroker plugin) {
1:43c3cae:         super();
1:43c3cae:         this.plugin = plugin;
1:43c3cae:     }
1:43c3cae: 
1:43c3cae:     @Override
1:43c3cae:     public void run() {
1:43c3cae: 
1:43c3cae:         boolean updatedExistingInterceptor = false;
1:43c3cae:         RegionBroker regionBroker = (RegionBroker) plugin.getBrokerService()
1:43c3cae:                 .getRegionBroker();
1:43c3cae: 
1:43c3cae:         for (DestinationInterceptor destinationInterceptor : plugin
1:43c3cae:                 .getBrokerService().getDestinationInterceptors()) {
1:43c3cae:             if (destinationInterceptor instanceof VirtualDestinationInterceptor) {
1:43c3cae:                 // update existing interceptor
1:43c3cae:                 final VirtualDestinationInterceptor virtualDestinationInterceptor = (VirtualDestinationInterceptor) destinationInterceptor;
1:43c3cae: 
1:cc81680:                 Set<VirtualDestination> existingVirtualDests = new HashSet<>();
1:cc81680:                 Collections.addAll(existingVirtualDests, virtualDestinationInterceptor.getVirtualDestinations());
1:cc81680: 
1:cc81680:                 Set<VirtualDestination> newVirtualDests = new HashSet<>();
1:cc81680:                 Collections.addAll(newVirtualDests, getVirtualDestinations());
1:cc81680: 
1:cc81680:                 Set<VirtualDestination> addedVirtualDests = new HashSet<>();
1:cc81680:                 Set<VirtualDestination> removedVirtualDests = new HashSet<>();
1:cc81680:                 //detect new virtual destinations
1:cc81680:                 for (VirtualDestination newVirtualDest : newVirtualDests) {
1:cc81680:                     if (!existingVirtualDests.contains(newVirtualDest)) {
1:cc81680:                         addedVirtualDests.add(newVirtualDest);
1:cc81680:                     }
1:cc81680:                 }
1:cc81680:                 //detect removed virtual destinations
1:cc81680:                 for (VirtualDestination existingVirtualDest : existingVirtualDests) {
1:cc81680:                     if (!newVirtualDests.contains(existingVirtualDest)) {
1:cc81680:                         removedVirtualDests.add(existingVirtualDest);
1:cc81680:                     }
1:cc81680:                 }
1:cc81680: 
1:43c3cae:                 virtualDestinationInterceptor
1:43c3cae:                         .setVirtualDestinations(getVirtualDestinations());
1:43c3cae:                 plugin.info("applied updates to: "
1:43c3cae:                         + virtualDestinationInterceptor);
1:43c3cae:                 updatedExistingInterceptor = true;
1:cc81680: 
1:cc81680:                 ConnectionContext connectionContext;
1:cc81680:                 try {
1:cc81680:                     connectionContext = plugin.getBrokerService().getAdminConnectionContext();
1:cc81680:                     //signal updates
1:cc81680:                     if (plugin.getBrokerService().isUseVirtualDestSubs()) {
1:cc81680:                         for (VirtualDestination removedVirtualDest : removedVirtualDests) {
1:cc81680:                             plugin.virtualDestinationRemoved(connectionContext, removedVirtualDest);
1:cc81680:                             LOG.info("Removing virtual destination: {}", removedVirtualDest);
1:cc81680:                         }
1:cc81680: 
1:cc81680:                         for (VirtualDestination addedVirtualDest : addedVirtualDests) {
1:cc81680:                             plugin.virtualDestinationAdded(connectionContext, addedVirtualDest);
1:cc81680:                             LOG.info("Adding virtual destination: {}", addedVirtualDest);
1:cc81680:                         }
1:cc81680:                     }
1:cc81680: 
1:cc81680:                 } catch (Exception e) {
1:cc81680:                     LOG.warn("Could not process virtual destination advisories", e);
1:cc81680:                 }
1:43c3cae:             }
1:43c3cae:         }
1:43c3cae: 
1:43c3cae:         if (!updatedExistingInterceptor) {
1:43c3cae:             // add
1:43c3cae:             VirtualDestinationInterceptor virtualDestinationInterceptor = new VirtualDestinationInterceptor();
1:43c3cae:             virtualDestinationInterceptor.setVirtualDestinations(getVirtualDestinations());
1:43c3cae: 
1:43c3cae:             List<DestinationInterceptor> interceptorsList = new ArrayList<DestinationInterceptor>();
1:43c3cae:             interceptorsList.addAll(Arrays.asList(plugin.getBrokerService()
1:43c3cae:                     .getDestinationInterceptors()));
1:43c3cae:             interceptorsList.add(virtualDestinationInterceptor);
1:43c3cae: 
1:43c3cae:             DestinationInterceptor[] destinationInterceptors = interceptorsList
1:43c3cae:                     .toArray(new DestinationInterceptor[] {});
1:43c3cae:             plugin.getBrokerService().setDestinationInterceptors(
1:43c3cae:                     destinationInterceptors);
1:43c3cae: 
1:43c3cae:             ((CompositeDestinationInterceptor) regionBroker
1:43c3cae:                     .getDestinationInterceptor())
1:43c3cae:                     .setInterceptors(destinationInterceptors);
1:43c3cae:             plugin.info("applied new: " + interceptorsList);
1:43c3cae:         }
1:43c3cae:         regionBroker.reapplyInterceptor();
1:43c3cae:     }
1:43c3cae: 
1:43c3cae:     protected abstract VirtualDestination[] getVirtualDestinations();
1:43c3cae: }
============================================================================
author:Christopher L. Shannon (cshannon)
-------------------------------------------------------------------------------
commit:cc81680
/////////////////////////////////////////////////////////////////////////
1: import java.util.Collections;
1: import java.util.HashSet;
1: import java.util.Set;
1: import org.apache.activemq.broker.ConnectionContext;
1: import org.slf4j.Logger;
1: import org.slf4j.LoggerFactory;
1:     public static final Logger LOG = LoggerFactory.getLogger(UpdateVirtualDestinationsTask.class);
/////////////////////////////////////////////////////////////////////////
1:                 Set<VirtualDestination> existingVirtualDests = new HashSet<>();
1:                 Collections.addAll(existingVirtualDests, virtualDestinationInterceptor.getVirtualDestinations());
1: 
1:                 Set<VirtualDestination> newVirtualDests = new HashSet<>();
1:                 Collections.addAll(newVirtualDests, getVirtualDestinations());
1: 
1:                 Set<VirtualDestination> addedVirtualDests = new HashSet<>();
1:                 Set<VirtualDestination> removedVirtualDests = new HashSet<>();
1:                 //detect new virtual destinations
1:                 for (VirtualDestination newVirtualDest : newVirtualDests) {
1:                     if (!existingVirtualDests.contains(newVirtualDest)) {
1:                         addedVirtualDests.add(newVirtualDest);
1:                     }
1:                 }
1:                 //detect removed virtual destinations
1:                 for (VirtualDestination existingVirtualDest : existingVirtualDests) {
1:                     if (!newVirtualDests.contains(existingVirtualDest)) {
1:                         removedVirtualDests.add(existingVirtualDest);
1:                     }
1:                 }
1: 
1: 
1:                 ConnectionContext connectionContext;
1:                 try {
1:                     connectionContext = plugin.getBrokerService().getAdminConnectionContext();
1:                     //signal updates
1:                     if (plugin.getBrokerService().isUseVirtualDestSubs()) {
1:                         for (VirtualDestination removedVirtualDest : removedVirtualDests) {
1:                             plugin.virtualDestinationRemoved(connectionContext, removedVirtualDest);
1:                             LOG.info("Removing virtual destination: {}", removedVirtualDest);
1:                         }
1: 
1:                         for (VirtualDestination addedVirtualDest : addedVirtualDests) {
1:                             plugin.virtualDestinationAdded(connectionContext, addedVirtualDest);
1:                             LOG.info("Adding virtual destination: {}", addedVirtualDest);
1:                         }
1:                     }
1: 
1:                 } catch (Exception e) {
1:                     LOG.warn("Could not process virtual destination advisories", e);
1:                 }
commit:43c3cae
/////////////////////////////////////////////////////////////////////////
1: /**
1:  * Licensed to the Apache Software Foundation (ASF) under one or more
1:  * contributor license agreements.  See the NOTICE file distributed with
1:  * this work for additional information regarding copyright ownership.
1:  * The ASF licenses this file to You under the Apache License, Version 2.0
1:  * (the "License"); you may not use this file except in compliance with
1:  * the License.  You may obtain a copy of the License at
1:  *
1:  *      http://www.apache.org/licenses/LICENSE-2.0
1:  *
1:  * Unless required by applicable law or agreed to in writing, software
1:  * distributed under the License is distributed on an "AS IS" BASIS,
1:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:  * See the License for the specific language governing permissions and
1:  * limitations under the License.
1:  */
1: package org.apache.activemq.plugin;
1: 
1: import java.util.ArrayList;
1: import java.util.Arrays;
1: import java.util.List;
1: 
1: import org.apache.activemq.broker.region.CompositeDestinationInterceptor;
1: import org.apache.activemq.broker.region.DestinationInterceptor;
1: import org.apache.activemq.broker.region.RegionBroker;
1: import org.apache.activemq.broker.region.virtual.VirtualDestination;
1: import org.apache.activemq.broker.region.virtual.VirtualDestinationInterceptor;
1: 
1: public abstract class UpdateVirtualDestinationsTask implements Runnable {
1: 
1:     private final AbstractRuntimeConfigurationBroker plugin;
1: 
1:     public UpdateVirtualDestinationsTask(
1:             AbstractRuntimeConfigurationBroker plugin) {
1:         super();
1:         this.plugin = plugin;
1:     }
1: 
1:     @Override
1:     public void run() {
1: 
1:         boolean updatedExistingInterceptor = false;
1:         RegionBroker regionBroker = (RegionBroker) plugin.getBrokerService()
1:                 .getRegionBroker();
1: 
1:         for (DestinationInterceptor destinationInterceptor : plugin
1:                 .getBrokerService().getDestinationInterceptors()) {
1:             if (destinationInterceptor instanceof VirtualDestinationInterceptor) {
1:                 // update existing interceptor
1:                 final VirtualDestinationInterceptor virtualDestinationInterceptor = (VirtualDestinationInterceptor) destinationInterceptor;
1: 
1:                 virtualDestinationInterceptor
1:                         .setVirtualDestinations(getVirtualDestinations());
1:                 plugin.info("applied updates to: "
1:                         + virtualDestinationInterceptor);
1:                 updatedExistingInterceptor = true;
1:             }
1:         }
1: 
1:         if (!updatedExistingInterceptor) {
1:             // add
1:             VirtualDestinationInterceptor virtualDestinationInterceptor = new VirtualDestinationInterceptor();
1:             virtualDestinationInterceptor.setVirtualDestinations(getVirtualDestinations());
1: 
1:             List<DestinationInterceptor> interceptorsList = new ArrayList<DestinationInterceptor>();
1:             interceptorsList.addAll(Arrays.asList(plugin.getBrokerService()
1:                     .getDestinationInterceptors()));
1:             interceptorsList.add(virtualDestinationInterceptor);
1: 
1:             DestinationInterceptor[] destinationInterceptors = interceptorsList
1:                     .toArray(new DestinationInterceptor[] {});
1:             plugin.getBrokerService().setDestinationInterceptors(
1:                     destinationInterceptors);
1: 
1:             ((CompositeDestinationInterceptor) regionBroker
1:                     .getDestinationInterceptor())
1:                     .setInterceptors(destinationInterceptors);
1:             plugin.info("applied new: " + interceptorsList);
1:         }
1:         regionBroker.reapplyInterceptor();
1:     }
1: 
1:     protected abstract VirtualDestination[] getVirtualDestinations();
1: }
============================================================================