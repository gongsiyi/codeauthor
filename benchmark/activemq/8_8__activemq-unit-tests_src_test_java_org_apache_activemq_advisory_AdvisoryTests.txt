1:cdc2fd3: /**
1:cdc2fd3:  * Licensed to the Apache Software Foundation (ASF) under one or more
1:cdc2fd3:  * contributor license agreements.  See the NOTICE file distributed with
1:cdc2fd3:  * this work for additional information regarding copyright ownership.
1:cdc2fd3:  * The ASF licenses this file to You under the Apache License, Version 2.0
1:cdc2fd3:  * (the "License"); you may not use this file except in compliance with
1:cdc2fd3:  * the License.  You may obtain a copy of the License at
1:c7d559f:  *
1:cdc2fd3:  *      http://www.apache.org/licenses/LICENSE-2.0
1:b0c2a40:  *
1:cdc2fd3:  * Unless required by applicable law or agreed to in writing, software
1:cdc2fd3:  * distributed under the License is distributed on an "AS IS" BASIS,
1:cdc2fd3:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:cdc2fd3:  * See the License for the specific language governing permissions and
1:cdc2fd3:  * limitations under the License.
1:cdc2fd3:  */
1:cdc2fd3: package org.apache.activemq.advisory;
1:c7d559f: 
1:c10e6fa: import static org.junit.Assert.assertEquals;
1:c10e6fa: import static org.junit.Assert.assertNotNull;
1:c10e6fa: import static org.junit.Assert.assertNull;
1:fc3e026: import static org.junit.Assert.assertTrue;
1:c10e6fa: 
1:edacc2a: import java.util.Arrays;
1:edacc2a: import java.util.Collection;
1:179dc3a: import java.util.HashSet;
1:edacc2a: 
1:cdc2fd3: import javax.jms.BytesMessage;
1:cdc2fd3: import javax.jms.Connection;
1:cdc2fd3: import javax.jms.ConnectionFactory;
1:cdc2fd3: import javax.jms.Message;
1:cdc2fd3: import javax.jms.MessageConsumer;
1:cdc2fd3: import javax.jms.MessageListener;
1:cdc2fd3: import javax.jms.MessageProducer;
1:cdc2fd3: import javax.jms.Queue;
1:cdc2fd3: import javax.jms.Session;
1:cdc2fd3: import javax.jms.Topic;
1:c7d559f: 
1:cdc2fd3: import org.apache.activemq.ActiveMQConnection;
1:cdc2fd3: import org.apache.activemq.ActiveMQConnectionFactory;
1:cdc2fd3: import org.apache.activemq.ActiveMQPrefetchPolicy;
1:cdc2fd3: import org.apache.activemq.broker.BrokerService;
1:c10e6fa: import org.apache.activemq.broker.region.policy.ConstantPendingMessageLimitStrategy;
1:c10e6fa: import org.apache.activemq.broker.region.policy.PolicyEntry;
1:c10e6fa: import org.apache.activemq.broker.region.policy.PolicyMap;
1:cdc2fd3: import org.apache.activemq.command.ActiveMQDestination;
1:657e6fa: import org.apache.activemq.command.ActiveMQMessage;
1:179dc3a: import org.apache.activemq.command.ActiveMQQueue;
1:179dc3a: import org.apache.activemq.command.ActiveMQTopic;
1:c10e6fa: import org.junit.After;
1:c10e6fa: import org.junit.Before;
1:c10e6fa: import org.junit.Test;
1:edacc2a: import org.junit.runner.RunWith;
1:edacc2a: import org.junit.runners.Parameterized;
1:edacc2a: import org.junit.runners.Parameterized.Parameters;
1:c7d559f: 
1:cdc2fd3: /**
1:c10e6fa:  * Test for advisory messages sent under the right circumstances.
1:cdc2fd3:  */
1:edacc2a: @RunWith(Parameterized.class)
1:c10e6fa: public class AdvisoryTests {
1:c10e6fa: 
1:cdc2fd3:     protected static final int MESSAGE_COUNT = 2000;
1:cdc2fd3:     protected BrokerService broker;
1:cdc2fd3:     protected Connection connection;
1:cdc2fd3:     protected String bindAddress = ActiveMQConnectionFactory.DEFAULT_BROKER_BIND_URL;
1:cdc2fd3:     protected int topicCount;
1:edacc2a:     protected final boolean includeBodyForAdvisory;
1:c10e6fa:     protected final int EXPIRE_MESSAGE_PERIOD = 10000;
1:edacc2a: 
1:c7d559f: 
1:179dc3a:     @Parameters(name = "includeBodyForAdvisory={0}")
1:edacc2a:     public static Collection<Object[]> data() {
1:edacc2a:         return Arrays.asList(new Object[][] {
1:edacc2a:                 // Include the full body of the message
1:edacc2a:                 {true},
1:edacc2a:                 // Don't include the full body of the message
1:edacc2a:                 {false}
1:edacc2a:         });
1:edacc2a:     }
1:edacc2a: 
1:edacc2a:     public AdvisoryTests(boolean includeBodyForAdvisory) {
1:edacc2a:         super();
1:edacc2a:         this.includeBodyForAdvisory = includeBodyForAdvisory;
1:edacc2a:     }
1:edacc2a: 
1:c10e6fa:     @Test(timeout = 60000)
1:cdc2fd3:     public void testNoSlowConsumerAdvisory() throws Exception {
2:cdc2fd3:         Session s = connection.createSession(false, Session.AUTO_ACKNOWLEDGE);
1:cdc2fd3:         Queue queue = s.createQueue(getClass().getName());
1:cdc2fd3:         MessageConsumer consumer = s.createConsumer(queue);
1:cdc2fd3:         consumer.setMessageListener(new MessageListener() {
1:c7d559f:             @Override
1:cdc2fd3:             public void onMessage(Message message) {
1:cdc2fd3:             }
1:cdc2fd3:         });
1:c10e6fa: 
1:c10e6fa:         Topic advisoryTopic = AdvisorySupport.getSlowConsumerAdvisoryTopic((ActiveMQDestination) queue);
1:cdc2fd3:         s = connection.createSession(false, Session.AUTO_ACKNOWLEDGE);
2:cdc2fd3:         MessageConsumer advisoryConsumer = s.createConsumer(advisoryTopic);
1:cdc2fd3:         // start throwing messages at the consumer
1:cdc2fd3:         MessageProducer producer = s.createProducer(queue);
1:cdc2fd3:         for (int i = 0; i < MESSAGE_COUNT; i++) {
1:cdc2fd3:             BytesMessage m = s.createBytesMessage();
1:cdc2fd3:             m.writeBytes(new byte[1024]);
1:cdc2fd3:             producer.send(m);
1:cdc2fd3:         }
1:cdc2fd3:         Message msg = advisoryConsumer.receive(1000);
1:cdc2fd3:         assertNull(msg);
1:cdc2fd3:     }
1:c7d559f: 
1:c10e6fa:     @Test(timeout = 60000)
1:cdc2fd3:     public void testSlowConsumerAdvisory() throws Exception {
1:cdc2fd3:         Session s = connection.createSession(false, Session.AUTO_ACKNOWLEDGE);
1:cdc2fd3:         Queue queue = s.createQueue(getClass().getName());
1:cdc2fd3:         MessageConsumer consumer = s.createConsumer(queue);
1:c7d559f:         assertNotNull(consumer);
1:c7d559f: 
1:c10e6fa:         Topic advisoryTopic = AdvisorySupport.getSlowConsumerAdvisoryTopic((ActiveMQDestination) queue);
1:cdc2fd3:         s = connection.createSession(false, Session.AUTO_ACKNOWLEDGE);
1:cdc2fd3:         MessageConsumer advisoryConsumer = s.createConsumer(advisoryTopic);
1:cdc2fd3:         // start throwing messages at the consumer
1:cdc2fd3:         MessageProducer producer = s.createProducer(queue);
1:cdc2fd3:         for (int i = 0; i < MESSAGE_COUNT; i++) {
1:cdc2fd3:             BytesMessage m = s.createBytesMessage();
1:cdc2fd3:             m.writeBytes(new byte[1024]);
1:cdc2fd3:             producer.send(m);
1:cdc2fd3:         }
1:cdc2fd3:         Message msg = advisoryConsumer.receive(1000);
1:cdc2fd3:         assertNotNull(msg);
1:cdc2fd3:     }
1:c7d559f: 
1:c10e6fa:     @Test(timeout = 60000)
1:c7d559f:     public void testMessageDeliveryAdvisory() throws Exception {
1:cdc2fd3:         Session s = connection.createSession(false, Session.AUTO_ACKNOWLEDGE);
1:cdc2fd3:         Queue queue = s.createQueue(getClass().getName());
1:cdc2fd3:         MessageConsumer consumer = s.createConsumer(queue);
1:c7d559f:         assertNotNull(consumer);
1:c7d559f: 
1:cdc2fd3:         Topic advisoryTopic = AdvisorySupport.getMessageDeliveredAdvisoryTopic((ActiveMQDestination) queue);
1:cdc2fd3:         MessageConsumer advisoryConsumer = s.createConsumer(advisoryTopic);
1:c10e6fa:         // start throwing messages at the consumer
1:cdc2fd3:         MessageProducer producer = s.createProducer(queue);
1:c7d559f: 
1:cdc2fd3:         BytesMessage m = s.createBytesMessage();
1:cdc2fd3:         m.writeBytes(new byte[1024]);
1:cdc2fd3:         producer.send(m);
1:c7d559f: 
1:cdc2fd3:         Message msg = advisoryConsumer.receive(1000);
1:cdc2fd3:         assertNotNull(msg);
1:edacc2a:         ActiveMQMessage message = (ActiveMQMessage) msg;
1:edacc2a:         ActiveMQMessage payload = (ActiveMQMessage) message.getDataStructure();
1:fc3e026: 
1:fc3e026:         //This should always be tcp:// because that is the transport that is used to connect even though
1:fc3e026:         //the nio transport is the first one in the list
1:fc3e026:         assertTrue(((String)message.getProperty(AdvisorySupport.MSG_PROPERTY_ORIGIN_BROKER_URL)).startsWith("tcp://"));
1:75ff17a:         assertEquals(message.getProperty(AdvisorySupport.MSG_PROPERTY_DESTINATION), ((ActiveMQDestination) queue).getQualifiedName());
1:fc3e026: 
1:edacc2a:         //Add assertion to make sure body is included for advisory topics
1:edacc2a:         //when includeBodyForAdvisory is true
1:edacc2a:         assertIncludeBodyForAdvisory(payload);
1:cdc2fd3:     }
1:fc3e026: 
1:c10e6fa:     @Test(timeout = 60000)
1:c7d559f:     public void testMessageConsumedAdvisory() throws Exception {
1:cdc2fd3:         Session s = connection.createSession(false, Session.AUTO_ACKNOWLEDGE);
1:cdc2fd3:         Queue queue = s.createQueue(getClass().getName());
1:cdc2fd3:         MessageConsumer consumer = s.createConsumer(queue);
1:fc3e026: 
1:cdc2fd3:         Topic advisoryTopic = AdvisorySupport.getMessageConsumedAdvisoryTopic((ActiveMQDestination) queue);
1:cdc2fd3:         MessageConsumer advisoryConsumer = s.createConsumer(advisoryTopic);
1:c10e6fa:         // start throwing messages at the consumer
1:cdc2fd3:         MessageProducer producer = s.createProducer(queue);
1:c7d559f: 
1:cdc2fd3:         BytesMessage m = s.createBytesMessage();
1:cdc2fd3:         m.writeBytes(new byte[1024]);
1:cdc2fd3:         producer.send(m);
1:657e6fa:         String id = m.getJMSMessageID();
1:cdc2fd3:         Message msg = consumer.receive(1000);
1:cdc2fd3:         assertNotNull(msg);
1:c7d559f: 
1:cdc2fd3:         msg = advisoryConsumer.receive(1000);
1:cdc2fd3:         assertNotNull(msg);
1:c7d559f: 
1:657e6fa:         ActiveMQMessage message = (ActiveMQMessage) msg;
1:657e6fa:         ActiveMQMessage payload = (ActiveMQMessage) message.getDataStructure();
1:657e6fa:         String originalId = payload.getJMSMessageID();
1:657e6fa:         assertEquals(originalId, id);
1:fc3e026: 
1:fc3e026:         //This should always be tcp:// because that is the transport that is used to connect even though
1:fc3e026:         //the nio transport is the first one in the list
1:fc3e026:         assertTrue(((String)message.getProperty(AdvisorySupport.MSG_PROPERTY_ORIGIN_BROKER_URL)).startsWith("tcp://"));
1:75ff17a:         assertEquals(message.getProperty(AdvisorySupport.MSG_PROPERTY_DESTINATION), ((ActiveMQDestination) queue).getQualifiedName());
1:fc3e026: 
1:edacc2a:         //Add assertion to make sure body is included for advisory topics
1:edacc2a:         //when includeBodyForAdvisory is true
1:edacc2a:         assertIncludeBodyForAdvisory(payload);
1:cdc2fd3:     }
1:c7d559f: 
1:c10e6fa:     @Test(timeout = 60000)
1:cdc2fd3:     public void testMessageExpiredAdvisory() throws Exception {
1:cdc2fd3:         Session s = connection.createSession(false, Session.AUTO_ACKNOWLEDGE);
1:cdc2fd3:         Queue queue = s.createQueue(getClass().getName());
1:cdc2fd3:         MessageConsumer consumer = s.createConsumer(queue);
1:c7d559f:         assertNotNull(consumer);
1:c7d559f: 
1:cdc2fd3:         Topic advisoryTopic = AdvisorySupport.getExpiredMessageTopic((ActiveMQDestination) queue);
1:cdc2fd3:         MessageConsumer advisoryConsumer = s.createConsumer(advisoryTopic);
1:c10e6fa:         // start throwing messages at the consumer
1:cdc2fd3:         MessageProducer producer = s.createProducer(queue);
1:cdc2fd3:         producer.setTimeToLive(1);
1:cdc2fd3:         for (int i = 0; i < MESSAGE_COUNT; i++) {
1:cdc2fd3:             BytesMessage m = s.createBytesMessage();
1:cdc2fd3:             m.writeBytes(new byte[1024]);
1:cdc2fd3:             producer.send(m);
1:cdc2fd3:         }
1:c7d559f: 
1:c10e6fa:         Message msg = advisoryConsumer.receive(EXPIRE_MESSAGE_PERIOD);
1:cdc2fd3:         assertNotNull(msg);
1:edacc2a:         ActiveMQMessage message = (ActiveMQMessage) msg;
1:edacc2a:         ActiveMQMessage payload = (ActiveMQMessage) message.getDataStructure();
1:c7d559f: 
1:fc3e026:         //This should be set
1:fc3e026:         assertNotNull(message.getProperty(AdvisorySupport.MSG_PROPERTY_ORIGIN_BROKER_URL));
1:fc3e026: 
1:edacc2a:         //Add assertion to make sure body is included for advisory topics
1:edacc2a:         //when includeBodyForAdvisory is true
1:edacc2a:         assertIncludeBodyForAdvisory(payload);
1:cdc2fd3:     }
1:fc3e026: 
1:c10e6fa:     @Test(timeout = 60000)
1:2562cf2:     public void testMessageDLQd() throws Exception {
1:2562cf2:         ActiveMQPrefetchPolicy policy = new ActiveMQPrefetchPolicy();
1:2562cf2:         policy.setTopicPrefetch(2);
1:c10e6fa:         ((ActiveMQConnection) connection).setPrefetchPolicy(policy);
1:2562cf2:         Session s = connection.createSession(false, Session.CLIENT_ACKNOWLEDGE);
1:2562cf2:         Topic topic = s.createTopic(getClass().getName());
1:2562cf2: 
1:2562cf2:         Topic advisoryTopic = s.createTopic(">");
1:2562cf2:         for (int i = 0; i < 100; i++) {
1:c10e6fa:             s.createConsumer(advisoryTopic);
1:2562cf2:         }
1:edacc2a:         MessageConsumer advisoryConsumer = s.createConsumer(AdvisorySupport.getMessageDLQdAdvisoryTopic((ActiveMQDestination) topic));
1:2562cf2: 
1:2562cf2:         MessageProducer producer = s.createProducer(topic);
1:2562cf2:         int count = 10;
1:2562cf2:         for (int i = 0; i < count; i++) {
1:2562cf2:             BytesMessage m = s.createBytesMessage();
1:edacc2a:             m.writeBytes(new byte[1024]);
1:2562cf2:             producer.send(m);
1:2562cf2:         }
1:c10e6fa: 
1:edacc2a:         Message msg = advisoryConsumer.receive(1000);
1:edacc2a:         assertNotNull(msg);
1:edacc2a:         ActiveMQMessage message = (ActiveMQMessage) msg;
1:edacc2a:         ActiveMQMessage payload = (ActiveMQMessage) message.getDataStructure();
1:fc3e026:         //This should be set
1:fc3e026:         assertNotNull(message.getProperty(AdvisorySupport.MSG_PROPERTY_ORIGIN_BROKER_URL));
1:edacc2a:         //Add assertion to make sure body is included for DLQ advisory topics
1:edacc2a:         //when includeBodyForAdvisory is true
1:edacc2a:         assertIncludeBodyForAdvisory(payload);
1:edacc2a: 
1:2562cf2:         // we should get here without StackOverflow
1:2562cf2:     }
1:2562cf2: 
1:c10e6fa:     @Test(timeout = 60000)
1:c10e6fa:     public void testMessageDiscardedAdvisory() throws Exception {
1:75ff17a:         Session s = connection.createSession(false, Session.CLIENT_ACKNOWLEDGE);
1:cdc2fd3:         Topic topic = s.createTopic(getClass().getName());
1:cdc2fd3:         MessageConsumer consumer = s.createConsumer(topic);
1:c7d559f:         assertNotNull(consumer);
1:2562cf2: 
1:cdc2fd3:         Topic advisoryTopic = AdvisorySupport.getMessageDiscardedAdvisoryTopic((ActiveMQDestination) topic);
1:2562cf2:         MessageConsumer advisoryConsumer = s.createConsumer(advisoryTopic);
1:c10e6fa:         // start throwing messages at the consumer
1:cdc2fd3:         MessageProducer producer = s.createProducer(topic);
1:cdc2fd3:         int count = (new ActiveMQPrefetchPolicy().getTopicPrefetch() * 2);
1:cdc2fd3:         for (int i = 0; i < count; i++) {
1:cdc2fd3:             BytesMessage m = s.createBytesMessage();
1:edacc2a:             m.writeBytes(new byte[1024]);
1:cdc2fd3:             producer.send(m);
1:cdc2fd3:         }
1:c7d559f: 
1:cdc2fd3:         Message msg = advisoryConsumer.receive(1000);
1:cdc2fd3:         assertNotNull(msg);
1:edacc2a:         ActiveMQMessage message = (ActiveMQMessage) msg;
1:edacc2a:         ActiveMQMessage payload = (ActiveMQMessage) message.getDataStructure();
1:c7d559f: 
1:fc3e026:         //This should be set
1:fc3e026:         assertNotNull(message.getProperty(AdvisorySupport.MSG_PROPERTY_ORIGIN_BROKER_URL));
1:75ff17a:         assertEquals(message.getProperty(AdvisorySupport.MSG_PROPERTY_DESTINATION), ((ActiveMQDestination) topic).getQualifiedName());
1:c7d559f: 
1:edacc2a:         //Add assertion to make sure body is included for advisory topics
1:edacc2a:         //when includeBodyForAdvisory is true
1:edacc2a:         assertIncludeBodyForAdvisory(payload);
1:cdc2fd3:     }
1:657e6fa: 
1:179dc3a:     @Test(timeout = 60000)
1:179dc3a:     public void testMessageDeliveryVTAdvisory() throws Exception {
1:179dc3a:         Session s = connection.createSession(false, Session.AUTO_ACKNOWLEDGE);
1:179dc3a:         ActiveMQTopic vt = new ActiveMQTopic("VirtualTopic.TEST");
1:179dc3a: 
1:179dc3a:         ActiveMQQueue a  = new ActiveMQQueue("Consumer.A.VirtualTopic.TEST");
1:179dc3a:         MessageConsumer consumer = s.createConsumer(a);
1:179dc3a: 
1:179dc3a:         ActiveMQQueue b = new ActiveMQQueue("Consumer.B.VirtualTopic.TEST");
1:179dc3a:         MessageConsumer consumerB = s.createConsumer(b);
1:179dc3a: 
1:179dc3a:         assertNotNull(consumer);
1:179dc3a:         assertNotNull(consumerB);
1:179dc3a: 
1:179dc3a:         HashSet<String> dests = new HashSet<String>();
1:179dc3a:         dests.add(vt.getQualifiedName());
1:179dc3a:         dests.add(a.getQualifiedName());
1:179dc3a:         dests.add(b.getQualifiedName());
1:179dc3a: 
1:179dc3a: 
1:179dc3a:         Topic advisoryTopic = new ActiveMQTopic(AdvisorySupport.MESSAGE_DELIVERED_TOPIC_PREFIX + ">");
1:179dc3a:         MessageConsumer advisoryConsumer = s.createConsumer(advisoryTopic);
1:179dc3a: 
1:179dc3a:         // throw messages at the vt
1:179dc3a:         MessageProducer producer = s.createProducer(vt);
1:179dc3a: 
1:179dc3a:         BytesMessage m = s.createBytesMessage();
1:179dc3a:         m.writeBytes(new byte[1024]);
1:179dc3a:         producer.send(m);
1:179dc3a: 
1:179dc3a:         Message msg = null;
1:179dc3a:         while ((msg = advisoryConsumer.receive(1000)) != null) {
1:179dc3a:             ActiveMQMessage message = (ActiveMQMessage) msg;
1:179dc3a:             String dest = (String) message.getProperty(AdvisorySupport.MSG_PROPERTY_DESTINATION);
1:179dc3a:             dests.remove(dest);
1:179dc3a:             assertIncludeBodyForAdvisory((ActiveMQMessage) message.getDataStructure());
1:179dc3a:         }
1:179dc3a: 
1:179dc3a:         assertTrue("Got delivered for all: " + dests, dests.isEmpty());
1:179dc3a:     }
1:179dc3a: 
1:c10e6fa:     @Before
1:c10e6fa:     public void setUp() throws Exception {
1:cdc2fd3:         if (broker == null) {
1:cdc2fd3:             broker = createBroker();
1:cdc2fd3:         }
1:cdc2fd3:         ConnectionFactory factory = createConnectionFactory();
1:cdc2fd3:         connection = factory.createConnection();
1:cdc2fd3:         connection.start();
1:cdc2fd3:     }
23:cdc2fd3: 
1:c10e6fa:     @After
1:3bfffca:     public void tearDown() throws Exception {
1:cdc2fd3:         connection.close();
1:cdc2fd3:         if (broker != null) {
1:cdc2fd3:             broker.stop();
1:cdc2fd3:         }
1:cdc2fd3:     }
1:cdc2fd3: 
1:c10e6fa:     protected ActiveMQConnectionFactory createConnectionFactory() throws Exception {
1:d1e2b76:         return new ActiveMQConnectionFactory(broker.getTransportConnectorByName("OpenWire").getPublishableConnectString());
1:cdc2fd3:     }
1:cdc2fd3: 
1:cdc2fd3:     protected BrokerService createBroker() throws Exception {
1:cdc2fd3:         BrokerService answer = new BrokerService();
1:cdc2fd3:         configureBroker(answer);
1:cdc2fd3:         answer.start();
1:cdc2fd3:         return answer;
1:cdc2fd3:     }
1:cdc2fd3: 
1:cdc2fd3:     protected void configureBroker(BrokerService answer) throws Exception {
1:cdc2fd3:         answer.setPersistent(false);
1:cdc2fd3:         PolicyEntry policy = new PolicyEntry();
1:c10e6fa:         policy.setExpireMessagesPeriod(EXPIRE_MESSAGE_PERIOD);
1:db1f6fe:         policy.setAdvisoryForFastProducers(true);
1:cdc2fd3:         policy.setAdvisoryForConsumed(true);
1:cdc2fd3:         policy.setAdvisoryForDelivery(true);
1:cdc2fd3:         policy.setAdvisoryForDiscardingMessages(true);
1:cdc2fd3:         policy.setAdvisoryForSlowConsumers(true);
1:cdc2fd3:         policy.setAdvisoryWhenFull(true);
1:edacc2a:         policy.setIncludeBodyForAdvisory(includeBodyForAdvisory);
1:cdc2fd3:         policy.setProducerFlowControl(false);
1:c10e6fa:         ConstantPendingMessageLimitStrategy strategy = new ConstantPendingMessageLimitStrategy();
1:cdc2fd3:         strategy.setLimit(10);
1:cdc2fd3:         policy.setPendingMessageLimitStrategy(strategy);
1:cdc2fd3:         PolicyMap pMap = new PolicyMap();
1:cdc2fd3:         pMap.setDefaultEntry(policy);
1:cdc2fd3: 
1:cdc2fd3:         answer.setDestinationPolicy(pMap);
1:fc3e026:         answer.addConnector("nio://localhost:0");
1:d1e2b76:         answer.addConnector("tcp://localhost:0").setName("OpenWire");
1:cdc2fd3:         answer.setDeleteAllMessagesOnStartup(true);
1:cdc2fd3:     }
1:edacc2a: 
1:edacc2a:     protected void assertIncludeBodyForAdvisory(ActiveMQMessage payload) {
1:edacc2a:         if (includeBodyForAdvisory) {
1:edacc2a:             assertNotNull(payload.getContent());
1:edacc2a:         } else {
1:edacc2a:             assertNull(payload.getContent());
1:edacc2a:         }
1:edacc2a:     }
1:cdc2fd3: }
============================================================================
author:Timothy Bish
-------------------------------------------------------------------------------
commit:d1e2b76
/////////////////////////////////////////////////////////////////////////
1:         return new ActiveMQConnectionFactory(broker.getTransportConnectorByName("OpenWire").getPublishableConnectString());
/////////////////////////////////////////////////////////////////////////
1:         answer.addConnector("tcp://localhost:0").setName("OpenWire");
commit:3bfffca
/////////////////////////////////////////////////////////////////////////
1:     public void tearDown() throws Exception {
commit:c10e6fa
/////////////////////////////////////////////////////////////////////////
1: import static org.junit.Assert.assertEquals;
1: import static org.junit.Assert.assertNotNull;
1: import static org.junit.Assert.assertNull;
1: 
/////////////////////////////////////////////////////////////////////////
1: import org.apache.activemq.broker.region.policy.ConstantPendingMessageLimitStrategy;
1: import org.apache.activemq.broker.region.policy.PolicyEntry;
1: import org.apache.activemq.broker.region.policy.PolicyMap;
1: import org.junit.After;
1: import org.junit.Before;
0: import org.junit.Ignore;
1: import org.junit.Test;
1:  * Test for advisory messages sent under the right circumstances.
1: public class AdvisoryTests {
1: 
1:     protected final int EXPIRE_MESSAGE_PERIOD = 10000;
1:     @Test(timeout = 60000)
/////////////////////////////////////////////////////////////////////////
1: 
1:         Topic advisoryTopic = AdvisorySupport.getSlowConsumerAdvisoryTopic((ActiveMQDestination) queue);
/////////////////////////////////////////////////////////////////////////
1:     @Test(timeout = 60000)
1:         Topic advisoryTopic = AdvisorySupport.getSlowConsumerAdvisoryTopic((ActiveMQDestination) queue);
/////////////////////////////////////////////////////////////////////////
1:     @Test(timeout = 60000)
/////////////////////////////////////////////////////////////////////////
1:         // start throwing messages at the consumer
/////////////////////////////////////////////////////////////////////////
1:     @Test(timeout = 60000)
/////////////////////////////////////////////////////////////////////////
1:         // start throwing messages at the consumer
/////////////////////////////////////////////////////////////////////////
1:     @Test(timeout = 60000)
/////////////////////////////////////////////////////////////////////////
1:         // start throwing messages at the consumer
/////////////////////////////////////////////////////////////////////////
1:         Message msg = advisoryConsumer.receive(EXPIRE_MESSAGE_PERIOD);
1:     @Test(timeout = 60000)
1:         ((ActiveMQConnection) connection).setPrefetchPolicy(policy);
1:             s.createConsumer(advisoryTopic);
1: 
0:     @Ignore
1:     @Test(timeout = 60000)
1:     public void testMessageDiscardedAdvisory() throws Exception {
/////////////////////////////////////////////////////////////////////////
1:         // start throwing messages at the consumer
/////////////////////////////////////////////////////////////////////////
1:     @Before
1:     public void setUp() throws Exception {
1:     @After
1:     protected ActiveMQConnectionFactory createConnectionFactory() throws Exception {
0:         ActiveMQConnectionFactory cf = new ActiveMQConnectionFactory(ActiveMQConnection.DEFAULT_BROKER_URL);
/////////////////////////////////////////////////////////////////////////
1:         policy.setExpireMessagesPeriod(EXPIRE_MESSAGE_PERIOD);
/////////////////////////////////////////////////////////////////////////
1:         ConstantPendingMessageLimitStrategy strategy = new ConstantPendingMessageLimitStrategy();
author:gtully
-------------------------------------------------------------------------------
commit:179dc3a
/////////////////////////////////////////////////////////////////////////
1: import java.util.HashSet;
/////////////////////////////////////////////////////////////////////////
1: import org.apache.activemq.command.ActiveMQQueue;
1: import org.apache.activemq.command.ActiveMQTopic;
/////////////////////////////////////////////////////////////////////////
1:     @Parameters(name = "includeBodyForAdvisory={0}")
/////////////////////////////////////////////////////////////////////////
1:     @Test(timeout = 60000)
1:     public void testMessageDeliveryVTAdvisory() throws Exception {
1:         Session s = connection.createSession(false, Session.AUTO_ACKNOWLEDGE);
1:         ActiveMQTopic vt = new ActiveMQTopic("VirtualTopic.TEST");
1: 
1:         ActiveMQQueue a  = new ActiveMQQueue("Consumer.A.VirtualTopic.TEST");
1:         MessageConsumer consumer = s.createConsumer(a);
1: 
1:         ActiveMQQueue b = new ActiveMQQueue("Consumer.B.VirtualTopic.TEST");
1:         MessageConsumer consumerB = s.createConsumer(b);
1: 
1:         assertNotNull(consumer);
1:         assertNotNull(consumerB);
1: 
1:         HashSet<String> dests = new HashSet<String>();
1:         dests.add(vt.getQualifiedName());
1:         dests.add(a.getQualifiedName());
1:         dests.add(b.getQualifiedName());
1: 
1: 
1:         Topic advisoryTopic = new ActiveMQTopic(AdvisorySupport.MESSAGE_DELIVERED_TOPIC_PREFIX + ">");
1:         MessageConsumer advisoryConsumer = s.createConsumer(advisoryTopic);
1: 
1:         // throw messages at the vt
1:         MessageProducer producer = s.createProducer(vt);
1: 
1:         BytesMessage m = s.createBytesMessage();
1:         m.writeBytes(new byte[1024]);
1:         producer.send(m);
1: 
1:         Message msg = null;
1:         while ((msg = advisoryConsumer.receive(1000)) != null) {
1:             ActiveMQMessage message = (ActiveMQMessage) msg;
1:             String dest = (String) message.getProperty(AdvisorySupport.MSG_PROPERTY_DESTINATION);
1:             dests.remove(dest);
1:             assertIncludeBodyForAdvisory((ActiveMQMessage) message.getDataStructure());
1:         }
1: 
1:         assertTrue("Got delivered for all: " + dests, dests.isEmpty());
1:     }
1: 
commit:75ff17a
/////////////////////////////////////////////////////////////////////////
1:         assertEquals(message.getProperty(AdvisorySupport.MSG_PROPERTY_DESTINATION), ((ActiveMQDestination) queue).getQualifiedName());
/////////////////////////////////////////////////////////////////////////
1:         assertEquals(message.getProperty(AdvisorySupport.MSG_PROPERTY_DESTINATION), ((ActiveMQDestination) queue).getQualifiedName());
/////////////////////////////////////////////////////////////////////////
1:         Session s = connection.createSession(false, Session.CLIENT_ACKNOWLEDGE);
/////////////////////////////////////////////////////////////////////////
1:         assertEquals(message.getProperty(AdvisorySupport.MSG_PROPERTY_DESTINATION), ((ActiveMQDestination) topic).getQualifiedName());
author:Christopher L. Shannon (cshannon)
-------------------------------------------------------------------------------
commit:fc3e026
/////////////////////////////////////////////////////////////////////////
1: import static org.junit.Assert.assertTrue;
/////////////////////////////////////////////////////////////////////////
1: 
1:         //This should always be tcp:// because that is the transport that is used to connect even though
1:         //the nio transport is the first one in the list
1:         assertTrue(((String)message.getProperty(AdvisorySupport.MSG_PROPERTY_ORIGIN_BROKER_URL)).startsWith("tcp://"));
1: 
/////////////////////////////////////////////////////////////////////////
1: 
1:         //This should always be tcp:// because that is the transport that is used to connect even though
1:         //the nio transport is the first one in the list
1:         assertTrue(((String)message.getProperty(AdvisorySupport.MSG_PROPERTY_ORIGIN_BROKER_URL)).startsWith("tcp://"));
1: 
/////////////////////////////////////////////////////////////////////////
1: 
1:         //This should be set
1:         assertNotNull(message.getProperty(AdvisorySupport.MSG_PROPERTY_ORIGIN_BROKER_URL));
1: 
/////////////////////////////////////////////////////////////////////////
1:         //This should be set
1:         assertNotNull(message.getProperty(AdvisorySupport.MSG_PROPERTY_ORIGIN_BROKER_URL));
/////////////////////////////////////////////////////////////////////////
1: 
1:         //This should be set
1:         assertNotNull(message.getProperty(AdvisorySupport.MSG_PROPERTY_ORIGIN_BROKER_URL));
1: 
/////////////////////////////////////////////////////////////////////////
1:         answer.addConnector("nio://localhost:0");
commit:edacc2a
/////////////////////////////////////////////////////////////////////////
1: import java.util.Arrays;
1: import java.util.Collection;
1: 
/////////////////////////////////////////////////////////////////////////
1: import org.junit.runner.RunWith;
1: import org.junit.runners.Parameterized;
1: import org.junit.runners.Parameterized.Parameters;
1: @RunWith(Parameterized.class)
/////////////////////////////////////////////////////////////////////////
1:     protected final boolean includeBodyForAdvisory;
1: 
0:     @Parameters
1:     public static Collection<Object[]> data() {
1:         return Arrays.asList(new Object[][] {
1:                 // Include the full body of the message
1:                 {true},
1:                 // Don't include the full body of the message
1:                 {false}
1:         });
1:     }
1: 
1:     public AdvisoryTests(boolean includeBodyForAdvisory) {
1:         super();
1:         this.includeBodyForAdvisory = includeBodyForAdvisory;
1:     }
1: 
/////////////////////////////////////////////////////////////////////////
1:         ActiveMQMessage message = (ActiveMQMessage) msg;
1:         ActiveMQMessage payload = (ActiveMQMessage) message.getDataStructure();
1:         //Add assertion to make sure body is included for advisory topics
1:         //when includeBodyForAdvisory is true
1:         assertIncludeBodyForAdvisory(payload);
/////////////////////////////////////////////////////////////////////////
1:         //Add assertion to make sure body is included for advisory topics
1:         //when includeBodyForAdvisory is true
1:         assertIncludeBodyForAdvisory(payload);
/////////////////////////////////////////////////////////////////////////
1:         ActiveMQMessage message = (ActiveMQMessage) msg;
1:         ActiveMQMessage payload = (ActiveMQMessage) message.getDataStructure();
1:         //Add assertion to make sure body is included for advisory topics
1:         //when includeBodyForAdvisory is true
1:         assertIncludeBodyForAdvisory(payload);
/////////////////////////////////////////////////////////////////////////
1:         MessageConsumer advisoryConsumer = s.createConsumer(AdvisorySupport.getMessageDLQdAdvisoryTopic((ActiveMQDestination) topic));
1:             m.writeBytes(new byte[1024]);
1:         Message msg = advisoryConsumer.receive(1000);
1:         assertNotNull(msg);
1:         ActiveMQMessage message = (ActiveMQMessage) msg;
1:         ActiveMQMessage payload = (ActiveMQMessage) message.getDataStructure();
1:         //Add assertion to make sure body is included for DLQ advisory topics
1:         //when includeBodyForAdvisory is true
1:         assertIncludeBodyForAdvisory(payload);
1: 
/////////////////////////////////////////////////////////////////////////
1:             m.writeBytes(new byte[1024]);
1:         ActiveMQMessage message = (ActiveMQMessage) msg;
1:         ActiveMQMessage payload = (ActiveMQMessage) message.getDataStructure();
1:         //Add assertion to make sure body is included for advisory topics
1:         //when includeBodyForAdvisory is true
1:         assertIncludeBodyForAdvisory(payload);
/////////////////////////////////////////////////////////////////////////
1:         policy.setIncludeBodyForAdvisory(includeBodyForAdvisory);
/////////////////////////////////////////////////////////////////////////
1: 
1:     protected void assertIncludeBodyForAdvisory(ActiveMQMessage payload) {
1:         if (includeBodyForAdvisory) {
1:             assertNotNull(payload.getContent());
1:         } else {
1:             assertNull(payload.getContent());
1:         }
1:     }
author:Dejan Bosanac
-------------------------------------------------------------------------------
commit:2562cf2
/////////////////////////////////////////////////////////////////////////
0: import org.apache.activemq.broker.region.policy.*;
0: import org.apache.activemq.command.ActiveMQTopic;
0: import org.apache.activemq.util.Wait;
/////////////////////////////////////////////////////////////////////////
1:     public void testMessageDLQd() throws Exception {
1:         ActiveMQPrefetchPolicy policy = new ActiveMQPrefetchPolicy();
1:         policy.setTopicPrefetch(2);
0:         ((ActiveMQConnection)connection).setPrefetchPolicy(policy);
1:         Session s = connection.createSession(false, Session.CLIENT_ACKNOWLEDGE);
1:         Topic topic = s.createTopic(getClass().getName());
1: 
1:         Topic advisoryTopic = s.createTopic(">");
1:         for (int i = 0; i < 100; i++) {
1:             MessageConsumer advisoryConsumer = s.createConsumer(advisoryTopic);
1:         }
1: 
1: 
1:         MessageProducer producer = s.createProducer(topic);
1:         int count = 10;
1:         for (int i = 0; i < count; i++) {
1:             BytesMessage m = s.createBytesMessage();
1:             producer.send(m);
1:         }
1:         // we should get here without StackOverflow
1:     }
1: 
author:Timothy A. Bish
-------------------------------------------------------------------------------
commit:c7d559f
/////////////////////////////////////////////////////////////////////////
1: 
1: 
/////////////////////////////////////////////////////////////////////////
1:  *
/////////////////////////////////////////////////////////////////////////
1: 
1:             @Override
/////////////////////////////////////////////////////////////////////////
1: 
1:         assertNotNull(consumer);
1: 
/////////////////////////////////////////////////////////////////////////
1: 
1:     public void testMessageDeliveryAdvisory() throws Exception {
1:         assertNotNull(consumer);
1: 
1: 
1: 
1: 
1:     public void testMessageConsumedAdvisory() throws Exception {
1: 
1: 
1: 
1: 
1: 
1:         assertNotNull(consumer);
1: 
/////////////////////////////////////////////////////////////////////////
1: 
1: 
1:         assertNotNull(consumer);
1: 
/////////////////////////////////////////////////////////////////////////
1: 
0:     @Override
/////////////////////////////////////////////////////////////////////////
0:     @Override
commit:ef24cc9
author:Gary Tully
-------------------------------------------------------------------------------
commit:db1f6fe
/////////////////////////////////////////////////////////////////////////
1:         policy.setAdvisoryForFastProducers(true);
commit:657e6fa
/////////////////////////////////////////////////////////////////////////
1: import org.apache.activemq.command.ActiveMQMessage;
/////////////////////////////////////////////////////////////////////////
1:         String id = m.getJMSMessageID();
1:         
1:         ActiveMQMessage message = (ActiveMQMessage) msg;
1:         ActiveMQMessage payload = (ActiveMQMessage) message.getDataStructure();
1:         String originalId = payload.getJMSMessageID();
1:         assertEquals(originalId, id);
author:Hiram R. Chirino
-------------------------------------------------------------------------------
commit:b0c2a40
/////////////////////////////////////////////////////////////////////////
1:  * 
author:Robert Davies
-------------------------------------------------------------------------------
commit:cdc2fd3
/////////////////////////////////////////////////////////////////////////
1: /**
1:  * Licensed to the Apache Software Foundation (ASF) under one or more
1:  * contributor license agreements.  See the NOTICE file distributed with
1:  * this work for additional information regarding copyright ownership.
1:  * The ASF licenses this file to You under the Apache License, Version 2.0
1:  * (the "License"); you may not use this file except in compliance with
1:  * the License.  You may obtain a copy of the License at
0:  *
1:  *      http://www.apache.org/licenses/LICENSE-2.0
0:  *
1:  * Unless required by applicable law or agreed to in writing, software
1:  * distributed under the License is distributed on an "AS IS" BASIS,
1:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:  * See the License for the specific language governing permissions and
1:  * limitations under the License.
1:  */
1: package org.apache.activemq.advisory;
1: 
1: import javax.jms.BytesMessage;
1: import javax.jms.Connection;
1: import javax.jms.ConnectionFactory;
1: import javax.jms.Message;
1: import javax.jms.MessageConsumer;
1: import javax.jms.MessageListener;
1: import javax.jms.MessageProducer;
1: import javax.jms.Queue;
1: import javax.jms.Session;
1: import javax.jms.Topic;
0: import junit.framework.TestCase;
1: import org.apache.activemq.ActiveMQConnection;
1: import org.apache.activemq.ActiveMQConnectionFactory;
1: import org.apache.activemq.ActiveMQPrefetchPolicy;
1: import org.apache.activemq.broker.BrokerService;
0: import org.apache.activemq.broker.region.policy.ConstantPendingMessageLimitStrategy;
0: import org.apache.activemq.broker.region.policy.PolicyEntry;
0: import org.apache.activemq.broker.region.policy.PolicyMap;
1: import org.apache.activemq.command.ActiveMQDestination;
1: 
1: /**
0:  * @version $Revision: 1.3 $
1:  */
0: public class AdvisoryTests extends TestCase {
1:     protected static final int MESSAGE_COUNT = 2000;
1:     protected BrokerService broker;
1:     protected Connection connection;
1:     protected String bindAddress = ActiveMQConnectionFactory.DEFAULT_BROKER_BIND_URL;
1:     protected int topicCount;
1:    
1: 
1:     public void testNoSlowConsumerAdvisory() throws Exception {
1:         Session s = connection.createSession(false, Session.AUTO_ACKNOWLEDGE);
1:         Queue queue = s.createQueue(getClass().getName());
1:         MessageConsumer consumer = s.createConsumer(queue);
1:         consumer.setMessageListener(new MessageListener() {
1:             public void onMessage(Message message) {
1:             }
1:         });
0:         Topic advisoryTopic = AdvisorySupport
0:                 .getSlowConsumerAdvisoryTopic((ActiveMQDestination) queue);
1:         s = connection.createSession(false, Session.AUTO_ACKNOWLEDGE);
1:         MessageConsumer advisoryConsumer = s.createConsumer(advisoryTopic);
1:         // start throwing messages at the consumer
1:         MessageProducer producer = s.createProducer(queue);
1:         for (int i = 0; i < MESSAGE_COUNT; i++) {
1:             BytesMessage m = s.createBytesMessage();
1:             m.writeBytes(new byte[1024]);
1:             producer.send(m);
1:         }
1:         Message msg = advisoryConsumer.receive(1000);
1:         assertNull(msg);
1:     }
1:     
1:     public void testSlowConsumerAdvisory() throws Exception {
1:         Session s = connection.createSession(false, Session.AUTO_ACKNOWLEDGE);
1:         Queue queue = s.createQueue(getClass().getName());
1:         MessageConsumer consumer = s.createConsumer(queue);
1:         
0:         Topic advisoryTopic = AdvisorySupport
0:                 .getSlowConsumerAdvisoryTopic((ActiveMQDestination) queue);
1:         s = connection.createSession(false, Session.AUTO_ACKNOWLEDGE);
1:         MessageConsumer advisoryConsumer = s.createConsumer(advisoryTopic);
1:         // start throwing messages at the consumer
1:         MessageProducer producer = s.createProducer(queue);
1:         for (int i = 0; i < MESSAGE_COUNT; i++) {
1:             BytesMessage m = s.createBytesMessage();
1:             m.writeBytes(new byte[1024]);
1:             producer.send(m);
1:         }
1:         Message msg = advisoryConsumer.receive(1000);
1:         assertNotNull(msg);
1:     }
1:     
0:     public void testMessageDeliveryAdvisory() throws Exception {        
1:         Session s = connection.createSession(false, Session.AUTO_ACKNOWLEDGE);
1:         Queue queue = s.createQueue(getClass().getName());
1:         MessageConsumer consumer = s.createConsumer(queue);
1:                 
1:         Topic advisoryTopic = AdvisorySupport.getMessageDeliveredAdvisoryTopic((ActiveMQDestination) queue);
1:         MessageConsumer advisoryConsumer = s.createConsumer(advisoryTopic);
0:         //start throwing messages at the consumer
1:         MessageProducer producer = s.createProducer(queue);
1:         
1:         BytesMessage m = s.createBytesMessage();
1:         m.writeBytes(new byte[1024]);
1:         producer.send(m);
1:         
1:         Message msg = advisoryConsumer.receive(1000);
1:         assertNotNull(msg);
1:     }
1:     
0:     public void testMessageConsumedAdvisory() throws Exception {        
1:         Session s = connection.createSession(false, Session.AUTO_ACKNOWLEDGE);
1:         Queue queue = s.createQueue(getClass().getName());
1:         MessageConsumer consumer = s.createConsumer(queue);
1:                 
1:         Topic advisoryTopic = AdvisorySupport.getMessageConsumedAdvisoryTopic((ActiveMQDestination) queue);
1:         MessageConsumer advisoryConsumer = s.createConsumer(advisoryTopic);
0:         //start throwing messages at the consumer
1:         MessageProducer producer = s.createProducer(queue);
1:         
1:         BytesMessage m = s.createBytesMessage();
1:         m.writeBytes(new byte[1024]);
1:         producer.send(m);
1:         Message msg = consumer.receive(1000);
1:         assertNotNull(msg);
1:         
1:         msg = advisoryConsumer.receive(1000);
1:         assertNotNull(msg);
1:     }
1:     
1:     public void testMessageExpiredAdvisory() throws Exception {
1:         Session s = connection.createSession(false, Session.AUTO_ACKNOWLEDGE);
1:         Queue queue = s.createQueue(getClass().getName());
1:         MessageConsumer consumer = s.createConsumer(queue);
1:                 
1:         Topic advisoryTopic = AdvisorySupport.getExpiredMessageTopic((ActiveMQDestination) queue);
1:         MessageConsumer advisoryConsumer = s.createConsumer(advisoryTopic);
0:         //start throwing messages at the consumer
1:         MessageProducer producer = s.createProducer(queue);
1:         producer.setTimeToLive(1);
1:         for (int i = 0; i < MESSAGE_COUNT; i++) {
1:             BytesMessage m = s.createBytesMessage();
1:             m.writeBytes(new byte[1024]);
1:             producer.send(m);
1:         }
1:                 
0:         Message msg = advisoryConsumer.receive(2000);
1:         assertNotNull(msg);
1:     }
1:     
0:     public void xtestMessageDiscardedAdvisory() throws Exception {
1:         Session s = connection.createSession(false, Session.AUTO_ACKNOWLEDGE);
1:         Topic topic = s.createTopic(getClass().getName());
1:         MessageConsumer consumer = s.createConsumer(topic);
1:                 
1:         Topic advisoryTopic = AdvisorySupport.getMessageDiscardedAdvisoryTopic((ActiveMQDestination) topic);
1:         MessageConsumer advisoryConsumer = s.createConsumer(advisoryTopic);
0:         //start throwing messages at the consumer
1:         MessageProducer producer = s.createProducer(topic);
1:         int count = (new ActiveMQPrefetchPolicy().getTopicPrefetch() * 2);
1:         for (int i = 0; i < count; i++) {
1:             BytesMessage m = s.createBytesMessage();
1:             producer.send(m);
1:         }
1:                 
1:         Message msg = advisoryConsumer.receive(1000);
1:         assertNotNull(msg);
1:     }
1: 
1:    
0:     protected void setUp() throws Exception {
1:         if (broker == null) {
1:             broker = createBroker();
1:         }
1:         ConnectionFactory factory = createConnectionFactory();
1:         connection = factory.createConnection();
1:         connection.start();
0:         super.setUp();
1:     }
1: 
0:     protected void tearDown() throws Exception {
0:         super.tearDown();
1:         connection.close();
1:         if (broker != null) {
1:             broker.stop();
1:         }
1:     }
1: 
0:     protected ActiveMQConnectionFactory createConnectionFactory()
0:             throws Exception {
0:         ActiveMQConnectionFactory cf = new ActiveMQConnectionFactory(
0:                 ActiveMQConnection.DEFAULT_BROKER_URL);
0:         return cf;
1:     }
1: 
1:     protected BrokerService createBroker() throws Exception {
1:         BrokerService answer = new BrokerService();
1:         configureBroker(answer);
1:         answer.start();
1:         return answer;
1:     }
1: 
1:     protected void configureBroker(BrokerService answer) throws Exception {
1:         answer.setPersistent(false);
1:         PolicyEntry policy = new PolicyEntry();
0:         policy.setAdvisdoryForFastProducers(true);
1:         policy.setAdvisoryForConsumed(true);
1:         policy.setAdvisoryForDelivery(true);
1:         policy.setAdvisoryForDiscardingMessages(true);
1:         policy.setAdvisoryForSlowConsumers(true);
1:         policy.setAdvisoryWhenFull(true);
1:         policy.setProducerFlowControl(false);
0:         ConstantPendingMessageLimitStrategy strategy  = new ConstantPendingMessageLimitStrategy();
1:         strategy.setLimit(10);
1:         policy.setPendingMessageLimitStrategy(strategy);
1:         PolicyMap pMap = new PolicyMap();
1:         pMap.setDefaultEntry(policy);
1: 
1:         answer.setDestinationPolicy(pMap);
0:         answer.addConnector(bindAddress);
1:         answer.setDeleteAllMessagesOnStartup(true);
1:     }
1: }
============================================================================