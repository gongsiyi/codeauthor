1:98c5866: /**
1:98c5866:  * Licensed to the Apache Software Foundation (ASF) under one or more
1:98c5866:  * contributor license agreements.  See the NOTICE file distributed with
1:98c5866:  * this work for additional information regarding copyright ownership.
1:98c5866:  * The ASF licenses this file to You under the Apache License, Version 2.0
1:98c5866:  * (the "License"); you may not use this file except in compliance with
1:98c5866:  * the License.  You may obtain a copy of the License at
1:98c5866:  *
1:98c5866:  *      http://www.apache.org/licenses/LICENSE-2.0
1:98c5866:  *
1:98c5866:  * Unless required by applicable law or agreed to in writing, software
1:98c5866:  * distributed under the License is distributed on an "AS IS" BASIS,
1:98c5866:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:98c5866:  * See the License for the specific language governing permissions and
1:98c5866:  * limitations under the License.
1:98c5866:  */
1:98c5866: package org.apache.activemq.transport.auto;
1:98c5866: 
1:98c5866: import static org.junit.Assert.assertTrue;
1:98c5866: 
1:98c5866: import java.security.cert.X509Certificate;
1:98c5866: import java.util.ArrayList;
1:98c5866: import java.util.Arrays;
1:98c5866: import java.util.Collection;
1:9ab9488: import java.util.concurrent.atomic.AtomicInteger;
1:98c5866: 
1:98c5866: import org.apache.activemq.ActiveMQConnectionFactory;
1:98c5866: import org.apache.activemq.broker.Broker;
1:98c5866: import org.apache.activemq.broker.BrokerFilter;
1:98c5866: import org.apache.activemq.broker.BrokerPlugin;
1:98c5866: import org.apache.activemq.broker.BrokerService;
1:98c5866: import org.apache.activemq.broker.ConnectionContext;
1:9ab9488: import org.apache.activemq.broker.TransportConnection;
1:98c5866: import org.apache.activemq.broker.TransportConnector;
1:98c5866: import org.apache.activemq.command.ConnectionInfo;
1:98c5866: import org.junit.After;
1:98c5866: import org.junit.Before;
1:98c5866: import org.junit.Test;
1:98c5866: import org.junit.runner.RunWith;
1:98c5866: import org.junit.runners.Parameterized;
1:98c5866: import org.junit.runners.Parameterized.Parameters;
1:98c5866: 
1:98c5866: @RunWith(Parameterized.class)
1:98c5866: public class AutoSslAuthTest {
1:98c5866: 
1:98c5866:     public static final String KEYSTORE_TYPE = "jks";
1:98c5866:     public static final String PASSWORD = "password";
1:98c5866:     public static final String SERVER_KEYSTORE = "src/test/resources/server.keystore";
1:98c5866:     public static final String TRUST_KEYSTORE = "src/test/resources/client.keystore";
1:98c5866: 
1:98c5866:     private String uri;
1:98c5866:     private final String protocol;
1:9ab9488:     private AtomicInteger hasCertificateCount = new AtomicInteger();
1:98c5866:     private BrokerService brokerService;
1:98c5866: 
1:98c5866:     @Parameters(name="protocol={0}")
1:98c5866:     public static Collection<Object[]> data() {
1:98c5866:         return Arrays.asList(new Object[][] {
1:98c5866:                 {"auto+nio+ssl"},
1:98c5866:                 {"auto+ssl"}
1:98c5866:             });
1:98c5866:     }
1:98c5866: 
1:98c5866:     static {
1:98c5866:         System.setProperty("javax.net.ssl.trustStore", TRUST_KEYSTORE);
1:98c5866:         System.setProperty("javax.net.ssl.trustStorePassword", PASSWORD);
1:98c5866:         System.setProperty("javax.net.ssl.trustStoreType", KEYSTORE_TYPE);
1:98c5866:         System.setProperty("javax.net.ssl.keyStore", SERVER_KEYSTORE);
1:98c5866:         System.setProperty("javax.net.ssl.keyStorePassword", PASSWORD);
1:98c5866:         System.setProperty("javax.net.ssl.keyStoreType", KEYSTORE_TYPE);
1:98c5866:     }
1:98c5866: 
1:98c5866:     @Before
1:98c5866:     public void before() throws Exception {
1:98c5866:         BrokerService brokerService = new BrokerService();
1:98c5866:         brokerService.setPersistent(false);
1:98c5866: 
1:1e31df9:         TransportConnector connector = brokerService.addConnector(protocol + "://localhost:0?transport.needClientAuth=true");
1:9ab9488:         connector.setName("auto");
1:98c5866:         uri = connector.getPublishableConnectString();
1:98c5866: 
1:98c5866:         ArrayList<BrokerPlugin> plugins = new ArrayList<BrokerPlugin>();
1:98c5866: 
1:98c5866:         plugins.add(new BrokerPlugin() {
1:98c5866: 
1:98c5866:             @Override
1:98c5866:             public Broker installPlugin(Broker broker) throws Exception {
1:98c5866:                 return new BrokerFilter(broker) {
1:98c5866: 
1:98c5866:                     @Override
1:98c5866:                     public void addConnection(ConnectionContext context, ConnectionInfo info) throws Exception {
1:98c5866:                         super.addConnection(context, info);
1:9ab9488:                         if (info.getTransportContext() instanceof X509Certificate[]) {
1:9ab9488:                             hasCertificateCount.getAndIncrement();
1:9ab9488:                         }
1:98c5866:                     }
1:98c5866:                 };
1:98c5866:             }
1:98c5866:         });
1:98c5866: 
1:98c5866:         if (!plugins.isEmpty()) {
1:98c5866:             BrokerPlugin[] array = new BrokerPlugin[plugins.size()];
1:98c5866:             brokerService.setPlugins(plugins.toArray(array));
1:98c5866:         }
1:98c5866: 
1:98c5866:         this.brokerService = brokerService;
1:98c5866:         brokerService.start();
1:98c5866:         brokerService.waitUntilStarted();
1:98c5866:     }
1:98c5866: 
1:98c5866:     @After
1:98c5866:     public void after() throws Exception {
1:98c5866:         if (brokerService != null) {
1:98c5866:             brokerService.stop();
1:98c5866:             brokerService.waitUntilStopped();
1:98c5866:         }
1:98c5866:     }
1:98c5866: 
1:98c5866:     /**
1:98c5866:      * @param isNio
1:98c5866:      */
1:98c5866:     public AutoSslAuthTest(String protocol) {
1:98c5866:         this.protocol = protocol;
1:98c5866:     }
1:98c5866: 
1:98c5866:     @Test(timeout = 60000)
1:98c5866:     public void testConnect() throws Exception {
1:98c5866:         ActiveMQConnectionFactory factory = new ActiveMQConnectionFactory();
1:1e31df9:         factory.setBrokerURL(uri);
1:98c5866: 
1:9ab9488:         //Create 5 connections to make sure all are properly set
1:9ab9488:         for (int i = 0; i < 5; i++) {
1:9ab9488:             factory.createConnection().start();
1:9ab9488:         }
1:9ab9488: 
1:9ab9488:         assertTrue(hasCertificateCount.get() == 5);
1:9ab9488: 
1:9ab9488:         for (TransportConnection connection : brokerService.getTransportConnectorByName("auto").getConnections()) {
1:9ab9488:             assertTrue(connection.getTransport().getPeerCertificates() != null);
1:9ab9488:         }
1:98c5866:     }
1:98c5866: }
============================================================================
author:Christopher L. Shannon (cshannon)
-------------------------------------------------------------------------------
commit:1e31df9
/////////////////////////////////////////////////////////////////////////
1:         TransportConnector connector = brokerService.addConnector(protocol + "://localhost:0?transport.needClientAuth=true");
/////////////////////////////////////////////////////////////////////////
1:         factory.setBrokerURL(uri);
commit:69fad2a
/////////////////////////////////////////////////////////////////////////
0:         TransportConnector connector = brokerService.addConnector(protocol + "://localhost:0?transport.needClientAuth=true&transport.verifyHostName=false");
/////////////////////////////////////////////////////////////////////////
0:         factory.setBrokerURL(uri + "?socket.verifyHostName=false");
commit:9ab9488
/////////////////////////////////////////////////////////////////////////
1: import java.util.concurrent.atomic.AtomicInteger;
/////////////////////////////////////////////////////////////////////////
1: import org.apache.activemq.broker.TransportConnection;
/////////////////////////////////////////////////////////////////////////
1:     private AtomicInteger hasCertificateCount = new AtomicInteger();
/////////////////////////////////////////////////////////////////////////
1:         connector.setName("auto");
/////////////////////////////////////////////////////////////////////////
1:                         if (info.getTransportContext() instanceof X509Certificate[]) {
1:                             hasCertificateCount.getAndIncrement();
1:                         }
/////////////////////////////////////////////////////////////////////////
1:         //Create 5 connections to make sure all are properly set
1:         for (int i = 0; i < 5; i++) {
1:             factory.createConnection().start();
1:         }
1: 
1:         assertTrue(hasCertificateCount.get() == 5);
1: 
1:         for (TransportConnection connection : brokerService.getTransportConnectorByName("auto").getConnections()) {
1:             assertTrue(connection.getTransport().getPeerCertificates() != null);
1:         }
commit:98c5866
/////////////////////////////////////////////////////////////////////////
1: /**
1:  * Licensed to the Apache Software Foundation (ASF) under one or more
1:  * contributor license agreements.  See the NOTICE file distributed with
1:  * this work for additional information regarding copyright ownership.
1:  * The ASF licenses this file to You under the Apache License, Version 2.0
1:  * (the "License"); you may not use this file except in compliance with
1:  * the License.  You may obtain a copy of the License at
1:  *
1:  *      http://www.apache.org/licenses/LICENSE-2.0
1:  *
1:  * Unless required by applicable law or agreed to in writing, software
1:  * distributed under the License is distributed on an "AS IS" BASIS,
1:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:  * See the License for the specific language governing permissions and
1:  * limitations under the License.
1:  */
1: package org.apache.activemq.transport.auto;
1: 
1: import static org.junit.Assert.assertTrue;
1: 
1: import java.security.cert.X509Certificate;
1: import java.util.ArrayList;
1: import java.util.Arrays;
1: import java.util.Collection;
1: 
1: import org.apache.activemq.ActiveMQConnectionFactory;
1: import org.apache.activemq.broker.Broker;
1: import org.apache.activemq.broker.BrokerFilter;
1: import org.apache.activemq.broker.BrokerPlugin;
1: import org.apache.activemq.broker.BrokerService;
1: import org.apache.activemq.broker.ConnectionContext;
1: import org.apache.activemq.broker.TransportConnector;
1: import org.apache.activemq.command.ConnectionInfo;
1: import org.junit.After;
1: import org.junit.Before;
1: import org.junit.Test;
1: import org.junit.runner.RunWith;
1: import org.junit.runners.Parameterized;
1: import org.junit.runners.Parameterized.Parameters;
1: 
1: @RunWith(Parameterized.class)
1: public class AutoSslAuthTest {
1: 
1:     public static final String KEYSTORE_TYPE = "jks";
1:     public static final String PASSWORD = "password";
1:     public static final String SERVER_KEYSTORE = "src/test/resources/server.keystore";
1:     public static final String TRUST_KEYSTORE = "src/test/resources/client.keystore";
1: 
1:     private String uri;
1:     private final String protocol;
0:     private boolean hasCertificate = false;
1:     private BrokerService brokerService;
1: 
1:     @Parameters(name="protocol={0}")
1:     public static Collection<Object[]> data() {
1:         return Arrays.asList(new Object[][] {
1:                 {"auto+nio+ssl"},
1:                 {"auto+ssl"}
1:             });
1:     }
1: 
1:     static {
1:         System.setProperty("javax.net.ssl.trustStore", TRUST_KEYSTORE);
1:         System.setProperty("javax.net.ssl.trustStorePassword", PASSWORD);
1:         System.setProperty("javax.net.ssl.trustStoreType", KEYSTORE_TYPE);
1:         System.setProperty("javax.net.ssl.keyStore", SERVER_KEYSTORE);
1:         System.setProperty("javax.net.ssl.keyStorePassword", PASSWORD);
1:         System.setProperty("javax.net.ssl.keyStoreType", KEYSTORE_TYPE);
1:     }
1: 
1:     @Before
1:     public void before() throws Exception {
1:         BrokerService brokerService = new BrokerService();
1:         brokerService.setPersistent(false);
1: 
0:         TransportConnector connector = brokerService.addConnector(protocol + "://localhost:0?transport.needClientAuth=true");
1:         uri = connector.getPublishableConnectString();
1: 
1:         ArrayList<BrokerPlugin> plugins = new ArrayList<BrokerPlugin>();
1: 
1:         plugins.add(new BrokerPlugin() {
1: 
1:             @Override
1:             public Broker installPlugin(Broker broker) throws Exception {
1:                 return new BrokerFilter(broker) {
1: 
1:                     @Override
1:                     public void addConnection(ConnectionContext context, ConnectionInfo info) throws Exception {
1:                         super.addConnection(context, info);
0:                         hasCertificate = info.getTransportContext() instanceof X509Certificate[];
1:                     }
1:                 };
1:             }
1:         });
1: 
1:         if (!plugins.isEmpty()) {
1:             BrokerPlugin[] array = new BrokerPlugin[plugins.size()];
1:             brokerService.setPlugins(plugins.toArray(array));
1:         }
1: 
1:         this.brokerService = brokerService;
1:         brokerService.start();
1:         brokerService.waitUntilStarted();
1:     }
1: 
1:     @After
1:     public void after() throws Exception {
1:         if (brokerService != null) {
1:             brokerService.stop();
1:             brokerService.waitUntilStopped();
1:         }
1:     }
1: 
1:     /**
1:      * @param isNio
1:      */
1:     public AutoSslAuthTest(String protocol) {
1:         this.protocol = protocol;
1:     }
1: 
1:     @Test(timeout = 60000)
1:     public void testConnect() throws Exception {
1:         ActiveMQConnectionFactory factory = new ActiveMQConnectionFactory();
0:         factory.setBrokerURL(uri);
0:         factory.createConnection().start();
1: 
0:         assertTrue(hasCertificate);
1:     }
1: }
============================================================================