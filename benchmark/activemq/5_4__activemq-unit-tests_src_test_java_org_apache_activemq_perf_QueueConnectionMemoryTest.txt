1:ab66037: /**
1:ab66037:  * Licensed to the Apache Software Foundation (ASF) under one or more
1:ab66037:  * contributor license agreements.  See the NOTICE file distributed with
1:ab66037:  * this work for additional information regarding copyright ownership.
1:ab66037:  * The ASF licenses this file to You under the Apache License, Version 2.0
1:ab66037:  * (the "License"); you may not use this file except in compliance with
1:ab66037:  * the License.  You may obtain a copy of the License at
1:4743a20:  *
1:230a86c:  *      http://www.apache.org/licenses/LICENSE-2.0
3:ab66037:  *
1:ab66037:  * Unless required by applicable law or agreed to in writing, software
1:ab66037:  * distributed under the License is distributed on an "AS IS" BASIS,
1:ab66037:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:ab66037:  * See the License for the specific language governing permissions and
1:ab66037:  * limitations under the License.
1:ab66037:  */
1:ab66037: package org.apache.activemq.perf;
11:ab66037: 
1:ab66037: import javax.jms.Connection;
1:ab66037: import javax.jms.Destination;
1:ab66037: import javax.jms.JMSException;
1:ab66037: import javax.jms.Session;
1:4743a20: 
1:ab66037: import org.apache.activemq.broker.BrokerService;
1:b2fca26: import org.apache.activemq.leveldb.LevelDBStore;
1:8bf987b: import org.slf4j.Logger;
1:8bf987b: import org.slf4j.LoggerFactory;
1:ab66037: 
1:ab66037: /**
1:b0c2a40:  *
1:ab66037:  */
1:230a86c: public class QueueConnectionMemoryTest extends SimpleQueueTest {
1:8bf987b:     private static final transient Logger LOG = LoggerFactory.getLogger(QueueConnectionMemoryTest.class);
1:230a86c: 
1:4743a20:     @Override
1:230a86c:     protected void setUp() throws Exception {
2:ab66037:     }
1:230a86c: 
1:4743a20:     @Override
1:230a86c:     protected void tearDown() throws Exception {
1:230a86c: 
1:ab66037:     }
1:230a86c: 
1:4743a20:     @Override
1:230a86c:     protected Destination createDestination(Session s, String destinationName) throws JMSException {
1:ab66037:         return s.createTemporaryQueue();
1:ab66037:     }
1:230a86c: 
1:4743a20:     @Override
1:230a86c:     public void testPerformance() throws JMSException {
1:230a86c:         // just cancel super class test
1:ab66037:     }
1:230a86c: 
1:4743a20:     @Override
1:5582cc1:     protected void configureBroker(BrokerService answer,String uri) throws Exception {
1:b2fca26:         LevelDBStore adaptor = new LevelDBStore();
1:ab66037:         answer.setPersistenceAdapter(adaptor);
1:5582cc1:         answer.addConnector(uri);
1:ab66037:         answer.setDeleteAllMessagesOnStartup(true);
1:ab66037:     }
1:230a86c: 
1:230a86c:     public void testMemory() throws Exception {
1:230a86c:         if (broker == null) {
1:5582cc1:             broker = createBroker(bindAddress);
1:ab66037:         }
1:5582cc1:         factory = createConnectionFactory(bindAddress);
1:230a86c:         Connection con = factory.createConnection();
1:230a86c:         Session session = con.createSession(false, Session.AUTO_ACKNOWLEDGE);
1:4743a20:         createDestination(session, destinationName);
1:ab66037:         con.close();
1:230a86c:         for (int i = 0; i < 3; i++) {
1:230a86c:             Connection connection = factory.createConnection();
1:ab66037:             connection.start();
1:230a86c:             Session s = connection.createSession(false, Session.AUTO_ACKNOWLEDGE);
1:ab66037:             Destination dest = s.createTemporaryQueue();
1:4743a20:             s.createConsumer(dest);
1:fc00993:             LOG.debug("Created connnection: " + i);
1:ab66037:             Thread.sleep(1000);
1:ab66037:         }
1:230a86c: 
1:ab66037:         Thread.sleep(Integer.MAX_VALUE);
1:230a86c:     }
1:ab66037: }
============================================================================
author:Hiram R. Chirino
-------------------------------------------------------------------------------
commit:b2fca26
/////////////////////////////////////////////////////////////////////////
1: import org.apache.activemq.leveldb.LevelDBStore;
/////////////////////////////////////////////////////////////////////////
1:         LevelDBStore adaptor = new LevelDBStore();
commit:b0c2a40
/////////////////////////////////////////////////////////////////////////
1:  * 
commit:fc00993
/////////////////////////////////////////////////////////////////////////
0:     private static final transient Log LOG = LogFactory.getLog(QueueConnectionMemoryTest.class);
/////////////////////////////////////////////////////////////////////////
1:             LOG.debug("Created connnection: " + i);
commit:230a86c
/////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////
1:  *      http://www.apache.org/licenses/LICENSE-2.0
/////////////////////////////////////////////////////////////////////////
1: public class QueueConnectionMemoryTest extends SimpleQueueTest {
1: 
1:     protected void setUp() throws Exception {
1: 
1:     protected void tearDown() throws Exception {
1: 
1: 
1:     protected Destination createDestination(Session s, String destinationName) throws JMSException {
1: 
1:     public void testPerformance() throws JMSException {
1:         // just cancel super class test
1: 
0:     protected void configureBroker(BrokerService answer) throws Exception {
1: 
1:     public void testMemory() throws Exception {
1:         if (broker == null) {
0:             broker = createBroker();
0:         factory = createConnectionFactory();
1:         Connection con = factory.createConnection();
1:         Session session = con.createSession(false, Session.AUTO_ACKNOWLEDGE);
0:         destination = createDestination(session, destinationName);
1:         for (int i = 0; i < 3; i++) {
1:             Connection connection = factory.createConnection();
1:             Session s = connection.createSession(false, Session.AUTO_ACKNOWLEDGE);
0:             MessageConsumer consumer = s.createConsumer(dest);
1: 
1: }
author:Timothy A. Bish
-------------------------------------------------------------------------------
commit:4743a20
/////////////////////////////////////////////////////////////////////////
1: 
1:  *
1:     @Override
1:     @Override
1:     @Override
1:     @Override
1:     @Override
/////////////////////////////////////////////////////////////////////////
1:         createDestination(session, destinationName);
1:             s.createConsumer(dest);
commit:ef24cc9
author:Bosanac Dejan
-------------------------------------------------------------------------------
commit:8bf987b
/////////////////////////////////////////////////////////////////////////
1: import org.slf4j.Logger;
1: import org.slf4j.LoggerFactory;
1:     private static final transient Logger LOG = LoggerFactory.getLogger(QueueConnectionMemoryTest.class);
author:Robert Davies
-------------------------------------------------------------------------------
commit:7f0583d
/////////////////////////////////////////////////////////////////////////
0:         Destination destination = createDestination(session, destinationName);
commit:5582cc1
/////////////////////////////////////////////////////////////////////////
1:     protected void configureBroker(BrokerService answer,String uri) throws Exception {
1:         answer.addConnector(uri);
1:             broker = createBroker(bindAddress);
1:         factory = createConnectionFactory(bindAddress);
commit:985b4ce
/////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////
0:         KahaPersistenceAdapter adaptor = new KahaPersistenceAdapter();
commit:ab66037
/////////////////////////////////////////////////////////////////////////
1: /**
1:  *
1:  * Licensed to the Apache Software Foundation (ASF) under one or more
1:  * contributor license agreements.  See the NOTICE file distributed with
1:  * this work for additional information regarding copyright ownership.
1:  * The ASF licenses this file to You under the Apache License, Version 2.0
1:  * (the "License"); you may not use this file except in compliance with
1:  * the License.  You may obtain a copy of the License at
1:  *
0:  * http://www.apache.org/licenses/LICENSE-2.0
1:  *
1:  * Unless required by applicable law or agreed to in writing, software
1:  * distributed under the License is distributed on an "AS IS" BASIS,
1:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:  * See the License for the specific language governing permissions and
1:  * limitations under the License.
1:  */
1: package org.apache.activemq.perf;
1: 
0: import java.io.File;
0: import javax.jms.BytesMessage;
1: import javax.jms.Connection;
0: import javax.jms.ConnectionFactory;
1: import javax.jms.Destination;
1: import javax.jms.JMSException;
0: import javax.jms.MessageConsumer;
1: import javax.jms.Session;
0: import javax.jms.Topic;
0: import junit.framework.TestCase;
1: 
0: import org.apache.activemq.ActiveMQConnectionFactory;
1: import org.apache.activemq.broker.BrokerService;
0: import org.apache.activemq.store.kahadaptor.KahaPersistenceAdapter;
0: import org.apache.commons.logging.Log;
0: import org.apache.commons.logging.LogFactory;
1: /**
0:  * @version $Revision: 1.3 $
1:  */
0: public class QueueConnectionMemoryTest extends SimpleQueueTest{
1:     
0:     protected void setUp() throws Exception{
1:     }
1:     
0:     protected void tearDown() throws Exception{
1:         
1:     }
1:     
0:     protected Destination createDestination(Session s,String destinationName) throws JMSException{
1:         return s.createTemporaryQueue();
1:     }
1:     
1:     
1:     
0:     public void testPerformance() throws JMSException{
0:         //just cancel super class test
1:     }
1:     
0:     protected void configureBroker(BrokerService answer) throws Exception{
0:         KahaPersistenceAdapter adaptor = new KahaPersistenceAdapter(new File("activemq-data/perfTest"));
1:         answer.setPersistenceAdapter(adaptor);
0:         answer.addConnector(bindAddress);
1:         answer.setDeleteAllMessagesOnStartup(true);
1:     }
1:     
0:     public void testMemory() throws Exception{
0:         if(broker==null){
0:             broker=createBroker();
1:         }
0:         factory=createConnectionFactory();
0:         Connection con=factory.createConnection();
0:         Session session=con.createSession(false,Session.AUTO_ACKNOWLEDGE);
0:         destination=createDestination(session,DESTINATION_NAME);
1:         con.close();
0:         for (int i =0; i < 3;i++) {
0:             Connection connection=factory.createConnection();
1:             connection.start();
0:             Session s=connection.createSession(false,Session.AUTO_ACKNOWLEDGE);
1:             Destination dest = s.createTemporaryQueue();
0:             MessageConsumer consumer=s.createConsumer(dest);
0:             System.out.println("Created connnection: " + i);
1:             Thread.sleep(1000);
1:         }
1:         
1:         Thread.sleep(Integer.MAX_VALUE);
1:     }
1: }
author:James Strachan
-------------------------------------------------------------------------------
commit:aa1aa58
/////////////////////////////////////////////////////////////////////////
0: import org.apache.commons.logging.Log;
0: import org.apache.commons.logging.LogFactory;
0: 
0:     private static final transient Log log = LogFactory.getLog(QueueConnectionMemoryTest.class);
/////////////////////////////////////////////////////////////////////////
0:             log.debug("Created connnection: " + i);
commit:9583b5f
/////////////////////////////////////////////////////////////////////////
0:         KahaPersistenceAdapter adaptor = new KahaPersistenceAdapter(new File("target/test-amq-data/perfTest"));
============================================================================