1:d5b604e: /**
1:d5b604e:  * Licensed to the Apache Software Foundation (ASF) under one or more
1:d5b604e:  * contributor license agreements.  See the NOTICE file distributed with
1:d5b604e:  * this work for additional information regarding copyright ownership.
1:d5b604e:  * The ASF licenses this file to You under the Apache License, Version 2.0
1:d5b604e:  * (the "License"); you may not use this file except in compliance with
1:d5b604e:  * the License.  You may obtain a copy of the License at
1:d5b604e:  *
1:d5b604e:  *      http://www.apache.org/licenses/LICENSE-2.0
1:d5b604e:  *
1:d5b604e:  * Unless required by applicable law or agreed to in writing, software
1:d5b604e:  * distributed under the License is distributed on an "AS IS" BASIS,
1:d5b604e:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:d5b604e:  * See the License for the specific language governing permissions and
1:d5b604e:  * limitations under the License.
1:d5b604e:  */
1:d5b604e: package org.apache.activemq.bugs;
1:d5b604e: 
1:d5b604e: import javax.jms.Connection;
1:d5b604e: import javax.jms.Message;
1:d5b604e: import javax.jms.MessageProducer;
1:d5b604e: import javax.jms.Session;
1:d5b604e: 
1:d5b604e: import org.apache.activemq.EmbeddedBrokerTestSupport;
1:d5b604e: import org.apache.activemq.broker.region.Queue;
1:d5b604e: import org.junit.Assert;
1:d5b604e: 
1:d5b604e: /**
1:d5b604e:  * This test demonstrates a bug in which calling
1:d5b604e:  * Queue#removeMatchingMessages("") generates an exception, whereas the JMS
1:d5b604e:  * specification states that an empty selector is valid.
1:d5b604e:  */
1:d5b604e: public class AMQ2528Test extends EmbeddedBrokerTestSupport {
1:d5b604e: 
1:d5b604e: 	/**
1:d5b604e: 	 * Setup the test so that the destination is a queue.
1:d5b604e: 	 */
1:d5b604e: 	protected void setUp() throws Exception {
1:d5b604e: 		useTopic = false;
1:d5b604e: 		super.setUp();
1:d5b604e: 	}
1:d5b604e: 
1:d5b604e: 	/**
1:d5b604e: 	 * This test enqueues test messages to destination and then verifies that
1:d5b604e: 	 * {@link Queue#removeMatchingMessages("")} removes all the messages.
1:d5b604e: 	 */
1:d5b604e: 	public void testRemoveMatchingMessages() throws Exception {
1:d5b604e: 		final int NUM_MESSAGES = 100;
1:d5b604e: 		final String MESSAGE_ID = "id";
1:d5b604e: 
1:d5b604e: 		// Enqueue the test messages.
1:d5b604e: 		Connection conn = createConnection();
1:d5b604e: 		try {
1:d5b604e: 			conn.start();
1:d5b604e: 			Session session = conn.createSession(false,
1:d5b604e: 					Session.AUTO_ACKNOWLEDGE);
1:d5b604e: 			MessageProducer producer = session.createProducer(destination);
1:d5b604e: 			for (int id = 0; id < NUM_MESSAGES; id++) {
1:d5b604e: 				Message message = session.createMessage();
1:d5b604e: 				message.setIntProperty(MESSAGE_ID, id);
1:d5b604e: 				producer.send(message);
1:d5b604e: 			}
1:d5b604e: 			producer.close();
1:d5b604e: 			session.close();
1:d5b604e: 		} finally {
1:d5b604e: 			conn.close();
1:d5b604e: 		}
1:d5b604e: 
1:d5b604e: 		// Verify that half of the messages can be removed by selector.
1:d5b604e: 		Queue queue = (Queue) broker.getRegionBroker().getDestinations(
1:d5b604e: 				destination).iterator().next();
1:d5b604e: 
1:d5b604e: 		Assert.assertEquals(NUM_MESSAGES / 2, queue
1:d5b604e: 				.removeMatchingMessages(MESSAGE_ID + " < " + NUM_MESSAGES / 2));
1:d5b604e: 
1:d5b604e: 		// Verify that the remainder of the messages can be removed by empty
1:d5b604e: 		// selector.
1:d5b604e: 		Assert.assertEquals(NUM_MESSAGES - NUM_MESSAGES / 2, queue
1:d5b604e: 				.removeMatchingMessages(""));
1:d5b604e: 	}
1:d5b604e: }
============================================================================
author:Timothy A. Bish
-------------------------------------------------------------------------------
commit:ef24cc9
commit:d5b604e
/////////////////////////////////////////////////////////////////////////
1: /**
1:  * Licensed to the Apache Software Foundation (ASF) under one or more
1:  * contributor license agreements.  See the NOTICE file distributed with
1:  * this work for additional information regarding copyright ownership.
1:  * The ASF licenses this file to You under the Apache License, Version 2.0
1:  * (the "License"); you may not use this file except in compliance with
1:  * the License.  You may obtain a copy of the License at
1:  *
1:  *      http://www.apache.org/licenses/LICENSE-2.0
1:  *
1:  * Unless required by applicable law or agreed to in writing, software
1:  * distributed under the License is distributed on an "AS IS" BASIS,
1:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:  * See the License for the specific language governing permissions and
1:  * limitations under the License.
1:  */
1: package org.apache.activemq.bugs;
1: 
1: import javax.jms.Connection;
1: import javax.jms.Message;
1: import javax.jms.MessageProducer;
1: import javax.jms.Session;
1: 
1: import org.apache.activemq.EmbeddedBrokerTestSupport;
1: import org.apache.activemq.broker.region.Queue;
1: import org.junit.Assert;
1: 
1: /**
1:  * This test demonstrates a bug in which calling
1:  * Queue#removeMatchingMessages("") generates an exception, whereas the JMS
1:  * specification states that an empty selector is valid.
1:  */
1: public class AMQ2528Test extends EmbeddedBrokerTestSupport {
1: 
1: 	/**
1: 	 * Setup the test so that the destination is a queue.
1: 	 */
1: 	protected void setUp() throws Exception {
1: 		useTopic = false;
1: 		super.setUp();
1: 	}
1: 
1: 	/**
1: 	 * This test enqueues test messages to destination and then verifies that
1: 	 * {@link Queue#removeMatchingMessages("")} removes all the messages.
1: 	 */
1: 	public void testRemoveMatchingMessages() throws Exception {
1: 		final int NUM_MESSAGES = 100;
1: 		final String MESSAGE_ID = "id";
1: 
1: 		// Enqueue the test messages.
1: 		Connection conn = createConnection();
1: 		try {
1: 			conn.start();
1: 			Session session = conn.createSession(false,
1: 					Session.AUTO_ACKNOWLEDGE);
1: 			MessageProducer producer = session.createProducer(destination);
1: 			for (int id = 0; id < NUM_MESSAGES; id++) {
1: 				Message message = session.createMessage();
1: 				message.setIntProperty(MESSAGE_ID, id);
1: 				producer.send(message);
1: 			}
1: 			producer.close();
1: 			session.close();
1: 		} finally {
1: 			conn.close();
1: 		}
1: 
1: 		// Verify that half of the messages can be removed by selector.
1: 		Queue queue = (Queue) broker.getRegionBroker().getDestinations(
1: 				destination).iterator().next();
1: 
1: 		Assert.assertEquals(NUM_MESSAGES / 2, queue
1: 				.removeMatchingMessages(MESSAGE_ID + " < " + NUM_MESSAGES / 2));
1: 
1: 		// Verify that the remainder of the messages can be removed by empty
1: 		// selector.
1: 		Assert.assertEquals(NUM_MESSAGES - NUM_MESSAGES / 2, queue
1: 				.removeMatchingMessages(""));
1: 	}
1: }
============================================================================