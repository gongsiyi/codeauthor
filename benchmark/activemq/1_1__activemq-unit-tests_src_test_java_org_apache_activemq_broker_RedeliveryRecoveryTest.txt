1:2c53dbc: /**
1:2c53dbc:  * Licensed to the Apache Software Foundation (ASF) under one or more
1:2c53dbc:  * contributor license agreements.  See the NOTICE file distributed with
1:2c53dbc:  * this work for additional information regarding copyright ownership.
1:2c53dbc:  * The ASF licenses this file to You under the Apache License, Version 2.0
1:2c53dbc:  * (the "License"); you may not use this file except in compliance with
1:2c53dbc:  * the License.  You may obtain a copy of the License at
1:2c53dbc:  *
1:2c53dbc:  *      http://www.apache.org/licenses/LICENSE-2.0
1:2c53dbc:  *
1:2c53dbc:  * Unless required by applicable law or agreed to in writing, software
1:2c53dbc:  * distributed under the License is distributed on an "AS IS" BASIS,
1:2c53dbc:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:2c53dbc:  * See the License for the specific language governing permissions and
1:2c53dbc:  * limitations under the License.
1:2c53dbc:  */
1:2c53dbc: package org.apache.activemq.broker;
1:2c53dbc: 
1:2c53dbc: import javax.jms.ConnectionFactory;
1:2c53dbc: import javax.jms.DeliveryMode;
1:2c53dbc: import javax.jms.Destination;
1:2c53dbc: import javax.jms.JMSException;
1:2c53dbc: import javax.jms.Message;
1:2c53dbc: import javax.jms.MessageConsumer;
1:2c53dbc: import javax.jms.MessageProducer;
1:2c53dbc: import javax.jms.Session;
1:2c53dbc: import org.apache.activemq.ActiveMQConnection;
1:2c53dbc: import org.apache.activemq.ActiveMQConnectionFactory;
1:2c53dbc: import org.apache.activemq.broker.region.policy.PolicyEntry;
1:2c53dbc: import org.apache.activemq.broker.region.policy.PolicyMap;
1:2c53dbc: import org.apache.activemq.store.kahadb.KahaDBPersistenceAdapter;
1:2c53dbc: import org.junit.After;
1:2c53dbc: import org.junit.Before;
1:2c53dbc: import org.slf4j.Logger;
1:2c53dbc: import org.slf4j.LoggerFactory;
1:2c53dbc: 
1:2c53dbc: 
1:2c53dbc: import static org.junit.Assert.assertFalse;
1:2c53dbc: import static org.junit.Assert.assertNotNull;
1:2c53dbc: import static org.junit.Assert.assertTrue;
1:2c53dbc: 
1:2c53dbc: public class RedeliveryRecoveryTest {
1:2c53dbc: 
1:2c53dbc:     static final Logger LOG = LoggerFactory.getLogger(RedeliveryRecoveryTest.class);
1:2c53dbc:     ActiveMQConnection connection;
1:2c53dbc:     BrokerService broker = null;
1:2c53dbc:     String queueName = "redeliveryRecoveryQ";
1:2c53dbc: 
1:2c53dbc:     @Before
1:2c53dbc:     public void setUp() throws Exception {
1:2c53dbc:         broker = new BrokerService();
1:2c53dbc:         configureBroker(broker);
1:2c53dbc:         broker.setDeleteAllMessagesOnStartup(true);
1:2c53dbc:         broker.start();
1:2c53dbc:     }
1:2c53dbc: 
1:2c53dbc:     @After
1:2c53dbc:     public void tearDown() throws Exception {
1:2c53dbc:         if (connection != null) {
1:2c53dbc:             connection.close();
1:2c53dbc:         }
1:2c53dbc:         broker.stop();
1:2c53dbc:     }
1:2c53dbc: 
1:2c53dbc:     protected void configureBroker(BrokerService broker) throws Exception {
1:2c53dbc:         PolicyMap policyMap = new PolicyMap();
1:2c53dbc:         PolicyEntry policy = new PolicyEntry();
1:2c53dbc:         policy.setPersistJMSRedelivered(true);
1:2c53dbc:         policyMap.setDefaultEntry(policy);
1:2c53dbc:         broker.setDestinationPolicy(policyMap);
1:2c53dbc:         KahaDBPersistenceAdapter kahaDBPersistenceAdapter = (KahaDBPersistenceAdapter) broker.getPersistenceAdapter();
1:2c53dbc:         kahaDBPersistenceAdapter.setForceRecoverIndex(true);
1:2c53dbc:         broker.addConnector("tcp://0.0.0.0:0");
1:2c53dbc:     }
1:2c53dbc: 
1:2c53dbc:     @org.junit.Test
1:2c53dbc:     public void testValidateRedeliveryFlagAfterRestart() throws Exception {
1:2c53dbc: 
1:2c53dbc:         ConnectionFactory connectionFactory = new ActiveMQConnectionFactory(broker.getTransportConnectors().get(0).getPublishableConnectString()
1:2c53dbc:                 + "?jms.prefetchPolicy.all=0");
1:2c53dbc:         connection = (ActiveMQConnection) connectionFactory.createConnection();
1:2c53dbc:         connection.start();
1:2c53dbc: 
1:2c53dbc:         Session session = connection.createSession(false, Session.CLIENT_ACKNOWLEDGE);
1:2c53dbc:         Destination destination = session.createQueue(queueName);
1:2c53dbc:         populateDestination(1, destination, connection);
1:2c53dbc:         MessageConsumer consumer = session.createConsumer(destination);
1:2c53dbc:         Message msg = consumer.receive(5000);
1:2c53dbc:         LOG.info("got: " + msg);
1:2c53dbc:         assertNotNull("got the message", msg);
1:2c53dbc:         assertFalse("got the message", msg.getJMSRedelivered());
1:2c53dbc:         consumer.close();
1:2c53dbc:         connection.close();
1:2c53dbc: 
1:2c53dbc:         restartBroker();
1:2c53dbc: 
1:2c53dbc:         connectionFactory = new ActiveMQConnectionFactory(broker.getTransportConnectors().get(0).getPublishableConnectString()
1:2c53dbc:                 + "?jms.prefetchPolicy.all=0");
1:2c53dbc:         connection = (ActiveMQConnection) connectionFactory.createConnection();
1:2c53dbc:         connection.start();
1:2c53dbc: 
1:2c53dbc:         session = connection.createSession(false, Session.CLIENT_ACKNOWLEDGE);
1:2c53dbc:         destination = session.createQueue(queueName);
1:2c53dbc:         consumer = session.createConsumer(destination);
1:2c53dbc: 
1:2c53dbc:         msg = consumer.receive(5000);
1:2c53dbc:         LOG.info("got: " + msg);
1:2c53dbc:         assertNotNull("got the message", msg);
1:2c53dbc:         assertTrue("got the message has redelivered flag", msg.getJMSRedelivered());
1:2c53dbc: 
1:2c53dbc:         connection.close();
1:2c53dbc:     }
1:2c53dbc: 
1:2c53dbc: 
1:2c53dbc:     private void restartBroker() throws Exception {
1:2c53dbc:         broker.stop();
1:2c53dbc:         broker.waitUntilStopped();
1:2c53dbc:         broker = createRestartedBroker();
1:2c53dbc:         broker.start();
1:2c53dbc:     }
1:2c53dbc: 
1:2c53dbc:     private BrokerService createRestartedBroker() throws Exception {
1:2c53dbc:         broker = new BrokerService();
1:2c53dbc:         configureBroker(broker);
1:2c53dbc:         return broker;
1:2c53dbc:     }
1:2c53dbc: 
1:2c53dbc:     private void populateDestination(final int nbMessages, final Destination destination, javax.jms.Connection connection) throws JMSException {
1:2c53dbc:         Session session = connection.createSession(false, Session.AUTO_ACKNOWLEDGE);
1:2c53dbc:         MessageProducer producer = session.createProducer(destination);
1:2c53dbc:         producer.setDeliveryMode(DeliveryMode.PERSISTENT);
1:2c53dbc:         for (int i = 1; i <= nbMessages; i++) {
1:2c53dbc:             producer.send(session.createTextMessage("<hello id='" + i + "'/>"));
1:2c53dbc:         }
1:2c53dbc:         producer.close();
1:2c53dbc:         session.close();
1:2c53dbc:     }
1:2c53dbc: 
1:2c53dbc: }
============================================================================
author:gtully
-------------------------------------------------------------------------------
commit:2c53dbc
/////////////////////////////////////////////////////////////////////////
1: /**
1:  * Licensed to the Apache Software Foundation (ASF) under one or more
1:  * contributor license agreements.  See the NOTICE file distributed with
1:  * this work for additional information regarding copyright ownership.
1:  * The ASF licenses this file to You under the Apache License, Version 2.0
1:  * (the "License"); you may not use this file except in compliance with
1:  * the License.  You may obtain a copy of the License at
1:  *
1:  *      http://www.apache.org/licenses/LICENSE-2.0
1:  *
1:  * Unless required by applicable law or agreed to in writing, software
1:  * distributed under the License is distributed on an "AS IS" BASIS,
1:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:  * See the License for the specific language governing permissions and
1:  * limitations under the License.
1:  */
1: package org.apache.activemq.broker;
1: 
1: import javax.jms.ConnectionFactory;
1: import javax.jms.DeliveryMode;
1: import javax.jms.Destination;
1: import javax.jms.JMSException;
1: import javax.jms.Message;
1: import javax.jms.MessageConsumer;
1: import javax.jms.MessageProducer;
1: import javax.jms.Session;
1: import org.apache.activemq.ActiveMQConnection;
1: import org.apache.activemq.ActiveMQConnectionFactory;
1: import org.apache.activemq.broker.region.policy.PolicyEntry;
1: import org.apache.activemq.broker.region.policy.PolicyMap;
1: import org.apache.activemq.store.kahadb.KahaDBPersistenceAdapter;
1: import org.junit.After;
1: import org.junit.Before;
1: import org.slf4j.Logger;
1: import org.slf4j.LoggerFactory;
1: 
1: 
1: import static org.junit.Assert.assertFalse;
1: import static org.junit.Assert.assertNotNull;
1: import static org.junit.Assert.assertTrue;
1: 
1: public class RedeliveryRecoveryTest {
1: 
1:     static final Logger LOG = LoggerFactory.getLogger(RedeliveryRecoveryTest.class);
1:     ActiveMQConnection connection;
1:     BrokerService broker = null;
1:     String queueName = "redeliveryRecoveryQ";
1: 
1:     @Before
1:     public void setUp() throws Exception {
1:         broker = new BrokerService();
1:         configureBroker(broker);
1:         broker.setDeleteAllMessagesOnStartup(true);
1:         broker.start();
1:     }
1: 
1:     @After
1:     public void tearDown() throws Exception {
1:         if (connection != null) {
1:             connection.close();
1:         }
1:         broker.stop();
1:     }
1: 
1:     protected void configureBroker(BrokerService broker) throws Exception {
1:         PolicyMap policyMap = new PolicyMap();
1:         PolicyEntry policy = new PolicyEntry();
1:         policy.setPersistJMSRedelivered(true);
1:         policyMap.setDefaultEntry(policy);
1:         broker.setDestinationPolicy(policyMap);
1:         KahaDBPersistenceAdapter kahaDBPersistenceAdapter = (KahaDBPersistenceAdapter) broker.getPersistenceAdapter();
1:         kahaDBPersistenceAdapter.setForceRecoverIndex(true);
1:         broker.addConnector("tcp://0.0.0.0:0");
1:     }
1: 
1:     @org.junit.Test
1:     public void testValidateRedeliveryFlagAfterRestart() throws Exception {
1: 
1:         ConnectionFactory connectionFactory = new ActiveMQConnectionFactory(broker.getTransportConnectors().get(0).getPublishableConnectString()
1:                 + "?jms.prefetchPolicy.all=0");
1:         connection = (ActiveMQConnection) connectionFactory.createConnection();
1:         connection.start();
1: 
1:         Session session = connection.createSession(false, Session.CLIENT_ACKNOWLEDGE);
1:         Destination destination = session.createQueue(queueName);
1:         populateDestination(1, destination, connection);
1:         MessageConsumer consumer = session.createConsumer(destination);
1:         Message msg = consumer.receive(5000);
1:         LOG.info("got: " + msg);
1:         assertNotNull("got the message", msg);
1:         assertFalse("got the message", msg.getJMSRedelivered());
1:         consumer.close();
1:         connection.close();
1: 
1:         restartBroker();
1: 
1:         connectionFactory = new ActiveMQConnectionFactory(broker.getTransportConnectors().get(0).getPublishableConnectString()
1:                 + "?jms.prefetchPolicy.all=0");
1:         connection = (ActiveMQConnection) connectionFactory.createConnection();
1:         connection.start();
1: 
1:         session = connection.createSession(false, Session.CLIENT_ACKNOWLEDGE);
1:         destination = session.createQueue(queueName);
1:         consumer = session.createConsumer(destination);
1: 
1:         msg = consumer.receive(5000);
1:         LOG.info("got: " + msg);
1:         assertNotNull("got the message", msg);
1:         assertTrue("got the message has redelivered flag", msg.getJMSRedelivered());
1: 
1:         connection.close();
1:     }
1: 
1: 
1:     private void restartBroker() throws Exception {
1:         broker.stop();
1:         broker.waitUntilStopped();
1:         broker = createRestartedBroker();
1:         broker.start();
1:     }
1: 
1:     private BrokerService createRestartedBroker() throws Exception {
1:         broker = new BrokerService();
1:         configureBroker(broker);
1:         return broker;
1:     }
1: 
1:     private void populateDestination(final int nbMessages, final Destination destination, javax.jms.Connection connection) throws JMSException {
1:         Session session = connection.createSession(false, Session.AUTO_ACKNOWLEDGE);
1:         MessageProducer producer = session.createProducer(destination);
1:         producer.setDeliveryMode(DeliveryMode.PERSISTENT);
1:         for (int i = 1; i <= nbMessages; i++) {
1:             producer.send(session.createTextMessage("<hello id='" + i + "'/>"));
1:         }
1:         producer.close();
1:         session.close();
1:     }
1: 
1: }
============================================================================