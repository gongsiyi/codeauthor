1:ab28b77: /**
1:ab28b77:  * Licensed to the Apache Software Foundation (ASF) under one or more
1:ab28b77:  * contributor license agreements.  See the NOTICE file distributed with
1:ab28b77:  * this work for additional information regarding copyright ownership.
1:ab28b77:  * The ASF licenses this file to You under the Apache License, Version 2.0
1:ab28b77:  * (the "License"); you may not use this file except in compliance with
1:ab28b77:  * the License.  You may obtain a copy of the License at
1:ab28b77:  *
1:ab28b77:  *      http://www.apache.org/licenses/LICENSE-2.0
1:ab28b77:  *
1:ab28b77:  * Unless required by applicable law or agreed to in writing, software
1:ab28b77:  * distributed under the License is distributed on an "AS IS" BASIS,
1:ab28b77:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:ab28b77:  * See the License for the specific language governing permissions and
1:ab28b77:  * limitations under the License.
1:ab28b77:  */
1:ab28b77: package org.apache.activemq.jmx;
1:ab28b77: 
1:ab28b77: import javax.jms.Connection;
1:ab28b77: import javax.jms.Destination;
1:ab28b77: import javax.jms.JMSException;
1:ab28b77: import javax.jms.Message;
1:ab28b77: import javax.jms.MessageConsumer;
1:ab28b77: import javax.jms.MessageProducer;
1:ab28b77: import javax.jms.Session;
1:ab28b77: import javax.jms.TextMessage;
1:ab28b77: import javax.management.ObjectName;
1:ab28b77: import org.apache.activemq.ActiveMQConnectionFactory;
1:ab28b77: import org.apache.activemq.broker.BrokerService;
1:ab28b77: import org.apache.activemq.broker.jmx.BrokerViewMBean;
1:ab28b77: import org.apache.activemq.command.ActiveMQQueue;
1:ab28b77: import org.junit.After;
1:ab28b77: import org.junit.Before;
1:ab28b77: import org.junit.Test;
1:ab28b77: import org.slf4j.Logger;
1:ab28b77: import org.slf4j.LoggerFactory;
1:ab28b77: 
1:ab28b77: import java.util.concurrent.TimeUnit;
1:ab28b77: 
1:ab28b77: import static org.junit.Assert.assertTrue;
1:ab28b77: 
1:ab28b77: /**
1:ab28b77:  * @author <a href="http://tmielke.blogspot.com">Torsten Mielke</a>
1:ab28b77:  */
1:ab28b77: public class TotalMessageCountTest {
1:ab28b77:     private static final Logger LOG = LoggerFactory.getLogger(TotalMessageCountTest.class);
1:ab28b77: 
1:ab28b77:     private BrokerService brokerService;
1:ab28b77:     private final String TESTQUEUE = "testQueue";
1:ab28b77:     private ActiveMQConnectionFactory connectionFactory;
1:ab28b77:     private final String BROKER_ADDRESS = "tcp://localhost:0";
1:ab28b77:     private final ActiveMQQueue queue = new ActiveMQQueue(TESTQUEUE);
1:ab28b77: 
1:ab28b77:     private String connectionUri;
1:ab28b77: 
1:ab28b77:     @Before
1:ab28b77:     public void setUp() throws Exception {
1:ab28b77:         startBroker(true);
1:ab28b77:     }
1:ab28b77: 
1:ab28b77:     @After
1:ab28b77:     public void tearDown() throws Exception {
1:ab28b77:         brokerService.stop();
1:ab28b77:         brokerService.waitUntilStopped();
1:ab28b77:     }
1:ab28b77: 
1:ab28b77: 
1:ab28b77:     @Test
1:ab28b77:     public void testNegativeTotalMessageCount() throws Exception {
1:ab28b77: 
1:ab28b77:         LOG.info("Running test testNegativeTotalMessageCount()");
1:ab28b77:         // send one msg first
1:ab28b77:         sendMessage();
1:ab28b77: 
1:ab28b77:         // restart the broker
1:ab28b77:         restartBroker();
1:ab28b77: 
1:ab28b77:         // receive one msg
1:ab28b77:         receiveMessage();
1:ab28b77: 
1:ab28b77:         // assert TotalMessageCount JMX property > 0
1:ab28b77:         long totalMessageCount = getTotalMessageCount();
1:ab28b77:         if (totalMessageCount < 0 ) {
1:ab28b77:             LOG.error("Unexpected negative TotalMessageCount: " + totalMessageCount);
1:ab28b77:         } else {
1:ab28b77:             LOG.info("TotalMessageCount: " +  totalMessageCount);
1:ab28b77:         }
1:ab28b77: 
1:ab28b77:         assertTrue("Non negative TotalMessageCount " + totalMessageCount, totalMessageCount > -1);
1:ab28b77:         LOG.info("Test testNegativeTotalMessageCount() completed.");
1:ab28b77:     }
1:ab28b77: 
1:ab28b77: 
1:ab28b77:     /**
1:ab28b77:      * Sends one persistent TextMessage to the TESTQUEUE.
1:ab28b77:      * Initializes a new JMS connection, session and consumer and closes them
1:ab28b77:      * after use.
1:ab28b77:      * @throws JMSException on failure
1:ab28b77:      */
1:ab28b77:     private void sendMessage() throws JMSException {
1:ab28b77:         Connection conn = connectionFactory.createConnection();
1:ab28b77:         try {
1:ab28b77:             conn.start();
1:ab28b77:             Session session = conn.createSession(false, Session.AUTO_ACKNOWLEDGE);
1:ab28b77:             Destination queue = session.createQueue(TESTQUEUE);
1:ab28b77:             TextMessage msg = session.createTextMessage("This is a message.");
1:ab28b77:             MessageProducer producer = session.createProducer(queue);
1:ab28b77:             producer.send(queue, msg);
1:ab28b77:             LOG.info("Message sent to " + TESTQUEUE);
1:ab28b77:         } finally {
1:ab28b77:             conn.close();
1:ab28b77:         }
1:ab28b77:     }
1:ab28b77: 
1:ab28b77: 
1:ab28b77:     /**
1:ab28b77:      * Receives a single JMS message from the broker.
1:ab28b77:      * Initializes a new JMS connection, session and consumer and closes them
1:ab28b77:      * after use.
1:ab28b77:      * @return
1:ab28b77:      * @throws JMSException
1:ab28b77:      */
1:ab28b77:     private Message receiveMessage() throws JMSException {
1:ab28b77:         Connection conn = connectionFactory.createConnection();
1:ab28b77:         Message msg = null;
1:ab28b77:         try {
1:ab28b77:             conn.start();
1:ab28b77:             Session session = conn.createSession(false, Session.AUTO_ACKNOWLEDGE);
1:ab28b77:             Destination queue = session.createQueue(TESTQUEUE);
1:ab28b77:             MessageConsumer consumer = session.createConsumer(queue);
1:ab28b77:             msg = consumer.receive(TimeUnit.SECONDS.toMillis(10));
1:ab28b77:             if (msg != null) {
1:ab28b77:                 LOG.info("Message received from " + TESTQUEUE);
1:ab28b77:             }
1:ab28b77:             consumer.close();
1:ab28b77:             session.close();
1:ab28b77:         } finally {
1:ab28b77:             conn.close();
1:ab28b77:         }
1:ab28b77:         return msg;
1:ab28b77:     }
1:ab28b77: 
1:ab28b77:     /**
1:ab28b77:      * restarts the broker
1:ab28b77:      *
1:ab28b77:      * @return true if restart was successful
1:ab28b77:      * @throws Exception if restart failed.
1:ab28b77:      */
1:ab28b77:     private boolean restartBroker() throws Exception {
1:ab28b77:         brokerService.stop();
1:ab28b77:         brokerService.waitUntilStopped();
1:ab28b77:         return startBroker(false);
1:ab28b77:     }
1:ab28b77: 
1:ab28b77: 
1:ab28b77:     /**
1:ab28b77:      * starts the broker
1:ab28b77:      *
1:ab28b77:      * @return true if start was successful
1:ab28b77:      * @throws Exception if restart failed.
1:ab28b77:      */
1:ab28b77:     private boolean startBroker(boolean deleteMessagesOnStartup) throws Exception {
1:ab28b77:         brokerService = new BrokerService();
1:ab28b77:         brokerService.setPersistent(true);
1:ab28b77:         brokerService.setDeleteAllMessagesOnStartup(deleteMessagesOnStartup);
1:ab28b77:         brokerService.setUseJmx(true);
1:ab28b77:         connectionUri = brokerService.addConnector(BROKER_ADDRESS).getPublishableConnectString();
1:ab28b77:         brokerService.start();
1:ab28b77:         connectionFactory = new ActiveMQConnectionFactory(connectionUri);
1:ab28b77:         LOG.info("Broker started.");
1:ab28b77:         return true;
1:ab28b77:     }
1:ab28b77:     /**
1:ab28b77:      * Reads the brokers TotalMessageCount property on the JMX Broker MBean.
1:ab28b77:      * @return the total message count for the broker
1:ab28b77:      * @throws Exception if the JMX operation fails
1:ab28b77:      */
1:ab28b77:     private long getTotalMessageCount() throws Exception {
1:ab28b77: 
1:ab28b77:         ObjectName brokerViewMBeanName = new ObjectName("org.apache.activemq:type=Broker,brokerName=localhost");
1:ab28b77:         BrokerViewMBean brokerMBean = (BrokerViewMBean)
1:ab28b77:                 brokerService.getManagementContext().newProxyInstance(brokerViewMBeanName, BrokerViewMBean.class, true);
1:ab28b77:         LOG.debug("Broker TotalMessageCount: " + brokerMBean.getTotalMessageCount());
1:ab28b77:         return brokerMBean.getTotalMessageCount();
1:ab28b77:     }
1:ab28b77: }
============================================================================
author:gtully
-------------------------------------------------------------------------------
commit:ab28b77
/////////////////////////////////////////////////////////////////////////
1: /**
1:  * Licensed to the Apache Software Foundation (ASF) under one or more
1:  * contributor license agreements.  See the NOTICE file distributed with
1:  * this work for additional information regarding copyright ownership.
1:  * The ASF licenses this file to You under the Apache License, Version 2.0
1:  * (the "License"); you may not use this file except in compliance with
1:  * the License.  You may obtain a copy of the License at
1:  *
1:  *      http://www.apache.org/licenses/LICENSE-2.0
1:  *
1:  * Unless required by applicable law or agreed to in writing, software
1:  * distributed under the License is distributed on an "AS IS" BASIS,
1:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:  * See the License for the specific language governing permissions and
1:  * limitations under the License.
1:  */
1: package org.apache.activemq.jmx;
1: 
1: import javax.jms.Connection;
1: import javax.jms.Destination;
1: import javax.jms.JMSException;
1: import javax.jms.Message;
1: import javax.jms.MessageConsumer;
1: import javax.jms.MessageProducer;
1: import javax.jms.Session;
1: import javax.jms.TextMessage;
1: import javax.management.ObjectName;
1: import org.apache.activemq.ActiveMQConnectionFactory;
1: import org.apache.activemq.broker.BrokerService;
1: import org.apache.activemq.broker.jmx.BrokerViewMBean;
1: import org.apache.activemq.command.ActiveMQQueue;
1: import org.junit.After;
1: import org.junit.Before;
1: import org.junit.Test;
1: import org.slf4j.Logger;
1: import org.slf4j.LoggerFactory;
1: 
1: import java.util.concurrent.TimeUnit;
1: 
1: import static org.junit.Assert.assertTrue;
1: 
1: /**
1:  * @author <a href="http://tmielke.blogspot.com">Torsten Mielke</a>
1:  */
1: public class TotalMessageCountTest {
1:     private static final Logger LOG = LoggerFactory.getLogger(TotalMessageCountTest.class);
1: 
1:     private BrokerService brokerService;
1:     private final String TESTQUEUE = "testQueue";
1:     private ActiveMQConnectionFactory connectionFactory;
1:     private final String BROKER_ADDRESS = "tcp://localhost:0";
1:     private final ActiveMQQueue queue = new ActiveMQQueue(TESTQUEUE);
1: 
1:     private String connectionUri;
1: 
1:     @Before
1:     public void setUp() throws Exception {
1:         startBroker(true);
1:     }
1: 
1:     @After
1:     public void tearDown() throws Exception {
1:         brokerService.stop();
1:         brokerService.waitUntilStopped();
1:     }
1: 
1: 
1:     @Test
1:     public void testNegativeTotalMessageCount() throws Exception {
1: 
1:         LOG.info("Running test testNegativeTotalMessageCount()");
1:         // send one msg first
1:         sendMessage();
1: 
1:         // restart the broker
1:         restartBroker();
1: 
1:         // receive one msg
1:         receiveMessage();
1: 
1:         // assert TotalMessageCount JMX property > 0
1:         long totalMessageCount = getTotalMessageCount();
1:         if (totalMessageCount < 0 ) {
1:             LOG.error("Unexpected negative TotalMessageCount: " + totalMessageCount);
1:         } else {
1:             LOG.info("TotalMessageCount: " +  totalMessageCount);
1:         }
1: 
1:         assertTrue("Non negative TotalMessageCount " + totalMessageCount, totalMessageCount > -1);
1:         LOG.info("Test testNegativeTotalMessageCount() completed.");
1:     }
1: 
1: 
1:     /**
1:      * Sends one persistent TextMessage to the TESTQUEUE.
1:      * Initializes a new JMS connection, session and consumer and closes them
1:      * after use.
1:      * @throws JMSException on failure
1:      */
1:     private void sendMessage() throws JMSException {
1:         Connection conn = connectionFactory.createConnection();
1:         try {
1:             conn.start();
1:             Session session = conn.createSession(false, Session.AUTO_ACKNOWLEDGE);
1:             Destination queue = session.createQueue(TESTQUEUE);
1:             TextMessage msg = session.createTextMessage("This is a message.");
1:             MessageProducer producer = session.createProducer(queue);
1:             producer.send(queue, msg);
1:             LOG.info("Message sent to " + TESTQUEUE);
1:         } finally {
1:             conn.close();
1:         }
1:     }
1: 
1: 
1:     /**
1:      * Receives a single JMS message from the broker.
1:      * Initializes a new JMS connection, session and consumer and closes them
1:      * after use.
1:      * @return
1:      * @throws JMSException
1:      */
1:     private Message receiveMessage() throws JMSException {
1:         Connection conn = connectionFactory.createConnection();
1:         Message msg = null;
1:         try {
1:             conn.start();
1:             Session session = conn.createSession(false, Session.AUTO_ACKNOWLEDGE);
1:             Destination queue = session.createQueue(TESTQUEUE);
1:             MessageConsumer consumer = session.createConsumer(queue);
1:             msg = consumer.receive(TimeUnit.SECONDS.toMillis(10));
1:             if (msg != null) {
1:                 LOG.info("Message received from " + TESTQUEUE);
1:             }
1:             consumer.close();
1:             session.close();
1:         } finally {
1:             conn.close();
1:         }
1:         return msg;
1:     }
1: 
1:     /**
1:      * restarts the broker
1:      *
1:      * @return true if restart was successful
1:      * @throws Exception if restart failed.
1:      */
1:     private boolean restartBroker() throws Exception {
1:         brokerService.stop();
1:         brokerService.waitUntilStopped();
1:         return startBroker(false);
1:     }
1: 
1: 
1:     /**
1:      * starts the broker
1:      *
1:      * @return true if start was successful
1:      * @throws Exception if restart failed.
1:      */
1:     private boolean startBroker(boolean deleteMessagesOnStartup) throws Exception {
1:         brokerService = new BrokerService();
1:         brokerService.setPersistent(true);
1:         brokerService.setDeleteAllMessagesOnStartup(deleteMessagesOnStartup);
1:         brokerService.setUseJmx(true);
1:         connectionUri = brokerService.addConnector(BROKER_ADDRESS).getPublishableConnectString();
1:         brokerService.start();
1:         connectionFactory = new ActiveMQConnectionFactory(connectionUri);
1:         LOG.info("Broker started.");
1:         return true;
1:     }
1:     /**
1:      * Reads the brokers TotalMessageCount property on the JMX Broker MBean.
1:      * @return the total message count for the broker
1:      * @throws Exception if the JMX operation fails
1:      */
1:     private long getTotalMessageCount() throws Exception {
1: 
1:         ObjectName brokerViewMBeanName = new ObjectName("org.apache.activemq:type=Broker,brokerName=localhost");
1:         BrokerViewMBean brokerMBean = (BrokerViewMBean)
1:                 brokerService.getManagementContext().newProxyInstance(brokerViewMBeanName, BrokerViewMBean.class, true);
1:         LOG.debug("Broker TotalMessageCount: " + brokerMBean.getTotalMessageCount());
1:         return brokerMBean.getTotalMessageCount();
1:     }
1: }
============================================================================