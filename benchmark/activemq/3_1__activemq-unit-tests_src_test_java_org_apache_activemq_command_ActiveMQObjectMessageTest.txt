2:d29ca2a: /**
1:57b4941:  * Licensed to the Apache Software Foundation (ASF) under one or more
1:57b4941:  * contributor license agreements.  See the NOTICE file distributed with
1:57b4941:  * this work for additional information regarding copyright ownership.
1:57b4941:  * The ASF licenses this file to You under the Apache License, Version 2.0
1:57b4941:  * (the "License"); you may not use this file except in compliance with
1:57b4941:  * the License.  You may obtain a copy of the License at
4:d29ca2a:  *
1:230a86c:  *      http://www.apache.org/licenses/LICENSE-2.0
1:d29ca2a:  *
1:d29ca2a:  * Unless required by applicable law or agreed to in writing, software
1:d29ca2a:  * distributed under the License is distributed on an "AS IS" BASIS,
1:d29ca2a:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:d29ca2a:  * See the License for the specific language governing permissions and
1:d29ca2a:  * limitations under the License.
2:d29ca2a:  */
1:d29ca2a: package org.apache.activemq.command;
3:d29ca2a: 
1:230a86c: import java.io.IOException;
1:d29ca2a: 
1:d29ca2a: import javax.jms.JMSException;
1:d29ca2a: import javax.jms.MessageNotReadableException;
1:d29ca2a: import javax.jms.MessageNotWriteableException;
1:d29ca2a: 
1:230a86c: import junit.framework.TestCase;
1:d29ca2a: 
1:d29ca2a: /**
1:b0c2a40:  * 
1:d29ca2a:  */
1:d29ca2a: public class ActiveMQObjectMessageTest extends TestCase {
1:d29ca2a: 
1:933eb2f:     /**
1:933eb2f:      * Constructor for ActiveMQObjectMessageTest.
1:933eb2f:      *
1:933eb2f:      * @param name
1:933eb2f:      */
1:933eb2f:     public ActiveMQObjectMessageTest(String name) {
1:933eb2f:         super(name);
1:933eb2f:     }
1:933eb2f: 
1:d29ca2a:     public static void main(String[] args) {
1:d29ca2a:         junit.textui.TestRunner.run(ActiveMQObjectMessageTest.class);
2:d29ca2a:     }
1:d29ca2a: 
1:d29ca2a:     /*
1:d29ca2a:      * @see TestCase#setUp()
1:d29ca2a:      */
1:d29ca2a:     protected void setUp() throws Exception {
1:d29ca2a:         super.setUp();
1:d29ca2a:     }
1:d29ca2a: 
1:d29ca2a:     /*
1:d29ca2a:      * @see TestCase#tearDown()
1:d29ca2a:      */
1:d29ca2a:     protected void tearDown() throws Exception {
1:d29ca2a:         super.tearDown();
1:d29ca2a:     }
1:d29ca2a: 
1:d29ca2a:     public void testBytes() throws JMSException, IOException {
1:d29ca2a:         ActiveMQObjectMessage msg = new ActiveMQObjectMessage();
1:d29ca2a:         String str = "testText";
1:d29ca2a:         msg.setObject(str);
1:d29ca2a:         
1:d29ca2a:         msg = (ActiveMQObjectMessage) msg.copy();
1:d29ca2a:         assertEquals(msg.getObject(), str);
1:d29ca2a: 
1:d29ca2a:     }
1:d29ca2a: 
1:d29ca2a:     public void testSetObject() throws JMSException {
1:d29ca2a:         ActiveMQObjectMessage msg = new ActiveMQObjectMessage();
1:d29ca2a:         String str = "testText";
1:d29ca2a:         msg.setObject(str);
1:d29ca2a:         assertTrue(msg.getObject() == str);
1:d29ca2a:     }
1:d29ca2a: 
1:d29ca2a:     public void testClearBody() throws JMSException {
1:d29ca2a:         ActiveMQObjectMessage objectMessage = new ActiveMQObjectMessage();
1:d29ca2a:         try {
1:d29ca2a:             objectMessage.setObject("String");
1:d29ca2a:             objectMessage.clearBody();
1:d29ca2a:             assertFalse(objectMessage.isReadOnlyBody());
1:d29ca2a:             assertNull(objectMessage.getObject());
1:d29ca2a:             objectMessage.setObject("String");
1:d29ca2a:             objectMessage.getObject();
1:d29ca2a:         } catch (MessageNotWriteableException mnwe) {
1:d29ca2a:             fail("should be writeable");
1:d29ca2a:         }
1:d29ca2a:     }
1:d29ca2a: 
1:d29ca2a:     public void testReadOnlyBody() throws JMSException {
1:d29ca2a:         ActiveMQObjectMessage msg = new ActiveMQObjectMessage();
1:d29ca2a:         msg.setObject("test");
1:d29ca2a:         msg.setReadOnlyBody(true);
1:d29ca2a:         try {
1:d29ca2a:             msg.getObject();
1:d29ca2a:         } catch (MessageNotReadableException e) {
1:d29ca2a:             fail("should be readable");
1:d29ca2a:         }
1:d29ca2a:         try {
1:d29ca2a:             msg.setObject("test");
1:d29ca2a:             fail("should throw exception");
1:d29ca2a:         } catch (MessageNotWriteableException e) {
1:d29ca2a:         }
1:d29ca2a:     }
1:d29ca2a: 
1:d29ca2a:     public void testWriteOnlyBody() throws JMSException { // should always be readable
1:d29ca2a:         ActiveMQObjectMessage msg = new ActiveMQObjectMessage();
1:d29ca2a:         msg.setReadOnlyBody(false);
1:d29ca2a:         try {
1:d29ca2a:             msg.setObject("test");
1:d29ca2a:             msg.getObject();
1:d29ca2a:         } catch (MessageNotReadableException e) {
1:d29ca2a:             fail("should be readable");
1:d29ca2a:         }
1:d29ca2a:         msg.setReadOnlyBody(true);
1:d29ca2a:         try {
1:d29ca2a:             msg.getObject();
1:d29ca2a:             msg.setObject("test");
1:d29ca2a:             fail("should throw exception");
1:d29ca2a:         } catch (MessageNotReadableException e) {
1:d29ca2a:             fail("should be readable");
1:d29ca2a:         } catch (MessageNotWriteableException mnwe) {
1:d29ca2a:         }
1:d29ca2a:     }
1:d29ca2a: 
1:d29ca2a: }
============================================================================
author:Hadrian Zbarcea
-------------------------------------------------------------------------------
commit:f9bec8f
author:Timothy A. Bish
-------------------------------------------------------------------------------
commit:ef24cc9
author:Hiram R. Chirino
-------------------------------------------------------------------------------
commit:b0c2a40
/////////////////////////////////////////////////////////////////////////
1:  * 
commit:933eb2f
/////////////////////////////////////////////////////////////////////////
1:     /**
1:      * Constructor for ActiveMQObjectMessageTest.
1:      *
1:      * @param name
1:      */
1:     public ActiveMQObjectMessageTest(String name) {
1:         super(name);
1:     }
1: 
/////////////////////////////////////////////////////////////////////////
commit:230a86c
/////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////
1:  *      http://www.apache.org/licenses/LICENSE-2.0
/////////////////////////////////////////////////////////////////////////
1: import java.io.IOException;
1: import junit.framework.TestCase;
commit:57b4941
/////////////////////////////////////////////////////////////////////////
1:  * Licensed to the Apache Software Foundation (ASF) under one or more
1:  * contributor license agreements.  See the NOTICE file distributed with
1:  * this work for additional information regarding copyright ownership.
1:  * The ASF licenses this file to You under the Apache License, Version 2.0
1:  * (the "License"); you may not use this file except in compliance with
1:  * the License.  You may obtain a copy of the License at
commit:48b4869
/////////////////////////////////////////////////////////////////////////
0:  * Copyright 2005-2006 The Apache Software Foundation
commit:d29ca2a
/////////////////////////////////////////////////////////////////////////
1: /**
1:  *
0:  * Copyright 2004 The Apache Software Foundation
1:  *
0:  * Licensed under the Apache License, Version 2.0 (the "License");
0:  * you may not use this file except in compliance with the License.
0:  * You may obtain a copy of the License at
1:  *
0:  * http://www.apache.org/licenses/LICENSE-2.0
1:  *
1:  * Unless required by applicable law or agreed to in writing, software
1:  * distributed under the License is distributed on an "AS IS" BASIS,
1:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:  * See the License for the specific language governing permissions and
1:  * limitations under the License.
1:  */
1: package org.apache.activemq.command;
1: 
0: import junit.framework.TestCase;
1: 
1: import javax.jms.JMSException;
1: import javax.jms.MessageNotReadableException;
1: import javax.jms.MessageNotWriteableException;
1: 
0: import org.apache.activemq.command.ActiveMQObjectMessage;
1: 
0: import java.io.IOException;
1: 
1: /**
0:  * @version $Revision$
1:  */
1: public class ActiveMQObjectMessageTest extends TestCase {
1: 
1:     public static void main(String[] args) {
1:         junit.textui.TestRunner.run(ActiveMQObjectMessageTest.class);
1:     }
1: 
1:     /*
1:      * @see TestCase#setUp()
1:      */
1:     protected void setUp() throws Exception {
1:         super.setUp();
1:     }
1: 
1:     /*
1:      * @see TestCase#tearDown()
1:      */
1:     protected void tearDown() throws Exception {
1:         super.tearDown();
1:     }
1: 
1:     /**
0:      * Constructor for ActiveMQObjectMessageTest.
1:      *
0:      * @param arg0
1:      */
0:     public ActiveMQObjectMessageTest(String arg0) {
0:         super(arg0);
1:     }
1: 
1:     public void testBytes() throws JMSException, IOException {
1:         ActiveMQObjectMessage msg = new ActiveMQObjectMessage();
1:         String str = "testText";
1:         msg.setObject(str);
1:         
1:         msg = (ActiveMQObjectMessage) msg.copy();
1:         assertEquals(msg.getObject(), str);
1: 
1:     }
1: 
1:     public void testSetObject() throws JMSException {
1:         ActiveMQObjectMessage msg = new ActiveMQObjectMessage();
1:         String str = "testText";
1:         msg.setObject(str);
1:         assertTrue(msg.getObject() == str);
1:     }
1: 
1:     public void testClearBody() throws JMSException {
1:         ActiveMQObjectMessage objectMessage = new ActiveMQObjectMessage();
1:         try {
1:             objectMessage.setObject("String");
1:             objectMessage.clearBody();
1:             assertFalse(objectMessage.isReadOnlyBody());
1:             assertNull(objectMessage.getObject());
1:             objectMessage.setObject("String");
1:             objectMessage.getObject();
1:         } catch (MessageNotWriteableException mnwe) {
1:             fail("should be writeable");
1:         }
1:     }
1: 
1:     public void testReadOnlyBody() throws JMSException {
1:         ActiveMQObjectMessage msg = new ActiveMQObjectMessage();
1:         msg.setObject("test");
1:         msg.setReadOnlyBody(true);
1:         try {
1:             msg.getObject();
1:         } catch (MessageNotReadableException e) {
1:             fail("should be readable");
1:         }
1:         try {
1:             msg.setObject("test");
1:             fail("should throw exception");
1:         } catch (MessageNotWriteableException e) {
1:         }
1:     }
1: 
1:     public void testWriteOnlyBody() throws JMSException { // should always be readable
1:         ActiveMQObjectMessage msg = new ActiveMQObjectMessage();
1:         msg.setReadOnlyBody(false);
1:         try {
1:             msg.setObject("test");
1:             msg.getObject();
1:         } catch (MessageNotReadableException e) {
1:             fail("should be readable");
1:         }
1:         msg.setReadOnlyBody(true);
1:         try {
1:             msg.getObject();
1:             msg.setObject("test");
1:             fail("should throw exception");
1:         } catch (MessageNotReadableException e) {
1:             fail("should be readable");
1:         } catch (MessageNotWriteableException mnwe) {
1:         }
1:     }
1: 
1: }
============================================================================