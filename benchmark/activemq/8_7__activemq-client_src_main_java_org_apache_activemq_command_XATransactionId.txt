1:d29ca2a: /**
1:57b4941:  * Licensed to the Apache Software Foundation (ASF) under one or more
1:57b4941:  * contributor license agreements.  See the NOTICE file distributed with
1:57b4941:  * this work for additional information regarding copyright ownership.
1:57b4941:  * The ASF licenses this file to You under the Apache License, Version 2.0
1:57b4941:  * (the "License"); you may not use this file except in compliance with
1:57b4941:  * the License.  You may obtain a copy of the License at
3:d29ca2a:  *
1:230a86c:  *      http://www.apache.org/licenses/LICENSE-2.0
1:d29ca2a:  *
1:d29ca2a:  * Unless required by applicable law or agreed to in writing, software
1:d29ca2a:  * distributed under the License is distributed on an "AS IS" BASIS,
1:d29ca2a:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:d29ca2a:  * See the License for the specific language governing permissions and
1:d29ca2a:  * limitations under the License.
1:d29ca2a:  */
1:d29ca2a: package org.apache.activemq.command;
8:d29ca2a: 
1:64f3492: import java.io.IOException;
1:101e711: import java.util.ArrayList;
1:d29ca2a: import java.util.Arrays;
1:d29ca2a: import javax.transaction.xa.Xid;
1:64f3492: import org.apache.activemq.util.DataByteArrayInputStream;
1:64f3492: import org.apache.activemq.util.DataByteArrayOutputStream;
1:e9a64b1: import org.apache.activemq.util.JenkinsHash;
1:d29ca2a: 
1:d29ca2a: /**
1:4afa5d6:  * @openwire:marshaller code="112"
1:b0c2a40:  * 
1:d29ca2a:  */
1:f812e34: public class XATransactionId extends TransactionId implements Xid, Comparable {
1:f812e34: 
1:f812e34:     public static final byte DATA_STRUCTURE_TYPE = CommandTypes.ACTIVEMQ_XA_TRANSACTION_ID;
1:d29ca2a: 
1:d29ca2a:     private int formatId;
1:d29ca2a:     private byte[] branchQualifier;
1:d29ca2a:     private byte[] globalTransactionId;
1:64f3492:     private transient DataByteArrayOutputStream outputStream;
1:64f3492:     private transient byte[] encodedXidBytes;
1:f812e34: 
1:d29ca2a:     private transient int hash;
1:71a3324:     private transient String transactionKey;
1:101e711:     private transient ArrayList<MessageAck> preparedAcks;
1:f812e34: 
1:f812e34:     public XATransactionId() {
1:d29ca2a:     }
1:f812e34: 
1:d29ca2a:     public XATransactionId(Xid xid) {
1:d29ca2a:         this.formatId = xid.getFormatId();
1:d29ca2a:         this.globalTransactionId = xid.getGlobalTransactionId();
1:d29ca2a:         this.branchQualifier = xid.getBranchQualifier();
1:d29ca2a:     }
1:f812e34: 
1:02ef944:     public XATransactionId(byte[] encodedBytes) throws IOException {
1:64f3492:         encodedXidBytes = encodedBytes;
1:64f3492:         initFromEncodedBytes();
1:64f3492:     }
1:d29ca2a: 
1:d29ca2a:     public byte getDataStructureType() {
1:d29ca2a:         return DATA_STRUCTURE_TYPE;
1:d29ca2a:     }
1:f812e34: 
1:64f3492:     final int XID_PREFIX_SIZE = 16;
1:64f3492:     //+|-,(long)lastAck,(byte)priority,(int)formatid,(short)globalLength....
1:02ef944:     private void initFromEncodedBytes() throws IOException {
1:64f3492:         DataByteArrayInputStream inputStream = new DataByteArrayInputStream(encodedXidBytes);
1:64f3492:         inputStream.skipBytes(10);
1:64f3492:         formatId = inputStream.readInt();
1:64f3492:         int globalLength = inputStream.readShort();
1:64f3492:         globalTransactionId = new byte[globalLength];
1:64f3492:         try {
1:64f3492:             inputStream.read(globalTransactionId);
1:64f3492:             branchQualifier = new byte[inputStream.available()];
1:64f3492:             inputStream.read(branchQualifier);
1:64f3492:         } catch (IOException fatal) {
1:64f3492:             throw new RuntimeException(this + ", failed to decode:", fatal);
1:d29ca2a:         }
1:64f3492:     }
1:d29ca2a: 
1:64f3492:     public synchronized byte[] getEncodedXidBytes() {
1:64f3492:         if (encodedXidBytes == null) {
1:64f3492:             outputStream = new DataByteArrayOutputStream(XID_PREFIX_SIZE + globalTransactionId.length + branchQualifier.length);
1:64f3492:             outputStream.position(10);
1:64f3492:             outputStream.writeInt(formatId);
1:64f3492:             // global length
1:64f3492:             outputStream.writeShort(globalTransactionId.length);
1:64f3492:             try {
1:64f3492:                 outputStream.write(globalTransactionId);
1:64f3492:                 outputStream.write(branchQualifier);
1:64f3492:             } catch (IOException fatal) {
1:64f3492:                 throw new RuntimeException(this + ", failed to encode:", fatal);
1:64f3492:             }
1:64f3492:             encodedXidBytes = outputStream.getData();
1:64f3492:         }
1:64f3492:         return encodedXidBytes;
1:64f3492:     }
1:d29ca2a: 
1:3adee8c:     public DataByteArrayOutputStream internalOutputStream() {
1:64f3492:         return outputStream;
1:64f3492:     }
1:d29ca2a: 
1:f812e34:     public synchronized String getTransactionKey() {
1:f812e34:         if (transactionKey == null) {
1:101e711:             StringBuffer s = new StringBuffer();
1:64f3492:             s.append("XID:[" + formatId + ",globalId=");
1:e8818fa:             s.append(stringForm(formatId, globalTransactionId));
1:101e711:             s.append(",branchId=");
1:e8818fa:             s.append(stringForm(formatId, branchQualifier));
1:101e711:             s.append("]");
1:101e711:             transactionKey = s.toString();
1:64f3492:         }
1:71a3324:         return transactionKey;
1:101e711:     }
1:d29ca2a: 
1:e8818fa:     private String stringForm(int format, byte[] uid) {
1:e8818fa:         StringBuffer s = new StringBuffer();
1:e8818fa:         switch (format) {
1:e8818fa:             case 131077:  // arjuna
1:e8818fa:                 stringFormArj(s, uid);
1:e8818fa:                 break;
1:e8818fa:             default: // aries
1:e8818fa:                 stringFormDefault(s, uid);
1:e8818fa:         }
1:e8818fa:         return s.toString();
1:e8818fa:     }
1:e8818fa: 
1:e8818fa:     private void stringFormDefault(StringBuffer s, byte[] uid) {
1:e8818fa:         for (int i = 0; i < uid.length; i++) {
1:e8818fa:             s.append(Integer.toHexString(uid[i]));
1:e8818fa:         }
1:e8818fa:     }
1:e8818fa: 
1:e8818fa:     private void stringFormArj(StringBuffer s, byte[] uid) {
1:e8818fa:         try {
1:e8818fa:             DataByteArrayInputStream byteArrayInputStream = new DataByteArrayInputStream(uid);
1:e8818fa:             s.append(Long.toString(byteArrayInputStream.readLong(), 16));
1:e8818fa:             s.append(':');
1:e8818fa:             s.append(Long.toString(byteArrayInputStream.readLong(), 16));
1:e8818fa:             s.append(':');
1:e8818fa: 
1:e8818fa:             s.append(Integer.toString(byteArrayInputStream.readInt(), 16));
1:e8818fa:             s.append(':');
1:e8818fa:             s.append(Integer.toString(byteArrayInputStream.readInt(), 16));
1:e8818fa:             s.append(':');
1:e8818fa:             s.append(Integer.toString(byteArrayInputStream.readInt(), 16));
1:e8818fa: 
1:e8818fa:         } catch (Exception ignored) {
1:e8818fa:             stringFormDefault(s, uid);
1:e8818fa:         }
1:e8818fa:     }
1:e8818fa: 
1:d29ca2a:     public String toString() {
1:d29ca2a:         return getTransactionKey();
1:d29ca2a:     }
1:f812e34: 
1:d29ca2a:     public boolean isXATransaction() {
1:d29ca2a:         return true;
1:d29ca2a:     }
1:d29ca2a: 
1:d29ca2a:     public boolean isLocalTransaction() {
1:d29ca2a:         return false;
1:d29ca2a:     }
1:d29ca2a: 
1:d29ca2a:     /**
1:d29ca2a:      * @openwire:property version=1
1:d29ca2a:      */
1:d29ca2a:     public int getFormatId() {
1:d29ca2a:         return formatId;
1:d29ca2a:     }
1:d29ca2a: 
1:d29ca2a:     /**
1:d29ca2a:      * @openwire:property version=1
1:d29ca2a:      */
1:d29ca2a:     public byte[] getGlobalTransactionId() {
1:d29ca2a:         return globalTransactionId;
1:d29ca2a:     }
1:d29ca2a: 
1:d29ca2a:     /**
1:d29ca2a:      * @openwire:property version=1
1:d29ca2a:      */
1:d29ca2a:     public byte[] getBranchQualifier() {
1:d29ca2a:         return branchQualifier;
1:d29ca2a:     }
1:d29ca2a: 
1:d29ca2a:     public void setBranchQualifier(byte[] branchQualifier) {
1:d29ca2a:         this.branchQualifier = branchQualifier;
1:f812e34:         this.hash = 0;
1:d29ca2a:     }
1:d29ca2a: 
1:d29ca2a:     public void setFormatId(int formatId) {
1:d29ca2a:         this.formatId = formatId;
1:f812e34:         this.hash = 0;
1:d29ca2a:     }
1:d29ca2a: 
1:d29ca2a:     public void setGlobalTransactionId(byte[] globalTransactionId) {
1:d29ca2a:         this.globalTransactionId = globalTransactionId;
1:f812e34:         this.hash = 0;
1:d29ca2a:     }
1:d29ca2a: 
1:d29ca2a:     public int hashCode() {
1:f812e34:         if (hash == 0) {
1:d29ca2a:             hash = formatId;
1:e9a64b1:             JenkinsHash jh = JenkinsHash.getInstance();
1:e9a64b1:             hash = jh.hash(globalTransactionId, hash);
1:e9a64b1:             hash = jh.hash(branchQualifier, hash);
1:d29ca2a:             if (hash == 0) {
1:d29ca2a:                 hash = 0xaceace;
1:d29ca2a:             }
1:d29ca2a:         }
2:d29ca2a:         return hash;
1:d29ca2a:     }
1:f812e34: 
1:d29ca2a:     public boolean equals(Object o) {
1:ecf89a6:         if (o == null || o.getClass() != XATransactionId.class) {
1:d29ca2a:             return false;
1:ecf89a6:         }
1:d29ca2a:         XATransactionId xid = (XATransactionId)o;
1:f812e34:         return xid.formatId == formatId && Arrays.equals(xid.globalTransactionId, globalTransactionId)
1:d29ca2a:                && Arrays.equals(xid.branchQualifier, branchQualifier);
1:d29ca2a:     }
1:d29ca2a: 
1:f812e34:     public int compareTo(Object o) {
1:ecf89a6:         if (o == null || o.getClass() != XATransactionId.class) {
1:71a3324:             return -1;
1:ecf89a6:         }
1:71a3324:         XATransactionId xid = (XATransactionId)o;
1:71a3324:         return getTransactionKey().compareTo(xid.getTransactionKey());
1:d29ca2a:     }
1:f812e34: 
1:101e711:     public void setPreparedAcks(ArrayList<MessageAck> preparedAcks) {
1:101e711:         this.preparedAcks = preparedAcks;
1:d29ca2a:     }
1:d29ca2a: 
1:101e711:     public ArrayList<MessageAck> getPreparedAcks() {
1:101e711:         return preparedAcks;
1:d29ca2a:     }
1:101e711: }
============================================================================
author:jgoodyear
-------------------------------------------------------------------------------
commit:e9a64b1
/////////////////////////////////////////////////////////////////////////
1: import org.apache.activemq.util.JenkinsHash;
/////////////////////////////////////////////////////////////////////////
1:             JenkinsHash jh = JenkinsHash.getInstance();
1:             hash = jh.hash(globalTransactionId, hash);
1:             hash = jh.hash(branchQualifier, hash);
/////////////////////////////////////////////////////////////////////////
author:Hadrian Zbarcea
-------------------------------------------------------------------------------
commit:d54d046
author:gtully
-------------------------------------------------------------------------------
commit:e8818fa
/////////////////////////////////////////////////////////////////////////
1:             s.append(stringForm(formatId, globalTransactionId));
1:             s.append(stringForm(formatId, branchQualifier));
1:     private String stringForm(int format, byte[] uid) {
1:         StringBuffer s = new StringBuffer();
1:         switch (format) {
1:             case 131077:  // arjuna
1:                 stringFormArj(s, uid);
1:                 break;
1:             default: // aries
1:                 stringFormDefault(s, uid);
1:         }
1:         return s.toString();
1:     }
1: 
1:     private void stringFormDefault(StringBuffer s, byte[] uid) {
1:         for (int i = 0; i < uid.length; i++) {
1:             s.append(Integer.toHexString(uid[i]));
1:         }
1:     }
1: 
1:     private void stringFormArj(StringBuffer s, byte[] uid) {
1:         try {
1:             DataByteArrayInputStream byteArrayInputStream = new DataByteArrayInputStream(uid);
1:             s.append(Long.toString(byteArrayInputStream.readLong(), 16));
1:             s.append(':');
1:             s.append(Long.toString(byteArrayInputStream.readLong(), 16));
1:             s.append(':');
1: 
1:             s.append(Integer.toString(byteArrayInputStream.readInt(), 16));
1:             s.append(':');
1:             s.append(Integer.toString(byteArrayInputStream.readInt(), 16));
1:             s.append(':');
1:             s.append(Integer.toString(byteArrayInputStream.readInt(), 16));
1: 
1:         } catch (Exception ignored) {
1:             stringFormDefault(s, uid);
1:         }
1:     }
1: 
author:Hiram Chirino
-------------------------------------------------------------------------------
commit:02ef944
/////////////////////////////////////////////////////////////////////////
1:     public XATransactionId(byte[] encodedBytes) throws IOException {
/////////////////////////////////////////////////////////////////////////
1:     private void initFromEncodedBytes() throws IOException {
author:Hiram R. Chirino
-------------------------------------------------------------------------------
commit:9a8f6e4
commit:b0c2a40
/////////////////////////////////////////////////////////////////////////
1:  * 
commit:ecf89a6
/////////////////////////////////////////////////////////////////////////
0:         int size = bytes.length;
0:         for (int i = 0; i < size; i++) {
1:         if (o == null || o.getClass() != XATransactionId.class) {
1:         }
1:         if (o == null || o.getClass() != XATransactionId.class) {
1:         }
commit:f812e34
/////////////////////////////////////////////////////////////////////////
1: public class XATransactionId extends TransactionId implements Xid, Comparable {
1: 
1:     public static final byte DATA_STRUCTURE_TYPE = CommandTypes.ACTIVEMQ_XA_TRANSACTION_ID;
1: 
1: 
1:     public XATransactionId() {
1: 
1: 
1: 
1:     public synchronized String getTransactionKey() {
1:         if (transactionKey == null) {
0:             transactionKey = "XID:" + formatId + ":" + HexSupport.toHexFromBytes(globalTransactionId) + ":"
0:                              + HexSupport.toHexFromBytes(branchQualifier);
/////////////////////////////////////////////////////////////////////////
1: 
/////////////////////////////////////////////////////////////////////////
1:         this.hash = 0;
1:         this.hash = 0;
1:         this.hash = 0;
1:         if (hash == 0) {
/////////////////////////////////////////////////////////////////////////
1: 
0:         if (o == null || o.getClass() != XATransactionId.class)
1:         return xid.formatId == formatId && Arrays.equals(xid.globalTransactionId, globalTransactionId)
1:     public int compareTo(Object o) {
0:         if (o == null || o.getClass() != XATransactionId.class)
1: 
commit:230a86c
/////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////
1:  *      http://www.apache.org/licenses/LICENSE-2.0
commit:57b4941
/////////////////////////////////////////////////////////////////////////
1:  * Licensed to the Apache Software Foundation (ASF) under one or more
1:  * contributor license agreements.  See the NOTICE file distributed with
1:  * this work for additional information regarding copyright ownership.
1:  * The ASF licenses this file to You under the Apache License, Version 2.0
1:  * (the "License"); you may not use this file except in compliance with
1:  * the License.  You may obtain a copy of the License at
commit:48b4869
/////////////////////////////////////////////////////////////////////////
0:  * Copyright 2005-2006 The Apache Software Foundation
commit:d29ca2a
/////////////////////////////////////////////////////////////////////////
1: /**
1:  *
0:  * Copyright 2004 The Apache Software Foundation
1:  *
0:  * Licensed under the Apache License, Version 2.0 (the "License");
0:  * you may not use this file except in compliance with the License.
0:  * You may obtain a copy of the License at
1:  *
0:  * http://www.apache.org/licenses/LICENSE-2.0
1:  *
1:  * Unless required by applicable law or agreed to in writing, software
1:  * distributed under the License is distributed on an "AS IS" BASIS,
1:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:  * See the License for the specific language governing permissions and
1:  * limitations under the License.
1:  */
1: package org.apache.activemq.command;
1: 
1: import java.util.Arrays;
1: 
1: import javax.transaction.xa.Xid;
1: 
0: import org.apache.activemq.util.HexSupport;
1: 
1: 
1: /**
0:  * @openwire:marshaller
0:  * @version $Revision: 1.6 $
1:  */
0: public class XATransactionId extends TransactionId implements Xid {
1:     
0:     public static final byte DATA_STRUCTURE_TYPE=CommandTypes.ACTIVEMQ_XA_TRANSACTION_ID;
1: 
1:     private int formatId;
1:     private byte[] branchQualifier;
1:     private byte[] globalTransactionId;
1:     
1:     private transient int hash;
1:     
0:     public XATransactionId() {        
1:     }
1:     
1:     public XATransactionId(Xid xid) {
1:         this.formatId = xid.getFormatId();
1:         this.globalTransactionId = xid.getGlobalTransactionId();
1:         this.branchQualifier = xid.getBranchQualifier();
1:     }
1:     
1:     public byte getDataStructureType() {
1:         return DATA_STRUCTURE_TYPE;
1:     }
1:         
0:     public String getTransactionKey() {
0:         return "XID:"+formatId+":"+HexSupport.toHexFromBytes(globalTransactionId)+":"+HexSupport.toHexFromBytes(branchQualifier);
1:     }
1: 
1:     public String toString() {
1:         return getTransactionKey();
1:     }
1:     
1:     public boolean isXATransaction() {
1:         return true;
1:     }
1: 
1:     public boolean isLocalTransaction() {
1:         return false;
1:     }
1: 
1:     /**
1:      * @openwire:property version=1
1:      */
1:     public int getFormatId() {
1:         return formatId;
1:     }
1: 
1:     /**
1:      * @openwire:property version=1
1:      */
1:     public byte[] getGlobalTransactionId() {
1:         return globalTransactionId;
1:     }
1: 
1:     /**
1:      * @openwire:property version=1
1:      */
1:     public byte[] getBranchQualifier() {
1:         return branchQualifier;
1:     }
1: 
1:     public void setBranchQualifier(byte[] branchQualifier) {
1:         this.branchQualifier = branchQualifier;
0:         this.hash=0;
1:     }
1: 
1:     public void setFormatId(int formatId) {
1:         this.formatId = formatId;
0:         this.hash=0;
1:     }
1: 
1:     public void setGlobalTransactionId(byte[] globalTransactionId) {
1:         this.globalTransactionId = globalTransactionId;
0:         this.hash=0;
1:     }
1: 
1:     public int hashCode() {
0:         if( hash==0 ) {
1:             hash = formatId;
0:             hash = hash(globalTransactionId, hash);
0:             hash = hash(branchQualifier, hash);
1:             if (hash == 0) {
1:                 hash = 0xaceace;
1:             }
1:         }
1:         return hash;
1:     }
1: 
0:     private static int hash(byte[] bytes, int hash) {
0:         for (int i = 0, size = bytes.length; i < size; i++) {
0:             hash ^= bytes[i] << ((i % 4) * 8);
1:         }
1:         return hash;
1:     }
1:     
1:     public boolean equals(Object o) {
0:         if( o==null || o.getClass()!=XATransactionId.class )
1:             return false;
1:         XATransactionId xid = (XATransactionId)o;
0:         return xid.formatId==formatId && Arrays.equals(xid.globalTransactionId,globalTransactionId)
1:                && Arrays.equals(xid.branchQualifier, branchQualifier);
1:     }
1:     
1: }
author:Gary Tully
-------------------------------------------------------------------------------
commit:3adee8c
/////////////////////////////////////////////////////////////////////////
1:     public DataByteArrayOutputStream internalOutputStream() {
commit:64f3492
/////////////////////////////////////////////////////////////////////////
1: import java.io.IOException;
1: import org.apache.activemq.util.DataByteArrayInputStream;
1: import org.apache.activemq.util.DataByteArrayOutputStream;
/////////////////////////////////////////////////////////////////////////
1:     private transient DataByteArrayOutputStream outputStream;
1:     private transient byte[] encodedXidBytes;
/////////////////////////////////////////////////////////////////////////
0:     public XATransactionId(byte[] encodedBytes) {
1:         encodedXidBytes = encodedBytes;
1:         initFromEncodedBytes();
1:     }
0: 
1:     final int XID_PREFIX_SIZE = 16;
1:     //+|-,(long)lastAck,(byte)priority,(int)formatid,(short)globalLength....
0:     private void initFromEncodedBytes() {
1:         DataByteArrayInputStream inputStream = new DataByteArrayInputStream(encodedXidBytes);
1:         inputStream.skipBytes(10);
1:         formatId = inputStream.readInt();
1:         int globalLength = inputStream.readShort();
1:         globalTransactionId = new byte[globalLength];
1:         try {
1:             inputStream.read(globalTransactionId);
1:             branchQualifier = new byte[inputStream.available()];
1:             inputStream.read(branchQualifier);
1:         } catch (IOException fatal) {
1:             throw new RuntimeException(this + ", failed to decode:", fatal);
1:         }
1:     }
0: 
1:     public synchronized byte[] getEncodedXidBytes() {
1:         if (encodedXidBytes == null) {
1:             outputStream = new DataByteArrayOutputStream(XID_PREFIX_SIZE + globalTransactionId.length + branchQualifier.length);
1:             outputStream.position(10);
1:             outputStream.writeInt(formatId);
1:             // global length
1:             outputStream.writeShort(globalTransactionId.length);
1:             try {
1:                 outputStream.write(globalTransactionId);
1:                 outputStream.write(branchQualifier);
1:             } catch (IOException fatal) {
1:                 throw new RuntimeException(this + ", failed to encode:", fatal);
1:             }
1:             encodedXidBytes = outputStream.getData();
1:         }
1:         return encodedXidBytes;
1:     }
0: 
0:     public DataByteArrayOutputStream getOutputStream() {
1:         return outputStream;
1:     }
0: 
1:             s.append("XID:[" + formatId + ",globalId=");
commit:101e711
/////////////////////////////////////////////////////////////////////////
1: import java.util.ArrayList;
/////////////////////////////////////////////////////////////////////////
1:     private transient ArrayList<MessageAck> preparedAcks;
/////////////////////////////////////////////////////////////////////////
1:             StringBuffer s = new StringBuffer();
0:             s.append("XID:[globalId=");
0:             for (int i = 0; i < globalTransactionId.length; i++) {
0:                 s.append(Integer.toHexString(globalTransactionId[i]));
1:             }
1:             s.append(",branchId=");
0:             for (int i = 0; i < branchQualifier.length; i++) {
0:                 s.append(Integer.toHexString(branchQualifier[i]));
1:             }
1:             s.append("]");
1:             transactionKey = s.toString();
/////////////////////////////////////////////////////////////////////////
1:     public void setPreparedAcks(ArrayList<MessageAck> preparedAcks) {
1:         this.preparedAcks = preparedAcks;
0:     }
0: 
1:     public ArrayList<MessageAck> getPreparedAcks() {
1:         return preparedAcks;
0:     }
author:Robert Davies
-------------------------------------------------------------------------------
commit:71a3324
/////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////
0: public class XATransactionId extends TransactionId implements Xid, Comparable{
/////////////////////////////////////////////////////////////////////////
1:     private transient String transactionKey;
/////////////////////////////////////////////////////////////////////////
0:     public synchronized String getTransactionKey(){
0:         if(transactionKey==null){
0:             transactionKey="XID:"+formatId+":"+HexSupport.toHexFromBytes(globalTransactionId)+":"
0:                     +HexSupport.toHexFromBytes(branchQualifier);
0:         }
1:         return transactionKey;
/////////////////////////////////////////////////////////////////////////
0: 
0:     public int compareTo(Object o){
0:         if( o==null || o.getClass()!=XATransactionId.class )
1:             return -1;
1:         XATransactionId xid = (XATransactionId)o;
1:         return getTransactionKey().compareTo(xid.getTransactionKey());
0:     }
author:James Strachan
-------------------------------------------------------------------------------
commit:4afa5d6
/////////////////////////////////////////////////////////////////////////
1:  * @openwire:marshaller code="112"
============================================================================