1:87f75b2: /**
1:87f75b2:  * Licensed to the Apache Software Foundation (ASF) under one or more
1:87f75b2:  * contributor license agreements.  See the NOTICE file distributed with
1:87f75b2:  * this work for additional information regarding copyright ownership.
1:87f75b2:  * The ASF licenses this file to You under the Apache License, Version 2.0
1:87f75b2:  * (the "License"); you may not use this file except in compliance with
1:87f75b2:  * the License.  You may obtain a copy of the License at
4:87f75b2:  *
1:5f1adbe:  *      http://www.apache.org/licenses/LICENSE-2.0
1:b0c2a40:  *
1:87f75b2:  * Unless required by applicable law or agreed to in writing, software
1:87f75b2:  * distributed under the License is distributed on an "AS IS" BASIS,
1:87f75b2:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:87f75b2:  * See the License for the specific language governing permissions and
1:87f75b2:  * limitations under the License.
1:87f75b2:  */
1:87f75b2: package org.apache.activemq.web;
12:87f75b2: 
1:0d27c49: import org.osgi.framework.FrameworkUtil;
1:8bf987b: import org.slf4j.Logger;
1:8bf987b: import org.slf4j.LoggerFactory;
1:87f75b2: import org.springframework.web.context.WebApplicationContext;
1:87f75b2: import org.springframework.web.context.support.WebApplicationContextUtils;
1:87f75b2: import org.springframework.web.context.support.XmlWebApplicationContext;
1:0d27c49: 
1:3527a4c: import javax.jms.ConnectionFactory;
1:3527a4c: import javax.servlet.ServletContext;
1:3527a4c: import javax.servlet.ServletContextEvent;
1:3527a4c: import javax.servlet.ServletContextListener;
1:0d27c49: 
1:87f75b2: /**
1:87f75b2:  * Starts the WebConsole.
1:87f75b2:  */
1:87f75b2: public class WebConsoleStarter implements ServletContextListener {
1:540dd5c:     
1:8bf987b:     private static final Logger LOG = LoggerFactory.getLogger(WebConsoleStarter.class);
1:87f75b2: 
1:87f75b2:     public void contextInitialized(ServletContextEvent event) {
1:540dd5c:         LOG.debug("Initializing ActiveMQ WebConsole...");
1:87f75b2: 
1:84c4b9d:         String webconsoleType = getWebconsoleType();
1:84c4b9d: 
1:540dd5c:         ServletContext servletContext = event.getServletContext();
1:84c4b9d:         WebApplicationContext context = createWebapplicationContext(servletContext, webconsoleType);
1:540dd5c: 
1:540dd5c:         initializeWebClient(servletContext, context);
1:540dd5c: 
1:84c4b9d:         // for embedded console log what port it uses
1:84c4b9d:         if ("embedded".equals(webconsoleType)) {
1:84c4b9d:             // show the url for the web consoles / main page so people can spot it
1:84c4b9d:             String port = System.getProperty("jetty.port");
1:d37786e:             String host = System.getProperty("jetty.host");
1:d37786e:             if (host != null && port != null) {
1:d37786e:                 LOG.info("ActiveMQ WebConsole available at http://{}:{}/", host, port);
1:9b3d651:                 LOG.info("ActiveMQ Jolokia REST API available at http://{}:{}/api/jolokia/", host, port);
1:3527a4c:             }
1:0d27c49:         }
1:0d27c49: 
1:84c4b9d:         LOG.debug("ActiveMQ WebConsole initialized.");
1:84c4b9d:     }
1:0d27c49: 
1:84c4b9d:     private WebApplicationContext createWebapplicationContext(ServletContext servletContext, String webconsoleType) {
1:540dd5c:         String configuration = "/WEB-INF/webconsole-" + webconsoleType + ".xml";
1:84c4b9d:         LOG.debug("Web console type: " + webconsoleType);
1:0d27c49: 
1:540dd5c:         XmlWebApplicationContext context = new XmlWebApplicationContext();
1:540dd5c:         context.setServletContext(servletContext);
1:540dd5c:         context.setConfigLocations(new String[] {
1:540dd5c:             configuration
1:540dd5c:         });
1:540dd5c:         context.refresh();
1:540dd5c:         context.start();
1:540dd5c: 
1:540dd5c:         servletContext.setAttribute(WebApplicationContext.ROOT_WEB_APPLICATION_CONTEXT_ATTRIBUTE, context);
1:540dd5c: 
1:540dd5c:         return context;
1:540dd5c:     }
1:540dd5c: 
1:540dd5c:     private void initializeWebClient(ServletContext servletContext, WebApplicationContext context) {
1:540dd5c:         ConnectionFactory connectionFactory = (ConnectionFactory)context.getBean("connectionFactory");
1:540dd5c:         servletContext.setAttribute(WebClient.CONNECTION_FACTORY_ATTRIBUTE, connectionFactory);
1:0d529af:         WebClient.initContext(servletContext);
1:540dd5c:     }
1:540dd5c: 
1:540dd5c:     public void contextDestroyed(ServletContextEvent event) {
1:540dd5c:         XmlWebApplicationContext context = (XmlWebApplicationContext)WebApplicationContextUtils.getWebApplicationContext(event.getServletContext());
1:540dd5c:         if (context != null) {
1:540dd5c:             context.stop();
1:540dd5c:             context.destroy();
1:540dd5c:         }
1:b0bf0a2:         // do nothing, since the context is destroyed anyway
1:540dd5c:     }
1:3527a4c: 
1:84c4b9d:     private static String getWebconsoleType() {
1:84c4b9d:         String webconsoleType = System.getProperty("webconsole.type", "embedded");
1:84c4b9d: 
1:84c4b9d:         // detect osgi
1:84c4b9d:         try {
1:84c4b9d:             if (OsgiUtil.isOsgi()) {
1:84c4b9d:                 webconsoleType = "osgi";
1:84c4b9d:             }
1:84c4b9d:         } catch (NoClassDefFoundError ignore) {
1:84c4b9d:         }
1:84c4b9d: 
1:84c4b9d:         return webconsoleType;
1:84c4b9d:     }
1:84c4b9d: 
1:3527a4c:     static class OsgiUtil {
1:3527a4c:         static boolean isOsgi() {
1:3527a4c:             return (FrameworkUtil.getBundle(WebConsoleStarter.class) != null);
1:3527a4c:         }
1:3527a4c:     }
1:3527a4c: 
1:540dd5c: }
============================================================================
author:Claus Ibsen
-------------------------------------------------------------------------------
commit:9b3d651
/////////////////////////////////////////////////////////////////////////
1:                 LOG.info("ActiveMQ Jolokia REST API available at http://{}:{}/api/jolokia/", host, port);
commit:84c4b9d
/////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////
1:         String webconsoleType = getWebconsoleType();
1: 
1:         WebApplicationContext context = createWebapplicationContext(servletContext, webconsoleType);
1:         // for embedded console log what port it uses
1:         if ("embedded".equals(webconsoleType)) {
1:             // show the url for the web consoles / main page so people can spot it
1:             String port = System.getProperty("jetty.port");
0:             if (port != null) {
0:                 LOG.info("ActiveMQ WebConsole available at http://localhost:{}/", port);
1:         LOG.debug("ActiveMQ WebConsole initialized.");
1:     }
1:     private WebApplicationContext createWebapplicationContext(ServletContext servletContext, String webconsoleType) {
1:         LOG.debug("Web console type: " + webconsoleType);
/////////////////////////////////////////////////////////////////////////
1:     private static String getWebconsoleType() {
1:         String webconsoleType = System.getProperty("webconsole.type", "embedded");
1: 
1:         // detect osgi
1:         try {
1:             if (OsgiUtil.isOsgi()) {
1:                 webconsoleType = "osgi";
1:             }
1:         } catch (NoClassDefFoundError ignore) {
1:         }
1: 
1:         return webconsoleType;
1:     }
1: 
commit:b0bf0a2
/////////////////////////////////////////////////////////////////////////
1:         // do nothing, since the context is destroyed anyway
author:Jason Sherman
-------------------------------------------------------------------------------
commit:d37786e
/////////////////////////////////////////////////////////////////////////
1:             String host = System.getProperty("jetty.host");
1:             if (host != null && port != null) {
1:                 LOG.info("ActiveMQ WebConsole available at http://{}:{}/", host, port);
author:Bosanac Dejan
-------------------------------------------------------------------------------
commit:0d529af
/////////////////////////////////////////////////////////////////////////
1:         WebClient.initContext(servletContext);
commit:3527a4c
/////////////////////////////////////////////////////////////////////////
1: import javax.jms.ConnectionFactory;
1: import javax.servlet.ServletContext;
1: import javax.servlet.ServletContextEvent;
1: import javax.servlet.ServletContextListener;
/////////////////////////////////////////////////////////////////////////
0:         try {
0:             if (OsgiUtil.isOsgi()) {
0:                 webconsoleType = "osgi";
1:             }
0:         } catch (NoClassDefFoundError ignore) {
0:         LOG.info("Web console type: " + webconsoleType);
1: 
/////////////////////////////////////////////////////////////////////////
1:     static class OsgiUtil {
1:         static boolean isOsgi() {
1:             return (FrameworkUtil.getBundle(WebConsoleStarter.class) != null);
1:         }
1:     }
1: 
commit:0d27c49
/////////////////////////////////////////////////////////////////////////
0: import javax.imageio.spi.ServiceRegistry;
0: import org.osgi.framework.BundleContext;
0: import org.osgi.framework.Constants;
1: import org.osgi.framework.FrameworkUtil;
0: import org.osgi.framework.ServiceRegistration;
0: import org.osgi.service.cm.ManagedService;
0: import java.util.Dictionary;
0: import java.util.Hashtable;
1: 
/////////////////////////////////////////////////////////////////////////
1: 
1: 
0:         // detect osgi
0:         if (FrameworkUtil.getBundle(getClass()) != null) {
0:             webconsoleType = "osgi";
1:         }
1: 
1: 
commit:8bf987b
/////////////////////////////////////////////////////////////////////////
1: import org.slf4j.Logger;
1: import org.slf4j.LoggerFactory;
/////////////////////////////////////////////////////////////////////////
1:     private static final Logger LOG = LoggerFactory.getLogger(WebConsoleStarter.class);
author:Hiram R. Chirino
-------------------------------------------------------------------------------
commit:b0c2a40
/////////////////////////////////////////////////////////////////////////
1:  * 
commit:540dd5c
/////////////////////////////////////////////////////////////////////////
0: import org.apache.commons.logging.Log;
0: import org.apache.commons.logging.LogFactory;
/////////////////////////////////////////////////////////////////////////
1:     
0:     private static final Log LOG = LogFactory.getLog(WebConsoleStarter.class);
1:         LOG.debug("Initializing ActiveMQ WebConsole...");
1:         ServletContext servletContext = event.getServletContext();
0:         WebApplicationContext context = createWebapplicationContext(servletContext);
1:         initializeWebClient(servletContext, context);
0:         LOG.info("ActiveMQ WebConsole initialized.");
1:     }
1: 
0:     private WebApplicationContext createWebapplicationContext(ServletContext servletContext) {
0:         String webconsoleType = System.getProperty("webconsole.type", "embedded");
1:         String configuration = "/WEB-INF/webconsole-" + webconsoleType + ".xml";
1: 
1:         XmlWebApplicationContext context = new XmlWebApplicationContext();
1:         context.setServletContext(servletContext);
1:         context.setConfigLocations(new String[] {
1:             configuration
1:         });
1:         context.refresh();
1:         context.start();
1: 
1:         servletContext.setAttribute(WebApplicationContext.ROOT_WEB_APPLICATION_CONTEXT_ATTRIBUTE, context);
1: 
1:         return context;
1:     }
1: 
1:     private void initializeWebClient(ServletContext servletContext, WebApplicationContext context) {
1:         ConnectionFactory connectionFactory = (ConnectionFactory)context.getBean("connectionFactory");
1:         servletContext.setAttribute(WebClient.CONNECTION_FACTORY_ATTRIBUTE, connectionFactory);
1:     }
1: 
1:     public void contextDestroyed(ServletContextEvent event) {
1:         XmlWebApplicationContext context = (XmlWebApplicationContext)WebApplicationContextUtils.getWebApplicationContext(event.getServletContext());
1:         if (context != null) {
1:             context.stop();
1:             context.destroy();
1:         }
0:         // do nothing, since the context is destoyed anyway
1:     }
commit:5f1adbe
/////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////
1:  *      http://www.apache.org/licenses/LICENSE-2.0
author:James Strachan
-------------------------------------------------------------------------------
commit:87f75b2
/////////////////////////////////////////////////////////////////////////
1: /**
1:  *
1:  * Licensed to the Apache Software Foundation (ASF) under one or more
1:  * contributor license agreements.  See the NOTICE file distributed with
1:  * this work for additional information regarding copyright ownership.
1:  * The ASF licenses this file to You under the Apache License, Version 2.0
1:  * (the "License"); you may not use this file except in compliance with
1:  * the License.  You may obtain a copy of the License at
1:  *
0:  * http://www.apache.org/licenses/LICENSE-2.0
1:  *
1:  * Unless required by applicable law or agreed to in writing, software
1:  * distributed under the License is distributed on an "AS IS" BASIS,
1:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:  * See the License for the specific language governing permissions and
1:  * limitations under the License.
1:  */
1: package org.apache.activemq.web;
1: 
0: import javax.jms.ConnectionFactory;
0: import javax.servlet.ServletContext;
0: import javax.servlet.ServletContextEvent;
0: import javax.servlet.ServletContextListener;
1: 
1: import org.springframework.web.context.WebApplicationContext;
1: import org.springframework.web.context.support.WebApplicationContextUtils;
1: import org.springframework.web.context.support.XmlWebApplicationContext;
0: import org.apache.commons.logging.Log;
0: import org.apache.commons.logging.LogFactory;
1: 
1: /**
1:  * Starts the WebConsole.
1:  * 
0:  * @version $Revision: 1.1 $
1:  */
1: public class WebConsoleStarter implements ServletContextListener {
0:     private static final transient Log log = LogFactory.getLog(WebConsoleStarter.class);
1: 
1:     public void contextInitialized(ServletContextEvent event) {
0: 		log.debug("Initializing ActiveMQ WebConsole...");
1: 		
0: 		ServletContext servletContext = event.getServletContext();
0: 		WebApplicationContext context = createWebapplicationContext(servletContext);
1: 		
0: 		initializeWebClient(servletContext, context);
1: 		
0: 		log.info("ActiveMQ WebConsole initialized.");
0: 	}
1: 
0: 	private WebApplicationContext createWebapplicationContext(ServletContext servletContext) {
0: 		String webconsoleType = System.getProperty("webconsole.type", "embedded");
0: 		String configuration = "/WEB-INF/webconsole-" + webconsoleType + ".xml";
1: 		
0: 		XmlWebApplicationContext context = new XmlWebApplicationContext();
0: 		context.setServletContext(servletContext);
0: 		context.setConfigLocations(new String[] { configuration });
0: 		context.refresh();
0: 		context.start();
1: 		
0: 		servletContext.setAttribute(WebApplicationContext.ROOT_WEB_APPLICATION_CONTEXT_ATTRIBUTE, context);
1: 
0: 		return context;
0: 	}
1: 
0: 	private void initializeWebClient(ServletContext servletContext, WebApplicationContext context) {
0: 		ConnectionFactory connectionFactory = (ConnectionFactory) context
0: 				.getBean("connectionFactory");
0: 		servletContext.setAttribute(WebClient.connectionFactoryAttribute,
0: 				connectionFactory);
0: 	}
1: 	
0: 	public void contextDestroyed(ServletContextEvent event) {
0: 		XmlWebApplicationContext context = (XmlWebApplicationContext) WebApplicationContextUtils
0: 				.getWebApplicationContext(event.getServletContext());
0: 		if (context != null)
0: 		{
0: 			context.stop();
0: 			context.destroy();
0: 		}
0: 		// do nothing, since the context is destoyed anyway
0: 	}
1: 
0: }
============================================================================