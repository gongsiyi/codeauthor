1:9ec6ee4: /*
1:9ec6ee4:  * Licensed to the Apache Software Foundation (ASF) under one or more
1:9ec6ee4:  * contributor license agreements.  See the NOTICE file distributed with
1:9ec6ee4:  * this work for additional information regarding copyright ownership.
1:9ec6ee4:  * The ASF licenses this file to You under the Apache License, Version 2.0
1:9ec6ee4:  * (the "License"); you may not use this file except in compliance with
1:9ec6ee4:  * the License.  You may obtain a copy of the License at
1:9ec6ee4:  *
1:9ec6ee4:  *      http://www.apache.org/licenses/LICENSE-2.0
1:9ec6ee4:  *
1:9ec6ee4:  * Unless required by applicable law or agreed to in writing, software
1:9ec6ee4:  * distributed under the License is distributed on an "AS IS" BASIS,
1:9ec6ee4:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:9ec6ee4:  * See the License for the specific language governing permissions and
1:9ec6ee4:  * limitations under the License.
1:9ec6ee4:  */
1:9ec6ee4: package org.apache.activemq.transport.amqp.message;
1:9ec6ee4: 
1:9ec6ee4: import static org.junit.Assert.assertEquals;
1:9ec6ee4: import static org.junit.Assert.assertFalse;
1:9ec6ee4: import static org.junit.Assert.assertNotNull;
1:9ec6ee4: import static org.junit.Assert.assertTrue;
1:9ec6ee4: 
1:9ec6ee4: import java.nio.charset.StandardCharsets;
1:9ec6ee4: import java.util.UUID;
1:9ec6ee4: 
1:9ec6ee4: import org.apache.qpid.proton.codec.AMQPDefinedTypes;
1:9ec6ee4: import org.apache.qpid.proton.codec.DecoderImpl;
1:9ec6ee4: import org.apache.qpid.proton.codec.EncoderImpl;
1:9ec6ee4: import org.apache.qpid.proton.codec.EncodingCodes;
1:9ec6ee4: import org.apache.qpid.proton.codec.PrimitiveTypeEncoding;
1:9ec6ee4: import org.apache.qpid.proton.codec.ReadableBuffer;
1:9ec6ee4: import org.fusesource.hawtbuf.UTF8Buffer;
1:9ec6ee4: import org.junit.Before;
1:9ec6ee4: import org.junit.Test;
1:9ec6ee4: 
1:9ec6ee4: /**
1:9ec6ee4:  * Test the UTF8Buffer type encoder
1:9ec6ee4:  */
1:9ec6ee4: public class UTF8BufferTypeTest {
1:9ec6ee4: 
1:9ec6ee4:     private final UTF8BufferType utf8BufferEncoding;
1:9ec6ee4:     private final DecoderImpl decoder = new DecoderImpl();
1:9ec6ee4:     private final EncoderImpl encoder = new EncoderImpl(decoder);
1:9ec6ee4:     {
1:9ec6ee4:         AMQPDefinedTypes.registerAllTypes(decoder, encoder);
1:9ec6ee4: 
1:9ec6ee4:         utf8BufferEncoding = new UTF8BufferType(encoder, decoder);
1:9ec6ee4: 
1:9ec6ee4:         encoder.register(utf8BufferEncoding);
1:9ec6ee4:     }
1:9ec6ee4: 
1:9ec6ee4:     private String smallString = UUID.randomUUID().toString();
1:9ec6ee4:     private String largeString = UUID.randomUUID().toString() + UUID.randomUUID().toString() +
1:9ec6ee4:                                  UUID.randomUUID().toString() + UUID.randomUUID().toString() +
1:9ec6ee4:                                  UUID.randomUUID().toString() + UUID.randomUUID().toString() +
1:9ec6ee4:                                  UUID.randomUUID().toString() + UUID.randomUUID().toString();
1:9ec6ee4: 
1:9ec6ee4:     private UTF8Buffer smallBuffer;
1:9ec6ee4:     private UTF8Buffer largeBuffer;
1:9ec6ee4: 
1:9ec6ee4:     @Before
1:9ec6ee4:     public void setUp() {
1:9ec6ee4:         smallBuffer = new UTF8Buffer(smallString.getBytes(StandardCharsets.UTF_8));
1:9ec6ee4:         largeBuffer = new UTF8Buffer(largeString.getBytes(StandardCharsets.UTF_8));
1:9ec6ee4:     }
1:9ec6ee4: 
1:9ec6ee4:     @Test
1:9ec6ee4:     public void testGetAllEncodings() {
1:9ec6ee4:         assertEquals(2, utf8BufferEncoding.getAllEncodings().size());
1:9ec6ee4:     }
1:9ec6ee4: 
1:9ec6ee4:     @Test
1:9ec6ee4:     public void testGetTypeClass() {
1:9ec6ee4:         assertEquals(UTF8Buffer.class, utf8BufferEncoding.getTypeClass());
1:9ec6ee4:     }
1:9ec6ee4: 
1:9ec6ee4:     @Test
1:9ec6ee4:     public void testGetCanonicalEncoding() {
1:9ec6ee4:         assertNotNull(utf8BufferEncoding.getCanonicalEncoding());
1:9ec6ee4:     }
1:9ec6ee4: 
1:9ec6ee4:     @Test
1:9ec6ee4:     public void testGetEncodingForSmallUTF8Buffer() {
1:9ec6ee4:         PrimitiveTypeEncoding<UTF8Buffer> encoding = utf8BufferEncoding.getEncoding(smallBuffer);
1:9ec6ee4: 
1:9ec6ee4:         assertTrue(encoding instanceof UTF8BufferType.SmallUTF8BufferEncoding);
1:9ec6ee4:         assertEquals(1, encoding.getConstructorSize());
1:9ec6ee4:         assertEquals(smallBuffer.getLength() + Byte.BYTES, encoding.getValueSize(smallBuffer));
1:9ec6ee4:         assertEquals(EncodingCodes.STR8, encoding.getEncodingCode());
1:9ec6ee4:         assertFalse(encoding.encodesJavaPrimitive());
1:9ec6ee4:         assertEquals(utf8BufferEncoding, encoding.getType());
1:9ec6ee4:     }
1:9ec6ee4: 
1:9ec6ee4:     @Test
1:9ec6ee4:     public void testGetEncodingForLargeUTF8Buffer() {
1:9ec6ee4:         PrimitiveTypeEncoding<UTF8Buffer> encoding = utf8BufferEncoding.getEncoding(largeBuffer);
1:9ec6ee4: 
1:9ec6ee4:         assertTrue(encoding instanceof UTF8BufferType.LargeUTF8BufferEncoding);
1:9ec6ee4:         assertEquals(1, encoding.getConstructorSize());
1:9ec6ee4:         assertEquals(largeBuffer.getLength() + Integer.BYTES, encoding.getValueSize(largeBuffer));
1:9ec6ee4:         assertEquals(EncodingCodes.STR32, encoding.getEncodingCode());
1:9ec6ee4:         assertFalse(encoding.encodesJavaPrimitive());
1:9ec6ee4:         assertEquals(utf8BufferEncoding, encoding.getType());
1:9ec6ee4:     }
1:9ec6ee4: 
1:9ec6ee4:     @Test
1:9ec6ee4:     public void testEncodeDecodeEmptyStringBuffer() {
1:9ec6ee4:         final AmqpWritableBuffer buffer = new AmqpWritableBuffer();
1:9ec6ee4:         encoder.setByteBuffer(buffer);
1:9ec6ee4:         encoder.writeObject(new UTF8Buffer(""));
1:9ec6ee4: 
1:9ec6ee4:         byte[] copy = new byte[buffer.getArrayLength()];
1:9ec6ee4:         System.arraycopy(buffer.getArray(), 0, copy, 0, buffer.getArrayLength());
1:9ec6ee4: 
1:9ec6ee4:         ReadableBuffer encoded = ReadableBuffer.ByteBufferReader.wrap(copy);
1:9ec6ee4:         decoder.setBuffer(encoded);
1:9ec6ee4: 
1:9ec6ee4:         Object valueRead = decoder.readObject();
1:9ec6ee4:         assertTrue(valueRead instanceof String);
1:9ec6ee4:         String decodedString = (String) valueRead;
1:9ec6ee4:         assertEquals("", decodedString);
1:9ec6ee4:     }
1:9ec6ee4: 
1:9ec6ee4:     @Test
1:9ec6ee4:     public void testEncodeDecodeSmallBuffer() {
1:9ec6ee4:         final AmqpWritableBuffer buffer = new AmqpWritableBuffer();
1:9ec6ee4:         encoder.setByteBuffer(buffer);
1:9ec6ee4:         encoder.writeObject(smallBuffer);
1:9ec6ee4: 
1:9ec6ee4:         byte[] copy = new byte[buffer.getArrayLength()];
1:9ec6ee4:         System.arraycopy(buffer.getArray(), 0, copy, 0, buffer.getArrayLength());
1:9ec6ee4: 
1:9ec6ee4:         ReadableBuffer encoded = ReadableBuffer.ByteBufferReader.wrap(copy);
1:9ec6ee4:         decoder.setBuffer(encoded);
1:9ec6ee4: 
1:9ec6ee4:         Object valueRead = decoder.readObject();
1:9ec6ee4:         assertTrue(valueRead instanceof String);
1:9ec6ee4:         String decodedString = (String) valueRead;
1:9ec6ee4:         assertEquals(smallString, decodedString);
1:9ec6ee4:     }
1:9ec6ee4: 
1:9ec6ee4:     @Test
1:9ec6ee4:     public void testEncodeDecodeLargeBuffer() {
1:9ec6ee4:         final AmqpWritableBuffer buffer = new AmqpWritableBuffer();
1:9ec6ee4:         encoder.setByteBuffer(buffer);
1:9ec6ee4:         encoder.writeObject(largeBuffer);
1:9ec6ee4: 
1:9ec6ee4:         byte[] copy = new byte[buffer.getArrayLength()];
1:9ec6ee4:         System.arraycopy(buffer.getArray(), 0, copy, 0, buffer.getArrayLength());
1:9ec6ee4: 
1:9ec6ee4:         ReadableBuffer encoded = ReadableBuffer.ByteBufferReader.wrap(copy);
1:9ec6ee4:         decoder.setBuffer(encoded);
1:9ec6ee4: 
1:9ec6ee4:         Object valueRead = decoder.readObject();
1:9ec6ee4:         assertTrue(valueRead instanceof String);
1:9ec6ee4:         String decodedString = (String) valueRead;
1:9ec6ee4:         assertEquals(largeString, decodedString);
1:9ec6ee4:     }
1:9ec6ee4: }
============================================================================
author:Timothy Bish
-------------------------------------------------------------------------------
commit:9ec6ee4
/////////////////////////////////////////////////////////////////////////
1: /*
1:  * Licensed to the Apache Software Foundation (ASF) under one or more
1:  * contributor license agreements.  See the NOTICE file distributed with
1:  * this work for additional information regarding copyright ownership.
1:  * The ASF licenses this file to You under the Apache License, Version 2.0
1:  * (the "License"); you may not use this file except in compliance with
1:  * the License.  You may obtain a copy of the License at
1:  *
1:  *      http://www.apache.org/licenses/LICENSE-2.0
1:  *
1:  * Unless required by applicable law or agreed to in writing, software
1:  * distributed under the License is distributed on an "AS IS" BASIS,
1:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:  * See the License for the specific language governing permissions and
1:  * limitations under the License.
1:  */
1: package org.apache.activemq.transport.amqp.message;
1: 
1: import static org.junit.Assert.assertEquals;
1: import static org.junit.Assert.assertFalse;
1: import static org.junit.Assert.assertNotNull;
1: import static org.junit.Assert.assertTrue;
1: 
1: import java.nio.charset.StandardCharsets;
1: import java.util.UUID;
1: 
1: import org.apache.qpid.proton.codec.AMQPDefinedTypes;
1: import org.apache.qpid.proton.codec.DecoderImpl;
1: import org.apache.qpid.proton.codec.EncoderImpl;
1: import org.apache.qpid.proton.codec.EncodingCodes;
1: import org.apache.qpid.proton.codec.PrimitiveTypeEncoding;
1: import org.apache.qpid.proton.codec.ReadableBuffer;
1: import org.fusesource.hawtbuf.UTF8Buffer;
1: import org.junit.Before;
1: import org.junit.Test;
1: 
1: /**
1:  * Test the UTF8Buffer type encoder
1:  */
1: public class UTF8BufferTypeTest {
1: 
1:     private final UTF8BufferType utf8BufferEncoding;
1:     private final DecoderImpl decoder = new DecoderImpl();
1:     private final EncoderImpl encoder = new EncoderImpl(decoder);
1:     {
1:         AMQPDefinedTypes.registerAllTypes(decoder, encoder);
1: 
1:         utf8BufferEncoding = new UTF8BufferType(encoder, decoder);
1: 
1:         encoder.register(utf8BufferEncoding);
1:     }
1: 
1:     private String smallString = UUID.randomUUID().toString();
1:     private String largeString = UUID.randomUUID().toString() + UUID.randomUUID().toString() +
1:                                  UUID.randomUUID().toString() + UUID.randomUUID().toString() +
1:                                  UUID.randomUUID().toString() + UUID.randomUUID().toString() +
1:                                  UUID.randomUUID().toString() + UUID.randomUUID().toString();
1: 
1:     private UTF8Buffer smallBuffer;
1:     private UTF8Buffer largeBuffer;
1: 
1:     @Before
1:     public void setUp() {
1:         smallBuffer = new UTF8Buffer(smallString.getBytes(StandardCharsets.UTF_8));
1:         largeBuffer = new UTF8Buffer(largeString.getBytes(StandardCharsets.UTF_8));
1:     }
1: 
1:     @Test
1:     public void testGetAllEncodings() {
1:         assertEquals(2, utf8BufferEncoding.getAllEncodings().size());
1:     }
1: 
1:     @Test
1:     public void testGetTypeClass() {
1:         assertEquals(UTF8Buffer.class, utf8BufferEncoding.getTypeClass());
1:     }
1: 
1:     @Test
1:     public void testGetCanonicalEncoding() {
1:         assertNotNull(utf8BufferEncoding.getCanonicalEncoding());
1:     }
1: 
1:     @Test
1:     public void testGetEncodingForSmallUTF8Buffer() {
1:         PrimitiveTypeEncoding<UTF8Buffer> encoding = utf8BufferEncoding.getEncoding(smallBuffer);
1: 
1:         assertTrue(encoding instanceof UTF8BufferType.SmallUTF8BufferEncoding);
1:         assertEquals(1, encoding.getConstructorSize());
1:         assertEquals(smallBuffer.getLength() + Byte.BYTES, encoding.getValueSize(smallBuffer));
1:         assertEquals(EncodingCodes.STR8, encoding.getEncodingCode());
1:         assertFalse(encoding.encodesJavaPrimitive());
1:         assertEquals(utf8BufferEncoding, encoding.getType());
1:     }
1: 
1:     @Test
1:     public void testGetEncodingForLargeUTF8Buffer() {
1:         PrimitiveTypeEncoding<UTF8Buffer> encoding = utf8BufferEncoding.getEncoding(largeBuffer);
1: 
1:         assertTrue(encoding instanceof UTF8BufferType.LargeUTF8BufferEncoding);
1:         assertEquals(1, encoding.getConstructorSize());
1:         assertEquals(largeBuffer.getLength() + Integer.BYTES, encoding.getValueSize(largeBuffer));
1:         assertEquals(EncodingCodes.STR32, encoding.getEncodingCode());
1:         assertFalse(encoding.encodesJavaPrimitive());
1:         assertEquals(utf8BufferEncoding, encoding.getType());
1:     }
1: 
1:     @Test
1:     public void testEncodeDecodeEmptyStringBuffer() {
1:         final AmqpWritableBuffer buffer = new AmqpWritableBuffer();
1:         encoder.setByteBuffer(buffer);
1:         encoder.writeObject(new UTF8Buffer(""));
1: 
1:         byte[] copy = new byte[buffer.getArrayLength()];
1:         System.arraycopy(buffer.getArray(), 0, copy, 0, buffer.getArrayLength());
1: 
1:         ReadableBuffer encoded = ReadableBuffer.ByteBufferReader.wrap(copy);
1:         decoder.setBuffer(encoded);
1: 
1:         Object valueRead = decoder.readObject();
1:         assertTrue(valueRead instanceof String);
1:         String decodedString = (String) valueRead;
1:         assertEquals("", decodedString);
1:     }
1: 
1:     @Test
1:     public void testEncodeDecodeSmallBuffer() {
1:         final AmqpWritableBuffer buffer = new AmqpWritableBuffer();
1:         encoder.setByteBuffer(buffer);
1:         encoder.writeObject(smallBuffer);
1: 
1:         byte[] copy = new byte[buffer.getArrayLength()];
1:         System.arraycopy(buffer.getArray(), 0, copy, 0, buffer.getArrayLength());
1: 
1:         ReadableBuffer encoded = ReadableBuffer.ByteBufferReader.wrap(copy);
1:         decoder.setBuffer(encoded);
1: 
1:         Object valueRead = decoder.readObject();
1:         assertTrue(valueRead instanceof String);
1:         String decodedString = (String) valueRead;
1:         assertEquals(smallString, decodedString);
1:     }
1: 
1:     @Test
1:     public void testEncodeDecodeLargeBuffer() {
1:         final AmqpWritableBuffer buffer = new AmqpWritableBuffer();
1:         encoder.setByteBuffer(buffer);
1:         encoder.writeObject(largeBuffer);
1: 
1:         byte[] copy = new byte[buffer.getArrayLength()];
1:         System.arraycopy(buffer.getArray(), 0, copy, 0, buffer.getArrayLength());
1: 
1:         ReadableBuffer encoded = ReadableBuffer.ByteBufferReader.wrap(copy);
1:         decoder.setBuffer(encoded);
1: 
1:         Object valueRead = decoder.readObject();
1:         assertTrue(valueRead instanceof String);
1:         String decodedString = (String) valueRead;
1:         assertEquals(largeString, decodedString);
1:     }
1: }
============================================================================