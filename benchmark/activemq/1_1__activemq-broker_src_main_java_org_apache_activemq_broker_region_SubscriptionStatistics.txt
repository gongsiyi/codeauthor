1:eece576: /**
1:eece576:  * Licensed to the Apache Software Foundation (ASF) under one or more
1:eece576:  * contributor license agreements.  See the NOTICE file distributed with
1:eece576:  * this work for additional information regarding copyright ownership.
1:eece576:  * The ASF licenses this file to You under the Apache License, Version 2.0
1:eece576:  * (the "License"); you may not use this file except in compliance with
1:eece576:  * the License.  You may obtain a copy of the License at
1:eece576:  *
1:eece576:  *      http://www.apache.org/licenses/LICENSE-2.0
1:eece576:  *
1:eece576:  * Unless required by applicable law or agreed to in writing, software
1:eece576:  * distributed under the License is distributed on an "AS IS" BASIS,
1:eece576:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:eece576:  * See the License for the specific language governing permissions and
1:eece576:  * limitations under the License.
1:eece576:  */
1:eece576: 
1:eece576: package org.apache.activemq.broker.region;
1:eece576: 
1:eece576: import org.apache.activemq.management.CountStatisticImpl;
1:4605503: import org.apache.activemq.management.SizeStatisticImpl;
1:eece576: import org.apache.activemq.management.StatsImpl;
1:eece576: 
1:eece576: /**
1:eece576:  * The J2EE Statistics for a Subsription.
1:eece576:  */
1:eece576: public class SubscriptionStatistics extends StatsImpl {
1:eece576: 
1:eece576:     protected CountStatisticImpl consumedCount;
1:eece576:     protected CountStatisticImpl enqueues;
1:eece576:     protected CountStatisticImpl dequeues;
1:eece576:     protected CountStatisticImpl dispatched;
1:4605503:     protected SizeStatisticImpl inflightMessageSize;
1:eece576: 
1:eece576: 
1:eece576:     public SubscriptionStatistics() {
1:eece576:         this(true);
1:eece576:     }
1:eece576: 
1:eece576:     public SubscriptionStatistics(boolean enabled) {
1:eece576: 
1:eece576:         consumedCount = new CountStatisticImpl("consumedCount", "The number of messages that have been consumed by the subscription");
1:eece576:         enqueues = new CountStatisticImpl("enqueues", "The number of messages that have been sent to the subscription");
1:eece576:         dispatched = new CountStatisticImpl("dispatched", "The number of messages that have been dispatched from the subscription");
1:eece576:         dequeues = new CountStatisticImpl("dequeues", "The number of messages that have been acknowledged from the subscription");
1:4605503:         inflightMessageSize = new SizeStatisticImpl("inflightMessageSize", "The size in bytes of messages dispatched but awaiting acknowledgement");
1:eece576: 
1:eece576:         addStatistic("consumedCount", consumedCount);
1:eece576:         addStatistic("enqueues", enqueues);
1:eece576:         addStatistic("dispatched", dispatched);
1:eece576:         addStatistic("dequeues", dequeues);
1:4605503:         addStatistic("inflightMessageSize", inflightMessageSize);
1:eece576: 
1:eece576:         this.setEnabled(enabled);
1:eece576:     }
1:eece576: 
1:eece576:     public CountStatisticImpl getConsumedCount() {
1:eece576:         return consumedCount;
1:eece576:     }
1:eece576: 
1:eece576:     public CountStatisticImpl getEnqueues() {
1:eece576:         return enqueues;
1:eece576:     }
1:eece576: 
1:eece576:     public CountStatisticImpl getDequeues() {
1:eece576:         return dequeues;
1:eece576:     }
1:eece576: 
1:eece576:     public CountStatisticImpl getDispatched() {
1:eece576:         return dispatched;
1:eece576:     }
1:eece576: 
1:4605503:     public SizeStatisticImpl getInflightMessageSize() {
1:4605503:         return inflightMessageSize;
1:4605503:     }
1:4605503: 
1:eece576:     public void reset() {
1:eece576:         if (this.isDoReset()) {
1:eece576:             super.reset();
1:eece576:             consumedCount.reset();
1:eece576:             enqueues.reset();
1:eece576:             dequeues.reset();
1:eece576:             dispatched.reset();
1:4605503:             inflightMessageSize.reset();
1:eece576:         }
1:eece576:     }
1:eece576: 
1:eece576:     public void setEnabled(boolean enabled) {
1:eece576:         super.setEnabled(enabled);
1:eece576:         consumedCount.setEnabled(enabled);
1:eece576:         enqueues.setEnabled(enabled);
1:eece576:         dispatched.setEnabled(enabled);
1:eece576:         dequeues.setEnabled(enabled);
1:4605503:         inflightMessageSize.setEnabled(enabled);
1:eece576:     }
1:eece576: 
1:eece576:     public void setParent(SubscriptionStatistics parent) {
1:eece576:         if (parent != null) {
1:eece576:             consumedCount.setParent(parent.consumedCount);
1:eece576:             enqueues.setParent(parent.enqueues);
1:eece576:             dispatched.setParent(parent.dispatched);
1:eece576:             dequeues.setParent(parent.dequeues);
1:4605503:             inflightMessageSize.setParent(parent.inflightMessageSize);
1:eece576:         } else {
1:eece576:             consumedCount.setParent(null);
1:eece576:             enqueues.setParent(null);
1:eece576:             dispatched.setParent(null);
1:eece576:             dequeues.setParent(null);
1:4605503:             inflightMessageSize.setParent(null);
1:eece576:         }
1:eece576:     }
1:eece576: 
1:eece576: }
============================================================================
author:Christopher L. Shannon (cshannon)
-------------------------------------------------------------------------------
commit:4605503
/////////////////////////////////////////////////////////////////////////
1: import org.apache.activemq.management.SizeStatisticImpl;
/////////////////////////////////////////////////////////////////////////
1:     protected SizeStatisticImpl inflightMessageSize;
/////////////////////////////////////////////////////////////////////////
1:         inflightMessageSize = new SizeStatisticImpl("inflightMessageSize", "The size in bytes of messages dispatched but awaiting acknowledgement");
1:         addStatistic("inflightMessageSize", inflightMessageSize);
/////////////////////////////////////////////////////////////////////////
1:     public SizeStatisticImpl getInflightMessageSize() {
1:         return inflightMessageSize;
1:     }
1: 
/////////////////////////////////////////////////////////////////////////
1:             inflightMessageSize.reset();
/////////////////////////////////////////////////////////////////////////
1:         inflightMessageSize.setEnabled(enabled);
/////////////////////////////////////////////////////////////////////////
1:             inflightMessageSize.setParent(parent.inflightMessageSize);
1:             inflightMessageSize.setParent(null);
commit:eece576
/////////////////////////////////////////////////////////////////////////
1: /**
1:  * Licensed to the Apache Software Foundation (ASF) under one or more
1:  * contributor license agreements.  See the NOTICE file distributed with
1:  * this work for additional information regarding copyright ownership.
1:  * The ASF licenses this file to You under the Apache License, Version 2.0
1:  * (the "License"); you may not use this file except in compliance with
1:  * the License.  You may obtain a copy of the License at
1:  *
1:  *      http://www.apache.org/licenses/LICENSE-2.0
1:  *
1:  * Unless required by applicable law or agreed to in writing, software
1:  * distributed under the License is distributed on an "AS IS" BASIS,
1:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:  * See the License for the specific language governing permissions and
1:  * limitations under the License.
1:  */
1: 
1: package org.apache.activemq.broker.region;
1: 
1: import org.apache.activemq.management.CountStatisticImpl;
1: import org.apache.activemq.management.StatsImpl;
1: 
1: /**
1:  * The J2EE Statistics for a Subsription.
1:  */
1: public class SubscriptionStatistics extends StatsImpl {
1: 
1:     protected CountStatisticImpl consumedCount;
1:     protected CountStatisticImpl enqueues;
1:     protected CountStatisticImpl dequeues;
1:     protected CountStatisticImpl dispatched;
1: 
1: 
1:     public SubscriptionStatistics() {
1:         this(true);
1:     }
1: 
1:     public SubscriptionStatistics(boolean enabled) {
1: 
1:         consumedCount = new CountStatisticImpl("consumedCount", "The number of messages that have been consumed by the subscription");
1:         enqueues = new CountStatisticImpl("enqueues", "The number of messages that have been sent to the subscription");
1:         dispatched = new CountStatisticImpl("dispatched", "The number of messages that have been dispatched from the subscription");
1:         dequeues = new CountStatisticImpl("dequeues", "The number of messages that have been acknowledged from the subscription");
1: 
1:         addStatistic("consumedCount", consumedCount);
1:         addStatistic("enqueues", enqueues);
1:         addStatistic("dispatched", dispatched);
1:         addStatistic("dequeues", dequeues);
1: 
1:         this.setEnabled(enabled);
1:     }
1: 
1:     public CountStatisticImpl getConsumedCount() {
1:         return consumedCount;
1:     }
1: 
1:     public CountStatisticImpl getEnqueues() {
1:         return enqueues;
1:     }
1: 
1:     public CountStatisticImpl getDequeues() {
1:         return dequeues;
1:     }
1: 
1:     public CountStatisticImpl getDispatched() {
1:         return dispatched;
1:     }
1: 
1:     public void reset() {
1:         if (this.isDoReset()) {
1:             super.reset();
1:             consumedCount.reset();
1:             enqueues.reset();
1:             dequeues.reset();
1:             dispatched.reset();
1:         }
1:     }
1: 
1:     public void setEnabled(boolean enabled) {
1:         super.setEnabled(enabled);
1:         consumedCount.setEnabled(enabled);
1:         enqueues.setEnabled(enabled);
1:         dispatched.setEnabled(enabled);
1:         dequeues.setEnabled(enabled);
1:     }
1: 
1:     public void setParent(SubscriptionStatistics parent) {
1:         if (parent != null) {
1:             consumedCount.setParent(parent.consumedCount);
1:             enqueues.setParent(parent.enqueues);
1:             dispatched.setParent(parent.dispatched);
1:             dequeues.setParent(parent.dequeues);
1:         } else {
1:             consumedCount.setParent(null);
1:             enqueues.setParent(null);
1:             dispatched.setParent(null);
1:             dequeues.setParent(null);
1:         }
1:     }
1: 
1: }
============================================================================