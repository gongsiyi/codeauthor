1:5daeb53: /**
1:5daeb53:  * Licensed to the Apache Software Foundation (ASF) under one or more
1:5daeb53:  * contributor license agreements.  See the NOTICE file distributed with
1:5daeb53:  * this work for additional information regarding copyright ownership.
1:5daeb53:  * The ASF licenses this file to You under the Apache License, Version 2.0
1:5daeb53:  * (the "License"); you may not use this file except in compliance with
1:5daeb53:  * the License.  You may obtain a copy of the License at
1:5daeb53:  *
1:5daeb53:  *      http://www.apache.org/licenses/LICENSE-2.0
1:5daeb53:  *
1:5daeb53:  * Unless required by applicable law or agreed to in writing, software
1:5daeb53:  * distributed under the License is distributed on an "AS IS" BASIS,
1:5daeb53:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:5daeb53:  * See the License for the specific language governing permissions and
1:5daeb53:  * limitations under the License.
1:5daeb53:  */
1:5daeb53: package org.apache.activemq.usecases;
1:5daeb53: 
1:5daeb53: 
1:5daeb53: import java.lang.management.ManagementFactory;
1:5daeb53: import java.lang.management.ThreadInfo;
1:5daeb53: import java.lang.management.ThreadMXBean;
1:5daeb53: import java.util.Vector;
1:5daeb53: import java.util.concurrent.CountDownLatch;
1:5daeb53: import java.util.concurrent.ExecutorService;
1:5daeb53: import java.util.concurrent.TimeUnit;
1:5daeb53: import javax.jms.Connection;
1:5daeb53: import javax.jms.ConnectionFactory;
1:5daeb53: import javax.jms.MessageConsumer;
1:5daeb53: import javax.jms.MessageProducer;
1:5daeb53: import javax.jms.Session;
1:5daeb53: import org.apache.activemq.ActiveMQConnectionFactory;
1:5daeb53: import org.apache.activemq.broker.BrokerService;
1:5daeb53: import org.apache.activemq.command.ActiveMQQueue;
1:5daeb53: import org.slf4j.Logger;
1:5daeb53: import org.slf4j.LoggerFactory;
1:5daeb53: 
1:5daeb53: public class ConcurrentDestinationCreationTest extends org.apache.activemq.TestSupport {
1:5daeb53:     private static final Logger LOG = LoggerFactory.getLogger(ConcurrentDestinationCreationTest.class);
1:5daeb53:     BrokerService broker;
1:5daeb53: 
1:5daeb53:     @Override
1:5daeb53:     protected void setUp() throws Exception {
1:5daeb53:         broker = createBroker();
1:5daeb53:         super.setUp();
1:5daeb53:     }
1:5daeb53: 
1:5daeb53:     @Override
1:5daeb53:     protected void tearDown() throws Exception {
1:5daeb53:         super.tearDown();
1:5daeb53:         broker.stop();
1:5daeb53:     }
1:5daeb53: 
1:5daeb53:     protected ActiveMQConnectionFactory createConnectionFactory() throws Exception {
1:5daeb53:         return new ActiveMQConnectionFactory(broker.getTransportConnectors().get(0).getPublishableConnectString() + "?jms.watchTopicAdvisories=false&jms.closeTimeout=35000");
1:5daeb53:     }
1:5daeb53: 
1:5daeb53:     BrokerService createBroker() throws Exception {
1:5daeb53:         BrokerService service = new BrokerService();
1:5daeb53:         service.setDeleteAllMessagesOnStartup(true);
1:5daeb53:         service.setAdvisorySupport(false);
1:5daeb53:         service.setTransportConnectorURIs(new String[]{"tcp://localhost:0"});
1:5daeb53:         service.setPersistent(false);
1:5daeb53:         service.setUseJmx(false);
1:5daeb53:         service.start();
1:5daeb53:         return service;
1:5daeb53:     }
1:5daeb53: 
1:5daeb53:     public void testSendRateWithActivatingConsumers() throws Exception {
1:5daeb53: 
1:5daeb53:         final Vector<Throwable> exceptions = new Vector<Throwable>();
1:5daeb53:         final int jobs = 50;
1:5daeb53:         final int destinationCount = 10;
1:5daeb53:         final CountDownLatch allDone = new CountDownLatch(jobs);
1:5daeb53:         ExecutorService executor = java.util.concurrent.Executors.newCachedThreadPool();
1:5daeb53:         for (int i = 0; i < jobs; i++) {
1:5daeb53:             if (i %2 == 0 &&  i<jobs/2) {
1:5daeb53:                 executor.execute(new Runnable() {
1:5daeb53:                     final ConnectionFactory factory = createConnectionFactory();
1:5daeb53: 
1:5daeb53:                     @Override
1:5daeb53:                     public void run() {
1:5daeb53:                         try {
1:5daeb53:                             final Connection connection = factory.createConnection();
1:5daeb53:                             connection.start();
1:5daeb53:                             final Session session = connection.createSession(false, Session.AUTO_ACKNOWLEDGE);
1:5daeb53: 
1:5daeb53:                             for (int j = 0; j< jobs*10; j++) {
1:5daeb53:                                 final MessageProducer producer = session.createProducer(new ActiveMQQueue("Q." + (j%destinationCount)));
1:5daeb53:                                 producer.send(session.createMessage());
1:5daeb53:                             }
1:5daeb53:                             connection.close();
1:5daeb53:                             allDone.countDown();
1:5daeb53:                             LOG.info("Producers done!");
1:5daeb53:                         } catch (Exception ignored) {
1:5daeb53:                             LOG.error("unexpected ", ignored);
1:5daeb53:                             exceptions.add(ignored);
1:5daeb53:                         }
1:5daeb53:                     }
1:5daeb53:                 });
1:5daeb53:             } else {
1:5daeb53: 
1:5daeb53:                 executor.execute(new Runnable() {
1:5daeb53:                     final ConnectionFactory factory = createConnectionFactory();
1:5daeb53: 
1:5daeb53:                     @Override
1:5daeb53:                     public void run() {
1:5daeb53:                         try {
1:5daeb53:                             final Connection connection = factory.createConnection();
1:5daeb53:                             connection.start();
1:5daeb53:                             final Session session = connection.createSession(false, Session.AUTO_ACKNOWLEDGE);
1:5daeb53:                             for (int j = 0; j < jobs; j++) {
1:5daeb53:                                 final MessageConsumer consumer = session.createConsumer(new ActiveMQQueue("Q.>"));
1:5daeb53:                                 consumer.receiveNoWait();
1:5daeb53:                             }
1:5daeb53:                             connection.close();
1:5daeb53:                             allDone.countDown();
1:5daeb53:                             LOG.info("Consumers done!");
1:5daeb53:                         } catch (Exception ignored) {
1:5daeb53:                             LOG.error("unexpected ", ignored);
1:5daeb53:                             exceptions.add(ignored);
1:5daeb53:                         }
1:5daeb53:                     }
1:5daeb53:                 });
1:5daeb53:             }
1:5daeb53:         }
1:5daeb53:         LOG.info("Waiting for completion");
1:5daeb53:         executor.shutdown();
1:5daeb53:         boolean success = allDone.await(30, TimeUnit.SECONDS);
1:5daeb53:         if (!success) {
1:5daeb53:             dumpAllThreads("hung");
1:5daeb53: 
1:5daeb53:             ThreadMXBean bean = ManagementFactory.getThreadMXBean();
1:5daeb53:             LOG.info("Supports dead lock detection: " + bean.isSynchronizerUsageSupported());
1:5daeb53:             long[] threadIds = bean.findDeadlockedThreads();
1:5daeb53:             if (threadIds != null) {
1:5daeb53:                 System.err.println("Dead locked threads....");
1:5daeb53:                 ThreadInfo[] infos = bean.getThreadInfo(threadIds);
1:5daeb53: 
1:5daeb53:                 for (ThreadInfo info : infos) {
1:5daeb53:                     StackTraceElement[] stack = info.getStackTrace();
1:5daeb53:                     System.err.println(" " + info + ", stack size::"  + stack.length);
1:5daeb53:                     for (StackTraceElement stackEntry : stack) {
1:5daeb53:                         System.err.println("   " + stackEntry);
1:5daeb53:                     }
1:5daeb53:                 }
1:5daeb53:             }
1:5daeb53:         }
1:5daeb53:         assertTrue("Finished on time", success);
1:5daeb53:         assertTrue("No unexpected exceptions", exceptions.isEmpty());
1:5daeb53:     }
1:5daeb53: }
============================================================================
author:Timothy A. Bish
-------------------------------------------------------------------------------
commit:ef24cc9
author:Gary Tully
-------------------------------------------------------------------------------
commit:5daeb53
/////////////////////////////////////////////////////////////////////////
1: /**
1:  * Licensed to the Apache Software Foundation (ASF) under one or more
1:  * contributor license agreements.  See the NOTICE file distributed with
1:  * this work for additional information regarding copyright ownership.
1:  * The ASF licenses this file to You under the Apache License, Version 2.0
1:  * (the "License"); you may not use this file except in compliance with
1:  * the License.  You may obtain a copy of the License at
1:  *
1:  *      http://www.apache.org/licenses/LICENSE-2.0
1:  *
1:  * Unless required by applicable law or agreed to in writing, software
1:  * distributed under the License is distributed on an "AS IS" BASIS,
1:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:  * See the License for the specific language governing permissions and
1:  * limitations under the License.
1:  */
1: package org.apache.activemq.usecases;
1: 
1: 
1: import java.lang.management.ManagementFactory;
1: import java.lang.management.ThreadInfo;
1: import java.lang.management.ThreadMXBean;
1: import java.util.Vector;
1: import java.util.concurrent.CountDownLatch;
1: import java.util.concurrent.ExecutorService;
1: import java.util.concurrent.TimeUnit;
1: import javax.jms.Connection;
1: import javax.jms.ConnectionFactory;
1: import javax.jms.MessageConsumer;
1: import javax.jms.MessageProducer;
1: import javax.jms.Session;
1: import org.apache.activemq.ActiveMQConnectionFactory;
1: import org.apache.activemq.broker.BrokerService;
1: import org.apache.activemq.command.ActiveMQQueue;
1: import org.slf4j.Logger;
1: import org.slf4j.LoggerFactory;
1: 
1: public class ConcurrentDestinationCreationTest extends org.apache.activemq.TestSupport {
1:     private static final Logger LOG = LoggerFactory.getLogger(ConcurrentDestinationCreationTest.class);
1:     BrokerService broker;
1: 
1:     @Override
1:     protected void setUp() throws Exception {
1:         broker = createBroker();
1:         super.setUp();
1:     }
1: 
1:     @Override
1:     protected void tearDown() throws Exception {
1:         super.tearDown();
1:         broker.stop();
1:     }
1: 
1:     protected ActiveMQConnectionFactory createConnectionFactory() throws Exception {
1:         return new ActiveMQConnectionFactory(broker.getTransportConnectors().get(0).getPublishableConnectString() + "?jms.watchTopicAdvisories=false&jms.closeTimeout=35000");
1:     }
1: 
1:     BrokerService createBroker() throws Exception {
1:         BrokerService service = new BrokerService();
1:         service.setDeleteAllMessagesOnStartup(true);
1:         service.setAdvisorySupport(false);
1:         service.setTransportConnectorURIs(new String[]{"tcp://localhost:0"});
1:         service.setPersistent(false);
1:         service.setUseJmx(false);
1:         service.start();
1:         return service;
1:     }
1: 
1:     public void testSendRateWithActivatingConsumers() throws Exception {
1: 
1:         final Vector<Throwable> exceptions = new Vector<Throwable>();
1:         final int jobs = 50;
1:         final int destinationCount = 10;
1:         final CountDownLatch allDone = new CountDownLatch(jobs);
1:         ExecutorService executor = java.util.concurrent.Executors.newCachedThreadPool();
1:         for (int i = 0; i < jobs; i++) {
1:             if (i %2 == 0 &&  i<jobs/2) {
1:                 executor.execute(new Runnable() {
1:                     final ConnectionFactory factory = createConnectionFactory();
1: 
1:                     @Override
1:                     public void run() {
1:                         try {
1:                             final Connection connection = factory.createConnection();
1:                             connection.start();
1:                             final Session session = connection.createSession(false, Session.AUTO_ACKNOWLEDGE);
1: 
1:                             for (int j = 0; j< jobs*10; j++) {
1:                                 final MessageProducer producer = session.createProducer(new ActiveMQQueue("Q." + (j%destinationCount)));
1:                                 producer.send(session.createMessage());
1:                             }
1:                             connection.close();
1:                             allDone.countDown();
1:                             LOG.info("Producers done!");
1:                         } catch (Exception ignored) {
1:                             LOG.error("unexpected ", ignored);
1:                             exceptions.add(ignored);
1:                         }
1:                     }
1:                 });
1:             } else {
1: 
1:                 executor.execute(new Runnable() {
1:                     final ConnectionFactory factory = createConnectionFactory();
1: 
1:                     @Override
1:                     public void run() {
1:                         try {
1:                             final Connection connection = factory.createConnection();
1:                             connection.start();
1:                             final Session session = connection.createSession(false, Session.AUTO_ACKNOWLEDGE);
1:                             for (int j = 0; j < jobs; j++) {
1:                                 final MessageConsumer consumer = session.createConsumer(new ActiveMQQueue("Q.>"));
1:                                 consumer.receiveNoWait();
1:                             }
1:                             connection.close();
1:                             allDone.countDown();
1:                             LOG.info("Consumers done!");
1:                         } catch (Exception ignored) {
1:                             LOG.error("unexpected ", ignored);
1:                             exceptions.add(ignored);
1:                         }
1:                     }
1:                 });
1:             }
1:         }
1:         LOG.info("Waiting for completion");
1:         executor.shutdown();
1:         boolean success = allDone.await(30, TimeUnit.SECONDS);
1:         if (!success) {
1:             dumpAllThreads("hung");
1: 
1:             ThreadMXBean bean = ManagementFactory.getThreadMXBean();
1:             LOG.info("Supports dead lock detection: " + bean.isSynchronizerUsageSupported());
1:             long[] threadIds = bean.findDeadlockedThreads();
1:             if (threadIds != null) {
1:                 System.err.println("Dead locked threads....");
1:                 ThreadInfo[] infos = bean.getThreadInfo(threadIds);
1: 
1:                 for (ThreadInfo info : infos) {
1:                     StackTraceElement[] stack = info.getStackTrace();
1:                     System.err.println(" " + info + ", stack size::"  + stack.length);
1:                     for (StackTraceElement stackEntry : stack) {
1:                         System.err.println("   " + stackEntry);
1:                     }
1:                 }
1:             }
1:         }
1:         assertTrue("Finished on time", success);
1:         assertTrue("No unexpected exceptions", exceptions.isEmpty());
1:     }
1: }
============================================================================