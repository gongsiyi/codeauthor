1:74846bb: /**
1:74846bb:  * Licensed to the Apache Software Foundation (ASF) under one or more
1:74846bb:  * contributor license agreements.  See the NOTICE file distributed with
1:74846bb:  * this work for additional information regarding copyright ownership.
1:74846bb:  * The ASF licenses this file to You under the Apache License, Version 2.0
1:74846bb:  * (the "License"); you may not use this file except in compliance with
1:74846bb:  * the License.  You may obtain a copy of the License at
1:74846bb:  *
1:74846bb:  *      http://www.apache.org/licenses/LICENSE-2.0
1:74846bb:  *
1:74846bb:  * Unless required by applicable law or agreed to in writing, software
1:74846bb:  * distributed under the License is distributed on an "AS IS" BASIS,
1:74846bb:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:74846bb:  * See the License for the specific language governing permissions and
1:74846bb:  * limitations under the License.
1:74846bb:  */
1:74846bb: 
1:74846bb: package org.apache.activemq.broker.scheduler;
1:74846bb: 
1:74846bb: import static org.junit.Assert.assertEquals;
1:74846bb: import static org.junit.Assert.assertTrue;
1:74846bb: 
1:74846bb: import java.io.File;
1:74846bb: import java.io.IOException;
1:74846bb: import java.util.concurrent.CountDownLatch;
1:74846bb: import java.util.concurrent.TimeUnit;
1:74846bb: 
1:74846bb: import org.apache.activemq.store.kahadb.scheduler.JobSchedulerStoreImpl;
1:74846bb: import org.apache.activemq.util.ByteSequence;
1:74846bb: import org.apache.activemq.util.IOHelper;
1:74846bb: import org.apache.activemq.util.Wait;
1:8c4b5f4: import org.apache.log4j.Level;
1:74846bb: import org.junit.After;
1:74846bb: import org.junit.Before;
1:74846bb: import org.junit.Test;
1:74846bb: import org.slf4j.Logger;
1:74846bb: import org.slf4j.LoggerFactory;
1:74846bb: 
1:74846bb: public class JobSchedulerStoreCheckpointTest {
1:74846bb: 
1:74846bb:     static final Logger LOG = LoggerFactory.getLogger(JobSchedulerStoreCheckpointTest.class);
1:74846bb: 
1:74846bb:     private JobSchedulerStoreImpl store;
1:74846bb:     private JobScheduler scheduler;
1:74846bb:     private ByteSequence payload;
1:74846bb: 
1:74846bb:     @Before
1:74846bb:     public void setUp() throws Exception {
1:8c4b5f4: 
1:8c4b5f4:         // investigate gc issue - store usage not getting released
1:8c4b5f4:         org.apache.log4j.Logger.getLogger(JobSchedulerStoreImpl.class).setLevel(Level.TRACE);
1:8c4b5f4: 
1:74846bb:         File directory = new File("target/test/ScheduledJobsDB");
1:74846bb:         IOHelper.mkdirs(directory);
1:74846bb:         IOHelper.deleteChildren(directory);
1:74846bb:         startStore(directory);
1:74846bb: 
1:74846bb:         byte[] data = new byte[8192];
1:74846bb:         for (int i = 0; i < data.length; ++i) {
1:74846bb:             data[i] = (byte) (i % 256);
1:74846bb:         }
1:74846bb: 
1:74846bb:         payload = new ByteSequence(data);
1:74846bb:     }
1:74846bb: 
1:74846bb:     protected void startStore(File directory) throws Exception {
1:74846bb:         store = new JobSchedulerStoreImpl();
1:74846bb:         store.setDirectory(directory);
1:74846bb:         store.setCheckpointInterval(5000);
1:74846bb:         store.setCleanupInterval(10000);
1:74846bb:         store.setJournalMaxFileLength(10 * 1024);
1:74846bb:         store.start();
1:74846bb:         scheduler = store.getJobScheduler("test");
1:74846bb:         scheduler.startDispatching();
1:74846bb:     }
1:74846bb: 
1:74846bb:     private int getNumJournalFiles() throws IOException {
1:74846bb:         return store.getJournal().getFileMap().size();
1:74846bb:     }
1:74846bb: 
1:74846bb:     @After
1:74846bb:     public void tearDown() throws Exception {
1:74846bb:         scheduler.stopDispatching();
1:74846bb:         store.stop();
1:74846bb:     }
1:74846bb: 
1:74846bb:     @Test
1:8c4b5f4:     public void testStoreCleanupLinear() throws Exception {
1:74846bb:         final int COUNT = 10;
1:74846bb:         final CountDownLatch latch = new CountDownLatch(COUNT);
1:74846bb:         scheduler.addListener(new JobListener() {
1:74846bb:             @Override
1:74846bb:             public void scheduledJob(String id, ByteSequence job) {
1:74846bb:                 latch.countDown();
1:74846bb:             }
1:74846bb:         });
1:74846bb: 
1:74846bb:         long time = TimeUnit.SECONDS.toMillis(30);
1:74846bb:         for (int i = 0; i < COUNT; i++) {
1:74846bb:             scheduler.schedule("id" + i, payload, "", time, 0, 0);
1:74846bb:         }
1:74846bb: 
1:74846bb:         int size = scheduler.getAllJobs().size();
1:74846bb:         assertEquals(size, COUNT);
1:74846bb: 
1:74846bb:         LOG.info("Number of journal log files: {}", getNumJournalFiles());
1:74846bb:         // need a little slack so go over 60 seconds
1:74846bb:         assertTrue(latch.await(70, TimeUnit.SECONDS));
1:74846bb:         assertEquals(0, latch.getCount());
1:8c4b5f4: 
1:74846bb:         for (int i = 0; i < COUNT; i++) {
1:74846bb:             scheduler.schedule("id" + i, payload, "", time, 0, 0);
1:74846bb:         }
1:8c4b5f4: 
1:74846bb:         LOG.info("Number of journal log files: {}", getNumJournalFiles());
1:74846bb:         // need a little slack so go over 60 seconds
1:74846bb:         assertTrue(latch.await(70, TimeUnit.SECONDS));
1:74846bb:         assertEquals(0, latch.getCount());
1:74846bb: 
1:74846bb:         assertTrue("Should be only one log left: " + getNumJournalFiles(), Wait.waitFor(new Wait.Condition() {
1:74846bb: 
1:74846bb:             @Override
1:74846bb:             public boolean isSatisified() throws Exception {
1:74846bb:                 return getNumJournalFiles() == 1;
1:74846bb:             }
1:74846bb:         }, TimeUnit.MINUTES.toMillis(2)));
1:74846bb: 
1:74846bb:         LOG.info("Number of journal log files: {}", getNumJournalFiles());
1:74846bb:     }
1:74846bb: 
1:8c4b5f4:     @Test
1:8c4b5f4:     public void testColocatedAddRemoveCleanup() throws Exception {
1:8c4b5f4:         final CountDownLatch latch = new CountDownLatch(1);
1:8c4b5f4:         scheduler.addListener(new JobListener() {
1:8c4b5f4:             @Override
1:8c4b5f4:             public void scheduledJob(String id, ByteSequence job) {
1:8c4b5f4:                 latch.countDown();
1:8c4b5f4:             }
1:8c4b5f4:         });
1:8c4b5f4: 
1:8c4b5f4:         byte[] data = new byte[1024];
1:8c4b5f4:         for (int i = 0; i < data.length; ++i) {
1:8c4b5f4:             data[i] = (byte) (i % 256);
1:8c4b5f4:         }
1:8c4b5f4: 
1:8c4b5f4:         long time = TimeUnit.SECONDS.toMillis(2);
1:8c4b5f4:         scheduler.schedule("Message-1", new ByteSequence(data), "", time, 0, 0);
1:8c4b5f4: 
1:8c4b5f4:         assertTrue(latch.await(70, TimeUnit.SECONDS));
1:8c4b5f4:         assertEquals(0, latch.getCount());
1:8c4b5f4: 
1:8c4b5f4:         scheduler.schedule("Message-2", payload, "", time, 0, 0);
1:8c4b5f4:         scheduler.schedule("Message-3", payload, "", time, 0, 0);
1:8c4b5f4: 
1:8c4b5f4:         assertTrue("Should be only one log left: " + getNumJournalFiles(), Wait.waitFor(new Wait.Condition() {
1:8c4b5f4: 
1:8c4b5f4:             @Override
1:8c4b5f4:             public boolean isSatisified() throws Exception {
1:8c4b5f4:                 return getNumJournalFiles() == 1;
1:8c4b5f4:             }
1:8c4b5f4:         }, TimeUnit.MINUTES.toMillis(2)));
1:74846bb: 
1:8c4b5f4:         LOG.info("Number of journal log files: {}", getNumJournalFiles());
1:8c4b5f4:     }
1:74846bb: }
============================================================================
author:Timothy Bish
-------------------------------------------------------------------------------
commit:8c4b5f4
/////////////////////////////////////////////////////////////////////////
1: import org.apache.log4j.Level;
/////////////////////////////////////////////////////////////////////////
1: 
1:         // investigate gc issue - store usage not getting released
1:         org.apache.log4j.Logger.getLogger(JobSchedulerStoreImpl.class).setLevel(Level.TRACE);
1: 
/////////////////////////////////////////////////////////////////////////
1:     public void testStoreCleanupLinear() throws Exception {
/////////////////////////////////////////////////////////////////////////
1: 
1:     @Test
1:     public void testColocatedAddRemoveCleanup() throws Exception {
1:         final CountDownLatch latch = new CountDownLatch(1);
1:         scheduler.addListener(new JobListener() {
1:             @Override
1:             public void scheduledJob(String id, ByteSequence job) {
1:                 latch.countDown();
1:             }
1:         });
1: 
1:         byte[] data = new byte[1024];
1:         for (int i = 0; i < data.length; ++i) {
1:             data[i] = (byte) (i % 256);
1:         }
1: 
1:         long time = TimeUnit.SECONDS.toMillis(2);
1:         scheduler.schedule("Message-1", new ByteSequence(data), "", time, 0, 0);
1: 
1:         assertTrue(latch.await(70, TimeUnit.SECONDS));
1:         assertEquals(0, latch.getCount());
1: 
1:         scheduler.schedule("Message-2", payload, "", time, 0, 0);
1:         scheduler.schedule("Message-3", payload, "", time, 0, 0);
1: 
1:         assertTrue("Should be only one log left: " + getNumJournalFiles(), Wait.waitFor(new Wait.Condition() {
1: 
1:             @Override
1:             public boolean isSatisified() throws Exception {
1:                 return getNumJournalFiles() == 1;
1:             }
1:         }, TimeUnit.MINUTES.toMillis(2)));
1: 
1:         LOG.info("Number of journal log files: {}", getNumJournalFiles());
1:     }
commit:74846bb
/////////////////////////////////////////////////////////////////////////
1: /**
1:  * Licensed to the Apache Software Foundation (ASF) under one or more
1:  * contributor license agreements.  See the NOTICE file distributed with
1:  * this work for additional information regarding copyright ownership.
1:  * The ASF licenses this file to You under the Apache License, Version 2.0
1:  * (the "License"); you may not use this file except in compliance with
1:  * the License.  You may obtain a copy of the License at
1:  *
1:  *      http://www.apache.org/licenses/LICENSE-2.0
1:  *
1:  * Unless required by applicable law or agreed to in writing, software
1:  * distributed under the License is distributed on an "AS IS" BASIS,
1:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:  * See the License for the specific language governing permissions and
1:  * limitations under the License.
1:  */
1: 
1: package org.apache.activemq.broker.scheduler;
1: 
1: import static org.junit.Assert.assertEquals;
1: import static org.junit.Assert.assertTrue;
1: 
1: import java.io.File;
1: import java.io.IOException;
1: import java.util.concurrent.CountDownLatch;
1: import java.util.concurrent.TimeUnit;
1: 
1: import org.apache.activemq.store.kahadb.scheduler.JobSchedulerStoreImpl;
1: import org.apache.activemq.util.ByteSequence;
1: import org.apache.activemq.util.IOHelper;
1: import org.apache.activemq.util.Wait;
1: import org.junit.After;
1: import org.junit.Before;
1: import org.junit.Test;
1: import org.slf4j.Logger;
1: import org.slf4j.LoggerFactory;
1: 
1: public class JobSchedulerStoreCheckpointTest {
1: 
1:     static final Logger LOG = LoggerFactory.getLogger(JobSchedulerStoreCheckpointTest.class);
1: 
1:     private JobSchedulerStoreImpl store;
1:     private JobScheduler scheduler;
1:     private ByteSequence payload;
1: 
1:     @Before
1:     public void setUp() throws Exception {
1:         File directory = new File("target/test/ScheduledJobsDB");
1:         IOHelper.mkdirs(directory);
1:         IOHelper.deleteChildren(directory);
1:         startStore(directory);
1: 
1:         byte[] data = new byte[8192];
1:         for (int i = 0; i < data.length; ++i) {
1:             data[i] = (byte) (i % 256);
1:         }
1: 
1:         payload = new ByteSequence(data);
1:     }
1: 
1:     protected void startStore(File directory) throws Exception {
1:         store = new JobSchedulerStoreImpl();
1:         store.setDirectory(directory);
1:         store.setCheckpointInterval(5000);
1:         store.setCleanupInterval(10000);
1:         store.setJournalMaxFileLength(10 * 1024);
1:         store.start();
1:         scheduler = store.getJobScheduler("test");
1:         scheduler.startDispatching();
1:     }
1: 
1:     private int getNumJournalFiles() throws IOException {
1:         return store.getJournal().getFileMap().size();
1:     }
1: 
1:     @After
1:     public void tearDown() throws Exception {
1:         scheduler.stopDispatching();
1:         store.stop();
1:     }
1: 
1:     @Test
0:     public void test() throws Exception {
1:         final int COUNT = 10;
1:         final CountDownLatch latch = new CountDownLatch(COUNT);
1:         scheduler.addListener(new JobListener() {
1:             @Override
1:             public void scheduledJob(String id, ByteSequence job) {
1:                 latch.countDown();
1:             }
1:         });
1: 
1:         long time = TimeUnit.SECONDS.toMillis(30);
1:         for (int i = 0; i < COUNT; i++) {
1:             scheduler.schedule("id" + i, payload, "", time, 0, 0);
1:         }
1: 
1:         int size = scheduler.getAllJobs().size();
1:         assertEquals(size, COUNT);
1: 
1:         LOG.info("Number of journal log files: {}", getNumJournalFiles());
1:         // need a little slack so go over 60 seconds
1:         assertTrue(latch.await(70, TimeUnit.SECONDS));
1:         assertEquals(0, latch.getCount());
1: 
1:         for (int i = 0; i < COUNT; i++) {
1:             scheduler.schedule("id" + i, payload, "", time, 0, 0);
1:         }
1: 
1:         LOG.info("Number of journal log files: {}", getNumJournalFiles());
1:         // need a little slack so go over 60 seconds
1:         assertTrue(latch.await(70, TimeUnit.SECONDS));
1:         assertEquals(0, latch.getCount());
1: 
1:         assertTrue("Should be only one log left: " + getNumJournalFiles(), Wait.waitFor(new Wait.Condition() {
1: 
1:             @Override
1:             public boolean isSatisified() throws Exception {
1:                 return getNumJournalFiles() == 1;
1:             }
1:         }, TimeUnit.MINUTES.toMillis(2)));
1: 
1:         LOG.info("Number of journal log files: {}", getNumJournalFiles());
1:     }
1: }
============================================================================