1:a88906f: /**
1:57b4941:  * Licensed to the Apache Software Foundation (ASF) under one or more
1:57b4941:  * contributor license agreements.  See the NOTICE file distributed with
1:57b4941:  * this work for additional information regarding copyright ownership.
1:57b4941:  * The ASF licenses this file to You under the Apache License, Version 2.0
1:57b4941:  * (the "License"); you may not use this file except in compliance with
1:57b4941:  * the License.  You may obtain a copy of the License at
3:a88906f:  *
1:5f1adbe:  *      http://www.apache.org/licenses/LICENSE-2.0
1:a88906f:  *
1:a88906f:  * Unless required by applicable law or agreed to in writing, software
1:a88906f:  * distributed under the License is distributed on an "AS IS" BASIS,
1:a88906f:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:a88906f:  * See the License for the specific language governing permissions and
1:a88906f:  * limitations under the License.
1:a88906f:  */
1:a88906f: package org.apache.activemq.tool.spi;
1:a88906f: 
1:540dd5c: import java.util.Properties;
1:a88906f: 
1:a88906f: import javax.jms.ConnectionFactory;
1:540dd5c: 
1:540dd5c: import org.apache.activemq.ActiveMQConnectionFactory;
1:a88906f: 
1:a88906f: public class ActiveMQPojoSPI implements SPIConnectionFactory {
1:a88906f:     public static final String KEY_BROKER_URL        = "brokerUrl";
1:a88906f:     public static final String KEY_USERNAME          = "username";
1:a88906f:     public static final String KEY_PASSWORD          = "password";
1:a88906f:     public static final String KEY_CLIENT_ID         = "clientID";
1:a88906f: 
1:a88906f:     public static final String KEY_ASYNC_SEND        = "asyncSend";
1:a88906f:     public static final String KEY_ASYNC_DISPATCH    = "asyncDispatch";
1:a88906f:     public static final String KEY_ASYNC_SESSION     = "asyncSession";
1:a88906f:     public static final String KEY_CLOSE_TIMEOUT     = "closeTimeout";
1:a88906f:     public static final String KEY_COPY_MSG_ON_SEND  = "copyMsgOnSend";
1:a88906f:     public static final String KEY_DISABLE_TIMESTAMP = "disableTimestamp";
1:a88906f:     public static final String KEY_DEFER_OBJ_SERIAL  = "deferObjSerial";
1:a88906f:     public static final String KEY_OPTIM_ACK         = "optimAck";
1:a88906f:     public static final String KEY_OPTIM_DISPATCH    = "optimDispatch";
1:a88906f:     public static final String KEY_PREFETCH_QUEUE    = "prefetchQueue";
1:a88906f:     public static final String KEY_PREFETCH_TOPIC    = "prefetchTopic";
1:a88906f:     public static final String KEY_USE_COMPRESSION   = "useCompression";
1:a88906f:     public static final String KEY_USE_RETROACTIVE   = "useRetroactive";
1:a88906f: 
1:a88906f:     public ConnectionFactory createConnectionFactory(Properties settings) throws Exception {
1:a88906f:         ActiveMQConnectionFactory factory = new ActiveMQConnectionFactory();
1:a88906f:         configureConnectionFactory(factory, settings);
1:a88906f:         return factory;
1:a88906f:     }
1:a88906f: 
1:a88906f:     public void configureConnectionFactory(ConnectionFactory jmsFactory, Properties settings) throws Exception {
1:a88906f:         ActiveMQConnectionFactory factory = (ActiveMQConnectionFactory)jmsFactory;
1:a88906f:         String setting;
1:a88906f: 
1:a88906f:         setting = settings.getProperty(KEY_BROKER_URL);
1:a88906f:         if (setting != null && setting.length() > 0) {
1:a88906f:             factory.setBrokerURL(setting);
1:a88906f:         }
1:a88906f: 
1:a88906f:         setting = settings.getProperty(KEY_USERNAME);
1:a88906f:         if (setting != null && setting.length() > 0) {
1:a88906f:             factory.setUserName(setting);
1:a88906f:         }
1:a88906f: 
1:a88906f:         setting = settings.getProperty(KEY_PASSWORD);
1:a88906f:         if (setting != null && setting.length() > 0) {
1:a88906f:             factory.setPassword(setting);
1:a88906f:         }
1:a88906f: 
1:a88906f:         setting = settings.getProperty(KEY_CLIENT_ID);
1:a88906f:         if (setting != null && setting.length() > 0) {
1:a88906f:             factory.setClientID(setting);
1:a88906f:         }
1:a88906f: 
1:a88906f:         setting = settings.getProperty(KEY_ASYNC_SEND);
1:a88906f:         if (setting != null && setting.length() > 0) {
1:a88906f:             factory.setUseAsyncSend(Boolean.getBoolean(setting));
1:a88906f:         }
1:a88906f: 
1:a88906f:         setting = settings.getProperty(KEY_ASYNC_DISPATCH);
1:a88906f:         if (setting != null && setting.length() > 0) {
1:fddc01d:             factory.setDispatchAsync(Boolean.getBoolean(setting));
1:a88906f:         }
1:a88906f: 
1:a88906f:         setting = settings.getProperty(KEY_ASYNC_SESSION);
1:a88906f:         if (setting != null && setting.length() > 0) {
1:a88906f:             factory.setAlwaysSessionAsync(Boolean.getBoolean(setting));
1:a88906f:         }
1:a88906f: 
1:a88906f:         setting = settings.getProperty(KEY_CLOSE_TIMEOUT);
1:a88906f:         if (setting != null && setting.length() > 0) {
1:a88906f:             factory.setCloseTimeout(Integer.parseInt(setting));
1:a88906f:         }
1:a88906f: 
1:a88906f:         setting = settings.getProperty(KEY_COPY_MSG_ON_SEND);
1:a88906f:         if (setting != null && setting.length() > 0) {
1:a88906f:             factory.setCopyMessageOnSend(Boolean.getBoolean(setting));
1:a88906f:         }
1:a88906f: 
1:a88906f:         setting = settings.getProperty(KEY_DISABLE_TIMESTAMP);
1:a88906f:         if (setting != null && setting.length() > 0) {
1:a88906f:             factory.setDisableTimeStampsByDefault(Boolean.getBoolean(setting));
1:a88906f:         }
1:a88906f: 
1:a88906f:         setting = settings.getProperty(KEY_DEFER_OBJ_SERIAL);
1:a88906f:         if (setting != null && setting.length() > 0) {
1:a88906f:             factory.setObjectMessageSerializationDefered(Boolean.getBoolean(setting));
1:a88906f:         }
1:a88906f: 
1:a88906f:         setting = settings.getProperty(KEY_OPTIM_ACK);
1:a88906f:         if (setting != null && setting.length() > 0) {
1:a88906f:             factory.setOptimizeAcknowledge(Boolean.getBoolean(setting));
1:a88906f:         }
1:a88906f: 
1:a88906f:         setting = settings.getProperty(KEY_OPTIM_DISPATCH);
1:a88906f:         if (setting != null && setting.length() > 0) {
1:a88906f:             factory.setOptimizedMessageDispatch(Boolean.getBoolean(setting));
1:a88906f:         }
1:a88906f: 
1:a88906f:         setting = settings.getProperty(KEY_PREFETCH_QUEUE);
1:a88906f:         if (setting != null && setting.length() > 0) {
1:a88906f:             factory.getPrefetchPolicy().setQueuePrefetch(Integer.parseInt(setting));
1:a88906f:         }
1:a88906f: 
1:a88906f:         setting = settings.getProperty(KEY_PREFETCH_TOPIC);
1:a88906f:         if (setting != null && setting.length() > 0) {
1:a88906f:             factory.getPrefetchPolicy().setTopicPrefetch(Integer.parseInt(setting));
1:a88906f:         }
1:a88906f: 
1:a88906f:         setting = settings.getProperty(KEY_USE_COMPRESSION);
1:a88906f:         if (setting != null && setting.length() > 0) {
1:a88906f:             factory.setUseCompression(Boolean.getBoolean(setting));
1:a88906f:         }
1:a88906f: 
1:a88906f:         setting = settings.getProperty(KEY_USE_RETROACTIVE);
1:a88906f:         if (setting != null && setting.length() > 0) {
1:a88906f:             factory.setUseRetroactiveConsumer(Boolean.getBoolean(setting));
1:a88906f:         }
1:a88906f:     }
1:a88906f: }
============================================================================
author:Timothy A. Bish
-------------------------------------------------------------------------------
commit:87e878b
author:Hiram R. Chirino
-------------------------------------------------------------------------------
commit:540dd5c
/////////////////////////////////////////////////////////////////////////
1: import java.util.Properties;
1: 
1: import org.apache.activemq.ActiveMQConnectionFactory;
commit:5f1adbe
/////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////
1:  *      http://www.apache.org/licenses/LICENSE-2.0
commit:57b4941
/////////////////////////////////////////////////////////////////////////
1:  * Licensed to the Apache Software Foundation (ASF) under one or more
1:  * contributor license agreements.  See the NOTICE file distributed with
1:  * this work for additional information regarding copyright ownership.
1:  * The ASF licenses this file to You under the Apache License, Version 2.0
1:  * (the "License"); you may not use this file except in compliance with
1:  * the License.  You may obtain a copy of the License at
commit:a88906f
/////////////////////////////////////////////////////////////////////////
1: /**
1:  *
0:  * Copyright 2005-2006 The Apache Software Foundation
1:  *
0:  * Licensed under the Apache License, Version 2.0 (the "License");
0:  * you may not use this file except in compliance with the License.
0:  * You may obtain a copy of the License at
1:  *
0:  * http://www.apache.org/licenses/LICENSE-2.0
1:  *
1:  * Unless required by applicable law or agreed to in writing, software
1:  * distributed under the License is distributed on an "AS IS" BASIS,
1:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:  * See the License for the specific language governing permissions and
1:  * limitations under the License.
1:  */
1: package org.apache.activemq.tool.spi;
1: 
0: import org.apache.activemq.ActiveMQConnectionFactory;
1: 
1: import javax.jms.ConnectionFactory;
0: import java.util.Properties;
1: 
1: public class ActiveMQPojoSPI implements SPIConnectionFactory {
1:     public static final String KEY_BROKER_URL        = "brokerUrl";
1:     public static final String KEY_USERNAME          = "username";
1:     public static final String KEY_PASSWORD          = "password";
1:     public static final String KEY_CLIENT_ID         = "clientID";
1: 
1:     public static final String KEY_ASYNC_SEND        = "asyncSend";
1:     public static final String KEY_ASYNC_DISPATCH    = "asyncDispatch";
1:     public static final String KEY_ASYNC_SESSION     = "asyncSession";
1:     public static final String KEY_CLOSE_TIMEOUT     = "closeTimeout";
1:     public static final String KEY_COPY_MSG_ON_SEND  = "copyMsgOnSend";
1:     public static final String KEY_DISABLE_TIMESTAMP = "disableTimestamp";
1:     public static final String KEY_DEFER_OBJ_SERIAL  = "deferObjSerial";
1:     public static final String KEY_OPTIM_ACK         = "optimAck";
1:     public static final String KEY_OPTIM_DISPATCH    = "optimDispatch";
1:     public static final String KEY_PREFETCH_QUEUE    = "prefetchQueue";
1:     public static final String KEY_PREFETCH_TOPIC    = "prefetchTopic";
1:     public static final String KEY_USE_COMPRESSION   = "useCompression";
1:     public static final String KEY_USE_RETROACTIVE   = "useRetroactive";
1: 
1:     public ConnectionFactory createConnectionFactory(Properties settings) throws Exception {
1:         ActiveMQConnectionFactory factory = new ActiveMQConnectionFactory();
1:         configureConnectionFactory(factory, settings);
1:         return factory;
1:     }
1: 
1:     public void configureConnectionFactory(ConnectionFactory jmsFactory, Properties settings) throws Exception {
1:         ActiveMQConnectionFactory factory = (ActiveMQConnectionFactory)jmsFactory;
1:         String setting;
1: 
1:         setting = settings.getProperty(KEY_BROKER_URL);
1:         if (setting != null && setting.length() > 0) {
1:             factory.setBrokerURL(setting);
1:         }
1: 
1:         setting = settings.getProperty(KEY_USERNAME);
1:         if (setting != null && setting.length() > 0) {
1:             factory.setUserName(setting);
1:         }
1: 
1:         setting = settings.getProperty(KEY_PASSWORD);
1:         if (setting != null && setting.length() > 0) {
1:             factory.setPassword(setting);
1:         }
1: 
1:         setting = settings.getProperty(KEY_CLIENT_ID);
1:         if (setting != null && setting.length() > 0) {
1:             factory.setClientID(setting);
1:         }
1: 
1:         setting = settings.getProperty(KEY_ASYNC_SEND);
1:         if (setting != null && setting.length() > 0) {
1:             factory.setUseAsyncSend(Boolean.getBoolean(setting));
1:         }
1: 
1:         setting = settings.getProperty(KEY_ASYNC_DISPATCH);
1:         if (setting != null && setting.length() > 0) {
0:             factory.setAsyncDispatch(Boolean.getBoolean(setting));
1:         }
1: 
1:         setting = settings.getProperty(KEY_ASYNC_SESSION);
1:         if (setting != null && setting.length() > 0) {
1:             factory.setAlwaysSessionAsync(Boolean.getBoolean(setting));
1:         }
1: 
1:         setting = settings.getProperty(KEY_CLOSE_TIMEOUT);
1:         if (setting != null && setting.length() > 0) {
1:             factory.setCloseTimeout(Integer.parseInt(setting));
1:         }
1: 
1:         setting = settings.getProperty(KEY_COPY_MSG_ON_SEND);
1:         if (setting != null && setting.length() > 0) {
1:             factory.setCopyMessageOnSend(Boolean.getBoolean(setting));
1:         }
1: 
1:         setting = settings.getProperty(KEY_DISABLE_TIMESTAMP);
1:         if (setting != null && setting.length() > 0) {
1:             factory.setDisableTimeStampsByDefault(Boolean.getBoolean(setting));
1:         }
1: 
1:         setting = settings.getProperty(KEY_DEFER_OBJ_SERIAL);
1:         if (setting != null && setting.length() > 0) {
1:             factory.setObjectMessageSerializationDefered(Boolean.getBoolean(setting));
1:         }
1: 
1:         setting = settings.getProperty(KEY_OPTIM_ACK);
1:         if (setting != null && setting.length() > 0) {
1:             factory.setOptimizeAcknowledge(Boolean.getBoolean(setting));
1:         }
1: 
1:         setting = settings.getProperty(KEY_OPTIM_DISPATCH);
1:         if (setting != null && setting.length() > 0) {
1:             factory.setOptimizedMessageDispatch(Boolean.getBoolean(setting));
1:         }
1: 
1:         setting = settings.getProperty(KEY_PREFETCH_QUEUE);
1:         if (setting != null && setting.length() > 0) {
1:             factory.getPrefetchPolicy().setQueuePrefetch(Integer.parseInt(setting));
1:         }
1: 
1:         setting = settings.getProperty(KEY_PREFETCH_TOPIC);
1:         if (setting != null && setting.length() > 0) {
1:             factory.getPrefetchPolicy().setTopicPrefetch(Integer.parseInt(setting));
1:         }
1: 
1:         setting = settings.getProperty(KEY_USE_COMPRESSION);
1:         if (setting != null && setting.length() > 0) {
1:             factory.setUseCompression(Boolean.getBoolean(setting));
1:         }
1: 
1:         setting = settings.getProperty(KEY_USE_RETROACTIVE);
1:         if (setting != null && setting.length() > 0) {
1:             factory.setUseRetroactiveConsumer(Boolean.getBoolean(setting));
1:         }
1:     }
1: }
author:James Strachan
-------------------------------------------------------------------------------
commit:dd55c21
author:Adrian T. Co
-------------------------------------------------------------------------------
commit:fddc01d
/////////////////////////////////////////////////////////////////////////
1:             factory.setDispatchAsync(Boolean.getBoolean(setting));
commit:6a794d8
/////////////////////////////////////////////////////////////////////////
0:     public static final String KEY_BROKER_URL        = "brokerUrl";
0:     public static final String KEY_USERNAME          = "username";
0:     public static final String KEY_PASSWORD          = "password";
0:     public static final String KEY_CLIENT_ID         = "clientID";
0:     public static final String KEY_ASYNC_SEND        = "asyncSend";
0:     public static final String KEY_ASYNC_DISPATCH    = "asyncDispatch";
0:     public static final String KEY_ASYNC_SESSION     = "asyncSession";
0:     public static final String KEY_CLOSE_TIMEOUT     = "closeTimeout";
0:     public static final String KEY_COPY_MSG_ON_SEND  = "copyMsgOnSend";
0:     public static final String KEY_DISABLE_TIMESTAMP = "disableTimestamp";
0:     public static final String KEY_DEFER_OBJ_SERIAL  = "deferObjSerial";
0:     public static final String KEY_OPTIM_ACK         = "optimAck";
0:     public static final String KEY_OPTIM_DISPATCH    = "optimDispatch";
0:     public static final String KEY_PREFETCH_QUEUE    = "prefetchQueue";
0:     public static final String KEY_PREFETCH_TOPIC    = "prefetchTopic";
0:     public static final String KEY_USE_COMPRESSION   = "useCompression";
0:     public static final String KEY_USE_RETROACTIVE   = "useRetroactive";
commit:21e0837
/////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////
commit:fa37910
/////////////////////////////////////////////////////////////////////////
0:             factory.setUseAsyncSend(Boolean.getBoolean(setting));
0:             factory.setAsyncDispatch(Boolean.getBoolean(setting));
0:             factory.setAlwaysSessionAsync(Boolean.getBoolean(setting));
/////////////////////////////////////////////////////////////////////////
0:             factory.setCopyMessageOnSend(Boolean.getBoolean(setting));
0:             factory.setDisableTimeStampsByDefault(Boolean.getBoolean(setting));
0:             factory.setObjectMessageSerializationDefered(Boolean.getBoolean(setting));
0:             factory.setOnSendPrepareMessageBody(Boolean.getBoolean(setting));
0:             factory.setOptimizeAcknowledge(Boolean.getBoolean(setting));
0:             factory.setOptimizedMessageDispatch(Boolean.getBoolean(setting));
/////////////////////////////////////////////////////////////////////////
0:             factory.setUseCompression(Boolean.getBoolean(setting));
0:             factory.setUseRetroactiveConsumer(Boolean.getBoolean(setting));
commit:5f5bff6
/////////////////////////////////////////////////////////////////////////
0: /**
0:  *
0:  * Copyright 2005-2006 The Apache Software Foundation
0:  *
0:  * Licensed under the Apache License, Version 2.0 (the "License");
0:  * you may not use this file except in compliance with the License.
0:  * You may obtain a copy of the License at
0:  *
0:  * http://www.apache.org/licenses/LICENSE-2.0
0:  *
0:  * Unless required by applicable law or agreed to in writing, software
0:  * distributed under the License is distributed on an "AS IS" BASIS,
0:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
0:  * See the License for the specific language governing permissions and
0:  * limitations under the License.
0:  */
0: package org.apache.activemq.tool.spi;
0: 
0: import org.apache.activemq.ActiveMQConnectionFactory;
0: 
0: import javax.jms.ConnectionFactory;
0: import java.util.Properties;
0: 
0: public class ActiveMQPojoSPI implements SPIConnectionFactory {
0:     public static final String KEY_BROKER_URL        = "factory.brokerUrl";
0:     public static final String KEY_USERNAME          = "factory.username";
0:     public static final String KEY_PASSWORD          = "factory.password";
0:     public static final String KEY_CLIENT_ID         = "factory.clientID";
0: 
0:     public static final String KEY_ASYNC_SEND        = "factory.asyncSend";
0:     public static final String KEY_ASYNC_DISPATCH    = "factory.asyncDispatch";
0:     public static final String KEY_ASYNC_SESSION     = "factory.asyncSession";
0:     public static final String KEY_CLOSE_TIMEOUT     = "factory.closeTimeout";
0:     public static final String KEY_COPY_MSG_ON_SEND  = "factory.copyMsgOnSend";
0:     public static final String KEY_DISABLE_TIMESTAMP = "factory.disableTimestamp";
0:     public static final String KEY_DEFER_OBJ_SERIAL  = "factory.deferObjSerial";
0:     public static final String KEY_ON_SEND_PREP_MSG  = "factory.onSendPrepMsg";
0:     public static final String KEY_OPTIM_ACK         = "factory.optimAck";
0:     public static final String KEY_OPTIM_DISPATCH    = "factory.optimDispatch";
0:     public static final String KEY_PREFETCH_QUEUE    = "factory.prefetchQueue";
0:     public static final String KEY_PREFETCH_TOPIC    = "factory.prefetchTopic";
0:     public static final String KEY_USE_COMPRESSION   = "factory.useCompression";
0:     public static final String KEY_USE_RETROACTIVE   = "factory.useRetroactive";
0: 
0:     public ConnectionFactory createConnectionFactory(Properties settings) throws Exception {
0:         ActiveMQConnectionFactory factory = new ActiveMQConnectionFactory();
0:         configureConnectionFactory(factory, settings);
0:         return factory;
0:     }
0: 
0:     public void configureConnectionFactory(ConnectionFactory jmsFactory, Properties settings) throws Exception {
0:         ActiveMQConnectionFactory factory = (ActiveMQConnectionFactory)jmsFactory;
0:         String setting;
0: 
0:         setting = settings.getProperty(KEY_BROKER_URL);
0:         if (setting != null && setting.length() > 0) {
0:             factory.setBrokerURL(setting);
0:         }
0: 
0:         setting = settings.getProperty(KEY_USERNAME);
0:         if (setting != null && setting.length() > 0) {
0:             factory.setUserName(setting);
0:         }
0: 
0:         setting = settings.getProperty(KEY_PASSWORD);
0:         if (setting != null && setting.length() > 0) {
0:             factory.setPassword(setting);
0:         }
0: 
0:         setting = settings.getProperty(KEY_CLIENT_ID);
0:         if (setting != null && setting.length() > 0) {
0:             factory.setClientID(setting);
0:         }
0: 
0:         setting = settings.getProperty(KEY_ASYNC_SEND);
0:         if (setting != null && setting.length() > 0) {
0:             factory.setUseAsyncSend(Boolean.parseBoolean(setting));
0:         }
0: 
0:         setting = settings.getProperty(KEY_ASYNC_DISPATCH);
0:         if (setting != null && setting.length() > 0) {
0:             factory.setAsyncDispatch(Boolean.parseBoolean(setting));
0:         }
0: 
0:         setting = settings.getProperty(KEY_ASYNC_SESSION);
0:         if (setting != null && setting.length() > 0) {
0:             factory.setAlwaysSessionAsync(Boolean.parseBoolean(setting));
0:         }
0: 
0:         setting = settings.getProperty(KEY_CLOSE_TIMEOUT);
0:         if (setting != null && setting.length() > 0) {
0:             factory.setCloseTimeout(Integer.parseInt(setting));
0:         }
0: 
0:         setting = settings.getProperty(KEY_COPY_MSG_ON_SEND);
0:         if (setting != null && setting.length() > 0) {
0:             factory.setCopyMessageOnSend(Boolean.parseBoolean(setting));
0:         }
0: 
0:         setting = settings.getProperty(KEY_DISABLE_TIMESTAMP);
0:         if (setting != null && setting.length() > 0) {
0:             factory.setDisableTimeStampsByDefault(Boolean.parseBoolean(setting));
0:         }
0: 
0:         setting = settings.getProperty(KEY_DEFER_OBJ_SERIAL);
0:         if (setting != null && setting.length() > 0) {
0:             factory.setObjectMessageSerializationDefered(Boolean.parseBoolean(setting));
0:         }
0: 
0:         setting = settings.getProperty(KEY_ON_SEND_PREP_MSG);
0:         if (setting != null && setting.length() > 0) {
0:             factory.setOnSendPrepareMessageBody(Boolean.parseBoolean(setting));
0:         }
0: 
0:         setting = settings.getProperty(KEY_OPTIM_ACK);
0:         if (setting != null && setting.length() > 0) {
0:             factory.setOptimizeAcknowledge(Boolean.parseBoolean(setting));
0:         }
0: 
0:         setting = settings.getProperty(KEY_OPTIM_DISPATCH);
0:         if (setting != null && setting.length() > 0) {
0:             factory.setOptimizedMessageDispatch(Boolean.parseBoolean(setting));
0:         }
0: 
0:         setting = settings.getProperty(KEY_PREFETCH_QUEUE);
0:         if (setting != null && setting.length() > 0) {
0:             factory.getPrefetchPolicy().setQueuePrefetch(Integer.parseInt(setting));
0:         }
0: 
0:         setting = settings.getProperty(KEY_PREFETCH_TOPIC);
0:         if (setting != null && setting.length() > 0) {
0:             factory.getPrefetchPolicy().setTopicPrefetch(Integer.parseInt(setting));
0:         }
0: 
0:         setting = settings.getProperty(KEY_USE_COMPRESSION);
0:         if (setting != null && setting.length() > 0) {
0:             factory.setUseCompression(Boolean.parseBoolean(setting));
0:         }
0: 
0:         setting = settings.getProperty(KEY_USE_RETROACTIVE);
0:         if (setting != null && setting.length() > 0) {
0:             factory.setUseRetroactiveConsumer(Boolean.parseBoolean(setting));
0:         }
0:     }
0: }
============================================================================