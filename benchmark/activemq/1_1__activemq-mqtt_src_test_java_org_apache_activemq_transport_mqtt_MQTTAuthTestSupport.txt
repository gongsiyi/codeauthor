1:fb569e3: /**
1:fb569e3:  * Licensed to the Apache Software Foundation (ASF) under one or more
1:fb569e3:  * contributor license agreements.  See the NOTICE file distributed with
1:fb569e3:  * this work for additional information regarding copyright ownership.
1:fb569e3:  * The ASF licenses this file to You under the Apache License, Version 2.0
1:fb569e3:  * (the "License"); you may not use this file except in compliance with
1:fb569e3:  * the License.  You may obtain a copy of the License at
1:fb569e3:  *
1:fb569e3:  *      http://www.apache.org/licenses/LICENSE-2.0
1:fb569e3:  *
1:fb569e3:  * Unless required by applicable law or agreed to in writing, software
1:fb569e3:  * distributed under the License is distributed on an "AS IS" BASIS,
1:fb569e3:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:fb569e3:  * See the License for the specific language governing permissions and
1:fb569e3:  * limitations under the License.
1:fb569e3:  */
1:fb569e3: package org.apache.activemq.transport.mqtt;
1:fb569e3: 
1:fb569e3: import java.util.ArrayList;
1:fb569e3: import java.util.List;
1:fb569e3: 
1:fb569e3: import org.apache.activemq.broker.BrokerPlugin;
1:fb569e3: import org.apache.activemq.filter.DestinationMapEntry;
1:fb569e3: import org.apache.activemq.security.AuthenticationUser;
1:fb569e3: import org.apache.activemq.security.AuthorizationEntry;
1:fb569e3: import org.apache.activemq.security.AuthorizationPlugin;
1:fb569e3: import org.apache.activemq.security.DefaultAuthorizationMap;
1:fb569e3: import org.apache.activemq.security.SimpleAuthenticationPlugin;
1:fb569e3: import org.apache.activemq.security.TempDestinationAuthorizationEntry;
1:fb569e3: 
1:fb569e3: /**
1:fb569e3:  * Used as a base class for MQTT tests that require Authentication and Authorization
1:fb569e3:  * to be configured on the Broker.
1:fb569e3:  */
1:fb569e3: public class MQTTAuthTestSupport extends MQTTTestSupport {
1:fb569e3: 
1:7c04ead:     public MQTTAuthTestSupport() {
1:7c04ead:         super();
1:7c04ead:     }
1:7c04ead: 
1:7c04ead:     public MQTTAuthTestSupport(String connectorScheme, boolean useSSL) {
1:7c04ead:         super(connectorScheme, useSSL);
1:7c04ead:     }
1:7c04ead: 
1:fb569e3:     @Override
1:fb569e3:     protected BrokerPlugin configureAuthentication() throws Exception {
1:fb569e3:         List<AuthenticationUser> users = new ArrayList<AuthenticationUser>();
1:fb569e3:         users.add(new AuthenticationUser("admin", "admin", "users,admins"));
1:fb569e3:         users.add(new AuthenticationUser("user", "password", "users"));
1:fb569e3:         users.add(new AuthenticationUser("guest", "password", "guests"));
1:fb569e3:         SimpleAuthenticationPlugin authenticationPlugin = new SimpleAuthenticationPlugin(users);
1:fb569e3:         authenticationPlugin.setAnonymousAccessAllowed(true);
1:fb569e3: 
1:fb569e3:         return authenticationPlugin;
1:fb569e3:     }
1:fb569e3: 
1:fb569e3:     @Override
1:fb569e3:     protected BrokerPlugin configureAuthorization() throws Exception {
1:fb569e3: 
1:fb569e3:         @SuppressWarnings("rawtypes")
1:fb569e3:         List<DestinationMapEntry> authorizationEntries = new ArrayList<DestinationMapEntry>();
1:fb569e3: 
1:fb569e3:         AuthorizationEntry entry = new AuthorizationEntry();
1:fb569e3:         entry.setQueue(">");
1:fb569e3:         entry.setRead("admins");
1:fb569e3:         entry.setWrite("admins");
1:fb569e3:         entry.setAdmin("admins");
1:fb569e3:         authorizationEntries.add(entry);
1:fb569e3:         entry = new AuthorizationEntry();
1:fb569e3:         entry.setQueue("USERS.>");
1:fb569e3:         entry.setRead("users");
1:fb569e3:         entry.setWrite("users");
1:fb569e3:         entry.setAdmin("users");
1:fb569e3:         authorizationEntries.add(entry);
1:fb569e3:         entry = new AuthorizationEntry();
1:fb569e3:         entry.setQueue("GUEST.>");
1:fb569e3:         entry.setRead("guests");
1:fb569e3:         entry.setWrite("guests,users");
1:fb569e3:         entry.setAdmin("guests,users");
1:fb569e3:         authorizationEntries.add(entry);
1:fb569e3:         entry = new AuthorizationEntry();
1:fb569e3:         entry.setTopic(">");
1:fb569e3:         entry.setRead("admins");
1:fb569e3:         entry.setWrite("admins");
1:fb569e3:         entry.setAdmin("admins");
1:fb569e3:         authorizationEntries.add(entry);
1:fb569e3:         entry = new AuthorizationEntry();
1:fb569e3:         entry.setTopic("USERS.>");
1:fb569e3:         entry.setRead("users");
1:fb569e3:         entry.setWrite("users");
1:fb569e3:         entry.setAdmin("users");
1:fb569e3:         authorizationEntries.add(entry);
1:fb569e3:         entry = new AuthorizationEntry();
1:fb569e3:         entry.setTopic("GUEST.>");
1:fb569e3:         entry.setRead("guests");
1:fb569e3:         entry.setWrite("guests,users");
1:fb569e3:         entry.setAdmin("guests,users");
1:fb569e3:         authorizationEntries.add(entry);
1:fb569e3:         entry = new AuthorizationEntry();
1:fb569e3:         entry.setTopic("anonymous");
1:fb569e3:         entry.setRead("guests,anonymous");
1:fb569e3:         entry.setWrite("guests,users,anonymous");
1:fb569e3:         entry.setAdmin("guests,users,anonymous");
1:fb569e3:         authorizationEntries.add(entry);
1:fb569e3:         entry = new AuthorizationEntry();
1:fb569e3:         entry.setTopic("ActiveMQ.Advisory.>");
1:fb569e3:         entry.setRead("guests,users,anonymous");
1:fb569e3:         entry.setWrite("guests,users,anonymous");
1:fb569e3:         entry.setAdmin("guests,users,anonymous");
1:fb569e3:         authorizationEntries.add(entry);
1:fb569e3: 
1:fb569e3:         TempDestinationAuthorizationEntry tempEntry = new TempDestinationAuthorizationEntry();
1:fb569e3:         tempEntry.setRead("admins");
1:fb569e3:         tempEntry.setWrite("admins");
1:fb569e3:         tempEntry.setAdmin("admins");
1:fb569e3: 
1:fb569e3:         DefaultAuthorizationMap authorizationMap = new DefaultAuthorizationMap(authorizationEntries);
1:fb569e3:         authorizationMap.setTempDestinationAuthorizationEntry(tempEntry);
1:fb569e3:         AuthorizationPlugin authorizationPlugin = new AuthorizationPlugin(authorizationMap);
1:fb569e3: 
1:fb569e3:         return authorizationPlugin;
1:fb569e3:     }
1:fb569e3: }
============================================================================
author:Timothy Bish
-------------------------------------------------------------------------------
commit:7c04ead
/////////////////////////////////////////////////////////////////////////
1:     public MQTTAuthTestSupport() {
1:         super();
1:     }
1: 
1:     public MQTTAuthTestSupport(String connectorScheme, boolean useSSL) {
1:         super(connectorScheme, useSSL);
1:     }
1: 
commit:fb569e3
/////////////////////////////////////////////////////////////////////////
1: /**
1:  * Licensed to the Apache Software Foundation (ASF) under one or more
1:  * contributor license agreements.  See the NOTICE file distributed with
1:  * this work for additional information regarding copyright ownership.
1:  * The ASF licenses this file to You under the Apache License, Version 2.0
1:  * (the "License"); you may not use this file except in compliance with
1:  * the License.  You may obtain a copy of the License at
1:  *
1:  *      http://www.apache.org/licenses/LICENSE-2.0
1:  *
1:  * Unless required by applicable law or agreed to in writing, software
1:  * distributed under the License is distributed on an "AS IS" BASIS,
1:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:  * See the License for the specific language governing permissions and
1:  * limitations under the License.
1:  */
1: package org.apache.activemq.transport.mqtt;
1: 
1: import java.util.ArrayList;
1: import java.util.List;
1: 
1: import org.apache.activemq.broker.BrokerPlugin;
1: import org.apache.activemq.filter.DestinationMapEntry;
1: import org.apache.activemq.security.AuthenticationUser;
1: import org.apache.activemq.security.AuthorizationEntry;
1: import org.apache.activemq.security.AuthorizationPlugin;
1: import org.apache.activemq.security.DefaultAuthorizationMap;
1: import org.apache.activemq.security.SimpleAuthenticationPlugin;
1: import org.apache.activemq.security.TempDestinationAuthorizationEntry;
1: 
1: /**
1:  * Used as a base class for MQTT tests that require Authentication and Authorization
1:  * to be configured on the Broker.
1:  */
1: public class MQTTAuthTestSupport extends MQTTTestSupport {
1: 
1:     @Override
1:     protected BrokerPlugin configureAuthentication() throws Exception {
1:         List<AuthenticationUser> users = new ArrayList<AuthenticationUser>();
1:         users.add(new AuthenticationUser("admin", "admin", "users,admins"));
1:         users.add(new AuthenticationUser("user", "password", "users"));
1:         users.add(new AuthenticationUser("guest", "password", "guests"));
1:         SimpleAuthenticationPlugin authenticationPlugin = new SimpleAuthenticationPlugin(users);
1:         authenticationPlugin.setAnonymousAccessAllowed(true);
1: 
1:         return authenticationPlugin;
1:     }
1: 
1:     @Override
1:     protected BrokerPlugin configureAuthorization() throws Exception {
1: 
1:         @SuppressWarnings("rawtypes")
1:         List<DestinationMapEntry> authorizationEntries = new ArrayList<DestinationMapEntry>();
1: 
1:         AuthorizationEntry entry = new AuthorizationEntry();
1:         entry.setQueue(">");
1:         entry.setRead("admins");
1:         entry.setWrite("admins");
1:         entry.setAdmin("admins");
1:         authorizationEntries.add(entry);
1:         entry = new AuthorizationEntry();
1:         entry.setQueue("USERS.>");
1:         entry.setRead("users");
1:         entry.setWrite("users");
1:         entry.setAdmin("users");
1:         authorizationEntries.add(entry);
1:         entry = new AuthorizationEntry();
1:         entry.setQueue("GUEST.>");
1:         entry.setRead("guests");
1:         entry.setWrite("guests,users");
1:         entry.setAdmin("guests,users");
1:         authorizationEntries.add(entry);
1:         entry = new AuthorizationEntry();
1:         entry.setTopic(">");
1:         entry.setRead("admins");
1:         entry.setWrite("admins");
1:         entry.setAdmin("admins");
1:         authorizationEntries.add(entry);
1:         entry = new AuthorizationEntry();
1:         entry.setTopic("USERS.>");
1:         entry.setRead("users");
1:         entry.setWrite("users");
1:         entry.setAdmin("users");
1:         authorizationEntries.add(entry);
1:         entry = new AuthorizationEntry();
1:         entry.setTopic("GUEST.>");
1:         entry.setRead("guests");
1:         entry.setWrite("guests,users");
1:         entry.setAdmin("guests,users");
1:         authorizationEntries.add(entry);
1:         entry = new AuthorizationEntry();
1:         entry.setTopic("anonymous");
1:         entry.setRead("guests,anonymous");
1:         entry.setWrite("guests,users,anonymous");
1:         entry.setAdmin("guests,users,anonymous");
1:         authorizationEntries.add(entry);
1:         entry = new AuthorizationEntry();
1:         entry.setTopic("ActiveMQ.Advisory.>");
1:         entry.setRead("guests,users,anonymous");
1:         entry.setWrite("guests,users,anonymous");
1:         entry.setAdmin("guests,users,anonymous");
1:         authorizationEntries.add(entry);
1: 
1:         TempDestinationAuthorizationEntry tempEntry = new TempDestinationAuthorizationEntry();
1:         tempEntry.setRead("admins");
1:         tempEntry.setWrite("admins");
1:         tempEntry.setAdmin("admins");
1: 
1:         DefaultAuthorizationMap authorizationMap = new DefaultAuthorizationMap(authorizationEntries);
1:         authorizationMap.setTempDestinationAuthorizationEntry(tempEntry);
1:         AuthorizationPlugin authorizationPlugin = new AuthorizationPlugin(authorizationMap);
1: 
1:         return authorizationPlugin;
1:     }
1: }
============================================================================