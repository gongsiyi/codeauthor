1:5f30e41: /**
1:5f30e41:  * Licensed to the Apache Software Foundation (ASF) under one or more
1:5f30e41:  * contributor license agreements.  See the NOTICE file distributed with
1:5f30e41:  * this work for additional information regarding copyright ownership.
1:5f30e41:  * The ASF licenses this file to You under the Apache License, Version 2.0
1:5f30e41:  * (the "License"); you may not use this file except in compliance with
1:5f30e41:  * the License.  You may obtain a copy of the License at
2:5f30e41:  *
1:230a86c:  *      http://www.apache.org/licenses/LICENSE-2.0
1:5f30e41:  *
1:5f30e41:  * Unless required by applicable law or agreed to in writing, software
1:5f30e41:  * distributed under the License is distributed on an "AS IS" BASIS,
1:5f30e41:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:5f30e41:  * See the License for the specific language governing permissions and
1:5f30e41:  * limitations under the License.
1:5f30e41:  */
1:5f30e41: package org.apache.activemq;
2:5f30e41: 
1:5f30e41: import java.util.LinkedHashMap;
1:5f30e41: import org.apache.activemq.command.ActiveMQDestination;
1:5f30e41: import org.apache.activemq.command.Message;
1:5f30e41: import org.apache.activemq.util.LRUCache;
1:5f30e41: 
1:5f30e41: /**
1:5f30e41:  * An auditor class for a Connection that looks for duplicates
1:5f30e41:  */
1:230a86c: class ConnectionAudit {
1:5f30e41: 
1:5f30e41:     private boolean checkForDuplicates;
1:6aa4bca:     private LinkedHashMap<ActiveMQDestination, ActiveMQMessageAudit> destinations = new LRUCache<ActiveMQDestination, ActiveMQMessageAudit>(1000);
1:230a86c:     private LinkedHashMap<ActiveMQDispatcher, ActiveMQMessageAudit> dispatchers = new LRUCache<ActiveMQDispatcher, ActiveMQMessageAudit>(1000);
1:2a58f4c: 
1:5f30e41:     
1:2a58f4c: 	private int auditDepth = ActiveMQMessageAudit.DEFAULT_WINDOW_SIZE;
1:2a58f4c: 	private int auditMaximumProducerNumber = ActiveMQMessageAudit.MAXIMUM_PRODUCER_COUNT;
1:2a58f4c: 	
1:2a58f4c: 	
1:230a86c:     synchronized void removeDispatcher(ActiveMQDispatcher dispatcher) {
1:5f30e41:         dispatchers.remove(dispatcher);
1:5f30e41:     }
1:5f30e41: 
1:230a86c:     synchronized boolean isDuplicate(ActiveMQDispatcher dispatcher, Message message) {
1:230a86c:         if (checkForDuplicates && message != null) {
1:230a86c:             ActiveMQDestination destination = message.getDestination();
1:230a86c:             if (destination != null) {
1:230a86c:                 if (destination.isQueue()) {
1:6aa4bca:                     ActiveMQMessageAudit audit = destinations.get(destination);
1:230a86c:                     if (audit == null) {
1:2a58f4c:                         audit = new ActiveMQMessageAudit(auditDepth, auditMaximumProducerNumber);
1:6aa4bca:                         destinations.put(destination, audit);
1:5f30e41:                     }
1:1ee0017:                     boolean result = audit.isDuplicate(message);
1:5f30e41:                     return result;
1:5f30e41:                 }
1:230a86c:                 ActiveMQMessageAudit audit = dispatchers.get(dispatcher);
1:230a86c:                 if (audit == null) {
1:2a58f4c:                     audit = new ActiveMQMessageAudit(auditDepth, auditMaximumProducerNumber);
1:230a86c:                     dispatchers.put(dispatcher, audit);
1:5f30e41:                 }
1:1ee0017:                 boolean result = audit.isDuplicate(message);
1:5f30e41:                 return result;
1:5f30e41:             }
1:5f30e41:         }
1:5f30e41:         return false;
1:5f30e41:     }
1:5f30e41: 
1:3596f37:     protected synchronized void rollbackDuplicate(ActiveMQDispatcher dispatcher, Message message) {
1:230a86c:         if (checkForDuplicates && message != null) {
1:230a86c:             ActiveMQDestination destination = message.getDestination();
1:230a86c:             if (destination != null) {
1:230a86c:                 if (destination.isQueue()) {
1:6aa4bca:                     ActiveMQMessageAudit audit = destinations.get(destination);
1:230a86c:                     if (audit != null) {
1:1ee0017:                         audit.rollback(message);
1:5f30e41:                     }
1:230a86c:                 } else {
1:230a86c:                     ActiveMQMessageAudit audit = dispatchers.get(dispatcher);
1:230a86c:                     if (audit != null) {
1:1ee0017:                         audit.rollback(message);
1:5f30e41:                     }
1:5f30e41:                 }
1:5f30e41:             }
1:5f30e41:         }
1:5f30e41:     }
1:5f30e41: 
1:5f30e41:     /**
1:5f30e41:      * @return the checkForDuplicates
1:5f30e41:      */
1:230a86c:     boolean isCheckForDuplicates() {
1:5f30e41:         return this.checkForDuplicates;
1:5f30e41:     }
1:5f30e41: 
1:5f30e41:     /**
1:5f30e41:      * @param checkForDuplicates the checkForDuplicates to set
1:5f30e41:      */
1:230a86c:     void setCheckForDuplicates(boolean checkForDuplicates) {
1:230a86c:         this.checkForDuplicates = checkForDuplicates;
1:5f30e41:     }
1:2a58f4c: 
1:2a58f4c: 	public int getAuditDepth() {
1:2a58f4c: 		return auditDepth;
1:2a58f4c: 	}
1:2a58f4c: 
1:2a58f4c: 	public void setAuditDepth(int auditDepth) {
1:2a58f4c: 		this.auditDepth = auditDepth;
1:2a58f4c: 	}
1:2a58f4c: 
1:2a58f4c: 	public int getAuditMaximumProducerNumber() {
1:2a58f4c: 		return auditMaximumProducerNumber;
1:2a58f4c: 	}
1:2a58f4c: 
1:2a58f4c: 	public void setAuditMaximumProducerNumber(int auditMaximumProducerNumber) {
1:2a58f4c: 		this.auditMaximumProducerNumber = auditMaximumProducerNumber;
1:2a58f4c: 	}
1:2a58f4c:     
1:5f30e41: }
============================================================================
author:Hiram R. Chirino
-------------------------------------------------------------------------------
commit:9a8f6e4
commit:230a86c
/////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////
1:  *      http://www.apache.org/licenses/LICENSE-2.0
/////////////////////////////////////////////////////////////////////////
1: class ConnectionAudit {
0:     private LinkedHashMap<ActiveMQDestination, ActiveMQMessageAudit> queues = new LRUCache<ActiveMQDestination, ActiveMQMessageAudit>(1000);
1:     private LinkedHashMap<ActiveMQDispatcher, ActiveMQMessageAudit> dispatchers = new LRUCache<ActiveMQDispatcher, ActiveMQMessageAudit>(1000);
1:     synchronized void removeDispatcher(ActiveMQDispatcher dispatcher) {
1:     synchronized boolean isDuplicate(ActiveMQDispatcher dispatcher, Message message) {
1:         if (checkForDuplicates && message != null) {
1:             ActiveMQDestination destination = message.getDestination();
1:             if (destination != null) {
1:                 if (destination.isQueue()) {
0:                     ActiveMQMessageAudit audit = queues.get(destination);
1:                     if (audit == null) {
0:                         audit = new ActiveMQMessageAudit();
0:                         queues.put(destination, audit);
0:                     boolean result = audit.isDuplicateMessageReference(message);
1:                 ActiveMQMessageAudit audit = dispatchers.get(dispatcher);
1:                 if (audit == null) {
0:                     audit = new ActiveMQMessageAudit();
1:                     dispatchers.put(dispatcher, audit);
0:                 boolean result = audit.isDuplicateMessageReference(message);
0:     protected void rollbackDuplicate(ActiveMQDispatcher dispatcher, Message message) {
1:         if (checkForDuplicates && message != null) {
1:             ActiveMQDestination destination = message.getDestination();
1:             if (destination != null) {
1:                 if (destination.isQueue()) {
0:                     ActiveMQMessageAudit audit = queues.get(destination);
1:                     if (audit != null) {
1:                 } else {
1:                     ActiveMQMessageAudit audit = dispatchers.get(dispatcher);
1:                     if (audit != null) {
/////////////////////////////////////////////////////////////////////////
1:     boolean isCheckForDuplicates() {
1:     void setCheckForDuplicates(boolean checkForDuplicates) {
1:         this.checkForDuplicates = checkForDuplicates;
author:Gary Tully
-------------------------------------------------------------------------------
commit:3596f37
/////////////////////////////////////////////////////////////////////////
1:     protected synchronized void rollbackDuplicate(ActiveMQDispatcher dispatcher, Message message) {
author:Bosanac Dejan
-------------------------------------------------------------------------------
commit:2a58f4c
/////////////////////////////////////////////////////////////////////////
1:     
1: 	private int auditDepth = ActiveMQMessageAudit.DEFAULT_WINDOW_SIZE;
1: 	private int auditMaximumProducerNumber = ActiveMQMessageAudit.MAXIMUM_PRODUCER_COUNT;
1: 	
1: 	
/////////////////////////////////////////////////////////////////////////
1:                         audit = new ActiveMQMessageAudit(auditDepth, auditMaximumProducerNumber);
/////////////////////////////////////////////////////////////////////////
1:                     audit = new ActiveMQMessageAudit(auditDepth, auditMaximumProducerNumber);
/////////////////////////////////////////////////////////////////////////
1: 
1: 	public int getAuditDepth() {
1: 		return auditDepth;
1: 	}
1: 
1: 	public void setAuditDepth(int auditDepth) {
1: 		this.auditDepth = auditDepth;
1: 	}
1: 
1: 	public int getAuditMaximumProducerNumber() {
1: 		return auditMaximumProducerNumber;
1: 	}
1: 
1: 	public void setAuditMaximumProducerNumber(int auditMaximumProducerNumber) {
1: 		this.auditMaximumProducerNumber = auditMaximumProducerNumber;
1: 	}
1:     
author:Robert Davies
-------------------------------------------------------------------------------
commit:1ee0017
/////////////////////////////////////////////////////////////////////////
1:                     boolean result = audit.isDuplicate(message);
/////////////////////////////////////////////////////////////////////////
1:                 boolean result = audit.isDuplicate(message);
/////////////////////////////////////////////////////////////////////////
1:                         audit.rollback(message);
1:                         audit.rollback(message);
commit:6aa4bca
/////////////////////////////////////////////////////////////////////////
1:     private LinkedHashMap<ActiveMQDestination, ActiveMQMessageAudit> destinations = new LRUCache<ActiveMQDestination, ActiveMQMessageAudit>(1000);
/////////////////////////////////////////////////////////////////////////
1:                     ActiveMQMessageAudit audit = destinations.get(destination);
1:                         destinations.put(destination, audit);
/////////////////////////////////////////////////////////////////////////
1:                     ActiveMQMessageAudit audit = destinations.get(destination);
commit:5f30e41
/////////////////////////////////////////////////////////////////////////
1: /**
1:  *
1:  * Licensed to the Apache Software Foundation (ASF) under one or more
1:  * contributor license agreements.  See the NOTICE file distributed with
1:  * this work for additional information regarding copyright ownership.
1:  * The ASF licenses this file to You under the Apache License, Version 2.0
1:  * (the "License"); you may not use this file except in compliance with
1:  * the License.  You may obtain a copy of the License at
1:  *
0:  * http://www.apache.org/licenses/LICENSE-2.0
1:  *
1:  * Unless required by applicable law or agreed to in writing, software
1:  * distributed under the License is distributed on an "AS IS" BASIS,
1:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:  * See the License for the specific language governing permissions and
1:  * limitations under the License.
1:  */
1: package org.apache.activemq;
1: 
1: import java.util.LinkedHashMap;
1: import org.apache.activemq.command.ActiveMQDestination;
1: import org.apache.activemq.command.Message;
1: import org.apache.activemq.util.LRUCache;
1: 
1: 
1: /**
1:  * An auditor class for a Connection that looks for duplicates
1:  */
0:  class ConnectionAudit{
1: 
1:     private boolean checkForDuplicates;
0:     private LinkedHashMap<ActiveMQDestination,ActiveMQMessageAudit> queues=new LRUCache<ActiveMQDestination,ActiveMQMessageAudit>(
0:             1000);
0:     private LinkedHashMap<ActiveMQDispatcher,ActiveMQMessageAudit> dispatchers=new LRUCache<ActiveMQDispatcher,ActiveMQMessageAudit>(
0:             1000);
1: 
0:     synchronized void removeDispatcher(ActiveMQDispatcher dispatcher){
1:         dispatchers.remove(dispatcher);
1:     }
1: 
0:     synchronized boolean isDuplicate(ActiveMQDispatcher dispatcher,Message message){
0:         if(checkForDuplicates && message != null){
0:             ActiveMQDestination destination=message.getDestination();
0:             if(destination!=null){
0:                 if(destination.isQueue()){
0:                     ActiveMQMessageAudit audit=queues.get(destination);
0:                     if(audit==null){
0:                         audit=new ActiveMQMessageAudit();
0:                         queues.put(destination,audit);
1:                     }
0:                     boolean result=audit.isDuplicateMessageReference(message);
1:                     return result;
1:                 }
0:                 ActiveMQMessageAudit audit=dispatchers.get(dispatcher);
0:                 if(audit==null){
0:                     audit=new ActiveMQMessageAudit();
0:                     dispatchers.put(dispatcher,audit);
1:                 }
0:                 boolean result=audit.isDuplicateMessageReference(message);
1:                 return result;
1:             }
1:         }
1:         return false;
1:     }
1: 
0:     protected void rollbackDuplicate(ActiveMQDispatcher dispatcher,Message message){
0:         if(checkForDuplicates && message != null){
0:             ActiveMQDestination destination=message.getDestination();
0:             if(destination!=null){
0:                 if(destination.isQueue()){
0:                     ActiveMQMessageAudit audit=queues.get(destination);
0:                     if(audit!=null){
0:                         audit.rollbackMessageReference(message);
1:                     }
0:                 }else{
0:                     ActiveMQMessageAudit audit=dispatchers.get(dispatcher);
0:                     if(audit!=null){
0:                         audit.rollbackMessageReference(message);
1:                     }
1:                 }
1:             }
1:         }
1:     }
1: 
1:     /**
1:      * @return the checkForDuplicates
1:      */
0:     boolean isCheckForDuplicates(){
1:         return this.checkForDuplicates;
1:     }
1: 
1:     /**
1:      * @param checkForDuplicates the checkForDuplicates to set
1:      */
0:     void setCheckForDuplicates(boolean checkForDuplicates){
0:         this.checkForDuplicates=checkForDuplicates;
1:     }
1: }
============================================================================