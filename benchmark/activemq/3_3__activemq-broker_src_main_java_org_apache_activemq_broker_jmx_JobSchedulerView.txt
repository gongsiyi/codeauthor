1:c7c8e53: /**
1:c7c8e53:  * Licensed to the Apache Software Foundation (ASF) under one or more
1:c7c8e53:  * contributor license agreements.  See the NOTICE file distributed with
1:c7c8e53:  * this work for additional information regarding copyright ownership.
1:c7c8e53:  * The ASF licenses this file to You under the Apache License, Version 2.0
1:c7c8e53:  * (the "License"); you may not use this file except in compliance with
1:c7c8e53:  * the License.  You may obtain a copy of the License at
1:c7c8e53:  *
1:c7c8e53:  *      http://www.apache.org/licenses/LICENSE-2.0
1:c7c8e53:  *
1:c7c8e53:  * Unless required by applicable law or agreed to in writing, software
1:c7c8e53:  * distributed under the License is distributed on an "AS IS" BASIS,
1:c7c8e53:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:c7c8e53:  * See the License for the specific language governing permissions and
1:c7c8e53:  * limitations under the License.
1:c7c8e53:  */
1:c7c8e53: package org.apache.activemq.broker.jmx;
7:c7c8e53: 
1:74846bb: import java.util.List;
1:74846bb: 
1:74846bb: import javax.management.openmbean.CompositeDataSupport;
1:74846bb: import javax.management.openmbean.CompositeType;
1:74846bb: import javax.management.openmbean.TabularData;
1:74846bb: import javax.management.openmbean.TabularDataSupport;
1:74846bb: import javax.management.openmbean.TabularType;
1:74846bb: 
1:c7c8e53: import org.apache.activemq.broker.jmx.OpenTypeSupport.OpenTypeFactory;
1:c7c8e53: import org.apache.activemq.broker.scheduler.Job;
1:c7c8e53: import org.apache.activemq.broker.scheduler.JobScheduler;
1:0484af1: import org.apache.activemq.broker.scheduler.JobSupport;
1:0484af1: 
1:74846bb: /**
1:74846bb:  * MBean object that can be used to manage a single instance of a JobScheduler.  The object
1:74846bb:  * provides methods for querying for jobs and removing some or all of the jobs that are
1:74846bb:  * scheduled in the managed store.
1:74846bb:  */
1:c7c8e53: public class JobSchedulerView implements JobSchedulerViewMBean {
1:c7c8e53: 
1:c7c8e53:     private final JobScheduler jobScheduler;
1:c7c8e53: 
1:74846bb:     /**
1:74846bb:      * Creates a new instance of the JobScheduler management MBean.
1:74846bb:      *
1:74846bb:      * @param jobScheduler
1:74846bb:      *        The scheduler instance to manage.
1:74846bb:      */
1:c7c8e53:     public JobSchedulerView(JobScheduler jobScheduler) {
1:c7c8e53:         this.jobScheduler = jobScheduler;
2:c7c8e53:     }
1:c7c8e53: 
1:74846bb:     @Override
1:c7c8e53:     public TabularData getAllJobs() throws Exception {
1:c7c8e53:         OpenTypeFactory factory = OpenTypeSupport.getFactory(Job.class);
1:c7c8e53:         CompositeType ct = factory.getCompositeType();
1:c7c8e53:         TabularType tt = new TabularType("Scheduled Jobs", "Scheduled Jobs", ct, new String[] { "jobId" });
1:c7c8e53:         TabularDataSupport rc = new TabularDataSupport(tt);
1:c7c8e53:         List<Job> jobs = this.jobScheduler.getAllJobs();
1:c7c8e53:         for (Job job : jobs) {
1:c7c8e53:             rc.put(new CompositeDataSupport(ct, factory.getFields(job)));
1:c7c8e53:         }
1:c7c8e53:         return rc;
1:c7c8e53:     }
1:c7c8e53: 
1:74846bb:     @Override
1:c7c8e53:     public TabularData getAllJobs(String startTime, String finishTime) throws Exception {
1:c7c8e53:         OpenTypeFactory factory = OpenTypeSupport.getFactory(Job.class);
1:c7c8e53:         CompositeType ct = factory.getCompositeType();
1:c7c8e53:         TabularType tt = new TabularType("Scheduled Jobs", "Scheduled Jobs", ct, new String[] { "jobId" });
1:c7c8e53:         TabularDataSupport rc = new TabularDataSupport(tt);
1:0484af1:         long start = JobSupport.getDataTime(startTime);
1:0484af1:         long finish = JobSupport.getDataTime(finishTime);
1:c7c8e53:         List<Job> jobs = this.jobScheduler.getAllJobs(start, finish);
1:c7c8e53:         for (Job job : jobs) {
1:c7c8e53:             rc.put(new CompositeDataSupport(ct, factory.getFields(job)));
1:c7c8e53:         }
1:c7c8e53:         return rc;
1:c7c8e53:     }
1:c7c8e53: 
1:74846bb:     @Override
1:c7c8e53:     public TabularData getNextScheduleJobs() throws Exception {
1:c7c8e53:         OpenTypeFactory factory = OpenTypeSupport.getFactory(Job.class);
1:c7c8e53:         CompositeType ct = factory.getCompositeType();
1:c7c8e53:         TabularType tt = new TabularType("Scheduled Jobs", "Scheduled Jobs", ct, new String[] { "jobId" });
1:c7c8e53:         TabularDataSupport rc = new TabularDataSupport(tt);
1:c7c8e53:         List<Job> jobs = this.jobScheduler.getNextScheduleJobs();
1:c7c8e53:         for (Job job : jobs) {
1:c7c8e53:             rc.put(new CompositeDataSupport(ct, factory.getFields(job)));
1:c7c8e53:         }
1:c7c8e53:         return rc;
1:c7c8e53:     }
1:c7c8e53: 
2:74846bb:     @Override
1:c7c8e53:     public String getNextScheduleTime() throws Exception {
1:c7c8e53:         long time = this.jobScheduler.getNextScheduleTime();
1:0484af1:         return JobSupport.getDateTime(time);
1:c7c8e53:     }
1:c7c8e53: 
1:74846bb:     @Override
1:c7c8e53:     public void removeAllJobs() throws Exception {
1:c7c8e53:         this.jobScheduler.removeAllJobs();
1:c7c8e53:     }
1:c7c8e53: 
1:74846bb:     @Override
1:c7c8e53:     public void removeAllJobs(String startTime, String finishTime) throws Exception {
1:0484af1:         long start = JobSupport.getDataTime(startTime);
1:0484af1:         long finish = JobSupport.getDataTime(finishTime);
1:c7c8e53:         this.jobScheduler.removeAllJobs(start, finish);
1:c7c8e53:     }
1:c7c8e53: 
1:74846bb:     @Override
1:74846bb:     public void removeAllJobsAtScheduledTime(String time) throws Exception {
1:74846bb:         long removeAtTime = JobSupport.getDataTime(time);
1:74846bb:         this.jobScheduler.remove(removeAtTime);
1:74846bb:     }
1:74846bb: 
1:74846bb:     @Override
1:c7c8e53:     public void removeJob(String jobId) throws Exception {
1:c7c8e53:         this.jobScheduler.remove(jobId);
1:74846bb:     }
1:74846bb: 
1:74846bb:     @Override
1:74846bb:     public int getExecutionCount(String jobId) throws Exception {
1:74846bb:         int result = 0;
1:c7c8e53: 
1:74846bb:         List<Job> jobs = this.jobScheduler.getAllJobs();
1:74846bb:         for (Job job : jobs) {
1:74846bb:             if (job.getJobId().equals(jobId)) {
1:74846bb:                 result = job.getExecutionCount();
1:74846bb:             }
1:74846bb:         }
1:74846bb: 
1:74846bb:         return result;
1:c7c8e53:     }
1:c7c8e53: }
============================================================================
author:Timothy Bish
-------------------------------------------------------------------------------
commit:8906a53
/////////////////////////////////////////////////////////////////////////
commit:74846bb
/////////////////////////////////////////////////////////////////////////
1: import java.util.List;
1: 
1: import javax.management.openmbean.CompositeDataSupport;
1: import javax.management.openmbean.CompositeType;
1: import javax.management.openmbean.TabularData;
1: import javax.management.openmbean.TabularDataSupport;
1: import javax.management.openmbean.TabularType;
1: 
1: /**
1:  * MBean object that can be used to manage a single instance of a JobScheduler.  The object
1:  * provides methods for querying for jobs and removing some or all of the jobs that are
1:  * scheduled in the managed store.
1:  */
1:     /**
1:      * Creates a new instance of the JobScheduler management MBean.
1:      *
1:      * @param jobScheduler
1:      *        The scheduler instance to manage.
1:      */
1:     @Override
/////////////////////////////////////////////////////////////////////////
1:     @Override
/////////////////////////////////////////////////////////////////////////
1:     @Override
/////////////////////////////////////////////////////////////////////////
1:     @Override
1:     @Override
1:     @Override
1:     @Override
1:     public void removeAllJobsAtScheduledTime(String time) throws Exception {
1:         long removeAtTime = JobSupport.getDataTime(time);
1:         this.jobScheduler.remove(removeAtTime);
1:     }
1: 
1:     @Override
0:     public void removeJobAtScheduledTime(String time) throws Exception {
0:         removeAllJobsAtScheduledTime(time);
1:     }
1: 
1:     @Override
1:     @Override
1:     public int getExecutionCount(String jobId) throws Exception {
1:         int result = 0;
1:         List<Job> jobs = this.jobScheduler.getAllJobs();
1:         for (Job job : jobs) {
1:             if (job.getJobId().equals(jobId)) {
1:                 result = job.getExecutionCount();
1:             }
1:         }
1: 
1:         return result;
author:Hiram R. Chirino
-------------------------------------------------------------------------------
commit:58aca86
commit:0484af1
/////////////////////////////////////////////////////////////////////////
1: import org.apache.activemq.broker.scheduler.JobSupport;
1: 
0: import javax.management.openmbean.*;
0: import java.io.IOException;
0: import java.util.List;
/////////////////////////////////////////////////////////////////////////
1:         long start = JobSupport.getDataTime(startTime);
1:         long finish = JobSupport.getDataTime(finishTime);
/////////////////////////////////////////////////////////////////////////
1:         return JobSupport.getDateTime(time);
/////////////////////////////////////////////////////////////////////////
1:         long start = JobSupport.getDataTime(startTime);
1:         long finish = JobSupport.getDataTime(finishTime);
author:Robert Davies
-------------------------------------------------------------------------------
commit:c7c8e53
/////////////////////////////////////////////////////////////////////////
1: /**
1:  * Licensed to the Apache Software Foundation (ASF) under one or more
1:  * contributor license agreements.  See the NOTICE file distributed with
1:  * this work for additional information regarding copyright ownership.
1:  * The ASF licenses this file to You under the Apache License, Version 2.0
1:  * (the "License"); you may not use this file except in compliance with
1:  * the License.  You may obtain a copy of the License at
1:  *
1:  *      http://www.apache.org/licenses/LICENSE-2.0
1:  *
1:  * Unless required by applicable law or agreed to in writing, software
1:  * distributed under the License is distributed on an "AS IS" BASIS,
1:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:  * See the License for the specific language governing permissions and
1:  * limitations under the License.
1:  */
1: package org.apache.activemq.broker.jmx;
1: 
0: import java.io.IOException;
0: import java.util.List;
0: import javax.management.openmbean.CompositeDataSupport;
0: import javax.management.openmbean.CompositeType;
0: import javax.management.openmbean.TabularData;
0: import javax.management.openmbean.TabularDataSupport;
0: import javax.management.openmbean.TabularType;
1: import org.apache.activemq.broker.jmx.OpenTypeSupport.OpenTypeFactory;
1: import org.apache.activemq.broker.scheduler.Job;
0: import org.apache.activemq.broker.scheduler.JobImpl;
1: import org.apache.activemq.broker.scheduler.JobScheduler;
1: 
1: public class JobSchedulerView implements JobSchedulerViewMBean {
1: 
1:     private final JobScheduler jobScheduler;
1: 
1:     public JobSchedulerView(JobScheduler jobScheduler) {
1:         this.jobScheduler = jobScheduler;
1:     }
1: 
1:     public TabularData getAllJobs() throws Exception {
1:         OpenTypeFactory factory = OpenTypeSupport.getFactory(Job.class);
1:         CompositeType ct = factory.getCompositeType();
1:         TabularType tt = new TabularType("Scheduled Jobs", "Scheduled Jobs", ct, new String[] { "jobId" });
1:         TabularDataSupport rc = new TabularDataSupport(tt);
1:         List<Job> jobs = this.jobScheduler.getAllJobs();
1:         for (Job job : jobs) {
1:             rc.put(new CompositeDataSupport(ct, factory.getFields(job)));
1:         }
1:         return rc;
1:     }
1: 
1:     public TabularData getAllJobs(String startTime, String finishTime) throws Exception {
1:         OpenTypeFactory factory = OpenTypeSupport.getFactory(Job.class);
1:         CompositeType ct = factory.getCompositeType();
1:         TabularType tt = new TabularType("Scheduled Jobs", "Scheduled Jobs", ct, new String[] { "jobId" });
1:         TabularDataSupport rc = new TabularDataSupport(tt);
0:         long start = JobImpl.getDataTime(startTime);
0:         long finish = JobImpl.getDataTime(finishTime);
1:         List<Job> jobs = this.jobScheduler.getAllJobs(start, finish);
1:         for (Job job : jobs) {
1:             rc.put(new CompositeDataSupport(ct, factory.getFields(job)));
1:         }
1:         return rc;
1:     }
1: 
1:     public TabularData getNextScheduleJobs() throws Exception {
1:         OpenTypeFactory factory = OpenTypeSupport.getFactory(Job.class);
1:         CompositeType ct = factory.getCompositeType();
1:         TabularType tt = new TabularType("Scheduled Jobs", "Scheduled Jobs", ct, new String[] { "jobId" });
1:         TabularDataSupport rc = new TabularDataSupport(tt);
1:         List<Job> jobs = this.jobScheduler.getNextScheduleJobs();
1:         for (Job job : jobs) {
1:             rc.put(new CompositeDataSupport(ct, factory.getFields(job)));
1:         }
1:         return rc;
1:     }
1: 
1:     public String getNextScheduleTime() throws Exception {
1:         long time = this.jobScheduler.getNextScheduleTime();
0:         return JobImpl.getDateTime(time);
1:     }
1: 
1:     public void removeAllJobs() throws Exception {
1:         this.jobScheduler.removeAllJobs();
1: 
1:     }
1: 
1:     public void removeAllJobs(String startTime, String finishTime) throws Exception {
0:         long start = JobImpl.getDataTime(startTime);
0:         long finish = JobImpl.getDataTime(finishTime);
1:         this.jobScheduler.removeAllJobs(start, finish);
1: 
1:     }
1: 
1:     public void removeJob(String jobId) throws Exception {
1:         this.jobScheduler.remove(jobId);
1: 
1:     }
1: 
0:     public void removeJobAtScheduledTime(String time) throws IOException {
0:         // TODO Auto-generated method stub
1: 
1:     }
1: 
1: }
============================================================================