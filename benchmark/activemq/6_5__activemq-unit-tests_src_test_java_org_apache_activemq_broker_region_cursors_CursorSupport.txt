1:3bf0245: /**
1:fc00993:  * Licensed to the Apache Software Foundation (ASF) under one or more
1:fc00993:  * contributor license agreements.  See the NOTICE file distributed with
1:fc00993:  * this work for additional information regarding copyright ownership.
1:fc00993:  * The ASF licenses this file to You under the Apache License, Version 2.0
1:fc00993:  * (the "License"); you may not use this file except in compliance with
1:fc00993:  * the License.  You may obtain a copy of the License at
1:b0c2a40:  *
1:fc00993:  *      http://www.apache.org/licenses/LICENSE-2.0
2:fc00993:  *
1:fc00993:  * Unless required by applicable law or agreed to in writing, software
1:fc00993:  * distributed under the License is distributed on an "AS IS" BASIS,
1:fc00993:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:fc00993:  * See the License for the specific language governing permissions and
1:fc00993:  * limitations under the License.
1:819b811:  */
1:3bf0245: package org.apache.activemq.broker.region.cursors;
1:3bf0245: 
1:c2922ad: import org.apache.activemq.ActiveMQConnectionFactory;
1:c2922ad: import org.apache.activemq.CombinationTestSupport;
1:c2922ad: import org.apache.activemq.broker.BrokerService;
1:8bf987b: import org.slf4j.Logger;
1:8bf987b: import org.slf4j.LoggerFactory;
1:3bf0245: import java.util.ArrayList;
1:3bf0245: import java.util.List;
1:3bf0245: import java.util.Properties;
1:3bf0245: import java.util.concurrent.CountDownLatch;
1:3bf0245: import java.util.concurrent.TimeUnit;
1:3bf0245: import javax.jms.Connection;
1:3bf0245: import javax.jms.ConnectionFactory;
1:3bf0245: import javax.jms.Destination;
1:3bf0245: import javax.jms.JMSException;
1:3bf0245: import javax.jms.Message;
1:3bf0245: import javax.jms.MessageConsumer;
1:3bf0245: import javax.jms.MessageListener;
1:3bf0245: import javax.jms.MessageProducer;
1:3bf0245: import javax.jms.Session;
1:3bf0245: import javax.jms.TextMessage;
1:ecf89a6: 
1:3bf0245: /**
1:9529b24:  *
2:3bf0245:  */
1:3c32abd: public abstract class CursorSupport extends CombinationTestSupport {
1:3bf0245: 
1:3c32abd:     public int MESSAGE_COUNT = 500;
1:3c32abd:     public int PREFETCH_SIZE = 50;
1:8bf987b:     private static final Logger LOG = LoggerFactory.getLogger(CursorSupport.class);
1:3bf0245: 
1:3bf0245:     protected BrokerService broker;
1:230a86c:     protected String bindAddress = "tcp://localhost:60706";
1:3bf0245: 
1:3bf0245:     protected abstract Destination getDestination(Session session) throws JMSException;
1:3bf0245: 
1:3bf0245:     protected abstract MessageConsumer getConsumer(Connection connection) throws Exception;
1:3bf0245: 
1:3bf0245:     protected abstract void configureBroker(BrokerService answer) throws Exception;
1:3bf0245: 
1:230a86c:     public void testSendFirstThenConsume() throws Exception {
1:230a86c:         ConnectionFactory factory = createConnectionFactory();
1:230a86c:         Connection consumerConnection = getConsumerConnection(factory);
1:230a86c:         MessageConsumer consumer = getConsumer(consumerConnection);
2:3bf0245:         consumerConnection.close();
1:230a86c:         Connection producerConnection = factory.createConnection();
1:3bf0245:         producerConnection.start();
1:230a86c:         Session session = producerConnection.createSession(false, Session.AUTO_ACKNOWLEDGE);
1:230a86c:         MessageProducer producer = session.createProducer(getDestination(session));
1:ecf89a6:         List<Message> senderList = new ArrayList<Message>();
1:230a86c:         for (int i = 0; i < MESSAGE_COUNT; i++) {
1:230a86c:             Message msg = session.createTextMessage("test" + i);
1:3bf0245:             senderList.add(msg);
1:3bf0245:             producer.send(msg);
2:3bf0245:         }
1:63d78ac:         producerConnection.close();
1:3bf0245:         // now consume the messages
1:230a86c:         consumerConnection = getConsumerConnection(factory);
1:3bf0245:         // create durable subs
1:230a86c:         consumer = getConsumer(consumerConnection);
1:ecf89a6:         List<Message> consumerList = new ArrayList<Message>();
1:230a86c:         for (int i = 0; i < MESSAGE_COUNT; i++) {
1:53c4e12:             Message msg = consumer.receive(1000*5);
1:53c4e12:             assertNotNull("Message "+i+" was missing.", msg);
1:3bf0245:             consumerList.add(msg);
1:3bf0245:         }
1:230a86c:         assertEquals(senderList, consumerList);
1:63d78ac:         consumerConnection.close();
1:3bf0245:     }
1:3bf0245: 
1:3bf0245: 
1:3c32abd:     public void initCombosForTestSendWhilstConsume() {
1:3c32abd:         addCombinationValues("MESSAGE_COUNT", new Object[] {Integer.valueOf(400),
1:3c32abd:                                                            Integer.valueOf(500)});
1:3c32abd:         addCombinationValues("PREFETCH_SIZE", new Object[] {Integer.valueOf(100),
1:3c32abd:                 Integer.valueOf(50)});
1:3bf0245:     }
1:3bf0245: 
1:230a86c:     public void testSendWhilstConsume() throws Exception {
1:230a86c:         ConnectionFactory factory = createConnectionFactory();
1:230a86c:         Connection consumerConnection = getConsumerConnection(factory);
1:3bf0245:         // create durable subs
1:230a86c:         MessageConsumer consumer = getConsumer(consumerConnection);
1:3bf0245:         consumerConnection.close();
1:230a86c:         Connection producerConnection = factory.createConnection();
1:3bf0245:         producerConnection.start();
1:230a86c:         Session session = producerConnection.createSession(false, Session.AUTO_ACKNOWLEDGE);
1:230a86c:         MessageProducer producer = session.createProducer(getDestination(session));
1:ecf89a6:         List<TextMessage> senderList = new ArrayList<TextMessage>();
1:230a86c:         for (int i = 0; i < MESSAGE_COUNT / 10; i++) {
1:230a86c:             TextMessage msg = session.createTextMessage("test" + i);
1:3bf0245:             senderList.add(msg);
1:3bf0245:             producer.send(msg);
1:3bf0245:         }
1:3bf0245:         // now consume the messages
1:230a86c:         consumerConnection = getConsumerConnection(factory);
1:3bf0245:         // create durable subs
1:230a86c:         consumer = getConsumer(consumerConnection);
1:ecf89a6:         final List<Message> consumerList = new ArrayList<Message>();
1:230a86c:         final CountDownLatch latch = new CountDownLatch(1);
1:230a86c:         consumer.setMessageListener(new MessageListener() {
1:3bf0245: 
1:230a86c:             public void onMessage(Message msg) {
1:230a86c:                 try {
1:3bf0245:                     // sleep to act as a slow consumer
1:3bf0245:                     // which will force a mix of direct and polled dispatching
1:3bf0245:                     // using the cursor on the broker
1:3bf0245:                     Thread.sleep(50);
1:230a86c:                 } catch (Exception e) {
1:3bf0245:                     e.printStackTrace();
1:3bf0245:                 }
1:3bf0245:                 consumerList.add(msg);
1:230a86c:                 if (consumerList.size() == MESSAGE_COUNT) {
1:3bf0245:                     latch.countDown();
1:3bf0245:                 }
1:3bf0245:             }
1:3bf0245:         });
1:230a86c:         for (int i = MESSAGE_COUNT / 10; i < MESSAGE_COUNT; i++) {
1:230a86c:             TextMessage msg = session.createTextMessage("test" + i);
1:3bf0245:             senderList.add(msg);
1:3bf0245:             producer.send(msg);
1:3bf0245:         }
1:230a86c:         latch.await(300000, TimeUnit.MILLISECONDS);
2:3bf0245:         producerConnection.close();
1:3bf0245:         consumerConnection.close();
1:230a86c:         assertEquals("Still dipatching - count down latch not sprung", latch.getCount(), 0);
1:65beee6:         //assertEquals("cosumerList - expected: " + MESSAGE_COUNT + " but was: " + consumerList.size(), consumerList.size(), senderList.size());
1:230a86c:         for (int i = 0; i < senderList.size(); i++) {
1:ecf89a6:             Message sent = senderList.get(i);
1:ecf89a6:             Message consumed = consumerList.get(i);
1:63d78ac:             if (!sent.equals(consumed)) {
1:fc00993:                 LOG.error("BAD MATCH AT POS " + i);
1:8bf987b:                 LOG.error(sent.toString());
1:8bf987b:                 LOG.error(consumed.toString());
1:230a86c:                 /*
1:230a86c:                  * log.error("\n\n\n\n\n"); for (int j = 0; j <
1:230a86c:                  * consumerList.size(); j++) { log.error(consumerList.get(j)); }
1:230a86c:                  */
1:63d78ac:             }
1:230a86c:             assertEquals("This should be the same at pos " + i + " in the list", sent.getJMSMessageID(), consumed.getJMSMessageID());
1:230a86c:         }
1:63d78ac:     }
1:9529b24: 
1:230a86c:     protected Connection getConsumerConnection(ConnectionFactory fac) throws JMSException {
1:230a86c:         Connection connection = fac.createConnection();
1:3bf0245:         connection.setClientID("testConsumer");
1:3bf0245:         connection.start();
1:3bf0245:         return connection;
1:63d78ac:     }
1:3bf0245: 
1:230a86c:     protected void setUp() throws Exception {
1:230a86c:         if (broker == null) {
1:230a86c:             broker = createBroker();
1:3bf0245:         }
1:3bf0245:         super.setUp();
1:3bf0245:     }
1:3bf0245: 
1:230a86c:     protected void tearDown() throws Exception {
1:3bf0245:         super.tearDown();
1:230a86c:         if (broker != null) {
1:3bf0245:             broker.stop();
1:3bf0245:         }
1:3bf0245:     }
1:3bf0245: 
1:230a86c:     protected ActiveMQConnectionFactory createConnectionFactory() throws Exception {
1:230a86c:         ActiveMQConnectionFactory cf = new ActiveMQConnectionFactory(bindAddress);
1:230a86c:         Properties props = new Properties();
1:230a86c:         props.setProperty("prefetchPolicy.durableTopicPrefetch", "" + PREFETCH_SIZE);
1:230a86c:         props.setProperty("prefetchPolicy.optimizeDurableTopicPrefetch", "" + PREFETCH_SIZE);
1:230a86c:         props.setProperty("prefetchPolicy.queuePrefetch", "" + PREFETCH_SIZE);
1:3bf0245:         cf.setProperties(props);
1:3bf0245:         return cf;
1:3bf0245:     }
1:3bf0245: 
1:230a86c:     protected BrokerService createBroker() throws Exception {
1:230a86c:         BrokerService answer = new BrokerService();
1:3bf0245:         configureBroker(answer);
1:3bf0245:         answer.start();
1:3bf0245:         return answer;
1:3bf0245:     }
1:3bf0245: }
============================================================================
author:Timothy A. Bish
-------------------------------------------------------------------------------
commit:ef24cc9
commit:9529b24
/////////////////////////////////////////////////////////////////////////
1:  *
/////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////
1: 
author:Hiram R. Chirino
-------------------------------------------------------------------------------
commit:b0c2a40
/////////////////////////////////////////////////////////////////////////
1:  * 
commit:53c4e12
/////////////////////////////////////////////////////////////////////////
1:             Message msg = consumer.receive(1000*5);
1:             assertNotNull("Message "+i+" was missing.", msg);
commit:ecf89a6
/////////////////////////////////////////////////////////////////////////
0:     private static final Log LOG = LogFactory.getLog(CursorSupport.class);
1: 
/////////////////////////////////////////////////////////////////////////
1:         List<Message> senderList = new ArrayList<Message>();
/////////////////////////////////////////////////////////////////////////
1:         List<Message> consumerList = new ArrayList<Message>();
/////////////////////////////////////////////////////////////////////////
1:         List<TextMessage> senderList = new ArrayList<TextMessage>();
/////////////////////////////////////////////////////////////////////////
1:         final List<Message> consumerList = new ArrayList<Message>();
/////////////////////////////////////////////////////////////////////////
1:             Message sent = senderList.get(i);
1:             Message consumed = consumerList.get(i);
commit:fc00993
/////////////////////////////////////////////////////////////////////////
1:  * Licensed to the Apache Software Foundation (ASF) under one or more
1:  * contributor license agreements.  See the NOTICE file distributed with
1:  * this work for additional information regarding copyright ownership.
1:  * The ASF licenses this file to You under the Apache License, Version 2.0
1:  * (the "License"); you may not use this file except in compliance with
1:  * the License.  You may obtain a copy of the License at
1:  *
1:  *      http://www.apache.org/licenses/LICENSE-2.0
1:  *
1:  * Unless required by applicable law or agreed to in writing, software
1:  * distributed under the License is distributed on an "AS IS" BASIS,
1:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:  * See the License for the specific language governing permissions and
1:  * limitations under the License.
/////////////////////////////////////////////////////////////////////////
0:     private static final Log LOG = LogFactory.getLog(CursorSupport.class);
/////////////////////////////////////////////////////////////////////////
1:                 LOG.error("BAD MATCH AT POS " + i);
0:                 LOG.error(sent);
0:                 LOG.error(consumed);
commit:230a86c
/////////////////////////////////////////////////////////////////////////
0: public abstract class CursorSupport extends TestCase {
0:     protected static final Log log = LogFactory.getLog(CursorSupport.class);
0:     protected static final int MESSAGE_COUNT = 500;
0:     protected static final int PREFETCH_SIZE = 50;
1:     protected String bindAddress = "tcp://localhost:60706";
/////////////////////////////////////////////////////////////////////////
1:     public void testSendFirstThenConsume() throws Exception {
1:         ConnectionFactory factory = createConnectionFactory();
1:         Connection consumerConnection = getConsumerConnection(factory);
1:         MessageConsumer consumer = getConsumer(consumerConnection);
1:         Connection producerConnection = factory.createConnection();
1:         Session session = producerConnection.createSession(false, Session.AUTO_ACKNOWLEDGE);
1:         MessageProducer producer = session.createProducer(getDestination(session));
0:         List senderList = new ArrayList();
1:         for (int i = 0; i < MESSAGE_COUNT; i++) {
1:             Message msg = session.createTextMessage("test" + i);
1:         consumerConnection = getConsumerConnection(factory);
1:         consumer = getConsumer(consumerConnection);
0:         List consumerList = new ArrayList();
1:         for (int i = 0; i < MESSAGE_COUNT; i++) {
0:             Message msg = consumer.receive();
1:         assertEquals(senderList, consumerList);
1:     public void testSendWhilstConsume() throws Exception {
1:         ConnectionFactory factory = createConnectionFactory();
1:         Connection consumerConnection = getConsumerConnection(factory);
1:         MessageConsumer consumer = getConsumer(consumerConnection);
1:         Connection producerConnection = factory.createConnection();
1:         Session session = producerConnection.createSession(false, Session.AUTO_ACKNOWLEDGE);
1:         MessageProducer producer = session.createProducer(getDestination(session));
0:         List senderList = new ArrayList();
1:         for (int i = 0; i < MESSAGE_COUNT / 10; i++) {
1:             TextMessage msg = session.createTextMessage("test" + i);
1:         consumerConnection = getConsumerConnection(factory);
1:         consumer = getConsumer(consumerConnection);
0:         final List consumerList = new ArrayList();
1:         final CountDownLatch latch = new CountDownLatch(1);
1:         consumer.setMessageListener(new MessageListener() {
1:             public void onMessage(Message msg) {
1:                 try {
1:                 } catch (Exception e) {
1:                 if (consumerList.size() == MESSAGE_COUNT) {
1:         for (int i = MESSAGE_COUNT / 10; i < MESSAGE_COUNT; i++) {
1:             TextMessage msg = session.createTextMessage("test" + i);
1:         latch.await(300000, TimeUnit.MILLISECONDS);
1:         assertEquals("Still dipatching - count down latch not sprung", latch.getCount(), 0);
0:         assertEquals("cosumerList - expected: " + MESSAGE_COUNT + " but was: " + consumerList.size(), consumerList.size(), senderList.size());
1:         for (int i = 0; i < senderList.size(); i++) {
0:                 log.error("BAD MATCH AT POS " + i);
0:                 log.error(sent);
0:                 log.error(consumed);
1:                 /*
1:                  * log.error("\n\n\n\n\n"); for (int j = 0; j <
1:                  * consumerList.size(); j++) { log.error(consumerList.get(j)); }
1:                  */
1:             assertEquals("This should be the same at pos " + i + " in the list", sent.getJMSMessageID(), consumed.getJMSMessageID());
1:         }
1:     protected Connection getConsumerConnection(ConnectionFactory fac) throws JMSException {
1:         Connection connection = fac.createConnection();
1:     protected void setUp() throws Exception {
1:         if (broker == null) {
1:             broker = createBroker();
1:     protected void tearDown() throws Exception {
1:         if (broker != null) {
1:     protected ActiveMQConnectionFactory createConnectionFactory() throws Exception {
1:         ActiveMQConnectionFactory cf = new ActiveMQConnectionFactory(bindAddress);
1:         Properties props = new Properties();
1:         props.setProperty("prefetchPolicy.durableTopicPrefetch", "" + PREFETCH_SIZE);
1:         props.setProperty("prefetchPolicy.optimizeDurableTopicPrefetch", "" + PREFETCH_SIZE);
1:         props.setProperty("prefetchPolicy.queuePrefetch", "" + PREFETCH_SIZE);
1:     protected BrokerService createBroker() throws Exception {
1:         BrokerService answer = new BrokerService();
author:Bosanac Dejan
-------------------------------------------------------------------------------
commit:8bf987b
/////////////////////////////////////////////////////////////////////////
1: import org.slf4j.Logger;
1: import org.slf4j.LoggerFactory;
/////////////////////////////////////////////////////////////////////////
1:     private static final Logger LOG = LoggerFactory.getLogger(CursorSupport.class);
/////////////////////////////////////////////////////////////////////////
1:                 LOG.error(sent.toString());
1:                 LOG.error(consumed.toString());
author:Robert Davies
-------------------------------------------------------------------------------
commit:c2922ad
/////////////////////////////////////////////////////////////////////////
1: import org.apache.activemq.ActiveMQConnectionFactory;
1: import org.apache.activemq.CombinationTestSupport;
1: import org.apache.activemq.broker.BrokerService;
0: import org.apache.commons.logging.Log;
0: import org.apache.commons.logging.LogFactory;
/////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////
commit:65beee6
/////////////////////////////////////////////////////////////////////////
0:     public void XtestSendFirstThenConsume() throws Exception {
/////////////////////////////////////////////////////////////////////////
0:     public void testSendWhilstConaume() throws Exception {
/////////////////////////////////////////////////////////////////////////
1:         //assertEquals("cosumerList - expected: " + MESSAGE_COUNT + " but was: " + consumerList.size(), consumerList.size(), senderList.size());
commit:819b811
/////////////////////////////////////////////////////////////////////////
0:                /*
1:                */
commit:63d78ac
/////////////////////////////////////////////////////////////////////////
1:         producerConnection.close();
1:         consumerConnection.close();
0:         for (int i =0; i < senderList.size(); i++) {
0:             Message sent = (Message)senderList.get(i);
0:             Message consumed = (Message)consumerList.get(i);
1:             if (!sent.equals(consumed)) {
0:                System.err.println("BAD MATCH AT POS " + i);
0:                System.err.println(sent);
0:                System.err.println(consumed);
0:                System.err.println("\n\n\n\n\n");
0:                for (int j = 0; j < consumerList.size(); j++) {
0:                    System.err.println(consumerList.get(j));
1:                }
1:             }
0:             assertEquals("This should be the same at pos " + i + " in the list",sent.getJMSMessageID(),consumed.getJMSMessageID());
1:         }       
commit:3bf0245
/////////////////////////////////////////////////////////////////////////
1: /**
0:  * 
0:  * Licensed to the Apache Software Foundation (ASF) under one or more contributor license agreements. See the NOTICE
0:  * file distributed with this work for additional information regarding copyright ownership. The ASF licenses this file
0:  * to You under the Apache License, Version 2.0 (the "License"); you may not use this file except in compliance with the
0:  * License. You may obtain a copy of the License at
0:  * 
0:  * http://www.apache.org/licenses/LICENSE-2.0
0:  * 
0:  * Unless required by applicable law or agreed to in writing, software distributed under the License is distributed on
0:  * an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the License for the
0:  * specific language governing permissions and limitations under the License.
1:  */
1: 
1: package org.apache.activemq.broker.region.cursors;
1: 
1: import java.util.ArrayList;
1: import java.util.List;
1: import java.util.Properties;
1: import java.util.concurrent.CountDownLatch;
1: import java.util.concurrent.TimeUnit;
1: import javax.jms.Connection;
1: import javax.jms.ConnectionFactory;
1: import javax.jms.Destination;
1: import javax.jms.JMSException;
1: import javax.jms.Message;
1: import javax.jms.MessageConsumer;
1: import javax.jms.MessageListener;
1: import javax.jms.MessageProducer;
1: import javax.jms.Session;
1: import javax.jms.TextMessage;
0: import junit.framework.TestCase;
0: import org.apache.activemq.ActiveMQConnectionFactory;
0: import org.apache.activemq.broker.BrokerService;
0: import org.apache.commons.logging.Log;
0: import org.apache.commons.logging.LogFactory;
1: 
1: /**
0:  * @version $Revision: 1.3 $
1:  */
0: public abstract class CursorSupport extends TestCase{
1: 
0:     protected static final Log log=LogFactory.getLog(CursorSupport.class);
0:     protected static final int MESSAGE_COUNT=500;
0:     protected static final int PREFETCH_SIZE=50;
1:     protected BrokerService broker;
0:     protected String bindAddress="tcp://localhost:60706";
1: 
1:     protected abstract Destination getDestination(Session session) throws JMSException;
1: 
1:     protected abstract MessageConsumer getConsumer(Connection connection) throws Exception;
1: 
1:     protected abstract void configureBroker(BrokerService answer) throws Exception;
1: 
0:     public void testSendFirstThenConsume() throws Exception{
0:         ConnectionFactory factory=createConnectionFactory();
0:         Connection consumerConnection=getConsumerConnection(factory);
0:         MessageConsumer consumer=getConsumer(consumerConnection);
1:         consumerConnection.close();
0:         Connection producerConnection=factory.createConnection();
1:         producerConnection.start();
0:         Session session=producerConnection.createSession(false,Session.AUTO_ACKNOWLEDGE);
0:         MessageProducer producer=session.createProducer(getDestination(session));
0:         List senderList=new ArrayList();
0:         for(int i=0;i<MESSAGE_COUNT;i++){
0:             Message msg=session.createTextMessage("test"+i);
1:             senderList.add(msg);
1:             producer.send(msg);
1:         }
1:         producerConnection.close();
1:         // now consume the messages
0:         consumerConnection=getConsumerConnection(factory);
1:         // create durable subs
0:         consumer=getConsumer(consumerConnection);
0:         List consumerList=new ArrayList();
0:         for(int i=0;i<MESSAGE_COUNT;i++){
0:             Message msg=consumer.receive();
1:             consumerList.add(msg);
1:         }
0:         assertEquals(senderList,consumerList);
1:         consumerConnection.close();
1:     }
1: 
0:     public void testSendWhilstConsume() throws Exception{
0:         ConnectionFactory factory=createConnectionFactory();
0:         Connection consumerConnection=getConsumerConnection(factory);
1:         // create durable subs
0:         MessageConsumer consumer=getConsumer(consumerConnection);
1:         consumerConnection.close();
0:         Connection producerConnection=factory.createConnection();
1:         producerConnection.start();
0:         Session session=producerConnection.createSession(false,Session.AUTO_ACKNOWLEDGE);
0:         MessageProducer producer=session.createProducer(getDestination(session));
0:         List senderList=new ArrayList();
0:         for(int i=0;i<MESSAGE_COUNT/10;i++){
0:             TextMessage msg=session.createTextMessage("test"+i);
1:             senderList.add(msg);
1:             producer.send(msg);
1:         }
1:         // now consume the messages
0:         consumerConnection=getConsumerConnection(factory);
1:         // create durable subs
0:         consumer=getConsumer(consumerConnection);
0:         final List consumerList=new ArrayList();
0:         final CountDownLatch latch=new CountDownLatch(1);
0:         consumer.setMessageListener(new MessageListener(){
1: 
0:             public void onMessage(Message msg){
0:                 try{
1:                     // sleep to act as a slow consumer
1:                     // which will force a mix of direct and polled dispatching
1:                     // using the cursor on the broker
1:                     Thread.sleep(50);
0:                 }catch(Exception e){
0:                     // TODO Auto-generated catch block
1:                     e.printStackTrace();
1:                 }
1:                 consumerList.add(msg);
0:                 if(consumerList.size()==MESSAGE_COUNT){
1:                     latch.countDown();
1:                 }
1:             }
1:         });
0:         for(int i=MESSAGE_COUNT/10;i<MESSAGE_COUNT;i++){
0:             TextMessage msg=session.createTextMessage("test"+i);
1:             senderList.add(msg);
1:             producer.send(msg);
1:         }
0:         latch.await(300000,TimeUnit.MILLISECONDS);
0:         assertEquals("Still dipatching - count down latch not sprung",latch.getCount(),0);
0:         assertEquals("cosumerList - expected: "+MESSAGE_COUNT+" but was: "+consumerList.size(),consumerList.size(),
0:                 senderList.size());
0:         assertEquals(senderList,consumerList);
1:         producerConnection.close();
1:         consumerConnection.close();
1:     }
1: 
0:     protected Connection getConsumerConnection(ConnectionFactory fac) throws JMSException{
0:         Connection connection=fac.createConnection();
1:         connection.setClientID("testConsumer");
1:         connection.start();
1:         return connection;
1:     }
1: 
0:     protected void setUp() throws Exception{
0:         if(broker==null){
0:             broker=createBroker();
1:         }
1:         super.setUp();
1:     }
1: 
0:     protected void tearDown() throws Exception{
1:         super.tearDown();
0:         if(broker!=null){
1:             broker.stop();
1:         }
1:     }
1: 
0:     protected ActiveMQConnectionFactory createConnectionFactory() throws Exception{
0:         ActiveMQConnectionFactory cf=new ActiveMQConnectionFactory(bindAddress);
0:         Properties props=new Properties();
0:         props.setProperty("prefetchPolicy.durableTopicPrefetch",""+PREFETCH_SIZE);
0:         props.setProperty("prefetchPolicy.optimizeDurableTopicPrefetch",""+PREFETCH_SIZE);
0:         props.setProperty("prefetchPolicy.queuePrefetch",""+PREFETCH_SIZE);
1:         cf.setProperties(props);
1:         return cf;
1:     }
1: 
0:     protected BrokerService createBroker() throws Exception{
0:         BrokerService answer=new BrokerService();
1:         configureBroker(answer);
1:         answer.start();
1:         return answer;
1:     }
1: }
author:Gary Tully
-------------------------------------------------------------------------------
commit:3c32abd
/////////////////////////////////////////////////////////////////////////
0: import javax.jms.DeliveryMode;
/////////////////////////////////////////////////////////////////////////
0: 
0: import junit.framework.Test;
0: import org.apache.activemq.CombinationTestSupport;
0: import org.apache.activemq.broker.BrokerTest;
0: import org.apache.activemq.broker.region.Queue;
1: public abstract class CursorSupport extends CombinationTestSupport {
1:     public int MESSAGE_COUNT = 500;
1:     public int PREFETCH_SIZE = 50;
/////////////////////////////////////////////////////////////////////////
0:     public void testSendFirstThenConsume() throws Exception {
/////////////////////////////////////////////////////////////////////////
0: 
1:     public void initCombosForTestSendWhilstConsume() {
1:         addCombinationValues("MESSAGE_COUNT", new Object[] {Integer.valueOf(400),
1:                                                            Integer.valueOf(500)});
1:         addCombinationValues("PREFETCH_SIZE", new Object[] {Integer.valueOf(100),
1:                 Integer.valueOf(50)});
0:     }
0: 
0:     public void testSendWhilstConsume() throws Exception {
/////////////////////////////////////////////////////////////////////////
0:     
author:James Strachan
-------------------------------------------------------------------------------
commit:b19f17c
/////////////////////////////////////////////////////////////////////////
0: 
/////////////////////////////////////////////////////////////////////////
0:                log.error("BAD MATCH AT POS " + i);
0:                log.error(sent);
0:                log.error(consumed);
0:                log.error("\n\n\n\n\n");
0:                    log.error(consumerList.get(j));
============================================================================