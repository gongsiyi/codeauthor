1:1236bbf: /**
1:1236bbf:  * Licensed to the Apache Software Foundation (ASF) under one or more
1:1236bbf:  * contributor license agreements.  See the NOTICE file distributed with
1:1236bbf:  * this work for additional information regarding copyright ownership.
1:1236bbf:  * The ASF licenses this file to You under the Apache License, Version 2.0
1:1236bbf:  * (the "License"); you may not use this file except in compliance with
1:1236bbf:  * the License.  You may obtain a copy of the License at
1:1236bbf:  *
1:1236bbf:  *      http://www.apache.org/licenses/LICENSE-2.0
1:1236bbf:  *
1:1236bbf:  * Unless required by applicable law or agreed to in writing, software
1:1236bbf:  * distributed under the License is distributed on an "AS IS" BASIS,
1:1236bbf:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:1236bbf:  * See the License for the specific language governing permissions and
1:1236bbf:  * limitations under the License.
1:1236bbf:  */
1:1236bbf: package org.apache.activemq.transport.stomp.util;
1:1236bbf: 
1:1236bbf: import java.io.File;
1:1236bbf: import java.io.InputStream;
1:1236bbf: import java.net.MalformedURLException;
1:1236bbf: import java.security.KeyStore;
1:1236bbf: import java.security.NoSuchAlgorithmException;
1:1236bbf: import java.security.SecureRandom;
1:1236bbf: import java.util.ArrayList;
1:1236bbf: import java.util.Arrays;
1:1236bbf: import java.util.Collection;
1:1236bbf: 
1:1236bbf: import javax.annotation.PostConstruct;
1:1236bbf: import javax.net.ssl.KeyManager;
1:1236bbf: import javax.net.ssl.KeyManagerFactory;
1:1236bbf: import javax.net.ssl.TrustManager;
1:1236bbf: import javax.net.ssl.TrustManagerFactory;
1:1236bbf: 
1:1236bbf: import org.apache.activemq.broker.SslContext;
1:1236bbf: import org.springframework.core.io.ClassPathResource;
1:1236bbf: import org.springframework.core.io.FileSystemResource;
1:1236bbf: import org.springframework.core.io.Resource;
1:1236bbf: import org.springframework.core.io.UrlResource;
1:1236bbf: import org.springframework.util.ResourceUtils;
1:1236bbf: 
1:1236bbf: /**
1:1236bbf:  * Extends the SslContext so that it's easier to configure from spring.
1:1236bbf:  */
1:1236bbf: public class ResourceLoadingSslContext extends SslContext {
1:1236bbf: 
1:1236bbf:     private String keyStoreType="jks";
1:1236bbf:     private String trustStoreType="jks";
1:1236bbf: 
1:1236bbf:     private String secureRandomAlgorithm="SHA1PRNG";
1:1236bbf:     private String keyStoreAlgorithm=KeyManagerFactory.getDefaultAlgorithm();
1:1236bbf:     private String trustStoreAlgorithm=TrustManagerFactory.getDefaultAlgorithm();
1:1236bbf: 
1:1236bbf:     private String keyStore;
1:1236bbf:     private String trustStore;
1:1236bbf: 
1:1236bbf:     private String keyStoreKeyPassword;
1:1236bbf:     private String keyStorePassword;
1:1236bbf:     private String trustStorePassword;
1:1236bbf: 
1:1236bbf:     /**
1:174fe15:      * JSR-250 callback wrapper; converts checked exceptions to runtime exceptions
1:174fe15:      *
1:174fe15:      * delegates to afterPropertiesSet, done to prevent backwards incompatible signature change.
1:174fe15:      */
1:174fe15:     @PostConstruct
1:174fe15:     private void postConstruct() {
1:174fe15:         try {
1:174fe15:             afterPropertiesSet();
1:174fe15:         } catch (Exception ex) {
1:174fe15:             throw new RuntimeException(ex);
1:174fe15:         }
1:174fe15:     }
1:174fe15: 
1:174fe15:     /**
1:1236bbf:      *
1:1236bbf:      * @throws Exception
1:1236bbf:      * @org.apache.xbean.InitMethod
1:1236bbf:      */
1:1236bbf:     public void afterPropertiesSet() throws Exception {
1:1236bbf:         keyManagers.addAll(createKeyManagers());
1:1236bbf:         trustManagers.addAll(createTrustManagers());
1:1236bbf:         if( secureRandom == null ) {
1:1236bbf:             secureRandom = createSecureRandom();
1:1236bbf:         }
1:1236bbf:     }
1:1236bbf: 
1:1236bbf:     private SecureRandom createSecureRandom() throws NoSuchAlgorithmException {
1:1236bbf:         return SecureRandom.getInstance(secureRandomAlgorithm);
1:1236bbf:     }
1:1236bbf: 
1:1236bbf:     private Collection<TrustManager> createTrustManagers() throws Exception {
1:1236bbf:         KeyStore ks = createTrustManagerKeyStore();
1:1236bbf:         if( ks ==null ) {
1:1236bbf:             return new ArrayList<TrustManager>(0);
1:1236bbf:         }
1:1236bbf: 
1:1236bbf:         TrustManagerFactory tmf  = TrustManagerFactory.getInstance(trustStoreAlgorithm);
1:1236bbf:         tmf.init(ks);
1:1236bbf:         return Arrays.asList(tmf.getTrustManagers());
1:1236bbf:     }
1:1236bbf: 
1:1236bbf:     private Collection<KeyManager> createKeyManagers() throws Exception {
1:1236bbf:         KeyStore ks = createKeyManagerKeyStore();
1:1236bbf:         if( ks ==null ) {
1:1236bbf:             return new ArrayList<KeyManager>(0);
1:1236bbf:         }
1:1236bbf: 
1:1236bbf:         KeyManagerFactory tmf  = KeyManagerFactory.getInstance(keyStoreAlgorithm);
1:1236bbf:         tmf.init(ks, keyStoreKeyPassword == null ? (keyStorePassword==null? null : keyStorePassword.toCharArray()) : keyStoreKeyPassword.toCharArray());
1:1236bbf:         return Arrays.asList(tmf.getKeyManagers());
1:1236bbf:     }
1:1236bbf: 
1:1236bbf:     private KeyStore createTrustManagerKeyStore() throws Exception {
1:1236bbf:         if( trustStore ==null ) {
1:1236bbf:             return null;
1:1236bbf:         }
1:1236bbf: 
1:1236bbf:         KeyStore ks = KeyStore.getInstance(trustStoreType);
1:1236bbf:         InputStream is=resourceFromString(trustStore).getInputStream();
1:1236bbf:         try {
1:1236bbf:             ks.load(is, trustStorePassword==null? null : trustStorePassword.toCharArray());
1:1236bbf:         } finally {
1:1236bbf:             is.close();
1:1236bbf:         }
1:1236bbf:         return ks;
1:1236bbf:     }
1:1236bbf: 
1:1236bbf:     private KeyStore createKeyManagerKeyStore() throws Exception {
1:1236bbf:         if( keyStore ==null ) {
1:1236bbf:             return null;
1:1236bbf:         }
1:1236bbf: 
1:1236bbf:         KeyStore ks = KeyStore.getInstance(keyStoreType);
1:1236bbf:         InputStream is=resourceFromString(keyStore).getInputStream();
1:1236bbf:         try {
1:1236bbf:             ks.load(is, keyStorePassword==null? null : keyStorePassword.toCharArray());
1:1236bbf:         } finally {
1:1236bbf:             is.close();
1:1236bbf:         }
1:1236bbf:         return ks;
1:1236bbf:     }
1:1236bbf: 
1:1236bbf:     public String getTrustStoreType() {
1:1236bbf:         return trustStoreType;
1:1236bbf:     }
1:1236bbf: 
1:1236bbf:     public String getKeyStoreType() {
1:1236bbf:         return keyStoreType;
1:1236bbf:     }
1:1236bbf: 
1:1236bbf:     public String getKeyStore() {
1:1236bbf:         return keyStore;
1:1236bbf:     }
1:1236bbf: 
1:1236bbf:     public void setKeyStore(String keyStore) throws MalformedURLException {
1:1236bbf:         this.keyStore = keyStore;
1:1236bbf:     }
1:1236bbf: 
1:1236bbf:     public String getTrustStore() {
1:1236bbf:         return trustStore;
1:1236bbf:     }
1:1236bbf: 
1:1236bbf:     public void setTrustStore(String trustStore) throws MalformedURLException {
1:1236bbf:         this.trustStore = trustStore;
1:1236bbf:     }
1:1236bbf: 
1:1236bbf:     public String getKeyStoreAlgorithm() {
1:1236bbf:         return keyStoreAlgorithm;
1:1236bbf:     }
1:1236bbf: 
1:1236bbf:     public void setKeyStoreAlgorithm(String keyAlgorithm) {
1:1236bbf:         this.keyStoreAlgorithm = keyAlgorithm;
1:1236bbf:     }
1:1236bbf: 
1:1236bbf:     public String getTrustStoreAlgorithm() {
1:1236bbf:         return trustStoreAlgorithm;
1:1236bbf:     }
1:1236bbf: 
1:1236bbf:     public void setTrustStoreAlgorithm(String trustAlgorithm) {
1:1236bbf:         this.trustStoreAlgorithm = trustAlgorithm;
1:1236bbf:     }
1:1236bbf: 
1:1236bbf:     public String getKeyStoreKeyPassword() {
1:1236bbf:         return keyStoreKeyPassword;
1:1236bbf:     }
1:1236bbf: 
1:1236bbf:     public void setKeyStoreKeyPassword(String keyPassword) {
1:1236bbf:         this.keyStoreKeyPassword = keyPassword;
1:1236bbf:     }
1:1236bbf: 
1:1236bbf:     public String getKeyStorePassword() {
1:1236bbf:         return keyStorePassword;
1:1236bbf:     }
1:1236bbf: 
1:1236bbf:     public void setKeyStorePassword(String keyPassword) {
1:1236bbf:         this.keyStorePassword = keyPassword;
1:1236bbf:     }
1:1236bbf: 
1:1236bbf:     public String getTrustStorePassword() {
1:1236bbf:         return trustStorePassword;
1:1236bbf:     }
1:1236bbf: 
1:1236bbf:     public void setTrustStorePassword(String trustPassword) {
1:1236bbf:         this.trustStorePassword = trustPassword;
1:1236bbf:     }
1:1236bbf: 
1:1236bbf:     public void setKeyStoreType(String keyType) {
1:1236bbf:         this.keyStoreType = keyType;
1:1236bbf:     }
1:1236bbf: 
1:1236bbf:     public void setTrustStoreType(String trustType) {
1:1236bbf:         this.trustStoreType = trustType;
1:1236bbf:     }
1:1236bbf: 
1:1236bbf:     public String getSecureRandomAlgorithm() {
1:1236bbf:         return secureRandomAlgorithm;
1:1236bbf:     }
1:1236bbf: 
1:1236bbf:     public void setSecureRandomAlgorithm(String secureRandomAlgorithm) {
1:1236bbf:         this.secureRandomAlgorithm = secureRandomAlgorithm;
1:1236bbf:     }
1:1236bbf: 
1:1236bbf:     public static Resource resourceFromString(String uri) throws MalformedURLException {
1:1236bbf:         Resource resource;
1:1236bbf:         File file = new File(uri);
1:1236bbf:         if (file.exists()) {
1:1236bbf:             resource = new FileSystemResource(uri);
1:1236bbf:         } else if (ResourceUtils.isUrl(uri)) {
1:1236bbf:             resource = new UrlResource(uri);
1:1236bbf:         } else {
1:1236bbf:             resource = new ClassPathResource(uri);
1:1236bbf:         }
1:1236bbf:         return resource;
1:1236bbf:     }
1:1236bbf: }
============================================================================
author:Timothy A. Bish
-------------------------------------------------------------------------------
commit:174fe15
/////////////////////////////////////////////////////////////////////////
1:      * JSR-250 callback wrapper; converts checked exceptions to runtime exceptions
1:      *
1:      * delegates to afterPropertiesSet, done to prevent backwards incompatible signature change.
1:      */
1:     @PostConstruct
1:     private void postConstruct() {
1:         try {
1:             afterPropertiesSet();
1:         } catch (Exception ex) {
1:             throw new RuntimeException(ex);
1:         }
1:     }
1: 
1:     /**
commit:1236bbf
/////////////////////////////////////////////////////////////////////////
1: /**
1:  * Licensed to the Apache Software Foundation (ASF) under one or more
1:  * contributor license agreements.  See the NOTICE file distributed with
1:  * this work for additional information regarding copyright ownership.
1:  * The ASF licenses this file to You under the Apache License, Version 2.0
1:  * (the "License"); you may not use this file except in compliance with
1:  * the License.  You may obtain a copy of the License at
1:  *
1:  *      http://www.apache.org/licenses/LICENSE-2.0
1:  *
1:  * Unless required by applicable law or agreed to in writing, software
1:  * distributed under the License is distributed on an "AS IS" BASIS,
1:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:  * See the License for the specific language governing permissions and
1:  * limitations under the License.
1:  */
1: package org.apache.activemq.transport.stomp.util;
1: 
1: import java.io.File;
1: import java.io.InputStream;
1: import java.net.MalformedURLException;
1: import java.security.KeyStore;
1: import java.security.NoSuchAlgorithmException;
1: import java.security.SecureRandom;
1: import java.util.ArrayList;
1: import java.util.Arrays;
1: import java.util.Collection;
1: 
1: import javax.annotation.PostConstruct;
1: import javax.net.ssl.KeyManager;
1: import javax.net.ssl.KeyManagerFactory;
1: import javax.net.ssl.TrustManager;
1: import javax.net.ssl.TrustManagerFactory;
1: 
1: import org.apache.activemq.broker.SslContext;
1: import org.springframework.core.io.ClassPathResource;
1: import org.springframework.core.io.FileSystemResource;
1: import org.springframework.core.io.Resource;
1: import org.springframework.core.io.UrlResource;
1: import org.springframework.util.ResourceUtils;
1: 
1: /**
1:  * Extends the SslContext so that it's easier to configure from spring.
1:  */
1: public class ResourceLoadingSslContext extends SslContext {
1: 
1:     private String keyStoreType="jks";
1:     private String trustStoreType="jks";
1: 
1:     private String secureRandomAlgorithm="SHA1PRNG";
1:     private String keyStoreAlgorithm=KeyManagerFactory.getDefaultAlgorithm();
1:     private String trustStoreAlgorithm=TrustManagerFactory.getDefaultAlgorithm();
1: 
1:     private String keyStore;
1:     private String trustStore;
1: 
1:     private String keyStoreKeyPassword;
1:     private String keyStorePassword;
1:     private String trustStorePassword;
1: 
1:     /**
1:      *
1:      * @throws Exception
1:      * @org.apache.xbean.InitMethod
1:      */
0:     @PostConstruct
1:     public void afterPropertiesSet() throws Exception {
1:         keyManagers.addAll(createKeyManagers());
1:         trustManagers.addAll(createTrustManagers());
1:         if( secureRandom == null ) {
1:             secureRandom = createSecureRandom();
1:         }
1:     }
1: 
1:     private SecureRandom createSecureRandom() throws NoSuchAlgorithmException {
1:         return SecureRandom.getInstance(secureRandomAlgorithm);
1:     }
1: 
1:     private Collection<TrustManager> createTrustManagers() throws Exception {
1:         KeyStore ks = createTrustManagerKeyStore();
1:         if( ks ==null ) {
1:             return new ArrayList<TrustManager>(0);
1:         }
1: 
1:         TrustManagerFactory tmf  = TrustManagerFactory.getInstance(trustStoreAlgorithm);
1:         tmf.init(ks);
1:         return Arrays.asList(tmf.getTrustManagers());
1:     }
1: 
1:     private Collection<KeyManager> createKeyManagers() throws Exception {
1:         KeyStore ks = createKeyManagerKeyStore();
1:         if( ks ==null ) {
1:             return new ArrayList<KeyManager>(0);
1:         }
1: 
1:         KeyManagerFactory tmf  = KeyManagerFactory.getInstance(keyStoreAlgorithm);
1:         tmf.init(ks, keyStoreKeyPassword == null ? (keyStorePassword==null? null : keyStorePassword.toCharArray()) : keyStoreKeyPassword.toCharArray());
1:         return Arrays.asList(tmf.getKeyManagers());
1:     }
1: 
1:     private KeyStore createTrustManagerKeyStore() throws Exception {
1:         if( trustStore ==null ) {
1:             return null;
1:         }
1: 
1:         KeyStore ks = KeyStore.getInstance(trustStoreType);
1:         InputStream is=resourceFromString(trustStore).getInputStream();
1:         try {
1:             ks.load(is, trustStorePassword==null? null : trustStorePassword.toCharArray());
1:         } finally {
1:             is.close();
1:         }
1:         return ks;
1:     }
1: 
1:     private KeyStore createKeyManagerKeyStore() throws Exception {
1:         if( keyStore ==null ) {
1:             return null;
1:         }
1: 
1:         KeyStore ks = KeyStore.getInstance(keyStoreType);
1:         InputStream is=resourceFromString(keyStore).getInputStream();
1:         try {
1:             ks.load(is, keyStorePassword==null? null : keyStorePassword.toCharArray());
1:         } finally {
1:             is.close();
1:         }
1:         return ks;
1:     }
1: 
1:     public String getTrustStoreType() {
1:         return trustStoreType;
1:     }
1: 
1:     public String getKeyStoreType() {
1:         return keyStoreType;
1:     }
1: 
1:     public String getKeyStore() {
1:         return keyStore;
1:     }
1: 
1:     public void setKeyStore(String keyStore) throws MalformedURLException {
1:         this.keyStore = keyStore;
1:     }
1: 
1:     public String getTrustStore() {
1:         return trustStore;
1:     }
1: 
1:     public void setTrustStore(String trustStore) throws MalformedURLException {
1:         this.trustStore = trustStore;
1:     }
1: 
1:     public String getKeyStoreAlgorithm() {
1:         return keyStoreAlgorithm;
1:     }
1: 
1:     public void setKeyStoreAlgorithm(String keyAlgorithm) {
1:         this.keyStoreAlgorithm = keyAlgorithm;
1:     }
1: 
1:     public String getTrustStoreAlgorithm() {
1:         return trustStoreAlgorithm;
1:     }
1: 
1:     public void setTrustStoreAlgorithm(String trustAlgorithm) {
1:         this.trustStoreAlgorithm = trustAlgorithm;
1:     }
1: 
1:     public String getKeyStoreKeyPassword() {
1:         return keyStoreKeyPassword;
1:     }
1: 
1:     public void setKeyStoreKeyPassword(String keyPassword) {
1:         this.keyStoreKeyPassword = keyPassword;
1:     }
1: 
1:     public String getKeyStorePassword() {
1:         return keyStorePassword;
1:     }
1: 
1:     public void setKeyStorePassword(String keyPassword) {
1:         this.keyStorePassword = keyPassword;
1:     }
1: 
1:     public String getTrustStorePassword() {
1:         return trustStorePassword;
1:     }
1: 
1:     public void setTrustStorePassword(String trustPassword) {
1:         this.trustStorePassword = trustPassword;
1:     }
1: 
1:     public void setKeyStoreType(String keyType) {
1:         this.keyStoreType = keyType;
1:     }
1: 
1:     public void setTrustStoreType(String trustType) {
1:         this.trustStoreType = trustType;
1:     }
1: 
1:     public String getSecureRandomAlgorithm() {
1:         return secureRandomAlgorithm;
1:     }
1: 
1:     public void setSecureRandomAlgorithm(String secureRandomAlgorithm) {
1:         this.secureRandomAlgorithm = secureRandomAlgorithm;
1:     }
1: 
1:     public static Resource resourceFromString(String uri) throws MalformedURLException {
1:         Resource resource;
1:         File file = new File(uri);
1:         if (file.exists()) {
1:             resource = new FileSystemResource(uri);
1:         } else if (ResourceUtils.isUrl(uri)) {
1:             resource = new UrlResource(uri);
1:         } else {
1:             resource = new ClassPathResource(uri);
1:         }
1:         return resource;
1:     }
1: }
============================================================================