1:4d6f4d7: /*
2:4d6f4d7:  *
1:4d6f4d7:  * Licensed to the Apache Software Foundation (ASF) under one
1:4d6f4d7:  * or more contributor license agreements.  See the NOTICE file
1:4d6f4d7:  * distributed with this work for additional information
1:4d6f4d7:  * regarding copyright ownership.  The ASF licenses this file
1:4d6f4d7:  * to you under the Apache License, Version 2.0 (the
1:4d6f4d7:  * "License"); you may not use this file except in compliance
1:4d6f4d7:  * with the License.  You may obtain a copy of the License at
1:4d6f4d7:  *
1:4d6f4d7:  *   http://www.apache.org/licenses/LICENSE-2.0
1:4d6f4d7:  *
1:4d6f4d7:  * Unless required by applicable law or agreed to in writing,
1:4d6f4d7:  * software distributed under the License is distributed on an
1:4d6f4d7:  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
1:4d6f4d7:  * KIND, either express or implied.  See the License for the
1:4d6f4d7:  * specific language governing permissions and limitations
1:4d6f4d7:  * under the License.
1:4d6f4d7:  *
1:4d6f4d7:  */
1:4d6f4d7: package org.apache.activemq.transport.amqp.message;
1:4d6f4d7: 
1:4d6f4d7: import java.nio.ByteBuffer;
1:4d6f4d7: import java.util.UUID;
1:4d6f4d7: 
1:4d6f4d7: import org.apache.activemq.transport.amqp.AmqpProtocolException;
1:4d6f4d7: import org.apache.qpid.proton.amqp.Binary;
1:4d6f4d7: import org.apache.qpid.proton.amqp.UnsignedLong;
1:4d6f4d7: 
1:4d6f4d7: /**
1:4d6f4d7:  * Helper class for identifying and converting message-id and correlation-id values between
1:4d6f4d7:  * the AMQP types and the Strings values used by JMS.
1:4d6f4d7:  *
1:4d6f4d7:  * <p>AMQP messages allow for 4 types of message-id/correlation-id: message-id-string, message-id-binary,
1:4d6f4d7:  * message-id-uuid, or message-id-ulong. In order to accept or return a string representation of these
1:4d6f4d7:  * for interoperability with other AMQP clients, the following encoding can be used after removing or
1:4d6f4d7:  * before adding the "ID:" prefix used for a JMSMessageID value:<br>
1:4d6f4d7:  *
1:4d6f4d7:  * {@literal "AMQP_BINARY:<hex representation of binary content>"}<br>
1:4d6f4d7:  * {@literal "AMQP_UUID:<string representation of uuid>"}<br>
1:4d6f4d7:  * {@literal "AMQP_ULONG:<string representation of ulong>"}<br>
1:4d6f4d7:  * {@literal "AMQP_STRING:<string>"}<br>
1:4d6f4d7:  *
1:4d6f4d7:  * <p>The AMQP_STRING encoding exists only for escaping message-id-string values that happen to begin
1:4d6f4d7:  * with one of the encoding prefixes (including AMQP_STRING itself). It MUST NOT be used otherwise.
1:4d6f4d7:  *
1:4d6f4d7:  * <p>When provided a string for conversion which attempts to identify itself as an encoded binary, uuid, or
1:4d6f4d7:  * ulong but can't be converted into the indicated format, an exception will be thrown.
1:4d6f4d7:  */
1:4d6f4d7: public class AMQPMessageIdHelper {
1:4d6f4d7: 
1:4d6f4d7:     public static final AMQPMessageIdHelper INSTANCE = new AMQPMessageIdHelper();
1:4d6f4d7: 
1:4d6f4d7:     public static final String AMQP_STRING_PREFIX = "AMQP_STRING:";
1:4d6f4d7:     public static final String AMQP_UUID_PREFIX = "AMQP_UUID:";
1:4d6f4d7:     public static final String AMQP_ULONG_PREFIX = "AMQP_ULONG:";
1:4d6f4d7:     public static final String AMQP_BINARY_PREFIX = "AMQP_BINARY:";
1:4d6f4d7: 
1:4d6f4d7:     private static final int AMQP_UUID_PREFIX_LENGTH = AMQP_UUID_PREFIX.length();
1:4d6f4d7:     private static final int AMQP_ULONG_PREFIX_LENGTH = AMQP_ULONG_PREFIX.length();
1:4d6f4d7:     private static final int AMQP_STRING_PREFIX_LENGTH = AMQP_STRING_PREFIX.length();
1:4d6f4d7:     private static final int AMQP_BINARY_PREFIX_LENGTH = AMQP_BINARY_PREFIX.length();
1:4d6f4d7:     private static final char[] HEX_CHARS = "0123456789ABCDEF".toCharArray();
1:4d6f4d7: 
1:4d6f4d7:     /**
1:4d6f4d7:      * Takes the provided AMQP messageId style object, and convert it to a base string.
1:4d6f4d7:      * Encodes type information as a prefix where necessary to convey or escape the type
1:4d6f4d7:      * of the provided object.
1:4d6f4d7:      *
1:4d6f4d7:      * @param messageId
1:4d6f4d7:      *      the raw messageId object to process
1:4d6f4d7:      *
1:4d6f4d7:      * @return the base string to be used in creating the actual id.
1:4d6f4d7:      */
1:4d6f4d7:     public String toBaseMessageIdString(Object messageId) {
1:4d6f4d7:         if (messageId == null) {
1:4d6f4d7:             return null;
1:4d6f4d7:         } else if (messageId instanceof String) {
1:4d6f4d7:             String stringId = (String) messageId;
1:4d6f4d7: 
1:4d6f4d7:             // If the given string has a type encoding prefix,
1:4d6f4d7:             // we need to escape it as an encoded string (even if
1:4d6f4d7:             // the existing encoding prefix was also for string)
1:4d6f4d7:             if (hasTypeEncodingPrefix(stringId)) {
1:4d6f4d7:                 return AMQP_STRING_PREFIX + stringId;
1:4d6f4d7:             } else {
1:4d6f4d7:                 return stringId;
1:4d6f4d7:             }
1:4d6f4d7:         } else if (messageId instanceof UUID) {
1:4d6f4d7:             return AMQP_UUID_PREFIX + messageId.toString();
1:4d6f4d7:         } else if (messageId instanceof UnsignedLong) {
1:4d6f4d7:             return AMQP_ULONG_PREFIX + messageId.toString();
1:4d6f4d7:         } else if (messageId instanceof Binary) {
1:4d6f4d7:             ByteBuffer dup = ((Binary) messageId).asByteBuffer();
1:4d6f4d7: 
1:4d6f4d7:             byte[] bytes = new byte[dup.remaining()];
1:4d6f4d7:             dup.get(bytes);
1:4d6f4d7: 
1:4d6f4d7:             String hex = convertBinaryToHexString(bytes);
1:4d6f4d7: 
1:4d6f4d7:             return AMQP_BINARY_PREFIX + hex;
1:4d6f4d7:         } else {
1:4d6f4d7:             throw new IllegalArgumentException("Unsupported type provided: " + messageId.getClass());
1:4d6f4d7:         }
1:4d6f4d7:     }
1:4d6f4d7: 
1:4d6f4d7:     /**
1:4d6f4d7:      * Takes the provided base id string and return the appropriate amqp messageId style object.
1:4d6f4d7:      * Converts the type based on any relevant encoding information found as a prefix.
1:4d6f4d7:      *
1:4d6f4d7:      * @param baseId
1:4d6f4d7:      *      the object to be converted to an AMQP MessageId value.
1:4d6f4d7:      *
1:4d6f4d7:      * @return the AMQP messageId style object
1:4d6f4d7:      *
1:4d6f4d7:      * @throws AmqpProtocolException if the provided baseId String indicates an encoded type but can't be converted to that type.
1:4d6f4d7:      */
1:4d6f4d7:     public Object toIdObject(String baseId) throws AmqpProtocolException {
1:4d6f4d7:         if (baseId == null) {
1:4d6f4d7:             return null;
1:4d6f4d7:         }
1:4d6f4d7: 
1:4d6f4d7:         try {
1:4d6f4d7:             if (hasAmqpUuidPrefix(baseId)) {
1:4d6f4d7:                 String uuidString = strip(baseId, AMQP_UUID_PREFIX_LENGTH);
1:4d6f4d7:                 return UUID.fromString(uuidString);
1:4d6f4d7:             } else if (hasAmqpUlongPrefix(baseId)) {
1:4d6f4d7:                 String longString = strip(baseId, AMQP_ULONG_PREFIX_LENGTH);
1:4d6f4d7:                 return UnsignedLong.valueOf(longString);
1:4d6f4d7:             } else if (hasAmqpStringPrefix(baseId)) {
1:4d6f4d7:                 return strip(baseId, AMQP_STRING_PREFIX_LENGTH);
1:4d6f4d7:             } else if (hasAmqpBinaryPrefix(baseId)) {
1:4d6f4d7:                 String hexString = strip(baseId, AMQP_BINARY_PREFIX_LENGTH);
1:4d6f4d7:                 byte[] bytes = convertHexStringToBinary(hexString);
1:4d6f4d7:                 return new Binary(bytes);
1:4d6f4d7:             } else {
1:4d6f4d7:                 // We have a string without any type prefix, transmit it as-is.
1:4d6f4d7:                 return baseId;
1:4d6f4d7:             }
1:4d6f4d7:         } catch (IllegalArgumentException e) {
1:4d6f4d7:             throw new AmqpProtocolException("Unable to convert ID value");
1:4d6f4d7:         }
1:4d6f4d7:     }
1:4d6f4d7: 
1:4d6f4d7:     /**
1:4d6f4d7:      * Convert the provided hex-string into a binary representation where each byte represents
1:4d6f4d7:      * two characters of the hex string.
1:4d6f4d7:      *
1:4d6f4d7:      * The hex characters may be upper or lower case.
1:4d6f4d7:      *
1:4d6f4d7:      * @param hexString
1:4d6f4d7:      *      string to convert to a binary value.
1:4d6f4d7:      *
1:4d6f4d7:      * @return a byte array containing the binary representation
1:4d6f4d7:      *
1:4d6f4d7:      * @throws IllegalArgumentException if the provided String is a non-even length or contains
1:4d6f4d7:      *                                  non-hex characters
1:4d6f4d7:      */
1:4d6f4d7:     public byte[] convertHexStringToBinary(String hexString) throws IllegalArgumentException {
1:4d6f4d7:         int length = hexString.length();
1:4d6f4d7: 
1:4d6f4d7:         // As each byte needs two characters in the hex encoding, the string must be an even length.
1:4d6f4d7:         if (length % 2 != 0) {
1:4d6f4d7:             throw new IllegalArgumentException("The provided hex String must be an even length, but was of length " + length + ": " + hexString);
1:4d6f4d7:         }
1:4d6f4d7: 
1:4d6f4d7:         byte[] binary = new byte[length / 2];
1:4d6f4d7: 
1:4d6f4d7:         for (int i = 0; i < length; i += 2) {
1:4d6f4d7:             char highBitsChar = hexString.charAt(i);
1:4d6f4d7:             char lowBitsChar = hexString.charAt(i + 1);
1:4d6f4d7: 
1:4d6f4d7:             int highBits = hexCharToInt(highBitsChar, hexString) << 4;
1:4d6f4d7:             int lowBits = hexCharToInt(lowBitsChar, hexString);
1:4d6f4d7: 
1:4d6f4d7:             binary[i / 2] = (byte) (highBits + lowBits);
1:4d6f4d7:         }
1:4d6f4d7: 
1:4d6f4d7:         return binary;
1:4d6f4d7:     }
1:4d6f4d7: 
1:4d6f4d7:     /**
1:4d6f4d7:      * Convert the provided binary into a hex-string representation where each character
1:4d6f4d7:      * represents 4 bits of the provided binary, i.e each byte requires two characters.
1:4d6f4d7:      *
1:4d6f4d7:      * The returned hex characters are upper-case.
1:4d6f4d7:      *
1:4d6f4d7:      * @param bytes
1:4d6f4d7:      *      the binary value to convert to a hex String instance.
1:4d6f4d7:      *
1:4d6f4d7:      * @return a String containing a hex representation of the bytes
1:4d6f4d7:      */
1:4d6f4d7:     public String convertBinaryToHexString(byte[] bytes) {
1:4d6f4d7:         // Each byte is represented as 2 chars
1:4d6f4d7:         StringBuilder builder = new StringBuilder(bytes.length * 2);
1:4d6f4d7: 
1:4d6f4d7:         for (byte b : bytes) {
1:4d6f4d7:             // The byte will be expanded to int before shifting, replicating the
1:4d6f4d7:             // sign bit, so mask everything beyond the first 4 bits afterwards
1:4d6f4d7:             int highBitsInt = (b >> 4) & 0xF;
1:4d6f4d7:             // We only want the first 4 bits
1:4d6f4d7:             int lowBitsInt = b & 0xF;
1:4d6f4d7: 
1:4d6f4d7:             builder.append(HEX_CHARS[highBitsInt]);
1:4d6f4d7:             builder.append(HEX_CHARS[lowBitsInt]);
1:4d6f4d7:         }
1:4d6f4d7: 
1:4d6f4d7:         return builder.toString();
1:4d6f4d7:     }
1:4d6f4d7: 
1:4d6f4d7:     //----- Internal implementation ------------------------------------------//
1:4d6f4d7: 
1:4d6f4d7:     private boolean hasTypeEncodingPrefix(String stringId) {
1:4d6f4d7:         return hasAmqpBinaryPrefix(stringId) || hasAmqpUuidPrefix(stringId) ||
1:4d6f4d7:                hasAmqpUlongPrefix(stringId) || hasAmqpStringPrefix(stringId);
1:4d6f4d7:     }
1:4d6f4d7: 
1:4d6f4d7:     private boolean hasAmqpStringPrefix(String stringId) {
1:4d6f4d7:         return stringId.startsWith(AMQP_STRING_PREFIX);
1:4d6f4d7:     }
1:4d6f4d7: 
1:4d6f4d7:     private boolean hasAmqpUlongPrefix(String stringId) {
1:4d6f4d7:         return stringId.startsWith(AMQP_ULONG_PREFIX);
1:4d6f4d7:     }
1:4d6f4d7: 
1:4d6f4d7:     private boolean hasAmqpUuidPrefix(String stringId) {
1:4d6f4d7:         return stringId.startsWith(AMQP_UUID_PREFIX);
1:4d6f4d7:     }
1:4d6f4d7: 
1:4d6f4d7:     private boolean hasAmqpBinaryPrefix(String stringId) {
1:4d6f4d7:         return stringId.startsWith(AMQP_BINARY_PREFIX);
1:4d6f4d7:     }
1:4d6f4d7: 
1:4d6f4d7:     private String strip(String id, int numChars) {
1:4d6f4d7:         return id.substring(numChars);
1:4d6f4d7:     }
1:4d6f4d7: 
1:4d6f4d7:     private int hexCharToInt(char ch, String orig) throws IllegalArgumentException {
1:4d6f4d7:         if (ch >= '0' && ch <= '9') {
1:4d6f4d7:             // subtract '0' to get difference in position as an int
1:4d6f4d7:             return ch - '0';
1:4d6f4d7:         } else if (ch >= 'A' && ch <= 'F') {
1:4d6f4d7:             // subtract 'A' to get difference in position as an int
1:4d6f4d7:             // and then add 10 for the offset of 'A'
1:4d6f4d7:             return ch - 'A' + 10;
1:4d6f4d7:         } else if (ch >= 'a' && ch <= 'f') {
1:4d6f4d7:             // subtract 'a' to get difference in position as an int
1:4d6f4d7:             // and then add 10 for the offset of 'a'
1:4d6f4d7:             return ch - 'a' + 10;
1:4d6f4d7:         }
1:4d6f4d7: 
1:4d6f4d7:         throw new IllegalArgumentException("The provided hex string contains non-hex character '" + ch + "': " + orig);
1:4d6f4d7:     }
1:4d6f4d7: }
============================================================================
author:Timothy Bish
-------------------------------------------------------------------------------
commit:16c487a
/////////////////////////////////////////////////////////////////////////
commit:4d6f4d7
/////////////////////////////////////////////////////////////////////////
1: /*
1:  *
1:  * Licensed to the Apache Software Foundation (ASF) under one
1:  * or more contributor license agreements.  See the NOTICE file
1:  * distributed with this work for additional information
1:  * regarding copyright ownership.  The ASF licenses this file
1:  * to you under the Apache License, Version 2.0 (the
1:  * "License"); you may not use this file except in compliance
1:  * with the License.  You may obtain a copy of the License at
1:  *
1:  *   http://www.apache.org/licenses/LICENSE-2.0
1:  *
1:  * Unless required by applicable law or agreed to in writing,
1:  * software distributed under the License is distributed on an
1:  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
1:  * KIND, either express or implied.  See the License for the
1:  * specific language governing permissions and limitations
1:  * under the License.
1:  *
1:  */
1: package org.apache.activemq.transport.amqp.message;
1: 
1: import java.nio.ByteBuffer;
1: import java.util.UUID;
1: 
1: import org.apache.activemq.transport.amqp.AmqpProtocolException;
1: import org.apache.qpid.proton.amqp.Binary;
1: import org.apache.qpid.proton.amqp.UnsignedLong;
1: 
1: /**
1:  * Helper class for identifying and converting message-id and correlation-id values between
1:  * the AMQP types and the Strings values used by JMS.
1:  *
1:  * <p>AMQP messages allow for 4 types of message-id/correlation-id: message-id-string, message-id-binary,
1:  * message-id-uuid, or message-id-ulong. In order to accept or return a string representation of these
1:  * for interoperability with other AMQP clients, the following encoding can be used after removing or
1:  * before adding the "ID:" prefix used for a JMSMessageID value:<br>
1:  *
1:  * {@literal "AMQP_BINARY:<hex representation of binary content>"}<br>
1:  * {@literal "AMQP_UUID:<string representation of uuid>"}<br>
1:  * {@literal "AMQP_ULONG:<string representation of ulong>"}<br>
1:  * {@literal "AMQP_STRING:<string>"}<br>
1:  *
1:  * <p>The AMQP_STRING encoding exists only for escaping message-id-string values that happen to begin
1:  * with one of the encoding prefixes (including AMQP_STRING itself). It MUST NOT be used otherwise.
1:  *
1:  * <p>When provided a string for conversion which attempts to identify itself as an encoded binary, uuid, or
1:  * ulong but can't be converted into the indicated format, an exception will be thrown.
1:  *
1:  */
1: public class AMQPMessageIdHelper {
1: 
1:     public static final AMQPMessageIdHelper INSTANCE = new AMQPMessageIdHelper();
1: 
1:     public static final String AMQP_STRING_PREFIX = "AMQP_STRING:";
1:     public static final String AMQP_UUID_PREFIX = "AMQP_UUID:";
1:     public static final String AMQP_ULONG_PREFIX = "AMQP_ULONG:";
1:     public static final String AMQP_BINARY_PREFIX = "AMQP_BINARY:";
1: 
1:     private static final int AMQP_UUID_PREFIX_LENGTH = AMQP_UUID_PREFIX.length();
1:     private static final int AMQP_ULONG_PREFIX_LENGTH = AMQP_ULONG_PREFIX.length();
1:     private static final int AMQP_STRING_PREFIX_LENGTH = AMQP_STRING_PREFIX.length();
1:     private static final int AMQP_BINARY_PREFIX_LENGTH = AMQP_BINARY_PREFIX.length();
1:     private static final char[] HEX_CHARS = "0123456789ABCDEF".toCharArray();
1: 
1:     /**
1:      * Takes the provided AMQP messageId style object, and convert it to a base string.
1:      * Encodes type information as a prefix where necessary to convey or escape the type
1:      * of the provided object.
1:      *
1:      * @param messageId
1:      *      the raw messageId object to process
1:      *
1:      * @return the base string to be used in creating the actual id.
1:      */
1:     public String toBaseMessageIdString(Object messageId) {
1:         if (messageId == null) {
1:             return null;
1:         } else if (messageId instanceof String) {
1:             String stringId = (String) messageId;
1: 
1:             // If the given string has a type encoding prefix,
1:             // we need to escape it as an encoded string (even if
1:             // the existing encoding prefix was also for string)
1:             if (hasTypeEncodingPrefix(stringId)) {
1:                 return AMQP_STRING_PREFIX + stringId;
1:             } else {
1:                 return stringId;
1:             }
1:         } else if (messageId instanceof UUID) {
1:             return AMQP_UUID_PREFIX + messageId.toString();
1:         } else if (messageId instanceof UnsignedLong) {
1:             return AMQP_ULONG_PREFIX + messageId.toString();
1:         } else if (messageId instanceof Binary) {
1:             ByteBuffer dup = ((Binary) messageId).asByteBuffer();
1: 
1:             byte[] bytes = new byte[dup.remaining()];
1:             dup.get(bytes);
1: 
1:             String hex = convertBinaryToHexString(bytes);
1: 
1:             return AMQP_BINARY_PREFIX + hex;
1:         } else {
1:             throw new IllegalArgumentException("Unsupported type provided: " + messageId.getClass());
1:         }
1:     }
1: 
1:     /**
1:      * Takes the provided base id string and return the appropriate amqp messageId style object.
1:      * Converts the type based on any relevant encoding information found as a prefix.
1:      *
1:      * @param baseId
1:      *      the object to be converted to an AMQP MessageId value.
1:      *
1:      * @return the AMQP messageId style object
1:      *
1:      * @throws AmqpProtocolException if the provided baseId String indicates an encoded type but can't be converted to that type.
1:      */
1:     public Object toIdObject(String baseId) throws AmqpProtocolException {
1:         if (baseId == null) {
1:             return null;
1:         }
1: 
1:         try {
1:             if (hasAmqpUuidPrefix(baseId)) {
1:                 String uuidString = strip(baseId, AMQP_UUID_PREFIX_LENGTH);
1:                 return UUID.fromString(uuidString);
1:             } else if (hasAmqpUlongPrefix(baseId)) {
1:                 String longString = strip(baseId, AMQP_ULONG_PREFIX_LENGTH);
1:                 return UnsignedLong.valueOf(longString);
1:             } else if (hasAmqpStringPrefix(baseId)) {
1:                 return strip(baseId, AMQP_STRING_PREFIX_LENGTH);
1:             } else if (hasAmqpBinaryPrefix(baseId)) {
1:                 String hexString = strip(baseId, AMQP_BINARY_PREFIX_LENGTH);
1:                 byte[] bytes = convertHexStringToBinary(hexString);
1:                 return new Binary(bytes);
1:             } else {
1:                 // We have a string without any type prefix, transmit it as-is.
1:                 return baseId;
1:             }
1:         } catch (IllegalArgumentException e) {
1:             throw new AmqpProtocolException("Unable to convert ID value");
1:         }
1:     }
1: 
1:     /**
1:      * Convert the provided hex-string into a binary representation where each byte represents
1:      * two characters of the hex string.
1:      *
1:      * The hex characters may be upper or lower case.
1:      *
1:      * @param hexString
1:      *      string to convert to a binary value.
1:      *
1:      * @return a byte array containing the binary representation
1:      *
1:      * @throws IllegalArgumentException if the provided String is a non-even length or contains
1:      *                                  non-hex characters
1:      */
1:     public byte[] convertHexStringToBinary(String hexString) throws IllegalArgumentException {
1:         int length = hexString.length();
1: 
1:         // As each byte needs two characters in the hex encoding, the string must be an even length.
1:         if (length % 2 != 0) {
1:             throw new IllegalArgumentException("The provided hex String must be an even length, but was of length " + length + ": " + hexString);
1:         }
1: 
1:         byte[] binary = new byte[length / 2];
1: 
1:         for (int i = 0; i < length; i += 2) {
1:             char highBitsChar = hexString.charAt(i);
1:             char lowBitsChar = hexString.charAt(i + 1);
1: 
1:             int highBits = hexCharToInt(highBitsChar, hexString) << 4;
1:             int lowBits = hexCharToInt(lowBitsChar, hexString);
1: 
1:             binary[i / 2] = (byte) (highBits + lowBits);
1:         }
1: 
1:         return binary;
1:     }
1: 
1:     /**
1:      * Convert the provided binary into a hex-string representation where each character
1:      * represents 4 bits of the provided binary, i.e each byte requires two characters.
1:      *
1:      * The returned hex characters are upper-case.
1:      *
1:      * @param bytes
1:      *      the binary value to convert to a hex String instance.
1:      *
1:      * @return a String containing a hex representation of the bytes
1:      */
1:     public String convertBinaryToHexString(byte[] bytes) {
1:         // Each byte is represented as 2 chars
1:         StringBuilder builder = new StringBuilder(bytes.length * 2);
1: 
1:         for (byte b : bytes) {
1:             // The byte will be expanded to int before shifting, replicating the
1:             // sign bit, so mask everything beyond the first 4 bits afterwards
1:             int highBitsInt = (b >> 4) & 0xF;
1:             // We only want the first 4 bits
1:             int lowBitsInt = b & 0xF;
1: 
1:             builder.append(HEX_CHARS[highBitsInt]);
1:             builder.append(HEX_CHARS[lowBitsInt]);
1:         }
1: 
1:         return builder.toString();
1:     }
1: 
1:     //----- Internal implementation ------------------------------------------//
1: 
1:     private boolean hasTypeEncodingPrefix(String stringId) {
1:         return hasAmqpBinaryPrefix(stringId) || hasAmqpUuidPrefix(stringId) ||
1:                hasAmqpUlongPrefix(stringId) || hasAmqpStringPrefix(stringId);
1:     }
1: 
1:     private boolean hasAmqpStringPrefix(String stringId) {
1:         return stringId.startsWith(AMQP_STRING_PREFIX);
1:     }
1: 
1:     private boolean hasAmqpUlongPrefix(String stringId) {
1:         return stringId.startsWith(AMQP_ULONG_PREFIX);
1:     }
1: 
1:     private boolean hasAmqpUuidPrefix(String stringId) {
1:         return stringId.startsWith(AMQP_UUID_PREFIX);
1:     }
1: 
1:     private boolean hasAmqpBinaryPrefix(String stringId) {
1:         return stringId.startsWith(AMQP_BINARY_PREFIX);
1:     }
1: 
1:     private String strip(String id, int numChars) {
1:         return id.substring(numChars);
1:     }
1: 
1:     private int hexCharToInt(char ch, String orig) throws IllegalArgumentException {
1:         if (ch >= '0' && ch <= '9') {
1:             // subtract '0' to get difference in position as an int
1:             return ch - '0';
1:         } else if (ch >= 'A' && ch <= 'F') {
1:             // subtract 'A' to get difference in position as an int
1:             // and then add 10 for the offset of 'A'
1:             return ch - 'A' + 10;
1:         } else if (ch >= 'a' && ch <= 'f') {
1:             // subtract 'a' to get difference in position as an int
1:             // and then add 10 for the offset of 'a'
1:             return ch - 'a' + 10;
1:         }
1: 
1:         throw new IllegalArgumentException("The provided hex string contains non-hex character '" + ch + "': " + orig);
1:     }
1: }
============================================================================