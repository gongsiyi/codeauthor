1:20d3bdb: /**
1:20d3bdb:  * Licensed to the Apache Software Foundation (ASF) under one or more
1:20d3bdb:  * contributor license agreements.  See the NOTICE file distributed with
1:20d3bdb:  * this work for additional information regarding copyright ownership.
1:20d3bdb:  * The ASF licenses this file to You under the Apache License, Version 2.0
1:20d3bdb:  * (the "License"); you may not use this file except in compliance with
1:20d3bdb:  * the License.  You may obtain a copy of the License at
1:20d3bdb:  *
1:20d3bdb:  *      http://www.apache.org/licenses/LICENSE-2.0
1:20d3bdb:  *
1:20d3bdb:  * Unless required by applicable law or agreed to in writing, software
1:20d3bdb:  * distributed under the License is distributed on an "AS IS" BASIS,
1:20d3bdb:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:20d3bdb:  * See the License for the specific language governing permissions and
1:20d3bdb:  * limitations under the License.
1:20d3bdb:  */
1:20d3bdb: package org.apache.activemq.bugs;
3:20d3bdb: 
1:1c9626b: import static org.junit.Assert.assertNotNull;
1:1c9626b: import static org.junit.Assert.assertNull;
1:1c9626b: import static org.junit.Assert.assertTrue;
1:1c9626b: 
1:20d3bdb: import java.util.Vector;
1:20d3bdb: import java.util.concurrent.ExecutorService;
1:20d3bdb: import java.util.concurrent.Executors;
1:20d3bdb: import java.util.concurrent.TimeUnit;
1:20d3bdb: import java.util.concurrent.atomic.AtomicLong;
1:1c9626b: 
1:20d3bdb: import javax.jms.BytesMessage;
1:20d3bdb: import javax.jms.DeliveryMode;
1:20d3bdb: import javax.jms.Destination;
1:20d3bdb: import javax.jms.Message;
1:20d3bdb: import javax.jms.MessageConsumer;
1:20d3bdb: import javax.jms.MessageProducer;
1:20d3bdb: import javax.jms.Session;
1:1c9626b: 
1:20d3bdb: import org.apache.activemq.ActiveMQConnection;
1:20d3bdb: import org.apache.activemq.ActiveMQConnectionFactory;
1:20d3bdb: import org.apache.activemq.broker.BrokerService;
1:20d3bdb: import org.apache.activemq.command.ActiveMQQueue;
1:20d3bdb: import org.apache.activemq.command.ConnectionControl;
1:20d3bdb: import org.junit.After;
1:20d3bdb: import org.junit.Test;
1:cf62d58: import org.slf4j.Logger;
1:cf62d58: import org.slf4j.LoggerFactory;
1:cf62d58: 
1:20d3bdb: 
1:20d3bdb: public class AMQ4157Test {
1:cf62d58:     static final Logger LOG = LoggerFactory.getLogger(AMQ4157Test.class);
1:20d3bdb:     private BrokerService broker;
1:20d3bdb:     private ActiveMQConnectionFactory connectionFactory;
1:1c9626b:     private final Destination destination = new ActiveMQQueue("Test");
1:1c9626b:     private final String payloadString = new String(new byte[8*1024]);
1:1c9626b:     private final boolean useBytesMessage= true;
1:20d3bdb:     private final int parallelProducer = 20;
1:20d3bdb:     private final int parallelConsumer = 100;
1:20d3bdb: 
1:1c9626b:     private final Vector<Exception> exceptions = new Vector<Exception>();
1:20d3bdb:     long toSend = 1000;
1:20d3bdb: 
1:20d3bdb:     @Test
1:20d3bdb:     public void testPublishCountsWithRollbackConsumer() throws Exception {
1:20d3bdb: 
1:20d3bdb:         startBroker(true);
1:20d3bdb: 
1:20d3bdb:         final AtomicLong sharedCount = new AtomicLong(toSend);
1:20d3bdb:         ExecutorService executorService = Executors.newCachedThreadPool();
1:20d3bdb: 
1:20d3bdb:         for (int i=0; i< parallelConsumer; i++) {
1:20d3bdb:             executorService.execute(new Runnable() {
1:20d3bdb:                 @Override
1:20d3bdb:                 public void run() {
1:20d3bdb:                     try {
1:20d3bdb:                         consumeOneAndRollback();
1:20d3bdb:                     } catch (Exception e) {
1:20d3bdb:                         exceptions.add(e);
1:20d3bdb:                     }
1:20d3bdb:                 }
1:20d3bdb:             });
1:20d3bdb:         }
1:20d3bdb: 
1:20d3bdb:         for (int i=0; i< parallelProducer; i++) {
1:20d3bdb:             executorService.execute(new Runnable() {
1:20d3bdb:                 @Override
1:20d3bdb:                 public void run() {
1:20d3bdb:                     try {
1:20d3bdb:                         publishMessages(sharedCount, 0);
1:20d3bdb:                     } catch (Exception e) {
1:20d3bdb:                         exceptions.add(e);
1:20d3bdb:                     }
1:20d3bdb:                 }
1:20d3bdb:             });
1:20d3bdb:         }
1:20d3bdb: 
1:20d3bdb:         executorService.shutdown();
1:20d3bdb:         executorService.awaitTermination(30, TimeUnit.MINUTES);
1:20d3bdb:         assertTrue("Producers done in time", executorService.isTerminated());
1:20d3bdb:         assertTrue("No exceptions: " + exceptions, exceptions.isEmpty());
1:20d3bdb: 
1:1c9626b:         restartBroker(500);
1:1c9626b: 
1:cf62d58:         LOG.info("Attempting consume of {} messages", toSend);
1:1c9626b: 
1:20d3bdb:         consumeMessages(toSend);
1:20d3bdb:     }
1:20d3bdb: 
1:20d3bdb:     private void consumeOneAndRollback() throws Exception {
1:20d3bdb:         ActiveMQConnection connection = (ActiveMQConnection) connectionFactory.createConnection();
1:20d3bdb:         connection.start();
1:20d3bdb:         Session session = connection.createSession(true, Session.SESSION_TRANSACTED);
1:20d3bdb:         MessageConsumer consumer = session.createConsumer(destination);
1:20d3bdb:         Message message = null;
1:20d3bdb:         while (message == null) {
1:20d3bdb:             message = consumer.receive(1000);
1:20d3bdb:         }
1:20d3bdb:         session.rollback();
1:20d3bdb:         connection.close();
1:20d3bdb:     }
1:20d3bdb: 
1:20d3bdb:     private void consumeMessages(long count) throws Exception {
1:20d3bdb:         ActiveMQConnection connection = (ActiveMQConnection) connectionFactory.createConnection();
1:20d3bdb:         connection.start();
1:20d3bdb:         Session session = connection.createSession(false, Session.AUTO_ACKNOWLEDGE);
1:20d3bdb:         MessageConsumer consumer = session.createConsumer(destination);
1:20d3bdb:         for (int i=0; i<count; i++) {
1:1c9626b:             assertNotNull("got message "+ i, consumer.receive(20000));
1:20d3bdb:         }
1:20d3bdb:         assertNull("none left over", consumer.receive(2000));
1:20d3bdb:     }
1:20d3bdb: 
1:20d3bdb:     private void restartBroker(int restartDelay) throws Exception {
1:20d3bdb:         stopBroker();
1:20d3bdb:         TimeUnit.MILLISECONDS.sleep(restartDelay);
1:20d3bdb:         startBroker(false);
1:20d3bdb:     }
1:20d3bdb: 
1:20d3bdb:     @After
1:20d3bdb:     public void stopBroker() throws Exception {
1:20d3bdb:         if (broker != null) {
1:20d3bdb:             broker.stop();
1:20d3bdb:             broker.waitUntilStopped();
1:20d3bdb:         }
1:20d3bdb:     }
1:20d3bdb: 
1:20d3bdb:     private void publishMessages(AtomicLong count, int expiry) throws Exception {
1:20d3bdb:         ActiveMQConnection connection = (ActiveMQConnection) connectionFactory.createConnection();
1:20d3bdb:         connection.setWatchTopicAdvisories(false);
1:20d3bdb:         connection.start();
1:20d3bdb:         Session session = connection.createSession(false, Session.AUTO_ACKNOWLEDGE);
1:20d3bdb: 
1:20d3bdb:         MessageProducer producer = session.createProducer(destination);
1:1c9626b:         while ( (count.getAndDecrement()) > 0) {
1:20d3bdb:             Message message = null;
1:20d3bdb:             if (useBytesMessage) {
1:20d3bdb:                 message = session.createBytesMessage();
1:20d3bdb:                 ((BytesMessage) message).writeBytes(payloadString.getBytes());
1:20d3bdb:             } else {
1:20d3bdb:                 message = session.createTextMessage(payloadString);
1:20d3bdb:             }
1:20d3bdb:             producer.send(message, DeliveryMode.PERSISTENT, 5, expiry);
1:20d3bdb:         }
1:20d3bdb:         connection.syncSendPacket(new ConnectionControl());
1:20d3bdb:         connection.close();
1:20d3bdb:     }
1:20d3bdb: 
1:20d3bdb:     public void startBroker(boolean deleteAllMessages) throws Exception {
1:20d3bdb:         broker = new BrokerService();
1:20d3bdb:         broker.setDeleteAllMessagesOnStartup(deleteAllMessages);
1:20d3bdb:         broker.addConnector("tcp://0.0.0.0:0");
1:20d3bdb:         broker.start();
1:20d3bdb: 
1:8ab9a56:         String options = "?jms.redeliveryPolicy.maximumRedeliveries=-1&jms.prefetchPolicy.all=1000&jms.watchTopicAdvisories=false&jms.useAsyncSend=true&jms.alwaysSessionAsync=false&jms.dispatchAsync=false&socketBufferSize=131072&ioBufferSize=16384&wireFormat.tightEncodingEnabled=false&wireFormat.cacheSize=8192";
1:20d3bdb:         connectionFactory = new ActiveMQConnectionFactory(broker.getTransportConnectors().get(0).getConnectUri() + options);
1:20d3bdb:     }
1:20d3bdb: }
============================================================================
author:gtully
-------------------------------------------------------------------------------
commit:cf62d58
/////////////////////////////////////////////////////////////////////////
1: import org.slf4j.Logger;
1: import org.slf4j.LoggerFactory;
1: 
1:     static final Logger LOG = LoggerFactory.getLogger(AMQ4157Test.class);
/////////////////////////////////////////////////////////////////////////
1:         LOG.info("Attempting consume of {} messages", toSend);
commit:8ab9a56
/////////////////////////////////////////////////////////////////////////
0: import org.apache.activemq.TestSupport;
/////////////////////////////////////////////////////////////////////////
1:         String options = "?jms.redeliveryPolicy.maximumRedeliveries=-1&jms.prefetchPolicy.all=1000&jms.watchTopicAdvisories=false&jms.useAsyncSend=true&jms.alwaysSessionAsync=false&jms.dispatchAsync=false&socketBufferSize=131072&ioBufferSize=16384&wireFormat.tightEncodingEnabled=false&wireFormat.cacheSize=8192";
author:Timothy A. Bish
-------------------------------------------------------------------------------
commit:1c9626b
/////////////////////////////////////////////////////////////////////////
1: import static org.junit.Assert.assertNotNull;
1: import static org.junit.Assert.assertNull;
1: import static org.junit.Assert.assertTrue;
1: 
1: 
/////////////////////////////////////////////////////////////////////////
1: 
/////////////////////////////////////////////////////////////////////////
0: import org.mortbay.log.Log;
1:     private final Destination destination = new ActiveMQQueue("Test");
1:     private final String payloadString = new String(new byte[8*1024]);
1:     private final boolean useBytesMessage= true;
1:     private final Vector<Exception> exceptions = new Vector<Exception>();
/////////////////////////////////////////////////////////////////////////
1:         restartBroker(500);
1: 
0:         Log.info("Attempting consume of {} messages", toSend);
1: 
/////////////////////////////////////////////////////////////////////////
1:             assertNotNull("got message "+ i, consumer.receive(20000));
/////////////////////////////////////////////////////////////////////////
1:         while ( (count.getAndDecrement()) > 0) {
commit:ef24cc9
author:Gary Tully
-------------------------------------------------------------------------------
commit:20d3bdb
/////////////////////////////////////////////////////////////////////////
1: /**
1:  * Licensed to the Apache Software Foundation (ASF) under one or more
1:  * contributor license agreements.  See the NOTICE file distributed with
1:  * this work for additional information regarding copyright ownership.
1:  * The ASF licenses this file to You under the Apache License, Version 2.0
1:  * (the "License"); you may not use this file except in compliance with
1:  * the License.  You may obtain a copy of the License at
1:  *
1:  *      http://www.apache.org/licenses/LICENSE-2.0
1:  *
1:  * Unless required by applicable law or agreed to in writing, software
1:  * distributed under the License is distributed on an "AS IS" BASIS,
1:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:  * See the License for the specific language governing permissions and
1:  * limitations under the License.
1:  */
1: package org.apache.activemq.bugs;
1: 
1: import java.util.Vector;
1: import java.util.concurrent.ExecutorService;
1: import java.util.concurrent.Executors;
1: import java.util.concurrent.TimeUnit;
1: import java.util.concurrent.atomic.AtomicLong;
1: import javax.jms.BytesMessage;
1: import javax.jms.DeliveryMode;
1: import javax.jms.Destination;
1: import javax.jms.Message;
1: import javax.jms.MessageConsumer;
1: import javax.jms.MessageProducer;
1: import javax.jms.Session;
1: import org.apache.activemq.ActiveMQConnection;
1: import org.apache.activemq.ActiveMQConnectionFactory;
1: import org.apache.activemq.broker.BrokerService;
1: import org.apache.activemq.command.ActiveMQQueue;
1: import org.apache.activemq.command.ConnectionControl;
1: import org.junit.After;
1: import org.junit.Test;
1: 
1: 
0: import static junit.framework.Assert.*;
1: 
1: public class AMQ4157Test {
1:     private BrokerService broker;
1:     private ActiveMQConnectionFactory connectionFactory;
0:     private Destination destination = new ActiveMQQueue("Test");
0:     private String payloadString = new String(new byte[8*1024]);
0:     private boolean useBytesMessage= true;
1:     private final int parallelProducer = 20;
1:     private final int parallelConsumer = 100;
1: 
0:     private Vector<Exception> exceptions = new Vector<Exception>();
1:     long toSend = 1000;
1: 
1:     @Test
1:     public void testPublishCountsWithRollbackConsumer() throws Exception {
1: 
1:         startBroker(true);
1: 
1:         final AtomicLong sharedCount = new AtomicLong(toSend);
1:         ExecutorService executorService = Executors.newCachedThreadPool();
1: 
1:         for (int i=0; i< parallelConsumer; i++) {
1:             executorService.execute(new Runnable() {
1:                 @Override
1:                 public void run() {
1:                     try {
1:                         consumeOneAndRollback();
1:                     } catch (Exception e) {
1:                         exceptions.add(e);
1:                     }
1:                 }
1:             });
1:         }
1: 
1:         for (int i=0; i< parallelProducer; i++) {
1:             executorService.execute(new Runnable() {
1:                 @Override
1:                 public void run() {
1:                     try {
1:                         publishMessages(sharedCount, 0);
1:                     } catch (Exception e) {
1:                         exceptions.add(e);
1:                     }
1:                 }
1:             });
1:         }
1: 
1:         executorService.shutdown();
1:         executorService.awaitTermination(30, TimeUnit.MINUTES);
1:         assertTrue("Producers done in time", executorService.isTerminated());
1:         assertTrue("No exceptions: " + exceptions, exceptions.isEmpty());
1: 
0:         restartBroker(100);
1:         consumeMessages(toSend);
1:     }
1: 
1:     private void consumeOneAndRollback() throws Exception {
1:         ActiveMQConnection connection = (ActiveMQConnection) connectionFactory.createConnection();
1:         connection.start();
1:         Session session = connection.createSession(true, Session.SESSION_TRANSACTED);
1:         MessageConsumer consumer = session.createConsumer(destination);
1:         Message message = null;
1:         while (message == null) {
1:             message = consumer.receive(1000);
1:         }
1:         session.rollback();
1:         connection.close();
1:     }
1: 
1:     private void consumeMessages(long count) throws Exception {
1:         ActiveMQConnection connection = (ActiveMQConnection) connectionFactory.createConnection();
1:         connection.start();
1:         Session session = connection.createSession(false, Session.AUTO_ACKNOWLEDGE);
1:         MessageConsumer consumer = session.createConsumer(destination);
1:         for (int i=0; i<count; i++) {
0:             assertNotNull("got message "+ i, consumer.receive(10000));
1:         }
1:         assertNull("none left over", consumer.receive(2000));
1:     }
1: 
1:     private void restartBroker(int restartDelay) throws Exception {
1:         stopBroker();
1:         TimeUnit.MILLISECONDS.sleep(restartDelay);
1:         startBroker(false);
1:     }
1: 
1:     @After
1:     public void stopBroker() throws Exception {
1:         if (broker != null) {
1:             broker.stop();
1:             broker.waitUntilStopped();
1:         }
1:     }
1: 
1:     private void publishMessages(AtomicLong count, int expiry) throws Exception {
1:         ActiveMQConnection connection = (ActiveMQConnection) connectionFactory.createConnection();
1:         connection.setWatchTopicAdvisories(false);
1:         connection.start();
1:         Session session = connection.createSession(false, Session.AUTO_ACKNOWLEDGE);
1: 
1:         MessageProducer producer = session.createProducer(destination);
0:         long i = 0l;
0:         while ( (i=count.getAndDecrement()) > 0) {
1:             Message message = null;
1:             if (useBytesMessage) {
1:                 message = session.createBytesMessage();
1:                 ((BytesMessage) message).writeBytes(payloadString.getBytes());
1:             } else {
1:                 message = session.createTextMessage(payloadString);
1:             }
1:             producer.send(message, DeliveryMode.PERSISTENT, 5, expiry);
1:         }
1:         connection.syncSendPacket(new ConnectionControl());
1:         connection.close();
1:     }
1: 
1:     public void startBroker(boolean deleteAllMessages) throws Exception {
1:         broker = new BrokerService();
1:         broker.setDeleteAllMessagesOnStartup(deleteAllMessages);
1:         broker.addConnector("tcp://0.0.0.0:0");
1:         broker.start();
1: 
0:         String options = "?jms.prefetchPolicy.all=1000&jms.watchTopicAdvisories=false&jms.useAsyncSend=true&jms.alwaysSessionAsync=false&jms.dispatchAsync=false&socketBufferSize=131072&ioBufferSize=16384&wireFormat.tightEncodingEnabled=false&wireFormat.cacheSize=8192";
1:         connectionFactory = new ActiveMQConnectionFactory(broker.getTransportConnectors().get(0).getConnectUri() + options);
1:     }
1: }
============================================================================