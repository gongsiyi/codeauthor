1:dc258ab: /**
1:dc258ab:  * Licensed to the Apache Software Foundation (ASF) under one or more
1:dc258ab:  * contributor license agreements.  See the NOTICE file distributed with
1:dc258ab:  * this work for additional information regarding copyright ownership.
1:dc258ab:  * The ASF licenses this file to You under the Apache License, Version 2.0
1:dc258ab:  * (the "License"); you may not use this file except in compliance with
1:dc258ab:  * the License.  You may obtain a copy of the License at
1:dc258ab:  *
1:dc258ab:  *      http://www.apache.org/licenses/LICENSE-2.0
1:dc258ab:  *
1:dc258ab:  * Unless required by applicable law or agreed to in writing, software
1:dc258ab:  * distributed under the License is distributed on an "AS IS" BASIS,
1:dc258ab:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:dc258ab:  * See the License for the specific language governing permissions and
1:dc258ab:  * limitations under the License.
1:dc258ab:  */
1:dc258ab: package org.apache.activemq.broker.ft;
4:dc258ab: 
1:dc258ab: import java.io.IOException;
1:dc258ab: 
1:13bbe52: import org.apache.activemq.broker.BrokerService;
1:dc258ab: import org.apache.activemq.store.jdbc.JDBCPersistenceAdapter;
1:dc258ab: import org.apache.activemq.store.jdbc.LeaseDatabaseLocker;
1:e16815a: import org.apache.activemq.util.LeaseLockerIOExceptionHandler;
1:dc258ab: import org.slf4j.Logger;
1:dc258ab: import org.slf4j.LoggerFactory;
1:dc258ab: 
1:dc258ab: public class DbRestartJDBCQueueMasterSlaveLeaseTest extends DbRestartJDBCQueueMasterSlaveTest {
1:dc258ab:     private static final transient Logger LOG = LoggerFactory.getLogger(DbRestartJDBCQueueMasterSlaveLeaseTest.class);
1:dc258ab: 
3:dc258ab:     @Override
1:dc258ab:     protected void configureJdbcPersistenceAdapter(JDBCPersistenceAdapter persistenceAdapter) throws IOException {
1:dc258ab:         super.configureJdbcPersistenceAdapter(persistenceAdapter);
1:aac50fc:         persistenceAdapter.setLocker(new LeaseDatabaseLocker());
1:170b86a:         persistenceAdapter.getLocker().setLockAcquireSleepInterval(getLockAcquireSleepInterval());
1:dc258ab:         persistenceAdapter.setLockKeepAlivePeriod(getLockKeepAlivePeriod());
5:dc258ab:     }
1:dc258ab: 
1:13bbe52:     @Override
1:13bbe52:     protected void configureBroker(BrokerService brokerService) {
1:13bbe52:         //let the brokers die on exception and master should have lease on restart
1:13bbe52:         // which will delay slave start till it expires
1:e16815a:         LeaseLockerIOExceptionHandler ioExceptionHandler = new LeaseLockerIOExceptionHandler();
1:e16815a:         ioExceptionHandler.setIgnoreSQLExceptions(false);
1:e16815a:         ioExceptionHandler.setStopStartConnectors(false);
1:e16815a:         ioExceptionHandler.setResumeCheckSleepPeriod(500l);
1:e16815a:         brokerService.setIoExceptionHandler(ioExceptionHandler);
1:13bbe52:     }
1:13bbe52: 
1:dc258ab:     private long getLockKeepAlivePeriod() {
1:c7aad77:         return 1000;
1:dc258ab:     }
1:dc258ab: 
1:dc258ab:     private long getLockAcquireSleepInterval() {
1:c7aad77:         return 8000;
1:dc258ab:     }
1:dc258ab: }
============================================================================
author:gtully
-------------------------------------------------------------------------------
commit:e16815a
/////////////////////////////////////////////////////////////////////////
1: import org.apache.activemq.util.LeaseLockerIOExceptionHandler;
/////////////////////////////////////////////////////////////////////////
1:         LeaseLockerIOExceptionHandler ioExceptionHandler = new LeaseLockerIOExceptionHandler();
1:         ioExceptionHandler.setIgnoreSQLExceptions(false);
1:         ioExceptionHandler.setStopStartConnectors(false);
1:         ioExceptionHandler.setResumeCheckSleepPeriod(500l);
1:         brokerService.setIoExceptionHandler(ioExceptionHandler);
author:Gary Tully
-------------------------------------------------------------------------------
commit:c7aad77
/////////////////////////////////////////////////////////////////////////
1:         return 1000;
1:         return 8000;
commit:13bbe52
/////////////////////////////////////////////////////////////////////////
1: import org.apache.activemq.broker.BrokerService;
0: import org.apache.activemq.store.jdbc.JDBCIOExceptionHandler;
0: import org.apache.activemq.util.DefaultIOExceptionHandler;
/////////////////////////////////////////////////////////////////////////
1:     @Override
1:     protected void configureBroker(BrokerService brokerService) {
1:         //let the brokers die on exception and master should have lease on restart
1:         // which will delay slave start till it expires
0:         JDBCIOExceptionHandler trapSQLExceptions = new JDBCIOExceptionHandler();
0:         trapSQLExceptions.setIgnoreSQLExceptions(false);
0:         trapSQLExceptions.setStopStartConnectors(false);
0:         trapSQLExceptions.setResumeCheckSleepPeriod(500l);
0:         brokerService.setIoExceptionHandler(trapSQLExceptions);
1:     }
1: 
/////////////////////////////////////////////////////////////////////////
commit:aac50fc
/////////////////////////////////////////////////////////////////////////
1:         persistenceAdapter.setLocker(new LeaseDatabaseLocker());
commit:32d3fd5
/////////////////////////////////////////////////////////////////////////
0: import java.sql.Connection;
0: import junit.framework.Test;
0: import org.apache.activemq.store.jdbc.DataSourceSupport;
0: import org.apache.activemq.store.jdbc.adapter.DefaultJDBCAdapter;
/////////////////////////////////////////////////////////////////////////
0:         LOG.info("delay for less than lease quantum. While Db is offline, master should stay alive");
0:             TimeUnit.SECONDS.sleep(1);
/////////////////////////////////////////////////////////////////////////
0:         if (inflightMessageCount == 0 || inflightMessageCount == failureCount + 10) {
commit:dc258ab
/////////////////////////////////////////////////////////////////////////
1: /**
1:  * Licensed to the Apache Software Foundation (ASF) under one or more
1:  * contributor license agreements.  See the NOTICE file distributed with
1:  * this work for additional information regarding copyright ownership.
1:  * The ASF licenses this file to You under the Apache License, Version 2.0
1:  * (the "License"); you may not use this file except in compliance with
1:  * the License.  You may obtain a copy of the License at
1:  *
1:  *      http://www.apache.org/licenses/LICENSE-2.0
1:  *
1:  * Unless required by applicable law or agreed to in writing, software
1:  * distributed under the License is distributed on an "AS IS" BASIS,
1:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:  * See the License for the specific language governing permissions and
1:  * limitations under the License.
1:  */
1: package org.apache.activemq.broker.ft;
1: 
1: import java.io.IOException;
0: import java.util.concurrent.TimeUnit;
0: import org.apache.activemq.ActiveMQConnection;
1: import org.apache.activemq.store.jdbc.JDBCPersistenceAdapter;
1: import org.apache.activemq.store.jdbc.LeaseDatabaseLocker;
1: import org.slf4j.Logger;
1: import org.slf4j.LoggerFactory;
1: 
1: public class DbRestartJDBCQueueMasterSlaveLeaseTest extends DbRestartJDBCQueueMasterSlaveTest {
1:     private static final transient Logger LOG = LoggerFactory.getLogger(DbRestartJDBCQueueMasterSlaveLeaseTest.class);
1: 
1:     @Override
1:     protected void configureJdbcPersistenceAdapter(JDBCPersistenceAdapter persistenceAdapter) throws IOException {
1:         super.configureJdbcPersistenceAdapter(persistenceAdapter);
0:         persistenceAdapter.setLockAcquireSleepInterval(getLockAcquireSleepInterval());
1:         persistenceAdapter.setLockKeepAlivePeriod(getLockKeepAlivePeriod());
0:         persistenceAdapter.setDatabaseLocker(new LeaseDatabaseLocker());
1:     }
1: 
1:     private long getLockKeepAlivePeriod() {
0:         return 500;
1:     }
1: 
1:     private long getLockAcquireSleepInterval() {
0:         return 2000;
1:     }
1: 
1:     @Override
0:     protected void delayTillRestartRequired() {
1: 
0:         LOG.info("restart db after lease has expired. While Db is offline, master should stay alive, them lease up for grabs");
0:         try {
0:             TimeUnit.MILLISECONDS.sleep(3000);
0:         } catch (InterruptedException e) {
0:             e.printStackTrace();
1:         }
1:     }
1: 
1:     @Override
0:     protected void verifyExpectedBroker(int inflightMessageCount) {
0:         if (inflightMessageCount == 0) {
0:             assertEquals("connected to master", master.getBrokerName(), ((ActiveMQConnection)sendConnection).getBrokerName());
1:         }
0:         // the lock is up for grabs after the expiry
1:     }
1: 
1: }
author:Timothy A. Bish
-------------------------------------------------------------------------------
commit:ef24cc9
author:Bosanac Dejan
-------------------------------------------------------------------------------
commit:170b86a
/////////////////////////////////////////////////////////////////////////
0: 
/////////////////////////////////////////////////////////////////////////
1:         persistenceAdapter.getLocker().setLockAcquireSleepInterval(getLockAcquireSleepInterval());
commit:8530111
/////////////////////////////////////////////////////////////////////////
0:         persistenceAdapter.setLocker(new LeaseDatabaseLocker());
============================================================================