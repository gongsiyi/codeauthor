1:d29ca2a: /**
1:57b4941:  * Licensed to the Apache Software Foundation (ASF) under one or more
1:57b4941:  * contributor license agreements.  See the NOTICE file distributed with
1:57b4941:  * this work for additional information regarding copyright ownership.
1:57b4941:  * The ASF licenses this file to You under the Apache License, Version 2.0
1:57b4941:  * (the "License"); you may not use this file except in compliance with
1:57b4941:  * the License.  You may obtain a copy of the License at
3:d29ca2a:  *
1:230a86c:  *      http://www.apache.org/licenses/LICENSE-2.0
1:d29ca2a:  *
1:d29ca2a:  * Unless required by applicable law or agreed to in writing, software
1:d29ca2a:  * distributed under the License is distributed on an "AS IS" BASIS,
1:d29ca2a:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:d29ca2a:  * See the License for the specific language governing permissions and
1:d29ca2a:  * limitations under the License.
1:d29ca2a:  */
1:d29ca2a: package org.apache.activemq.memory;
11:d29ca2a: 
1:d29ca2a: import java.util.Iterator;
1:d29ca2a: import java.util.LinkedList;
1:ecf89a6: import java.util.List;
1:74a7a8b: import java.util.concurrent.CopyOnWriteArrayList;
1:d29ca2a: 
1:d29ca2a: import org.apache.activemq.thread.Task;
1:d29ca2a: import org.apache.activemq.thread.TaskRunner;
1:d29ca2a: import org.apache.activemq.thread.TaskRunnerFactory;
1:6d8e2c5: import org.apache.activemq.usage.Usage;
1:6d8e2c5: import org.apache.activemq.usage.UsageListener;
1:8bf987b: import org.slf4j.Logger;
1:8bf987b: import org.slf4j.LoggerFactory;
1:d29ca2a: 
1:d29ca2a: public class CacheEvictionUsageListener implements UsageListener {
1:f812e34: 
1:8bf987b:     private static final Logger LOG = LoggerFactory.getLogger(CacheEvictionUsageListener.class);
1:f812e34: 
1:ecf89a6:     private final List<CacheEvictor> evictors = new CopyOnWriteArrayList<CacheEvictor>();
1:d29ca2a:     private final int usageHighMark;
1:d29ca2a:     private final int usageLowMark;
1:d29ca2a: 
1:d29ca2a:     private final TaskRunner evictionTask;
1:6d8e2c5:     private final Usage usage;
1:f812e34: 
1:6d8e2c5:     public CacheEvictionUsageListener(Usage usage, int usageHighMark, int usageLowMark, TaskRunnerFactory taskRunnerFactory) {
1:6d8e2c5:         this.usage = usage;
1:d29ca2a:         this.usageHighMark = usageHighMark;
1:d29ca2a:         this.usageLowMark = usageLowMark;
1:f812e34:         evictionTask = taskRunnerFactory.createTaskRunner(new Task() {
1:d29ca2a:             public boolean iterate() {
1:d29ca2a:                 return evictMessages();
1:d29ca2a:             }
1:f812e34:         }, "Cache Evictor: " + System.identityHashCode(this));
1:d29ca2a:     }
1:f812e34: 
1:a3e3821:     boolean evictMessages() {
1:d29ca2a:         // Try to take the memory usage down below the low mark.
1:e1bbde7:         LOG.debug("Evicting cache memory usage: {}", usage.getPercentUsage());
1:f812e34: 
1:ecf89a6:         List<CacheEvictor> list = new LinkedList<CacheEvictor>(evictors);
1:6d8e2c5:         while (list.size() > 0 && usage.getPercentUsage() > usageLowMark) {
1:f812e34: 
1:ecf89a6:             // Evenly evict messages from all evictors
1:ecf89a6:             for (Iterator<CacheEvictor> iter = list.iterator(); iter.hasNext();) {
1:ecf89a6:                 CacheEvictor evictor = iter.next();
1:ecf89a6:                 if (evictor.evictCacheEntry() == null) {
1:ecf89a6:                     iter.remove();
1:d29ca2a:                 }
1:d29ca2a:             }
1:d29ca2a:         }
1:d29ca2a:         return false;
1:d29ca2a:     }
1:f812e34: 
1:6d8e2c5:     public void onUsageChanged(Usage usage, int oldPercentUsage, int newPercentUsage) {
1:d29ca2a:         // Do we need to start evicting cache entries? Usage > than the
1:d29ca2a:         // high mark
1:6d8e2c5:         if (oldPercentUsage < newPercentUsage && usage.getPercentUsage() >= usageHighMark) {
1:f812e34:             try {
1:d29ca2a:                 evictionTask.wakeup();
1:d29ca2a:             } catch (InterruptedException e) {
1:d29ca2a:                 Thread.currentThread().interrupt();
1:d29ca2a:             }
1:d29ca2a:         }
1:d29ca2a:     }
1:f812e34: 
1:d29ca2a:     public void add(CacheEvictor evictor) {
1:d29ca2a:         evictors.add(evictor);
1:d29ca2a:     }
1:f812e34: 
1:d29ca2a:     public void remove(CacheEvictor evictor) {
1:d29ca2a:         evictors.remove(evictor);
1:d29ca2a:     }
1:d29ca2a: }
============================================================================
author:Hadrian Zbarcea
-------------------------------------------------------------------------------
commit:d54d046
author:Timothy Bish
-------------------------------------------------------------------------------
commit:e1bbde7
/////////////////////////////////////////////////////////////////////////
1:         LOG.debug("Evicting cache memory usage: {}", usage.getPercentUsage());
author:Hiram R. Chirino
-------------------------------------------------------------------------------
commit:58aca86
commit:ecf89a6
/////////////////////////////////////////////////////////////////////////
1: import java.util.List;
/////////////////////////////////////////////////////////////////////////
1:     private final List<CacheEvictor> evictors = new CopyOnWriteArrayList<CacheEvictor>();
0:     public CacheEvictionUsageListener(UsageManager usageManager, int usageHighMark, int usageLowMark, TaskRunnerFactory taskRunnerFactory) {
/////////////////////////////////////////////////////////////////////////
0:         LOG.debug("Evicting cache memory usage: " + usageManager.getPercentUsage());
1:         List<CacheEvictor> list = new LinkedList<CacheEvictor>(evictors);
0:         while (list.size() > 0 && usageManager.getPercentUsage() > usageLowMark) {
1:             // Evenly evict messages from all evictors
1:             for (Iterator<CacheEvictor> iter = list.iterator(); iter.hasNext();) {
1:                 CacheEvictor evictor = iter.next();
1:                 if (evictor.evictCacheEntry() == null) {
1:                     iter.remove();
commit:fc00993
/////////////////////////////////////////////////////////////////////////
0:     private static final Log LOG = LogFactory.getLog(CacheEvictionUsageListener.class);
/////////////////////////////////////////////////////////////////////////
0:             LOG.debug("Evicting cache memory usage: " + usageManager.getPercentUsage());
commit:74a7a8b
/////////////////////////////////////////////////////////////////////////
1: import java.util.concurrent.CopyOnWriteArrayList;
/////////////////////////////////////////////////////////////////////////
commit:f812e34
/////////////////////////////////////////////////////////////////////////
1: 
1: 
1: 
0:     public CacheEvictionUsageListener(UsageManager usageManager, int usageHighMark, int usageLowMark,
0:                                       TaskRunnerFactory taskRunnerFactory) {
1:         evictionTask = taskRunnerFactory.createTaskRunner(new Task() {
1:         }, "Cache Evictor: " + System.identityHashCode(this));
1: 
1:         try {
0:             log.debug("Evicting cache memory usage: " + usageManager.getPercentUsage());
1: 
0:             while (list.size() > 0 && usageManager.getPercentUsage() > usageLowMark) {
1: 
0:                     CacheEvictor evictor = (CacheEvictor)iter.next();
0:                     if (evictor.evictCacheEntry() == null)
/////////////////////////////////////////////////////////////////////////
1: 
0:         if (oldPercentUsage < newPercentUsage && memoryManager.getPercentUsage() >= usageHighMark) {
/////////////////////////////////////////////////////////////////////////
1: 
1: 
commit:230a86c
/////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////
1:  *      http://www.apache.org/licenses/LICENSE-2.0
commit:86cbdfd
/////////////////////////////////////////////////////////////////////////
0: import java.util.concurrent.CopyOnWriteArrayList;
commit:57b4941
/////////////////////////////////////////////////////////////////////////
1:  * Licensed to the Apache Software Foundation (ASF) under one or more
1:  * contributor license agreements.  See the NOTICE file distributed with
1:  * this work for additional information regarding copyright ownership.
1:  * The ASF licenses this file to You under the Apache License, Version 2.0
1:  * (the "License"); you may not use this file except in compliance with
1:  * the License.  You may obtain a copy of the License at
commit:e2aad41
/////////////////////////////////////////////////////////////////////////
0:         }, "Cache Evictor: "+System.identityHashCode(this));
commit:48b4869
/////////////////////////////////////////////////////////////////////////
0:  * Copyright 2005-2006 The Apache Software Foundation
commit:d29ca2a
/////////////////////////////////////////////////////////////////////////
1: /**
1:  *
0:  * Copyright 2004 The Apache Software Foundation
1:  *
0:  * Licensed under the Apache License, Version 2.0 (the "License");
0:  * you may not use this file except in compliance with the License.
0:  * You may obtain a copy of the License at
1:  *
0:  * http://www.apache.org/licenses/LICENSE-2.0
1:  *
1:  * Unless required by applicable law or agreed to in writing, software
1:  * distributed under the License is distributed on an "AS IS" BASIS,
1:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:  * See the License for the specific language governing permissions and
1:  * limitations under the License.
1:  */
1: package org.apache.activemq.memory;
1: 
1: import java.util.Iterator;
1: import java.util.LinkedList;
1: 
1: import org.apache.activemq.thread.Task;
1: import org.apache.activemq.thread.TaskRunner;
1: import org.apache.activemq.thread.TaskRunnerFactory;
0: import org.apache.commons.logging.Log;
0: import org.apache.commons.logging.LogFactory;
1: 
0: import edu.emory.mathcs.backport.java.util.concurrent.CopyOnWriteArrayList;
1: 
1: public class CacheEvictionUsageListener implements UsageListener {
1:     
0:     private final static Log log = LogFactory.getLog(CacheEvictionUsageListener.class);
1:     
0:     private final CopyOnWriteArrayList evictors = new CopyOnWriteArrayList();
1:     private final int usageHighMark;
1:     private final int usageLowMark;
1: 
1:     private final TaskRunner evictionTask;
0:     private final UsageManager usageManager;
1:     
0:     public CacheEvictionUsageListener(UsageManager usageManager, int usageHighMark, int usageLowMark, TaskRunnerFactory taskRunnerFactory) {
0:         this.usageManager = usageManager;
1:         this.usageHighMark = usageHighMark;
1:         this.usageLowMark = usageLowMark;
0:         evictionTask = taskRunnerFactory.createTaskRunner(new Task(){
1:             public boolean iterate() {
1:                 return evictMessages();
1:             }
0:         });
1:     }
1:     
0:     private boolean evictMessages() {
1:         // Try to take the memory usage down below the low mark.
0:         try {            
0:             log.debug("Evicting cache memory usage: "+usageManager.getPercentUsage());
1:             
0:             LinkedList list = new LinkedList(evictors);
0:             while (list.size()>0 && usageManager.getPercentUsage() > usageLowMark) {
1:                 
0:                 // Evenly evict messages from all evictors
0:                 for (Iterator iter = list.iterator(); iter.hasNext();) {
0:                     CacheEvictor evictor = (CacheEvictor) iter.next();
0:                     if( evictor.evictCacheEntry() == null )
0:                         iter.remove();
1:                 }
1:             }
0:         } finally {
1:         }
1:         return false;
1:     }
1:     
0:     public void onMemoryUseChanged(UsageManager memoryManager, int oldPercentUsage, int newPercentUsage) {
1:         // Do we need to start evicting cache entries? Usage > than the
1:         // high mark
0:         if (oldPercentUsage < newPercentUsage && memoryManager.getPercentUsage()  >= usageHighMark) {
0:             try {
1:                 evictionTask.wakeup();
1:             } catch (InterruptedException e) {
1:                 Thread.currentThread().interrupt();
1:             }
1:         }
1:     }
1:     
1:     public void add(CacheEvictor evictor) {
1:         evictors.add(evictor);
1:     }
1:     
1:     public void remove(CacheEvictor evictor) {
1:         evictors.remove(evictor);
1:     }
1: }
author:Bosanac Dejan
-------------------------------------------------------------------------------
commit:8bf987b
/////////////////////////////////////////////////////////////////////////
1: import org.slf4j.Logger;
1: import org.slf4j.LoggerFactory;
1:     private static final Logger LOG = LoggerFactory.getLogger(CacheEvictionUsageListener.class);
author:Robert Davies
-------------------------------------------------------------------------------
commit:6d8e2c5
/////////////////////////////////////////////////////////////////////////
1: import org.apache.activemq.usage.Usage;
1: import org.apache.activemq.usage.UsageListener;
/////////////////////////////////////////////////////////////////////////
1:     private final Usage usage;
1:     public CacheEvictionUsageListener(Usage usage, int usageHighMark, int usageLowMark, TaskRunnerFactory taskRunnerFactory) {
1:         this.usage = usage;
/////////////////////////////////////////////////////////////////////////
0:         LOG.debug("Evicting cache memory usage: " + usage.getPercentUsage());
1:         while (list.size() > 0 && usage.getPercentUsage() > usageLowMark) {
/////////////////////////////////////////////////////////////////////////
1:     public void onUsageChanged(Usage usage, int oldPercentUsage, int newPercentUsage) {
1:         if (oldPercentUsage < newPercentUsage && usage.getPercentUsage() >= usageHighMark) {
commit:a3e3821
/////////////////////////////////////////////////////////////////////////
1:     boolean evictMessages() {
============================================================================