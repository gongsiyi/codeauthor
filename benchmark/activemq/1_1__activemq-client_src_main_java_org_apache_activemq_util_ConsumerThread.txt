1:9f0ab46: /**
1:9f0ab46:  * Licensed to the Apache Software Foundation (ASF) under one or more
1:9f0ab46:  * contributor license agreements.  See the NOTICE file distributed with
1:9f0ab46:  * this work for additional information regarding copyright ownership.
1:9f0ab46:  * The ASF licenses this file to You under the Apache License, Version 2.0
1:9f0ab46:  * (the "License"); you may not use this file except in compliance with
1:9f0ab46:  * the License.  You may obtain a copy of the License at
1:9f0ab46:  *
1:9f0ab46:  *      http://www.apache.org/licenses/LICENSE-2.0
1:9f0ab46:  *
1:9f0ab46:  * Unless required by applicable law or agreed to in writing, software
1:9f0ab46:  * distributed under the License is distributed on an "AS IS" BASIS,
1:9f0ab46:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:9f0ab46:  * See the License for the specific language governing permissions and
1:9f0ab46:  * limitations under the License.
1:9f0ab46:  */
1:9f0ab46: package org.apache.activemq.util;
2:9f0ab46: 
1:9f0ab46: import org.slf4j.Logger;
1:9f0ab46: import org.slf4j.LoggerFactory;
1:9f0ab46: 
1:9f0ab46: import javax.jms.*;
1:9f0ab46: import java.util.concurrent.CountDownLatch;
1:9f0ab46: 
1:9f0ab46: public class ConsumerThread extends Thread {
1:9f0ab46: 
1:9f0ab46:     private static final Logger LOG = LoggerFactory.getLogger(ConsumerThread.class);
1:9f0ab46: 
1:9f0ab46:     int messageCount = 1000;
1:9f0ab46:     int receiveTimeOut = 3000;
1:9f0ab46:     Destination destination;
1:9f0ab46:     Session session;
1:ebb3df7:     boolean durable;
1:9f0ab46:     boolean breakOnNull = true;
1:9f0ab46:     int sleep;
1:ebb3df7:     int batchSize;
1:9f0ab46: 
1:9f0ab46:     int received = 0;
1:9f0ab46:     int transactions = 0;
1:9f0ab46:     boolean running = false;
1:9f0ab46:     CountDownLatch finished;
1:df3ff9c:     boolean bytesAsText;
1:9f0ab46: 
1:9f0ab46:     public ConsumerThread(Session session, Destination destination) {
1:9f0ab46:         this.destination = destination;
1:9f0ab46:         this.session = session;
1:9f0ab46:     }
1:9f0ab46: 
1:9f0ab46:     @Override
1:9f0ab46:     public void run() {
1:9f0ab46:         running = true;
1:9f0ab46:         MessageConsumer consumer = null;
1:9f0ab46:         String threadName = Thread.currentThread().getName();
1:9f0ab46:         LOG.info(threadName + " wait until " + messageCount + " messages are consumed");
1:9f0ab46:         try {
1:ebb3df7:             if (durable && destination instanceof Topic) {
1:ebb3df7:                 consumer = session.createDurableSubscriber((Topic) destination, getName());
1:ebb3df7:             } else {
1:ebb3df7:                 consumer = session.createConsumer(destination);
1:ebb3df7:             }
1:9f0ab46:             while (running && received < messageCount) {
1:9f0ab46:                 Message msg = consumer.receive(receiveTimeOut);
1:9f0ab46:                 if (msg != null) {
1:9f0ab46:                     LOG.info(threadName + " Received " + (msg instanceof TextMessage ? ((TextMessage) msg).getText() : msg.getJMSMessageID()));
1:df3ff9c:                     if (bytesAsText && (msg instanceof BytesMessage)) {
1:df3ff9c:                         long length = ((BytesMessage) msg).getBodyLength();
1:df3ff9c:                         byte[] bytes = new byte[(int) length];
1:df3ff9c:                         ((BytesMessage) msg).readBytes(bytes);
1:df3ff9c:                         LOG.info("BytesMessage as text string: " + new String(bytes));
1:df3ff9c:                     }
1:9f0ab46:                     received++;
1:9f0ab46:                 } else {
1:9f0ab46:                     if (breakOnNull) {
1:9f0ab46:                         break;
1:9f0ab46:                     }
1:9f0ab46:                 }
1:9f0ab46: 
1:ebb3df7:                 if (session.getTransacted()) {
1:ebb3df7:                     if (batchSize > 0 && received > 0 && received % batchSize == 0) {
1:ebb3df7:                         LOG.info(threadName + " Committing transaction: " + transactions++);
1:ebb3df7:                         session.commit();
1:ebb3df7:                     }
1:ebb3df7:                 } else if (session.getAcknowledgeMode() == Session.CLIENT_ACKNOWLEDGE) {
1:ebb3df7:                     if (batchSize > 0 && received > 0 && received % batchSize == 0) {
1:ebb3df7:                         LOG.info("Acknowledging last " + batchSize + " messages; messages so far = " + received);
1:ebb3df7:                         msg.acknowledge();
1:ebb3df7:                     }
1:9f0ab46:                 }
1:9f0ab46:                 if (sleep > 0) {
1:9f0ab46:                     Thread.sleep(sleep);
1:9f0ab46:                 }
1:9f0ab46: 
1:9f0ab46:             }
1:9f0ab46:         } catch (Exception e) {
1:9f0ab46:             e.printStackTrace();
1:9f0ab46:         } finally {
1:9f0ab46:             if (finished != null) {
1:9f0ab46:                 finished.countDown();
1:9f0ab46:             }
1:9f0ab46:             if (consumer != null) {
1:9f0ab46:                 LOG.info(threadName + " Consumed: " + this.getReceived() + " messages");
1:9f0ab46:                 try {
1:9f0ab46:                     consumer.close();
1:9f0ab46:                 } catch (JMSException e) {
1:9f0ab46:                     e.printStackTrace();
1:9f0ab46:                 }
1:9f0ab46:             }
1:9f0ab46:         }
1:9f0ab46: 
1:9f0ab46:         LOG.info(threadName + " Consumer thread finished");
1:9f0ab46:     }
1:9f0ab46: 
1:9f0ab46:     public int getReceived() {
1:9f0ab46:         return received;
1:9f0ab46:     }
1:9f0ab46: 
1:ebb3df7:     public boolean isDurable() {
1:ebb3df7:         return durable;
1:ebb3df7:     }
1:ebb3df7: 
1:ebb3df7:     public void setDurable(boolean durable) {
1:ebb3df7:         this.durable = durable;
1:ebb3df7:     }
1:ebb3df7: 
1:9f0ab46:     public void setMessageCount(int messageCount) {
1:9f0ab46:         this.messageCount = messageCount;
1:9f0ab46:     }
1:9f0ab46: 
1:9f0ab46:     public void setBreakOnNull(boolean breakOnNull) {
1:9f0ab46:         this.breakOnNull = breakOnNull;
1:9f0ab46:     }
1:9f0ab46: 
1:ebb3df7:     public int getBatchSize() {
1:ebb3df7:         return batchSize;
1:9f0ab46:     }
1:9f0ab46: 
1:ebb3df7:     public void setBatchSize(int batchSize) {
1:ebb3df7:         this.batchSize = batchSize;
1:9f0ab46:     }
1:9f0ab46: 
1:9f0ab46:     public int getMessageCount() {
1:9f0ab46:         return messageCount;
1:9f0ab46:     }
1:9f0ab46: 
1:9f0ab46:     public boolean isBreakOnNull() {
1:9f0ab46:         return breakOnNull;
1:9f0ab46:     }
1:9f0ab46: 
1:9f0ab46:     public int getReceiveTimeOut() {
1:9f0ab46:         return receiveTimeOut;
1:9f0ab46:     }
1:9f0ab46: 
1:9f0ab46:     public void setReceiveTimeOut(int receiveTimeOut) {
1:9f0ab46:         this.receiveTimeOut = receiveTimeOut;
1:9f0ab46:     }
1:9f0ab46: 
1:9f0ab46:     public boolean isRunning() {
1:9f0ab46:         return running;
1:9f0ab46:     }
1:9f0ab46: 
1:9f0ab46:     public void setRunning(boolean running) {
1:9f0ab46:         this.running = running;
1:9f0ab46:     }
1:9f0ab46: 
1:9f0ab46:     public int getSleep() {
1:9f0ab46:         return sleep;
1:9f0ab46:     }
1:9f0ab46: 
1:9f0ab46:     public void setSleep(int sleep) {
1:9f0ab46:         this.sleep = sleep;
1:9f0ab46:     }
1:9f0ab46: 
1:9f0ab46:     public CountDownLatch getFinished() {
1:9f0ab46:         return finished;
1:9f0ab46:     }
1:9f0ab46: 
1:9f0ab46:     public void setFinished(CountDownLatch finished) {
1:9f0ab46:         this.finished = finished;
1:9f0ab46:     }
1:df3ff9c: 
1:df3ff9c:     public boolean isBytesAsText() {
1:df3ff9c:         return bytesAsText;
1:df3ff9c:     }
1:df3ff9c: 
1:df3ff9c:     public void setBytesAsText(boolean bytesAsText) {
1:df3ff9c:         this.bytesAsText = bytesAsText;
1:df3ff9c:     }
1:9f0ab46: }
============================================================================
author:Dejan Bosanac
-------------------------------------------------------------------------------
commit:ebb3df7
/////////////////////////////////////////////////////////////////////////
1:     boolean durable;
1:     int batchSize;
/////////////////////////////////////////////////////////////////////////
1:             if (durable && destination instanceof Topic) {
1:                 consumer = session.createDurableSubscriber((Topic) destination, getName());
1:             } else {
1:                 consumer = session.createConsumer(destination);
1:             }
/////////////////////////////////////////////////////////////////////////
1:                 if (session.getTransacted()) {
1:                     if (batchSize > 0 && received > 0 && received % batchSize == 0) {
1:                         LOG.info(threadName + " Committing transaction: " + transactions++);
1:                         session.commit();
1:                     }
1:                 } else if (session.getAcknowledgeMode() == Session.CLIENT_ACKNOWLEDGE) {
1:                     if (batchSize > 0 && received > 0 && received % batchSize == 0) {
1:                         LOG.info("Acknowledging last " + batchSize + " messages; messages so far = " + received);
1:                         msg.acknowledge();
1:                     }
/////////////////////////////////////////////////////////////////////////
1:     public boolean isDurable() {
1:         return durable;
1:     }
1: 
1:     public void setDurable(boolean durable) {
1:         this.durable = durable;
1:     }
1: 
/////////////////////////////////////////////////////////////////////////
1:     public int getBatchSize() {
1:         return batchSize;
1:     public void setBatchSize(int batchSize) {
1:         this.batchSize = batchSize;
commit:df3ff9c
/////////////////////////////////////////////////////////////////////////
1:     boolean bytesAsText;
/////////////////////////////////////////////////////////////////////////
1:                     if (bytesAsText && (msg instanceof BytesMessage)) {
1:                         long length = ((BytesMessage) msg).getBodyLength();
1:                         byte[] bytes = new byte[(int) length];
1:                         ((BytesMessage) msg).readBytes(bytes);
1:                         LOG.info("BytesMessage as text string: " + new String(bytes));
1:                     }
/////////////////////////////////////////////////////////////////////////
1: 
1:     public boolean isBytesAsText() {
1:         return bytesAsText;
1:     }
1: 
1:     public void setBytesAsText(boolean bytesAsText) {
1:         this.bytesAsText = bytesAsText;
1:     }
commit:9f0ab46
/////////////////////////////////////////////////////////////////////////
1: /**
1:  * Licensed to the Apache Software Foundation (ASF) under one or more
1:  * contributor license agreements.  See the NOTICE file distributed with
1:  * this work for additional information regarding copyright ownership.
1:  * The ASF licenses this file to You under the Apache License, Version 2.0
1:  * (the "License"); you may not use this file except in compliance with
1:  * the License.  You may obtain a copy of the License at
1:  *
1:  *      http://www.apache.org/licenses/LICENSE-2.0
1:  *
1:  * Unless required by applicable law or agreed to in writing, software
1:  * distributed under the License is distributed on an "AS IS" BASIS,
1:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:  * See the License for the specific language governing permissions and
1:  * limitations under the License.
1:  */
1: package org.apache.activemq.util;
1: 
1: import org.slf4j.Logger;
1: import org.slf4j.LoggerFactory;
1: 
1: import javax.jms.*;
1: import java.util.concurrent.CountDownLatch;
1: 
1: public class ConsumerThread extends Thread {
1: 
1:     private static final Logger LOG = LoggerFactory.getLogger(ConsumerThread.class);
1: 
1:     int messageCount = 1000;
1:     int receiveTimeOut = 3000;
1:     Destination destination;
1:     Session session;
1:     boolean breakOnNull = true;
1:     int sleep;
0:     int transactionBatchSize;
1: 
1:     int received = 0;
1:     int transactions = 0;
1:     boolean running = false;
1:     CountDownLatch finished;
1: 
1:     public ConsumerThread(Session session, Destination destination) {
1:         this.destination = destination;
1:         this.session = session;
1:     }
1: 
1:     @Override
1:     public void run() {
1:         running = true;
1:         MessageConsumer consumer = null;
1:         String threadName = Thread.currentThread().getName();
1:         LOG.info(threadName + " wait until " + messageCount + " messages are consumed");
1:         try {
0:             consumer = session.createConsumer(destination);
1:             while (running && received < messageCount) {
1:                 Message msg = consumer.receive(receiveTimeOut);
1:                 if (msg != null) {
1:                     LOG.info(threadName + " Received " + (msg instanceof TextMessage ? ((TextMessage) msg).getText() : msg.getJMSMessageID()));
1:                     received++;
1:                 } else {
1:                     if (breakOnNull) {
1:                         break;
1:                     }
1:                 }
1: 
0:                 if (transactionBatchSize > 0 && received > 0 && received % transactionBatchSize == 0) {
0:                     LOG.info(threadName + " Committing transaction: " + transactions++);
0:                     session.commit();
1:                 }
1: 
1:                 if (sleep > 0) {
1:                     Thread.sleep(sleep);
1:                 }
1: 
1:             }
1:         } catch (Exception e) {
1:             e.printStackTrace();
1:         } finally {
1:             if (finished != null) {
1:                 finished.countDown();
1:             }
1:             if (consumer != null) {
1:                 LOG.info(threadName + " Consumed: " + this.getReceived() + " messages");
1:                 try {
1:                     consumer.close();
1:                 } catch (JMSException e) {
1:                     e.printStackTrace();
1:                 }
1:             }
1:         }
1: 
1:         LOG.info(threadName + " Consumer thread finished");
1:     }
1: 
1:     public int getReceived() {
1:         return received;
1:     }
1: 
1:     public void setMessageCount(int messageCount) {
1:         this.messageCount = messageCount;
1:     }
1: 
1:     public void setBreakOnNull(boolean breakOnNull) {
1:         this.breakOnNull = breakOnNull;
1:     }
1: 
0:     public int getTransactionBatchSize() {
0:         return transactionBatchSize;
1:     }
1: 
0:     public void setTransactionBatchSize(int transactionBatchSize) {
0:         this.transactionBatchSize = transactionBatchSize;
1:     }
1: 
1:     public int getMessageCount() {
1:         return messageCount;
1:     }
1: 
1:     public boolean isBreakOnNull() {
1:         return breakOnNull;
1:     }
1: 
1:     public int getReceiveTimeOut() {
1:         return receiveTimeOut;
1:     }
1: 
1:     public void setReceiveTimeOut(int receiveTimeOut) {
1:         this.receiveTimeOut = receiveTimeOut;
1:     }
1: 
1:     public boolean isRunning() {
1:         return running;
1:     }
1: 
1:     public void setRunning(boolean running) {
1:         this.running = running;
1:     }
1: 
1:     public int getSleep() {
1:         return sleep;
1:     }
1: 
1:     public void setSleep(int sleep) {
1:         this.sleep = sleep;
1:     }
1: 
1:     public CountDownLatch getFinished() {
1:         return finished;
1:     }
1: 
1:     public void setFinished(CountDownLatch finished) {
1:         this.finished = finished;
1:     }
1: }
============================================================================