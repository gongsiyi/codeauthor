1:d54e21b: /*
1:6e69319:  * Licensed to the Apache Software Foundation (ASF) under one or more
1:6e69319:  * contributor license agreements.  See the NOTICE file distributed with
1:6e69319:  * this work for additional information regarding copyright ownership.
1:6e69319:  * The ASF licenses this file to You under the Apache License, Version 2.0
1:6e69319:  * (the "License"); you may not use this file except in compliance with
1:6e69319:  * the License.  You may obtain a copy of the License at
1:6e69319:  *
1:6e69319:  *      http://www.apache.org/licenses/LICENSE-2.0
1:6e69319:  *
1:6e69319:  * Unless required by applicable law or agreed to in writing, software
1:6e69319:  * distributed under the License is distributed on an "AS IS" BASIS,
1:6e69319:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:6e69319:  * See the License for the specific language governing permissions and
1:6e69319:  * limitations under the License.
1:6e69319:  */
1:6e69319: package org.apache.activemq.transport.amqp.message;
36:6e69319: 
1:d54e21b: import static org.apache.activemq.transport.amqp.message.AmqpMessageSupport.AMQP_DATA;
1:d54e21b: import static org.apache.activemq.transport.amqp.message.AmqpMessageSupport.AMQP_NULL;
1:d54e21b: import static org.apache.activemq.transport.amqp.message.AmqpMessageSupport.AMQP_SEQUENCE;
1:d54e21b: import static org.apache.activemq.transport.amqp.message.AmqpMessageSupport.AMQP_UNKNOWN;
1:d54e21b: import static org.apache.activemq.transport.amqp.message.AmqpMessageSupport.AMQP_VALUE_BINARY;
1:63d62a7: import static org.apache.activemq.transport.amqp.message.AmqpMessageSupport.JMS_AMQP_ORIGINAL_ENCODING;
1:528c25c: import static org.apache.activemq.transport.amqp.message.JMSMappingOutboundTransformer.JMS_DEST_TYPE_MSG_ANNOTATION;
1:528c25c: import static org.apache.activemq.transport.amqp.message.JMSMappingOutboundTransformer.JMS_REPLY_TO_TYPE_MSG_ANNOTATION;
1:528c25c: import static org.apache.activemq.transport.amqp.message.JMSMappingOutboundTransformer.QUEUE_TYPE;
1:528c25c: import static org.apache.activemq.transport.amqp.message.JMSMappingOutboundTransformer.TEMP_QUEUE_TYPE;
1:528c25c: import static org.apache.activemq.transport.amqp.message.JMSMappingOutboundTransformer.TEMP_TOPIC_TYPE;
1:528c25c: import static org.apache.activemq.transport.amqp.message.JMSMappingOutboundTransformer.TOPIC_TYPE;
1:6e69319: import static org.junit.Assert.assertEquals;
1:d54e21b: import static org.junit.Assert.assertFalse;
1:6e69319: import static org.junit.Assert.assertNotNull;
1:d54e21b: import static org.junit.Assert.assertNull;
1:6e69319: import static org.junit.Assert.assertTrue;
1:6e69319: import static org.junit.Assert.fail;
1:d54e21b: 
1:d54e21b: import java.io.ObjectInputStream;
1:d54e21b: import java.io.Serializable;
1:d54e21b: import java.nio.charset.StandardCharsets;
1:6e69319: import java.util.Collections;
1:d54e21b: import java.util.List;
1:6e69319: import java.util.Map;
1:d54e21b: import java.util.UUID;
1:d54e21b: 
1:d54e21b: import javax.jms.JMSException;
1:d54e21b: 
1:d54e21b: import org.apache.activemq.ActiveMQConnection;
1:d54e21b: import org.apache.activemq.command.ActiveMQBytesMessage;
1:63d62a7: import org.apache.activemq.command.ActiveMQDestination;
1:d54e21b: import org.apache.activemq.command.ActiveMQMapMessage;
1:d54e21b: import org.apache.activemq.command.ActiveMQMessage;
1:d54e21b: import org.apache.activemq.command.ActiveMQObjectMessage;
1:63d62a7: import org.apache.activemq.command.ActiveMQQueue;
1:d54e21b: import org.apache.activemq.command.ActiveMQStreamMessage;
1:63d62a7: import org.apache.activemq.command.ActiveMQTempQueue;
1:63d62a7: import org.apache.activemq.command.ActiveMQTempTopic;
1:d54e21b: import org.apache.activemq.command.ActiveMQTextMessage;
1:63d62a7: import org.apache.activemq.command.ActiveMQTopic;
1:d54e21b: import org.apache.activemq.util.ByteArrayInputStream;
1:d54e21b: import org.apache.qpid.proton.amqp.Binary;
1:6e69319: import org.apache.qpid.proton.amqp.Symbol;
1:d54e21b: import org.apache.qpid.proton.amqp.messaging.AmqpSequence;
1:6e69319: import org.apache.qpid.proton.amqp.messaging.AmqpValue;
1:d54e21b: import org.apache.qpid.proton.amqp.messaging.Data;
1:6e69319: import org.apache.qpid.proton.amqp.messaging.MessageAnnotations;
1:6e69319: import org.apache.qpid.proton.message.Message;
1:6e69319: import org.junit.Test;
1:6e69319: import org.mockito.Mockito;
1:6e69319: 
1:6e69319: public class JMSMappingOutboundTransformerTest {
1:d54e21b: 
1:63d62a7:     private final UUID TEST_OBJECT_VALUE = UUID.fromString("fee14b62-09e0-4ac6-a4c3-4206c630d844");
1:63d62a7:     private final String TEST_ADDRESS = "queue://testAddress";
1:63d62a7: 
1:d54e21b:     //----- no-body Message type tests ---------------------------------------//
1:d54e21b: 
15:6e69319:     @Test
1:d54e21b:     public void testConvertMessageToAmqpMessageWithNoBody() throws Exception {
1:d54e21b:         ActiveMQMessage outbound = createMessage();
1:d54e21b:         outbound.onSend();
1:d54e21b:         outbound.storeContent();
1:d54e21b: 
1:63d62a7:         JMSMappingOutboundTransformer transformer = new JMSMappingOutboundTransformer();
1:d54e21b: 
1:63d62a7:         EncodedMessage encoded = transformer.transform(outbound);
1:63d62a7:         assertNotNull(encoded);
1:63d62a7: 
1:63d62a7:         Message amqp = encoded.decode();
1:63d62a7: 
1:d54e21b:         assertNull(amqp.getBody());
1:d54e21b:     }
1:63d62a7: 
1:d54e21b:     @Test
1:d54e21b:     public void testConvertTextMessageToAmqpMessageWithNoBodyOriginalEncodingWasNull() throws Exception {
1:d54e21b:         ActiveMQTextMessage outbound = createTextMessage();
1:63d62a7:         outbound.setShortProperty(JMS_AMQP_ORIGINAL_ENCODING, AMQP_NULL);
1:d54e21b:         outbound.onSend();
1:d54e21b:         outbound.storeContent();
1:63d62a7: 
1:63d62a7:         JMSMappingOutboundTransformer transformer = new JMSMappingOutboundTransformer();
1:63d62a7: 
1:63d62a7:         EncodedMessage encoded = transformer.transform(outbound);
1:63d62a7:         assertNotNull(encoded);
1:63d62a7: 
1:63d62a7:         Message amqp = encoded.decode();
1:63d62a7: 
1:d54e21b:         assertNull(amqp.getBody());
1:d54e21b:     }
1:63d62a7: 
1:d54e21b:     //----- BytesMessage type tests ---------------------------------------//
1:63d62a7: 
1:d54e21b:     @Test
1:d54e21b:     public void testConvertEmptyBytesMessageToAmqpMessageWithDataBody() throws Exception {
1:d54e21b:         ActiveMQBytesMessage outbound = createBytesMessage();
1:d54e21b:         outbound.onSend();
1:d54e21b:         outbound.storeContent();
1:63d62a7: 
1:63d62a7:         JMSMappingOutboundTransformer transformer = new JMSMappingOutboundTransformer();
1:63d62a7: 
1:63d62a7:         EncodedMessage encoded = transformer.transform(outbound);
1:63d62a7:         assertNotNull(encoded);
1:63d62a7: 
1:63d62a7:         Message amqp = encoded.decode();
1:63d62a7: 
1:d54e21b:         assertNotNull(amqp.getBody());
1:d54e21b:         assertTrue(amqp.getBody() instanceof Data);
1:d54e21b:         assertTrue(((Data) amqp.getBody()).getValue() instanceof Binary);
1:d54e21b:         assertEquals(0, ((Data) amqp.getBody()).getValue().getLength());
1:d54e21b:     }
1:63d62a7: 
1:d54e21b:     @Test
1:d54e21b:     public void testConvertUncompressedBytesMessageToAmqpMessageWithDataBody() throws Exception {
1:d54e21b:         byte[] expectedPayload = new byte[] { 8, 16, 24, 32 };
1:d54e21b:         ActiveMQBytesMessage outbound = createBytesMessage();
1:d54e21b:         outbound.writeBytes(expectedPayload);
1:d54e21b:         outbound.storeContent();
1:d54e21b:         outbound.onSend();
1:d54e21b: 
1:63d62a7:         JMSMappingOutboundTransformer transformer = new JMSMappingOutboundTransformer();
1:d54e21b: 
1:63d62a7:         EncodedMessage encoded = transformer.transform(outbound);
1:63d62a7:         assertNotNull(encoded);
1:d54e21b: 
1:63d62a7:         Message amqp = encoded.decode();
1:d54e21b: 
1:d54e21b:         assertNotNull(amqp.getBody());
1:d54e21b:         assertTrue(amqp.getBody() instanceof Data);
1:d54e21b:         assertTrue(((Data) amqp.getBody()).getValue() instanceof Binary);
1:d54e21b:         assertEquals(4, ((Data) amqp.getBody()).getValue().getLength());
1:d54e21b: 
1:d54e21b:         Binary amqpData = ((Data) amqp.getBody()).getValue();
1:d54e21b:         Binary inputData = new Binary(expectedPayload);
1:d54e21b: 
1:d54e21b:         assertTrue(inputData.equals(amqpData));
1:d54e21b:     }
1:d54e21b: 
1:d54e21b:     @Test
1:d54e21b:     public void testConvertCompressedBytesMessageToAmqpMessageWithDataBody() throws Exception {
1:d54e21b:         byte[] expectedPayload = new byte[] { 8, 16, 24, 32 };
1:d54e21b:         ActiveMQBytesMessage outbound = createBytesMessage(true);
1:d54e21b:         outbound.writeBytes(expectedPayload);
1:d54e21b:         outbound.storeContent();
1:d54e21b:         outbound.onSend();
1:d54e21b: 
1:63d62a7:         JMSMappingOutboundTransformer transformer = new JMSMappingOutboundTransformer();
1:d54e21b: 
1:63d62a7:         EncodedMessage encoded = transformer.transform(outbound);
1:63d62a7:         assertNotNull(encoded);
1:d54e21b: 
1:63d62a7:         Message amqp = encoded.decode();
1:d54e21b: 
1:d54e21b:         assertNotNull(amqp.getBody());
1:d54e21b:         assertTrue(amqp.getBody() instanceof Data);
1:d54e21b:         assertTrue(((Data) amqp.getBody()).getValue() instanceof Binary);
1:d54e21b:         assertEquals(4, ((Data) amqp.getBody()).getValue().getLength());
1:d54e21b: 
1:d54e21b:         Binary amqpData = ((Data) amqp.getBody()).getValue();
1:d54e21b:         Binary inputData = new Binary(expectedPayload);
1:d54e21b: 
1:d54e21b:         assertTrue(inputData.equals(amqpData));
1:d54e21b:     }
1:d54e21b: 
1:d54e21b:     @Test
1:d54e21b:     public void testConvertEmptyBytesMessageToAmqpMessageWithAmqpValueBody() throws Exception {
1:d54e21b:         ActiveMQBytesMessage outbound = createBytesMessage();
1:63d62a7:         outbound.setShortProperty(JMS_AMQP_ORIGINAL_ENCODING, AMQP_VALUE_BINARY);
1:d54e21b:         outbound.onSend();
1:d54e21b:         outbound.storeContent();
1:63d62a7: 
1:63d62a7:         JMSMappingOutboundTransformer transformer = new JMSMappingOutboundTransformer();
1:d54e21b: 
1:63d62a7:         EncodedMessage encoded = transformer.transform(outbound);
1:63d62a7:         assertNotNull(encoded);
1:d54e21b: 
1:63d62a7:         Message amqp = encoded.decode();
1:d54e21b: 
1:d54e21b:         assertNotNull(amqp.getBody());
1:d54e21b:         assertTrue(amqp.getBody() instanceof AmqpValue);
1:d54e21b:         assertTrue(((AmqpValue) amqp.getBody()).getValue() instanceof Binary);
1:d54e21b:         assertEquals(0, ((Binary) ((AmqpValue) amqp.getBody()).getValue()).getLength());
1:d54e21b:     }
1:d54e21b: 
1:d54e21b:     @Test
1:d54e21b:     public void testConvertUncompressedBytesMessageToAmqpMessageWithAmqpValueBody() throws Exception {
1:d54e21b:         byte[] expectedPayload = new byte[] { 8, 16, 24, 32 };
1:d54e21b:         ActiveMQBytesMessage outbound = createBytesMessage();
1:63d62a7:         outbound.setShortProperty(JMS_AMQP_ORIGINAL_ENCODING, AMQP_VALUE_BINARY);
1:d54e21b:         outbound.writeBytes(expectedPayload);
1:d54e21b:         outbound.storeContent();
1:d54e21b:         outbound.onSend();
1:63d62a7: 
1:63d62a7:         JMSMappingOutboundTransformer transformer = new JMSMappingOutboundTransformer();
1:d54e21b: 
1:63d62a7:         EncodedMessage encoded = transformer.transform(outbound);
1:63d62a7:         assertNotNull(encoded);
1:d54e21b: 
1:63d62a7:         Message amqp = encoded.decode();
1:d54e21b: 
1:d54e21b:         assertNotNull(amqp.getBody());
1:d54e21b:         assertTrue(amqp.getBody() instanceof AmqpValue);
1:d54e21b:         assertTrue(((AmqpValue) amqp.getBody()).getValue() instanceof Binary);
1:d54e21b:         assertEquals(4, ((Binary) ((AmqpValue) amqp.getBody()).getValue()).getLength());
1:d54e21b: 
1:d54e21b:         Binary amqpData = (Binary) ((AmqpValue) amqp.getBody()).getValue();
1:d54e21b:         Binary inputData = new Binary(expectedPayload);
1:d54e21b: 
1:d54e21b:         assertTrue(inputData.equals(amqpData));
1:d54e21b:     }
1:d54e21b: 
1:d54e21b:     @Test
1:d54e21b:     public void testConvertCompressedBytesMessageToAmqpMessageWithAmqpValueBody() throws Exception {
1:d54e21b:         byte[] expectedPayload = new byte[] { 8, 16, 24, 32 };
1:d54e21b:         ActiveMQBytesMessage outbound = createBytesMessage(true);
1:63d62a7:         outbound.setShortProperty(JMS_AMQP_ORIGINAL_ENCODING, AMQP_VALUE_BINARY);
1:d54e21b:         outbound.writeBytes(expectedPayload);
1:d54e21b:         outbound.storeContent();
1:d54e21b:         outbound.onSend();
1:63d62a7: 
1:63d62a7:         JMSMappingOutboundTransformer transformer = new JMSMappingOutboundTransformer();
1:d54e21b: 
1:63d62a7:         EncodedMessage encoded = transformer.transform(outbound);
1:63d62a7:         assertNotNull(encoded);
1:d54e21b: 
1:63d62a7:         Message amqp = encoded.decode();
1:d54e21b: 
1:d54e21b:         assertNotNull(amqp.getBody());
1:d54e21b:         assertTrue(amqp.getBody() instanceof AmqpValue);
1:d54e21b:         assertTrue(((AmqpValue) amqp.getBody()).getValue() instanceof Binary);
1:d54e21b:         assertEquals(4, ((Binary) ((AmqpValue) amqp.getBody()).getValue()).getLength());
1:d54e21b: 
1:d54e21b:         Binary amqpData = (Binary) ((AmqpValue) amqp.getBody()).getValue();
1:d54e21b:         Binary inputData = new Binary(expectedPayload);
1:d54e21b: 
1:d54e21b:         assertTrue(inputData.equals(amqpData));
1:d54e21b:     }
1:d54e21b: 
1:d54e21b:     //----- MapMessage type tests --------------------------------------------//
1:d54e21b: 
1:d54e21b:     @Test
1:d54e21b:     public void testConvertMapMessageToAmqpMessageWithNoBody() throws Exception {
1:d54e21b:         ActiveMQMapMessage outbound = createMapMessage();
1:d54e21b:         outbound.onSend();
1:d54e21b:         outbound.storeContent();
1:d54e21b: 
1:63d62a7:         JMSMappingOutboundTransformer transformer = new JMSMappingOutboundTransformer();
1:d54e21b: 
1:63d62a7:         EncodedMessage encoded = transformer.transform(outbound);
1:63d62a7:         assertNotNull(encoded);
1:d54e21b: 
1:63d62a7:         Message amqp = encoded.decode();
1:d54e21b: 
1:d54e21b:         assertNotNull(amqp.getBody());
1:d54e21b:         assertTrue(amqp.getBody() instanceof AmqpValue);
1:d54e21b:         assertTrue(((AmqpValue) amqp.getBody()).getValue() instanceof Map);
1:d54e21b:     }
1:d54e21b: 
1:d54e21b:     @Test
1:d88c4e4:     public void testConvertMapMessageToAmqpMessageWithByteArrayValueInBody() throws Exception {
1:d88c4e4:         final byte[] byteArray = new byte[] { 1, 2, 3, 4, 5 };
1:d88c4e4: 
1:d88c4e4:         ActiveMQMapMessage outbound = createMapMessage();
1:d88c4e4:         outbound.setBytes("bytes", byteArray);
1:d88c4e4:         outbound.onSend();
1:d88c4e4:         outbound.storeContent();
1:d88c4e4: 
1:d88c4e4:         JMSMappingOutboundTransformer transformer = new JMSMappingOutboundTransformer();
1:d88c4e4: 
1:d88c4e4:         EncodedMessage encoded = transformer.transform(outbound);
1:d88c4e4:         assertNotNull(encoded);
1:d88c4e4: 
1:d88c4e4:         Message amqp = encoded.decode();
1:d88c4e4: 
1:d88c4e4:         assertNotNull(amqp.getBody());
1:d88c4e4:         assertTrue(amqp.getBody() instanceof AmqpValue);
1:d88c4e4:         assertTrue(((AmqpValue) amqp.getBody()).getValue() instanceof Map);
1:d88c4e4: 
1:d88c4e4:         @SuppressWarnings("unchecked")
1:d88c4e4:         Map<Object, Object> amqpMap = (Map<Object, Object>) ((AmqpValue) amqp.getBody()).getValue();
1:d88c4e4: 
1:d88c4e4:         assertEquals(1, amqpMap.size());
1:d88c4e4:         Binary readByteArray = (Binary) amqpMap.get("bytes");
1:d88c4e4:         assertNotNull(readByteArray);
1:d88c4e4:     }
1:d88c4e4: 
1:d88c4e4:     @Test
1:d54e21b:     public void testConvertMapMessageToAmqpMessage() throws Exception {
1:d54e21b:         ActiveMQMapMessage outbound = createMapMessage();
1:d54e21b:         outbound.setString("property-1", "string");
1:d54e21b:         outbound.setInt("property-2", 1);
1:d54e21b:         outbound.setBoolean("property-3", true);
1:d54e21b:         outbound.onSend();
1:d54e21b:         outbound.storeContent();
1:d54e21b: 
1:63d62a7:         JMSMappingOutboundTransformer transformer = new JMSMappingOutboundTransformer();
1:d54e21b: 
1:63d62a7:         EncodedMessage encoded = transformer.transform(outbound);
1:63d62a7:         assertNotNull(encoded);
1:d54e21b: 
1:63d62a7:         Message amqp = encoded.decode();
1:d54e21b: 
1:d54e21b:         assertNotNull(amqp.getBody());
1:d54e21b:         assertTrue(amqp.getBody() instanceof AmqpValue);
1:d54e21b:         assertTrue(((AmqpValue) amqp.getBody()).getValue() instanceof Map);
1:d54e21b: 
1:d54e21b:         @SuppressWarnings("unchecked")
1:d54e21b:         Map<Object, Object> amqpMap = (Map<Object, Object>) ((AmqpValue) amqp.getBody()).getValue();
1:d54e21b: 
1:d54e21b:         assertEquals(3, amqpMap.size());
1:d54e21b:         assertTrue("string".equals(amqpMap.get("property-1")));
1:d54e21b:     }
1:d54e21b: 
1:d54e21b:     @Test
1:d54e21b:     public void testConvertCompressedMapMessageToAmqpMessage() throws Exception {
1:d54e21b:         ActiveMQMapMessage outbound = createMapMessage(true);
1:d54e21b:         outbound.setString("property-1", "string");
1:d54e21b:         outbound.setInt("property-2", 1);
1:d54e21b:         outbound.setBoolean("property-3", true);
1:d54e21b:         outbound.onSend();
1:d54e21b:         outbound.storeContent();
1:d54e21b: 
1:63d62a7:         JMSMappingOutboundTransformer transformer = new JMSMappingOutboundTransformer();
1:d54e21b: 
1:63d62a7:         EncodedMessage encoded = transformer.transform(outbound);
1:63d62a7:         assertNotNull(encoded);
1:d54e21b: 
1:63d62a7:         Message amqp = encoded.decode();
1:d54e21b: 
1:d54e21b:         assertNotNull(amqp.getBody());
1:d54e21b:         assertTrue(amqp.getBody() instanceof AmqpValue);
1:d54e21b:         assertTrue(((AmqpValue) amqp.getBody()).getValue() instanceof Map);
1:d54e21b: 
1:d54e21b:         @SuppressWarnings("unchecked")
1:d54e21b:         Map<Object, Object> amqpMap = (Map<Object, Object>) ((AmqpValue) amqp.getBody()).getValue();
1:d54e21b: 
1:d54e21b:         assertEquals(3, amqpMap.size());
1:d54e21b:         assertTrue("string".equals(amqpMap.get("property-1")));
1:d54e21b:     }
1:d54e21b: 
1:d54e21b:     //----- StreamMessage type tests -----------------------------------------//
1:d54e21b: 
1:d54e21b:     @Test
1:d54e21b:     public void testConvertStreamMessageToAmqpMessageWithAmqpValueBody() throws Exception {
1:d54e21b:         ActiveMQStreamMessage outbound = createStreamMessage();
1:d54e21b:         outbound.onSend();
1:d54e21b:         outbound.storeContent();
1:d54e21b: 
1:63d62a7:         JMSMappingOutboundTransformer transformer = new JMSMappingOutboundTransformer();
1:d54e21b: 
1:63d62a7:         EncodedMessage encoded = transformer.transform(outbound);
1:63d62a7:         assertNotNull(encoded);
1:d54e21b: 
1:63d62a7:         Message amqp = encoded.decode();
1:d54e21b: 
1:d54e21b:         assertNotNull(amqp.getBody());
1:d54e21b:         assertTrue(amqp.getBody() instanceof AmqpValue);
1:d54e21b:         assertTrue(((AmqpValue) amqp.getBody()).getValue() instanceof List);
1:d54e21b:     }
1:d54e21b: 
1:d54e21b:     @Test
1:d54e21b:     public void testConvertStreamMessageToAmqpMessageWithAmqpSequencey() throws Exception {
1:d54e21b:         ActiveMQStreamMessage outbound = createStreamMessage();
1:63d62a7:         outbound.setShortProperty(JMS_AMQP_ORIGINAL_ENCODING, AMQP_SEQUENCE);
1:d54e21b:         outbound.onSend();
1:d54e21b:         outbound.storeContent();
1:63d62a7: 
1:63d62a7:         JMSMappingOutboundTransformer transformer = new JMSMappingOutboundTransformer();
1:d54e21b: 
1:63d62a7:         EncodedMessage encoded = transformer.transform(outbound);
1:63d62a7:         assertNotNull(encoded);
1:d54e21b: 
1:63d62a7:         Message amqp = encoded.decode();
1:d54e21b: 
1:d54e21b:         assertNotNull(amqp.getBody());
1:d54e21b:         assertTrue(amqp.getBody() instanceof AmqpSequence);
1:d54e21b:         assertTrue(((AmqpSequence) amqp.getBody()).getValue() instanceof List);
1:d54e21b:     }
1:d54e21b: 
1:d54e21b:     @Test
1:d54e21b:     public void testConvertCompressedStreamMessageToAmqpMessageWithAmqpValueBody() throws Exception {
1:d54e21b:         ActiveMQStreamMessage outbound = createStreamMessage(true);
1:d54e21b:         outbound.writeBoolean(false);
1:d54e21b:         outbound.writeString("test");
1:d54e21b:         outbound.onSend();
1:d54e21b:         outbound.storeContent();
1:d54e21b: 
1:63d62a7:         JMSMappingOutboundTransformer transformer = new JMSMappingOutboundTransformer();
1:d54e21b: 
1:63d62a7:         EncodedMessage encoded = transformer.transform(outbound);
1:63d62a7:         assertNotNull(encoded);
1:d54e21b: 
1:63d62a7:         Message amqp = encoded.decode();
1:d54e21b: 
1:d54e21b:         assertNotNull(amqp.getBody());
1:d54e21b:         assertTrue(amqp.getBody() instanceof AmqpValue);
1:d54e21b:         assertTrue(((AmqpValue) amqp.getBody()).getValue() instanceof List);
1:d54e21b: 
1:d54e21b:         @SuppressWarnings("unchecked")
1:d54e21b:         List<Object> amqpList = (List<Object>) ((AmqpValue) amqp.getBody()).getValue();
1:d54e21b: 
1:d54e21b:         assertEquals(2, amqpList.size());
1:d54e21b:     }
1:d54e21b: 
1:d54e21b:     @Test
1:d54e21b:     public void testConvertCompressedStreamMessageToAmqpMessageWithAmqpSequencey() throws Exception {
1:d54e21b:         ActiveMQStreamMessage outbound = createStreamMessage(true);
1:63d62a7:         outbound.setShortProperty(JMS_AMQP_ORIGINAL_ENCODING, AMQP_SEQUENCE);
1:d54e21b:         outbound.writeBoolean(false);
1:d54e21b:         outbound.writeString("test");
1:d54e21b:         outbound.onSend();
1:d54e21b:         outbound.storeContent();
1:63d62a7: 
1:63d62a7:         JMSMappingOutboundTransformer transformer = new JMSMappingOutboundTransformer();
1:d54e21b: 
1:63d62a7:         EncodedMessage encoded = transformer.transform(outbound);
1:63d62a7:         assertNotNull(encoded);
1:d54e21b: 
1:63d62a7:         Message amqp = encoded.decode();
1:d54e21b: 
1:d54e21b:         assertNotNull(amqp.getBody());
1:d54e21b:         assertTrue(amqp.getBody() instanceof AmqpSequence);
1:d54e21b:         assertTrue(((AmqpSequence) amqp.getBody()).getValue() instanceof List);
1:d54e21b: 
1:d54e21b:         @SuppressWarnings("unchecked")
1:d54e21b:         List<Object> amqpList = ((AmqpSequence) amqp.getBody()).getValue();
1:d54e21b: 
1:d54e21b:         assertEquals(2, amqpList.size());
1:d54e21b:     }
1:d54e21b: 
1:d54e21b:     //----- ObjectMessage type tests -----------------------------------------//
1:d54e21b: 
1:d54e21b:     @Test
1:d54e21b:     public void testConvertEmptyObjectMessageToAmqpMessageWithDataBody() throws Exception {
1:d54e21b:         ActiveMQObjectMessage outbound = createObjectMessage();
1:d54e21b:         outbound.onSend();
1:d54e21b:         outbound.storeContent();
1:d54e21b: 
1:63d62a7:         JMSMappingOutboundTransformer transformer = new JMSMappingOutboundTransformer();
1:d54e21b: 
1:63d62a7:         EncodedMessage encoded = transformer.transform(outbound);
1:63d62a7:         assertNotNull(encoded);
1:d54e21b: 
1:63d62a7:         Message amqp = encoded.decode();
1:d54e21b: 
1:d54e21b:         assertNotNull(amqp.getBody());
1:d54e21b:         assertTrue(amqp.getBody() instanceof Data);
1:d54e21b:         assertEquals(0, ((Data) amqp.getBody()).getValue().getLength());
1:d54e21b:     }
1:6e69319: 
1:d54e21b:     @Test
1:d54e21b:     public void testConvertEmptyObjectMessageToAmqpMessageUnknownEncodingGetsDataSection() throws Exception {
1:d54e21b:         ActiveMQObjectMessage outbound = createObjectMessage();
1:63d62a7:         outbound.setShortProperty(JMS_AMQP_ORIGINAL_ENCODING, AMQP_UNKNOWN);
1:d54e21b:         outbound.onSend();
1:d54e21b:         outbound.storeContent();
1:63d62a7: 
1:63d62a7:         JMSMappingOutboundTransformer transformer = new JMSMappingOutboundTransformer();
1:d54e21b: 
1:63d62a7:         EncodedMessage encoded = transformer.transform(outbound);
1:63d62a7:         assertNotNull(encoded);
1:d54e21b: 
1:63d62a7:         Message amqp = encoded.decode();
1:d54e21b: 
1:d54e21b:         assertNotNull(amqp.getBody());
1:d54e21b:         assertTrue(amqp.getBody() instanceof Data);
1:d54e21b:         assertEquals(0, ((Data) amqp.getBody()).getValue().getLength());
1:d54e21b:     }
1:d54e21b: 
1:d54e21b:     @Test
1:d54e21b:     public void testConvertEmptyObjectMessageToAmqpMessageWithAmqpValueBody() throws Exception {
1:d54e21b:         ActiveMQObjectMessage outbound = createObjectMessage();
1:63d62a7:         outbound.setShortProperty(JMS_AMQP_ORIGINAL_ENCODING, AMQP_VALUE_BINARY);
1:d54e21b:         outbound.onSend();
1:d54e21b:         outbound.storeContent();
1:63d62a7: 
1:63d62a7:         JMSMappingOutboundTransformer transformer = new JMSMappingOutboundTransformer();
1:d54e21b: 
1:63d62a7:         EncodedMessage encoded = transformer.transform(outbound);
1:63d62a7:         assertNotNull(encoded);
1:d54e21b: 
1:63d62a7:         Message amqp = encoded.decode();
1:d54e21b: 
1:d54e21b:         assertNotNull(amqp.getBody());
1:d54e21b:         assertTrue(amqp.getBody() instanceof AmqpValue);
1:d54e21b:         assertTrue(((AmqpValue)amqp.getBody()).getValue() instanceof Binary);
1:d54e21b:         assertEquals(0, ((Binary) ((AmqpValue) amqp.getBody()).getValue()).getLength());
1:d54e21b:     }
1:d54e21b: 
1:d54e21b:     @Test
1:d54e21b:     public void testConvertObjectMessageToAmqpMessageWithDataBody() throws Exception {
1:0dd806f:         ActiveMQObjectMessage outbound = createObjectMessage(TEST_OBJECT_VALUE);
1:d54e21b:         outbound.onSend();
1:d54e21b:         outbound.storeContent();
1:d54e21b: 
1:63d62a7:         JMSMappingOutboundTransformer transformer = new JMSMappingOutboundTransformer();
1:d54e21b: 
1:63d62a7:         EncodedMessage encoded = transformer.transform(outbound);
1:63d62a7:         assertNotNull(encoded);
1:d54e21b: 
1:63d62a7:         Message amqp = encoded.decode();
1:d54e21b: 
1:d54e21b:         assertNotNull(amqp.getBody());
1:d54e21b:         assertTrue(amqp.getBody() instanceof Data);
1:d54e21b:         assertFalse(0 == ((Data) amqp.getBody()).getValue().getLength());
1:d54e21b: 
1:d54e21b:         Object value = deserialize(((Data) amqp.getBody()).getValue().getArray());
1:d54e21b:         assertNotNull(value);
1:d54e21b:         assertTrue(value instanceof UUID);
1:d54e21b:     }
1:d54e21b: 
1:d54e21b:     @Test
1:d54e21b:     public void testConvertObjectMessageToAmqpMessageUnknownEncodingGetsDataSection() throws Exception {
1:0dd806f:         ActiveMQObjectMessage outbound = createObjectMessage(TEST_OBJECT_VALUE);
1:63d62a7:         outbound.setShortProperty(JMS_AMQP_ORIGINAL_ENCODING, AMQP_UNKNOWN);
1:d54e21b:         outbound.onSend();
1:d54e21b:         outbound.storeContent();
1:63d62a7: 
1:63d62a7:         JMSMappingOutboundTransformer transformer = new JMSMappingOutboundTransformer();
1:d54e21b: 
1:63d62a7:         EncodedMessage encoded = transformer.transform(outbound);
1:63d62a7:         assertNotNull(encoded);
1:d54e21b: 
1:63d62a7:         Message amqp = encoded.decode();
1:d54e21b: 
1:d54e21b:         assertNotNull(amqp.getBody());
1:d54e21b:         assertTrue(amqp.getBody() instanceof Data);
1:d54e21b:         assertFalse(0 == ((Data) amqp.getBody()).getValue().getLength());
1:d54e21b: 
1:d54e21b:         Object value = deserialize(((Data) amqp.getBody()).getValue().getArray());
1:d54e21b:         assertNotNull(value);
1:d54e21b:         assertTrue(value instanceof UUID);
1:d54e21b:     }
1:d54e21b: 
1:d54e21b:     @Test
1:d54e21b:     public void testConvertObjectMessageToAmqpMessageWithAmqpValueBody() throws Exception {
1:0dd806f:         ActiveMQObjectMessage outbound = createObjectMessage(TEST_OBJECT_VALUE);
1:63d62a7:         outbound.setShortProperty(JMS_AMQP_ORIGINAL_ENCODING, AMQP_VALUE_BINARY);
1:d54e21b:         outbound.onSend();
1:d54e21b:         outbound.storeContent();
1:63d62a7: 
1:63d62a7:         JMSMappingOutboundTransformer transformer = new JMSMappingOutboundTransformer();
1:d54e21b: 
1:63d62a7:         EncodedMessage encoded = transformer.transform(outbound);
1:63d62a7:         assertNotNull(encoded);
1:d54e21b: 
1:63d62a7:         Message amqp = encoded.decode();
1:d54e21b: 
1:d54e21b:         assertNotNull(amqp.getBody());
1:d54e21b:         assertTrue(amqp.getBody() instanceof AmqpValue);
1:d54e21b:         assertTrue(((AmqpValue)amqp.getBody()).getValue() instanceof Binary);
1:d54e21b:         assertFalse(0 == ((Binary) ((AmqpValue) amqp.getBody()).getValue()).getLength());
1:d54e21b: 
1:d54e21b:         Object value = deserialize(((Binary) ((AmqpValue) amqp.getBody()).getValue()).getArray());
1:d54e21b:         assertNotNull(value);
1:d54e21b:         assertTrue(value instanceof UUID);
1:d54e21b:     }
1:d54e21b: 
1:d54e21b:     @Test
1:d54e21b:     public void testConvertCompressedObjectMessageToAmqpMessageWithDataBody() throws Exception {
1:63d62a7:         ActiveMQObjectMessage outbound = createObjectMessage(TEST_OBJECT_VALUE, true);
1:d54e21b:         outbound.onSend();
1:d54e21b:         outbound.storeContent();
1:63d62a7: 
1:63d62a7:         JMSMappingOutboundTransformer transformer = new JMSMappingOutboundTransformer();
1:d54e21b: 
1:63d62a7:         EncodedMessage encoded = transformer.transform(outbound);
1:63d62a7:         assertNotNull(encoded);
1:d54e21b: 
1:63d62a7:         Message amqp = encoded.decode();
1:d54e21b: 
1:d54e21b:         assertNotNull(amqp.getBody());
1:d54e21b:         assertTrue(amqp.getBody() instanceof Data);
1:d54e21b:         assertFalse(0 == ((Data) amqp.getBody()).getValue().getLength());
1:d54e21b: 
1:d54e21b:         Object value = deserialize(((Data) amqp.getBody()).getValue().getArray());
1:d54e21b:         assertNotNull(value);
1:d54e21b:         assertTrue(value instanceof UUID);
1:d54e21b:     }
1:d54e21b: 
1:d54e21b:     @Test
1:d54e21b:     public void testConvertCompressedObjectMessageToAmqpMessageUnknownEncodingGetsDataSection() throws Exception {
1:0dd806f:         ActiveMQObjectMessage outbound = createObjectMessage(TEST_OBJECT_VALUE, true);
1:63d62a7:         outbound.setShortProperty(JMS_AMQP_ORIGINAL_ENCODING, AMQP_UNKNOWN);
1:d54e21b:         outbound.onSend();
1:d54e21b:         outbound.storeContent();
1:63d62a7: 
1:63d62a7:         JMSMappingOutboundTransformer transformer = new JMSMappingOutboundTransformer();
1:d54e21b: 
1:63d62a7:         EncodedMessage encoded = transformer.transform(outbound);
1:63d62a7:         assertNotNull(encoded);
1:d54e21b: 
1:63d62a7:         Message amqp = encoded.decode();
1:d54e21b: 
1:d54e21b:         assertNotNull(amqp.getBody());
1:d54e21b:         assertTrue(amqp.getBody() instanceof Data);
1:d54e21b:         assertFalse(0 == ((Data) amqp.getBody()).getValue().getLength());
1:d54e21b: 
1:d54e21b:         Object value = deserialize(((Data) amqp.getBody()).getValue().getArray());
1:d54e21b:         assertNotNull(value);
1:d54e21b:         assertTrue(value instanceof UUID);
1:d54e21b:     }
1:d54e21b: 
1:d54e21b:     @Test
1:d54e21b:     public void testConvertCompressedObjectMessageToAmqpMessageWithAmqpValueBody() throws Exception {
1:0dd806f:         ActiveMQObjectMessage outbound = createObjectMessage(TEST_OBJECT_VALUE, true);
1:63d62a7:         outbound.setShortProperty(JMS_AMQP_ORIGINAL_ENCODING, AMQP_VALUE_BINARY);
1:d54e21b:         outbound.onSend();
1:d54e21b:         outbound.storeContent();
1:63d62a7: 
1:63d62a7:         JMSMappingOutboundTransformer transformer = new JMSMappingOutboundTransformer();
1:d54e21b: 
1:63d62a7:         EncodedMessage encoded = transformer.transform(outbound);
1:63d62a7:         assertNotNull(encoded);
1:d54e21b: 
1:63d62a7:         Message amqp = encoded.decode();
1:d54e21b: 
1:d54e21b:         assertNotNull(amqp.getBody());
1:d54e21b:         assertTrue(amqp.getBody() instanceof AmqpValue);
1:d54e21b:         assertTrue(((AmqpValue)amqp.getBody()).getValue() instanceof Binary);
1:d54e21b:         assertFalse(0 == ((Binary) ((AmqpValue) amqp.getBody()).getValue()).getLength());
1:d54e21b: 
1:d54e21b:         Object value = deserialize(((Binary) ((AmqpValue) amqp.getBody()).getValue()).getArray());
1:d54e21b:         assertNotNull(value);
1:d54e21b:         assertTrue(value instanceof UUID);
1:d54e21b:     }
1:6e69319: 
1:d54e21b:     //----- TextMessage type tests -------------------------------------------//
1:d54e21b: 
1:d54e21b:     @Test
1:d54e21b:     public void testConvertTextMessageToAmqpMessageWithNoBody() throws Exception {
1:d54e21b:         ActiveMQTextMessage outbound = createTextMessage();
1:d54e21b:         outbound.onSend();
1:d54e21b:         outbound.storeContent();
1:d54e21b: 
1:63d62a7:         JMSMappingOutboundTransformer transformer = new JMSMappingOutboundTransformer();
1:d54e21b: 
1:63d62a7:         EncodedMessage encoded = transformer.transform(outbound);
1:63d62a7:         assertNotNull(encoded);
1:d54e21b: 
1:63d62a7:         Message amqp = encoded.decode();
1:6e69319: 
1:d54e21b:         assertNotNull(amqp.getBody());
1:d54e21b:         assertTrue(amqp.getBody() instanceof AmqpValue);
1:d54e21b:         assertNull(((AmqpValue) amqp.getBody()).getValue());
1:d54e21b:     }
1:d54e21b: 
1:d54e21b:     @Test
1:d54e21b:     public void testConvertTextMessageCreatesBodyUsingOriginalEncodingWithDataSection() throws Exception {
1:6e69319:         String contentString = "myTextMessageContent";
1:d54e21b:         ActiveMQTextMessage outbound = createTextMessage(contentString);
1:63d62a7:         outbound.setShortProperty(JMS_AMQP_ORIGINAL_ENCODING, AMQP_DATA);
1:d54e21b:         outbound.onSend();
1:d54e21b:         outbound.storeContent();
1:63d62a7: 
1:63d62a7:         JMSMappingOutboundTransformer transformer = new JMSMappingOutboundTransformer();
1:63d62a7: 
1:63d62a7:         EncodedMessage encoded = transformer.transform(outbound);
1:63d62a7:         assertNotNull(encoded);
1:d54e21b: 
1:63d62a7:         Message amqp = encoded.decode();
1:d54e21b: 
1:d54e21b:         assertNotNull(amqp.getBody());
1:d54e21b:         assertTrue(amqp.getBody() instanceof Data);
1:d54e21b:         assertTrue(((Data) amqp.getBody()).getValue() instanceof Binary);
1:6e69319: 
1:d54e21b:         Binary data = ((Data) amqp.getBody()).getValue();
1:d54e21b:         String contents = new String(data.getArray(), data.getArrayOffset(), data.getLength(), StandardCharsets.UTF_8);
1:d54e21b:         assertEquals(contentString, contents);
1:d54e21b:     }
1:d54e21b: 
1:d54e21b:     @Test
1:1030fb1:     public void testConvertTextMessageContentNotStoredCreatesBodyUsingOriginalEncodingWithDataSection() throws Exception {
1:1030fb1:         String contentString = "myTextMessageContent";
1:1030fb1:         ActiveMQTextMessage outbound = createTextMessage(contentString);
1:63d62a7:         outbound.setShortProperty(JMS_AMQP_ORIGINAL_ENCODING, AMQP_DATA);
1:1030fb1:         outbound.onSend();
1:63d62a7: 
1:63d62a7:         JMSMappingOutboundTransformer transformer = new JMSMappingOutboundTransformer();
1:1030fb1: 
1:63d62a7:         EncodedMessage encoded = transformer.transform(outbound);
1:63d62a7:         assertNotNull(encoded);
1:1030fb1: 
1:63d62a7:         Message amqp = encoded.decode();
1:1030fb1: 
1:1030fb1:         assertNotNull(amqp.getBody());
1:1030fb1:         assertTrue(amqp.getBody() instanceof Data);
1:1030fb1:         assertTrue(((Data) amqp.getBody()).getValue() instanceof Binary);
1:1030fb1: 
1:1030fb1:         Binary data = ((Data) amqp.getBody()).getValue();
1:1030fb1:         String contents = new String(data.getArray(), data.getArrayOffset(), data.getLength(), StandardCharsets.UTF_8);
1:1030fb1:         assertEquals(contentString, contents);
1:1030fb1:     }
1:1030fb1: 
1:1030fb1:     @Test
1:d54e21b:     public void testConvertTextMessageCreatesAmqpValueStringBody() throws Exception {
1:d54e21b:         String contentString = "myTextMessageContent";
1:d54e21b:         ActiveMQTextMessage outbound = createTextMessage(contentString);
1:d54e21b:         outbound.onSend();
1:d54e21b:         outbound.storeContent();
1:d54e21b: 
1:63d62a7:         JMSMappingOutboundTransformer transformer = new JMSMappingOutboundTransformer();
1:d54e21b: 
1:63d62a7:         EncodedMessage encoded = transformer.transform(outbound);
1:63d62a7:         assertNotNull(encoded);
1:6e69319: 
1:63d62a7:         Message amqp = encoded.decode();
1:6e69319: 
1:6e69319:         assertNotNull(amqp.getBody());
1:6e69319:         assertTrue(amqp.getBody() instanceof AmqpValue);
1:6e69319:         assertEquals(contentString, ((AmqpValue) amqp.getBody()).getValue());
20:6e69319:     }
1:d54e21b: 
1:d54e21b:     @Test
1:1030fb1:     public void testConvertTextMessageContentNotStoredCreatesAmqpValueStringBody() throws Exception {
1:1030fb1:         String contentString = "myTextMessageContent";
1:1030fb1:         ActiveMQTextMessage outbound = createTextMessage(contentString);
1:1030fb1:         outbound.onSend();
1:1030fb1: 
1:63d62a7:         JMSMappingOutboundTransformer transformer = new JMSMappingOutboundTransformer();
1:1030fb1: 
1:63d62a7:         EncodedMessage encoded = transformer.transform(outbound);
1:63d62a7:         assertNotNull(encoded);
1:1030fb1: 
1:63d62a7:         Message amqp = encoded.decode();
1:1030fb1: 
1:1030fb1:         assertNotNull(amqp.getBody());
1:1030fb1:         assertTrue(amqp.getBody() instanceof AmqpValue);
1:1030fb1:         assertEquals(contentString, ((AmqpValue) amqp.getBody()).getValue());
1:1030fb1:     }
1:6e69319: 
1:1030fb1:     @Test
1:d54e21b:     public void testConvertCompressedTextMessageCreatesDataSectionBody() throws Exception {
1:d54e21b:         String contentString = "myTextMessageContent";
1:d54e21b:         ActiveMQTextMessage outbound = createTextMessage(contentString, true);
1:63d62a7:         outbound.setShortProperty(JMS_AMQP_ORIGINAL_ENCODING, AMQP_DATA);
1:d54e21b:         outbound.onSend();
1:d54e21b:         outbound.storeContent();
1:63d62a7: 
1:63d62a7:         JMSMappingOutboundTransformer transformer = new JMSMappingOutboundTransformer();
1:d54e21b: 
1:63d62a7:         EncodedMessage encoded = transformer.transform(outbound);
1:63d62a7:         assertNotNull(encoded);
1:d54e21b: 
1:63d62a7:         Message amqp = encoded.decode();
1:d54e21b: 
1:d54e21b:         assertNotNull(amqp.getBody());
1:d54e21b:         assertTrue(amqp.getBody() instanceof Data);
1:d54e21b:         assertTrue(((Data) amqp.getBody()).getValue() instanceof Binary);
1:d54e21b: 
1:d54e21b:         Binary data = ((Data) amqp.getBody()).getValue();
1:d54e21b:         String contents = new String(data.getArray(), data.getArrayOffset(), data.getLength(), StandardCharsets.UTF_8);
1:d54e21b:         assertEquals(contentString, contents);
1:d54e21b:     }
1:6e69319: 
1:d54e21b:     //----- Test JMSDestination Handling -------------------------------------//
1:6e69319: 
1:6e69319:     @Test
1:6e69319:     public void testConvertMessageWithJMSDestinationNull() throws Exception {
1:37b1b6a:         doTestConvertMessageWithJMSDestination(null, null);
1:6e69319:     }
1:6e69319: 
1:6e69319:     @Test
1:6e69319:     public void testConvertMessageWithJMSDestinationQueue() throws Exception {
1:63d62a7:         doTestConvertMessageWithJMSDestination(createMockDestination(QUEUE_TYPE), QUEUE_TYPE);
1:6e69319:     }
1:6e69319: 
1:6e69319:     @Test
1:6e69319:     public void testConvertMessageWithJMSDestinationTemporaryQueue() throws Exception {
1:63d62a7:         doTestConvertMessageWithJMSDestination(createMockDestination(TEMP_QUEUE_TYPE), TEMP_QUEUE_TYPE);
1:6e69319:     }
1:6e69319: 
1:6e69319:     @Test
1:6e69319:     public void testConvertMessageWithJMSDestinationTopic() throws Exception {
1:63d62a7:         doTestConvertMessageWithJMSDestination(createMockDestination(TOPIC_TYPE), TOPIC_TYPE);
1:6e69319:     }
1:6e69319: 
1:6e69319:     @Test
1:6e69319:     public void testConvertMessageWithJMSDestinationTemporaryTopic() throws Exception {
1:63d62a7:         doTestConvertMessageWithJMSDestination(createMockDestination(TEMP_TOPIC_TYPE), TEMP_TOPIC_TYPE);
1:6e69319:     }
1:6e69319: 
1:63d62a7:     private void doTestConvertMessageWithJMSDestination(ActiveMQDestination jmsDestination, Object expectedAnnotationValue) throws Exception {
1:d54e21b:         ActiveMQTextMessage mockTextMessage = createMockTextMessage();
1:6e69319:         Mockito.when(mockTextMessage.getText()).thenReturn("myTextMessageContent");
1:63d62a7:         Mockito.when(mockTextMessage.getDestination()).thenReturn(jmsDestination);
1:6e69319: 
1:63d62a7:         JMSMappingOutboundTransformer transformer = new JMSMappingOutboundTransformer();
1:6e69319: 
1:63d62a7:         EncodedMessage encoded = transformer.transform(mockTextMessage);
1:63d62a7:         assertNotNull(encoded);
1:63d62a7: 
1:63d62a7:         Message amqp = encoded.decode();
1:6e69319: 
1:6e69319:         MessageAnnotations ma = amqp.getMessageAnnotations();
1:6e69319:         Map<Symbol, Object> maMap = ma == null ? null : ma.getValue();
1:6e69319:         if (maMap != null) {
1:528c25c:             Object actualValue = maMap.get(JMS_DEST_TYPE_MSG_ANNOTATION);
1:6e69319:             assertEquals("Unexpected annotation value", expectedAnnotationValue, actualValue);
1:6e69319:         } else if (expectedAnnotationValue != null) {
1:6e69319:             fail("Expected annotation value, but there were no annotations");
1:6e69319:         }
1:6e69319: 
2:6e69319:         if (jmsDestination != null) {
1:63d62a7:             assertEquals("Unexpected 'to' address", jmsDestination.getQualifiedName(), amqp.getAddress());
1:6e69319:         }
1:6e69319:     }
1:6e69319: 
1:d54e21b:     //----- Test JMSReplyTo Handling -----------------------------------------//
1:6e69319: 
1:6e69319:     @Test
1:6e69319:     public void testConvertMessageWithJMSReplyToNull() throws Exception {
1:37b1b6a:         doTestConvertMessageWithJMSReplyTo(null, null);
1:6e69319:     }
1:6e69319: 
1:6e69319:     @Test
1:6e69319:     public void testConvertMessageWithJMSReplyToQueue() throws Exception {
1:63d62a7:         doTestConvertMessageWithJMSReplyTo(createMockDestination(QUEUE_TYPE), QUEUE_TYPE);
1:6e69319:     }
1:6e69319: 
1:6e69319:     @Test
1:6e69319:     public void testConvertMessageWithJMSReplyToTemporaryQueue() throws Exception {
1:63d62a7:         doTestConvertMessageWithJMSReplyTo(createMockDestination(TEMP_QUEUE_TYPE), TEMP_QUEUE_TYPE);
1:6e69319:     }
1:6e69319: 
1:6e69319:     @Test
1:6e69319:     public void testConvertMessageWithJMSReplyToTopic() throws Exception {
1:63d62a7:         doTestConvertMessageWithJMSReplyTo(createMockDestination(TOPIC_TYPE), TOPIC_TYPE);
1:6e69319:     }
1:6e69319: 
1:6e69319:     @Test
1:6e69319:     public void testConvertMessageWithJMSReplyToTemporaryTopic() throws Exception {
1:63d62a7:         doTestConvertMessageWithJMSReplyTo(createMockDestination(TEMP_TOPIC_TYPE), TEMP_TOPIC_TYPE);
1:6e69319:     }
1:6e69319: 
1:63d62a7:     private void doTestConvertMessageWithJMSReplyTo(ActiveMQDestination jmsReplyTo, Object expectedAnnotationValue) throws Exception {
1:d54e21b:         ActiveMQTextMessage mockTextMessage = createMockTextMessage();
1:6e69319:         Mockito.when(mockTextMessage.getText()).thenReturn("myTextMessageContent");
1:63d62a7:         Mockito.when(mockTextMessage.getReplyTo()).thenReturn(jmsReplyTo);
1:63d62a7: 
1:63d62a7:         JMSMappingOutboundTransformer transformer = new JMSMappingOutboundTransformer();
1:6e69319: 
1:63d62a7:         EncodedMessage encoded = transformer.transform(mockTextMessage);
1:63d62a7:         assertNotNull(encoded);
1:6e69319: 
1:63d62a7:         Message amqp = encoded.decode();
1:6e69319: 
1:6e69319:         MessageAnnotations ma = amqp.getMessageAnnotations();
1:6e69319:         Map<Symbol, Object> maMap = ma == null ? null : ma.getValue();
1:6e69319:         if (maMap != null) {
1:528c25c:             Object actualValue = maMap.get(JMS_REPLY_TO_TYPE_MSG_ANNOTATION);
1:6e69319:             assertEquals("Unexpected annotation value", expectedAnnotationValue, actualValue);
1:6e69319:         } else if (expectedAnnotationValue != null) {
1:6e69319:             fail("Expected annotation value, but there were no annotations");
1:6e69319:         }
1:6e69319: 
2:6e69319:         if (jmsReplyTo != null) {
1:63d62a7:             assertEquals("Unexpected 'reply-to' address", jmsReplyTo.getQualifiedName(), amqp.getReplyTo());
1:6e69319:         }
1:6e69319:     }
1:6e69319: 
1:d54e21b:     //----- Utility Methods used for this Test -------------------------------//
1:6e69319: 
1:d54e21b:     private ActiveMQTextMessage createMockTextMessage() throws Exception {
1:d54e21b:         ActiveMQTextMessage mockTextMessage = Mockito.mock(ActiveMQTextMessage.class);
1:6e69319:         Mockito.when(mockTextMessage.getPropertyNames()).thenReturn(Collections.enumeration(Collections.emptySet()));
1:63d62a7:         Mockito.when(mockTextMessage.getPriority()).thenReturn((byte) Message.DEFAULT_PRIORITY);
1:6e69319: 
1:6e69319:         return mockTextMessage;
1:d54e21b:     }
1:d54e21b: 
1:63d62a7:     private ActiveMQDestination createMockDestination(byte destType) {
1:63d62a7:         ActiveMQDestination mockDestination = null;
1:63d62a7:         switch (destType) {
1:63d62a7:             case QUEUE_TYPE:
1:63d62a7:                 mockDestination = Mockito.mock(ActiveMQQueue.class);
1:63d62a7:                 Mockito.when(mockDestination.getQualifiedName()).thenReturn("queue://" + TEST_ADDRESS);
1:a2995b7:                 Mockito.when(mockDestination.isQueue()).thenReturn(true);
1:63d62a7:                 break;
1:63d62a7:             case TOPIC_TYPE:
1:63d62a7:                 mockDestination = Mockito.mock(ActiveMQTopic.class);
1:63d62a7:                 Mockito.when(mockDestination.getQualifiedName()).thenReturn("topic://" + TEST_ADDRESS);
1:a2995b7:                 Mockito.when(mockDestination.isTopic()).thenReturn(true);
1:63d62a7:                 break;
1:63d62a7:             case TEMP_QUEUE_TYPE:
1:63d62a7:                 mockDestination = Mockito.mock(ActiveMQTempQueue.class);
1:63d62a7:                 Mockito.when(mockDestination.getQualifiedName()).thenReturn("tempQueue://" + TEST_ADDRESS);
1:a2995b7:                 Mockito.when(mockDestination.isQueue()).thenReturn(true);
1:a2995b7:                 Mockito.when(mockDestination.isTemporary()).thenReturn(true);
1:63d62a7:                 break;
1:63d62a7:             case TEMP_TOPIC_TYPE:
1:63d62a7:                 mockDestination = Mockito.mock(ActiveMQTempTopic.class);
1:63d62a7:                 Mockito.when(mockDestination.getQualifiedName()).thenReturn("tempTopic://" + TEST_ADDRESS);
1:a2995b7:                 Mockito.when(mockDestination.isTopic()).thenReturn(true);
1:a2995b7:                 Mockito.when(mockDestination.isTemporary()).thenReturn(true);
1:63d62a7:                 break;
1:63d62a7:             default:
1:63d62a7:                 throw new IllegalArgumentException("Invliad Destination Type given/");
1:63d62a7:         }
1:6e69319: 
1:63d62a7:         return mockDestination;
1:d54e21b:     }
1:6e69319: 
1:d54e21b:     private ActiveMQMessage createMessage() {
1:d54e21b:         return new ActiveMQMessage();
1:d54e21b:     }
1:d54e21b: 
1:d54e21b:     private ActiveMQBytesMessage createBytesMessage() {
1:d54e21b:         return createBytesMessage(false);
1:d54e21b:     }
1:d54e21b: 
1:d54e21b:     private ActiveMQBytesMessage createBytesMessage(boolean compression) {
1:d54e21b:         ActiveMQBytesMessage message = new ActiveMQBytesMessage();
1:d54e21b: 
1:d54e21b:         if (compression) {
1:d54e21b:             ActiveMQConnection connection = Mockito.mock(ActiveMQConnection.class);
1:d54e21b:             Mockito.when(connection.isUseCompression()).thenReturn(true);
1:d54e21b:             message.setConnection(connection);
1:d54e21b:         }
1:d54e21b: 
1:d54e21b:         return message;
1:d54e21b:     }
1:d54e21b: 
1:d54e21b:     private ActiveMQMapMessage createMapMessage() {
1:d54e21b:         return createMapMessage(false);
1:d54e21b:     }
1:d54e21b: 
1:d54e21b:     private ActiveMQMapMessage createMapMessage(boolean compression) {
1:d54e21b:         ActiveMQMapMessage message = new ActiveMQMapMessage();
1:d54e21b: 
1:d54e21b:         if (compression) {
1:d54e21b:             ActiveMQConnection connection = Mockito.mock(ActiveMQConnection.class);
1:d54e21b:             Mockito.when(connection.isUseCompression()).thenReturn(true);
1:d54e21b:             message.setConnection(connection);
1:d54e21b:         }
1:d54e21b: 
1:d54e21b:         return message;
1:d54e21b:     }
1:d54e21b: 
1:d54e21b:     private ActiveMQStreamMessage createStreamMessage() {
1:d54e21b:         return createStreamMessage(false);
1:d54e21b:     }
1:d54e21b: 
1:d54e21b:     private ActiveMQStreamMessage createStreamMessage(boolean compression) {
1:d54e21b:         ActiveMQStreamMessage message = new ActiveMQStreamMessage();
1:d54e21b: 
1:d54e21b:         if (compression) {
1:d54e21b:             ActiveMQConnection connection = Mockito.mock(ActiveMQConnection.class);
1:d54e21b:             Mockito.when(connection.isUseCompression()).thenReturn(true);
1:d54e21b:             message.setConnection(connection);
1:d54e21b:         }
1:d54e21b: 
1:d54e21b:         return message;
1:d54e21b:     }
1:d54e21b: 
1:d54e21b:     private ActiveMQObjectMessage createObjectMessage() {
1:d54e21b:         return createObjectMessage(null);
1:d54e21b:     }
1:d54e21b: 
1:d54e21b:     private ActiveMQObjectMessage createObjectMessage(Serializable payload) {
1:d54e21b:         return createObjectMessage(payload, false);
1:d54e21b:     }
1:d54e21b: 
1:d54e21b:     private ActiveMQObjectMessage createObjectMessage(Serializable payload, boolean compression) {
1:d54e21b:         ActiveMQObjectMessage result = new ActiveMQObjectMessage();
1:d54e21b: 
1:d54e21b:         if (compression) {
1:d54e21b:             ActiveMQConnection connection = Mockito.mock(ActiveMQConnection.class);
1:d54e21b:             Mockito.when(connection.isUseCompression()).thenReturn(true);
1:d54e21b:             result.setConnection(connection);
1:d54e21b:         }
1:d54e21b: 
1:d54e21b:         try {
1:d54e21b:             result.setObject(payload);
1:d54e21b:         } catch (JMSException ex) {
1:d54e21b:             throw new AssertionError("Should not fail to setObject in this test");
1:d54e21b:         }
1:d54e21b: 
1:d54e21b:         result = Mockito.spy(result);
1:d54e21b: 
1:d54e21b:         try {
1:d54e21b:             Mockito.doThrow(new AssertionError("invalid setObject")).when(result).setObject(Mockito.any(Serializable.class));
1:d54e21b:             Mockito.doThrow(new AssertionError("invalid getObject")).when(result).getObject();
1:d54e21b:         } catch (JMSException e) {
1:d54e21b:         }
1:d54e21b: 
1:d54e21b:         return result;
1:d54e21b:     }
1:d54e21b: 
1:d54e21b:     private ActiveMQTextMessage createTextMessage() {
1:d54e21b:         return createTextMessage(null);
1:d54e21b:     }
1:d54e21b: 
1:d54e21b:     private ActiveMQTextMessage createTextMessage(String text) {
1:d54e21b:         return createTextMessage(text, false);
1:d54e21b:     }
1:d54e21b: 
1:d54e21b:     private ActiveMQTextMessage createTextMessage(String text, boolean compression) {
1:d54e21b:         ActiveMQTextMessage result = new ActiveMQTextMessage();
1:d54e21b: 
1:d54e21b:         if (compression) {
1:d54e21b:             ActiveMQConnection connection = Mockito.mock(ActiveMQConnection.class);
1:d54e21b:             Mockito.when(connection.isUseCompression()).thenReturn(true);
1:d54e21b:             result.setConnection(connection);
1:d54e21b:         }
1:d54e21b: 
1:d54e21b:         try {
1:d54e21b:             result.setText(text);
1:d54e21b:         } catch (JMSException e) {
1:d54e21b:         }
1:d54e21b: 
1:d54e21b:         return result;
1:d54e21b:     }
1:d54e21b: 
1:d54e21b:     private Object deserialize(byte[] payload) throws Exception {
1:d54e21b:         try (ByteArrayInputStream bis = new ByteArrayInputStream(payload);
1:d54e21b:              ObjectInputStream ois = new ObjectInputStream(bis);) {
1:d54e21b: 
1:d54e21b:             return ois.readObject();
1:d54e21b:         }
1:6e69319:     }
1:6e69319: }
============================================================================
author:Timothy Bish
-------------------------------------------------------------------------------
commit:a2995b7
/////////////////////////////////////////////////////////////////////////
1:                 Mockito.when(mockDestination.isQueue()).thenReturn(true);
1:                 Mockito.when(mockDestination.isTopic()).thenReturn(true);
1:                 Mockito.when(mockDestination.isQueue()).thenReturn(true);
1:                 Mockito.when(mockDestination.isTemporary()).thenReturn(true);
1:                 Mockito.when(mockDestination.isTopic()).thenReturn(true);
1:                 Mockito.when(mockDestination.isTemporary()).thenReturn(true);
commit:d88c4e4
/////////////////////////////////////////////////////////////////////////
1:     public void testConvertMapMessageToAmqpMessageWithByteArrayValueInBody() throws Exception {
1:         final byte[] byteArray = new byte[] { 1, 2, 3, 4, 5 };
1: 
1:         ActiveMQMapMessage outbound = createMapMessage();
1:         outbound.setBytes("bytes", byteArray);
1:         outbound.onSend();
1:         outbound.storeContent();
1: 
1:         JMSMappingOutboundTransformer transformer = new JMSMappingOutboundTransformer();
1: 
1:         EncodedMessage encoded = transformer.transform(outbound);
1:         assertNotNull(encoded);
1: 
1:         Message amqp = encoded.decode();
1: 
1:         assertNotNull(amqp.getBody());
1:         assertTrue(amqp.getBody() instanceof AmqpValue);
1:         assertTrue(((AmqpValue) amqp.getBody()).getValue() instanceof Map);
1: 
1:         @SuppressWarnings("unchecked")
1:         Map<Object, Object> amqpMap = (Map<Object, Object>) ((AmqpValue) amqp.getBody()).getValue();
1: 
1:         assertEquals(1, amqpMap.size());
1:         Binary readByteArray = (Binary) amqpMap.get("bytes");
1:         assertNotNull(readByteArray);
1:     }
1: 
1:     @Test
commit:0dd806f
/////////////////////////////////////////////////////////////////////////
1:         ActiveMQObjectMessage outbound = createObjectMessage(TEST_OBJECT_VALUE);
/////////////////////////////////////////////////////////////////////////
1:         ActiveMQObjectMessage outbound = createObjectMessage(TEST_OBJECT_VALUE);
/////////////////////////////////////////////////////////////////////////
1:         ActiveMQObjectMessage outbound = createObjectMessage(TEST_OBJECT_VALUE);
/////////////////////////////////////////////////////////////////////////
1:         ActiveMQObjectMessage outbound = createObjectMessage(TEST_OBJECT_VALUE, true);
/////////////////////////////////////////////////////////////////////////
1:         ActiveMQObjectMessage outbound = createObjectMessage(TEST_OBJECT_VALUE, true);
commit:63d62a7
/////////////////////////////////////////////////////////////////////////
1: import static org.apache.activemq.transport.amqp.message.AmqpMessageSupport.JMS_AMQP_ORIGINAL_ENCODING;
/////////////////////////////////////////////////////////////////////////
1: import org.apache.activemq.command.ActiveMQDestination;
1: import org.apache.activemq.command.ActiveMQQueue;
1: import org.apache.activemq.command.ActiveMQTempQueue;
1: import org.apache.activemq.command.ActiveMQTempTopic;
1: import org.apache.activemq.command.ActiveMQTopic;
/////////////////////////////////////////////////////////////////////////
1:     private final UUID TEST_OBJECT_VALUE = UUID.fromString("fee14b62-09e0-4ac6-a4c3-4206c630d844");
1:     private final String TEST_ADDRESS = "queue://testAddress";
1: 
/////////////////////////////////////////////////////////////////////////
1:         JMSMappingOutboundTransformer transformer = new JMSMappingOutboundTransformer();
1:         EncodedMessage encoded = transformer.transform(outbound);
1:         assertNotNull(encoded);
1: 
1:         Message amqp = encoded.decode();
/////////////////////////////////////////////////////////////////////////
1:         outbound.setShortProperty(JMS_AMQP_ORIGINAL_ENCODING, AMQP_NULL);
1:         JMSMappingOutboundTransformer transformer = new JMSMappingOutboundTransformer();
1:         EncodedMessage encoded = transformer.transform(outbound);
1:         assertNotNull(encoded);
1: 
1:         Message amqp = encoded.decode();
/////////////////////////////////////////////////////////////////////////
1:         JMSMappingOutboundTransformer transformer = new JMSMappingOutboundTransformer();
1:         EncodedMessage encoded = transformer.transform(outbound);
1:         assertNotNull(encoded);
1: 
1:         Message amqp = encoded.decode();
/////////////////////////////////////////////////////////////////////////
1:         JMSMappingOutboundTransformer transformer = new JMSMappingOutboundTransformer();
1:         EncodedMessage encoded = transformer.transform(outbound);
1:         assertNotNull(encoded);
1: 
1:         Message amqp = encoded.decode();
/////////////////////////////////////////////////////////////////////////
1:         JMSMappingOutboundTransformer transformer = new JMSMappingOutboundTransformer();
1:         EncodedMessage encoded = transformer.transform(outbound);
1:         assertNotNull(encoded);
1: 
1:         Message amqp = encoded.decode();
/////////////////////////////////////////////////////////////////////////
1:         outbound.setShortProperty(JMS_AMQP_ORIGINAL_ENCODING, AMQP_VALUE_BINARY);
1:         JMSMappingOutboundTransformer transformer = new JMSMappingOutboundTransformer();
1:         EncodedMessage encoded = transformer.transform(outbound);
1:         assertNotNull(encoded);
1: 
1:         Message amqp = encoded.decode();
/////////////////////////////////////////////////////////////////////////
1:         outbound.setShortProperty(JMS_AMQP_ORIGINAL_ENCODING, AMQP_VALUE_BINARY);
1:         JMSMappingOutboundTransformer transformer = new JMSMappingOutboundTransformer();
1:         EncodedMessage encoded = transformer.transform(outbound);
1:         assertNotNull(encoded);
1: 
1:         Message amqp = encoded.decode();
/////////////////////////////////////////////////////////////////////////
1:         outbound.setShortProperty(JMS_AMQP_ORIGINAL_ENCODING, AMQP_VALUE_BINARY);
1:         JMSMappingOutboundTransformer transformer = new JMSMappingOutboundTransformer();
1:         EncodedMessage encoded = transformer.transform(outbound);
1:         assertNotNull(encoded);
1: 
1:         Message amqp = encoded.decode();
/////////////////////////////////////////////////////////////////////////
1:         JMSMappingOutboundTransformer transformer = new JMSMappingOutboundTransformer();
1:         EncodedMessage encoded = transformer.transform(outbound);
1:         assertNotNull(encoded);
1: 
1:         Message amqp = encoded.decode();
/////////////////////////////////////////////////////////////////////////
1:         JMSMappingOutboundTransformer transformer = new JMSMappingOutboundTransformer();
1:         EncodedMessage encoded = transformer.transform(outbound);
1:         assertNotNull(encoded);
1: 
1:         Message amqp = encoded.decode();
/////////////////////////////////////////////////////////////////////////
1:         JMSMappingOutboundTransformer transformer = new JMSMappingOutboundTransformer();
1:         EncodedMessage encoded = transformer.transform(outbound);
1:         assertNotNull(encoded);
1: 
1:         Message amqp = encoded.decode();
/////////////////////////////////////////////////////////////////////////
1:         JMSMappingOutboundTransformer transformer = new JMSMappingOutboundTransformer();
1:         EncodedMessage encoded = transformer.transform(outbound);
1:         assertNotNull(encoded);
1: 
1:         Message amqp = encoded.decode();
/////////////////////////////////////////////////////////////////////////
1:         outbound.setShortProperty(JMS_AMQP_ORIGINAL_ENCODING, AMQP_SEQUENCE);
1:         JMSMappingOutboundTransformer transformer = new JMSMappingOutboundTransformer();
1:         EncodedMessage encoded = transformer.transform(outbound);
1:         assertNotNull(encoded);
1: 
1:         Message amqp = encoded.decode();
/////////////////////////////////////////////////////////////////////////
1:         JMSMappingOutboundTransformer transformer = new JMSMappingOutboundTransformer();
1:         EncodedMessage encoded = transformer.transform(outbound);
1:         assertNotNull(encoded);
1: 
1:         Message amqp = encoded.decode();
/////////////////////////////////////////////////////////////////////////
1:         outbound.setShortProperty(JMS_AMQP_ORIGINAL_ENCODING, AMQP_SEQUENCE);
1:         JMSMappingOutboundTransformer transformer = new JMSMappingOutboundTransformer();
1:         EncodedMessage encoded = transformer.transform(outbound);
1:         assertNotNull(encoded);
1: 
1:         Message amqp = encoded.decode();
/////////////////////////////////////////////////////////////////////////
1:         JMSMappingOutboundTransformer transformer = new JMSMappingOutboundTransformer();
1:         EncodedMessage encoded = transformer.transform(outbound);
1:         assertNotNull(encoded);
1: 
1:         Message amqp = encoded.decode();
/////////////////////////////////////////////////////////////////////////
1:         outbound.setShortProperty(JMS_AMQP_ORIGINAL_ENCODING, AMQP_UNKNOWN);
1:         JMSMappingOutboundTransformer transformer = new JMSMappingOutboundTransformer();
1:         EncodedMessage encoded = transformer.transform(outbound);
1:         assertNotNull(encoded);
1: 
1:         Message amqp = encoded.decode();
/////////////////////////////////////////////////////////////////////////
1:         outbound.setShortProperty(JMS_AMQP_ORIGINAL_ENCODING, AMQP_VALUE_BINARY);
1:         JMSMappingOutboundTransformer transformer = new JMSMappingOutboundTransformer();
1:         EncodedMessage encoded = transformer.transform(outbound);
1:         assertNotNull(encoded);
1: 
1:         Message amqp = encoded.decode();
/////////////////////////////////////////////////////////////////////////
1:         JMSMappingOutboundTransformer transformer = new JMSMappingOutboundTransformer();
1:         EncodedMessage encoded = transformer.transform(outbound);
1:         assertNotNull(encoded);
1: 
1:         Message amqp = encoded.decode();
/////////////////////////////////////////////////////////////////////////
1:         outbound.setShortProperty(JMS_AMQP_ORIGINAL_ENCODING, AMQP_UNKNOWN);
1:         JMSMappingOutboundTransformer transformer = new JMSMappingOutboundTransformer();
1:         EncodedMessage encoded = transformer.transform(outbound);
1:         assertNotNull(encoded);
1: 
1:         Message amqp = encoded.decode();
/////////////////////////////////////////////////////////////////////////
1:         outbound.setShortProperty(JMS_AMQP_ORIGINAL_ENCODING, AMQP_VALUE_BINARY);
1:         JMSMappingOutboundTransformer transformer = new JMSMappingOutboundTransformer();
1:         EncodedMessage encoded = transformer.transform(outbound);
1:         assertNotNull(encoded);
1: 
1:         Message amqp = encoded.decode();
/////////////////////////////////////////////////////////////////////////
1:         ActiveMQObjectMessage outbound = createObjectMessage(TEST_OBJECT_VALUE, true);
1:         JMSMappingOutboundTransformer transformer = new JMSMappingOutboundTransformer();
1:         EncodedMessage encoded = transformer.transform(outbound);
1:         assertNotNull(encoded);
1: 
1:         Message amqp = encoded.decode();
/////////////////////////////////////////////////////////////////////////
1:         outbound.setShortProperty(JMS_AMQP_ORIGINAL_ENCODING, AMQP_UNKNOWN);
1:         JMSMappingOutboundTransformer transformer = new JMSMappingOutboundTransformer();
1:         EncodedMessage encoded = transformer.transform(outbound);
1:         assertNotNull(encoded);
1: 
1:         Message amqp = encoded.decode();
/////////////////////////////////////////////////////////////////////////
1:         outbound.setShortProperty(JMS_AMQP_ORIGINAL_ENCODING, AMQP_VALUE_BINARY);
1:         JMSMappingOutboundTransformer transformer = new JMSMappingOutboundTransformer();
1:         EncodedMessage encoded = transformer.transform(outbound);
1:         assertNotNull(encoded);
1: 
1:         Message amqp = encoded.decode();
/////////////////////////////////////////////////////////////////////////
1:         JMSMappingOutboundTransformer transformer = new JMSMappingOutboundTransformer();
1:         EncodedMessage encoded = transformer.transform(outbound);
1:         assertNotNull(encoded);
1: 
1:         Message amqp = encoded.decode();
/////////////////////////////////////////////////////////////////////////
1:         outbound.setShortProperty(JMS_AMQP_ORIGINAL_ENCODING, AMQP_DATA);
1:         JMSMappingOutboundTransformer transformer = new JMSMappingOutboundTransformer();
1:         EncodedMessage encoded = transformer.transform(outbound);
1:         assertNotNull(encoded);
1: 
1:         Message amqp = encoded.decode();
/////////////////////////////////////////////////////////////////////////
1:         outbound.setShortProperty(JMS_AMQP_ORIGINAL_ENCODING, AMQP_DATA);
1:         JMSMappingOutboundTransformer transformer = new JMSMappingOutboundTransformer();
1:         EncodedMessage encoded = transformer.transform(outbound);
1:         assertNotNull(encoded);
1: 
1:         Message amqp = encoded.decode();
/////////////////////////////////////////////////////////////////////////
1:         JMSMappingOutboundTransformer transformer = new JMSMappingOutboundTransformer();
1:         EncodedMessage encoded = transformer.transform(outbound);
1:         assertNotNull(encoded);
1: 
1:         Message amqp = encoded.decode();
/////////////////////////////////////////////////////////////////////////
1:         JMSMappingOutboundTransformer transformer = new JMSMappingOutboundTransformer();
1:         EncodedMessage encoded = transformer.transform(outbound);
1:         assertNotNull(encoded);
1: 
1:         Message amqp = encoded.decode();
/////////////////////////////////////////////////////////////////////////
1:         outbound.setShortProperty(JMS_AMQP_ORIGINAL_ENCODING, AMQP_DATA);
1:         JMSMappingOutboundTransformer transformer = new JMSMappingOutboundTransformer();
1:         EncodedMessage encoded = transformer.transform(outbound);
1:         assertNotNull(encoded);
1: 
1:         Message amqp = encoded.decode();
/////////////////////////////////////////////////////////////////////////
1:         doTestConvertMessageWithJMSDestination(createMockDestination(QUEUE_TYPE), QUEUE_TYPE);
1:         doTestConvertMessageWithJMSDestination(createMockDestination(TEMP_QUEUE_TYPE), TEMP_QUEUE_TYPE);
1:         doTestConvertMessageWithJMSDestination(createMockDestination(TOPIC_TYPE), TOPIC_TYPE);
1:         doTestConvertMessageWithJMSDestination(createMockDestination(TEMP_TOPIC_TYPE), TEMP_TOPIC_TYPE);
1:     private void doTestConvertMessageWithJMSDestination(ActiveMQDestination jmsDestination, Object expectedAnnotationValue) throws Exception {
1:         Mockito.when(mockTextMessage.getDestination()).thenReturn(jmsDestination);
1:         JMSMappingOutboundTransformer transformer = new JMSMappingOutboundTransformer();
1:         EncodedMessage encoded = transformer.transform(mockTextMessage);
1:         assertNotNull(encoded);
1: 
1:         Message amqp = encoded.decode();
/////////////////////////////////////////////////////////////////////////
1:             assertEquals("Unexpected 'to' address", jmsDestination.getQualifiedName(), amqp.getAddress());
/////////////////////////////////////////////////////////////////////////
1:         doTestConvertMessageWithJMSReplyTo(createMockDestination(QUEUE_TYPE), QUEUE_TYPE);
1:         doTestConvertMessageWithJMSReplyTo(createMockDestination(TEMP_QUEUE_TYPE), TEMP_QUEUE_TYPE);
1:         doTestConvertMessageWithJMSReplyTo(createMockDestination(TOPIC_TYPE), TOPIC_TYPE);
1:         doTestConvertMessageWithJMSReplyTo(createMockDestination(TEMP_TOPIC_TYPE), TEMP_TOPIC_TYPE);
1:     private void doTestConvertMessageWithJMSReplyTo(ActiveMQDestination jmsReplyTo, Object expectedAnnotationValue) throws Exception {
1:         Mockito.when(mockTextMessage.getReplyTo()).thenReturn(jmsReplyTo);
1:         JMSMappingOutboundTransformer transformer = new JMSMappingOutboundTransformer();
1:         EncodedMessage encoded = transformer.transform(mockTextMessage);
1:         assertNotNull(encoded);
1: 
1:         Message amqp = encoded.decode();
/////////////////////////////////////////////////////////////////////////
1:             assertEquals("Unexpected 'reply-to' address", jmsReplyTo.getQualifiedName(), amqp.getReplyTo());
/////////////////////////////////////////////////////////////////////////
1:         Mockito.when(mockTextMessage.getPriority()).thenReturn((byte) Message.DEFAULT_PRIORITY);
1:     private ActiveMQDestination createMockDestination(byte destType) {
1:         ActiveMQDestination mockDestination = null;
1:         switch (destType) {
1:             case QUEUE_TYPE:
1:                 mockDestination = Mockito.mock(ActiveMQQueue.class);
1:                 Mockito.when(mockDestination.getQualifiedName()).thenReturn("queue://" + TEST_ADDRESS);
1:                 break;
1:             case TOPIC_TYPE:
1:                 mockDestination = Mockito.mock(ActiveMQTopic.class);
1:                 Mockito.when(mockDestination.getQualifiedName()).thenReturn("topic://" + TEST_ADDRESS);
1:                 break;
1:             case TEMP_QUEUE_TYPE:
1:                 mockDestination = Mockito.mock(ActiveMQTempQueue.class);
1:                 Mockito.when(mockDestination.getQualifiedName()).thenReturn("tempQueue://" + TEST_ADDRESS);
1:                 break;
1:             case TEMP_TOPIC_TYPE:
1:                 mockDestination = Mockito.mock(ActiveMQTempTopic.class);
1:                 Mockito.when(mockDestination.getQualifiedName()).thenReturn("tempTopic://" + TEST_ADDRESS);
1:                 break;
1:             default:
1:                 throw new IllegalArgumentException("Invliad Destination Type given/");
1:         }
1:         return mockDestination;
commit:1030fb1
/////////////////////////////////////////////////////////////////////////
1:     public void testConvertTextMessageContentNotStoredCreatesBodyUsingOriginalEncodingWithDataSection() throws Exception {
1:         String contentString = "myTextMessageContent";
1:         ActiveMQTextMessage outbound = createTextMessage(contentString);
0:         outbound.setShortProperty(AMQP_ORIGINAL_ENCODING_KEY, AMQP_DATA);
1:         outbound.onSend();
1: 
0:         ActiveMQJMSVendor vendor = createVendor();
0:         JMSMappingOutboundTransformer transformer = new JMSMappingOutboundTransformer(vendor);
1: 
0:         Message amqp = transformer.convert(outbound);
1: 
1:         assertNotNull(amqp.getBody());
1:         assertTrue(amqp.getBody() instanceof Data);
1:         assertTrue(((Data) amqp.getBody()).getValue() instanceof Binary);
1: 
1:         Binary data = ((Data) amqp.getBody()).getValue();
1:         String contents = new String(data.getArray(), data.getArrayOffset(), data.getLength(), StandardCharsets.UTF_8);
1:         assertEquals(contentString, contents);
1:     }
1: 
1:     @Test
/////////////////////////////////////////////////////////////////////////
1:     public void testConvertTextMessageContentNotStoredCreatesAmqpValueStringBody() throws Exception {
1:         String contentString = "myTextMessageContent";
1:         ActiveMQTextMessage outbound = createTextMessage(contentString);
1:         outbound.onSend();
1: 
0:         ActiveMQJMSVendor vendor = createVendor();
0:         JMSMappingOutboundTransformer transformer = new JMSMappingOutboundTransformer(vendor);
1: 
0:         Message amqp = transformer.convert(outbound);
1: 
1:         assertNotNull(amqp.getBody());
1:         assertTrue(amqp.getBody() instanceof AmqpValue);
1:         assertEquals(contentString, ((AmqpValue) amqp.getBody()).getValue());
1:     }
1: 
1:     @Test
commit:d54e21b
/////////////////////////////////////////////////////////////////////////
1: /*
/////////////////////////////////////////////////////////////////////////
1: import static org.apache.activemq.transport.amqp.message.AmqpMessageSupport.AMQP_DATA;
1: import static org.apache.activemq.transport.amqp.message.AmqpMessageSupport.AMQP_NULL;
0: import static org.apache.activemq.transport.amqp.message.AmqpMessageSupport.AMQP_ORIGINAL_ENCODING_KEY;
1: import static org.apache.activemq.transport.amqp.message.AmqpMessageSupport.AMQP_SEQUENCE;
1: import static org.apache.activemq.transport.amqp.message.AmqpMessageSupport.AMQP_UNKNOWN;
1: import static org.apache.activemq.transport.amqp.message.AmqpMessageSupport.AMQP_VALUE_BINARY;
/////////////////////////////////////////////////////////////////////////
1: import static org.junit.Assert.assertFalse;
1: import static org.junit.Assert.assertNull;
1: import java.io.ObjectInputStream;
1: import java.io.Serializable;
1: import java.nio.charset.StandardCharsets;
1: import java.util.List;
1: import java.util.UUID;
1: import javax.jms.JMSException;
1: import org.apache.activemq.ActiveMQConnection;
1: import org.apache.activemq.command.ActiveMQBytesMessage;
1: import org.apache.activemq.command.ActiveMQMapMessage;
1: import org.apache.activemq.command.ActiveMQMessage;
1: import org.apache.activemq.command.ActiveMQObjectMessage;
1: import org.apache.activemq.command.ActiveMQStreamMessage;
1: import org.apache.activemq.command.ActiveMQTextMessage;
1: import org.apache.activemq.util.ByteArrayInputStream;
1: import org.apache.qpid.proton.amqp.Binary;
1: import org.apache.qpid.proton.amqp.messaging.AmqpSequence;
1: import org.apache.qpid.proton.amqp.messaging.Data;
/////////////////////////////////////////////////////////////////////////
1:     //----- no-body Message type tests ---------------------------------------//
1: 
1:     public void testConvertMessageToAmqpMessageWithNoBody() throws Exception {
1:         ActiveMQMessage outbound = createMessage();
1:         outbound.onSend();
1:         outbound.storeContent();
1: 
0:         ActiveMQJMSVendor vendor = createVendor();
0:         JMSMappingOutboundTransformer transformer = new JMSMappingOutboundTransformer(vendor);
1: 
0:         Message amqp = transformer.convert(outbound);
1: 
1:         assertNull(amqp.getBody());
1:     }
1: 
1:     @Test
1:     public void testConvertTextMessageToAmqpMessageWithNoBodyOriginalEncodingWasNull() throws Exception {
1:         ActiveMQTextMessage outbound = createTextMessage();
0:         outbound.setShortProperty(AMQP_ORIGINAL_ENCODING_KEY, AMQP_NULL);
1:         outbound.onSend();
1:         outbound.storeContent();
1: 
0:         ActiveMQJMSVendor vendor = createVendor();
0:         JMSMappingOutboundTransformer transformer = new JMSMappingOutboundTransformer(vendor);
1: 
0:         Message amqp = transformer.convert(outbound);
1: 
1:         assertNull(amqp.getBody());
1:     }
1: 
1:     //----- BytesMessage type tests ---------------------------------------//
1: 
1:     @Test
1:     public void testConvertEmptyBytesMessageToAmqpMessageWithDataBody() throws Exception {
1:         ActiveMQBytesMessage outbound = createBytesMessage();
1:         outbound.onSend();
1:         outbound.storeContent();
1: 
0:         ActiveMQJMSVendor vendor = createVendor();
0:         JMSMappingOutboundTransformer transformer = new JMSMappingOutboundTransformer(vendor);
1: 
0:         Message amqp = transformer.convert(outbound);
1: 
1:         assertNotNull(amqp.getBody());
1:         assertTrue(amqp.getBody() instanceof Data);
1:         assertTrue(((Data) amqp.getBody()).getValue() instanceof Binary);
1:         assertEquals(0, ((Data) amqp.getBody()).getValue().getLength());
1:     }
1: 
1:     @Test
1:     public void testConvertUncompressedBytesMessageToAmqpMessageWithDataBody() throws Exception {
1:         byte[] expectedPayload = new byte[] { 8, 16, 24, 32 };
1:         ActiveMQBytesMessage outbound = createBytesMessage();
1:         outbound.writeBytes(expectedPayload);
1:         outbound.storeContent();
1:         outbound.onSend();
1: 
0:         ActiveMQJMSVendor vendor = createVendor();
0:         JMSMappingOutboundTransformer transformer = new JMSMappingOutboundTransformer(vendor);
1: 
0:         Message amqp = transformer.convert(outbound);
1: 
1:         assertNotNull(amqp.getBody());
1:         assertTrue(amqp.getBody() instanceof Data);
1:         assertTrue(((Data) amqp.getBody()).getValue() instanceof Binary);
1:         assertEquals(4, ((Data) amqp.getBody()).getValue().getLength());
1: 
1:         Binary amqpData = ((Data) amqp.getBody()).getValue();
1:         Binary inputData = new Binary(expectedPayload);
1: 
1:         assertTrue(inputData.equals(amqpData));
1:     }
1: 
1:     @Test
1:     public void testConvertCompressedBytesMessageToAmqpMessageWithDataBody() throws Exception {
1:         byte[] expectedPayload = new byte[] { 8, 16, 24, 32 };
1:         ActiveMQBytesMessage outbound = createBytesMessage(true);
1:         outbound.writeBytes(expectedPayload);
1:         outbound.storeContent();
1:         outbound.onSend();
1: 
0:         ActiveMQJMSVendor vendor = createVendor();
0:         JMSMappingOutboundTransformer transformer = new JMSMappingOutboundTransformer(vendor);
1: 
0:         Message amqp = transformer.convert(outbound);
1: 
1:         assertNotNull(amqp.getBody());
1:         assertTrue(amqp.getBody() instanceof Data);
1:         assertTrue(((Data) amqp.getBody()).getValue() instanceof Binary);
1:         assertEquals(4, ((Data) amqp.getBody()).getValue().getLength());
1: 
1:         Binary amqpData = ((Data) amqp.getBody()).getValue();
1:         Binary inputData = new Binary(expectedPayload);
1: 
1:         assertTrue(inputData.equals(amqpData));
1:     }
1: 
1:     @Test
1:     public void testConvertEmptyBytesMessageToAmqpMessageWithAmqpValueBody() throws Exception {
1:         ActiveMQBytesMessage outbound = createBytesMessage();
0:         outbound.setShortProperty(AMQP_ORIGINAL_ENCODING_KEY, AMQP_VALUE_BINARY);
1:         outbound.onSend();
1:         outbound.storeContent();
1: 
0:         ActiveMQJMSVendor vendor = createVendor();
0:         JMSMappingOutboundTransformer transformer = new JMSMappingOutboundTransformer(vendor);
1: 
0:         Message amqp = transformer.convert(outbound);
1: 
1:         assertNotNull(amqp.getBody());
1:         assertTrue(amqp.getBody() instanceof AmqpValue);
1:         assertTrue(((AmqpValue) amqp.getBody()).getValue() instanceof Binary);
1:         assertEquals(0, ((Binary) ((AmqpValue) amqp.getBody()).getValue()).getLength());
1:     }
1: 
1:     @Test
1:     public void testConvertUncompressedBytesMessageToAmqpMessageWithAmqpValueBody() throws Exception {
1:         byte[] expectedPayload = new byte[] { 8, 16, 24, 32 };
1:         ActiveMQBytesMessage outbound = createBytesMessage();
0:         outbound.setShortProperty(AMQP_ORIGINAL_ENCODING_KEY, AMQP_VALUE_BINARY);
1:         outbound.writeBytes(expectedPayload);
1:         outbound.storeContent();
1:         outbound.onSend();
1: 
0:         ActiveMQJMSVendor vendor = createVendor();
0:         JMSMappingOutboundTransformer transformer = new JMSMappingOutboundTransformer(vendor);
1: 
0:         Message amqp = transformer.convert(outbound);
1: 
1:         assertNotNull(amqp.getBody());
1:         assertTrue(amqp.getBody() instanceof AmqpValue);
1:         assertTrue(((AmqpValue) amqp.getBody()).getValue() instanceof Binary);
1:         assertEquals(4, ((Binary) ((AmqpValue) amqp.getBody()).getValue()).getLength());
1: 
1:         Binary amqpData = (Binary) ((AmqpValue) amqp.getBody()).getValue();
1:         Binary inputData = new Binary(expectedPayload);
1: 
1:         assertTrue(inputData.equals(amqpData));
1:     }
1: 
1:     @Test
1:     public void testConvertCompressedBytesMessageToAmqpMessageWithAmqpValueBody() throws Exception {
1:         byte[] expectedPayload = new byte[] { 8, 16, 24, 32 };
1:         ActiveMQBytesMessage outbound = createBytesMessage(true);
0:         outbound.setShortProperty(AMQP_ORIGINAL_ENCODING_KEY, AMQP_VALUE_BINARY);
1:         outbound.writeBytes(expectedPayload);
1:         outbound.storeContent();
1:         outbound.onSend();
1: 
0:         ActiveMQJMSVendor vendor = createVendor();
0:         JMSMappingOutboundTransformer transformer = new JMSMappingOutboundTransformer(vendor);
1: 
0:         Message amqp = transformer.convert(outbound);
1: 
1:         assertNotNull(amqp.getBody());
1:         assertTrue(amqp.getBody() instanceof AmqpValue);
1:         assertTrue(((AmqpValue) amqp.getBody()).getValue() instanceof Binary);
1:         assertEquals(4, ((Binary) ((AmqpValue) amqp.getBody()).getValue()).getLength());
1: 
1:         Binary amqpData = (Binary) ((AmqpValue) amqp.getBody()).getValue();
1:         Binary inputData = new Binary(expectedPayload);
1: 
1:         assertTrue(inputData.equals(amqpData));
1:     }
1: 
1:     //----- MapMessage type tests --------------------------------------------//
1: 
1:     @Test
1:     public void testConvertMapMessageToAmqpMessageWithNoBody() throws Exception {
1:         ActiveMQMapMessage outbound = createMapMessage();
1:         outbound.onSend();
1:         outbound.storeContent();
1: 
0:         ActiveMQJMSVendor vendor = createVendor();
0:         JMSMappingOutboundTransformer transformer = new JMSMappingOutboundTransformer(vendor);
1: 
0:         Message amqp = transformer.convert(outbound);
1: 
1:         assertNotNull(amqp.getBody());
1:         assertTrue(amqp.getBody() instanceof AmqpValue);
1:         assertTrue(((AmqpValue) amqp.getBody()).getValue() instanceof Map);
1:     }
1: 
1:     @Test
1:     public void testConvertMapMessageToAmqpMessage() throws Exception {
1:         ActiveMQMapMessage outbound = createMapMessage();
1:         outbound.setString("property-1", "string");
1:         outbound.setInt("property-2", 1);
1:         outbound.setBoolean("property-3", true);
1:         outbound.onSend();
1:         outbound.storeContent();
1: 
0:         ActiveMQJMSVendor vendor = createVendor();
0:         JMSMappingOutboundTransformer transformer = new JMSMappingOutboundTransformer(vendor);
1: 
0:         Message amqp = transformer.convert(outbound);
1: 
1:         assertNotNull(amqp.getBody());
1:         assertTrue(amqp.getBody() instanceof AmqpValue);
1:         assertTrue(((AmqpValue) amqp.getBody()).getValue() instanceof Map);
1: 
1:         @SuppressWarnings("unchecked")
1:         Map<Object, Object> amqpMap = (Map<Object, Object>) ((AmqpValue) amqp.getBody()).getValue();
1: 
1:         assertEquals(3, amqpMap.size());
1:         assertTrue("string".equals(amqpMap.get("property-1")));
1:     }
1: 
1:     @Test
1:     public void testConvertCompressedMapMessageToAmqpMessage() throws Exception {
1:         ActiveMQMapMessage outbound = createMapMessage(true);
1:         outbound.setString("property-1", "string");
1:         outbound.setInt("property-2", 1);
1:         outbound.setBoolean("property-3", true);
1:         outbound.onSend();
1:         outbound.storeContent();
1: 
0:         ActiveMQJMSVendor vendor = createVendor();
0:         JMSMappingOutboundTransformer transformer = new JMSMappingOutboundTransformer(vendor);
1: 
0:         Message amqp = transformer.convert(outbound);
1: 
1:         assertNotNull(amqp.getBody());
1:         assertTrue(amqp.getBody() instanceof AmqpValue);
1:         assertTrue(((AmqpValue) amqp.getBody()).getValue() instanceof Map);
1: 
1:         @SuppressWarnings("unchecked")
1:         Map<Object, Object> amqpMap = (Map<Object, Object>) ((AmqpValue) amqp.getBody()).getValue();
1: 
1:         assertEquals(3, amqpMap.size());
1:         assertTrue("string".equals(amqpMap.get("property-1")));
1:     }
1: 
1:     //----- StreamMessage type tests -----------------------------------------//
1: 
1:     @Test
1:     public void testConvertStreamMessageToAmqpMessageWithAmqpValueBody() throws Exception {
1:         ActiveMQStreamMessage outbound = createStreamMessage();
1:         outbound.onSend();
1:         outbound.storeContent();
1: 
0:         ActiveMQJMSVendor vendor = createVendor();
0:         JMSMappingOutboundTransformer transformer = new JMSMappingOutboundTransformer(vendor);
1: 
0:         Message amqp = transformer.convert(outbound);
1: 
1:         assertNotNull(amqp.getBody());
1:         assertTrue(amqp.getBody() instanceof AmqpValue);
1:         assertTrue(((AmqpValue) amqp.getBody()).getValue() instanceof List);
1:     }
1: 
1:     @Test
1:     public void testConvertStreamMessageToAmqpMessageWithAmqpSequencey() throws Exception {
1:         ActiveMQStreamMessage outbound = createStreamMessage();
0:         outbound.setShortProperty(AMQP_ORIGINAL_ENCODING_KEY, AMQP_SEQUENCE);
1:         outbound.onSend();
1:         outbound.storeContent();
1: 
0:         ActiveMQJMSVendor vendor = createVendor();
0:         JMSMappingOutboundTransformer transformer = new JMSMappingOutboundTransformer(vendor);
1: 
0:         Message amqp = transformer.convert(outbound);
1: 
1:         assertNotNull(amqp.getBody());
1:         assertTrue(amqp.getBody() instanceof AmqpSequence);
1:         assertTrue(((AmqpSequence) amqp.getBody()).getValue() instanceof List);
1:     }
1: 
1:     @Test
1:     public void testConvertCompressedStreamMessageToAmqpMessageWithAmqpValueBody() throws Exception {
1:         ActiveMQStreamMessage outbound = createStreamMessage(true);
1:         outbound.writeBoolean(false);
1:         outbound.writeString("test");
1:         outbound.onSend();
1:         outbound.storeContent();
1: 
0:         ActiveMQJMSVendor vendor = createVendor();
0:         JMSMappingOutboundTransformer transformer = new JMSMappingOutboundTransformer(vendor);
1: 
0:         Message amqp = transformer.convert(outbound);
1: 
1:         assertNotNull(amqp.getBody());
1:         assertTrue(amqp.getBody() instanceof AmqpValue);
1:         assertTrue(((AmqpValue) amqp.getBody()).getValue() instanceof List);
1: 
1:         @SuppressWarnings("unchecked")
1:         List<Object> amqpList = (List<Object>) ((AmqpValue) amqp.getBody()).getValue();
1: 
1:         assertEquals(2, amqpList.size());
1:     }
1: 
1:     @Test
1:     public void testConvertCompressedStreamMessageToAmqpMessageWithAmqpSequencey() throws Exception {
1:         ActiveMQStreamMessage outbound = createStreamMessage(true);
0:         outbound.setShortProperty(AMQP_ORIGINAL_ENCODING_KEY, AMQP_SEQUENCE);
1:         outbound.writeBoolean(false);
1:         outbound.writeString("test");
1:         outbound.onSend();
1:         outbound.storeContent();
1: 
0:         ActiveMQJMSVendor vendor = createVendor();
0:         JMSMappingOutboundTransformer transformer = new JMSMappingOutboundTransformer(vendor);
1: 
0:         Message amqp = transformer.convert(outbound);
1: 
1:         assertNotNull(amqp.getBody());
1:         assertTrue(amqp.getBody() instanceof AmqpSequence);
1:         assertTrue(((AmqpSequence) amqp.getBody()).getValue() instanceof List);
1: 
1:         @SuppressWarnings("unchecked")
1:         List<Object> amqpList = ((AmqpSequence) amqp.getBody()).getValue();
1: 
1:         assertEquals(2, amqpList.size());
1:     }
1: 
1:     //----- ObjectMessage type tests -----------------------------------------//
1: 
1:     @Test
1:     public void testConvertEmptyObjectMessageToAmqpMessageWithDataBody() throws Exception {
1:         ActiveMQObjectMessage outbound = createObjectMessage();
1:         outbound.onSend();
1:         outbound.storeContent();
1: 
0:         ActiveMQJMSVendor vendor = createVendor();
0:         JMSMappingOutboundTransformer transformer = new JMSMappingOutboundTransformer(vendor);
1: 
0:         Message amqp = transformer.convert(outbound);
1: 
1:         assertNotNull(amqp.getBody());
1:         assertTrue(amqp.getBody() instanceof Data);
1:         assertEquals(0, ((Data) amqp.getBody()).getValue().getLength());
1:     }
1: 
1:     @Test
1:     public void testConvertEmptyObjectMessageToAmqpMessageUnknownEncodingGetsDataSection() throws Exception {
1:         ActiveMQObjectMessage outbound = createObjectMessage();
0:         outbound.setShortProperty(AMQP_ORIGINAL_ENCODING_KEY, AMQP_UNKNOWN);
1:         outbound.onSend();
1:         outbound.storeContent();
1: 
0:         ActiveMQJMSVendor vendor = createVendor();
0:         JMSMappingOutboundTransformer transformer = new JMSMappingOutboundTransformer(vendor);
1: 
0:         Message amqp = transformer.convert(outbound);
1: 
1:         assertNotNull(amqp.getBody());
1:         assertTrue(amqp.getBody() instanceof Data);
1:         assertEquals(0, ((Data) amqp.getBody()).getValue().getLength());
1:     }
1: 
1:     @Test
1:     public void testConvertEmptyObjectMessageToAmqpMessageWithAmqpValueBody() throws Exception {
1:         ActiveMQObjectMessage outbound = createObjectMessage();
0:         outbound.setShortProperty(AMQP_ORIGINAL_ENCODING_KEY, AMQP_VALUE_BINARY);
1:         outbound.onSend();
1:         outbound.storeContent();
1: 
0:         ActiveMQJMSVendor vendor = createVendor();
0:         JMSMappingOutboundTransformer transformer = new JMSMappingOutboundTransformer(vendor);
1: 
0:         Message amqp = transformer.convert(outbound);
1: 
1:         assertNotNull(amqp.getBody());
1:         assertTrue(amqp.getBody() instanceof AmqpValue);
1:         assertTrue(((AmqpValue)amqp.getBody()).getValue() instanceof Binary);
1:         assertEquals(0, ((Binary) ((AmqpValue) amqp.getBody()).getValue()).getLength());
1:     }
1: 
1:     @Test
1:     public void testConvertObjectMessageToAmqpMessageWithDataBody() throws Exception {
0:         ActiveMQObjectMessage outbound = createObjectMessage(UUID.randomUUID());
1:         outbound.onSend();
1:         outbound.storeContent();
1: 
0:         ActiveMQJMSVendor vendor = createVendor();
0:         JMSMappingOutboundTransformer transformer = new JMSMappingOutboundTransformer(vendor);
1: 
0:         Message amqp = transformer.convert(outbound);
1: 
1:         assertNotNull(amqp.getBody());
1:         assertTrue(amqp.getBody() instanceof Data);
1:         assertFalse(0 == ((Data) amqp.getBody()).getValue().getLength());
1: 
1:         Object value = deserialize(((Data) amqp.getBody()).getValue().getArray());
1:         assertNotNull(value);
1:         assertTrue(value instanceof UUID);
1:     }
1: 
1:     @Test
1:     public void testConvertObjectMessageToAmqpMessageUnknownEncodingGetsDataSection() throws Exception {
0:         ActiveMQObjectMessage outbound = createObjectMessage(UUID.randomUUID());
0:         outbound.setShortProperty(AMQP_ORIGINAL_ENCODING_KEY, AMQP_UNKNOWN);
1:         outbound.onSend();
1:         outbound.storeContent();
1: 
0:         ActiveMQJMSVendor vendor = createVendor();
0:         JMSMappingOutboundTransformer transformer = new JMSMappingOutboundTransformer(vendor);
1: 
0:         Message amqp = transformer.convert(outbound);
1: 
1:         assertNotNull(amqp.getBody());
1:         assertTrue(amqp.getBody() instanceof Data);
1:         assertFalse(0 == ((Data) amqp.getBody()).getValue().getLength());
1: 
1:         Object value = deserialize(((Data) amqp.getBody()).getValue().getArray());
1:         assertNotNull(value);
1:         assertTrue(value instanceof UUID);
1:     }
1: 
1:     @Test
1:     public void testConvertObjectMessageToAmqpMessageWithAmqpValueBody() throws Exception {
0:         ActiveMQObjectMessage outbound = createObjectMessage(UUID.randomUUID());
0:         outbound.setShortProperty(AMQP_ORIGINAL_ENCODING_KEY, AMQP_VALUE_BINARY);
1:         outbound.onSend();
1:         outbound.storeContent();
1: 
0:         ActiveMQJMSVendor vendor = createVendor();
0:         JMSMappingOutboundTransformer transformer = new JMSMappingOutboundTransformer(vendor);
1: 
0:         Message amqp = transformer.convert(outbound);
1: 
1:         assertNotNull(amqp.getBody());
1:         assertTrue(amqp.getBody() instanceof AmqpValue);
1:         assertTrue(((AmqpValue)amqp.getBody()).getValue() instanceof Binary);
1:         assertFalse(0 == ((Binary) ((AmqpValue) amqp.getBody()).getValue()).getLength());
1: 
1:         Object value = deserialize(((Binary) ((AmqpValue) amqp.getBody()).getValue()).getArray());
1:         assertNotNull(value);
1:         assertTrue(value instanceof UUID);
1:     }
1: 
1:     @Test
1:     public void testConvertCompressedObjectMessageToAmqpMessageWithDataBody() throws Exception {
0:         ActiveMQObjectMessage outbound = createObjectMessage(UUID.randomUUID(), true);
1:         outbound.onSend();
1:         outbound.storeContent();
1: 
0:         ActiveMQJMSVendor vendor = createVendor();
0:         JMSMappingOutboundTransformer transformer = new JMSMappingOutboundTransformer(vendor);
1: 
0:         Message amqp = transformer.convert(outbound);
1: 
1:         assertNotNull(amqp.getBody());
1:         assertTrue(amqp.getBody() instanceof Data);
1:         assertFalse(0 == ((Data) amqp.getBody()).getValue().getLength());
1: 
1:         Object value = deserialize(((Data) amqp.getBody()).getValue().getArray());
1:         assertNotNull(value);
1:         assertTrue(value instanceof UUID);
1:     }
1: 
1:     @Test
1:     public void testConvertCompressedObjectMessageToAmqpMessageUnknownEncodingGetsDataSection() throws Exception {
0:         ActiveMQObjectMessage outbound = createObjectMessage(UUID.randomUUID(), true);
0:         outbound.setShortProperty(AMQP_ORIGINAL_ENCODING_KEY, AMQP_UNKNOWN);
1:         outbound.onSend();
1:         outbound.storeContent();
1: 
0:         ActiveMQJMSVendor vendor = createVendor();
0:         JMSMappingOutboundTransformer transformer = new JMSMappingOutboundTransformer(vendor);
1: 
0:         Message amqp = transformer.convert(outbound);
1: 
1:         assertNotNull(amqp.getBody());
1:         assertTrue(amqp.getBody() instanceof Data);
1:         assertFalse(0 == ((Data) amqp.getBody()).getValue().getLength());
1: 
1:         Object value = deserialize(((Data) amqp.getBody()).getValue().getArray());
1:         assertNotNull(value);
1:         assertTrue(value instanceof UUID);
1:     }
1: 
1:     @Test
1:     public void testConvertCompressedObjectMessageToAmqpMessageWithAmqpValueBody() throws Exception {
0:         ActiveMQObjectMessage outbound = createObjectMessage(UUID.randomUUID(), true);
0:         outbound.setShortProperty(AMQP_ORIGINAL_ENCODING_KEY, AMQP_VALUE_BINARY);
1:         outbound.onSend();
1:         outbound.storeContent();
1: 
0:         ActiveMQJMSVendor vendor = createVendor();
0:         JMSMappingOutboundTransformer transformer = new JMSMappingOutboundTransformer(vendor);
1: 
0:         Message amqp = transformer.convert(outbound);
1: 
1:         assertNotNull(amqp.getBody());
1:         assertTrue(amqp.getBody() instanceof AmqpValue);
1:         assertTrue(((AmqpValue)amqp.getBody()).getValue() instanceof Binary);
1:         assertFalse(0 == ((Binary) ((AmqpValue) amqp.getBody()).getValue()).getLength());
1: 
1:         Object value = deserialize(((Binary) ((AmqpValue) amqp.getBody()).getValue()).getArray());
1:         assertNotNull(value);
1:         assertTrue(value instanceof UUID);
1:     }
1: 
1:     //----- TextMessage type tests -------------------------------------------//
1: 
1:     @Test
1:     public void testConvertTextMessageToAmqpMessageWithNoBody() throws Exception {
1:         ActiveMQTextMessage outbound = createTextMessage();
1:         outbound.onSend();
1:         outbound.storeContent();
1: 
0:         ActiveMQJMSVendor vendor = createVendor();
0:         JMSMappingOutboundTransformer transformer = new JMSMappingOutboundTransformer(vendor);
1: 
0:         Message amqp = transformer.convert(outbound);
1: 
1:         assertNotNull(amqp.getBody());
1:         assertTrue(amqp.getBody() instanceof AmqpValue);
1:         assertNull(((AmqpValue) amqp.getBody()).getValue());
1:     }
1: 
1:     @Test
1:     public void testConvertTextMessageCreatesBodyUsingOriginalEncodingWithDataSection() throws Exception {
1:         ActiveMQTextMessage outbound = createTextMessage(contentString);
0:         outbound.setShortProperty(AMQP_ORIGINAL_ENCODING_KEY, AMQP_DATA);
1:         outbound.onSend();
1:         outbound.storeContent();
0:         ActiveMQJMSVendor vendor = createVendor();
0:         JMSMappingOutboundTransformer transformer = new JMSMappingOutboundTransformer(vendor);
0:         Message amqp = transformer.convert(outbound);
1: 
1:         assertNotNull(amqp.getBody());
1:         assertTrue(amqp.getBody() instanceof Data);
1:         assertTrue(((Data) amqp.getBody()).getValue() instanceof Binary);
1: 
1:         Binary data = ((Data) amqp.getBody()).getValue();
1:         String contents = new String(data.getArray(), data.getArrayOffset(), data.getLength(), StandardCharsets.UTF_8);
1:         assertEquals(contentString, contents);
1:     }
1: 
1:     @Test
1:     public void testConvertTextMessageCreatesAmqpValueStringBody() throws Exception {
1:         String contentString = "myTextMessageContent";
1:         ActiveMQTextMessage outbound = createTextMessage(contentString);
1:         outbound.onSend();
1:         outbound.storeContent();
1: 
0:         ActiveMQJMSVendor vendor = createVendor();
0:         JMSMappingOutboundTransformer transformer = new JMSMappingOutboundTransformer(vendor);
1: 
0:         Message amqp = transformer.convert(outbound);
1:     @Test
1:     public void testConvertCompressedTextMessageCreatesDataSectionBody() throws Exception {
1:         String contentString = "myTextMessageContent";
1:         ActiveMQTextMessage outbound = createTextMessage(contentString, true);
0:         outbound.setShortProperty(AMQP_ORIGINAL_ENCODING_KEY, AMQP_DATA);
1:         outbound.onSend();
1:         outbound.storeContent();
1: 
0:         ActiveMQJMSVendor vendor = createVendor();
0:         JMSMappingOutboundTransformer transformer = new JMSMappingOutboundTransformer(vendor);
1: 
0:         Message amqp = transformer.convert(outbound);
1: 
1:         assertNotNull(amqp.getBody());
1:         assertTrue(amqp.getBody() instanceof Data);
1:         assertTrue(((Data) amqp.getBody()).getValue() instanceof Binary);
1: 
1:         Binary data = ((Data) amqp.getBody()).getValue();
1:         String contents = new String(data.getArray(), data.getArrayOffset(), data.getLength(), StandardCharsets.UTF_8);
1:         assertEquals(contentString, contents);
1:     }
1: 
1:     //----- Test JMSDestination Handling -------------------------------------//
/////////////////////////////////////////////////////////////////////////
1:         ActiveMQTextMessage mockTextMessage = createMockTextMessage();
0:         ActiveMQJMSVendor mockVendor = createMockVendor();
/////////////////////////////////////////////////////////////////////////
1:     //----- Test JMSReplyTo Handling -----------------------------------------//
/////////////////////////////////////////////////////////////////////////
1:         ActiveMQTextMessage mockTextMessage = createMockTextMessage();
0:         ActiveMQJMSVendor mockVendor = createMockVendor();
/////////////////////////////////////////////////////////////////////////
1:     //----- Utility Methods used for this Test -------------------------------//
1:     private ActiveMQTextMessage createMockTextMessage() throws Exception {
1:         ActiveMQTextMessage mockTextMessage = Mockito.mock(ActiveMQTextMessage.class);
0:     private ActiveMQJMSVendor createVendor() {
0:         return ActiveMQJMSVendor.INSTANCE;
1:     }
0:     private ActiveMQJMSVendor createMockVendor() {
0:         return Mockito.mock(ActiveMQJMSVendor.class);
1:     }
1: 
1:     private ActiveMQMessage createMessage() {
1:         return new ActiveMQMessage();
1:     }
1: 
1:     private ActiveMQBytesMessage createBytesMessage() {
1:         return createBytesMessage(false);
1:     }
1: 
1:     private ActiveMQBytesMessage createBytesMessage(boolean compression) {
1:         ActiveMQBytesMessage message = new ActiveMQBytesMessage();
1: 
1:         if (compression) {
1:             ActiveMQConnection connection = Mockito.mock(ActiveMQConnection.class);
1:             Mockito.when(connection.isUseCompression()).thenReturn(true);
1:             message.setConnection(connection);
1:         }
1: 
1:         return message;
1:     }
1: 
1:     private ActiveMQMapMessage createMapMessage() {
1:         return createMapMessage(false);
1:     }
1: 
1:     private ActiveMQMapMessage createMapMessage(boolean compression) {
1:         ActiveMQMapMessage message = new ActiveMQMapMessage();
1: 
1:         if (compression) {
1:             ActiveMQConnection connection = Mockito.mock(ActiveMQConnection.class);
1:             Mockito.when(connection.isUseCompression()).thenReturn(true);
1:             message.setConnection(connection);
1:         }
1: 
1:         return message;
1:     }
1: 
1:     private ActiveMQStreamMessage createStreamMessage() {
1:         return createStreamMessage(false);
1:     }
1: 
1:     private ActiveMQStreamMessage createStreamMessage(boolean compression) {
1:         ActiveMQStreamMessage message = new ActiveMQStreamMessage();
1: 
1:         if (compression) {
1:             ActiveMQConnection connection = Mockito.mock(ActiveMQConnection.class);
1:             Mockito.when(connection.isUseCompression()).thenReturn(true);
1:             message.setConnection(connection);
1:         }
1: 
1:         return message;
1:     }
1: 
1:     private ActiveMQObjectMessage createObjectMessage() {
1:         return createObjectMessage(null);
1:     }
1: 
1:     private ActiveMQObjectMessage createObjectMessage(Serializable payload) {
1:         return createObjectMessage(payload, false);
1:     }
1: 
1:     private ActiveMQObjectMessage createObjectMessage(Serializable payload, boolean compression) {
1:         ActiveMQObjectMessage result = new ActiveMQObjectMessage();
1: 
1:         if (compression) {
1:             ActiveMQConnection connection = Mockito.mock(ActiveMQConnection.class);
1:             Mockito.when(connection.isUseCompression()).thenReturn(true);
1:             result.setConnection(connection);
1:         }
1: 
1:         try {
1:             result.setObject(payload);
1:         } catch (JMSException ex) {
1:             throw new AssertionError("Should not fail to setObject in this test");
1:         }
1: 
1:         result = Mockito.spy(result);
1: 
1:         try {
1:             Mockito.doThrow(new AssertionError("invalid setObject")).when(result).setObject(Mockito.any(Serializable.class));
1:             Mockito.doThrow(new AssertionError("invalid getObject")).when(result).getObject();
1:         } catch (JMSException e) {
1:         }
1: 
1:         return result;
1:     }
1: 
1:     private ActiveMQTextMessage createTextMessage() {
1:         return createTextMessage(null);
1:     }
1: 
1:     private ActiveMQTextMessage createTextMessage(String text) {
1:         return createTextMessage(text, false);
1:     }
1: 
1:     private ActiveMQTextMessage createTextMessage(String text, boolean compression) {
1:         ActiveMQTextMessage result = new ActiveMQTextMessage();
1: 
1:         if (compression) {
1:             ActiveMQConnection connection = Mockito.mock(ActiveMQConnection.class);
1:             Mockito.when(connection.isUseCompression()).thenReturn(true);
1:             result.setConnection(connection);
1:         }
1: 
1:         try {
1:             result.setText(text);
1:         } catch (JMSException e) {
1:         }
1: 
1:         return result;
1:     }
1: 
1:     private Object deserialize(byte[] payload) throws Exception {
1:         try (ByteArrayInputStream bis = new ByteArrayInputStream(payload);
1:              ObjectInputStream ois = new ObjectInputStream(bis);) {
1: 
1:             return ois.readObject();
1:         }
commit:528c25c
/////////////////////////////////////////////////////////////////////////
1: import static org.apache.activemq.transport.amqp.message.JMSMappingOutboundTransformer.JMS_DEST_TYPE_MSG_ANNOTATION;
1: import static org.apache.activemq.transport.amqp.message.JMSMappingOutboundTransformer.JMS_REPLY_TO_TYPE_MSG_ANNOTATION;
1: import static org.apache.activemq.transport.amqp.message.JMSMappingOutboundTransformer.QUEUE_TYPE;
1: import static org.apache.activemq.transport.amqp.message.JMSMappingOutboundTransformer.TEMP_QUEUE_TYPE;
1: import static org.apache.activemq.transport.amqp.message.JMSMappingOutboundTransformer.TEMP_TOPIC_TYPE;
1: import static org.apache.activemq.transport.amqp.message.JMSMappingOutboundTransformer.TOPIC_TYPE;
/////////////////////////////////////////////////////////////////////////
0:         doTestConvertMessageWithJMSDestination(mockDest, QUEUE_TYPE);
0:         doTestConvertMessageWithJMSDestination(mockDest, TEMP_QUEUE_TYPE);
0:         doTestConvertMessageWithJMSDestination(mockDest, TOPIC_TYPE);
0:         doTestConvertMessageWithJMSDestination(mockDest, TEMP_TOPIC_TYPE);
/////////////////////////////////////////////////////////////////////////
1:             Object actualValue = maMap.get(JMS_DEST_TYPE_MSG_ANNOTATION);
/////////////////////////////////////////////////////////////////////////
0:         doTestConvertMessageWithJMSReplyTo(mockDest, QUEUE_TYPE);
0:         doTestConvertMessageWithJMSReplyTo(mockDest, TEMP_QUEUE_TYPE);
0:         doTestConvertMessageWithJMSReplyTo(mockDest, TOPIC_TYPE);
0:         doTestConvertMessageWithJMSReplyTo(mockDest, TEMP_TOPIC_TYPE);
/////////////////////////////////////////////////////////////////////////
1:             Object actualValue = maMap.get(JMS_REPLY_TO_TYPE_MSG_ANNOTATION);
commit:276ef15
/////////////////////////////////////////////////////////////////////////
commit:6e69319
/////////////////////////////////////////////////////////////////////////
0: /**
1:  * Licensed to the Apache Software Foundation (ASF) under one or more
1:  * contributor license agreements.  See the NOTICE file distributed with
1:  * this work for additional information regarding copyright ownership.
1:  * The ASF licenses this file to You under the Apache License, Version 2.0
1:  * (the "License"); you may not use this file except in compliance with
1:  * the License.  You may obtain a copy of the License at
1:  *
1:  *      http://www.apache.org/licenses/LICENSE-2.0
1:  *
1:  * Unless required by applicable law or agreed to in writing, software
1:  * distributed under the License is distributed on an "AS IS" BASIS,
1:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:  * See the License for the specific language governing permissions and
1:  * limitations under the License.
1:  */
1: package org.apache.activemq.transport.amqp.message;
1: 
1: import static org.junit.Assert.assertEquals;
0: import static org.junit.Assert.assertFalse;
1: import static org.junit.Assert.assertNotNull;
1: import static org.junit.Assert.assertTrue;
1: import static org.junit.Assert.fail;
1: 
1: import java.util.Collections;
1: import java.util.Map;
1: 
0: import javax.jms.Destination;
0: import javax.jms.Queue;
0: import javax.jms.TemporaryQueue;
0: import javax.jms.TemporaryTopic;
0: import javax.jms.TextMessage;
0: import javax.jms.Topic;
1: 
1: import org.apache.qpid.proton.amqp.Symbol;
1: import org.apache.qpid.proton.amqp.messaging.AmqpValue;
1: import org.apache.qpid.proton.amqp.messaging.MessageAnnotations;
1: import org.apache.qpid.proton.message.Message;
1: import org.junit.Test;
1: import org.mockito.Mockito;
1: 
1: public class JMSMappingOutboundTransformerTest {
1: 
1:     @Test
0:     public void testConvertMessageWithTextMessageCreatesAmqpValueStringBody() throws Exception {
1:         String contentString = "myTextMessageContent";
0:         TextMessage mockTextMessage = createMockTextMessage();
0:         Mockito.when(mockTextMessage.getText()).thenReturn(contentString);
0:         JMSVendor mockVendor = createMockVendor();
1: 
0:         JMSMappingOutboundTransformer transformer = new JMSMappingOutboundTransformer(mockVendor);
1: 
0:         Message amqp = transformer.convert(mockTextMessage);
1: 
1:         assertNotNull(amqp.getBody());
1:         assertTrue(amqp.getBody() instanceof AmqpValue);
1:         assertEquals(contentString, ((AmqpValue) amqp.getBody()).getValue());
1:     }
1: 
1:     @Test
0:     public void testDefaultsTolStringDestinationTypeAnnotationValues() {
0:         JMSVendor mockVendor = createMockVendor();
0:         JMSMappingOutboundTransformer transformer = new JMSMappingOutboundTransformer(mockVendor);
1: 
0:         assertFalse("Expected the older string style annotation values to be used by default", transformer.isUseByteDestinationTypeAnnotations());
1:     }
1: 
1:     @Test
0:     public void testSetGetIsUseByteDestinationTypeAnnotations() {
0:         JMSVendor mockVendor = createMockVendor();
0:         JMSMappingOutboundTransformer transformer = new JMSMappingOutboundTransformer(mockVendor);
1: 
0:         assertFalse(transformer.isUseByteDestinationTypeAnnotations());
0:         transformer.setUseByteDestinationTypeAnnotations(true);
0:         assertTrue(transformer.isUseByteDestinationTypeAnnotations());
1:     }
1: 
0:     // ======= JMSDestination Handling =========
1: 
0:     // --- String type annotation ---
1:     @Test
1:     public void testConvertMessageWithJMSDestinationNull() throws Exception {
0:         doTestConvertMessageWithJMSDestination(null, null, false);
1:     }
1: 
1:     @Test
1:     public void testConvertMessageWithJMSDestinationQueue() throws Exception {
0:         Queue mockDest = Mockito.mock(Queue.class);
1: 
0:         doTestConvertMessageWithJMSDestination(mockDest, "queue", false);
1:     }
1: 
1:     @Test
1:     public void testConvertMessageWithJMSDestinationTemporaryQueue() throws Exception {
0:         TemporaryQueue mockDest = Mockito.mock(TemporaryQueue.class);
1: 
0:         doTestConvertMessageWithJMSDestination(mockDest, "temporary,queue", false);
1:     }
1: 
1:     @Test
1:     public void testConvertMessageWithJMSDestinationTopic() throws Exception {
0:         Topic mockDest = Mockito.mock(Topic.class);
1: 
0:         doTestConvertMessageWithJMSDestination(mockDest, "topic", false);
1:     }
1: 
1:     @Test
1:     public void testConvertMessageWithJMSDestinationTemporaryTopic() throws Exception {
0:         TemporaryTopic mockDest = Mockito.mock(TemporaryTopic.class);
1: 
0:         doTestConvertMessageWithJMSDestination(mockDest, "temporary,topic", false);
1:     }
1: 
0:     // --- byte type annotation ---
1: 
1:     @Test
0:     public void testConvertMessageWithJMSDestinationNullUsingByteAnnotation() throws Exception {
0:         doTestConvertMessageWithJMSDestination(null, null, true);
1:     }
1: 
1:     @Test
0:     public void testConvertMessageWithJMSDestinationQueueUsingByteAnnotation() throws Exception {
0:         Queue mockDest = Mockito.mock(Queue.class);
1: 
0:         doTestConvertMessageWithJMSDestination(mockDest, JMSVendor.QUEUE_TYPE, true);
1:     }
1: 
1:     @Test
0:     public void testConvertMessageWithJMSDestinationTemporaryQueueUsingByteAnnotation() throws Exception {
0:         TemporaryQueue mockDest = Mockito.mock(TemporaryQueue.class);
1: 
0:         doTestConvertMessageWithJMSDestination(mockDest, JMSVendor.TEMP_QUEUE_TYPE, true);
1:     }
1: 
1:     @Test
0:     public void testConvertMessageWithJMSDestinationTopicUsingByteAnnotation() throws Exception {
0:         Topic mockDest = Mockito.mock(Topic.class);
1: 
0:         doTestConvertMessageWithJMSDestination(mockDest, JMSVendor.TOPIC_TYPE, true);
1:     }
1: 
1:     @Test
0:     public void testConvertMessageWithJMSDestinationTemporaryTopicUsingByteAnnotation() throws Exception {
0:         TemporaryTopic mockDest = Mockito.mock(TemporaryTopic.class);
1: 
0:         doTestConvertMessageWithJMSDestination(mockDest, JMSVendor.TEMP_TOPIC_TYPE, true);
1:     }
1: 
1:     @Test
0:     public void testConvertMessageWithJMSDestinationUnkownUsingByteAnnotation() throws Exception {
0:         Destination mockDest = Mockito.mock(Destination.class);
1: 
0:         doTestConvertMessageWithJMSDestination(mockDest, JMSVendor.QUEUE_TYPE, true);
1:     }
1: 
0:     private void doTestConvertMessageWithJMSDestination(Destination jmsDestination, Object expectedAnnotationValue, boolean byteType) throws Exception {
0:         TextMessage mockTextMessage = createMockTextMessage();
1:         Mockito.when(mockTextMessage.getText()).thenReturn("myTextMessageContent");
0:         Mockito.when(mockTextMessage.getJMSDestination()).thenReturn(jmsDestination);
0:         JMSVendor mockVendor = createMockVendor();
0:         String toAddress = "someToAddress";
1:         if (jmsDestination != null) {
0:             Mockito.when(mockVendor.toAddress(Mockito.any(Destination.class))).thenReturn(toAddress);
1:         }
1: 
0:         JMSMappingOutboundTransformer transformer = new JMSMappingOutboundTransformer(mockVendor);
0:         if (byteType) {
0:             transformer.setUseByteDestinationTypeAnnotations(true);
1:         }
1: 
0:         Message amqp = transformer.convert(mockTextMessage);
1: 
1:         MessageAnnotations ma = amqp.getMessageAnnotations();
1:         Map<Symbol, Object> maMap = ma == null ? null : ma.getValue();
1:         if (maMap != null) {
0:             Object actualValue = maMap.get(Symbol.valueOf("x-opt-to-type"));
1:             assertEquals("Unexpected annotation value", expectedAnnotationValue, actualValue);
1:         } else if (expectedAnnotationValue != null) {
1:             fail("Expected annotation value, but there were no annotations");
1:         }
1: 
1:         if (jmsDestination != null) {
0:             assertEquals("Unexpected 'to' address", toAddress, amqp.getAddress());
1:         }
1:     }
1: 
0:     // ======= JMSReplyTo Handling =========
1: 
0:     // --- String type annotation ---
1:     @Test
1:     public void testConvertMessageWithJMSReplyToNull() throws Exception {
0:         doTestConvertMessageWithJMSReplyTo(null, null, false);
1:     }
1: 
1:     @Test
1:     public void testConvertMessageWithJMSReplyToQueue() throws Exception {
0:         Queue mockDest = Mockito.mock(Queue.class);
1: 
0:         doTestConvertMessageWithJMSReplyTo(mockDest, "queue", false);
1:     }
1: 
1:     @Test
1:     public void testConvertMessageWithJMSReplyToTemporaryQueue() throws Exception {
0:         TemporaryQueue mockDest = Mockito.mock(TemporaryQueue.class);
1: 
0:         doTestConvertMessageWithJMSReplyTo(mockDest, "temporary,queue", false);
1:     }
1: 
1:     @Test
1:     public void testConvertMessageWithJMSReplyToTopic() throws Exception {
0:         Topic mockDest = Mockito.mock(Topic.class);
1: 
0:         doTestConvertMessageWithJMSReplyTo(mockDest, "topic", false);
1:     }
1: 
1:     @Test
1:     public void testConvertMessageWithJMSReplyToTemporaryTopic() throws Exception {
0:         TemporaryTopic mockDest = Mockito.mock(TemporaryTopic.class);
1: 
0:         doTestConvertMessageWithJMSReplyTo(mockDest, "temporary,topic", false);
1:     }
1: 
0:     // --- byte type annotation ---
1:     @Test
0:     public void testConvertMessageWithJMSReplyToNullUsingByteAnnotation() throws Exception {
0:         doTestConvertMessageWithJMSReplyTo(null, null, true);
1:     }
1: 
1:     @Test
0:     public void testConvertMessageWithJMSReplyToQueueUsingByteAnnotation() throws Exception {
0:         Queue mockDest = Mockito.mock(Queue.class);
1: 
0:         doTestConvertMessageWithJMSReplyTo(mockDest, JMSVendor.QUEUE_TYPE, true);
1:     }
1: 
1:     @Test
0:     public void testConvertMessageWithJMSReplyToTemporaryQueueUsingByteAnnotation() throws Exception {
0:         TemporaryQueue mockDest = Mockito.mock(TemporaryQueue.class);
1: 
0:         doTestConvertMessageWithJMSReplyTo(mockDest, JMSVendor.TEMP_QUEUE_TYPE, true);
1:     }
1: 
1:     @Test
0:     public void testConvertMessageWithJMSReplyToTopicUsingByteAnnotation() throws Exception {
0:         Topic mockDest = Mockito.mock(Topic.class);
1: 
0:         doTestConvertMessageWithJMSReplyTo(mockDest, JMSVendor.TOPIC_TYPE, true);
1:     }
1: 
1:     @Test
0:     public void testConvertMessageWithJMSReplyToTemporaryTopicUsingByteAnnotation() throws Exception {
0:         TemporaryTopic mockDest = Mockito.mock(TemporaryTopic.class);
1: 
0:         doTestConvertMessageWithJMSReplyTo(mockDest, JMSVendor.TEMP_TOPIC_TYPE, true);
1:     }
1: 
1:     @Test
0:     public void testConvertMessageWithJMSReplyToUnkownUsingByteAnnotation() throws Exception {
0:         Destination mockDest = Mockito.mock(Destination.class);
1: 
0:         doTestConvertMessageWithJMSReplyTo(mockDest, JMSVendor.QUEUE_TYPE, true);
1:     }
1: 
0:     private void doTestConvertMessageWithJMSReplyTo(Destination jmsReplyTo, Object expectedAnnotationValue, boolean byteType) throws Exception {
0:         TextMessage mockTextMessage = createMockTextMessage();
1:         Mockito.when(mockTextMessage.getText()).thenReturn("myTextMessageContent");
0:         Mockito.when(mockTextMessage.getJMSReplyTo()).thenReturn(jmsReplyTo);
0:         JMSVendor mockVendor = createMockVendor();
0:         String replyToAddress = "someReplyToAddress";
1:         if (jmsReplyTo != null) {
0:             Mockito.when(mockVendor.toAddress(Mockito.any(Destination.class))).thenReturn(replyToAddress);
1:         }
1: 
0:         JMSMappingOutboundTransformer transformer = new JMSMappingOutboundTransformer(mockVendor);
0:         if (byteType) {
0:             transformer.setUseByteDestinationTypeAnnotations(true);
1:         }
1: 
0:         Message amqp = transformer.convert(mockTextMessage);
1: 
1:         MessageAnnotations ma = amqp.getMessageAnnotations();
1:         Map<Symbol, Object> maMap = ma == null ? null : ma.getValue();
1:         if (maMap != null) {
0:             Object actualValue = maMap.get(Symbol.valueOf("x-opt-reply-type"));
1:             assertEquals("Unexpected annotation value", expectedAnnotationValue, actualValue);
1:         } else if (expectedAnnotationValue != null) {
1:             fail("Expected annotation value, but there were no annotations");
1:         }
1: 
1:         if (jmsReplyTo != null) {
0:             assertEquals("Unexpected 'reply-to' address", replyToAddress, amqp.getReplyTo());
1:         }
1:     }
1: 
0:     // ======= Utility Methods =========
1: 
0:     private TextMessage createMockTextMessage() throws Exception {
0:         TextMessage mockTextMessage = Mockito.mock(TextMessage.class);
1:         Mockito.when(mockTextMessage.getPropertyNames()).thenReturn(Collections.enumeration(Collections.emptySet()));
1: 
1:         return mockTextMessage;
1:     }
1: 
0:     private JMSVendor createMockVendor() {
0:         JMSVendor mockVendor = Mockito.mock(JMSVendor.class);
1: 
0:         return mockVendor;
1:     }
1: }
author:Robert Gemmell
-------------------------------------------------------------------------------
commit:37b1b6a
/////////////////////////////////////////////////////////////////////////
1:         doTestConvertMessageWithJMSDestination(null, null);
0:         doTestConvertMessageWithJMSDestination(mockDest, "queue");
0:         doTestConvertMessageWithJMSDestination(mockDest, "temporary,queue");
0:         doTestConvertMessageWithJMSDestination(mockDest, "topic");
0:         doTestConvertMessageWithJMSDestination(mockDest, "temporary,topic");
0:     private void doTestConvertMessageWithJMSDestination(Destination jmsDestination, Object expectedAnnotationValue) throws Exception {
/////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////
1:         doTestConvertMessageWithJMSReplyTo(null, null);
0:         doTestConvertMessageWithJMSReplyTo(mockDest, "queue");
0:         doTestConvertMessageWithJMSReplyTo(mockDest, "temporary,queue");
0:         doTestConvertMessageWithJMSReplyTo(mockDest, "topic");
0:         doTestConvertMessageWithJMSReplyTo(mockDest, "temporary,topic");
0:     private void doTestConvertMessageWithJMSReplyTo(Destination jmsReplyTo, Object expectedAnnotationValue) throws Exception {
/////////////////////////////////////////////////////////////////////////
============================================================================