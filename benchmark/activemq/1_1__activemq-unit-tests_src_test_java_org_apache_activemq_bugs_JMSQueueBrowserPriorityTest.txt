1:2b84cd6: /**
1:2b84cd6:  * Licensed to the Apache Software Foundation (ASF) under one or more
1:2b84cd6:  * contributor license agreements.  See the NOTICE file distributed with
1:2b84cd6:  * this work for additional information regarding copyright ownership.
1:2b84cd6:  * The ASF licenses this file to You under the Apache License, Version 2.0
1:2b84cd6:  * (the "License"); you may not use this file except in compliance with
1:2b84cd6:  * the License.  You may obtain a copy of the License at
1:2b84cd6:  * <p/>
1:2b84cd6:  * http://www.apache.org/licenses/LICENSE-2.0
1:2b84cd6:  * <p/>
1:2b84cd6:  * Unless required by applicable law or agreed to in writing, software
1:2b84cd6:  * distributed under the License is distributed on an "AS IS" BASIS,
1:2b84cd6:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:2b84cd6:  * See the License for the specific language governing permissions and
1:2b84cd6:  * limitations under the License.
1:2b84cd6:  */
1:2b84cd6: package org.apache.activemq.bugs;
1:2b84cd6: 
1:2b84cd6: import java.util.ArrayList;
1:2b84cd6: import java.util.Enumeration;
1:2b84cd6: import java.util.List;
1:2b84cd6: import javax.jms.BytesMessage;
1:2b84cd6: import javax.jms.Connection;
1:2b84cd6: import javax.jms.ConnectionFactory;
1:2b84cd6: import javax.jms.Message;
1:2b84cd6: import javax.jms.MessageConsumer;
1:2b84cd6: import javax.jms.MessageProducer;
1:2b84cd6: import javax.jms.QueueBrowser;
1:2b84cd6: import javax.jms.Session;
1:2b84cd6: import junit.framework.TestCase;
1:2b84cd6: import org.apache.activemq.ActiveMQConnectionFactory;
1:2b84cd6: import org.apache.activemq.broker.BrokerService;
1:2b84cd6: import org.apache.activemq.broker.region.policy.PolicyEntry;
1:2b84cd6: import org.apache.activemq.broker.region.policy.PolicyMap;
1:2b84cd6: import org.apache.activemq.command.ActiveMQQueue;
1:2b84cd6: import org.slf4j.Logger;
1:2b84cd6: import org.slf4j.LoggerFactory;
1:2b84cd6: 
1:2b84cd6: // https://issues.apache.org/jira/browse/AMQ-6128
1:2b84cd6: public class JMSQueueBrowserPriorityTest extends TestCase {
1:2b84cd6: 
1:2b84cd6:     static final Logger LOG = LoggerFactory.getLogger(JMSQueueBrowserPriorityTest.class);
1:2b84cd6:     private static final String TEST_AMQ_BROKER_URI = "tcp://localhost:0";
1:2b84cd6:     private BrokerService broker;
1:2b84cd6:     public static final byte[] PAYLOAD = new byte[]{0, 1, 2, 3, 4, 5, 6, 7, 8, 9};
1:2b84cd6: 
1:2b84cd6: 
1:2b84cd6:     protected void setUp() throws Exception {
1:2b84cd6:         broker = createBroker();
1:2b84cd6:         broker.start();
1:2b84cd6:         broker.waitUntilStarted();
1:2b84cd6:     }
1:2b84cd6: 
1:2b84cd6:     protected void tearDown() throws Exception {
1:2b84cd6: 
1:2b84cd6:         if (broker != null) {
1:2b84cd6:             broker.stop();
1:2b84cd6:         }
1:2b84cd6:     }
1:2b84cd6: 
1:2b84cd6: 
1:2b84cd6:     /**
1:2b84cd6:      * Send MEDIUM priority
1:2b84cd6:      * Send HIGH priority
1:2b84cd6:      * Send HIGH priority
1:2b84cd6:      * <p/>
1:2b84cd6:      * browse the list of messages
1:2b84cd6:      * <p/>
1:2b84cd6:      * consume the messages from the queue
1:2b84cd6:      * <p/>
1:2b84cd6:      * Compare browse and consumed messages - they should be the same
1:2b84cd6:      *
1:2b84cd6:      * @throws Exception
1:2b84cd6:      */
1:2b84cd6:     public void testBrowsePriorityMessages() throws Exception {
1:2b84cd6: 
1:2b84cd6: 
1:2b84cd6:         for (int i = 0; i < 5; i++) {
1:2b84cd6: 
1:2b84cd6:             // MED
1:2b84cd6:             produceMessages(3, 4, "TestQ");
1:2b84cd6: 
1:2b84cd6:             Thread.sleep(1000);
1:2b84cd6: 
1:2b84cd6:             // HI
1:2b84cd6:             produceMessages(3, 9, "TestQ");
1:2b84cd6: 
1:2b84cd6:             // browse messages, will page in
1:2b84cd6:             ArrayList<Integer> browseList = browseQueue("TestQ");
1:2b84cd6: 
1:2b84cd6:             // HI
1:2b84cd6:             produceMessages(3, 9, "TestQ");
1:2b84cd6: 
1:2b84cd6:             // browse again to be sure new messages are picked up
1:2b84cd6:             browseList = browseQueue("TestQ");
1:2b84cd6: 
1:2b84cd6:             // consume messages to verify order
1:2b84cd6:             ArrayList<Integer> consumeList = consumeMessages("TestQ");
1:2b84cd6: 
1:2b84cd6:             if (!browseList.equals(consumeList)) {
1:2b84cd6:                 LOG.info("browseList size " + browseList.size());
1:2b84cd6:                 LOG.info("consumeList size " + consumeList.size());
1:2b84cd6:                 LOG.info("browseList is:" + browseList);
1:2b84cd6:                 LOG.info("consumeList is:" + consumeList);
1:2b84cd6:             }
1:2b84cd6: 
1:2b84cd6:             // compare lists
1:2b84cd6:             assertTrue("browseList and consumeList should be equal, iteration " + i, browseList.equals(consumeList));
1:2b84cd6:         }
1:2b84cd6:     }
1:2b84cd6: 
1:2b84cd6:     private void produceMessages(int numberOfMessages, int priority, String queueName) throws Exception {
1:2b84cd6: 
1:2b84cd6:         ConnectionFactory connectionFactory = new ActiveMQConnectionFactory(broker.getDefaultSocketURIString());
1:2b84cd6:         Connection connection = connectionFactory.createConnection();
1:2b84cd6:         try {
1:2b84cd6:             Session session = connection.createSession(false, Session.AUTO_ACKNOWLEDGE);
1:2b84cd6:             MessageProducer producer = session.createProducer(new ActiveMQQueue(queueName));
1:2b84cd6:             connection.start();
1:2b84cd6: 
1:2b84cd6: 
1:2b84cd6:             for (int i = 0; i < numberOfMessages; i++) {
1:2b84cd6:                 BytesMessage m = session.createBytesMessage();
1:2b84cd6:                 m.writeBytes(PAYLOAD);
1:2b84cd6:                 m.setJMSPriority(priority);
1:2b84cd6:                 producer.send(m, Message.DEFAULT_DELIVERY_MODE, m.getJMSPriority(), Message.DEFAULT_TIME_TO_LIVE);
1:2b84cd6:             }
1:2b84cd6: 
1:2b84cd6:         } finally {
1:2b84cd6: 
1:2b84cd6:             if (connection != null) {
1:2b84cd6:                 connection.close();
1:2b84cd6:             }
1:2b84cd6:         }
1:2b84cd6:     }
1:2b84cd6: 
1:2b84cd6:     private ArrayList<Integer> browseQueue(String queueName) throws Exception {
1:2b84cd6: 
1:2b84cd6:         ArrayList<Integer> returnedMessages = new ArrayList<Integer>();
1:2b84cd6: 
1:2b84cd6:         ActiveMQConnectionFactory connectionFactory = new ActiveMQConnectionFactory(broker.getDefaultSocketURIString());
1:2b84cd6:         Connection connection = connectionFactory.createConnection();
1:2b84cd6:         try {
1:2b84cd6:             Session session = connection.createSession(false, Session.AUTO_ACKNOWLEDGE);
1:2b84cd6:             QueueBrowser browser = session.createBrowser(new ActiveMQQueue(queueName));
1:2b84cd6:             connection.start();
1:2b84cd6: 
1:2b84cd6:             Enumeration<Message> browsedMessages = browser.getEnumeration();
1:2b84cd6: 
1:2b84cd6:             while (browsedMessages.hasMoreElements()) {
1:2b84cd6:                 returnedMessages.add(browsedMessages.nextElement().getJMSPriority());
1:2b84cd6:             }
1:2b84cd6: 
1:2b84cd6:             return returnedMessages;
1:2b84cd6: 
1:2b84cd6:         } finally {
1:2b84cd6: 
1:2b84cd6:             if (connection != null) {
1:2b84cd6:                 connection.close();
1:2b84cd6:             }
1:2b84cd6:         }
1:2b84cd6: 
1:2b84cd6:     }
1:2b84cd6: 
1:2b84cd6: 
1:2b84cd6:     private ArrayList<Integer> consumeMessages(String queueName) throws Exception {
1:2b84cd6: 
1:2b84cd6:         ArrayList<Integer> returnedMessages = new ArrayList<Integer>();
1:2b84cd6: 
1:2b84cd6:         ActiveMQConnectionFactory connectionFactory = new ActiveMQConnectionFactory(broker.getDefaultSocketURIString());
1:2b84cd6:         connectionFactory.setMessagePrioritySupported(true);
1:2b84cd6:         Connection connection = connectionFactory.createConnection();
1:2b84cd6:         try {
1:2b84cd6:             Session session = connection.createSession(false, Session.AUTO_ACKNOWLEDGE);
1:2b84cd6:             MessageConsumer consumer = session.createConsumer(new ActiveMQQueue(queueName));
1:2b84cd6:             connection.start();
1:2b84cd6:             boolean finished = false;
1:2b84cd6: 
1:2b84cd6:             while (!finished) {
1:2b84cd6: 
1:2b84cd6:                 Message message = consumer.receive(1000);
1:2b84cd6:                 if (message == null) {
1:2b84cd6:                     finished = true;
1:2b84cd6:                 }
1:2b84cd6: 
1:2b84cd6:                 if (message != null) {
1:2b84cd6:                     returnedMessages.add(message.getJMSPriority());
1:2b84cd6:                 }
1:2b84cd6: 
1:2b84cd6:             }
1:2b84cd6:             return returnedMessages;
1:2b84cd6: 
1:2b84cd6:         } finally {
1:2b84cd6: 
1:2b84cd6:             if (connection != null) {
1:2b84cd6:                 connection.close();
1:2b84cd6:             }
1:2b84cd6:         }
1:2b84cd6:     }
1:2b84cd6: 
1:2b84cd6:     private BrokerService createBroker() throws Exception {
1:2b84cd6:         BrokerService broker = new BrokerService();
1:2b84cd6: 
1:2b84cd6:         PolicyMap policyMap = new PolicyMap();
1:2b84cd6:         List<PolicyEntry> entries = new ArrayList<PolicyEntry>();
1:2b84cd6:         PolicyEntry pe = new PolicyEntry();
1:2b84cd6: 
1:2b84cd6: 
1:2b84cd6:         pe.setProducerFlowControl(true);
1:2b84cd6:         pe.setUseCache(true);
1:2b84cd6: 
1:2b84cd6:         pe.setPrioritizedMessages(true);
1:2b84cd6:         pe.setExpireMessagesPeriod(0);
1:2b84cd6: 
1:2b84cd6:         pe.setQueue(">");
1:2b84cd6:         entries.add(pe);
1:2b84cd6:         policyMap.setPolicyEntries(entries);
1:2b84cd6:         broker.setDestinationPolicy(policyMap);
1:2b84cd6: 
1:2b84cd6: 
1:2b84cd6:         broker.addConnector(TEST_AMQ_BROKER_URI);
1:2b84cd6:         broker.deleteAllMessages();
1:2b84cd6:         return broker;
1:2b84cd6:     }
1:2b84cd6: }
============================================================================
author:gtully
-------------------------------------------------------------------------------
commit:2b84cd6
/////////////////////////////////////////////////////////////////////////
1: /**
1:  * Licensed to the Apache Software Foundation (ASF) under one or more
1:  * contributor license agreements.  See the NOTICE file distributed with
1:  * this work for additional information regarding copyright ownership.
1:  * The ASF licenses this file to You under the Apache License, Version 2.0
1:  * (the "License"); you may not use this file except in compliance with
1:  * the License.  You may obtain a copy of the License at
1:  * <p/>
1:  * http://www.apache.org/licenses/LICENSE-2.0
1:  * <p/>
1:  * Unless required by applicable law or agreed to in writing, software
1:  * distributed under the License is distributed on an "AS IS" BASIS,
1:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:  * See the License for the specific language governing permissions and
1:  * limitations under the License.
1:  */
1: package org.apache.activemq.bugs;
1: 
1: import java.util.ArrayList;
1: import java.util.Enumeration;
1: import java.util.List;
1: import javax.jms.BytesMessage;
1: import javax.jms.Connection;
1: import javax.jms.ConnectionFactory;
1: import javax.jms.Message;
1: import javax.jms.MessageConsumer;
1: import javax.jms.MessageProducer;
1: import javax.jms.QueueBrowser;
1: import javax.jms.Session;
1: import junit.framework.TestCase;
1: import org.apache.activemq.ActiveMQConnectionFactory;
1: import org.apache.activemq.broker.BrokerService;
1: import org.apache.activemq.broker.region.policy.PolicyEntry;
1: import org.apache.activemq.broker.region.policy.PolicyMap;
1: import org.apache.activemq.command.ActiveMQQueue;
1: import org.slf4j.Logger;
1: import org.slf4j.LoggerFactory;
1: 
1: // https://issues.apache.org/jira/browse/AMQ-6128
1: public class JMSQueueBrowserPriorityTest extends TestCase {
1: 
1:     static final Logger LOG = LoggerFactory.getLogger(JMSQueueBrowserPriorityTest.class);
1:     private static final String TEST_AMQ_BROKER_URI = "tcp://localhost:0";
1:     private BrokerService broker;
1:     public static final byte[] PAYLOAD = new byte[]{0, 1, 2, 3, 4, 5, 6, 7, 8, 9};
1: 
1: 
1:     protected void setUp() throws Exception {
1:         broker = createBroker();
1:         broker.start();
1:         broker.waitUntilStarted();
1:     }
1: 
1:     protected void tearDown() throws Exception {
1: 
1:         if (broker != null) {
1:             broker.stop();
1:         }
1:     }
1: 
1: 
1:     /**
1:      * Send MEDIUM priority
1:      * Send HIGH priority
1:      * Send HIGH priority
1:      * <p/>
1:      * browse the list of messages
1:      * <p/>
1:      * consume the messages from the queue
1:      * <p/>
1:      * Compare browse and consumed messages - they should be the same
1:      *
1:      * @throws Exception
1:      */
1:     public void testBrowsePriorityMessages() throws Exception {
1: 
1: 
1:         for (int i = 0; i < 5; i++) {
1: 
1:             // MED
1:             produceMessages(3, 4, "TestQ");
1: 
1:             Thread.sleep(1000);
1: 
1:             // HI
1:             produceMessages(3, 9, "TestQ");
1: 
1:             // browse messages, will page in
1:             ArrayList<Integer> browseList = browseQueue("TestQ");
1: 
1:             // HI
1:             produceMessages(3, 9, "TestQ");
1: 
1:             // browse again to be sure new messages are picked up
1:             browseList = browseQueue("TestQ");
1: 
1:             // consume messages to verify order
1:             ArrayList<Integer> consumeList = consumeMessages("TestQ");
1: 
1:             if (!browseList.equals(consumeList)) {
1:                 LOG.info("browseList size " + browseList.size());
1:                 LOG.info("consumeList size " + consumeList.size());
1:                 LOG.info("browseList is:" + browseList);
1:                 LOG.info("consumeList is:" + consumeList);
1:             }
1: 
1:             // compare lists
1:             assertTrue("browseList and consumeList should be equal, iteration " + i, browseList.equals(consumeList));
1:         }
1:     }
1: 
1:     private void produceMessages(int numberOfMessages, int priority, String queueName) throws Exception {
1: 
1:         ConnectionFactory connectionFactory = new ActiveMQConnectionFactory(broker.getDefaultSocketURIString());
1:         Connection connection = connectionFactory.createConnection();
1:         try {
1:             Session session = connection.createSession(false, Session.AUTO_ACKNOWLEDGE);
1:             MessageProducer producer = session.createProducer(new ActiveMQQueue(queueName));
1:             connection.start();
1: 
1: 
1:             for (int i = 0; i < numberOfMessages; i++) {
1:                 BytesMessage m = session.createBytesMessage();
1:                 m.writeBytes(PAYLOAD);
1:                 m.setJMSPriority(priority);
1:                 producer.send(m, Message.DEFAULT_DELIVERY_MODE, m.getJMSPriority(), Message.DEFAULT_TIME_TO_LIVE);
1:             }
1: 
1:         } finally {
1: 
1:             if (connection != null) {
1:                 connection.close();
1:             }
1:         }
1:     }
1: 
1:     private ArrayList<Integer> browseQueue(String queueName) throws Exception {
1: 
1:         ArrayList<Integer> returnedMessages = new ArrayList<Integer>();
1: 
1:         ActiveMQConnectionFactory connectionFactory = new ActiveMQConnectionFactory(broker.getDefaultSocketURIString());
1:         Connection connection = connectionFactory.createConnection();
1:         try {
1:             Session session = connection.createSession(false, Session.AUTO_ACKNOWLEDGE);
1:             QueueBrowser browser = session.createBrowser(new ActiveMQQueue(queueName));
1:             connection.start();
1: 
1:             Enumeration<Message> browsedMessages = browser.getEnumeration();
1: 
1:             while (browsedMessages.hasMoreElements()) {
1:                 returnedMessages.add(browsedMessages.nextElement().getJMSPriority());
1:             }
1: 
1:             return returnedMessages;
1: 
1:         } finally {
1: 
1:             if (connection != null) {
1:                 connection.close();
1:             }
1:         }
1: 
1:     }
1: 
1: 
1:     private ArrayList<Integer> consumeMessages(String queueName) throws Exception {
1: 
1:         ArrayList<Integer> returnedMessages = new ArrayList<Integer>();
1: 
1:         ActiveMQConnectionFactory connectionFactory = new ActiveMQConnectionFactory(broker.getDefaultSocketURIString());
1:         connectionFactory.setMessagePrioritySupported(true);
1:         Connection connection = connectionFactory.createConnection();
1:         try {
1:             Session session = connection.createSession(false, Session.AUTO_ACKNOWLEDGE);
1:             MessageConsumer consumer = session.createConsumer(new ActiveMQQueue(queueName));
1:             connection.start();
1:             boolean finished = false;
1: 
1:             while (!finished) {
1: 
1:                 Message message = consumer.receive(1000);
1:                 if (message == null) {
1:                     finished = true;
1:                 }
1: 
1:                 if (message != null) {
1:                     returnedMessages.add(message.getJMSPriority());
1:                 }
1: 
1:             }
1:             return returnedMessages;
1: 
1:         } finally {
1: 
1:             if (connection != null) {
1:                 connection.close();
1:             }
1:         }
1:     }
1: 
1:     private BrokerService createBroker() throws Exception {
1:         BrokerService broker = new BrokerService();
1: 
1:         PolicyMap policyMap = new PolicyMap();
1:         List<PolicyEntry> entries = new ArrayList<PolicyEntry>();
1:         PolicyEntry pe = new PolicyEntry();
1: 
1: 
1:         pe.setProducerFlowControl(true);
1:         pe.setUseCache(true);
1: 
1:         pe.setPrioritizedMessages(true);
1:         pe.setExpireMessagesPeriod(0);
1: 
1:         pe.setQueue(">");
1:         entries.add(pe);
1:         policyMap.setPolicyEntries(entries);
1:         broker.setDestinationPolicy(policyMap);
1: 
1: 
1:         broker.addConnector(TEST_AMQ_BROKER_URI);
1:         broker.deleteAllMessages();
1:         return broker;
1:     }
1: }
============================================================================