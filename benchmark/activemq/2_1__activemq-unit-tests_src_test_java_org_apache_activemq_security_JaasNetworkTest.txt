1:8e42528: /**
1:8e42528:  * Licensed to the Apache Software Foundation (ASF) under one or more
1:8e42528:  * contributor license agreements.  See the NOTICE file distributed with
1:8e42528:  * this work for additional information regarding copyright ownership.
1:8e42528:  * The ASF licenses this file to You under the Apache License, Version 2.0
1:8e42528:  * (the "License"); you may not use this file except in compliance with
1:8e42528:  * the License.  You may obtain a copy of the License at
1:8e42528:  *
1:8e42528:  *      http://www.apache.org/licenses/LICENSE-2.0
1:8e42528:  *
1:8e42528:  * Unless required by applicable law or agreed to in writing, software
1:8e42528:  * distributed under the License is distributed on an "AS IS" BASIS,
1:8e42528:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:8e42528:  * See the License for the specific language governing permissions and
1:8e42528:  * limitations under the License.
1:8e42528:  */
1:8e42528: package org.apache.activemq.security;
1:8e42528: 
1:8e42528: import java.net.URI;
1:8e42528: 
1:8e42528: import javax.jms.Connection;
1:8e42528: import javax.jms.MessageConsumer;
1:8e42528: import javax.jms.MessageProducer;
1:8e42528: import javax.jms.Session;
1:8e42528: import javax.jms.TextMessage;
1:8e42528: 
1:8e42528: import junit.framework.TestCase;
1:8e42528: 
1:8e42528: import org.apache.activemq.ActiveMQConnectionFactory;
1:8e42528: import org.apache.activemq.broker.BrokerFactory;
1:8e42528: import org.apache.activemq.broker.BrokerService;
1:8e42528: import org.apache.activemq.command.ActiveMQQueue;
1:8e42528: 
1:8e42528: public class JaasNetworkTest extends TestCase {
1:8e42528:     
1:8e42528:     BrokerService broker1;
1:8e42528:     BrokerService broker2;
1:8e42528:     
1:8e42528:     public void setUp() throws Exception {
1:8e42528:         System.setProperty("java.security.auth.login.config", "src/test/resources/login.config");
1:8e42528:         broker1 = BrokerFactory.createBroker(new URI("xbean:org/apache/activemq/security/broker1.xml"));
1:8e42528:         broker2 = BrokerFactory.createBroker(new URI("xbean:org/apache/activemq/security/broker2.xml"));
1:8e42528:         broker1.waitUntilStarted();
1:8e42528:         broker2.waitUntilStarted();
1:8e42528:         Thread.sleep(2000);
1:8e42528:     }
1:8e42528:     
1:8e42528:     protected void tearDown() throws Exception {
1:8e42528:         super.tearDown();
1:8e42528:         broker1.stop();
1:8e42528:         broker1.waitUntilStopped();
1:8e42528:         broker2.stop();
1:8e42528:         broker2.waitUntilStopped();
1:8e42528:     }
1:8e42528: 
1:8e42528: 
1:8e42528: 
1:8e42528:     public void testNetwork() throws Exception {
1:8e42528:         
1:8e42528:         System.setProperty("javax.net.ssl.trustStore", "src/test/resources/org/apache/activemq/security/client.ts");
1:8e42528:         System.setProperty("javax.net.ssl.trustStorePassword", "password");
1:8e42528:         System.setProperty("javax.net.ssl.trustStoreType", "jks");
1:8e42528:         System.setProperty("javax.net.ssl.keyStore", "src/test/resources/org/apache/activemq/security/client.ks");
1:8e42528:         System.setProperty("javax.net.ssl.keyStorePassword", "password");
1:8e42528:         System.setProperty("javax.net.ssl.keyStoreType", "jks");  
1:8e42528:         
1:8e42528:         ActiveMQConnectionFactory producerFactory  = new ActiveMQConnectionFactory("ssl://localhost:61617");
1:8e42528:         Connection producerConn = producerFactory.createConnection();
1:8e42528:         Session producerSess = producerConn.createSession(false, Session.AUTO_ACKNOWLEDGE);
1:8e42528:         MessageProducer producer = producerSess.createProducer(new ActiveMQQueue("test"));
1:8e42528:         producerConn.start();
1:8e42528:         TextMessage sentMessage = producerSess.createTextMessage("test");
1:8e42528:         producer.send(sentMessage);
1:8e42528:         
1:8e42528:         ActiveMQConnectionFactory consumerFactory  = new ActiveMQConnectionFactory("ssl://localhost:61618");
1:8e42528:         Connection consumerConn = consumerFactory.createConnection();
1:8e42528:         Session consumerSess = consumerConn.createSession(false, Session.AUTO_ACKNOWLEDGE);
1:8e42528:         consumerConn.start();
1:8e42528:         MessageConsumer consumer = consumerSess.createConsumer(new ActiveMQQueue("test"));
1:8e42528:         TextMessage receivedMessage = (TextMessage)consumer.receive(100);
1:8e42528:         assertEquals(sentMessage, receivedMessage);
1:8e42528: 
1:8e42528:     }
1:8e42528:     
1:8e42528: }
============================================================================
author:Timothy A. Bish
-------------------------------------------------------------------------------
commit:ef24cc9
author:Bosanac Dejan
-------------------------------------------------------------------------------
commit:8e42528
/////////////////////////////////////////////////////////////////////////
1: /**
1:  * Licensed to the Apache Software Foundation (ASF) under one or more
1:  * contributor license agreements.  See the NOTICE file distributed with
1:  * this work for additional information regarding copyright ownership.
1:  * The ASF licenses this file to You under the Apache License, Version 2.0
1:  * (the "License"); you may not use this file except in compliance with
1:  * the License.  You may obtain a copy of the License at
1:  *
1:  *      http://www.apache.org/licenses/LICENSE-2.0
1:  *
1:  * Unless required by applicable law or agreed to in writing, software
1:  * distributed under the License is distributed on an "AS IS" BASIS,
1:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:  * See the License for the specific language governing permissions and
1:  * limitations under the License.
1:  */
1: package org.apache.activemq.security;
1: 
1: import java.net.URI;
1: 
1: import javax.jms.Connection;
1: import javax.jms.MessageConsumer;
1: import javax.jms.MessageProducer;
1: import javax.jms.Session;
1: import javax.jms.TextMessage;
1: 
1: import junit.framework.TestCase;
1: 
1: import org.apache.activemq.ActiveMQConnectionFactory;
1: import org.apache.activemq.broker.BrokerFactory;
1: import org.apache.activemq.broker.BrokerService;
1: import org.apache.activemq.command.ActiveMQQueue;
1: 
1: public class JaasNetworkTest extends TestCase {
1:     
1:     BrokerService broker1;
1:     BrokerService broker2;
1:     
1:     public void setUp() throws Exception {
1:         System.setProperty("java.security.auth.login.config", "src/test/resources/login.config");
1:         broker1 = BrokerFactory.createBroker(new URI("xbean:org/apache/activemq/security/broker1.xml"));
1:         broker2 = BrokerFactory.createBroker(new URI("xbean:org/apache/activemq/security/broker2.xml"));
1:         broker1.waitUntilStarted();
1:         broker2.waitUntilStarted();
1:         Thread.sleep(2000);
1:     }
1:     
1:     protected void tearDown() throws Exception {
1:         super.tearDown();
1:         broker1.stop();
1:         broker1.waitUntilStopped();
1:         broker2.stop();
1:         broker2.waitUntilStopped();
1:     }
1: 
1: 
1: 
1:     public void testNetwork() throws Exception {
1:         
1:         System.setProperty("javax.net.ssl.trustStore", "src/test/resources/org/apache/activemq/security/client.ts");
1:         System.setProperty("javax.net.ssl.trustStorePassword", "password");
1:         System.setProperty("javax.net.ssl.trustStoreType", "jks");
1:         System.setProperty("javax.net.ssl.keyStore", "src/test/resources/org/apache/activemq/security/client.ks");
1:         System.setProperty("javax.net.ssl.keyStorePassword", "password");
1:         System.setProperty("javax.net.ssl.keyStoreType", "jks");  
1:         
1:         ActiveMQConnectionFactory producerFactory  = new ActiveMQConnectionFactory("ssl://localhost:61617");
1:         Connection producerConn = producerFactory.createConnection();
1:         Session producerSess = producerConn.createSession(false, Session.AUTO_ACKNOWLEDGE);
1:         MessageProducer producer = producerSess.createProducer(new ActiveMQQueue("test"));
1:         producerConn.start();
1:         TextMessage sentMessage = producerSess.createTextMessage("test");
1:         producer.send(sentMessage);
1:         
1:         ActiveMQConnectionFactory consumerFactory  = new ActiveMQConnectionFactory("ssl://localhost:61618");
1:         Connection consumerConn = consumerFactory.createConnection();
1:         Session consumerSess = consumerConn.createSession(false, Session.AUTO_ACKNOWLEDGE);
1:         consumerConn.start();
1:         MessageConsumer consumer = consumerSess.createConsumer(new ActiveMQQueue("test"));
1:         TextMessage receivedMessage = (TextMessage)consumer.receive(100);
1:         assertEquals(sentMessage, receivedMessage);
1: 
1:     }
1:     
1: }
============================================================================