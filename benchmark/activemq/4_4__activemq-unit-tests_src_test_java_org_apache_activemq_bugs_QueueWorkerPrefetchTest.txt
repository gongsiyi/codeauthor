1:eba0ae3: /**
1:eba0ae3:  * Licensed to the Apache Software Foundation (ASF) under one or more
1:eba0ae3:  * contributor license agreements.  See the NOTICE file distributed with
1:eba0ae3:  * this work for additional information regarding copyright ownership.
1:eba0ae3:  * The ASF licenses this file to You under the Apache License, Version 2.0
1:eba0ae3:  * (the "License"); you may not use this file except in compliance with
1:eba0ae3:  * the License.  You may obtain a copy of the License at
1:eba0ae3:  *
1:eba0ae3:  *      http://www.apache.org/licenses/LICENSE-2.0
1:eba0ae3:  *
1:eba0ae3:  * Unless required by applicable law or agreed to in writing, software
1:eba0ae3:  * distributed under the License is distributed on an "AS IS" BASIS,
1:eba0ae3:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:eba0ae3:  * See the License for the specific language governing permissions and
1:eba0ae3:  * limitations under the License.
1:eba0ae3:  */
2:eba0ae3: 
1:eba0ae3: package org.apache.activemq.bugs;
1:987ad27: 
1:eba0ae3: import java.io.Serializable;
1:1301501: import java.util.concurrent.CountDownLatch;
1:1301501: import java.util.concurrent.TimeUnit;
1:1301501: import java.util.concurrent.atomic.AtomicInteger;
1:1301501: import java.util.concurrent.atomic.AtomicLong;
1:1301501: import java.util.concurrent.atomic.AtomicReference;
1:eba0ae3: 
1:eba0ae3: import javax.jms.Connection;
1:eba0ae3: import javax.jms.JMSException;
1:eba0ae3: import javax.jms.MessageConsumer;
1:eba0ae3: import javax.jms.MessageListener;
1:eba0ae3: import javax.jms.MessageProducer;
1:b732d3d: import javax.jms.ObjectMessage;
1:eba0ae3: import javax.jms.Queue;
1:eba0ae3: import javax.jms.Session;
1:eba0ae3: 
1:eba0ae3: import junit.framework.TestCase;
1:eba0ae3: import org.apache.activemq.ActiveMQConnectionFactory;
1:eba0ae3: import org.apache.activemq.ActiveMQPrefetchPolicy;
1:eba0ae3: import org.apache.activemq.broker.BrokerService;
1:8bf987b: import org.slf4j.Logger;
1:8bf987b: import org.slf4j.LoggerFactory;
1:eba0ae3: 
1:eba0ae3: /**
1:42e51a3:  * Test case demonstrating situation where messages are not delivered to
1:42e51a3:  * consumers.
1:eba0ae3:  */
1:42e51a3: public class QueueWorkerPrefetchTest extends TestCase implements
1:42e51a3:         MessageListener {
1:42e51a3:     private static final Logger LOG = LoggerFactory
1:42e51a3:             .getLogger(QueueWorkerPrefetchTest.class);
1:b732d3d:     private static final int BATCH_SIZE = 10;
1:42e51a3:     private static final long WAIT_TIMEOUT = 1000 * 10;
1:eba0ae3: 
1:eba0ae3:     /** The connection URL. */
1:42e51a3:     private static final String BROKER_BIND_ADDRESS = "tcp://localhost:0";
1:eba0ae3: 
1:42e51a3:     /**
1:42e51a3:      * The queue prefetch size to use. A value greater than 1 seems to make
1:42e51a3:      * things work.
1:42e51a3:      */
1:eba0ae3:     private static final int QUEUE_PREFETCH_SIZE = 1;
1:eba0ae3: 
1:42e51a3:     /**
1:42e51a3:      * The number of workers to use. A single worker with a prefetch of 1 works.
1:42e51a3:      */
1:eba0ae3:     private static final int NUM_WORKERS = 2;
1:eba0ae3: 
1:eba0ae3:     /** Embedded JMS broker. */
1:eba0ae3:     private BrokerService broker;
1:eba0ae3: 
1:eba0ae3:     /** The master's producer object for creating work items. */
1:eba0ae3:     private MessageProducer workItemProducer;
1:eba0ae3: 
1:eba0ae3:     /** The master's consumer object for consuming ack messages from workers. */
1:eba0ae3:     private MessageConsumer masterItemConsumer;
1:eba0ae3: 
1:eba0ae3:     /** The number of acks received by the master. */
1:42e51a3:     private final AtomicLong acksReceived = new AtomicLong(0);
1:eba0ae3: 
1:42e51a3:     private final AtomicReference<CountDownLatch> latch = new AtomicReference<CountDownLatch>();
1:42e51a3: 
1:42e51a3:     private String connectionUri;
1:eba0ae3: 
1:eba0ae3:     /** Messages sent to the work-item queue. */
1:42e51a3:     private static class WorkMessage implements Serializable {
1:42e51a3:         private static final long serialVersionUID = 1L;
1:b732d3d:         private final int id;
1:42e51a3: 
1:b732d3d:         public WorkMessage(int id) {
1:b732d3d:             this.id = id;
3:eba0ae3:         }
1:42e51a3: 
1:b732d3d:         @Override
1:b732d3d:         public String toString() {
1:42e51a3:             return "Work: " + id;
1:eba0ae3:         }
1:eba0ae3:     }
1:eba0ae3: 
1:eba0ae3:     /**
1:42e51a3:      * The worker process. Consume messages from the work-item queue, possibly
1:42e51a3:      * creating more messages to submit to the work-item queue. For each work
1:42e51a3:      * item, send an ack to the master.
1:eba0ae3:      */
1:42e51a3:     private static class Worker implements MessageListener {
1:42e51a3:         /**
1:42e51a3:          * Counter shared between workers to decided when new work-item messages
1:42e51a3:          * are created.
1:42e51a3:          */
1:1301501:         private static AtomicInteger counter = new AtomicInteger(0);
1:eba0ae3: 
1:eba0ae3:         /** Session to use. */
1:eba0ae3:         private Session session;
1:eba0ae3: 
1:eba0ae3:         /** Producer for sending ack messages to the master. */
1:eba0ae3:         private MessageProducer masterItemProducer;
1:eba0ae3: 
1:eba0ae3:         /** Producer for sending new work items to the work-items queue. */
1:eba0ae3:         private MessageProducer workItemProducer;
1:eba0ae3: 
1:42e51a3:         public Worker(Session session) throws JMSException {
1:eba0ae3:             this.session = session;
1:42e51a3:             masterItemProducer = session.createProducer(session
1:42e51a3:                     .createQueue("master-item"));
1:eba0ae3:             Queue workItemQueue = session.createQueue("work-item");
1:eba0ae3:             workItemProducer = session.createProducer(workItemQueue);
1:42e51a3:             MessageConsumer workItemConsumer = session
1:42e51a3:                     .createConsumer(workItemQueue);
1:eba0ae3:             workItemConsumer.setMessageListener(this);
1:eba0ae3:         }
1:eba0ae3: 
1:42e51a3:         public void onMessage(javax.jms.Message message) {
1:42e51a3:             try {
1:42e51a3:                 WorkMessage work = (WorkMessage) ((ObjectMessage) message)
1:42e51a3:                         .getObject();
1:42e51a3: 
1:b732d3d:                 long c = counter.incrementAndGet();
1:42e51a3: 
1:b732d3d:                 // Don't create a new work item for every BATCH_SIZE message. */
1:42e51a3:                 if (c % BATCH_SIZE != 0) {
1:eba0ae3:                     // Send new work item to work-item queue.
1:42e51a3:                     workItemProducer.send(session
1:42e51a3:                             .createObjectMessage(new WorkMessage(work.id + 1)));
1:eba0ae3:                 }
1:eba0ae3: 
1:eba0ae3:                 // Send ack to master.
1:b732d3d:                 masterItemProducer.send(session.createObjectMessage(work));
1:42e51a3:             } catch (JMSException e) {
1:eba0ae3:                 throw new IllegalStateException("Something has gone wrong", e);
1:eba0ae3:             }
1:eba0ae3:         }
1:eba0ae3: 
1:eba0ae3:         /** Close of JMS resources used by worker. */
1:42e51a3:         public void close() throws JMSException {
1:eba0ae3:             masterItemProducer.close();
1:eba0ae3:             workItemProducer.close();
1:eba0ae3:             session.close();
1:eba0ae3:         }
1:eba0ae3:     }
1:eba0ae3: 
1:42e51a3:     /** Master message handler. Process ack messages. */
1:42e51a3:     public void onMessage(javax.jms.Message message) {
1:1301501:         long acks = acksReceived.incrementAndGet();
1:1301501:         latch.get().countDown();
1:b732d3d:         if (acks % 1 == 0) {
1:417fcd7:             LOG.info("Master now has ack count of: " + acksReceived);
1:eba0ae3:         }
1:eba0ae3:     }
1:eba0ae3: 
1:42e51a3:     protected void setUp() throws Exception {
1:eba0ae3:         // Create the message broker.
1:eba0ae3:         super.setUp();
1:eba0ae3:         broker = new BrokerService();
1:eba0ae3:         broker.setPersistent(false);
1:eba0ae3:         broker.setUseJmx(true);
1:42e51a3:         broker.addConnector(BROKER_BIND_ADDRESS);
1:eba0ae3:         broker.start();
1:42e51a3:         broker.waitUntilStarted();
1:42e51a3: 
1:42e51a3:         connectionUri = broker.getTransportConnectors().get(0).getPublishableConnectString();
1:eba0ae3:     }
1:eba0ae3: 
1:42e51a3:     protected void tearDown() throws Exception {
1:eba0ae3:         // Shut down the message broker.
1:eba0ae3:         broker.deleteAllMessages();
1:eba0ae3:         broker.stop();
1:eba0ae3:         super.tearDown();
1:eba0ae3:     }
1:eba0ae3: 
1:42e51a3:     public void testActiveMQ() throws Exception {
1:eba0ae3:         // Create the connection to the broker.
1:42e51a3:         ActiveMQConnectionFactory connectionFactory = new ActiveMQConnectionFactory(connectionUri);
1:eba0ae3:         ActiveMQPrefetchPolicy prefetchPolicy = new ActiveMQPrefetchPolicy();
1:eba0ae3:         prefetchPolicy.setQueuePrefetch(QUEUE_PREFETCH_SIZE);
1:eba0ae3:         connectionFactory.setPrefetchPolicy(prefetchPolicy);
1:eba0ae3:         Connection connection = connectionFactory.createConnection();
1:eba0ae3:         connection.start();
1:eba0ae3: 
1:42e51a3:         Session masterSession = connection.createSession(false,
1:42e51a3:                 Session.AUTO_ACKNOWLEDGE);
1:42e51a3:         workItemProducer = masterSession.createProducer(masterSession
1:42e51a3:                 .createQueue("work-item"));
1:42e51a3:         masterItemConsumer = masterSession.createConsumer(masterSession
1:42e51a3:                 .createQueue("master-item"));
1:eba0ae3:         masterItemConsumer.setMessageListener(this);
1:eba0ae3: 
1:eba0ae3:         // Create the workers.
1:eba0ae3:         Worker[] workers = new Worker[NUM_WORKERS];
1:42e51a3:         for (int i = 0; i < NUM_WORKERS; i++) {
1:42e51a3:             workers[i] = new Worker(connection.createSession(false,
1:42e51a3:                     Session.AUTO_ACKNOWLEDGE));
1:eba0ae3:         }
1:eba0ae3: 
1:42e51a3:         // Send a message to the work queue, and wait for the BATCH_SIZE acks
1:42e51a3:         // from the workers.
1:1301501:         acksReceived.set(0);
1:b732d3d:         latch.set(new CountDownLatch(BATCH_SIZE));
1:42e51a3:         workItemProducer.send(masterSession
1:42e51a3:                 .createObjectMessage(new WorkMessage(1)));
1:42e51a3: 
1:1301501:         if (!latch.get().await(WAIT_TIMEOUT, TimeUnit.MILLISECONDS)) {
1:1301501:             fail("First batch only received " + acksReceived + " messages");
1:eba0ae3:         }
1:eba0ae3: 
1:42e51a3:         LOG.info("First batch received");
1:eba0ae3: 
1:42e51a3:         // Send another message to the work queue, and wait for the next 1000 acks. It is
1:eba0ae3:         // at this point where the workers never get notified of this message, as they
1:42e51a3:         // have a large pending queue. Creating a new worker at this point however will
1:eba0ae3:         // receive this new message.
1:1301501:         acksReceived.set(0);
1:b732d3d:         latch.set(new CountDownLatch(BATCH_SIZE));
1:42e51a3:         workItemProducer.send(masterSession
1:42e51a3:                 .createObjectMessage(new WorkMessage(1)));
1:42e51a3: 
1:1301501:         if (!latch.get().await(WAIT_TIMEOUT, TimeUnit.MILLISECONDS)) {
1:1301501:             fail("Second batch only received " + acksReceived + " messages");
1:eba0ae3:         }
1:eba0ae3: 
1:417fcd7:         LOG.info("Second batch received");
1:eba0ae3: 
1:eba0ae3:         // Cleanup all JMS resources.
1:1301501:         for (int i = 0; i < NUM_WORKERS; i++) {
1:eba0ae3:             workers[i].close();
1:eba0ae3:         }
1:eba0ae3:         masterSession.close();
1:eba0ae3:         connection.close();
1:eba0ae3:     }
1:eba0ae3: }
============================================================================
author:Timothy A. Bish
-------------------------------------------------------------------------------
commit:ef24cc9
commit:42e51a3
/////////////////////////////////////////////////////////////////////////
1:  * Test case demonstrating situation where messages are not delivered to
1:  * consumers.
1: public class QueueWorkerPrefetchTest extends TestCase implements
1:         MessageListener {
1:     private static final Logger LOG = LoggerFactory
1:             .getLogger(QueueWorkerPrefetchTest.class);
1:     private static final long WAIT_TIMEOUT = 1000 * 10;
1:     private static final String BROKER_BIND_ADDRESS = "tcp://localhost:0";
1:     /**
1:      * The queue prefetch size to use. A value greater than 1 seems to make
1:      * things work.
1:      */
1:     /**
1:      * The number of workers to use. A single worker with a prefetch of 1 works.
1:      */
/////////////////////////////////////////////////////////////////////////
1:     private final AtomicLong acksReceived = new AtomicLong(0);
1:     private final AtomicReference<CountDownLatch> latch = new AtomicReference<CountDownLatch>();
1: 
1:     private String connectionUri;
1:     private static class WorkMessage implements Serializable {
1:         private static final long serialVersionUID = 1L;
1: 
1: 
1:             return "Work: " + id;
1:      * The worker process. Consume messages from the work-item queue, possibly
1:      * creating more messages to submit to the work-item queue. For each work
1:      * item, send an ack to the master.
1:     private static class Worker implements MessageListener {
1:         /**
1:          * Counter shared between workers to decided when new work-item messages
1:          * are created.
1:          */
/////////////////////////////////////////////////////////////////////////
1:         public Worker(Session session) throws JMSException {
1:             masterItemProducer = session.createProducer(session
1:                     .createQueue("master-item"));
1:             MessageConsumer workItemConsumer = session
1:                     .createConsumer(workItemQueue);
1:         public void onMessage(javax.jms.Message message) {
1:             try {
1:                 WorkMessage work = (WorkMessage) ((ObjectMessage) message)
1:                         .getObject();
1: 
1: 
1:                 if (c % BATCH_SIZE != 0) {
1:                     workItemProducer.send(session
1:                             .createObjectMessage(new WorkMessage(work.id + 1)));
1:             } catch (JMSException e) {
1:         public void close() throws JMSException {
1:     /** Master message handler. Process ack messages. */
1:     public void onMessage(javax.jms.Message message) {
/////////////////////////////////////////////////////////////////////////
1:     protected void setUp() throws Exception {
1:         broker.addConnector(BROKER_BIND_ADDRESS);
1:         broker.waitUntilStarted();
1: 
1:         connectionUri = broker.getTransportConnectors().get(0).getPublishableConnectString();
1:     protected void tearDown() throws Exception {
1:     public void testActiveMQ() throws Exception {
1:         ActiveMQConnectionFactory connectionFactory = new ActiveMQConnectionFactory(connectionUri);
1:         Session masterSession = connection.createSession(false,
1:                 Session.AUTO_ACKNOWLEDGE);
1:         workItemProducer = masterSession.createProducer(masterSession
1:                 .createQueue("work-item"));
1:         masterItemConsumer = masterSession.createConsumer(masterSession
1:                 .createQueue("master-item"));
1:         for (int i = 0; i < NUM_WORKERS; i++) {
1:             workers[i] = new Worker(connection.createSession(false,
1:                     Session.AUTO_ACKNOWLEDGE));
1:         // Send a message to the work queue, and wait for the BATCH_SIZE acks
1:         // from the workers.
1:         workItemProducer.send(masterSession
1:                 .createObjectMessage(new WorkMessage(1)));
1: 
1:         LOG.info("First batch received");
1:         // Send another message to the work queue, and wait for the next 1000 acks. It is
1:         // have a large pending queue. Creating a new worker at this point however will
1:         workItemProducer.send(masterSession
1:                 .createObjectMessage(new WorkMessage(1)));
1: 
author:Bosanac Dejan
-------------------------------------------------------------------------------
commit:8bf987b
/////////////////////////////////////////////////////////////////////////
1: import org.slf4j.Logger;
1: import org.slf4j.LoggerFactory;
0: 	 private static final Logger LOG = LoggerFactory.getLogger(QueueWorkerPrefetchTest.class);
author:Robert Davies
-------------------------------------------------------------------------------
commit:987ad27
/////////////////////////////////////////////////////////////////////////
1:                 
commit:417fcd7
/////////////////////////////////////////////////////////////////////////
0: import org.apache.commons.logging.Log;
0: import org.apache.commons.logging.LogFactory;
0: 	 private static final Log LOG = LogFactory.getLog(QueueWorkerPrefetchTest.class);
/////////////////////////////////////////////////////////////////////////
1:             LOG.info("Master now has ack count of: " + acksReceived);
/////////////////////////////////////////////////////////////////////////
0:        LOG.info("First batch received");
/////////////////////////////////////////////////////////////////////////
1:         LOG.info("Second batch received");
commit:eba0ae3
/////////////////////////////////////////////////////////////////////////
1: /**
1:  * Licensed to the Apache Software Foundation (ASF) under one or more
1:  * contributor license agreements.  See the NOTICE file distributed with
1:  * this work for additional information regarding copyright ownership.
1:  * The ASF licenses this file to You under the Apache License, Version 2.0
1:  * (the "License"); you may not use this file except in compliance with
1:  * the License.  You may obtain a copy of the License at
1:  *
1:  *      http://www.apache.org/licenses/LICENSE-2.0
1:  *
1:  * Unless required by applicable law or agreed to in writing, software
1:  * distributed under the License is distributed on an "AS IS" BASIS,
1:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:  * See the License for the specific language governing permissions and
1:  * limitations under the License.
1:  */
1: 
1: package org.apache.activemq.bugs;
1: 
1: import java.io.Serializable;
1: 
1: import javax.jms.MessageListener;
1: import javax.jms.Session;
1: import javax.jms.Connection;
1: import javax.jms.JMSException;
1: import javax.jms.Queue;
1: import javax.jms.MessageProducer;
1: import javax.jms.MessageConsumer;
1: 
1: import org.apache.activemq.ActiveMQConnectionFactory;
1: import org.apache.activemq.ActiveMQPrefetchPolicy;
1: import org.apache.activemq.broker.BrokerService;
1: 
1: import junit.framework.TestCase;
1: 
1: /**
0:  * Test case demonstrating situation where messages are not delivered to consumers.
1:  */
0: public class QueueWorkerPrefetchTest extends TestCase implements MessageListener
0: {
1:     /** The connection URL. */
0:     private static final String CONNECTION_URL = "tcp://localhost:61616";
1: 
0:     /** The queue prefetch size to use. A value greater than 1 seems to make things work. */
1:     private static final int QUEUE_PREFETCH_SIZE = 1;
1: 
0:     /** The number of workers to use.  A single worker with a prefetch of 1 works. */
1:     private static final int NUM_WORKERS = 2;
1: 
1:     /** Embedded JMS broker. */
1:     private BrokerService broker;
1: 
1:     /** The master's producer object for creating work items. */
1:     private MessageProducer workItemProducer;
1: 
1:     /** The master's consumer object for consuming ack messages from workers. */
1:     private MessageConsumer masterItemConsumer;
1: 
1:     /** The number of acks received by the master. */
0:     private long acksReceived;
1: 
0:     /** The expected number of acks the master should receive. */
0:     private long expectedCount;
1: 
1:     /** Messages sent to the work-item queue. */
0:     private static class WorkMessage implements Serializable
0:     {
1:     }
1: 
1:     /**
0:      * The worker process.  Consume messages from the work-item queue, possibly creating
0:      * more messages to submit to the work-item queue.  For each work item, send an ack
0:      * to the master.
1:      */
0:     private static class Worker implements MessageListener
0:     {
0:         /** Counter shared between workers to decided when new work-item messages are created. */
0:         private static Integer counter = new Integer(0);
1: 
1:         /** Session to use. */
1:         private Session session;
1: 
1:         /** Producer for sending ack messages to the master. */
1:         private MessageProducer masterItemProducer;
1: 
1:         /** Producer for sending new work items to the work-items queue. */
1:         private MessageProducer workItemProducer;
1: 
0:         public Worker(Session session)
0:             throws JMSException
0:         {
1:             this.session = session;
0:             masterItemProducer = session.createProducer(session.createQueue("master-item"));
1:             Queue workItemQueue = session.createQueue("work-item");
1:             workItemProducer = session.createProducer(workItemQueue);
0:             MessageConsumer workItemConsumer = session.createConsumer(workItemQueue);
1:             workItemConsumer.setMessageListener(this);
1:         }
1: 
0:         public void onMessage(javax.jms.Message message)
0:         {
0:             try
0:             {
0:                 boolean sendMessage = false;
1: 
0:                 // Don't create a new work item for every 1000th message. */
0:                 synchronized (counter)
0:                 {
0:                     counter++;
0:                     if (counter % 1000 != 0)
0:                     {
0:                         sendMessage = true;
1:                     }
1:                 }
1: 
0:                 if (sendMessage)
0:                 {
1:                     // Send new work item to work-item queue.
0:                     workItemProducer.send(session.createObjectMessage(
0:                             new WorkMessage()));
1:                 }
1: 
1:                 // Send ack to master.
0:                 masterItemProducer.send(session.createObjectMessage(
0:                         new WorkMessage()));
1:             }
0:             catch (JMSException e)
0:             {
1:                 throw new IllegalStateException("Something has gone wrong", e);
1:             }
1:         }
1: 
1:         /** Close of JMS resources used by worker. */
0:         public void close() throws JMSException
0:         {
1:             masterItemProducer.close();
1:             workItemProducer.close();
1:             session.close();
1:         }
1:     }
1: 
0:     /** Master message handler.  Process ack messages. */
0:     public synchronized void onMessage(javax.jms.Message message)
0:     {
0:         acksReceived++;
0:         if (acksReceived == expectedCount)
0:         {
0:             // If expected number of acks are received, wake up the main process.
0:             notify();
1:         }
0:         if (acksReceived % 100 == 0)
0:         {
0:             System.out.println("Master now has ack count of: " + acksReceived);
1:         }
1:     }
1: 
0:     protected void setUp() throws Exception
0:     {
1:         // Create the message broker.
1:         super.setUp();
1:         broker = new BrokerService();
1:         broker.setPersistent(false);
1:         broker.setUseJmx(true);
0:         broker.addConnector(CONNECTION_URL);
1:         broker.start();
1:     }
1: 
0:     protected void tearDown() throws Exception
0:     {
1:         // Shut down the message broker.
1:         broker.deleteAllMessages();
1:         broker.stop();
1:         super.tearDown();
1:     }
1: 
0:     public synchronized void testActiveMQ()
0:         throws Exception
0:     {
1:         // Create the connection to the broker.
0:         ActiveMQConnectionFactory connectionFactory =
0:                 new ActiveMQConnectionFactory(CONNECTION_URL);
1:         ActiveMQPrefetchPolicy prefetchPolicy = new ActiveMQPrefetchPolicy();
1:         prefetchPolicy.setQueuePrefetch(QUEUE_PREFETCH_SIZE);
1:         connectionFactory.setPrefetchPolicy(prefetchPolicy);
1:         Connection connection = connectionFactory.createConnection();
1:         connection.start();
1: 
0:         Session masterSession = connection.createSession(false, Session.AUTO_ACKNOWLEDGE);
0:         workItemProducer = masterSession.createProducer(masterSession.createQueue("work-item"));
0:         masterItemConsumer = masterSession.createConsumer(masterSession.createQueue("master-item"));
1:         masterItemConsumer.setMessageListener(this);
1: 
1:         // Create the workers.
1:         Worker[] workers = new Worker[NUM_WORKERS];
0:         for (int i = 0; i < NUM_WORKERS; i++)
0:         {
0:             workers[i] = new Worker(connection.createSession(false, Session.AUTO_ACKNOWLEDGE));
1:         }
1: 
0:         // Send a message to the work queue, and wait for the 1000 acks from the workers.
0:         expectedCount = 1000;
0:         acksReceived = 0;
0:         workItemProducer.send(masterSession.createObjectMessage(new WorkMessage()));
0:         while (acksReceived != expectedCount)
0:         {
0:             wait();
1:         }
0:         System.out.println("First batch received");
1: 
0:         // Send another message to the work queue, and wait for the next 1000 acks.  It is
1:         // at this point where the workers never get notified of this message, as they
0:         // have a large pending queue.  Creating a new worker at this point however will
1:         // receive this new message.
0:         expectedCount = 2000;
0:         workItemProducer.send(masterSession.createObjectMessage(new WorkMessage()));
0:         while (acksReceived != expectedCount)
0:         {
0:             wait();
1:         }
0:         System.out.println("Second batch received");
1: 
1:         // Cleanup all JMS resources.
0:         for (int i = 0; i < NUM_WORKERS; i++)
0:         {
1:             workers[i].close();
1:         }
1:         masterSession.close();
1:         connection.close();
1:     }
1: }
author:Hiram R. Chirino
-------------------------------------------------------------------------------
commit:b732d3d
/////////////////////////////////////////////////////////////////////////
1: import javax.jms.ObjectMessage;
/////////////////////////////////////////////////////////////////////////
1:     private static final int BATCH_SIZE = 10;
/////////////////////////////////////////////////////////////////////////
1:         private final int id;
1:         public WorkMessage(int id) {
1:             this.id = id;
0:         }
1:         @Override
1:         public String toString() {
0:             return "Work: "+id;
0:         }
/////////////////////////////////////////////////////////////////////////
0: 
/////////////////////////////////////////////////////////////////////////
0:                 WorkMessage work = (WorkMessage)((ObjectMessage)message).getObject();
0:                 
1:                 long c = counter.incrementAndGet();
0:                 if (c % 1 == 0) {
0:                     System.out.println("Worker now has message count of: " + c);
1:                 // Don't create a new work item for every BATCH_SIZE message. */
0:                 if (c % BATCH_SIZE != 0)
0:                             new WorkMessage(work.id+1)));
1:                 masterItemProducer.send(session.createObjectMessage(work));
/////////////////////////////////////////////////////////////////////////
1:         if (acks % 1 == 0) {
/////////////////////////////////////////////////////////////////////////
0:         // Send a message to the work queue, and wait for the BATCH_SIZE acks from the workers.
1:         latch.set(new CountDownLatch(BATCH_SIZE));
0:         workItemProducer.send(masterSession.createObjectMessage(new WorkMessage(1)));
/////////////////////////////////////////////////////////////////////////
1:         latch.set(new CountDownLatch(BATCH_SIZE));
0:         workItemProducer.send(masterSession.createObjectMessage(new WorkMessage(1)));
commit:1301501
/////////////////////////////////////////////////////////////////////////
1: import java.util.concurrent.CountDownLatch;
1: import java.util.concurrent.TimeUnit;
1: import java.util.concurrent.atomic.AtomicInteger;
1: import java.util.concurrent.atomic.AtomicLong;
1: import java.util.concurrent.atomic.AtomicReference;
0: import javax.jms.MessageListener;
0: import javax.jms.MessageProducer;
0: import javax.jms.Queue;
0: import javax.jms.Session;
0: import junit.framework.TestCase;
0:     private static final long WAIT_TIMEOUT = 1000*10;
0: 
/////////////////////////////////////////////////////////////////////////
0:     private AtomicLong acksReceived = new AtomicLong(0);
0:     private AtomicReference<CountDownLatch> latch = new AtomicReference<CountDownLatch>();
/////////////////////////////////////////////////////////////////////////
1:         private static AtomicInteger counter = new AtomicInteger(0);
/////////////////////////////////////////////////////////////////////////
0:                 if (counter.incrementAndGet() % 1000 != 0)
0:                     sendMessage = true;
/////////////////////////////////////////////////////////////////////////
0:     public void onMessage(javax.jms.Message message)
1:         long acks = acksReceived.incrementAndGet();
1:         latch.get().countDown();
0:         if (acks % 100 == 0) {
/////////////////////////////////////////////////////////////////////////
0:     public void testActiveMQ()
/////////////////////////////////////////////////////////////////////////
1:         acksReceived.set(0);
0:         latch.set(new CountDownLatch(1000));
0:         
1:         if (!latch.get().await(WAIT_TIMEOUT, TimeUnit.MILLISECONDS)) {
1:             fail("First batch only received " + acksReceived + " messages");
0: 
1:         acksReceived.set(0);
0:         latch.set(new CountDownLatch(1000));
0:         
1:         if (!latch.get().await(WAIT_TIMEOUT, TimeUnit.MILLISECONDS)) {
1:             fail("Second batch only received " + acksReceived + " messages");
0: 
1:         for (int i = 0; i < NUM_WORKERS; i++) {
============================================================================