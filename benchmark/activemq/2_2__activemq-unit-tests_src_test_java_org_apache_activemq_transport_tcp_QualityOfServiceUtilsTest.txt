1:54fa83d: /**
1:54fa83d:  * Licensed to the Apache Software Foundation (ASF) under one or more
1:54fa83d:  * contributor license agreements.  See the NOTICE file distributed with
1:54fa83d:  * this work for additional information regarding copyright ownership.
1:54fa83d:  * The ASF licenses this file to You under the Apache License, Version 2.0
1:54fa83d:  * (the "License"); you may not use this file except in compliance with
1:54fa83d:  * the License.  You may obtain a copy of the License at
1:54fa83d:  *
1:54fa83d:  *      http://www.apache.org/licenses/LICENSE-2.0
1:54fa83d:  *
1:54fa83d:  * Unless required by applicable law or agreed to in writing, software
1:54fa83d:  * distributed under the License is distributed on an "AS IS" BASIS,
1:54fa83d:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:54fa83d:  * See the License for the specific language governing permissions and
1:54fa83d:  * limitations under the License.
1:54fa83d:  */
1:54fa83d: package org.apache.activemq.transport.tcp;
4:54fa83d: 
1:54fa83d: import java.net.Socket;
1:54fa83d: import java.util.HashMap;
1:54fa83d: import java.util.Map;
1:4743a20: 
1:54fa83d: import junit.framework.TestCase;
1:54fa83d: 
1:54fa83d: public class QualityOfServiceUtilsTest extends TestCase {
1:dfeecb4:     /**
1:dfeecb4:      * Keeps track of the value that the System has set for the ECN bits, which
1:dfeecb4:      * should not be overridden when Differentiated Services is set, but may be
1:dfeecb4:      * overridden when Type of Service is set.
1:dfeecb4:      */
1:54fa83d:     private int ECN;
1:54fa83d: 
1:9524835:     @Override
1:54fa83d:     protected void setUp() throws Exception {
1:dfeecb4:         Socket socket = new Socket();
1:9740fb2:         ECN = socket.getTrafficClass() & Integer.parseInt("00000011", 2);
1:4743a20:         socket.close();
9:54fa83d:     }
1:54fa83d: 
1:9524835:     @Override
1:54fa83d:     protected void tearDown() throws Exception {
1:dfeecb4:         super.tearDown();
1:54fa83d:     }
1:54fa83d: 
1:54fa83d:     public void testValidDiffServIntegerValues() {
1:dfeecb4:         int[] values = {0, 1, 32, 62, 63};
1:54fa83d:         for (int val : values) {
1:dfeecb4:             testValidDiffServIntegerValue(val);
1:dfeecb4:         }
1:54fa83d:     }
1:54fa83d: 
1:54fa83d:     public void testInvalidDiffServIntegerValues() {
1:dfeecb4:         int[] values = {-2, -1, 64, 65};
1:54fa83d:         for (int val : values) {
1:dfeecb4:             testInvalidDiffServIntegerValue(val);
1:dfeecb4:         }
1:54fa83d:     }
1:54fa83d: 
1:54fa83d:     public void testValidDiffServNames() {
1:54fa83d:         Map<String, Integer> namesToExpected = new HashMap<String, Integer>();
1:9524835:         namesToExpected.put("CS0", Integer.valueOf("000000", 2));
1:9524835:         namesToExpected.put("CS1", Integer.valueOf("001000", 2));
1:9524835:         namesToExpected.put("CS2", Integer.valueOf("010000", 2));
1:9524835:         namesToExpected.put("CS3", Integer.valueOf("011000", 2));
1:9524835:         namesToExpected.put("CS4", Integer.valueOf("100000", 2));
1:9524835:         namesToExpected.put("CS5", Integer.valueOf("101000", 2));
1:9524835:         namesToExpected.put("CS6", Integer.valueOf("110000", 2));
1:9524835:         namesToExpected.put("CS7", Integer.valueOf("111000", 2));
1:dfeecb4:         namesToExpected.put("EF", Integer.valueOf("101110", 2));
1:dfeecb4:         namesToExpected.put("AF11", Integer.valueOf("001010", 2));
1:dfeecb4:         namesToExpected.put("AF12", Integer.valueOf("001100", 2));
1:dfeecb4:         namesToExpected.put("AF13", Integer.valueOf("001110", 2));
1:dfeecb4:         namesToExpected.put("AF21", Integer.valueOf("010010", 2));
1:dfeecb4:         namesToExpected.put("AF22", Integer.valueOf("010100", 2));
1:dfeecb4:         namesToExpected.put("AF23", Integer.valueOf("010110", 2));
1:dfeecb4:         namesToExpected.put("AF31", Integer.valueOf("011010", 2));
1:dfeecb4:         namesToExpected.put("AF32", Integer.valueOf("011100", 2));
1:dfeecb4:         namesToExpected.put("AF33", Integer.valueOf("011110", 2));
1:dfeecb4:         namesToExpected.put("AF41", Integer.valueOf("100010", 2));
1:dfeecb4:         namesToExpected.put("AF42", Integer.valueOf("100100", 2));
1:dfeecb4:         namesToExpected.put("AF43", Integer.valueOf("100110", 2));
1:54fa83d:         for (String name : namesToExpected.keySet()) {
1:54fa83d:             testValidDiffServName(name, namesToExpected.get(name));
1:54fa83d:         }
1:54fa83d:     }
1:54fa83d: 
1:54fa83d:     public void testInvalidDiffServNames() {
1:54fa83d:         String[] names = {"hello_world", "", "abcd"};
1:54fa83d:         for (String name : names) {
1:54fa83d:             testInvalidDiffServName(name);
1:54fa83d:         }
1:54fa83d:     }
1:54fa83d: 
1:54fa83d:     private void testValidDiffServName(String name, int expected) {
2:54fa83d:         int dscp = -1;
1:dfeecb4:         try {
1:dfeecb4:             dscp = QualityOfServiceUtils.getDSCP(name);
1:dfeecb4:         } catch (IllegalArgumentException e) {
1:dfeecb4:             fail("IllegalArgumentException thrown for valid Differentiated "
1:54fa83d:                  + " Services name: " + name);
1:dfeecb4:         }
2:54fa83d:         // Make sure it adjusted for any system ECN values.
1:dfeecb4:         assertEquals("Incorrect Differentiated Services Code Point "  + dscp
1:9740fb2:             + " returned for name " + name + ".", ECN | (expected << 2), dscp);
1:54fa83d:     }
1:dfeecb4: 
1:54fa83d:     private void testInvalidDiffServName(String name) {
1:dfeecb4:         try {
1:4743a20:             QualityOfServiceUtils.getDSCP(name);
1:dfeecb4:             fail("No IllegalArgumentException thrown for invalid Differentiated"
1:dfeecb4:                  + " Services value: " + name + ".");
1:dfeecb4:         } catch (IllegalArgumentException e) {
1:dfeecb4:         }
1:dfeecb4:     }
1:4743a20: 
1:dfeecb4:     private void testValidDiffServIntegerValue(int val) {
1:dfeecb4:         try {
2:dfeecb4:             int dscp = QualityOfServiceUtils.getDSCP(Integer.toString(val));
1:dfeecb4:             // Make sure it adjusted for any system ECN values.
1:dfeecb4:             assertEquals("Incorrect Differentiated Services Code Point "
1:9740fb2:                 + "returned for value " + val + ".", ECN | (val << 2), dscp);
1:dfeecb4:         } catch (IllegalArgumentException e) {
1:dfeecb4:             fail("IllegalArgumentException thrown for valid Differentiated "
1:dfeecb4:                  + "Services value " + val);
1:dfeecb4:         }
1:dfeecb4:     }
1:dfeecb4: 
1:dfeecb4:     private void testInvalidDiffServIntegerValue(int val) {
1:dfeecb4:         try {
1:4743a20:             QualityOfServiceUtils.getDSCP(Integer.toString(val));
1:dfeecb4:             fail("No IllegalArgumentException thrown for invalid "
1:dfeecb4:                 + "Differentiated Services value " + val + ".");
1:dfeecb4:         } catch (IllegalArgumentException expected) {
1:dfeecb4:         }
1:dfeecb4:     }
1:dfeecb4: 
1:dfeecb4:     public void testValidTypeOfServiceValues() {
1:dfeecb4:         int[] values = {0, 1, 32, 100, 255};
1:dfeecb4:         for (int val : values) {
1:dfeecb4:             testValidTypeOfServiceValue(val);
1:dfeecb4:         }
1:dfeecb4:     }
1:dfeecb4: 
1:dfeecb4:     public void testInvalidTypeOfServiceValues() {
1:dfeecb4:         int[] values = {-2, -1, 256, 257};
1:dfeecb4:         for (int val : values) {
1:dfeecb4:             testInvalidTypeOfServiceValue(val);
1:dfeecb4:         }
1:dfeecb4:     }
1:dfeecb4: 
1:dfeecb4:     private void testValidTypeOfServiceValue(int val) {
1:dfeecb4:         try {
2:dfeecb4:             int typeOfService = QualityOfServiceUtils.getToS(val);
1:dfeecb4:             assertEquals("Incorrect Type of Services value returned for " + val
1:dfeecb4:                 + ".", val, typeOfService);
1:dfeecb4:         } catch (IllegalArgumentException e) {
1:dfeecb4:             fail("IllegalArgumentException thrown for valid Type of Service "
1:dfeecb4:                  + "value " + val + ".");
1:dfeecb4:         }
1:dfeecb4:     }
1:dfeecb4: 
1:dfeecb4:     private void testInvalidTypeOfServiceValue(int val) {
1:dfeecb4:         try {
1:4743a20:             QualityOfServiceUtils.getToS(val);
1:dfeecb4:             fail("No IllegalArgumentException thrown for invalid "
1:dfeecb4:                 + "Type of Service value " + val + ".");
1:dfeecb4:         } catch (IllegalArgumentException expected) {
1:dfeecb4:         }
1:54fa83d:     }
1:54fa83d: }
============================================================================
author:Timothy A. Bish
-------------------------------------------------------------------------------
commit:4743a20
/////////////////////////////////////////////////////////////////////////
1: 
/////////////////////////////////////////////////////////////////////////
1:         socket.close();
/////////////////////////////////////////////////////////////////////////
1:             QualityOfServiceUtils.getDSCP(name);
1: 
/////////////////////////////////////////////////////////////////////////
1:             QualityOfServiceUtils.getDSCP(Integer.toString(val));
/////////////////////////////////////////////////////////////////////////
1:             QualityOfServiceUtils.getToS(val);
commit:ef24cc9
author:Robert Davies
-------------------------------------------------------------------------------
commit:9524835
/////////////////////////////////////////////////////////////////////////
1:     @Override
1:     @Override
/////////////////////////////////////////////////////////////////////////
1:         namesToExpected.put("CS0", Integer.valueOf("000000", 2));
1:         namesToExpected.put("CS1", Integer.valueOf("001000", 2));
1:         namesToExpected.put("CS2", Integer.valueOf("010000", 2));
1:         namesToExpected.put("CS3", Integer.valueOf("011000", 2));
1:         namesToExpected.put("CS4", Integer.valueOf("100000", 2));
1:         namesToExpected.put("CS5", Integer.valueOf("101000", 2));
1:         namesToExpected.put("CS6", Integer.valueOf("110000", 2));
1:         namesToExpected.put("CS7", Integer.valueOf("111000", 2));
commit:9740fb2
/////////////////////////////////////////////////////////////////////////
1:         ECN = socket.getTrafficClass() & Integer.parseInt("00000011", 2);
/////////////////////////////////////////////////////////////////////////
1:             + " returned for name " + name + ".", ECN | (expected << 2), dscp);
/////////////////////////////////////////////////////////////////////////
1:                 + "returned for value " + val + ".", ECN | (val << 2), dscp);
commit:dfeecb4
/////////////////////////////////////////////////////////////////////////
1:     /**
1:      * Keeps track of the value that the System has set for the ECN bits, which
1:      * should not be overridden when Differentiated Services is set, but may be
1:      * overridden when Type of Service is set.
1:      */
1:         Socket socket = new Socket();
0:         ECN = socket.getTrafficClass();
0:         ECN = ECN & Integer.parseInt("11000000", 2);
1:         super.tearDown();
1:         int[] values = {0, 1, 32, 62, 63};
1:             testValidDiffServIntegerValue(val);
1:         }
1:         int[] values = {-2, -1, 64, 65};
1:             testInvalidDiffServIntegerValue(val);
1:         }
1:         namesToExpected.put("EF", Integer.valueOf("101110", 2));
1:         namesToExpected.put("AF11", Integer.valueOf("001010", 2));
1:         namesToExpected.put("AF12", Integer.valueOf("001100", 2));
1:         namesToExpected.put("AF13", Integer.valueOf("001110", 2));
1:         namesToExpected.put("AF21", Integer.valueOf("010010", 2));
1:         namesToExpected.put("AF22", Integer.valueOf("010100", 2));
1:         namesToExpected.put("AF23", Integer.valueOf("010110", 2));
1:         namesToExpected.put("AF31", Integer.valueOf("011010", 2));
1:         namesToExpected.put("AF32", Integer.valueOf("011100", 2));
1:         namesToExpected.put("AF33", Integer.valueOf("011110", 2));
1:         namesToExpected.put("AF41", Integer.valueOf("100010", 2));
1:         namesToExpected.put("AF42", Integer.valueOf("100100", 2));
1:         namesToExpected.put("AF43", Integer.valueOf("100110", 2));
/////////////////////////////////////////////////////////////////////////
1:         try {
1:             dscp = QualityOfServiceUtils.getDSCP(name);
1:         } catch (IllegalArgumentException e) {
1:             fail("IllegalArgumentException thrown for valid Differentiated "
1:         }
1:         assertEquals("Incorrect Differentiated Services Code Point "  + dscp
0:             + " returned for name " + name + ".", ECN | expected, dscp);
1:         try {
0:             int dscp = QualityOfServiceUtils.getDSCP(name);
1:             fail("No IllegalArgumentException thrown for invalid Differentiated"
1:                  + " Services value: " + name + ".");
1:         } catch (IllegalArgumentException e) {
1:         }
1:     }
1:     
1:     private void testValidDiffServIntegerValue(int val) {
1:         try {
1:             int dscp = QualityOfServiceUtils.getDSCP(Integer.toString(val));
1:             // Make sure it adjusted for any system ECN values.
1:             assertEquals("Incorrect Differentiated Services Code Point "
0:                 + "returned for value " + val + ".", ECN | val, dscp);
1:         } catch (IllegalArgumentException e) {
1:             fail("IllegalArgumentException thrown for valid Differentiated "
1:                  + "Services value " + val);
1:         }
1:     }
1: 
1:     private void testInvalidDiffServIntegerValue(int val) {
1:         try {
1:             int dscp = QualityOfServiceUtils.getDSCP(Integer.toString(val));
1:             fail("No IllegalArgumentException thrown for invalid "
1:                 + "Differentiated Services value " + val + ".");
1:         } catch (IllegalArgumentException expected) {
1:         }
1:     }
1: 
1:     public void testValidTypeOfServiceValues() {
1:         int[] values = {0, 1, 32, 100, 255};
1:         for (int val : values) {
1:             testValidTypeOfServiceValue(val);
1:         }
1:     }
1: 
1:     public void testInvalidTypeOfServiceValues() {
1:         int[] values = {-2, -1, 256, 257};
1:         for (int val : values) {
1:             testInvalidTypeOfServiceValue(val);
1:         }
1:     }
1: 
1:     private void testValidTypeOfServiceValue(int val) {
1:         try {
1:             int typeOfService = QualityOfServiceUtils.getToS(val);
1:             assertEquals("Incorrect Type of Services value returned for " + val
1:                 + ".", val, typeOfService);
1:         } catch (IllegalArgumentException e) {
1:             fail("IllegalArgumentException thrown for valid Type of Service "
1:                  + "value " + val + ".");
1:         }
1:     }
1: 
1:     private void testInvalidTypeOfServiceValue(int val) {
1:         try {
1:             int typeOfService = QualityOfServiceUtils.getToS(val);
1:             fail("No IllegalArgumentException thrown for invalid "
1:                 + "Type of Service value " + val + ".");
1:         } catch (IllegalArgumentException expected) {
1:         }
commit:54fa83d
/////////////////////////////////////////////////////////////////////////
1: /**
1:  * Licensed to the Apache Software Foundation (ASF) under one or more
1:  * contributor license agreements.  See the NOTICE file distributed with
1:  * this work for additional information regarding copyright ownership.
1:  * The ASF licenses this file to You under the Apache License, Version 2.0
1:  * (the "License"); you may not use this file except in compliance with
1:  * the License.  You may obtain a copy of the License at
1:  *
1:  *      http://www.apache.org/licenses/LICENSE-2.0
1:  *
1:  * Unless required by applicable law or agreed to in writing, software
1:  * distributed under the License is distributed on an "AS IS" BASIS,
1:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:  * See the License for the specific language governing permissions and
1:  * limitations under the License.
1:  */
1: package org.apache.activemq.transport.tcp;
1: 
1: import java.net.Socket;
1: import java.util.HashMap;
1: import java.util.Map;
1: import junit.framework.TestCase;
1: 
1: public class QualityOfServiceUtilsTest extends TestCase {
1:     private int ECN;
1: 
1:     protected void setUp() throws Exception {
0: 	Socket socket = new Socket();
0: 	ECN = socket.getTrafficClass();
0: 	ECN = ECN & Integer.parseInt("11000000", 2);
1:     }
1: 
1:     protected void tearDown() throws Exception {
0: 	super.tearDown();
1:     }
1: 
1:     public void testValidDiffServIntegerValues() {
0: 	int[] values = {0, 1, 32, 62, 63};
1:         for (int val : values) {
0: 	    testValidDiffServIntegerValue(val);
1: 	}
1:     }
1: 
1:     public void testInvalidDiffServIntegerValues() {
0: 	int[] values = {-2, -1, 64, 65};
1:         for (int val : values) {
0: 	    testInvalidDiffServIntegerValue(val);
1: 	}
1:     }
1: 
1:     public void testValidDiffServNames() {
1:         Map<String, Integer> namesToExpected = new HashMap<String, Integer>();
0: 	namesToExpected.put("EF", Integer.valueOf("101110", 2));
0: 	namesToExpected.put("AF11", Integer.valueOf("001010", 2));
0: 	namesToExpected.put("AF12", Integer.valueOf("001100", 2));
0: 	namesToExpected.put("AF13", Integer.valueOf("001110", 2));
0: 	namesToExpected.put("AF21", Integer.valueOf("010010", 2));
0: 	namesToExpected.put("AF22", Integer.valueOf("010100", 2));
0: 	namesToExpected.put("AF23", Integer.valueOf("010110", 2));
0: 	namesToExpected.put("AF31", Integer.valueOf("011010", 2));
0: 	namesToExpected.put("AF32", Integer.valueOf("011100", 2));
0: 	namesToExpected.put("AF33", Integer.valueOf("011110", 2));
0:  	namesToExpected.put("AF41", Integer.valueOf("100010", 2));
0: 	namesToExpected.put("AF42", Integer.valueOf("100100", 2));
0: 	namesToExpected.put("AF43", Integer.valueOf("100110", 2));
1:         for (String name : namesToExpected.keySet()) {
1:             testValidDiffServName(name, namesToExpected.get(name));
1:         }
1:     }
1: 
1:     public void testInvalidDiffServNames() {
1:         String[] names = {"hello_world", "", "abcd"};
1:         for (String name : names) {
1:             testInvalidDiffServName(name);
1:         }
1:     }
1: 
0:     private void testValidDiffServIntegerValue(int val) {
1:         int dscp = -1;
0: 	try {
0: 	    dscp = QualityOfServiceUtils.getDSCP(Integer.toString(val));
0: 	} catch (IllegalArgumentException e) {
0: 	    fail("IllegalArgumentException thrown for valid Differentiated Services "
0:                  + "value: " + val);
1: 	}
1:         // Make sure it adjusted for any system ECN values.
0: 	assertEquals("Incorrect Differentiated Services Code Point " 
0: 		     + dscp + " returned for value " + val + ".",
0:                      ECN | val, dscp);
1:     }
1: 
0:     private void testInvalidDiffServIntegerValue(int val) {
0: 	try {
0: 	    int dscp = QualityOfServiceUtils.getDSCP(Integer.toString(val));
0: 	    fail("No IllegalArgumentException thrown for invalid Differentiated "
0:                  + "Services value: " + val + ".");
0: 	} catch (IllegalArgumentException e) {
1: 	}
1:     }
1: 
1:     private void testValidDiffServName(String name, int expected) {
1:         int dscp = -1;
0: 	try {
0: 	    dscp = QualityOfServiceUtils.getDSCP(name);
0: 	} catch (IllegalArgumentException e) {
0: 	    fail("IllegalArgumentException thrown for valid Differentiated "
1:                  + " Services name: " + name);
1: 	}
1:         // Make sure it adjusted for any system ECN values.
0: 	assertEquals("Incorrect Differentiated Services Code Point " 
0: 		     + dscp + " returned for name " + name + ".",
0:                      ECN | expected, dscp);
1:     }
1: 
1:     private void testInvalidDiffServName(String name) {
0: 	try {
0: 	    int dscp = QualityOfServiceUtils.getDSCP(name);
0: 	    fail("No IllegalArgumentException thrown for invalid Differentiated "
0:                  + "Services value: " + name + ".");
0: 	} catch (IllegalArgumentException e) {
1: 	}
1:     }
1: }
============================================================================