1:09054fc: /**
1:09054fc:  * Licensed to the Apache Software Foundation (ASF) under one or more
1:09054fc:  * contributor license agreements.  See the NOTICE file distributed with
1:09054fc:  * this work for additional information regarding copyright ownership.
1:09054fc:  * The ASF licenses this file to You under the Apache License, Version 2.0
1:09054fc:  * (the "License"); you may not use this file except in compliance with
1:09054fc:  * the License.  You may obtain a copy of the License at
1:09054fc:  *
1:09054fc:  *      http://www.apache.org/licenses/LICENSE-2.0
1:09054fc:  *
1:09054fc:  * Unless required by applicable law or agreed to in writing, software
1:09054fc:  * distributed under the License is distributed on an "AS IS" BASIS,
1:09054fc:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:09054fc:  * See the License for the specific language governing permissions and
1:09054fc:  * limitations under the License.
1:09054fc:  */
1:09054fc: package org.apache.activemq.network;
1:09054fc: 
1:09054fc: import static org.junit.Assert.assertNotNull;
1:09054fc: 
1:09054fc: import java.net.URI;
1:09054fc: 
1:09054fc: import javax.jms.JMSException;
1:09054fc: import javax.jms.MessageConsumer;
1:09054fc: import javax.jms.MessageProducer;
1:09054fc: import javax.jms.Session;
1:09054fc: 
1:09054fc: import org.apache.activemq.ActiveMQConnectionFactory;
1:09054fc: import org.apache.activemq.broker.BrokerService;
1:09054fc: import org.apache.activemq.broker.ConnectionContext;
1:09054fc: import org.apache.activemq.broker.region.DestinationStatistics;
1:09054fc: import org.apache.activemq.command.ActiveMQDestination;
1:09054fc: import org.apache.activemq.command.ActiveMQTopic;
1:09054fc: import org.apache.activemq.command.RemoveSubscriptionInfo;
1:09054fc: import org.junit.After;
1:09054fc: import org.junit.Before;
1:09054fc: import org.junit.Test;
1:09054fc: 
1:09054fc: import com.google.common.collect.Lists;
1:09054fc: 
1:09054fc: /**
1:09054fc:  * This test is to show that if a durable subscription over a network bridge is deleted and
1:09054fc:  * re-created, messages will flow properly again for dynamic subscriptions.
1:09054fc:  *
1:09054fc:  * AMQ-6050
1:09054fc:  */
1:09054fc: public class NetworkDurableRecreationTest extends DynamicNetworkTestSupport {
1:09054fc: 
1:09054fc:     /**
1:09054fc:      * Test publisher on localBroker and durable on remoteBroker
1:09054fc:      * after durable deletion, recreate durable
1:09054fc:      */
1:09054fc:     @Test(timeout = 30 * 1000)
1:09054fc:     public void testDurableConsumer() throws Exception {
1:09054fc:         testReceive(remoteBroker, remoteSession, localBroker, localSession, new ConsumerCreator() {
1:09054fc: 
1:09054fc:             @Override
1:09054fc:             public MessageConsumer createConsumer() throws JMSException {
1:09054fc:                 return remoteSession.createDurableSubscriber(included, subName);
1:09054fc:             }
1:09054fc:         });
1:09054fc:     }
1:09054fc: 
1:09054fc:     /**
1:09054fc:      * Reverse and test publisher on remoteBroker and durable on localBroker
1:09054fc:      * after durable deletion, recreate durable
1:09054fc:      */
1:09054fc:     @Test(timeout = 30 * 1000)
1:09054fc:     public void testDurableConsumerReverse() throws Exception {
1:09054fc:         testReceive(localBroker, localSession, remoteBroker, remoteSession, new ConsumerCreator() {
1:09054fc: 
1:09054fc:             @Override
1:09054fc:             public MessageConsumer createConsumer() throws JMSException {
1:09054fc:                 return localSession.createDurableSubscriber(included, subName);
1:09054fc:             }
1:09054fc:         });
1:09054fc:     }
1:09054fc: 
1:09054fc:     /**
1:09054fc:      * Test publisher on localBroker and durable on remoteBroker
1:09054fc:      * after durable deletion, recreate with a non-durable consumer
1:09054fc:      */
1:09054fc:     @Test(timeout = 30 * 1000)
1:09054fc:     public void testDurableAndTopicConsumer() throws Exception {
1:09054fc:         testReceive(remoteBroker, remoteSession, localBroker, localSession, new ConsumerCreator() {
1:09054fc: 
1:09054fc:             @Override
1:09054fc:             public MessageConsumer createConsumer() throws JMSException {
1:09054fc:                 return remoteSession.createConsumer(included);
1:09054fc:             }
1:09054fc:         });
1:09054fc:     }
1:09054fc: 
1:09054fc:     /**
1:09054fc:      * Reverse and test publisher on remoteBroker and durable on localBroker
1:09054fc:      * after durable deletion, recreate with a non-durable consumer
1:09054fc:      */
1:09054fc:     @Test(timeout = 30 * 1000)
1:09054fc:     public void testDurableAndTopicConsumerReverse() throws Exception {
1:09054fc:         testReceive(localBroker, localSession, remoteBroker, remoteSession, new ConsumerCreator() {
1:09054fc: 
1:09054fc:             @Override
1:09054fc:             public MessageConsumer createConsumer() throws JMSException {
1:09054fc:                 return localSession.createConsumer(included);
1:09054fc:             }
1:09054fc:         });
1:09054fc:     }
1:09054fc: 
1:09054fc:     public void testReceive(BrokerService receiveBroker, Session receiveSession,
1:09054fc:             BrokerService publishBroker, Session publishSession, ConsumerCreator secondConsumerCreator) throws Exception {
1:09054fc: 
1:09054fc:         final DestinationStatistics destinationStatistics =
1:09054fc:                 publishBroker.getDestination(included).getDestinationStatistics();
1:09054fc: 
1:09054fc:         MessageProducer includedProducer = publishSession.createProducer(included);
1:09054fc:         MessageConsumer bridgeConsumer = receiveSession.createDurableSubscriber(
1:09054fc:                 included, subName);
1:09054fc: 
1:09054fc:         waitForConsumerCount(destinationStatistics, 1);
1:09054fc: 
1:09054fc:         //remove the durable
1:09054fc:         final ConnectionContext context = new ConnectionContext();
1:09054fc:         RemoveSubscriptionInfo info = getRemoveSubscriptionInfo(context, receiveBroker);
1:09054fc:         bridgeConsumer.close();
1:09054fc:         Thread.sleep(1000);
1:09054fc:         receiveBroker.getBroker().removeSubscription(context, info);
1:09054fc:         waitForConsumerCount(destinationStatistics, 0);
1:09054fc: 
1:09054fc:         //re-create consumer
1:09054fc:         MessageConsumer bridgeConsumer2 = secondConsumerCreator.createConsumer();
1:09054fc:         waitForConsumerCount(destinationStatistics, 1);
1:09054fc: 
1:09054fc:         //make sure message received
1:09054fc:         includedProducer.send(publishSession.createTextMessage("test"));
1:09054fc:         assertNotNull(bridgeConsumer2.receive(5000));
1:09054fc:     }
1:09054fc: 
1:09054fc:     @Before
1:09054fc:     public void setUp() throws Exception {
1:09054fc:         doSetUp(true);
1:09054fc:     }
1:09054fc: 
1:09054fc:     @After
1:09054fc:     public void tearDown() throws Exception {
1:09054fc:         doTearDown();
1:09054fc:     }
1:09054fc: 
1:09054fc:     protected void doTearDown() throws Exception {
1:09054fc:         if (localConnection != null) {
1:09054fc:             localConnection.close();
1:09054fc:         }
1:09054fc:         if (remoteConnection != null) {
1:09054fc:             remoteConnection.close();
1:09054fc:         }
1:09054fc:         if (localBroker != null) {
1:09054fc:             localBroker.stop();
1:09054fc:         }
1:09054fc:         if (remoteBroker != null) {
1:09054fc:             remoteBroker.stop();
1:09054fc:         }
1:09054fc:     }
1:09054fc: 
1:09054fc: 
1:09054fc:     protected void doSetUp(boolean deleteAllMessages) throws Exception {
1:09054fc:         remoteBroker = createRemoteBroker();
1:09054fc:         remoteBroker.setDeleteAllMessagesOnStartup(deleteAllMessages);
1:09054fc:         remoteBroker.start();
1:09054fc:         remoteBroker.waitUntilStarted();
1:09054fc:         localBroker = createLocalBroker();
1:09054fc:         localBroker.setDeleteAllMessagesOnStartup(deleteAllMessages);
1:09054fc:         localBroker.start();
1:09054fc:         localBroker.waitUntilStarted();
1:09054fc:         URI localURI = localBroker.getVmConnectorURI();
1:09054fc:         ActiveMQConnectionFactory fac = new ActiveMQConnectionFactory(localURI);
1:09054fc:         fac.setAlwaysSyncSend(true);
1:09054fc:         fac.setDispatchAsync(false);
1:09054fc:         localConnection = fac.createConnection();
1:09054fc:         localConnection.setClientID(clientId);
1:09054fc:         localConnection.start();
1:09054fc:         URI remoteURI = remoteBroker.getVmConnectorURI();
1:09054fc:         fac = new ActiveMQConnectionFactory(remoteURI);
1:09054fc:         remoteConnection = fac.createConnection();
1:09054fc:         remoteConnection.setClientID(clientId);
1:09054fc:         remoteConnection.start();
1:09054fc:         included = new ActiveMQTopic(testTopicName);
1:09054fc:         localSession = localConnection.createSession(false, Session.AUTO_ACKNOWLEDGE);
1:09054fc:         remoteSession = remoteConnection.createSession(false, Session.AUTO_ACKNOWLEDGE);
1:09054fc:     }
1:09054fc: 
1:09054fc: 
1:09054fc:     protected NetworkConnector connector;
1:09054fc:     protected BrokerService createLocalBroker() throws Exception {
1:09054fc:         BrokerService brokerService = new BrokerService();
1:09054fc:         brokerService.setMonitorConnectionSplits(true);
1:09054fc:         brokerService.setDataDirectoryFile(tempFolder.newFolder());
1:09054fc:         brokerService.setBrokerName("localBroker");
1:09054fc: 
1:09054fc:         connector = new DiscoveryNetworkConnector(new URI("static:(tcp://localhost:61617)"));
1:09054fc:         connector.setName("networkConnector");
1:09054fc:         connector.setDecreaseNetworkConsumerPriority(false);
1:09054fc:         connector.setConduitSubscriptions(true);
1:09054fc:         connector.setDuplex(true);
1:09054fc:         connector.setDynamicallyIncludedDestinations(Lists.<ActiveMQDestination>newArrayList(
1:09054fc:                 new ActiveMQTopic(testTopicName)));
1:09054fc:         connector.setExcludedDestinations(Lists.<ActiveMQDestination>newArrayList(
1:09054fc:                 new ActiveMQTopic(excludeTopicName)));
1:09054fc: 
1:09054fc:         brokerService.addNetworkConnector(connector);
1:09054fc:         brokerService.addConnector("tcp://localhost:61616");
1:09054fc: 
1:09054fc:         return brokerService;
1:09054fc:     }
1:09054fc: 
1:09054fc:     protected BrokerService createRemoteBroker() throws Exception {
1:09054fc:         BrokerService brokerService = new BrokerService();
1:09054fc:         brokerService.setBrokerName("remoteBroker");
1:09054fc:         brokerService.setUseJmx(false);
1:09054fc:         brokerService.setDataDirectoryFile(tempFolder.newFolder());
1:09054fc:         brokerService.addConnector("tcp://localhost:61617");
1:09054fc: 
1:09054fc:         return brokerService;
1:09054fc:     }
1:09054fc: 
1:09054fc: }
============================================================================
author:Christopher L. Shannon (cshannon)
-------------------------------------------------------------------------------
commit:09054fc
/////////////////////////////////////////////////////////////////////////
1: /**
1:  * Licensed to the Apache Software Foundation (ASF) under one or more
1:  * contributor license agreements.  See the NOTICE file distributed with
1:  * this work for additional information regarding copyright ownership.
1:  * The ASF licenses this file to You under the Apache License, Version 2.0
1:  * (the "License"); you may not use this file except in compliance with
1:  * the License.  You may obtain a copy of the License at
1:  *
1:  *      http://www.apache.org/licenses/LICENSE-2.0
1:  *
1:  * Unless required by applicable law or agreed to in writing, software
1:  * distributed under the License is distributed on an "AS IS" BASIS,
1:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:  * See the License for the specific language governing permissions and
1:  * limitations under the License.
1:  */
1: package org.apache.activemq.network;
1: 
1: import static org.junit.Assert.assertNotNull;
1: 
1: import java.net.URI;
1: 
1: import javax.jms.JMSException;
1: import javax.jms.MessageConsumer;
1: import javax.jms.MessageProducer;
1: import javax.jms.Session;
1: 
1: import org.apache.activemq.ActiveMQConnectionFactory;
1: import org.apache.activemq.broker.BrokerService;
1: import org.apache.activemq.broker.ConnectionContext;
1: import org.apache.activemq.broker.region.DestinationStatistics;
1: import org.apache.activemq.command.ActiveMQDestination;
1: import org.apache.activemq.command.ActiveMQTopic;
1: import org.apache.activemq.command.RemoveSubscriptionInfo;
1: import org.junit.After;
1: import org.junit.Before;
1: import org.junit.Test;
1: 
1: import com.google.common.collect.Lists;
1: 
1: /**
1:  * This test is to show that if a durable subscription over a network bridge is deleted and
1:  * re-created, messages will flow properly again for dynamic subscriptions.
1:  *
1:  * AMQ-6050
1:  */
1: public class NetworkDurableRecreationTest extends DynamicNetworkTestSupport {
1: 
1:     /**
1:      * Test publisher on localBroker and durable on remoteBroker
1:      * after durable deletion, recreate durable
1:      */
1:     @Test(timeout = 30 * 1000)
1:     public void testDurableConsumer() throws Exception {
1:         testReceive(remoteBroker, remoteSession, localBroker, localSession, new ConsumerCreator() {
1: 
1:             @Override
1:             public MessageConsumer createConsumer() throws JMSException {
1:                 return remoteSession.createDurableSubscriber(included, subName);
1:             }
1:         });
1:     }
1: 
1:     /**
1:      * Reverse and test publisher on remoteBroker and durable on localBroker
1:      * after durable deletion, recreate durable
1:      */
1:     @Test(timeout = 30 * 1000)
1:     public void testDurableConsumerReverse() throws Exception {
1:         testReceive(localBroker, localSession, remoteBroker, remoteSession, new ConsumerCreator() {
1: 
1:             @Override
1:             public MessageConsumer createConsumer() throws JMSException {
1:                 return localSession.createDurableSubscriber(included, subName);
1:             }
1:         });
1:     }
1: 
1:     /**
1:      * Test publisher on localBroker and durable on remoteBroker
1:      * after durable deletion, recreate with a non-durable consumer
1:      */
1:     @Test(timeout = 30 * 1000)
1:     public void testDurableAndTopicConsumer() throws Exception {
1:         testReceive(remoteBroker, remoteSession, localBroker, localSession, new ConsumerCreator() {
1: 
1:             @Override
1:             public MessageConsumer createConsumer() throws JMSException {
1:                 return remoteSession.createConsumer(included);
1:             }
1:         });
1:     }
1: 
1:     /**
1:      * Reverse and test publisher on remoteBroker and durable on localBroker
1:      * after durable deletion, recreate with a non-durable consumer
1:      */
1:     @Test(timeout = 30 * 1000)
1:     public void testDurableAndTopicConsumerReverse() throws Exception {
1:         testReceive(localBroker, localSession, remoteBroker, remoteSession, new ConsumerCreator() {
1: 
1:             @Override
1:             public MessageConsumer createConsumer() throws JMSException {
1:                 return localSession.createConsumer(included);
1:             }
1:         });
1:     }
1: 
1:     public void testReceive(BrokerService receiveBroker, Session receiveSession,
1:             BrokerService publishBroker, Session publishSession, ConsumerCreator secondConsumerCreator) throws Exception {
1: 
1:         final DestinationStatistics destinationStatistics =
1:                 publishBroker.getDestination(included).getDestinationStatistics();
1: 
1:         MessageProducer includedProducer = publishSession.createProducer(included);
1:         MessageConsumer bridgeConsumer = receiveSession.createDurableSubscriber(
1:                 included, subName);
1: 
1:         waitForConsumerCount(destinationStatistics, 1);
1: 
1:         //remove the durable
1:         final ConnectionContext context = new ConnectionContext();
1:         RemoveSubscriptionInfo info = getRemoveSubscriptionInfo(context, receiveBroker);
1:         bridgeConsumer.close();
1:         Thread.sleep(1000);
1:         receiveBroker.getBroker().removeSubscription(context, info);
1:         waitForConsumerCount(destinationStatistics, 0);
1: 
1:         //re-create consumer
1:         MessageConsumer bridgeConsumer2 = secondConsumerCreator.createConsumer();
1:         waitForConsumerCount(destinationStatistics, 1);
1: 
1:         //make sure message received
1:         includedProducer.send(publishSession.createTextMessage("test"));
1:         assertNotNull(bridgeConsumer2.receive(5000));
1:     }
1: 
1:     @Before
1:     public void setUp() throws Exception {
1:         doSetUp(true);
1:     }
1: 
1:     @After
1:     public void tearDown() throws Exception {
1:         doTearDown();
1:     }
1: 
1:     protected void doTearDown() throws Exception {
1:         if (localConnection != null) {
1:             localConnection.close();
1:         }
1:         if (remoteConnection != null) {
1:             remoteConnection.close();
1:         }
1:         if (localBroker != null) {
1:             localBroker.stop();
1:         }
1:         if (remoteBroker != null) {
1:             remoteBroker.stop();
1:         }
1:     }
1: 
1: 
1:     protected void doSetUp(boolean deleteAllMessages) throws Exception {
1:         remoteBroker = createRemoteBroker();
1:         remoteBroker.setDeleteAllMessagesOnStartup(deleteAllMessages);
1:         remoteBroker.start();
1:         remoteBroker.waitUntilStarted();
1:         localBroker = createLocalBroker();
1:         localBroker.setDeleteAllMessagesOnStartup(deleteAllMessages);
1:         localBroker.start();
1:         localBroker.waitUntilStarted();
1:         URI localURI = localBroker.getVmConnectorURI();
1:         ActiveMQConnectionFactory fac = new ActiveMQConnectionFactory(localURI);
1:         fac.setAlwaysSyncSend(true);
1:         fac.setDispatchAsync(false);
1:         localConnection = fac.createConnection();
1:         localConnection.setClientID(clientId);
1:         localConnection.start();
1:         URI remoteURI = remoteBroker.getVmConnectorURI();
1:         fac = new ActiveMQConnectionFactory(remoteURI);
1:         remoteConnection = fac.createConnection();
1:         remoteConnection.setClientID(clientId);
1:         remoteConnection.start();
1:         included = new ActiveMQTopic(testTopicName);
1:         localSession = localConnection.createSession(false, Session.AUTO_ACKNOWLEDGE);
1:         remoteSession = remoteConnection.createSession(false, Session.AUTO_ACKNOWLEDGE);
1:     }
1: 
1: 
1:     protected NetworkConnector connector;
1:     protected BrokerService createLocalBroker() throws Exception {
1:         BrokerService brokerService = new BrokerService();
1:         brokerService.setMonitorConnectionSplits(true);
1:         brokerService.setDataDirectoryFile(tempFolder.newFolder());
1:         brokerService.setBrokerName("localBroker");
1: 
1:         connector = new DiscoveryNetworkConnector(new URI("static:(tcp://localhost:61617)"));
1:         connector.setName("networkConnector");
1:         connector.setDecreaseNetworkConsumerPriority(false);
1:         connector.setConduitSubscriptions(true);
1:         connector.setDuplex(true);
1:         connector.setDynamicallyIncludedDestinations(Lists.<ActiveMQDestination>newArrayList(
1:                 new ActiveMQTopic(testTopicName)));
1:         connector.setExcludedDestinations(Lists.<ActiveMQDestination>newArrayList(
1:                 new ActiveMQTopic(excludeTopicName)));
1: 
1:         brokerService.addNetworkConnector(connector);
1:         brokerService.addConnector("tcp://localhost:61616");
1: 
1:         return brokerService;
1:     }
1: 
1:     protected BrokerService createRemoteBroker() throws Exception {
1:         BrokerService brokerService = new BrokerService();
1:         brokerService.setBrokerName("remoteBroker");
1:         brokerService.setUseJmx(false);
1:         brokerService.setDataDirectoryFile(tempFolder.newFolder());
1:         brokerService.addConnector("tcp://localhost:61617");
1: 
1:         return brokerService;
1:     }
1: 
1: }
============================================================================