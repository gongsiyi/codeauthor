1:f9451e5: /**
1:f9451e5:  * Licensed to the Apache Software Foundation (ASF) under one or more
1:f9451e5:  * contributor license agreements.  See the NOTICE file distributed with
1:f9451e5:  * this work for additional information regarding copyright ownership.
1:f9451e5:  * The ASF licenses this file to You under the Apache License, Version 2.0
1:f9451e5:  * (the "License"); you may not use this file except in compliance with
1:f9451e5:  * the License.  You may obtain a copy of the License at
1:f9451e5:  *
1:f9451e5:  *      http://www.apache.org/licenses/LICENSE-2.0
1:f9451e5:  *
1:f9451e5:  * Unless required by applicable law or agreed to in writing, software
1:f9451e5:  * distributed under the License is distributed on an "AS IS" BASIS,
1:f9451e5:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:f9451e5:  * See the License for the specific language governing permissions and
1:f9451e5:  * limitations under the License.
1:f9451e5:  */
1:f9451e5: package org.apache.activemq.shiro.authc;
1:f9451e5: 
1:f9451e5: import org.apache.activemq.command.ConnectionInfo;
1:f9451e5: import org.apache.activemq.shiro.subject.SubjectConnectionReference;
1:f9451e5: import org.apache.shiro.authc.AuthenticationToken;
1:f9451e5: import org.apache.shiro.authc.UsernamePasswordToken;
1:f9451e5: 
1:f9451e5: /**
1:f9451e5:  * Default implementation of the {@link AuthenticationTokenFactory} interface that returns
1:f9451e5:  * {@link org.apache.shiro.authc.UsernamePasswordToken UsernamePasswordToken} instances based on inspecting the
1:f9451e5:  * {@link ConnectionInfo}.
1:f9451e5:  *
1:f9451e5:  * @since 5.10.0
1:f9451e5:  */
1:f9451e5: public class DefaultAuthenticationTokenFactory implements AuthenticationTokenFactory {
1:f9451e5: 
1:f9451e5:     public DefaultAuthenticationTokenFactory() {
1:f9451e5:     }
1:f9451e5: 
1:f9451e5:     /**
1:f9451e5:      * Returns a new {@link UsernamePasswordToken} instance populated based on the ConnectionInfo's
1:f9451e5:      * {@link org.apache.activemq.command.ConnectionInfo#getUserName() userName} and
1:f9451e5:      * {@link org.apache.activemq.command.ConnectionInfo#getPassword() password} properties.
1:f9451e5:      *
1:f9451e5:      * @param conn the subject's connection
1:f9451e5:      * @return a new {@link UsernamePasswordToken} instance populated based on the ConnectionInfo's
1:f9451e5:      *         ConnectionInfo's {@link org.apache.activemq.command.ConnectionInfo#getUserName() userName} and
1:f9451e5:      *         {@link org.apache.activemq.command.ConnectionInfo#getPassword() password} properties.
1:f9451e5:      */
1:f9451e5:     @Override
1:f9451e5:     public AuthenticationToken getAuthenticationToken(SubjectConnectionReference conn) {
1:f9451e5: 
1:f9451e5:         String username = conn.getConnectionInfo().getUserName();
1:f9451e5:         String password = conn.getConnectionInfo().getPassword();
1:f9451e5: 
1:f9451e5:         if (username == null && password == null) {
1:f9451e5:             //no identity or credentials provided by the client for the connection - return null to reflect this
1:f9451e5:             return null;
1:f9451e5:         }
1:f9451e5: 
1:f9451e5:         return new UsernamePasswordToken(username, password);
1:f9451e5:     }
1:f9451e5: }
============================================================================
author:Les Hazlewood
-------------------------------------------------------------------------------
commit:f9451e5
/////////////////////////////////////////////////////////////////////////
1: /**
1:  * Licensed to the Apache Software Foundation (ASF) under one or more
1:  * contributor license agreements.  See the NOTICE file distributed with
1:  * this work for additional information regarding copyright ownership.
1:  * The ASF licenses this file to You under the Apache License, Version 2.0
1:  * (the "License"); you may not use this file except in compliance with
1:  * the License.  You may obtain a copy of the License at
1:  *
1:  *      http://www.apache.org/licenses/LICENSE-2.0
1:  *
1:  * Unless required by applicable law or agreed to in writing, software
1:  * distributed under the License is distributed on an "AS IS" BASIS,
1:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:  * See the License for the specific language governing permissions and
1:  * limitations under the License.
1:  */
1: package org.apache.activemq.shiro.authc;
1: 
1: import org.apache.activemq.command.ConnectionInfo;
1: import org.apache.activemq.shiro.subject.SubjectConnectionReference;
1: import org.apache.shiro.authc.AuthenticationToken;
1: import org.apache.shiro.authc.UsernamePasswordToken;
1: 
1: /**
1:  * Default implementation of the {@link AuthenticationTokenFactory} interface that returns
1:  * {@link org.apache.shiro.authc.UsernamePasswordToken UsernamePasswordToken} instances based on inspecting the
1:  * {@link ConnectionInfo}.
1:  *
1:  * @since 5.10.0
1:  */
1: public class DefaultAuthenticationTokenFactory implements AuthenticationTokenFactory {
1: 
1:     public DefaultAuthenticationTokenFactory() {
1:     }
1: 
1:     /**
1:      * Returns a new {@link UsernamePasswordToken} instance populated based on the ConnectionInfo's
1:      * {@link org.apache.activemq.command.ConnectionInfo#getUserName() userName} and
1:      * {@link org.apache.activemq.command.ConnectionInfo#getPassword() password} properties.
1:      *
1:      * @param conn the subject's connection
1:      * @return a new {@link UsernamePasswordToken} instance populated based on the ConnectionInfo's
1:      *         ConnectionInfo's {@link org.apache.activemq.command.ConnectionInfo#getUserName() userName} and
1:      *         {@link org.apache.activemq.command.ConnectionInfo#getPassword() password} properties.
1:      */
1:     @Override
1:     public AuthenticationToken getAuthenticationToken(SubjectConnectionReference conn) {
1: 
1:         String username = conn.getConnectionInfo().getUserName();
1:         String password = conn.getConnectionInfo().getPassword();
1: 
1:         if (username == null && password == null) {
1:             //no identity or credentials provided by the client for the connection - return null to reflect this
1:             return null;
1:         }
1: 
1:         return new UsernamePasswordToken(username, password);
1:     }
1: }
============================================================================