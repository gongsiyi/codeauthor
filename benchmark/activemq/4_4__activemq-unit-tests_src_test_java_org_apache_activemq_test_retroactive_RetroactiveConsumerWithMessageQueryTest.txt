1:d29ca2a: /**
1:57b4941:  * Licensed to the Apache Software Foundation (ASF) under one or more
1:57b4941:  * contributor license agreements.  See the NOTICE file distributed with
1:57b4941:  * this work for additional information regarding copyright ownership.
1:57b4941:  * The ASF licenses this file to You under the Apache License, Version 2.0
1:57b4941:  * (the "License"); you may not use this file except in compliance with
1:57b4941:  * the License.  You may obtain a copy of the License at
1:0bbc0ac:  *
1:230a86c:  *      http://www.apache.org/licenses/LICENSE-2.0
5:d29ca2a:  *
1:d29ca2a:  * Unless required by applicable law or agreed to in writing, software
1:d29ca2a:  * distributed under the License is distributed on an "AS IS" BASIS,
1:d29ca2a:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:d29ca2a:  * See the License for the specific language governing permissions and
1:d29ca2a:  * limitations under the License.
1:d29ca2a:  */
1:d29ca2a: package org.apache.activemq.test.retroactive;
2:d29ca2a: 
1:74a7a8b: import java.net.URI;
1:74a7a8b: import java.util.Date;
1:d29ca2a: 
1:d29ca2a: import javax.jms.Connection;
1:d29ca2a: import javax.jms.ConnectionFactory;
1:d29ca2a: import javax.jms.MessageConsumer;
1:d29ca2a: import javax.jms.MessageProducer;
1:d29ca2a: import javax.jms.Session;
1:d29ca2a: import javax.jms.TextMessage;
1:d29ca2a: 
1:74a7a8b: import org.apache.activemq.ActiveMQConnectionFactory;
1:74a7a8b: import org.apache.activemq.EmbeddedBrokerTestSupport;
1:74a7a8b: import org.apache.activemq.broker.BrokerFactory;
1:74a7a8b: import org.apache.activemq.broker.BrokerService;
1:74a7a8b: import org.apache.activemq.util.MessageIdList;
1:8bf987b: import org.slf4j.Logger;
1:8bf987b: import org.slf4j.LoggerFactory;
1:fc00993: 
1:d29ca2a: /**
1:4743a20:  *
1:d29ca2a:  */
1:d29ca2a: public class RetroactiveConsumerWithMessageQueryTest extends EmbeddedBrokerTestSupport {
1:8bf987b:     private static final Logger LOG = LoggerFactory.getLogger(RetroactiveConsumerWithMessageQueryTest.class);
1:4743a20: 
1:d29ca2a:     protected int messageCount = 20;
1:d29ca2a:     protected Connection connection;
1:d29ca2a:     protected Session session;
1:d29ca2a: 
1:d29ca2a:     public void testConsumeAndReceiveInitialQueryBeforeUpdates() throws Exception {
1:d29ca2a: 
1:d29ca2a:         // lets some messages
1:d29ca2a:         connection = createConnection();
1:d29ca2a:         session = connection.createSession(false, Session.AUTO_ACKNOWLEDGE);
1:d29ca2a:         connection.start();
1:d29ca2a: 
1:d29ca2a:         MessageConsumer consumer = session.createConsumer(destination);
1:3d95025:         MessageIdList listener = new MessageIdList();
1:d29ca2a:         listener.setVerbose(true);
1:d29ca2a:         consumer.setMessageListener(listener);
1:d29ca2a: 
1:d29ca2a:         MessageProducer producer = session.createProducer(destination);
1:fc00993:         int updateMessageCount = messageCount - DummyMessageQuery.MESSAGE_COUNT;
1:d29ca2a:         for (int i = 0; i < updateMessageCount; i++) {
1:d29ca2a:             TextMessage message = session.createTextMessage("Update Message: " + i + " sent at: " + new Date());
1:d29ca2a:             producer.send(message);
1:d29ca2a:         }
1:d29ca2a:         producer.close();
1:230a86c:         LOG.info("Sent: " + updateMessageCount + " update messages");
1:d29ca2a: 
1:d29ca2a:         listener.assertMessagesReceived(messageCount);
1:d29ca2a:     }
1:d29ca2a: 
1:4743a20:     @Override
1:d29ca2a:     protected void setUp() throws Exception {
1:d29ca2a:         useTopic = true;
1:d29ca2a:         bindAddress = "vm://localhost";
1:d29ca2a:         super.setUp();
1:d29ca2a:     }
1:d29ca2a: 
1:4743a20:     @Override
1:d29ca2a:     protected void tearDown() throws Exception {
1:d29ca2a:         if (session != null) {
1:d29ca2a:             session.close();
1:d29ca2a:             session = null;
1:d29ca2a:         }
1:d29ca2a:         if (connection != null) {
1:d29ca2a:             connection.close();
1:d29ca2a:         }
1:d29ca2a:         super.tearDown();
1:d29ca2a:     }
1:d29ca2a: 
1:4743a20:     @Override
1:d29ca2a:     protected ConnectionFactory createConnectionFactory() throws Exception {
1:d29ca2a:         ActiveMQConnectionFactory answer = new ActiveMQConnectionFactory(bindAddress);
1:095b430:         // answer.setUseRetroactiveConsumer(true);
1:095b430:         // option applied via destination policy alwaysRetroactive
1:d29ca2a:         return answer;
1:d29ca2a:     }
1:d29ca2a: 
1:4743a20:     @Override
1:d29ca2a:     protected BrokerService createBroker() throws Exception {
1:d29ca2a:         String uri = getBrokerXml();
1:230a86c:         LOG.info("Loading broker configuration from the classpath with URI: " + uri);
1:230a86c:         return BrokerFactory.createBroker(new URI("xbean:" + uri));
1:d29ca2a:     }
1:d29ca2a: 
1:4743a20:     @Override
1:d29ca2a:     protected void startBroker() throws Exception {
1:d29ca2a:         // broker already started by XBean
1:d29ca2a:     }
1:d29ca2a: 
1:d29ca2a:     protected String getBrokerXml() {
1:d29ca2a:         return "org/apache/activemq/test/retroactive/activemq-message-query.xml";
1:d29ca2a:     }
1:d29ca2a: 
1:d29ca2a: }
============================================================================
author:Timothy A. Bish
-------------------------------------------------------------------------------
commit:4743a20
/////////////////////////////////////////////////////////////////////////
1:  *
1: 
/////////////////////////////////////////////////////////////////////////
1:     @Override
1:     @Override
/////////////////////////////////////////////////////////////////////////
1:     @Override
/////////////////////////////////////////////////////////////////////////
1:     @Override
1:     @Override
commit:ef24cc9
author:Gary Tully
-------------------------------------------------------------------------------
commit:095b430
/////////////////////////////////////////////////////////////////////////
1:         // answer.setUseRetroactiveConsumer(true);
1:         // option applied via destination policy alwaysRetroactive
commit:fe63c29
/////////////////////////////////////////////////////////////////////////
0:         //answer.setUseRetroactiveConsumer(true);
author:Hiram R. Chirino
-------------------------------------------------------------------------------
commit:0bbc0ac
/////////////////////////////////////////////////////////////////////////
1:  * 
commit:fc00993
/////////////////////////////////////////////////////////////////////////
0: import org.apache.activemq.usecases.CreateLotsOfTemporaryQueuesTest;
0: import org.apache.commons.logging.Log;
0: import org.apache.commons.logging.LogFactory;
0:     private static final Log LOG = LogFactory.getLog(RetroactiveConsumerWithMessageQueryTest.class);
1:     
/////////////////////////////////////////////////////////////////////////
1:         int updateMessageCount = messageCount - DummyMessageQuery.MESSAGE_COUNT;
commit:74a7a8b
/////////////////////////////////////////////////////////////////////////
1: import java.net.URI;
1: import java.util.Date;
/////////////////////////////////////////////////////////////////////////
1: import org.apache.activemq.ActiveMQConnectionFactory;
1: import org.apache.activemq.EmbeddedBrokerTestSupport;
1: import org.apache.activemq.broker.BrokerFactory;
1: import org.apache.activemq.broker.BrokerService;
1: import org.apache.activemq.util.MessageIdList;
commit:230a86c
/////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////
1:  *      http://www.apache.org/licenses/LICENSE-2.0
/////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////
1:         LOG.info("Sent: " + updateMessageCount + " update messages");
/////////////////////////////////////////////////////////////////////////
1:         LOG.info("Loading broker configuration from the classpath with URI: " + uri);
1:         return BrokerFactory.createBroker(new URI("xbean:" + uri));
commit:57b4941
/////////////////////////////////////////////////////////////////////////
1:  * Licensed to the Apache Software Foundation (ASF) under one or more
1:  * contributor license agreements.  See the NOTICE file distributed with
1:  * this work for additional information regarding copyright ownership.
1:  * The ASF licenses this file to You under the Apache License, Version 2.0
1:  * (the "License"); you may not use this file except in compliance with
1:  * the License.  You may obtain a copy of the License at
commit:93dc39b
/////////////////////////////////////////////////////////////////////////
0:         log.info("Sent: " + updateMessageCount + " update messages");
/////////////////////////////////////////////////////////////////////////
0:         log.info("Loading broker configuration from the classpath with URI: " + uri);
commit:050637c
/////////////////////////////////////////////////////////////////////////
0: import org.apache.activemq.broker.BrokerFactory;
/////////////////////////////////////////////////////////////////////////
0: import java.net.URI;
/////////////////////////////////////////////////////////////////////////
0:         return BrokerFactory.createBroker(new URI("xbean:"+uri));
commit:3d95025
/////////////////////////////////////////////////////////////////////////
0: import org.apache.activemq.util.MessageIdList;
/////////////////////////////////////////////////////////////////////////
1:         MessageIdList listener = new MessageIdList();
commit:48b4869
/////////////////////////////////////////////////////////////////////////
0:  * Copyright 2005-2006 The Apache Software Foundation
commit:d29ca2a
/////////////////////////////////////////////////////////////////////////
1: /**
1:  *
0:  * Copyright 2004 The Apache Software Foundation
1:  *
0:  * Licensed under the Apache License, Version 2.0 (the "License");
0:  * you may not use this file except in compliance with the License.
0:  * You may obtain a copy of the License at
1:  *
0:  * http://www.apache.org/licenses/LICENSE-2.0
1:  *
1:  * Unless required by applicable law or agreed to in writing, software
1:  * distributed under the License is distributed on an "AS IS" BASIS,
1:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:  * See the License for the specific language governing permissions and
1:  * limitations under the License.
1:  */
1: package org.apache.activemq.test.retroactive;
1: 
0: import org.apache.activemq.ActiveMQConnectionFactory;
0: import org.apache.activemq.EmbeddedBrokerTestSupport;
0: import org.apache.activemq.broker.BrokerService;
0: import org.apache.activemq.util.MessageList;
0: import org.apache.activemq.xbean.BrokerFactoryBean;
0: import org.springframework.core.io.ClassPathResource;
1: 
1: import javax.jms.Connection;
1: import javax.jms.ConnectionFactory;
1: import javax.jms.MessageConsumer;
1: import javax.jms.MessageProducer;
1: import javax.jms.Session;
1: import javax.jms.TextMessage;
1: 
0: import java.util.Date;
1: 
1: /**
1:  * 
0:  * @version $Revision$
1:  */
1: public class RetroactiveConsumerWithMessageQueryTest extends EmbeddedBrokerTestSupport {
1:     protected int messageCount = 20;
1:     protected Connection connection;
1:     protected Session session;
1: 
1:     public void testConsumeAndReceiveInitialQueryBeforeUpdates() throws Exception {
1: 
1:         // lets some messages
1:         connection = createConnection();
1:         session = connection.createSession(false, Session.AUTO_ACKNOWLEDGE);
1:         connection.start();
1: 
1:         MessageConsumer consumer = session.createConsumer(destination);
0:         MessageList listener = new MessageList();
1:         listener.setVerbose(true);
1:         consumer.setMessageListener(listener);
1: 
1:         MessageProducer producer = session.createProducer(destination);
0:         int updateMessageCount = messageCount - DummyMessageQuery.messageCount;
1:         for (int i = 0; i < updateMessageCount; i++) {
1:             TextMessage message = session.createTextMessage("Update Message: " + i + " sent at: " + new Date());
1:             producer.send(message);
1:         }
1:         producer.close();
0:         System.out.println("Sent: " + updateMessageCount + " update messages");
1: 
1:         listener.assertMessagesReceived(messageCount);
1:     }
1: 
1:     protected void setUp() throws Exception {
1:         useTopic = true;
1:         bindAddress = "vm://localhost";
1:         super.setUp();
1:     }
1: 
1:     protected void tearDown() throws Exception {
1:         if (session != null) {
1:             session.close();
1:             session = null;
1:         }
1:         if (connection != null) {
1:             connection.close();
1:         }
1:         super.tearDown();
1:     }
1: 
1:     protected ConnectionFactory createConnectionFactory() throws Exception {
1:         ActiveMQConnectionFactory answer = new ActiveMQConnectionFactory(bindAddress);
0:         answer.setUseRetroactiveConsumer(true);
1:         return answer;
1:     }
1: 
1:     protected BrokerService createBroker() throws Exception {
1:         String uri = getBrokerXml();
0:         System.out.println("Loading broker configuration from the classpath with URI: " + uri);
0:         BrokerFactoryBean factory = new BrokerFactoryBean(new ClassPathResource(uri));
0:         factory.afterPropertiesSet();
0:         return factory.getBroker();
1:     }
1: 
1:     protected void startBroker() throws Exception {
1:         // broker already started by XBean
1:     }
1: 
1:     protected String getBrokerXml() {
1:         return "org/apache/activemq/test/retroactive/activemq-message-query.xml";
1:     }
1: 
1: }
author:Bosanac Dejan
-------------------------------------------------------------------------------
commit:8bf987b
/////////////////////////////////////////////////////////////////////////
1: import org.slf4j.Logger;
1: import org.slf4j.LoggerFactory;
1:     private static final Logger LOG = LoggerFactory.getLogger(RetroactiveConsumerWithMessageQueryTest.class);
============================================================================