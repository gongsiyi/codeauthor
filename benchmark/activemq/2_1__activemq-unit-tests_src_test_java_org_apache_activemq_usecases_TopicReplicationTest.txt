1:d884ba2: /**
1:d884ba2:  * Licensed to the Apache Software Foundation (ASF) under one or more
1:d884ba2:  * contributor license agreements.  See the NOTICE file distributed with
1:d884ba2:  * this work for additional information regarding copyright ownership.
1:d884ba2:  * The ASF licenses this file to You under the Apache License, Version 2.0
1:d884ba2:  * (the "License"); you may not use this file except in compliance with
1:d884ba2:  * the License.  You may obtain a copy of the License at
1:d884ba2:  *
1:d884ba2:  *      http://www.apache.org/licenses/LICENSE-2.0
1:d884ba2:  *
1:d884ba2:  * Unless required by applicable law or agreed to in writing, software
1:d884ba2:  * distributed under the License is distributed on an "AS IS" BASIS,
1:d884ba2:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:d884ba2:  * See the License for the specific language governing permissions and
1:d884ba2:  * limitations under the License.
1:d884ba2:  */
1:d884ba2: package org.apache.activemq.usecases;
1:d884ba2: 
1:d884ba2: import org.apache.activemq.JmsMultipleBrokersTestSupport;
1:d884ba2: import org.apache.activemq.util.MessageIdList;
1:d884ba2: import org.springframework.core.io.ClassPathResource;
1:d884ba2: 
1:d884ba2: import javax.jms.Destination;
1:d884ba2: import javax.jms.MessageConsumer;
1:d884ba2: 
1:d884ba2: public class TopicReplicationTest extends JmsMultipleBrokersTestSupport {
1:d884ba2: 
1:d884ba2:     public static final int MSG_COUNT = 10;
1:d884ba2: 
1:d884ba2:     public void testReplication() throws Exception {
1:d884ba2:         createBroker(new ClassPathResource("org/apache/activemq/usecases/replication-broker1.xml"));
1:d884ba2:         createBroker(new ClassPathResource("org/apache/activemq/usecases/replication-broker2.xml"));
1:d884ba2:         createBroker(new ClassPathResource("org/apache/activemq/usecases/replication-broker3.xml"));
1:d884ba2:         createBroker(new ClassPathResource("org/apache/activemq/usecases/replication-broker4.xml"));
1:d884ba2: 
1:d884ba2:         brokers.get("replication-broker1").broker.waitUntilStarted();
1:d884ba2:         brokers.get("replication-broker2").broker.waitUntilStarted();
1:d884ba2:         brokers.get("replication-broker3").broker.waitUntilStarted();
1:d884ba2:         brokers.get("replication-broker4").broker.waitUntilStarted();
1:d884ba2: 
1:d884ba2:         Destination dest = createDestination("replication", true);
1:d884ba2: 
1:d884ba2:         // Setup consumers
1:d884ba2:         MessageConsumer clientA = createConsumer("replication-broker2", dest);
1:d884ba2:         MessageConsumer clientB = createConsumer("replication-broker3", dest);
1:d884ba2:         MessageConsumer clientC = createConsumer("replication-broker4", dest);
1:d884ba2:         MessageConsumer clientD = createConsumer("replication-broker4", dest);
1:d884ba2: 
1:d884ba2:         //let consumers propogate around the network
1:d884ba2:         Thread.sleep(2000);
1:d884ba2: 
1:d884ba2:         // Get message count
1:d884ba2:         MessageIdList msgsA = getConsumerMessages("replication-broker2", clientA);
1:d884ba2:         MessageIdList msgsB = getConsumerMessages("replication-broker3", clientB);
1:d884ba2:         MessageIdList msgsC = getConsumerMessages("replication-broker4", clientC);
1:d884ba2:         MessageIdList msgsD = getConsumerMessages("replication-broker4", clientD);
1:d884ba2: 
1:d884ba2: 
1:d884ba2: 
1:d884ba2:         // send messages to broker1
1:d884ba2:         sendMessages("replication-broker1", dest, MSG_COUNT);
1:d884ba2: 
1:d884ba2: 
1:d884ba2:         msgsA.waitForMessagesToArrive(MSG_COUNT);
1:d884ba2:         msgsB.waitForMessagesToArrive(MSG_COUNT);
1:d884ba2:         msgsC.waitForMessagesToArrive(MSG_COUNT);
1:d884ba2:         msgsD.waitForMessagesToArrive(MSG_COUNT);
1:d884ba2: 
1:d884ba2:         assertEquals(MSG_COUNT, msgsA.getMessageCount());
1:d884ba2:         assertEquals(MSG_COUNT, msgsB.getMessageCount());
1:d884ba2:         assertEquals(MSG_COUNT, msgsC.getMessageCount());
1:d884ba2:         assertEquals(MSG_COUNT, msgsD.getMessageCount());
1:d884ba2: 
1:d884ba2:         // send messages to broker4
1:d884ba2:         sendMessages("replication-broker4", dest, MSG_COUNT);
1:d884ba2: 
1:d884ba2:         msgsA.waitForMessagesToArrive(2 * MSG_COUNT);
1:d884ba2:         msgsB.waitForMessagesToArrive(2 * MSG_COUNT);
1:d884ba2:         msgsC.waitForMessagesToArrive(2 * MSG_COUNT);
1:d884ba2:         msgsD.waitForMessagesToArrive(2 * MSG_COUNT);
1:d884ba2: 
1:d884ba2:         assertEquals(2 * MSG_COUNT, msgsA.getMessageCount());
1:d884ba2:         assertEquals(2 * MSG_COUNT, msgsB.getMessageCount());
1:d884ba2:         assertEquals(2 * MSG_COUNT, msgsC.getMessageCount());
1:d884ba2:         assertEquals(2 * MSG_COUNT, msgsD.getMessageCount());
1:d884ba2: 
1:d884ba2:         // send messages to broker3
1:d884ba2:         sendMessages("replication-broker3", dest, MSG_COUNT);
1:d884ba2: 
1:d884ba2:         msgsA.waitForMessagesToArrive(3 * MSG_COUNT);
1:d884ba2:         msgsB.waitForMessagesToArrive(3 * MSG_COUNT);
1:d884ba2:         msgsC.waitForMessagesToArrive(3 * MSG_COUNT);
1:d884ba2:         msgsD.waitForMessagesToArrive(3 * MSG_COUNT);
1:d884ba2: 
1:d884ba2:         assertEquals(3 * MSG_COUNT, msgsA.getMessageCount());
1:d884ba2:         assertEquals(3 * MSG_COUNT, msgsB.getMessageCount());
1:d884ba2:         assertEquals(3 * MSG_COUNT, msgsC.getMessageCount());
1:d884ba2:         assertEquals(3 * MSG_COUNT, msgsD.getMessageCount());
1:d884ba2: 
1:d884ba2:         // send messages to broker2
1:d884ba2:         sendMessages("replication-broker2", dest, MSG_COUNT);
1:d884ba2: 
1:d884ba2:         msgsA.waitForMessagesToArrive(4 * MSG_COUNT);
1:d884ba2:         msgsB.waitForMessagesToArrive(4 * MSG_COUNT);
1:d884ba2:         msgsC.waitForMessagesToArrive(4 * MSG_COUNT);
1:d884ba2:         msgsD.waitForMessagesToArrive(4 * MSG_COUNT);
1:d884ba2: 
1:d884ba2:         assertEquals(4 * MSG_COUNT, msgsA.getMessageCount());
1:d884ba2:         assertEquals(4 * MSG_COUNT, msgsB.getMessageCount());
1:d884ba2:         assertEquals(4 * MSG_COUNT, msgsC.getMessageCount());
1:d884ba2:         assertEquals(4 * MSG_COUNT, msgsD.getMessageCount());
1:d884ba2: 
1:d884ba2:     }
1:d884ba2: 
1:d884ba2: 
1:d884ba2: }
============================================================================
author:Timothy A. Bish
-------------------------------------------------------------------------------
commit:ef24cc9
author:Bosanac Dejan
-------------------------------------------------------------------------------
commit:d884ba2
/////////////////////////////////////////////////////////////////////////
1: /**
1:  * Licensed to the Apache Software Foundation (ASF) under one or more
1:  * contributor license agreements.  See the NOTICE file distributed with
1:  * this work for additional information regarding copyright ownership.
1:  * The ASF licenses this file to You under the Apache License, Version 2.0
1:  * (the "License"); you may not use this file except in compliance with
1:  * the License.  You may obtain a copy of the License at
1:  *
1:  *      http://www.apache.org/licenses/LICENSE-2.0
1:  *
1:  * Unless required by applicable law or agreed to in writing, software
1:  * distributed under the License is distributed on an "AS IS" BASIS,
1:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:  * See the License for the specific language governing permissions and
1:  * limitations under the License.
1:  */
1: package org.apache.activemq.usecases;
1: 
1: import org.apache.activemq.JmsMultipleBrokersTestSupport;
1: import org.apache.activemq.util.MessageIdList;
1: import org.springframework.core.io.ClassPathResource;
1: 
1: import javax.jms.Destination;
1: import javax.jms.MessageConsumer;
1: 
1: public class TopicReplicationTest extends JmsMultipleBrokersTestSupport {
1: 
1:     public static final int MSG_COUNT = 10;
1: 
1:     public void testReplication() throws Exception {
1:         createBroker(new ClassPathResource("org/apache/activemq/usecases/replication-broker1.xml"));
1:         createBroker(new ClassPathResource("org/apache/activemq/usecases/replication-broker2.xml"));
1:         createBroker(new ClassPathResource("org/apache/activemq/usecases/replication-broker3.xml"));
1:         createBroker(new ClassPathResource("org/apache/activemq/usecases/replication-broker4.xml"));
1: 
1:         brokers.get("replication-broker1").broker.waitUntilStarted();
1:         brokers.get("replication-broker2").broker.waitUntilStarted();
1:         brokers.get("replication-broker3").broker.waitUntilStarted();
1:         brokers.get("replication-broker4").broker.waitUntilStarted();
1: 
1:         Destination dest = createDestination("replication", true);
1: 
1:         // Setup consumers
1:         MessageConsumer clientA = createConsumer("replication-broker2", dest);
1:         MessageConsumer clientB = createConsumer("replication-broker3", dest);
1:         MessageConsumer clientC = createConsumer("replication-broker4", dest);
1:         MessageConsumer clientD = createConsumer("replication-broker4", dest);
1: 
1:         //let consumers propogate around the network
1:         Thread.sleep(2000);
1: 
1:         // Get message count
1:         MessageIdList msgsA = getConsumerMessages("replication-broker2", clientA);
1:         MessageIdList msgsB = getConsumerMessages("replication-broker3", clientB);
1:         MessageIdList msgsC = getConsumerMessages("replication-broker4", clientC);
1:         MessageIdList msgsD = getConsumerMessages("replication-broker4", clientD);
1: 
1: 
1: 
1:         // send messages to broker1
1:         sendMessages("replication-broker1", dest, MSG_COUNT);
1: 
1: 
1:         msgsA.waitForMessagesToArrive(MSG_COUNT);
1:         msgsB.waitForMessagesToArrive(MSG_COUNT);
1:         msgsC.waitForMessagesToArrive(MSG_COUNT);
1:         msgsD.waitForMessagesToArrive(MSG_COUNT);
1: 
1:         assertEquals(MSG_COUNT, msgsA.getMessageCount());
1:         assertEquals(MSG_COUNT, msgsB.getMessageCount());
1:         assertEquals(MSG_COUNT, msgsC.getMessageCount());
1:         assertEquals(MSG_COUNT, msgsD.getMessageCount());
1: 
1:         // send messages to broker4
1:         sendMessages("replication-broker4", dest, MSG_COUNT);
1: 
1:         msgsA.waitForMessagesToArrive(2 * MSG_COUNT);
1:         msgsB.waitForMessagesToArrive(2 * MSG_COUNT);
1:         msgsC.waitForMessagesToArrive(2 * MSG_COUNT);
1:         msgsD.waitForMessagesToArrive(2 * MSG_COUNT);
1: 
1:         assertEquals(2 * MSG_COUNT, msgsA.getMessageCount());
1:         assertEquals(2 * MSG_COUNT, msgsB.getMessageCount());
1:         assertEquals(2 * MSG_COUNT, msgsC.getMessageCount());
1:         assertEquals(2 * MSG_COUNT, msgsD.getMessageCount());
1: 
1:         // send messages to broker3
1:         sendMessages("replication-broker3", dest, MSG_COUNT);
1: 
1:         msgsA.waitForMessagesToArrive(3 * MSG_COUNT);
1:         msgsB.waitForMessagesToArrive(3 * MSG_COUNT);
1:         msgsC.waitForMessagesToArrive(3 * MSG_COUNT);
1:         msgsD.waitForMessagesToArrive(3 * MSG_COUNT);
1: 
1:         assertEquals(3 * MSG_COUNT, msgsA.getMessageCount());
1:         assertEquals(3 * MSG_COUNT, msgsB.getMessageCount());
1:         assertEquals(3 * MSG_COUNT, msgsC.getMessageCount());
1:         assertEquals(3 * MSG_COUNT, msgsD.getMessageCount());
1: 
1:         // send messages to broker2
1:         sendMessages("replication-broker2", dest, MSG_COUNT);
1: 
1:         msgsA.waitForMessagesToArrive(4 * MSG_COUNT);
1:         msgsB.waitForMessagesToArrive(4 * MSG_COUNT);
1:         msgsC.waitForMessagesToArrive(4 * MSG_COUNT);
1:         msgsD.waitForMessagesToArrive(4 * MSG_COUNT);
1: 
1:         assertEquals(4 * MSG_COUNT, msgsA.getMessageCount());
1:         assertEquals(4 * MSG_COUNT, msgsB.getMessageCount());
1:         assertEquals(4 * MSG_COUNT, msgsC.getMessageCount());
1:         assertEquals(4 * MSG_COUNT, msgsD.getMessageCount());
1: 
1:     }
1: 
1: 
1: }
============================================================================