1:df06bda: /**
1:df06bda:  * Licensed to the Apache Software Foundation (ASF) under one or more
1:df06bda:  * contributor license agreements.  See the NOTICE file distributed with
1:df06bda:  * this work for additional information regarding copyright ownership.
1:df06bda:  * The ASF licenses this file to You under the Apache License, Version 2.0
1:df06bda:  * (the "License"); you may not use this file except in compliance with
1:df06bda:  * the License.  You may obtain a copy of the License at
1:df06bda:  *
1:df06bda:  *      http://www.apache.org/licenses/LICENSE-2.0
1:df06bda:  *
1:df06bda:  * Unless required by applicable law or agreed to in writing, software
1:df06bda:  * distributed under the License is distributed on an "AS IS" BASIS,
1:df06bda:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:df06bda:  * See the License for the specific language governing permissions and
1:df06bda:  * limitations under the License.
1:df06bda:  */
1:df06bda: package org.apache.activemq.bugs;
1:df06bda: 
1:df06bda: import static org.junit.Assert.assertNotNull;
1:df06bda: 
1:df06bda: import java.io.File;
1:df06bda: import java.io.IOException;
1:df06bda: import java.net.ServerSocket;
1:df06bda: 
1:df06bda: import javax.jms.Connection;
1:df06bda: import javax.jms.DeliveryMode;
1:df06bda: import javax.jms.JMSException;
1:df06bda: import javax.jms.MessageConsumer;
1:df06bda: import javax.jms.MessageProducer;
1:df06bda: import javax.jms.Queue;
1:df06bda: import javax.jms.Session;
1:df06bda: import javax.net.ServerSocketFactory;
1:df06bda: 
1:df06bda: import org.apache.activemq.ActiveMQConnectionFactory;
1:df06bda: import org.apache.activemq.broker.BrokerService;
1:df06bda: import org.apache.activemq.broker.TransportConnector;
1:df06bda: import org.apache.activemq.leveldb.LevelDBStore;
1:df06bda: import org.junit.After;
1:df06bda: import org.junit.Before;
1:df06bda: import org.junit.Rule;
1:df06bda: import org.junit.Test;
1:df06bda: import org.junit.rules.TestName;
1:df06bda: 
1:df06bda: public class AMQ5816Test {
1:df06bda: 
1:df06bda:     private static BrokerService brokerService;
1:df06bda: 
1:df06bda:     @Rule public TestName name = new TestName();
1:df06bda: 
1:df06bda:     private File dataDirFile;
1:df06bda:     private String connectionURI;
1:df06bda: 
1:df06bda:     @Before
1:df06bda:     public void setUp() throws Exception {
1:df06bda: 
1:df06bda:         dataDirFile = new File("target/" + name.getMethodName());
1:df06bda: 
1:df06bda:         brokerService = new BrokerService();
1:df06bda:         brokerService.setBrokerName("LevelDBBroker");
1:df06bda:         brokerService.setPersistent(true);
1:df06bda:         brokerService.setUseJmx(false);
1:df06bda:         brokerService.setAdvisorySupport(false);
1:df06bda:         brokerService.setDeleteAllMessagesOnStartup(true);
1:df06bda:         brokerService.setDataDirectoryFile(dataDirFile);
1:df06bda: 
1:df06bda:         TransportConnector connector = brokerService.addConnector("http://0.0.0.0:" + getFreePort());
1:df06bda: 
1:df06bda:         LevelDBStore persistenceFactory = new LevelDBStore();
1:df06bda:         persistenceFactory.setDirectory(dataDirFile);
1:df06bda:         brokerService.setPersistenceAdapter(persistenceFactory);
1:df06bda:         brokerService.start();
1:df06bda:         brokerService.waitUntilStarted();
1:df06bda: 
1:df06bda:         connectionURI = connector.getPublishableConnectString();
1:df06bda:     }
1:df06bda: 
1:df06bda:     /**
1:df06bda:      * @throws java.lang.Exception
1:df06bda:      */
1:df06bda:     @After
1:df06bda:     public void tearDown() throws Exception {
1:df06bda:         brokerService.stop();
1:df06bda:         brokerService.waitUntilStopped();
1:df06bda:     }
1:df06bda: 
1:df06bda:     @Test
1:df06bda:     public void testSendPersistentMessage() throws JMSException {
1:df06bda:         ActiveMQConnectionFactory factory = new ActiveMQConnectionFactory(connectionURI);
1:df06bda:         Connection connection = factory.createConnection();
1:df06bda:         connection.start();
1:df06bda: 
1:df06bda:         Session session = connection.createSession(false, Session.AUTO_ACKNOWLEDGE);
1:df06bda:         Queue queue = session.createQueue(name.getMethodName());
1:df06bda:         MessageProducer producer = session.createProducer(queue);
1:df06bda:         MessageConsumer consumer = session.createConsumer(queue);
1:df06bda: 
1:df06bda:         producer.setDeliveryMode(DeliveryMode.PERSISTENT);
1:df06bda:         producer.send(session.createTextMessage());
1:df06bda: 
1:df06bda:         assertNotNull(consumer.receive(5000));
1:df06bda:     }
1:df06bda: 
1:df06bda:     protected int getFreePort() {
1:df06bda:         int port = 8161;
1:df06bda:         ServerSocket ss = null;
1:df06bda: 
1:df06bda:         try {
1:df06bda:             ss = ServerSocketFactory.getDefault().createServerSocket(0);
1:df06bda:             port = ss.getLocalPort();
1:df06bda:         } catch (IOException e) { // ignore
1:df06bda:         } finally {
1:df06bda:             try {
1:df06bda:                 if (ss != null ) {
1:df06bda:                     ss.close();
1:df06bda:                 }
1:df06bda:             } catch (IOException e) { // ignore
1:df06bda:             }
1:df06bda:         }
1:df06bda: 
1:df06bda:         return port;
1:df06bda:     }
1:df06bda: }
============================================================================
author:Timothy Bish
-------------------------------------------------------------------------------
commit:df06bda
/////////////////////////////////////////////////////////////////////////
1: /**
1:  * Licensed to the Apache Software Foundation (ASF) under one or more
1:  * contributor license agreements.  See the NOTICE file distributed with
1:  * this work for additional information regarding copyright ownership.
1:  * The ASF licenses this file to You under the Apache License, Version 2.0
1:  * (the "License"); you may not use this file except in compliance with
1:  * the License.  You may obtain a copy of the License at
1:  *
1:  *      http://www.apache.org/licenses/LICENSE-2.0
1:  *
1:  * Unless required by applicable law or agreed to in writing, software
1:  * distributed under the License is distributed on an "AS IS" BASIS,
1:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:  * See the License for the specific language governing permissions and
1:  * limitations under the License.
1:  */
1: package org.apache.activemq.bugs;
1: 
1: import static org.junit.Assert.assertNotNull;
1: 
1: import java.io.File;
1: import java.io.IOException;
1: import java.net.ServerSocket;
1: 
1: import javax.jms.Connection;
1: import javax.jms.DeliveryMode;
1: import javax.jms.JMSException;
1: import javax.jms.MessageConsumer;
1: import javax.jms.MessageProducer;
1: import javax.jms.Queue;
1: import javax.jms.Session;
1: import javax.net.ServerSocketFactory;
1: 
1: import org.apache.activemq.ActiveMQConnectionFactory;
1: import org.apache.activemq.broker.BrokerService;
1: import org.apache.activemq.broker.TransportConnector;
1: import org.apache.activemq.leveldb.LevelDBStore;
1: import org.junit.After;
1: import org.junit.Before;
1: import org.junit.Rule;
1: import org.junit.Test;
1: import org.junit.rules.TestName;
1: 
1: public class AMQ5816Test {
1: 
1:     private static BrokerService brokerService;
1: 
1:     @Rule public TestName name = new TestName();
1: 
1:     private File dataDirFile;
1:     private String connectionURI;
1: 
1:     @Before
1:     public void setUp() throws Exception {
1: 
1:         dataDirFile = new File("target/" + name.getMethodName());
1: 
1:         brokerService = new BrokerService();
1:         brokerService.setBrokerName("LevelDBBroker");
1:         brokerService.setPersistent(true);
1:         brokerService.setUseJmx(false);
1:         brokerService.setAdvisorySupport(false);
1:         brokerService.setDeleteAllMessagesOnStartup(true);
1:         brokerService.setDataDirectoryFile(dataDirFile);
1: 
1:         TransportConnector connector = brokerService.addConnector("http://0.0.0.0:" + getFreePort());
1: 
1:         LevelDBStore persistenceFactory = new LevelDBStore();
1:         persistenceFactory.setDirectory(dataDirFile);
1:         brokerService.setPersistenceAdapter(persistenceFactory);
1:         brokerService.start();
1:         brokerService.waitUntilStarted();
1: 
1:         connectionURI = connector.getPublishableConnectString();
1:     }
1: 
1:     /**
1:      * @throws java.lang.Exception
1:      */
1:     @After
1:     public void tearDown() throws Exception {
1:         brokerService.stop();
1:         brokerService.waitUntilStopped();
1:     }
1: 
1:     @Test
1:     public void testSendPersistentMessage() throws JMSException {
1:         ActiveMQConnectionFactory factory = new ActiveMQConnectionFactory(connectionURI);
1:         Connection connection = factory.createConnection();
1:         connection.start();
1: 
1:         Session session = connection.createSession(false, Session.AUTO_ACKNOWLEDGE);
1:         Queue queue = session.createQueue(name.getMethodName());
1:         MessageProducer producer = session.createProducer(queue);
1:         MessageConsumer consumer = session.createConsumer(queue);
1: 
1:         producer.setDeliveryMode(DeliveryMode.PERSISTENT);
1:         producer.send(session.createTextMessage());
1: 
1:         assertNotNull(consumer.receive(5000));
1:     }
1: 
1:     protected int getFreePort() {
1:         int port = 8161;
1:         ServerSocket ss = null;
1: 
1:         try {
1:             ss = ServerSocketFactory.getDefault().createServerSocket(0);
1:             port = ss.getLocalPort();
1:         } catch (IOException e) { // ignore
1:         } finally {
1:             try {
1:                 if (ss != null ) {
1:                     ss.close();
1:                 }
1:             } catch (IOException e) { // ignore
1:             }
1:         }
1: 
1:         return port;
1:     }
1: }
============================================================================