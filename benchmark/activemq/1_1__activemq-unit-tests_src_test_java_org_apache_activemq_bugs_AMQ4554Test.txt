1:3ff2d92: /**
1:3ff2d92:  * Licensed to the Apache Software Foundation (ASF) under one or more
1:3ff2d92:  * contributor license agreements.  See the NOTICE file distributed with
1:3ff2d92:  * this work for additional information regarding copyright ownership.
1:3ff2d92:  * The ASF licenses this file to You under the Apache License, Version 2.0
1:3ff2d92:  * (the "License"); you may not use this file except in compliance with
1:3ff2d92:  * the License.  You may obtain a copy of the License at
1:3ff2d92:  *
1:3ff2d92:  *      http://www.apache.org/licenses/LICENSE-2.0
1:3ff2d92:  *
1:3ff2d92:  * Unless required by applicable law or agreed to in writing, software
1:3ff2d92:  * distributed under the License is distributed on an "AS IS" BASIS,
1:3ff2d92:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:3ff2d92:  * See the License for the specific language governing permissions and
1:3ff2d92:  * limitations under the License.
1:3ff2d92:  */
1:3ff2d92: package org.apache.activemq.bugs;
1:3ff2d92: 
1:3ff2d92: import javax.jms.Connection;
1:3ff2d92: import javax.jms.Message;
1:3ff2d92: import javax.jms.MessageConsumer;
1:3ff2d92: import javax.jms.MessageProducer;
1:3ff2d92: import javax.jms.Session;
1:3ff2d92: import javax.jms.TextMessage;
1:3ff2d92: 
1:3ff2d92: import junit.framework.Test;
1:3ff2d92: import junit.framework.TestCase;
1:3ff2d92: import junit.framework.TestSuite;
1:3ff2d92: 
1:3ff2d92: import org.apache.activemq.ActiveMQConnectionFactory;
1:3ff2d92: import org.apache.activemq.broker.BrokerService;
1:3ff2d92: import org.slf4j.Logger;
1:3ff2d92: import org.slf4j.LoggerFactory;
1:3ff2d92: 
1:3ff2d92: /**
1:3ff2d92:  * Unit test for simple App.
1:3ff2d92:  */
1:3ff2d92: public class AMQ4554Test extends TestCase {
1:3ff2d92: 
1:3ff2d92:     private final Logger LOG = LoggerFactory.getLogger(AMQ4554Test.class);
1:3ff2d92: 
1:3ff2d92:     private String connectionURI;
1:3ff2d92:     private BrokerService broker;
1:3ff2d92: 
1:3ff2d92:     @Override
1:3ff2d92:     protected void setUp() throws Exception {
1:3ff2d92:         super.setUp();
1:3ff2d92:         broker = new BrokerService();
1:3ff2d92:         connectionURI = broker.addConnector("tcp://0.0.0.0:0?maximumConnections=1").getPublishableConnectString();
1:3ff2d92:         broker.setPersistent(false);
1:3ff2d92:         broker.start();
1:3ff2d92:     }
1:3ff2d92: 
1:3ff2d92:     @Override
1:3ff2d92:     protected void tearDown() throws Exception {
1:3ff2d92:         broker.stop();
1:3ff2d92:         super.tearDown();
1:3ff2d92:     }
1:3ff2d92: 
1:3ff2d92:     /**
1:3ff2d92:      * Create the test case
1:3ff2d92:      *
1:3ff2d92:      * @param testName
1:3ff2d92:      *            name of the test case
1:3ff2d92:      */
1:3ff2d92:     public AMQ4554Test(String testName) {
1:3ff2d92:         super(testName);
1:3ff2d92:     }
1:3ff2d92: 
1:3ff2d92:     /**
1:3ff2d92:      * @return the suite of tests being tested
1:3ff2d92:      */
1:3ff2d92:     public static Test suite() {
1:3ff2d92:         return new TestSuite(AMQ4554Test.class);
1:3ff2d92:     }
1:3ff2d92: 
1:3ff2d92:     public void testMSXProducerTXID() throws Exception {
1:3ff2d92: 
1:3ff2d92:         ActiveMQConnectionFactory factory = new ActiveMQConnectionFactory(connectionURI);
1:3ff2d92:         Connection connection = factory.createConnection();
1:3ff2d92:         connection.start();
1:3ff2d92: 
1:3ff2d92:         Session producerSession = connection.createSession(true, Session.SESSION_TRANSACTED);
1:3ff2d92:         MessageProducer producer = producerSession.createProducer(producerSession.createQueue("myQueue"));
1:3ff2d92:         TextMessage producerMessage = producerSession.createTextMessage("Test Message");
1:3ff2d92:         producer.send(producerMessage);
1:3ff2d92:         producer.close();
1:3ff2d92:         producerSession.commit();
1:3ff2d92:         producerSession.close();
1:3ff2d92: 
1:3ff2d92:         Session consumerSession = connection.createSession(true, Session.SESSION_TRANSACTED);
1:3ff2d92:         MessageConsumer consumer = consumerSession.createConsumer(consumerSession.createQueue("myQueue"));
1:3ff2d92:         Message consumerMessage = consumer.receive(1000);
1:3ff2d92:         try {
1:3ff2d92:             String txId = consumerMessage.getStringProperty("JMSXProducerTXID");
1:3ff2d92:             assertNotNull(txId);
1:3ff2d92:         } catch(Exception e) {
1:3ff2d92:             LOG.info("Caught Exception that was not expected:", e);
1:3ff2d92:             fail("Should not throw");
1:3ff2d92:         }
1:3ff2d92:         consumer.close();
1:3ff2d92:         consumerSession.commit();
1:3ff2d92:         consumerSession.close();
1:3ff2d92:         connection.close();
1:3ff2d92:     }
1:3ff2d92: 
1:3ff2d92: }
============================================================================
author:Timothy A. Bish
-------------------------------------------------------------------------------
commit:3ff2d92
/////////////////////////////////////////////////////////////////////////
1: /**
1:  * Licensed to the Apache Software Foundation (ASF) under one or more
1:  * contributor license agreements.  See the NOTICE file distributed with
1:  * this work for additional information regarding copyright ownership.
1:  * The ASF licenses this file to You under the Apache License, Version 2.0
1:  * (the "License"); you may not use this file except in compliance with
1:  * the License.  You may obtain a copy of the License at
1:  *
1:  *      http://www.apache.org/licenses/LICENSE-2.0
1:  *
1:  * Unless required by applicable law or agreed to in writing, software
1:  * distributed under the License is distributed on an "AS IS" BASIS,
1:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:  * See the License for the specific language governing permissions and
1:  * limitations under the License.
1:  */
1: package org.apache.activemq.bugs;
1: 
1: import javax.jms.Connection;
1: import javax.jms.Message;
1: import javax.jms.MessageConsumer;
1: import javax.jms.MessageProducer;
1: import javax.jms.Session;
1: import javax.jms.TextMessage;
1: 
1: import junit.framework.Test;
1: import junit.framework.TestCase;
1: import junit.framework.TestSuite;
1: 
1: import org.apache.activemq.ActiveMQConnectionFactory;
1: import org.apache.activemq.broker.BrokerService;
1: import org.slf4j.Logger;
1: import org.slf4j.LoggerFactory;
1: 
1: /**
1:  * Unit test for simple App.
1:  */
1: public class AMQ4554Test extends TestCase {
1: 
1:     private final Logger LOG = LoggerFactory.getLogger(AMQ4554Test.class);
1: 
1:     private String connectionURI;
1:     private BrokerService broker;
1: 
1:     @Override
1:     protected void setUp() throws Exception {
1:         super.setUp();
1:         broker = new BrokerService();
1:         connectionURI = broker.addConnector("tcp://0.0.0.0:0?maximumConnections=1").getPublishableConnectString();
1:         broker.setPersistent(false);
1:         broker.start();
1:     }
1: 
1:     @Override
1:     protected void tearDown() throws Exception {
1:         broker.stop();
1:         super.tearDown();
1:     }
1: 
1:     /**
1:      * Create the test case
1:      *
1:      * @param testName
1:      *            name of the test case
1:      */
1:     public AMQ4554Test(String testName) {
1:         super(testName);
1:     }
1: 
1:     /**
1:      * @return the suite of tests being tested
1:      */
1:     public static Test suite() {
1:         return new TestSuite(AMQ4554Test.class);
1:     }
1: 
1:     public void testMSXProducerTXID() throws Exception {
1: 
1:         ActiveMQConnectionFactory factory = new ActiveMQConnectionFactory(connectionURI);
1:         Connection connection = factory.createConnection();
1:         connection.start();
1: 
1:         Session producerSession = connection.createSession(true, Session.SESSION_TRANSACTED);
1:         MessageProducer producer = producerSession.createProducer(producerSession.createQueue("myQueue"));
1:         TextMessage producerMessage = producerSession.createTextMessage("Test Message");
1:         producer.send(producerMessage);
1:         producer.close();
1:         producerSession.commit();
1:         producerSession.close();
1: 
1:         Session consumerSession = connection.createSession(true, Session.SESSION_TRANSACTED);
1:         MessageConsumer consumer = consumerSession.createConsumer(consumerSession.createQueue("myQueue"));
1:         Message consumerMessage = consumer.receive(1000);
1:         try {
1:             String txId = consumerMessage.getStringProperty("JMSXProducerTXID");
1:             assertNotNull(txId);
1:         } catch(Exception e) {
1:             LOG.info("Caught Exception that was not expected:", e);
1:             fail("Should not throw");
1:         }
1:         consumer.close();
1:         consumerSession.commit();
1:         consumerSession.close();
1:         connection.close();
1:     }
1: 
1: }
============================================================================