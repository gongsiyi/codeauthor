1:d29ca2a: /**
1:57b4941:  * Licensed to the Apache Software Foundation (ASF) under one or more
1:57b4941:  * contributor license agreements.  See the NOTICE file distributed with
1:57b4941:  * this work for additional information regarding copyright ownership.
1:57b4941:  * The ASF licenses this file to You under the Apache License, Version 2.0
1:57b4941:  * (the "License"); you may not use this file except in compliance with
1:57b4941:  * the License.  You may obtain a copy of the License at
3:d29ca2a:  *
1:230a86c:  *      http://www.apache.org/licenses/LICENSE-2.0
1:d29ca2a:  *
1:d29ca2a:  * Unless required by applicable law or agreed to in writing, software
1:d29ca2a:  * distributed under the License is distributed on an "AS IS" BASIS,
1:d29ca2a:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:d29ca2a:  * See the License for the specific language governing permissions and
1:d29ca2a:  * limitations under the License.
1:d29ca2a:  */
1:d29ca2a: package org.apache.activemq.broker;
4:d29ca2a: 
1:d29ca2a: import java.net.URI;
1:d29ca2a: import java.util.HashMap;
1:d29ca2a: import java.util.Map;
1:d29ca2a: 
1:230a86c: import org.apache.activemq.util.IntrospectionSupport;
1:230a86c: import org.apache.activemq.util.URISupport;
1:230a86c: import org.apache.activemq.util.URISupport.CompositeData;
1:230a86c: 
1:d29ca2a: /**
1:230a86c:  * Simple BrokerFactorySPI which using the brokerURI to extract the
1:230a86c:  * configuration parameters for the broker service. This directly configures the
1:230a86c:  * pojo model so there is no dependency on spring for configuration.
1:b0c2a40:  *
1:d29ca2a:  *
1:d29ca2a:  */
1:d29ca2a: public class DefaultBrokerFactory implements BrokerFactoryHandler {
1:d29ca2a: 
1:d29ca2a:     public BrokerService createBroker(URI brokerURI) throws Exception {
1:d29ca2a: 
1:d29ca2a:         CompositeData compositeData = URISupport.parseComposite(brokerURI);
1:ecf89a6:         Map<String, String> params = new HashMap<String, String>(compositeData.getParameters());
1:230a86c: 
1:d29ca2a:         BrokerService brokerService = new BrokerService();
1:d29ca2a:         IntrospectionSupport.setProperties(brokerService, params);
1:fa40250:         if (!params.isEmpty()) {
1:fa40250:             String msg = "There are " + params.size()
1:fa40250:                 + " Broker options that couldn't be set on the BrokerService."
1:fa40250:                 + " Check the options are spelled correctly."
1:fa40250:                 + " Unknown parameters=[" + params + "]."
1:fa40250:                 + " This BrokerService cannot be started.";
1:fa40250:             throw new IllegalArgumentException(msg);
1:fa40250:         }
1:d29ca2a: 
1:ecf89a6:         if (compositeData.getPath() != null) {
1:d29ca2a:             brokerService.setBrokerName(compositeData.getPath());
1:ecf89a6:         }
1:230a86c: 
1:d29ca2a:         URI[] components = compositeData.getComponents();
1:d29ca2a:         for (int i = 0; i < components.length; i++) {
1:230a86c:             if ("network".equals(components[i].getScheme())) {
1:d29ca2a:                 brokerService.addNetworkConnector(components[i].getSchemeSpecificPart());
1:230a86c:             } else if ("proxy".equals(components[i].getScheme())) {
1:d29ca2a:                 brokerService.addProxyConnector(components[i].getSchemeSpecificPart());
1:d29ca2a:             } else {
1:d29ca2a:                 brokerService.addConnector(components[i]);
1:d29ca2a:             }
1:d29ca2a:         }
1:d29ca2a:         return brokerService;
1:d29ca2a:     }
1:d29ca2a: 
1:d29ca2a: }
============================================================================
author:Hiram R. Chirino
-------------------------------------------------------------------------------
commit:58aca86
commit:b0c2a40
/////////////////////////////////////////////////////////////////////////
1:  * 
commit:ecf89a6
/////////////////////////////////////////////////////////////////////////
1:         Map<String, String> params = new HashMap<String, String>(compositeData.getParameters());
1:         if (compositeData.getPath() != null) {
1:         }
commit:230a86c
/////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////
1:  *      http://www.apache.org/licenses/LICENSE-2.0
/////////////////////////////////////////////////////////////////////////
1: import org.apache.activemq.util.IntrospectionSupport;
1: import org.apache.activemq.util.URISupport;
1: import org.apache.activemq.util.URISupport.CompositeData;
1: 
1:  * Simple BrokerFactorySPI which using the brokerURI to extract the
1:  * configuration parameters for the broker service. This directly configures the
1:  * pojo model so there is no dependency on spring for configuration.
/////////////////////////////////////////////////////////////////////////
1: 
0:         if (compositeData.getPath() != null)
1: 
1:             if ("network".equals(components[i].getScheme())) {
1:             } else if ("proxy".equals(components[i].getScheme())) {
commit:57b4941
/////////////////////////////////////////////////////////////////////////
1:  * Licensed to the Apache Software Foundation (ASF) under one or more
1:  * contributor license agreements.  See the NOTICE file distributed with
1:  * this work for additional information regarding copyright ownership.
1:  * The ASF licenses this file to You under the Apache License, Version 2.0
1:  * (the "License"); you may not use this file except in compliance with
1:  * the License.  You may obtain a copy of the License at
commit:48b4869
/////////////////////////////////////////////////////////////////////////
0:  * Copyright 2005-2006 The Apache Software Foundation
commit:d29ca2a
/////////////////////////////////////////////////////////////////////////
1: /**
1:  *
0:  * Copyright 2004 The Apache Software Foundation
1:  *
0:  * Licensed under the Apache License, Version 2.0 (the "License");
0:  * you may not use this file except in compliance with the License.
0:  * You may obtain a copy of the License at
1:  *
0:  * http://www.apache.org/licenses/LICENSE-2.0
1:  *
1:  * Unless required by applicable law or agreed to in writing, software
1:  * distributed under the License is distributed on an "AS IS" BASIS,
1:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:  * See the License for the specific language governing permissions and
1:  * limitations under the License.
1:  */
1: package org.apache.activemq.broker;
1: 
0: import org.apache.activemq.broker.BrokerFactory.BrokerFactoryHandler;
0: import org.apache.activemq.util.IntrospectionSupport;
0: import org.apache.activemq.util.URISupport;
0: import org.apache.activemq.util.URISupport.CompositeData;
1: 
1: import java.net.URI;
1: import java.util.HashMap;
1: import java.util.Map;
1: 
1: /**
0:  * Simple BrokerFactorySPI which using the brokerURI to extract the configuration 
0:  * parameters for the broker service.  This directly configures the pojo model
0:  * so there is no dependency on spring for configuration.
1:  * 
0:  * @version $Revision$
1:  */
1: public class DefaultBrokerFactory implements BrokerFactoryHandler {
1: 
1:     public BrokerService createBroker(URI brokerURI) throws Exception {
1: 
1:         CompositeData compositeData = URISupport.parseComposite(brokerURI);
0:         Map params = new HashMap(compositeData.getParameters());
1:                 
1:         BrokerService brokerService = new BrokerService();
1:         IntrospectionSupport.setProperties(brokerService, params);
0:         if( compositeData.getPath()!=null )
1:             brokerService.setBrokerName(compositeData.getPath());
1:         
1:         URI[] components = compositeData.getComponents();
1:         for (int i = 0; i < components.length; i++) {
0:             if( "network".equals(components[i].getScheme()) ) {
1:                 brokerService.addNetworkConnector(components[i].getSchemeSpecificPart());
0:             } else if( "proxy".equals(components[i].getScheme()) ) {
1:                 brokerService.addProxyConnector(components[i].getSchemeSpecificPart());
1:             } else {
1:                 brokerService.addConnector(components[i]);
1:             }
1:         }
1:         
0:         // TODO we want folks to be able to add other connectors and start the broker afterwards
0:         //brokerService.start();
1:         return brokerService;
1:     }
1: 
1: }
author:Timothy A. Bish
-------------------------------------------------------------------------------
commit:fa40250
/////////////////////////////////////////////////////////////////////////
0:  *
0:  *
/////////////////////////////////////////////////////////////////////////
1:         if (!params.isEmpty()) {
1:             String msg = "There are " + params.size()
1:                 + " Broker options that couldn't be set on the BrokerService."
1:                 + " Check the options are spelled correctly."
1:                 + " Unknown parameters=[" + params + "]."
1:                 + " This BrokerService cannot be started.";
1:             throw new IllegalArgumentException(msg);
1:         }
0: 
author:James Strachan
-------------------------------------------------------------------------------
commit:a640190
/////////////////////////////////////////////////////////////////////////
0: import org.apache.activemq.broker.BrokerFactoryHandler;
/////////////////////////////////////////////////////////////////////////
============================================================================