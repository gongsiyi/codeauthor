2:b08ae50: /**
1:b08ae50:  * Licensed to the Apache Software Foundation (ASF) under one or more
1:b08ae50:  * contributor license agreements.  See the NOTICE file distributed with
1:b08ae50:  * this work for additional information regarding copyright ownership.
1:b08ae50:  * The ASF licenses this file to You under the Apache License, Version 2.0
1:b08ae50:  * (the "License"); you may not use this file except in compliance with
1:b08ae50:  * the License.  You may obtain a copy of the License at
1:b08ae50:  *
1:b08ae50:  *      http://www.apache.org/licenses/LICENSE-2.0
1:b08ae50:  *
1:b08ae50:  * Unless required by applicable law or agreed to in writing, software
1:b08ae50:  * distributed under the License is distributed on an "AS IS" BASIS,
1:b08ae50:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:b08ae50:  * See the License for the specific language governing permissions and
1:b08ae50:  * limitations under the License.
2:b08ae50:  */
1:b08ae50: package org.apache.activemq.blob;
1:af159dd: 
1:8c4ded4: import java.io.File;
1:8c4ded4: import java.io.FileWriter;
1:b08ae50: import java.io.InputStream;
1:af159dd: import java.net.MalformedURLException;
1:b08ae50: import java.net.URL;
1:a438496: 
1:b08ae50: import javax.jms.JMSException;
1:a438496: 
1:b08ae50: import org.apache.activemq.command.ActiveMQBlobMessage;
1:a438496: 
1:3af93f1: public class FTPBlobDownloadStrategyTest extends FTPTestSupport {
1:a438496: 
1:a438496:     final int FILE_SIZE = Short.MAX_VALUE * 10;
1:a438496: 
1:3af93f1:     public void testDownload() throws Exception {
1:3af93f1:         setConnection();
1:c7d559f: 
1:3af93f1:         // create file
1:a438496:         File uploadFile = new File(ftpHomeDirFile, "test.txt");
1:a438496:         FileWriter wrt = new FileWriter(uploadFile);
1:a438496: 
1:a438496:         wrt.write("hello world");
1:a438496: 
1:a438496:         for(int ix = 0; ix < FILE_SIZE; ++ix ) {
1:a438496:             wrt.write("a");
1:a438496:         }
1:a438496: 
1:a438496:         wrt.close();
1:c7d559f: 
1:a438496:         ActiveMQBlobMessage message = new ActiveMQBlobMessage();
1:af159dd:         BlobDownloadStrategy strategy = new FTPBlobDownloadStrategy(new BlobTransferPolicy());
1:a438496:         InputStream stream;
1:a438496:         try {
1:a438496:             message.setURL(new URL(ftpUrl + "test.txt"));
1:a438496:             stream = strategy.getInputStream(message);
1:a438496:             int i = stream.read();
1:a438496:             StringBuilder sb = new StringBuilder(2048);
1:a438496:             while(i != -1) {
1:a438496:                 sb.append((char)i);
1:a438496:                 i = stream.read();
1:a438496:             }
1:c7d559f:             assertEquals("hello world", sb.toString().substring(0, "hello world".length()));
1:c7d559f:             assertEquals(FILE_SIZE, sb.toString().substring("hello world".length()).length());
1:a438496: 
1:af159dd:             assertTrue(uploadFile.exists());
1:af159dd:             strategy.deleteFile(message);
1:af159dd:             assertFalse(uploadFile.exists());
1:c7d559f: 
1:a438496:         } catch (Exception e) {
1:a438496:             e.printStackTrace();
1:c7d559f:             assertTrue(false);
1:a438496:         }
1:a438496:     }
1:a438496: 
1:af159dd:     public void testWrongAuthentification() throws MalformedURLException {
1:a438496:         ActiveMQBlobMessage message = new ActiveMQBlobMessage();
1:af159dd:         BlobDownloadStrategy strategy = new FTPBlobDownloadStrategy(new BlobTransferPolicy());
1:a438496:         try {
1:a438496:             message.setURL(new URL("ftp://" + userNamePass + "_wrong:" + userNamePass + "@localhost:"	+ ftpPort + "/ftptest/"));
1:a438496:             strategy.getInputStream(message);
1:a438496:         } catch(JMSException e) {
1:c7d559f:             assertEquals("Wrong Exception", "Cant Authentificate to FTP-Server", e.getMessage());
1:a438496:             return;
1:a438496:         } catch(Exception e) {
1:a438496:             System.out.println(e);
1:c7d559f:             assertTrue("Wrong Exception "+ e, false);
1:a438496:             return;
1:a438496:         }
1:a438496: 
1:c7d559f:         assertTrue("Expect Exception", false);
1:a438496:     }
1:a438496: 
1:af159dd:     public void testWrongFTPPort() throws MalformedURLException {
1:a438496:         ActiveMQBlobMessage message = new ActiveMQBlobMessage();
1:af159dd:         BlobDownloadStrategy strategy = new FTPBlobDownloadStrategy(new BlobTransferPolicy());
1:a438496:         try {
1:a438496:             message.setURL(new URL("ftp://" + userNamePass + ":" + userNamePass + "@localhost:"	+ 422 + "/ftptest/"));
1:a438496:             strategy.getInputStream(message);
1:a438496:         } catch(JMSException e) {
1:c7d559f:             assertEquals("Wrong Exception", "Problem connecting the FTP-server", e.getMessage());
1:a438496:             return;
1:a438496:         } catch(Exception e) {
1:a438496:             e.printStackTrace();
1:c7d559f:             assertTrue("Wrong Exception "+ e, false);
1:a438496:             return;
1:a438496:         }
1:a438496: 
1:c7d559f:         assertTrue("Expect Exception", false);
1:a438496:     }
1:8c4ded4: }
============================================================================
author:Timothy A. Bish
-------------------------------------------------------------------------------
commit:c7d559f
/////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////
1: 
/////////////////////////////////////////////////////////////////////////
1: 
/////////////////////////////////////////////////////////////////////////
1:             assertEquals("hello world", sb.toString().substring(0, "hello world".length()));
1:             assertEquals(FILE_SIZE, sb.toString().substring("hello world".length()).length());
1: 
1:             assertTrue(false);
/////////////////////////////////////////////////////////////////////////
1:             assertEquals("Wrong Exception", "Cant Authentificate to FTP-Server", e.getMessage());
1:             assertTrue("Wrong Exception "+ e, false);
1:         assertTrue("Expect Exception", false);
/////////////////////////////////////////////////////////////////////////
1:             assertEquals("Wrong Exception", "Problem connecting the FTP-server", e.getMessage());
1:             assertTrue("Wrong Exception "+ e, false);
1:         assertTrue("Expect Exception", false);
commit:ef24cc9
commit:a438496
/////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////
1: 
0:     Mockery context = null;
0:     int ftpPort;
0:     String ftpUrl;
1:     final int FILE_SIZE = Short.MAX_VALUE * 10;
0:     protected void setUp() throws Exception {
0:         final File ftpHomeDirFile = new File("target/FTPBlobTest/ftptest");
0:         ftpHomeDirFile.mkdirs();
0:         ftpHomeDirFile.getParentFile().deleteOnExit();
0:         FtpServerFactory serverFactory = new FtpServerFactory();
0:         ListenerFactory factory = new ListenerFactory();
1: 
0:         PropertiesUserManagerFactory userManagerFactory = new PropertiesUserManagerFactory();
0:         UserManager userManager = userManagerFactory.createUserManager();
1: 
0:         BaseUser user = new BaseUser();
1: 
0:         serverFactory.setUserManager(userManager);
0:         factory.setPort(0);
0:         serverFactory.addListener(ftpServerListenerName, factory
0:                 .createListener());
0:         server = serverFactory.createServer();
0:         server.start();
0:         ftpPort = serverFactory.getListener(ftpServerListenerName)
0:                 .getPort();
0:         ftpUrl = "ftp://" + userNamePass + ":" + userNamePass + "@localhost:"
0:                 + ftpPort + "/ftptest/";
1:         File uploadFile = new File(ftpHomeDirFile, "test.txt");
1:         FileWriter wrt = new FileWriter(uploadFile);
1: 
1:         wrt.write("hello world");
1: 
1:         for(int ix = 0; ix < FILE_SIZE; ++ix ) {
1:             wrt.write("a");
1:         }
1: 
1:         wrt.close();
1: 
0:     public void testDownload() {
1:         ActiveMQBlobMessage message = new ActiveMQBlobMessage();
0:         BlobDownloadStrategy strategy = new FTPBlobDownloadStrategy();
1:         InputStream stream;
1:         try {
1:             message.setURL(new URL(ftpUrl + "test.txt"));
1:             stream = strategy.getInputStream(message);
1:             int i = stream.read();
1:             StringBuilder sb = new StringBuilder(2048);
1:             while(i != -1) {
1:                 sb.append((char)i);
1:                 i = stream.read();
1:             }
0:             Assert.assertEquals("hello world", sb.toString().substring(0, "hello world".length()));
0:             Assert.assertEquals(FILE_SIZE, sb.toString().substring("hello world".length()).length());
1: 
1:         } catch (Exception e) {
1:             e.printStackTrace();
0:             Assert.assertTrue(false);
1:         }
1:     }
1: 
0:     public void testWrongAuthentification() {
1:         ActiveMQBlobMessage message = new ActiveMQBlobMessage();
0:         BlobDownloadStrategy strategy = new FTPBlobDownloadStrategy();
1:         try {
1:             message.setURL(new URL("ftp://" + userNamePass + "_wrong:" + userNamePass + "@localhost:"	+ ftpPort + "/ftptest/"));
1:             strategy.getInputStream(message);
1:         } catch(JMSException e) {
0:             Assert.assertEquals("Wrong Exception", "Cant Authentificate to FTP-Server", e.getMessage());
1:             return;
1:         } catch(Exception e) {
1:             System.out.println(e);
0:             Assert.assertTrue("Wrong Exception "+ e, false);
1:             return;
1:         }
1: 
0:         Assert.assertTrue("Expect Exception", false);
1:     }
1: 
0:     public void testWrongFTPPort() {
1:         ActiveMQBlobMessage message = new ActiveMQBlobMessage();
0:         BlobDownloadStrategy strategy = new FTPBlobDownloadStrategy();
1:         try {
1:             message.setURL(new URL("ftp://" + userNamePass + ":" + userNamePass + "@localhost:"	+ 422 + "/ftptest/"));
1:             strategy.getInputStream(message);
1:         } catch(JMSException e) {
0:             Assert.assertEquals("Wrong Exception", "Problem connecting the FTP-server", e.getMessage());
1:             return;
1:         } catch(Exception e) {
1:             e.printStackTrace();
0:             Assert.assertTrue("Wrong Exception "+ e, false);
1:             return;
1:         }
1: 
0:         Assert.assertTrue("Expect Exception", false);
1:     }
author:Bosanac Dejan
-------------------------------------------------------------------------------
commit:af159dd
/////////////////////////////////////////////////////////////////////////
1: import java.net.MalformedURLException;
/////////////////////////////////////////////////////////////////////////
1:         BlobDownloadStrategy strategy = new FTPBlobDownloadStrategy(new BlobTransferPolicy());
/////////////////////////////////////////////////////////////////////////
1:             assertTrue(uploadFile.exists());
1:             strategy.deleteFile(message);
1:             assertFalse(uploadFile.exists());
1:             
1:     public void testWrongAuthentification() throws MalformedURLException {
1:         BlobDownloadStrategy strategy = new FTPBlobDownloadStrategy(new BlobTransferPolicy());
/////////////////////////////////////////////////////////////////////////
1:     public void testWrongFTPPort() throws MalformedURLException {
1:         BlobDownloadStrategy strategy = new FTPBlobDownloadStrategy(new BlobTransferPolicy());
commit:3af93f1
/////////////////////////////////////////////////////////////////////////
1: public class FTPBlobDownloadStrategyTest extends FTPTestSupport {
1:     public void testDownload() throws Exception {
1:         setConnection();
0:         
1:         // create file
/////////////////////////////////////////////////////////////////////////
0:         
commit:8c4ded4
/////////////////////////////////////////////////////////////////////////
1: import java.io.File;
1: import java.io.FileWriter;
/////////////////////////////////////////////////////////////////////////
0: import org.apache.commons.net.ftp.FTPClient;
0: import org.apache.ftpserver.FtpServer;
0: import org.apache.ftpserver.FtpServerFactory;
0: import org.apache.ftpserver.ftplet.UserManager;
0: import org.apache.ftpserver.listener.ListenerFactory;
0: import org.apache.ftpserver.usermanager.PropertiesUserManagerFactory;
0: import org.apache.ftpserver.usermanager.impl.BaseUser;
0: import org.jmock.Mockery;
0:     private static final String ftpServerListenerName = "default";
0:     private FtpServer server;
0:     final static String userNamePass = "activemq";
0: 
0: 	Mockery context = null;
0: 	int ftpPort;
0: 	String ftpUrl;
0: 	
0: 	protected void setUp() throws Exception {     
0: 	    final File ftpHomeDirFile = new File("target/FTPBlobTest/ftptest");
0: 		ftpHomeDirFile.mkdirs();
0: 		ftpHomeDirFile.getParentFile().deleteOnExit();
0: 
0: 		FtpServerFactory serverFactory = new FtpServerFactory();
0: 		ListenerFactory factory = new ListenerFactory();
0: 
0: 		PropertiesUserManagerFactory userManagerFactory = new PropertiesUserManagerFactory();
0: 		UserManager userManager = userManagerFactory.createUserManager();
0: 
0: 		BaseUser user = new BaseUser();
0:         user.setName("activemq");
0:         user.setPassword("activemq");
0:         user.setHomeDirectory(ftpHomeDirFile.getParent());
0:         
0:         userManager.save(user);
0: 
0: 		serverFactory.setUserManager(userManager);
0: 		factory.setPort(0);
0: 		serverFactory.addListener(ftpServerListenerName, factory
0: 				.createListener());
0: 		server = serverFactory.createServer();
0: 		server.start();
0: 		ftpPort = serverFactory.getListener(ftpServerListenerName)
0: 				.getPort();
0: 
0: 		ftpUrl = "ftp://" + userNamePass + ":" + userNamePass + "@localhost:"
0: 				+ ftpPort + "/ftptest/";
0: 
0: 	    File uploadFile = new File(ftpHomeDirFile, "test.txt");
0: 	    FileWriter wrt = new FileWriter(uploadFile);
0: 	    wrt.write("hello world");
0: 	    wrt.close();
0: 
1:     }
0: 	
0: 	public void testDownload() {
0: 			message.setURL(new URL(ftpUrl + "test.txt"));
/////////////////////////////////////////////////////////////////////////
0: 	public void testWrongAuthentification() {
0: 			message.setURL(new URL("ftp://" + userNamePass + "_wrong:" + userNamePass + "@localhost:"	+ ftpPort + "/ftptest/"));
/////////////////////////////////////////////////////////////////////////
0: 	public void testWrongFTPPort() {
0: 			message.setURL(new URL("ftp://" + userNamePass + ":" + userNamePass + "@localhost:"	+ 422 + "/ftptest/"));
author:Robert Davies
-------------------------------------------------------------------------------
commit:b08ae50
/////////////////////////////////////////////////////////////////////////
1: /**
1:  * Licensed to the Apache Software Foundation (ASF) under one or more
1:  * contributor license agreements.  See the NOTICE file distributed with
1:  * this work for additional information regarding copyright ownership.
1:  * The ASF licenses this file to You under the Apache License, Version 2.0
1:  * (the "License"); you may not use this file except in compliance with
1:  * the License.  You may obtain a copy of the License at
1:  *
1:  *      http://www.apache.org/licenses/LICENSE-2.0
1:  *
1:  * Unless required by applicable law or agreed to in writing, software
1:  * distributed under the License is distributed on an "AS IS" BASIS,
1:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:  * See the License for the specific language governing permissions and
1:  * limitations under the License.
1:  */
1: package org.apache.activemq.blob;
0: 
1: import java.io.InputStream;
1: import java.net.URL;
0: 
1: import javax.jms.JMSException;
0: 
0: import junit.framework.Assert;
0: import junit.framework.TestCase;
0: 
1: import org.apache.activemq.command.ActiveMQBlobMessage;
0: 
1: /**
0:  * To start this test make sure an ftp server is running with
0:  * user: activemq and password: activemq. 
0:  * Also a file called test.txt with the content <b>hello world</b> must be in the ftptest directory.
1:  */
0: public class FTPBlobDownloadStrategyTest extends TestCase {
0: 	
0: 	public void xtestDownload() {
0: 		ActiveMQBlobMessage message = new ActiveMQBlobMessage();
0: 		BlobDownloadStrategy strategy = new FTPBlobDownloadStrategy();
0: 		InputStream stream;
0: 		try {
0: 			message.setURL(new URL("ftp://activemq:activemq@localhost/ftptest/test.txt"));
0: 			stream = strategy.getInputStream(message);
0: 			int i = stream.read();
0: 			StringBuilder sb = new StringBuilder(10);
0: 			while(i != -1) {
0: 				sb.append((char)i);
0: 				i = stream.read();
0: 			}
0: 			Assert.assertEquals("hello world", sb.toString());
0: 		} catch (Exception e) {
0: 			e.printStackTrace();
0: 			Assert.assertTrue(false);
0: 		}
0: 	}
0: 	
0: 	public void xtestWrongAuthentification() {
0: 		ActiveMQBlobMessage message = new ActiveMQBlobMessage();
0: 		BlobDownloadStrategy strategy = new FTPBlobDownloadStrategy();
0: 		try {
0: 			message.setURL(new URL("ftp://activemq:activemq_wrong@localhost/ftptest/test.txt"));
0: 			strategy.getInputStream(message);
0: 		} catch(JMSException e) {
0: 			Assert.assertEquals("Wrong Exception", "Cant Authentificate to FTP-Server", e.getMessage());
0: 			return;
0: 		} catch(Exception e) {
0: 			System.out.println(e);
0: 			Assert.assertTrue("Wrong Exception "+ e, false);
0: 			return;
0: 		}
0: 		
0: 		Assert.assertTrue("Expect Exception", false);
0: 	}
0: 	
0: 	public void xtestWrongFTPPort() {
0: 		ActiveMQBlobMessage message = new ActiveMQBlobMessage();
0: 		BlobDownloadStrategy strategy = new FTPBlobDownloadStrategy();
0: 		try {
0: 			message.setURL(new URL("ftp://activemq:activemq@localhost:442/ftptest/test.txt"));
0: 			strategy.getInputStream(message);
0: 		} catch(JMSException e) {
0: 			Assert.assertEquals("Wrong Exception", "Problem connecting the FTP-server", e.getMessage());
0: 			return;
0: 		} catch(Exception e) {
0: 			e.printStackTrace();
0: 			Assert.assertTrue("Wrong Exception "+ e, false);
0: 			return;
0: 		}
0: 		
0: 		Assert.assertTrue("Expect Exception", false);
0: 	}
0: 
0: }
============================================================================