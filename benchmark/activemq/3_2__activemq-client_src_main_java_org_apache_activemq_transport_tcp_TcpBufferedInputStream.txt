1:d29ca2a: /**
1:57b4941:  * Licensed to the Apache Software Foundation (ASF) under one or more
1:57b4941:  * contributor license agreements.  See the NOTICE file distributed with
1:57b4941:  * this work for additional information regarding copyright ownership.
1:57b4941:  * The ASF licenses this file to You under the Apache License, Version 2.0
1:57b4941:  * (the "License"); you may not use this file except in compliance with
1:57b4941:  * the License.  You may obtain a copy of the License at
5:d29ca2a:  *
1:230a86c:  *      http://www.apache.org/licenses/LICENSE-2.0
1:b0c2a40:  *
1:d29ca2a:  * Unless required by applicable law or agreed to in writing, software
1:d29ca2a:  * distributed under the License is distributed on an "AS IS" BASIS,
1:d29ca2a:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:d29ca2a:  * See the License for the specific language governing permissions and
1:d29ca2a:  * limitations under the License.
1:d29ca2a:  */
1:d29ca2a: package org.apache.activemq.transport.tcp;
1:d29ca2a: 
1:d29ca2a: import java.io.FilterInputStream;
1:d29ca2a: import java.io.IOException;
1:d29ca2a: import java.io.InputStream;
1:f812e34: 
1:d29ca2a: /**
1:d29ca2a:  * An optimized buffered input stream for Tcp
1:04ee70a:  *
1:04ee70a:  *
1:d29ca2a:  */
1:f812e34: public class TcpBufferedInputStream extends FilterInputStream {
1:f812e34:     private static final int DEFAULT_BUFFER_SIZE = 8192;
1:d29ca2a:     protected byte internalBuffer[];
1:d29ca2a:     protected int count;
1:d29ca2a:     protected int position;
1:d29ca2a: 
1:f812e34:     public TcpBufferedInputStream(InputStream in) {
1:f812e34:         this(in, DEFAULT_BUFFER_SIZE);
1:d29ca2a:     }
1:d29ca2a: 
1:f812e34:     public TcpBufferedInputStream(InputStream in, int size) {
1:d29ca2a:         super(in);
1:f812e34:         if (size <= 0) {
1:d29ca2a:             throw new IllegalArgumentException("Buffer size <= 0");
1:d29ca2a:         }
1:f812e34:         internalBuffer = new byte[size];
1:d29ca2a:     }
1:d29ca2a: 
1:8978ac0:     protected void fill() throws IOException {
1:f812e34:         byte[] buffer = internalBuffer;
1:ecf89a6:         count = 0;
1:ecf89a6:         position = 0;
1:f812e34:         int n = in.read(buffer, position, buffer.length - position);
1:fc00993:         if (n > 0) {
1:f812e34:             count = n + position;
1:fc00993:         }
1:d29ca2a:     }
1:d29ca2a: 
1:04ee70a:     @Override
1:f812e34:     public int read() throws IOException {
1:f812e34:         if (position >= count) {
1:d29ca2a:             fill();
1:fc00993:             if (position >= count) {
1:d29ca2a:                 return -1;
1:fc00993:             }
1:d29ca2a:         }
1:f812e34:         return internalBuffer[position++] & 0xff;
1:d29ca2a:     }
1:d29ca2a: 
1:f812e34:     private int readStream(byte[] b, int off, int len) throws IOException {
1:f812e34:         int avail = count - position;
1:f812e34:         if (avail <= 0) {
1:f812e34:             if (len >= internalBuffer.length) {
1:f812e34:                 return in.read(b, off, len);
1:d29ca2a:             }
1:d29ca2a:             fill();
1:f812e34:             avail = count - position;
1:fc00993:             if (avail <= 0) {
1:d29ca2a:                 return -1;
1:fc00993:             }
1:d29ca2a:         }
1:f812e34:         int cnt = (avail < len) ? avail : len;
1:f812e34:         System.arraycopy(internalBuffer, position, b, off, cnt);
1:f812e34:         position += cnt;
1:d29ca2a:         return cnt;
1:d29ca2a:     }
1:d29ca2a: 
1:04ee70a:     @Override
1:f812e34:     public int read(byte b[], int off, int len) throws IOException {
1:f812e34:         if ((off | len | (off + len) | (b.length - (off + len))) < 0) {
1:d29ca2a:             throw new IndexOutOfBoundsException();
1:f812e34:         } else if (len == 0) {
1:d29ca2a:             return 0;
1:d29ca2a:         }
1:f812e34:         int n = 0;
1:f812e34:         for (;;) {
1:f812e34:             int nread = readStream(b, off + n, len - n);
1:fc00993:             if (nread <= 0) {
1:f812e34:                 return (n == 0) ? nread : n;
1:fc00993:             }
1:f812e34:             n += nread;
1:fc00993:             if (n >= len) {
1:d29ca2a:                 return n;
1:fc00993:             }
1:d29ca2a:             // if not closed but no bytes available, return
1:f812e34:             InputStream input = in;
1:fc00993:             if (input != null && input.available() <= 0) {
1:d29ca2a:                 return n;
1:fc00993:             }
1:d29ca2a:         }
1:d29ca2a:     }
1:d29ca2a: 
1:04ee70a:     @Override
1:f812e34:     public long skip(long n) throws IOException {
1:f812e34:         if (n <= 0) {
1:d29ca2a:             return 0;
1:d29ca2a:         }
1:f812e34:         long avail = count - position;
1:f812e34:         if (avail <= 0) {
1:d29ca2a:             return in.skip(n);
1:d29ca2a:         }
1:f812e34:         long skipped = (avail < n) ? avail : n;
1:f812e34:         position += skipped;
1:d29ca2a:         return skipped;
1:d29ca2a:     }
1:d29ca2a: 
1:04ee70a:     @Override
1:f812e34:     public int available() throws IOException {
1:f812e34:         return in.available() + (count - position);
1:d29ca2a:     }
1:d29ca2a: 
1:04ee70a:     @Override
1:f812e34:     public boolean markSupported() {
1:d29ca2a:         return false;
1:d29ca2a:     }
1:d29ca2a: 
1:04ee70a:     @Override
1:f812e34:     public void close() throws IOException {
1:fc00993:         if (in != null) {
1:d29ca2a:             in.close();
1:fc00993:         }
1:d29ca2a:     }
1:04ee70a: 
1:04ee70a:     /**
1:04ee70a:      * @param array
1:04ee70a:      * @throws IOException
1:04ee70a:      */
1:04ee70a:     public void unread(byte[] array) throws IOException {
1:04ee70a:         int avail = internalBuffer.length - position;
1:04ee70a:         if (array.length > avail) {
1:04ee70a:             throw new IOException("Buffer is full, can't unread");
1:04ee70a:         }
1:04ee70a: 
1:04ee70a:         System.arraycopy(array, position, internalBuffer, 0, array.length);
1:04ee70a:         count += array.length;
1:04ee70a:     }
1:d29ca2a: }
============================================================================
author:Hadrian Zbarcea
-------------------------------------------------------------------------------
commit:d54d046
author:Christopher L. Shannon (cshannon)
-------------------------------------------------------------------------------
commit:04ee70a
/////////////////////////////////////////////////////////////////////////
1:  *
1:  *
/////////////////////////////////////////////////////////////////////////
1:     @Override
/////////////////////////////////////////////////////////////////////////
1:     @Override
/////////////////////////////////////////////////////////////////////////
1:     @Override
/////////////////////////////////////////////////////////////////////////
1:     @Override
1:     @Override
1:     @Override
1: 
1:     /**
1:      * @param array
1:      * @throws IOException
1:      */
1:     public void unread(byte[] array) throws IOException {
1:         int avail = internalBuffer.length - position;
1:         if (array.length > avail) {
1:             throw new IOException("Buffer is full, can't unread");
1:         }
1: 
1:         System.arraycopy(array, position, internalBuffer, 0, array.length);
1:         count += array.length;
1:     }
author:Hiram R. Chirino
-------------------------------------------------------------------------------
commit:9a8f6e4
commit:b0c2a40
/////////////////////////////////////////////////////////////////////////
1:  * 
commit:8978ac0
/////////////////////////////////////////////////////////////////////////
1:     protected void fill() throws IOException {
commit:ecf89a6
/////////////////////////////////////////////////////////////////////////
1:         count = 0;
1:         position = 0;
commit:fc00993
/////////////////////////////////////////////////////////////////////////
1:         if (n > 0) {
1:         }
1:             if (position >= count) {
1:             }
/////////////////////////////////////////////////////////////////////////
1:             if (avail <= 0) {
1:             }
/////////////////////////////////////////////////////////////////////////
1:             if (nread <= 0) {
1:             }
1:             if (n >= len) {
1:             }
1:             if (input != null && input.available() <= 0) {
1:             }
/////////////////////////////////////////////////////////////////////////
1:         if (in != null) {
1:         }
commit:f812e34
/////////////////////////////////////////////////////////////////////////
1: 
1: public class TcpBufferedInputStream extends FilterInputStream {
1:     private static final int DEFAULT_BUFFER_SIZE = 8192;
1:     public TcpBufferedInputStream(InputStream in) {
1:         this(in, DEFAULT_BUFFER_SIZE);
1:     public TcpBufferedInputStream(InputStream in, int size) {
1:         if (size <= 0) {
1:         internalBuffer = new byte[size];
0:     private void fill() throws IOException {
1:         byte[] buffer = internalBuffer;
0:         count = position = 0;
1:         int n = in.read(buffer, position, buffer.length - position);
0:         if (n > 0)
1:             count = n + position;
1:     public int read() throws IOException {
1:         if (position >= count) {
0:             if (position >= count)
1:         return internalBuffer[position++] & 0xff;
1:     private int readStream(byte[] b, int off, int len) throws IOException {
1:         int avail = count - position;
1:         if (avail <= 0) {
1:             if (len >= internalBuffer.length) {
1:                 return in.read(b, off, len);
1:             avail = count - position;
0:             if (avail <= 0)
1:         int cnt = (avail < len) ? avail : len;
1:         System.arraycopy(internalBuffer, position, b, off, cnt);
1:         position += cnt;
1:     public int read(byte b[], int off, int len) throws IOException {
1:         if ((off | len | (off + len) | (b.length - (off + len))) < 0) {
1:         } else if (len == 0) {
1:         int n = 0;
1:         for (;;) {
1:             int nread = readStream(b, off + n, len - n);
0:             if (nread <= 0)
1:                 return (n == 0) ? nread : n;
1:             n += nread;
0:             if (n >= len)
1:             InputStream input = in;
0:             if (input != null && input.available() <= 0)
1:     public long skip(long n) throws IOException {
1:         if (n <= 0) {
1:         long avail = count - position;
1:         if (avail <= 0) {
1:         long skipped = (avail < n) ? avail : n;
1:         position += skipped;
1:     public int available() throws IOException {
1:         return in.available() + (count - position);
1:     public boolean markSupported() {
1:     public void close() throws IOException {
0:         if (in != null)
commit:230a86c
/////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////
1:  *      http://www.apache.org/licenses/LICENSE-2.0
commit:57b4941
/////////////////////////////////////////////////////////////////////////
1:  * Licensed to the Apache Software Foundation (ASF) under one or more
1:  * contributor license agreements.  See the NOTICE file distributed with
1:  * this work for additional information regarding copyright ownership.
1:  * The ASF licenses this file to You under the Apache License, Version 2.0
1:  * (the "License"); you may not use this file except in compliance with
1:  * the License.  You may obtain a copy of the License at
commit:48b4869
/////////////////////////////////////////////////////////////////////////
0:  * Copyright 2005-2006 The Apache Software Foundation
commit:d29ca2a
/////////////////////////////////////////////////////////////////////////
1: /**
1:  *
0:  * Copyright 2004 The Apache Software Foundation
1:  *
0:  * Licensed under the Apache License, Version 2.0 (the "License");
0:  * you may not use this file except in compliance with the License.
0:  * You may obtain a copy of the License at
1:  *
0:  * http://www.apache.org/licenses/LICENSE-2.0
1:  *
1:  * Unless required by applicable law or agreed to in writing, software
1:  * distributed under the License is distributed on an "AS IS" BASIS,
1:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:  * See the License for the specific language governing permissions and
1:  * limitations under the License.
1:  */
1: package org.apache.activemq.transport.tcp;
1: 
1: import java.io.FilterInputStream;
1: import java.io.IOException;
1: import java.io.InputStream;
1: /**
1:  * An optimized buffered input stream for Tcp
1:  * 
0:  * @version $Revision: 1.1.1.1 $
1:  */
0: public class TcpBufferedInputStream extends FilterInputStream{
0:     private static final int DEFAULT_BUFFER_SIZE=8192;
1:     protected byte internalBuffer[];
1:     protected int count;
1:     protected int position;
1: 
0:     public TcpBufferedInputStream(InputStream in){
0:         this(in,DEFAULT_BUFFER_SIZE);
1:     }
1: 
0:     public TcpBufferedInputStream(InputStream in,int size){
1:         super(in);
0:         if(size<=0){
1:             throw new IllegalArgumentException("Buffer size <= 0");
1:         }
0:         internalBuffer=new byte[size];
1:     }
1: 
0:     private void fill() throws IOException{
0:         byte[] buffer=internalBuffer;
0:         count=position=0;
0:         int n=in.read(buffer,position,buffer.length-position);
0:         if(n>0)
0:             count=n+position;
1:     }
1: 
0:     public int read() throws IOException{
0:         if(position>=count){
1:             fill();
0:             if(position>=count)
1:                 return -1;
1:         }
0:         return internalBuffer[position++]&0xff;
1:     }
1: 
0:     private int readStream(byte[] b,int off,int len) throws IOException{
0:         int avail=count-position;
0:         if(avail<=0){
0:             if(len>=internalBuffer.length){
0:                 return in.read(b,off,len);
1:             }
1:             fill();
0:             avail=count-position;
0:             if(avail<=0)
1:                 return -1;
1:         }
0:         int cnt=(avail<len)?avail:len;
0:         System.arraycopy(internalBuffer,position,b,off,cnt);
0:         position+=cnt;
1:         return cnt;
1:     }
1: 
0:     public int read(byte b[],int off,int len) throws IOException{
0:         if((off|len|(off+len)|(b.length-(off+len)))<0){
1:             throw new IndexOutOfBoundsException();
0:         }else if(len==0){
1:             return 0;
1:         }
0:         int n=0;
0:         for(;;){
0:             int nread=readStream(b,off+n,len-n);
0:             if(nread<=0)
0:                 return (n==0)?nread:n;
0:             n+=nread;
0:             if(n>=len)
1:                 return n;
1:             // if not closed but no bytes available, return
0:             InputStream input=in;
0:             if(input!=null&&input.available()<=0)
1:                 return n;
1:         }
1:     }
1: 
0:     public long skip(long n) throws IOException{
0:         if(n<=0){
1:             return 0;
1:         }
0:         long avail=count-position;
0:         if(avail<=0){
1:             return in.skip(n);
1:         }
0:         long skipped=(avail<n)?avail:n;
0:         position+=skipped;
1:         return skipped;
1:     }
1: 
0:     public int available() throws IOException{
0:         return in.available()+(count-position);
1:     }
1: 
0:     public boolean markSupported(){
1:         return false;
1:     }
1: 
0:     public void close() throws IOException{
0:         if(in!=null)
1:             in.close();
1:     }
1: }
============================================================================