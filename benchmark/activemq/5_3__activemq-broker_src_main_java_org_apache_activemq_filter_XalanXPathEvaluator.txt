1:d29ca2a: /**
1:57b4941:  * Licensed to the Apache Software Foundation (ASF) under one or more
1:57b4941:  * contributor license agreements.  See the NOTICE file distributed with
1:57b4941:  * this work for additional information regarding copyright ownership.
1:57b4941:  * The ASF licenses this file to You under the Apache License, Version 2.0
1:57b4941:  * (the "License"); you may not use this file except in compliance with
1:57b4941:  * the License.  You may obtain a copy of the License at
3:d29ca2a:  *
1:230a86c:  *      http://www.apache.org/licenses/LICENSE-2.0
1:d29ca2a:  *
1:d29ca2a:  * Unless required by applicable law or agreed to in writing, software
1:d29ca2a:  * distributed under the License is distributed on an "AS IS" BASIS,
1:d29ca2a:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:d29ca2a:  * See the License for the specific language governing permissions and
1:d29ca2a:  * limitations under the License.
1:d29ca2a:  */
1:d29ca2a: package org.apache.activemq.filter;
1:74a7a8b: 
1:b9696ac: import org.apache.activemq.command.Message;
1:b9696ac: import org.apache.activemq.util.ByteArrayInputStream;
1:b9696ac: import org.w3c.dom.Document;
1:b9696ac: import org.xml.sax.InputSource;
1:74a7a8b: 
1:d29ca2a: import javax.jms.BytesMessage;
1:d29ca2a: import javax.jms.JMSException;
1:d29ca2a: import javax.jms.TextMessage;
1:b9696ac: import javax.xml.parsers.DocumentBuilder;
1:a6c14b4: import javax.xml.xpath.XPath;
1:a6c14b4: import javax.xml.xpath.XPathConstants;
1:a6c14b4: import javax.xml.xpath.XPathFactory;
1:b9696ac: import java.io.StringReader;
1:ecf89a6: 
1:d29ca2a: public class XalanXPathEvaluator implements XPathExpression.XPathEvaluator {
2:f812e34: 
1:a6c14b4:     private static final XPathFactory FACTORY = XPathFactory.newInstance();
1:a6c14b4:     private final String xpathExpression;
1:b9696ac:     private final DocumentBuilder builder;
1:b9696ac:     private final XPath xpath = FACTORY.newXPath();
1:f812e34: 
1:b9696ac:     public XalanXPathEvaluator(String xpathExpression, DocumentBuilder builder) throws Exception {
1:a6c14b4:         this.xpathExpression = xpathExpression;
1:b9696ac:         if (builder != null) {
1:b9696ac:             this.builder = builder;
1:b9696ac:         } else {
1:b9696ac:             throw new RuntimeException("No document builder available");
1:a6c14b4:         }
2:d29ca2a:     }
1:f812e34: 
1:a6c14b4:     public boolean evaluate(Message message) throws JMSException {
1:a6c14b4:         if (message instanceof TextMessage) {
1:a6c14b4:             String text = ((TextMessage)message).getText();
1:f812e34:             return evaluate(text);
1:a6c14b4:         } else if (message instanceof BytesMessage) {
1:a6c14b4:             BytesMessage bm = (BytesMessage)message;
1:f812e34:             byte data[] = new byte[(int)bm.getBodyLength()];
1:d29ca2a:             bm.readBytes(data);
1:d29ca2a:             return evaluate(data);
1:f812e34:         }
1:d29ca2a:         return false;
1:d29ca2a:     }
1:f812e34: 
1:d29ca2a:     private boolean evaluate(byte[] data) {
1:a6c14b4:         try {
1:d29ca2a:             InputSource inputSource = new InputSource(new ByteArrayInputStream(data));
1:b9696ac:             Document inputDocument = builder.parse(inputSource);
1:b9696ac:             return ((Boolean) xpath.evaluate(xpathExpression, inputDocument, XPathConstants.BOOLEAN)).booleanValue();
1:b9696ac:         } catch (Exception e) {
1:d29ca2a:             return false;
1:d29ca2a:         }
1:d29ca2a:     }
1:f812e34: 
1:d29ca2a:     private boolean evaluate(String text) {
2:d29ca2a:         try {
1:d29ca2a:             InputSource inputSource = new InputSource(new StringReader(text));
1:b9696ac:             Document inputDocument = builder.parse(inputSource);
1:b9696ac:             return ((Boolean) xpath.evaluate(xpathExpression, inputDocument, XPathConstants.BOOLEAN)).booleanValue();
1:b9696ac:         } catch (Exception e) {
1:d29ca2a:             return false;
1:d29ca2a:         }
1:d29ca2a:     }
1:a6c14b4: 
1:a6c14b4:     @Override
1:a6c14b4:     public String toString() {
1:a6c14b4:         return xpathExpression;
1:a6c14b4:     }
1:d29ca2a: }
============================================================================
author:Hadrian Zbarcea
-------------------------------------------------------------------------------
commit:d54d046
author:Dejan Bosanac
-------------------------------------------------------------------------------
commit:b9696ac
/////////////////////////////////////////////////////////////////////////
1: import org.apache.activemq.command.Message;
1: import org.apache.activemq.util.ByteArrayInputStream;
1: import org.w3c.dom.Document;
1: import org.xml.sax.InputSource;
1: import javax.xml.parsers.DocumentBuilder;
1: import java.io.StringReader;
1:     private final DocumentBuilder builder;
1:     private final XPath xpath = FACTORY.newXPath();
1:     public XalanXPathEvaluator(String xpathExpression, DocumentBuilder builder) throws Exception {
1:         if (builder != null) {
1:             this.builder = builder;
1:         } else {
1:             throw new RuntimeException("No document builder available");
/////////////////////////////////////////////////////////////////////////
1:             Document inputDocument = builder.parse(inputSource);
1:             return ((Boolean) xpath.evaluate(xpathExpression, inputDocument, XPathConstants.BOOLEAN)).booleanValue();
1:         } catch (Exception e) {
/////////////////////////////////////////////////////////////////////////
1:             Document inputDocument = builder.parse(inputSource);
1:             return ((Boolean) xpath.evaluate(xpathExpression, inputDocument, XPathConstants.BOOLEAN)).booleanValue();
1:         } catch (Exception e) {
author:Claus Ibsen
-------------------------------------------------------------------------------
commit:a6c14b4
/////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////
1: import javax.xml.xpath.XPath;
1: import javax.xml.xpath.XPathConstants;
0: import javax.xml.xpath.XPathExpressionException;
1: import javax.xml.xpath.XPathFactory;
0: import org.xml.sax.InputSource;
1:     private static final XPathFactory FACTORY = XPathFactory.newInstance();
0:     private final javax.xml.xpath.XPathExpression expression;
1:     private final String xpathExpression;
0:     public XalanXPathEvaluator(String xpathExpression) {
1:         this.xpathExpression = xpathExpression;
1:         try {
0:             XPath xpath = FACTORY.newXPath();
0:             expression = xpath.compile(xpathExpression);
0:         } catch (XPathExpressionException e) {
0:             throw new RuntimeException("Invalid XPath expression: " + xpathExpression);
1:         }
1:     public boolean evaluate(Message message) throws JMSException {
1:         if (message instanceof TextMessage) {
1:             String text = ((TextMessage)message).getText();
1:         } else if (message instanceof BytesMessage) {
1:             BytesMessage bm = (BytesMessage)message;
/////////////////////////////////////////////////////////////////////////
0:             return ((Boolean)expression.evaluate(inputSource, XPathConstants.BOOLEAN)).booleanValue();
0:         } catch (XPathExpressionException e) {
/////////////////////////////////////////////////////////////////////////
0:             return ((Boolean)expression.evaluate(inputSource, XPathConstants.BOOLEAN)).booleanValue();
0:         } catch (XPathExpressionException e) {
1: 
1:     @Override
1:     public String toString() {
1:         return xpathExpression;
1:     }
author:Hiram R. Chirino
-------------------------------------------------------------------------------
commit:2c82258
commit:9a8f6e4
/////////////////////////////////////////////////////////////////////////
commit:ecf89a6
/////////////////////////////////////////////////////////////////////////
0: import org.w3c.dom.Document;
0: import org.w3c.dom.traversal.NodeIterator;
0: import org.xml.sax.InputSource;
1: 
commit:74a7a8b
/////////////////////////////////////////////////////////////////////////
1: 
0: import org.xml.sax.InputSource;
1: 
commit:f812e34
/////////////////////////////////////////////////////////////////////////
1: 
1: 
0:         if (m instanceof TextMessage) {
1:             return evaluate(text);
0:         } else if (m instanceof BytesMessage) {
0:             BytesMessage bm = (BytesMessage)m;
1:             byte data[] = new byte[(int)bm.getBodyLength()];
1:         }
1: 
1: 
1: 
0:             NodeIterator iterator = cachedXPathAPI.selectNodeIterator(doc, xpath);
0:             return iterator.nextNode() != null;
1: 
/////////////////////////////////////////////////////////////////////////
0: 
0: 
0:             // We should associated the cachedXPathAPI object with the message
0:             // being evaluated
0:             NodeIterator iterator = cachedXPathAPI.selectNodeIterator(doc, xpath);
0:             return iterator.nextNode() != null;
commit:230a86c
/////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////
1:  *      http://www.apache.org/licenses/LICENSE-2.0
commit:88acb0e
/////////////////////////////////////////////////////////////////////////
0: import org.apache.activemq.util.ByteArrayInputStream;
commit:57b4941
/////////////////////////////////////////////////////////////////////////
1:  * Licensed to the Apache Software Foundation (ASF) under one or more
1:  * contributor license agreements.  See the NOTICE file distributed with
1:  * this work for additional information regarding copyright ownership.
1:  * The ASF licenses this file to You under the Apache License, Version 2.0
1:  * (the "License"); you may not use this file except in compliance with
1:  * the License.  You may obtain a copy of the License at
commit:f451ad0
/////////////////////////////////////////////////////////////////////////
0: import org.apache.activeio.util.ByteArrayInputStream;
commit:48b4869
/////////////////////////////////////////////////////////////////////////
0:  * Copyright 2005-2006 The Apache Software Foundation
commit:d29ca2a
/////////////////////////////////////////////////////////////////////////
1: /**
1:  *
0:  * Copyright 2004 The Apache Software Foundation
1:  *
0:  * Licensed under the Apache License, Version 2.0 (the "License");
0:  * you may not use this file except in compliance with the License.
0:  * You may obtain a copy of the License at
1:  *
0:  * http://www.apache.org/licenses/LICENSE-2.0
1:  *
1:  * Unless required by applicable law or agreed to in writing, software
1:  * distributed under the License is distributed on an "AS IS" BASIS,
1:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:  * See the License for the specific language governing permissions and
1:  * limitations under the License.
1:  */
0: 
1: package org.apache.activemq.filter;
0: 
0: import java.io.StringReader;
0: 
1: import javax.jms.BytesMessage;
1: import javax.jms.JMSException;
1: import javax.jms.TextMessage;
0: import javax.xml.parsers.DocumentBuilder;
0: import javax.xml.parsers.DocumentBuilderFactory;
0: 
0: import org.activeio.ByteArrayInputStream;
0: import org.apache.activemq.command.Message;
0: import org.apache.xpath.CachedXPathAPI;
0: import org.w3c.dom.Document;
0: import org.w3c.dom.traversal.NodeIterator;
0: import org.xml.sax.InputSource;
0: 
1: public class XalanXPathEvaluator implements XPathExpression.XPathEvaluator {
0:     
0:     private final String xpath;
0: 
0:     public XalanXPathEvaluator(String xpath) {
0:         this.xpath = xpath;
1:     }
0:     
0:     public boolean evaluate(Message m) throws JMSException {
0:         if( m instanceof TextMessage ) {
0:             String text = ((TextMessage)m).getText();
0:             return evaluate(text);                
0:         } else if ( m instanceof BytesMessage ) {
0:             BytesMessage bm = (BytesMessage) m;
0:             byte data[] = new byte[(int) bm.getBodyLength()];
1:             bm.readBytes(data);
1:             return evaluate(data);
1:         }            
1:         return false;
1:     }
0: 
1:     private boolean evaluate(byte[] data) {
1:         try {
0:             
1:             InputSource inputSource = new InputSource(new ByteArrayInputStream(data));
0:             
0:             DocumentBuilderFactory factory = DocumentBuilderFactory.newInstance();
0:             factory.setNamespaceAware(true);
0:             DocumentBuilder dbuilder = factory.newDocumentBuilder();
0:             Document doc = dbuilder.parse(inputSource);
0:             
0:             CachedXPathAPI cachedXPathAPI = new CachedXPathAPI();
0:             NodeIterator iterator = cachedXPathAPI.selectNodeIterator(doc,xpath);
0:             return iterator.nextNode()!=null;
0:             
0:         } catch (Throwable e) {
1:             return false;
1:         }
1:     }
0: 
1:     private boolean evaluate(String text) {
1:         try {
1:             InputSource inputSource = new InputSource(new StringReader(text));
0:             
0:             DocumentBuilderFactory factory = DocumentBuilderFactory.newInstance();
0:             factory.setNamespaceAware(true);
0:             DocumentBuilder dbuilder = factory.newDocumentBuilder();
0:             Document doc = dbuilder.parse(inputSource);
0:             
0:             // We should associated the cachedXPathAPI object with the message being evaluated
0:             // since that should speedup subsequent xpath expressions.
0:             CachedXPathAPI cachedXPathAPI = new CachedXPathAPI();
0:             NodeIterator iterator = cachedXPathAPI.selectNodeIterator(doc,xpath);
0:             return iterator.nextNode()!=null;
0:         } catch (Throwable e) {
1:             return false;
1:         }
1:     }
1: }
author:Bosanac Dejan
-------------------------------------------------------------------------------
commit:42d91a3
/////////////////////////////////////////////////////////////////////////
0: import javax.xml.xpath.XPath;
/////////////////////////////////////////////////////////////////////////
0: import org.apache.xpath.objects.XObject;
0: 
/////////////////////////////////////////////////////////////////////////
0:             
0:             XObject result = cachedXPathAPI.eval(doc, xpath);
0:             if (result.bool())
0:             	return true;
0:             else {
0:             	NodeIterator iterator = cachedXPathAPI.selectNodeIterator(doc, xpath);
0:             	return (iterator.nextNode() != null);
0:             }  
/////////////////////////////////////////////////////////////////////////
0:             //An XPath expression could return a true or false value instead of a node.
0:             //eval() is a better way to determine the boolean value of the exp.
0:             //For compliance with legacy behavior where selecting an empty node returns true,
0:             //selectNodeIterator is attempted in case of a failure.
0:             
0:             XObject result = cachedXPathAPI.eval(doc, xpath);
0:             if (result.bool())
0:             	return true;
0:             else {
0:             	NodeIterator iterator = cachedXPathAPI.selectNodeIterator(doc, xpath);
0:             	return (iterator.nextNode() != null);
0:             }    	
0:             
============================================================================