2:d29ca2a: /**
1:57b4941:  * Licensed to the Apache Software Foundation (ASF) under one or more
1:57b4941:  * contributor license agreements.  See the NOTICE file distributed with
1:57b4941:  * this work for additional information regarding copyright ownership.
1:57b4941:  * The ASF licenses this file to You under the Apache License, Version 2.0
1:57b4941:  * (the "License"); you may not use this file except in compliance with
1:57b4941:  * the License.  You may obtain a copy of the License at
3:d29ca2a:  *
1:230a86c:  *      http://www.apache.org/licenses/LICENSE-2.0
1:d29ca2a:  *
1:d29ca2a:  * Unless required by applicable law or agreed to in writing, software
1:d29ca2a:  * distributed under the License is distributed on an "AS IS" BASIS,
1:d29ca2a:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:d29ca2a:  * See the License for the specific language governing permissions and
1:d29ca2a:  * limitations under the License.
2:d29ca2a:  */
1:d29ca2a: package org.apache.activemq.transport;
2:87666fa: 
1:d29ca2a: import java.io.IOException;
1:f812e34: 
1:8bf987b: import org.slf4j.Logger;
1:f812e34: 
1:c4d8d86: /**
1:c4d8d86:  * This TransportFilter implementation writes output to a log
1:c4d8d86:  * as it intercepts commands / events before sending them to the
1:c4d8d86:  * following layer in the Transport stack.
1:c4d8d86:  * 
1:c4d8d86:  * @author David Martin Clavo david(dot)martin(dot)clavo(at)gmail.com
1:b0c2a40:  * 
1:c4d8d86:  */
1:d29ca2a: public class TransportLogger extends TransportFilter {
1:f812e34: 
1:8bf987b:     private final Logger log;
1:c4d8d86:     private boolean logging;
1:c4d8d86:     private final LogWriter logWriter;
1:c4d8d86:     private TransportLoggerView view;
1:87666fa: 
1:8bf987b:     public TransportLogger(Transport next, Logger log, boolean startLogging, LogWriter logWriter) {
1:c4d8d86:         // Changed constructor to pass the implementation of the LogWriter interface
1:c4d8d86:         // that will be used to write the messages.
1:d29ca2a:         super(next);
1:d29ca2a:         this.log = log;
1:c4d8d86:         this.logging = startLogging;
1:c4d8d86:         this.logWriter = logWriter;
1:87666fa:     }
1:933eb2f: 
1:c4d8d86:     /**
1:c4d8d86:      * Returns true if logging is activated for this TransportLogger, false otherwise.
1:c4d8d86:      * @return true if logging is activated for this TransportLogger, false otherwise.
1:c4d8d86:      */
1:c4d8d86:     public boolean isLogging() {
1:c4d8d86:         return logging;
1:933eb2f:     }
1:f812e34: 
1:c4d8d86:     /**
1:c4d8d86:      * Sets if logging should be activated for this TransportLogger.
1:c4d8d86:      * @param logging true to activate logging, false to deactivate.
1:c4d8d86:      */
1:c4d8d86:     public void setLogging(boolean logging) {
1:c4d8d86:         this.logging = logging;
1:c4d8d86:     } 
1:c4d8d86: 
1:9ca56a0:     public Object request(Object command) throws IOException {
1:c4d8d86:         // Changed this method to use a LogWriter object to actually 
1:c4d8d86:         // print the messages to the log, and only in case of logging 
1:c4d8d86:         // being active, instead of logging the message directly.
1:c4d8d86:         if (logging)
1:c4d8d86:             logWriter.logRequest(log, command);
1:f812e34:         Object rc = super.request(command);
1:c4d8d86:         if (logging)
1:c4d8d86:             logWriter.logResponse(log, command);
1:f812e34:         return rc;
1:87666fa:     }
1:f812e34: 
1:9ca56a0:     public Object request(Object command, int timeout) throws IOException {
1:c4d8d86:         // Changed this method to use a LogWriter object to actually 
1:c4d8d86:         // print the messages to the log, and only in case of logging 
1:c4d8d86:         // being active, instead of logging the message directly.
1:c4d8d86:         if (logging)
1:c4d8d86:             logWriter.logRequest(log, command);
1:9ca56a0:         Object rc = super.request(command, timeout);
1:c4d8d86:         if (logging)
1:c4d8d86:             logWriter.logResponse(log, command);
1:f812e34:         return rc;
1:87666fa:     }
1:f812e34: 
1:9ca56a0:     public FutureResponse asyncRequest(Object command, ResponseCallback responseCallback) throws IOException {
1:c4d8d86:         // Changed this method to use a LogWriter object to actually 
1:c4d8d86:         // print the messages to the log, and only in case of logging 
1:c4d8d86:         // being active, instead of logging the message directly.
1:c4d8d86:         if (logging)
1:c4d8d86:             logWriter.logAsyncRequest(log, command);
1:f812e34:         FutureResponse rc = next.asyncRequest(command, responseCallback);
1:f812e34:         return rc;
1:87666fa:     }
1:f812e34: 
1:9ca56a0:     public void oneway(Object command) throws IOException {
1:c4d8d86:         // Changed this method to use a LogWriter object to actually 
1:c4d8d86:         // print the messages to the log, and only in case of logging 
1:c4d8d86:         // being active, instead of logging the message directly.
1:c4d8d86:         if( logging && log.isDebugEnabled() ) {
1:c4d8d86:             logWriter.logOneWay(log, command);
4:d29ca2a:         }
1:d29ca2a:         next.oneway(command);
1:1229c23:     }
1:f812e34: 
1:9ca56a0:     public void onCommand(Object command) {
1:c4d8d86:         // Changed this method to use a LogWriter object to actually 
1:c4d8d86:         // print the messages to the log, and only in case of logging 
1:c4d8d86:         // being active, instead of logging the message directly.
1:c4d8d86:         if( logging && log.isDebugEnabled() ) {
1:c4d8d86:             logWriter.logReceivedCommand(log, command);
1:1229c23:         }
1:436fe42:         getTransportListener().onCommand(command);
1:d29ca2a:     }
1:c4d8d86: 
1:1229c23:     public void onException(IOException error) {
1:c4d8d86:         // Changed this method to use a LogWriter object to actually 
1:c4d8d86:         // print the messages to the log, and only in case of logging 
1:c4d8d86:         // being active, instead of logging the message directly.
1:c4d8d86:         if( logging && log.isDebugEnabled() ) {
1:c4d8d86:             logWriter.logReceivedException(log, error);
1:1229c23:         }
1:436fe42:         getTransportListener().onException(error);
1:1229c23:     }
1:c4d8d86: 
1:c4d8d86:     /**
1:c4d8d86:      * Gets the associated MBean for this TransportLogger.
1:c4d8d86:      * @return the associated MBean for this TransportLogger.
1:c4d8d86:      */
1:c4d8d86:     public TransportLoggerView getView() {
1:c4d8d86:         return view;
1:c4d8d86:     }
1:c4d8d86: 
1:c4d8d86:     /**
1:c4d8d86:      * Sets the associated MBean for this TransportLogger.
1:c4d8d86:      * @param view the associated MBean for this TransportLogger.
1:c4d8d86:      */
1:c4d8d86:     public void setView(TransportLoggerView view) {
1:c4d8d86:         this.view = view;
1:c4d8d86:     }
1:c4d8d86: 
1:c4d8d86: 
1:d29ca2a:     public String toString() {
1:d29ca2a:         return next.toString();
1:d29ca2a:     }
1:c4d8d86: 
1:ec35588:     @Override
1:ec35588:     public void stop() throws Exception {
1:ec35588:         super.stop();
1:c4d8d86:         if (view != null) {
1:ec35588:             view.unregister();
1:c4d8d86:         }
1:c4d8d86:     }
1:d29ca2a: }
============================================================================
author:Hadrian Zbarcea
-------------------------------------------------------------------------------
commit:d54d046
author:Dejan Bosanac
-------------------------------------------------------------------------------
commit:ec35588
/////////////////////////////////////////////////////////////////////////
1:     @Override
1:     public void stop() throws Exception {
1:         super.stop();
1:             view.unregister();
author:Hiram R. Chirino
-------------------------------------------------------------------------------
commit:58aca86
commit:b0c2a40
/////////////////////////////////////////////////////////////////////////
1:  * 
commit:c4d8d86
/////////////////////////////////////////////////////////////////////////
1:  * This TransportFilter implementation writes output to a log
1:  * as it intercepts commands / events before sending them to the
1:  * following layer in the Transport stack.
1:  * 
1:  * @author David Martin Clavo david(dot)martin(dot)clavo(at)gmail.com
1:     private boolean logging;
1:     private final LogWriter logWriter;
1:     private TransportLoggerView view;
0:     public TransportLogger(Transport next, Log log, boolean startLogging, LogWriter logWriter) {
1:         // Changed constructor to pass the implementation of the LogWriter interface
1:         // that will be used to write the messages.
1:         this.logging = startLogging;
1:         this.logWriter = logWriter;
1:     /**
1:      * Returns true if logging is activated for this TransportLogger, false otherwise.
1:      * @return true if logging is activated for this TransportLogger, false otherwise.
1:      */
1:     public boolean isLogging() {
1:         return logging;
1:     /**
1:      * Sets if logging should be activated for this TransportLogger.
1:      * @param logging true to activate logging, false to deactivate.
1:      */
1:     public void setLogging(boolean logging) {
1:         this.logging = logging;
1:     } 
1: 
1:         // Changed this method to use a LogWriter object to actually 
1:         // print the messages to the log, and only in case of logging 
1:         // being active, instead of logging the message directly.
1:         if (logging)
1:             logWriter.logRequest(log, command);
1:         if (logging)
1:             logWriter.logResponse(log, command);
1:         // Changed this method to use a LogWriter object to actually 
1:         // print the messages to the log, and only in case of logging 
1:         // being active, instead of logging the message directly.
1:         if (logging)
1:             logWriter.logRequest(log, command);
1:         if (logging)
1:             logWriter.logResponse(log, command);
1:         // Changed this method to use a LogWriter object to actually 
1:         // print the messages to the log, and only in case of logging 
1:         // being active, instead of logging the message directly.
1:         if (logging)
1:             logWriter.logAsyncRequest(log, command);
1:         // Changed this method to use a LogWriter object to actually 
1:         // print the messages to the log, and only in case of logging 
1:         // being active, instead of logging the message directly.
1:         if( logging && log.isDebugEnabled() ) {
1:             logWriter.logOneWay(log, command);
1:         // Changed this method to use a LogWriter object to actually 
1:         // print the messages to the log, and only in case of logging 
1:         // being active, instead of logging the message directly.
1:         if( logging && log.isDebugEnabled() ) {
1:             logWriter.logReceivedCommand(log, command);
1:         // Changed this method to use a LogWriter object to actually 
1:         // print the messages to the log, and only in case of logging 
1:         // being active, instead of logging the message directly.
1:         if( logging && log.isDebugEnabled() ) {
1:             logWriter.logReceivedException(log, error);
1:     /**
1:      * Gets the associated MBean for this TransportLogger.
1:      * @return the associated MBean for this TransportLogger.
1:      */
1:     public TransportLoggerView getView() {
1:         return view;
1:     }
1: 
1:     /**
1:      * Sets the associated MBean for this TransportLogger.
1:      * @param view the associated MBean for this TransportLogger.
1:      */
1:     public void setView(TransportLoggerView view) {
1:         this.view = view;
1:     }
1: 
1: 
1: 
1: 
1:     /**
0:      * We need to override this method
0:      * so that we can unregister the associated
0:      * MBean to avoid a memory leak.
1:      */
0:     public void finalize() throws Throwable {
1:         if (view != null) {
0:             view.unregister();    
1:         }
1:     }
1: 
commit:933eb2f
/////////////////////////////////////////////////////////////////////////
0:     private static synchronized int getNextId() {
0:         return ++lastId;
1:     }
1: 
commit:fc00993
/////////////////////////////////////////////////////////////////////////
0:     private static synchronized int getNextId() {
commit:f812e34
/////////////////////////////////////////////////////////////////////////
0:     private static int lastId;
1: 
0:         this(next, LogFactory.getLog(TransportLogger.class.getName() + ".Connection:" + getNextId()));
1: 
/////////////////////////////////////////////////////////////////////////
0:         log.debug("SENDING REQUEST: " + command);
1:         Object rc = super.request(command);
0:         log.debug("GOT RESPONSE: " + rc);
1:         return rc;
1: 
0:         log.debug("SENDING REQUEST: " + command);
0:         log.debug("GOT RESPONSE: " + rc);
1:         return rc;
1: 
0:         log.debug("SENDING ASNYC REQUEST: " + command);
1:         FutureResponse rc = next.asyncRequest(command, responseCallback);
1:         return rc;
1: 
0:         if (log.isDebugEnabled()) {
0:             log.debug("SENDING: " + command);
1: 
0:         if (log.isDebugEnabled()) {
1: 
0:         if (log.isDebugEnabled()) {
0:             log.debug("RECEIVED Exception: " + error, error);
1: 
commit:230a86c
/////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////
1:  *      http://www.apache.org/licenses/LICENSE-2.0
commit:9ca56a0
/////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////
1:     public Object request(Object command) throws IOException {
0:     	Object rc = super.request(command);
1:     public Object request(Object command, int timeout) throws IOException {
1:         Object rc = super.request(command, timeout);
1:     public FutureResponse asyncRequest(Object command, ResponseCallback responseCallback) throws IOException {
1:     public void oneway(Object command) throws IOException {
1:     public void onCommand(Object command) {
0:             log.debug("RECEIVED: " + command);
commit:57b4941
/////////////////////////////////////////////////////////////////////////
1:  * Licensed to the Apache Software Foundation (ASF) under one or more
1:  * contributor license agreements.  See the NOTICE file distributed with
1:  * this work for additional information regarding copyright ownership.
1:  * The ASF licenses this file to You under the Apache License, Version 2.0
1:  * (the "License"); you may not use this file except in compliance with
1:  * the License.  You may obtain a copy of the License at
commit:87666fa
/////////////////////////////////////////////////////////////////////////
0: import org.apache.activemq.command.Response;
/////////////////////////////////////////////////////////////////////////
0:         this( next, LogFactory.getLog(TransportLogger.class.getName()+".Connection:"+getNextId()));
/////////////////////////////////////////////////////////////////////////
0:     public Response request(Command command) throws IOException {
0:         log.debug("SENDING REQUEST: "+command);
0:     	Response rc = super.request(command);
0:         log.debug("GOT RESPONSE: "+rc);
0:     	return rc;
1:     }
1:     
0:     public Response request(Command command, int timeout) throws IOException {
0:         log.debug("SENDING REQUEST: "+command);
0:     	Response rc = super.request(command, timeout);
0:         log.debug("GOT RESPONSE: "+rc);
0:     	return rc;
1:     }
1:     
0:     public FutureResponse asyncRequest(Command command, ResponseCallback responseCallback) throws IOException {
0:         log.debug("SENDING ASNYC REQUEST: "+command);
0:     	FutureResponse rc = next.asyncRequest(command, responseCallback);
0:     	return rc;
1:     }
1:     
/////////////////////////////////////////////////////////////////////////
0:         	if( command.getFrom()!=null ) {
0:                 log.debug("RECEIVED: from: "+ command.getFrom() + " : " + command);
0:         	} else {
0:                 log.debug("RECEIVED: " + command);
1:         	}
commit:1229c23
/////////////////////////////////////////////////////////////////////////
0:         this( next, LogFactory.getLog(TransportLogger.class.getName()+":"+getNextId()));
/////////////////////////////////////////////////////////////////////////
0:     public void onCommand(Command command) {
0:         if( log.isDebugEnabled() ) {
0:             log.debug("RECEIVED: "+command);
1:         }
0:         commandListener.onCommand(command);
1:     }
0:     
1:     public void onException(IOException error) {
0:         if( log.isDebugEnabled() ) {
0:             log.debug("RECEIVED Exception: "+error, error);
1:         }
0:         commandListener.onException(error);
1:     }
0:     
commit:48b4869
/////////////////////////////////////////////////////////////////////////
0:  * Copyright 2005-2006 The Apache Software Foundation
commit:d29ca2a
/////////////////////////////////////////////////////////////////////////
1: /**
1:  *
0:  * Copyright 2004 The Apache Software Foundation
1:  *
0:  * Licensed under the Apache License, Version 2.0 (the "License");
0:  * you may not use this file except in compliance with the License.
0:  * You may obtain a copy of the License at
1:  *
0:  * http://www.apache.org/licenses/LICENSE-2.0
1:  *
1:  * Unless required by applicable law or agreed to in writing, software
1:  * distributed under the License is distributed on an "AS IS" BASIS,
1:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:  * See the License for the specific language governing permissions and
1:  * limitations under the License.
1:  */
1: package org.apache.activemq.transport;
0: 
1: import java.io.IOException;
0: 
0: import org.apache.activemq.command.Command;
0: import org.apache.commons.logging.Log;
0: import org.apache.commons.logging.LogFactory;
0: 
0: 
1: /**
0:  * @version $Revision$
1:  */
1: public class TransportLogger extends TransportFilter {
0: 
0:     private static int lastId=0;
0:     private final Log log;
0:     
0:     public TransportLogger(Transport next) {
0:         this( next, LogFactory.getLog(TransportLogger.class.getName()+"."+getNextId()));
1:     }
0:     
0:     synchronized private static int getNextId() {
0:         return ++lastId;
1:     }
0: 
0:     public TransportLogger(Transport next, Log log) {
1:         super(next);
1:         this.log = log;
1:     }
0: 
0:     public void oneway(Command command) throws IOException {
0:         if( log.isDebugEnabled() ) {
0:             log.debug("SENDING: "+command);
1:         }
1:         next.oneway(command);
1:     }
0:     
1:     public String toString() {
1:         return next.toString();
1:     }
1: }
author:Bosanac Dejan
-------------------------------------------------------------------------------
commit:8bf987b
/////////////////////////////////////////////////////////////////////////
1: import org.slf4j.Logger;
/////////////////////////////////////////////////////////////////////////
1:     private final Logger log;
1:     public TransportLogger(Transport next, Logger log, boolean startLogging, LogWriter logWriter) {
author:Robert Davies
-------------------------------------------------------------------------------
commit:19a83ae
/////////////////////////////////////////////////////////////////////////
0: import org.apache.commons.logging.LogFactory;
0:     private static int lastId;
0:     public TransportLogger(Transport next) {
0:         this(next, LogFactory.getLog(TransportLogger.class.getName() + ".Connection:" + getNextId()));
0:     }
0: 
0:     public TransportLogger(Transport next, Log log) {
0:     private static synchronized int getNextId() {
0:         return ++lastId;
0:         log.debug("SENDING REQUEST: " + command);
0:         Object rc = super.request(command);
0:         log.debug("GOT RESPONSE: " + rc);
0:         return rc;
0:         log.debug("SENDING REQUEST: " + command);
0:         log.debug("GOT RESPONSE: " + rc);
0:         return rc;
0:         log.debug("SENDING ASNYC REQUEST: " + command);
0:         FutureResponse rc = next.asyncRequest(command, responseCallback);
0:         return rc;
0:         if (log.isDebugEnabled()) {
0:             log.debug("SENDING: " + command);
0:         if (log.isDebugEnabled()) {
0:             log.debug("RECEIVED: " + command);
0:         if (log.isDebugEnabled()) {
0:             log.debug("RECEIVED Exception: " + error, error);
commit:df6b542
/////////////////////////////////////////////////////////////////////////
0:     private boolean logging;
0:     private final LogWriter logWriter;
0:     private TransportLoggerView view;
0:     public TransportLogger(Transport next, Log log, boolean startLogging, LogWriter logWriter) {
0:         // Changed constructor to pass the implementation of the LogWriter interface
0:         // that will be used to write the messages.
0:         this.logging = startLogging;
0:         this.logWriter = logWriter;
0:     /**
0:      * Returns true if logging is activated for this TransportLogger, false otherwise.
0:      * @return true if logging is activated for this TransportLogger, false otherwise.
0:      */
0:     public boolean isLogging() {
0:         return logging;
0:     /**
0:      * Sets if logging should be activated for this TransportLogger.
0:      * @param logging true to activate logging, false to deactivate.
0:      */
0:     public void setLogging(boolean logging) {
0:         this.logging = logging;
0:     }  
0: 
0:         // Changed this method to use a LogWriter object to actually 
0:         // print the messages to the log, and only in case of logging 
0:         // being active, instead of logging the message directly.
0:         if (logging)
0:             logWriter.logRequest(log, command);
0:     	Object rc = super.request(command);
0:         if (logging)
0:             logWriter.logResponse(log, command);
0:     	return rc;
0:         // Changed this method to use a LogWriter object to actually 
0:         // print the messages to the log, and only in case of logging 
0:         // being active, instead of logging the message directly.
0:         if (logging)
0:             logWriter.logRequest(log, command);
0:         if (logging)
0:             logWriter.logResponse(log, command);
0:     	return rc;
0:         // Changed this method to use a LogWriter object to actually 
0:         // print the messages to the log, and only in case of logging 
0:         // being active, instead of logging the message directly.
0:         if (logging)
0:             logWriter.logAsyncRequest(log, command);
0:     	FutureResponse rc = next.asyncRequest(command, responseCallback);
0:     	return rc;
0:         // Changed this method to use a LogWriter object to actually 
0:         // print the messages to the log, and only in case of logging 
0:         // being active, instead of logging the message directly.
0:         if( logging && log.isDebugEnabled() ) {
0:             logWriter.logOneWay(log, command);
0:         // Changed this method to use a LogWriter object to actually 
0:         // print the messages to the log, and only in case of logging 
0:         // being active, instead of logging the message directly.
0:         if( logging && log.isDebugEnabled() ) {
0:             logWriter.logReceivedCommand(log, command);
0:         // Changed this method to use a LogWriter object to actually 
0:         // print the messages to the log, and only in case of logging 
0:         // being active, instead of logging the message directly.
0:         if( logging && log.isDebugEnabled() ) {
0:             logWriter.logReceivedException(log, error);
0:     /**
0:      * Gets the associated MBean for this TransportLogger.
0:      * @return the associated MBean for this TransportLogger.
0:      */
0:     public TransportLoggerView getView() {
0:         return view;
0:     }
0: 
0:     /**
0:      * Sets the associated MBean for this TransportLogger.
0:      * @param view the associated MBean for this TransportLogger.
0:      */
0:     public void setView(TransportLoggerView view) {
0:         this.view = view;
0:     }
0:     
0:     
0:     /**
0:      * We need to override this method
0:      * so that we can unregister the associated
0:      * MBean to avoid a memory leak.
0:      */
0:     public void finalize() throws Throwable {
0:         if (view != null) {
0:             view.unregister();    
0:         }
0:     }
0: 
0: 
author:James Strachan
-------------------------------------------------------------------------------
commit:8704338
/////////////////////////////////////////////////////////////////////////
0:             log.debug("RECEIVED: from: "+ command.getFrom() + " : " + command);
commit:436fe42
/////////////////////////////////////////////////////////////////////////
1:         getTransportListener().onCommand(command);
1:         getTransportListener().onException(error);
============================================================================