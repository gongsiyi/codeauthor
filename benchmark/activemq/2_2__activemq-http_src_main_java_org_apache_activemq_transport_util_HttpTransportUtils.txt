1:50604ad: /**
1:50604ad:  * Licensed to the Apache Software Foundation (ASF) under one or more
1:50604ad:  * contributor license agreements.  See the NOTICE file distributed with
1:50604ad:  * this work for additional information regarding copyright ownership.
1:50604ad:  * The ASF licenses this file to You under the Apache License, Version 2.0
1:50604ad:  * (the "License"); you may not use this file except in compliance with
1:50604ad:  * the License.  You may obtain a copy of the License at
1:50604ad:  *
1:50604ad:  *      http://www.apache.org/licenses/LICENSE-2.0
1:50604ad:  *
1:50604ad:  * Unless required by applicable law or agreed to in writing, software
1:50604ad:  * distributed under the License is distributed on an "AS IS" BASIS,
1:50604ad:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:50604ad:  * See the License for the specific language governing permissions and
1:50604ad:  * limitations under the License.
1:50604ad:  */
1:be10b86: package org.apache.activemq.transport.util;
1:be10b86: 
1:be10b86: import javax.servlet.http.HttpServletRequest;
1:be10b86: 
1:be10b86: public class HttpTransportUtils {
1:be10b86: 
1:be10b86:     public static String generateWsRemoteAddress(HttpServletRequest request) {
1:be10b86:         if (request == null) {
1:be10b86:             throw new IllegalArgumentException("HttpServletRequest must not be null.");
1:be10b86:         }
1:be10b86: 
1:be10b86:         StringBuilder remoteAddress = new StringBuilder();
1:be10b86:         String scheme = request.getScheme();
1:be10b86:         remoteAddress.append(scheme != null && scheme.toLowerCase().equals("https") ? "wss://" : "ws://");
1:be10b86:         remoteAddress.append(request.getRemoteAddr());
1:be10b86:         remoteAddress.append(":");
1:be10b86:         remoteAddress.append(request.getRemotePort());
1:be10b86:         return remoteAddress.toString();
1:be10b86:     }
1:31c55f7: 
1:31c55f7:     public static String generateWsRemoteAddress(HttpServletRequest request, String schemePrefix) {
1:31c55f7:         if (request == null) {
1:31c55f7:             throw new IllegalArgumentException("HttpServletRequest must not be null.");
1:31c55f7:         }
1:31c55f7: 
1:31c55f7:         StringBuilder remoteAddress = new StringBuilder();
1:31c55f7:         String scheme = request.getScheme();
1:31c55f7:         if (scheme != null && scheme.equalsIgnoreCase("https")) {
1:31c55f7:             scheme = schemePrefix + "+wss://";
1:31c55f7:         } else {
1:31c55f7:             scheme = schemePrefix + "+ws://";
1:31c55f7:         }
1:31c55f7: 
1:31c55f7:         remoteAddress.append(scheme);
1:31c55f7:         remoteAddress.append(request.getRemoteAddr());
1:31c55f7:         remoteAddress.append(":");
1:31c55f7:         remoteAddress.append(request.getRemotePort());
1:31c55f7: 
1:31c55f7:         return remoteAddress.toString();
1:31c55f7:     }
1:be10b86: }
============================================================================
author:Timothy Bish
-------------------------------------------------------------------------------
commit:31c55f7
/////////////////////////////////////////////////////////////////////////
1: 
1:     public static String generateWsRemoteAddress(HttpServletRequest request, String schemePrefix) {
1:         if (request == null) {
1:             throw new IllegalArgumentException("HttpServletRequest must not be null.");
1:         }
1: 
1:         StringBuilder remoteAddress = new StringBuilder();
1:         String scheme = request.getScheme();
1:         if (scheme != null && scheme.equalsIgnoreCase("https")) {
1:             scheme = schemePrefix + "+wss://";
1:         } else {
1:             scheme = schemePrefix + "+ws://";
1:         }
1: 
1:         remoteAddress.append(scheme);
1:         remoteAddress.append(request.getRemoteAddr());
1:         remoteAddress.append(":");
1:         remoteAddress.append(request.getRemotePort());
1: 
1:         return remoteAddress.toString();
1:     }
commit:50604ad
/////////////////////////////////////////////////////////////////////////
1: /**
1:  * Licensed to the Apache Software Foundation (ASF) under one or more
1:  * contributor license agreements.  See the NOTICE file distributed with
1:  * this work for additional information regarding copyright ownership.
1:  * The ASF licenses this file to You under the Apache License, Version 2.0
1:  * (the "License"); you may not use this file except in compliance with
1:  * the License.  You may obtain a copy of the License at
1:  *
1:  *      http://www.apache.org/licenses/LICENSE-2.0
1:  *
1:  * Unless required by applicable law or agreed to in writing, software
1:  * distributed under the License is distributed on an "AS IS" BASIS,
1:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:  * See the License for the specific language governing permissions and
1:  * limitations under the License.
1:  */
author:Christopher L. Shannon (cshannon)
-------------------------------------------------------------------------------
commit:be10b86
/////////////////////////////////////////////////////////////////////////
1: package org.apache.activemq.transport.util;
1: 
1: import javax.servlet.http.HttpServletRequest;
1: 
1: public class HttpTransportUtils {
1: 
1:     public static String generateWsRemoteAddress(HttpServletRequest request) {
1:         if (request == null) {
1:             throw new IllegalArgumentException("HttpServletRequest must not be null.");
1:         }
1: 
1:         StringBuilder remoteAddress = new StringBuilder();
1:         String scheme = request.getScheme();
1:         remoteAddress.append(scheme != null && scheme.toLowerCase().equals("https") ? "wss://" : "ws://");
1:         remoteAddress.append(request.getRemoteAddr());
1:         remoteAddress.append(":");
1:         remoteAddress.append(request.getRemotePort());
1:         return remoteAddress.toString();
1:     }
1: }
============================================================================