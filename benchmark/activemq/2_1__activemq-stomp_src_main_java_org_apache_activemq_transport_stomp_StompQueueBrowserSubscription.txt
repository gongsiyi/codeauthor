1:0885c60: /**
1:0885c60:  * Licensed to the Apache Software Foundation (ASF) under one or more
1:0885c60:  * contributor license agreements.  See the NOTICE file distributed with
1:0885c60:  * this work for additional information regarding copyright ownership.
1:0885c60:  * The ASF licenses this file to You under the Apache License, Version 2.0
1:0885c60:  * (the "License"); you may not use this file except in compliance with
1:0885c60:  * the License.  You may obtain a copy of the License at
1:0885c60:  *
1:0885c60:  *      http://www.apache.org/licenses/LICENSE-2.0
1:0885c60:  *
1:0885c60:  * Unless required by applicable law or agreed to in writing, software
1:0885c60:  * distributed under the License is distributed on an "AS IS" BASIS,
1:0885c60:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:0885c60:  * See the License for the specific language governing permissions and
1:0885c60:  * limitations under the License.
1:0885c60:  */
1:0885c60: package org.apache.activemq.transport.stomp;
1:0885c60: 
1:0885c60: import java.io.IOException;
1:0885c60: 
1:0885c60: import javax.jms.JMSException;
1:0885c60: 
1:0885c60: import org.apache.activemq.command.ConsumerInfo;
1:0885c60: import org.apache.activemq.command.MessageAck;
1:0885c60: import org.apache.activemq.command.MessageDispatch;
1:0885c60: import org.apache.activemq.command.TransactionId;
1:0885c60: 
1:0885c60: public class StompQueueBrowserSubscription extends StompSubscription {
1:0885c60: 
1:0885c60:     public StompQueueBrowserSubscription(ProtocolConverter stompTransport, String subscriptionId, ConsumerInfo consumerInfo, String transformation) {
1:0885c60:         super(stompTransport, subscriptionId, consumerInfo, transformation);
1:0885c60:     }
1:0885c60: 
1:0885c60:     @Override
1:6d08aca:     void onMessageDispatch(MessageDispatch md, String ackId) throws IOException, JMSException {
1:0885c60: 
1:0885c60:         if (md.getMessage() != null) {
1:6d08aca:             super.onMessageDispatch(md, ackId);
1:0885c60:         } else {
1:0885c60:             StompFrame browseDone = new StompFrame(Stomp.Responses.MESSAGE);
1:0885c60:             browseDone.getHeaders().put(Stomp.Headers.Message.SUBSCRIPTION, this.getSubscriptionId());
1:0885c60:             browseDone.getHeaders().put(Stomp.Headers.Message.BROWSER, "end");
1:0885c60:             browseDone.getHeaders().put(Stomp.Headers.Message.DESTINATION,
1:0885c60:                     protocolConverter.findTranslator(null).convertDestination(protocolConverter, this.destination));
1:0885c60:             browseDone.getHeaders().put(Stomp.Headers.Message.MESSAGE_ID, "0");
1:0885c60: 
1:0885c60:             protocolConverter.sendToStomp(browseDone);
1:0885c60:         }
1:0885c60:     }
1:0885c60: 
1:0885c60:     @Override
1:0885c60:     public MessageAck onStompMessageNack(String messageId, TransactionId transactionId) throws ProtocolException {
1:0885c60:         throw new ProtocolException("Cannot Nack a message on a Queue Browser Subscription.");
1:0885c60:     }
1:0885c60: 
1:0885c60: }
============================================================================
author:Hiram R. Chirino
-------------------------------------------------------------------------------
commit:c5cf038
author:Timothy A. Bish
-------------------------------------------------------------------------------
commit:6d08aca
/////////////////////////////////////////////////////////////////////////
1:     void onMessageDispatch(MessageDispatch md, String ackId) throws IOException, JMSException {
1:             super.onMessageDispatch(md, ackId);
commit:0885c60
/////////////////////////////////////////////////////////////////////////
1: /**
1:  * Licensed to the Apache Software Foundation (ASF) under one or more
1:  * contributor license agreements.  See the NOTICE file distributed with
1:  * this work for additional information regarding copyright ownership.
1:  * The ASF licenses this file to You under the Apache License, Version 2.0
1:  * (the "License"); you may not use this file except in compliance with
1:  * the License.  You may obtain a copy of the License at
1:  *
1:  *      http://www.apache.org/licenses/LICENSE-2.0
1:  *
1:  * Unless required by applicable law or agreed to in writing, software
1:  * distributed under the License is distributed on an "AS IS" BASIS,
1:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:  * See the License for the specific language governing permissions and
1:  * limitations under the License.
1:  */
1: package org.apache.activemq.transport.stomp;
1: 
1: import java.io.IOException;
1: 
1: import javax.jms.JMSException;
1: 
1: import org.apache.activemq.command.ConsumerInfo;
1: import org.apache.activemq.command.MessageAck;
1: import org.apache.activemq.command.MessageDispatch;
1: import org.apache.activemq.command.TransactionId;
1: 
1: public class StompQueueBrowserSubscription extends StompSubscription {
1: 
1:     public StompQueueBrowserSubscription(ProtocolConverter stompTransport, String subscriptionId, ConsumerInfo consumerInfo, String transformation) {
1:         super(stompTransport, subscriptionId, consumerInfo, transformation);
1:     }
1: 
1:     @Override
0:     void onMessageDispatch(MessageDispatch md) throws IOException, JMSException {
1: 
1:         if (md.getMessage() != null) {
0:             super.onMessageDispatch(md);
1:         } else {
1:             StompFrame browseDone = new StompFrame(Stomp.Responses.MESSAGE);
1:             browseDone.getHeaders().put(Stomp.Headers.Message.SUBSCRIPTION, this.getSubscriptionId());
1:             browseDone.getHeaders().put(Stomp.Headers.Message.BROWSER, "end");
1:             browseDone.getHeaders().put(Stomp.Headers.Message.DESTINATION,
1:                     protocolConverter.findTranslator(null).convertDestination(protocolConverter, this.destination));
1:             browseDone.getHeaders().put(Stomp.Headers.Message.MESSAGE_ID, "0");
1: 
1:             protocolConverter.sendToStomp(browseDone);
1:         }
1:     }
1: 
1:     @Override
1:     public MessageAck onStompMessageNack(String messageId, TransactionId transactionId) throws ProtocolException {
1:         throw new ProtocolException("Cannot Nack a message on a Queue Browser Subscription.");
1:     }
1: 
1: }
============================================================================