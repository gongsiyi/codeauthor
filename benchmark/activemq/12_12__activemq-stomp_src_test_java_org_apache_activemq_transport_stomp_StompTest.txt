1:d29ca2a: /**
1:57b4941:  * Licensed to the Apache Software Foundation (ASF) under one or more
1:57b4941:  * contributor license agreements.  See the NOTICE file distributed with
1:57b4941:  * this work for additional information regarding copyright ownership.
1:57b4941:  * The ASF licenses this file to You under the Apache License, Version 2.0
1:57b4941:  * (the "License"); you may not use this file except in compliance with
1:57b4941:  * the License.  You may obtain a copy of the License at
3:d29ca2a:  *
1:230a86c:  *      http://www.apache.org/licenses/LICENSE-2.0
1:d29ca2a:  *
1:d29ca2a:  * Unless required by applicable law or agreed to in writing, software
1:d29ca2a:  * distributed under the License is distributed on an "AS IS" BASIS,
1:d29ca2a:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:d29ca2a:  * See the License for the specific language governing permissions and
1:d29ca2a:  * limitations under the License.
1:d29ca2a:  */
1:d29ca2a: package org.apache.activemq.transport.stomp;
1:e426de8: 
1:4751a9c: import static org.junit.Assert.assertEquals;
1:4751a9c: import static org.junit.Assert.assertFalse;
1:4751a9c: import static org.junit.Assert.assertNotNull;
1:4751a9c: import static org.junit.Assert.assertNull;
1:4751a9c: import static org.junit.Assert.assertTrue;
1:4751a9c: import static org.junit.Assert.fail;
1:4751a9c: 
1:3b626c9: import java.io.IOException;
1:72dfbfa: import java.io.StringReader;
1:e426de8: import java.net.SocketTimeoutException;
1:e426de8: import java.util.Arrays;
1:e426de8: import java.util.HashMap;
1:41a1007: import java.util.List;
1:e426de8: import java.util.Map;
1:e426de8: import java.util.UUID;
1:e426de8: import java.util.concurrent.TimeUnit;
1:e426de8: import java.util.regex.Matcher;
1:e426de8: import java.util.regex.Pattern;
1:1236bbf: 
1:4751a9c: import javax.jms.BytesMessage;
1:4751a9c: import javax.jms.Connection;
1:4751a9c: import javax.jms.JMSException;
1:4751a9c: import javax.jms.MapMessage;
1:4751a9c: import javax.jms.Message;
1:4751a9c: import javax.jms.MessageConsumer;
1:4751a9c: import javax.jms.MessageProducer;
1:4751a9c: import javax.jms.ObjectMessage;
1:4751a9c: import javax.jms.Session;
1:4751a9c: import javax.jms.TextMessage;
1:e426de8: import javax.management.ObjectName;
1:4751a9c: 
1:41a1007: import org.apache.activemq.broker.BrokerService;
1:e75affa: import org.apache.activemq.broker.jmx.BrokerViewMBean;
1:3060a64: import org.apache.activemq.broker.jmx.QueueViewMBean;
1:41a1007: import org.apache.activemq.broker.region.AbstractSubscription;
1:41a1007: import org.apache.activemq.broker.region.RegionBroker;
1:41a1007: import org.apache.activemq.broker.region.Subscription;
1:1e5d212: import org.apache.activemq.broker.region.policy.PolicyEntry;
1:1e5d212: import org.apache.activemq.broker.region.policy.PolicyMap;
1:41a1007: import org.apache.activemq.command.ActiveMQDestination;
1:e75affa: import org.apache.activemq.command.ActiveMQQueue;
1:e75affa: import org.apache.activemq.command.ActiveMQTextMessage;
1:93a379f: import org.apache.activemq.util.Wait;
1:1236bbf: import org.junit.Test;
1:8bf987b: import org.slf4j.Logger;
1:8bf987b: import org.slf4j.LoggerFactory;
1:4751a9c: 
1:4751a9c: import com.thoughtworks.xstream.XStream;
1:4751a9c: import com.thoughtworks.xstream.io.HierarchicalStreamReader;
1:4751a9c: import com.thoughtworks.xstream.io.json.JettisonMappedXmlDriver;
1:4751a9c: import com.thoughtworks.xstream.io.xml.XppReader;
1:4751a9c: import com.thoughtworks.xstream.io.xml.xppdom.XppFactory;
1:72dfbfa: 
1:1236bbf: public class StompTest extends StompTestSupport {
1:8bf987b:     private static final Logger LOG = LoggerFactory.getLogger(StompTest.class);
1:e426de8: 
1:93a379f:     protected Connection connection;
1:93a379f:     protected Session session;
1:93a379f:     protected ActiveMQQueue queue;
1:72dfbfa:     protected XStream xstream;
1:72dfbfa: 
1:e75affa:     private final String xmlObject = "<pojo>\n"
1:3910056:             + "  <name>Dejan</name>\n"
1:caabb6c:             + "  <city>Belgrade</city>\n"
1:3910056:             + "</pojo>";
1:0885c60: 
1:caabb6c:     private String xmlMap = "<map>\n"
1:fee7f6a:         + "  <entry>\n"
1:caabb6c:         + "    <string>name</string>\n"
1:3910056:         + "    <string>Dejan</string>\n"
1:caabb6c:         + "  </entry>\n"
1:caabb6c:         + "  <entry>\n"
1:fee7f6a:         + "    <string>city</string>\n"
1:caabb6c:         + "    <string>Belgrade</string>\n"
1:caabb6c:         + "  </entry>\n"
1:3910056:         + "</map>\n";
1:0885c60: 
1:e75affa:     private final String jsonObject = "{\"pojo\":{"
1:3910056:         + "\"name\":\"Dejan\","
1:caabb6c:         + "\"city\":\"Belgrade\""
1:3910056:         + "}}";
1:1c26408: 
1:caabb6c:     private String jsonMap = "{\"map\":{"
1:3910056:         + "\"entry\":["
1:3910056:         + "{\"string\":[\"name\",\"Dejan\"]},"
1:caabb6c:         + "{\"string\":[\"city\",\"Belgrade\"]}"
1:caabb6c:         + "]"
1:3910056:         + "}}";
1:b0f24f3: 
1:e75affa:     @Override
1:1236bbf:     public void setUp() throws Exception {
1:8694011:         // The order of the entries is different when using ibm jdk 5.
1:8694011:         if (System.getProperty("java.vendor").equals("IBM Corporation")
1:8694011:             && System.getProperty("java.version").startsWith("1.5")) {
1:caabb6c:             xmlMap = "<map>\n"
1:caabb6c:                 + "  <entry>\n"
1:caabb6c:                 + "    <string>city</string>\n"
1:caabb6c:                 + "    <string>Belgrade</string>\n"
1:caabb6c:                 + "  </entry>\n"
1:fee7f6a:                 + "  <entry>\n"
1:caabb6c:                 + "    <string>name</string>\n"
1:fee7f6a:                 + "    <string>Dejan</string>\n"
1:caabb6c:                 + "  </entry>\n"
1:fee7f6a:                 + "</map>\n";
1:caabb6c:             jsonMap = "{\"map\":{"
1:fee7f6a:                 + "\"entry\":["
1:caabb6c:                 + "{\"string\":[\"city\",\"Belgrade\"]},"
1:fee7f6a:                 + "{\"string\":[\"name\",\"Dejan\"]}"
1:caabb6c:                 + "]"
1:fee7f6a:                 + "}}";
1:fee7f6a:         }
1:1236bbf: 
1:1e5d212:         queue = new ActiveMQQueue(getQueueName());
1:1236bbf:         super.setUp();
1:5b99f11: 
1:90deed4:         stompConnect();
1:24f73a5: 
1:471ea33:         connection = cf.createConnection("system", "manager");
1:230a86c:         session = connection.createSession(false, Session.AUTO_ACKNOWLEDGE);
1:d29ca2a:         connection.start();
1:72dfbfa:         xstream = new XStream();
1:72dfbfa:         xstream.processAnnotations(SamplePojo.class);
1:5b99f11:     }
1:caabb6c: 
1:e75affa:     @Override
1:1e5d212:     public void applyBrokerPolicies() {
1:1e5d212:         PolicyMap policyMap = new PolicyMap();
1:1e5d212:         PolicyEntry persistRedelivery = new PolicyEntry();
1:1e5d212:         persistRedelivery.setPersistJMSRedelivered(true);
1:1e5d212:         policyMap.put(queue, persistRedelivery);
1:1e5d212:         brokerService.setDestinationPolicy(policyMap);
1:1e5d212:     }
1:1e5d212: 
1:1e5d212:     @Override
1:1236bbf:     public void tearDown() throws Exception {
1:caabb6c:         try {
1:caabb6c:             connection.close();
1:caabb6c:         } catch(Exception e) {
1:caabb6c:             // Some tests explicitly disconnect from stomp so can ignore
1:caabb6c:         } finally {
1:1236bbf:             super.tearDown();
1:d8bdf5b:         }
1:7aec12e:     }
1:caabb6c: 
1:3777809:     public void sendMessage(String msg) throws Exception {
1:a603c40:         sendMessage(msg, "foo", "xyz");
1:7aec12e:     }
1:1c26408: 
1:a603c40:     public void sendMessage(String msg, String propertyName, String propertyValue) throws JMSException {
1:d29ca2a:         MessageProducer producer = session.createProducer(queue);
1:3777809:         TextMessage message = session.createTextMessage(msg);
1:a603c40:         message.setStringProperty(propertyName, propertyValue);
1:d29ca2a:         producer.send(message);
1:68a8b6d:     }
1:681cf04: 
1:230a86c:     public void sendBytesMessage(byte[] msg) throws Exception {
1:7d4cddd:         MessageProducer producer = session.createProducer(queue);
1:7d4cddd:         BytesMessage message = session.createBytesMessage();
1:7d4cddd:         message.writeBytes(msg);
1:7d4cddd:         producer.send(message);
1:90deed4:     }
1:681cf04: 
1:540a66b:     @Test(timeout = 60000)
1:d29ca2a:     public void testConnect() throws Exception {
1:681cf04: 
1:956724e:         String connectFrame = "CONNECT\n" + "login:system\n" + "passcode:manager\n" + "request-id:1\n" + "\n" + Stomp.NULL;
1:fc00993:         stompConnection.sendFrame(connectFrame);
1:681cf04: 
1:2d5bb84:         String f = stompConnection.receiveFrame();
1:d29ca2a:         assertTrue(f.startsWith("CONNECTED"));
1:8ce74fa:         assertTrue(f.indexOf("response-id:1") >= 0);
1:90deed4:     }
1:876ddef: 
1:540a66b:     @Test(timeout = 60000)
1:d29ca2a:     public void testSendMessage() throws Exception {
1:f6ebeec: 
1:2b5608f:         MessageConsumer consumer = session.createConsumer(queue);
1:f6ebeec: 
1:956724e:         String frame = "CONNECT\n" + "login:system\n" + "passcode:manager\n\n" + Stomp.NULL;
1:5b99f11:         stompConnection.sendFrame(frame);
1:3060a64: 
1:caabb6c:         frame = stompConnection.receiveFrame();
1:4c92244:         assertTrue(frame.startsWith("CONNECTED"));
1:3060a64: 
1:230a86c:         frame = "SEND\n" + "destination:/queue/" + getQueueName() + "\n\n" + "Hello World" + Stomp.NULL;
1:a6f1d75: 
1:3060a64:         stompConnection.sendFrame(frame);
1:f8a601a: 
1:fee7f6a:         TextMessage message = (TextMessage)consumer.receive(2500);
1:d29ca2a:         assertNotNull(message);
1:caabb6c:         assertEquals("Hello World", message.getText());
1:f8a601a: 
1:e9e8fd1:         // Make sure that the timestamp is valid - should
1:e9e8fd1:         // be very close to the current time.
1:e9e8fd1:         long tnow = System.currentTimeMillis();
1:e9e8fd1:         long tmsg = message.getJMSTimestamp();
1:230a86c:         assertTrue(Math.abs(tnow - tmsg) < 1000);
1:4c92244:     }
1:caabb6c: 
1:540a66b:     @Test(timeout = 60000)
1:981cef5:     public void testJMSXGroupIdCanBeSet() throws Exception {
1:caabb6c: 
1:981cef5:         MessageConsumer consumer = session.createConsumer(queue);
1:caabb6c: 
1:956724e:         String frame = "CONNECT\n" + "login:system\n" + "passcode:manager\n\n" + Stomp.NULL;
1:24f73a5:         stompConnection.sendFrame(frame);
1:caabb6c: 
1:876ddef:         frame = stompConnection.receiveFrame();
1:2b5608f:         assertTrue(frame.startsWith("CONNECTED"));
1:caabb6c: 
1:956724e:         frame = "SEND\n" + "destination:/queue/" + getQueueName() + "\n" + "JMSXGroupID:TEST\n\n" + "Hello World" + Stomp.NULL;
1:caabb6c: 
1:caabb6c:         stompConnection.sendFrame(frame);
1:a57108c: 
1:fee7f6a:         TextMessage message = (TextMessage)consumer.receive(2500);
1:981cef5:         assertNotNull(message);
1:981cef5:         assertEquals("TEST", ((ActiveMQTextMessage)message).getGroupID());
1:471ea33:     }
1:a57108c: 
1:540a66b:     @Test(timeout = 60000)
1:b5bba09:     public void testSendMessageWithCustomHeadersAndSelector() throws Exception {
1:1c26408: 
1:c4c5895:         MessageConsumer consumer = session.createConsumer(queue, "foo = 'abc'");
1:1c26408: 
1:956724e:         String frame = "CONNECT\n" + "login:system\n" + "passcode:manager\n\n" + Stomp.NULL;
1:caabb6c:         stompConnection.sendFrame(frame);
1:584d52c: 
1:4c92244:         frame = stompConnection.receiveFrame();
1:230a86c:         assertTrue(frame.startsWith("CONNECTED"));
1:876ddef: 
1:230a86c:         frame = "SEND\n" + "foo:abc\n" + "bar:123\n" + "destination:/queue/" + getQueueName() + "\n\n" + "Hello World" + Stomp.NULL;
1:876ddef: 
1:603b215:         stompConnection.sendFrame(frame);
1:876ddef: 
1:fee7f6a:         TextMessage message = (TextMessage)consumer.receive(2500);
1:c4c5895:         assertNotNull(message);
1:d29ca2a:         assertEquals("Hello World", message.getText());
1:b5bba09:         assertEquals("foo", "abc", message.getStringProperty("foo"));
1:b5bba09:         assertEquals("bar", "123", message.getStringProperty("bar"));
1:981cef5:     }
1:9807ee3: 
1:540a66b:     @Test(timeout = 60000)
1:e75affa:     public void testSendMessageWithDelay() throws Exception {
1:876ddef: 
1:e75affa:         MessageConsumer consumer = session.createConsumer(queue);
1:876ddef: 
1:956724e:         String frame = "CONNECT\n" + "login:system\n" + "passcode:manager\n\n" + Stomp.NULL;
1:876ddef:         stompConnection.sendFrame(frame);
1:f6ebeec: 
1:e75affa:         frame = stompConnection.receiveFrame();
1:e75affa:         assertTrue(frame.startsWith("CONNECTED"));
1:f6ebeec: 
1:3845aaa:         frame = "SEND\n" + "AMQ_SCHEDULED_DELAY:2000\n"  + "destination:/queue/" + getQueueName() + "\n\n" + "Hello World" + Stomp.NULL;
1:f6ebeec: 
1:876ddef:         stompConnection.sendFrame(frame);
1:f6ebeec: 
1:3845aaa:         TextMessage message = (TextMessage)consumer.receive(1000);
1:e75affa:         assertNull(message);
1:3845aaa:         message = (TextMessage)consumer.receive(2500);
1:e75affa:         assertNotNull(message);
1:e75affa:     }
1:f6ebeec: 
1:540a66b:     @Test(timeout = 60000)
1:b5bba09:     public void testSendMessageWithStandardHeaders() throws Exception {
1:f6ebeec: 
1:d29ca2a:         MessageConsumer consumer = session.createConsumer(queue);
1:f6ebeec: 
1:956724e:         String frame = "CONNECT\n" + "login:system\n" + "passcode:manager\n\n" + Stomp.NULL;
1:876ddef:         stompConnection.sendFrame(frame);
1:f6ebeec: 
1:2d5bb84:         frame = stompConnection.receiveFrame();
1:981cef5:         assertTrue(frame.startsWith("CONNECTED"));
1:f6ebeec: 
1:90deed4:         frame = "SEND\n" + "correlation-id:c123\n" + "priority:3\n" + "type:t345\n" + "JMSXGroupID:abc\n" + "foo:abc\n" + "bar:123\n" + "destination:/queue/" + getQueueName() + "\n\n" + "Hello World"
1:90deed4:                 + Stomp.NULL;
1:f6ebeec: 
1:e75affa:         stompConnection.sendFrame(frame);
1:f6ebeec: 
1:fee7f6a:         TextMessage message = (TextMessage)consumer.receive(2500);
1:b5bba09:         assertNotNull(message);
1:2b5608f:         assertEquals("Hello World", message.getText());
1:b5bba09:         assertEquals("JMSCorrelationID", "c123", message.getJMSCorrelationID());
1:2f60549:         assertEquals("getJMSType", "t345", message.getJMSType());
1:2f60549:         assertEquals("getJMSPriority", 3, message.getJMSPriority());
1:b5bba09:         assertEquals("foo", "abc", message.getStringProperty("foo"));
1:b5bba09:         assertEquals("bar", "123", message.getStringProperty("bar"));
1:d8bdf5b: 
1:b5bba09:         assertEquals("JMSXGroupID", "abc", message.getStringProperty("JMSXGroupID"));
1:230a86c:         ActiveMQTextMessage amqMessage = (ActiveMQTextMessage)message;
1:b5bba09:         assertEquals("GroupID", "abc", amqMessage.getGroupID());
1:2b5608f:     }
1:24f73a5: 
1:540a66b:     @Test(timeout = 60000)
1:14722f8:     public void testSendMessageWithNoPriorityReceivesDefault() throws Exception {
1:14722f8: 
1:14722f8:         MessageConsumer consumer = session.createConsumer(queue);
1:14722f8: 
1:956724e:         String frame = "CONNECT\n" + "login:system\n" + "passcode:manager\n\n" + Stomp.NULL;
1:14722f8:         stompConnection.sendFrame(frame);
1:14722f8: 
1:14722f8:         frame = stompConnection.receiveFrame();
1:14722f8:         assertTrue(frame.startsWith("CONNECTED"));
1:14722f8: 
1:14722f8:         frame = "SEND\n" + "correlation-id:c123\n" + "destination:/queue/" + getQueueName() + "\n\n" + "Hello World"
1:14722f8:                 + Stomp.NULL;
1:14722f8: 
1:14722f8:         stompConnection.sendFrame(frame);
1:14722f8: 
1:14722f8:         TextMessage message = (TextMessage)consumer.receive(2500);
1:14722f8:         assertNotNull(message);
1:14722f8:         assertEquals("Hello World", message.getText());
1:14722f8:         assertEquals("getJMSPriority", 4, message.getJMSPriority());
1:14722f8:     }
1:0885c60: 
1:540a66b:     @Test(timeout = 60000)
1:adf70bc:     public void testSendFrameWithInvalidAction() throws Exception {
1:adf70bc: 
1:adf70bc:         String frame = "CONNECT\n" + "login:system\n" + "passcode:manager\n\n" + Stomp.NULL;
1:adf70bc:         stompConnection.sendFrame(frame);
1:adf70bc: 
1:adf70bc:         frame = stompConnection.receiveFrame();
1:adf70bc:         assertTrue(frame.startsWith("CONNECTED"));
1:adf70bc: 
1:adf70bc:         final int connectionCount = getProxyToBroker().getCurrentConnectionsCount();
1:adf70bc: 
1:adf70bc:         frame = "SED\n" + "AMQ_SCHEDULED_DELAY:2000\n"  + "destination:/queue/" + getQueueName() + "\n\n" + "Hello World" + Stomp.NULL;
1:adf70bc:         stompConnection.sendFrame(frame);
1:adf70bc: 
1:adf70bc:         frame = stompConnection.receiveFrame();
1:adf70bc:         assertTrue(frame.startsWith("ERROR"));
1:adf70bc: 
1:adf70bc:         assertTrue("Should drop connection", Wait.waitFor(new Wait.Condition() {
1:adf70bc: 
1:adf70bc:             @Override
1:adf70bc:             public boolean isSatisified() throws Exception {
1:adf70bc:                 return connectionCount > getProxyToBroker().getCurrentConnectionsCount();
1:adf70bc:             }
1:adf70bc:         }));
1:adf70bc:     }
1:adf70bc: 
1:adf70bc:     @Test(timeout = 60000)
1:24f73a5:     public void testReceipts() throws Exception {
1:14722f8: 
1:24f73a5:         StompConnection receiver = new StompConnection();
1:1236bbf:         receiver.open(createSocket());
1:956724e:         String frame = "CONNECT\n" + "login:system\n" + "passcode:manager\n\n" + Stomp.NULL;
1:24f73a5:         receiver.sendFrame(frame);
1:24f73a5: 
1:24f73a5:         frame = receiver.receiveFrame();
1:24f73a5:         assertTrue(frame.startsWith("CONNECTED"));
1:24f73a5: 
1:24f73a5:         frame = "SUBSCRIBE\n" + "destination:/queue/" + getQueueName() + "\n" + "ack:auto\n\n" + Stomp.NULL;
1:24f73a5:         receiver.sendFrame(frame);
1:5774d00: 
1:956724e:         frame = "CONNECT\n" + "login:system\n" + "passcode:manager\n\n" + Stomp.NULL;
1:f8a601a:         stompConnection.sendFrame(frame);
1:24f73a5: 
1:24f73a5:         frame = stompConnection.receiveFrame();
1:24f73a5:         assertTrue(frame.startsWith("CONNECTED"));
1:24f73a5: 
1:24f73a5:         frame = "SEND\n" + "destination:/queue/" + getQueueName() + "\n" + "receipt: msg-1\n" + "\n\n" + "Hello World" + Stomp.NULL;
1:24f73a5:         stompConnection.sendFrame(frame);
1:24f73a5: 
1:24f73a5:         frame = receiver.receiveFrame();
1:24f73a5:         assertTrue(frame.startsWith("MESSAGE"));
1:24f73a5:         assertTrue("Stomp Message does not contain receipt request", frame.indexOf(Stomp.Headers.RECEIPT_REQUESTED) == -1);
1:a6f1d75: 
1:24f73a5:         frame = stompConnection.receiveFrame();
1:24f73a5:         assertTrue(frame.startsWith("RECEIPT"));
1:24f73a5:         assertTrue("Receipt contains correct receipt-id", frame.indexOf(Stomp.Headers.Response.RECEIPT_ID) >= 0);
1:24f73a5: 
1:6b2786a:         frame = "DISCONNECT\n" + "receipt: dis-1\n" + "\n\n" + Stomp.NULL;
1:3e022d8:         receiver.sendFrame(frame);
1:6b2786a:         frame = receiver.receiveFrame();
1:6b2786a:         assertTrue(frame.startsWith("RECEIPT"));
1:6b2786a:         assertTrue("Receipt contains correct receipt-id", frame.indexOf(Stomp.Headers.Response.RECEIPT_ID) >= 0);
1:6b2786a:         receiver.close();
1:24f73a5: 
1:24f73a5:         MessageConsumer consumer = session.createConsumer(queue);
1:24f73a5: 
1:24f73a5:         frame = "SEND\n" + "destination:/queue/" + getQueueName() + "\n" + "receipt: msg-1\n" + "\n\n" + "Hello World" + Stomp.NULL;
1:a6f1d75:         stompConnection.sendFrame(frame);
1:24f73a5: 
1:24f73a5:         frame = stompConnection.receiveFrame();
1:24f73a5:         assertTrue(frame.startsWith("RECEIPT"));
1:24f73a5:         assertTrue("Receipt contains correct receipt-id", frame.indexOf(Stomp.Headers.Response.RECEIPT_ID) >= 0);
1:24f73a5: 
1:93a379f:         TextMessage message = (TextMessage)consumer.receive(10000);
1:24f73a5:         assertNotNull(message);
1:24f73a5:         assertNull("JMS Message does not contain receipt request", message.getStringProperty(Stomp.Headers.RECEIPT_REQUESTED));
1:93a379f:     }
1:24f73a5: 
1:540a66b:     @Test(timeout = 60000)
1:ba0c1e5:     public void testSubscriptionReceipts() throws Exception {
1:3845aaa:         final int done = 20;
1:ba0c1e5:         int count = 0;
1:2f5ec04:         int receiptId = 0;
1:24f73a5: 
1:ba0c1e5:         do {
1:ba0c1e5:             StompConnection sender = new StompConnection();
1:1236bbf:             sender.open(createSocket());
1:956724e:             String frame = "CONNECT\n" + "login:system\n" + "passcode:manager\n\n" + Stomp.NULL;
1:ba0c1e5:             sender.sendFrame(frame);
1:24f73a5: 
1:ba0c1e5:             frame = sender.receiveFrame();
1:ba0c1e5:             assertTrue(frame.startsWith("CONNECTED"));
1:24f73a5: 
1:93a379f:             frame = "SEND\n" + "destination:/queue/" + getQueueName()  + "\n"  + "receipt: " + (receiptId++) + "\n" + "Hello World:" + (count++) + "\n\n" +  Stomp.NULL;
1:ba0c1e5:             sender.sendFrame(frame);
1:2f5ec04:             frame = sender.receiveFrame();
1:2f5ec04:             assertTrue("" + frame, frame.startsWith("RECEIPT"));
1:1c26408: 
1:ba0c1e5:             sender.disconnect();
1:d8bdf5b: 
1:ba0c1e5:             StompConnection receiver = new StompConnection();
1:1236bbf:             receiver.open(createSocket());
1:d8bdf5b: 
1:956724e:             frame = "CONNECT\n" + "login:system\n" + "passcode:manager\n\n" + Stomp.NULL;
1:ba0c1e5:             receiver.sendFrame(frame);
1:d8bdf5b: 
1:ba0c1e5:             frame = receiver.receiveFrame();
1:ba0c1e5:             assertTrue(frame.startsWith("CONNECTED"));
1:d8bdf5b: 
1:2f5ec04:             frame = "SUBSCRIBE\n" + "destination:/queue/" + getQueueName() + "\n"  + "receipt: " +  (receiptId++)  + "\n\n" + Stomp.NULL;
1:ba0c1e5:             receiver.sendFrame(frame);
1:d8bdf5b: 
1:ba0c1e5:             frame = receiver.receiveFrame();
1:ba0c1e5:             assertTrue("" + frame, frame.startsWith("RECEIPT"));
1:ba0c1e5:             assertTrue("Receipt contains receipt-id", frame.indexOf(Stomp.Headers.Response.RECEIPT_ID) >= 0);
1:ba0c1e5:             frame = receiver.receiveFrame();
1:ba0c1e5:             assertTrue("" + frame, frame.startsWith("MESSAGE"));
1:7aec12e: 
1:2f5ec04:             // remove suscription  so we don't hang about and get next message
1:2f5ec04:             frame = "UNSUBSCRIBE\n" + "destination:/queue/" + getQueueName() + "\n"  + "receipt: " +  (receiptId++)  + "\n\n" + Stomp.NULL;
1:2f5ec04:             receiver.sendFrame(frame);
1:2f5ec04:             frame = receiver.receiveFrame();
1:2f5ec04:             assertTrue("" + frame, frame.startsWith("RECEIPT"));
1:7aec12e: 
1:24f73a5:             receiver.disconnect();
1:ba0c1e5:         } while (count < done);
1:24f73a5:     }
1:24f73a5: 
1:540a66b:     @Test(timeout = 60000)
1:d29ca2a:     public void testSubscribeWithAutoAck() throws Exception {
1:7aec12e: 
1:956724e:         String frame = "CONNECT\n" + "login:system\n" + "passcode:manager\n\n" + Stomp.NULL;
1:24f73a5:         stompConnection.sendFrame(frame);
1:7aec12e: 
1:2d5bb84:         frame = stompConnection.receiveFrame();
1:d29ca2a:         assertTrue(frame.startsWith("CONNECTED"));
1:e75affa: 
1:230a86c:         frame = "SUBSCRIBE\n" + "destination:/queue/" + getQueueName() + "\n" + "ack:auto\n\n" + Stomp.NULL;
1:e75affa:         stompConnection.sendFrame(frame);
1:e75affa: 
1:1236bbf:         sendMessage(name.getMethodName());
1:e75affa: 
1:2d5bb84:         frame = stompConnection.receiveFrame();
1:d29ca2a:         assertTrue(frame.startsWith("MESSAGE"));
1:ba0c1e5:     }
1:e75affa: 
1:540a66b:     @Test(timeout = 60000)
1:230a86c:     public void testSubscribeWithAutoAckAndBytesMessage() throws Exception {
1:e75affa: 
1:956724e:         String frame = "CONNECT\n" + "login:system\n" + "passcode:manager\n\n" + Stomp.NULL;
1:4c92244:         stompConnection.sendFrame(frame);
1:e75affa: 
1:2d5bb84:         frame = stompConnection.receiveFrame();
1:d29ca2a:         assertTrue(frame.startsWith("CONNECTED"));
1:e75affa: 
1:230a86c:         frame = "SUBSCRIBE\n" + "destination:/queue/" + getQueueName() + "\n" + "ack:auto\n\n" + Stomp.NULL;
1:4c92244:         stompConnection.sendFrame(frame);
1:f866f77: 
1:90deed4:         sendBytesMessage(new byte[] {
1:90deed4:             1, 2, 3, 4, 5
1:93a379f:         });
1:1ec71bd: 
1:2d5bb84:         frame = stompConnection.receiveFrame();
1:a603c40:         assertTrue(frame.startsWith("MESSAGE"));
1:4c92244: 
1:7d4cddd:         Pattern cl = Pattern.compile("Content-length:\\s*(\\d+)", Pattern.CASE_INSENSITIVE);
1:fc00993:         Matcher clMmatcher = cl.matcher(frame);
1:fc00993:         assertTrue(clMmatcher.find());
1:fc00993:         assertEquals("5", clMmatcher.group(1));
1:4c92244: 
1:85df0e6:         assertFalse(Pattern.compile("type:\\s*null", Pattern.CASE_INSENSITIVE).matcher(frame).find());
3:d29ca2a:     }
1:4c92244: 
1:540a66b:     @Test(timeout = 60000)
1:584d52c:     public void testBytesMessageWithNulls() throws Exception {
1:584d52c: 
1:956724e:         String frame = "CONNECT\n" + "login:system\n" + "passcode:manager\n\n" + Stomp.NULL;
1:584d52c:         stompConnection.sendFrame(frame);
1:584d52c: 
1:584d52c:         frame = stompConnection.receiveFrame();
1:584d52c:         assertTrue(frame.startsWith("CONNECTED"));
1:584d52c: 
1:b4f21b6:         frame = "SEND\n" + "destination:/queue/" + getQueueName() + "\ncontent-length:5" + " \n\n" + "\u0001\u0002\u0000\u0004\u0005" + Stomp.NULL;
1:584d52c:         stompConnection.sendFrame(frame);
1:584d52c: 
1:584d52c:         frame = "SUBSCRIBE\n" + "destination:/queue/" + getQueueName() + "\n" + "ack:auto\n\n" + Stomp.NULL;
1:584d52c:         stompConnection.sendFrame(frame);
1:584d52c: 
1:584d52c:         StompFrame message = stompConnection.receive();
1:584d52c:         assertTrue(message.getAction().startsWith("MESSAGE"));
1:584d52c: 
1:584d52c:         String length = message.getHeaders().get("content-length");
1:584d52c:         assertEquals("5", length);
1:f8a601a: 
1:584d52c:         assertEquals(5, message.getContent().length);
1:f8a601a:     }
1:f8a601a: 
1:540a66b:     @Test(timeout = 60000)
1:f8a601a:     public void testSendMultipleBytesMessages() throws Exception {
1:f8a601a: 
1:0885c60:         final int MSG_COUNT = 50;
1:f8a601a: 
1:956724e:         String frame = "CONNECT\n" + "login:system\n" + "passcode:manager\n\n" + Stomp.NULL;
1:f8a601a:         stompConnection.sendFrame(frame);
1:f8a601a: 
1:f8a601a:         frame = stompConnection.receiveFrame();
1:f8a601a:         assertTrue(frame.startsWith("CONNECTED"));
1:f8a601a: 
1:f8a601a:         for( int ix = 0; ix < MSG_COUNT; ix++) {
1:b4f21b6:             frame = "SEND\n" + "destination:/queue/" + getQueueName() + "\ncontent-length:5" + " \n\n" + "\u0001\u0002\u0000\u0004\u0005" + Stomp.NULL;
1:f8a601a:             stompConnection.sendFrame(frame);
1:f8a601a:         }
1:f8a601a: 
1:f8a601a:         frame = "SUBSCRIBE\n" + "destination:/queue/" + getQueueName() + "\n" + "ack:auto\n\n" + Stomp.NULL;
1:f8a601a:         stompConnection.sendFrame(frame);
1:f8a601a: 
1:f8a601a:         for( int ix = 0; ix < MSG_COUNT; ix++) {
1:f8a601a:             StompFrame message = stompConnection.receive();
1:f8a601a:             assertTrue(message.getAction().startsWith("MESSAGE"));
1:f8a601a: 
1:f8a601a:             String length = message.getHeaders().get("content-length");
1:f8a601a:             assertEquals("5", length);
1:f8a601a: 
1:f8a601a:             assertEquals(5, message.getContent().length);
1:f8a601a:         }
1:d29ca2a:     }
1:f8a601a: 
1:540a66b:     @Test(timeout = 60000)
1:dee685f:     public void testSubscribeWithMessageSentWithProperties() throws Exception {
1:4c92244: 
1:956724e:         String frame = "CONNECT\n" + "login:system\n" + "passcode:manager\n\n" + Stomp.NULL;
1:584d52c:         stompConnection.sendFrame(frame);
1:4c92244: 
1:2d5bb84:         frame = stompConnection.receiveFrame();
1:dee685f:         assertTrue(frame.startsWith("CONNECTED"));
1:4c92244: 
1:230a86c:         frame = "SUBSCRIBE\n" + "destination:/queue/" + getQueueName() + "\n" + "ack:auto\n\n" + Stomp.NULL;
1:4c92244:         stompConnection.sendFrame(frame);
1:4c92244: 
1:dee685f:         MessageProducer producer = session.createProducer(queue);
1:dee685f:         TextMessage message = session.createTextMessage("Hello World");
1:dee685f:         message.setStringProperty("s", "value");
1:dee685f:         message.setBooleanProperty("n", false);
1:230a86c:         message.setByteProperty("byte", (byte)9);
1:dee685f:         message.setDoubleProperty("d", 2.0);
1:230a86c:         message.setFloatProperty("f", (float)6.0);
1:dee685f:         message.setIntProperty("i", 10);
1:dee685f:         message.setLongProperty("l", 121);
1:230a86c:         message.setShortProperty("s", (short)12);
1:dee685f:         producer.send(message);
1:4c92244: 
1:2d5bb84:         frame = stompConnection.receiveFrame();
1:dee685f:         assertTrue(frame.startsWith("MESSAGE"));
1:dee685f:     }
1:4c92244: 
1:540a66b:     @Test(timeout = 60000)
1:01b50e9:     public void testMessagesAreInOrder() throws Exception {
1:01b50e9:         int ctr = 10;
1:01b50e9:         String[] data = new String[ctr];
1:882c553: 
1:956724e:         String frame = "CONNECT\n" + "login:system\n" + "passcode:manager\n\n" + Stomp.NULL;
1:4c92244:         stompConnection.sendFrame(frame);
1:882c553: 
1:2d5bb84:         frame = stompConnection.receiveFrame();
1:b5bba09:         assertTrue(frame.startsWith("CONNECTED"));
1:2f5ec04: 
1:230a86c:         frame = "SUBSCRIBE\n" + "destination:/queue/" + getQueueName() + "\n" + "ack:auto\n\n" + Stomp.NULL;
1:2d5bb84:         stompConnection.sendFrame(frame);
1:2f5ec04: 
1:01b50e9:         for (int i = 0; i < ctr; ++i) {
1:01b50e9:             data[i] = getName() + i;
1:01b50e9:             sendMessage(data[i]);
1:d29ca2a:         }
1:ba0c1e5: 
1:01b50e9:         for (int i = 0; i < ctr; ++i) {
1:2d5bb84:             frame = stompConnection.receiveFrame();
1:230a86c:             assertTrue("Message not in order", frame.indexOf(data[i]) >= 0);
1:d29ca2a:         }
1:ba0c1e5: 
1:01b50e9:         // sleep a while before publishing another set of messages
1:388c16d:         TimeUnit.MILLISECONDS.sleep(500);
1:ba0c1e5: 
1:01b50e9:         for (int i = 0; i < ctr; ++i) {
1:01b50e9:             data[i] = getName() + ":second:" + i;
1:01b50e9:             sendMessage(data[i]);
1:d29ca2a:         }
1:ba0c1e5: 
1:01b50e9:         for (int i = 0; i < ctr; ++i) {
1:2d5bb84:             frame = stompConnection.receiveFrame();
1:230a86c:             assertTrue("Message not in order", frame.indexOf(data[i]) >= 0);
1:d29ca2a:         }
1:d29ca2a:     }
1:ba0c1e5: 
1:540a66b:     @Test(timeout = 60000)
1:a603c40:     public void testSubscribeWithAutoAckAndSelector() throws Exception {
1:ba0c1e5: 
1:956724e:         String frame = "CONNECT\n" + "login:system\n" + "passcode:manager\n\n" + Stomp.NULL;
1:2d5bb84:         stompConnection.sendFrame(frame);
1:ba0c1e5: 
1:2d5bb84:         frame = stompConnection.receiveFrame();
1:a603c40:         assertTrue(frame.startsWith("CONNECTED"));
1:ba0c1e5: 
1:230a86c:         frame = "SUBSCRIBE\n" + "destination:/queue/" + getQueueName() + "\n" + "selector: foo = 'zzz'\n" + "ack:auto\n\n" + Stomp.NULL;
1:2d5bb84:         stompConnection.sendFrame(frame);
1:ba0c1e5: 
1:a603c40:         sendMessage("Ignored message", "foo", "1234");
1:a603c40:         sendMessage("Real message", "foo", "zzz");
1:ba0c1e5: 
1:2d5bb84:         frame = stompConnection.receiveFrame();
2:3777809:         assertTrue(frame.startsWith("MESSAGE"));
1:a603c40:         assertTrue("Should have received the real message but got: " + frame, frame.indexOf("Real message") > 0);
1:d29ca2a:     }
1:ba0c1e5: 
1:540a66b:     @Test(timeout = 60000)
1:a6f1d75:     public void testSubscribeWithAutoAckAndNumericSelector() throws Exception {
1:a6f1d75: 
1:956724e:         String frame = "CONNECT\n" + "login:system\n" + "passcode:manager\n\n" + Stomp.NULL;
1:a6f1d75:         stompConnection.sendFrame(frame);
1:a6f1d75: 
1:a6f1d75:         frame = stompConnection.receiveFrame();
1:a6f1d75:         assertTrue(frame.startsWith("CONNECTED"));
1:a6f1d75: 
1:a6f1d75:         frame = "SUBSCRIBE\n" + "destination:/queue/" + getQueueName() + "\n" + "selector: foo = 42\n" + "ack:auto\n\n" + Stomp.NULL;
1:a6f1d75:         stompConnection.sendFrame(frame);
1:a6f1d75: 
1:a6f1d75:         // Ignored
1:a6f1d75:         frame = "SEND\n" + "foo:abc\n" + "destination:/queue/" + getQueueName() + "\n\n" + "Ignored Message" + Stomp.NULL;
1:a6f1d75:         stompConnection.sendFrame(frame);
1:a6f1d75: 
1:a6f1d75:         // Matches
1:a6f1d75:         frame = "SEND\n" + "foo:42\n" + "destination:/queue/" + getQueueName() + "\n\n" + "Real Message" + Stomp.NULL;
1:a6f1d75:         stompConnection.sendFrame(frame);
1:a6f1d75: 
1:a6f1d75:         frame = stompConnection.receiveFrame();
1:a6f1d75:         assertTrue(frame.startsWith("MESSAGE"));
1:a6f1d75:         assertTrue("Should have received the real message but got: " + frame, frame.indexOf("Real Message") > 0);
1:a6f1d75:     }
1:a6f1d75: 
1:540a66b:     @Test(timeout = 60000)
1:a6f1d75:     public void testSubscribeWithAutoAckAndBooleanSelector() throws Exception {
1:a6f1d75: 
1:956724e:         String frame = "CONNECT\n" + "login:system\n" + "passcode:manager\n\n" + Stomp.NULL;
1:a6f1d75:         stompConnection.sendFrame(frame);
1:a6f1d75: 
1:a6f1d75:         frame = stompConnection.receiveFrame();
1:a6f1d75:         assertTrue(frame.startsWith("CONNECTED"));
1:a6f1d75: 
1:a6f1d75:         frame = "SUBSCRIBE\n" + "destination:/queue/" + getQueueName() + "\n" + "selector: foo = true\n" + "ack:auto\n\n" + Stomp.NULL;
1:a6f1d75:         stompConnection.sendFrame(frame);
1:a6f1d75: 
1:a6f1d75:         // Ignored
1:a6f1d75:         frame = "SEND\n" + "foo:false\n" + "destination:/queue/" + getQueueName() + "\n\n" + "Ignored Message" + Stomp.NULL;
1:a6f1d75:         stompConnection.sendFrame(frame);
1:a6f1d75: 
1:a6f1d75:         // Matches
1:a6f1d75:         frame = "SEND\n" + "foo:true\n" + "destination:/queue/" + getQueueName() + "\n\n" + "Real Message" + Stomp.NULL;
1:a6f1d75:         stompConnection.sendFrame(frame);
1:a6f1d75: 
1:a6f1d75:         frame = stompConnection.receiveFrame();
1:a6f1d75:         assertTrue(frame.startsWith("MESSAGE"));
1:a6f1d75:         assertTrue("Should have received the real message but got: " + frame, frame.indexOf("Real Message") > 0);
1:a6f1d75:     }
1:a6f1d75: 
1:540a66b:     @Test(timeout = 60000)
1:a6f1d75:     public void testSubscribeWithAutoAckAnFloatSelector() throws Exception {
1:a6f1d75: 
1:956724e:         String frame = "CONNECT\n" + "login:system\n" + "passcode:manager\n\n" + Stomp.NULL;
1:a6f1d75:         stompConnection.sendFrame(frame);
1:a6f1d75: 
1:a6f1d75:         frame = stompConnection.receiveFrame();
1:a6f1d75:         assertTrue(frame.startsWith("CONNECTED"));
1:a6f1d75: 
1:a6f1d75:         frame = "SUBSCRIBE\n" + "destination:/queue/" + getQueueName() + "\n" + "selector: foo = 3.14159\n" + "ack:auto\n\n" + Stomp.NULL;
1:a6f1d75:         stompConnection.sendFrame(frame);
1:a6f1d75: 
1:a6f1d75:         // Ignored
1:a6f1d75:         frame = "SEND\n" + "foo:6.578\n" + "destination:/queue/" + getQueueName() + "\n\n" + "Ignored Message" + Stomp.NULL;
1:a6f1d75:         stompConnection.sendFrame(frame);
1:a6f1d75: 
1:a6f1d75:         // Matches
1:a6f1d75:         frame = "SEND\n" + "foo:3.14159\n" + "destination:/queue/" + getQueueName() + "\n\n" + "Real Message" + Stomp.NULL;
1:a6f1d75:         stompConnection.sendFrame(frame);
1:a6f1d75: 
1:a6f1d75:         frame = stompConnection.receiveFrame();
1:a6f1d75:         assertTrue(frame.startsWith("MESSAGE"));
1:a6f1d75:         assertTrue("Should have received the real message but got: " + frame, frame.indexOf("Real Message") > 0);
1:d29ca2a:     }
1:ba0c1e5: 
1:540a66b:     @Test(timeout = 60000)
1:3777809:     public void testSubscribeWithClientAck() throws Exception {
1:ba0c1e5: 
1:956724e:         String frame = "CONNECT\n" + "login:system\n" + "passcode:manager\n\n" + Stomp.NULL;
1:2d5bb84:         stompConnection.sendFrame(frame);
1:ba0c1e5: 
1:2d5bb84:         frame = stompConnection.receiveFrame();
1:c4c5895:         assertTrue(frame.startsWith("CONNECTED"));
1:68a8b6d: 
1:230a86c:         frame = "SUBSCRIBE\n" + "destination:/queue/" + getQueueName() + "\n" + "ack:client\n\n" + Stomp.NULL;
1:68a8b6d: 
1:2d5bb84:         stompConnection.sendFrame(frame);
1:230a86c:         sendMessage(getName());
1:2d5bb84:         frame = stompConnection.receiveFrame();
1:230a86c:         assertTrue(frame.startsWith("MESSAGE"));
1:a35fdd1: 
1:caabb6c:         stompDisconnect();
1:1a6279e: 
1:230a86c:         // message should be received since message was not acknowledged
1:230a86c:         MessageConsumer consumer = session.createConsumer(queue);
1:24f73a5:         TextMessage message = (TextMessage)consumer.receive(2500);
1:230a86c:         assertNotNull(message);
1:230a86c:         assertTrue(message.getJMSRedelivered());
1:caabb6c:     }
1:a35fdd1: 
1:540a66b:     @Test(timeout = 60000)
1:93a379f:     public void testSubscribeWithClientAckedAndContentLength() throws Exception {
1:a35fdd1: 
1:956724e:         String frame = "CONNECT\n" + "login:system\n" + "passcode:manager\n\n" + Stomp.NULL;
1:a35fdd1:         stompConnection.sendFrame(frame);
1:a35fdd1: 
1:a35fdd1:         frame = stompConnection.receiveFrame();
1:a35fdd1:         assertTrue(frame.startsWith("CONNECTED"));
1:a35fdd1: 
1:a35fdd1:         frame = "SUBSCRIBE\n" + "destination:/queue/" + getQueueName() + "\n" + "ack:client\n\n" + Stomp.NULL;
1:a35fdd1: 
1:a35fdd1:         stompConnection.sendFrame(frame);
1:a35fdd1:         sendMessage(getName());
1:a35fdd1:         StompFrame msg = stompConnection.receive();
1:a35fdd1: 
1:a35fdd1:         assertTrue(msg.getAction().equals("MESSAGE"));
1:5774d00: 
1:a35fdd1:         HashMap<String, String> ackHeaders = new HashMap<String, String>();
1:a35fdd1:         ackHeaders.put("message-id", msg.getHeaders().get("message-id"));
1:a35fdd1:         ackHeaders.put("content-length", "8511");
1:a35fdd1: 
1:a35fdd1:         StompFrame ack = new StompFrame("ACK", ackHeaders);
1:a35fdd1:         stompConnection.sendFrame(ack.format());
1:5774d00: 
1:93a379f:         final QueueViewMBean queueView = getProxyToQueue(getQueueName());
1:93a379f:         assertTrue("dequeue complete", Wait.waitFor(new Wait.Condition(){
1:1236bbf:             @Override
1:93a379f:             public boolean isSatisified() throws Exception {
1:93a379f:                 LOG.info("queueView, enqueue:" + queueView.getEnqueueCount() +", dequeue:" + queueView.getDequeueCount() + ", inflight:" + queueView.getInFlightCount());
1:93a379f:                 return queueView.getDequeueCount() == 1;
1:1a6279e:             }
1:388c16d:         }, TimeUnit.SECONDS.toMillis(5), TimeUnit.MILLISECONDS.toMillis(25)));
1:a35fdd1: 
1:a35fdd1:         stompDisconnect();
1:a35fdd1: 
1:a35fdd1:         // message should not be received since it was acknowledged
1:a35fdd1:         MessageConsumer consumer = session.createConsumer(queue);
1:a35fdd1:         TextMessage message = (TextMessage)consumer.receive(500);
1:a35fdd1:         assertNull(message);
1:a35fdd1:     }
1:a35fdd1: 
1:540a66b:     @Test(timeout = 60000)
1:3777809:     public void testUnsubscribe() throws Exception {
1:a35fdd1: 
1:956724e:         String frame = "CONNECT\n" + "login:system\n" + "passcode:manager\n\n" + Stomp.NULL;
1:2d5bb84:         stompConnection.sendFrame(frame);
1:2d5bb84:         frame = stompConnection.receiveFrame();
1:7d4cddd:         assertTrue(frame.startsWith("CONNECTED"));
1:1a6279e: 
1:230a86c:         frame = "SUBSCRIBE\n" + "destination:/queue/" + getQueueName() + "\n" + "ack:auto\n\n" + Stomp.NULL;
1:2d5bb84:         stompConnection.sendFrame(frame);
1:1a6279e: 
1:230a86c:         // send a message to our queue
1:c4c5895:         sendMessage("first message");
1:1a6279e: 
1:230a86c:         // receive message from socket
1:2d5bb84:         frame = stompConnection.receiveFrame();
1:7d4cddd:         assertTrue(frame.startsWith("MESSAGE"));
1:1a6279e: 
1:230a86c:         // remove suscription
1:93a379f:         frame = "UNSUBSCRIBE\n" + "destination:/queue/" + getQueueName() + "\n" + "receipt:1" +  "\n\n" + Stomp.NULL;
1:2d5bb84:         stompConnection.sendFrame(frame);
1:1a6279e: 
1:2d5bb84:         frame = stompConnection.receiveFrame();
1:93a379f:         assertTrue("" + frame, frame.startsWith("RECEIPT"));
1:1a6279e: 
1:230a86c:         // send a message to our queue
1:c4c5895:         sendMessage("second message");
1:1a6279e: 
1:f866f77:         try {
1:3845aaa:             frame = stompConnection.receiveFrame(500);
1:fc00993:             LOG.info("Received frame: " + frame);
1:3777809:             fail("No message should have been received since subscription was removed");
1:230a86c:         } catch (SocketTimeoutException e) {
1:f866f77:         }
1:93a379f:     }
1:1a6279e: 
1:540a66b:     @Test(timeout = 60000)
1:3777809:     public void testTransactionCommit() throws Exception {
1:b5bba09:         MessageConsumer consumer = session.createConsumer(queue);
1:1a6279e: 
1:956724e:         String frame = "CONNECT\n" + "login:system\n" + "passcode:manager\n\n" + Stomp.NULL;
1:2d5bb84:         stompConnection.sendFrame(frame);
1:1a6279e: 
1:2d5bb84:         String f = stompConnection.receiveFrame();
1:3777809:         assertTrue(f.startsWith("CONNECTED"));
1:1a6279e: 
1:230a86c:         frame = "BEGIN\n" + "transaction: tx1\n" + "\n\n" + Stomp.NULL;
1:2d5bb84:         stompConnection.sendFrame(frame);
1:d8bdf5b: 
1:230a86c:         frame = "SEND\n" + "destination:/queue/" + getQueueName() + "\n" + "transaction: tx1\n" + "\n\n" + "Hello World" + Stomp.NULL;
1:2d5bb84:         stompConnection.sendFrame(frame);
1:d8bdf5b: 
1:230a86c:         frame = "COMMIT\n" + "transaction: tx1\n" + "\n\n" + Stomp.NULL;
1:2d5bb84:         stompConnection.sendFrame(frame);
1:68a8b6d: 
1:93a379f:         TextMessage message = (TextMessage)consumer.receive(10000);
1:c341dc7:         assertNotNull("Should have received a message", message);
1:93a379f:     }
1:68a8b6d: 
1:540a66b:     @Test(timeout = 60000)
1:3777809:     public void testTransactionRollback() throws Exception {
1:c341dc7:         MessageConsumer consumer = session.createConsumer(queue);
1:3910056: 
1:956724e:         String frame = "CONNECT\n" + "login:system\n" + "passcode:manager\n\n" + Stomp.NULL;
1:2d5bb84:         stompConnection.sendFrame(frame);
1:3910056: 
1:2d5bb84:         String f = stompConnection.receiveFrame();
1:3777809:         assertTrue(f.startsWith("CONNECTED"));
1:3910056: 
1:230a86c:         frame = "BEGIN\n" + "transaction: tx1\n" + "\n\n" + Stomp.NULL;
1:2d5bb84:         stompConnection.sendFrame(frame);
1:3910056: 
1:230a86c:         frame = "SEND\n" + "destination:/queue/" + getQueueName() + "\n" + "transaction: tx1\n" + "\n" + "first message" + Stomp.NULL;
1:2d5bb84:         stompConnection.sendFrame(frame);
1:2b5608f: 
1:230a86c:         // rollback first message
1:230a86c:         frame = "ABORT\n" + "transaction: tx1\n" + "\n\n" + Stomp.NULL;
1:2d5bb84:         stompConnection.sendFrame(frame);
15:2b5608f: 
1:230a86c:         frame = "BEGIN\n" + "transaction: tx1\n" + "\n\n" + Stomp.NULL;
1:2d5bb84:         stompConnection.sendFrame(frame);
1:2b5608f: 
1:230a86c:         frame = "SEND\n" + "destination:/queue/" + getQueueName() + "\n" + "transaction: tx1\n" + "\n" + "second message" + Stomp.NULL;
1:2d5bb84:         stompConnection.sendFrame(frame);
1:2b5608f: 
1:230a86c:         frame = "COMMIT\n" + "transaction: tx1\n" + "\n\n" + Stomp.NULL;
1:2d5bb84:         stompConnection.sendFrame(frame);
1:2b5608f: 
1:230a86c:         // only second msg should be received since first msg was rolled back
1:93a379f:         TextMessage message = (TextMessage)consumer.receive(10000);
3:3777809:         assertNotNull(message);
1:c341dc7:         assertEquals("second message", message.getText().trim());
1:90deed4:     }
1:2b5608f: 
1:540a66b:     @Test(timeout = 60000)
1:0aac7f5:     public void testDisconnectedClientsAreRemovedFromTheBroker() throws Exception {
2:471ea33:         assertClients(1);
1:956724e:         String frame = "CONNECT\n" + "login:system\n" + "passcode:manager\n\n" + Stomp.NULL;
1:caabb6c: 
1:2d5bb84:         stompConnection.sendFrame(frame);
1:caabb6c: 
1:0aac7f5:         assertClients(2);
1:2b5608f: 
1:2d5bb84:         // now lets kill the stomp connection
1:f33f32e:         stompConnection.close();
1:a54fa4b: 
1:caabb6c:         assertClients(1);
1:471ea33:     }
1:a54fa4b: 
1:540a66b:     @Test(timeout = 60000)
1:471ea33:     public void testConnectNotAuthenticatedWrongUser() throws Exception {
1:956724e:         String frame = "CONNECT\n" + "login: dejanb\n" + "passcode:manager\n\n" + Stomp.NULL;
1:a54fa4b:         stompConnection.sendFrame(frame);
1:a54fa4b: 
1:3b626c9:         try {
1:3b626c9:             String f = stompConnection.receiveFrame();
1:3b626c9:             assertTrue(f.startsWith("ERROR"));
1:3b626c9:         } catch (IOException socketMayBeClosedFirstByBroker) {}
1:caabb6c:     }
1:caabb6c: 
1:540a66b:     @Test(timeout = 60000)
1:471ea33:     public void testConnectNotAuthenticatedWrongPassword() throws Exception {
1:caabb6c: 
1:956724e:         String frame = "CONNECT\n" + "login:system\n" + "passcode: dejanb\n\n" + Stomp.NULL;
1:2d5bb84:         stompConnection.sendFrame(frame);
1:caabb6c: 
1:3b626c9:         try {
1:3b626c9:             String f = stompConnection.receiveFrame();
1:3b626c9:             assertTrue(f.startsWith("ERROR"));
1:3b626c9:         } catch (IOException socketMayBeClosedFirstByBroker) {}
1:caabb6c:     }
1:caabb6c: 
1:540a66b:     @Test(timeout = 60000)
1:471ea33:     public void testSendNotAuthorized() throws Exception {
1:caabb6c: 
1:956724e:         String frame = "CONNECT\n" + "login:guest\n" + "passcode:password\n\n" + Stomp.NULL;
1:2d5bb84:         stompConnection.sendFrame(frame);
1:caabb6c: 
1:2d5bb84:         frame = stompConnection.receiveFrame();
1:471ea33:         assertTrue(frame.startsWith("CONNECTED"));
1:a54fa4b: 
1:471ea33:         frame = "SEND\n" + "destination:/queue/USERS." + getQueueName() + "\n\n" + "Hello World" + Stomp.NULL;
1:a54fa4b: 
1:2d5bb84:         stompConnection.sendFrame(frame);
4:471ea33:         String f = stompConnection.receiveFrame();
2:caabb6c:         assertTrue(f.startsWith("ERROR"));
1:471ea33:     }
1:2b5608f: 
1:540a66b:     @Test(timeout = 60000)
1:471ea33:     public void testSubscribeNotAuthorized() throws Exception {
1:2b5608f: 
1:956724e:         String frame = "CONNECT\n" + "login:guest\n" + "passcode:password\n\n" + Stomp.NULL;
1:2d5bb84:         stompConnection.sendFrame(frame);
1:2b5608f: 
1:2d5bb84:         frame = stompConnection.receiveFrame();
1:471ea33:         assertTrue(frame.startsWith("CONNECTED"));
1:2b5608f: 
1:471ea33:         frame = "SUBSCRIBE\n" + "destination:/queue/USERS." + getQueueName() + "\n" + "ack:auto\n\n" + Stomp.NULL;
1:bd31548: 
1:2d5bb84:         stompConnection.sendFrame(frame);
1:bd31548:         frame = stompConnection.receiveFrame();
1:bd31548:         assertTrue(frame.startsWith("ERROR"));
1:bd31548:     }
1:2b5608f: 
1:540a66b:     @Test(timeout = 60000)
1:bd31548:     public void testSubscribeWithReceiptNotAuthorized() throws Exception {
1:bd31548: 
1:bd31548:         String frame = "CONNECT\n" + "login:guest\n" + "passcode:password\n\n" + Stomp.NULL;
1:bd31548:         stompConnection.sendFrame(frame);
1:bd31548: 
1:bd31548:         frame = stompConnection.receiveFrame();
1:bd31548:         assertTrue(frame.startsWith("CONNECTED"));
1:2b5608f: 
1:bd31548:         frame = "SUBSCRIBE\n" + "destination:/queue/USERS." + getQueueName() + "\n" +
1:bd31548:                 "ack:auto\n" + "receipt:1\n" + "\n" + Stomp.NULL;
1:bd31548: 
1:bd31548:         stompConnection.sendFrame(frame);
1:bd31548:         frame = stompConnection.receiveFrame();
1:bd31548:         assertTrue(frame.startsWith("ERROR"));
1:bd31548:         assertTrue("Error Frame did not contain receipt-id", frame.indexOf(Stomp.Headers.Response.RECEIPT_ID) >= 0);
1:bd31548:     }
1:bd31548: 
1:540a66b:     @Test(timeout = 60000)
1:bd31548:     public void testSubscribeWithInvalidSelector() throws Exception {
1:bd31548: 
1:bd31548:         String frame = "CONNECT\n" + "login:system\n" + "passcode:manager\n\n" + Stomp.NULL;
1:bd31548:         stompConnection.sendFrame(frame);
1:bd31548: 
1:bd31548:         frame = stompConnection.receiveFrame();
1:bd31548:         assertTrue(frame.startsWith("CONNECTED"));
1:bd31548: 
1:bd31548:         frame = "SUBSCRIBE\n" + "destination:/queue/" + getQueueName() + "\n" + "selector:foo.bar = 1\n" + "ack:auto\n\n" + Stomp.NULL;
1:bd31548: 
1:bd31548:         stompConnection.sendFrame(frame);
1:bd31548:         frame = stompConnection.receiveFrame();
1:bd31548:         assertTrue(frame.startsWith("ERROR"));
1:471ea33:     }
1:bd31548: 
1:540a66b:     @Test(timeout = 60000)
1:2b5608f:     public void testTransformationUnknownTranslator() throws Exception {
1:c341dc7:         MessageConsumer consumer = session.createConsumer(queue);
1:2b5608f: 
1:956724e:         String frame = "CONNECT\n" + "login:system\n" + "passcode:manager\n\n" + Stomp.NULL;
1:bd31548:         stompConnection.sendFrame(frame);
1:2b5608f: 
1:2d5bb84:         frame = stompConnection.receiveFrame();
1:01b50e9:         assertTrue(frame.startsWith("CONNECTED"));
1:2b5608f: 
1:2b5608f:         frame = "SEND\n" + "destination:/queue/" + getQueueName() + "\n" + "transformation:test" + "\n\n" + "Hello World" + Stomp.NULL;
1:2b5608f: 
1:2d5bb84:         stompConnection.sendFrame(frame);
1:2b5608f: 
1:fee7f6a:         TextMessage message = (TextMessage)consumer.receive(2500);
1:2b5608f:         assertNotNull(message);
1:2b5608f:         assertEquals("Hello World", message.getText());
1:2b5608f:     }
1:2b5608f: 
1:540a66b:     @Test(timeout = 60000)
1:2b5608f:     public void testTransformationFailed() throws Exception {
1:2b5608f:         MessageConsumer consumer = session.createConsumer(queue);
1:2b5608f: 
1:956724e:         String frame = "CONNECT\n" + "login:system\n" + "passcode:manager\n\n" + Stomp.NULL;
1:2d5bb84:         stompConnection.sendFrame(frame);
1:2b5608f: 
1:93a379f:         frame = stompConnection.receiveFrame();
1:2b5608f:         assertTrue(frame.startsWith("CONNECTED"));
1:2b5608f: 
1:3910056:         frame = "SEND\n" + "destination:/queue/" + getQueueName() + "\n" + "transformation:" + Stomp.Transformations.JMS_OBJECT_XML + "\n\n" + "Hello World" + Stomp.NULL;
1:2b5608f: 
1:2d5bb84:         stompConnection.sendFrame(frame);
1:2b5608f: 
1:fee7f6a:         TextMessage message = (TextMessage)consumer.receive(2500);
1:2b5608f:         assertNotNull(message);
1:3910056:         assertNotNull(message.getStringProperty(Stomp.Headers.TRANSFORMATION_ERROR));
1:caabb6c:         assertEquals("Hello World", message.getText());
1:2b5608f:     }
1:caabb6c: 
1:540a66b:     @Test(timeout = 60000)
1:3910056:     public void testTransformationSendXMLObject() throws Exception {
1:2b5608f:         MessageConsumer consumer = session.createConsumer(queue);
1:2b5608f: 
1:956724e:         String frame = "CONNECT\n" + "login:system\n" + "passcode:manager\n\n" + Stomp.NULL;
1:2d5bb84:         stompConnection.sendFrame(frame);
1:2b5608f: 
7:2b5608f:         frame = stompConnection.receiveFrame();
1:2b5608f:         assertTrue(frame.startsWith("CONNECTED"));
1:2b5608f: 
1:3910056:         frame = "SEND\n" + "destination:/queue/" + getQueueName() + "\n" + "transformation:" + Stomp.Transformations.JMS_OBJECT_XML + "\n\n" + xmlObject + Stomp.NULL;
1:2b5608f: 
1:2d5bb84:         stompConnection.sendFrame(frame);
1:2b5608f: 
1:1236bbf:         Message message = consumer.receive(2500);
1:2b5608f:         assertNotNull(message);
1:1236bbf: 
1:1236bbf:         LOG.info("Broke sent: {}", message);
1:1236bbf: 
1:1236bbf:         assertTrue(message instanceof ObjectMessage);
1:1236bbf:         ObjectMessage objectMessage = (ObjectMessage)message;
1:1236bbf:         SamplePojo object = (SamplePojo)objectMessage.getObject();
1:2b5608f:         assertEquals("Dejan", object.getName());
1:caabb6c:     }
1:caabb6c: 
1:540a66b:     @Test(timeout = 60000)
1:3910056:     public void testTransformationSendJSONObject() throws Exception {
1:2b5608f:         MessageConsumer consumer = session.createConsumer(queue);
1:2b5608f: 
1:956724e:         String frame = "CONNECT\n" + "login:system\n" + "passcode:manager\n\n" + Stomp.NULL;
1:2d5bb84:         stompConnection.sendFrame(frame);
1:2b5608f: 
1:2b5608f:         frame = stompConnection.receiveFrame();
1:2b5608f:         assertTrue(frame.startsWith("CONNECTED"));
1:2b5608f: 
1:3910056:         frame = "SEND\n" + "destination:/queue/" + getQueueName() + "\n" + "transformation:" + Stomp.Transformations.JMS_OBJECT_JSON + "\n\n" + jsonObject + Stomp.NULL;
1:2b5608f: 
1:2d5bb84:         stompConnection.sendFrame(frame);
1:2b5608f: 
1:fee7f6a:         ObjectMessage message = (ObjectMessage)consumer.receive(2500);
1:2b5608f:         assertNotNull(message);
2:2b5608f:         SamplePojo object = (SamplePojo)message.getObject();
1:2b5608f:         assertEquals("Dejan", object.getName());
1:2b5608f:     }
1:caabb6c: 
1:540a66b:     @Test(timeout = 60000)
1:2b5608f:     public void testTransformationSubscribeXML() throws Exception {
1:caabb6c: 
1:2b5608f:         MessageProducer producer = session.createProducer(new ActiveMQQueue("USERS." + getQueueName()));
1:2b5608f:         ObjectMessage message = session.createObjectMessage(new SamplePojo("Dejan", "Belgrade"));
1:2b5608f:         producer.send(message);
1:9807ee3: 
1:956724e:         String frame = "CONNECT\n" + "login:system\n" + "passcode:manager\n\n" + Stomp.NULL;
1:9807ee3:         stompConnection.sendFrame(frame);
1:9807ee3: 
1:9807ee3:         frame = stompConnection.receiveFrame();
1:2b5608f:         assertTrue(frame.startsWith("CONNECTED"));
1:caabb6c: 
1:3910056:         frame = "SUBSCRIBE\n" + "destination:/queue/USERS." + getQueueName() + "\n" + "ack:auto" + "\n" + "transformation:"	+ Stomp.Transformations.JMS_OBJECT_XML + "\n\n" + Stomp.NULL;
1:9807ee3:         stompConnection.sendFrame(frame);
1:caabb6c: 
1:2b5608f:         frame = stompConnection.receiveFrame();
1:caabb6c: 
1:3910056:         assertTrue(frame.trim().endsWith(xmlObject));
1:caabb6c:     }
1:9807ee3: 
1:540a66b:     @Test(timeout = 60000)
1:3910056:     public void testTransformationReceiveJSONObject() throws Exception {
1:2b5608f:         MessageProducer producer = session.createProducer(new ActiveMQQueue("USERS." + getQueueName()));
1:2b5608f:         ObjectMessage message = session.createObjectMessage(new SamplePojo("Dejan", "Belgrade"));
1:2b5608f:         producer.send(message);
1:caabb6c: 
1:956724e:         String frame = "CONNECT\n" + "login:system\n" + "passcode:manager\n\n" + Stomp.NULL;
1:2d5bb84:         stompConnection.sendFrame(frame);
1:caabb6c: 
1:9807ee3:         frame = stompConnection.receiveFrame();
1:2b5608f:         assertTrue(frame.startsWith("CONNECTED"));
1:3910056: 
1:3910056:         frame = "SUBSCRIBE\n" + "destination:/queue/USERS." + getQueueName() + "\n" + "ack:auto" + "\n" + "transformation:"	+ Stomp.Transformations.JMS_OBJECT_JSON + "\n\n" + Stomp.NULL;
1:caabb6c:         stompConnection.sendFrame(frame);
1:caabb6c: 
1:9807ee3:         frame = stompConnection.receiveFrame();
1:caabb6c: 
1:3910056:         assertTrue(frame.trim().endsWith(jsonObject));
1:2b5608f:     }
1:caabb6c: 
1:540a66b:     @Test(timeout = 60000)
1:3910056:     public void testTransformationReceiveXMLObject() throws Exception {
1:caabb6c: 
1:2b5608f:         MessageProducer producer = session.createProducer(new ActiveMQQueue("USERS." + getQueueName()));
1:2b5608f:         ObjectMessage message = session.createObjectMessage(new SamplePojo("Dejan", "Belgrade"));
1:2b5608f:         producer.send(message);
1:3910056: 
1:956724e:         String frame = "CONNECT\n" + "login:system\n" + "passcode:manager\n\n" + Stomp.NULL;
1:2d5bb84:         stompConnection.sendFrame(frame);
1:2b5608f: 
1:3910056:         frame = stompConnection.receiveFrame();
1:2b5608f:         assertTrue(frame.startsWith("CONNECTED"));
1:2b5608f: 
1:3910056:         frame = "SUBSCRIBE\n" + "destination:/queue/USERS." + getQueueName() + "\n" + "ack:auto" + "\n" + "transformation:"	+ Stomp.Transformations.JMS_OBJECT_XML + "\n\n" + Stomp.NULL;
1:2d5bb84:         stompConnection.sendFrame(frame);
1:2b5608f: 
1:2b5608f:         frame = stompConnection.receiveFrame();
1:2b5608f: 
1:3910056:         assertTrue(frame.trim().endsWith(xmlObject));
1:2b5608f:     }
1:2b5608f: 
1:540a66b:     @Test(timeout = 60000)
1:9807ee3:     public void testTransformationReceiveObject() throws Exception {
1:9807ee3: 
1:9807ee3:         MessageProducer producer = session.createProducer(new ActiveMQQueue("USERS." + getQueueName()));
1:9807ee3:         ObjectMessage message = session.createObjectMessage(new SamplePojo("Dejan", "Belgrade"));
1:9807ee3:         producer.send(message);
1:9807ee3: 
1:956724e:         String frame = "CONNECT\n" + "login:system\n" + "passcode:manager\n\n" + Stomp.NULL;
1:9807ee3:         stompConnection.sendFrame(frame);
1:9807ee3: 
1:9807ee3:         frame = stompConnection.receiveFrame();
1:9807ee3:         assertTrue(frame.startsWith("CONNECTED"));
1:9807ee3: 
1:9807ee3:         frame = "SUBSCRIBE\n" + "destination:/queue/USERS." + getQueueName() + "\n" + "ack:auto" + "\n" + "transformation:"	+ Stomp.Transformations.JMS_OBJECT_XML + "\n\n" + Stomp.NULL;
1:9807ee3:         stompConnection.sendFrame(frame);
1:9807ee3: 
1:9807ee3:         frame = stompConnection.receiveFrame();
1:9807ee3: 
1:9807ee3:         assertTrue(frame.trim().endsWith(xmlObject));
1:9807ee3:     }
1:9807ee3: 
1:540a66b:     @Test(timeout = 60000)
1:9807ee3:     public void testTransformationReceiveXMLObjectAndMap() throws Exception {
1:9807ee3:         MessageProducer producer = session.createProducer(new ActiveMQQueue("USERS." + getQueueName()));
1:9807ee3:         ObjectMessage objMessage = session.createObjectMessage(new SamplePojo("Dejan", "Belgrade"));
1:9807ee3:         producer.send(objMessage);
1:9807ee3: 
1:9807ee3:         MapMessage mapMessage = session.createMapMessage();
1:9807ee3:         mapMessage.setString("name", "Dejan");
1:9807ee3:         mapMessage.setString("city", "Belgrade");
1:9807ee3:         producer.send(mapMessage);
1:9807ee3: 
1:956724e:         String frame = "CONNECT\n" + "login:system\n" + "passcode:manager\n\n" + Stomp.NULL;
1:9807ee3:         stompConnection.sendFrame(frame);
1:9807ee3: 
1:9807ee3:         frame = stompConnection.receiveFrame();
1:9807ee3:         assertTrue(frame.startsWith("CONNECTED"));
1:9807ee3: 
1:9807ee3:         frame = "SUBSCRIBE\n" + "destination:/queue/USERS." + getQueueName() + "\n" + "ack:auto" + "\n" + "transformation:"	+ Stomp.Transformations.JMS_XML + "\n\n" + Stomp.NULL;
1:9807ee3:         stompConnection.sendFrame(frame);
1:9807ee3: 
1:9807ee3:         frame = stompConnection.receiveFrame();
1:9807ee3: 
1:9807ee3:         assertTrue(frame.trim().endsWith(xmlObject));
1:9807ee3: 
1:72dfbfa:         StompFrame xmlFrame = stompConnection.receive();
1:9807ee3: 
1:72dfbfa:         Map<String, String> map = createMapFromXml(xmlFrame.getBody());
1:72dfbfa: 
1:72dfbfa:         assertTrue(map.containsKey("name"));
1:72dfbfa:         assertTrue(map.containsKey("city"));
1:72dfbfa: 
1:72dfbfa:         assertTrue(map.get("name").equals("Dejan"));
1:72dfbfa:         assertTrue(map.get("city").equals("Belgrade"));
1:9807ee3:     }
1:9807ee3: 
1:540a66b:     @Test(timeout = 60000)
1:9807ee3:     public void testTransformationReceiveJSONObjectAndMap() throws Exception {
1:9807ee3:         MessageProducer producer = session.createProducer(new ActiveMQQueue("USERS." + getQueueName()));
1:9807ee3:         ObjectMessage objMessage = session.createObjectMessage(new SamplePojo("Dejan", "Belgrade"));
1:9807ee3:         producer.send(objMessage);
1:9807ee3: 
1:9807ee3:         MapMessage mapMessage = session.createMapMessage();
1:9807ee3:         mapMessage.setString("name", "Dejan");
1:9807ee3:         mapMessage.setString("city", "Belgrade");
1:9807ee3:         producer.send(mapMessage);
1:9807ee3: 
1:956724e:         String frame = "CONNECT\n" + "login:system\n" + "passcode:manager\n\n" + Stomp.NULL;
1:9807ee3:         stompConnection.sendFrame(frame);
1:9807ee3: 
1:9807ee3:         frame = stompConnection.receiveFrame();
1:9807ee3:         assertTrue(frame.startsWith("CONNECTED"));
1:9807ee3: 
1:9807ee3:         frame = "SUBSCRIBE\n" + "destination:/queue/USERS." + getQueueName() + "\n" + "ack:auto" + "\n" + "transformation:"	+ Stomp.Transformations.JMS_JSON + "\n\n" + Stomp.NULL;
1:9807ee3:         stompConnection.sendFrame(frame);
1:9807ee3: 
1:72dfbfa:         StompFrame json = stompConnection.receive();
1:72dfbfa:         LOG.info("Transformed frame: {}", json);
1:9807ee3: 
1:72dfbfa:         SamplePojo pojo = createObjectFromJson(json.getBody());
1:72dfbfa:         assertTrue(pojo.getCity().equals("Belgrade"));
1:72dfbfa:         assertTrue(pojo.getName().equals("Dejan"));
1:9807ee3: 
1:72dfbfa:         json = stompConnection.receive();
1:72dfbfa:         LOG.info("Transformed frame: {}", json);
1:9807ee3: 
1:72dfbfa:         Map<String, String> map = createMapFromJson(json.getBody());
1:72dfbfa: 
1:72dfbfa:         assertTrue(map.containsKey("name"));
1:72dfbfa:         assertTrue(map.containsKey("city"));
1:72dfbfa: 
1:72dfbfa:         assertTrue(map.get("name").equals("Dejan"));
1:72dfbfa:         assertTrue(map.get("city").equals("Belgrade"));
1:9807ee3:     }
1:9807ee3: 
1:540a66b:     @Test(timeout = 60000)
1:9807ee3:     public void testTransformationSendAndReceiveXmlMap() throws Exception {
1:9807ee3: 
1:956724e:         String frame = "CONNECT\n" + "login:system\n" + "passcode:manager\n\n" + Stomp.NULL;
1:9807ee3:         stompConnection.sendFrame(frame);
1:9807ee3: 
1:9807ee3:         frame = stompConnection.receiveFrame();
1:9807ee3:         assertTrue(frame.startsWith("CONNECTED"));
1:9807ee3: 
1:9807ee3:         frame = "SUBSCRIBE\n" + "destination:/queue/" + getQueueName() + "\n" + "ack:auto" + "\n" + "transformation:" + Stomp.Transformations.JMS_XML + "\n\n" + Stomp.NULL;
1:9807ee3:         stompConnection.sendFrame(frame);
1:9807ee3: 
1:9807ee3:         frame = "SEND\n" + "destination:/queue/" + getQueueName() + "\n" + "transformation:" + Stomp.Transformations.JMS_MAP_JSON + "\n\n" + jsonMap + Stomp.NULL;
1:9807ee3: 
1:9807ee3:         stompConnection.sendFrame(frame);
1:9807ee3: 
1:72dfbfa:         StompFrame xmlFrame = stompConnection.receive();
1:72dfbfa:         LOG.info("Received Frame: {}", xmlFrame.getBody());
1:72dfbfa: 
1:72dfbfa:         Map<String, String> map = createMapFromXml(xmlFrame.getBody());
1:72dfbfa: 
1:72dfbfa:         assertTrue(map.containsKey("name"));
1:72dfbfa:         assertTrue(map.containsKey("city"));
1:9807ee3: 
1:72dfbfa:         assertEquals("Dejan", map.get("name"));
1:72dfbfa:         assertEquals("Belgrade", map.get("city"));
1:72dfbfa: 
1:72dfbfa:         assertTrue(xmlFrame.getHeaders().containsValue("jms-map-xml"));
1:9807ee3:     }
1:9807ee3: 
1:540a66b:     @Test(timeout = 60000)
1:9807ee3:     public void testTransformationSendAndReceiveJsonMap() throws Exception {
1:9807ee3: 
1:956724e:         String frame = "CONNECT\n" + "login:system\n" + "passcode:manager\n\n" + Stomp.NULL;
1:9807ee3:         stompConnection.sendFrame(frame);
1:9807ee3: 
1:9807ee3:         frame = stompConnection.receiveFrame();
1:9807ee3:         assertTrue(frame.startsWith("CONNECTED"));
1:9807ee3: 
1:9807ee3:         frame = "SUBSCRIBE\n" + "destination:/queue/" + getQueueName() + "\n" + "ack:auto" + "\n" + "transformation:" + Stomp.Transformations.JMS_JSON + "\n\n" + Stomp.NULL;
1:9807ee3:         stompConnection.sendFrame(frame);
1:9807ee3: 
1:9807ee3:         frame = "SEND\n" + "destination:/queue/" + getQueueName() + "\n" + "transformation:" + Stomp.Transformations.JMS_MAP_XML + "\n\n" + xmlMap + Stomp.NULL;
1:9807ee3: 
1:9807ee3:         stompConnection.sendFrame(frame);
1:9807ee3: 
1:72dfbfa:         StompFrame json = stompConnection.receive();
1:72dfbfa:         LOG.info("Received Frame: {}", json.getBody());
1:9807ee3: 
1:72dfbfa:         assertNotNull(json);
1:72dfbfa:         assertTrue(json.getHeaders().containsValue("jms-map-json"));
1:72dfbfa: 
1:72dfbfa:         Map<String, String> map = createMapFromJson(json.getBody());
1:72dfbfa: 
1:72dfbfa:         assertTrue(map.containsKey("name"));
1:72dfbfa:         assertTrue(map.containsKey("city"));
1:72dfbfa: 
1:72dfbfa:         assertEquals("Dejan", map.get("name"));
1:72dfbfa:         assertEquals("Belgrade", map.get("city"));
1:9807ee3:     }
1:9807ee3: 
1:540a66b:     @Test(timeout = 60000)
1:9807ee3:     public void testTransformationReceiveBytesMessage() throws Exception {
1:9807ee3: 
1:9807ee3:         MessageProducer producer = session.createProducer(new ActiveMQQueue("USERS." + getQueueName()));
1:9807ee3:         BytesMessage message = session.createBytesMessage();
1:9807ee3:         message.writeBytes(new byte[]{1, 2, 3, 4, 5});
1:9807ee3:         producer.send(message);
1:9807ee3: 
1:956724e:         String frame = "CONNECT\n" + "login:system\n" + "passcode:manager\n\n" + Stomp.NULL;
1:9807ee3:         stompConnection.sendFrame(frame);
1:9807ee3: 
1:9807ee3:         frame = stompConnection.receiveFrame();
1:9807ee3:         assertTrue(frame.startsWith("CONNECTED"));
1:9807ee3: 
1:9807ee3:         frame = "SUBSCRIBE\n" + "destination:/queue/USERS." + getQueueName() + "\n" + "ack:auto" + "\n" + "transformation:"	+ Stomp.Transformations.JMS_XML + "\n\n" + Stomp.NULL;
1:9807ee3:         stompConnection.sendFrame(frame);
1:9807ee3: 
1:9807ee3:         frame = stompConnection.receiveFrame();
1:9807ee3:         assertTrue(frame.startsWith("MESSAGE"));
1:9807ee3: 
1:9807ee3:         Pattern cl = Pattern.compile("Content-length:\\s*(\\d+)", Pattern.CASE_INSENSITIVE);
1:9807ee3:         Matcher clMmatcher = cl.matcher(frame);
1:9807ee3:         assertTrue(clMmatcher.find());
1:9807ee3:         assertEquals("5", clMmatcher.group(1));
1:3910056: 
1:9807ee3:         assertFalse(Pattern.compile("type:\\s*null", Pattern.CASE_INSENSITIVE).matcher(frame).find());
1:2b5608f:     }
1:2b5608f: 
1:540a66b:     @Test(timeout = 60000)
1:2b5608f:     public void testTransformationNotOverrideSubscription() throws Exception {
1:2b5608f:         MessageProducer producer = session.createProducer(new ActiveMQQueue("USERS." + getQueueName()));
1:2b5608f:         ObjectMessage message = session.createObjectMessage(new SamplePojo("Dejan", "Belgrade"));
1:3910056:         message.setStringProperty("transformation",	Stomp.Transformations.JMS_OBJECT_XML.toString());
1:3910056:         producer.send(message);
1:3910056: 
1:956724e:         String frame = "CONNECT\n" + "login:system\n" + "passcode:manager\n\n" + Stomp.NULL;
1:9807ee3:         stompConnection.sendFrame(frame);
1:3910056: 
1:3910056:         frame = stompConnection.receiveFrame();
1:3910056:         assertTrue(frame.startsWith("CONNECTED"));
1:3910056: 
1:3910056:         frame = "SUBSCRIBE\n" + "destination:/queue/USERS." + getQueueName() + "\n" + "ack:auto" + "\n" + "transformation:"	+ Stomp.Transformations.JMS_OBJECT_JSON + "\n\n" + Stomp.NULL;
1:2d5bb84:         stompConnection.sendFrame(frame);
1:3910056: 
1:3910056:         frame = stompConnection.receiveFrame();
1:3910056: 
1:9807ee3:         assertTrue(frame.trim().endsWith(jsonObject));
1:3910056:     }
1:3910056: 
1:540a66b:     @Test(timeout = 60000)
1:3910056:     public void testTransformationIgnoreTransformation() throws Exception {
1:3910056:         MessageProducer producer = session.createProducer(new ActiveMQQueue("USERS." + getQueueName()));
1:3910056:         ObjectMessage message = session.createObjectMessage(new SamplePojo("Dejan", "Belgrade"));
1:3910056:         message.setStringProperty("transformation", Stomp.Transformations.JMS_OBJECT_XML.toString());
1:3910056:         producer.send(message);
1:3910056: 
1:956724e:         String frame = "CONNECT\n" + "login:system\n" + "passcode:manager\n\n" + Stomp.NULL;
1:2d5bb84:         stompConnection.sendFrame(frame);
1:3910056: 
1:3910056:         frame = stompConnection.receiveFrame();
1:3910056:         assertTrue(frame.startsWith("CONNECTED"));
1:3910056: 
1:3910056:         frame = "SUBSCRIBE\n" + "destination:/queue/USERS." + getQueueName() + "\n" + "ack:auto" + "\n\n" + Stomp.NULL;
1:2d5bb84:         stompConnection.sendFrame(frame);
1:3910056: 
1:3910056:         frame = stompConnection.receiveFrame();
1:3910056: 
1:3910056:         assertTrue(frame.endsWith("\n\n"));
1:3910056:     }
1:3910056: 
1:540a66b:     @Test(timeout = 60000)
1:3910056:     public void testTransformationSendXMLMap() throws Exception {
1:3910056:         MessageConsumer consumer = session.createConsumer(queue);
1:3910056: 
1:956724e:         String frame = "CONNECT\n" + "login:system\n" + "passcode:manager\n\n" + Stomp.NULL;
1:2d5bb84:         stompConnection.sendFrame(frame);
1:3910056: 
1:3910056:         frame = stompConnection.receiveFrame();
1:3910056:         assertTrue(frame.startsWith("CONNECTED"));
1:3910056: 
1:3910056:         frame = "SEND\n" + "destination:/queue/" + getQueueName() + "\n" + "transformation:" + Stomp.Transformations.JMS_MAP_XML + "\n\n" + xmlMap + Stomp.NULL;
1:3910056: 
1:2d5bb84:         stompConnection.sendFrame(frame);
1:3910056: 
1:fee7f6a:         MapMessage message = (MapMessage) consumer.receive(2500);
1:3910056:         assertNotNull(message);
1:3910056:         assertEquals(message.getString("name"), "Dejan");
1:3910056:     }
1:3910056: 
1:540a66b:     @Test(timeout = 60000)
1:3910056:     public void testTransformationSendJSONMap() throws Exception {
1:3910056:         MessageConsumer consumer = session.createConsumer(queue);
1:3910056: 
1:956724e:         String frame = "CONNECT\n" + "login:system\n" + "passcode:manager\n\n" + Stomp.NULL;
1:2d5bb84:         stompConnection.sendFrame(frame);
1:3910056: 
1:3910056:         frame = stompConnection.receiveFrame();
1:3910056:         assertTrue(frame.startsWith("CONNECTED"));
1:3910056: 
1:3910056:         frame = "SEND\n" + "destination:/queue/" + getQueueName() + "\n" + "transformation:" + Stomp.Transformations.JMS_MAP_JSON + "\n\n" + jsonMap + Stomp.NULL;
1:3910056: 
10:3910056:         stompConnection.sendFrame(frame);
1:3910056: 
1:fee7f6a:         MapMessage message = (MapMessage) consumer.receive(2500);
1:3910056:         assertNotNull(message);
1:3910056:         assertEquals(message.getString("name"), "Dejan");
1:3910056:     }
1:3910056: 
1:540a66b:     @Test(timeout = 60000)
1:3910056:     public void testTransformationReceiveXMLMap() throws Exception {
1:3910056: 
1:3910056:         MessageProducer producer = session.createProducer(new ActiveMQQueue("USERS." + getQueueName()));
1:3910056:         MapMessage message = session.createMapMessage();
1:3910056:         message.setString("name", "Dejan");
1:3910056:         message.setString("city", "Belgrade");
1:3910056:         producer.send(message);
1:caabb6c: 
1:956724e:         String frame = "CONNECT\n" + "login:system\n" + "passcode:manager\n\n" + Stomp.NULL;
1:3910056:         stompConnection.sendFrame(frame);
1:3910056: 
1:3910056:         frame = stompConnection.receiveFrame();
1:3910056:         assertTrue(frame.startsWith("CONNECTED"));
1:3910056: 
1:3910056:         frame = "SUBSCRIBE\n" + "destination:/queue/USERS." + getQueueName() + "\n" + "ack:auto\n" + "transformation:" + Stomp.Transformations.JMS_MAP_XML + "\n\n" + Stomp.NULL;
1:3910056:         stompConnection.sendFrame(frame);
1:72dfbfa: 
1:72dfbfa:         StompFrame xmlFrame = stompConnection.receive();
1:72dfbfa:         LOG.info("Received Frame: {}", xmlFrame.getBody());
1:72dfbfa: 
1:72dfbfa:         Map<String, String> map = createMapFromXml(xmlFrame.getBody());
1:3910056: 
1:72dfbfa:         assertTrue(map.containsKey("name"));
1:72dfbfa:         assertTrue(map.containsKey("city"));
1:3910056: 
1:72dfbfa:         assertEquals("Dejan", map.get("name"));
1:72dfbfa:         assertEquals("Belgrade", map.get("city"));
1:3910056:     }
1:3910056: 
1:540a66b:     @Test(timeout = 60000)
1:3910056:     public void testTransformationReceiveJSONMap() throws Exception {
1:3910056: 
1:3910056:         MessageProducer producer = session.createProducer(new ActiveMQQueue("USERS." + getQueueName()));
1:3910056:         MapMessage message = session.createMapMessage();
1:3910056:         message.setString("name", "Dejan");
1:3910056:         message.setString("city", "Belgrade");
1:2b5608f:         producer.send(message);
1:3910056: 
1:956724e:         String frame = "CONNECT\n" + "login:system\n" + "passcode:manager\n\n" + Stomp.NULL;
1:3910056:         stompConnection.sendFrame(frame);
1:3910056: 
1:2b5608f:         frame = stompConnection.receiveFrame();
2:3777809:         assertTrue(frame.startsWith("CONNECTED"));
1:2b5608f: 
1:3910056:         frame = "SUBSCRIBE\n" + "destination:/queue/USERS." + getQueueName() + "\n" + "ack:auto\n" + "transformation:" + Stomp.Transformations.JMS_MAP_JSON + "\n\n" + Stomp.NULL;
1:caabb6c:         stompConnection.sendFrame(frame);
1:72dfbfa: 
1:72dfbfa:         StompFrame json = stompConnection.receive();
1:72dfbfa:         LOG.info("Received Frame: {}", json.getBody());
1:72dfbfa:         assertNotNull(json);
1:72dfbfa:         Map<String, String> map = createMapFromJson(json.getBody());
1:caabb6c: 
1:72dfbfa:         assertTrue(map.containsKey("name"));
1:72dfbfa:         assertTrue(map.containsKey("city"));
1:caabb6c: 
1:72dfbfa:         assertEquals("Dejan", map.get("name"));
1:72dfbfa:         assertEquals("Belgrade", map.get("city"));
1:2b5608f:     }
1:caabb6c: 
1:540a66b:     @Test(timeout = 60000)
1:4c92244:     public void testDurableUnsub() throws Exception {
1:4bba15a:         // get broker JMX view
1:4bba15a: 
1:4bba15a:         String domain = "org.apache.activemq";
1:26d7070:         ObjectName brokerName = new ObjectName(domain + ":type=Broker,brokerName=localhost");
1:4bba15a: 
1:a57108c:         final BrokerViewMBean view = (BrokerViewMBean)
1:1236bbf:                 brokerService.getManagementContext().newProxyInstance(brokerName, BrokerViewMBean.class, true);
1:4bba15a: 
1:4bba15a:         // connect
1:4bba15a:         String frame = "CONNECT\n" + "login:system\n" + "passcode:manager\nclient-id:test\n\n" + Stomp.NULL;
1:4bba15a:         stompConnection.sendFrame(frame);
1:4bba15a: 
1:4bba15a:         frame = stompConnection.receiveFrame();
1:4bba15a:         assertTrue(frame.startsWith("CONNECTED"));
1:4c92244:         assertEquals(view.getDurableTopicSubscribers().length, 0);
1:caabb6c: 
1:4c92244:         // subscribe
1:4c92244:         frame = "SUBSCRIBE\n" + "destination:/topic/" + getQueueName() + "\n" + "ack:auto\nactivemq.subscriptionName:test\n\n" + Stomp.NULL;
1:4c92244:         stompConnection.sendFrame(frame);
1:caabb6c: 
1:4c92244:         // wait a bit for MBean to get refreshed
1:a57108c:         Wait.waitFor(new Wait.Condition(){
1:a57108c:             @Override
1:a57108c:             public boolean isSatisified() throws Exception {
1:a57108c:                 return view.getDurableTopicSubscribers().length == 1;
1:a57108c:             }
1:a57108c:         });
1:caabb6c: 
1:4c92244:         assertEquals(view.getDurableTopicSubscribers().length, 1);
1:caabb6c: 
1:4bba15a:         // disconnect
1:4bba15a:         frame = "DISCONNECT\nclient-id:test\n\n" + Stomp.NULL;
1:4c92244:         stompConnection.sendFrame(frame);
1:388c16d:         Wait.waitFor(new Wait.Condition() {
1:388c16d: 
1:388c16d:             @Override
1:388c16d:             public boolean isSatisified() throws Exception {
1:388c16d:                 return getProxyToBroker().getCurrentConnectionsCount() == 1;
1:388c16d:             }
1:388c16d:         }, TimeUnit.SECONDS.toMillis(5), TimeUnit.MILLISECONDS.toMillis(25));
1:caabb6c: 
1:4c92244:         //reconnect
1:4c92244:         stompConnect();
1:caabb6c:         // connect
1:956724e:         frame = "CONNECT\n" + "login:system\n" + "passcode:manager\nclient-id:test\n\n" + Stomp.NULL;
1:caabb6c:         stompConnection.sendFrame(frame);
1:4c92244:         frame = stompConnection.receiveFrame();
1:4c92244:         assertTrue(frame.startsWith("CONNECTED"));
1:caabb6c: 
1:4c92244:         // unsubscribe
1:2f0ef2e:         frame = "UNSUBSCRIBE\n" + "destination:/topic/" + getQueueName() + "\n" + "activemq.subscriptionName:test\n\n" + Stomp.NULL;
1:caabb6c:         stompConnection.sendFrame(frame);
1:bd31548:         frame = "DISCONNECT\n" + "\n\n" + Stomp.NULL;
1:5774d00:         stompConnection.sendFrame(frame);
1:72eb191: 
1:a57108c:         Wait.waitFor(new Wait.Condition(){
1:a57108c:             @Override
1:a57108c:             public boolean isSatisified() throws Exception {
1:a57108c:                 return view.getDurableTopicSubscribers().length == 0 && view.getInactiveDurableTopicSubscribers().length == 0;
1:a6f1d75:             }
1:388c16d:         }, TimeUnit.SECONDS.toMillis(5), TimeUnit.MILLISECONDS.toMillis(25));
1:a6f1d75: 
1:4c92244:         assertEquals(view.getDurableTopicSubscribers().length, 0);
1:2f0ef2e:         assertEquals(view.getInactiveDurableTopicSubscribers().length, 0);
1:f8a601a:     }
1:a6f1d75: 
1:540a66b:     @Test(timeout = 60000)
1:4bba15a:     public void testDurableSubAttemptOnQueueFails() throws Exception {
1:caabb6c:         // get broker JMX view
1:f8a601a: 
1:4c92244:         String domain = "org.apache.activemq";
1:26d7070:         ObjectName brokerName = new ObjectName(domain + ":type=Broker,brokerName=localhost");
1:caabb6c: 
1:1236bbf:         BrokerViewMBean view = (BrokerViewMBean)
1:1236bbf:                 brokerService.getManagementContext().newProxyInstance(brokerName, BrokerViewMBean.class, true);
1:caabb6c: 
1:caabb6c:         // connect
1:956724e:         String frame = "CONNECT\n" + "login:system\n" + "passcode:manager\nclient-id:test\n\n" + Stomp.NULL;
1:a6f1d75:         stompConnection.sendFrame(frame);
1:caabb6c: 
1:2b5608f:         frame = stompConnection.receiveFrame();
1:2b5608f:         assertTrue(frame.startsWith("CONNECTED"));
1:4bba15a:         assertEquals(view.getQueueSubscribers().length, 0);
1:4bba15a: 
1:4bba15a:         // subscribe
1:4bba15a:         frame = "SUBSCRIBE\n" + "destination:/queue/" + getQueueName() + "\n" + "ack:auto\nactivemq.subscriptionName:test\n\n" + Stomp.NULL;
1:4bba15a:         stompConnection.sendFrame(frame);
1:4bba15a: 
1:4bba15a:         frame = stompConnection.receiveFrame();
1:4bba15a:         assertTrue(frame.startsWith("ERROR"));
1:4bba15a: 
1:4bba15a:         assertEquals(view.getQueueSubscribers().length, 0);
1:4bba15a:     }
1:4bba15a: 
1:540a66b:     @Test(timeout = 60000)
1:caabb6c:     public void testMessageIdHeader() throws Exception {
1:1a6279e:         stompConnection.connect("system", "manager");
1:caabb6c: 
1:7aec12e:         stompConnection.begin("tx1");
1:7aec12e:         stompConnection.send("/queue/" + getQueueName(), "msg", "tx1", null);
1:7aec12e:         stompConnection.commit("tx1");
1:caabb6c: 
1:7aec12e:         stompConnection.subscribe("/queue/" + getQueueName());
1:7aec12e:         StompFrame stompMessage = stompConnection.receive();
1:caabb6c:         assertNull(stompMessage.getHeaders().get("transaction"));
1:a57108c:     }
1:caabb6c: 
1:540a66b:     @Test(timeout = 60000)
1:e4d90d9:     public void testPrefetchSizeOfOneClientAck() throws Exception {
1:e4d90d9:         stompConnection.connect("system", "manager");
1:e4d90d9: 
1:e4d90d9:         HashMap<String, String> headers = new HashMap<String, String>();
1:e4d90d9:         headers.put("activemq.prefetchSize", "1");
1:e4d90d9:         stompConnection.subscribe("/queue/" + getQueueName(), "client", headers);
1:e4d90d9: 
1:e4d90d9:         // send messages using JMS
1:e4d90d9:         sendMessage("message 1");
1:e4d90d9:         sendMessage("message 2");
1:e4d90d9:         sendMessage("message 3");
1:e4d90d9:         sendMessage("message 4");
1:e4d90d9:         sendMessage("message 5");
1:e4d90d9: 
1:e4d90d9:         StompFrame frame = stompConnection.receive();
1:e4d90d9:         assertEquals(frame.getBody(), "message 1");
1:e4d90d9: 
1:e4d90d9:         try {
1:e4d90d9:             StompFrame frameNull = stompConnection.receive(500);
1:e4d90d9:             if (frameNull != null) {
1:e4d90d9:                 fail("Should not have received the second message");
1:e4d90d9:             }
1:e4d90d9:         } catch (SocketTimeoutException soe) {}
1:e4d90d9: 
1:e4d90d9:         stompConnection.ack(frame);
1:e4d90d9: 
1:e4d90d9:         StompFrame frame1 = stompConnection.receive();
1:e4d90d9:         assertEquals(frame1.getBody(), "message 2");
1:e4d90d9: 
1:e4d90d9:         try {
1:e4d90d9:             StompFrame frameNull = stompConnection.receive(500);
1:e4d90d9:             if (frameNull != null) {
1:e4d90d9:                 fail("Should not have received the third message");
1:e4d90d9:             }
1:e4d90d9:         } catch (SocketTimeoutException soe) {}
1:e4d90d9: 
1:e4d90d9:         stompConnection.ack(frame1);
1:e4d90d9:         StompFrame frame2 = stompConnection.receive();
1:e4d90d9:         assertEquals(frame2.getBody(), "message 3");
1:e4d90d9: 
1:e4d90d9:         try {
1:e4d90d9:             StompFrame frameNull = stompConnection.receive(500);
1:e4d90d9:             if (frameNull != null) {
1:e4d90d9:                 fail("Should not have received the fourth message");
1:e4d90d9:             }
1:e4d90d9:         } catch (SocketTimeoutException soe) {}
1:e4d90d9: 
1:e4d90d9:         stompConnection.ack(frame2);
1:e4d90d9:         StompFrame frame3 = stompConnection.receive();
1:e4d90d9:         assertEquals(frame3.getBody(), "message 4");
1:e4d90d9: 
1:e4d90d9:         try {
1:e4d90d9:             StompFrame frameNull = stompConnection.receive(500);
1:e4d90d9:             if (frameNull != null) {
1:e4d90d9:                 fail("Should not have received the fifth message");
1:e4d90d9:             }
1:e4d90d9:         } catch (SocketTimeoutException soe) {}
1:e4d90d9: 
1:e4d90d9:         stompConnection.ack(frame3);
1:e4d90d9:         StompFrame frame4 = stompConnection.receive();
1:e4d90d9:         assertEquals(frame4.getBody(), "message 5");
1:e4d90d9: 
1:e4d90d9:         try {
1:e4d90d9:             StompFrame frameNull = stompConnection.receive(500);
1:e4d90d9:             if (frameNull != null) {
1:e4d90d9:                 fail("Should not have received any more messages");
1:e4d90d9:             }
1:e4d90d9:         } catch (SocketTimeoutException soe) {}
1:e4d90d9: 
1:e4d90d9:         stompConnection.ack(frame4);
1:e4d90d9: 
1:e4d90d9:         try {
1:e4d90d9:             StompFrame frameNull = stompConnection.receive(500);
1:e4d90d9:             if (frameNull != null) {
1:e4d90d9:                 fail("Should not have received the any more messages");
1:e4d90d9:             }
1:e4d90d9:         } catch (SocketTimeoutException soe) {}
1:e4d90d9:     }
1:e4d90d9: 
1:540a66b:     @Test(timeout = 60000)
1:d8bdf5b:     public void testPrefetchSize() throws Exception {
1:d8bdf5b:         stompConnection.connect("system", "manager");
1:caabb6c: 
1:d8bdf5b:         HashMap<String, String> headers = new HashMap<String, String>();
1:d8bdf5b:         headers.put("activemq.prefetchSize", "1");
1:d8bdf5b:         stompConnection.subscribe("/queue/" + getQueueName(), "client", headers);
1:caabb6c: 
1:d8bdf5b:         // send messages using JMS
1:d8bdf5b:         sendMessage("message 1");
1:d8bdf5b:         sendMessage("message 2");
1:d8bdf5b:         sendMessage("message 3");
1:f6ebeec:         sendMessage("message 4");
1:f6ebeec:         sendMessage("message 5");
1:a57108c: 
1:a57108c:         StompFrame frame = stompConnection.receive(20000);
1:f6ebeec:         assertEquals(frame.getBody(), "message 1");
1:a57108c: 
1:d8bdf5b:         stompConnection.begin("tx1");
1:d8bdf5b:         stompConnection.ack(frame, "tx1");
1:caabb6c: 
1:d8bdf5b:         StompFrame frame1 = stompConnection.receive();
1:f6ebeec:         assertEquals(frame1.getBody(), "message 2");
1:584d52c: 
1:d8bdf5b:         try {
1:caabb6c:             StompFrame frame2 = stompConnection.receive(500);
1:caabb6c:             if (frame2 != null) {
1:caabb6c:                 fail("Should not have received the second message");
1:caabb6c:             }
1:d8bdf5b:         } catch (SocketTimeoutException soe) {}
1:caabb6c: 
1:c6c9125:         stompConnection.ack(frame1, "tx1");
1:3845aaa:         Thread.sleep(1000);
1:f6ebeec:         stompConnection.abort("tx1");
1:caabb6c: 
1:f6ebeec:         stompConnection.begin("tx2");
1:caabb6c: 
1:b0f24f3:         // Previously delivered message need to get re-acked...
1:b0f24f3:         stompConnection.ack(frame, "tx2");
1:b0f24f3:         stompConnection.ack(frame1, "tx2");
1:caabb6c: 
1:a57108c:         StompFrame frame3 = stompConnection.receive(20000);
1:b0f24f3:         assertEquals(frame3.getBody(), "message 3");
1:f6ebeec:         stompConnection.ack(frame3, "tx2");
1:caabb6c: 
1:a57108c:         StompFrame frame4 = stompConnection.receive(20000);
1:b0f24f3:         assertEquals(frame4.getBody(), "message 4");
1:f6ebeec:         stompConnection.ack(frame4, "tx2");
1:caabb6c: 
1:f6ebeec:         stompConnection.commit("tx2");
1:caabb6c: 
1:f6ebeec:         stompConnection.begin("tx3");
1:a57108c:         StompFrame frame5 = stompConnection.receive(20000);
1:b0f24f3:         assertEquals(frame5.getBody(), "message 5");
1:b0f24f3:         stompConnection.ack(frame5, "tx3");
1:f6ebeec:         stompConnection.commit("tx3");
1:3060a64: 
1:d8bdf5b:         stompDisconnect();
1:584d52c:     }
1:caabb6c: 
1:540a66b:     @Test(timeout = 60000)
1:1a6279e:     public void testTransactionsWithMultipleDestinations() throws Exception {
1:caabb6c: 
1:caabb6c:         stompConnection.connect("system", "manager");
1:caabb6c: 
1:1a6279e:         HashMap<String, String> headers = new HashMap<String, String>();
1:1a6279e:         headers.put("activemq.prefetchSize", "1");
1:1a6279e:         headers.put("activemq.exclusive", "true");
1:caabb6c: 
1:caabb6c:         stompConnection.subscribe("/queue/test1", "client", headers);
1:caabb6c: 
1:caabb6c:         stompConnection.begin("ID:tx1");
1:caabb6c: 
1:caabb6c:         headers.clear();
1:caabb6c:         headers.put("receipt", "ID:msg1");
1:caabb6c:         stompConnection.send("/queue/test2", "test message", "ID:tx1", headers);
1:caabb6c: 
1:caabb6c:         stompConnection.commit("ID:tx1");
1:caabb6c: 
1:caabb6c:         // make sure connection is active after commit
1:caabb6c:         Thread.sleep(1000);
1:caabb6c:         stompConnection.send("/queue/test1", "another message");
1:caabb6c: 
1:caabb6c:         StompFrame frame = stompConnection.receive(500);
2:9807ee3:         assertNotNull(frame);
1:9807ee3:     }
1:9807ee3: 
1:540a66b:     @Test(timeout = 60000)
1:876ddef:     public void testTempDestination() throws Exception {
1:9807ee3: 
1:956724e:         String frame = "CONNECT\n" + "login:system\n" + "passcode:manager\n\n" + Stomp.NULL;
1:4bba15a:         stompConnection.sendFrame(frame);
1:9807ee3: 
1:9807ee3:         frame = stompConnection.receiveFrame();
1:876ddef:         assertTrue(frame.startsWith("CONNECTED"));
1:caabb6c: 
1:876ddef:         frame = "SUBSCRIBE\n" + "destination:/temp-queue/" + getQueueName() + "\n" + "ack:auto\n\n" + Stomp.NULL;
1:a6f1d75:         stompConnection.sendFrame(frame);
1:caabb6c: 
1:876ddef:         frame = "SEND\n" + "destination:/temp-queue/" + getQueueName() + "\n\n" + "Hello World" + Stomp.NULL;
1:f8a601a:         stompConnection.sendFrame(frame);
1:584d52c: 
1:caabb6c:         StompFrame message = stompConnection.receive(1000);
1:876ddef:         assertEquals("Hello World", message.getBody());
1:876ddef:     }
1:681cf04: 
1:540a66b:     @Test(timeout = 60000)
1:caabb6c:     public void testJMSXUserIDIsSetInMessage() throws Exception {
1:caabb6c: 
1:caabb6c:         MessageConsumer consumer = session.createConsumer(queue);
1:caabb6c: 
1:956724e:         String frame = "CONNECT\n" + "login:system\n" + "passcode:manager\n\n" + Stomp.NULL;
1:9807ee3:         stompConnection.sendFrame(frame);
1:caabb6c: 
1:9807ee3:         frame = stompConnection.receiveFrame();
1:caabb6c:         assertTrue(frame.startsWith("CONNECTED"));
1:caabb6c: 
1:caabb6c:         frame = "SEND\n" + "destination:/queue/" + getQueueName() + "\n\n" + "Hello World" + Stomp.NULL;
1:caabb6c: 
1:3e022d8:         stompConnection.sendFrame(frame);
1:caabb6c: 
1:1e8acfa:         TextMessage message = (TextMessage)consumer.receive(5000);
1:caabb6c:         assertNotNull(message);
1:caabb6c:         assertEquals("system", message.getStringProperty(Stomp.Headers.Message.USERID));
1:caabb6c:     }
1:caabb6c: 
1:540a66b:     @Test(timeout = 60000)
1:caabb6c:     public void testJMSXUserIDIsSetInStompMessage() throws Exception {
1:caabb6c: 
1:956724e:         String frame = "CONNECT\n" + "login:system\n" + "passcode:manager\n\n" + Stomp.NULL;
1:caabb6c:         stompConnection.sendFrame(frame);
1:caabb6c: 
1:caabb6c:         frame = stompConnection.receiveFrame();
1:caabb6c:         assertTrue(frame.startsWith("CONNECTED"));
1:caabb6c: 
1:caabb6c:         frame = "SUBSCRIBE\n" + "destination:/queue/" + getQueueName() + "\n" + "ack:auto\n\n" + Stomp.NULL;
1:caabb6c:         stompConnection.sendFrame(frame);
1:caabb6c: 
1:caabb6c:         frame = "SEND\n" + "destination:/queue/" + getQueueName() + "\n\n" + "Hello World" + Stomp.NULL;
1:caabb6c:         stompConnection.sendFrame(frame);
1:caabb6c: 
1:1e8acfa:         StompFrame message = stompConnection.receive(5000);
1:caabb6c:         assertEquals("system", message.getHeaders().get(Stomp.Headers.Message.USERID));
1:caabb6c:     }
1:caabb6c: 
1:540a66b:     @Test(timeout = 60000)
1:681cf04:     public void testClientSetMessageIdIsIgnored() throws Exception {
1:681cf04:         HashMap<String, String> headers = new HashMap<String, String>();
1:681cf04:         headers.put(Stomp.Headers.Message.MESSAGE_ID, "Thisisnotallowed");
1:681cf04:         headers.put(Stomp.Headers.Message.TIMESTAMP, "1234");
1:681cf04:         headers.put(Stomp.Headers.Message.REDELIVERED, "true");
1:681cf04:         headers.put(Stomp.Headers.Message.SUBSCRIPTION, "Thisisnotallowed");
1:681cf04:         headers.put(Stomp.Headers.Message.USERID, "Thisisnotallowed");
1:681cf04: 
1:681cf04:         stompConnection.connect("system", "manager");
1:681cf04: 
1:681cf04:         stompConnection.send("/queue/" + getQueueName(), "msg", null, headers);
1:600c7c2: 
1:681cf04:         stompConnection.subscribe("/queue/" + getQueueName());
1:681cf04:         StompFrame stompMessage = stompConnection.receive();
1:681cf04: 
1:681cf04:         Map<String, String> mess_headers = new HashMap<String, String>();
1:681cf04:         mess_headers = stompMessage.getHeaders();
1:681cf04: 
1:681cf04:         assertFalse("Thisisnotallowed".equals(mess_headers.get(Stomp.Headers.Message.MESSAGE_ID)
1:681cf04:                 ));
1:436f892:         assertTrue("1234".equals(mess_headers.get(Stomp.Headers.Message.TIMESTAMP)));
1:681cf04:         assertNull(mess_headers.get(Stomp.Headers.Message.REDELIVERED));
1:681cf04:         assertNull(mess_headers.get(Stomp.Headers.Message.SUBSCRIPTION));
1:681cf04:         assertEquals("system", mess_headers.get(Stomp.Headers.Message.USERID));
1:681cf04:     }
1:681cf04: 
1:540a66b:     @Test(timeout = 60000)
1:600c7c2:     public void testExpire() throws Exception {
1:600c7c2:         stompConnection.connect("system", "manager");
1:600c7c2: 
1:600c7c2:         HashMap<String, String> headers = new HashMap<String, String>();
1:d98c3e0:         long timestamp = System.currentTimeMillis() - 100;
1:600c7c2:         headers.put(Stomp.Headers.Message.EXPIRATION_TIME, String.valueOf(timestamp));
1:600c7c2:         headers.put(Stomp.Headers.Send.PERSISTENT, "true");
1:600c7c2: 
1:600c7c2:         stompConnection.send("/queue/" + getQueueName(), "msg", null, headers);
1:600c7c2: 
1:600c7c2:         stompConnection.subscribe("/queue/ActiveMQ.DLQ");
1:d98c3e0:         StompFrame stompMessage = stompConnection.receive(35000);
1:600c7c2:         assertNotNull(stompMessage);
1:600c7c2:         assertEquals(stompMessage.getHeaders().get(Stomp.Headers.Message.ORIGINAL_DESTINATION), "/queue/" + getQueueName());
1:1a6279e:     }
1:603b215: 
1:540a66b:     @Test(timeout = 60000)
1:68a8b6d:     public void testDefaultJMSReplyToDest() throws Exception {
1:7aec12e:         stompConnection.connect("system", "manager");
1:603b215: 
1:68a8b6d:         HashMap<String, String> headers = new HashMap<String, String>();
1:68a8b6d:         headers.put(Stomp.Headers.Send.REPLY_TO, "JustAString");
1:68a8b6d:         headers.put(Stomp.Headers.Send.PERSISTENT, "true");
1:603b215: 
1:68a8b6d:         stompConnection.send("/queue/" + getQueueName(), "msg-with-reply-to", null, headers);
1:603b215: 
1:68a8b6d:         stompConnection.subscribe("/queue/" + getQueueName());
1:600c7c2:         StompFrame stompMessage = stompConnection.receive(1000);
1:68a8b6d:         assertNotNull(stompMessage);
1:c534900:         assertEquals(""  + stompMessage, stompMessage.getHeaders().get(Stomp.Headers.Send.REPLY_TO), "JustAString");
1:600c7c2:     }
1:603b215: 
1:540a66b:     @Test(timeout = 60000)
1:82df23e:     public void testPersistent() throws Exception {
1:82df23e:         stompConnection.connect("system", "manager");
1:603b215: 
1:82df23e:         HashMap<String, String> headers = new HashMap<String, String>();
1:82df23e:         headers.put(Stomp.Headers.Message.PERSISTENT, "true");
1:600c7c2: 
1:82df23e:         stompConnection.send("/queue/" + getQueueName(), "hello", null, headers);
1:82df23e: 
1:82df23e:         stompConnection.subscribe("/queue/" + getQueueName());
1:82df23e: 
1:82df23e:         StompFrame stompMessage = stompConnection.receive();
1:82df23e:         assertNotNull(stompMessage);
1:82df23e:         assertNotNull(stompMessage.getHeaders().get(Stomp.Headers.Message.PERSISTENT));
1:82df23e:         assertEquals(stompMessage.getHeaders().get(Stomp.Headers.Message.PERSISTENT), "true");
1:82df23e:     }
1:82df23e: 
1:540a66b:     @Test(timeout = 60000)
1:82df23e:     public void testPersistentDefaultValue() throws Exception {
1:82df23e:         stompConnection.connect("system", "manager");
1:82df23e: 
1:82df23e:         HashMap<String, String> headers = new HashMap<String, String>();
1:82df23e: 
1:82df23e:         stompConnection.send("/queue/" + getQueueName(), "hello", null, headers);
1:82df23e: 
1:82df23e:         stompConnection.subscribe("/queue/" + getQueueName());
1:82df23e: 
1:82df23e:         StompFrame stompMessage = stompConnection.receive();
1:82df23e:         assertNotNull(stompMessage);
1:82df23e:         assertNull(stompMessage.getHeaders().get(Stomp.Headers.Message.PERSISTENT));
1:82df23e:     }
1:3060a64: 
1:540a66b:     @Test(timeout = 60000)
1:603b215:     public void testReceiptNewQueue() throws Exception {
1:3060a64: 
1:956724e:         String frame = "CONNECT\n" + "login:system\n" + "passcode:manager\n\n" + Stomp.NULL;
1:a54fa4b:         stompConnection.sendFrame(frame);
1:3060a64: 
1:603b215:         frame = stompConnection.receiveFrame();
1:603b215:         assertTrue(frame.startsWith("CONNECTED"));
1:603b215: 
1:603b215:         frame = "SUBSCRIBE\n" + "destination:/queue/" + getQueueName() + 1234 + "\n" + "id:8fee4b8-4e5c9f66-4703-e936-3" + "\n" + "receipt:8fee4b8-4e5c9f66-4703-e936-2" + "\n\n" + Stomp.NULL;
1:603b215:         stompConnection.sendFrame(frame);
1:3060a64: 
1:603b215:         StompFrame receipt = stompConnection.receive();
1:603b215:         assertTrue(receipt.getAction().startsWith("RECEIPT"));
1:603b215:         assertEquals("8fee4b8-4e5c9f66-4703-e936-2", receipt.getHeaders().get("receipt-id"));
1:603b215: 
1:b4f21b6:         frame = "SEND\n" + "destination:/queue/" + getQueueName() + 123 + "\ncontent-length:0" + " \n\n" + Stomp.NULL;
1:603b215:         stompConnection.sendFrame(frame);
1:603b215: 
1:603b215:         frame = "SUBSCRIBE\n" + "destination:/queue/" + getQueueName() + 123 + "\n" + "id:8fee4b8-4e5c9f66-4703-e936-2" + "\n" + "receipt:8fee4b8-4e5c9f66-4703-e936-1" + "\n\n" + Stomp.NULL;
1:603b215:         stompConnection.sendFrame(frame);
1:3060a64: 
1:603b215:         receipt = stompConnection.receive();
1:603b215:         assertTrue(receipt.getAction().startsWith("RECEIPT"));
1:603b215:         assertEquals("8fee4b8-4e5c9f66-4703-e936-1", receipt.getHeaders().get("receipt-id"));
1:603b215: 
1:603b215:         StompFrame message = stompConnection.receive();
1:603b215:         assertTrue(message.getAction().startsWith("MESSAGE"));
1:603b215: 
1:603b215:         String length = message.getHeaders().get("content-length");
1:603b215:         assertEquals("0", length);
1:603b215:         assertEquals(0, message.getContent().length);
1:603b215:     }
1:603b215: 
1:540a66b:     @Test(timeout = 60000)
1:3060a64:     public void testTransactedClientAckBrokerStats() throws Exception {
1:956724e:         String frame = "CONNECT\n" + "login:system\n" + "passcode:manager\n\n" + Stomp.NULL;
1:3060a64:         stompConnection.sendFrame(frame);
1:3060a64: 
1:3060a64:         frame = stompConnection.receiveFrame();
1:3060a64:         assertTrue(frame.startsWith("CONNECTED"));
1:3060a64: 
1:3060a64:         sendMessage(getName());
1:3060a64:         sendMessage(getName());
1:3060a64: 
1:3060a64:         stompConnection.begin("tx1");
1:3060a64: 
1:3060a64:         frame = "SUBSCRIBE\n" + "destination:/queue/" + getQueueName() + "\n" + "ack:client\n\n" + Stomp.NULL;
1:603b215:         stompConnection.sendFrame(frame);
1:603b215: 
1:3060a64:         StompFrame message = stompConnection.receive();
1:3060a64:         assertTrue(message.getAction().equals("MESSAGE"));
1:3060a64:         stompConnection.ack(message, "tx1");
1:3060a64: 
1:3060a64:         message = stompConnection.receive();
1:3060a64:         assertTrue(message.getAction().equals("MESSAGE"));
1:3060a64:         stompConnection.ack(message, "tx1");
1:3060a64: 
1:3060a64:         stompConnection.commit("tx1");
1:3060a64: 
1:e426de8:         frame = "DISCONNECT\n" + "\n\n" + Stomp.NULL;
1:3060a64:         stompConnection.sendFrame(frame);
1:3060a64: 
1:93a379f:         final QueueViewMBean queueView = getProxyToQueue(getQueueName());
1:93a379f:         Wait.waitFor(new Wait.Condition(){
1:93a379f:             @Override
1:93a379f:             public boolean isSatisified() throws Exception {
1:93a379f:                 return queueView.getDequeueCount() == 2;
1:f6ebeec:             }
1:a57108c:         });
1:3060a64:         assertEquals(2, queueView.getDispatchCount());
1:3060a64:         assertEquals(2, queueView.getDequeueCount());
1:3060a64:         assertEquals(0, queueView.getQueueSize());
1:3060a64:     }
1:5774d00: 
1:540a66b:     @Test(timeout = 60000)
1:1c26408:     public void testReplytoModification() throws Exception {
1:5774d00:         String replyto = "some destination";
1:956724e:         String frame = "CONNECT\n" + "login:system\n" + "passcode:manager\n\n" + Stomp.NULL;
1:1c26408:         stompConnection.sendFrame(frame);
1:9ff3500: 
1:1c26408:         frame = stompConnection.receiveFrame();
1:1c26408:         assertTrue(frame.startsWith("CONNECTED"));
1:3060a64: 
1:1c26408:         frame = "SUBSCRIBE\n" + "destination:/queue/" + getQueueName() + "\n" + "ack:auto\n\n" + Stomp.NULL;
1:1c26408:         stompConnection.sendFrame(frame);
1:3060a64: 
1:1c26408:         frame = "SEND\n" + "destination:/queue/" + getQueueName() + "\n" + "reply-to:" + replyto + "\n\nhello world" + Stomp.NULL;
1:1c26408:         stompConnection.sendFrame(frame);
1:1c26408: 
1:1c26408:         StompFrame message = stompConnection.receive();
1:1c26408:         assertTrue(message.getAction().equals("MESSAGE"));
1:1c26408:         assertEquals(replyto, message.getHeaders().get("reply-to"));
1:3060a64:     }
1:1c26408: 
1:540a66b:     @Test(timeout = 60000)
1:9ff3500:     public void testReplyToDestinationNaming() throws Exception {
1:9ff3500: 
1:956724e:         String frame = "CONNECT\n" + "login:system\n" + "passcode:manager\n\n" + Stomp.NULL;
1:9ff3500:         stompConnection.sendFrame(frame);
1:9ff3500: 
1:9ff3500:         frame = stompConnection.receiveFrame();
1:9ff3500:         assertTrue(frame.startsWith("CONNECTED"));
1:9ff3500: 
1:9ff3500:         doTestActiveMQReplyToTempDestination("topic");
1:9ff3500:         doTestActiveMQReplyToTempDestination("queue");
1:9ff3500:     }
1:9ff3500: 
1:540a66b:     @Test(timeout = 60000)
1:e426de8:     public void testSendNullBodyTextMessage() throws Exception {
1:956724e:         String frame = "CONNECT\n" + "login:system\n" + "passcode:manager\n\n" + Stomp.NULL;
1:e426de8:         stompConnection.sendFrame(frame);
1:e426de8: 
1:e426de8:         frame = stompConnection.receiveFrame();
1:e426de8:         assertTrue(frame.startsWith("CONNECTED"));
1:e426de8: 
1:e426de8:         frame = "SUBSCRIBE\n" + "destination:/queue/" + getQueueName() + "\n" + "ack:auto\n\n" + Stomp.NULL;
1:e426de8:         stompConnection.sendFrame(frame);
1:e426de8: 
1:e426de8:         sendMessage(null);
1:e426de8:         frame = stompConnection.receiveFrame();
1:e426de8:         assertNotNull("Message not received", frame);
1:e426de8:     }
1:e426de8: 
1:9ff3500:     private void doTestActiveMQReplyToTempDestination(String type) throws Exception {
1:9ff3500:         LOG.info("Starting test on Temp Destinations using a temporary: " + type);
1:e426de8: 
1:9ff3500:         final String dest = "/" + type + "/" + getQueueName();
1:9ff3500:         final String tempDest = String.format("/temp-%s/2C26441740C0ECC9tt1", type);
1:9ff3500:         LOG.info("Test is using out-bound topic: " + dest + ", and replyTo dest: " + tempDest);
1:5b99f11: 
1:9ff3500:         // Subscribe both to the out-bound destination and the response tempt destination
1:9ff3500:         stompConnection.subscribe(dest);
1:9ff3500:         stompConnection.subscribe(tempDest);
1:9ff3500: 
1:9ff3500:         // Send a Message with the ReplyTo value set.
1:5b99f11:         HashMap<String, String> properties = new HashMap<String, String>();
1:9ff3500:         properties.put(Stomp.Headers.Send.REPLY_TO, tempDest);
1:9ff3500:         LOG.info(String.format("Sending request message: SEND with %s=%s", Stomp.Headers.Send.REPLY_TO, tempDest));
1:9ff3500:         stompConnection.send(dest, "REQUEST", null, properties);
1:9ff3500: 
1:9ff3500:         // The subscription should receive a response with the ReplyTo property set.
1:9ff3500:         StompFrame received = stompConnection.receive();
1:9ff3500:         assertNotNull(received);
1:9ff3500:         String remoteReplyTo = received.getHeaders().get(Stomp.Headers.Send.REPLY_TO);
1:9ff3500:         assertNotNull(remoteReplyTo);
1:9ff3500:         assertTrue(remoteReplyTo.startsWith(String.format("/temp-%s/", type)));
1:9ff3500:         LOG.info(String.format("Received request message: %s with %s=%s", received.getAction(), Stomp.Headers.Send.REPLY_TO, remoteReplyTo));
1:9ff3500: 
1:9ff3500:         // Reply to the request using the given ReplyTo destination
1:9ff3500:         stompConnection.send(remoteReplyTo, "RESPONSE");
1:9ff3500: 
1:9ff3500:         // The response should be received by the Temporary Destination subscription
1:9ff3500:         StompFrame reply = stompConnection.receive();
1:9ff3500:         assertNotNull(reply);
1:9ff3500:         assertEquals("MESSAGE", reply.getAction());
1:9ff3500:         LOG.info(String.format("Response %s received", reply.getAction()));
1:9ff3500: 
1:9ff3500:         BrokerViewMBean broker = getProxyToBroker();
1:9ff3500:         if (type.equals("topic")) {
1:9ff3500:             assertEquals(1, broker.getTemporaryTopics().length);
1:9ff3500:         } else {
1:9ff3500:             assertEquals(1, broker.getTemporaryQueues().length);
1:9ff3500:         }
1:9ff3500:     }
1:9ff3500: 
1:540a66b:     @Test(timeout = 60000)
1:5b99f11:     public void testReplyToAcrossConnections() throws Exception {
1:5b99f11: 
1:956724e:         String frame = "CONNECT\n" + "login:system\n" + "passcode:manager\n\n" + Stomp.NULL;
1:e426de8:         stompConnection.sendFrame(frame);
1:5b99f11: 
1:5b99f11:         frame = stompConnection.receiveFrame();
1:5b99f11:         assertTrue(frame.startsWith("CONNECTED"));
1:5b99f11: 
1:5b99f11:         doReplyToAcrossConnections("topic");
1:5b99f11:         doReplyToAcrossConnections("queue");
1:5b99f11:     }
1:5b99f11: 
1:5b99f11:     private void doReplyToAcrossConnections(String type) throws Exception {
1:5b99f11:         LOG.info("Starting test on Temp Destinations using a temporary: " + type);
1:5b99f11: 
1:5b99f11:         StompConnection responder = new StompConnection();
1:5b99f11:         stompConnect(responder);
1:956724e:         String frame = "CONNECT\n" + "login:system\n" + "passcode:manager\n\n" + Stomp.NULL;
1:5b99f11:         responder.sendFrame(frame);
1:5b99f11: 
1:5b99f11:         frame = responder.receiveFrame();
1:5b99f11:         assertTrue(frame.startsWith("CONNECTED"));
1:5b99f11: 
1:5b99f11:         final String dest = "/" + type + "/" + getQueueName();
1:5b99f11:         final String tempDest = String.format("/temp-%s/2C26441740C0ECC9tt1:1:0:1", type);
1:5b99f11:         LOG.info("Test is using out-bound topic: " + dest + ", and replyTo dest: " + tempDest);
1:5b99f11: 
1:5b99f11:         // Subscribe to the temp destination, this is where we get our response.
1:5b99f11:         stompConnection.subscribe(tempDest);
1:5b99f11: 
1:4751a9c:         // Subscribe to the destination, this is where we get our request.
1:4751a9c:         HashMap<String, String> properties = new HashMap<String, String>();
1:4751a9c:         properties.put(Stomp.Headers.RECEIPT_REQUESTED, "subscribe-1");
1:4751a9c:         responder.subscribe(dest, null, properties);
1:4751a9c: 
1:4751a9c:         frame = responder.receiveFrame();
1:4751a9c:         assertTrue("Receipt Frame: " + frame, frame.trim().startsWith("RECEIPT"));
1:4751a9c:         assertTrue("Receipt contains correct receipt-id " + frame, frame.indexOf(Stomp.Headers.Response.RECEIPT_ID) >= 0);
1:5b99f11: 
1:5b99f11:         // Send a Message with the ReplyTo value set.
1:4751a9c:         properties = new HashMap<String, String>();
1:5b99f11:         properties.put(Stomp.Headers.Send.REPLY_TO, tempDest);
1:882c553:         properties.put(Stomp.Headers.RECEIPT_REQUESTED, "send-1");
1:5b99f11:         LOG.info(String.format("Sending request message: SEND with %s=%s", Stomp.Headers.Send.REPLY_TO, tempDest));
1:5b99f11:         stompConnection.send(dest, "REQUEST", null, properties);
1:9ff3500: 
1:882c553:         frame = stompConnection.receiveFrame();
1:882c553:         assertTrue("Receipt Frame: " + frame, frame.trim().startsWith("RECEIPT"));
1:882c553:         assertTrue("Receipt contains correct receipt-id " + frame, frame.indexOf(Stomp.Headers.Response.RECEIPT_ID) >= 0);
1:9ff3500: 
1:5b99f11:         // The subscription should receive a response with the ReplyTo property set.
1:5b99f11:         StompFrame received = responder.receive();
1:5b99f11:         assertNotNull(received);
1:5b99f11:         String remoteReplyTo = received.getHeaders().get(Stomp.Headers.Send.REPLY_TO);
1:5b99f11:         assertNotNull(remoteReplyTo);
1:5b99f11:         assertTrue(remoteReplyTo.startsWith(String.format("/remote-temp-%s/", type)));
1:5b99f11:         LOG.info(String.format("Received request message: %s with %s=%s", received.getAction(), Stomp.Headers.Send.REPLY_TO, remoteReplyTo));
1:5b99f11: 
1:5b99f11:         // Reply to the request using the given ReplyTo destination
1:5b99f11:         responder.send(remoteReplyTo, "RESPONSE");
1:5b99f11: 
1:5b99f11:         // The response should be received by the Temporary Destination subscription
1:5b99f11:         StompFrame reply = stompConnection.receive();
1:5b99f11:         assertNotNull(reply);
1:5b99f11:         assertEquals("MESSAGE", reply.getAction());
1:5b99f11:         assertTrue(reply.getBody().contains("RESPONSE"));
1:5b99f11:         LOG.info(String.format("Response %s received", reply.getAction()));
1:5b99f11: 
1:5b99f11:         BrokerViewMBean broker = getProxyToBroker();
1:5b99f11:         if (type.equals("topic")) {
1:5b99f11:             assertEquals(1, broker.getTemporaryTopics().length);
1:5b99f11:         } else {
1:5b99f11:             assertEquals(1, broker.getTemporaryQueues().length);
1:5b99f11:         }
1:5b99f11:     }
1:5b99f11: 
1:93a379f:     protected void assertClients(final int expected) throws Exception {
1:93a379f:         Wait.waitFor(new Wait.Condition()
1:93a379f:         {
1:93a379f:             @Override
1:93a379f:             public boolean isSatisified() throws Exception {
1:1236bbf:                 return brokerService.getBroker().getClients().length == expected;
1:9ff3500:             }
1:388c16d:         }, TimeUnit.SECONDS.toMillis(30), TimeUnit.MILLISECONDS.toMillis(100));
1:1236bbf:         org.apache.activemq.broker.Connection[] clients = brokerService.getBroker().getClients();
1:0aac7f5:         int actual = clients.length;
1:600c7c2: 
1:0aac7f5:         assertEquals("Number of clients", expected, actual);
1:1c26408:     }
1:600c7c2: 
1:540a66b:     @Test(timeout = 60000)
1:f33f32e:     public void testDisconnectDoesNotDeadlockBroker() throws Exception {
1:f33f32e:         for (int i = 0; i < 20; ++i) {
1:f33f32e:             doTestConnectionLeak();
1:f33f32e:         }
1:f33f32e:     }
1:f33f32e: 
1:f33f32e:     private void doTestConnectionLeak() throws Exception {
1:f33f32e:         stompConnect();
1:f33f32e: 
1:956724e:         String frame = "CONNECT\n" + "login:system\n" + "passcode:manager\n\n" + Stomp.NULL;
1:f33f32e:         stompConnection.sendFrame(frame);
1:f33f32e: 
1:f33f32e:         frame = stompConnection.receiveFrame();
1:f33f32e:         assertTrue(frame.startsWith("CONNECTED"));
1:f33f32e: 
1:f33f32e:         boolean gotMessage = false;
1:f33f32e:         boolean gotReceipt = false;
1:f33f32e: 
1:f33f32e:         char[] payload = new char[1024];
1:f33f32e:         Arrays.fill(payload, 'A');
1:f33f32e: 
1:f33f32e:         String test = "SEND\n" +
1:f33f32e:                 "x-type:DEV-3485\n"  +
1:f33f32e:                 "x-uuid:" + UUID.randomUUID() + "\n"  +
1:f33f32e:                 "persistent:true\n"  +
1:f33f32e:                 "receipt:" + UUID.randomUUID() + "\n" +
1:f33f32e:                 "destination:/queue/test.DEV-3485" +
1:f33f32e:                 "\n\n" +
1:f33f32e:                 new String(payload) + Stomp.NULL;
1:f33f32e: 
1:f33f32e:         frame = "SUBSCRIBE\n" + "destination:/queue/test.DEV-3485\n" + "ack:auto\n\n" + Stomp.NULL;
1:f33f32e:         stompConnection.sendFrame(frame);
1:f33f32e: 
1:f33f32e:         stompConnection.sendFrame(test);
1:f33f32e: 
1:f33f32e:         // We only want one of them, to trigger the shutdown and potentially
1:f33f32e:         // see a deadlock.
1:f33f32e:         while (!gotMessage && !gotReceipt) {
1:f33f32e:             frame = stompConnection.receiveFrame();
1:f33f32e: 
1:f33f32e:             LOG.debug("Received the frame: " + frame);
1:f33f32e: 
1:f33f32e:             if (frame.startsWith("RECEIPT")) {
1:f33f32e:                 gotReceipt = true;
1:f33f32e:             } else if(frame.startsWith("MESSAGE")) {
1:f33f32e:                 gotMessage = true;
1:f33f32e:             } else {
1:f33f32e:                 fail("Received a frame that we were not expecting.");
1:f33f32e:             }
1:f33f32e:         }
1:f33f32e:     }
1:f33f32e: 
1:540a66b:     @Test(timeout = 60000)
1:a54fa4b:     public void testHeaderValuesAreTrimmed1_0() throws Exception {
1:f33f32e: 
1:a54fa4b:         String connectFrame = "CONNECT\n" +
1:a54fa4b:                 "login:system\n" +
1:a54fa4b:                 "passcode:manager\n" +
1:a54fa4b:                 "accept-version:1.0\n" +
1:a54fa4b:                 "host:localhost\n" +
1:a54fa4b:                 "\n" + Stomp.NULL;
1:a54fa4b:         stompConnection.sendFrame(connectFrame);
1:f33f32e: 
1:a54fa4b:         String f = stompConnection.receiveFrame();
1:a54fa4b:         LOG.debug("Broker sent: " + f);
1:f33f32e: 
1:a54fa4b:         assertTrue(f.startsWith("CONNECTED"));
1:f33f32e: 
1:a54fa4b:         String message = "SEND\n" + "destination:/queue/" + getQueueName() +
1:a54fa4b:                 "\ntest1: value" +
1:a54fa4b:                 "\ntest2:value " +
1:a54fa4b:                 "\ntest3: value " +
1:a54fa4b:                 "\n\n" + "Hello World" + Stomp.NULL;
1:a54fa4b: 
1:a54fa4b:         stompConnection.sendFrame(message);
1:a54fa4b: 
1:a54fa4b:         String frame = "SUBSCRIBE\n" + "destination:/queue/" + getQueueName() + "\n" +
1:a54fa4b:                 "id:12345\n" + "ack:auto\n\n" + Stomp.NULL;
1:f33f32e:         stompConnection.sendFrame(frame);
1:a54fa4b: 
1:a54fa4b:         StompFrame received = stompConnection.receive();
1:a54fa4b:         assertTrue(received.getAction().equals("MESSAGE"));
1:a54fa4b: 
1:a54fa4b:         assertEquals("value", received.getHeaders().get("test1"));
1:a54fa4b:         assertEquals("value", received.getHeaders().get("test2"));
1:a54fa4b:         assertEquals("value", received.getHeaders().get("test3"));
1:a54fa4b: 
1:a54fa4b:         frame = "UNSUBSCRIBE\n" + "destination:/queue/" + getQueueName() + "\n" +
1:a54fa4b:                 "id:12345\n\n" + Stomp.NULL;
1:a54fa4b:         stompConnection.sendFrame(frame);
1:a54fa4b:     }
1:a54fa4b: 
1:540a66b:     @Test(timeout = 60000)
1:72eb191:     public void testSendReceiveBigMessage() throws Exception {
1:72eb191: 
1:72eb191:         String frame = "CONNECT\n" + "login:system\n" + "passcode:manager\n\n" + Stomp.NULL;
1:72eb191:         stompConnection.sendFrame(frame);
1:72eb191: 
1:72eb191:         frame = stompConnection.receiveFrame();
1:72eb191:         assertTrue(frame.startsWith("CONNECTED"));
1:72eb191: 
1:72eb191:         frame = "SUBSCRIBE\n" + "destination:/queue/" + getQueueName() + "\n" + "ack:auto\n\n" + Stomp.NULL;
1:72eb191:         stompConnection.sendFrame(frame);
1:72eb191: 
1:72eb191:         int size = 100;
1:72eb191:         char[] bigBodyArray = new char[size];
1:72eb191:         Arrays.fill(bigBodyArray, 'a');
1:72eb191:         String bigBody = new String(bigBodyArray);
1:72eb191: 
1:72eb191:         frame = "SEND\n" + "destination:/queue/" + getQueueName() + "\n\n" + bigBody + Stomp.NULL;
1:72eb191: 
1:72eb191:         stompConnection.sendFrame(frame);
1:72eb191: 
1:72eb191:         StompFrame sframe = stompConnection.receive();
1:72eb191:         assertNotNull(sframe);
1:72eb191:         assertEquals("MESSAGE", sframe.getAction());
1:72eb191:         assertEquals(bigBody, sframe.getBody());
1:72dfbfa: 
1:72eb191:         size = 3000000;
1:72eb191:         bigBodyArray = new char[size];
1:72eb191:         Arrays.fill(bigBodyArray, 'a');
1:72eb191:         bigBody = new String(bigBodyArray);
1:72eb191: 
1:72eb191:         frame = "SEND\n" + "destination:/queue/" + getQueueName() + "\n\n" + bigBody + Stomp.NULL;
1:72eb191: 
1:72eb191:         stompConnection.sendFrame(frame);
1:72eb191: 
1:3845aaa:         sframe = stompConnection.receive(5000);
1:72eb191:         assertNotNull(sframe);
1:72eb191:         assertEquals("MESSAGE", sframe.getAction());
1:72eb191:         assertEquals(bigBody, sframe.getBody());
1:72eb191:     }
1:72eb191: 
1:41a1007:     @Test(timeout = 60000)
1:41a1007:     public void testAckInTransactionTopic() throws Exception {
1:41a1007:         doTestAckInTransaction(true);
1:41a1007:     }
1:41a1007: 
1:41a1007:     @Test(timeout = 60000)
1:41a1007:     public void testAckInTransactionQueue() throws Exception {
1:41a1007:         doTestAckInTransaction(false);
1:41a1007:     }
1:41a1007: 
1:41a1007:     public void doTestAckInTransaction(boolean topic) throws Exception {
1:41a1007: 
1:41a1007:         String frame = "CONNECT\n" + "login:system\n" + "passcode:manager\n\n" + Stomp.NULL;
1:41a1007: 
1:41a1007:         stompConnection.sendFrame(frame);
1:41a1007:         stompConnection.receive();
1:41a1007:         String destination = (topic ? "/topic" : "/queue") + "/test";
1:41a1007:         stompConnection.subscribe(destination, Stomp.Headers.Subscribe.AckModeValues.CLIENT);
1:41a1007: 
1:41a1007:         for (int j = 0; j < 5; j++) {
1:41a1007: 
1:41a1007:             for (int i = 0; i < 10; i++) {
1:41a1007:                 stompConnection.send(destination , "message" + i);
1:41a1007:             }
1:41a1007: 
1:41a1007:             stompConnection.begin("tx"+j);
1:41a1007: 
1:41a1007:             for (int i = 0; i < 10; i++) {
1:41a1007:                 StompFrame message = stompConnection.receive();
1:41a1007:                 stompConnection.ack(message, "tx"+j);
1:41a1007: 
1:41a1007:             }
1:41a1007:             stompConnection.commit("tx"+j);
1:41a1007:         }
1:41a1007: 
1:41a1007:         List<Subscription> subs = getDestinationConsumers(brokerService,
1:41a1007:                 ActiveMQDestination.createDestination("test", topic ? ActiveMQDestination.TOPIC_TYPE : ActiveMQDestination.QUEUE_TYPE));
1:41a1007: 
1:41a1007: 
1:41a1007:         for (Subscription subscription : subs) {
1:41a1007:             final AbstractSubscription abstractSubscription = (AbstractSubscription) subscription;
1:41a1007: 
1:41a1007:             assertTrue("prefetchExtension should be back to Zero after commit", Wait.waitFor(new Wait.Condition() {
1:41a1007:                 @Override
1:41a1007:                 public boolean isSatisified() throws Exception {
1:41a1007:                     LOG.info("ext: " + abstractSubscription.getPrefetchExtension().get());
1:41a1007:                     return abstractSubscription.getPrefetchExtension().get() == 0;
1:41a1007:                 }
1:41a1007:             }));
1:41a1007:         }
1:41a1007:     }
1:41a1007: 
1:41a1007:     public static List<Subscription> getDestinationConsumers(BrokerService broker, ActiveMQDestination destination) {
1:41a1007:         List<Subscription> result = null;
1:41a1007:         org.apache.activemq.broker.region.Destination dest = getDestination(broker, destination);
1:41a1007:         if (dest != null) {
1:41a1007:             result = dest.getConsumers();
1:41a1007:         }
1:41a1007:         return result;
1:41a1007:     }
1:41a1007: 
1:41a1007:     public static org.apache.activemq.broker.region.Destination getDestination(BrokerService target, ActiveMQDestination destination) {
1:41a1007:         org.apache.activemq.broker.region.Destination result = null;
1:41a1007:         for (org.apache.activemq.broker.region.Destination dest : getDestinationMap(target, destination).values()) {
1:41a1007:             if (dest.getName().equals(destination.getPhysicalName())) {
1:41a1007:                 result = dest;
1:41a1007:                 break;
1:41a1007:             }
1:41a1007:         }
1:41a1007:         return result;
1:41a1007:     }
1:41a1007: 
1:41a1007:     private static Map<ActiveMQDestination, org.apache.activemq.broker.region.Destination> getDestinationMap(BrokerService target,
1:41a1007:                                                                                                              ActiveMQDestination destination) {
1:41a1007:         RegionBroker regionBroker = (RegionBroker) target.getRegionBroker();
1:41a1007:         if (destination.isTemporary()) {
1:41a1007:             return destination.isQueue() ? regionBroker.getTempQueueRegion().getDestinationMap() :
1:41a1007:                     regionBroker.getTempTopicRegion().getDestinationMap();
1:41a1007:         }
1:41a1007:         return destination.isQueue() ?
1:41a1007:                 regionBroker.getQueueRegion().getDestinationMap() :
1:41a1007:                 regionBroker.getTopicRegion().getDestinationMap();
1:41a1007:     }
1:41a1007: 
1:41a1007: 
1:72dfbfa:     protected SamplePojo createObjectFromJson(String data) throws Exception {
1:72dfbfa:         HierarchicalStreamReader in = new JettisonMappedXmlDriver().createReader(new StringReader(data));
1:72dfbfa:         return createObject(in);
1:72dfbfa:     }
1:72dfbfa: 
1:72dfbfa:     protected SamplePojo createObjectFromXml(String data) throws Exception {
1:72dfbfa:         HierarchicalStreamReader in = new XppReader(new StringReader(data), XppFactory.createDefaultParser());
1:72dfbfa:         return createObject(in);
1:72dfbfa:     }
1:72dfbfa: 
1:72dfbfa:     private SamplePojo createObject(HierarchicalStreamReader in) throws Exception {
1:72dfbfa:         SamplePojo pojo = (SamplePojo) xstream.unmarshal(in);
1:72dfbfa:         return pojo;
1:72dfbfa:     }
1:72dfbfa: 
1:72dfbfa:     protected Map<String, String> createMapFromJson(String data) throws Exception {
1:72dfbfa:         HierarchicalStreamReader in = new JettisonMappedXmlDriver().createReader(new StringReader(data));
1:72dfbfa:         return createMapObject(in);
1:72dfbfa:     }
1:72dfbfa: 
1:72dfbfa:     protected Map<String, String> createMapFromXml(String data) throws Exception {
1:72dfbfa:         HierarchicalStreamReader in = new XppReader(new StringReader(data), XppFactory.createDefaultParser());
1:72dfbfa:         return createMapObject(in);
1:72dfbfa:     }
1:72dfbfa: 
1:72dfbfa:     @SuppressWarnings("unchecked")
1:72dfbfa:     private Map<String, String> createMapObject(HierarchicalStreamReader in) throws Exception {
1:72dfbfa:         Map<String, String> map = (Map<String, String>)xstream.unmarshal(in);
1:72dfbfa:         return map;
1:72dfbfa:     }
1:d8bdf5b: }
============================================================================
author:gtully
-------------------------------------------------------------------------------
commit:41a1007
/////////////////////////////////////////////////////////////////////////
1: import java.util.List;
/////////////////////////////////////////////////////////////////////////
1: import org.apache.activemq.broker.BrokerService;
1: import org.apache.activemq.broker.region.AbstractSubscription;
1: import org.apache.activemq.broker.region.RegionBroker;
1: import org.apache.activemq.broker.region.Subscription;
1: import org.apache.activemq.command.ActiveMQDestination;
/////////////////////////////////////////////////////////////////////////
1:     @Test(timeout = 60000)
1:     public void testAckInTransactionTopic() throws Exception {
1:         doTestAckInTransaction(true);
1:     }
1: 
1:     @Test(timeout = 60000)
1:     public void testAckInTransactionQueue() throws Exception {
1:         doTestAckInTransaction(false);
1:     }
1: 
1:     public void doTestAckInTransaction(boolean topic) throws Exception {
1: 
1:         String frame = "CONNECT\n" + "login:system\n" + "passcode:manager\n\n" + Stomp.NULL;
1: 
1:         stompConnection.sendFrame(frame);
1:         stompConnection.receive();
1:         String destination = (topic ? "/topic" : "/queue") + "/test";
1:         stompConnection.subscribe(destination, Stomp.Headers.Subscribe.AckModeValues.CLIENT);
1: 
1:         for (int j = 0; j < 5; j++) {
1: 
1:             for (int i = 0; i < 10; i++) {
1:                 stompConnection.send(destination , "message" + i);
1:             }
1: 
1:             stompConnection.begin("tx"+j);
1: 
1:             for (int i = 0; i < 10; i++) {
1:                 StompFrame message = stompConnection.receive();
1:                 stompConnection.ack(message, "tx"+j);
1: 
1:             }
1:             stompConnection.commit("tx"+j);
1:         }
1: 
1:         List<Subscription> subs = getDestinationConsumers(brokerService,
1:                 ActiveMQDestination.createDestination("test", topic ? ActiveMQDestination.TOPIC_TYPE : ActiveMQDestination.QUEUE_TYPE));
1: 
1: 
1:         for (Subscription subscription : subs) {
1:             final AbstractSubscription abstractSubscription = (AbstractSubscription) subscription;
1: 
1:             assertTrue("prefetchExtension should be back to Zero after commit", Wait.waitFor(new Wait.Condition() {
1:                 @Override
1:                 public boolean isSatisified() throws Exception {
1:                     LOG.info("ext: " + abstractSubscription.getPrefetchExtension().get());
1:                     return abstractSubscription.getPrefetchExtension().get() == 0;
1:                 }
1:             }));
1:         }
1:     }
1: 
1:     public static List<Subscription> getDestinationConsumers(BrokerService broker, ActiveMQDestination destination) {
1:         List<Subscription> result = null;
1:         org.apache.activemq.broker.region.Destination dest = getDestination(broker, destination);
1:         if (dest != null) {
1:             result = dest.getConsumers();
1:         }
1:         return result;
1:     }
1: 
1:     public static org.apache.activemq.broker.region.Destination getDestination(BrokerService target, ActiveMQDestination destination) {
1:         org.apache.activemq.broker.region.Destination result = null;
1:         for (org.apache.activemq.broker.region.Destination dest : getDestinationMap(target, destination).values()) {
1:             if (dest.getName().equals(destination.getPhysicalName())) {
1:                 result = dest;
1:                 break;
1:             }
1:         }
1:         return result;
1:     }
1: 
1:     private static Map<ActiveMQDestination, org.apache.activemq.broker.region.Destination> getDestinationMap(BrokerService target,
1:                                                                                                              ActiveMQDestination destination) {
1:         RegionBroker regionBroker = (RegionBroker) target.getRegionBroker();
1:         if (destination.isTemporary()) {
1:             return destination.isQueue() ? regionBroker.getTempQueueRegion().getDestinationMap() :
1:                     regionBroker.getTempTopicRegion().getDestinationMap();
1:         }
1:         return destination.isQueue() ?
1:                 regionBroker.getQueueRegion().getDestinationMap() :
1:                 regionBroker.getTopicRegion().getDestinationMap();
1:     }
1: 
1: 
commit:3b626c9
/////////////////////////////////////////////////////////////////////////
1: import java.io.IOException;
/////////////////////////////////////////////////////////////////////////
1:         try {
1:             String f = stompConnection.receiveFrame();
1:             assertTrue(f.startsWith("ERROR"));
1:         } catch (IOException socketMayBeClosedFirstByBroker) {}
/////////////////////////////////////////////////////////////////////////
1:         try {
1:             String f = stompConnection.receiveFrame();
1:             assertTrue(f.startsWith("ERROR"));
1:         } catch (IOException socketMayBeClosedFirstByBroker) {}
commit:1e5d212
/////////////////////////////////////////////////////////////////////////
1: import org.apache.activemq.broker.region.policy.PolicyEntry;
1: import org.apache.activemq.broker.region.policy.PolicyMap;
/////////////////////////////////////////////////////////////////////////
1:         queue = new ActiveMQQueue(getQueueName());
1:     public void applyBrokerPolicies() {
1:         PolicyMap policyMap = new PolicyMap();
1:         PolicyEntry persistRedelivery = new PolicyEntry();
1:         persistRedelivery.setPersistJMSRedelivered(true);
1:         policyMap.put(queue, persistRedelivery);
1:         brokerService.setDestinationPolicy(policyMap);
1:     }
1: 
1:     @Override
author:Timothy Bish
-------------------------------------------------------------------------------
commit:adf70bc
/////////////////////////////////////////////////////////////////////////
1:     public void testSendFrameWithInvalidAction() throws Exception {
1: 
1:         String frame = "CONNECT\n" + "login:system\n" + "passcode:manager\n\n" + Stomp.NULL;
1:         stompConnection.sendFrame(frame);
1: 
1:         frame = stompConnection.receiveFrame();
1:         assertTrue(frame.startsWith("CONNECTED"));
1: 
1:         final int connectionCount = getProxyToBroker().getCurrentConnectionsCount();
1: 
1:         frame = "SED\n" + "AMQ_SCHEDULED_DELAY:2000\n"  + "destination:/queue/" + getQueueName() + "\n\n" + "Hello World" + Stomp.NULL;
1:         stompConnection.sendFrame(frame);
1: 
1:         frame = stompConnection.receiveFrame();
1:         assertTrue(frame.startsWith("ERROR"));
1: 
1:         assertTrue("Should drop connection", Wait.waitFor(new Wait.Condition() {
1: 
1:             @Override
1:             public boolean isSatisified() throws Exception {
1:                 return connectionCount > getProxyToBroker().getCurrentConnectionsCount();
1:             }
1:         }));
1:     }
1: 
1:     @Test(timeout = 60000)
commit:540a66b
/////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////
1:     @Test(timeout = 60000)
/////////////////////////////////////////////////////////////////////////
1:     @Test(timeout = 60000)
/////////////////////////////////////////////////////////////////////////
1:     @Test(timeout = 60000)
/////////////////////////////////////////////////////////////////////////
1:     @Test(timeout = 60000)
/////////////////////////////////////////////////////////////////////////
1:     @Test(timeout = 60000)
/////////////////////////////////////////////////////////////////////////
1:     @Test(timeout = 60000)
/////////////////////////////////////////////////////////////////////////
1:     @Test(timeout = 60000)
/////////////////////////////////////////////////////////////////////////
1:     @Test(timeout = 60000)
/////////////////////////////////////////////////////////////////////////
1:     @Test(timeout = 60000)
/////////////////////////////////////////////////////////////////////////
1:     @Test(timeout = 60000)
/////////////////////////////////////////////////////////////////////////
1:     @Test(timeout = 60000)
/////////////////////////////////////////////////////////////////////////
1:     @Test(timeout = 60000)
/////////////////////////////////////////////////////////////////////////
1:     @Test(timeout = 60000)
/////////////////////////////////////////////////////////////////////////
1:     @Test(timeout = 60000)
/////////////////////////////////////////////////////////////////////////
1:     @Test(timeout = 60000)
/////////////////////////////////////////////////////////////////////////
1:     @Test(timeout = 60000)
/////////////////////////////////////////////////////////////////////////
1:     @Test(timeout = 60000)
/////////////////////////////////////////////////////////////////////////
1:     @Test(timeout = 60000)
/////////////////////////////////////////////////////////////////////////
1:     @Test(timeout = 60000)
/////////////////////////////////////////////////////////////////////////
1:     @Test(timeout = 60000)
/////////////////////////////////////////////////////////////////////////
1:     @Test(timeout = 60000)
/////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////
1:     @Test(timeout = 60000)
/////////////////////////////////////////////////////////////////////////
1:     @Test(timeout = 60000)
/////////////////////////////////////////////////////////////////////////
1:     @Test(timeout = 60000)
/////////////////////////////////////////////////////////////////////////
1:     @Test(timeout = 60000)
/////////////////////////////////////////////////////////////////////////
1:     @Test(timeout = 60000)
/////////////////////////////////////////////////////////////////////////
1:     @Test(timeout = 60000)
/////////////////////////////////////////////////////////////////////////
1:     @Test(timeout = 60000)
/////////////////////////////////////////////////////////////////////////
1:     @Test(timeout = 60000)
/////////////////////////////////////////////////////////////////////////
1:     @Test(timeout = 60000)
/////////////////////////////////////////////////////////////////////////
1:     @Test(timeout = 60000)
/////////////////////////////////////////////////////////////////////////
1:     @Test(timeout = 60000)
/////////////////////////////////////////////////////////////////////////
1:     @Test(timeout = 60000)
/////////////////////////////////////////////////////////////////////////
1:     @Test(timeout = 60000)
/////////////////////////////////////////////////////////////////////////
1:     @Test(timeout = 60000)
/////////////////////////////////////////////////////////////////////////
1:     @Test(timeout = 60000)
/////////////////////////////////////////////////////////////////////////
1:     @Test(timeout = 60000)
/////////////////////////////////////////////////////////////////////////
1:     @Test(timeout = 60000)
/////////////////////////////////////////////////////////////////////////
1:     @Test(timeout = 60000)
/////////////////////////////////////////////////////////////////////////
1:     @Test(timeout = 60000)
/////////////////////////////////////////////////////////////////////////
1:     @Test(timeout = 60000)
/////////////////////////////////////////////////////////////////////////
1:     @Test(timeout = 60000)
/////////////////////////////////////////////////////////////////////////
1:     @Test(timeout = 60000)
/////////////////////////////////////////////////////////////////////////
1:     @Test(timeout = 60000)
/////////////////////////////////////////////////////////////////////////
1:     @Test(timeout = 60000)
/////////////////////////////////////////////////////////////////////////
1:     @Test(timeout = 60000)
/////////////////////////////////////////////////////////////////////////
1:     @Test(timeout = 60000)
/////////////////////////////////////////////////////////////////////////
1:     @Test(timeout = 60000)
/////////////////////////////////////////////////////////////////////////
1:     @Test(timeout = 60000)
/////////////////////////////////////////////////////////////////////////
1:     @Test(timeout = 60000)
/////////////////////////////////////////////////////////////////////////
1:     @Test(timeout = 60000)
/////////////////////////////////////////////////////////////////////////
1:     @Test(timeout = 60000)
/////////////////////////////////////////////////////////////////////////
1:     @Test(timeout = 60000)
/////////////////////////////////////////////////////////////////////////
1:     @Test(timeout = 60000)
/////////////////////////////////////////////////////////////////////////
1:     @Test(timeout = 60000)
/////////////////////////////////////////////////////////////////////////
1:     @Test(timeout = 60000)
/////////////////////////////////////////////////////////////////////////
1:     @Test(timeout = 60000)
/////////////////////////////////////////////////////////////////////////
1:     @Test(timeout = 60000)
/////////////////////////////////////////////////////////////////////////
1:     @Test(timeout = 60000)
/////////////////////////////////////////////////////////////////////////
1:     @Test(timeout = 60000)
/////////////////////////////////////////////////////////////////////////
1:     @Test(timeout = 60000)
/////////////////////////////////////////////////////////////////////////
1:     @Test(timeout = 60000)
/////////////////////////////////////////////////////////////////////////
1:     @Test(timeout = 60000)
/////////////////////////////////////////////////////////////////////////
1:     @Test(timeout = 60000)
/////////////////////////////////////////////////////////////////////////
1:     @Test(timeout = 60000)
/////////////////////////////////////////////////////////////////////////
1:     @Test(timeout = 60000)
/////////////////////////////////////////////////////////////////////////
1:     @Test(timeout = 60000)
/////////////////////////////////////////////////////////////////////////
1:     @Test(timeout = 60000)
/////////////////////////////////////////////////////////////////////////
1:     @Test(timeout = 60000)
/////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////
1:     @Test(timeout = 60000)
/////////////////////////////////////////////////////////////////////////
1:     @Test(timeout = 60000)
/////////////////////////////////////////////////////////////////////////
1:     @Test(timeout = 60000)
/////////////////////////////////////////////////////////////////////////
1:     @Test(timeout = 60000)
commit:388c16d
/////////////////////////////////////////////////////////////////////////
1:         TimeUnit.MILLISECONDS.sleep(500);
/////////////////////////////////////////////////////////////////////////
1:         }, TimeUnit.SECONDS.toMillis(5), TimeUnit.MILLISECONDS.toMillis(25)));
/////////////////////////////////////////////////////////////////////////
1:         Wait.waitFor(new Wait.Condition() {
1: 
1:             @Override
1:             public boolean isSatisified() throws Exception {
1:                 return getProxyToBroker().getCurrentConnectionsCount() == 1;
1:             }
1:         }, TimeUnit.SECONDS.toMillis(5), TimeUnit.MILLISECONDS.toMillis(25));
/////////////////////////////////////////////////////////////////////////
1:         }, TimeUnit.SECONDS.toMillis(5), TimeUnit.MILLISECONDS.toMillis(25));
/////////////////////////////////////////////////////////////////////////
1:         }, TimeUnit.SECONDS.toMillis(30), TimeUnit.MILLISECONDS.toMillis(100));
author:Hadrian Zbarcea
-------------------------------------------------------------------------------
commit:3845aaa
/////////////////////////////////////////////////////////////////////////
1:         frame = "SEND\n" + "AMQ_SCHEDULED_DELAY:2000\n"  + "destination:/queue/" + getQueueName() + "\n\n" + "Hello World" + Stomp.NULL;
1:         TextMessage message = (TextMessage)consumer.receive(1000);
1:         message = (TextMessage)consumer.receive(2500);
/////////////////////////////////////////////////////////////////////////
1:         final int done = 20;
/////////////////////////////////////////////////////////////////////////
0:         TimeUnit.SECONDS.sleep(1);
/////////////////////////////////////////////////////////////////////////
1:             frame = stompConnection.receiveFrame(500);
/////////////////////////////////////////////////////////////////////////
1:             Thread.sleep(1000);
/////////////////////////////////////////////////////////////////////////
1:         sframe = stompConnection.receive(5000);
author:Timothy A. Bish
-------------------------------------------------------------------------------
commit:436f892
/////////////////////////////////////////////////////////////////////////
1:         assertTrue("1234".equals(mess_headers.get(Stomp.Headers.Message.TIMESTAMP)));
commit:d98c3e0
/////////////////////////////////////////////////////////////////////////
1:         long timestamp = System.currentTimeMillis() - 100;
1:         StompFrame stompMessage = stompConnection.receive(35000);
commit:7a15915
/////////////////////////////////////////////////////////////////////////
0:         StompFrame stompMessage = stompConnection.receive(10000);
commit:2468be1
/////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////
commit:6b2786a
/////////////////////////////////////////////////////////////////////////
1:         frame = "DISCONNECT\n" + "receipt: dis-1\n" + "\n\n" + Stomp.NULL;
1:         frame = receiver.receiveFrame();
1:         assertTrue(frame.startsWith("RECEIPT"));
1:         assertTrue("Receipt contains correct receipt-id", frame.indexOf(Stomp.Headers.Response.RECEIPT_ID) >= 0);
1:         receiver.close();
commit:4751a9c
/////////////////////////////////////////////////////////////////////////
1: import static org.junit.Assert.assertEquals;
1: import static org.junit.Assert.assertFalse;
1: import static org.junit.Assert.assertNotNull;
1: import static org.junit.Assert.assertNull;
1: import static org.junit.Assert.assertTrue;
1: import static org.junit.Assert.fail;
1: 
/////////////////////////////////////////////////////////////////////////
1: import javax.jms.BytesMessage;
1: import javax.jms.Connection;
1: import javax.jms.JMSException;
1: import javax.jms.MapMessage;
1: import javax.jms.Message;
1: import javax.jms.MessageConsumer;
1: import javax.jms.MessageProducer;
1: import javax.jms.ObjectMessage;
1: import javax.jms.Session;
1: import javax.jms.TextMessage;
1: 
/////////////////////////////////////////////////////////////////////////
1: 
1: import com.thoughtworks.xstream.XStream;
1: import com.thoughtworks.xstream.io.HierarchicalStreamReader;
1: import com.thoughtworks.xstream.io.json.JettisonMappedXmlDriver;
1: import com.thoughtworks.xstream.io.xml.XppReader;
1: import com.thoughtworks.xstream.io.xml.xppdom.XppFactory;
/////////////////////////////////////////////////////////////////////////
1:         // Subscribe to the destination, this is where we get our request.
1:         HashMap<String, String> properties = new HashMap<String, String>();
1:         properties.put(Stomp.Headers.RECEIPT_REQUESTED, "subscribe-1");
1:         responder.subscribe(dest, null, properties);
1: 
1:         frame = responder.receiveFrame();
1:         assertTrue("Receipt Frame: " + frame, frame.trim().startsWith("RECEIPT"));
1:         assertTrue("Receipt contains correct receipt-id " + frame, frame.indexOf(Stomp.Headers.Response.RECEIPT_ID) >= 0);
1:         properties = new HashMap<String, String>();
commit:72dfbfa
/////////////////////////////////////////////////////////////////////////
1: import java.io.StringReader;
/////////////////////////////////////////////////////////////////////////
0: import com.thoughtworks.xstream.XStream;
0: import com.thoughtworks.xstream.io.HierarchicalStreamReader;
0: import com.thoughtworks.xstream.io.json.JettisonMappedXmlDriver;
0: import com.thoughtworks.xstream.io.xml.XppReader;
0: import com.thoughtworks.xstream.io.xml.xppdom.XppFactory;
1: 
1:     protected XStream xstream;
1: 
/////////////////////////////////////////////////////////////////////////
1:         xstream = new XStream();
1:         xstream.processAnnotations(SamplePojo.class);
/////////////////////////////////////////////////////////////////////////
0:     protected void addStompConnector() throws Exception {
/////////////////////////////////////////////////////////////////////////
1:         StompFrame xmlFrame = stompConnection.receive();
1:         Map<String, String> map = createMapFromXml(xmlFrame.getBody());
1: 
1:         assertTrue(map.containsKey("name"));
1:         assertTrue(map.containsKey("city"));
1: 
1:         assertTrue(map.get("name").equals("Dejan"));
1:         assertTrue(map.get("city").equals("Belgrade"));
/////////////////////////////////////////////////////////////////////////
1:         StompFrame json = stompConnection.receive();
1:         LOG.info("Transformed frame: {}", json);
1:         SamplePojo pojo = createObjectFromJson(json.getBody());
1:         assertTrue(pojo.getCity().equals("Belgrade"));
1:         assertTrue(pojo.getName().equals("Dejan"));
1:         json = stompConnection.receive();
1:         LOG.info("Transformed frame: {}", json);
1:         Map<String, String> map = createMapFromJson(json.getBody());
1: 
1:         assertTrue(map.containsKey("name"));
1:         assertTrue(map.containsKey("city"));
1: 
1:         assertTrue(map.get("name").equals("Dejan"));
1:         assertTrue(map.get("city").equals("Belgrade"));
/////////////////////////////////////////////////////////////////////////
1:         StompFrame xmlFrame = stompConnection.receive();
1:         LOG.info("Received Frame: {}", xmlFrame.getBody());
1:         Map<String, String> map = createMapFromXml(xmlFrame.getBody());
1: 
1:         assertTrue(map.containsKey("name"));
1:         assertTrue(map.containsKey("city"));
1: 
1:         assertEquals("Dejan", map.get("name"));
1:         assertEquals("Belgrade", map.get("city"));
1: 
1:         assertTrue(xmlFrame.getHeaders().containsValue("jms-map-xml"));
/////////////////////////////////////////////////////////////////////////
1:         StompFrame json = stompConnection.receive();
1:         LOG.info("Received Frame: {}", json.getBody());
1:         assertNotNull(json);
1:         assertTrue(json.getHeaders().containsValue("jms-map-json"));
1: 
1:         Map<String, String> map = createMapFromJson(json.getBody());
1: 
1:         assertTrue(map.containsKey("name"));
1:         assertTrue(map.containsKey("city"));
1: 
1:         assertEquals("Dejan", map.get("name"));
1:         assertEquals("Belgrade", map.get("city"));
/////////////////////////////////////////////////////////////////////////
1:         StompFrame xmlFrame = stompConnection.receive();
1:         LOG.info("Received Frame: {}", xmlFrame.getBody());
1:         Map<String, String> map = createMapFromXml(xmlFrame.getBody());
1: 
1:         assertTrue(map.containsKey("name"));
1:         assertTrue(map.containsKey("city"));
1: 
1:         assertEquals("Dejan", map.get("name"));
1:         assertEquals("Belgrade", map.get("city"));
/////////////////////////////////////////////////////////////////////////
1:         StompFrame json = stompConnection.receive();
1:         LOG.info("Received Frame: {}", json.getBody());
1:         assertNotNull(json);
1:         Map<String, String> map = createMapFromJson(json.getBody());
1:         assertTrue(map.containsKey("name"));
1:         assertTrue(map.containsKey("city"));
1: 
1:         assertEquals("Dejan", map.get("name"));
1:         assertEquals("Belgrade", map.get("city"));
/////////////////////////////////////////////////////////////////////////
1: 
1:     protected SamplePojo createObjectFromJson(String data) throws Exception {
1:         HierarchicalStreamReader in = new JettisonMappedXmlDriver().createReader(new StringReader(data));
1:         return createObject(in);
1:     }
1: 
1:     protected SamplePojo createObjectFromXml(String data) throws Exception {
1:         HierarchicalStreamReader in = new XppReader(new StringReader(data), XppFactory.createDefaultParser());
1:         return createObject(in);
1:     }
1: 
1:     private SamplePojo createObject(HierarchicalStreamReader in) throws Exception {
1:         SamplePojo pojo = (SamplePojo) xstream.unmarshal(in);
1:         return pojo;
1:     }
1: 
1:     protected Map<String, String> createMapFromJson(String data) throws Exception {
1:         HierarchicalStreamReader in = new JettisonMappedXmlDriver().createReader(new StringReader(data));
1:         return createMapObject(in);
1:     }
1: 
1:     protected Map<String, String> createMapFromXml(String data) throws Exception {
1:         HierarchicalStreamReader in = new XppReader(new StringReader(data), XppFactory.createDefaultParser());
1:         return createMapObject(in);
1:     }
1: 
1:     @SuppressWarnings("unchecked")
1:     private Map<String, String> createMapObject(HierarchicalStreamReader in) throws Exception {
1:         Map<String, String> map = (Map<String, String>)xstream.unmarshal(in);
1:         return map;
1:     }
commit:1236bbf
/////////////////////////////////////////////////////////////////////////
0: import static org.junit.Assert.assertEquals;
0: import static org.junit.Assert.assertFalse;
0: import static org.junit.Assert.assertNotNull;
0: import static org.junit.Assert.assertNull;
0: import static org.junit.Assert.assertTrue;
0: import static org.junit.Assert.fail;
1: 
/////////////////////////////////////////////////////////////////////////
0: import javax.jms.Message;
/////////////////////////////////////////////////////////////////////////
0: import org.apache.activemq.broker.TransportConnector;
1: import org.junit.Test;
1: public class StompTest extends StompTestSupport {
/////////////////////////////////////////////////////////////////////////
1:     public void setUp() throws Exception {
/////////////////////////////////////////////////////////////////////////
1: 
1:         super.setUp();
1:     public void tearDown() throws Exception {
1:             super.tearDown();
1:     @Override
0: 	protected void addStompConnector() throws Exception {
0:         TransportConnector connector = brokerService.addConnector("stomp://0.0.0.0:"+port);
0:         port = connector.getConnectUri().getPort();
/////////////////////////////////////////////////////////////////////////
0:     @Test
/////////////////////////////////////////////////////////////////////////
0:     @Test
/////////////////////////////////////////////////////////////////////////
0:     @Test
/////////////////////////////////////////////////////////////////////////
0:     @Test
/////////////////////////////////////////////////////////////////////////
0:     @Test
/////////////////////////////////////////////////////////////////////////
0:     @Test
/////////////////////////////////////////////////////////////////////////
0:     @Test
/////////////////////////////////////////////////////////////////////////
0:     @Test
1:         receiver.open(createSocket());
/////////////////////////////////////////////////////////////////////////
0:     @Test
1:             sender.open(createSocket());
/////////////////////////////////////////////////////////////////////////
1:             receiver.open(createSocket());
/////////////////////////////////////////////////////////////////////////
0:     @Test
/////////////////////////////////////////////////////////////////////////
1:         sendMessage(name.getMethodName());
/////////////////////////////////////////////////////////////////////////
0:     @Test
/////////////////////////////////////////////////////////////////////////
0:     @Test
/////////////////////////////////////////////////////////////////////////
0:     @Test
/////////////////////////////////////////////////////////////////////////
0:     @Test
/////////////////////////////////////////////////////////////////////////
0:     @Test
/////////////////////////////////////////////////////////////////////////
0:     @Test
/////////////////////////////////////////////////////////////////////////
0:     @Test
/////////////////////////////////////////////////////////////////////////
0:     @Test
/////////////////////////////////////////////////////////////////////////
0:     @Test
/////////////////////////////////////////////////////////////////////////
0:     @Test
/////////////////////////////////////////////////////////////////////////
0:     @Test
/////////////////////////////////////////////////////////////////////////
0:     @Test
/////////////////////////////////////////////////////////////////////////
0:     @Test
/////////////////////////////////////////////////////////////////////////
0:     @Test
/////////////////////////////////////////////////////////////////////////
0:     @Test
/////////////////////////////////////////////////////////////////////////
0:     @Test
/////////////////////////////////////////////////////////////////////////
0:     @Test
/////////////////////////////////////////////////////////////////////////
0:     @Test
/////////////////////////////////////////////////////////////////////////
0:     @Test
/////////////////////////////////////////////////////////////////////////
0:     @Test
/////////////////////////////////////////////////////////////////////////
0:     @Test
/////////////////////////////////////////////////////////////////////////
0:     @Test
/////////////////////////////////////////////////////////////////////////
0:     @Test
/////////////////////////////////////////////////////////////////////////
0:     @Test
/////////////////////////////////////////////////////////////////////////
1:         Message message = consumer.receive(2500);
1: 
1:         LOG.info("Broke sent: {}", message);
1: 
1:         assertTrue(message instanceof ObjectMessage);
1:         ObjectMessage objectMessage = (ObjectMessage)message;
1:         SamplePojo object = (SamplePojo)objectMessage.getObject();
0:     @Test
/////////////////////////////////////////////////////////////////////////
0:     @Test
/////////////////////////////////////////////////////////////////////////
0:     @Test
/////////////////////////////////////////////////////////////////////////
0:     @Test
/////////////////////////////////////////////////////////////////////////
0:     @Test
/////////////////////////////////////////////////////////////////////////
0:     @Test
/////////////////////////////////////////////////////////////////////////
0:     @Test
/////////////////////////////////////////////////////////////////////////
0:     @Test
/////////////////////////////////////////////////////////////////////////
0:     @Test
/////////////////////////////////////////////////////////////////////////
0:     @Test
/////////////////////////////////////////////////////////////////////////
0:     @Test
/////////////////////////////////////////////////////////////////////////
0:     @Test
/////////////////////////////////////////////////////////////////////////
0:     @Test
/////////////////////////////////////////////////////////////////////////
0:     @Test
/////////////////////////////////////////////////////////////////////////
0:     @Test
/////////////////////////////////////////////////////////////////////////
0:     @Test
/////////////////////////////////////////////////////////////////////////
0:     @Test
1:         BrokerViewMBean view = (BrokerViewMBean)
1:                 brokerService.getManagementContext().newProxyInstance(brokerName, BrokerViewMBean.class, true);
/////////////////////////////////////////////////////////////////////////
0:     @Test
0:         BrokerViewMBean view = (BrokerViewMBean)
1:                 brokerService.getManagementContext().newProxyInstance(brokerName, BrokerViewMBean.class, true);
/////////////////////////////////////////////////////////////////////////
0:     @Test
/////////////////////////////////////////////////////////////////////////
0:     @Test
/////////////////////////////////////////////////////////////////////////
0:     @Test
/////////////////////////////////////////////////////////////////////////
0:     @Test
/////////////////////////////////////////////////////////////////////////
0:     @Test
/////////////////////////////////////////////////////////////////////////
0:     @Test
/////////////////////////////////////////////////////////////////////////
0:     @Test
/////////////////////////////////////////////////////////////////////////
0:     @Test
/////////////////////////////////////////////////////////////////////////
0:     @Test
/////////////////////////////////////////////////////////////////////////
0:     @Test
/////////////////////////////////////////////////////////////////////////
0:     @Test
/////////////////////////////////////////////////////////////////////////
0:     @Test
/////////////////////////////////////////////////////////////////////////
0:     @Test
/////////////////////////////////////////////////////////////////////////
0:     @Test
/////////////////////////////////////////////////////////////////////////
0:     @Test
/////////////////////////////////////////////////////////////////////////
0:     @Test
/////////////////////////////////////////////////////////////////////////
0:     @Test
/////////////////////////////////////////////////////////////////////////
0:     @Test
/////////////////////////////////////////////////////////////////////////
0:         BrokerViewMBean proxy = (BrokerViewMBean) brokerService.getManagementContext()
/////////////////////////////////////////////////////////////////////////
0:         QueueViewMBean proxy = (QueueViewMBean) brokerService.getManagementContext()
/////////////////////////////////////////////////////////////////////////
1:                 return brokerService.getBroker().getClients().length == expected;
1:         org.apache.activemq.broker.Connection[] clients = brokerService.getBroker().getClients();
0:     @Test
/////////////////////////////////////////////////////////////////////////
0:     @Test
/////////////////////////////////////////////////////////////////////////
0:     @Test
commit:72eb191
/////////////////////////////////////////////////////////////////////////
1: 
1:     public void testSendReceiveBigMessage() throws Exception {
1: 
1:         String frame = "CONNECT\n" + "login:system\n" + "passcode:manager\n\n" + Stomp.NULL;
1:         stompConnection.sendFrame(frame);
1: 
1:         frame = stompConnection.receiveFrame();
1:         assertTrue(frame.startsWith("CONNECTED"));
1: 
1:         frame = "SUBSCRIBE\n" + "destination:/queue/" + getQueueName() + "\n" + "ack:auto\n\n" + Stomp.NULL;
1:         stompConnection.sendFrame(frame);
1: 
1:         int size = 100;
1:         char[] bigBodyArray = new char[size];
1:         Arrays.fill(bigBodyArray, 'a');
1:         String bigBody = new String(bigBodyArray);
1: 
1:         frame = "SEND\n" + "destination:/queue/" + getQueueName() + "\n\n" + bigBody + Stomp.NULL;
1: 
1:         stompConnection.sendFrame(frame);
1: 
1:         StompFrame sframe = stompConnection.receive();
1:         assertNotNull(sframe);
1:         assertEquals("MESSAGE", sframe.getAction());
1:         assertEquals(bigBody, sframe.getBody());
1: 
1:         size = 3000000;
1:         bigBodyArray = new char[size];
1:         Arrays.fill(bigBodyArray, 'a');
1:         bigBody = new String(bigBodyArray);
1: 
1:         frame = "SEND\n" + "destination:/queue/" + getQueueName() + "\n\n" + bigBody + Stomp.NULL;
1: 
1:         stompConnection.sendFrame(frame);
1: 
0:         sframe = stompConnection.receive(30000);
1:         assertNotNull(sframe);
1:         assertEquals("MESSAGE", sframe.getAction());
1:         assertEquals(bigBody, sframe.getBody());
1:     }
commit:b4f21b6
/////////////////////////////////////////////////////////////////////////
1:         frame = "SEND\n" + "destination:/queue/" + getQueueName() + "\ncontent-length:5" + " \n\n" + "\u0001\u0002\u0000\u0004\u0005" + Stomp.NULL;
/////////////////////////////////////////////////////////////////////////
1:             frame = "SEND\n" + "destination:/queue/" + getQueueName() + "\ncontent-length:5" + " \n\n" + "\u0001\u0002\u0000\u0004\u0005" + Stomp.NULL;
/////////////////////////////////////////////////////////////////////////
1:         frame = "SEND\n" + "destination:/queue/" + getQueueName() + 123 + "\ncontent-length:0" + " \n\n" + Stomp.NULL;
commit:bd31548
/////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////
1:         frame = stompConnection.receiveFrame();
1:         assertTrue(frame.startsWith("ERROR"));
1:     }
1:     public void testSubscribeWithReceiptNotAuthorized() throws Exception {
1: 
1:         String frame = "CONNECT\n" + "login:guest\n" + "passcode:password\n\n" + Stomp.NULL;
1:         stompConnection.sendFrame(frame);
1: 
1:         frame = stompConnection.receiveFrame();
1:         assertTrue(frame.startsWith("CONNECTED"));
1: 
1:         frame = "SUBSCRIBE\n" + "destination:/queue/USERS." + getQueueName() + "\n" +
1:                 "ack:auto\n" + "receipt:1\n" + "\n" + Stomp.NULL;
1: 
1:         stompConnection.sendFrame(frame);
1:         frame = stompConnection.receiveFrame();
1:         assertTrue(frame.startsWith("ERROR"));
1:         assertTrue("Error Frame did not contain receipt-id", frame.indexOf(Stomp.Headers.Response.RECEIPT_ID) >= 0);
1:     }
1: 
1:     public void testSubscribeWithInvalidSelector() throws Exception {
1: 
1:         String frame = "CONNECT\n" + "login:system\n" + "passcode:manager\n\n" + Stomp.NULL;
1:         stompConnection.sendFrame(frame);
1: 
1:         frame = stompConnection.receiveFrame();
1:         assertTrue(frame.startsWith("CONNECTED"));
1: 
1:         frame = "SUBSCRIBE\n" + "destination:/queue/" + getQueueName() + "\n" + "selector:foo.bar = 1\n" + "ack:auto\n\n" + Stomp.NULL;
1: 
1:         stompConnection.sendFrame(frame);
1:         frame = stompConnection.receiveFrame();
1:         assertTrue(frame.startsWith("ERROR"));
1: 
1:         frame = "DISCONNECT\n" + "\n\n" + Stomp.NULL;
1:         stompConnection.sendFrame(frame);
/////////////////////////////////////////////////////////////////////////
commit:4bba15a
/////////////////////////////////////////////////////////////////////////
1:     public void testDurableSubAttemptOnQueueFails() throws Exception {
1:         // get broker JMX view
1: 
1:         String domain = "org.apache.activemq";
0:         ObjectName brokerName = new ObjectName(domain + ":Type=Broker,BrokerName=localhost");
1: 
0:         BrokerViewMBean view = (BrokerViewMBean)broker.getManagementContext().newProxyInstance(brokerName, BrokerViewMBean.class, true);
1: 
1:         // connect
1:         String frame = "CONNECT\n" + "login:system\n" + "passcode:manager\nclient-id:test\n\n" + Stomp.NULL;
1:         stompConnection.sendFrame(frame);
1: 
1:         frame = stompConnection.receiveFrame();
1:         assertTrue(frame.startsWith("CONNECTED"));
1:         assertEquals(view.getQueueSubscribers().length, 0);
1: 
1:         // subscribe
1:         frame = "SUBSCRIBE\n" + "destination:/queue/" + getQueueName() + "\n" + "ack:auto\nactivemq.subscriptionName:test\n\n" + Stomp.NULL;
1:         stompConnection.sendFrame(frame);
1: 
1:         frame = stompConnection.receiveFrame();
1:         assertTrue(frame.startsWith("ERROR"));
1: 
1:         assertEquals(view.getQueueSubscribers().length, 0);
1:         // disconnect
1:         frame = "DISCONNECT\nclient-id:test\n\n" + Stomp.NULL;
1:         stompConnection.sendFrame(frame);
1:     }
1: 
commit:e4d90d9
/////////////////////////////////////////////////////////////////////////
1:     public void testPrefetchSizeOfOneClientAck() throws Exception {
1:         stompConnection.connect("system", "manager");
1: 
1:         HashMap<String, String> headers = new HashMap<String, String>();
1:         headers.put("activemq.prefetchSize", "1");
1:         stompConnection.subscribe("/queue/" + getQueueName(), "client", headers);
1: 
1:         // send messages using JMS
1:         sendMessage("message 1");
1:         sendMessage("message 2");
1:         sendMessage("message 3");
1:         sendMessage("message 4");
1:         sendMessage("message 5");
1: 
1:         StompFrame frame = stompConnection.receive();
1:         assertEquals(frame.getBody(), "message 1");
1: 
1:         try {
1:             StompFrame frameNull = stompConnection.receive(500);
1:             if (frameNull != null) {
1:                 fail("Should not have received the second message");
1:             }
1:         } catch (SocketTimeoutException soe) {}
1: 
1:         stompConnection.ack(frame);
1: 
1:         StompFrame frame1 = stompConnection.receive();
1:         assertEquals(frame1.getBody(), "message 2");
1: 
1:         try {
1:             StompFrame frameNull = stompConnection.receive(500);
1:             if (frameNull != null) {
1:                 fail("Should not have received the third message");
1:             }
1:         } catch (SocketTimeoutException soe) {}
1: 
1:         stompConnection.ack(frame1);
1:         StompFrame frame2 = stompConnection.receive();
1:         assertEquals(frame2.getBody(), "message 3");
1: 
1:         try {
1:             StompFrame frameNull = stompConnection.receive(500);
1:             if (frameNull != null) {
1:                 fail("Should not have received the fourth message");
1:             }
1:         } catch (SocketTimeoutException soe) {}
1: 
1:         stompConnection.ack(frame2);
1:         StompFrame frame3 = stompConnection.receive();
1:         assertEquals(frame3.getBody(), "message 4");
1: 
1:         try {
1:             StompFrame frameNull = stompConnection.receive(500);
1:             if (frameNull != null) {
1:                 fail("Should not have received the fifth message");
1:             }
1:         } catch (SocketTimeoutException soe) {}
1: 
1:         stompConnection.ack(frame3);
1:         StompFrame frame4 = stompConnection.receive();
1:         assertEquals(frame4.getBody(), "message 5");
1: 
1:         try {
1:             StompFrame frameNull = stompConnection.receive(500);
1:             if (frameNull != null) {
1:                 fail("Should not have received any more messages");
1:             }
1:         } catch (SocketTimeoutException soe) {}
1: 
1:         stompConnection.ack(frame4);
1: 
1:         try {
1:             StompFrame frameNull = stompConnection.receive(500);
1:             if (frameNull != null) {
1:                 fail("Should not have received the any more messages");
1:             }
1:         } catch (SocketTimeoutException soe) {}
1:     }
1: 
commit:956724e
/////////////////////////////////////////////////////////////////////////
1:         String connectFrame = "CONNECT\n" + "login:system\n" + "passcode:manager\n" + "request-id:1\n" + "\n" + Stomp.NULL;
/////////////////////////////////////////////////////////////////////////
1:         String frame = "CONNECT\n" + "login:system\n" + "passcode:manager\n\n" + Stomp.NULL;
/////////////////////////////////////////////////////////////////////////
1:         String frame = "CONNECT\n" + "login:system\n" + "passcode:manager\n\n" + Stomp.NULL;
1:         frame = "SEND\n" + "destination:/queue/" + getQueueName() + "\n" + "JMSXGroupID:TEST\n\n" + "Hello World" + Stomp.NULL;
/////////////////////////////////////////////////////////////////////////
1:         String frame = "CONNECT\n" + "login:system\n" + "passcode:manager\n\n" + Stomp.NULL;
/////////////////////////////////////////////////////////////////////////
1:         String frame = "CONNECT\n" + "login:system\n" + "passcode:manager\n\n" + Stomp.NULL;
/////////////////////////////////////////////////////////////////////////
1:         String frame = "CONNECT\n" + "login:system\n" + "passcode:manager\n\n" + Stomp.NULL;
/////////////////////////////////////////////////////////////////////////
1:         String frame = "CONNECT\n" + "login:system\n" + "passcode:manager\n\n" + Stomp.NULL;
/////////////////////////////////////////////////////////////////////////
1:         String frame = "CONNECT\n" + "login:system\n" + "passcode:manager\n\n" + Stomp.NULL;
/////////////////////////////////////////////////////////////////////////
1:         frame = "CONNECT\n" + "login:system\n" + "passcode:manager\n\n" + Stomp.NULL;
/////////////////////////////////////////////////////////////////////////
1:             String frame = "CONNECT\n" + "login:system\n" + "passcode:manager\n\n" + Stomp.NULL;
/////////////////////////////////////////////////////////////////////////
1:             frame = "CONNECT\n" + "login:system\n" + "passcode:manager\n\n" + Stomp.NULL;
/////////////////////////////////////////////////////////////////////////
1:         String frame = "CONNECT\n" + "login:system\n" + "passcode:manager\n\n" + Stomp.NULL;
/////////////////////////////////////////////////////////////////////////
1:         String frame = "CONNECT\n" + "login:system\n" + "passcode:manager\n\n" + Stomp.NULL;
/////////////////////////////////////////////////////////////////////////
1:         String frame = "CONNECT\n" + "login:system\n" + "passcode:manager\n\n" + Stomp.NULL;
/////////////////////////////////////////////////////////////////////////
1:         String frame = "CONNECT\n" + "login:system\n" + "passcode:manager\n\n" + Stomp.NULL;
/////////////////////////////////////////////////////////////////////////
1:         String frame = "CONNECT\n" + "login:system\n" + "passcode:manager\n\n" + Stomp.NULL;
/////////////////////////////////////////////////////////////////////////
1:         String frame = "CONNECT\n" + "login:system\n" + "passcode:manager\n\n" + Stomp.NULL;
/////////////////////////////////////////////////////////////////////////
1:         String frame = "CONNECT\n" + "login:system\n" + "passcode:manager\n\n" + Stomp.NULL;
/////////////////////////////////////////////////////////////////////////
1:         String frame = "CONNECT\n" + "login:system\n" + "passcode:manager\n\n" + Stomp.NULL;
/////////////////////////////////////////////////////////////////////////
1:         String frame = "CONNECT\n" + "login:system\n" + "passcode:manager\n\n" + Stomp.NULL;
/////////////////////////////////////////////////////////////////////////
1:         String frame = "CONNECT\n" + "login:system\n" + "passcode:manager\n\n" + Stomp.NULL;
/////////////////////////////////////////////////////////////////////////
1:         String frame = "CONNECT\n" + "login:system\n" + "passcode:manager\n\n" + Stomp.NULL;
/////////////////////////////////////////////////////////////////////////
1:         String frame = "CONNECT\n" + "login:system\n" + "passcode:manager\n\n" + Stomp.NULL;
/////////////////////////////////////////////////////////////////////////
1:         String frame = "CONNECT\n" + "login:system\n" + "passcode:manager\n\n" + Stomp.NULL;
/////////////////////////////////////////////////////////////////////////
1:         String frame = "CONNECT\n" + "login:system\n" + "passcode:manager\n\n" + Stomp.NULL;
/////////////////////////////////////////////////////////////////////////
1:         String frame = "CONNECT\n" + "login:system\n" + "passcode:manager\n\n" + Stomp.NULL;
/////////////////////////////////////////////////////////////////////////
1:         String frame = "CONNECT\n" + "login:system\n" + "passcode:manager\n\n" + Stomp.NULL;
/////////////////////////////////////////////////////////////////////////
1:         String frame = "CONNECT\n" + "login: dejanb\n" + "passcode:manager\n\n" + Stomp.NULL;
/////////////////////////////////////////////////////////////////////////
1:         String frame = "CONNECT\n" + "login:system\n" + "passcode: dejanb\n\n" + Stomp.NULL;
/////////////////////////////////////////////////////////////////////////
1:         String frame = "CONNECT\n" + "login:guest\n" + "passcode:password\n\n" + Stomp.NULL;
/////////////////////////////////////////////////////////////////////////
1:         String frame = "CONNECT\n" + "login:guest\n" + "passcode:password\n\n" + Stomp.NULL;
/////////////////////////////////////////////////////////////////////////
1:         String frame = "CONNECT\n" + "login:system\n" + "passcode:manager\n\n" + Stomp.NULL;
/////////////////////////////////////////////////////////////////////////
1:         String frame = "CONNECT\n" + "login:system\n" + "passcode:manager\n\n" + Stomp.NULL;
/////////////////////////////////////////////////////////////////////////
1:         String frame = "CONNECT\n" + "login:system\n" + "passcode:manager\n\n" + Stomp.NULL;
/////////////////////////////////////////////////////////////////////////
1:         String frame = "CONNECT\n" + "login:system\n" + "passcode:manager\n\n" + Stomp.NULL;
/////////////////////////////////////////////////////////////////////////
1:         String frame = "CONNECT\n" + "login:system\n" + "passcode:manager\n\n" + Stomp.NULL;
/////////////////////////////////////////////////////////////////////////
1:         String frame = "CONNECT\n" + "login:system\n" + "passcode:manager\n\n" + Stomp.NULL;
/////////////////////////////////////////////////////////////////////////
1:         String frame = "CONNECT\n" + "login:system\n" + "passcode:manager\n\n" + Stomp.NULL;
/////////////////////////////////////////////////////////////////////////
1:         String frame = "CONNECT\n" + "login:system\n" + "passcode:manager\n\n" + Stomp.NULL;
/////////////////////////////////////////////////////////////////////////
1:         String frame = "CONNECT\n" + "login:system\n" + "passcode:manager\n\n" + Stomp.NULL;
/////////////////////////////////////////////////////////////////////////
1:         String frame = "CONNECT\n" + "login:system\n" + "passcode:manager\n\n" + Stomp.NULL;
/////////////////////////////////////////////////////////////////////////
1:         String frame = "CONNECT\n" + "login:system\n" + "passcode:manager\n\n" + Stomp.NULL;
/////////////////////////////////////////////////////////////////////////
1:         String frame = "CONNECT\n" + "login:system\n" + "passcode:manager\n\n" + Stomp.NULL;
/////////////////////////////////////////////////////////////////////////
1:         String frame = "CONNECT\n" + "login:system\n" + "passcode:manager\n\n" + Stomp.NULL;
/////////////////////////////////////////////////////////////////////////
1:         String frame = "CONNECT\n" + "login:system\n" + "passcode:manager\n\n" + Stomp.NULL;
/////////////////////////////////////////////////////////////////////////
1:         String frame = "CONNECT\n" + "login:system\n" + "passcode:manager\n\n" + Stomp.NULL;
/////////////////////////////////////////////////////////////////////////
1:         String frame = "CONNECT\n" + "login:system\n" + "passcode:manager\n\n" + Stomp.NULL;
/////////////////////////////////////////////////////////////////////////
1:         String frame = "CONNECT\n" + "login:system\n" + "passcode:manager\n\n" + Stomp.NULL;
/////////////////////////////////////////////////////////////////////////
1:         String frame = "CONNECT\n" + "login:system\n" + "passcode:manager\n\n" + Stomp.NULL;
/////////////////////////////////////////////////////////////////////////
1:         String frame = "CONNECT\n" + "login:system\n" + "passcode:manager\n\n" + Stomp.NULL;
/////////////////////////////////////////////////////////////////////////
1:         String frame = "CONNECT\n" + "login:system\n" + "passcode:manager\nclient-id:test\n\n" + Stomp.NULL;
/////////////////////////////////////////////////////////////////////////
1:         frame = "CONNECT\n" + "login:system\n" + "passcode:manager\nclient-id:test\n\n" + Stomp.NULL;
/////////////////////////////////////////////////////////////////////////
1:         String frame = "CONNECT\n" + "login:system\n" + "passcode:manager\n\n" + Stomp.NULL;
/////////////////////////////////////////////////////////////////////////
1:         String frame = "CONNECT\n" + "login:system\n" + "passcode:manager\n\n" + Stomp.NULL;
/////////////////////////////////////////////////////////////////////////
1:         String frame = "CONNECT\n" + "login:system\n" + "passcode:manager\n\n" + Stomp.NULL;
/////////////////////////////////////////////////////////////////////////
1:         String frame = "CONNECT\n" + "login:system\n" + "passcode:manager\n\n" + Stomp.NULL;
/////////////////////////////////////////////////////////////////////////
1:         String frame = "CONNECT\n" + "login:system\n" + "passcode:manager\n\n" + Stomp.NULL;
/////////////////////////////////////////////////////////////////////////
1:         String frame = "CONNECT\n" + "login:system\n" + "passcode:manager\n\n" + Stomp.NULL;
/////////////////////////////////////////////////////////////////////////
1:         String frame = "CONNECT\n" + "login:system\n" + "passcode:manager\n\n" + Stomp.NULL;
/////////////////////////////////////////////////////////////////////////
1:         String frame = "CONNECT\n" + "login:system\n" + "passcode:manager\n\n" + Stomp.NULL;
/////////////////////////////////////////////////////////////////////////
1:         String frame = "CONNECT\n" + "login:system\n" + "passcode:manager\n\n" + Stomp.NULL;
/////////////////////////////////////////////////////////////////////////
1:         String frame = "CONNECT\n" + "login:system\n" + "passcode:manager\n\n" + Stomp.NULL;
/////////////////////////////////////////////////////////////////////////
1:         String frame = "CONNECT\n" + "login:system\n" + "passcode:manager\n\n" + Stomp.NULL;
commit:2f0ef2e
/////////////////////////////////////////////////////////////////////////
1:         frame = "UNSUBSCRIBE\n" + "destination:/topic/" + getQueueName() + "\n" + "activemq.subscriptionName:test\n\n" + Stomp.NULL;
/////////////////////////////////////////////////////////////////////////
1:         assertEquals(view.getInactiveDurableTopicSubscribers().length, 0);
commit:e426de8
/////////////////////////////////////////////////////////////////////////
0: import java.io.IOException;
0: import java.net.Socket;
1: import java.net.SocketTimeoutException;
0: import java.net.URI;
0: import java.net.URISyntaxException;
0: import java.net.UnknownHostException;
1: import java.util.Arrays;
1: import java.util.HashMap;
1: import java.util.Map;
1: import java.util.UUID;
1: import java.util.concurrent.TimeUnit;
1: import java.util.regex.Matcher;
1: import java.util.regex.Pattern;
1: 
0: import javax.jms.BytesMessage;
0: import javax.jms.Connection;
0: import javax.jms.JMSException;
0: import javax.jms.MapMessage;
0: import javax.jms.MessageConsumer;
0: import javax.jms.MessageProducer;
0: import javax.jms.ObjectMessage;
0: import javax.jms.Session;
0: import javax.jms.TextMessage;
0: import javax.management.MalformedObjectNameException;
1: import javax.management.ObjectName;
1: 
/////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////
1:     public void testSendNullBodyTextMessage() throws Exception {
0:         String frame = "CONNECT\n" + "login: system\n" + "passcode: manager\n\n" + Stomp.NULL;
1:         stompConnection.sendFrame(frame);
1: 
1:         frame = stompConnection.receiveFrame();
1:         assertTrue(frame.startsWith("CONNECTED"));
1: 
1:         frame = "SUBSCRIBE\n" + "destination:/queue/" + getQueueName() + "\n" + "ack:auto\n\n" + Stomp.NULL;
1:         stompConnection.sendFrame(frame);
1: 
1:         sendMessage(null);
1:         frame = stompConnection.receiveFrame();
1:         assertNotNull("Message not received", frame);
1: 
1:         frame = "DISCONNECT\n" + "\n\n" + Stomp.NULL;
1:         stompConnection.sendFrame(frame);
1:     }
1: 
commit:5774d00
/////////////////////////////////////////////////////////////////////////
1: 
/////////////////////////////////////////////////////////////////////////
0:         // Need some time for the Ack to get processed.
0:         waitForFrameToTakeEffect();
1: 
0:         frame = "DISCONNECT\n" + "\n\n" + Stomp.NULL;
1:         stompConnection.sendFrame(frame);
/////////////////////////////////////////////////////////////////////////
1: 
1:         String replyto = "some destination";
/////////////////////////////////////////////////////////////////////////
1: 
commit:5b99f11
/////////////////////////////////////////////////////////////////////////
0:     private void stompConnect(StompConnection connection) throws IOException, URISyntaxException, UnknownHostException {
0:         URI connectUri = new URI(bindAddress);
0:         connection.open(createSocket(connectUri));
1:     }
1: 
/////////////////////////////////////////////////////////////////////////
1:     public void testReplyToAcrossConnections() throws Exception {
1: 
0:         String frame = "CONNECT\n" + "login: system\n" + "passcode: manager\n\n" + Stomp.NULL;
1:         stompConnection.sendFrame(frame);
1: 
1:         frame = stompConnection.receiveFrame();
1:         assertTrue(frame.startsWith("CONNECTED"));
1: 
1:         doReplyToAcrossConnections("topic");
1:         doReplyToAcrossConnections("queue");
1:     }
1: 
1:     private void doReplyToAcrossConnections(String type) throws Exception {
1:         LOG.info("Starting test on Temp Destinations using a temporary: " + type);
1: 
1:         StompConnection responder = new StompConnection();
1:         stompConnect(responder);
0:         String frame = "CONNECT\n" + "login: system\n" + "passcode: manager\n\n" + Stomp.NULL;
1:         responder.sendFrame(frame);
1: 
1:         frame = responder.receiveFrame();
1:         assertTrue(frame.startsWith("CONNECTED"));
1: 
1:         final String dest = "/" + type + "/" + getQueueName();
1:         final String tempDest = String.format("/temp-%s/2C26441740C0ECC9tt1:1:0:1", type);
1:         LOG.info("Test is using out-bound topic: " + dest + ", and replyTo dest: " + tempDest);
1: 
1:         // Subscribe to the temp destination, this is where we get our response.
1:         stompConnection.subscribe(tempDest);
1: 
0:         // Subscribe to the Queue, this is where we get our request.
0:         responder.subscribe(dest);
1: 
1:         // Send a Message with the ReplyTo value set.
1:         HashMap<String, String> properties = new HashMap<String, String>();
1:         properties.put(Stomp.Headers.Send.REPLY_TO, tempDest);
1:         LOG.info(String.format("Sending request message: SEND with %s=%s", Stomp.Headers.Send.REPLY_TO, tempDest));
1:         stompConnection.send(dest, "REQUEST", null, properties);
1: 
1:         // The subscription should receive a response with the ReplyTo property set.
1:         StompFrame received = responder.receive();
1:         assertNotNull(received);
1:         String remoteReplyTo = received.getHeaders().get(Stomp.Headers.Send.REPLY_TO);
1:         assertNotNull(remoteReplyTo);
1:         assertTrue(remoteReplyTo.startsWith(String.format("/remote-temp-%s/", type)));
1:         LOG.info(String.format("Received request message: %s with %s=%s", received.getAction(), Stomp.Headers.Send.REPLY_TO, remoteReplyTo));
1: 
1:         // Reply to the request using the given ReplyTo destination
1:         responder.send(remoteReplyTo, "RESPONSE");
1: 
1:         // The response should be received by the Temporary Destination subscription
1:         StompFrame reply = stompConnection.receive();
1:         assertNotNull(reply);
1:         assertEquals("MESSAGE", reply.getAction());
1:         assertTrue(reply.getBody().contains("RESPONSE"));
1:         LOG.info(String.format("Response %s received", reply.getAction()));
1: 
1:         BrokerViewMBean broker = getProxyToBroker();
1:         if (type.equals("topic")) {
1:             assertEquals(1, broker.getTemporaryTopics().length);
1:         } else {
1:             assertEquals(1, broker.getTemporaryQueues().length);
1:         }
1:     }
1: 
commit:9ff3500
/////////////////////////////////////////////////////////////////////////
1:     public void testReplyToDestinationNaming() throws Exception {
1: 
0:         String frame = "CONNECT\n" + "login: system\n" + "passcode: manager\n\n" + Stomp.NULL;
1:         stompConnection.sendFrame(frame);
1: 
1:         frame = stompConnection.receiveFrame();
1:         assertTrue(frame.startsWith("CONNECTED"));
1: 
1:         doTestActiveMQReplyToTempDestination("topic");
1:         doTestActiveMQReplyToTempDestination("queue");
1:     }
1: 
1:     private void doTestActiveMQReplyToTempDestination(String type) throws Exception {
1:         LOG.info("Starting test on Temp Destinations using a temporary: " + type);
1: 
1:         final String dest = "/" + type + "/" + getQueueName();
1:         final String tempDest = String.format("/temp-%s/2C26441740C0ECC9tt1", type);
1:         LOG.info("Test is using out-bound topic: " + dest + ", and replyTo dest: " + tempDest);
1: 
1:         // Subscribe both to the out-bound destination and the response tempt destination
1:         stompConnection.subscribe(dest);
1:         stompConnection.subscribe(tempDest);
1: 
1:         // Send a Message with the ReplyTo value set.
0:         HashMap<String, String> properties = new HashMap<String, String>();
1:         properties.put(Stomp.Headers.Send.REPLY_TO, tempDest);
1:         LOG.info(String.format("Sending request message: SEND with %s=%s", Stomp.Headers.Send.REPLY_TO, tempDest));
1:         stompConnection.send(dest, "REQUEST", null, properties);
1: 
1:         // The subscription should receive a response with the ReplyTo property set.
1:         StompFrame received = stompConnection.receive();
1:         assertNotNull(received);
1:         String remoteReplyTo = received.getHeaders().get(Stomp.Headers.Send.REPLY_TO);
1:         assertNotNull(remoteReplyTo);
1:         assertTrue(remoteReplyTo.startsWith(String.format("/temp-%s/", type)));
1:         LOG.info(String.format("Received request message: %s with %s=%s", received.getAction(), Stomp.Headers.Send.REPLY_TO, remoteReplyTo));
1: 
1:         // Reply to the request using the given ReplyTo destination
1:         stompConnection.send(remoteReplyTo, "RESPONSE");
1: 
1:         // The response should be received by the Temporary Destination subscription
1:         StompFrame reply = stompConnection.receive();
1:         assertNotNull(reply);
1:         assertEquals("MESSAGE", reply.getAction());
1:         LOG.info(String.format("Response %s received", reply.getAction()));
1: 
1:         BrokerViewMBean broker = getProxyToBroker();
1:         if (type.equals("topic")) {
1:             assertEquals(1, broker.getTemporaryTopics().length);
1:         } else {
1:             assertEquals(1, broker.getTemporaryQueues().length);
1:         }
1:     }
1: 
0:     private BrokerViewMBean getProxyToBroker() throws MalformedObjectNameException, JMSException {
0:         ObjectName brokerViewMBean = new ObjectName(
0:             "org.apache.activemq:Type=Broker,BrokerName=localhost");
0:         BrokerViewMBean proxy = (BrokerViewMBean) broker.getManagementContext()
0:                 .newProxyInstance(brokerViewMBean, BrokerViewMBean.class, true);
0:         return proxy;
1:     }
1: 
commit:f33f32e
/////////////////////////////////////////////////////////////////////////
0: import java.util.Arrays;
0: import java.util.UUID;
/////////////////////////////////////////////////////////////////////////
1:     public void testDisconnectDoesNotDeadlockBroker() throws Exception {
1:         for (int i = 0; i < 20; ++i) {
1:             doTestConnectionLeak();
1:         }
1:     }
1: 
1:     private void doTestConnectionLeak() throws Exception {
1:         stompConnect();
1: 
0:         String frame = "CONNECT\n" + "login: system\n" + "passcode: manager\n\n" + Stomp.NULL;
1:         stompConnection.sendFrame(frame);
1: 
1:         frame = stompConnection.receiveFrame();
1:         assertTrue(frame.startsWith("CONNECTED"));
1: 
1:         boolean gotMessage = false;
1:         boolean gotReceipt = false;
1: 
1:         char[] payload = new char[1024];
1:         Arrays.fill(payload, 'A');
1: 
1:         String test = "SEND\n" +
1:                 "x-type:DEV-3485\n"  +
1:                 "x-uuid:" + UUID.randomUUID() + "\n"  +
1:                 "persistent:true\n"  +
1:                 "receipt:" + UUID.randomUUID() + "\n" +
1:                 "destination:/queue/test.DEV-3485" +
1:                 "\n\n" +
1:                 new String(payload) + Stomp.NULL;
1: 
1:         frame = "SUBSCRIBE\n" + "destination:/queue/test.DEV-3485\n" + "ack:auto\n\n" + Stomp.NULL;
1:         stompConnection.sendFrame(frame);
1: 
0:         waitForFrameToTakeEffect();
1: 
1:         stompConnection.sendFrame(test);
1: 
1:         // We only want one of them, to trigger the shutdown and potentially
1:         // see a deadlock.
1:         while (!gotMessage && !gotReceipt) {
1:             frame = stompConnection.receiveFrame();
1: 
1:             LOG.debug("Received the frame: " + frame);
1: 
1:             if (frame.startsWith("RECEIPT")) {
1:                 gotReceipt = true;
1:             } else if(frame.startsWith("MESSAGE")) {
1:                 gotMessage = true;
1:             } else {
1:                 fail("Received a frame that we were not expecting.");
1:             }
1:         }
1: 
0:         frame = "DISCONNECT\n" + "\n\n" + Stomp.NULL;
1:         stompConnection.sendFrame(frame);
1: 
0:         waitForFrameToTakeEffect();
1: 
1:         stompConnection.close();
1:     }
1: 
commit:3b381e7
/////////////////////////////////////////////////////////////////////////
commit:3060a64
/////////////////////////////////////////////////////////////////////////
0: import javax.management.MalformedObjectNameException;
/////////////////////////////////////////////////////////////////////////
1: import org.apache.activemq.broker.jmx.QueueViewMBean;
/////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////
0:         waitForFrameToTakeEffect();
1: 
/////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////
1: 
1: 
1: 
1: 
1: 
/////////////////////////////////////////////////////////////////////////
1:     public void testTransactedClientAckBrokerStats() throws Exception {
0:         String frame = "CONNECT\n" + "login: system\n" + "passcode: manager\n\n" + Stomp.NULL;
1:         stompConnection.sendFrame(frame);
1: 
1:         frame = stompConnection.receiveFrame();
1:         assertTrue(frame.startsWith("CONNECTED"));
1: 
1:         sendMessage(getName());
1:         sendMessage(getName());
1: 
1:         stompConnection.begin("tx1");
1: 
1:         frame = "SUBSCRIBE\n" + "destination:/queue/" + getQueueName() + "\n" + "ack:client\n\n" + Stomp.NULL;
1:         stompConnection.sendFrame(frame);
1: 
1:         StompFrame message = stompConnection.receive();
1:         assertTrue(message.getAction().equals("MESSAGE"));
1:         stompConnection.ack(message, "tx1");
1: 
1:         message = stompConnection.receive();
1:         assertTrue(message.getAction().equals("MESSAGE"));
1:         stompConnection.ack(message, "tx1");
1: 
1:         stompConnection.commit("tx1");
1: 
0:         frame = "DISCONNECT\n" + "\n\n" + Stomp.NULL;
1:         stompConnection.sendFrame(frame);
1: 
0:         waitForFrameToTakeEffect();
1: 
0:         QueueViewMBean queueView = getProxyToQueue(getQueueName());
1:         assertEquals(2, queueView.getDispatchCount());
1:         assertEquals(2, queueView.getDequeueCount());
1:         assertEquals(0, queueView.getQueueSize());
1:     }
1: 
0:     private QueueViewMBean getProxyToQueue(String name) throws MalformedObjectNameException, JMSException {
0:         ObjectName queueViewMBeanName = new ObjectName("org.apache.activemq"
0:                 + ":Type=Queue,Destination=" + name
0:                 + ",BrokerName=localhost");
0:         QueueViewMBean proxy = (QueueViewMBean) broker.getManagementContext()
0:                 .newProxyInstance(queueViewMBeanName, QueueViewMBean.class, true);
0:         return proxy;
1:     }
1: 
commit:82df23e
/////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////
1:     public void testPersistent() throws Exception {
1:         stompConnection.connect("system", "manager");
1:         HashMap<String, String> headers = new HashMap<String, String>();
1:         headers.put(Stomp.Headers.Message.PERSISTENT, "true");
1:         stompConnection.send("/queue/" + getQueueName(), "hello", null, headers);
1: 
1:         stompConnection.subscribe("/queue/" + getQueueName());
1: 
1:         StompFrame stompMessage = stompConnection.receive();
1:         assertNotNull(stompMessage);
1:         assertNotNull(stompMessage.getHeaders().get(Stomp.Headers.Message.PERSISTENT));
1:         assertEquals(stompMessage.getHeaders().get(Stomp.Headers.Message.PERSISTENT), "true");
1:     }
1: 
1:     public void testPersistentDefaultValue() throws Exception {
1:         stompConnection.connect("system", "manager");
1: 
1:         HashMap<String, String> headers = new HashMap<String, String>();
1: 
1:         stompConnection.send("/queue/" + getQueueName(), "hello", null, headers);
1: 
1:         stompConnection.subscribe("/queue/" + getQueueName());
1: 
1:         StompFrame stompMessage = stompConnection.receive();
1:         assertNotNull(stompMessage);
1:         assertNull(stompMessage.getHeaders().get(Stomp.Headers.Message.PERSISTENT));
1:     }
commit:a6f1d75
/////////////////////////////////////////////////////////////////////////
1:     public void testSubscribeWithAutoAckAndNumericSelector() throws Exception {
1: 
0:         String frame = "CONNECT\n" + "login: system\n" + "passcode: manager\n\n" + Stomp.NULL;
1:         stompConnection.sendFrame(frame);
1: 
1:         frame = stompConnection.receiveFrame();
1:         assertTrue(frame.startsWith("CONNECTED"));
1: 
1:         frame = "SUBSCRIBE\n" + "destination:/queue/" + getQueueName() + "\n" + "selector: foo = 42\n" + "ack:auto\n\n" + Stomp.NULL;
1:         stompConnection.sendFrame(frame);
1: 
1:         // Ignored
1:         frame = "SEND\n" + "foo:abc\n" + "destination:/queue/" + getQueueName() + "\n\n" + "Ignored Message" + Stomp.NULL;
1:         stompConnection.sendFrame(frame);
1: 
1:         // Matches
1:         frame = "SEND\n" + "foo:42\n" + "destination:/queue/" + getQueueName() + "\n\n" + "Real Message" + Stomp.NULL;
1:         stompConnection.sendFrame(frame);
1: 
1:         frame = stompConnection.receiveFrame();
1:         assertTrue(frame.startsWith("MESSAGE"));
1:         assertTrue("Should have received the real message but got: " + frame, frame.indexOf("Real Message") > 0);
1: 
0:         frame = "DISCONNECT\n" + "\n\n" + Stomp.NULL;
1:         stompConnection.sendFrame(frame);
1:     }
1: 
1:     public void testSubscribeWithAutoAckAndBooleanSelector() throws Exception {
1: 
0:         String frame = "CONNECT\n" + "login: system\n" + "passcode: manager\n\n" + Stomp.NULL;
1:         stompConnection.sendFrame(frame);
1: 
1:         frame = stompConnection.receiveFrame();
1:         assertTrue(frame.startsWith("CONNECTED"));
1: 
1:         frame = "SUBSCRIBE\n" + "destination:/queue/" + getQueueName() + "\n" + "selector: foo = true\n" + "ack:auto\n\n" + Stomp.NULL;
1:         stompConnection.sendFrame(frame);
1: 
1:         // Ignored
1:         frame = "SEND\n" + "foo:false\n" + "destination:/queue/" + getQueueName() + "\n\n" + "Ignored Message" + Stomp.NULL;
1:         stompConnection.sendFrame(frame);
1: 
1:         // Matches
1:         frame = "SEND\n" + "foo:true\n" + "destination:/queue/" + getQueueName() + "\n\n" + "Real Message" + Stomp.NULL;
1:         stompConnection.sendFrame(frame);
1: 
1:         frame = stompConnection.receiveFrame();
1:         assertTrue(frame.startsWith("MESSAGE"));
1:         assertTrue("Should have received the real message but got: " + frame, frame.indexOf("Real Message") > 0);
1: 
0:         frame = "DISCONNECT\n" + "\n\n" + Stomp.NULL;
1:         stompConnection.sendFrame(frame);
1:     }
1: 
1:     public void testSubscribeWithAutoAckAnFloatSelector() throws Exception {
1: 
0:         String frame = "CONNECT\n" + "login: system\n" + "passcode: manager\n\n" + Stomp.NULL;
1:         stompConnection.sendFrame(frame);
1: 
1:         frame = stompConnection.receiveFrame();
1:         assertTrue(frame.startsWith("CONNECTED"));
1: 
1:         frame = "SUBSCRIBE\n" + "destination:/queue/" + getQueueName() + "\n" + "selector: foo = 3.14159\n" + "ack:auto\n\n" + Stomp.NULL;
1:         stompConnection.sendFrame(frame);
1: 
1:         // Ignored
1:         frame = "SEND\n" + "foo:6.578\n" + "destination:/queue/" + getQueueName() + "\n\n" + "Ignored Message" + Stomp.NULL;
1:         stompConnection.sendFrame(frame);
1: 
1:         // Matches
1:         frame = "SEND\n" + "foo:3.14159\n" + "destination:/queue/" + getQueueName() + "\n\n" + "Real Message" + Stomp.NULL;
1:         stompConnection.sendFrame(frame);
1: 
1:         frame = stompConnection.receiveFrame();
1:         assertTrue(frame.startsWith("MESSAGE"));
1:         assertTrue("Should have received the real message but got: " + frame, frame.indexOf("Real Message") > 0);
1: 
0:         frame = "DISCONNECT\n" + "\n\n" + Stomp.NULL;
1:         stompConnection.sendFrame(frame);
1:     }
1: 
commit:0885c60
/////////////////////////////////////////////////////////////////////////
1: 
/////////////////////////////////////////////////////////////////////////
1: 
/////////////////////////////////////////////////////////////////////////
1: 
/////////////////////////////////////////////////////////////////////////
1:         final int MSG_COUNT = 50;
commit:14722f8
/////////////////////////////////////////////////////////////////////////
1:     public void testSendMessageWithNoPriorityReceivesDefault() throws Exception {
1: 
1:         MessageConsumer consumer = session.createConsumer(queue);
1: 
0:         String frame = "CONNECT\n" + "login: system\n" + "passcode: manager\n\n" + Stomp.NULL;
1:         stompConnection.sendFrame(frame);
1: 
1:         frame = stompConnection.receiveFrame();
1:         assertTrue(frame.startsWith("CONNECTED"));
1: 
1:         frame = "SEND\n" + "correlation-id:c123\n" + "destination:/queue/" + getQueueName() + "\n\n" + "Hello World"
1:                 + Stomp.NULL;
1: 
1:         stompConnection.sendFrame(frame);
1: 
1:         TextMessage message = (TextMessage)consumer.receive(2500);
1:         assertNotNull(message);
1:         assertEquals("Hello World", message.getText());
1:         assertEquals("getJMSPriority", 4, message.getJMSPriority());
1:     }
1:     
commit:f8a601a
/////////////////////////////////////////////////////////////////////////
1: 
/////////////////////////////////////////////////////////////////////////
1: 
1:         stompConnection.sendFrame(frame);
1: 
1: 
1:     }
1: 
1:     public void testSendMultipleBytesMessages() throws Exception {
1: 
0:     	final int MSG_COUNT = 50;
1: 
0:         String frame = "CONNECT\n" + "login: system\n" + "passcode: manager\n\n" + Stomp.NULL;
1:         stompConnection.sendFrame(frame);
1: 
1:         frame = stompConnection.receiveFrame();
1:         assertTrue(frame.startsWith("CONNECTED"));
1: 
1:         for( int ix = 0; ix < MSG_COUNT; ix++) {
0:             frame = "SEND\n destination:/queue/" + getQueueName() + "\ncontent-length:5" + " \n\n" + "\u0001\u0002\u0000\u0004\u0005" + Stomp.NULL;
1:             stompConnection.sendFrame(frame);
1:         }
1: 
1:         frame = "SUBSCRIBE\n" + "destination:/queue/" + getQueueName() + "\n" + "ack:auto\n\n" + Stomp.NULL;
1:         stompConnection.sendFrame(frame);
1: 
1:         for( int ix = 0; ix < MSG_COUNT; ix++) {
1:             StompFrame message = stompConnection.receive();
1:             assertTrue(message.getAction().startsWith("MESSAGE"));
1: 
1:             String length = message.getHeaders().get("content-length");
1:             assertEquals("5", length);
1: 
1:             assertEquals(5, message.getContent().length);
1:         }
1: 
0:         frame = "DISCONNECT\n" + "\n\n" + Stomp.NULL;
1:         stompConnection.sendFrame(frame);
1:     }
commit:9807ee3
/////////////////////////////////////////////////////////////////////////
1: 
/////////////////////////////////////////////////////////////////////////
1:     public void testTransformationReceiveObject() throws Exception {
1: 
1:         MessageProducer producer = session.createProducer(new ActiveMQQueue("USERS." + getQueueName()));
1:         ObjectMessage message = session.createObjectMessage(new SamplePojo("Dejan", "Belgrade"));
1:         producer.send(message);
1: 
0:         String frame = "CONNECT\n" + "login: system\n" + "passcode: manager\n\n" + Stomp.NULL;
1:         stompConnection.sendFrame(frame);
1: 
1:         frame = stompConnection.receiveFrame();
1:         assertTrue(frame.startsWith("CONNECTED"));
1: 
1:         frame = "SUBSCRIBE\n" + "destination:/queue/USERS." + getQueueName() + "\n" + "ack:auto" + "\n" + "transformation:"	+ Stomp.Transformations.JMS_OBJECT_XML + "\n\n" + Stomp.NULL;
1:         stompConnection.sendFrame(frame);
1: 
1:         frame = stompConnection.receiveFrame();
1: 
1:         assertTrue(frame.trim().endsWith(xmlObject));
1: 
0:         frame = "DISCONNECT\n" + "\n\n" + Stomp.NULL;
1:         stompConnection.sendFrame(frame);
1:     }
1: 
1:     public void testTransformationReceiveXMLObjectAndMap() throws Exception {
1:         MessageProducer producer = session.createProducer(new ActiveMQQueue("USERS." + getQueueName()));
1:         ObjectMessage objMessage = session.createObjectMessage(new SamplePojo("Dejan", "Belgrade"));
1:         producer.send(objMessage);
1: 
1:         MapMessage mapMessage = session.createMapMessage();
1:         mapMessage.setString("name", "Dejan");
1:         mapMessage.setString("city", "Belgrade");
1:         producer.send(mapMessage);
1: 
0:         String frame = "CONNECT\n" + "login: system\n" + "passcode: manager\n\n" + Stomp.NULL;
1:         stompConnection.sendFrame(frame);
1: 
1:         frame = stompConnection.receiveFrame();
1:         assertTrue(frame.startsWith("CONNECTED"));
1: 
1:         frame = "SUBSCRIBE\n" + "destination:/queue/USERS." + getQueueName() + "\n" + "ack:auto" + "\n" + "transformation:"	+ Stomp.Transformations.JMS_XML + "\n\n" + Stomp.NULL;
1:         stompConnection.sendFrame(frame);
1: 
1:         frame = stompConnection.receiveFrame();
1: 
1:         assertTrue(frame.trim().endsWith(xmlObject));
1: 
1:         frame = stompConnection.receiveFrame();
1: 
0:         assertTrue(frame.trim().endsWith(xmlMap.trim()));
1: 
0:         frame = "DISCONNECT\n" + "\n\n" + Stomp.NULL;
1:         stompConnection.sendFrame(frame);
1:     }
1: 
1:     public void testTransformationReceiveJSONObjectAndMap() throws Exception {
1:         MessageProducer producer = session.createProducer(new ActiveMQQueue("USERS." + getQueueName()));
1:         ObjectMessage objMessage = session.createObjectMessage(new SamplePojo("Dejan", "Belgrade"));
1:         producer.send(objMessage);
1: 
1:         MapMessage mapMessage = session.createMapMessage();
1:         mapMessage.setString("name", "Dejan");
1:         mapMessage.setString("city", "Belgrade");
1:         producer.send(mapMessage);
1: 
0:         String frame = "CONNECT\n" + "login: system\n" + "passcode: manager\n\n" + Stomp.NULL;
1:         stompConnection.sendFrame(frame);
1: 
1:         frame = stompConnection.receiveFrame();
1:         assertTrue(frame.startsWith("CONNECTED"));
1: 
1:         frame = "SUBSCRIBE\n" + "destination:/queue/USERS." + getQueueName() + "\n" + "ack:auto" + "\n" + "transformation:"	+ Stomp.Transformations.JMS_JSON + "\n\n" + Stomp.NULL;
1:         stompConnection.sendFrame(frame);
1: 
1:         frame = stompConnection.receiveFrame();
1: 
1:         assertTrue(frame.trim().endsWith(jsonObject));
1: 
1:         frame = stompConnection.receiveFrame();
1: 
0:         assertTrue(frame.trim().endsWith(jsonMap.trim()));
1: 
0:         frame = "DISCONNECT\n" + "\n\n" + Stomp.NULL;
1:         stompConnection.sendFrame(frame);
1:     }
1: 
1:     public void testTransformationSendAndReceiveXmlMap() throws Exception {
1: 
0:         String frame = "CONNECT\n" + "login: system\n" + "passcode: manager\n\n" + Stomp.NULL;
1:         stompConnection.sendFrame(frame);
1: 
1:         frame = stompConnection.receiveFrame();
1:         assertTrue(frame.startsWith("CONNECTED"));
1: 
1:         frame = "SUBSCRIBE\n" + "destination:/queue/" + getQueueName() + "\n" + "ack:auto" + "\n" + "transformation:" + Stomp.Transformations.JMS_XML + "\n\n" + Stomp.NULL;
1:         stompConnection.sendFrame(frame);
1: 
1:         frame = "SEND\n" + "destination:/queue/" + getQueueName() + "\n" + "transformation:" + Stomp.Transformations.JMS_MAP_JSON + "\n\n" + jsonMap + Stomp.NULL;
1: 
1:         stompConnection.sendFrame(frame);
1: 
1:         frame = stompConnection.receiveFrame();
1: 
1:         assertNotNull(frame);
0:         assertTrue(frame.trim().endsWith(xmlMap.trim()));
0:         assertTrue(frame.contains("jms-map-xml"));
1:     }
1: 
1:     public void testTransformationSendAndReceiveJsonMap() throws Exception {
1: 
0:         String frame = "CONNECT\n" + "login: system\n" + "passcode: manager\n\n" + Stomp.NULL;
1:         stompConnection.sendFrame(frame);
1: 
1:         frame = stompConnection.receiveFrame();
1:         assertTrue(frame.startsWith("CONNECTED"));
1: 
1:         frame = "SUBSCRIBE\n" + "destination:/queue/" + getQueueName() + "\n" + "ack:auto" + "\n" + "transformation:" + Stomp.Transformations.JMS_JSON + "\n\n" + Stomp.NULL;
1:         stompConnection.sendFrame(frame);
1: 
1:         frame = "SEND\n" + "destination:/queue/" + getQueueName() + "\n" + "transformation:" + Stomp.Transformations.JMS_MAP_XML + "\n\n" + xmlMap + Stomp.NULL;
1: 
1:         stompConnection.sendFrame(frame);
1: 
1:         frame = stompConnection.receiveFrame();
1: 
1:         assertNotNull(frame);
0:         assertTrue(frame.trim().endsWith(jsonMap.trim()));
0:         assertTrue(frame.contains("jms-map-json"));
1:     }
1: 
1:     public void testTransformationReceiveBytesMessage() throws Exception {
1: 
1:         MessageProducer producer = session.createProducer(new ActiveMQQueue("USERS." + getQueueName()));
1:         BytesMessage message = session.createBytesMessage();
1:         message.writeBytes(new byte[]{1, 2, 3, 4, 5});
1:         producer.send(message);
1: 
0:         String frame = "CONNECT\n" + "login: system\n" + "passcode: manager\n\n" + Stomp.NULL;
1:         stompConnection.sendFrame(frame);
1: 
1:         frame = stompConnection.receiveFrame();
1:         assertTrue(frame.startsWith("CONNECTED"));
1: 
1:         frame = "SUBSCRIBE\n" + "destination:/queue/USERS." + getQueueName() + "\n" + "ack:auto" + "\n" + "transformation:"	+ Stomp.Transformations.JMS_XML + "\n\n" + Stomp.NULL;
1:         stompConnection.sendFrame(frame);
1: 
1:         frame = stompConnection.receiveFrame();
1:         assertTrue(frame.startsWith("MESSAGE"));
1: 
1:         Pattern cl = Pattern.compile("Content-length:\\s*(\\d+)", Pattern.CASE_INSENSITIVE);
1:         Matcher clMmatcher = cl.matcher(frame);
1:         assertTrue(clMmatcher.find());
1:         assertEquals("5", clMmatcher.group(1));
1: 
1:         assertFalse(Pattern.compile("type:\\s*null", Pattern.CASE_INSENSITIVE).matcher(frame).find());
1: 
0:         frame = "DISCONNECT\n" + "\n\n" + Stomp.NULL;
1:         stompConnection.sendFrame(frame);
1:     }
1: 
commit:1e8acfa
/////////////////////////////////////////////////////////////////////////
1:         TextMessage message = (TextMessage)consumer.receive(5000);
/////////////////////////////////////////////////////////////////////////
1:         StompFrame message = stompConnection.receive(5000);
commit:3e022d8
/////////////////////////////////////////////////////////////////////////
0:         frame = "DISCONNECT\n" + "\n\n" + Stomp.NULL;
1:         receiver.sendFrame(frame);
0:         waitForFrameToTakeEffect();
/////////////////////////////////////////////////////////////////////////
0:         frame = "DISCONNECT\n" + "\n\n" + Stomp.NULL;
1:         stompConnection.sendFrame(frame);
commit:24f73a5
/////////////////////////////////////////////////////////////////////////
1:     public void testReceipts() throws Exception {
1: 
1:         StompConnection receiver = new StompConnection();
0:         URI connectUri = new URI(bindAddress);
0:         receiver.open(createSocket(connectUri));
0:         String frame = "CONNECT\n" + "login: system\n" + "passcode: manager\n\n" + Stomp.NULL;
1:         receiver.sendFrame(frame);
1: 
1:         frame = receiver.receiveFrame();
1:         assertTrue(frame.startsWith("CONNECTED"));
1: 
1:         frame = "SUBSCRIBE\n" + "destination:/queue/" + getQueueName() + "\n" + "ack:auto\n\n" + Stomp.NULL;
1:         receiver.sendFrame(frame);
1: 
0:         frame = "CONNECT\n" + "login: system\n" + "passcode: manager\n\n" + Stomp.NULL;
1:         stompConnection.sendFrame(frame);
1: 
1:         frame = stompConnection.receiveFrame();
1:         assertTrue(frame.startsWith("CONNECTED"));
1: 
1:         frame = "SEND\n" + "destination:/queue/" + getQueueName() + "\n" + "receipt: msg-1\n" + "\n\n" + "Hello World" + Stomp.NULL;
1:         stompConnection.sendFrame(frame);
1: 
1:         frame = receiver.receiveFrame();
1:         assertTrue(frame.startsWith("MESSAGE"));
1:         assertTrue("Stomp Message does not contain receipt request", frame.indexOf(Stomp.Headers.RECEIPT_REQUESTED) == -1);
1: 
1:         frame = stompConnection.receiveFrame();
1:         assertTrue(frame.startsWith("RECEIPT"));
1:         assertTrue("Receipt contains correct receipt-id", frame.indexOf(Stomp.Headers.Response.RECEIPT_ID) >= 0);
1: 
1:         receiver.disconnect();
1: 
1: 
1:         MessageConsumer consumer = session.createConsumer(queue);
1: 
1:         frame = "SEND\n" + "destination:/queue/" + getQueueName() + "\n" + "receipt: msg-1\n" + "\n\n" + "Hello World" + Stomp.NULL;
1:         stompConnection.sendFrame(frame);
1: 
1:         frame = stompConnection.receiveFrame();
1:         assertTrue(frame.startsWith("RECEIPT"));
1:         assertTrue("Receipt contains correct receipt-id", frame.indexOf(Stomp.Headers.Response.RECEIPT_ID) >= 0);
1: 
1:         TextMessage message = (TextMessage)consumer.receive(2500);
1:         assertNotNull(message);
1:         assertNull("JMS Message does not contain receipt request", message.getStringProperty(Stomp.Headers.RECEIPT_REQUESTED));
1: 
0:         stompConnection.disconnect();
1: 
1:     }
1: 
commit:caabb6c
/////////////////////////////////////////////////////////////////////////
0:     private String xmlObject = "<pojo>\n"
1:             + "  <city>Belgrade</city>\n"
1:     private String xmlMap = "<map>\n"
1:         + "    <string>name</string>\n"
1:         + "  </entry>\n"
1:         + "  <entry>\n"
1:         + "    <string>Belgrade</string>\n"
1:         + "  </entry>\n"
0:     private String jsonObject = "{\"pojo\":{"
1:         + "\"city\":\"Belgrade\""
1:     private String jsonMap = "{\"map\":{"
1:         + "{\"string\":[\"city\",\"Belgrade\"]}"
1:         + "]"
1:             xmlMap = "<map>\n"
1:                 + "    <string>city</string>\n"
1:                 + "    <string>Belgrade</string>\n"
1:                 + "  </entry>\n"
1:                 + "  <entry>\n"
1:                 + "    <string>name</string>\n"
1:                 + "  </entry>\n"
1:             jsonMap = "{\"map\":{"
1:                 + "{\"string\":[\"city\",\"Belgrade\"]},"
1:                 + "]"
/////////////////////////////////////////////////////////////////////////
1:         try {
1:             connection.close();
1:             stompDisconnect();
1:         } catch(Exception e) {
1:             // Some tests explicitly disconnect from stomp so can ignore
1:         } finally {
0:             broker.stop();
1:         }
/////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////
1: 
1: 
1:         assertTrue(f.startsWith("ERROR"));
1: 
1: 
1: 
1:         assertTrue(f.startsWith("ERROR"));
1:         assertClients(1);
1:     }
1: 
/////////////////////////////////////////////////////////////////////////
1: 
/////////////////////////////////////////////////////////////////////////
1:     }
1: 
/////////////////////////////////////////////////////////////////////////
1:         assertEquals("Hello World", message.getText());
1: 
/////////////////////////////////////////////////////////////////////////
1:         assertEquals("Hello World", message.getText());
1: 
/////////////////////////////////////////////////////////////////////////
1: 
/////////////////////////////////////////////////////////////////////////
1:     }
1: 
/////////////////////////////////////////////////////////////////////////
1: 
/////////////////////////////////////////////////////////////////////////
1: 
1: 
1: 
/////////////////////////////////////////////////////////////////////////
1: 
/////////////////////////////////////////////////////////////////////////
1: 
1: 
/////////////////////////////////////////////////////////////////////////
1: 
1: 
1:         stompConnection.sendFrame(frame);
1: 
1: 
1: 
/////////////////////////////////////////////////////////////////////////
1: 
1: 
1:     }
1: 
/////////////////////////////////////////////////////////////////////////
1: 
/////////////////////////////////////////////////////////////////////////
1: 
1: 
1:         stompConnection.sendFrame(frame);
1: 
1:         // get broker JMX view
1: 
1: 
0:         BrokerViewMBean view = (BrokerViewMBean)broker.getManagementContext().newProxyInstance(brokerName, BrokerViewMBean.class, true);
1: 
1:         // connect
1: 
0:             Thread.sleep(400);
1: 
0:             Thread.sleep(400);
1: 
1:         // connect
1:         stompConnection.sendFrame(frame);
1: 
1:         stompConnection.sendFrame(frame);
0:             Thread.sleep(400);
1: 
1:     public void testMessageIdHeader() throws Exception {
1: 
1: 
1:         assertNull(stompMessage.getHeaders().get("transaction"));
1: 
1: 
/////////////////////////////////////////////////////////////////////////
1: 
1: 
1:             StompFrame frame2 = stompConnection.receive(500);
1:             if (frame2 != null) {
1:                 fail("Should not have received the second message");
1:             }
1: 
1: 
1: 
1: 
1: 
1: 
1: 
1: 
1: 
1:         stompConnection.connect("system", "manager");
1: 
1: 
1:         stompConnection.subscribe("/queue/test1", "client", headers);
1: 
1:         stompConnection.begin("ID:tx1");
1: 
1:         headers.clear();
1:         headers.put("receipt", "ID:msg1");
1:         stompConnection.send("/queue/test2", "test message", "ID:tx1", headers);
1: 
1:         stompConnection.commit("ID:tx1");
1: 
1:         // make sure connection is active after commit
1:         Thread.sleep(1000);
1:         stompConnection.send("/queue/test1", "another message");
1: 
1:         StompFrame frame = stompConnection.receive(500);
0:         assertNotNull(frame);
1: 
0:         stompConnection.disconnect();
1: 
/////////////////////////////////////////////////////////////////////////
1: 
/////////////////////////////////////////////////////////////////////////
1: 
1:     public void testJMSXUserIDIsSetInMessage() throws Exception {
1: 
1:         MessageConsumer consumer = session.createConsumer(queue);
1: 
0:         String frame = "CONNECT\n" + "login: system\n" + "passcode: manager\n\n" + Stomp.NULL;
1:         stompConnection.sendFrame(frame);
1: 
1:         frame = stompConnection.receiveFrame();
1:         assertTrue(frame.startsWith("CONNECTED"));
1: 
1:         frame = "SEND\n" + "destination:/queue/" + getQueueName() + "\n\n" + "Hello World" + Stomp.NULL;
1: 
1:         stompConnection.sendFrame(frame);
1: 
0:         TextMessage message = (TextMessage)consumer.receive(1000);
1:         assertNotNull(message);
1:         assertEquals("system", message.getStringProperty(Stomp.Headers.Message.USERID));
1: 
1:     }
1: 
1:     public void testJMSXUserIDIsSetInStompMessage() throws Exception {
1: 
0:         String frame = "CONNECT\n" + "login: system\n" + "passcode: manager\n\n" + Stomp.NULL;
1:         stompConnection.sendFrame(frame);
1: 
1:         frame = stompConnection.receiveFrame();
1:         assertTrue(frame.startsWith("CONNECTED"));
1: 
1:         frame = "SUBSCRIBE\n" + "destination:/queue/" + getQueueName() + "\n" + "ack:auto\n\n" + Stomp.NULL;
1:         stompConnection.sendFrame(frame);
1: 
1:         frame = "SEND\n" + "destination:/queue/" + getQueueName() + "\n\n" + "Hello World" + Stomp.NULL;
1:         stompConnection.sendFrame(frame);
1: 
1:         StompFrame message = stompConnection.receive(1000);
1:         assertEquals("system", message.getHeaders().get(Stomp.Headers.Message.USERID));
1:     }
1: 
/////////////////////////////////////////////////////////////////////////
author:Bosanac Dejan
-------------------------------------------------------------------------------
commit:a57108c
/////////////////////////////////////////////////////////////////////////
1:         final BrokerViewMBean view = (BrokerViewMBean)
/////////////////////////////////////////////////////////////////////////
1: 
1:         Wait.waitFor(new Wait.Condition(){
1:             @Override
1:             public boolean isSatisified() throws Exception {
1:                 return view.getDurableTopicSubscribers().length == 1;
1:             }
1:         });
1: 
0:             Thread.sleep(2000);
/////////////////////////////////////////////////////////////////////////
1: 
1:         Wait.waitFor(new Wait.Condition(){
1:             @Override
1:             public boolean isSatisified() throws Exception {
1:                 return view.getDurableTopicSubscribers().length == 0 && view.getInactiveDurableTopicSubscribers().length == 0;
1:             }
1:         });
1: 
/////////////////////////////////////////////////////////////////////////
1:         StompFrame frame = stompConnection.receive(20000);
/////////////////////////////////////////////////////////////////////////
1:         StompFrame frame3 = stompConnection.receive(20000);
1:         StompFrame frame4 = stompConnection.receive(20000);
1:         StompFrame frame5 = stompConnection.receive(20000);
/////////////////////////////////////////////////////////////////////////
0:         sframe = stompConnection.receive(60000);
commit:a54fa4b
/////////////////////////////////////////////////////////////////////////
1: 
1:     public void testHeaderValuesAreTrimmed1_0() throws Exception {
1: 
1:         String connectFrame = "CONNECT\n" +
1:                 "login:system\n" +
1:                 "passcode:manager\n" +
1:                 "accept-version:1.0\n" +
1:                 "host:localhost\n" +
1:                 "\n" + Stomp.NULL;
1:         stompConnection.sendFrame(connectFrame);
1: 
1:         String f = stompConnection.receiveFrame();
1:         LOG.debug("Broker sent: " + f);
1: 
1:         assertTrue(f.startsWith("CONNECTED"));
1: 
1:         String message = "SEND\n" + "destination:/queue/" + getQueueName() +
1:                 "\ntest1: value" +
1:                 "\ntest2:value " +
1:                 "\ntest3: value " +
1:                 "\n\n" + "Hello World" + Stomp.NULL;
1: 
1:         stompConnection.sendFrame(message);
1: 
1:         String frame = "SUBSCRIBE\n" + "destination:/queue/" + getQueueName() + "\n" +
1:                 "id:12345\n" + "ack:auto\n\n" + Stomp.NULL;
1:         stompConnection.sendFrame(frame);
1: 
1:         StompFrame received = stompConnection.receive();
1:         assertTrue(received.getAction().equals("MESSAGE"));
1: 
1:         assertEquals("value", received.getHeaders().get("test1"));
1:         assertEquals("value", received.getHeaders().get("test2"));
1:         assertEquals("value", received.getHeaders().get("test3"));
1: 
1:         frame = "UNSUBSCRIBE\n" + "destination:/queue/" + getQueueName() + "\n" +
1:                 "id:12345\n\n" + Stomp.NULL;
1:         stompConnection.sendFrame(frame);
1: 
0:         frame = "DISCONNECT\n" + "\n\n" + Stomp.NULL;
1:         stompConnection.sendFrame(frame);
1:     }
commit:a35fdd1
/////////////////////////////////////////////////////////////////////////
0:     public void testSubscribeWithClientAckAndContentLength() throws Exception {
1: 
0:         String frame = "CONNECT\n" + "login: system\n" + "passcode: manager\n\n" + Stomp.NULL;
1:         stompConnection.sendFrame(frame);
1: 
1:         frame = stompConnection.receiveFrame();
1:         assertTrue(frame.startsWith("CONNECTED"));
1: 
1:         frame = "SUBSCRIBE\n" + "destination:/queue/" + getQueueName() + "\n" + "ack:client\n\n" + Stomp.NULL;
1: 
1:         stompConnection.sendFrame(frame);
1:         sendMessage(getName());
1:         StompFrame msg = stompConnection.receive();
1: 
1: 
1:         assertTrue(msg.getAction().equals("MESSAGE"));
1:         
1:         HashMap<String, String> ackHeaders = new HashMap<String, String>();
1:         ackHeaders.put("message-id", msg.getHeaders().get("message-id"));
1:         ackHeaders.put("content-length", "8511");
1: 
1:         StompFrame ack = new StompFrame("ACK", ackHeaders);
1:         stompConnection.sendFrame(ack.format());
1: 
1: 
1:         stompDisconnect();
1: 
1:         // message should not be received since it was acknowledged
1:         MessageConsumer consumer = session.createConsumer(queue);
1:         TextMessage message = (TextMessage)consumer.receive(500);
1:         assertNull(message);
1:     }
1: 
commit:c534900
/////////////////////////////////////////////////////////////////////////
1:         assertEquals(""  + stompMessage, stompMessage.getHeaders().get(Stomp.Headers.Send.REPLY_TO), "JustAString");
commit:1c26408
/////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////
0: import javax.jms.*;
0: import javax.management.MalformedObjectNameException;
0: import javax.management.ObjectName;
0: import java.io.IOException;
0: import java.net.*;
0: import java.util.Arrays;
0: import java.util.HashMap;
0: import java.util.Map;
0: import java.util.UUID;
0: import java.util.regex.Matcher;
0: import java.util.regex.Pattern;
1: 
/////////////////////////////////////////////////////////////////////////
1:     
1:     public void testReplytoModification() throws Exception {
0:     	String replyto = "some destination";
0:         String frame = "CONNECT\n" + "login: system\n" + "passcode: manager\n\n" + Stomp.NULL;
1:         stompConnection.sendFrame(frame);
1: 
1:         frame = stompConnection.receiveFrame();
1:         assertTrue(frame.startsWith("CONNECTED"));
1: 
1:         frame = "SUBSCRIBE\n" + "destination:/queue/" + getQueueName() + "\n" + "ack:auto\n\n" + Stomp.NULL;
1:         stompConnection.sendFrame(frame);
1:         
1:         frame = "SEND\n" + "destination:/queue/" + getQueueName() + "\n" + "reply-to:" + replyto + "\n\nhello world" + Stomp.NULL;
1:         stompConnection.sendFrame(frame);
1: 
1:         StompFrame message = stompConnection.receive();
1:         assertTrue(message.getAction().equals("MESSAGE"));
1:         assertEquals(replyto, message.getHeaders().get("reply-to"));
1: 
0:         stompConnection.sendFrame("DISCONNECT\n" + "\n\n" + Stomp.NULL);
1:     }
commit:603b215
/////////////////////////////////////////////////////////////////////////
1:     
1:     public void testReceiptNewQueue() throws Exception {
1:     	
0:         String frame = "CONNECT\n" + "login: system\n" + "passcode: manager\n\n" + Stomp.NULL;
1:         stompConnection.sendFrame(frame);
1: 
1:         frame = stompConnection.receiveFrame();
1:         assertTrue(frame.startsWith("CONNECTED"));
1:         
1:         frame = "SUBSCRIBE\n" + "destination:/queue/" + getQueueName() + 1234 + "\n" + "id:8fee4b8-4e5c9f66-4703-e936-3" + "\n" + "receipt:8fee4b8-4e5c9f66-4703-e936-2" + "\n\n" + Stomp.NULL;
1:         stompConnection.sendFrame(frame);
1:         
1:         StompFrame receipt = stompConnection.receive();
1:         assertTrue(receipt.getAction().startsWith("RECEIPT"));
1:         assertEquals("8fee4b8-4e5c9f66-4703-e936-2", receipt.getHeaders().get("receipt-id"));
1: 
1: 
0:         frame = "SEND\n destination:/queue/" + getQueueName() + 123 + "\ncontent-length:0" + " \n\n" + Stomp.NULL;
1:         stompConnection.sendFrame(frame);
1: 
1: 
1:         frame = "SUBSCRIBE\n" + "destination:/queue/" + getQueueName() + 123 + "\n" + "id:8fee4b8-4e5c9f66-4703-e936-2" + "\n" + "receipt:8fee4b8-4e5c9f66-4703-e936-1" + "\n\n" + Stomp.NULL;
1:         stompConnection.sendFrame(frame);
1:         
1:         receipt = stompConnection.receive();
1:         assertTrue(receipt.getAction().startsWith("RECEIPT"));
1:         assertEquals("8fee4b8-4e5c9f66-4703-e936-1", receipt.getHeaders().get("receipt-id"));
1: 
1:         StompFrame message = stompConnection.receive();
1:         assertTrue(message.getAction().startsWith("MESSAGE"));
1: 
1:         String length = message.getHeaders().get("content-length");
1:         assertEquals("0", length);
1:         assertEquals(0, message.getContent().length);
1: 
0:         frame = "DISCONNECT\n" + "\n\n" + Stomp.NULL;
1:         stompConnection.sendFrame(frame);
1:     }
commit:036f2a8
/////////////////////////////////////////////////////////////////////////
0:         broker.waitUntilStarted();
/////////////////////////////////////////////////////////////////////////
0:             broker.waitUntilStopped();
commit:8bf987b
/////////////////////////////////////////////////////////////////////////
1: import org.slf4j.Logger;
1: import org.slf4j.LoggerFactory;
1:     private static final Logger LOG = LoggerFactory.getLogger(StompTest.class);
commit:600c7c2
/////////////////////////////////////////////////////////////////////////
1:     public void testExpire() throws Exception {
1:         stompConnection.connect("system", "manager");
1: 
1:         HashMap<String, String> headers = new HashMap<String, String>();
0:         long timestamp = System.currentTimeMillis();
1:         headers.put(Stomp.Headers.Message.EXPIRATION_TIME, String.valueOf(timestamp));
1:         headers.put(Stomp.Headers.Send.PERSISTENT, "true");
1: 
1: 
1:         stompConnection.send("/queue/" + getQueueName(), "msg", null, headers);
1: 
1:         stompConnection.subscribe("/queue/ActiveMQ.DLQ");
1:         StompFrame stompMessage = stompConnection.receive(1000);
1:         assertNotNull(stompMessage);
1:         assertEquals(stompMessage.getHeaders().get(Stomp.Headers.Message.ORIGINAL_DESTINATION), "/queue/" + getQueueName());
1:     }
1: 
1: 
1: 
commit:584d52c
/////////////////////////////////////////////////////////////////////////
1:     
1:     public void testBytesMessageWithNulls() throws Exception {
1: 
0:         String frame = "CONNECT\n" + "login: system\n" + "passcode: manager\n\n" + Stomp.NULL;
1:         stompConnection.sendFrame(frame);
1: 
1:         frame = stompConnection.receiveFrame();
1:         assertTrue(frame.startsWith("CONNECTED"));
1: 
0:         frame = "SEND\n destination:/queue/" + getQueueName() + "\ncontent-length:5" + " \n\n" + "\u0001\u0002\u0000\u0004\u0005" + Stomp.NULL;
1:         stompConnection.sendFrame(frame);
1:         
1:         frame = "SUBSCRIBE\n" + "destination:/queue/" + getQueueName() + "\n" + "ack:auto\n\n" + Stomp.NULL;
1:         stompConnection.sendFrame(frame);        
1: 
1:         StompFrame message = stompConnection.receive();
1:         assertTrue(message.getAction().startsWith("MESSAGE"));
1: 
1:         String length = message.getHeaders().get("content-length");
1:         assertEquals("5", length);
1:         
1:         assertEquals(5, message.getContent().length);
1:         
0:         frame = "DISCONNECT\n" + "\n\n" + Stomp.NULL;
1:         stompConnection.sendFrame(frame);
1:     }    
commit:681cf04
/////////////////////////////////////////////////////////////////////////
0: import java.util.Map;
/////////////////////////////////////////////////////////////////////////
1:     public void testClientSetMessageIdIsIgnored() throws Exception {
1:         HashMap<String, String> headers = new HashMap<String, String>();
1:         headers.put(Stomp.Headers.Message.MESSAGE_ID, "Thisisnotallowed");
1:         headers.put(Stomp.Headers.Message.TIMESTAMP, "1234");
1:         headers.put(Stomp.Headers.Message.REDELIVERED, "true");
1:         headers.put(Stomp.Headers.Message.SUBSCRIPTION, "Thisisnotallowed");
1:         headers.put(Stomp.Headers.Message.USERID, "Thisisnotallowed");
1: 
1: 
1:         stompConnection.connect("system", "manager");
1: 
1: 
1:         stompConnection.send("/queue/" + getQueueName(), "msg", null, headers);
1: 
1:         stompConnection.subscribe("/queue/" + getQueueName());
1:         StompFrame stompMessage = stompConnection.receive();
1: 
1:         Map<String, String> mess_headers = new HashMap<String, String>();
1:         mess_headers = stompMessage.getHeaders();
1: 
1:         assertFalse("Thisisnotallowed".equals(mess_headers.get(Stomp.Headers.Message.MESSAGE_ID)
1:                 ));
0:         assertFalse("1234".equals(mess_headers.get(Stomp.Headers.Message.TIMESTAMP)));
1:         assertNull(mess_headers.get(Stomp.Headers.Message.REDELIVERED));
1:         assertNull(mess_headers.get(Stomp.Headers.Message.SUBSCRIPTION));
1:         assertEquals("system", mess_headers.get(Stomp.Headers.Message.USERID));
1: 
1:     }
1: 
1: 
commit:8694011
/////////////////////////////////////////////////////////////////////////
1:         // The order of the entries is different when using ibm jdk 5.
1:         if (System.getProperty("java.vendor").equals("IBM Corporation")
1:             && System.getProperty("java.version").startsWith("1.5")) {
commit:876ddef
/////////////////////////////////////////////////////////////////////////
1:     public void testTempDestination() throws Exception {
1: 
0:         String frame = "CONNECT\n" + "login: system\n" + "passcode: manager\n\n" + Stomp.NULL;
1:         stompConnection.sendFrame(frame);
1: 
1:         frame = stompConnection.receiveFrame();
1:         assertTrue(frame.startsWith("CONNECTED"));
1:         
1:         frame = "SUBSCRIBE\n" + "destination:/temp-queue/" + getQueueName() + "\n" + "ack:auto\n\n" + Stomp.NULL;
1:         stompConnection.sendFrame(frame);
1: 
1:         frame = "SEND\n" + "destination:/temp-queue/" + getQueueName() + "\n\n" + "Hello World" + Stomp.NULL;
1:         stompConnection.sendFrame(frame);
1: 
0:         StompFrame message = stompConnection.receive(1000);
1:         assertEquals("Hello World", message.getBody());
1:     }
1:     
commit:b0f24f3
/////////////////////////////////////////////////////////////////////////
1:         // Previously delivered message need to get re-acked...
1:         stompConnection.ack(frame, "tx2");
1:         stompConnection.ack(frame1, "tx2");
1:         
1:         assertEquals(frame3.getBody(), "message 3");
1:         assertEquals(frame4.getBody(), "message 4");
0:         StompFrame frame5 = stompConnection.receive();
1:         assertEquals(frame5.getBody(), "message 5");
1:         stompConnection.ack(frame5, "tx3");
commit:a15e6ef
/////////////////////////////////////////////////////////////////////////
0:         Thread.sleep(1000);
commit:1a6279e
/////////////////////////////////////////////////////////////////////////
1:     }
1:     
1:     public void testTransactionsWithMultipleDestinations() throws Exception {
1: 
1:     	stompConnection.connect("system", "manager");
1:     	
1:         HashMap<String, String> headers = new HashMap<String, String>();
1:         headers.put("activemq.prefetchSize", "1");
1:         headers.put("activemq.exclusive", "true");
1:     	
0:     	stompConnection.subscribe("/queue/test1", "client", headers);
1:     	
0:     	stompConnection.begin("ID:tx1");
1:     	
0:     	headers.clear();
0:     	headers.put("receipt", "ID:msg1");
0:     	stompConnection.send("/queue/test2", "test message", "ID:tx1", headers);
1:     	
0:     	stompConnection.commit("ID:tx1");
1:     	
0:     	// make sure connection is active after commit
0:     	Thread.sleep(1000);
0:     	stompConnection.send("/queue/test1", "another message");
1:     	
0:     	StompFrame frame = stompConnection.receive(500);
0:     	System.out.println(frame);
0:     	assertNotNull(frame);
1:     	
1:     	
0:     	stompConnection.disconnect();
1:     }
1:     
commit:c6c9125
/////////////////////////////////////////////////////////////////////////
1:         stompConnection.ack(frame1, "tx1");
commit:8c6e5dc
/////////////////////////////////////////////////////////////////////////
0:         	Thread.sleep(400);
commit:fee7f6a
/////////////////////////////////////////////////////////////////////////
0:         // The order of the entries is different when using the ibm jdk.
0:         if (System.getProperty("java.vendor").equals("IBM Corporation")) {
0:             xmlMap = "<map>\n" 
1:                 + "  <entry>\n" 
1:                 + "    <string>city</string>\n"
0:                 + "    <string>Belgrade</string>\n" 
0:                 + "  </entry>\n" 
1:                 + "  <entry>\n"
0:                 + "    <string>name</string>\n" 
1:                 + "    <string>Dejan</string>\n"
0:                 + "  </entry>\n" 
1:                 + "</map>\n";
0:             jsonMap = "{\"map\":{" 
1:                 + "\"entry\":["
0:                 + "{\"string\":[\"city\",\"Belgrade\"]}," 
1:                 + "{\"string\":[\"name\",\"Dejan\"]}"
0:                 + "]" 
1:                 + "}}";
1:         }
/////////////////////////////////////////////////////////////////////////
1:         TextMessage message = (TextMessage)consumer.receive(2500);
/////////////////////////////////////////////////////////////////////////
1:         TextMessage message = (TextMessage)consumer.receive(2500);
/////////////////////////////////////////////////////////////////////////
1:         TextMessage message = (TextMessage)consumer.receive(2500);
/////////////////////////////////////////////////////////////////////////
1:         TextMessage message = (TextMessage)consumer.receive(2500);
/////////////////////////////////////////////////////////////////////////
1:         TextMessage message = (TextMessage)consumer.receive(2500);
/////////////////////////////////////////////////////////////////////////
1:         TextMessage message = (TextMessage)consumer.receive(2500);
/////////////////////////////////////////////////////////////////////////
0:         TextMessage message = (TextMessage)consumer.receive(2500);
/////////////////////////////////////////////////////////////////////////
0:         TextMessage message = (TextMessage)consumer.receive(2500);
/////////////////////////////////////////////////////////////////////////
0:         TextMessage message = (TextMessage)consumer.receive(2500);
/////////////////////////////////////////////////////////////////////////
1:         ObjectMessage message = (ObjectMessage)consumer.receive(2500);
/////////////////////////////////////////////////////////////////////////
0:         ObjectMessage message = (ObjectMessage)consumer.receive(2500);
/////////////////////////////////////////////////////////////////////////
1:         MapMessage message = (MapMessage) consumer.receive(2500);
/////////////////////////////////////////////////////////////////////////
1:         MapMessage message = (MapMessage) consumer.receive(2500);
/////////////////////////////////////////////////////////////////////////
0:         	Thread.sleep(400);
/////////////////////////////////////////////////////////////////////////
0:         	Thread.sleep(400);
commit:f6ebeec
/////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////
1:         sendMessage("message 4");
1:         sendMessage("message 5");
1:         
0:         StompFrame frame = stompConnection.receive();
1:         assertEquals(frame.getBody(), "message 1");
1:         
1:         assertEquals(frame1.getBody(), "message 2");
1:                
1:         
0:         Thread.sleep(100);
1:         stompConnection.abort("tx1");
1:         
1:         stompConnection.begin("tx2");
1:         
0:         StompFrame frame3 = stompConnection.receive();
0:         assertEquals(frame3.getBody(), "message 1");
1:         stompConnection.ack(frame3, "tx2");
1:         
0:         StompFrame frame4 = stompConnection.receive();
0:         assertEquals(frame4.getBody(), "message 2");
1:         stompConnection.ack(frame4, "tx2");
1:         
0:         StompFrame frame5 = stompConnection.receive();
0:         assertEquals(frame5.getBody(), "message 3");        
0:         stompConnection.ack(frame5, "tx2");
1:         
1:         stompConnection.commit("tx2");
1:         
1:         stompConnection.begin("tx3");
0:         StompFrame frame6 = stompConnection.receive();
0:         assertEquals(frame6.getBody(), "message 4");
0:         stompConnection.ack(frame6, "tx3");
1:         stompConnection.commit("tx3");
1:         
1:     }       
/////////////////////////////////////////////////////////////////////////
1: 
1: 
commit:d8bdf5b
/////////////////////////////////////////////////////////////////////////
0:         	Thread.sleep(200);
/////////////////////////////////////////////////////////////////////////
0:         	Thread.sleep(200);
/////////////////////////////////////////////////////////////////////////
1:     public void testPrefetchSize() throws Exception {
1:         stompConnection.connect("system", "manager");
1:         
1:         HashMap<String, String> headers = new HashMap<String, String>();
1:         headers.put("activemq.prefetchSize", "1");
1:         stompConnection.subscribe("/queue/" + getQueueName(), "client", headers);
1: 
1:         // send messages using JMS
1:         sendMessage("message 1");
1:         sendMessage("message 2");
1:         sendMessage("message 3");
1:         
0:         StompFrame frame = stompConnection.receive();
1: 
1:         stompConnection.begin("tx1");
1:         stompConnection.ack(frame, "tx1");
1: 
1:         StompFrame frame1 = stompConnection.receive();
1:         
1:         try {
0:         	StompFrame frame2 = stompConnection.receive(500);
0:         	if (frame2 != null) {
0:         		fail("Should not have received the second message");
1:         	}
1:         } catch (SocketTimeoutException soe) {}
1:         stompDisconnect();
1:     	
1:     }    
1:     
commit:7aec12e
/////////////////////////////////////////////////////////////////////////
0: import java.util.HashMap;
/////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////
0: import org.apache.activemq.transport.stomp.Stomp.Headers.Subscribe;
/////////////////////////////////////////////////////////////////////////
0:     public void testMessageIdHeader() throws Exception {  
1:         stompConnection.connect("system", "manager");
1:         
1:         stompConnection.begin("tx1");
1:         stompConnection.send("/queue/" + getQueueName(), "msg", "tx1", null);
1:         stompConnection.commit("tx1");
1:     	
0:         StompFrame connect = stompConnection.receive();
0:         if (!connect.getAction().equals(Stomp.Responses.CONNECTED)) {
0:         	throw new Exception ("Not connected");
1:         }
1:         
1:         stompConnection.subscribe("/queue/" + getQueueName());
1:         StompFrame stompMessage = stompConnection.receive();
0:         assertNull(stompMessage.getHeaders().get("transaction"));      
1:     }
1:     
author:Robert Davies
-------------------------------------------------------------------------------
commit:26d7070
/////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////
0: import com.thoughtworks.xstream.XStream;
0: import com.thoughtworks.xstream.io.HierarchicalStreamReader;
0: import com.thoughtworks.xstream.io.json.JettisonMappedXmlDriver;
0: import com.thoughtworks.xstream.io.xml.XppReader;
0: import com.thoughtworks.xstream.io.xml.xppdom.XppFactory;
0: import javax.jms.*;
/////////////////////////////////////////////////////////////////////////
0: import static org.junit.Assert.*;
/////////////////////////////////////////////////////////////////////////
1:         ObjectName brokerName = new ObjectName(domain + ":type=Broker,brokerName=localhost");
/////////////////////////////////////////////////////////////////////////
1:         ObjectName brokerName = new ObjectName(domain + ":type=Broker,brokerName=localhost");
/////////////////////////////////////////////////////////////////////////
0:             "org.apache.activemq:type=Broker,brokerName=localhost");
0:         ObjectName queueViewMBeanName = new ObjectName("org.apache.activemq:type=Broker,brokerName=localhost,destinationType=Queue,destinationName="+name);
commit:e75affa
/////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////
0: import org.apache.activemq.ActiveMQConnectionFactory;
0: import org.apache.activemq.CombinationTestSupport;
0: import org.apache.activemq.broker.BrokerFactory;
0: import org.apache.activemq.broker.BrokerService;
1: import org.apache.activemq.broker.jmx.BrokerViewMBean;
1: import org.apache.activemq.command.ActiveMQQueue;
1: import org.apache.activemq.command.ActiveMQTextMessage;
0: import org.apache.commons.logging.Log;
0: import org.apache.commons.logging.LogFactory;
/////////////////////////////////////////////////////////////////////////
1:     private final String xmlObject = "<pojo>\n"
/////////////////////////////////////////////////////////////////////////
1:     private final String jsonObject = "{\"pojo\":{"
/////////////////////////////////////////////////////////////////////////
1:     @Override
/////////////////////////////////////////////////////////////////////////
1:     @Override
/////////////////////////////////////////////////////////////////////////
1:     
1:     public void testSendMessageWithDelay() throws Exception {
1: 
1:         MessageConsumer consumer = session.createConsumer(queue);
1: 
0:         String frame = "CONNECT\n" + "login: system\n" + "passcode: manager\n\n" + Stomp.NULL;
1:         stompConnection.sendFrame(frame);
1: 
1:         frame = stompConnection.receiveFrame();
1:         assertTrue(frame.startsWith("CONNECTED"));
1: 
0:         frame = "SEND\n" + "AMQ_SCHEDULED_DELAY:5000\n"  + "destination:/queue/" + getQueueName() + "\n\n" + "Hello World" + Stomp.NULL;
1: 
1:         stompConnection.sendFrame(frame);
1: 
0:         TextMessage message = (TextMessage)consumer.receive(2000);
1:         assertNull(message);
0:         message = (TextMessage)consumer.receive(5000);
1:         assertNotNull(message);
1:     }
commit:f866f77
/////////////////////////////////////////////////////////////////////////
0:     protected String jmsUri = "vm://localhost";
1: 
/////////////////////////////////////////////////////////////////////////
0:         ActiveMQConnectionFactory cf = new ActiveMQConnectionFactory(jmsUri);
/////////////////////////////////////////////////////////////////////////
1:     	try {
0: 	        connection.close();
0: 	        stompDisconnect();
0:     	} catch(Exception e) {
0:     		// Some tests explicitly disconnect from stomp so can ignore
0:     	} finally {
0: 	        broker.stop();
1:     	}
commit:1ec71bd
/////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////
0: import java.io.IOException;
0: import java.net.Socket;
0: import java.net.SocketTimeoutException;
0: import java.net.URI;
0: import java.net.URISyntaxException;
0: import java.net.UnknownHostException;
0: import java.util.HashMap;
0: import java.util.regex.Matcher;
0: import java.util.regex.Pattern;
0: import javax.jms.BytesMessage;
0: import javax.jms.Connection;
0: import javax.jms.JMSException;
0: import javax.jms.MapMessage;
0: import javax.jms.MessageConsumer;
0: import javax.jms.MessageProducer;
0: import javax.jms.ObjectMessage;
0: import javax.jms.Session;
0: import javax.jms.TextMessage;
0: import javax.management.ObjectName;
/////////////////////////////////////////////////////////////////////////
1:                 
0:     	BrokerViewMBean view = (BrokerViewMBean)broker.getManagementContext().newProxyInstance(brokerName, BrokerViewMBean.class, true);    	
commit:4c92244
/////////////////////////////////////////////////////////////////////////
0: import javax.management.MBeanServer;
0: import javax.management.MBeanServerInvocationHandler;
0: import javax.management.ObjectName;
0: import org.apache.activemq.broker.jmx.BrokerViewMBean;
/////////////////////////////////////////////////////////////////////////
1:     public void testDurableUnsub() throws Exception {
0:     	// get broker JMX view
0:         MBeanServer mbeanServer = broker.getManagementContext().getMBeanServer();
1:         
1:         String domain = "org.apache.activemq";
0:         ObjectName brokerName = new ObjectName(domain + ":Type=Broker,BrokerName=localhost");
1:         
0:     	BrokerViewMBean view = (BrokerViewMBean)MBeanServerInvocationHandler.newProxyInstance(mbeanServer, brokerName, BrokerViewMBean.class, true);    	
1:     	
0:     	// connect
0:         String frame = "CONNECT\n" + "login: system\n" + "passcode: manager\nclient-id:test\n\n" + Stomp.NULL;
1:         stompConnection.sendFrame(frame);
1: 
1:         frame = stompConnection.receiveFrame();
1:         assertTrue(frame.startsWith("CONNECTED"));
1:         assertEquals(view.getDurableTopicSubscribers().length, 0);
1:         
1:         // subscribe
1:         frame = "SUBSCRIBE\n" + "destination:/topic/" + getQueueName() + "\n" + "ack:auto\nactivemq.subscriptionName:test\n\n" + Stomp.NULL;
1:         stompConnection.sendFrame(frame);
1:         // wait a bit for MBean to get refreshed
0:         try {
0:         	Thread.sleep(100);
0:         } catch (InterruptedException e){}
1:         
1:         assertEquals(view.getDurableTopicSubscribers().length, 1);
0:         // disconnect
0:         frame = "DISCONNECT\nclient-id:test\n\n" + Stomp.NULL;
1:         stompConnection.sendFrame(frame);
0:         try {
0:         	Thread.sleep(100);
0:         } catch (InterruptedException e){}
1:         
1:         //reconnect
1:         stompConnect();
0:     	// connect
0:         frame = "CONNECT\n" + "login: system\n" + "passcode: manager\nclient-id:test\n\n" + Stomp.NULL;
1:         stompConnection.sendFrame(frame);      
1:         frame = stompConnection.receiveFrame();
1:         assertTrue(frame.startsWith("CONNECTED"));
1:         
1:         // unsubscribe
0:         frame = "UNSUBSCRIBE\n" + "destination:/topic/" + getQueueName() + "\n" + "ack:auto\nactivemq.subscriptionName:test\n\n" + Stomp.NULL;
1:         stompConnection.sendFrame(frame);
0:         frame = "DISCONNECT\n" + "\n\n" + Stomp.NULL;
1:         stompConnection.sendFrame(frame);   
0:         try {
0:         	Thread.sleep(100);
0:         } catch (InterruptedException e){}
1:         assertEquals(view.getDurableTopicSubscribers().length, 0);
1:     }
1:     
commit:2d5bb84
/////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////
0:     private StompConnection stompConnection = new StompConnection();
/////////////////////////////////////////////////////////////////////////
0:         stompConnection.open("127.0.0.1", connectUri.getPort());
/////////////////////////////////////////////////////////////////////////
0:         return new Socket();
/////////////////////////////////////////////////////////////////////////
0:         stompConnection.close();
/////////////////////////////////////////////////////////////////////////
0:         stompConnection.sendFrame(connect_frame);
1:         String f = stompConnection.receiveFrame();
/////////////////////////////////////////////////////////////////////////
1:         stompConnection.sendFrame(frame);
1:         frame = stompConnection.receiveFrame();
/////////////////////////////////////////////////////////////////////////
1:         stompConnection.sendFrame(frame);
/////////////////////////////////////////////////////////////////////////
1:         stompConnection.sendFrame(frame);
1:         frame = stompConnection.receiveFrame();
/////////////////////////////////////////////////////////////////////////
1:         stompConnection.sendFrame(frame);
/////////////////////////////////////////////////////////////////////////
1:         stompConnection.sendFrame(frame);
1:         frame = stompConnection.receiveFrame();
/////////////////////////////////////////////////////////////////////////
1:         stompConnection.sendFrame(frame);
/////////////////////////////////////////////////////////////////////////
1:         stompConnection.sendFrame(frame);
1:         frame = stompConnection.receiveFrame();
/////////////////////////////////////////////////////////////////////////
1:         stompConnection.sendFrame(frame);
/////////////////////////////////////////////////////////////////////////
1:         stompConnection.sendFrame(frame);
1:         frame = stompConnection.receiveFrame();
/////////////////////////////////////////////////////////////////////////
1:         stompConnection.sendFrame(frame);
1:         frame = stompConnection.receiveFrame();
1:         stompConnection.sendFrame(frame);
/////////////////////////////////////////////////////////////////////////
1:         stompConnection.sendFrame(frame);
1:         frame = stompConnection.receiveFrame();
/////////////////////////////////////////////////////////////////////////
1:         stompConnection.sendFrame(frame);
1:         frame = stompConnection.receiveFrame();
/////////////////////////////////////////////////////////////////////////
1:         stompConnection.sendFrame(frame);
/////////////////////////////////////////////////////////////////////////
1:         stompConnection.sendFrame(frame);
1:         frame = stompConnection.receiveFrame();
/////////////////////////////////////////////////////////////////////////
1:         stompConnection.sendFrame(frame);
/////////////////////////////////////////////////////////////////////////
1:         frame = stompConnection.receiveFrame();
/////////////////////////////////////////////////////////////////////////
1:         stompConnection.sendFrame(frame);
/////////////////////////////////////////////////////////////////////////
1:         stompConnection.sendFrame(frame);
1:         frame = stompConnection.receiveFrame();
/////////////////////////////////////////////////////////////////////////
1:         stompConnection.sendFrame(frame);
/////////////////////////////////////////////////////////////////////////
1:             frame = stompConnection.receiveFrame();
/////////////////////////////////////////////////////////////////////////
1:             frame = stompConnection.receiveFrame();
/////////////////////////////////////////////////////////////////////////
1:         stompConnection.sendFrame(frame);
/////////////////////////////////////////////////////////////////////////
1:         stompConnection.sendFrame(frame);
1:         frame = stompConnection.receiveFrame();
/////////////////////////////////////////////////////////////////////////
1:         stompConnection.sendFrame(frame);
1:         frame = stompConnection.receiveFrame();
/////////////////////////////////////////////////////////////////////////
1:        stompConnection.sendFrame(frame);
/////////////////////////////////////////////////////////////////////////
1:        stompConnection.sendFrame(frame);
1:        frame = stompConnection.receiveFrame();
/////////////////////////////////////////////////////////////////////////
1:        stompConnection.sendFrame(frame);
1:        frame = stompConnection.receiveFrame();
1:        stompConnection.sendFrame(frame);
/////////////////////////////////////////////////////////////////////////
1:         stompConnection.sendFrame(frame);
1:         frame = stompConnection.receiveFrame();
/////////////////////////////////////////////////////////////////////////
1:         stompConnection.sendFrame(frame);
1:         frame = stompConnection.receiveFrame();
/////////////////////////////////////////////////////////////////////////
1:         stompConnection.sendFrame(frame);
/////////////////////////////////////////////////////////////////////////
1:             frame = stompConnection.receiveFrame();
/////////////////////////////////////////////////////////////////////////
1:         stompConnection.sendFrame(frame);
1:         String f = stompConnection.receiveFrame();
/////////////////////////////////////////////////////////////////////////
1:         stompConnection.sendFrame(frame);
/////////////////////////////////////////////////////////////////////////
1:         stompConnection.sendFrame(frame);
1:         stompConnection.sendFrame(frame);
/////////////////////////////////////////////////////////////////////////
1:         stompConnection.sendFrame(frame);
1:         String f = stompConnection.receiveFrame();
/////////////////////////////////////////////////////////////////////////
1:         stompConnection.sendFrame(frame);
/////////////////////////////////////////////////////////////////////////
1:         stompConnection.sendFrame(frame);
/////////////////////////////////////////////////////////////////////////
1:         stompConnection.sendFrame(frame);
1:         stompConnection.sendFrame(frame);
/////////////////////////////////////////////////////////////////////////
1:         stompConnection.sendFrame(frame);
1:         stompConnection.sendFrame(frame);
/////////////////////////////////////////////////////////////////////////
1:         stompConnection.sendFrame(frame);
1:         // now lets kill the stomp connection
0:         stompConnection.close();
author:Gary Tully
-------------------------------------------------------------------------------
commit:93a379f
/////////////////////////////////////////////////////////////////////////
1: import org.apache.activemq.util.Wait;
/////////////////////////////////////////////////////////////////////////
0: import java.util.concurrent.TimeUnit;
/////////////////////////////////////////////////////////////////////////
0:     protected StompConnection stompConnection = new StompConnection();
1:     protected Connection connection;
1:     protected Session session;
1:     protected ActiveMQQueue queue;
/////////////////////////////////////////////////////////////////////////
0:     protected void stompConnect() throws IOException, URISyntaxException, UnknownHostException {
/////////////////////////////////////////////////////////////////////////
0:     protected void stompDisconnect() throws IOException {
/////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////
1:         TextMessage message = (TextMessage)consumer.receive(10000);
/////////////////////////////////////////////////////////////////////////
1:             frame = "SEND\n" + "destination:/queue/" + getQueueName()  + "\n"  + "receipt: " + (receiptId++) + "\n" + "Hello World:" + (count++) + "\n\n" +  Stomp.NULL;
/////////////////////////////////////////////////////////////////////////
0:         TimeUnit.SECONDS.sleep(2);
/////////////////////////////////////////////////////////////////////////
1:     public void testSubscribeWithClientAckedAndContentLength() throws Exception {
/////////////////////////////////////////////////////////////////////////
1:         final QueueViewMBean queueView = getProxyToQueue(getQueueName());
1:         assertTrue("dequeue complete", Wait.waitFor(new Wait.Condition(){
1:             @Override
1:             public boolean isSatisified() throws Exception {
1:                 LOG.info("queueView, enqueue:" + queueView.getEnqueueCount() +", dequeue:" + queueView.getDequeueCount() + ", inflight:" + queueView.getInFlightCount());
1:                 return queueView.getDequeueCount() == 1;
1:             }
0:         }));
/////////////////////////////////////////////////////////////////////////
1:         frame = "UNSUBSCRIBE\n" + "destination:/queue/" + getQueueName() + "\n" + "receipt:1" +  "\n\n" + Stomp.NULL;
1:         frame = stompConnection.receiveFrame();
1:         assertTrue("" + frame, frame.startsWith("RECEIPT"));
/////////////////////////////////////////////////////////////////////////
1:         TextMessage message = (TextMessage)consumer.receive(10000);
/////////////////////////////////////////////////////////////////////////
1:         TextMessage message = (TextMessage)consumer.receive(10000);
/////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////
1:         final QueueViewMBean queueView = getProxyToQueue(getQueueName());
1:         Wait.waitFor(new Wait.Condition(){
1:             @Override
1:             public boolean isSatisified() throws Exception {
1:                 return queueView.getDequeueCount() == 2;
1:             }
1:         });
/////////////////////////////////////////////////////////////////////////
1:     protected void assertClients(final int expected) throws Exception {
1:         Wait.waitFor(new Wait.Condition()
1:         {
0:             @Override
1:             public boolean isSatisified() throws Exception {
0:                 return broker.getBroker().getClients().length == expected;
1:             }
0:         });
/////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////
commit:882c553
/////////////////////////////////////////////////////////////////////////
1:         properties.put(Stomp.Headers.RECEIPT_REQUESTED, "send-1");
1:         frame = stompConnection.receiveFrame();
1:         assertTrue("Receipt Frame: " + frame, frame.trim().startsWith("RECEIPT"));
1:         assertTrue("Receipt contains correct receipt-id " + frame, frame.indexOf(Stomp.Headers.Response.RECEIPT_ID) >= 0);
1: 
1: 
commit:2f5ec04
/////////////////////////////////////////////////////////////////////////
1:         int receiptId = 0;
/////////////////////////////////////////////////////////////////////////
0:             frame = "SEND\n" + "destination:/queue/" + getQueueName()  + "\n"  + "receipt: " + (receiptId++) + "\n\n" + "Hello World:" + (count++) + Stomp.NULL;
1:             frame = sender.receiveFrame();
1:             assertTrue("" + frame, frame.startsWith("RECEIPT"));
/////////////////////////////////////////////////////////////////////////
1:             frame = "SUBSCRIBE\n" + "destination:/queue/" + getQueueName() + "\n"  + "receipt: " +  (receiptId++)  + "\n\n" + Stomp.NULL;
1: 
1:             // remove suscription  so we don't hang about and get next message
1:             frame = "UNSUBSCRIBE\n" + "destination:/queue/" + getQueueName() + "\n"  + "receipt: " +  (receiptId++)  + "\n\n" + Stomp.NULL;
1:             receiver.sendFrame(frame);
1:             frame = receiver.receiveFrame();
1:             assertTrue("" + frame, frame.startsWith("RECEIPT"));
1: 
commit:ba0c1e5
/////////////////////////////////////////////////////////////////////////
0:         broker.setDeleteAllMessagesOnStartup(true);
/////////////////////////////////////////////////////////////////////////
1: 
1:     public void testSubscriptionReceipts() throws Exception {
0:         final int done = 500;
1:         int count = 0;
1: 
0:         URI connectUri = new URI(bindAddress);
1: 
1:         do {
1: 
1:             StompConnection sender = new StompConnection();
0:             sender.open(createSocket(connectUri));
0:             String frame = "CONNECT\n" + "login: system\n" + "passcode: manager\n\n" + Stomp.NULL;
1:             sender.sendFrame(frame);
1: 
1:             frame = sender.receiveFrame();
1:             assertTrue(frame.startsWith("CONNECTED"));
1: 
0:             frame = "SEND\n" + "destination:/queue/" + getQueueName() + "\n\n" + "Hello World:" + count + Stomp.NULL;
1:             sender.sendFrame(frame);
1: 
1:             sender.disconnect();
1: 
1:             StompConnection receiver = new StompConnection();
0:             receiver.open(createSocket(connectUri));
1: 
0:             frame = "CONNECT\n" + "login: system\n" + "passcode: manager\n\n" + Stomp.NULL;
1:             receiver.sendFrame(frame);
1: 
1:             frame = receiver.receiveFrame();
1:             assertTrue(frame.startsWith("CONNECTED"));
1: 
0:             frame = "SUBSCRIBE\n" + "destination:/queue/" + getQueueName() + "\n"  + "receipt: " + (count++) + "\n\n" + Stomp.NULL;
1:             receiver.sendFrame(frame);
1: 
1:             frame = receiver.receiveFrame();
1:             assertTrue("" + frame, frame.startsWith("RECEIPT"));
1:             assertTrue("Receipt contains receipt-id", frame.indexOf(Stomp.Headers.Response.RECEIPT_ID) >= 0);
0:             LOG.info("received: " + frame.substring(frame.indexOf(Stomp.Headers.Response.RECEIPT_ID)));
1:             frame = receiver.receiveFrame();
1:             assertTrue("" + frame, frame.startsWith("MESSAGE"));
0:             receiver.disconnect();
1:         } while (count < done);
1: 
1:     }
1: 
commit:68a8b6d
/////////////////////////////////////////////////////////////////////////
1:     public void testDefaultJMSReplyToDest() throws Exception {
0:         stompConnection.connect("system", "manager");
1: 
1:         HashMap<String, String> headers = new HashMap<String, String>();
0:         long timestamp = System.currentTimeMillis();
1:         headers.put(Stomp.Headers.Send.REPLY_TO, "JustAString");
1:         headers.put(Stomp.Headers.Send.PERSISTENT, "true");
1: 
1:         stompConnection.send("/queue/" + getQueueName(), "msg-with-reply-to", null, headers);
1: 
1:         stompConnection.subscribe("/queue/" + getQueueName());
0:         StompFrame stompMessage = stompConnection.receive(1000);
1:         assertNotNull(stompMessage);
0:         assertEquals(""  + stompMessage, stompMessage.getHeaders().get(Stomp.Headers.Send.REPLY_TO), "/queue/" + "JustAString");
1:     }
1: 
author:Hiram R. Chirino
-------------------------------------------------------------------------------
commit:3910056
/////////////////////////////////////////////////////////////////////////
0: import javax.jms.MapMessage;
0: import javax.jms.Message;
/////////////////////////////////////////////////////////////////////////
0:     private String xmlObject = "<pojo>\n" 
1:             + "  <name>Dejan</name>\n"
0:             + "  <city>Belgrade</city>\n" 
1:             + "</pojo>";
1: 
0:     private String xmlMap = "<map>\n" 
0:         + "  <entry>\n"
0:         + "    <string>name</string>\n" 
1:         + "    <string>Dejan</string>\n"
0:         + "  </entry>\n" 
0:         + "  <entry>\n" 
0:         + "    <string>city</string>\n"
0:         + "    <string>Belgrade</string>\n" 
0:         + "  </entry>\n" 
1:         + "</map>\n";
1: 
0:     private String jsonObject = "{\"pojo\":{" 
1:         + "\"name\":\"Dejan\","
1:         + "}}";
1: 
0:     private String jsonMap = "{\"map\":{" 
1:         + "\"entry\":["
1:         + "{\"string\":[\"name\",\"Dejan\"]},"
0:         + "{\"string\":[\"city\",\"Belgrade\"]}" 
0:         + "]" 
1:         + "}}";
1: 
/////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////
1:         frame = "SEND\n" + "destination:/queue/" + getQueueName() + "\n" + "transformation:" + Stomp.Transformations.JMS_OBJECT_XML + "\n\n" + "Hello World" + Stomp.NULL;
1:         assertNotNull(message.getStringProperty(Stomp.Headers.TRANSFORMATION_ERROR));
1:     public void testTransformationSendXMLObject() throws Exception {
/////////////////////////////////////////////////////////////////////////
1:         frame = "SEND\n" + "destination:/queue/" + getQueueName() + "\n" + "transformation:" + Stomp.Transformations.JMS_OBJECT_XML + "\n\n" + xmlObject + Stomp.NULL;
/////////////////////////////////////////////////////////////////////////
1:     public void testTransformationSendJSONObject() throws Exception {
/////////////////////////////////////////////////////////////////////////
1:         frame = "SEND\n" + "destination:/queue/" + getQueueName() + "\n" + "transformation:" + Stomp.Transformations.JMS_OBJECT_JSON + "\n\n" + jsonObject + Stomp.NULL;
/////////////////////////////////////////////////////////////////////////
1:         frame = "SUBSCRIBE\n" + "destination:/queue/USERS." + getQueueName() + "\n" + "ack:auto" + "\n" + "transformation:"	+ Stomp.Transformations.JMS_OBJECT_XML + "\n\n" + Stomp.NULL;
1:         assertTrue(frame.trim().endsWith(xmlObject));
1: 
1:     public void testTransformationReceiveJSONObject() throws Exception {
/////////////////////////////////////////////////////////////////////////
1:         frame = "SUBSCRIBE\n" + "destination:/queue/USERS." + getQueueName() + "\n" + "ack:auto" + "\n" + "transformation:"	+ Stomp.Transformations.JMS_OBJECT_JSON + "\n\n" + Stomp.NULL;
1:         assertTrue(frame.trim().endsWith(jsonObject));
1:     public void testTransformationReceiveXMLObject() throws Exception {
/////////////////////////////////////////////////////////////////////////
1:         frame = "SUBSCRIBE\n" + "destination:/queue/USERS." + getQueueName() + "\n" + "ack:auto" + "\n" + "transformation:"	+ Stomp.Transformations.JMS_OBJECT_XML + "\n\n" + Stomp.NULL;
1:         assertTrue(frame.trim().endsWith(xmlObject));
/////////////////////////////////////////////////////////////////////////
1:         message.setStringProperty("transformation",	Stomp.Transformations.JMS_OBJECT_XML.toString());
1:         producer.send(message);
1: 
0:         String frame = "CONNECT\n" + "login: system\n" + "passcode: manager\n\n" + Stomp.NULL;
1:         stompConnection.sendFrame(frame);
1: 
1:         frame = stompConnection.receiveFrame();
1:         assertTrue(frame.startsWith("CONNECTED"));
1: 
1:         frame = "SUBSCRIBE\n" + "destination:/queue/USERS." + getQueueName() + "\n" + "ack:auto" + "\n" + "transformation:"	+ Stomp.Transformations.JMS_OBJECT_JSON + "\n\n" + Stomp.NULL;
1:         stompConnection.sendFrame(frame);
1: 
1:         frame = stompConnection.receiveFrame();
1: 
0:         assertTrue(frame.trim().endsWith(jsonObject));
1: 
0:         frame = "DISCONNECT\n" + "\n\n" + Stomp.NULL;
1:         stompConnection.sendFrame(frame);
1:     }
1: 
1:     public void testTransformationIgnoreTransformation() throws Exception {
1:         MessageProducer producer = session.createProducer(new ActiveMQQueue("USERS." + getQueueName()));
1:         ObjectMessage message = session.createObjectMessage(new SamplePojo("Dejan", "Belgrade"));
1:         message.setStringProperty("transformation", Stomp.Transformations.JMS_OBJECT_XML.toString());
1:         producer.send(message);
1: 
0:         String frame = "CONNECT\n" + "login: system\n" + "passcode: manager\n\n" + Stomp.NULL;
1:         stompConnection.sendFrame(frame);
1: 
1:         frame = stompConnection.receiveFrame();
1:         assertTrue(frame.startsWith("CONNECTED"));
1: 
1:         frame = "SUBSCRIBE\n" + "destination:/queue/USERS." + getQueueName() + "\n" + "ack:auto" + "\n\n" + Stomp.NULL;
1:         stompConnection.sendFrame(frame);
1: 
1:         frame = stompConnection.receiveFrame();
1: 
1:         assertTrue(frame.endsWith("\n\n"));
1: 
0:         frame = "DISCONNECT\n" + "\n\n" + Stomp.NULL;
1:         stompConnection.sendFrame(frame);
1:     }
1: 
1:     public void testTransformationSendXMLMap() throws Exception {
1:         MessageConsumer consumer = session.createConsumer(queue);
1: 
0:         String frame = "CONNECT\n" + "login: system\n" + "passcode: manager\n\n" + Stomp.NULL;
1:         stompConnection.sendFrame(frame);
1: 
1:         frame = stompConnection.receiveFrame();
1:         assertTrue(frame.startsWith("CONNECTED"));
1: 
1:         frame = "SEND\n" + "destination:/queue/" + getQueueName() + "\n" + "transformation:" + Stomp.Transformations.JMS_MAP_XML + "\n\n" + xmlMap + Stomp.NULL;
1: 
1:         stompConnection.sendFrame(frame);
1: 
0:         MapMessage message = (MapMessage) consumer.receive(1000);
1:         assertNotNull(message);
1:         assertEquals(message.getString("name"), "Dejan");
1:     }
1: 
1:     public void testTransformationSendJSONMap() throws Exception {
1:         MessageConsumer consumer = session.createConsumer(queue);
1: 
0:         String frame = "CONNECT\n" + "login: system\n" + "passcode: manager\n\n" + Stomp.NULL;
1:         stompConnection.sendFrame(frame);
1: 
1:         frame = stompConnection.receiveFrame();
1:         assertTrue(frame.startsWith("CONNECTED"));
1: 
1:         frame = "SEND\n" + "destination:/queue/" + getQueueName() + "\n" + "transformation:" + Stomp.Transformations.JMS_MAP_JSON + "\n\n" + jsonMap + Stomp.NULL;
1: 
1:         stompConnection.sendFrame(frame);
1: 
0:         MapMessage message = (MapMessage) consumer.receive(1000);
1:         assertNotNull(message);
1:         assertEquals(message.getString("name"), "Dejan");
1:     }
1: 
1:     public void testTransformationReceiveXMLMap() throws Exception {
1: 
1:         MessageProducer producer = session.createProducer(new ActiveMQQueue("USERS." + getQueueName()));
1:         MapMessage message = session.createMapMessage();
1:         message.setString("name", "Dejan");
1:         message.setString("city", "Belgrade");
1:         producer.send(message);
1: 
0:         String frame = "CONNECT\n" + "login: system\n" + "passcode: manager\n\n" + Stomp.NULL;
1:         stompConnection.sendFrame(frame);
1: 
1:         frame = stompConnection.receiveFrame();
1:         assertTrue(frame.startsWith("CONNECTED"));
1: 
1:         frame = "SUBSCRIBE\n" + "destination:/queue/USERS." + getQueueName() + "\n" + "ack:auto\n" + "transformation:" + Stomp.Transformations.JMS_MAP_XML + "\n\n" + Stomp.NULL;
1:         stompConnection.sendFrame(frame);
1: 
1:         frame = stompConnection.receiveFrame();
1: 
0:         assertTrue(frame.trim().endsWith(xmlMap.trim()));
1: 
0:         frame = "DISCONNECT\n" + "\n\n" + Stomp.NULL;
1:         stompConnection.sendFrame(frame);
1:     }
1: 
1:     public void testTransformationReceiveJSONMap() throws Exception {
1: 
1:         MessageProducer producer = session.createProducer(new ActiveMQQueue("USERS." + getQueueName()));
1:         MapMessage message = session.createMapMessage();
1:         message.setString("name", "Dejan");
1:         message.setString("city", "Belgrade");
/////////////////////////////////////////////////////////////////////////
1:         frame = "SUBSCRIBE\n" + "destination:/queue/USERS." + getQueueName() + "\n" + "ack:auto\n" + "transformation:" + Stomp.Transformations.JMS_MAP_JSON + "\n\n" + Stomp.NULL;
0:         assertTrue(frame.trim().endsWith(jsonMap.trim()));
commit:2b5608f
/////////////////////////////////////////////////////////////////////////
0: import javax.jms.ObjectMessage;
/////////////////////////////////////////////////////////////////////////
0:     private String xmlText = "<org.apache.activemq.transport.stomp.SamplePojo>\n" 
0:         	+ "  <name>Dejan</name>\n" 
0:         	+ "  <city>Belgrade</city>\n" 
0:         	+ "</org.apache.activemq.transport.stomp.SamplePojo>";
1:     
0:     private String jsonText = "{\"org.apache.activemq.transport.stomp.SamplePojo\":{" 
0:         + "\"name\":\"Dejan\"," 
0:         + "\"city\":\"Belgrade\"" 
0:         + "}}";    
/////////////////////////////////////////////////////////////////////////
1:     public void testTransformationUnknownTranslator() throws Exception {
1:         MessageConsumer consumer = session.createConsumer(queue);
1: 
0:         String frame = "CONNECT\n" + "login: system\n" + "passcode: manager\n\n" + Stomp.NULL;
0:         stompConnection.sendFrame(frame);
1: 
1:         frame = stompConnection.receiveFrame();
1:         assertTrue(frame.startsWith("CONNECTED"));
1: 
1:         frame = "SEND\n" + "destination:/queue/" + getQueueName() + "\n" + "transformation:test" + "\n\n" + "Hello World" + Stomp.NULL;
1: 
0:         stompConnection.sendFrame(frame);
1: 
0:         TextMessage message = (TextMessage)consumer.receive(1000);
1:         assertNotNull(message);
1:         assertEquals("Hello World", message.getText());  	
1:     }
1:     
1:     public void testTransformationFailed() throws Exception {
1:         MessageConsumer consumer = session.createConsumer(queue);
1: 
0:         String frame = "CONNECT\n" + "login: system\n" + "passcode: manager\n\n" + Stomp.NULL;
0:         stompConnection.sendFrame(frame);
1: 
1:         frame = stompConnection.receiveFrame();
1:         assertTrue(frame.startsWith("CONNECTED"));
1: 
0:         frame = "SEND\n" + "destination:/queue/" + getQueueName() + "\n" + "transformation:jms-xml" + "\n\n" + "Hello World" + Stomp.NULL;
1: 
0:         stompConnection.sendFrame(frame);
1: 
0:         TextMessage message = (TextMessage)consumer.receive(1000);
1:         assertNotNull(message);
1:         assertEquals("Hello World", message.getText());  	
1:     }
1:     
0:     public void testTransformationSendXML() throws Exception {
1:         MessageConsumer consumer = session.createConsumer(queue);
1: 
0:         String frame = "CONNECT\n" + "login: system\n" + "passcode: manager\n\n" + Stomp.NULL;
0:         stompConnection.sendFrame(frame);
1: 
1:         frame = stompConnection.receiveFrame();
1:         assertTrue(frame.startsWith("CONNECTED"));
1:         
0:         frame = "SEND\n" + "destination:/queue/" + getQueueName() + "\n" + "transformation:jms-xml" + "\n\n" + xmlText + Stomp.NULL;
1: 
0:         stompConnection.sendFrame(frame);
1: 
0:         ObjectMessage message = (ObjectMessage)consumer.receive(1000);
1:         assertNotNull(message);
1:         SamplePojo object = (SamplePojo)message.getObject();
1:         assertEquals("Dejan", object.getName());
1:     }       
1:     
0:     public void testTransformationSendJSON() throws Exception {
1:         MessageConsumer consumer = session.createConsumer(queue);
1: 
0:         String frame = "CONNECT\n" + "login: system\n" + "passcode: manager\n\n" + Stomp.NULL;
0:         stompConnection.sendFrame(frame);
1: 
1:         frame = stompConnection.receiveFrame();
1:         assertTrue(frame.startsWith("CONNECTED"));
1:         
0:         frame = "SEND\n" + "destination:/queue/" + getQueueName() + "\n" + "transformation:jms-json" + "\n\n" + jsonText + Stomp.NULL;
1: 
0:         stompConnection.sendFrame(frame);
1: 
0:         ObjectMessage message = (ObjectMessage)consumer.receive(1000);
1:         assertNotNull(message);
1:         SamplePojo object = (SamplePojo)message.getObject();
1:         assertEquals("Dejan", object.getName());
1:     }
1:     
1:     public void testTransformationSubscribeXML() throws Exception {
1:     	
1:         MessageProducer producer = session.createProducer(new ActiveMQQueue("USERS." + getQueueName()));
1:         ObjectMessage message = session.createObjectMessage(new SamplePojo("Dejan", "Belgrade"));
1:         producer.send(message);
1:     	
0:         String frame = "CONNECT\n" + "login: system\n" + "passcode: manager\n\n" + Stomp.NULL;
0:         stompConnection.sendFrame(frame);
1: 
1:         frame = stompConnection.receiveFrame();
1:         assertTrue(frame.startsWith("CONNECTED"));
1: 
0:         frame = "SUBSCRIBE\n" + "destination:/queue/USERS." + getQueueName() + "\n" + "ack:auto" + "\n" + "transformation:jms-xml" + "\n\n" + Stomp.NULL;
0:         stompConnection.sendFrame(frame);
1:         
1:         frame = stompConnection.receiveFrame();
1: 
0:         assertTrue(frame.trim().endsWith(xmlText));
1:         
0:         frame = "DISCONNECT\n" + "\n\n" + Stomp.NULL;
0:         stompConnection.sendFrame(frame);
1:     }
1:     
0:     public void testTransformationReceiveJSON() throws Exception {
1:         MessageProducer producer = session.createProducer(new ActiveMQQueue("USERS." + getQueueName()));
1:         ObjectMessage message = session.createObjectMessage(new SamplePojo("Dejan", "Belgrade"));
1:         producer.send(message);
1:     	
0:         String frame = "CONNECT\n" + "login: system\n" + "passcode: manager\n\n" + Stomp.NULL;
0:         stompConnection.sendFrame(frame);
1: 
1:         frame = stompConnection.receiveFrame();
1:         assertTrue(frame.startsWith("CONNECTED"));
1: 
0:         frame = "SUBSCRIBE\n" + "destination:/queue/USERS." + getQueueName() + "\n" + "ack:auto" + "\n" + "transformation:jms-json" + "\n\n" + Stomp.NULL;
0:         stompConnection.sendFrame(frame);
1:         
1:         frame = stompConnection.receiveFrame();
1: 
0:         assertTrue(frame.trim().endsWith(jsonText));
1:         
0:         frame = "DISCONNECT\n" + "\n\n" + Stomp.NULL;
0:         stompConnection.sendFrame(frame);    	
1:     }
1:     
0:     public void testTransformationReceiveXML() throws Exception {
1:     	
1:         MessageProducer producer = session.createProducer(new ActiveMQQueue("USERS." + getQueueName()));
1:         ObjectMessage message = session.createObjectMessage(new SamplePojo("Dejan", "Belgrade"));
0:         message.setStringProperty("transformation", "jms-xml");
1:         producer.send(message);
1:     	
0:         String frame = "CONNECT\n" + "login: system\n" + "passcode: manager\n\n" + Stomp.NULL;
0:         stompConnection.sendFrame(frame);
1: 
1:         frame = stompConnection.receiveFrame();
1:         assertTrue(frame.startsWith("CONNECTED"));
1: 
0:         frame = "SUBSCRIBE\n" + "destination:/queue/USERS." + getQueueName() + "\n" + "ack:auto" + "\n\n" + Stomp.NULL;
0:         stompConnection.sendFrame(frame);
1:         
1:         frame = stompConnection.receiveFrame();
1: 
0:         assertTrue(frame.trim().endsWith(xmlText));
1:         
0:         frame = "DISCONNECT\n" + "\n\n" + Stomp.NULL;
0:         stompConnection.sendFrame(frame);
1:     }    
1:     
1:     public void testTransformationNotOverrideSubscription() throws Exception {
1:         MessageProducer producer = session.createProducer(new ActiveMQQueue("USERS." + getQueueName()));
1:         ObjectMessage message = session.createObjectMessage(new SamplePojo("Dejan", "Belgrade"));
0:         message.setStringProperty("transformation", "jms-xml");
1:         producer.send(message);
1:     	
0:         String frame = "CONNECT\n" + "login: system\n" + "passcode: manager\n\n" + Stomp.NULL;
0:         stompConnection.sendFrame(frame);
1: 
1:         frame = stompConnection.receiveFrame();
1:         assertTrue(frame.startsWith("CONNECTED"));
1: 
0:         frame = "SUBSCRIBE\n" + "destination:/queue/USERS." + getQueueName() + "\n" + "ack:auto" + "\n" + "transformation:jms-json" + "\n\n" + Stomp.NULL;
0:         stompConnection.sendFrame(frame);
1:         
1:         frame = stompConnection.receiveFrame();
1: 
0:         assertTrue(frame.trim().endsWith(jsonText));
1:         
0:         frame = "DISCONNECT\n" + "\n\n" + Stomp.NULL;
0:         stompConnection.sendFrame(frame);    	
1:     }
1:     
commit:471ea33
/////////////////////////////////////////////////////////////////////////
0: import org.apache.activemq.broker.BrokerFactory;
0: import org.apache.activemq.broker.BrokerPlugin;
0: import org.apache.activemq.security.AuthorizationPlugin;
0: import org.apache.activemq.security.SimpleSecurityBrokerSystemTest;
0:     protected String bindAddress = "stomp://localhost:61613";
0:     protected String confUri = "xbean:org/apache/activemq/transport/stomp/stomp-auth-broker.xml";
0:     
0:         broker = BrokerFactory.createBroker(new URI(confUri));
1:         connection = cf.createConnection("system", "manager");
0:         URI connectUri = new URI(bindAddress);
0:         stompConnection.open(createSocket(connectUri));
0:         return new Socket("127.0.0.1", connectUri.getPort());
/////////////////////////////////////////////////////////////////////////
0:         String connectFrame = "CONNECT\n" + "login: system\n" + "passcode: manager\n" + "request-id: 1\n" + "\n" + Stomp.NULL;
/////////////////////////////////////////////////////////////////////////
0:         String frame = "CONNECT\n" + "login: system\n" + "passcode: manager\n\n" + Stomp.NULL;
/////////////////////////////////////////////////////////////////////////
0:         String frame = "CONNECT\n" + "login: system\n" + "passcode: manager\n\n" + Stomp.NULL;
/////////////////////////////////////////////////////////////////////////
0:         String frame = "CONNECT\n" + "login: system\n" + "passcode: manager\n\n" + Stomp.NULL;
/////////////////////////////////////////////////////////////////////////
0:         String frame = "CONNECT\n" + "login: system\n" + "passcode: manager\n\n" + Stomp.NULL;
/////////////////////////////////////////////////////////////////////////
0:         String frame = "CONNECT\n" + "login: system\n" + "passcode: manager\n\n" + Stomp.NULL;
/////////////////////////////////////////////////////////////////////////
0:         String frame = "CONNECT\n" + "login: system\n" + "passcode: manager\n\n" + Stomp.NULL;
/////////////////////////////////////////////////////////////////////////
0:         String frame = "CONNECT\n" + "login: system\n" + "passcode: manager\n\n" + Stomp.NULL;
/////////////////////////////////////////////////////////////////////////
0:         String frame = "CONNECT\n" + "login: system\n" + "passcode: manager\n\n" + Stomp.NULL;
/////////////////////////////////////////////////////////////////////////
0:         String frame = "CONNECT\n" + "login: system\n" + "passcode: manager\n\n" + Stomp.NULL;
/////////////////////////////////////////////////////////////////////////
0:         String frame = "CONNECT\n" + "login: system\n" + "passcode: manager\n\n" + Stomp.NULL;
/////////////////////////////////////////////////////////////////////////
0:         String frame = "CONNECT\n" + "login: system\n" + "passcode: manager\n\n" + Stomp.NULL;
/////////////////////////////////////////////////////////////////////////
0:         String frame = "CONNECT\n" + "login: system\n" + "passcode: manager\n\n" + Stomp.NULL;
/////////////////////////////////////////////////////////////////////////
0:         String frame = "CONNECT\n" + "login: system\n" + "passcode: manager\n\n" + Stomp.NULL;
/////////////////////////////////////////////////////////////////////////
0:         String frame = "CONNECT\n" + "login: system\n" + "passcode: manager\n\n" + Stomp.NULL;
/////////////////////////////////////////////////////////////////////////
0:     
1:     public void testConnectNotAuthenticatedWrongUser() throws Exception {
0:         String frame = "CONNECT\n" + "login: dejanb\n" + "passcode: manager\n\n" + Stomp.NULL;
0:         stompConnection.sendFrame(frame);
1:         String f = stompConnection.receiveFrame();
0:         
0:         assertTrue(f.startsWith("ERROR"));  
1:         assertClients(1);
0:         
1:     }
0:     
1:     public void testConnectNotAuthenticatedWrongPassword() throws Exception {
0:         
0:         String frame = "CONNECT\n" + "login: system\n" + "passcode: dejanb\n\n" + Stomp.NULL;
0:         stompConnection.sendFrame(frame);
0: 
1:         String f = stompConnection.receiveFrame();
0:         
0:         assertTrue(f.startsWith("ERROR"));  
1:         assertClients(1);        
1:     }    
0:     
1:     public void testSendNotAuthorized() throws Exception {
0: 
0:         String frame = "CONNECT\n" + "login: guest\n" + "passcode: password\n\n" + Stomp.NULL;
0:         stompConnection.sendFrame(frame);
0: 
0:         frame = stompConnection.receiveFrame();
1:         assertTrue(frame.startsWith("CONNECTED"));
0: 
1:         frame = "SEND\n" + "destination:/queue/USERS." + getQueueName() + "\n\n" + "Hello World" + Stomp.NULL;
0: 
0:         stompConnection.sendFrame(frame);
1:         String f = stompConnection.receiveFrame();
0:         assertTrue(f.startsWith("ERROR"));
0: 
1:     }
0:     
1:     public void testSubscribeNotAuthorized() throws Exception {
0: 
0:         String frame = "CONNECT\n" + "login: guest\n" + "passcode: password\n\n" + Stomp.NULL;
0:         stompConnection.sendFrame(frame);
0: 
0:         frame = stompConnection.receiveFrame();
1:         assertTrue(frame.startsWith("CONNECTED"));
0: 
1:         frame = "SUBSCRIBE\n" + "destination:/queue/USERS." + getQueueName() + "\n" + "ack:auto\n\n" + Stomp.NULL;
0: 
0:         stompConnection.sendFrame(frame);
1:         String f = stompConnection.receiveFrame();
0:         assertTrue(f.startsWith("ERROR"));
0: 
1:     } 
0:     
commit:90deed4
/////////////////////////////////////////////////////////////////////////
0: import java.net.URISyntaxException;
0: import java.net.UnknownHostException;
/////////////////////////////////////////////////////////////////////////
1:         stompConnect();
/////////////////////////////////////////////////////////////////////////
0:     private void stompConnect() throws IOException, URISyntaxException, UnknownHostException {
0:         URI connectUri = connector.getConnectUri();
0:         stompConnection.open("127.0.0.1", connectUri.getPort());
1:     }
0: 
/////////////////////////////////////////////////////////////////////////
0:         stompDisconnect();
0:     private void stompDisconnect() throws IOException {
0:         if (stompConnection != null) {
0:             stompConnection.close();
0:             stompConnection = null;
1:         }
1:     }
0: 
/////////////////////////////////////////////////////////////////////////
1:         frame = "SEND\n" + "correlation-id:c123\n" + "priority:3\n" + "type:t345\n" + "JMSXGroupID:abc\n" + "foo:abc\n" + "bar:123\n" + "destination:/queue/" + getQueueName() + "\n\n" + "Hello World"
1:                 + Stomp.NULL;
/////////////////////////////////////////////////////////////////////////
1:         sendBytesMessage(new byte[] {
1:             1, 2, 3, 4, 5
0:         });
/////////////////////////////////////////////////////////////////////////
0:         stompDisconnect();
commit:933eb2f
/////////////////////////////////////////////////////////////////////////
0:     protected String bindAddress = "stomp://localhost:0";
0: 
commit:fc00993
/////////////////////////////////////////////////////////////////////////
0: import org.apache.activemq.transport.reliable.UnreliableUdpTransportTest;
0: import org.apache.commons.logging.Log;
0: import org.apache.commons.logging.LogFactory;
0:     private static final Log LOG = LogFactory.getLog(StompTest.class);
/////////////////////////////////////////////////////////////////////////
0:         String connectFrame = "CONNECT\n" + "login: brianm\n" + "passcode: wombats\n" + "request-id: 1\n" + "\n" + Stomp.NULL;
1:         stompConnection.sendFrame(connectFrame);
/////////////////////////////////////////////////////////////////////////
1:         Matcher clMmatcher = cl.matcher(frame);
1:         assertTrue(clMmatcher.find());
1:         assertEquals("5", clMmatcher.group(1));
/////////////////////////////////////////////////////////////////////////
1:             LOG.info("Received frame: " + frame);
commit:74a7a8b
/////////////////////////////////////////////////////////////////////////
0: import java.util.regex.Pattern;
0: 
0: import javax.jms.BytesMessage;
0: import javax.jms.Connection;
0: import javax.jms.JMSException;
0: import javax.jms.MessageConsumer;
0: import javax.jms.MessageProducer;
0: import javax.jms.Session;
0: import javax.jms.TextMessage;
0: 
0: import org.apache.activemq.ActiveMQConnectionFactory;
0: import org.apache.activemq.CombinationTestSupport;
0: import org.apache.activemq.broker.BrokerService;
0: import org.apache.activemq.broker.TransportConnector;
0: import org.apache.activemq.command.ActiveMQQueue;
0: import org.apache.activemq.command.ActiveMQTextMessage;
commit:230a86c
/////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////
1:  *      http://www.apache.org/licenses/LICENSE-2.0
/////////////////////////////////////////////////////////////////////////
1:         session = connection.createSession(false, Session.AUTO_ACKNOWLEDGE);
/////////////////////////////////////////////////////////////////////////
1:     public void sendBytesMessage(byte[] msg) throws Exception {
/////////////////////////////////////////////////////////////////////////
0:         String frame = "CONNECT\n" + "login: brianm\n" + "passcode: wombats\n\n" + Stomp.NULL;
1:         frame = "SEND\n" + "destination:/queue/" + getQueueName() + "\n\n" + "Hello World" + Stomp.NULL;
0:         TextMessage message = (TextMessage)consumer.receive(1000);
/////////////////////////////////////////////////////////////////////////
1:         assertTrue(Math.abs(tnow - tmsg) < 1000);
0:         String frame = "CONNECT\n" + "login: brianm\n" + "passcode: wombats\n\n" + Stomp.NULL;
0:         frame = "SEND\n" + "destination:/queue/" + getQueueName() + "\n" + "JMSXGroupID: TEST\n\n" + "Hello World" + Stomp.NULL;
0:         TextMessage message = (TextMessage)consumer.receive(1000);
0:         String frame = "CONNECT\n" + "login: brianm\n" + "passcode: wombats\n\n" + Stomp.NULL;
1:         frame = "SEND\n" + "foo:abc\n" + "bar:123\n" + "destination:/queue/" + getQueueName() + "\n\n" + "Hello World" + Stomp.NULL;
0:         TextMessage message = (TextMessage)consumer.receive(1000);
/////////////////////////////////////////////////////////////////////////
0:         String frame = "CONNECT\n" + "login: brianm\n" + "passcode: wombats\n\n" + Stomp.NULL;
0:         frame = "SEND\n" + "correlation-id:c123\n" + "priority:3\n" + "type:t345\n" + "JMSXGroupID:abc\n" + "foo:abc\n" + "bar:123\n" + "destination:/queue/" + getQueueName()
0:                 + "\n\n" + "Hello World" + Stomp.NULL;
0:         TextMessage message = (TextMessage)consumer.receive(1000);
/////////////////////////////////////////////////////////////////////////
1:         ActiveMQTextMessage amqMessage = (ActiveMQTextMessage)message;
0:         String frame = "CONNECT\n" + "login: brianm\n" + "passcode: wombats\n\n" + Stomp.NULL;
1:         frame = "SUBSCRIBE\n" + "destination:/queue/" + getQueueName() + "\n" + "ack:auto\n\n" + Stomp.NULL;
/////////////////////////////////////////////////////////////////////////
0:         frame = "DISCONNECT\n" + "\n\n" + Stomp.NULL;
1:     public void testSubscribeWithAutoAckAndBytesMessage() throws Exception {
0:         String frame = "CONNECT\n" + "login: brianm\n" + "passcode: wombats\n\n" + Stomp.NULL;
1:         frame = "SUBSCRIBE\n" + "destination:/queue/" + getQueueName() + "\n" + "ack:auto\n\n" + Stomp.NULL;
0:         sendBytesMessage(new byte[] {1, 2, 3, 4, 5});
/////////////////////////////////////////////////////////////////////////
0:         frame = "DISCONNECT\n" + "\n\n" + Stomp.NULL;
0:         String frame = "CONNECT\n" + "login: brianm\n" + "passcode: wombats\n\n" + Stomp.NULL;
1:         frame = "SUBSCRIBE\n" + "destination:/queue/" + getQueueName() + "\n" + "ack:auto\n\n" + Stomp.NULL;
1:         message.setByteProperty("byte", (byte)9);
1:         message.setFloatProperty("f", (float)6.0);
1:         message.setShortProperty("s", (short)12);
0:         // System.out.println("out: "+frame);
0:         frame = "DISCONNECT\n" + "\n\n" + Stomp.NULL;
/////////////////////////////////////////////////////////////////////////
0:         String frame = "CONNECT\n" + "login: brianm\n" + "passcode: wombats\n\n" + Stomp.NULL;
1:         frame = "SUBSCRIBE\n" + "destination:/queue/" + getQueueName() + "\n" + "ack:auto\n\n" + Stomp.NULL;
/////////////////////////////////////////////////////////////////////////
1:             assertTrue("Message not in order", frame.indexOf(data[i]) >= 0);
/////////////////////////////////////////////////////////////////////////
1:             assertTrue("Message not in order", frame.indexOf(data[i]) >= 0);
0:         frame = "DISCONNECT\n" + "\n\n" + Stomp.NULL;
0:         String frame = "CONNECT\n" + "login: brianm\n" + "passcode: wombats\n\n" + Stomp.NULL;
1:         frame = "SUBSCRIBE\n" + "destination:/queue/" + getQueueName() + "\n" + "selector: foo = 'zzz'\n" + "ack:auto\n\n" + Stomp.NULL;
/////////////////////////////////////////////////////////////////////////
0:         frame = "DISCONNECT\n" + "\n\n" + Stomp.NULL;
0:         stompConnection.sendFrame(frame);
0:         String frame = "CONNECT\n" + "login: brianm\n" + "passcode: wombats\n\n" + Stomp.NULL;
0:         stompConnection.sendFrame(frame);
0:         frame = stompConnection.receiveFrame();
1:         assertTrue(frame.startsWith("CONNECTED"));
1:         frame = "SUBSCRIBE\n" + "destination:/queue/" + getQueueName() + "\n" + "ack:client\n\n" + Stomp.NULL;
0:         stompConnection.sendFrame(frame);
1:         sendMessage(getName());
0:         frame = stompConnection.receiveFrame();
1:         assertTrue(frame.startsWith("MESSAGE"));
0:         frame = "DISCONNECT\n" + "\n\n" + Stomp.NULL;
0:         stompConnection.sendFrame(frame);
1:         // message should be received since message was not acknowledged
1:         MessageConsumer consumer = session.createConsumer(queue);
0:         TextMessage message = (TextMessage)consumer.receive(1000);
1:         assertNotNull(message);
1:         assertTrue(message.getJMSRedelivered());
0:         String frame = "CONNECT\n" + "login: brianm\n" + "passcode: wombats\n\n" + Stomp.NULL;
1:         frame = "SUBSCRIBE\n" + "destination:/queue/" + getQueueName() + "\n" + "ack:auto\n\n" + Stomp.NULL;
1:         // send a message to our queue
1:         // receive message from socket
1:         // remove suscription
0:         frame = "UNSUBSCRIBE\n" + "destination:/queue/" + getQueueName() + "\n" + "\n\n" + Stomp.NULL;
1:         // send a message to our queue
1:         } catch (SocketTimeoutException e) {
0:         String frame = "CONNECT\n" + "login: brianm\n" + "passcode: wombats\n\n" + Stomp.NULL;
1:         frame = "BEGIN\n" + "transaction: tx1\n" + "\n\n" + Stomp.NULL;
1:         frame = "SEND\n" + "destination:/queue/" + getQueueName() + "\n" + "transaction: tx1\n" + "\n\n" + "Hello World" + Stomp.NULL;
1:         frame = "COMMIT\n" + "transaction: tx1\n" + "\n\n" + Stomp.NULL;
0:         TextMessage message = (TextMessage)consumer.receive(1000);
0:         String frame = "CONNECT\n" + "login: brianm\n" + "passcode: wombats\n\n" + Stomp.NULL;
1:         frame = "BEGIN\n" + "transaction: tx1\n" + "\n\n" + Stomp.NULL;
1:         frame = "SEND\n" + "destination:/queue/" + getQueueName() + "\n" + "transaction: tx1\n" + "\n" + "first message" + Stomp.NULL;
1:         // rollback first message
1:         frame = "ABORT\n" + "transaction: tx1\n" + "\n\n" + Stomp.NULL;
1:         frame = "BEGIN\n" + "transaction: tx1\n" + "\n\n" + Stomp.NULL;
1:         frame = "SEND\n" + "destination:/queue/" + getQueueName() + "\n" + "transaction: tx1\n" + "\n" + "second message" + Stomp.NULL;
1:         frame = "COMMIT\n" + "transaction: tx1\n" + "\n\n" + Stomp.NULL;
1:         // only second msg should be received since first msg was rolled back
0:         TextMessage message = (TextMessage)consumer.receive(1000);
0:         String frame = "CONNECT\n" + "login: brianm\n" + "passcode: wombats\n\n" + Stomp.NULL;
commit:a45a7a3
/////////////////////////////////////////////////////////////////////////
0: //        System.out.println("out: "+frame);
commit:57b4941
/////////////////////////////////////////////////////////////////////////
1:  * Licensed to the Apache Software Foundation (ASF) under one or more
1:  * contributor license agreements.  See the NOTICE file distributed with
1:  * this work for additional information regarding copyright ownership.
1:  * The ASF licenses this file to You under the Apache License, Version 2.0
1:  * (the "License"); you may not use this file except in compliance with
1:  * the License.  You may obtain a copy of the License at
commit:98b61e4
/////////////////////////////////////////////////////////////////////////
0: import org.apache.activemq.transport.stomp.Stomp;
commit:1f6aa57
/////////////////////////////////////////////////////////////////////////
0: import org.apache.activemq.transport.stomp2.Stomp;
commit:dee685f
/////////////////////////////////////////////////////////////////////////
1:     public void testSubscribeWithMessageSentWithProperties() throws Exception {
0:         
0:         String frame =
0:             "CONNECT\n" +
0:             "login: brianm\n" +
0:             "passcode: wombats\n\n"+
0:             Stomp.NULL;
0:         sendFrame(frame);
0:         
0:         frame = receiveFrame(100000);
1:         assertTrue(frame.startsWith("CONNECTED"));
0:         
0:         frame =
0:             "SUBSCRIBE\n" +
0:             "destination:/queue/" + getQueueName() + "\n" +
0:             "ack:auto\n\n" +
0:             Stomp.NULL;
0:         sendFrame(frame);
0:         
0:         
1:         MessageProducer producer = session.createProducer(queue);
1:         TextMessage message = session.createTextMessage("Hello World");
1:         message.setStringProperty("s", "value");
1:         message.setBooleanProperty("n", false);
0:         message.setByteProperty("byte", (byte) 9);
1:         message.setDoubleProperty("d", 2.0);
0:         message.setFloatProperty("f", (float) 6.0);
1:         message.setIntProperty("i", 10);
1:         message.setLongProperty("l", 121);
0:         message.setShortProperty("s", (short) 12);
1:         producer.send(message);
0:         
0:         frame = receiveFrame(10000);
1:         assertTrue(frame.startsWith("MESSAGE"));
0:         
0:         System.out.println("out: "+frame);
0:         
0:         frame =
0:             "DISCONNECT\n" +
0:             "\n\n"+
0:             Stomp.NULL;
0:         sendFrame(frame);
1:     }
commit:93dc39b
/////////////////////////////////////////////////////////////////////////
0:             log.info("Received frame: " + frame);
commit:178f34b
/////////////////////////////////////////////////////////////////////////
0:                 c = is.read();
0:                 assertEquals("Expecting stomp frame to terminate with \0\n", c, '\n');
commit:36722d8
/////////////////////////////////////////////////////////////////////////
0:         stompSocket = new Socket("127.0.0.1", connectUri.getPort());
commit:981cef5
/////////////////////////////////////////////////////////////////////////
0: 
1:     public void testJMSXGroupIdCanBeSet() throws Exception {
0:         
1:         MessageConsumer consumer = session.createConsumer(queue);
0:         
0:         String frame = 
0:             "CONNECT\n" + 
0:             "login: brianm\n" + 
0:             "passcode: wombats\n\n"+
0:             Stomp.NULL;
0:         sendFrame(frame);
0:         
0:         frame = receiveFrame(10000);
1:         assertTrue(frame.startsWith("CONNECTED"));
0:         
0:         frame =
0:             "SEND\n" +
0:             "destination:/queue/" + getQueueName() + "\n" +
0:             "JMSXGroupID: TEST\n\n" +
0:             "Hello World" +
0:             Stomp.NULL;
0:         
0:         sendFrame(frame);
0:         
0:         TextMessage message = (TextMessage) consumer.receive(1000);
1:         assertNotNull(message);
1:         assertEquals("TEST", ((ActiveMQTextMessage)message).getGroupID());
1:     }
0: 
commit:48b4869
/////////////////////////////////////////////////////////////////////////
0:  * Copyright 2005-2006 The Apache Software Foundation
commit:d29ca2a
/////////////////////////////////////////////////////////////////////////
1: /**
1:  *
0:  * Copyright 2004 The Apache Software Foundation
1:  *
0:  * Licensed under the Apache License, Version 2.0 (the "License");
0:  * you may not use this file except in compliance with the License.
0:  * You may obtain a copy of the License at
1:  *
0:  * http://www.apache.org/licenses/LICENSE-2.0
1:  *
1:  * Unless required by applicable law or agreed to in writing, software
1:  * distributed under the License is distributed on an "AS IS" BASIS,
1:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:  * See the License for the specific language governing permissions and
1:  * limitations under the License.
1:  */
1: package org.apache.activemq.transport.stomp;
0: 
0: import java.io.ByteArrayOutputStream;
0: import java.io.IOException;
0: import java.io.InputStream;
0: import java.io.OutputStream;
0: import java.net.Socket;
0: import java.net.URI;
0: 
0: import javax.jms.Connection;
0: import javax.jms.MessageConsumer;
0: import javax.jms.MessageProducer;
0: import javax.jms.Session;
0: import javax.jms.TextMessage;
0: 
0: import org.apache.activemq.ActiveMQConnectionFactory;
0: import org.apache.activemq.CombinationTestSupport;
0: import org.apache.activemq.broker.BrokerService;
0: import org.apache.activemq.broker.TransportConnector;
0: import org.apache.activemq.command.ActiveMQQueue;
0: import org.apache.activemq.transport.stomp.Stomp;
0: 
0: public class StompTest extends CombinationTestSupport {
0: 
0:     private BrokerService broker;
0:     private TransportConnector connector;
0:     private Socket stompSocket;
0:     private ByteArrayOutputStream inputBuffer;
0:     private Connection connection;
0:     private Session session;
0:     private ActiveMQQueue queue;
0: 
0:     protected void setUp() throws Exception {
0:         broker = new BrokerService();
0:         broker.setPersistent(false);
0:         connector = broker.addConnector("stomp://localhost:0");
0:         broker.start();
0:         
0:         URI connectUri = connector.getConnectUri();
0:         stompSocket = new Socket(connectUri.getHost(), connectUri.getPort());
0:         inputBuffer = new ByteArrayOutputStream();
0:         
0:         ActiveMQConnectionFactory cf = new ActiveMQConnectionFactory("vm://localhost");
0:         connection = cf.createConnection();
0:         session = connection.createSession(false,Session.AUTO_ACKNOWLEDGE);
0:         queue = new ActiveMQQueue("TEST");
1:         connection.start();
1:     }
0:     
0:     protected void tearDown() throws Exception {
0:         connection.close();
0:         stompSocket.close();
0:         broker.stop();
1:     }
0: 
0:     public void sendFrame(String data) throws Exception {
0:         byte[] bytes = data.getBytes("UTF-8");
0:         OutputStream outputStream = stompSocket.getOutputStream();
0:         for (int i = 0; i < bytes.length; i++) {
0:             outputStream.write(bytes[i]);
1:         }
0:         outputStream.flush();
1:     }
0: 
0:     public String receiveFrame(long timeOut) throws Exception {
0:         stompSocket.setSoTimeout((int) timeOut);
0:         InputStream is = stompSocket.getInputStream();
0:         int c=0;
0:         for(;;) {
0:             c = is.read();
0:             if( c < 0 ) {
0:                 throw new IOException("socket closed.");
0:             } else if( c == 0 ) {
0:                 byte[] ba = inputBuffer.toByteArray();
0:                 inputBuffer.reset();
0:                 return new String(ba, "UTF-8");
0:             } else {
0:                 inputBuffer.write(c);
1:             }
1:         } 
1:     }
0:     
1:     public void testConnect() throws Exception {
0:         
0:         String connect_frame = "CONNECT\n" + "login: brianm\n" + "passcode: wombats\n" + "\n" + Stomp.NULL;
0:         sendFrame(connect_frame);
0:      
0:         String f = receiveFrame(10000);
1:         assertTrue(f.startsWith("CONNECTED"));
0:         
1:     }
0:     
1:     public void testSendMessage() throws Exception {
0:         
1:         MessageConsumer consumer = session.createConsumer(queue);
0:         
0:         String frame = 
0:             "CONNECT\n" + 
0:             "login: brianm\n" + 
0:             "passcode: wombats\n\n"+
0:             Stomp.NULL;
0:         sendFrame(frame);
0:      
0:         frame = receiveFrame(10000);
1:         assertTrue(frame.startsWith("CONNECTED"));
0:         
0:         frame = 
0:             "SEND\n" + 
0:             "destination:/queue/TEST\n\n" + 
0:             "Hello World" + 
0:             Stomp.NULL;
0:         sendFrame(frame);
0:         
0:         TextMessage message = (TextMessage) consumer.receive(1000);
1:         assertNotNull(message);
1:         assertEquals("Hello World", message.getText());
0:         
1:     }
0:     
1:     public void testSubscribeWithAutoAck() throws Exception {
0:         
0:         String frame = 
0:             "CONNECT\n" + 
0:             "login: brianm\n" + 
0:             "passcode: wombats\n\n"+
0:             Stomp.NULL;
0:         sendFrame(frame);
0:      
0:         frame = receiveFrame(10000000);
1:         assertTrue(frame.startsWith("CONNECTED"));
0:         
0:         frame = 
0:             "SUBSCRIBE\n" + 
0:             "destination:/queue/TEST\n" +
0:             "ack:auto\n\n" + 
0:             Stomp.NULL;
0:         sendFrame(frame);
0: 
1:         MessageProducer producer = session.createProducer(queue);
0:         TextMessage message = session.createTextMessage(getName());
1:         producer.send(message);
0:         
0:         frame = receiveFrame(10000);
1:         assertTrue(frame.startsWith("MESSAGE"));
0:         
1:     }
0:     
1: }
author:James Strachan
-------------------------------------------------------------------------------
commit:0aac7f5
/////////////////////////////////////////////////////////////////////////
0: import org.apache.activemq.broker.*;
0: import javax.jms.Connection;
/////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////
0:         if (stompSocket != null) {
0:             stompSocket.close();
0:         }
/////////////////////////////////////////////////////////////////////////
1:     public void testDisconnectedClientsAreRemovedFromTheBroker() throws Exception {
0:         assertClients(1);
0:         String frame =
0:             "CONNECT\n" +
0:             "login: brianm\n" +
0:             "passcode: wombats\n\n"+
0:             Stomp.NULL;
0: 
0:         sendFrame(frame);
0: 
0:         // This test case is currently failing
0:         waitForFrameToTakeEffect();
0: 
1:         assertClients(2);
0: 
0:         // now lets kill the socket
0:         stompSocket.close();
0:         stompSocket = null;
0: 
0:         Thread.sleep(2000);
0: 
0:         assertClients(1);
0:     }
0: 
0:     protected void assertClients(int expected) throws Exception {
0:         org.apache.activemq.broker.Connection[] clients = broker.getBroker().getClients();
1:         int actual = clients.length;
0: 
1:         assertEquals("Number of clients", expected, actual);
0:     }
0: 
commit:0c6165f
/////////////////////////////////////////////////////////////////////////
0:     protected String bindAddress = "stomp://localhost:0";
0:         connector = broker.addConnector(bindAddress);
0:         stompSocket = createSocket(connectUri);
/////////////////////////////////////////////////////////////////////////
0:     protected Socket createSocket(URI connectUri) throws IOException {
0:         return new Socket("127.0.0.1", connectUri.getPort());
0:     }
0: 
commit:8ce74fa
/////////////////////////////////////////////////////////////////////////
1:         assertTrue(f.indexOf("response-id:1") >= 0);
commit:2f60549
/////////////////////////////////////////////////////////////////////////
0:             "priority:3\n" +
0:             "type:t345\n" +
/////////////////////////////////////////////////////////////////////////
1:         assertEquals("getJMSType", "t345", message.getJMSType());
1:         assertEquals("getJMSPriority", 3, message.getJMSPriority());
commit:b5bba09
/////////////////////////////////////////////////////////////////////////
0: import org.apache.activemq.command.ActiveMQTextMessage;
/////////////////////////////////////////////////////////////////////////
1:     public void testSendMessageWithCustomHeadersAndSelector() throws Exception {
/////////////////////////////////////////////////////////////////////////
1:         assertEquals("foo", "abc", message.getStringProperty("foo"));
1:         assertEquals("bar", "123", message.getStringProperty("bar"));
0:     }
0:     
1:     public void testSendMessageWithStandardHeaders() throws Exception {
0:         
1:         MessageConsumer consumer = session.createConsumer(queue);
0:         
0:         String frame = 
0:             "CONNECT\n" + 
0:             "login: brianm\n" + 
0:             "passcode: wombats\n\n"+
0:             Stomp.NULL;
0:         sendFrame(frame);
0:      
0:         frame = receiveFrame(10000);
1:         assertTrue(frame.startsWith("CONNECTED"));
0: 
0:         frame =
0:             "SEND\n" +
0:             "correlation-id:c123\n" +
0:             "JMSXGroupID:abc\n" +
0:             "foo:abc\n" +
0:             "bar:123\n" +
0:             "destination:/queue/" + getQueueName() + "\n\n" +
0:             "Hello World" +
0:             Stomp.NULL;
0: 
0:         sendFrame(frame);
0: 
0:         TextMessage message = (TextMessage) consumer.receive(1000);
1:         assertNotNull(message);
0:         assertEquals("Hello World", message.getText());
1:         assertEquals("JMSCorrelationID", "c123", message.getJMSCorrelationID());
1:         assertEquals("foo", "abc", message.getStringProperty("foo"));
1:         assertEquals("bar", "123", message.getStringProperty("bar"));
0:         
1:         assertEquals("JMSXGroupID", "abc", message.getStringProperty("JMSXGroupID"));
0:         ActiveMQTextMessage amqMessage = (ActiveMQTextMessage) message;
1:         assertEquals("GroupID", "abc", amqMessage.getGroupID());
commit:c341dc7
/////////////////////////////////////////////////////////////////////////
0:         frame = receiveFrame(1000);
/////////////////////////////////////////////////////////////////////////
0:         waitForFrameToTakeEffect();
/////////////////////////////////////////////////////////////////////////
1:         MessageConsumer consumer = session.createConsumer(queue);
0: 
/////////////////////////////////////////////////////////////////////////
0:         
/////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////
0:         waitForFrameToTakeEffect();
0:         
1:         assertNotNull("Should have received a message", message);
1:         MessageConsumer consumer = session.createConsumer(queue);
0: 
/////////////////////////////////////////////////////////////////////////
0:             "\n" +
/////////////////////////////////////////////////////////////////////////
0:             "BEGIN\n" +
0:             "transaction: tx1\n" +
0:             "\n\n" +
0:             Stomp.NULL;
0:         sendFrame(frame);
0: 
0:         frame =
0:             "\n" +
/////////////////////////////////////////////////////////////////////////
0:         waitForFrameToTakeEffect();
1:         assertEquals("second message", message.getText().trim());
0:     protected void waitForFrameToTakeEffect() throws InterruptedException {
0:         // bit of a dirty hack :)
0:         // another option would be to force some kind of receipt to be returned
0:         // from the frame
0:         Thread.sleep(2000);
0:     }
commit:1b3a593
/////////////////////////////////////////////////////////////////////////
0:         TextMessage message = (TextMessage) consumer.receive(1000);
/////////////////////////////////////////////////////////////////////////
0:         sendFrame(frame);
0:         // lets wait for the unsubscribe to take effect
0:         Thread.sleep(1000);
0:         
commit:a603c40
/////////////////////////////////////////////////////////////////////////
0: import javax.jms.JMSException;
/////////////////////////////////////////////////////////////////////////
0:     
1:         sendMessage(msg, "foo", "xyz");
0:     }
1:     public void sendMessage(String msg, String propertyName, String propertyValue) throws JMSException {
1:         message.setStringProperty(propertyName, propertyValue);
/////////////////////////////////////////////////////////////////////////
0:     
0:         
0:         String frame =
0:             "CONNECT\n" +
0:             "login: brianm\n" +
0:             "passcode: wombats\n\n"+
0:             Stomp.NULL;
0:         sendFrame(frame);
0:         
0:         frame = receiveFrame(100000);
1:         assertTrue(frame.startsWith("CONNECTED"));
0:         
0:         frame =
0:             "SUBSCRIBE\n" +
0:             "destination:/queue/" + getQueueName() + "\n" +
0:             "ack:auto\n\n" +
0:             Stomp.NULL;
0:         sendFrame(frame);
0:         
0:         sendMessage(getName());
0:         
0:         frame = receiveFrame(10000);
1:         assertTrue(frame.startsWith("MESSAGE"));
0:         
0:         frame =
0:             "DISCONNECT\n" +
0:             "\n\n"+
0:             Stomp.NULL;
0:         sendFrame(frame);
0:     }
0:     
0: 
1:     public void testSubscribeWithAutoAckAndSelector() throws Exception {
/////////////////////////////////////////////////////////////////////////
0:             "selector: foo = 'zzz'\n" +
1:         sendMessage("Ignored message", "foo", "1234");
1:         sendMessage("Real message", "foo", "zzz");
1:         assertTrue("Should have received the real message but got: " + frame, frame.indexOf("Real message") > 0);
commit:c4c5895
/////////////////////////////////////////////////////////////////////////
0: import org.apache.activemq.ActiveMQConnectionFactory;
0: import org.apache.activemq.CombinationTestSupport;
0: import org.apache.activemq.broker.BrokerService;
0: import org.apache.activemq.broker.TransportConnector;
0: import org.apache.activemq.command.ActiveMQQueue;
0: 
0: import javax.jms.Connection;
0: import javax.jms.MessageConsumer;
0: import javax.jms.MessageProducer;
0: import javax.jms.Session;
0: import javax.jms.TextMessage;
0: 
0: import java.net.URI;
/////////////////////////////////////////////////////////////////////////
0:         queue = new ActiveMQQueue(getQueueName());
0:     protected String getQueueName() {
0:         return getClass().getName() + "." + getName();
0:     }
0: 
/////////////////////////////////////////////////////////////////////////
0:         
0:         frame = receiveFrame(10000);
1:         assertTrue(frame.startsWith("CONNECTED"));
0:         
0:         frame =
0:             "SEND\n" +
0:             "destination:/queue/" + getQueueName() + "\n\n" +
0:             "Hello World" +
0:             Stomp.NULL;
0:         
0:         sendFrame(frame);
0:         
0:         TextMessage message = (TextMessage) consumer.receive(1000);
1:         assertNotNull(message);
0:         assertEquals("Hello World", message.getText());
0:     }
0:     
0:     
0:     public void testSendMessageWithHeaders() throws Exception {
0:         
1:         MessageConsumer consumer = session.createConsumer(queue, "foo = 'abc'");
0:         
0:         String frame = 
0:             "CONNECT\n" + 
0:             "login: brianm\n" + 
0:             "passcode: wombats\n\n"+
0:             Stomp.NULL;
0:         sendFrame(frame);
0:             "foo:abc\n" +
0:             "bar:123\n" +
0:             "destination:/queue/" + getQueueName() + "\n\n" +
0:         TextMessage message = (TextMessage) consumer.receive(60000);
/////////////////////////////////////////////////////////////////////////
0:             "destination:/queue/" + getQueueName() + "\n" +
/////////////////////////////////////////////////////////////////////////
0:             "destination:/queue/" + getQueueName() + "\n" +
/////////////////////////////////////////////////////////////////////////
0:             "destination:/queue/" + getQueueName() + "\n" +
1:         sendMessage("first message");
/////////////////////////////////////////////////////////////////////////
0:             "destination:/queue/" + getQueueName() + "\n" +
1:         sendMessage("second message");
0:             System.out.println("Received frame: " + frame);
/////////////////////////////////////////////////////////////////////////
0:             "destination:/queue/" + getQueueName() + "\n" +
/////////////////////////////////////////////////////////////////////////
0:             "destination:/queue/" + getQueueName() + "\n" +
/////////////////////////////////////////////////////////////////////////
0:             "destination:/queue/" + getQueueName() + "\n" +
author:Brian McCallister
-------------------------------------------------------------------------------
commit:85df0e6
/////////////////////////////////////////////////////////////////////////
1:         assertFalse(Pattern.compile("type:\\s*null", Pattern.CASE_INSENSITIVE).matcher(frame).find());
commit:7d4cddd
/////////////////////////////////////////////////////////////////////////
0: import javax.jms.*;
/////////////////////////////////////////////////////////////////////////
0: import java.util.regex.Pattern;
0: import java.util.regex.Matcher;
/////////////////////////////////////////////////////////////////////////
0: 
0: 
/////////////////////////////////////////////////////////////////////////
0: 
/////////////////////////////////////////////////////////////////////////
0:         }
/////////////////////////////////////////////////////////////////////////
0:     public void sendBytesMessage(byte[] msg) throws Exception{
1:         MessageProducer producer = session.createProducer(queue);
1:         BytesMessage message = session.createBytesMessage();
1:         message.writeBytes(msg);
1:         producer.send(message);
0: 
0:     }
0: 
0: 
0: 
0: 
0: 
0: 
0: 
0:         String frame =
0:             "CONNECT\n" +
0:             "login: brianm\n" +
0: 
0: 
0: 
0: 
0: 
/////////////////////////////////////////////////////////////////////////
0: 
0: 
0:         String frame =
0:             "CONNECT\n" +
0:             "login: brianm\n" +
0: 
0: 
0: 
0: 
0: 
0: 
0: 
0:         String frame =
0:             "CONNECT\n" +
0:             "login: brianm\n" +
0: 
/////////////////////////////////////////////////////////////////////////
0: 
0: 
0: 
0:         String frame =
0:             "CONNECT\n" +
0:             "login: brianm\n" +
0: 
/////////////////////////////////////////////////////////////////////////
0: 
0: 
0: 
0: 
0: 
0: 
0: 
0: 
0:         frame =
0:             "DISCONNECT\n" +
0:             "\n\n"+
0:             Stomp.NULL;
0:         sendFrame(frame);
0:     }
0: 
0:         public void testSubscribeWithAutoAckAndBytesMessage() throws Exception {
0: 
0:         String frame =
0:             "CONNECT\n" +
0:             "login: brianm\n" +
0:             "passcode: wombats\n\n"+
0:             Stomp.NULL;
0:         sendFrame(frame);
0: 
0:         frame = receiveFrame(100000);
1:         assertTrue(frame.startsWith("CONNECTED"));
0: 
0:         frame =
0:             "SUBSCRIBE\n" +
0:             "destination:/queue/" + getQueueName() + "\n" +
0:             "ack:auto\n\n" +
0:             Stomp.NULL;
0:         sendFrame(frame);
0: 
0:         sendBytesMessage(new byte[] {1,2,3,4,5});
0: 
0:         frame = receiveFrame(10000);
1:         assertTrue(frame.startsWith("MESSAGE"));
0: 
1:         Pattern cl = Pattern.compile("Content-length:\\s*(\\d+)", Pattern.CASE_INSENSITIVE);
0:         Matcher cl_matcher = cl.matcher(frame);
0:         assertTrue(cl_matcher.find());
0:         assertEquals("5", cl_matcher.group(1));
0: 
0:         Pattern null_type_pattern = Pattern.compile("type:\\s*null", Pattern.CASE_INSENSITIVE);
0:         assertFalse(null_type_pattern.matcher(frame).find());
0: 
/////////////////////////////////////////////////////////////////////////
0: 
0: 
0: 
0: 
0: 
/////////////////////////////////////////////////////////////////////////
0: 
0: 
0: 
/////////////////////////////////////////////////////////////////////////
0: 
/////////////////////////////////////////////////////////////////////////
0: 
/////////////////////////////////////////////////////////////////////////
0: 
author:Nathan Christopher Mittler
-------------------------------------------------------------------------------
commit:021a2af
/////////////////////////////////////////////////////////////////////////
0:         String connect_frame = "CONNECT\n" + "login: brianm\n" + "passcode: wombats\n" + "request-id: 1\n" + "\n" + Stomp.NULL;
0:         assertTrue(f.contains("response-id:1"));
commit:e9e8fd1
/////////////////////////////////////////////////////////////////////////
0:         
1:         // Make sure that the timestamp is valid - should
1:         // be very close to the current time.
1:         long tnow = System.currentTimeMillis();
1:         long tmsg = message.getJMSTimestamp();
0:         assertTrue( Math.abs(tnow - tmsg) < 1000 );
author:Jonas B. Lim
-------------------------------------------------------------------------------
commit:01b50e9
/////////////////////////////////////////////////////////////////////////
0: 
0: 
/////////////////////////////////////////////////////////////////////////
0: 
0: 
1:     public void testMessagesAreInOrder() throws Exception {
1:         int ctr = 10;
1:         String[] data = new String[ctr];
0: 
0:         String frame =
0:                 "CONNECT\n" +
0:                 "login: brianm\n" +
0:                 "passcode: wombats\n\n" +
0:                 Stomp.NULL;
0:         sendFrame(frame);
0: 
0:         frame = receiveFrame(100000);
1:         assertTrue(frame.startsWith("CONNECTED"));
0: 
0:         frame =
0:                 "SUBSCRIBE\n" +
0:                 "destination:/queue/" + getQueueName() + "\n" +
0:                 "ack:auto\n\n" +
0:                 Stomp.NULL;
0:         sendFrame(frame);
0: 
1:         for (int i = 0; i < ctr; ++i) {
1:             data[i] = getName() + i;
1:             sendMessage(data[i]);
0:         }
0: 
1:         for (int i = 0; i < ctr; ++i) {
0:             frame = receiveFrame(1000);
0:             assertTrue("Message not in order", frame.indexOf(data[i]) >=0 );
0:         }
0: 
1:         // sleep a while before publishing another set of messages
0:         waitForFrameToTakeEffect();
0: 
1:         for (int i = 0; i < ctr; ++i) {
1:             data[i] = getName() + ":second:" + i;
1:             sendMessage(data[i]);
0:         }
0: 
1:         for (int i = 0; i < ctr; ++i) {
0:             frame = receiveFrame(1000);
0:             assertTrue("Message not in order", frame.indexOf(data[i]) >=0 );
0:         }
0: 
0:         frame =
0:                 "DISCONNECT\n" +
0:                 "\n\n" +
0:                 Stomp.NULL;
0:         sendFrame(frame);
0:     }
0: 
commit:3777809
/////////////////////////////////////////////////////////////////////////
0: import java.net.SocketTimeoutException;
0: 
0: import javax.jms.*;
0: import org.apache.activemq.broker.region.policy.SimpleDispatchPolicy;
0: import org.apache.activemq.broker.region.policy.PolicyEntry;
0: import org.apache.activemq.broker.region.policy.RoundRobinDispatchPolicy;
0: import org.apache.activemq.broker.region.policy.PolicyMap;
/////////////////////////////////////////////////////////////////////////
0: 
/////////////////////////////////////////////////////////////////////////
0: 
0: 
/////////////////////////////////////////////////////////////////////////
0: 
1:     public void sendMessage(String msg) throws Exception {
0: 
0:         MessageProducer producer = session.createProducer(queue);
1:         TextMessage message = session.createTextMessage(msg);
0:         producer.send(message);
0: 
0:     }
0: 
0:           
/////////////////////////////////////////////////////////////////////////
0: 
0:         frame =
0:             "SEND\n" +
0:             "destination:/queue/TEST\n\n" +
0:             "Hello World" +
0: 
0: 
0: 
0: 
0: 
0: 
0:         String frame =
0:             "CONNECT\n" +
0:             "login: brianm\n" +
0: 
0:         frame = receiveFrame(100000);
0: 
0:         frame =
0:             "SUBSCRIBE\n" +
0:             "ack:auto\n\n" +
0:         sendMessage(getName());
0: 
0: 
0:        frame =
0:             "DISCONNECT\n" +
0:             "\n\n"+
0:             Stomp.NULL;
0:        sendFrame(frame);
0: 
0: 
0: 
0: 
1:     public void testSubscribeWithClientAck() throws Exception {
0: 
0:        String frame =
0:             "CONNECT\n" +
0:             "login: brianm\n" +
0:             "passcode: wombats\n\n"+
0:             Stomp.NULL;
0:        sendFrame(frame);
0: 
0:        frame = receiveFrame(10000);
1:        assertTrue(frame.startsWith("CONNECTED"));
0: 
0: 
0:        frame =
0:             "SUBSCRIBE\n" +
0:             "destination:/queue/TEST\n" +
0:             "ack:client\n\n"+
0:             Stomp.NULL;
0: 
0: 
0:        sendFrame(frame);
0:        sendMessage(getName());
0:        frame = receiveFrame(10000);
1:        assertTrue(frame.startsWith("MESSAGE"));
0: 
0:        frame =
0:             "DISCONNECT\n" +
0:             "\n\n"+
0:             Stomp.NULL;
0:        sendFrame(frame);
0: 
0:        // message should be received since message was not acknowledged
0:        MessageConsumer consumer = session.createConsumer(queue);
0:        TextMessage message = (TextMessage) consumer.receive(1000);
1:        assertNotNull(message);
0:        assertTrue(message.getJMSRedelivered());
0: 
0: 
0: 
0:     }
0: 
1:     public void testUnsubscribe() throws Exception {
0: 
0:         String frame =
0:             "CONNECT\n" +
0:             "login: brianm\n" +
0:             "passcode: wombats\n\n"+
0:             Stomp.NULL;
0:         sendFrame(frame);
0:         frame = receiveFrame(100000);
1:         assertTrue(frame.startsWith("CONNECTED"));
0: 
0:         frame =
0:             "SUBSCRIBE\n" +
0:             "destination:/queue/TEST\n" +
0:             "ack:auto\n\n" +
0:             Stomp.NULL;
0:         sendFrame(frame);
0: 
0:         //send a message to our queue
0:         sendMessage(getName());
0: 
0: 
0:         //receive message from socket
0:         frame = receiveFrame(10000);
1:         assertTrue(frame.startsWith("MESSAGE"));
0: 
0:         //remove suscription
0:         frame =
0:             "UNSUBSCRIBE\n" +
0:             "destination:/queue/TEST\n" +
0:             "\n\n" +
0:             Stomp.NULL;
0:                 sendFrame(frame);
0: 
0:         //send a message to our queue
0:         sendMessage(getName());
0: 
0: 
0:         try {
0:             frame = receiveFrame(1000);
1:             fail("No message should have been received since subscription was removed");
0:         }catch (SocketTimeoutException e){
0: 
0:         }
0: 
0:     }
0: 
0: 
1:     public void testTransactionCommit() throws Exception {
0:         String frame =
0:             "CONNECT\n" +
0:             "login: brianm\n" +
0:             "passcode: wombats\n\n"+
0:             Stomp.NULL;
0:         sendFrame(frame);
0: 
0:         String f = receiveFrame(1000);
1:         assertTrue(f.startsWith("CONNECTED"));
0: 
0:         frame =
0:             "BEGIN\n" +
0:             "transaction: tx1\n" +
0:             "\n\n" +
0:             Stomp.NULL;
0:         sendFrame(frame);
0: 
0:         frame =
0:             "SEND\n" +
0:             "destination:/queue/TEST\n" +
0:             "transaction: tx1\n" +
0:             "\n\n" +
0:             "Hello World" +
0:             Stomp.NULL;
0:         sendFrame(frame);
0: 
0: 
0:         frame =
0:             "COMMIT\n" +
0:             "transaction: tx1\n" +
0:             "\n\n" +
0:             Stomp.NULL;
0:         sendFrame(frame);
0: 
0:         // This test case is currently failing
0: 
0:         MessageConsumer consumer = session.createConsumer(queue);
0:         TextMessage message = (TextMessage) consumer.receive(1000);
1:         assertNotNull(message);
0: 
0: 
0:     }
0: 
1:     public void testTransactionRollback() throws Exception {
0:         String frame =
0:             "CONNECT\n" +
0:             "login: brianm\n" +
0:             "passcode: wombats\n\n"+
0:             Stomp.NULL;
0:         sendFrame(frame);
0: 
0:         String f = receiveFrame(1000);
1:         assertTrue(f.startsWith("CONNECTED"));
0: 
0:         frame =
0:             "BEGIN\n" +
0:             "transaction: tx1\n" +
0:             "\n\n" +
0:             Stomp.NULL;
0:         sendFrame(frame);
0: 
0:         frame =
0:             "SEND\n" +
0:             "destination:/queue/TEST\n" +
0:             "transaction: tx1\n" +
0:             "\n\n" +
0:             "first message" +
0:             Stomp.NULL;
0:         sendFrame(frame);
0: 
0:         //rollback first message
0:         frame =
0:             "ABORT\n" +
0:             "transaction: tx1\n" +
0:             "\n\n" +
0:             Stomp.NULL;
0:         sendFrame(frame);
0: 
0:         frame =
0:             "SEND\n" +
0:             "destination:/queue/TEST\n" +
0:             "transaction: tx1\n" +
0:             "\n\n" +
0:             "second message" +
0:             Stomp.NULL;
0:         sendFrame(frame);
0: 
0:         frame =
0:             "COMMIT\n" +
0:             "transaction: tx1\n" +
0:             "\n\n" +
0:             Stomp.NULL;
0:         sendFrame(frame);
0: 
0:         // This test case is currently failing
0: 
0:         //only second msg should be received since first msg was rolled back
0:         MessageConsumer consumer = session.createConsumer(queue);
0:         TextMessage message = (TextMessage) consumer.receive(1000);
1:         assertNotNull(message);
0:         assertEquals("second message", message.getText());
0: 
0: 
0:     }
0: 
0: 
0: 
0: 
============================================================================