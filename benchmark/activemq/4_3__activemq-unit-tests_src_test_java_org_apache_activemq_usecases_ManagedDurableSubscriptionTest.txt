1:370d56e: /**
1:370d56e:  * Licensed to the Apache Software Foundation (ASF) under one or more
1:370d56e:  * contributor license agreements.  See the NOTICE file distributed with
1:370d56e:  * this work for additional information regarding copyright ownership.
1:370d56e:  * The ASF licenses this file to You under the Apache License, Version 2.0
1:370d56e:  * (the "License"); you may not use this file except in compliance with
1:370d56e:  * the License.  You may obtain a copy of the License at
1:370d56e:  *
1:370d56e:  *      http://www.apache.org/licenses/LICENSE-2.0
1:370d56e:  *
1:370d56e:  * Unless required by applicable law or agreed to in writing, software
1:370d56e:  * distributed under the License is distributed on an "AS IS" BASIS,
1:370d56e:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:370d56e:  * See the License for the specific language governing permissions and
1:370d56e:  * limitations under the License.
1:370d56e:  */
1:370d56e: package org.apache.activemq.usecases;
1:370d56e: 
1:370d56e: import java.io.File;
1:370d56e: 
1:370d56e: import javax.jms.Connection;
1:370d56e: import javax.jms.Session;
1:370d56e: import javax.management.ObjectName;
1:370d56e: 
1:370d56e: import org.apache.activemq.ActiveMQConnectionFactory;
1:370d56e: import org.apache.activemq.broker.BrokerFactory;
1:370d56e: import org.apache.activemq.broker.BrokerService;
1:370d56e: import org.apache.activemq.command.ActiveMQTopic;
1:b2fca26: import org.apache.activemq.leveldb.LevelDBStore;
1:370d56e: 
1:370d56e: public class ManagedDurableSubscriptionTest extends org.apache.activemq.TestSupport {
1:370d56e: 
1:370d56e:     BrokerService broker = null;
1:370d56e:     Connection connection = null;
1:370d56e:     ActiveMQTopic topic;
1:370d56e: 
1:370d56e:     public void testJMXSubscriptions() throws Exception {
1:370d56e:         // create durable subscription
1:370d56e:         Session session = connection.createSession(false, Session.AUTO_ACKNOWLEDGE);
1:370d56e:         session.createDurableSubscriber(topic, "SubsId");
1:370d56e:         session.close();
1:370d56e: 
1:370d56e:         // restart the broker
1:370d56e:         stopBroker();
1:370d56e:         startBroker();
1:370d56e: 
1:4fc1712:         ObjectName inactiveSubscriptionObjectName = broker.getAdminView().getInactiveDurableTopicSubscribers()[0];
1:370d56e: 
1:7a7b380:         Object inactive = broker.getManagementContext().getAttribute(inactiveSubscriptionObjectName, "Active");
1:4fc1712:         assertTrue("Subscription is active.", Boolean.FALSE.equals(inactive));
1:370d56e: 
1:370d56e:         // activate
1:370d56e:         session = connection.createSession(false, Session.AUTO_ACKNOWLEDGE);
1:370d56e:         session.createDurableSubscriber(topic, "SubsId");
1:370d56e: 
1:4fc1712:         ObjectName activeSubscriptionObjectName = broker.getAdminView().getDurableTopicSubscribers()[0];
1:4fc1712: 
1:7a7b380:         Object active = broker.getManagementContext().getAttribute(activeSubscriptionObjectName, "Active");
1:370d56e:         assertTrue("Subscription is INactive.", Boolean.TRUE.equals(active));
1:370d56e: 
1:370d56e:         // deactivate
1:370d56e:         connection.close();
1:370d56e:         connection = null;
1:370d56e: 
1:7a7b380:         inactive = broker.getManagementContext().getAttribute(inactiveSubscriptionObjectName, "Active");
1:4fc1712:         assertTrue("Subscription is active.", Boolean.FALSE.equals(inactive));
1:370d56e: 
1:370d56e:     }
1:370d56e: 
1:370d56e:     private void startBroker() throws Exception {
1:370d56e:         broker = BrokerFactory.createBroker("broker:(vm://localhost)");
1:370d56e:         broker.setKeepDurableSubsActive(false);
1:370d56e:         broker.setPersistent(true);
1:b2fca26:         LevelDBStore persistenceAdapter = new LevelDBStore();
1:370d56e:         persistenceAdapter.setDirectory(new File("activemq-data/" + getName()));
1:370d56e:         broker.setPersistenceAdapter(persistenceAdapter);
1:370d56e:         broker.setUseJmx(true);
1:7f002de:         broker.getManagementContext().setCreateConnector(false);
1:370d56e:         broker.setBrokerName(getName());
1:370d56e:         broker.start();
1:370d56e: 
1:370d56e:         connection = createConnection();
1:370d56e:     }
1:370d56e: 
1:370d56e:     private void stopBroker() throws Exception {
1:370d56e:         if (connection != null)
1:370d56e:             connection.close();
1:370d56e:         connection = null;
1:370d56e:         if (broker != null)
1:370d56e:             broker.stop();
1:370d56e:         broker = null;
1:370d56e:     }
1:370d56e: 
1:370d56e:     protected ActiveMQConnectionFactory createConnectionFactory() throws Exception {
1:370d56e:         return new ActiveMQConnectionFactory("vm://" + getName() + "?waitForStart=5000&create=false");
1:370d56e:     }
1:370d56e: 
1:370d56e:     @Override
1:370d56e:     protected void setUp() throws Exception {
1:370d56e:         super.setUp();
1:370d56e: 
1:370d56e:         topic = (ActiveMQTopic) createDestination();
1:370d56e:         startBroker();
1:370d56e:     }
1:370d56e: 
1:370d56e:     @Override
1:370d56e:     protected void tearDown() throws Exception {
1:370d56e:         stopBroker();
1:370d56e:         super.tearDown();
1:370d56e:     }
1:370d56e: 
1:370d56e:     @Override
1:370d56e:     protected Connection createConnection() throws Exception {
1:370d56e:         Connection rc = super.createConnection();
1:370d56e:         rc.setClientID(getName());
1:370d56e:         rc.start();
1:370d56e:         return rc;
1:370d56e:     }
1:370d56e: }
============================================================================
author:Hiram R. Chirino
-------------------------------------------------------------------------------
commit:b2fca26
/////////////////////////////////////////////////////////////////////////
1: import org.apache.activemq.leveldb.LevelDBStore;
/////////////////////////////////////////////////////////////////////////
1:         LevelDBStore persistenceAdapter = new LevelDBStore();
author:Timothy A. Bish
-------------------------------------------------------------------------------
commit:ef24cc9
author:Gary Tully
-------------------------------------------------------------------------------
commit:7f002de
/////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////
1:         broker.getManagementContext().setCreateConnector(false);
commit:7a7b380
/////////////////////////////////////////////////////////////////////////
1:         Object inactive = broker.getManagementContext().getAttribute(inactiveSubscriptionObjectName, "Active");
/////////////////////////////////////////////////////////////////////////
1:         Object active = broker.getManagementContext().getAttribute(activeSubscriptionObjectName, "Active");
1:         inactive = broker.getManagementContext().getAttribute(inactiveSubscriptionObjectName, "Active");
author:Bosanac Dejan
-------------------------------------------------------------------------------
commit:4fc1712
/////////////////////////////////////////////////////////////////////////
1:         ObjectName inactiveSubscriptionObjectName = broker.getAdminView().getInactiveDurableTopicSubscribers()[0];
0:         Object inactive = mbs.getAttribute(inactiveSubscriptionObjectName, "Active");
1:         assertTrue("Subscription is active.", Boolean.FALSE.equals(inactive));
1:         ObjectName activeSubscriptionObjectName = broker.getAdminView().getDurableTopicSubscribers()[0];
1: 
0:         Object active = mbs.getAttribute(activeSubscriptionObjectName, "Active");
0:         inactive = mbs.getAttribute(inactiveSubscriptionObjectName, "Active");
1:         assertTrue("Subscription is active.", Boolean.FALSE.equals(inactive));
commit:370d56e
/////////////////////////////////////////////////////////////////////////
1: /**
1:  * Licensed to the Apache Software Foundation (ASF) under one or more
1:  * contributor license agreements.  See the NOTICE file distributed with
1:  * this work for additional information regarding copyright ownership.
1:  * The ASF licenses this file to You under the Apache License, Version 2.0
1:  * (the "License"); you may not use this file except in compliance with
1:  * the License.  You may obtain a copy of the License at
1:  *
1:  *      http://www.apache.org/licenses/LICENSE-2.0
1:  *
1:  * Unless required by applicable law or agreed to in writing, software
1:  * distributed under the License is distributed on an "AS IS" BASIS,
1:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:  * See the License for the specific language governing permissions and
1:  * limitations under the License.
1:  */
1: package org.apache.activemq.usecases;
1: 
1: import java.io.File;
0: import java.lang.management.ManagementFactory;
1: 
1: import javax.jms.Connection;
1: import javax.jms.Session;
0: import javax.management.MBeanServer;
1: import javax.management.ObjectName;
1: 
1: import org.apache.activemq.ActiveMQConnectionFactory;
1: import org.apache.activemq.broker.BrokerFactory;
1: import org.apache.activemq.broker.BrokerService;
1: import org.apache.activemq.command.ActiveMQTopic;
0: import org.apache.activemq.store.kahadaptor.KahaPersistenceAdapter;
1: 
1: public class ManagedDurableSubscriptionTest extends org.apache.activemq.TestSupport {
1: 
1:     BrokerService broker = null;
1:     Connection connection = null;
1:     ActiveMQTopic topic;
1: 
1:     public void testJMXSubscriptions() throws Exception {
1:         // create durable subscription
1:         Session session = connection.createSession(false, Session.AUTO_ACKNOWLEDGE);
1:         session.createDurableSubscriber(topic, "SubsId");
1:         session.close();
1: 
1:         // restart the broker
1:         stopBroker();
1:         startBroker();
1: 
0:         MBeanServer mbs = ManagementFactory.getPlatformMBeanServer();
0:         ObjectName subscriptionObjectName = broker.getAdminView().getDurableTopicSubscribers()[0];
1: 
0:         Object active = mbs.getAttribute(subscriptionObjectName, "Active");
0:         assertTrue("Subscription is active.", Boolean.FALSE.equals(active));
1: 
1:         // activate
1:         session = connection.createSession(false, Session.AUTO_ACKNOWLEDGE);
1:         session.createDurableSubscriber(topic, "SubsId");
1: 
0:         active = mbs.getAttribute(subscriptionObjectName, "Active");
1:         assertTrue("Subscription is INactive.", Boolean.TRUE.equals(active));
1: 
1:         // deactivate
1:         connection.close();
1:         connection = null;
1: 
0:         active = mbs.getAttribute(subscriptionObjectName, "Active");
0:         assertTrue("Subscription is active.", Boolean.FALSE.equals(active));
1: 
1:     }
1: 
1:     private void startBroker() throws Exception {
1:         broker = BrokerFactory.createBroker("broker:(vm://localhost)");
1:         broker.setKeepDurableSubsActive(false);
1:         broker.setPersistent(true);
0:         KahaPersistenceAdapter persistenceAdapter = new KahaPersistenceAdapter();
1:         persistenceAdapter.setDirectory(new File("activemq-data/" + getName()));
1:         broker.setPersistenceAdapter(persistenceAdapter);
1:         broker.setUseJmx(true);
1:         broker.setBrokerName(getName());
1:         broker.start();
1: 
1:         connection = createConnection();
1:     }
1: 
1:     private void stopBroker() throws Exception {
1:         if (connection != null)
1:             connection.close();
1:         connection = null;
1:         if (broker != null)
1:             broker.stop();
1:         broker = null;
1:     }
1: 
1:     protected ActiveMQConnectionFactory createConnectionFactory() throws Exception {
1:         return new ActiveMQConnectionFactory("vm://" + getName() + "?waitForStart=5000&create=false");
1:     }
1: 
1:     @Override
1:     protected void setUp() throws Exception {
1:         super.setUp();
1: 
1:         topic = (ActiveMQTopic) createDestination();
1:         startBroker();
1:     }
1: 
1:     @Override
1:     protected void tearDown() throws Exception {
1:         stopBroker();
1:         super.tearDown();
1:     }
1: 
1:     @Override
1:     protected Connection createConnection() throws Exception {
1:         Connection rc = super.createConnection();
1:         rc.setClientID(getName());
1:         rc.start();
1:         return rc;
1:     }
1: }
============================================================================