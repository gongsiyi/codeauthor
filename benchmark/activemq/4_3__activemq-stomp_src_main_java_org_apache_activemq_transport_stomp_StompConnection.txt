1:1ab2f59: /**
1:1ab2f59:  * Licensed to the Apache Software Foundation (ASF) under one or more
1:1ab2f59:  * contributor license agreements.  See the NOTICE file distributed with
1:1ab2f59:  * this work for additional information regarding copyright ownership.
1:1ab2f59:  * The ASF licenses this file to You under the Apache License, Version 2.0
1:1ab2f59:  * (the "License"); you may not use this file except in compliance with
1:1ab2f59:  * the License.  You may obtain a copy of the License at
1:1ab2f59:  *
1:1ab2f59:  *      http://www.apache.org/licenses/LICENSE-2.0
1:1ab2f59:  *
1:1ab2f59:  * Unless required by applicable law or agreed to in writing, software
1:1ab2f59:  * distributed under the License is distributed on an "AS IS" BASIS,
1:1ab2f59:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:1ab2f59:  * See the License for the specific language governing permissions and
1:1ab2f59:  * limitations under the License.
1:1ab2f59:  */
1:d8bdf5b: 
1:1ab2f59: package org.apache.activemq.transport.stomp;
29:1ab2f59: 
1:1ab2f59: import java.io.ByteArrayOutputStream;
1:1ab2f59: import java.io.DataInputStream;
1:1ab2f59: import java.io.IOException;
1:1ab2f59: import java.io.InputStream;
1:1ab2f59: import java.io.OutputStream;
1:1ab2f59: import java.net.Socket;
1:1ab2f59: import java.net.UnknownHostException;
1:1ab2f59: import java.util.HashMap;
1:1ab2f59: 
1:1ab2f59: public class StompConnection {
1:1ab2f59: 
1:1ab2f59:     public static final long RECEIVE_TIMEOUT = 10000;
1:1ab2f59: 
1:1ab2f59:     private Socket stompSocket;
1:1ab2f59:     private ByteArrayOutputStream inputBuffer = new ByteArrayOutputStream();
1:a54fa4b:     private String version = Stomp.DEFAULT_VERSION;
1:8fd00fa: 
1:1ab2f59:     public void open(String host, int port) throws IOException, UnknownHostException {
1:1ab2f59:         open(new Socket(host, port));
35:1ab2f59:     }
1:8fd00fa: 
1:1ab2f59:     public void open(Socket socket) {
1:d618ab3:         stompSocket = socket;
1:0885c60:     }
1:690b7bc: 
1:1ab2f59:     public void close() throws IOException {
1:1ab2f59:         if (stompSocket != null) {
1:1ab2f59:             stompSocket.close();
1:1ab2f59:             stompSocket = null;
1:8fd00fa:         }
1:8fd00fa:     }
1:7aec12e: 
1:1ab2f59:     public void sendFrame(String data) throws Exception {
1:1ab2f59:         byte[] bytes = data.getBytes("UTF-8");
1:1ab2f59:         OutputStream outputStream = stompSocket.getOutputStream();
1:1ab2f59:         outputStream.write(bytes);
1:584d52c:         outputStream.flush();
1:a54fa4b:     }
1:8fd00fa: 
1:584d52c:     public void sendFrame(String frame, byte[] data) throws Exception {
1:584d52c:         byte[] bytes = frame.getBytes("UTF-8");
1:584d52c:         OutputStream outputStream = stompSocket.getOutputStream();
1:584d52c:         outputStream.write(bytes);
1:584d52c:         outputStream.write(data);
1:8fd00fa:         outputStream.flush();
1:584d52c:     }
1:8fd00fa: 
1:1ab2f59:     public StompFrame receive() throws Exception {
1:1ab2f59:         return receive(RECEIVE_TIMEOUT);
1:8fd00fa:     }
1:8fd00fa: 
1:1ab2f59:     public StompFrame receive(long timeOut) throws Exception {
1:d618ab3:         stompSocket.setSoTimeout((int)timeOut);
1:d618ab3:         InputStream is = stompSocket.getInputStream();
1:1ab2f59:         StompWireFormat wf = new StompWireFormat();
1:a54fa4b:         wf.setStompVersion(version);
1:1ab2f59:         DataInputStream dis = new DataInputStream(is);
1:1ab2f59:         return (StompFrame)wf.unmarshal(dis);
1:a15e6ef:     }
1:584d52c: 
1:1ab2f59:     public String receiveFrame() throws Exception {
1:1ab2f59:         return receiveFrame(RECEIVE_TIMEOUT);
1:a15e6ef:     }
1:1ab2f59: 
1:1ab2f59:     public String receiveFrame(long timeOut) throws Exception {
1:0885c60:         stompSocket.setSoTimeout((int)timeOut);
1:0885c60:         InputStream is = stompSocket.getInputStream();
1:1ab2f59:         int c = 0;
1:1ab2f59:         for (;;) {
1:1ab2f59:             c = is.read();
1:1ab2f59:             if (c < 0) {
1:1ab2f59:                 throw new IOException("socket closed.");
1:1ab2f59:             } else if (c == 0) {
1:1ab2f59:                 c = is.read();
1:2189100:                 if (c == '\n') {
1:2189100:                     // end of frame
1:2189100:                     return stringFromBuffer(inputBuffer);
1:2189100:                 } else {
1:2189100:                     inputBuffer.write(0);
1:2189100:                     inputBuffer.write(c);
1:690b7bc:                 }
1:1ab2f59:             } else {
1:1ab2f59:                 inputBuffer.write(c);
1:7aec12e:             }
1:1ab2f59:         }
1:1ab2f59:     }
1:1ab2f59: 
1:d618ab3:     private String stringFromBuffer(ByteArrayOutputStream inputBuffer) throws Exception {
1:d618ab3:         byte[] ba = inputBuffer.toByteArray();
1:2189100:         inputBuffer.reset();
1:2189100:         return new String(ba, "UTF-8");
1:2189100:     }
1:2189100: 
1:2189100:     public Socket getStompSocket() {
1:d618ab3:         return stompSocket;
1:d618ab3:     }
1:8fd00fa: 
1:d618ab3:     public void setStompSocket(Socket stompSocket) {
1:d618ab3:         this.stompSocket = stompSocket;
1:d618ab3:     }
1:8fd00fa: 
1:1ab2f59:     public void connect(String username, String password) throws Exception {
1:690b7bc:         connect(username, password, null);
1:0885c60:     }
1:8fd00fa: 
1:690b7bc:     public void connect(String username, String password, String client) throws Exception {
5:0885c60:         HashMap<String, String> headers = new HashMap<String, String>();
1:d618ab3:         headers.put("login", username);
1:d618ab3:         headers.put("passcode", password);
1:d618ab3:         if (client != null) {
1:d618ab3:             headers.put("client-id", client);
1:d618ab3:         }
1:bc45bf8:         connect(headers);
1:bc45bf8:     }
1:bc45bf8: 
1:bc45bf8:     public void connect(HashMap<String, String> headers) throws Exception {
1:d618ab3:         StompFrame frame = new StompFrame("CONNECT", headers);
1:d618ab3:         sendFrame(frame.format());
1:8fd00fa: 
1:d8bdf5b:         StompFrame connect = receive();
1:d8bdf5b:         if (!connect.getAction().equals(Stomp.Responses.CONNECTED)) {
1:d618ab3:             throw new Exception ("Not connected: " + connect.getBody());
1:0885c60:         }
1:8fd00fa:     }
1:8fd00fa: 
1:1ab2f59:     public void disconnect() throws Exception {
1:1e18cf2:         disconnect(null);
1:1e18cf2:     }
1:1e18cf2: 
1:1e18cf2:     public void disconnect(String receiptId) throws Exception {
1:d618ab3:         StompFrame frame = new StompFrame("DISCONNECT");
1:1e18cf2:         if (receiptId != null && !receiptId.isEmpty()) {
1:1e18cf2:             frame.getHeaders().put(Stomp.Headers.RECEIPT_REQUESTED, receiptId);
1:1e18cf2:         }
1:d618ab3:         sendFrame(frame.format());
1:8fd00fa:     }
1:8fd00fa: 
1:1ab2f59:     public void send(String destination, String message) throws Exception {
1:d618ab3:         send(destination, message, null, null);
1:8fd00fa:     }
1:8fd00fa: 
1:7aec12e:     public void send(String destination, String message, String transaction, HashMap<String, String> headers) throws Exception {
1:d618ab3:         if (headers == null) {
1:d618ab3:             headers = new HashMap<String, String>();
1:d618ab3:         }
1:d618ab3:         headers.put("destination", destination);
1:d618ab3:         if (transaction != null) {
1:d618ab3:             headers.put("transaction", transaction);
1:d618ab3:         }
1:d618ab3:         StompFrame frame = new StompFrame("SEND", headers, message.getBytes());
1:d618ab3:         sendFrame(frame.format());
1:0885c60:     }
1:8fd00fa: 
1:1ab2f59:     public void subscribe(String destination) throws Exception {
1:d618ab3:         subscribe(destination, null, null);
1:0885c60:     }
1:8fd00fa: 
1:1ab2f59:     public void subscribe(String destination, String ack) throws Exception {
1:d618ab3:         subscribe(destination, ack, new HashMap<String, String>());
1:0885c60:     }
1:8fd00fa: 
1:1ab2f59:     public void subscribe(String destination, String ack, HashMap<String, String> headers) throws Exception {
1:d618ab3:         if (headers == null) {
1:d618ab3:             headers = new HashMap<String, String>();
1:d618ab3:         }
1:d618ab3:         headers.put("destination", destination);
1:d618ab3:         if (ack != null) {
1:d618ab3:             headers.put("ack", ack);
1:d618ab3:         }
1:d618ab3:         StompFrame frame = new StompFrame("SUBSCRIBE", headers);
1:d618ab3:         sendFrame(frame.format());
1:0885c60:     }
1:8fd00fa: 
1:1ab2f59:     public void unsubscribe(String destination) throws Exception {
1:d618ab3:         unsubscribe(destination, null);
1:0885c60:     }
1:0885c60: 
1:1ab2f59:     public void unsubscribe(String destination, HashMap<String, String> headers) throws Exception {
1:d618ab3:         if (headers == null) {
1:d618ab3:             headers = new HashMap<String, String>();
1:d618ab3:         }
1:d618ab3:         headers.put("destination", destination);
1:d618ab3:         StompFrame frame = new StompFrame("UNSUBSCRIBE", headers);
1:d618ab3:         sendFrame(frame.format());
1:d618ab3:     }
1:d618ab3: 
1:1ab2f59:     public void begin(String transaction) throws Exception {
1:d618ab3:         HashMap<String, String> headers = new HashMap<String, String>();
1:d618ab3:         headers.put("transaction", transaction);
1:d618ab3:         StompFrame frame = new StompFrame("BEGIN", headers);
1:d618ab3:         sendFrame(frame.format());
1:0885c60:     }
1:8fd00fa: 
1:1ab2f59:     public void abort(String transaction) throws Exception {
1:d618ab3:         HashMap<String, String> headers = new HashMap<String, String>();
1:d618ab3:         headers.put("transaction", transaction);
1:d618ab3:         StompFrame frame = new StompFrame("ABORT", headers);
1:d618ab3:         sendFrame(frame.format());
1:8fd00fa:     }
1:8fd00fa: 
1:1ab2f59:     public void commit(String transaction) throws Exception {
1:d618ab3:         HashMap<String, String> headers = new HashMap<String, String>();
1:d618ab3:         headers.put("transaction", transaction);
1:d618ab3:         StompFrame frame = new StompFrame("COMMIT", headers);
1:d618ab3:         sendFrame(frame.format());
1:8fd00fa:     }
1:8fd00fa: 
1:1ab2f59:     public void ack(StompFrame frame) throws Exception {
1:d618ab3:         ack(frame.getHeaders().get("message-id"), null);
1:8fd00fa:     }
1:8fd00fa: 
1:1ab2f59:     public void ack(StompFrame frame, String transaction) throws Exception {
1:d618ab3:         ack(frame.getHeaders().get("message-id"), transaction);
1:8fd00fa:     }
1:8fd00fa: 
1:1ab2f59:     public void ack(String messageId) throws Exception {
1:d618ab3:         ack(messageId, null);
1:8fd00fa:     }
1:8fd00fa: 
1:1ab2f59:     public void ack(String messageId, String transaction) throws Exception {
1:d618ab3:         HashMap<String, String> headers = new HashMap<String, String>();
1:d618ab3:         headers.put("message-id", messageId);
1:d618ab3:         if (transaction != null)
1:d618ab3:             headers.put("transaction", transaction);
1:d618ab3:         StompFrame frame = new StompFrame("ACK", headers);
1:d618ab3:         sendFrame(frame.format());
1:690b7bc:     }
1:8fd00fa: 
1:79127ae:     public void keepAlive() throws Exception {
1:79127ae:         OutputStream outputStream = stompSocket.getOutputStream();
1:79127ae:         outputStream.write('\n');
1:79127ae:         outputStream.flush();
1:79127ae:     }
1:79127ae: 
1:1ab2f59:     protected String appendHeaders(HashMap<String, Object> headers) {
1:0885c60:         StringBuilder result = new StringBuilder();
1:d618ab3:         for (String key : headers.keySet()) {
1:d618ab3:             result.append(key + ":" + headers.get(key) + "\n");
1:d618ab3:         }
1:d618ab3:         result.append("\n");
1:d618ab3:         return result.toString();
1:0885c60:     }
1:8fd00fa: 
1:a54fa4b:     public String getVersion() {
1:a54fa4b:         return version;
1:8fd00fa:     }
1:a54fa4b: 
1:a54fa4b:     public void setVersion(String version) {
1:a54fa4b:         this.version = version;
1:a54fa4b:     }
1:d8bdf5b: }
============================================================================
author:Gary Tully
-------------------------------------------------------------------------------
commit:bc45bf8
/////////////////////////////////////////////////////////////////////////
1:         connect(headers);
1:     }
1: 
1:     public void connect(HashMap<String, String> headers) throws Exception {
commit:93a379f
/////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////
commit:d618ab3
/////////////////////////////////////////////////////////////////////////
1:     	stompSocket = socket;
/////////////////////////////////////////////////////////////////////////
1:     	stompSocket.setSoTimeout((int)timeOut);
1:     	InputStream is = stompSocket.getInputStream();
/////////////////////////////////////////////////////////////////////////
1: 	private String stringFromBuffer(ByteArrayOutputStream inputBuffer) throws Exception {
1: 	    byte[] ba = inputBuffer.toByteArray();
1: 		return stompSocket;
1: 	}
1: 	public void setStompSocket(Socket stompSocket) {
1: 		this.stompSocket = stompSocket;
1: 	}
0:     	HashMap<String, String> headers = new HashMap();
1:     	headers.put("login", username);
1:     	headers.put("passcode", password);
1:     	if (client != null) {
1:     		headers.put("client-id", client);
1:     	}
1:     	StompFrame frame = new StompFrame("CONNECT", headers);
1:         sendFrame(frame.format());
1:         	throw new Exception ("Not connected: " + connect.getBody());
1:     	StompFrame frame = new StompFrame("DISCONNECT");
1:         sendFrame(frame.format());
1:     	send(destination, message, null, null);
1:     	if (headers == null) {
1:     		headers = new HashMap<String, String>();
1:     	}
1:     	headers.put("destination", destination);
1:     	if (transaction != null) {
1:     		headers.put("transaction", transaction);
1:     	}
1:     	StompFrame frame = new StompFrame("SEND", headers, message.getBytes());
1:         sendFrame(frame.format());
1:     	subscribe(destination, null, null);
1:     	subscribe(destination, ack, new HashMap<String, String>());
1: 		if (headers == null) {
1: 			headers = new HashMap<String, String>();
1: 		}
1: 		headers.put("destination", destination);
1:     	if (ack != null) {
1:     		headers.put("ack", ack);
1:     	}
1:     	StompFrame frame = new StompFrame("SUBSCRIBE", headers);
1:         sendFrame(frame.format());
1:     	unsubscribe(destination, null);
1: 		if (headers == null) {
1: 			headers = new HashMap<String, String>();
1: 		}
1: 		headers.put("destination", destination);
1:     	StompFrame frame = new StompFrame("UNSUBSCRIBE", headers);
1:         sendFrame(frame.format());
1:     }    
1:     
1:     	HashMap<String, String> headers = new HashMap<String, String>();
1:     	headers.put("transaction", transaction);
1:     	StompFrame frame = new StompFrame("BEGIN", headers);
1:     	sendFrame(frame.format());
1:     	HashMap<String, String> headers = new HashMap<String, String>();
1:     	headers.put("transaction", transaction);
1:     	StompFrame frame = new StompFrame("ABORT", headers);
1:     	sendFrame(frame.format());
1:     	HashMap<String, String> headers = new HashMap<String, String>();
1:     	headers.put("transaction", transaction);
1:     	StompFrame frame = new StompFrame("COMMIT", headers);
1:     	sendFrame(frame.format());
1:     	ack(frame.getHeaders().get("message-id"), null);
1:     	ack(frame.getHeaders().get("message-id"), transaction);
1:     	ack(messageId, null);
1:     	HashMap<String, String> headers = new HashMap<String, String>();
1:     	headers.put("message-id", messageId);
1:     	if (transaction != null)
1:     		headers.put("transaction", transaction);
1:     	StompFrame frame = new StompFrame("ACK", headers);
1:     	sendFrame(frame.format());
0:     	StringBuffer result = new StringBuffer();
1:     	for (String key : headers.keySet()) {
1:     		result.append(key + ":" + headers.get(key) + "\n");
1:     	}
1:     	result.append("\n");
1:     	return result.toString();
commit:2189100
/////////////////////////////////////////////////////////////////////////
1:                 if (c == '\n') {
1:                     // end of frame
1:                     return stringFromBuffer(inputBuffer);
1:                 } else {
1:                     inputBuffer.write(0);
1:                     inputBuffer.write(c);
0: 	private String stringFromBuffer(ByteArrayOutputStream inputBuffer) throws Exception {
0: 	    byte[] ba = inputBuffer.toByteArray();
1:         inputBuffer.reset();
1:         return new String(ba, "UTF-8");
1:     }
1: 
1:     public Socket getStompSocket() {
author:Hiram R. Chirino
-------------------------------------------------------------------------------
commit:c5cf038
commit:662324c
/////////////////////////////////////////////////////////////////////////
author:Timothy A. Bish
-------------------------------------------------------------------------------
commit:79127ae
/////////////////////////////////////////////////////////////////////////
1:     public void keepAlive() throws Exception {
1:         OutputStream outputStream = stompSocket.getOutputStream();
1:         outputStream.write('\n');
1:         outputStream.flush();
1:     }
1: 
commit:1e18cf2
/////////////////////////////////////////////////////////////////////////
1:         disconnect(null);
1:     }
1: 
1:     public void disconnect(String receiptId) throws Exception {
1:         if (receiptId != null && !receiptId.isEmpty()) {
1:             frame.getHeaders().put(Stomp.Headers.RECEIPT_REQUESTED, receiptId);
1:         }
commit:0885c60
/////////////////////////////////////////////////////////////////////////
0:         stompSocket = socket;
/////////////////////////////////////////////////////////////////////////
1:         stompSocket.setSoTimeout((int)timeOut);
1:         InputStream is = stompSocket.getInputStream();
/////////////////////////////////////////////////////////////////////////
0:     private String stringFromBuffer(ByteArrayOutputStream inputBuffer) throws Exception {
0:         byte[] ba = inputBuffer.toByteArray();
0:         return stompSocket;
1:     }
0:     public void setStompSocket(Socket stompSocket) {
0:         this.stompSocket = stompSocket;
1:     }
1:         HashMap<String, String> headers = new HashMap<String, String>();
0:         headers.put("login", username);
0:         headers.put("passcode", password);
0:         if (client != null) {
0:             headers.put("client-id", client);
1:         }
0:         StompFrame frame = new StompFrame("CONNECT", headers);
0:             throw new Exception ("Not connected: " + connect.getBody());
0:         StompFrame frame = new StompFrame("DISCONNECT");
0:         send(destination, message, null, null);
0:         if (headers == null) {
0:             headers = new HashMap<String, String>();
1:         }
0:         headers.put("destination", destination);
0:         if (transaction != null) {
0:             headers.put("transaction", transaction);
1:         }
0:         StompFrame frame = new StompFrame("SEND", headers, message.getBytes());
0:         subscribe(destination, null, null);
0:         subscribe(destination, ack, new HashMap<String, String>());
0:         if (headers == null) {
0:             headers = new HashMap<String, String>();
1:         }
0:         headers.put("destination", destination);
0:         if (ack != null) {
0:             headers.put("ack", ack);
1:         }
0:         StompFrame frame = new StompFrame("SUBSCRIBE", headers);
0:         unsubscribe(destination, null);
0:         if (headers == null) {
0:             headers = new HashMap<String, String>();
1:         }
0:         headers.put("destination", destination);
0:         StompFrame frame = new StompFrame("UNSUBSCRIBE", headers);
1:     }
1: 
1:         HashMap<String, String> headers = new HashMap<String, String>();
0:         headers.put("transaction", transaction);
0:         StompFrame frame = new StompFrame("BEGIN", headers);
0:         sendFrame(frame.format());
1:         HashMap<String, String> headers = new HashMap<String, String>();
0:         headers.put("transaction", transaction);
0:         StompFrame frame = new StompFrame("ABORT", headers);
0:         sendFrame(frame.format());
1:         HashMap<String, String> headers = new HashMap<String, String>();
0:         headers.put("transaction", transaction);
0:         StompFrame frame = new StompFrame("COMMIT", headers);
0:         sendFrame(frame.format());
0:         ack(frame.getHeaders().get("message-id"), null);
0:         ack(frame.getHeaders().get("message-id"), transaction);
0:         ack(messageId, null);
1:         HashMap<String, String> headers = new HashMap<String, String>();
0:         headers.put("message-id", messageId);
0:         if (transaction != null)
0:             headers.put("transaction", transaction);
0:         StompFrame frame = new StompFrame("ACK", headers);
0:         sendFrame(frame.format());
1:         StringBuilder result = new StringBuilder();
0:         for (String key : headers.keySet()) {
0:             result.append(key + ":" + headers.get(key) + "\n");
1:         }
0:         result.append("\n");
0:         return result.toString();
commit:8fd00fa
/////////////////////////////////////////////////////////////////////////
1: 
1: 
0:         stompSocket = socket;
/////////////////////////////////////////////////////////////////////////
1: 
1:         outputStream.flush();
1: 
1:     }
1: 
0:         stompSocket.setSoTimeout((int)timeOut);
0:         InputStream is = stompSocket.getInputStream();
/////////////////////////////////////////////////////////////////////////
0:     private String stringFromBuffer(ByteArrayOutputStream inputBuffer) throws Exception {
0:         byte[] ba = inputBuffer.toByteArray();
0:         return stompSocket;
1:     }
0:     public void setStompSocket(Socket stompSocket) {
0:         this.stompSocket = stompSocket;
1:     }
1: 
1: 
0:         HashMap<String, String> headers = new HashMap<String, String>();
0:         headers.put("login", username);
0:         headers.put("passcode", password);
0:         if (client != null) {
0:             headers.put("client-id", client);
1:         }
0:         StompFrame frame = new StompFrame("CONNECT", headers);
0:         sendFrame(frame.marshal());
1: 
0:             throw new Exception ("Not connected: " + connect.getBody());
1: 
0:         StompFrame frame = new StompFrame("DISCONNECT");
0:         sendFrame(frame.toString());
1: 
0:         send(destination, message, null, null);
1: 
0:         if (headers == null) {
0:             headers = new HashMap<String, String>();
1:         }
0:         headers.put("destination", destination);
0:         if (transaction != null) {
0:             headers.put("transaction", transaction);
1:         }
0:         StompFrame frame = new StompFrame("SEND", headers, message.getBytes());
0:         sendFrame(frame.toString());
1: 
0:         subscribe(destination, null, null);
1: 
0:         subscribe(destination, ack, new HashMap<String, String>());
1: 
0:         if (headers == null) {
0:             headers = new HashMap<String, String>();
1:         }
0:         headers.put("destination", destination);
0:         if (ack != null) {
0:             headers.put("ack", ack);
1:         }
0:         StompFrame frame = new StompFrame("SUBSCRIBE", headers);
0:         sendFrame(frame.toString());
1: 
0:         unsubscribe(destination, null);
1: 
0:         if (headers == null) {
0:             headers = new HashMap<String, String>();
1:         }
0:         headers.put("destination", destination);
0:         StompFrame frame = new StompFrame("UNSUBSCRIBE", headers);
0:         sendFrame(frame.toString());
1:     }
1: 
0:         HashMap<String, String> headers = new HashMap<String, String>();
0:         headers.put("transaction", transaction);
0:         StompFrame frame = new StompFrame("BEGIN", headers);
0:         sendFrame(frame.toString());
1: 
0:         HashMap<String, String> headers = new HashMap<String, String>();
0:         headers.put("transaction", transaction);
0:         StompFrame frame = new StompFrame("ABORT", headers);
0:         sendFrame(frame.toString());
1: 
0:         HashMap<String, String> headers = new HashMap<String, String>();
0:         headers.put("transaction", transaction);
0:         StompFrame frame = new StompFrame("COMMIT", headers);
0:         sendFrame(frame.toString());
1: 
0:         ack(frame.getHeaders().get("message-id"), null);
1:     }
1: 
0:         ack(frame.getHeaders().get("message-id"), transaction);
1: 
0:         ack(messageId, null);
1: 
0:         HashMap<String, String> headers = new HashMap<String, String>();
0:         headers.put("message-id", messageId);
0:         if (transaction != null)
0:             headers.put("transaction", transaction);
0:         StompFrame frame = new StompFrame("ACK", headers);
0:         sendFrame(frame.toString());
1: 
0:         StringBuffer result = new StringBuffer();
0:         for (String key : headers.keySet()) {
0:             result.append(key + ":" + headers.get(key) + "\n");
1:         }
0:         result.append("\n");
0:         return result.toString();
author:Bosanac Dejan
-------------------------------------------------------------------------------
commit:a54fa4b
/////////////////////////////////////////////////////////////////////////
1:     private String version = Stomp.DEFAULT_VERSION;
/////////////////////////////////////////////////////////////////////////
1:         wf.setStompVersion(version);
/////////////////////////////////////////////////////////////////////////
1:     public String getVersion() {
1:         return version;
1:     }
1: 
1:     public void setVersion(String version) {
1:         this.version = version;
1:     }
commit:584d52c
/////////////////////////////////////////////////////////////////////////
1:     public void sendFrame(String frame, byte[] data) throws Exception {
1:         byte[] bytes = frame.getBytes("UTF-8");
1:         OutputStream outputStream = stompSocket.getOutputStream();
1:         outputStream.write(bytes);
1:         outputStream.write(data);
0:         outputStream.write(0);
1:         outputStream.flush();        
1:     }
1:     
commit:b0f24f3
/////////////////////////////////////////////////////////////////////////
commit:a15e6ef
/////////////////////////////////////////////////////////////////////////
0:     	// discard all content on the wire before
0:     	// aborting the transaction
0:     	try {
0:     		StompFrame discarded = this.receive(100);
0:     		while (discarded != null) {
0:     			discarded = this.receive(100);
1:     		}
0:     	} catch (Exception e) {    		
1:     	}
commit:690b7bc
/////////////////////////////////////////////////////////////////////////
1:         connect(username, password, null);
1:     }
1: 	
1:     public void connect(String username, String password, String client) throws Exception {
0:     	if (client != null) {
0:     		headers.put("client-id", client);
1:     	}
commit:d8bdf5b
/////////////////////////////////////////////////////////////////////////
1:         
1:         StompFrame connect = receive();
1:         if (!connect.getAction().equals(Stomp.Responses.CONNECTED)) {
0:         	throw new Exception ("Not connected: " + connect.getBody());
1:         }
commit:7aec12e
/////////////////////////////////////////////////////////////////////////
0:     	headers.put("passcode", password);
/////////////////////////////////////////////////////////////////////////
0:     	send(destination, message, null, null);
1:     
1:     public void send(String destination, String message, String transaction, HashMap<String, String> headers) throws Exception {
0:     	if (transaction != null) {
0:     		headers.put("transaction", transaction);
1:     	}
commit:1ab2f59
/////////////////////////////////////////////////////////////////////////
1: /**
1:  * Licensed to the Apache Software Foundation (ASF) under one or more
1:  * contributor license agreements.  See the NOTICE file distributed with
1:  * this work for additional information regarding copyright ownership.
1:  * The ASF licenses this file to You under the Apache License, Version 2.0
1:  * (the "License"); you may not use this file except in compliance with
1:  * the License.  You may obtain a copy of the License at
1:  *
1:  *      http://www.apache.org/licenses/LICENSE-2.0
1:  *
1:  * Unless required by applicable law or agreed to in writing, software
1:  * distributed under the License is distributed on an "AS IS" BASIS,
1:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:  * See the License for the specific language governing permissions and
1:  * limitations under the License.
1:  */
1: 
1: package org.apache.activemq.transport.stomp;
1: 
1: import java.io.ByteArrayOutputStream;
1: import java.io.DataInputStream;
1: import java.io.IOException;
1: import java.io.InputStream;
1: import java.io.OutputStream;
1: import java.net.Socket;
1: import java.net.UnknownHostException;
1: import java.util.HashMap;
0: import java.util.regex.Matcher;
0: import java.util.regex.Pattern;
1: 
0: import org.apache.activemq.transport.stomp.Stomp.Headers.Subscribe;
1: 
1: public class StompConnection {
1: 
1:     public static final long RECEIVE_TIMEOUT = 10000;
1: 
1:     private Socket stompSocket;
1:     private ByteArrayOutputStream inputBuffer = new ByteArrayOutputStream();
1:     
1:     public void open(String host, int port) throws IOException, UnknownHostException {
1:         open(new Socket(host, port));
1:     }
1:     
1:     public void open(Socket socket) {
0:     	stompSocket = socket;
1:     }
1: 
1:     public void close() throws IOException {
1:         if (stompSocket != null) {
1:             stompSocket.close();
1:             stompSocket = null;
1:         }
1:     }
1: 
1:     public void sendFrame(String data) throws Exception {
1:         byte[] bytes = data.getBytes("UTF-8");
1:         OutputStream outputStream = stompSocket.getOutputStream();
1:         outputStream.write(bytes);
0:         outputStream.write(0);
0:         outputStream.flush();
1:     }
1:     
1:     public StompFrame receive() throws Exception {
1:         return receive(RECEIVE_TIMEOUT);
1:     }    
1:     
1:     public StompFrame receive(long timeOut) throws Exception {
0:     	stompSocket.setSoTimeout((int)timeOut);
0:     	InputStream is = stompSocket.getInputStream();
1:         StompWireFormat wf = new StompWireFormat();
1:         DataInputStream dis = new DataInputStream(is);
1:         return (StompFrame)wf.unmarshal(dis);
1:     }
1: 
1:     public String receiveFrame() throws Exception {
1:         return receiveFrame(RECEIVE_TIMEOUT);
1:     }
1: 
1:     public String receiveFrame(long timeOut) throws Exception {
0:         stompSocket.setSoTimeout((int)timeOut);
0:         InputStream is = stompSocket.getInputStream();
1:         int c = 0;
1:         for (;;) {
1:             c = is.read();
1:             if (c < 0) {
1:                 throw new IOException("socket closed.");
1:             } else if (c == 0) {
1:                 c = is.read();
0:                 if (c != '\n') {
0:                     throw new IOException("Expecting stomp frame to terminate with \0\n");
1:                 }
0:                 byte[] ba = inputBuffer.toByteArray();
0:                 inputBuffer.reset();
0:                 return new String(ba, "UTF-8");
1:             } else {
1:                 inputBuffer.write(c);
1:             }
1:         }
1:     }
1: 
0: 	public Socket getStompSocket() {
0: 		return stompSocket;
1: 	}
1: 
0: 	public void setStompSocket(Socket stompSocket) {
0: 		this.stompSocket = stompSocket;
1: 	}
1: 	
1:     public void connect(String username, String password) throws Exception {
0:     	HashMap<String, String> headers = new HashMap();
0:     	headers.put("login", username);
0:     	headers.put("password", password);
0:     	StompFrame frame = new StompFrame("CONNECT", headers);
0:         sendFrame(frame.toString());
1:     }
1:     
1:     public void disconnect() throws Exception {
0:     	StompFrame frame = new StompFrame("DISCONNECT");
0:         sendFrame(frame.toString());    	
1:     }
1:     
1:     public void send(String destination, String message) throws Exception {
0:     	send(destination, message, null);
1:     }
1: 	
0:     public void send(String destination, String message, HashMap<String, String> headers) throws Exception {
0:     	if (headers == null) {
0:     		headers = new HashMap<String, String>();
1:     	}
0:     	headers.put("destination", destination);
0:     	StompFrame frame = new StompFrame("SEND", headers, message.getBytes());
0:         sendFrame(frame.toString());    	
1:     }
1:     
1:     public void subscribe(String destination) throws Exception {
0:     	subscribe(destination, null, null);
1:     }
1:     
1:     public void subscribe(String destination, String ack) throws Exception {
0:     	subscribe(destination, ack, new HashMap<String, String>());
1:     }
1:     
1:     public void subscribe(String destination, String ack, HashMap<String, String> headers) throws Exception {
0: 		if (headers == null) {
0: 			headers = new HashMap<String, String>();
1: 		}
0: 		headers.put("destination", destination);
0:     	if (ack != null) {
0:     		headers.put("ack", ack);
1:     	}
0:     	StompFrame frame = new StompFrame("SUBSCRIBE", headers);
0:         sendFrame(frame.toString());    	
1:     }
1:     
1:     public void unsubscribe(String destination) throws Exception {
0:     	unsubscribe(destination, null);
1:     }
1:     
1:     public void unsubscribe(String destination, HashMap<String, String> headers) throws Exception {
0: 		if (headers == null) {
0: 			headers = new HashMap<String, String>();
1: 		}
0: 		headers.put("destination", destination);
0:     	StompFrame frame = new StompFrame("UNSUBSCRIBE", headers);
0:         sendFrame(frame.toString());    	
1:     }    
1:     
1:     public void begin(String transaction) throws Exception {
0:     	HashMap<String, String> headers = new HashMap<String, String>();
0:     	headers.put("transaction", transaction);
0:     	StompFrame frame = new StompFrame("BEGIN", headers);
0:     	sendFrame(frame.toString());
1:     }
1:     
1:     public void abort(String transaction) throws Exception {
0:     	HashMap<String, String> headers = new HashMap<String, String>();
0:     	headers.put("transaction", transaction);
0:     	StompFrame frame = new StompFrame("ABORT", headers);
0:     	sendFrame(frame.toString());
1:     }
1:     
1:     public void commit(String transaction) throws Exception {
0:     	HashMap<String, String> headers = new HashMap<String, String>();
0:     	headers.put("transaction", transaction);
0:     	StompFrame frame = new StompFrame("COMMIT", headers);
0:     	sendFrame(frame.toString());
1:     }
1:     
1:     public void ack(StompFrame frame) throws Exception {
0:     	ack(frame.getHeaders().get("message-id"), null);
1:     }    
1:     
1:     public void ack(StompFrame frame, String transaction) throws Exception {
0:     	ack(frame.getHeaders().get("message-id"), transaction);
1:     }
1:     
1:     public void ack(String messageId) throws Exception {
0:     	ack(messageId, null);
1:     }
1:     
1:     public void ack(String messageId, String transaction) throws Exception {
0:     	HashMap<String, String> headers = new HashMap<String, String>();
0:     	headers.put("message-id", messageId);
0:     	if (transaction != null)
0:     		headers.put("transaction", transaction);
0:     	StompFrame frame = new StompFrame("ACK", headers);
0:     	sendFrame(frame.toString());	
1:     }
1:     
1:     protected String appendHeaders(HashMap<String, Object> headers) {
0:     	StringBuffer result = new StringBuffer();
0:     	for (String key : headers.keySet()) {
0:     		result.append(key + ":" + headers.get(key) + "\n");
1:     	}
0:     	result.append("\n");
0:     	return result.toString();
1:     }
1: 
1: }
============================================================================