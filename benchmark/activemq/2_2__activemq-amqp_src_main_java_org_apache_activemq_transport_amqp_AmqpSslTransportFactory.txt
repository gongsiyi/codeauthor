1:cdd5150: /**
1:cdd5150:  * Licensed to the Apache Software Foundation (ASF) under one or more
1:cdd5150:  * contributor license agreements.  See the NOTICE file distributed with
1:cdd5150:  * this work for additional information regarding copyright ownership.
1:cdd5150:  * The ASF licenses this file to You under the Apache License, Version 2.0
1:cdd5150:  * (the "License"); you may not use this file except in compliance with
1:cdd5150:  * the License.  You may obtain a copy of the License at
1:cdd5150:  *
1:cdd5150:  *      http://www.apache.org/licenses/LICENSE-2.0
1:cdd5150:  *
1:cdd5150:  * Unless required by applicable law or agreed to in writing, software
1:cdd5150:  * distributed under the License is distributed on an "AS IS" BASIS,
1:cdd5150:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:cdd5150:  * See the License for the specific language governing permissions and
1:cdd5150:  * limitations under the License.
1:cdd5150:  */
1:cdd5150: package org.apache.activemq.transport.amqp;
6:cdd5150: 
1:0f9a347: import java.util.HashMap;
1:0f9a347: import java.util.Map;
1:0f9a347: 
1:cdd5150: import org.apache.activemq.broker.BrokerService;
1:cdd5150: import org.apache.activemq.broker.BrokerServiceAware;
1:cdd5150: import org.apache.activemq.transport.MutexTransport;
1:cdd5150: import org.apache.activemq.transport.Transport;
1:cdd5150: import org.apache.activemq.transport.tcp.SslTransportFactory;
1:cdd5150: import org.apache.activemq.util.IntrospectionSupport;
1:cdd5150: import org.apache.activemq.wireformat.WireFormat;
1:cdd5150: 
1:cdd5150: /**
1:cdd5150:  * A <a href="http://amqp.org/">AMQP</a> over SSL transport factory
1:cdd5150:  */
1:3306467: public class AmqpSslTransportFactory extends SslTransportFactory implements BrokerServiceAware {
1:cdd5150: 
1:adafdfe:     private BrokerService brokerService = null;
1:cdd5150: 
1:0f9a347:     @Override
1:cdd5150:     protected String getDefaultWireFormatType() {
1:cdd5150:         return "amqp";
1:cdd5150:     }
1:cdd5150: 
1:0f9a347:     @Override
1:cdd5150:     @SuppressWarnings("rawtypes")
1:cdd5150:     public Transport compositeConfigure(Transport transport, WireFormat format, Map options) {
1:b9ed01f:         AmqpTransportFilter amqpTransport = new AmqpTransportFilter(transport, format, brokerService);
1:b9ed01f: 
1:b9ed01f:         Map<String, Object> wireFormatOptions = IntrospectionSupport.extractProperties(options, "wireFormat.");
1:b9ed01f: 
1:b9ed01f:         IntrospectionSupport.setProperties(amqpTransport, options);
1:b9ed01f:         IntrospectionSupport.setProperties(amqpTransport.getWireFormat(), wireFormatOptions);
1:b9ed01f: 
1:b9ed01f:         return super.compositeConfigure(amqpTransport, format, options);
1:cdd5150:     }
1:cdd5150: 
1:cdd5150:     @SuppressWarnings("rawtypes")
1:cdd5150:     @Override
1:cdd5150:     public Transport serverConfigure(Transport transport, WireFormat format, HashMap options) throws Exception {
1:cdd5150:         transport = super.serverConfigure(transport, format, options);
1:cdd5150: 
1:6baed7a:         // strip off the mutex transport.
1:0f9a347:         if (transport instanceof MutexTransport) {
1:0f9a347:             transport = ((MutexTransport) transport).getNext();
1:cdd5150:         }
1:6baed7a: 
1:cdd5150:         return transport;
1:cdd5150:     }
1:cdd5150: 
1:0f9a347:     @Override
1:cdd5150:     public void setBrokerService(BrokerService brokerService) {
1:adafdfe:         this.brokerService = brokerService;
1:cdd5150:     }
1:cdd5150: 
1:cdd5150:     @Override
1:8b36701:     protected Transport createInactivityMonitor(Transport transport, WireFormat format) {
1:8b36701:         AmqpInactivityMonitor monitor = new AmqpInactivityMonitor(transport, format);
1:8b36701:         AmqpTransportFilter filter = transport.narrow(AmqpTransportFilter.class);
1:8b36701:         filter.setInactivityMonitor(monitor);
1:8b36701:         return monitor;
1:cdd5150:     }
1:cdd5150: }
============================================================================
author:Timothy Bish
-------------------------------------------------------------------------------
commit:b9ed01f
/////////////////////////////////////////////////////////////////////////
1:         AmqpTransportFilter amqpTransport = new AmqpTransportFilter(transport, format, brokerService);
1: 
1:         Map<String, Object> wireFormatOptions = IntrospectionSupport.extractProperties(options, "wireFormat.");
1: 
1:         IntrospectionSupport.setProperties(amqpTransport, options);
1:         IntrospectionSupport.setProperties(amqpTransport.getWireFormat(), wireFormatOptions);
1: 
1:         return super.compositeConfigure(amqpTransport, format, options);
commit:3306467
/////////////////////////////////////////////////////////////////////////
1: public class AmqpSslTransportFactory extends SslTransportFactory implements BrokerServiceAware {
commit:8b36701
/////////////////////////////////////////////////////////////////////////
1:     protected Transport createInactivityMonitor(Transport transport, WireFormat format) {
1:         AmqpInactivityMonitor monitor = new AmqpInactivityMonitor(transport, format);
1:         AmqpTransportFilter filter = transport.narrow(AmqpTransportFilter.class);
1:         filter.setInactivityMonitor(monitor);
1:         return monitor;
commit:adafdfe
/////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////
1:     private BrokerService brokerService = null;
/////////////////////////////////////////////////////////////////////////
0:         transport = new AmqpTransportFilter(transport, format, brokerService);
/////////////////////////////////////////////////////////////////////////
1:         this.brokerService = brokerService;
commit:f2653e6
/////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////
commit:0f9a347
/////////////////////////////////////////////////////////////////////////
1: import java.util.HashMap;
1: import java.util.Map;
1: 
/////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////
1:     @Override
1:     @Override
/////////////////////////////////////////////////////////////////////////
1:         if (transport instanceof MutexTransport) {
1:             transport = ((MutexTransport) transport).getNext();
0:         // MutexTransport mutex = transport.narrow(MutexTransport.class);
0:         // if (mutex != null) {
0:         // mutex.setSyncOnCommand(true);
0:         // }
1:     @Override
0:     // protected Transport createInactivityMonitor(Transport transport,
0:     // WireFormat format) {
0:     // AmqpInactivityMonitor monitor = new AmqpInactivityMonitor(transport,
0:     // format);
0:     //
0:     // AmqpTransportFilter filter = transport.narrow(AmqpTransportFilter.class);
0:     // filter.setInactivityMonitor(monitor);
0:     //
0:     // return monitor;
0:     // }
author:Hiram R. Chirino
-------------------------------------------------------------------------------
commit:6baed7a
/////////////////////////////////////////////////////////////////////////
1:         // strip off the mutex transport.
0:         if( transport instanceof MutexTransport ) {
0:             transport = ((MutexTransport)transport).getNext();
0: //        MutexTransport mutex = transport.narrow(MutexTransport.class);
0: //        if (mutex != null) {
0: //            mutex.setSyncOnCommand(true);
0: //        }
1: 
commit:cdd5150
/////////////////////////////////////////////////////////////////////////
1: /**
1:  * Licensed to the Apache Software Foundation (ASF) under one or more
1:  * contributor license agreements.  See the NOTICE file distributed with
1:  * this work for additional information regarding copyright ownership.
1:  * The ASF licenses this file to You under the Apache License, Version 2.0
1:  * (the "License"); you may not use this file except in compliance with
1:  * the License.  You may obtain a copy of the License at
1:  *
1:  *      http://www.apache.org/licenses/LICENSE-2.0
1:  *
1:  * Unless required by applicable law or agreed to in writing, software
1:  * distributed under the License is distributed on an "AS IS" BASIS,
1:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:  * See the License for the specific language governing permissions and
1:  * limitations under the License.
1:  */
1: package org.apache.activemq.transport.amqp;
1: 
0: import org.apache.activemq.broker.BrokerContext;
1: import org.apache.activemq.broker.BrokerService;
1: import org.apache.activemq.broker.BrokerServiceAware;
1: import org.apache.activemq.transport.MutexTransport;
1: import org.apache.activemq.transport.Transport;
1: import org.apache.activemq.transport.tcp.SslTransportFactory;
1: import org.apache.activemq.util.IntrospectionSupport;
1: import org.apache.activemq.wireformat.WireFormat;
1: 
0: import java.util.HashMap;
0: import java.util.Map;
1: 
1: /**
1:  * A <a href="http://amqp.org/">AMQP</a> over SSL transport factory
1:  */
0: public class AMQPSslTransportFactory extends SslTransportFactory implements BrokerServiceAware {
1: 
0:     private BrokerContext brokerContext = null;
1: 
1:     protected String getDefaultWireFormatType() {
1:         return "amqp";
1:     }
1: 
1:     @SuppressWarnings("rawtypes")
1: 
1:     public Transport compositeConfigure(Transport transport, WireFormat format, Map options) {
0:         transport = new AmqpTransportFilter(transport, format, brokerContext);
0:         IntrospectionSupport.setProperties(transport, options);
0:         return super.compositeConfigure(transport, format, options);
1:     }
1: 
1:     @SuppressWarnings("rawtypes")
1:     @Override
1:     public Transport serverConfigure(Transport transport, WireFormat format, HashMap options) throws Exception {
1:         transport = super.serverConfigure(transport, format, options);
1: 
0:         MutexTransport mutex = transport.narrow(MutexTransport.class);
0:         if (mutex != null) {
0:             mutex.setSyncOnCommand(true);
1:         }
1: 
1:         return transport;
1:     }
1: 
1:     public void setBrokerService(BrokerService brokerService) {
0:         this.brokerContext = brokerService.getBrokerContext();
1:     }
1: 
0: //    protected Transport createInactivityMonitor(Transport transport, WireFormat format) {
0: //        AmqpInactivityMonitor monitor = new AmqpInactivityMonitor(transport, format);
0: //
0: //        AmqpTransportFilter filter = transport.narrow(AmqpTransportFilter.class);
0: //        filter.setInactivityMonitor(monitor);
0: //
0: //        return monitor;
0: //    }
1: 
1: 
1:     @Override
0:     protected boolean isUseInactivityMonitor(Transport transport) {
0:         return false;
1:     }
1: }
============================================================================