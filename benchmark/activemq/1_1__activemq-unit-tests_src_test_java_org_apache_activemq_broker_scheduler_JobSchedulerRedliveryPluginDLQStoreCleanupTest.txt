1:9f812a2: /*
1:9f812a2:  * Licensed to the Apache Software Foundation (ASF) under one or more
1:9f812a2:  * contributor license agreements.  See the NOTICE file distributed with
1:9f812a2:  * this work for additional information regarding copyright ownership.
1:9f812a2:  * The ASF licenses this file to You under the Apache License, Version 2.0
1:9f812a2:  * (the "License"); you may not use this file except in compliance with
1:9f812a2:  * the License.  You may obtain a copy of the License at
1:9f812a2:  *
1:9f812a2:  *      http://www.apache.org/licenses/LICENSE-2.0
1:9f812a2:  *
1:9f812a2:  * Unless required by applicable law or agreed to in writing, software
1:9f812a2:  * distributed under the License is distributed on an "AS IS" BASIS,
1:9f812a2:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:9f812a2:  * See the License for the specific language governing permissions and
1:9f812a2:  * limitations under the License.
1:9f812a2:  */
1:9f812a2: package org.apache.activemq.broker.scheduler;
1:9f812a2: 
1:9f812a2: import static org.junit.Assert.assertTrue;
1:9f812a2: 
1:9f812a2: import java.io.File;
1:9f812a2: import java.io.IOException;
1:9f812a2: import java.util.Arrays;
1:9f812a2: import java.util.concurrent.CountDownLatch;
1:9f812a2: import java.util.concurrent.Executors;
1:9f812a2: import java.util.concurrent.ScheduledExecutorService;
1:9f812a2: import java.util.concurrent.TimeUnit;
1:9f812a2: 
1:9f812a2: import javax.jms.BytesMessage;
1:9f812a2: import javax.jms.Connection;
1:9f812a2: import javax.jms.DeliveryMode;
1:9f812a2: import javax.jms.JMSException;
1:9f812a2: import javax.jms.Message;
1:9f812a2: import javax.jms.MessageConsumer;
1:9f812a2: import javax.jms.MessageListener;
1:9f812a2: import javax.jms.MessageProducer;
1:9f812a2: import javax.jms.Queue;
1:9f812a2: import javax.jms.Session;
1:9f812a2: 
1:9f812a2: import org.apache.activemq.ActiveMQConnectionFactory;
1:9f812a2: import org.apache.activemq.RedeliveryPolicy;
1:9f812a2: import org.apache.activemq.broker.BrokerPlugin;
1:9f812a2: import org.apache.activemq.broker.BrokerService;
1:9f812a2: import org.apache.activemq.broker.TransportConnector;
1:9f812a2: import org.apache.activemq.broker.region.policy.IndividualDeadLetterStrategy;
1:9f812a2: import org.apache.activemq.broker.region.policy.PolicyEntry;
1:9f812a2: import org.apache.activemq.broker.region.policy.PolicyMap;
1:9f812a2: import org.apache.activemq.broker.region.policy.RedeliveryPolicyMap;
1:9f812a2: import org.apache.activemq.broker.util.RedeliveryPlugin;
1:9f812a2: import org.apache.activemq.command.ActiveMQQueue;
1:9f812a2: import org.apache.activemq.store.kahadb.scheduler.JobSchedulerStoreImpl;
1:9f812a2: import org.apache.activemq.util.ByteSequence;
1:9f812a2: import org.apache.activemq.util.IOHelper;
1:9f812a2: import org.apache.activemq.util.Wait;
1:9f812a2: import org.apache.log4j.Level;
1:9f812a2: import org.junit.After;
1:9f812a2: import org.junit.Before;
1:9f812a2: import org.junit.Test;
1:9f812a2: import org.slf4j.Logger;
1:9f812a2: import org.slf4j.LoggerFactory;
1:9f812a2: 
1:9f812a2: /**
1:9f812a2:  * Test scheduler store GC cleanup with redelivery plugin and rollbacks.
1:9f812a2:  */
1:9f812a2: public class JobSchedulerRedliveryPluginDLQStoreCleanupTest {
1:9f812a2: 
1:9f812a2:     static final Logger LOG = LoggerFactory.getLogger(JobSchedulerStoreCheckpointTest.class);
1:9f812a2: 
1:9f812a2:     private JobSchedulerStoreImpl store;
1:9f812a2:     private BrokerService brokerService;
1:9f812a2:     private ByteSequence payload;
1:9f812a2:     private String connectionURI;
1:9f812a2:     private ActiveMQConnectionFactory cf;
1:9f812a2: 
1:9f812a2:     @Before
1:9f812a2:     public void setUp() throws Exception {
1:9f812a2: 
1:9f812a2:         // investigate gc issue - store usage not getting released
1:9f812a2:         org.apache.log4j.Logger.getLogger(JobSchedulerStoreImpl.class).setLevel(Level.TRACE);
1:9f812a2: 
1:9f812a2:         File directory = new File("target/test/ScheduledJobsDB");
1:9f812a2:         IOHelper.mkdirs(directory);
1:9f812a2:         IOHelper.deleteChildren(directory);
1:9f812a2:         createSchedulerStore(directory);
1:9f812a2: 
1:9f812a2:         brokerService = new BrokerService();
1:9f812a2:         brokerService.setUseJmx(false);
1:9f812a2:         brokerService.setDeleteAllMessagesOnStartup(true);
1:9f812a2:         brokerService.setJobSchedulerStore(store);
1:9f812a2:         brokerService.setSchedulerSupport(true);
1:9f812a2:         brokerService.setAdvisorySupport(false);
1:9f812a2:         TransportConnector connector = brokerService.addConnector("tcp://0.0.0.0:0");
1:9f812a2:         RedeliveryPlugin plugin = createRedeliveryPlugin();
1:9f812a2:         brokerService.setPlugins(new BrokerPlugin[] { plugin });
1:9f812a2: 
1:9f812a2:         PolicyEntry policy = new PolicyEntry();
1:9f812a2:         IndividualDeadLetterStrategy strategy = new IndividualDeadLetterStrategy();
1:9f812a2:         strategy.setProcessExpired(true);
1:9f812a2:         strategy.setProcessNonPersistent(false);
1:9f812a2:         strategy.setUseQueueForQueueMessages(true);
1:9f812a2:         strategy.setQueuePrefix("DLQ.");
1:9f812a2:         policy.setDeadLetterStrategy(strategy);
1:9f812a2: 
1:9f812a2:         PolicyMap pMap = new PolicyMap();
1:9f812a2:         pMap.setDefaultEntry(policy);
1:9f812a2: 
1:9f812a2:         brokerService.setDestinationPolicy(pMap);
1:9f812a2:         brokerService.start();
1:9f812a2:         brokerService.waitUntilStarted();
1:9f812a2: 
1:9f812a2:         connectionURI = connector.getPublishableConnectString();
1:9f812a2: 
1:9f812a2:         byte[] data = new byte[8192];
1:9f812a2:         for (int i = 0; i < data.length; ++i) {
1:9f812a2:             data[i] = (byte) (i % 256);
1:9f812a2:         }
1:9f812a2: 
1:9f812a2:         payload = new ByteSequence(data);
1:9f812a2: 
1:9f812a2:         cf = new ActiveMQConnectionFactory(connectionURI);
1:9f812a2:         cf.getRedeliveryPolicy().setMaximumRedeliveries(0);
1:9f812a2:     }
1:9f812a2: 
1:9f812a2:     protected void createSchedulerStore(File directory) throws Exception {
1:9f812a2:         store = new JobSchedulerStoreImpl();
1:9f812a2:         store.setDirectory(directory);
1:9f812a2:         store.setCheckpointInterval(5000);
1:9f812a2:         store.setCleanupInterval(10000);
1:9f812a2:         store.setJournalMaxFileLength(10 * 1024);
1:9f812a2:     }
1:9f812a2: 
1:9f812a2:     protected RedeliveryPlugin createRedeliveryPlugin() {
1:9f812a2:         RedeliveryPlugin plugin = new RedeliveryPlugin();
1:9f812a2: 
1:9f812a2:         RedeliveryPolicy queueEntry = new RedeliveryPolicy();
1:9f812a2:         queueEntry.setMaximumRedeliveries(3);
1:9f812a2:         queueEntry.setDestination(new ActiveMQQueue("FOO.BAR"));
1:9f812a2: 
1:9f812a2:         RedeliveryPolicy defaultEntry = new RedeliveryPolicy();
1:9f812a2:         defaultEntry.setInitialRedeliveryDelay(5000);
1:9f812a2:         defaultEntry.setMaximumRedeliveries(0);
1:9f812a2: 
1:9f812a2:         RedeliveryPolicyMap redeliveryPolicyMap = new RedeliveryPolicyMap();
1:9f812a2:         redeliveryPolicyMap.setDefaultEntry(defaultEntry);
1:9f812a2:         redeliveryPolicyMap.setRedeliveryPolicyEntries(Arrays.asList(queueEntry));
1:9f812a2: 
1:9f812a2:         plugin.setRedeliveryPolicyMap(redeliveryPolicyMap);
1:9f812a2: 
1:9f812a2:         return plugin;
1:9f812a2:     }
1:9f812a2: 
1:9f812a2:     @After
1:9f812a2:     public void tearDown() throws Exception {
1:9f812a2:         if (brokerService != null) {
1:9f812a2:             brokerService.stop();
1:9f812a2:             brokerService.waitUntilStopped();
1:9f812a2:         }
1:9f812a2:     }
1:9f812a2: 
1:9f812a2:     @Test
1:9f812a2:     public void testProducerAndRollback() throws Exception {
1:9f812a2:         final Connection connection = cf.createConnection();
1:9f812a2:         final Session producerSession = connection.createSession(false, Session.AUTO_ACKNOWLEDGE);
1:9f812a2:         final Session consumerSession = connection.createSession(true, Session.SESSION_TRANSACTED);
1:9f812a2:         final Queue queue = producerSession.createQueue("FOO.BAR");
1:9f812a2:         final MessageProducer producer = producerSession.createProducer(queue);
1:9f812a2:         final MessageConsumer consumer = consumerSession.createConsumer(queue);
1:9f812a2:         final CountDownLatch sentAll = new CountDownLatch(8);
1:9f812a2: 
1:9f812a2:         connection.start();
1:9f812a2:         producer.setDeliveryMode(DeliveryMode.PERSISTENT);
1:9f812a2: 
1:9f812a2:         consumer.setMessageListener(new MessageListener() {
1:9f812a2: 
1:9f812a2:             @Override
1:9f812a2:             public void onMessage(Message message) {
1:9f812a2:                 try {
1:9f812a2:                     LOG.info("Rolling back incoming message");
1:9f812a2:                     consumerSession.rollback();
1:9f812a2:                 } catch (JMSException e) {
1:9f812a2:                     LOG.warn("Failed to Rollback on incoming message");
1:9f812a2:                 }
1:9f812a2:             }
1:9f812a2:         });
1:9f812a2: 
1:9f812a2:         ScheduledExecutorService executor = Executors.newSingleThreadScheduledExecutor();
1:9f812a2:         executor.scheduleWithFixedDelay(new Runnable() {
1:9f812a2: 
1:9f812a2:             @Override
1:9f812a2:             public void run() {
1:9f812a2:                 try {
1:9f812a2:                     BytesMessage message = producerSession.createBytesMessage();
1:9f812a2:                     message.writeBytes(payload.data, payload.offset, payload.length);
1:9f812a2:                     producer.send(message);
1:9f812a2:                     LOG.info("Send next Message to Queue");
1:9f812a2:                     sentAll.countDown();
1:9f812a2:                 } catch (JMSException e) {
1:9f812a2:                     LOG.warn("Send of message did not complete.");
1:9f812a2:                 }
1:9f812a2:             }
1:9f812a2:         }, 0, 5, TimeUnit.SECONDS);
1:9f812a2: 
1:9f812a2:         assertTrue("Should have sent all messages", sentAll.await(2, TimeUnit.MINUTES));
1:9f812a2: 
1:9f812a2:         executor.shutdownNow();
1:9f812a2:         assertTrue(executor.awaitTermination(30, TimeUnit.SECONDS));
1:9f812a2: 
1:9f812a2:         assertTrue("Should clean out the scheduler store", Wait.waitFor(new Wait.Condition() {
1:9f812a2: 
1:9f812a2:             @Override
1:9f812a2:             public boolean isSatisified() throws Exception {
1:9f812a2:                 return getNumJournalFiles() == 1;
1:9f812a2:             }
1:9f812a2:         }));
1:9f812a2:     }
1:9f812a2: 
1:9f812a2:     private int getNumJournalFiles() throws IOException {
1:9f812a2:         return store.getJournal().getFileMap().size();
1:9f812a2:     }
1:9f812a2: }
============================================================================
author:Timothy Bish
-------------------------------------------------------------------------------
commit:9f812a2
/////////////////////////////////////////////////////////////////////////
1: /*
1:  * Licensed to the Apache Software Foundation (ASF) under one or more
1:  * contributor license agreements.  See the NOTICE file distributed with
1:  * this work for additional information regarding copyright ownership.
1:  * The ASF licenses this file to You under the Apache License, Version 2.0
1:  * (the "License"); you may not use this file except in compliance with
1:  * the License.  You may obtain a copy of the License at
1:  *
1:  *      http://www.apache.org/licenses/LICENSE-2.0
1:  *
1:  * Unless required by applicable law or agreed to in writing, software
1:  * distributed under the License is distributed on an "AS IS" BASIS,
1:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:  * See the License for the specific language governing permissions and
1:  * limitations under the License.
1:  */
1: package org.apache.activemq.broker.scheduler;
1: 
1: import static org.junit.Assert.assertTrue;
1: 
1: import java.io.File;
1: import java.io.IOException;
1: import java.util.Arrays;
1: import java.util.concurrent.CountDownLatch;
1: import java.util.concurrent.Executors;
1: import java.util.concurrent.ScheduledExecutorService;
1: import java.util.concurrent.TimeUnit;
1: 
1: import javax.jms.BytesMessage;
1: import javax.jms.Connection;
1: import javax.jms.DeliveryMode;
1: import javax.jms.JMSException;
1: import javax.jms.Message;
1: import javax.jms.MessageConsumer;
1: import javax.jms.MessageListener;
1: import javax.jms.MessageProducer;
1: import javax.jms.Queue;
1: import javax.jms.Session;
1: 
1: import org.apache.activemq.ActiveMQConnectionFactory;
1: import org.apache.activemq.RedeliveryPolicy;
1: import org.apache.activemq.broker.BrokerPlugin;
1: import org.apache.activemq.broker.BrokerService;
1: import org.apache.activemq.broker.TransportConnector;
1: import org.apache.activemq.broker.region.policy.IndividualDeadLetterStrategy;
1: import org.apache.activemq.broker.region.policy.PolicyEntry;
1: import org.apache.activemq.broker.region.policy.PolicyMap;
1: import org.apache.activemq.broker.region.policy.RedeliveryPolicyMap;
1: import org.apache.activemq.broker.util.RedeliveryPlugin;
1: import org.apache.activemq.command.ActiveMQQueue;
1: import org.apache.activemq.store.kahadb.scheduler.JobSchedulerStoreImpl;
1: import org.apache.activemq.util.ByteSequence;
1: import org.apache.activemq.util.IOHelper;
1: import org.apache.activemq.util.Wait;
1: import org.apache.log4j.Level;
1: import org.junit.After;
1: import org.junit.Before;
1: import org.junit.Test;
1: import org.slf4j.Logger;
1: import org.slf4j.LoggerFactory;
1: 
1: /**
1:  * Test scheduler store GC cleanup with redelivery plugin and rollbacks.
1:  */
1: public class JobSchedulerRedliveryPluginDLQStoreCleanupTest {
1: 
1:     static final Logger LOG = LoggerFactory.getLogger(JobSchedulerStoreCheckpointTest.class);
1: 
1:     private JobSchedulerStoreImpl store;
1:     private BrokerService brokerService;
1:     private ByteSequence payload;
1:     private String connectionURI;
1:     private ActiveMQConnectionFactory cf;
1: 
1:     @Before
1:     public void setUp() throws Exception {
1: 
1:         // investigate gc issue - store usage not getting released
1:         org.apache.log4j.Logger.getLogger(JobSchedulerStoreImpl.class).setLevel(Level.TRACE);
1: 
1:         File directory = new File("target/test/ScheduledJobsDB");
1:         IOHelper.mkdirs(directory);
1:         IOHelper.deleteChildren(directory);
1:         createSchedulerStore(directory);
1: 
1:         brokerService = new BrokerService();
1:         brokerService.setUseJmx(false);
1:         brokerService.setDeleteAllMessagesOnStartup(true);
1:         brokerService.setJobSchedulerStore(store);
1:         brokerService.setSchedulerSupport(true);
1:         brokerService.setAdvisorySupport(false);
1:         TransportConnector connector = brokerService.addConnector("tcp://0.0.0.0:0");
1:         RedeliveryPlugin plugin = createRedeliveryPlugin();
1:         brokerService.setPlugins(new BrokerPlugin[] { plugin });
1: 
1:         PolicyEntry policy = new PolicyEntry();
1:         IndividualDeadLetterStrategy strategy = new IndividualDeadLetterStrategy();
1:         strategy.setProcessExpired(true);
1:         strategy.setProcessNonPersistent(false);
1:         strategy.setUseQueueForQueueMessages(true);
1:         strategy.setQueuePrefix("DLQ.");
1:         policy.setDeadLetterStrategy(strategy);
1: 
1:         PolicyMap pMap = new PolicyMap();
1:         pMap.setDefaultEntry(policy);
1: 
1:         brokerService.setDestinationPolicy(pMap);
1:         brokerService.start();
1:         brokerService.waitUntilStarted();
1: 
1:         connectionURI = connector.getPublishableConnectString();
1: 
1:         byte[] data = new byte[8192];
1:         for (int i = 0; i < data.length; ++i) {
1:             data[i] = (byte) (i % 256);
1:         }
1: 
1:         payload = new ByteSequence(data);
1: 
1:         cf = new ActiveMQConnectionFactory(connectionURI);
1:         cf.getRedeliveryPolicy().setMaximumRedeliveries(0);
1:     }
1: 
1:     protected void createSchedulerStore(File directory) throws Exception {
1:         store = new JobSchedulerStoreImpl();
1:         store.setDirectory(directory);
1:         store.setCheckpointInterval(5000);
1:         store.setCleanupInterval(10000);
1:         store.setJournalMaxFileLength(10 * 1024);
1:     }
1: 
1:     protected RedeliveryPlugin createRedeliveryPlugin() {
1:         RedeliveryPlugin plugin = new RedeliveryPlugin();
1: 
1:         RedeliveryPolicy queueEntry = new RedeliveryPolicy();
1:         queueEntry.setMaximumRedeliveries(3);
1:         queueEntry.setDestination(new ActiveMQQueue("FOO.BAR"));
1: 
1:         RedeliveryPolicy defaultEntry = new RedeliveryPolicy();
1:         defaultEntry.setInitialRedeliveryDelay(5000);
1:         defaultEntry.setMaximumRedeliveries(0);
1: 
1:         RedeliveryPolicyMap redeliveryPolicyMap = new RedeliveryPolicyMap();
1:         redeliveryPolicyMap.setDefaultEntry(defaultEntry);
1:         redeliveryPolicyMap.setRedeliveryPolicyEntries(Arrays.asList(queueEntry));
1: 
1:         plugin.setRedeliveryPolicyMap(redeliveryPolicyMap);
1: 
1:         return plugin;
1:     }
1: 
1:     @After
1:     public void tearDown() throws Exception {
1:         if (brokerService != null) {
1:             brokerService.stop();
1:             brokerService.waitUntilStopped();
1:         }
1:     }
1: 
1:     @Test
1:     public void testProducerAndRollback() throws Exception {
1:         final Connection connection = cf.createConnection();
1:         final Session producerSession = connection.createSession(false, Session.AUTO_ACKNOWLEDGE);
1:         final Session consumerSession = connection.createSession(true, Session.SESSION_TRANSACTED);
1:         final Queue queue = producerSession.createQueue("FOO.BAR");
1:         final MessageProducer producer = producerSession.createProducer(queue);
1:         final MessageConsumer consumer = consumerSession.createConsumer(queue);
1:         final CountDownLatch sentAll = new CountDownLatch(8);
1: 
1:         connection.start();
1:         producer.setDeliveryMode(DeliveryMode.PERSISTENT);
1: 
1:         consumer.setMessageListener(new MessageListener() {
1: 
1:             @Override
1:             public void onMessage(Message message) {
1:                 try {
1:                     LOG.info("Rolling back incoming message");
1:                     consumerSession.rollback();
1:                 } catch (JMSException e) {
1:                     LOG.warn("Failed to Rollback on incoming message");
1:                 }
1:             }
1:         });
1: 
1:         ScheduledExecutorService executor = Executors.newSingleThreadScheduledExecutor();
1:         executor.scheduleWithFixedDelay(new Runnable() {
1: 
1:             @Override
1:             public void run() {
1:                 try {
1:                     BytesMessage message = producerSession.createBytesMessage();
1:                     message.writeBytes(payload.data, payload.offset, payload.length);
1:                     producer.send(message);
1:                     LOG.info("Send next Message to Queue");
1:                     sentAll.countDown();
1:                 } catch (JMSException e) {
1:                     LOG.warn("Send of message did not complete.");
1:                 }
1:             }
1:         }, 0, 5, TimeUnit.SECONDS);
1: 
1:         assertTrue("Should have sent all messages", sentAll.await(2, TimeUnit.MINUTES));
1: 
1:         executor.shutdownNow();
1:         assertTrue(executor.awaitTermination(30, TimeUnit.SECONDS));
1: 
1:         assertTrue("Should clean out the scheduler store", Wait.waitFor(new Wait.Condition() {
1: 
1:             @Override
1:             public boolean isSatisified() throws Exception {
1:                 return getNumJournalFiles() == 1;
1:             }
1:         }));
1:     }
1: 
1:     private int getNumJournalFiles() throws IOException {
1:         return store.getJournal().getFileMap().size();
1:     }
1: }
============================================================================