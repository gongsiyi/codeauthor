1:a677c21: /**
1:57b4941:  * Licensed to the Apache Software Foundation (ASF) under one or more
1:57b4941:  * contributor license agreements.  See the NOTICE file distributed with
1:57b4941:  * this work for additional information regarding copyright ownership.
1:57b4941:  * The ASF licenses this file to You under the Apache License, Version 2.0
1:57b4941:  * (the "License"); you may not use this file except in compliance with
1:57b4941:  * the License.  You may obtain a copy of the License at
3:a677c21:  *
1:230a86c:  *      http://www.apache.org/licenses/LICENSE-2.0
1:a677c21:  *
1:a677c21:  * Unless required by applicable law or agreed to in writing, software
1:a677c21:  * distributed under the License is distributed on an "AS IS" BASIS,
1:a677c21:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:a677c21:  * See the License for the specific language governing permissions and
1:a677c21:  * limitations under the License.
1:a677c21:  */
1:a677c21: package org.apache.activemq.usecases;
6:a677c21: 
1:a677c21: import java.net.URI;
1:a677c21: import java.util.Arrays;
1:a677c21: 
1:a677c21: import javax.jms.Connection;
1:74a7a8b: import javax.jms.ConnectionFactory;
1:74a7a8b: import javax.jms.Destination;
1:a677c21: import javax.jms.JMSException;
1:a677c21: import javax.jms.MessageConsumer;
1:a677c21: import javax.jms.MessageProducer;
1:74a7a8b: import javax.jms.Session;
1:a677c21: import javax.jms.TextMessage;
1:a677c21: 
1:74a7a8b: import junit.framework.Test;
1:74a7a8b: import org.apache.activemq.ActiveMQConnectionFactory;
1:74a7a8b: import org.apache.activemq.CombinationTestSupport;
1:74a7a8b: import org.apache.activemq.broker.BrokerService;
1:74a7a8b: import org.apache.activemq.command.ActiveMQQueue;
1:74a7a8b: import org.apache.activemq.util.MessageIdList;
1:74a7a8b: import org.apache.activemq.xbean.XBeanBrokerFactory;
1:74a7a8b: 
1:a677c21: public class TwoBrokerMulticastQueueTest extends CombinationTestSupport {
1:a677c21: 
1:ecf89a6:     public static final int MESSAGE_COUNT = 100;
1:ecf89a6:     public static final int BROKER_COUNT = 2;
1:ecf89a6:     public static final int CONSUMER_COUNT = 20;
1:ecf89a6: 
1:933eb2f:     public String sendUri;
1:933eb2f:     public String recvUri;
1:ecf89a6:     private BrokerService[] brokers;
1:a2033b3:     private String groupId;
1:ecf89a6: 
1:a677c21:     public static Test suite() {
1:a677c21:         return suite(TwoBrokerMulticastQueueTest.class);
1:a677c21:     }
1:a677c21: 
1:a677c21:     public static void main(String[] args) {
1:a677c21:         junit.textui.TestRunner.run(suite());
1:a677c21:     }
1:a677c21: 
1:a677c21:     public void setUp() throws Exception {
1:a2033b3:     	groupId = getClass().getName()+"-"+System.currentTimeMillis();
1:a2033b3:     	System.setProperty("groupId", groupId);
1:a677c21:         super.setAutoFail(true);
1:a677c21:         super.setUp();
1:a677c21:     }
1:a677c21: 
1:a677c21:     public void tearDown() throws Exception {
1:bc71842:         if (brokers != null) {
1:230a86c:             for (int i = 0; i < BROKER_COUNT; i++) {
1:bc71842:                 if (brokers[i] != null) {
1:bc71842:                     brokers[i].stop();
1:bc71842:                 }
1:bc71842:             }
1:bc71842:             super.tearDown();
1:a677c21:         }
1:a677c21:     }
1:a677c21: 
1:a677c21:     private void doSendReceiveTest() throws Exception {
1:a677c21:         Destination dest = new ActiveMQQueue("TEST.FOO");
1:a677c21: 
1:a677c21:         ConnectionFactory sendFactory = createConnectionFactory(sendUri);
1:a677c21: 
1:a677c21:         Connection conn = createConnection(sendFactory);
1:a677c21:         sendMessages(conn, dest, MESSAGE_COUNT);
1:a677c21: 
1:a677c21:         Thread.sleep(500);
1:a677c21: 
1:a677c21:         ConnectionFactory recvFactory = createConnectionFactory(recvUri);
1:a677c21:         assertEquals(MESSAGE_COUNT, receiveMessages(createConnection(recvFactory), dest, 0));
1:a677c21:     }
1:a677c21: 
1:a677c21:     private void doMultipleConsumersConnectTest() throws Exception {
1:a677c21:         Destination dest = new ActiveMQQueue("TEST.FOO");
1:a677c21: 
1:a677c21:         ConnectionFactory sendFactory = createConnectionFactory(sendUri);
1:a677c21: 
1:a677c21:         Connection conn = createConnection(sendFactory);
1:a677c21:         sendMessages(conn, dest, MESSAGE_COUNT);
1:a677c21: 
1:a677c21:         Thread.sleep(500);
1:a677c21: 
1:a677c21:         ConnectionFactory recvFactory = createConnectionFactory(recvUri);
1:a677c21:         assertEquals(MESSAGE_COUNT, receiveMessages(createConnection(recvFactory), dest, 0));
1:a677c21: 
1:230a86c:         for (int i = 0; i < (CONSUMER_COUNT - 1); i++) {
1:a677c21:             assertEquals(0, receiveMessages(createConnection(recvFactory), dest, 200));
1:a677c21:         }
1:a677c21:     }
1:a677c21: 
1:a677c21:     public void initCombosForTestSendReceive() {
1:230a86c:         addCombinationValues("sendUri", new Object[] {"tcp://localhost:61616", "tcp://localhost:61617"});
1:230a86c:         addCombinationValues("recvUri", new Object[] {"tcp://localhost:61616", "tcp://localhost:61617"});
1:a677c21:     }
1:a677c21: 
1:a677c21:     public void testSendReceive() throws Exception {
1:a677c21:         createMulticastBrokerNetwork();
1:a677c21:         doSendReceiveTest();
1:a677c21:     }
1:a677c21: 
1:a677c21:     public void initCombosForTestMultipleConsumersConnect() {
1:230a86c:         addCombinationValues("sendUri", new Object[] {"tcp://localhost:61616", "tcp://localhost:61617"});
1:230a86c:         addCombinationValues("recvUri", new Object[] {"tcp://localhost:61616", "tcp://localhost:61617"});
1:a677c21:     }
1:a677c21: 
1:a677c21:     public void testMultipleConsumersConnect() throws Exception {
1:a677c21:         createMulticastBrokerNetwork();
1:a677c21:         doMultipleConsumersConnectTest();
1:a677c21:     }
1:a677c21: 
1:a677c21:     public void testSendReceiveUsingFailover() throws Exception {
1:d81997d:         sendUri = "failover:(tcp://localhost:61616,tcp://localhost:61617)";
1:d81997d:         recvUri = "failover:(tcp://localhost:61616,tcp://localhost:61617)";
1:a677c21:         createMulticastBrokerNetwork();
1:a677c21:         doSendReceiveTest();
1:a677c21:     }
1:a677c21: 
1:a677c21:     public void testMultipleConsumersConnectUsingFailover() throws Exception {
1:d81997d:         sendUri = "failover:(tcp://localhost:61616,tcp://localhost:61617)";
1:d81997d:         recvUri = "failover:(tcp://localhost:61616,tcp://localhost:61617)";
1:a677c21:         createMulticastBrokerNetwork();
1:a677c21:         doMultipleConsumersConnectTest();
1:a677c21:     }
1:a677c21: 
1:a677c21:     public void testSendReceiveUsingDiscovery() throws Exception {
1:4a7e0b3:         sendUri = "discovery:multicast://default?group="+groupId;
1:4a7e0b3:         recvUri = "discovery:multicast://default?group="+groupId;
1:a677c21:         createMulticastBrokerNetwork();
1:a677c21:         doSendReceiveTest();
1:a677c21:     }
1:a677c21: 
1:a677c21:     public void testMultipleConsumersConnectUsingDiscovery() throws Exception {
1:4a7e0b3:         sendUri = "discovery:multicast://default?group="+groupId;
1:4a7e0b3:         recvUri = "discovery:multicast://default?group="+groupId;
1:a677c21:         createMulticastBrokerNetwork();
1:a677c21:         doMultipleConsumersConnectTest();
1:a677c21:     }
1:a677c21: 
1:a677c21:     public void testSendReceiveUsingAutoAssignFailover() throws Exception {
1:4a7e0b3:         sendUri = "failover:(discovery:multicast:default?group=//"+groupId+")";
1:4a7e0b3:         recvUri = "failover:(discovery:multicast:default?group=//"+groupId+")";
1:a677c21:         createAutoAssignMulticastBrokerNetwork();
1:a677c21:         doSendReceiveTest();
1:a677c21:     }
1:a677c21: 
1:a677c21:     public void testMultipleConsumersConnectUsingAutoAssignFailover() throws Exception {
1:4a7e0b3:         sendUri = "failover:(discovery:multicast:default?group=//"+groupId+")";
1:4a7e0b3:         recvUri = "failover:(discovery:multicast:default?group=//"+groupId+")";
1:a677c21:         createAutoAssignMulticastBrokerNetwork();
1:a677c21:         doMultipleConsumersConnectTest();
1:a677c21:     }
1:a677c21: 
1:a677c21:     public void testSendReceiveUsingAutoAssignDiscovery() throws Exception {
1:4a7e0b3:         sendUri = "discovery:multicast://default?group="+groupId;
1:4a7e0b3:         recvUri = "discovery:multicast://default?group="+groupId;
1:a677c21:         createAutoAssignMulticastBrokerNetwork();
1:a677c21:         doSendReceiveTest();
1:a677c21:     }
1:a677c21: 
1:a677c21:     public void testMultipleConsumersConnectUsingAutoAssignDiscovery() throws Exception {
1:4a7e0b3:         sendUri = "discovery:multicast://default?group="+groupId;
1:4a7e0b3:         recvUri = "discovery:multicast://default?group="+groupId;
1:a677c21:         createAutoAssignMulticastBrokerNetwork();
1:a677c21:         doMultipleConsumersConnectTest();
1:a677c21:     }
1:a677c21: 
1:a677c21:     protected void createMulticastBrokerNetwork() throws Exception {
1:a677c21:         brokers = new BrokerService[BROKER_COUNT];
1:230a86c:         for (int i = 0; i < BROKER_COUNT; i++) {
1:230a86c:             brokers[i] = createBroker("org/apache/activemq/usecases/multicast-broker-" + (i + 1) + ".xml");
1:a677c21:             brokers[i].start();
1:a677c21:         }
1:a677c21: 
1:a677c21:         // Let the brokers discover each other first
1:a677c21:         Thread.sleep(1000);
1:a677c21:     }
1:a677c21: 
1:a677c21:     protected void createAutoAssignMulticastBrokerNetwork() throws Exception {
1:a677c21:         brokers = new BrokerService[BROKER_COUNT];
1:230a86c:         for (int i = 0; i < BROKER_COUNT; i++) {
1:795166e:             brokers[i] = createBroker("org/apache/activemq/usecases/multicast-broker-auto.xml");
1:a677c21:             brokers[i].start();
1:a677c21:         }
1:a677c21: 
1:a677c21:         // Let the brokers discover each other first
1:a677c21:         Thread.sleep(1000);
1:a677c21:     }
1:a677c21: 
1:a677c21:     protected BrokerService createBroker(String uri) throws Exception {
1:a677c21:         return (new XBeanBrokerFactory()).createBroker(new URI(uri));
1:a677c21:     }
1:a677c21: 
1:a677c21:     protected ConnectionFactory createConnectionFactory(String uri) {
1:a677c21:         return new ActiveMQConnectionFactory(uri);
1:a677c21:     }
1:a677c21: 
1:a677c21:     protected Connection createConnection(ConnectionFactory factory) throws JMSException {
1:a677c21:         Connection conn = factory.createConnection();
1:a677c21:         return conn;
1:a677c21:     }
1:a677c21: 
1:a677c21:     protected int receiveMessages(Connection conn, Destination dest, int waitTime) throws JMSException, InterruptedException {
1:a677c21:         conn.start();
1:a677c21:         MessageIdList list = new MessageIdList();
1:a677c21:         Session sess = conn.createSession(false, Session.AUTO_ACKNOWLEDGE);
1:a677c21:         MessageConsumer consumer = sess.createConsumer(dest);
1:a677c21:         consumer.setMessageListener(list);
1:a677c21: 
1:a677c21:         if (waitTime > 0) {
1:a677c21:             Thread.sleep(waitTime);
1:a677c21:         } else {
1:a677c21:             list.waitForMessagesToArrive(MESSAGE_COUNT);
1:a677c21:         }
1:a677c21: 
1:a677c21:         conn.close();
1:a677c21: 
1:a677c21:         return list.getMessageCount();
1:a677c21:     }
1:a677c21: 
1:a677c21:     protected void sendMessages(Connection conn, Destination dest, int count) throws JMSException {
1:a677c21:         conn.start();
1:a677c21:         Session sess = conn.createSession(false, Session.AUTO_ACKNOWLEDGE);
1:a677c21:         MessageProducer prod = sess.createProducer(dest);
1:a677c21: 
1:230a86c:         for (int i = 0; i < count; i++) {
1:a677c21:             prod.send(createTextMessage(sess, "Message " + i, 1024));
1:a677c21:         }
1:a677c21: 
1:a677c21:         conn.close();
1:a677c21:     }
1:a677c21: 
1:a677c21:     protected TextMessage createTextMessage(Session session, String initText, int messageSize) throws JMSException {
1:a677c21:         TextMessage msg = session.createTextMessage();
1:a677c21: 
1:a677c21:         // Pad message text
1:a677c21:         if (initText.length() < messageSize) {
1:a677c21:             char[] data = new char[messageSize - initText.length()];
1:a677c21:             Arrays.fill(data, '*');
1:a677c21:             String str = new String(data);
1:a677c21:             msg.setText(initText + str);
1:a677c21: 
1:230a86c:             // Do not pad message text
1:a677c21:         } else {
1:a677c21:             msg.setText(initText);
1:a677c21:         }
1:a677c21: 
1:a677c21:         return msg;
1:a677c21:     }
1:a677c21: 
1:a677c21: }
============================================================================
author:Timothy A. Bish
-------------------------------------------------------------------------------
commit:ef24cc9
author:Gary Tully
-------------------------------------------------------------------------------
commit:4a7e0b3
/////////////////////////////////////////////////////////////////////////
1:         sendUri = "discovery:multicast://default?group="+groupId;
1:         recvUri = "discovery:multicast://default?group="+groupId;
1:         sendUri = "discovery:multicast://default?group="+groupId;
1:         recvUri = "discovery:multicast://default?group="+groupId;
1:         sendUri = "failover:(discovery:multicast:default?group=//"+groupId+")";
1:         recvUri = "failover:(discovery:multicast:default?group=//"+groupId+")";
1:         sendUri = "failover:(discovery:multicast:default?group=//"+groupId+")";
1:         recvUri = "failover:(discovery:multicast:default?group=//"+groupId+")";
1:         sendUri = "discovery:multicast://default?group="+groupId;
1:         recvUri = "discovery:multicast://default?group="+groupId;
1:         sendUri = "discovery:multicast://default?group="+groupId;
1:         recvUri = "discovery:multicast://default?group="+groupId;
author:Hiram R. Chirino
-------------------------------------------------------------------------------
commit:a2033b3
/////////////////////////////////////////////////////////////////////////
1:     private String groupId;
/////////////////////////////////////////////////////////////////////////
1:     	groupId = getClass().getName()+"-"+System.currentTimeMillis();
1:     	System.setProperty("groupId", groupId);
/////////////////////////////////////////////////////////////////////////
0:         sendUri = "discovery:multicast://"+groupId;
0:         recvUri = "discovery:multicast://"+groupId;
0:         sendUri = "discovery:multicast://"+groupId;
0:         recvUri = "discovery:multicast://"+groupId;
0:         sendUri = "failover:(discovery:multicast://"+groupId+")";
0:         recvUri = "failover:(discovery:multicast://"+groupId+")";
0:         sendUri = "failover:(discovery:multicast://"+groupId+")";
0:         recvUri = "failover:(discovery:multicast://"+groupId+")";
0:         sendUri = "discovery:multicast://"+groupId;
0:         recvUri = "discovery:multicast://"+groupId;
0:         sendUri = "discovery:multicast://"+groupId;
0:         recvUri = "discovery:multicast://"+groupId;
commit:933eb2f
/////////////////////////////////////////////////////////////////////////
1:     public String sendUri;
1:     public String recvUri;
commit:ecf89a6
/////////////////////////////////////////////////////////////////////////
1:     public static final int MESSAGE_COUNT = 100;
1:     public static final int BROKER_COUNT = 2;
1:     public static final int CONSUMER_COUNT = 20;
1: 
0:     public String sendUri, recvUri;
1:     private BrokerService[] brokers;
1: 
/////////////////////////////////////////////////////////////////////////
commit:74a7a8b
/////////////////////////////////////////////////////////////////////////
1: import javax.jms.ConnectionFactory;
1: import javax.jms.Destination;
1: import javax.jms.Session;
1: import junit.framework.Test;
1: import org.apache.activemq.ActiveMQConnectionFactory;
1: import org.apache.activemq.CombinationTestSupport;
1: import org.apache.activemq.broker.BrokerService;
1: import org.apache.activemq.command.ActiveMQQueue;
1: import org.apache.activemq.util.MessageIdList;
1: import org.apache.activemq.xbean.XBeanBrokerFactory;
1: 
commit:230a86c
/////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////
1:  *      http://www.apache.org/licenses/LICENSE-2.0
/////////////////////////////////////////////////////////////////////////
0:     public static final int MESSAGE_COUNT = 100;
0:     public static final int BROKER_COUNT = 2;
/////////////////////////////////////////////////////////////////////////
1:             for (int i = 0; i < BROKER_COUNT; i++) {
/////////////////////////////////////////////////////////////////////////
1:         for (int i = 0; i < (CONSUMER_COUNT - 1); i++) {
1:         addCombinationValues("sendUri", new Object[] {"tcp://localhost:61616", "tcp://localhost:61617"});
1:         addCombinationValues("recvUri", new Object[] {"tcp://localhost:61616", "tcp://localhost:61617"});
/////////////////////////////////////////////////////////////////////////
1:         addCombinationValues("sendUri", new Object[] {"tcp://localhost:61616", "tcp://localhost:61617"});
1:         addCombinationValues("recvUri", new Object[] {"tcp://localhost:61616", "tcp://localhost:61617"});
/////////////////////////////////////////////////////////////////////////
0:         sendUri = "discovery:multicast://default";
/////////////////////////////////////////////////////////////////////////
1:         for (int i = 0; i < BROKER_COUNT; i++) {
1:             brokers[i] = createBroker("org/apache/activemq/usecases/multicast-broker-" + (i + 1) + ".xml");
/////////////////////////////////////////////////////////////////////////
1:         for (int i = 0; i < BROKER_COUNT; i++) {
/////////////////////////////////////////////////////////////////////////
1:         for (int i = 0; i < count; i++) {
/////////////////////////////////////////////////////////////////////////
1:             // Do not pad message text
commit:57b4941
/////////////////////////////////////////////////////////////////////////
1:  * Licensed to the Apache Software Foundation (ASF) under one or more
1:  * contributor license agreements.  See the NOTICE file distributed with
1:  * this work for additional information regarding copyright ownership.
1:  * The ASF licenses this file to You under the Apache License, Version 2.0
1:  * (the "License"); you may not use this file except in compliance with
1:  * the License.  You may obtain a copy of the License at
author:Frederick G. Oconer
-------------------------------------------------------------------------------
commit:d81997d
/////////////////////////////////////////////////////////////////////////
1:         sendUri = "failover:(tcp://localhost:61616,tcp://localhost:61617)";
1:         recvUri = "failover:(tcp://localhost:61616,tcp://localhost:61617)";
1:         sendUri = "failover:(tcp://localhost:61616,tcp://localhost:61617)";
1:         recvUri = "failover:(tcp://localhost:61616,tcp://localhost:61617)";
/////////////////////////////////////////////////////////////////////////
0:         sendUri = "failover:(discovery:multicast://default)";
0:         recvUri = "failover:(discovery:multicast://default)";
0:         sendUri = "failover:(discovery:multicast://default)";
0:         recvUri = "failover:(discovery:multicast://default)";
0: 		sendUri = "discovery:multicast://default";
author:Adrian T. Co
-------------------------------------------------------------------------------
commit:bc71842
/////////////////////////////////////////////////////////////////////////
1:         if (brokers != null) {
0:             for (int i=0; i<BROKER_COUNT; i++) {
1:                 if (brokers[i] != null) {
1:                     brokers[i].stop();
1:                 }
1:             }
1:             super.tearDown();
commit:795166e
/////////////////////////////////////////////////////////////////////////
0:             brokers[i] = createBroker("org/apache/activemq/usecases/multicast-broker-" + (i+1)+ ".xml");
/////////////////////////////////////////////////////////////////////////
1:             brokers[i] = createBroker("org/apache/activemq/usecases/multicast-broker-auto.xml");
author:James Strachan
-------------------------------------------------------------------------------
commit:a677c21
/////////////////////////////////////////////////////////////////////////
1: /**
1:  *
0:  * Copyright 2005-2006 The Apache Software Foundation
1:  *
0:  * Licensed under the Apache License, Version 2.0 (the "License");
0:  * you may not use this file except in compliance with the License.
0:  * You may obtain a copy of the License at
1:  *
0:  * http://www.apache.org/licenses/LICENSE-2.0
1:  *
1:  * Unless required by applicable law or agreed to in writing, software
1:  * distributed under the License is distributed on an "AS IS" BASIS,
1:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:  * See the License for the specific language governing permissions and
1:  * limitations under the License.
1:  */
1: package org.apache.activemq.usecases;
1: 
0: import org.apache.activemq.ActiveMQConnectionFactory;
0: import org.apache.activemq.CombinationTestSupport;
0: import org.apache.activemq.util.MessageIdList;
0: import org.apache.activemq.command.ActiveMQQueue;
0: import org.apache.activemq.broker.BrokerService;
0: import org.apache.activemq.xbean.XBeanBrokerFactory;
1: 
1: import java.net.URI;
1: import java.util.Arrays;
1: 
0: import junit.framework.Test;
1: 
0: import javax.jms.Destination;
0: import javax.jms.ConnectionFactory;
1: import javax.jms.Connection;
0: import javax.jms.Session;
1: import javax.jms.JMSException;
1: import javax.jms.MessageConsumer;
1: import javax.jms.MessageProducer;
1: import javax.jms.TextMessage;
1: 
1: public class TwoBrokerMulticastQueueTest extends CombinationTestSupport {
1: 
1:     public static Test suite() {
1:         return suite(TwoBrokerMulticastQueueTest.class);
1:     }
1: 
1:     public static void main(String[] args) {
1:         junit.textui.TestRunner.run(suite());
1:     }
1: 
0:     public static final int MESSAGE_COUNT  = 100;
0:     public static final int BROKER_COUNT   = 2;
0:     public static final int CONSUMER_COUNT = 20;
1: 
0:     private BrokerService[] brokers;
0:     public String sendUri, recvUri;
1: 
1:     public void setUp() throws Exception {
1:         super.setAutoFail(true);
1:         super.setUp();
1:     }
1: 
1:     public void tearDown() throws Exception {
0:         for (int i=0; i<BROKER_COUNT; i++) {
0:             brokers[i].stop();
1:         }
0:         super.tearDown();
1:     }
1: 
1:     private void doSendReceiveTest() throws Exception {
1:         Destination dest = new ActiveMQQueue("TEST.FOO");
1: 
1:         ConnectionFactory sendFactory = createConnectionFactory(sendUri);
1: 
1:         Connection conn = createConnection(sendFactory);
1:         sendMessages(conn, dest, MESSAGE_COUNT);
1: 
1:         Thread.sleep(500);
1: 
1:         ConnectionFactory recvFactory = createConnectionFactory(recvUri);
1:         assertEquals(MESSAGE_COUNT, receiveMessages(createConnection(recvFactory), dest, 0));
1:     }
1: 
1:     private void doMultipleConsumersConnectTest() throws Exception {
1:         Destination dest = new ActiveMQQueue("TEST.FOO");
1: 
1:         ConnectionFactory sendFactory = createConnectionFactory(sendUri);
1: 
1:         Connection conn = createConnection(sendFactory);
1:         sendMessages(conn, dest, MESSAGE_COUNT);
1: 
1:         Thread.sleep(500);
1: 
1:         ConnectionFactory recvFactory = createConnectionFactory(recvUri);
1:         assertEquals(MESSAGE_COUNT, receiveMessages(createConnection(recvFactory), dest, 0));
1: 
0:         for (int i=0; i<(CONSUMER_COUNT-1); i++) {
1:             assertEquals(0, receiveMessages(createConnection(recvFactory), dest, 200));
1:         }
1:     }
1: 
1:     public void initCombosForTestSendReceive() {
0:         addCombinationValues("sendUri", new Object[] {
0:             "tcp://localhost:61616", "tcp://localhost:61617"
0:         });
0:         addCombinationValues("recvUri", new Object[] {
0:             "tcp://localhost:61616", "tcp://localhost:61617"
0:         });
1:     }
1: 
1:     public void testSendReceive() throws Exception {
1:         createMulticastBrokerNetwork();
1:         doSendReceiveTest();
1:     }
1: 
1:     public void initCombosForTestMultipleConsumersConnect() {
0:         addCombinationValues("sendUri", new Object[] {
0:             "tcp://localhost:61616", "tcp://localhost:61617",
0:         });
0:         addCombinationValues("recvUri", new Object[] {
0:             "tcp://localhost:61616", "tcp://localhost:61617"
0:         });
1:     }
1: 
1:     public void testMultipleConsumersConnect() throws Exception {
1:         createMulticastBrokerNetwork();
1:         doMultipleConsumersConnectTest();
1:     }
1: 
1:     public void testSendReceiveUsingFailover() throws Exception {
0:         sendUri = "failover:tcp://localhost:61616,tcp://localhost:61617";
0:         recvUri = "failover:tcp://localhost:61616,tcp://localhost:61617";
1:         createMulticastBrokerNetwork();
1:         doSendReceiveTest();
1:     }
1: 
1:     public void testMultipleConsumersConnectUsingFailover() throws Exception {
0:         sendUri = "failover:tcp://localhost:61616,tcp://localhost:61617";
0:         recvUri = "failover:tcp://localhost:61616,tcp://localhost:61617";
1:         createMulticastBrokerNetwork();
1:         doMultipleConsumersConnectTest();
1:     }
1: 
1:     public void testSendReceiveUsingDiscovery() throws Exception {
0:         sendUri = "discovery:multicast://default";
0:         recvUri = "discovery:multicast://default";
1:         createMulticastBrokerNetwork();
1:         doSendReceiveTest();
1:     }
1: 
1:     public void testMultipleConsumersConnectUsingDiscovery() throws Exception {
0:         sendUri = "discovery:multicast://default";
0:         recvUri = "discovery:multicast://default";
1:         createMulticastBrokerNetwork();
1:         doMultipleConsumersConnectTest();
1:     }
1: 
1:     public void testSendReceiveUsingAutoAssignFailover() throws Exception {
0:         sendUri = "failover:multicast://default";
0:         recvUri = "failover:multicast://default";
1:         createAutoAssignMulticastBrokerNetwork();
1:         doSendReceiveTest();
1:     }
1: 
1:     public void testMultipleConsumersConnectUsingAutoAssignFailover() throws Exception {
0:         sendUri = "failover:multicast://default";
0:         recvUri = "failover:multicast://default";
1:         createAutoAssignMulticastBrokerNetwork();
1:         doMultipleConsumersConnectTest();
1:     }
1: 
1:     public void testSendReceiveUsingAutoAssignDiscovery() throws Exception {
0:         sendUri = "discovery:multicast://default";
0:         recvUri = "discovery:multicast://default";
1:         createAutoAssignMulticastBrokerNetwork();
1:         doSendReceiveTest();
1:     }
1: 
1:     public void testMultipleConsumersConnectUsingAutoAssignDiscovery() throws Exception {
0:         sendUri = "discovery:multicast://default";
0:         recvUri = "discovery:multicast://default";
1:         createAutoAssignMulticastBrokerNetwork();
1:         doMultipleConsumersConnectTest();
1:     }
1: 
1:     protected void createMulticastBrokerNetwork() throws Exception {
1: 
1:         brokers = new BrokerService[BROKER_COUNT];
0:         for (int i=0; i<BROKER_COUNT; i++) {
0:             brokers[i] = createBroker("xbean:multicast-broker-" + (i+1)+ ".xml");
1:             brokers[i].start();
1:         }
1: 
1:         // Let the brokers discover each other first
1:         Thread.sleep(1000);
1:     }
1: 
1:     protected void createAutoAssignMulticastBrokerNetwork() throws Exception {
1:         brokers = new BrokerService[BROKER_COUNT];
0:         for (int i=0; i<BROKER_COUNT; i++) {
0:             brokers[i] = createBroker("xbean:multicast-broker-auto.xml");
1:             brokers[i].start();
1:         }
1: 
1:         // Let the brokers discover each other first
1:         Thread.sleep(1000);
1:     }
1: 
1:     protected BrokerService createBroker(String uri) throws Exception {
1:         return (new XBeanBrokerFactory()).createBroker(new URI(uri));
1:     }
1: 
1:     protected ConnectionFactory createConnectionFactory(String uri) {
1:         return new ActiveMQConnectionFactory(uri);
1:     }
1: 
1:     protected Connection createConnection(ConnectionFactory factory) throws JMSException {
1:         Connection conn = factory.createConnection();
1:         return conn;
1:     }
1: 
1:     protected int receiveMessages(Connection conn, Destination dest, int waitTime) throws JMSException, InterruptedException {
1:         conn.start();
1:         MessageIdList list = new MessageIdList();
1:         Session sess = conn.createSession(false, Session.AUTO_ACKNOWLEDGE);
1:         MessageConsumer consumer = sess.createConsumer(dest);
1:         consumer.setMessageListener(list);
1: 
1:         if (waitTime > 0) {
1:             Thread.sleep(waitTime);
1:         } else {
1:             list.waitForMessagesToArrive(MESSAGE_COUNT);
1:         }
1: 
1:         conn.close();
1: 
1:         return list.getMessageCount();
1:     }
1: 
1:     protected void sendMessages(Connection conn, Destination dest, int count) throws JMSException {
1:         conn.start();
1:         Session sess = conn.createSession(false, Session.AUTO_ACKNOWLEDGE);
1:         MessageProducer prod = sess.createProducer(dest);
1: 
0:         for (int i=0; i<count; i++) {
1:             prod.send(createTextMessage(sess, "Message " + i, 1024));
1:         }
1: 
1:         conn.close();
1:     }
1: 
1:     protected TextMessage createTextMessage(Session session, String initText, int messageSize) throws JMSException {
1:         TextMessage msg = session.createTextMessage();
1: 
1:         // Pad message text
1:         if (initText.length() < messageSize) {
1:             char[] data = new char[messageSize - initText.length()];
1:             Arrays.fill(data, '*');
1:             String str = new String(data);
1:             msg.setText(initText + str);
1: 
0:         // Do not pad message text
1:         } else {
1:             msg.setText(initText);
1:         }
1: 
1:         return msg;
1:     }
1: 
1: }
============================================================================