1:09054fc: /**
1:09054fc:  * Licensed to the Apache Software Foundation (ASF) under one or more
1:09054fc:  * contributor license agreements.  See the NOTICE file distributed with
1:09054fc:  * this work for additional information regarding copyright ownership.
1:09054fc:  * The ASF licenses this file to You under the Apache License, Version 2.0
1:09054fc:  * (the "License"); you may not use this file except in compliance with
1:09054fc:  * the License.  You may obtain a copy of the License at
1:09054fc:  *
1:09054fc:  *      http://www.apache.org/licenses/LICENSE-2.0
1:09054fc:  *
1:09054fc:  * Unless required by applicable law or agreed to in writing, software
1:09054fc:  * distributed under the License is distributed on an "AS IS" BASIS,
1:09054fc:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:09054fc:  * See the License for the specific language governing permissions and
1:09054fc:  * limitations under the License.
1:09054fc:  */
1:09054fc: package org.apache.activemq.network;
1:09054fc: 
1:09054fc: import static org.junit.Assert.assertEquals;
1:b1c4b18: import static org.junit.Assert.assertTrue;
1:09054fc: 
1:09054fc: import java.io.File;
1:b1c4b18: import java.util.ArrayList;
1:b1c4b18: import java.util.List;
1:09054fc: 
1:09054fc: import javax.jms.Connection;
1:09054fc: import javax.jms.JMSException;
1:09054fc: import javax.jms.MessageConsumer;
1:09054fc: import javax.jms.Session;
1:09054fc: 
1:09054fc: import org.apache.activemq.broker.BrokerService;
1:09054fc: import org.apache.activemq.broker.ConnectionContext;
1:e73ab34: import org.apache.activemq.broker.region.Destination;
1:e73ab34: import org.apache.activemq.broker.region.DestinationFilter;
1:09054fc: import org.apache.activemq.broker.region.DestinationStatistics;
1:b1c4b18: import org.apache.activemq.broker.region.DurableTopicSubscription;
1:e73ab34: import org.apache.activemq.broker.region.Subscription;
1:b1c4b18: import org.apache.activemq.broker.region.Topic;
1:09054fc: import org.apache.activemq.command.ActiveMQTopic;
1:09054fc: import org.apache.activemq.command.RemoveSubscriptionInfo;
1:b1c4b18: import org.apache.activemq.util.SubscriptionKey;
1:09054fc: import org.apache.activemq.util.Wait;
1:b1c4b18: import org.apache.activemq.util.Wait.Condition;
1:09054fc: import org.junit.Rule;
1:09054fc: import org.junit.rules.TemporaryFolder;
1:09054fc: 
1:09054fc: 
1:09054fc: public abstract class DynamicNetworkTestSupport {
1:09054fc: 
1:09054fc:     protected Connection localConnection;
1:09054fc:     protected Connection remoteConnection;
1:09054fc:     protected BrokerService localBroker;
1:09054fc:     protected BrokerService remoteBroker;
1:09054fc:     protected Session localSession;
1:09054fc:     protected Session remoteSession;
1:09054fc:     protected ActiveMQTopic included;
1:09054fc:     protected ActiveMQTopic excluded;
1:09054fc:     protected String testTopicName = "include.test.bar";
1:09054fc:     protected String excludeTopicName = "exclude.test.bar";
1:09054fc:     protected String clientId = "clientId";
1:09054fc:     protected String subName = "subId";
1:09054fc: 
1:09054fc:     @Rule
1:09054fc:     public TemporaryFolder tempFolder = new TemporaryFolder(new File("target"));
1:b1c4b18: 
1:b1c4b18:     protected void doTearDown() throws Exception {
1:b1c4b18:         stopLocalBroker();
1:b1c4b18:         stopRemoteBroker();
1:b1c4b18:     }
1:a038655: 
1:b1c4b18:     protected void stopLocalBroker() throws Exception {
1:b1c4b18:         if (localConnection != null) {
1:b1c4b18:             localConnection.close();
1:b1c4b18:         }
1:b1c4b18:         if (localBroker != null) {
1:b1c4b18:             localBroker.stop();
1:b1c4b18:             localBroker.waitUntilStopped();
1:b1c4b18:         }
1:b1c4b18:     }
1:a038655: 
1:b1c4b18:     protected void stopRemoteBroker() throws Exception {
1:b1c4b18:         if (remoteConnection != null) {
1:b1c4b18:             remoteConnection.close();
1:b1c4b18:         }
1:b1c4b18:         if (remoteBroker != null) {
1:b1c4b18:             remoteBroker.stop();
1:b1c4b18:             remoteBroker.waitUntilStopped();
1:b1c4b18:         }
1:b1c4b18:     }
1:b1c4b18: 
1:b1c4b18: 
1:a038655:     protected void assertBridgeStarted() throws Exception {
1:a038655:         assertTrue(Wait.waitFor(new Condition() {
1:a038655:             @Override
1:a038655:             public boolean isSatisified() throws Exception {
1:a038655:                 return localBroker.getNetworkConnectors().get(0).activeBridges().size() == 1;
1:a038655:             }
1:a038655:         }, 10000, 500));
1:a038655:     }
1:a038655: 
1:09054fc:     protected RemoveSubscriptionInfo getRemoveSubscriptionInfo(final ConnectionContext context,
1:09054fc:             final BrokerService brokerService) throws Exception {
1:09054fc:         RemoveSubscriptionInfo info = new RemoveSubscriptionInfo();
1:09054fc:         info.setClientId(clientId);
1:09054fc:         info.setSubcriptionName(subName);
1:09054fc:         context.setBroker(brokerService.getBroker());
1:09054fc:         context.setClientId(clientId);
1:09054fc:         return info;
1:09054fc:     }
1:09054fc: 
1:09054fc:     protected void waitForConsumerCount(final DestinationStatistics destinationStatistics, final int count) throws Exception {
1:e73ab34:         assertTrue(Wait.waitFor(new Wait.Condition() {
1:09054fc:             @Override
1:09054fc:             public boolean isSatisified() throws Exception {
1:09054fc:                 //should only be 1 for the composite destination creation
1:09054fc:                 return count == destinationStatistics.getConsumers().getCount();
1:09054fc:             }
1:e73ab34:         }));
1:09054fc:     }
1:09054fc: 
1:09054fc:     protected void waitForDispatchFromLocalBroker(final DestinationStatistics destinationStatistics, final int count) throws Exception {
1:e73ab34:         assertTrue(Wait.waitFor(new Wait.Condition() {
1:09054fc:             @Override
1:09054fc:             public boolean isSatisified() throws Exception {
1:09054fc:                 return count == destinationStatistics.getDequeues().getCount() &&
1:09054fc:                        count == destinationStatistics.getDispatched().getCount() &&
1:09054fc:                        count == destinationStatistics.getForwards().getCount();
1:09054fc:             }
1:e73ab34:         }));
1:09054fc:     }
1:09054fc: 
1:09054fc:     protected void assertLocalBrokerStatistics(final DestinationStatistics localStatistics, final int count) {
1:09054fc:         assertEquals("local broker dest stat dispatched", count, localStatistics.getDispatched().getCount());
1:09054fc:         assertEquals("local broker dest stat dequeues", count, localStatistics.getDequeues().getCount());
1:09054fc:         assertEquals("local broker dest stat forwards", count, localStatistics.getForwards().getCount());
1:09054fc:     }
1:09054fc: 
1:09054fc:     protected interface ConsumerCreator {
1:09054fc:         MessageConsumer createConsumer() throws JMSException;
1:09054fc:     }
1:09054fc: 
1:e73ab34:     protected void assertNCDurableSubsCount(final BrokerService brokerService,
1:b1c4b18:             final ActiveMQTopic dest, final int count) throws Exception {
1:b1c4b18:         assertTrue(Wait.waitFor(new Condition() {
1:b1c4b18:             @Override
1:b1c4b18:             public boolean isSatisified() throws Exception {
1:e73ab34:                 return count == getNCDurableSubs(brokerService, dest).size();
1:b1c4b18:             }
1:b1c4b18:         }, 10000, 500));
1:b1c4b18:     }
1:b1c4b18: 
1:e73ab34:     protected void assertConsumersCount(final BrokerService brokerService,
1:e73ab34:             final ActiveMQTopic dest, final int count) throws Exception {
1:e73ab34:         assertTrue(Wait.waitFor(new Condition() {
1:e73ab34:             @Override
1:e73ab34:             public boolean isSatisified() throws Exception {
1:e73ab34:                 return count == getConsumers(brokerService, dest).size();
1:e73ab34:             }
1:e73ab34:         }, 10000, 500));
1:e73ab34:     }
1:e73ab34: 
1:e73ab34:     protected List<Subscription> getConsumers(final BrokerService brokerService,
1:e73ab34:             final ActiveMQTopic dest) throws Exception {
1:e73ab34:         Topic destination = (Topic) brokerService.getDestination(dest);
1:e73ab34:         return destination.getConsumers();
1:e73ab34:     }
1:e73ab34: 
1:b1c4b18:     protected List<DurableTopicSubscription> getSubscriptions(final BrokerService brokerService,
1:b1c4b18:             final ActiveMQTopic dest) throws Exception {
1:b1c4b18:         List<DurableTopicSubscription> subs = new ArrayList<>();
2:b1c4b18:         Topic destination = (Topic) brokerService.getDestination(dest);
1:b1c4b18:         for (SubscriptionKey key : destination.getDurableTopicSubs().keySet()) {
1:b1c4b18:             if (!key.getSubscriptionName().startsWith(DemandForwardingBridge.DURABLE_SUB_PREFIX)) {
1:b1c4b18:                 DurableTopicSubscription sub = destination.getDurableTopicSubs().get(key);
1:b1c4b18:                 if (sub != null) {
1:b1c4b18:                     subs.add(sub);
1:b1c4b18:                 }
1:b1c4b18:             }
1:b1c4b18:         }
1:b1c4b18:         return subs;
1:b1c4b18:     }
1:b1c4b18: 
1:e73ab34:     protected List<DurableTopicSubscription> getNCDurableSubs(final BrokerService brokerService,
1:b1c4b18:             final ActiveMQTopic dest) throws Exception {
1:b1c4b18:         List<DurableTopicSubscription> subs = new ArrayList<>();
1:e73ab34:         Destination d = brokerService.getDestination(dest);
1:e73ab34:         Topic destination = null;
1:e73ab34:         if (d instanceof DestinationFilter){
1:e73ab34:             destination = ((DestinationFilter) d).getAdaptor(Topic.class);
1:e73ab34:         } else {
1:e73ab34:             destination = (Topic) d;
1:e73ab34:         }
1:a038655: 
1:e73ab34: 
1:b1c4b18:         for (SubscriptionKey key : destination.getDurableTopicSubs().keySet()) {
1:b1c4b18:             if (key.getSubscriptionName().startsWith(DemandForwardingBridge.DURABLE_SUB_PREFIX)) {
1:b1c4b18:                 DurableTopicSubscription sub = destination.getDurableTopicSubs().get(key);
1:b1c4b18:                 if (sub != null) {
1:b1c4b18:                     subs.add(sub);
1:b1c4b18:                 }
1:b1c4b18:             }
1:b1c4b18:         }
1:b1c4b18: 
1:b1c4b18:         return subs;
1:b1c4b18:     }
1:09054fc: 
1:e73ab34:     protected void removeSubscription(final BrokerService brokerService, final ActiveMQTopic topic,
1:e73ab34:             final String subName) throws Exception {
1:e73ab34:         final RemoveSubscriptionInfo info = new RemoveSubscriptionInfo();
1:e73ab34:         info.setClientId(clientId);
1:e73ab34:         info.setSubscriptionName(subName);
1:e73ab34: 
1:e73ab34:         final ConnectionContext context = new ConnectionContext();
1:e73ab34:         context.setBroker(brokerService.getBroker());
1:e73ab34:         context.setClientId(clientId);
1:e73ab34: 
1:e73ab34:         brokerService.getBroker().removeSubscription(context, info);
1:e73ab34:     }
1:e73ab34: 
1:e73ab34:     protected void assertSubscriptionsCount(final BrokerService brokerService,
1:e73ab34:             final ActiveMQTopic dest, final int count) throws Exception {
1:e73ab34:         assertTrue(Wait.waitFor(new Condition() {
1:e73ab34:             @Override
1:e73ab34:             public boolean isSatisified() throws Exception {
1:e73ab34:                 return count == getSubscriptions(brokerService, dest).size();
1:e73ab34:             }
1:e73ab34:         }, 10000, 500));
1:e73ab34:     }
1:e73ab34: 
1:e73ab34: 
1:09054fc: }
============================================================================
author:Christopher L. Shannon (cshannon)
-------------------------------------------------------------------------------
commit:a038655
/////////////////////////////////////////////////////////////////////////
1: 
1:     protected void assertBridgeStarted() throws Exception {
1:         assertTrue(Wait.waitFor(new Condition() {
1:             @Override
1:             public boolean isSatisified() throws Exception {
1:                 return localBroker.getNetworkConnectors().get(0).activeBridges().size() == 1;
1:             }
1:         }, 10000, 500));
1:     }
1: 
/////////////////////////////////////////////////////////////////////////
1: 
/////////////////////////////////////////////////////////////////////////
1: 
commit:e73ab34
/////////////////////////////////////////////////////////////////////////
1: import org.apache.activemq.broker.region.Destination;
1: import org.apache.activemq.broker.region.DestinationFilter;
1: import org.apache.activemq.broker.region.Subscription;
/////////////////////////////////////////////////////////////////////////
1:         assertTrue(Wait.waitFor(new Wait.Condition() {
1:         }));
1:         assertTrue(Wait.waitFor(new Wait.Condition() {
1:         }));
/////////////////////////////////////////////////////////////////////////
1:     protected void assertNCDurableSubsCount(final BrokerService brokerService,
1:                 return count == getNCDurableSubs(brokerService, dest).size();
1:     protected void assertConsumersCount(final BrokerService brokerService,
1:             final ActiveMQTopic dest, final int count) throws Exception {
1:         assertTrue(Wait.waitFor(new Condition() {
1:             @Override
1:             public boolean isSatisified() throws Exception {
1:                 return count == getConsumers(brokerService, dest).size();
1:             }
1:         }, 10000, 500));
1:     }
1: 
1:     protected List<Subscription> getConsumers(final BrokerService brokerService,
1:             final ActiveMQTopic dest) throws Exception {
1:         Topic destination = (Topic) brokerService.getDestination(dest);
1:         return destination.getConsumers();
1:     }
1: 
/////////////////////////////////////////////////////////////////////////
1:     protected List<DurableTopicSubscription> getNCDurableSubs(final BrokerService brokerService,
1:         Destination d = brokerService.getDestination(dest);
1:         Topic destination = null;
1:         if (d instanceof DestinationFilter){
1:             destination = ((DestinationFilter) d).getAdaptor(Topic.class);
1:         } else {
1:             destination = (Topic) d;
1:         }
1: 
/////////////////////////////////////////////////////////////////////////
1:     protected void removeSubscription(final BrokerService brokerService, final ActiveMQTopic topic,
1:             final String subName) throws Exception {
1:         final RemoveSubscriptionInfo info = new RemoveSubscriptionInfo();
1:         info.setClientId(clientId);
1:         info.setSubscriptionName(subName);
1: 
1:         final ConnectionContext context = new ConnectionContext();
1:         context.setBroker(brokerService.getBroker());
1:         context.setClientId(clientId);
1: 
1:         brokerService.getBroker().removeSubscription(context, info);
1:     }
1: 
1:     protected void assertSubscriptionsCount(final BrokerService brokerService,
1:             final ActiveMQTopic dest, final int count) throws Exception {
1:         assertTrue(Wait.waitFor(new Condition() {
1:             @Override
1:             public boolean isSatisified() throws Exception {
1:                 return count == getSubscriptions(brokerService, dest).size();
1:             }
1:         }, 10000, 500));
1:     }
1: 
1: 
commit:b1c4b18
/////////////////////////////////////////////////////////////////////////
1: import static org.junit.Assert.assertTrue;
1: import java.util.ArrayList;
1: import java.util.List;
/////////////////////////////////////////////////////////////////////////
1: import org.apache.activemq.broker.region.DurableTopicSubscription;
1: import org.apache.activemq.broker.region.Topic;
1: import org.apache.activemq.util.SubscriptionKey;
1: import org.apache.activemq.util.Wait.Condition;
/////////////////////////////////////////////////////////////////////////
1:     protected void doTearDown() throws Exception {
1:         stopLocalBroker();
1:         stopRemoteBroker();
1:     }
1: 
1:     protected void stopLocalBroker() throws Exception {
1:         if (localConnection != null) {
1:             localConnection.close();
1:         }
1:         if (localBroker != null) {
1:             localBroker.stop();
1:             localBroker.waitUntilStopped();
1:         }
1:     }
1: 
1:     protected void stopRemoteBroker() throws Exception {
1:         if (remoteConnection != null) {
1:             remoteConnection.close();
1:         }
1:         if (remoteBroker != null) {
1:             remoteBroker.stop();
1:             remoteBroker.waitUntilStopped();
1:         }
1:     }
1: 
/////////////////////////////////////////////////////////////////////////
0:     protected void assertNCSubscriptionsCount(final BrokerService brokerService,
1:             final ActiveMQTopic dest, final int count) throws Exception {
1:         assertTrue(Wait.waitFor(new Condition() {
1:             @Override
1:             public boolean isSatisified() throws Exception {
0:                 return count == getNCSubscriptions(brokerService, dest).size();
1:             }
1:         }, 10000, 500));
1:     }
1: 
1:     protected List<DurableTopicSubscription> getSubscriptions(final BrokerService brokerService,
1:             final ActiveMQTopic dest) throws Exception {
1:         List<DurableTopicSubscription> subs = new ArrayList<>();
1:         Topic destination = (Topic) brokerService.getDestination(dest);
1:         for (SubscriptionKey key : destination.getDurableTopicSubs().keySet()) {
1:             if (!key.getSubscriptionName().startsWith(DemandForwardingBridge.DURABLE_SUB_PREFIX)) {
1:                 DurableTopicSubscription sub = destination.getDurableTopicSubs().get(key);
1:                 if (sub != null) {
1:                     subs.add(sub);
1:                 }
1:             }
1:         }
1:         return subs;
1:     }
1: 
0:     protected List<DurableTopicSubscription> getNCSubscriptions(final BrokerService brokerService,
1:             final ActiveMQTopic dest) throws Exception {
1:         List<DurableTopicSubscription> subs = new ArrayList<>();
1:         Topic destination = (Topic) brokerService.getDestination(dest);
1:         for (SubscriptionKey key : destination.getDurableTopicSubs().keySet()) {
1:             if (key.getSubscriptionName().startsWith(DemandForwardingBridge.DURABLE_SUB_PREFIX)) {
1:                 DurableTopicSubscription sub = destination.getDurableTopicSubs().get(key);
1:                 if (sub != null) {
1:                     subs.add(sub);
1:                 }
1:             }
1:         }
1:         return subs;
1:     }
1: 
commit:09054fc
/////////////////////////////////////////////////////////////////////////
1: /**
1:  * Licensed to the Apache Software Foundation (ASF) under one or more
1:  * contributor license agreements.  See the NOTICE file distributed with
1:  * this work for additional information regarding copyright ownership.
1:  * The ASF licenses this file to You under the Apache License, Version 2.0
1:  * (the "License"); you may not use this file except in compliance with
1:  * the License.  You may obtain a copy of the License at
1:  *
1:  *      http://www.apache.org/licenses/LICENSE-2.0
1:  *
1:  * Unless required by applicable law or agreed to in writing, software
1:  * distributed under the License is distributed on an "AS IS" BASIS,
1:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:  * See the License for the specific language governing permissions and
1:  * limitations under the License.
1:  */
1: package org.apache.activemq.network;
1: 
1: import static org.junit.Assert.assertEquals;
1: 
1: import java.io.File;
1: 
1: import javax.jms.Connection;
1: import javax.jms.JMSException;
1: import javax.jms.MessageConsumer;
1: import javax.jms.Session;
1: 
1: import org.apache.activemq.broker.BrokerService;
1: import org.apache.activemq.broker.ConnectionContext;
1: import org.apache.activemq.broker.region.DestinationStatistics;
1: import org.apache.activemq.command.ActiveMQTopic;
1: import org.apache.activemq.command.RemoveSubscriptionInfo;
1: import org.apache.activemq.util.Wait;
1: import org.junit.Rule;
1: import org.junit.rules.TemporaryFolder;
1: 
1: 
1: public abstract class DynamicNetworkTestSupport {
1: 
1:     protected Connection localConnection;
1:     protected Connection remoteConnection;
1:     protected BrokerService localBroker;
1:     protected BrokerService remoteBroker;
1:     protected Session localSession;
1:     protected Session remoteSession;
1:     protected ActiveMQTopic included;
1:     protected ActiveMQTopic excluded;
1:     protected String testTopicName = "include.test.bar";
1:     protected String excludeTopicName = "exclude.test.bar";
1:     protected String clientId = "clientId";
1:     protected String subName = "subId";
1: 
1:     @Rule
1:     public TemporaryFolder tempFolder = new TemporaryFolder(new File("target"));
1: 
1:     protected RemoveSubscriptionInfo getRemoveSubscriptionInfo(final ConnectionContext context,
1:             final BrokerService brokerService) throws Exception {
1:         RemoveSubscriptionInfo info = new RemoveSubscriptionInfo();
1:         info.setClientId(clientId);
1:         info.setSubcriptionName(subName);
1:         context.setBroker(brokerService.getBroker());
1:         context.setClientId(clientId);
1:         return info;
1:     }
1: 
1:     protected void waitForConsumerCount(final DestinationStatistics destinationStatistics, final int count) throws Exception {
0:         Wait.waitFor(new Wait.Condition() {
1:             @Override
1:             public boolean isSatisified() throws Exception {
1:                 //should only be 1 for the composite destination creation
1:                 return count == destinationStatistics.getConsumers().getCount();
1:             }
0:         });
1:     }
1: 
1:     protected void waitForDispatchFromLocalBroker(final DestinationStatistics destinationStatistics, final int count) throws Exception {
0:         Wait.waitFor(new Wait.Condition() {
1:             @Override
1:             public boolean isSatisified() throws Exception {
1:                 return count == destinationStatistics.getDequeues().getCount() &&
1:                        count == destinationStatistics.getDispatched().getCount() &&
1:                        count == destinationStatistics.getForwards().getCount();
1:             }
0:         });
1:     }
1: 
1:     protected void assertLocalBrokerStatistics(final DestinationStatistics localStatistics, final int count) {
1:         assertEquals("local broker dest stat dispatched", count, localStatistics.getDispatched().getCount());
1:         assertEquals("local broker dest stat dequeues", count, localStatistics.getDequeues().getCount());
1:         assertEquals("local broker dest stat forwards", count, localStatistics.getForwards().getCount());
1:     }
1: 
1:     protected interface ConsumerCreator {
1:         MessageConsumer createConsumer() throws JMSException;
1:     }
1: 
1: }
============================================================================