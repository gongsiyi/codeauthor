1:b5b087d: /**
1:b5b087d:  * Licensed to the Apache Software Foundation (ASF) under one or more
1:b5b087d:  * contributor license agreements.  See the NOTICE file distributed with
1:b5b087d:  * this work for additional information regarding copyright ownership.
1:b5b087d:  * The ASF licenses this file to You under the Apache License, Version 2.0
1:b5b087d:  * (the "License"); you may not use this file except in compliance with
1:b5b087d:  * the License.  You may obtain a copy of the License at
1:b5b087d:  *
1:b5b087d:  *      http://www.apache.org/licenses/LICENSE-2.0
1:b5b087d:  *
1:b5b087d:  * Unless required by applicable law or agreed to in writing, software
1:b5b087d:  * distributed under the License is distributed on an "AS IS" BASIS,
1:b5b087d:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:b5b087d:  * See the License for the specific language governing permissions and
1:b5b087d:  * limitations under the License.
1:b5b087d:  */
1:b5b087d: package org.apache.activemq.transport.mqtt;
1:b5b087d: 
1:b5b087d: import static org.junit.Assert.assertTrue;
1:b5b087d: import static org.junit.Assert.fail;
1:b5b087d: 
1:b5b087d: import java.io.EOFException;
1:b5b087d: import java.lang.reflect.Method;
1:b5b087d: import java.util.Arrays;
1:b5b087d: import java.util.Collection;
1:b5b087d: import java.util.concurrent.CountDownLatch;
1:b5b087d: import java.util.concurrent.TimeUnit;
1:b5b087d: import java.util.concurrent.atomic.AtomicReference;
1:b5b087d: 
1:b5b087d: import org.apache.activemq.util.Wait;
1:b5b087d: import org.apache.activemq.util.Wait.Condition;
1:667ea7c: import org.fusesource.hawtdispatch.DispatchQueue;
1:667ea7c: import org.fusesource.hawtdispatch.internal.SerialDispatchQueue;
1:b5b087d: import org.fusesource.hawtdispatch.transport.Transport;
1:b5b087d: import org.fusesource.mqtt.client.BlockingConnection;
1:b5b087d: import org.fusesource.mqtt.client.Callback;
1:b5b087d: import org.fusesource.mqtt.client.CallbackConnection;
1:b5b087d: import org.fusesource.mqtt.client.FutureConnection;
1:b5b087d: import org.fusesource.mqtt.client.MQTT;
1:b5b087d: import org.fusesource.mqtt.client.Tracer;
1:b5b087d: import org.fusesource.mqtt.codec.MQTTFrame;
1:b5b087d: import org.fusesource.mqtt.codec.MQTTProtocolCodec;
1:b5b087d: import org.fusesource.mqtt.codec.PINGREQ;
1:b5b087d: import org.fusesource.mqtt.codec.PINGRESP;
1:b5b087d: import org.junit.Rule;
1:b5b087d: import org.junit.Test;
1:b5b087d: import org.junit.rules.Timeout;
1:b5b087d: import org.junit.runner.RunWith;
1:b5b087d: import org.junit.runners.Parameterized;
1:b5b087d: import org.junit.runners.Parameterized.Parameters;
1:667ea7c: import org.mockito.Mockito;
1:b5b087d: import org.slf4j.Logger;
1:b5b087d: import org.slf4j.LoggerFactory;
1:b5b087d: 
1:b5b087d: /**
1:b5b087d:  * Test to show that a PINGRESP will only be sent for a PINGREQ
1:b5b087d:  * packet after a CONNECT packet has been received.
1:b5b087d:  */
1:b5b087d: @RunWith(Parameterized.class)
1:b5b087d: public class MQTTPingReqTest extends MQTTTestSupport {
1:b5b087d: 
1:b5b087d:     private static final Logger LOG = LoggerFactory.getLogger(MQTTPingReqTest.class);
1:b5b087d: 
1:b5b087d:     @Rule
1:b5b087d:     public Timeout timeout = new Timeout(15, TimeUnit.SECONDS);
1:b5b087d: 
1:b5b087d:     private final String version;
1:b5b087d: 
1:b5b087d:     @Parameters(name = "mqtt-version:{0}")
1:b5b087d:     public static Collection<Object[]> data() {
1:b5b087d:         return Arrays.asList(new Object[][] {
1:b5b087d:             {"3.1"},
1:b5b087d:             {"3.1.1"}
1:b5b087d:         });
1:b5b087d:     }
1:b5b087d: 
1:b5b087d:     public MQTTPingReqTest(final String version) {
1:b5b087d:         this.version = version;
1:b5b087d:     }
1:b5b087d: 
1:b5b087d:     @Test(expected=EOFException.class)
1:b5b087d:     public void testPingReqWithoutConnectFail() throws Exception {
1:b5b087d:         MQTT mqtt = createMQTTConnection();
1:b5b087d:         mqtt.setClientId("clientId");
1:b5b087d:         mqtt.setVersion(version);
1:b5b087d: 
1:b5b087d:         final CountDownLatch latch = new CountDownLatch(1);
1:b5b087d:         final AtomicReference<Transport> transport = new AtomicReference<>();
1:b5b087d:         final AtomicReference<Throwable> error = new AtomicReference<>();
1:b5b087d:         final Callback<Transport> con = new Callback<Transport>() {
1:b5b087d: 
1:b5b087d:             @Override
1:b5b087d:             public void onSuccess(Transport value) {
1:b5b087d:                 transport.set(value);
1:b5b087d:                 latch.countDown();
1:b5b087d:             }
1:b5b087d: 
1:b5b087d:             @Override
1:b5b087d:             public void onFailure(Throwable value) {
1:b5b087d:                 error.set(value);
1:b5b087d:                 latch.countDown();
1:b5b087d:             }
1:b5b087d:         };
1:b5b087d: 
1:b5b087d:         //Connect to the transport by using the createTransport method with a custom callback
1:b5b087d:         //This will ensure that we connect without sending a CONNECT packet for testing
1:b5b087d:         //and that we won't receive automatically
1:b5b087d:         CallbackConnection connection = new CallbackConnection(mqtt);
1:b5b087d:         Method createTransportMethod = connection.getClass().getDeclaredMethod("createTransport", Callback.class);
1:b5b087d:         createTransportMethod.setAccessible(true);
1:b5b087d:         createTransportMethod.invoke(connection, con);
1:b5b087d:         latch.await();
1:b5b087d: 
1:b5b087d:         //Make sure no error on connect
1:b5b087d:         if (error.get() != null) {
1:b5b087d:             LOG.error(error.get().getMessage(), error.get());
1:b5b087d:             fail(error.get().getMessage());
1:b5b087d:         }
1:b5b087d: 
1:667ea7c:         disableDispatchAssertion(transport.get());
1:667ea7c: 
1:b5b087d:         //Send a PINGREQ without a connect packet first
1:b5b087d:         final MQTTProtocolCodec codec = new MQTTProtocolCodec();
1:b5b087d:         codec.setTransport(transport.get());
1:b5b087d:         transport.get().offer(new PINGREQ().encode());
1:b5b087d: 
1:b5b087d:         //Protocol should throw an exception since we never sent a CONNECT
1:b5b087d:         Wait.waitFor(new Condition() {
1:b5b087d: 
1:b5b087d:             @Override
1:b5b087d:             public boolean isSatisified() throws Exception {
1:b5b087d:                 //Wait for exception to be thrown
1:b5b087d:                 codec.read();
1:b5b087d:                 return false;
1:b5b087d:             }
1:b5b087d:         }, 5000, 100);
1:b5b087d:     }
1:b5b087d: 
1:b5b087d:     @Test
1:b5b087d:     public void testPingReqConnectSuccess() throws Exception {
1:b5b087d:         MQTT mqtt = createMQTTConnection();
1:b5b087d:         mqtt.setClientId("clientId");
1:b5b087d:         mqtt.setVersion(version);
1:b5b087d: 
1:b5b087d:         final CountDownLatch pingRespReceived = new CountDownLatch(1);
1:b5b087d:         //Tracer to assert we received the response by waiting for it
1:b5b087d:         mqtt.setTracer(new Tracer() {
1:b5b087d: 
1:b5b087d:             @Override
1:b5b087d:             public void onReceive(MQTTFrame frame) {
1:b5b087d:                 if (frame.messageType() == PINGRESP.TYPE) {
1:b5b087d:                     pingRespReceived.countDown();
1:b5b087d:                 }
1:b5b087d:             }
1:b5b087d: 
1:b5b087d:         });
1:b5b087d:         CallbackConnection callbackConnection = new CallbackConnection(mqtt);
1:b5b087d:         BlockingConnection connection = new BlockingConnection(new FutureConnection(callbackConnection));
1:b5b087d:         connection.connect();
1:b5b087d:         Transport transport =  callbackConnection.transport();
1:667ea7c:         disableDispatchAssertion(transport);
1:b5b087d: 
1:b5b087d:         //SEND a PINGREQ and wait for the response
1:b5b087d:         final MQTTProtocolCodec codec = new MQTTProtocolCodec();
1:b5b087d:         codec.setTransport(transport);
1:b5b087d:         transport.offer(new PINGREQ().encode());
1:b5b087d: 
1:b5b087d:         //Wait for the response
1:b5b087d:         assertTrue(pingRespReceived.await(5, TimeUnit.SECONDS));
1:b5b087d:     }
1:667ea7c: 
1:667ea7c:     private void disableDispatchAssertion(final Transport transport) {
1:667ea7c:         //Since we are purposefully bypassing the normal way of sending a packet, turn off the
1:667ea7c:         //assertion
1:667ea7c:         DispatchQueue dispatchQueue = transport.getDispatchQueue();
1:667ea7c:         if (dispatchQueue instanceof SerialDispatchQueue) {
1:667ea7c:             SerialDispatchQueue spyQueue = Mockito.spy((SerialDispatchQueue)dispatchQueue);
1:667ea7c:             Mockito.doNothing().when(spyQueue).assertExecuting();
1:667ea7c:             transport.setDispatchQueue(spyQueue);
1:667ea7c:         }
1:667ea7c:     }
1:b5b087d: }
============================================================================
author:Christopher L. Shannon (cshannon)
-------------------------------------------------------------------------------
commit:667ea7c
/////////////////////////////////////////////////////////////////////////
1: import org.fusesource.hawtdispatch.DispatchQueue;
1: import org.fusesource.hawtdispatch.internal.SerialDispatchQueue;
/////////////////////////////////////////////////////////////////////////
1: import org.mockito.Mockito;
/////////////////////////////////////////////////////////////////////////
1:         disableDispatchAssertion(transport.get());
1: 
/////////////////////////////////////////////////////////////////////////
1:         disableDispatchAssertion(transport);
/////////////////////////////////////////////////////////////////////////
1: 
1:     private void disableDispatchAssertion(final Transport transport) {
1:         //Since we are purposefully bypassing the normal way of sending a packet, turn off the
1:         //assertion
1:         DispatchQueue dispatchQueue = transport.getDispatchQueue();
1:         if (dispatchQueue instanceof SerialDispatchQueue) {
1:             SerialDispatchQueue spyQueue = Mockito.spy((SerialDispatchQueue)dispatchQueue);
1:             Mockito.doNothing().when(spyQueue).assertExecuting();
1:             transport.setDispatchQueue(spyQueue);
1:         }
1:     }
commit:b5b087d
/////////////////////////////////////////////////////////////////////////
1: /**
1:  * Licensed to the Apache Software Foundation (ASF) under one or more
1:  * contributor license agreements.  See the NOTICE file distributed with
1:  * this work for additional information regarding copyright ownership.
1:  * The ASF licenses this file to You under the Apache License, Version 2.0
1:  * (the "License"); you may not use this file except in compliance with
1:  * the License.  You may obtain a copy of the License at
1:  *
1:  *      http://www.apache.org/licenses/LICENSE-2.0
1:  *
1:  * Unless required by applicable law or agreed to in writing, software
1:  * distributed under the License is distributed on an "AS IS" BASIS,
1:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:  * See the License for the specific language governing permissions and
1:  * limitations under the License.
1:  */
1: package org.apache.activemq.transport.mqtt;
1: 
1: import static org.junit.Assert.assertTrue;
1: import static org.junit.Assert.fail;
1: 
1: import java.io.EOFException;
1: import java.lang.reflect.Method;
1: import java.util.Arrays;
1: import java.util.Collection;
1: import java.util.concurrent.CountDownLatch;
1: import java.util.concurrent.TimeUnit;
1: import java.util.concurrent.atomic.AtomicReference;
1: 
1: import org.apache.activemq.util.Wait;
1: import org.apache.activemq.util.Wait.Condition;
1: import org.fusesource.hawtdispatch.transport.Transport;
1: import org.fusesource.mqtt.client.BlockingConnection;
1: import org.fusesource.mqtt.client.Callback;
1: import org.fusesource.mqtt.client.CallbackConnection;
1: import org.fusesource.mqtt.client.FutureConnection;
1: import org.fusesource.mqtt.client.MQTT;
1: import org.fusesource.mqtt.client.Tracer;
1: import org.fusesource.mqtt.codec.MQTTFrame;
1: import org.fusesource.mqtt.codec.MQTTProtocolCodec;
1: import org.fusesource.mqtt.codec.PINGREQ;
1: import org.fusesource.mqtt.codec.PINGRESP;
1: import org.junit.Rule;
1: import org.junit.Test;
1: import org.junit.rules.Timeout;
1: import org.junit.runner.RunWith;
1: import org.junit.runners.Parameterized;
1: import org.junit.runners.Parameterized.Parameters;
1: import org.slf4j.Logger;
1: import org.slf4j.LoggerFactory;
1: 
1: /**
1:  * Test to show that a PINGRESP will only be sent for a PINGREQ
1:  * packet after a CONNECT packet has been received.
1:  */
1: @RunWith(Parameterized.class)
1: public class MQTTPingReqTest extends MQTTTestSupport {
1: 
1:     private static final Logger LOG = LoggerFactory.getLogger(MQTTPingReqTest.class);
1: 
1:     @Rule
1:     public Timeout timeout = new Timeout(15, TimeUnit.SECONDS);
1: 
1:     private final String version;
1: 
1:     @Parameters(name = "mqtt-version:{0}")
1:     public static Collection<Object[]> data() {
1:         return Arrays.asList(new Object[][] {
1:             {"3.1"},
1:             {"3.1.1"}
1:         });
1:     }
1: 
1:     public MQTTPingReqTest(final String version) {
1:         this.version = version;
1:     }
1: 
1:     @Test(expected=EOFException.class)
1:     public void testPingReqWithoutConnectFail() throws Exception {
1:         MQTT mqtt = createMQTTConnection();
1:         mqtt.setClientId("clientId");
1:         mqtt.setVersion(version);
1: 
1:         final CountDownLatch latch = new CountDownLatch(1);
1:         final AtomicReference<Transport> transport = new AtomicReference<>();
1:         final AtomicReference<Throwable> error = new AtomicReference<>();
1:         final Callback<Transport> con = new Callback<Transport>() {
1: 
1:             @Override
1:             public void onSuccess(Transport value) {
1:                 transport.set(value);
1:                 latch.countDown();
1:             }
1: 
1:             @Override
1:             public void onFailure(Throwable value) {
1:                 error.set(value);
1:                 latch.countDown();
1:             }
1:         };
1: 
1:         //Connect to the transport by using the createTransport method with a custom callback
1:         //This will ensure that we connect without sending a CONNECT packet for testing
1:         //and that we won't receive automatically
1:         CallbackConnection connection = new CallbackConnection(mqtt);
1:         Method createTransportMethod = connection.getClass().getDeclaredMethod("createTransport", Callback.class);
1:         createTransportMethod.setAccessible(true);
1:         createTransportMethod.invoke(connection, con);
1:         latch.await();
1: 
1:         //Make sure no error on connect
1:         if (error.get() != null) {
1:             LOG.error(error.get().getMessage(), error.get());
1:             fail(error.get().getMessage());
1:         }
1: 
1:         //Send a PINGREQ without a connect packet first
1:         final MQTTProtocolCodec codec = new MQTTProtocolCodec();
1:         codec.setTransport(transport.get());
1:         transport.get().offer(new PINGREQ().encode());
1: 
1:         //Protocol should throw an exception since we never sent a CONNECT
1:         Wait.waitFor(new Condition() {
1: 
1:             @Override
1:             public boolean isSatisified() throws Exception {
1:                 //Wait for exception to be thrown
1:                 codec.read();
1:                 return false;
1:             }
1:         }, 5000, 100);
1:     }
1: 
1:     @Test
1:     public void testPingReqConnectSuccess() throws Exception {
1:         MQTT mqtt = createMQTTConnection();
1:         mqtt.setClientId("clientId");
1:         mqtt.setVersion(version);
1: 
1:         final CountDownLatch pingRespReceived = new CountDownLatch(1);
1:         //Tracer to assert we received the response by waiting for it
1:         mqtt.setTracer(new Tracer() {
1: 
1:             @Override
1:             public void onReceive(MQTTFrame frame) {
1:                 if (frame.messageType() == PINGRESP.TYPE) {
1:                     pingRespReceived.countDown();
1:                 }
1:             }
1: 
1:         });
1:         CallbackConnection callbackConnection = new CallbackConnection(mqtt);
1:         BlockingConnection connection = new BlockingConnection(new FutureConnection(callbackConnection));
1:         connection.connect();
1:         Transport transport =  callbackConnection.transport();
1: 
1:         //SEND a PINGREQ and wait for the response
1:         final MQTTProtocolCodec codec = new MQTTProtocolCodec();
1:         codec.setTransport(transport);
1:         transport.offer(new PINGREQ().encode());
1: 
1:         //Wait for the response
1:         assertTrue(pingRespReceived.await(5, TimeUnit.SECONDS));
1:     }
1: }
============================================================================