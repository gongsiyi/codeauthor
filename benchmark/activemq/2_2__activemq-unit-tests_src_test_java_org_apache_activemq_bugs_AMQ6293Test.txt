1:a2720c4: /*
1:1241e41:  * Licensed to the Apache Software Foundation (ASF) under one or more
1:1241e41:  * contributor license agreements.  See the NOTICE file distributed with
1:1241e41:  * this work for additional information regarding copyright ownership.
1:1241e41:  * The ASF licenses this file to You under the Apache License, Version 2.0
1:1241e41:  * (the "License"); you may not use this file except in compliance with
1:1241e41:  * the License.  You may obtain a copy of the License at
1:1241e41:  *
1:1241e41:  *      http://www.apache.org/licenses/LICENSE-2.0
1:1241e41:  *
1:1241e41:  * Unless required by applicable law or agreed to in writing, software
1:1241e41:  * distributed under the License is distributed on an "AS IS" BASIS,
1:1241e41:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:1241e41:  * See the License for the specific language governing permissions and
1:1241e41:  * limitations under the License.
1:1241e41:  */
1:1241e41: package org.apache.activemq.bugs;
3:1241e41: 
1:1241e41: import static org.junit.Assert.assertEquals;
1:1241e41: import static org.junit.Assert.assertFalse;
1:1241e41: import static org.junit.Assert.assertTrue;
1:1241e41: 
1:1241e41: import java.util.concurrent.ExecutorService;
1:1241e41: import java.util.concurrent.Executors;
1:1241e41: import java.util.concurrent.TimeUnit;
1:1241e41: import java.util.concurrent.atomic.AtomicBoolean;
1:1241e41: 
1:1241e41: import javax.jms.Connection;
1:1241e41: import javax.jms.JMSException;
1:1241e41: import javax.jms.MessageConsumer;
1:1241e41: import javax.jms.MessageProducer;
1:1241e41: import javax.jms.Session;
1:1241e41: import javax.jms.TextMessage;
1:1241e41: 
1:1241e41: import org.apache.activemq.ActiveMQConnectionFactory;
1:1241e41: import org.apache.activemq.broker.BrokerService;
1:1241e41: import org.apache.activemq.broker.TransportConnector;
1:1241e41: import org.apache.activemq.broker.region.Queue;
1:1241e41: import org.apache.activemq.broker.region.policy.PolicyEntry;
1:1241e41: import org.apache.activemq.broker.region.policy.PolicyMap;
1:1241e41: import org.apache.activemq.command.ActiveMQQueue;
1:1241e41: import org.junit.After;
1:1241e41: import org.junit.Before;
1:1241e41: import org.junit.Test;
1:1241e41: import org.slf4j.Logger;
1:1241e41: import org.slf4j.LoggerFactory;
1:1241e41: 
1:1241e41: public class AMQ6293Test {
1:1241e41: 
1:1241e41:     static final Logger LOG = LoggerFactory.getLogger(AMQ6293Test.class);
1:1241e41: 
1:1241e41:     private BrokerService brokerService;
1:1241e41:     private String connectionUri;
1:a2720c4:     private final ExecutorService service = Executors.newFixedThreadPool(6);
1:1241e41:     private final ActiveMQQueue queue = new ActiveMQQueue("test");
1:1241e41:     private final int numMessages = 10000;
1:1241e41:     private Connection connection;
1:1241e41:     private Session session;
1:1241e41:     private final AtomicBoolean isException = new AtomicBoolean();
1:1241e41: 
1:1241e41:     @Before
1:1241e41:     public void before() throws Exception {
1:1241e41:         brokerService = new BrokerService();
1:1241e41:         TransportConnector connector = brokerService.addConnector("tcp://localhost:0");
1:1241e41:         connectionUri = connector.getPublishableConnectString();
1:a2720c4:         brokerService.setPersistent(false);
1:a2720c4:         brokerService.getManagementContext().setCreateConnector(false);
1:1241e41: 
1:1241e41:         PolicyMap policyMap = new PolicyMap();
1:1241e41:         PolicyEntry entry = new PolicyEntry();
1:1241e41:         policyMap.setDefaultEntry(entry);
1:1241e41:         brokerService.setDestinationPolicy(policyMap);
1:1241e41:         entry.setQueuePrefetch(100);
1:1241e41: 
1:1241e41:         brokerService.start();
1:1241e41:         brokerService.waitUntilStarted();
1:1241e41: 
1:1241e41:         final ActiveMQConnectionFactory factory = new ActiveMQConnectionFactory(connectionUri);
1:a2720c4: 
1:1241e41:         connection = factory.createConnection();
1:1241e41:         connection.start();
1:1241e41: 
1:1241e41:         session = connection.createSession(false, Session.AUTO_ACKNOWLEDGE);
1:1241e41:     }
1:1241e41: 
1:1241e41:     @After
1:1241e41:     public void after() throws Exception {
1:1241e41:         if (connection != null) {
1:1241e41:             connection.stop();
1:1241e41:         }
1:1241e41:         if (brokerService != null) {
1:1241e41:             brokerService.stop();
1:1241e41:             brokerService.waitUntilStopped();
1:1241e41:         }
1:1241e41:     }
1:1241e41: 
1:1241e41:     @Test(timeout=90000)
1:1241e41:     public void testDestinationStatisticsOnPurge() throws Exception {
1:1241e41:         //send messages to the store
1:1241e41:         sendTestMessages(numMessages);
1:1241e41: 
1:1241e41:         //Start up 5 consumers
1:1241e41:         final Queue regionQueue = (Queue) brokerService.getRegionBroker().getDestinationMap().get(queue);
1:1241e41:         for (int i = 0; i < 5; i++) {
1:1241e41:             service.submit(new TestConsumer(session.createConsumer(queue)));
1:1241e41:         }
1:1241e41: 
1:1241e41:         //Start a purge task at the same time as the consumers
1:1241e41:         for (int i = 0; i < 1; i++) {
1:1241e41:             service.submit(new Runnable() {
1:1241e41: 
1:1241e41:                 @Override
1:1241e41:                 public void run() {
1:1241e41:                     try {
1:1241e41:                         regionQueue.purge();
1:1241e41:                     } catch (Exception e) {
1:1241e41:                         isException.set(true);
1:1241e41:                         LOG.warn(e.getMessage(), e);
1:1241e41:                         throw new RuntimeException(e);
1:1241e41:                     }
1:1241e41:                 }
1:1241e41:             });
1:1241e41:         }
1:1241e41: 
1:1241e41:         service.shutdown();
1:1241e41:         assertTrue("Took too long to shutdown service", service.awaitTermination(1, TimeUnit.MINUTES));
1:1241e41:         assertFalse("Exception encountered", isException.get());
1:1241e41: 
1:1241e41:         //Verify dequeue and message counts
1:1241e41:         assertEquals(0, regionQueue.getDestinationStatistics().getMessages().getCount());
1:1241e41:         assertEquals(numMessages, regionQueue.getDestinationStatistics().getDequeues().getCount());
1:1241e41:     }
1:1241e41: 
1:1241e41:     private void sendTestMessages(int numMessages) throws JMSException {
1:a2720c4:         Session session = connection.createSession(true, Session.SESSION_TRANSACTED);
1:1241e41:         MessageProducer producer = session.createProducer(queue);
1:1241e41: 
1:1241e41:         final TextMessage textMessage = session.createTextMessage();
1:1241e41:         textMessage.setText("Message");
1:1241e41:         for (int i = 1; i <= numMessages; i++) {
1:1241e41:             producer.send(textMessage);
1:1241e41:             if (i % 1000 == 0) {
1:1241e41:                 LOG.info("Sent {} messages", i);
1:a2720c4:                 session.commit();
1:1241e41:             }
1:1241e41:         }
1:a2720c4: 
1:a2720c4:         session.close();
1:1241e41:     }
1:1241e41: 
1:1241e41:     private class TestConsumer implements Runnable {
1:1241e41:         private final MessageConsumer consumer;
1:1241e41: 
1:1241e41:         public TestConsumer(final MessageConsumer consumer) throws JMSException {
1:1241e41:             this.consumer = consumer;
1:1241e41:         }
1:1241e41: 
1:1241e41:         @Override
1:1241e41:         public void run() {
1:1241e41:             try {
1:1241e41:                 int i = 0;
1:1241e41:                 while (consumer.receive(1000) != null) {
1:1241e41:                     i++;
1:1241e41:                     if (i % 1000 == 0) {
1:1241e41:                         LOG.info("Received {} messages", i);
1:1241e41:                     }
1:1241e41:                 }
1:1241e41:             } catch (Exception e) {
1:1241e41:                 isException.set(true);
1:1241e41:                 LOG.warn(e.getMessage(), e);
1:1241e41:                 throw new RuntimeException(e);
1:1241e41:             }
1:1241e41:         }
1:1241e41:     };
1:1241e41: }
============================================================================
author:Timothy Bish
-------------------------------------------------------------------------------
commit:a2720c4
/////////////////////////////////////////////////////////////////////////
1: /*
/////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////
1:     private final ExecutorService service = Executors.newFixedThreadPool(6);
1:         brokerService.setPersistent(false);
1:         brokerService.getManagementContext().setCreateConnector(false);
/////////////////////////////////////////////////////////////////////////
1: 
/////////////////////////////////////////////////////////////////////////
1:         Session session = connection.createSession(true, Session.SESSION_TRANSACTED);
/////////////////////////////////////////////////////////////////////////
1:                 session.commit();
1: 
1:         session.close();
author:Christopher L. Shannon (cshannon)
-------------------------------------------------------------------------------
commit:1241e41
/////////////////////////////////////////////////////////////////////////
0: /**
1:  * Licensed to the Apache Software Foundation (ASF) under one or more
1:  * contributor license agreements.  See the NOTICE file distributed with
1:  * this work for additional information regarding copyright ownership.
1:  * The ASF licenses this file to You under the Apache License, Version 2.0
1:  * (the "License"); you may not use this file except in compliance with
1:  * the License.  You may obtain a copy of the License at
1:  *
1:  *      http://www.apache.org/licenses/LICENSE-2.0
1:  *
1:  * Unless required by applicable law or agreed to in writing, software
1:  * distributed under the License is distributed on an "AS IS" BASIS,
1:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:  * See the License for the specific language governing permissions and
1:  * limitations under the License.
1:  */
1: package org.apache.activemq.bugs;
1: 
1: import static org.junit.Assert.assertEquals;
1: import static org.junit.Assert.assertFalse;
1: import static org.junit.Assert.assertTrue;
1: 
0: import java.io.File;
1: import java.util.concurrent.ExecutorService;
1: import java.util.concurrent.Executors;
1: import java.util.concurrent.TimeUnit;
1: import java.util.concurrent.atomic.AtomicBoolean;
1: 
1: import javax.jms.Connection;
1: import javax.jms.JMSException;
1: import javax.jms.MessageConsumer;
1: import javax.jms.MessageProducer;
1: import javax.jms.Session;
1: import javax.jms.TextMessage;
1: 
1: import org.apache.activemq.ActiveMQConnectionFactory;
1: import org.apache.activemq.broker.BrokerService;
1: import org.apache.activemq.broker.TransportConnector;
1: import org.apache.activemq.broker.region.Queue;
1: import org.apache.activemq.broker.region.policy.PolicyEntry;
1: import org.apache.activemq.broker.region.policy.PolicyMap;
1: import org.apache.activemq.command.ActiveMQQueue;
1: import org.junit.After;
1: import org.junit.Before;
0: import org.junit.Rule;
1: import org.junit.Test;
0: import org.junit.rules.TemporaryFolder;
1: import org.slf4j.Logger;
1: import org.slf4j.LoggerFactory;
1: 
1: 
1: public class AMQ6293Test {
1: 
1:     static final Logger LOG = LoggerFactory.getLogger(AMQ6293Test.class);
1: 
1:     private BrokerService brokerService;
1:     private String connectionUri;
0:     private ExecutorService service = Executors.newFixedThreadPool(6);
1:     private final ActiveMQQueue queue = new ActiveMQQueue("test");
1:     private final int numMessages = 10000;
1:     private Connection connection;
1:     private Session session;
1:     private final AtomicBoolean isException = new AtomicBoolean();
1: 
0:     @Rule
0:     public TemporaryFolder dataFileDir = new TemporaryFolder(new File("target"));
1: 
1:     @Before
1:     public void before() throws Exception {
1:         brokerService = new BrokerService();
1:         TransportConnector connector = brokerService.addConnector("tcp://localhost:0");
1:         connectionUri = connector.getPublishableConnectString();
0:         brokerService.setPersistent(true);
0:         brokerService.setDataDirectoryFile(dataFileDir.getRoot());
1: 
1:         PolicyMap policyMap = new PolicyMap();
1:         PolicyEntry entry = new PolicyEntry();
1:         policyMap.setDefaultEntry(entry);
1:         brokerService.setDestinationPolicy(policyMap);
1:         entry.setQueuePrefetch(100);
1: 
1:         brokerService.start();
1:         brokerService.waitUntilStarted();
1: 
1:         final ActiveMQConnectionFactory factory = new ActiveMQConnectionFactory(connectionUri);
0:         Connection connection = null;
1:         connection = factory.createConnection();
1:         connection.start();
1: 
1:         session = connection.createSession(false, Session.AUTO_ACKNOWLEDGE);
1:     }
1: 
1:     @After
1:     public void after() throws Exception {
1:         if (connection != null) {
1:             connection.stop();
1:         }
1:         if (brokerService != null) {
1:             brokerService.stop();
1:             brokerService.waitUntilStopped();
1:         }
1:     }
1: 
1:     @Test(timeout=90000)
1:     public void testDestinationStatisticsOnPurge() throws Exception {
1:         //send messages to the store
1:         sendTestMessages(numMessages);
1: 
1:         //Start up 5 consumers
1:         final Queue regionQueue = (Queue) brokerService.getRegionBroker().getDestinationMap().get(queue);
1:         for (int i = 0; i < 5; i++) {
1:             service.submit(new TestConsumer(session.createConsumer(queue)));
1:         }
1: 
1:         //Start a purge task at the same time as the consumers
1:         for (int i = 0; i < 1; i++) {
1:             service.submit(new Runnable() {
1: 
1:                 @Override
1:                 public void run() {
1:                     try {
1:                         regionQueue.purge();
1:                     } catch (Exception e) {
1:                         isException.set(true);
1:                         LOG.warn(e.getMessage(), e);
1:                         throw new RuntimeException(e);
1:                     }
1:                 }
1:             });
1:         }
1: 
1:         service.shutdown();
1:         assertTrue("Took too long to shutdown service", service.awaitTermination(1, TimeUnit.MINUTES));
1:         assertFalse("Exception encountered", isException.get());
1: 
1:         //Verify dequeue and message counts
1:         assertEquals(0, regionQueue.getDestinationStatistics().getMessages().getCount());
1:         assertEquals(numMessages, regionQueue.getDestinationStatistics().getDequeues().getCount());
1:     }
1: 
1:     private void sendTestMessages(int numMessages) throws JMSException {
1:         MessageProducer producer = session.createProducer(queue);
1: 
1:         final TextMessage textMessage = session.createTextMessage();
1:         textMessage.setText("Message");
1:         for (int i = 1; i <= numMessages; i++) {
1:             producer.send(textMessage);
1:             if (i % 1000 == 0) {
1:                 LOG.info("Sent {} messages", i);
1:             }
1:         }
1:     }
1: 
1:     private class TestConsumer implements Runnable {
1:         private final MessageConsumer consumer;
1: 
1:         public TestConsumer(final MessageConsumer consumer) throws JMSException {
1:             this.consumer = consumer;
1:         }
1: 
1:         @Override
1:         public void run() {
1:             try {
1:                 int i = 0;
1:                 while (consumer.receive(1000) != null) {
1:                     i++;
1:                     if (i % 1000 == 0) {
1:                         LOG.info("Received {} messages", i);
1:                     }
1:                 }
1:             } catch (Exception e) {
1:                 isException.set(true);
1:                 LOG.warn(e.getMessage(), e);
1:                 throw new RuntimeException(e);
1:             }
1:         }
1:     };
1: }
============================================================================