1:d5dd937: /**
1:d5dd937:  * Licensed to the Apache Software Foundation (ASF) under one or more
1:d5dd937:  * contributor license agreements.  See the NOTICE file distributed with
1:d5dd937:  * this work for additional information regarding copyright ownership.
1:d5dd937:  * The ASF licenses this file to You under the Apache License, Version 2.0
1:d5dd937:  * (the "License"); you may not use this file except in compliance with
1:d5dd937:  * the License.  You may obtain a copy of the License at
1:d5dd937:  *
1:d5dd937:  *      http://www.apache.org/licenses/LICENSE-2.0
1:d5dd937:  *
1:d5dd937:  * Unless required by applicable law or agreed to in writing, software
1:d5dd937:  * distributed under the License is distributed on an "AS IS" BASIS,
1:d5dd937:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:d5dd937:  * See the License for the specific language governing permissions and
1:d5dd937:  * limitations under the License.
1:d5dd937:  */
1:d5dd937: package org.apache.activemq.broker.region.cursors;
2:d5dd937: 
1:d5dd937: import org.apache.activemq.broker.BrokerService;
1:d5dd937: import org.apache.activemq.broker.region.QueueMessageReference;
1:d5dd937: import org.apache.activemq.store.PList;
1:d5dd937: import org.apache.activemq.usage.SystemUsage;
1:d5dd937: import org.apache.activemq.util.ByteSequence;
1:d5dd937: import org.junit.After;
1:d5dd937: import org.junit.Test;
1:d5dd937: import org.slf4j.Logger;
1:d5dd937: import org.slf4j.LoggerFactory;
1:d5dd937: 
1:d5dd937: import static org.junit.Assert.assertFalse;
1:d5dd937: import static org.junit.Assert.assertTrue;
1:109cbe0: import static org.junit.Assert.fail;
1:d5dd937: 
1:d5dd937: public class FilePendingMessageCursorTestSupport {
1:d5dd937: 
1:d5dd937:     protected static final Logger LOG = LoggerFactory.getLogger(FilePendingMessageCursorTestSupport.class);
1:d5dd937:     protected BrokerService brokerService;
1:d5dd937:     protected  FilePendingMessageCursor underTest;
1:d5dd937: 
1:d5dd937:     @After
1:d5dd937:     public void stopBroker() throws Exception {
1:d5dd937:         if (brokerService != null) {
1:768fa17:             brokerService.stop();
1:d5dd937:         }
1:d5dd937:     }
1:d5dd937: 
1:d5dd937:     private void createBrokerWithTempStoreLimit() throws Exception {
1:d5dd937:         brokerService = new BrokerService();
1:32e63dc:         brokerService.setUseJmx(false);
1:d5dd937:         SystemUsage usage = brokerService.getSystemUsage();
1:d5dd937:         usage.getTempUsage().setLimit(1025*1024*15);
1:768fa17:         brokerService.start();
1:d5dd937: 
1:d5dd937:         // put something in the temp store to on demand initialise it
1:d5dd937:         PList dud = brokerService.getTempDataStore().getPList("dud");
1:d5dd937:         dud.addFirst("A", new ByteSequence("A".getBytes()));
1:d5dd937:     }
1:d5dd937: 
1:d5dd937:     @Test
1:d5dd937:     public void testAddToEmptyCursorWhenTempStoreIsFull() throws Exception {
1:d5dd937:         createBrokerWithTempStoreLimit();
1:d5dd937:         SystemUsage usage = brokerService.getSystemUsage();
1:95f7262: 
1:95f7262:         PList dud = brokerService.getTempDataStore().getPList("dud");
1:95f7262:         // fill the temp store
1:95f7262:         int id=0;
1:95f7262:         ByteSequence payload = new ByteSequence(new byte[1024]);
1:95f7262:         while (!usage.getTempUsage().isFull()) {
1:95f7262:             dud.addFirst("A-" + (++id), payload);
1:95f7262:         }
1:95f7262: 
1:d5dd937:         assertTrue("temp store is full: %" + usage.getTempUsage().getPercentUsage(), usage.getTempUsage().isFull());
1:d5dd937: 
1:d5dd937:         underTest = new FilePendingMessageCursor(brokerService.getBroker(), "test", false);
1:d5dd937:         underTest.setSystemUsage(usage);
1:d5dd937: 
1:d5dd937:         // ok to add
1:d5dd937:         underTest.addMessageLast(QueueMessageReference.NULL_MESSAGE);
1:d5dd937: 
1:d5dd937:         assertFalse("cursor is not full", underTest.isFull());
1:d5dd937:     }
1:d5dd937: 
1:109cbe0:     @Test
1:109cbe0:     public void testResetClearsIterator() throws Exception {
1:109cbe0:         createBrokerWithTempStoreLimit();
1:109cbe0: 
1:109cbe0:         underTest = new FilePendingMessageCursor(brokerService.getBroker(), "test", false);
1:109cbe0:         // ok to add
1:109cbe0:         underTest.addMessageLast(QueueMessageReference.NULL_MESSAGE);
1:109cbe0: 
1:109cbe0:         underTest.reset();
1:109cbe0:         underTest.release();
1:109cbe0: 
1:109cbe0:         try {
1:109cbe0:             underTest.hasNext();
1:109cbe0:             fail("expect npe on use of iterator after release");
1:109cbe0:         } catch (NullPointerException expected) {}
1:109cbe0:     }
1:109cbe0: 
1:d5dd937: }
============================================================================
author:gtully
-------------------------------------------------------------------------------
commit:768fa17
/////////////////////////////////////////////////////////////////////////
1:             brokerService.stop();
/////////////////////////////////////////////////////////////////////////
1:         brokerService.start();
commit:95f7262
/////////////////////////////////////////////////////////////////////////
1: 
1:         PList dud = brokerService.getTempDataStore().getPList("dud");
1:         // fill the temp store
1:         int id=0;
1:         ByteSequence payload = new ByteSequence(new byte[1024]);
1:         while (!usage.getTempUsage().isFull()) {
1:             dud.addFirst("A-" + (++id), payload);
1:         }
1: 
author:Timothy A. Bish
-------------------------------------------------------------------------------
commit:ef24cc9
author:Gary Tully
-------------------------------------------------------------------------------
commit:109cbe0
/////////////////////////////////////////////////////////////////////////
1: import static org.junit.Assert.fail;
/////////////////////////////////////////////////////////////////////////
1:     @Test
1:     public void testResetClearsIterator() throws Exception {
1:         createBrokerWithTempStoreLimit();
1: 
1:         underTest = new FilePendingMessageCursor(brokerService.getBroker(), "test", false);
1:         // ok to add
1:         underTest.addMessageLast(QueueMessageReference.NULL_MESSAGE);
1: 
1:         underTest.reset();
1:         underTest.release();
1: 
1:         try {
1:             underTest.hasNext();
1:             fail("expect npe on use of iterator after release");
1:         } catch (NullPointerException expected) {}
1:     }
1: 
author:Hiram R. Chirino
-------------------------------------------------------------------------------
commit:32e63dc
/////////////////////////////////////////////////////////////////////////
1:         brokerService.setUseJmx(false);
commit:9a8f6e4
/////////////////////////////////////////////////////////////////////////
commit:d5dd937
/////////////////////////////////////////////////////////////////////////
1: /**
1:  * Licensed to the Apache Software Foundation (ASF) under one or more
1:  * contributor license agreements.  See the NOTICE file distributed with
1:  * this work for additional information regarding copyright ownership.
1:  * The ASF licenses this file to You under the Apache License, Version 2.0
1:  * (the "License"); you may not use this file except in compliance with
1:  * the License.  You may obtain a copy of the License at
1:  *
1:  *      http://www.apache.org/licenses/LICENSE-2.0
1:  *
1:  * Unless required by applicable law or agreed to in writing, software
1:  * distributed under the License is distributed on an "AS IS" BASIS,
1:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:  * See the License for the specific language governing permissions and
1:  * limitations under the License.
1:  */
1: package org.apache.activemq.broker.region.cursors;
1: 
1: import org.apache.activemq.broker.BrokerService;
0: import org.apache.activemq.broker.region.Destination;
0: import org.apache.activemq.broker.region.DestinationStatistics;
0: import org.apache.activemq.broker.region.IndirectMessageReference;
0: import org.apache.activemq.broker.region.MessageReference;
0: import org.apache.activemq.broker.region.Queue;
1: import org.apache.activemq.broker.region.QueueMessageReference;
0: import org.apache.activemq.command.ActiveMQMessage;
0: import org.apache.activemq.command.ActiveMQQueue;
0: import org.apache.activemq.command.MessageId;
1: import org.apache.activemq.store.PList;
1: import org.apache.activemq.usage.SystemUsage;
0: import org.apache.activemq.store.kahadb.disk.page.PageFile;
1: import org.apache.activemq.util.ByteSequence;
1: import org.junit.After;
1: import org.junit.Test;
1: import org.slf4j.Logger;
1: import org.slf4j.LoggerFactory;
1: 
1: 
0: import static org.junit.Assert.assertEquals;
1: import static org.junit.Assert.assertFalse;
1: import static org.junit.Assert.assertTrue;
1: 
1: public class FilePendingMessageCursorTestSupport {
1: 
1:     protected static final Logger LOG = LoggerFactory.getLogger(FilePendingMessageCursorTestSupport.class);
1:     protected BrokerService brokerService;
1:     protected  FilePendingMessageCursor underTest;
1: 
1:     @After
1:     public void stopBroker() throws Exception {
1:         if (brokerService != null) {
0:             brokerService.getTempDataStore().stop();
1:         }
1:     }
1: 
1:     private void createBrokerWithTempStoreLimit() throws Exception {
1:         brokerService = new BrokerService();
1:         SystemUsage usage = brokerService.getSystemUsage();
1:         usage.getTempUsage().setLimit(1025*1024*15);
1: 
1:         // put something in the temp store to on demand initialise it
1:         PList dud = brokerService.getTempDataStore().getPList("dud");
1:         dud.addFirst("A", new ByteSequence("A".getBytes()));
1:     }
1: 
1:     @Test
1:     public void testAddToEmptyCursorWhenTempStoreIsFull() throws Exception {
1:         createBrokerWithTempStoreLimit();
1:         SystemUsage usage = brokerService.getSystemUsage();
1:         assertTrue("temp store is full: %" + usage.getTempUsage().getPercentUsage(), usage.getTempUsage().isFull());
1: 
1:         underTest = new FilePendingMessageCursor(brokerService.getBroker(), "test", false);
1:         underTest.setSystemUsage(usage);
1: 
1:         // ok to add
1:         underTest.addMessageLast(QueueMessageReference.NULL_MESSAGE);
1: 
1:         assertFalse("cursor is not full", underTest.isFull());
1:     }
1: 
1: }
============================================================================