1:383d12e: /**
1:383d12e:  * Licensed to the Apache Software Foundation (ASF) under one or more
1:383d12e:  * contributor license agreements.  See the NOTICE file distributed with
1:383d12e:  * this work for additional information regarding copyright ownership.
1:383d12e:  * The ASF licenses this file to You under the Apache License, Version 2.0
1:383d12e:  * (the "License"); you may not use this file except in compliance with
1:383d12e:  * the License.  You may obtain a copy of the License at
1:383d12e:  *
1:383d12e:  *      http://www.apache.org/licenses/LICENSE-2.0
1:383d12e:  *
1:383d12e:  * Unless required by applicable law or agreed to in writing, software
1:383d12e:  * distributed under the License is distributed on an "AS IS" BASIS,
1:383d12e:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:383d12e:  * See the License for the specific language governing permissions and
1:383d12e:  * limitations under the License.
1:383d12e:  */
1:383d12e: package org.apache.activemq.broker.jmx;
1:383d12e: 
1:383d12e: import org.apache.activemq.broker.region.Subscription;
1:383d12e: import org.apache.activemq.broker.region.policy.AbortSlowConsumerStrategy;
1:383d12e: import org.apache.activemq.broker.region.policy.SlowConsumerEntry;
1:8bf987b: import org.slf4j.Logger;
1:8bf987b: import org.slf4j.LoggerFactory;
1:383d12e: 
1:383d12e: import javax.management.ObjectName;
1:383d12e: import javax.management.openmbean.CompositeType;
1:383d12e: import javax.management.openmbean.OpenDataException;
1:383d12e: import javax.management.openmbean.TabularData;
1:383d12e: import javax.management.openmbean.TabularDataSupport;
1:383d12e: import javax.management.openmbean.TabularType;
1:383d12e: import java.util.Map;
1:383d12e: 
1:383d12e: public class AbortSlowConsumerStrategyView implements AbortSlowConsumerStrategyViewMBean {
1:8bf987b:     private static final Logger LOG = LoggerFactory.getLogger(AbortSlowConsumerStrategyView.class);
1:383d12e:     private ManagedRegionBroker broker;
1:383d12e:     private AbortSlowConsumerStrategy strategy;
1:383d12e: 
1:383d12e: 
1:383d12e:     public AbortSlowConsumerStrategyView(ManagedRegionBroker managedRegionBroker, AbortSlowConsumerStrategy slowConsumerStrategy) {
1:383d12e:         this.broker = managedRegionBroker;
1:383d12e:         this.strategy = slowConsumerStrategy;
1:383d12e:     }
1:383d12e: 
1:383d12e:     public long getMaxSlowCount() {
1:383d12e:         return strategy.getMaxSlowCount();
1:383d12e:     }
1:383d12e: 
1:383d12e:     public void setMaxSlowCount(long maxSlowCount) {
1:383d12e:         strategy.setMaxSlowCount(maxSlowCount);
1:383d12e:     }
1:383d12e: 
1:383d12e:     public long getMaxSlowDuration() {
1:383d12e:         return strategy.getMaxSlowDuration();
1:383d12e:     }
1:383d12e: 
1:383d12e:     public void setMaxSlowDuration(long maxSlowDuration) {
1:383d12e:        strategy.setMaxSlowDuration(maxSlowDuration);
1:383d12e:     }
1:383d12e: 
1:383d12e:     public long getCheckPeriod() {
1:383d12e:         return strategy.getCheckPeriod();
1:383d12e:     }
1:383d12e: 
1:383d12e:     public TabularData getSlowConsumers() throws OpenDataException {
1:383d12e: 
1:383d12e:         OpenTypeSupport.OpenTypeFactory factory = OpenTypeSupport.getFactory(SlowConsumerEntry.class);
1:383d12e:         CompositeType ct = factory.getCompositeType();
1:383d12e:         TabularType tt = new TabularType("SlowConsumers", "Table of current slow Consumers", ct, new String[] {"subscription" });
1:383d12e:         TabularDataSupport rc = new TabularDataSupport(tt);
1:383d12e:         
1:383d12e:         int index = 0;
1:383d12e:         Map<Subscription, SlowConsumerEntry> slowConsumers = strategy.getSlowConsumers();
1:383d12e:         for (Map.Entry<Subscription, SlowConsumerEntry> entry : slowConsumers.entrySet()) {
1:383d12e:             entry.getValue().setSubscription(broker.getSubscriberObjectName(entry.getKey()));
1:383d12e:             rc.put(OpenTypeSupport.convert(entry.getValue()));
1:383d12e:         }
1:383d12e:         return rc;
1:383d12e:     }
1:383d12e: 
1:383d12e:     public void abortConsumer(ObjectName consumerToAbort) {
1:383d12e:         Subscription sub = broker.getSubscriber(consumerToAbort);
1:383d12e:         if (sub != null) {
1:e1bbde7:             LOG.info("aborting consumer via jmx: {}", sub.getConsumerInfo().getConsumerId());
1:383d12e:             strategy.abortConsumer(sub, false);
1:383d12e:         } else {
1:e1bbde7:             LOG.warn("cannot resolve subscription matching name: {}", consumerToAbort);
1:383d12e:         }
1:383d12e: 
1:383d12e:     }
1:383d12e: 
1:383d12e:     public void abortConnection(ObjectName consumerToAbort) {
1:383d12e:         Subscription sub = broker.getSubscriber(consumerToAbort);
1:383d12e:         if (sub != null) {
1:e1bbde7:             LOG.info("aborting consumer connection via jmx: {}", sub.getConsumerInfo().getConsumerId().getConnectionId());
1:383d12e:             strategy.abortConsumer(sub, true);
1:383d12e:         } else {
1:e1bbde7:             LOG.warn("cannot resolve subscription matching name: {}", consumerToAbort);
1:383d12e:         }
1:383d12e:     }
1:383d12e: 
1:383d12e:     public void abortConsumer(String objectNameOfConsumerToAbort) {
1:383d12e:         abortConsumer(toObjectName(objectNameOfConsumerToAbort));
1:383d12e:     }
1:383d12e: 
1:383d12e:     public void abortConnection(String objectNameOfConsumerToAbort) {
1:383d12e:         abortConnection(toObjectName(objectNameOfConsumerToAbort));
1:383d12e:     }
1:383d12e: 
1:383d12e:     private ObjectName toObjectName(String objectName) {
1:383d12e:         ObjectName result = null;
1:383d12e:         try {
1:383d12e:             result = new ObjectName(objectName);
1:383d12e:         } catch (Exception e) {
1:e1bbde7:             LOG.warn("cannot create subscription ObjectName to abort, from string: {}", objectName);
1:383d12e:         }
1:383d12e:         return result;
1:383d12e:     }
1:383d12e: }
============================================================================
author:Timothy Bish
-------------------------------------------------------------------------------
commit:e1bbde7
/////////////////////////////////////////////////////////////////////////
1:             LOG.info("aborting consumer via jmx: {}", sub.getConsumerInfo().getConsumerId());
1:             LOG.warn("cannot resolve subscription matching name: {}", consumerToAbort);
/////////////////////////////////////////////////////////////////////////
1:             LOG.info("aborting consumer connection via jmx: {}", sub.getConsumerInfo().getConsumerId().getConnectionId());
1:             LOG.warn("cannot resolve subscription matching name: {}", consumerToAbort);
/////////////////////////////////////////////////////////////////////////
1:             LOG.warn("cannot create subscription ObjectName to abort, from string: {}", objectName);
author:Hiram R. Chirino
-------------------------------------------------------------------------------
commit:58aca86
author:Bosanac Dejan
-------------------------------------------------------------------------------
commit:8bf987b
/////////////////////////////////////////////////////////////////////////
1: import org.slf4j.Logger;
1: import org.slf4j.LoggerFactory;
/////////////////////////////////////////////////////////////////////////
1:     private static final Logger LOG = LoggerFactory.getLogger(AbortSlowConsumerStrategyView.class);
author:Gary Tully
-------------------------------------------------------------------------------
commit:383d12e
/////////////////////////////////////////////////////////////////////////
1: /**
1:  * Licensed to the Apache Software Foundation (ASF) under one or more
1:  * contributor license agreements.  See the NOTICE file distributed with
1:  * this work for additional information regarding copyright ownership.
1:  * The ASF licenses this file to You under the Apache License, Version 2.0
1:  * (the "License"); you may not use this file except in compliance with
1:  * the License.  You may obtain a copy of the License at
1:  *
1:  *      http://www.apache.org/licenses/LICENSE-2.0
1:  *
1:  * Unless required by applicable law or agreed to in writing, software
1:  * distributed under the License is distributed on an "AS IS" BASIS,
1:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:  * See the License for the specific language governing permissions and
1:  * limitations under the License.
1:  */
1: package org.apache.activemq.broker.jmx;
1: 
1: import org.apache.activemq.broker.region.Subscription;
1: import org.apache.activemq.broker.region.policy.AbortSlowConsumerStrategy;
1: import org.apache.activemq.broker.region.policy.SlowConsumerEntry;
0: import org.apache.commons.logging.Log;
0: import org.apache.commons.logging.LogFactory;
1: 
1: import javax.management.ObjectName;
1: import javax.management.openmbean.CompositeType;
1: import javax.management.openmbean.OpenDataException;
1: import javax.management.openmbean.TabularData;
1: import javax.management.openmbean.TabularDataSupport;
1: import javax.management.openmbean.TabularType;
1: import java.util.Map;
1: 
1: public class AbortSlowConsumerStrategyView implements AbortSlowConsumerStrategyViewMBean {
0:     private static final Log LOG = LogFactory.getLog(AbortSlowConsumerStrategyView.class);
1:     private ManagedRegionBroker broker;
1:     private AbortSlowConsumerStrategy strategy;
1: 
1: 
1:     public AbortSlowConsumerStrategyView(ManagedRegionBroker managedRegionBroker, AbortSlowConsumerStrategy slowConsumerStrategy) {
1:         this.broker = managedRegionBroker;
1:         this.strategy = slowConsumerStrategy;
1:     }
1: 
1:     public long getMaxSlowCount() {
1:         return strategy.getMaxSlowCount();
1:     }
1: 
1:     public void setMaxSlowCount(long maxSlowCount) {
1:         strategy.setMaxSlowCount(maxSlowCount);
1:     }
1: 
1:     public long getMaxSlowDuration() {
1:         return strategy.getMaxSlowDuration();
1:     }
1: 
1:     public void setMaxSlowDuration(long maxSlowDuration) {
1:        strategy.setMaxSlowDuration(maxSlowDuration);
1:     }
1: 
1:     public long getCheckPeriod() {
1:         return strategy.getCheckPeriod();
1:     }
1: 
1:     public TabularData getSlowConsumers() throws OpenDataException {
1: 
1:         OpenTypeSupport.OpenTypeFactory factory = OpenTypeSupport.getFactory(SlowConsumerEntry.class);
1:         CompositeType ct = factory.getCompositeType();
1:         TabularType tt = new TabularType("SlowConsumers", "Table of current slow Consumers", ct, new String[] {"subscription" });
1:         TabularDataSupport rc = new TabularDataSupport(tt);
1:         
1:         int index = 0;
1:         Map<Subscription, SlowConsumerEntry> slowConsumers = strategy.getSlowConsumers();
1:         for (Map.Entry<Subscription, SlowConsumerEntry> entry : slowConsumers.entrySet()) {
1:             entry.getValue().setSubscription(broker.getSubscriberObjectName(entry.getKey()));
1:             rc.put(OpenTypeSupport.convert(entry.getValue()));
1:         }
1:         return rc;
1:     }
1: 
1:     public void abortConsumer(ObjectName consumerToAbort) {
1:         Subscription sub = broker.getSubscriber(consumerToAbort);
1:         if (sub != null) {
0:             LOG.info("aborting consumer via jmx: " + sub.getConsumerInfo().getConsumerId());           
1:             strategy.abortConsumer(sub, false);
1:         } else {
0:             LOG.warn("cannot resolve subscription matching name: " + consumerToAbort);
1:         }
1: 
1:     }
1: 
1:     public void abortConnection(ObjectName consumerToAbort) {
1:         Subscription sub = broker.getSubscriber(consumerToAbort);
1:         if (sub != null) {
0:             LOG.info("aborting consumer connection via jmx: " + sub.getConsumerInfo().getConsumerId().getConnectionId());
1:             strategy.abortConsumer(sub, true);
1:         } else {
0:             LOG.warn("cannot resolve subscription matching name: " + consumerToAbort);
1:         }
1:     }
1: 
1:     public void abortConsumer(String objectNameOfConsumerToAbort) {
1:         abortConsumer(toObjectName(objectNameOfConsumerToAbort));
1:     }
1: 
1:     public void abortConnection(String objectNameOfConsumerToAbort) {
1:         abortConnection(toObjectName(objectNameOfConsumerToAbort));
1:     }
1: 
1:     private ObjectName toObjectName(String objectName) {
1:         ObjectName result = null;
1:         try {
1:             result = new ObjectName(objectName);
1:         } catch (Exception e) {
0:             LOG.warn("cannot create subscription ObjectName to abort, from string: " + objectName);
1:         }
1:         return result;
1:     }
1: }
============================================================================