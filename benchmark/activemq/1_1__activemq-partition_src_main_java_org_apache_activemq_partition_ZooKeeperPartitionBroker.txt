1:7c63788: /**
1:7c63788:  * Licensed to the Apache Software Foundation (ASF) under one or more
1:7c63788:  * contributor license agreements.  See the NOTICE file distributed with
1:7c63788:  * this work for additional information regarding copyright ownership.
1:7c63788:  * The ASF licenses this file to You under the Apache License, Version 2.0
1:7c63788:  * (the "License"); you may not use this file except in compliance with
1:7c63788:  * the License.  You may obtain a copy of the License at
1:7c63788:  *
1:7c63788:  *      http://www.apache.org/licenses/LICENSE-2.0
1:7c63788:  *
1:7c63788:  * Unless required by applicable law or agreed to in writing, software
1:7c63788:  * distributed under the License is distributed on an "AS IS" BASIS,
1:7c63788:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:7c63788:  * See the License for the specific language governing permissions and
1:7c63788:  * limitations under the License.
1:7c63788:  */
1:7c63788: package org.apache.activemq.partition;
1:7c63788: 
1:7c63788: import org.apache.activemq.broker.Broker;
1:7c63788: import org.apache.activemq.leveldb.replicated.groups.ZKClient;
1:7c63788: import org.apache.activemq.partition.dto.Partitioning;
1:7c63788: import org.apache.zookeeper.WatchedEvent;
1:7c63788: import org.apache.zookeeper.Watcher;
1:7c63788: import org.apache.zookeeper.data.Stat;
1:7c63788: import org.linkedin.util.clock.Timespan;
1:7c63788: import org.slf4j.Logger;
1:7c63788: import org.slf4j.LoggerFactory;
1:7c63788: 
1:25f70ad: import java.util.concurrent.CountDownLatch;
1:25f70ad: import java.util.concurrent.TimeUnit;
1:25f70ad: 
1:7c63788: /**
1:7c63788:  */
1:7c63788: public class ZooKeeperPartitionBroker extends PartitionBroker {
1:7c63788: 
1:7c63788:     protected static final Logger LOG = LoggerFactory.getLogger(ZooKeeperPartitionBroker.class);
1:7c63788: 
1:7c63788:     protected volatile ZKClient zk_client = null;
1:7c63788:     protected volatile Partitioning config;
1:25f70ad:     protected final CountDownLatch configAcquired = new CountDownLatch(1);
1:7c63788: 
1:7c63788:     public ZooKeeperPartitionBroker(Broker broker, ZooKeeperPartitionBrokerPlugin plugin) {
1:7c63788:         super(broker, plugin);
1:7c63788:     }
1:7c63788: 
1:25f70ad:     @Override
1:25f70ad:     public void start() throws Exception {
1:25f70ad:         super.start();
1:25f70ad:         // Lets block a bit until we get our config.. Otherwise just keep
1:25f70ad:         // on going.. not a big deal if we get our config later.  Perhaps
1:25f70ad:         // ZK service is not having a good day.
1:25f70ad:         configAcquired.await(5, TimeUnit.SECONDS);
1:25f70ad:     }
1:7c63788: 
1:7c63788:     @Override
1:7c63788:     protected void onMonitorStop() {
1:7c63788:         zkDisconnect();
1:7c63788:     }
1:7c63788: 
1:7c63788:     @Override
1:7c63788:     protected Partitioning getConfig() {
1:7c63788:         return config;
1:7c63788:     }
1:7c63788: 
1:7c63788:     protected ZooKeeperPartitionBrokerPlugin plugin() {
1:7c63788:         return (ZooKeeperPartitionBrokerPlugin)plugin;
1:7c63788:     }
1:7c63788: 
1:7c63788:     protected void zkConnect() throws Exception {
1:7c63788:         zk_client = new ZKClient(plugin().getZkAddress(), Timespan.parse(plugin().getZkSessionTmeout()), null);
1:7c63788:         if( plugin().getZkPassword()!=null ) {
1:7c63788:             zk_client.setPassword(plugin().getZkPassword());
1:7c63788:         }
1:7c63788:         zk_client.start();
1:7c63788:         zk_client.waitForConnected(Timespan.parse("30s"));
1:7c63788:     }
1:7c63788: 
1:7c63788:     protected void zkDisconnect() {
1:7c63788:         if( zk_client!=null ) {
1:7c63788:             zk_client.close();
1:7c63788:             zk_client = null;
1:7c63788:         }
1:7c63788:     }
1:7c63788: 
1:7c63788:     protected void reloadConfiguration() throws Exception {
1:7c63788:         if( zk_client==null )  {
1:7c63788:             LOG.debug("Connecting to ZooKeeper");
1:7c63788:             try {
1:7c63788:                 zkConnect();
1:7c63788:                 LOG.debug("Connected to ZooKeeper");
1:7c63788:             } catch (Exception e) {
1:7c63788:                 LOG.debug("Connection to ZooKeeper failed: "+e);
1:7c63788:                 zkDisconnect();
1:7c63788:                 throw e;
1:7c63788:             }
1:7c63788:         }
1:7c63788: 
1:7c63788:         byte[] data = null;
1:7c63788:         try {
1:7c63788:             Stat stat = new Stat();
1:7c63788:             data = zk_client.getData(plugin().getZkPath(), new Watcher() {
1:7c63788:                 @Override
1:7c63788:                 public void process(WatchedEvent watchedEvent) {
1:7c63788:                     try {
1:7c63788:                         reloadConfiguration();
1:7c63788:                     } catch (Exception e) {
1:7c63788:                     }
1:7c63788:                     monitorWakeup();
1:7c63788:                 }
1:7c63788:             }, stat);
1:25f70ad:             configAcquired.countDown();
1:7c63788:             reloadConfigOnPoll = false;
1:7c63788:         } catch (Exception e) {
1:7c63788:             LOG.warn("Could load partitioning configuration: " + e, e);
1:7c63788:             reloadConfigOnPoll = true;
1:7c63788:         }
1:7c63788: 
1:7c63788:         try {
1:7c63788:             config = Partitioning.MAPPER.readValue(data, Partitioning.class);
1:7c63788:         } catch (Exception e) {
1:7c63788:             LOG.warn("Invalid partitioning configuration: " + e, e);
1:7c63788:         }
1:7c63788:     }
1:7c63788: 
1:7c63788: }
============================================================================
author:Hiram Chirino
-------------------------------------------------------------------------------
commit:25f70ad
/////////////////////////////////////////////////////////////////////////
1: import java.util.concurrent.CountDownLatch;
1: import java.util.concurrent.TimeUnit;
1: 
/////////////////////////////////////////////////////////////////////////
1:     protected final CountDownLatch configAcquired = new CountDownLatch(1);
1:     @Override
1:     public void start() throws Exception {
1:         super.start();
1:         // Lets block a bit until we get our config.. Otherwise just keep
1:         // on going.. not a big deal if we get our config later.  Perhaps
1:         // ZK service is not having a good day.
1:         configAcquired.await(5, TimeUnit.SECONDS);
1:     }
/////////////////////////////////////////////////////////////////////////
1:             configAcquired.countDown();
commit:7c63788
/////////////////////////////////////////////////////////////////////////
1: /**
1:  * Licensed to the Apache Software Foundation (ASF) under one or more
1:  * contributor license agreements.  See the NOTICE file distributed with
1:  * this work for additional information regarding copyright ownership.
1:  * The ASF licenses this file to You under the Apache License, Version 2.0
1:  * (the "License"); you may not use this file except in compliance with
1:  * the License.  You may obtain a copy of the License at
1:  *
1:  *      http://www.apache.org/licenses/LICENSE-2.0
1:  *
1:  * Unless required by applicable law or agreed to in writing, software
1:  * distributed under the License is distributed on an "AS IS" BASIS,
1:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:  * See the License for the specific language governing permissions and
1:  * limitations under the License.
1:  */
1: package org.apache.activemq.partition;
1: 
1: import org.apache.activemq.broker.Broker;
1: import org.apache.activemq.leveldb.replicated.groups.ZKClient;
1: import org.apache.activemq.partition.dto.Partitioning;
1: import org.apache.zookeeper.WatchedEvent;
1: import org.apache.zookeeper.Watcher;
1: import org.apache.zookeeper.data.Stat;
1: import org.linkedin.util.clock.Timespan;
1: import org.slf4j.Logger;
1: import org.slf4j.LoggerFactory;
1: 
1: /**
1:  */
1: public class ZooKeeperPartitionBroker extends PartitionBroker {
1: 
1:     protected static final Logger LOG = LoggerFactory.getLogger(ZooKeeperPartitionBroker.class);
1: 
1:     protected volatile ZKClient zk_client = null;
1:     protected volatile Partitioning config;
1: 
1:     public ZooKeeperPartitionBroker(Broker broker, ZooKeeperPartitionBrokerPlugin plugin) {
1:         super(broker, plugin);
1:     }
1: 
1: 
1:     @Override
1:     protected void onMonitorStop() {
1:         zkDisconnect();
1:     }
1: 
1:     @Override
1:     protected Partitioning getConfig() {
1:         return config;
1:     }
1: 
1:     protected ZooKeeperPartitionBrokerPlugin plugin() {
1:         return (ZooKeeperPartitionBrokerPlugin)plugin;
1:     }
1: 
1:     protected void zkConnect() throws Exception {
1:         zk_client = new ZKClient(plugin().getZkAddress(), Timespan.parse(plugin().getZkSessionTmeout()), null);
1:         if( plugin().getZkPassword()!=null ) {
1:             zk_client.setPassword(plugin().getZkPassword());
1:         }
1:         zk_client.start();
1:         zk_client.waitForConnected(Timespan.parse("30s"));
1:     }
1: 
1:     protected void zkDisconnect() {
1:         if( zk_client!=null ) {
1:             zk_client.close();
1:             zk_client = null;
1:         }
1:     }
1: 
1:     protected void reloadConfiguration() throws Exception {
1:         if( zk_client==null )  {
1:             LOG.debug("Connecting to ZooKeeper");
1:             try {
1:                 zkConnect();
1:                 LOG.debug("Connected to ZooKeeper");
1:             } catch (Exception e) {
1:                 LOG.debug("Connection to ZooKeeper failed: "+e);
1:                 zkDisconnect();
1:                 throw e;
1:             }
1:         }
1: 
1:         byte[] data = null;
1:         try {
1:             Stat stat = new Stat();
1:             data = zk_client.getData(plugin().getZkPath(), new Watcher() {
1:                 @Override
1:                 public void process(WatchedEvent watchedEvent) {
1:                     try {
1:                         reloadConfiguration();
1:                     } catch (Exception e) {
1:                     }
1:                     monitorWakeup();
1:                 }
1:             }, stat);
1:             reloadConfigOnPoll = false;
1:         } catch (Exception e) {
1:             LOG.warn("Could load partitioning configuration: " + e, e);
1:             reloadConfigOnPoll = true;
1:         }
1: 
1:         try {
1:             config = Partitioning.MAPPER.readValue(data, Partitioning.class);
1:         } catch (Exception e) {
1:             LOG.warn("Invalid partitioning configuration: " + e, e);
1:         }
1:     }
1: 
1: }
============================================================================