1:d29ca2a: /**
1:57b4941:  * Licensed to the Apache Software Foundation (ASF) under one or more
1:57b4941:  * contributor license agreements.  See the NOTICE file distributed with
1:57b4941:  * this work for additional information regarding copyright ownership.
1:57b4941:  * The ASF licenses this file to You under the Apache License, Version 2.0
1:57b4941:  * (the "License"); you may not use this file except in compliance with
1:57b4941:  * the License.  You may obtain a copy of the License at
3:d29ca2a:  *
1:230a86c:  *      http://www.apache.org/licenses/LICENSE-2.0
1:d29ca2a:  *
1:d29ca2a:  * Unless required by applicable law or agreed to in writing, software
1:d29ca2a:  * distributed under the License is distributed on an "AS IS" BASIS,
1:d29ca2a:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:d29ca2a:  * See the License for the specific language governing permissions and
1:d29ca2a:  * limitations under the License.
1:d29ca2a:  */
1:d29ca2a: package org.apache.activemq.broker.jmx;
1:74a7a8b: 
1:d29ca2a: import org.apache.activemq.broker.Connection;
1:d29ca2a: import org.apache.activemq.broker.TransportConnector;
1:d29ca2a: import org.apache.activemq.transport.Transport;
1:d29ca2a: import org.apache.activemq.transport.TransportServer;
1:74a7a8b: import java.io.IOException;
1:74a7a8b: import java.net.URISyntaxException;
1:74a7a8b: import javax.management.MBeanServer;
1:74a7a8b: import javax.management.ObjectName;
1:74a7a8b: 
1:d29ca2a: /**
1:d29ca2a:  * A managed transport connector which can create multiple managed connections
1:d29ca2a:  * as clients connect.
1:b0c2a40:  * 
1:d29ca2a:  * 
1:d29ca2a:  */
1:d29ca2a: public class ManagedTransportConnector extends TransportConnector {
5:d29ca2a: 
1:2f7ab76:     static long nextConnectionId = 1;
1:d29ca2a:     
1:1ec71bd:     private final ManagementContext managementContext;
1:d29ca2a:     private final ObjectName connectorName;
1:d29ca2a: 
1:1ec71bd:     public ManagedTransportConnector(ManagementContext context, ObjectName connectorName, TransportServer server) {
1:5d99c99:         super(server);
1:1ec71bd:         this.managementContext = context;
1:d29ca2a:         this.connectorName = connectorName;
1:d29ca2a:     }
1:d29ca2a: 
1:d29ca2a:     public ManagedTransportConnector asManagedConnector(MBeanServer mbeanServer, ObjectName connectorName) throws IOException, URISyntaxException {
1:d29ca2a:         return this;
1:d29ca2a:     }
1:d29ca2a: 
1:d29ca2a:     protected Connection createConnection(Transport transport) throws IOException {
1:8a01c5d:         // prefer to use task runner from broker service as stop task runner, as we can then
1:8a01c5d:         // tie it to the lifecycle of the broker service
1:8a01c5d:         return new ManagedTransportConnection(this, transport, getBroker(), isDisableAsyncDispatch() ? null : getTaskRunnerFactory(),
1:8a01c5d:                 getBrokerService().getTaskRunnerFactory(), managementContext, connectorName);
1:d29ca2a:     }
1:d29ca2a: 
1:2f7ab76:     protected static synchronized long getNextConnectionId() {
1:064880b:         return nextConnectionId++;
1:d29ca2a:     }
1:d29ca2a: 
1:d29ca2a: }
============================================================================
author:Hadrian Zbarcea
-------------------------------------------------------------------------------
commit:d54d046
author:Hiram R. Chirino
-------------------------------------------------------------------------------
commit:58aca86
commit:b0c2a40
/////////////////////////////////////////////////////////////////////////
1:  * 
commit:5d99c99
/////////////////////////////////////////////////////////////////////////
0:     public ManagedTransportConnector(MBeanServer mbeanServer, ObjectName connectorName, TransportServer server) {
1:         super(server);
commit:74a7a8b
/////////////////////////////////////////////////////////////////////////
1: import java.io.IOException;
1: import java.net.URISyntaxException;
1: 
1: import javax.management.MBeanServer;
1: import javax.management.ObjectName;
1: 
commit:230a86c
/////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////
1:  *      http://www.apache.org/licenses/LICENSE-2.0
commit:cafe4cb
/////////////////////////////////////////////////////////////////////////
0:         return new ManagedTransportConnection(this, transport, getBroker(), isDisableAsyncDispatch() ? null : getTaskRunnerFactory(), mbeanServer, connectorName);
commit:57b4941
/////////////////////////////////////////////////////////////////////////
1:  * Licensed to the Apache Software Foundation (ASF) under one or more
1:  * contributor license agreements.  See the NOTICE file distributed with
1:  * this work for additional information regarding copyright ownership.
1:  * The ASF licenses this file to You under the Apache License, Version 2.0
1:  * (the "License"); you may not use this file except in compliance with
1:  * the License.  You may obtain a copy of the License at
commit:a53b2e8
/////////////////////////////////////////////////////////////////////////
0:         return new ManagedTransportConnection(this, transport, getBroker(), isDisableAsyncDispatch() ? null : getTaskRunnerFactory(), mbeanServer, connectorName, connectionId);
commit:064880b
/////////////////////////////////////////////////////////////////////////
1:         return nextConnectionId++;
commit:d2d1c6d
/////////////////////////////////////////////////////////////////////////
0:         return new ManagedTransportConnection(this, transport, getBroker(), getTaskRunnerFactory(), mbeanServer, connectorName, connectionId);
commit:48b4869
/////////////////////////////////////////////////////////////////////////
0:  * Copyright 2005-2006 The Apache Software Foundation
commit:d29ca2a
/////////////////////////////////////////////////////////////////////////
1: /**
1:  *
0:  * Copyright 2004 The Apache Software Foundation
1:  *
0:  * Licensed under the Apache License, Version 2.0 (the "License");
0:  * you may not use this file except in compliance with the License.
0:  * You may obtain a copy of the License at
1:  *
0:  * http://www.apache.org/licenses/LICENSE-2.0
1:  *
1:  * Unless required by applicable law or agreed to in writing, software
1:  * distributed under the License is distributed on an "AS IS" BASIS,
1:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:  * See the License for the specific language governing permissions and
1:  * limitations under the License.
1:  */
1: package org.apache.activemq.broker.jmx;
1: 
0: import org.apache.activemq.broker.Broker;
1: import org.apache.activemq.broker.Connection;
1: import org.apache.activemq.broker.TransportConnector;
1: import org.apache.activemq.transport.Transport;
1: import org.apache.activemq.transport.TransportServer;
1: 
0: import javax.management.MBeanServer;
0: import javax.management.ObjectName;
1: 
0: import java.io.IOException;
0: import java.net.URISyntaxException;
1: 
1: /**
1:  * A managed transport connector which can create multiple managed connections
1:  * as clients connect.
1:  * 
0:  * @version $Revision: 1.1 $
1:  */
1: public class ManagedTransportConnector extends TransportConnector {
1: 
0:     private final MBeanServer mbeanServer;
1:     private final ObjectName connectorName;
0:     long nextConnectionId = 1;
1: 
0:     public ManagedTransportConnector(MBeanServer mbeanServer, ObjectName connectorName, Broker next, TransportServer server) {
0:         super(next, server);
0:         this.mbeanServer = mbeanServer;
1:         this.connectorName = connectorName;
1:     }
1: 
1:     public ManagedTransportConnector asManagedConnector(MBeanServer mbeanServer, ObjectName connectorName) throws IOException, URISyntaxException {
1:         return this;
1:     }
1: 
1:     protected Connection createConnection(Transport transport) throws IOException {
1: 
0:         final String connectionId;
0:         synchronized (this) {
0:             connectionId = "" + (nextConnectionId++);
1:         }
1: 
0:         return new ManagedTransportConnection(this, transport, getBrokerFilter(), getTaskRunnerFactory(), mbeanServer, connectorName, connectionId);
1:     }
1: 
1: }
author:Claus Ibsen
-------------------------------------------------------------------------------
commit:8a01c5d
/////////////////////////////////////////////////////////////////////////
1:         // prefer to use task runner from broker service as stop task runner, as we can then
1:         // tie it to the lifecycle of the broker service
1:         return new ManagedTransportConnection(this, transport, getBroker(), isDisableAsyncDispatch() ? null : getTaskRunnerFactory(),
1:                 getBrokerService().getTaskRunnerFactory(), managementContext, connectorName);
author:Robert Davies
-------------------------------------------------------------------------------
commit:1ec71bd
/////////////////////////////////////////////////////////////////////////
0: import java.io.IOException;
0: import java.net.URISyntaxException;
0: import javax.management.MBeanServer;
0: import javax.management.ObjectName;
/////////////////////////////////////////////////////////////////////////
1:     private final ManagementContext managementContext;
1:     public ManagedTransportConnector(ManagementContext context, ObjectName connectorName, TransportServer server) {
1:         this.managementContext = context;
/////////////////////////////////////////////////////////////////////////
0:         return new ManagedTransportConnection(this, transport, getBroker(), isDisableAsyncDispatch() ? null : getTaskRunnerFactory(), managementContext, connectorName);
author:James Strachan
-------------------------------------------------------------------------------
commit:2f7ab76
/////////////////////////////////////////////////////////////////////////
1:     static long nextConnectionId = 1;
0:     
/////////////////////////////////////////////////////////////////////////
0:         String connectionId = "" + getNextConnectionId();
1:     protected static synchronized long getNextConnectionId() {
0:         return nextConnectionId;
0:     }
0: 
============================================================================