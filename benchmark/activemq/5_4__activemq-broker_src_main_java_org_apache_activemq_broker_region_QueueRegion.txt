1:d29ca2a: /**
1:57b4941:  * Licensed to the Apache Software Foundation (ASF) under one or more
1:57b4941:  * contributor license agreements.  See the NOTICE file distributed with
1:57b4941:  * this work for additional information regarding copyright ownership.
1:57b4941:  * The ASF licenses this file to You under the Apache License, Version 2.0
1:57b4941:  * (the "License"); you may not use this file except in compliance with
1:57b4941:  * the License.  You may obtain a copy of the License at
2:d29ca2a:  *
1:230a86c:  *      http://www.apache.org/licenses/LICENSE-2.0
1:d29ca2a:  *
1:d29ca2a:  * Unless required by applicable law or agreed to in writing, software
1:d29ca2a:  * distributed under the License is distributed on an "AS IS" BASIS,
1:d29ca2a:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:d29ca2a:  * See the License for the specific language governing permissions and
1:d29ca2a:  * limitations under the License.
1:d29ca2a:  */
1:d29ca2a: package org.apache.activemq.broker.region;
4:d29ca2a: 
1:74a7a8b: import java.util.Iterator;
1:74a7a8b: import java.util.Set;
1:74a7a8b: 
1:044c07d: import javax.jms.JMSException;
1:74a7a8b: 
1:d29ca2a: import org.apache.activemq.broker.ConnectionContext;
1:d29ca2a: import org.apache.activemq.broker.region.policy.PolicyEntry;
1:d29ca2a: import org.apache.activemq.command.ActiveMQDestination;
1:d29ca2a: import org.apache.activemq.command.ConsumerInfo;
1:266d23e: import org.apache.activemq.command.Message;
1:f9d5449: import org.apache.activemq.command.MessageDispatchNotification;
1:d29ca2a: import org.apache.activemq.thread.TaskRunnerFactory;
1:6d8e2c5: import org.apache.activemq.usage.SystemUsage;
1:d29ca2a: 
1:d29ca2a: /**
1:b0c2a40:  * 
1:d29ca2a:  * 
1:d29ca2a:  */
1:d29ca2a: public class QueueRegion extends AbstractRegion {
1:d29ca2a: 
1:f812e34:     public QueueRegion(RegionBroker broker, DestinationStatistics destinationStatistics,
1:6d8e2c5:                        SystemUsage memoryManager, TaskRunnerFactory taskRunnerFactory,
1:f812e34:                        DestinationFactory destinationFactory) {
1:f812e34:         super(broker, destinationStatistics, memoryManager, taskRunnerFactory, destinationFactory);
2:d29ca2a:     }
1:d29ca2a: 
1:d29ca2a:     public String toString() {
1:f812e34:         return "QueueRegion: destinations=" + destinations.size() + ", subscriptions=" + subscriptions.size()
1:9dd11cb:                + ", memory=" + usageManager.getMemoryUsage().getPercentUsage() + "%";
1:d29ca2a:     }
1:d29ca2a: 
1:f812e34:     protected Subscription createSubscription(ConnectionContext context, ConsumerInfo info)
1:044c07d:         throws JMSException {
1:fc63a92:         ActiveMQDestination destination = info.getDestination();
1:fc63a92:         PolicyEntry entry = null;
1:fc63a92:         if (destination != null && broker.getDestinationPolicy() != null) {
1:fc63a92:             entry = broker.getDestinationPolicy().getEntryFor(destination);
1:d29ca2a:             
1:d29ca2a:         }
1:d29ca2a:         if (info.isBrowser()) {
1:fc63a92:             QueueBrowserSubscription sub = new QueueBrowserSubscription(broker,usageManager, context, info);
1:d29ca2a:             if (entry != null) {
1:fc63a92:                 entry.configure(broker, usageManager, sub);
1:d29ca2a:             }
1:fc63a92:             return sub;
1:f812e34:         } else {
1:fc63a92:             QueueSubscription sub =   new QueueSubscription(broker, usageManager,context, info);
2:fc63a92:             if (entry != null) {
1:fc63a92:                 entry.configure(broker, usageManager, sub);
1:d29ca2a:             }
1:fc63a92:             return sub;
1:d29ca2a:         }
1:d29ca2a:     }
1:d29ca2a: 
1:ecf89a6:     protected Set<ActiveMQDestination> getInactiveDestinations() {
1:ecf89a6:         Set<ActiveMQDestination> inactiveDestinations = super.getInactiveDestinations();
1:ecf89a6:         for (Iterator<ActiveMQDestination> iter = inactiveDestinations.iterator(); iter.hasNext();) {
1:ecf89a6:             ActiveMQDestination dest = iter.next();
1:ecf89a6:             if (!dest.isQueue()) {
1:d29ca2a:                 iter.remove();
1:ecf89a6:             }
1:d29ca2a:         }
1:d29ca2a:         return inactiveDestinations;
1:d29ca2a:     }
1:d29ca2a:     
1:f9d5449:     /*
1:f9d5449:      * For a Queue, dispatch order is imperative to match acks, so the dispatch is deferred till 
1:f9d5449:      * the notification to ensure that the subscription chosen by the master is used.
1:d29ca2a:      * 
1:f9d5449:      * (non-Javadoc)
1:f9d5449:      * @see org.apache.activemq.broker.region.AbstractRegion#processDispatchNotification(org.apache.activemq.command.MessageDispatchNotification)
1:f9d5449:      */
1:f9d5449:     public void processDispatchNotification(MessageDispatchNotification messageDispatchNotification) throws Exception {
1:f9d5449:         processDispatchNotificationViaDestination(messageDispatchNotification);
1:d29ca2a:     }
1:d29ca2a: }
============================================================================
author:Hadrian Zbarcea
-------------------------------------------------------------------------------
commit:d54d046
author:gtully
-------------------------------------------------------------------------------
commit:266d23e
/////////////////////////////////////////////////////////////////////////
1: import org.apache.activemq.command.Message;
author:Hiram R. Chirino
-------------------------------------------------------------------------------
commit:58aca86
commit:b0c2a40
/////////////////////////////////////////////////////////////////////////
1:  * 
commit:ecf89a6
/////////////////////////////////////////////////////////////////////////
1:     protected Set<ActiveMQDestination> getInactiveDestinations() {
1:         Set<ActiveMQDestination> inactiveDestinations = super.getInactiveDestinations();
1:         for (Iterator<ActiveMQDestination> iter = inactiveDestinations.iterator(); iter.hasNext();) {
1:             ActiveMQDestination dest = iter.next();
1:             if (!dest.isQueue()) {
1:             }
commit:74a7a8b
/////////////////////////////////////////////////////////////////////////
1: import java.util.Iterator;
1: import java.util.Set;
1: 
0: import javax.jms.InvalidSelectorException;
1: 
commit:f812e34
/////////////////////////////////////////////////////////////////////////
1:     public QueueRegion(RegionBroker broker, DestinationStatistics destinationStatistics,
0:                        UsageManager memoryManager, TaskRunnerFactory taskRunnerFactory,
1:                        DestinationFactory destinationFactory) {
1:         super(broker, destinationStatistics, memoryManager, taskRunnerFactory, destinationFactory);
1:         return "QueueRegion: destinations=" + destinations.size() + ", subscriptions=" + subscriptions.size()
0:                + ", memory=" + memoryManager.getPercentUsage() + "%";
1:     protected Subscription createSubscription(ConnectionContext context, ConsumerInfo info)
0:         throws InvalidSelectorException {
0:             return new QueueBrowserSubscription(broker, context, info);
1:         } else {
0:             return new QueueSubscription(broker, context, info);
0:             ActiveMQDestination dest = (ActiveMQDestination)iter.next();
commit:230a86c
/////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////
1:  *      http://www.apache.org/licenses/LICENSE-2.0
commit:57b4941
/////////////////////////////////////////////////////////////////////////
1:  * Licensed to the Apache Software Foundation (ASF) under one or more
1:  * contributor license agreements.  See the NOTICE file distributed with
1:  * this work for additional information regarding copyright ownership.
1:  * The ASF licenses this file to You under the Apache License, Version 2.0
1:  * (the "License"); you may not use this file except in compliance with
1:  * the License.  You may obtain a copy of the License at
commit:7f5213b
/////////////////////////////////////////////////////////////////////////
0:     protected Destination createDestination(ConnectionContext context, ActiveMQDestination destination) throws Exception {
commit:0f502fa
/////////////////////////////////////////////////////////////////////////
0:     protected Destination createDestination(ConnectionContext context, ActiveMQDestination destination) throws Throwable {
commit:48b4869
/////////////////////////////////////////////////////////////////////////
0:  * Copyright 2005-2006 The Apache Software Foundation
commit:d29ca2a
/////////////////////////////////////////////////////////////////////////
1: /**
1:  *
0:  * Copyright 2004 The Apache Software Foundation
1:  *
0:  * Licensed under the Apache License, Version 2.0 (the "License");
0:  * you may not use this file except in compliance with the License.
0:  * You may obtain a copy of the License at
1:  *
0:  * http://www.apache.org/licenses/LICENSE-2.0
1:  *
1:  * Unless required by applicable law or agreed to in writing, software
1:  * distributed under the License is distributed on an "AS IS" BASIS,
1:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:  * See the License for the specific language governing permissions and
1:  * limitations under the License.
1:  */
1: package org.apache.activemq.broker.region;
1: 
1: import org.apache.activemq.broker.ConnectionContext;
1: import org.apache.activemq.broker.region.policy.PolicyEntry;
0: import org.apache.activemq.broker.region.policy.PolicyMap;
1: import org.apache.activemq.command.ActiveMQDestination;
0: import org.apache.activemq.command.ActiveMQQueue;
1: import org.apache.activemq.command.ConsumerInfo;
0: import org.apache.activemq.memory.UsageManager;
0: import org.apache.activemq.store.MessageStore;
0: import org.apache.activemq.store.PersistenceAdapter;
1: import org.apache.activemq.thread.TaskRunnerFactory;
1: 
0: import javax.jms.InvalidSelectorException;
1: 
0: import java.util.Iterator;
0: import java.util.Set;
1: 
1: /**
1:  * 
0:  * @version $Revision: 1.9 $
1:  */
1: public class QueueRegion extends AbstractRegion {
1: 
0:     private final PolicyMap policyMap;
1: 
0:     public QueueRegion(DestinationStatistics destinationStatistics, UsageManager memoryManager, TaskRunnerFactory taskRunnerFactory,
0:             PersistenceAdapter persistenceAdapter, PolicyMap policyMap) {
0:         super(destinationStatistics, memoryManager, taskRunnerFactory, persistenceAdapter);
0:         this.policyMap = policyMap;
1:     }
1: 
1:     public String toString() {
0:         return "QueueRegion: destinations=" + destinations.size() + ", subscriptions=" + subscriptions.size() + ", memory=" + memoryManager.getPercentUsage()
0:                 + "%";
1:     }
1: 
0:     // Implementation methods
0:     // -------------------------------------------------------------------------
0:     protected Destination createDestination(ActiveMQDestination destination) throws Throwable {
0:         MessageStore store = persistenceAdapter.createQueueMessageStore((ActiveMQQueue) destination);
0:         Queue queue = new Queue(destination, memoryManager, store, destinationStatistics, taskRunnerFactory);
0:         configureQueue(queue, destination);
0:         return queue;
1:     }
1: 
0:     protected void configureQueue(Queue queue, ActiveMQDestination destination) {
0:         if (policyMap != null) {
0:             PolicyEntry entry = policyMap.getEntryFor(destination);
1:             if (entry != null) {
0:                 entry.configure(queue);
1:             }
1:         }
1:     }
1: 
0:     protected Subscription createSubscription(ConnectionContext context, ConsumerInfo info) throws InvalidSelectorException {
1:         if (info.isBrowser()) {
0:             return new QueueBrowserSubscription(context, info);
1:         }
0:         else {
0:             return new QueueSubscription(context, info);
1:         }
1:     }
1: 
0:     protected Set getInactiveDestinations() {
0:         Set inactiveDestinations = super.getInactiveDestinations();
0:         for (Iterator iter = inactiveDestinations.iterator(); iter.hasNext();) {
0:             ActiveMQDestination dest = (ActiveMQDestination) iter.next();
0:             if (!dest.isQueue())
1:                 iter.remove();
1:         }
1:         return inactiveDestinations;
1:     }
1: }
author:Robert Davies
-------------------------------------------------------------------------------
commit:fc63a92
/////////////////////////////////////////////////////////////////////////
0: import org.apache.activemq.broker.region.policy.PolicyEntry;
/////////////////////////////////////////////////////////////////////////
1:         ActiveMQDestination destination = info.getDestination();
1:         PolicyEntry entry = null;
1:         if (destination != null && broker.getDestinationPolicy() != null) {
1:             entry = broker.getDestinationPolicy().getEntryFor(destination);
0:             
0:         }
1:             QueueBrowserSubscription sub = new QueueBrowserSubscription(broker,usageManager, context, info);
1:             if (entry != null) {
1:                 entry.configure(broker, usageManager, sub);
0:             }
1:             return sub;
1:             QueueSubscription sub =   new QueueSubscription(broker, usageManager,context, info);
1:             if (entry != null) {
1:                 entry.configure(broker, usageManager, sub);
0:             }
1:             return sub;
commit:16f2d75
/////////////////////////////////////////////////////////////////////////
0:         
0:             return new QueueBrowserSubscription(broker,usageManager, context, info);
0:             return new QueueSubscription(broker, usageManager,context, info);
commit:044c07d
/////////////////////////////////////////////////////////////////////////
1: import javax.jms.JMSException;
/////////////////////////////////////////////////////////////////////////
1:         throws JMSException {
0:         Destination dest = null;
0:         try {
0:             dest = lookup(context, info.getDestination());
0:         } catch (Exception e) {
0:             JMSException jmsEx = new JMSException("Failed to retrieve destination from region "+ e);
0:             jmsEx.setLinkedException(e);
0:             throw jmsEx;
0:         }
0:             return new QueueBrowserSubscription(broker,dest,usageManager, context, info);
0:             return new QueueSubscription(broker, dest,usageManager,context, info);
commit:9dd11cb
/////////////////////////////////////////////////////////////////////////
1:                + ", memory=" + usageManager.getMemoryUsage().getPercentUsage() + "%";
0:             return new QueueBrowserSubscription(broker,usageManager, context, info);
0:             return new QueueSubscription(broker, usageManager,context, info);
commit:6d8e2c5
/////////////////////////////////////////////////////////////////////////
1: import org.apache.activemq.usage.SystemUsage;
/////////////////////////////////////////////////////////////////////////
1:                        SystemUsage memoryManager, TaskRunnerFactory taskRunnerFactory,
0:                + ", memory=" + memoryManager.getMemoryUsage().getPercentUsage() + "%";
commit:bfaff9b
/////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////
0:             DestinationFactory destinationFactory) {
0:         super(broker,destinationStatistics, memoryManager, taskRunnerFactory, destinationFactory);
/////////////////////////////////////////////////////////////////////////
commit:6cb66e4
/////////////////////////////////////////////////////////////////////////
0:     
0:     public QueueRegion(RegionBroker broker,DestinationStatistics destinationStatistics, UsageManager memoryManager, TaskRunnerFactory taskRunnerFactory,
0:             PersistenceAdapter persistenceAdapter) {
/////////////////////////////////////////////////////////////////////////
0:         if (broker.getDestinationPolicy() != null) {
0:             PolicyEntry entry = broker.getDestinationPolicy().getEntryFor(destination);
commit:4098942
/////////////////////////////////////////////////////////////////////////
0: import org.apache.activemq.broker.Broker;
/////////////////////////////////////////////////////////////////////////
0:     public QueueRegion(Broker broker,DestinationStatistics destinationStatistics, UsageManager memoryManager, TaskRunnerFactory taskRunnerFactory,
0:         super(broker,destinationStatistics, memoryManager, taskRunnerFactory, persistenceAdapter);
/////////////////////////////////////////////////////////////////////////
0:             return new QueueBrowserSubscription(broker,context, info);
0:             return new QueueSubscription(broker,context, info);
author:Gary Tully
-------------------------------------------------------------------------------
commit:f9d5449
/////////////////////////////////////////////////////////////////////////
1: import org.apache.activemq.command.MessageDispatchNotification;
/////////////////////////////////////////////////////////////////////////
0:     
1:     /*
1:      * For a Queue, dispatch order is imperative to match acks, so the dispatch is deferred till 
1:      * the notification to ensure that the subscription chosen by the master is used.
0:      * 
1:      * (non-Javadoc)
1:      * @see org.apache.activemq.broker.region.AbstractRegion#processDispatchNotification(org.apache.activemq.command.MessageDispatchNotification)
1:      */
1:     public void processDispatchNotification(MessageDispatchNotification messageDispatchNotification) throws Exception {
1:         processDispatchNotificationViaDestination(messageDispatchNotification);
0:     }
============================================================================