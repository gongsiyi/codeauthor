1:5660ebc: /**
1:5660ebc:  * Licensed to the Apache Software Foundation (ASF) under one or more
1:5660ebc:  * contributor license agreements.  See the NOTICE file distributed with
1:5660ebc:  * this work for additional information regarding copyright ownership.
1:5660ebc:  * The ASF licenses this file to You under the Apache License, Version 2.0
1:5660ebc:  * (the "License"); you may not use this file except in compliance with
1:5660ebc:  * the License.  You may obtain a copy of the License at
1:5660ebc:  *
1:5660ebc:  *      http://www.apache.org/licenses/LICENSE-2.0
1:5660ebc:  *
1:5660ebc:  * Unless required by applicable law or agreed to in writing, software
1:5660ebc:  * distributed under the License is distributed on an "AS IS" BASIS,
1:5660ebc:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:5660ebc:  * See the License for the specific language governing permissions and
1:5660ebc:  * limitations under the License.
1:5660ebc:  */
1:5660ebc: package org.apache.activemq.thread;
8:5660ebc: 
1:18300c6: import static org.junit.Assert.assertEquals;
1:18300c6: import static org.junit.Assert.assertTrue;
1:18300c6: import static org.junit.Assert.fail;
1:18300c6: 
1:5660ebc: import java.util.concurrent.Callable;
1:5660ebc: import java.util.concurrent.CountDownLatch;
1:5660ebc: import java.util.concurrent.ExecutorService;
1:5660ebc: import java.util.concurrent.Executors;
1:5660ebc: import java.util.concurrent.Future;
1:d8be50b: import java.util.concurrent.SynchronousQueue;
1:d8be50b: import java.util.concurrent.ThreadFactory;
1:d8be50b: import java.util.concurrent.ThreadPoolExecutor;
1:5660ebc: import java.util.concurrent.TimeUnit;
1:5660ebc: import java.util.concurrent.TimeoutException;
1:d8be50b: import java.util.concurrent.atomic.AtomicInteger;
1:5660ebc: 
1:18300c6: import org.junit.After;
1:18300c6: import org.junit.Before;
1:18300c6: import org.junit.Rule;
1:18300c6: import org.junit.Test;
1:18300c6: import org.junit.rules.TestName;
1:5660ebc: 
1:18300c6: public class PooledTaskRunnerTest {
1:18300c6: 
1:18300c6:     @Rule public TestName name = new TestName();
1:18300c6: 
1:5660ebc:     private ExecutorService executor;
1:5660ebc: 
1:18300c6:     @Before
1:18300c6:     public void setUp() throws Exception {
1:8b34eac:         executor = Executors.newCachedThreadPool(new IgnoreUncaughtExceptionThreadFactory());
2:5660ebc:     }
1:8b34eac: 
1:18300c6:     @After
1:18300c6:     public void tearDown() throws Exception {
1:5660ebc:         executor.shutdownNow();
1:5660ebc:     }
1:d8be50b: 
1:18300c6:     @Test
1:5660ebc:     public void testNormalBehavior() throws Exception {
1:5660ebc:         final CountDownLatch latch = new CountDownLatch( 1 );
1:d8be50b: 
1:5660ebc:         PooledTaskRunner runner = new PooledTaskRunner( executor, new Task() {
1:18300c6:             @Override
1:5660ebc:             public boolean iterate() {
1:5660ebc:                 latch.countDown();
1:5660ebc: 
1:5660ebc:                 return false;
1:5660ebc:             }
1:5660ebc:         }, 1 );
1:5660ebc: 
1:5660ebc:         runner.wakeup();
1:5660ebc: 
1:5660ebc:         assertTrue( latch.await( 1, TimeUnit.SECONDS ) );
1:5660ebc: 
1:5660ebc:         runner.shutdown();
1:d8be50b:     }
1:d8be50b: 
1:18300c6:     @Test
1:d8be50b:     public void testWakeupResultsInThreadSafeCalls() throws Exception {
1:18300c6: 
1:d8be50b:         ThreadPoolExecutor executor = new ThreadPoolExecutor(0, Integer.MAX_VALUE, 10, TimeUnit.SECONDS, new SynchronousQueue<Runnable>(), new ThreadFactory() {
1:18300c6:             @Override
1:d8be50b:             public Thread newThread(Runnable runnable) {
1:18300c6:                 Thread thread = new Thread(runnable, name.getMethodName());
1:d8be50b:                 thread.setDaemon(true);
1:d8be50b:                 thread.setPriority(Thread.NORM_PRIORITY);
1:d8be50b:                 return thread;
1:d8be50b:             }
1:d8be50b:         });
1:d8be50b:         final CountDownLatch doneLatch = new CountDownLatch( 100 );
1:d8be50b:         final AtomicInteger clashCount = new AtomicInteger();
1:d8be50b:         final AtomicInteger count = new AtomicInteger();
1:8b34eac: 
1:d8be50b: 
1:d8be50b:         final PooledTaskRunner runner = new PooledTaskRunner(executor, new Task() {
1:d8be50b:             String threadUnSafeVal = null;
1:18300c6:             @Override
1:d8be50b:             public boolean iterate() {
1:d8be50b:                 if (threadUnSafeVal != null) {
1:d8be50b:                     clashCount.incrementAndGet();
1:d8be50b:                 }
1:d8be50b:                 threadUnSafeVal = Thread.currentThread().getName();
1:d8be50b:                 count.incrementAndGet();
1:d8be50b:                 doneLatch.countDown();
1:d8be50b:                 if (!threadUnSafeVal.equals(Thread.currentThread().getName())) {
1:d8be50b:                     clashCount.incrementAndGet();
1:d8be50b:                 }
1:d8be50b:                 threadUnSafeVal = null;
1:d8be50b:                 return false;
1:d8be50b:             }
1:d8be50b:         }, 1 );
1:d8be50b: 
1:d8be50b:         Runnable doWakeup = new Runnable() {
1:18300c6:             @Override
1:d8be50b:             public void run() {
1:d8be50b:                 try {
1:d8be50b:                     runner.wakeup();
1:d8be50b:                 } catch (InterruptedException ignored) {
1:d8be50b:                 }
1:d8be50b:             }
1:d8be50b:         };
1:18300c6: 
1:d8be50b:         final int iterations = 1000;
1:d8be50b:         for (int i=0; i< iterations; i++) {
1:d8be50b:             if (i%100 == 0) {
1:d8be50b:                 Thread.sleep(10);
1:d8be50b:             }
1:d8be50b:             executor.execute(doWakeup);
1:18300c6:         }
1:18300c6: 
1:d8be50b:         doneLatch.await(20, TimeUnit.SECONDS);
1:d8be50b:         assertEquals("thread safety clash", 0, clashCount.get());
1:d8be50b:         assertTrue("called more than once", count.get() > 1);
1:d8be50b:         runner.shutdown();
1:d8be50b:     }
1:d8be50b: 
1:18300c6:     @Test
1:5660ebc:     public void testShutsDownAfterRunnerFailure() throws Exception {
1:5660ebc:         Future<Object> future = executor.submit( new Callable<Object>() {
1:18300c6:             @Override
1:5660ebc:             public Object call() throws Exception {
1:5660ebc:                 final CountDownLatch latch = new CountDownLatch( 1 );
1:d8be50b: 
1:5660ebc:                 PooledTaskRunner runner = new PooledTaskRunner( executor, new Task() {
1:18300c6:                     @Override
1:5660ebc:                     public boolean iterate() {
1:5660ebc:                         latch.countDown();
1:d8be50b: 
1:5660ebc:                         throw new RuntimeException();
1:5660ebc:                     }
1:5660ebc:                 }, 1 );
1:5660ebc: 
1:5660ebc:                 runner.wakeup();
1:5660ebc: 
1:5660ebc:                 assertTrue( latch.await( 1, TimeUnit.SECONDS ) );
1:5660ebc: 
1:5660ebc:                 runner.shutdown();
1:5660ebc: 
1:5660ebc:                 return null;
1:5660ebc:             }
1:5660ebc:         } );
1:5660ebc: 
1:5660ebc:         try {
1:5660ebc:             future.get( 5, TimeUnit.SECONDS );
1:5660ebc:         } catch( TimeoutException e ) {
1:5660ebc:             fail( "TaskRunner did not shut down cleanly" );
1:5660ebc:         }
1:5660ebc:     }
1:18300c6: 
1:18300c6:     private class IgnoreUncaughtExceptionThreadFactory implements ThreadFactory, Thread.UncaughtExceptionHandler {
1:18300c6: 
1:8b34eac:         ThreadFactory threadFactory = Executors.defaultThreadFactory();
1:18300c6: 
1:18300c6:         @Override
1:8b34eac:         public Thread newThread(Runnable r) {
1:8b34eac:             Thread thread = threadFactory.newThread(r);
1:8b34eac:             thread.setUncaughtExceptionHandler(this);
1:8b34eac:             return thread;
1:8b34eac:         }
1:18300c6: 
1:18300c6:         @Override
1:8b34eac:         public void uncaughtException(Thread t, Throwable e) {
1:8b34eac:             // ignore ie: no printStackTrace that would sully the test console
1:8b34eac:          }
1:8b34eac:     }
1:5660ebc: }
============================================================================
author:Timothy Bish
-------------------------------------------------------------------------------
commit:18300c6
/////////////////////////////////////////////////////////////////////////
1: import static org.junit.Assert.assertEquals;
1: import static org.junit.Assert.assertTrue;
1: import static org.junit.Assert.fail;
1: 
/////////////////////////////////////////////////////////////////////////
1: import org.junit.After;
1: import org.junit.Before;
1: import org.junit.Rule;
1: import org.junit.Test;
1: import org.junit.rules.TestName;
1: public class PooledTaskRunnerTest {
1: 
1:     @Rule public TestName name = new TestName();
1: 
1:     @Before
1:     public void setUp() throws Exception {
1:     @After
1:     public void tearDown() throws Exception {
1:     @Test
1:             @Override
/////////////////////////////////////////////////////////////////////////
1:     @Test
1: 
1:             @Override
1:                 Thread thread = new Thread(runnable, name.getMethodName());
/////////////////////////////////////////////////////////////////////////
1:             @Override
/////////////////////////////////////////////////////////////////////////
1:             @Override
/////////////////////////////////////////////////////////////////////////
1: 
1:         }
1: 
1:     @Test
1:             @Override
1:                     @Override
/////////////////////////////////////////////////////////////////////////
1: 
1:     private class IgnoreUncaughtExceptionThreadFactory implements ThreadFactory, Thread.UncaughtExceptionHandler {
1: 
1: 
1:         @Override
1: 
1:         @Override
author:Timothy A. Bish
-------------------------------------------------------------------------------
commit:a6ebc8d
author:Gary Tully
-------------------------------------------------------------------------------
commit:8b34eac
/////////////////////////////////////////////////////////////////////////
1:         executor = Executors.newCachedThreadPool(new IgnoreUncaughtExceptionThreadFactory());
/////////////////////////////////////////////////////////////////////////
1:     
0:     class IgnoreUncaughtExceptionThreadFactory implements ThreadFactory, Thread.UncaughtExceptionHandler {
1:         ThreadFactory threadFactory = Executors.defaultThreadFactory();
1:         public Thread newThread(Runnable r) {
1:             Thread thread = threadFactory.newThread(r);
1:             thread.setUncaughtExceptionHandler(this);
1:             return thread;
1:         }
1:         
1:         public void uncaughtException(Thread t, Throwable e) {
1:             // ignore ie: no printStackTrace that would sully the test console
1:          }
1:     }
author:Hiram R. Chirino
-------------------------------------------------------------------------------
commit:d8be50b
/////////////////////////////////////////////////////////////////////////
1: import java.util.concurrent.SynchronousQueue;
1: import java.util.concurrent.ThreadFactory;
1: import java.util.concurrent.ThreadPoolExecutor;
1: import java.util.concurrent.atomic.AtomicInteger;
/////////////////////////////////////////////////////////////////////////
1:     
1:     public void testWakeupResultsInThreadSafeCalls() throws Exception {
1:         
1:         ThreadPoolExecutor executor = new ThreadPoolExecutor(0, Integer.MAX_VALUE, 10, TimeUnit.SECONDS, new SynchronousQueue<Runnable>(), new ThreadFactory() {
1:             public Thread newThread(Runnable runnable) {
0:                 Thread thread = new Thread(runnable, getName());
1:                 thread.setDaemon(true);
1:                 thread.setPriority(Thread.NORM_PRIORITY);
1:                 return thread;
1:             }
1:         });
1:         final CountDownLatch doneLatch = new CountDownLatch( 100 );
1:         final AtomicInteger clashCount = new AtomicInteger();
1:         final AtomicInteger count = new AtomicInteger();
1: 
1: 
1:         final PooledTaskRunner runner = new PooledTaskRunner(executor, new Task() {
1:             String threadUnSafeVal = null;
1:             public boolean iterate() {
1:                 if (threadUnSafeVal != null) {
1:                     clashCount.incrementAndGet();
1:                 }
1:                 threadUnSafeVal = Thread.currentThread().getName();
1:                 count.incrementAndGet();
1:                 doneLatch.countDown();
1:                 if (!threadUnSafeVal.equals(Thread.currentThread().getName())) {
1:                     clashCount.incrementAndGet();
1:                 }
1:                 threadUnSafeVal = null;
1:                 return false;
1:             }
1:         }, 1 );
1: 
1:         Runnable doWakeup = new Runnable() {
1:             public void run() {
1:                 try {
1:                     runner.wakeup();
1:                 } catch (InterruptedException ignored) {
1:                 }
1:             }
1:         };
1:         
1:         final int iterations = 1000;
1:         for (int i=0; i< iterations; i++) {
1:             if (i%100 == 0) {
1:                 Thread.sleep(10);
1:             }
1:             executor.execute(doWakeup);
1:         }    
1:         
1:         doneLatch.await(20, TimeUnit.SECONDS);
1:         assertEquals("thread safety clash", 0, clashCount.get());
1:         assertTrue("called more than once", count.get() > 1);
1:         runner.shutdown();
1:     }
1: 
author:Robert Davies
-------------------------------------------------------------------------------
commit:5660ebc
/////////////////////////////////////////////////////////////////////////
1: /**
1:  * Licensed to the Apache Software Foundation (ASF) under one or more
1:  * contributor license agreements.  See the NOTICE file distributed with
1:  * this work for additional information regarding copyright ownership.
1:  * The ASF licenses this file to You under the Apache License, Version 2.0
1:  * (the "License"); you may not use this file except in compliance with
1:  * the License.  You may obtain a copy of the License at
1:  *
1:  *      http://www.apache.org/licenses/LICENSE-2.0
1:  *
1:  * Unless required by applicable law or agreed to in writing, software
1:  * distributed under the License is distributed on an "AS IS" BASIS,
1:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:  * See the License for the specific language governing permissions and
1:  * limitations under the License.
1:  */
1: package org.apache.activemq.thread;
1: 
1: import java.util.concurrent.Callable;
1: import java.util.concurrent.CountDownLatch;
1: import java.util.concurrent.ExecutorService;
1: import java.util.concurrent.Executors;
1: import java.util.concurrent.Future;
1: import java.util.concurrent.TimeUnit;
1: import java.util.concurrent.TimeoutException;
1: 
0: import junit.framework.TestCase;
1: 
0: public class PooledTaskRunnerTest extends TestCase {
1:     private ExecutorService executor;
1: 
0:     @Override
0:     protected void setUp() throws Exception {
0:         super.setUp();
0:         executor = Executors.newCachedThreadPool();
1:     }
1: 
0:     @Override
0:     protected void tearDown() throws Exception {
1:         executor.shutdownNow();
1: 
0:         super.tearDown();
1:     }
1: 
1:     public void testNormalBehavior() throws Exception {
1:         final CountDownLatch latch = new CountDownLatch( 1 );
1: 
1:         PooledTaskRunner runner = new PooledTaskRunner( executor, new Task() {
1:             public boolean iterate() {
1:                 latch.countDown();
1: 
1:                 return false;
1:             }
1:         }, 1 );
1: 
1:         runner.wakeup();
1: 
1:         assertTrue( latch.await( 1, TimeUnit.SECONDS ) );
1: 
1:         runner.shutdown();
1:     }
1: 
1:     public void testShutsDownAfterRunnerFailure() throws Exception {
1:         Future<Object> future = executor.submit( new Callable<Object>() {
1:             public Object call() throws Exception {
1:                 final CountDownLatch latch = new CountDownLatch( 1 );
1: 
1:                 PooledTaskRunner runner = new PooledTaskRunner( executor, new Task() {
1:                     public boolean iterate() {
1:                         latch.countDown();
1: 
1:                         throw new RuntimeException();
1:                     }
1:                 }, 1 );
1: 
1:                 runner.wakeup();
1: 
1:                 assertTrue( latch.await( 1, TimeUnit.SECONDS ) );
1: 
1:                 runner.shutdown();
1: 
1:                 return null;
1:             }
1:         } );
1: 
1:         try {
1:             future.get( 5, TimeUnit.SECONDS );
1:         } catch( TimeoutException e ) {
1:             fail( "TaskRunner did not shut down cleanly" );
1:         }
1:     }
1: }
============================================================================