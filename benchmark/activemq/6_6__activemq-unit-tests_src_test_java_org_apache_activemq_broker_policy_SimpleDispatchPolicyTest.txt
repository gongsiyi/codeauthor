1:ff457e2: /**
1:57b4941:  * Licensed to the Apache Software Foundation (ASF) under one or more
1:57b4941:  * contributor license agreements.  See the NOTICE file distributed with
1:57b4941:  * this work for additional information regarding copyright ownership.
1:57b4941:  * The ASF licenses this file to You under the Apache License, Version 2.0
1:57b4941:  * (the "License"); you may not use this file except in compliance with
1:57b4941:  * the License.  You may obtain a copy of the License at
3:ff457e2:  *
1:230a86c:  *      http://www.apache.org/licenses/LICENSE-2.0
1:ff457e2:  *
1:ff457e2:  * Unless required by applicable law or agreed to in writing, software
1:ff457e2:  * distributed under the License is distributed on an "AS IS" BASIS,
1:ff457e2:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:ff457e2:  * See the License for the specific language governing permissions and
1:ff457e2:  * limitations under the License.
1:ff457e2:  */
1:ff457e2: package org.apache.activemq.broker.policy;
1:74a7a8b: 
1:ff457e2: import org.apache.activemq.broker.BrokerService;
1:74a7a8b: import org.apache.activemq.broker.QueueSubscriptionTest;
1:deaeab0: import org.apache.activemq.broker.region.policy.FixedCountSubscriptionRecoveryPolicy;
1:ff457e2: import org.apache.activemq.broker.region.policy.PolicyEntry;
1:ff457e2: import org.apache.activemq.broker.region.policy.PolicyMap;
1:ff457e2: import org.apache.activemq.broker.region.policy.SimpleDispatchPolicy;
1:3d95025: import org.apache.activemq.util.MessageIdList;
1:bec711c: import org.junit.Test;
1:bec711c: import org.junit.runner.RunWith;
1:bec711c: import org.junit.runners.BlockJUnit4ClassRunner;
1:bec711c: 
1:fa6aaf9: import javax.jms.MessageConsumer;
1:fa6aaf9: import java.util.Iterator;
1:fa6aaf9: 
1:fa6aaf9: import static org.junit.Assert.assertEquals;
1:fa6aaf9: import static org.junit.Assert.fail;
1:c7d559f: 
1:bec711c: @RunWith(BlockJUnit4ClassRunner.class)
1:ff457e2: public class SimpleDispatchPolicyTest extends QueueSubscriptionTest {
5:ff457e2: 
1:c7d559f:     @Override
1:ff457e2:     protected BrokerService createBroker() throws Exception {
1:ff457e2:         BrokerService broker = super.createBroker();
1:ff457e2: 
1:ff457e2:         PolicyEntry policy = new PolicyEntry();
1:ff457e2:         policy.setDispatchPolicy(new SimpleDispatchPolicy());
1:deaeab0:         policy.setSubscriptionRecoveryPolicy(new FixedCountSubscriptionRecoveryPolicy());
1:ff457e2:         PolicyMap pMap = new PolicyMap();
1:ff457e2:         pMap.setDefaultEntry(policy);
1:ff457e2: 
1:ff457e2:         broker.setDestinationPolicy(pMap);
1:ff457e2: 
1:ff457e2:         return broker;
1:ff457e2:     }
1:ff457e2: 
1:c7d559f:     @Override
1:bec711c:     @Test(timeout = 60 * 1000)
1:ff457e2:     public void testOneProducerTwoConsumersSmallMessagesLargePrefetch() throws Exception {
1:ff457e2:         super.testOneProducerTwoConsumersSmallMessagesLargePrefetch();
1:ff457e2: 
1:ff457e2:         // One consumer should have received all messages, and the rest none
1:c7d559f:         // assertOneConsumerReceivedAllMessages(messageCount);
1:ff457e2:     }
1:ff457e2: 
1:c7d559f:     @Override
1:bec711c:     @Test(timeout = 60 * 1000)
1:ff457e2:     public void testOneProducerTwoConsumersLargeMessagesLargePrefetch() throws Exception {
1:ff457e2:         super.testOneProducerTwoConsumersLargeMessagesLargePrefetch();
1:ff457e2: 
1:ff457e2:         // One consumer should have received all messages, and the rest none
1:c7d559f:         // assertOneConsumerReceivedAllMessages(messageCount);
1:ff457e2:     }
1:ff457e2: 
1:ff457e2:     public void assertOneConsumerReceivedAllMessages(int messageCount) throws Exception {
1:ff457e2:         boolean found = false;
1:c7d559f:         for (Iterator<MessageConsumer> i = consumers.keySet().iterator(); i.hasNext();) {
1:c7d559f:             MessageIdList messageIdList = consumers.get(i.next());
1:3d95025:             int count = messageIdList.getMessageCount();
1:b49256b:             if (count > 0) {
1:ff457e2:                 if (found) {
1:ff457e2:                     fail("No other consumers should have received any messages");
1:ff457e2:                 } else {
1:b49256b:                     assertEquals("Consumer should have received all messages.", messageCount, count);
1:ff457e2:                     found = true;
1:ff457e2:                 }
1:ff457e2:             }
1:ff457e2:         }
1:ff457e2: 
1:ff457e2:         if (!found) {
1:ff457e2:             fail("At least one consumer should have received all messages");
1:ff457e2:         }
1:ff457e2:     }
1:ff457e2: }
============================================================================
author:Kevin Earls
-------------------------------------------------------------------------------
commit:fa6aaf9
/////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////
1: import javax.jms.MessageConsumer;
1: import java.util.Iterator;
1: 
1: import static org.junit.Assert.assertEquals;
1: import static org.junit.Assert.fail;
commit:bec711c
/////////////////////////////////////////////////////////////////////////
1: import org.junit.Test;
1: import org.junit.runner.RunWith;
1: import org.junit.runners.BlockJUnit4ClassRunner;
0: import static org.junit.Assert.*;
1: 
1: @RunWith(BlockJUnit4ClassRunner.class)
/////////////////////////////////////////////////////////////////////////
1:     @Test(timeout = 60 * 1000)
/////////////////////////////////////////////////////////////////////////
1:     @Test(timeout = 60 * 1000)
author:Timothy A. Bish
-------------------------------------------------------------------------------
commit:c7d559f
/////////////////////////////////////////////////////////////////////////
0: import javax.jms.MessageConsumer;
1: 
/////////////////////////////////////////////////////////////////////////
1:     @Override
/////////////////////////////////////////////////////////////////////////
1:     @Override
1:         // assertOneConsumerReceivedAllMessages(messageCount);
1:     @Override
1:         // assertOneConsumerReceivedAllMessages(messageCount);
1:         for (Iterator<MessageConsumer> i = consumers.keySet().iterator(); i.hasNext();) {
1:             MessageIdList messageIdList = consumers.get(i.next());
commit:ef24cc9
author:Robert Davies
-------------------------------------------------------------------------------
commit:7882eb7
/////////////////////////////////////////////////////////////////////////
0:        // assertOneConsumerReceivedAllMessages(messageCount);
0:        // assertOneConsumerReceivedAllMessages(messageCount);
commit:deaeab0
/////////////////////////////////////////////////////////////////////////
1: import org.apache.activemq.broker.region.policy.FixedCountSubscriptionRecoveryPolicy;
/////////////////////////////////////////////////////////////////////////
1:         policy.setSubscriptionRecoveryPolicy(new FixedCountSubscriptionRecoveryPolicy());
author:Hiram R. Chirino
-------------------------------------------------------------------------------
commit:74a7a8b
/////////////////////////////////////////////////////////////////////////
0: import java.util.Iterator;
1: 
1: import org.apache.activemq.broker.QueueSubscriptionTest;
commit:230a86c
/////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////
1:  *      http://www.apache.org/licenses/LICENSE-2.0
/////////////////////////////////////////////////////////////////////////
0:         for (Iterator i = consumers.keySet().iterator(); i.hasNext();) {
commit:57b4941
/////////////////////////////////////////////////////////////////////////
1:  * Licensed to the Apache Software Foundation (ASF) under one or more
1:  * contributor license agreements.  See the NOTICE file distributed with
1:  * this work for additional information regarding copyright ownership.
1:  * The ASF licenses this file to You under the Apache License, Version 2.0
1:  * (the "License"); you may not use this file except in compliance with
1:  * the License.  You may obtain a copy of the License at
commit:3d95025
/////////////////////////////////////////////////////////////////////////
1: import org.apache.activemq.util.MessageIdList;
/////////////////////////////////////////////////////////////////////////
0:             MessageIdList messageIdList = (MessageIdList)consumers.get(i.next());
1:             int count = messageIdList.getMessageCount();
author:James Strachan
-------------------------------------------------------------------------------
commit:b49256b
/////////////////////////////////////////////////////////////////////////
0: import org.apache.activemq.util.MessageList;
/////////////////////////////////////////////////////////////////////////
0:             MessageList messageList = (MessageList)consumers.get(i.next());
0:             int count = messageList.getMessageCount();
1:             if (count > 0) {
1:                     assertEquals("Consumer should have received all messages.", messageCount, count);
author:Adrian T. Co
-------------------------------------------------------------------------------
commit:ff457e2
/////////////////////////////////////////////////////////////////////////
1: /**
1:  *
0:  * Copyright 2005-2006 The Apache Software Foundation
1:  *
0:  * Licensed under the Apache License, Version 2.0 (the "License");
0:  * you may not use this file except in compliance with the License.
0:  * You may obtain a copy of the License at
1:  *
0:  * http://www.apache.org/licenses/LICENSE-2.0
1:  *
1:  * Unless required by applicable law or agreed to in writing, software
1:  * distributed under the License is distributed on an "AS IS" BASIS,
1:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:  * See the License for the specific language governing permissions and
1:  * limitations under the License.
1:  */
1: package org.apache.activemq.broker.policy;
1: 
0: import org.apache.activemq.broker.QueueSubscriptionTest;
1: import org.apache.activemq.broker.BrokerService;
1: import org.apache.activemq.broker.region.policy.PolicyEntry;
1: import org.apache.activemq.broker.region.policy.PolicyMap;
1: import org.apache.activemq.broker.region.policy.SimpleDispatchPolicy;
1: 
0: import java.util.Iterator;
0: import java.util.List;
1: 
1: public class SimpleDispatchPolicyTest extends QueueSubscriptionTest {
1: 
1:     protected BrokerService createBroker() throws Exception {
1:         BrokerService broker = super.createBroker();
1: 
1:         PolicyEntry policy = new PolicyEntry();
1:         policy.setDispatchPolicy(new SimpleDispatchPolicy());
1: 
1:         PolicyMap pMap = new PolicyMap();
1:         pMap.setDefaultEntry(policy);
1: 
1:         broker.setDestinationPolicy(pMap);
1: 
1:         return broker;
1:     }
1: 
1:     public void testOneProducerTwoConsumersSmallMessagesLargePrefetch() throws Exception {
1:         super.testOneProducerTwoConsumersSmallMessagesLargePrefetch();
1: 
1:         // One consumer should have received all messages, and the rest none
0:         assertOneConsumerReceivedAllMessages(messageCount);
1:     }
1: 
1:     public void testOneProducerTwoConsumersLargeMessagesLargePrefetch() throws Exception {
1:         super.testOneProducerTwoConsumersLargeMessagesLargePrefetch();
1: 
1:         // One consumer should have received all messages, and the rest none
0:         assertOneConsumerReceivedAllMessages(messageCount);
1:     }
1: 
1:     public void assertOneConsumerReceivedAllMessages(int messageCount) throws Exception {
1:         boolean found = false;
0:         for (Iterator i=consumers.keySet().iterator(); i.hasNext();) {
0:             List messageList = (List)consumers.get(i.next());
0:             if (messageList.size() > 0) {
1:                 if (found) {
1:                     fail("No other consumers should have received any messages");
1:                 } else {
0:                     assertTrue("Consumer should have received all " + messageCount + " messages. Actual messages received is " + messageList.size(), messageList.size()==messageCount);
1:                     found = true;
1:                 }
1:             }
1:         }
1: 
1:         if (!found) {
1:             fail("At least one consumer should have received all messages");
1:         }
1:     }
1: }
============================================================================