1:a107823: /**
1:57b4941:  * Licensed to the Apache Software Foundation (ASF) under one or more
1:57b4941:  * contributor license agreements.  See the NOTICE file distributed with
1:57b4941:  * this work for additional information regarding copyright ownership.
1:57b4941:  * The ASF licenses this file to You under the Apache License, Version 2.0
1:57b4941:  * (the "License"); you may not use this file except in compliance with
1:57b4941:  * the License.  You may obtain a copy of the License at
3:a107823:  *
1:5f1adbe:  *      http://www.apache.org/licenses/LICENSE-2.0
1:a107823:  *
1:a107823:  * Unless required by applicable law or agreed to in writing, software
1:a107823:  * distributed under the License is distributed on an "AS IS" BASIS,
1:a107823:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:a107823:  * See the License for the specific language governing permissions and
1:a107823:  * limitations under the License.
1:a107823:  */
1:a107823: package org.apache.activemq.console.filter;
1:a107823: 
1:a107823: import java.util.HashMap;
1:a107823: import java.util.Iterator;
1:5f1adbe: import java.util.Map;
1:5f1adbe: import java.util.Set;
1:a107823: 
1:a107823: public class GroupPropertiesViewFilter extends PropertiesViewFilter {
1:a107823: 
1:a107823:     /**
1:5f1adbe:      * Creates a group properties filter that is able to filter the display
1:5f1adbe:      * result based on a group prefix
1:5f1adbe:      * 
1:a107823:      * @param next - the next query filter
1:a107823:      */
1:a107823:     public GroupPropertiesViewFilter(QueryFilter next) {
1:a107823:         super(next);
1:a107823:     }
1:a107823: 
1:a107823:     /**
1:5f1adbe:      * Creates a group properties filter that is able to filter the display
1:5f1adbe:      * result based on a group prefix
1:5f1adbe:      * 
1:a107823:      * @param groupView - the group filter to use
1:a107823:      * @param next - the next query filter
1:a107823:      */
1:a107823:     public GroupPropertiesViewFilter(Set groupView, QueryFilter next) {
1:a107823:         super(groupView, next);
1:a107823:     }
1:a107823: 
1:a107823:     /**
1:a107823:      * Filter the properties that matches the group prefix only.
1:5f1adbe:      * 
1:a107823:      * @param data - map data to filter
1:a107823:      * @return - filtered map data
1:a107823:      */
1:a107823:     protected Map filterView(Map data) {
1:a107823:         // If no view specified, display all attributes
1:a107823:         if (viewFilter == null || viewFilter.isEmpty()) {
1:a107823:             return data;
1:a107823:         }
1:a107823: 
1:a107823:         Map newData;
1:a107823:         try {
1:a107823:             // Lets try to use the same class as the original
1:5f1adbe:             newData = data.getClass().newInstance();
1:a107823:         } catch (Exception e) {
1:a107823:             // Lets use a default HashMap
1:a107823:             newData = new HashMap();
1:a107823:         }
1:a107823: 
1:a107823:         // Filter the keys to view
1:5f1adbe:         for (Iterator<String> i = data.keySet().iterator(); i.hasNext();) {
1:5f1adbe:             String key = i.next();
1:a107823: 
1:a107823:             // Checks if key matches any of the group filter
1:5f1adbe:             for (Iterator j = viewFilter.iterator(); j.hasNext();) {
1:a107823:                 String group = (String)j.next();
1:a107823:                 if (key.startsWith(group)) {
1:a107823:                     newData.put(key, data.get(key));
1:a107823:                     break;
1:a107823:                 }
1:a107823:             }
1:a107823:         }
1:a107823: 
1:a107823:         return newData;
1:a107823:     }
1:a107823: }
============================================================================
author:Hiram R. Chirino
-------------------------------------------------------------------------------
commit:5f1adbe
/////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////
1:  *      http://www.apache.org/licenses/LICENSE-2.0
/////////////////////////////////////////////////////////////////////////
1: import java.util.Map;
1: import java.util.Set;
1:      * Creates a group properties filter that is able to filter the display
1:      * result based on a group prefix
1:      * 
/////////////////////////////////////////////////////////////////////////
1:      * Creates a group properties filter that is able to filter the display
1:      * result based on a group prefix
1:      * 
/////////////////////////////////////////////////////////////////////////
1:      * 
/////////////////////////////////////////////////////////////////////////
1:             newData = data.getClass().newInstance();
1:         for (Iterator<String> i = data.keySet().iterator(); i.hasNext();) {
1:             String key = i.next();
1:             for (Iterator j = viewFilter.iterator(); j.hasNext();) {
commit:57b4941
/////////////////////////////////////////////////////////////////////////
1:  * Licensed to the Apache Software Foundation (ASF) under one or more
1:  * contributor license agreements.  See the NOTICE file distributed with
1:  * this work for additional information regarding copyright ownership.
1:  * The ASF licenses this file to You under the Apache License, Version 2.0
1:  * (the "License"); you may not use this file except in compliance with
1:  * the License.  You may obtain a copy of the License at
commit:a107823
/////////////////////////////////////////////////////////////////////////
1: /**
1:  *
0:  * Copyright 2005-2006 The Apache Software Foundation
1:  *
0:  * Licensed under the Apache License, Version 2.0 (the "License");
0:  * you may not use this file except in compliance with the License.
0:  * You may obtain a copy of the License at
1:  *
0:  * http://www.apache.org/licenses/LICENSE-2.0
1:  *
1:  * Unless required by applicable law or agreed to in writing, software
1:  * distributed under the License is distributed on an "AS IS" BASIS,
1:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:  * See the License for the specific language governing permissions and
1:  * limitations under the License.
1:  */
1: package org.apache.activemq.console.filter;
1: 
0: import java.util.Set;
0: import java.util.Map;
1: import java.util.HashMap;
1: import java.util.Iterator;
1: 
1: public class GroupPropertiesViewFilter extends PropertiesViewFilter {
1: 
1:     /**
0:      * Creates a group properties filter that is able to filter the display result based on a group prefix
1:      * @param next - the next query filter
1:      */
1:     public GroupPropertiesViewFilter(QueryFilter next) {
1:         super(next);
1:     }
1: 
1:     /**
0:      * Creates a group properties filter that is able to filter the display result based on a group prefix
1:      * @param groupView - the group filter to use
1:      * @param next - the next query filter
1:      */
1:     public GroupPropertiesViewFilter(Set groupView, QueryFilter next) {
1:         super(groupView, next);
1:     }
1: 
1:     /**
1:      * Filter the properties that matches the group prefix only.
1:      * @param data - map data to filter
1:      * @return - filtered map data
1:      */
1:     protected Map filterView(Map data) {
1:         // If no view specified, display all attributes
1:         if (viewFilter == null || viewFilter.isEmpty()) {
1:             return data;
1:         }
1: 
1:         Map newData;
1:         try {
1:             // Lets try to use the same class as the original
0:             newData = (Map)data.getClass().newInstance();
1:         } catch (Exception e) {
1:             // Lets use a default HashMap
1:             newData = new HashMap();
1:         }
1: 
1:         // Filter the keys to view
0:         for (Iterator i=data.keySet().iterator(); i.hasNext();) {
0:             String key = (String)i.next();
1: 
1:             // Checks if key matches any of the group filter
0:             for (Iterator j=viewFilter.iterator(); j.hasNext();) {
1:                 String group = (String)j.next();
1:                 if (key.startsWith(group)) {
1:                     newData.put(key, data.get(key));
1:                     break;
1:                 }
1:             }
1:         }
1: 
1:         return newData;
1:     }
1: }
author:Adrian T. Co
-------------------------------------------------------------------------------
commit:7fa8660
/////////////////////////////////////////////////////////////////////////
0: package org.apache.activemq.console.filter;
commit:4b8822f
/////////////////////////////////////////////////////////////////////////
0: /**
0:  *
0:  * Copyright 2005-2006 The Apache Software Foundation
0:  *
0:  * Licensed under the Apache License, Version 2.0 (the "License");
0:  * you may not use this file except in compliance with the License.
0:  * You may obtain a copy of the License at
0:  *
0:  * http://www.apache.org/licenses/LICENSE-2.0
0:  *
0:  * Unless required by applicable law or agreed to in writing, software
0:  * distributed under the License is distributed on an "AS IS" BASIS,
0:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
0:  * See the License for the specific language governing permissions and
0:  * limitations under the License.
0:  */
0: package org.apache.activemq.broker.console.filter;
0: 
0: import java.util.Set;
0: import java.util.Map;
0: import java.util.HashMap;
0: import java.util.Iterator;
0: 
0: public class GroupPropertiesViewFilter extends PropertiesViewFilter {
0: 
0:     /**
0:      * Creates a group properties filter that is able to filter the display result based on a group prefix
0:      * @param next - the next query filter
0:      */
0:     public GroupPropertiesViewFilter(QueryFilter next) {
0:         super(next);
0:     }
0: 
0:     /**
0:      * Creates a group properties filter that is able to filter the display result based on a group prefix
0:      * @param groupView - the group filter to use
0:      * @param next - the next query filter
0:      */
0:     public GroupPropertiesViewFilter(Set groupView, QueryFilter next) {
0:         super(groupView, next);
0:     }
0: 
0:     /**
0:      * Filter the properties that matches the group prefix only.
0:      * @param data - map data to filter
0:      * @return - filtered map data
0:      */
0:     protected Map filterView(Map data) {
0:         // If no view specified, display all attributes
0:         if (viewFilter == null || viewFilter.isEmpty()) {
0:             return data;
0:         }
0: 
0:         Map newData;
0:         try {
0:             // Lets try to use the same class as the original
0:             newData = (Map)data.getClass().newInstance();
0:         } catch (Exception e) {
0:             // Lets use a default HashMap
0:             newData = new HashMap();
0:         }
0: 
0:         // Filter the keys to view
0:         for (Iterator i=data.keySet().iterator(); i.hasNext();) {
0:             String key = (String)i.next();
0: 
0:             // Checks if key matches any of the group filter
0:             for (Iterator j=viewFilter.iterator(); j.hasNext();) {
0:                 String group = (String)j.next();
0:                 if (key.startsWith(group)) {
0:                     newData.put(key, data.get(key));
0:                     break;
0:                 }
0:             }
0:         }
0: 
0:         return newData;
0:     }
0: }
============================================================================