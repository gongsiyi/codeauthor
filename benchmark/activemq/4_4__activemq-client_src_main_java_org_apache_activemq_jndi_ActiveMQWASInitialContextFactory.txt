1:d29ca2a: /**
1:57b4941:  * Licensed to the Apache Software Foundation (ASF) under one or more
1:57b4941:  * contributor license agreements.  See the NOTICE file distributed with
1:57b4941:  * this work for additional information regarding copyright ownership.
1:57b4941:  * The ASF licenses this file to You under the Apache License, Version 2.0
1:57b4941:  * (the "License"); you may not use this file except in compliance with
1:57b4941:  * the License.  You may obtain a copy of the License at
4:d29ca2a:  *
1:230a86c:  *      http://www.apache.org/licenses/LICENSE-2.0
1:d29ca2a:  *
1:d29ca2a:  * Unless required by applicable law or agreed to in writing, software
1:d29ca2a:  * distributed under the License is distributed on an "AS IS" BASIS,
1:d29ca2a:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:d29ca2a:  * See the License for the specific language governing permissions and
1:d29ca2a:  * limitations under the License.
1:d29ca2a:  */
1:d29ca2a: package org.apache.activemq.jndi;
2:d29ca2a: 
1:d29ca2a: import java.util.Hashtable;
1:d29ca2a: import java.util.Iterator;
1:d29ca2a: import java.util.Map;
1:d29ca2a: 
1:74a7a8b: import javax.naming.Context;
1:74a7a8b: import javax.naming.NamingException;
1:74a7a8b: 
1:d29ca2a: /**
1:26eab53:  * A InitialContextFactory for WebSphere Generic JMS Provider.
1:26eab53:  * <p>
1:26eab53:  * Works on WebSphere 5.1. The reason for using this class is that custom
1:26eab53:  * property defined for Generic JMS Provider are passed to {@link InitialContextFactory}
1:26eab53:  * only if it begins with {@code java.naming} or {@code javax.naming} prefix.
1:26eab53:  * Additionally provider url for the JMS provider can not contain {@code ','}
1:26eab53:  * character that is necessary when the list of nodes is provided. So the role
1:26eab53:  * of this class is to transform properties before passing it to 
1:26eab53:  * {@link ActiveMQInitialContextFactory}.
1:d29ca2a:  */
1:d29ca2a: public class ActiveMQWASInitialContextFactory extends ActiveMQInitialContextFactory {
1:d29ca2a: 
1:d29ca2a:     /**
1:d29ca2a:      * @see javax.naming.spi.InitialContextFactory#getInitialContext(java.util.Hashtable)
1:d29ca2a:      */
1:d29ca2a:     public Context getInitialContext(Hashtable environment) throws NamingException {
1:d29ca2a:         return super.getInitialContext(transformEnvironment(environment));
5:d29ca2a:     }
1:d29ca2a: 
1:d29ca2a:     /**
1:d29ca2a:      * Performs following transformation of properties:
1:d29ca2a:      * <ul>
1:26eab53:      * <li>(java.naming.queue.xxx.yyy=value) ->(queue.xxx/yyy=value)
1:26eab53:      * <li>(java.naming.topic.xxx.yyy=value) -> (topic.xxx/yyy=value)
1:26eab53:      * <li>(java.naming.connectionxxx=value) -> (connectionxxx=value)
1:26eab53:      * <li>(java.naming.provider.url=url1;url2) -> (java.naming.provider.url=url1,url2)
1:d29ca2a:      * <ul>
1:d29ca2a:      *
1:74a7a8b:      * @param environment properties for transformation
1:d29ca2a:      * @return environment after transformation
1:d29ca2a:      */
1:b6347ee:     @SuppressWarnings("unchecked")
1:d29ca2a:     protected Hashtable transformEnvironment(Hashtable environment) {
1:d29ca2a: 
1:d29ca2a:         Hashtable environment1 = new Hashtable();
1:d29ca2a: 
1:d29ca2a:         Iterator it = environment.entrySet().iterator();
1:d29ca2a: 
1:d29ca2a:         while (it.hasNext()) {
1:74a7a8b:             Map.Entry entry = (Map.Entry)it.next();
1:f81a790:             if (entry.getKey() instanceof String && entry.getValue() instanceof String) {
1:74a7a8b:                 String key = (String)entry.getKey();
1:74a7a8b:                 String value = (String)entry.getValue();
1:d29ca2a: 
1:b6347ee:                 if (key.startsWith("java.naming.queue.")) {
1:d29ca2a:                     String key1 = key.substring("java.naming.queue.".length());
1:d29ca2a:                     key1 = key1.replace('.', '/');
1:d29ca2a:                     environment1.put("queue." + key1, value);
1:b6347ee:                 } else if (key.startsWith("java.naming.topic.")) {
1:d29ca2a:                     String key1 = key.substring("java.naming.topic.".length());
1:d29ca2a:                     key1 = key1.replace('.', '/');
1:d29ca2a:                     environment1.put("topic." + key1, value);
1:74a7a8b:                 } else if (key.startsWith("java.naming.connectionFactoryNames")) {
1:d29ca2a:                     String key1 = key.substring("java.naming.".length());
1:d29ca2a:                     environment1.put(key1, value);
1:74a7a8b:                 } else if (key.startsWith("java.naming.connection")) {
1:d29ca2a:                     String key1 = key.substring("java.naming.".length());
1:d29ca2a:                     environment1.put(key1, value);
1:74a7a8b:                 } else if (key.startsWith(Context.PROVIDER_URL)) {
1:b6347ee:                     // Websphere administration console does not accept the , character
1:b6347ee:                     // in provider url, so ; must be used all ; to ,
1:d29ca2a:                     value = value.replace(';', ',');
1:d29ca2a:                     environment1.put(Context.PROVIDER_URL, value);
1:74a7a8b:                 } else {
1:d29ca2a:                     environment1.put(key, value);
1:d29ca2a:                 }
1:d29ca2a:             }
1:d29ca2a:         }
1:d29ca2a: 
1:d29ca2a:         return environment1;
1:d29ca2a:     }
1:d29ca2a: }
============================================================================
author:Bernd
-------------------------------------------------------------------------------
commit:26eab53
/////////////////////////////////////////////////////////////////////////
1:  * A InitialContextFactory for WebSphere Generic JMS Provider.
1:  * <p>
1:  * Works on WebSphere 5.1. The reason for using this class is that custom
1:  * property defined for Generic JMS Provider are passed to {@link InitialContextFactory}
1:  * only if it begins with {@code java.naming} or {@code javax.naming} prefix.
1:  * Additionally provider url for the JMS provider can not contain {@code ','}
1:  * character that is necessary when the list of nodes is provided. So the role
1:  * of this class is to transform properties before passing it to 
1:  * {@link ActiveMQInitialContextFactory}.
/////////////////////////////////////////////////////////////////////////
1:      * <li>(java.naming.queue.xxx.yyy=value) ->(queue.xxx/yyy=value)
1:      * <li>(java.naming.topic.xxx.yyy=value) -> (topic.xxx/yyy=value)
1:      * <li>(java.naming.connectionxxx=value) -> (connectionxxx=value)
1:      * <li>(java.naming.provider.url=url1;url2) -> (java.naming.provider.url=url1,url2)
author:Hiram R. Chirino
-------------------------------------------------------------------------------
commit:9a8f6e4
commit:74a7a8b
/////////////////////////////////////////////////////////////////////////
1: import javax.naming.Context;
1: import javax.naming.NamingException;
1: 
/////////////////////////////////////////////////////////////////////////
0:  * transform properties before passing it to
0:  * <CODE>ActiveMQInitialContextFactory</CODE>.
/////////////////////////////////////////////////////////////////////////
1:      * @param environment properties for transformation
/////////////////////////////////////////////////////////////////////////
1:             Map.Entry entry = (Map.Entry)it.next();
1:             String key = (String)entry.getKey();
1:             String value = (String)entry.getValue();
0:             } else if (key.startsWith("java.naming.topic")) {
1:             } else if (key.startsWith("java.naming.connectionFactoryNames")) {
1:             } else if (key.startsWith("java.naming.connection")) {
1:             } else if (key.startsWith(Context.PROVIDER_URL)) {
1:             } else {
commit:230a86c
/////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////
1:  *      http://www.apache.org/licenses/LICENSE-2.0
commit:57b4941
/////////////////////////////////////////////////////////////////////////
1:  * Licensed to the Apache Software Foundation (ASF) under one or more
1:  * contributor license agreements.  See the NOTICE file distributed with
1:  * this work for additional information regarding copyright ownership.
1:  * The ASF licenses this file to You under the Apache License, Version 2.0
1:  * (the "License"); you may not use this file except in compliance with
1:  * the License.  You may obtain a copy of the License at
commit:48b4869
/////////////////////////////////////////////////////////////////////////
0:  * Copyright 2005-2006 The Apache Software Foundation
commit:d29ca2a
/////////////////////////////////////////////////////////////////////////
1: /**
1:  *
0:  * Copyright 2004 The Apache Software Foundation
1:  *
0:  * Licensed under the Apache License, Version 2.0 (the "License");
0:  * you may not use this file except in compliance with the License.
0:  * You may obtain a copy of the License at
1:  *
0:  * http://www.apache.org/licenses/LICENSE-2.0
1:  *
1:  * Unless required by applicable law or agreed to in writing, software
1:  * distributed under the License is distributed on an "AS IS" BASIS,
1:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:  * See the License for the specific language governing permissions and
1:  * limitations under the License.
1:  */
1: package org.apache.activemq.jndi;
1: 
0: import javax.naming.Context;
0: import javax.naming.NamingException;
1: import java.util.Hashtable;
1: import java.util.Iterator;
1: import java.util.Map;
1: 
1: /**
0:  * This implementation of <CODE>InitialContextFactory</CODE> should be used
0:  * when ActiveMQ is used as WebSphere Generic JMS Provider. It is proved that it
0:  * works on WebSphere 5.1. The reason for using this class is that custom
0:  * property defined for Generic JMS Provider are passed to InitialContextFactory
0:  * only if it begins with java.naming or javax.naming prefix. Additionaly
0:  * provider url for the JMS provider can not contain ',' character that is
0:  * necessary when the list of nodes is provided. So the role of this class is to
0:  * transform properties before passing it to <CODE>ActiveMQInitialContextFactory</CODE>.
1:  * 
0:  * @author Pawel Tucholski
1:  */
1: public class ActiveMQWASInitialContextFactory extends ActiveMQInitialContextFactory {
1: 
1:     /**
1:      * @see javax.naming.spi.InitialContextFactory#getInitialContext(java.util.Hashtable)
1:      */
1:     public Context getInitialContext(Hashtable environment) throws NamingException {
1: 
1:         return super.getInitialContext(transformEnvironment(environment));
1:     }
1: 
1:     /**
1:      * Performs following transformation of properties:
1:      * <ul>
0:      * <li>(java.naming.queue.xxx.yyy,value)=>(queue.xxx/yyy,value)
0:      * <li>(java.naming.topic.xxx.yyy,value)=>(topic.xxx/yyy,value)
0:      * <li>(java.naming.connectionFactoryNames,value)=>(connectionFactoryNames,value)
0:      * <li>(java.naming.provider.url,url1;url2)=>java.naming.provider.url,url1,url1)
1:      * <ul>
1:      * 
0:      * @param environment
0:      *            properties for transformation
1:      * @return environment after transformation
1:      */
1:     protected Hashtable transformEnvironment(Hashtable environment) {
1: 
1:         Hashtable environment1 = new Hashtable();
1: 
1:         Iterator it = environment.entrySet().iterator();
1: 
1:         while (it.hasNext()) {
0:             Map.Entry entry = (Map.Entry) it.next();
0:             String key = (String) entry.getKey();
0:             String value = (String) entry.getValue();
1: 
0:             if (key.startsWith("java.naming.queue")) {
1:                 String key1 = key.substring("java.naming.queue.".length());
1:                 key1 = key1.replace('.', '/');
1:                 environment1.put("queue." + key1, value);
1:             }
0:             else if (key.startsWith("java.naming.topic")) {
1:                 String key1 = key.substring("java.naming.topic.".length());
1:                 key1 = key1.replace('.', '/');
1:                 environment1.put("topic." + key1, value);
1:             }
0:             else if (key.startsWith("java.naming.connectionFactoryNames")) {
1:                 String key1 = key.substring("java.naming.".length());
1:                 environment1.put(key1, value);
1:             }
0:             else if (key.startsWith("java.naming.connection")) {
1:                 String key1 = key.substring("java.naming.".length());
1:                 environment1.put(key1, value);
1:             }
0:             else if (key.startsWith(Context.PROVIDER_URL)) {
0:                 // websphere administration console does not exept , character
0:                 // in provider url, so ; must be used
0:                 // all ; to ,
1:                 value = value.replace(';', ',');
1:                 environment1.put(Context.PROVIDER_URL, value);
1:             }
0:             else {
1:                 environment1.put(key, value);
1:             }
1:         }
1: 
1:         return environment1;
1:     }
1: }
author:Claus Ibsen
-------------------------------------------------------------------------------
commit:b6347ee
/////////////////////////////////////////////////////////////////////////
0:  * only if it begins with java.naming or javax.naming prefix. Additionally
0:  * transform properties before passing it to <tt>ActiveMQInitialContextFactory</tt>.
/////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////
1:     @SuppressWarnings("unchecked")
/////////////////////////////////////////////////////////////////////////
1:                 if (key.startsWith("java.naming.queue.")) {
1:                 } else if (key.startsWith("java.naming.topic.")) {
/////////////////////////////////////////////////////////////////////////
1:                     // Websphere administration console does not accept the , character
1:                     // in provider url, so ; must be used all ; to ,
author:Timothy A. Bish
-------------------------------------------------------------------------------
commit:f81a790
/////////////////////////////////////////////////////////////////////////
0:  *
/////////////////////////////////////////////////////////////////////////
0:      *
/////////////////////////////////////////////////////////////////////////
1:             if (entry.getKey() instanceof String && entry.getValue() instanceof String) {
0:                 String key = (String)entry.getKey();
0:                 String value = (String)entry.getValue();
0:                 if (key.startsWith("java.naming.queue")) {
0:                     String key1 = key.substring("java.naming.queue.".length());
0:                     key1 = key1.replace('.', '/');
0:                     environment1.put("queue." + key1, value);
0:                 } else if (key.startsWith("java.naming.topic")) {
0:                     String key1 = key.substring("java.naming.topic.".length());
0:                     key1 = key1.replace('.', '/');
0:                     environment1.put("topic." + key1, value);
0:                 } else if (key.startsWith("java.naming.connectionFactoryNames")) {
0:                     String key1 = key.substring("java.naming.".length());
0:                     environment1.put(key1, value);
0:                 } else if (key.startsWith("java.naming.connection")) {
0:                     String key1 = key.substring("java.naming.".length());
0:                     environment1.put(key1, value);
0:                 } else if (key.startsWith(Context.PROVIDER_URL)) {
0:                     // websphere administration console does not accept the , character
0:                     // in provider url, so ; must be used
0:                     // all ; to ,
0:                     value = value.replace(';', ',');
0:                     environment1.put(Context.PROVIDER_URL, value);
0:                 } else {
0:                     environment1.put(key, value);
0:                 }
============================================================================