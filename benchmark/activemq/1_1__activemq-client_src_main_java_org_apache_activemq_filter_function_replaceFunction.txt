1:bf07137: /**
1:bf07137:  * Licensed to the Apache Software Foundation (ASF) under one or more
1:bf07137:  * contributor license agreements.  See the NOTICE file distributed with
1:bf07137:  * this work for additional information regarding copyright ownership.
1:bf07137:  * The ASF licenses this file to You under the Apache License, Version 2.0
1:bf07137:  * (the "License"); you may not use this file except in compliance with
1:bf07137:  * the License.  You may obtain a copy of the License at
1:bf07137:  *
1:bf07137:  *      http://www.apache.org/licenses/LICENSE-2.0
1:bf07137:  *
1:bf07137:  * Unless required by applicable law or agreed to in writing, software
1:bf07137:  * distributed under the License is distributed on an "AS IS" BASIS,
1:bf07137:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:bf07137:  * See the License for the specific language governing permissions and
1:bf07137:  * limitations under the License.
1:bf07137:  */
1:bf07137: package org.apache.activemq.filter.function;
1:bf07137: 
1:bf07137: import org.apache.activemq.filter.FunctionCallExpression;
1:bf07137: import org.apache.activemq.filter.MessageEvaluationContext;
1:bf07137: 
1:bf07137: /**
1:bf07137:  * Function which replaces regular expression matches in a source string to a replacement literal.
1:bf07137:  * <p/>
1:bf07137:  * For Example:
1:bf07137:  * REPLACE('1,2/3', '[,/]', ';') returns '1;2;3'
1:bf07137:  */
1:bf07137: 
1:bf07137: public class replaceFunction implements FilterFunction {
1:bf07137:     /**
1:bf07137:      * Check whether the given expression is valid for this function.
1:bf07137:      *
1:bf07137:      * @param    expr - the expression consisting of a call to this function.
1:bf07137:      * @return true - if three arguments are passed to the function; false - otherwise.
1:bf07137:      */
1:bf07137: 
1:bf07137:     public boolean isValid(FunctionCallExpression expr) {
1:bf07137:         if (expr.getNumArguments() == 3)
1:bf07137:             return true;
1:bf07137: 
1:bf07137:         return false;
1:bf07137:     }
1:bf07137: 
1:bf07137: 
1:bf07137:     /**
1:bf07137:      * Indicate that this function does not return a boolean value.
1:bf07137:      *
1:bf07137:      * @param    expr - the expression consisting of a call to this function.
1:bf07137:      * @return false - this filter function always evaluates to a string.
1:bf07137:      */
1:bf07137: 
1:bf07137:     public boolean returnsBoolean(FunctionCallExpression expr) {
1:bf07137:         return false;
1:bf07137:     }
1:bf07137: 
1:bf07137: 
1:bf07137:     /**
1:bf07137:      * Evaluate the given expression for this function in the given context.  The result of the evaluation is a
1:bf07137:      * string with all matches of the regular expression, from the evaluation of the second argument, replaced by
1:bf07137:      * the string result from the evaluation of the third argument.  Replacement is performed by
1:bf07137:      * String#replaceAll().
1:bf07137:      * <p/>
1:bf07137:      * Note that all three arguments must be Strings.
1:bf07137:      *
1:bf07137:      * @param    expr - the expression consisting of a call to this function.
1:bf07137:      * @return String - the result of the replacement.
1:bf07137:      */
1:bf07137: 
1:bf07137:     public Object evaluate(FunctionCallExpression expr, MessageEvaluationContext message_ctx)
1:bf07137:             throws javax.jms.JMSException {
1:bf07137:         String src;
1:bf07137:         String match_regex;
1:bf07137:         String repl_lit;
1:bf07137:         String result;
1:bf07137: 
1:bf07137:         src = (String) expr.getArgument(0).evaluate(message_ctx);
1:bf07137:         match_regex = (String) expr.getArgument(1).evaluate(message_ctx);
1:bf07137:         repl_lit = (String) expr.getArgument(2).evaluate(message_ctx);
1:bf07137: 
1:bf07137:         result = src.replaceAll(match_regex, repl_lit);
1:bf07137: 
1:bf07137:         return result;
1:bf07137:     }
1:bf07137: }
============================================================================
author:Gary Tully
-------------------------------------------------------------------------------
commit:bf07137
/////////////////////////////////////////////////////////////////////////
1: /**
1:  * Licensed to the Apache Software Foundation (ASF) under one or more
1:  * contributor license agreements.  See the NOTICE file distributed with
1:  * this work for additional information regarding copyright ownership.
1:  * The ASF licenses this file to You under the Apache License, Version 2.0
1:  * (the "License"); you may not use this file except in compliance with
1:  * the License.  You may obtain a copy of the License at
1:  *
1:  *      http://www.apache.org/licenses/LICENSE-2.0
1:  *
1:  * Unless required by applicable law or agreed to in writing, software
1:  * distributed under the License is distributed on an "AS IS" BASIS,
1:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:  * See the License for the specific language governing permissions and
1:  * limitations under the License.
1:  */
1: package org.apache.activemq.filter.function;
1: 
1: import org.apache.activemq.filter.FunctionCallExpression;
1: import org.apache.activemq.filter.MessageEvaluationContext;
1: 
1: /**
1:  * Function which replaces regular expression matches in a source string to a replacement literal.
1:  * <p/>
1:  * For Example:
1:  * REPLACE('1,2/3', '[,/]', ';') returns '1;2;3'
1:  */
1: 
1: public class replaceFunction implements FilterFunction {
1:     /**
1:      * Check whether the given expression is valid for this function.
1:      *
1:      * @param    expr - the expression consisting of a call to this function.
1:      * @return true - if three arguments are passed to the function; false - otherwise.
1:      */
1: 
1:     public boolean isValid(FunctionCallExpression expr) {
1:         if (expr.getNumArguments() == 3)
1:             return true;
1: 
1:         return false;
1:     }
1: 
1: 
1:     /**
1:      * Indicate that this function does not return a boolean value.
1:      *
1:      * @param    expr - the expression consisting of a call to this function.
1:      * @return false - this filter function always evaluates to a string.
1:      */
1: 
1:     public boolean returnsBoolean(FunctionCallExpression expr) {
1:         return false;
1:     }
1: 
1: 
1:     /**
1:      * Evaluate the given expression for this function in the given context.  The result of the evaluation is a
1:      * string with all matches of the regular expression, from the evaluation of the second argument, replaced by
1:      * the string result from the evaluation of the third argument.  Replacement is performed by
1:      * String#replaceAll().
1:      * <p/>
1:      * Note that all three arguments must be Strings.
1:      *
1:      * @param    expr - the expression consisting of a call to this function.
1:      * @return String - the result of the replacement.
1:      */
1: 
1:     public Object evaluate(FunctionCallExpression expr, MessageEvaluationContext message_ctx)
1:             throws javax.jms.JMSException {
1:         String src;
1:         String match_regex;
1:         String repl_lit;
1:         String result;
1: 
1:         src = (String) expr.getArgument(0).evaluate(message_ctx);
1:         match_regex = (String) expr.getArgument(1).evaluate(message_ctx);
1:         repl_lit = (String) expr.getArgument(2).evaluate(message_ctx);
1: 
1:         result = src.replaceAll(match_regex, repl_lit);
1: 
1:         return result;
1:     }
1: }
============================================================================