1:bab4a92: /*
1:bab4a92:  * Licensed to the Apache Software Foundation (ASF) under one or more
1:bab4a92:  * contributor license agreements.  See the NOTICE file distributed with
1:bab4a92:  * this work for additional information regarding copyright ownership.
1:bab4a92:  * The ASF licenses this file to You under the Apache License, Version 2.0
1:bab4a92:  * (the "License"); you may not use this file except in compliance with
1:bab4a92:  * the License.  You may obtain a copy of the License at
1:bab4a92:  *
1:bab4a92:  *      http://www.apache.org/licenses/LICENSE-2.0
1:bab4a92:  *
1:bab4a92:  * Unless required by applicable law or agreed to in writing, software
1:bab4a92:  * distributed under the License is distributed on an "AS IS" BASIS,
1:bab4a92:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:bab4a92:  * See the License for the specific language governing permissions and
1:bab4a92:  * limitations under the License.
1:bab4a92:  */
1:bab4a92: package org.apache.activemq.junit;
1:bab4a92: 
1:bab4a92: import java.io.Serializable;
1:bab4a92: import java.net.URI;
1:bab4a92: import java.util.Map;
1:bab4a92: import javax.jms.BytesMessage;
1:bab4a92: import javax.jms.Connection;
1:bab4a92: import javax.jms.JMSException;
1:bab4a92: import javax.jms.MapMessage;
1:bab4a92: import javax.jms.Message;
1:bab4a92: import javax.jms.ObjectMessage;
1:bab4a92: import javax.jms.Session;
1:bab4a92: import javax.jms.StreamMessage;
1:bab4a92: import javax.jms.TextMessage;
1:bab4a92: 
1:bab4a92: import org.apache.activemq.ActiveMQConnectionFactory;
1:bab4a92: import org.apache.activemq.command.ActiveMQDestination;
1:bab4a92: import org.junit.rules.ExternalResource;
1:bab4a92: import org.slf4j.Logger;
1:bab4a92: import org.slf4j.LoggerFactory;
1:bab4a92: 
1:bab4a92: public abstract class AbstractActiveMQClientResource extends ExternalResource {
1:bab4a92:     Logger log = LoggerFactory.getLogger(this.getClass());
1:bab4a92: 
1:bab4a92:     ActiveMQConnectionFactory connectionFactory;
1:bab4a92:     Connection connection;
1:bab4a92:     Session session;
1:bab4a92:     ActiveMQDestination destination;
1:bab4a92: 
1:bab4a92:     public AbstractActiveMQClientResource(ActiveMQConnectionFactory connectionFactory) {
1:bab4a92:         this.connectionFactory = connectionFactory;
1:bab4a92:     }
1:bab4a92: 
1:bab4a92:     public AbstractActiveMQClientResource(URI brokerURI) {
1:bab4a92:         this(new ActiveMQConnectionFactory(brokerURI));
1:bab4a92:     }
1:bab4a92: 
1:bab4a92:     public AbstractActiveMQClientResource(EmbeddedActiveMQBroker embeddedActiveMQBroker) {
1:bab4a92:         this(embeddedActiveMQBroker.createConnectionFactory());
1:bab4a92:     }
1:bab4a92: 
1:bab4a92:     public AbstractActiveMQClientResource(URI brokerURI, String userName, String password) {
1:bab4a92:         this(new ActiveMQConnectionFactory(userName, password, brokerURI));
1:bab4a92:     }
1:bab4a92: 
1:bab4a92:     public AbstractActiveMQClientResource(String destinationName, ActiveMQConnectionFactory connectionFactory) {
1:bab4a92:         this(connectionFactory);
1:bab4a92:         destination = createDestination(destinationName);
1:bab4a92:     }
1:bab4a92: 
1:bab4a92:     public AbstractActiveMQClientResource(String destinationName, URI brokerURI) {
1:bab4a92:         this(destinationName, new ActiveMQConnectionFactory(brokerURI));
1:bab4a92:     }
1:bab4a92: 
1:bab4a92:     public AbstractActiveMQClientResource(String destinationName, EmbeddedActiveMQBroker embeddedActiveMQBroker) {
1:bab4a92:         this(destinationName, embeddedActiveMQBroker.createConnectionFactory());
1:bab4a92:     }
1:bab4a92: 
1:bab4a92:     public AbstractActiveMQClientResource(String destinationName, URI brokerURI, String userName, String password) {
1:bab4a92:         this(destinationName, new ActiveMQConnectionFactory(userName, password, brokerURI));
1:bab4a92:     }
1:bab4a92: 
1:bab4a92:     public static void setMessageProperties(Message message, Map<String, Object> properties) throws JMSException {
1:bab4a92:         if (properties != null) {
1:bab4a92:             for (Map.Entry<String, Object> property : properties.entrySet()) {
1:bab4a92:                 message.setObjectProperty(property.getKey(), property.getValue());
1:bab4a92:             }
1:bab4a92:         }
1:bab4a92:     }
1:bab4a92: 
1:bab4a92:     public String getClientId() {
1:bab4a92:         return null;
1:bab4a92:     }
1:bab4a92: 
1:bab4a92:     public String getDestinationName() {
1:bab4a92:         return (destination != null) ? destination.toString() : null;
1:bab4a92:     }
1:bab4a92: 
1:bab4a92:     public abstract byte getDestinationType();
1:bab4a92: 
1:bab4a92:     protected abstract void createClient() throws JMSException;
1:bab4a92: 
1:bab4a92:     /**
1:bab4a92:      * Start the Client
1:bab4a92:      * <p/>
1:bab4a92:      * Invoked by JUnit to setup the resource
1:bab4a92:      */
1:bab4a92:     @Override
1:bab4a92:     protected void before() throws Throwable {
1:bab4a92:         log.info("Starting {}: {}", this.getClass().getSimpleName(), connectionFactory.getBrokerURL());
1:bab4a92: 
1:bab4a92:         this.start();
1:bab4a92: 
1:bab4a92:         super.before();
1:bab4a92:     }
1:bab4a92: 
1:bab4a92:     /**
1:bab4a92:      * Stop the Client
1:bab4a92:      * <p/>
1:bab4a92:      * Invoked by JUnit to tear down the resource
1:bab4a92:      */
1:bab4a92:     @Override
1:bab4a92:     protected void after() {
1:bab4a92:         log.info("Stopping {}: {}", this.getClass().getSimpleName(), connectionFactory.getBrokerURL());
1:bab4a92: 
1:bab4a92:         super.after();
1:bab4a92: 
1:bab4a92:         this.stop();
1:bab4a92:     }
1:bab4a92: 
1:bab4a92:     public void start() {
1:bab4a92:         try {
1:bab4a92:             try {
1:bab4a92:                 connection = connectionFactory.createConnection();
1:bab4a92:                 String clientId = getClientId();
1:bab4a92:                 if (clientId != null) {
1:bab4a92:                     connection.setClientID(clientId);
1:bab4a92:                 }
1:bab4a92:                 session = connection.createSession(false, Session.AUTO_ACKNOWLEDGE);
1:bab4a92:                 createClient();
1:bab4a92:             } catch (JMSException jmsEx) {
1:bab4a92:                 throw new RuntimeException("Producer initialization failed" + this.getClass().getSimpleName(), jmsEx);
1:bab4a92:             }
1:bab4a92:             connection.start();
1:bab4a92:         } catch (JMSException jmsEx) {
1:bab4a92:             throw new IllegalStateException("Producer failed to start", jmsEx);
1:bab4a92:         }
1:bab4a92:         log.info("Ready to produce messages to {}", connectionFactory.getBrokerURL());
1:bab4a92:     }
1:bab4a92: 
1:bab4a92:     public void stop() {
1:bab4a92:         try {
1:bab4a92:             connection.close();
1:bab4a92:         } catch (JMSException jmsEx) {
1:bab4a92:             log.warn("Exception encountered closing JMS Connection", jmsEx);
1:bab4a92:         }
1:bab4a92:     }
1:bab4a92: 
1:bab4a92:     public String getBrokerURL() {
1:bab4a92:         return connectionFactory.getBrokerURL();
1:bab4a92:     }
1:bab4a92: 
1:bab4a92:     protected ActiveMQDestination createDestination(String destinationName) {
1:bab4a92:         if (destinationName != null) {
1:bab4a92:             return ActiveMQDestination.createDestination(destinationName, getDestinationType());
1:bab4a92:         }
1:bab4a92: 
1:bab4a92:         return null;
1:bab4a92:     }
1:bab4a92: 
1:bab4a92:     public BytesMessage createBytesMessage() throws JMSException {
1:bab4a92:         return session.createBytesMessage();
1:bab4a92:     }
1:bab4a92: 
1:bab4a92:     public TextMessage createTextMessage() throws JMSException {
1:bab4a92:         return session.createTextMessage();
1:bab4a92:     }
1:bab4a92: 
1:bab4a92:     public MapMessage createMapMessage() throws JMSException {
1:bab4a92:         return session.createMapMessage();
1:bab4a92:     }
1:bab4a92: 
1:bab4a92:     public ObjectMessage createObjectMessage() throws JMSException {
1:bab4a92:         return session.createObjectMessage();
1:bab4a92:     }
1:bab4a92: 
1:bab4a92:     public StreamMessage createStreamMessage() throws JMSException {
1:bab4a92:         return session.createStreamMessage();
1:bab4a92:     }
1:bab4a92: 
1:bab4a92:     public BytesMessage createMessage(byte[] body) throws JMSException {
1:bab4a92:         return this.createMessage(body, null);
1:bab4a92:     }
1:bab4a92: 
1:bab4a92:     public TextMessage createMessage(String body) throws JMSException {
1:bab4a92:         return this.createMessage(body, null);
1:bab4a92:     }
1:bab4a92: 
1:bab4a92:     public MapMessage createMessage(Map<String, Object> body) throws JMSException {
1:bab4a92:         return this.createMessage(body, null);
1:bab4a92:     }
1:bab4a92: 
1:bab4a92:     public ObjectMessage createMessage(Serializable body) throws JMSException {
1:bab4a92:         return this.createMessage(body, null);
1:bab4a92:     }
1:bab4a92: 
1:bab4a92:     public BytesMessage createMessage(byte[] body, Map<String, Object> properties) throws JMSException {
1:bab4a92:         BytesMessage message = this.createBytesMessage();
1:bab4a92:         if (body != null) {
1:bab4a92:             message.writeBytes(body);
1:bab4a92:         }
1:bab4a92: 
1:bab4a92:         setMessageProperties(message, properties);
1:bab4a92: 
1:bab4a92:         return message;
1:bab4a92:     }
1:bab4a92: 
1:bab4a92:     public TextMessage createMessage(String body, Map<String, Object> properties) throws JMSException {
1:bab4a92:         TextMessage message = this.createTextMessage();
1:bab4a92:         if (body != null) {
1:bab4a92:             message.setText(body);
1:bab4a92:         }
1:bab4a92: 
1:bab4a92:         setMessageProperties(message, properties);
1:bab4a92: 
1:bab4a92:         return message;
1:bab4a92:     }
1:bab4a92: 
1:bab4a92:     public MapMessage createMessage(Map<String, Object> body, Map<String, Object> properties) throws JMSException {
1:bab4a92:         MapMessage message = this.createMapMessage();
1:bab4a92: 
1:bab4a92:         if (body != null) {
1:bab4a92:             for (Map.Entry<String, Object> entry : body.entrySet()) {
1:bab4a92:                 message.setObject(entry.getKey(), entry.getValue());
1:bab4a92:             }
1:bab4a92:         }
1:bab4a92: 
1:bab4a92:         setMessageProperties(message, properties);
1:bab4a92: 
1:bab4a92:         return message;
1:bab4a92:     }
1:bab4a92: 
1:bab4a92:     public ObjectMessage createMessage(Serializable body, Map<String, Object> properties) throws JMSException {
1:bab4a92:         ObjectMessage message = this.createObjectMessage();
1:bab4a92: 
1:bab4a92:         if (body != null) {
1:bab4a92:             message.setObject(body);
1:bab4a92:         }
1:bab4a92: 
1:bab4a92:         setMessageProperties(message, properties);
1:bab4a92: 
1:bab4a92:         return message;
1:bab4a92:     }
1:bab4a92: }
============================================================================
author:Quinn Stevenson
-------------------------------------------------------------------------------
commit:bab4a92
/////////////////////////////////////////////////////////////////////////
1: /*
1:  * Licensed to the Apache Software Foundation (ASF) under one or more
1:  * contributor license agreements.  See the NOTICE file distributed with
1:  * this work for additional information regarding copyright ownership.
1:  * The ASF licenses this file to You under the Apache License, Version 2.0
1:  * (the "License"); you may not use this file except in compliance with
1:  * the License.  You may obtain a copy of the License at
1:  *
1:  *      http://www.apache.org/licenses/LICENSE-2.0
1:  *
1:  * Unless required by applicable law or agreed to in writing, software
1:  * distributed under the License is distributed on an "AS IS" BASIS,
1:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:  * See the License for the specific language governing permissions and
1:  * limitations under the License.
1:  */
1: package org.apache.activemq.junit;
1: 
1: import java.io.Serializable;
1: import java.net.URI;
1: import java.util.Map;
1: import javax.jms.BytesMessage;
1: import javax.jms.Connection;
1: import javax.jms.JMSException;
1: import javax.jms.MapMessage;
1: import javax.jms.Message;
1: import javax.jms.ObjectMessage;
1: import javax.jms.Session;
1: import javax.jms.StreamMessage;
1: import javax.jms.TextMessage;
1: 
1: import org.apache.activemq.ActiveMQConnectionFactory;
1: import org.apache.activemq.command.ActiveMQDestination;
1: import org.junit.rules.ExternalResource;
1: import org.slf4j.Logger;
1: import org.slf4j.LoggerFactory;
1: 
1: public abstract class AbstractActiveMQClientResource extends ExternalResource {
1:     Logger log = LoggerFactory.getLogger(this.getClass());
1: 
1:     ActiveMQConnectionFactory connectionFactory;
1:     Connection connection;
1:     Session session;
1:     ActiveMQDestination destination;
1: 
1:     public AbstractActiveMQClientResource(ActiveMQConnectionFactory connectionFactory) {
1:         this.connectionFactory = connectionFactory;
1:     }
1: 
1:     public AbstractActiveMQClientResource(URI brokerURI) {
1:         this(new ActiveMQConnectionFactory(brokerURI));
1:     }
1: 
1:     public AbstractActiveMQClientResource(EmbeddedActiveMQBroker embeddedActiveMQBroker) {
1:         this(embeddedActiveMQBroker.createConnectionFactory());
1:     }
1: 
1:     public AbstractActiveMQClientResource(URI brokerURI, String userName, String password) {
1:         this(new ActiveMQConnectionFactory(userName, password, brokerURI));
1:     }
1: 
1:     public AbstractActiveMQClientResource(String destinationName, ActiveMQConnectionFactory connectionFactory) {
1:         this(connectionFactory);
1:         destination = createDestination(destinationName);
1:     }
1: 
1:     public AbstractActiveMQClientResource(String destinationName, URI brokerURI) {
1:         this(destinationName, new ActiveMQConnectionFactory(brokerURI));
1:     }
1: 
1:     public AbstractActiveMQClientResource(String destinationName, EmbeddedActiveMQBroker embeddedActiveMQBroker) {
1:         this(destinationName, embeddedActiveMQBroker.createConnectionFactory());
1:     }
1: 
1:     public AbstractActiveMQClientResource(String destinationName, URI brokerURI, String userName, String password) {
1:         this(destinationName, new ActiveMQConnectionFactory(userName, password, brokerURI));
1:     }
1: 
1:     public static void setMessageProperties(Message message, Map<String, Object> properties) throws JMSException {
1:         if (properties != null) {
1:             for (Map.Entry<String, Object> property : properties.entrySet()) {
1:                 message.setObjectProperty(property.getKey(), property.getValue());
1:             }
1:         }
1:     }
1: 
1:     public String getClientId() {
1:         return null;
1:     }
1: 
1:     public String getDestinationName() {
1:         return (destination != null) ? destination.toString() : null;
1:     }
1: 
1:     public abstract byte getDestinationType();
1: 
1:     protected abstract void createClient() throws JMSException;
1: 
1:     /**
1:      * Start the Client
1:      * <p/>
1:      * Invoked by JUnit to setup the resource
1:      */
1:     @Override
1:     protected void before() throws Throwable {
1:         log.info("Starting {}: {}", this.getClass().getSimpleName(), connectionFactory.getBrokerURL());
1: 
1:         this.start();
1: 
1:         super.before();
1:     }
1: 
1:     /**
1:      * Stop the Client
1:      * <p/>
1:      * Invoked by JUnit to tear down the resource
1:      */
1:     @Override
1:     protected void after() {
1:         log.info("Stopping {}: {}", this.getClass().getSimpleName(), connectionFactory.getBrokerURL());
1: 
1:         super.after();
1: 
1:         this.stop();
1:     }
1: 
1:     public void start() {
1:         try {
1:             try {
1:                 connection = connectionFactory.createConnection();
1:                 String clientId = getClientId();
1:                 if (clientId != null) {
1:                     connection.setClientID(clientId);
1:                 }
1:                 session = connection.createSession(false, Session.AUTO_ACKNOWLEDGE);
1:                 createClient();
1:             } catch (JMSException jmsEx) {
1:                 throw new RuntimeException("Producer initialization failed" + this.getClass().getSimpleName(), jmsEx);
1:             }
1:             connection.start();
1:         } catch (JMSException jmsEx) {
1:             throw new IllegalStateException("Producer failed to start", jmsEx);
1:         }
1:         log.info("Ready to produce messages to {}", connectionFactory.getBrokerURL());
1:     }
1: 
1:     public void stop() {
1:         try {
1:             connection.close();
1:         } catch (JMSException jmsEx) {
1:             log.warn("Exception encountered closing JMS Connection", jmsEx);
1:         }
1:     }
1: 
1:     public String getBrokerURL() {
1:         return connectionFactory.getBrokerURL();
1:     }
1: 
1:     protected ActiveMQDestination createDestination(String destinationName) {
1:         if (destinationName != null) {
1:             return ActiveMQDestination.createDestination(destinationName, getDestinationType());
1:         }
1: 
1:         return null;
1:     }
1: 
1:     public BytesMessage createBytesMessage() throws JMSException {
1:         return session.createBytesMessage();
1:     }
1: 
1:     public TextMessage createTextMessage() throws JMSException {
1:         return session.createTextMessage();
1:     }
1: 
1:     public MapMessage createMapMessage() throws JMSException {
1:         return session.createMapMessage();
1:     }
1: 
1:     public ObjectMessage createObjectMessage() throws JMSException {
1:         return session.createObjectMessage();
1:     }
1: 
1:     public StreamMessage createStreamMessage() throws JMSException {
1:         return session.createStreamMessage();
1:     }
1: 
1:     public BytesMessage createMessage(byte[] body) throws JMSException {
1:         return this.createMessage(body, null);
1:     }
1: 
1:     public TextMessage createMessage(String body) throws JMSException {
1:         return this.createMessage(body, null);
1:     }
1: 
1:     public MapMessage createMessage(Map<String, Object> body) throws JMSException {
1:         return this.createMessage(body, null);
1:     }
1: 
1:     public ObjectMessage createMessage(Serializable body) throws JMSException {
1:         return this.createMessage(body, null);
1:     }
1: 
1:     public BytesMessage createMessage(byte[] body, Map<String, Object> properties) throws JMSException {
1:         BytesMessage message = this.createBytesMessage();
1:         if (body != null) {
1:             message.writeBytes(body);
1:         }
1: 
1:         setMessageProperties(message, properties);
1: 
1:         return message;
1:     }
1: 
1:     public TextMessage createMessage(String body, Map<String, Object> properties) throws JMSException {
1:         TextMessage message = this.createTextMessage();
1:         if (body != null) {
1:             message.setText(body);
1:         }
1: 
1:         setMessageProperties(message, properties);
1: 
1:         return message;
1:     }
1: 
1:     public MapMessage createMessage(Map<String, Object> body, Map<String, Object> properties) throws JMSException {
1:         MapMessage message = this.createMapMessage();
1: 
1:         if (body != null) {
1:             for (Map.Entry<String, Object> entry : body.entrySet()) {
1:                 message.setObject(entry.getKey(), entry.getValue());
1:             }
1:         }
1: 
1:         setMessageProperties(message, properties);
1: 
1:         return message;
1:     }
1: 
1:     public ObjectMessage createMessage(Serializable body, Map<String, Object> properties) throws JMSException {
1:         ObjectMessage message = this.createObjectMessage();
1: 
1:         if (body != null) {
1:             message.setObject(body);
1:         }
1: 
1:         setMessageProperties(message, properties);
1: 
1:         return message;
1:     }
1: }
============================================================================