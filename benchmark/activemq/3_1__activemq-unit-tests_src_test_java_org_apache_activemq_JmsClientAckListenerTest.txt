1:d29ca2a: /**
1:57b4941:  * Licensed to the Apache Software Foundation (ASF) under one or more
1:57b4941:  * contributor license agreements.  See the NOTICE file distributed with
1:57b4941:  * this work for additional information regarding copyright ownership.
1:57b4941:  * The ASF licenses this file to You under the Apache License, Version 2.0
1:57b4941:  * (the "License"); you may not use this file except in compliance with
1:57b4941:  * the License.  You may obtain a copy of the License at
3:d29ca2a:  *
1:230a86c:  *      http://www.apache.org/licenses/LICENSE-2.0
1:d29ca2a:  *
1:d29ca2a:  * Unless required by applicable law or agreed to in writing, software
1:d29ca2a:  * distributed under the License is distributed on an "AS IS" BASIS,
1:d29ca2a:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:d29ca2a:  * See the License for the specific language governing permissions and
1:d29ca2a:  * limitations under the License.
1:d29ca2a:  */
1:d29ca2a: package org.apache.activemq;
10:d29ca2a: 
1:d29ca2a: import javax.jms.Connection;
1:d29ca2a: import javax.jms.Message;
1:d29ca2a: import javax.jms.MessageConsumer;
1:d29ca2a: import javax.jms.MessageListener;
1:d29ca2a: import javax.jms.MessageProducer;
1:d29ca2a: import javax.jms.Queue;
1:d29ca2a: import javax.jms.Session;
1:d29ca2a: 
1:d29ca2a: /**
1:b0c2a40:  * 
1:d29ca2a:  */
1:d29ca2a: public class JmsClientAckListenerTest extends TestSupport implements MessageListener {
1:d29ca2a: 
1:d29ca2a:     private Connection connection;
1:230a86c:     private boolean dontAck;
1:d29ca2a: 
1:d29ca2a:     protected void setUp() throws Exception {
1:d29ca2a:         super.setUp();
1:d29ca2a:         connection = createConnection();
5:d29ca2a:     }
1:d29ca2a: 
1:d29ca2a:     /**
1:d29ca2a:      * @see junit.framework.TestCase#tearDown()
1:d29ca2a:      */
1:d29ca2a:     protected void tearDown() throws Exception {
1:d29ca2a:         if (connection != null) {
1:d29ca2a:             connection.close();
1:d29ca2a:             connection = null;
1:86cbdfd:         }
1:d29ca2a:         super.tearDown();
1:d29ca2a:     }
1:230a86c: 
1:d29ca2a:     /**
1:d29ca2a:      * Tests if acknowleged messages are being consumed.
1:d29ca2a:      * 
1:d29ca2a:      * @throws javax.jms.JMSException
1:d29ca2a:      */
1:d29ca2a:     public void testAckedMessageAreConsumed() throws Exception {
1:d29ca2a:         connection.start();
1:d29ca2a:         Session session = connection.createSession(false, Session.CLIENT_ACKNOWLEDGE);
1:d29ca2a:         Queue queue = session.createQueue("test");
1:d29ca2a:         MessageProducer producer = session.createProducer(queue);
1:d29ca2a:         producer.send(session.createTextMessage("Hello"));
1:d29ca2a: 
1:d29ca2a:         // Consume the message...
1:d29ca2a:         MessageConsumer consumer = session.createConsumer(queue);
1:d29ca2a:         consumer.setMessageListener(this);
1:d29ca2a: 
1:d29ca2a:         Thread.sleep(10000);
1:230a86c: 
1:d29ca2a:         // Reset the session.
1:d29ca2a:         session.close();
1:d29ca2a: 
1:d29ca2a:         session = connection.createSession(false, Session.CLIENT_ACKNOWLEDGE);
1:230a86c: 
1:d29ca2a:         // Attempt to Consume the message...
1:d29ca2a:         consumer = session.createConsumer(queue);
1:d29ca2a:         Message msg = consumer.receive(1000);
1:230a86c:         assertNull(msg);
1:230a86c: 
1:d29ca2a:         session.close();
1:d29ca2a:     }
1:d29ca2a: 
1:d29ca2a:     /**
1:230a86c:      * Tests if unacknowleged messages are being redelivered when the consumer
1:230a86c:      * connects again.
1:d29ca2a:      * 
1:d29ca2a:      * @throws javax.jms.JMSException
1:d29ca2a:      */
1:d29ca2a:     public void testUnAckedMessageAreNotConsumedOnSessionClose() throws Exception {
1:d29ca2a:         connection.start();
1:230a86c:         // don't aknowledge message on onMessage() call
1:230a86c:         dontAck = true;
1:d29ca2a:         Session session = connection.createSession(false, Session.CLIENT_ACKNOWLEDGE);
1:d29ca2a:         Queue queue = session.createQueue("test");
1:d29ca2a:         MessageProducer producer = session.createProducer(queue);
1:d29ca2a:         producer.send(session.createTextMessage("Hello"));
1:d29ca2a: 
1:d29ca2a:         // Consume the message...
1:d29ca2a:         MessageConsumer consumer = session.createConsumer(queue);
1:d29ca2a:         consumer.setMessageListener(this);
1:d29ca2a:         // Don't ack the message.
1:230a86c: 
1:230a86c:         // Reset the session. This should cause the Unacked message to be
1:230a86c:         // redelivered.
1:d29ca2a:         session.close();
1:d29ca2a: 
1:d29ca2a:         Thread.sleep(10000);
1:d29ca2a:         session = connection.createSession(false, Session.CLIENT_ACKNOWLEDGE);
1:d29ca2a:         // Attempt to Consume the message...
1:d29ca2a:         consumer = session.createConsumer(queue);
1:d29ca2a:         Message msg = consumer.receive(2000);
1:230a86c:         assertNotNull(msg);
1:d29ca2a:         msg.acknowledge();
1:230a86c: 
1:d29ca2a:         session.close();
1:d29ca2a:     }
1:d29ca2a: 
1:230a86c:     public void onMessage(Message message) {
1:d29ca2a: 
1:d29ca2a:         assertNotNull(message);
1:230a86c:         if (!dontAck) {
1:230a86c:             try {
1:d29ca2a:                 message.acknowledge();
1:230a86c:             } catch (Exception e) {
1:230a86c:                 e.printStackTrace();
1:230a86c:             }
1:d29ca2a: 
1:230a86c:         }
1:d29ca2a: 
1:230a86c:     }
1:d29ca2a: }
============================================================================
author:Hadrian Zbarcea
-------------------------------------------------------------------------------
commit:f9bec8f
author:Timothy A. Bish
-------------------------------------------------------------------------------
commit:ef24cc9
author:Hiram R. Chirino
-------------------------------------------------------------------------------
commit:b0c2a40
/////////////////////////////////////////////////////////////////////////
1:  * 
commit:230a86c
/////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////
1:  *      http://www.apache.org/licenses/LICENSE-2.0
/////////////////////////////////////////////////////////////////////////
1:     private boolean dontAck;
/////////////////////////////////////////////////////////////////////////
1: 
/////////////////////////////////////////////////////////////////////////
1: 
1: 
1:         assertNull(msg);
1: 
1:      * Tests if unacknowleged messages are being redelivered when the consumer
1:      * connects again.
1:         // don't aknowledge message on onMessage() call
1:         dontAck = true;
/////////////////////////////////////////////////////////////////////////
1: 
1:         // Reset the session. This should cause the Unacked message to be
1:         // redelivered.
/////////////////////////////////////////////////////////////////////////
1:         assertNotNull(msg);
1: 
1:     public void onMessage(Message message) {
1:         if (!dontAck) {
1:             try {
1:             } catch (Exception e) {
1:                 e.printStackTrace();
1:             }
1:         }
1:     }
commit:86cbdfd
/////////////////////////////////////////////////////////////////////////
1: }
commit:57b4941
/////////////////////////////////////////////////////////////////////////
1:  * Licensed to the Apache Software Foundation (ASF) under one or more
1:  * contributor license agreements.  See the NOTICE file distributed with
1:  * this work for additional information regarding copyright ownership.
1:  * The ASF licenses this file to You under the Apache License, Version 2.0
1:  * (the "License"); you may not use this file except in compliance with
1:  * the License.  You may obtain a copy of the License at
commit:48b4869
/////////////////////////////////////////////////////////////////////////
0:  * Copyright 2005-2006 The Apache Software Foundation
commit:d29ca2a
/////////////////////////////////////////////////////////////////////////
1: /**
1:  *
0:  * Copyright 2004 The Apache Software Foundation
1:  *
0:  * Licensed under the Apache License, Version 2.0 (the "License");
0:  * you may not use this file except in compliance with the License.
0:  * You may obtain a copy of the License at
1:  *
0:  * http://www.apache.org/licenses/LICENSE-2.0
1:  *
1:  * Unless required by applicable law or agreed to in writing, software
1:  * distributed under the License is distributed on an "AS IS" BASIS,
1:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:  * See the License for the specific language governing permissions and
1:  * limitations under the License.
1:  */
1: package org.apache.activemq;
1: 
1: import javax.jms.Connection;
1: import javax.jms.Message;
1: import javax.jms.MessageConsumer;
1: import javax.jms.MessageListener;
1: import javax.jms.MessageProducer;
1: import javax.jms.Queue;
1: import javax.jms.Session;
1: 
1: /**
0:  * @version $Revision: 1.3 $
1:  */
1: public class JmsClientAckListenerTest extends TestSupport implements MessageListener {
1: 
1:     private Connection connection;
0:     private  boolean dontAck=false;
1: 
1:     protected void setUp() throws Exception {
1:         super.setUp();
1:         connection = createConnection();
1:     }
1: 
1:     /**
1:      * @see junit.framework.TestCase#tearDown()
1:      */
1:     protected void tearDown() throws Exception {
1:         if (connection != null) {
1:             connection.close();
1:             connection = null;
1:         }
1:         super.tearDown();
1:     }
1:     
1:     /**
1:      * Tests if acknowleged messages are being consumed.
1:      * 
1:      * @throws javax.jms.JMSException
1:      */
1:     public void testAckedMessageAreConsumed() throws Exception {
1:         connection.start();
1:         Session session = connection.createSession(false, Session.CLIENT_ACKNOWLEDGE);
1:         Queue queue = session.createQueue("test");
1:         MessageProducer producer = session.createProducer(queue);
1:         producer.send(session.createTextMessage("Hello"));
1: 
1:         // Consume the message...
1:         MessageConsumer consumer = session.createConsumer(queue);
1:         consumer.setMessageListener(this);
1: 
1:         Thread.sleep(10000);
1:         
1:         // Reset the session.
1:         session.close();
1: 
1: 
1: 
1:         session = connection.createSession(false, Session.CLIENT_ACKNOWLEDGE);
1:         
1:         // Attempt to Consume the message...
1:         consumer = session.createConsumer(queue);
1:         Message msg = consumer.receive(1000);
0:         assertNull(msg);        
1: 
1:         session.close();
1:     }
1:     
1:     /**
0:      * Tests if unacknowleged messages are being redelivered when the consumer connects again.
1:      * 
1:      * @throws javax.jms.JMSException
1:      */
1:     public void testUnAckedMessageAreNotConsumedOnSessionClose() throws Exception {
1:         connection.start();
0:         //don't aknowledge message on onMessage() call
0:         dontAck=true;
1:         Session session = connection.createSession(false, Session.CLIENT_ACKNOWLEDGE);
1:         Queue queue = session.createQueue("test");
1:         MessageProducer producer = session.createProducer(queue);
1:         producer.send(session.createTextMessage("Hello"));
1: 
1:         // Consume the message...
1:         MessageConsumer consumer = session.createConsumer(queue);
1:         consumer.setMessageListener(this);
1:         // Don't ack the message.
1:         
0:         // Reset the session.  This should cause the Unacked message to be redelivered.
1:         session.close();
1: 
1:         Thread.sleep(10000);
1:         session = connection.createSession(false, Session.CLIENT_ACKNOWLEDGE);
1:         // Attempt to Consume the message...
1:         consumer = session.createConsumer(queue);
1:         Message msg = consumer.receive(2000);
0:         assertNotNull(msg);        
1:         msg.acknowledge();
1:         
1:         session.close();
1:     }
1: 
1: 
0:    public void onMessage(Message message){
1: 
1:         assertNotNull(message);
0:        if(!dontAck) {
0:            try {
1:                 message.acknowledge();
0:                }catch(Exception e){
0:                  e.printStackTrace();
1:               }
1: 
1:        }
1: 
1:    }
1: }
============================================================================