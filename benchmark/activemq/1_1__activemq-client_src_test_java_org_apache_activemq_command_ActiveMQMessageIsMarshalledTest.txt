1:f82993d: /**
1:f82993d:  * Licensed to the Apache Software Foundation (ASF) under one or more
1:f82993d:  * contributor license agreements.  See the NOTICE file distributed with
1:f82993d:  * this work for additional information regarding copyright ownership.
1:f82993d:  * The ASF licenses this file to You under the Apache License, Version 2.0
1:f82993d:  * (the "License"); you may not use this file except in compliance with
1:f82993d:  * the License.  You may obtain a copy of the License at
1:f82993d:  *
1:f82993d:  *      http://www.apache.org/licenses/LICENSE-2.0
1:f82993d:  *
1:f82993d:  * Unless required by applicable law or agreed to in writing, software
1:f82993d:  * distributed under the License is distributed on an "AS IS" BASIS,
1:f82993d:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:f82993d:  * See the License for the specific language governing permissions and
1:f82993d:  * limitations under the License.
1:f82993d:  */
1:f82993d: package org.apache.activemq.command;
1:f82993d: 
1:f82993d: import static org.junit.Assert.assertFalse;
1:f82993d: import static org.junit.Assert.assertTrue;
1:f82993d: 
1:f82993d: import java.util.Arrays;
1:f82993d: import java.util.Collection;
1:f82993d: 
1:f82993d: import org.apache.activemq.ActiveMQConnection;
1:f82993d: import org.apache.activemq.openwire.OpenWireFormat;
1:f82993d: import org.apache.activemq.util.ByteSequence;
1:f82993d: import org.junit.Test;
1:f82993d: import org.junit.runner.RunWith;
1:f82993d: import org.junit.runners.Parameterized;
1:f82993d: import org.junit.runners.Parameterized.Parameters;
1:f82993d: 
1:f82993d: /**
1:f82993d:  * Test to make sure message.isMarshalled() returns the correct value
1:f82993d:  */
1:f82993d: @RunWith(Parameterized.class)
1:f82993d: public class ActiveMQMessageIsMarshalledTest {
1:f82993d: 
1:f82993d:     protected enum MessageType {BYTES, MAP, TEXT, OBJECT, STREAM, MESSAGE}
1:f82993d: 
1:f82993d:     private final MessageType messageType;
1:f82993d: 
1:f82993d:     @Parameters(name="messageType={0}")
1:f82993d:     public static Collection<Object[]> data() {
1:f82993d:         return Arrays.asList(new Object[][] {
1:f82993d:                 {MessageType.BYTES},
1:f82993d:                 {MessageType.MAP},
1:f82993d:                 {MessageType.TEXT},
1:f82993d:                 {MessageType.OBJECT},
1:f82993d:                 {MessageType.STREAM},
1:f82993d:                 {MessageType.MESSAGE}
1:f82993d:             });
1:f82993d:     }
1:f82993d: 
1:f82993d:     public ActiveMQMessageIsMarshalledTest(final MessageType messageType) {
1:f82993d:         super();
1:f82993d:         this.messageType = messageType;
1:f82993d:     }
1:f82993d: 
1:f82993d:     @Test
1:f82993d:     public void testIsMarshalledWithBodyAndProperties() throws Exception {
1:f82993d:         ActiveMQMessage message = getMessage(true, true);
1:f82993d:         assertIsMarshalled(message, true, true);
1:f82993d:     }
1:f82993d: 
1:f82993d:     @Test
1:f82993d:     public void testIsMarshalledWithPropertyEmptyBody() throws Exception {
1:f82993d:         ActiveMQMessage message = getMessage(false, true);
1:f82993d:         assertIsMarshalled(message, false, true);
1:f82993d:     }
1:f82993d: 
1:f82993d:     @Test
1:f82993d:     public void testIsMarshalledWithBodyEmptyProperties() throws Exception {
1:f82993d:         ActiveMQMessage message = getMessage(true, false);
1:f82993d:         assertIsMarshalled(message, true, false);
1:f82993d:     }
1:f82993d: 
1:f82993d:     @Test
1:f82993d:     public void testIsMarshalledWithEmptyBodyEmptyProperties() throws Exception {
1:f82993d:         ActiveMQMessage message = getMessage(false, false);
1:f82993d: 
1:f82993d:         //No body or properties so the message should be considered marshalled already
1:f82993d:         assertTrue(message.isMarshalled());
1:f82993d:     }
1:f82993d: 
1:f82993d:     private ActiveMQMessage getMessage(boolean includeBody, boolean includeProperties) throws Exception {
1:f82993d:         if (MessageType.BYTES == messageType) {
1:f82993d:             return getBytesMessage(includeBody, includeProperties);
1:f82993d:         } else if (MessageType.TEXT == messageType) {
1:f82993d:             return getTextMessage(includeBody, includeProperties);
1:f82993d:         } else if (MessageType.MAP == messageType) {
1:f82993d:             return getMapMessage(includeBody, includeProperties);
1:f82993d:         } else if (MessageType.OBJECT == messageType) {
1:f82993d:             return getObjectMessage(includeBody, includeProperties);
1:f82993d:         } else if (MessageType.STREAM == messageType) {
1:f82993d:             return getStreamMessage(includeBody, includeProperties);
1:f82993d:         } else if (MessageType.MESSAGE == messageType) {
1:f82993d:             return getActiveMQMessage(includeBody, includeProperties);
1:f82993d:         }
1:f82993d: 
1:f82993d:         return null;
1:f82993d:     }
1:f82993d: 
1:f82993d:     private ActiveMQBytesMessage getBytesMessage(boolean includeBody, boolean includeProperties) throws Exception {
1:f82993d:         ActiveMQBytesMessage message = new ActiveMQBytesMessage();
1:f82993d:         if (includeBody) {
1:f82993d:             message.writeBytes(new byte[10]);
1:f82993d:         }
1:f82993d:         if (includeProperties) {
1:f82993d:             message.setProperty("test", "test");
1:f82993d:         }
1:f82993d:         return message;
1:f82993d:     }
1:f82993d: 
1:f82993d:     private ActiveMQMapMessage getMapMessage(boolean includeBody, boolean includeProperties) throws Exception {
1:f82993d:         ActiveMQMapMessage message = new ActiveMQMapMessage();
1:f82993d:         if (includeBody) {
1:f82993d:             message.setString("stringbody", "stringbody");
1:f82993d:         }
1:f82993d:         if (includeProperties) {
1:f82993d:             message.setProperty("test", "test");
1:f82993d:         }
1:f82993d:         return message;
1:f82993d:     }
1:f82993d: 
1:f82993d:     private ActiveMQTextMessage getTextMessage(boolean includeBody, boolean includeProperties) throws Exception {
1:f82993d:         ActiveMQTextMessage message = new ActiveMQTextMessage();
1:f82993d:         if (includeBody) {
1:f82993d:             message.setText("test");
1:f82993d:         }
1:f82993d:         if (includeProperties) {
1:f82993d:             message.setProperty("test", "test");
1:f82993d:         }
1:f82993d:         return message;
1:f82993d:     }
1:f82993d: 
1:f82993d:     private ActiveMQObjectMessage getObjectMessage(boolean includeBody, boolean includeProperties) throws Exception {
1:f82993d:         ActiveMQObjectMessage message = new ActiveMQObjectMessage();
1:f82993d:         ActiveMQConnection con = ActiveMQConnection.makeConnection();
1:f82993d:         con.setObjectMessageSerializationDefered(true);
1:f82993d:         message.setConnection(con);
1:f82993d:         if (includeBody) {
1:f82993d:             message.setObject("test");
1:f82993d:         }
1:f82993d:         if (includeProperties) {
1:f82993d:             message.setProperty("test", "test");
1:f82993d:         }
1:f82993d:         return message;
1:f82993d:     }
1:f82993d: 
1:f82993d:     private ActiveMQStreamMessage getStreamMessage(boolean includeBody, boolean includeProperties) throws Exception {
1:f82993d:         ActiveMQStreamMessage message = new ActiveMQStreamMessage();
1:f82993d:         if (includeBody) {
1:f82993d:             message.writeBytes(new byte[10]);
1:f82993d:         }
1:f82993d:         if (includeProperties) {
1:f82993d:             message.setProperty("test", "test");
1:f82993d:         }
1:f82993d:         return message;
1:f82993d:     }
1:f82993d: 
1:f82993d:     private ActiveMQMessage getActiveMQMessage(boolean includeBody, boolean includeProperties) throws Exception {
1:f82993d:         ActiveMQMessage message = new ActiveMQMessage();
1:f82993d:         if (includeBody) {
1:f82993d:             message.setContent(new ByteSequence(new byte[10]));
1:f82993d:         }
1:f82993d:         if (includeProperties) {
1:f82993d:             message.setProperty("test", "test");
1:f82993d:         }
1:f82993d:         return message;
1:f82993d:     }
1:f82993d: 
1:f82993d:     private void assertIsMarshalled(final ActiveMQMessage message, boolean includeBody, boolean includeProperties) throws Exception {
1:f82993d:         if (ActiveMQMessage.class.equals(message.getClass())) {
1:f82993d:             //content is either not set or already marshalled for ActiveMQMessage so this only
1:f82993d:             //relies on
1:f82993d:             assertFalse(message.isMarshalled() == includeProperties);
1:f82993d:         } else {
1:f82993d:             assertFalse(message.isMarshalled());
1:f82993d:             message.onSend();
1:f82993d:             message.beforeMarshall(new OpenWireFormat());
1:f82993d:             assertTrue(message.isMarshalled());
1:f82993d:             assertTrue(message.getMarshalledProperties() != null == includeProperties);
1:f82993d:             assertTrue(message.getContent() != null == includeBody);
1:f82993d:         }
1:f82993d:     }
1:f82993d: 
1:f82993d: }
============================================================================
author:Christopher L. Shannon (cshannon)
-------------------------------------------------------------------------------
commit:6b27708
commit:f82993d
/////////////////////////////////////////////////////////////////////////
1: /**
1:  * Licensed to the Apache Software Foundation (ASF) under one or more
1:  * contributor license agreements.  See the NOTICE file distributed with
1:  * this work for additional information regarding copyright ownership.
1:  * The ASF licenses this file to You under the Apache License, Version 2.0
1:  * (the "License"); you may not use this file except in compliance with
1:  * the License.  You may obtain a copy of the License at
1:  *
1:  *      http://www.apache.org/licenses/LICENSE-2.0
1:  *
1:  * Unless required by applicable law or agreed to in writing, software
1:  * distributed under the License is distributed on an "AS IS" BASIS,
1:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:  * See the License for the specific language governing permissions and
1:  * limitations under the License.
1:  */
1: package org.apache.activemq.command;
1: 
1: import static org.junit.Assert.assertFalse;
1: import static org.junit.Assert.assertTrue;
1: 
1: import java.util.Arrays;
1: import java.util.Collection;
1: 
1: import org.apache.activemq.ActiveMQConnection;
1: import org.apache.activemq.openwire.OpenWireFormat;
1: import org.apache.activemq.util.ByteSequence;
1: import org.junit.Test;
1: import org.junit.runner.RunWith;
1: import org.junit.runners.Parameterized;
1: import org.junit.runners.Parameterized.Parameters;
1: 
1: /**
1:  * Test to make sure message.isMarshalled() returns the correct value
1:  */
1: @RunWith(Parameterized.class)
1: public class ActiveMQMessageIsMarshalledTest {
1: 
1:     protected enum MessageType {BYTES, MAP, TEXT, OBJECT, STREAM, MESSAGE}
1: 
1:     private final MessageType messageType;
1: 
1:     @Parameters(name="messageType={0}")
1:     public static Collection<Object[]> data() {
1:         return Arrays.asList(new Object[][] {
1:                 {MessageType.BYTES},
1:                 {MessageType.MAP},
1:                 {MessageType.TEXT},
1:                 {MessageType.OBJECT},
1:                 {MessageType.STREAM},
1:                 {MessageType.MESSAGE}
1:             });
1:     }
1: 
1:     public ActiveMQMessageIsMarshalledTest(final MessageType messageType) {
1:         super();
1:         this.messageType = messageType;
1:     }
1: 
1:     @Test
1:     public void testIsMarshalledWithBodyAndProperties() throws Exception {
1:         ActiveMQMessage message = getMessage(true, true);
1:         assertIsMarshalled(message, true, true);
1:     }
1: 
1:     @Test
1:     public void testIsMarshalledWithPropertyEmptyBody() throws Exception {
1:         ActiveMQMessage message = getMessage(false, true);
1:         assertIsMarshalled(message, false, true);
1:     }
1: 
1:     @Test
1:     public void testIsMarshalledWithBodyEmptyProperties() throws Exception {
1:         ActiveMQMessage message = getMessage(true, false);
1:         assertIsMarshalled(message, true, false);
1:     }
1: 
1:     @Test
1:     public void testIsMarshalledWithEmptyBodyEmptyProperties() throws Exception {
1:         ActiveMQMessage message = getMessage(false, false);
1: 
1:         //No body or properties so the message should be considered marshalled already
1:         assertTrue(message.isMarshalled());
1:     }
1: 
1:     private ActiveMQMessage getMessage(boolean includeBody, boolean includeProperties) throws Exception {
1:         if (MessageType.BYTES == messageType) {
1:             return getBytesMessage(includeBody, includeProperties);
1:         } else if (MessageType.TEXT == messageType) {
1:             return getTextMessage(includeBody, includeProperties);
1:         } else if (MessageType.MAP == messageType) {
1:             return getMapMessage(includeBody, includeProperties);
1:         } else if (MessageType.OBJECT == messageType) {
1:             return getObjectMessage(includeBody, includeProperties);
1:         } else if (MessageType.STREAM == messageType) {
1:             return getStreamMessage(includeBody, includeProperties);
1:         } else if (MessageType.MESSAGE == messageType) {
1:             return getActiveMQMessage(includeBody, includeProperties);
1:         }
1: 
1:         return null;
1:     }
1: 
1:     private ActiveMQBytesMessage getBytesMessage(boolean includeBody, boolean includeProperties) throws Exception {
1:         ActiveMQBytesMessage message = new ActiveMQBytesMessage();
1:         if (includeBody) {
1:             message.writeBytes(new byte[10]);
1:         }
1:         if (includeProperties) {
1:             message.setProperty("test", "test");
1:         }
1:         return message;
1:     }
1: 
1:     private ActiveMQMapMessage getMapMessage(boolean includeBody, boolean includeProperties) throws Exception {
1:         ActiveMQMapMessage message = new ActiveMQMapMessage();
1:         if (includeBody) {
1:             message.setString("stringbody", "stringbody");
1:         }
1:         if (includeProperties) {
1:             message.setProperty("test", "test");
1:         }
1:         return message;
1:     }
1: 
1:     private ActiveMQTextMessage getTextMessage(boolean includeBody, boolean includeProperties) throws Exception {
1:         ActiveMQTextMessage message = new ActiveMQTextMessage();
1:         if (includeBody) {
1:             message.setText("test");
1:         }
1:         if (includeProperties) {
1:             message.setProperty("test", "test");
1:         }
1:         return message;
1:     }
1: 
1:     private ActiveMQObjectMessage getObjectMessage(boolean includeBody, boolean includeProperties) throws Exception {
1:         ActiveMQObjectMessage message = new ActiveMQObjectMessage();
1:         ActiveMQConnection con = ActiveMQConnection.makeConnection();
1:         con.setObjectMessageSerializationDefered(true);
1:         message.setConnection(con);
1:         if (includeBody) {
1:             message.setObject("test");
1:         }
1:         if (includeProperties) {
1:             message.setProperty("test", "test");
1:         }
1:         return message;
1:     }
1: 
1:     private ActiveMQStreamMessage getStreamMessage(boolean includeBody, boolean includeProperties) throws Exception {
1:         ActiveMQStreamMessage message = new ActiveMQStreamMessage();
1:         if (includeBody) {
1:             message.writeBytes(new byte[10]);
1:         }
1:         if (includeProperties) {
1:             message.setProperty("test", "test");
1:         }
1:         return message;
1:     }
1: 
1:     private ActiveMQMessage getActiveMQMessage(boolean includeBody, boolean includeProperties) throws Exception {
1:         ActiveMQMessage message = new ActiveMQMessage();
1:         if (includeBody) {
1:             message.setContent(new ByteSequence(new byte[10]));
1:         }
1:         if (includeProperties) {
1:             message.setProperty("test", "test");
1:         }
1:         return message;
1:     }
1: 
1:     private void assertIsMarshalled(final ActiveMQMessage message, boolean includeBody, boolean includeProperties) throws Exception {
1:         if (ActiveMQMessage.class.equals(message.getClass())) {
1:             //content is either not set or already marshalled for ActiveMQMessage so this only
1:             //relies on
1:             assertFalse(message.isMarshalled() == includeProperties);
1:         } else {
1:             assertFalse(message.isMarshalled());
1:             message.onSend();
1:             message.beforeMarshall(new OpenWireFormat());
1:             assertTrue(message.isMarshalled());
1:             assertTrue(message.getMarshalledProperties() != null == includeProperties);
1:             assertTrue(message.getContent() != null == includeBody);
1:         }
1:     }
1: 
1: }
============================================================================