1:6630e81: /**
1:6630e81:  * Licensed to the Apache Software Foundation (ASF) under one or more
1:6630e81:  * contributor license agreements.  See the NOTICE file distributed with
1:6630e81:  * this work for additional information regarding copyright ownership.
1:6630e81:  * The ASF licenses this file to You under the Apache License, Version 2.0
1:6630e81:  * (the "License"); you may not use this file except in compliance with
1:6630e81:  * the License.  You may obtain a copy of the License at
1:6630e81:  * <p>
1:6630e81:  * http://www.apache.org/licenses/LICENSE-2.0
1:6630e81:  * <p>
1:6630e81:  * Unless required by applicable law or agreed to in writing, software
1:6630e81:  * distributed under the License is distributed on an "AS IS" BASIS,
1:6630e81:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:6630e81:  * See the License for the specific language governing permissions and
1:6630e81:  * limitations under the License.
1:6630e81:  */
1:6630e81: package org.apache.activemq.broker.jmx;
2:6630e81: 
1:6630e81: import com.fasterxml.jackson.databind.ObjectMapper;
1:6630e81: import com.google.common.base.Predicate;
1:6630e81: import com.google.common.collect.ImmutableMap;
1:6630e81: import com.google.common.collect.Maps;
1:6630e81: import com.google.common.collect.Ordering;
1:6630e81: import org.apache.activemq.advisory.AdvisorySupport;
1:6630e81: import org.apache.activemq.command.ActiveMQTopic;
1:6630e81: import org.slf4j.Logger;
1:6630e81: import org.slf4j.LoggerFactory;
1:6630e81: 
1:6630e81: import javax.management.ObjectName;
1:6630e81: import java.io.IOException;
1:6630e81: import java.io.Serializable;
1:6630e81: import java.io.StringWriter;
1:6630e81: import java.lang.reflect.Method;
1:6630e81: import java.util.HashMap;
1:6630e81: import java.util.Map;
1:6630e81: 
1:6630e81: import static org.apache.activemq.util.IntrospectionSupport.*;
1:6630e81: 
1:6630e81: /**
1:6630e81:  * Defines a query API for destinations MBeans
1:6630e81:  *
1:6630e81:  * Typical usage
1:6630e81:  *
1:6630e81:  *         return DestinationsViewFilter.create(filter)
1:6630e81:  *                .setDestinations(broker.getQueueViews())
1:6630e81:  *                .filter(page, pageSize);
1:6630e81:  *
1:6630e81:  * where 'filter' is JSON representation of the query, like
1:6630e81:  *
1:6630e81:  * {name: '77', filter:'nonEmpty', sortColumn:'queueSize', sortOrder:'desc'}
1:6630e81:  *
1:6630e81:  * This returns a JSON map, containing filtered map of MBeans in the "data" field and total number of destinations that match criteria in the "count" field.
1:6630e81:  * The result will be properly paged, according to 'page' and 'pageSize' parameters.
1:6630e81:  *
1:6630e81:  */
1:6630e81: public class DestinationsViewFilter implements Serializable {
1:6630e81:     private static final Logger LOG = LoggerFactory.getLogger(DestinationsViewFilter.class);
1:6630e81: 
1:6630e81:     private static final long serialVersionUID = 1L;
1:6630e81: 
1:6630e81:     /**
1:6630e81:      * Name pattern used to filter destinations
1:6630e81:      */
1:6630e81:     String name;
1:6630e81: 
1:6630e81:     /**
1:6630e81:      * Arbitrary filter key to be applied to the destinations. Currently only simple predefined filters has been implemented:
1:6630e81:      *
1:6630e81:      * empty - return only empty queues (queueSize = 0)
1:6630e81:      * nonEmpty - return only non-empty queues queueSize != 0)
1:6630e81:      * noConsumer - return only destinations that doesn't have consumers
1:6630e81:      * nonAdvisory - return only non-Advisory topics
1:6630e81:      *
1:6630e81:      * For more implementation details see {@link DestinationsViewFilter.getPredicate}
1:6630e81:      *
1:6630e81:      */
1:6630e81:     String filter;
1:6630e81: 
1:6630e81:     /**
1:6630e81:      * Sort destinations by this {@link DestinationView} property
1:6630e81:      */
1:6630e81:     String sortColumn = "name";
1:6630e81: 
1:6630e81:     /**
1:6630e81:      * Order of sorting - 'asc' or 'desc'
1:6630e81:      */
1:6630e81:     String sortOrder = "asc";
1:6630e81: 
1:6630e81:     Map<ObjectName, DestinationView> destinations;
1:6630e81: 
1:6630e81: 
1:6630e81:     public DestinationsViewFilter() {
1:6630e81:     }
1:6630e81: 
1:6630e81:     /**
1:6630e81:      * Creates an object from the JSON string
1:6630e81:      *
1:6630e81:      */
1:6630e81:     public static DestinationsViewFilter create(String json) throws IOException {
1:6630e81:         ObjectMapper mapper = new ObjectMapper();
1:6630e81:         if (json == null) {
1:6630e81:             return new DestinationsViewFilter();
1:6630e81:         }
1:6630e81:         json = json.trim();
1:6630e81:         if (json.length() == 0 || json.equals("{}")) {
1:6630e81:             return new DestinationsViewFilter();
1:6630e81:         }
1:6630e81:         return mapper.readerFor(DestinationsViewFilter.class).readValue(json);
1:6630e81:     }
1:6630e81: 
1:6630e81:     /**
1:6630e81:      * Destination MBeans to be queried
1:6630e81:      */
1:6630e81:     public DestinationsViewFilter setDestinations(Map<ObjectName, DestinationView> destinations) {
1:6630e81:         this.destinations = destinations;
1:6630e81:         return this;
1:6630e81:     }
1:6630e81: 
1:6630e81:     /**
1:6630e81:      * Filter, sort and page results.
1:6630e81:      *
1:6630e81:      * Returns JSON map with resulting destination views and total number of matched destinations
1:6630e81:      *
1:6630e81:      * @param page - defines result page to be returned
1:6630e81:      * @param pageSize - defines page size to be used
1:6630e81:      * @throws IOException
1:6630e81:      */
1:6630e81:     String filter(int page, int pageSize) throws IOException {
1:6630e81:         ObjectMapper mapper = new ObjectMapper();
1:e8ba0b0:         destinations = Maps.filterValues(destinations, getPredicate());
1:e8ba0b0:         Map<ObjectName, DestinationView> pagedDestinations = getPagedDestinations(page, pageSize);
1:6630e81:         Map<String, Object> result = new HashMap<String, Object>();
1:e8ba0b0:         result.put("data", pagedDestinations);
1:6630e81:         result.put("count", destinations.size());
1:6630e81:         StringWriter writer = new StringWriter();
1:6630e81:         mapper.writeValue(writer, result);
1:6630e81:         return writer.toString();
1:6630e81:     }
1:6630e81: 
1:e8ba0b0:     Map<ObjectName, DestinationView> getPagedDestinations(int page, int pageSize) {
1:6630e81:         ImmutableMap.Builder<ObjectName, DestinationView> builder = ImmutableMap.builder();
1:6630e81:         int start = (page - 1) * pageSize;
1:e8ba0b0:         int end = Math.min(page * pageSize, destinations.size());
1:6630e81:         int i = 0;
1:6630e81:         for (Map.Entry<ObjectName, DestinationView> entry :
1:e8ba0b0:                 getOrdering().sortedCopy(destinations.entrySet())) {
1:6630e81:             if (i >= start && i < end) {
1:6630e81:                 builder.put(entry.getKey(), entry.getValue());
1:6630e81:             }
1:6630e81:             i++;
1:6630e81:         }
1:6630e81:         return builder.build();
1:6630e81:     }
1:6630e81: 
1:6630e81:     Predicate<DestinationView> getPredicate() {
1:6630e81:         return new Predicate<DestinationView>() {
1:6630e81:             @Override
1:6630e81:             public boolean apply(DestinationView input) {
1:6630e81:                 boolean match = true;
1:6630e81:                 if (getName() != null && !getName().isEmpty()) {
1:6630e81:                     match = input.getName().contains(getName());
1:6630e81:                 }
1:6630e81: 
1:6630e81:                 if (match) {
1:6630e81:                     if (getFilter().equals("empty")) {
1:6630e81:                         match = input.getQueueSize() == 0;
1:6630e81:                     }
1:6630e81:                     if (getFilter().equals("nonEmpty")) {
1:6630e81:                         match = input.getQueueSize() != 0;
1:6630e81:                     }
1:6630e81:                     if (getFilter().equals("noConsumer")) {
1:6630e81:                         match = input.getConsumerCount() == 0;
1:6630e81:                     }
1:6630e81:                     if (getFilter().equals("nonAdvisory")) {
1:6630e81:                         return !(input instanceof TopicView && AdvisorySupport.isAdvisoryTopic(new ActiveMQTopic(input.getName())));
1:6630e81:                     }
1:6630e81:                 }
1:6630e81: 
1:6630e81:                 return match;
1:6630e81:             }
1:6630e81:         };
1:6630e81:     }
1:6630e81: 
1:6630e81:     Ordering<Map.Entry<ObjectName, DestinationView>> getOrdering() {
1:6630e81:         return new Ordering<Map.Entry<ObjectName, DestinationView>>() {
1:6630e81: 
1:6630e81:             Method getter = findGetterMethod(DestinationView.class, getSortColumn());
1:6630e81: 
1:6630e81:             @Override
1:6630e81:             public int compare(Map.Entry<ObjectName, DestinationView> left, Map.Entry<ObjectName, DestinationView> right) {
1:6630e81:                 try {
1:6630e81:                     if (getter != null) {
1:6630e81:                         Object leftValue = getter.invoke(left.getValue());
1:6630e81:                         Object rightValue = getter.invoke(right.getValue());
1:6630e81:                         if (leftValue instanceof Comparable && rightValue instanceof Comparable) {
1:6630e81:                             if (getSortOrder().toLowerCase().equals("desc")) {
1:6630e81:                                 return ((Comparable) rightValue).compareTo(leftValue);
1:6630e81:                             } else {
1:6630e81:                                 return ((Comparable) leftValue).compareTo(rightValue);
1:6630e81:                             }
1:6630e81:                         }
1:6630e81:                     }
1:6630e81:                     return 0;
1:6630e81:                 } catch (Exception e) {
1:6630e81:                     LOG.info("Exception sorting destinations", e);
1:6630e81:                     return 0;
1:6630e81:                 }
1:6630e81:             }
1:6630e81:         };
1:6630e81:     }
1:6630e81: 
1:6630e81:     public Map<ObjectName, DestinationView> getDestinations() {
1:6630e81:         return destinations;
1:6630e81:     }
1:6630e81: 
1:6630e81:     public String getName() {
1:6630e81:         return name;
1:6630e81:     }
1:6630e81: 
1:6630e81:     public void setName(String name) {
1:6630e81:         this.name = name;
1:6630e81:     }
1:6630e81: 
1:6630e81:     public String getFilter() {
1:6630e81:         return filter;
1:6630e81:     }
1:6630e81: 
1:6630e81:     public void setFilter(String filter) {
1:6630e81:         this.filter = filter;
1:6630e81:     }
1:6630e81: 
1:6630e81:     public String getSortOrder() {
1:6630e81:         return sortOrder;
1:6630e81:     }
1:6630e81: 
1:6630e81:     public void setSortOrder(String sortOrder) {
1:6630e81:         this.sortOrder = sortOrder;
1:6630e81:     }
1:6630e81: 
1:6630e81:     public String getSortColumn() {
1:6630e81:         return sortColumn;
1:6630e81:     }
1:6630e81: 
1:6630e81:     public void setSortColumn(String sortColumn) {
1:6630e81:         this.sortColumn = sortColumn;
1:6630e81:     }
1:6630e81: }
============================================================================
author:Dejan Bosanac
-------------------------------------------------------------------------------
commit:e8ba0b0
/////////////////////////////////////////////////////////////////////////
1:         destinations = Maps.filterValues(destinations, getPredicate());
1:         Map<ObjectName, DestinationView> pagedDestinations = getPagedDestinations(page, pageSize);
1:         result.put("data", pagedDestinations);
1:     Map<ObjectName, DestinationView> getPagedDestinations(int page, int pageSize) {
1:         int end = Math.min(page * pageSize, destinations.size());
1:                 getOrdering().sortedCopy(destinations.entrySet())) {
commit:6630e81
/////////////////////////////////////////////////////////////////////////
1: /**
1:  * Licensed to the Apache Software Foundation (ASF) under one or more
1:  * contributor license agreements.  See the NOTICE file distributed with
1:  * this work for additional information regarding copyright ownership.
1:  * The ASF licenses this file to You under the Apache License, Version 2.0
1:  * (the "License"); you may not use this file except in compliance with
1:  * the License.  You may obtain a copy of the License at
1:  * <p>
1:  * http://www.apache.org/licenses/LICENSE-2.0
1:  * <p>
1:  * Unless required by applicable law or agreed to in writing, software
1:  * distributed under the License is distributed on an "AS IS" BASIS,
1:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:  * See the License for the specific language governing permissions and
1:  * limitations under the License.
1:  */
1: package org.apache.activemq.broker.jmx;
1: 
1: import com.fasterxml.jackson.databind.ObjectMapper;
1: import com.google.common.base.Predicate;
1: import com.google.common.collect.ImmutableMap;
1: import com.google.common.collect.Maps;
1: import com.google.common.collect.Ordering;
1: import org.apache.activemq.advisory.AdvisorySupport;
1: import org.apache.activemq.command.ActiveMQTopic;
1: import org.slf4j.Logger;
1: import org.slf4j.LoggerFactory;
1: 
1: import javax.management.ObjectName;
1: import java.io.IOException;
1: import java.io.Serializable;
1: import java.io.StringWriter;
1: import java.lang.reflect.Method;
1: import java.util.HashMap;
1: import java.util.Map;
1: 
1: import static org.apache.activemq.util.IntrospectionSupport.*;
1: 
1: /**
1:  * Defines a query API for destinations MBeans
1:  *
1:  * Typical usage
1:  *
1:  *         return DestinationsViewFilter.create(filter)
1:  *                .setDestinations(broker.getQueueViews())
1:  *                .filter(page, pageSize);
1:  *
1:  * where 'filter' is JSON representation of the query, like
1:  *
1:  * {name: '77', filter:'nonEmpty', sortColumn:'queueSize', sortOrder:'desc'}
1:  *
1:  * This returns a JSON map, containing filtered map of MBeans in the "data" field and total number of destinations that match criteria in the "count" field.
1:  * The result will be properly paged, according to 'page' and 'pageSize' parameters.
1:  *
1:  */
1: public class DestinationsViewFilter implements Serializable {
1:     private static final Logger LOG = LoggerFactory.getLogger(DestinationsViewFilter.class);
1: 
1:     private static final long serialVersionUID = 1L;
1: 
1:     /**
1:      * Name pattern used to filter destinations
1:      */
1:     String name;
1: 
1:     /**
1:      * Arbitrary filter key to be applied to the destinations. Currently only simple predefined filters has been implemented:
1:      *
1:      * empty - return only empty queues (queueSize = 0)
1:      * nonEmpty - return only non-empty queues queueSize != 0)
1:      * noConsumer - return only destinations that doesn't have consumers
1:      * nonAdvisory - return only non-Advisory topics
1:      *
1:      * For more implementation details see {@link DestinationsViewFilter.getPredicate}
1:      *
1:      */
1:     String filter;
1: 
1:     /**
1:      * Sort destinations by this {@link DestinationView} property
1:      */
1:     String sortColumn = "name";
1: 
1:     /**
1:      * Order of sorting - 'asc' or 'desc'
1:      */
1:     String sortOrder = "asc";
1: 
1:     Map<ObjectName, DestinationView> destinations;
1: 
1: 
1:     public DestinationsViewFilter() {
1:     }
1: 
1:     /**
1:      * Creates an object from the JSON string
1:      *
1:      */
1:     public static DestinationsViewFilter create(String json) throws IOException {
1:         ObjectMapper mapper = new ObjectMapper();
1:         if (json == null) {
1:             return new DestinationsViewFilter();
1:         }
1:         json = json.trim();
1:         if (json.length() == 0 || json.equals("{}")) {
1:             return new DestinationsViewFilter();
1:         }
1:         return mapper.readerFor(DestinationsViewFilter.class).readValue(json);
1:     }
1: 
1:     /**
1:      * Destination MBeans to be queried
1:      */
1:     public DestinationsViewFilter setDestinations(Map<ObjectName, DestinationView> destinations) {
1:         this.destinations = destinations;
1:         return this;
1:     }
1: 
1:     /**
1:      * Filter, sort and page results.
1:      *
1:      * Returns JSON map with resulting destination views and total number of matched destinations
1:      *
1:      * @param page - defines result page to be returned
1:      * @param pageSize - defines page size to be used
1:      * @throws IOException
1:      */
1:     String filter(int page, int pageSize) throws IOException {
1:         ObjectMapper mapper = new ObjectMapper();
0:         Map<ObjectName, DestinationView> filtered = getFilteredDestinations(page, pageSize);
1:         Map<String, Object> result = new HashMap<String, Object>();
0:         result.put("data", filtered);
1:         result.put("count", destinations.size());
1:         StringWriter writer = new StringWriter();
1:         mapper.writeValue(writer, result);
1:         return writer.toString();
1:     }
1: 
0:     Map<ObjectName, DestinationView> getFilteredDestinations(int page, int pageSize) {
0:         Map<ObjectName, DestinationView> filtered = Maps.filterValues(destinations, getPredicate());
1:         ImmutableMap.Builder<ObjectName, DestinationView> builder = ImmutableMap.builder();
1:         int start = (page - 1) * pageSize;
0:         int end = Math.min(page * pageSize, filtered.size());
1:         int i = 0;
1:         for (Map.Entry<ObjectName, DestinationView> entry :
0:                 getOrdering().sortedCopy(filtered.entrySet())) {
1:             if (i >= start && i < end) {
1:                 builder.put(entry.getKey(), entry.getValue());
1:             }
1:             i++;
1:         }
1: 
1:         return builder.build();
1:     }
1: 
1:     Predicate<DestinationView> getPredicate() {
1:         return new Predicate<DestinationView>() {
1:             @Override
1:             public boolean apply(DestinationView input) {
1:                 boolean match = true;
1:                 if (getName() != null && !getName().isEmpty()) {
1:                     match = input.getName().contains(getName());
1:                 }
1: 
1:                 if (match) {
1:                     if (getFilter().equals("empty")) {
1:                         match = input.getQueueSize() == 0;
1:                     }
1:                     if (getFilter().equals("nonEmpty")) {
1:                         match = input.getQueueSize() != 0;
1:                     }
1:                     if (getFilter().equals("noConsumer")) {
1:                         match = input.getConsumerCount() == 0;
1:                     }
1:                     if (getFilter().equals("nonAdvisory")) {
1:                         return !(input instanceof TopicView && AdvisorySupport.isAdvisoryTopic(new ActiveMQTopic(input.getName())));
1:                     }
1:                 }
1: 
1:                 return match;
1:             }
1:         };
1:     }
1: 
1:     Ordering<Map.Entry<ObjectName, DestinationView>> getOrdering() {
1:         return new Ordering<Map.Entry<ObjectName, DestinationView>>() {
1: 
1:             Method getter = findGetterMethod(DestinationView.class, getSortColumn());
1: 
1:             @Override
1:             public int compare(Map.Entry<ObjectName, DestinationView> left, Map.Entry<ObjectName, DestinationView> right) {
1:                 try {
1:                     if (getter != null) {
1:                         Object leftValue = getter.invoke(left.getValue());
1:                         Object rightValue = getter.invoke(right.getValue());
1:                         if (leftValue instanceof Comparable && rightValue instanceof Comparable) {
1:                             if (getSortOrder().toLowerCase().equals("desc")) {
1:                                 return ((Comparable) rightValue).compareTo(leftValue);
1:                             } else {
1:                                 return ((Comparable) leftValue).compareTo(rightValue);
1:                             }
1:                         }
1:                     }
1:                     return 0;
1:                 } catch (Exception e) {
1:                     LOG.info("Exception sorting destinations", e);
1:                     return 0;
1:                 }
1:             }
1:         };
1:     }
1: 
1:     public Map<ObjectName, DestinationView> getDestinations() {
1:         return destinations;
1:     }
1: 
1:     public String getName() {
1:         return name;
1:     }
1: 
1:     public void setName(String name) {
1:         this.name = name;
1:     }
1: 
1:     public String getFilter() {
1:         return filter;
1:     }
1: 
1:     public void setFilter(String filter) {
1:         this.filter = filter;
1:     }
1: 
1:     public String getSortOrder() {
1:         return sortOrder;
1:     }
1: 
1:     public void setSortOrder(String sortOrder) {
1:         this.sortOrder = sortOrder;
1:     }
1: 
1:     public String getSortColumn() {
1:         return sortColumn;
1:     }
1: 
1:     public void setSortColumn(String sortColumn) {
1:         this.sortColumn = sortColumn;
1:     }
1: }
============================================================================