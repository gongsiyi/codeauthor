1:8274f09: /**
1:8274f09:  * Licensed to the Apache Software Foundation (ASF) under one or more
1:8274f09:  * contributor license agreements.  See the NOTICE file distributed with
1:8274f09:  * this work for additional information regarding copyright ownership.
1:8274f09:  * The ASF licenses this file to You under the Apache License, Version 2.0
1:8274f09:  * (the "License"); you may not use this file except in compliance with
1:8274f09:  * the License.  You may obtain a copy of the License at
1:8274f09:  *
1:8274f09:  *      http://www.apache.org/licenses/LICENSE-2.0
1:8274f09:  *
1:8274f09:  * Unless required by applicable law or agreed to in writing, software
1:8274f09:  * distributed under the License is distributed on an "AS IS" BASIS,
1:8274f09:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:8274f09:  * See the License for the specific language governing permissions and
1:8274f09:  * limitations under the License.
1:8274f09:  */
1:8274f09: package org.apache.activemq.store.jdbc.adapter;
3:8274f09: 
1:8274f09: import java.io.IOException;
1:8274f09: import java.sql.PreparedStatement;
1:8274f09: import java.sql.ResultSet;
1:8274f09: import java.sql.SQLException;
1:8274f09: 
1:8274f09: import org.apache.activemq.store.jdbc.DefaultDatabaseLocker;
1:8274f09: import org.apache.activemq.store.jdbc.JDBCPersistenceAdapter;
1:8bf987b: import org.slf4j.Logger;
1:8bf987b: import org.slf4j.LoggerFactory;
1:8274f09: 
1:8274f09: /**
1:8274f09:  * Represents an exclusive lock on a database to avoid multiple brokers running
1:8274f09:  * against the same logical database.
1:8274f09:  * 
1:80ac49d:  * @org.apache.xbean.XBean element="transact-database-locker"
1:0bbc0ac:  * 
1:8274f09:  */
1:8274f09: public class TransactDatabaseLocker extends DefaultDatabaseLocker {
1:8bf987b:     private static final Logger LOG = LoggerFactory.getLogger(TransactDatabaseLocker.class);
1:8274f09:     
1:8274f09:     @Override
1:6ce702d:     public void doStart() throws Exception {
1:8274f09: 
1:8274f09:         LOG.info("Attempting to acquire the exclusive lock to become the Master broker");
1:8274f09:         PreparedStatement statement = null;
1:8274f09:         while (true) {
1:8274f09:             try {
1:8274f09:                 connection = dataSource.getConnection();
1:8274f09:                 connection.setAutoCommit(false);
1:8a8fcb6:                 String sql = getStatements().getLockCreateStatement();
1:8274f09:                 statement = connection.prepareStatement(sql);
1:8274f09:                 if (statement.getMetaData() != null) {
1:8274f09:                     ResultSet rs = statement.executeQuery();
1:8274f09:                     // if not already locked the statement below blocks until lock acquired
1:8274f09:                     rs.next();
1:8274f09:                 } else {
1:8274f09:                     statement.execute();
3:8274f09:                 }
1:8274f09:                 break;
1:8274f09:             } catch (Exception e) {
1:efaa351:                 if (isStopping()) {
1:8274f09:                     throw new Exception("Cannot start broker as being asked to shut down. Interrupted attempt to acquire lock: " + e, e);
1:8274f09:                 }
1:8274f09: 
1:8274f09:                 if (exceptionHandler != null) {
1:8274f09:                     try {
1:8274f09:                         exceptionHandler.handle(e);
1:8274f09:                     } catch (Throwable handlerException) {
1:8274f09:                         LOG.error("The exception handler " + exceptionHandler.getClass().getCanonicalName() + " threw this exception: " + handlerException
1:8274f09:                                 + " while trying to handle this excpetion: " + e, handlerException);
1:8274f09:                     }
1:8274f09: 
1:8274f09:                 } else {
1:8274f09:                     LOG.error("Failed to acquire lock: " + e, e);
1:8274f09:                 }
1:8274f09:             } finally {
1:8274f09: 
1:8274f09:                 if (null != statement) {
1:8274f09:                     try {
1:8274f09:                         statement.close();
1:8274f09:                     } catch (SQLException e1) {
1:8274f09:                         LOG.warn("Caught while closing statement: " + e1, e1);
1:8274f09:                     }
1:8274f09:                     statement = null;
1:8274f09:                 }
1:8274f09:             }
1:8274f09: 
1:8274f09:             LOG.debug("Sleeping for " + lockAcquireSleepInterval + " milli(s) before trying again to get the lock...");
1:8274f09:             try {
1:8274f09:             	Thread.sleep(lockAcquireSleepInterval);
1:8274f09:             } catch (InterruptedException ie) {
1:8274f09:             	LOG.warn("Master lock retry sleep interrupted", ie);
1:8274f09:             }
1:8274f09:         }
1:8274f09: 
1:8274f09:         LOG.info("Becoming the master on dataSource: " + dataSource);
1:8274f09:     }
1:8274f09: 
1:8274f09: }
============================================================================
author:Claus Ibsen
-------------------------------------------------------------------------------
commit:8a8fcb6
/////////////////////////////////////////////////////////////////////////
1:                 String sql = getStatements().getLockCreateStatement();
author:gtully
-------------------------------------------------------------------------------
commit:efaa351
/////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////
1:                 if (isStopping()) {
author:Hiram R. Chirino
-------------------------------------------------------------------------------
commit:c5cf038
commit:0bbc0ac
/////////////////////////////////////////////////////////////////////////
1:  * 
commit:80ac49d
/////////////////////////////////////////////////////////////////////////
1:  * @org.apache.xbean.XBean element="transact-database-locker"
author:Bosanac Dejan
-------------------------------------------------------------------------------
commit:6ce702d
/////////////////////////////////////////////////////////////////////////
1:     public void doStart() throws Exception {
commit:8bf987b
/////////////////////////////////////////////////////////////////////////
1: import org.slf4j.Logger;
1: import org.slf4j.LoggerFactory;
/////////////////////////////////////////////////////////////////////////
1:     private static final Logger LOG = LoggerFactory.getLogger(TransactDatabaseLocker.class);
author:Gary Tully
-------------------------------------------------------------------------------
commit:8274f09
/////////////////////////////////////////////////////////////////////////
1: /**
1:  * Licensed to the Apache Software Foundation (ASF) under one or more
1:  * contributor license agreements.  See the NOTICE file distributed with
1:  * this work for additional information regarding copyright ownership.
1:  * The ASF licenses this file to You under the Apache License, Version 2.0
1:  * (the "License"); you may not use this file except in compliance with
1:  * the License.  You may obtain a copy of the License at
1:  *
1:  *      http://www.apache.org/licenses/LICENSE-2.0
1:  *
1:  * Unless required by applicable law or agreed to in writing, software
1:  * distributed under the License is distributed on an "AS IS" BASIS,
1:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:  * See the License for the specific language governing permissions and
1:  * limitations under the License.
1:  */
1: package org.apache.activemq.store.jdbc.adapter;
1: 
1: import java.io.IOException;
1: import java.sql.PreparedStatement;
1: import java.sql.ResultSet;
1: import java.sql.SQLException;
1: 
1: import org.apache.activemq.store.jdbc.DefaultDatabaseLocker;
1: import org.apache.activemq.store.jdbc.JDBCPersistenceAdapter;
0: import org.apache.commons.logging.Log;
0: import org.apache.commons.logging.LogFactory;
1: 
1: /**
1:  * Represents an exclusive lock on a database to avoid multiple brokers running
1:  * against the same logical database.
1:  * 
0:  * @version $Revision$
1:  */
1: public class TransactDatabaseLocker extends DefaultDatabaseLocker {
0:     private static final Log LOG = LogFactory.getLog(TransactDatabaseLocker.class);
1:     
0:     public TransactDatabaseLocker() {
1:     }
1:     
0:     public TransactDatabaseLocker(JDBCPersistenceAdapter persistenceAdapter) throws IOException {
0:         setPersistenceAdapter(persistenceAdapter);
1:     }
1:     
1:     @Override
0:     public void start() throws Exception {
0:         stopping = false;
1: 
1:         LOG.info("Attempting to acquire the exclusive lock to become the Master broker");
1:         PreparedStatement statement = null;
1:         while (true) {
1:             try {
1:                 connection = dataSource.getConnection();
1:                 connection.setAutoCommit(false);
0:                 String sql = statements.getLockCreateStatement();
1:                 statement = connection.prepareStatement(sql);
1:                 if (statement.getMetaData() != null) {
1:                     ResultSet rs = statement.executeQuery();
1:                     // if not already locked the statement below blocks until lock acquired
1:                     rs.next();
1:                 } else {
1:                     statement.execute();
1:                 }
1:                 break;
1:             } catch (Exception e) {
0:                 if (stopping) {
1:                     throw new Exception("Cannot start broker as being asked to shut down. Interrupted attempt to acquire lock: " + e, e);
1:                 }
1: 
1:                 if (exceptionHandler != null) {
1:                     try {
1:                         exceptionHandler.handle(e);
1:                     } catch (Throwable handlerException) {
1:                         LOG.error("The exception handler " + exceptionHandler.getClass().getCanonicalName() + " threw this exception: " + handlerException
1:                                 + " while trying to handle this excpetion: " + e, handlerException);
1:                     }
1: 
1:                 } else {
1:                     LOG.error("Failed to acquire lock: " + e, e);
1:                 }
1:             } finally {
1: 
1:                 if (null != statement) {
1:                     try {
1:                         statement.close();
1:                     } catch (SQLException e1) {
1:                         LOG.warn("Caught while closing statement: " + e1, e1);
1:                     }
1:                     statement = null;
1:                 }
1:             }
1: 
1:             LOG.debug("Sleeping for " + lockAcquireSleepInterval + " milli(s) before trying again to get the lock...");
1:             try {
1:             	Thread.sleep(lockAcquireSleepInterval);
1:             } catch (InterruptedException ie) {
1:             	LOG.warn("Master lock retry sleep interrupted", ie);
1:             }
1:         }
1: 
1:         LOG.info("Becoming the master on dataSource: " + dataSource);
1:     }
1: 
1: }
============================================================================