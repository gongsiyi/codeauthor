1:583d849: /**
1:583d849:  * Licensed to the Apache Software Foundation (ASF) under one or more
1:583d849:  * contributor license agreements.  See the NOTICE file distributed with
1:583d849:  * this work for additional information regarding copyright ownership.
1:583d849:  * The ASF licenses this file to You under the Apache License, Version 2.0
1:583d849:  * (the "License"); you may not use this file except in compliance with
1:583d849:  * the License.  You may obtain a copy of the License at
1:583d849:  *
1:583d849:  *      http://www.apache.org/licenses/LICENSE-2.0
1:583d849:  *
1:583d849:  * Unless required by applicable law or agreed to in writing, software
1:583d849:  * distributed under the License is distributed on an "AS IS" BASIS,
1:583d849:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:583d849:  * See the License for the specific language governing permissions and
1:583d849:  * limitations under the License.
1:583d849:  */
1:6d1f57b: package org.apache.activemq.usecases;
6:6d1f57b: 
1:6d1f57b: import java.net.URI;
1:6d1f57b: import java.util.ArrayList;
1:ecf068e: import java.util.Collections;
1:6d1f57b: import java.util.HashMap;
1:6d1f57b: import java.util.List;
1:6d1f57b: import java.util.Map;
1:6d1f57b: import java.util.concurrent.CountDownLatch;
1:6d1f57b: import java.util.concurrent.TimeUnit;
1:f232cec: import java.util.concurrent.atomic.AtomicInteger;
1:6d1f57b: 
1:6d1f57b: import javax.jms.Connection;
1:6d1f57b: import javax.jms.JMSException;
1:6d1f57b: import javax.jms.Message;
1:6d1f57b: import javax.jms.MessageConsumer;
1:6d1f57b: import javax.jms.MessageListener;
1:6d1f57b: import javax.jms.MessageProducer;
1:6d1f57b: import javax.jms.Session;
1:6d1f57b: import javax.jms.TextMessage;
1:6d1f57b: import javax.jms.Topic;
1:4213e42: 
1:ecf068e: import junit.framework.Test;
1:6d1f57b: 
1:6d1f57b: import org.apache.activemq.ActiveMQConnectionFactory;
1:ecf068e: import org.apache.activemq.CombinationTestSupport;
1:6d1f57b: import org.apache.activemq.broker.BrokerService;
1:5b796cd: import org.apache.activemq.broker.region.Destination;
1:5b796cd: import org.apache.activemq.broker.region.RegionBroker;
1:5b796cd: import org.apache.activemq.broker.region.Subscription;
1:ecf068e: import org.apache.activemq.broker.region.policy.DispatchPolicy;
1:ecf068e: import org.apache.activemq.broker.region.policy.PolicyEntry;
1:ecf068e: import org.apache.activemq.broker.region.policy.PolicyMap;
1:ecf068e: import org.apache.activemq.broker.region.policy.PriorityNetworkDispatchPolicy;
1:ecf068e: import org.apache.activemq.broker.region.policy.SimpleDispatchPolicy;
1:5b796cd: import org.apache.activemq.command.ActiveMQDestination;
1:ecf068e: import org.apache.activemq.command.ActiveMQTopic;
1:6d1f57b: import org.apache.activemq.network.NetworkConnector;
1:4213e42: import org.apache.activemq.util.Wait;
1:8bf987b: import org.slf4j.Logger;
1:8bf987b: import org.slf4j.LoggerFactory;
1:6d1f57b: 
1:ecf068e: public class NoDuplicateOnTopicNetworkTest extends CombinationTestSupport {
1:8bf987b:     private static final Logger LOG = LoggerFactory
1:8bf987b:             .getLogger(NoDuplicateOnTopicNetworkTest.class);
1:6d1f57b: 
1:6d1f57b:     private static final String MULTICAST_DEFAULT = "multicast://default";
1:6d1f57b:     private static final String BROKER_1 = "tcp://localhost:61626";
1:6d1f57b:     private static final String BROKER_2 = "tcp://localhost:61636";
1:6d1f57b:     private static final String BROKER_3 = "tcp://localhost:61646";
1:ecf068e:     private final static String TOPIC_NAME = "broadcast";
1:5b796cd:     private static byte BASE_PRIORITY = -20;
1:6d1f57b:     private BrokerService broker1;
1:6d1f57b:     private BrokerService broker2;
1:6d1f57b:     private BrokerService broker3;
1:6d1f57b: 
1:ecf068e:     public boolean suppressDuplicateTopicSubs = false;
1:ecf068e:     public DispatchPolicy dispatchPolicy = new SimpleDispatchPolicy();
1:f232cec:     public boolean durableSub = false;
1:f232cec:     AtomicInteger idCounter = new AtomicInteger(0);
1:ecf068e:     
1:6d1f57b:     private boolean dynamicOnly = false;
1:6d1f57b:     // no duplicates in cyclic network if networkTTL <=1
1:f232cec:     // when > 1, subscriptions percolate around resulting in duplicates as there is no
1:6d1f57b:     // memory of the original subscription.
1:6d1f57b:     // solution for 6.0 using org.apache.activemq.command.ConsumerInfo.getNetworkConsumerIds()
1:301203e:     private int ttl = 3;
1:ecf068e:     
1:ecf068e:     
1:ecf068e:   
1:6d1f57b:     @Override
1:6d1f57b:     protected void setUp() throws Exception {
1:6d1f57b:         super.setUp();
1:6d1f57b: 
1:6d1f57b:         broker3 = createAndStartBroker("broker3", BROKER_3);
1:6d1f57b:         Thread.sleep(3000);
1:6d1f57b:         broker2 = createAndStartBroker("broker2", BROKER_2);
1:6d1f57b:         Thread.sleep(3000);
1:6d1f57b:         broker1 = createAndStartBroker("broker1", BROKER_1);
2:6d1f57b:         Thread.sleep(1000);
1:4213e42:         
1:4213e42:         waitForBridgeFormation();
1:4213e42:     }
1:4213e42:     
1:ecf068e:     public static Test suite() {
1:ecf068e:         return suite(NoDuplicateOnTopicNetworkTest.class);
1:ecf068e:     }
1:ecf068e:     
1:4213e42:     protected void waitForBridgeFormation() throws Exception {
1:4213e42:         Wait.waitFor(new Wait.Condition() {
1:4213e42:             public boolean isSatisified() throws Exception {
1:4213e42:                 return !broker3.getNetworkConnectors().get(0).activeBridges().isEmpty();
1:4213e42:             }});
1:4213e42:  
1:4213e42:         Wait.waitFor(new Wait.Condition() {
1:4213e42:             public boolean isSatisified() throws Exception {
1:4213e42:                 return !broker2.getNetworkConnectors().get(0).activeBridges().isEmpty();
1:4213e42:             }});
1:4213e42: 
1:4213e42:         Wait.waitFor(new Wait.Condition() {
1:4213e42:             public boolean isSatisified() throws Exception {
1:4213e42:                 return !broker1.getNetworkConnectors().get(0).activeBridges().isEmpty();
1:4213e42:             }});
1:6d1f57b:     }
1:6d1f57b: 
1:6d1f57b:     private BrokerService createAndStartBroker(String name, String addr)
1:6d1f57b:             throws Exception {
1:6d1f57b:         BrokerService broker = new BrokerService();
1:a6b85cc:         broker.setDeleteAllMessagesOnStartup(true);
1:6d1f57b:         broker.setBrokerName(name);
1:6d1f57b:         broker.addConnector(addr).setDiscoveryUri(new URI(MULTICAST_DEFAULT));
1:6d1f57b:         broker.setUseJmx(false);
1:6d1f57b: 
1:6d1f57b:         NetworkConnector networkConnector = broker
1:6d1f57b:                 .addNetworkConnector(MULTICAST_DEFAULT);
1:6d1f57b:         networkConnector.setDecreaseNetworkConsumerPriority(true);
1:6d1f57b:         networkConnector.setDynamicOnly(dynamicOnly);
1:6d1f57b:         networkConnector.setNetworkTTL(ttl);
1:ecf068e:         networkConnector.setSuppressDuplicateTopicSubscriptions(suppressDuplicateTopicSubs);
1:5b796cd:         networkConnector.setConsumerPriorityBase(BASE_PRIORITY);
1:5b796cd:         networkConnector.addStaticallyIncludedDestination(new ActiveMQTopic("BeStaticallyIncluded"));
1:ecf068e:         
1:ecf068e:         PolicyMap policyMap = new PolicyMap();
1:ecf068e:         PolicyEntry policy = new PolicyEntry();
1:ecf068e:         policy.setDispatchPolicy(dispatchPolicy);
1:ecf068e:         // the audit will suppress the duplicates as it defaults to true so this test
1:ecf068e:         // checking for dups will fail. it is good to have it on in practice.
1:ecf068e:         policy.setEnableAudit(false);
1:ecf068e:         policyMap.put(new ActiveMQTopic(TOPIC_NAME), policy);
1:ecf068e:         broker.setDestinationPolicy(policyMap);
1:6d1f57b:         broker.start();
1:6d1f57b:        
1:6d1f57b:         return broker;
1:6d1f57b:     }
1:6d1f57b: 
1:6d1f57b:     @Override
1:6d1f57b:     protected void tearDown() throws Exception {
1:6d1f57b:         broker1.stop();
1:6d1f57b:         broker2.stop();
1:6d1f57b:         broker3.stop();
1:6d1f57b:         super.tearDown();
1:6d1f57b:     }
1:6d1f57b: 
1:ecf068e:     public void initCombosForTestProducerConsumerTopic() {
1:f232cec:         this.addCombinationValues("suppressDuplicateTopicSubs", new Object[]{Boolean.TRUE, Boolean.FALSE});
1:ecf068e:         this.addCombinationValues("dispatchPolicy", new Object[]{new PriorityNetworkDispatchPolicy(), new SimpleDispatchPolicy()});
1:f232cec:         this.addCombinationValues("durableSub", new Object[]{Boolean.TRUE, Boolean.FALSE});
1:ecf068e:     }
1:ecf068e:     
1:6d1f57b:     public void testProducerConsumerTopic() throws Exception {
1:ecf068e:         
1:ecf068e:         final CountDownLatch consumerStarted = new CountDownLatch(1);
1:ecf068e:         
1:6d1f57b:         Thread producerThread = new Thread(new Runnable() {
1:6d1f57b:             public void run() {
1:6d1f57b:                 TopicWithDuplicateMessages producer = new TopicWithDuplicateMessages();
1:6d1f57b:                 producer.setBrokerURL(BROKER_1);
1:ecf068e:                 producer.setTopicName(TOPIC_NAME);
1:6d1f57b:                 try {
1:6d1f57b:                     producer.produce();
1:6d1f57b:                 } catch (JMSException e) {
1:6d1f57b:                     fail("Unexpected " + e);
1:6d1f57b:                 }
1:6d1f57b:             }
1:6d1f57b:         });
1:301203e: 
1:6d1f57b:         final TopicWithDuplicateMessages consumer = new TopicWithDuplicateMessages();
1:6d1f57b:         Thread consumerThread = new Thread(new Runnable() {
1:6d1f57b:             public void run() {
1:6d1f57b:                 consumer.setBrokerURL(BROKER_2);
1:ecf068e:                 consumer.setTopicName(TOPIC_NAME);
1:6d1f57b:                 try {
1:6d1f57b:                     consumer.consumer();
1:ecf068e:                     consumerStarted.countDown();
1:6d1f57b:                     consumer.getLatch().await(60, TimeUnit.SECONDS);
1:6d1f57b:                 } catch (Exception e) {
1:6d1f57b:                     fail("Unexpected " + e);
1:6d1f57b:                 }
1:6d1f57b:             }
1:6d1f57b:         });
1:6d1f57b: 
1:6d1f57b:         consumerThread.start();
1:301203e:         LOG.info("Started Consumer");
1:ecf068e:         
1:ecf068e:         assertTrue("consumer started eventually", consumerStarted.await(10, TimeUnit.SECONDS));
1:ecf068e:         
1:301203e:         // ensure subscription has percolated though the network
1:301203e:         Thread.sleep(2000);
1:5b796cd: 
1:5b796cd:         // verify network consumer priority
1:5b796cd:         final RegionBroker regionBroker = (RegionBroker)broker1.getRegionBroker();
1:5b796cd:         assertTrue("Found network destination with priority as expected", Wait.waitFor(new Wait.Condition() {
1:5b796cd:             @Override
1:5b796cd:             public boolean isSatisified() throws Exception {
1:5b796cd:                 Map<ActiveMQDestination, Destination> destinationMap = regionBroker.getTopicRegion().getDestinationMap();
1:5b796cd:                 LOG.info("destinations: " + destinationMap.keySet());
1:5b796cd:                 boolean found = false;
1:5b796cd:                 for (Destination destination : destinationMap.values()) {
1:5b796cd:                     List<Subscription> subscriptions = destination.getConsumers();
1:5b796cd:                     LOG.info(destination + " subscriptions: " + subscriptions);
1:5b796cd:                     for (Subscription subscription : subscriptions) {
1:5b796cd:                         if (subscription.getConsumerInfo().isNetworkSubscription()) {
1:5b796cd:                             LOG.info("subscription: " + subscription + ", priority: " + subscription.getConsumerInfo().getPriority());
1:5b796cd:                             assertTrue("priority is < our base: " + subscription.getConsumerInfo().getPriority(),
1:5b796cd:                                     subscription.getConsumerInfo().getPriority() <= BASE_PRIORITY);
1:5b796cd:                             found = true;
1:5b796cd:                         }
1:5b796cd:                     }
1:5b796cd:                 }
1:5b796cd:                 return found;
1:5b796cd:             }
1:5b796cd:         }));
1:5b796cd: 
1:6d1f57b:         producerThread.start();
1:301203e:         LOG.info("Started Producer");
1:6d1f57b:         producerThread.join();
1:6d1f57b:         consumerThread.join();
1:6d1f57b: 
1:ecf068e:         int duplicateCount = 0;
1:6d1f57b:         Map<String, String> map = new HashMap<String, String>();
1:6d1f57b:         for (String msg : consumer.getMessageStrings()) {
1:ecf068e:             if (map.containsKey(msg)) {
1:ecf068e:                 LOG.info("got duplicate: " + msg);
1:ecf068e:                 duplicateCount++;
1:ecf068e:             }
1:6d1f57b:             map.put(msg, msg);
1:6d1f57b:         }
1:f232cec:         consumer.unSubscribe();
1:ecf068e:         if (suppressDuplicateTopicSubs || dispatchPolicy instanceof PriorityNetworkDispatchPolicy) {
1:ecf068e:             assertEquals("no duplicates", 0, duplicateCount);
1:ecf068e:             assertEquals("got all required messages: " + map.size(), consumer
1:ecf068e:                     .getNumMessages(), map.size());
1:ecf068e:         } else {
1:e6c4d7e:             assertTrue("we can get some duplicates: " + duplicateCount, duplicateCount >= 0);
1:e6c4d7e:             if (duplicateCount == 0) {
1:e6c4d7e:                assertEquals("got all required messages: " + map.size(), consumer
1:e6c4d7e:                     .getNumMessages(), map.size()); 
1:e6c4d7e:             }
1:ecf068e:         }
1:6d1f57b:     }
1:6d1f57b: 
1:6d1f57b:     class TopicWithDuplicateMessages {
1:6d1f57b:         private String brokerURL;
1:6d1f57b:         private String topicName;
1:6d1f57b:         private Connection connection;
1:6d1f57b:         private Session session;
1:6d1f57b:         private Topic topic;
1:6d1f57b:         private MessageProducer producer;
1:6d1f57b:         private MessageConsumer consumer;
1:f232cec:         private final String durableID = "DURABLE_ID";
1:6d1f57b: 
1:ecf068e:         private List<String> receivedStrings = Collections.synchronizedList(new ArrayList<String>());
1:6d1f57b:         private int numMessages = 10;
1:6d1f57b:         private CountDownLatch recievedLatch = new CountDownLatch(numMessages);
1:6d1f57b: 
1:6d1f57b:         public CountDownLatch getLatch() {
1:6d1f57b:             return recievedLatch;
1:6d1f57b:         }
1:ecf068e:         
1:6d1f57b:         public List<String> getMessageStrings() {
1:ecf068e:             synchronized(receivedStrings) {
1:ecf068e:                 return new ArrayList<String>(receivedStrings);
1:ecf068e:             }
1:6d1f57b:         }
1:6d1f57b: 
1:6d1f57b:         public String getBrokerURL() {
1:6d1f57b:             return brokerURL;
1:6d1f57b:         }
1:6d1f57b: 
1:6d1f57b:         public void setBrokerURL(String brokerURL) {
1:6d1f57b:             this.brokerURL = brokerURL;
1:6d1f57b:         }
1:6d1f57b: 
1:6d1f57b:         public String getTopicName() {
1:6d1f57b:             return topicName;
1:6d1f57b:         }
1:6d1f57b: 
1:6d1f57b:         public void setTopicName(String topicName) {
1:6d1f57b:             this.topicName = topicName;
1:6d1f57b:         }
1:6d1f57b: 
1:6d1f57b:         private void createConnection() throws JMSException {
1:6d1f57b:             ActiveMQConnectionFactory factory = new ActiveMQConnectionFactory(
1:6d1f57b:                     brokerURL);
1:6d1f57b:             connection = factory.createConnection();
1:f232cec:             connection.setClientID("ID" + idCounter.incrementAndGet());
1:6d1f57b:         }
1:6d1f57b: 
1:6d1f57b:         private void createTopic() throws JMSException {
1:6d1f57b:             session = connection.createSession(false, Session.AUTO_ACKNOWLEDGE);
1:6d1f57b:             topic = session.createTopic(topicName);
1:6d1f57b:         }
1:6d1f57b: 
1:6d1f57b:         private void createProducer() throws JMSException {
1:6d1f57b:             producer = session.createProducer(topic);
1:6d1f57b:         }
1:6d1f57b: 
1:6d1f57b:         private void createConsumer() throws JMSException {
1:f232cec:             if (durableSub) {
1:f232cec:                 consumer = session.createDurableSubscriber(topic, durableID);
1:f232cec:             } else {
1:f232cec:                 consumer = session.createConsumer(topic);
1:f232cec:             }
1:6d1f57b:             consumer.setMessageListener(new MessageListener() {
1:6d1f57b: 
1:6d1f57b:                 public void onMessage(Message arg0) {
1:6d1f57b:                     TextMessage msg = (TextMessage) arg0;
1:6d1f57b:                     try {
1:6d1f57b:                         LOG.debug("Received message [" + msg.getText() + "]");
1:6d1f57b:                         receivedStrings.add(msg.getText());
1:6d1f57b:                         recievedLatch.countDown();
1:6d1f57b:                     } catch (JMSException e) {
1:6d1f57b:                         fail("Unexpected :" + e);
1:6d1f57b:                     }
1:6d1f57b:                 }
1:6d1f57b: 
1:6d1f57b:             });
1:6d1f57b:         }
1:6d1f57b: 
1:6d1f57b:         private void publish() throws JMSException {
1:6d1f57b:             for (int i = 0; i < numMessages; i++) {
1:6d1f57b:                 TextMessage textMessage = session.createTextMessage();
1:6d1f57b:                 String message = "message: " + i;
1:6d1f57b:                 LOG.debug("Sending message[" + message + "]");
1:6d1f57b:                 textMessage.setText(message);
1:6d1f57b:                 producer.send(textMessage);
1:6d1f57b:             }
1:6d1f57b:         }
1:6d1f57b: 
1:6d1f57b:         public void produce() throws JMSException {
1:6d1f57b:             createConnection();
1:6d1f57b:             createTopic();
1:6d1f57b:             createProducer();
1:6d1f57b:             connection.start();
1:6d1f57b:             publish();
1:6d1f57b:         }
1:6d1f57b: 
1:6d1f57b:         public void consumer() throws JMSException {
1:6d1f57b:             createConnection();
1:6d1f57b:             createTopic();
1:6d1f57b:             createConsumer();
1:6d1f57b:             connection.start();
1:6d1f57b:         }
1:6d1f57b: 
1:6d1f57b:         public int getNumMessages() {
1:6d1f57b:             return numMessages;
1:6d1f57b:         }
1:f232cec: 
1:f232cec:         public void unSubscribe() throws Exception {
1:f232cec:             consumer.close();
1:f232cec:             if (durableSub) {
1:f232cec:                 session.unsubscribe(durableID);
1:f232cec:                 // ensure un-subscription has percolated though the network
1:f232cec:                 Thread.sleep(2000);
1:f232cec:             }
1:f232cec:         }
1:6d1f57b:     }
1:6d1f57b: }
============================================================================
author:Timothy A. Bish
-------------------------------------------------------------------------------
commit:ef24cc9
author:Gary Tully
-------------------------------------------------------------------------------
commit:5b796cd
/////////////////////////////////////////////////////////////////////////
1: import org.apache.activemq.broker.region.Destination;
1: import org.apache.activemq.broker.region.RegionBroker;
1: import org.apache.activemq.broker.region.Subscription;
1: import org.apache.activemq.command.ActiveMQDestination;
/////////////////////////////////////////////////////////////////////////
1:     private static byte BASE_PRIORITY = -20;
/////////////////////////////////////////////////////////////////////////
1:         networkConnector.setConsumerPriorityBase(BASE_PRIORITY);
1:         networkConnector.addStaticallyIncludedDestination(new ActiveMQTopic("BeStaticallyIncluded"));
/////////////////////////////////////////////////////////////////////////
1: 
1:         // verify network consumer priority
1:         final RegionBroker regionBroker = (RegionBroker)broker1.getRegionBroker();
1:         assertTrue("Found network destination with priority as expected", Wait.waitFor(new Wait.Condition() {
1:             @Override
1:             public boolean isSatisified() throws Exception {
1:                 Map<ActiveMQDestination, Destination> destinationMap = regionBroker.getTopicRegion().getDestinationMap();
1:                 LOG.info("destinations: " + destinationMap.keySet());
1:                 boolean found = false;
1:                 for (Destination destination : destinationMap.values()) {
1:                     List<Subscription> subscriptions = destination.getConsumers();
1:                     LOG.info(destination + " subscriptions: " + subscriptions);
1:                     for (Subscription subscription : subscriptions) {
1:                         if (subscription.getConsumerInfo().isNetworkSubscription()) {
1:                             LOG.info("subscription: " + subscription + ", priority: " + subscription.getConsumerInfo().getPriority());
1:                             assertTrue("priority is < our base: " + subscription.getConsumerInfo().getPriority(),
1:                                     subscription.getConsumerInfo().getPriority() <= BASE_PRIORITY);
1:                             found = true;
1:                         }
1:                     }
1:                 }
1:                 return found;
1:             }
1:         }));
1: 
commit:a6b85cc
/////////////////////////////////////////////////////////////////////////
1:         broker.setDeleteAllMessagesOnStartup(true);
commit:f232cec
/////////////////////////////////////////////////////////////////////////
1: import java.util.concurrent.atomic.AtomicInteger;
/////////////////////////////////////////////////////////////////////////
1:     public boolean durableSub = false;
1:     AtomicInteger idCounter = new AtomicInteger(0);
1:     // when > 1, subscriptions percolate around resulting in duplicates as there is no
/////////////////////////////////////////////////////////////////////////
0:         //broker.setDeleteAllMessagesOnStartup(true);
/////////////////////////////////////////////////////////////////////////
1:         this.addCombinationValues("suppressDuplicateTopicSubs", new Object[]{Boolean.TRUE, Boolean.FALSE});
1:         this.addCombinationValues("durableSub", new Object[]{Boolean.TRUE, Boolean.FALSE});
/////////////////////////////////////////////////////////////////////////
1:         consumer.unSubscribe();
/////////////////////////////////////////////////////////////////////////
1:         private final String durableID = "DURABLE_ID";
/////////////////////////////////////////////////////////////////////////
1:             connection.setClientID("ID" + idCounter.incrementAndGet());
/////////////////////////////////////////////////////////////////////////
1:             if (durableSub) {
1:                 consumer = session.createDurableSubscriber(topic, durableID);
1:             } else {
1:                 consumer = session.createConsumer(topic);
1:             }
/////////////////////////////////////////////////////////////////////////
1: 
1:         public void unSubscribe() throws Exception {
1:             consumer.close();
1:             if (durableSub) {
1:                 session.unsubscribe(durableID);
1:                 // ensure un-subscription has percolated though the network
1:                 Thread.sleep(2000);
1:             }
1:         }
commit:e6c4d7e
/////////////////////////////////////////////////////////////////////////
1:             assertTrue("we can get some duplicates: " + duplicateCount, duplicateCount >= 0);
1:             if (duplicateCount == 0) {
1:                assertEquals("got all required messages: " + map.size(), consumer
1:                     .getNumMessages(), map.size()); 
1:             }
commit:ecf068e
/////////////////////////////////////////////////////////////////////////
1: import java.util.Collections;
/////////////////////////////////////////////////////////////////////////
1: import junit.framework.Test;
1: import org.apache.activemq.CombinationTestSupport;
1: import org.apache.activemq.broker.region.policy.DispatchPolicy;
1: import org.apache.activemq.broker.region.policy.PolicyEntry;
1: import org.apache.activemq.broker.region.policy.PolicyMap;
1: import org.apache.activemq.broker.region.policy.PriorityNetworkDispatchPolicy;
1: import org.apache.activemq.broker.region.policy.SimpleDispatchPolicy;
1: import org.apache.activemq.command.ActiveMQTopic;
1: public class NoDuplicateOnTopicNetworkTest extends CombinationTestSupport {
/////////////////////////////////////////////////////////////////////////
1:     private final static String TOPIC_NAME = "broadcast";
1:     public boolean suppressDuplicateTopicSubs = false;
1:     public DispatchPolicy dispatchPolicy = new SimpleDispatchPolicy();
1:     
1:     
1:     
1:   
/////////////////////////////////////////////////////////////////////////
1:     public static Test suite() {
1:         return suite(NoDuplicateOnTopicNetworkTest.class);
1:     }
1:     
/////////////////////////////////////////////////////////////////////////
1:         networkConnector.setSuppressDuplicateTopicSubscriptions(suppressDuplicateTopicSubs);
1:         
1:         PolicyMap policyMap = new PolicyMap();
1:         PolicyEntry policy = new PolicyEntry();
1:         policy.setDispatchPolicy(dispatchPolicy);
1:         // the audit will suppress the duplicates as it defaults to true so this test
1:         // checking for dups will fail. it is good to have it on in practice.
1:         policy.setEnableAudit(false);
1:         policyMap.put(new ActiveMQTopic(TOPIC_NAME), policy);
1:         broker.setDestinationPolicy(policyMap);
/////////////////////////////////////////////////////////////////////////
1:     public void initCombosForTestProducerConsumerTopic() {
0:         this.addCombinationValues("suppresDuplicateTopicSubs", new Object[]{Boolean.TRUE, Boolean.FALSE});
1:         this.addCombinationValues("dispatchPolicy", new Object[]{new PriorityNetworkDispatchPolicy(), new SimpleDispatchPolicy()});
1:     }
1:     
1:         
1:         final CountDownLatch consumerStarted = new CountDownLatch(1);
1:         
1:                 producer.setTopicName(TOPIC_NAME);
/////////////////////////////////////////////////////////////////////////
1:                 consumer.setTopicName(TOPIC_NAME);
1:                     consumerStarted.countDown();
/////////////////////////////////////////////////////////////////////////
1:         assertTrue("consumer started eventually", consumerStarted.await(10, TimeUnit.SECONDS));
1:         
1:         
1:         int duplicateCount = 0;
1:             if (map.containsKey(msg)) {
1:                 LOG.info("got duplicate: " + msg);
1:                 duplicateCount++;
1:             }
1:         if (suppressDuplicateTopicSubs || dispatchPolicy instanceof PriorityNetworkDispatchPolicy) {
1:             assertEquals("no duplicates", 0, duplicateCount);
1:             assertEquals("got all required messages: " + map.size(), consumer
1:                     .getNumMessages(), map.size());
1:         } else {
0:             assertTrue("we got some duplicates", duplicateCount > 0);
1:         }
/////////////////////////////////////////////////////////////////////////
1:         private List<String> receivedStrings = Collections.synchronizedList(new ArrayList<String>());
1:         
1:             synchronized(receivedStrings) {
1:                 return new ArrayList<String>(receivedStrings);
1:             }
commit:4213e42
/////////////////////////////////////////////////////////////////////////
0: import junit.framework.TestCase;
1: 
1: import org.apache.activemq.util.Wait;
/////////////////////////////////////////////////////////////////////////
1:         
1:         waitForBridgeFormation();
1:     }
1:     
1:     protected void waitForBridgeFormation() throws Exception {
1:         Wait.waitFor(new Wait.Condition() {
1:             public boolean isSatisified() throws Exception {
1:                 return !broker3.getNetworkConnectors().get(0).activeBridges().isEmpty();
1:             }});
1:  
1:         Wait.waitFor(new Wait.Condition() {
1:             public boolean isSatisified() throws Exception {
1:                 return !broker2.getNetworkConnectors().get(0).activeBridges().isEmpty();
1:             }});
1: 
1:         Wait.waitFor(new Wait.Condition() {
1:             public boolean isSatisified() throws Exception {
1:                 return !broker1.getNetworkConnectors().get(0).activeBridges().isEmpty();
1:             }});
commit:301203e
/////////////////////////////////////////////////////////////////////////
1:     private int ttl = 3;
/////////////////////////////////////////////////////////////////////////
1:         LOG.info("Started Consumer");
1:         
1:         // ensure subscription has percolated though the network
1:         Thread.sleep(2000);
1:         LOG.info("Started Producer");
commit:6d1f57b
/////////////////////////////////////////////////////////////////////////
1: package org.apache.activemq.usecases;
1: 
1: import java.net.URI;
1: import java.util.ArrayList;
1: import java.util.HashMap;
1: import java.util.List;
1: import java.util.Map;
1: import java.util.concurrent.CountDownLatch;
1: import java.util.concurrent.TimeUnit;
1: 
1: import javax.jms.Connection;
1: import javax.jms.JMSException;
1: import javax.jms.Message;
1: import javax.jms.MessageConsumer;
1: import javax.jms.MessageListener;
1: import javax.jms.MessageProducer;
1: import javax.jms.Session;
1: import javax.jms.TextMessage;
1: import javax.jms.Topic;
1: 
1: import org.apache.activemq.ActiveMQConnectionFactory;
1: import org.apache.activemq.broker.BrokerService;
1: import org.apache.activemq.network.NetworkConnector;
0: import org.apache.commons.logging.Log;
0: import org.apache.commons.logging.LogFactory;
1: 
0: import junit.framework.TestCase;
1: 
0: public class NoDuplicateOnTopicNetworkTest extends TestCase {
0:     private static final Log LOG = LogFactory
0:             .getLog(NoDuplicateOnTopicNetworkTest.class);
1: 
1:     private static final String MULTICAST_DEFAULT = "multicast://default";
1:     private static final String BROKER_1 = "tcp://localhost:61626";
1:     private static final String BROKER_2 = "tcp://localhost:61636";
1:     private static final String BROKER_3 = "tcp://localhost:61646";
1:     private BrokerService broker1;
1:     private BrokerService broker2;
1:     private BrokerService broker3;
1: 
1:     private boolean dynamicOnly = false;
1:     // no duplicates in cyclic network if networkTTL <=1
0:     // when > 1, subscriptions perculate around resulting in duplicates as there is no
1:     // memory of the original subscription.
1:     // solution for 6.0 using org.apache.activemq.command.ConsumerInfo.getNetworkConsumerIds()
0:     private int ttl = 1;
1: 
1:     @Override
1:     protected void setUp() throws Exception {
1:         super.setUp();
1: 
1:         broker3 = createAndStartBroker("broker3", BROKER_3);
1:         Thread.sleep(3000);
1:         broker2 = createAndStartBroker("broker2", BROKER_2);
1:         Thread.sleep(3000);
1:         broker1 = createAndStartBroker("broker1", BROKER_1);
1:         Thread.sleep(1000);
1:     }
1: 
1:     private BrokerService createAndStartBroker(String name, String addr)
1:             throws Exception {
1:         BrokerService broker = new BrokerService();
1:         broker.setBrokerName(name);
1:         broker.addConnector(addr).setDiscoveryUri(new URI(MULTICAST_DEFAULT));
1:         broker.setUseJmx(false);
1: 
1:         NetworkConnector networkConnector = broker
1:                 .addNetworkConnector(MULTICAST_DEFAULT);
1:         networkConnector.setDecreaseNetworkConsumerPriority(true);
1:         networkConnector.setDynamicOnly(dynamicOnly);
1:         networkConnector.setNetworkTTL(ttl);
1: 
1:         broker.start();
1:        
1:         return broker;
1:     }
1: 
1:     @Override
1:     protected void tearDown() throws Exception {
1:         broker1.stop();
1:         broker2.stop();
1:         broker3.stop();
1:         super.tearDown();
1:     }
1: 
1:     public void testProducerConsumerTopic() throws Exception {
0:         final String topicName = "broadcast";
1:         Thread producerThread = new Thread(new Runnable() {
1:             public void run() {
1:                 TopicWithDuplicateMessages producer = new TopicWithDuplicateMessages();
1:                 producer.setBrokerURL(BROKER_1);
0:                 producer.setTopicName(topicName);
1:                 try {
1:                     producer.produce();
1:                 } catch (JMSException e) {
1:                     fail("Unexpected " + e);
1:                 }
1:             }
1:         });
1: 
1:         final TopicWithDuplicateMessages consumer = new TopicWithDuplicateMessages();
1:         Thread consumerThread = new Thread(new Runnable() {
1:             public void run() {
1:                 consumer.setBrokerURL(BROKER_2);
0:                 consumer.setTopicName(topicName);
1:                 try {
1:                     consumer.consumer();
1:                     consumer.getLatch().await(60, TimeUnit.SECONDS);
1:                 } catch (Exception e) {
1:                     fail("Unexpected " + e);
1:                 }
1:             }
1:         });
1: 
1:         consumerThread.start();
1:         Thread.sleep(1000);
1:         producerThread.start();
1:         producerThread.join();
1:         consumerThread.join();
1: 
1:         Map<String, String> map = new HashMap<String, String>();
1:         for (String msg : consumer.getMessageStrings()) {
0:             assertTrue("is not a duplicate: " + msg, !map.containsKey(msg));
1:             map.put(msg, msg);
1:         }
0:         assertEquals("got all required messages: " + map.size(), consumer
0:                 .getNumMessages(), map.size());
1:     }
1: 
1:     class TopicWithDuplicateMessages {
1:         private String brokerURL;
1:         private String topicName;
1:         private Connection connection;
1:         private Session session;
1:         private Topic topic;
1:         private MessageProducer producer;
1:         private MessageConsumer consumer;
1: 
0:         private List<String> receivedStrings = new ArrayList<String>();
1:         private int numMessages = 10;
1:         private CountDownLatch recievedLatch = new CountDownLatch(numMessages);
1: 
1:         public CountDownLatch getLatch() {
1:             return recievedLatch;
1:         }
1: 
1:         public List<String> getMessageStrings() {
0:             return receivedStrings;
1:         }
1: 
1:         public String getBrokerURL() {
1:             return brokerURL;
1:         }
1: 
1:         public void setBrokerURL(String brokerURL) {
1:             this.brokerURL = brokerURL;
1:         }
1: 
1:         public String getTopicName() {
1:             return topicName;
1:         }
1: 
1:         public void setTopicName(String topicName) {
1:             this.topicName = topicName;
1:         }
1: 
1:         private void createConnection() throws JMSException {
1:             ActiveMQConnectionFactory factory = new ActiveMQConnectionFactory(
1:                     brokerURL);
1:             connection = factory.createConnection();
1:         }
1: 
1:         private void createTopic() throws JMSException {
1:             session = connection.createSession(false, Session.AUTO_ACKNOWLEDGE);
1:             topic = session.createTopic(topicName);
1:         }
1: 
1:         private void createProducer() throws JMSException {
1:             producer = session.createProducer(topic);
1:         }
1: 
1:         private void createConsumer() throws JMSException {
0:             consumer = session.createConsumer(topic);
1:             consumer.setMessageListener(new MessageListener() {
1: 
1:                 public void onMessage(Message arg0) {
1:                     TextMessage msg = (TextMessage) arg0;
1:                     try {
1:                         LOG.debug("Received message [" + msg.getText() + "]");
1:                         receivedStrings.add(msg.getText());
1:                         recievedLatch.countDown();
1:                     } catch (JMSException e) {
1:                         fail("Unexpected :" + e);
1:                     }
1:                 }
1: 
1:             });
1:         }
1: 
1:         private void publish() throws JMSException {
1:             for (int i = 0; i < numMessages; i++) {
1:                 TextMessage textMessage = session.createTextMessage();
1:                 String message = "message: " + i;
1:                 LOG.debug("Sending message[" + message + "]");
1:                 textMessage.setText(message);
1:                 producer.send(textMessage);
1:             }
1:         }
1: 
1:         public void produce() throws JMSException {
1:             createConnection();
1:             createTopic();
1:             createProducer();
1:             connection.start();
1:             publish();
1:         }
1: 
1:         public void consumer() throws JMSException {
1:             createConnection();
1:             createTopic();
1:             createConsumer();
1:             connection.start();
1:         }
1: 
1:         public int getNumMessages() {
1:             return numMessages;
1:         }
1:     }
1: }
author:Bosanac Dejan
-------------------------------------------------------------------------------
commit:8bf987b
/////////////////////////////////////////////////////////////////////////
1: import org.slf4j.Logger;
1: import org.slf4j.LoggerFactory;
1:     private static final Logger LOG = LoggerFactory
1:             .getLogger(NoDuplicateOnTopicNetworkTest.class);
author:Hiram R. Chirino
-------------------------------------------------------------------------------
commit:583d849
/////////////////////////////////////////////////////////////////////////
1: /**
1:  * Licensed to the Apache Software Foundation (ASF) under one or more
1:  * contributor license agreements.  See the NOTICE file distributed with
1:  * this work for additional information regarding copyright ownership.
1:  * The ASF licenses this file to You under the Apache License, Version 2.0
1:  * (the "License"); you may not use this file except in compliance with
1:  * the License.  You may obtain a copy of the License at
1:  *
1:  *      http://www.apache.org/licenses/LICENSE-2.0
1:  *
1:  * Unless required by applicable law or agreed to in writing, software
1:  * distributed under the License is distributed on an "AS IS" BASIS,
1:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:  * See the License for the specific language governing permissions and
1:  * limitations under the License.
1:  */
============================================================================