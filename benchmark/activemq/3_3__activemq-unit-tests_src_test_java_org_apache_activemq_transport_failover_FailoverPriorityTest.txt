1:7388438: /**
1:7388438:  * Licensed to the Apache Software Foundation (ASF) under one or more
1:7388438:  * contributor license agreements.  See the NOTICE file distributed with
1:7388438:  * this work for additional information regarding copyright ownership.
1:7388438:  * The ASF licenses this file to You under the Apache License, Version 2.0
1:7388438:  * (the "License"); you may not use this file except in compliance with
1:7388438:  * the License.  You may obtain a copy of the License at
1:7388438:  *
1:7388438:  *      http://www.apache.org/licenses/LICENSE-2.0
1:7388438:  *
1:7388438:  * Unless required by applicable law or agreed to in writing, software
1:7388438:  * distributed under the License is distributed on an "AS IS" BASIS,
1:7388438:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:7388438:  * See the License for the specific language governing permissions and
1:7388438:  * limitations under the License.
1:7388438:  */
1:7388438: package org.apache.activemq.transport.failover;
1:7388438: 
1:7388438: import java.util.HashMap;
1:7388438: 
1:7388438: import org.slf4j.Logger;
1:7388438: import org.slf4j.LoggerFactory;
1:7388438: 
1:7388438: public class FailoverPriorityTest extends FailoverClusterTestSupport {
1:7388438: 
1:7388438:     protected final Logger LOG = LoggerFactory.getLogger(getClass());
1:7388438: 
1:7388438:     private static final String BROKER_A_CLIENT_TC_ADDRESS = "tcp://127.0.0.1:61616";
1:7388438:     private static final String BROKER_B_CLIENT_TC_ADDRESS = "tcp://127.0.0.1:61617";
1:585a966:     private static final String BROKER_C_CLIENT_TC_ADDRESS = "tcp://127.0.0.1:61618";
1:e777126:     private final HashMap<String,String> urls = new HashMap<String,String>();
1:7388438: 
1:7388438:     @Override
1:7388438:     public void setUp() throws Exception {
1:7388438:         super.setUp();
1:7388438:         urls.put(BROKER_A_NAME, BROKER_A_CLIENT_TC_ADDRESS);
1:7388438:         urls.put(BROKER_B_NAME, BROKER_B_CLIENT_TC_ADDRESS);
1:7388438:     }
1:7388438: 
1:7388438:     private static final String BROKER_A_NAME = "BROKERA";
1:7388438:     private static final String BROKER_B_NAME = "BROKERB";
1:585a966:     private static final String BROKER_C_NAME = "BROKERC";
1:7388438: 
1:7388438: 
1:7388438:     public void testPriorityBackup() throws Exception {
1:7388438:         createBrokerA();
1:7388438:         createBrokerB();
1:7388438:         getBroker(BROKER_B_NAME).waitUntilStarted();
1:7388438:         Thread.sleep(1000);
1:7388438: 
1:7388438:         setClientUrl("failover:(" + BROKER_A_CLIENT_TC_ADDRESS + "," + BROKER_B_CLIENT_TC_ADDRESS + ")?randomize=false&priorityBackup=true&initialReconnectDelay=1000&useExponentialBackOff=false");
1:7388438:         createClients(5);
1:7388438: 
1:7388438:         assertAllConnectedTo(urls.get(BROKER_A_NAME));
1:db1506a:         assertBrokerInfo(BROKER_A_NAME);
1:7388438: 
1:7388438:         restart(false, BROKER_A_NAME, BROKER_B_NAME);
1:7388438: 
1:7388438:         for (int i = 0; i < 3; i++) {
1:7388438:             restart(true, BROKER_A_NAME, BROKER_B_NAME);
1:7388438:         }
1:7388438: 
1:7388438:         Thread.sleep(5000);
1:7388438: 
1:7388438:         restart(false, BROKER_A_NAME, BROKER_B_NAME);
1:7388438: 
1:7388438:     }
1:7388438: 
1:7388438:     public void testPriorityBackupList() throws Exception {
1:7388438:         createBrokerA();
1:7388438:         createBrokerB();
1:7388438:         getBroker(BROKER_B_NAME).waitUntilStarted();
1:7388438:         Thread.sleep(1000);
1:7388438: 
1:7388438:         setClientUrl("failover:(" + BROKER_A_CLIENT_TC_ADDRESS + "," + BROKER_B_CLIENT_TC_ADDRESS + ")?randomize=false&priorityBackup=true&priorityURIs=tcp://127.0.0.1:61617&initialReconnectDelay=1000&useExponentialBackOff=false");
1:7388438:         createClients(5);
1:7388438: 
1:7388438:         Thread.sleep(3000);
1:7388438: 
1:7388438:         assertAllConnectedTo(urls.get(BROKER_B_NAME));
1:7388438: 
1:7388438:         restart(false, BROKER_B_NAME, BROKER_A_NAME);
1:585a966: 
1:7388438:         for (int i = 0; i < 3; i++) {
1:7388438:             restart(true, BROKER_B_NAME, BROKER_A_NAME);
1:7388438:         }
1:7388438: 
1:7388438:         restart(false, BROKER_B_NAME, BROKER_A_NAME);
1:7388438: 
1:7388438:     }
1:7388438: 
1:585a966:     public void testThreeBrokers() throws Exception {
1:585a966:         // Broker A
1:585a966:         addBroker(BROKER_A_NAME, createBroker(BROKER_A_NAME));
1:585a966:         addTransportConnector(getBroker(BROKER_A_NAME), "openwire", BROKER_A_CLIENT_TC_ADDRESS, false);
1:585a966:         addNetworkBridge(getBroker(BROKER_A_NAME), "A_2_B_Bridge", "static://(" + BROKER_B_CLIENT_TC_ADDRESS + ")?useExponentialBackOff=false", false, null);
1:585a966:         addNetworkBridge(getBroker(BROKER_A_NAME), "A_2_C_Bridge", "static://(" + BROKER_C_CLIENT_TC_ADDRESS + ")?useExponentialBackOff=false", false, null);
1:585a966:         getBroker(BROKER_A_NAME).start();
1:585a966: 
1:585a966:         // Broker B
1:585a966:         addBroker(BROKER_B_NAME, createBroker(BROKER_B_NAME));
1:585a966:         addTransportConnector(getBroker(BROKER_B_NAME), "openwire", BROKER_B_CLIENT_TC_ADDRESS, false);
1:585a966:         addNetworkBridge(getBroker(BROKER_B_NAME), "B_2_A_Bridge", "static://(" + BROKER_A_CLIENT_TC_ADDRESS + ")?useExponentialBackOff=false", false, null);
1:585a966:         addNetworkBridge(getBroker(BROKER_B_NAME), "B_2_C_Bridge", "static://(" + BROKER_C_CLIENT_TC_ADDRESS + ")?useExponentialBackOff=false", false, null);
1:585a966:         getBroker(BROKER_B_NAME).start();
1:585a966: 
1:585a966:         // Broker C
1:585a966:         addBroker(BROKER_C_NAME, createBroker(BROKER_C_NAME));
1:585a966:         addTransportConnector(getBroker(BROKER_C_NAME), "openwire", BROKER_C_CLIENT_TC_ADDRESS, false);
1:585a966:         addNetworkBridge(getBroker(BROKER_C_NAME), "C_2_A_Bridge", "static://(" + BROKER_A_CLIENT_TC_ADDRESS + ")?useExponentialBackOff=false", false, null);
1:585a966:         addNetworkBridge(getBroker(BROKER_C_NAME), "C_2_B_Bridge", "static://(" + BROKER_B_CLIENT_TC_ADDRESS + ")?useExponentialBackOff=false", false, null);
1:585a966:         getBroker(BROKER_C_NAME).start();
1:585a966: 
1:585a966: 
1:585a966:         getBroker(BROKER_C_NAME).waitUntilStarted();
1:585a966:         Thread.sleep(1000);
1:585a966: 
1:9490793:         setClientUrl("failover:(" + BROKER_A_CLIENT_TC_ADDRESS + "," + BROKER_B_CLIENT_TC_ADDRESS + "," + BROKER_C_CLIENT_TC_ADDRESS + ")?randomize=false&priorityBackup=true&initialReconnectDelay=1000&useExponentialBackOff=false");
1:585a966: 
1:585a966:         createClients(5);
1:585a966: 
1:585a966:         assertAllConnectedTo(urls.get(BROKER_A_NAME));
1:585a966: 
1:585a966:         restart(true, BROKER_A_NAME, BROKER_B_NAME);
1:585a966: 
1:585a966:     }
1:7388438: 
1:e777126:     public void testPriorityBackupAndUpdateClients() throws Exception {
1:e777126:         // Broker A
1:e777126:         addBroker(BROKER_A_NAME, createBroker(BROKER_A_NAME));
1:e777126:         addTransportConnector(getBroker(BROKER_A_NAME), "openwire", BROKER_A_CLIENT_TC_ADDRESS, true);
1:e777126:         addNetworkBridge(getBroker(BROKER_A_NAME), "A_2_B_Bridge", "static://(" + BROKER_B_CLIENT_TC_ADDRESS + ")?useExponentialBackOff=false", false, null);
1:e777126:         getBroker(BROKER_A_NAME).start();
1:7388438: 
1:e777126:         // Broker B
1:e777126:         addBroker(BROKER_B_NAME, createBroker(BROKER_B_NAME));
1:e777126:         addTransportConnector(getBroker(BROKER_B_NAME), "openwire", BROKER_B_CLIENT_TC_ADDRESS, true);
1:e777126:         addNetworkBridge(getBroker(BROKER_B_NAME), "B_2_A_Bridge", "static://(" + BROKER_A_CLIENT_TC_ADDRESS + ")?useExponentialBackOff=false", false, null);
1:e777126:         getBroker(BROKER_B_NAME).start();
1:e777126: 
1:e777126:         getBroker(BROKER_B_NAME).waitUntilStarted();
1:e777126:         Thread.sleep(1000);
1:e777126: 
1:e777126:         setClientUrl("failover:(" + BROKER_A_CLIENT_TC_ADDRESS + "," + BROKER_B_CLIENT_TC_ADDRESS + ")?randomize=false&priorityBackup=true&initialReconnectDelay=1000&useExponentialBackOff=false");
1:e777126: 
1:e777126:         LOG.info("Client URI will be: " + getClientUrl());
1:e777126: 
1:e777126:         createClients(5);
7:e777126: 
1:e777126:         // Let's wait a little bit longer just in case it takes a while to realize that the
1:e777126:         // Broker A is the one with higher priority.
1:e777126:         Thread.sleep(5000);
1:e777126: 
1:e777126:         assertAllConnectedTo(urls.get(BROKER_A_NAME));
1:e777126:     }
1:e777126: 
1:7388438:     private void restart(boolean primary, String primaryName, String secondaryName) throws Exception {
1:7388438: 
1:7388438:         Thread.sleep(1000);
1:7388438: 
1:7388438:         if (primary) {
1:7388438:             LOG.info("Stopping " + primaryName);
1:7388438:             stopBroker(primaryName);
1:7388438:         } else {
1:7388438:             LOG.info("Stopping " + secondaryName);
1:7388438:             stopBroker(secondaryName);
1:7388438:         }
1:7388438:         Thread.sleep(5000);
1:7388438: 
1:7388438:         if (primary) {
1:7388438:             assertAllConnectedTo(urls.get(secondaryName));
1:db1506a:             assertBrokerInfo(secondaryName);
1:7388438:         } else {
1:7388438:             assertAllConnectedTo(urls.get(primaryName));
1:db1506a:             assertBrokerInfo(primaryName);
1:7388438:         }
1:7388438: 
1:7388438:         if (primary) {
1:7388438:             LOG.info("Starting " + primaryName);
1:7388438:             createBrokerByName(primaryName);
1:7388438:             getBroker(primaryName).waitUntilStarted();
1:7388438:         } else {
1:7388438:             LOG.info("Starting " + secondaryName);
1:7388438:             createBrokerByName(secondaryName);
1:7388438:             getBroker(secondaryName).waitUntilStarted();
1:7388438:         }
1:7388438: 
1:7388438:         Thread.sleep(5000);
1:7388438: 
1:7388438:         assertAllConnectedTo(urls.get(primaryName));
1:db1506a:         assertBrokerInfo(primaryName);
1:7388438: 
1:7388438:     }
1:7388438: 
1:7388438:     private void createBrokerByName(String name) throws Exception {
1:7388438:         if (name.equals(BROKER_A_NAME)) {
1:7388438:             createBrokerA();
1:7388438:         } else if (name.equals(BROKER_B_NAME)) {
1:7388438:             createBrokerB();
1:7388438:         } else {
1:7388438:             throw new Exception("Unknown broker " + name);
1:7388438:         }
1:7388438:     }
1:7388438: 
1:7388438:     private void createBrokerA() throws Exception {
1:7388438:         if (getBroker(BROKER_A_NAME) == null) {
1:7388438:             addBroker(BROKER_A_NAME, createBroker(BROKER_A_NAME));
1:7388438:             addTransportConnector(getBroker(BROKER_A_NAME), "openwire", BROKER_A_CLIENT_TC_ADDRESS, false);
1:7388438:             addNetworkBridge(getBroker(BROKER_A_NAME), "A_2_B_Bridge", "static://(" + BROKER_B_CLIENT_TC_ADDRESS + ")?useExponentialBackOff=false", false, null);
1:7388438:             getBroker(BROKER_A_NAME).start();
1:7388438:         }
1:7388438:     }
1:7388438: 
1:7388438:     private void createBrokerB() throws Exception {
1:7388438:         if (getBroker(BROKER_B_NAME) == null) {
1:7388438:             addBroker(BROKER_B_NAME, createBroker(BROKER_B_NAME));
1:7388438:             addTransportConnector(getBroker(BROKER_B_NAME), "openwire", BROKER_B_CLIENT_TC_ADDRESS, false);
1:7388438:             addNetworkBridge(getBroker(BROKER_B_NAME), "B_2_A_Bridge", "static://(" + BROKER_A_CLIENT_TC_ADDRESS + ")?useExponentialBackOff=false", false, null);
1:7388438:             getBroker(BROKER_B_NAME).start();
1:7388438:         }
1:7388438:     }
1:7388438: 
1:7388438:     @Override
1:7388438:     protected void tearDown() throws Exception {
1:7388438:         shutdownClients();
1:7388438:         destroyBrokerCluster();
1:7388438:     }
1:7388438: 
1:7388438: }
============================================================================
author:gtully
-------------------------------------------------------------------------------
commit:db1506a
/////////////////////////////////////////////////////////////////////////
1:         assertBrokerInfo(BROKER_A_NAME);
/////////////////////////////////////////////////////////////////////////
1:             assertBrokerInfo(secondaryName);
1:             assertBrokerInfo(primaryName);
/////////////////////////////////////////////////////////////////////////
1:         assertBrokerInfo(primaryName);
author:Bosanac Dejan
-------------------------------------------------------------------------------
commit:9490793
/////////////////////////////////////////////////////////////////////////
1:         setClientUrl("failover:(" + BROKER_A_CLIENT_TC_ADDRESS + "," + BROKER_B_CLIENT_TC_ADDRESS + "," + BROKER_C_CLIENT_TC_ADDRESS + ")?randomize=false&priorityBackup=true&initialReconnectDelay=1000&useExponentialBackOff=false");
commit:585a966
/////////////////////////////////////////////////////////////////////////
0: import org.apache.activemq.broker.BrokerService;
0: import java.util.Map;
/////////////////////////////////////////////////////////////////////////
1:     private static final String BROKER_C_CLIENT_TC_ADDRESS = "tcp://127.0.0.1:61618";
/////////////////////////////////////////////////////////////////////////
1:     private static final String BROKER_C_NAME = "BROKERC";
/////////////////////////////////////////////////////////////////////////
1: 
1:     public void testThreeBrokers() throws Exception {
1:         // Broker A
1:         addBroker(BROKER_A_NAME, createBroker(BROKER_A_NAME));
1:         addTransportConnector(getBroker(BROKER_A_NAME), "openwire", BROKER_A_CLIENT_TC_ADDRESS, false);
1:         addNetworkBridge(getBroker(BROKER_A_NAME), "A_2_B_Bridge", "static://(" + BROKER_B_CLIENT_TC_ADDRESS + ")?useExponentialBackOff=false", false, null);
1:         addNetworkBridge(getBroker(BROKER_A_NAME), "A_2_C_Bridge", "static://(" + BROKER_C_CLIENT_TC_ADDRESS + ")?useExponentialBackOff=false", false, null);
1:         getBroker(BROKER_A_NAME).start();
1: 
1:         // Broker B
1:         addBroker(BROKER_B_NAME, createBroker(BROKER_B_NAME));
1:         addTransportConnector(getBroker(BROKER_B_NAME), "openwire", BROKER_B_CLIENT_TC_ADDRESS, false);
1:         addNetworkBridge(getBroker(BROKER_B_NAME), "B_2_A_Bridge", "static://(" + BROKER_A_CLIENT_TC_ADDRESS + ")?useExponentialBackOff=false", false, null);
1:         addNetworkBridge(getBroker(BROKER_B_NAME), "B_2_C_Bridge", "static://(" + BROKER_C_CLIENT_TC_ADDRESS + ")?useExponentialBackOff=false", false, null);
1:         getBroker(BROKER_B_NAME).start();
1: 
1:         // Broker C
1:         addBroker(BROKER_C_NAME, createBroker(BROKER_C_NAME));
1:         addTransportConnector(getBroker(BROKER_C_NAME), "openwire", BROKER_C_CLIENT_TC_ADDRESS, false);
1:         addNetworkBridge(getBroker(BROKER_C_NAME), "C_2_A_Bridge", "static://(" + BROKER_A_CLIENT_TC_ADDRESS + ")?useExponentialBackOff=false", false, null);
1:         addNetworkBridge(getBroker(BROKER_C_NAME), "C_2_B_Bridge", "static://(" + BROKER_B_CLIENT_TC_ADDRESS + ")?useExponentialBackOff=false", false, null);
1:         getBroker(BROKER_C_NAME).start();
1: 
1: 
1:         getBroker(BROKER_C_NAME).waitUntilStarted();
1:         Thread.sleep(1000);
1: 
0:         setClientUrl("failover:(" + BROKER_A_CLIENT_TC_ADDRESS + "," + BROKER_B_CLIENT_TC_ADDRESS + "," + BROKER_C_CLIENT_TC_ADDRESS + ")?randomize=false&priorityBackup=true&initialReconnectDelay=1000&useExponentialBackOff=false&backupPoolSize=2");
1: 
1:         createClients(5);
1: 
1:         assertAllConnectedTo(urls.get(BROKER_A_NAME));
1: 
1:         restart(true, BROKER_A_NAME, BROKER_B_NAME);
1: 
1:     }
commit:7388438
/////////////////////////////////////////////////////////////////////////
1: /**
1:  * Licensed to the Apache Software Foundation (ASF) under one or more
1:  * contributor license agreements.  See the NOTICE file distributed with
1:  * this work for additional information regarding copyright ownership.
1:  * The ASF licenses this file to You under the Apache License, Version 2.0
1:  * (the "License"); you may not use this file except in compliance with
1:  * the License.  You may obtain a copy of the License at
1:  *
1:  *      http://www.apache.org/licenses/LICENSE-2.0
1:  *
1:  * Unless required by applicable law or agreed to in writing, software
1:  * distributed under the License is distributed on an "AS IS" BASIS,
1:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:  * See the License for the specific language governing permissions and
1:  * limitations under the License.
1:  */
1: package org.apache.activemq.transport.failover;
1: 
1: import org.slf4j.Logger;
1: import org.slf4j.LoggerFactory;
1: 
1: import java.util.HashMap;
1: 
1: public class FailoverPriorityTest extends FailoverClusterTestSupport {
1: 
1:     protected final Logger LOG = LoggerFactory.getLogger(getClass());
1: 
1:     private static final String BROKER_A_CLIENT_TC_ADDRESS = "tcp://127.0.0.1:61616";
1:     private static final String BROKER_B_CLIENT_TC_ADDRESS = "tcp://127.0.0.1:61617";
0:     private HashMap<String,String> urls = new HashMap<String,String>();
1: 
1:     @Override
1:     public void setUp() throws Exception {
1:         super.setUp();
1:         urls.put(BROKER_A_NAME, BROKER_A_CLIENT_TC_ADDRESS);
1:         urls.put(BROKER_B_NAME, BROKER_B_CLIENT_TC_ADDRESS);
1:     }
1: 
1:     private static final String BROKER_A_NAME = "BROKERA";
1:     private static final String BROKER_B_NAME = "BROKERB";
1:     
1:     
1:     public void testPriorityBackup() throws Exception {
1:         createBrokerA();
1:         createBrokerB();
1:         getBroker(BROKER_B_NAME).waitUntilStarted();
1:         Thread.sleep(1000);
1: 
1:         setClientUrl("failover:(" + BROKER_A_CLIENT_TC_ADDRESS + "," + BROKER_B_CLIENT_TC_ADDRESS + ")?randomize=false&priorityBackup=true&initialReconnectDelay=1000&useExponentialBackOff=false");
1:         createClients(5);
1: 
1:         assertAllConnectedTo(urls.get(BROKER_A_NAME));
1: 
1: 
1:         restart(false, BROKER_A_NAME, BROKER_B_NAME);
1:         
1:         for (int i = 0; i < 3; i++) {
1:             restart(true, BROKER_A_NAME, BROKER_B_NAME);
1:         }
1: 
1:         Thread.sleep(5000);
1: 
1:         restart(false, BROKER_A_NAME, BROKER_B_NAME);
1: 
1:     }
1: 
1:     public void testPriorityBackupList() throws Exception {
1:         createBrokerA();
1:         createBrokerB();
1:         getBroker(BROKER_B_NAME).waitUntilStarted();
1:         Thread.sleep(1000);
1: 
1:         setClientUrl("failover:(" + BROKER_A_CLIENT_TC_ADDRESS + "," + BROKER_B_CLIENT_TC_ADDRESS + ")?randomize=false&priorityBackup=true&priorityURIs=tcp://127.0.0.1:61617&initialReconnectDelay=1000&useExponentialBackOff=false");
1:         createClients(5);
1: 
1:         Thread.sleep(3000);
1: 
1:         assertAllConnectedTo(urls.get(BROKER_B_NAME));
1: 
1:         restart(false, BROKER_B_NAME, BROKER_A_NAME);
1: 
1:         for (int i = 0; i < 3; i++) {
1:             restart(true, BROKER_B_NAME, BROKER_A_NAME);
1:         }
1: 
1:         restart(false, BROKER_B_NAME, BROKER_A_NAME);
1: 
1:     }
1:     
1:     private void restart(boolean primary, String primaryName, String secondaryName) throws Exception {
1: 
1:         Thread.sleep(1000);
1: 
1:         if (primary) {
1:             LOG.info("Stopping " + primaryName);
1:             stopBroker(primaryName);
1:         } else {
1:             LOG.info("Stopping " + secondaryName);
1:             stopBroker(secondaryName);
1:         }
1:         Thread.sleep(5000);
1: 
1:         if (primary) {
1:             assertAllConnectedTo(urls.get(secondaryName));
1:         } else {
1:             assertAllConnectedTo(urls.get(primaryName));
1:         }
1: 
1:         if (primary) {
1:             LOG.info("Starting " + primaryName);
1:             createBrokerByName(primaryName);
1:             getBroker(primaryName).waitUntilStarted();
1:         } else {
1:             LOG.info("Starting " + secondaryName);
1:             createBrokerByName(secondaryName);
1:             getBroker(secondaryName).waitUntilStarted();
1:         }
1: 
1:         Thread.sleep(5000);
1: 
1:         assertAllConnectedTo(urls.get(primaryName));
1:         
1:     }
1:     
1:     private void createBrokerByName(String name) throws Exception {
1:         if (name.equals(BROKER_A_NAME)) {
1:             createBrokerA();
1:         } else if (name.equals(BROKER_B_NAME)) {
1:             createBrokerB();
1:         } else {
1:             throw new Exception("Unknown broker " + name);
1:         }
1:     }
1: 
1:     private void createBrokerA() throws Exception {
1:         if (getBroker(BROKER_A_NAME) == null) {
1:             addBroker(BROKER_A_NAME, createBroker(BROKER_A_NAME));
1:             addTransportConnector(getBroker(BROKER_A_NAME), "openwire", BROKER_A_CLIENT_TC_ADDRESS, false);
1:             addNetworkBridge(getBroker(BROKER_A_NAME), "A_2_B_Bridge", "static://(" + BROKER_B_CLIENT_TC_ADDRESS + ")?useExponentialBackOff=false", false, null);
1:             getBroker(BROKER_A_NAME).start();
1:         }
1:     }
1: 
1:     private void createBrokerB() throws Exception {
1:         if (getBroker(BROKER_B_NAME) == null) {
1:             addBroker(BROKER_B_NAME, createBroker(BROKER_B_NAME));
1:             addTransportConnector(getBroker(BROKER_B_NAME), "openwire", BROKER_B_CLIENT_TC_ADDRESS, false);
1:             addNetworkBridge(getBroker(BROKER_B_NAME), "B_2_A_Bridge", "static://(" + BROKER_A_CLIENT_TC_ADDRESS + ")?useExponentialBackOff=false", false, null);
1:             getBroker(BROKER_B_NAME).start();
1:         }
1:     }
1: 
1:     @Override
1:     protected void tearDown() throws Exception {
1:         shutdownClients();
1:         destroyBrokerCluster();
1:     }
1: 
1: }
author:Timothy A. Bish
-------------------------------------------------------------------------------
commit:e777126
/////////////////////////////////////////////////////////////////////////
0: import java.util.HashMap;
1: 
/////////////////////////////////////////////////////////////////////////
1:     private final HashMap<String,String> urls = new HashMap<String,String>();
/////////////////////////////////////////////////////////////////////////
1: 
1: 
/////////////////////////////////////////////////////////////////////////
1: 
/////////////////////////////////////////////////////////////////////////
1: 
1:     public void testPriorityBackupAndUpdateClients() throws Exception {
1:         // Broker A
1:         addBroker(BROKER_A_NAME, createBroker(BROKER_A_NAME));
1:         addTransportConnector(getBroker(BROKER_A_NAME), "openwire", BROKER_A_CLIENT_TC_ADDRESS, true);
1:         addNetworkBridge(getBroker(BROKER_A_NAME), "A_2_B_Bridge", "static://(" + BROKER_B_CLIENT_TC_ADDRESS + ")?useExponentialBackOff=false", false, null);
1:         getBroker(BROKER_A_NAME).start();
1: 
1:         // Broker B
1:         addBroker(BROKER_B_NAME, createBroker(BROKER_B_NAME));
1:         addTransportConnector(getBroker(BROKER_B_NAME), "openwire", BROKER_B_CLIENT_TC_ADDRESS, true);
1:         addNetworkBridge(getBroker(BROKER_B_NAME), "B_2_A_Bridge", "static://(" + BROKER_A_CLIENT_TC_ADDRESS + ")?useExponentialBackOff=false", false, null);
1:         getBroker(BROKER_B_NAME).start();
1: 
1:         getBroker(BROKER_B_NAME).waitUntilStarted();
1:         Thread.sleep(1000);
1: 
1:         setClientUrl("failover:(" + BROKER_A_CLIENT_TC_ADDRESS + "," + BROKER_B_CLIENT_TC_ADDRESS + ")?randomize=false&priorityBackup=true&initialReconnectDelay=1000&useExponentialBackOff=false");
1: 
1:         LOG.info("Client URI will be: " + getClientUrl());
1: 
1:         createClients(5);
1: 
1:         // Let's wait a little bit longer just in case it takes a while to realize that the
1:         // Broker A is the one with higher priority.
1:         Thread.sleep(5000);
1: 
1:         assertAllConnectedTo(urls.get(BROKER_A_NAME));
1:     }
1: 
/////////////////////////////////////////////////////////////////////////
0: 
0: 
commit:ef24cc9
============================================================================