1:54a1520: /**
1:54a1520:  * Licensed to the Apache Software Foundation (ASF) under one or more
1:54a1520:  * contributor license agreements.  See the NOTICE file distributed with
1:54a1520:  * this work for additional information regarding copyright ownership.
1:54a1520:  * The ASF licenses this file to You under the Apache License, Version 2.0
1:54a1520:  * (the "License"); you may not use this file except in compliance with
1:54a1520:  * the License.  You may obtain a copy of the License at
1:54a1520:  *
1:54a1520:  *      http://www.apache.org/licenses/LICENSE-2.0
1:54a1520:  *
1:54a1520:  * Unless required by applicable law or agreed to in writing, software
1:54a1520:  * distributed under the License is distributed on an "AS IS" BASIS,
1:54a1520:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:54a1520:  * See the License for the specific language governing permissions and
1:54a1520:  * limitations under the License.
1:54a1520:  */
1:54a1520: package org.apache.activemq.bugs;
1:54a1520: 
1:54a1520: import junit.framework.TestCase;
1:54a1520: import org.apache.activemq.ActiveMQConnectionFactory;
1:54a1520: import org.apache.activemq.broker.BrokerService;
1:54a1520: import org.apache.activemq.command.ActiveMQQueue;
1:8bf987b: import org.slf4j.Logger;
1:8bf987b: import org.slf4j.LoggerFactory;
1:54a1520: 
1:54a1520: import javax.jms.Connection;
1:54a1520: import javax.jms.ConnectionFactory;
1:54a1520: import javax.jms.DeliveryMode;
1:54a1520: import javax.jms.Destination;
1:54a1520: import javax.jms.JMSException;
1:54a1520: import javax.jms.Message;
1:54a1520: import javax.jms.MessageConsumer;
1:54a1520: import javax.jms.MessageListener;
1:54a1520: import javax.jms.MessageProducer;
1:54a1520: import javax.jms.Session;
1:54a1520: import javax.jms.TextMessage;
1:54a1520: import java.util.concurrent.CountDownLatch;
1:54a1520: import java.util.concurrent.TimeUnit;
1:54a1520: import java.util.concurrent.atomic.AtomicInteger;
1:54a1520: 
1:54a1520: public class AMQ1893Test extends TestCase {
1:54a1520: 
1:8bf987b:     private static final Logger log = LoggerFactory.getLogger(AMQ1893Test.class);
1:54a1520: 
1:54a1520:     static final String QUEUE_NAME = "TEST";
1:54a1520: 
1:54a1520:     static final int MESSAGE_COUNT_OF_ONE_GROUP = 10000;
1:54a1520: 
1:54a1520:     static final int[] PRIORITIES = new int[]{0, 5, 10};
1:54a1520: 
1:54a1520:     static final boolean debug = false;
1:54a1520: 
1:54a1520:     private BrokerService brokerService;
1:54a1520: 
1:54a1520:     private ActiveMQQueue destination;
1:54a1520: 
1:54a1520:     @Override
1:54a1520:     protected void setUp() throws Exception {
1:54a1520:         brokerService = new BrokerService();
1:54a1520:         brokerService.setDeleteAllMessagesOnStartup(true);
1:54a1520:         brokerService.addConnector("tcp://localhost:0");
1:54a1520:         brokerService.start();
1:54a1520:         destination = new ActiveMQQueue(QUEUE_NAME);
2:54a1520:     }
1:54a1520: 
1:54a1520:     @Override
1:54a1520:     protected void tearDown() throws Exception {
1:54a1520:         // Stop any running threads.
1:54a1520:         brokerService.stop();
1:8bf987b:     }
1:54a1520: 
1:54a1520: 
1:54a1520:     public void testProduceConsumeWithSelector() throws Exception {
1:54a1520:         new TestProducer().produceMessages();
1:54a1520:         new TestConsumer().consume();
1:54a1520:     }
1:54a1520: 
1:54a1520:     
1:54a1520:     class TestProducer {
1:54a1520: 
1:54a1520:         public void produceMessages() throws Exception {
1:54a1520:             ConnectionFactory connectionFactory = new ActiveMQConnectionFactory(
1:54a1520:                     brokerService.getTransportConnectors().get(0).getConnectUri().toString()
1:54a1520:             );
1:54a1520:             Connection connection = connectionFactory.createConnection();
1:54a1520:             Session session = connection.createSession(false, Session.AUTO_ACKNOWLEDGE);
1:54a1520:             Destination destination = session.createQueue(QUEUE_NAME);
1:54a1520:             MessageProducer producer = session.createProducer(destination);
1:54a1520:             producer.setDeliveryMode(DeliveryMode.PERSISTENT);
1:54a1520: 
1:54a1520:             long start = System.currentTimeMillis();
1:54a1520: 
1:54a1520:             for (int priority : PRIORITIES) {
1:54a1520: 
1:54a1520:                 String name = null;
1:54a1520:                 if (priority == 10) {
1:54a1520:                     name = "high";
1:54a1520:                 } else if (priority == 5) {
1:54a1520:                     name = "mid";
1:54a1520:                 } else {
1:54a1520:                     name = "low";
1:54a1520:                 }
1:54a1520: 
1:54a1520:                 for (int i = 1; i <= MESSAGE_COUNT_OF_ONE_GROUP; i++) {
1:54a1520: 
1:54a1520:                     TextMessage message = session.createTextMessage(name + "_" + i);
1:54a1520:                     message.setIntProperty("priority", priority);
1:54a1520: 
1:54a1520:                     producer.send(message);
1:54a1520:                 }
1:54a1520:             }
1:54a1520: 
1:54a1520:             long end = System.currentTimeMillis();
1:54a1520: 
1:54a1520:             log.info("sent " + (MESSAGE_COUNT_OF_ONE_GROUP * 3) + " messages in " + (end - start) + " ms");
1:54a1520: 
1:54a1520:             producer.close();
1:54a1520:             session.close();
1:54a1520:             connection.close();
1:54a1520:         }
1:54a1520:     }
1:54a1520: 
1:54a1520:     class TestConsumer {
1:54a1520: 
1:54a1520:         private CountDownLatch finishLatch = new CountDownLatch(1);
1:54a1520: 
1:54a1520: 
1:54a1520: 
1:54a1520:         public void consume() throws Exception {
1:54a1520:             ConnectionFactory connectionFactory = new ActiveMQConnectionFactory(
1:54a1520:                     brokerService.getTransportConnectors().get(0).getConnectUri().toString()
1:54a1520:             );
1:54a1520: 
1:54a1520: 
1:54a1520:             final int totalMessageCount = MESSAGE_COUNT_OF_ONE_GROUP * PRIORITIES.length;
1:54a1520:             final AtomicInteger counter = new AtomicInteger();
1:54a1520:             final MessageListener listener = new MessageListener() {
1:54a1520:                 public void onMessage(Message message) {
1:54a1520: 
1:54a1520:                     if (debug) {
1:54a1520:                         try {
1:54a1520:                             log.info(((TextMessage) message).getText());
1:54a1520:                         } catch (JMSException e) {
1:54a1520:                             e.printStackTrace();
1:54a1520:                         }
1:54a1520:                     }
1:54a1520: 
1:54a1520:                     if (counter.incrementAndGet() == totalMessageCount) {
1:54a1520: 
1:54a1520:                             finishLatch.countDown();
1:54a1520: 
1:54a1520:                     }
1:54a1520:                 }
1:54a1520:             };
1:54a1520: 
1:54a1520:             int consumerCount = PRIORITIES.length;
1:54a1520:             Connection[] connections = new Connection[consumerCount];
1:54a1520:             Session[] sessions = new Session[consumerCount];
1:54a1520:             MessageConsumer[] consumers = new MessageConsumer[consumerCount];
1:54a1520: 
1:54a1520:             for (int i = 0; i < consumerCount; i++) {
1:54a1520:                 String selector = "priority = " + PRIORITIES[i];
1:54a1520: 
1:54a1520:                 connections[i] = connectionFactory.createConnection();
1:54a1520:                 sessions[i] = connections[i].createSession(false, Session.AUTO_ACKNOWLEDGE);
1:54a1520: 
1:54a1520:                 consumers[i] = sessions[i].createConsumer(destination, selector);
1:54a1520:                 consumers[i].setMessageListener(listener);
1:54a1520:             }
1:54a1520: 
1:54a1520:             for (Connection connection : connections) {
1:54a1520:                 connection.start();
1:54a1520:             }
1:54a1520: 
1:54a1520:             log.info("received " + counter.get() + " messages");
1:54a1520: 
1:54a1520:             assertTrue("got all messages in time", finishLatch.await(60, TimeUnit.SECONDS));
1:54a1520: 
1:54a1520:             log.info("received " + counter.get() + " messages");
1:54a1520: 
1:54a1520:             for (MessageConsumer consumer : consumers) {
1:54a1520:                 consumer.close();
1:54a1520:             }
1:54a1520: 
1:54a1520:             for (Session session : sessions) {
1:54a1520:                 session.close();
1:54a1520:             }
1:54a1520: 
1:54a1520:             for (Connection connection : connections) {
1:54a1520:                 connection.close();
1:54a1520:             }
1:54a1520:         }
1:54a1520: 
1:54a1520:     }
1:54a1520: 
1:54a1520: }
============================================================================
author:Timothy A. Bish
-------------------------------------------------------------------------------
commit:ef24cc9
author:Bosanac Dejan
-------------------------------------------------------------------------------
commit:8bf987b
/////////////////////////////////////////////////////////////////////////
1: import org.slf4j.Logger;
1: import org.slf4j.LoggerFactory;
/////////////////////////////////////////////////////////////////////////
1:     private static final Logger log = LoggerFactory.getLogger(AMQ1893Test.class);
/////////////////////////////////////////////////////////////////////////
1: }
author:Gary Tully
-------------------------------------------------------------------------------
commit:54a1520
/////////////////////////////////////////////////////////////////////////
1: /**
1:  * Licensed to the Apache Software Foundation (ASF) under one or more
1:  * contributor license agreements.  See the NOTICE file distributed with
1:  * this work for additional information regarding copyright ownership.
1:  * The ASF licenses this file to You under the Apache License, Version 2.0
1:  * (the "License"); you may not use this file except in compliance with
1:  * the License.  You may obtain a copy of the License at
1:  *
1:  *      http://www.apache.org/licenses/LICENSE-2.0
1:  *
1:  * Unless required by applicable law or agreed to in writing, software
1:  * distributed under the License is distributed on an "AS IS" BASIS,
1:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:  * See the License for the specific language governing permissions and
1:  * limitations under the License.
1:  */
1: package org.apache.activemq.bugs;
1: 
1: import junit.framework.TestCase;
1: import org.apache.activemq.ActiveMQConnectionFactory;
1: import org.apache.activemq.broker.BrokerService;
1: import org.apache.activemq.command.ActiveMQQueue;
0: import org.apache.commons.logging.Log;
0: import org.apache.commons.logging.LogFactory;
1: 
1: import javax.jms.Connection;
1: import javax.jms.ConnectionFactory;
1: import javax.jms.DeliveryMode;
1: import javax.jms.Destination;
1: import javax.jms.JMSException;
1: import javax.jms.Message;
1: import javax.jms.MessageConsumer;
1: import javax.jms.MessageListener;
1: import javax.jms.MessageProducer;
1: import javax.jms.Session;
1: import javax.jms.TextMessage;
1: import java.util.concurrent.CountDownLatch;
1: import java.util.concurrent.TimeUnit;
1: import java.util.concurrent.atomic.AtomicInteger;
1: 
1: public class AMQ1893Test extends TestCase {
1: 
0:     private static final Log log = LogFactory.getLog(AMQ1893Test.class);
1: 
1:     static final String QUEUE_NAME = "TEST";
1: 
1:     static final int MESSAGE_COUNT_OF_ONE_GROUP = 10000;
1: 
1:     static final int[] PRIORITIES = new int[]{0, 5, 10};
1: 
1:     static final boolean debug = false;
1: 
1:     private BrokerService brokerService;
1: 
1:     private ActiveMQQueue destination;
1: 
1:     @Override
1:     protected void setUp() throws Exception {
1:         brokerService = new BrokerService();
1:         brokerService.setDeleteAllMessagesOnStartup(true);
1:         brokerService.addConnector("tcp://localhost:0");
1:         brokerService.start();
1:         destination = new ActiveMQQueue(QUEUE_NAME);
1:     }
1: 
1:     @Override
1:     protected void tearDown() throws Exception {
1:         // Stop any running threads.
1:         brokerService.stop();
1:     }
1: 
1: 
1:     public void testProduceConsumeWithSelector() throws Exception {
1:         new TestProducer().produceMessages();
1:         new TestConsumer().consume();
1:     }
1: 
1:     
1:     class TestProducer {
1: 
1:         public void produceMessages() throws Exception {
1:             ConnectionFactory connectionFactory = new ActiveMQConnectionFactory(
1:                     brokerService.getTransportConnectors().get(0).getConnectUri().toString()
1:             );
1:             Connection connection = connectionFactory.createConnection();
1:             Session session = connection.createSession(false, Session.AUTO_ACKNOWLEDGE);
1:             Destination destination = session.createQueue(QUEUE_NAME);
1:             MessageProducer producer = session.createProducer(destination);
1:             producer.setDeliveryMode(DeliveryMode.PERSISTENT);
1: 
1:             long start = System.currentTimeMillis();
1: 
1:             for (int priority : PRIORITIES) {
1: 
1:                 String name = null;
1:                 if (priority == 10) {
1:                     name = "high";
1:                 } else if (priority == 5) {
1:                     name = "mid";
1:                 } else {
1:                     name = "low";
1:                 }
1: 
1:                 for (int i = 1; i <= MESSAGE_COUNT_OF_ONE_GROUP; i++) {
1: 
1:                     TextMessage message = session.createTextMessage(name + "_" + i);
1:                     message.setIntProperty("priority", priority);
1: 
1:                     producer.send(message);
1:                 }
1:             }
1: 
1:             long end = System.currentTimeMillis();
1: 
1:             log.info("sent " + (MESSAGE_COUNT_OF_ONE_GROUP * 3) + " messages in " + (end - start) + " ms");
1: 
1:             producer.close();
1:             session.close();
1:             connection.close();
1:         }
1:     }
1: 
1:     class TestConsumer {
1: 
1:         private CountDownLatch finishLatch = new CountDownLatch(1);
1: 
1: 
1: 
1:         public void consume() throws Exception {
1:             ConnectionFactory connectionFactory = new ActiveMQConnectionFactory(
1:                     brokerService.getTransportConnectors().get(0).getConnectUri().toString()
1:             );
1: 
1: 
1:             final int totalMessageCount = MESSAGE_COUNT_OF_ONE_GROUP * PRIORITIES.length;
1:             final AtomicInteger counter = new AtomicInteger();
1:             final MessageListener listener = new MessageListener() {
1:                 public void onMessage(Message message) {
1: 
1:                     if (debug) {
1:                         try {
1:                             log.info(((TextMessage) message).getText());
1:                         } catch (JMSException e) {
1:                             e.printStackTrace();
1:                         }
1:                     }
1: 
1:                     if (counter.incrementAndGet() == totalMessageCount) {
1: 
1:                             finishLatch.countDown();
1: 
1:                     }
1:                 }
1:             };
1: 
1:             int consumerCount = PRIORITIES.length;
1:             Connection[] connections = new Connection[consumerCount];
1:             Session[] sessions = new Session[consumerCount];
1:             MessageConsumer[] consumers = new MessageConsumer[consumerCount];
1: 
1:             for (int i = 0; i < consumerCount; i++) {
1:                 String selector = "priority = " + PRIORITIES[i];
1: 
1:                 connections[i] = connectionFactory.createConnection();
1:                 sessions[i] = connections[i].createSession(false, Session.AUTO_ACKNOWLEDGE);
1: 
1:                 consumers[i] = sessions[i].createConsumer(destination, selector);
1:                 consumers[i].setMessageListener(listener);
1:             }
1: 
1:             for (Connection connection : connections) {
1:                 connection.start();
1:             }
1: 
1:             log.info("received " + counter.get() + " messages");
1: 
1:             assertTrue("got all messages in time", finishLatch.await(60, TimeUnit.SECONDS));
1: 
1:             log.info("received " + counter.get() + " messages");
1: 
1:             for (MessageConsumer consumer : consumers) {
1:                 consumer.close();
1:             }
1: 
1:             for (Session session : sessions) {
1:                 session.close();
1:             }
1: 
1:             for (Connection connection : connections) {
1:                 connection.close();
1:             }
1:         }
1: 
1:     }
1: 
1: }
============================================================================