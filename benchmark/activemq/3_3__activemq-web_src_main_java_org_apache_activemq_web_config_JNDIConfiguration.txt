1:b514d3f: /*
1:b514d3f:  * Licensed to the Apache Software Foundation (ASF) under one or more
1:b514d3f:  * contributor license agreements.  See the NOTICE file distributed with
1:b514d3f:  * this work for additional information regarding copyright ownership.
1:b514d3f:  * The ASF licenses this file to You under the Apache License, Version 2.0
1:b514d3f:  * (the "License"); you may not use this file except in compliance with
1:b514d3f:  * the License.  You may obtain a copy of the License at
2:b514d3f:  *
1:b514d3f:  *      http://www.apache.org/licenses/LICENSE-2.0
1:b514d3f:  *
1:b514d3f:  * Unless required by applicable law or agreed to in writing, software
1:b514d3f:  * distributed under the License is distributed on an "AS IS" BASIS,
1:b514d3f:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:b514d3f:  * See the License for the specific language governing permissions and
1:b514d3f:  * limitations under the License.
1:b514d3f:  */
1:b514d3f: package org.apache.activemq.web.config;
1:b514d3f: 
1:b514d3f: import java.util.Collection;
1:b514d3f: 
1:b514d3f: import javax.jms.ConnectionFactory;
1:b514d3f: import javax.management.remote.JMXServiceURL;
1:b514d3f: import javax.naming.InitialContext;
1:b514d3f: import javax.naming.NameNotFoundException;
1:b514d3f: import javax.naming.NamingException;
1:b514d3f: 
1:b514d3f: /**
1:b514d3f:  * Configuration based on JNDI values.
1:b0c2a40:  *
1:348f62e:  * 
1:b514d3f:  */
1:b514d3f: public class JNDIConfiguration extends AbstractConfiguration {
1:b514d3f: 
1:348f62e:     private static final String JNDI_JMS_CONNECTION_FACTORY = "java:comp/env/jms/connectionFactory";
1:348f62e:     private static final String JNDI_JMS_URL = "java:comp/env/jms/url";
1:348f62e:     private static final String JNDI_JMS_USER = "java:comp/env/jms/user";
1:348f62e:     private static final String JNDI_JMS_PASSWORD = "java:comp/env/jms/password";
1:b514d3f: 
1:348f62e:     private static final String JNDI_JMX_URL = "java:comp/env/jmx/url";
1:348f62e:     private static final String JNDI_JMX_USER = "java:comp/env/jmx/user";
1:348f62e:     private static final String JNDI_JMX_PASSWORD = "java:comp/env/jmx/password";
1:b514d3f: 
1:348f62e:     private InitialContext context;
1:b514d3f: 
1:348f62e:     public JNDIConfiguration() throws NamingException {
1:348f62e:         this.context = new InitialContext();
1:348f62e:     }
1:b514d3f: 
1:348f62e:     public JNDIConfiguration(InitialContext context) {
1:348f62e:         this.context = context;
1:348f62e:     }
1:b514d3f: 
1:348f62e:     public ConnectionFactory getConnectionFactory() {
1:348f62e:         try {
1:348f62e:             ConnectionFactory connectionFactory = (ConnectionFactory) this.context
1:348f62e:                     .lookup(JNDI_JMS_CONNECTION_FACTORY);
1:348f62e:             return connectionFactory;
1:348f62e:         } catch (NameNotFoundException e) {
1:348f62e:             // try to find an url
1:348f62e:         } catch (NamingException e) {
1:348f62e:             throw new RuntimeException(e);
1:348f62e:         }
1:b514d3f: 
1:348f62e:         try {
1:348f62e:             String jmsUrl = (String) this.context.lookup(JNDI_JMS_URL);
1:348f62e:             if (jmsUrl == null) {
1:348f62e:                 throw new IllegalArgumentException(
1:348f62e:                         "A JMS-url must be specified (system property "
1:348f62e:                                 + JNDI_JMS_URL);
1:348f62e:             }
1:b514d3f: 
1:348f62e:             String jmsUser = getJndiString(JNDI_JMS_USER);
1:348f62e:             String jmsPassword = getJndiString(JNDI_JMS_PASSWORD);
1:348f62e:             return makeConnectionFactory(jmsUrl, jmsUser, jmsPassword);
1:348f62e:         } catch (NameNotFoundException e) {
1:348f62e:             throw new IllegalArgumentException(
1:348f62e:                     "Neither a ConnectionFactory nor a JMS-url were specified");
1:348f62e:         } catch (NamingException e) {
1:348f62e:             throw new RuntimeException(e);
1:348f62e:         }
1:348f62e:     }
1:b514d3f: 
1:348f62e:     protected String getJndiString(String name) {
1:348f62e:         try {
1:348f62e:             return (String) this.context.lookup(name);
1:348f62e:         } catch (NamingException e) {
1:348f62e:             return null;
1:348f62e:         }
1:348f62e:     }
1:b514d3f: 
1:348f62e:     public Collection<JMXServiceURL> getJmxUrls() {
1:348f62e:         String jmxUrls = getJndiString(JNDI_JMX_URL);
1:348f62e:         return makeJmxUrls(jmxUrls);
1:348f62e:     }
1:b514d3f: 
1:348f62e:     public String getJmxPassword() {
1:348f62e:         return getJndiString(JNDI_JMX_PASSWORD);
1:348f62e:     }
1:b514d3f: 
1:348f62e:     public String getJmxUser() {
1:348f62e:         return getJndiString(JNDI_JMX_USER);
1:348f62e:     }
1:b514d3f: 
1:348f62e: }
============================================================================
author:Hiram R. Chirino
-------------------------------------------------------------------------------
commit:b0c2a40
/////////////////////////////////////////////////////////////////////////
1:  * 
author:Timothy A. Bish
-------------------------------------------------------------------------------
commit:348f62e
/////////////////////////////////////////////////////////////////////////
1:  *
1:     private static final String JNDI_JMS_CONNECTION_FACTORY = "java:comp/env/jms/connectionFactory";
1:     private static final String JNDI_JMS_URL = "java:comp/env/jms/url";
1:     private static final String JNDI_JMS_USER = "java:comp/env/jms/user";
1:     private static final String JNDI_JMS_PASSWORD = "java:comp/env/jms/password";
1:     private static final String JNDI_JMX_URL = "java:comp/env/jmx/url";
1:     private static final String JNDI_JMX_USER = "java:comp/env/jmx/user";
1:     private static final String JNDI_JMX_PASSWORD = "java:comp/env/jmx/password";
1:     private InitialContext context;
1:     public JNDIConfiguration() throws NamingException {
1:         this.context = new InitialContext();
1:     }
1:     public JNDIConfiguration(InitialContext context) {
1:         this.context = context;
1:     }
1:     public ConnectionFactory getConnectionFactory() {
1:         try {
1:             ConnectionFactory connectionFactory = (ConnectionFactory) this.context
1:                     .lookup(JNDI_JMS_CONNECTION_FACTORY);
1:             return connectionFactory;
1:         } catch (NameNotFoundException e) {
1:             // try to find an url
1:         } catch (NamingException e) {
1:             throw new RuntimeException(e);
1:         }
1:         try {
1:             String jmsUrl = (String) this.context.lookup(JNDI_JMS_URL);
1:             if (jmsUrl == null) {
1:                 throw new IllegalArgumentException(
1:                         "A JMS-url must be specified (system property "
1:                                 + JNDI_JMS_URL);
1:             }
1:             String jmsUser = getJndiString(JNDI_JMS_USER);
1:             String jmsPassword = getJndiString(JNDI_JMS_PASSWORD);
1:             return makeConnectionFactory(jmsUrl, jmsUser, jmsPassword);
1:         } catch (NameNotFoundException e) {
1:             throw new IllegalArgumentException(
1:                     "Neither a ConnectionFactory nor a JMS-url were specified");
1:         } catch (NamingException e) {
1:             throw new RuntimeException(e);
1:         }
1:     }
1:     protected String getJndiString(String name) {
1:         try {
1:             return (String) this.context.lookup(name);
1:         } catch (NamingException e) {
1:             return null;
1:         }
1:     }
1:     public Collection<JMXServiceURL> getJmxUrls() {
1:         String jmxUrls = getJndiString(JNDI_JMX_URL);
1:         return makeJmxUrls(jmxUrls);
1:     }
1:     public String getJmxPassword() {
1:         return getJndiString(JNDI_JMX_PASSWORD);
1:     }
1:     public String getJmxUser() {
1:         return getJndiString(JNDI_JMX_USER);
1:     }
1: }
author:Bosanac Dejan
-------------------------------------------------------------------------------
commit:b514d3f
/////////////////////////////////////////////////////////////////////////
1: /*
1:  * Licensed to the Apache Software Foundation (ASF) under one or more
1:  * contributor license agreements.  See the NOTICE file distributed with
1:  * this work for additional information regarding copyright ownership.
1:  * The ASF licenses this file to You under the Apache License, Version 2.0
1:  * (the "License"); you may not use this file except in compliance with
1:  * the License.  You may obtain a copy of the License at
1:  *
1:  *      http://www.apache.org/licenses/LICENSE-2.0
1:  *
1:  * Unless required by applicable law or agreed to in writing, software
1:  * distributed under the License is distributed on an "AS IS" BASIS,
1:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:  * See the License for the specific language governing permissions and
1:  * limitations under the License.
1:  */
1: package org.apache.activemq.web.config;
1: 
1: import java.util.Collection;
1: 
1: import javax.jms.ConnectionFactory;
1: import javax.management.remote.JMXServiceURL;
1: import javax.naming.InitialContext;
1: import javax.naming.NameNotFoundException;
1: import javax.naming.NamingException;
1: 
1: /**
1:  * Configuration based on JNDI values.
1:  * 
0:  * @version $Revision: $
1:  */
1: public class JNDIConfiguration extends AbstractConfiguration {
1: 
0: 	private static final String JNDI_JMS_CONNECTION_FACTORY = "java:comp/env/jms/connectionFactory";
0: 	private static final String JNDI_JMS_URL = "java:comp/env/jms/url";
0: 	private static final String JNDI_JMS_USER = "java:comp/env/jms/user";
0: 	private static final String JNDI_JMS_PASSWORD = "java:comp/env/jms/password";
1: 
0: 	private static final String JNDI_JMX_URL = "java:comp/env/jmx/url";
0: 	private static final String JNDI_JMX_USER = "java:comp/env/jmx/user";
0: 	private static final String JNDI_JMX_PASSWORD = "java:comp/env/jmx/password";
1: 
0: 	private InitialContext context;
1: 
0: 	public JNDIConfiguration() throws NamingException {
0: 		this.context = new InitialContext();
0: 	}
1: 
0: 	public JNDIConfiguration(InitialContext context) {
0: 		this.context = context;
0: 	}
1: 
0: 	public ConnectionFactory getConnectionFactory() {
0: 		try {
0: 			ConnectionFactory connectionFactory = (ConnectionFactory) this.context
0: 					.lookup(JNDI_JMS_CONNECTION_FACTORY);
0: 			return connectionFactory;
0: 		} catch (NameNotFoundException e) {
0: 			// try to find an url
0: 		} catch (NamingException e) {
0: 			throw new RuntimeException(e);
0: 		}
1: 
0: 		try {
0: 			String jmsUrl = (String) this.context.lookup(JNDI_JMS_URL);
0: 			if (jmsUrl == null) {
0: 				throw new IllegalArgumentException(
0: 						"A JMS-url must be specified (system property "
0: 								+ JNDI_JMS_URL);
0: 			}
1: 
0: 			String jmsUser = getJndiString(JNDI_JMS_USER);
0: 			String jmsPassword = getJndiString(JNDI_JMS_PASSWORD);
0: 			return makeConnectionFactory(jmsUrl, jmsUser, jmsPassword);
0: 		} catch (NameNotFoundException e) {
0: 			throw new IllegalArgumentException(
0: 					"Neither a ConnectionFactory nor a JMS-url were specified");
0: 		} catch (NamingException e) {
0: 			throw new RuntimeException(e);
0: 		}
0: 	}
1: 
0: 	protected String getJndiString(String name) {
0: 		try {
0: 			return (String) this.context.lookup(name);
0: 		} catch (NamingException e) {
0: 			return null;
0: 		}
0: 	}
1: 
0: 	public Collection<JMXServiceURL> getJmxUrls() {
0: 		String jmxUrls = getJndiString(JNDI_JMX_URL);
0: 		return makeJmxUrls(jmxUrls);
0: 	}
1: 
0: 	public String getJmxPassword() {
0: 		return getJndiString(JNDI_JMX_USER);
0: 	}
1: 
0: 	public String getJmxUser() {
0: 		return getJndiString(JNDI_JMX_PASSWORD);
0: 	}
1: 
0: }
============================================================================