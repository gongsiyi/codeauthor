1:e1d4780: /**
1:7f883f6:  * Licensed to the Apache Software Foundation (ASF) under one or more
1:7f883f6:  * contributor license agreements.  See the NOTICE file distributed with
1:7f883f6:  * this work for additional information regarding copyright ownership.
1:7f883f6:  * The ASF licenses this file to You under the Apache License, Version 2.0
1:7f883f6:  * (the "License"); you may not use this file except in compliance with
1:7f883f6:  * the License.  You may obtain a copy of the License at
1:7f883f6:  *
1:230a86c:  *      http://www.apache.org/licenses/LICENSE-2.0
1:7f883f6:  *
1:e1d4780:  * Unless required by applicable law or agreed to in writing, software
1:7f883f6:  * distributed under the License is distributed on an "AS IS" BASIS,
1:7f883f6:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:7f883f6:  * See the License for the specific language governing permissions and
1:7f883f6:  * limitations under the License.
1:7f883f6:  */
1:e1d4780: package org.apache.activemq.broker.region.group;
2:e1d4780: 
1:468e697: import java.util.HashMap;
1:74a7a8b: import java.util.Iterator;
1:74a7a8b: import java.util.Map;
1:86cbdfd: import java.util.concurrent.ConcurrentHashMap;
1:e1d4780: 
1:d25c52c: import org.apache.activemq.broker.region.Destination;
1:e1d4780: import org.apache.activemq.command.ConsumerId;
1:e1d4780: 
1:e1d4780: /**
1:e1d4780:  * A simple implementation which tracks every individual GroupID value but
1:e1d4780:  * which can become a memory leak if clients die before they complete a message
1:e1d4780:  * group.
1:0bbc0ac:  * 
1:7f883f6:  * 
1:e1d4780:  */
1:e1d4780: public class SimpleMessageGroupMap implements MessageGroupMap {
1:933eb2f:     private Map<String, ConsumerId> map = new ConcurrentHashMap<String, ConsumerId>();
1:e1d4780:     
1:e1d4780:     public void put(String groupId, ConsumerId consumerId) {
1:e1d4780:         map.put(groupId, consumerId);
1:e1d4780:     }
1:e1d4780: 
1:e1d4780:     public ConsumerId get(String groupId) {
1:933eb2f:         return map.get(groupId);
1:e1d4780:     }
1:e1d4780: 
1:e1d4780:     public ConsumerId removeGroup(String groupId) {
1:933eb2f:         return map.remove(groupId);
1:e1d4780:     }
1:e1d4780: 
1:e1d4780:     public MessageGroupSet removeConsumer(ConsumerId consumerId) {
1:e1d4780:         SimpleMessageGroupSet ownedGroups = new SimpleMessageGroupSet();
1:933eb2f:         for (Iterator<String> iter = map.keySet().iterator(); iter.hasNext();) {
1:933eb2f:             String group = iter.next();
1:933eb2f:             ConsumerId owner = map.get(group);
1:e1d4780:             if (owner.equals(consumerId)) {
1:e1d4780:                 ownedGroups.add(group);
1:e1d4780:                 iter.remove();
1:e1d4780:             }
1:e1d4780:         }
1:e1d4780:         return ownedGroups;
1:e1d4780:     }
1:468e697: 
1:e1d4780: 
1:468e697:     @Override
1:468e697:     public void removeAll(){
1:468e697:         map.clear();
1:468e697:     }
1:468e697: 
1:468e697:     @Override
1:468e697:     public Map<String, String> getGroups() {
1:468e697:         Map<String,String> result = new HashMap<String,String>();
1:468e697:         for (Map.Entry<String,ConsumerId>entry:map.entrySet()){
1:468e697:             result.put(entry.getKey(),entry.getValue().toString());
1:468e697:         }
1:468e697:         return result;
1:468e697:     }
1:468e697: 
1:468e697:     @Override
1:468e697:     public String getType() {
1:468e697:         return "simple";
1:468e697:     }
1:468e697: 
1:d25c52c:     public void setDestination(Destination destination) {}
1:d25c52c: 
1:e1d4780:     public String toString() {
1:e1d4780:         return "message groups: " + map.size();
1:e1d4780:     }
1:e1d4780: 
1:e1d4780: }
============================================================================
author:gtully
-------------------------------------------------------------------------------
commit:d25c52c
/////////////////////////////////////////////////////////////////////////
1: import org.apache.activemq.broker.region.Destination;
/////////////////////////////////////////////////////////////////////////
1:     public void setDestination(Destination destination) {}
1: 
author:rajdavies
-------------------------------------------------------------------------------
commit:468e697
/////////////////////////////////////////////////////////////////////////
1: import java.util.HashMap;
/////////////////////////////////////////////////////////////////////////
1: 
1:     @Override
1:     public void removeAll(){
1:         map.clear();
1:     }
1: 
1:     @Override
1:     public Map<String, String> getGroups() {
1:         Map<String,String> result = new HashMap<String,String>();
1:         for (Map.Entry<String,ConsumerId>entry:map.entrySet()){
1:             result.put(entry.getKey(),entry.getValue().toString());
1:         }
1:         return result;
1:     }
1: 
1:     @Override
1:     public String getType() {
1:         return "simple";
1:     }
1: 
author:Hiram R. Chirino
-------------------------------------------------------------------------------
commit:58aca86
commit:0bbc0ac
/////////////////////////////////////////////////////////////////////////
1:  * 
commit:933eb2f
/////////////////////////////////////////////////////////////////////////
1:     private Map<String, ConsumerId> map = new ConcurrentHashMap<String, ConsumerId>();
1:         return map.get(groupId);
1:         return map.remove(groupId);
1:         for (Iterator<String> iter = map.keySet().iterator(); iter.hasNext();) {
1:             String group = iter.next();
1:             ConsumerId owner = map.get(group);
commit:74a7a8b
/////////////////////////////////////////////////////////////////////////
1: import java.util.Iterator;
1: import java.util.Map;
commit:230a86c
/////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////
1:  *      http://www.apache.org/licenses/LICENSE-2.0
commit:86cbdfd
/////////////////////////////////////////////////////////////////////////
1: import java.util.concurrent.ConcurrentHashMap;
commit:7f883f6
/////////////////////////////////////////////////////////////////////////
1:  *
1:  * Licensed to the Apache Software Foundation (ASF) under one or more
1:  * contributor license agreements.  See the NOTICE file distributed with
1:  * this work for additional information regarding copyright ownership.
1:  * The ASF licenses this file to You under the Apache License, Version 2.0
1:  * (the "License"); you may not use this file except in compliance with
1:  * the License.  You may obtain a copy of the License at
1:  *
1:  *
1:  * distributed under the License is distributed on an "AS IS" BASIS,
1:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:  * See the License for the specific language governing permissions and
1:  * limitations under the License.
1:  */
author:James Strachan
-------------------------------------------------------------------------------
commit:e1d4780
/////////////////////////////////////////////////////////////////////////
1: /**
0:  * 
0:  * Copyright 2005 LogicBlaze, Inc. http://www.logicblaze.com
0:  * 
0:  * Licensed under the Apache License, Version 2.0 (the "License"); 
0:  * you may not use this file except in compliance with the License. 
0:  * You may obtain a copy of the License at 
0:  * 
0:  * http://www.apache.org/licenses/LICENSE-2.0
0:  * 
1:  * Unless required by applicable law or agreed to in writing, software
0:  * distributed under the License is distributed on an "AS IS" BASIS, 
0:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. 
0:  * See the License for the specific language governing permissions and 
0:  * limitations under the License. 
0:  * 
0:  **/
1: package org.apache.activemq.broker.region.group;
1: 
0: import edu.emory.mathcs.backport.java.util.concurrent.ConcurrentHashMap;
1: 
1: import org.apache.activemq.command.ConsumerId;
1: 
0: import java.util.Iterator;
0: import java.util.Map;
1: 
1: /**
1:  * A simple implementation which tracks every individual GroupID value but
1:  * which can become a memory leak if clients die before they complete a message
1:  * group.
0:  * 
0:  * @version $Revision$
1:  */
1: public class SimpleMessageGroupMap implements MessageGroupMap {
0:     private Map map = new ConcurrentHashMap();
1:     
1:     public void put(String groupId, ConsumerId consumerId) {
1:         map.put(groupId, consumerId);
1:     }
1: 
1:     public ConsumerId get(String groupId) {
0:         return (ConsumerId) map.get(groupId);
1:     }
1: 
1:     public ConsumerId removeGroup(String groupId) {
0:         return (ConsumerId) map.remove(groupId);
1:     }
1: 
1:     public MessageGroupSet removeConsumer(ConsumerId consumerId) {
1:         SimpleMessageGroupSet ownedGroups = new SimpleMessageGroupSet();
0:         for (Iterator iter = map.keySet().iterator(); iter.hasNext();) {
0:             String group = (String) iter.next();
0:             ConsumerId owner = (ConsumerId) map.get(group);
1:             if (owner.equals(consumerId)) {
1:                 ownedGroups.add(group);
1:                 iter.remove();
1:             }
1:         }
1:         return ownedGroups;
1:     }
1: 
1:     public String toString() {
1:         return "message groups: " + map.size();
1:     }
1: 
1: }
============================================================================