1:4d6f4d7: /*
1:4d6f4d7:  * Licensed to the Apache Software Foundation (ASF) under one or more
1:4d6f4d7:  * contributor license agreements.  See the NOTICE file distributed with
1:4d6f4d7:  * this work for additional information regarding copyright ownership.
1:4d6f4d7:  * The ASF licenses this file to You under the Apache License, Version 2.0
1:4d6f4d7:  * (the "License"); you may not use this file except in compliance with
1:4d6f4d7:  * the License.  You may obtain a copy of the License at
1:4d6f4d7:  *
1:4d6f4d7:  *      http://www.apache.org/licenses/LICENSE-2.0
1:4d6f4d7:  *
1:4d6f4d7:  * Unless required by applicable law or agreed to in writing, software
1:4d6f4d7:  * distributed under the License is distributed on an "AS IS" BASIS,
1:4d6f4d7:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:4d6f4d7:  * See the License for the specific language governing permissions and
1:4d6f4d7:  * limitations under the License.
1:4d6f4d7:  */
1:4d6f4d7: package org.apache.activemq.transport.amqp.interop;
1:4d6f4d7: 
1:4d6f4d7: import static org.junit.Assert.assertEquals;
1:4d6f4d7: import static org.junit.Assert.assertNotNull;
1:4d6f4d7: 
1:c9c05eb: import java.util.Arrays;
1:c9c05eb: import java.util.Collection;
1:4d6f4d7: import java.util.UUID;
1:4d6f4d7: import java.util.concurrent.TimeUnit;
1:4d6f4d7: 
1:4d6f4d7: import org.apache.activemq.broker.jmx.QueueViewMBean;
1:c9c05eb: import org.apache.activemq.transport.amqp.JMSInteroperabilityTest;
1:4d6f4d7: import org.apache.activemq.transport.amqp.client.AmqpClient;
1:4d6f4d7: import org.apache.activemq.transport.amqp.client.AmqpClientTestSupport;
1:4d6f4d7: import org.apache.activemq.transport.amqp.client.AmqpConnection;
1:4d6f4d7: import org.apache.activemq.transport.amqp.client.AmqpMessage;
1:4d6f4d7: import org.apache.activemq.transport.amqp.client.AmqpReceiver;
1:4d6f4d7: import org.apache.activemq.transport.amqp.client.AmqpSender;
1:4d6f4d7: import org.apache.activemq.transport.amqp.client.AmqpSession;
1:4d6f4d7: import org.apache.qpid.proton.amqp.Binary;
1:4d6f4d7: import org.apache.qpid.proton.amqp.UnsignedLong;
1:4d6f4d7: import org.junit.Test;
1:c9c05eb: import org.junit.runner.RunWith;
1:c9c05eb: import org.junit.runners.Parameterized;
1:c9c05eb: import org.junit.runners.Parameterized.Parameters;
1:c9c05eb: import org.slf4j.Logger;
1:c9c05eb: import org.slf4j.LoggerFactory;
1:4d6f4d7: 
1:4d6f4d7: /**
1:4d6f4d7:  * Tests that the AMQP MessageID value and type are preserved.
1:4d6f4d7:  */
1:c9c05eb: @RunWith(Parameterized.class)
1:4d6f4d7: public class AmqpMessageIdPreservationTest extends AmqpClientTestSupport {
1:4d6f4d7: 
1:c9c05eb:     protected static final Logger LOG = LoggerFactory.getLogger(JMSInteroperabilityTest.class);
1:c9c05eb: 
1:c9c05eb:     private final String transformer;
1:c9c05eb: 
1:c9c05eb:     @Parameters(name="Transformer->{0}")
1:c9c05eb:     public static Collection<Object[]> data() {
1:c9c05eb:         return Arrays.asList(new Object[][] {
1:c9c05eb:                 {"jms"},
1:c9c05eb:                 {"native"},
1:c9c05eb:                 {"raw"},
1:c9c05eb:             });
1:c9c05eb:     }
1:c9c05eb: 
1:c9c05eb:     public AmqpMessageIdPreservationTest(String transformer) {
1:c9c05eb:         this.transformer = transformer;
1:c9c05eb:     }
1:c9c05eb: 
1:c9c05eb:     @Override
1:c9c05eb:     protected String getAmqpTransformer() {
1:c9c05eb:         return transformer;
1:c9c05eb:     }
1:c9c05eb: 
1:4d6f4d7:     @Override
1:4d6f4d7:     protected boolean isPersistent() {
1:4d6f4d7:         return true;
1:4d6f4d7:     }
1:4d6f4d7: 
1:4d6f4d7:     @Test(timeout = 60000)
1:4d6f4d7:     public void testStringMessageIdIsPreserved() throws Exception {
1:4d6f4d7:         doTestMessageIdPreservation("msg-id-string:1");
1:4d6f4d7:     }
1:4d6f4d7: 
1:4d6f4d7:     @Test(timeout = 60000)
1:4d6f4d7:     public void testStringMessageIdIsPreservedAfterRestart() throws Exception {
1:4d6f4d7:         doTestMessageIdPreservationOnBrokerRestart("msg-id-string:1");
1:4d6f4d7:     }
1:4d6f4d7: 
1:4d6f4d7:     @Test(timeout = 60000)
1:4d6f4d7:     public void testUUIDMessageIdIsPreserved() throws Exception {
1:4d6f4d7:         doTestMessageIdPreservation(UUID.randomUUID());
1:4d6f4d7:     }
1:4d6f4d7: 
1:4d6f4d7:     @Test(timeout = 60000)
1:4d6f4d7:     public void testUUIDMessageIdIsPreservedAfterRestart() throws Exception {
1:4d6f4d7:         doTestMessageIdPreservationOnBrokerRestart(UUID.randomUUID());
1:4d6f4d7:     }
1:4d6f4d7: 
1:4d6f4d7:     @Test(timeout = 60000)
1:4d6f4d7:     public void testUnsignedLongMessageIdIsPreserved() throws Exception {
1:4d6f4d7:         doTestMessageIdPreservation(new UnsignedLong(255l));
1:4d6f4d7:     }
1:4d6f4d7: 
1:4d6f4d7:     @Test(timeout = 60000)
1:4d6f4d7:     public void testUnsignedLongMessageIdIsPreservedAfterRestart() throws Exception {
1:4d6f4d7:         doTestMessageIdPreservationOnBrokerRestart(new UnsignedLong(255l));
1:4d6f4d7:     }
1:4d6f4d7: 
1:4d6f4d7:     @Test(timeout = 60000)
1:4d6f4d7:     public void testBinaryLongMessageIdIsPreserved() throws Exception {
1:4d6f4d7:         byte[] payload = new byte[32];
1:4d6f4d7:         for (int i = 0; i < 32; ++i) {
1:4d6f4d7:             payload[i] = (byte) ('a' + i);
1:4d6f4d7:         }
1:4d6f4d7: 
1:4d6f4d7:         doTestMessageIdPreservation(new Binary(payload));
1:4d6f4d7:     }
1:4d6f4d7: 
1:4d6f4d7:     @Test(timeout = 60000)
1:4d6f4d7:     public void testBinaryLongMessageIdIsPreservedAfterRestart() throws Exception {
1:4d6f4d7:         byte[] payload = new byte[32];
1:4d6f4d7:         for (int i = 0; i < 32; ++i) {
1:4d6f4d7:             payload[i] = (byte) ('a' + i);
1:4d6f4d7:         }
1:4d6f4d7: 
1:4d6f4d7:         doTestMessageIdPreservationOnBrokerRestart(new Binary(payload));
1:4d6f4d7:     }
1:4d6f4d7: 
1:4d6f4d7:     @Test(timeout = 60000)
1:4d6f4d7:     public void testStringMessageIdPrefixIsPreserved() throws Exception {
1:4d6f4d7:         doTestMessageIdPreservation("ID:msg-id-string:1");
1:4d6f4d7:     }
1:4d6f4d7: 
1:4d6f4d7:     public void doTestMessageIdPreservation(Object messageId) throws Exception {
1:4d6f4d7:         AmqpClient client = createAmqpClient();
1:1ac8954:         AmqpConnection connection = trackConnection(client.connect());
1:4d6f4d7:         AmqpSession session = connection.createSession();
1:4d6f4d7: 
1:4d6f4d7:         AmqpSender sender = session.createSender("queue://" + getTestName());
1:4d6f4d7: 
1:4d6f4d7:         AmqpMessage message = new AmqpMessage();
1:4d6f4d7: 
1:4d6f4d7:         message.setRawMessageId(messageId);
1:4d6f4d7:         message.setText("Test-Message");
1:4d6f4d7: 
1:4d6f4d7:         sender.send(message);
1:4d6f4d7: 
1:4d6f4d7:         sender.close();
1:4d6f4d7: 
1:4d6f4d7:         QueueViewMBean queue = getProxyToQueue(getTestName());
1:4d6f4d7:         assertEquals(1, queue.getQueueSize());
1:4d6f4d7: 
1:4d6f4d7:         AmqpReceiver receiver = session.createReceiver("queue://" + getTestName());
1:4d6f4d7:         receiver.flow(1);
1:4d6f4d7:         AmqpMessage received = receiver.receive(5, TimeUnit.SECONDS);
1:4d6f4d7:         assertNotNull("Should have got a message", received);
1:4d6f4d7:         assertEquals(received.getRawMessageId().getClass(), messageId.getClass());
1:4d6f4d7:         assertEquals(messageId, received.getRawMessageId());
1:4d6f4d7:         receiver.close();
1:4d6f4d7:         connection.close();
1:4d6f4d7:     }
1:4d6f4d7: 
1:4d6f4d7:     public void doTestMessageIdPreservationOnBrokerRestart(Object messageId) throws Exception {
1:4d6f4d7:         AmqpClient client = createAmqpClient();
1:1ac8954:         AmqpConnection connection = trackConnection(client.connect());
1:4d6f4d7:         AmqpSession session = connection.createSession();
1:4d6f4d7: 
1:4d6f4d7:         AmqpSender sender = session.createSender("queue://" + getTestName());
1:4d6f4d7: 
1:4d6f4d7:         AmqpMessage message = new AmqpMessage();
1:4d6f4d7: 
1:4d6f4d7:         message.setRawMessageId(messageId);
1:4d6f4d7:         message.setText("Test-Message");
1:4d6f4d7:         message.setDurable(true);
1:4d6f4d7: 
1:4d6f4d7:         sender.send(message);
1:4d6f4d7: 
1:4d6f4d7:         sender.close();
1:4d6f4d7:         connection.close();
1:4d6f4d7: 
1:4d6f4d7:         restartBroker();
1:4d6f4d7: 
1:4d6f4d7:         QueueViewMBean queue = getProxyToQueue(getTestName());
1:4d6f4d7:         assertEquals(1, queue.getQueueSize());
1:4d6f4d7: 
1:4d6f4d7:         connection = client.connect();
1:4d6f4d7:         session = connection.createSession();
1:4d6f4d7: 
1:4d6f4d7:         AmqpReceiver receiver = session.createReceiver("queue://" + getTestName());
1:4d6f4d7:         receiver.flow(1);
1:4d6f4d7:         AmqpMessage received = receiver.receive(5, TimeUnit.SECONDS);
1:4d6f4d7:         assertNotNull("Should have got a message", received);
1:4d6f4d7:         assertEquals(received.getRawMessageId().getClass(), messageId.getClass());
1:4d6f4d7:         assertEquals(messageId, received.getRawMessageId());
1:4d6f4d7:         receiver.close();
1:4d6f4d7:         connection.close();
1:4d6f4d7:     }
1:4d6f4d7: }
============================================================================
author:Timothy Bish
-------------------------------------------------------------------------------
commit:1ac8954
/////////////////////////////////////////////////////////////////////////
1:         AmqpConnection connection = trackConnection(client.connect());
/////////////////////////////////////////////////////////////////////////
1:         AmqpConnection connection = trackConnection(client.connect());
commit:c9c05eb
/////////////////////////////////////////////////////////////////////////
1: import java.util.Arrays;
1: import java.util.Collection;
1: import org.apache.activemq.transport.amqp.JMSInteroperabilityTest;
/////////////////////////////////////////////////////////////////////////
1: import org.junit.runner.RunWith;
1: import org.junit.runners.Parameterized;
1: import org.junit.runners.Parameterized.Parameters;
1: import org.slf4j.Logger;
1: import org.slf4j.LoggerFactory;
1: @RunWith(Parameterized.class)
1:     protected static final Logger LOG = LoggerFactory.getLogger(JMSInteroperabilityTest.class);
1: 
1:     private final String transformer;
1: 
1:     @Parameters(name="Transformer->{0}")
1:     public static Collection<Object[]> data() {
1:         return Arrays.asList(new Object[][] {
1:                 {"jms"},
1:                 {"native"},
1:                 {"raw"},
1:             });
1:     }
1: 
1:     public AmqpMessageIdPreservationTest(String transformer) {
1:         this.transformer = transformer;
1:     }
1: 
1:     @Override
1:     protected String getAmqpTransformer() {
1:         return transformer;
1:     }
1: 
commit:4d6f4d7
/////////////////////////////////////////////////////////////////////////
1: /*
1:  * Licensed to the Apache Software Foundation (ASF) under one or more
1:  * contributor license agreements.  See the NOTICE file distributed with
1:  * this work for additional information regarding copyright ownership.
1:  * The ASF licenses this file to You under the Apache License, Version 2.0
1:  * (the "License"); you may not use this file except in compliance with
1:  * the License.  You may obtain a copy of the License at
1:  *
1:  *      http://www.apache.org/licenses/LICENSE-2.0
1:  *
1:  * Unless required by applicable law or agreed to in writing, software
1:  * distributed under the License is distributed on an "AS IS" BASIS,
1:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:  * See the License for the specific language governing permissions and
1:  * limitations under the License.
1:  */
1: package org.apache.activemq.transport.amqp.interop;
1: 
1: import static org.junit.Assert.assertEquals;
1: import static org.junit.Assert.assertNotNull;
1: 
1: import java.util.UUID;
1: import java.util.concurrent.TimeUnit;
1: 
1: import org.apache.activemq.broker.jmx.QueueViewMBean;
1: import org.apache.activemq.transport.amqp.client.AmqpClient;
1: import org.apache.activemq.transport.amqp.client.AmqpClientTestSupport;
1: import org.apache.activemq.transport.amqp.client.AmqpConnection;
1: import org.apache.activemq.transport.amqp.client.AmqpMessage;
1: import org.apache.activemq.transport.amqp.client.AmqpReceiver;
1: import org.apache.activemq.transport.amqp.client.AmqpSender;
1: import org.apache.activemq.transport.amqp.client.AmqpSession;
1: import org.apache.qpid.proton.amqp.Binary;
1: import org.apache.qpid.proton.amqp.UnsignedLong;
1: import org.junit.Test;
1: 
1: /**
1:  * Tests that the AMQP MessageID value and type are preserved.
1:  */
1: public class AmqpMessageIdPreservationTest extends AmqpClientTestSupport {
1: 
1:     @Override
1:     protected boolean isPersistent() {
1:         return true;
1:     }
1: 
1:     @Test(timeout = 60000)
1:     public void testStringMessageIdIsPreserved() throws Exception {
1:         doTestMessageIdPreservation("msg-id-string:1");
1:     }
1: 
1:     @Test(timeout = 60000)
1:     public void testStringMessageIdIsPreservedAfterRestart() throws Exception {
1:         doTestMessageIdPreservationOnBrokerRestart("msg-id-string:1");
1:     }
1: 
1:     @Test(timeout = 60000)
1:     public void testUUIDMessageIdIsPreserved() throws Exception {
1:         doTestMessageIdPreservation(UUID.randomUUID());
1:     }
1: 
1:     @Test(timeout = 60000)
1:     public void testUUIDMessageIdIsPreservedAfterRestart() throws Exception {
1:         doTestMessageIdPreservationOnBrokerRestart(UUID.randomUUID());
1:     }
1: 
1:     @Test(timeout = 60000)
1:     public void testUnsignedLongMessageIdIsPreserved() throws Exception {
1:         doTestMessageIdPreservation(new UnsignedLong(255l));
1:     }
1: 
1:     @Test(timeout = 60000)
1:     public void testUnsignedLongMessageIdIsPreservedAfterRestart() throws Exception {
1:         doTestMessageIdPreservationOnBrokerRestart(new UnsignedLong(255l));
1:     }
1: 
1:     @Test(timeout = 60000)
1:     public void testBinaryLongMessageIdIsPreserved() throws Exception {
1:         byte[] payload = new byte[32];
1:         for (int i = 0; i < 32; ++i) {
1:             payload[i] = (byte) ('a' + i);
1:         }
1: 
1:         doTestMessageIdPreservation(new Binary(payload));
1:     }
1: 
1:     @Test(timeout = 60000)
1:     public void testBinaryLongMessageIdIsPreservedAfterRestart() throws Exception {
1:         byte[] payload = new byte[32];
1:         for (int i = 0; i < 32; ++i) {
1:             payload[i] = (byte) ('a' + i);
1:         }
1: 
1:         doTestMessageIdPreservationOnBrokerRestart(new Binary(payload));
1:     }
1: 
1:     @Test(timeout = 60000)
1:     public void testStringMessageIdPrefixIsPreserved() throws Exception {
1:         doTestMessageIdPreservation("ID:msg-id-string:1");
1:     }
1: 
1:     public void doTestMessageIdPreservation(Object messageId) throws Exception {
1:         AmqpClient client = createAmqpClient();
0:         AmqpConnection connection = client.connect();
1:         AmqpSession session = connection.createSession();
1: 
1:         AmqpSender sender = session.createSender("queue://" + getTestName());
1: 
1:         AmqpMessage message = new AmqpMessage();
1: 
1:         message.setRawMessageId(messageId);
1:         message.setText("Test-Message");
1: 
1:         sender.send(message);
1: 
1:         sender.close();
1: 
1:         QueueViewMBean queue = getProxyToQueue(getTestName());
1:         assertEquals(1, queue.getQueueSize());
1: 
1:         AmqpReceiver receiver = session.createReceiver("queue://" + getTestName());
1:         receiver.flow(1);
1:         AmqpMessage received = receiver.receive(5, TimeUnit.SECONDS);
1:         assertNotNull("Should have got a message", received);
1:         assertEquals(received.getRawMessageId().getClass(), messageId.getClass());
1:         assertEquals(messageId, received.getRawMessageId());
1:         receiver.close();
1:         connection.close();
1:     }
1: 
1:     public void doTestMessageIdPreservationOnBrokerRestart(Object messageId) throws Exception {
1:         AmqpClient client = createAmqpClient();
0:         AmqpConnection connection = client.connect();
1:         AmqpSession session = connection.createSession();
1: 
1:         AmqpSender sender = session.createSender("queue://" + getTestName());
1: 
1:         AmqpMessage message = new AmqpMessage();
1: 
1:         message.setRawMessageId(messageId);
1:         message.setText("Test-Message");
1:         message.setDurable(true);
1: 
1:         sender.send(message);
1: 
1:         sender.close();
1:         connection.close();
1: 
1:         restartBroker();
1: 
1:         QueueViewMBean queue = getProxyToQueue(getTestName());
1:         assertEquals(1, queue.getQueueSize());
1: 
1:         connection = client.connect();
1:         session = connection.createSession();
1: 
1:         AmqpReceiver receiver = session.createReceiver("queue://" + getTestName());
1:         receiver.flow(1);
1:         AmqpMessage received = receiver.receive(5, TimeUnit.SECONDS);
1:         assertNotNull("Should have got a message", received);
1:         assertEquals(received.getRawMessageId().getClass(), messageId.getClass());
1:         assertEquals(messageId, received.getRawMessageId());
1:         receiver.close();
1:         connection.close();
1:     }
1: }
============================================================================