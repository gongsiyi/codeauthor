1:fc00993: /**
1:fc00993:  * Licensed to the Apache Software Foundation (ASF) under one or more
1:fc00993:  * contributor license agreements.  See the NOTICE file distributed with
1:fc00993:  * this work for additional information regarding copyright ownership.
1:fc00993:  * The ASF licenses this file to You under the Apache License, Version 2.0
1:fc00993:  * (the "License"); you may not use this file except in compliance with
1:fc00993:  * the License.  You may obtain a copy of the License at
1:fc00993:  *
1:fc00993:  *      http://www.apache.org/licenses/LICENSE-2.0
1:fc00993:  *
1:fc00993:  * Unless required by applicable law or agreed to in writing, software
1:fc00993:  * distributed under the License is distributed on an "AS IS" BASIS,
1:fc00993:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:fc00993:  * See the License for the specific language governing permissions and
1:fc00993:  * limitations under the License.
1:fc00993:  */
1:f8485e3: package org.apache.activemq.transport.stomp;
1:74a7a8b: 
1:1c26408: import java.io.IOException;
1:1c26408: import java.util.HashMap;
1:74a7a8b: import java.util.Map;
1:74a7a8b: 
1:436f892: import javax.jms.Destination;
1:436f892: import javax.jms.JMSException;
1:436f892: 
1:436f892: import org.apache.activemq.command.ActiveMQDestination;
1:436f892: import org.apache.activemq.command.ActiveMQMessage;
1:436f892: 
1:f8485e3: /**
1:533cedc:  * Implementations of this interface are used to map back and forth from STOMP
1:f812e34:  * to ActiveMQ. There are several standard mappings which are semantically the
1:f812e34:  * same, the inner class, Helper, provides functions to copy those properties
1:f812e34:  * from one to the other
1:f8485e3:  */
1:f812e34: public interface FrameTranslator {
1:533cedc: 
1:04a6379:     ActiveMQMessage convertFrame(ProtocolConverter converter, StompFrame frame) throws JMSException, ProtocolException;
6:f8485e3: 
1:04a6379:     StompFrame convertMessage(ProtocolConverter converter, ActiveMQMessage message) throws IOException, JMSException;
1:f8485e3: 
1:04a6379:     String convertDestination(ProtocolConverter converter, Destination d);
1:f8485e3: 
1:1c26408:     ActiveMQDestination convertDestination(ProtocolConverter converter, String name, boolean forceFallback) throws ProtocolException;
1:f8485e3: 
1:f8485e3:     /**
1:f8485e3:      * Helper class which holds commonly needed functions used when implementing
1:f8485e3:      * FrameTranslators
1:f8485e3:      */
1:fc00993:     static final class Helper {
1:fc00993: 
1:fc00993:         private Helper() {
1:fc00993:         }
1:fc00993: 
1:04a6379:         public static void copyStandardHeadersFromMessageToFrame(ProtocolConverter converter, ActiveMQMessage message, StompFrame command, FrameTranslator ft) throws IOException {
1:ecf89a6:             final Map<String, String> headers = command.getHeaders();
1:04a6379:             headers.put(Stomp.Headers.Message.DESTINATION, ft.convertDestination(converter, message.getDestination()));
1:f8485e3:             headers.put(Stomp.Headers.Message.MESSAGE_ID, message.getJMSMessageID());
1:600c7c2: 
1:f8485e3:             if (message.getJMSCorrelationID() != null) {
1:f8485e3:                 headers.put(Stomp.Headers.Message.CORRELATION_ID, message.getJMSCorrelationID());
1:f8485e3:             }
1:f812e34:             headers.put(Stomp.Headers.Message.EXPIRATION_TIME, "" + message.getJMSExpiration());
1:f8485e3: 
1:f8485e3:             if (message.getJMSRedelivered()) {
1:f8485e3:                 headers.put(Stomp.Headers.Message.REDELIVERED, "true");
1:f8485e3:             }
1:f812e34:             headers.put(Stomp.Headers.Message.PRORITY, "" + message.getJMSPriority());
1:f8485e3: 
1:f8485e3:             if (message.getJMSReplyTo() != null) {
1:04a6379:                 headers.put(Stomp.Headers.Message.REPLY_TO, ft.convertDestination(converter, message.getJMSReplyTo()));
1:f8485e3:             }
1:f812e34:             headers.put(Stomp.Headers.Message.TIMESTAMP, "" + message.getJMSTimestamp());
1:f8485e3: 
1:f8485e3:             if (message.getJMSType() != null) {
1:f8485e3:                 headers.put(Stomp.Headers.Message.TYPE, message.getJMSType());
1:f8485e3:             }
1:f8485e3: 
1:caabb6c:             if (message.getUserID() != null) {
1:caabb6c:                 headers.put(Stomp.Headers.Message.USERID, message.getUserID());
1:caabb6c:             }
1:caabb6c: 
1:600c7c2:             if (message.getOriginalDestination() != null) {
1:600c7c2:                 headers.put(Stomp.Headers.Message.ORIGINAL_DESTINATION, ft.convertDestination(converter, message.getOriginalDestination()));
1:600c7c2:             }
1:14722f8: 
1:82df23e:             if (message.isPersistent()) {
1:82df23e:                 headers.put(Stomp.Headers.Message.PERSISTENT, Stomp.TRUE);
1:82df23e:             }
1:82df23e: 
1:f8485e3:             // now lets add all the message headers
1:933eb2f:             final Map<String, Object> properties = message.getProperties();
1:f8485e3:             if (properties != null) {
1:933eb2f:                 for (Map.Entry<String, Object> prop : properties.entrySet()) {
1:933eb2f:                     headers.put(prop.getKey(), "" + prop.getValue());
1:933eb2f:                 }
1:f8485e3:             }
1:f8485e3:         }
1:f8485e3: 
1:04a6379:         public static void copyStandardHeadersFromFrameToMessage(ProtocolConverter converter, StompFrame command, ActiveMQMessage msg, FrameTranslator ft) throws ProtocolException, JMSException {
1:ecf89a6:             final Map<String, String> headers = new HashMap<String, String>(command.getHeaders());
1:ecf89a6:             final String destination = headers.remove(Stomp.Headers.Send.DESTINATION);
1:1c26408:             msg.setDestination(ft.convertDestination(converter, destination, true));
1:f8485e3: 
1:f8485e3:             // the standard JMS headers
1:ecf89a6:             msg.setJMSCorrelationID(headers.remove(Stomp.Headers.Send.CORRELATION_ID));
1:f8485e3: 
1:f8485e3:             Object o = headers.remove(Stomp.Headers.Send.EXPIRATION_TIME);
1:f8485e3:             if (o != null) {
1:f812e34:                 msg.setJMSExpiration(Long.parseLong((String)o));
1:f8485e3:             }
1:f8485e3: 
1:436f892:             o = headers.remove(Stomp.Headers.Message.TIMESTAMP);
1:436f892:             if (o != null) {
1:436f892:                 msg.setJMSTimestamp(Long.parseLong((String)o));
1:436f892:             } else {
1:436f892:                 msg.setJMSTimestamp(System.currentTimeMillis());
1:436f892:             }
1:436f892: 
1:f8485e3:             o = headers.remove(Stomp.Headers.Send.PRIORITY);
1:f8485e3:             if (o != null) {
1:f812e34:                 msg.setJMSPriority(Integer.parseInt((String)o));
1:14722f8:             } else {
1:14722f8:                 msg.setJMSPriority(javax.jms.Message.DEFAULT_PRIORITY);
1:f8485e3:             }
1:f8485e3: 
1:f8485e3:             o = headers.remove(Stomp.Headers.Send.TYPE);
1:f8485e3:             if (o != null) {
1:f812e34:                 msg.setJMSType((String)o);
1:f8485e3:             }
1:f8485e3: 
1:f8485e3:             o = headers.remove(Stomp.Headers.Send.REPLY_TO);
1:f8485e3:             if (o != null) {
1:1c26408:                 try {
1:1c26408:                     ActiveMQDestination dest = ft.convertDestination(converter, (String)o, false);
1:1c26408:                     msg.setJMSReplyTo(dest);
1:1c26408:                 } catch (ProtocolException pe) {
1:1c26408:                     msg.setStringProperty("reply-to", (String)o);
1:1c26408:                 }
1:f8485e3:             }
1:f8485e3: 
1:f8485e3:             o = headers.remove(Stomp.Headers.Send.PERSISTENT);
1:f8485e3:             if (o != null) {
1:f8485e3:                 msg.setPersistent("true".equals(o));
1:f8485e3:             }
1:24f73a5: 
1:533cedc:             // STOMP specific headers
1:681cf04:             headers.remove(Stomp.Headers.RECEIPT_REQUESTED);
1:681cf04: 
1:681cf04:             // Since we take the rest of the header and put them in properties which could then
1:681cf04:             // be sent back to a STOMP consumer we need to sanitize anything which could be in
1:681cf04:             // Stomp.Headers.Message and might get passed through to the consumer
1:681cf04:             headers.remove(Stomp.Headers.Message.MESSAGE_ID);
1:681cf04:             headers.remove(Stomp.Headers.Message.REDELIVERED);
1:681cf04:             headers.remove(Stomp.Headers.Message.SUBSCRIPTION);
1:681cf04:             headers.remove(Stomp.Headers.Message.USERID);
1:681cf04: 
1:f8485e3:             // now the general headers
1:f8485e3:             msg.setProperties(headers);
1:f8485e3:         }
1:f8485e3:     }
1:f8485e3: }
============================================================================
author:Timothy Bish
-------------------------------------------------------------------------------
commit:533cedc
/////////////////////////////////////////////////////////////////////////
1:  * Implementations of this interface are used to map back and forth from STOMP
1: 
/////////////////////////////////////////////////////////////////////////
1:             // STOMP specific headers
author:Timothy A. Bish
-------------------------------------------------------------------------------
commit:436f892
/////////////////////////////////////////////////////////////////////////
1: import javax.jms.Destination;
1: import javax.jms.JMSException;
1: 
1: import org.apache.activemq.command.ActiveMQDestination;
1: import org.apache.activemq.command.ActiveMQMessage;
1: 
/////////////////////////////////////////////////////////////////////////
1:             o = headers.remove(Stomp.Headers.Message.TIMESTAMP);
1:             if (o != null) {
1:                 msg.setJMSTimestamp(Long.parseLong((String)o));
1:             } else {
1:                 msg.setJMSTimestamp(System.currentTimeMillis());
1:             }
1: 
/////////////////////////////////////////////////////////////////////////
commit:82df23e
/////////////////////////////////////////////////////////////////////////
1:             if (message.isPersistent()) {
1:                 headers.put(Stomp.Headers.Message.PERSISTENT, Stomp.TRUE);
1:             }
1: 
commit:0885c60
/////////////////////////////////////////////////////////////////////////
commit:14722f8
/////////////////////////////////////////////////////////////////////////
0: import javax.jms.MessageListener;
0: import javax.jms.MessageProducer;
0: import org.apache.activemq.command.Message;
/////////////////////////////////////////////////////////////////////////
1: 
/////////////////////////////////////////////////////////////////////////
1:             } else {
1:                 msg.setJMSPriority(javax.jms.Message.DEFAULT_PRIORITY);
commit:24f73a5
/////////////////////////////////////////////////////////////////////////
0:             // Stomp specific headers
0:             o = headers.remove(Stomp.Headers.RECEIPT_REQUESTED);
1:             
commit:caabb6c
/////////////////////////////////////////////////////////////////////////
1:             if (message.getUserID() != null) {
1:                 headers.put(Stomp.Headers.Message.USERID, message.getUserID());
1:             }
1:             
author:Hiram R. Chirino
-------------------------------------------------------------------------------
commit:c5cf038
commit:04a6379
/////////////////////////////////////////////////////////////////////////
1:     ActiveMQMessage convertFrame(ProtocolConverter converter, StompFrame frame) throws JMSException, ProtocolException;
1:     StompFrame convertMessage(ProtocolConverter converter, ActiveMQMessage message) throws IOException, JMSException;
1:     String convertDestination(ProtocolConverter converter, Destination d);
0:     ActiveMQDestination convertDestination(ProtocolConverter converter, String name) throws ProtocolException;
/////////////////////////////////////////////////////////////////////////
1:         public static void copyStandardHeadersFromMessageToFrame(ProtocolConverter converter, ActiveMQMessage message, StompFrame command, FrameTranslator ft) throws IOException {
1:             headers.put(Stomp.Headers.Message.DESTINATION, ft.convertDestination(converter, message.getDestination()));
/////////////////////////////////////////////////////////////////////////
1:                 headers.put(Stomp.Headers.Message.REPLY_TO, ft.convertDestination(converter, message.getJMSReplyTo()));
/////////////////////////////////////////////////////////////////////////
1:         public static void copyStandardHeadersFromFrameToMessage(ProtocolConverter converter, StompFrame command, ActiveMQMessage msg, FrameTranslator ft) throws ProtocolException, JMSException {
0:             msg.setDestination(ft.convertDestination(converter, destination));
/////////////////////////////////////////////////////////////////////////
0:                 msg.setJMSReplyTo(ft.convertDestination(converter, (String)o));
commit:933eb2f
/////////////////////////////////////////////////////////////////////////
1:             final Map<String, Object> properties = message.getProperties();
1:                 for (Map.Entry<String, Object> prop : properties.entrySet()) {
1:                     headers.put(prop.getKey(), "" + prop.getValue());
1:                 }
commit:ecf89a6
/////////////////////////////////////////////////////////////////////////
1:             final Map<String, String> headers = command.getHeaders();
/////////////////////////////////////////////////////////////////////////
1:             final Map<String, String> headers = new HashMap<String, String>(command.getHeaders());
1:             final String destination = headers.remove(Stomp.Headers.Send.DESTINATION);
1:             msg.setJMSCorrelationID(headers.remove(Stomp.Headers.Send.CORRELATION_ID));
commit:fc00993
/////////////////////////////////////////////////////////////////////////
1: /**
1:  * Licensed to the Apache Software Foundation (ASF) under one or more
1:  * contributor license agreements.  See the NOTICE file distributed with
1:  * this work for additional information regarding copyright ownership.
1:  * The ASF licenses this file to You under the Apache License, Version 2.0
1:  * (the "License"); you may not use this file except in compliance with
1:  * the License.  You may obtain a copy of the License at
1:  *
1:  *      http://www.apache.org/licenses/LICENSE-2.0
1:  *
1:  * Unless required by applicable law or agreed to in writing, software
1:  * distributed under the License is distributed on an "AS IS" BASIS,
1:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:  * See the License for the specific language governing permissions and
1:  * limitations under the License.
1:  */
/////////////////////////////////////////////////////////////////////////
0:     ActiveMQMessage convertFrame(StompFrame frame) throws JMSException, ProtocolException;
0:     StompFrame convertMessage(ActiveMQMessage message) throws IOException, JMSException;
0:     String convertDestination(Destination d);
0:     ActiveMQDestination convertDestination(String name) throws ProtocolException;
1:     static final class Helper {
1: 
1:         private Helper() {
1:         }
1: 
commit:74a7a8b
/////////////////////////////////////////////////////////////////////////
1: import java.util.Map;
1: 
0: import javax.jms.Destination;
0: import javax.jms.JMSException;
1: 
0: import org.apache.activemq.command.ActiveMQDestination;
0: import org.apache.activemq.command.ActiveMQMessage;
commit:f812e34
/////////////////////////////////////////////////////////////////////////
0:  * Implementations of this interface are used to map back and forth from Stomp
1:  * to ActiveMQ. There are several standard mappings which are semantically the
1:  * same, the inner class, Helper, provides functions to copy those properties
1:  * from one to the other
1: public interface FrameTranslator {
/////////////////////////////////////////////////////////////////////////
0:     public final static class Helper {
0:         public static void copyStandardHeadersFromMessageToFrame(ActiveMQMessage message, StompFrame command, FrameTranslator ft) throws IOException {
/////////////////////////////////////////////////////////////////////////
1:             headers.put(Stomp.Headers.Message.EXPIRATION_TIME, "" + message.getJMSExpiration());
1:             headers.put(Stomp.Headers.Message.PRORITY, "" + message.getJMSPriority());
1:             headers.put(Stomp.Headers.Message.TIMESTAMP, "" + message.getJMSTimestamp());
/////////////////////////////////////////////////////////////////////////
0:         public static void copyStandardHeadersFromFrameToMessage(StompFrame command, ActiveMQMessage msg, FrameTranslator ft) throws ProtocolException, JMSException {
0:             final String destination = (String)headers.remove(Stomp.Headers.Send.DESTINATION);
0:             msg.setDestination(ft.convertDestination(destination));
0:             msg.setJMSCorrelationID((String)headers.remove(Stomp.Headers.Send.CORRELATION_ID));
1:                 msg.setJMSExpiration(Long.parseLong((String)o));
1:                 msg.setJMSPriority(Integer.parseInt((String)o));
1:                 msg.setJMSType((String)o);
0:                 msg.setJMSReplyTo(ft.convertDestination((String)o));
author:Bosanac Dejan
-------------------------------------------------------------------------------
commit:1c26408
/////////////////////////////////////////////////////////////////////////
0: import org.apache.activemq.command.ActiveMQDestination;
0: import org.apache.activemq.command.ActiveMQMessage;
1: import java.io.IOException;
1: import java.util.HashMap;
0: import java.util.Map;
/////////////////////////////////////////////////////////////////////////
1:     ActiveMQDestination convertDestination(ProtocolConverter converter, String name, boolean forceFallback) throws ProtocolException;
/////////////////////////////////////////////////////////////////////////
1:             msg.setDestination(ft.convertDestination(converter, destination, true));
/////////////////////////////////////////////////////////////////////////
1:                 try {
1:                     ActiveMQDestination dest = ft.convertDestination(converter, (String)o, false);
1:                     msg.setJMSReplyTo(dest);
1:                 } catch (ProtocolException pe) {
1:                     msg.setStringProperty("reply-to", (String)o);
1:                 }
commit:600c7c2
/////////////////////////////////////////////////////////////////////////
1: 
1:             if (message.getOriginalDestination() != null) {
1:                 headers.put(Stomp.Headers.Message.ORIGINAL_DESTINATION, ft.convertDestination(converter, message.getOriginalDestination()));
1:             }
commit:681cf04
/////////////////////////////////////////////////////////////////////////
1:             headers.remove(Stomp.Headers.RECEIPT_REQUESTED);
1: 
1:             // Since we take the rest of the header and put them in properties which could then
1:             // be sent back to a STOMP consumer we need to sanitize anything which could be in
1:             // Stomp.Headers.Message and might get passed through to the consumer
1:             headers.remove(Stomp.Headers.Message.MESSAGE_ID);
0:             headers.remove(Stomp.Headers.Message.TIMESTAMP);
1:             headers.remove(Stomp.Headers.Message.REDELIVERED);
1:             headers.remove(Stomp.Headers.Message.SUBSCRIPTION);
1:             headers.remove(Stomp.Headers.Message.USERID);
1: 
author:Brian McCallister
-------------------------------------------------------------------------------
commit:f8485e3
/////////////////////////////////////////////////////////////////////////
1: package org.apache.activemq.transport.stomp;
1: 
0: import org.apache.activemq.command.ActiveMQMessage;
0: import org.apache.activemq.command.ActiveMQDestination;
1: 
0: import javax.jms.JMSException;
0: import javax.jms.Destination;
0: import java.io.IOException;
0: import java.util.Map;
0: import java.util.HashMap;
1: 
1: /**
0:  * Implementations of this interface are used to map back and forth from Stomp to ActiveMQ.
0:  * There are several standard mappings which are semantically the same, the inner class,
0:  * Helper, provides functions to copy those properties from one to the other
1:  */
0: public interface FrameTranslator
0: {
0:     public ActiveMQMessage convertFrame(StompFrame frame) throws JMSException, ProtocolException;
1: 
0:     public StompFrame convertMessage(ActiveMQMessage message) throws IOException, JMSException;
1: 
0:     public String convertDestination(Destination d);
1: 
0:     public ActiveMQDestination convertDestination(String name) throws ProtocolException;
1: 
1:     /**
1:      * Helper class which holds commonly needed functions used when implementing
1:      * FrameTranslators
1:      */
0:     public final static class Helper
0:     {
0:         public static void copyStandardHeadersFromMessageToFrame(ActiveMQMessage message,
0:                                                                  StompFrame command,
0:                                                                  FrameTranslator ft)
0:                 throws IOException
0:         {
0:             final Map headers = command.getHeaders();
0:             headers.put(Stomp.Headers.Message.DESTINATION, ft.convertDestination(message.getDestination()));
1:             headers.put(Stomp.Headers.Message.MESSAGE_ID, message.getJMSMessageID());
1: 
1:             if (message.getJMSCorrelationID() != null) {
1:                 headers.put(Stomp.Headers.Message.CORRELATION_ID, message.getJMSCorrelationID());
1:             }
0:             headers.put(Stomp.Headers.Message.EXPIRATION_TIME, ""+message.getJMSExpiration());
1: 
1:             if (message.getJMSRedelivered()) {
1:                 headers.put(Stomp.Headers.Message.REDELIVERED, "true");
1:             }
0:             headers.put(Stomp.Headers.Message.PRORITY, ""+message.getJMSPriority());
1: 
1:             if (message.getJMSReplyTo() != null) {
0:                 headers.put(Stomp.Headers.Message.REPLY_TO, ft.convertDestination(message.getJMSReplyTo()));
1:             }
0:             headers.put(Stomp.Headers.Message.TIMESTAMP, ""+message.getJMSTimestamp());
1: 
1:             if (message.getJMSType() != null) {
1:                 headers.put(Stomp.Headers.Message.TYPE, message.getJMSType());
1:             }
1: 
1:             // now lets add all the message headers
0:             final Map properties = message.getProperties();
1:             if (properties != null) {
0:                 headers.putAll(properties);
1:             }
1:         }
1: 
0:         public static void copyStandardHeadersFromFrameToMessage(StompFrame command,
0:                                                                  ActiveMQMessage msg,
0:                                                                  FrameTranslator ft)
0:                 throws ProtocolException, JMSException
0:         {
0:             final Map headers = new HashMap(command.getHeaders());
0:             final String destination = (String) headers.remove(Stomp.Headers.Send.DESTINATION);
0:             msg.setDestination( ft.convertDestination(destination));
1: 
1:             // the standard JMS headers
0:             msg.setJMSCorrelationID((String) headers.remove(Stomp.Headers.Send.CORRELATION_ID));
1: 
1:             Object o = headers.remove(Stomp.Headers.Send.EXPIRATION_TIME);
1:             if (o != null) {
0:                 msg.setJMSExpiration(Long.parseLong((String) o));
1:             }
1: 
1:             o = headers.remove(Stomp.Headers.Send.PRIORITY);
1:             if (o != null) {
0:                 msg.setJMSPriority(Integer.parseInt((String) o));
1:             }
1: 
1:             o = headers.remove(Stomp.Headers.Send.TYPE);
1:             if (o != null) {
0:                 msg.setJMSType((String) o);
1:             }
1: 
1:             o = headers.remove(Stomp.Headers.Send.REPLY_TO);
1:             if (o != null) {
0:                 msg.setJMSReplyTo(ft.convertDestination((String) o));
1:             }
1: 
1:             o = headers.remove(Stomp.Headers.Send.PERSISTENT);
1:             if (o != null) {
1:                 msg.setPersistent("true".equals(o));
1:             }
1: 
1:             // now the general headers
1:             msg.setProperties(headers);
1:         }
1:     }
1: }
============================================================================