1:e9f30fe: /**
1:e9f30fe:  * Licensed to the Apache Software Foundation (ASF) under one or more
1:e9f30fe:  * contributor license agreements.  See the NOTICE file distributed with
1:e9f30fe:  * this work for additional information regarding copyright ownership.
1:e9f30fe:  * The ASF licenses this file to You under the Apache License, Version 2.0
1:e9f30fe:  * (the "License"); you may not use this file except in compliance with
1:e9f30fe:  * the License.  You may obtain a copy of the License at
1:e9f30fe:  *
1:e9f30fe:  *      http://www.apache.org/licenses/LICENSE-2.0
1:e9f30fe:  *
1:e9f30fe:  * Unless required by applicable law or agreed to in writing, software
1:e9f30fe:  * distributed under the License is distributed on an "AS IS" BASIS,
1:e9f30fe:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:e9f30fe:  * See the License for the specific language governing permissions and
1:e9f30fe:  * limitations under the License.
1:e9f30fe:  */
1:e9f30fe: package org.apache.activemq.usecases;
9:e9f30fe: 
1:0585bc1: import java.util.Vector;
1:0585bc1: import java.util.concurrent.CountDownLatch;
1:0585bc1: import java.util.concurrent.TimeUnit;
1:0585bc1: import java.util.concurrent.atomic.AtomicInteger;
1:e9f30fe: import javax.jms.Connection;
1:e9f30fe: import javax.jms.MessageConsumer;
1:e9f30fe: import javax.jms.MessageProducer;
1:e9f30fe: import javax.jms.Session;
1:e9f30fe: 
1:e9f30fe: import junit.framework.Test;
1:e9f30fe: 
1:e9f30fe: import org.apache.activemq.ActiveMQConnectionFactory;
1:e9f30fe: import org.apache.activemq.ActiveMQSession;
1:e9f30fe: import org.apache.activemq.CombinationTestSupport;
1:e9f30fe: import org.apache.activemq.broker.BrokerService;
1:e9f30fe: import org.apache.activemq.command.ActiveMQDestination;
1:e9f30fe: import org.apache.activemq.command.ActiveMQObjectMessage;
1:e9f30fe: import org.apache.activemq.command.ActiveMQQueue;
1:0585bc1: import org.apache.activemq.command.ActiveMQTopic;
1:8bf987b: import org.slf4j.Logger;
1:8bf987b: import org.slf4j.LoggerFactory;
1:e9f30fe: 
1:e9f30fe: 
1:e9f30fe: public class ObjectMessageNotSerializableTest extends CombinationTestSupport {
1:e9f30fe: 
1:8bf987b:     private static final Logger LOG = LoggerFactory.getLogger(ObjectMessageNotSerializableTest.class);
1:e9f30fe:     
1:e9f30fe:     BrokerService broker;
1:0585bc1:     AtomicInteger numReceived = new AtomicInteger(0);
1:0585bc1:     final Vector<Throwable> exceptions = new Vector<Throwable>();
1:e9f30fe: 
1:e9f30fe:     public static Test suite() {
1:e9f30fe:         return suite(ObjectMessageNotSerializableTest.class);
1:e9f30fe:     }
1:e9f30fe: 
1:e9f30fe:     public static void main(String[] args) {
1:e9f30fe:         junit.textui.TestRunner.run(suite());
1:e9f30fe:     }
1:e9f30fe: 	
1:e9f30fe: 	protected void setUp() throws Exception {
1:0585bc1:         exceptions.clear();
1:e9f30fe:         broker = createBroker();
1:e9f30fe:     }
1:e9f30fe: 	
1:e9f30fe: 	public void testSendNotSerializeableObjectMessage() throws Exception {
1:e9f30fe: 
1:0585bc1:         final  ActiveMQDestination destination = new ActiveMQQueue("testQ");
1:e9f30fe:         final MyObject obj = new MyObject("A message");
1:e9f30fe: 
1:0585bc1:         final CountDownLatch consumerStarted = new CountDownLatch(1);
1:0585bc1: 
1:0585bc1: 		Thread vmConsumerThread = new Thread("Consumer Thread") {
1:e9f30fe: 			public void run() {
1:e9f30fe: 				try {
1:0585bc1:                     ActiveMQConnectionFactory factory = new ActiveMQConnectionFactory("vm://localhost");
1:0585bc1:                     factory.setOptimizedMessageDispatch(true);
1:0585bc1:                     factory.setObjectMessageSerializationDefered(true);
1:0585bc1:                     factory.setCopyMessageOnSend(false);
1:0585bc1: 
1:0585bc1:                     Connection connection = factory.createConnection();
1:0585bc1: 		            Session session = (ActiveMQSession)connection.createSession(false, Session.AUTO_ACKNOWLEDGE);
1:0585bc1: 		            MessageConsumer consumer = session.createConsumer(destination);
1:0585bc1: 		            connection.start();
1:0585bc1:                     consumerStarted.countDown();
1:0585bc1:                     ActiveMQObjectMessage message = (ActiveMQObjectMessage)consumer.receive(30000);
1:e9f30fe:                     if ( message != null ) {
1:e9f30fe:                         MyObject object = (MyObject)message.getObject();
1:e9f30fe:                         LOG.info("Got message " + object.getMessage());
1:0585bc1:                         numReceived.incrementAndGet();
1:e9f30fe:                     }
1:e9f30fe: 					consumer.close();
1:e9f30fe: 				} catch (Throwable ex) {
1:0585bc1: 					exceptions.add(ex);
1:e9f30fe: 				}
1:e9f30fe: 			}
1:e9f30fe: 		};
1:0585bc1:         vmConsumerThread.start();
1:0585bc1: 
1:e9f30fe: 		Thread producingThread = new Thread("Producing Thread") {
1:e9f30fe:             public void run() {
1:e9f30fe:                 try {
1:0585bc1:                     ActiveMQConnectionFactory factory = new ActiveMQConnectionFactory("vm://localhost");
1:0585bc1:                     factory.setOptimizedMessageDispatch(true);
1:0585bc1:                     factory.setObjectMessageSerializationDefered(true);
1:0585bc1:                     factory.setCopyMessageOnSend(false);
1:0585bc1: 
1:0585bc1:                     Connection connection = factory.createConnection();
1:0585bc1: 		            Session session = (ActiveMQSession)connection.createSession(false, Session.AUTO_ACKNOWLEDGE);
1:0585bc1: 		            MessageProducer producer = session.createProducer(destination);
1:e9f30fe:                     ActiveMQObjectMessage message = (ActiveMQObjectMessage)session.createObjectMessage();
1:e9f30fe:                     message.setObject(obj);
1:e9f30fe:                     producer.send(message);
1:e9f30fe:                 	producer.close();
1:e9f30fe:                 } catch (Throwable ex) {
1:0585bc1:                     exceptions.add(ex);
1:e9f30fe:                 }
1:e9f30fe:             }
1:e9f30fe: 		};
1:0585bc1: 
1:0585bc1:         assertTrue("consumers started", consumerStarted.await(10, TimeUnit.SECONDS));
1:0585bc1: 		producingThread.start();
1:0585bc1: 
1:0585bc1:         vmConsumerThread.join();
1:0585bc1:         producingThread.join();
1:0585bc1: 
1:0585bc1:         assertEquals("writeObject called", 0, obj.getWriteObjectCalled());
1:0585bc1:         assertEquals("readObject called", 0, obj.getReadObjectCalled());
1:0585bc1:         assertEquals("readObjectNoData called", 0, obj.getReadObjectNoDataCalled());
1:0585bc1: 
1:0585bc1:         assertEquals("Got expected messages", 1, numReceived.get());
1:0585bc1:         assertTrue("no unexpected exceptions: " + exceptions, exceptions.isEmpty());
1:0585bc1: 	}
1:0585bc1: 
1:0585bc1:     public void testSendNotSerializeableObjectMessageOverTcp() throws Exception {
1:0585bc1:         final  ActiveMQDestination destination = new ActiveMQTopic("testTopic");
1:0585bc1:         final MyObject obj = new MyObject("A message");
1:0585bc1: 
1:0585bc1:         final CountDownLatch consumerStarted = new CountDownLatch(3);
1:0585bc1:         final Vector<Throwable> exceptions = new Vector<Throwable>();
1:0585bc1: 		Thread vmConsumerThread = new Thread("Consumer Thread") {
1:0585bc1: 			public void run() {
1:0585bc1: 				try {
1:0585bc1:                     ActiveMQConnectionFactory factory = new ActiveMQConnectionFactory("vm://localhost");
1:0585bc1:                     factory.setOptimizedMessageDispatch(true);
1:0585bc1:                     factory.setObjectMessageSerializationDefered(true);
1:0585bc1:                     factory.setCopyMessageOnSend(false);
1:0585bc1: 
1:0585bc1:                     Connection connection = factory.createConnection();
1:0585bc1: 		            Session session = (ActiveMQSession)connection.createSession(false, Session.AUTO_ACKNOWLEDGE);
1:0585bc1: 		            MessageConsumer consumer = session.createConsumer(destination);
1:0585bc1: 		            connection.start();
1:0585bc1:                     consumerStarted.countDown();
1:0585bc1:                     ActiveMQObjectMessage message = (ActiveMQObjectMessage)consumer.receive(30000);
1:0585bc1:                     if ( message != null ) {                  
1:0585bc1:                         MyObject object = (MyObject)message.getObject();
1:0585bc1:                         LOG.info("Got message " + object.getMessage());
1:0585bc1:                         numReceived.incrementAndGet();
1:0585bc1:                     }
1:0585bc1: 					consumer.close();
1:0585bc1: 				} catch (Throwable ex) {
1:0585bc1: 					exceptions.add(ex);
1:0585bc1: 				}
1:0585bc1: 			}
1:0585bc1: 		};
1:0585bc1:         vmConsumerThread.start();
1:0585bc1: 
1:0585bc1:         Thread tcpConsumerThread = new Thread("Consumer Thread") {
1:0585bc1: 			public void run() {
1:0585bc1: 				try {
1:0585bc1: 
1:0585bc1:                     ActiveMQConnectionFactory factory =
1:0585bc1:                             new ActiveMQConnectionFactory(broker.getTransportConnectors().get(0).getConnectUri());
1:0585bc1:                     factory.setOptimizedMessageDispatch(true);
1:0585bc1: 
1:0585bc1:                     Connection connection = factory.createConnection();
1:0585bc1: 		            Session session = (ActiveMQSession)connection.createSession(false, Session.AUTO_ACKNOWLEDGE);
1:0585bc1: 		            MessageConsumer consumer = session.createConsumer(destination);
1:0585bc1: 		            connection.start();
1:0585bc1:                     consumerStarted.countDown();
1:0585bc1:                     ActiveMQObjectMessage message = (ActiveMQObjectMessage)consumer.receive(30000);
1:0585bc1:                     if ( message != null ) {
1:0585bc1:                         MyObject object = (MyObject)message.getObject();
1:0585bc1:                         LOG.info("Got message " + object.getMessage());
1:0585bc1:                         numReceived.incrementAndGet();
1:0585bc1:                         assertEquals("readObject called", 1, object.getReadObjectCalled());
1:0585bc1:                     }
1:0585bc1: 					consumer.close();
1:0585bc1: 				} catch (Throwable ex) {
1:0585bc1: 					exceptions.add(ex);
1:0585bc1: 				}
1:0585bc1: 			}
1:0585bc1: 		};
1:0585bc1:         tcpConsumerThread.start();
1:0585bc1: 
1:0585bc1: 
1:0585bc1:         Thread notherVmConsumerThread = new Thread("Consumer Thread") {
1:0585bc1:             public void run() {
1:0585bc1:                 try {
1:0585bc1:                     ActiveMQConnectionFactory factory = new ActiveMQConnectionFactory("vm://localhost");
1:0585bc1:                     factory.setOptimizedMessageDispatch(true);
1:0585bc1:                     factory.setObjectMessageSerializationDefered(true);
1:0585bc1:                     factory.setCopyMessageOnSend(false);
1:0585bc1: 
1:0585bc1:                     Connection connection = factory.createConnection();
1:0585bc1:                     Session session = (ActiveMQSession)connection.createSession(false, Session.AUTO_ACKNOWLEDGE);
1:0585bc1:                     MessageConsumer consumer = session.createConsumer(destination);
1:0585bc1:                     connection.start();
1:0585bc1:                     consumerStarted.countDown();
1:0585bc1:                     ActiveMQObjectMessage message = (ActiveMQObjectMessage)consumer.receive(30000);
1:0585bc1:                     if ( message != null ) {
1:0585bc1:                         MyObject object = (MyObject)message.getObject();
1:0585bc1:                         LOG.info("Got message " + object.getMessage());
1:0585bc1:                         numReceived.incrementAndGet();
1:0585bc1:                     }
1:0585bc1:                     consumer.close();
1:0585bc1:                 } catch (Throwable ex) {
1:0585bc1:                     exceptions.add(ex);
1:0585bc1:                 }
1:0585bc1:             }
1:0585bc1:         };
1:0585bc1:         notherVmConsumerThread.start();
1:0585bc1: 
1:0585bc1: 		Thread producingThread = new Thread("Producing Thread") {
1:0585bc1:             public void run() {
1:0585bc1:                 try {
1:0585bc1:                     ActiveMQConnectionFactory factory = new ActiveMQConnectionFactory("vm://localhost");
1:0585bc1:                     factory.setOptimizedMessageDispatch(true);
1:0585bc1:                     factory.setObjectMessageSerializationDefered(true);
1:0585bc1:                     factory.setCopyMessageOnSend(false);
1:0585bc1: 
1:0585bc1:                     Connection connection = factory.createConnection();
1:0585bc1: 		            Session session = (ActiveMQSession)connection.createSession(false, Session.AUTO_ACKNOWLEDGE);
1:0585bc1: 		            MessageProducer producer = session.createProducer(destination);
1:0585bc1:                     ActiveMQObjectMessage message = (ActiveMQObjectMessage)session.createObjectMessage();
1:0585bc1:                     message.setObject(obj);
1:0585bc1:                     producer.send(message);
1:0585bc1:                 	producer.close();
1:0585bc1:                 } catch (Throwable ex) {
1:0585bc1:                     exceptions.add(ex);
1:0585bc1:                 }
1:0585bc1:             }
1:0585bc1: 		};
1:0585bc1: 
1:0585bc1:         assertTrue("consumers started", consumerStarted.await(10, TimeUnit.SECONDS));
1:e9f30fe: 		producingThread.start();
1:e9f30fe: 		
1:0585bc1:         vmConsumerThread.join();
1:0585bc1:         tcpConsumerThread.join();
1:0585bc1:         notherVmConsumerThread.join();
1:e9f30fe:         producingThread.join();
1:e9f30fe: 
1:0585bc1:         assertEquals("writeObject called", 1, obj.getWriteObjectCalled());
1:0585bc1:         assertEquals("readObject called", 0, obj.getReadObjectCalled());
1:0585bc1:         assertEquals("readObjectNoData called", 0, obj.getReadObjectNoDataCalled());
1:e9f30fe: 
1:0585bc1:         assertEquals("Got expected messages", 3, numReceived.get());
1:0585bc1:         assertTrue("no unexpected exceptions: " + exceptions, exceptions.isEmpty());
1:e9f30fe: 	}
1:e9f30fe: 
1:e9f30fe: 	private BrokerService createBroker() throws Exception {
1:e9f30fe: 	    BrokerService broker = new BrokerService();
1:e9f30fe:         broker.setPersistent(false);
1:e9f30fe:         broker.setUseJmx(false);
1:0585bc1:         broker.addConnector("tcp://localhost:0");
1:e9f30fe:         
1:e9f30fe:         broker.start();
1:e9f30fe:         broker.waitUntilStarted();
1:e9f30fe:         return broker;
1:e9f30fe: 	}
1:e9f30fe: 
1:e9f30fe: 	protected void tearDown() throws Exception {
1:e9f30fe: 		broker.stop();
1:e9f30fe: 		broker.waitUntilStopped();
1:e9f30fe: 	}
1:e9f30fe: }
============================================================================
author:Timothy A. Bish
-------------------------------------------------------------------------------
commit:ef24cc9
author:Bosanac Dejan
-------------------------------------------------------------------------------
commit:8bf987b
/////////////////////////////////////////////////////////////////////////
1: import org.slf4j.Logger;
1: import org.slf4j.LoggerFactory;
1:     private static final Logger LOG = LoggerFactory.getLogger(ObjectMessageNotSerializableTest.class);
author:Gary Tully
-------------------------------------------------------------------------------
commit:0585bc1
/////////////////////////////////////////////////////////////////////////
1: import java.util.Vector;
1: import java.util.concurrent.CountDownLatch;
1: import java.util.concurrent.TimeUnit;
1: import java.util.concurrent.atomic.AtomicInteger;
/////////////////////////////////////////////////////////////////////////
1: import org.apache.activemq.command.ActiveMQTopic;
/////////////////////////////////////////////////////////////////////////
1:     AtomicInteger numReceived = new AtomicInteger(0);
1:     final Vector<Throwable> exceptions = new Vector<Throwable>();
/////////////////////////////////////////////////////////////////////////
1:         exceptions.clear();
1:         final  ActiveMQDestination destination = new ActiveMQQueue("testQ");
1:         final CountDownLatch consumerStarted = new CountDownLatch(1);
1: 
1: 		Thread vmConsumerThread = new Thread("Consumer Thread") {
1:                     ActiveMQConnectionFactory factory = new ActiveMQConnectionFactory("vm://localhost");
1:                     factory.setOptimizedMessageDispatch(true);
1:                     factory.setObjectMessageSerializationDefered(true);
1:                     factory.setCopyMessageOnSend(false);
1: 
1:                     Connection connection = factory.createConnection();
1: 		            Session session = (ActiveMQSession)connection.createSession(false, Session.AUTO_ACKNOWLEDGE);
1: 		            MessageConsumer consumer = session.createConsumer(destination);
1: 		            connection.start();
1:                     consumerStarted.countDown();
1:                     ActiveMQObjectMessage message = (ActiveMQObjectMessage)consumer.receive(30000);
1:                         numReceived.incrementAndGet();
1: 					exceptions.add(ex);
1:         vmConsumerThread.start();
1: 
1:                     ActiveMQConnectionFactory factory = new ActiveMQConnectionFactory("vm://localhost");
1:                     factory.setOptimizedMessageDispatch(true);
1:                     factory.setObjectMessageSerializationDefered(true);
1:                     factory.setCopyMessageOnSend(false);
1: 
1:                     Connection connection = factory.createConnection();
1: 		            Session session = (ActiveMQSession)connection.createSession(false, Session.AUTO_ACKNOWLEDGE);
1: 		            MessageProducer producer = session.createProducer(destination);
1:                     exceptions.add(ex);
1: 
1:         assertTrue("consumers started", consumerStarted.await(10, TimeUnit.SECONDS));
1: 		producingThread.start();
1: 
1:         vmConsumerThread.join();
1:         producingThread.join();
1: 
1:         assertEquals("writeObject called", 0, obj.getWriteObjectCalled());
1:         assertEquals("readObject called", 0, obj.getReadObjectCalled());
1:         assertEquals("readObjectNoData called", 0, obj.getReadObjectNoDataCalled());
1: 
1:         assertEquals("Got expected messages", 1, numReceived.get());
1:         assertTrue("no unexpected exceptions: " + exceptions, exceptions.isEmpty());
1: 	}
1: 
1:     public void testSendNotSerializeableObjectMessageOverTcp() throws Exception {
1:         final  ActiveMQDestination destination = new ActiveMQTopic("testTopic");
1:         final MyObject obj = new MyObject("A message");
1: 
1:         final CountDownLatch consumerStarted = new CountDownLatch(3);
1:         final Vector<Throwable> exceptions = new Vector<Throwable>();
1: 		Thread vmConsumerThread = new Thread("Consumer Thread") {
1: 			public void run() {
1: 				try {
1:                     ActiveMQConnectionFactory factory = new ActiveMQConnectionFactory("vm://localhost");
1:                     factory.setOptimizedMessageDispatch(true);
1:                     factory.setObjectMessageSerializationDefered(true);
1:                     factory.setCopyMessageOnSend(false);
1: 
1:                     Connection connection = factory.createConnection();
1: 		            Session session = (ActiveMQSession)connection.createSession(false, Session.AUTO_ACKNOWLEDGE);
1: 		            MessageConsumer consumer = session.createConsumer(destination);
1: 		            connection.start();
1:                     consumerStarted.countDown();
1:                     ActiveMQObjectMessage message = (ActiveMQObjectMessage)consumer.receive(30000);
1:                     if ( message != null ) {                  
1:                         MyObject object = (MyObject)message.getObject();
1:                         LOG.info("Got message " + object.getMessage());
1:                         numReceived.incrementAndGet();
1:                     }
1: 					consumer.close();
1: 				} catch (Throwable ex) {
1: 					exceptions.add(ex);
1: 				}
1: 			}
1: 		};
1:         vmConsumerThread.start();
1: 
1:         Thread tcpConsumerThread = new Thread("Consumer Thread") {
1: 			public void run() {
1: 				try {
1: 
1:                     ActiveMQConnectionFactory factory =
1:                             new ActiveMQConnectionFactory(broker.getTransportConnectors().get(0).getConnectUri());
1:                     factory.setOptimizedMessageDispatch(true);
1: 
1:                     Connection connection = factory.createConnection();
1: 		            Session session = (ActiveMQSession)connection.createSession(false, Session.AUTO_ACKNOWLEDGE);
1: 		            MessageConsumer consumer = session.createConsumer(destination);
1: 		            connection.start();
1:                     consumerStarted.countDown();
1:                     ActiveMQObjectMessage message = (ActiveMQObjectMessage)consumer.receive(30000);
1:                     if ( message != null ) {
1:                         MyObject object = (MyObject)message.getObject();
1:                         LOG.info("Got message " + object.getMessage());
1:                         numReceived.incrementAndGet();
1:                         assertEquals("readObject called", 1, object.getReadObjectCalled());
1:                     }
1: 					consumer.close();
1: 				} catch (Throwable ex) {
1: 					exceptions.add(ex);
1: 				}
1: 			}
1: 		};
1:         tcpConsumerThread.start();
1: 
1: 
1:         Thread notherVmConsumerThread = new Thread("Consumer Thread") {
1:             public void run() {
1:                 try {
1:                     ActiveMQConnectionFactory factory = new ActiveMQConnectionFactory("vm://localhost");
1:                     factory.setOptimizedMessageDispatch(true);
1:                     factory.setObjectMessageSerializationDefered(true);
1:                     factory.setCopyMessageOnSend(false);
1: 
1:                     Connection connection = factory.createConnection();
1:                     Session session = (ActiveMQSession)connection.createSession(false, Session.AUTO_ACKNOWLEDGE);
1:                     MessageConsumer consumer = session.createConsumer(destination);
1:                     connection.start();
1:                     consumerStarted.countDown();
1:                     ActiveMQObjectMessage message = (ActiveMQObjectMessage)consumer.receive(30000);
1:                     if ( message != null ) {
1:                         MyObject object = (MyObject)message.getObject();
1:                         LOG.info("Got message " + object.getMessage());
1:                         numReceived.incrementAndGet();
1:                     }
1:                     consumer.close();
1:                 } catch (Throwable ex) {
1:                     exceptions.add(ex);
1:                 }
1:             }
1:         };
1:         notherVmConsumerThread.start();
1: 
1: 		Thread producingThread = new Thread("Producing Thread") {
1:             public void run() {
1:                 try {
1:                     ActiveMQConnectionFactory factory = new ActiveMQConnectionFactory("vm://localhost");
1:                     factory.setOptimizedMessageDispatch(true);
1:                     factory.setObjectMessageSerializationDefered(true);
1:                     factory.setCopyMessageOnSend(false);
1: 
1:                     Connection connection = factory.createConnection();
1: 		            Session session = (ActiveMQSession)connection.createSession(false, Session.AUTO_ACKNOWLEDGE);
1: 		            MessageProducer producer = session.createProducer(destination);
1:                     ActiveMQObjectMessage message = (ActiveMQObjectMessage)session.createObjectMessage();
1:                     message.setObject(obj);
1:                     producer.send(message);
1:                 	producer.close();
1:                 } catch (Throwable ex) {
1:                     exceptions.add(ex);
1:                 }
1:             }
1: 		};
1: 
1:         assertTrue("consumers started", consumerStarted.await(10, TimeUnit.SECONDS));
1:         vmConsumerThread.join();
1:         tcpConsumerThread.join();
1:         notherVmConsumerThread.join();
1:         assertEquals("writeObject called", 1, obj.getWriteObjectCalled());
1:         assertEquals("readObject called", 0, obj.getReadObjectCalled());
1:         assertEquals("readObjectNoData called", 0, obj.getReadObjectNoDataCalled());
1:         assertEquals("Got expected messages", 3, numReceived.get());
1:         assertTrue("no unexpected exceptions: " + exceptions, exceptions.isEmpty());
1:         broker.addConnector("tcp://localhost:0");
/////////////////////////////////////////////////////////////////////////
commit:e9f30fe
/////////////////////////////////////////////////////////////////////////
1: /**
1:  * Licensed to the Apache Software Foundation (ASF) under one or more
1:  * contributor license agreements.  See the NOTICE file distributed with
1:  * this work for additional information regarding copyright ownership.
1:  * The ASF licenses this file to You under the Apache License, Version 2.0
1:  * (the "License"); you may not use this file except in compliance with
1:  * the License.  You may obtain a copy of the License at
1:  *
1:  *      http://www.apache.org/licenses/LICENSE-2.0
1:  *
1:  * Unless required by applicable law or agreed to in writing, software
1:  * distributed under the License is distributed on an "AS IS" BASIS,
1:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:  * See the License for the specific language governing permissions and
1:  * limitations under the License.
1:  */
1: package org.apache.activemq.usecases;
1: 
1: import javax.jms.Connection;
1: import javax.jms.MessageConsumer;
1: import javax.jms.MessageProducer;
1: import javax.jms.Session;
1: 
1: import junit.framework.Test;
1: 
1: import org.apache.activemq.ActiveMQConnectionFactory;
1: import org.apache.activemq.ActiveMQSession;
1: import org.apache.activemq.CombinationTestSupport;
1: import org.apache.activemq.broker.BrokerService;
1: import org.apache.activemq.command.ActiveMQDestination;
1: import org.apache.activemq.command.ActiveMQObjectMessage;
1: import org.apache.activemq.command.ActiveMQQueue;
0: import org.apache.commons.logging.Log;
0: import org.apache.commons.logging.LogFactory;
1: 
1: 
1: public class ObjectMessageNotSerializableTest extends CombinationTestSupport {
1: 
0:     private static final Log LOG = LogFactory.getLog(ObjectMessageNotSerializableTest.class);
1:     
1:     BrokerService broker;
0:     Connection connection;
0:     ActiveMQSession session;
0:     MessageProducer producer;
0:     MessageConsumer consumer;
0:     public ActiveMQDestination destination = new ActiveMQQueue("test");
1: 
0:     int numReceived = 0;
0:     boolean writeObjectCalled, readObjectCalled, readObjectNoDataCalled;
1: 
1:     public static Test suite() {
1:         return suite(ObjectMessageNotSerializableTest.class);
1:     }
1: 
1:     public static void main(String[] args) {
1:         junit.textui.TestRunner.run(suite());
1:     }
1: 	
1: 	protected void setUp() throws Exception {
1:         broker = createBroker();
1:     }
1: 	
1: 	public void testSendNotSerializeableObjectMessage() throws Exception {
1: 		
0: 		ActiveMQConnectionFactory factory = new ActiveMQConnectionFactory("vm://localhost");
0:         factory.setOptimizedMessageDispatch(true);
0:         factory.setObjectMessageSerializationDefered(true);
0:         factory.setCopyMessageOnSend(false);
1: 
1: 
0: 		connection = factory.createConnection();
0: 		session = (ActiveMQSession)connection.createSession(false, Session.AUTO_ACKNOWLEDGE);
0: 		producer = session.createProducer(destination);
1: 
0: 		consumer = session.createConsumer(destination);
0: 		connection.start();
1: 		
1:         final MyObject obj = new MyObject("A message");
1: 
0: 		Thread consumerThread = new Thread("Consumer Thread") {
1: 			public void run() {
1: 				try {
0:                     ActiveMQObjectMessage message = (ActiveMQObjectMessage)consumer.receive();
1:                     if ( message != null ) {
0:                         numReceived++;
1:                         MyObject object = (MyObject)message.getObject();
1:                         LOG.info("Got message " + object.getMessage());
1:                     }
1: 					consumer.close();
1: 				} catch (Throwable ex) {
0: 					ex.printStackTrace();
1: 				}
1: 			}
1: 		};
1: 		
0:         consumerThread.start();
1: 		
1: 		Thread producingThread = new Thread("Producing Thread") {
1:             public void run() {
1:                 try {
1:                     ActiveMQObjectMessage message = (ActiveMQObjectMessage)session.createObjectMessage();
1:                     message.setObject(obj);
1:                     producer.send(message);
1:                 	producer.close();
1:                 } catch (Throwable ex) {
0:                     ex.printStackTrace();
1:                 }
1:             }
1: 		};
1: 		
1: 		producingThread.start();
1: 		
0:         consumerThread.join();
1:         producingThread.join();
0:         session.close();
1: 
0:         assertFalse("writeObject called", obj.getWriteObjectCalled());
0:         assertFalse("readObject called", obj.getReadObjectCalled());
0:         assertFalse("readObjectNoData called", obj.getReadObjectNoDataCalled());
1: 
1: 	}
1: 
1: 	private BrokerService createBroker() throws Exception {
1: 	    BrokerService broker = new BrokerService();
1:         broker.setPersistent(false);
1:         broker.setUseJmx(false);
0:         broker.addConnector("vm://localhost");
1:         
1:         broker.start();
1:         broker.waitUntilStarted();
1:         return broker;
1: 	}
1: 
1: 	protected void tearDown() throws Exception {
0: 		connection.stop();
1: 		broker.stop();
1: 		broker.waitUntilStopped();
1: 	}
1: }
============================================================================