1:1f862ba: /**
1:1f862ba:  * Licensed to the Apache Software Foundation (ASF) under one or more
1:1f862ba:  * contributor license agreements.  See the NOTICE file distributed with
1:1f862ba:  * this work for additional information regarding copyright ownership.
1:1f862ba:  * The ASF licenses this file to You under the Apache License, Version 2.0
1:1f862ba:  * (the "License"); you may not use this file except in compliance with
1:1f862ba:  * the License.  You may obtain a copy of the License at
1:1f862ba:  *
1:1f862ba:  *      http://www.apache.org/licenses/LICENSE-2.0
1:1f862ba:  *
1:1f862ba:  * Unless required by applicable law or agreed to in writing, software
1:1f862ba:  * distributed under the License is distributed on an "AS IS" BASIS,
1:1f862ba:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:1f862ba:  * See the License for the specific language governing permissions and
1:1f862ba:  * limitations under the License.
1:1f862ba:  */
1:1f862ba: package org.apache.activemq.security;
1:1f862ba: 
1:1f862ba: import org.apache.activemq.ActiveMQConnectionFactory;
1:1f862ba: import org.apache.activemq.broker.BrokerFactory;
1:1f862ba: import org.apache.activemq.broker.BrokerService;
1:1f862ba: import org.apache.directory.server.annotations.CreateLdapServer;
1:1f862ba: import org.apache.directory.server.annotations.CreateTransport;
1:1f862ba: import org.apache.directory.server.core.annotations.ApplyLdifFiles;
1:1f862ba: import org.apache.directory.server.core.integ.AbstractLdapTestUnit;
1:1f862ba: import org.apache.directory.server.core.integ.FrameworkRunner;
1:1f862ba: import org.apache.directory.server.ldap.LdapServer;
1:1f862ba: import org.junit.After;
1:1f862ba: import org.junit.Before;
1:1f862ba: import org.junit.Test;
1:1f862ba: import org.junit.runner.RunWith;
1:1f862ba: 
1:1f862ba: import javax.jms.*;
1:1f862ba: 
1:1f862ba: import static org.junit.Assert.assertNotNull;
1:1f862ba: import static org.junit.Assert.fail;
1:1f862ba: 
1:1f862ba: 
1:1f862ba: @RunWith( FrameworkRunner.class )
1:1f862ba: @CreateLdapServer(transports = {@CreateTransport(protocol = "LDAP")})
1:1f862ba: @ApplyLdifFiles(
1:1f862ba:         "org/apache/activemq/security/activemq-apacheds-legacy.ldif"
1:1f862ba: )
1:1f862ba: public class CachedLDAPSecurityLegacyTest extends AbstractLdapTestUnit {
1:1f862ba: 
1:1f862ba:     public BrokerService broker;
1:1f862ba: 
1:1f862ba:     public static LdapServer ldapServer;
1:1f862ba: 
1:1f862ba:     @Before
1:1f862ba:     public void setup() throws Exception {
1:1f862ba:         System.setProperty("ldapPort", String.valueOf(getLdapServer().getPort()));
1:1f862ba:         
1:1f862ba:         broker = BrokerFactory.createBroker("xbean:org/apache/activemq/security/activemq-apacheds-legacy.xml");
1:1f862ba:         broker.start();
1:1f862ba:         broker.waitUntilStarted();
1:1f862ba:     }
1:1f862ba: 
1:1f862ba:     @After
1:1f862ba:     public void shutdown() throws Exception {
1:1f862ba:         broker.stop();
1:1f862ba:         broker.waitUntilStopped();
1:1f862ba:     }
1:1f862ba: 
1:1f862ba:     @Test
1:1f862ba:     public void testSendReceive() throws Exception {
1:1f862ba:         ActiveMQConnectionFactory factory = new ActiveMQConnectionFactory("vm://localhost");
1:1f862ba:         Connection conn = factory.createQueueConnection("jdoe", "sunflower");
1:1f862ba:         Session sess = conn.createSession(false, Session.AUTO_ACKNOWLEDGE);
1:1f862ba:         conn.start();
1:1f862ba:         Queue queue = sess.createQueue("TEST.FOO");
1:1f862ba: 
1:5a605c0:         MessageProducer producer = sess.createProducer(queue);
1:1f862ba:         MessageConsumer consumer = sess.createConsumer(queue);
1:1f862ba: 
3:1f862ba:         producer.send(sess.createTextMessage("test"));
1:1f862ba:         Message msg = consumer.receive(1000);
1:1f862ba:         assertNotNull(msg);
1:1f862ba:     }
1:1f862ba: 
1:1f862ba:     @Test
1:1f862ba:     public void testSendDenied() throws Exception {
1:1f862ba:         ActiveMQConnectionFactory factory = new ActiveMQConnectionFactory("vm://localhost");
1:1f862ba:         Connection conn = factory.createQueueConnection("jdoe", "sunflower");
1:1f862ba:         Session sess = conn.createSession(false, Session.AUTO_ACKNOWLEDGE);
1:1f862ba:         conn.start();
1:1f862ba:         Queue queue = sess.createQueue("ADMIN.FOO");
1:1f862ba: 
1:1f862ba:         try {
1:f65857a:             sess.createProducer(queue);
1:1f862ba:             fail("expect auth exception");
1:1f862ba:         } catch (JMSException expected) {
1:1f862ba:         }
1:1f862ba:     }
1:1f862ba: 
1:1f862ba:     @Test
1:1f862ba:     public void testCompositeSendDenied() throws Exception {
1:1f862ba:         ActiveMQConnectionFactory factory = new ActiveMQConnectionFactory("vm://localhost");
1:1f862ba:         Connection conn = factory.createQueueConnection("jdoe", "sunflower");
1:1f862ba:         Session sess = conn.createSession(false, Session.AUTO_ACKNOWLEDGE);
1:1f862ba:         conn.start();
1:1f862ba:         Queue queue = sess.createQueue("TEST.FOO,ADMIN.FOO");
1:1f862ba: 
1:1f862ba:         try {
1:f65857a:             sess.createProducer(queue);
1:1f862ba:             fail("expect auth exception");
1:1f862ba:         } catch (JMSException expected) {
1:1f862ba:         }
1:1f862ba:     }
1:1f862ba: 
1:1f862ba:     @Test
1:1f862ba:     public void testTempDestinations() throws Exception {
1:1f862ba:         ActiveMQConnectionFactory factory = new ActiveMQConnectionFactory("vm://localhost");
1:1f862ba:         Connection conn = factory.createQueueConnection("jdoe", "sunflower");
1:1f862ba:         Session sess = conn.createSession(false, Session.AUTO_ACKNOWLEDGE);
1:1f862ba:         conn.start();
1:1f862ba:         Queue queue = sess.createTemporaryQueue();
1:1f862ba: 
1:5a605c0:         MessageProducer producer = sess.createProducer(queue);
1:1f862ba:         MessageConsumer consumer = sess.createConsumer(queue);
1:1f862ba: 
1:1f862ba:         producer.send(sess.createTextMessage("test"));
1:1f862ba:         Message msg = consumer.receive(1000);
1:1f862ba:         assertNotNull(msg);
1:1f862ba:     }
1:1f862ba: 
1:1f862ba: }
1:1f862ba: 
1:1f862ba: 
============================================================================
author:Timothy A. Bish
-------------------------------------------------------------------------------
commit:ef24cc9
author:Gary Tully
-------------------------------------------------------------------------------
commit:f65857a
/////////////////////////////////////////////////////////////////////////
1:             sess.createProducer(queue);
/////////////////////////////////////////////////////////////////////////
1:             sess.createProducer(queue);
commit:5a605c0
/////////////////////////////////////////////////////////////////////////
0:             // https://issues.apache.org/jira/browse/AMQ-4213
0:             // sync send on producer so it throws
1:             MessageProducer producer = sess.createProducer(queue);
/////////////////////////////////////////////////////////////////////////
0:             // https://issues.apache.org/jira/browse/AMQ-4213
0:             // sync send on producer so it throws
1:             MessageProducer producer = sess.createProducer(queue);
author:Bosanac Dejan
-------------------------------------------------------------------------------
commit:1f862ba
/////////////////////////////////////////////////////////////////////////
1: /**
1:  * Licensed to the Apache Software Foundation (ASF) under one or more
1:  * contributor license agreements.  See the NOTICE file distributed with
1:  * this work for additional information regarding copyright ownership.
1:  * The ASF licenses this file to You under the Apache License, Version 2.0
1:  * (the "License"); you may not use this file except in compliance with
1:  * the License.  You may obtain a copy of the License at
1:  *
1:  *      http://www.apache.org/licenses/LICENSE-2.0
1:  *
1:  * Unless required by applicable law or agreed to in writing, software
1:  * distributed under the License is distributed on an "AS IS" BASIS,
1:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:  * See the License for the specific language governing permissions and
1:  * limitations under the License.
1:  */
1: package org.apache.activemq.security;
1: 
1: import org.apache.activemq.ActiveMQConnectionFactory;
1: import org.apache.activemq.broker.BrokerFactory;
1: import org.apache.activemq.broker.BrokerService;
1: import org.apache.directory.server.annotations.CreateLdapServer;
1: import org.apache.directory.server.annotations.CreateTransport;
1: import org.apache.directory.server.core.annotations.ApplyLdifFiles;
1: import org.apache.directory.server.core.integ.AbstractLdapTestUnit;
1: import org.apache.directory.server.core.integ.FrameworkRunner;
1: import org.apache.directory.server.ldap.LdapServer;
1: import org.junit.After;
1: import org.junit.Before;
1: import org.junit.Test;
1: import org.junit.runner.RunWith;
1: 
1: import javax.jms.*;
1: 
1: import static org.junit.Assert.assertNotNull;
1: import static org.junit.Assert.fail;
1: 
1: 
1: @RunWith( FrameworkRunner.class )
1: @CreateLdapServer(transports = {@CreateTransport(protocol = "LDAP")})
1: @ApplyLdifFiles(
1:         "org/apache/activemq/security/activemq-apacheds-legacy.ldif"
1: )
1: public class CachedLDAPSecurityLegacyTest extends AbstractLdapTestUnit {
1: 
1:     public BrokerService broker;
1: 
1:     public static LdapServer ldapServer;
1: 
1:     @Before
1:     public void setup() throws Exception {
1:         System.setProperty("ldapPort", String.valueOf(getLdapServer().getPort()));
1:         
1:         broker = BrokerFactory.createBroker("xbean:org/apache/activemq/security/activemq-apacheds-legacy.xml");
1:         broker.start();
1:         broker.waitUntilStarted();
1:     }
1: 
1:     @After
1:     public void shutdown() throws Exception {
1:         broker.stop();
1:         broker.waitUntilStopped();
1:     }
1: 
1:     @Test
1:     public void testSendReceive() throws Exception {
1:         ActiveMQConnectionFactory factory = new ActiveMQConnectionFactory("vm://localhost");
1:         Connection conn = factory.createQueueConnection("jdoe", "sunflower");
1:         Session sess = conn.createSession(false, Session.AUTO_ACKNOWLEDGE);
1:         conn.start();
1:         Queue queue = sess.createQueue("TEST.FOO");
1: 
0:         MessageProducer producer = sess.createProducer(queue);
1:         MessageConsumer consumer = sess.createConsumer(queue);
1: 
1:         producer.send(sess.createTextMessage("test"));
1:         Message msg = consumer.receive(1000);
1:         assertNotNull(msg);
1:     }
1: 
1:     @Test
1:     public void testSendDenied() throws Exception {
1:         ActiveMQConnectionFactory factory = new ActiveMQConnectionFactory("vm://localhost");
1:         Connection conn = factory.createQueueConnection("jdoe", "sunflower");
1:         Session sess = conn.createSession(false, Session.AUTO_ACKNOWLEDGE);
1:         conn.start();
1:         Queue queue = sess.createQueue("ADMIN.FOO");
1: 
0:         MessageProducer producer = sess.createProducer(queue);
1:         try {
1:             producer.send(sess.createTextMessage("test"));
1:             fail("expect auth exception");
1:         } catch (JMSException expected) {
1:         }
1:     }
1: 
1:     @Test
1:     public void testCompositeSendDenied() throws Exception {
1:         ActiveMQConnectionFactory factory = new ActiveMQConnectionFactory("vm://localhost");
1:         Connection conn = factory.createQueueConnection("jdoe", "sunflower");
1:         Session sess = conn.createSession(false, Session.AUTO_ACKNOWLEDGE);
1:         conn.start();
1:         Queue queue = sess.createQueue("TEST.FOO,ADMIN.FOO");
1: 
0:         MessageProducer producer = sess.createProducer(queue);
1:         try {
1:             producer.send(sess.createTextMessage("test"));
1:             fail("expect auth exception");
1:         } catch (JMSException expected) {
1:         }
1:     }
1: 
1:     @Test
1:     public void testTempDestinations() throws Exception {
1:         ActiveMQConnectionFactory factory = new ActiveMQConnectionFactory("vm://localhost");
1:         Connection conn = factory.createQueueConnection("jdoe", "sunflower");
1:         Session sess = conn.createSession(false, Session.AUTO_ACKNOWLEDGE);
1:         conn.start();
1:         Queue queue = sess.createTemporaryQueue();
1: 
0:         MessageProducer producer = sess.createProducer(queue);
1:         MessageConsumer consumer = sess.createConsumer(queue);
1: 
1:         producer.send(sess.createTextMessage("test"));
1:         Message msg = consumer.receive(1000);
1:         assertNotNull(msg);
1:     }
1: 
1: }
1: 
1: 
============================================================================