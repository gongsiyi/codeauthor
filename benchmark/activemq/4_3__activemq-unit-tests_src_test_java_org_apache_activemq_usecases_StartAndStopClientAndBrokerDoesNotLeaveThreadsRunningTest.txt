1:fc00993: /**
1:fc00993:  * Licensed to the Apache Software Foundation (ASF) under one or more
1:fc00993:  * contributor license agreements.  See the NOTICE file distributed with
1:fc00993:  * this work for additional information regarding copyright ownership.
1:fc00993:  * The ASF licenses this file to You under the Apache License, Version 2.0
1:fc00993:  * (the "License"); you may not use this file except in compliance with
1:fc00993:  * the License.  You may obtain a copy of the License at
2:6cf2169:  *
1:6cf2169:  *      http://www.apache.org/licenses/LICENSE-2.0
1:6cf2169:  *
1:6cf2169:  * Unless required by applicable law or agreed to in writing, software
1:6cf2169:  * distributed under the License is distributed on an "AS IS" BASIS,
1:6cf2169:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:6cf2169:  * See the License for the specific language governing permissions and
1:6cf2169:  * limitations under the License.
1:6cf2169:  */
1:6cf2169: package org.apache.activemq.usecases;
2:6cf2169: 
1:6cf2169: import javax.jms.Connection;
1:6cf2169: import javax.jms.MessageConsumer;
1:6cf2169: import javax.jms.MessageProducer;
1:6cf2169: import javax.jms.Queue;
1:6cf2169: import javax.jms.Session;
1:6cf2169: import javax.jms.TextMessage;
1:6cf2169: 
1:6cf2169: import junit.framework.TestCase;
1:74a7a8b: import org.apache.activemq.ActiveMQConnectionFactory;
1:74a7a8b: import org.apache.activemq.broker.BrokerService;
1:74a7a8b: import org.apache.activemq.spring.ConsumerBean;
1:6cf2169: 
1:6cf2169: /**
1:b0c2a40:  * 
1:6cf2169:  * 
1:6cf2169:  */
1:6cf2169: public class StartAndStopClientAndBrokerDoesNotLeaveThreadsRunningTest extends TestCase {
1:6cf2169: 
1:6cf2169:     public static interface Task {
1:fc00993:         void execute() throws Exception;
1:6cf2169:     }
1:6cf2169: 
1:6cf2169:     public void setUp() throws Exception {
1:6cf2169:     }
1:6cf2169: 
1:6cf2169:     public void testStartAndStopClientAndBrokerAndCheckNoThreadsAreLeft() throws Exception {
1:6cf2169:         runTest(new Task() {
1:6cf2169: 
1:6cf2169:             public void execute() throws Exception {
1:6cf2169:                 BrokerService broker = new BrokerService();
1:6cf2169:                 broker.setPersistent(false);
1:6cf2169:                 broker.start();
1:6cf2169: 
1:6cf2169:                 ActiveMQConnectionFactory factory = new ActiveMQConnectionFactory("vm://localhost");
1:6cf2169:                 Connection connection = factory.createConnection();
1:6cf2169:                 connection.start();
1:6cf2169:                 Session session = connection.createSession(false, Session.AUTO_ACKNOWLEDGE);
1:6cf2169:                 Queue destination = session.createQueue(getName());
1:6cf2169: 
1:6cf2169:                 // consumer
1:6cf2169:                 MessageConsumer consumer = session.createConsumer(destination);
1:6cf2169:                 ConsumerBean listener = new ConsumerBean();
1:6cf2169:                 consumer.setMessageListener(listener);
1:6cf2169: 
1:6cf2169:                 // producer
1:6cf2169:                 MessageProducer producer = session.createProducer(destination);
1:6cf2169:                 TextMessage message = session.createTextMessage("Hello World!");
1:6cf2169:                 producer.send(message);
1:6cf2169:                 producer.close();
1:6cf2169: 
1:6cf2169:                 listener.assertMessagesArrived(1);
1:6cf2169: 
1:6cf2169:                 consumer.close();
1:6cf2169:                 session.close();
1:6cf2169:                 connection.close();
1:6cf2169: 
1:6cf2169:                 broker.stop();
1:6cf2169:             }
1:6cf2169:         });
1:6cf2169:     }
1:6cf2169: 
1:6cf2169:     public void runTest(Task task) throws Exception {
1:b968c0c:         int before = Thread.currentThread().getThreadGroup().activeCount();
1:6cf2169: 
1:6cf2169:         task.execute();
1:6cf2169: 
1:6cf2169:         Thread.yield();
1:b968c0c:         // need to wait for slow servers
1:b968c0c:         Thread.sleep(5000);
1:6cf2169: 
1:b968c0c:         int after = Thread.currentThread().getThreadGroup().activeCount();
1:b968c0c:         int diff = Math.abs(before - after);
1:b968c0c:         assertTrue("Should be at most one more thread. Diff = " + diff, diff + 1 <= after);
1:6cf2169:     }
1:6cf2169: }
============================================================================
author:Timothy A. Bish
-------------------------------------------------------------------------------
commit:ef24cc9
author:Claus Ibsen
-------------------------------------------------------------------------------
commit:b968c0c
/////////////////////////////////////////////////////////////////////////
1:         int before = Thread.currentThread().getThreadGroup().activeCount();
1:         // need to wait for slow servers
1:         Thread.sleep(5000);
1:         int after = Thread.currentThread().getThreadGroup().activeCount();
1:         int diff = Math.abs(before - after);
1:         assertTrue("Should be at most one more thread. Diff = " + diff, diff + 1 <= after);
author:Hiram R. Chirino
-------------------------------------------------------------------------------
commit:b0c2a40
/////////////////////////////////////////////////////////////////////////
1:  * 
commit:fc00993
/////////////////////////////////////////////////////////////////////////
1: /**
1:  * Licensed to the Apache Software Foundation (ASF) under one or more
1:  * contributor license agreements.  See the NOTICE file distributed with
1:  * this work for additional information regarding copyright ownership.
1:  * The ASF licenses this file to You under the Apache License, Version 2.0
1:  * (the "License"); you may not use this file except in compliance with
1:  * the License.  You may obtain a copy of the License at
/////////////////////////////////////////////////////////////////////////
1:         void execute() throws Exception;
commit:74a7a8b
/////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////
1: import org.apache.activemq.ActiveMQConnectionFactory;
1: import org.apache.activemq.broker.BrokerService;
1: import org.apache.activemq.spring.ConsumerBean;
commit:fed2d6b
/////////////////////////////////////////////////////////////////////////
0: //        Thread.currentThread().getThreadGroup().list();
0: //        Thread.currentThread().getThreadGroup().list();
author:James Strachan
-------------------------------------------------------------------------------
commit:a974625
/////////////////////////////////////////////////////////////////////////
0:         int activeCount = Thread.currentThread().getThreadGroup().activeCount();
0:         assertTrue("Should be at most one more thread but was: " + activeCount, numThreads + 1 <= activeCount);
commit:6cf2169
/////////////////////////////////////////////////////////////////////////
0: /*
0:  * Copyright 2005-2006 The Apache Software Foundation.
1:  *
0:  * Licensed under the Apache License, Version 2.0 (the "License");
0:  * you may not use this file except in compliance with the License.
0:  * You may obtain a copy of the License at
1:  *
1:  *      http://www.apache.org/licenses/LICENSE-2.0
1:  *
1:  * Unless required by applicable law or agreed to in writing, software
1:  * distributed under the License is distributed on an "AS IS" BASIS,
1:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:  * See the License for the specific language governing permissions and
1:  * limitations under the License.
1:  */
1: package org.apache.activemq.usecases;
1: 
0: import org.apache.activemq.ActiveMQConnectionFactory;
0: import org.apache.activemq.broker.BrokerService;
0: import org.apache.activemq.spring.ConsumerBean;
1: 
1: import javax.jms.Connection;
1: import javax.jms.MessageConsumer;
1: import javax.jms.MessageProducer;
1: import javax.jms.Queue;
1: import javax.jms.Session;
1: import javax.jms.TextMessage;
1: 
1: import junit.framework.TestCase;
1: 
1: /**
1:  * 
0:  * @version $Revision: $
1:  */
1: public class StartAndStopClientAndBrokerDoesNotLeaveThreadsRunningTest extends TestCase {
1: 
1:     public static interface Task {
0:         public void execute() throws Exception;
1:     }
1: 
1:     public void setUp() throws Exception {
1:     }
1: 
1:     public void testStartAndStopClientAndBrokerAndCheckNoThreadsAreLeft() throws Exception {
1:         runTest(new Task() {
1: 
1:             public void execute() throws Exception {
1:                 BrokerService broker = new BrokerService();
1:                 broker.setPersistent(false);
1:                 broker.start();
1: 
1:                 ActiveMQConnectionFactory factory = new ActiveMQConnectionFactory("vm://localhost");
1:                 Connection connection = factory.createConnection();
1:                 connection.start();
1:                 Session session = connection.createSession(false, Session.AUTO_ACKNOWLEDGE);
1:                 Queue destination = session.createQueue(getName());
1: 
1:                 // consumer
1:                 MessageConsumer consumer = session.createConsumer(destination);
1:                 ConsumerBean listener = new ConsumerBean();
1:                 consumer.setMessageListener(listener);
1: 
1:                 // producer
1:                 MessageProducer producer = session.createProducer(destination);
1:                 TextMessage message = session.createTextMessage("Hello World!");
1:                 producer.send(message);
1:                 producer.close();
1: 
1:                 listener.assertMessagesArrived(1);
1: 
1:                 consumer.close();
1:                 session.close();
1:                 connection.close();
1: 
1:                 broker.stop();
1:             }
1:         });
1:     }
1: 
1:     public void runTest(Task task) throws Exception {
0:         int numThreads = Thread.currentThread().getThreadGroup().activeCount();
0:         Thread.currentThread().getThreadGroup().list();
1: 
1:         task.execute();
1: 
1:         Thread.yield();
0:         Thread.sleep(2000); // Wait for the threads to exit on their own
1: 
0:         Thread.currentThread().getThreadGroup().list();
0:         assertEquals(numThreads, Thread.currentThread().getThreadGroup().activeCount());
1:     }
1: }
============================================================================