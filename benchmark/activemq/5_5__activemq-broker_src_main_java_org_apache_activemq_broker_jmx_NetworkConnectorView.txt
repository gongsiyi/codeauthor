1:d29ca2a: /**
1:57b4941:  * Licensed to the Apache Software Foundation (ASF) under one or more
1:57b4941:  * contributor license agreements.  See the NOTICE file distributed with
1:57b4941:  * this work for additional information regarding copyright ownership.
1:57b4941:  * The ASF licenses this file to You under the Apache License, Version 2.0
1:57b4941:  * (the "License"); you may not use this file except in compliance with
1:57b4941:  * the License.  You may obtain a copy of the License at
3:d29ca2a:  *
1:230a86c:  *      http://www.apache.org/licenses/LICENSE-2.0
1:d29ca2a:  *
1:d29ca2a:  * Unless required by applicable law or agreed to in writing, software
1:d29ca2a:  * distributed under the License is distributed on an "AS IS" BASIS,
1:d29ca2a:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:d29ca2a:  * See the License for the specific language governing permissions and
1:d29ca2a:  * limitations under the License.
1:d29ca2a:  */
1:d29ca2a: package org.apache.activemq.broker.jmx;
1:d29ca2a: 
1:d29ca2a: import org.apache.activemq.network.NetworkConnector;
1:d29ca2a: 
1:d29ca2a: public class NetworkConnectorView implements NetworkConnectorViewMBean {
1:d29ca2a: 
1:d29ca2a:     private final NetworkConnector connector;
1:d29ca2a: 
1:d29ca2a:     public NetworkConnectorView(NetworkConnector connector) {
1:d29ca2a:         this.connector = connector;
11:ec6e6a5:     }
1:f812e34: 
1:297eadf:     @Override
1:d29ca2a:     public void start() throws Exception {
1:d29ca2a:         connector.start();
1:ec6e6a5:     }
1:d29ca2a: 
1:297eadf:     @Override
1:d29ca2a:     public void stop() throws Exception {
1:f812e34:         connector.stop();
1:ec6e6a5:     }
1:ec6e6a5: 
1:297eadf:     @Override
1:f812e34:     public String getName() {
1:f812e34:         return connector.getName();
1:f812e34:     }
1:ec6e6a5: 
1:297eadf:     @Override
1:a95c6db:     public int getMessageTTL() {
1:a95c6db:         return connector.getMessageTTL();
1:a95c6db:     }
1:a95c6db: 
1:297eadf:     @Override
1:a95c6db:     public int getConsumerTTL() {
1:a95c6db:         return connector.getConsumerTTL();
1:f812e34:     }
1:ec6e6a5: 
1:297eadf:     @Override
1:f812e34:     public int getPrefetchSize() {
1:f812e34:         return connector.getPrefetchSize();
1:f812e34:     }
1:ec6e6a5: 
1:297eadf:     @Override
1:297eadf:     public int getAdvisoryPrefetchSize() {
1:297eadf:         return connector.getAdvisoryPrefetchSize();
1:297eadf:     }
1:297eadf: 
1:297eadf:     @Override
1:f812e34:     public String getUserName() {
1:f812e34:         return connector.getUserName();
1:f812e34:     }
1:ec6e6a5: 
1:297eadf:     @Override
1:f812e34:     public boolean isBridgeTempDestinations() {
1:f812e34:         return connector.isBridgeTempDestinations();
1:f812e34:     }
1:ec6e6a5: 
1:297eadf:     @Override
1:f812e34:     public boolean isConduitSubscriptions() {
1:f812e34:         return connector.isConduitSubscriptions();
1:f812e34:     }
1:ec6e6a5: 
1:297eadf:     @Override
1:f812e34:     public boolean isDecreaseNetworkConsumerPriority() {
1:f812e34:         return connector.isDecreaseNetworkConsumerPriority();
1:f812e34:     }
1:ec6e6a5: 
1:297eadf:     @Override
1:f812e34:     public boolean isDispatchAsync() {
1:f812e34:         return connector.isDispatchAsync();
1:f812e34:     }
1:ec6e6a5: 
1:297eadf:     @Override
1:f812e34:     public boolean isDynamicOnly() {
1:f812e34:         return connector.isDynamicOnly();
1:f812e34:     }
1:ec6e6a5: 
1:297eadf:     @Override
1:082bbf0:     public boolean isDuplex() {
1:082bbf0:         return connector.isDuplex();
1:ec6e6a5:     }
1:d29ca2a: 
1:297eadf:     @Override
1:1898f9a:     public boolean isSuppressDuplicateQueueSubscriptions() {
1:1898f9a:         return connector.isSuppressDuplicateQueueSubscriptions();
1:ec6e6a5:     }
1:1898f9a: 
1:297eadf:     @Override
1:1898f9a:     public boolean isSuppressDuplicateTopicSubscriptions() {
1:1898f9a:         return connector.isSuppressDuplicateTopicSubscriptions();
1:ec6e6a5:     }
1:1898f9a: 
1:297eadf:     @Override
1:f812e34:     public void setBridgeTempDestinations(boolean bridgeTempDestinations) {
1:f812e34:         connector.setBridgeTempDestinations(bridgeTempDestinations);
1:f812e34:     }
1:ec6e6a5: 
1:297eadf:     @Override
1:f812e34:     public void setConduitSubscriptions(boolean conduitSubscriptions) {
1:f812e34:         connector.setConduitSubscriptions(conduitSubscriptions);
1:f812e34:     }
1:ec6e6a5: 
1:297eadf:     @Override
1:f812e34:     public void setDispatchAsync(boolean dispatchAsync) {
1:f812e34:         connector.setDispatchAsync(dispatchAsync);
1:f812e34:     }
1:ec6e6a5: 
1:297eadf:     @Override
1:f812e34:     public void setDynamicOnly(boolean dynamicOnly) {
1:f812e34:         connector.setDynamicOnly(dynamicOnly);
1:f812e34:     }
1:ec6e6a5: 
1:297eadf:     @Override
1:a95c6db:     public void setMessageTTL(int messageTTL) {
1:a95c6db:         connector.setMessageTTL(messageTTL);
1:a95c6db:     }
1:a95c6db: 
1:297eadf:     @Override
1:a95c6db:     public void setConsumerTTL(int consumerTTL) {
1:a95c6db:         connector.setConsumerTTL(consumerTTL);
1:f812e34:     }
1:ec6e6a5: 
1:297eadf:     @Override
1:f812e34:     public void setPassword(String password) {
1:f812e34:         connector.setPassword(password);
1:f812e34:     }
1:ec6e6a5: 
1:297eadf:     @Override
1:f812e34:     public void setPrefetchSize(int prefetchSize) {
1:f812e34:         connector.setPrefetchSize(prefetchSize);
1:f812e34:     }
1:ec6e6a5: 
1:297eadf:     @Override
1:297eadf:     public void setAdvisoryPrefetchSize(int advisoryPrefetchSize) {
1:297eadf:         connector.setAdvisoryPrefetchSize(advisoryPrefetchSize);
1:297eadf:     }
1:297eadf: 
1:297eadf:     @Override
1:f812e34:     public void setUserName(String userName) {
1:f812e34:         connector.setUserName(userName);
1:f812e34:     }
1:ec6e6a5: 
1:297eadf:     @Override
1:f812e34:     public String getPassword() {
1:f812e34:         String pw = connector.getPassword();
1:f812e34:         // Hide the password for security reasons.
1:ecf89a6:         if (pw != null) {
1:f812e34:             pw = pw.replaceAll(".", "*");
1:ecf89a6:         }
1:f812e34:         return pw;
1:f812e34:     }
1:ec6e6a5: 
1:297eadf:     @Override
1:f812e34:     public void setDecreaseNetworkConsumerPriority(boolean decreaseNetworkConsumerPriority) {
1:f812e34:         connector.setDecreaseNetworkConsumerPriority(decreaseNetworkConsumerPriority);
1:f812e34:     }
1:1898f9a: 
1:297eadf:     @Override
1:1898f9a:     public void setSuppressDuplicateQueueSubscriptions(boolean val) {
1:1898f9a:         connector.setSuppressDuplicateQueueSubscriptions(val);
1:ec6e6a5:     }
2:1898f9a: 
1:297eadf:     @Override
1:1898f9a:     public void setSuppressDuplicateTopicSubscriptions(boolean val) {
1:1898f9a:         connector.setSuppressDuplicateTopicSubscriptions(val);
1:ec6e6a5:     }
1:ec6e6a5: }
============================================================================
author:Christopher L. Shannon (cshannon)
-------------------------------------------------------------------------------
commit:297eadf
/////////////////////////////////////////////////////////////////////////
1:     @Override
1:     @Override
1:     @Override
1:     @Override
1:     @Override
1:     @Override
1:     @Override
1:     public int getAdvisoryPrefetchSize() {
1:         return connector.getAdvisoryPrefetchSize();
1:     }
1: 
1:     @Override
1:     @Override
1:     @Override
1:     @Override
1:     @Override
1:     @Override
1:     @Override
1:     @Override
1:     @Override
1:     @Override
1:     @Override
1:     @Override
1:     @Override
1:     @Override
1:     @Override
1:     @Override
1:     @Override
1:     @Override
1:     public void setAdvisoryPrefetchSize(int advisoryPrefetchSize) {
1:         connector.setAdvisoryPrefetchSize(advisoryPrefetchSize);
1:     }
1: 
1:     @Override
1:     @Override
/////////////////////////////////////////////////////////////////////////
1:     @Override
1:     @Override
1:     @Override
author:Gary Tully
-------------------------------------------------------------------------------
commit:a95c6db
/////////////////////////////////////////////////////////////////////////
1:     public int getMessageTTL() {
1:         return connector.getMessageTTL();
1:     }
1: 
1:     public int getConsumerTTL() {
1:         return connector.getConsumerTTL();
/////////////////////////////////////////////////////////////////////////
1:     public void setMessageTTL(int messageTTL) {
1:         connector.setMessageTTL(messageTTL);
1:     }
1: 
1:     public void setConsumerTTL(int consumerTTL) {
1:         connector.setConsumerTTL(consumerTTL);
author:Hiram R. Chirino
-------------------------------------------------------------------------------
commit:58aca86
commit:ecf89a6
/////////////////////////////////////////////////////////////////////////
1:         if (pw != null) {
1:         }
commit:f812e34
/////////////////////////////////////////////////////////////////////////
1: 
1:         connector.stop();
1:     public String getName() {
1:         return connector.getName();
1:     }
0:     public int getNetworkTTL() {
0:         return connector.getNetworkTTL();
1:     }
1:     public int getPrefetchSize() {
1:         return connector.getPrefetchSize();
1:     }
1:     public String getUserName() {
1:         return connector.getUserName();
1:     }
1:     public boolean isBridgeTempDestinations() {
1:         return connector.isBridgeTempDestinations();
1:     }
1:     public boolean isConduitSubscriptions() {
1:         return connector.isConduitSubscriptions();
1:     }
1:     public boolean isDecreaseNetworkConsumerPriority() {
1:         return connector.isDecreaseNetworkConsumerPriority();
1:     }
1:     public boolean isDispatchAsync() {
1:         return connector.isDispatchAsync();
1:     }
1:     public boolean isDynamicOnly() {
1:         return connector.isDynamicOnly();
1:     }
1:     public void setBridgeTempDestinations(boolean bridgeTempDestinations) {
1:         connector.setBridgeTempDestinations(bridgeTempDestinations);
1:     }
1:     public void setConduitSubscriptions(boolean conduitSubscriptions) {
1:         connector.setConduitSubscriptions(conduitSubscriptions);
1:     }
1:     public void setDispatchAsync(boolean dispatchAsync) {
1:         connector.setDispatchAsync(dispatchAsync);
1:     }
1:     public void setDynamicOnly(boolean dynamicOnly) {
1:         connector.setDynamicOnly(dynamicOnly);
1:     }
0:     public void setNetworkTTL(int networkTTL) {
0:         connector.setNetworkTTL(networkTTL);
1:     }
1:     public void setPassword(String password) {
1:         connector.setPassword(password);
1:     }
1:     public void setPrefetchSize(int prefetchSize) {
1:         connector.setPrefetchSize(prefetchSize);
1:     }
1:     public void setUserName(String userName) {
1:         connector.setUserName(userName);
1:     }
1:     public String getPassword() {
1:         String pw = connector.getPassword();
1:         // Hide the password for security reasons.
0:         if (pw != null)
1:             pw = pw.replaceAll(".", "*");
1:         return pw;
1:     }
1:     public void setDecreaseNetworkConsumerPriority(boolean decreaseNetworkConsumerPriority) {
1:         connector.setDecreaseNetworkConsumerPriority(decreaseNetworkConsumerPriority);
1:     }
commit:230a86c
/////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////
1:  *      http://www.apache.org/licenses/LICENSE-2.0
commit:ec6e6a5
/////////////////////////////////////////////////////////////////////////
0:         connector.stop();       
1: 
0: 	public String getName() {
0: 		return connector.getName();
1: 	}
1: 
0: 	public int getNetworkTTL() {
0: 		return connector.getNetworkTTL();
1: 	}
1: 
0: 	public int getPrefetchSize() {
0: 		return connector.getPrefetchSize();
1: 	}
1: 
0: 	public String getUserName() {
0: 		return connector.getUserName();
1: 	}
1: 
0: 	public boolean isBridgeTempDestinations() {
0: 		return connector.isBridgeTempDestinations();
1: 	}
1: 
0: 	public boolean isConduitSubscriptions() {
0: 		return connector.isConduitSubscriptions();
1: 	}
1: 
0: 	public boolean isDecreaseNetworkConsumerPriority() {
0: 		return connector.isDecreaseNetworkConsumerPriority();
1: 	}
1: 
0: 	public boolean isDispatchAsync() {
0: 		return connector.isDispatchAsync();
1: 	}
1: 
0: 	public boolean isDynamicOnly() {
0: 		return connector.isDynamicOnly();
1: 	}
1: 
0: 	public void setBridgeTempDestinations(boolean bridgeTempDestinations) {
0: 		connector.setBridgeTempDestinations(bridgeTempDestinations);
1: 	}
1: 
0: 	public void setConduitSubscriptions(boolean conduitSubscriptions) {
0: 		connector.setConduitSubscriptions(conduitSubscriptions);
1: 	}
1: 
0: 	public void setDispatchAsync(boolean dispatchAsync) {
0: 		connector.setDispatchAsync(dispatchAsync);
1: 	}
1: 
0: 	public void setDynamicOnly(boolean dynamicOnly) {
0: 		connector.setDynamicOnly(dynamicOnly);
1: 	}
1: 
0: 	public void setNetworkTTL(int networkTTL) {
0: 		connector.setNetworkTTL(networkTTL);
1: 	}
1: 
0: 	public void setPassword(String password) {
0: 		connector.setPassword(password);
1: 	}
1: 
0: 	public void setPrefetchSize(int prefetchSize) {
0: 		connector.setPrefetchSize(prefetchSize);
1: 	}
1: 
0: 	public void setUserName(String userName) {
0: 		connector.setUserName(userName);
1: 	}
1: 
0: 	public String getPassword() {
0: 		String pw = connector.getPassword();
0: 		// Hide the password for security reasons.
0: 		if( pw!= null ) 
0: 			pw = pw.replaceAll(".", "*");
0: 		return pw;
1: 	}
1: 
0: 	public void setDecreaseNetworkConsumerPriority(boolean decreaseNetworkConsumerPriority) {
0: 		connector.setDecreaseNetworkConsumerPriority(decreaseNetworkConsumerPriority);
1: 	}
commit:57b4941
/////////////////////////////////////////////////////////////////////////
1:  * Licensed to the Apache Software Foundation (ASF) under one or more
1:  * contributor license agreements.  See the NOTICE file distributed with
1:  * this work for additional information regarding copyright ownership.
1:  * The ASF licenses this file to You under the Apache License, Version 2.0
1:  * (the "License"); you may not use this file except in compliance with
1:  * the License.  You may obtain a copy of the License at
commit:48b4869
/////////////////////////////////////////////////////////////////////////
0:  * Copyright 2005-2006 The Apache Software Foundation
commit:d29ca2a
/////////////////////////////////////////////////////////////////////////
1: /**
1:  *
0:  * Copyright 2004 The Apache Software Foundation
1:  *
0:  * Licensed under the Apache License, Version 2.0 (the "License");
0:  * you may not use this file except in compliance with the License.
0:  * You may obtain a copy of the License at
1:  *
0:  * http://www.apache.org/licenses/LICENSE-2.0
1:  *
1:  * Unless required by applicable law or agreed to in writing, software
1:  * distributed under the License is distributed on an "AS IS" BASIS,
1:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:  * See the License for the specific language governing permissions and
1:  * limitations under the License.
1:  */
1: package org.apache.activemq.broker.jmx;
1: 
1: import org.apache.activemq.network.NetworkConnector;
1: 
1: public class NetworkConnectorView implements NetworkConnectorViewMBean {
1: 
1:     private final NetworkConnector connector;
1: 
1:     public NetworkConnectorView(NetworkConnector connector) {
1:         this.connector = connector;
0:     }
1:     
1:     public void start() throws Exception {
1:         connector.start();
0:     }
1: 
1:     public void stop() throws Exception {
0:         connector.stop();
0:     }
0: }
author:Timothy A. Bish
-------------------------------------------------------------------------------
commit:1898f9a
/////////////////////////////////////////////////////////////////////////
1: 
1:     public boolean isSuppressDuplicateQueueSubscriptions() {
1:         return connector.isSuppressDuplicateQueueSubscriptions();
0:     }
1: 
1:     public boolean isSuppressDuplicateTopicSubscriptions() {
1:         return connector.isSuppressDuplicateTopicSubscriptions();
0:     }
1: 
/////////////////////////////////////////////////////////////////////////
1: 
1:     public void setSuppressDuplicateQueueSubscriptions(boolean val) {
1:         connector.setSuppressDuplicateQueueSubscriptions(val);
0:     }
1: 
1:     public void setSuppressDuplicateTopicSubscriptions(boolean val) {
1:         connector.setSuppressDuplicateTopicSubscriptions(val);
0:     }
author:Robert Davies
-------------------------------------------------------------------------------
commit:082bbf0
/////////////////////////////////////////////////////////////////////////
0:     
1:     public boolean isDuplex() {
1:         return connector.isDuplex();
0:     }
============================================================================