1:4ea435b: /*
1:4ea435b:  * Licensed to the Apache Software Foundation (ASF) under one or more
1:4ea435b:  * contributor license agreements.  See the NOTICE file distributed with
1:4ea435b:  * this work for additional information regarding copyright ownership.
1:4ea435b:  * The ASF licenses this file to You under the Apache License, Version 2.0
1:4ea435b:  * (the "License"); you may not use this file except in compliance with
1:4ea435b:  * the License.  You may obtain a copy of the License at
1:4ea435b:  *
1:4ea435b:  *      http://www.apache.org/licenses/LICENSE-2.0
1:4ea435b:  *
1:4ea435b:  * Unless required by applicable law or agreed to in writing, software
1:4ea435b:  * distributed under the License is distributed on an "AS IS" BASIS,
1:4ea435b:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:4ea435b:  * See the License for the specific language governing permissions and
1:4ea435b:  * limitations under the License.
1:4ea435b:  */
1:4ea435b: package org.apache.activemq.bugs;
1:4ea435b: 
1:4ea435b: import static org.junit.Assert.assertNotNull;
1:4ea435b: import static org.junit.Assert.assertTrue;
1:4ea435b: 
1:4ea435b: import org.apache.activemq.ActiveMQConnection;
1:4ea435b: import org.apache.activemq.ActiveMQConnectionFactory;
1:4ea435b: import org.apache.activemq.broker.BrokerService;
1:4ea435b: import org.apache.activemq.broker.TransportConnector;
1:4ea435b: import org.apache.activemq.transport.failover.FailoverTransport;
1:4ea435b: import org.junit.After;
1:4ea435b: import org.junit.Before;
1:4ea435b: import org.junit.Test;
1:4ea435b: 
1:4ea435b: /**
1:4ea435b:  * Test for priority backup URI handling.
1:4ea435b:  */
1:4ea435b: public class AMQ5336Test {
1:4ea435b: 
1:4ea435b:     private BrokerService brokerService;
1:4ea435b:     private String connectionUri;
1:4ea435b: 
1:4ea435b:     @Before
1:4ea435b:     public void before() throws Exception {
1:4ea435b:         brokerService = new BrokerService();
1:4ea435b:         TransportConnector connector = brokerService.addConnector("tcp://localhost:0");
1:4ea435b:         connectionUri = connector.getPublishableConnectString();
1:4ea435b:         brokerService.setDeleteAllMessagesOnStartup(true);
1:4ea435b:         brokerService.start();
1:4ea435b:         brokerService.waitUntilStarted();
1:4ea435b:     }
1:4ea435b: 
1:4ea435b:     @After
1:4ea435b:     public void after() throws Exception {
1:4ea435b:         if (brokerService != null) {
1:4ea435b:             brokerService.stop();
1:4ea435b:             brokerService.waitUntilStopped();
1:4ea435b:         }
1:4ea435b:     }
1:4ea435b: 
1:4ea435b:     @Test
1:4ea435b:     public void test() throws Exception {
1:4ea435b:         String uri = "failover:(" + connectionUri + ")" +
1:4ea435b:                                 "?randomize=false&" +
1:4ea435b:                                 "nested.socket.tcpNoDelay=true&" +
1:4ea435b:                                 "priorityBackup=true&" +
1:4ea435b:                                 "priorityURIs=" + connectionUri + "&" +
1:4ea435b:                                 "initialReconnectDelay=1000&" +
1:4ea435b:                                 "useExponentialBackOff=false";
1:4ea435b: 
1:4ea435b:         ActiveMQConnectionFactory cf = new ActiveMQConnectionFactory(uri);
1:4ea435b:         ActiveMQConnection connection = (ActiveMQConnection) cf.createConnection();
1:4ea435b:         connection.start();
1:4ea435b: 
1:4ea435b:         FailoverTransport failover = connection.getTransport().narrow(FailoverTransport.class);
1:4ea435b:         assertNotNull(failover);
1:4ea435b:         assertTrue(failover.isConnectedToPriority());
1:4ea435b: 
1:4ea435b:         connection.close();
1:4ea435b:     }
1:4ea435b: }
============================================================================
author:Timothy Bish
-------------------------------------------------------------------------------
commit:4ea435b
/////////////////////////////////////////////////////////////////////////
1: /*
1:  * Licensed to the Apache Software Foundation (ASF) under one or more
1:  * contributor license agreements.  See the NOTICE file distributed with
1:  * this work for additional information regarding copyright ownership.
1:  * The ASF licenses this file to You under the Apache License, Version 2.0
1:  * (the "License"); you may not use this file except in compliance with
1:  * the License.  You may obtain a copy of the License at
1:  *
1:  *      http://www.apache.org/licenses/LICENSE-2.0
1:  *
1:  * Unless required by applicable law or agreed to in writing, software
1:  * distributed under the License is distributed on an "AS IS" BASIS,
1:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:  * See the License for the specific language governing permissions and
1:  * limitations under the License.
1:  */
1: package org.apache.activemq.bugs;
1: 
1: import static org.junit.Assert.assertNotNull;
1: import static org.junit.Assert.assertTrue;
1: 
1: import org.apache.activemq.ActiveMQConnection;
1: import org.apache.activemq.ActiveMQConnectionFactory;
1: import org.apache.activemq.broker.BrokerService;
1: import org.apache.activemq.broker.TransportConnector;
1: import org.apache.activemq.transport.failover.FailoverTransport;
1: import org.junit.After;
1: import org.junit.Before;
1: import org.junit.Test;
1: 
1: /**
1:  * Test for priority backup URI handling.
1:  */
1: public class AMQ5336Test {
1: 
1:     private BrokerService brokerService;
1:     private String connectionUri;
1: 
1:     @Before
1:     public void before() throws Exception {
1:         brokerService = new BrokerService();
1:         TransportConnector connector = brokerService.addConnector("tcp://localhost:0");
1:         connectionUri = connector.getPublishableConnectString();
1:         brokerService.setDeleteAllMessagesOnStartup(true);
1:         brokerService.start();
1:         brokerService.waitUntilStarted();
1:     }
1: 
1:     @After
1:     public void after() throws Exception {
1:         if (brokerService != null) {
1:             brokerService.stop();
1:             brokerService.waitUntilStopped();
1:         }
1:     }
1: 
1:     @Test
1:     public void test() throws Exception {
1:         String uri = "failover:(" + connectionUri + ")" +
1:                                 "?randomize=false&" +
1:                                 "nested.socket.tcpNoDelay=true&" +
1:                                 "priorityBackup=true&" +
1:                                 "priorityURIs=" + connectionUri + "&" +
1:                                 "initialReconnectDelay=1000&" +
1:                                 "useExponentialBackOff=false";
1: 
1:         ActiveMQConnectionFactory cf = new ActiveMQConnectionFactory(uri);
1:         ActiveMQConnection connection = (ActiveMQConnection) cf.createConnection();
1:         connection.start();
1: 
1:         FailoverTransport failover = connection.getTransport().narrow(FailoverTransport.class);
1:         assertNotNull(failover);
1:         assertTrue(failover.isConnectedToPriority());
1: 
1:         connection.close();
1:     }
1: }
============================================================================