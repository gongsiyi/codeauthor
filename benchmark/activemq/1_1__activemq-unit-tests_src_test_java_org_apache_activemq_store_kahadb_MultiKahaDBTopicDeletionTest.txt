2:73d1bcd: /**
1:73d1bcd:  * Licensed to the Apache Software Foundation (ASF) under one or more
1:73d1bcd:  * contributor license agreements.  See the NOTICE file distributed with
1:73d1bcd:  * this work for additional information regarding copyright ownership.
1:73d1bcd:  * The ASF licenses this file to You under the Apache License, Version 2.0
1:73d1bcd:  * (the "License"); you may not use this file except in compliance with
1:73d1bcd:  * the License.  You may obtain a copy of the License at
1:73d1bcd:  *
1:73d1bcd:  *      http://www.apache.org/licenses/LICENSE-2.0
1:73d1bcd:  *
1:73d1bcd:  * Unless required by applicable law or agreed to in writing, software
1:73d1bcd:  * distributed under the License is distributed on an "AS IS" BASIS,
1:73d1bcd:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:73d1bcd:  * See the License for the specific language governing permissions and
1:73d1bcd:  * limitations under the License.
2:73d1bcd:  */
1:73d1bcd: package org.apache.activemq.store.kahadb;
35:73d1bcd: 
1:73d1bcd: import java.util.Arrays;
1:73d1bcd: import java.util.Collection;
1:73d1bcd: 
1:73d1bcd: import javax.jms.Connection;
1:73d1bcd: import javax.jms.JMSException;
1:73d1bcd: import javax.jms.Session;
1:2117768: import javax.jms.Topic;
1:73d1bcd: 
1:73d1bcd: import org.apache.activemq.ActiveMQConnectionFactory;
1:2117768: import org.apache.activemq.command.ActiveMQDestination;
1:73d1bcd: import org.apache.activemq.command.ActiveMQTopic;
1:73d1bcd: import org.apache.commons.io.filefilter.WildcardFileFilter;
1:73d1bcd: import org.junit.runner.RunWith;
1:73d1bcd: import org.junit.runners.Parameterized;
1:73d1bcd: import org.junit.runners.Parameterized.Parameters;
1:73d1bcd: import org.slf4j.Logger;
1:73d1bcd: import org.slf4j.LoggerFactory;
1:73d1bcd: 
1:73d1bcd: /**
1:73d1bcd:  * AMQ-5875
1:73d1bcd:  *
1:73d1bcd:  * This test shows that when multiple destinations share a single KahaDB
1:73d1bcd:  * instance when using mKahaDB, that the deletion of one Topic will no longer
1:73d1bcd:  * cause an IllegalStateException and the store will be properly kept around
1:73d1bcd:  * until all destinations associated with the store are gone.
1:73d1bcd:  *
1:73d1bcd:  * */
1:73d1bcd: @RunWith(Parameterized.class)
1:2117768: public class MultiKahaDBTopicDeletionTest extends AbstractMultiKahaDBDeletionTest {
1:73d1bcd:     protected static final Logger LOG = LoggerFactory
1:73d1bcd:             .getLogger(MultiKahaDBTopicDeletionTest.class);
1:73d1bcd: 
1:73d1bcd:     protected static ActiveMQTopic TOPIC1 = new ActiveMQTopic("test.>");
1:73d1bcd:     protected static ActiveMQTopic TOPIC2 = new ActiveMQTopic("test.t.topic");
1:73d1bcd: 
1:73d1bcd:     @Parameters
1:73d1bcd:     public static Collection<Object[]> data() {
1:73d1bcd: 
1:73d1bcd:         //Test with topics created in different orders
1:73d1bcd:         return Arrays.asList(new Object[][] {
1:73d1bcd:                 {TOPIC1, TOPIC2},
1:73d1bcd:                 {TOPIC2, TOPIC1}
1:73d1bcd:         });
9:73d1bcd:     }
1:73d1bcd: 
1:2117768:     public MultiKahaDBTopicDeletionTest(ActiveMQTopic dest1,
1:2117768:             ActiveMQTopic dest2) {
1:2117768:         super(dest1, dest2);
1:73d1bcd:     }
1:73d1bcd: 
1:2117768:     @Override
1:2117768:     protected void createConsumer(ActiveMQDestination dest) throws JMSException {
1:73d1bcd:         ActiveMQConnectionFactory factory = new ActiveMQConnectionFactory(
1:73d1bcd:                 brokerConnectURI);
1:73d1bcd:         Connection connection = factory.createConnection();
1:73d1bcd:         connection.setClientID("client1");
1:73d1bcd:         connection.start();
1:73d1bcd:         Session session = connection.createSession(false,
1:73d1bcd:                 Session.AUTO_ACKNOWLEDGE);
1:2117768:         session.createDurableSubscriber((Topic) dest, "sub1");
1:2117768:     }
1:2117768: 
1:2117768:     @Override
1:2117768:     protected WildcardFileFilter getStoreFileFilter() {
1:2117768:         return new WildcardFileFilter("topic*");
1:73d1bcd:     }
1:73d1bcd: 
1:73d1bcd: }
============================================================================
author:Christopher L. Shannon (cshannon)
-------------------------------------------------------------------------------
commit:2117768
/////////////////////////////////////////////////////////////////////////
1: import javax.jms.Topic;
1: import org.apache.activemq.command.ActiveMQDestination;
/////////////////////////////////////////////////////////////////////////
1: public class MultiKahaDBTopicDeletionTest extends AbstractMultiKahaDBDeletionTest {
/////////////////////////////////////////////////////////////////////////
1:     public MultiKahaDBTopicDeletionTest(ActiveMQTopic dest1,
1:             ActiveMQTopic dest2) {
1:         super(dest1, dest2);
1:     @Override
1:     protected void createConsumer(ActiveMQDestination dest) throws JMSException {
/////////////////////////////////////////////////////////////////////////
1:         session.createDurableSubscriber((Topic) dest, "sub1");
1:     }
1: 
1:     @Override
1:     protected WildcardFileFilter getStoreFileFilter() {
1:         return new WildcardFileFilter("topic*");
commit:73d1bcd
/////////////////////////////////////////////////////////////////////////
1: /**
1:  * Licensed to the Apache Software Foundation (ASF) under one or more
1:  * contributor license agreements.  See the NOTICE file distributed with
1:  * this work for additional information regarding copyright ownership.
1:  * The ASF licenses this file to You under the Apache License, Version 2.0
1:  * (the "License"); you may not use this file except in compliance with
1:  * the License.  You may obtain a copy of the License at
1:  *
1:  *      http://www.apache.org/licenses/LICENSE-2.0
1:  *
1:  * Unless required by applicable law or agreed to in writing, software
1:  * distributed under the License is distributed on an "AS IS" BASIS,
1:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:  * See the License for the specific language governing permissions and
1:  * limitations under the License.
1:  */
1: package org.apache.activemq.store.kahadb;
1: 
0: import static org.junit.Assert.assertEquals;
1: 
0: import java.io.File;
0: import java.io.IOException;
0: import java.net.URI;
0: import java.util.ArrayList;
1: import java.util.Arrays;
1: import java.util.Collection;
0: import java.util.List;
1: 
1: import javax.jms.Connection;
1: import javax.jms.JMSException;
1: import javax.jms.Session;
1: 
1: import org.apache.activemq.ActiveMQConnectionFactory;
0: import org.apache.activemq.broker.Broker;
0: import org.apache.activemq.broker.BrokerService;
0: import org.apache.activemq.broker.TransportConnector;
1: import org.apache.activemq.command.ActiveMQTopic;
0: import org.apache.commons.io.FileUtils;
1: import org.apache.commons.io.filefilter.WildcardFileFilter;
0: import org.junit.After;
0: import org.junit.Before;
0: import org.junit.Rule;
0: import org.junit.Test;
0: import org.junit.rules.TemporaryFolder;
1: import org.junit.runner.RunWith;
1: import org.junit.runners.Parameterized;
1: import org.junit.runners.Parameterized.Parameters;
1: import org.slf4j.Logger;
1: import org.slf4j.LoggerFactory;
1: 
1: /**
1:  * AMQ-5875
1:  *
1:  * This test shows that when multiple destinations share a single KahaDB
1:  * instance when using mKahaDB, that the deletion of one Topic will no longer
1:  * cause an IllegalStateException and the store will be properly kept around
1:  * until all destinations associated with the store are gone.
1:  *
1:  * */
1: @RunWith(Parameterized.class)
0: public class MultiKahaDBTopicDeletionTest {
1:     protected static final Logger LOG = LoggerFactory
1:             .getLogger(MultiKahaDBTopicDeletionTest.class);
1: 
0:     protected BrokerService brokerService;
0:     protected Broker broker;
0:     protected URI brokerConnectURI;
0:     protected File storeDir;
0:     protected ActiveMQTopic topic1;
0:     protected ActiveMQTopic topic2;
1: 
1:     protected static ActiveMQTopic TOPIC1 = new ActiveMQTopic("test.>");
1:     protected static ActiveMQTopic TOPIC2 = new ActiveMQTopic("test.t.topic");
1: 
1: 
1:     @Parameters
1:     public static Collection<Object[]> data() {
1: 
1:         //Test with topics created in different orders
1:         return Arrays.asList(new Object[][] {
1:                 {TOPIC1, TOPIC2},
1:                 {TOPIC2, TOPIC1}
1:         });
1:     }
1: 
0:     public MultiKahaDBTopicDeletionTest(ActiveMQTopic topic1, ActiveMQTopic topic2) {
0:         this.topic1 = topic1;
0:         this.topic2 = topic2;
1:     }
1: 
0:     @Rule
0:     public TemporaryFolder tempTestDir = new TemporaryFolder();
1: 
0:     @Before
0:     public void startBroker() throws Exception {
0:         setUpBroker(true);
1:     }
1: 
0:     protected void setUpBroker(boolean clearDataDir) throws Exception {
0:         brokerService = new BrokerService();
0:         this.initPersistence(brokerService);
0:         // set up a transport
0:         TransportConnector connector = brokerService
0:                 .addConnector(new TransportConnector());
0:         connector.setUri(new URI("tcp://0.0.0.0:0"));
0:         connector.setName("tcp");
1: 
0:         brokerService.start();
0:         brokerService.waitUntilStarted();
0:         brokerConnectURI = brokerService.getConnectorByName("tcp")
0:                 .getConnectUri();
0:         broker = brokerService.getBroker();
1:     }
1: 
0:     @After
0:     public void stopBroker() throws Exception {
0:         brokerService.stop();
0:         brokerService.waitUntilStopped();
1:     }
1: 
0:     protected void initPersistence(BrokerService brokerService)
0:             throws IOException {
0:         storeDir = tempTestDir.getRoot();
0:         brokerService.setPersistent(true);
1: 
0:         // setup multi-kaha adapter
0:         MultiKahaDBPersistenceAdapter persistenceAdapter = new MultiKahaDBPersistenceAdapter();
0:         persistenceAdapter.setDirectory(storeDir);
1: 
0:         KahaDBPersistenceAdapter kahaStore = new KahaDBPersistenceAdapter();
0:         kahaStore.setJournalMaxFileLength(1024 * 512);
1: 
0:         // set up a store per destination
0:         FilteredKahaDBPersistenceAdapter filtered = new FilteredKahaDBPersistenceAdapter();
0:         filtered.setPersistenceAdapter(kahaStore);
0:         filtered.setPerDestination(true);
0:         List<FilteredKahaDBPersistenceAdapter> stores = new ArrayList<>();
0:         stores.add(filtered);
1: 
0:         persistenceAdapter.setFilteredPersistenceAdapters(stores);
0:         brokerService.setPersistenceAdapter(persistenceAdapter);
1:     }
1: 
1:     /**
0:      * Test that a topic can be deleted and the other topic can still be subscribed to
0:      * @throws Exception
1:      */
0:     @Test
0:     public void testTopic1Deletion() throws Exception {
0:         LOG.info("Creating {} first, {} second", topic1, topic2);
0:         LOG.info("Removing {}, subscribing to {}", topic1, topic2);
1: 
0:         // Create two topics
0:         broker.addDestination(brokerService.getAdminConnectionContext(), topic1, false);
0:         broker.addDestination(brokerService.getAdminConnectionContext(), topic2, false);
1: 
0:         // remove topic2
0:         broker.removeDestination(brokerService.getAdminConnectionContext(), topic1, 100);
1: 
0:         // try and create a subscription on topic2, before AMQ-5875 this
0:         //would cause an IllegalStateException
0:         createSubscriber(topic2);
1:     }
1: 
1: 
0:     @Test
0:     public void testTopic2Deletion() throws Exception {
0:         LOG.info("Creating {} first, {} second", topic1, topic2);
0:         LOG.info("Removing {}, subscribing to {}", topic2, topic1);
1: 
0:         // Create two topics
0:         broker.addDestination(brokerService.getAdminConnectionContext(), topic1, false);
0:         broker.addDestination(brokerService.getAdminConnectionContext(), topic2, false);
1: 
0:         // remove topic2
0:         broker.removeDestination(brokerService.getAdminConnectionContext(), topic2, 100);
1: 
0:         // try and create a subscription on topic1, before AMQ-5875 this
0:         //would cause an IllegalStateException
0:         createSubscriber(topic1);
1:     }
1: 
1: 
0:     @Test
0:     public void testStoreCleanupDeleteTopic1First() throws Exception {
0:         LOG.info("Creating {} first, {} second", topic1, topic2);
0:         LOG.info("Deleting {} first, {} second", topic1, topic2);
1: 
0:         // Create two topics
0:         broker.addDestination(brokerService.getAdminConnectionContext(), topic1, false);
0:         broker.addDestination(brokerService.getAdminConnectionContext(), topic2, false);
1: 
0:         // remove both topics
0:         broker.removeDestination(brokerService.getAdminConnectionContext(), topic1, 100);
0:         broker.removeDestination(brokerService.getAdminConnectionContext(), topic2, 100);
1: 
0:         //Assert that with no more destinations attached to a store that it has been cleaned up
0:         Collection<File> storeFiles = FileUtils.listFiles(storeDir, new WildcardFileFilter("db*"), new WildcardFileFilter("topic*"));
0:         assertEquals("Store files should be deleted", 0, storeFiles.size());
1: 
1:     }
1: 
0:     @Test
0:     public void testStoreCleanupDeleteTopic2First() throws Exception {
0:         LOG.info("Creating {} first, {} second", topic1, topic2);
0:         LOG.info("Deleting {} first, {} second", topic2, topic1);
1: 
0:         // Create two topics
0:         broker.addDestination(brokerService.getAdminConnectionContext(), topic1, false);
0:         broker.addDestination(brokerService.getAdminConnectionContext(), topic2, false);
1: 
0:         // remove both topics
0:         broker.removeDestination(brokerService.getAdminConnectionContext(), topic2, 100);
0:         broker.removeDestination(brokerService.getAdminConnectionContext(), topic1, 100);
1: 
0:         //Assert that with no more destinations attached to a store that it has been cleaned up
0:         Collection<File> storeFiles = FileUtils.listFiles(storeDir, new WildcardFileFilter("db*"), new WildcardFileFilter("topic*"));
0:         assertEquals("Store files should be deleted", 0, storeFiles.size());
1: 
1:     }
1: 
1: 
0:     protected void createSubscriber(ActiveMQTopic topic) throws JMSException {
1:         ActiveMQConnectionFactory factory = new ActiveMQConnectionFactory(
1:                 brokerConnectURI);
1:         Connection connection = factory.createConnection();
1:         connection.setClientID("client1");
1:         connection.start();
1:         Session session = connection.createSession(false,
1:                 Session.AUTO_ACKNOWLEDGE);
0:         session.createDurableSubscriber(topic, "sub1");
1:     }
1: 
1: }
============================================================================