1:d29ca2a: /**
1:57b4941:  * Licensed to the Apache Software Foundation (ASF) under one or more
1:57b4941:  * contributor license agreements.  See the NOTICE file distributed with
1:57b4941:  * this work for additional information regarding copyright ownership.
1:57b4941:  * The ASF licenses this file to You under the Apache License, Version 2.0
1:57b4941:  * (the "License"); you may not use this file except in compliance with
1:57b4941:  * the License.  You may obtain a copy of the License at
1:ecf89a6:  *
1:230a86c:  *      http://www.apache.org/licenses/LICENSE-2.0
1:b0c2a40:  *
1:d29ca2a:  * Unless required by applicable law or agreed to in writing, software
1:d29ca2a:  * distributed under the License is distributed on an "AS IS" BASIS,
1:d29ca2a:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:d29ca2a:  * See the License for the specific language governing permissions and
1:d29ca2a:  * limitations under the License.
1:d29ca2a:  */
1:d29ca2a: package org.apache.activemq.command;
1:d29ca2a: 
1:d29ca2a: import org.apache.activemq.state.CommandVisitor;
1:d29ca2a: 
1:d29ca2a: /**
1:ecf89a6:  * The Command Pattern so that we can send and receive commands on the different
1:ecf89a6:  * transports
1:d29ca2a:  */
1:d29ca2a: public interface Command extends DataStructure {
1:ecf89a6: 
1:8704338:     void setCommandId(int value);
1:ecf89a6: 
1:d29ca2a:     /**
1:d29ca2a:      * @return the unique ID of this request used to map responses to requests
1:d29ca2a:      */
1:8704338:     int getCommandId();
1:ecf89a6: 
1:d29ca2a:     void setResponseRequired(boolean responseRequired);
1:ecf89a6: 
1:d29ca2a:     boolean isResponseRequired();
1:ecf89a6: 
1:d29ca2a:     boolean isResponse();
1:ecf89a6: 
1:d29ca2a:     boolean isMessageDispatch();
1:ecf89a6: 
1:d29ca2a:     boolean isBrokerInfo();
1:ecf89a6: 
1:d29ca2a:     boolean isWireFormatInfo();
1:ecf89a6: 
1:d29ca2a:     boolean isMessage();
1:ecf89a6: 
1:d29ca2a:     boolean isMessageAck();
1:ecf89a6: 
1:4098942:     boolean isMessageDispatchNotification();
1:ecf89a6: 
1:5a429d9:     boolean isShutdownInfo();
1:25c99a6: 
1:f392884:     boolean isConnectionControl();
1:d29ca2a: 
1:25c99a6:     boolean isConsumerControl();
1:25c99a6: 
1:ecf89a6:     Response visit(CommandVisitor visitor) throws Exception;
1:d29ca2a: 
1:8704338:     /**
1:ecf89a6:      * The endpoint within the transport where this message came from which
1:ecf89a6:      * could be null if the transport only supports a single endpoint.
1:8704338:      */
1:fc00993:     Endpoint getFrom();
1:d29ca2a: 
1:fc00993:     void setFrom(Endpoint from);
1:d29ca2a: 
1:8704338:     /**
1:ecf89a6:      * The endpoint within the transport where this message is going to - null
1:ecf89a6:      * means all endpoints.
1:8704338:      */
1:fc00993:     Endpoint getTo();
1:d29ca2a: 
1:fc00993:     void setTo(Endpoint to);
1:d29ca2a: }
============================================================================
author:Hadrian Zbarcea
-------------------------------------------------------------------------------
commit:d54d046
author:Timothy Bish
-------------------------------------------------------------------------------
commit:25c99a6
/////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////
1: 
1:     boolean isConsumerControl();
1: 
author:Hiram R. Chirino
-------------------------------------------------------------------------------
commit:9a8f6e4
commit:b0c2a40
/////////////////////////////////////////////////////////////////////////
1:  * 
commit:ecf89a6
/////////////////////////////////////////////////////////////////////////
1:  * The Command Pattern so that we can send and receive commands on the different
1:  * transports
1:  * 
1: 
1: 
1: 
1: 
1: 
1: 
1: 
1: 
1: 
1: 
1: 
1: 
1:     Response visit(CommandVisitor visitor) throws Exception;
1:      * The endpoint within the transport where this message came from which
1:      * could be null if the transport only supports a single endpoint.
1:      * The endpoint within the transport where this message is going to - null
1:      * means all endpoints.
commit:fc00993
/////////////////////////////////////////////////////////////////////////
1:     Endpoint getFrom();
1:     void setFrom(Endpoint from);
1:     Endpoint getTo();
1:     void setTo(Endpoint to);
commit:230a86c
/////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////
1:  *      http://www.apache.org/licenses/LICENSE-2.0
commit:57b4941
/////////////////////////////////////////////////////////////////////////
1:  * Licensed to the Apache Software Foundation (ASF) under one or more
1:  * contributor license agreements.  See the NOTICE file distributed with
1:  * this work for additional information regarding copyright ownership.
1:  * The ASF licenses this file to You under the Apache License, Version 2.0
1:  * (the "License"); you may not use this file except in compliance with
1:  * the License.  You may obtain a copy of the License at
commit:7f5213b
/////////////////////////////////////////////////////////////////////////
0:     Response visit( CommandVisitor visitor) throws Exception;
commit:48b4869
/////////////////////////////////////////////////////////////////////////
0:  * Copyright 2005-2006 The Apache Software Foundation
commit:d29ca2a
/////////////////////////////////////////////////////////////////////////
1: /**
0:  *
0:  * Copyright 2004 The Apache Software Foundation
0:  *
0:  * Licensed under the Apache License, Version 2.0 (the "License");
0:  * you may not use this file except in compliance with the License.
0:  * You may obtain a copy of the License at
0:  *
0:  * http://www.apache.org/licenses/LICENSE-2.0
0:  *
1:  * Unless required by applicable law or agreed to in writing, software
1:  * distributed under the License is distributed on an "AS IS" BASIS,
1:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:  * See the License for the specific language governing permissions and
1:  * limitations under the License.
1:  */
1: package org.apache.activemq.command;
1: 
1: import org.apache.activemq.state.CommandVisitor;
1: 
1: /**
0:  * The Command Pattern so that we can send and receive commands
0:  * on the different transports
0:  *
0:  * @version $Revision: 1.7 $
1:  */
1: public interface Command extends DataStructure {
1:     
0:     void setCommandId(short value);
1:     
1:     /**
1:      * @return the unique ID of this request used to map responses to requests
1:      */
0:     short getCommandId();
1:     
1:     void setResponseRequired(boolean responseRequired);
1:     boolean isResponseRequired();
1:     
1:     boolean isResponse();
1:     boolean isMessageDispatch();
1:     boolean isBrokerInfo();
1:     boolean isWireFormatInfo();
1:     boolean isMessage();
1:     boolean isMessageAck();
1:     
0:     Response visit( CommandVisitor visitor) throws Throwable;
1: }
author:Robert Davies
-------------------------------------------------------------------------------
commit:f392884
/////////////////////////////////////////////////////////////////////////
0:     
1:     boolean isConnectionControl();
commit:5a429d9
/////////////////////////////////////////////////////////////////////////
1:     boolean isShutdownInfo();
commit:4098942
/////////////////////////////////////////////////////////////////////////
1:     boolean isMessageDispatchNotification();
author:James Strachan
-------------------------------------------------------------------------------
commit:8704338
/////////////////////////////////////////////////////////////////////////
1:     void setCommandId(int value);
1:     int getCommandId();
/////////////////////////////////////////////////////////////////////////
0: 
0: 
1:     /**
0:      * The endpoint within the transport where this message came from which could be null if the 
0:      * transport only supports a single endpoint.
1:      */
0:     public Endpoint getFrom();
0: 
0:     public void setFrom(Endpoint from);
0: 
1:     /**
0:      * The endpoint within the transport where this message is going to - null means all endpoints.
1:      */
0:     public Endpoint getTo();
0: 
0:     public void setTo(Endpoint to);
============================================================================