1:e6954f1: /**
1:57b4941:  * Licensed to the Apache Software Foundation (ASF) under one or more
1:57b4941:  * contributor license agreements.  See the NOTICE file distributed with
1:57b4941:  * this work for additional information regarding copyright ownership.
1:57b4941:  * The ASF licenses this file to You under the Apache License, Version 2.0
1:57b4941:  * (the "License"); you may not use this file except in compliance with
1:57b4941:  * the License.  You may obtain a copy of the License at
3:e6954f1:  *
1:230a86c:  *      http://www.apache.org/licenses/LICENSE-2.0
1:e6954f1:  *
1:e6954f1:  * Unless required by applicable law or agreed to in writing, software
1:e6954f1:  * distributed under the License is distributed on an "AS IS" BASIS,
1:e6954f1:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:e6954f1:  * See the License for the specific language governing permissions and
1:e6954f1:  * limitations under the License.
1:e6954f1:  */
1:e6954f1: package org.apache.activemq.transport.reliable;
2:e6954f1: 
1:e6954f1: import java.io.IOException;
1:e6954f1: 
1:e6954f1: /**
1:e6954f1:  * Throws an exception if packets are dropped causing the transport to be
1:e6954f1:  * closed.
1:0bbc0ac:  * 
1:e6954f1:  * 
1:e6954f1:  */
1:e6954f1: public class ExceptionIfDroppedReplayStrategy implements ReplayStrategy {
1:e6954f1: 
1:e6954f1:     private int maximumDifference = 5;
1:e6954f1: 
1:72b382d:     public ExceptionIfDroppedReplayStrategy() {
1:72b382d:     }
1:72b382d: 
1:72b382d:     public ExceptionIfDroppedReplayStrategy(int maximumDifference) {
1:72b382d:         this.maximumDifference = maximumDifference;
1:72b382d:     }
1:72b382d: 
1:f3ef1a9:     public boolean onDroppedPackets(ReliableTransport transport, int expectedCounter, int actualCounter, int nextAvailableCounter) throws IOException {
1:65fdf07:         int difference = actualCounter - expectedCounter;
1:65fdf07:         long count = Math.abs(difference);
1:e6954f1:         if (count > maximumDifference) {
1:e6954f1:             throw new IOException("Packets dropped on: " + transport + " count: " + count + " expected: " + expectedCounter + " but was: " + actualCounter);
1:e6954f1:         }
1:72b382d: 
1:65fdf07:         // lets discard old commands
1:65fdf07:         return difference > 0;
1:e6954f1:     }
1:65fdf07: 
1:e6954f1:     public void onReceivedPacket(ReliableTransport transport, long expectedCounter) {
1:e6954f1:     }
1:e6954f1: 
1:e6954f1:     public int getMaximumDifference() {
1:e6954f1:         return maximumDifference;
1:e6954f1:     }
1:e6954f1: 
1:e6954f1:     /**
1:e6954f1:      * Sets the maximum allowed difference between an expected packet and an
1:e6954f1:      * actual packet before an error occurs
1:e6954f1:      */
1:e6954f1:     public void setMaximumDifference(int maximumDifference) {
1:e6954f1:         this.maximumDifference = maximumDifference;
1:e6954f1:     }
1:e6954f1: 
1:e6954f1: }
============================================================================
author:Hiram R. Chirino
-------------------------------------------------------------------------------
commit:9a8f6e4
commit:0bbc0ac
/////////////////////////////////////////////////////////////////////////
1:  * 
commit:230a86c
/////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////
1:  *      http://www.apache.org/licenses/LICENSE-2.0
commit:57b4941
/////////////////////////////////////////////////////////////////////////
1:  * Licensed to the Apache Software Foundation (ASF) under one or more
1:  * contributor license agreements.  See the NOTICE file distributed with
1:  * this work for additional information regarding copyright ownership.
1:  * The ASF licenses this file to You under the Apache License, Version 2.0
1:  * (the "License"); you may not use this file except in compliance with
1:  * the License.  You may obtain a copy of the License at
author:James Strachan
-------------------------------------------------------------------------------
commit:f3ef1a9
/////////////////////////////////////////////////////////////////////////
1:     public boolean onDroppedPackets(ReliableTransport transport, int expectedCounter, int actualCounter, int nextAvailableCounter) throws IOException {
commit:72b382d
/////////////////////////////////////////////////////////////////////////
1:     public ExceptionIfDroppedReplayStrategy() {
1:     }
1: 
1:     public ExceptionIfDroppedReplayStrategy(int maximumDifference) {
1:         this.maximumDifference = maximumDifference;
1:     }
1: 
1: 
commit:65fdf07
/////////////////////////////////////////////////////////////////////////
0:     public boolean onDroppedPackets(ReliableTransport transport, int expectedCounter, int actualCounter) throws IOException {
1:         int difference = actualCounter - expectedCounter;
1:         long count = Math.abs(difference);
1:         
1:         // lets discard old commands
1:         return difference > 0;
commit:e6954f1
/////////////////////////////////////////////////////////////////////////
1: /**
1:  *
0:  * Copyright 2005-2006 The Apache Software Foundation
1:  *
0:  * Licensed under the Apache License, Version 2.0 (the "License");
0:  * you may not use this file except in compliance with the License.
0:  * You may obtain a copy of the License at
1:  *
0:  * http://www.apache.org/licenses/LICENSE-2.0
1:  *
1:  * Unless required by applicable law or agreed to in writing, software
1:  * distributed under the License is distributed on an "AS IS" BASIS,
1:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:  * See the License for the specific language governing permissions and
1:  * limitations under the License.
1:  */
1: package org.apache.activemq.transport.reliable;
1: 
1: import java.io.IOException;
1: 
1: /**
1:  * Throws an exception if packets are dropped causing the transport to be
1:  * closed.
1:  * 
0:  * @version $Revision$
1:  */
1: public class ExceptionIfDroppedReplayStrategy implements ReplayStrategy {
1: 
1:     private int maximumDifference = 5;
1: 
0:     public void onDroppedPackets(ReliableTransport transport, int expectedCounter, int actualCounter) throws IOException {
0:         long count = Math.abs(actualCounter - expectedCounter);
1:         if (count > maximumDifference) {
1:             throw new IOException("Packets dropped on: " + transport + " count: " + count + " expected: " + expectedCounter + " but was: " + actualCounter);
1:         }
1:     }
1: 
1:     public void onReceivedPacket(ReliableTransport transport, long expectedCounter) {
1:     }
1: 
1:     public int getMaximumDifference() {
1:         return maximumDifference;
1:     }
1: 
1:     /**
1:      * Sets the maximum allowed difference between an expected packet and an
1:      * actual packet before an error occurs
1:      */
1:     public void setMaximumDifference(int maximumDifference) {
1:         this.maximumDifference = maximumDifference;
1:     }
1: 
1: }
============================================================================