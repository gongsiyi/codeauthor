1:540dd5c: /**
1:bd0ad68:  * Licensed to the Apache Software Foundation (ASF) under one or more
1:bd0ad68:  * contributor license agreements.  See the NOTICE file distributed with
1:bd0ad68:  * this work for additional information regarding copyright ownership.
1:bd0ad68:  * The ASF licenses this file to You under the Apache License, Version 2.0
1:bd0ad68:  * (the "License"); you may not use this file except in compliance with
1:bd0ad68:  * the License.  You may obtain a copy of the License at
3:bd0ad68:  *
1:540dd5c:  *      http://www.apache.org/licenses/LICENSE-2.0
1:bd0ad68:  *
1:bd0ad68:  * Unless required by applicable law or agreed to in writing, software
1:bd0ad68:  * distributed under the License is distributed on an "AS IS" BASIS,
1:bd0ad68:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:bd0ad68:  * See the License for the specific language governing permissions and
1:bd0ad68:  * limitations under the License.
1:bd0ad68:  */
1:bd0ad68: package org.apache.activemq.openwire.tool;
5:bd0ad68: 
1:bd0ad68: import java.io.File;
1:bd0ad68: import java.io.PrintWriter;
1:bd0ad68: import java.util.Iterator;
1:bd0ad68: import java.util.List;
1:bd0ad68: 
1:bd0ad68: import org.codehaus.jam.JClass;
1:bd0ad68: import org.codehaus.jam.JProperty;
1:bd0ad68: 
1:bd0ad68: /**
1:0bbc0ac:  * 
1:bd0ad68:  */
1:bd0ad68: public class CppClassesGenerator extends MultiSourceGenerator {
1:bd0ad68: 
1:540dd5c:     protected String targetDir = "./src/main/cpp";
1:bd0ad68: 
1:bd0ad68:     public Object run() {
1:bd0ad68:         filePostFix = getFilePostFix();
1:bd0ad68:         if (destDir == null) {
1:540dd5c:             destDir = new File(targetDir + "/activemq/command");
42:bd0ad68:         }
1:bd0ad68:         return super.run();
1:bd0ad68:     }
1:bd0ad68: 
1:bd0ad68:     protected String getFilePostFix() {
1:bd0ad68:         return ".cpp";
1:bd0ad68:     }
1:bd0ad68: 
1:bd0ad68:     /**
1:bd0ad68:      * Converts the Java type to a C++ type name
1:bd0ad68:      */
1:bd0ad68:     public String toCppType(JClass type) {
1:bd0ad68:         String name = type.getSimpleName();
1:bd0ad68:         if (name.equals("String")) {
1:bd0ad68:             return "p<string>";
1:540dd5c:         } else if (type.isArrayType()) {
1:540dd5c:             if (name.equals("byte[]")) {
1:540dd5c:                 name = "char[]";
1:540dd5c:             } else if (name.equals("DataStructure[]")) {
1:540dd5c:                 name = "IDataStructure[]";
1:540dd5c:             }
1:540dd5c:             return "array<" + name.substring(0, name.length() - 2) + ">";
1:540dd5c:         } else if (name.equals("Throwable") || name.equals("Exception")) {
1:bd0ad68:             return "p<BrokerError>";
1:540dd5c:         } else if (name.equals("ByteSequence")) {
1:bd0ad68:             return "array<char>";
1:540dd5c:         } else if (name.equals("boolean")) {
1:bd0ad68:             return "bool";
1:540dd5c:         } else if (name.equals("long")) {
1:bd0ad68:             return "long long";
1:540dd5c:         } else if (name.equals("byte")) {
1:bd0ad68:             return "char";
1:540dd5c:         } else if (name.equals("Command") || name.equals("DataStructure")) {
1:540dd5c:             return "p<I" + name + ">";
1:540dd5c:         } else if (!type.isPrimitiveType()) {
1:540dd5c:             return "p<" + name + ">";
1:540dd5c:         } else {
1:540dd5c:             return name;
1:bd0ad68:         }
1:bd0ad68:     }
1:bd0ad68: 
1:bd0ad68:     /**
1:bd0ad68:      * Converts the Java type to a C++ default value
1:bd0ad68:      */
1:bd0ad68:     public String toCppDefaultValue(JClass type) {
1:bd0ad68:         String name = type.getSimpleName();
1:bd0ad68: 
1:540dd5c:         if (name.equals("boolean")) {
1:bd0ad68:             return "false";
1:540dd5c:         } else if (!type.isPrimitiveType()) {
1:bd0ad68:             return "NULL";
1:540dd5c:         } else {
1:bd0ad68:             return "0";
1:bd0ad68:         }
1:bd0ad68:     }
1:bd0ad68: 
1:bd0ad68:     /**
1:540dd5c:      * Converts the Java type to the name of the C++ marshal method to be used
1:bd0ad68:      */
1:bd0ad68:     public String toMarshalMethodName(JClass type) {
1:bd0ad68:         String name = type.getSimpleName();
1:bd0ad68:         if (name.equals("String")) {
1:bd0ad68:             return "marshalString";
1:540dd5c:         } else if (type.isArrayType()) {
1:540dd5c:             if (type.getArrayComponentType().isPrimitiveType() && name.equals("byte[]")) {
1:540dd5c:                 return "marshalByteArray";
1:540dd5c:             } else {
1:540dd5c:                 return "marshalObjectArray";
1:540dd5c:             }
1:540dd5c:         } else if (name.equals("ByteSequence")) {
1:bd0ad68:             return "marshalByteArray";
1:540dd5c:         } else if (name.equals("short")) {
1:bd0ad68:             return "marshalShort";
1:540dd5c:         } else if (name.equals("int")) {
1:bd0ad68:             return "marshalInt";
1:540dd5c:         } else if (name.equals("long")) {
1:bd0ad68:             return "marshalLong";
1:540dd5c:         } else if (name.equals("byte")) {
1:bd0ad68:             return "marshalByte";
1:540dd5c:         } else if (name.equals("double")) {
1:bd0ad68:             return "marshalDouble";
1:540dd5c:         } else if (name.equals("float")) {
1:bd0ad68:             return "marshalFloat";
1:540dd5c:         } else if (name.equals("boolean")) {
1:bd0ad68:             return "marshalBoolean";
1:540dd5c:         } else if (!type.isPrimitiveType()) {
1:540dd5c:             return "marshalObject";
1:540dd5c:         } else {
1:540dd5c:             return name;
1:bd0ad68:         }
1:bd0ad68:     }
1:bd0ad68: 
1:bd0ad68:     /**
1:540dd5c:      * Converts the Java type to the name of the C++ unmarshal method to be used
1:bd0ad68:      */
1:bd0ad68:     public String toUnmarshalMethodName(JClass type) {
1:bd0ad68:         String name = type.getSimpleName();
1:bd0ad68:         if (name.equals("String")) {
1:bd0ad68:             return "unmarshalString";
1:540dd5c:         } else if (type.isArrayType()) {
1:540dd5c:             if (type.getArrayComponentType().isPrimitiveType() && name.equals("byte[]")) {
1:540dd5c:                 return "unmarshalByteArray";
1:540dd5c:             } else {
1:540dd5c:                 return "unmarshalObjectArray";
1:540dd5c:             }
1:540dd5c:         } else if (name.equals("ByteSequence")) {
1:bd0ad68:             return "unmarshalByteArray";
1:540dd5c:         } else if (name.equals("short")) {
1:bd0ad68:             return "unmarshalShort";
1:540dd5c:         } else if (name.equals("int")) {
1:bd0ad68:             return "unmarshalInt";
1:540dd5c:         } else if (name.equals("long")) {
1:bd0ad68:             return "unmarshalLong";
1:540dd5c:         } else if (name.equals("byte")) {
1:bd0ad68:             return "unmarshalByte";
1:540dd5c:         } else if (name.equals("double")) {
1:bd0ad68:             return "unmarshalDouble";
1:540dd5c:         } else if (name.equals("float")) {
1:bd0ad68:             return "unmarshalFloat";
1:540dd5c:         } else if (name.equals("boolean")) {
1:bd0ad68:             return "unmarshalBoolean";
1:540dd5c:         } else if (!type.isPrimitiveType()) {
1:540dd5c:             return "unmarshalObject";
1:540dd5c:         } else {
1:540dd5c:             return name;
1:bd0ad68:         }
1:bd0ad68:     }
1:bd0ad68: 
1:bd0ad68:     /**
1:bd0ad68:      * Converts the Java type to a C++ pointer cast
1:bd0ad68:      */
1:bd0ad68:     public String toUnmarshalCast(JClass type) {
1:540dd5c:         String name = toCppType(type);
1:bd0ad68: 
1:540dd5c:         if (name.startsWith("p<")) {
1:540dd5c:             return "p_cast<" + name.substring(2);
1:540dd5c:         } else if (name.startsWith("array<") && (type.isArrayType() && !type.getArrayComponentType().isPrimitiveType()) && !type.getSimpleName().equals("ByteSequence")) {
1:540dd5c:             return "array_cast<" + name.substring(6);
1:540dd5c:         } else {
1:540dd5c:             return "";
1:540dd5c:         }
1:bd0ad68:     }
1:bd0ad68: 
1:540dd5c:     protected void generateLicence(PrintWriter out) {
1:540dd5c:         out.println("/**");
1:540dd5c:         out.println(" * Licensed to the Apache Software Foundation (ASF) under one or more");
1:540dd5c:         out.println(" * contributor license agreements.  See the NOTICE file distributed with");
1:540dd5c:         out.println(" * this work for additional information regarding copyright ownership.");
1:540dd5c:         out.println(" * The ASF licenses this file to You under the Apache License, Version 2.0");
1:540dd5c:         out.println(" * (the \"License\"); you may not use this file except in compliance with");
1:540dd5c:         out.println(" * the License.  You may obtain a copy of the License at");
1:540dd5c:         out.println(" *");
1:540dd5c:         out.println(" *      http://www.apache.org/licenses/LICENSE-2.0");
1:540dd5c:         out.println(" *");
1:540dd5c:         out.println(" * Unless required by applicable law or agreed to in writing, software");
1:540dd5c:         out.println(" * distributed under the License is distributed on an \"AS IS\" BASIS,");
1:540dd5c:         out.println(" * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.");
1:540dd5c:         out.println(" * See the License for the specific language governing permissions and");
1:540dd5c:         out.println(" * limitations under the License.");
1:540dd5c:         out.println(" */");
1:540dd5c:     }
1:bd0ad68: 
1:540dd5c:     protected void generateFile(PrintWriter out) throws Exception {
1:540dd5c:         generateLicence(out);
1:540dd5c:         out.println("#include \"activemq/command/" + className + ".hpp\"");
1:540dd5c:         out.println("");
1:540dd5c:         out.println("using namespace apache::activemq::command;");
1:540dd5c:         out.println("");
1:540dd5c:         out.println("/*");
1:540dd5c:         out.println(" *");
1:540dd5c:         out.println(" *  Command and marshalling code for OpenWire format for " + className + "");
1:540dd5c:         out.println(" *");
1:540dd5c:         out.println(" *");
1:540dd5c:         out.println(" *  NOTE!: This file is autogenerated - do not modify!");
1:540dd5c:         out.println(" *         if you need to make a change, please see the Groovy scripts in the");
1:540dd5c:         out.println(" *         activemq-core module");
1:540dd5c:         out.println(" *");
1:540dd5c:         out.println(" */");
1:540dd5c:         out.println("" + className + "::" + className + "()");
1:540dd5c:         out.println("{");
1:bd0ad68: 
1:540dd5c:         List properties = getProperties();
1:540dd5c:         for (Iterator iter = properties.iterator(); iter.hasNext();) {
1:540dd5c:             JProperty property = (JProperty)iter.next();
1:540dd5c:             String value = toCppDefaultValue(property.getType());
1:540dd5c:             String propertyName = property.getSimpleName();
1:540dd5c:             String parameterName = decapitalize(propertyName);
1:540dd5c:             out.println("    this->" + parameterName + " = " + value + " ;");
1:540dd5c:         }
1:540dd5c:         out.println("}");
1:540dd5c:         out.println("");
1:540dd5c:         out.println("" + className + "::~" + className + "()");
1:540dd5c:         out.println("{");
1:540dd5c:         out.println("}");
1:540dd5c:         out.println("");
1:540dd5c:         out.println("unsigned char " + className + "::getDataStructureType()");
1:540dd5c:         out.println("{");
1:540dd5c:         out.println("    return " + className + "::TYPE ; ");
1:540dd5c:         out.println("}");
1:540dd5c:         for (Iterator iter = properties.iterator(); iter.hasNext();) {
1:540dd5c:             JProperty property = (JProperty)iter.next();
1:540dd5c:             String type = toCppType(property.getType());
1:540dd5c:             String propertyName = property.getSimpleName();
1:540dd5c:             String parameterName = decapitalize(propertyName);
1:540dd5c:             out.println("");
1:540dd5c:             out.println("        ");
1:540dd5c:             out.println("" + type + " " + className + "::get" + propertyName + "()");
1:540dd5c:             out.println("{");
1:540dd5c:             out.println("    return " + parameterName + " ;");
1:540dd5c:             out.println("}");
1:540dd5c:             out.println("");
1:540dd5c:             out.println("void " + className + "::set" + propertyName + "(" + type + " " + parameterName + ")");
1:540dd5c:             out.println("{");
1:540dd5c:             out.println("    this->" + parameterName + " = " + parameterName + " ;");
1:540dd5c:             out.println("}");
1:540dd5c:         }
1:540dd5c:         out.println("");
1:540dd5c:         out.println("int " + className + "::marshal(p<IMarshaller> marshaller, int mode, p<IOutputStream> ostream) throw (IOException)");
1:540dd5c:         out.println("{");
1:540dd5c:         out.println("    int size = 0 ;");
1:540dd5c:         out.println("");
1:540dd5c:         out.println("    size += " + baseClass + "::marshal(marshaller, mode, ostream) ; ");
1:bd0ad68: 
1:540dd5c:         for (Iterator iter = properties.iterator(); iter.hasNext();) {
1:540dd5c:             JProperty property = (JProperty)iter.next();
1:540dd5c:             String marshalMethod = toMarshalMethodName(property.getType());
1:540dd5c:             String propertyName = decapitalize(property.getSimpleName());
1:540dd5c:             out.println("    size += marshaller->" + marshalMethod + "(" + propertyName + ", mode, ostream) ; ");
1:540dd5c:         }
1:540dd5c:         out.println("    return size ;");
1:540dd5c:         out.println("}");
1:540dd5c:         out.println("");
1:540dd5c:         out.println("void " + className + "::unmarshal(p<IMarshaller> marshaller, int mode, p<IInputStream> istream) throw (IOException)");
1:540dd5c:         out.println("{");
1:540dd5c:         out.println("    " + baseClass + "::unmarshal(marshaller, mode, istream) ; ");
1:540dd5c:         for (Iterator iter = properties.iterator(); iter.hasNext();) {
1:540dd5c:             JProperty property = (JProperty)iter.next();
1:540dd5c:             String cast = toUnmarshalCast(property.getType());
1:540dd5c:             String unmarshalMethod = toUnmarshalMethodName(property.getType());
1:540dd5c:             String propertyName = decapitalize(property.getSimpleName());
1:540dd5c:             out.println("    " + propertyName + " = " + cast + "(marshaller->" + unmarshalMethod + "(mode, istream)) ; ");
1:540dd5c:         }
1:540dd5c:         out.println("}");
1:540dd5c:     }
1:bd0ad68: 
1:540dd5c:     public String getTargetDir() {
1:540dd5c:         return targetDir;
1:540dd5c:     }
1:540dd5c: 
1:540dd5c:     public void setTargetDir(String targetDir) {
1:540dd5c:         this.targetDir = targetDir;
1:540dd5c:     }
1:540dd5c: 
1:bd0ad68: }
============================================================================
author:Hiram R. Chirino
-------------------------------------------------------------------------------
commit:0bbc0ac
/////////////////////////////////////////////////////////////////////////
1:  * 
commit:540dd5c
/////////////////////////////////////////////////////////////////////////
1: /**
/////////////////////////////////////////////////////////////////////////
1:  *      http://www.apache.org/licenses/LICENSE-2.0
/////////////////////////////////////////////////////////////////////////
1:     protected String targetDir = "./src/main/cpp";
1:             destDir = new File(targetDir + "/activemq/command");
/////////////////////////////////////////////////////////////////////////
1:         } else if (type.isArrayType()) {
1:             if (name.equals("byte[]")) {
1:                 name = "char[]";
1:             } else if (name.equals("DataStructure[]")) {
1:                 name = "IDataStructure[]";
1:             }
1:             return "array<" + name.substring(0, name.length() - 2) + ">";
1:         } else if (name.equals("Throwable") || name.equals("Exception")) {
1:         } else if (name.equals("ByteSequence")) {
1:         } else if (name.equals("boolean")) {
1:         } else if (name.equals("long")) {
1:         } else if (name.equals("byte")) {
1:         } else if (name.equals("Command") || name.equals("DataStructure")) {
1:             return "p<I" + name + ">";
1:         } else if (!type.isPrimitiveType()) {
1:             return "p<" + name + ">";
1:         } else {
1:             return name;
/////////////////////////////////////////////////////////////////////////
1:         if (name.equals("boolean")) {
1:         } else if (!type.isPrimitiveType()) {
1:         } else {
1:      * Converts the Java type to the name of the C++ marshal method to be used
1:         } else if (type.isArrayType()) {
1:             if (type.getArrayComponentType().isPrimitiveType() && name.equals("byte[]")) {
1:                 return "marshalByteArray";
1:             } else {
1:                 return "marshalObjectArray";
1:             }
1:         } else if (name.equals("ByteSequence")) {
1:         } else if (name.equals("short")) {
1:         } else if (name.equals("int")) {
1:         } else if (name.equals("long")) {
1:         } else if (name.equals("byte")) {
1:         } else if (name.equals("double")) {
1:         } else if (name.equals("float")) {
1:         } else if (name.equals("boolean")) {
1:         } else if (!type.isPrimitiveType()) {
1:             return "marshalObject";
1:         } else {
1:             return name;
1:      * Converts the Java type to the name of the C++ unmarshal method to be used
1:         } else if (type.isArrayType()) {
1:             if (type.getArrayComponentType().isPrimitiveType() && name.equals("byte[]")) {
1:                 return "unmarshalByteArray";
1:             } else {
1:                 return "unmarshalObjectArray";
1:             }
1:         } else if (name.equals("ByteSequence")) {
1:         } else if (name.equals("short")) {
1:         } else if (name.equals("int")) {
1:         } else if (name.equals("long")) {
1:         } else if (name.equals("byte")) {
1:         } else if (name.equals("double")) {
1:         } else if (name.equals("float")) {
1:         } else if (name.equals("boolean")) {
1:         } else if (!type.isPrimitiveType()) {
1:             return "unmarshalObject";
1:         } else {
1:             return name;
/////////////////////////////////////////////////////////////////////////
1:         String name = toCppType(type);
1:         if (name.startsWith("p<")) {
1:             return "p_cast<" + name.substring(2);
1:         } else if (name.startsWith("array<") && (type.isArrayType() && !type.getArrayComponentType().isPrimitiveType()) && !type.getSimpleName().equals("ByteSequence")) {
1:             return "array_cast<" + name.substring(6);
1:         } else {
1:             return "";
1:         }
1:     protected void generateLicence(PrintWriter out) {
1:         out.println("/**");
1:         out.println(" * Licensed to the Apache Software Foundation (ASF) under one or more");
1:         out.println(" * contributor license agreements.  See the NOTICE file distributed with");
1:         out.println(" * this work for additional information regarding copyright ownership.");
1:         out.println(" * The ASF licenses this file to You under the Apache License, Version 2.0");
1:         out.println(" * (the \"License\"); you may not use this file except in compliance with");
1:         out.println(" * the License.  You may obtain a copy of the License at");
1:         out.println(" *");
1:         out.println(" *      http://www.apache.org/licenses/LICENSE-2.0");
1:         out.println(" *");
1:         out.println(" * Unless required by applicable law or agreed to in writing, software");
1:         out.println(" * distributed under the License is distributed on an \"AS IS\" BASIS,");
1:         out.println(" * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.");
1:         out.println(" * See the License for the specific language governing permissions and");
1:         out.println(" * limitations under the License.");
1:         out.println(" */");
1:     }
1:     protected void generateFile(PrintWriter out) throws Exception {
1:         generateLicence(out);
1:         out.println("#include \"activemq/command/" + className + ".hpp\"");
1:         out.println("");
1:         out.println("using namespace apache::activemq::command;");
1:         out.println("");
1:         out.println("/*");
1:         out.println(" *");
1:         out.println(" *  Command and marshalling code for OpenWire format for " + className + "");
1:         out.println(" *");
1:         out.println(" *");
1:         out.println(" *  NOTE!: This file is autogenerated - do not modify!");
1:         out.println(" *         if you need to make a change, please see the Groovy scripts in the");
1:         out.println(" *         activemq-core module");
1:         out.println(" *");
1:         out.println(" */");
1:         out.println("" + className + "::" + className + "()");
1:         out.println("{");
1:         List properties = getProperties();
1:         for (Iterator iter = properties.iterator(); iter.hasNext();) {
1:             JProperty property = (JProperty)iter.next();
1:             String value = toCppDefaultValue(property.getType());
1:             String propertyName = property.getSimpleName();
1:             String parameterName = decapitalize(propertyName);
1:             out.println("    this->" + parameterName + " = " + value + " ;");
1:         }
1:         out.println("}");
1:         out.println("");
1:         out.println("" + className + "::~" + className + "()");
1:         out.println("{");
1:         out.println("}");
1:         out.println("");
1:         out.println("unsigned char " + className + "::getDataStructureType()");
1:         out.println("{");
1:         out.println("    return " + className + "::TYPE ; ");
1:         out.println("}");
1:         for (Iterator iter = properties.iterator(); iter.hasNext();) {
1:             JProperty property = (JProperty)iter.next();
1:             String type = toCppType(property.getType());
1:             String propertyName = property.getSimpleName();
1:             String parameterName = decapitalize(propertyName);
1:             out.println("");
1:             out.println("        ");
1:             out.println("" + type + " " + className + "::get" + propertyName + "()");
1:             out.println("{");
1:             out.println("    return " + parameterName + " ;");
1:             out.println("}");
1:             out.println("");
1:             out.println("void " + className + "::set" + propertyName + "(" + type + " " + parameterName + ")");
1:             out.println("{");
1:             out.println("    this->" + parameterName + " = " + parameterName + " ;");
1:             out.println("}");
1:         }
1:         out.println("");
1:         out.println("int " + className + "::marshal(p<IMarshaller> marshaller, int mode, p<IOutputStream> ostream) throw (IOException)");
1:         out.println("{");
1:         out.println("    int size = 0 ;");
1:         out.println("");
1:         out.println("    size += " + baseClass + "::marshal(marshaller, mode, ostream) ; ");
1:         for (Iterator iter = properties.iterator(); iter.hasNext();) {
1:             JProperty property = (JProperty)iter.next();
1:             String marshalMethod = toMarshalMethodName(property.getType());
1:             String propertyName = decapitalize(property.getSimpleName());
1:             out.println("    size += marshaller->" + marshalMethod + "(" + propertyName + ", mode, ostream) ; ");
1:         }
1:         out.println("    return size ;");
1:         out.println("}");
1:         out.println("");
1:         out.println("void " + className + "::unmarshal(p<IMarshaller> marshaller, int mode, p<IInputStream> istream) throw (IOException)");
1:         out.println("{");
1:         out.println("    " + baseClass + "::unmarshal(marshaller, mode, istream) ; ");
1:         for (Iterator iter = properties.iterator(); iter.hasNext();) {
1:             JProperty property = (JProperty)iter.next();
1:             String cast = toUnmarshalCast(property.getType());
1:             String unmarshalMethod = toUnmarshalMethodName(property.getType());
1:             String propertyName = decapitalize(property.getSimpleName());
1:             out.println("    " + propertyName + " = " + cast + "(marshaller->" + unmarshalMethod + "(mode, istream)) ; ");
1:         }
1:         out.println("}");
1:     }
1:     public String getTargetDir() {
1:         return targetDir;
1:     }
1: 
1:     public void setTargetDir(String targetDir) {
1:         this.targetDir = targetDir;
1:     }
1: 
commit:bd0ad68
/////////////////////////////////////////////////////////////////////////
0: /*
1:  *
1:  * Licensed to the Apache Software Foundation (ASF) under one or more
1:  * contributor license agreements.  See the NOTICE file distributed with
1:  * this work for additional information regarding copyright ownership.
1:  * The ASF licenses this file to You under the Apache License, Version 2.0
1:  * (the "License"); you may not use this file except in compliance with
1:  * the License.  You may obtain a copy of the License at
1:  *
0:  * http://www.apache.org/licenses/LICENSE-2.0
1:  *
1:  * Unless required by applicable law or agreed to in writing, software
1:  * distributed under the License is distributed on an "AS IS" BASIS,
1:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:  * See the License for the specific language governing permissions and
1:  * limitations under the License.
1:  */
1: package org.apache.activemq.openwire.tool;
1: 
1: import java.io.File;
1: import java.io.PrintWriter;
1: import java.util.Iterator;
1: import java.util.List;
1: 
1: import org.codehaus.jam.JClass;
1: import org.codehaus.jam.JProperty;
1: 
1: /**
1:  * 
0:  * @version $Revision: 409828 $
1:  */
1: public class CppClassesGenerator extends MultiSourceGenerator {
1: 
0: 	protected String targetDir="./src/main/cpp";
1: 
1:     public Object run() {
1:         filePostFix = getFilePostFix();
1:         if (destDir == null) {
0:             destDir = new File(targetDir+"/activemq/command");
1:         }
1:         return super.run();
1:     }
1: 
1:     protected String getFilePostFix() {
1:         return ".cpp";
1:     }
1: 
1:     /**
1:      * Converts the Java type to a C++ type name
1:      */
1:     public String toCppType(JClass type) {
1:         String name = type.getSimpleName();
1:         if (name.equals("String")) {
1:             return "p<string>";
1:         }
0:         else if (type.isArrayType()) {
0: 		if( name.equals("byte[]") )
0:                 name = "char[]" ;
0: 		else if( name.equals("DataStructure[]") )
0:                 name = "IDataStructure[]" ;
1: 
0:             return "array<" + name.substring(0, name.length()-2) + ">";
1:         }
0:         else if (name.equals("Throwable") || name.equals("Exception")) {
1:             return "p<BrokerError>";
1:         }
0:         else if (name.equals("ByteSequence")) {
1:             return "array<char>";
1:         }
0:         else if (name.equals("boolean")) {
1:             return "bool";
1:         }
0:         else if (name.equals("long")) {
1:             return "long long";
1:         }
0:         else if (name.equals("byte")) {
1:             return "char";
1:         }
0:         else if( name.equals("Command") || name.equals("DataStructure") ) {
0:             return "p<I" + name + ">" ;
1:         }
0:         else if( !type.isPrimitiveType() ) {
0:             return "p<" + name + ">" ;
1:         }
0:         else {
0:             return name ;
1:         }
1:     }
1: 
1:     /**
1:      * Converts the Java type to a C++ default value
1:      */
1:     public String toCppDefaultValue(JClass type) {
1:         String name = type.getSimpleName();
1: 
0:         if ( name.equals("boolean") ) {
1:             return "false";
1:         }
0:         else if (!type.isPrimitiveType()) {
1:             return "NULL";
1:         }
0:         else {
1:             return "0";
1:         }
1:     }
1: 
1:     /**
0:      * Converts the Java type to the name of the C++ marshal method
0:      * to be used
1:      */
1:     public String toMarshalMethodName(JClass type) {
1:         String name = type.getSimpleName();
1:         if (name.equals("String")) {
1:             return "marshalString";
1:         }
0:         else if (type.isArrayType()) {
0:             if ( type.getArrayComponentType().isPrimitiveType() && name.equals("byte[]") )
0:                 return "marshalByteArray" ;
0:             else
0:                 return "marshalObjectArray" ;
1:         }
0:         else if ( name.equals("ByteSequence") ) {
1:             return "marshalByteArray";
1:         }
0:         else if (name.equals("short") ) {
1:             return "marshalShort";
1:         }
0:         else if (name.equals("int") ) {
1:             return "marshalInt";
1:         }
0:         else if (name.equals("long") ) {
1:             return "marshalLong";
1:         }
0:         else if (name.equals("byte")) {
1:             return "marshalByte";
1:         }
0:         else if (name.equals("double")) {
1:             return "marshalDouble";
1:         }
0:         else if (name.equals("float")) {
1:             return "marshalFloat";
1:         }
0:         else if (name.equals("boolean")) {
1:             return "marshalBoolean";
1:         }
0:         else if( !type.isPrimitiveType() ) {
0:             return "marshalObject" ;
1:         }
0:         else {
0:             return name ;
1:         }
1:     }
1: 
1:     /**
0:      * Converts the Java type to the name of the C++ unmarshal method
0:      * to be used
1:      */
1:     public String toUnmarshalMethodName(JClass type) {
1:         String name = type.getSimpleName();
1:         if (name.equals("String")) {
1:             return "unmarshalString";
1:         }
0:         else if (type.isArrayType()) {
0:             if ( type.getArrayComponentType().isPrimitiveType() && name.equals("byte[]") )
0:                 return "unmarshalByteArray" ;
0:             else
0:                 return "unmarshalObjectArray" ;
1:         }
0:         else if ( name.equals("ByteSequence") ) {
1:             return "unmarshalByteArray";
1:         }
0:         else if (name.equals("short") ) {
1:             return "unmarshalShort";
1:         }
0:         else if (name.equals("int") ) {
1:             return "unmarshalInt";
1:         }
0:         else if (name.equals("long") ) {
1:             return "unmarshalLong";
1:         }
0:         else if (name.equals("byte")) {
1:             return "unmarshalByte";
1:         }
0:         else if (name.equals("double")) {
1:             return "unmarshalDouble";
1:         }
0:         else if (name.equals("float")) {
1:             return "unmarshalFloat";
1:         }
0:         else if (name.equals("boolean")) {
1:             return "unmarshalBoolean";
1:         }
0:         else if( !type.isPrimitiveType() ) {
0:             return "unmarshalObject" ;
1:         }
0:         else {
0:             return name ;
1:         }
1:     }
1: 
1:     /**
1:      * Converts the Java type to a C++ pointer cast
1:      */
1:     public String toUnmarshalCast(JClass type) {
0:         String name = toCppType(type) ;
1: 
0:         if( name.startsWith("p<") )
0:             return "p_cast<" + name.substring(2) ;
0:         else if( name.startsWith("array<") &&
0:                  (type.isArrayType() && !type.getArrayComponentType().isPrimitiveType()) &&
0:                  !type.getSimpleName().equals("ByteSequence") )
0:             return "array_cast<" + name.substring(6) ;
0:         else
0:             return "" ;
1:     }
1:     
1:     
0: 	protected void generateLicence(PrintWriter out) {
0: out.println("/*");
0: out.println(" *");
0: out.println(" * Licensed to the Apache Software Foundation (ASF) under one or more");
0: out.println(" * contributor license agreements.  See the NOTICE file distributed with");
0: out.println(" * this work for additional information regarding copyright ownership.");
0: out.println(" * The ASF licenses this file to You under the Apache License, Version 2.0");
0: out.println(" * (the \"License\"); you may not use this file except in compliance with");
0: out.println(" * the License.  You may obtain a copy of the License at");
0: out.println(" *");
0: out.println(" * http://www.apache.org/licenses/LICENSE-2.0");
0: out.println(" *");
0: out.println(" * Unless required by applicable law or agreed to in writing, software");
0: out.println(" * distributed under the License is distributed on an \"AS IS\" BASIS,");
0: out.println(" * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.");
0: out.println(" * See the License for the specific language governing permissions and");
0: out.println(" * limitations under the License.");
0: out.println(" */");
1: 	}
1: 
0: 	protected void generateFile(PrintWriter out) throws Exception {
0: 		generateLicence(out);		
0: out.println("#include \"activemq/command/"+className+".hpp\"");
0: out.println("");
0: out.println("using namespace apache::activemq::command;");
0: out.println("");
0: out.println("/*");
0: out.println(" *");
0: out.println(" *  Command and marshalling code for OpenWire format for "+className+"");
0: out.println(" *");
0: out.println(" *");
0: out.println(" *  NOTE!: This file is autogenerated - do not modify!");
0: out.println(" *         if you need to make a change, please see the Groovy scripts in the");
0: out.println(" *         activemq-core module");
0: out.println(" *");
0: out.println(" */");
0: out.println(""+className+"::"+className+"()");
0: out.println("{");
1: 
0: 		List properties = getProperties();
0: 		for (Iterator iter = properties.iterator(); iter.hasNext();) {
0: 			JProperty property = (JProperty) iter.next();
0: 	        String value = toCppDefaultValue(property.getType());
0: 	        String propertyName = property.getSimpleName();
0: 	        String parameterName = decapitalize(propertyName);
0: out.println("    this->"+parameterName+" = "+value+" ;");
1: 		}
0: out.println("}");
0: out.println("");
0: out.println(""+className+"::~"+className+"()");
0: out.println("{");
0: out.println("}");
0: out.println("");
0: out.println("unsigned char "+className+"::getDataStructureType()");
0: out.println("{");
0: out.println("    return "+className+"::TYPE ; ");
0: out.println("}");
0: 		for (Iterator iter = properties.iterator(); iter.hasNext();) {
0: 			JProperty property = (JProperty) iter.next();
0: 	        String type = toCppType(property.getType());
0: 	        String propertyName = property.getSimpleName();
0: 	        String parameterName = decapitalize(propertyName);
0: out.println("");
0: out.println("        ");
0: out.println(""+type+" "+className+"::get"+propertyName+"()");
0: out.println("{");
0: out.println("    return "+parameterName+" ;");
0: out.println("}");
0: out.println("");
0: out.println("void "+className+"::set"+propertyName+"("+type+" "+parameterName+")");
0: out.println("{");
0: out.println("    this->"+parameterName+" = "+parameterName+" ;");
0: out.println("}");
1: 	    }
0: out.println("");
0: out.println("int "+className+"::marshal(p<IMarshaller> marshaller, int mode, p<IOutputStream> ostream) throw (IOException)");
0: out.println("{");
0: out.println("    int size = 0 ;");
0: out.println("");
0: out.println("    size += "+baseClass+"::marshal(marshaller, mode, ostream) ; ");
1: 
0: 		for (Iterator iter = properties.iterator(); iter.hasNext();) {
0: 			JProperty property = (JProperty) iter.next();
0: 	        String marshalMethod = toMarshalMethodName(property.getType());
0: 	        String propertyName = decapitalize(property.getSimpleName());
0: out.println("    size += marshaller->"+marshalMethod+"("+propertyName+", mode, ostream) ; ");
1: 	    }
0: out.println("    return size ;");
0: out.println("}");
0: out.println("");
0: out.println("void "+className+"::unmarshal(p<IMarshaller> marshaller, int mode, p<IInputStream> istream) throw (IOException)");
0: out.println("{");
0: out.println("    "+baseClass+"::unmarshal(marshaller, mode, istream) ; ");
0: 		for (Iterator iter = properties.iterator(); iter.hasNext();) {
0: 			JProperty property = (JProperty) iter.next();
0: 	        String cast = toUnmarshalCast(property.getType());
0: 	        String unmarshalMethod = toUnmarshalMethodName(property.getType());
0: 	        String propertyName = decapitalize(property.getSimpleName());
0: out.println("    "+propertyName+" = "+cast+"(marshaller->"+unmarshalMethod+"(mode, istream)) ; ");
1: 	    }
0: out.println("}");
1: 	}
1: 
0: 	public String getTargetDir() {
0: 		return targetDir;
1: 	}
1: 
0: 	public void setTargetDir(String targetDir) {
0: 		this.targetDir = targetDir;
1: 	}
1: 	
1: }
============================================================================