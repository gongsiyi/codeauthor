1:9f53e2b: /**
1:9f53e2b:  * Licensed to the Apache Software Foundation (ASF) under one or more
1:9f53e2b:  * contributor license agreements.  See the NOTICE file distributed with
1:9f53e2b:  * this work for additional information regarding copyright ownership.
1:9f53e2b:  * The ASF licenses this file to You under the Apache License, Version 2.0
1:9f53e2b:  * (the "License"); you may not use this file except in compliance with
1:9f53e2b:  * the License.  You may obtain a copy of the License at
1:9f53e2b:  *
1:9f53e2b:  *      http://www.apache.org/licenses/LICENSE-2.0
1:9f53e2b:  *
1:9f53e2b:  * Unless required by applicable law or agreed to in writing, software
1:9f53e2b:  * distributed under the License is distributed on an "AS IS" BASIS,
1:9f53e2b:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:9f53e2b:  * See the License for the specific language governing permissions and
1:9f53e2b:  * limitations under the License.
1:9f53e2b:  */
1:f55edcf: package org.apache.activemq.broker.region.virtual;
2:f55edcf: 
1:f55edcf: import java.util.Set;
1:f55edcf: 
1:f55edcf: import org.apache.activemq.broker.ConnectionContext;
1:f55edcf: import org.apache.activemq.broker.region.BaseDestination;
1:f55edcf: import org.apache.activemq.broker.region.Destination;
1:f55edcf: import org.apache.activemq.broker.region.DestinationFilter;
1:f55edcf: import org.apache.activemq.broker.region.IndirectMessageReference;
1:f55edcf: import org.apache.activemq.broker.region.RegionBroker;
1:f55edcf: import org.apache.activemq.broker.region.Subscription;
1:f55edcf: import org.apache.activemq.broker.region.Topic;
1:f55edcf: import org.apache.activemq.command.ActiveMQDestination;
1:f55edcf: import org.apache.activemq.command.Message;
1:f55edcf: import org.apache.activemq.util.SubscriptionKey;
1:f55edcf: 
1:f55edcf: /**
1:f55edcf:  * Creates a mapped Queue that can recover messages from subscription recovery
1:f55edcf:  * policy of its Virtual Topic.
1:f55edcf:  */
1:f55edcf: public class MappedQueueFilter extends DestinationFilter {
1:f55edcf: 
1:f55edcf:     private final ActiveMQDestination virtualDestination;
1:f55edcf: 
1:f55edcf:     public MappedQueueFilter(ActiveMQDestination virtualDestination, Destination destination) {
1:f55edcf:         super(destination);
1:f55edcf:         this.virtualDestination = virtualDestination;
2:f55edcf:     }
1:f55edcf: 
1:f55edcf:     @Override
1:f55edcf:     public synchronized void addSubscription(ConnectionContext context, Subscription sub) throws Exception {
1:f55edcf:         // recover messages for first consumer only
1:f55edcf:         boolean noSubs = getConsumers().isEmpty();
1:f55edcf: 
1:a67c75a:         // for virtual consumer wildcard dests, only subscribe to exact match or non wildcard dests to ensure no duplicates
1:a67c75a:         int match = sub.getActiveMQDestination().compareTo(next.getActiveMQDestination());
1:a67c75a:         if (match == 0 || (!next.getActiveMQDestination().isPattern() && match == 1)) {
1:05c3112:             super.addSubscription(context, sub);
1:679db08:         }
1:679db08:         if (noSubs && !getConsumers().isEmpty()) {
1:679db08:             // new subscription added, recover retroactive messages
1:679db08:             final RegionBroker regionBroker = (RegionBroker) context.getBroker().getAdaptor(RegionBroker.class);
1:679db08:             final Set<Destination> virtualDests = regionBroker.getDestinations(virtualDestination);
1:f55edcf: 
1:679db08:             final ActiveMQDestination newDestination = sub.getActiveMQDestination();
1:0b76d3a:             BaseDestination regionDest = null;
1:f55edcf: 
1:679db08:             for (Destination virtualDest : virtualDests) {
1:679db08:                 if (virtualDest.getActiveMQDestination().isTopic() &&
1:679db08:                         (virtualDest.isAlwaysRetroactive() || sub.getConsumerInfo().isRetroactive())) {
1:f55edcf: 
1:679db08:                     Topic topic = (Topic) getBaseDestination(virtualDest);
1:679db08:                     if (topic != null) {
1:679db08:                         // re-use browse() to get recovered messages
1:679db08:                         final Message[] messages = topic.getSubscriptionRecoveryPolicy().browse(topic.getActiveMQDestination());
1:f55edcf: 
1:679db08:                         // add recovered messages to subscription
1:679db08:                         for (Message message : messages) {
1:679db08:                             final Message copy = message.copy();
1:679db08:                             copy.setOriginalDestination(message.getDestination());
1:679db08:                             copy.setDestination(newDestination);
1:0b76d3a:                             if (regionDest == null) {
1:0b76d3a:                                 regionDest = getBaseDestination((Destination) regionBroker.getDestinations(newDestination).toArray()[0]);
1:0b76d3a:                             }
1:679db08:                             copy.setRegionDestination(regionDest);
1:679db08:                             sub.addRecoveredMessage(context, newDestination.isQueue() ? new IndirectMessageReference(copy) : copy);
1:05c3112:                         }
1:f55edcf:                     }
1:f55edcf:                 }
1:f55edcf:             }
1:f55edcf:         }
1:f55edcf:     }
1:f55edcf: 
1:f55edcf:     private BaseDestination getBaseDestination(Destination virtualDest) {
1:f55edcf:         if (virtualDest instanceof BaseDestination) {
1:f55edcf:             return (BaseDestination) virtualDest;
1:f55edcf:         } else if (virtualDest instanceof DestinationFilter) {
1:f55edcf:             return ((DestinationFilter) virtualDest).getAdaptor(BaseDestination.class);
1:f55edcf:         }
1:f55edcf:         return null;
1:f55edcf:     }
1:f55edcf: 
1:f55edcf:     @Override
1:f55edcf:     public synchronized void removeSubscription(ConnectionContext context, Subscription sub, long lastDeliveredSequenceId) throws Exception {
1:f55edcf:         super.removeSubscription(context, sub, lastDeliveredSequenceId);
1:f55edcf:     }
1:f55edcf: 
1:f55edcf:     @Override
1:f55edcf:     public synchronized void deleteSubscription(ConnectionContext context, SubscriptionKey key) throws Exception {
1:f55edcf:         super.deleteSubscription(context, key);
1:f55edcf:     }
1:05c3112: 
1:05c3112:     @Override
1:05c3112:     public String toString() {
1:05c3112:         return "MappedQueueFilter[" + virtualDestination + ", " + next + "]";
1:05c3112:     }
1:f55edcf: }
============================================================================
author:gtully
-------------------------------------------------------------------------------
commit:0b76d3a
/////////////////////////////////////////////////////////////////////////
1:             BaseDestination regionDest = null;
/////////////////////////////////////////////////////////////////////////
1:                             if (regionDest == null) {
1:                                 regionDest = getBaseDestination((Destination) regionBroker.getDestinations(newDestination).toArray()[0]);
1:                             }
commit:a67c75a
/////////////////////////////////////////////////////////////////////////
1:         // for virtual consumer wildcard dests, only subscribe to exact match or non wildcard dests to ensure no duplicates
1:         int match = sub.getActiveMQDestination().compareTo(next.getActiveMQDestination());
1:         if (match == 0 || (!next.getActiveMQDestination().isPattern() && match == 1)) {
commit:679db08
/////////////////////////////////////////////////////////////////////////
0:         // for virtual consumer wildcard dests, only subscribe to exact match to ensure no duplicates
0:         if (sub.getActiveMQDestination().compareTo(next.getActiveMQDestination()) == 0) {
1:         }
1:         if (noSubs && !getConsumers().isEmpty()) {
1:             // new subscription added, recover retroactive messages
1:             final RegionBroker regionBroker = (RegionBroker) context.getBroker().getAdaptor(RegionBroker.class);
1:             final Set<Destination> virtualDests = regionBroker.getDestinations(virtualDestination);
1:             final ActiveMQDestination newDestination = sub.getActiveMQDestination();
0:             final BaseDestination regionDest = getBaseDestination((Destination) regionBroker.getDestinations(newDestination).toArray()[0]);
1:             for (Destination virtualDest : virtualDests) {
1:                 if (virtualDest.getActiveMQDestination().isTopic() &&
1:                         (virtualDest.isAlwaysRetroactive() || sub.getConsumerInfo().isRetroactive())) {
1:                     Topic topic = (Topic) getBaseDestination(virtualDest);
1:                     if (topic != null) {
1:                         // re-use browse() to get recovered messages
1:                         final Message[] messages = topic.getSubscriptionRecoveryPolicy().browse(topic.getActiveMQDestination());
1:                         // add recovered messages to subscription
1:                         for (Message message : messages) {
1:                             final Message copy = message.copy();
1:                             copy.setOriginalDestination(message.getDestination());
1:                             copy.setDestination(newDestination);
1:                             copy.setRegionDestination(regionDest);
1:                             sub.addRecoveredMessage(context, newDestination.isQueue() ? new IndirectMessageReference(copy) : copy);
author:Dejan Bosanac
-------------------------------------------------------------------------------
commit:05c3112
/////////////////////////////////////////////////////////////////////////
0:         if (!sub.getActiveMQDestination().isPattern() || sub.getActiveMQDestination().equals(next.getActiveMQDestination())) {
1:             super.addSubscription(context, sub);
0:             if (noSubs && !getConsumers().isEmpty()) {
0:                 // new subscription added, recover retroactive messages
0:                 final RegionBroker regionBroker = (RegionBroker) context.getBroker().getAdaptor(RegionBroker.class);
0:                 final Set<Destination> virtualDests = regionBroker.getDestinations(virtualDestination);
0:                 final ActiveMQDestination newDestination = sub.getActiveMQDestination();
0:                 final BaseDestination regionDest = getBaseDestination((Destination) regionBroker.getDestinations(newDestination).toArray()[0]);
0:                 for (Destination virtualDest : virtualDests) {
0:                     if (virtualDest.getActiveMQDestination().isTopic() &&
0:                             (virtualDest.isAlwaysRetroactive() || sub.getConsumerInfo().isRetroactive())) {
0:                         Topic topic = (Topic) getBaseDestination(virtualDest);
0:                         if (topic != null) {
0:                             // re-use browse() to get recovered messages
0:                             final Message[] messages = topic.getSubscriptionRecoveryPolicy().browse(topic.getActiveMQDestination());
0:                             // add recovered messages to subscription
0:                             for (Message message : messages) {
0:                                 final Message copy = message.copy();
0:                                 copy.setOriginalDestination(message.getDestination());
0:                                 copy.setDestination(newDestination);
0:                                 copy.setRegionDestination(regionDest);
0:                                 sub.addRecoveredMessage(context, newDestination.isQueue() ? new IndirectMessageReference(copy) : copy);
1:                             }
/////////////////////////////////////////////////////////////////////////
1: 
1:     @Override
1:     public String toString() {
1:         return "MappedQueueFilter[" + virtualDestination + ", " + next + "]";
1:     }
commit:9f53e2b
/////////////////////////////////////////////////////////////////////////
1: /**
1:  * Licensed to the Apache Software Foundation (ASF) under one or more
1:  * contributor license agreements.  See the NOTICE file distributed with
1:  * this work for additional information regarding copyright ownership.
1:  * The ASF licenses this file to You under the Apache License, Version 2.0
1:  * (the "License"); you may not use this file except in compliance with
1:  * the License.  You may obtain a copy of the License at
1:  *
1:  *      http://www.apache.org/licenses/LICENSE-2.0
1:  *
1:  * Unless required by applicable law or agreed to in writing, software
1:  * distributed under the License is distributed on an "AS IS" BASIS,
1:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:  * See the License for the specific language governing permissions and
1:  * limitations under the License.
1:  */
author:Timothy Bish
-------------------------------------------------------------------------------
commit:f55edcf
/////////////////////////////////////////////////////////////////////////
1: package org.apache.activemq.broker.region.virtual;
1: 
1: import java.util.Set;
1: 
1: import org.apache.activemq.broker.ConnectionContext;
1: import org.apache.activemq.broker.region.BaseDestination;
1: import org.apache.activemq.broker.region.Destination;
1: import org.apache.activemq.broker.region.DestinationFilter;
1: import org.apache.activemq.broker.region.IndirectMessageReference;
1: import org.apache.activemq.broker.region.RegionBroker;
1: import org.apache.activemq.broker.region.Subscription;
1: import org.apache.activemq.broker.region.Topic;
1: import org.apache.activemq.command.ActiveMQDestination;
1: import org.apache.activemq.command.Message;
1: import org.apache.activemq.util.SubscriptionKey;
1: 
1: /**
1:  * Creates a mapped Queue that can recover messages from subscription recovery
1:  * policy of its Virtual Topic.
1:  */
1: public class MappedQueueFilter extends DestinationFilter {
1: 
1:     private final ActiveMQDestination virtualDestination;
1: 
1:     public MappedQueueFilter(ActiveMQDestination virtualDestination, Destination destination) {
1:         super(destination);
1:         this.virtualDestination = virtualDestination;
1:     }
1: 
1:     @Override
1:     public synchronized void addSubscription(ConnectionContext context, Subscription sub) throws Exception {
1:         // recover messages for first consumer only
1:         boolean noSubs = getConsumers().isEmpty();
1: 
0:         super.addSubscription(context, sub);
1: 
0:         if (noSubs && !getConsumers().isEmpty()) {
0:             // new subscription added, recover retroactive messages
0:             final RegionBroker regionBroker = (RegionBroker) context.getBroker().getAdaptor(RegionBroker.class);
0:             final Set<Destination> virtualDests = regionBroker.getDestinations(virtualDestination);
1: 
0:             final ActiveMQDestination newDestination = sub.getActiveMQDestination();
0:             final BaseDestination regionDest = getBaseDestination((Destination) regionBroker.getDestinations(newDestination).toArray()[0]);
1: 
0:             for (Destination virtualDest : virtualDests) {
0:                 if (virtualDest.getActiveMQDestination().isTopic() &&
0:                     (virtualDest.isAlwaysRetroactive() || sub.getConsumerInfo().isRetroactive())) {
1: 
0:                     Topic topic = (Topic) getBaseDestination(virtualDest);
0:                     if (topic != null) {
0:                         // re-use browse() to get recovered messages
0:                         final Message[] messages = topic.getSubscriptionRecoveryPolicy().browse(topic.getActiveMQDestination());
1: 
0:                         // add recovered messages to subscription
0:                         for (Message message : messages) {
0:                             final Message copy = message.copy();
0:                             copy.setOriginalDestination(message.getDestination());
0:                             copy.setDestination(newDestination);
0:                             copy.setRegionDestination(regionDest);
0:                             sub.addRecoveredMessage(context, newDestination.isQueue() ? new IndirectMessageReference(copy) : copy);
1:                         }
1:                     }
1:                 }
1:             }
1:         }
1:     }
1: 
1:     private BaseDestination getBaseDestination(Destination virtualDest) {
1:         if (virtualDest instanceof BaseDestination) {
1:             return (BaseDestination) virtualDest;
1:         } else if (virtualDest instanceof DestinationFilter) {
1:             return ((DestinationFilter) virtualDest).getAdaptor(BaseDestination.class);
1:         }
1:         return null;
1:     }
1: 
1:     @Override
1:     public synchronized void removeSubscription(ConnectionContext context, Subscription sub, long lastDeliveredSequenceId) throws Exception {
1:         super.removeSubscription(context, sub, lastDeliveredSequenceId);
1:     }
1: 
1:     @Override
1:     public synchronized void deleteSubscription(ConnectionContext context, SubscriptionKey key) throws Exception {
1:         super.deleteSubscription(context, key);
1:     }
1: }
============================================================================