1:a5c8bcb: /**
1:a5c8bcb:  * Licensed to the Apache Software Foundation (ASF) under one or more
1:a5c8bcb:  * contributor license agreements. See the NOTICE file distributed with this
1:a5c8bcb:  * work for additional information regarding copyright ownership. The ASF
1:a5c8bcb:  * licenses this file to You under the Apache License, Version 2.0 (the
1:a5c8bcb:  * "License"); you may not use this file except in compliance with the License.
1:a5c8bcb:  * You may obtain a copy of the License at
1:a5c8bcb:  *
1:a5c8bcb:  * http://www.apache.org/licenses/LICENSE-2.0
1:a5c8bcb:  *
1:a5c8bcb:  * Unless required by applicable law or agreed to in writing, software
1:a5c8bcb:  * distributed under the License is distributed on an "AS IS" BASIS, WITHOUT
1:a5c8bcb:  * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the
1:a5c8bcb:  * License for the specific language governing permissions and limitations under
1:a5c8bcb:  * the License.
1:a5c8bcb:  */
1:a5c8bcb: package org.apache.activemq.console.command;
1:a5c8bcb: 
1:a5c8bcb: import java.util.ArrayList;
1:a5c8bcb: import java.util.Arrays;
1:a5c8bcb: import java.util.Collection;
1:a5c8bcb: import java.util.List;
1:a5c8bcb: import org.junit.Assert;
1:a5c8bcb: import org.junit.Test;
1:a5c8bcb: import org.junit.runner.RunWith;
1:a5c8bcb: import org.junit.runners.Parameterized;
1:a5c8bcb: import org.junit.runners.Parameterized.Parameters;
1:a5c8bcb: 
1:a5c8bcb: @RunWith(Parameterized.class)
1:a5c8bcb: public class PurgeCommandTest {
1:a5c8bcb: 
1:a5c8bcb:     private final List<String> datum;
1:a5c8bcb:     private final String expected;
1:a5c8bcb: 
1:a5c8bcb:     /**
1:a5c8bcb:      * Produces the data for the test.
1:a5c8bcb:      *
1:a5c8bcb:      * @return
1:a5c8bcb:      */
1:a5c8bcb:     @Parameters(name = "{index}: convertToSQL92({0})={1}")
1:a5c8bcb:     public static Collection<Object[]> produceTestData() {
1:a5c8bcb:         List<Object[]> params = new ArrayList<>();
1:a5c8bcb:         // wildcard query enclosed by single quotes must be converted into 
1:a5c8bcb:         // SQL92 LIKE-statement
1:a5c8bcb:         params.add(toParameterArray(
1:a5c8bcb:                 "(JMSMessageId LIKE '%:10_')",
1:a5c8bcb:                 "JMSMessageId='*:10?'")
1:a5c8bcb:         );
1:a5c8bcb: 
1:a5c8bcb:         // query parameter containing wildcard characters but not enclosed by 
1:a5c8bcb:         // single quotes must be taken as literal
1:a5c8bcb:         params.add(toParameterArray(
1:a5c8bcb:                 "(JMSMessageId=*:10?)",
1:a5c8bcb:                 "JMSMessageId=*:10?")
1:a5c8bcb:         );
1:a5c8bcb:         params.add(toParameterArray(
1:a5c8bcb:                 "(JMSMessageId=%:10_)",
1:a5c8bcb:                 "JMSMessageId=%:10_")
1:a5c8bcb:         );
1:a5c8bcb: 
1:a5c8bcb:         // query parameter not enclosed by single quotes must be taken as literal
1:a5c8bcb:         params.add(toParameterArray(
1:a5c8bcb:                 "(JMSMessageId=SOME_ID)",
1:a5c8bcb:                 "JMSMessageId=SOME_ID")
1:a5c8bcb:         );
1:a5c8bcb: 
1:a5c8bcb:         // query parameter not containing wildcard characters but enclosed by 
1:a5c8bcb:         // single quotes must not be converted into a SQL92 LIKE-statement
1:a5c8bcb:         params.add(toParameterArray(
1:a5c8bcb:                 "(JMSMessageId='SOME_ID')",
1:a5c8bcb:                 "JMSMessageId='SOME_ID'")
1:a5c8bcb:         );
1:a5c8bcb:         params.add(toParameterArray(
1:a5c8bcb:                 "(JMSMessageId='%:10_')",
1:a5c8bcb:                 "JMSMessageId='%:10_'")
1:a5c8bcb:         );
1:a5c8bcb: 
1:a5c8bcb:         // multiple query parameter must be concatenated by 'AND'
1:a5c8bcb:         params.add(toParameterArray(
1:a5c8bcb:                 "(JMSMessageId LIKE '%:10_') AND (JMSPriority>5)",
1:a5c8bcb:                 "JMSMessageId='*:10?'", "JMSPriority>5")
1:a5c8bcb:         );
1:a5c8bcb:         params.add(toParameterArray(
1:a5c8bcb:                 "(JMSPriority>5) AND (JMSMessageId LIKE '%:10_')",
1:a5c8bcb:                 "JMSPriority>5", "JMSMessageId='*:10?'")
1:a5c8bcb:         );
1:a5c8bcb: 
1:a5c8bcb:         // a query which is already in SQL92 syntax should not be altered
1:a5c8bcb:         params.add(toParameterArray(
1:a5c8bcb:                 "((JMSPriority>5) AND (JMSMessageId LIKE '%:10_'))",
1:a5c8bcb:                 "(JMSPriority>5) AND (JMSMessageId LIKE '%:10_')")
1:a5c8bcb:         );
1:a5c8bcb:         return params;
1:a5c8bcb:     }
1:a5c8bcb: 
1:a5c8bcb:     /**
1:a5c8bcb:      * Test if the wildcard queries correctly converted into a valid SQL92
1:a5c8bcb:      * statement.
1:a5c8bcb:      */
1:a5c8bcb:     @Test
1:a5c8bcb:     public void testConvertToSQL92() {
1:a5c8bcb:         System.out.print("testTokens  = " + datum);
1:a5c8bcb:         System.out.println("  output = " + expected);
1:a5c8bcb:         PurgeCommand pc = new PurgeCommand();
1:a5c8bcb:         Assert.assertEquals(expected, pc.convertToSQL92(datum));
1:a5c8bcb:     }
1:a5c8bcb: 
1:a5c8bcb:     /**
1:a5c8bcb:      * Convert the passed parameter into an object array which is used for
1:a5c8bcb:      * the unit tests of method <code>convertToSQL92</code>.
1:a5c8bcb:      *
1:a5c8bcb:      * @param datum the tokens which are passed as list to the method
1:a5c8bcb:      * @param expected the expected value returned by the method
1:a5c8bcb:      * @return object array with the values used for the unit test
1:a5c8bcb:      */
1:a5c8bcb:     static Object[] toParameterArray(String expected, String... tokens) {
1:a5c8bcb:         return new Object[]{Arrays.asList(tokens), expected};
1:a5c8bcb:     }
1:a5c8bcb: 
1:a5c8bcb:     public PurgeCommandTest(List<String> datum, String expected) {
1:a5c8bcb:         this.datum = datum;
1:a5c8bcb:         this.expected = expected;
1:a5c8bcb:     }
1:a5c8bcb: }
============================================================================
author:Claus Ibsen
-------------------------------------------------------------------------------
commit:a5c8bcb
/////////////////////////////////////////////////////////////////////////
1: /**
1:  * Licensed to the Apache Software Foundation (ASF) under one or more
1:  * contributor license agreements. See the NOTICE file distributed with this
1:  * work for additional information regarding copyright ownership. The ASF
1:  * licenses this file to You under the Apache License, Version 2.0 (the
1:  * "License"); you may not use this file except in compliance with the License.
1:  * You may obtain a copy of the License at
1:  *
1:  * http://www.apache.org/licenses/LICENSE-2.0
1:  *
1:  * Unless required by applicable law or agreed to in writing, software
1:  * distributed under the License is distributed on an "AS IS" BASIS, WITHOUT
1:  * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the
1:  * License for the specific language governing permissions and limitations under
1:  * the License.
1:  */
1: package org.apache.activemq.console.command;
1: 
1: import java.util.ArrayList;
1: import java.util.Arrays;
1: import java.util.Collection;
1: import java.util.List;
1: import org.junit.Assert;
1: import org.junit.Test;
1: import org.junit.runner.RunWith;
1: import org.junit.runners.Parameterized;
1: import org.junit.runners.Parameterized.Parameters;
1: 
1: @RunWith(Parameterized.class)
1: public class PurgeCommandTest {
1: 
1:     private final List<String> datum;
1:     private final String expected;
1: 
1:     /**
1:      * Produces the data for the test.
1:      *
1:      * @return
1:      */
1:     @Parameters(name = "{index}: convertToSQL92({0})={1}")
1:     public static Collection<Object[]> produceTestData() {
1:         List<Object[]> params = new ArrayList<>();
1:         // wildcard query enclosed by single quotes must be converted into 
1:         // SQL92 LIKE-statement
1:         params.add(toParameterArray(
1:                 "(JMSMessageId LIKE '%:10_')",
1:                 "JMSMessageId='*:10?'")
1:         );
1: 
1:         // query parameter containing wildcard characters but not enclosed by 
1:         // single quotes must be taken as literal
1:         params.add(toParameterArray(
1:                 "(JMSMessageId=*:10?)",
1:                 "JMSMessageId=*:10?")
1:         );
1:         params.add(toParameterArray(
1:                 "(JMSMessageId=%:10_)",
1:                 "JMSMessageId=%:10_")
1:         );
1: 
1:         // query parameter not enclosed by single quotes must be taken as literal
1:         params.add(toParameterArray(
1:                 "(JMSMessageId=SOME_ID)",
1:                 "JMSMessageId=SOME_ID")
1:         );
1: 
1:         // query parameter not containing wildcard characters but enclosed by 
1:         // single quotes must not be converted into a SQL92 LIKE-statement
1:         params.add(toParameterArray(
1:                 "(JMSMessageId='SOME_ID')",
1:                 "JMSMessageId='SOME_ID'")
1:         );
1:         params.add(toParameterArray(
1:                 "(JMSMessageId='%:10_')",
1:                 "JMSMessageId='%:10_'")
1:         );
1: 
1:         // multiple query parameter must be concatenated by 'AND'
1:         params.add(toParameterArray(
1:                 "(JMSMessageId LIKE '%:10_') AND (JMSPriority>5)",
1:                 "JMSMessageId='*:10?'", "JMSPriority>5")
1:         );
1:         params.add(toParameterArray(
1:                 "(JMSPriority>5) AND (JMSMessageId LIKE '%:10_')",
1:                 "JMSPriority>5", "JMSMessageId='*:10?'")
1:         );
1: 
1:         // a query which is already in SQL92 syntax should not be altered
1:         params.add(toParameterArray(
1:                 "((JMSPriority>5) AND (JMSMessageId LIKE '%:10_'))",
1:                 "(JMSPriority>5) AND (JMSMessageId LIKE '%:10_')")
1:         );
1:         return params;
1:     }
1: 
1:     /**
1:      * Test if the wildcard queries correctly converted into a valid SQL92
1:      * statement.
1:      */
1:     @Test
1:     public void testConvertToSQL92() {
1:         System.out.print("testTokens  = " + datum);
1:         System.out.println("  output = " + expected);
1:         PurgeCommand pc = new PurgeCommand();
1:         Assert.assertEquals(expected, pc.convertToSQL92(datum));
1:     }
1: 
1:     /**
1:      * Convert the passed parameter into an object array which is used for
1:      * the unit tests of method <code>convertToSQL92</code>.
1:      *
1:      * @param datum the tokens which are passed as list to the method
1:      * @param expected the expected value returned by the method
1:      * @return object array with the values used for the unit test
1:      */
1:     static Object[] toParameterArray(String expected, String... tokens) {
1:         return new Object[]{Arrays.asList(tokens), expected};
1:     }
1: 
1:     public PurgeCommandTest(List<String> datum, String expected) {
1:         this.datum = datum;
1:         this.expected = expected;
1:     }
1: }
============================================================================