1:ecf068e: /**
1:ecf068e:  * Licensed to the Apache Software Foundation (ASF) under one or more
1:ecf068e:  * contributor license agreements.  See the NOTICE file distributed with
1:ecf068e:  * this work for additional information regarding copyright ownership.
1:ecf068e:  * The ASF licenses this file to You under the Apache License, Version 2.0
1:ecf068e:  * (the "License"); you may not use this file except in compliance with
1:ecf068e:  * the License.  You may obtain a copy of the License at
1:ecf068e:  *
1:ecf068e:  *      http://www.apache.org/licenses/LICENSE-2.0
1:ecf068e:  *
1:ecf068e:  * Unless required by applicable law or agreed to in writing, software
1:ecf068e:  * distributed under the License is distributed on an "AS IS" BASIS,
1:ecf068e:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:ecf068e:  * See the License for the specific language governing permissions and
1:ecf068e:  * limitations under the License.
1:ecf068e:  */
1:ecf068e: package org.apache.activemq.broker.region.policy;
1:ecf068e: 
1:ecf068e: import java.util.ArrayList;
1:938a5fc: import java.util.Iterator;
1:ecf068e: import java.util.List;
1:ecf068e: 
1:ecf068e: import org.apache.activemq.broker.region.MessageReference;
1:ecf068e: import org.apache.activemq.broker.region.Subscription;
1:ecf068e: import org.apache.activemq.command.ConsumerId;
1:ecf068e: import org.apache.activemq.command.ConsumerInfo;
1:ecf068e: import org.apache.activemq.filter.MessageEvaluationContext;
1:8bf987b: import org.slf4j.Logger;
1:8bf987b: import org.slf4j.LoggerFactory;
1:ecf068e: 
1:ecf068e: /**
1:ecf068e:  * dispatch policy that ignores lower priority duplicate network consumers,
1:ecf068e:  * used in conjunction with network bridge suppresDuplicateTopicSubscriptions
1:ecf068e:  * 
1:ecf068e:  * @org.apache.xbean.XBean
1:ecf068e:  */
1:ecf068e: public class PriorityNetworkDispatchPolicy extends SimpleDispatchPolicy {
1:ecf068e: 
1:8bf987b:     private static final Logger LOG = LoggerFactory.getLogger(PriorityNetworkDispatchPolicy.class);
1:ecf068e:     @Override
1:ecf068e:     public boolean dispatch(MessageReference node,
1:ecf068e:             MessageEvaluationContext msgContext,
1:ecf068e:             List<Subscription> consumers) throws Exception {
1:ecf068e:         
1:ecf068e:         List<Subscription> duplicateFreeSubs = new ArrayList<Subscription>();
1:ecf068e:         synchronized (consumers) {
1:ecf068e:             for (Subscription sub: consumers) {
1:ecf068e:                 ConsumerInfo info = sub.getConsumerInfo();
1:ecf068e:                 if (info.isNetworkSubscription()) {    
1:ecf068e:                     boolean highestPrioritySub = true;
1:938a5fc:                     for (Iterator<Subscription> it =  duplicateFreeSubs.iterator(); it.hasNext(); ) {
1:938a5fc:                         Subscription candidate = it.next();
1:ecf068e:                         if (matches(candidate, info)) {
1:ecf068e:                             if (hasLowerPriority(candidate, info)) {
1:938a5fc:                                 it.remove();
1:ecf068e:                             } else {
1:ecf068e:                                 // higher priority matching sub exists
1:ecf068e:                                 highestPrioritySub = false;
1:e1bbde7:                                 LOG.debug("ignoring lower priority: {} [{}, {}] in favour of: {} [{}, {}]",
1:e1bbde7:                                         new Object[]{ candidate,
1:e1bbde7:                                                 candidate.getConsumerInfo().getNetworkConsumerIds(),
1:e1bbde7:                                                 candidate.getConsumerInfo().getNetworkConsumerIds(),
1:e1bbde7:                                                 sub,
1:e1bbde7:                                                 sub.getConsumerInfo().getNetworkConsumerIds(),
1:e1bbde7:                                                 sub.getConsumerInfo().getNetworkConsumerIds() });
2:ecf068e:                             }
1:ecf068e:                         }
1:ecf068e:                     }
1:ecf068e:                     if (highestPrioritySub) {
1:ecf068e:                         duplicateFreeSubs.add(sub);
1:ecf068e:                     } 
1:ecf068e:                 } else {
1:ecf068e:                     duplicateFreeSubs.add(sub);
1:ecf068e:                 }
1:ecf068e:             }
1:ecf068e:         }
1:ecf068e:         
1:ecf068e:         return super.dispatch(node, msgContext, duplicateFreeSubs);
1:ecf068e:     }
1:ecf068e: 
1:ecf068e:     private boolean hasLowerPriority(Subscription candidate,
1:ecf068e:             ConsumerInfo info) {
1:ecf068e:        return candidate.getConsumerInfo().getPriority() < info.getPriority();
1:ecf068e:     }
1:ecf068e: 
1:ecf068e:     private boolean matches(Subscription candidate, ConsumerInfo info) {
1:ecf068e:         boolean matched = false;
1:ecf068e:         for (ConsumerId candidateId: candidate.getConsumerInfo().getNetworkConsumerIds()) {
1:ecf068e:             for (ConsumerId subId: info.getNetworkConsumerIds()) {
1:ecf068e:                 if (candidateId.equals(subId)) {
1:ecf068e:                     matched = true;
1:ecf068e:                     break;
1:ecf068e:                 }
1:ecf068e:             }
1:ecf068e:         }
1:ecf068e:         return matched;
1:ecf068e:     }
1:ecf068e: 
1:ecf068e: }
============================================================================
author:Timothy Bish
-------------------------------------------------------------------------------
commit:e1bbde7
/////////////////////////////////////////////////////////////////////////
1:                                 LOG.debug("ignoring lower priority: {} [{}, {}] in favour of: {} [{}, {}]",
1:                                         new Object[]{ candidate,
1:                                                 candidate.getConsumerInfo().getNetworkConsumerIds(),
1:                                                 candidate.getConsumerInfo().getNetworkConsumerIds(),
1:                                                 sub,
1:                                                 sub.getConsumerInfo().getNetworkConsumerIds(),
1:                                                 sub.getConsumerInfo().getNetworkConsumerIds() });
author:Hiram R. Chirino
-------------------------------------------------------------------------------
commit:58aca86
author:Bosanac Dejan
-------------------------------------------------------------------------------
commit:8bf987b
/////////////////////////////////////////////////////////////////////////
1: import org.slf4j.Logger;
1: import org.slf4j.LoggerFactory;
/////////////////////////////////////////////////////////////////////////
1:     private static final Logger LOG = LoggerFactory.getLogger(PriorityNetworkDispatchPolicy.class);
author:Gary Tully
-------------------------------------------------------------------------------
commit:938a5fc
/////////////////////////////////////////////////////////////////////////
1: import java.util.Iterator;
/////////////////////////////////////////////////////////////////////////
1:                     for (Iterator<Subscription> it =  duplicateFreeSubs.iterator(); it.hasNext(); ) {
1:                         Subscription candidate = it.next();
1:                                 it.remove();
commit:ecf068e
/////////////////////////////////////////////////////////////////////////
1: /**
1:  * Licensed to the Apache Software Foundation (ASF) under one or more
1:  * contributor license agreements.  See the NOTICE file distributed with
1:  * this work for additional information regarding copyright ownership.
1:  * The ASF licenses this file to You under the Apache License, Version 2.0
1:  * (the "License"); you may not use this file except in compliance with
1:  * the License.  You may obtain a copy of the License at
1:  *
1:  *      http://www.apache.org/licenses/LICENSE-2.0
1:  *
1:  * Unless required by applicable law or agreed to in writing, software
1:  * distributed under the License is distributed on an "AS IS" BASIS,
1:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:  * See the License for the specific language governing permissions and
1:  * limitations under the License.
1:  */
1: package org.apache.activemq.broker.region.policy;
1: 
1: import java.util.ArrayList;
1: import java.util.List;
1: 
1: import org.apache.activemq.broker.region.MessageReference;
1: import org.apache.activemq.broker.region.Subscription;
1: import org.apache.activemq.command.ConsumerId;
1: import org.apache.activemq.command.ConsumerInfo;
1: import org.apache.activemq.filter.MessageEvaluationContext;
0: import org.apache.commons.logging.Log;
0: import org.apache.commons.logging.LogFactory;
1: 
1: /**
1:  * dispatch policy that ignores lower priority duplicate network consumers,
1:  * used in conjunction with network bridge suppresDuplicateTopicSubscriptions
1:  * 
1:  * @org.apache.xbean.XBean
1:  */
1: public class PriorityNetworkDispatchPolicy extends SimpleDispatchPolicy {
1: 
0:     private static final Log LOG = LogFactory.getLog(PriorityNetworkDispatchPolicy.class);
1:     @Override
1:     public boolean dispatch(MessageReference node,
1:             MessageEvaluationContext msgContext,
1:             List<Subscription> consumers) throws Exception {
1:         
1:         List<Subscription> duplicateFreeSubs = new ArrayList<Subscription>();
1:         synchronized (consumers) {
1:             for (Subscription sub: consumers) {
1:                 ConsumerInfo info = sub.getConsumerInfo();
1:                 if (info.isNetworkSubscription()) {    
1:                     boolean highestPrioritySub = true;
0:                     for (Subscription candidate: duplicateFreeSubs) {
1:                         if (matches(candidate, info)) {
1:                             if (hasLowerPriority(candidate, info)) {
0:                                 duplicateFreeSubs.remove(candidate);
1:                             } else {
1:                                 // higher priority matching sub exists
1:                                 highestPrioritySub = false;
0:                                 if (LOG.isDebugEnabled()) {
0:                                 LOG.debug("ignoring lower priority: " + candidate 
0:                                         + "[" +candidate.getConsumerInfo().getNetworkConsumerIds() +", "
0:                                         + candidate.getConsumerInfo().getNetworkConsumerIds() +"] in favour of: " 
0:                                         + sub
0:                                         + "[" +sub.getConsumerInfo().getNetworkConsumerIds() +", "
0:                                         + sub.getConsumerInfo().getNetworkConsumerIds() +"]");
1:                                 }
1:                             }
1:                         }
1:                     }
1:                     if (highestPrioritySub) {
1:                         duplicateFreeSubs.add(sub);
1:                     } 
1:                 } else {
1:                     duplicateFreeSubs.add(sub);
1:                 }
1:             }
1:         }
1:         
1:         return super.dispatch(node, msgContext, duplicateFreeSubs);
1:     }
1: 
1:     private boolean hasLowerPriority(Subscription candidate,
1:             ConsumerInfo info) {
1:        return candidate.getConsumerInfo().getPriority() < info.getPriority();
1:     }
1: 
1:     private boolean matches(Subscription candidate, ConsumerInfo info) {
1:         boolean matched = false;
1:         for (ConsumerId candidateId: candidate.getConsumerInfo().getNetworkConsumerIds()) {
1:             for (ConsumerId subId: info.getNetworkConsumerIds()) {
1:                 if (candidateId.equals(subId)) {
1:                     matched = true;
1:                     break;
1:                 }
1:             }
1:         }
1:         return matched;
1:     }
1: 
1: }
============================================================================