1:eb9c584: /**
1:eb9c584:  * Licensed to the Apache Software Foundation (ASF) under one or more
1:eb9c584:  * contributor license agreements.  See the NOTICE file distributed with
1:eb9c584:  * this work for additional information regarding copyright ownership.
1:eb9c584:  * The ASF licenses this file to You under the Apache License, Version 2.0
1:eb9c584:  * (the "License"); you may not use this file except in compliance with
1:eb9c584:  * the License.  You may obtain a copy of the License at
1:eb9c584:  *
1:eb9c584:  *      http://www.apache.org/licenses/LICENSE-2.0
1:eb9c584:  *
1:eb9c584:  * Unless required by applicable law or agreed to in writing, software
1:eb9c584:  * distributed under the License is distributed on an "AS IS" BASIS,
1:eb9c584:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:eb9c584:  * See the License for the specific language governing permissions and
1:eb9c584:  * limitations under the License.
1:eb9c584:  */
1:eb9c584: package org.apache.activemq.openwire;
1:eb9c584: 
1:eb9c584: import static org.junit.Assert.assertEquals;
1:eb9c584: import static org.junit.Assert.assertTrue;
1:eb9c584: 
1:eb9c584: import java.io.ByteArrayInputStream;
1:eb9c584: import java.io.ByteArrayOutputStream;
1:eb9c584: import java.io.DataInputStream;
1:eb9c584: import java.io.DataOutputStream;
1:eb9c584: import java.io.IOException;
1:eb9c584: 
1:eb9c584: import org.apache.activemq.command.BrokerSubscriptionInfo;
1:eb9c584: import org.apache.activemq.command.ConsumerId;
1:eb9c584: import org.apache.activemq.command.ConsumerInfo;
1:eb9c584: import org.junit.Test;
1:eb9c584: import org.slf4j.Logger;
1:eb9c584: import org.slf4j.LoggerFactory;
1:eb9c584: 
1:eb9c584: public class BrokerSubscriptionInfoTest {
1:eb9c584: 
1:eb9c584:     static final Logger LOG = LoggerFactory.getLogger(BrokerSubscriptionInfoTest.class);
1:eb9c584: 
1:eb9c584: 
1:eb9c584: 
1:eb9c584:     @Test
1:eb9c584:     public void testMarshalClientProperties() throws IOException {
1:eb9c584:         // marshal object
1:eb9c584:         OpenWireFormatFactory factory = new OpenWireFormatFactory();
1:eb9c584:         factory.setCacheEnabled(true);
1:eb9c584:         OpenWireFormat wf = (OpenWireFormat)factory.createWireFormat();
1:eb9c584:         ByteArrayOutputStream buffer = new ByteArrayOutputStream();
1:eb9c584:         DataOutputStream ds = new DataOutputStream(buffer);
1:eb9c584: 
1:eb9c584:         ConsumerInfo info = new ConsumerInfo();
1:eb9c584:         info.setClientId("clientId");
1:eb9c584:         info.setConsumerId(new ConsumerId());
1:eb9c584: 
1:eb9c584:         int size = 1000;
1:eb9c584: 
1:eb9c584: 
1:eb9c584:         ConsumerInfo infos[] = new ConsumerInfo[size];
1:eb9c584:         for (int i = 0; i < infos.length; i++) {
1:eb9c584:             infos[i] = info;
1:eb9c584:         }
1:eb9c584: 
1:eb9c584:         BrokerSubscriptionInfo bsi = new BrokerSubscriptionInfo();
1:eb9c584:         bsi.setSubscriptionInfos(infos);
1:eb9c584: 
1:eb9c584:         wf.marshal(bsi, ds);
1:eb9c584:         ds.close();
1:eb9c584: 
1:eb9c584:         // unmarshal object and check that the properties are present.
1:eb9c584:         ByteArrayInputStream in = new ByteArrayInputStream(buffer.toByteArray());
1:eb9c584:         DataInputStream dis = new DataInputStream(in);
1:eb9c584:         BrokerSubscriptionInfo actual = (BrokerSubscriptionInfo) wf.unmarshal(dis);
1:eb9c584: 
1:eb9c584:         //assertTrue(actual instanceof BrokerSubscriptionInfo);
1:eb9c584:         assertEquals(size, actual.getSubscriptionInfos().length);
1:eb9c584:     }
1:eb9c584: 
1:eb9c584: 
1:eb9c584: }
============================================================================
author:Christopher L. Shannon (cshannon)
-------------------------------------------------------------------------------
commit:eb9c584
/////////////////////////////////////////////////////////////////////////
1: /**
1:  * Licensed to the Apache Software Foundation (ASF) under one or more
1:  * contributor license agreements.  See the NOTICE file distributed with
1:  * this work for additional information regarding copyright ownership.
1:  * The ASF licenses this file to You under the Apache License, Version 2.0
1:  * (the "License"); you may not use this file except in compliance with
1:  * the License.  You may obtain a copy of the License at
1:  *
1:  *      http://www.apache.org/licenses/LICENSE-2.0
1:  *
1:  * Unless required by applicable law or agreed to in writing, software
1:  * distributed under the License is distributed on an "AS IS" BASIS,
1:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:  * See the License for the specific language governing permissions and
1:  * limitations under the License.
1:  */
1: package org.apache.activemq.openwire;
1: 
1: import static org.junit.Assert.assertEquals;
1: import static org.junit.Assert.assertTrue;
1: 
1: import java.io.ByteArrayInputStream;
1: import java.io.ByteArrayOutputStream;
1: import java.io.DataInputStream;
1: import java.io.DataOutputStream;
1: import java.io.IOException;
1: 
1: import org.apache.activemq.command.BrokerSubscriptionInfo;
1: import org.apache.activemq.command.ConsumerId;
1: import org.apache.activemq.command.ConsumerInfo;
1: import org.junit.Test;
1: import org.slf4j.Logger;
1: import org.slf4j.LoggerFactory;
1: 
1: public class BrokerSubscriptionInfoTest {
1: 
1:     static final Logger LOG = LoggerFactory.getLogger(BrokerSubscriptionInfoTest.class);
1: 
1: 
1: 
1:     @Test
1:     public void testMarshalClientProperties() throws IOException {
1:         // marshal object
1:         OpenWireFormatFactory factory = new OpenWireFormatFactory();
1:         factory.setCacheEnabled(true);
1:         OpenWireFormat wf = (OpenWireFormat)factory.createWireFormat();
1:         ByteArrayOutputStream buffer = new ByteArrayOutputStream();
1:         DataOutputStream ds = new DataOutputStream(buffer);
1: 
1:         ConsumerInfo info = new ConsumerInfo();
1:         info.setClientId("clientId");
1:         info.setConsumerId(new ConsumerId());
1: 
1:         int size = 1000;
1: 
1: 
1:         ConsumerInfo infos[] = new ConsumerInfo[size];
1:         for (int i = 0; i < infos.length; i++) {
1:             infos[i] = info;
1:         }
1: 
1:         BrokerSubscriptionInfo bsi = new BrokerSubscriptionInfo();
1:         bsi.setSubscriptionInfos(infos);
1: 
1:         wf.marshal(bsi, ds);
1:         ds.close();
1: 
1:         // unmarshal object and check that the properties are present.
1:         ByteArrayInputStream in = new ByteArrayInputStream(buffer.toByteArray());
1:         DataInputStream dis = new DataInputStream(in);
1:         BrokerSubscriptionInfo actual = (BrokerSubscriptionInfo) wf.unmarshal(dis);
1: 
1:         //assertTrue(actual instanceof BrokerSubscriptionInfo);
1:         assertEquals(size, actual.getSubscriptionInfos().length);
1:     }
1: 
1: 
1: }
============================================================================