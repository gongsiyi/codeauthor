1:456a2ba: /**
1:456a2ba:  * Licensed to the Apache Software Foundation (ASF) under one or more
1:456a2ba:  * contributor license agreements.  See the NOTICE file distributed with
1:456a2ba:  * this work for additional information regarding copyright ownership.
1:456a2ba:  * The ASF licenses this file to You under the Apache License, Version 2.0
1:456a2ba:  * (the "License"); you may not use this file except in compliance with
1:456a2ba:  * the License.  You may obtain a copy of the License at
1:456a2ba:  *
1:456a2ba:  *      http://www.apache.org/licenses/LICENSE-2.0
1:456a2ba:  *
1:456a2ba:  * Unless required by applicable law or agreed to in writing, software
1:456a2ba:  * distributed under the License is distributed on an "AS IS" BASIS,
1:456a2ba:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:456a2ba:  * See the License for the specific language governing permissions and
1:456a2ba:  * limitations under the License.
1:456a2ba:  */
1:1aab71b: package org.apache.activemq.store.kahadb.disk.index;
2:456a2ba: 
1:456a2ba: import java.io.DataInput;
1:456a2ba: import java.io.DataOutput;
1:456a2ba: import java.io.IOException;
1:456a2ba: import java.util.Map;
1:456a2ba: import java.util.TreeMap;
1:456a2ba: 
1:1aab71b: import org.apache.activemq.store.kahadb.disk.page.Page;
1:1aab71b: import org.apache.activemq.store.kahadb.disk.page.Transaction;
1:1aab71b: import org.apache.activemq.store.kahadb.disk.util.VariableMarshaller;
1:456a2ba: 
1:456a2ba: /**
1:456a2ba:  * Bin in a HashIndex
1:0bbc0ac:  * 
1:456a2ba:  * 
1:456a2ba:  */
1:456a2ba: class HashBin<Key, Value> {
1:456a2ba:     
1:456a2ba:     
1:e22a37a:     static public class Marshaller<Key, Value> extends VariableMarshaller<HashBin<Key, Value>> {
1:456a2ba:         private final HashIndex<Key, Value> hashIndex;
1:456a2ba: 
1:456a2ba:         public Marshaller(HashIndex<Key, Value> index) {
1:456a2ba:             this.hashIndex = index;
2:456a2ba:         }
1:456a2ba:         
1:456a2ba:         public HashBin<Key, Value> readPayload(DataInput is) throws IOException {
1:456a2ba:             HashBin<Key, Value> bin = new HashBin<Key, Value>();
1:456a2ba:             int size = is.readInt();
1:456a2ba:             for(int i=0; i < size; i++) {
1:456a2ba:                 Key key = hashIndex.getKeyMarshaller().readPayload(is);
1:456a2ba:                 Value value = hashIndex.getValueMarshaller().readPayload(is);
1:456a2ba:                 bin.data.put(key, value);
1:456a2ba:             }
1:456a2ba:             return bin;
1:456a2ba:         }
1:456a2ba: 
1:456a2ba:         public void writePayload(HashBin<Key, Value> bin, DataOutput os) throws IOException {
1:456a2ba:             os.writeInt(bin.data.size());
1:456a2ba:             for (Map.Entry<Key, Value> entry : bin.data.entrySet()) {
1:456a2ba:                 hashIndex.getKeyMarshaller().writePayload(entry.getKey(), os);
1:456a2ba:                 hashIndex.getValueMarshaller().writePayload(entry.getValue(), os);
1:456a2ba:             }
1:456a2ba:         }
1:456a2ba:         
1:456a2ba:     }
1:456a2ba:     
1:456a2ba:     private Page<HashBin<Key, Value>> page;
1:456a2ba:     private TreeMap<Key, Value> data = new TreeMap<Key, Value>();
1:456a2ba:     
1:456a2ba:     public int size() {
1:456a2ba:         return data.size();
1:456a2ba:     }
1:456a2ba: 
1:456a2ba:     public Value put(Key key, Value value) throws IOException {
1:456a2ba:         return data.put(key, value);
1:456a2ba:     }
1:456a2ba: 
1:456a2ba:     public Value get(Key key) throws IOException {
1:456a2ba:         return data.get(key);
1:456a2ba:     }
1:456a2ba:     
1:456a2ba:     public boolean containsKey(Key key) throws IOException {
1:456a2ba:         return data.containsKey(key);
1:456a2ba:     }
1:456a2ba:     
1:456a2ba:     public Map<Key, Value> getAll(Transaction tx) throws IOException {
1:456a2ba:         return data;
1:456a2ba:     }
1:456a2ba:     
1:456a2ba:     public Value remove(Key key) throws IOException {
1:456a2ba:         return data.remove(key);
1:456a2ba:     }
1:456a2ba: 
1:456a2ba:     public Page<HashBin<Key, Value>> getPage() {
1:456a2ba:         return page;
1:456a2ba:     }
1:456a2ba: 
1:456a2ba:     public void setPage(Page<HashBin<Key, Value>> page) {
1:456a2ba:         this.page = page;
1:456a2ba:         this.page.set(this);
1:456a2ba:     }
1:456a2ba: 
1:456a2ba: 
1:456a2ba: }
============================================================================
author:Hiram R. Chirino
-------------------------------------------------------------------------------
commit:c5cf038
commit:1aab71b
/////////////////////////////////////////////////////////////////////////
1: package org.apache.activemq.store.kahadb.disk.index;
/////////////////////////////////////////////////////////////////////////
1: import org.apache.activemq.store.kahadb.disk.page.Page;
1: import org.apache.activemq.store.kahadb.disk.page.Transaction;
1: import org.apache.activemq.store.kahadb.disk.util.VariableMarshaller;
commit:715010a
commit:0bbc0ac
/////////////////////////////////////////////////////////////////////////
1:  * 
commit:e22a37a
/////////////////////////////////////////////////////////////////////////
0: import org.apache.kahadb.util.VariableMarshaller;
/////////////////////////////////////////////////////////////////////////
1:     static public class Marshaller<Key, Value> extends VariableMarshaller<HashBin<Key, Value>> {
commit:456a2ba
/////////////////////////////////////////////////////////////////////////
1: /**
1:  * Licensed to the Apache Software Foundation (ASF) under one or more
1:  * contributor license agreements.  See the NOTICE file distributed with
1:  * this work for additional information regarding copyright ownership.
1:  * The ASF licenses this file to You under the Apache License, Version 2.0
1:  * (the "License"); you may not use this file except in compliance with
1:  * the License.  You may obtain a copy of the License at
1:  *
1:  *      http://www.apache.org/licenses/LICENSE-2.0
1:  *
1:  * Unless required by applicable law or agreed to in writing, software
1:  * distributed under the License is distributed on an "AS IS" BASIS,
1:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:  * See the License for the specific language governing permissions and
1:  * limitations under the License.
1:  */
0: package org.apache.kahadb.index;
1: 
1: import java.io.DataInput;
0: import java.io.DataInputStream;
1: import java.io.DataOutput;
0: import java.io.DataOutputStream;
1: import java.io.IOException;
1: import java.util.Map;
1: import java.util.TreeMap;
1: 
0: import org.apache.kahadb.page.Page;
0: import org.apache.kahadb.page.Transaction;
1: 
1: /**
1:  * Bin in a HashIndex
1:  * 
0:  * @version $Revision$
1:  */
1: class HashBin<Key, Value> {
1:     
1:     
0:     static public class Marshaller<Key, Value> implements org.apache.kahadb.util.Marshaller<HashBin<Key, Value>> {
1:         private final HashIndex<Key, Value> hashIndex;
1: 
1:         public Marshaller(HashIndex<Key, Value> index) {
1:             this.hashIndex = index;
1:         }
1:         
0:         public Class<HashBin<Key, Value>> getType() {
0:             return null;
1:         }
1: 
1:         public HashBin<Key, Value> readPayload(DataInput is) throws IOException {
1:             HashBin<Key, Value> bin = new HashBin<Key, Value>();
1:             int size = is.readInt();
1:             for(int i=0; i < size; i++) {
1:                 Key key = hashIndex.getKeyMarshaller().readPayload(is);
1:                 Value value = hashIndex.getValueMarshaller().readPayload(is);
1:                 bin.data.put(key, value);
1:             }
1:             return bin;
1:         }
1: 
1:         public void writePayload(HashBin<Key, Value> bin, DataOutput os) throws IOException {
1:             os.writeInt(bin.data.size());
1:             for (Map.Entry<Key, Value> entry : bin.data.entrySet()) {
1:                 hashIndex.getKeyMarshaller().writePayload(entry.getKey(), os);
1:                 hashIndex.getValueMarshaller().writePayload(entry.getValue(), os);
1:             }
1:         }
1:         
1:     }
1:     
1:     private Page<HashBin<Key, Value>> page;
1:     private TreeMap<Key, Value> data = new TreeMap<Key, Value>();
1:     
1:     public int size() {
1:         return data.size();
1:     }
1: 
1:     public Value put(Key key, Value value) throws IOException {
1:         return data.put(key, value);
1:     }
1: 
1:     public Value get(Key key) throws IOException {
1:         return data.get(key);
1:     }
1:     
1:     public boolean containsKey(Key key) throws IOException {
1:         return data.containsKey(key);
1:     }
1:     
1:     public Map<Key, Value> getAll(Transaction tx) throws IOException {
1:         return data;
1:     }
1:     
1:     public Value remove(Key key) throws IOException {
1:         return data.remove(key);
1:     }
1: 
1:     public Page<HashBin<Key, Value>> getPage() {
1:         return page;
1:     }
1: 
1:     public void setPage(Page<HashBin<Key, Value>> page) {
1:         this.page = page;
1:         this.page.set(this);
1:     }
1: 
1: 
1: }
============================================================================