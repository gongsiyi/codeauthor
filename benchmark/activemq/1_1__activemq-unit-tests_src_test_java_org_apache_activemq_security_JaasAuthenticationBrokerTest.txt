1:a156261: /**
1:a156261:  * Licensed to the Apache Software Foundation (ASF) under one or more
1:a156261:  * contributor license agreements.  See the NOTICE file distributed with
1:a156261:  * this work for additional information regarding copyright ownership.
1:a156261:  * The ASF licenses this file to You under the Apache License, Version 2.0
1:a156261:  * (the "License"); you may not use this file except in compliance with
1:a156261:  * the License.  You may obtain a copy of the License at
1:a156261:  *
1:a156261:  *      http://www.apache.org/licenses/LICENSE-2.0
1:a156261:  *
1:a156261:  * Unless required by applicable law or agreed to in writing, software
1:a156261:  * distributed under the License is distributed on an "AS IS" BASIS,
1:a156261:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:a156261:  * See the License for the specific language governing permissions and
1:a156261:  * limitations under the License.
1:a156261:  */
1:a156261: 
1:a156261: package org.apache.activemq.security;
1:a156261: 
1:a156261: import javax.jms.InvalidClientIDException;
1:a156261: import javax.security.auth.login.AppConfigurationEntry;
1:a156261: import javax.security.auth.login.Configuration;
1:a156261: import java.util.HashMap;
1:a156261: import java.util.concurrent.CopyOnWriteArrayList;
1:a156261: 
1:a156261: import junit.framework.TestCase;
1:a156261: 
1:a156261: import org.apache.activemq.broker.Broker;
1:a156261: import org.apache.activemq.broker.ConnectionContext;
1:a156261: import org.apache.activemq.broker.StubBroker;
1:a156261: import org.apache.activemq.command.ConnectionInfo;
1:a156261: 
1:a156261: public class JaasAuthenticationBrokerTest extends TestCase {
1:a156261:     StubBroker receiveBroker;
1:a156261: 
1:a156261:     JaasAuthenticationBroker authBroker;
1:a156261: 
1:a156261:     ConnectionContext connectionContext;
1:a156261:     ConnectionInfo connectionInfo;
1:a156261: 
1:a156261:     CopyOnWriteArrayList<SecurityContext> visibleSecurityContexts;
1:a156261: 
1:a156261:     class JaasAuthenticationBrokerTester extends JaasAuthenticationBroker {
1:a156261:         public JaasAuthenticationBrokerTester(Broker next, String jassConfiguration) {
1:a156261:             super(next, jassConfiguration);
1:a156261:             visibleSecurityContexts = securityContexts;
1:a156261:         }
1:a156261:     }
1:a156261: 
1:a156261:     @Override
1:a156261:     protected void setUp() throws Exception {
1:a156261:         receiveBroker = new StubBroker();
1:a156261: 
1:a156261:         authBroker = new JaasAuthenticationBrokerTester(receiveBroker, "");
1:a156261: 
1:a156261:         connectionContext = new ConnectionContext();
1:a156261:         connectionInfo = new ConnectionInfo();
1:a156261:     }
1:a156261: 
1:a156261:     @Override
1:a156261:     protected void tearDown() throws Exception {
1:a156261:         super.tearDown();
1:a156261:     }
1:a156261: 
1:a156261:     private void setConfiguration(boolean loginShouldSucceed) {
1:a156261:         HashMap<String, String> configOptions = new HashMap<String, String>();
1:a156261: 
1:a156261:         configOptions.put(StubLoginModule.ALLOW_LOGIN_PROPERTY, loginShouldSucceed ? "true" : "false");
1:a156261:         configOptions.put(StubLoginModule.USERS_PROPERTY, "");
1:a156261:         configOptions.put(StubLoginModule.GROUPS_PROPERTY, "");
1:a156261:         AppConfigurationEntry configEntry = new AppConfigurationEntry("org.apache.activemq.security.StubLoginModule", AppConfigurationEntry.LoginModuleControlFlag.REQUIRED, configOptions);
1:a156261: 
1:a156261:         StubJaasConfiguration jaasConfig = new StubJaasConfiguration(configEntry);
1:a156261: 
1:a156261:         Configuration.setConfiguration(jaasConfig);
1:a156261:     }
1:a156261: 
1:a156261: 
1:a156261:     public void testAddConnectionFailureOnDuplicateClientId() throws Exception {
1:a156261:         setConfiguration(true);
1:a156261: 
1:a156261:         connectionInfo.setClientId("CliIdX");
1:a156261:         authBroker.addConnection(connectionContext, connectionInfo);
1:a156261:         ConnectionContext secondContext = connectionContext.copy();
1:a156261:         secondContext.setSecurityContext(null);
1:a156261:         ConnectionInfo secondInfo = connectionInfo.copy();
1:a156261:         try {
1:a156261:             authBroker.addConnection(secondContext, secondInfo);
1:a156261:             fail("Expect duplicate id");
1:a156261:         } catch (InvalidClientIDException expected) {
1:a156261:         }
1:a156261: 
1:a156261:         assertEquals("one connection allowed.", 1, receiveBroker.addConnectionData.size());
1:a156261:         assertEquals("one context .", 1, visibleSecurityContexts.size());
1:a156261: 
1:a156261:     }
1:a156261: }
============================================================================
author:gtully
-------------------------------------------------------------------------------
commit:a156261
/////////////////////////////////////////////////////////////////////////
1: /**
1:  * Licensed to the Apache Software Foundation (ASF) under one or more
1:  * contributor license agreements.  See the NOTICE file distributed with
1:  * this work for additional information regarding copyright ownership.
1:  * The ASF licenses this file to You under the Apache License, Version 2.0
1:  * (the "License"); you may not use this file except in compliance with
1:  * the License.  You may obtain a copy of the License at
1:  *
1:  *      http://www.apache.org/licenses/LICENSE-2.0
1:  *
1:  * Unless required by applicable law or agreed to in writing, software
1:  * distributed under the License is distributed on an "AS IS" BASIS,
1:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:  * See the License for the specific language governing permissions and
1:  * limitations under the License.
1:  */
1: 
1: package org.apache.activemq.security;
1: 
1: import javax.jms.InvalidClientIDException;
1: import javax.security.auth.login.AppConfigurationEntry;
1: import javax.security.auth.login.Configuration;
1: import java.util.HashMap;
1: import java.util.concurrent.CopyOnWriteArrayList;
1: 
1: import junit.framework.TestCase;
1: 
1: import org.apache.activemq.broker.Broker;
1: import org.apache.activemq.broker.ConnectionContext;
1: import org.apache.activemq.broker.StubBroker;
1: import org.apache.activemq.command.ConnectionInfo;
1: 
1: public class JaasAuthenticationBrokerTest extends TestCase {
1:     StubBroker receiveBroker;
1: 
1:     JaasAuthenticationBroker authBroker;
1: 
1:     ConnectionContext connectionContext;
1:     ConnectionInfo connectionInfo;
1: 
1:     CopyOnWriteArrayList<SecurityContext> visibleSecurityContexts;
1: 
1:     class JaasAuthenticationBrokerTester extends JaasAuthenticationBroker {
1:         public JaasAuthenticationBrokerTester(Broker next, String jassConfiguration) {
1:             super(next, jassConfiguration);
1:             visibleSecurityContexts = securityContexts;
1:         }
1:     }
1: 
1:     @Override
1:     protected void setUp() throws Exception {
1:         receiveBroker = new StubBroker();
1: 
1:         authBroker = new JaasAuthenticationBrokerTester(receiveBroker, "");
1: 
1:         connectionContext = new ConnectionContext();
1:         connectionInfo = new ConnectionInfo();
1:     }
1: 
1:     @Override
1:     protected void tearDown() throws Exception {
1:         super.tearDown();
1:     }
1: 
1:     private void setConfiguration(boolean loginShouldSucceed) {
1:         HashMap<String, String> configOptions = new HashMap<String, String>();
1: 
1:         configOptions.put(StubLoginModule.ALLOW_LOGIN_PROPERTY, loginShouldSucceed ? "true" : "false");
1:         configOptions.put(StubLoginModule.USERS_PROPERTY, "");
1:         configOptions.put(StubLoginModule.GROUPS_PROPERTY, "");
1:         AppConfigurationEntry configEntry = new AppConfigurationEntry("org.apache.activemq.security.StubLoginModule", AppConfigurationEntry.LoginModuleControlFlag.REQUIRED, configOptions);
1: 
1:         StubJaasConfiguration jaasConfig = new StubJaasConfiguration(configEntry);
1: 
1:         Configuration.setConfiguration(jaasConfig);
1:     }
1: 
1: 
1:     public void testAddConnectionFailureOnDuplicateClientId() throws Exception {
1:         setConfiguration(true);
1: 
1:         connectionInfo.setClientId("CliIdX");
1:         authBroker.addConnection(connectionContext, connectionInfo);
1:         ConnectionContext secondContext = connectionContext.copy();
1:         secondContext.setSecurityContext(null);
1:         ConnectionInfo secondInfo = connectionInfo.copy();
1:         try {
1:             authBroker.addConnection(secondContext, secondInfo);
1:             fail("Expect duplicate id");
1:         } catch (InvalidClientIDException expected) {
1:         }
1: 
1:         assertEquals("one connection allowed.", 1, receiveBroker.addConnectionData.size());
1:         assertEquals("one context .", 1, visibleSecurityContexts.size());
1: 
1:     }
1: }
============================================================================