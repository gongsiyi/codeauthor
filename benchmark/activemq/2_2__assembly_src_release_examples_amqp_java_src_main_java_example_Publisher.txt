1:2ecf41d: /**
1:2ecf41d:  * Licensed to the Apache Software Foundation (ASF) under one or more
1:2ecf41d:  * contributor license agreements.  See the NOTICE file distributed with
1:2ecf41d:  * this work for additional information regarding copyright ownership.
1:2ecf41d:  * The ASF licenses this file to You under the Apache License, Version 2.0
1:2ecf41d:  * (the "License"); you may not use this file except in compliance with
1:2ecf41d:  * the License.  You may obtain a copy of the License at
1:2ecf41d:  *
1:2ecf41d:  *      http://www.apache.org/licenses/LICENSE-2.0
1:2ecf41d:  *
1:2ecf41d:  * Unless required by applicable law or agreed to in writing, software
1:2ecf41d:  * distributed under the License is distributed on an "AS IS" BASIS,
1:2ecf41d:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:2ecf41d:  * See the License for the specific language governing permissions and
1:2ecf41d:  * limitations under the License.
1:2ecf41d:  */
1:2ecf41d: package example;
1:2ecf41d: 
1:a79f317: import org.apache.qpid.jms.*;
1:2ecf41d: import javax.jms.*;
1:2ecf41d: 
1:2ecf41d: class Publisher {
1:2ecf41d: 
1:a79f317:     public static void main(String[] args) throws Exception {
1:a79f317: 
1:a79f317:         final String TOPIC_PREFIX = "topic://";
1:2ecf41d: 
1:2ecf41d:         String user = env("ACTIVEMQ_USER", "admin");
1:2ecf41d:         String password = env("ACTIVEMQ_PASSWORD", "password");
1:2ecf41d:         String host = env("ACTIVEMQ_HOST", "localhost");
1:2ecf41d:         int port = Integer.parseInt(env("ACTIVEMQ_PORT", "5672"));
1:a79f317: 
1:a79f317:         String connectionURI = "amqp://" + host + ":" + port;
1:a79f317:         String destinationName = arg(args, 0, "topic://event");
1:2ecf41d: 
1:2ecf41d:         int messages = 10000;
1:2ecf41d:         int size = 256;
1:2ecf41d: 
1:2ecf41d:         String DATA = "abcdefghijklmnopqrstuvwxyz";
1:2ecf41d:         String body = "";
1:a79f317:         for (int i = 0; i < size; i++) {
1:a79f317:             body += DATA.charAt(i % DATA.length());
2:2ecf41d:         }
1:2ecf41d: 
1:a79f317:         JmsConnectionFactory factory = new JmsConnectionFactory(connectionURI);
1:2ecf41d: 
1:2ecf41d:         Connection connection = factory.createConnection(user, password);
1:2ecf41d:         connection.start();
1:a79f317: 
1:2ecf41d:         Session session = connection.createSession(false, Session.AUTO_ACKNOWLEDGE);
1:a79f317: 
1:a79f317:         Destination destination = null;
1:a79f317:         if (destinationName.startsWith(TOPIC_PREFIX)) {
1:a79f317:             destination = session.createTopic(destinationName.substring(TOPIC_PREFIX.length()));
1:a79f317:         } else {
1:a79f317:             destination = session.createQueue(destinationName);
1:a79f317:         }
1:a79f317: 
1:a79f317:         MessageProducer producer = session.createProducer(destination);
1:2ecf41d:         producer.setDeliveryMode(DeliveryMode.NON_PERSISTENT);
1:2ecf41d: 
1:a79f317:         for (int i = 1; i <= messages; i++) {
1:a79f317:             TextMessage msg = session.createTextMessage("#:" + i);
1:2ecf41d:             msg.setIntProperty("id", i);
1:2ecf41d:             producer.send(msg);
1:a79f317:             if ((i % 1000) == 0) {
1:2ecf41d:                 System.out.println(String.format("Sent %d messages", i));
1:2ecf41d:             }
1:2ecf41d:         }
1:2ecf41d: 
1:2ecf41d:         producer.send(session.createTextMessage("SHUTDOWN"));
1:a79f317:         Thread.sleep(1000 * 3);
1:2ecf41d:         connection.close();
1:2ecf41d:         System.exit(0);
1:2ecf41d:     }
1:2ecf41d: 
1:2ecf41d:     private static String env(String key, String defaultValue) {
1:2ecf41d:         String rc = System.getenv(key);
1:a79f317:         if (rc == null)
1:2ecf41d:             return defaultValue;
1:2ecf41d:         return rc;
1:2ecf41d:     }
1:2ecf41d: 
1:a79f317:     private static String arg(String[] args, int index, String defaultValue) {
1:a79f317:         if (index < args.length)
1:2ecf41d:             return args[index];
1:2ecf41d:         else
1:2ecf41d:             return defaultValue;
1:2ecf41d:     }
1:2ecf41d: 
1:2ecf41d: }
============================================================================
author:Timothy Bish
-------------------------------------------------------------------------------
commit:a79f317
/////////////////////////////////////////////////////////////////////////
1: import org.apache.qpid.jms.*;
1:     public static void main(String[] args) throws Exception {
1: 
1:         final String TOPIC_PREFIX = "topic://";
1: 
1:         String connectionURI = "amqp://" + host + ":" + port;
1:         String destinationName = arg(args, 0, "topic://event");
1:         for (int i = 0; i < size; i++) {
1:             body += DATA.charAt(i % DATA.length());
1:         JmsConnectionFactory factory = new JmsConnectionFactory(connectionURI);
1: 
1: 
1:         Destination destination = null;
1:         if (destinationName.startsWith(TOPIC_PREFIX)) {
1:             destination = session.createTopic(destinationName.substring(TOPIC_PREFIX.length()));
1:         } else {
1:             destination = session.createQueue(destinationName);
1:         }
1: 
1:         MessageProducer producer = session.createProducer(destination);
1:         for (int i = 1; i <= messages; i++) {
1:             TextMessage msg = session.createTextMessage("#:" + i);
1:             if ((i % 1000) == 0) {
1:         Thread.sleep(1000 * 3);
1:         if (rc == null)
1:     private static String arg(String[] args, int index, String defaultValue) {
1:         if (index < args.length)
author:Hiram Chirino
-------------------------------------------------------------------------------
commit:2ecf41d
/////////////////////////////////////////////////////////////////////////
1: /**
1:  * Licensed to the Apache Software Foundation (ASF) under one or more
1:  * contributor license agreements.  See the NOTICE file distributed with
1:  * this work for additional information regarding copyright ownership.
1:  * The ASF licenses this file to You under the Apache License, Version 2.0
1:  * (the "License"); you may not use this file except in compliance with
1:  * the License.  You may obtain a copy of the License at
1:  *
1:  *      http://www.apache.org/licenses/LICENSE-2.0
1:  *
1:  * Unless required by applicable law or agreed to in writing, software
1:  * distributed under the License is distributed on an "AS IS" BASIS,
1:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:  * See the License for the specific language governing permissions and
1:  * limitations under the License.
1:  */
1: package example;
1: 
0: import org.apache.qpid.amqp_1_0.jms.impl.*;
1: import javax.jms.*;
1: 
1: class Publisher {
1: 
0:     public static void main(String []args) throws Exception {
1: 
1:         String user = env("ACTIVEMQ_USER", "admin");
1:         String password = env("ACTIVEMQ_PASSWORD", "password");
1:         String host = env("ACTIVEMQ_HOST", "localhost");
1:         int port = Integer.parseInt(env("ACTIVEMQ_PORT", "5672"));
0:         String destination = arg(args, 0, "topic://event");
1: 
1:         int messages = 10000;
1:         int size = 256;
1: 
1:         String DATA = "abcdefghijklmnopqrstuvwxyz";
1:         String body = "";
0:         for( int i=0; i < size; i ++) {
0:             body += DATA.charAt(i%DATA.length());
1:         }
1: 
0:         ConnectionFactoryImpl factory = new ConnectionFactoryImpl(host, port, user, password);
0:         Destination dest = null;
0:         if( destination.startsWith("topic://") ) {
0:             dest = new TopicImpl(destination);
0:         } else {
0:             dest = new QueueImpl(destination);
1:         }
1: 
1:         Connection connection = factory.createConnection(user, password);
1:         connection.start();
1:         Session session = connection.createSession(false, Session.AUTO_ACKNOWLEDGE);
0:         MessageProducer producer = session.createProducer(dest);
1:         producer.setDeliveryMode(DeliveryMode.NON_PERSISTENT);
1: 
0:         for( int i=1; i <= messages; i ++) {
0:             TextMessage msg = session.createTextMessage("#:"+i);
1:             msg.setIntProperty("id", i);
1:             producer.send(msg);
0:             if( (i % 1000) == 0) {
1:                 System.out.println(String.format("Sent %d messages", i));
1:             }
1:         }
1: 
1:         producer.send(session.createTextMessage("SHUTDOWN"));
0:         Thread.sleep(1000*3);
1:         connection.close();
1:         System.exit(0);
1:     }
1: 
1:     private static String env(String key, String defaultValue) {
1:         String rc = System.getenv(key);
0:         if( rc== null )
1:             return defaultValue;
1:         return rc;
1:     }
1: 
0:     private static String arg(String []args, int index, String defaultValue) {
0:         if( index < args.length )
1:             return args[index];
1:         else
1:             return defaultValue;
1:     }
1: 
1: }
============================================================================