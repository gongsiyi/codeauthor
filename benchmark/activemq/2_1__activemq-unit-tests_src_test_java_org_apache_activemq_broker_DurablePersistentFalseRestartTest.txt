1:ae816dc: /**
1:ae816dc:  * Licensed to the Apache Software Foundation (ASF) under one or more
1:ae816dc:  * contributor license agreements.  See the NOTICE file distributed with
1:ae816dc:  * this work for additional information regarding copyright ownership.
1:ae816dc:  * The ASF licenses this file to You under the Apache License, Version 2.0
1:ae816dc:  * (the "License"); you may not use this file except in compliance with
1:ae816dc:  * the License.  You may obtain a copy of the License at
1:ae816dc:  *
1:ae816dc:  *      http://www.apache.org/licenses/LICENSE-2.0
1:ae816dc:  *
1:ae816dc:  * Unless required by applicable law or agreed to in writing, software
1:ae816dc:  * distributed under the License is distributed on an "AS IS" BASIS,
1:ae816dc:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:ae816dc:  * See the License for the specific language governing permissions and
1:ae816dc:  * limitations under the License.
1:ae816dc:  */
1:ae816dc: package org.apache.activemq.broker;
1:ae816dc: 
1:ae816dc: import javax.jms.ConnectionFactory;
1:ae816dc: import javax.jms.Destination;
1:ae816dc: import javax.jms.JMSException;
1:ae816dc: import javax.jms.MessageConsumer;
1:ae816dc: import javax.jms.MessageProducer;
1:ae816dc: import javax.jms.Session;
1:ae816dc: import javax.jms.TextMessage;
1:ae816dc: import javax.jms.Topic;
1:ae816dc: import junit.framework.Test;
1:ae816dc: import org.apache.activemq.ActiveMQConnection;
1:ae816dc: import org.apache.activemq.ActiveMQConnectionFactory;
1:ae816dc: import org.apache.activemq.store.kahadb.KahaDBPersistenceAdapter;
1:ae816dc: import org.apache.activemq.transport.failover.FailoverTransport;
1:ae816dc: 
1:ae816dc: public class DurablePersistentFalseRestartTest extends BrokerRestartTestSupport {
1:ae816dc: 
1:ae816dc:     @Override
1:ae816dc:     protected void configureBroker(BrokerService broker) throws Exception {
1:ae816dc:         super.configureBroker(broker);
1:ae816dc:         broker.setPersistent(false);
1:ae816dc:         broker.setPersistenceAdapter(new KahaDBPersistenceAdapter());
1:ae816dc:         broker.addConnector("tcp://0.0.0.0:0");
1:ae816dc:     }
1:ae816dc: 
1:ae816dc:     public void testValidateNoPersistenceForDurableAfterRestart() throws Exception {
1:ae816dc: 
1:ae816dc:         ConnectionFactory connectionFactory =
1:ae816dc:                 new ActiveMQConnectionFactory("failover:(" + broker.getTransportConnectors().get(0).getPublishableConnectString() + ")");
1:ae816dc:         ActiveMQConnection connection = (ActiveMQConnection) connectionFactory.createConnection();
1:ae816dc:         connection.setClientID("clientId");
1:ae816dc:         connection.start();
1:ae816dc: 
1:ae816dc:         Session session = connection.createSession(false, Session.AUTO_ACKNOWLEDGE);
1:ae816dc: 
1:ae816dc:         Topic destination = session.createTopic(queueName);
1:ae816dc:         MessageConsumer consumer = session.createDurableSubscriber(destination, "subscriberName");
1:ae816dc: 
1:ae816dc:         populateDestination(10, destination, connection);
1:ae816dc: 
1:ae816dc:         restartBroker();
1:ae816dc: 
1:ae816dc:         // make failover aware of the restarted auto assigned port
1:ae816dc:         ((FailoverTransport) connection.getTransport().narrow(FailoverTransport.class)).add(true, broker.getTransportConnectors().get(0).getPublishableConnectString());
1:ae816dc: 
1:ae816dc:         TextMessage msg = (TextMessage) consumer.receive(4000);
1:ae816dc:         assertNull("did not get a message when persistent=false, message: " + msg, msg);
1:ae816dc: 
1:ae816dc:         connection.close();
1:ae816dc:     }
1:ae816dc: 
1:ae816dc:     private void populateDestination(final int nbMessages,
1:ae816dc:                                      final Destination destination, javax.jms.Connection connection)
1:ae816dc:             throws JMSException {
1:ae816dc:         Session session = connection.createSession(false, Session.AUTO_ACKNOWLEDGE);
1:ae816dc:         MessageProducer producer = session.createProducer(destination);
1:ae816dc:         for (int i = 1; i <= nbMessages; i++) {
1:ae816dc:             producer.send(session.createTextMessage("<hello id='" + i + "'/>"));
1:ae816dc:         }
1:ae816dc:         producer.close();
1:ae816dc:         session.close();
1:ae816dc:     }
1:ae816dc: 
1:ae816dc: 
1:ae816dc:     public static Test suite() {
1:ae816dc:         return suite(DurablePersistentFalseRestartTest.class);
1:ae816dc:     }
1:ae816dc: 
1:ae816dc:     public static void main(String[] args) {
1:ae816dc:         junit.textui.TestRunner.run(suite());
1:ae816dc:     }
1:ae816dc: 
1:ae816dc: }
============================================================================
author:Timothy A. Bish
-------------------------------------------------------------------------------
commit:ef24cc9
author:Gary Tully
-------------------------------------------------------------------------------
commit:ae816dc
/////////////////////////////////////////////////////////////////////////
1: /**
1:  * Licensed to the Apache Software Foundation (ASF) under one or more
1:  * contributor license agreements.  See the NOTICE file distributed with
1:  * this work for additional information regarding copyright ownership.
1:  * The ASF licenses this file to You under the Apache License, Version 2.0
1:  * (the "License"); you may not use this file except in compliance with
1:  * the License.  You may obtain a copy of the License at
1:  *
1:  *      http://www.apache.org/licenses/LICENSE-2.0
1:  *
1:  * Unless required by applicable law or agreed to in writing, software
1:  * distributed under the License is distributed on an "AS IS" BASIS,
1:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:  * See the License for the specific language governing permissions and
1:  * limitations under the License.
1:  */
1: package org.apache.activemq.broker;
1: 
1: import javax.jms.ConnectionFactory;
1: import javax.jms.Destination;
1: import javax.jms.JMSException;
1: import javax.jms.MessageConsumer;
1: import javax.jms.MessageProducer;
1: import javax.jms.Session;
1: import javax.jms.TextMessage;
1: import javax.jms.Topic;
1: import junit.framework.Test;
1: import org.apache.activemq.ActiveMQConnection;
1: import org.apache.activemq.ActiveMQConnectionFactory;
1: import org.apache.activemq.store.kahadb.KahaDBPersistenceAdapter;
1: import org.apache.activemq.transport.failover.FailoverTransport;
1: 
1: public class DurablePersistentFalseRestartTest extends BrokerRestartTestSupport {
1: 
1:     @Override
1:     protected void configureBroker(BrokerService broker) throws Exception {
1:         super.configureBroker(broker);
1:         broker.setPersistent(false);
1:         broker.setPersistenceAdapter(new KahaDBPersistenceAdapter());
1:         broker.addConnector("tcp://0.0.0.0:0");
1:     }
1: 
1:     public void testValidateNoPersistenceForDurableAfterRestart() throws Exception {
1: 
1:         ConnectionFactory connectionFactory =
1:                 new ActiveMQConnectionFactory("failover:(" + broker.getTransportConnectors().get(0).getPublishableConnectString() + ")");
1:         ActiveMQConnection connection = (ActiveMQConnection) connectionFactory.createConnection();
1:         connection.setClientID("clientId");
1:         connection.start();
1: 
1:         Session session = connection.createSession(false, Session.AUTO_ACKNOWLEDGE);
1: 
1:         Topic destination = session.createTopic(queueName);
1:         MessageConsumer consumer = session.createDurableSubscriber(destination, "subscriberName");
1: 
1:         populateDestination(10, destination, connection);
1: 
1:         restartBroker();
1: 
1:         // make failover aware of the restarted auto assigned port
1:         ((FailoverTransport) connection.getTransport().narrow(FailoverTransport.class)).add(true, broker.getTransportConnectors().get(0).getPublishableConnectString());
1: 
1:         TextMessage msg = (TextMessage) consumer.receive(4000);
1:         assertNull("did not get a message when persistent=false, message: " + msg, msg);
1: 
1:         connection.close();
1:     }
1: 
1:     private void populateDestination(final int nbMessages,
1:                                      final Destination destination, javax.jms.Connection connection)
1:             throws JMSException {
1:         Session session = connection.createSession(false, Session.AUTO_ACKNOWLEDGE);
1:         MessageProducer producer = session.createProducer(destination);
1:         for (int i = 1; i <= nbMessages; i++) {
1:             producer.send(session.createTextMessage("<hello id='" + i + "'/>"));
1:         }
1:         producer.close();
1:         session.close();
1:     }
1: 
1: 
1:     public static Test suite() {
1:         return suite(DurablePersistentFalseRestartTest.class);
1:     }
1: 
1:     public static void main(String[] args) {
1:         junit.textui.TestRunner.run(suite());
1:     }
1: 
1: }
============================================================================