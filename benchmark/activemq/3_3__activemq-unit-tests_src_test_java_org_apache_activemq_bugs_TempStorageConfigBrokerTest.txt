1:b11f1b4: /**
1:b11f1b4:  * Licensed to the Apache Software Foundation (ASF) under one or more
1:b11f1b4:  * contributor license agreements.  See the NOTICE file distributed with
1:b11f1b4:  * this work for additional information regarding copyright ownership.
1:b11f1b4:  * The ASF licenses this file to You under the Apache License, Version 2.0
1:b11f1b4:  * (the "License"); you may not use this file except in compliance with
1:b11f1b4:  * the License.  You may obtain a copy of the License at
1:b11f1b4:  *
1:b11f1b4:  *      http://www.apache.org/licenses/LICENSE-2.0
1:b11f1b4:  *
1:b11f1b4:  * Unless required by applicable law or agreed to in writing, software
1:b11f1b4:  * distributed under the License is distributed on an "AS IS" BASIS,
1:b11f1b4:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:b11f1b4:  * See the License for the specific language governing permissions and
1:b11f1b4:  * limitations under the License.
1:b11f1b4:  */
1:b11f1b4: package org.apache.activemq.bugs;
5:b11f1b4: 
1:b11f1b4: import static org.junit.Assert.*;
1:b11f1b4: 
1:b11f1b4: import java.io.File;
1:b11f1b4: import java.util.concurrent.atomic.AtomicInteger;
1:b11f1b4: 
1:b11f1b4: import javax.jms.Connection;
1:b11f1b4: import javax.jms.DeliveryMode;
1:b11f1b4: import javax.jms.Destination;
1:b11f1b4: import javax.jms.Message;
1:b11f1b4: import javax.jms.MessageConsumer;
1:b11f1b4: import javax.jms.MessageProducer;
1:b11f1b4: import javax.jms.ResourceAllocationException;
1:b11f1b4: import javax.jms.Session;
1:b11f1b4: 
1:b11f1b4: import org.apache.activemq.ActiveMQConnection;
1:b11f1b4: import org.apache.activemq.ActiveMQConnectionFactory;
1:b11f1b4: import org.apache.activemq.broker.BrokerService;
1:b11f1b4: import org.apache.activemq.broker.region.policy.PolicyEntry;
1:b11f1b4: import org.apache.activemq.broker.region.policy.PolicyMap;
1:b11f1b4: import org.apache.activemq.command.ActiveMQQueue;
1:b11f1b4: import org.apache.activemq.command.ActiveMQTopic;
1:b11f1b4: import org.apache.activemq.store.kahadb.KahaDBPersistenceAdapter;
1:d5dd937: import org.apache.activemq.store.kahadb.plist.PListStoreImpl;
1:b11f1b4: import org.junit.After;
1:24c4257: import org.junit.Ignore;
1:b11f1b4: import org.junit.Test;
1:b11f1b4: import org.slf4j.Logger;
1:b11f1b4: import org.slf4j.LoggerFactory;
1:b11f1b4: 
1:b11f1b4: /**
1:b11f1b4:  * Test that when configuring small temp store limits the journal size must also
1:b11f1b4:  * be smaller than the configured limit, but will still send a ResourceAllocationException
1:b11f1b4:  * if its not when sendFailIfNoSpace is enabled.
1:b11f1b4:  */
1:b11f1b4: public class TempStorageConfigBrokerTest {
1:b11f1b4: 
1:b11f1b4:     public int deliveryMode = DeliveryMode.PERSISTENT;
1:b11f1b4: 
1:b11f1b4:     private static final Logger LOG = LoggerFactory.getLogger(TempStorageConfigBrokerTest.class);
1:b11f1b4:     private static byte[] buf = new byte[4 * 1024];
1:b11f1b4:     private BrokerService broker;
1:b11f1b4:     private AtomicInteger messagesSent = new AtomicInteger(0);
1:b11f1b4:     private AtomicInteger messagesConsumed = new AtomicInteger(0);
1:b11f1b4: 
1:b11f1b4:     private String brokerUri;
1:b11f1b4:     private long messageReceiveTimeout = 10000L;
1:b11f1b4:     private Destination destination = new ActiveMQTopic("FooTwo");
1:b11f1b4: 
1:65fe5e2:     @Test(timeout=360000)
1:24c4257:     @Ignore("blocks in hudson, needs investigation")
1:b11f1b4:     public void testFillTempAndConsumeWithBadTempStoreConfig() throws Exception {
1:b11f1b4: 
1:b11f1b4:         createBrokerWithInvalidTempStoreConfig();
1:b11f1b4: 
1:b11f1b4:         broker.getSystemUsage().setSendFailIfNoSpace(true);
1:b11f1b4:         destination = new ActiveMQQueue("Foo");
1:b11f1b4: 
1:b11f1b4:         ActiveMQConnectionFactory factory = new ActiveMQConnectionFactory(brokerUri);
1:b11f1b4:         final ActiveMQConnection producerConnection = (ActiveMQConnection) factory.createConnection();
1:b11f1b4:         // so we can easily catch the ResourceAllocationException on send
1:b11f1b4:         producerConnection.setAlwaysSyncSend(true);
1:b11f1b4:         producerConnection.start();
1:b11f1b4: 
1:b11f1b4:         Session session = producerConnection.createSession(false, Session.AUTO_ACKNOWLEDGE);
1:b11f1b4:         MessageProducer producer = session.createProducer(destination);
1:b11f1b4:         producer.setDeliveryMode(DeliveryMode.NON_PERSISTENT);
1:b11f1b4: 
1:b11f1b4:         try {
1:b11f1b4:             while (true) {
1:b11f1b4:                 Message message = session.createTextMessage(new String(buf) + messagesSent.toString());
1:b11f1b4:                 producer.send(message);
1:b11f1b4:                 messagesSent.incrementAndGet();
1:b11f1b4:                 if (messagesSent.get() % 100 == 0) {
1:b11f1b4:                     LOG.info("Sent Message " + messagesSent.get());
2:b11f1b4:                     LOG.info("Temp Store Usage " + broker.getSystemUsage().getTempUsage().getUsage());
3:b11f1b4:                 }
1:b11f1b4:             }
1:b11f1b4:         } catch (ResourceAllocationException ex) {
1:b11f1b4:             assertTrue("Should not be able to send 100 messages: ", messagesSent.get() < 100);
1:b11f1b4:             LOG.info("Got resource exception : " + ex + ", after sent: " + messagesSent.get());
1:b11f1b4:         }
1:b11f1b4:     }
1:b11f1b4: 
1:65fe5e2:     @Test(timeout=360000)
1:24c4257:     @Ignore("blocks in hudson, needs investigation")
1:b11f1b4:     public void testFillTempAndConsumeWithGoodTempStoreConfig() throws Exception {
1:b11f1b4: 
1:b11f1b4:         createBrokerWithValidTempStoreConfig();
1:b11f1b4: 
1:b11f1b4:         broker.getSystemUsage().setSendFailIfNoSpace(true);
1:b11f1b4:         destination = new ActiveMQQueue("Foo");
1:b11f1b4: 
1:b11f1b4:         ActiveMQConnectionFactory factory = new ActiveMQConnectionFactory(brokerUri);
1:b11f1b4:         final ActiveMQConnection producerConnection = (ActiveMQConnection) factory.createConnection();
1:b11f1b4:         // so we can easily catch the ResourceAllocationException on send
1:b11f1b4:         producerConnection.setAlwaysSyncSend(true);
1:b11f1b4:         producerConnection.start();
1:b11f1b4: 
1:b11f1b4:         Session session = producerConnection.createSession(false, Session.AUTO_ACKNOWLEDGE);
1:b11f1b4:         MessageProducer producer = session.createProducer(destination);
1:b11f1b4:         producer.setDeliveryMode(DeliveryMode.NON_PERSISTENT);
1:b11f1b4: 
1:b11f1b4:         try {
1:b11f1b4:             while (true) {
1:b11f1b4:                 Message message = session.createTextMessage(new String(buf) + messagesSent.toString());
1:b11f1b4:                 producer.send(message);
1:b11f1b4:                 messagesSent.incrementAndGet();
1:b11f1b4:                 if (messagesSent.get() % 100 == 0) {
1:b11f1b4:                     LOG.info("Sent Message " + messagesSent.get());
1:b11f1b4:                     LOG.info("Temp Store Usage " + broker.getSystemUsage().getTempUsage().getUsage());
1:b11f1b4:                 }
1:b11f1b4:             }
1:b11f1b4:         } catch (ResourceAllocationException ex) {
1:65fe5e2:             assertTrue("Should be able to send at least 200 messages but was: " + messagesSent.get(),
1:65fe5e2:                        messagesSent.get() > 200);
1:b11f1b4:             LOG.info("Got resource exception : " + ex + ", after sent: " + messagesSent.get());
1:b11f1b4:         }
1:b11f1b4: 
2:b11f1b4:         // consume all sent
2:b11f1b4:         Connection consumerConnection = factory.createConnection();
2:b11f1b4:         consumerConnection.start();
1:b11f1b4: 
2:b11f1b4:         Session consumerSession = consumerConnection.createSession(false, Session.AUTO_ACKNOWLEDGE);
2:b11f1b4:         MessageConsumer consumer = consumerSession.createConsumer(destination);
1:b11f1b4: 
2:b11f1b4:         while (consumer.receive(messageReceiveTimeout) != null) {
2:b11f1b4:             messagesConsumed.incrementAndGet();
2:b11f1b4:             if (messagesConsumed.get() % 1000 == 0) {
2:b11f1b4:                 LOG.info("received Message " + messagesConsumed.get());
1:b11f1b4:                 LOG.info("Temp Store Usage " + broker.getSystemUsage().getTempUsage().getUsage());
1:b11f1b4:             }
1:b11f1b4:         }
1:b11f1b4: 
1:b11f1b4:         assertEquals("Incorrect number of Messages Consumed: " + messagesConsumed.get(),
1:b11f1b4:                      messagesConsumed.get(), messagesSent.get());
1:b11f1b4:     }
1:b11f1b4: 
1:b11f1b4:     private void createBrokerWithValidTempStoreConfig() throws Exception {
1:b11f1b4:         broker = new BrokerService();
1:b11f1b4:         broker.setDataDirectory("target" + File.separator + "activemq-data");
1:b11f1b4:         broker.setPersistent(true);
1:b11f1b4:         broker.setUseJmx(true);
1:b11f1b4:         broker.setAdvisorySupport(false);
1:b11f1b4:         broker.setDeleteAllMessagesOnStartup(true);
1:b11f1b4:         broker.setPersistenceAdapter(new KahaDBPersistenceAdapter());
1:b11f1b4: 
1:b11f1b4:         broker.getSystemUsage().setSendFailIfNoSpace(true);
1:b11f1b4:         broker.getSystemUsage().getMemoryUsage().setLimit(1048576);
1:65fe5e2:         broker.getSystemUsage().getTempUsage().setLimit(2*1048576);
1:d5dd937:         ((PListStoreImpl)broker.getSystemUsage().getTempUsage().getStore()).setJournalMaxFileLength(2 * 1048576);
2:b11f1b4:         broker.getSystemUsage().getStoreUsage().setLimit(20*1048576);
1:b11f1b4: 
1:b11f1b4:         PolicyEntry defaultPolicy = new PolicyEntry();
1:b11f1b4:         defaultPolicy.setProducerFlowControl(false);
1:b11f1b4:         defaultPolicy.setMemoryLimit(10 * 1024);
1:b11f1b4: 
1:b11f1b4:         PolicyMap policyMap = new PolicyMap();
1:b11f1b4:         policyMap.setDefaultEntry(defaultPolicy);
1:b11f1b4: 
1:b11f1b4:         broker.setDestinationPolicy(policyMap);
1:b11f1b4:         broker.addConnector("tcp://localhost:0").setName("Default");
1:b11f1b4:         broker.start();
1:b11f1b4: 
1:b11f1b4:         brokerUri = broker.getTransportConnectors().get(0).getPublishableConnectString();
1:b11f1b4:     }
1:b11f1b4: 
1:b11f1b4:     private void createBrokerWithInvalidTempStoreConfig() throws Exception {
1:b11f1b4:         broker = new BrokerService();
1:b11f1b4:         broker.setDataDirectory("target" + File.separator + "activemq-data");
1:b11f1b4:         broker.setPersistent(true);
1:b11f1b4:         broker.setUseJmx(true);
1:b11f1b4:         broker.setAdvisorySupport(false);
1:b11f1b4:         broker.setDeleteAllMessagesOnStartup(true);
1:b11f1b4:         broker.setPersistenceAdapter(new KahaDBPersistenceAdapter());
1:b11f1b4: 
1:b11f1b4:         broker.getSystemUsage().setSendFailIfNoSpace(true);
1:b11f1b4:         broker.getSystemUsage().getMemoryUsage().setLimit(1048576);
1:65fe5e2:         broker.getSystemUsage().getTempUsage().setLimit(2*1048576);
1:65fe5e2:         broker.getSystemUsage().getStoreUsage().setLimit(2*1048576);
1:b11f1b4: 
1:b11f1b4:         PolicyEntry defaultPolicy = new PolicyEntry();
1:b11f1b4:         defaultPolicy.setProducerFlowControl(false);
1:b11f1b4:         defaultPolicy.setMemoryLimit(10 * 1024);
1:b11f1b4: 
1:b11f1b4:         PolicyMap policyMap = new PolicyMap();
1:b11f1b4:         policyMap.setDefaultEntry(defaultPolicy);
1:b11f1b4: 
1:b11f1b4:         broker.setDestinationPolicy(policyMap);
1:b11f1b4:         broker.addConnector("tcp://localhost:0").setName("Default");
1:b11f1b4:         broker.start();
1:b11f1b4: 
1:b11f1b4:         brokerUri = broker.getTransportConnectors().get(0).getPublishableConnectString();
1:b11f1b4:     }
1:b11f1b4: 
1:b11f1b4:     @After
1:b11f1b4:     public void tearDown() throws Exception {
1:b11f1b4:         if (broker != null) {
1:b11f1b4:             broker.stop();
1:b11f1b4:         }
1:b11f1b4:     }
1:b11f1b4: 
1:b11f1b4: }
============================================================================
author:Timothy A. Bish
-------------------------------------------------------------------------------
commit:ef24cc9
commit:65fe5e2
/////////////////////////////////////////////////////////////////////////
1:     @Test(timeout=360000)
/////////////////////////////////////////////////////////////////////////
1:     @Test(timeout=360000)
/////////////////////////////////////////////////////////////////////////
1:             assertTrue("Should be able to send at least 200 messages but was: " + messagesSent.get(),
1:                        messagesSent.get() > 200);
/////////////////////////////////////////////////////////////////////////
1:         broker.getSystemUsage().getTempUsage().setLimit(2*1048576);
0:         broker.getSystemUsage().getTempUsage().getStore().setJournalMaxFileLength(2*1048576);
/////////////////////////////////////////////////////////////////////////
1:         broker.getSystemUsage().getTempUsage().setLimit(2*1048576);
1:         broker.getSystemUsage().getStoreUsage().setLimit(2*1048576);
commit:b11f1b4
/////////////////////////////////////////////////////////////////////////
1: /**
1:  * Licensed to the Apache Software Foundation (ASF) under one or more
1:  * contributor license agreements.  See the NOTICE file distributed with
1:  * this work for additional information regarding copyright ownership.
1:  * The ASF licenses this file to You under the Apache License, Version 2.0
1:  * (the "License"); you may not use this file except in compliance with
1:  * the License.  You may obtain a copy of the License at
1:  *
1:  *      http://www.apache.org/licenses/LICENSE-2.0
1:  *
1:  * Unless required by applicable law or agreed to in writing, software
1:  * distributed under the License is distributed on an "AS IS" BASIS,
1:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:  * See the License for the specific language governing permissions and
1:  * limitations under the License.
1:  */
1: package org.apache.activemq.bugs;
1: 
1: import static org.junit.Assert.*;
1: 
1: import java.io.File;
1: import java.util.concurrent.atomic.AtomicInteger;
1: 
1: import javax.jms.Connection;
1: import javax.jms.DeliveryMode;
1: import javax.jms.Destination;
1: import javax.jms.Message;
1: import javax.jms.MessageConsumer;
1: import javax.jms.MessageProducer;
1: import javax.jms.ResourceAllocationException;
1: import javax.jms.Session;
1: 
1: import org.apache.activemq.ActiveMQConnection;
1: import org.apache.activemq.ActiveMQConnectionFactory;
1: import org.apache.activemq.broker.BrokerService;
1: import org.apache.activemq.broker.region.policy.PolicyEntry;
1: import org.apache.activemq.broker.region.policy.PolicyMap;
1: import org.apache.activemq.command.ActiveMQQueue;
1: import org.apache.activemq.command.ActiveMQTopic;
1: import org.apache.activemq.store.kahadb.KahaDBPersistenceAdapter;
1: import org.junit.After;
1: import org.junit.Test;
1: import org.slf4j.Logger;
1: import org.slf4j.LoggerFactory;
1: 
1: /**
1:  * Test that when configuring small temp store limits the journal size must also
1:  * be smaller than the configured limit, but will still send a ResourceAllocationException
1:  * if its not when sendFailIfNoSpace is enabled.
1:  */
1: public class TempStorageConfigBrokerTest {
1: 
1:     public int deliveryMode = DeliveryMode.PERSISTENT;
1: 
1:     private static final Logger LOG = LoggerFactory.getLogger(TempStorageConfigBrokerTest.class);
1:     private static byte[] buf = new byte[4 * 1024];
1:     private BrokerService broker;
1:     private AtomicInteger messagesSent = new AtomicInteger(0);
1:     private AtomicInteger messagesConsumed = new AtomicInteger(0);
1: 
1:     private String brokerUri;
1:     private long messageReceiveTimeout = 10000L;
1:     private Destination destination = new ActiveMQTopic("FooTwo");
1: 
0:     @Test
1:     public void testFillTempAndConsumeWithBadTempStoreConfig() throws Exception {
1: 
1:         createBrokerWithInvalidTempStoreConfig();
1: 
1:         broker.getSystemUsage().setSendFailIfNoSpace(true);
1:         destination = new ActiveMQQueue("Foo");
1: 
1:         ActiveMQConnectionFactory factory = new ActiveMQConnectionFactory(brokerUri);
1:         final ActiveMQConnection producerConnection = (ActiveMQConnection) factory.createConnection();
1:         // so we can easily catch the ResourceAllocationException on send
1:         producerConnection.setAlwaysSyncSend(true);
1:         producerConnection.start();
1: 
1:         Session session = producerConnection.createSession(false, Session.AUTO_ACKNOWLEDGE);
1:         MessageProducer producer = session.createProducer(destination);
1:         producer.setDeliveryMode(DeliveryMode.NON_PERSISTENT);
1: 
1:         try {
1:             while (true) {
1:                 Message message = session.createTextMessage(new String(buf) + messagesSent.toString());
1:                 producer.send(message);
1:                 messagesSent.incrementAndGet();
1:                 if (messagesSent.get() % 100 == 0) {
1:                     LOG.info("Sent Message " + messagesSent.get());
1:                     LOG.info("Temp Store Usage " + broker.getSystemUsage().getTempUsage().getUsage());
1:                 }
1:             }
1:         } catch (ResourceAllocationException ex) {
1:             assertTrue("Should not be able to send 100 messages: ", messagesSent.get() < 100);
1:             LOG.info("Got resource exception : " + ex + ", after sent: " + messagesSent.get());
1:         }
1: 
1:         // consume all sent
1:         Connection consumerConnection = factory.createConnection();
1:         consumerConnection.start();
1: 
1:         Session consumerSession = consumerConnection.createSession(false, Session.AUTO_ACKNOWLEDGE);
1:         MessageConsumer consumer = consumerSession.createConsumer(destination);
1: 
1:         while (consumer.receive(messageReceiveTimeout) != null) {
1:             messagesConsumed.incrementAndGet();
1:             if (messagesConsumed.get() % 1000 == 0) {
1:                 LOG.info("received Message " + messagesConsumed.get());
1:                 LOG.info("Temp Store Usage " + broker.getSystemUsage().getTempUsage().getUsage());
1:             }
1:         }
1: 
0:         assertEquals("Incorrect number of Messages Consumed: " + messagesConsumed.get(), messagesConsumed.get(),
0:                 messagesSent.get());
1:     }
1: 
0:     @Test
1:     public void testFillTempAndConsumeWithGoodTempStoreConfig() throws Exception {
1: 
1:         createBrokerWithValidTempStoreConfig();
1: 
1:         broker.getSystemUsage().setSendFailIfNoSpace(true);
1:         destination = new ActiveMQQueue("Foo");
1: 
1:         ActiveMQConnectionFactory factory = new ActiveMQConnectionFactory(brokerUri);
1:         final ActiveMQConnection producerConnection = (ActiveMQConnection) factory.createConnection();
1:         // so we can easily catch the ResourceAllocationException on send
1:         producerConnection.setAlwaysSyncSend(true);
1:         producerConnection.start();
1: 
1:         Session session = producerConnection.createSession(false, Session.AUTO_ACKNOWLEDGE);
1:         MessageProducer producer = session.createProducer(destination);
1:         producer.setDeliveryMode(DeliveryMode.NON_PERSISTENT);
1: 
1:         try {
1:             while (true) {
1:                 Message message = session.createTextMessage(new String(buf) + messagesSent.toString());
1:                 producer.send(message);
1:                 messagesSent.incrementAndGet();
1:                 if (messagesSent.get() % 100 == 0) {
1:                     LOG.info("Sent Message " + messagesSent.get());
1:                     LOG.info("Temp Store Usage " + broker.getSystemUsage().getTempUsage().getUsage());
1:                 }
1:             }
1:         } catch (ResourceAllocationException ex) {
0:             assertTrue("Should be able to send at least 1000 messages: ", messagesSent.get() > 1000);
1:             LOG.info("Got resource exception : " + ex + ", after sent: " + messagesSent.get());
1:         }
1: 
1:         // consume all sent
1:         Connection consumerConnection = factory.createConnection();
1:         consumerConnection.start();
1: 
1:         Session consumerSession = consumerConnection.createSession(false, Session.AUTO_ACKNOWLEDGE);
1:         MessageConsumer consumer = consumerSession.createConsumer(destination);
1: 
1:         while (consumer.receive(messageReceiveTimeout) != null) {
1:             messagesConsumed.incrementAndGet();
1:             if (messagesConsumed.get() % 1000 == 0) {
1:                 LOG.info("received Message " + messagesConsumed.get());
1:                 LOG.info("Temp Store Usage " + broker.getSystemUsage().getTempUsage().getUsage());
1:             }
1:         }
1: 
1:         assertEquals("Incorrect number of Messages Consumed: " + messagesConsumed.get(),
1:                      messagesConsumed.get(), messagesSent.get());
1:     }
1: 
1:     private void createBrokerWithValidTempStoreConfig() throws Exception {
1:         broker = new BrokerService();
1:         broker.setDataDirectory("target" + File.separator + "activemq-data");
1:         broker.setPersistent(true);
1:         broker.setUseJmx(true);
1:         broker.setAdvisorySupport(false);
1:         broker.setDeleteAllMessagesOnStartup(true);
1:         broker.setPersistenceAdapter(new KahaDBPersistenceAdapter());
1: 
1:         broker.getSystemUsage().setSendFailIfNoSpace(true);
1:         broker.getSystemUsage().getMemoryUsage().setLimit(1048576);
0:         broker.getSystemUsage().getTempUsage().setLimit(10*1048576);
0:         broker.getSystemUsage().getTempUsage().getStore().setJournalMaxFileLength(10*1048576);
1:         broker.getSystemUsage().getStoreUsage().setLimit(20*1048576);
1: 
1:         PolicyEntry defaultPolicy = new PolicyEntry();
1:         defaultPolicy.setProducerFlowControl(false);
1:         defaultPolicy.setMemoryLimit(10 * 1024);
1: 
1:         PolicyMap policyMap = new PolicyMap();
1:         policyMap.setDefaultEntry(defaultPolicy);
1: 
1:         broker.setDestinationPolicy(policyMap);
1:         broker.addConnector("tcp://localhost:0").setName("Default");
1:         broker.start();
1: 
1:         brokerUri = broker.getTransportConnectors().get(0).getPublishableConnectString();
1:     }
1: 
1:     private void createBrokerWithInvalidTempStoreConfig() throws Exception {
1:         broker = new BrokerService();
1:         broker.setDataDirectory("target" + File.separator + "activemq-data");
1:         broker.setPersistent(true);
1:         broker.setUseJmx(true);
1:         broker.setAdvisorySupport(false);
1:         broker.setDeleteAllMessagesOnStartup(true);
1:         broker.setPersistenceAdapter(new KahaDBPersistenceAdapter());
1: 
1:         broker.getSystemUsage().setSendFailIfNoSpace(true);
1:         broker.getSystemUsage().getMemoryUsage().setLimit(1048576);
0:         broker.getSystemUsage().getTempUsage().setLimit(10*1048576);
1:         broker.getSystemUsage().getStoreUsage().setLimit(20*1048576);
1: 
1:         PolicyEntry defaultPolicy = new PolicyEntry();
1:         defaultPolicy.setProducerFlowControl(false);
1:         defaultPolicy.setMemoryLimit(10 * 1024);
1: 
1:         PolicyMap policyMap = new PolicyMap();
1:         policyMap.setDefaultEntry(defaultPolicy);
1: 
1:         broker.setDestinationPolicy(policyMap);
1:         broker.addConnector("tcp://localhost:0").setName("Default");
1:         broker.start();
1: 
1:         brokerUri = broker.getTransportConnectors().get(0).getPublishableConnectString();
1:     }
1: 
1:     @After
1:     public void tearDown() throws Exception {
1:         if (broker != null) {
1:             broker.stop();
1:         }
1:     }
1: 
1: }
author:Hiram R. Chirino
-------------------------------------------------------------------------------
commit:d5dd937
/////////////////////////////////////////////////////////////////////////
1: import org.apache.activemq.store.kahadb.plist.PListStoreImpl;
/////////////////////////////////////////////////////////////////////////
1:         ((PListStoreImpl)broker.getSystemUsage().getTempUsage().getStore()).setJournalMaxFileLength(2 * 1048576);
author:Gary Tully
-------------------------------------------------------------------------------
commit:24c4257
/////////////////////////////////////////////////////////////////////////
1: import org.junit.Ignore;
/////////////////////////////////////////////////////////////////////////
1:     @Ignore("blocks in hudson, needs investigation")
/////////////////////////////////////////////////////////////////////////
1:     @Ignore("blocks in hudson, needs investigation")
============================================================================