1:bbc039f: /**
1:bbc039f:  * Licensed to the Apache Software Foundation (ASF) under one or more
1:bbc039f:  * contributor license agreements.  See the NOTICE file distributed with
1:bbc039f:  * this work for additional information regarding copyright ownership.
1:bbc039f:  * The ASF licenses this file to You under the Apache License, Version 2.0
1:bbc039f:  * (the "License"); you may not use this file except in compliance with
1:bbc039f:  * the License.  You may obtain a copy of the License at
1:bbc039f:  *
1:bbc039f:  *      http://www.apache.org/licenses/LICENSE-2.0
1:bbc039f:  *
1:bbc039f:  * Unless required by applicable law or agreed to in writing, software
1:bbc039f:  * distributed under the License is distributed on an "AS IS" BASIS,
1:bbc039f:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:bbc039f:  * See the License for the specific language governing permissions and
1:bbc039f:  * limitations under the License.
1:bbc039f:  */
1:bbc039f: package org.apache.activemq.plugin;
1:bbc039f: 
1:bbc039f: import org.apache.activemq.filter.DestinationMapEntry;
1:bbc039f: import org.apache.activemq.security.*;
1:bbc039f: import org.apache.activemq.schema.core.DtoAuthorizationPlugin;
1:bbc039f: import org.apache.activemq.schema.core.DtoAuthorizationMap;
1:bbc039f: import org.apache.activemq.schema.core.DtoAuthorizationEntry;
1:bbc039f: 
1:bbc039f: import java.util.LinkedList;
1:bbc039f: import java.util.List;
1:bbc039f: 
1:bbc039f: public class AuthorizationPluginProcessor extends DefaultConfigurationProcessor {
1:bbc039f: 
1:bbc039f:     public AuthorizationPluginProcessor(RuntimeConfigurationBroker plugin, Class configurationClass) {
1:bbc039f:         super(plugin, configurationClass);
1:bbc039f:     }
1:bbc039f: 
1:bbc039f:     @Override
1:bbc039f:     public void modify(Object existing, Object candidate) {
1:bbc039f:         try {
1:bbc039f:             // replace authorization map - need exclusive write lock to total broker
1:bbc039f:             AuthorizationBroker authorizationBroker =
1:bbc039f:                     (AuthorizationBroker) plugin.getBrokerService().getBroker().getAdaptor(AuthorizationBroker.class);
1:bbc039f: 
1:bbc039f:             authorizationBroker.setAuthorizationMap(fromDto(filter(candidate, DtoAuthorizationPlugin.Map.class)));
1:bbc039f:         } catch (Exception e) {
1:bbc039f:             plugin.info("failed to apply modified AuthorizationMap to AuthorizationBroker", e);
1:bbc039f:         }
1:bbc039f:     }
1:bbc039f: 
1:bbc039f:     private AuthorizationMap fromDto(List<Object> map) {
1:bbc039f:         XBeanAuthorizationMap xBeanAuthorizationMap = new XBeanAuthorizationMap();
1:bbc039f:         for (Object o : map) {
1:bbc039f:             if (o instanceof DtoAuthorizationPlugin.Map) {
1:bbc039f:                 DtoAuthorizationPlugin.Map dtoMap = (DtoAuthorizationPlugin.Map) o;
1:bbc039f:                 List<DestinationMapEntry> entries = new LinkedList<DestinationMapEntry>();
1:bbc039f:                 // revisit - would like to map getAuthorizationMap to generic getContents
1:bbc039f:                 for (Object authMap : filter(dtoMap.getAuthorizationMap(), DtoAuthorizationMap.AuthorizationEntries.class)) {
1:bbc039f:                     for (Object entry : filter(getContents(authMap), DtoAuthorizationEntry.class)) {
1:bbc039f:                         entries.add(fromDto(entry, new XBeanAuthorizationEntry()));
1:bbc039f:                     }
1:bbc039f:                 }
1:bbc039f:                 xBeanAuthorizationMap.setAuthorizationEntries(entries);
1:52ab6ba:                 xBeanAuthorizationMap.setGroupClass(dtoMap.getAuthorizationMap().getGroupClass());
1:bbc039f:                 try {
1:bbc039f:                     xBeanAuthorizationMap.afterPropertiesSet();
1:bbc039f:                 } catch (Exception e) {
1:bbc039f:                     plugin.info("failed to update xBeanAuthorizationMap auth entries:", e);
1:bbc039f:                 }
1:bbc039f: 
1:bbc039f:                 for (Object entry : filter(dtoMap.getAuthorizationMap(), DtoAuthorizationMap.TempDestinationAuthorizationEntry.class)) {
1:bbc039f:                     // another restriction - would like to be getContents
1:bbc039f:                     DtoAuthorizationMap.TempDestinationAuthorizationEntry dtoEntry = (DtoAuthorizationMap.TempDestinationAuthorizationEntry) entry;
1:bbc039f:                     xBeanAuthorizationMap.setTempDestinationAuthorizationEntry(fromDto(dtoEntry.getTempDestinationAuthorizationEntry(), new TempDestinationAuthorizationEntry()));
1:bbc039f:                 }
1:bbc039f:             } else {
1:bbc039f:                 plugin.info("No support for updates to: " + o);
1:bbc039f:             }
1:bbc039f:         }
1:bbc039f:         return xBeanAuthorizationMap;
1:bbc039f:     }
1:bbc039f: }
============================================================================
author:gtully
-------------------------------------------------------------------------------
commit:52ab6ba
/////////////////////////////////////////////////////////////////////////
1:                 xBeanAuthorizationMap.setGroupClass(dtoMap.getAuthorizationMap().getGroupClass());
author:Dejan Bosanac
-------------------------------------------------------------------------------
commit:bbc039f
/////////////////////////////////////////////////////////////////////////
1: /**
1:  * Licensed to the Apache Software Foundation (ASF) under one or more
1:  * contributor license agreements.  See the NOTICE file distributed with
1:  * this work for additional information regarding copyright ownership.
1:  * The ASF licenses this file to You under the Apache License, Version 2.0
1:  * (the "License"); you may not use this file except in compliance with
1:  * the License.  You may obtain a copy of the License at
1:  *
1:  *      http://www.apache.org/licenses/LICENSE-2.0
1:  *
1:  * Unless required by applicable law or agreed to in writing, software
1:  * distributed under the License is distributed on an "AS IS" BASIS,
1:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:  * See the License for the specific language governing permissions and
1:  * limitations under the License.
1:  */
1: package org.apache.activemq.plugin;
1: 
1: import org.apache.activemq.filter.DestinationMapEntry;
1: import org.apache.activemq.security.*;
1: import org.apache.activemq.schema.core.DtoAuthorizationPlugin;
1: import org.apache.activemq.schema.core.DtoAuthorizationMap;
1: import org.apache.activemq.schema.core.DtoAuthorizationEntry;
1: 
1: import java.util.LinkedList;
1: import java.util.List;
1: 
1: public class AuthorizationPluginProcessor extends DefaultConfigurationProcessor {
1: 
1:     public AuthorizationPluginProcessor(RuntimeConfigurationBroker plugin, Class configurationClass) {
1:         super(plugin, configurationClass);
1:     }
1: 
1:     @Override
1:     public void modify(Object existing, Object candidate) {
1:         try {
1:             // replace authorization map - need exclusive write lock to total broker
1:             AuthorizationBroker authorizationBroker =
1:                     (AuthorizationBroker) plugin.getBrokerService().getBroker().getAdaptor(AuthorizationBroker.class);
1: 
1:             authorizationBroker.setAuthorizationMap(fromDto(filter(candidate, DtoAuthorizationPlugin.Map.class)));
1:         } catch (Exception e) {
1:             plugin.info("failed to apply modified AuthorizationMap to AuthorizationBroker", e);
1:         }
1:     }
1: 
1:     private AuthorizationMap fromDto(List<Object> map) {
1:         XBeanAuthorizationMap xBeanAuthorizationMap = new XBeanAuthorizationMap();
1:         for (Object o : map) {
1:             if (o instanceof DtoAuthorizationPlugin.Map) {
1:                 DtoAuthorizationPlugin.Map dtoMap = (DtoAuthorizationPlugin.Map) o;
1:                 List<DestinationMapEntry> entries = new LinkedList<DestinationMapEntry>();
1:                 // revisit - would like to map getAuthorizationMap to generic getContents
1:                 for (Object authMap : filter(dtoMap.getAuthorizationMap(), DtoAuthorizationMap.AuthorizationEntries.class)) {
1:                     for (Object entry : filter(getContents(authMap), DtoAuthorizationEntry.class)) {
1:                         entries.add(fromDto(entry, new XBeanAuthorizationEntry()));
1:                     }
1:                 }
1:                 xBeanAuthorizationMap.setAuthorizationEntries(entries);
1:                 try {
1:                     xBeanAuthorizationMap.afterPropertiesSet();
1:                 } catch (Exception e) {
1:                     plugin.info("failed to update xBeanAuthorizationMap auth entries:", e);
1:                 }
1: 
1:                 for (Object entry : filter(dtoMap.getAuthorizationMap(), DtoAuthorizationMap.TempDestinationAuthorizationEntry.class)) {
1:                     // another restriction - would like to be getContents
1:                     DtoAuthorizationMap.TempDestinationAuthorizationEntry dtoEntry = (DtoAuthorizationMap.TempDestinationAuthorizationEntry) entry;
1:                     xBeanAuthorizationMap.setTempDestinationAuthorizationEntry(fromDto(dtoEntry.getTempDestinationAuthorizationEntry(), new TempDestinationAuthorizationEntry()));
1:                 }
1:             } else {
1:                 plugin.info("No support for updates to: " + o);
1:             }
1:         }
1:         return xBeanAuthorizationMap;
1:     }
1: }
============================================================================