1:3fdf986: /**
1:3fdf986:  * Licensed to the Apache Software Foundation (ASF) under one or more
1:3fdf986:  * contributor license agreements.  See the NOTICE file distributed with
1:3fdf986:  * this work for additional information regarding copyright ownership.
1:3fdf986:  * The ASF licenses this file to You under the Apache License, Version 2.0
1:3fdf986:  * (the "License"); you may not use this file except in compliance with
1:3fdf986:  * the License.  You may obtain a copy of the License at
1:3fdf986:  *
1:3fdf986:  *      http://www.apache.org/licenses/LICENSE-2.0
1:3fdf986:  *
1:3fdf986:  * Unless required by applicable law or agreed to in writing, software
1:3fdf986:  * distributed under the License is distributed on an "AS IS" BASIS,
1:3fdf986:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:3fdf986:  * See the License for the specific language governing permissions and
1:3fdf986:  * limitations under the License.
1:3fdf986:  */
1:3fdf986: package org.apache.activemq.usecases;
1:3fdf986: 
1:3fdf986: import java.util.concurrent.atomic.AtomicBoolean;
1:3fdf986: import javax.jms.Connection;
1:3fdf986: import javax.jms.Session;
1:3fdf986: import javax.jms.Topic;
1:3fdf986: import junit.framework.Test;
1:3fdf986: import org.apache.activemq.ActiveMQConnectionFactory;
1:3fdf986: import org.apache.activemq.broker.BrokerFactory;
1:3fdf986: import org.apache.activemq.broker.BrokerService;
1:3fdf986: import org.apache.activemq.broker.jmx.ManagedRegionBroker;
1:3fdf986: import org.apache.activemq.broker.region.policy.PolicyEntry;
1:3fdf986: import org.apache.activemq.broker.region.policy.PolicyMap;
1:3fdf986: import org.apache.activemq.command.ActiveMQDestination;
1:3fdf986: import org.apache.activemq.command.ActiveMQTopic;
1:3fdf986: import org.apache.activemq.store.kahadb.KahaDBPersistenceAdapter;
1:3fdf986: import org.apache.activemq.util.DefaultTestAppender;
1:3fdf986: import org.apache.activemq.util.Wait;
1:3fdf986: import org.apache.log4j.Appender;
1:3fdf986: import org.apache.log4j.Level;
1:3fdf986: import org.apache.log4j.spi.LoggingEvent;
1:3fdf986: import org.slf4j.Logger;
1:3fdf986: import org.slf4j.LoggerFactory;
1:3fdf986: 
1:3fdf986: public class OfflineDurableSubscriberTimeoutTest extends org.apache.activemq.TestSupport {
1:3fdf986: 
1:3fdf986:     private static final Logger LOG = LoggerFactory.getLogger(OfflineDurableSubscriberTimeoutTest.class);
1:3fdf986:     private BrokerService broker;
1:3fdf986: 
1:3fdf986:     @Override
1:3fdf986:     protected ActiveMQConnectionFactory createConnectionFactory() throws Exception {
1:3fdf986:         ActiveMQConnectionFactory connectionFactory = new ActiveMQConnectionFactory("vm://" + getName(true));
1:3fdf986:         connectionFactory.setWatchTopicAdvisories(false);
1:3fdf986:         return connectionFactory;
1:3fdf986:     }
1:3fdf986: 
1:3fdf986:     @Override
1:3fdf986:     protected Connection createConnection() throws Exception {
1:3fdf986:         return createConnection("id");
1:3fdf986:     }
1:3fdf986: 
1:3fdf986:     protected Connection createConnection(String name) throws Exception {
1:3fdf986:         Connection con = getConnectionFactory().createConnection();
1:3fdf986:         con.setClientID(name);
1:3fdf986:         con.start();
1:3fdf986:         return con;
1:3fdf986:     }
1:3fdf986: 
1:3fdf986:     public static Test suite() {
1:3fdf986:         return suite(OfflineDurableSubscriberTimeoutTest.class);
1:3fdf986:     }
1:3fdf986: 
1:3fdf986:     @Override
1:3fdf986:     protected void setUp() throws Exception {
1:3fdf986:         createBroker();
1:3fdf986:         super.setUp();
1:3fdf986:     }
1:3fdf986: 
1:3fdf986:     @Override
1:3fdf986:     protected void tearDown() throws Exception {
1:3fdf986:         super.tearDown();
1:3fdf986:         destroyBroker();
1:3fdf986:     }
1:3fdf986: 
1:3fdf986:     private void createBroker() throws Exception {
1:3fdf986:         createBroker(true);
1:3fdf986:     }
1:3fdf986: 
1:3fdf986:     private void createBroker(boolean deleteAllMessages) throws Exception {
1:3fdf986:         broker = BrokerFactory.createBroker("broker:(vm://" + getName(true) + ")");
1:3fdf986:         broker.setBrokerName(getName(true));
1:3fdf986:         broker.setDeleteAllMessagesOnStartup(deleteAllMessages);
1:3fdf986:         broker.getManagementContext().setCreateConnector(false);
1:3fdf986:         broker.setAdvisorySupport(false);
1:3fdf986: 
1:3fdf986:         setDefaultPersistenceAdapter(broker);
1:3fdf986: 
1:3fdf986:         ((KahaDBPersistenceAdapter) broker.getPersistenceAdapter()).getStore().getPageFile().setPageSize(1024);
1:3fdf986: 
1:3fdf986:         PolicyMap policyMap = new PolicyMap();
1:3fdf986:         PolicyEntry policyEntry = new PolicyEntry();
1:3fdf986:         policyEntry.setExpireMessagesPeriod(1000);
1:3fdf986: 
1:3fdf986:         policyEntry.setProducerFlowControl(true);
1:3fdf986:         policyMap.put(new ActiveMQTopic(">"), policyEntry);
1:3fdf986:         broker.setDestinationPolicy(policyMap);
1:3fdf986: 
1:3fdf986:         broker.setOfflineDurableSubscriberTaskSchedule(1000);
1:3fdf986:         broker.setOfflineDurableSubscriberTimeout(2004);
1:3fdf986: 
1:3fdf986:         broker.setDestinations(new ActiveMQDestination[]{
1:3fdf986:                 new ActiveMQTopic("topic1")
1:3fdf986:         });
1:3fdf986: 
1:3fdf986:         broker.start();
1:3fdf986:     }
1:3fdf986: 
1:3fdf986:     private void destroyBroker() throws Exception {
1:3fdf986:         if (broker != null)
1:3fdf986:             broker.stop();
1:3fdf986:     }
1:3fdf986: 
1:3fdf986:     public void testOfflineDurableSubscriberTimeout() throws Exception {
1:3fdf986: 
1:3fdf986:         final AtomicBoolean foundLogMessage = new AtomicBoolean(false);
1:3fdf986:         Appender appender = new DefaultTestAppender() {
1:3fdf986:             @Override
1:3fdf986:             public void doAppend(LoggingEvent event) {
1:3fdf986:                 if (event.getLevel().isGreaterOrEqual(Level.WARN)) {
1:3fdf986:                     LOG.info("received unexpected log message: " + event.getMessage());
1:3fdf986:                     foundLogMessage.set(true);
1:3fdf986:                 }
1:3fdf986:             }
1:3fdf986:         };
1:3fdf986: 
1:3fdf986:         org.apache.log4j.Logger log4jLoggerMRB =
1:3fdf986:                 org.apache.log4j.Logger.getLogger(ManagedRegionBroker.class);
1:3fdf986:         org.apache.log4j.Logger log4jLoggerT =
1:3fdf986:                 org.apache.log4j.Logger.getLogger(org.apache.activemq.broker.region.Topic.class);
1:3fdf986: 
1:3fdf986:         log4jLoggerMRB.addAppender(appender);
1:3fdf986:         log4jLoggerT.addAppender(appender);
1:3fdf986: 
1:3fdf986:         try {
1:3fdf986: 
1:3fdf986:             createOfflineDurableSubscribers("topic_new");
1:3fdf986: 
1:3fdf986:             assertTrue(Wait.waitFor(new Wait.Condition() {
1:3fdf986:                 @Override
1:3fdf986:                 public boolean isSatisified() throws Exception {
1:3fdf986:                     LOG.info("broker.getAdminView().getInactiveDurableTopicSubscribers():" + broker.getAdminView().getInactiveDurableTopicSubscribers().length);
1:3fdf986:                     return broker.getAdminView().getInactiveDurableTopicSubscribers().length == 1;
1:3fdf986:                 }
1:3fdf986:             }));
1:3fdf986:             assertTrue(Wait.waitFor(new Wait.Condition() {
1:3fdf986:                 @Override
1:3fdf986:                 public boolean isSatisified() throws Exception {
1:3fdf986:                     return broker.getAdminView().getInactiveDurableTopicSubscribers().length == 0;
1:3fdf986:                 }
1:3fdf986:             }));
1:3fdf986: 
1:3fdf986: 
1:3fdf986:             broker.stop();
1:3fdf986:             broker.waitUntilStopped();
1:3fdf986: 
1:3fdf986:             createBroker(false);
1:3fdf986:             broker.waitUntilStarted();
1:3fdf986: 
1:3fdf986:             createOfflineDurableSubscribers("topic_new");
1:3fdf986: 
1:3fdf986:             assertTrue(Wait.waitFor(new Wait.Condition() {
1:3fdf986:                 @Override
1:3fdf986:                 public boolean isSatisified() throws Exception {
1:3fdf986:                     return broker.getAdminView().getInactiveDurableTopicSubscribers().length == 1;
1:3fdf986:                 }
1:3fdf986:             }));
1:3fdf986: 
1:3fdf986:             assertTrue(Wait.waitFor(new Wait.Condition() {
1:3fdf986:                 @Override
1:3fdf986:                 public boolean isSatisified() throws Exception {
1:3fdf986:                     return broker.getAdminView().getInactiveDurableTopicSubscribers().length == 0;
1:3fdf986:                 }
1:3fdf986:             }));
1:3fdf986: 
1:3fdf986:             LOG.info("Create Consumer for topic1");
1:3fdf986:             //create connection to topic that is experiencing warning
1:3fdf986:             createOfflineDurableSubscribers("topic1");
1:3fdf986: 
1:3fdf986: 
1:3fdf986:             assertTrue(Wait.waitFor(new Wait.Condition() {
1:3fdf986:                 @Override
1:3fdf986:                 public boolean isSatisified() throws Exception {
1:3fdf986:                     return broker.getAdminView().getInactiveDurableTopicSubscribers().length == 1;
1:3fdf986:                 }
1:3fdf986:             }));
1:3fdf986: 
1:3fdf986:             assertTrue(Wait.waitFor(new Wait.Condition() {
1:3fdf986:                 @Override
1:3fdf986:                 public boolean isSatisified() throws Exception {
1:3fdf986:                     return broker.getAdminView().getInactiveDurableTopicSubscribers().length == 0;
1:3fdf986:                 }
1:3fdf986:             }));
1:3fdf986: 
1:3fdf986:             assertFalse("have not found any log warn/error", foundLogMessage.get());
1:3fdf986:         } finally {
1:3fdf986:             log4jLoggerMRB.removeAppender(appender);
1:3fdf986:             log4jLoggerT.removeAppender(appender);
1:3fdf986:         }
1:3fdf986:     }
1:3fdf986: 
1:3fdf986:     private void createOfflineDurableSubscribers(String topic) throws Exception {
1:3fdf986:         Connection con = createConnection();
1:3fdf986:         Session session = con.createSession(false, Session.AUTO_ACKNOWLEDGE);
1:3fdf986:         session.createDurableSubscriber((Topic) createDestination(topic), "sub1", null, true);
1:3fdf986:         session.close();
1:3fdf986:         con.close();
1:3fdf986:     }
1:3fdf986: }
============================================================================
author:gtully
-------------------------------------------------------------------------------
commit:3fdf986
/////////////////////////////////////////////////////////////////////////
1: /**
1:  * Licensed to the Apache Software Foundation (ASF) under one or more
1:  * contributor license agreements.  See the NOTICE file distributed with
1:  * this work for additional information regarding copyright ownership.
1:  * The ASF licenses this file to You under the Apache License, Version 2.0
1:  * (the "License"); you may not use this file except in compliance with
1:  * the License.  You may obtain a copy of the License at
1:  *
1:  *      http://www.apache.org/licenses/LICENSE-2.0
1:  *
1:  * Unless required by applicable law or agreed to in writing, software
1:  * distributed under the License is distributed on an "AS IS" BASIS,
1:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:  * See the License for the specific language governing permissions and
1:  * limitations under the License.
1:  */
1: package org.apache.activemq.usecases;
1: 
1: import java.util.concurrent.atomic.AtomicBoolean;
1: import javax.jms.Connection;
1: import javax.jms.Session;
1: import javax.jms.Topic;
1: import junit.framework.Test;
1: import org.apache.activemq.ActiveMQConnectionFactory;
1: import org.apache.activemq.broker.BrokerFactory;
1: import org.apache.activemq.broker.BrokerService;
1: import org.apache.activemq.broker.jmx.ManagedRegionBroker;
1: import org.apache.activemq.broker.region.policy.PolicyEntry;
1: import org.apache.activemq.broker.region.policy.PolicyMap;
1: import org.apache.activemq.command.ActiveMQDestination;
1: import org.apache.activemq.command.ActiveMQTopic;
1: import org.apache.activemq.store.kahadb.KahaDBPersistenceAdapter;
1: import org.apache.activemq.util.DefaultTestAppender;
1: import org.apache.activemq.util.Wait;
1: import org.apache.log4j.Appender;
1: import org.apache.log4j.Level;
1: import org.apache.log4j.spi.LoggingEvent;
1: import org.slf4j.Logger;
1: import org.slf4j.LoggerFactory;
1: 
1: public class OfflineDurableSubscriberTimeoutTest extends org.apache.activemq.TestSupport {
1: 
1:     private static final Logger LOG = LoggerFactory.getLogger(OfflineDurableSubscriberTimeoutTest.class);
1:     private BrokerService broker;
1: 
1:     @Override
1:     protected ActiveMQConnectionFactory createConnectionFactory() throws Exception {
1:         ActiveMQConnectionFactory connectionFactory = new ActiveMQConnectionFactory("vm://" + getName(true));
1:         connectionFactory.setWatchTopicAdvisories(false);
1:         return connectionFactory;
1:     }
1: 
1:     @Override
1:     protected Connection createConnection() throws Exception {
1:         return createConnection("id");
1:     }
1: 
1:     protected Connection createConnection(String name) throws Exception {
1:         Connection con = getConnectionFactory().createConnection();
1:         con.setClientID(name);
1:         con.start();
1:         return con;
1:     }
1: 
1:     public static Test suite() {
1:         return suite(OfflineDurableSubscriberTimeoutTest.class);
1:     }
1: 
1:     @Override
1:     protected void setUp() throws Exception {
1:         createBroker();
1:         super.setUp();
1:     }
1: 
1:     @Override
1:     protected void tearDown() throws Exception {
1:         super.tearDown();
1:         destroyBroker();
1:     }
1: 
1:     private void createBroker() throws Exception {
1:         createBroker(true);
1:     }
1: 
1:     private void createBroker(boolean deleteAllMessages) throws Exception {
1:         broker = BrokerFactory.createBroker("broker:(vm://" + getName(true) + ")");
1:         broker.setBrokerName(getName(true));
1:         broker.setDeleteAllMessagesOnStartup(deleteAllMessages);
1:         broker.getManagementContext().setCreateConnector(false);
1:         broker.setAdvisorySupport(false);
1: 
1:         setDefaultPersistenceAdapter(broker);
1: 
1:         ((KahaDBPersistenceAdapter) broker.getPersistenceAdapter()).getStore().getPageFile().setPageSize(1024);
1: 
1:         PolicyMap policyMap = new PolicyMap();
1:         PolicyEntry policyEntry = new PolicyEntry();
1:         policyEntry.setExpireMessagesPeriod(1000);
1: 
1:         policyEntry.setProducerFlowControl(true);
1:         policyMap.put(new ActiveMQTopic(">"), policyEntry);
1:         broker.setDestinationPolicy(policyMap);
1: 
1:         broker.setOfflineDurableSubscriberTaskSchedule(1000);
1:         broker.setOfflineDurableSubscriberTimeout(2004);
1: 
1:         broker.setDestinations(new ActiveMQDestination[]{
1:                 new ActiveMQTopic("topic1")
1:         });
1: 
1:         broker.start();
1:     }
1: 
1:     private void destroyBroker() throws Exception {
1:         if (broker != null)
1:             broker.stop();
1:     }
1: 
1:     public void testOfflineDurableSubscriberTimeout() throws Exception {
1: 
1:         final AtomicBoolean foundLogMessage = new AtomicBoolean(false);
1:         Appender appender = new DefaultTestAppender() {
1:             @Override
1:             public void doAppend(LoggingEvent event) {
1:                 if (event.getLevel().isGreaterOrEqual(Level.WARN)) {
1:                     LOG.info("received unexpected log message: " + event.getMessage());
1:                     foundLogMessage.set(true);
1:                 }
1:             }
1:         };
1: 
1:         org.apache.log4j.Logger log4jLoggerMRB =
1:                 org.apache.log4j.Logger.getLogger(ManagedRegionBroker.class);
1:         org.apache.log4j.Logger log4jLoggerT =
1:                 org.apache.log4j.Logger.getLogger(org.apache.activemq.broker.region.Topic.class);
1: 
1:         log4jLoggerMRB.addAppender(appender);
1:         log4jLoggerT.addAppender(appender);
1: 
1:         try {
1: 
1:             createOfflineDurableSubscribers("topic_new");
1: 
1:             assertTrue(Wait.waitFor(new Wait.Condition() {
1:                 @Override
1:                 public boolean isSatisified() throws Exception {
1:                     LOG.info("broker.getAdminView().getInactiveDurableTopicSubscribers():" + broker.getAdminView().getInactiveDurableTopicSubscribers().length);
1:                     return broker.getAdminView().getInactiveDurableTopicSubscribers().length == 1;
1:                 }
1:             }));
1:             assertTrue(Wait.waitFor(new Wait.Condition() {
1:                 @Override
1:                 public boolean isSatisified() throws Exception {
1:                     return broker.getAdminView().getInactiveDurableTopicSubscribers().length == 0;
1:                 }
1:             }));
1: 
1: 
1:             broker.stop();
1:             broker.waitUntilStopped();
1: 
1:             createBroker(false);
1:             broker.waitUntilStarted();
1: 
1:             createOfflineDurableSubscribers("topic_new");
1: 
1:             assertTrue(Wait.waitFor(new Wait.Condition() {
1:                 @Override
1:                 public boolean isSatisified() throws Exception {
1:                     return broker.getAdminView().getInactiveDurableTopicSubscribers().length == 1;
1:                 }
1:             }));
1: 
1:             assertTrue(Wait.waitFor(new Wait.Condition() {
1:                 @Override
1:                 public boolean isSatisified() throws Exception {
1:                     return broker.getAdminView().getInactiveDurableTopicSubscribers().length == 0;
1:                 }
1:             }));
1: 
1:             LOG.info("Create Consumer for topic1");
1:             //create connection to topic that is experiencing warning
1:             createOfflineDurableSubscribers("topic1");
1: 
1: 
1:             assertTrue(Wait.waitFor(new Wait.Condition() {
1:                 @Override
1:                 public boolean isSatisified() throws Exception {
1:                     return broker.getAdminView().getInactiveDurableTopicSubscribers().length == 1;
1:                 }
1:             }));
1: 
1:             assertTrue(Wait.waitFor(new Wait.Condition() {
1:                 @Override
1:                 public boolean isSatisified() throws Exception {
1:                     return broker.getAdminView().getInactiveDurableTopicSubscribers().length == 0;
1:                 }
1:             }));
1: 
1:             assertFalse("have not found any log warn/error", foundLogMessage.get());
1:         } finally {
1:             log4jLoggerMRB.removeAppender(appender);
1:             log4jLoggerT.removeAppender(appender);
1:         }
1:     }
1: 
1:     private void createOfflineDurableSubscribers(String topic) throws Exception {
1:         Connection con = createConnection();
1:         Session session = con.createSession(false, Session.AUTO_ACKNOWLEDGE);
1:         session.createDurableSubscriber((Topic) createDestination(topic), "sub1", null, true);
1:         session.close();
1:         con.close();
1:     }
1: }
============================================================================