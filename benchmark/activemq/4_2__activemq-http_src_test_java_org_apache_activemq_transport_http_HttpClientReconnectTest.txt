1:7310949: /**
1:7310949:  * Licensed to the Apache Software Foundation (ASF) under one or more
1:7310949:  * contributor license agreements.  See the NOTICE file distributed with
1:7310949:  * this work for additional information regarding copyright ownership.
1:7310949:  * The ASF licenses this file to You under the Apache License, Version 2.0
1:7310949:  * (the "License"); you may not use this file except in compliance with
1:7310949:  * the License.  You may obtain a copy of the License at
1:7310949:  *
1:7310949:  *      http://www.apache.org/licenses/LICENSE-2.0
1:7310949:  *
1:7310949:  * Unless required by applicable law or agreed to in writing, software
1:7310949:  * distributed under the License is distributed on an "AS IS" BASIS,
1:7310949:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:7310949:  * See the License for the specific language governing permissions and
1:7310949:  * limitations under the License.
1:7310949:  */
1:09bae42: package org.apache.activemq.transport.http;
7:09bae42: 
1:46e67a1: import static org.junit.Assert.assertEquals;
1:46e67a1: 
1:09bae42: import javax.jms.Connection;
1:09bae42: import javax.jms.Destination;
1:09bae42: import javax.jms.MessageConsumer;
1:09bae42: import javax.jms.MessageProducer;
1:09bae42: import javax.jms.Session;
1:09bae42: import javax.jms.TextMessage;
1:09bae42: 
1:09bae42: import org.apache.activemq.ActiveMQConnectionFactory;
1:09bae42: import org.apache.activemq.broker.BrokerService;
1:46e67a1: import org.apache.activemq.broker.TransportConnector;
1:09bae42: import org.apache.activemq.command.ActiveMQQueue;
1:46e67a1: import org.junit.After;
1:46e67a1: import org.junit.Before;
1:46e67a1: import org.junit.Test;
1:09bae42: 
1:46e67a1: public class HttpClientReconnectTest {
1:09bae42: 
1:46e67a1:     private BrokerService broker;
1:46e67a1:     private ActiveMQConnectionFactory factory;
1:46e67a1: 
1:46e67a1:     @Before
1:46e67a1:     public void setUp() throws Exception {
1:8bf987b:         System.setProperty("javax.net.ssl.trustStore", "src/test/resources/client.keystore");
1:8bf987b:         System.setProperty("javax.net.ssl.trustStorePassword", "password");
1:8bf987b:         System.setProperty("javax.net.ssl.trustStoreType", "jks");
1:8bf987b:         System.setProperty("javax.net.ssl.keyStore", "src/test/resources/server.keystore");
1:8bf987b:         System.setProperty("javax.net.ssl.keyStorePassword", "password");
1:8bf987b:         System.setProperty("javax.net.ssl.keyStoreType", "jks");
1:8bf987b: 
1:46e67a1:         broker = new BrokerService();
1:46e67a1:         TransportConnector connector = broker.addConnector("https://localhost:0?trace=true");
1:46e67a1:         broker.setPersistent(false);
1:46e67a1:         broker.setUseJmx(false);
1:46e67a1:         broker.deleteAllMessages();
1:46e67a1:         broker.start();
1:09bae42: 
1:46e67a1:         String connectionUri = connector.getPublishableConnectString();
1:46e67a1:         factory = new ActiveMQConnectionFactory(connectionUri + "?trace=true&soTimeout=1000");
1:46e67a1:     }
1:09bae42: 
1:46e67a1:     @After
1:46e67a1:     public void tearDown() throws Exception {
1:46e67a1:         broker.stop();
1:46e67a1:     }
1:46e67a1: 
1:d9db37e:     @Test(timeout=120000)
1:46e67a1:     public void testReconnectClient() throws Exception {
1:46e67a1:         for (int i = 0; i < 100; i++) {
1:46e67a1:             sendAndReceiveMessage(i);
1:46e67a1:         }
1:46e67a1:     }
1:46e67a1: 
1:46e67a1:     private void sendAndReceiveMessage(int i) throws Exception {
1:46e67a1:         Connection conn = factory.createConnection();
1:46e67a1:         Session sess = conn.createSession(false, Session.AUTO_ACKNOWLEDGE);
1:46e67a1:         conn.start();
1:46e67a1:         Destination dest = new ActiveMQQueue("test");
1:46e67a1:         MessageProducer producer = sess.createProducer(dest);
1:46e67a1:         MessageConsumer consumer = sess.createConsumer(dest);
1:46e67a1:         String messageText = "test " + i;
1:46e67a1:         try {
1:46e67a1:             producer.send(sess.createTextMessage(messageText));
1:46e67a1:             TextMessage msg = (TextMessage)consumer.receive(1000);
1:46e67a1:             assertEquals(messageText, msg.getText());
1:46e67a1:         } finally {
1:46e67a1:             producer.close();
1:46e67a1:             consumer.close();
1:46e67a1:             conn.close();
1:46e67a1:             sess.close();
1:46e67a1:         }
1:46e67a1:     }
7:09bae42: }
============================================================================
author:Timothy A. Bish
-------------------------------------------------------------------------------
commit:d9db37e
/////////////////////////////////////////////////////////////////////////
1:     @Test(timeout=120000)
commit:46e67a1
/////////////////////////////////////////////////////////////////////////
1: import static org.junit.Assert.assertEquals;
1: 
/////////////////////////////////////////////////////////////////////////
1: import org.apache.activemq.broker.TransportConnector;
1: import org.junit.After;
1: import org.junit.Before;
1: import org.junit.Test;
1: public class HttpClientReconnectTest {
1:     private BrokerService broker;
1:     private ActiveMQConnectionFactory factory;
1: 
1:     @Before
1:     public void setUp() throws Exception {
/////////////////////////////////////////////////////////////////////////
1:         broker = new BrokerService();
1:         TransportConnector connector = broker.addConnector("https://localhost:0?trace=true");
1:         broker.setPersistent(false);
1:         broker.setUseJmx(false);
1:         broker.deleteAllMessages();
1:         broker.start();
1:         String connectionUri = connector.getPublishableConnectString();
1:         factory = new ActiveMQConnectionFactory(connectionUri + "?trace=true&soTimeout=1000");
1:     }
1:     @After
1:     public void tearDown() throws Exception {
1:         broker.stop();
1:     }
1: 
0:     @Test
1:     public void testReconnectClient() throws Exception {
1:         for (int i = 0; i < 100; i++) {
1:             sendAndReceiveMessage(i);
1:         }
1:     }
1: 
1:     private void sendAndReceiveMessage(int i) throws Exception {
1:         Connection conn = factory.createConnection();
1:         Session sess = conn.createSession(false, Session.AUTO_ACKNOWLEDGE);
1:         conn.start();
1:         Destination dest = new ActiveMQQueue("test");
1:         MessageProducer producer = sess.createProducer(dest);
1:         MessageConsumer consumer = sess.createConsumer(dest);
1:         String messageText = "test " + i;
1:         try {
1:             producer.send(sess.createTextMessage(messageText));
1:             TextMessage msg = (TextMessage)consumer.receive(1000);
1:             assertEquals(messageText, msg.getText());
1:         } finally {
1:             producer.close();
1:             consumer.close();
1:             conn.close();
1:             sess.close();
1:         }
1:     }
author:Hiram R. Chirino
-------------------------------------------------------------------------------
commit:9a1ad8c
author:Claus Ibsen
-------------------------------------------------------------------------------
commit:3b4aadc
/////////////////////////////////////////////////////////////////////////
author:Bosanac Dejan
-------------------------------------------------------------------------------
commit:8bf987b
/////////////////////////////////////////////////////////////////////////
1:         System.setProperty("javax.net.ssl.trustStore", "src/test/resources/client.keystore");
1:         System.setProperty("javax.net.ssl.trustStorePassword", "password");
1:         System.setProperty("javax.net.ssl.trustStoreType", "jks");
1:         System.setProperty("javax.net.ssl.keyStore", "src/test/resources/server.keystore");
1:         System.setProperty("javax.net.ssl.keyStorePassword", "password");
1:         System.setProperty("javax.net.ssl.keyStoreType", "jks");
1: 
0: 		broker.addConnector("https://localhost:61666?trace=true");
0: 		factory = new ActiveMQConnectionFactory("https://localhost:61666?trace=true&soTimeout=1000");
commit:7310949
/////////////////////////////////////////////////////////////////////////
1: /**
1:  * Licensed to the Apache Software Foundation (ASF) under one or more
1:  * contributor license agreements.  See the NOTICE file distributed with
1:  * this work for additional information regarding copyright ownership.
1:  * The ASF licenses this file to You under the Apache License, Version 2.0
1:  * (the "License"); you may not use this file except in compliance with
1:  * the License.  You may obtain a copy of the License at
1:  *
1:  *      http://www.apache.org/licenses/LICENSE-2.0
1:  *
1:  * Unless required by applicable law or agreed to in writing, software
1:  * distributed under the License is distributed on an "AS IS" BASIS,
1:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:  * See the License for the specific language governing permissions and
1:  * limitations under the License.
1:  */
commit:09bae42
/////////////////////////////////////////////////////////////////////////
1: package org.apache.activemq.transport.http;
1: 
1: import javax.jms.Connection;
1: import javax.jms.Destination;
1: import javax.jms.MessageConsumer;
1: import javax.jms.MessageProducer;
1: import javax.jms.Session;
1: import javax.jms.TextMessage;
1: 
0: import junit.framework.TestCase;
1: 
1: import org.apache.activemq.ActiveMQConnectionFactory;
1: import org.apache.activemq.broker.BrokerService;
1: import org.apache.activemq.command.ActiveMQQueue;
1: 
0: public class HttpClientReconnectTest extends TestCase {
1: 	
0: 	BrokerService broker;
0: 	ActiveMQConnectionFactory factory;
1: 
0: 	protected void setUp() throws Exception {
0: 		broker = new BrokerService();
0: 		broker.addConnector("http://localhost:61666?trace=true");
0: 		broker.setPersistent(false);
0: 		broker.setUseJmx(false);
0: 		broker.deleteAllMessages();
0: 		broker.start();
0: 		factory = new ActiveMQConnectionFactory("http://localhost:61666?trace=true");
1: 	}
1: 
0: 	protected void tearDown() throws Exception {
0: 		broker.stop();
1: 	}
1: 	
0: 	public void testReconnectClient() throws Exception {
0: 		for (int i = 0; i < 100; i++) {
0: 			sendAndReceiveMessage(i);
1: 		}
1: 	}
1: 	
0: 	private void sendAndReceiveMessage(int i) throws Exception {
0: 		Connection conn = factory.createConnection();
0: 		Session sess = conn.createSession(false, Session.AUTO_ACKNOWLEDGE);
0: 		conn.start();
0: 		Destination dest = new ActiveMQQueue("test");
0: 		MessageProducer producer = sess.createProducer(dest);
0: 		MessageConsumer consumer = sess.createConsumer(dest);
0: 		String messageText = "test " + i;
0: 		try {
0: 			producer.send(sess.createTextMessage(messageText));
0: 			TextMessage msg = (TextMessage)consumer.receive(1000);
0: 			assertEquals(messageText, msg.getText());
0: 		} finally {
0: 			producer.close();
0: 			consumer.close();
0: 			conn.close();
0: 			sess.close();
1: 		}
1: 	}
1: 	
1: 	
1: 
1: }
============================================================================