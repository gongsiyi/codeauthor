1:ee4c8ee: /**
1:ee4c8ee:  * Licensed to the Apache Software Foundation (ASF) under one or more
1:ee4c8ee:  * contributor license agreements.  See the NOTICE file distributed with
1:ee4c8ee:  * this work for additional information regarding copyright ownership.
1:ee4c8ee:  * The ASF licenses this file to You under the Apache License, Version 2.0
1:ee4c8ee:  * (the "License"); you may not use this file except in compliance with
1:ee4c8ee:  * the License.  You may obtain a copy of the License at
1:ee4c8ee:  *
1:ee4c8ee:  *      http://www.apache.org/licenses/LICENSE-2.0
1:ee4c8ee:  *
1:ee4c8ee:  * Unless required by applicable law or agreed to in writing, software
1:ee4c8ee:  * distributed under the License is distributed on an "AS IS" BASIS,
1:ee4c8ee:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:ee4c8ee:  * See the License for the specific language governing permissions and
1:ee4c8ee:  * limitations under the License.
1:ee4c8ee:  */
1:ee4c8ee: package org.apache.activemq.bugs;
14:ee4c8ee: 
1:73e8d10: import static org.junit.Assert.assertEquals;
1:73e8d10: import static org.junit.Assert.assertNull;
1:73e8d10: import static org.junit.Assert.fail;
1:73e8d10: 
1:ee4c8ee: import java.net.URI;
1:ee4c8ee: import java.util.ArrayList;
1:ee4c8ee: import java.util.Iterator;
1:ee4c8ee: import java.util.concurrent.TimeUnit;
1:ee4c8ee: import java.util.concurrent.atomic.AtomicInteger;
1:73e8d10: 
1:3b4aadc: import javax.jms.Connection;
1:3b4aadc: import javax.jms.DeliveryMode;
1:3b4aadc: import javax.jms.Destination;
1:3b4aadc: import javax.jms.JMSException;
1:3b4aadc: import javax.jms.Message;
1:3b4aadc: import javax.jms.MessageConsumer;
1:3b4aadc: import javax.jms.MessageProducer;
1:3b4aadc: import javax.jms.Session;
1:ee4c8ee: 
1:ee4c8ee: import org.apache.activemq.ActiveMQConnectionFactory;
1:ee4c8ee: import org.apache.activemq.advisory.ConsumerEvent;
1:ee4c8ee: import org.apache.activemq.advisory.ConsumerEventSource;
1:ee4c8ee: import org.apache.activemq.advisory.ConsumerListener;
1:ee4c8ee: import org.apache.activemq.broker.BrokerFactory;
1:ee4c8ee: import org.apache.activemq.broker.BrokerService;
1:ee4c8ee: import org.apache.activemq.command.ActiveMQQueue;
1:358ace2: import org.apache.activemq.transport.http.WaitForJettyListener;
1:73e8d10: import org.junit.After;
1:73e8d10: import org.junit.Before;
1:73e8d10: import org.junit.Rule;
1:73e8d10: import org.junit.Test;
1:73e8d10: import org.junit.rules.TestName;
1:8bf987b: import org.slf4j.Logger;
1:8bf987b: import org.slf4j.LoggerFactory;
1:ee4c8ee: 
1:73e8d10: public class AMQ2764Test {
1:ee4c8ee: 
1:8bf987b:     private static final Logger LOG = LoggerFactory.getLogger(AMQ2764Test.class);
1:ee4c8ee: 
1:73e8d10:     @Rule public TestName name = new TestName();
1:73e8d10: 
1:ee4c8ee:     private BrokerService brokerOne;
1:ee4c8ee:     private BrokerService brokerTwo;
1:ee4c8ee:     private Destination destination;
1:73e8d10:     private final ArrayList<Connection> connections = new ArrayList<Connection>();
1:f51c4cc: 
1:73e8d10:     @Test(timeout = 60000)
1:f51c4cc:     public void testInactivityMonitor() throws Exception {
1:f51c4cc: 
1:f51c4cc:         startBrokerTwo();
1:f51c4cc:         brokerTwo.waitUntilStarted();
1:f51c4cc: 
1:f51c4cc:         startBrokerOne();
1:f51c4cc:         brokerOne.waitUntilStarted();
1:f51c4cc: 
1:f51c4cc:         ActiveMQConnectionFactory secondProducerConnectionFactory = createBrokerTwoHttpConnectionFactory();
1:f51c4cc:         ActiveMQConnectionFactory consumerConnectionFactory = createBrokerOneHttpConnectionFactory();
1:f51c4cc: 
1:f51c4cc:         MessageConsumer consumer = createConsumer(consumerConnectionFactory);
1:f51c4cc:         AtomicInteger counter = createConsumerCounter(consumerConnectionFactory);
1:f51c4cc:         waitForConsumerToArrive(counter);
1:f51c4cc: 
1:f51c4cc:         Connection connection = secondProducerConnectionFactory.createConnection();
1:f51c4cc:         Session session = connection.createSession(false, Session.AUTO_ACKNOWLEDGE);
1:f51c4cc:         MessageProducer producer = session.createProducer(destination);
1:f51c4cc:         producer.setDeliveryMode(DeliveryMode.NON_PERSISTENT);
1:f51c4cc: 
1:73e8d10:         final int expectedMessagesReceived = 1000;
1:f51c4cc: 
1:73e8d10:         for (int i = 1; i <= expectedMessagesReceived; i++) {
1:f51c4cc:             Message message = session.createMessage();
1:73e8d10:             producer.send(message);
1:73e8d10:             if (i % 200 == 0) {
1:73e8d10:                 LOG.info("sent message " + i);
1:73e8d10:             }
1:f51c4cc:         }
1:f51c4cc: 
1:73e8d10:         for (int i = 1; i <= expectedMessagesReceived; i++) {
1:f51c4cc:             Message message = consumer.receive(2000);
1:f51c4cc:             if (message == null) {
1:f51c4cc:                 fail("Didn't receive a message");
1:f51c4cc:             }
1:73e8d10:             if (i % 200 == 0) {
1:73e8d10:                 LOG.info("received message " + i);
1:73e8d10:             }
1:f51c4cc:         }
1:f51c4cc:     }
1:f51c4cc: 
1:73e8d10:     @Test(timeout = 60000)
1:ee4c8ee:     public void testBrokerRestart() throws Exception {
1:ee4c8ee:         startBrokerTwo();
1:73e8d10:         brokerTwo.waitUntilStarted();
1:f51c4cc: 
1:a332127:         startBrokerOne();
1:a332127:         brokerOne.waitUntilStarted();
1:a332127: 
1:ee4c8ee:         ActiveMQConnectionFactory producerConnectionFactory = createBrokerOneConnectionFactory();
1:ee4c8ee:         ActiveMQConnectionFactory secondProducerConnectionFactory = createBrokerTwoConnectionFactory();
1:ee4c8ee:         ActiveMQConnectionFactory consumerConnectionFactory = createBrokerOneConnectionFactory();
1:a332127: 
1:ee4c8ee:         MessageConsumer consumer = createConsumer(consumerConnectionFactory);
1:ee4c8ee:         AtomicInteger counter = createConsumerCounter(consumerConnectionFactory);
1:ee4c8ee:         waitForConsumerToArrive(counter);
1:ee4c8ee: 
1:ee4c8ee:         final int expectedMessagesReceived = 25;
1:ee4c8ee:         int actualMessagesReceived = doSendMessage(expectedMessagesReceived, consumer, producerConnectionFactory);
1:ee4c8ee:         assertEquals("Didn't receive the right amount of messages directly connected", expectedMessagesReceived, actualMessagesReceived);
1:73e8d10:         assertNull("Had extra messages", consumer.receiveNoWait());
1:ee4c8ee: 
1:ee4c8ee:         actualMessagesReceived = doSendMessage(expectedMessagesReceived, consumer, secondProducerConnectionFactory);
1:ee4c8ee:         assertEquals("Didn't receive the right amount of messages via network", expectedMessagesReceived, actualMessagesReceived);
1:73e8d10:         assertNull("Had extra messages", consumer.receiveNoWait());
1:ee4c8ee: 
1:ee4c8ee:         LOG.info("Stopping broker one");
1:ee4c8ee:         stopBrokerOne();
1:ee4c8ee: 
1:ee4c8ee:         TimeUnit.SECONDS.sleep(1);
1:ee4c8ee:         LOG.info("Restarting broker");
2:ee4c8ee:         startBrokerOne();
1:ee4c8ee: 
1:ee4c8ee:         consumer = createConsumer(consumerConnectionFactory);
1:ee4c8ee:         counter = createConsumerCounter(consumerConnectionFactory);
1:ee4c8ee:         waitForConsumerToArrive(counter);
1:ee4c8ee: 
1:ee4c8ee:         actualMessagesReceived = doSendMessage(expectedMessagesReceived, consumer, secondProducerConnectionFactory);
1:ee4c8ee:         assertEquals("Didn't receive the right amount of messages via network after restart", expectedMessagesReceived, actualMessagesReceived);
1:73e8d10:         assertNull("Had extra messages", consumer.receiveNoWait());
1:ee4c8ee: 
1:ee4c8ee:         stopBrokerOne();
1:ee4c8ee:         stopBrokerTwo();
1:ee4c8ee:     }
1:ee4c8ee: 
1:ee4c8ee:     protected int doSendMessage(int expectedMessagesReceived, MessageConsumer consumer, ActiveMQConnectionFactory connectionFactory) throws Exception {
1:ee4c8ee:         int messagesReceived = 0;
1:73e8d10:         for (int i = 0; i < expectedMessagesReceived; i++) {
1:ffa396c:             sendMessage(connectionFactory);
1:ee4c8ee:             Message message = consumer.receive(5000);
1:73e8d10:             if (message != null) {
1:ee4c8ee:                 messagesReceived++;
1:ee4c8ee:             }
1:ee4c8ee:         }
1:ee4c8ee:         return messagesReceived;
1:ee4c8ee:     }
1:f51c4cc: 
1:ee4c8ee:     protected String sendMessage(ActiveMQConnectionFactory connectionFactory) throws JMSException {
1:ee4c8ee:         Connection connection = null;
1:ee4c8ee:         try {
1:ee4c8ee:             connection = connectionFactory.createConnection();
1:ee4c8ee:             Session session = connection.createSession(false, Session.AUTO_ACKNOWLEDGE);
1:ee4c8ee:             MessageProducer producer = session.createProducer(destination);
1:ee4c8ee:             Message message = session.createMessage();
1:f51c4cc:             producer.send(message);
1:ee4c8ee:             return message.getJMSMessageID();
1:ee4c8ee:         } finally {
1:ee4c8ee:             try {
1:ee4c8ee:                 connection.close();
1:ee4c8ee:             } catch (Throwable ignore) {
1:ee4c8ee:             }
1:ee4c8ee:         }
1:ee4c8ee:     }
1:f51c4cc: 
1:ee4c8ee:     protected BrokerService createFirstBroker() throws Exception {
1:ee4c8ee:         return BrokerFactory.createBroker(new URI("xbean:org/apache/activemq/bugs/amq2764/reconnect-broker1.xml"));
1:ee4c8ee:     }
1:ee4c8ee: 
1:ee4c8ee:     protected BrokerService createSecondBroker() throws Exception {
1:ee4c8ee:         return BrokerFactory.createBroker(new URI("xbean:org/apache/activemq/bugs/amq2764/reconnect-broker2.xml"));
1:ee4c8ee:     }
1:73e8d10: 
1:ee4c8ee:     protected ActiveMQConnectionFactory createBrokerOneConnectionFactory() {
1:73e8d10:         return new ActiveMQConnectionFactory("vm://broker1?create=false");
1:ee4c8ee:     }
1:ee4c8ee: 
1:ee4c8ee:     protected ActiveMQConnectionFactory createBrokerTwoConnectionFactory() {
1:73e8d10:         return new ActiveMQConnectionFactory("vm://broker2?create=false");
1:ee4c8ee:     }
1:ee4c8ee: 
1:f51c4cc:     protected ActiveMQConnectionFactory createBrokerOneHttpConnectionFactory() {
1:f51c4cc:         return new ActiveMQConnectionFactory("http://localhost:61616");
1:f51c4cc:     }
1:f51c4cc: 
1:f51c4cc:     protected ActiveMQConnectionFactory createBrokerTwoHttpConnectionFactory() {
1:f51c4cc:         return new ActiveMQConnectionFactory("http://localhost:61617");
1:f51c4cc:     }
1:f51c4cc: 
1:73e8d10:     @Before
1:73e8d10:     public void setUp() throws Exception {
1:73e8d10:         LOG.info("===== Starting test {} ================", getTestName());
1:ee4c8ee:         destination = new ActiveMQQueue("RECONNECT.TEST.QUEUE");
1:ee4c8ee:     }
1:ee4c8ee: 
1:73e8d10:     @After
1:73e8d10:     public void tearDown() throws Exception {
1:ee4c8ee:         disposeConsumerConnections();
1:73e8d10:         Thread.sleep(10);
1:ee4c8ee:         try {
1:ee4c8ee:             stopBrokerOne();
1:ee4c8ee:         } catch (Throwable e) {
1:ee4c8ee:         }
1:ee4c8ee:         try {
1:ee4c8ee:             stopBrokerTwo();
1:ee4c8ee:         } catch (Throwable e) {
1:ee4c8ee:         }
1:73e8d10: 
1:73e8d10:         LOG.info("===== Finished test {} ================", getTestName());
1:73e8d10:     }
1:73e8d10: 
1:73e8d10:     protected String getTestName() {
1:73e8d10:         return name.getMethodName();
1:ee4c8ee:     }
1:ee4c8ee: 
1:ee4c8ee:     protected void disposeConsumerConnections() {
1:ee4c8ee:         for (Iterator<Connection> iter = connections.iterator(); iter.hasNext();) {
1:ee4c8ee:             Connection connection = iter.next();
1:ee4c8ee:             try {
1:ee4c8ee:                 connection.close();
1:ee4c8ee:             } catch (Throwable ignore) {
1:ee4c8ee:             }
1:ee4c8ee:         }
1:ee4c8ee:     }
1:ee4c8ee: 
1:ee4c8ee:     protected void startBrokerOne() throws Exception {
1:ee4c8ee:         if (brokerOne == null) {
1:ee4c8ee:             brokerOne = createFirstBroker();
1:ee4c8ee:             brokerOne.start();
1:358ace2:             brokerOne.waitUntilStarted();
1:358ace2:             WaitForJettyListener.waitForJettySocketToAccept("http://localhost:61616");
1:ee4c8ee:         }
1:ee4c8ee:     }
1:ee4c8ee: 
1:ee4c8ee:     protected void stopBrokerOne() throws Exception {
1:ee4c8ee:         if (brokerOne != null) {
1:ee4c8ee:             brokerOne.stop();
1:ee4c8ee:             brokerOne = null;
1:ee4c8ee:         }
1:ee4c8ee:     }
1:ee4c8ee: 
1:ee4c8ee:     protected void startBrokerTwo() throws Exception {
1:ee4c8ee:         if (brokerTwo == null) {
1:ee4c8ee:             brokerTwo = createSecondBroker();
1:ee4c8ee:             brokerTwo.start();
1:358ace2:             brokerTwo.waitUntilStarted();
1:358ace2:             WaitForJettyListener.waitForJettySocketToAccept("http://localhost:61617");
1:ee4c8ee:         }
1:ee4c8ee:     }
1:ee4c8ee: 
1:ee4c8ee:     protected void stopBrokerTwo() throws Exception {
1:ee4c8ee:         if (brokerTwo != null) {
1:ee4c8ee:             brokerTwo.stop();
1:ee4c8ee:             brokerTwo = null;
1:ee4c8ee:         }
1:ee4c8ee:     }
1:ee4c8ee: 
1:ee4c8ee:     protected MessageConsumer createConsumer(ActiveMQConnectionFactory consumerConnectionFactory) throws JMSException {
1:ee4c8ee:         Connection connection = consumerConnectionFactory.createConnection();
1:ee4c8ee:         connections.add(connection);
1:ee4c8ee:         connection.start();
1:ee4c8ee: 
1:ee4c8ee:         Session session = connection.createSession(false, Session.AUTO_ACKNOWLEDGE);
1:ee4c8ee:         return session.createConsumer(destination);
1:ee4c8ee:     }
1:ee4c8ee: 
1:ee4c8ee:     protected AtomicInteger createConsumerCounter(ActiveMQConnectionFactory cf) throws Exception {
1:ee4c8ee:         final AtomicInteger rc = new AtomicInteger(0);
1:ee4c8ee:         Connection connection = cf.createConnection();
1:ee4c8ee:         connections.add(connection);
1:ee4c8ee:         connection.start();
1:ee4c8ee: 
1:ee4c8ee:         ConsumerEventSource source = new ConsumerEventSource(connection, destination);
1:ee4c8ee:         source.setConsumerListener(new ConsumerListener() {
1:73e8d10:             @Override
1:ee4c8ee:             public void onConsumerEvent(ConsumerEvent event) {
1:ee4c8ee:                 rc.set(event.getConsumerCount());
1:ee4c8ee:             }
1:ee4c8ee:         });
1:ee4c8ee:         source.start();
1:ee4c8ee: 
1:ee4c8ee:         return rc;
1:ee4c8ee:     }
1:ee4c8ee: 
1:ee4c8ee:     protected void waitForConsumerToArrive(AtomicInteger consumerCounter) throws InterruptedException {
1:73e8d10:         for (int i = 0; i < 200; i++) {
1:ee4c8ee:             if (consumerCounter.get() > 0) {
1:ee4c8ee:                 return;
1:ee4c8ee:             }
1:73e8d10:             Thread.sleep(50);
1:ee4c8ee:         }
1:73e8d10: 
1:ee4c8ee:         fail("The consumer did not arrive.");
1:ee4c8ee:     }
1:ee4c8ee: 
1:ee4c8ee:     protected void waitForConsumerToLeave(AtomicInteger consumerCounter) throws InterruptedException {
1:73e8d10:         for (int i = 0; i < 200; i++) {
1:ee4c8ee:             if (consumerCounter.get() == 0) {
1:ee4c8ee:                 return;
1:ee4c8ee:             }
1:73e8d10:             Thread.sleep(50);
1:ee4c8ee:         }
1:73e8d10: 
1:ee4c8ee:         fail("The consumer did not leave.");
1:ee4c8ee:     }
1:ee4c8ee: }
============================================================================
author:Timothy Bish
-------------------------------------------------------------------------------
commit:73e8d10
/////////////////////////////////////////////////////////////////////////
1: import static org.junit.Assert.assertEquals;
1: import static org.junit.Assert.assertNull;
1: import static org.junit.Assert.fail;
1: 
1: 
/////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////
1: import org.junit.After;
1: import org.junit.Before;
1: import org.junit.Rule;
1: import org.junit.Test;
1: import org.junit.rules.TestName;
1: public class AMQ2764Test {
1:     @Rule public TestName name = new TestName();
1: 
1:     private final ArrayList<Connection> connections = new ArrayList<Connection>();
1:     @Test(timeout = 60000)
/////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////
1:         final int expectedMessagesReceived = 1000;
1:         for (int i = 1; i <= expectedMessagesReceived; i++) {
1:             producer.send(message);
1:             if (i % 200 == 0) {
1:                 LOG.info("sent message " + i);
1:             }
1:         for (int i = 1; i <= expectedMessagesReceived; i++) {
1:             if (i % 200 == 0) {
1:                 LOG.info("received message " + i);
1:             }
1:     @Test(timeout = 60000)
1:         brokerTwo.waitUntilStarted();
/////////////////////////////////////////////////////////////////////////
1:         assertNull("Had extra messages", consumer.receiveNoWait());
1:         assertNull("Had extra messages", consumer.receiveNoWait());
/////////////////////////////////////////////////////////////////////////
1:         assertNull("Had extra messages", consumer.receiveNoWait());
/////////////////////////////////////////////////////////////////////////
1:         for (int i = 0; i < expectedMessagesReceived; i++) {
1:             if (message != null) {
/////////////////////////////////////////////////////////////////////////
1: 
1:         return new ActiveMQConnectionFactory("vm://broker1?create=false");
1:         return new ActiveMQConnectionFactory("vm://broker2?create=false");
/////////////////////////////////////////////////////////////////////////
1:     @Before
1:     public void setUp() throws Exception {
1:         LOG.info("===== Starting test {} ================", getTestName());
1:     @After
1:     public void tearDown() throws Exception {
1:         Thread.sleep(10);
/////////////////////////////////////////////////////////////////////////
1: 
1:         LOG.info("===== Finished test {} ================", getTestName());
1:     }
1: 
1:     protected String getTestName() {
1:         return name.getMethodName();
/////////////////////////////////////////////////////////////////////////
1:             @Override
/////////////////////////////////////////////////////////////////////////
1:         for (int i = 0; i < 200; i++) {
1:             Thread.sleep(50);
1: 
1:         for (int i = 0; i < 200; i++) {
1:             Thread.sleep(50);
1: 
author:Daniel Kulp
-------------------------------------------------------------------------------
commit:ffa396c
/////////////////////////////////////////////////////////////////////////
1:             sendMessage(connectionFactory);
author:Hiram R. Chirino
-------------------------------------------------------------------------------
commit:9a1ad8c
author:Claus Ibsen
-------------------------------------------------------------------------------
commit:3b4aadc
/////////////////////////////////////////////////////////////////////////
1: import javax.jms.Connection;
1: import javax.jms.DeliveryMode;
1: import javax.jms.Destination;
1: import javax.jms.JMSException;
1: import javax.jms.Message;
1: import javax.jms.MessageConsumer;
1: import javax.jms.MessageProducer;
1: import javax.jms.Session;
author:Bosanac Dejan
-------------------------------------------------------------------------------
commit:358ace2
/////////////////////////////////////////////////////////////////////////
1: import org.apache.activemq.transport.http.WaitForJettyListener;
/////////////////////////////////////////////////////////////////////////
1:             brokerOne.waitUntilStarted();
1:             WaitForJettyListener.waitForJettySocketToAccept("http://localhost:61616");
/////////////////////////////////////////////////////////////////////////
1:             brokerTwo.waitUntilStarted();
1:             WaitForJettyListener.waitForJettySocketToAccept("http://localhost:61617");
commit:8bf987b
/////////////////////////////////////////////////////////////////////////
1: import org.slf4j.Logger;
1: import org.slf4j.LoggerFactory;
1:     private static final Logger LOG = LoggerFactory.getLogger(AMQ2764Test.class);
commit:f51c4cc
/////////////////////////////////////////////////////////////////////////
0: import javax.jms.*;
/////////////////////////////////////////////////////////////////////////
1:     public void testInactivityMonitor() throws Exception {
1: 
1:         startBrokerTwo();
1:         brokerTwo.waitUntilStarted();
1: 
1:         startBrokerOne();
1:         brokerOne.waitUntilStarted();
1: 
0:         Thread.sleep(2000);
1: 
1:         ActiveMQConnectionFactory secondProducerConnectionFactory = createBrokerTwoHttpConnectionFactory();
1:         ActiveMQConnectionFactory consumerConnectionFactory = createBrokerOneHttpConnectionFactory();
1: 
1:         MessageConsumer consumer = createConsumer(consumerConnectionFactory);
1:         AtomicInteger counter = createConsumerCounter(consumerConnectionFactory);
1:         waitForConsumerToArrive(counter);
1: 
1:         Connection connection = secondProducerConnectionFactory.createConnection();
1:         Session session = connection.createSession(false, Session.AUTO_ACKNOWLEDGE);
1:         MessageProducer producer = session.createProducer(destination);
1:         producer.setDeliveryMode(DeliveryMode.NON_PERSISTENT);
1: 
1: 
0:         final int expectedMessagesReceived = 2000;
1: 
0:         for (int i = 0; i < expectedMessagesReceived; i++) {
1:             Message message = session.createMessage();
1:             producer.send(message);            
0:             LOG.info("sent message " + i);
1:         }
1: 
0:         for (int i = 0; i < expectedMessagesReceived; i++) {
1:             Message message = consumer.receive(2000);
1:             if (message == null) {
1:                 fail("Didn't receive a message");
1:             }
0:             LOG.info("received message " + i);
1:         }
1: 
1: 
1:     }
1: 
/////////////////////////////////////////////////////////////////////////
1:     protected ActiveMQConnectionFactory createBrokerOneHttpConnectionFactory() {
1:         return new ActiveMQConnectionFactory("http://localhost:61616");
1:     }
1: 
1:     protected ActiveMQConnectionFactory createBrokerTwoHttpConnectionFactory() {
1:         return new ActiveMQConnectionFactory("http://localhost:61617");
1:     }
1: 
commit:a332127
/////////////////////////////////////////////////////////////////////////
0:         brokerTwo.waitUntilStarted();        
1: 
1:         startBrokerOne();
1:         brokerOne.waitUntilStarted();
1: 
author:Gary Tully
-------------------------------------------------------------------------------
commit:ee4c8ee
/////////////////////////////////////////////////////////////////////////
1: /**
1:  * Licensed to the Apache Software Foundation (ASF) under one or more
1:  * contributor license agreements.  See the NOTICE file distributed with
1:  * this work for additional information regarding copyright ownership.
1:  * The ASF licenses this file to You under the Apache License, Version 2.0
1:  * (the "License"); you may not use this file except in compliance with
1:  * the License.  You may obtain a copy of the License at
1:  *
1:  *      http://www.apache.org/licenses/LICENSE-2.0
1:  *
1:  * Unless required by applicable law or agreed to in writing, software
1:  * distributed under the License is distributed on an "AS IS" BASIS,
1:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:  * See the License for the specific language governing permissions and
1:  * limitations under the License.
1:  */
1: package org.apache.activemq.bugs;
1: 
1: import java.net.URI;
1: import java.util.ArrayList;
1: import java.util.Iterator;
1: import java.util.concurrent.TimeUnit;
1: import java.util.concurrent.atomic.AtomicInteger;
1: 
0: import javax.jms.Connection;
0: import javax.jms.Destination;
0: import javax.jms.JMSException;
0: import javax.jms.Message;
0: import javax.jms.MessageConsumer;
0: import javax.jms.MessageProducer;
0: import javax.jms.Session;
1: 
0: import junit.framework.TestCase;
1: import org.apache.activemq.ActiveMQConnectionFactory;
1: import org.apache.activemq.advisory.ConsumerEvent;
1: import org.apache.activemq.advisory.ConsumerEventSource;
1: import org.apache.activemq.advisory.ConsumerListener;
1: import org.apache.activemq.broker.BrokerFactory;
1: import org.apache.activemq.broker.BrokerService;
1: import org.apache.activemq.command.ActiveMQQueue;
0: import org.apache.commons.logging.Log;
0: import org.apache.commons.logging.LogFactory;
1: 
0: public class AMQ2764Test extends TestCase {
1: 
0:     private static final Log LOG = LogFactory.getLog(AMQ2764Test.class);
1: 
1:     private BrokerService brokerOne;
1:     private BrokerService brokerTwo;
1:     private Destination destination;
0:     private ArrayList<Connection> connections = new ArrayList<Connection>();
1: 
1:     public void testBrokerRestart() throws Exception {
1: 
1:         startBrokerOne();
0:         Thread.sleep(5000);
1:         startBrokerTwo();
0:         Thread.sleep(5000);
1: 
1:         ActiveMQConnectionFactory producerConnectionFactory = createBrokerOneConnectionFactory();
1:         ActiveMQConnectionFactory secondProducerConnectionFactory = createBrokerTwoConnectionFactory();
1:         ActiveMQConnectionFactory consumerConnectionFactory = createBrokerOneConnectionFactory();
1: 
1:         MessageConsumer consumer = createConsumer(consumerConnectionFactory);
1:         AtomicInteger counter = createConsumerCounter(consumerConnectionFactory);
1:         waitForConsumerToArrive(counter);
1: 
1:         final int expectedMessagesReceived = 25;
1:         int actualMessagesReceived = doSendMessage(expectedMessagesReceived, consumer, producerConnectionFactory);
1:         assertEquals("Didn't receive the right amount of messages directly connected", expectedMessagesReceived, actualMessagesReceived);
0:         assertNull( "Had extra messages", consumer.receiveNoWait());
1: 
1:         actualMessagesReceived = doSendMessage(expectedMessagesReceived, consumer, secondProducerConnectionFactory);
1:         assertEquals("Didn't receive the right amount of messages via network", expectedMessagesReceived, actualMessagesReceived);
0:         assertNull( "Had extra messages", consumer.receiveNoWait());
1: 
1:         LOG.info("Stopping broker one");
1:         stopBrokerOne();
1: 
1:         TimeUnit.SECONDS.sleep(1);
1:         LOG.info("Restarting broker");
1:         startBrokerOne();
1: 
1:         consumer = createConsumer(consumerConnectionFactory);
1:         counter = createConsumerCounter(consumerConnectionFactory);
1:         waitForConsumerToArrive(counter);
1: 
1:         actualMessagesReceived = doSendMessage(expectedMessagesReceived, consumer, secondProducerConnectionFactory);
1:         assertEquals("Didn't receive the right amount of messages via network after restart", expectedMessagesReceived, actualMessagesReceived);
0:         assertNull( "Had extra messages", consumer.receiveNoWait());
1: 
1:         stopBrokerOne();
1:         stopBrokerTwo();
1:     }
1: 
1:     protected int doSendMessage(int expectedMessagesReceived, MessageConsumer consumer, ActiveMQConnectionFactory connectionFactory) throws Exception {
1:         int messagesReceived = 0;
0:         for (int i=0; i<expectedMessagesReceived; i++) {
0:             String messageId = sendMessage(connectionFactory);
1:             Message message = consumer.receive(5000);
0:             if ( message!=null ) {
1:                 messagesReceived++;
1:             }
1:         }
1:         return messagesReceived;
1:     }
1: 
1:     protected String sendMessage(ActiveMQConnectionFactory connectionFactory) throws JMSException {
1:         Connection connection = null;
1:         try {
1:             connection = connectionFactory.createConnection();
1:             Session session = connection.createSession(false, Session.AUTO_ACKNOWLEDGE);
1:             MessageProducer producer = session.createProducer(destination);
1:             Message message = session.createMessage();
0:             producer.send(message);
1:             return message.getJMSMessageID();
1:         } finally {
1:             try {
1:                 connection.close();
1:             } catch (Throwable ignore) {
1:             }
1:         }
1:     }
1: 
1:     protected BrokerService createFirstBroker() throws Exception {
1:         return BrokerFactory.createBroker(new URI("xbean:org/apache/activemq/bugs/amq2764/reconnect-broker1.xml"));
1:     }
1: 
1:     protected BrokerService createSecondBroker() throws Exception {
1:         return BrokerFactory.createBroker(new URI("xbean:org/apache/activemq/bugs/amq2764/reconnect-broker2.xml"));
1:     }
1:     
1:     protected ActiveMQConnectionFactory createBrokerOneConnectionFactory() {
0:         return new ActiveMQConnectionFactory("vm://broker1");
1:     }
1: 
1:     protected ActiveMQConnectionFactory createBrokerTwoConnectionFactory() {
0:         return new ActiveMQConnectionFactory("vm://broker2");
1:     }
1: 
0:     protected void setUp() throws Exception {
1: 
0:         LOG.info("===============================================================================");
0:         LOG.info("Running Test Case: " + getName());
0:         LOG.info("===============================================================================");
1: 
1:         destination = new ActiveMQQueue("RECONNECT.TEST.QUEUE");
1: 
1:     }
1: 
0:     protected void tearDown() throws Exception {
1:         disposeConsumerConnections();
1:         try {
1:             stopBrokerOne();
1:         } catch (Throwable e) {
1:         }
1:         try {
1:             stopBrokerTwo();
1:         } catch (Throwable e) {
1:         }
1:     }
1: 
1:     protected void disposeConsumerConnections() {
1:         for (Iterator<Connection> iter = connections.iterator(); iter.hasNext();) {
1:             Connection connection = iter.next();
1:             try {
1:                 connection.close();
1:             } catch (Throwable ignore) {
1:             }
1:         }
1:     }
1: 
1:     protected void startBrokerOne() throws Exception {
1:         if (brokerOne == null) {
1:             brokerOne = createFirstBroker();
1:             brokerOne.start();
1:         }
1:     }
1: 
1:     protected void stopBrokerOne() throws Exception {
1:         if (brokerOne != null) {
1:             brokerOne.stop();
1:             brokerOne = null;
1:         }
1:     }
1: 
1:     protected void startBrokerTwo() throws Exception {
1:         if (brokerTwo == null) {
1:             brokerTwo = createSecondBroker();
1:             brokerTwo.start();
1:         }
1:     }
1: 
1:     protected void stopBrokerTwo() throws Exception {
1:         if (brokerTwo != null) {
1:             brokerTwo.stop();
1:             brokerTwo = null;
1:         }
1:     }
1: 
1:     protected MessageConsumer createConsumer(ActiveMQConnectionFactory consumerConnectionFactory) throws JMSException {
1:         Connection connection = consumerConnectionFactory.createConnection();
1:         connections.add(connection);
1:         connection.start();
1: 
1:         Session session = connection.createSession(false, Session.AUTO_ACKNOWLEDGE);
1:         return session.createConsumer(destination);
1:     }
1: 
1:     protected AtomicInteger createConsumerCounter(ActiveMQConnectionFactory cf) throws Exception {
1:         final AtomicInteger rc = new AtomicInteger(0);
1:         Connection connection = cf.createConnection();
1:         connections.add(connection);
1:         connection.start();
1: 
1:         ConsumerEventSource source = new ConsumerEventSource(connection, destination);
1:         source.setConsumerListener(new ConsumerListener() {
1:             public void onConsumerEvent(ConsumerEvent event) {
1:                 rc.set(event.getConsumerCount());
1:             }
1:         });
1:         source.start();
1: 
1:         return rc;
1:     }
1: 
1:     protected void waitForConsumerToArrive(AtomicInteger consumerCounter) throws InterruptedException {
0:         for (int i = 0; i < 100; i++) {
1:             if (consumerCounter.get() > 0) {
1:                 return;
1:             }
0:             Thread.sleep(100);
1:         }
1:         fail("The consumer did not arrive.");
1:     }
1: 
1:     protected void waitForConsumerToLeave(AtomicInteger consumerCounter) throws InterruptedException {
0:         for (int i = 0; i < 100; i++) {
1:             if (consumerCounter.get() == 0) {
1:                 return;
1:             }
0:             Thread.sleep(100);
1:         }
1:         fail("The consumer did not leave.");
1:     }
1: 
1: }
1: 
============================================================================