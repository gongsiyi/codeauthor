1:5f7a81f: /**
1:5f7a81f:  * Licensed to the Apache Software Foundation (ASF) under one or more
1:5f7a81f:  * contributor license agreements.  See the NOTICE file distributed with
1:5f7a81f:  * this work for additional information regarding copyright ownership.
1:5f7a81f:  * The ASF licenses this file to You under the Apache License, Version 2.0
1:5f7a81f:  * (the "License"); you may not use this file except in compliance with
1:5f7a81f:  * the License.  You may obtain a copy of the License at
1:5f7a81f:  *
1:5f7a81f:  *      http://www.apache.org/licenses/LICENSE-2.0
1:5f7a81f:  *
1:5f7a81f:  * Unless required by applicable law or agreed to in writing, software
1:5f7a81f:  * distributed under the License is distributed on an "AS IS" BASIS,
1:5f7a81f:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:5f7a81f:  * See the License for the specific language governing permissions and
1:5f7a81f:  * limitations under the License.
1:5f7a81f:  */
1:5f7a81f: package org.apache.activemq.command;
1:5f7a81f: 
1:5f7a81f: import static org.junit.Assert.assertNull;
1:5f7a81f: 
1:5f7a81f: import javax.jms.BytesMessage;
1:5f7a81f: import javax.jms.Connection;
1:5f7a81f: import javax.jms.JMSException;
1:5f7a81f: import javax.jms.Message;
1:5f7a81f: import javax.jms.MessageListener;
1:5f7a81f: import javax.jms.MessageProducer;
1:5f7a81f: import javax.jms.Session;
1:5f7a81f: 
1:5f7a81f: import org.apache.activemq.ActiveMQConnectionFactory;
1:5f7a81f: import org.apache.activemq.broker.BrokerService;
1:5f7a81f: import org.junit.Assert;
1:5f7a81f: import org.junit.Test;
1:5f7a81f: 
1:5f7a81f: /**
1:5f7a81f:  * AMQ-6142
1:5f7a81f:  *
1:5f7a81f:  * This tests that all messages will be properly decompressed when there
1:5f7a81f:  * are several consumers
1:5f7a81f:  *
1:5f7a81f:  */
1:5f7a81f: public class ActiveMQConcurrentDecompressionTest {
1:5f7a81f:     private volatile AssertionError assertionError;
1:5f7a81f: 
1:5f7a81f:     @Test
1:5f7a81f:     public void bytesMessageCorruption() throws Exception {
1:5f7a81f:         BrokerService brokerService = new BrokerService();
1:5f7a81f:         brokerService.setBrokerName("embedded");
1:5f7a81f:         brokerService.setPersistent(false);
1:5f7a81f:         brokerService.start();
1:5f7a81f: 
1:5f7a81f:         ActiveMQConnectionFactory connectionFactory = new ActiveMQConnectionFactory("vm://embedded");
1:5f7a81f:         connectionFactory.setUseCompression(true);
1:5f7a81f: 
1:5f7a81f:         Connection connection = connectionFactory.createConnection();
1:5f7a81f:         connection.start();
1:5f7a81f: 
1:5f7a81f:         for (int i = 0; i < 10; i++) {
1:5f7a81f:             Session mySession = connection.createSession(false,
1:5f7a81f:                     Session.AUTO_ACKNOWLEDGE);
1:5f7a81f:             mySession.createConsumer(mySession.createTopic("foo.bar"))
1:5f7a81f:                     .setMessageListener(new MessageListener() {
1:5f7a81f: 
1:5f7a81f:                         @Override
1:5f7a81f:                         public void onMessage(Message message) {
1:5f7a81f:                             try {
1:5f7a81f:                                 Assert.assertEquals(1l, ((ActiveMQBytesMessage) message).getBodyLength());
1:5f7a81f:                                 Assert.assertEquals("a".getBytes()[0],
1:5f7a81f:                                         ((ActiveMQBytesMessage) message).readByte());
1:5f7a81f:                             } catch (JMSException | Error e) {
1:5f7a81f:                                 assertionError = new AssertionError(
1:5f7a81f:                                         "Exception in thread", e);
1:5f7a81f:                             }
1:5f7a81f:                         }
1:5f7a81f:                     });
1:5f7a81f:         }
1:5f7a81f: 
1:5f7a81f:         Session producerSession = connection.createSession(false,
1:5f7a81f:                 Session.AUTO_ACKNOWLEDGE);
1:5f7a81f:         MessageProducer messageProducer = producerSession
1:5f7a81f:                 .createProducer(producerSession.createTopic("foo.bar"));
1:5f7a81f: 
1:5f7a81f:         for (int i = 0; i < 1000; i++) {
1:5f7a81f:             BytesMessage bytesMessage = producerSession.createBytesMessage();
1:5f7a81f:             bytesMessage.writeBytes("a".getBytes());
1:5f7a81f:             messageProducer.send(bytesMessage);
1:5f7a81f: 
1:5f7a81f:             if (assertionError != null) {
1:5f7a81f:                 throw assertionError;
1:5f7a81f:             }
1:5f7a81f:         }
1:5f7a81f: 
1:5f7a81f:         assertNull(assertionError);
1:5f7a81f:     }
1:5f7a81f: 
1:5f7a81f: }
============================================================================
author:Christopher L. Shannon (cshannon)
-------------------------------------------------------------------------------
commit:5f7a81f
/////////////////////////////////////////////////////////////////////////
1: /**
1:  * Licensed to the Apache Software Foundation (ASF) under one or more
1:  * contributor license agreements.  See the NOTICE file distributed with
1:  * this work for additional information regarding copyright ownership.
1:  * The ASF licenses this file to You under the Apache License, Version 2.0
1:  * (the "License"); you may not use this file except in compliance with
1:  * the License.  You may obtain a copy of the License at
1:  *
1:  *      http://www.apache.org/licenses/LICENSE-2.0
1:  *
1:  * Unless required by applicable law or agreed to in writing, software
1:  * distributed under the License is distributed on an "AS IS" BASIS,
1:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:  * See the License for the specific language governing permissions and
1:  * limitations under the License.
1:  */
1: package org.apache.activemq.command;
1: 
1: import static org.junit.Assert.assertNull;
1: 
1: import javax.jms.BytesMessage;
1: import javax.jms.Connection;
1: import javax.jms.JMSException;
1: import javax.jms.Message;
1: import javax.jms.MessageListener;
1: import javax.jms.MessageProducer;
1: import javax.jms.Session;
1: 
1: import org.apache.activemq.ActiveMQConnectionFactory;
1: import org.apache.activemq.broker.BrokerService;
1: import org.junit.Assert;
1: import org.junit.Test;
1: 
1: /**
1:  * AMQ-6142
1:  *
1:  * This tests that all messages will be properly decompressed when there
1:  * are several consumers
1:  *
1:  */
1: public class ActiveMQConcurrentDecompressionTest {
1:     private volatile AssertionError assertionError;
1: 
1:     @Test
1:     public void bytesMessageCorruption() throws Exception {
1:         BrokerService brokerService = new BrokerService();
1:         brokerService.setBrokerName("embedded");
1:         brokerService.setPersistent(false);
1:         brokerService.start();
1: 
1:         ActiveMQConnectionFactory connectionFactory = new ActiveMQConnectionFactory("vm://embedded");
1:         connectionFactory.setUseCompression(true);
1: 
1:         Connection connection = connectionFactory.createConnection();
1:         connection.start();
1: 
1:         for (int i = 0; i < 10; i++) {
1:             Session mySession = connection.createSession(false,
1:                     Session.AUTO_ACKNOWLEDGE);
1:             mySession.createConsumer(mySession.createTopic("foo.bar"))
1:                     .setMessageListener(new MessageListener() {
1: 
1:                         @Override
1:                         public void onMessage(Message message) {
1:                             try {
1:                                 Assert.assertEquals(1l, ((ActiveMQBytesMessage) message).getBodyLength());
1:                                 Assert.assertEquals("a".getBytes()[0],
1:                                         ((ActiveMQBytesMessage) message).readByte());
1:                             } catch (JMSException | Error e) {
1:                                 assertionError = new AssertionError(
1:                                         "Exception in thread", e);
1:                             }
1:                         }
1:                     });
1:         }
1: 
1:         Session producerSession = connection.createSession(false,
1:                 Session.AUTO_ACKNOWLEDGE);
1:         MessageProducer messageProducer = producerSession
1:                 .createProducer(producerSession.createTopic("foo.bar"));
1: 
1:         for (int i = 0; i < 1000; i++) {
1:             BytesMessage bytesMessage = producerSession.createBytesMessage();
1:             bytesMessage.writeBytes("a".getBytes());
1:             messageProducer.send(bytesMessage);
1: 
1:             if (assertionError != null) {
1:                 throw assertionError;
1:             }
1:         }
1: 
1:         assertNull(assertionError);
1:     }
1: 
1: }
============================================================================