2:d29ca2a: /**
1:57b4941:  * Licensed to the Apache Software Foundation (ASF) under one or more
1:57b4941:  * contributor license agreements.  See the NOTICE file distributed with
1:57b4941:  * this work for additional information regarding copyright ownership.
1:57b4941:  * The ASF licenses this file to You under the Apache License, Version 2.0
1:57b4941:  * (the "License"); you may not use this file except in compliance with
1:57b4941:  * the License.  You may obtain a copy of the License at
5:d29ca2a:  *
1:230a86c:  *      http://www.apache.org/licenses/LICENSE-2.0
1:b0c2a40:  *
1:d29ca2a:  * Unless required by applicable law or agreed to in writing, software
1:d29ca2a:  * distributed under the License is distributed on an "AS IS" BASIS,
1:d29ca2a:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:d29ca2a:  * See the License for the specific language governing permissions and
1:d29ca2a:  * limitations under the License.
2:d29ca2a:  */
1:d29ca2a: package org.apache.activemq.security;
1:f812e34: 
1:933eb2f: import java.security.Principal;
1:67ccfca: import java.security.cert.X509Certificate;
1:d29ca2a: import java.util.Set;
15:d29ca2a: 
1:d29ca2a: import javax.security.auth.Subject;
1:d29ca2a: import javax.security.auth.login.LoginContext;
1:d29ca2a: 
1:d29ca2a: import org.apache.activemq.broker.Broker;
1:d29ca2a: import org.apache.activemq.broker.ConnectionContext;
1:d29ca2a: import org.apache.activemq.command.ConnectionInfo;
1:648826b: import org.apache.activemq.jaas.JassCredentialCallbackHandler;
1:4f945cf: 
1:d29ca2a: /**
1:d29ca2a:  * Logs a user in using JAAS.
1:8b3761c:  *
1:8b3761c:  *
1:d29ca2a:  */
1:8b3761c: public class JaasAuthenticationBroker extends AbstractAuthenticationBroker {
1:d29ca2a: 
1:d29ca2a:     private final String jassConfiguration;
1:d29ca2a: 
1:d29ca2a:     public JaasAuthenticationBroker(Broker next, String jassConfiguration) {
1:d29ca2a:         super(next);
1:d29ca2a:         this.jassConfiguration = jassConfiguration;
6:d29ca2a:     }
1:f812e34: 
1:d29ca2a:     static class JaasSecurityContext extends SecurityContext {
1:f812e34: 
1:d29ca2a:         private final Subject subject;
1:f812e34: 
1:d29ca2a:         public JaasSecurityContext(String userName, Subject subject) {
1:d29ca2a:             super(userName);
1:d29ca2a:             this.subject = subject;
1:d29ca2a:         }
1:f812e34: 
1:8b3761c:         @Override
1:933eb2f:         public Set<Principal> getPrincipals() {
1:d29ca2a:             return subject.getPrincipals();
1:d29ca2a:         }
1:d29ca2a:     }
1:f812e34: 
1:8b3761c:     @Override
1:7f5213b:     public void addConnection(ConnectionContext context, ConnectionInfo info) throws Exception {
1:f812e34:         if (context.getSecurityContext() == null) {
1:67ccfca:             // Set the TCCL since it seems JAAS needs it to find the login module classes.
1:d29ca2a:             ClassLoader original = Thread.currentThread().getContextClassLoader();
1:d29ca2a:             Thread.currentThread().setContextClassLoader(JaasAuthenticationBroker.class.getClassLoader());
1:a156261:             SecurityContext securityContext = null;
1:67ccfca:             try {
1:a156261:                 securityContext = authenticate(info.getUserName(), info.getPassword(), null);
1:a156261:                 context.setSecurityContext(securityContext);
1:a156261:                 securityContexts.add(securityContext);
1:a156261:                 super.addConnection(context, info);
1:a156261:             } catch (Exception error) {
1:a156261:                 if (securityContext != null) {
1:a156261:                     securityContexts.remove(securityContext);
1:a156261:                 }
1:a156261:                 context.setSecurityContext(null);
1:a156261:                 throw error;
1:d29ca2a:             } finally {
1:d29ca2a:                 Thread.currentThread().setContextClassLoader(original);
1:d29ca2a:             }
1:a156261:         } else {
1:a156261:             super.addConnection(context, info);
1:d29ca2a:         }
1:d29ca2a:     }
1:67ccfca: 
1:67ccfca:     @Override
1:67ccfca:     public SecurityContext authenticate(String username, String password, X509Certificate[] certificates) throws SecurityException {
1:67ccfca:         SecurityContext result = null;
1:67ccfca:         JassCredentialCallbackHandler callback = new JassCredentialCallbackHandler(username, password);
1:67ccfca:         try {
1:67ccfca:             LoginContext lc = new LoginContext(jassConfiguration, callback);
1:67ccfca:             lc.login();
1:67ccfca:             Subject subject = lc.getSubject();
1:67ccfca: 
1:67ccfca:             result = new JaasSecurityContext(username, subject);
1:67ccfca:         } catch (Exception ex) {
1:67ccfca:             throw new SecurityException("User name [" + username + "] or password is invalid.", ex);
1:67ccfca:         }
1:67ccfca: 
1:67ccfca:         return result;
1:67ccfca:     }
1:d29ca2a: }
============================================================================
author:gtully
-------------------------------------------------------------------------------
commit:a156261
/////////////////////////////////////////////////////////////////////////
1:             SecurityContext securityContext = null;
1:                 securityContext = authenticate(info.getUserName(), info.getPassword(), null);
1:                 context.setSecurityContext(securityContext);
1:                 securityContexts.add(securityContext);
1:                 super.addConnection(context, info);
1:             } catch (Exception error) {
1:                 if (securityContext != null) {
1:                     securityContexts.remove(securityContext);
1:                 }
1:                 context.setSecurityContext(null);
1:                 throw error;
1:         } else {
1:             super.addConnection(context, info);
author:Timothy Bish
-------------------------------------------------------------------------------
commit:67ccfca
/////////////////////////////////////////////////////////////////////////
1: import java.security.cert.X509Certificate;
/////////////////////////////////////////////////////////////////////////
1:             // Set the TCCL since it seems JAAS needs it to find the login module classes.
1:             try {
0:                 SecurityContext s = authenticate(info.getUserName(), info.getPassword(), null);
0:                 context.setSecurityContext(s);
0:                 securityContexts.add(s);
1: 
1:     @Override
1:     public SecurityContext authenticate(String username, String password, X509Certificate[] certificates) throws SecurityException {
1:         SecurityContext result = null;
1:         JassCredentialCallbackHandler callback = new JassCredentialCallbackHandler(username, password);
1:         try {
1:             LoginContext lc = new LoginContext(jassConfiguration, callback);
1:             lc.login();
1:             Subject subject = lc.getSubject();
1: 
1:             result = new JaasSecurityContext(username, subject);
1:         } catch (Exception ex) {
1:             throw new SecurityException("User name [" + username + "] or password is invalid.", ex);
1:         }
1: 
1:         return result;
1:     }
author:Timothy A. Bish
-------------------------------------------------------------------------------
commit:8b3761c
/////////////////////////////////////////////////////////////////////////
1:  *
1:  *
1: public class JaasAuthenticationBroker extends AbstractAuthenticationBroker {
/////////////////////////////////////////////////////////////////////////
1:         @Override
1:     @Override
/////////////////////////////////////////////////////////////////////////
commit:2a0b489
/////////////////////////////////////////////////////////////////////////
0:                     throw (SecurityException)new SecurityException("User name [" + info.getUserName() + "] or password is invalid.")
author:Hiram R. Chirino
-------------------------------------------------------------------------------
commit:58aca86
commit:b0c2a40
/////////////////////////////////////////////////////////////////////////
1:  * 
commit:933eb2f
/////////////////////////////////////////////////////////////////////////
1: import java.security.Principal;
/////////////////////////////////////////////////////////////////////////
0:     private final CopyOnWriteArrayList<SecurityContext> securityContexts = new CopyOnWriteArrayList<SecurityContext>();
/////////////////////////////////////////////////////////////////////////
1:         public Set<Principal> getPrincipals() {
/////////////////////////////////////////////////////////////////////////
0:         for (Iterator<SecurityContext> iter = securityContexts.iterator(); iter.hasNext();) {
0:             SecurityContext sc = iter.next();
commit:74a7a8b
/////////////////////////////////////////////////////////////////////////
0: import java.util.concurrent.CopyOnWriteArrayList;
/////////////////////////////////////////////////////////////////////////
commit:f812e34
/////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////
1: 
/////////////////////////////////////////////////////////////////////////
1: 
1: 
1:         if (context.getSecurityContext() == null) {
0:             // Set the TCCL since it seems JAAS needs it to find the login
0:             // module classes.
0:                     JassCredentialCallbackHandler callback = new JassCredentialCallbackHandler(info
0:                         .getUserName(), info.getPassword());
1: 
0:                     throw (SecurityException)new SecurityException("User name or password is invalid.")
0:                         .initCause(e);
/////////////////////////////////////////////////////////////////////////
1: 
0:     public void removeConnection(ConnectionContext context, ConnectionInfo info, Throwable error)
0:         throws Exception {
0:         if (securityContexts.remove(context.getSecurityContext())) {
1: 
0:      * Previously logged in users may no longer have the same access anymore.
0:      * Refresh all the logged into users.
0:             SecurityContext sc = (SecurityContext)iter.next();
commit:230a86c
/////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////
1:  *      http://www.apache.org/licenses/LICENSE-2.0
commit:86cbdfd
/////////////////////////////////////////////////////////////////////////
0: import java.util.concurrent.CopyOnWriteArrayList;
commit:648826b
/////////////////////////////////////////////////////////////////////////
1: import org.apache.activemq.jaas.JassCredentialCallbackHandler;
/////////////////////////////////////////////////////////////////////////
0:                     JassCredentialCallbackHandler callback = new JassCredentialCallbackHandler(info.getUserName(), info.getPassword());
commit:4f945cf
/////////////////////////////////////////////////////////////////////////
0: import org.apache.activemq.jaas.JassCredentialCallback;
1: 
commit:57b4941
/////////////////////////////////////////////////////////////////////////
1:  * Licensed to the Apache Software Foundation (ASF) under one or more
1:  * contributor license agreements.  See the NOTICE file distributed with
1:  * this work for additional information regarding copyright ownership.
1:  * The ASF licenses this file to You under the Apache License, Version 2.0
1:  * (the "License"); you may not use this file except in compliance with
1:  * the License.  You may obtain a copy of the License at
commit:7f5213b
/////////////////////////////////////////////////////////////////////////
1:     public void addConnection(ConnectionContext context, ConnectionInfo info) throws Exception {
/////////////////////////////////////////////////////////////////////////
0:     public void removeConnection(ConnectionContext context, ConnectionInfo info, Throwable error) throws Exception {
commit:48b4869
/////////////////////////////////////////////////////////////////////////
0:  * Copyright 2005-2006 The Apache Software Foundation
commit:d29ca2a
/////////////////////////////////////////////////////////////////////////
1: /**
1:  *
0:  * Copyright 2004 The Apache Software Foundation
1:  *
0:  * Licensed under the Apache License, Version 2.0 (the "License");
0:  * you may not use this file except in compliance with the License.
0:  * You may obtain a copy of the License at
1:  *
0:  * http://www.apache.org/licenses/LICENSE-2.0
1:  *
1:  * Unless required by applicable law or agreed to in writing, software
1:  * distributed under the License is distributed on an "AS IS" BASIS,
1:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:  * See the License for the specific language governing permissions and
1:  * limitations under the License.
1:  */
1: package org.apache.activemq.security;
1: 
0: import java.util.Iterator;
1: import java.util.Set;
1: 
1: import javax.security.auth.Subject;
1: import javax.security.auth.login.LoginContext;
1: 
1: import org.apache.activemq.broker.Broker;
0: import org.apache.activemq.broker.BrokerFilter;
1: import org.apache.activemq.broker.ConnectionContext;
1: import org.apache.activemq.command.ConnectionInfo;
1: 
0: import edu.emory.mathcs.backport.java.util.concurrent.CopyOnWriteArrayList;
1: 
1: 
1: /**
1:  * Logs a user in using JAAS.
1:  * 
0:  * @version $Revision$
1:  */
0: public class JaasAuthenticationBroker extends BrokerFilter {
1: 
1:     private final String jassConfiguration;
0:     private final CopyOnWriteArrayList securityContexts = new CopyOnWriteArrayList();
1: 
1:     public JaasAuthenticationBroker(Broker next, String jassConfiguration) {
1:         super(next);
1:         this.jassConfiguration = jassConfiguration;
1:     }
1:     
1:     static class JaasSecurityContext extends SecurityContext {
1: 
1:         private final Subject subject;
1: 
1:         public JaasSecurityContext(String userName, Subject subject) {
1:             super(userName);
1:             this.subject = subject;
1:         }
1: 
0:         public Set getPrincipals() {
1:             return subject.getPrincipals();
1:         }
1:         
1:     }
1:     
0:     public void addConnection(ConnectionContext context, ConnectionInfo info) throws Throwable {
1: 
0:         if( context.getSecurityContext()==null ) {
0:             // Set the TCCL since it seems JAAS needs it to find the login module classes.
1:             ClassLoader original = Thread.currentThread().getContextClassLoader();
1:             Thread.currentThread().setContextClassLoader(JaasAuthenticationBroker.class.getClassLoader());
0:             try {
0:                 // Do the login.
0:                 try {
0:                     JassCredentialCallback callback = new JassCredentialCallback(info.getUserName(), info.getPassword());
0:                     LoginContext lc = new LoginContext(jassConfiguration, callback);
0:                     lc.login();
0:                     Subject subject = lc.getSubject();
1:                     
0:                     SecurityContext s = new JaasSecurityContext(info.getUserName(), subject);
0:                     context.setSecurityContext(s);
0:                     securityContexts.add(s);
0:                 } catch (Exception e) {
0:                     throw (SecurityException)new SecurityException("User name or password is invalid.").initCause(e);
1:                 }
1:             } finally {
1:                 Thread.currentThread().setContextClassLoader(original);
1:             }
1:         }
0:         super.addConnection(context, info);
1:     }
1:     
0:     public void removeConnection(ConnectionContext context, ConnectionInfo info, Throwable error) throws Throwable {
0:         super.removeConnection(context, info, error);
0:         if( securityContexts.remove(context.getSecurityContext()) ) {
0:             context.setSecurityContext(null);
1:         }
1:     }
1:     
1:     /**
0:      * Previously logged in users may no longer have the same access anymore.  Refresh
0:      * all the logged into users. 
1:      */
0:     public void refresh() {
0:         for (Iterator iter = securityContexts.iterator(); iter.hasNext();) {
0:             SecurityContext sc = (SecurityContext) iter.next();
0:             sc.getAuthorizedReadDests().clear();
0:             sc.getAuthorizedWriteDests().clear();
1:         }
1:     }
1: }
============================================================================