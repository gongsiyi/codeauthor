1:d29ca2a: /**
1:57b4941:  * Licensed to the Apache Software Foundation (ASF) under one or more
1:57b4941:  * contributor license agreements.  See the NOTICE file distributed with
1:57b4941:  * this work for additional information regarding copyright ownership.
1:57b4941:  * The ASF licenses this file to You under the Apache License, Version 2.0
1:57b4941:  * (the "License"); you may not use this file except in compliance with
1:57b4941:  * the License.  You may obtain a copy of the License at
3:d29ca2a:  *
1:230a86c:  *      http://www.apache.org/licenses/LICENSE-2.0
1:d29ca2a:  *
1:d29ca2a:  * Unless required by applicable law or agreed to in writing, software
1:d29ca2a:  * distributed under the License is distributed on an "AS IS" BASIS,
1:d29ca2a:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:d29ca2a:  * See the License for the specific language governing permissions and
1:d29ca2a:  * limitations under the License.
1:d29ca2a:  */
1:d29ca2a: package org.apache.activemq.transport;
8:d29ca2a: 
1:d29ca2a: import java.io.IOException;
1:d29ca2a: import java.io.InterruptedIOException;
1:74a7a8b: import java.util.concurrent.ArrayBlockingQueue;
1:74a7a8b: import java.util.concurrent.TimeUnit;
1:84fd773: 
1:84fd773: import org.apache.activemq.command.Response;
1:8bf987b: import org.slf4j.Logger;
1:8bf987b: import org.slf4j.LoggerFactory;
1:84fd773: 
1:84fd773: public class FutureResponse {
1:8bf987b:     private static final Logger LOG = LoggerFactory.getLogger(FutureResponse.class);
1:f812e34: 
1:84fd773:     private final ResponseCallback responseCallback;
1:0a12bcb:     private final TransportFilter transportFilter;
1:0a12bcb: 
1:933eb2f:     private final ArrayBlockingQueue<Response> responseSlot = new ArrayBlockingQueue<Response>(1);
1:f812e34: 
1:84fd773:     public FutureResponse(ResponseCallback responseCallback) {
1:0a12bcb:         this(responseCallback, null);
1:0a12bcb:     }
1:0a12bcb: 
1:0a12bcb:     public FutureResponse(ResponseCallback responseCallback, TransportFilter transportFilter) {
1:84fd773:         this.responseCallback = responseCallback;
1:0a12bcb:         this.transportFilter = transportFilter;
1:d29ca2a:     }
1:f812e34: 
1:84fd773:     public Response getResult() throws IOException {
1:0a12bcb:         boolean hasInterruptPending = Thread.interrupted();
1:b3748b4:         try {
1:933eb2f:             return responseSlot.take();
1:f812e34:         } catch (InterruptedException e) {
1:0a12bcb:             hasInterruptPending = false;
1:0a12bcb:             throw dealWithInterrupt(e);
1:0a12bcb:         } finally {
1:0a12bcb:             if (hasInterruptPending) {
1:0a12bcb:                 Thread.currentThread().interrupt();
1:b3748b4:             }
1:d29ca2a:         }
1:d29ca2a:     }
1:84fd773: 
1:0a12bcb:     private InterruptedIOException dealWithInterrupt(InterruptedException e) {
1:0a12bcb:         if (LOG.isDebugEnabled()) {
1:0a12bcb:             LOG.debug("Operation interrupted: " + e, e);
1:0a12bcb:         }
1:0a12bcb:         InterruptedIOException interruptedIOException = new InterruptedIOException(e.getMessage());
1:0a12bcb:         interruptedIOException.initCause(e);
1:0a12bcb:         try {
1:0a12bcb:             if (transportFilter != null) {
1:0a12bcb:                 transportFilter.onException(interruptedIOException);
1:0a12bcb:             }
1:0a12bcb:         } finally {
1:0a12bcb:             Thread.currentThread().interrupt();
1:0a12bcb:         }
1:0a12bcb:         return interruptedIOException;
1:0a12bcb:     }
1:0a12bcb: 
1:84fd773:     public Response getResult(int timeout) throws IOException {
1:0a12bcb:         final boolean wasInterrupted = Thread.interrupted();
1:84fd773:         try {
1:52675ab:             Response result = responseSlot.poll(timeout, TimeUnit.MILLISECONDS);
1:52675ab:             if (result == null && timeout > 0) {
1:52675ab:                 throw new RequestTimedOutIOException();
1:84fd773:             }
1:52675ab:             return result;
1:84fd773:         } catch (InterruptedException e) {
1:0a12bcb:             throw dealWithInterrupt(e);
1:0a12bcb:         } finally {
1:0a12bcb:             if (wasInterrupted) {
1:0a12bcb:                 Thread.currentThread().interrupt();
1:0a12bcb:             }
1:d29ca2a:         }
1:d29ca2a:     }
1:f812e34: 
1:9c13563:     public void set(Response result) {
1:f812e34:         if (responseSlot.offer(result)) {
1:f812e34:             if (responseCallback != null) {
1:b3748b4:                 responseCallback.onCompletion(this);
1:f812e34:             }
1:b3748b4:         }
1:84fd773:     }
1:d29ca2a: }
============================================================================
author:Hadrian Zbarcea
-------------------------------------------------------------------------------
commit:d54d046
author:gtully
-------------------------------------------------------------------------------
commit:0a12bcb
/////////////////////////////////////////////////////////////////////////
1:     private final TransportFilter transportFilter;
1: 
1:         this(responseCallback, null);
1:     }
1: 
1:     public FutureResponse(ResponseCallback responseCallback, TransportFilter transportFilter) {
1:         this.transportFilter = transportFilter;
1:         boolean hasInterruptPending = Thread.interrupted();
1:             hasInterruptPending = false;
1:             throw dealWithInterrupt(e);
1:         } finally {
1:             if (hasInterruptPending) {
1:                 Thread.currentThread().interrupt();
1:     private InterruptedIOException dealWithInterrupt(InterruptedException e) {
1:         if (LOG.isDebugEnabled()) {
1:             LOG.debug("Operation interrupted: " + e, e);
1:         }
1:         InterruptedIOException interruptedIOException = new InterruptedIOException(e.getMessage());
1:         interruptedIOException.initCause(e);
1:         try {
1:             if (transportFilter != null) {
1:                 transportFilter.onException(interruptedIOException);
1:             }
1:         } finally {
1:             Thread.currentThread().interrupt();
1:         }
1:         return interruptedIOException;
1:     }
1: 
1:         final boolean wasInterrupted = Thread.interrupted();
/////////////////////////////////////////////////////////////////////////
1:             throw dealWithInterrupt(e);
1:         } finally {
1:             if (wasInterrupted) {
1:                 Thread.currentThread().interrupt();
1:             }
author:Hiram R. Chirino
-------------------------------------------------------------------------------
commit:9a8f6e4
commit:933eb2f
/////////////////////////////////////////////////////////////////////////
1:     private final ArrayBlockingQueue<Response> responseSlot = new ArrayBlockingQueue<Response>(1);
/////////////////////////////////////////////////////////////////////////
1:             return responseSlot.take();
/////////////////////////////////////////////////////////////////////////
0:             return responseSlot.poll(timeout, TimeUnit.MILLISECONDS);
commit:fc00993
/////////////////////////////////////////////////////////////////////////
0:     private static final Log LOG = LogFactory.getLog(FutureResponse.class);
/////////////////////////////////////////////////////////////////////////
0:             if (LOG.isDebugEnabled()) {
0:                 LOG.debug("Operation interupted: " + e, e);
commit:74a7a8b
/////////////////////////////////////////////////////////////////////////
1: import java.util.concurrent.ArrayBlockingQueue;
1: import java.util.concurrent.TimeUnit;
commit:f812e34
/////////////////////////////////////////////////////////////////////////
1: 
1: 
0:             return (Response)responseSlot.take();
1:         } catch (InterruptedException e) {
/////////////////////////////////////////////////////////////////////////
1: 
0:             return (Response)responseSlot.poll(timeout, TimeUnit.MILLISECONDS);
1: 
1:         if (responseSlot.offer(result)) {
1:             if (responseCallback != null) {
1:             }
commit:230a86c
/////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////
1:  *      http://www.apache.org/licenses/LICENSE-2.0
commit:86cbdfd
/////////////////////////////////////////////////////////////////////////
0: import java.util.concurrent.ArrayBlockingQueue;
0: import java.util.concurrent.TimeUnit;
commit:57b4941
/////////////////////////////////////////////////////////////////////////
1:  * Licensed to the Apache Software Foundation (ASF) under one or more
1:  * contributor license agreements.  See the NOTICE file distributed with
1:  * this work for additional information regarding copyright ownership.
1:  * The ASF licenses this file to You under the Apache License, Version 2.0
1:  * (the "License"); you may not use this file except in compliance with
1:  * the License.  You may obtain a copy of the License at
commit:9c13563
/////////////////////////////////////////////////////////////////////////
1:     public void set(Response result) {
commit:b3748b4
/////////////////////////////////////////////////////////////////////////
1:         try {
0:             return (Response) responseSlot.take();
1:         }
0:         catch (InterruptedException e) {
0:             Thread.currentThread().interrupt();
0:             if (log.isDebugEnabled()) {
0:                 log.debug("Operation interupted: " + e, e);
0:             throw new InterruptedIOException("Interrupted.");
/////////////////////////////////////////////////////////////////////////
0:         if( responseSlot.offer(result) ) {
0:             if( responseCallback !=null ) {
1:                 responseCallback.onCompletion(this);
1:             }        
commit:84fd773
/////////////////////////////////////////////////////////////////////////
1: import org.apache.activemq.command.Response;
1: 
0: import edu.emory.mathcs.backport.java.util.concurrent.ArrayBlockingQueue;
0: import edu.emory.mathcs.backport.java.util.concurrent.TimeUnit;
1: 
1: public class FutureResponse {
1:            
1:     private final ResponseCallback responseCallback;
0:     private final ArrayBlockingQueue responseSlot = new ArrayBlockingQueue(1);
1:     public FutureResponse(ResponseCallback responseCallback) {
1:         this.responseCallback = responseCallback;
1:     public Response getResult() throws IOException {
0:             return (Response) responseSlot.take();
1:     public Response getResult(int timeout) throws IOException {
0:             return (Response) responseSlot.poll(timeout,TimeUnit.MILLISECONDS);
0:     public void set(Response result) throws InterruptedIOException {
1:         try {
0:             responseSlot.put(result);
1:         } catch (InterruptedException e) {
0:             throw new InterruptedIOException("Interrupted.");
1:         }
0:         if( responseCallback !=null ) {
0:             responseCallback.onCompletion(this);
1:         }        
commit:48b4869
/////////////////////////////////////////////////////////////////////////
0:  * Copyright 2005-2006 The Apache Software Foundation
commit:d29ca2a
/////////////////////////////////////////////////////////////////////////
1: /**
1:  *
0:  * Copyright 2004 The Apache Software Foundation
1:  *
0:  * Licensed under the Apache License, Version 2.0 (the "License");
0:  * you may not use this file except in compliance with the License.
0:  * You may obtain a copy of the License at
1:  *
0:  * http://www.apache.org/licenses/LICENSE-2.0
1:  *
1:  * Unless required by applicable law or agreed to in writing, software
1:  * distributed under the License is distributed on an "AS IS" BASIS,
1:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:  * See the License for the specific language governing permissions and
1:  * limitations under the License.
1:  */
1: package org.apache.activemq.transport;
1: 
0: import edu.emory.mathcs.backport.java.util.concurrent.Callable;
0: import edu.emory.mathcs.backport.java.util.concurrent.ExecutionException;
0: import edu.emory.mathcs.backport.java.util.concurrent.FutureTask;
1: 
0: import org.apache.activemq.command.Response;
0: import org.apache.activemq.util.IOExceptionSupport;
1: 
1: import java.io.IOException;
1: import java.io.InterruptedIOException;
1: 
0: public class FutureResponse extends FutureTask {
1:     
0:     private static final Callable EMPTY_CALLABLE = new Callable() {
0:         public Object call() throws Exception {
0:             return null;
0:         }};
1:     
0:     public FutureResponse() {
0:         super(EMPTY_CALLABLE);
1:     }
1: 
0:     public synchronized Response getResult() throws IOException {
0:         try {
0:             return (Response) super.get();
0:         } catch (InterruptedException e) {
0:             throw new InterruptedIOException("Interrupted.");
0:         } catch (ExecutionException e) {
0:             Throwable target = e.getCause();
0:             if( target instanceof IOException ) {
0:                 throw (IOException)target;
0:             } else {
0:                 throw IOExceptionSupport.create(target);
1:             }
1:         }
1:     }
1:     
0:     public synchronized void set(Object result) {
0:         super.set(result);
1:     }
1: }
author:Bosanac Dejan
-------------------------------------------------------------------------------
commit:8bf987b
/////////////////////////////////////////////////////////////////////////
1: import org.slf4j.Logger;
1: import org.slf4j.LoggerFactory;
1:     private static final Logger LOG = LoggerFactory.getLogger(FutureResponse.class);
author:Gary Tully
-------------------------------------------------------------------------------
commit:52675ab
/////////////////////////////////////////////////////////////////////////
1:             Response result = responseSlot.poll(timeout, TimeUnit.MILLISECONDS);
1:             if (result == null && timeout > 0) {
1:                 throw new RequestTimedOutIOException();
0:             }
1:             return result;
author:James Strachan
-------------------------------------------------------------------------------
commit:319033f
/////////////////////////////////////////////////////////////////////////
0: import org.apache.commons.logging.Log;
0: import org.apache.commons.logging.LogFactory;
0:     private static final Log log = LogFactory.getLog(FutureResponse.class);
/////////////////////////////////////////////////////////////////////////
0:         while (true) {
0:             try {
0:                 return (Response) responseSlot.take();
0:             }
0:             catch (InterruptedException e) {
0:                 Thread.currentThread().interrupt();
0:                 if (log.isDebugEnabled()) {
0:                     log.debug("Operation interupted: " + e, e);
0:                 }
0:                 // throw new InterruptedIOException("Interrupted.");
0:             }
author:Robert Davies
-------------------------------------------------------------------------------
commit:5fe0a4c
/////////////////////////////////////////////////////////////////////////
0: import edu.emory.mathcs.backport.java.util.concurrent.TimeUnit;
0: import edu.emory.mathcs.backport.java.util.concurrent.TimeoutException;
/////////////////////////////////////////////////////////////////////////
0:     public synchronized Response getResult(int timeout) throws IOException {
0:         try {
0:             return (Response) super.get(timeout,TimeUnit.MILLISECONDS);
0:         } catch (InterruptedException e) {
0:             throw new InterruptedIOException("Interrupted.");
0:         } catch (ExecutionException e) {
0:             Throwable target = e.getCause();
0:             if( target instanceof IOException ) {
0:                 throw (IOException)target;
0:             } else {
0:                 throw IOExceptionSupport.create(target);
0:             }
0:         }catch(TimeoutException e){
0:             return null;
0:         }
0:     }
0:     
============================================================================