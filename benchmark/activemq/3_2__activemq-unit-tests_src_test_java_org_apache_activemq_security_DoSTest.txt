1:3a71f8e: /**
1:3a71f8e:  * Licensed to the Apache Software Foundation (ASF) under one or more
1:3a71f8e:  * contributor license agreements.  See the NOTICE file distributed with
1:3a71f8e:  * this work for additional information regarding copyright ownership.
1:3a71f8e:  * The ASF licenses this file to You under the Apache License, Version 2.0
1:3a71f8e:  * (the "License"); you may not use this file except in compliance with
1:3a71f8e:  * the License.  You may obtain a copy of the License at
1:3a71f8e:  *
1:3a71f8e:  *      http://www.apache.org/licenses/LICENSE-2.0
1:3a71f8e:  *
1:3a71f8e:  * Unless required by applicable law or agreed to in writing, software
1:3a71f8e:  * distributed under the License is distributed on an "AS IS" BASIS,
1:3a71f8e:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:3a71f8e:  * See the License for the specific language governing permissions and
1:3a71f8e:  * limitations under the License.
1:3a71f8e:  */
1:3a71f8e: package org.apache.activemq.security;
1:3a71f8e: 
1:3a71f8e: import java.net.URI;
1:c9b49d8: import java.util.concurrent.TimeUnit;
1:c9b49d8: import java.util.concurrent.atomic.AtomicBoolean;
1:3a71f8e: 
1:3a71f8e: import javax.jms.Connection;
1:3a71f8e: import javax.jms.JMSException;
1:3a71f8e: import org.apache.activemq.ActiveMQConnectionFactory;
1:3a71f8e: import org.apache.activemq.JmsTestSupport;
1:3a71f8e: import org.apache.activemq.broker.BrokerFactory;
1:3a71f8e: import org.apache.activemq.broker.BrokerService;
1:3a71f8e: import org.slf4j.Logger;
1:3a71f8e: import org.slf4j.LoggerFactory;
1:3a71f8e: 
1:3a71f8e: /**
1:3a71f8e:  * The configuration is set to except a maximum of 2 concurrent connections
1:c9b49d8:  * As the exception is deliberately ignored, the ActiveMQConnection would continue to
1:3a71f8e:  * attempt to connect unless the connection's transport was also stopped on an error.
1:3a71f8e:  * <p/>
1:3a71f8e:  * As the maximum connections allowed is 2, no more connections would be allowed unless
1:3a71f8e:  * the transport was adequately destroyed on the broker side.
1:3a71f8e:  */
1:3a71f8e: 
1:3a71f8e: public class DoSTest extends JmsTestSupport {
1:3a71f8e: 
1:3a71f8e:     private static final Logger LOG = LoggerFactory.getLogger(DoSTest.class);
1:3a71f8e: 
1:3a71f8e:     public void testInvalidAuthentication() throws Throwable {
1:3a71f8e: 
1:c9b49d8:         // with failover reconnect, we don't expect this thread to complete
1:c9b49d8:         // but periodically the failure changes from ExceededMaximumConnectionsException on the broker
1:c9b49d8:         // side to a SecurityException.
1:c9b49d8:         // A failed to authenticated but idle connection (dos style) is aborted by the inactivity monitor
1:c9b49d8:         // since useKeepAlive=false
1:3a71f8e: 
1:c9b49d8:         final AtomicBoolean done = new AtomicBoolean(false);
1:c9b49d8:         Thread thread = new Thread() {
1:c9b49d8:             Connection connection = null;
1:3a71f8e: 
1:c9b49d8:             public void run() {
1:c9b49d8:                 for (int i = 0; i < 1000 && !done.get(); i++) {
1:c9b49d8:                     ActiveMQConnectionFactory factory = new ActiveMQConnectionFactory();
1:c9b49d8:                     try {
1:c9b49d8:                         // Bad password
1:c9b49d8:                         connection = factory.createConnection("bad", "krap");
1:c9b49d8:                         connection.start();
1:c9b49d8:                         fail("Expected exception.");
1:c9b49d8:                     } catch (JMSException e) {
1:c9b49d8:                         // ignore exception and don't close
1:c9b49d8:                         e.printStackTrace();
1:c9b49d8:                     }
1:c9b49d8:                 }
2:3a71f8e:             }
1:c9b49d8:         };
1:3a71f8e: 
1:c9b49d8:         thread.start();
1:3a71f8e: 
1:c9b49d8:         // run dos for a while
1:c9b49d8:         TimeUnit.SECONDS.sleep(10);
1:c9b49d8: 
1:c9b49d8:         LOG.info("trying genuine connection ...");
1:c9b49d8:         // verify a valid connection can work with one of the 2 allowed connections provided it is eager!
1:c9b49d8:         // it could take a while as it is competing with the three other reconnect threads.
1:c9b49d8:         // wonder if it makes sense to serialise these reconnect attempts on an executor
1:c9b49d8:         ActiveMQConnectionFactory factory = new ActiveMQConnectionFactory("failover:(tcp://127.0.0.1:61616)?useExponentialBackOff=false&reconnectDelay=10");
1:c9b49d8:         Connection goodConnection = factory.createConnection("user", "password");
1:c9b49d8:         goodConnection.start();
1:c9b49d8:         goodConnection.close();
1:c9b49d8: 
1:c9b49d8:         LOG.info("giving up on DOS");
1:c9b49d8:         done.set(true);
1:3a71f8e:     }
1:3a71f8e: 
1:3a71f8e:     protected BrokerService createBroker() throws Exception {
1:3a71f8e:         return createBroker("org/apache/activemq/security/dos-broker.xml");
1:3a71f8e:     }
1:3a71f8e: 
1:3a71f8e:     protected BrokerService createBroker(String uri) throws Exception {
1:3a71f8e:         LOG.info("Loading broker configuration from the classpath with URI: " + uri);
1:3a71f8e:         return BrokerFactory.createBroker(new URI("xbean:" + uri));
1:3a71f8e:     }
1:3a71f8e: 
1:3a71f8e: }
============================================================================
author:Timothy A. Bish
-------------------------------------------------------------------------------
commit:ef24cc9
author:Gary Tully
-------------------------------------------------------------------------------
commit:c9b49d8
/////////////////////////////////////////////////////////////////////////
1: import java.util.concurrent.TimeUnit;
1: import java.util.concurrent.atomic.AtomicBoolean;
/////////////////////////////////////////////////////////////////////////
1:  * As the exception is deliberately ignored, the ActiveMQConnection would continue to
/////////////////////////////////////////////////////////////////////////
1:         // with failover reconnect, we don't expect this thread to complete
1:         // but periodically the failure changes from ExceededMaximumConnectionsException on the broker
1:         // side to a SecurityException.
1:         // A failed to authenticated but idle connection (dos style) is aborted by the inactivity monitor
1:         // since useKeepAlive=false
1:         final AtomicBoolean done = new AtomicBoolean(false);
1:         Thread thread = new Thread() {
1:             Connection connection = null;
1:             public void run() {
1:                 for (int i = 0; i < 1000 && !done.get(); i++) {
1:                     ActiveMQConnectionFactory factory = new ActiveMQConnectionFactory();
1:                     try {
1:                         // Bad password
1:                         connection = factory.createConnection("bad", "krap");
1:                         connection.start();
1:                         fail("Expected exception.");
1:                     } catch (JMSException e) {
1:                         // ignore exception and don't close
1:                         e.printStackTrace();
1:                     }
1:                 }
1:         };
1:         thread.start();
1:         // run dos for a while
1:         TimeUnit.SECONDS.sleep(10);
1: 
1:         LOG.info("trying genuine connection ...");
1:         // verify a valid connection can work with one of the 2 allowed connections provided it is eager!
1:         // it could take a while as it is competing with the three other reconnect threads.
1:         // wonder if it makes sense to serialise these reconnect attempts on an executor
1:         ActiveMQConnectionFactory factory = new ActiveMQConnectionFactory("failover:(tcp://127.0.0.1:61616)?useExponentialBackOff=false&reconnectDelay=10");
1:         Connection goodConnection = factory.createConnection("user", "password");
1:         goodConnection.start();
1:         goodConnection.close();
1: 
1:         LOG.info("giving up on DOS");
1:         done.set(true);
author:Robert Davies
-------------------------------------------------------------------------------
commit:3a71f8e
/////////////////////////////////////////////////////////////////////////
1: /**
1:  * Licensed to the Apache Software Foundation (ASF) under one or more
1:  * contributor license agreements.  See the NOTICE file distributed with
1:  * this work for additional information regarding copyright ownership.
1:  * The ASF licenses this file to You under the Apache License, Version 2.0
1:  * (the "License"); you may not use this file except in compliance with
1:  * the License.  You may obtain a copy of the License at
1:  *
1:  *      http://www.apache.org/licenses/LICENSE-2.0
1:  *
1:  * Unless required by applicable law or agreed to in writing, software
1:  * distributed under the License is distributed on an "AS IS" BASIS,
1:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:  * See the License for the specific language governing permissions and
1:  * limitations under the License.
1:  */
1: package org.apache.activemq.security;
1: 
1: import java.net.URI;
1: 
1: import javax.jms.Connection;
1: import javax.jms.JMSException;
1: import org.apache.activemq.ActiveMQConnectionFactory;
1: import org.apache.activemq.JmsTestSupport;
1: import org.apache.activemq.broker.BrokerFactory;
1: import org.apache.activemq.broker.BrokerService;
1: import org.slf4j.Logger;
1: import org.slf4j.LoggerFactory;
1: 
1: /**
1:  * The configuration is set to except a maximum of 2 concurrent connections
0:  * As the exception is delibrately ignored, the ActiveMQConnection would continue to
1:  * attempt to connect unless the connection's transport was also stopped on an error.
1:  * <p/>
1:  * As the maximum connections allowed is 2, no more connections would be allowed unless
1:  * the transport was adequately destroyed on the broker side.
1:  */
1: 
1: public class DoSTest extends JmsTestSupport {
1: 
1:     private static final Logger LOG = LoggerFactory.getLogger(DoSTest.class);
1: 
1:     public void testInvalidAuthentication() throws Throwable {
1: 
0:         for (int i = 0; i < 1000; i++) {
1: 
0:             try {
0:                 // Bad password
0:                 ActiveMQConnectionFactory factory = new ActiveMQConnectionFactory();
0:                 Connection c = factory.createConnection("bad", "krap");
0:                 c.start();
0:                 fail("Expected exception.");
0:             } catch (JMSException e) {
1: 
1:             }
1:         }
1: 
1: 
1:     }
1: 
1:     protected BrokerService createBroker() throws Exception {
1:         return createBroker("org/apache/activemq/security/dos-broker.xml");
1:     }
1: 
1:     protected BrokerService createBroker(String uri) throws Exception {
1:         LOG.info("Loading broker configuration from the classpath with URI: " + uri);
1:         return BrokerFactory.createBroker(new URI("xbean:" + uri));
1:     }
1: 
1: }
============================================================================