1:1f9b139: /**
1:1f9b139:  * Licensed to the Apache Software Foundation (ASF) under one or more
1:1f9b139:  * contributor license agreements.  See the NOTICE file distributed with
1:1f9b139:  * this work for additional information regarding copyright ownership.
1:1f9b139:  * The ASF licenses this file to You under the Apache License, Version 2.0
1:1f9b139:  * (the "License"); you may not use this file except in compliance with
1:1f9b139:  * the License.  You may obtain a copy of the License at
1:1f9b139:  *
1:1f9b139:  *      http://www.apache.org/licenses/LICENSE-2.0
1:1f9b139:  *
1:1f9b139:  * Unless required by applicable law or agreed to in writing, software
1:1f9b139:  * distributed under the License is distributed on an "AS IS" BASIS,
1:1f9b139:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:1f9b139:  * See the License for the specific language governing permissions and
1:1f9b139:  * limitations under the License.
1:1f9b139:  */
1:1f9b139: package org.apache.activemq.camel;
1:1f9b139: 
1:1f9b139: import org.apache.activemq.broker.BrokerService;
1:1f9b139: import org.apache.activemq.command.ActiveMQDestination;
1:1f9b139: import org.apache.activemq.command.ActiveMQQueue;
1:1f9b139: import org.apache.activemq.network.DiscoveryNetworkConnector;
1:1f9b139: import org.apache.camel.test.spring.CamelSpringTestSupport;
1:1f9b139: import org.junit.Test;
1:1f9b139: import org.slf4j.Logger;
1:1f9b139: import org.slf4j.LoggerFactory;
1:1f9b139: import org.springframework.context.support.AbstractXmlApplicationContext;
1:1f9b139: import org.springframework.context.support.ClassPathXmlApplicationContext;
1:1f9b139: 
1:1f9b139: import javax.jms.Connection;
1:1f9b139: import javax.jms.ConnectionFactory;
1:1f9b139: import javax.jms.Destination;
1:1f9b139: import javax.jms.Message;
1:1f9b139: import javax.jms.MessageConsumer;
1:1f9b139: import javax.jms.MessageProducer;
1:1f9b139: import javax.jms.Session;
1:1f9b139: import javax.jms.TextMessage;
1:1f9b139: import java.net.URI;
1:1f9b139: import java.util.Arrays;
1:1f9b139: 
1:1f9b139: public class CamelJmsRequestReplyNobTest extends CamelSpringTestSupport {
1:1f9b139:     
1:1f9b139:     private static final Logger LOG = LoggerFactory.getLogger(CamelJmsRequestReplyNobTest.class);
1:1f9b139: 
1:1f9b139:     @Test
1:1f9b139:     public void testRoundTrip() throws Exception {
1:1f9b139:         Destination destination = getMandatoryBean(Destination.class, "consumeFrom");
1:1f9b139: 
1:1f9b139:         // lets create a message
1:1f9b139:         ConnectionFactory factoryCON = getMandatoryBean(ConnectionFactory.class, "CON");
1:1f9b139: 
1:1f9b139:         Connection consumerConnection = factoryCON.createConnection();
1:1f9b139:         consumerConnection.start();
1:1f9b139:         Session consumerSession = consumerConnection.createSession(false, Session.AUTO_ACKNOWLEDGE);
1:1f9b139: 
1:1f9b139:         LOG.info("Consuming from: " + destination);
1:1f9b139:         MessageConsumer consumer = consumerSession.createConsumer(destination);
1:1f9b139: 
1:1f9b139:         // lets create a message
1:1f9b139:         ConnectionFactory factoryPRO = getMandatoryBean(ConnectionFactory.class, "PRO");
1:1f9b139: 
1:1f9b139:         Connection producerConnection = factoryPRO.createConnection();
1:1f9b139:         producerConnection.start();
1:1f9b139:         Session producerSession = producerConnection.createSession(false, Session.AUTO_ACKNOWLEDGE);
1:1f9b139: 
1:1f9b139:         MessageProducer producer = producerSession.createProducer(producerSession.createQueue("incoming1"));
1:1f9b139:         Message message = producerSession.createTextMessage("Where are you");
1:1f9b139:         message.setStringProperty("foo", "bar");
1:1f9b139:         producer.send(message);
1:1f9b139: 
1:1f9b139:         message = consumer.receive(10000);
1:1f9b139:         assertNotNull("Should have received a message from destination: " + destination, message);
1:1f9b139: 
1:1f9b139:         TextMessage textMessage = assertIsInstanceOf(TextMessage.class, message);
1:1f9b139:         assertEquals("Message body", "If you don't ask me my name, I'm not going to tell you!", textMessage.getText());
1:1f9b139: 
1:1f9b139:     }
1:1f9b139: 
1:1f9b139:     private BrokerService createBroker(String name) throws Exception {
1:1f9b139:         BrokerService brokerService = new BrokerService();
1:1f9b139:         brokerService.setDeleteAllMessagesOnStartup(true);
1:1f9b139:         brokerService.setBrokerName(name);
1:1f9b139:         brokerService.setUseJmx(false);
1:1f9b139:         brokerService.setPersistent(false);
1:1f9b139:         brokerService.addConnector("tcp://0.0.0.0:0");
1:1f9b139:         return brokerService;
1:1f9b139:     }
1:1f9b139: 
1:1f9b139:     BrokerService producerBroker, consumerBroker;
1:1f9b139:     @SuppressWarnings("unchecked")
1:1f9b139:     @Override
1:1f9b139:     protected AbstractXmlApplicationContext createApplicationContext() {
1:1f9b139:         try {
1:1f9b139:             consumerBroker = createBroker("CON");
1:1f9b139:             producerBroker  = createBroker("PRO");
1:1f9b139:             DiscoveryNetworkConnector discoveryNetworkConnector = new DiscoveryNetworkConnector();
1:1f9b139:             discoveryNetworkConnector.setUri(new URI("static:" + consumerBroker.getTransportConnectorByScheme("tcp").getPublishableConnectString()));
1:1f9b139:             discoveryNetworkConnector.setDuplex(true);
1:1f9b139:             discoveryNetworkConnector.setNetworkTTL(2);
1:1f9b139:             discoveryNetworkConnector.setDynamicallyIncludedDestinations(Arrays.asList(new ActiveMQDestination[]{new ActiveMQQueue("service1")}));
1:46e0802:             discoveryNetworkConnector.setDestinationFilter("ActiveMQ.Advisory.TempQueue,ActiveMQ.Advisory.TempTopic,ActiveMQ.Advisory.Consumer.Queue.>");
1:1f9b139:             producerBroker.addNetworkConnector(discoveryNetworkConnector);
1:1f9b139:             consumerBroker.start();
1:1f9b139:             producerBroker.start();
1:1f9b139: 
1:1f9b139:         } catch (Exception e) {
1:1f9b139:             throw new RuntimeException("Failed to start broker", e);
1:1f9b139:         }
1:1f9b139:         return new ClassPathXmlApplicationContext("org/apache/activemq/camel/requestReply.xml");
1:1f9b139:     }
1:1f9b139: }
============================================================================
author:gtully
-------------------------------------------------------------------------------
commit:46e0802
/////////////////////////////////////////////////////////////////////////
1:             discoveryNetworkConnector.setDestinationFilter("ActiveMQ.Advisory.TempQueue,ActiveMQ.Advisory.TempTopic,ActiveMQ.Advisory.Consumer.Queue.>");
commit:1f9b139
/////////////////////////////////////////////////////////////////////////
1: /**
1:  * Licensed to the Apache Software Foundation (ASF) under one or more
1:  * contributor license agreements.  See the NOTICE file distributed with
1:  * this work for additional information regarding copyright ownership.
1:  * The ASF licenses this file to You under the Apache License, Version 2.0
1:  * (the "License"); you may not use this file except in compliance with
1:  * the License.  You may obtain a copy of the License at
1:  *
1:  *      http://www.apache.org/licenses/LICENSE-2.0
1:  *
1:  * Unless required by applicable law or agreed to in writing, software
1:  * distributed under the License is distributed on an "AS IS" BASIS,
1:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:  * See the License for the specific language governing permissions and
1:  * limitations under the License.
1:  */
1: package org.apache.activemq.camel;
1: 
1: import org.apache.activemq.broker.BrokerService;
1: import org.apache.activemq.command.ActiveMQDestination;
1: import org.apache.activemq.command.ActiveMQQueue;
1: import org.apache.activemq.network.DiscoveryNetworkConnector;
1: import org.apache.camel.test.spring.CamelSpringTestSupport;
1: import org.junit.Test;
1: import org.slf4j.Logger;
1: import org.slf4j.LoggerFactory;
1: import org.springframework.context.support.AbstractXmlApplicationContext;
1: import org.springframework.context.support.ClassPathXmlApplicationContext;
1: 
1: import javax.jms.Connection;
1: import javax.jms.ConnectionFactory;
1: import javax.jms.Destination;
1: import javax.jms.Message;
1: import javax.jms.MessageConsumer;
1: import javax.jms.MessageProducer;
1: import javax.jms.Session;
1: import javax.jms.TextMessage;
1: import java.net.URI;
1: import java.util.Arrays;
1: 
1: public class CamelJmsRequestReplyNobTest extends CamelSpringTestSupport {
1:     
1:     private static final Logger LOG = LoggerFactory.getLogger(CamelJmsRequestReplyNobTest.class);
1: 
1:     @Test
1:     public void testRoundTrip() throws Exception {
1:         Destination destination = getMandatoryBean(Destination.class, "consumeFrom");
1: 
1:         // lets create a message
1:         ConnectionFactory factoryCON = getMandatoryBean(ConnectionFactory.class, "CON");
1: 
1:         Connection consumerConnection = factoryCON.createConnection();
1:         consumerConnection.start();
1:         Session consumerSession = consumerConnection.createSession(false, Session.AUTO_ACKNOWLEDGE);
1: 
1:         LOG.info("Consuming from: " + destination);
1:         MessageConsumer consumer = consumerSession.createConsumer(destination);
1: 
1:         // lets create a message
1:         ConnectionFactory factoryPRO = getMandatoryBean(ConnectionFactory.class, "PRO");
1: 
1:         Connection producerConnection = factoryPRO.createConnection();
1:         producerConnection.start();
1:         Session producerSession = producerConnection.createSession(false, Session.AUTO_ACKNOWLEDGE);
1: 
1:         MessageProducer producer = producerSession.createProducer(producerSession.createQueue("incoming1"));
1:         Message message = producerSession.createTextMessage("Where are you");
1:         message.setStringProperty("foo", "bar");
1:         producer.send(message);
1: 
1:         message = consumer.receive(10000);
1:         assertNotNull("Should have received a message from destination: " + destination, message);
1: 
1:         TextMessage textMessage = assertIsInstanceOf(TextMessage.class, message);
1:         assertEquals("Message body", "If you don't ask me my name, I'm not going to tell you!", textMessage.getText());
1: 
1:     }
1: 
1:     private BrokerService createBroker(String name) throws Exception {
1:         BrokerService brokerService = new BrokerService();
1:         brokerService.setDeleteAllMessagesOnStartup(true);
1:         brokerService.setBrokerName(name);
1:         brokerService.setUseJmx(false);
1:         brokerService.setPersistent(false);
1:         brokerService.addConnector("tcp://0.0.0.0:0");
1:         return brokerService;
1:     }
1: 
1:     BrokerService producerBroker, consumerBroker;
1:     @SuppressWarnings("unchecked")
1:     @Override
1:     protected AbstractXmlApplicationContext createApplicationContext() {
1:         try {
1:             consumerBroker = createBroker("CON");
1:             producerBroker  = createBroker("PRO");
1:             DiscoveryNetworkConnector discoveryNetworkConnector = new DiscoveryNetworkConnector();
1:             discoveryNetworkConnector.setUri(new URI("static:" + consumerBroker.getTransportConnectorByScheme("tcp").getPublishableConnectString()));
1:             discoveryNetworkConnector.setDuplex(true);
1:             discoveryNetworkConnector.setNetworkTTL(2);
1:             discoveryNetworkConnector.setDynamicallyIncludedDestinations(Arrays.asList(new ActiveMQDestination[]{new ActiveMQQueue("service1")}));
0:             discoveryNetworkConnector.setDestinationFilter("ActiveMQ.Advisory.Consumer.Queue.service1,ActiveMQ.Advisory.TempQueue,ActiveMQ.Advisory.TempTopic,ActiveMQ.Advisory.Consumer.Queue.*.*");
1:             producerBroker.addNetworkConnector(discoveryNetworkConnector);
1:             consumerBroker.start();
1:             producerBroker.start();
1: 
1:         } catch (Exception e) {
1:             throw new RuntimeException("Failed to start broker", e);
1:         }
1:         return new ClassPathXmlApplicationContext("org/apache/activemq/camel/requestReply.xml");
1:     }
1: }
============================================================================