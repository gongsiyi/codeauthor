1:b29ccf3: /**
1:b29ccf3:  * Licensed to the Apache Software Foundation (ASF) under one or more
1:b29ccf3:  * contributor license agreements.  See the NOTICE file distributed with
1:b29ccf3:  * this work for additional information regarding copyright ownership.
1:b29ccf3:  * The ASF licenses this file to You under the Apache License, Version 2.0
1:b29ccf3:  * (the "License"); you may not use this file except in compliance with
1:b29ccf3:  * the License.  You may obtain a copy of the License at
1:b29ccf3:  *
1:b29ccf3:  *      http://www.apache.org/licenses/LICENSE-2.0
1:b29ccf3:  *
1:b29ccf3:  * Unless required by applicable law or agreed to in writing, software
1:b29ccf3:  * distributed under the License is distributed on an "AS IS" BASIS,
1:b29ccf3:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:b29ccf3:  * See the License for the specific language governing permissions and
1:b29ccf3:  * limitations under the License.
1:b29ccf3:  */
1:b29ccf3: package org.apache.activemq.usecases;
1:b29ccf3: 
1:b29ccf3: import org.apache.activemq.ActiveMQConnectionFactory;
1:b29ccf3: import org.apache.activemq.ActiveMQPrefetchPolicy;
1:b29ccf3: import org.apache.activemq.TestSupport;
1:b29ccf3: import org.apache.activemq.broker.BrokerService;
1:b29ccf3: import org.apache.activemq.broker.region.Queue;
1:b29ccf3: import org.apache.activemq.broker.region.policy.PolicyEntry;
1:b29ccf3: import org.apache.activemq.broker.region.policy.PolicyMap;
1:b29ccf3: import org.apache.activemq.command.ActiveMQQueue;
1:b29ccf3: import org.apache.activemq.usage.SystemUsage;
1:b29ccf3: import org.apache.activemq.util.DefaultTestAppender;
1:b29ccf3: import org.apache.log4j.Appender;
1:b29ccf3: import org.apache.log4j.Level;
1:b29ccf3: import org.apache.log4j.spi.LoggingEvent;
1:b29ccf3: 
1:b29ccf3: import javax.jms.*;
1:b29ccf3: import java.io.File;
1:b29ccf3: import java.util.ArrayList;
1:b29ccf3: import java.util.concurrent.atomic.AtomicBoolean;
1:b29ccf3: 
1:b29ccf3: public class UsageBlockedDispatchTest extends TestSupport {
1:b29ccf3: 
1:b29ccf3:     private static final int MESSAGES_COUNT = 100;
1:b29ccf3:     private static byte[] buf = new byte[2 * 1024];
1:b29ccf3:     private BrokerService broker;
1:b29ccf3: 
1:b29ccf3:     protected long messageReceiveTimeout = 4000L;
1:b29ccf3: 
1:b29ccf3:     private String connectionUri;
1:b29ccf3: 
1:b29ccf3:     @Override
1:b29ccf3:     public void setUp() throws Exception {
1:b29ccf3: 
1:b29ccf3:         broker = new BrokerService();
1:b29ccf3:         broker.setDataDirectory("target" + File.separator + "activemq-data");
1:b29ccf3:         broker.setPersistent(true);
1:b29ccf3:         broker.setUseJmx(true);
1:b29ccf3:         broker.setAdvisorySupport(false);
1:b29ccf3:         broker.setDeleteAllMessagesOnStartup(true);
1:b29ccf3: 
1:b29ccf3:         setDefaultPersistenceAdapter(broker);
1:b29ccf3:         SystemUsage sysUsage = broker.getSystemUsage();
1:b29ccf3:         sysUsage.getMemoryUsage().setLimit(100*1024);
1:b29ccf3: 
1:b29ccf3:         PolicyEntry defaultPolicy = new PolicyEntry();
1:b29ccf3:         defaultPolicy.setProducerFlowControl(false);
1:b29ccf3:         defaultPolicy.setCursorMemoryHighWaterMark(100);
1:b29ccf3:         defaultPolicy.setMemoryLimit(50*1024);
1:b29ccf3: 
1:b29ccf3:         PolicyMap policyMap = new PolicyMap();
1:b29ccf3:         policyMap.setDefaultEntry(defaultPolicy);
1:b29ccf3:         broker.setDestinationPolicy(policyMap);
1:b29ccf3:         broker.setSystemUsage(sysUsage);
1:b29ccf3: 
1:b29ccf3:         broker.addConnector("tcp://localhost:0").setName("Default");
1:b29ccf3:         broker.start();
1:b29ccf3: 
1:b29ccf3:         connectionUri = broker.getTransportConnectors().get(0).getPublishableConnectString();
1:b29ccf3:     }
1:b29ccf3: 
1:b29ccf3:     @Override
1:b29ccf3:     public void tearDown() throws Exception {
1:b29ccf3:         if (broker != null) {
1:b29ccf3:             broker.stop();
1:b29ccf3:         }
1:b29ccf3:     }
1:b29ccf3: 
1:b29ccf3:     public void testFillMemToBlockConsumer() throws Exception {
1:b29ccf3: 
1:b29ccf3:         ActiveMQConnectionFactory factory = new ActiveMQConnectionFactory(connectionUri);
1:b29ccf3:         ActiveMQPrefetchPolicy prefetch = new ActiveMQPrefetchPolicy();
1:b29ccf3:         prefetch.setTopicPrefetch(10);
1:b29ccf3:         factory.setPrefetchPolicy(prefetch);
1:b29ccf3: 
1:b29ccf3:         final Connection producerConnection = factory.createConnection();
1:b29ccf3:         producerConnection.start();
1:b29ccf3: 
1:b29ccf3:         Session producerSession = producerConnection.createSession(false, Session.AUTO_ACKNOWLEDGE);
1:b29ccf3:         MessageProducer producer = producerSession.createProducer(null);
1:b29ccf3:         BytesMessage message = producerSession.createBytesMessage();
1:b29ccf3:         message.writeBytes(buf);
1:b29ccf3: 
1:b29ccf3:         int numFillers = 4;
1:b29ccf3:         ArrayList<ActiveMQQueue> fillers = new ArrayList<ActiveMQQueue>();
1:b29ccf3:         for (int i=0; i<numFillers; i++) {
1:b29ccf3:             fillers.add(new ActiveMQQueue("Q" + i));
1:b29ccf3:         }
1:b29ccf3: 
1:b29ccf3:         // fill cache and consume all memory
1:b29ccf3:         for (int idx = 0; idx < MESSAGES_COUNT; ++idx) {
1:b29ccf3:             for (ActiveMQQueue q : fillers) {
1:b29ccf3:                 producer.send(q, message);
1:b29ccf3:             }
1:b29ccf3:         }
1:b29ccf3:         ActiveMQQueue willGetAPage = new ActiveMQQueue("Q" + numFillers++);
1:b29ccf3:         for (int idx = 0; idx < MESSAGES_COUNT; ++idx) {
1:b29ccf3:             producer.send(willGetAPage, message);
1:b29ccf3:         }
1:b29ccf3: 
1:b29ccf3:         ActiveMQQueue shouldBeStuckForDispatch = new ActiveMQQueue("Q" + numFillers);
1:b29ccf3:         for (int idx = 0; idx < MESSAGES_COUNT; ++idx) {
1:b29ccf3:             producer.send(shouldBeStuckForDispatch, message);
1:b29ccf3:         }
1:b29ccf3: 
1:b29ccf3:         Connection consumerConnection = factory.createConnection();
1:b29ccf3:         consumerConnection.start();
1:b29ccf3: 
1:b29ccf3:         Session consumerSession = consumerConnection.createSession(false, Session.AUTO_ACKNOWLEDGE);
1:b29ccf3:         MessageConsumer consumer = consumerSession.createConsumer(willGetAPage);
1:b29ccf3: 
1:b29ccf3:         Message m = consumer.receive(messageReceiveTimeout);
1:b29ccf3:         assertNotNull("got a message", m);
1:b29ccf3: 
1:b29ccf3:         final AtomicBoolean gotExpectedLogEvent = new AtomicBoolean(false);
1:b29ccf3:         Appender appender = new DefaultTestAppender() {
1:b29ccf3: 
1:b29ccf3:             @Override
1:b29ccf3:             public void doAppend(LoggingEvent event) {
1:b29ccf3:                 if (event.getLevel() == Level.WARN && event.getRenderedMessage().contains("cursor blocked")) {
1:b29ccf3:                     gotExpectedLogEvent.set(true);
1:b29ccf3:                 }
1:b29ccf3:             }
1:b29ccf3:         };
1:b29ccf3: 
1:b29ccf3:         try {
1:b29ccf3:             org.apache.log4j.Logger.getLogger(Queue.class).addAppender(appender);
1:b29ccf3: 
1:b29ccf3:             MessageConsumer noDispatchConsumer = consumerSession.createConsumer(shouldBeStuckForDispatch);
1:b29ccf3: 
1:b29ccf3:             m = noDispatchConsumer.receive(messageReceiveTimeout);
1:b29ccf3:             assertNull("did not get a message", m);
1:b29ccf3: 
1:b29ccf3:             assertTrue("Got the new warning about the blocked cursor", gotExpectedLogEvent.get());
1:b29ccf3:         } finally {
1:b29ccf3:             org.apache.log4j.Logger.getLogger(Queue.class).removeAppender(appender);
1:b29ccf3:             org.apache.log4j.Logger.getRootLogger().removeAppender(appender);
1:b29ccf3:         }
1:b29ccf3:     }
1:b29ccf3: }
============================================================================
author:gtully
-------------------------------------------------------------------------------
commit:b29ccf3
/////////////////////////////////////////////////////////////////////////
1: /**
1:  * Licensed to the Apache Software Foundation (ASF) under one or more
1:  * contributor license agreements.  See the NOTICE file distributed with
1:  * this work for additional information regarding copyright ownership.
1:  * The ASF licenses this file to You under the Apache License, Version 2.0
1:  * (the "License"); you may not use this file except in compliance with
1:  * the License.  You may obtain a copy of the License at
1:  *
1:  *      http://www.apache.org/licenses/LICENSE-2.0
1:  *
1:  * Unless required by applicable law or agreed to in writing, software
1:  * distributed under the License is distributed on an "AS IS" BASIS,
1:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:  * See the License for the specific language governing permissions and
1:  * limitations under the License.
1:  */
1: package org.apache.activemq.usecases;
1: 
1: import org.apache.activemq.ActiveMQConnectionFactory;
1: import org.apache.activemq.ActiveMQPrefetchPolicy;
1: import org.apache.activemq.TestSupport;
1: import org.apache.activemq.broker.BrokerService;
1: import org.apache.activemq.broker.region.Queue;
1: import org.apache.activemq.broker.region.policy.PolicyEntry;
1: import org.apache.activemq.broker.region.policy.PolicyMap;
1: import org.apache.activemq.command.ActiveMQQueue;
1: import org.apache.activemq.usage.SystemUsage;
1: import org.apache.activemq.util.DefaultTestAppender;
1: import org.apache.log4j.Appender;
1: import org.apache.log4j.Level;
1: import org.apache.log4j.spi.LoggingEvent;
1: 
1: import javax.jms.*;
1: import java.io.File;
1: import java.util.ArrayList;
1: import java.util.concurrent.atomic.AtomicBoolean;
1: 
1: public class UsageBlockedDispatchTest extends TestSupport {
1: 
1:     private static final int MESSAGES_COUNT = 100;
1:     private static byte[] buf = new byte[2 * 1024];
1:     private BrokerService broker;
1: 
1:     protected long messageReceiveTimeout = 4000L;
1: 
1:     private String connectionUri;
1: 
1:     @Override
1:     public void setUp() throws Exception {
1: 
1:         broker = new BrokerService();
1:         broker.setDataDirectory("target" + File.separator + "activemq-data");
1:         broker.setPersistent(true);
1:         broker.setUseJmx(true);
1:         broker.setAdvisorySupport(false);
1:         broker.setDeleteAllMessagesOnStartup(true);
1: 
1:         setDefaultPersistenceAdapter(broker);
1:         SystemUsage sysUsage = broker.getSystemUsage();
1:         sysUsage.getMemoryUsage().setLimit(100*1024);
1: 
1:         PolicyEntry defaultPolicy = new PolicyEntry();
1:         defaultPolicy.setProducerFlowControl(false);
1:         defaultPolicy.setCursorMemoryHighWaterMark(100);
1:         defaultPolicy.setMemoryLimit(50*1024);
1: 
1:         PolicyMap policyMap = new PolicyMap();
1:         policyMap.setDefaultEntry(defaultPolicy);
1:         broker.setDestinationPolicy(policyMap);
1:         broker.setSystemUsage(sysUsage);
1: 
1:         broker.addConnector("tcp://localhost:0").setName("Default");
1:         broker.start();
1: 
1:         connectionUri = broker.getTransportConnectors().get(0).getPublishableConnectString();
1:     }
1: 
1:     @Override
1:     public void tearDown() throws Exception {
1:         if (broker != null) {
1:             broker.stop();
1:         }
1:     }
1: 
1:     public void testFillMemToBlockConsumer() throws Exception {
1: 
1:         ActiveMQConnectionFactory factory = new ActiveMQConnectionFactory(connectionUri);
1:         ActiveMQPrefetchPolicy prefetch = new ActiveMQPrefetchPolicy();
1:         prefetch.setTopicPrefetch(10);
1:         factory.setPrefetchPolicy(prefetch);
1: 
1:         final Connection producerConnection = factory.createConnection();
1:         producerConnection.start();
1: 
1:         Session producerSession = producerConnection.createSession(false, Session.AUTO_ACKNOWLEDGE);
1:         MessageProducer producer = producerSession.createProducer(null);
1:         BytesMessage message = producerSession.createBytesMessage();
1:         message.writeBytes(buf);
1: 
1:         int numFillers = 4;
1:         ArrayList<ActiveMQQueue> fillers = new ArrayList<ActiveMQQueue>();
1:         for (int i=0; i<numFillers; i++) {
1:             fillers.add(new ActiveMQQueue("Q" + i));
1:         }
1: 
1:         // fill cache and consume all memory
1:         for (int idx = 0; idx < MESSAGES_COUNT; ++idx) {
1:             for (ActiveMQQueue q : fillers) {
1:                 producer.send(q, message);
1:             }
1:         }
1:         ActiveMQQueue willGetAPage = new ActiveMQQueue("Q" + numFillers++);
1:         for (int idx = 0; idx < MESSAGES_COUNT; ++idx) {
1:             producer.send(willGetAPage, message);
1:         }
1: 
1:         ActiveMQQueue shouldBeStuckForDispatch = new ActiveMQQueue("Q" + numFillers);
1:         for (int idx = 0; idx < MESSAGES_COUNT; ++idx) {
1:             producer.send(shouldBeStuckForDispatch, message);
1:         }
1: 
1:         Connection consumerConnection = factory.createConnection();
1:         consumerConnection.start();
1: 
1:         Session consumerSession = consumerConnection.createSession(false, Session.AUTO_ACKNOWLEDGE);
1:         MessageConsumer consumer = consumerSession.createConsumer(willGetAPage);
1: 
1:         Message m = consumer.receive(messageReceiveTimeout);
1:         assertNotNull("got a message", m);
1: 
1:         final AtomicBoolean gotExpectedLogEvent = new AtomicBoolean(false);
1:         Appender appender = new DefaultTestAppender() {
1: 
1:             @Override
1:             public void doAppend(LoggingEvent event) {
1:                 if (event.getLevel() == Level.WARN && event.getRenderedMessage().contains("cursor blocked")) {
1:                     gotExpectedLogEvent.set(true);
1:                 }
1:             }
1:         };
1: 
1:         try {
1:             org.apache.log4j.Logger.getLogger(Queue.class).addAppender(appender);
1: 
1:             MessageConsumer noDispatchConsumer = consumerSession.createConsumer(shouldBeStuckForDispatch);
1: 
1:             m = noDispatchConsumer.receive(messageReceiveTimeout);
1:             assertNull("did not get a message", m);
1: 
1:             assertTrue("Got the new warning about the blocked cursor", gotExpectedLogEvent.get());
1:         } finally {
1:             org.apache.log4j.Logger.getLogger(Queue.class).removeAppender(appender);
1:             org.apache.log4j.Logger.getRootLogger().removeAppender(appender);
1:         }
1:     }
1: }
============================================================================