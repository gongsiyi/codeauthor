1:4b3f07e: /**
1:4b3f07e:  * Licensed to the Apache Software Foundation (ASF) under one or more
1:4b3f07e:  * contributor license agreements.  See the NOTICE file distributed with
1:4b3f07e:  * this work for additional information regarding copyright ownership.
1:4b3f07e:  * The ASF licenses this file to You under the Apache License, Version 2.0
1:4b3f07e:  * (the "License"); you may not use this file except in compliance with
1:4b3f07e:  * the License.  You may obtain a copy of the License at
1:4b3f07e:  *
1:4b3f07e:  *      http://www.apache.org/licenses/LICENSE-2.0
1:4b3f07e:  *
1:4b3f07e:  * Unless required by applicable law or agreed to in writing, software
1:4b3f07e:  * distributed under the License is distributed on an "AS IS" BASIS,
1:4b3f07e:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:4b3f07e:  * See the License for the specific language governing permissions and
1:4b3f07e:  * limitations under the License.
1:4b3f07e:  */
1:f225120: package org.apache.activemq.util;
2:f225120: 
1:f225120: import java.io.File;
1:f225120: 
1:f225120: /**
1:f225120:  * @author wcrowell
1:4b3f07e:  *
1:f225120:  * LargeFile is used to simulate a large file system (e.g. exabytes in size).
1:4b3f07e:  * The getTotalSpace() method is intentionally set to exceed the largest
1:f225120:  * value of a primitive long which is 9,223,372,036,854,775,807.  A negative
1:f225120:  * number will be returned when getTotalSpace() is called.  This class is for
1:4b3f07e:  * test purposes only.  Using a mocking framework to mock the behavior of
1:f225120:  * java.io.File was a lot of work.
1:4b3f07e:  *
1:f225120:  */
1:f225120: public class LargeFile extends File {
1:f225120: 	public LargeFile(File parent, String child) {
1:f225120: 		super(parent, child);
1:f225120: 	}
1:4b3f07e: 
1:f225120: 	@Override
1:f225120: 	public long getTotalSpace() {
1:f225120: 		return Long.MAX_VALUE + 4193L;
1:f225120: 	}
1:8a28c06: 
1:8a28c06: 	@Override
1:8a28c06: 	public long getUsableSpace() {
1:8a28c06: 		return getTotalSpace() - 1024L;
1:8a28c06: 	}
1:f225120: }
============================================================================
author:Christopher L. Shannon (cshannon)
-------------------------------------------------------------------------------
commit:4b3f07e
/////////////////////////////////////////////////////////////////////////
1: /**
1:  * Licensed to the Apache Software Foundation (ASF) under one or more
1:  * contributor license agreements.  See the NOTICE file distributed with
1:  * this work for additional information regarding copyright ownership.
1:  * The ASF licenses this file to You under the Apache License, Version 2.0
1:  * (the "License"); you may not use this file except in compliance with
1:  * the License.  You may obtain a copy of the License at
1:  *
1:  *      http://www.apache.org/licenses/LICENSE-2.0
1:  *
1:  * Unless required by applicable law or agreed to in writing, software
1:  * distributed under the License is distributed on an "AS IS" BASIS,
1:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:  * See the License for the specific language governing permissions and
1:  * limitations under the License.
1:  */
1:  *
1:  * The getTotalSpace() method is intentionally set to exceed the largest
1:  * test purposes only.  Using a mocking framework to mock the behavior of
1:  *
1: 
author:gtully
-------------------------------------------------------------------------------
commit:8a28c06
/////////////////////////////////////////////////////////////////////////
1: 
1: 	@Override
1: 	public long getUsableSpace() {
1: 		return getTotalSpace() - 1024L;
1: 	}
author:William Crowell
-------------------------------------------------------------------------------
commit:f225120
/////////////////////////////////////////////////////////////////////////
1: package org.apache.activemq.util;
1: 
1: import java.io.File;
1: 
1: /**
1:  * @author wcrowell
0:  * 
1:  * LargeFile is used to simulate a large file system (e.g. exabytes in size).
0:  * The getTotalSpace() method is intentionally set to exceed the largest 
1:  * value of a primitive long which is 9,223,372,036,854,775,807.  A negative
1:  * number will be returned when getTotalSpace() is called.  This class is for
0:  * test purposes only.  Using a mocking framework to mock the behavior of 
1:  * java.io.File was a lot of work.
0:  * 
1:  */
1: public class LargeFile extends File {
1: 	public LargeFile(File parent, String child) {
1: 		super(parent, child);
1: 	}
1: 	
1: 	@Override
1: 	public long getTotalSpace() {
1: 		return Long.MAX_VALUE + 4193L;
1: 	}
1: }
============================================================================