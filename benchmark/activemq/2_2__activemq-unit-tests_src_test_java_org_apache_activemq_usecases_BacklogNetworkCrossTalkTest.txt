1:f08a178: /**
1:f08a178:  * Licensed to the Apache Software Foundation (ASF) under one or more
1:f08a178:  * contributor license agreements.  See the NOTICE file distributed with
1:f08a178:  * this work for additional information regarding copyright ownership.
1:f08a178:  * The ASF licenses this file to You under the Apache License, Version 2.0
1:f08a178:  * (the "License"); you may not use this file except in compliance with
1:f08a178:  * the License.  You may obtain a copy of the License at
1:f08a178:  *
1:f08a178:  *      http://www.apache.org/licenses/LICENSE-2.0
1:f08a178:  *
1:f08a178:  * Unless required by applicable law or agreed to in writing, software
1:f08a178:  * distributed under the License is distributed on an "AS IS" BASIS,
1:f08a178:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:f08a178:  * See the License for the specific language governing permissions and
1:f08a178:  * limitations under the License.
1:f08a178:  */
1:f08a178: package org.apache.activemq.usecases;
1:f08a178: 
1:f08a178: import java.net.URI;
1:f08a178: import javax.jms.MessageConsumer;
1:f08a178: import org.apache.activemq.JmsMultipleBrokersTestSupport;
1:f08a178: import org.apache.activemq.broker.BrokerService;
1:f08a178: import org.apache.activemq.command.ActiveMQDestination;
1:f08a178: import org.apache.activemq.network.NetworkConnector;
1:f08a178: import org.apache.activemq.util.MessageIdList;
1:f08a178: import org.slf4j.Logger;
1:f08a178: import org.slf4j.LoggerFactory;
1:f08a178: 
1:f08a178: public class BacklogNetworkCrossTalkTest extends JmsMultipleBrokersTestSupport {
1:f08a178:     private static final Logger LOG = LoggerFactory.getLogger(BacklogNetworkCrossTalkTest.class);
1:f08a178: 
1:f08a178:     protected BrokerService createBroker(String brokerName) throws Exception {
1:f08a178:         BrokerService broker = new BrokerService();
1:f08a178:         broker.setDeleteAllMessagesOnStartup(true);
1:f08a178:         broker.setPersistent(true);
1:f08a178:         broker.setUseJmx(false);
1:f08a178:         broker.setBrokerName(brokerName);
1:f08a178:         broker.addConnector(new URI(AUTO_ASSIGN_TRANSPORT));
1:f08a178:         brokers.put(brokerName, new BrokerItem(broker));
1:f08a178: 
1:f08a178:         return broker;
1:f08a178:     }
1:f08a178: 
1:f08a178:     public void testProduceConsume() throws Exception {
1:f08a178:         createBroker("A");
1:f08a178:         createBroker("B");
1:f08a178: 
1:f08a178:         NetworkConnector nc = bridgeBrokers("A", "B");
1:f08a178:         nc.setDuplex(true);
1:f08a178:         nc.setDispatchAsync(false);
1:f08a178:         startAllBrokers();
1:f08a178: 
1:f08a178:         waitForBridgeFormation();
1:f08a178: 
1:4ef1fc7:         final int numMessages = 1000;
1:f08a178:         // Create queue
1:f08a178:         ActiveMQDestination destA = createDestination("AAA", false);
1:f08a178:         sendMessages("A", destA, numMessages);
1:f08a178: 
1:f08a178:         ActiveMQDestination destB = createDestination("BBB", false);
1:f08a178:         sendMessages("B", destB, numMessages);
1:f08a178: 
1:f08a178:         // consume across network
1:f08a178:         LOG.info("starting consumers..");
1:f08a178: 
1:f08a178:         // Setup consumers
1:f08a178:         MessageConsumer clientA = createConsumer("A", destB);
1:f08a178:         // Setup consumers
1:f08a178:         MessageConsumer clientB = createConsumer("B", destA);
1:f08a178: 
1:f08a178: 
1:f08a178:         final long maxWait = 5 * 60 * 1000l;
1:f08a178:         MessageIdList listA = getConsumerMessages("A", clientA);
1:f08a178:         listA.setMaximumDuration(maxWait);
1:f08a178:         listA.waitForMessagesToArrive(numMessages);
1:f08a178: 
1:f08a178:         MessageIdList listB = getConsumerMessages("B", clientB);
1:f08a178:         listB.setMaximumDuration(maxWait);
1:f08a178:         listB.waitForMessagesToArrive(numMessages);
1:f08a178: 
1:f08a178:         assertEquals("got all on A" + listA.getMessageCount(),
1:f08a178:                 numMessages, listA.getMessageCount());
1:f08a178: 
1:f08a178:         assertEquals("got all on B" + listB.getMessageCount(),
1:f08a178:                 numMessages, listB.getMessageCount());
1:f08a178: 
1:f08a178:     }
1:f08a178: 
1:f08a178:     @Override
1:f08a178:     public void setUp() throws Exception {
1:4ef1fc7:         messageSize = 5000;
1:f08a178:         super.setMaxTestTime(10*60*1000);
1:f08a178:         super.setAutoFail(true);
1:f08a178:         super.setUp();
1:f08a178:     }
1:f08a178: }
============================================================================
author:gtully
-------------------------------------------------------------------------------
commit:4ef1fc7
/////////////////////////////////////////////////////////////////////////
1:         final int numMessages = 1000;
/////////////////////////////////////////////////////////////////////////
1:         messageSize = 5000;
commit:7c04aa9
/////////////////////////////////////////////////////////////////////////
0:         final int numMessages = 2000;
/////////////////////////////////////////////////////////////////////////
0:         messageSize = 500;
author:Gary Tully
-------------------------------------------------------------------------------
commit:f08a178
/////////////////////////////////////////////////////////////////////////
1: /**
1:  * Licensed to the Apache Software Foundation (ASF) under one or more
1:  * contributor license agreements.  See the NOTICE file distributed with
1:  * this work for additional information regarding copyright ownership.
1:  * The ASF licenses this file to You under the Apache License, Version 2.0
1:  * (the "License"); you may not use this file except in compliance with
1:  * the License.  You may obtain a copy of the License at
1:  *
1:  *      http://www.apache.org/licenses/LICENSE-2.0
1:  *
1:  * Unless required by applicable law or agreed to in writing, software
1:  * distributed under the License is distributed on an "AS IS" BASIS,
1:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:  * See the License for the specific language governing permissions and
1:  * limitations under the License.
1:  */
1: package org.apache.activemq.usecases;
1: 
1: import java.net.URI;
1: import javax.jms.MessageConsumer;
1: import org.apache.activemq.JmsMultipleBrokersTestSupport;
1: import org.apache.activemq.broker.BrokerService;
1: import org.apache.activemq.command.ActiveMQDestination;
1: import org.apache.activemq.network.NetworkConnector;
1: import org.apache.activemq.util.MessageIdList;
1: import org.slf4j.Logger;
1: import org.slf4j.LoggerFactory;
1: 
1: public class BacklogNetworkCrossTalkTest extends JmsMultipleBrokersTestSupport {
1:     private static final Logger LOG = LoggerFactory.getLogger(BacklogNetworkCrossTalkTest.class);
1: 
1:     protected BrokerService createBroker(String brokerName) throws Exception {
1:         BrokerService broker = new BrokerService();
1:         broker.setDeleteAllMessagesOnStartup(true);
1:         broker.setPersistent(true);
1:         broker.setUseJmx(false);
1:         broker.setBrokerName(brokerName);
1:         broker.addConnector(new URI(AUTO_ASSIGN_TRANSPORT));
1:         brokers.put(brokerName, new BrokerItem(broker));
1: 
1:         return broker;
1:     }
1: 
1:     public void testProduceConsume() throws Exception {
1:         createBroker("A");
1:         createBroker("B");
1: 
1:         NetworkConnector nc = bridgeBrokers("A", "B");
1:         nc.setDuplex(true);
1:         nc.setDispatchAsync(false);
1:         startAllBrokers();
1: 
1:         waitForBridgeFormation();
1: 
0:         final int numMessages = 10000;
1:         // Create queue
1:         ActiveMQDestination destA = createDestination("AAA", false);
1:         sendMessages("A", destA, numMessages);
1: 
1:         ActiveMQDestination destB = createDestination("BBB", false);
1:         sendMessages("B", destB, numMessages);
1: 
1:         // consume across network
1:         LOG.info("starting consumers..");
1: 
1:         // Setup consumers
1:         MessageConsumer clientA = createConsumer("A", destB);
1:         // Setup consumers
1:         MessageConsumer clientB = createConsumer("B", destA);
1: 
1: 
1:         final long maxWait = 5 * 60 * 1000l;
1:         MessageIdList listA = getConsumerMessages("A", clientA);
1:         listA.setMaximumDuration(maxWait);
1:         listA.waitForMessagesToArrive(numMessages);
1: 
1:         MessageIdList listB = getConsumerMessages("B", clientB);
1:         listB.setMaximumDuration(maxWait);
1:         listB.waitForMessagesToArrive(numMessages);
1: 
1:         assertEquals("got all on A" + listA.getMessageCount(),
1:                 numMessages, listA.getMessageCount());
1: 
1:         assertEquals("got all on B" + listB.getMessageCount(),
1:                 numMessages, listB.getMessageCount());
1: 
1:     }
1: 
1:     @Override
1:     public void setUp() throws Exception {
0:         messageSize = 5000;
1:         super.setMaxTestTime(10*60*1000);
1:         super.setAutoFail(true);
1:         super.setUp();
1:     }
1: }
============================================================================