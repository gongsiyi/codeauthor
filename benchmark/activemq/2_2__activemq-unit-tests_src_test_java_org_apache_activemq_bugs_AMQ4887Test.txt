1:8b06c44: /**
1:8b06c44:  * Licensed to the Apache Software Foundation (ASF) under one or more
1:8b06c44:  * contributor license agreements.  See the NOTICE file distributed with
1:8b06c44:  * this work for additional information regarding copyright ownership.
1:8b06c44:  * The ASF licenses this file to You under the Apache License, Version 2.0
1:8b06c44:  * (the "License"); you may not use this file except in compliance with
1:8b06c44:  * the License.  You may obtain a copy of the License at
1:8b06c44:  *
1:8b06c44:  *      http://www.apache.org/licenses/LICENSE-2.0
1:8b06c44:  *
1:8b06c44:  * Unless required by applicable law or agreed to in writing, software
1:8b06c44:  * distributed under the License is distributed on an "AS IS" BASIS,
1:8b06c44:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:8b06c44:  * See the License for the specific language governing permissions and
1:8b06c44:  * limitations under the License.
1:8b06c44:  */
1:8b06c44: package org.apache.activemq.bugs;
3:8b06c44: 
1:d0f1dd6: import static org.junit.Assert.assertEquals;
1:d0f1dd6: import static org.junit.Assert.assertNotNull;
1:d0f1dd6: import static org.junit.Assert.assertTrue;
1:d0f1dd6: 
1:d0f1dd6: import javax.jms.BytesMessage;
1:d0f1dd6: import javax.jms.Connection;
1:d0f1dd6: import javax.jms.Destination;
1:d0f1dd6: import javax.jms.Message;
1:d0f1dd6: import javax.jms.MessageConsumer;
1:d0f1dd6: import javax.jms.MessageProducer;
1:d0f1dd6: import javax.jms.Session;
1:d0f1dd6: import javax.jms.StreamMessage;
1:d0f1dd6: 
1:8b06c44: import org.apache.activemq.ActiveMQConnection;
1:8b06c44: import org.apache.activemq.ActiveMQConnectionFactory;
1:8b06c44: import org.junit.Rule;
1:8b06c44: import org.junit.Test;
1:8b06c44: import org.junit.rules.TestName;
1:8b06c44: import org.slf4j.Logger;
1:8b06c44: import org.slf4j.LoggerFactory;
1:8b06c44: 
1:8b06c44: public class AMQ4887Test {
1:8b06c44:     private static final transient Logger LOG = LoggerFactory.getLogger(AMQ4887Test.class);
1:8b06c44:     private static final Integer ITERATIONS = 10;
1:d0f1dd6: 
1:8b06c44:     @Rule
1:8b06c44:     public TestName name = new TestName();
1:8b06c44: 
1:8b06c44:     @Test
1:d0f1dd6:     public void testBytesMessageSetPropertyBeforeCopy() throws Exception {
1:8b06c44:         ActiveMQConnectionFactory connectionFactory = new ActiveMQConnectionFactory("vm://localhost");
1:8b06c44:         ActiveMQConnection connection = (ActiveMQConnection) connectionFactory.createConnection();
1:8b06c44:         connection.start();
1:d0f1dd6:         doTestBytesMessageSetPropertyBeforeCopy(connection);
1:d0f1dd6:     }
1:d0f1dd6: 
1:d0f1dd6:     @Test
1:d0f1dd6:     public void testBytesMessageSetPropertyBeforeCopyCompressed() throws Exception {
1:d0f1dd6:         ActiveMQConnectionFactory connectionFactory = new ActiveMQConnectionFactory("vm://localhost");
1:d0f1dd6:         connectionFactory.setUseCompression(true);
1:d0f1dd6:         ActiveMQConnection connection = (ActiveMQConnection) connectionFactory.createConnection();
1:d0f1dd6:         connection.start();
1:d0f1dd6:         doTestBytesMessageSetPropertyBeforeCopy(connection);
1:d0f1dd6:     }
1:d0f1dd6: 
1:d0f1dd6:     public void doTestBytesMessageSetPropertyBeforeCopy(Connection connection) throws Exception {
1:8b06c44: 
1:8b06c44:         Session session = connection.createSession(false, Session.AUTO_ACKNOWLEDGE);
1:8b06c44:         Destination destination = session.createQueue(name.toString());
1:8b06c44:         MessageConsumer consumer = session.createConsumer(destination);
1:8b06c44:         MessageProducer producer = session.createProducer(destination);
1:8b06c44: 
1:d0f1dd6:         BytesMessage message = session.createBytesMessage();
1:8b06c44: 
1:8b06c44:         for (int i=0; i < ITERATIONS; i++) {
1:d0f1dd6: 
1:8b06c44:             long sendTime = System.currentTimeMillis();
1:d0f1dd6:             message.setLongProperty("sendTime", sendTime);
1:d0f1dd6:             producer.send(message);
1:8b06c44: 
1:8b06c44:             LOG.debug("Receiving message " + i);
1:8b06c44:             Message receivedMessage =  consumer.receive(5000);
1:8b06c44:             assertNotNull("On message " + i, receivedMessage);
1:8b06c44:             assertTrue("On message " + i, receivedMessage instanceof BytesMessage);
1:8b06c44: 
1:8b06c44:             BytesMessage receivedBytesMessage = (BytesMessage) receivedMessage;
1:d0f1dd6: 
1:d0f1dd6:             int numElements = 0;
1:d0f1dd6:             try {
1:d0f1dd6:                 while (true) {
1:d0f1dd6:                     receivedBytesMessage.readBoolean();
1:d0f1dd6:                     numElements++;
1:d0f1dd6:                 }
1:d0f1dd6:             } catch (Exception ex) {
1:d0f1dd6:             }
1:d0f1dd6: 
1:d0f1dd6:             LOG.info("Iteration [{}]: Received Message contained {} boolean values.", i, numElements);
1:d0f1dd6:             assertEquals(i, numElements);
1:8b06c44: 
1:8b06c44:             long receivedSendTime = receivedBytesMessage.getLongProperty("sendTime");
1:8b06c44:             assertEquals("On message " + i, receivedSendTime, sendTime);
1:d0f1dd6: 
1:d0f1dd6:             // Add a new bool value on each iteration.
1:d0f1dd6:             message.writeBoolean(true);
1:d0f1dd6:         }
1:d0f1dd6:     }
1:d0f1dd6: 
1:d0f1dd6:     @Test
1:d0f1dd6:     public void testStreamMessageSetPropertyBeforeCopy() throws Exception {
1:d0f1dd6:         ActiveMQConnectionFactory connectionFactory = new ActiveMQConnectionFactory("vm://localhost");
1:d0f1dd6:         ActiveMQConnection connection = (ActiveMQConnection) connectionFactory.createConnection();
1:d0f1dd6:         connection.start();
1:d0f1dd6:         doTestStreamMessageSetPropertyBeforeCopy(connection);
1:d0f1dd6:     }
1:d0f1dd6: 
1:d0f1dd6:     @Test
1:d0f1dd6:     public void testStreamMessageSetPropertyBeforeCopyCompressed() throws Exception {
1:d0f1dd6:         ActiveMQConnectionFactory connectionFactory = new ActiveMQConnectionFactory("vm://localhost");
1:d0f1dd6:         connectionFactory.setUseCompression(true);
1:d0f1dd6:         ActiveMQConnection connection = (ActiveMQConnection) connectionFactory.createConnection();
1:d0f1dd6:         connection.start();
1:d0f1dd6:         doTestStreamMessageSetPropertyBeforeCopy(connection);
1:d0f1dd6:     }
1:d0f1dd6: 
1:d0f1dd6:     public void doTestStreamMessageSetPropertyBeforeCopy(Connection connection) throws Exception {
1:d0f1dd6: 
1:d0f1dd6:         Session session = connection.createSession(false, Session.AUTO_ACKNOWLEDGE);
1:d0f1dd6:         Destination destination = session.createQueue(name.toString());
1:d0f1dd6:         MessageConsumer consumer = session.createConsumer(destination);
1:d0f1dd6:         MessageProducer producer = session.createProducer(destination);
1:d0f1dd6: 
1:d0f1dd6:         StreamMessage message = session.createStreamMessage();
1:d0f1dd6: 
1:d0f1dd6:         for (int i=0; i < ITERATIONS; i++) {
1:d0f1dd6: 
1:d0f1dd6:             long sendTime = System.currentTimeMillis();
1:d0f1dd6:             message.setLongProperty("sendTime", sendTime);
1:d0f1dd6:             producer.send(message);
1:d0f1dd6: 
1:d0f1dd6:             LOG.debug("Receiving message " + i);
1:d0f1dd6:             Message receivedMessage =  consumer.receive(5000);
1:d0f1dd6:             assertNotNull("On message " + i, receivedMessage);
1:d0f1dd6:             assertTrue("On message " + i, receivedMessage instanceof StreamMessage);
1:d0f1dd6: 
1:d0f1dd6:             StreamMessage receivedStreamMessage = (StreamMessage) receivedMessage;
1:d0f1dd6: 
1:d0f1dd6:             int numElements = 0;
1:d0f1dd6:             try {
1:d0f1dd6:                 while (true) {
1:d0f1dd6:                     receivedStreamMessage.readBoolean();
1:d0f1dd6:                     numElements++;
1:d0f1dd6:                 }
1:d0f1dd6:             } catch (Exception ex) {
1:d0f1dd6:             }
1:d0f1dd6: 
1:d0f1dd6:             LOG.info("Iteration [{}]: Received Message contained {} boolean values.", i, numElements);
1:d0f1dd6:             assertEquals(i, numElements);
1:8b06c44: 
1:d0f1dd6:             long receivedSendTime = receivedStreamMessage.getLongProperty("sendTime");
1:d0f1dd6:             assertEquals("On message " + i, receivedSendTime, sendTime);
1:d0f1dd6: 
1:d0f1dd6:             // Add a new bool value on each iteration.
1:d0f1dd6:             message.writeBoolean(true);
1:8b06c44:         }
1:8b06c44:     }
1:8b06c44: 
1:8b06c44: }
============================================================================
author:Timothy Bish
-------------------------------------------------------------------------------
commit:d0f1dd6
/////////////////////////////////////////////////////////////////////////
1: import static org.junit.Assert.assertEquals;
1: import static org.junit.Assert.assertNotNull;
1: import static org.junit.Assert.assertTrue;
1: 
1: import javax.jms.BytesMessage;
1: import javax.jms.Connection;
1: import javax.jms.Destination;
1: import javax.jms.Message;
1: import javax.jms.MessageConsumer;
1: import javax.jms.MessageProducer;
1: import javax.jms.Session;
1: import javax.jms.StreamMessage;
1: 
/////////////////////////////////////////////////////////////////////////
1: 
1:     public void testBytesMessageSetPropertyBeforeCopy() throws Exception {
1:         doTestBytesMessageSetPropertyBeforeCopy(connection);
1:     }
1: 
1:     @Test
1:     public void testBytesMessageSetPropertyBeforeCopyCompressed() throws Exception {
1:         ActiveMQConnectionFactory connectionFactory = new ActiveMQConnectionFactory("vm://localhost");
1:         connectionFactory.setUseCompression(true);
1:         ActiveMQConnection connection = (ActiveMQConnection) connectionFactory.createConnection();
1:         connection.start();
1:         doTestBytesMessageSetPropertyBeforeCopy(connection);
1:     }
1: 
1:     public void doTestBytesMessageSetPropertyBeforeCopy(Connection connection) throws Exception {
1:         BytesMessage message = session.createBytesMessage();
1: 
1:             message.setLongProperty("sendTime", sendTime);
1:             producer.send(message);
/////////////////////////////////////////////////////////////////////////
1: 
1:             int numElements = 0;
1:             try {
1:                 while (true) {
1:                     receivedBytesMessage.readBoolean();
1:                     numElements++;
1:                 }
1:             } catch (Exception ex) {
1:             }
1: 
1:             LOG.info("Iteration [{}]: Received Message contained {} boolean values.", i, numElements);
1:             assertEquals(i, numElements);
1:             // Add a new bool value on each iteration.
1:             message.writeBoolean(true);
1:         }
1:     }
1: 
1:     @Test
1:     public void testStreamMessageSetPropertyBeforeCopy() throws Exception {
1:         ActiveMQConnectionFactory connectionFactory = new ActiveMQConnectionFactory("vm://localhost");
1:         ActiveMQConnection connection = (ActiveMQConnection) connectionFactory.createConnection();
1:         connection.start();
1:         doTestStreamMessageSetPropertyBeforeCopy(connection);
1:     }
1: 
1:     @Test
1:     public void testStreamMessageSetPropertyBeforeCopyCompressed() throws Exception {
1:         ActiveMQConnectionFactory connectionFactory = new ActiveMQConnectionFactory("vm://localhost");
1:         connectionFactory.setUseCompression(true);
1:         ActiveMQConnection connection = (ActiveMQConnection) connectionFactory.createConnection();
1:         connection.start();
1:         doTestStreamMessageSetPropertyBeforeCopy(connection);
1:     }
1: 
1:     public void doTestStreamMessageSetPropertyBeforeCopy(Connection connection) throws Exception {
1: 
1:         Session session = connection.createSession(false, Session.AUTO_ACKNOWLEDGE);
1:         Destination destination = session.createQueue(name.toString());
1:         MessageConsumer consumer = session.createConsumer(destination);
1:         MessageProducer producer = session.createProducer(destination);
1: 
1:         StreamMessage message = session.createStreamMessage();
1: 
1:         for (int i=0; i < ITERATIONS; i++) {
1: 
1:             long sendTime = System.currentTimeMillis();
1:             message.setLongProperty("sendTime", sendTime);
1:             producer.send(message);
1: 
1:             LOG.debug("Receiving message " + i);
1:             Message receivedMessage =  consumer.receive(5000);
1:             assertNotNull("On message " + i, receivedMessage);
1:             assertTrue("On message " + i, receivedMessage instanceof StreamMessage);
1: 
1:             StreamMessage receivedStreamMessage = (StreamMessage) receivedMessage;
1: 
1:             int numElements = 0;
1:             try {
1:                 while (true) {
1:                     receivedStreamMessage.readBoolean();
1:                     numElements++;
1:                 }
1:             } catch (Exception ex) {
1:             }
1: 
1:             LOG.info("Iteration [{}]: Received Message contained {} boolean values.", i, numElements);
1:             assertEquals(i, numElements);
1: 
1:             long receivedSendTime = receivedStreamMessage.getLongProperty("sendTime");
1:             assertEquals("On message " + i, receivedSendTime, sendTime);
1: 
1:             // Add a new bool value on each iteration.
1:             message.writeBoolean(true);
author:Kevin Earls
-------------------------------------------------------------------------------
commit:8b06c44
/////////////////////////////////////////////////////////////////////////
1: /**
1:  * Licensed to the Apache Software Foundation (ASF) under one or more
1:  * contributor license agreements.  See the NOTICE file distributed with
1:  * this work for additional information regarding copyright ownership.
1:  * The ASF licenses this file to You under the Apache License, Version 2.0
1:  * (the "License"); you may not use this file except in compliance with
1:  * the License.  You may obtain a copy of the License at
1:  *
1:  *      http://www.apache.org/licenses/LICENSE-2.0
1:  *
1:  * Unless required by applicable law or agreed to in writing, software
1:  * distributed under the License is distributed on an "AS IS" BASIS,
1:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:  * See the License for the specific language governing permissions and
1:  * limitations under the License.
1:  */
1: package org.apache.activemq.bugs;
1: 
1: import org.apache.activemq.ActiveMQConnection;
1: import org.apache.activemq.ActiveMQConnectionFactory;
1: import org.junit.Rule;
1: import org.junit.Test;
1: import org.junit.rules.TestName;
1: import org.slf4j.Logger;
1: import org.slf4j.LoggerFactory;
1: 
0: import javax.jms.BytesMessage;
0: import javax.jms.Destination;
0: import javax.jms.Message;
0: import javax.jms.MessageConsumer;
0: import javax.jms.MessageProducer;
0: import javax.jms.Session;
1: 
0: import static org.junit.Assert.*;
1: 
1: public class AMQ4887Test {
1:     private static final transient Logger LOG = LoggerFactory.getLogger(AMQ4887Test.class);
1:     private static final Integer ITERATIONS = 10;
1:     @Rule
1:     public TestName name = new TestName();
1: 
1:     @Test
0:     public void testSetPropertyBeforeCopy() throws Exception {
1:         ActiveMQConnectionFactory connectionFactory = new ActiveMQConnectionFactory("vm://localhost");
1:         ActiveMQConnection connection = (ActiveMQConnection) connectionFactory.createConnection();
1:         connection.start();
1: 
1:         Session session = connection.createSession(false, Session.AUTO_ACKNOWLEDGE);
1:         Destination destination = session.createQueue(name.toString());
1:         MessageConsumer consumer = session.createConsumer(destination);
1:         MessageProducer producer = session.createProducer(destination);
1: 
0:         byte[] messageContent = "bytes message".getBytes();
0:         BytesMessage bytesMessage = session.createBytesMessage();
0:         bytesMessage.writeBytes(messageContent);
1: 
1:         for (int i=0; i < ITERATIONS; i++) {
1:             long sendTime = System.currentTimeMillis();
0:             bytesMessage.setLongProperty("sendTime", sendTime);
0:             producer.send(bytesMessage);
1: 
1:             LOG.debug("Receiving message " + i);
1:             Message receivedMessage =  consumer.receive(5000);
1:             assertNotNull("On message " + i, receivedMessage);
1:             assertTrue("On message " + i, receivedMessage instanceof BytesMessage);
1: 
1:             BytesMessage receivedBytesMessage = (BytesMessage) receivedMessage;
0:             byte[] receivedBytes = new byte[(int) receivedBytesMessage.getBodyLength()];
0:             receivedBytesMessage.readBytes(receivedBytes);
0:             LOG.debug("Message " + i + " content [" + new String(receivedBytes) + "]");
0:             assertEquals("On message " + i, messageContent.length, receivedBytes.length);
0:             assertArrayEquals("On message " + i, messageContent, receivedBytes);
1: 
1:             long receivedSendTime = receivedBytesMessage.getLongProperty("sendTime");
1:             assertEquals("On message " + i, receivedSendTime, sendTime);
1: 
0:             Thread.sleep(10);
1:         }
1:     }
1: 
1: }
============================================================================