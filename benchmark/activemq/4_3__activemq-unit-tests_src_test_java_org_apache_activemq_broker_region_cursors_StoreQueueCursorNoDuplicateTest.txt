1:9bb4682: /**
1:9bb4682:  * Licensed to the Apache Software Foundation (ASF) under one or more
1:9bb4682:  * contributor license agreements.  See the NOTICE file distributed with
1:9bb4682:  * this work for additional information regarding copyright ownership.
1:9bb4682:  * The ASF licenses this file to You under the Apache License, Version 2.0
1:9bb4682:  * (the "License"); you may not use this file except in compliance with
1:9bb4682:  * the License.  You may obtain a copy of the License at
1:9bb4682:  *
1:9bb4682:  *      http://www.apache.org/licenses/LICENSE-2.0
1:9bb4682:  *
1:9bb4682:  * Unless required by applicable law or agreed to in writing, software
1:9bb4682:  * distributed under the License is distributed on an "AS IS" BASIS,
1:9bb4682:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:9bb4682:  * See the License for the specific language governing permissions and
1:9bb4682:  * limitations under the License.
1:9bb4682:  */
4:9bb4682: 
1:9bb4682: package org.apache.activemq.broker.region.cursors;
1:d8cf54b: 
1:9bb4682: import junit.framework.TestCase;
1:9bb4682: 
1:9bb4682: import org.apache.activemq.broker.BrokerService;
1:9bb4682: import org.apache.activemq.broker.ConnectionContext;
1:9bb4682: import org.apache.activemq.broker.region.DestinationStatistics;
1:9bb4682: import org.apache.activemq.broker.region.MessageReference;
1:9bb4682: import org.apache.activemq.broker.region.Queue;
1:9bb4682: import org.apache.activemq.command.ActiveMQQueue;
1:9bb4682: import org.apache.activemq.command.ActiveMQTextMessage;
1:9bb4682: import org.apache.activemq.command.ConsumerInfo;
1:9bb4682: import org.apache.activemq.command.MessageId;
1:9bb4682: import org.apache.activemq.store.MessageStore;
1:9bb4682: import org.apache.activemq.store.PersistenceAdapter;
1:9bb4682: import org.apache.activemq.usage.SystemUsage;
1:cf62d58: import org.slf4j.Logger;
1:cf62d58: import org.slf4j.LoggerFactory;
1:9bb4682: 
1:9bb4682: /**
1:9bb4682:  * @author gtully
1:aad7e73:  * https://issues.apache.org/activemq/browse/AMQ-2020
1:9bb4682:  **/
1:9bb4682: public class StoreQueueCursorNoDuplicateTest extends TestCase {
1:cf62d58:     static final Logger LOG = LoggerFactory.getLogger(StoreQueueCursorNoDuplicateTest.class);
1:cf62d58:             ActiveMQQueue destination = new ActiveMQQueue("queue-"
1:9bb4682:             + StoreQueueCursorNoDuplicateTest.class.getSimpleName());
1:9bb4682:     BrokerService brokerService;
1:9bb4682: 
1:f80071f:     final static String mesageIdRoot = "11111:22222:0:";
1:9bb4682:     final int messageBytesSize = 1024;
1:9bb4682:     final String text = new String(new byte[messageBytesSize]);
1:9bb4682: 
1:9bb4682:     protected int count = 6;
1:9bb4682: 
1:f80071f:     @Override
1:9bb4682:     public void setUp() throws Exception {
1:9bb4682:         brokerService = createBroker();
1:9bb4682:         brokerService.setUseJmx(false);
1:9bb4682:         brokerService.deleteAllMessages();
1:9bb4682:         brokerService.start();
1:9bb4682:     }
1:9bb4682: 
1:9bb4682:     protected BrokerService createBroker() throws Exception {
1:9bb4682:         return new BrokerService();
1:9bb4682:     }
1:9bb4682: 
1:f80071f:     @Override
1:9bb4682:     public void tearDown() throws Exception {
1:9bb4682:         brokerService.stop();
1:9bb4682:     }
1:9bb4682: 
1:9bb4682:     public void testNoDuplicateAfterCacheFullAndReadPast() throws Exception {
1:9bb4682:         final PersistenceAdapter persistenceAdapter = brokerService
1:9bb4682:                 .getPersistenceAdapter();
1:9bb4682:         final MessageStore queueMessageStore = persistenceAdapter
1:9bb4682:                 .createQueueMessageStore(destination);
1:9bb4682:         final ConsumerInfo consumerInfo = new ConsumerInfo();
1:9bb4682:         final DestinationStatistics destinationStatistics = new DestinationStatistics();
1:9bb4682:         consumerInfo.setExclusive(true);
1:9bb4682: 
1:9bb4682:         final Queue queue = new Queue(brokerService, destination,
1:9bb4682:                 queueMessageStore, destinationStatistics, null);
1:9bb4682: 
1:9bb4682:         queueMessageStore.start();
1:54e2e3b:         queueMessageStore.registerIndexListener(null);
1:d8cf54b: 
1:13ec994:         QueueStorePrefetch underTest = new QueueStorePrefetch(queue, brokerService.getBroker());
1:9bb4682:         SystemUsage systemUsage = new SystemUsage();
1:9bb4682:         // ensure memory limit is reached
1:13ec994:         systemUsage.getMemoryUsage().setLimit(messageBytesSize * (count + 2));
1:9bb4682:         underTest.setSystemUsage(systemUsage);
1:9bb4682:         underTest.setEnableAudit(false);
1:9bb4682:         underTest.start();
1:aad7e73:         assertTrue("cache enabled", underTest.isUseCache() && underTest.isCacheEnabled());
1:9bb4682: 
1:9bb4682:         final ConnectionContext contextNotInTx = new ConnectionContext();
1:9bb4682:         for (int i = 0; i < count; i++) {
1:9bb4682:             ActiveMQTextMessage msg = getMessage(i);
1:9bb4682:             msg.setMemoryUsage(systemUsage.getMemoryUsage());
1:9bb4682: 
1:9bb4682:             queueMessageStore.addMessage(contextNotInTx, msg);
1:9bb4682:             underTest.addMessageLast(msg);
1:9bb4682:         }
1:9bb4682: 
1:aad7e73:         assertTrue("cache is disabled as limit reached", !underTest.isCacheEnabled());
1:9bb4682:         int dequeueCount = 0;
1:9bb4682: 
1:9bb4682:         underTest.setMaxBatchSize(2);
1:9bb4682:         underTest.reset();
1:9bb4682:         while (underTest.hasNext() && dequeueCount < count) {
1:9bb4682:             MessageReference ref = underTest.next();
1:5619cd0:             ref.decrementReferenceCount();
1:9bb4682:             underTest.remove();
1:cf62d58:             LOG.info("Received message: {} with body: {}",
1:13ec994:                      ref.getMessageId(), ((ActiveMQTextMessage)ref.getMessage()).getText());
1:f80071f:             assertEquals(dequeueCount++, ref.getMessageId().getProducerSequenceId());
1:9bb4682:         }
1:9bb4682:         underTest.release();
1:9bb4682:         assertEquals(count, dequeueCount);
1:9bb4682:     }
1:d8cf54b: 
1:9bb4682:     private ActiveMQTextMessage getMessage(int i) throws Exception {
1:9bb4682:         ActiveMQTextMessage message = new ActiveMQTextMessage();
1:9bb4682:         MessageId id = new MessageId(mesageIdRoot + i);
1:9bb4682:         id.setBrokerSequenceId(i);
1:9bb4682:         id.setProducerSequenceId(i);
1:9bb4682:         message.setMessageId(id);
1:9bb4682:         message.setDestination(destination);
1:9bb4682:         message.setPersistent(true);
1:9bb4682:         message.setResponseRequired(true);
1:9bb4682:         message.setText("Msg:" + i + " " + text);
1:9bb4682:         assertEquals(message.getMessageId().getProducerSequenceId(), i);
1:9bb4682:         return message;
1:9bb4682:     }
1:9bb4682: }
============================================================================
author:gtully
-------------------------------------------------------------------------------
commit:13ec994
/////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////
1:         QueueStorePrefetch underTest = new QueueStorePrefetch(queue, brokerService.getBroker());
1:         systemUsage.getMemoryUsage().setLimit(messageBytesSize * (count + 2));
/////////////////////////////////////////////////////////////////////////
1:                      ref.getMessageId(), ((ActiveMQTextMessage)ref.getMessage()).getText());
commit:d8cf54b
/////////////////////////////////////////////////////////////////////////
0: import org.apache.activemq.command.MessageAck;
/////////////////////////////////////////////////////////////////////////
0:         QueueStorePrefetch underTest = new QueueStorePrefetch(queue);
1: 
0:         ActiveMQTextMessage sampleMessage = getMessage(0);
0:         int unitSize = sampleMessage.getSize();
1: 
0:         systemUsage.getMemoryUsage().setLimit(unitSize * count);
/////////////////////////////////////////////////////////////////////////
0:                     ref.getMessageId(), ((ActiveMQTextMessage) ref.getMessage()).getText());
1: 
0:             // memory store keeps a message ref that needs releasing to free usage
0:             queueMessageStore.removeMessage(contextNotInTx, new MessageAck(ref.getMessage(), MessageAck.STANDARD_ACK_TYPE, 1));
commit:cf62d58
/////////////////////////////////////////////////////////////////////////
1: import org.slf4j.Logger;
1: import org.slf4j.LoggerFactory;
1:     static final Logger LOG = LoggerFactory.getLogger(StoreQueueCursorNoDuplicateTest.class);
1:             ActiveMQQueue destination = new ActiveMQQueue("queue-"
/////////////////////////////////////////////////////////////////////////
1:             LOG.info("Received message: {} with body: {}",
commit:54e2e3b
/////////////////////////////////////////////////////////////////////////
1:         queueMessageStore.registerIndexListener(null);
author:Timothy A. Bish
-------------------------------------------------------------------------------
commit:f80071f
/////////////////////////////////////////////////////////////////////////
0: import org.mortbay.log.Log;
/////////////////////////////////////////////////////////////////////////
1:     final static String mesageIdRoot = "11111:22222:0:";
1:     @Override
/////////////////////////////////////////////////////////////////////////
1:     @Override
/////////////////////////////////////////////////////////////////////////
0:             Log.info("Received message: {} with body: {}",
0:                      ref.getMessageId(), ((ActiveMQTextMessage)ref.getMessage()).getText());
1:             assertEquals(dequeueCount++, ref.getMessageId().getProducerSequenceId());
commit:ef24cc9
author:Bosanac Dejan
-------------------------------------------------------------------------------
commit:7450a32
/////////////////////////////////////////////////////////////////////////
0:         QueueStorePrefetch underTest = new QueueStorePrefetch(queue, brokerService.getBroker());
author:Gary Tully
-------------------------------------------------------------------------------
commit:aad7e73
/////////////////////////////////////////////////////////////////////////
1:  * https://issues.apache.org/activemq/browse/AMQ-2020
/////////////////////////////////////////////////////////////////////////
1:         assertTrue("cache enabled", underTest.isUseCache() && underTest.isCacheEnabled());
/////////////////////////////////////////////////////////////////////////
1:         assertTrue("cache is disabled as limit reached", !underTest.isCacheEnabled());
commit:5619cd0
/////////////////////////////////////////////////////////////////////////
1:             ref.decrementReferenceCount();
commit:9bb4682
/////////////////////////////////////////////////////////////////////////
1: /**
1:  * Licensed to the Apache Software Foundation (ASF) under one or more
1:  * contributor license agreements.  See the NOTICE file distributed with
1:  * this work for additional information regarding copyright ownership.
1:  * The ASF licenses this file to You under the Apache License, Version 2.0
1:  * (the "License"); you may not use this file except in compliance with
1:  * the License.  You may obtain a copy of the License at
1:  *
1:  *      http://www.apache.org/licenses/LICENSE-2.0
1:  *
1:  * Unless required by applicable law or agreed to in writing, software
1:  * distributed under the License is distributed on an "AS IS" BASIS,
1:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:  * See the License for the specific language governing permissions and
1:  * limitations under the License.
1:  */
1: 
1: package org.apache.activemq.broker.region.cursors;
1: 
1: import junit.framework.TestCase;
1: 
1: import org.apache.activemq.broker.BrokerService;
1: import org.apache.activemq.broker.ConnectionContext;
1: import org.apache.activemq.broker.region.DestinationStatistics;
1: import org.apache.activemq.broker.region.MessageReference;
1: import org.apache.activemq.broker.region.Queue;
1: import org.apache.activemq.command.ActiveMQQueue;
1: import org.apache.activemq.command.ActiveMQTextMessage;
1: import org.apache.activemq.command.ConsumerInfo;
1: import org.apache.activemq.command.MessageId;
1: import org.apache.activemq.store.MessageStore;
1: import org.apache.activemq.store.PersistenceAdapter;
1: import org.apache.activemq.usage.SystemUsage;
1: 
1: /**
1:  * @author gtully
0:  * @see https://issues.apache.org/activemq/browse/AMQ-2020
1:  **/
1: public class StoreQueueCursorNoDuplicateTest extends TestCase {
0:     ActiveMQQueue destination = new ActiveMQQueue("queue-"
1:             + StoreQueueCursorNoDuplicateTest.class.getSimpleName());
1:     BrokerService brokerService;
1: 
0:     final static String mesageIdRoot = "11111:22222:";
1:     final int messageBytesSize = 1024;
1:     final String text = new String(new byte[messageBytesSize]);
1: 
1:     protected int count = 6;
1: 
1:     public void setUp() throws Exception {
1:         brokerService = createBroker();
1:         brokerService.setUseJmx(false);
1:         brokerService.deleteAllMessages();
1:         brokerService.start();
1:     }
1: 
1:     protected BrokerService createBroker() throws Exception {
1:         return new BrokerService();
1:     }
1: 
1:     public void tearDown() throws Exception {
1:         brokerService.stop();
1:     }
1: 
1:     public void testNoDuplicateAfterCacheFullAndReadPast() throws Exception {
1:         final PersistenceAdapter persistenceAdapter = brokerService
1:                 .getPersistenceAdapter();
1:         final MessageStore queueMessageStore = persistenceAdapter
1:                 .createQueueMessageStore(destination);
1:         final ConsumerInfo consumerInfo = new ConsumerInfo();
1:         final DestinationStatistics destinationStatistics = new DestinationStatistics();
1:         consumerInfo.setExclusive(true);
1: 
1:         final Queue queue = new Queue(brokerService, destination,
1:                 queueMessageStore, destinationStatistics, null);
1: 
1:         queueMessageStore.start();
1: 
0:         QueueStorePrefetch underTest = new QueueStorePrefetch(queue);
1:         SystemUsage systemUsage = new SystemUsage();
1:         // ensure memory limit is reached
0:         systemUsage.getMemoryUsage().setLimit(messageBytesSize * (count + 2));
1:         underTest.setSystemUsage(systemUsage);
1:         underTest.setEnableAudit(false);
1:         underTest.start();
1: 
1:         final ConnectionContext contextNotInTx = new ConnectionContext();
1:         for (int i = 0; i < count; i++) {
1:             ActiveMQTextMessage msg = getMessage(i);
1:             msg.setMemoryUsage(systemUsage.getMemoryUsage());
1: 
1:             queueMessageStore.addMessage(contextNotInTx, msg);
1:             underTest.addMessageLast(msg);
1:         }
1: 
1:         int dequeueCount = 0;
1: 
1:         underTest.setMaxBatchSize(2);
1:         underTest.reset();
1:         while (underTest.hasNext() && dequeueCount < count) {
1:             MessageReference ref = underTest.next();
1:             underTest.remove();
0:             assertEquals(dequeueCount++, ref.getMessageId()
0:                     .getProducerSequenceId());
1:         }
1:         underTest.release();
1:         assertEquals(count, dequeueCount);
1:     }
1: 
1:     private ActiveMQTextMessage getMessage(int i) throws Exception {
1:         ActiveMQTextMessage message = new ActiveMQTextMessage();
1:         MessageId id = new MessageId(mesageIdRoot + i);
1:         id.setBrokerSequenceId(i);
1:         id.setProducerSequenceId(i);
1:         message.setMessageId(id);
1:         message.setDestination(destination);
1:         message.setPersistent(true);
1:         message.setResponseRequired(true);
1:         message.setText("Msg:" + i + " " + text);
1:         assertEquals(message.getMessageId().getProducerSequenceId(), i);
1:         return message;
1:     }
1: }
============================================================================