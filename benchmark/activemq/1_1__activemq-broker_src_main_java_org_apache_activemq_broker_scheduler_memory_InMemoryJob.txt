1:433912f: /**
1:433912f:  * Licensed to the Apache Software Foundation (ASF) under one or more
1:433912f:  * contributor license agreements.  See the NOTICE file distributed with
1:433912f:  * this work for additional information regarding copyright ownership.
1:433912f:  * The ASF licenses this file to You under the Apache License, Version 2.0
1:433912f:  * (the "License"); you may not use this file except in compliance with
1:433912f:  * the License.  You may obtain a copy of the License at
1:433912f:  *
1:433912f:  *      http://www.apache.org/licenses/LICENSE-2.0
1:433912f:  *
1:433912f:  * Unless required by applicable law or agreed to in writing, software
1:433912f:  * distributed under the License is distributed on an "AS IS" BASIS,
1:433912f:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:433912f:  * See the License for the specific language governing permissions and
1:433912f:  * limitations under the License.
1:433912f:  */
1:433912f: package org.apache.activemq.broker.scheduler.memory;
1:433912f: 
1:433912f: import org.apache.activemq.broker.scheduler.Job;
1:433912f: import org.apache.activemq.broker.scheduler.JobSupport;
1:433912f: 
1:433912f: /**
1:433912f:  * A simple in memory Job POJO.
1:433912f:  */
1:433912f: public class InMemoryJob implements Job {
1:433912f: 
1:433912f:     private final String jobId;
1:433912f: 
1:433912f:     private int repeat;
1:433912f:     private long start;
1:433912f:     private long nextTime;
1:433912f:     private long delay;
1:433912f:     private long period;
1:433912f:     private String cronEntry;
1:433912f:     private int executionCount;
1:433912f: 
1:433912f:     private byte[] payload;
1:433912f: 
1:433912f:     public InMemoryJob(String jobId) {
1:433912f:         this.jobId = jobId;
1:433912f:     }
1:433912f: 
1:433912f:     @Override
1:433912f:     public String getJobId() {
1:433912f:         return jobId;
1:433912f:     }
1:433912f: 
1:433912f:     @Override
1:433912f:     public int getRepeat() {
1:433912f:         return repeat;
1:433912f:     }
1:433912f: 
1:433912f:     public void setRepeat(int repeat) {
1:433912f:         this.repeat = repeat;
1:433912f:     }
1:433912f: 
1:433912f:     @Override
1:433912f:     public long getStart() {
1:433912f:         return start;
1:433912f:     }
1:433912f: 
1:433912f:     public void setStart(long start) {
1:433912f:         this.start = start;
1:433912f:     }
1:433912f: 
1:433912f:     public long getNextTime() {
1:433912f:         return nextTime;
1:433912f:     }
1:433912f: 
1:433912f:     public void setNextTime(long nextTime) {
1:433912f:         this.nextTime = nextTime;
1:433912f:     }
1:433912f: 
1:433912f:     @Override
1:433912f:     public long getDelay() {
1:433912f:         return delay;
1:433912f:     }
1:433912f: 
1:433912f:     public void setDelay(long delay) {
1:433912f:         this.delay = delay;
1:433912f:     }
1:433912f: 
1:433912f:     @Override
1:433912f:     public long getPeriod() {
1:433912f:         return period;
1:433912f:     }
1:433912f: 
1:433912f:     public void setPeriod(long period) {
1:433912f:         this.period = period;
1:433912f:     }
1:433912f: 
1:433912f:     @Override
1:433912f:     public String getCronEntry() {
1:433912f:         return cronEntry;
1:433912f:     }
1:433912f: 
1:433912f:     public void setCronEntry(String cronEntry) {
1:433912f:         this.cronEntry = cronEntry;
1:433912f:     }
1:433912f: 
1:433912f:     @Override
1:433912f:     public byte[] getPayload() {
1:433912f:         return payload;
1:433912f:     }
1:433912f: 
1:433912f:     public void setPayload(byte[] payload) {
1:433912f:         this.payload = payload;
1:433912f:     }
1:433912f: 
1:433912f:     @Override
1:433912f:     public String getStartTime() {
1:433912f:         return JobSupport.getDateTime(getStart());
1:433912f:     }
1:433912f: 
1:433912f:     @Override
1:433912f:     public String getNextExecutionTime() {
1:433912f:         return JobSupport.getDateTime(getNextTime());
1:433912f:     }
1:433912f: 
1:433912f:     @Override
1:433912f:     public int getExecutionCount() {
1:433912f:         return executionCount;
1:433912f:     }
1:433912f: 
1:433912f:     public void incrementExecutionCount() {
1:433912f:         this.executionCount++;
1:433912f:     }
1:433912f: 
1:433912f:     public void decrementRepeatCount() {
1:433912f:         if (this.repeat > 0) {
1:433912f:             this.repeat--;
1:433912f:         }
1:433912f:     }
1:433912f: 
1:433912f:     /**
1:433912f:      * @return true if this Job represents a Cron entry.
1:433912f:      */
1:433912f:     public boolean isCron() {
1:433912f:         return getCronEntry() != null && getCronEntry().length() > 0;
1:433912f:     }
1:433912f: 
1:433912f:     @Override
1:433912f:     public int hashCode() {
1:433912f:         return jobId.hashCode();
1:433912f:     }
1:433912f: 
1:433912f:     @Override
1:433912f:     public String toString() {
1:433912f:         return "Job: " + getJobId();
1:433912f:     }
1:433912f: }
============================================================================
author:Timothy Bish
-------------------------------------------------------------------------------
commit:433912f
/////////////////////////////////////////////////////////////////////////
1: /**
1:  * Licensed to the Apache Software Foundation (ASF) under one or more
1:  * contributor license agreements.  See the NOTICE file distributed with
1:  * this work for additional information regarding copyright ownership.
1:  * The ASF licenses this file to You under the Apache License, Version 2.0
1:  * (the "License"); you may not use this file except in compliance with
1:  * the License.  You may obtain a copy of the License at
1:  *
1:  *      http://www.apache.org/licenses/LICENSE-2.0
1:  *
1:  * Unless required by applicable law or agreed to in writing, software
1:  * distributed under the License is distributed on an "AS IS" BASIS,
1:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:  * See the License for the specific language governing permissions and
1:  * limitations under the License.
1:  */
1: package org.apache.activemq.broker.scheduler.memory;
1: 
1: import org.apache.activemq.broker.scheduler.Job;
1: import org.apache.activemq.broker.scheduler.JobSupport;
1: 
1: /**
1:  * A simple in memory Job POJO.
1:  */
1: public class InMemoryJob implements Job {
1: 
1:     private final String jobId;
1: 
1:     private int repeat;
1:     private long start;
1:     private long nextTime;
1:     private long delay;
1:     private long period;
1:     private String cronEntry;
1:     private int executionCount;
1: 
1:     private byte[] payload;
1: 
1:     public InMemoryJob(String jobId) {
1:         this.jobId = jobId;
1:     }
1: 
1:     @Override
1:     public String getJobId() {
1:         return jobId;
1:     }
1: 
1:     @Override
1:     public int getRepeat() {
1:         return repeat;
1:     }
1: 
1:     public void setRepeat(int repeat) {
1:         this.repeat = repeat;
1:     }
1: 
1:     @Override
1:     public long getStart() {
1:         return start;
1:     }
1: 
1:     public void setStart(long start) {
1:         this.start = start;
1:     }
1: 
1:     public long getNextTime() {
1:         return nextTime;
1:     }
1: 
1:     public void setNextTime(long nextTime) {
1:         this.nextTime = nextTime;
1:     }
1: 
1:     @Override
1:     public long getDelay() {
1:         return delay;
1:     }
1: 
1:     public void setDelay(long delay) {
1:         this.delay = delay;
1:     }
1: 
1:     @Override
1:     public long getPeriod() {
1:         return period;
1:     }
1: 
1:     public void setPeriod(long period) {
1:         this.period = period;
1:     }
1: 
1:     @Override
1:     public String getCronEntry() {
1:         return cronEntry;
1:     }
1: 
1:     public void setCronEntry(String cronEntry) {
1:         this.cronEntry = cronEntry;
1:     }
1: 
1:     @Override
1:     public byte[] getPayload() {
1:         return payload;
1:     }
1: 
1:     public void setPayload(byte[] payload) {
1:         this.payload = payload;
1:     }
1: 
1:     @Override
1:     public String getStartTime() {
1:         return JobSupport.getDateTime(getStart());
1:     }
1: 
1:     @Override
1:     public String getNextExecutionTime() {
1:         return JobSupport.getDateTime(getNextTime());
1:     }
1: 
1:     @Override
1:     public int getExecutionCount() {
1:         return executionCount;
1:     }
1: 
1:     public void incrementExecutionCount() {
1:         this.executionCount++;
1:     }
1: 
1:     public void decrementRepeatCount() {
1:         if (this.repeat > 0) {
1:             this.repeat--;
1:         }
1:     }
1: 
1:     /**
1:      * @return true if this Job represents a Cron entry.
1:      */
1:     public boolean isCron() {
1:         return getCronEntry() != null && getCronEntry().length() > 0;
1:     }
1: 
1:     @Override
1:     public int hashCode() {
1:         return jobId.hashCode();
1:     }
1: 
1:     @Override
1:     public String toString() {
1:         return "Job: " + getJobId();
1:     }
1: }
============================================================================