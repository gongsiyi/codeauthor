1:d29ca2a: /**
1:57b4941:  * Licensed to the Apache Software Foundation (ASF) under one or more
1:57b4941:  * contributor license agreements.  See the NOTICE file distributed with
1:57b4941:  * this work for additional information regarding copyright ownership.
1:57b4941:  * The ASF licenses this file to You under the Apache License, Version 2.0
1:57b4941:  * (the "License"); you may not use this file except in compliance with
1:57b4941:  * the License.  You may obtain a copy of the License at
4:d29ca2a:  *
1:230a86c:  *      http://www.apache.org/licenses/LICENSE-2.0
1:d29ca2a:  *
1:d29ca2a:  * Unless required by applicable law or agreed to in writing, software
1:d29ca2a:  * distributed under the License is distributed on an "AS IS" BASIS,
1:d29ca2a:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:d29ca2a:  * See the License for the specific language governing permissions and
1:d29ca2a:  * limitations under the License.
1:d29ca2a:  */
2:d29ca2a: 
1:d29ca2a: /**
1:d29ca2a:  * The SimpleQueueSender class consists only of a main method,
1:d29ca2a:  * which sends several messages to a queue.
1:d29ca2a:  *
1:d29ca2a:  * Run this program in conjunction with SimpleQueueReceiver.
1:d29ca2a:  * Specify a queue name on the command line when you run the
1:d29ca2a:  * program.  By default, the program sends one message.  Specify
1:d29ca2a:  * a number after the queue name to send that number of messages.
1:d29ca2a:  */
1:d29ca2a: package org.apache.activemq.demo;
1:d29ca2a: 
1:d29ca2a: // START SNIPPET: demo
1:d29ca2a: 
1:d29ca2a: import javax.jms.Connection;
1:d29ca2a: import javax.jms.ConnectionFactory;
1:d29ca2a: import javax.jms.Destination;
1:d29ca2a: import javax.jms.JMSException;
1:d29ca2a: import javax.jms.MessageProducer;
1:d29ca2a: import javax.jms.Session;
1:d29ca2a: import javax.jms.TextMessage;
1:d29ca2a: import javax.naming.Context;
1:d29ca2a: import javax.naming.InitialContext;
1:d29ca2a: import javax.naming.NamingException;
1:933eb2f: 
1:8bf987b: import org.slf4j.Logger;
1:8bf987b: import org.slf4j.LoggerFactory;
1:d29ca2a: 
1:d29ca2a: /**
1:74a7a8b:  * A simple polymorphic JMS producer which can work with Queues or Topics which
1:74a7a8b:  * uses JNDI to lookup the JMS connection factory and destination
1:b0c2a40:  * 
1:74a7a8b:  * 
1:d29ca2a:  */
1:933eb2f: public final class SimpleProducer {
1:933eb2f: 
1:8bf987b:     private static final Logger LOG = LoggerFactory.getLogger(SimpleProducer.class);
1:74a7a8b: 
1:933eb2f:     private SimpleProducer() {
1:933eb2f:     }
1:d29ca2a: 
1:d29ca2a:     /**
1:74a7a8b:      * @param args the destination name to send to and optionally, the number of
1:74a7a8b:      *                messages to send
1:d29ca2a:      */
1:d29ca2a:     public static void main(String[] args) {
1:d29ca2a:         Context jndiContext = null;
1:d29ca2a:         ConnectionFactory connectionFactory = null;
1:d29ca2a:         Connection connection = null;
1:d29ca2a:         Session session = null;
1:d29ca2a:         Destination destination = null;
1:d29ca2a:         MessageProducer producer = null;
1:d29ca2a:         String destinationName = null;
1:fc00993:         final int numMsgs;
1:d29ca2a: 
1:d29ca2a:         if ((args.length < 1) || (args.length > 2)) {
1:fc00993:             LOG.info("Usage: java SimpleProducer <destination-name> [<number-of-messages>]");
1:d29ca2a:             System.exit(1);
7:d29ca2a:         }
1:d29ca2a:         destinationName = args[0];
1:fc00993:         LOG.info("Destination name is " + destinationName);
1:d29ca2a:         if (args.length == 2) {
1:fc00993:             numMsgs = (new Integer(args[1])).intValue();
1:74a7a8b:         } else {
1:fc00993:             numMsgs = 1;
1:d29ca2a:         }
1:d29ca2a: 
1:d29ca2a:         /*
1:d29ca2a:          * Create a JNDI API InitialContext object
1:d29ca2a:          */
1:d29ca2a:         try {
1:d29ca2a:             jndiContext = new InitialContext();
1:74a7a8b:         } catch (NamingException e) {
1:fc00993:             LOG.info("Could not create JNDI API context: " + e.toString());
1:d29ca2a:             System.exit(1);
1:d29ca2a:         }
1:d29ca2a: 
1:d29ca2a:         /*
1:d29ca2a:          * Look up connection factory and destination.
1:d29ca2a:          */
1:d29ca2a:         try {
1:74a7a8b:             connectionFactory = (ConnectionFactory)jndiContext.lookup("ConnectionFactory");
1:74a7a8b:             destination = (Destination)jndiContext.lookup(destinationName);
1:74a7a8b:         } catch (NamingException e) {
1:fc00993:             LOG.info("JNDI API lookup failed: " + e);
1:d29ca2a:             System.exit(1);
1:d29ca2a:         }
1:d29ca2a: 
1:d29ca2a:         /*
1:74a7a8b:          * Create connection. Create session from connection; false means
1:74a7a8b:          * session is not transacted. Create sender and text message. Send
1:74a7a8b:          * messages, varying text slightly. Send end-of-messages message.
1:d29ca2a:          * Finally, close connection.
1:d29ca2a:          */
1:d29ca2a:         try {
1:d29ca2a:             connection = connectionFactory.createConnection();
1:d29ca2a:             session = connection.createSession(false, Session.AUTO_ACKNOWLEDGE);
1:d29ca2a:             producer = session.createProducer(destination);
1:d29ca2a:             TextMessage message = session.createTextMessage();
1:fc00993:             for (int i = 0; i < numMsgs; i++) {
1:d29ca2a:                 message.setText("This is message " + (i + 1));
1:fc00993:                 LOG.info("Sending message: " + message.getText());
1:d29ca2a:                 producer.send(message);
1:d29ca2a:             }
1:d29ca2a: 
1:d29ca2a:             /*
1:d29ca2a:              * Send a non-text control message indicating end of messages.
1:d29ca2a:              */
1:d29ca2a:             producer.send(session.createMessage());
1:74a7a8b:         } catch (JMSException e) {
1:fc00993:             LOG.info("Exception occurred: " + e);
1:74a7a8b:         } finally {
1:d29ca2a:             if (connection != null) {
1:d29ca2a:                 try {
1:d29ca2a:                     connection.close();
1:74a7a8b:                 } catch (JMSException e) {
1:d29ca2a:                 }
1:d29ca2a:             }
1:d29ca2a:         }
1:d29ca2a:     }
1:d29ca2a: }
1:d29ca2a: 
1:d29ca2a: // END SNIPPET: demo
============================================================================
author:Hadrian Zbarcea
-------------------------------------------------------------------------------
commit:f9bec8f
author:Timothy A. Bish
-------------------------------------------------------------------------------
commit:ef24cc9
author:Hiram R. Chirino
-------------------------------------------------------------------------------
commit:b0c2a40
/////////////////////////////////////////////////////////////////////////
1:  * 
commit:933eb2f
/////////////////////////////////////////////////////////////////////////
0: import org.apache.commons.logging.Log;
0: import org.apache.commons.logging.LogFactory;
1: 
1: public final class SimpleProducer {
0:     private static final Log LOG = LogFactory.getLog(SimpleProducer.class);
1: 
1:     private SimpleProducer() {
1:     }
commit:fc00993
/////////////////////////////////////////////////////////////////////////
0:     private static final org.apache.commons.logging.Log LOG = org.apache.commons.logging.LogFactory.getLog(SimpleProducer.class);
/////////////////////////////////////////////////////////////////////////
1:         final int numMsgs;
1:             LOG.info("Usage: java SimpleProducer <destination-name> [<number-of-messages>]");
1:         LOG.info("Destination name is " + destinationName);
1:             numMsgs = (new Integer(args[1])).intValue();
1:             numMsgs = 1;
/////////////////////////////////////////////////////////////////////////
1:             LOG.info("Could not create JNDI API context: " + e.toString());
/////////////////////////////////////////////////////////////////////////
1:             LOG.info("JNDI API lookup failed: " + e);
/////////////////////////////////////////////////////////////////////////
1:             for (int i = 0; i < numMsgs; i++) {
1:                 LOG.info("Sending message: " + message.getText());
/////////////////////////////////////////////////////////////////////////
1:             LOG.info("Exception occurred: " + e);
commit:74a7a8b
/////////////////////////////////////////////////////////////////////////
1:  * A simple polymorphic JMS producer which can work with Queues or Topics which
1:  * uses JNDI to lookup the JMS connection factory and destination
1:  * 
1: 
0:     private static final org.apache.commons.logging.Log log = org.apache.commons.logging.LogFactory.getLog(SimpleProducer.class);
1:      * @param args the destination name to send to and optionally, the number of
1:      *                messages to send
/////////////////////////////////////////////////////////////////////////
1:         } else {
/////////////////////////////////////////////////////////////////////////
1:         } catch (NamingException e) {
/////////////////////////////////////////////////////////////////////////
1:             connectionFactory = (ConnectionFactory)jndiContext.lookup("ConnectionFactory");
1:             destination = (Destination)jndiContext.lookup(destinationName);
1:         } catch (NamingException e) {
1:          * Create connection. Create session from connection; false means
1:          * session is not transacted. Create sender and text message. Send
1:          * messages, varying text slightly. Send end-of-messages message.
/////////////////////////////////////////////////////////////////////////
1:         } catch (JMSException e) {
1:         } finally {
1:                 } catch (JMSException e) {
commit:230a86c
/////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////
1:  *      http://www.apache.org/licenses/LICENSE-2.0
commit:57b4941
/////////////////////////////////////////////////////////////////////////
1:  * Licensed to the Apache Software Foundation (ASF) under one or more
1:  * contributor license agreements.  See the NOTICE file distributed with
1:  * this work for additional information regarding copyright ownership.
1:  * The ASF licenses this file to You under the Apache License, Version 2.0
1:  * (the "License"); you may not use this file except in compliance with
1:  * the License.  You may obtain a copy of the License at
commit:48b4869
/////////////////////////////////////////////////////////////////////////
0:  * Copyright 2005-2006 The Apache Software Foundation
commit:d29ca2a
/////////////////////////////////////////////////////////////////////////
1: /**
1:  *
0:  * Copyright 2004 The Apache Software Foundation
1:  *
0:  * Licensed under the Apache License, Version 2.0 (the "License");
0:  * you may not use this file except in compliance with the License.
0:  * You may obtain a copy of the License at
1:  *
0:  * http://www.apache.org/licenses/LICENSE-2.0
1:  *
1:  * Unless required by applicable law or agreed to in writing, software
1:  * distributed under the License is distributed on an "AS IS" BASIS,
1:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:  * See the License for the specific language governing permissions and
1:  * limitations under the License.
1:  */
1: 
1: /**
1:  * The SimpleQueueSender class consists only of a main method,
1:  * which sends several messages to a queue.
1:  *
1:  * Run this program in conjunction with SimpleQueueReceiver.
1:  * Specify a queue name on the command line when you run the
1:  * program.  By default, the program sends one message.  Specify
1:  * a number after the queue name to send that number of messages.
1:  */
1: package org.apache.activemq.demo;
1: 
1: // START SNIPPET: demo
1: 
1: import javax.jms.Connection;
1: import javax.jms.ConnectionFactory;
1: import javax.jms.Destination;
1: import javax.jms.JMSException;
1: import javax.jms.MessageProducer;
1: import javax.jms.Session;
1: import javax.jms.TextMessage;
1: import javax.naming.Context;
1: import javax.naming.InitialContext;
1: import javax.naming.NamingException;
1: 
1: /**
0:  * A simple polymorphic JMS producer which can work with Queues or Topics
0:  * which uses JNDI to lookup the JMS connection factory and destination
1:  *
0:  * @version $Revision: 1.2 $
1:  */
0: public class SimpleProducer {
1:     
0:     private static final org.apache.commons.logging.Log log = org.apache.commons.logging.LogFactory
0:             .getLog(SimpleProducer.class);
1: 
1:     /**
0:      * @param args the destination name to send to and optionally, the number of messages to send
1:      */
1:     public static void main(String[] args) {
1:         Context jndiContext = null;
1:         ConnectionFactory connectionFactory = null;
1:         Connection connection = null;
1:         Session session = null;
1:         Destination destination = null;
1:         MessageProducer producer = null;
1:         String destinationName = null;
0:         final int NUM_MSGS;
1: 
1:         if ((args.length < 1) || (args.length > 2)) {
0:             log.info("Usage: java SimpleProducer <destination-name> [<number-of-messages>]");
1:             System.exit(1);
1:         }
1:         destinationName = args[0];
0:         log.info("Destination name is " + destinationName);
1:         if (args.length == 2) {
0:             NUM_MSGS = (new Integer(args[1])).intValue();
1:         }
0:         else {
0:             NUM_MSGS = 1;
1:         }
1: 
1:         /*
1:          * Create a JNDI API InitialContext object
1:          */
1:         try {
1:             jndiContext = new InitialContext();
1:         }
0:         catch (NamingException e) {
0:             log.info("Could not create JNDI API context: " + e.toString());
1:             System.exit(1);
1:         }
1: 
1:         /*
1:          * Look up connection factory and destination.
1:          */
1:         try {
0:             connectionFactory = (ConnectionFactory) jndiContext.lookup("ConnectionFactory");
0:             destination = (Destination) jndiContext.lookup(destinationName);
1:         }
0:         catch (NamingException e) {
0:             log.info("JNDI API lookup failed: " + e);
1:             System.exit(1);
1:         }
1: 
1:         /*
0:          * Create connection.
0:          * Create session from connection; false means session is not transacted.
0:          * Create sender and text message.
0:          * Send messages, varying text slightly.
0:          * Send end-of-messages message.
1:          * Finally, close connection.
1:          */
1:         try {
1:             connection = connectionFactory.createConnection();
1:             session = connection.createSession(false, Session.AUTO_ACKNOWLEDGE);
1:             producer = session.createProducer(destination);
1:             TextMessage message = session.createTextMessage();
0:             for (int i = 0; i < NUM_MSGS; i++) {
1:                 message.setText("This is message " + (i + 1));
0:                 log.info("Sending message: " + message.getText());
1:                 producer.send(message);
1:             }
1: 
1:             /*
1:              * Send a non-text control message indicating end of messages.
1:              */
1:             producer.send(session.createMessage());
1:         }
0:         catch (JMSException e) {
0:             log.info("Exception occurred: " + e);
1:         }
0:         finally {
1:             if (connection != null) {
1:                 try {
1:                     connection.close();
1:                 }
0:                 catch (JMSException e) {
1:                 }
1:             }
1:         }
1:     }
1: }
1: 
1: // END SNIPPET: demo
author:Bosanac Dejan
-------------------------------------------------------------------------------
commit:8bf987b
/////////////////////////////////////////////////////////////////////////
1: import org.slf4j.Logger;
1: import org.slf4j.LoggerFactory;
/////////////////////////////////////////////////////////////////////////
1:     private static final Logger LOG = LoggerFactory.getLogger(SimpleProducer.class);
============================================================================