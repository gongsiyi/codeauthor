1:f9451e5: /**
1:f9451e5:  * Licensed to the Apache Software Foundation (ASF) under one or more
1:f9451e5:  * contributor license agreements.  See the NOTICE file distributed with
1:f9451e5:  * this work for additional information regarding copyright ownership.
1:f9451e5:  * The ASF licenses this file to You under the Apache License, Version 2.0
1:f9451e5:  * (the "License"); you may not use this file except in compliance with
1:f9451e5:  * the License.  You may obtain a copy of the License at
1:f9451e5:  *
1:f9451e5:  *      http://www.apache.org/licenses/LICENSE-2.0
1:f9451e5:  *
1:f9451e5:  * Unless required by applicable law or agreed to in writing, software
1:f9451e5:  * distributed under the License is distributed on an "AS IS" BASIS,
1:f9451e5:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:f9451e5:  * See the License for the specific language governing permissions and
1:f9451e5:  * limitations under the License.
1:f9451e5:  */
1:f9451e5: package org.apache.activemq.shiro.authz;
1:f9451e5: 
1:f9451e5: import org.apache.activemq.broker.ConnectionContext;
1:f9451e5: import org.apache.activemq.broker.ProducerBrokerExchange;
1:f9451e5: import org.apache.activemq.broker.StubBroker;
1:f9451e5: import org.apache.activemq.command.ActiveMQDestination;
1:f9451e5: import org.apache.activemq.command.ActiveMQTextMessage;
1:f9451e5: import org.apache.activemq.command.ActiveMQTopic;
1:f9451e5: import org.apache.activemq.command.ConnectionInfo;
1:f9451e5: import org.apache.activemq.command.ConsumerInfo;
1:f9451e5: import org.apache.activemq.command.DestinationInfo;
1:f9451e5: import org.apache.activemq.command.ProducerInfo;
1:f9451e5: import org.apache.activemq.shiro.subject.SubjectAdapter;
1:f9451e5: import org.apache.activemq.shiro.subject.SubjectConnectionReference;
1:f9451e5: import org.apache.activemq.shiro.subject.SubjectSecurityContext;
1:f9451e5: import org.apache.shiro.authz.Permission;
1:f9451e5: import org.apache.shiro.authz.UnauthorizedException;
1:f9451e5: import org.apache.shiro.env.Environment;
1:f9451e5: import org.apache.shiro.subject.PrincipalCollection;
1:f9451e5: import org.apache.shiro.subject.SimplePrincipalCollection;
1:f9451e5: import org.apache.shiro.subject.Subject;
1:f9451e5: import org.junit.Before;
1:f9451e5: import org.junit.Test;
1:f9451e5: 
1:f9451e5: import java.util.Collection;
1:f9451e5: 
1:f9451e5: import static org.junit.Assert.*;
1:f9451e5: 
1:f9451e5: /**
1:f9451e5:  * @since 5.10.0
1:f9451e5:  */
1:f9451e5: public class AuthorizationFilterTest {
1:f9451e5: 
1:f9451e5:     private AuthorizationFilter filter;
1:f9451e5:     private StubBroker nextBroker;
1:f9451e5: 
1:f9451e5:     @Before
1:f9451e5:     public void setUp() {
1:f9451e5:         filter = new AuthorizationFilter();
1:f9451e5:         nextBroker = new StubBroker();
1:f9451e5:         filter.setNext(nextBroker);
1:f9451e5:     }
1:f9451e5: 
1:f9451e5:     @Test
1:f9451e5:     public void testDefaults() {
1:f9451e5:         ActionPermissionResolver resolver = filter.getActionPermissionResolver();
1:f9451e5:         assertNotNull(resolver);
1:f9451e5:         assertTrue(resolver instanceof DestinationActionPermissionResolver);
1:f9451e5:     }
1:f9451e5: 
1:f9451e5:     @Test
1:f9451e5:     public void testSetActionPermissionResolver() {
1:f9451e5:         ActionPermissionResolver resolver = new DestinationActionPermissionResolver();
1:f9451e5:         filter.setActionPermissionResolver(resolver);
1:f9451e5:         assertSame(resolver, filter.getActionPermissionResolver());
1:f9451e5:     }
1:f9451e5: 
1:f9451e5:     private ConnectionContext createContext(Subject subject) {
1:f9451e5:         ConnectionContext ctx = new ConnectionContext();
1:f9451e5:         ConnectionInfo info = new ConnectionInfo();
1:f9451e5:         Environment environment = new Environment() {
1:f9451e5:             @Override
1:f9451e5:             public org.apache.shiro.mgt.SecurityManager getSecurityManager() {
1:f9451e5:                 return null; //not needed in this test.
1:f9451e5:             }
1:f9451e5:         };
1:f9451e5:         SubjectConnectionReference ref = new SubjectConnectionReference(ctx, info, environment, subject);
1:f9451e5:         SubjectSecurityContext secCtx = new SubjectSecurityContext(ref);
1:f9451e5:         ctx.setSecurityContext(secCtx);
1:f9451e5:         return ctx;
1:f9451e5:     }
1:f9451e5: 
1:f9451e5:     @Test
1:f9451e5:     public void testSubjectToString() {
1:f9451e5:         Subject subject = new PermsSubject() {
1:f9451e5:             @Override
1:f9451e5:             public PrincipalCollection getPrincipals() {
1:f9451e5:                 return null;
1:f9451e5:             }
1:f9451e5:         };
1:f9451e5:         String string = filter.toString(subject);
1:f9451e5:         assertEquals("", string);
1:f9451e5:     }
1:f9451e5: 
1:f9451e5:     @Test(expected=UnauthorizedException.class)
1:f9451e5:     public void testAddDestinationInfoNotAuthorized() throws Exception {
1:f9451e5:         String name = "myTopic";
1:f9451e5:         ActiveMQDestination dest = new ActiveMQTopic(name);
1:f9451e5:         DestinationInfo info = new DestinationInfo(null, DestinationInfo.ADD_OPERATION_TYPE, dest);
1:f9451e5: 
1:f9451e5:         Subject subject = new PermsSubject();
1:f9451e5:         ConnectionContext context = createContext(subject);
1:f9451e5: 
1:f9451e5:         filter.addDestinationInfo(context, info);
1:f9451e5:     }
1:f9451e5: 
1:f9451e5:     @Test
1:f9451e5:     public void testAddDestinationInfoAuthorized() throws Exception {
1:f9451e5: 
1:f9451e5:         String name = "myTopic";
1:f9451e5:         ActiveMQDestination dest = new ActiveMQTopic(name);
1:f9451e5:         DestinationInfo info = new DestinationInfo(null, DestinationInfo.ADD_OPERATION_TYPE, dest);
1:f9451e5: 
1:f9451e5:         Subject subject = new PermsSubject() {
1:f9451e5:             @Override
1:f9451e5:             public boolean isPermitted(Permission toCheck) {
1:f9451e5:                 Permission assigned = createPerm("topic:myTopic:create");
1:f9451e5:                 assertEquals(assigned.toString(), toCheck.toString());
1:f9451e5:                 return assigned.implies(toCheck);
1:f9451e5:             }
1:f9451e5:         };
1:f9451e5: 
1:f9451e5:         ConnectionContext context = createContext(subject);
1:f9451e5: 
1:f9451e5:         filter.addDestinationInfo(context, info);
1:f9451e5:     }
1:f9451e5: 
1:f9451e5:     @Test(expected=UnauthorizedException.class)
1:f9451e5:     public void testAddDestinationNotAuthorized() throws Exception {
1:f9451e5:         String name = "myTopic";
1:f9451e5:         ActiveMQDestination dest = new ActiveMQTopic(name);
1:f9451e5: 
1:f9451e5:         Subject subject = new PermsSubject();
1:f9451e5:         ConnectionContext context = createContext(subject);
1:f9451e5: 
1:f9451e5:         filter.addDestination(context, dest, true);
1:f9451e5:     }
1:f9451e5: 
1:f9451e5:     @Test
1:f9451e5:     public void testAddDestinationAuthorized() throws Exception {
1:f9451e5:         String name = "myTopic";
1:f9451e5:         ActiveMQDestination dest = new ActiveMQTopic(name);
1:f9451e5: 
1:f9451e5:         Subject subject = new PermsSubject() {
1:f9451e5:             @Override
1:f9451e5:             public boolean isPermitted(Permission toCheck) {
1:f9451e5:                 Permission assigned = createPerm("topic:myTopic:create");
1:f9451e5:                 assertEquals(assigned.toString(), toCheck.toString());
1:f9451e5:                 return assigned.implies(toCheck);
1:f9451e5:             }
1:f9451e5:         };
1:f9451e5: 
1:f9451e5:         ConnectionContext context = createContext(subject);
1:f9451e5: 
1:f9451e5:         filter.addDestination(context, dest, true);
1:f9451e5:     }
1:f9451e5: 
1:f9451e5:     @Test(expected=UnauthorizedException.class)
1:f9451e5:     public void testRemoveDestinationInfoNotAuthorized() throws Exception {
1:f9451e5:         String name = "myTopic";
1:f9451e5:         ActiveMQDestination dest = new ActiveMQTopic(name);
1:f9451e5:         DestinationInfo info = new DestinationInfo(null, DestinationInfo.REMOVE_OPERATION_TYPE, dest);
1:f9451e5: 
1:f9451e5:         Subject subject = new PermsSubject();
1:f9451e5:         ConnectionContext context = createContext(subject);
1:f9451e5: 
1:f9451e5:         filter.removeDestinationInfo(context, info);
1:f9451e5:     }
1:f9451e5: 
1:f9451e5:     @Test
1:f9451e5:     public void testRemoveDestinationInfoAuthorized() throws Exception {
1:f9451e5: 
1:f9451e5:         String name = "myTopic";
1:f9451e5:         ActiveMQDestination dest = new ActiveMQTopic(name);
1:f9451e5:         DestinationInfo info = new DestinationInfo(null, DestinationInfo.REMOVE_OPERATION_TYPE, dest);
1:f9451e5: 
1:f9451e5:         Subject subject = new PermsSubject() {
1:f9451e5:             @Override
1:f9451e5:             public boolean isPermitted(Permission toCheck) {
1:f9451e5:                 Permission assigned = createPerm("topic:myTopic:remove");
1:f9451e5:                 assertEquals(assigned.toString(), toCheck.toString());
1:f9451e5:                 return assigned.implies(toCheck);
1:f9451e5:             }
1:f9451e5:         };
1:f9451e5: 
1:f9451e5:         ConnectionContext context = createContext(subject);
1:f9451e5: 
1:f9451e5:         filter.removeDestinationInfo(context, info);
1:f9451e5:     }
1:f9451e5: 
1:f9451e5:     @Test(expected=UnauthorizedException.class)
1:f9451e5:     public void testRemoveDestinationNotAuthorized() throws Exception {
1:f9451e5:         String name = "myTopic";
1:f9451e5:         ActiveMQDestination dest = new ActiveMQTopic(name);
1:f9451e5: 
1:f9451e5:         Subject subject = new PermsSubject();
1:f9451e5:         ConnectionContext context = createContext(subject);
1:f9451e5: 
1:f9451e5:         filter.removeDestination(context, dest, 1000);
1:f9451e5:     }
1:f9451e5: 
1:f9451e5:     @Test
1:f9451e5:     public void testRemoveDestinationAuthorized() throws Exception {
1:f9451e5:         String name = "myTopic";
1:f9451e5:         ActiveMQDestination dest = new ActiveMQTopic(name);
1:f9451e5: 
1:f9451e5:         Subject subject = new PermsSubject() {
1:f9451e5:             @Override
1:f9451e5:             public boolean isPermitted(Permission toCheck) {
1:f9451e5:                 Permission assigned = createPerm("topic:myTopic:remove");
1:f9451e5:                 assertEquals(assigned.toString(), toCheck.toString());
1:f9451e5:                 return assigned.implies(toCheck);
1:f9451e5:             }
1:f9451e5:         };
1:f9451e5: 
1:f9451e5:         ConnectionContext context = createContext(subject);
1:f9451e5: 
1:f9451e5:         filter.removeDestination(context, dest, 1000);
1:f9451e5:     }
1:f9451e5: 
1:f9451e5:     @Test(expected=UnauthorizedException.class)
1:f9451e5:     public void testAddConsumerNotAuthorized() throws Exception {
1:f9451e5:         String name = "myTopic";
1:f9451e5:         ActiveMQDestination dest = new ActiveMQTopic(name);
1:f9451e5: 
1:f9451e5:         Subject subject = new PermsSubject();
1:f9451e5:         ConnectionContext context = createContext(subject);
1:f9451e5:         ConsumerInfo info = new ConsumerInfo(null);
1:f9451e5:         info.setDestination(dest);
1:f9451e5: 
1:f9451e5:         filter.addConsumer(context, info);
1:f9451e5:     }
1:f9451e5: 
1:f9451e5:     @Test
1:f9451e5:     public void testAddConsumerAuthorized() throws Exception {
1:f9451e5:         String name = "myTopic";
1:f9451e5:         ActiveMQDestination dest = new ActiveMQTopic(name);
1:f9451e5: 
1:f9451e5:         Subject subject = new PermsSubject() {
1:f9451e5:             @Override
1:f9451e5:             public boolean isPermitted(Permission toCheck) {
1:f9451e5:                 Permission assigned = createPerm("topic:myTopic:read");
1:f9451e5:                 assertEquals(assigned.toString(), toCheck.toString());
1:f9451e5:                 return assigned.implies(toCheck);
1:f9451e5:             }
1:f9451e5:         };
1:f9451e5: 
1:f9451e5:         ConnectionContext context = createContext(subject);
1:f9451e5:         ConsumerInfo info = new ConsumerInfo(null);
1:f9451e5:         info.setDestination(dest);
1:f9451e5: 
1:f9451e5:         filter.addConsumer(context, info);
1:f9451e5:     }
1:f9451e5: 
1:f9451e5:     @Test
1:f9451e5:     public void testAddProducerWithoutDestination() throws Exception {
1:f9451e5:         Subject subject = new PermsSubject();
1:f9451e5:         ConnectionContext context = createContext(subject);
1:f9451e5:         ProducerInfo info = new ProducerInfo(null);
1:f9451e5:         filter.addProducer(context, info);
1:f9451e5:     }
1:f9451e5: 
1:f9451e5:     @Test(expected=UnauthorizedException.class)
1:f9451e5:     public void testAddProducerNotAuthorized() throws Exception {
1:f9451e5:         String name = "myTopic";
1:f9451e5:         ActiveMQDestination dest = new ActiveMQTopic(name);
1:f9451e5: 
1:f9451e5:         Subject subject = new PermsSubject();
1:f9451e5:         ConnectionContext context = createContext(subject);
1:f9451e5:         ProducerInfo info = new ProducerInfo(null);
1:f9451e5:         info.setDestination(dest);
1:f9451e5: 
1:f9451e5:         filter.addProducer(context, info);
1:f9451e5:     }
1:f9451e5: 
1:f9451e5:     @Test
1:f9451e5:     public void testAddProducerAuthorized() throws Exception {
1:f9451e5:         String name = "myTopic";
1:f9451e5:         ActiveMQDestination dest = new ActiveMQTopic(name);
1:f9451e5: 
1:f9451e5:         Subject subject = new PermsSubject() {
1:f9451e5:             @Override
1:f9451e5:             public boolean isPermitted(Permission toCheck) {
1:f9451e5:                 Permission assigned = createPerm("topic:myTopic:write");
1:f9451e5:                 assertEquals(assigned.toString(), toCheck.toString());
1:f9451e5:                 return assigned.implies(toCheck);
1:f9451e5:             }
1:f9451e5:         };
1:f9451e5: 
1:f9451e5:         ConnectionContext context = createContext(subject);
1:f9451e5:         ProducerInfo info = new ProducerInfo(null);
1:f9451e5:         info.setDestination(dest);
1:f9451e5: 
1:f9451e5:         filter.addProducer(context, info);
1:f9451e5:     }
1:f9451e5: 
1:f9451e5:     @Test(expected=UnauthorizedException.class)
1:f9451e5:     public void testBrokerExchangeSendNotAuthorized() throws Exception {
1:f9451e5:         String name = "myTopic";
1:f9451e5: 
1:f9451e5:         ActiveMQDestination dest = new ActiveMQTopic(name);
1:f9451e5:         ActiveMQTextMessage message = new ActiveMQTextMessage();
1:f9451e5:         message.setDestination(dest);
1:f9451e5:         message.setText("Hello, world!");
1:f9451e5: 
1:f9451e5:         Subject subject = new PermsSubject();
1:f9451e5:         ConnectionContext context = createContext(subject);
1:f9451e5:         ProducerBrokerExchange exchange = new ProducerBrokerExchange();
1:f9451e5:         exchange.setConnectionContext(context);
1:f9451e5: 
1:f9451e5:         filter.send(exchange, message);
1:f9451e5:     }
1:f9451e5: 
1:f9451e5:     @Test
1:f9451e5:     public void testBrokerExchangeSendAuthorized() throws Exception {
1:f9451e5:         String name = "myTopic";
1:f9451e5:         ActiveMQDestination dest = new ActiveMQTopic(name);
1:f9451e5:         ActiveMQTextMessage message = new ActiveMQTextMessage();
1:f9451e5:         message.setDestination(dest);
1:f9451e5:         message.setText("Hello, world!");
1:f9451e5: 
1:f9451e5:         Subject subject = new PermsSubject() {
1:f9451e5:             @Override
1:f9451e5:             public boolean isPermitted(Permission toCheck) {
1:f9451e5:                 Permission assigned = createPerm("topic:myTopic:write");
1:f9451e5:                 assertEquals(assigned.toString(), toCheck.toString());
1:f9451e5:                 return assigned.implies(toCheck);
1:f9451e5:             }
1:f9451e5:         };
1:f9451e5: 
1:f9451e5:         ConnectionContext context = createContext(subject);
1:f9451e5:         ProducerBrokerExchange exchange = new ProducerBrokerExchange();
1:f9451e5:         exchange.setConnectionContext(context);
1:f9451e5: 
1:f9451e5:         filter.send(exchange, message);
1:f9451e5:     }
1:f9451e5: 
1:f9451e5: 
1:f9451e5:     protected Permission createPerm(String perm) {
1:f9451e5:         return new DestinationActionPermissionResolver().createPermission(perm);
1:f9451e5:     }
1:f9451e5: 
1:f9451e5: 
1:f9451e5:     private static class PermsSubject extends SubjectAdapter {
1:f9451e5: 
1:f9451e5:         @Override
1:f9451e5:         public PrincipalCollection getPrincipals() {
1:f9451e5:             return new SimplePrincipalCollection("foo", "someRealm");
1:f9451e5:         }
1:f9451e5: 
1:f9451e5:         @Override
1:f9451e5:         public boolean isPermittedAll(Collection<Permission> permissions) {
1:f9451e5:             assertNotNull(permissions);
1:f9451e5:             assertEquals(1, permissions.size());
1:f9451e5:             return isPermitted(permissions.iterator().next());
1:f9451e5:         }
1:f9451e5:     }
1:f9451e5: }
============================================================================
author:Les Hazlewood
-------------------------------------------------------------------------------
commit:f9451e5
/////////////////////////////////////////////////////////////////////////
1: /**
1:  * Licensed to the Apache Software Foundation (ASF) under one or more
1:  * contributor license agreements.  See the NOTICE file distributed with
1:  * this work for additional information regarding copyright ownership.
1:  * The ASF licenses this file to You under the Apache License, Version 2.0
1:  * (the "License"); you may not use this file except in compliance with
1:  * the License.  You may obtain a copy of the License at
1:  *
1:  *      http://www.apache.org/licenses/LICENSE-2.0
1:  *
1:  * Unless required by applicable law or agreed to in writing, software
1:  * distributed under the License is distributed on an "AS IS" BASIS,
1:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:  * See the License for the specific language governing permissions and
1:  * limitations under the License.
1:  */
1: package org.apache.activemq.shiro.authz;
1: 
1: import org.apache.activemq.broker.ConnectionContext;
1: import org.apache.activemq.broker.ProducerBrokerExchange;
1: import org.apache.activemq.broker.StubBroker;
1: import org.apache.activemq.command.ActiveMQDestination;
1: import org.apache.activemq.command.ActiveMQTextMessage;
1: import org.apache.activemq.command.ActiveMQTopic;
1: import org.apache.activemq.command.ConnectionInfo;
1: import org.apache.activemq.command.ConsumerInfo;
1: import org.apache.activemq.command.DestinationInfo;
1: import org.apache.activemq.command.ProducerInfo;
1: import org.apache.activemq.shiro.subject.SubjectAdapter;
1: import org.apache.activemq.shiro.subject.SubjectConnectionReference;
1: import org.apache.activemq.shiro.subject.SubjectSecurityContext;
1: import org.apache.shiro.authz.Permission;
1: import org.apache.shiro.authz.UnauthorizedException;
1: import org.apache.shiro.env.Environment;
1: import org.apache.shiro.subject.PrincipalCollection;
1: import org.apache.shiro.subject.SimplePrincipalCollection;
1: import org.apache.shiro.subject.Subject;
1: import org.junit.Before;
1: import org.junit.Test;
1: 
1: import java.util.Collection;
1: 
1: import static org.junit.Assert.*;
1: 
1: /**
1:  * @since 5.10.0
1:  */
1: public class AuthorizationFilterTest {
1: 
1:     private AuthorizationFilter filter;
1:     private StubBroker nextBroker;
1: 
1:     @Before
1:     public void setUp() {
1:         filter = new AuthorizationFilter();
1:         nextBroker = new StubBroker();
1:         filter.setNext(nextBroker);
1:     }
1: 
1:     @Test
1:     public void testDefaults() {
1:         ActionPermissionResolver resolver = filter.getActionPermissionResolver();
1:         assertNotNull(resolver);
1:         assertTrue(resolver instanceof DestinationActionPermissionResolver);
1:     }
1: 
1:     @Test
1:     public void testSetActionPermissionResolver() {
1:         ActionPermissionResolver resolver = new DestinationActionPermissionResolver();
1:         filter.setActionPermissionResolver(resolver);
1:         assertSame(resolver, filter.getActionPermissionResolver());
1:     }
1: 
1:     private ConnectionContext createContext(Subject subject) {
1:         ConnectionContext ctx = new ConnectionContext();
1:         ConnectionInfo info = new ConnectionInfo();
1:         Environment environment = new Environment() {
1:             @Override
1:             public org.apache.shiro.mgt.SecurityManager getSecurityManager() {
1:                 return null; //not needed in this test.
1:             }
1:         };
1:         SubjectConnectionReference ref = new SubjectConnectionReference(ctx, info, environment, subject);
1:         SubjectSecurityContext secCtx = new SubjectSecurityContext(ref);
1:         ctx.setSecurityContext(secCtx);
1:         return ctx;
1:     }
1: 
1:     @Test
1:     public void testSubjectToString() {
1:         Subject subject = new PermsSubject() {
1:             @Override
1:             public PrincipalCollection getPrincipals() {
1:                 return null;
1:             }
1:         };
1:         String string = filter.toString(subject);
1:         assertEquals("", string);
1:     }
1: 
1:     @Test(expected=UnauthorizedException.class)
1:     public void testAddDestinationInfoNotAuthorized() throws Exception {
1:         String name = "myTopic";
1:         ActiveMQDestination dest = new ActiveMQTopic(name);
1:         DestinationInfo info = new DestinationInfo(null, DestinationInfo.ADD_OPERATION_TYPE, dest);
1: 
1:         Subject subject = new PermsSubject();
1:         ConnectionContext context = createContext(subject);
1: 
1:         filter.addDestinationInfo(context, info);
1:     }
1: 
1:     @Test
1:     public void testAddDestinationInfoAuthorized() throws Exception {
1: 
1:         String name = "myTopic";
1:         ActiveMQDestination dest = new ActiveMQTopic(name);
1:         DestinationInfo info = new DestinationInfo(null, DestinationInfo.ADD_OPERATION_TYPE, dest);
1: 
1:         Subject subject = new PermsSubject() {
1:             @Override
1:             public boolean isPermitted(Permission toCheck) {
1:                 Permission assigned = createPerm("topic:myTopic:create");
1:                 assertEquals(assigned.toString(), toCheck.toString());
1:                 return assigned.implies(toCheck);
1:             }
1:         };
1: 
1:         ConnectionContext context = createContext(subject);
1: 
1:         filter.addDestinationInfo(context, info);
1:     }
1: 
1:     @Test(expected=UnauthorizedException.class)
1:     public void testAddDestinationNotAuthorized() throws Exception {
1:         String name = "myTopic";
1:         ActiveMQDestination dest = new ActiveMQTopic(name);
1: 
1:         Subject subject = new PermsSubject();
1:         ConnectionContext context = createContext(subject);
1: 
1:         filter.addDestination(context, dest, true);
1:     }
1: 
1:     @Test
1:     public void testAddDestinationAuthorized() throws Exception {
1:         String name = "myTopic";
1:         ActiveMQDestination dest = new ActiveMQTopic(name);
1: 
1:         Subject subject = new PermsSubject() {
1:             @Override
1:             public boolean isPermitted(Permission toCheck) {
1:                 Permission assigned = createPerm("topic:myTopic:create");
1:                 assertEquals(assigned.toString(), toCheck.toString());
1:                 return assigned.implies(toCheck);
1:             }
1:         };
1: 
1:         ConnectionContext context = createContext(subject);
1: 
1:         filter.addDestination(context, dest, true);
1:     }
1: 
1:     @Test(expected=UnauthorizedException.class)
1:     public void testRemoveDestinationInfoNotAuthorized() throws Exception {
1:         String name = "myTopic";
1:         ActiveMQDestination dest = new ActiveMQTopic(name);
1:         DestinationInfo info = new DestinationInfo(null, DestinationInfo.REMOVE_OPERATION_TYPE, dest);
1: 
1:         Subject subject = new PermsSubject();
1:         ConnectionContext context = createContext(subject);
1: 
1:         filter.removeDestinationInfo(context, info);
1:     }
1: 
1:     @Test
1:     public void testRemoveDestinationInfoAuthorized() throws Exception {
1: 
1:         String name = "myTopic";
1:         ActiveMQDestination dest = new ActiveMQTopic(name);
1:         DestinationInfo info = new DestinationInfo(null, DestinationInfo.REMOVE_OPERATION_TYPE, dest);
1: 
1:         Subject subject = new PermsSubject() {
1:             @Override
1:             public boolean isPermitted(Permission toCheck) {
1:                 Permission assigned = createPerm("topic:myTopic:remove");
1:                 assertEquals(assigned.toString(), toCheck.toString());
1:                 return assigned.implies(toCheck);
1:             }
1:         };
1: 
1:         ConnectionContext context = createContext(subject);
1: 
1:         filter.removeDestinationInfo(context, info);
1:     }
1: 
1:     @Test(expected=UnauthorizedException.class)
1:     public void testRemoveDestinationNotAuthorized() throws Exception {
1:         String name = "myTopic";
1:         ActiveMQDestination dest = new ActiveMQTopic(name);
1: 
1:         Subject subject = new PermsSubject();
1:         ConnectionContext context = createContext(subject);
1: 
1:         filter.removeDestination(context, dest, 1000);
1:     }
1: 
1:     @Test
1:     public void testRemoveDestinationAuthorized() throws Exception {
1:         String name = "myTopic";
1:         ActiveMQDestination dest = new ActiveMQTopic(name);
1: 
1:         Subject subject = new PermsSubject() {
1:             @Override
1:             public boolean isPermitted(Permission toCheck) {
1:                 Permission assigned = createPerm("topic:myTopic:remove");
1:                 assertEquals(assigned.toString(), toCheck.toString());
1:                 return assigned.implies(toCheck);
1:             }
1:         };
1: 
1:         ConnectionContext context = createContext(subject);
1: 
1:         filter.removeDestination(context, dest, 1000);
1:     }
1: 
1:     @Test(expected=UnauthorizedException.class)
1:     public void testAddConsumerNotAuthorized() throws Exception {
1:         String name = "myTopic";
1:         ActiveMQDestination dest = new ActiveMQTopic(name);
1: 
1:         Subject subject = new PermsSubject();
1:         ConnectionContext context = createContext(subject);
1:         ConsumerInfo info = new ConsumerInfo(null);
1:         info.setDestination(dest);
1: 
1:         filter.addConsumer(context, info);
1:     }
1: 
1:     @Test
1:     public void testAddConsumerAuthorized() throws Exception {
1:         String name = "myTopic";
1:         ActiveMQDestination dest = new ActiveMQTopic(name);
1: 
1:         Subject subject = new PermsSubject() {
1:             @Override
1:             public boolean isPermitted(Permission toCheck) {
1:                 Permission assigned = createPerm("topic:myTopic:read");
1:                 assertEquals(assigned.toString(), toCheck.toString());
1:                 return assigned.implies(toCheck);
1:             }
1:         };
1: 
1:         ConnectionContext context = createContext(subject);
1:         ConsumerInfo info = new ConsumerInfo(null);
1:         info.setDestination(dest);
1: 
1:         filter.addConsumer(context, info);
1:     }
1: 
1:     @Test
1:     public void testAddProducerWithoutDestination() throws Exception {
1:         Subject subject = new PermsSubject();
1:         ConnectionContext context = createContext(subject);
1:         ProducerInfo info = new ProducerInfo(null);
1:         filter.addProducer(context, info);
1:     }
1: 
1:     @Test(expected=UnauthorizedException.class)
1:     public void testAddProducerNotAuthorized() throws Exception {
1:         String name = "myTopic";
1:         ActiveMQDestination dest = new ActiveMQTopic(name);
1: 
1:         Subject subject = new PermsSubject();
1:         ConnectionContext context = createContext(subject);
1:         ProducerInfo info = new ProducerInfo(null);
1:         info.setDestination(dest);
1: 
1:         filter.addProducer(context, info);
1:     }
1: 
1:     @Test
1:     public void testAddProducerAuthorized() throws Exception {
1:         String name = "myTopic";
1:         ActiveMQDestination dest = new ActiveMQTopic(name);
1: 
1:         Subject subject = new PermsSubject() {
1:             @Override
1:             public boolean isPermitted(Permission toCheck) {
1:                 Permission assigned = createPerm("topic:myTopic:write");
1:                 assertEquals(assigned.toString(), toCheck.toString());
1:                 return assigned.implies(toCheck);
1:             }
1:         };
1: 
1:         ConnectionContext context = createContext(subject);
1:         ProducerInfo info = new ProducerInfo(null);
1:         info.setDestination(dest);
1: 
1:         filter.addProducer(context, info);
1:     }
1: 
1:     @Test(expected=UnauthorizedException.class)
1:     public void testBrokerExchangeSendNotAuthorized() throws Exception {
1:         String name = "myTopic";
1: 
1:         ActiveMQDestination dest = new ActiveMQTopic(name);
1:         ActiveMQTextMessage message = new ActiveMQTextMessage();
1:         message.setDestination(dest);
1:         message.setText("Hello, world!");
1: 
1:         Subject subject = new PermsSubject();
1:         ConnectionContext context = createContext(subject);
1:         ProducerBrokerExchange exchange = new ProducerBrokerExchange();
1:         exchange.setConnectionContext(context);
1: 
1:         filter.send(exchange, message);
1:     }
1: 
1:     @Test
1:     public void testBrokerExchangeSendAuthorized() throws Exception {
1:         String name = "myTopic";
1:         ActiveMQDestination dest = new ActiveMQTopic(name);
1:         ActiveMQTextMessage message = new ActiveMQTextMessage();
1:         message.setDestination(dest);
1:         message.setText("Hello, world!");
1: 
1:         Subject subject = new PermsSubject() {
1:             @Override
1:             public boolean isPermitted(Permission toCheck) {
1:                 Permission assigned = createPerm("topic:myTopic:write");
1:                 assertEquals(assigned.toString(), toCheck.toString());
1:                 return assigned.implies(toCheck);
1:             }
1:         };
1: 
1:         ConnectionContext context = createContext(subject);
1:         ProducerBrokerExchange exchange = new ProducerBrokerExchange();
1:         exchange.setConnectionContext(context);
1: 
1:         filter.send(exchange, message);
1:     }
1: 
1: 
1:     protected Permission createPerm(String perm) {
1:         return new DestinationActionPermissionResolver().createPermission(perm);
1:     }
1: 
1: 
1:     private static class PermsSubject extends SubjectAdapter {
1: 
1:         @Override
1:         public PrincipalCollection getPrincipals() {
1:             return new SimplePrincipalCollection("foo", "someRealm");
1:         }
1: 
1:         @Override
1:         public boolean isPermittedAll(Collection<Permission> permissions) {
1:             assertNotNull(permissions);
1:             assertEquals(1, permissions.size());
1:             return isPermitted(permissions.iterator().next());
1:         }
1:     }
1: }
============================================================================