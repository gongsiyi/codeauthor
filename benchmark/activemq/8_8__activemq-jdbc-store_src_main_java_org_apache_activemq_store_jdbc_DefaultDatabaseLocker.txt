1:fc00993: /**
1:57b4941:  * Licensed to the Apache Software Foundation (ASF) under one or more
1:57b4941:  * contributor license agreements.  See the NOTICE file distributed with
1:57b4941:  * this work for additional information regarding copyright ownership.
1:57b4941:  * The ASF licenses this file to You under the Apache License, Version 2.0
1:57b4941:  * (the "License"); you may not use this file except in compliance with
1:57b4941:  * the License.  You may obtain a copy of the License at
1:b852dc8:  *
1:90d0c4b:  *      http://www.apache.org/licenses/LICENSE-2.0
4:90d0c4b:  *
1:90d0c4b:  * Unless required by applicable law or agreed to in writing, software
1:90d0c4b:  * distributed under the License is distributed on an "AS IS" BASIS,
1:90d0c4b:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:90d0c4b:  * See the License for the specific language governing permissions and
1:90d0c4b:  * limitations under the License.
1:90d0c4b:  */
1:90d0c4b: package org.apache.activemq.store.jdbc;
1:19881e7: 
1:19881e7: import java.io.IOException;
1:90d0c4b: import java.sql.Connection;
1:90d0c4b: import java.sql.PreparedStatement;
1:90d0c4b: import java.sql.SQLException;
1:0be51cb: import java.sql.SQLFeatureNotSupportedException;
1:01e520a: import org.apache.activemq.util.Handler;
1:6ce702d: import org.apache.activemq.util.ServiceStopper;
1:8bf987b: import org.slf4j.Logger;
1:8bf987b: import org.slf4j.LoggerFactory;
1:01e520a: 
1:90d0c4b: /**
1:74a7a8b:  * Represents an exclusive lock on a database to avoid multiple brokers running
1:74a7a8b:  * against the same logical database.
1:74a7a8b:  * 
1:80ac49d:  * @org.apache.xbean.XBean element="database-locker"
1:b0c2a40:  * 
1:90d0c4b:  */
1:efaa351: public class DefaultDatabaseLocker extends AbstractJDBCLocker {
1:8bf987b:     private static final Logger LOG = LoggerFactory.getLogger(DefaultDatabaseLocker.class);
1:01e520a: 
1:6e0aa4f:     protected volatile PreparedStatement lockCreateStatement;
1:6e0aa4f:     protected volatile PreparedStatement lockUpdateStatement;
1:6e0aa4f:     protected volatile Connection connection;
1:8274f09:     protected Handler<Exception> exceptionHandler;
1:8274f09: 
1:6ce702d:     public void doStart() throws Exception {
1:74a7a8b: 
1:fc00993:         LOG.info("Attempting to acquire the exclusive lock to become the Master broker");
1:8a8fcb6:         String sql = getStatements().getLockCreateStatement();
1:d948c17:         LOG.debug("Locking Query is "+sql);
1:d948c17:         
1:90d0c4b:         while (true) {
1:fb42a11:             try {
1:b852dc8:                 connection = dataSource.getConnection();
1:b852dc8:                 connection.setAutoCommit(false);
1:0be51cb:                 lockCreateStatement = connection.prepareStatement(sql);
1:0be51cb:                 lockCreateStatement.execute();
1:b852dc8:                 break;
1:74a7a8b:             } catch (Exception e) {
1:fb42a11:                 try {
1:efaa351:                     if (isStopping()) {
1:87589d7:                         throw new Exception(
1:87589d7:                                 "Cannot start broker as being asked to shut down. " 
1:87589d7:                                         + "Interrupted attempt to acquire lock: "
1:87589d7:                                         + e, e);
1:04aa9c5:                     }
1:01e520a:                     if (exceptionHandler != null) {
1:01e520a:                         try {
1:01e520a:                             exceptionHandler.handle(e);
1:01e520a:                         } catch (Throwable handlerException) {
1:87589d7:                             LOG.error( "The exception handler "
1:87589d7:                                     + exceptionHandler.getClass().getCanonicalName()
1:87589d7:                                     + " threw this exception: "
1:87589d7:                                     + handlerException
1:4150650:                                     + " while trying to handle this exception: "
1:87589d7:                                     + e, handlerException);
1:04aa9c5:                         }
1:8274f09: 
1:e2778fb:                     } else {
1:d948c17:                         LOG.debug("Lock failure: "+ e, e);
1:8274f09:                     }
1:01e520a:                 } finally {
1:87589d7:                     // Let's make sure the database connection is properly
1:87589d7:                     // closed when an error occurs so that we're not leaking
1:87589d7:                     // connections 
1:87589d7:                     if (null != connection) {
1:0a5ae2b:                         try {
1:0f3ce45:                             connection.rollback();
1:0f3ce45:                         } catch (SQLException e1) {
1:13bbe52:                             LOG.debug("Caught exception during rollback on connection: " + e1, e1);
1:0f3ce45:                         }
1:0f3ce45:                         try {
1:fb42a11:                             connection.close();
1:74a7a8b:                         } catch (SQLException e1) {
1:13bbe52:                             LOG.debug("Caught exception while closing connection: " + e1, e1);
1:e2778fb:                         }
1:19881e7:                         
1:87589d7:                         connection = null;
1:19881e7:                     }
1:01e520a:                 }
1:fb42a11:             } finally {
1:0be51cb:                 if (null != lockCreateStatement) {
1:fb42a11:                     try {
1:0be51cb:                         lockCreateStatement.close();
1:74a7a8b:                     } catch (SQLException e1) {
1:d948c17:                         LOG.debug("Caught while closing statement: " + e1, e1);
1:01e520a:                     }
1:0be51cb:                     lockCreateStatement = null;
1:01e520a:                 }
1:6ce702d:             }
1:01e520a: 
1:d948c17:             LOG.info("Failed to acquire lock.  Sleeping for " + lockAcquireSleepInterval + " milli(s) before trying again...");
1:0a5ae2b:             try {
1:19881e7:                 Thread.sleep(lockAcquireSleepInterval);
1:0a5ae2b:             } catch (InterruptedException ie) {
1:0a5ae2b:                 LOG.warn("Master lock retry sleep interrupted", ie);
1:0a5ae2b:             }
1:0a5ae2b:         }
1:01e520a: 
1:fc00993:         LOG.info("Becoming the master on dataSource: " + dataSource);
1:87589d7:     }
1:01e520a: 
1:6ce702d:     public void doStop(ServiceStopper stopper) throws Exception {
2:87589d7:         try {
1:0be51cb:             if (lockCreateStatement != null) {
1:0be51cb:                 lockCreateStatement.cancel();    			
1:0be51cb:             }
1:0be51cb:         } catch (SQLFeatureNotSupportedException e) {
1:0be51cb:             LOG.warn("Failed to cancel locking query on dataSource" + dataSource, e);    		
1:0be51cb:         }
1:0be51cb:         try {
1:0be51cb:     	    if (lockUpdateStatement != null) {
1:0be51cb:         	    lockUpdateStatement.cancel();    			
1:0be51cb:     	    }
1:0be51cb:         } catch (SQLFeatureNotSupportedException e) {
1:0be51cb:             LOG.warn("Failed to cancel locking query on dataSource" + dataSource, e);    		
1:0be51cb:         }
1:6e0aa4f: 
1:6e0aa4f:         // when the connection is closed from an outside source (lost TCP
1:6e0aa4f:         // connection, db server, etc) and this connection is managed by a pool
1:6e0aa4f:         // it is important to close the connection so that we don't leak
1:6e0aa4f:         // connections
1:6e0aa4f: 
1:6e0aa4f:         if (connection != null) {
1:6e0aa4f:             try {
1:6e0aa4f:                 connection.rollback();
1:6e0aa4f:             } catch (SQLException sqle) {
1:165959e:                 LOG.debug("Exception while rollbacking the connection on shutdown. This exception is ignored.", sqle);
1:6e0aa4f:             } finally {
1:0be51cb:                 try {
1:6e0aa4f:                     connection.close();
1:6e0aa4f:                 } catch (SQLException ignored) {
1:6e0aa4f:                     LOG.debug("Exception while closing connection on shutdown. This exception is ignored.", ignored);
1:fb42a11:                 }
1:6e0aa4f:                 lockCreateStatement = null;
1:fb42a11:             }
1:fb42a11:         }
1:87589d7:     }
1:74a7a8b: 
1:dc258ab:     public boolean keepAlive() throws IOException {
1:b35bc79:         boolean result = false;
1:87589d7:         try {
1:8a8fcb6:             lockUpdateStatement = connection.prepareStatement(getStatements().getLockUpdateStatement());
1:0be51cb:             lockUpdateStatement.setLong(1, System.currentTimeMillis());
1:efaa351:             setQueryTimeout(lockUpdateStatement);
1:0be51cb:             int rows = lockUpdateStatement.executeUpdate();
1:90d0c4b:             if (rows == 1) {
1:b35bc79:                 result=true;
1:87589d7:             }
1:74a7a8b:         } catch (Exception e) {
1:fc00993:             LOG.error("Failed to update database lock: " + e, e);
1:a8d3908:         } finally {
1:0be51cb:             if (lockUpdateStatement != null) {
1:b35bc79:                 try {
1:0be51cb:                     lockUpdateStatement.close();
1:b35bc79:                 } catch (SQLException e) {
1:b35bc79:                     LOG.error("Failed to close statement",e);
1:b35bc79:                 }
1:0be51cb:                 lockUpdateStatement = null;
1:b35bc79:             }
1:87589d7:         }
1:b35bc79:         return result;
1:87589d7:     }
1:19881e7:  
1:19881e7:     public long getLockAcquireSleepInterval() {
1:19881e7:         return lockAcquireSleepInterval;
1:19881e7:     }
1:19881e7: 
1:19881e7:     public void setLockAcquireSleepInterval(long lockAcquireSleepInterval) {
1:19881e7:         this.lockAcquireSleepInterval = lockAcquireSleepInterval;
1:19881e7:     }
1:01e520a:     
1:01e520a:     public Handler getExceptionHandler() {
1:01e520a:         return exceptionHandler;
1:01e520a:     }
1:01e520a: 
1:01e520a:     public void setExceptionHandler(Handler exceptionHandler) {
1:01e520a:         this.exceptionHandler = exceptionHandler;
1:04aa9c5:     }
1:04aa9c5: 
1:87589d7: }
============================================================================
author:gtully
-------------------------------------------------------------------------------
commit:165959e
/////////////////////////////////////////////////////////////////////////
1:                 LOG.debug("Exception while rollbacking the connection on shutdown. This exception is ignored.", sqle);
commit:efaa351
/////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////
1: public class DefaultDatabaseLocker extends AbstractJDBCLocker {
/////////////////////////////////////////////////////////////////////////
1:                     if (isStopping()) {
/////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////
1:             setQueryTimeout(lockUpdateStatement);
/////////////////////////////////////////////////////////////////////////
author:Claus Ibsen
-------------------------------------------------------------------------------
commit:8a8fcb6
/////////////////////////////////////////////////////////////////////////
1:         String sql = getStatements().getLockCreateStatement();
/////////////////////////////////////////////////////////////////////////
1:             lockUpdateStatement = connection.prepareStatement(getStatements().getLockUpdateStatement());
commit:6e0aa4f
/////////////////////////////////////////////////////////////////////////
1:     protected volatile PreparedStatement lockCreateStatement;
1:     protected volatile PreparedStatement lockUpdateStatement;
1:     protected volatile Connection connection;
0:     protected volatile boolean stopping;
/////////////////////////////////////////////////////////////////////////
1: 
1:         // when the connection is closed from an outside source (lost TCP
1:         // connection, db server, etc) and this connection is managed by a pool
1:         // it is important to close the connection so that we don't leak
1:         // connections
1: 
1:         if (connection != null) {
1:             try {
1:                 connection.rollback();
1:             } catch (SQLException sqle) {
0:                 LOG.warn("Exception while rollbacking the connection on shutdown. This exception is ignored.", sqle);
1:             } finally {
1:                     connection.close();
1:                 } catch (SQLException ignored) {
1:                     LOG.debug("Exception while closing connection on shutdown. This exception is ignored.", ignored);
1:                 lockCreateStatement = null;
author:Gary Tully
-------------------------------------------------------------------------------
commit:13bbe52
/////////////////////////////////////////////////////////////////////////
1:                             LOG.debug("Caught exception during rollback on connection: " + e1, e1);
1:                             LOG.debug("Caught exception while closing connection: " + e1, e1);
commit:0f3ce45
/////////////////////////////////////////////////////////////////////////
1:                             connection.rollback();
1:                         } catch (SQLException e1) {
0:                             LOG.error("Caught exception during rollback on connection: " + e1, e1);
1:                         }
1:                         try {
commit:aac50fc
/////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////
commit:dc258ab
/////////////////////////////////////////////////////////////////////////
1:     public boolean keepAlive() throws IOException {
commit:04aa9c5
/////////////////////////////////////////////////////////////////////////
0:     protected int queryTimeout = 10;
/////////////////////////////////////////////////////////////////////////
0:             if (queryTimeout > 0) {
0:                 lockUpdateStatement.setQueryTimeout(queryTimeout);
1:             }
/////////////////////////////////////////////////////////////////////////
0:     public int getQueryTimeout() {
0:         return queryTimeout;
1:     }
1: 
0:     public void setQueryTimeout(int queryTimeout) {
0:         this.queryTimeout = queryTimeout;
1:     }
commit:4150650
/////////////////////////////////////////////////////////////////////////
1:                                     + " while trying to handle this exception: "
commit:8274f09
/////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////
0:     protected DataSource dataSource;
0:     protected Statements statements;
0:     protected long lockAcquireSleepInterval = DEFAULT_LOCK_ACQUIRE_SLEEP_INTERVAL;
0:     protected Connection connection;
0:     protected boolean stopping;
1:     protected Handler<Exception> exceptionHandler;
1:     
0:     public DefaultDatabaseLocker() {
1:     }
0:         setPersistenceAdapter(persistenceAdapter);
0:     public void setPersistenceAdapter(JDBCPersistenceAdapter adapter) throws IOException {
0:         this.dataSource = adapter.getLockDataSource();
0:         this.statements = adapter.getStatements();
1:     
/////////////////////////////////////////////////////////////////////////
0:                 statement.execute();
commit:a8d3908
/////////////////////////////////////////////////////////////////////////
1:         } finally {
commit:fb42a11
/////////////////////////////////////////////////////////////////////////
1:         try {
0:             if (connection != null && !connection.isClosed()) {
1:                 try {
0:                     connection.rollback();
0:                 } catch (SQLException sqle) {
0:                     LOG.warn("Exception while rollbacking the connection on shutdown", sqle);
1:                 } finally {
1:                     try {
1:                         connection.close();
0:                     } catch (SQLException ignored) {
0:                         LOG.debug("Exception while closing connection on shutdown", ignored);
1:                     }
1:                 }
1:             }
0:         } catch (SQLException sqle) {
0:             LOG.warn("Exception while checking close status of connection on shutdown", sqle);
commit:e2778fb
/////////////////////////////////////////////////////////////////////////
0: import java.sql.ResultSet;
0: import java.sql.ResultSetMetaData;
/////////////////////////////////////////////////////////////////////////
0:                 if (statement.getMetaData() != null) {
0:                     ResultSet rs = statement.executeQuery();
0:                     // if not already locked the statement below blocks until lock acquired
0:                     rs.next();
1:                 } else {
0:                     statement.execute();
1:                 }
commit:19881e7
/////////////////////////////////////////////////////////////////////////
1: import java.io.IOException;
/////////////////////////////////////////////////////////////////////////
0:     public static final long DEFAULT_LOCK_ACQUIRE_SLEEP_INTERVAL = 1000;
0:     private long lockAcquireSleepInterval = DEFAULT_LOCK_ACQUIRE_SLEEP_INTERVAL;
1: 
0:     public DefaultDatabaseLocker(JDBCPersistenceAdapter persistenceAdapter) throws IOException {
0:         this(persistenceAdapter.getLockDataSource(), persistenceAdapter.getStatements());
1:     }
1: 
/////////////////////////////////////////////////////////////////////////
0:             LOG.debug("Sleeping for " + lockAcquireSleepInterval + " milli(s) before trying again to get the lock...");
1:             Thread.sleep(lockAcquireSleepInterval);
/////////////////////////////////////////////////////////////////////////
1:  
1:     public long getLockAcquireSleepInterval() {
1:         return lockAcquireSleepInterval;
1:     }
1: 
1:     public void setLockAcquireSleepInterval(long lockAcquireSleepInterval) {
1:         this.lockAcquireSleepInterval = lockAcquireSleepInterval;
1:     }
author:Hiram R. Chirino
-------------------------------------------------------------------------------
commit:c5cf038
commit:b0c2a40
/////////////////////////////////////////////////////////////////////////
1:  * 
commit:d948c17
/////////////////////////////////////////////////////////////////////////
0:         String sql = statements.getLockCreateStatement();
1:         LOG.debug("Locking Query is "+sql);
1:         
/////////////////////////////////////////////////////////////////////////
1:                         LOG.debug("Lock failure: "+ e, e);
/////////////////////////////////////////////////////////////////////////
1:                         LOG.debug("Caught while closing statement: " + e1, e1);
1:             LOG.info("Failed to acquire lock.  Sleeping for " + lockAcquireSleepInterval + " milli(s) before trying again...");
commit:80ac49d
/////////////////////////////////////////////////////////////////////////
1:  * @org.apache.xbean.XBean element="database-locker"
commit:73b8f23
/////////////////////////////////////////////////////////////////////////
commit:01e520a
/////////////////////////////////////////////////////////////////////////
1: import org.apache.activemq.util.Handler;
/////////////////////////////////////////////////////////////////////////
0:     private Handler<Exception> exceptionHandler;
1:     
/////////////////////////////////////////////////////////////////////////
1: 
1:                 if (exceptionHandler != null) {
1:                     try {
1:                         exceptionHandler.handle(e);
1:                     } catch (Throwable handlerException) {
0:                         LOG.error("The exception handler " + exceptionHandler.getClass().getCanonicalName() + " threw this exception: " + handlerException
0:                                 + " while trying to handle this excpetion: " + e, handlerException);
1:                     }
1: 
0:                 } else {
0:                     LOG.error("Failed to acquire lock: " + e, e);
1:                 }
1:             } finally {
1: 
/////////////////////////////////////////////////////////////////////////
1:     
1:     public Handler getExceptionHandler() {
1: 		return exceptionHandler;
1: 	}
1: 
1: 	public void setExceptionHandler(Handler exceptionHandler) {
1: 		this.exceptionHandler = exceptionHandler;
1: 	}
1: 
commit:fc00993
/////////////////////////////////////////////////////////////////////////
1: /**
/////////////////////////////////////////////////////////////////////////
0:     private static final Log LOG = LogFactory.getLog(DefaultDatabaseLocker.class);
/////////////////////////////////////////////////////////////////////////
1:         LOG.info("Attempting to acquire the exclusive lock to become the Master broker");
/////////////////////////////////////////////////////////////////////////
0:                 LOG.error("Failed to acquire lock: " + e, e);
0:                         LOG.warn("Caught while closing statement: " + e1, e1);
/////////////////////////////////////////////////////////////////////////
0:                         LOG.warn("Caught while closing connection: " + e1, e1);
0:             LOG.debug("Sleeping for " + sleepTime + " milli(s) before trying again to get the lock...");
1:         LOG.info("Becoming the master on dataSource: " + dataSource);
/////////////////////////////////////////////////////////////////////////
1:             LOG.error("Failed to update database lock: " + e, e);
commit:74a7a8b
/////////////////////////////////////////////////////////////////////////
0: import javax.sql.DataSource;
1: 
0: import org.apache.commons.logging.Log;
0: import org.apache.commons.logging.LogFactory;
1: 
1:  * Represents an exclusive lock on a database to avoid multiple brokers running
1:  * against the same logical database.
1:  * 
/////////////////////////////////////////////////////////////////////////
1:             } catch (Exception e) {
/////////////////////////////////////////////////////////////////////////
1:                     } catch (SQLException e1) {
/////////////////////////////////////////////////////////////////////////
1:                     } catch (SQLException e1) {
/////////////////////////////////////////////////////////////////////////
1:         } catch (Exception e) {
commit:57b4941
/////////////////////////////////////////////////////////////////////////
1:  * Licensed to the Apache Software Foundation (ASF) under one or more
1:  * contributor license agreements.  See the NOTICE file distributed with
1:  * this work for additional information regarding copyright ownership.
1:  * The ASF licenses this file to You under the Apache License, Version 2.0
1:  * (the "License"); you may not use this file except in compliance with
1:  * the License.  You may obtain a copy of the License at
author:Bosanac Dejan
-------------------------------------------------------------------------------
commit:6ce702d
/////////////////////////////////////////////////////////////////////////
0: import org.apache.activemq.broker.AbstractLocker;
0: import org.apache.activemq.store.PersistenceAdapter;
1: import org.apache.activemq.util.ServiceStopper;
/////////////////////////////////////////////////////////////////////////
0: public class DefaultDatabaseLocker extends AbstractLocker {
/////////////////////////////////////////////////////////////////////////
0:     public void configure(PersistenceAdapter adapter) throws IOException {
0:         if (adapter instanceof JDBCPersistenceAdapter) {
0:             this.dataSource = ((JDBCPersistenceAdapter) adapter).getLockDataSource();
0:             this.statements = ((JDBCPersistenceAdapter) adapter).getStatements();
1:         }
0:         lockAcquireSleepInterval = DEFAULT_LOCK_ACQUIRE_SLEEP_INTERVAL;
1:     public void doStart() throws Exception {
/////////////////////////////////////////////////////////////////////////
1:     public void doStop(ServiceStopper stopper) throws Exception {
commit:8bf987b
/////////////////////////////////////////////////////////////////////////
1: import org.slf4j.Logger;
1: import org.slf4j.LoggerFactory;
/////////////////////////////////////////////////////////////////////////
1:     private static final Logger LOG = LoggerFactory.getLogger(DefaultDatabaseLocker.class);
commit:0a5ae2b
/////////////////////////////////////////////////////////////////////////
1:             try {
0:             	Thread.sleep(lockAcquireSleepInterval);
1:             } catch (InterruptedException ie) {
1:             	LOG.warn("Master lock retry sleep interrupted", ie);
1:             }
/////////////////////////////////////////////////////////////////////////
0:         if (connection != null && !connection.isClosed()) {
1:         	try {
0:         		connection.rollback();
0:         	} catch (SQLException sqle) {
0:         		LOG.warn("Exception while rollbacking the connection on shutdown", sqle);
1:         	}
author:Robert Davies
-------------------------------------------------------------------------------
commit:0be51cb
/////////////////////////////////////////////////////////////////////////
1: import java.sql.SQLFeatureNotSupportedException;
/////////////////////////////////////////////////////////////////////////
0:     protected PreparedStatement lockCreateStatement;
0:     protected PreparedStatement lockUpdateStatement;
/////////////////////////////////////////////////////////////////////////
1:                 lockCreateStatement = connection.prepareStatement(sql);
1:                 lockCreateStatement.execute();
/////////////////////////////////////////////////////////////////////////
1:                 if (null != lockCreateStatement) {
1:                         lockCreateStatement.close();
1:                     lockCreateStatement = null;
/////////////////////////////////////////////////////////////////////////
1:             if (lockCreateStatement != null) {
1:                 lockCreateStatement.cancel();    			
1:             }
1:         } catch (SQLFeatureNotSupportedException e) {
1:             LOG.warn("Failed to cancel locking query on dataSource" + dataSource, e);    		
1:         }
1:         try {
1:     	    if (lockUpdateStatement != null) {
1:         	    lockUpdateStatement.cancel();    			
1:     	    }
1:         } catch (SQLFeatureNotSupportedException e) {
1:             LOG.warn("Failed to cancel locking query on dataSource" + dataSource, e);    		
1:         }
1:         try {
/////////////////////////////////////////////////////////////////////////
0:                     lockCreateStatement = null;
/////////////////////////////////////////////////////////////////////////
0:             lockUpdateStatement = connection.prepareStatement(statements.getLockUpdateStatement());
1:             lockUpdateStatement.setLong(1, System.currentTimeMillis());
0:             lockUpdateStatement.setQueryTimeout(10);
1:             int rows = lockUpdateStatement.executeUpdate();
1:             if (lockUpdateStatement != null) {
1:                     lockUpdateStatement.close();
1:                 lockUpdateStatement = null;
commit:b35bc79
/////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////
0:         PreparedStatement statement = null;
/////////////////////////////////////////////////////////////////////////
0:         PreparedStatement statement = null;
1:         boolean result = false;
0:             statement = connection.prepareStatement(statements.getLockUpdateStatement());
1:                 result=true;
0:         }finally {
0:             if (statement != null) {
1:                 try {
0:                     statement.close();
1:                 } catch (SQLException e) {
1:                     LOG.error("Failed to close statement",e);
1:                 }
1:             }
1:         return result;
author:Bruce Snyder
-------------------------------------------------------------------------------
commit:87589d7
/////////////////////////////////////////////////////////////////////////
1:                 try {
0:                     if (stopping) {
1:                         throw new Exception(
1:                                 "Cannot start broker as being asked to shut down. " 
1:                                         + "Interrupted attempt to acquire lock: "
1:                                         + e, e);
0:                     if (exceptionHandler != null) {
1:                         try {
0:                             exceptionHandler.handle(e);
0:                         } catch (Throwable handlerException) {
1:                             LOG.error( "The exception handler "
1:                                     + exceptionHandler.getClass().getCanonicalName()
1:                                     + " threw this exception: "
1:                                     + handlerException
0:                                     + " while trying to handle this excpetion: "
1:                                     + e, handlerException);
1:                         }
0:                     } else {
0:                         LOG.error("Failed to acquire lock: " + e, e);
1:                     }
0:                 } finally {
1:                     // Let's make sure the database connection is properly
1:                     // closed when an error occurs so that we're not leaking
1:                     // connections 
1:                     if (null != connection) {
1:                         try {
0:                             connection.close();
0:                         } catch (SQLException e1) {
0:                             LOG.error("Caught exception while closing connection: " + e1, e1);
1:                         }
0:                         
1:                         connection = null;
1:                     }
/////////////////////////////////////////////////////////////////////////
0:                 Thread.sleep(lockAcquireSleepInterval);
0:                 LOG.warn("Master lock retry sleep interrupted", ie);
/////////////////////////////////////////////////////////////////////////
0:         return exceptionHandler;
1:     }
0:     public void setExceptionHandler(Handler exceptionHandler) {
0:         this.exceptionHandler = exceptionHandler;
1:     }
author:James Strachan
-------------------------------------------------------------------------------
commit:b852dc8
/////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////
1:  *
0:     private PreparedStatement statement;
/////////////////////////////////////////////////////////////////////////
0: 
0: 
1:                 connection = dataSource.getConnection();
1:                 connection.setAutoCommit(false);
0:                 String sql = statements.getLockCreateStatement();
0:                 statement = connection.prepareStatement(sql);
1:                 break;
0:                 if (stopping) {
0:                     throw new Exception("Cannot start broker as being asked to shut down. Interrupted attempt to acquire lock: " + e, e);
0:                 if (null != statement) {
0:                     try {
0:                         statement.close();
0:                     }
0:                     catch (SQLException e1) {
0:                         log.warn("Caught while closing statement: " + e1, e1);
0:                     }
0:                     statement = null;
0:                 }
0:                 if (null != connection) {
0:                     try {
0:                         connection.close();
0:                     }
0:                     catch (SQLException e1) {
0:                         log.warn("Caught while closing connection: " + e1, e1);
0:                     }
0:                     connection = null;
0:                 }
0: 
0: 
commit:ed1537b
/////////////////////////////////////////////////////////////////////////
0:         log.info("Attempting to acquire the exclusive lock to become the Master broker");
0: 		String sql = statements.getLockCreateStatement();
0: 		PreparedStatement statement = connection.prepareStatement(sql);
0:                 statement.execute();
0: 				break;
commit:4f715a2
/////////////////////////////////////////////////////////////////////////
0:     private boolean stopping;
/////////////////////////////////////////////////////////////////////////
0:         stopping = false;
/////////////////////////////////////////////////////////////////////////
0:                 if (stopping) { 
0:                     throw new Exception("Cannot start broker as being asked to shut down. Interupted attempt to acquire lock: " + e, e);
0:                 }
/////////////////////////////////////////////////////////////////////////
0:         stopping = true;
commit:7115462
/////////////////////////////////////////////////////////////////////////
0:                 log.info("Attempting to acquire the exclusive lock to become the Master broker");
/////////////////////////////////////////////////////////////////////////
0:             log.debug("Sleeping for " + sleepTime + " milli(s) before trying again to get the lock...");
commit:7dac801
/////////////////////////////////////////////////////////////////////////
0:             connection.rollback();
commit:90d0c4b
/////////////////////////////////////////////////////////////////////////
0: /*
0:  * Copyright 2005-2006 The Apache Software Foundation.
1:  *
0:  * Licensed under the Apache License, Version 2.0 (the "License");
0:  * you may not use this file except in compliance with the License.
0:  * You may obtain a copy of the License at
1:  *
1:  *      http://www.apache.org/licenses/LICENSE-2.0
1:  *
1:  * Unless required by applicable law or agreed to in writing, software
1:  * distributed under the License is distributed on an "AS IS" BASIS,
1:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:  * See the License for the specific language governing permissions and
1:  * limitations under the License.
1:  */
1: package org.apache.activemq.store.jdbc;
0: 
0: import org.apache.activemq.Service;
0: import org.apache.activemq.broker.BrokerService;
0: import org.apache.commons.logging.Log;
0: import org.apache.commons.logging.LogFactory;
0: 
0: import javax.sql.DataSource;
0: 
1: import java.sql.Connection;
1: import java.sql.PreparedStatement;
1: import java.sql.SQLException;
0: 
1: /**
0:  * Represents an exclusive lock on a database to avoid multiple brokers
0:  * running against the same logical database.
1:  * 
0:  * @version $Revision: $
1:  */
0: public class DefaultDatabaseLocker implements DatabaseLocker {
0:     private static final Log log = LogFactory.getLog(DefaultDatabaseLocker.class);
0:     
0:     private final DataSource dataSource;
0:     private final Statements statements;
0:     private long sleepTime = 1000;
0:     private Connection connection;
0: 
0:     public DefaultDatabaseLocker(DataSource dataSource, Statements statements) {
0:         this.dataSource = dataSource;
0:         this.statements = statements;
0:     }
0: 
0:     public void start() throws Exception {
0:         log.debug("Attempting to acquire exclusive lock on the database");
0:         
0:         connection = dataSource.getConnection();
0:         connection.setAutoCommit(false);
0:         
0:         PreparedStatement statement = connection.prepareStatement(statements.getLockCreateStatement());
1:         while (true) {
0:             try {
0:                 boolean answer = statement.execute();
0:                 if (answer) {
0:                     break;
0:                 }
0:             }
0:             catch (Exception e) {
0:                 log.error("Failed to acquire lock: " + e, e);
0:             }
0:             log.info("Sleeping for " + sleepTime + " milli(s) before trying again to get the lock...");
0:             Thread.sleep(sleepTime);
0:         }
0:         
0:         log.info("Becoming the master on dataSource: " + dataSource);
0:     }
0: 
0:     public void stop() throws Exception {
0:         if (connection != null) {
0:             connection.close();
0:         }
0:     }
0: 
0:     public boolean keepAlive() {
0:         try {
0:             PreparedStatement statement = connection.prepareStatement(statements.getLockUpdateStatement());
0:             statement.setLong(1, System.currentTimeMillis());
0:             int rows = statement.executeUpdate();
1:             if (rows == 1) {
0:                 return true;
0:             }
0:         }
0:         catch (Exception e) {
0:             log.error("Failed to update database lock: " + e, e);
0:         }
0:         return false;
0:     }
0: }
============================================================================