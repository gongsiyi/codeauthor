1:f9451e5: /**
1:f9451e5:  * Licensed to the Apache Software Foundation (ASF) under one or more
1:f9451e5:  * contributor license agreements.  See the NOTICE file distributed with
1:f9451e5:  * this work for additional information regarding copyright ownership.
1:f9451e5:  * The ASF licenses this file to You under the Apache License, Version 2.0
1:f9451e5:  * (the "License"); you may not use this file except in compliance with
1:f9451e5:  * the License.  You may obtain a copy of the License at
1:f9451e5:  *
1:f9451e5:  *      http://www.apache.org/licenses/LICENSE-2.0
1:f9451e5:  *
1:f9451e5:  * Unless required by applicable law or agreed to in writing, software
1:f9451e5:  * distributed under the License is distributed on an "AS IS" BASIS,
1:f9451e5:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:f9451e5:  * See the License for the specific language governing permissions and
1:f9451e5:  * limitations under the License.
1:f9451e5:  */
1:f9451e5: package org.apache.activemq.shiro.authz;
1:f9451e5: 
1:f9451e5: import org.apache.shiro.authz.Permission;
1:f9451e5: import org.apache.shiro.authz.permission.WildcardPermission;
1:f9451e5: import org.junit.Test;
1:f9451e5: 
1:f9451e5: import java.util.List;
1:f9451e5: import java.util.Set;
1:f9451e5: 
1:f9451e5: import static org.junit.Assert.*;
1:f9451e5: 
1:f9451e5: /**
1:f9451e5:  * @since 5.10.0
1:f9451e5:  */
1:f9451e5: public class ActiveMQWildcardPermissionTest {
1:f9451e5: 
1:f9451e5:     @Test
1:f9451e5:     public void testNotWildcardPermission() {
1:f9451e5:         ActiveMQWildcardPermission perm = new ActiveMQWildcardPermission("topic:TEST:*");
1:f9451e5:         Permission dummy = new Permission() {
1:f9451e5:             @Override
1:f9451e5:             public boolean implies(Permission p) {
1:f9451e5:                 return false;
1:f9451e5:             }
1:f9451e5:         };
1:f9451e5:        assertFalse(perm.implies(dummy));
1:f9451e5:     }
1:f9451e5: 
1:f9451e5:     @Test
1:f9451e5:     public void testIntrapartWildcard() {
1:f9451e5:         ActiveMQWildcardPermission superset = new ActiveMQWildcardPermission("topic:ActiveMQ.Advisory.*:read");
1:f9451e5:         ActiveMQWildcardPermission subset = new ActiveMQWildcardPermission("topic:ActiveMQ.Advisory.Topic:read");
1:f9451e5: 
1:f9451e5:         assertTrue(superset.implies(subset));
1:f9451e5:         assertFalse(subset.implies(superset));
1:f9451e5:     }
1:f9451e5: 
1:f9451e5:     @Test
1:f9451e5:     public void testMatches() {
1:f9451e5:         assertMatch("x", "x");
1:f9451e5:         assertNoMatch("x", "y");
1:f9451e5: 
1:f9451e5:         assertMatch("xx", "xx");
1:f9451e5:         assertNoMatch("xy", "xz");
1:f9451e5: 
1:f9451e5:         assertMatch("?", "x");
1:f9451e5:         assertMatch("x?", "xy");
1:f9451e5:         assertMatch("?y", "xy");
1:f9451e5:         assertMatch("x?z", "xyz");
1:f9451e5: 
1:f9451e5:         assertMatch("*", "x");
1:f9451e5:         assertMatch("x*", "x");
1:f9451e5:         assertMatch("x*", "xy");
1:f9451e5:         assertMatch("xy*", "xy");
1:f9451e5:         assertMatch("xy*", "xyz");
1:f9451e5: 
1:f9451e5:         assertMatch("*x", "x");
1:f9451e5:         assertNoMatch("*x", "y");
1:f9451e5: 
1:f9451e5:         assertMatch("*x", "wx");
1:f9451e5:         assertNoMatch("*x", "wz");
1:f9451e5:         assertMatch("*x", "vwx");
1:f9451e5: 
1:f9451e5:         assertMatch("x*z", "xz");
1:f9451e5:         assertMatch("x*z", "xyz");
1:f9451e5:         assertMatch("x*z", "xyyz");
1:f9451e5: 
1:f9451e5:         assertNoMatch("ab*t?z", "abz");
1:f9451e5:         assertNoMatch("ab*d*yz", "abcdz");
1:f9451e5: 
1:f9451e5:         assertMatch("ab**cd**ef*yz", "abcdefyz");
1:f9451e5:         assertMatch("a*c?*z", "abcxyz");
1:f9451e5:         assertMatch("a*cd*z", "abcdxyz");
1:f9451e5: 
1:f9451e5:         assertMatch("*", "x:x");
1:f9451e5:         assertMatch("*", "x:x:x");
1:f9451e5:         assertMatch("x", "x:y");
1:f9451e5:         assertMatch("x", "x:y:z");
1:f9451e5: 
1:f9451e5:         assertMatch("foo?armat*", "foobarmatches");
1:f9451e5:         assertMatch("f*", "f");
1:f9451e5:         assertNoMatch("foo", "f");
1:f9451e5:         assertMatch("fo*b", "foob");
1:f9451e5:         assertNoMatch("fo*b*r", "fooba");
1:f9451e5:         assertNoMatch("foo*", "f");
1:f9451e5: 
1:f9451e5:         assertMatch("t*k?ou", "thankyou");
1:f9451e5:         assertMatch("he*l*world", "helloworld");
1:f9451e5:         assertNoMatch("foo", "foob");
1:f9451e5: 
1:f9451e5:         assertMatch("*:ActiveMQ.Advisory", "foo:ActiveMQ.Advisory");
1:f9451e5:         assertNoMatch("*:ActiveMQ.Advisory", "foo:ActiveMQ.Advisory.");
1:f9451e5:         assertMatch("*:ActiveMQ.Advisory*", "foo:ActiveMQ.Advisory");
1:f9451e5:         assertMatch("*:ActiveMQ.Advisory*", "foo:ActiveMQ.Advisory.");
1:f9451e5:         assertMatch("*:ActiveMQ.Advisory.*", "foo:ActiveMQ.Advisory.Connection");
1:f9451e5:         assertMatch("*:ActiveMQ.Advisory*:read", "foo:ActiveMQ.Advisory.Connection:read");
1:f9451e5:         assertNoMatch("*:ActiveMQ.Advisory*:read", "foo:ActiveMQ.Advisory.Connection:write");
1:f9451e5:         assertMatch("*:ActiveMQ.Advisory*:*", "foo:ActiveMQ.Advisory.Connection:read");
1:f9451e5:         assertMatch("*:ActiveMQ.Advisory*:*", "foo:ActiveMQ.Advisory.");
1:f9451e5:         assertMatch("topic", "topic:TEST:*");
1:f9451e5:         assertNoMatch("*:ActiveMQ*", "topic:TEST:*");
1:f9451e5:         assertMatch("topic:ActiveMQ.Advisory*", "topic:ActiveMQ.Advisory.Connection:create");
1:f9451e5:         assertMatch("foo?ar", "foobar");
1:f9451e5:     }
1:f9451e5: 
1:f9451e5:     protected static void assertMatch(String pattern, String value) {
1:f9451e5:         assertTrue(matches(pattern, value));
1:f9451e5:     }
1:f9451e5: 
1:f9451e5:     protected static void assertNoMatch(String pattern, String value) {
1:f9451e5:         assertFalse(matches(pattern, value));
1:f9451e5:     }
1:f9451e5: 
1:f9451e5:     protected static boolean matches(String pattern, String value) {
1:f9451e5:         ActiveMQWildcardPermission patternPerm = new ActiveMQWildcardPermission(pattern);
1:f9451e5:         WildcardPermission valuePerm = new WildcardPermission(value, true);
1:f9451e5:         return patternPerm.implies(valuePerm);
1:f9451e5:     }
1:f9451e5: 
1:f9451e5:     @Test(expected=IllegalStateException.class)
1:f9451e5:     public void testGetPartsByReflectionThrowingException() {
1:f9451e5: 
1:f9451e5:         ActiveMQWildcardPermission perm = new ActiveMQWildcardPermission("foo:bar") {
1:f9451e5:             @Override
1:f9451e5:             protected List<Set<String>> doGetPartsByReflection(WildcardPermission wp) throws Exception {
1:f9451e5:                 throw new RuntimeException("Testing failure");
1:f9451e5:             }
1:f9451e5:         };
1:f9451e5: 
1:f9451e5:         WildcardPermission otherPerm = new WildcardPermission("foo:bar:baz");
1:f9451e5: 
1:f9451e5:         perm.implies(otherPerm);
1:f9451e5:     }
1:f9451e5: 
1:f9451e5:     @Test
1:f9451e5:     public void testImpliesWithExtraParts() {
1:f9451e5:         ActiveMQWildcardPermission perm1 = new ActiveMQWildcardPermission("foo:bar:baz");
1:f9451e5:         ActiveMQWildcardPermission perm2 = new ActiveMQWildcardPermission("foo:bar");
1:f9451e5:         assertFalse(perm1.implies(perm2));
1:f9451e5:     }
1:f9451e5: 
1:f9451e5: }
============================================================================
author:Les Hazlewood
-------------------------------------------------------------------------------
commit:f9451e5
/////////////////////////////////////////////////////////////////////////
1: /**
1:  * Licensed to the Apache Software Foundation (ASF) under one or more
1:  * contributor license agreements.  See the NOTICE file distributed with
1:  * this work for additional information regarding copyright ownership.
1:  * The ASF licenses this file to You under the Apache License, Version 2.0
1:  * (the "License"); you may not use this file except in compliance with
1:  * the License.  You may obtain a copy of the License at
1:  *
1:  *      http://www.apache.org/licenses/LICENSE-2.0
1:  *
1:  * Unless required by applicable law or agreed to in writing, software
1:  * distributed under the License is distributed on an "AS IS" BASIS,
1:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:  * See the License for the specific language governing permissions and
1:  * limitations under the License.
1:  */
1: package org.apache.activemq.shiro.authz;
1: 
1: import org.apache.shiro.authz.Permission;
1: import org.apache.shiro.authz.permission.WildcardPermission;
1: import org.junit.Test;
1: 
1: import java.util.List;
1: import java.util.Set;
1: 
1: import static org.junit.Assert.*;
1: 
1: /**
1:  * @since 5.10.0
1:  */
1: public class ActiveMQWildcardPermissionTest {
1: 
1:     @Test
1:     public void testNotWildcardPermission() {
1:         ActiveMQWildcardPermission perm = new ActiveMQWildcardPermission("topic:TEST:*");
1:         Permission dummy = new Permission() {
1:             @Override
1:             public boolean implies(Permission p) {
1:                 return false;
1:             }
1:         };
1:        assertFalse(perm.implies(dummy));
1:     }
1: 
1:     @Test
1:     public void testIntrapartWildcard() {
1:         ActiveMQWildcardPermission superset = new ActiveMQWildcardPermission("topic:ActiveMQ.Advisory.*:read");
1:         ActiveMQWildcardPermission subset = new ActiveMQWildcardPermission("topic:ActiveMQ.Advisory.Topic:read");
1: 
1:         assertTrue(superset.implies(subset));
1:         assertFalse(subset.implies(superset));
1:     }
1: 
1:     @Test
1:     public void testMatches() {
1:         assertMatch("x", "x");
1:         assertNoMatch("x", "y");
1: 
1:         assertMatch("xx", "xx");
1:         assertNoMatch("xy", "xz");
1: 
1:         assertMatch("?", "x");
1:         assertMatch("x?", "xy");
1:         assertMatch("?y", "xy");
1:         assertMatch("x?z", "xyz");
1: 
1:         assertMatch("*", "x");
1:         assertMatch("x*", "x");
1:         assertMatch("x*", "xy");
1:         assertMatch("xy*", "xy");
1:         assertMatch("xy*", "xyz");
1: 
1:         assertMatch("*x", "x");
1:         assertNoMatch("*x", "y");
1: 
1:         assertMatch("*x", "wx");
1:         assertNoMatch("*x", "wz");
1:         assertMatch("*x", "vwx");
1: 
1:         assertMatch("x*z", "xz");
1:         assertMatch("x*z", "xyz");
1:         assertMatch("x*z", "xyyz");
1: 
1:         assertNoMatch("ab*t?z", "abz");
1:         assertNoMatch("ab*d*yz", "abcdz");
1: 
1:         assertMatch("ab**cd**ef*yz", "abcdefyz");
1:         assertMatch("a*c?*z", "abcxyz");
1:         assertMatch("a*cd*z", "abcdxyz");
1: 
1:         assertMatch("*", "x:x");
1:         assertMatch("*", "x:x:x");
1:         assertMatch("x", "x:y");
1:         assertMatch("x", "x:y:z");
1: 
1:         assertMatch("foo?armat*", "foobarmatches");
1:         assertMatch("f*", "f");
1:         assertNoMatch("foo", "f");
1:         assertMatch("fo*b", "foob");
1:         assertNoMatch("fo*b*r", "fooba");
1:         assertNoMatch("foo*", "f");
1: 
1:         assertMatch("t*k?ou", "thankyou");
1:         assertMatch("he*l*world", "helloworld");
1:         assertNoMatch("foo", "foob");
1: 
1:         assertMatch("*:ActiveMQ.Advisory", "foo:ActiveMQ.Advisory");
1:         assertNoMatch("*:ActiveMQ.Advisory", "foo:ActiveMQ.Advisory.");
1:         assertMatch("*:ActiveMQ.Advisory*", "foo:ActiveMQ.Advisory");
1:         assertMatch("*:ActiveMQ.Advisory*", "foo:ActiveMQ.Advisory.");
1:         assertMatch("*:ActiveMQ.Advisory.*", "foo:ActiveMQ.Advisory.Connection");
1:         assertMatch("*:ActiveMQ.Advisory*:read", "foo:ActiveMQ.Advisory.Connection:read");
1:         assertNoMatch("*:ActiveMQ.Advisory*:read", "foo:ActiveMQ.Advisory.Connection:write");
1:         assertMatch("*:ActiveMQ.Advisory*:*", "foo:ActiveMQ.Advisory.Connection:read");
1:         assertMatch("*:ActiveMQ.Advisory*:*", "foo:ActiveMQ.Advisory.");
1:         assertMatch("topic", "topic:TEST:*");
1:         assertNoMatch("*:ActiveMQ*", "topic:TEST:*");
1:         assertMatch("topic:ActiveMQ.Advisory*", "topic:ActiveMQ.Advisory.Connection:create");
1:         assertMatch("foo?ar", "foobar");
1:     }
1: 
1:     protected static void assertMatch(String pattern, String value) {
1:         assertTrue(matches(pattern, value));
1:     }
1: 
1:     protected static void assertNoMatch(String pattern, String value) {
1:         assertFalse(matches(pattern, value));
1:     }
1: 
1:     protected static boolean matches(String pattern, String value) {
1:         ActiveMQWildcardPermission patternPerm = new ActiveMQWildcardPermission(pattern);
1:         WildcardPermission valuePerm = new WildcardPermission(value, true);
1:         return patternPerm.implies(valuePerm);
1:     }
1: 
1:     @Test(expected=IllegalStateException.class)
1:     public void testGetPartsByReflectionThrowingException() {
1: 
1:         ActiveMQWildcardPermission perm = new ActiveMQWildcardPermission("foo:bar") {
1:             @Override
1:             protected List<Set<String>> doGetPartsByReflection(WildcardPermission wp) throws Exception {
1:                 throw new RuntimeException("Testing failure");
1:             }
1:         };
1: 
1:         WildcardPermission otherPerm = new WildcardPermission("foo:bar:baz");
1: 
1:         perm.implies(otherPerm);
1:     }
1: 
1:     @Test
1:     public void testImpliesWithExtraParts() {
1:         ActiveMQWildcardPermission perm1 = new ActiveMQWildcardPermission("foo:bar:baz");
1:         ActiveMQWildcardPermission perm2 = new ActiveMQWildcardPermission("foo:bar");
1:         assertFalse(perm1.implies(perm2));
1:     }
1: 
1: }
============================================================================