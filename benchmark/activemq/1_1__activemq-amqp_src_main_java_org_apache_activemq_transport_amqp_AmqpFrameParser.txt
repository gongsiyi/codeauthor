1:61a3eab: /**
1:61a3eab:  * Licensed to the Apache Software Foundation (ASF) under one or more
1:61a3eab:  * contributor license agreements.  See the NOTICE file distributed with
1:61a3eab:  * this work for additional information regarding copyright ownership.
1:61a3eab:  * The ASF licenses this file to You under the Apache License, Version 2.0
1:61a3eab:  * (the "License"); you may not use this file except in compliance with
1:61a3eab:  * the License.  You may obtain a copy of the License at
1:61a3eab:  *
1:61a3eab:  *      http://www.apache.org/licenses/LICENSE-2.0
1:61a3eab:  *
1:61a3eab:  * Unless required by applicable law or agreed to in writing, software
1:61a3eab:  * distributed under the License is distributed on an "AS IS" BASIS,
1:61a3eab:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:61a3eab:  * See the License for the specific language governing permissions and
1:61a3eab:  * limitations under the License.
1:61a3eab:  */
1:61a3eab: package org.apache.activemq.transport.amqp;
1:61a3eab: 
1:61a3eab: import java.io.IOException;
1:61a3eab: import java.nio.ByteBuffer;
1:61a3eab: 
1:61a3eab: import org.apache.activemq.transport.amqp.AmqpWireFormat.ResetListener;
1:61a3eab: import org.apache.activemq.transport.tcp.TcpTransport;
1:98165c4: import org.apache.activemq.util.IOExceptionSupport;
1:61a3eab: import org.fusesource.hawtbuf.Buffer;
1:61a3eab: import org.slf4j.Logger;
1:61a3eab: import org.slf4j.LoggerFactory;
1:61a3eab: 
1:61a3eab: /**
1:61a3eab:  * State based Frame reader that is used in the NIO based transports where
1:61a3eab:  * AMQP frames can come in in partial or overlapping forms.
1:61a3eab:  */
1:61a3eab: public class AmqpFrameParser {
1:61a3eab: 
1:61a3eab:     private static final Logger LOG = LoggerFactory.getLogger(AmqpFrameParser.class);
1:61a3eab: 
1:61a3eab:     public interface AMQPFrameSink {
1:61a3eab:         void onFrame(Object frame);
1:61a3eab:     }
1:61a3eab: 
1:61a3eab:     private static final byte AMQP_FRAME_SIZE_BYTES = 4;
1:61a3eab:     private static final byte AMQP_HEADER_BYTES = 8;
1:61a3eab: 
1:61a3eab:     private final AMQPFrameSink frameSink;
1:61a3eab: 
1:61a3eab:     private FrameParser currentParser;
1:61a3eab:     private AmqpWireFormat wireFormat;
1:61a3eab: 
1:61a3eab:     public AmqpFrameParser(AMQPFrameSink sink) {
1:61a3eab:         this.frameSink = sink;
1:61a3eab:     }
1:61a3eab: 
1:61a3eab:     public AmqpFrameParser(final TcpTransport transport) {
1:61a3eab:         this.frameSink = new AMQPFrameSink() {
1:61a3eab: 
1:61a3eab:             @Override
1:61a3eab:             public void onFrame(Object frame) {
1:61a3eab:                 transport.doConsume(frame);
1:61a3eab:             }
1:61a3eab:         };
1:61a3eab:     }
1:61a3eab: 
1:61a3eab:     public void parse(ByteBuffer incoming) throws Exception {
1:61a3eab: 
1:61a3eab:         if (incoming == null || !incoming.hasRemaining()) {
1:61a3eab:             return;
1:61a3eab:         }
1:61a3eab: 
1:61a3eab:         if (currentParser == null) {
1:61a3eab:             currentParser = initializeHeaderParser();
1:61a3eab:         }
1:61a3eab: 
1:61a3eab:         // Parser stack will run until current incoming data has all been consumed.
1:61a3eab:         currentParser.parse(incoming);
1:61a3eab:     }
1:61a3eab: 
1:61a3eab:     public void reset() {
1:61a3eab:         currentParser = initializeHeaderParser();
1:61a3eab:     }
1:61a3eab: 
1:61a3eab:     private void validateFrameSize(int frameSize) throws IOException {
1:61a3eab:         long maxFrameSize = AmqpWireFormat.DEFAULT_MAX_FRAME_SIZE;
1:61a3eab:         if (wireFormat != null) {
1:61a3eab:             maxFrameSize = wireFormat.getMaxFrameSize();
1:61a3eab:         }
1:61a3eab: 
1:61a3eab:         if (frameSize > maxFrameSize) {
1:98165c4:             throw IOExceptionSupport.createFrameSizeException(frameSize, maxFrameSize);
1:61a3eab:         }
1:61a3eab:     }
1:61a3eab: 
1:61a3eab:     public void setWireFormat(AmqpWireFormat wireFormat) {
1:61a3eab:         this.wireFormat = wireFormat;
1:61a3eab:         if (wireFormat != null) {
1:61a3eab:             wireFormat.setProtocolResetListener(new ResetListener() {
1:61a3eab: 
1:61a3eab:                 @Override
1:61a3eab:                 public void onProtocolReset() {
1:61a3eab:                     reset();
1:61a3eab:                 }
1:61a3eab:             });
1:61a3eab:         }
1:61a3eab:     }
1:61a3eab: 
1:61a3eab:     public AmqpWireFormat getWireFormat() {
1:61a3eab:         return this.wireFormat;
1:61a3eab:     }
1:61a3eab: 
1:61a3eab:     //----- Prepare the current frame parser for use -------------------------//
1:61a3eab: 
1:61a3eab:     private FrameParser initializeHeaderParser() {
1:61a3eab:         headerReader.reset(AMQP_HEADER_BYTES);
1:61a3eab:         return headerReader;
1:61a3eab:     }
1:61a3eab: 
1:61a3eab:     private FrameParser initializeFrameLengthParser() {
1:61a3eab:         frameSizeReader.reset(AMQP_FRAME_SIZE_BYTES);
1:61a3eab:         return frameSizeReader;
1:61a3eab:     }
1:61a3eab: 
1:61a3eab:     private FrameParser initializeContentReader(int contentLength) {
1:61a3eab:         contentReader.reset(contentLength);
1:61a3eab:         return contentReader;
1:61a3eab:     }
1:61a3eab: 
1:61a3eab:     //----- Frame parser implementations -------------------------------------//
1:61a3eab: 
1:61a3eab:     private interface FrameParser {
1:61a3eab: 
1:61a3eab:         void parse(ByteBuffer incoming) throws IOException;
1:61a3eab: 
1:61a3eab:         void reset(int nextExpectedReadSize);
1:61a3eab:     }
1:61a3eab: 
1:61a3eab:     private final FrameParser headerReader = new FrameParser() {
1:61a3eab: 
1:61a3eab:         private final Buffer header = new Buffer(AMQP_HEADER_BYTES);
1:61a3eab: 
1:61a3eab:         @Override
1:61a3eab:         public void parse(ByteBuffer incoming) throws IOException {
1:61a3eab:             int length = Math.min(incoming.remaining(), header.length - header.offset);
1:61a3eab: 
1:61a3eab:             incoming.get(header.data, header.offset, length);
1:61a3eab:             header.offset += length;
1:61a3eab: 
1:61a3eab:             if (header.offset == AMQP_HEADER_BYTES) {
1:61a3eab:                 header.reset();
1:61a3eab:                 AmqpHeader amqpHeader = new AmqpHeader(header.deepCopy(), false);
1:61a3eab:                 currentParser = initializeFrameLengthParser();
1:61a3eab:                 frameSink.onFrame(amqpHeader);
1:61a3eab:                 if (incoming.hasRemaining()) {
1:61a3eab:                     currentParser.parse(incoming);
1:61a3eab:                 }
1:61a3eab:             }
1:61a3eab:         }
1:61a3eab: 
1:61a3eab:         @Override
1:61a3eab:         public void reset(int nextExpectedReadSize) {
1:61a3eab:             header.reset();
1:61a3eab:         }
1:61a3eab:     };
1:61a3eab: 
1:61a3eab:     private final FrameParser frameSizeReader = new FrameParser() {
1:61a3eab: 
1:61a3eab:         private int frameSize;
1:61a3eab:         private int multiplier;
1:61a3eab: 
1:61a3eab:         @Override
1:61a3eab:         public void parse(ByteBuffer incoming) throws IOException {
1:61a3eab: 
1:61a3eab:             while (incoming.hasRemaining()) {
1:61a3eab:                 frameSize += ((incoming.get() & 0xFF) << --multiplier * Byte.SIZE);
1:61a3eab: 
1:61a3eab:                 if (multiplier == 0) {
1:61a3eab:                     LOG.trace("Next incoming frame length: {}", frameSize);
1:61a3eab:                     validateFrameSize(frameSize);
1:61a3eab:                     currentParser = initializeContentReader(frameSize);
1:61a3eab:                     if (incoming.hasRemaining()) {
1:61a3eab:                         currentParser.parse(incoming);
1:61a3eab:                         return;
1:61a3eab:                     }
1:61a3eab:                 }
1:61a3eab:             }
1:61a3eab:         }
1:61a3eab: 
1:61a3eab:         @Override
1:61a3eab:         public void reset(int nextExpectedReadSize) {
1:61a3eab:             multiplier = AMQP_FRAME_SIZE_BYTES;
1:61a3eab:             frameSize = 0;
1:61a3eab:         }
1:61a3eab:     };
1:61a3eab: 
1:61a3eab:     private final FrameParser contentReader = new FrameParser() {
1:61a3eab: 
1:61a3eab:         private Buffer frame;
1:61a3eab: 
1:61a3eab:         @Override
1:61a3eab:         public void parse(ByteBuffer incoming) throws IOException {
1:61a3eab:             int length = Math.min(incoming.remaining(), frame.getLength() - frame.offset);
1:61a3eab:             incoming.get(frame.data, frame.offset, length);
1:61a3eab:             frame.offset += length;
1:61a3eab: 
1:61a3eab:             if (frame.offset == frame.length) {
1:61a3eab:                 LOG.trace("Contents of size {} have been read", frame.length);
1:61a3eab:                 frame.reset();
1:61a3eab:                 frameSink.onFrame(frame);
1:61a3eab:                 if (currentParser == this) {
1:61a3eab:                     currentParser = initializeFrameLengthParser();
1:61a3eab:                 }
1:61a3eab:                 if (incoming.hasRemaining()) {
1:61a3eab:                     currentParser.parse(incoming);
1:61a3eab:                 }
1:61a3eab:             }
1:61a3eab:         }
1:61a3eab: 
1:61a3eab:         @Override
1:61a3eab:         public void reset(int nextExpectedReadSize) {
1:61a3eab:             // Allocate a new Buffer to hold the incoming frame.  We must write
1:61a3eab:             // back the frame size value before continue on to read the indicated
1:61a3eab:             // frame size minus the size of the AMQP frame size header value.
1:61a3eab:             frame = new Buffer(nextExpectedReadSize);
1:61a3eab:             frame.bigEndianEditor().writeInt(nextExpectedReadSize);
1:61a3eab: 
1:61a3eab:             // Reset the length to total length as we do direct write after this.
1:61a3eab:             frame.length = frame.data.length;
1:61a3eab:         }
1:61a3eab:     };
1:61a3eab: }
============================================================================
author:Timothy Bish
-------------------------------------------------------------------------------
commit:98165c4
/////////////////////////////////////////////////////////////////////////
1: import org.apache.activemq.util.IOExceptionSupport;
/////////////////////////////////////////////////////////////////////////
1:             throw IOExceptionSupport.createFrameSizeException(frameSize, maxFrameSize);
commit:61a3eab
/////////////////////////////////////////////////////////////////////////
1: /**
1:  * Licensed to the Apache Software Foundation (ASF) under one or more
1:  * contributor license agreements.  See the NOTICE file distributed with
1:  * this work for additional information regarding copyright ownership.
1:  * The ASF licenses this file to You under the Apache License, Version 2.0
1:  * (the "License"); you may not use this file except in compliance with
1:  * the License.  You may obtain a copy of the License at
1:  *
1:  *      http://www.apache.org/licenses/LICENSE-2.0
1:  *
1:  * Unless required by applicable law or agreed to in writing, software
1:  * distributed under the License is distributed on an "AS IS" BASIS,
1:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:  * See the License for the specific language governing permissions and
1:  * limitations under the License.
1:  */
1: package org.apache.activemq.transport.amqp;
1: 
1: import java.io.IOException;
1: import java.nio.ByteBuffer;
1: 
1: import org.apache.activemq.transport.amqp.AmqpWireFormat.ResetListener;
1: import org.apache.activemq.transport.tcp.TcpTransport;
1: import org.fusesource.hawtbuf.Buffer;
1: import org.slf4j.Logger;
1: import org.slf4j.LoggerFactory;
1: 
1: /**
1:  * State based Frame reader that is used in the NIO based transports where
1:  * AMQP frames can come in in partial or overlapping forms.
1:  */
1: public class AmqpFrameParser {
1: 
1:     private static final Logger LOG = LoggerFactory.getLogger(AmqpFrameParser.class);
1: 
1:     public interface AMQPFrameSink {
1:         void onFrame(Object frame);
1:     }
1: 
1:     private static final byte AMQP_FRAME_SIZE_BYTES = 4;
1:     private static final byte AMQP_HEADER_BYTES = 8;
1: 
1:     private final AMQPFrameSink frameSink;
1: 
1:     private FrameParser currentParser;
1:     private AmqpWireFormat wireFormat;
1: 
1:     public AmqpFrameParser(AMQPFrameSink sink) {
1:         this.frameSink = sink;
1:     }
1: 
1:     public AmqpFrameParser(final TcpTransport transport) {
1:         this.frameSink = new AMQPFrameSink() {
1: 
1:             @Override
1:             public void onFrame(Object frame) {
1:                 transport.doConsume(frame);
1:             }
1:         };
1:     }
1: 
1:     public void parse(ByteBuffer incoming) throws Exception {
1: 
1:         if (incoming == null || !incoming.hasRemaining()) {
1:             return;
1:         }
1: 
1:         if (currentParser == null) {
1:             currentParser = initializeHeaderParser();
1:         }
1: 
1:         // Parser stack will run until current incoming data has all been consumed.
1:         currentParser.parse(incoming);
1:     }
1: 
1:     public void reset() {
1:         currentParser = initializeHeaderParser();
1:     }
1: 
1:     private void validateFrameSize(int frameSize) throws IOException {
1:         long maxFrameSize = AmqpWireFormat.DEFAULT_MAX_FRAME_SIZE;
1:         if (wireFormat != null) {
1:             maxFrameSize = wireFormat.getMaxFrameSize();
1:         }
1: 
1:         if (frameSize > maxFrameSize) {
0:             throw new IOException("Frame size of " + frameSize + " larger than max allowed " + maxFrameSize);
1:         }
1:     }
1: 
1:     public void setWireFormat(AmqpWireFormat wireFormat) {
1:         this.wireFormat = wireFormat;
1:         if (wireFormat != null) {
1:             wireFormat.setProtocolResetListener(new ResetListener() {
1: 
1:                 @Override
1:                 public void onProtocolReset() {
1:                     reset();
1:                 }
1:             });
1:         }
1:     }
1: 
1:     public AmqpWireFormat getWireFormat() {
1:         return this.wireFormat;
1:     }
1: 
1:     //----- Prepare the current frame parser for use -------------------------//
1: 
1:     private FrameParser initializeHeaderParser() {
1:         headerReader.reset(AMQP_HEADER_BYTES);
1:         return headerReader;
1:     }
1: 
1:     private FrameParser initializeFrameLengthParser() {
1:         frameSizeReader.reset(AMQP_FRAME_SIZE_BYTES);
1:         return frameSizeReader;
1:     }
1: 
1:     private FrameParser initializeContentReader(int contentLength) {
1:         contentReader.reset(contentLength);
1:         return contentReader;
1:     }
1: 
1:     //----- Frame parser implementations -------------------------------------//
1: 
1:     private interface FrameParser {
1: 
1:         void parse(ByteBuffer incoming) throws IOException;
1: 
1:         void reset(int nextExpectedReadSize);
1:     }
1: 
1:     private final FrameParser headerReader = new FrameParser() {
1: 
1:         private final Buffer header = new Buffer(AMQP_HEADER_BYTES);
1: 
1:         @Override
1:         public void parse(ByteBuffer incoming) throws IOException {
1:             int length = Math.min(incoming.remaining(), header.length - header.offset);
1: 
1:             incoming.get(header.data, header.offset, length);
1:             header.offset += length;
1: 
1:             if (header.offset == AMQP_HEADER_BYTES) {
1:                 header.reset();
1:                 AmqpHeader amqpHeader = new AmqpHeader(header.deepCopy(), false);
1:                 currentParser = initializeFrameLengthParser();
1:                 frameSink.onFrame(amqpHeader);
1:                 if (incoming.hasRemaining()) {
1:                     currentParser.parse(incoming);
1:                 }
1:             }
1:         }
1: 
1:         @Override
1:         public void reset(int nextExpectedReadSize) {
1:             header.reset();
1:         }
1:     };
1: 
1:     private final FrameParser frameSizeReader = new FrameParser() {
1: 
1:         private int frameSize;
1:         private int multiplier;
1: 
1:         @Override
1:         public void parse(ByteBuffer incoming) throws IOException {
1: 
1:             while (incoming.hasRemaining()) {
1:                 frameSize += ((incoming.get() & 0xFF) << --multiplier * Byte.SIZE);
1: 
1:                 if (multiplier == 0) {
1:                     LOG.trace("Next incoming frame length: {}", frameSize);
1:                     validateFrameSize(frameSize);
1:                     currentParser = initializeContentReader(frameSize);
1:                     if (incoming.hasRemaining()) {
1:                         currentParser.parse(incoming);
1:                         return;
1:                     }
1:                 }
1:             }
1:         }
1: 
1:         @Override
1:         public void reset(int nextExpectedReadSize) {
1:             multiplier = AMQP_FRAME_SIZE_BYTES;
1:             frameSize = 0;
1:         }
1:     };
1: 
1:     private final FrameParser contentReader = new FrameParser() {
1: 
1:         private Buffer frame;
1: 
1:         @Override
1:         public void parse(ByteBuffer incoming) throws IOException {
1:             int length = Math.min(incoming.remaining(), frame.getLength() - frame.offset);
1:             incoming.get(frame.data, frame.offset, length);
1:             frame.offset += length;
1: 
1:             if (frame.offset == frame.length) {
1:                 LOG.trace("Contents of size {} have been read", frame.length);
1:                 frame.reset();
1:                 frameSink.onFrame(frame);
1:                 if (currentParser == this) {
1:                     currentParser = initializeFrameLengthParser();
1:                 }
1:                 if (incoming.hasRemaining()) {
1:                     currentParser.parse(incoming);
1:                 }
1:             }
1:         }
1: 
1:         @Override
1:         public void reset(int nextExpectedReadSize) {
1:             // Allocate a new Buffer to hold the incoming frame.  We must write
1:             // back the frame size value before continue on to read the indicated
1:             // frame size minus the size of the AMQP frame size header value.
1:             frame = new Buffer(nextExpectedReadSize);
1:             frame.bigEndianEditor().writeInt(nextExpectedReadSize);
1: 
1:             // Reset the length to total length as we do direct write after this.
1:             frame.length = frame.data.length;
1:         }
1:     };
1: }
============================================================================