1:456a2ba: /**
1:456a2ba:  * Licensed to the Apache Software Foundation (ASF) under one or more
1:456a2ba:  * contributor license agreements.  See the NOTICE file distributed with
1:456a2ba:  * this work for additional information regarding copyright ownership.
1:456a2ba:  * The ASF licenses this file to You under the Apache License, Version 2.0
1:456a2ba:  * (the "License"); you may not use this file except in compliance with
1:456a2ba:  * the License.  You may obtain a copy of the License at
1:456a2ba:  *
1:456a2ba:  *      http://www.apache.org/licenses/LICENSE-2.0
1:456a2ba:  *
1:456a2ba:  * Unless required by applicable law or agreed to in writing, software
1:456a2ba:  * distributed under the License is distributed on an "AS IS" BASIS,
1:456a2ba:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:456a2ba:  * See the License for the specific language governing permissions and
1:456a2ba:  * limitations under the License.
1:456a2ba:  */
1:1aab71b: package org.apache.activemq.store.kahadb.disk.index;
6:456a2ba: 
1:456a2ba: import java.io.File;
1:456a2ba: import java.io.IOException;
1:456a2ba: import java.util.HashMap;
1:456a2ba: import java.util.concurrent.CountDownLatch;
1:456a2ba: import java.util.concurrent.atomic.AtomicBoolean;
1:456a2ba: import java.util.concurrent.atomic.AtomicLong;
1:456a2ba: 
1:456a2ba: import junit.framework.TestCase;
1:1aab71b: import org.apache.activemq.store.kahadb.disk.page.PageFile;
1:1aab71b: import org.apache.activemq.store.kahadb.disk.page.Transaction;
1:1aab71b: import org.apache.activemq.util.IOHelper;
1:456a2ba: 
1:456a2ba: /**
1:456a2ba:  * @author chirino
1:456a2ba:  */
1:456a2ba: public abstract class IndexBenchmark extends TestCase {
1:456a2ba: 
1:456a2ba:     // Slower machines might need to make this bigger.
1:456a2ba:     private static final long SAMPLE_DURATION = Integer.parseInt(System.getProperty("SAMPLES_DURATION", "" + 1000 * 5));
1:456a2ba:     // How many times do we sample?
1:456a2ba:     private static final long SAMPLES = Integer.parseInt(System.getProperty("SAMPLES", "" + 60 * 1000 / SAMPLE_DURATION));
1:456a2ba:     // How many indexes will we be benchmarking concurrently?
1:456a2ba:     private static final int INDEX_COUNT = Integer.parseInt(System.getProperty("INDEX_COUNT", "" + 1));
1:456a2ba:     // Indexes tend to perform worse when they get big.. so how many items
1:456a2ba:     // should we put into the index before we start sampling.
1:456a2ba:     private static final int INDEX_PRE_LOAD_COUNT = Integer.parseInt(System.getProperty("INDEX_PRE_LOAD_COUNT", "" + 10000 / INDEX_COUNT));
1:456a2ba: 
1:456a2ba:     protected File ROOT_DIR;
1:456a2ba:     protected final HashMap<String, Index<String, Long>> indexes = new HashMap<String, Index<String, Long>>();
1:456a2ba:     protected PageFile pf;
1:456a2ba: 
1:456a2ba:     public void setUp() throws Exception {
1:456a2ba:         ROOT_DIR = new File(IOHelper.getDefaultDataDirectory());
1:cdba931:         IOHelper.delete(ROOT_DIR);
1:cdba931: 
1:456a2ba:         pf = new PageFile(ROOT_DIR, getClass().getName());
1:456a2ba:         pf.load();
1:456a2ba:     }
1:456a2ba: 
1:456a2ba:     protected void tearDown() throws Exception {
1:456a2ba:         Transaction tx = pf.tx();
1:cdba931:         for (Index<?, ?> i : indexes.values()) {
1:456a2ba:             try {
1:456a2ba:                 i.unload(tx);
1:456a2ba:             } catch (Throwable ignore) {
1:456a2ba:             }
1:456a2ba:         }
1:456a2ba:         tx.commit();
1:456a2ba:     }
1:cdba931: 
1:456a2ba:     abstract protected Index<String, Long> createIndex() throws Exception;
1:456a2ba: 
1:456a2ba:     synchronized private Index<String, Long> openIndex(String name) throws Exception {
1:456a2ba:         Transaction tx = pf.tx();
1:456a2ba:         Index<String, Long> index = indexes.get(name);
1:456a2ba:         if (index == null) {
1:456a2ba:             index = createIndex();
1:456a2ba:             index.load(tx);
1:456a2ba:             indexes.put(name, index);
1:456a2ba:         }
1:456a2ba:         tx.commit();
1:456a2ba:         return index;
1:456a2ba:     }
1:456a2ba: 
1:456a2ba:     class Producer extends Thread {
1:456a2ba:         private final String name;
1:456a2ba:         AtomicBoolean shutdown = new AtomicBoolean();
1:456a2ba: 
1:456a2ba:         public Producer(String name) {
1:456a2ba:             super("Producer: " + name);
1:456a2ba:             this.name = name;
1:456a2ba:         }
1:456a2ba: 
1:456a2ba:         public void shutdown() {
1:456a2ba:             shutdown.set(true);
1:456a2ba:         }
1:456a2ba: 
1:456a2ba:         @Override
1:456a2ba:         public void run() {
1:456a2ba:             try {
1:456a2ba: 
1:456a2ba:                 Transaction tx = pf.tx();
1:456a2ba: 
1:456a2ba:                 Index<String,Long> index = openIndex(name);
1:456a2ba:                 long counter = 0;
1:456a2ba:                 while (!shutdown.get()) {
1:456a2ba:                     long c = counter;
1:456a2ba: 
1:456a2ba:                     String key = key(c);
1:456a2ba:                     index.put(tx, key, c);
1:456a2ba:                     tx.commit();
1:456a2ba:                     Thread.yield(); // This avoids consumer starvation..
1:cdba931: 
1:456a2ba:                     onProduced(counter++);
1:456a2ba:                 }
1:cdba931: 
1:456a2ba:             } catch (Throwable e) {
1:456a2ba:                 e.printStackTrace();
1:456a2ba:             }
1:456a2ba:         }
1:456a2ba: 
1:456a2ba:         public void onProduced(long counter) {
1:456a2ba:         }
1:456a2ba:     }
1:cdba931: 
1:456a2ba:     protected String key(long c) {
1:456a2ba:         return "a-long-message-id-like-key-" + c;
1:456a2ba:     }
1:456a2ba: 
1:456a2ba: 
1:456a2ba:     class Consumer extends Thread {
1:456a2ba:         private final String name;
1:456a2ba:         AtomicBoolean shutdown = new AtomicBoolean();
1:456a2ba: 
1:456a2ba:         public Consumer(String name) {
1:456a2ba:             super("Consumer: " + name);
1:456a2ba:             this.name = name;
1:456a2ba:         }
1:456a2ba: 
1:456a2ba:         public void shutdown() {
1:456a2ba:             shutdown.set(true);
1:456a2ba:         }
1:456a2ba: 
1:456a2ba:         @Override
1:456a2ba:         public void run() {
1:456a2ba:             try {
1:456a2ba:                 Transaction tx = pf.tx();
1:456a2ba: 
1:456a2ba:                 Index<String,Long> index = openIndex(name);
1:456a2ba:                 long counter = 0;
1:456a2ba:                 while (!shutdown.get()) {
1:456a2ba:                     long c = counter;
1:456a2ba:                     String key = key(c);
1:456a2ba: 
1:456a2ba:                     Long record = index.get(tx, key);
1:456a2ba:                     if (record != null) {
1:456a2ba:                         if( index.remove(tx, key) == null ) {
1:456a2ba:                             System.out.print("Remove failed...");
1:456a2ba:                         }
1:456a2ba:                         tx.commit();
1:456a2ba:                         onConsumed(counter++);
1:456a2ba:                     }
1:456a2ba:                 }
1:456a2ba:             } catch (Throwable e) {
1:456a2ba:                 e.printStackTrace();
1:456a2ba:             }
1:456a2ba:         }
1:456a2ba: 
1:456a2ba:         public void onConsumed(long counter) {
1:456a2ba:         }
1:456a2ba:     }
1:456a2ba: 
1:456a2ba:     protected void dumpIndex(Index<String, Long> index) throws IOException {
1:456a2ba:     }
1:456a2ba: 
1:456a2ba:     public void testLoad() throws Exception {
1:456a2ba: 
1:456a2ba:         final Producer producers[] = new Producer[INDEX_COUNT];
1:456a2ba:         final Consumer consumers[] = new Consumer[INDEX_COUNT];
1:456a2ba:         final CountDownLatch preloadCountDown = new CountDownLatch(INDEX_COUNT);
1:456a2ba:         final AtomicLong producedRecords = new AtomicLong();
1:456a2ba:         final AtomicLong consumedRecords = new AtomicLong();
1:456a2ba: 
1:456a2ba:         System.out.println("Starting: " + INDEX_COUNT + " producers");
1:456a2ba:         for (int i = 0; i < INDEX_COUNT; i++) {
1:456a2ba:             producers[i] = new Producer("test-" + i) {
1:456a2ba:                 private boolean prelaodDone;
1:456a2ba: 
1:456a2ba:                 public void onProduced(long counter) {
1:456a2ba:                     if (!prelaodDone && counter >= INDEX_PRE_LOAD_COUNT) {
1:456a2ba:                         prelaodDone = true;
1:456a2ba:                         preloadCountDown.countDown();
1:456a2ba:                     }
1:456a2ba:                     producedRecords.incrementAndGet();
1:456a2ba:                 }
1:456a2ba:             };
1:456a2ba:             producers[i].start();
1:456a2ba:         }
1:456a2ba: 
1:456a2ba:         long start = System.currentTimeMillis();
1:456a2ba:         System.out.println("Waiting for each producer create " + INDEX_PRE_LOAD_COUNT + " records before starting the consumers.");
1:456a2ba:         preloadCountDown.await();
1:456a2ba:         long end = System.currentTimeMillis();
1:456a2ba:         System.out.println("Preloaded " + INDEX_PRE_LOAD_COUNT * INDEX_COUNT + " records at " + (INDEX_PRE_LOAD_COUNT * INDEX_COUNT * 1000f / (end - start)) + " records/sec");
1:456a2ba: 
1:456a2ba:         System.out.println("Starting: " + INDEX_COUNT + " consumers");
1:456a2ba:         for (int i = 0; i < INDEX_COUNT; i++) {
1:456a2ba:             consumers[i] = new Consumer("test-" + i) {
1:456a2ba:                 public void onConsumed(long counter) {
1:456a2ba:                     consumedRecords.incrementAndGet();
1:456a2ba:                 }
1:456a2ba:             };
1:456a2ba:             consumers[i].start();
1:456a2ba:         }
1:456a2ba: 
1:456a2ba:         long sample_start = System.currentTimeMillis();
1:456a2ba:         System.out.println("Taking " + SAMPLES + " performance samples every " + SAMPLE_DURATION + " ms");
1:456a2ba:         System.out.println("time (s), produced, produce rate (r/s), consumed, consume rate (r/s), used memory (k)");
1:456a2ba:         producedRecords.set(0);
1:456a2ba:         consumedRecords.set(0);
1:456a2ba:         for (int i = 0; i < SAMPLES; i++) {
1:456a2ba:             start = System.currentTimeMillis();
1:456a2ba:             Thread.sleep(SAMPLE_DURATION);
1:456a2ba:             end = System.currentTimeMillis();
1:456a2ba:             long p = producedRecords.getAndSet(0);
1:456a2ba:             long c = consumedRecords.getAndSet(0);
1:456a2ba: 
1:456a2ba:             long usedMemory = Runtime.getRuntime().totalMemory() - Runtime.getRuntime().freeMemory();
1:456a2ba: 
1:456a2ba:             System.out.println(((end-sample_start)/1000f)+", "+p+", "+(p * 1000f / (end - start)) + ", "+ c+", " + (c * 1000f / (end - start))+", "+(usedMemory/(1024)) );
1:456a2ba:         }
1:456a2ba:         System.out.println("Samples done... Shutting down the producers and consumers...");
1:456a2ba:         for (int i = 0; i < INDEX_COUNT; i++) {
1:456a2ba:             producers[i].shutdown();
1:456a2ba:             consumers[i].shutdown();
1:456a2ba:         }
1:456a2ba:         for (int i = 0; i < INDEX_COUNT; i++) {
1:456a2ba:             producers[i].join(1000 * 5);
1:456a2ba:             consumers[i].join(1000 * 5);
1:456a2ba:         }
1:456a2ba:         System.out.println("Shutdown.");
1:456a2ba:     }
1:456a2ba: 
1:456a2ba: }
============================================================================
author:Hadrian Zbarcea
-------------------------------------------------------------------------------
commit:d54d046
author:Timothy A. Bish
-------------------------------------------------------------------------------
commit:6010bd3
commit:cdba931
/////////////////////////////////////////////////////////////////////////
1:         IOHelper.delete(ROOT_DIR);
1: 
1:         for (Index<?, ?> i : indexes.values()) {
/////////////////////////////////////////////////////////////////////////
1: 
/////////////////////////////////////////////////////////////////////////
1: 
/////////////////////////////////////////////////////////////////////////
1: 
/////////////////////////////////////////////////////////////////////////
1: 
author:Hiram R. Chirino
-------------------------------------------------------------------------------
commit:1aab71b
/////////////////////////////////////////////////////////////////////////
1: package org.apache.activemq.store.kahadb.disk.index;
/////////////////////////////////////////////////////////////////////////
1: import org.apache.activemq.store.kahadb.disk.page.PageFile;
1: import org.apache.activemq.store.kahadb.disk.page.Transaction;
1: import org.apache.activemq.util.IOHelper;
commit:715010a
commit:456a2ba
/////////////////////////////////////////////////////////////////////////
1: /**
1:  * Licensed to the Apache Software Foundation (ASF) under one or more
1:  * contributor license agreements.  See the NOTICE file distributed with
1:  * this work for additional information regarding copyright ownership.
1:  * The ASF licenses this file to You under the Apache License, Version 2.0
1:  * (the "License"); you may not use this file except in compliance with
1:  * the License.  You may obtain a copy of the License at
1:  *
1:  *      http://www.apache.org/licenses/LICENSE-2.0
1:  *
1:  * Unless required by applicable law or agreed to in writing, software
1:  * distributed under the License is distributed on an "AS IS" BASIS,
1:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:  * See the License for the specific language governing permissions and
1:  * limitations under the License.
1:  */
0: package org.apache.kahadb.index;
1: 
1: import java.io.File;
1: import java.io.IOException;
1: import java.util.HashMap;
1: import java.util.concurrent.CountDownLatch;
1: import java.util.concurrent.atomic.AtomicBoolean;
1: import java.util.concurrent.atomic.AtomicLong;
1: 
1: import junit.framework.TestCase;
0: import org.apache.kahadb.page.PageFile;
0: import org.apache.kahadb.page.Transaction;
0: import org.apache.kahadb.util.IOHelper;
1: 
1: /**
1:  * @author chirino
1:  */
1: public abstract class IndexBenchmark extends TestCase {
1: 
1:     // Slower machines might need to make this bigger.
1:     private static final long SAMPLE_DURATION = Integer.parseInt(System.getProperty("SAMPLES_DURATION", "" + 1000 * 5));
1:     // How many times do we sample?
1:     private static final long SAMPLES = Integer.parseInt(System.getProperty("SAMPLES", "" + 60 * 1000 / SAMPLE_DURATION));
1:     // How many indexes will we be benchmarking concurrently?
1:     private static final int INDEX_COUNT = Integer.parseInt(System.getProperty("INDEX_COUNT", "" + 1));
1:     // Indexes tend to perform worse when they get big.. so how many items
1:     // should we put into the index before we start sampling.
1:     private static final int INDEX_PRE_LOAD_COUNT = Integer.parseInt(System.getProperty("INDEX_PRE_LOAD_COUNT", "" + 10000 / INDEX_COUNT));
1: 
1:     protected File ROOT_DIR;
1:     protected final HashMap<String, Index<String, Long>> indexes = new HashMap<String, Index<String, Long>>();
1:     protected PageFile pf;
1: 
1:     public void setUp() throws Exception {
1:         ROOT_DIR = new File(IOHelper.getDefaultDataDirectory());
0:         IOHelper.mkdirs(ROOT_DIR);
0:         IOHelper.deleteChildren(ROOT_DIR);
1:         
1:         pf = new PageFile(ROOT_DIR, getClass().getName());
1:         pf.load();
1:     }
1: 
1:     protected void tearDown() throws Exception {
1:         Transaction tx = pf.tx();
0:         for (Index i : indexes.values()) {
1:             try {
1:                 i.unload(tx);
1:             } catch (Throwable ignore) {
1:             }
1:         }
1:         tx.commit();
1:     }
1: 
1:     abstract protected Index<String, Long> createIndex() throws Exception;
1: 
1:     synchronized private Index<String, Long> openIndex(String name) throws Exception {
1:         Transaction tx = pf.tx();
1:         Index<String, Long> index = indexes.get(name);
1:         if (index == null) {
1:             index = createIndex();
1:             index.load(tx);
1:             indexes.put(name, index);
1:         }
1:         tx.commit();
1:         return index;
1:     }
1: 
1:     class Producer extends Thread {
1:         private final String name;
1:         AtomicBoolean shutdown = new AtomicBoolean();
1: 
1:         public Producer(String name) {
1:             super("Producer: " + name);
1:             this.name = name;
1:         }
1: 
1:         public void shutdown() {
1:             shutdown.set(true);
1:         }
1: 
1:         @Override
1:         public void run() {
1:             try {
1: 
1:                 Transaction tx = pf.tx();
1:                 
1:                 Index<String,Long> index = openIndex(name);
1:                 long counter = 0;
1:                 while (!shutdown.get()) {
1:                     long c = counter;
1: 
1:                     String key = key(c);
1:                     index.put(tx, key, c);
1:                     tx.commit();
1:                     Thread.yield(); // This avoids consumer starvation..
1:                     
1:                     onProduced(counter++);
1:                 }
1: 
1:             } catch (Throwable e) {
1:                 e.printStackTrace();
1:             }
1:         }
1: 
1:         public void onProduced(long counter) {
1:         }
1:     }
1:     
1:     protected String key(long c) {
1:         return "a-long-message-id-like-key-" + c;
1:     }
1: 
1: 
1:     class Consumer extends Thread {
1:         private final String name;
1:         AtomicBoolean shutdown = new AtomicBoolean();
1: 
1:         public Consumer(String name) {
1:             super("Consumer: " + name);
1:             this.name = name;
1:         }
1: 
1:         public void shutdown() {
1:             shutdown.set(true);
1:         }
1: 
1:         @Override
1:         public void run() {
1:             try {
1:                 Transaction tx = pf.tx();
1: 
1:                 Index<String,Long> index = openIndex(name);
1:                 long counter = 0;
1:                 while (!shutdown.get()) {
1:                     long c = counter;
1:                     String key = key(c);
1:                     
1:                     Long record = index.get(tx, key);
1:                     if (record != null) {
1:                         if( index.remove(tx, key) == null ) {
1:                             System.out.print("Remove failed...");
1:                         }
1:                         tx.commit();
1:                         onConsumed(counter++);
1:                     }
1:                 }
1:             } catch (Throwable e) {
1:                 e.printStackTrace();
1:             }
1:         }
1: 
1:         public void onConsumed(long counter) {
1:         }
1:     }
1: 
1:     protected void dumpIndex(Index<String, Long> index) throws IOException {
1:     }
1: 
1:     public void testLoad() throws Exception {
1: 
1:         final Producer producers[] = new Producer[INDEX_COUNT];
1:         final Consumer consumers[] = new Consumer[INDEX_COUNT];
1:         final CountDownLatch preloadCountDown = new CountDownLatch(INDEX_COUNT);
1:         final AtomicLong producedRecords = new AtomicLong();
1:         final AtomicLong consumedRecords = new AtomicLong();
1: 
1:         System.out.println("Starting: " + INDEX_COUNT + " producers");
1:         for (int i = 0; i < INDEX_COUNT; i++) {
1:             producers[i] = new Producer("test-" + i) {
1:                 private boolean prelaodDone;
1: 
1:                 public void onProduced(long counter) {
1:                     if (!prelaodDone && counter >= INDEX_PRE_LOAD_COUNT) {
1:                         prelaodDone = true;
1:                         preloadCountDown.countDown();
1:                     }
1:                     producedRecords.incrementAndGet();
1:                 }
1:             };
1:             producers[i].start();
1:         }
1: 
1:         long start = System.currentTimeMillis();
1:         System.out.println("Waiting for each producer create " + INDEX_PRE_LOAD_COUNT + " records before starting the consumers.");
1:         preloadCountDown.await();
1:         long end = System.currentTimeMillis();
1:         System.out.println("Preloaded " + INDEX_PRE_LOAD_COUNT * INDEX_COUNT + " records at " + (INDEX_PRE_LOAD_COUNT * INDEX_COUNT * 1000f / (end - start)) + " records/sec");
1: 
1:         System.out.println("Starting: " + INDEX_COUNT + " consumers");
1:         for (int i = 0; i < INDEX_COUNT; i++) {
1:             consumers[i] = new Consumer("test-" + i) {
1:                 public void onConsumed(long counter) {
1:                     consumedRecords.incrementAndGet();
1:                 }
1:             };
1:             consumers[i].start();
1:         }
1: 
1:         long sample_start = System.currentTimeMillis();
1:         System.out.println("Taking " + SAMPLES + " performance samples every " + SAMPLE_DURATION + " ms");
1:         System.out.println("time (s), produced, produce rate (r/s), consumed, consume rate (r/s), used memory (k)");
1:         producedRecords.set(0);
1:         consumedRecords.set(0);
1:         for (int i = 0; i < SAMPLES; i++) {
1:             start = System.currentTimeMillis();
1:             Thread.sleep(SAMPLE_DURATION);
1:             end = System.currentTimeMillis();
1:             long p = producedRecords.getAndSet(0);
1:             long c = consumedRecords.getAndSet(0);
1: 
1:             long usedMemory = Runtime.getRuntime().totalMemory() - Runtime.getRuntime().freeMemory();
1: 
1:             System.out.println(((end-sample_start)/1000f)+", "+p+", "+(p * 1000f / (end - start)) + ", "+ c+", " + (c * 1000f / (end - start))+", "+(usedMemory/(1024)) );
1:         }
1:         System.out.println("Samples done... Shutting down the producers and consumers...");
1:         for (int i = 0; i < INDEX_COUNT; i++) {
1:             producers[i].shutdown();
1:             consumers[i].shutdown();
1:         }
1:         for (int i = 0; i < INDEX_COUNT; i++) {
1:             producers[i].join(1000 * 5);
1:             consumers[i].join(1000 * 5);
1:         }
1:         System.out.println("Shutdown.");
1:     }
1: 
1: }
============================================================================