1:7c3bb40: /*
1:7c3bb40:  * Licensed to the Apache Software Foundation (ASF) under one or more
1:7c3bb40:  * contributor license agreements.  See the NOTICE file distributed with
1:7c3bb40:  * this work for additional information regarding copyright ownership.
1:7c3bb40:  * The ASF licenses this file to You under the Apache License, Version 2.0
1:7c3bb40:  * (the "License"); you may not use this file except in compliance with
1:7c3bb40:  * the License.  You may obtain a copy of the License at
1:7c3bb40:  *
1:7c3bb40:  *      http://www.apache.org/licenses/LICENSE-2.0
1:7c3bb40:  *
1:7c3bb40:  * Unless required by applicable law or agreed to in writing, software
1:7c3bb40:  * distributed under the License is distributed on an "AS IS" BASIS,
1:7c3bb40:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:7c3bb40:  * See the License for the specific language governing permissions and
1:7c3bb40:  * limitations under the License.
1:7c3bb40:  */
1:7c3bb40: package org.apache.activemq.usecases;
2:7c3bb40: 
1:7c3bb40: import static org.junit.Assert.assertNotNull;
1:7c3bb40: import static org.junit.Assert.assertNull;
1:7c3bb40: 
1:7c3bb40: import java.lang.reflect.Field;
1:5c80eda: import java.util.ArrayList;
1:7c3bb40: import java.util.Arrays;
1:7c3bb40: import java.util.Collection;
1:7c3bb40: import java.util.List;
1:7c3bb40: 
1:7c3bb40: import javax.jms.Connection;
1:7c3bb40: import javax.jms.MessageConsumer;
1:7c3bb40: import javax.jms.MessageProducer;
1:7c3bb40: import javax.jms.Session;
1:7c3bb40: import javax.jms.TextMessage;
1:7c3bb40: 
1:7c3bb40: import org.apache.activemq.ActiveMQConnectionFactory;
1:7c3bb40: import org.apache.activemq.broker.BrokerService;
1:7c3bb40: import org.apache.activemq.broker.TransportConnector;
1:7c3bb40: import org.apache.activemq.broker.region.MessageReference;
1:7c3bb40: import org.apache.activemq.broker.region.PrefetchSubscription;
1:7c3bb40: import org.apache.activemq.broker.region.Subscription;
1:7c3bb40: import org.apache.activemq.broker.region.TopicSubscription;
1:7c3bb40: import org.apache.activemq.broker.region.policy.PolicyEntry;
1:7c3bb40: import org.apache.activemq.broker.region.policy.PolicyMap;
1:7c3bb40: import org.apache.activemq.command.ActiveMQDestination;
1:7c3bb40: import org.apache.activemq.command.ActiveMQQueue;
1:7c3bb40: import org.apache.activemq.command.ActiveMQTextMessage;
1:7c3bb40: import org.apache.activemq.command.ActiveMQTopic;
1:7c3bb40: import org.apache.activemq.command.Message;
1:7c3bb40: import org.junit.After;
1:7c3bb40: import org.junit.Before;
1:7c3bb40: import org.junit.Rule;
1:7c3bb40: import org.junit.Test;
1:7c3bb40: import org.junit.rules.TemporaryFolder;
1:7c3bb40: import org.junit.runner.RunWith;
1:7c3bb40: import org.junit.runners.Parameterized;
1:7c3bb40: import org.junit.runners.Parameterized.Parameters;
1:7c3bb40: import org.slf4j.Logger;
1:7c3bb40: import org.slf4j.LoggerFactory;
1:7c3bb40: 
1:7c3bb40: /**
1:7c3bb40:  * Test that clearUnMarshalled data gets called properly to reduce memory usage
1:7c3bb40:  */
1:7c3bb40: @RunWith(Parameterized.class)
1:7c3bb40: public class AMQ6477Test {
1:7c3bb40: 
1:7c3bb40:     static final Logger LOG = LoggerFactory.getLogger(AMQ6477Test.class);
1:7c3bb40: 
1:7c3bb40:     @Rule
1:7c3bb40:     public TemporaryFolder dataDir = new TemporaryFolder();
1:7c3bb40: 
1:7c3bb40:     private BrokerService brokerService;
1:7c3bb40:     private String connectionUri;
1:7c3bb40:     private final ActiveMQQueue queue = new ActiveMQQueue("queue");
1:7c3bb40:     private final ActiveMQTopic topic = new ActiveMQTopic("topic");
1:7c3bb40:     private final int numMessages = 10;
1:7c3bb40:     private Connection connection;
1:7c3bb40:     private Session session;
1:7c3bb40:     private SubType subType;
1:7c3bb40:     private boolean persistent;
1:7c3bb40: 
1:84126d8:     protected enum SubType {QUEUE, TOPIC, DURABLE}
1:7c3bb40: 
1:7c3bb40:     @Parameters(name="subType={0},isPersistent={1}")
1:7c3bb40:     public static Collection<Object[]> data() {
1:7c3bb40:         return Arrays.asList(new Object[][] {
1:7c3bb40:                 {SubType.QUEUE, false},
1:84126d8:                 //Can only test PrefetchSubscriptions for now as TopicSubscriptions don't track the message
1:84126d8:                 //references anymore that are dispatched
1:84126d8:                // {SubType.TOPIC, false},
1:7c3bb40:                 {SubType.DURABLE, false},
1:7c3bb40:                 {SubType.QUEUE, true},
1:84126d8:                // {SubType.TOPIC, true},
1:7c3bb40:                 {SubType.DURABLE, true}
1:7c3bb40:             });
1:7c3bb40:     }
1:7c3bb40: 
1:7c3bb40:     /**
1:7c3bb40:      */
1:7c3bb40:     public AMQ6477Test(SubType subType, boolean persistent) {
1:7c3bb40:         super();
1:7c3bb40:         this.subType = subType;
1:7c3bb40:         this.persistent = persistent;
1:7c3bb40:     }
1:7c3bb40: 
1:7c3bb40:     @Before
1:7c3bb40:     public void before() throws Exception {
1:7c3bb40:         brokerService = new BrokerService();
1:7c3bb40:         TransportConnector connector = brokerService.addConnector("tcp://localhost:0");
1:7c3bb40:         connectionUri = connector.getPublishableConnectString();
1:7c3bb40:         brokerService.setPersistent(persistent);
1:7c3bb40:         brokerService.setDataDirectory(dataDir.getRoot().getAbsolutePath());
1:7c3bb40:         brokerService.setUseJmx(false);
1:7c3bb40: 
1:7c3bb40:         PolicyMap policyMap = new PolicyMap();
1:7c3bb40:         PolicyEntry entry = new PolicyEntry();
1:7c3bb40:         entry.setReduceMemoryFootprint(true);
1:7c3bb40: 
1:7c3bb40:         policyMap.setDefaultEntry(entry);
1:7c3bb40:         brokerService.setDestinationPolicy(policyMap);
1:7c3bb40: 
1:7c3bb40:         brokerService.start();
1:7c3bb40:         brokerService.waitUntilStarted();
1:7c3bb40: 
1:7c3bb40:         final ActiveMQConnectionFactory factory = new ActiveMQConnectionFactory(connectionUri);
1:7c3bb40:         connection = factory.createConnection();
1:7c3bb40:         connection.setClientID("clientId");
1:7c3bb40:         connection.start();
1:7c3bb40: 
1:7c3bb40:         session = connection.createSession(false, Session.AUTO_ACKNOWLEDGE);
1:7c3bb40:     }
1:7c3bb40: 
1:7c3bb40:     @After
1:7c3bb40:     public void after() throws Exception {
1:7c3bb40:         if (connection != null) {
1:7c3bb40:             connection.stop();
1:7c3bb40:         }
1:7c3bb40:         if (brokerService != null) {
1:7c3bb40:             brokerService.stop();
1:7c3bb40:             brokerService.waitUntilStopped();
1:7c3bb40:         }
1:7c3bb40:     }
1:7c3bb40: 
1:7c3bb40:     @Test(timeout=30000)
1:7c3bb40:     public void testReduceMemoryFootprint() throws Exception {
1:7c3bb40: 
1:7c3bb40:         ActiveMQDestination destination = subType.equals(SubType.QUEUE) ? queue : topic;
1:7c3bb40: 
1:7c3bb40:         MessageConsumer consumer = subType.equals(SubType.DURABLE) ?
1:7c3bb40:                 session.createDurableSubscriber(topic, "sub1") : session.createConsumer(destination);
1:7c3bb40:         MessageProducer producer = session.createProducer(destination);
1:7c3bb40:         for (int i = 0; i < numMessages; i++) {
1:7c3bb40:             TextMessage m = session.createTextMessage("test");
1:7c3bb40:             m.setStringProperty("test", "test");
1:7c3bb40:             producer.send(m);
1:7c3bb40:         }
1:7c3bb40: 
1:7c3bb40:         Subscription sub = brokerService.getDestination(destination).getConsumers().get(0);
1:7c3bb40:         List<MessageReference> messages = getSubscriptionMessages(sub);
1:7c3bb40: 
1:7c3bb40:         //Go through each message and make sure the unmarshalled fields are null
1:7c3bb40:         //then call the getters which will unmarshall the data again to show the marshalled
1:7c3bb40:         //data exists
1:7c3bb40:         for (MessageReference ref : messages) {
1:7c3bb40:             ActiveMQTextMessage message = (ActiveMQTextMessage) ref.getMessage();
1:7c3bb40:             Field propertiesField = Message.class.getDeclaredField("properties");
1:7c3bb40:             propertiesField.setAccessible(true);
1:7c3bb40:             Field textField = ActiveMQTextMessage.class.getDeclaredField("text");
1:7c3bb40:             textField.setAccessible(true);
1:7c3bb40: 
1:7c3bb40:             assertNull(textField.get(message));
1:7c3bb40:             assertNull(propertiesField.get(message));
1:7c3bb40:             assertNotNull(message.getProperties());
1:7c3bb40:             assertNotNull(message.getText());
1:7c3bb40:         }
1:7c3bb40:         consumer.close();
1:7c3bb40:     }
1:7c3bb40: 
1:7c3bb40: 
1:7c3bb40:     @SuppressWarnings("unchecked")
1:7c3bb40:     protected List<MessageReference> getSubscriptionMessages(Subscription sub) throws Exception {
1:5c80eda:         Field dispatchedField = null;
1:5c80eda:         Field dispatchLockField = null;
1:84126d8:         //Can only test PrefetchSubscriptions for now as TopicSubscriptions don't track the message
1:84126d8:         //references anymore that are dispatched
1:84126d8:         if (sub instanceof PrefetchSubscription) {
1:5c80eda:             dispatchedField = PrefetchSubscription.class.getDeclaredField("dispatched");
1:5c80eda:             dispatchLockField = PrefetchSubscription.class.getDeclaredField("dispatchLock");
1:7c3bb40:         }
1:5c80eda:         dispatchedField.setAccessible(true);
1:5c80eda:         dispatchLockField.setAccessible(true);
1:5c80eda: 
1:5c80eda:         synchronized (dispatchLockField.get(sub)) {
1:5c80eda:             return new ArrayList<MessageReference>((List<MessageReference>)dispatchedField.get(sub));
1:5c80eda:         }
1:7c3bb40:     }
1:7c3bb40: 
1:7c3bb40: }
============================================================================
author:Christopher L. Shannon (cshannon)
-------------------------------------------------------------------------------
commit:84126d8
/////////////////////////////////////////////////////////////////////////
1:     protected enum SubType {QUEUE, TOPIC, DURABLE}
1:                 //Can only test PrefetchSubscriptions for now as TopicSubscriptions don't track the message
1:                 //references anymore that are dispatched
1:                // {SubType.TOPIC, false},
1:                // {SubType.TOPIC, true},
/////////////////////////////////////////////////////////////////////////
1:         //Can only test PrefetchSubscriptions for now as TopicSubscriptions don't track the message
1:         //references anymore that are dispatched
1:         if (sub instanceof PrefetchSubscription) {
commit:5c80eda
/////////////////////////////////////////////////////////////////////////
1: import java.util.ArrayList;
/////////////////////////////////////////////////////////////////////////
1:         Field dispatchedField = null;
1:         Field dispatchLockField = null;
0:             dispatchedField = TopicSubscription.class.getDeclaredField("dispatched");
0:             dispatchLockField = TopicSubscription.class.getDeclaredField("dispatchLock");
1:             dispatchedField = PrefetchSubscription.class.getDeclaredField("dispatched");
1:             dispatchLockField = PrefetchSubscription.class.getDeclaredField("dispatchLock");
1:         dispatchedField.setAccessible(true);
1:         dispatchLockField.setAccessible(true);
1: 
1:         synchronized (dispatchLockField.get(sub)) {
1:             return new ArrayList<MessageReference>((List<MessageReference>)dispatchedField.get(sub));
1:         }
commit:7c3bb40
/////////////////////////////////////////////////////////////////////////
1: /*
1:  * Licensed to the Apache Software Foundation (ASF) under one or more
1:  * contributor license agreements.  See the NOTICE file distributed with
1:  * this work for additional information regarding copyright ownership.
1:  * The ASF licenses this file to You under the Apache License, Version 2.0
1:  * (the "License"); you may not use this file except in compliance with
1:  * the License.  You may obtain a copy of the License at
1:  *
1:  *      http://www.apache.org/licenses/LICENSE-2.0
1:  *
1:  * Unless required by applicable law or agreed to in writing, software
1:  * distributed under the License is distributed on an "AS IS" BASIS,
1:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:  * See the License for the specific language governing permissions and
1:  * limitations under the License.
1:  */
1: package org.apache.activemq.usecases;
1: 
1: import static org.junit.Assert.assertNotNull;
1: import static org.junit.Assert.assertNull;
1: 
1: import java.lang.reflect.Field;
1: import java.util.Arrays;
1: import java.util.Collection;
1: import java.util.List;
1: 
1: import javax.jms.Connection;
1: import javax.jms.MessageConsumer;
1: import javax.jms.MessageProducer;
1: import javax.jms.Session;
1: import javax.jms.TextMessage;
1: 
1: import org.apache.activemq.ActiveMQConnectionFactory;
1: import org.apache.activemq.broker.BrokerService;
1: import org.apache.activemq.broker.TransportConnector;
1: import org.apache.activemq.broker.region.MessageReference;
1: import org.apache.activemq.broker.region.PrefetchSubscription;
1: import org.apache.activemq.broker.region.Subscription;
1: import org.apache.activemq.broker.region.TopicSubscription;
1: import org.apache.activemq.broker.region.policy.PolicyEntry;
1: import org.apache.activemq.broker.region.policy.PolicyMap;
1: import org.apache.activemq.command.ActiveMQDestination;
1: import org.apache.activemq.command.ActiveMQQueue;
1: import org.apache.activemq.command.ActiveMQTextMessage;
1: import org.apache.activemq.command.ActiveMQTopic;
1: import org.apache.activemq.command.Message;
1: import org.junit.After;
1: import org.junit.Before;
1: import org.junit.Rule;
1: import org.junit.Test;
1: import org.junit.rules.TemporaryFolder;
1: import org.junit.runner.RunWith;
1: import org.junit.runners.Parameterized;
1: import org.junit.runners.Parameterized.Parameters;
1: import org.slf4j.Logger;
1: import org.slf4j.LoggerFactory;
1: 
1: /**
1:  * Test that clearUnMarshalled data gets called properly to reduce memory usage
1:  */
1: @RunWith(Parameterized.class)
1: public class AMQ6477Test {
1: 
1:     static final Logger LOG = LoggerFactory.getLogger(AMQ6477Test.class);
1: 
1:     @Rule
1:     public TemporaryFolder dataDir = new TemporaryFolder();
1: 
1:     private BrokerService brokerService;
1:     private String connectionUri;
1:     private final ActiveMQQueue queue = new ActiveMQQueue("queue");
1:     private final ActiveMQTopic topic = new ActiveMQTopic("topic");
1:     private final int numMessages = 10;
1:     private Connection connection;
1:     private Session session;
1:     private SubType subType;
1:     private boolean persistent;
1: 
0:     protected enum SubType {QUEUE, TOPIC, DURABLE};
1: 
1:     @Parameters(name="subType={0},isPersistent={1}")
1:     public static Collection<Object[]> data() {
1:         return Arrays.asList(new Object[][] {
1:                 {SubType.QUEUE, false},
0:                 {SubType.TOPIC, false},
1:                 {SubType.DURABLE, false},
1:                 {SubType.QUEUE, true},
0:                 {SubType.TOPIC, true},
1:                 {SubType.DURABLE, true}
1:             });
1:     }
1: 
1:     /**
1:      */
1:     public AMQ6477Test(SubType subType, boolean persistent) {
1:         super();
1:         this.subType = subType;
1:         this.persistent = persistent;
1:     }
1: 
1:     @Before
1:     public void before() throws Exception {
1:         brokerService = new BrokerService();
1:         TransportConnector connector = brokerService.addConnector("tcp://localhost:0");
1:         connectionUri = connector.getPublishableConnectString();
1:         brokerService.setPersistent(persistent);
1:         brokerService.setDataDirectory(dataDir.getRoot().getAbsolutePath());
1:         brokerService.setUseJmx(false);
1: 
1:         PolicyMap policyMap = new PolicyMap();
1:         PolicyEntry entry = new PolicyEntry();
1:         entry.setReduceMemoryFootprint(true);
1: 
1:         policyMap.setDefaultEntry(entry);
1:         brokerService.setDestinationPolicy(policyMap);
1: 
1:         brokerService.start();
1:         brokerService.waitUntilStarted();
1: 
1:         final ActiveMQConnectionFactory factory = new ActiveMQConnectionFactory(connectionUri);
1:         connection = factory.createConnection();
1:         connection.setClientID("clientId");
1:         connection.start();
1: 
1:         session = connection.createSession(false, Session.AUTO_ACKNOWLEDGE);
1:     }
1: 
1:     @After
1:     public void after() throws Exception {
1:         if (connection != null) {
1:             connection.stop();
1:         }
1:         if (brokerService != null) {
1:             brokerService.stop();
1:             brokerService.waitUntilStopped();
1:         }
1:     }
1: 
1:     @Test(timeout=30000)
1:     public void testReduceMemoryFootprint() throws Exception {
1: 
1:         ActiveMQDestination destination = subType.equals(SubType.QUEUE) ? queue : topic;
1: 
1:         MessageConsumer consumer = subType.equals(SubType.DURABLE) ?
1:                 session.createDurableSubscriber(topic, "sub1") : session.createConsumer(destination);
1:         MessageProducer producer = session.createProducer(destination);
1:         for (int i = 0; i < numMessages; i++) {
1:             TextMessage m = session.createTextMessage("test");
1:             m.setStringProperty("test", "test");
1:             producer.send(m);
1:         }
1: 
1:         Subscription sub = brokerService.getDestination(destination).getConsumers().get(0);
1:         List<MessageReference> messages = getSubscriptionMessages(sub);
1: 
1:         //Go through each message and make sure the unmarshalled fields are null
1:         //then call the getters which will unmarshall the data again to show the marshalled
1:         //data exists
1:         for (MessageReference ref : messages) {
1:             ActiveMQTextMessage message = (ActiveMQTextMessage) ref.getMessage();
1:             Field propertiesField = Message.class.getDeclaredField("properties");
1:             propertiesField.setAccessible(true);
1:             Field textField = ActiveMQTextMessage.class.getDeclaredField("text");
1:             textField.setAccessible(true);
1: 
1:             assertNull(textField.get(message));
1:             assertNull(propertiesField.get(message));
1:             assertNotNull(message.getProperties());
1:             assertNotNull(message.getText());
1:         }
1:         consumer.close();
1:     }
1: 
1: 
1:     @SuppressWarnings("unchecked")
1:     protected List<MessageReference> getSubscriptionMessages(Subscription sub) throws Exception {
0:         Field f = null;
1: 
0:         if (sub instanceof TopicSubscription) {
0:             f = TopicSubscription.class.getDeclaredField("dispatched");
0:         } else {
0:             f = PrefetchSubscription.class.getDeclaredField("dispatched");
1:         }
0:         f.setAccessible(true);
0:         return (List<MessageReference>) f.get(sub);
1:     }
1: 
1: }
============================================================================