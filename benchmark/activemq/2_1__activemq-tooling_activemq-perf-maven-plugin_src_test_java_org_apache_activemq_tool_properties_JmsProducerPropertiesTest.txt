1:d822db7: /**
1:d822db7:  * Licensed to the Apache Software Foundation (ASF) under one or more
1:d822db7:  * contributor license agreements.  See the NOTICE file distributed with
1:d822db7:  * this work for additional information regarding copyright ownership.
1:d822db7:  * The ASF licenses this file to You under the Apache License, Version 2.0
1:d822db7:  * (the "License"); you may not use this file except in compliance with
1:d822db7:  * the License.  You may obtain a copy of the License at
1:d822db7:  *
1:d822db7:  *      http://www.apache.org/licenses/LICENSE-2.0
1:d822db7:  *
1:d822db7:  * Unless required by applicable law or agreed to in writing, software
1:d822db7:  * distributed under the License is distributed on an "AS IS" BASIS,
1:d822db7:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:d822db7:  * See the License for the specific language governing permissions and
1:d822db7:  * limitations under the License.
1:d822db7:  */
1:d822db7: package org.apache.activemq.tool.properties;
1:d822db7: 
1:d822db7: import junit.framework.TestCase;
1:d822db7: 
1:d822db7: import java.util.Set;
1:d822db7: 
1:d822db7: public class JmsProducerPropertiesTest extends TestCase {
1:d822db7: 	
1:d822db7: 	/**
1:d822db7: 	 * Tests the correct parsing of message headers.
1:d822db7: 	 * @See JmsProducerProperties.setHeader(String encodedHeader)
1:d822db7: 	 * 
1:d822db7: 	 */
1:d822db7:     public void testMessageHeaders() {
1:d822db7:     	
1:d822db7:     	// first test correct header values
1:d822db7:     	String header = "a=b";
1:d822db7:     	JmsProducerProperties props = new JmsProducerProperties();
1:d822db7:     	props.setHeader(header);
1:d822db7:     	assertEquals(1, props.headerMap.size());
1:d822db7:     	Set<String> keys = props.getHeaderKeys();
1:d822db7:     	assertEquals(1, keys.size());
1:d822db7:     	assertTrue(keys.contains("a"));
1:d822db7:     	assertEquals("b", props.getHeaderValue("a"));
1:d822db7:     	props.clearHeaders();
1:d822db7:     	
1:d822db7:     	header = "a=b:c=d";
1:d822db7:     	props.setHeader(header);
1:d822db7:     	assertEquals(2, props.headerMap.size());
1:d822db7:     	keys = props.getHeaderKeys();
1:d822db7:     	assertEquals(2, keys.size());
1:d822db7:     	assertTrue(keys.contains("a"));
1:d822db7:     	assertTrue(keys.contains("c"));
1:d822db7:     	assertEquals("b", props.getHeaderValue("a"));
1:d822db7:     	assertEquals("d", props.getHeaderValue("c"));
1:d822db7:     	props.clearHeaders();
1:d822db7:     	
1:d822db7:     	header = "a=b:c=d:e=f";
1:d822db7:     	props.setHeader(header);
1:d822db7:     	assertEquals(3, props.headerMap.size());
1:d822db7:     	keys = props.getHeaderKeys();
1:d822db7:     	assertEquals(3, keys.size());
1:d822db7:     	assertTrue(keys.contains("a"));
1:d822db7:     	assertTrue(keys.contains("c"));
1:d822db7:     	assertTrue(keys.contains("e"));
1:d822db7:     	assertEquals("b", props.getHeaderValue("a"));
1:d822db7:     	assertEquals("d", props.getHeaderValue("c"));
1:d822db7:     	assertEquals("f", props.getHeaderValue("e"));
1:d822db7:     	props.clearHeaders();
1:d822db7: 
1:d822db7:     	header = "a=b:c=d:e=f:";
1:d822db7:     	props.setHeader(header);
1:d822db7:     	assertEquals(3, props.headerMap.size());
1:d822db7:     	keys = props.getHeaderKeys();
1:d822db7:     	assertEquals(3, keys.size());
1:d822db7:     	assertTrue(keys.contains("a"));
1:d822db7:     	assertTrue(keys.contains("c"));
1:d822db7:     	assertTrue(keys.contains("e"));
1:d822db7:     	assertEquals("b", props.getHeaderValue("a"));
1:d822db7:     	assertEquals("d", props.getHeaderValue("c"));
1:d822db7:     	assertEquals("f", props.getHeaderValue("e"));
1:d822db7:     	props.clearHeaders();
1:d822db7: 
1:d822db7:     	
1:d822db7:     	// test incorrect header values
1:d822db7:     	header = "a:=";
1:d822db7:     	props.setHeader(header);
1:d822db7:     	assertEquals(0, props.headerMap.size());
1:d822db7:     	props.clearHeaders();
1:d822db7:     	
1:d822db7:     	header = "a:=b";
1:d822db7:     	props.setHeader(header);
1:d822db7:     	assertEquals(0, props.headerMap.size());
1:d822db7:     	props.clearHeaders();
1:d822db7:     	
1:d822db7:     	header = "a=:";
1:d822db7:     	props.setHeader(header);
1:d822db7:     	assertEquals(0, props.headerMap.size());
1:d822db7:     	props.clearHeaders();
1:d822db7:     	
1:d822db7:     	header = "a=b::";
1:d822db7:     	props.setHeader(header);
1:d822db7:     	assertEquals(1, props.headerMap.size());
1:d822db7:     	keys = props.getHeaderKeys();
1:d822db7:     	assertEquals(1, keys.size());
1:d822db7:     	assertTrue(keys.contains("a"));
1:d822db7:     	assertEquals("b", props.getHeaderValue("a"));
1:d822db7:     	props.clearHeaders();
1:d822db7:     	
1:d822db7:     	header = "a=b:\":";
1:d822db7:     	props.setHeader(header);
1:d822db7:     	assertEquals(1, props.headerMap.size());
1:d822db7:     	keys = props.getHeaderKeys();
1:d822db7:     	assertEquals(1, keys.size());
1:d822db7:     	assertTrue(keys.contains("a"));
1:d822db7:     	assertEquals("b", props.getHeaderValue("a"));
1:d822db7:     	props.clearHeaders();
1:d822db7:     	
1:d822db7:     	header = " :  ";
1:d822db7:     	props.setHeader(header);
1:d822db7:     	assertEquals(0, props.headerMap.size());
1:d822db7:     	props.clearHeaders();
1:d822db7:     }
1:d822db7: }
============================================================================
author:Timothy A. Bish
-------------------------------------------------------------------------------
commit:87e878b
author:Bosanac Dejan
-------------------------------------------------------------------------------
commit:d822db7
/////////////////////////////////////////////////////////////////////////
1: /**
1:  * Licensed to the Apache Software Foundation (ASF) under one or more
1:  * contributor license agreements.  See the NOTICE file distributed with
1:  * this work for additional information regarding copyright ownership.
1:  * The ASF licenses this file to You under the Apache License, Version 2.0
1:  * (the "License"); you may not use this file except in compliance with
1:  * the License.  You may obtain a copy of the License at
1:  *
1:  *      http://www.apache.org/licenses/LICENSE-2.0
1:  *
1:  * Unless required by applicable law or agreed to in writing, software
1:  * distributed under the License is distributed on an "AS IS" BASIS,
1:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:  * See the License for the specific language governing permissions and
1:  * limitations under the License.
1:  */
1: package org.apache.activemq.tool.properties;
1: 
1: import junit.framework.TestCase;
1: 
1: import java.util.Set;
1: 
1: public class JmsProducerPropertiesTest extends TestCase {
1: 	
1: 	/**
1: 	 * Tests the correct parsing of message headers.
1: 	 * @See JmsProducerProperties.setHeader(String encodedHeader)
1: 	 * 
1: 	 */
1:     public void testMessageHeaders() {
1:     	
1:     	// first test correct header values
1:     	String header = "a=b";
1:     	JmsProducerProperties props = new JmsProducerProperties();
1:     	props.setHeader(header);
1:     	assertEquals(1, props.headerMap.size());
1:     	Set<String> keys = props.getHeaderKeys();
1:     	assertEquals(1, keys.size());
1:     	assertTrue(keys.contains("a"));
1:     	assertEquals("b", props.getHeaderValue("a"));
1:     	props.clearHeaders();
1:     	
1:     	header = "a=b:c=d";
1:     	props.setHeader(header);
1:     	assertEquals(2, props.headerMap.size());
1:     	keys = props.getHeaderKeys();
1:     	assertEquals(2, keys.size());
1:     	assertTrue(keys.contains("a"));
1:     	assertTrue(keys.contains("c"));
1:     	assertEquals("b", props.getHeaderValue("a"));
1:     	assertEquals("d", props.getHeaderValue("c"));
1:     	props.clearHeaders();
1:     	
1:     	header = "a=b:c=d:e=f";
1:     	props.setHeader(header);
1:     	assertEquals(3, props.headerMap.size());
1:     	keys = props.getHeaderKeys();
1:     	assertEquals(3, keys.size());
1:     	assertTrue(keys.contains("a"));
1:     	assertTrue(keys.contains("c"));
1:     	assertTrue(keys.contains("e"));
1:     	assertEquals("b", props.getHeaderValue("a"));
1:     	assertEquals("d", props.getHeaderValue("c"));
1:     	assertEquals("f", props.getHeaderValue("e"));
1:     	props.clearHeaders();
1: 
1:     	header = "a=b:c=d:e=f:";
1:     	props.setHeader(header);
1:     	assertEquals(3, props.headerMap.size());
1:     	keys = props.getHeaderKeys();
1:     	assertEquals(3, keys.size());
1:     	assertTrue(keys.contains("a"));
1:     	assertTrue(keys.contains("c"));
1:     	assertTrue(keys.contains("e"));
1:     	assertEquals("b", props.getHeaderValue("a"));
1:     	assertEquals("d", props.getHeaderValue("c"));
1:     	assertEquals("f", props.getHeaderValue("e"));
1:     	props.clearHeaders();
1: 
1:     	
1:     	// test incorrect header values
1:     	header = "a:=";
1:     	props.setHeader(header);
1:     	assertEquals(0, props.headerMap.size());
1:     	props.clearHeaders();
1:     	
1:     	header = "a:=b";
1:     	props.setHeader(header);
1:     	assertEquals(0, props.headerMap.size());
1:     	props.clearHeaders();
1:     	
1:     	header = "a=:";
1:     	props.setHeader(header);
1:     	assertEquals(0, props.headerMap.size());
1:     	props.clearHeaders();
1:     	
1:     	header = "a=b::";
1:     	props.setHeader(header);
1:     	assertEquals(1, props.headerMap.size());
1:     	keys = props.getHeaderKeys();
1:     	assertEquals(1, keys.size());
1:     	assertTrue(keys.contains("a"));
1:     	assertEquals("b", props.getHeaderValue("a"));
1:     	props.clearHeaders();
1:     	
1:     	header = "a=b:\":";
1:     	props.setHeader(header);
1:     	assertEquals(1, props.headerMap.size());
1:     	keys = props.getHeaderKeys();
1:     	assertEquals(1, keys.size());
1:     	assertTrue(keys.contains("a"));
1:     	assertEquals("b", props.getHeaderValue("a"));
1:     	props.clearHeaders();
1:     	
1:     	header = " :  ";
1:     	props.setHeader(header);
1:     	assertEquals(0, props.headerMap.size());
1:     	props.clearHeaders();
1:     }
1: }
============================================================================