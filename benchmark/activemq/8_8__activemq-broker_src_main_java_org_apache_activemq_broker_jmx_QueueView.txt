1:e6f5d30: /**
1:7f883f6:  * Licensed to the Apache Software Foundation (ASF) under one or more
1:7f883f6:  * contributor license agreements.  See the NOTICE file distributed with
1:7f883f6:  * this work for additional information regarding copyright ownership.
1:7f883f6:  * The ASF licenses this file to You under the Apache License, Version 2.0
1:7f883f6:  * (the "License"); you may not use this file except in compliance with
1:7f883f6:  * the License.  You may obtain a copy of the License at
2:7f883f6:  *
1:230a86c:  *      http://www.apache.org/licenses/LICENSE-2.0
1:7f883f6:  *
1:7f883f6:  * Unless required by applicable law or agreed to in writing, software
1:7f883f6:  * distributed under the License is distributed on an "AS IS" BASIS,
1:7f883f6:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:7f883f6:  * See the License for the specific language governing permissions and
1:7f883f6:  * limitations under the License.
1:e6f5d30:  */
1:e6f5d30: package org.apache.activemq.broker.jmx;
3:e6f5d30: 
1:468e697: import java.util.Map;
1:468e697: 
1:e6f5d30: import javax.management.openmbean.CompositeData;
1:e6f5d30: import javax.management.openmbean.OpenDataException;
1:6cd7082: import javax.jms.JMSException;
1:07d4e8c: 
1:9479de7: import org.apache.activemq.broker.ConnectionContext;
1:e6f5d30: import org.apache.activemq.broker.region.Queue;
1:1b45e3b: import org.apache.activemq.broker.region.QueueMessageReference;
1:ed5d43b: import org.apache.activemq.command.ActiveMQDestination;
1:e6f5d30: import org.apache.activemq.command.Message;
1:df7cb77: import org.apache.activemq.util.BrokerSupport;
1:23ecbe8: import org.slf4j.Logger;
1:23ecbe8: import org.slf4j.LoggerFactory;
1:07d4e8c: 
1:07d4e8c: /**
1:07d4e8c:  * Provides a JMX Management view of a Queue.
1:07d4e8c:  */
1:230a86c: public class QueueView extends DestinationView implements QueueViewMBean {
1:23ecbe8:     private static final Logger LOG = LoggerFactory.getLogger(QueueView.class);
1:23ecbe8: 
1:230a86c:     public QueueView(ManagedRegionBroker broker, Queue destination) {
1:ed5d43b:         super(broker, destination);
1:e6f5d30:     }
1:ed5d43b: 
1:230a86c:     public CompositeData getMessage(String messageId) throws OpenDataException {
1:bf62dc8:     	CompositeData result = null;
1:bf62dc8:     	QueueMessageReference ref = ((Queue)destination).getMessage(messageId);
1:e6f5d30: 
1:bf62dc8:         if (ref != null) {
1:bf62dc8: 	        Message rc = ref.getMessage();
1:ecf89a6: 	        if (rc == null) {
1:e6f5d30: 	            return null;
1:ecf89a6: 	        }
1:bf62dc8: 	        result = OpenTypeSupport.convert(rc);
1:ed5d43b:         }
1:e6f5d30: 
1:bf62dc8:         return result;
1:e6f5d30:     }
1:e6f5d30: 
1:00ee949:     public synchronized void purge() throws Exception {
1:23ecbe8:         final long originalMessageCount = destination.getDestinationStatistics().getMessages().getCount();
1:23ecbe8: 
1:230a86c:         ((Queue)destination).purge();
1:23ecbe8: 
1:23ecbe8:         LOG.info("{} purge of {} messages", destination.getActiveMQDestination().getQualifiedName(), originalMessageCount);
1:e6f5d30:     }
1:e6f5d30: 
1:230a86c:     public boolean removeMessage(String messageId) throws Exception {
1:230a86c:         return ((Queue)destination).removeMessage(messageId);
1:e6f5d30:     }
1:e6f5d30: 
1:acab282:     public synchronized int removeMatchingMessages(String selector) throws Exception {
1:230a86c:         return ((Queue)destination).removeMatchingMessages(selector);
1:e6f5d30:     }
1:230a86c: 
1:acab282:     public synchronized int removeMatchingMessages(String selector, int maximumMessages) throws Exception {
1:230a86c:         return ((Queue)destination).removeMatchingMessages(selector, maximumMessages);
1:e6f5d30:     }
1:230a86c: 
1:7f5213b:     public boolean copyMessageTo(String messageId, String destinationName) throws Exception {
1:df7cb77:         ConnectionContext context = BrokerSupport.getConnectionContext(broker.getContextBroker());
1:9479de7:         ActiveMQDestination toDestination = ActiveMQDestination.createDestination(destinationName, ActiveMQDestination.QUEUE_TYPE);
1:230a86c:         return ((Queue)destination).copyMessageTo(context, messageId, toDestination);
1:e6f5d30:     }
1:07d4e8c: 
1:9479de7:     public int copyMatchingMessagesTo(String selector, String destinationName) throws Exception {
1:df7cb77:         ConnectionContext context = BrokerSupport.getConnectionContext(broker.getContextBroker());
1:9479de7:         ActiveMQDestination toDestination = ActiveMQDestination.createDestination(destinationName, ActiveMQDestination.QUEUE_TYPE);
1:230a86c:         return ((Queue)destination).copyMatchingMessagesTo(context, selector, toDestination);
1:e6f5d30:     }
1:230a86c: 
1:9479de7:     public int copyMatchingMessagesTo(String selector, String destinationName, int maximumMessages) throws Exception {
1:df7cb77:         ConnectionContext context = BrokerSupport.getConnectionContext(broker.getContextBroker());
1:9479de7:         ActiveMQDestination toDestination = ActiveMQDestination.createDestination(destinationName, ActiveMQDestination.QUEUE_TYPE);
1:230a86c:         return ((Queue)destination).copyMatchingMessagesTo(context, selector, toDestination, maximumMessages);
1:e6f5d30:     }
1:230a86c: 
1:9479de7:     public boolean moveMessageTo(String messageId, String destinationName) throws Exception {
1:df7cb77:         ConnectionContext context = BrokerSupport.getConnectionContext(broker.getContextBroker());
1:9479de7:         ActiveMQDestination toDestination = ActiveMQDestination.createDestination(destinationName, ActiveMQDestination.QUEUE_TYPE);
1:230a86c:         return ((Queue)destination).moveMessageTo(context, messageId, toDestination);
1:e6f5d30:     }
1:230a86c: 
1:acab282:     public synchronized int moveMatchingMessagesTo(String selector, String destinationName) throws Exception {
1:df7cb77:         ConnectionContext context = BrokerSupport.getConnectionContext(broker.getContextBroker());
1:9479de7:         ActiveMQDestination toDestination = ActiveMQDestination.createDestination(destinationName, ActiveMQDestination.QUEUE_TYPE);
1:230a86c:         return ((Queue)destination).moveMatchingMessagesTo(context, selector, toDestination);
1:e6f5d30:     }
1:230a86c: 
1:acab282:     public synchronized int moveMatchingMessagesTo(String selector, String destinationName, int maximumMessages) throws Exception {
1:df7cb77:         ConnectionContext context = BrokerSupport.getConnectionContext(broker.getContextBroker());
1:9479de7:         ActiveMQDestination toDestination = ActiveMQDestination.createDestination(destinationName, ActiveMQDestination.QUEUE_TYPE);
1:230a86c:         return ((Queue)destination).moveMatchingMessagesTo(context, selector, toDestination, maximumMessages);
1:e6f5d30:     }
1:e6f5d30: 
1:acab282:     public synchronized int retryMessages() throws Exception {
1:e1f170d:         ConnectionContext context = BrokerSupport.getConnectionContext(broker.getContextBroker());
1:e1f170d:         return ((Queue)destination).retryMessages(context, Integer.MAX_VALUE);
1:e1f170d:     }
1:e1f170d: 
1:323bb23:     /**
1:323bb23:      * Moves a message back to its original destination
1:323bb23:      */
1:323bb23:     public boolean retryMessage(String messageId) throws Exception {
1:323bb23:         Queue queue = (Queue) destination;
1:1b45e3b:         QueueMessageReference ref = queue.getMessage(messageId);
1:1b45e3b:         Message rc = ref.getMessage();
1:323bb23:         if (rc != null) {
1:323bb23:             ActiveMQDestination originalDestination = rc.getOriginalDestination();
1:323bb23:             if (originalDestination != null) {
1:df7cb77:                 ConnectionContext context = BrokerSupport.getConnectionContext(broker.getContextBroker());
1:1b45e3b:                 return queue.moveMessageTo(context, ref, originalDestination);
1:e6f5d30:             }
1:6cd7082:             else {
1:6cd7082:                 throw new JMSException("No original destination for message: "+ messageId);
1:e6f5d30:             }
1:e6f5d30:         }
1:6cd7082:         else {
1:6cd7082:             throw new JMSException("Could not find message: "+ messageId);
1:e6f5d30:         }
1:e6f5d30:     }
1:e6f5d30: 
1:4dde323:     public int cursorSize() {
1:4dde323:         Queue queue = (Queue) destination;
1:4dde323:         if (queue.getMessages() != null){
1:4dde323:             return queue.getMessages().size();
1:bf62dc8:         }
1:4dde323:         return 0;
1:4dde323:     }
1:e6f5d30: 
1:e6f5d30: 
1:4dde323:     public boolean doesCursorHaveMessagesBuffered() {
1:4dde323:        Queue queue = (Queue) destination;
1:4dde323:        if (queue.getMessages() != null){
1:4dde323:            return queue.getMessages().hasMessagesBufferedToDeliver();
1:4dde323:        }
1:4dde323:        return false;
1:468e697: 
1:4dde323:     }
1:e6f5d30: 
1:e6f5d30: 
1:4dde323:     public boolean doesCursorHaveSpace() {
1:4dde323:         Queue queue = (Queue) destination;
1:4dde323:         if (queue.getMessages() != null){
1:4dde323:             return queue.getMessages().hasSpace();
1:4dde323:         }
1:4dde323:         return false;
1:4dde323:     }
1:e6f5d30: 
1:e6f5d30: 
1:4dde323:     public long getCursorMemoryUsage() {
1:4dde323:         Queue queue = (Queue) destination;
1:4dde323:         if (queue.getMessages() != null &&  queue.getMessages().getSystemUsage() != null){
1:4dde323:             return queue.getMessages().getSystemUsage().getMemoryUsage().getUsage();
1:4dde323:         }
1:4dde323:         return 0;
1:4dde323:     }
1:e6f5d30: 
1:4dde323:     public int getCursorPercentUsage() {
1:4dde323:         Queue queue = (Queue) destination;
1:4dde323:         if (queue.getMessages() != null &&  queue.getMessages().getSystemUsage() != null){
1:4dde323:             return queue.getMessages().getSystemUsage().getMemoryUsage().getPercentUsage();
1:4dde323:         }
1:4dde323:         return 0;
1:4dde323:     }
1:e6f5d30: 
1:4dde323:     public boolean isCursorFull() {
1:4dde323:         Queue queue = (Queue) destination;
1:4dde323:         if (queue.getMessages() != null){
1:4dde323:             return queue.getMessages().isFull();
1:4dde323:         }
1:4dde323:         return false;
1:4dde323:     }
1:e6f5d30: 
1:aad7e73:     public boolean isCacheEnabled() {
1:aad7e73:         Queue queue = (Queue) destination;
1:aad7e73:         if (queue.getMessages() != null){
1:aad7e73:             return queue.getMessages().isCacheEnabled();
1:aad7e73:         }
1:aad7e73:         return false;
1:aad7e73:     }
1:e6f5d30: 
1:468e697:     /**
1:468e697:      * @return a Map of groupNames and ConsumerIds
1:468e697:      */
1:468e697:     @Override
1:468e697:     public Map<String, String> getMessageGroups() {
1:468e697:         Queue queue = (Queue) destination;
1:468e697:         return queue.getMessageGroupOwners().getGroups();
1:468e697:     }
1:468e697: 
1:468e697:     /**
1:468e697:      * @return the message group type implementation (simple,bucket,cached)
1:468e697:      */
1:468e697:     @Override
1:468e697:     public String getMessageGroupType() {
1:468e697:         Queue queue = (Queue) destination;
1:468e697:         return queue.getMessageGroupOwners().getType();
1:468e697:     }
1:468e697: 
1:468e697:     /**
1:468e697:      * remove a message group = has the effect of rebalancing group
1:468e697:      */
1:468e697:     @Override
1:468e697:     public void removeMessageGroup(@MBeanInfo("groupName") String groupName) {
1:468e697:         Queue queue = (Queue) destination;
1:468e697:         queue.getMessageGroupOwners().removeGroup(groupName);
1:468e697:     }
1:468e697: 
1:468e697:     /**
1:468e697:      * remove all the message groups - will rebalance all message groups across consumers
1:468e697:      */
1:468e697:     @Override
1:468e697:     public void removeAllMessageGroups() {
1:468e697:         Queue queue = (Queue) destination;
1:468e697:         queue.getMessageGroupOwners().removeAll();
1:468e697:     }
1:85b9c81: 
1:85b9c81:     @Override
1:85b9c81:     public void pause() {
1:85b9c81:         Queue queue = (Queue) destination;
1:85b9c81:         queue.pauseDispatch();
1:85b9c81:     }
1:85b9c81: 
1:85b9c81:     @Override
1:85b9c81:     public void resume() {
1:85b9c81:         Queue queue = (Queue) destination;
1:85b9c81:         queue.resumeDispatch();
1:85b9c81:     }
1:85b9c81: 
1:85b9c81:     @Override
1:85b9c81:     public boolean isPaused() {
1:85b9c81:         Queue queue = (Queue) destination;
1:85b9c81:         return queue.isDispatchPaused();
1:85b9c81:     }
1:4dde323: }
============================================================================
author:gtully
-------------------------------------------------------------------------------
commit:00ee949
/////////////////////////////////////////////////////////////////////////
1:     public synchronized void purge() throws Exception {
commit:acab282
/////////////////////////////////////////////////////////////////////////
1:     public synchronized int removeMatchingMessages(String selector) throws Exception {
1:     public synchronized int removeMatchingMessages(String selector, int maximumMessages) throws Exception {
/////////////////////////////////////////////////////////////////////////
1:     public synchronized int moveMatchingMessagesTo(String selector, String destinationName) throws Exception {
1:     public synchronized int moveMatchingMessagesTo(String selector, String destinationName, int maximumMessages) throws Exception {
1:     public synchronized int retryMessages() throws Exception {
commit:23ecbe8
/////////////////////////////////////////////////////////////////////////
1: import org.slf4j.Logger;
1: import org.slf4j.LoggerFactory;
1:     private static final Logger LOG = LoggerFactory.getLogger(QueueView.class);
1: 
/////////////////////////////////////////////////////////////////////////
1:         final long originalMessageCount = destination.getDestinationStatistics().getMessages().getCount();
1: 
1: 
1:         LOG.info("{} purge of {} messages", destination.getActiveMQDestination().getQualifiedName(), originalMessageCount);
commit:85b9c81
/////////////////////////////////////////////////////////////////////////
1: 
1:     @Override
1:     public void pause() {
1:         Queue queue = (Queue) destination;
1:         queue.pauseDispatch();
1:     }
1: 
1:     @Override
1:     public void resume() {
1:         Queue queue = (Queue) destination;
1:         queue.resumeDispatch();
1:     }
1: 
1:     @Override
1:     public boolean isPaused() {
1:         Queue queue = (Queue) destination;
1:         return queue.isDispatchPaused();
1:     }
author:rajdavies
-------------------------------------------------------------------------------
commit:468e697
/////////////////////////////////////////////////////////////////////////
1: import java.util.Map;
1: 
/////////////////////////////////////////////////////////////////////////
1: 
1:     /**
1:      * @return a Map of groupNames and ConsumerIds
1:      */
1:     @Override
1:     public Map<String, String> getMessageGroups() {
1:         Queue queue = (Queue) destination;
1:         return queue.getMessageGroupOwners().getGroups();
1:     }
1: 
1:     /**
1:      * @return the message group type implementation (simple,bucket,cached)
1:      */
1:     @Override
1:     public String getMessageGroupType() {
1:         Queue queue = (Queue) destination;
1:         return queue.getMessageGroupOwners().getType();
1:     }
1: 
1:     /**
1:      * remove a message group = has the effect of rebalancing group
1:      */
1:     @Override
1:     public void removeMessageGroup(@MBeanInfo("groupName") String groupName) {
1:         Queue queue = (Queue) destination;
1:         queue.getMessageGroupOwners().removeGroup(groupName);
1:     }
1: 
1:     /**
1:      * remove all the message groups - will rebalance all message groups across consumers
1:      */
1:     @Override
1:     public void removeAllMessageGroups() {
1:         Queue queue = (Queue) destination;
1:         queue.getMessageGroupOwners().removeAll();
1:     }
author:Bosanac Dejan
-------------------------------------------------------------------------------
commit:e1f170d
/////////////////////////////////////////////////////////////////////////
0:     public int retryMessages() throws Exception {
1:         ConnectionContext context = BrokerSupport.getConnectionContext(broker.getContextBroker());
1:         return ((Queue)destination).retryMessages(context, Integer.MAX_VALUE);
1:     }
1: 
commit:df7cb77
/////////////////////////////////////////////////////////////////////////
1: import org.apache.activemq.util.BrokerSupport;
/////////////////////////////////////////////////////////////////////////
1:         ConnectionContext context = BrokerSupport.getConnectionContext(broker.getContextBroker());
1:         ConnectionContext context = BrokerSupport.getConnectionContext(broker.getContextBroker());
1:         ConnectionContext context = BrokerSupport.getConnectionContext(broker.getContextBroker());
1:         ConnectionContext context = BrokerSupport.getConnectionContext(broker.getContextBroker());
1:         ConnectionContext context = BrokerSupport.getConnectionContext(broker.getContextBroker());
1:         ConnectionContext context = BrokerSupport.getConnectionContext(broker.getContextBroker());
/////////////////////////////////////////////////////////////////////////
1:                 ConnectionContext context = BrokerSupport.getConnectionContext(broker.getContextBroker());
author:Hiram R. Chirino
-------------------------------------------------------------------------------
commit:58aca86
commit:ecf89a6
/////////////////////////////////////////////////////////////////////////
1:         if (rc == null) {
1:         }
commit:230a86c
/////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////
1:  *      http://www.apache.org/licenses/LICENSE-2.0
/////////////////////////////////////////////////////////////////////////
1: public class QueueView extends DestinationView implements QueueViewMBean {
1:     public QueueView(ManagedRegionBroker broker, Queue destination) {
1:     public CompositeData getMessage(String messageId) throws OpenDataException {
0:         Message rc = ((Queue)destination).getMessage(messageId);
0:         if (rc == null)
0:     public void purge() throws Exception {
1:         ((Queue)destination).purge();
1:     public boolean removeMessage(String messageId) throws Exception {
1:         return ((Queue)destination).removeMessage(messageId);
1:         return ((Queue)destination).removeMatchingMessages(selector);
1: 
1:         return ((Queue)destination).removeMatchingMessages(selector, maximumMessages);
1: 
1:         return ((Queue)destination).copyMessageTo(context, messageId, toDestination);
1:         return ((Queue)destination).copyMatchingMessagesTo(context, selector, toDestination);
1: 
1:         return ((Queue)destination).copyMatchingMessagesTo(context, selector, toDestination, maximumMessages);
1: 
1:         return ((Queue)destination).moveMessageTo(context, messageId, toDestination);
1: 
1:         return ((Queue)destination).moveMatchingMessagesTo(context, selector, toDestination);
1: 
1:         return ((Queue)destination).moveMatchingMessagesTo(context, selector, toDestination, maximumMessages);
commit:7f883f6
/////////////////////////////////////////////////////////////////////////
1:  *
1:  * Licensed to the Apache Software Foundation (ASF) under one or more
1:  * contributor license agreements.  See the NOTICE file distributed with
1:  * this work for additional information regarding copyright ownership.
1:  * The ASF licenses this file to You under the Apache License, Version 2.0
1:  * (the "License"); you may not use this file except in compliance with
1:  * the License.  You may obtain a copy of the License at
1:  *
1:  *
1:  * Unless required by applicable law or agreed to in writing, software
1:  * distributed under the License is distributed on an "AS IS" BASIS,
1:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:  * See the License for the specific language governing permissions and
1:  * limitations under the License.
commit:07d4e8c
/////////////////////////////////////////////////////////////////////////
1: 
1: 
1: /**
1:  * Provides a JMX Management view of a Queue.
1:  */
/////////////////////////////////////////////////////////////////////////
0:     public boolean removeMessage(String messageId){
0:         return ((Queue) destination).removeMessage(messageId);
/////////////////////////////////////////////////////////////////////////
1:     
commit:7f5213b
/////////////////////////////////////////////////////////////////////////
1:     public boolean copyMessageTo(String messageId, String destinationName) throws Exception {
commit:ed5d43b
/////////////////////////////////////////////////////////////////////////
1: import org.apache.activemq.command.ActiveMQDestination;
0:     public QueueView(ManagedRegionBroker broker, Queue destination){
1:         super(broker, destination);
/////////////////////////////////////////////////////////////////////////
1: 
0:     public boolean copyMessageTo(String messageId, String destinationName) throws Throwable {
0:         return ((Queue) destination).copyMessageTo(BrokerView.getConnectionContext(broker.getContextBroker()), messageId, ActiveMQDestination.createDestination(destinationName, ActiveMQDestination.QUEUE_TYPE));
1:     }
commit:28ca751
/////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////
commit:e6f5d30
/////////////////////////////////////////////////////////////////////////
1: /**
0:  *
0:  * Copyright 2005-2006 The Apache Software Foundation
0:  *
0:  * Licensed under the Apache License, Version 2.0 (the "License");
0:  * you may not use this file except in compliance with the License.
0:  * You may obtain a copy of the License at
0:  *
0:  * http://www.apache.org/licenses/LICENSE-2.0
0:  *
0:  * Unless required by applicable law or agreed to in writing, software
0:  * distributed under the License is distributed on an "AS IS" BASIS,
0:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
0:  * See the License for the specific language governing permissions and
0:  * limitations under the License.
1:  */
1: package org.apache.activemq.broker.jmx;
1: 
1: import javax.management.openmbean.CompositeData;
0: import javax.management.openmbean.CompositeDataSupport;
0: import javax.management.openmbean.CompositeType;
1: import javax.management.openmbean.OpenDataException;
0: import javax.management.openmbean.TabularData;
0: import javax.management.openmbean.TabularDataSupport;
0: import javax.management.openmbean.TabularType;
1: 
0: import org.apache.activemq.broker.jmx.OpenTypeSupport.OpenTypeFactory;
1: import org.apache.activemq.broker.region.Queue;
0: import org.apache.activemq.command.ActiveMQMessage;
1: import org.apache.activemq.command.Message;
1: 
0: public class QueueView implements QueueViewMBean {
1: 
0:     private final Queue destination;
1: 
0:     public QueueView(Queue destination) {
0:         this.destination = destination;
1:     }
1: 
0:     public void gc() {
0:         destination.gc();
1:     }
0:     public void resetStatistics() {
0:         destination.getDestinationStatistics().reset();
1:     }
1: 
0:     public long getEnqueueCount() {
0:         return destination.getDestinationStatistics().getEnqueues().getCount();
1:     
1:     }
0:     public long getDequeueCount() {
0:         return destination.getDestinationStatistics().getDequeues().getCount();
1:     }
1: 
0:     public long getConsumerCount() {
0:         return destination.getDestinationStatistics().getConsumers().getCount();
1:     }
1:     
0:     public long getMessages() {
0:         return destination.getDestinationStatistics().getMessages().getCount();
1:     }
1:     
0:     public long getMessagesCached() {
0:         return destination.getDestinationStatistics().getMessagesCached().getCount();
1:     }
1:     
0:     public CompositeData[] browse() throws OpenDataException {
0:         Message[] messages = destination.browse();
0:         CompositeData c[] = new CompositeData[messages.length];
0:         for (int i = 0; i < c.length; i++) {
0:             try {
0:                 System.out.println(messages[i].getMessageId());
0:                 c[i] = OpenTypeSupport.convert(messages[i]);
0:             } catch (Throwable e) {
0:                 // TODO Auto-generated catch block
0:                 e.printStackTrace();
1:             }
1:         }
0:         return c;
1:     }
1:     
0:     public TabularData browseAsTable() throws OpenDataException {
0:         OpenTypeFactory factory = OpenTypeSupport.getFactory(ActiveMQMessage.class);
1:         
0:         Message[] messages = destination.browse();
0:         CompositeType ct = factory.getCompositeType();
0:         TabularType tt = new TabularType("MessageList", "MessageList", ct, new String[]{"JMSMessageID"});
0:         TabularDataSupport rc = new TabularDataSupport(tt);
0:         for (int i = 0; i < messages.length; i++) {
0:             System.out.println(messages[i].getMessageId());
0:             rc.put(new CompositeDataSupport(ct, factory.getFields(messages[i])));
1:         }
1:         
0:         return rc;
1:     }
1: 
1:     
0:     public CompositeData getMessage(String messageId) throws OpenDataException {
0:         Message rc = destination.getMessage(messageId);
0:         if( rc ==null )
1:             return null;
0:         return OpenTypeSupport.convert(rc);
1:     }
1:     
0:     public void removeMessage(String messageId) {
0:         destination.removeMessage(messageId);
1:     }
1: 
0:     public void purge() {
0:         destination.purge();
1:     }
1:     
1: }
author:Timothy A. Bish
-------------------------------------------------------------------------------
commit:bf62dc8
/////////////////////////////////////////////////////////////////////////
1:     	CompositeData result = null;
1:     	QueueMessageReference ref = ((Queue)destination).getMessage(messageId);
0: 
1:         if (ref != null) {
1: 	        Message rc = ref.getMessage();
0: 	        if (rc == null) {
0: 	            return null;
1: 	        }
1: 	        result = OpenTypeSupport.convert(rc);
0: 
1:         return result;
/////////////////////////////////////////////////////////////////////////
0: 
/////////////////////////////////////////////////////////////////////////
0: 
/////////////////////////////////////////////////////////////////////////
0: 
/////////////////////////////////////////////////////////////////////////
0: 
author:Gary Tully
-------------------------------------------------------------------------------
commit:1b45e3b
/////////////////////////////////////////////////////////////////////////
1: import org.apache.activemq.broker.region.QueueMessageReference;
/////////////////////////////////////////////////////////////////////////
0:         QueueMessageReference ref = ((Queue)destination).getMessage(messageId);
1:         Message rc = ref.getMessage();
/////////////////////////////////////////////////////////////////////////
1:         QueueMessageReference ref = queue.getMessage(messageId);
0:         Message rc = ref.getMessage();
1:                 return queue.moveMessageTo(context, ref, originalDestination);
commit:aad7e73
/////////////////////////////////////////////////////////////////////////
0: 
1:     public boolean isCacheEnabled() {
1:         Queue queue = (Queue) destination;
1:         if (queue.getMessages() != null){
1:             return queue.getMessages().isCacheEnabled();
1:         }
1:         return false;
1:     }
author:Robert Davies
-------------------------------------------------------------------------------
commit:e8a7451
/////////////////////////////////////////////////////////////////////////
0:             rc = rc.copy();
0:             rc.getMessage().setRedeliveryCounter(0);
0:                 return queue.moveMessageTo(context, rc, originalDestination);
commit:4dde323
/////////////////////////////////////////////////////////////////////////
0:     
1:     public int cursorSize() {
1:         Queue queue = (Queue) destination;
1:         if (queue.getMessages() != null){
1:             return queue.getMessages().size();
1:         }
1:         return 0;
1:     }
0: 
0:    
1:     public boolean doesCursorHaveMessagesBuffered() {
1:        Queue queue = (Queue) destination;
1:        if (queue.getMessages() != null){
1:            return queue.getMessages().hasMessagesBufferedToDeliver();
1:        }
1:        return false;
0: 
1:     }
0: 
0:     
1:     public boolean doesCursorHaveSpace() {
1:         Queue queue = (Queue) destination;
1:         if (queue.getMessages() != null){
1:             return queue.getMessages().hasSpace();
1:         }
1:         return false;
1:     }
0: 
0:     
1:     public long getCursorMemoryUsage() {
1:         Queue queue = (Queue) destination;
1:         if (queue.getMessages() != null &&  queue.getMessages().getSystemUsage() != null){
1:             return queue.getMessages().getSystemUsage().getMemoryUsage().getUsage();
1:         }
1:         return 0;
1:     }
0: 
1:     public int getCursorPercentUsage() {
1:         Queue queue = (Queue) destination;
1:         if (queue.getMessages() != null &&  queue.getMessages().getSystemUsage() != null){
1:             return queue.getMessages().getSystemUsage().getMemoryUsage().getPercentUsage();
1:         }
1:         return 0;
1:     }
0: 
1:     public boolean isCursorFull() {
1:         Queue queue = (Queue) destination;
1:         if (queue.getMessages() != null){
1:             return queue.getMessages().isFull();
1:         }
1:         return false;
1:     }
commit:b376ce2
/////////////////////////////////////////////////////////////////////////
0:     public void purge() throws Exception{
commit:2748ae1
/////////////////////////////////////////////////////////////////////////
0:  * 
0:  * 
0:  * Licensed under the Apache License, Version 2.0 (the "License"); you may not use this file except in compliance with
0:  * the License. You may obtain a copy of the License at
0:  * 
0:  * 
0:  * Unless required by applicable law or agreed to in writing, software distributed under the License is distributed on
0:  * an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the License for the
0:  * specific language governing permissions and limitations under the License.
0: public class QueueView extends DestinationView implements QueueViewMBean{
0:     public QueueView(Queue destination){
0:         super(destination);
0:     public CompositeData getMessage(String messageId) throws OpenDataException{
0:         Message rc=((Queue) destination).getMessage(messageId);
0:         if(rc==null)
0: 
0:     public void removeMessage(String messageId){
0:         ((Queue) destination).removeMessage(messageId);
0:     public void purge(){
0:         ((Queue) destination).purge();
author:James Strachan
-------------------------------------------------------------------------------
commit:6cd7082
/////////////////////////////////////////////////////////////////////////
1: import javax.jms.JMSException;
/////////////////////////////////////////////////////////////////////////
1:             else {
1:                 throw new JMSException("No original destination for message: "+ messageId);
0:             }
1:         else {
1:             throw new JMSException("Could not find message: "+ messageId);
0:         }
commit:323bb23
/////////////////////////////////////////////////////////////////////////
1:     /**
1:      * Moves a message back to its original destination
1:      */
1:     public boolean retryMessage(String messageId) throws Exception {
1:         Queue queue = (Queue) destination;
0:         Message rc = queue.getMessage(messageId);
1:         if (rc != null) {
1:             ActiveMQDestination originalDestination = rc.getOriginalDestination();
1:             if (originalDestination != null) {
0:                 ConnectionContext context = BrokerView.getConnectionContext(broker.getContextBroker());
0:                 return queue.moveMessageTo(context, messageId, originalDestination);
0:             }
0:         }
0:         return false;
0:     }
commit:9479de7
/////////////////////////////////////////////////////////////////////////
1: import org.apache.activemq.broker.ConnectionContext;
/////////////////////////////////////////////////////////////////////////
0:     public boolean removeMessage(String messageId) throws Exception{
0:         return ((Queue) destination).removeMessage(messageId);
0:     }
0: 
0:     public int removeMatchingMessages(String selector) throws Exception {
0:         return ((Queue) destination).removeMatchingMessages(selector);
0:     public int removeMatchingMessages(String selector, int maximumMessages) throws Exception {
0:         return ((Queue) destination).removeMatchingMessages(selector, maximumMessages);
0:     }
0:     
0:     public boolean copyMessageTo(String messageId, String destinationName) throws Exception {
0:         ConnectionContext context = BrokerView.getConnectionContext(broker.getContextBroker());
1:         ActiveMQDestination toDestination = ActiveMQDestination.createDestination(destinationName, ActiveMQDestination.QUEUE_TYPE);
0:         return ((Queue) destination).copyMessageTo(context, messageId, toDestination);
0:     }
0: 
1:     public int copyMatchingMessagesTo(String selector, String destinationName) throws Exception {
0:         ConnectionContext context = BrokerView.getConnectionContext(broker.getContextBroker());
1:         ActiveMQDestination toDestination = ActiveMQDestination.createDestination(destinationName, ActiveMQDestination.QUEUE_TYPE);
0:         return ((Queue) destination).copyMatchingMessagesTo(context, selector, toDestination);
0:     }
0:     
1:     public int copyMatchingMessagesTo(String selector, String destinationName, int maximumMessages) throws Exception {
0:         ConnectionContext context = BrokerView.getConnectionContext(broker.getContextBroker());
1:         ActiveMQDestination toDestination = ActiveMQDestination.createDestination(destinationName, ActiveMQDestination.QUEUE_TYPE);
0:         return ((Queue) destination).copyMatchingMessagesTo(context, selector, toDestination, maximumMessages);
0:     }
0:     
1:     public boolean moveMessageTo(String messageId, String destinationName) throws Exception {
0:         ConnectionContext context = BrokerView.getConnectionContext(broker.getContextBroker());
1:         ActiveMQDestination toDestination = ActiveMQDestination.createDestination(destinationName, ActiveMQDestination.QUEUE_TYPE);
0:         return ((Queue) destination).moveMessageTo(context, messageId, toDestination);
0:     }
0:     
0:     public int moveMatchingMessagesTo(String selector, String destinationName) throws Exception {
0:         ConnectionContext context = BrokerView.getConnectionContext(broker.getContextBroker());
1:         ActiveMQDestination toDestination = ActiveMQDestination.createDestination(destinationName, ActiveMQDestination.QUEUE_TYPE);
0:         return ((Queue) destination).moveMatchingMessagesTo(context, selector, toDestination);
0:     }
0:     
0:     public int moveMatchingMessagesTo(String selector, String destinationName, int maximumMessages) throws Exception {
0:         ConnectionContext context = BrokerView.getConnectionContext(broker.getContextBroker());
1:         ActiveMQDestination toDestination = ActiveMQDestination.createDestination(destinationName, ActiveMQDestination.QUEUE_TYPE);
0:         return ((Queue) destination).moveMatchingMessagesTo(context, selector, toDestination, maximumMessages);
0:     }
0: 
============================================================================