1:2528015: /**
1:2528015:  * Licensed to the Apache Software Foundation (ASF) under one or more
1:2528015:  * contributor license agreements. See the NOTICE file distributed with this
1:2528015:  * work for additional information regarding copyright ownership. The ASF
1:2528015:  * licenses this file to you under the Apache License, Version 2.0 (the
1:2528015:  * "License"); you may not use this file except in compliance with the License.
1:2528015:  * You may obtain a copy of the License at
1:2528015:  *
1:2528015:  * http://www.apache.org/licenses/LICENSE-2.0
1:2528015:  *
1:2528015:  * Unless required by applicable law or agreed to in writing, software
1:2528015:  * distributed under the License is distributed on an "AS IS" BASIS, WITHOUT
1:2528015:  * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the
1:2528015:  * License for the specific language governing permissions and limitations under
1:2528015:  * the License.
2:2528015:  */
1:2528015: package org.apache.activemq.transport.https;
22:2528015: 
1:2528015: 
1:2528015: /**
1:2528015:  * Extend Jetty's {@link SslSocketConnector} to optionally also provide
1:e778467:  * Kerberos5ized SSL sockets. The only change in behavior from superclass is
1:e778467:  * that we no longer honor requests to turn off NeedAuthentication when running
1:e778467:  * with Kerberos support.
1:2528015:  */
1:f44c3d2: public class Krb5AndCertsSslSocketConnector {
1:f44c3d2: //
1:f44c3d2: //extends SslSocketConnector {
1:f44c3d2: //    public static final List<String> KRB5_CIPHER_SUITES = Collections.unmodifiableList(Collections.singletonList("TLS_KRB5_WITH_3DES_EDE_CBC_SHA"));
1:f44c3d2: //    static {
1:f44c3d2: //        System.setProperty("https.cipherSuites", KRB5_CIPHER_SUITES.get(0));
1:f44c3d2: //    }
1:f44c3d2: //
1:f44c3d2: //    private static final Logger LOG = LoggerFactory.getLogger(Krb5AndCertsSslSocketConnector.class);
1:f44c3d2: //
1:f44c3d2: //    private static final String REMOTE_PRINCIPAL = "remote_principal";
1:f44c3d2: //
1:f44c3d2: //    public enum MODE {
1:f44c3d2: //        KRB, CERTS, BOTH
1:f44c3d2: //    } // Support Kerberos, certificates or both?
1:f44c3d2: //
1:f44c3d2: //    private boolean useKrb;
1:f44c3d2: //    private boolean useCerts;
1:f44c3d2: //
1:f44c3d2: //    public Krb5AndCertsSslSocketConnector() {
1:f44c3d2: //        // By default, stick to cert based authentication
1:f44c3d2: //        super();
1:f44c3d2: //        useKrb = false;
1:f44c3d2: //        useCerts = true;
1:f44c3d2: //        setPasswords();
1:f44c3d2: //    }
1:f44c3d2: //    public Krb5AndCertsSslSocketConnector(SslContextFactory f, String auth) {
1:f44c3d2: //        // By default, stick to cert based authentication
1:f44c3d2: //        super(f);
1:f44c3d2: //        useKrb = false;
1:f44c3d2: //        useCerts = true;
1:f44c3d2: //        setPasswords();
1:f44c3d2: //        setMode(auth);
1:f44c3d2: //    }
1:f44c3d2: //
1:f44c3d2: //    public static boolean isKrb(String mode) {
1:f44c3d2: //        return mode == MODE.KRB.toString() || mode == MODE.BOTH.toString();
1:f44c3d2: //    }
1:f44c3d2: //
1:f44c3d2: //    public void setMode(String mode) {
1:f44c3d2: //        useKrb = mode == MODE.KRB.toString() || mode == MODE.BOTH.toString();
1:f44c3d2: //        useCerts = mode == MODE.CERTS.toString() || mode == MODE.BOTH.toString();
1:f44c3d2: //        logIfDebug("useKerb = " + useKrb + ", useCerts = " + useCerts);
1:f44c3d2: //    }
1:f44c3d2: //
1:f44c3d2: //    // If not using Certs, set passwords to random gibberish or else
1:f44c3d2: //    // Jetty will actually prompt the user for some.
1:f44c3d2: //    private void setPasswords() {
1:f44c3d2: //        if (!useCerts) {
1:f44c3d2: //            Random r = new Random();
1:f44c3d2: //            System.setProperty("jetty.ssl.password", String.valueOf(r.nextLong()));
1:f44c3d2: //            System.setProperty("jetty.ssl.keypassword", String.valueOf(r.nextLong()));
1:f44c3d2: //        }
1:f44c3d2: //    }
1:f44c3d2: //
1:f44c3d2: //    @Override
1:f44c3d2: //    public SslContextFactory getSslContextFactory() {
1:f44c3d2: //        final SslContextFactory factory = super.getSslContextFactory();
1:f44c3d2: //
1:f44c3d2: //        if (useCerts) {
1:f44c3d2: //            return factory;
1:f44c3d2: //        }
1:f44c3d2: //
1:f44c3d2: //        try {
1:f44c3d2: //            SSLContext context = factory.getProvider() == null ? SSLContext.getInstance(factory.getProtocol()) : SSLContext.getInstance(factory.getProtocol(),
1:f44c3d2: //                factory.getProvider());
1:f44c3d2: //            context.init(null, null, null);
1:f44c3d2: //            factory.setSslContext(context);
1:f44c3d2: //        } catch (NoSuchAlgorithmException e) {
1:f44c3d2: //        } catch (NoSuchProviderException e) {
1:f44c3d2: //        } catch (KeyManagementException e) {
1:f44c3d2: //        }
1:f44c3d2: //
1:f44c3d2: //        return factory;
1:f44c3d2: //    }
1:f44c3d2: //
1:f44c3d2: //    /*
1:f44c3d2: //     * (non-Javadoc)
1:f44c3d2: //     *
1:f44c3d2: //     * @see
1:f44c3d2: //     * org.mortbay.jetty.security.SslSocketConnector#newServerSocket(java.lang
1:f44c3d2: //     * .String, int, int)
1:f44c3d2: //     */
1:f44c3d2: //    @Override
1:f44c3d2: //    protected ServerSocket newServerSocket(String host, int port, int backlog) throws IOException {
1:f44c3d2: //        logIfDebug("Creating new KrbServerSocket for: " + host);
1:f44c3d2: //        SSLServerSocket ss = null;
1:f44c3d2: //
1:f44c3d2: //        if (useCerts) // Get the server socket from the SSL super impl
1:f44c3d2: //            ss = (SSLServerSocket) super.newServerSocket(host, port, backlog);
1:f44c3d2: //        else { // Create a default server socket
1:f44c3d2: //            try {
1:f44c3d2: //                ss = (SSLServerSocket) super.newServerSocket(host, port, backlog);
1:f44c3d2: //            } catch (Exception e) {
1:f44c3d2: //                LOG.warn("Could not create KRB5 Listener", e);
1:f44c3d2: //                throw new IOException("Could not create KRB5 Listener: " + e.toString());
1:f44c3d2: //            }
1:f44c3d2: //        }
1:f44c3d2: //
1:f44c3d2: //        // Add Kerberos ciphers to this socket server if needed.
1:f44c3d2: //        if (useKrb) {
1:f44c3d2: //            ss.setNeedClientAuth(true);
1:f44c3d2: //            String[] combined;
1:f44c3d2: //            if (useCerts) { // combine the cipher suites
1:f44c3d2: //                String[] certs = ss.getEnabledCipherSuites();
1:f44c3d2: //                combined = new String[certs.length + KRB5_CIPHER_SUITES.size()];
1:f44c3d2: //                System.arraycopy(certs, 0, combined, 0, certs.length);
1:f44c3d2: //                System.arraycopy(KRB5_CIPHER_SUITES.toArray(new String[0]), 0, combined, certs.length, KRB5_CIPHER_SUITES.size());
1:f44c3d2: //            } else { // Just enable Kerberos auth
1:f44c3d2: //                combined = KRB5_CIPHER_SUITES.toArray(new String[0]);
1:f44c3d2: //            }
1:f44c3d2: //
1:f44c3d2: //            ss.setEnabledCipherSuites(combined);
1:f44c3d2: //        }
1:f44c3d2: //        return ss;
1:f44c3d2: //    };
1:f44c3d2: //
1:f44c3d2: //    @Override
1:f44c3d2: //    public void customize(EndPoint endpoint, Request request) throws IOException {
1:f44c3d2: //        if (useKrb) { // Add Kerberos-specific info
1:f44c3d2: //            SSLSocket sslSocket = (SSLSocket) endpoint.getTransport();
1:f44c3d2: //            Principal remotePrincipal = sslSocket.getSession().getPeerPrincipal();
1:f44c3d2: //            logIfDebug("Remote principal = " + remotePrincipal);
1:f44c3d2: //            request.setScheme(HttpSchemes.HTTPS);
1:f44c3d2: //            request.setAttribute(REMOTE_PRINCIPAL, remotePrincipal);
1:f44c3d2: //
1:f44c3d2: //            if (!useCerts) { // Add extra info that would have been added by
1:f44c3d2: //                             // super
1:f44c3d2: //                String cipherSuite = sslSocket.getSession().getCipherSuite();
1:f44c3d2: //                Integer keySize = Integer.valueOf(ServletSSL.deduceKeyLength(cipherSuite));
1:f44c3d2: //                ;
1:f44c3d2: //
1:f44c3d2: //                request.setAttribute("javax.servlet.request.cipher_suite", cipherSuite);
1:f44c3d2: //                request.setAttribute("javax.servlet.request.key_size", keySize);
1:f44c3d2: //            }
1:f44c3d2: //        }
1:f44c3d2: //
1:f44c3d2: //        if (useCerts)
1:f44c3d2: //            super.customize(endpoint, request);
1:f44c3d2: //    }
1:f44c3d2: //
1:f44c3d2: //    private void logIfDebug(String s) {
1:f44c3d2: //        if (LOG.isDebugEnabled())
1:f44c3d2: //            LOG.debug(s);
1:f44c3d2: //    }
1:3f82625: }
============================================================================
author:Christopher L. Shannon (cshannon)
-------------------------------------------------------------------------------
commit:f44c3d2
/////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////
1: public class Krb5AndCertsSslSocketConnector {
1: //
1: //extends SslSocketConnector {
1: //    public static final List<String> KRB5_CIPHER_SUITES = Collections.unmodifiableList(Collections.singletonList("TLS_KRB5_WITH_3DES_EDE_CBC_SHA"));
1: //    static {
1: //        System.setProperty("https.cipherSuites", KRB5_CIPHER_SUITES.get(0));
1: //    }
1: //
1: //    private static final Logger LOG = LoggerFactory.getLogger(Krb5AndCertsSslSocketConnector.class);
1: //
1: //    private static final String REMOTE_PRINCIPAL = "remote_principal";
1: //
1: //    public enum MODE {
1: //        KRB, CERTS, BOTH
1: //    } // Support Kerberos, certificates or both?
1: //
1: //    private boolean useKrb;
1: //    private boolean useCerts;
1: //
1: //    public Krb5AndCertsSslSocketConnector() {
1: //        // By default, stick to cert based authentication
1: //        super();
1: //        useKrb = false;
1: //        useCerts = true;
1: //        setPasswords();
1: //    }
1: //    public Krb5AndCertsSslSocketConnector(SslContextFactory f, String auth) {
1: //        // By default, stick to cert based authentication
1: //        super(f);
1: //        useKrb = false;
1: //        useCerts = true;
1: //        setPasswords();
1: //        setMode(auth);
1: //    }
1: //
1: //    public static boolean isKrb(String mode) {
1: //        return mode == MODE.KRB.toString() || mode == MODE.BOTH.toString();
1: //    }
1: //
1: //    public void setMode(String mode) {
1: //        useKrb = mode == MODE.KRB.toString() || mode == MODE.BOTH.toString();
1: //        useCerts = mode == MODE.CERTS.toString() || mode == MODE.BOTH.toString();
1: //        logIfDebug("useKerb = " + useKrb + ", useCerts = " + useCerts);
1: //    }
1: //
1: //    // If not using Certs, set passwords to random gibberish or else
1: //    // Jetty will actually prompt the user for some.
1: //    private void setPasswords() {
1: //        if (!useCerts) {
1: //            Random r = new Random();
1: //            System.setProperty("jetty.ssl.password", String.valueOf(r.nextLong()));
1: //            System.setProperty("jetty.ssl.keypassword", String.valueOf(r.nextLong()));
1: //        }
1: //    }
1: //
1: //    @Override
1: //    public SslContextFactory getSslContextFactory() {
1: //        final SslContextFactory factory = super.getSslContextFactory();
1: //
1: //        if (useCerts) {
1: //            return factory;
1: //        }
1: //
1: //        try {
1: //            SSLContext context = factory.getProvider() == null ? SSLContext.getInstance(factory.getProtocol()) : SSLContext.getInstance(factory.getProtocol(),
1: //                factory.getProvider());
1: //            context.init(null, null, null);
1: //            factory.setSslContext(context);
1: //        } catch (NoSuchAlgorithmException e) {
1: //        } catch (NoSuchProviderException e) {
1: //        } catch (KeyManagementException e) {
1: //        }
1: //
1: //        return factory;
1: //    }
1: //
1: //    /*
1: //     * (non-Javadoc)
1: //     *
1: //     * @see
1: //     * org.mortbay.jetty.security.SslSocketConnector#newServerSocket(java.lang
1: //     * .String, int, int)
1: //     */
1: //    @Override
1: //    protected ServerSocket newServerSocket(String host, int port, int backlog) throws IOException {
1: //        logIfDebug("Creating new KrbServerSocket for: " + host);
1: //        SSLServerSocket ss = null;
1: //
1: //        if (useCerts) // Get the server socket from the SSL super impl
1: //            ss = (SSLServerSocket) super.newServerSocket(host, port, backlog);
1: //        else { // Create a default server socket
1: //            try {
1: //                ss = (SSLServerSocket) super.newServerSocket(host, port, backlog);
1: //            } catch (Exception e) {
1: //                LOG.warn("Could not create KRB5 Listener", e);
1: //                throw new IOException("Could not create KRB5 Listener: " + e.toString());
1: //            }
1: //        }
1: //
1: //        // Add Kerberos ciphers to this socket server if needed.
1: //        if (useKrb) {
1: //            ss.setNeedClientAuth(true);
1: //            String[] combined;
1: //            if (useCerts) { // combine the cipher suites
1: //                String[] certs = ss.getEnabledCipherSuites();
1: //                combined = new String[certs.length + KRB5_CIPHER_SUITES.size()];
1: //                System.arraycopy(certs, 0, combined, 0, certs.length);
1: //                System.arraycopy(KRB5_CIPHER_SUITES.toArray(new String[0]), 0, combined, certs.length, KRB5_CIPHER_SUITES.size());
1: //            } else { // Just enable Kerberos auth
1: //                combined = KRB5_CIPHER_SUITES.toArray(new String[0]);
1: //            }
1: //
1: //            ss.setEnabledCipherSuites(combined);
1: //        }
1: //        return ss;
1: //    };
1: //
1: //    @Override
1: //    public void customize(EndPoint endpoint, Request request) throws IOException {
1: //        if (useKrb) { // Add Kerberos-specific info
1: //            SSLSocket sslSocket = (SSLSocket) endpoint.getTransport();
1: //            Principal remotePrincipal = sslSocket.getSession().getPeerPrincipal();
1: //            logIfDebug("Remote principal = " + remotePrincipal);
1: //            request.setScheme(HttpSchemes.HTTPS);
1: //            request.setAttribute(REMOTE_PRINCIPAL, remotePrincipal);
1: //
1: //            if (!useCerts) { // Add extra info that would have been added by
1: //                             // super
1: //                String cipherSuite = sslSocket.getSession().getCipherSuite();
1: //                Integer keySize = Integer.valueOf(ServletSSL.deduceKeyLength(cipherSuite));
1: //                ;
1: //
1: //                request.setAttribute("javax.servlet.request.cipher_suite", cipherSuite);
1: //                request.setAttribute("javax.servlet.request.key_size", keySize);
1: //            }
1: //        }
1: //
1: //        if (useCerts)
1: //            super.customize(endpoint, request);
1: //    }
1: //
1: //    private void logIfDebug(String s) {
1: //        if (LOG.isDebugEnabled())
1: //            LOG.debug(s);
1: //    }
author:Daniel Kulp
-------------------------------------------------------------------------------
commit:3f82625
/////////////////////////////////////////////////////////////////////////
0:     public Krb5AndCertsSslSocketConnector(SslContextFactory f, String auth) {
0:         // By default, stick to cert based authentication
0:         super(f);
0:         useKrb = false;
0:         useCerts = true;
0:         setPasswords();
0:         setMode(auth);
1:     }
author:Hiram R. Chirino
-------------------------------------------------------------------------------
commit:9a1ad8c
commit:2528015
/////////////////////////////////////////////////////////////////////////
1: /**
1:  * Licensed to the Apache Software Foundation (ASF) under one or more
1:  * contributor license agreements. See the NOTICE file distributed with this
1:  * work for additional information regarding copyright ownership. The ASF
1:  * licenses this file to you under the Apache License, Version 2.0 (the
1:  * "License"); you may not use this file except in compliance with the License.
1:  * You may obtain a copy of the License at
1:  * 
1:  * http://www.apache.org/licenses/LICENSE-2.0
1:  * 
1:  * Unless required by applicable law or agreed to in writing, software
1:  * distributed under the License is distributed on an "AS IS" BASIS, WITHOUT
1:  * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the
1:  * License for the specific language governing permissions and limitations under
1:  * the License.
1:  */
1: package org.apache.activemq.transport.https;
1: 
0: import java.io.IOException;
0: import java.net.InetAddress;
0: import java.net.ServerSocket;
0: import java.security.Principal;
0: import java.util.List;
0: import java.util.Collections;
0: import java.util.Random;
1: 
0: import javax.net.ssl.SSLContext;
0: import javax.net.ssl.SSLServerSocket;
0: import javax.net.ssl.SSLServerSocketFactory;
0: import javax.net.ssl.SSLSocket;
1: 
0: import org.slf4j.Logger;
0: import org.slf4j.LoggerFactory;
0: import org.eclipse.jetty.http.HttpSchemes;
0: import org.eclipse.jetty.io.EndPoint;
0: import org.eclipse.jetty.server.Request;
0: import org.eclipse.jetty.server.ssl.ServletSSL;
0: import org.eclipse.jetty.server.ssl.SslSocketConnector;
1: 
1: /**
1:  * Extend Jetty's {@link SslSocketConnector} to optionally also provide 
0:  * Kerberos5ized SSL sockets.  The only change in behavior from superclass
0:  * is that we no longer honor requests to turn off NeedAuthentication when
0:  * running with Kerberos support.
1:  */
0: public class Krb5AndCertsSslSocketConnector extends SslSocketConnector {
0:   public static final List<String> KRB5_CIPHER_SUITES = 
0:     Collections.unmodifiableList(Collections.singletonList(
0:           "TLS_KRB5_WITH_3DES_EDE_CBC_SHA"));
0:   static {
0:     System.setProperty("https.cipherSuites", KRB5_CIPHER_SUITES.get(0));
0:   }
1:   
0:   private static final Logger LOG = LoggerFactory.getLogger(Krb5AndCertsSslSocketConnector.class);
1: 
0:   private static final String REMOTE_PRINCIPAL = "remote_principal";
1: 
0:   public enum MODE {KRB, CERTS, BOTH} // Support Kerberos, certificates or both?
1: 
0:   private boolean useKrb;
0:   private boolean useCerts;
1: 
0:   public Krb5AndCertsSslSocketConnector() {
0: 	  // By default, stick to cert based authentication
0:     super();
0:     useKrb = false;
0:     useCerts = true;
0:     setPasswords();
0:   }
1:   
0:   public void setMode(String mode) {
0:     useKrb = mode == MODE.KRB.toString() || mode == MODE.BOTH.toString();
0:     useCerts = mode == MODE.CERTS.toString() || mode == MODE.BOTH.toString();
0:     logIfDebug("useKerb = " + useKrb + ", useCerts = " + useCerts);
0:   }
1: 
0:   // If not using Certs, set passwords to random gibberish or else
0:   // Jetty will actually prompt the user for some.
0:   private void setPasswords() {
0:    if(!useCerts) {
0:      Random r = new Random();
0:      System.setProperty("jetty.ssl.password", String.valueOf(r.nextLong()));
0:      System.setProperty("jetty.ssl.keypassword", String.valueOf(r.nextLong()));
0:    }
0:   }
1:   
0:   @Override
0:   protected SSLServerSocketFactory createFactory() throws Exception {
0:     if(useCerts)
0:       return super.createFactory();
1:     
0:     SSLContext context = super.getProvider()==null
0:        ? SSLContext.getInstance(super.getProtocol())
0:         :SSLContext.getInstance(super.getProtocol(), super.getProvider());
0:     context.init(null, null, null);
1:     
0:     System.err.println("Creating socket factory");
0:     return context.getServerSocketFactory();
0:   }
1:   
0:   /* (non-Javadoc)
0:    * @see org.mortbay.jetty.security.SslSocketConnector#newServerSocket(java.lang.String, int, int)
1:    */
0:   @Override
0:   protected ServerSocket newServerSocket(String host, int port, int backlog)
0:       throws IOException {
0: 	  System.err.println("Creating new KrbServerSocket for: " + host);
0:     logIfDebug("Creating new KrbServerSocket for: " + host);
0:     SSLServerSocket ss = null;
1:     
0:     if(useCerts) // Get the server socket from the SSL super impl
0:       ss = (SSLServerSocket)super.newServerSocket(host, port, backlog);
0:     else { // Create a default server socket
0:       try {
0:         ss = (SSLServerSocket)(host == null 
0:          ? createFactory().createServerSocket(port, backlog) :
0:            createFactory().createServerSocket(port, backlog, InetAddress.getByName(host)));
0:       } catch (Exception e)
0:       {
0:         LOG.warn("Could not create KRB5 Listener", e);
0:         throw new IOException("Could not create KRB5 Listener: " + e.toString());
0:       }
0:     }
1:     
0:     // Add Kerberos ciphers to this socket server if needed.
0:     if(useKrb) {
0:       ss.setNeedClientAuth(true);
0:       String [] combined;
0:       if(useCerts) { // combine the cipher suites
0:         String[] certs = ss.getEnabledCipherSuites();
0:         combined = new String[certs.length + KRB5_CIPHER_SUITES.size()];
0:         System.arraycopy(certs, 0, combined, 0, certs.length);
0:         System.arraycopy(KRB5_CIPHER_SUITES.toArray(new String[0]), 0, combined,
0:               certs.length, KRB5_CIPHER_SUITES.size());
0:       } else { // Just enable Kerberos auth
0:         combined = KRB5_CIPHER_SUITES.toArray(new String[0]);
0:       }
1:       
0:       ss.setEnabledCipherSuites(combined);
0:     }
0:     System.err.println("New socket created");
0:     return ss;
0:   };
1: 
0:   @Override
0:   public void customize(EndPoint endpoint, Request request) throws IOException {
0:     if(useKrb) { // Add Kerberos-specific info
0:       SSLSocket sslSocket = (SSLSocket)endpoint.getTransport();
0:       Principal remotePrincipal = sslSocket.getSession().getPeerPrincipal();
0:       logIfDebug("Remote principal = " + remotePrincipal);
0:       request.setScheme(HttpSchemes.HTTPS);
0:       request.setAttribute(REMOTE_PRINCIPAL, remotePrincipal);
1:       
0:       if(!useCerts) { // Add extra info that would have been added by super
0:         String cipherSuite = sslSocket.getSession().getCipherSuite();
0:         Integer keySize = Integer.valueOf(ServletSSL.deduceKeyLength(cipherSuite));;
1:         
0:         request.setAttribute("javax.servlet.request.cipher_suite", cipherSuite);
0:         request.setAttribute("javax.servlet.request.key_size", keySize);
0:       } 
0:     }
1:     
0:     if(useCerts) super.customize(endpoint, request);
0:     System.err.println();
0:   }
1:   
0:   private void logIfDebug(String s) {
0:     if(LOG.isDebugEnabled())
0:       LOG.debug(s);
0:   }
0: }
author:Claus Ibsen
-------------------------------------------------------------------------------
commit:3b4aadc
/////////////////////////////////////////////////////////////////////////
author:Bosanac Dejan
-------------------------------------------------------------------------------
commit:da138e3
/////////////////////////////////////////////////////////////////////////
0:     public static boolean isKrb(String mode) {
0:         return mode == MODE.KRB.toString() || mode == MODE.BOTH.toString();
0:     }
0: 
commit:39da37d
/////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////
author:Timothy A. Bish
-------------------------------------------------------------------------------
commit:46ccaaf
/////////////////////////////////////////////////////////////////////////
0: import java.util.List;
0: import org.eclipse.jetty.util.ssl.SslContextFactory;
0: import org.slf4j.Logger;
0: import org.slf4j.LoggerFactory;
commit:e778467
/////////////////////////////////////////////////////////////////////////
0:  *
0:  *
/////////////////////////////////////////////////////////////////////////
0: import java.security.KeyManagementException;
0: import java.security.NoSuchAlgorithmException;
0: import java.security.NoSuchProviderException;
/////////////////////////////////////////////////////////////////////////
0: import org.eclipse.jetty.http.ssl.SslContextFactory;
0:  * Extend Jetty's {@link SslSocketConnector} to optionally also provide
1:  * Kerberos5ized SSL sockets. The only change in behavior from superclass is
1:  * that we no longer honor requests to turn off NeedAuthentication when running
1:  * with Kerberos support.
0:     public static final List<String> KRB5_CIPHER_SUITES = Collections.unmodifiableList(Collections.singletonList("TLS_KRB5_WITH_3DES_EDE_CBC_SHA"));
0:     static {
0:         System.setProperty("https.cipherSuites", KRB5_CIPHER_SUITES.get(0));
0:     private static final Logger LOG = LoggerFactory.getLogger(Krb5AndCertsSslSocketConnector.class);
0: 
0:     private static final String REMOTE_PRINCIPAL = "remote_principal";
0: 
0:     public enum MODE {
0:         KRB, CERTS, BOTH
0:     } // Support Kerberos, certificates or both?
0: 
0:     private boolean useKrb;
0:     private boolean useCerts;
0: 
0:     public Krb5AndCertsSslSocketConnector() {
0:         // By default, stick to cert based authentication
0:         super();
0:         useKrb = false;
0:         useCerts = true;
0:         setPasswords();
0: 
0:     public void setMode(String mode) {
0:         useKrb = mode == MODE.KRB.toString() || mode == MODE.BOTH.toString();
0:         useCerts = mode == MODE.CERTS.toString() || mode == MODE.BOTH.toString();
0:         logIfDebug("useKerb = " + useKrb + ", useCerts = " + useCerts);
0:     }
0: 
0:     // If not using Certs, set passwords to random gibberish or else
0:     // Jetty will actually prompt the user for some.
0:     private void setPasswords() {
0:         if (!useCerts) {
0:             Random r = new Random();
0:             System.setProperty("jetty.ssl.password", String.valueOf(r.nextLong()));
0:             System.setProperty("jetty.ssl.keypassword", String.valueOf(r.nextLong()));
0:         }
0:     }
0: 
0:     // @Override
0:     // protected SSLServerSocketFactory createFactory() throws Exception {
0:     // if(useCerts)
0:     // return super.createFactory();
0:     //
0:     // SSLContext context = super.getProvider()==null
0:     // ? SSLContext.getInstance(super.getProtocol())
0:     // :SSLContext.getInstance(super.getProtocol(), super.getProvider());
0:     // context.init(null, null, null);
0:     //
0:     // System.err.println("Creating socket factory");
0:     // return context.getServerSocketFactory();
0:     // }
0: 
0:     @Override
0:     public SslContextFactory getSslContextFactory() {
0:         final SslContextFactory factory = super.getSslContextFactory();
0: 
0:         if (useCerts) {
0:             return factory;
0:         }
0: 
0:         try {
0:             SSLContext context = factory.getProvider() == null ? SSLContext.getInstance(factory.getProtocol()) : SSLContext.getInstance(factory.getProtocol(),
0:                 factory.getProvider());
0:             context.init(null, null, null);
0:             factory.setSslContext(context);
0:         } catch (NoSuchAlgorithmException e) {
0:         } catch (NoSuchProviderException e) {
0:         } catch (KeyManagementException e) {
0:         }
0: 
0:         return factory;
0:     }
0: 
0:     /*
0:      * (non-Javadoc)
0:      *
0:      * @see
0:      * org.mortbay.jetty.security.SslSocketConnector#newServerSocket(java.lang
0:      * .String, int, int)
0:      */
0:     @Override
0:     protected ServerSocket newServerSocket(String host, int port, int backlog) throws IOException {
0:         System.err.println("Creating new KrbServerSocket for: " + host);
0:         logIfDebug("Creating new KrbServerSocket for: " + host);
0:         SSLServerSocket ss = null;
0: 
0:         if (useCerts) // Get the server socket from the SSL super impl
0:             ss = (SSLServerSocket) super.newServerSocket(host, port, backlog);
0:         else { // Create a default server socket
0:             try {
0:                 ss = (SSLServerSocket) super.newServerSocket(host, port, backlog);
0:             } catch (Exception e) {
0:                 LOG.warn("Could not create KRB5 Listener", e);
0:                 throw new IOException("Could not create KRB5 Listener: " + e.toString());
0:             }
0:         }
0: 
0:         // Add Kerberos ciphers to this socket server if needed.
0:         if (useKrb) {
0:             ss.setNeedClientAuth(true);
0:             String[] combined;
0:             if (useCerts) { // combine the cipher suites
0:                 String[] certs = ss.getEnabledCipherSuites();
0:                 combined = new String[certs.length + KRB5_CIPHER_SUITES.size()];
0:                 System.arraycopy(certs, 0, combined, 0, certs.length);
0:                 System.arraycopy(KRB5_CIPHER_SUITES.toArray(new String[0]), 0, combined, certs.length, KRB5_CIPHER_SUITES.size());
0:             } else { // Just enable Kerberos auth
0:                 combined = KRB5_CIPHER_SUITES.toArray(new String[0]);
0:             }
0: 
0:             ss.setEnabledCipherSuites(combined);
0:         }
0:         System.err.println("New socket created");
0:         return ss;
0:     };
0: 
0:     @Override
0:     public void customize(EndPoint endpoint, Request request) throws IOException {
0:         if (useKrb) { // Add Kerberos-specific info
0:             SSLSocket sslSocket = (SSLSocket) endpoint.getTransport();
0:             Principal remotePrincipal = sslSocket.getSession().getPeerPrincipal();
0:             logIfDebug("Remote principal = " + remotePrincipal);
0:             request.setScheme(HttpSchemes.HTTPS);
0:             request.setAttribute(REMOTE_PRINCIPAL, remotePrincipal);
0: 
0:             if (!useCerts) { // Add extra info that would have been added by
0:                              // super
0:                 String cipherSuite = sslSocket.getSession().getCipherSuite();
0:                 Integer keySize = Integer.valueOf(ServletSSL.deduceKeyLength(cipherSuite));
0:                 ;
0: 
0:                 request.setAttribute("javax.servlet.request.cipher_suite", cipherSuite);
0:                 request.setAttribute("javax.servlet.request.key_size", keySize);
0:             }
0:         }
0: 
0:         if (useCerts)
0:             super.customize(endpoint, request);
0:         System.err.println();
0:     }
0: 
0:     private void logIfDebug(String s) {
0:         if (LOG.isDebugEnabled())
0:             LOG.debug(s);
0:     }
============================================================================