1:630184a: /**
1:630184a:  * Licensed to the Apache Software Foundation (ASF) under one or more
1:630184a:  * contributor license agreements.  See the NOTICE file distributed with
1:630184a:  * this work for additional information regarding copyright ownership.
1:630184a:  * The ASF licenses this file to You under the Apache License, Version 2.0
1:630184a:  * (the "License"); you may not use this file except in compliance with
1:630184a:  * the License.  You may obtain a copy of the License at
1:630184a:  *
1:630184a:  *      http://www.apache.org/licenses/LICENSE-2.0
1:630184a:  *
1:630184a:  * Unless required by applicable law or agreed to in writing, software
1:630184a:  * distributed under the License is distributed on an "AS IS" BASIS,
1:630184a:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:630184a:  * See the License for the specific language governing permissions and
1:630184a:  * limitations under the License.
1:630184a:  */
1:630184a: package org.apache.activemq.bugs.embedded;
2:630184a: 
1:630184a: import java.io.BufferedReader;
1:630184a: import java.io.InputStreamReader;
1:630184a: import javax.jms.Connection;
1:630184a: import javax.jms.ConnectionFactory;
1:630184a: import javax.jms.Destination;
1:630184a: import javax.jms.Message;
1:630184a: import javax.jms.MessageProducer;
1:630184a: import javax.jms.Session;
1:630184a: import org.apache.activemq.ActiveMQConnectionFactory;
1:630184a: import org.apache.activemq.broker.BrokerService;
1:630184a: import org.apache.log4j.Logger;
1:630184a: 
1:630184a: public class EmbeddedActiveMQ
1:630184a: {
1:630184a:  
1:630184a:         private static Logger logger = Logger.getLogger(EmbeddedActiveMQ.class);
1:630184a:  
1:630184a:         public static void main(String[] args)
1:630184a:         {
1:630184a:  
1:630184a:                 BufferedReader br = new BufferedReader(new InputStreamReader(System.in));
1:630184a:                 BrokerService brokerService = null;
1:1a5ad28:                 Connection connection = null;
1:630184a:  
1:630184a:                 logger.info("Start...");
1:630184a:                 try
1:630184a:                 {
1:630184a:                         brokerService = new BrokerService();
1:630184a:                         brokerService.setBrokerName("TestMQ");
1:630184a:                         brokerService.setUseJmx(true);
1:630184a:                         logger.info("Broker '" + brokerService.getBrokerName() + "' is starting........");
1:630184a:                         brokerService.start();
1:630184a:                         ConnectionFactory fac = new ActiveMQConnectionFactory("vm://TestMQ");
1:1a5ad28:                         connection = fac.createConnection();
1:630184a:                         Session session = connection.createSession(false, Session.AUTO_ACKNOWLEDGE);
1:630184a:                         Destination queue = session.createQueue("TEST.QUEUE");
1:630184a:                         MessageProducer producer = session.createProducer(queue);
1:630184a:                         for (int i = 0; i < 1000;i++) {
1:630184a:                             Message msg = session.createTextMessage("test"+i);
1:630184a:                             producer.send(msg);
1:630184a:                         }
1:630184a:                         logger.info(ThreadExplorer.show("Active threads after start:"));
1:630184a:                         System.out.println("Press return to stop........");
1:630184a:                         String key = br.readLine();
1:630184a:                 }
1:630184a:  
1:630184a:                 catch (Exception e)
1:630184a:                 {
1:630184a:                         e.printStackTrace();
1:630184a:                 }
1:630184a:                 finally
1:630184a:                 {
1:630184a:                         try
1:630184a:                         {
1:630184a:                                 br.close();
1:630184a:                                 logger.info("Broker '" + brokerService.getBrokerName() + "' is stopping........");
1:1a5ad28:                                 connection.close();
1:1a5ad28:                                 brokerService.stop(); 
1:630184a:                                 sleep(8);
1:630184a:                                 logger.info(ThreadExplorer.show("Active threads after stop:"));
1:630184a:  
1:630184a:                         }
1:630184a:                         catch (Exception e)
1:630184a:                         {
1:630184a:                                 e.printStackTrace();
1:630184a:                         }
1:630184a:                 }
1:630184a:  
1:630184a:                 logger.info("Waiting for list theads is greater then 1 ...");
1:630184a:                 int numTh = ThreadExplorer.active();
1:630184a:  
1:1a5ad28:                 while (numTh > 2)
1:630184a:                 {
1:630184a:                         sleep(3);
1:630184a:                         numTh = ThreadExplorer.active();
1:630184a:                         logger.info(ThreadExplorer.show("Still active threads:"));
1:630184a:                 }
1:630184a:  
1:630184a:                 System.out.println("Stop...");
1:630184a:         }
1:630184a:  
1:630184a:         private static void sleep(int second)
1:630184a:         {
1:630184a:                 try
1:630184a:                 {
1:630184a:                         logger.info("Waiting for " + second + "s...");
1:630184a:                         Thread.sleep(second * 1000L);
1:630184a:                 }
1:630184a:                 catch (InterruptedException e)
1:630184a:                 {
1:630184a:                         // TODO Auto-generated catch block
1:630184a:                         e.printStackTrace();
1:630184a:                 }
1:630184a:         }
1:630184a:  
1:630184a: }
============================================================================
author:Timothy A. Bish
-------------------------------------------------------------------------------
commit:ef24cc9
author:Robert Davies
-------------------------------------------------------------------------------
commit:1a5ad28
/////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////
1:                 Connection connection = null;
/////////////////////////////////////////////////////////////////////////
1:                         connection = fac.createConnection();
/////////////////////////////////////////////////////////////////////////
1:                                 connection.close();
1:                                 brokerService.stop(); 
/////////////////////////////////////////////////////////////////////////
1:                 while (numTh > 2)
commit:630184a
/////////////////////////////////////////////////////////////////////////
1: /**
1:  * Licensed to the Apache Software Foundation (ASF) under one or more
1:  * contributor license agreements.  See the NOTICE file distributed with
1:  * this work for additional information regarding copyright ownership.
1:  * The ASF licenses this file to You under the Apache License, Version 2.0
1:  * (the "License"); you may not use this file except in compliance with
1:  * the License.  You may obtain a copy of the License at
1:  *
1:  *      http://www.apache.org/licenses/LICENSE-2.0
1:  *
1:  * Unless required by applicable law or agreed to in writing, software
1:  * distributed under the License is distributed on an "AS IS" BASIS,
1:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:  * See the License for the specific language governing permissions and
1:  * limitations under the License.
1:  */
1: package org.apache.activemq.bugs.embedded;
1: 
1: import java.io.BufferedReader;
1: import java.io.InputStreamReader;
1: import javax.jms.Connection;
1: import javax.jms.ConnectionFactory;
1: import javax.jms.Destination;
1: import javax.jms.Message;
1: import javax.jms.MessageProducer;
1: import javax.jms.Session;
1: import org.apache.activemq.ActiveMQConnectionFactory;
1: import org.apache.activemq.broker.BrokerService;
0: import org.apache.activemq.thread.Scheduler;
1: import org.apache.log4j.Logger;
1: 
1: public class EmbeddedActiveMQ
1: {
1:  
1:         private static Logger logger = Logger.getLogger(EmbeddedActiveMQ.class);
1:  
1:         public static void main(String[] args)
1:         {
1:  
1:                 BufferedReader br = new BufferedReader(new InputStreamReader(System.in));
1:                 BrokerService brokerService = null;
1:  
1:                 logger.info("Start...");
1:                 try
1:                 {
1:                         brokerService = new BrokerService();
1:                         brokerService.setBrokerName("TestMQ");
1:                         brokerService.setUseJmx(true);
1:                         logger.info("Broker '" + brokerService.getBrokerName() + "' is starting........");
1:                         brokerService.start();
1:                         ConnectionFactory fac = new ActiveMQConnectionFactory("vm://TestMQ");
0:                         Connection connection = fac.createConnection();
1:                         Session session = connection.createSession(false, Session.AUTO_ACKNOWLEDGE);
1:                         Destination queue = session.createQueue("TEST.QUEUE");
1:                         MessageProducer producer = session.createProducer(queue);
1:                         for (int i = 0; i < 1000;i++) {
1:                             Message msg = session.createTextMessage("test"+i);
1:                             producer.send(msg);
1:                         }
1:                         logger.info(ThreadExplorer.show("Active threads after start:"));
1:                         System.out.println("Press return to stop........");
1:                         String key = br.readLine();
1:                 }
1:  
1:                 catch (Exception e)
1:                 {
1:                         e.printStackTrace();
1:                 }
1:                 finally
1:                 {
1:                         try
1:                         {
1:                                 br.close();
0:                                 Scheduler scheduler = Scheduler.getInstance();
0:                                 scheduler.shutdown();
1:                                 logger.info("Broker '" + brokerService.getBrokerName() + "' is stopping........");
0:                                 brokerService.stop();
0:                                 Scheduler.getInstance().shutdown();
1:  
1:                                 sleep(8);
1:                                 logger.info(ThreadExplorer.show("Active threads after stop:"));
1:  
1:                         }
1:                         catch (Exception e)
1:                         {
1:                                 e.printStackTrace();
1:                         }
1:                 }
1:  
1:                 logger.info("Waiting for list theads is greater then 1 ...");
1:                 int numTh = ThreadExplorer.active();
1:  
0:                 while (numTh > 1)
1:                 {
1:                         sleep(3);
1:                         numTh = ThreadExplorer.active();
1:                         logger.info(ThreadExplorer.show("Still active threads:"));
1:                 }
1:  
1:                 System.out.println("Stop...");
1:         }
1:  
1:         private static void sleep(int second)
1:         {
1:                 try
1:                 {
1:                         logger.info("Waiting for " + second + "s...");
1:                         Thread.sleep(second * 1000L);
1:                 }
1:                 catch (InterruptedException e)
1:                 {
1:                         // TODO Auto-generated catch block
1:                         e.printStackTrace();
1:                 }
1:         }
1:  
1: }
============================================================================