1:72b8572: /**
1:72b8572:  * Licensed to the Apache Software Foundation (ASF) under one or more
1:72b8572:  * contributor license agreements.  See the NOTICE file distributed with
1:72b8572:  * this work for additional information regarding copyright ownership.
1:72b8572:  * The ASF licenses this file to You under the Apache License, Version 2.0
1:72b8572:  * (the "License"); you may not use this file except in compliance with
1:72b8572:  * the License.  You may obtain a copy of the License at
1:72b8572:  *
1:72b8572:  *      http://www.apache.org/licenses/LICENSE-2.0
1:72b8572:  *
1:72b8572:  * Unless required by applicable law or agreed to in writing, software
1:72b8572:  * distributed under the License is distributed on an "AS IS" BASIS,
1:72b8572:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:72b8572:  * See the License for the specific language governing permissions and
1:72b8572:  * limitations under the License.
1:72b8572:  */
1:72b8572: package org.apache.activemq.spring;
1:72b8572: 
1:b98047e: import org.apache.activemq.util.Wait;
1:8bf987b: import org.slf4j.Logger;
1:8bf987b: import org.slf4j.LoggerFactory;
1:72b8572: import org.junit.Assert;
1:72b8572: import org.junit.Test;
1:72b8572: import org.junit.runner.RunWith;
1:72b8572: import org.springframework.test.annotation.DirtiesContext;
1:72b8572: import org.springframework.test.context.ContextConfiguration;
1:72b8572: import org.springframework.test.context.junit4.SpringJUnit4ClassRunner;
1:72b8572: import org.springframework.test.context.transaction.TransactionConfiguration;
1:72b8572: 
1:72b8572: import javax.annotation.Resource;
1:72b8572: import javax.jms.*;
1:72b8572: 
1:72b8572: @RunWith(SpringJUnit4ClassRunner.class)
1:72b8572: 
1:72b8572: @ContextConfiguration(locations = {"classpath:spring/spring.xml"})
1:72b8572: @TransactionConfiguration(transactionManager = "transactionManager", defaultRollback = false)
1:72b8572: public class ListenerTest {
1:8bf987b:     private static final Logger LOG = LoggerFactory.getLogger(ListenerTest.class);
1:0d47fea: 
1:0d47fea:     int msgNum = 10;
1:72b8572: 
1:72b8572:     protected String bindAddress = "vm://localhost";    
1:72b8572: 
1:72b8572:     @Resource
1:72b8572:     Listener listener;
1:72b8572: 
1:72b8572:     @Test
1:72b8572:     @DirtiesContext
1:72b8572:     public void testSimple() throws Exception {
1:0d47fea:         sendMessages("SIMPLE", msgNum);
1:72b8572: 
2:72b8572:         Thread.sleep(3000);
1:72b8572: 
1:0d47fea:         LOG.info("messages received= " + listener.messages.size());
1:3a2d939:         Assert.assertEquals(msgNum, listener.messages.size());
1:72b8572:     }
1:72b8572: 
1:72b8572: 
1:72b8572:     @Test
1:72b8572:     @DirtiesContext
1:72b8572:     public void testComposite() throws Exception {
1:0d47fea:         sendMessages("TEST.1,TEST.2,TEST.3,TEST.4,TEST.5,TEST.6", msgNum);
1:72b8572: 
1:b98047e:         Wait.waitFor(new Wait.Condition() {
1:b98047e:             public boolean isSatisified() throws Exception {
1:22f8f88:                 return (6 * msgNum) == listener.messages.size();
1:b98047e:             }
1:b98047e:         });
1:72b8572: 
1:0d47fea:         LOG.info("messages received= " + listener.messages.size());
1:3a2d939:         Assert.assertEquals(6 * msgNum, listener.messages.size());
1:72b8572:     }
1:72b8572: 
1:72b8572:     public void sendMessages(String destName, int msgNum) throws Exception {
1:72b8572:         ConnectionFactory factory = new org.apache.activemq.ActiveMQConnectionFactory("tcp://localhost:61616");
1:72b8572:         Connection conn = factory.createConnection();
1:72b8572:         Session sess = conn.createSession(false, Session.AUTO_ACKNOWLEDGE);
1:72b8572:         Destination dest = sess.createQueue(destName);
1:72b8572:         MessageProducer producer = sess.createProducer(dest);
1:72b8572:         for (int i = 0; i < msgNum; i++) {
1:0d47fea:             String messageText = i +" test";
1:0d47fea:             LOG.info("sending message '" + messageText + "'");
1:0d47fea:             producer.send(sess.createTextMessage(messageText));
1:72b8572:         }
1:72b8572:     }
1:72b8572: 
1:72b8572: 
1:72b8572: }
============================================================================
author:gtully
-------------------------------------------------------------------------------
commit:22f8f88
/////////////////////////////////////////////////////////////////////////
1:                 return (6 * msgNum) == listener.messages.size();
author:Gary Tully
-------------------------------------------------------------------------------
commit:b98047e
/////////////////////////////////////////////////////////////////////////
1: import org.apache.activemq.util.Wait;
/////////////////////////////////////////////////////////////////////////
1:         Wait.waitFor(new Wait.Condition() {
1:             public boolean isSatisified() throws Exception {
0:                 return (6 * msgNum) <= listener.messages.size();
1:             }
1:         });
author:Bosanac Dejan
-------------------------------------------------------------------------------
commit:8bf987b
/////////////////////////////////////////////////////////////////////////
1: import org.slf4j.Logger;
1: import org.slf4j.LoggerFactory;
/////////////////////////////////////////////////////////////////////////
1:     private static final Logger LOG = LoggerFactory.getLogger(ListenerTest.class);
commit:3a2d939
/////////////////////////////////////////////////////////////////////////
1:         Assert.assertEquals(msgNum, listener.messages.size());
/////////////////////////////////////////////////////////////////////////
1:         Assert.assertEquals(6 * msgNum, listener.messages.size());
commit:0d47fea
/////////////////////////////////////////////////////////////////////////
0: import org.apache.commons.logging.Log;
0: import org.apache.commons.logging.LogFactory;
/////////////////////////////////////////////////////////////////////////
0:     private static final Log LOG = LogFactory.getLog(ListenerTest.class);
1: 
1:     int msgNum = 10;
/////////////////////////////////////////////////////////////////////////
1:         sendMessages("SIMPLE", msgNum);
1:         LOG.info("messages received= " + listener.messages.size());
0:         Assert.assertEquals(listener.messages.size(), msgNum);
1:         sendMessages("TEST.1,TEST.2,TEST.3,TEST.4,TEST.5,TEST.6", msgNum);
1:         LOG.info("messages received= " + listener.messages.size());
0:         Assert.assertEquals(listener.messages.size(), 6 * msgNum);
/////////////////////////////////////////////////////////////////////////
1:             String messageText = i +" test";
1:             LOG.info("sending message '" + messageText + "'");
1:             producer.send(sess.createTextMessage(messageText));
commit:72b8572
/////////////////////////////////////////////////////////////////////////
1: /**
1:  * Licensed to the Apache Software Foundation (ASF) under one or more
1:  * contributor license agreements.  See the NOTICE file distributed with
1:  * this work for additional information regarding copyright ownership.
1:  * The ASF licenses this file to You under the Apache License, Version 2.0
1:  * (the "License"); you may not use this file except in compliance with
1:  * the License.  You may obtain a copy of the License at
1:  *
1:  *      http://www.apache.org/licenses/LICENSE-2.0
1:  *
1:  * Unless required by applicable law or agreed to in writing, software
1:  * distributed under the License is distributed on an "AS IS" BASIS,
1:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:  * See the License for the specific language governing permissions and
1:  * limitations under the License.
1:  */
1: package org.apache.activemq.spring;
1: 
1: import org.junit.Assert;
1: import org.junit.Test;
1: import org.junit.runner.RunWith;
1: import org.springframework.test.annotation.DirtiesContext;
1: import org.springframework.test.context.ContextConfiguration;
1: import org.springframework.test.context.junit4.SpringJUnit4ClassRunner;
1: import org.springframework.test.context.transaction.TransactionConfiguration;
1: 
1: import javax.annotation.Resource;
1: import javax.jms.*;
1: 
1: @RunWith(SpringJUnit4ClassRunner.class)
1: 
1: @ContextConfiguration(locations = {"classpath:spring/spring.xml"})
1: @TransactionConfiguration(transactionManager = "transactionManager", defaultRollback = false)
1: public class ListenerTest {
1: 
1:     protected String bindAddress = "vm://localhost";    
1: 
1:     @Resource
1:     Listener listener;
1: 
1:     @Test
1:     @DirtiesContext
1:     public void testSimple() throws Exception {
0:         sendMessages("SIMPLE", 10);
1: 
1:         Thread.sleep(3000);
1: 
0:         System.out.println(listener.messages.size());
0:         Assert.assertEquals(listener.messages.size(), 10);
1:     }
1: 
1: 
1:     @Test
1:     @DirtiesContext
1:     public void testComposite() throws Exception {
0:         sendMessages("TEST.1,TEST.2,TEST.3,TEST.4,TEST.5,TEST.6", 10);
1: 
1:         Thread.sleep(3000);
1: 
0:         System.out.println(listener.messages.size());
0:         Assert.assertEquals(listener.messages.size(), 60);
1:     }
1: 
1:     public void sendMessages(String destName, int msgNum) throws Exception {
1:         ConnectionFactory factory = new org.apache.activemq.ActiveMQConnectionFactory("tcp://localhost:61616");
1:         Connection conn = factory.createConnection();
1:         Session sess = conn.createSession(false, Session.AUTO_ACKNOWLEDGE);
1:         Destination dest = sess.createQueue(destName);
1:         MessageProducer producer = sess.createProducer(dest);
1:         for (int i = 0; i < msgNum; i++) {
0:             producer.send(sess.createTextMessage("test"));
1:         }
1:     }
1: 
1: 
1: }
============================================================================