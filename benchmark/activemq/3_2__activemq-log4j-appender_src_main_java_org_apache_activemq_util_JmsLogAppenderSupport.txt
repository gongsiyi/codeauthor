1:d90b781: /**
1:d90b781:  * Licensed to the Apache Software Foundation (ASF) under one or more
1:d90b781:  * contributor license agreements.  See the NOTICE file distributed with
1:d90b781:  * this work for additional information regarding copyright ownership.
1:d90b781:  * The ASF licenses this file to You under the Apache License, Version 2.0
1:d90b781:  * (the "License"); you may not use this file except in compliance with
1:d90b781:  * the License.  You may obtain a copy of the License at
3:d90b781:  *
1:5f1adbe:  *      http://www.apache.org/licenses/LICENSE-2.0
1:d90b781:  *
1:d90b781:  * Unless required by applicable law or agreed to in writing, software
1:d90b781:  * distributed under the License is distributed on an "AS IS" BASIS,
1:d90b781:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:d90b781:  * See the License for the specific language governing permissions and
1:d90b781:  * limitations under the License.
1:d90b781:  */
1:d90b781: package org.apache.activemq.util;
3:d90b781: 
1:540dd5c: import java.io.Serializable;
1:540dd5c: import java.util.ArrayList;
1:540dd5c: import java.util.Iterator;
1:540dd5c: import java.util.List;
1:d90b781: import javax.jms.Connection;
1:d90b781: import javax.jms.Destination;
1:d90b781: import javax.jms.JMSException;
1:d90b781: import javax.jms.Message;
1:d90b781: import javax.jms.MessageProducer;
1:d90b781: import javax.jms.Session;
1:d90b781: import javax.naming.NamingException;
1:540dd5c: 
1:540dd5c: import org.apache.log4j.AppenderSkeleton;
1:540dd5c: import org.apache.log4j.spi.LoggingEvent;
1:d90b781: 
1:d90b781: /**
1:540dd5c:  * An abstract base class for implementation inheritence for a log4j JMS
1:540dd5c:  * appender
1:0bbc0ac:  * 
1:540dd5c:  * 
1:d90b781:  */
1:d90b781: public abstract class JmsLogAppenderSupport extends AppenderSkeleton {
1:d90b781: 
1:d90b781:     public static final int JMS_PUBLISH_ERROR_CODE = 61616;
1:d90b781: 
1:d90b781:     private Connection connection;
1:d90b781:     private Session session;
1:d90b781:     private MessageProducer producer;
1:d90b781:     private boolean allowTextMessages = true;
1:d90b781:     private String subjectPrefix = "log4j.";
1:d90b781: 
1:d90b781:     public JmsLogAppenderSupport() {
7:d90b781:     }
1:d90b781: 
1:d90b781:     public Connection getConnection() throws JMSException, NamingException {
1:d90b781:         if (connection == null) {
1:d90b781:             connection = createConnection();
1:d90b781:         }
1:d90b781:         return connection;
1:d90b781:     }
1:d90b781: 
1:d90b781:     public void setConnection(Connection connection) {
1:d90b781:         this.connection = connection;
1:d90b781:     }
1:d90b781: 
1:d90b781:     public Session getSession() throws JMSException, NamingException {
1:d90b781:         if (session == null) {
1:d90b781:             session = createSession();
1:d90b781:         }
1:d90b781:         return session;
1:d90b781:     }
1:d90b781: 
1:d90b781:     public void setSession(Session session) {
1:d90b781:         this.session = session;
1:d90b781:     }
1:d90b781: 
1:d90b781:     public MessageProducer getProducer() throws JMSException, NamingException {
1:d90b781:         if (producer == null) {
1:d90b781:             producer = createProducer();
1:d90b781:         }
1:d90b781:         return producer;
1:d90b781:     }
1:d90b781: 
1:d90b781:     public void setProducer(MessageProducer producer) {
1:d90b781:         this.producer = producer;
1:d90b781:     }
1:d90b781: 
1:d90b781:     public void close() {
1:540dd5c:         List<JMSException> errors = new ArrayList<JMSException>();
1:d90b781:         if (producer != null) {
2:d90b781:             try {
1:d90b781:                 producer.close();
1:540dd5c:             } catch (JMSException e) {
1:d90b781:                 errors.add(e);
1:d90b781:             }
1:d90b781:         }
1:d90b781:         if (session != null) {
1:d90b781:             try {
1:d90b781:                 session.close();
1:540dd5c:             } catch (JMSException e) {
1:d90b781:                 errors.add(e);
1:d90b781:             }
1:d90b781:         }
1:d90b781:         if (connection != null) {
1:d90b781:             try {
1:d90b781:                 connection.close();
1:540dd5c:             } catch (JMSException e) {
1:d90b781:                 errors.add(e);
1:d90b781:             }
1:d90b781:         }
1:540dd5c:         for (Iterator<JMSException> iter = errors.iterator(); iter.hasNext();) {
1:540dd5c:             JMSException e = iter.next();
1:d90b781:             getErrorHandler().error("Error closing JMS resources: " + e, e, JMS_PUBLISH_ERROR_CODE);
1:d90b781:         }
1:d90b781:     }
1:d90b781: 
1:d90b781:     public boolean requiresLayout() {
1:d90b781:         return false;
1:d90b781:     }
1:d90b781: 
1:d90b781:     public void activateOptions() {
1:d90b781:         try {
1:d90b781:             // lets ensure we're all created
1:d90b781:             getProducer();
1:540dd5c:         } catch (Exception e) {
1:d90b781:             getErrorHandler().error("Could not create JMS resources: " + e, e, JMS_PUBLISH_ERROR_CODE);
1:d90b781:         }
1:d90b781:     }
1:d90b781: 
1:d90b781:     // Implementation methods
1:540dd5c:     // -------------------------------------------------------------------------
1:d90b781:     protected abstract Connection createConnection() throws JMSException, NamingException;
1:d90b781: 
1:d90b781:     protected Session createSession() throws JMSException, NamingException {
1:d90b781:         return getConnection().createSession(false, Session.AUTO_ACKNOWLEDGE);
1:d90b781:     }
1:d90b781: 
1:d90b781:     protected MessageProducer createProducer() throws JMSException, NamingException {
1:d90b781:         return getSession().createProducer(null);
1:d90b781:     }
1:d90b781: 
1:763aa74:     private static final ThreadLocal<Object> APPENDING = new ThreadLocal<Object>();
1:763aa74: 
1:d90b781:     protected void append(LoggingEvent event) {
1:763aa74:         if( APPENDING.get()==null ) {
1:763aa74:             APPENDING.set(true);
1:763aa74:             try {
1:763aa74:                 Message message = createMessage(event);
1:763aa74:                 Destination destination = getDestination(event);
1:763aa74:                 getProducer().send(destination, message);
1:763aa74:             } catch (Exception e) {
1:763aa74:                 getErrorHandler().error("Could not send message due to: " + e, e, JMS_PUBLISH_ERROR_CODE, event);
1:763aa74:             } finally {
1:763aa74:                 APPENDING.remove();
1:763aa74:             }
1:d90b781:         }
1:d90b781:     }
1:d90b781: 
1:d90b781:     protected Message createMessage(LoggingEvent event) throws JMSException, NamingException {
1:d90b781:         Message answer = null;
1:d90b781:         Object value = event.getMessage();
1:d90b781:         if (allowTextMessages && value instanceof String) {
1:540dd5c:             answer = getSession().createTextMessage((String)value);
1:540dd5c:         } else {
1:540dd5c:             answer = getSession().createObjectMessage((Serializable)value);
1:d90b781:         }
1:d90b781:         answer.setStringProperty("level", event.getLevel().toString());
1:d90b781:         answer.setIntProperty("levelInt", event.getLevel().toInt());
1:d90b781:         answer.setStringProperty("threadName", event.getThreadName());
1:d90b781:         return answer;
1:d90b781:     }
1:d90b781: 
1:d90b781:     protected Destination getDestination(LoggingEvent event) throws JMSException, NamingException {
1:d90b781:         String name = subjectPrefix + event.getLoggerName();
1:d90b781:         return getSession().createTopic(name);
1:d90b781:     }
1:d90b781: }
============================================================================
author:Hiram R. Chirino
-------------------------------------------------------------------------------
commit:763aa74
/////////////////////////////////////////////////////////////////////////
1:     private static final ThreadLocal<Object> APPENDING = new ThreadLocal<Object>();
1: 
1:         if( APPENDING.get()==null ) {
1:             APPENDING.set(true);
1:             try {
1:                 Message message = createMessage(event);
1:                 Destination destination = getDestination(event);
1:                 getProducer().send(destination, message);
1:             } catch (Exception e) {
1:                 getErrorHandler().error("Could not send message due to: " + e, e, JMS_PUBLISH_ERROR_CODE, event);
1:             } finally {
1:                 APPENDING.remove();
1:             }
commit:9a1ad8c
commit:0bbc0ac
/////////////////////////////////////////////////////////////////////////
1:  * 
commit:540dd5c
/////////////////////////////////////////////////////////////////////////
1: import java.io.Serializable;
1: import java.util.ArrayList;
1: import java.util.Iterator;
1: import java.util.List;
/////////////////////////////////////////////////////////////////////////
1: 
1: import org.apache.log4j.AppenderSkeleton;
1: import org.apache.log4j.spi.LoggingEvent;
1:  * An abstract base class for implementation inheritence for a log4j JMS
1:  * appender
1:  * 
/////////////////////////////////////////////////////////////////////////
1:         List<JMSException> errors = new ArrayList<JMSException>();
1:             } catch (JMSException e) {
1:             } catch (JMSException e) {
1:             } catch (JMSException e) {
1:         for (Iterator<JMSException> iter = errors.iterator(); iter.hasNext();) {
1:             JMSException e = iter.next();
/////////////////////////////////////////////////////////////////////////
1:         } catch (Exception e) {
1:     // -------------------------------------------------------------------------
/////////////////////////////////////////////////////////////////////////
0:         } catch (Exception e) {
/////////////////////////////////////////////////////////////////////////
1:             answer = getSession().createTextMessage((String)value);
1:         } else {
1:             answer = getSession().createObjectMessage((Serializable)value);
commit:5f1adbe
/////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////
1:  *      http://www.apache.org/licenses/LICENSE-2.0
author:Claus Ibsen
-------------------------------------------------------------------------------
commit:3b4aadc
/////////////////////////////////////////////////////////////////////////
author:Adrian T. Co
-------------------------------------------------------------------------------
commit:d90b781
/////////////////////////////////////////////////////////////////////////
1: /**
1:  *
1:  * Licensed to the Apache Software Foundation (ASF) under one or more
1:  * contributor license agreements.  See the NOTICE file distributed with
1:  * this work for additional information regarding copyright ownership.
1:  * The ASF licenses this file to You under the Apache License, Version 2.0
1:  * (the "License"); you may not use this file except in compliance with
1:  * the License.  You may obtain a copy of the License at
1:  *
0:  * http://www.apache.org/licenses/LICENSE-2.0
1:  *
1:  * Unless required by applicable law or agreed to in writing, software
1:  * distributed under the License is distributed on an "AS IS" BASIS,
1:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:  * See the License for the specific language governing permissions and
1:  * limitations under the License.
1:  */
1: package org.apache.activemq.util;
1: 
0: import org.apache.log4j.AppenderSkeleton;
0: import org.apache.log4j.spi.LoggingEvent;
1: 
1: import javax.jms.Connection;
1: import javax.jms.Destination;
1: import javax.jms.JMSException;
1: import javax.jms.Message;
1: import javax.jms.MessageProducer;
1: import javax.jms.Session;
1: import javax.naming.NamingException;
0: import java.io.Serializable;
0: import java.util.ArrayList;
0: import java.util.Iterator;
0: import java.util.List;
1: 
1: /**
0:  * An abstract base class for implementation inheritence for a log4j JMS appender
1:  *
0:  * @version $Revision$
1:  */
1: public abstract class JmsLogAppenderSupport extends AppenderSkeleton {
1: 
1:     public static final int JMS_PUBLISH_ERROR_CODE = 61616;
1: 
1:     private Connection connection;
1:     private Session session;
1:     private MessageProducer producer;
1:     private boolean allowTextMessages = true;
1:     private String subjectPrefix = "log4j.";
1: 
1:     public JmsLogAppenderSupport() {
1:     }
1: 
1:     public Connection getConnection() throws JMSException, NamingException {
1:         if (connection == null) {
1:             connection = createConnection();
1:         }
1:         return connection;
1:     }
1: 
1:     public void setConnection(Connection connection) {
1:         this.connection = connection;
1:     }
1: 
1:     public Session getSession() throws JMSException, NamingException {
1:         if (session == null) {
1:             session = createSession();
1:         }
1:         return session;
1:     }
1: 
1:     public void setSession(Session session) {
1:         this.session = session;
1:     }
1: 
1:     public MessageProducer getProducer() throws JMSException, NamingException {
1:         if (producer == null) {
1:             producer = createProducer();
1:         }
1:         return producer;
1:     }
1: 
1:     public void setProducer(MessageProducer producer) {
1:         this.producer = producer;
1:     }
1: 
1:     public void close() {
0:         List errors = new ArrayList();
1:         if (producer != null) {
1:             try {
1:                 producer.close();
1:             }
0:             catch (JMSException e) {
1:                 errors.add(e);
1:             }
1:         }
1:         if (session != null) {
1:             try {
1:                 session.close();
1:             }
0:             catch (JMSException e) {
1:                 errors.add(e);
1:             }
1:         }
1:         if (connection != null) {
1:             try {
1:                 connection.close();
1:             }
0:             catch (JMSException e) {
1:                 errors.add(e);
1:             }
1:         }
0:         for (Iterator iter = errors.iterator(); iter.hasNext();) {
0:             JMSException e = (JMSException) iter.next();
1:             getErrorHandler().error("Error closing JMS resources: " + e, e, JMS_PUBLISH_ERROR_CODE);
1:         }
1:     }
1: 
1:     public boolean requiresLayout() {
1:         return false;
1:     }
1: 
1:     public void activateOptions() {
1:         try {
1:             // lets ensure we're all created
1:             getProducer();
1:         }
0:         catch (Exception e) {
1:             getErrorHandler().error("Could not create JMS resources: " + e, e, JMS_PUBLISH_ERROR_CODE);
1:         }
1:     }
1: 
1: 
1:     // Implementation methods
0:     //-------------------------------------------------------------------------
1:     protected abstract Connection createConnection() throws JMSException, NamingException;
1: 
1:     protected Session createSession() throws JMSException, NamingException {
1:         return getConnection().createSession(false, Session.AUTO_ACKNOWLEDGE);
1:     }
1: 
1:     protected MessageProducer createProducer() throws JMSException, NamingException {
1:         return getSession().createProducer(null);
1:     }
1: 
1:     protected void append(LoggingEvent event) {
1:         try {
0:             Message message = createMessage(event);
0:             Destination destination = getDestination(event);
0:             getProducer().send(destination, message);
1:         }
0:         catch (Exception e) {
0:             getErrorHandler().error("Could not send message due to: " + e, e, JMS_PUBLISH_ERROR_CODE, event);
1:         }
1:     }
1: 
1:     protected Message createMessage(LoggingEvent event) throws JMSException, NamingException {
1:         Message answer = null;
1:         Object value = event.getMessage();
1:         if (allowTextMessages && value instanceof String) {
0:             answer = getSession().createTextMessage((String) value);
1:         }
0:         else {
0:             answer = getSession().createObjectMessage((Serializable) value);
1:         }
1:         answer.setStringProperty("level", event.getLevel().toString());
1:         answer.setIntProperty("levelInt", event.getLevel().toInt());
1:         answer.setStringProperty("threadName", event.getThreadName());
1:         return answer;
1:     }
1: 
1:     protected Destination getDestination(LoggingEvent event) throws JMSException, NamingException {
1:         String name = subjectPrefix + event.getLoggerName();
1:         return getSession().createTopic(name);
1:     }
1: }
============================================================================