1:04ee70a: /**
1:04ee70a:  * Licensed to the Apache Software Foundation (ASF) under one or more
1:04ee70a:  * contributor license agreements.  See the NOTICE file distributed with
1:04ee70a:  * this work for additional information regarding copyright ownership.
1:04ee70a:  * The ASF licenses this file to You under the Apache License, Version 2.0
1:04ee70a:  * (the "License"); you may not use this file except in compliance with
1:04ee70a:  * the License.  You may obtain a copy of the License at
1:04ee70a:  *
1:04ee70a:  *      http://www.apache.org/licenses/LICENSE-2.0
1:04ee70a:  *
1:04ee70a:  * Unless required by applicable law or agreed to in writing, software
1:04ee70a:  * distributed under the License is distributed on an "AS IS" BASIS,
1:04ee70a:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:04ee70a:  * See the License for the specific language governing permissions and
1:04ee70a:  * limitations under the License.
1:04ee70a:  */
8:04ee70a: 
1:04ee70a: package org.apache.activemq.transport.nio;
1:04ee70a: 
1:04ee70a: import java.io.DataOutputStream;
1:04ee70a: import java.io.EOFException;
1:04ee70a: import java.io.IOException;
1:04ee70a: import java.net.Socket;
1:04ee70a: import java.net.URI;
1:04ee70a: import java.net.UnknownHostException;
1:04ee70a: import java.nio.ByteBuffer;
1:3c358b3: import java.util.concurrent.atomic.AtomicInteger;
1:04ee70a: 
1:04ee70a: import javax.net.SocketFactory;
1:04ee70a: import javax.net.ssl.SSLContext;
1:04ee70a: import javax.net.ssl.SSLEngine;
1:04ee70a: import javax.net.ssl.SSLEngineResult;
1:69fad2a: import javax.net.ssl.SSLParameters;
1:04ee70a: 
1:04ee70a: import org.apache.activemq.thread.TaskRunnerFactory;
1:04ee70a: import org.apache.activemq.util.IOExceptionSupport;
1:04ee70a: import org.apache.activemq.util.ServiceStopper;
1:04ee70a: import org.apache.activemq.wireformat.WireFormat;
1:04ee70a: 
1:04ee70a: /**
1:04ee70a:  * This transport initializes the SSLEngine and reads the first command before
1:04ee70a:  * handing off to the detected transport.
1:04ee70a:  *
1:04ee70a:  */
1:04ee70a: public class AutoInitNioSSLTransport extends NIOSSLTransport {
1:04ee70a: 
1:04ee70a:     public AutoInitNioSSLTransport(WireFormat wireFormat, SocketFactory socketFactory, URI remoteLocation, URI localLocation) throws UnknownHostException, IOException {
1:04ee70a:         super(wireFormat, socketFactory, remoteLocation, localLocation);
4:04ee70a:     }
1:04ee70a: 
1:04ee70a:     public AutoInitNioSSLTransport(WireFormat wireFormat, Socket socket) throws IOException {
1:04ee70a:         super(wireFormat, socket, null, null, null);
1:04ee70a:     }
1:04ee70a: 
2:04ee70a:     @Override
1:04ee70a:     public void setSslContext(SSLContext sslContext) {
1:04ee70a:         this.sslContext = sslContext;
1:04ee70a:     }
1:04ee70a: 
1:04ee70a:     public ByteBuffer getInputBuffer() {
1:04ee70a:         return this.inputBuffer;
1:04ee70a:     }
1:04ee70a: 
1:04ee70a:     @Override
1:04ee70a:     protected void initializeStreams() throws IOException {
1:04ee70a:         NIOOutputStream outputStream = null;
1:04ee70a:         try {
1:04ee70a:             channel = socket.getChannel();
1:04ee70a:             channel.configureBlocking(false);
1:04ee70a: 
1:04ee70a:             if (sslContext == null) {
1:04ee70a:                 sslContext = SSLContext.getDefault();
1:04ee70a:             }
1:04ee70a: 
1:04ee70a:             String remoteHost = null;
1:04ee70a:             int remotePort = -1;
1:04ee70a: 
1:04ee70a:             try {
1:04ee70a:                 URI remoteAddress = new URI(this.getRemoteAddress());
1:04ee70a:                 remoteHost = remoteAddress.getHost();
1:04ee70a:                 remotePort = remoteAddress.getPort();
1:04ee70a:             } catch (Exception e) {
1:04ee70a:             }
1:04ee70a: 
1:04ee70a:             // initialize engine, the initial sslSession we get will need to be
1:04ee70a:             // updated once the ssl handshake process is completed.
1:04ee70a:             if (remoteHost != null && remotePort != -1) {
1:04ee70a:                 sslEngine = sslContext.createSSLEngine(remoteHost, remotePort);
1:04ee70a:             } else {
1:04ee70a:                 sslEngine = sslContext.createSSLEngine();
1:04ee70a:             }
1:04ee70a: 
1:69fad2a:             if (verifyHostName) {
1:69fad2a:                 SSLParameters sslParams = new SSLParameters();
1:69fad2a:                 sslParams.setEndpointIdentificationAlgorithm("HTTPS");
1:69fad2a:                 sslEngine.setSSLParameters(sslParams);
1:69fad2a:             }
1:69fad2a: 
1:04ee70a:             sslEngine.setUseClientMode(false);
1:04ee70a:             if (enabledCipherSuites != null) {
1:04ee70a:                 sslEngine.setEnabledCipherSuites(enabledCipherSuites);
1:04ee70a:             }
1:04ee70a: 
1:04ee70a:             if (enabledProtocols != null) {
1:04ee70a:                 sslEngine.setEnabledProtocols(enabledProtocols);
1:04ee70a:             }
1:04ee70a: 
1:04ee70a:             if (wantClientAuth) {
1:04ee70a:                 sslEngine.setWantClientAuth(wantClientAuth);
1:04ee70a:             }
1:04ee70a: 
1:04ee70a:             if (needClientAuth) {
1:04ee70a:                 sslEngine.setNeedClientAuth(needClientAuth);
1:04ee70a:             }
1:04ee70a: 
2:04ee70a:             sslSession = sslEngine.getSession();
1:04ee70a: 
1:04ee70a:             inputBuffer = ByteBuffer.allocate(sslSession.getPacketBufferSize());
1:04ee70a:             inputBuffer.clear();
1:04ee70a: 
1:04ee70a:             outputStream = new NIOOutputStream(channel);
1:04ee70a:             outputStream.setEngine(sslEngine);
1:04ee70a:             this.dataOut = new DataOutputStream(outputStream);
1:04ee70a:             this.buffOut = outputStream;
1:04ee70a:             sslEngine.beginHandshake();
1:04ee70a:             handshakeStatus = sslEngine.getHandshakeStatus();
1:04ee70a:             doHandshake();
1:ed0e786: 
1:04ee70a:         } catch (Exception e) {
1:04ee70a:             try {
1:04ee70a:                 if(outputStream != null) {
1:04ee70a:                     outputStream.close();
1:04ee70a:                 }
1:04ee70a:                 super.closeStreams();
1:04ee70a:             } catch (Exception ex) {}
1:04ee70a:             throw new IOException(e);
1:04ee70a:         }
1:04ee70a:     }
1:04ee70a: 
1:04ee70a:     @Override
1:04ee70a:     protected void doOpenWireInit() throws Exception {
1:04ee70a: 
1:04ee70a:     }
1:04ee70a: 
1:04ee70a:     public SSLEngine getSslSession() {
1:04ee70a:         return this.sslEngine;
1:04ee70a:     }
1:04ee70a: 
1:3c358b3:     private volatile byte[] readData;
1:3c358b3: 
1:3c358b3:     private final AtomicInteger readSize = new AtomicInteger();
1:3c358b3: 
1:3c358b3:     public byte[] getReadData() {
1:3c358b3:         return readData != null ? readData : new byte[0];
1:3c358b3:     }
1:3c358b3: 
1:3c358b3:     public AtomicInteger getReadSize() {
1:3c358b3:         return readSize;
1:3c358b3:     }
1:04ee70a: 
1:04ee70a:     @Override
1:04ee70a:     public void serviceRead() {
1:04ee70a:         try {
2:04ee70a:             if (handshakeInProgress) {
1:04ee70a:                 doHandshake();
1:04ee70a:             }
1:04ee70a: 
1:04ee70a:             ByteBuffer plain = ByteBuffer.allocate(sslSession.getApplicationBufferSize());
1:04ee70a:             plain.position(plain.limit());
1:04ee70a: 
1:04ee70a:             while (true) {
1:04ee70a:                 if (!plain.hasRemaining()) {
1:04ee70a:                     int readCount = secureRead(plain);
1:04ee70a: 
1:27238b2:                     if (readCount == 0) {
1:27238b2:                         break;
1:27238b2:                     }
1:27238b2: 
1:04ee70a:                     // channel is closed, cleanup
1:04ee70a:                     if (readCount == -1) {
1:04ee70a:                         onException(new EOFException());
3:04ee70a:                         break;
1:04ee70a:                     }
1:04ee70a: 
1:04ee70a:                     receiveCounter += readCount;
1:3c358b3:                     readSize.addAndGet(readCount);
1:04ee70a:                 }
1:04ee70a: 
1:04ee70a:                 if (status == SSLEngineResult.Status.OK && handshakeStatus != SSLEngineResult.HandshakeStatus.NEED_UNWRAP) {
1:04ee70a:                     processCommand(plain);
1:e14aca8:                     //we have received enough bytes to detect the protocol
1:e14aca8:                     if (receiveCounter >= 8) {
1:e14aca8:                         break;
1:e14aca8:                     }
1:04ee70a:                 }
1:04ee70a:             }
1:04ee70a:         } catch (IOException e) {
1:04ee70a:             onException(e);
1:04ee70a:         } catch (Throwable e) {
1:04ee70a:             onException(IOExceptionSupport.create(e));
1:04ee70a:         }
1:04ee70a:     }
1:04ee70a: 
1:04ee70a:     @Override
1:04ee70a:     protected void processCommand(ByteBuffer plain) throws Exception {
1:e14aca8:         ByteBuffer newBuffer = ByteBuffer.allocate(receiveCounter);
1:3c358b3:         if (readData != null) {
1:3c358b3:             newBuffer.put(readData);
1:e14aca8:         }
1:e14aca8:         newBuffer.put(plain);
1:e14aca8:         newBuffer.flip();
1:3c358b3:         readData = newBuffer.array();
1:04ee70a:     }
1:04ee70a: 
1:04ee70a: 
1:04ee70a:     @Override
1:04ee70a:     public void doStart() throws Exception {
1:04ee70a:         taskRunnerFactory = new TaskRunnerFactory("ActiveMQ NIOSSLTransport Task");
1:04ee70a:         // no need to init as we can delay that until demand (eg in doHandshake)
1:04ee70a:         connect();
1:04ee70a:     }
1:04ee70a: 
1:04ee70a: 
1:04ee70a:     @Override
1:04ee70a:     protected void doStop(ServiceStopper stopper) throws Exception {
1:04ee70a:         if (taskRunnerFactory != null) {
1:04ee70a:             taskRunnerFactory.shutdownNow();
1:04ee70a:             taskRunnerFactory = null;
1:04ee70a:         }
1:04ee70a:     }
1:04ee70a: 
1:04ee70a: 
1:04ee70a: }
============================================================================
author:Christopher L. Shannon (cshannon)
-------------------------------------------------------------------------------
commit:69fad2a
/////////////////////////////////////////////////////////////////////////
1: import javax.net.ssl.SSLParameters;
/////////////////////////////////////////////////////////////////////////
1:             if (verifyHostName) {
1:                 SSLParameters sslParams = new SSLParameters();
1:                 sslParams.setEndpointIdentificationAlgorithm("HTTPS");
1:                 sslEngine.setSSLParameters(sslParams);
1:             }
1: 
commit:27238b2
/////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////
1:                     if (readCount == 0) {
1:                         break;
1:                     }
1: 
commit:ed0e786
/////////////////////////////////////////////////////////////////////////
1: 
commit:3c358b3
/////////////////////////////////////////////////////////////////////////
1: import java.util.concurrent.atomic.AtomicInteger;
/////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////
1:     private volatile byte[] readData;
1: 
1:     private final AtomicInteger readSize = new AtomicInteger();
1: 
1:     public byte[] getReadData() {
1:         return readData != null ? readData : new byte[0];
1:     }
1: 
1:     public AtomicInteger getReadSize() {
1:         return readSize;
1:     }
/////////////////////////////////////////////////////////////////////////
1:                     readSize.addAndGet(readCount);
/////////////////////////////////////////////////////////////////////////
1:         if (readData != null) {
1:             newBuffer.put(readData);
1:         readData = newBuffer.array();
commit:e14aca8
/////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////
1:                     //we have received enough bytes to detect the protocol
1:                     if (receiveCounter >= 8) {
0:                         readSize = receiveCounter;
1:                         break;
1:                     }
/////////////////////////////////////////////////////////////////////////
1:         ByteBuffer newBuffer = ByteBuffer.allocate(receiveCounter);
0:         if (read != null) {
0:             newBuffer.put(read);
1:         }
1:         newBuffer.put(plain);
1:         newBuffer.flip();
0:         read = newBuffer.array();
/////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////
commit:04ee70a
/////////////////////////////////////////////////////////////////////////
1: /**
1:  * Licensed to the Apache Software Foundation (ASF) under one or more
1:  * contributor license agreements.  See the NOTICE file distributed with
1:  * this work for additional information regarding copyright ownership.
1:  * The ASF licenses this file to You under the Apache License, Version 2.0
1:  * (the "License"); you may not use this file except in compliance with
1:  * the License.  You may obtain a copy of the License at
1:  *
1:  *      http://www.apache.org/licenses/LICENSE-2.0
1:  *
1:  * Unless required by applicable law or agreed to in writing, software
1:  * distributed under the License is distributed on an "AS IS" BASIS,
1:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:  * See the License for the specific language governing permissions and
1:  * limitations under the License.
1:  */
1: 
1: package org.apache.activemq.transport.nio;
1: 
1: import java.io.DataOutputStream;
1: import java.io.EOFException;
1: import java.io.IOException;
1: import java.net.Socket;
1: import java.net.URI;
1: import java.net.UnknownHostException;
1: import java.nio.ByteBuffer;
1: 
1: import javax.net.SocketFactory;
1: import javax.net.ssl.SSLContext;
1: import javax.net.ssl.SSLEngine;
1: import javax.net.ssl.SSLEngineResult;
1: 
1: import org.apache.activemq.thread.TaskRunnerFactory;
1: import org.apache.activemq.util.IOExceptionSupport;
1: import org.apache.activemq.util.ServiceStopper;
1: import org.apache.activemq.wireformat.WireFormat;
0: import org.slf4j.Logger;
0: import org.slf4j.LoggerFactory;
1: 
1: /**
1:  * This transport initializes the SSLEngine and reads the first command before
1:  * handing off to the detected transport.
1:  *
1:  */
1: public class AutoInitNioSSLTransport extends NIOSSLTransport {
1: 
0:     private static final Logger LOG = LoggerFactory.getLogger(AutoInitNioSSLTransport.class);
1: 
1:     public AutoInitNioSSLTransport(WireFormat wireFormat, SocketFactory socketFactory, URI remoteLocation, URI localLocation) throws UnknownHostException, IOException {
1:         super(wireFormat, socketFactory, remoteLocation, localLocation);
1:     }
1: 
1:     public AutoInitNioSSLTransport(WireFormat wireFormat, Socket socket) throws IOException {
1:         super(wireFormat, socket, null, null, null);
1:     }
1: 
1:     @Override
1:     public void setSslContext(SSLContext sslContext) {
1:         this.sslContext = sslContext;
1:     }
1: 
1:     public ByteBuffer getInputBuffer() {
1:         return this.inputBuffer;
1:     }
1: 
1:     @Override
1:     protected void initializeStreams() throws IOException {
1:         NIOOutputStream outputStream = null;
1:         try {
1:             channel = socket.getChannel();
1:             channel.configureBlocking(false);
1: 
1:             if (sslContext == null) {
1:                 sslContext = SSLContext.getDefault();
1:             }
1: 
1:             String remoteHost = null;
1:             int remotePort = -1;
1: 
1:             try {
1:                 URI remoteAddress = new URI(this.getRemoteAddress());
1:                 remoteHost = remoteAddress.getHost();
1:                 remotePort = remoteAddress.getPort();
1:             } catch (Exception e) {
1:             }
1: 
1:             // initialize engine, the initial sslSession we get will need to be
1:             // updated once the ssl handshake process is completed.
1:             if (remoteHost != null && remotePort != -1) {
1:                 sslEngine = sslContext.createSSLEngine(remoteHost, remotePort);
1:             } else {
1:                 sslEngine = sslContext.createSSLEngine();
1:             }
1: 
1:             sslEngine.setUseClientMode(false);
1:             if (enabledCipherSuites != null) {
1:                 sslEngine.setEnabledCipherSuites(enabledCipherSuites);
1:             }
1: 
1:             if (enabledProtocols != null) {
1:                 sslEngine.setEnabledProtocols(enabledProtocols);
1:             }
1: 
1:             if (wantClientAuth) {
1:                 sslEngine.setWantClientAuth(wantClientAuth);
1:             }
1: 
1:             if (needClientAuth) {
1:                 sslEngine.setNeedClientAuth(needClientAuth);
1:             }
1: 
1:             sslSession = sslEngine.getSession();
1: 
1:             inputBuffer = ByteBuffer.allocate(sslSession.getPacketBufferSize());
1:             inputBuffer.clear();
1: 
1:             outputStream = new NIOOutputStream(channel);
1:             outputStream.setEngine(sslEngine);
1:             this.dataOut = new DataOutputStream(outputStream);
1:             this.buffOut = outputStream;
1:             sslEngine.beginHandshake();
1:             handshakeStatus = sslEngine.getHandshakeStatus();
1:             doHandshake();
0:            // detectReadyState();
1:         } catch (Exception e) {
1:             try {
1:                 if(outputStream != null) {
1:                     outputStream.close();
1:                 }
1:                 super.closeStreams();
1:             } catch (Exception ex) {}
1:             throw new IOException(e);
1:         }
1:     }
1: 
1:     @Override
1:     protected void doOpenWireInit() throws Exception {
1: 
1:     }
1: 
1: 
1:     @Override
0:     protected void finishHandshake() throws Exception {
1:         if (handshakeInProgress) {
0:             handshakeInProgress = false;
0:             nextFrameSize = -1;
1: 
0:             // Once handshake completes we need to ask for the now real sslSession
0:             // otherwise the session would return 'SSL_NULL_WITH_NULL_NULL' for the
0:             // cipher suite.
1:             sslSession = sslEngine.getSession();
1: 
1:         }
1:     }
1: 
1:     public SSLEngine getSslSession() {
1:         return this.sslEngine;
1:     }
1: 
0:     public volatile byte[] read;
0:     public volatile int readSize;
1: 
1:     @Override
1:     public void serviceRead() {
1:         try {
1:             if (handshakeInProgress) {
1:                 doHandshake();
1:             }
1: 
1:             ByteBuffer plain = ByteBuffer.allocate(sslSession.getApplicationBufferSize());
1:             plain.position(plain.limit());
1: 
1:             while (true) {
1:                 if (!plain.hasRemaining()) {
1: 
1:                     int readCount = secureRead(plain);
1: 
0:                     if (readCount == 0) {
1:                         break;
1:                     }
1: 
1:                     // channel is closed, cleanup
1:                     if (readCount == -1) {
1:                         onException(new EOFException());
0:                         selection.close();
1:                         break;
1:                     }
1: 
1:                     receiveCounter += readCount;
1:                 }
1: 
1:                 if (status == SSLEngineResult.Status.OK && handshakeStatus != SSLEngineResult.HandshakeStatus.NEED_UNWRAP) {
1:                     processCommand(plain);
0:                     //Break when command is found
1:                     break;
1:                 }
1:             }
1:         } catch (IOException e) {
1:             onException(e);
1:         } catch (Throwable e) {
1:             onException(IOExceptionSupport.create(e));
1:         }
1:     }
1: 
1:     @Override
1:     protected void processCommand(ByteBuffer plain) throws Exception {
0:         read = plain.array();
0:         readSize = receiveCounter;
1:     }
1: 
1: 
1:     @Override
1:     public void doStart() throws Exception {
1:         taskRunnerFactory = new TaskRunnerFactory("ActiveMQ NIOSSLTransport Task");
1:         // no need to init as we can delay that until demand (eg in doHandshake)
1:         connect();
0:         //super.doStart();
1:     }
1: 
1: 
1:     @Override
1:     protected void doStop(ServiceStopper stopper) throws Exception {
1:         if (taskRunnerFactory != null) {
1:             taskRunnerFactory.shutdownNow();
1:             taskRunnerFactory = null;
1:         }
0: //        if (selection != null) {
0: //            selection.close();
0: //            selection = null;
0: //        }
1:     }
1: 
1: 
1: }
============================================================================