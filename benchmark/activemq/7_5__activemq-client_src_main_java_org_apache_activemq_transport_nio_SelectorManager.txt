1:885c379: /**
1:885c379:  * Licensed to the Apache Software Foundation (ASF) under one or more
1:885c379:  * contributor license agreements.  See the NOTICE file distributed with
1:885c379:  * this work for additional information regarding copyright ownership.
1:885c379:  * The ASF licenses this file to You under the Apache License, Version 2.0
1:885c379:  * (the "License"); you may not use this file except in compliance with
1:885c379:  * the License.  You may obtain a copy of the License at
3:885c379:  *
1:230a86c:  *      http://www.apache.org/licenses/LICENSE-2.0
1:885c379:  *
1:885c379:  * Unless required by applicable law or agreed to in writing, software
1:885c379:  * distributed under the License is distributed on an "AS IS" BASIS,
1:885c379:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:885c379:  * See the License for the specific language governing permissions and
1:885c379:  * limitations under the License.
1:885c379:  */
1:885c379: package org.apache.activemq.transport.nio;
11:885c379: 
1:885c379: import java.io.IOException;
1:e957937: import java.nio.channels.spi.AbstractSelectableChannel;
1:885c379: import java.util.LinkedList;
1:08695ab: import java.util.concurrent.BlockingQueue;
1:e2b4ca2: import java.util.concurrent.Executor;
1:e2b4ca2: import java.util.concurrent.ExecutorService;
1:e2b4ca2: import java.util.concurrent.LinkedBlockingQueue;
1:634b420: import java.util.concurrent.RejectedExecutionHandler;
1:08695ab: import java.util.concurrent.SynchronousQueue;
1:e2b4ca2: import java.util.concurrent.ThreadFactory;
1:e2b4ca2: import java.util.concurrent.ThreadPoolExecutor;
1:e2b4ca2: import java.util.concurrent.TimeUnit;
1:885c379: 
1:885c379: /**
1:885c379:  * The SelectorManager will manage one Selector and the thread that checks the
1:885c379:  * selector.
1:885c379:  *
1:885c379:  * We may need to consider running more than one thread to check the selector if
1:885c379:  * servicing the selector takes too long.
1:885c379:  */
1:fc00993: public final class SelectorManager {
1:885c379: 
1:fc00993:     public static final SelectorManager SINGLETON = new SelectorManager();
1:885c379: 
1:1f521da:     private Executor selectorExecutor = createDefaultExecutor();
1:f812e34:     private Executor channelExecutor = selectorExecutor;
1:ce5d2a9:     private final LinkedList<SelectorWorker> freeWorkers = new LinkedList<SelectorWorker>();
1:08695ab:     private int maxChannelsPerWorker = -1;
1:fc00993: 
1:1f521da:     protected ExecutorService createDefaultExecutor() {
1:08695ab:         ThreadPoolExecutor rc = new ThreadPoolExecutor(getDefaultCorePoolSize(), getDefaultMaximumPoolSize(), getDefaultKeepAliveTime(), TimeUnit.SECONDS, newWorkQueue(),
1:e957937:             new ThreadFactory() {
1:885c379: 
1:e957937:                 private long i = 0;
1:885c379: 
1:e957937:                 @Override
1:e957937:                 public Thread newThread(Runnable runnable) {
1:5adbafe:                     Thread t = new Thread(runnable, "ActiveMQ NIO Worker " + (i++));
1:e2b4ca2:                     t.setDaemon(true);
1:e957937:                     return t;
1:e957937:                 }
1:634b420:             }, newRejectionHandler());
1:1f521da: 
1:1f521da:         return rc;
1:ca5912d:     }
1:ca5912d: 
1:634b420:     private RejectedExecutionHandler newRejectionHandler() {
1:634b420:         return canRejectWork() ? new ThreadPoolExecutor.AbortPolicy() : new ThreadPoolExecutor.CallerRunsPolicy();
1:634b420:     }
1:634b420: 
1:08695ab:     private BlockingQueue<Runnable> newWorkQueue() {
1:08695ab:         final int workQueueCapicity = getDefaultWorkQueueCapacity();
1:08695ab:         return workQueueCapicity > 0 ? new LinkedBlockingQueue<Runnable>(workQueueCapicity) : new SynchronousQueue<Runnable>();
1:08695ab:     }
1:08695ab: 
1:634b420:     private static boolean canRejectWork() {
1:634b420:         return Boolean.getBoolean("org.apache.activemq.transport.nio.SelectorManager.rejectWork");
1:634b420:     }
1:634b420: 
1:08695ab:     private static int getDefaultWorkQueueCapacity() {
1:08695ab:         return Integer.getInteger("org.apache.activemq.transport.nio.SelectorManager.workQueueCapacity", 0);
1:08695ab:     }
1:08695ab: 
1:1409acb:     private static int getDefaultCorePoolSize() {
1:08695ab:         return Integer.getInteger("org.apache.activemq.transport.nio.SelectorManager.corePoolSize", 10);
1:1409acb:     }
1:1409acb: 
1:1409acb:     private static int getDefaultMaximumPoolSize() {
1:934a30a:         return Integer.getInteger("org.apache.activemq.transport.nio.SelectorManager.maximumPoolSize", 1024);
1:1409acb:     }
1:1409acb: 
1:ce5d2a9:     private static int getDefaultKeepAliveTime() {
1:ce5d2a9:         return Integer.getInteger("org.apache.activemq.transport.nio.SelectorManager.keepAliveTime", 30);
1:ce5d2a9:     }
1:ce5d2a9: 
1:08695ab:     private static int getDefaultMaxChannelsPerWorker() {
1:08695ab:         return Integer.getInteger("org.apache.activemq.transport.nio.SelectorManager.maxChannelsPerWorker", 1024);
1:08695ab:     }
1:08695ab: 
1:5414e76:     public static SelectorManager getInstance() {
1:fc00993:         return SINGLETON;
1:1f521da:     }
1:fc00993: 
1:fc00993:     public interface Listener {
1:fc00993:         void onSelect(SelectorSelection selector);
1:e957937: 
1:fc00993:         void onError(SelectorSelection selection, Throwable error);
1:1f521da:     }
1:fc00993: 
1:e957937:     public synchronized SelectorSelection register(AbstractSelectableChannel selectableChannel, Listener listener) throws IOException {
1:662324c:         SelectorSelection selection = null;
1:e957937:         while (selection == null) {
1:662324c:             if (freeWorkers.size() > 0) {
1:662324c:                 SelectorWorker worker = freeWorkers.getFirst();
1:e957937:                 if (worker.isReleased()) {
1:662324c:                     freeWorkers.remove(worker);
1:662324c:                 } else {
1:662324c:                     worker.retain();
1:e957937:                     selection = new SelectorSelection(worker, selectableChannel, listener);
1:662324c:                 }
1:662324c:             } else {
1:662324c:                 // Worker starts /w retain count of 1
1:662324c:                 SelectorWorker worker = new SelectorWorker(this);
1:662324c:                 freeWorkers.addFirst(worker);
1:e957937:                 selection = new SelectorSelection(worker, selectableChannel, listener);
1:662324c:             }
1:fc00993:         }
1:662324c: 
1:f812e34:         return selection;
1:fc00993:     }
1:662324c: 
1:f812e34:     synchronized void onWorkerFullEvent(SelectorWorker worker) {
1:f812e34:         freeWorkers.remove(worker);
5:f812e34:     }
1:fc00993: 
1:fc00993:     public synchronized void onWorkerEmptyEvent(SelectorWorker worker) {
1:f812e34:         freeWorkers.remove(worker);
1:f812e34:     }
1:885c379: 
1:fc00993:     public synchronized void onWorkerNotFullEvent(SelectorWorker worker) {
1:f812e34:         freeWorkers.addFirst(worker);
1:f812e34:     }
1:885c379: 
1:f812e34:     public Executor getChannelExecutor() {
1:f812e34:         return channelExecutor;
1:f812e34:     }
1:f812e34: 
1:f812e34:     public void setChannelExecutor(Executor channelExecutor) {
1:f812e34:         this.channelExecutor = channelExecutor;
1:f812e34:     }
1:f812e34: 
1:f812e34:     public int getMaxChannelsPerWorker() {
1:08695ab:         return maxChannelsPerWorker >= 0 ? maxChannelsPerWorker : getDefaultMaxChannelsPerWorker();
1:f812e34:     }
1:f812e34: 
1:f812e34:     public void setMaxChannelsPerWorker(int maxChannelsPerWorker) {
1:f812e34:         this.maxChannelsPerWorker = maxChannelsPerWorker;
1:f812e34:     }
1:f812e34: 
1:f812e34:     public Executor getSelectorExecutor() {
1:f812e34:         return selectorExecutor;
1:f812e34:     }
1:f812e34: 
1:f812e34:     public void setSelectorExecutor(Executor selectorExecutor) {
1:f812e34:         this.selectorExecutor = selectorExecutor;
1:f812e34:     }
1:f812e34: }
============================================================================
author:gtully
-------------------------------------------------------------------------------
commit:634b420
/////////////////////////////////////////////////////////////////////////
1: import java.util.concurrent.RejectedExecutionHandler;
/////////////////////////////////////////////////////////////////////////
1:             }, newRejectionHandler());
1:     private RejectedExecutionHandler newRejectionHandler() {
1:         return canRejectWork() ? new ThreadPoolExecutor.AbortPolicy() : new ThreadPoolExecutor.CallerRunsPolicy();
1:     }
1: 
1:     private static boolean canRejectWork() {
1:         return Boolean.getBoolean("org.apache.activemq.transport.nio.SelectorManager.rejectWork");
1:     }
1: 
commit:08695ab
/////////////////////////////////////////////////////////////////////////
1: import java.util.concurrent.BlockingQueue;
1: import java.util.concurrent.SynchronousQueue;
/////////////////////////////////////////////////////////////////////////
1:     private int maxChannelsPerWorker = -1;
1:         ThreadPoolExecutor rc = new ThreadPoolExecutor(getDefaultCorePoolSize(), getDefaultMaximumPoolSize(), getDefaultKeepAliveTime(), TimeUnit.SECONDS, newWorkQueue(),
/////////////////////////////////////////////////////////////////////////
1:     private BlockingQueue<Runnable> newWorkQueue() {
1:         final int workQueueCapicity = getDefaultWorkQueueCapacity();
1:         return workQueueCapicity > 0 ? new LinkedBlockingQueue<Runnable>(workQueueCapicity) : new SynchronousQueue<Runnable>();
1:     }
1: 
1:     private static int getDefaultWorkQueueCapacity() {
1:         return Integer.getInteger("org.apache.activemq.transport.nio.SelectorManager.workQueueCapacity", 0);
1:     }
1: 
1:         return Integer.getInteger("org.apache.activemq.transport.nio.SelectorManager.corePoolSize", 10);
/////////////////////////////////////////////////////////////////////////
1:     private static int getDefaultMaxChannelsPerWorker() {
1:         return Integer.getInteger("org.apache.activemq.transport.nio.SelectorManager.maxChannelsPerWorker", 1024);
1:     }
1: 
/////////////////////////////////////////////////////////////////////////
1:         return maxChannelsPerWorker >= 0 ? maxChannelsPerWorker : getDefaultMaxChannelsPerWorker();
author:Timothy Bish
-------------------------------------------------------------------------------
commit:9a866cf
/////////////////////////////////////////////////////////////////////////
0:             }, new ThreadPoolExecutor.CallerRunsPolicy());
commit:e2b4ca2
/////////////////////////////////////////////////////////////////////////
1: import java.util.concurrent.Executor;
1: import java.util.concurrent.ExecutorService;
1: import java.util.concurrent.LinkedBlockingQueue;
1: import java.util.concurrent.ThreadFactory;
1: import java.util.concurrent.ThreadPoolExecutor;
1: import java.util.concurrent.TimeUnit;
/////////////////////////////////////////////////////////////////////////
1:                     t.setDaemon(true);
commit:5adbafe
/////////////////////////////////////////////////////////////////////////
1:                     Thread t = new Thread(runnable, "ActiveMQ NIO Worker " + (i++));
0:                     t.setDaemon(false);
commit:1409acb
/////////////////////////////////////////////////////////////////////////
0:         ThreadPoolExecutor rc = new ThreadPoolExecutor(getDefaultCorePoolSize(), getDefaultMaximumPoolSize(), getDefaultKeepAliveTime(), TimeUnit.SECONDS, new SynchronousQueue<Runnable>(),
/////////////////////////////////////////////////////////////////////////
1:     private static int getDefaultCorePoolSize() {
0:         return Integer.getInteger("org.apache.activemq.transport.nio.SelectorManager.corePoolSize", 0);
1:     }
1: 
1:     private static int getDefaultMaximumPoolSize() {
0:         return Integer.getInteger("org.apache.activemq.transport.nio.SelectorManager.maximumPoolSize", Integer.MAX_VALUE);
1:     }
1: 
commit:e957937
/////////////////////////////////////////////////////////////////////////
1: import java.nio.channels.spi.AbstractSelectableChannel;
/////////////////////////////////////////////////////////////////////////
0:         ThreadPoolExecutor rc = new ThreadPoolExecutor(0, Integer.MAX_VALUE, getDefaultKeepAliveTime(), TimeUnit.SECONDS, new SynchronousQueue<Runnable>(),
1:             new ThreadFactory() {
1:                 private long i = 0;
1:                 @Override
1:                 public Thread newThread(Runnable runnable) {
0:                     this.i++;
0:                     final Thread t = new Thread(runnable, "ActiveMQ NIO Worker " + this.i);
1:                     return t;
1:                 }
0:             });
/////////////////////////////////////////////////////////////////////////
1: 
1:     public synchronized SelectorSelection register(AbstractSelectableChannel selectableChannel, Listener listener) throws IOException {
1:         while (selection == null) {
1:                 if (worker.isReleased()) {
1:                     selection = new SelectorSelection(worker, selectableChannel, listener);
1:                 selection = new SelectorSelection(worker, selectableChannel, listener);
commit:ce5d2a9
/////////////////////////////////////////////////////////////////////////
1:     private final LinkedList<SelectorWorker> freeWorkers = new LinkedList<SelectorWorker>();
0:         ThreadPoolExecutor rc = new ThreadPoolExecutor(0, Integer.MAX_VALUE, getDefaultKeepAliveTime(), TimeUnit.SECONDS, new SynchronousQueue<Runnable>(), new ThreadFactory() {
0:             @Override
/////////////////////////////////////////////////////////////////////////
1:     private static int getDefaultKeepAliveTime() {
1:         return Integer.getInteger("org.apache.activemq.transport.nio.SelectorManager.keepAliveTime", 30);
1:     }
1: 
author:Dejan Bosanac
-------------------------------------------------------------------------------
commit:ca5912d
/////////////////////////////////////////////////////////////////////////
0:         ThreadPoolExecutor rc = new ThreadPoolExecutor(getDefaultCorePoolSize(), getDefaultMaximumPoolSize(), getDefaultKeepAliveTime(), TimeUnit.SECONDS, new LinkedBlockingQueue<Runnable>(),
/////////////////////////////////////////////////////////////////////////
0:     private static int getDefaultCorePoolSize() {
0:             return Integer.getInteger("org.apache.activemq.transport.nio.SelectorManager.corePoolSize", 10);
1:     }
1: 
commit:934a30a
/////////////////////////////////////////////////////////////////////////
0: import java.util.concurrent.*;
/////////////////////////////////////////////////////////////////////////
0:         ThreadPoolExecutor rc = new ThreadPoolExecutor(getDefaultMaximumPoolSize(), getDefaultMaximumPoolSize(), getDefaultKeepAliveTime(), TimeUnit.SECONDS, new LinkedBlockingQueue<Runnable>(),
/////////////////////////////////////////////////////////////////////////
1:         return Integer.getInteger("org.apache.activemq.transport.nio.SelectorManager.maximumPoolSize", 1024);
author:Hiram R. Chirino
-------------------------------------------------------------------------------
commit:9a8f6e4
commit:1f521da
/////////////////////////////////////////////////////////////////////////
0: import java.util.concurrent.ExecutorService;
0: import java.util.concurrent.SynchronousQueue;
0: import java.util.concurrent.ThreadPoolExecutor;
0: import java.util.concurrent.TimeUnit;
/////////////////////////////////////////////////////////////////////////
1:     private Executor selectorExecutor = createDefaultExecutor();
1:     protected ExecutorService createDefaultExecutor() {
0:         ThreadPoolExecutor rc = new ThreadPoolExecutor(0, Integer.MAX_VALUE, 10, TimeUnit.SECONDS, new SynchronousQueue<Runnable>(), new ThreadFactory() {
0:             public Thread newThread(Runnable runnable) {
0:                 return new Thread(runnable, "ActiveMQ NIO Worker");
1:             }
0:         });
0:         // rc.allowCoreThreadTimeOut(true);
1:         return rc;
1:     }
1:     
commit:662324c
/////////////////////////////////////////////////////////////////////////
1:         SelectorSelection selection = null;
0:         while( selection == null ) {
1:             if (freeWorkers.size() > 0) {
1:                 SelectorWorker worker = freeWorkers.getFirst();
0:                 if( worker.isReleased() ) {
1:                     freeWorkers.remove(worker);
1:                 } else {
1:                     worker.retain();
0:                     selection = new SelectorSelection(worker, socketChannel, listener);
1:                 }
1:                 
1:             } else {
1:                 // Worker starts /w retain count of 1
1:                 SelectorWorker worker = new SelectorWorker(this);
1:                 freeWorkers.addFirst(worker);
0:                 selection = new SelectorSelection(worker, socketChannel, listener);
1:             }
1:         
commit:fc00993
/////////////////////////////////////////////////////////////////////////
1: public final class SelectorManager {
1:     public static final SelectorManager SINGLETON = new SelectorManager();
/////////////////////////////////////////////////////////////////////////
1:     
0:     static SelectorManager getInstance() {
1:         return SINGLETON;
1:     }
1: 
1:     public interface Listener {
1:         void onSelect(SelectorSelection selector);
1: 
1:         void onError(SelectorSelection selection, Throwable error);
1:     }
1: 
/////////////////////////////////////////////////////////////////////////
1:     public synchronized void onWorkerEmptyEvent(SelectorWorker worker) {
1:     public synchronized void onWorkerNotFullEvent(SelectorWorker worker) {
commit:f812e34
/////////////////////////////////////////////////////////////////////////
0:     static final public SelectorManager singleton = new SelectorManager();
0:     static SelectorManager getInstance() {
0:         return singleton;
1:     }
0:     public interface Listener {
0:         public void onSelect(SelectorSelection selector);
0:         public void onError(SelectorSelection selection, Throwable error);
1:     }
0:     private Executor selectorExecutor = Executors.newCachedThreadPool(new ThreadFactory() {
0:         public Thread newThread(Runnable r) {
0:             Thread rc = new Thread(r);
0:             rc.setName("NIO Transport Thread");
0:             return rc;
1:         }
0:     });
1:     private Executor channelExecutor = selectorExecutor;
0:     private LinkedList<SelectorWorker> freeWorkers = new LinkedList<SelectorWorker>();
0:     private int maxChannelsPerWorker = 64;
0:     public synchronized SelectorSelection register(SocketChannel socketChannel, Listener listener)
0:         throws IOException {
0:         SelectorWorker worker = null;
0:         if (freeWorkers.size() > 0) {
0:             worker = freeWorkers.getFirst();
0:         } else {
0:             worker = new SelectorWorker(this);
1:             freeWorkers.addFirst(worker);
1:         }
0:         SelectorSelection selection = new SelectorSelection(worker, socketChannel, listener);
1:         return selection;
1:     }
1:     synchronized void onWorkerFullEvent(SelectorWorker worker) {
1:         freeWorkers.remove(worker);
1:     }
0:     synchronized public void onWorkerEmptyEvent(SelectorWorker worker) {
1:         freeWorkers.remove(worker);
1:     }
0:     synchronized public void onWorkerNotFullEvent(SelectorWorker worker) {
0:         freeWorkers.add(worker);
1:     }
1:     public Executor getChannelExecutor() {
1:         return channelExecutor;
1:     }
1: 
1:     public void setChannelExecutor(Executor channelExecutor) {
1:         this.channelExecutor = channelExecutor;
1:     }
1: 
1:     public int getMaxChannelsPerWorker() {
0:         return maxChannelsPerWorker;
1:     }
1: 
1:     public void setMaxChannelsPerWorker(int maxChannelsPerWorker) {
1:         this.maxChannelsPerWorker = maxChannelsPerWorker;
1:     }
1: 
1:     public Executor getSelectorExecutor() {
1:         return selectorExecutor;
1:     }
1: 
1:     public void setSelectorExecutor(Executor selectorExecutor) {
1:         this.selectorExecutor = selectorExecutor;
1:     }
commit:230a86c
/////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////
1:  *      http://www.apache.org/licenses/LICENSE-2.0
commit:885c379
/////////////////////////////////////////////////////////////////////////
1: /**
1:  *
1:  * Licensed to the Apache Software Foundation (ASF) under one or more
1:  * contributor license agreements.  See the NOTICE file distributed with
1:  * this work for additional information regarding copyright ownership.
1:  * The ASF licenses this file to You under the Apache License, Version 2.0
1:  * (the "License"); you may not use this file except in compliance with
1:  * the License.  You may obtain a copy of the License at
1:  *
0:  * http://www.apache.org/licenses/LICENSE-2.0
1:  *
1:  * Unless required by applicable law or agreed to in writing, software
1:  * distributed under the License is distributed on an "AS IS" BASIS,
1:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:  * See the License for the specific language governing permissions and
1:  * limitations under the License.
1:  */
1: package org.apache.activemq.transport.nio;
1: 
1: import java.io.IOException;
0: import java.nio.channels.SocketChannel;
1: import java.util.LinkedList;
0: import java.util.concurrent.Executor;
0: import java.util.concurrent.Executors;
0: import java.util.concurrent.ThreadFactory;
1: 
1: /**
1:  * The SelectorManager will manage one Selector and the thread that checks the
1:  * selector.
1:  * 
1:  * We may need to consider running more than one thread to check the selector if
1:  * servicing the selector takes too long.
1:  * 
0:  * @version $Rev: 46019 $ $Date: 2004-09-14 05:56:06 -0400 (Tue, 14 Sep 2004) $
1:  */
0: final public class SelectorManager {
1: 
0: 	static final public SelectorManager singleton = new SelectorManager();
0: 	static SelectorManager getInstance() { 
0: 		return singleton;
0: 	}
1: 	
0: 	public interface Listener {
0: 		public void onSelect(SelectorSelection selector);
0: 		public void onError(SelectorSelection selection, Throwable error);
0: 	}
1: 	
0: 	private Executor selectorExecutor = Executors.newCachedThreadPool(new ThreadFactory(){
0: 		public Thread newThread(Runnable r) {
0: 			Thread rc = new Thread(r);
0: 			rc.setName("NIO Transport Thread");
0: 			return rc;
0: 		}});
0: 	private Executor channelExecutor = selectorExecutor;
0: 	private LinkedList<SelectorWorker> freeWorkers = new LinkedList<SelectorWorker>();
0: 	private int maxChannelsPerWorker = 64;
1: 	
0: 	public synchronized SelectorSelection register(SocketChannel socketChannel, Listener listener)
0: 	 	throws IOException {
1: 
0: 		SelectorWorker worker = null;
0: 		if (freeWorkers.size() > 0) {
0: 			worker = freeWorkers.getFirst();
0: 		} else {
0: 			worker = new SelectorWorker(this);
0: 			freeWorkers.addFirst(worker);
0: 		}
1: 
0: 		SelectorSelection selection = new SelectorSelection(worker, socketChannel, listener);				
0: 		return selection;
0: 	}
1: 
0: 	synchronized void onWorkerFullEvent(SelectorWorker worker) {
0: 		freeWorkers.remove(worker);
0: 	}
1: 
0: 	synchronized public void onWorkerEmptyEvent(SelectorWorker worker) {
0: 		freeWorkers.remove(worker);
0: 	}
1: 
0: 	synchronized public void onWorkerNotFullEvent(SelectorWorker worker) {
0: 		freeWorkers.add(worker);
0: 	}
1: 
0: 	public Executor getChannelExecutor() {
0: 		return channelExecutor;
0: 	}
1: 
0: 	public void setChannelExecutor(Executor channelExecutor) {
0: 		this.channelExecutor = channelExecutor;
0: 	}
1: 
0: 	public int getMaxChannelsPerWorker() {
0: 		return maxChannelsPerWorker;
0: 	}
1: 
0: 	public void setMaxChannelsPerWorker(int maxChannelsPerWorker) {
0: 		this.maxChannelsPerWorker = maxChannelsPerWorker;
0: 	}
1: 
0: 	public Executor getSelectorExecutor() {
0: 		return selectorExecutor;
0: 	}
1: 
0: 	public void setSelectorExecutor(Executor selectorExecutor) {
0: 		this.selectorExecutor = selectorExecutor;
0: 	}
1: 
0: }
commit:8e8b820
/////////////////////////////////////////////////////////////////////////
0: /**
0:  *
0:  * Licensed to the Apache Software Foundation (ASF) under one or more
0:  * contributor license agreements.  See the NOTICE file distributed with
0:  * this work for additional information regarding copyright ownership.
0:  * The ASF licenses this file to You under the Apache License, Version 2.0
0:  * (the "License"); you may not use this file except in compliance with
0:  * the License.  You may obtain a copy of the License at
0:  *
0:  * http://www.apache.org/licenses/LICENSE-2.0
0:  *
0:  * Unless required by applicable law or agreed to in writing, software
0:  * distributed under the License is distributed on an "AS IS" BASIS,
0:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
0:  * See the License for the specific language governing permissions and
0:  * limitations under the License.
0:  */
0: package org.apache.activemq.transport.nio;
0: 
0: import java.io.IOException;
0: import java.nio.channels.SocketChannel;
0: import java.util.LinkedList;
0: import java.util.concurrent.Executor;
0: import java.util.concurrent.Executors;
0: import java.util.concurrent.ThreadFactory;
0: 
0: /**
0:  * The SelectorManager will manage one Selector and the thread that checks the
0:  * selector.
0:  * 
0:  * We may need to consider running more than one thread to check the selector if
0:  * servicing the selector takes too long.
0:  * 
0:  * @version $Rev: 46019 $ $Date: 2004-09-14 05:56:06 -0400 (Tue, 14 Sep 2004) $
0:  */
0: final public class SelectorManager {
0: 
0: 	static final public SelectorManager singleton = new SelectorManager();
0: 	static SelectorManager getInstance() { 
0: 		return singleton;
0: 	}
0: 	
0: 	public interface Listener {
0: 		public void onSelect(SelectorSelection selector);
0: 		public void onError(SelectorSelection selection, Throwable error);
0: 	}
0: 	
0: 	private Executor selectorExecutor = Executors.newCachedThreadPool(new ThreadFactory(){
0: 		public Thread newThread(Runnable r) {
0: 			Thread rc = new Thread(r);
0: 			rc.setName("NIO Transport Thread");
0: 			return rc;
0: 		}});
0: 	private Executor channelExecutor = selectorExecutor;
0: 	private LinkedList<SelectorWorker> freeWorkers = new LinkedList<SelectorWorker>();
0: 	private int maxChannelsPerWorker = 64;
0: 	
0: 	public synchronized SelectorSelection register(SocketChannel socketChannel, Listener listener)
0: 	 	throws IOException {
0: 
0: 		SelectorWorker worker = null;
0: 		if (freeWorkers.size() > 0) {
0: 			worker = freeWorkers.getFirst();
0: 		} else {
0: 			worker = new SelectorWorker(this);
0: 			freeWorkers.addFirst(worker);
0: 		}
0: 
0: 		SelectorSelection selection = new SelectorSelection(worker, socketChannel, listener);				
0: 		return selection;
0: 	}
0: 
0: 	synchronized void onWorkerFullEvent(SelectorWorker worker) {
0: 		freeWorkers.remove(worker);
0: 	}
0: 
0: 	synchronized public void onWorkerEmptyEvent(SelectorWorker worker) {
0: 		freeWorkers.remove(worker);
0: 	}
0: 
0: 	synchronized public void onWorkerNotFullEvent(SelectorWorker worker) {
0: 		freeWorkers.add(worker);
0: 	}
0: 
0: 	public Executor getChannelExecutor() {
0: 		return channelExecutor;
0: 	}
0: 
0: 	public void setChannelExecutor(Executor channelExecutor) {
0: 		this.channelExecutor = channelExecutor;
0: 	}
0: 
0: 	public int getMaxChannelsPerWorker() {
0: 		return maxChannelsPerWorker;
0: 	}
0: 
0: 	public void setMaxChannelsPerWorker(int maxChannelsPerWorker) {
0: 		this.maxChannelsPerWorker = maxChannelsPerWorker;
0: 	}
0: 
0: 	public Executor getSelectorExecutor() {
0: 		return selectorExecutor;
0: 	}
0: 
0: 	public void setSelectorExecutor(Executor selectorExecutor) {
0: 		this.selectorExecutor = selectorExecutor;
0: 	}
0: 
0: }
author:Timothy A. Bish
-------------------------------------------------------------------------------
commit:5cd9eba
/////////////////////////////////////////////////////////////////////////
0:  *
/////////////////////////////////////////////////////////////////////////
0: 
0:         ThreadPoolExecutor rc = new ThreadPoolExecutor(0, Integer.MAX_VALUE, 10, TimeUnit.SECONDS, new SynchronousQueue<Runnable>(), new ThreadFactory() {
0: 
0:             private long i = 0;
0: 
0:                 this.i++;
0:                 final Thread t = new Thread(runnable, "ActiveMQ NIO Worker " + this.i);
0:                 return t;
0: 
0: 
/////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////
0: 
/////////////////////////////////////////////////////////////////////////
author:Bosanac Dejan
-------------------------------------------------------------------------------
commit:7ee5cdd
/////////////////////////////////////////////////////////////////////////
0:     private int maxChannelsPerWorker = 1024;
0:         ThreadPoolExecutor rc = new ThreadPoolExecutor(0, Integer.MAX_VALUE, 10, TimeUnit.MILLISECONDS, new SynchronousQueue<Runnable>(), new ThreadFactory() {
commit:83604ee
/////////////////////////////////////////////////////////////////////////
0:         ThreadPoolExecutor rc = new ThreadPoolExecutor(0, 200, 1, TimeUnit.SECONDS, new SynchronousQueue<Runnable>(), new ThreadFactory() {
commit:3cbe3f1
/////////////////////////////////////////////////////////////////////////
0:         freeWorkers.addFirst(worker);
commit:db68273
/////////////////////////////////////////////////////////////////////////
commit:a9e7e94
/////////////////////////////////////////////////////////////////////////
0:         try {
0:             // no more connections on worker, close it
0:             worker.close();
0:         } catch (IOException e) {
0:         }
author:Gary Tully
-------------------------------------------------------------------------------
commit:5414e76
/////////////////////////////////////////////////////////////////////////
1:     public static SelectorManager getInstance() {
============================================================================