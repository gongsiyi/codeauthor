1:d29ca2a: /**
1:57b4941:  * Licensed to the Apache Software Foundation (ASF) under one or more
1:57b4941:  * contributor license agreements.  See the NOTICE file distributed with
1:57b4941:  * this work for additional information regarding copyright ownership.
1:57b4941:  * The ASF licenses this file to You under the Apache License, Version 2.0
1:57b4941:  * (the "License"); you may not use this file except in compliance with
1:57b4941:  * the License.  You may obtain a copy of the License at
3:d29ca2a:  *
1:230a86c:  *      http://www.apache.org/licenses/LICENSE-2.0
1:d29ca2a:  *
1:d29ca2a:  * Unless required by applicable law or agreed to in writing, software
1:d29ca2a:  * distributed under the License is distributed on an "AS IS" BASIS,
1:d29ca2a:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:d29ca2a:  * See the License for the specific language governing permissions and
1:d29ca2a:  * limitations under the License.
1:d29ca2a:  */
1:d29ca2a: package org.apache.activemq.proxy;
1:74a7a8b: 
1:d29ca2a: import org.apache.activemq.Service;
1:d29ca2a: import org.apache.activemq.command.ShutdownInfo;
1:182da65: import org.apache.activemq.command.WireFormatInfo;
1:f915da5: import org.apache.activemq.transport.DefaultTransportListener;
1:d29ca2a: import org.apache.activemq.transport.Transport;
1:d29ca2a: import org.apache.activemq.util.IOExceptionSupport;
1:d29ca2a: import org.apache.activemq.util.ServiceStopper;
1:8bf987b: import org.slf4j.Logger;
1:8bf987b: import org.slf4j.LoggerFactory;
10:d29ca2a: 
1:257710b: import java.io.IOException;
1:257710b: import java.util.concurrent.atomic.AtomicBoolean;
1:257710b: 
1:d29ca2a: class ProxyConnection implements Service {
1:74a7a8b: 
1:8bf987b:     private static final Logger LOG = LoggerFactory.getLogger(ProxyConnection.class);
1:d29ca2a: 
1:257710b:     protected final Transport localTransport;
1:257710b:     protected final Transport remoteTransport;
1:257710b:     private final AtomicBoolean shuttingDown = new AtomicBoolean(false);
1:257710b:     private final AtomicBoolean running = new AtomicBoolean(false);
1:d29ca2a: 
1:d29ca2a:     public ProxyConnection(Transport localTransport, Transport remoteTransport) {
1:d29ca2a:         this.localTransport = localTransport;
1:d29ca2a:         this.remoteTransport = remoteTransport;
1:d29ca2a:     }
1:d29ca2a: 
1:d29ca2a:     public void onFailure(IOException e) {
1:74a7a8b:         if (!shuttingDown.get()) {
1:e1bbde7:             LOG.debug("Transport error: {}", e.getMessage(), e);
1:d29ca2a:             try {
1:d29ca2a:                 stop();
1:d29ca2a:             } catch (Exception ignore) {
1:d29ca2a:             }
1:d29ca2a:         }
1:d29ca2a:     }
1:d29ca2a: 
1:257710b:     @Override
1:d29ca2a:     public void start() throws Exception {
1:74a7a8b:         if (!running.compareAndSet(false, true)) {
1:74a7a8b:             return;
1:d29ca2a:         }
1:74a7a8b: 
1:f915da5:         this.localTransport.setTransportListener(new DefaultTransportListener() {
1:257710b:             @Override
1:9ca56a0:             public void onCommand(Object command) {
1:74a7a8b:                 boolean shutdown = false;
1:74a7a8b:                 if (command.getClass() == ShutdownInfo.class) {
1:d29ca2a:                     shuttingDown.set(true);
1:74a7a8b:                     shutdown = true;
1:d29ca2a:                 }
1:182da65:                 // skipping WireFormat infos
1:182da65:                 if (command.getClass() == WireFormatInfo.class) {
1:d29ca2a:                     return;
1:182da65:                 }
1:d29ca2a:                 try {
1:d29ca2a:                     remoteTransport.oneway(command);
1:ecf89a6:                     if (shutdown) {
1:d29ca2a:                         stop();
1:ecf89a6:                     }
1:d29ca2a:                 } catch (IOException error) {
1:d29ca2a:                     onFailure(error);
1:d29ca2a:                 } catch (Exception error) {
1:d29ca2a:                     onFailure(IOExceptionSupport.create(error));
1:d29ca2a:                 }
1:d29ca2a:             }
1:74a7a8b: 
1:257710b:             @Override
1:d29ca2a:             public void onException(IOException error) {
1:d29ca2a:                 onFailure(error);
1:d29ca2a:             }
1:d29ca2a:         });
1:74a7a8b: 
1:f915da5:         this.remoteTransport.setTransportListener(new DefaultTransportListener() {
1:257710b:             @Override
1:9ca56a0:             public void onCommand(Object command) {
1:d29ca2a:                 try {
1:182da65:                     // skipping WireFormat infos
1:182da65:                     if (command.getClass() == WireFormatInfo.class) {
1:182da65:                         return;
1:d29ca2a:                     }
1:d29ca2a:                     localTransport.oneway(command);
1:d29ca2a:                 } catch (IOException error) {
1:d29ca2a:                     onFailure(error);
1:d29ca2a:                 }
1:d29ca2a:             }
1:74a7a8b: 
1:257710b:             @Override
1:d29ca2a:             public void onException(IOException error) {
1:d29ca2a:                 onFailure(error);
1:d29ca2a:             }
1:d29ca2a:         });
1:74a7a8b: 
1:d29ca2a:         localTransport.start();
1:d29ca2a:         remoteTransport.start();
1:d29ca2a:     }
1:74a7a8b: 
1:257710b:     @Override
1:d29ca2a:     public void stop() throws Exception {
1:74a7a8b:         if (!running.compareAndSet(true, false)) {
1:d29ca2a:             return;
1:d29ca2a:         }
1:d29ca2a:         shuttingDown.set(true);
1:d29ca2a:         ServiceStopper ss = new ServiceStopper();
1:d29ca2a:         ss.stop(remoteTransport);
1:257710b:         ss.stop(localTransport);
1:d29ca2a:         ss.throwFirstException();
1:86cbdfd:     }
1:257710b: 
1:74a7a8b: 
1:257710b:     @Override
1:257710b:     public boolean equals(Object arg) {
1:257710b:         if (arg == null || !(arg instanceof ProxyConnection)) {
1:257710b:             return false;
1:257710b:         } else {
1:257710b:             ProxyConnection other = (ProxyConnection) arg;
1:257710b:             String otherRemote = "";
1:257710b:             String otherLocal = "";
1:257710b:             String thisRemote = "";
1:257710b:             String thisLocal = "";
1:257710b: 
1:257710b:             if (other.localTransport != null && other.localTransport.getRemoteAddress() != null) {
1:257710b:                 otherLocal = other.localTransport.getRemoteAddress();
1:257710b:             }
1:257710b:             if (other.remoteTransport != null && other.remoteTransport.getRemoteAddress() != null) {
1:257710b:                 otherRemote = other.remoteTransport.getRemoteAddress();
1:257710b:             }
1:257710b:             if (this.remoteTransport != null && this.remoteTransport.getRemoteAddress() != null) {
1:257710b:                 thisRemote = this.remoteTransport.getRemoteAddress();
1:257710b:             }
1:257710b:             if (this.localTransport != null && this.localTransport.getRemoteAddress() != null) {
1:257710b:                 thisLocal = this.localTransport.getRemoteAddress();
1:257710b:             }
1:257710b: 
1:257710b:             if (otherRemote.equals(thisRemote) && otherLocal.equals(thisLocal)) {
1:257710b:                 return true;
1:257710b:             } else {
1:257710b:                 return false;
1:257710b:             }
1:257710b:         }
1:257710b:     }
1:257710b: 
1:257710b: 
1:257710b:     @Override
1:257710b:     public int hashCode() {
1:257710b:         int hash = 17;
1:257710b:         if (localTransport != null && localTransport.getRemoteAddress() != null) {
1:257710b:             hash += 31 * hash + localTransport.getRemoteAddress().hashCode();
1:257710b:         }
1:257710b:         if (remoteTransport != null && remoteTransport.getRemoteAddress() != null) {
1:257710b:             hash = 31 * hash + remoteTransport.hashCode();
1:257710b:         }
1:257710b:         return hash;
1:257710b:     }
1:257710b: 
1:257710b:     @Override
1:257710b:     public String toString() {
1:257710b:      	return "ProxyConnection [localTransport=" + localTransport
1:257710b:                 + ", remoteTransport=" + remoteTransport + ", shuttingDown="
1:257710b:                 + shuttingDown.get() + ", running=" + running.get() + "]";
1:257710b:     }
1:d29ca2a: }
============================================================================
author:Kevin Earls
-------------------------------------------------------------------------------
commit:257710b
/////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////
1: import java.io.IOException;
1: import java.util.concurrent.atomic.AtomicBoolean;
1: 
1:     protected final Transport localTransport;
1:     protected final Transport remoteTransport;
1:     private final AtomicBoolean shuttingDown = new AtomicBoolean(false);
1:     private final AtomicBoolean running = new AtomicBoolean(false);
/////////////////////////////////////////////////////////////////////////
1:     @Override
1:             @Override
/////////////////////////////////////////////////////////////////////////
1:             @Override
1:             @Override
/////////////////////////////////////////////////////////////////////////
1:             @Override
/////////////////////////////////////////////////////////////////////////
1:     @Override
1:         ss.stop(localTransport);
1: 
1:     @Override
1:     public boolean equals(Object arg) {
1:         if (arg == null || !(arg instanceof ProxyConnection)) {
1:             return false;
1:         } else {
1:             ProxyConnection other = (ProxyConnection) arg;
1:             String otherRemote = "";
1:             String otherLocal = "";
1:             String thisRemote = "";
1:             String thisLocal = "";
1: 
1:             if (other.localTransport != null && other.localTransport.getRemoteAddress() != null) {
1:                 otherLocal = other.localTransport.getRemoteAddress();
1:             }
1:             if (other.remoteTransport != null && other.remoteTransport.getRemoteAddress() != null) {
1:                 otherRemote = other.remoteTransport.getRemoteAddress();
1:             }
1:             if (this.remoteTransport != null && this.remoteTransport.getRemoteAddress() != null) {
1:                 thisRemote = this.remoteTransport.getRemoteAddress();
1:             }
1:             if (this.localTransport != null && this.localTransport.getRemoteAddress() != null) {
1:                 thisLocal = this.localTransport.getRemoteAddress();
1:             }
1: 
1:             if (otherRemote.equals(thisRemote) && otherLocal.equals(thisLocal)) {
1:                 return true;
1:             } else {
1:                 return false;
1:             }
1:         }
1:     }
1: 
1: 
1:     @Override
1:     public int hashCode() {
1:         int hash = 17;
1:         if (localTransport != null && localTransport.getRemoteAddress() != null) {
1:             hash += 31 * hash + localTransport.getRemoteAddress().hashCode();
1:         }
1:         if (remoteTransport != null && remoteTransport.getRemoteAddress() != null) {
1:             hash = 31 * hash + remoteTransport.hashCode();
1:         }
1:         return hash;
1:     }
1: 
1:     @Override
1:     public String toString() {
1:      	return "ProxyConnection [localTransport=" + localTransport
1:                 + ", remoteTransport=" + remoteTransport + ", shuttingDown="
1:                 + shuttingDown.get() + ", running=" + running.get() + "]";
1:     }
author:Timothy Bish
-------------------------------------------------------------------------------
commit:e1bbde7
/////////////////////////////////////////////////////////////////////////
1:             LOG.debug("Transport error: {}", e.getMessage(), e);
author:Hiram R. Chirino
-------------------------------------------------------------------------------
commit:58aca86
commit:ecf89a6
/////////////////////////////////////////////////////////////////////////
1:                     if (shutdown) {
1:                     }
commit:fc00993
/////////////////////////////////////////////////////////////////////////
0:     private static final Log LOG = LogFactory.getLog(ProxyConnection.class);
/////////////////////////////////////////////////////////////////////////
0:             LOG.debug("Transport error: " + e, e);
commit:74a7a8b
/////////////////////////////////////////////////////////////////////////
0: import java.util.concurrent.atomic.AtomicBoolean;
1: 
1: 
/////////////////////////////////////////////////////////////////////////
1:         if (!shuttingDown.get()) {
0:             log.debug("Transport error: " + e, e);
/////////////////////////////////////////////////////////////////////////
1:         if (!running.compareAndSet(false, true)) {
1:             return;
1: 
1:                 boolean shutdown = false;
1:                 if (command.getClass() == ShutdownInfo.class) {
1:                     shutdown = true;
0:                     if (shutdown)
/////////////////////////////////////////////////////////////////////////
1: 
1: 
/////////////////////////////////////////////////////////////////////////
1: 
1: 
1: 
1:         if (!running.compareAndSet(true, false)) {
/////////////////////////////////////////////////////////////////////////
1: 
commit:230a86c
/////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////
1:  *      http://www.apache.org/licenses/LICENSE-2.0
commit:86cbdfd
/////////////////////////////////////////////////////////////////////////
0: import java.util.concurrent.atomic.AtomicBoolean;
/////////////////////////////////////////////////////////////////////////
1: }
commit:9ca56a0
/////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////
1:             public void onCommand(Object command) {
/////////////////////////////////////////////////////////////////////////
1:             public void onCommand(Object command) {
commit:57b4941
/////////////////////////////////////////////////////////////////////////
1:  * Licensed to the Apache Software Foundation (ASF) under one or more
1:  * contributor license agreements.  See the NOTICE file distributed with
1:  * this work for additional information regarding copyright ownership.
1:  * The ASF licenses this file to You under the Apache License, Version 2.0
1:  * (the "License"); you may not use this file except in compliance with
1:  * the License.  You may obtain a copy of the License at
commit:48b4869
/////////////////////////////////////////////////////////////////////////
0:  * Copyright 2005-2006 The Apache Software Foundation
commit:d29ca2a
/////////////////////////////////////////////////////////////////////////
1: /**
1:  *
0:  * Copyright 2004 The Apache Software Foundation
1:  *
0:  * Licensed under the Apache License, Version 2.0 (the "License");
0:  * you may not use this file except in compliance with the License.
0:  * You may obtain a copy of the License at
1:  *
0:  * http://www.apache.org/licenses/LICENSE-2.0
1:  *
1:  * Unless required by applicable law or agreed to in writing, software
1:  * distributed under the License is distributed on an "AS IS" BASIS,
1:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:  * See the License for the specific language governing permissions and
1:  * limitations under the License.
1:  */
1: package org.apache.activemq.proxy;
1: 
0: import java.io.IOException;
1: 
1: import org.apache.activemq.Service;
0: import org.apache.activemq.command.Command;
1: import org.apache.activemq.command.ShutdownInfo;
1: import org.apache.activemq.transport.Transport;
0: import org.apache.activemq.transport.TransportListener;
1: import org.apache.activemq.util.IOExceptionSupport;
1: import org.apache.activemq.util.ServiceStopper;
0: import org.apache.commons.logging.Log;
0: import org.apache.commons.logging.LogFactory;
1: 
0: import edu.emory.mathcs.backport.java.util.concurrent.atomic.AtomicBoolean;
1: 
1: class ProxyConnection implements Service {
1: 
0:     static final private Log log = LogFactory.getLog(ProxyConnection.class);
1:     
0:     private final Transport localTransport;
0:     private final Transport remoteTransport;
0:     private AtomicBoolean shuttingDown = new AtomicBoolean(false);
0:     private AtomicBoolean running = new AtomicBoolean(false);
1: 
1:     public ProxyConnection(Transport localTransport, Transport remoteTransport) {
1:         this.localTransport = localTransport;
1:         this.remoteTransport = remoteTransport;
1:     }
1: 
1:     public void onFailure(IOException e) {
0:         if( !shuttingDown.get() ) {
0:             log.debug("Transport error: "+e,e);
1:             try {
1:                 stop();
1:             } catch (Exception ignore) {
1:             }
1:         }
1:     }
1: 
1:     public void start() throws Exception {
0:         if( !running.compareAndSet(false, true) ) {
1:             return;            
1:         }
1:             
0:         this.localTransport.setTransportListener(new TransportListener() {
0:             public void onCommand(Command command) {
0:                 boolean shutdown=false;
0:                 if( command.getClass() == ShutdownInfo.class ) {
1:                     shuttingDown.set(true);
0:                     shutdown=true;
1:                 }
1:                 try {
1:                     remoteTransport.oneway(command);
0:                     if( shutdown )
1:                         stop();
1:                 } catch (IOException error) {
1:                     onFailure(error);
1:                 } catch (Exception error) {
1:                     onFailure(IOExceptionSupport.create(error));
1:                 }
1:             }
1:             public void onException(IOException error) {
1:                 onFailure(error);
1:             }
1:         });
1:         
0:         this.remoteTransport.setTransportListener(new TransportListener() {
0:             public void onCommand(Command command) {
1:                 try {
1:                     localTransport.oneway(command);
1:                 } catch (IOException error) {
1:                     onFailure(error);
1:                 }
1:             }
1:             public void onException(IOException error) {
1:                 onFailure(error);
1:             }
1:         });
1:         
1:         localTransport.start();
1:         remoteTransport.start();
1:     }
1:     
1:     public void stop() throws Exception {
0:         if( !running.compareAndSet(true, false) ) {
1:             return;
1:         }
1:         shuttingDown.set(true);
1:         ServiceStopper ss = new ServiceStopper();
0:         ss.stop(localTransport);
1:         ss.stop(remoteTransport);
1:         ss.throwFirstException();
1:     }
1:     
1: }
author:Bosanac Dejan
-------------------------------------------------------------------------------
commit:8bf987b
/////////////////////////////////////////////////////////////////////////
1: import org.slf4j.Logger;
1: import org.slf4j.LoggerFactory;
1:     private static final Logger LOG = LoggerFactory.getLogger(ProxyConnection.class);
commit:182da65
/////////////////////////////////////////////////////////////////////////
1: import org.apache.activemq.command.WireFormatInfo;
/////////////////////////////////////////////////////////////////////////
1:                 // skipping WireFormat infos
1:                 if (command.getClass() == WireFormatInfo.class) {
1:                     return;
1:                 }
/////////////////////////////////////////////////////////////////////////
1:                     // skipping WireFormat infos
1:                     if (command.getClass() == WireFormatInfo.class) {
0:                         return;
0:                     }
author:Robert Davies
-------------------------------------------------------------------------------
commit:f915da5
/////////////////////////////////////////////////////////////////////////
1: import org.apache.activemq.transport.DefaultTransportListener;
/////////////////////////////////////////////////////////////////////////
1:         this.localTransport.setTransportListener(new DefaultTransportListener() {
/////////////////////////////////////////////////////////////////////////
1:         this.remoteTransport.setTransportListener(new DefaultTransportListener() {
============================================================================