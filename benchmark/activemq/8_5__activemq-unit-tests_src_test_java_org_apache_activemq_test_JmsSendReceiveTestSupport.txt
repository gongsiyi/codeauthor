1:10478c3: /*
1:57b4941:  * Licensed to the Apache Software Foundation (ASF) under one or more
1:57b4941:  * contributor license agreements.  See the NOTICE file distributed with
1:57b4941:  * this work for additional information regarding copyright ownership.
1:57b4941:  * The ASF licenses this file to You under the Apache License, Version 2.0
1:57b4941:  * (the "License"); you may not use this file except in compliance with
1:57b4941:  * the License.  You may obtain a copy of the License at
1:b0c2a40:  *
1:230a86c:  *      http://www.apache.org/licenses/LICENSE-2.0
1:230a86c:  *
1:d29ca2a:  * Unless required by applicable law or agreed to in writing, software
1:d29ca2a:  * distributed under the License is distributed on an "AS IS" BASIS,
1:d29ca2a:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:d29ca2a:  * See the License for the specific language governing permissions and
1:d29ca2a:  * limitations under the License.
1:d29ca2a:  */
1:d29ca2a: package org.apache.activemq.test;
1:230a86c: 
1:93dc39b: import java.util.ArrayList;
1:93dc39b: import java.util.Arrays;
1:93dc39b: import java.util.Collections;
1:93dc39b: import java.util.Date;
1:93dc39b: import java.util.Iterator;
1:93dc39b: import java.util.List;
1:71893f1: import java.util.concurrent.TimeUnit;
1:93dc39b: 
1:d29ca2a: import javax.jms.DeliveryMode;
1:d29ca2a: import javax.jms.Destination;
1:d29ca2a: import javax.jms.JMSException;
1:d29ca2a: import javax.jms.Message;
1:d29ca2a: import javax.jms.MessageConsumer;
1:d29ca2a: import javax.jms.MessageListener;
1:d29ca2a: import javax.jms.MessageProducer;
1:d29ca2a: import javax.jms.Session;
1:d29ca2a: import javax.jms.TextMessage;
1:93dc39b: 
1:8bf987b: import org.slf4j.Logger;
1:8bf987b: import org.slf4j.LoggerFactory;
21:d29ca2a: 
1:10478c3: import junit.framework.AssertionFailedError;
1:10478c3: 
1:32c06a0: public abstract class JmsSendReceiveTestSupport extends org.apache.activemq.TestSupport implements MessageListener {
1:10478c3: 
1:8bf987b:     private static final Logger LOG = LoggerFactory.getLogger(JmsSendReceiveTestSupport.class);
1:01bdc52: 
1:d29ca2a:     protected int messageCount = 100;
1:d29ca2a:     protected String[] data;
1:d29ca2a:     protected Session session;
1:d29ca2a:     protected Session consumeSession;
1:d29ca2a:     protected MessageConsumer consumer;
1:d29ca2a:     protected MessageProducer producer;
1:d29ca2a:     protected Destination consumerDestination;
1:d29ca2a:     protected Destination producerDestination;
1:933eb2f:     protected List<Message> messages = createConcurrentList();
1:d29ca2a:     protected boolean topic = true;
1:230a86c:     protected boolean durable;
1:d29ca2a:     protected int deliveryMode = DeliveryMode.PERSISTENT;
1:d29ca2a:     protected final Object lock = new Object();
1:230a86c:     protected boolean verbose;
1:230a86c:     protected boolean useSeparateSession;
1:230a86c:     protected boolean largeMessages;
1:c2fc820:     protected int largeMessageLoopSize = 4 * 1024;
1:d29ca2a: 
1:d29ca2a:     /*
1:d29ca2a:      * @see junit.framework.TestCase#setUp()
1:d29ca2a:      */
1:10478c3:     @Override
1:d29ca2a:     protected void setUp() throws Exception {
1:d29ca2a:         super.setUp();
1:10478c3:         messages.clear();
1:d29ca2a:         String temp = System.getProperty("messageCount");
1:230a86c: 
1:d29ca2a:         if (temp != null) {
1:d29ca2a:             int i = Integer.parseInt(temp);
1:d29ca2a:             if (i > 0) {
1:d29ca2a:                 messageCount = i;
1:d29ca2a:             }
1:86cbdfd:         }
1:230a86c: 
1:230a86c:         LOG.info("Message count for test case is: " + messageCount);
1:d29ca2a:         data = new String[messageCount];
1:d29ca2a:         for (int i = 0; i < messageCount; i++) {
1:c2fc820:             data[i] = createMessageText(i);
1:d29ca2a:         }
1:d29ca2a:     }
1:230a86c: 
1:c2fc820:     protected String createMessageText(int i) {
1:c2fc820:         if (largeMessages) {
1:c2fc820:             return createMessageBodyText();
1:230a86c:         } else {
1:c2fc820:             return "Text for message: " + i + " at " + new Date();
1:d29ca2a:         }
1:ca067a6:     }
1:230a86c: 
1:c2fc820:     protected String createMessageBodyText() {
1:c2fc820:         StringBuffer buffer = new StringBuffer();
1:c2fc820:         for (int i = 0; i < largeMessageLoopSize; i++) {
1:c2fc820:             buffer.append("0123456789");
1:ca067a6:         }
1:c2fc820:         return buffer.toString();
1:deff260:     }
1:d29ca2a: 
2:d29ca2a:     /**
1:230a86c:      * Test if all the messages sent are being received.
1:10478c3:      *
1:d29ca2a:      * @throws Exception
1:d29ca2a:      */
1:d29ca2a:     public void testSendReceive() throws Exception {
1:765a010:         Thread.sleep(100);
1:765a010: 
1:2a87ad5:         sendMessages();
1:2a87ad5: 
1:2a87ad5:         assertMessagesAreReceived();
1:2a87ad5:         LOG.info("" + data.length + " messages(s) received, closing down connections");
1:2a87ad5:     }
1:2a87ad5: 
1:2a87ad5:     protected void sendMessages() throws Exception {
1:d29ca2a:         for (int i = 0; i < data.length; i++) {
1:ca067a6:             Message message = createMessage(i);
1:deff260:             configureMessage(message);
1:d29ca2a:             if (verbose) {
1:230a86c:                 LOG.info("About to send a message: " + message + " with text: " + data[i]);
1:d29ca2a:             }
1:a49ba6c:             sendMessage(i, message);
1:a49ba6c:         }
1:ca067a6:     }
1:2a87ad5: 
1:a49ba6c:     protected void sendMessage(int index, Message message) throws Exception {
1:10478c3:         producer.send(producerDestination, message);
1:230a86c:     }
1:230a86c: 
1:ca067a6:     protected Message createMessage(int index) throws JMSException {
1:ca067a6:         Message message = session.createTextMessage(data[index]);
1:ca067a6:         return message;
1:d29ca2a:     }
1:a255628: 
1:d29ca2a:     /**
1:deff260:      * A hook to allow the message to be configured such as adding extra headers
1:10478c3:      *
1:230a86c:      * @throws JMSException
1:d29ca2a:      */
1:deff260:     protected void configureMessage(Message message) throws JMSException {
1:d29ca2a:     }
1:d29ca2a: 
1:d29ca2a:     /**
1:230a86c:      * Waits to receive the messages and performs the test if all messages have
1:230a86c:      * been received and are in sequential order.
1:10478c3:      *
1:d29ca2a:      * @throws JMSException
1:d29ca2a:      */
1:d29ca2a:     protected void assertMessagesAreReceived() throws JMSException {
1:d29ca2a:         waitForMessagesToBeDelivered();
1:d29ca2a:         assertMessagesReceivedAreValid(messages);
1:d29ca2a:     }
1:d29ca2a: 
1:d29ca2a:     /**
1:230a86c:      * Tests if the messages have all been received and are in sequential order.
1:10478c3:      *
1:d29ca2a:      * @param receivedMessages
1:d29ca2a:      * @throws JMSException
1:d29ca2a:      */
1:933eb2f:     protected void assertMessagesReceivedAreValid(List<Message> receivedMessages) throws JMSException {
1:933eb2f:         List<Object> copyOfMessages = Arrays.asList(receivedMessages.toArray());
1:d29ca2a:         int counter = 0;
1:230a86c: 
1:d29ca2a:         if (data.length != copyOfMessages.size()) {
1:933eb2f:             for (Iterator<Object> iter = copyOfMessages.iterator(); iter.hasNext();) {
1:ca067a6:                 Object message = iter.next();
1:230a86c:                 LOG.info("<== " + counter++ + " = " + message);
1:d29ca2a:             }
1:d29ca2a:         }
1:230a86c: 
1:ea44017:         assertEquals("Invalid number of messages received", data.length, receivedMessages.size());
1:230a86c: 
1:d29ca2a:         for (int i = 0; i < data.length; i++) {
1:933eb2f:             Message received = receivedMessages.get(i);
1:01bdc52:             try {
1:01bdc52:                 assertMessageValid(i, received);
1:01bdc52:             } catch (AssertionFailedError e) {
1:01bdc52:                 for (int j = 0; j < data.length; j++) {
1:01bdc52:                     Message m = receivedMessages.get(j);
1:01bdc52:                     System.out.println(j+" => "+m.getJMSMessageID());
1:01bdc52:                 }
1:01bdc52:                 throw e;
1:01bdc52:             }
1:d29ca2a:         }
1:d29ca2a:     }
1:d29ca2a: 
1:ca067a6:     protected void assertMessageValid(int index, Message message) throws JMSException {
1:230a86c:         TextMessage textMessage = (TextMessage)message;
1:ca067a6:         String text = textMessage.getText();
1:230a86c: 
1:d29ca2a:         if (verbose) {
1:230a86c:             LOG.info("Received Text: " + text);
1:d29ca2a:         }
1:230a86c: 
1:ca067a6:         assertEquals("Message: " + index, data[index], text);
1:d29ca2a:     }
1:d29ca2a: 
1:d29ca2a:     /**
1:230a86c:      * Waits for the messages to be delivered or when the wait time has been
1:230a86c:      * reached.
1:d29ca2a:      */
1:d29ca2a:     protected void waitForMessagesToBeDelivered() {
1:71893f1:         waitForMessagesToBeDelivered(TimeUnit.MINUTES.toMillis(1));
1:71893f1:     }
1:71893f1: 
1:71893f1:     protected void waitForMessagesToBeDelivered(long maxWaitTime) {
1:d29ca2a:         long waitTime = maxWaitTime;
1:d29ca2a:         long start = (maxWaitTime <= 0) ? 0 : System.currentTimeMillis();
1:230a86c: 
1:d29ca2a:         synchronized (lock) {
1:d29ca2a:             while (messages.size() < data.length && waitTime >= 0) {
1:d29ca2a:                 try {
1:d29ca2a:                     lock.wait(200);
1:230a86c:                 } catch (InterruptedException e) {
1:d29ca2a:                     e.printStackTrace();
1:d29ca2a:                 }
1:230a86c: 
1:d29ca2a:                 waitTime = maxWaitTime - (System.currentTimeMillis() - start);
1:d29ca2a:             }
1:d29ca2a:         }
1:d29ca2a:     }
1:d29ca2a: 
1:d29ca2a:     /**
1:d29ca2a:      * @see javax.jms.MessageListener#onMessage(javax.jms.Message)
1:d29ca2a:      */
1:10478c3:     @Override
1:d29ca2a:     public synchronized void onMessage(Message message) {
1:d29ca2a:         consumeMessage(message, messages);
1:d29ca2a:     }
1:d29ca2a: 
1:d29ca2a:     /**
1:d29ca2a:      * Consumes a received message.
1:10478c3:      *
1:230a86c:      * @param message - a newly received message.
1:230a86c:      * @param messageList - list containing the received messages.
1:d29ca2a:      */
1:933eb2f:     protected void consumeMessage(Message message, List<Message> messageList) {
1:d29ca2a:         if (verbose) {
1:230a86c:             LOG.info("Received message: " + message);
1:d29ca2a:         }
1:230a86c: 
1:d29ca2a:         messageList.add(message);
1:230a86c: 
1:d29ca2a:         if (messageList.size() >= data.length) {
1:d29ca2a:             synchronized (lock) {
1:d29ca2a:                 lock.notifyAll();
1:d29ca2a:             }
1:d29ca2a:         }
1:d29ca2a:     }
1:d29ca2a: 
1:d29ca2a:     /**
1:230a86c:      * Creates a synchronized list.
1:10478c3:      *
1:d29ca2a:      * @return a synchronized view of the specified list.
1:d29ca2a:      */
1:933eb2f:     protected List<Message> createConcurrentList() {
1:933eb2f:         return Collections.synchronizedList(new ArrayList<Message>());
1:d29ca2a:     }
1:d29ca2a: }
============================================================================
author:Hadrian Zbarcea
-------------------------------------------------------------------------------
commit:f9bec8f
author:Timothy Bish
-------------------------------------------------------------------------------
commit:71893f1
/////////////////////////////////////////////////////////////////////////
1: import java.util.concurrent.TimeUnit;
/////////////////////////////////////////////////////////////////////////
1:         waitForMessagesToBeDelivered(TimeUnit.MINUTES.toMillis(1));
1:     }
1: 
1:     protected void waitForMessagesToBeDelivered(long maxWaitTime) {
commit:765a010
/////////////////////////////////////////////////////////////////////////
1:         Thread.sleep(100);
1: 
commit:10478c3
/////////////////////////////////////////////////////////////////////////
1: /*
/////////////////////////////////////////////////////////////////////////
1: import junit.framework.AssertionFailedError;
1: 
1: 
/////////////////////////////////////////////////////////////////////////
1:     @Override
1:         messages.clear();
/////////////////////////////////////////////////////////////////////////
1:      *
/////////////////////////////////////////////////////////////////////////
1:         producer.send(producerDestination, message);
/////////////////////////////////////////////////////////////////////////
1:      *
/////////////////////////////////////////////////////////////////////////
1:      *
/////////////////////////////////////////////////////////////////////////
1:      *
/////////////////////////////////////////////////////////////////////////
1:     @Override
1:      *
/////////////////////////////////////////////////////////////////////////
1:      *
author:Timothy A. Bish
-------------------------------------------------------------------------------
commit:ef24cc9
author:Gary Tully
-------------------------------------------------------------------------------
commit:2a87ad5
/////////////////////////////////////////////////////////////////////////
1:         sendMessages();
1: 
1:         assertMessagesAreReceived();
1:         LOG.info("" + data.length + " messages(s) received, closing down connections");
1:     }
1: 
1:     protected void sendMessages() throws Exception {
/////////////////////////////////////////////////////////////////////////
1: 
commit:32c06a0
/////////////////////////////////////////////////////////////////////////
0: import org.apache.activemq.*;
1: public abstract class JmsSendReceiveTestSupport extends org.apache.activemq.TestSupport implements MessageListener {
author:Hiram R. Chirino
-------------------------------------------------------------------------------
commit:b0c2a40
/////////////////////////////////////////////////////////////////////////
1:  * 
commit:01bdc52
/////////////////////////////////////////////////////////////////////////
0: import junit.framework.AssertionFailedError;
1: 
/////////////////////////////////////////////////////////////////////////
1:             try {
1:                 assertMessageValid(i, received);
1:             } catch (AssertionFailedError e) {
1:                 for (int j = 0; j < data.length; j++) {
1:                     Message m = receivedMessages.get(j);
1:                     System.out.println(j+" => "+m.getJMSMessageID());
1:                 }
1:                 throw e;
1:             }
commit:933eb2f
/////////////////////////////////////////////////////////////////////////
1:     protected List<Message> messages = createConcurrentList();
/////////////////////////////////////////////////////////////////////////
1:     protected void assertMessagesReceivedAreValid(List<Message> receivedMessages) throws JMSException {
1:         List<Object> copyOfMessages = Arrays.asList(receivedMessages.toArray());
1:             for (Iterator<Object> iter = copyOfMessages.iterator(); iter.hasNext();) {
/////////////////////////////////////////////////////////////////////////
1:             Message received = receivedMessages.get(i);
/////////////////////////////////////////////////////////////////////////
1:     protected void consumeMessage(Message message, List<Message> messageList) {
/////////////////////////////////////////////////////////////////////////
1:     protected List<Message> createConcurrentList() {
1:         return Collections.synchronizedList(new ArrayList<Message>());
commit:fc00993
/////////////////////////////////////////////////////////////////////////
0:     private static final Log LOG = LogFactory.getLog(JmsSendReceiveTestSupport.class);
commit:230a86c
/////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////
1:  *      http://www.apache.org/licenses/LICENSE-2.0
/////////////////////////////////////////////////////////////////////////
0:     protected static final Log LOG = LogFactory.getLog(JmsSendReceiveTestSupport.class);
1: 
/////////////////////////////////////////////////////////////////////////
1:     protected boolean durable;
1:     protected boolean verbose;
1:     protected boolean useSeparateSession;
1:     protected boolean largeMessages;
/////////////////////////////////////////////////////////////////////////
1: 
1: 
1:         LOG.info("Message count for test case is: " + messageCount);
1: 
1:         } else {
/////////////////////////////////////////////////////////////////////////
1:      * Test if all the messages sent are being received.
/////////////////////////////////////////////////////////////////////////
1: 
1:                 LOG.info("About to send a message: " + message + " with text: " + data[i]);
1: 
0:         assertMessagesAreReceived();
0:         LOG.info("" + data.length + " messages(s) received, closing down connections");
1:     }
/////////////////////////////////////////////////////////////////////////
1:      * 
1:      * @throws JMSException
1:      * Waits to receive the messages and performs the test if all messages have
1:      * been received and are in sequential order.
/////////////////////////////////////////////////////////////////////////
1:      * Tests if the messages have all been received and are in sequential order.
/////////////////////////////////////////////////////////////////////////
1: 
1:                 LOG.info("<== " + counter++ + " = " + message);
1: 
1: 
0:             Message received = (Message)receivedMessages.get(i);
1:         TextMessage textMessage = (TextMessage)message;
1: 
1:             LOG.info("Received Text: " + text);
1: 
1:      * Waits for the messages to be delivered or when the wait time has been
1:      * reached.
1: 
1:                 } catch (InterruptedException e) {
1: 
/////////////////////////////////////////////////////////////////////////
1:      * @param message - a newly received message.
1:      * @param messageList - list containing the received messages.
1:             LOG.info("Received message: " + message);
1: 
1: 
/////////////////////////////////////////////////////////////////////////
1:      * Creates a synchronized list.
commit:86cbdfd
/////////////////////////////////////////////////////////////////////////
1: }
commit:57b4941
/////////////////////////////////////////////////////////////////////////
1:  * Licensed to the Apache Software Foundation (ASF) under one or more
1:  * contributor license agreements.  See the NOTICE file distributed with
1:  * this work for additional information regarding copyright ownership.
1:  * The ASF licenses this file to You under the Apache License, Version 2.0
1:  * (the "License"); you may not use this file except in compliance with
1:  * the License.  You may obtain a copy of the License at
commit:93dc39b
/////////////////////////////////////////////////////////////////////////
1: import java.util.ArrayList;
1: import java.util.Arrays;
1: import java.util.Collections;
1: import java.util.Date;
1: import java.util.Iterator;
1: import java.util.List;
1: 
/////////////////////////////////////////////////////////////////////////
1: 
0: import org.apache.commons.logging.Log;
0: import org.apache.commons.logging.LogFactory;
0:     protected static final Log log = LogFactory.getLog(JmsSendReceiveTestSupport.class);
commit:a255628
/////////////////////////////////////////////////////////////////////////
1: 
0:         Thread.sleep(1000);
commit:cb3f774
/////////////////////////////////////////////////////////////////////////
0:         Thread.sleep(1000);
commit:48b4869
/////////////////////////////////////////////////////////////////////////
0:  * Copyright 2005-2006 The Apache Software Foundation
commit:d29ca2a
/////////////////////////////////////////////////////////////////////////
1: /**
0:  *
0:  * Copyright 2004 The Apache Software Foundation
0:  *
0:  * Licensed under the Apache License, Version 2.0 (the "License");
0:  * you may not use this file except in compliance with the License.
0:  * You may obtain a copy of the License at
0:  *
0:  * http://www.apache.org/licenses/LICENSE-2.0
0:  *
1:  * Unless required by applicable law or agreed to in writing, software
1:  * distributed under the License is distributed on an "AS IS" BASIS,
1:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:  * See the License for the specific language governing permissions and
1:  * limitations under the License.
1:  */
1: package org.apache.activemq.test;
1: 
1: import javax.jms.DeliveryMode;
1: import javax.jms.Destination;
1: import javax.jms.JMSException;
1: import javax.jms.Message;
1: import javax.jms.MessageConsumer;
1: import javax.jms.MessageListener;
1: import javax.jms.MessageProducer;
1: import javax.jms.Session;
1: import javax.jms.TextMessage;
0: import java.util.ArrayList;
0: import java.util.Arrays;
0: import java.util.Collections;
0: import java.util.Date;
0: import java.util.Iterator;
0: import java.util.List;
1: 
1: /**
0:  * @version $Revision: 1.2 $
1:  */
0: public class JmsSendReceiveTestSupport extends TestSupport implements MessageListener {
0:     private static final org.apache.commons.logging.Log log = org.apache.commons.logging.LogFactory
0:             .getLog(JmsSendReceiveTestSupport.class);
1:     
1:     protected int messageCount = 100;
1:     protected String[] data;
1:     protected Session session;
1:     protected Session consumeSession;
1:     protected MessageConsumer consumer;
1:     protected MessageProducer producer;
1:     protected Destination consumerDestination;
1:     protected Destination producerDestination;
0:     protected List messages = createConcurrentList();
1:     protected boolean topic = true;
0:     protected boolean durable = false;
1:     protected int deliveryMode = DeliveryMode.PERSISTENT;
1:     protected final Object lock = new Object();
0:     protected boolean verbose = false;
0:     protected boolean useSeparateSession = false;
1: 
1:     /*
1:      * @see junit.framework.TestCase#setUp()
1:      */
1:     protected void setUp() throws Exception {
1:         super.setUp();
1:         String temp = System.getProperty("messageCount");
1:         
1:         if (temp != null) {
1:             int i = Integer.parseInt(temp);
1:             if (i > 0) {
1:                 messageCount = i;
1:             }
1:         }
1:         
0:         log.info("Message count for test case is: " + messageCount);
1:         data = new String[messageCount];
1:         
1:         for (int i = 0; i < messageCount; i++) {
0:             data[i] = "Text for message: " + i + " at " + new Date();
1:         }
1:     }
1:     
1:     
1: 
1:     /**
0:      * Test if all the messages sent are being received.  
0:      * 
1:      * @throws Exception
1:      */
1:     public void testSendReceive() throws Exception {
0:         messages.clear();
1:         
1:         for (int i = 0; i < data.length; i++) {
0:             Message message = session.createTextMessage(data[i]);
1:             
1:             if (verbose) {
0:                 log.info("About to send a message: " + message + " with text: " + data[i]);
1:             }
1:             
0:             producer.send(producerDestination, message);
1:         }
1:         
0:         assertMessagesAreReceived();
0:         log.info("" + data.length + " messages(s) received, closing down connections");
1:     }
1: 
1:     /**
0:      * Waits to receive the messages and performs the test if all messages have been received and 
0:      * are in sequential order.  
0:      * 
1:      * @throws JMSException
1:      */
1:     protected void assertMessagesAreReceived() throws JMSException {
1:         waitForMessagesToBeDelivered();
1:         assertMessagesReceivedAreValid(messages);
1:     }
1: 
1:     /**
0:      * Tests if the messages have all been received and are in sequential order. 
0:      * 
1:      * @param receivedMessages
1:      * @throws JMSException
1:      */
0:     protected void assertMessagesReceivedAreValid(List receivedMessages) throws JMSException {
0:         List copyOfMessages = Arrays.asList(receivedMessages.toArray());
1:         int counter = 0;
1:         
1:         if (data.length != copyOfMessages.size()) {
0:             for (Iterator iter = copyOfMessages.iterator(); iter.hasNext();) {
0:                 TextMessage message = (TextMessage) iter.next();
0:                 log.info("<== " + counter++ + " = " + message);
1:             }
1:         }
1:         
0:         assertEquals("Not enough messages received", data.length, receivedMessages.size());
1:         
1:         for (int i = 0; i < data.length; i++) {
0:         	TextMessage received = (TextMessage) receivedMessages.get(i);
0:             String text = received.getText();
1:         
1:             if (verbose) {
0:                 log.info("Received Text: " + text);
1:             }
1:             
0:             assertEquals("Message: " + i, data[i], text);
1:         }
1:     }
1: 
1:     /**
0:      * Waits for the messages to be delivered or when the wait time has been reached. 
1:      */
1:     protected void waitForMessagesToBeDelivered() {
0:         long maxWaitTime = 30000;
1:         long waitTime = maxWaitTime;
1:         long start = (maxWaitTime <= 0) ? 0 : System.currentTimeMillis();
1:         
1:         synchronized (lock) {
1:             while (messages.size() < data.length && waitTime >= 0) {
1:                 try {
1:                     lock.wait(200);
1:                 }
0:                 catch (InterruptedException e) {
1:                     e.printStackTrace();
1:                 }
1:                 
1:                 waitTime = maxWaitTime - (System.currentTimeMillis() - start);
1:             }
1:         }
1:     }
1: 
1: 
1:     /**
1:      * @see javax.jms.MessageListener#onMessage(javax.jms.Message)
1:      */
1:     public synchronized void onMessage(Message message) {
1:         consumeMessage(message, messages);
1:     }
1: 
1:     /**
1:      * Consumes a received message.
0:      * 
0:      * @param message - a newly received message. 
0:      * @param messageList - list containing the received messages. 
1:      */
0:     protected void consumeMessage(Message message, List messageList) {
1:         if (verbose) {
0:             log.info("Received message: " + message);
1:         }
1:        
1:         messageList.add(message);
1:        
1:         if (messageList.size() >= data.length) {
1:             synchronized (lock) {
1:                 lock.notifyAll();
1:             }
1:         }
1:     }
1: 
1:     /**
0:      * Creates a synchronized list. 
0:      * 
1:      * @return a synchronized view of the specified list.
1:      */
0:     protected List createConcurrentList() {
0:         return Collections.synchronizedList(new ArrayList());
1:     }
1: }
author:Bosanac Dejan
-------------------------------------------------------------------------------
commit:8bf987b
/////////////////////////////////////////////////////////////////////////
1: import org.slf4j.Logger;
1: import org.slf4j.LoggerFactory;
1:     private static final Logger LOG = LoggerFactory.getLogger(JmsSendReceiveTestSupport.class);
commit:ea44017
/////////////////////////////////////////////////////////////////////////
1:         assertEquals("Invalid number of messages received", data.length, receivedMessages.size());
commit:a49ba6c
/////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////
1:             sendMessage(i, message);
0:     
1:     protected void sendMessage(int index, Message message) throws Exception {
0:     	producer.send(producerDestination, message);
1:     }
author:James Strachan
-------------------------------------------------------------------------------
commit:ca067a6
/////////////////////////////////////////////////////////////////////////
0: public abstract class JmsSendReceiveTestSupport extends TestSupport implements MessageListener {
/////////////////////////////////////////////////////////////////////////
1:             Message message = createMessage(i);
/////////////////////////////////////////////////////////////////////////
0: 
1:     protected Message createMessage(int index) throws JMSException {
1:         Message message = session.createTextMessage(data[index]);
1:         return message;
1:     }
0: 
/////////////////////////////////////////////////////////////////////////
1:                 Object message = iter.next();
0:                 log.info("<== " + counter++ + " = " + message);
0:         	Message received = (Message) receivedMessages.get(i);
0:             assertMessageValid(i, received);
0: 
1:     protected void assertMessageValid(int index, Message message) throws JMSException {
0:         TextMessage textMessage = (TextMessage) message;
1:         String text = textMessage.getText();
0:       
0:         if (verbose) {
0:             log.info("Received Text: " + text);
1:         }
0:         
1:         assertEquals("Message: " + index, data[index], text);
1:     }
0: 
commit:deff260
/////////////////////////////////////////////////////////////////////////
1:             configureMessage(message);
/////////////////////////////////////////////////////////////////////////
1:      * A hook to allow the message to be configured such as adding extra headers
0:      * @throws JMSException 
0:      */
1:     protected void configureMessage(Message message) throws JMSException {
1:     }
0: 
0: 
0:     /**
commit:72b382d
/////////////////////////////////////////////////////////////////////////
0:         long maxWaitTime = 60000;
commit:c2fc820
/////////////////////////////////////////////////////////////////////////
0:     protected boolean largeMessages = false;
1:     protected int largeMessageLoopSize = 4 * 1024;
/////////////////////////////////////////////////////////////////////////
1:             data[i] = createMessageText(i);
0: 
0: 
1:     protected String createMessageText(int i) {
1:         if (largeMessages) {
1:             return createMessageBodyText();
0:         }
0:         else {
1:             return "Text for message: " + i + " at " + new Date();
0:         }
0:     }
0: 
1:     protected String createMessageBodyText() {
1:         StringBuffer buffer = new StringBuffer();
1:         for (int i = 0; i < largeMessageLoopSize; i++) {
1:             buffer.append("0123456789");
0:         }
1:         return buffer.toString();
0:     }
commit:c8d74e7
/////////////////////////////////////////////////////////////////////////
0:                 log.info("<== " + counter++ + " = " + message.getText());
author:Darwin G. Flores
-------------------------------------------------------------------------------
commit:b182afb
/////////////////////////////////////////////////////////////////////////
0:             Thread.sleep(200);
============================================================================