1:b026971: /**
1:b026971:  * Licensed to the Apache Software Foundation (ASF) under one or more
1:b026971:  * contributor license agreements.  See the NOTICE file distributed with
1:b026971:  * this work for additional information regarding copyright ownership.
1:b026971:  * The ASF licenses this file to You under the Apache License, Version 2.0
1:b026971:  * (the "License"); you may not use this file except in compliance with
1:b026971:  * the License.  You may obtain a copy of the License at
1:b026971:  *
1:b026971:  *      http://www.apache.org/licenses/LICENSE-2.0
1:b026971:  *
1:b026971:  * Unless required by applicable law or agreed to in writing, software
1:b026971:  * distributed under the License is distributed on an "AS IS" BASIS,
1:b026971:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:b026971:  * See the License for the specific language governing permissions and
1:b026971:  * limitations under the License.
1:b026971:  */
1:b026971: 
1:b026971: package org.apache.activemq.broker.util;
1:b026971: 
1:a65ac58: import java.lang.annotation.Annotation;
1:a65ac58: import java.lang.reflect.Method;
1:b026971: import java.text.SimpleDateFormat;
1:b026971: import java.util.Date;
1:b026971: import java.util.HashMap;
1:b026971: import java.util.Map;
1:b026971: 
1:a65ac58: import org.apache.activemq.broker.jmx.Sensitive;
1:a65ac58: 
1:b026971: public class AuditLogEntry {
1:b026971: 
1:b026971:     protected String user = "anonymous";
1:b026971:     protected long timestamp;
1:b026971:     protected String operation;
1:b026971:     protected String remoteAddr;
1:b026971: 
1:b026971:     SimpleDateFormat formatter = new SimpleDateFormat("dd-MM-yyyy HH:mm:ss,SSS");
1:b026971: 
1:b026971:     protected Map<String, Object> parameters = new HashMap<String, Object>();
1:b026971: 
1:b026971:     public String getUser() {
1:b026971:         return user;
2:b026971:     }
1:b026971: 
1:b026971:     public void setUser(String user) {
1:b026971:         this.user = user;
1:b026971:     }
1:b026971: 
1:b026971:     public long getTimestamp() {
1:b026971:         return timestamp;
1:b026971:     }
1:b026971: 
1:b026971:     public void setTimestamp(long timestamp) {
1:b026971:         this.timestamp = timestamp;
1:b026971:     }
1:b026971: 
1:b026971:     public String getFormattedTime() {
1:b026971:         return formatter.format(new Date(timestamp));
1:b026971:     }
1:b026971: 
1:b026971:     public String getOperation() {
1:b026971:         return operation;
1:b026971:     }
1:b026971: 
1:b026971:     public void setOperation(String operation) {
1:b026971:         this.operation = operation;
1:b026971:     }
1:b026971: 
1:b026971:     public String getRemoteAddr() {
1:b026971:         return remoteAddr;
1:b026971:     }
1:b026971: 
1:b026971:     public void setRemoteAddr(String remoteAddr) {
1:b026971:         this.remoteAddr = remoteAddr;
1:b026971:     }
1:b026971: 
1:b026971:     public Map<String, Object> getParameters() {
1:b026971:         return parameters;
1:b026971:     }
1:b026971: 
1:b026971:     public void setParameters(Map<String, Object> parameters) {
1:b026971:         this.parameters = parameters;
1:b026971:     }
1:a65ac58: 
1:a65ac58:    /**
1:a65ac58:     * Method to remove any sensitive parameters before logging.  Replaces any sensitive value with ****.  Sensitive
1:a65ac58:     * values are defined on MBean interface implementation method parameters using the @Sensitive annotation.
1:a65ac58:     *
1:a65ac58:     * @param arguments A array of arguments to test against method signature
1:a65ac58:     * @param method The method to test the arguments against.
1:a65ac58:     */
1:a65ac58:     public static Object[] sanitizeArguments(Object[] arguments, Method method)
1:a65ac58:     {
1:a65ac58:        Object[] sanitizedArguments = arguments.clone();
1:a65ac58:        Annotation[][] parameterAnnotations = method.getParameterAnnotations();
1:a65ac58: 
1:a65ac58:        for (int i = 0; i < arguments.length; i++)
1:a65ac58:        {
1:a65ac58:           for (Annotation annotation : parameterAnnotations[i])
1:a65ac58:           {
1:a65ac58:              if (annotation instanceof Sensitive)
1:a65ac58:              {
1:a65ac58:                 sanitizedArguments[i] = "****";
1:a65ac58:                 break;
1:a65ac58:              }
1:a65ac58:           }
1:a65ac58:        }
1:a65ac58:        return sanitizedArguments;
1:a65ac58:     }
1:a65ac58: }
============================================================================
author:Martyn Taylor
-------------------------------------------------------------------------------
commit:a65ac58
/////////////////////////////////////////////////////////////////////////
1: import java.lang.annotation.Annotation;
1: import java.lang.reflect.Method;
1: import org.apache.activemq.broker.jmx.Sensitive;
1: 
/////////////////////////////////////////////////////////////////////////
1: 
1:    /**
1:     * Method to remove any sensitive parameters before logging.  Replaces any sensitive value with ****.  Sensitive
1:     * values are defined on MBean interface implementation method parameters using the @Sensitive annotation.
1:     *
1:     * @param arguments A array of arguments to test against method signature
1:     * @param method The method to test the arguments against.
1:     */
1:     public static Object[] sanitizeArguments(Object[] arguments, Method method)
1:     {
1:        Object[] sanitizedArguments = arguments.clone();
1:        Annotation[][] parameterAnnotations = method.getParameterAnnotations();
1: 
1:        for (int i = 0; i < arguments.length; i++)
1:        {
1:           for (Annotation annotation : parameterAnnotations[i])
1:           {
1:              if (annotation instanceof Sensitive)
1:              {
1:                 sanitizedArguments[i] = "****";
1:                 break;
1:              }
1:           }
1:        }
1:        return sanitizedArguments;
1:     }
1: }
author:Hiram R. Chirino
-------------------------------------------------------------------------------
commit:58aca86
author:Bosanac Dejan
-------------------------------------------------------------------------------
commit:b026971
/////////////////////////////////////////////////////////////////////////
1: /**
1:  * Licensed to the Apache Software Foundation (ASF) under one or more
1:  * contributor license agreements.  See the NOTICE file distributed with
1:  * this work for additional information regarding copyright ownership.
1:  * The ASF licenses this file to You under the Apache License, Version 2.0
1:  * (the "License"); you may not use this file except in compliance with
1:  * the License.  You may obtain a copy of the License at
1:  *
1:  *      http://www.apache.org/licenses/LICENSE-2.0
1:  *
1:  * Unless required by applicable law or agreed to in writing, software
1:  * distributed under the License is distributed on an "AS IS" BASIS,
1:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:  * See the License for the specific language governing permissions and
1:  * limitations under the License.
1:  */
1: 
1: package org.apache.activemq.broker.util;
1: 
1: import java.text.SimpleDateFormat;
1: import java.util.Date;
1: import java.util.HashMap;
1: import java.util.Map;
1: 
1: public class AuditLogEntry {
1: 
1:     protected String user = "anonymous";
1:     protected long timestamp;
1:     protected String operation;
1:     protected String remoteAddr;
1: 
1:     SimpleDateFormat formatter = new SimpleDateFormat("dd-MM-yyyy HH:mm:ss,SSS");
1: 
1:     protected Map<String, Object> parameters = new HashMap<String, Object>();
1: 
1:     public String getUser() {
1:         return user;
1:     }
1: 
1:     public void setUser(String user) {
1:         this.user = user;
1:     }
1: 
1:     public long getTimestamp() {
1:         return timestamp;
1:     }
1: 
1:     public void setTimestamp(long timestamp) {
1:         this.timestamp = timestamp;
1:     }
1: 
1:     public String getFormattedTime() {
1:         return formatter.format(new Date(timestamp));
1:     }
1: 
1:     public String getOperation() {
1:         return operation;
1:     }
1: 
1:     public void setOperation(String operation) {
1:         this.operation = operation;
1:     }
1: 
1:     public String getRemoteAddr() {
1:         return remoteAddr;
1:     }
1: 
1:     public void setRemoteAddr(String remoteAddr) {
1:         this.remoteAddr = remoteAddr;
1:     }
1: 
1:     public Map<String, Object> getParameters() {
1:         return parameters;
1:     }
1: 
1:     public void setParameters(Map<String, Object> parameters) {
1:         this.parameters = parameters;
1:     }
1: }
============================================================================