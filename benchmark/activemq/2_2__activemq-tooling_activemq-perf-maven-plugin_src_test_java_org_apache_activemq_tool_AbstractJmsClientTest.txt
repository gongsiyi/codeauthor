1:9f53e2b: /**
1:9f53e2b:  * Licensed to the Apache Software Foundation (ASF) under one or more
1:9f53e2b:  * contributor license agreements.  See the NOTICE file distributed with
1:9f53e2b:  * this work for additional information regarding copyright ownership.
1:9f53e2b:  * The ASF licenses this file to You under the Apache License, Version 2.0
1:9f53e2b:  * (the "License"); you may not use this file except in compliance with
1:9f53e2b:  * the License.  You may obtain a copy of the License at
1:9f53e2b:  *
1:9f53e2b:  *      http://www.apache.org/licenses/LICENSE-2.0
1:9f53e2b:  *
1:9f53e2b:  * Unless required by applicable law or agreed to in writing, software
1:9f53e2b:  * distributed under the License is distributed on an "AS IS" BASIS,
1:9f53e2b:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:9f53e2b:  * See the License for the specific language governing permissions and
1:9f53e2b:  * limitations under the License.
1:9f53e2b:  */
1:6dd47bb: package org.apache.activemq.tool;
1:6dd47bb: 
1:46bc26c: import static org.apache.activemq.command.ActiveMQDestination.*;
1:6dd47bb: import static org.junit.Assert.assertEquals;
1:6dd47bb: 
1:6dd47bb: import java.net.URI;
1:6dd47bb: 
1:6dd47bb: import javax.jms.ConnectionFactory;
1:6dd47bb: import javax.jms.Destination;
1:6dd47bb: import javax.jms.JMSException;
1:6dd47bb: 
1:6dd47bb: import org.apache.activemq.ActiveMQConnectionFactory;
1:6dd47bb: import org.apache.activemq.broker.BrokerFactory;
1:6dd47bb: import org.apache.activemq.broker.BrokerService;
1:6dd47bb: import org.apache.activemq.command.ActiveMQDestination;
1:6dd47bb: import org.apache.activemq.tool.properties.JmsClientProperties;
1:6dd47bb: import org.junit.AfterClass;
1:6dd47bb: import org.junit.Before;
1:6dd47bb: import org.junit.BeforeClass;
1:6dd47bb: import org.junit.Test;
1:6dd47bb: 
1:6dd47bb: public class AbstractJmsClientTest {
1:6dd47bb: 
1:6dd47bb:     public class NullJmsClient extends AbstractJmsClient {
1:6dd47bb:         private JmsClientProperties client;
1:6dd47bb: 
1:6dd47bb:         public NullJmsClient(ConnectionFactory factory) {
1:6dd47bb:             super(factory);
1:6dd47bb:         }
1:6dd47bb: 
1:6dd47bb:         @Override
1:6dd47bb:         public JmsClientProperties getClient() {
1:6dd47bb:             return client;
1:6dd47bb:         }
1:6dd47bb: 
1:6dd47bb:         @Override
1:6dd47bb:         public void setClient(JmsClientProperties client) {
1:6dd47bb:             this.client = client;
1:6dd47bb:         }
1:6dd47bb:     }
1:6dd47bb: 
1:6dd47bb:     private final String DEFAULT_DEST = "TEST.FOO";
1:6dd47bb:     private static BrokerService brokerService;
1:6dd47bb:     private static ActiveMQConnectionFactory connectionFactory;
1:6dd47bb: 
1:6dd47bb:     private AbstractJmsClient jmsClient;
1:6dd47bb:     private JmsClientProperties clientProperties;
1:6dd47bb: 
1:6dd47bb:     @BeforeClass
1:6dd47bb:     public static void setUpBrokerAndConnectionFactory() throws Exception {
1:6dd47bb:         brokerService = BrokerFactory.createBroker(new URI("broker://()/localhost?persistent=false"));
1:6dd47bb:         brokerService.start();
1:6dd47bb:         connectionFactory = new ActiveMQConnectionFactory("vm://localhost");
1:6dd47bb:     }
1:6dd47bb: 
1:6dd47bb:     @AfterClass
1:6dd47bb:     public static void tearDownBroker() throws Exception {
1:6dd47bb:         brokerService.stop();
1:6dd47bb:     }
1:6dd47bb: 
1:6dd47bb:     @Before
1:6dd47bb:     public void setUp() {
1:6dd47bb:         jmsClient = new NullJmsClient(connectionFactory);
1:6dd47bb:         clientProperties = new JmsClientProperties();
1:6dd47bb:         clientProperties.setDestName(DEFAULT_DEST);
1:6dd47bb:         jmsClient.setClient(clientProperties);
1:6dd47bb:     }
1:6dd47bb: 
1:6dd47bb:     @Test
1:6dd47bb:     public void testCreateDestination() throws JMSException {
1:6dd47bb:         assertDestinationNameType("dest", TOPIC_TYPE,
1:6dd47bb:                 asAmqDest(jmsClient.createDestination("dest")));
1:6dd47bb:     }
1:6dd47bb: 
1:6dd47bb:     @Test
1:6dd47bb:     public void testCreateDestination_topic() throws JMSException {
1:6dd47bb:         assertDestinationNameType("dest", TOPIC_TYPE,
1:6dd47bb:                 asAmqDest(jmsClient.createDestination("topic://dest")));
1:6dd47bb:     }
1:6dd47bb: 
1:6dd47bb:     @Test
1:6dd47bb:     public void testCreateDestination_queue() throws JMSException {
1:6dd47bb:         assertDestinationNameType("dest", QUEUE_TYPE,
1:6dd47bb:                 asAmqDest(jmsClient.createDestination("queue://dest")));
1:6dd47bb:     }
1:6dd47bb: 
1:6dd47bb:     @Test
1:46bc26c:     public void testCreateDestination_tempQueue() throws JMSException {
1:46bc26c:         assertDestinationType(TEMP_QUEUE_TYPE,
1:46bc26c:                 asAmqDest(jmsClient.createDestination("temp-queue://dest")));
1:46bc26c:     }
1:46bc26c: 
1:46bc26c:     @Test
1:46bc26c:     public void testCreateDestination_tempTopic() throws JMSException {
1:46bc26c:         assertDestinationType(TEMP_TOPIC_TYPE,
1:46bc26c:                 asAmqDest(jmsClient.createDestination("temp-topic://dest")));
1:46bc26c:     }
1:46bc26c: 
1:46bc26c:     @Test
1:6dd47bb:     public void testCreateDestinations_commaSeparated() throws JMSException {
1:6dd47bb:         clientProperties.setDestName("queue://foo,topic://cheese");
1:6dd47bb:         Destination[] destinations = jmsClient.createDestinations(1);
1:6dd47bb:         assertEquals(2, destinations.length);
1:6dd47bb:         assertDestinationNameType("foo", QUEUE_TYPE, asAmqDest(destinations[0]));
1:6dd47bb:         assertDestinationNameType("cheese", TOPIC_TYPE, asAmqDest(destinations[1]));
1:6dd47bb:     }
1:6dd47bb: 
1:6dd47bb:     @Test
1:6dd47bb:     public void testCreateDestinations_multipleComposite() throws JMSException {
1:6dd47bb:         clientProperties.setDestComposite(true);
1:6dd47bb:         clientProperties.setDestName("queue://foo,queue://cheese");
1:6dd47bb:         Destination[] destinations = jmsClient.createDestinations(1);
1:6dd47bb:         assertEquals(1, destinations.length);
1:6dd47bb:         // suffixes should be added
1:6dd47bb:         assertDestinationNameType("foo,cheese", QUEUE_TYPE, asAmqDest(destinations[0]));
1:6dd47bb:     }
1:6dd47bb: 
1:6dd47bb:     @Test
1:6dd47bb:     public void testCreateDestinations() throws JMSException {
1:6dd47bb:         Destination[] destinations = jmsClient.createDestinations(1);
1:6dd47bb:         assertEquals(1, destinations.length);
1:6dd47bb:         assertDestinationNameType(DEFAULT_DEST, TOPIC_TYPE, asAmqDest(destinations[0]));
1:6dd47bb:     }
1:6dd47bb: 
1:6dd47bb:     @Test
1:6dd47bb:     public void testCreateDestinations_multiple() throws JMSException {
1:6dd47bb:         Destination[] destinations = jmsClient.createDestinations(2);
1:6dd47bb:         assertEquals(2, destinations.length);
1:6dd47bb:         // suffixes should be added
1:6dd47bb:         assertDestinationNameType(DEFAULT_DEST + ".0", TOPIC_TYPE, asAmqDest(destinations[0]));
1:6dd47bb:         assertDestinationNameType(DEFAULT_DEST + ".1", TOPIC_TYPE, asAmqDest(destinations[1]));
1:6dd47bb:     }
1:6dd47bb: 
1:6dd47bb:     @Test
1:6dd47bb:     public void testCreateDestinations_multipleCommaSeparated() throws JMSException {
1:6dd47bb:         clientProperties.setDestName("queue://foo,topic://cheese");
1:6dd47bb:         Destination[] destinations = jmsClient.createDestinations(2);
1:6dd47bb:         assertEquals(4, destinations.length);
1:6dd47bb:         // suffixes should be added
1:6dd47bb:         assertDestinationNameType("foo.0", QUEUE_TYPE, asAmqDest(destinations[0]));
1:6dd47bb:         assertDestinationNameType("foo.1", QUEUE_TYPE, asAmqDest(destinations[1]));
1:6dd47bb:         assertDestinationNameType("cheese.0", TOPIC_TYPE, asAmqDest(destinations[2]));
1:6dd47bb:         assertDestinationNameType("cheese.1", TOPIC_TYPE, asAmqDest(destinations[3]));
1:6dd47bb:     }
1:6dd47bb: 
1:6dd47bb:     @Test
1:6dd47bb:     public void testCreateDestinations_composite() throws JMSException {
1:6dd47bb:         clientProperties.setDestComposite(true);
1:6dd47bb:         Destination[] destinations = jmsClient.createDestinations(2);
1:6dd47bb:         assertEquals(1, destinations.length);
1:6dd47bb:         // suffixes should be added
1:6dd47bb:         String expectedDestName = DEFAULT_DEST + ".0," + DEFAULT_DEST + ".1";
1:6dd47bb:         assertDestinationNameType(expectedDestName, TOPIC_TYPE, asAmqDest(destinations[0]));
1:6dd47bb:     }
1:6dd47bb: 
1:6dd47bb:     @Test
1:6dd47bb:     public void testCreateDestinations_compositeQueue() throws JMSException {
1:6dd47bb:         clientProperties.setDestComposite(true);
1:6dd47bb:         clientProperties.setDestName("queue://" + DEFAULT_DEST);
1:6dd47bb:         Destination[] destinations = jmsClient.createDestinations(2);
1:6dd47bb:         assertEquals(1, destinations.length);
1:6dd47bb:         // suffixes should be added
1:6dd47bb:         String expectedDestName = DEFAULT_DEST + ".0," + DEFAULT_DEST + ".1";
1:6dd47bb:         assertDestinationNameType(expectedDestName, QUEUE_TYPE, asAmqDest(destinations[0]));
1:6dd47bb:     }
1:6dd47bb: 
1:6dd47bb:     @Test
1:6dd47bb:     public void testCreateDestinations_compositeCommaSeparated() throws JMSException {
1:6dd47bb:         clientProperties.setDestComposite(true);
1:6dd47bb:         clientProperties.setDestName("queue://foo,topic://cheese");
1:6dd47bb:         Destination[] destinations = jmsClient.createDestinations(2);
1:6dd47bb:         assertEquals(2, destinations.length);
1:6dd47bb: 
1:6dd47bb:         assertDestinationNameType("foo.0,foo.1", QUEUE_TYPE, asAmqDest(destinations[0]));
1:6dd47bb:         assertDestinationNameType("cheese.0,cheese.1", TOPIC_TYPE, asAmqDest(destinations[1]));
1:6dd47bb:     }
1:6dd47bb: 
1:6dd47bb:     private void assertDestinationNameType(String physicalName, byte destinationType, ActiveMQDestination destination) {
1:6dd47bb:         assertEquals(destinationType, destination.getDestinationType());
1:6dd47bb:         assertEquals(physicalName, destination.getPhysicalName());
1:6dd47bb:     }
1:6dd47bb: 
1:46bc26c:     private void assertDestinationType(byte destinationType, ActiveMQDestination destination) {
1:46bc26c:         assertEquals(destinationType, destination.getDestinationType());
1:46bc26c:     }
1:46bc26c: 
1:6dd47bb:     private ActiveMQDestination asAmqDest(Destination destination) {
1:6dd47bb:         return (ActiveMQDestination) destination;
1:6dd47bb:     }
1:6dd47bb: }
============================================================================
author:Dejan Bosanac
-------------------------------------------------------------------------------
commit:9f53e2b
/////////////////////////////////////////////////////////////////////////
1: /**
1:  * Licensed to the Apache Software Foundation (ASF) under one or more
1:  * contributor license agreements.  See the NOTICE file distributed with
1:  * this work for additional information regarding copyright ownership.
1:  * The ASF licenses this file to You under the Apache License, Version 2.0
1:  * (the "License"); you may not use this file except in compliance with
1:  * the License.  You may obtain a copy of the License at
1:  *
1:  *      http://www.apache.org/licenses/LICENSE-2.0
1:  *
1:  * Unless required by applicable law or agreed to in writing, software
1:  * distributed under the License is distributed on an "AS IS" BASIS,
1:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:  * See the License for the specific language governing permissions and
1:  * limitations under the License.
1:  */
author:Timothy Bish
-------------------------------------------------------------------------------
commit:46bc26c
/////////////////////////////////////////////////////////////////////////
1: import static org.apache.activemq.command.ActiveMQDestination.*;
/////////////////////////////////////////////////////////////////////////
1:     public void testCreateDestination_tempQueue() throws JMSException {
1:         assertDestinationType(TEMP_QUEUE_TYPE,
1:                 asAmqDest(jmsClient.createDestination("temp-queue://dest")));
1:     }
1: 
1:     @Test
1:     public void testCreateDestination_tempTopic() throws JMSException {
1:         assertDestinationType(TEMP_TOPIC_TYPE,
1:                 asAmqDest(jmsClient.createDestination("temp-topic://dest")));
1:     }
1: 
1:     @Test
/////////////////////////////////////////////////////////////////////////
1:     private void assertDestinationType(byte destinationType, ActiveMQDestination destination) {
1:         assertEquals(destinationType, destination.getDestinationType());
1:     }
1: 
commit:6dd47bb
/////////////////////////////////////////////////////////////////////////
1: package org.apache.activemq.tool;
1: 
0: import static org.apache.activemq.command.ActiveMQDestination.QUEUE_TYPE;
0: import static org.apache.activemq.command.ActiveMQDestination.TOPIC_TYPE;
1: import static org.junit.Assert.assertEquals;
1: 
1: import java.net.URI;
1: 
1: import javax.jms.ConnectionFactory;
1: import javax.jms.Destination;
1: import javax.jms.JMSException;
1: 
1: import org.apache.activemq.ActiveMQConnectionFactory;
1: import org.apache.activemq.broker.BrokerFactory;
1: import org.apache.activemq.broker.BrokerService;
1: import org.apache.activemq.command.ActiveMQDestination;
1: import org.apache.activemq.tool.properties.JmsClientProperties;
1: import org.junit.AfterClass;
1: import org.junit.Before;
1: import org.junit.BeforeClass;
1: import org.junit.Test;
1: 
1: public class AbstractJmsClientTest {
1: 
1:     public class NullJmsClient extends AbstractJmsClient {
1:         private JmsClientProperties client;
1: 
1:         public NullJmsClient(ConnectionFactory factory) {
1:             super(factory);
1:         }
1: 
1:         @Override
1:         public JmsClientProperties getClient() {
1:             return client;
1:         }
1: 
1:         @Override
1:         public void setClient(JmsClientProperties client) {
1:             this.client = client;
1:         }
1:     }
1: 
1:     private final String DEFAULT_DEST = "TEST.FOO";
1:     private static BrokerService brokerService;
1:     private static ActiveMQConnectionFactory connectionFactory;
1: 
1:     private AbstractJmsClient jmsClient;
1:     private JmsClientProperties clientProperties;
1: 
1:     @BeforeClass
1:     public static void setUpBrokerAndConnectionFactory() throws Exception {
1:         brokerService = BrokerFactory.createBroker(new URI("broker://()/localhost?persistent=false"));
1:         brokerService.start();
1:         connectionFactory = new ActiveMQConnectionFactory("vm://localhost");
1:     }
1: 
1:     @AfterClass
1:     public static void tearDownBroker() throws Exception {
1:         brokerService.stop();
1:     }
1: 
1:     @Before
1:     public void setUp() {
1:         jmsClient = new NullJmsClient(connectionFactory);
1:         clientProperties = new JmsClientProperties();
1:         clientProperties.setDestName(DEFAULT_DEST);
1:         jmsClient.setClient(clientProperties);
1:     }
1: 
1:     @Test
1:     public void testCreateDestination() throws JMSException {
1:         assertDestinationNameType("dest", TOPIC_TYPE,
1:                 asAmqDest(jmsClient.createDestination("dest")));
1:     }
1: 
1:     @Test
1:     public void testCreateDestination_topic() throws JMSException {
1:         assertDestinationNameType("dest", TOPIC_TYPE,
1:                 asAmqDest(jmsClient.createDestination("topic://dest")));
1:     }
1: 
1:     @Test
1:     public void testCreateDestination_queue() throws JMSException {
1:         assertDestinationNameType("dest", QUEUE_TYPE,
1:                 asAmqDest(jmsClient.createDestination("queue://dest")));
1:     }
1: 
1:     @Test
1:     public void testCreateDestinations_commaSeparated() throws JMSException {
1:         clientProperties.setDestName("queue://foo,topic://cheese");
1:         Destination[] destinations = jmsClient.createDestinations(1);
1:         assertEquals(2, destinations.length);
1:         assertDestinationNameType("foo", QUEUE_TYPE, asAmqDest(destinations[0]));
1:         assertDestinationNameType("cheese", TOPIC_TYPE, asAmqDest(destinations[1]));
1:     }
1: 
1:     @Test
1:     public void testCreateDestinations_multipleComposite() throws JMSException {
1:         clientProperties.setDestComposite(true);
1:         clientProperties.setDestName("queue://foo,queue://cheese");
1:         Destination[] destinations = jmsClient.createDestinations(1);
1:         assertEquals(1, destinations.length);
1:         // suffixes should be added
1:         assertDestinationNameType("foo,cheese", QUEUE_TYPE, asAmqDest(destinations[0]));
1:     }
1: 
1:     @Test
1:     public void testCreateDestinations() throws JMSException {
1:         Destination[] destinations = jmsClient.createDestinations(1);
1:         assertEquals(1, destinations.length);
1:         assertDestinationNameType(DEFAULT_DEST, TOPIC_TYPE, asAmqDest(destinations[0]));
1:     }
1: 
1:     @Test
1:     public void testCreateDestinations_multiple() throws JMSException {
1:         Destination[] destinations = jmsClient.createDestinations(2);
1:         assertEquals(2, destinations.length);
1:         // suffixes should be added
1:         assertDestinationNameType(DEFAULT_DEST + ".0", TOPIC_TYPE, asAmqDest(destinations[0]));
1:         assertDestinationNameType(DEFAULT_DEST + ".1", TOPIC_TYPE, asAmqDest(destinations[1]));
1:     }
1: 
1:     @Test
1:     public void testCreateDestinations_multipleCommaSeparated() throws JMSException {
1:         clientProperties.setDestName("queue://foo,topic://cheese");
1:         Destination[] destinations = jmsClient.createDestinations(2);
1:         assertEquals(4, destinations.length);
1:         // suffixes should be added
1:         assertDestinationNameType("foo.0", QUEUE_TYPE, asAmqDest(destinations[0]));
1:         assertDestinationNameType("foo.1", QUEUE_TYPE, asAmqDest(destinations[1]));
1:         assertDestinationNameType("cheese.0", TOPIC_TYPE, asAmqDest(destinations[2]));
1:         assertDestinationNameType("cheese.1", TOPIC_TYPE, asAmqDest(destinations[3]));
1:     }
1: 
1:     @Test
1:     public void testCreateDestinations_composite() throws JMSException {
1:         clientProperties.setDestComposite(true);
1:         Destination[] destinations = jmsClient.createDestinations(2);
1:         assertEquals(1, destinations.length);
1:         // suffixes should be added
1:         String expectedDestName = DEFAULT_DEST + ".0," + DEFAULT_DEST + ".1";
1:         assertDestinationNameType(expectedDestName, TOPIC_TYPE, asAmqDest(destinations[0]));
1:     }
1: 
1:     @Test
1:     public void testCreateDestinations_compositeQueue() throws JMSException {
1:         clientProperties.setDestComposite(true);
1:         clientProperties.setDestName("queue://" + DEFAULT_DEST);
1:         Destination[] destinations = jmsClient.createDestinations(2);
1:         assertEquals(1, destinations.length);
1:         // suffixes should be added
1:         String expectedDestName = DEFAULT_DEST + ".0," + DEFAULT_DEST + ".1";
1:         assertDestinationNameType(expectedDestName, QUEUE_TYPE, asAmqDest(destinations[0]));
1:     }
1: 
1:     @Test
1:     public void testCreateDestinations_compositeCommaSeparated() throws JMSException {
1:         clientProperties.setDestComposite(true);
1:         clientProperties.setDestName("queue://foo,topic://cheese");
1:         Destination[] destinations = jmsClient.createDestinations(2);
1:         assertEquals(2, destinations.length);
1: 
1:         assertDestinationNameType("foo.0,foo.1", QUEUE_TYPE, asAmqDest(destinations[0]));
1:         assertDestinationNameType("cheese.0,cheese.1", TOPIC_TYPE, asAmqDest(destinations[1]));
1:     }
1: 
1:     private void assertDestinationNameType(String physicalName, byte destinationType, ActiveMQDestination destination) {
1:         assertEquals(destinationType, destination.getDestinationType());
1:         assertEquals(physicalName, destination.getPhysicalName());
1:     }
1: 
1:     private ActiveMQDestination asAmqDest(Destination destination) {
1:         return (ActiveMQDestination) destination;
1:     }
1: }
============================================================================