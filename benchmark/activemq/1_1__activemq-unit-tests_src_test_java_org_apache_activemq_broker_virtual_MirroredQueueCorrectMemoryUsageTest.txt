1:d44513a: /**
1:d44513a:  * Licensed to the Apache Software Foundation (ASF) under one or more
1:d44513a:  * contributor license agreements.  See the NOTICE file distributed with
1:d44513a:  * this work for additional information regarding copyright ownership.
1:d44513a:  * The ASF licenses this file to You under the Apache License, Version 2.0
1:d44513a:  * (the "License"); you may not use this file except in compliance with
1:d44513a:  * the License.  You may obtain a copy of the License at
1:d44513a:  *
1:d44513a:  *      http://www.apache.org/licenses/LICENSE-2.0
1:d44513a:  *
1:d44513a:  * Unless required by applicable law or agreed to in writing, software
1:d44513a:  * distributed under the License is distributed on an "AS IS" BASIS,
1:d44513a:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:d44513a:  * See the License for the specific language governing permissions and
1:d44513a:  * limitations under the License.
1:d44513a:  */
1:d44513a: package org.apache.activemq.broker.virtual;
1:d44513a: 
1:d44513a: import java.util.Arrays;
1:d44513a: import java.util.LinkedList;
1:d44513a: import java.util.List;
1:d44513a: 
1:d44513a: import javax.jms.Connection;
1:d44513a: import javax.jms.DeliveryMode;
1:d44513a: import javax.jms.Destination;
1:d44513a: import javax.jms.MessageProducer;
1:d44513a: import javax.jms.Session;
1:d44513a: 
1:d44513a: import org.apache.activemq.EmbeddedBrokerTestSupport;
1:d44513a: import org.apache.activemq.broker.BrokerService;
1:d44513a: import org.apache.activemq.broker.region.DestinationInterceptor;
1:d44513a: import org.apache.activemq.broker.region.policy.PolicyEntry;
1:d44513a: import org.apache.activemq.broker.region.policy.PolicyMap;
1:d44513a: import org.apache.activemq.broker.region.virtual.MirroredQueue;
1:d44513a: import org.apache.activemq.command.ActiveMQDestination;
1:d44513a: import org.apache.activemq.store.kahadb.KahaDBPersistenceAdapter;
1:d44513a: import org.apache.activemq.usage.MemoryUsage;
1:d44513a: import org.apache.activemq.usage.StoreUsage;
1:d44513a: import org.apache.activemq.usage.SystemUsage;
1:d44513a: import org.apache.activemq.usage.TempUsage;
1:d44513a: import org.apache.activemq.util.IOHelper;
1:d44513a: import org.junit.After;
1:d44513a: import org.junit.Before;
1:d44513a: import org.junit.Test;
1:d44513a: import org.slf4j.Logger;
1:d44513a: import org.slf4j.LoggerFactory;
1:d44513a: import org.springframework.util.Assert;
1:d44513a: 
1:d44513a: /**
1:d44513a:  * This test will determine that the producer flow control does not kick in.
1:d44513a:  * The original MirroredQueue implementation was causing the queue to update
1:d44513a:  * the topic memory usage instead of the queue memory usage.
1:d44513a:  * The reason is that the message memory usage instance will not be updated
1:d44513a:  * unless it is null.  This was the case when the message was initially sent
1:d44513a:  * to the topic but then it was non-null when it was being sent to the queue.
1:d44513a:  * When the region destination was set, the associated memory usage was not
1:d44513a:  * updated to the passed queue destination and thus the memory usage of the
1:d44513a:  * topic was being updated instead.
1:d44513a:  *
1:d44513a:  * @author Claudio Corsi
1:d44513a:  */
1:d44513a: public class MirroredQueueCorrectMemoryUsageTest extends EmbeddedBrokerTestSupport {
1:d44513a: 
1:d44513a:     private static final Logger logger = LoggerFactory.getLogger(MirroredQueueCorrectMemoryUsageTest.class);
1:d44513a: 
1:d44513a:     private static final long ONE_MB = 0x0100000;
1:d44513a:     private static final long TEN_MB = ONE_MB * 10;
1:d44513a:     private static final long TWENTY_MB = TEN_MB * 2;
1:d44513a: 
1:d44513a:     private static final String CREATED_STATIC_FOR_PERSISTENT = "created.static.for.persistent";
1:d44513a: 
1:d44513a:     @Override
1:d44513a:     protected boolean isPersistent() {
1:d44513a:         return true;
1:d44513a:     }
1:d44513a: 
1:d44513a:     @Override
1:d44513a:     protected BrokerService createBroker() throws Exception {
1:d44513a:         // Create the broker service instance....
1:d44513a:         BrokerService broker = super.createBroker();
1:d44513a:         // Create and add the mirrored queue destination interceptor ....
1:d44513a:         DestinationInterceptor[] destinationInterceptors = new DestinationInterceptor[1];
1:d44513a:         MirroredQueue mq = new MirroredQueue();
1:d44513a:         mq.setCopyMessage(true);
1:d44513a:         mq.setPrefix("");
1:d44513a:         mq.setPostfix(".qmirror");
1:d44513a:         destinationInterceptors[0] = mq;
1:d44513a:         broker.setDestinationInterceptors(destinationInterceptors);
1:d44513a:         // Create the destination policy for the topics and queues
1:d44513a:         PolicyMap policyMap = new PolicyMap();
1:d44513a:         List<PolicyEntry> entries = new LinkedList<PolicyEntry>();
1:d44513a:         // Create Topic policy entry
1:d44513a:         PolicyEntry policyEntry = new PolicyEntry();
1:d44513a:         super.useTopic = true;
1:d44513a:         ActiveMQDestination destination = super.createDestination(">");
1:d44513a:         Assert.isTrue(destination.isTopic(), "Created destination was not a topic");
1:d44513a:         policyEntry.setDestination(destination);
1:d44513a:         policyEntry.setProducerFlowControl(true);
1:d44513a:         policyEntry.setMemoryLimit(ONE_MB); // x10
1:d44513a:         entries.add(policyEntry);
1:d44513a:         // Create Queue policy entry
1:d44513a:         policyEntry = new PolicyEntry();
1:d44513a:         super.useTopic = false;
1:d44513a:         destination = super.createDestination(CREATED_STATIC_FOR_PERSISTENT);
1:d44513a:         Assert.isTrue(destination.isQueue(), "Created destination was not a queue");
1:d44513a:         policyEntry.setDestination(destination);
1:d44513a:         policyEntry.setProducerFlowControl(true);
1:d44513a:         policyEntry.setMemoryLimit(TEN_MB);
1:d44513a:         entries.add(policyEntry);
1:d44513a:         policyMap.setPolicyEntries(entries);
1:d44513a:         broker.setDestinationPolicy(policyMap);
1:d44513a:         // Set destinations
1:d44513a:         broker.setDestinations(new ActiveMQDestination[] { destination });
1:d44513a:         // Set system usage
1:d44513a:         SystemUsage memoryManager = new SystemUsage();
1:d44513a:         MemoryUsage memoryUsage = new MemoryUsage();
1:d44513a:         memoryUsage.setLimit(TEN_MB);
1:d44513a:         memoryManager.setMemoryUsage(memoryUsage);
1:d44513a:         StoreUsage storeUsage = new StoreUsage();
1:d44513a:         storeUsage.setLimit(TWENTY_MB);
1:d44513a:         memoryManager.setStoreUsage(storeUsage);
1:d44513a:         TempUsage tempDiskUsage = new TempUsage();
1:d44513a:         tempDiskUsage.setLimit(TEN_MB);
1:d44513a:         memoryManager.setTempUsage(tempDiskUsage);
1:d44513a:         broker.setSystemUsage(memoryManager);
1:d44513a:         // Set the persistent adapter
1:d44513a:         KahaDBPersistenceAdapter persistenceAdapter = new KahaDBPersistenceAdapter();
1:d44513a:         persistenceAdapter.setJournalMaxFileLength((int)TEN_MB);
1:d44513a:         // Delete all current messages...
1:d44513a:         IOHelper.deleteFile(persistenceAdapter.getDirectory());
1:d44513a:         broker.setPersistenceAdapter(persistenceAdapter);
1:d44513a:         return broker;
1:d44513a:     }
1:d44513a: 
1:d44513a:     @Before
1:d44513a:     protected void setUp() throws Exception {
1:d44513a:         super.setUp();
1:d44513a:     }
1:d44513a: 
1:d44513a:     @After
1:d44513a:     protected void tearDown() throws Exception {
1:d44513a:         super.tearDown();
1:d44513a:     }
1:d44513a: 
1:d44513a:     @Test(timeout=40000)
1:d44513a:     public void testNoMemoryUsageIncreaseForTopic() throws Exception {
1:d44513a:         Connection connection = super.createConnection();
1:d44513a:         connection.start();
1:d44513a:         Session session = connection.createSession(false, Session.CLIENT_ACKNOWLEDGE);
1:d44513a:         Destination destination = session.createQueue(CREATED_STATIC_FOR_PERSISTENT);
1:d44513a:         MessageProducer producer = session.createProducer(destination);
1:d44513a:         producer.setDeliveryMode(DeliveryMode.PERSISTENT);
1:d44513a:             char[] m = new char[1024];
1:d44513a:             Arrays.fill(m, 'x');
1:d44513a:             // create some messages that have 1k each
1:d44513a:             for (int i = 1; i < 12000; i++) {
1:d44513a:                  producer.send(session.createTextMessage(new String(m)));
1:d44513a:                  logger.debug("Sent message: " + i);
1:d44513a:             }
1:d44513a:             producer.close();
1:d44513a:             session.close();
1:d44513a:             connection.stop();
1:d44513a:             connection.close();
1:d44513a:     }
1:d44513a: }
============================================================================
author:Timothy A. Bish
-------------------------------------------------------------------------------
commit:ef24cc9
commit:d44513a
/////////////////////////////////////////////////////////////////////////
1: /**
1:  * Licensed to the Apache Software Foundation (ASF) under one or more
1:  * contributor license agreements.  See the NOTICE file distributed with
1:  * this work for additional information regarding copyright ownership.
1:  * The ASF licenses this file to You under the Apache License, Version 2.0
1:  * (the "License"); you may not use this file except in compliance with
1:  * the License.  You may obtain a copy of the License at
1:  *
1:  *      http://www.apache.org/licenses/LICENSE-2.0
1:  *
1:  * Unless required by applicable law or agreed to in writing, software
1:  * distributed under the License is distributed on an "AS IS" BASIS,
1:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:  * See the License for the specific language governing permissions and
1:  * limitations under the License.
1:  */
1: package org.apache.activemq.broker.virtual;
1: 
1: import java.util.Arrays;
1: import java.util.LinkedList;
1: import java.util.List;
1: 
1: import javax.jms.Connection;
1: import javax.jms.DeliveryMode;
1: import javax.jms.Destination;
1: import javax.jms.MessageProducer;
1: import javax.jms.Session;
1: 
1: import org.apache.activemq.EmbeddedBrokerTestSupport;
1: import org.apache.activemq.broker.BrokerService;
1: import org.apache.activemq.broker.region.DestinationInterceptor;
1: import org.apache.activemq.broker.region.policy.PolicyEntry;
1: import org.apache.activemq.broker.region.policy.PolicyMap;
1: import org.apache.activemq.broker.region.virtual.MirroredQueue;
1: import org.apache.activemq.command.ActiveMQDestination;
1: import org.apache.activemq.store.kahadb.KahaDBPersistenceAdapter;
1: import org.apache.activemq.usage.MemoryUsage;
1: import org.apache.activemq.usage.StoreUsage;
1: import org.apache.activemq.usage.SystemUsage;
1: import org.apache.activemq.usage.TempUsage;
1: import org.apache.activemq.util.IOHelper;
1: import org.junit.After;
1: import org.junit.Before;
1: import org.junit.Test;
1: import org.slf4j.Logger;
1: import org.slf4j.LoggerFactory;
1: import org.springframework.util.Assert;
1: 
1: /**
1:  * This test will determine that the producer flow control does not kick in.
1:  * The original MirroredQueue implementation was causing the queue to update
1:  * the topic memory usage instead of the queue memory usage.
1:  * The reason is that the message memory usage instance will not be updated
1:  * unless it is null.  This was the case when the message was initially sent
1:  * to the topic but then it was non-null when it was being sent to the queue.
1:  * When the region destination was set, the associated memory usage was not
1:  * updated to the passed queue destination and thus the memory usage of the
1:  * topic was being updated instead.
1:  *
1:  * @author Claudio Corsi
1:  */
1: public class MirroredQueueCorrectMemoryUsageTest extends EmbeddedBrokerTestSupport {
1: 
1:     private static final Logger logger = LoggerFactory.getLogger(MirroredQueueCorrectMemoryUsageTest.class);
1: 
1:     private static final long ONE_MB = 0x0100000;
1:     private static final long TEN_MB = ONE_MB * 10;
1:     private static final long TWENTY_MB = TEN_MB * 2;
1: 
1:     private static final String CREATED_STATIC_FOR_PERSISTENT = "created.static.for.persistent";
1: 
1:     @Override
1:     protected boolean isPersistent() {
1:         return true;
1:     }
1: 
1:     @Override
1:     protected BrokerService createBroker() throws Exception {
1:         // Create the broker service instance....
1:         BrokerService broker = super.createBroker();
1:         // Create and add the mirrored queue destination interceptor ....
1:         DestinationInterceptor[] destinationInterceptors = new DestinationInterceptor[1];
1:         MirroredQueue mq = new MirroredQueue();
1:         mq.setCopyMessage(true);
1:         mq.setPrefix("");
1:         mq.setPostfix(".qmirror");
1:         destinationInterceptors[0] = mq;
1:         broker.setDestinationInterceptors(destinationInterceptors);
1:         // Create the destination policy for the topics and queues
1:         PolicyMap policyMap = new PolicyMap();
1:         List<PolicyEntry> entries = new LinkedList<PolicyEntry>();
1:         // Create Topic policy entry
1:         PolicyEntry policyEntry = new PolicyEntry();
1:         super.useTopic = true;
1:         ActiveMQDestination destination = super.createDestination(">");
1:         Assert.isTrue(destination.isTopic(), "Created destination was not a topic");
1:         policyEntry.setDestination(destination);
1:         policyEntry.setProducerFlowControl(true);
1:         policyEntry.setMemoryLimit(ONE_MB); // x10
1:         entries.add(policyEntry);
1:         // Create Queue policy entry
1:         policyEntry = new PolicyEntry();
1:         super.useTopic = false;
1:         destination = super.createDestination(CREATED_STATIC_FOR_PERSISTENT);
1:         Assert.isTrue(destination.isQueue(), "Created destination was not a queue");
1:         policyEntry.setDestination(destination);
1:         policyEntry.setProducerFlowControl(true);
1:         policyEntry.setMemoryLimit(TEN_MB);
1:         entries.add(policyEntry);
1:         policyMap.setPolicyEntries(entries);
1:         broker.setDestinationPolicy(policyMap);
1:         // Set destinations
1:         broker.setDestinations(new ActiveMQDestination[] { destination });
1:         // Set system usage
1:         SystemUsage memoryManager = new SystemUsage();
1:         MemoryUsage memoryUsage = new MemoryUsage();
1:         memoryUsage.setLimit(TEN_MB);
1:         memoryManager.setMemoryUsage(memoryUsage);
1:         StoreUsage storeUsage = new StoreUsage();
1:         storeUsage.setLimit(TWENTY_MB);
1:         memoryManager.setStoreUsage(storeUsage);
1:         TempUsage tempDiskUsage = new TempUsage();
1:         tempDiskUsage.setLimit(TEN_MB);
1:         memoryManager.setTempUsage(tempDiskUsage);
1:         broker.setSystemUsage(memoryManager);
1:         // Set the persistent adapter
1:         KahaDBPersistenceAdapter persistenceAdapter = new KahaDBPersistenceAdapter();
1:         persistenceAdapter.setJournalMaxFileLength((int)TEN_MB);
1:         // Delete all current messages...
1:         IOHelper.deleteFile(persistenceAdapter.getDirectory());
1:         broker.setPersistenceAdapter(persistenceAdapter);
1:         return broker;
1:     }
1: 
1:     @Before
1:     protected void setUp() throws Exception {
1:         super.setUp();
1:     }
1: 
1:     @After
1:     protected void tearDown() throws Exception {
1:         super.tearDown();
1:     }
1: 
1:     @Test(timeout=40000)
1:     public void testNoMemoryUsageIncreaseForTopic() throws Exception {
1:         Connection connection = super.createConnection();
1:         connection.start();
1:         Session session = connection.createSession(false, Session.CLIENT_ACKNOWLEDGE);
1:         Destination destination = session.createQueue(CREATED_STATIC_FOR_PERSISTENT);
1:         MessageProducer producer = session.createProducer(destination);
1:         producer.setDeliveryMode(DeliveryMode.PERSISTENT);
1:             char[] m = new char[1024];
1:             Arrays.fill(m, 'x');
1:             // create some messages that have 1k each
1:             for (int i = 1; i < 12000; i++) {
1:                  producer.send(session.createTextMessage(new String(m)));
1:                  logger.debug("Sent message: " + i);
1:             }
1:             producer.close();
1:             session.close();
1:             connection.stop();
1:             connection.close();
1:     }
1: }
============================================================================