1:bef9984: /**
1:bef9984:  * Licensed to the Apache Software Foundation (ASF) under one or more
1:bef9984:  * contributor license agreements.  See the NOTICE file distributed with
1:bef9984:  * this work for additional information regarding copyright ownership.
1:bef9984:  * The ASF licenses this file to You under the Apache License, Version 2.0
1:bef9984:  * (the "License"); you may not use this file except in compliance with
1:bef9984:  * the License.  You may obtain a copy of the License at
1:bef9984:  *
1:bef9984:  *      http://www.apache.org/licenses/LICENSE-2.0
1:bef9984:  *
1:bef9984:  * Unless required by applicable law or agreed to in writing, software
1:bef9984:  * distributed under the License is distributed on an "AS IS" BASIS,
1:bef9984:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:bef9984:  * See the License for the specific language governing permissions and
1:bef9984:  * limitations under the License.
1:bef9984:  */
1:bef9984: package org.apache.activemq.console.filter;
1:bef9984: 
1:bef9984: import junit.framework.TestCase;
1:4a3d117: import org.apache.activemq.command.ActiveMQMessage;
1:4a3d117: import org.apache.activemq.command.ActiveMQQueue;
1:4a3d117: import org.apache.activemq.console.util.AmqMessagesUtil;
1:bef9984: 
1:bef9984: public class TestMapTransformFilter extends TestCase {
1:bef9984: 
1:bef9984:     private static final Object[][] testData = new Object[][] {
1:bef9984:             { new byte[] { 1, 2, 3, 4 } },
1:bef9984:             { new int[] { 1, 2, 3, 4 } },
1:bef9984:             { new long[] { 1, 2, 3, 4 } },
1:bef9984:             { new double[] { 1, 2, 3, 4 } },
1:bef9984:             { new float[] { 1, 2, 3, 4 } },
1:bef9984:             { new char[] { '1', '2', '3', '4' } },
1:bef9984: 
1:bef9984:             { new Integer[] { 1, 2, 3, 4 } },
1:bef9984:             { new Byte[] { 1, 2, 3, 4 } },
1:bef9984:             { new Long[] { 1L, 2L, 3L, 4L } },
1:bef9984:             { new Double[] { 1d, 2d, 3d, 4d } },
1:bef9984:             { new Float[] { 1f, 2f, 3f, 4f } },
1:bef9984:             { new Character[] { '1', '2', '3', '4' } },
1:bef9984: 
1:bef9984:             { new String[] { "abc", "def" } },
1:bef9984:             { new int[] { 1, } },
1:bef9984:             { new int[] {,} },
1:bef9984:             { "abc"},
1:bef9984:             {(byte)1},
1:bef9984:             { (int)1 },
1:bef9984:             { (long)1 },
1:bef9984:             { (double)1d },
1:bef9984:             { (float)1f },
1:bef9984:             { (char)'1' },
1:bef9984: 
1:bef9984:     };
1:bef9984: 
1:bef9984:     public void testFetDisplayString() {
1:bef9984:         MapTransformFilter filter = new MapTransformFilter(null);
1:bef9984:         for (Object[] objectArray : testData) {
1:bef9984:             filter.getDisplayString(objectArray[0]);
1:bef9984:         }
1:bef9984:     }
1:bef9984: 
1:4a3d117:     public void testOriginaDest() throws Exception {
1:4a3d117:         MapTransformFilter filter = new MapTransformFilter(null);
1:4a3d117:         ActiveMQMessage mqMessage = new ActiveMQMessage();
1:4a3d117:         mqMessage.setOriginalDestination(new ActiveMQQueue("O"));
1:4a3d117:         assertTrue(filter.transformToMap(mqMessage).containsKey(AmqMessagesUtil.JMS_MESSAGE_CUSTOM_PREFIX + "OriginalDestination"));
1:4a3d117:     }
1:4a3d117: 
1:bef9984: }
============================================================================
author:gtully
-------------------------------------------------------------------------------
commit:4a3d117
/////////////////////////////////////////////////////////////////////////
1: import org.apache.activemq.command.ActiveMQMessage;
1: import org.apache.activemq.command.ActiveMQQueue;
1: import org.apache.activemq.console.util.AmqMessagesUtil;
/////////////////////////////////////////////////////////////////////////
1:     public void testOriginaDest() throws Exception {
1:         MapTransformFilter filter = new MapTransformFilter(null);
1:         ActiveMQMessage mqMessage = new ActiveMQMessage();
1:         mqMessage.setOriginalDestination(new ActiveMQQueue("O"));
1:         assertTrue(filter.transformToMap(mqMessage).containsKey(AmqMessagesUtil.JMS_MESSAGE_CUSTOM_PREFIX + "OriginalDestination"));
1:     }
1: 
author:Timothy A. Bish
-------------------------------------------------------------------------------
commit:bef9984
/////////////////////////////////////////////////////////////////////////
1: /**
1:  * Licensed to the Apache Software Foundation (ASF) under one or more
1:  * contributor license agreements.  See the NOTICE file distributed with
1:  * this work for additional information regarding copyright ownership.
1:  * The ASF licenses this file to You under the Apache License, Version 2.0
1:  * (the "License"); you may not use this file except in compliance with
1:  * the License.  You may obtain a copy of the License at
1:  *
1:  *      http://www.apache.org/licenses/LICENSE-2.0
1:  *
1:  * Unless required by applicable law or agreed to in writing, software
1:  * distributed under the License is distributed on an "AS IS" BASIS,
1:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:  * See the License for the specific language governing permissions and
1:  * limitations under the License.
1:  */
1: package org.apache.activemq.console.filter;
1: 
1: import junit.framework.TestCase;
1: 
1: public class TestMapTransformFilter extends TestCase {
1: 
1:     private static final Object[][] testData = new Object[][] {
1:             { new byte[] { 1, 2, 3, 4 } },
1:             { new int[] { 1, 2, 3, 4 } },
1:             { new long[] { 1, 2, 3, 4 } },
1:             { new double[] { 1, 2, 3, 4 } },
1:             { new float[] { 1, 2, 3, 4 } },
1:             { new char[] { '1', '2', '3', '4' } },
1: 
1:             { new Integer[] { 1, 2, 3, 4 } },
1:             { new Byte[] { 1, 2, 3, 4 } },
1:             { new Long[] { 1L, 2L, 3L, 4L } },
1:             { new Double[] { 1d, 2d, 3d, 4d } },
1:             { new Float[] { 1f, 2f, 3f, 4f } },
1:             { new Character[] { '1', '2', '3', '4' } },
1: 
1:             { new String[] { "abc", "def" } },
1:             { new int[] { 1, } },
1:             { new int[] {,} },
1:             { "abc"},
1:             {(byte)1},
1:             { (int)1 },
1:             { (long)1 },
1:             { (double)1d },
1:             { (float)1f },
1:             { (char)'1' },
1: 
1:     };
1: 
1:     public void testFetDisplayString() {
1:         MapTransformFilter filter = new MapTransformFilter(null);
1:         for (Object[] objectArray : testData) {
1:             filter.getDisplayString(objectArray[0]);
1:         }
1:     }
1: 
1: }
============================================================================