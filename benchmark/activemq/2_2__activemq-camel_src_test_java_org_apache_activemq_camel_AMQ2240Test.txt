1:fa40250: /**
1:fa40250:  * Licensed to the Apache Software Foundation (ASF) under one or more
1:fa40250:  * contributor license agreements.  See the NOTICE file distributed with
1:fa40250:  * this work for additional information regarding copyright ownership.
1:fa40250:  * The ASF licenses this file to You under the Apache License, Version 2.0
1:fa40250:  * (the "License"); you may not use this file except in compliance with
1:fa40250:  * the License.  You may obtain a copy of the License at
1:fa40250:  *
1:fa40250:  * http://www.apache.org/licenses/LICENSE-2.0
1:fa40250:  *
1:fa40250:  * Unless required by applicable law or agreed to in writing, software
1:fa40250:  * distributed under the License is distributed on an "AS IS" BASIS,
1:fa40250:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:fa40250:  * See the License for the specific language governing permissions and
1:fa40250:  * limitations under the License.
1:fa40250:  */
1:fa40250: package org.apache.activemq.camel;
1:fa40250: 
1:84ce96b: import static org.junit.Assert.fail;
1:fa40250: 
1:84ce96b: import org.apache.activemq.camel.AMQ2611Test.Consumer;
1:fa40250: import org.apache.activemq.camel.component.ActiveMQComponent;
1:fa40250: import org.apache.camel.CamelContext;
1:84ce96b: import org.apache.camel.ProducerTemplate;
1:fa40250: import org.apache.camel.builder.RouteBuilder;
1:fa40250: import org.apache.camel.impl.DefaultCamelContext;
1:fa40250: import org.junit.After;
1:fa40250: import org.junit.Test;
1:fa40250: import org.slf4j.Logger;
1:fa40250: import org.slf4j.LoggerFactory;
1:fa40250: 
1:fa40250: public class AMQ2240Test {
1:fa40250: 
1:fa40250:     private static final Logger LOG = LoggerFactory.getLogger(AMQ2240Test.class);
1:fa40250: 
1:84ce96b:     private CamelContext camelContext = null;
1:84ce96b: 
1:84ce96b:     @After
1:84ce96b:     public void destroyCamelContext() throws Exception {
1:84ce96b:         if (camelContext != null) {
1:84ce96b:             camelContext.stop();
1:84ce96b:             camelContext = null;
1:84ce96b:         }
1:84ce96b:     }
1:84ce96b: 
1:fa40250:     @Test
1:fa40250:     public void testBadVMTransportOptionsJMSPrefix() throws Exception {
1:fa40250: 
2:fa40250:         try{
1:fa40250:             final String vmUri = "vm://localhost?" +
1:fa40250:                 "jms.redeliveryPolicy.maximumRedeliveries=0&" +
1:fa40250:                 "jms.redeliveryPolicy.initialRedeliveryDelay=500&" +
1:fa40250:                 "jms.useAsyncSend=false&jms.sendTimeout=ABC&" +
1:fa40250:                 "jms.maxXXXXReconnectAttempts=1&jms.timeout=3000";
1:fa40250: 
1:fa40250:             LOG.info("creating context with bad URI: " + vmUri);
1:48d615d:             ActiveMQComponent amq = ActiveMQComponent.activeMQComponent(vmUri);
1:48d615d: 
1:48d615d:             amq.getConfiguration().getConnectionFactory();
1:fa40250: 
1:fa40250:             fail("Should have received an exception from the bad URI.");
1:fa40250:         } catch(Exception e) {
1:fa40250:             // Expected
1:fa40250:         }
1:fa40250:     }
1:fa40250: 
1:fa40250:     @Test
1:fa40250:     public void testBadVMTransportOptionsBrokerPrefix() throws Exception {
1:84ce96b:         try {
1:84ce96b: 
1:fa40250:             final String vmUri = "vm://localhost?" +
1:fa40250:                 "broker.XXX=foo&broker.persistent=XXX&broker.useJmx=false";
1:84ce96b: 
1:fa40250:             LOG.info("creating context with bad URI: " + vmUri);
1:84ce96b:             ActiveMQComponent amq = ActiveMQComponent.activeMQComponent(vmUri);
1:fa40250: 
1:84ce96b:             camelContext = new DefaultCamelContext();
1:84ce96b:             camelContext.addComponent("activemq", amq);
1:84ce96b:             final String queueEndpointName = "activemq:queuetest.Queue";
1:84ce96b:             camelContext.addRoutes(new RouteBuilder() {
1:84ce96b:                 @Override
1:84ce96b:                 public void configure() throws Exception {
1:84ce96b:                     from(queueEndpointName).bean(Consumer.class, "consume");
1:84ce96b:                 }
1:84ce96b:             });
1:84ce96b: 
1:84ce96b:             camelContext.start();
1:84ce96b:             final ProducerTemplate producerTemplate = camelContext.createProducerTemplate();
1:84ce96b:             producerTemplate.sendBody(queueEndpointName, "message");
1:fa40250: 
1:fa40250:             fail("Should have received an exception from the bad URI.");
1:fa40250:         } catch(Exception e) {
1:fa40250:             // Expected
1:fa40250:         }
1:fa40250:     }
1:fa40250: }
============================================================================
author:Claus Ibsen
-------------------------------------------------------------------------------
commit:48d615d
/////////////////////////////////////////////////////////////////////////
1:             ActiveMQComponent amq = ActiveMQComponent.activeMQComponent(vmUri);
1: 
1:             amq.getConfiguration().getConnectionFactory();
author:Timothy A. Bish
-------------------------------------------------------------------------------
commit:84ce96b
/////////////////////////////////////////////////////////////////////////
1: import static org.junit.Assert.fail;
1: import org.apache.activemq.camel.AMQ2611Test.Consumer;
1: import org.apache.camel.ProducerTemplate;
/////////////////////////////////////////////////////////////////////////
1:     private CamelContext camelContext = null;
1: 
1:     @After
1:     public void destroyCamelContext() throws Exception {
1:         if (camelContext != null) {
1:             camelContext.stop();
1:             camelContext = null;
1:         }
1:     }
1: 
/////////////////////////////////////////////////////////////////////////
1:         try {
1: 
1:             ActiveMQComponent amq = ActiveMQComponent.activeMQComponent(vmUri);
1: 
1:             camelContext = new DefaultCamelContext();
1:             camelContext.addComponent("activemq", amq);
1:             final String queueEndpointName = "activemq:queuetest.Queue";
1:             camelContext.addRoutes(new RouteBuilder() {
1:                 @Override
1:                 public void configure() throws Exception {
1:                     from(queueEndpointName).bean(Consumer.class, "consume");
1:                 }
1:             });
1: 
1:             camelContext.start();
1:             final ProducerTemplate producerTemplate = camelContext.createProducerTemplate();
1:             producerTemplate.sendBody(queueEndpointName, "message");
commit:fa40250
/////////////////////////////////////////////////////////////////////////
1: /**
1:  * Licensed to the Apache Software Foundation (ASF) under one or more
1:  * contributor license agreements.  See the NOTICE file distributed with
1:  * this work for additional information regarding copyright ownership.
1:  * The ASF licenses this file to You under the Apache License, Version 2.0
1:  * (the "License"); you may not use this file except in compliance with
1:  * the License.  You may obtain a copy of the License at
1:  *
1:  * http://www.apache.org/licenses/LICENSE-2.0
1:  *
1:  * Unless required by applicable law or agreed to in writing, software
1:  * distributed under the License is distributed on an "AS IS" BASIS,
1:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:  * See the License for the specific language governing permissions and
1:  * limitations under the License.
1:  */
1: package org.apache.activemq.camel;
1: 
0: import static org.junit.Assert.*;
1: 
0: import org.apache.activemq.broker.BrokerService;
1: import org.apache.activemq.camel.component.ActiveMQComponent;
1: import org.apache.camel.CamelContext;
1: import org.apache.camel.builder.RouteBuilder;
1: import org.apache.camel.impl.DefaultCamelContext;
1: import org.junit.After;
0: import org.junit.Before;
1: import org.junit.Test;
1: import org.slf4j.Logger;
1: import org.slf4j.LoggerFactory;
1: 
1: public class AMQ2240Test {
1: 
1:     private static final Logger LOG = LoggerFactory.getLogger(AMQ2240Test.class);
1: 
1:     @Test
1:     public void testBadVMTransportOptionsJMSPrefix() throws Exception {
1: 
1:         try{
1:             final String vmUri = "vm://localhost?" +
1:                 "jms.redeliveryPolicy.maximumRedeliveries=0&" +
1:                 "jms.redeliveryPolicy.initialRedeliveryDelay=500&" +
1:                 "jms.useAsyncSend=false&jms.sendTimeout=ABC&" +
1:                 "jms.maxXXXXReconnectAttempts=1&jms.timeout=3000";
1: 
1:             LOG.info("creating context with bad URI: " + vmUri);
0:             ActiveMQComponent.activeMQComponent(vmUri);
1: 
1:             fail("Should have received an exception from the bad URI.");
1:         } catch(Exception e) {
1:             // Expected
1:         }
1:     }
1: 
1:     @Test
1:     public void testBadVMTransportOptionsBrokerPrefix() throws Exception {
1:         try{
1:             final String vmUri = "vm://localhost?" +
1:                 "broker.XXX=foo&broker.persistent=XXX&broker.useJmx=false";
1: 
1:             LOG.info("creating context with bad URI: " + vmUri);
0:             ActiveMQComponent.activeMQComponent(vmUri).start();
1: 
1:             fail("Should have received an exception from the bad URI.");
1:         } catch(Exception e) {
1:             // Expected
1:         }
1:     }
1: }
============================================================================