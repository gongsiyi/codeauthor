1:36cc175: /**
1:36cc175:  * Licensed to the Apache Software Foundation (ASF) under one or more
1:36cc175:  * contributor license agreements.  See the NOTICE file distributed with
1:36cc175:  * this work for additional information regarding copyright ownership.
1:36cc175:  * The ASF licenses this file to You under the Apache License, Version 2.0
1:36cc175:  * (the "License"); you may not use this file except in compliance with
1:36cc175:  * the License.  You may obtain a copy of the License at
1:36cc175:  *
1:36cc175:  *      http://www.apache.org/licenses/LICENSE-2.0
1:36cc175:  *
1:36cc175:  * Unless required by applicable law or agreed to in writing, software
1:36cc175:  * distributed under the License is distributed on an "AS IS" BASIS,
1:36cc175:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:36cc175:  * See the License for the specific language governing permissions and
1:36cc175:  * limitations under the License.
1:36cc175:  */
1:36cc175: 
1:36cc175: package org.apache.activemq;
1:36cc175: 
1:36cc175: import java.io.File;
1:36cc175: import java.io.IOException;
1:36cc175: import java.net.ConnectException;
1:36cc175: 
1:36cc175: import org.junit.Test;
1:36cc175: 
1:36cc175: public class ActiveMQSslConnectionFactoryTest {
1:36cc175: 
1:36cc175:     final String TRUST_STORE_FILE_NAME = "client.keystore";
1:9810e61:     final String TRUST_STORE_PKCS12_FILE_NAME = "client-pkcs12.keystore";
1:36cc175:     final String TRUST_STORE_DIRECTORY_NAME = "src/test/resources/ssl/";
1:36cc175:     final String TRUST_STORE_RESOURCE_PREFIX = "ssl/";
1:36cc175:     final String TRUST_STORE_PASSWORD = "password";
1:36cc175:     final String SSL_TRANSPORT = "ssl://localhost:0";
1:36cc175:     final String FAILOVER_SSL_TRANSPORT = "failover:(" + SSL_TRANSPORT + ")?maxReconnectAttempts=1";
1:36cc175: 
4:36cc175:     @Test(expected = ConnectException.class)
1:36cc175:     public void validTrustStoreFileTest() throws Throwable {
1:36cc175:         executeTest(SSL_TRANSPORT, TRUST_STORE_DIRECTORY_NAME + TRUST_STORE_FILE_NAME);
1:36cc175:     }
1:36cc175: 
1:36cc175:     @Test(expected = ConnectException.class)
1:36cc175:     public void validTrustStoreURLTest() throws Throwable {
1:36cc175:         executeTest(SSL_TRANSPORT, new File(TRUST_STORE_DIRECTORY_NAME + TRUST_STORE_FILE_NAME).toURI().toString());
1:36cc175:     }
1:36cc175: 
1:36cc175:     @Test(expected = ConnectException.class)
1:36cc175:     public void validTrustStoreResourceTest() throws Throwable {
1:36cc175:         executeTest(SSL_TRANSPORT, TRUST_STORE_RESOURCE_PREFIX + TRUST_STORE_FILE_NAME);
1:36cc175:     }
1:36cc175: 
1:36cc175:     @Test(expected = IOException.class)
1:36cc175:     public void invalidTrustStoreFileTest() throws Throwable {
1:36cc175:         executeTest(SSL_TRANSPORT, TRUST_STORE_DIRECTORY_NAME + TRUST_STORE_FILE_NAME + ".dummy");
1:36cc175:     }
1:36cc175: 
1:36cc175:     @Test(expected = IOException.class)
1:36cc175:     public void invalidTrustStoreURLTest() throws Throwable {
1:36cc175:         executeTest(SSL_TRANSPORT, new File(TRUST_STORE_DIRECTORY_NAME + TRUST_STORE_FILE_NAME + ".dummy").toURI().toString());
1:36cc175:     }
1:36cc175: 
1:36cc175:     @Test(expected = IOException.class)
1:36cc175:     public void invalidTrustStoreResourceTest() throws Throwable {
1:36cc175:         executeTest(SSL_TRANSPORT, TRUST_STORE_RESOURCE_PREFIX + TRUST_STORE_FILE_NAME + ".dummy");
1:36cc175:     }
1:36cc175: 
1:9c4ef26:     @Test(expected = IOException.class)
1:36cc175:     public void validTrustStoreFileFailoverTest() throws Throwable {
1:36cc175:         executeTest(FAILOVER_SSL_TRANSPORT, TRUST_STORE_DIRECTORY_NAME + TRUST_STORE_FILE_NAME);
1:36cc175:     }
1:36cc175: 
1:9c4ef26:     @Test(expected = IOException.class)
1:36cc175:     public void validTrustStoreURLFailoverTest() throws Throwable {
1:36cc175:         executeTest(FAILOVER_SSL_TRANSPORT, new File(TRUST_STORE_DIRECTORY_NAME + TRUST_STORE_FILE_NAME).toURI().toString());
1:36cc175:     }
1:36cc175: 
1:9c4ef26:     @Test(expected = IOException.class)
1:36cc175:     public void validTrustStoreResourceFailoverTest() throws Throwable {
1:36cc175:         executeTest(FAILOVER_SSL_TRANSPORT, TRUST_STORE_RESOURCE_PREFIX + TRUST_STORE_FILE_NAME);
1:36cc175:     }
1:36cc175: 
1:36cc175:     @Test(expected = IOException.class)
1:36cc175:     public void invalidTrustStoreFileFailoverTest() throws Throwable {
1:36cc175:         executeTest(FAILOVER_SSL_TRANSPORT, TRUST_STORE_DIRECTORY_NAME + TRUST_STORE_FILE_NAME + ".dummy");
1:36cc175:     }
1:36cc175: 
1:36cc175:     @Test(expected = IOException.class)
1:36cc175:     public void invalidTrustStoreURLFailoverTest() throws Throwable {
1:36cc175:         executeTest(FAILOVER_SSL_TRANSPORT, new File(TRUST_STORE_DIRECTORY_NAME + TRUST_STORE_FILE_NAME + ".dummy").toURI().toString());
1:36cc175:     }
1:36cc175: 
1:36cc175:     @Test(expected = IOException.class)
1:36cc175:     public void invalidTrustStoreResourceFailoverTest() throws Throwable {
1:36cc175:         executeTest(FAILOVER_SSL_TRANSPORT, TRUST_STORE_RESOURCE_PREFIX + TRUST_STORE_FILE_NAME + ".dummy");
1:36cc175:     }
1:36cc175: 
1:9810e61:     @Test(expected = ConnectException.class)
1:9810e61:     public void validPkcs12TrustStoreFileTest() throws Throwable {
1:9810e61:         executeTest(SSL_TRANSPORT, TRUST_STORE_DIRECTORY_NAME + TRUST_STORE_PKCS12_FILE_NAME, "pkcs12");
1:9810e61:     }
1:9810e61: 
1:9810e61:     @Test(expected = ConnectException.class)
1:9810e61:     public void validPkcs12TrustStoreURLTest() throws Throwable {
1:9810e61:         executeTest(SSL_TRANSPORT, new File(TRUST_STORE_DIRECTORY_NAME + TRUST_STORE_PKCS12_FILE_NAME).toURI().toString(), "pkcs12");
1:9810e61:     }
1:9810e61: 
1:9810e61:     @Test(expected = ConnectException.class)
1:9810e61:     public void validPkcs12TrustStoreResourceTest() throws Throwable {
1:9810e61:         executeTest(SSL_TRANSPORT, TRUST_STORE_RESOURCE_PREFIX + TRUST_STORE_PKCS12_FILE_NAME, "pkcs12");
1:9810e61:     }
1:9810e61: 
1:9810e61:     @Test(expected = IOException.class)	// Invalid keystore format
1:9810e61:     public void invalidTrustStoreTypeTest() throws Throwable {
1:9810e61:         executeTest(SSL_TRANSPORT, TRUST_STORE_RESOURCE_PREFIX + TRUST_STORE_PKCS12_FILE_NAME, "jks");
1:9810e61:     }
1:9810e61: 
1:36cc175:     protected void executeTest(String transport, String name) throws Throwable {
1:016ae05:     	executeTest(transport, name, null);
1:016ae05:     }
1:016ae05: 
1:016ae05:     protected ActiveMQSslConnectionFactory getFactory(String transport) {
1:016ae05:         return new ActiveMQSslConnectionFactory(transport);
1:9810e61:     }
1:9810e61: 
1:9810e61:     protected void executeTest(String transport, String name, String type) throws Throwable {
1:36cc175:         try {
1:016ae05:             ActiveMQSslConnectionFactory activeMQSslConnectionFactory = getFactory(transport);
1:9810e61:             activeMQSslConnectionFactory.setTrustStoreType(type != null ? type : activeMQSslConnectionFactory.getTrustStoreType());
1:36cc175:             activeMQSslConnectionFactory.setTrustStore(name);
1:36cc175:             activeMQSslConnectionFactory.setTrustStorePassword(TRUST_STORE_PASSWORD);
1:36cc175: 
1:36cc175:             javax.jms.Connection connection = activeMQSslConnectionFactory.createConnection();
1:36cc175:             connection.start();
1:36cc175:             connection.stop();
1:36cc175:         } catch (javax.jms.JMSException e) {
1:36cc175:             e.getCause().printStackTrace();
1:36cc175:             throw e.getCause();
1:36cc175:         }
1:36cc175:     }
1:36cc175: }
============================================================================
author:Christopher L. Shannon (cshannon)
-------------------------------------------------------------------------------
commit:016ae05
/////////////////////////////////////////////////////////////////////////
1:     	executeTest(transport, name, null);
1:     }
1: 
1:     protected ActiveMQSslConnectionFactory getFactory(String transport) {
1:         return new ActiveMQSslConnectionFactory(transport);
1:             ActiveMQSslConnectionFactory activeMQSslConnectionFactory = getFactory(transport);
author:gtully
-------------------------------------------------------------------------------
commit:9c4ef26
/////////////////////////////////////////////////////////////////////////
1:     @Test(expected = IOException.class)
1:     @Test(expected = IOException.class)
1:     @Test(expected = IOException.class)
author:Hadrian Zbarcea
-------------------------------------------------------------------------------
commit:9810e61
/////////////////////////////////////////////////////////////////////////
1:     final String TRUST_STORE_PKCS12_FILE_NAME = "client-pkcs12.keystore";
/////////////////////////////////////////////////////////////////////////
1:     @Test(expected = ConnectException.class)
1:     public void validPkcs12TrustStoreFileTest() throws Throwable {
1:         executeTest(SSL_TRANSPORT, TRUST_STORE_DIRECTORY_NAME + TRUST_STORE_PKCS12_FILE_NAME, "pkcs12");
1:     }
1: 
1:     @Test(expected = ConnectException.class)
1:     public void validPkcs12TrustStoreURLTest() throws Throwable {
1:         executeTest(SSL_TRANSPORT, new File(TRUST_STORE_DIRECTORY_NAME + TRUST_STORE_PKCS12_FILE_NAME).toURI().toString(), "pkcs12");
1:     }
1: 
1:     @Test(expected = ConnectException.class)
1:     public void validPkcs12TrustStoreResourceTest() throws Throwable {
1:         executeTest(SSL_TRANSPORT, TRUST_STORE_RESOURCE_PREFIX + TRUST_STORE_PKCS12_FILE_NAME, "pkcs12");
1:     }
1: 
1:     @Test(expected = IOException.class)	// Invalid keystore format
1:     public void invalidTrustStoreTypeTest() throws Throwable {
1:         executeTest(SSL_TRANSPORT, TRUST_STORE_RESOURCE_PREFIX + TRUST_STORE_PKCS12_FILE_NAME, "jks");
1:     }
1: 
0:     	executeTest(transport, name, null);    	
1:     }
1: 
1:     protected void executeTest(String transport, String name, String type) throws Throwable {
1:             activeMQSslConnectionFactory.setTrustStoreType(type != null ? type : activeMQSslConnectionFactory.getTrustStoreType());
author:Timothy A. Bish
-------------------------------------------------------------------------------
commit:36cc175
/////////////////////////////////////////////////////////////////////////
1: /**
1:  * Licensed to the Apache Software Foundation (ASF) under one or more
1:  * contributor license agreements.  See the NOTICE file distributed with
1:  * this work for additional information regarding copyright ownership.
1:  * The ASF licenses this file to You under the Apache License, Version 2.0
1:  * (the "License"); you may not use this file except in compliance with
1:  * the License.  You may obtain a copy of the License at
1:  *
1:  *      http://www.apache.org/licenses/LICENSE-2.0
1:  *
1:  * Unless required by applicable law or agreed to in writing, software
1:  * distributed under the License is distributed on an "AS IS" BASIS,
1:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:  * See the License for the specific language governing permissions and
1:  * limitations under the License.
1:  */
1: 
1: package org.apache.activemq;
1: 
1: import java.io.File;
1: import java.io.IOException;
1: import java.net.ConnectException;
1: 
1: import org.junit.Test;
1: 
1: public class ActiveMQSslConnectionFactoryTest {
1: 
1:     final String TRUST_STORE_FILE_NAME = "client.keystore";
1:     final String TRUST_STORE_DIRECTORY_NAME = "src/test/resources/ssl/";
1:     final String TRUST_STORE_RESOURCE_PREFIX = "ssl/";
1:     final String TRUST_STORE_PASSWORD = "password";
1:     final String SSL_TRANSPORT = "ssl://localhost:0";
1:     final String FAILOVER_SSL_TRANSPORT = "failover:(" + SSL_TRANSPORT + ")?maxReconnectAttempts=1";
1: 
1:     @Test(expected = ConnectException.class)
1:     public void validTrustStoreFileTest() throws Throwable {
1:         executeTest(SSL_TRANSPORT, TRUST_STORE_DIRECTORY_NAME + TRUST_STORE_FILE_NAME);
1:     }
1: 
1:     @Test(expected = ConnectException.class)
1:     public void validTrustStoreURLTest() throws Throwable {
1:         executeTest(SSL_TRANSPORT, new File(TRUST_STORE_DIRECTORY_NAME + TRUST_STORE_FILE_NAME).toURI().toString());
1:     }
1: 
1:     @Test(expected = ConnectException.class)
1:     public void validTrustStoreResourceTest() throws Throwable {
1:         executeTest(SSL_TRANSPORT, TRUST_STORE_RESOURCE_PREFIX + TRUST_STORE_FILE_NAME);
1:     }
1: 
1:     @Test(expected = IOException.class)
1:     public void invalidTrustStoreFileTest() throws Throwable {
1:         executeTest(SSL_TRANSPORT, TRUST_STORE_DIRECTORY_NAME + TRUST_STORE_FILE_NAME + ".dummy");
1:     }
1: 
1:     @Test(expected = IOException.class)
1:     public void invalidTrustStoreURLTest() throws Throwable {
1:         executeTest(SSL_TRANSPORT, new File(TRUST_STORE_DIRECTORY_NAME + TRUST_STORE_FILE_NAME + ".dummy").toURI().toString());
1:     }
1: 
1:     @Test(expected = IOException.class)
1:     public void invalidTrustStoreResourceTest() throws Throwable {
1:         executeTest(SSL_TRANSPORT, TRUST_STORE_RESOURCE_PREFIX + TRUST_STORE_FILE_NAME + ".dummy");
1:     }
1: 
1:     @Test(expected = ConnectException.class)
1:     public void validTrustStoreFileFailoverTest() throws Throwable {
1:         executeTest(FAILOVER_SSL_TRANSPORT, TRUST_STORE_DIRECTORY_NAME + TRUST_STORE_FILE_NAME);
1:     }
1: 
1:     @Test(expected = ConnectException.class)
1:     public void validTrustStoreURLFailoverTest() throws Throwable {
1:         executeTest(FAILOVER_SSL_TRANSPORT, new File(TRUST_STORE_DIRECTORY_NAME + TRUST_STORE_FILE_NAME).toURI().toString());
1:     }
1: 
1:     @Test(expected = ConnectException.class)
1:     public void validTrustStoreResourceFailoverTest() throws Throwable {
1:         executeTest(FAILOVER_SSL_TRANSPORT, TRUST_STORE_RESOURCE_PREFIX + TRUST_STORE_FILE_NAME);
1:     }
1: 
1:     @Test(expected = IOException.class)
1:     public void invalidTrustStoreFileFailoverTest() throws Throwable {
1:         executeTest(FAILOVER_SSL_TRANSPORT, TRUST_STORE_DIRECTORY_NAME + TRUST_STORE_FILE_NAME + ".dummy");
1:     }
1: 
1:     @Test(expected = IOException.class)
1:     public void invalidTrustStoreURLFailoverTest() throws Throwable {
1:         executeTest(FAILOVER_SSL_TRANSPORT, new File(TRUST_STORE_DIRECTORY_NAME + TRUST_STORE_FILE_NAME + ".dummy").toURI().toString());
1:     }
1: 
1:     @Test(expected = IOException.class)
1:     public void invalidTrustStoreResourceFailoverTest() throws Throwable {
1:         executeTest(FAILOVER_SSL_TRANSPORT, TRUST_STORE_RESOURCE_PREFIX + TRUST_STORE_FILE_NAME + ".dummy");
1:     }
1: 
1:     protected void executeTest(String transport, String name) throws Throwable {
1:         try {
0:             ActiveMQSslConnectionFactory activeMQSslConnectionFactory = new ActiveMQSslConnectionFactory(transport);
1:             activeMQSslConnectionFactory.setTrustStore(name);
1:             activeMQSslConnectionFactory.setTrustStorePassword(TRUST_STORE_PASSWORD);
1: 
1:             javax.jms.Connection connection = activeMQSslConnectionFactory.createConnection();
1:             connection.start();
1:             connection.stop();
1:         } catch (javax.jms.JMSException e) {
1:             e.getCause().printStackTrace();
1:             throw e.getCause();
1:         }
1:     }
1: }
============================================================================