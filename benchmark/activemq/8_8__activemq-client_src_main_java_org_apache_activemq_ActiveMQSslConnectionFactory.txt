1:1a88ac6: /**
1:1a88ac6:  * Licensed to the Apache Software Foundation (ASF) under one or more
1:1a88ac6:  * contributor license agreements.  See the NOTICE file distributed with
1:1a88ac6:  * this work for additional information regarding copyright ownership.
1:1a88ac6:  * The ASF licenses this file to You under the Apache License, Version 2.0
1:1a88ac6:  * (the "License"); you may not use this file except in compliance with
1:1a88ac6:  * the License.  You may obtain a copy of the License at
8:1a88ac6:  *
1:230a86c:  *      http://www.apache.org/licenses/LICENSE-2.0
1:1a88ac6:  *
1:1a88ac6:  * Unless required by applicable law or agreed to in writing, software
1:1a88ac6:  * distributed under the License is distributed on an "AS IS" BASIS,
1:1a88ac6:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:1a88ac6:  * See the License for the specific language governing permissions and
1:1a88ac6:  * limitations under the License.
1:1a88ac6:  */
1:1a88ac6: 
1:1a88ac6: package org.apache.activemq;
1:1a88ac6: 
1:57f5e7e: import java.io.ByteArrayInputStream;
1:57f5e7e: import java.io.ByteArrayOutputStream;
1:36cc175: import java.io.File;
1:36cc175: import java.io.FileInputStream;
1:57f5e7e: import java.io.IOException;
1:57f5e7e: import java.io.InputStream;
1:57f5e7e: import java.net.MalformedURLException;
1:1a88ac6: import java.net.URI;
1:57f5e7e: import java.net.URL;
1:e49f5d9: import java.security.KeyStore;
1:1a88ac6: import java.security.SecureRandom;
1:e49f5d9: 
1:1a88ac6: import javax.jms.JMSException;
1:1a88ac6: import javax.net.ssl.KeyManager;
1:57f5e7e: import javax.net.ssl.KeyManagerFactory;
1:1a88ac6: import javax.net.ssl.TrustManager;
1:57f5e7e: import javax.net.ssl.TrustManagerFactory;
1:1a88ac6: 
1:0479a4e: import org.apache.activemq.broker.SslContext;
1:1a88ac6: import org.apache.activemq.transport.Transport;
1:1a88ac6: import org.apache.activemq.util.JMSExceptionSupport;
1:1a88ac6: 
1:1a88ac6: /**
1:230a86c:  * An ActiveMQConnectionFactory that allows access to the key and trust managers
1:230a86c:  * used for SslConnections. There is no reason to use this class unless SSL is
1:230a86c:  * being used AND the key and trust managers need to be specified from within
1:230a86c:  * code. In fact, if the URI passed to this class does not have an "ssl" scheme,
1:230a86c:  * this class will pass all work on to its superclass.
1:e49f5d9:  *
1:36cc175:  * There are two alternative approaches you can use to provide X.509
1:36cc175:  * certificates for the SSL connections:
1:e49f5d9:  *
1:36cc175:  * Call <code>setTrustStore</code>, <code>setTrustStorePassword</code>,
1:36cc175:  * <code>setKeyStore</code>, and <code>setKeyStorePassword</code>.
1:e49f5d9:  *
1:57f5e7e:  * Call <code>setKeyAndTrustManagers</code>.
1:e49f5d9:  *
1:1a88ac6:  * @author sepandm@gmail.com
1:1a88ac6:  */
1:1a88ac6: public class ActiveMQSslConnectionFactory extends ActiveMQConnectionFactory {
1:e49f5d9: 
1:1a88ac6:     // The key and trust managers used to initialize the used SSLContext.
1:230a86c:     protected KeyManager[] keyManager;
1:230a86c:     protected TrustManager[] trustManager;
1:230a86c:     protected SecureRandom secureRandom;
1:9810e61:     protected String trustStoreType = KeyStore.getDefaultType();
1:57f5e7e:     protected String trustStore;
1:57f5e7e:     protected String trustStorePassword;
1:9810e61:     protected String keyStoreType = KeyStore.getDefaultType();
1:57f5e7e:     protected String keyStore;
1:57f5e7e:     protected String keyStorePassword;
1:815e0ec:     protected String keyStoreKeyPassword;
1:230a86c: 
1:57f5e7e:     public ActiveMQSslConnectionFactory() {
1:57f5e7e:         super();
1:c4cdd51:     }
1:1a88ac6: 
1:57f5e7e:     public ActiveMQSslConnectionFactory(String brokerURL) {
1:57f5e7e:         super(brokerURL);
1:57f5e7e:     }
1:1a88ac6: 
1:57f5e7e:     public ActiveMQSslConnectionFactory(URI brokerURL) {
1:57f5e7e:         super(brokerURL);
1:57f5e7e:     }
1:1a88ac6: 
1:1a88ac6:     /**
1:1a88ac6:      * Sets the key and trust managers used when creating SSL connections.
1:e49f5d9:      *
1:36cc175:      * @param km
1:36cc175:      *            The KeyManagers used.
1:36cc175:      * @param tm
1:36cc175:      *            The TrustManagers used.
1:36cc175:      * @param random
1:36cc175:      *            The SecureRandom number used.
1:1a88ac6:      */
1:0e0b6b7:     public void setKeyAndTrustManagers(final KeyManager[] km, final TrustManager[] tm, final SecureRandom random) {
1:1a88ac6:         keyManager = km;
1:1a88ac6:         trustManager = tm;
1:1a88ac6:         secureRandom = random;
1:1a88ac6:     }
1:230a86c: 
1:1a88ac6:     /**
1:230a86c:      * Overriding to make special considerations for SSL connections. If we are
1:230a86c:      * not using SSL, the superclass's method is called. If we are using SSL, an
1:230a86c:      * SslConnectionFactory is used and it is given the needed key and trust
1:230a86c:      * managers.
1:e49f5d9:      *
1:1a88ac6:      * @author sepandm@gmail.com
1:1a88ac6:      */
1:36cc175:     @Override
1:1a88ac6:     protected Transport createTransport() throws JMSException {
1:c4cdd51:         SslContext existing = SslContext.getCurrentSslContext();
1:1a88ac6:         try {
1:c4cdd51:             if (keyStore != null || trustStore != null) {
1:57f5e7e:                 keyManager = createKeyManager();
1:c4cdd51:                 trustManager = createTrustManager();
1:1a88ac6:             }
1:aaf0357:             if (keyManager != null || trustManager != null) {
1:aaf0357:                 SslContext.setCurrentSslContext(new SslContext(keyManager, trustManager, secureRandom));
1:aaf0357:             }
1:1a88ac6:             return super.createTransport();
1:1a88ac6:         } catch (Exception e) {
1:1a88ac6:             throw JMSExceptionSupport.create("Could not create Transport. Reason: " + e, e);
1:c4cdd51:         } finally {
1:c4cdd51:             SslContext.setCurrentSslContext(existing);
1:1a88ac6:         }
1:1a88ac6:     }
1:230a86c: 
1:57f5e7e:     protected TrustManager[] createTrustManager() throws Exception {
1:57f5e7e:         TrustManager[] trustStoreManagers = null;
1:9810e61:         KeyStore trustedCertStore = KeyStore.getInstance(getTrustStoreType());
1:1a88ac6: 
1:c4cdd51:         if (trustStore != null) {
1:12b26b6:             try(InputStream tsStream = getInputStream(trustStore)) {
1:c4cdd51: 
1:12b26b6:                 trustedCertStore.load(tsStream, trustStorePassword.toCharArray());
1:12b26b6:                 TrustManagerFactory tmf = TrustManagerFactory.getInstance(TrustManagerFactory.getDefaultAlgorithm());
1:c4cdd51: 
1:12b26b6:                 tmf.init(trustedCertStore);
1:12b26b6:                 trustStoreManagers = tmf.getTrustManagers();
1:12b26b6:             }
1:1a88ac6:         }
1:e49f5d9:         return trustStoreManagers;
1:c4cdd51:     }
1:c4cdd51: 
1:57f5e7e:     protected KeyManager[] createKeyManager() throws Exception {
1:36cc175:         KeyManagerFactory kmf = KeyManagerFactory.getInstance(KeyManagerFactory.getDefaultAlgorithm());
1:9810e61:         KeyStore ks = KeyStore.getInstance(getKeyStoreType());
1:57f5e7e:         KeyManager[] keystoreManagers = null;
1:c4cdd51:         if (keyStore != null) {
1:c4cdd51:             byte[] sslCert = loadClientCredential(keyStore);
1:c4cdd51: 
1:c4cdd51:             if (sslCert != null && sslCert.length > 0) {
1:12b26b6:                 try(ByteArrayInputStream bin = new ByteArrayInputStream(sslCert)) {
1:12b26b6:                     ks.load(bin, keyStorePassword.toCharArray());
1:12b26b6:                     kmf.init(ks, keyStoreKeyPassword !=null ? keyStoreKeyPassword.toCharArray() : keyStorePassword.toCharArray());
1:12b26b6:                     keystoreManagers = kmf.getKeyManagers();
1:12b26b6:                 }
1:c4cdd51:             }
1:57f5e7e:         }
1:e49f5d9:         return keystoreManagers;
1:57f5e7e:     }
1:57f5e7e: 
1:57f5e7e:     protected byte[] loadClientCredential(String fileName) throws IOException {
1:57f5e7e:         if (fileName == null) {
1:57f5e7e:             return null;
8:57f5e7e:         }
1:12b26b6:         try(InputStream in = getInputStream(fileName);
1:12b26b6:             ByteArrayOutputStream out = new ByteArrayOutputStream()) {
1:12b26b6:             byte[] buf = new byte[512];
1:12b26b6:             int i = in.read(buf);
1:12b26b6:             while (i > 0) {
1:12b26b6:                 out.write(buf, 0, i);
1:12b26b6:                 i = in.read(buf);
1:12b26b6:             }
1:12b26b6:             return out.toByteArray();
1:e49f5d9:         }
1:57f5e7e:     }
1:e49f5d9: 
1:36cc175:     protected InputStream getInputStream(String urlOrResource) throws IOException {
1:36cc175:         try {
1:36cc175:             File ifile = new File(urlOrResource);
1:36cc175:             // only open the file if and only if it exists
1:36cc175:             if (ifile.exists()) {
1:36cc175:                 return new FileInputStream(ifile);
1:36cc175:             }
1:36cc175:         } catch (Exception e) {
1:36cc175:         }
1:36cc175: 
1:e49f5d9:         InputStream ins = null;
1:36cc175: 
1:e49f5d9:         try {
1:e49f5d9:             URL url = new URL(urlOrResource);
1:e49f5d9:             ins = url.openStream();
1:36cc175:             if (ins != null) {
1:36cc175:                 return ins;
1:36cc175:             }
1:36cc175:         } catch (MalformedURLException ignore) {
1:e49f5d9:         }
1:e49f5d9: 
1:e49f5d9:         // Alternatively, treat as classpath resource
1:e49f5d9:         if (ins == null) {
1:36cc175:             ins = Thread.currentThread().getContextClassLoader().getResourceAsStream(urlOrResource);
1:e49f5d9:         }
1:e49f5d9: 
1:e49f5d9:         if (ins == null) {
1:36cc175:             throw new IOException("Could not load resource: " + urlOrResource);
1:e49f5d9:         }
1:e49f5d9: 
1:e49f5d9:         return ins;
1:57f5e7e:     }
1:e49f5d9: 
1:9810e61:     public String getTrustStoreType() {
1:9810e61:         return trustStoreType;
1:9810e61:     }
1:9810e61: 
1:9810e61:     public void setTrustStoreType(String type) {
1:9810e61:         trustStoreType = type;
1:9810e61:     }
1:9810e61: 
1:57f5e7e:     public String getTrustStore() {
1:57f5e7e:         return trustStore;
1:57f5e7e:     }
1:e49f5d9: 
1:57f5e7e:     /**
1:36cc175:      * The location of a keystore file (in <code>jks</code> format) containing
1:36cc175:      * one or more trusted certificates.
1:e49f5d9:      *
1:36cc175:      * @param trustStore
1:36cc175:      *            If specified with a scheme, treat as a URL, otherwise treat as
1:36cc175:      *            a classpath resource.
1:57f5e7e:      */
1:c4cdd51:     public void setTrustStore(String trustStore) throws Exception {
1:57f5e7e:         this.trustStore = trustStore;
1:57f5e7e:         trustManager = null;
1:57f5e7e:     }
1:e49f5d9: 
1:57f5e7e:     public String getTrustStorePassword() {
1:57f5e7e:         return trustStorePassword;
1:57f5e7e:     }
1:e49f5d9: 
1:57f5e7e:     /**
1:57f5e7e:      * The password to match the trust store specified by {@link setTrustStore}.
1:e49f5d9:      *
1:36cc175:      * @param trustStorePassword
1:36cc175:      *            The password used to unlock the keystore file.
1:57f5e7e:      */
1:57f5e7e:     public void setTrustStorePassword(String trustStorePassword) {
1:57f5e7e:         this.trustStorePassword = trustStorePassword;
1:57f5e7e:     }
1:e49f5d9: 
1:9810e61:     public String getKeyStoreType() {
1:9810e61:         return keyStoreType;
1:9810e61:     }
1:9810e61: 
1:9810e61:     public void setKeyStoreType(String type) {
1:9810e61:         keyStoreType = type;
1:9810e61:     }
1:9810e61: 
1:9810e61: 
1:57f5e7e:     public String getKeyStore() {
1:57f5e7e:         return keyStore;
1:57f5e7e:     }
1:e49f5d9: 
1:57f5e7e:     /**
1:36cc175:      * The location of a keystore file (in <code>jks</code> format) containing a
1:36cc175:      * certificate and its private key.
1:e49f5d9:      *
1:36cc175:      * @param keyStore
1:36cc175:      *            If specified with a scheme, treat as a URL, otherwise treat as
1:36cc175:      *            a classpath resource.
1:57f5e7e:      */
1:c4cdd51:     public void setKeyStore(String keyStore) throws Exception {
1:57f5e7e:         this.keyStore = keyStore;
1:57f5e7e:         keyManager = null;
1:57f5e7e:     }
1:e49f5d9: 
1:57f5e7e:     public String getKeyStorePassword() {
1:57f5e7e:         return keyStorePassword;
1:57f5e7e:     }
1:e49f5d9: 
1:57f5e7e:     /**
1:57f5e7e:      * The password to match the key store specified by {@link setKeyStore}.
1:e49f5d9:      *
1:36cc175:      * @param keyStorePassword
1:36cc175:      *            The password, which is used both to unlock the keystore file
1:36cc175:      *            and as the pass phrase for the private key stored in the
1:36cc175:      *            keystore.
1:57f5e7e:      */
1:57f5e7e:     public void setKeyStorePassword(String keyStorePassword) {
1:57f5e7e:         this.keyStorePassword = keyStorePassword;
1:57f5e7e:     }
1:815e0ec: 
3:57f5e7e: 
1:815e0ec:     public String getKeyStoreKeyPassword() {
1:815e0ec:         return keyStoreKeyPassword;
1:815e0ec:     }
1:815e0ec: 
1:815e0ec:     /**
1:815e0ec:      * The password to match the key from the keyStore.
1:815e0ec:      *
1:815e0ec:      * @param keyStoreKeyPassword
1:815e0ec:      *            The password for the private key stored in the
1:815e0ec:      *            keyStore if different from keyStorePassword.
1:815e0ec:      */
1:815e0ec:     public void setKeyStoreKeyPassword(String keyStoreKeyPassword) {
1:815e0ec:         this.keyStoreKeyPassword = keyStoreKeyPassword;
1:815e0ec:     }
1:815e0ec: 
1:57f5e7e: }
============================================================================
author:Christopher L. Shannon (cshannon)
-------------------------------------------------------------------------------
commit:12b26b6
/////////////////////////////////////////////////////////////////////////
1:             try(InputStream tsStream = getInputStream(trustStore)) {
1:                 trustedCertStore.load(tsStream, trustStorePassword.toCharArray());
1:                 TrustManagerFactory tmf = TrustManagerFactory.getInstance(TrustManagerFactory.getDefaultAlgorithm());
1:                 tmf.init(trustedCertStore);
1:                 trustStoreManagers = tmf.getTrustManagers();
1:             }
/////////////////////////////////////////////////////////////////////////
1:                 try(ByteArrayInputStream bin = new ByteArrayInputStream(sslCert)) {
1:                     ks.load(bin, keyStorePassword.toCharArray());
1:                     kmf.init(ks, keyStoreKeyPassword !=null ? keyStoreKeyPassword.toCharArray() : keyStorePassword.toCharArray());
1:                     keystoreManagers = kmf.getKeyManagers();
1:                 }
/////////////////////////////////////////////////////////////////////////
1:         try(InputStream in = getInputStream(fileName);
1:             ByteArrayOutputStream out = new ByteArrayOutputStream()) {
1:             byte[] buf = new byte[512];
1:             int i = in.read(buf);
1:             while (i > 0) {
1:                 out.write(buf, 0, i);
1:                 i = in.read(buf);
1:             }
1:             return out.toByteArray();
author:Hadrian Zbarcea
-------------------------------------------------------------------------------
commit:9810e61
/////////////////////////////////////////////////////////////////////////
1:     protected String trustStoreType = KeyStore.getDefaultType();
1:     protected String keyStoreType = KeyStore.getDefaultType();
/////////////////////////////////////////////////////////////////////////
1:         KeyStore trustedCertStore = KeyStore.getInstance(getTrustStoreType());
/////////////////////////////////////////////////////////////////////////
1:         KeyStore ks = KeyStore.getInstance(getKeyStoreType());
/////////////////////////////////////////////////////////////////////////
1:     public String getTrustStoreType() {
1:         return trustStoreType;
1:     }
1: 
1:     public void setTrustStoreType(String type) {
1:         trustStoreType = type;
1:     }
1: 
/////////////////////////////////////////////////////////////////////////
1:     public String getKeyStoreType() {
1:         return keyStoreType;
1:     }
1: 
1:     public void setKeyStoreType(String type) {
1:         keyStoreType = type;
1:     }
1: 
1: 
author:gtully
-------------------------------------------------------------------------------
commit:815e0ec
/////////////////////////////////////////////////////////////////////////
1:     protected String keyStoreKeyPassword;
/////////////////////////////////////////////////////////////////////////
0:                 kmf.init(ks, keyStoreKeyPassword !=null ? keyStoreKeyPassword.toCharArray() : keyStorePassword.toCharArray());
/////////////////////////////////////////////////////////////////////////
1: 
1:     public String getKeyStoreKeyPassword() {
1:         return keyStoreKeyPassword;
1:     }
1: 
1:     /**
1:      * The password to match the key from the keyStore.
1:      *
1:      * @param keyStoreKeyPassword
1:      *            The password for the private key stored in the
1:      *            keyStore if different from keyStorePassword.
1:      */
1:     public void setKeyStoreKeyPassword(String keyStoreKeyPassword) {
1:         this.keyStoreKeyPassword = keyStoreKeyPassword;
1:     }
1: 
author:Timothy A. Bish
-------------------------------------------------------------------------------
commit:36cc175
/////////////////////////////////////////////////////////////////////////
1: import java.io.File;
1: import java.io.FileInputStream;
/////////////////////////////////////////////////////////////////////////
1:  * There are two alternative approaches you can use to provide X.509
1:  * certificates for the SSL connections:
1:  * Call <code>setTrustStore</code>, <code>setTrustStorePassword</code>,
1:  * <code>setKeyStore</code>, and <code>setKeyStorePassword</code>.
/////////////////////////////////////////////////////////////////////////
1:      * @param km
1:      *            The KeyManagers used.
1:      * @param tm
1:      *            The TrustManagers used.
1:      * @param random
1:      *            The SecureRandom number used.
/////////////////////////////////////////////////////////////////////////
1:     @Override
/////////////////////////////////////////////////////////////////////////
0:             InputStream tsStream = getInputStream(trustStore);
0:             TrustManagerFactory tmf = TrustManagerFactory.getInstance(TrustManagerFactory.getDefaultAlgorithm());
/////////////////////////////////////////////////////////////////////////
1:         KeyManagerFactory kmf = KeyManagerFactory.getInstance(KeyManagerFactory.getDefaultAlgorithm());
/////////////////////////////////////////////////////////////////////////
0:         InputStream in = getInputStream(fileName);
0:         while (i > 0) {
/////////////////////////////////////////////////////////////////////////
1:     protected InputStream getInputStream(String urlOrResource) throws IOException {
1:         try {
1:             File ifile = new File(urlOrResource);
1:             // only open the file if and only if it exists
1:             if (ifile.exists()) {
1:                 return new FileInputStream(ifile);
1:             }
1:         } catch (Exception e) {
1:         }
1: 
1: 
1:             if (ins != null) {
1:                 return ins;
1:             }
1:         } catch (MalformedURLException ignore) {
1:             ins = Thread.currentThread().getContextClassLoader().getResourceAsStream(urlOrResource);
1:             throw new IOException("Could not load resource: " + urlOrResource);
/////////////////////////////////////////////////////////////////////////
1:      * The location of a keystore file (in <code>jks</code> format) containing
1:      * one or more trusted certificates.
1:      * @param trustStore
1:      *            If specified with a scheme, treat as a URL, otherwise treat as
1:      *            a classpath resource.
/////////////////////////////////////////////////////////////////////////
1:      * @param trustStorePassword
1:      *            The password used to unlock the keystore file.
/////////////////////////////////////////////////////////////////////////
1:      * The location of a keystore file (in <code>jks</code> format) containing a
1:      * certificate and its private key.
1:      * @param keyStore
1:      *            If specified with a scheme, treat as a URL, otherwise treat as
1:      *            a classpath resource.
/////////////////////////////////////////////////////////////////////////
1:      * @param keyStorePassword
1:      *            The password, which is used both to unlock the keystore file
1:      *            and as the pass phrase for the private key stored in the
1:      *            keystore.
commit:e49f5d9
/////////////////////////////////////////////////////////////////////////
1: import java.security.KeyStore;
1: 
/////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////
1:  *
1:  *
1:  *
1:  *
1: 
/////////////////////////////////////////////////////////////////////////
1:      *
/////////////////////////////////////////////////////////////////////////
1:      *
/////////////////////////////////////////////////////////////////////////
1:         return trustStoreManagers;
0:         KeyManagerFactory kmf =
0:             KeyManagerFactory.getInstance(KeyManagerFactory.getDefaultAlgorithm());
/////////////////////////////////////////////////////////////////////////
1:         return keystoreManagers;
/////////////////////////////////////////////////////////////////////////
1: 
1:         InputStream ins = null;
1:         try {
1:             URL url = new URL(urlOrResource);
1:             ins = url.openStream();
1:         }
0:         catch (MalformedURLException ignore) {
0:             ins = null;
1:         }
1: 
1:         // Alternatively, treat as classpath resource
1:         if (ins == null) {
0:             ins = getClass().getClassLoader().getResourceAsStream(urlOrResource);
1:         }
1: 
1:         if (ins == null) {
1:         }
1: 
1:         return ins;
1: 
1: 
1:      *
1: 
1: 
1:      *
1: 
1: 
1:      *
1: 
1: 
1:      *
author:Hiram R. Chirino
-------------------------------------------------------------------------------
commit:9a8f6e4
commit:230a86c
/////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////
1:  *      http://www.apache.org/licenses/LICENSE-2.0
/////////////////////////////////////////////////////////////////////////
1:  * An ActiveMQConnectionFactory that allows access to the key and trust managers
1:  * used for SslConnections. There is no reason to use this class unless SSL is
1:  * being used AND the key and trust managers need to be specified from within
1:  * code. In fact, if the URI passed to this class does not have an "ssl" scheme,
1:  * this class will pass all work on to its superclass.
1:     protected KeyManager[] keyManager;
1:     protected TrustManager[] trustManager;
1:     protected SecureRandom secureRandom;
1: 
/////////////////////////////////////////////////////////////////////////
1: 
1:      * Overriding to make special considerations for SSL connections. If we are
1:      * not using SSL, the superclass's method is called. If we are using SSL, an
1:      * SslConnectionFactory is used and it is given the needed key and trust
1:      * managers.
/////////////////////////////////////////////////////////////////////////
1: 
commit:1a88ac6
/////////////////////////////////////////////////////////////////////////
1: /**
1:  *
1:  * Licensed to the Apache Software Foundation (ASF) under one or more
1:  * contributor license agreements.  See the NOTICE file distributed with
1:  * this work for additional information regarding copyright ownership.
1:  * The ASF licenses this file to You under the Apache License, Version 2.0
1:  * (the "License"); you may not use this file except in compliance with
1:  * the License.  You may obtain a copy of the License at
1:  *
0:  * http://www.apache.org/licenses/LICENSE-2.0
1:  *
1:  * Unless required by applicable law or agreed to in writing, software
1:  * distributed under the License is distributed on an "AS IS" BASIS,
1:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:  * See the License for the specific language governing permissions and
1:  * limitations under the License.
1:  */
1: 
1: package org.apache.activemq;
1: 
1: import org.apache.activemq.transport.Transport;
0: import org.apache.activemq.transport.TransportFactory;
0: import org.apache.activemq.transport.tcp.SslTransportFactory;
1: import org.apache.activemq.util.JMSExceptionSupport;
1: 
1: import java.net.URI;
0: import java.net.URISyntaxException;
0: import java.security.KeyManagementException;
0: import java.security.NoSuchAlgorithmException;
1: import java.security.SecureRandom;
1: 
1: import javax.jms.JMSException;
1: import javax.net.ssl.KeyManager;
0: import javax.net.ssl.SSLContext;
1: import javax.net.ssl.TrustManager;
1: 
1: /**
0:  * An ActiveMQConnectionFactory that allows access to the key and trust managers used for SslConnections.
1:  * 
0:  * There is no reason to use this class unless SSL is being used AND the key and trust managers need to be specified
0:  *      from within code. In fact, if the URI passed to this class does not have an "ssl" scheme, this class will
0:  *      pass all work on to its superclass.
1:  * 
1:  * @author sepandm@gmail.com
1:  *
1:  */
1: public class ActiveMQSslConnectionFactory extends ActiveMQConnectionFactory {
1:     // The key and trust managers used to initialize the used SSLContext.
0:     protected KeyManager[] keyManager = null;
0:     protected TrustManager[] trustManager = null;
0:     protected SecureRandom secureRandom = null;
1:     
1:     /**
1:      * Sets the key and trust managers used when creating SSL connections.
1:      * 
0:      * @param km The KeyManagers used.
0:      * @param tm The TrustManagers used.
0:      * @param random The SecureRandom number used.
1:      */
0:     public void setKeyAndTrustManagers(KeyManager[] km, TrustManager[] tm, SecureRandom random) {
1:         keyManager = km;
1:         trustManager = tm;
1:         secureRandom = random;
1:     }
1:     
1:     /**
0:      * Overriding to make special considerations for SSL connections.
1:      * 
0:      * If we are not using SSL, the superclass's method is called.
0:      * If we are using SSL, an SslConnectionFactory is used and it is given the
0:      *      needed key and trust managers.
1:      * 
1:      * @author sepandm@gmail.com
1:      */
1:     protected Transport createTransport() throws JMSException {
0:         // If the given URI is non-ssl, let superclass handle it.
0:         if (!brokerURL.getScheme().equals("ssl")) {
1:             return super.createTransport();
1:         }
1:         
1:         try {
0:             SslTransportFactory sslFactory = new SslTransportFactory();
0:             sslFactory.setKeyAndTrustManagers(keyManager, trustManager, secureRandom);
0:             return sslFactory.doConnect(brokerURL);
1:         } catch (Exception e) {
1:             throw JMSExceptionSupport.create("Could not create Transport. Reason: " + e, e);
1:         }
1:     }
1: }
author:Gary Tully
-------------------------------------------------------------------------------
commit:aaf0357
/////////////////////////////////////////////////////////////////////////
1:             }
1:             if (keyManager != null || trustManager != null) {
1:                 SslContext.setCurrentSslContext(new SslContext(keyManager, trustManager, secureRandom));
commit:c4cdd51
/////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////
1:         SslContext existing = SslContext.getCurrentSslContext();
1:             if (keyStore != null || trustStore != null) {
1:                 trustManager = createTrustManager();
0:                 if (keyManager != null || trustManager != null) {
0:                     SslContext.setCurrentSslContext(new SslContext(keyManager, trustManager, secureRandom));
1:                 }
0:             return super.createTransport();
1:         } finally {
1:             SslContext.setCurrentSslContext(existing);
1: 
1:         if (trustStore != null) {
0:             InputStream tsStream = getUrlOrResourceAsStream(trustStore);
1: 
0:             trustedCertStore.load(tsStream, trustStorePassword.toCharArray());
0:             TrustManagerFactory tmf  =
0:                     TrustManagerFactory.getInstance(TrustManagerFactory.getDefaultAlgorithm());
1: 
0:             tmf.init(trustedCertStore);
0:             trustStoreManagers = tmf.getTrustManagers();
1:         }
/////////////////////////////////////////////////////////////////////////
1:         if (keyStore != null) {
1:             byte[] sslCert = loadClientCredential(keyStore);
1: 
1:             if (sslCert != null && sslCert.length > 0) {
0:                 ByteArrayInputStream bin = new ByteArrayInputStream(sslCert);
0:                 ks.load(bin, keyStorePassword.toCharArray());
0:                 kmf.init(ks, keyStorePassword.toCharArray());
0:                 keystoreManagers = kmf.getKeyManagers();
1:             }
/////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////
1:     public void setTrustStore(String trustStore) throws Exception {
/////////////////////////////////////////////////////////////////////////
1:     public void setKeyStore(String keyStore) throws Exception {
commit:57f5e7e
/////////////////////////////////////////////////////////////////////////
1: import java.io.ByteArrayInputStream;
1: import java.io.ByteArrayOutputStream;
0: import java.io.FileInputStream;
1: import java.io.IOException;
1: import java.io.InputStream;
0: import java.security.KeyStore;
1: 
1: import java.net.MalformedURLException;
0: import java.net.URI;
1: import java.net.URL;
1: import javax.net.ssl.KeyManagerFactory;
1: import javax.net.ssl.TrustManagerFactory;
0: import org.apache.activemq.broker.BrokerService;
0: import org.apache.commons.logging.Log;
0: import org.apache.commons.logging.LogFactory;
/////////////////////////////////////////////////////////////////////////
0:  * There are two alternative approaches you can use to provide X.509 certificates
0:  * for the SSL connections:
0:  * 
0:  * Call <code>setTrustStore</code>, <code>setTrustStorePassword</code>, <code>setKeyStore</code>,
0:  * and <code>setKeyStorePassword</code>.
0:  * 
1:  * Call <code>setKeyAndTrustManagers</code>.
0:  * 
0:     private static final Log LOG = LogFactory.getLog(ActiveMQSslConnectionFactory.class);
1:     protected String trustStore;
1:     protected String trustStorePassword;
1:     protected String keyStore;
1:     protected String keyStorePassword;
1: 
1:     public ActiveMQSslConnectionFactory() {
1:         super();
1:     }
1: 
1:     public ActiveMQSslConnectionFactory(String brokerURL) {
1:         super(brokerURL);
1:     }
1: 
1:     public ActiveMQSslConnectionFactory(URI brokerURL) {
1:         super(brokerURL);
1:     }
/////////////////////////////////////////////////////////////////////////
0:             if (keyManager == null || trustManager == null) {
0:                 trustManager = createTrustManager();
1:                 keyManager = createKeyManager();
0:                 // secureRandom can be left as null
1:             }
/////////////////////////////////////////////////////////////////////////
0: 
1:     protected TrustManager[] createTrustManager() throws Exception {
1:         TrustManager[] trustStoreManagers = null;
0:         KeyStore trustedCertStore = KeyStore.getInstance("jks");
0:         
0:         InputStream tsStream = getUrlOrResourceAsStream(trustStore);
0:         
0:         trustedCertStore.load(tsStream, trustStorePassword.toCharArray());
0:         TrustManagerFactory tmf  = 
0:             TrustManagerFactory.getInstance(TrustManagerFactory.getDefaultAlgorithm());
0:   
0:         tmf.init(trustedCertStore);
0:         trustStoreManagers = tmf.getTrustManagers();
0:         return trustStoreManagers; 
1:     }
0: 
1:     protected KeyManager[] createKeyManager() throws Exception {
0:         KeyManagerFactory kmf = 
0:             KeyManagerFactory.getInstance(KeyManagerFactory.getDefaultAlgorithm());  
0:         KeyStore ks = KeyStore.getInstance("jks");
1:         KeyManager[] keystoreManagers = null;
0:         
0:         byte[] sslCert = loadClientCredential(keyStore);
0:         
0:        
0:         if (sslCert != null && sslCert.length > 0) {
0:             ByteArrayInputStream bin = new ByteArrayInputStream(sslCert);
0:             ks.load(bin, keyStorePassword.toCharArray());
0:             kmf.init(ks, keyStorePassword.toCharArray());
0:             keystoreManagers = kmf.getKeyManagers();
1:         }
0:         return keystoreManagers;          
1:     }
0: 
1:     protected byte[] loadClientCredential(String fileName) throws IOException {
1:         if (fileName == null) {
1:             return null;
1:         }
0:         InputStream in = getUrlOrResourceAsStream(fileName);
0:         //FileInputStream in = new FileInputStream(fileName);
0:         ByteArrayOutputStream out = new ByteArrayOutputStream();
0:         byte[] buf = new byte[512];
0:         int i = in.read(buf);
0:         while (i  > 0) {
0:             out.write(buf, 0, i);
0:             i = in.read(buf);
1:         }
0:         in.close();
0:         return out.toByteArray();
1:     }
0:     
0:     protected InputStream getUrlOrResourceAsStream(String urlOrResource) throws IOException {
0:     	InputStream ins = null;
0:     	try {
0:     		URL url = new URL(urlOrResource);
0:     		ins = url.openStream();
1:     	}
0:     	catch (MalformedURLException ignore) {
0:     		ins = null;
1:     	}
0:     	
0:     	// Alternatively, treat as classpath resource
0:     	if (ins == null) {
0:         	ins = getClass().getClassLoader().getResourceAsStream(urlOrResource);
1:     	}
0:     	
0:     	if (ins == null) {
0:             throw new java.io.IOException("Could not load resource: " + urlOrResource);
1:     	}
0:     	
0:     	return ins;
1:     }
0:     
1:     public String getTrustStore() {
1:         return trustStore;
1:     }
0:     
1:     /**
0:      * The location of a keystore file (in <code>jks</code> format) containing one or more
0:      * trusted certificates.
0:      * 
0:      * @param trustStore If specified with a scheme, treat as a URL, otherwise treat as a classpath resource.
1:      */
0:     public void setTrustStore(String trustStore) {
1:         this.trustStore = trustStore;
1:         trustManager = null;
1:     }
0:     
1:     public String getTrustStorePassword() {
1:         return trustStorePassword;
1:     }
0:     
1:     /**
1:      * The password to match the trust store specified by {@link setTrustStore}.
0:      * 
0:      * @param trustStorePassword The password used to unlock the keystore file.
1:      */
1:     public void setTrustStorePassword(String trustStorePassword) {
1:         this.trustStorePassword = trustStorePassword;
1:     }
0:     
1:     public String getKeyStore() {
1:         return keyStore;
1:     }
0:     
1:     /**
0:      * The location of a keystore file (in <code>jks</code> format) containing a certificate
0:      * and its private key.
0:      * 
0:      * @param keyStore If specified with a scheme, treat as a URL, otherwise treat as a classpath resource.
1:      */
0:     public void setKeyStore(String keyStore) {
1:         this.keyStore = keyStore;
1:         keyManager = null;
1:     }
0:     
1:     public String getKeyStorePassword() {
1:         return keyStorePassword;
1:     }
0:     
1:     /**
1:      * The password to match the key store specified by {@link setKeyStore}.
0:      * 
0:      * @param keyStorePassword The password, which is used both to unlock the keystore file
0:      * and as the pass phrase for the private key stored in the keystore.
1:      */
1:     public void setKeyStorePassword(String keyStorePassword) {
1:         this.keyStorePassword = keyStorePassword;
1:     }
0: 
author:Bosanac Dejan
-------------------------------------------------------------------------------
commit:0479a4e
/////////////////////////////////////////////////////////////////////////
0: 
1: import org.apache.activemq.broker.SslContext;
/////////////////////////////////////////////////////////////////////////
0:             SslContext ctx = new SslContext(keyManager, trustManager, secureRandom);
0:             SslContext.setCurrentSslContext(ctx);
author:Robert Davies
-------------------------------------------------------------------------------
commit:0e0b6b7
/////////////////////////////////////////////////////////////////////////
0: import org.apache.activemq.transport.Transport;
0: import org.apache.activemq.transport.tcp.SslTransportFactory;
0: import org.apache.activemq.util.JMSExceptionSupport;
/////////////////////////////////////////////////////////////////////////
1:     public void setKeyAndTrustManagers(final KeyManager[] km, final TrustManager[] tm, final SecureRandom random) {
============================================================================