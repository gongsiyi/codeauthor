1:d29ca2a: /**
1:57b4941:  * Licensed to the Apache Software Foundation (ASF) under one or more
1:57b4941:  * contributor license agreements.  See the NOTICE file distributed with
1:57b4941:  * this work for additional information regarding copyright ownership.
1:57b4941:  * The ASF licenses this file to You under the Apache License, Version 2.0
1:57b4941:  * (the "License"); you may not use this file except in compliance with
1:57b4941:  * the License.  You may obtain a copy of the License at
3:d29ca2a:  *
1:230a86c:  *      http://www.apache.org/licenses/LICENSE-2.0
1:d29ca2a:  *
1:d29ca2a:  * Unless required by applicable law or agreed to in writing, software
1:d29ca2a:  * distributed under the License is distributed on an "AS IS" BASIS,
1:d29ca2a:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:d29ca2a:  * See the License for the specific language governing permissions and
1:d29ca2a:  * limitations under the License.
1:d29ca2a:  */
1:d29ca2a: package org.apache.activemq.broker.region;
1:013f372: 
1:2728ccb: import java.util.ArrayList;
1:d680ba1: import java.util.HashMap;
1:d29ca2a: import java.util.Iterator;
1:2728ccb: import java.util.List;
1:d680ba1: import java.util.Map;
1:d29ca2a: import java.util.Set;
1:2728ccb: import java.util.concurrent.ConcurrentHashMap;
1:3efd4b0: import java.util.concurrent.locks.ReentrantReadWriteLock;
1:230a86c: 
1:886e2d4: import javax.jms.IllegalStateException;
1:d29ca2a: import javax.jms.JMSException;
1:886e2d4: 
1:e4af2eb: import org.apache.activemq.DestinationDoesNotExistException;
1:886e2d4: import org.apache.activemq.advisory.AdvisorySupport;
1:d29ca2a: import org.apache.activemq.broker.ConnectionContext;
1:84eb9f8: import org.apache.activemq.broker.ConsumerBrokerExchange;
1:84eb9f8: import org.apache.activemq.broker.ProducerBrokerExchange;
1:bc45bf8: import org.apache.activemq.broker.region.policy.PolicyEntry;
1:55da9bc: import org.apache.activemq.broker.region.virtual.CompositeDestinationFilter;
1:d29ca2a: import org.apache.activemq.command.ActiveMQDestination;
1:8d3ca90: import org.apache.activemq.command.ConsumerControl;
1:ecf89a6: import org.apache.activemq.command.ConsumerId;
1:d29ca2a: import org.apache.activemq.command.ConsumerInfo;
1:d29ca2a: import org.apache.activemq.command.Message;
1:d29ca2a: import org.apache.activemq.command.MessageAck;
1:4098942: import org.apache.activemq.command.MessageDispatchNotification;
1:9d671b7: import org.apache.activemq.command.MessagePull;
1:634da7a: import org.apache.activemq.command.ProducerInfo;
1:d29ca2a: import org.apache.activemq.command.RemoveSubscriptionInfo;
1:9d671b7: import org.apache.activemq.command.Response;
1:2728ccb: import org.apache.activemq.filter.DestinationFilter;
1:d29ca2a: import org.apache.activemq.filter.DestinationMap;
1:ea0cd01: import org.apache.activemq.security.SecurityContext;
1:d29ca2a: import org.apache.activemq.thread.TaskRunnerFactory;
1:6d8e2c5: import org.apache.activemq.usage.SystemUsage;
1:8bf987b: import org.slf4j.Logger;
1:8bf987b: import org.slf4j.LoggerFactory;
1:2728ccb: 
1:d29ca2a: /**
1:b0c2a40:  *
1:d29ca2a:  */
1:fc00993: public abstract class AbstractRegion implements Region {
1:2728ccb: 
1:8bf987b:     private static final Logger LOG = LoggerFactory.getLogger(AbstractRegion.class);
1:cb1d21f: 
1:ecf89a6:     protected final Map<ActiveMQDestination, Destination> destinations = new ConcurrentHashMap<ActiveMQDestination, Destination>();
1:d29ca2a:     protected final DestinationMap destinationMap = new DestinationMap();
1:ecf89a6:     protected final Map<ConsumerId, Subscription> subscriptions = new ConcurrentHashMap<ConsumerId, Subscription>();
1:9dd11cb:     protected final SystemUsage usageManager;
1:bfaff9b:     protected final DestinationFactory destinationFactory;
1:d29ca2a:     protected final DestinationStatistics destinationStatistics;
1:886e2d4:     protected final RegionStatistics regionStatistics = new RegionStatistics();
1:6cb66e4:     protected final RegionBroker broker;
1:230a86c:     protected boolean autoCreateDestinations = true;
1:d29ca2a:     protected final TaskRunnerFactory taskRunnerFactory;
1:3efd4b0:     protected final ReentrantReadWriteLock destinationsLock = new ReentrantReadWriteLock();
1:ecf89a6:     protected final Map<ConsumerId, Object> consumerChangeMutexMap = new HashMap<ConsumerId, Object>();
1:230a86c:     protected boolean started;
1:013f372: 
1:204f91f:     public AbstractRegion(RegionBroker broker, DestinationStatistics destinationStatistics, SystemUsage memoryManager,
1:204f91f:             TaskRunnerFactory taskRunnerFactory, DestinationFactory destinationFactory) {
2:bfaff9b:         if (broker == null) {
1:bfaff9b:             throw new IllegalArgumentException("null broker");
1:cb1d21f:         }
1:4098942:         this.broker = broker;
1:d29ca2a:         this.destinationStatistics = destinationStatistics;
1:9dd11cb:         this.usageManager = memoryManager;
1:d29ca2a:         this.taskRunnerFactory = taskRunnerFactory;
1:cef0221:         if (destinationFactory == null) {
1:bfaff9b:             throw new IllegalArgumentException("null destinationFactory");
1:013f372:         }
1:bfaff9b:         this.destinationFactory = destinationFactory;
1:d29ca2a:     }
1:55da9bc: 
1:e4af2eb:     @Override
1:204f91f:     public final void start() throws Exception {
1:d2e6062:         started = true;
1:230a86c: 
1:ecf89a6:         Set<ActiveMQDestination> inactiveDests = getInactiveDestinations();
1:ecf89a6:         for (Iterator<ActiveMQDestination> iter = inactiveDests.iterator(); iter.hasNext();) {
1:ecf89a6:             ActiveMQDestination dest = iter.next();
1:230a86c: 
1:230a86c:             ConnectionContext context = new ConnectionContext();
1:230a86c:             context.setBroker(broker.getBrokerService().getBroker());
1:ea0cd01:             context.setSecurityContext(SecurityContext.BROKER_SECURITY_CONTEXT);
1:204f91f:             context.getBroker().addDestination(context, dest, false);
1:2728ccb:         }
1:3efd4b0:         destinationsLock.readLock().lock();
1:3efd4b0:         try{
1:ecf89a6:             for (Iterator<Destination> i = destinations.values().iterator(); i.hasNext();) {
1:ecf89a6:                 Destination dest = i.next();
1:d29ca2a:                 dest.start();
1:d29ca2a:             }
1:3efd4b0:         } finally {
1:3efd4b0:             destinationsLock.readLock().unlock();
1:d29ca2a:         }
1:d29ca2a:     }
1:886e2d4: 
1:e4af2eb:     @Override
1:013f372:     public void stop() throws Exception {
1:d2e6062:         started = false;
1:3efd4b0:         destinationsLock.readLock().lock();
1:3efd4b0:         try{
1:ecf89a6:             for (Iterator<Destination> i = destinations.values().iterator(); i.hasNext();) {
1:ecf89a6:                 Destination dest = i.next();
1:d29ca2a:                 dest.stop();
1:013f372:             }
1:3efd4b0:         } finally {
1:3efd4b0:             destinationsLock.readLock().unlock();
1:38cfc9b:         }
1:230a86c: 
1:886e2d4:         destinationsLock.writeLock().lock();
1:886e2d4:         try {
1:886e2d4:             destinations.clear();
1:886e2d4:             regionStatistics.getAdvisoryDestinations().reset();
1:886e2d4:             regionStatistics.getDestinations().reset();
1:886e2d4:             regionStatistics.getAllDestinations().reset();
1:886e2d4:         } finally {
1:886e2d4:             destinationsLock.writeLock().unlock();
1:886e2d4:         }
1:931ed76:     }
1:230a86c: 
1:e4af2eb:     @Override
1:204f91f:     public Destination addDestination(ConnectionContext context, ActiveMQDestination destination,
1:204f91f:             boolean createIfTemporary) throws Exception {
1:2728ccb: 
1:3efd4b0:         destinationsLock.writeLock().lock();
1:3efd4b0:         try {
1:ecf89a6:             Destination dest = destinations.get(destination);
1:230a86c:             if (dest == null) {
1:204f91f:                 if (destination.isTemporary() == false || createIfTemporary) {
1:886e2d4:                     // Limit the number of destinations that can be created if
1:886e2d4:                     // maxDestinations has been set on a policy
1:886e2d4:                     validateMaxDestinations(destination);
1:886e2d4: 
1:e1bbde7:                     LOG.debug("{} adding destination: {}", broker.getBrokerName(), destination);
1:230a86c:                     dest = createDestination(context, destination);
1:204f91f:                     // intercept if there is a valid interceptor defined
1:55da9bc:                     DestinationInterceptor destinationInterceptor = broker.getDestinationInterceptor();
1:230a86c:                     if (destinationInterceptor != null) {
1:230a86c:                         dest = destinationInterceptor.intercept(dest);
1:179d95e:                     }
1:204f91f:                     dest.start();
1:e415d29:                     addSubscriptionsForDestination(context, dest);
1:230a86c:                     destinations.put(destination, dest);
1:886e2d4:                     updateRegionDestCounts(destination, 1);
1:0b76d3a:                     destinationMap.unsynchronizedPut(destination, dest);
1:d4ccc50:                 }
1:204f91f:                 if (dest == null) {
1:8012f28:                     throw new DestinationDoesNotExistException(destination.getQualifiedName());
1:b9045db:                 }
1:b9045db:             }
2:d29ca2a:             return dest;
1:a38a7c0:         } finally {
1:3efd4b0:             destinationsLock.writeLock().unlock();
1:d29ca2a:         }
1:d17eceb:     }
1:2728ccb: 
1:301203e:     public Map<ConsumerId, Subscription> getSubscriptions() {
1:301203e:         return subscriptions;
1:301203e:     }
1:886e2d4: 
1:301203e: 
1:886e2d4:     /**
1:886e2d4:      * Updates the counts in RegionStatistics based on whether or not the destination
1:886e2d4:      * is an Advisory Destination or not
1:886e2d4:      *
1:886e2d4:      * @param destination the destination being used to determine which counters to update
1:886e2d4:      * @param count the count to add to the counters
1:886e2d4:      */
1:886e2d4:     protected void updateRegionDestCounts(ActiveMQDestination destination, int count) {
1:886e2d4:         if (destination != null) {
1:886e2d4:             if (AdvisorySupport.isAdvisoryTopic(destination)) {
1:886e2d4:                 regionStatistics.getAdvisoryDestinations().add(count);
1:886e2d4:             } else {
1:886e2d4:                 regionStatistics.getDestinations().add(count);
1:886e2d4:             }
1:886e2d4:             regionStatistics.getAllDestinations().add(count);
1:886e2d4:         }
1:886e2d4:     }
1:886e2d4: 
1:886e2d4:     /**
1:886e2d4:      * This method checks whether or not the destination can be created based on
1:886e2d4:      * {@link PolicyEntry#getMaxDestinations}, if it has been set. Advisory
1:886e2d4:      * topics are ignored.
1:886e2d4:      *
1:886e2d4:      * @param destination
1:886e2d4:      * @throws Exception
1:886e2d4:      */
1:886e2d4:     protected void validateMaxDestinations(ActiveMQDestination destination)
1:886e2d4:             throws Exception {
1:886e2d4:         if (broker.getDestinationPolicy() != null) {
1:886e2d4:             PolicyEntry entry = broker.getDestinationPolicy().getEntryFor(destination);
1:886e2d4:             // Make sure the destination is not an advisory topic
1:886e2d4:             if (entry != null && entry.getMaxDestinations() >= 0
1:886e2d4:                     && !AdvisorySupport.isAdvisoryTopic(destination)) {
1:886e2d4:                 // If there is an entry for this destination, look up the set of
1:886e2d4:                 // destinations associated with this policy
1:886e2d4:                 // If a destination isn't specified, then just count up
1:886e2d4:                 // non-advisory destinations (ie count all destinations)
1:886e2d4:                 int destinationSize = (int) (entry.getDestination() != null ?
1:0b76d3a:                         destinationMap.unsynchronizedGet(entry.getDestination()).size() : regionStatistics.getDestinations().getCount());
1:886e2d4:                 if (destinationSize >= entry.getMaxDestinations()) {
1:886e2d4:                     if (entry.getDestination() != null) {
1:886e2d4:                         throw new IllegalStateException(
1:886e2d4:                                 "The maxmimum number of destinations allowed ("+ entry.getMaxDestinations() +
1:886e2d4:                                 ") for the policy " + entry.getDestination() + " has already been reached.");
1:886e2d4:                     // No destination has been set (default policy)
1:886e2d4:                     } else {
1:886e2d4:                         throw new IllegalStateException("The maxmimum number of destinations allowed ("
1:886e2d4:                                         + entry.getMaxDestinations() + ") has already been reached.");
1:886e2d4:                     }
1:886e2d4:                 }
1:886e2d4:             }
1:886e2d4:         }
1:886e2d4:     }
1:886e2d4: 
1:e4af2eb:     protected List<Subscription> addSubscriptionsForDestination(ConnectionContext context, Destination dest) throws Exception {
1:ecf89a6:         List<Subscription> rc = new ArrayList<Subscription>();
1:230a86c:         // Add all consumers that are interested in the destination.
1:ecf89a6:         for (Iterator<Subscription> iter = subscriptions.values().iterator(); iter.hasNext();) {
1:ecf89a6:             Subscription sub = iter.next();
1:230a86c:             if (sub.matches(dest.getActiveMQDestination())) {
1:a38a7c0:                 try {
1:e4af2eb:                     ConnectionContext originalContext = sub.getContext() != null ? sub.getContext() : context;
1:e4af2eb:                     dest.addSubscription(originalContext, sub);
1:a38a7c0:                     rc.add(sub);
1:94b404d:                 } catch (SecurityException e) {
1:94b404d:                     if (sub.isWildcard()) {
1:94b404d:                         LOG.debug("Subscription denied for " + sub + " to destination " +
1:94b404d:                             dest.getActiveMQDestination() +  ": " + e.getMessage());
1:94b404d:                     } else {
1:94b404d:                         throw e;
1:d4ccc50:                     }
1:d4ccc50:                 }
1:230a86c:             }
1:230a86c:         }
1:230a86c:         return rc;
1:230a86c: 
1:230a86c:     }
1:230a86c: 
1:e4af2eb:     @Override
1:d29ca2a:     public void removeDestination(ConnectionContext context, ActiveMQDestination destination, long timeout)
1:7f5213b:             throws Exception {
1:2728ccb: 
1:230a86c:         // No timeout.. then try to shut down right way, fails if there are
1:230a86c:         // current subscribers.
1:230a86c:         if (timeout == 0) {
1:ecf89a6:             for (Iterator<Subscription> iter = subscriptions.values().iterator(); iter.hasNext();) {
1:ecf89a6:                 Subscription sub = iter.next();
1:0ee4f5b:                 if (sub.matches(destination) ) {
1:d86c98a:                     throw new JMSException("Destination still has an active subscription: " + destination);
1:0ee4f5b:                 }
1:2728ccb:             }
1:2728ccb:         }
1:2728ccb: 
1:230a86c:         if (timeout > 0) {
1:230a86c:             // TODO: implement a way to notify the subscribers that we want to
1:230a86c:             // take the down
1:230a86c:             // the destination and that they should un-subscribe.. Then wait up
1:230a86c:             // to timeout time before
1:cb1d21f:             // dropping the subscription.
1:d4ccc50:         }
1:5401cf8: 
1:e1bbde7:         LOG.debug("{} removing destination: {}", broker.getBrokerName(), destination);
1:cb1d21f: 
1:3efd4b0:         destinationsLock.writeLock().lock();
1:3efd4b0:         try {
1:ecf89a6:             Destination dest = destinations.remove(destination);
1:230a86c:             if (dest != null) {
1:886e2d4:                 updateRegionDestCounts(destination, -1);
1:886e2d4: 
1:230a86c:                 // timeout<0 or we timed out, we now force any remaining
1:230a86c:                 // subscriptions to un-subscribe.
1:ecf89a6:                 for (Iterator<Subscription> iter = subscriptions.values().iterator(); iter.hasNext();) {
1:ecf89a6:                     Subscription sub = iter.next();
2:230a86c:                     if (sub.matches(destination)) {
1:3b08860:                         dest.removeSubscription(context, sub, 0l);
1:2728ccb:                     }
1:cb1d21f:                 }
1:0b76d3a:                 destinationMap.unsynchronizedRemove(destination, dest);
1:204f91f:                 dispose(context, dest);
1:230a86c:                 DestinationInterceptor destinationInterceptor = broker.getDestinationInterceptor();
1:204f91f:                 if (destinationInterceptor != null) {
1:16f2d75:                     destinationInterceptor.remove(dest);
1:cb1d21f:                 }
1:cb1d21f: 
1:230a86c:             } else {
1:e1bbde7:                 LOG.debug("Cannot remove a destination that doesn't exist: {}", destination);
1:cb1d21f:             }
1:3efd4b0:         } finally {
1:3efd4b0:             destinationsLock.writeLock().unlock();
1:d29ca2a:         }
1:d29ca2a:     }
1:cb1d21f: 
1:f787e20:     /**
1:06a5829:      * Provide an exact or wildcard lookup of destinations in the region
1:230a86c:      *
1:06a5829:      * @return a set of matching destination objects.
1:634da7a:      */
1:e4af2eb:     @Override
1:3efd4b0:     @SuppressWarnings("unchecked")
1:07b6a38:     public Set<Destination> getDestinations(ActiveMQDestination destination) {
1:3efd4b0:         destinationsLock.readLock().lock();
2:3efd4b0:         try{
1:0b76d3a:             return destinationMap.unsynchronizedGet(destination);
1:3efd4b0:         } finally {
1:3efd4b0:             destinationsLock.readLock().unlock();
1:d4ccc50:         }
1:d4ccc50:     }
1:cb1d21f: 
1:e4af2eb:     @Override
1:ecf89a6:     public Map<ActiveMQDestination, Destination> getDestinationMap() {
1:27b3a7c:         return destinations;
1:d29ca2a:     }
1:cb1d21f: 
1:e4af2eb:     @Override
1:3efd4b0:     @SuppressWarnings("unchecked")
1:0def1d4:     public Subscription addConsumer(ConnectionContext context, ConsumerInfo info) throws Exception {
1:e1bbde7:         LOG.debug("{} adding consumer: {} for destination: {}", new Object[]{ broker.getBrokerName(), info.getConsumerId(), info.getDestination() });
1:bc344c9:         ActiveMQDestination destination = info.getDestination();
1:230a86c:         if (destination != null && !destination.isPattern() && !destination.isComposite()) {
1:bc344c9:             // lets auto-create the destination
1:204f91f:             lookup(context, destination,true);
1:d29ca2a:         }
1:e6f5d30: 
1:e8c8abc:         Object addGuard;
1:230a86c:         synchronized (consumerChangeMutexMap) {
1:e8c8abc:             addGuard = consumerChangeMutexMap.get(info.getConsumerId());
1:e8c8abc:             if (addGuard == null) {
1:e8c8abc:                 addGuard = new Object();
1:e8c8abc:                 consumerChangeMutexMap.put(info.getConsumerId(), addGuard);
1:204f91f:             }
1:204f91f:         }
1:e8c8abc:         synchronized (addGuard) {
1:ecf89a6:             Subscription o = subscriptions.get(info.getConsumerId());
1:e8c8abc:             if (o != null) {
1:230a86c:                 LOG.warn("A duplicate subscription was detected. Clients may be misbehaving. Later warnings you may see about subscription removal are a consequence of this.");
1:ecf89a6:                 return o;
1:16f2d75:             }
1:e6f5d30: 
1:230a86c:             // We may need to add some destinations that are in persistent store
1:230a86c:             // but not active
1:d29ca2a:             // in the broker.
1:d29ca2a:             //
1:230a86c:             // TODO: think about this a little more. This is good cause
1:230a86c:             // destinations are not loaded into
1:230a86c:             // memory until a client needs to use the queue, but a management
1:230a86c:             // agent viewing the
1:230a86c:             // broker will not see a destination that exists in persistent
1:230a86c:             // store. We may want to
1:230a86c:             // eagerly load all destinations into the broker but have an
1:230a86c:             // inactive state for the
1:d29ca2a:             // destination which has reduced memory usage.
1:d29ca2a:             //
1:933eb2f:             DestinationFilter.parseFilter(info.getDestination());
1:230a86c: 
1:2728ccb:             Subscription sub = createSubscription(context, info);
1:013f372: 
1:e8c8abc:             // At this point we're done directly manipulating subscriptions,
1:e8c8abc:             // but we need to retain the synchronized block here. Consider
1:e8c8abc:             // otherwise what would happen if at this point a second
1:e8c8abc:             // thread added, then removed, as would be allowed with
1:e8c8abc:             // no mutex held. Remove is only essentially run once
1:e8c8abc:             // so everything after this point would be leaked.
1:4759253: 
1:d29ca2a:             // Add the subscription to all the matching queues.
1:5a27904:             // But copy the matches first - to prevent deadlocks
1:204f91f:             List<Destination> addList = new ArrayList<Destination>();
1:3efd4b0:             destinationsLock.readLock().lock();
1:3efd4b0:             try {
1:0b76d3a:                 for (Destination dest : (Set<Destination>) destinationMap.unsynchronizedGet(info.getDestination())) {
1:5a27904:                     addList.add(dest);
1:d29ca2a:                 }
1:d86c98a:                 // ensure sub visible to any new dest addSubscriptionsForDestination
1:d86c98a:                 subscriptions.put(info.getConsumerId(), sub);
1:3efd4b0:             } finally {
1:3efd4b0:                 destinationsLock.readLock().unlock();
1:d29ca2a:             }
14:d29ca2a: 
1:a38a7c0:             List<Destination> removeList = new ArrayList<Destination>();
1:204f91f:             for (Destination dest : addList) {
1:a38a7c0:                 try {
1:a38a7c0:                     dest.addSubscription(context, sub);
1:a38a7c0:                     removeList.add(dest);
1:94b404d:                 } catch (SecurityException e){
1:94b404d:                     if (sub.isWildcard()) {
1:94b404d:                         LOG.debug("Subscription denied for " + sub + " to destination " +
1:94b404d:                             dest.getActiveMQDestination() + ": " + e.getMessage());
1:94b404d:                     } else {
1:94b404d:                         // remove partial subscriptions
1:94b404d:                         for (Destination remove : removeList) {
1:94b404d:                             try {
1:94b404d:                                 remove.removeSubscription(context, sub, info.getLastDeliveredSequenceId());
1:94b404d:                             } catch (Exception ex) {
1:94b404d:                                 LOG.error("Error unsubscribing " + sub + " from " + remove + ": " + ex.getMessage(), ex);
1:94b404d:                             }
1:94b404d:                         }
1:d86c98a:                         subscriptions.remove(info.getConsumerId());
1:d86c98a:                         removeList.clear();
1:94b404d:                         throw e;
1:94b404d:                     }
1:a38a7c0:                 }
1:a38a7c0:             }
1:a38a7c0:             removeList.clear();
1:d29ca2a: 
1:230a86c:             if (info.isBrowser()) {
1:204f91f:                 ((QueueBrowserSubscription) sub).destinationsAdded();
1:4759253:             }
1:a38a7c0: 
1:e8c8abc:             return sub;
1:d29ca2a:         }
1:d29ca2a:     }
1:d29ca2a: 
1:d29ca2a:     /**
1:f787e20:      * Get all the Destinations that are in storage
1:230a86c:      *
1:f787e20:      * @return Set of all stored destinations
1:d29ca2a:      */
1:3efd4b0:     @SuppressWarnings("rawtypes")
1:230a86c:     public Set getDurableDestinations() {
1:bfaff9b:         return destinationFactory.getDestinations();
1:d29ca2a:     }
1:d29ca2a: 
1:06a5829:     /**
1:f787e20:      * @return all Destinations that don't have active consumers
1:f787e20:      */
1:ecf89a6:     protected Set<ActiveMQDestination> getInactiveDestinations() {
1:ecf89a6:         Set<ActiveMQDestination> inactiveDests = destinationFactory.getDestinations();
1:3efd4b0:         destinationsLock.readLock().lock();
1:3efd4b0:         try {
1:230a86c:             inactiveDests.removeAll(destinations.keySet());
1:3efd4b0:         } finally {
1:3efd4b0:             destinationsLock.readLock().unlock();
1:d29ca2a:         }
1:d29ca2a:         return inactiveDests;
1:d29ca2a:     }
1:d29ca2a: 
1:e4af2eb:     @Override
1:3efd4b0:     @SuppressWarnings("unchecked")
1:7f5213b:     public void removeConsumer(ConnectionContext context, ConsumerInfo info) throws Exception {
1:e1bbde7:         LOG.debug("{} removing consumer: {} for destination: {}", new Object[]{ broker.getBrokerName(), info.getConsumerId(), info.getDestination() });
1:5401cf8: 
1:ecf89a6:         Subscription sub = subscriptions.remove(info.getConsumerId());
1:204f91f:         // The sub could be removed elsewhere - see ConnectionSplitBroker
1:22565e4:         if (sub != null) {
1:d29ca2a: 
1:d29ca2a:             // remove the subscription from all the matching queues.
1:3236474:             List<Destination> removeList = new ArrayList<Destination>();
1:3efd4b0:             destinationsLock.readLock().lock();
1:3efd4b0:             try {
1:0b76d3a:                 for (Destination dest : (Set<Destination>) destinationMap.unsynchronizedGet(info.getDestination())) {
1:3236474:                     removeList.add(dest);
1:d29ca2a:                 }
1:3efd4b0:             } finally {
1:3efd4b0:                 destinationsLock.readLock().unlock();
1:d29ca2a:             }
1:204f91f:             for (Destination dest : removeList) {
1:3b08860:                 dest.removeSubscription(context, sub, info.getLastDeliveredSequenceId());
1:3236474:             }
1:d29ca2a: 
1:e6f5d30:             destroySubscription(sub);
1:e6f5d30:         }
1:e8c8abc:         synchronized (consumerChangeMutexMap) {
1:e8c8abc:             consumerChangeMutexMap.remove(info.getConsumerId());
1:5a27904:         }
1:931ed76:     }
1:c46562b: 
1:e6f5d30:     protected void destroySubscription(Subscription sub) {
1:c46562b:         sub.destroy();
1:931ed76:     }
1:d29ca2a: 
1:e4af2eb:     @Override
1:7f5213b:     public void removeSubscription(ConnectionContext context, RemoveSubscriptionInfo info) throws Exception {
1:d29ca2a:         throw new JMSException("Invalid operation.");
1:d29ca2a:     }
1:d29ca2a: 
1:e4af2eb:     @Override
1:230a86c:     public void send(final ProducerBrokerExchange producerExchange, Message messageSend) throws Exception {
1:84eb9f8:         final ConnectionContext context = producerExchange.getConnectionContext();
1:230a86c: 
1:230a86c:         if (producerExchange.isMutable() || producerExchange.getRegionDestination() == null) {
1:204f91f:             final Destination regionDestination = lookup(context, messageSend.getDestination(),false);
1:84eb9f8:             producerExchange.setRegionDestination(regionDestination);
1:d29ca2a:         }
1:230a86c: 
1:4569d7d:         producerExchange.getRegionDestination().send(producerExchange, messageSend);
1:6683eb6: 
1:07ec890:         if (producerExchange.getProducerState() != null && producerExchange.getProducerState().getInfo() != null){
1:6683eb6:             producerExchange.getProducerState().getInfo().incrementSentCount();
1:07ec890:         }
1:d29ca2a:     }
1:d29ca2a: 
1:e4af2eb:     @Override
1:230a86c:     public void acknowledge(ConsumerBrokerExchange consumerExchange, MessageAck ack) throws Exception {
1:230a86c:         Subscription sub = consumerExchange.getSubscription();
1:ecf89a6:         if (sub == null) {
1:8e59e24:             sub = subscriptions.get(ack.getConsumerId());
2:230a86c:             if (sub == null) {
1:5f6f23e:                 if (!consumerExchange.getConnectionContext().isInRecoveryMode()) {
1:e1bbde7:                     LOG.warn("Ack for non existent subscription, ack: {}", ack);
1:230a86c:                     throw new IllegalArgumentException("The subscription does not exist: " + ack.getConsumerId());
1:5f6f23e:                 } else {
1:e1bbde7:                     LOG.debug("Ack for non existent subscription in recovery, ack: {}", ack);
1:5f6f23e:                     return;
1:ecf89a6:                 }
1:d29ca2a:             }
1:84eb9f8:             consumerExchange.setSubscription(sub);
1:5f6f23e:         }
1:230a86c:         sub.acknowledge(consumerExchange.getConnectionContext(), ack);
1:931ed76:     }
1:d29ca2a: 
1:e4af2eb:     @Override
1:9d671b7:     public Response messagePull(ConnectionContext context, MessagePull pull) throws Exception {
1:ecf89a6:         Subscription sub = subscriptions.get(pull.getConsumerId());
1:ecf89a6:         if (sub == null) {
1:230a86c:             throw new IllegalArgumentException("The subscription does not exist: " + pull.getConsumerId());
1:ecf89a6:         }
1:9d671b7:         return sub.pullMessage(context, pull);
1:931ed76:     }
1:d29ca2a: 
1:204f91f:     protected Destination lookup(ConnectionContext context, ActiveMQDestination destination,boolean createTemporary) throws Exception {
1:38cfc9b:         Destination dest = null;
1:d29ca2a: 
1:3efd4b0:         destinationsLock.readLock().lock();
1:3efd4b0:         try {
1:ecf89a6:             dest = destinations.get(destination);
1:3efd4b0:         } finally {
1:3efd4b0:             destinationsLock.readLock().unlock();
1:38cfc9b:         }
1:d29ca2a: 
1:230a86c:         if (dest == null) {
1:204f91f:             if (isAutoCreateDestinations()) {
1:230a86c:                 // Try to auto create the destination... re-invoke broker
1:230a86c:                 // from the
1:d29ca2a:                 // top so that the proper security checks are performed.
1:0b76d3a:                 dest = context.getBroker().addDestination(context, destination, createTemporary);
1:d29ca2a:             }
1:230a86c: 
1:230a86c:             if (dest == null) {
1:230a86c:                 throw new JMSException("The destination " + destination + " does not exist.");
1:d29ca2a:             }
1:d29ca2a:         }
1:4759253:         return dest;
1:d29ca2a:     }
1:d29ca2a: 
1:e4af2eb:     @Override
1:230a86c:     public void processDispatchNotification(MessageDispatchNotification messageDispatchNotification) throws Exception {
1:ecf89a6:         Subscription sub = subscriptions.get(messageDispatchNotification.getConsumerId());
1:230a86c:         if (sub != null) {
1:4098942:             sub.processMessageDispatchNotification(messageDispatchNotification);
1:f9d5449:         } else {
1:f9d5449:             throw new JMSException("Slave broker out of sync with master - Subscription: "
1:204f91f:                     + messageDispatchNotification.getConsumerId() + " on "
1:204f91f:                     + messageDispatchNotification.getDestination() + " does not exist for dispatch of message: "
1:f9d5449:                     + messageDispatchNotification.getMessageId());
1:f9d5449:         }
1:f9d5449:     }
1:f9d5449: 
1:f9d5449:     /*
1:204f91f:      * For a Queue/TempQueue, dispatch order is imperative to match acks, so the
1:204f91f:      * dispatch is deferred till the notification to ensure that the
1:204f91f:      * subscription chosen by the master is used. AMQ-2102
1:f9d5449:      */
1:204f91f:     protected void processDispatchNotificationViaDestination(MessageDispatchNotification messageDispatchNotification)
1:7f5213b:             throws Exception {
1:f9d5449:         Destination dest = null;
1:3efd4b0:         destinationsLock.readLock().lock();
1:3efd4b0:         try {
1:f9d5449:             dest = destinations.get(messageDispatchNotification.getDestination());
1:3efd4b0:         } finally {
1:3efd4b0:             destinationsLock.readLock().unlock();
1:f9d5449:         }
1:230a86c: 
1:f9d5449:         if (dest != null) {
1:f9d5449:             dest.processDispatchNotification(messageDispatchNotification);
1:f9d5449:         } else {
1:204f91f:             throw new JMSException("Slave broker out of sync with master - Destination: "
1:204f91f:                     + messageDispatchNotification.getDestination() + " does not exist for consumer "
1:204f91f:                     + messageDispatchNotification.getConsumerId() + " with message: "
1:f9d5449:                     + messageDispatchNotification.getMessageId());
1:38cfc9b:         }
1:22565e4:     }
1:d29ca2a: 
1:e4af2eb:     @Override
1:d29ca2a:     public void gc() {
1:3efd4b0:         for (Subscription sub : subscriptions.values()) {
1:d29ca2a:             sub.gc();
1:d29ca2a:         }
1:d29ca2a: 
1:3efd4b0:         destinationsLock.readLock().lock();
1:3efd4b0:         try {
1:3efd4b0:             for (Destination dest : destinations.values()) {
1:d29ca2a:                 dest.gc();
1:d29ca2a:             }
1:3efd4b0:         } finally {
1:3efd4b0:             destinationsLock.readLock().unlock();
1:d29ca2a:         }
1:931ed76:     }
1:d29ca2a: 
1:7f5213b:     protected abstract Subscription createSubscription(ConnectionContext context, ConsumerInfo info) throws Exception;
1:230a86c: 
1:204f91f:     protected Destination createDestination(ConnectionContext context, ActiveMQDestination destination)
1:204f91f:             throws Exception {
1:bfaff9b:         return destinationFactory.createDestination(context, destination, destinationStatistics);
1:cd24f80:     }
1:d29ca2a: 
1:d29ca2a:     public boolean isAutoCreateDestinations() {
1:d29ca2a:         return autoCreateDestinations;
1:d29ca2a:     }
1:d29ca2a: 
1:d29ca2a:     public void setAutoCreateDestinations(boolean autoCreateDestinations) {
1:d29ca2a:         this.autoCreateDestinations = autoCreateDestinations;
1:d29ca2a:     }
1:d29ca2a: 
1:e4af2eb:     @Override
1:3efd4b0:     @SuppressWarnings("unchecked")
1:204f91f:     public void addProducer(ConnectionContext context, ProducerInfo info) throws Exception {
1:3efd4b0:         destinationsLock.readLock().lock();
1:3efd4b0:         try {
1:0b76d3a:             for (Destination dest : (Set<Destination>) destinationMap.unsynchronizedGet(info.getDestination())) {
1:931ed76:                 dest.addProducer(context, info);
1:d29ca2a:             }
1:3efd4b0:         } finally {
1:3efd4b0:             destinationsLock.readLock().unlock();
1:931ed76:         }
3:634da7a:     }
1:d29ca2a: 
1:634da7a:     /**
1:634da7a:      * Removes a Producer.
1:d29ca2a:      *
1:204f91f:      * @param context
1:204f91f:      *            the environment the operation is being executed under.
1:204f91f:      * @throws Exception
1:204f91f:      *             TODO
1:204f91f:      */
1:e4af2eb:     @Override
1:3efd4b0:     @SuppressWarnings("unchecked")
1:204f91f:     public void removeProducer(ConnectionContext context, ProducerInfo info) throws Exception {
1:3efd4b0:         destinationsLock.readLock().lock();
1:3efd4b0:         try {
1:0b76d3a:             for (Destination dest : (Set<Destination>) destinationMap.unsynchronizedGet(info.getDestination())) {
1:931ed76:                 dest.removeProducer(context, info);
1:931ed76:             }
1:3efd4b0:         } finally {
1:3efd4b0:             destinationsLock.readLock().unlock();
1:cd24f80:         }
1:634da7a:     }
1:d29ca2a: 
1:204f91f:     protected void dispose(ConnectionContext context, Destination dest) throws Exception {
1:d29ca2a:         dest.dispose(context);
1:931ed76:         dest.stop();
1:07b6a38:         destinationFactory.removeDestination(dest);
1:8d3ca90:     }
1:8d3ca90: 
1:e4af2eb:     @Override
1:204f91f:     public void processConsumerControl(ConsumerBrokerExchange consumerExchange, ConsumerControl control) {
1:8d3ca90:         Subscription sub = subscriptions.get(control.getConsumerId());
1:8d3ca90:         if (sub != null && sub instanceof AbstractSubscription) {
1:204f91f:             ((AbstractSubscription) sub).setPrefetchSize(control.getPrefetch());
1:bc45bf8:             if (broker.getDestinationPolicy() != null) {
1:bc45bf8:                 PolicyEntry entry = broker.getDestinationPolicy().getEntryFor(control.getDestination());
1:bc45bf8:                 if (entry != null) {
1:bc45bf8:                     entry.configurePrefetch(sub);
1:bc45bf8:                 }
1:bc45bf8:             }
1:ffee8b4:             LOG.debug("setting prefetch: {}, on subscription: {}; resulting value: {}", new Object[]{ control.getPrefetch(), control.getConsumerId(), sub.getConsumerInfo().getPrefetchSize()});
1:8d3ca90:             try {
1:204f91f:                 lookup(consumerExchange.getConnectionContext(), control.getDestination(),false).wakeup();
1:a38a7c0:             } catch (Exception e) {
1:e1bbde7:                 LOG.warn("failed to deliver post consumerControl dispatch-wakeup, to destination: {}", control.getDestination(), e);
1:a38a7c0:             }
1:19bfd9d:         }
1:8d3ca90:     }
1:cb1d21f: 
1:e4af2eb:     @Override
1:55da9bc:     public void reapplyInterceptor() {
1:713250f:         destinationsLock.writeLock().lock();
1:713250f:         try {
1:713250f:             DestinationInterceptor destinationInterceptor = broker.getDestinationInterceptor();
1:713250f:             Map<ActiveMQDestination, Destination> map = getDestinationMap();
1:713250f:             for (ActiveMQDestination key : map.keySet()) {
1:713250f:                 Destination destination = map.get(key);
1:713250f:                 if (destination instanceof CompositeDestinationFilter) {
1:713250f:                     destination = ((CompositeDestinationFilter) destination).next;
1:713250f:                 }
1:713250f:                 if (destinationInterceptor != null) {
1:713250f:                     destination = destinationInterceptor.intercept(destination);
1:713250f:                 }
1:713250f:                 getDestinationMap().put(key, destination);
1:886e2d4:                 Destination prev = destinations.put(key, destination);
1:886e2d4:                 if (prev == null) {
1:886e2d4:                     updateRegionDestCounts(key, 1);
1:886e2d4:                 }
1:55da9bc:             }
1:713250f:         } finally {
1:713250f:             destinationsLock.writeLock().unlock();
1:55da9bc:         }
1:55da9bc:     }
1:8d3ca90: }
============================================================================
author:gtully
-------------------------------------------------------------------------------
commit:0b76d3a
/////////////////////////////////////////////////////////////////////////
1:                     destinationMap.unsynchronizedPut(destination, dest);
/////////////////////////////////////////////////////////////////////////
1:                         destinationMap.unsynchronizedGet(entry.getDestination()).size() : regionStatistics.getDestinations().getCount());
/////////////////////////////////////////////////////////////////////////
1:                 destinationMap.unsynchronizedRemove(destination, dest);
/////////////////////////////////////////////////////////////////////////
1:             return destinationMap.unsynchronizedGet(destination);
/////////////////////////////////////////////////////////////////////////
1:                 for (Destination dest : (Set<Destination>) destinationMap.unsynchronizedGet(info.getDestination())) {
/////////////////////////////////////////////////////////////////////////
1:                 for (Destination dest : (Set<Destination>) destinationMap.unsynchronizedGet(info.getDestination())) {
/////////////////////////////////////////////////////////////////////////
1:                 dest = context.getBroker().addDestination(context, destination, createTemporary);
/////////////////////////////////////////////////////////////////////////
1:             for (Destination dest : (Set<Destination>) destinationMap.unsynchronizedGet(info.getDestination())) {
/////////////////////////////////////////////////////////////////////////
1:             for (Destination dest : (Set<Destination>) destinationMap.unsynchronizedGet(info.getDestination())) {
commit:d86c98a
/////////////////////////////////////////////////////////////////////////
1:                     throw new JMSException("Destination still has an active subscription: " + destination);
/////////////////////////////////////////////////////////////////////////
1:                 // ensure sub visible to any new dest addSubscriptionsForDestination
1:                 subscriptions.put(info.getConsumerId(), sub);
/////////////////////////////////////////////////////////////////////////
1:                         subscriptions.remove(info.getConsumerId());
1:                         removeList.clear();
/////////////////////////////////////////////////////////////////////////
commit:0ee4f5b
/////////////////////////////////////////////////////////////////////////
1:                 if (sub.matches(destination) ) {
0:                     // may be a new sub created after gc decision, verify if really subscribed
0:                     Destination toDelete  = destinations.get(destination);
0:                     if (toDelete != null && toDelete.getDestinationStatistics().getConsumers().getCount() > 0 ) {
0:                         throw new JMSException("Destination still has an active subscription: " + destination);
1:                     }
commit:e415d29
/////////////////////////////////////////////////////////////////////////
1:                     addSubscriptionsForDestination(context, dest);
commit:ffee8b4
/////////////////////////////////////////////////////////////////////////
1:             LOG.debug("setting prefetch: {}, on subscription: {}; resulting value: {}", new Object[]{ control.getPrefetch(), control.getConsumerId(), sub.getConsumerInfo().getPrefetchSize()});
commit:27b3a7c
/////////////////////////////////////////////////////////////////////////
1:         return destinations;
author:Hadrian Zbarcea
-------------------------------------------------------------------------------
commit:d54d046
author:Timothy Bish
-------------------------------------------------------------------------------
commit:e4af2eb
/////////////////////////////////////////////////////////////////////////
1: import org.apache.activemq.DestinationDoesNotExistException;
/////////////////////////////////////////////////////////////////////////
1:     @Override
/////////////////////////////////////////////////////////////////////////
1:     @Override
/////////////////////////////////////////////////////////////////////////
1:     @Override
/////////////////////////////////////////////////////////////////////////
1:     protected List<Subscription> addSubscriptionsForDestination(ConnectionContext context, Destination dest) throws Exception {
1:                     ConnectionContext originalContext = sub.getContext() != null ? sub.getContext() : context;
1:                     dest.addSubscription(originalContext, sub);
/////////////////////////////////////////////////////////////////////////
1:     @Override
/////////////////////////////////////////////////////////////////////////
1:     @Override
/////////////////////////////////////////////////////////////////////////
1:     @Override
1:     @Override
/////////////////////////////////////////////////////////////////////////
1:     @Override
/////////////////////////////////////////////////////////////////////////
1:     @Override
1:     @Override
/////////////////////////////////////////////////////////////////////////
1:     @Override
/////////////////////////////////////////////////////////////////////////
1:     @Override
/////////////////////////////////////////////////////////////////////////
1:     @Override
/////////////////////////////////////////////////////////////////////////
1:     @Override
/////////////////////////////////////////////////////////////////////////
1:     @Override
/////////////////////////////////////////////////////////////////////////
1:     @Override
/////////////////////////////////////////////////////////////////////////
1:     @Override
/////////////////////////////////////////////////////////////////////////
1:     @Override
commit:e1bbde7
/////////////////////////////////////////////////////////////////////////
1:                     LOG.debug("{} adding destination: {}", broker.getBrokerName(), destination);
/////////////////////////////////////////////////////////////////////////
1:         LOG.debug("{} removing destination: {}", broker.getBrokerName(), destination);
/////////////////////////////////////////////////////////////////////////
1:                 LOG.debug("Cannot remove a destination that doesn't exist: {}", destination);
/////////////////////////////////////////////////////////////////////////
1:         LOG.debug("{} adding consumer: {} for destination: {}", new Object[]{ broker.getBrokerName(), info.getConsumerId(), info.getDestination() });
/////////////////////////////////////////////////////////////////////////
1:         LOG.debug("{} removing consumer: {} for destination: {}", new Object[]{ broker.getBrokerName(), info.getConsumerId(), info.getDestination() });
/////////////////////////////////////////////////////////////////////////
1:                     LOG.warn("Ack for non existent subscription, ack: {}", ack);
1:                     LOG.debug("Ack for non existent subscription in recovery, ack: {}", ack);
/////////////////////////////////////////////////////////////////////////
0:             LOG.debug("setting prefetch: {}, on subscription: {}; resulting value: {}", new Object[]{ control.getPrefetch(), control.getConsumerId(), sub.getConsumerInfo().getCurrentPrefetchSize()});
1:                 LOG.warn("failed to deliver post consumerControl dispatch-wakeup, to destination: {}", control.getDestination(), e);
author:Christopher L. Shannon (cshannon)
-------------------------------------------------------------------------------
commit:886e2d4
/////////////////////////////////////////////////////////////////////////
1: import javax.jms.IllegalStateException;
1: 
1: import org.apache.activemq.advisory.AdvisorySupport;
/////////////////////////////////////////////////////////////////////////
1:     protected final RegionStatistics regionStatistics = new RegionStatistics();
/////////////////////////////////////////////////////////////////////////
1: 
1:         destinationsLock.writeLock().lock();
1:         try {
1:             destinations.clear();
1:             regionStatistics.getAdvisoryDestinations().reset();
1:             regionStatistics.getDestinations().reset();
1:             regionStatistics.getAllDestinations().reset();
1:         } finally {
1:             destinationsLock.writeLock().unlock();
1:         }
/////////////////////////////////////////////////////////////////////////
1:                     // Limit the number of destinations that can be created if
1:                     // maxDestinations has been set on a policy
1:                     validateMaxDestinations(destination);
1: 
/////////////////////////////////////////////////////////////////////////
1:                     updateRegionDestCounts(destination, 1);
/////////////////////////////////////////////////////////////////////////
1: 
1:     /**
1:      * Updates the counts in RegionStatistics based on whether or not the destination
1:      * is an Advisory Destination or not
1:      *
1:      * @param destination the destination being used to determine which counters to update
1:      * @param count the count to add to the counters
1:      */
1:     protected void updateRegionDestCounts(ActiveMQDestination destination, int count) {
1:         if (destination != null) {
1:             if (AdvisorySupport.isAdvisoryTopic(destination)) {
1:                 regionStatistics.getAdvisoryDestinations().add(count);
1:             } else {
1:                 regionStatistics.getDestinations().add(count);
1:             }
1:             regionStatistics.getAllDestinations().add(count);
1:         }
1:     }
1: 
1:     /**
1:      * This method checks whether or not the destination can be created based on
1:      * {@link PolicyEntry#getMaxDestinations}, if it has been set. Advisory
1:      * topics are ignored.
1:      *
1:      * @param destination
1:      * @throws Exception
1:      */
1:     protected void validateMaxDestinations(ActiveMQDestination destination)
1:             throws Exception {
1:         if (broker.getDestinationPolicy() != null) {
1:             PolicyEntry entry = broker.getDestinationPolicy().getEntryFor(destination);
1:             // Make sure the destination is not an advisory topic
1:             if (entry != null && entry.getMaxDestinations() >= 0
1:                     && !AdvisorySupport.isAdvisoryTopic(destination)) {
1:                 // If there is an entry for this destination, look up the set of
1:                 // destinations associated with this policy
1:                 // If a destination isn't specified, then just count up
1:                 // non-advisory destinations (ie count all destinations)
1:                 int destinationSize = (int) (entry.getDestination() != null ?
0:                         destinationMap.get(entry.getDestination()).size() : regionStatistics.getDestinations().getCount());
1:                 if (destinationSize >= entry.getMaxDestinations()) {
1:                     if (entry.getDestination() != null) {
1:                         throw new IllegalStateException(
1:                                 "The maxmimum number of destinations allowed ("+ entry.getMaxDestinations() +
1:                                 ") for the policy " + entry.getDestination() + " has already been reached.");
1:                     // No destination has been set (default policy)
1:                     } else {
1:                         throw new IllegalStateException("The maxmimum number of destinations allowed ("
1:                                         + entry.getMaxDestinations() + ") has already been reached.");
1:                     }
1:                 }
1:             }
1:         }
1:     }
1: 
/////////////////////////////////////////////////////////////////////////
1:                 updateRegionDestCounts(destination, -1);
1: 
/////////////////////////////////////////////////////////////////////////
1:                 Destination prev = destinations.put(key, destination);
1:                 if (prev == null) {
1:                     updateRegionDestCounts(key, 1);
1:                 }
author:Dejan Bosanac
-------------------------------------------------------------------------------
commit:4f57744
/////////////////////////////////////////////////////////////////////////
0:                 destinationMap.remove(destination, dest);
commit:713250f
/////////////////////////////////////////////////////////////////////////
1:         destinationsLock.writeLock().lock();
1:         try {
1:             DestinationInterceptor destinationInterceptor = broker.getDestinationInterceptor();
1:             Map<ActiveMQDestination, Destination> map = getDestinationMap();
1:             for (ActiveMQDestination key : map.keySet()) {
1:                 Destination destination = map.get(key);
1:                 if (destination instanceof CompositeDestinationFilter) {
1:                     destination = ((CompositeDestinationFilter) destination).next;
1:                 }
1:                 if (destinationInterceptor != null) {
1:                     destination = destinationInterceptor.intercept(destination);
1:                 }
1:                 getDestinationMap().put(key, destination);
0:                 destinations.put(key, destination);
1:         } finally {
1:             destinationsLock.writeLock().unlock();
commit:55da9bc
/////////////////////////////////////////////////////////////////////////
1: import org.apache.activemq.broker.region.virtual.CompositeDestinationFilter;
/////////////////////////////////////////////////////////////////////////
1: 
1:     public void reapplyInterceptor() {
1:         DestinationInterceptor destinationInterceptor = broker.getDestinationInterceptor();
0:         Map<ActiveMQDestination, Destination> map = getDestinationMap();
0:         for (ActiveMQDestination key : map.keySet()) {
0:             Destination destination = map.get(key);
0:             if (destination instanceof CompositeDestinationFilter) {
0:                 destination = ((CompositeDestinationFilter)destination).next;
1:             }
0:             destination = destinationInterceptor.intercept(destination);
0:             getDestinationMap().put(key, destination);
0:             destinations.put(key, destination);
1:         }
1:     }
author:Dhiraj Bokde
-------------------------------------------------------------------------------
commit:94b404d
/////////////////////////////////////////////////////////////////////////
1:                 } catch (SecurityException e) {
1:                     if (sub.isWildcard()) {
1:                         LOG.debug("Subscription denied for " + sub + " to destination " +
1:                             dest.getActiveMQDestination() +  ": " + e.getMessage());
1:                     } else {
1:                         throw e;
1:                     }
/////////////////////////////////////////////////////////////////////////
1:                 } catch (SecurityException e){
1:                     if (sub.isWildcard()) {
1:                         LOG.debug("Subscription denied for " + sub + " to destination " +
1:                             dest.getActiveMQDestination() + ": " + e.getMessage());
1:                     } else {
1:                         // remove partial subscriptions
1:                         for (Destination remove : removeList) {
1:                             try {
1:                                 remove.removeSubscription(context, sub, info.getLastDeliveredSequenceId());
1:                             } catch (Exception ex) {
1:                                 LOG.error("Error unsubscribing " + sub + " from " + remove + ": " + ex.getMessage(), ex);
1:                             }
1:                         }
1:                         throw e;
commit:a38a7c0
/////////////////////////////////////////////////////////////////////////
1:                 try {
1:                     dest.addSubscription(context, sub);
1:                     rc.add(sub);
1:                 } catch (Exception e) {
0:                     LOG.error("Subscription error for " + sub + ": " + e.getMessage(), e);
1:                 }
/////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////
1:             List<Destination> removeList = new ArrayList<Destination>();
1:                 try {
0:                     dest.addSubscription(context, sub);
1:                     removeList.add(dest);
1:                 } finally {
0:                     // remove subscriptions added earlier
0:                     for (Destination remove : removeList) {
0:                         remove.removeSubscription(context, sub, info.getLastDeliveredSequenceId());
1:                     }
1:                 }
1:             removeList.clear();
0:             subscriptions.put(info.getConsumerId(), sub);
1: 
author:rajdavies
-------------------------------------------------------------------------------
commit:6683eb6
/////////////////////////////////////////////////////////////////////////
1: 
1:             producerExchange.getProducerState().getInfo().incrementSentCount();
author:Rob Davies
-------------------------------------------------------------------------------
commit:07ec890
/////////////////////////////////////////////////////////////////////////
1:         if (producerExchange.getProducerState() != null && producerExchange.getProducerState().getInfo() != null){
0:             producerExchange.getProducerState().getInfo().getSentCount().increment();
1:         }
author:Gary Tully
-------------------------------------------------------------------------------
commit:7e87cf2
/////////////////////////////////////////////////////////////////////////
0:                 LOG.warn("failed to deliver post consumerControl dispatch-wakeup, to destination: " + control.getDestination(), e);
commit:8012f28
/////////////////////////////////////////////////////////////////////////
0: import org.apache.activemq.DestinationDoesNotExistException;
/////////////////////////////////////////////////////////////////////////
1:                     throw new DestinationDoesNotExistException(destination.getQualifiedName());
/////////////////////////////////////////////////////////////////////////
0:                 context.getBroker().addDestination(context, destination, createTemporary);
0:                 dest = addDestination(context, destination, false);
commit:bc45bf8
/////////////////////////////////////////////////////////////////////////
1: import org.apache.activemq.broker.region.policy.PolicyEntry;
/////////////////////////////////////////////////////////////////////////
1:             if (broker.getDestinationPolicy() != null) {
1:                 PolicyEntry entry = broker.getDestinationPolicy().getEntryFor(control.getDestination());
1:                 if (entry != null) {
1:                     entry.configurePrefetch(sub);
1:                 }
1:             }
0:                         + control.getConsumerId() + "; resulting value: " + sub.getConsumerInfo().getCurrentPrefetchSize());
commit:179d95e
/////////////////////////////////////////////////////////////////////////
0:                     if (LOG.isDebugEnabled()) {
0:                         LOG.debug(broker.getBrokerName() + " adding destination: " + destination);
1:                     }
/////////////////////////////////////////////////////////////////////////
0:                     LOG.debug("Cannot remove a destination that doesn't exist: " + destination);
commit:d4ccc50
/////////////////////////////////////////////////////////////////////////
0:         if (LOG.isDebugEnabled()) {
0:             LOG.debug(broker.getBrokerName() + " adding destination: " + destination);
1:         }
/////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////
0:         if (LOG.isDebugEnabled()) {
0:             LOG.debug(broker.getBrokerName() + " removing destination: " + destination);
1:         }
/////////////////////////////////////////////////////////////////////////
0:                 if (LOG.isDebugEnabled()) {
0:                     LOG.debug("Destination doesn't exist: " + dest);
1:                 }
/////////////////////////////////////////////////////////////////////////
0:         if (LOG.isDebugEnabled()) {
0:             LOG.debug(broker.getBrokerName() + " adding consumer: " + info.getConsumerId() + " for destination: "
0:                     + info.getDestination());
1:         }
/////////////////////////////////////////////////////////////////////////
0:         if (LOG.isDebugEnabled()) {
0:             LOG.debug(broker.getBrokerName() + " removing consumer: " + info.getConsumerId() + " for destination: "
0:                     + info.getDestination());
1:         }
/////////////////////////////////////////////////////////////////////////
0:                     if (LOG.isDebugEnabled()) {
0:                         LOG.debug("Ack for non existent subscription in recovery, ack:" + ack);
1:                     }
commit:4d17a70
/////////////////////////////////////////////////////////////////////////
0:             return destinations;
commit:b9045db
/////////////////////////////////////////////////////////////////////////
0: import org.apache.activemq.broker.TransportConnection;
0: import org.apache.activemq.command.DestinationInfo;
/////////////////////////////////////////////////////////////////////////
0:                     if (destination.isTemporary()) {
0:                         // need to associate with the connection so it can get removed
0:                         if (context.getConnection() instanceof TransportConnection) {
0:                             TransportConnection transportConnection = (TransportConnection) context.getConnection();
0:                             DestinationInfo info = new DestinationInfo(context.getConnectionId(),
0:                                     DestinationInfo.ADD_OPERATION_TYPE,
0:                                     destination);
0:                             transportConnection.processAddDestination(info);
0:                             LOG.debug("assigning ownership of auto created temp : " + destination + " to connection:"
0:                                     + context.getConnectionId());
1:                         }
1:                     }
commit:a6a6a70
/////////////////////////////////////////////////////////////////////////
0:                     LOG.debug("Ack for non existent subscription in recovery, ack:" + ack);
commit:19bfd9d
/////////////////////////////////////////////////////////////////////////
0:             if (LOG.isDebugEnabled()) {
0:                 LOG.debug("setting prefetch: " + control.getPrefetch() + ", on subscription: " + control.getConsumerId());
1:             }
commit:8d3ca90
/////////////////////////////////////////////////////////////////////////
1: import org.apache.activemq.command.ConsumerControl;
/////////////////////////////////////////////////////////////////////////
1:     
0:     public void processConsumerControl(ConsumerBrokerExchange consumerExchange,
0:             ConsumerControl control) {
1:         Subscription sub = subscriptions.get(control.getConsumerId());
1:         if (sub != null && sub instanceof AbstractSubscription) {
0:             ((AbstractSubscription)sub).setPrefetchSize(control.getPrefetch());
0:             LOG.info("setting prefetch: " + control.getPrefetch() + ", on subscription: " + control.getConsumerId());
1:             try {
0:                 lookup(consumerExchange.getConnectionContext(), control.getDestination()).wakeup();
0:             } catch (Exception e) {
0:                 LOG.warn("failed to deliver consumerControl to destination: " + control.getDestination(), e);
1:             }
1:         }
1:     }
commit:8e59e24
/////////////////////////////////////////////////////////////////////////
1:             sub = subscriptions.get(ack.getConsumerId());        
0:                 LOG.warn("Ack for non existent subscription, ack:" + ack); 
0:                 throw new IllegalArgumentException(
0:                         "The subscription does not exist: "
0:                         + ack.getConsumerId());
commit:3da1373
/////////////////////////////////////////////////////////////////////////
0:         LOG.debug(broker.getBrokerName() + " adding destination: " + destination);
/////////////////////////////////////////////////////////////////////////
0:         LOG.debug(broker.getBrokerName() + " adding consumer: " + info.getConsumerId() + " for destination: " + info.getDestination());
/////////////////////////////////////////////////////////////////////////
0:         LOG.debug(broker.getBrokerName() + " removing consumer: " + info.getConsumerId() + " for destination: " + info.getDestination());
commit:f9d5449
/////////////////////////////////////////////////////////////////////////
1:         } else {
1:             throw new JMSException("Slave broker out of sync with master - Subscription: "
0:                     + messageDispatchNotification.getConsumerId()
0:                     + " on " + messageDispatchNotification.getDestination()
0:                     + " does not exist for dispatch of message: "
1:                     + messageDispatchNotification.getMessageId());
1:         }
1:     }
1:     
1:     /*
0:      * For a Queue/TempQueue, dispatch order is imperative to match acks, so the dispatch is deferred till 
0:      * the notification to ensure that the subscription chosen by the master is used. AMQ-2102
1:      */ 
0:     protected void processDispatchNotificationViaDestination(MessageDispatchNotification messageDispatchNotification) throws Exception {
1:         Destination dest = null;
0:         synchronized (destinationsMutex) {
1:             dest = destinations.get(messageDispatchNotification.getDestination());
1:         }
1:         if (dest != null) {
1:             dest.processDispatchNotification(messageDispatchNotification);
1:         } else {
0:             throw new JMSException(
0:                     "Slave broker out of sync with master - Destination: " 
0:                             + messageDispatchNotification.getDestination()
0:                             + " does not exist for consumer "
0:                             + messageDispatchNotification.getConsumerId()
0:                             + " with message: "
1:                             + messageDispatchNotification.getMessageId());
commit:3b08860
/////////////////////////////////////////////////////////////////////////
1:                         dest.removeSubscription(context, sub, 0l);
/////////////////////////////////////////////////////////////////////////
1:               dest.removeSubscription(context, sub, info.getLastDeliveredSequenceId());
commit:301203e
/////////////////////////////////////////////////////////////////////////
1:     public Map<ConsumerId, Subscription> getSubscriptions() {
1:         return subscriptions;
1:     }
1:     
author:Hiram R. Chirino
-------------------------------------------------------------------------------
commit:58aca86
commit:b0c2a40
/////////////////////////////////////////////////////////////////////////
1:  * 
commit:5269519
/////////////////////////////////////////////////////////////////////////
0:                 ((QueueBrowserSubscription)sub).destinationsAdded();
commit:933eb2f
/////////////////////////////////////////////////////////////////////////
1:             DestinationFilter.parseFilter(info.getDestination());
commit:ecf89a6
/////////////////////////////////////////////////////////////////////////
1: import org.apache.activemq.command.ConsumerId;
/////////////////////////////////////////////////////////////////////////
1:     protected final Map<ActiveMQDestination, Destination> destinations = new ConcurrentHashMap<ActiveMQDestination, Destination>();
1:     protected final Map<ConsumerId, Subscription> subscriptions = new ConcurrentHashMap<ConsumerId, Subscription>();
/////////////////////////////////////////////////////////////////////////
1:     protected final Map<ConsumerId, Object> consumerChangeMutexMap = new HashMap<ConsumerId, Object>();
/////////////////////////////////////////////////////////////////////////
1:         Set<ActiveMQDestination> inactiveDests = getInactiveDestinations();
1:         for (Iterator<ActiveMQDestination> iter = inactiveDests.iterator(); iter.hasNext();) {
1:             ActiveMQDestination dest = iter.next();
1:         for (Iterator<Destination> i = destinations.values().iterator(); i.hasNext();) {
1:             Destination dest = i.next();
1:         for (Iterator<Destination> i = destinations.values().iterator(); i.hasNext();) {
1:             Destination dest = i.next();
/////////////////////////////////////////////////////////////////////////
1:             Destination dest = destinations.get(destination);
/////////////////////////////////////////////////////////////////////////
1:         List<Subscription> rc = new ArrayList<Subscription>();
1:         for (Iterator<Subscription> iter = subscriptions.values().iterator(); iter.hasNext();) {
1:             Subscription sub = iter.next();
/////////////////////////////////////////////////////////////////////////
1:             for (Iterator<Subscription> iter = subscriptions.values().iterator(); iter.hasNext();) {
1:                 Subscription sub = iter.next();
/////////////////////////////////////////////////////////////////////////
1:             Destination dest = destinations.remove(destination);
1:                 for (Iterator<Subscription> iter = subscriptions.values().iterator(); iter.hasNext();) {
1:                     Subscription sub = iter.next();
/////////////////////////////////////////////////////////////////////////
1:     public Map<ActiveMQDestination, Destination> getDestinationMap() {
0:             return new HashMap<ActiveMQDestination, Destination>(destinations);
/////////////////////////////////////////////////////////////////////////
1:             Subscription o = subscriptions.get(info.getConsumerId());
1:                 return o;
/////////////////////////////////////////////////////////////////////////
1:     protected Set<ActiveMQDestination> getInactiveDestinations() {
1:         Set<ActiveMQDestination> inactiveDests = destinationFactory.getDestinations();
/////////////////////////////////////////////////////////////////////////
1:         Subscription sub = subscriptions.remove(info.getConsumerId());
1:         if (sub == null) {
1:         }
/////////////////////////////////////////////////////////////////////////
0:             sub = subscriptions.get(ack.getConsumerId());
/////////////////////////////////////////////////////////////////////////
1:         Subscription sub = subscriptions.get(pull.getConsumerId());
1:         if (sub == null) {
1:         }
0:             Destination dest = destinations.get(destination);
/////////////////////////////////////////////////////////////////////////
1:                     dest = destinations.get(destination);
/////////////////////////////////////////////////////////////////////////
1:         Subscription sub = subscriptions.get(messageDispatchNotification.getConsumerId());
0:         for (Iterator<Subscription> iter = subscriptions.values().iterator(); iter.hasNext();) {
0:             Subscription sub = iter.next();
0:         for (Iterator<Destination> iter = destinations.values().iterator(); iter.hasNext();) {
0:             Destination dest = iter.next();
commit:fc00993
/////////////////////////////////////////////////////////////////////////
1: public abstract class AbstractRegion implements Region {
commit:230a86c
/////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////
1:  *      http://www.apache.org/licenses/LICENSE-2.0
/////////////////////////////////////////////////////////////////////////
0:     private static final Log LOG = LogFactory.getLog(AbstractRegion.class);
/////////////////////////////////////////////////////////////////////////
1:     protected boolean autoCreateDestinations = true;
1:     protected boolean started;
0:     public AbstractRegion(RegionBroker broker, DestinationStatistics destinationStatistics, UsageManager memoryManager, TaskRunnerFactory taskRunnerFactory,
0:                           DestinationFactory destinationFactory) {
/////////////////////////////////////////////////////////////////////////
1: 
0:             ActiveMQDestination dest = (ActiveMQDestination)iter.next();
1: 
1:             ConnectionContext context = new ConnectionContext();
1:             context.setBroker(broker.getBrokerService().getBroker());
0:             context.getBroker().addDestination(context, dest);
1: 
0:         for (Iterator i = destinations.values().iterator(); i.hasNext();) {
1: 
0:         for (Iterator i = destinations.values().iterator(); i.hasNext();) {
1: 
0:     public Destination addDestination(ConnectionContext context, ActiveMQDestination destination) throws Exception {
0:         LOG.debug("Adding destination: " + destination);
0:         synchronized (destinationsMutex) {
0:             Destination dest = (Destination)destinations.get(destination);
1:             if (dest == null) {
1:                 dest = createDestination(context, destination);
1:                 DestinationInterceptor destinationInterceptor = broker.getDestinationInterceptor();
1:                 if (destinationInterceptor != null) {
1:                     dest = destinationInterceptor.intercept(dest);
1:                 destinations.put(destination, dest);
0:                 destinationMap.put(destination, dest);
0:     protected List<Subscription> addSubscriptionsForDestination(ConnectionContext context, Destination dest) throws Exception {
0:         ArrayList<Subscription> rc = new ArrayList<Subscription>();
1:         // Add all consumers that are interested in the destination.
0:         for (Iterator iter = subscriptions.values().iterator(); iter.hasNext();) {
0:             Subscription sub = (Subscription)iter.next();
1:             if (sub.matches(dest.getActiveMQDestination())) {
0:                 dest.addSubscription(context, sub);
0:                 rc.add(sub);
1:             }
1:         }
1:         return rc;
1:     }
1: 
0:     public void removeDestination(ConnectionContext context, ActiveMQDestination destination, long timeout) throws Exception {
1: 
1:         // No timeout.. then try to shut down right way, fails if there are
1:         // current subscribers.
1:         if (timeout == 0) {
0:             for (Iterator iter = subscriptions.values().iterator(); iter.hasNext();) {
0:                 Subscription sub = (Subscription)iter.next();
1:                 if (sub.matches(destination)) {
0:                     throw new JMSException("Destination still has an active subscription: " + destination);
1:         if (timeout > 0) {
1:             // TODO: implement a way to notify the subscribers that we want to
1:             // take the down
1:             // the destination and that they should un-subscribe.. Then wait up
1:             // to timeout time before
0:         LOG.debug("Removing destination: " + destination);
0:         synchronized (destinationsMutex) {
0:             Destination dest = (Destination)destinations.remove(destination);
1:             if (dest != null) {
1:                 // timeout<0 or we timed out, we now force any remaining
1:                 // subscriptions to un-subscribe.
0:                 for (Iterator iter = subscriptions.values().iterator(); iter.hasNext();) {
0:                     Subscription sub = (Subscription)iter.next();
1:                     if (sub.matches(destination)) {
/////////////////////////////////////////////////////////////////////////
1:             } else {
0:                 LOG.debug("Destination doesn't exist: " + dest);
1:      * 
0:         synchronized (destinationsMutex) {
0:         synchronized (destinationsMutex) {
0:         LOG.debug("Adding consumer: " + info.getConsumerId());
1:         if (destination != null && !destination.isPattern() && !destination.isComposite()) {
1:         synchronized (consumerChangeMutexMap) {
/////////////////////////////////////////////////////////////////////////
1:                 LOG.warn("A duplicate subscription was detected. Clients may be misbehaving. Later warnings you may see about subscription removal are a consequence of this.");
1:             // We may need to add some destinations that are in persistent store
1:             // but not active
1:             // TODO: think about this a little more. This is good cause
1:             // destinations are not loaded into
1:             // memory until a client needs to use the queue, but a management
1:             // agent viewing the
1:             // broker will not see a destination that exists in persistent
1:             // store. We may want to
1:             // eagerly load all destinations into the broker but have an
1:             // inactive state for the
1: 
/////////////////////////////////////////////////////////////////////////
0:                 Destination dest = (Destination)iter.next();
1:             if (info.isBrowser()) {
/////////////////////////////////////////////////////////////////////////
1:      * 
1:     public Set getDurableDestinations() {
/////////////////////////////////////////////////////////////////////////
1:         inactiveDests.removeAll(destinations.keySet());
0:         LOG.debug("Removing consumer: " + info.getConsumerId());
0:         Subscription sub = (Subscription)subscriptions.remove(info.getConsumerId());
0:         if (sub == null)
0:             throw new IllegalArgumentException("The subscription does not exist: " + info.getConsumerId());
0:             Destination dest = (Destination)iter.next();
/////////////////////////////////////////////////////////////////////////
1:     public void send(final ProducerBrokerExchange producerExchange, Message messageSend) throws Exception {
1: 
1:         if (producerExchange.isMutable() || producerExchange.getRegionDestination() == null) {
0:             final Destination regionDestination = lookup(context, messageSend.getDestination());
1: 
1:     public void acknowledge(ConsumerBrokerExchange consumerExchange, MessageAck ack) throws Exception {
1:         Subscription sub = consumerExchange.getSubscription();
1:         if (sub == null) {
0:             sub = (Subscription)subscriptions.get(ack.getConsumerId());
1:             if (sub == null) {
1:                 throw new IllegalArgumentException("The subscription does not exist: " + ack.getConsumerId());
1:         sub.acknowledge(consumerExchange.getConnectionContext(), ack);
0:         Subscription sub = (Subscription)subscriptions.get(pull.getConsumerId());
0:         if (sub == null)
1:             throw new IllegalArgumentException("The subscription does not exist: " + pull.getConsumerId());
0:         synchronized (destinationsMutex) {
0:             Destination dest = (Destination)destinations.get(destination);
1:             if (dest == null) {
0:                 if (autoCreateDestinations) {
1:                     // Try to auto create the destination... re-invoke broker
1:                     // from the
1: 
0:                         context.getBroker().addDestination(context, destination);
0:                         // dest = addDestination(context, destination);
0:                     } catch (DestinationAlreadyExistsException e) {
0:                         // if the destination already exists then lets ignore
0:                         // this error
0:                     dest = (Destination)destinations.get(destination);
1:                 if (dest == null) {
1:                     throw new JMSException("The destination " + destination + " does not exist.");
1:     public void processDispatchNotification(MessageDispatchNotification messageDispatchNotification) throws Exception {
0:         Subscription sub = (Subscription)subscriptions.get(messageDispatchNotification.getConsumerId());
1:         if (sub != null) {
1: 
0:             Subscription sub = (Subscription)iter.next();
0:         for (Iterator iter = destinations.values().iterator(); iter.hasNext();) {
0:             Destination dest = (Destination)iter.next();
1: 
/////////////////////////////////////////////////////////////////////////
commit:2728ccb
/////////////////////////////////////////////////////////////////////////
1: import java.util.ArrayList;
1: import java.util.List;
1: import java.util.concurrent.ConcurrentHashMap;
/////////////////////////////////////////////////////////////////////////
1: import org.apache.activemq.filter.DestinationFilter;
/////////////////////////////////////////////////////////////////////////
1:         
0:         Set inactiveDests = getInactiveDestinations();
0:         for (Iterator iter = inactiveDests.iterator(); iter.hasNext();) {
0:         	ActiveMQDestination dest = (ActiveMQDestination) iter.next();
1:         	
0:         	ConnectionContext context = new ConnectionContext();
0:         	context.setBroker(broker.getBrokerService().getBroker());
0:         	context.getBroker().addDestination(context , dest);
1:         }
1:         
/////////////////////////////////////////////////////////////////////////
0:                 addSubscriptionsForDestination(context, dest);
0: 	protected List<Subscription> addSubscriptionsForDestination(ConnectionContext context,
0: 			Destination dest) throws Exception {
1: 		
0: 		ArrayList<Subscription> rc = new ArrayList<Subscription>();
0: 		// Add all consumers that are interested in the destination.
0: 		for(Iterator iter=subscriptions.values().iterator();iter.hasNext();){
0: 		    Subscription sub=(Subscription)iter.next();
0: 		    if(sub.matches(dest.getActiveMQDestination())){
0: 		        dest.addSubscription(context,sub);
0: 		        rc.add(sub);
1: 		    }
1: 		}
0: 		return rc;
1: 		
1: 	}
1: 
/////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////
0:             DestinationFilter destinationFilter = DestinationFilter.parseFilter(info.getDestination());
1:             Subscription sub = createSubscription(context, info);
commit:4569d7d
/////////////////////////////////////////////////////////////////////////
1:         producerExchange.getRegionDestination().send(producerExchange, messageSend);
commit:86cbdfd
/////////////////////////////////////////////////////////////////////////
0: import java.util.concurrent.ConcurrentHashMap;
commit:57b4941
/////////////////////////////////////////////////////////////////////////
1:  * Licensed to the Apache Software Foundation (ASF) under one or more
1:  * contributor license agreements.  See the NOTICE file distributed with
1:  * this work for additional information regarding copyright ownership.
1:  * The ASF licenses this file to You under the Apache License, Version 2.0
1:  * (the "License"); you may not use this file except in compliance with
1:  * the License.  You may obtain a copy of the License at
commit:5401cf8
/////////////////////////////////////////////////////////////////////////
0:         log.debug("Adding consumer: "+info.getConsumerId());
/////////////////////////////////////////////////////////////////////////
1:                 
/////////////////////////////////////////////////////////////////////////
1:     	
0:         log.debug("Removing consumer: "+info.getConsumerId());
commit:cb1d21f
/////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////
1:         
0:         // No timeout.. then try to shut down right way, fails if there are current subscribers.
0:         if( timeout == 0 ) {
0:             for(Iterator iter=subscriptions.values().iterator();iter.hasNext();){
0:                 Subscription sub=(Subscription) iter.next();
0:                 if(sub.matches(destination)){
0:                     throw new JMSException("Destination still has an active subscription: "+destination);
1:                 }
1:         
0:         if( timeout > 0 ) {
0:             // TODO: implement a way to notify the subscribers that we want to take the down 
0:             // the destination and that they should un-subscribe..  Then wait up to timeout time before
1:             // dropping the subscription.
1:         
1:         }
1: 
1:                 
0:                 // timeout<0 or we timed out, we now force any remaining subscriptions to un-subscribe.
0:                 for(Iterator iter=subscriptions.values().iterator();iter.hasNext();){
0:                     Subscription sub=(Subscription) iter.next();
0:                     if(sub.matches(destination)){
0:                         dest.removeSubscription(context, sub);
1:                     }
1:                 }
1:                 
1:                 
commit:c46562b
/////////////////////////////////////////////////////////////////////////
1:         
1:         sub.destroy();
commit:7f5213b
/////////////////////////////////////////////////////////////////////////
0:     public Destination addDestination(ConnectionContext context, ActiveMQDestination destination) throws Exception {
/////////////////////////////////////////////////////////////////////////
1:             throws Exception {
/////////////////////////////////////////////////////////////////////////
0:     public void addConsumer(ConnectionContext context, ConsumerInfo info) throws Exception {
/////////////////////////////////////////////////////////////////////////
1:     public void removeConsumer(ConnectionContext context, ConsumerInfo info) throws Exception {
/////////////////////////////////////////////////////////////////////////
1:     public void removeSubscription(ConnectionContext context, RemoveSubscriptionInfo info) throws Exception {
1:             throws Exception {
0:     public void acknowledge(ConnectionContext context, MessageAck ack) throws Exception {
/////////////////////////////////////////////////////////////////////////
0:     protected Destination lookup(ConnectionContext context, ActiveMQDestination destination) throws Exception {
/////////////////////////////////////////////////////////////////////////
0:     public void processDispatchNotification(MessageDispatchNotification messageDispatchNotification) throws Exception{
/////////////////////////////////////////////////////////////////////////
1:     protected abstract Subscription createSubscription(ConnectionContext context, ConsumerInfo info) throws Exception;
0:     abstract protected Destination createDestination(ConnectionContext context, ActiveMQDestination destination) throws Exception;
commit:0f502fa
/////////////////////////////////////////////////////////////////////////
0:         Destination dest = createDestination(context, destination);
/////////////////////////////////////////////////////////////////////////
0:     abstract protected Destination createDestination(ConnectionContext context, ActiveMQDestination destination) throws Throwable;
commit:e6f5d30
/////////////////////////////////////////////////////////////////////////
1:         
1:         destroySubscription(sub);
1:     }
1: 
1:     protected void destroySubscription(Subscription sub) {        
commit:013f372
/////////////////////////////////////////////////////////////////////////
0: import org.apache.commons.logging.Log;
0: import org.apache.commons.logging.LogFactory;
/////////////////////////////////////////////////////////////////////////
0:     private static final Log log = LogFactory.getLog(AbstractRegion.class);
1: 
/////////////////////////////////////////////////////////////////////////
0:     public void start() throws Exception {
1:     }
1:     
1:     public void stop() throws Exception {
1:     }
1:     
0:         log.debug("Adding destination: "+destination);
/////////////////////////////////////////////////////////////////////////
0:         log.debug("Removing destination: "+destination);
commit:4759253
/////////////////////////////////////////////////////////////////////////
1:             
0:             // Add all consumers that are interested in the destination. 
0:             for (Iterator iter = subscriptions.values().iterator(); iter.hasNext();) {
0:                 Subscription sub = (Subscription) iter.next();
0:                 if( sub.matches(destination) ) {
0:                     dest.addSubscription(context, sub);
1:                 }
1:             return dest;
commit:48b4869
/////////////////////////////////////////////////////////////////////////
0:  * Copyright 2005-2006 The Apache Software Foundation
commit:d29ca2a
/////////////////////////////////////////////////////////////////////////
1: /**
1:  *
0:  * Copyright 2004 The Apache Software Foundation
1:  *
0:  * Licensed under the Apache License, Version 2.0 (the "License");
0:  * you may not use this file except in compliance with the License.
0:  * You may obtain a copy of the License at
1:  *
0:  * http://www.apache.org/licenses/LICENSE-2.0
1:  *
1:  * Unless required by applicable law or agreed to in writing, software
1:  * distributed under the License is distributed on an "AS IS" BASIS,
1:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:  * See the License for the specific language governing permissions and
1:  * limitations under the License.
1:  */
1: package org.apache.activemq.broker.region;
1: 
1: import java.util.Iterator;
1: import java.util.Set;
1: 
1: import javax.jms.JMSException;
1: 
1: import org.apache.activemq.broker.ConnectionContext;
1: import org.apache.activemq.command.ActiveMQDestination;
1: import org.apache.activemq.command.ConsumerInfo;
1: import org.apache.activemq.command.Message;
1: import org.apache.activemq.command.MessageAck;
1: import org.apache.activemq.command.RemoveSubscriptionInfo;
1: import org.apache.activemq.filter.DestinationMap;
0: import org.apache.activemq.memory.UsageManager;
0: import org.apache.activemq.store.PersistenceAdapter;
1: import org.apache.activemq.thread.TaskRunnerFactory;
1: 
0: import edu.emory.mathcs.backport.java.util.concurrent.ConcurrentHashMap;
1: 
1: /**
1:  * 
0:  * @version $Revision: 1.14 $
1:  */
0: abstract public class AbstractRegion implements Region {
1:     
0:     protected final ConcurrentHashMap destinations = new ConcurrentHashMap();
1:     protected final DestinationMap destinationMap = new DestinationMap();
0:     protected final ConcurrentHashMap subscriptions = new ConcurrentHashMap();
0:     protected final UsageManager memoryManager;
0:     protected final PersistenceAdapter persistenceAdapter;
1:     protected final DestinationStatistics destinationStatistics;
0:     protected boolean autoCreateDestinations=true;
1:     protected final TaskRunnerFactory taskRunnerFactory;
0:     protected final Object destinationsMutex = new Object();
1:     
0:     public AbstractRegion(DestinationStatistics destinationStatistics, UsageManager memoryManager, TaskRunnerFactory taskRunnerFactory, PersistenceAdapter persistenceAdapter) {
1:         this.destinationStatistics = destinationStatistics;
0:         this.memoryManager = memoryManager;
1:         this.taskRunnerFactory = taskRunnerFactory;
0:         this.persistenceAdapter = persistenceAdapter;
1:     }
1: 
0:     public Destination addDestination(ConnectionContext context, ActiveMQDestination destination) throws Throwable {
0:         Destination dest = createDestination(destination);
1:         dest.start();
0:         synchronized(destinationsMutex){
0:             destinations.put(destination,dest);
0:             destinationMap.put(destination,dest);
1:         }
1: 
0:         // Add all consumers that are interested in the destination. 
0:         for (Iterator iter = subscriptions.values().iterator(); iter.hasNext();) {
0:             Subscription sub = (Subscription) iter.next();
0:             if( sub.matches(destination) ) {
0:                 dest.addSubscription(context, sub);
1:             }
1:         }
1:         return dest;
1:     }
1: 
1:     public void removeDestination(ConnectionContext context, ActiveMQDestination destination, long timeout)
0:             throws Throwable {
1:         
0:         // The destination cannot be removed if there are any active subscriptions 
0:         for (Iterator iter = subscriptions.values().iterator(); iter.hasNext();) {
0:             Subscription sub = (Subscription) iter.next();
0:             if( sub.matches(destination) ) {
0:                 throw new JMSException("Destination still has an active subscription: "+ destination);
1:             }
1:         }
1: 
0:         synchronized(destinationsMutex){
0:             Destination dest=(Destination) destinations.remove(destination);
0:             if(dest==null)
0:                 throw new IllegalArgumentException("The destination does not exist: "+destination);
1: 
0:             destinationMap.removeAll(destination);
1:             dest.dispose(context);
1:             dest.stop();
1:         }
1:     }
1: 
0:     public void addConsumer(ConnectionContext context, ConsumerInfo info) throws Throwable {
1: 
0:         Subscription sub = createSubscription(context, info);
1: 
0:         // We may need to add some destinations that are in persistent store but not active 
1:         // in the broker.
1:         //
0:         // TODO: think about this a little more.  This is good cause destinations are not loaded into 
0:         // memory until a client needs to use the queue, but a management agent viewing the 
0:         // broker will not see a destination that exists in persistent store.  We may want to
0:         // eagerly load all destinations into the broker but have an inactive state for the
1:         // destination which has reduced memory usage.
1:         //
0:         if( persistenceAdapter!=null ) {
0:             Set inactiveDests = getInactiveDestinations();
0:             for (Iterator iter = inactiveDests.iterator(); iter.hasNext();) {
0:                 ActiveMQDestination dest = (ActiveMQDestination) iter.next();
0:                 if( sub.matches(dest) ) {
0:                     context.getBroker().addDestination(context, dest);
1:                 }
1:             }
1:         }
1:         
0:         subscriptions.put(info.getConsumerId(), sub);
1: 
1:         // Add the subscription to all the matching queues.
0:         for (Iterator iter = destinationMap.get(info.getDestination()).iterator(); iter.hasNext();) {
0:             Destination dest = (Destination) iter.next();            
0:             dest.addSubscription(context, sub);
1:         }        
1: 
0:         if( info.isBrowser() ) {
0:             ((QueueBrowserSubscription)sub).browseDone();
1:         }
1:         
1:     }
1: 
1:     /**
0:      * @return
1:      */
0:     protected Set getInactiveDestinations() {
0:         Set inactiveDests = persistenceAdapter.getDestinations();
0:         inactiveDests.removeAll( destinations.keySet() );
1:         return inactiveDests;
1:     }
1:     
0:     public void removeConsumer(ConnectionContext context, ConsumerInfo info) throws Throwable {
1:         
0:         Subscription sub = (Subscription) subscriptions.remove(info.getConsumerId());
0:         if( sub==null )
0:             throw new IllegalArgumentException("The subscription does not exist: "+info.getConsumerId());
1:         
1:         // remove the subscription from all the matching queues.
0:         for (Iterator iter = destinationMap.get(info.getDestination()).iterator(); iter.hasNext();) {
0:             Destination dest = (Destination) iter.next();
0:             dest.removeSubscription(context, sub);
1:         }
1:     }
1: 
0:     public void removeSubscription(ConnectionContext context, RemoveSubscriptionInfo info) throws Throwable {
1:         throw new JMSException("Invalid operation.");
1:     }
1: 
0:     public void send(ConnectionContext context, Message messageSend)
0:             throws Throwable {
0:         Destination dest = lookup(context, messageSend.getDestination());
0:         dest.send(context, messageSend);
1:     }
1:     
0:     public void acknowledge(ConnectionContext context, MessageAck ack) throws Throwable {
1:         
0:         Subscription sub = (Subscription) subscriptions.get(ack.getConsumerId());
0:         if( sub==null )
0:             throw new IllegalArgumentException("The subscription does not exist: "+ack.getConsumerId());
0:         sub.acknowledge(context, ack);
1:         
1:     }
1: 
0:     protected Destination lookup(ConnectionContext context, ActiveMQDestination destination) throws Throwable {
0:         synchronized(destinationsMutex){
0:             Destination dest=(Destination) destinations.get(destination);
0:             if(dest==null){
0:                 if(autoCreateDestinations){
0:                     // Try to auto create the destination... re-invoke broker from the
1:                     // top so that the proper security checks are performed.
0:                     context.getBroker().addDestination(context,destination);
0:                     // We should now have the dest created.
0:                     dest=(Destination) destinations.get(destination);
1:                 }
0:                 if(dest==null){
0:                     throw new JMSException("The destination "+destination+" does not exist.");
1:                 }
1:             }
1:             return dest;
1:         }
1:     }
1:     
1:     public void gc() {
0:         for (Iterator iter = subscriptions.values().iterator(); iter.hasNext();) {
0:             Subscription sub = (Subscription) iter.next();
1:             sub.gc();
1:         }        
0:         for (Iterator iter = destinations.values()  .iterator(); iter.hasNext();) {
0:             Destination dest = (Destination) iter.next();
1:             dest.gc();
1:         }        
1:     }
1: 
0:     protected abstract Subscription createSubscription(ConnectionContext context, ConsumerInfo info) throws Throwable;
0:     abstract protected Destination createDestination(ActiveMQDestination destination) throws Throwable;
1: 
1:     public boolean isAutoCreateDestinations() {
1:         return autoCreateDestinations;
1:     }
1: 
1:     public void setAutoCreateDestinations(boolean autoCreateDestinations) {
1:         this.autoCreateDestinations = autoCreateDestinations;
1:     }
1:     
1: 
1: }
author:Timothy A. Bish
-------------------------------------------------------------------------------
commit:3efd4b0
/////////////////////////////////////////////////////////////////////////
1: import java.util.concurrent.locks.ReentrantReadWriteLock;
0: 
/////////////////////////////////////////////////////////////////////////
1:     protected final ReentrantReadWriteLock destinationsLock = new ReentrantReadWriteLock();
/////////////////////////////////////////////////////////////////////////
1:         destinationsLock.readLock().lock();
1:         try{
1:         } finally {
1:             destinationsLock.readLock().unlock();
1:         destinationsLock.readLock().lock();
1:         try{
1:         } finally {
1:             destinationsLock.readLock().unlock();
/////////////////////////////////////////////////////////////////////////
0: 
1:         destinationsLock.writeLock().lock();
1:         try {
/////////////////////////////////////////////////////////////////////////
1:         } finally {
1:             destinationsLock.writeLock().unlock();
/////////////////////////////////////////////////////////////////////////
1:         destinationsLock.writeLock().lock();
1:         try {
/////////////////////////////////////////////////////////////////////////
1:         } finally {
1:             destinationsLock.writeLock().unlock();
/////////////////////////////////////////////////////////////////////////
1:     @SuppressWarnings("unchecked")
1:         destinationsLock.readLock().lock();
1:         try{
1:         } finally {
1:             destinationsLock.readLock().unlock();
1:         destinationsLock.readLock().lock();
1:         try{
1:         } finally {
1:             destinationsLock.readLock().unlock();
1:     @SuppressWarnings("unchecked")
/////////////////////////////////////////////////////////////////////////
0:                 LOG.warn("A duplicate subscription was detected. Clients may be misbehaving. Later warnings you may see about subscription removal are a consequence of this.");
/////////////////////////////////////////////////////////////////////////
1:             destinationsLock.readLock().lock();
1:             try {
0:                 for (Destination dest : (Set<Destination>) destinationMap.get(info.getDestination())) {
1:             } finally {
1:                 destinationsLock.readLock().unlock();
/////////////////////////////////////////////////////////////////////////
1:     @SuppressWarnings("rawtypes")
/////////////////////////////////////////////////////////////////////////
1:         destinationsLock.readLock().lock();
1:         try {
1:         } finally {
1:             destinationsLock.readLock().unlock();
1:     @SuppressWarnings("unchecked")
/////////////////////////////////////////////////////////////////////////
1:             destinationsLock.readLock().lock();
1:             try {
0:                 for (Destination dest : (Set<Destination>) destinationMap.get(info.getDestination())) {
1:             } finally {
1:                 destinationsLock.readLock().unlock();
/////////////////////////////////////////////////////////////////////////
0: 
1:         destinationsLock.readLock().lock();
1:         try {
1:         } finally {
1:             destinationsLock.readLock().unlock();
0: 
/////////////////////////////////////////////////////////////////////////
1:                 destinationsLock.readLock().lock();
1:                 try {
1:                 } finally {
1:                     destinationsLock.readLock().unlock();
0: 
/////////////////////////////////////////////////////////////////////////
1:         destinationsLock.readLock().lock();
1:         try {
1:         } finally {
1:             destinationsLock.readLock().unlock();
0: 
/////////////////////////////////////////////////////////////////////////
1:         for (Subscription sub : subscriptions.values()) {
0: 
1:         destinationsLock.readLock().lock();
1:         try {
1:             for (Destination dest : destinations.values()) {
0:         } finally {
1:             destinationsLock.readLock().unlock();
/////////////////////////////////////////////////////////////////////////
1:     @SuppressWarnings("unchecked")
0:         destinationsLock.readLock().lock();
1:         try {
0:             for (Destination dest : (Set<Destination>) destinationMap.get(info.getDestination())) {
0:         } finally {
0:             destinationsLock.readLock().unlock();
/////////////////////////////////////////////////////////////////////////
1:     @SuppressWarnings("unchecked")
0:         destinationsLock.readLock().lock();
0:         try {
0:             for (Destination dest : (Set<Destination>) destinationMap.get(info.getDestination())) {
0:         } finally {
0:             destinationsLock.readLock().unlock();
commit:cef0221
/////////////////////////////////////////////////////////////////////////
0:  *
/////////////////////////////////////////////////////////////////////////
1:         if (destinationFactory == null) {
/////////////////////////////////////////////////////////////////////////
0:      *
/////////////////////////////////////////////////////////////////////////
0:      *
/////////////////////////////////////////////////////////////////////////
0:      *
author:Bosanac Dejan
-------------------------------------------------------------------------------
commit:2a558c8
/////////////////////////////////////////////////////////////////////////
0:                     addSubscriptionsForDestination(context, dest);
commit:d17eceb
/////////////////////////////////////////////////////////////////////////
0:                     if (!dest.getActiveMQDestination().isPattern()) {
0:                         addSubscriptionsForDestination(context, dest);
1:                     }
commit:8bf987b
/////////////////////////////////////////////////////////////////////////
1: import org.slf4j.Logger;
1: import org.slf4j.LoggerFactory;
1:     private static final Logger LOG = LoggerFactory.getLogger(AbstractRegion.class);
commit:5f6f23e
/////////////////////////////////////////////////////////////////////////
1:                 if (!consumerExchange.getConnectionContext().isInRecoveryMode()) {
0:                     LOG.warn("Ack for non existent subscription, ack:" + ack); 
0:                     throw new IllegalArgumentException(
1:                 } else {
1:                     return;
1:                 }
author:Robert Davies
-------------------------------------------------------------------------------
commit:204f91f
/////////////////////////////////////////////////////////////////////////
1:     public AbstractRegion(RegionBroker broker, DestinationStatistics destinationStatistics, SystemUsage memoryManager,
1:             TaskRunnerFactory taskRunnerFactory, DestinationFactory destinationFactory) {
/////////////////////////////////////////////////////////////////////////
1:     public final void start() throws Exception {
/////////////////////////////////////////////////////////////////////////
1:             context.getBroker().addDestination(context, dest, false);
/////////////////////////////////////////////////////////////////////////
1:     public Destination addDestination(ConnectionContext context, ActiveMQDestination destination,
1:             boolean createIfTemporary) throws Exception {
1:                 if (destination.isTemporary() == false || createIfTemporary) {
0:                     dest = createDestination(context, destination);
1:                     // intercept if there is a valid interceptor defined
0:                     DestinationInterceptor destinationInterceptor = broker.getDestinationInterceptor();
1:                     if (destinationInterceptor != null) {
0:                         dest = destinationInterceptor.intercept(dest);
1:                     }
1:                     dest.start();
0:                     destinations.put(destination, dest);
0:                     destinationMap.put(destination, dest);
0:                     addSubscriptionsForDestination(context, dest);
1:                 if (dest == null) {
0:                     throw new JMSException("The destination " + destination + " does not exist.");
1:                 }
/////////////////////////////////////////////////////////////////////////
0: 
0:     protected List<Subscription> addSubscriptionsForDestination(ConnectionContext context, Destination dest)
1:             throws Exception {
/////////////////////////////////////////////////////////////////////////
0:     public void removeDestination(ConnectionContext context, ActiveMQDestination destination, long timeout)
0:             throws Exception {
/////////////////////////////////////////////////////////////////////////
0: 
/////////////////////////////////////////////////////////////////////////
1:                 dispose(context, dest);
0:             } else {
/////////////////////////////////////////////////////////////////////////
0:         LOG.debug(broker.getBrokerName() + " adding consumer: " + info.getConsumerId() + " for destination: "
0:                 + info.getDestination());
1:             lookup(context, destination,true);
/////////////////////////////////////////////////////////////////////////
0:                 LOG
0:                         .warn("A duplicate subscription was detected. Clients may be misbehaving. Later warnings you may see about subscription removal are a consequence of this.");
/////////////////////////////////////////////////////////////////////////
1:             List<Destination> addList = new ArrayList<Destination>();
0:             synchronized (destinationsMutex) {
0:                     Destination dest = (Destination) iter.next();
0: 
1:             for (Destination dest : addList) {
1:                 ((QueueBrowserSubscription) sub).destinationsAdded();
/////////////////////////////////////////////////////////////////////////
0:         LOG.debug(broker.getBrokerName() + " removing consumer: " + info.getConsumerId() + " for destination: "
0:                 + info.getDestination());
1:         // The sub could be removed elsewhere - see ConnectionSplitBroker
0:                 for (Iterator iter = destinationMap.get(info.getDestination()).iterator(); iter.hasNext();) {
0: 
1:             for (Destination dest : removeList) {
0:                 dest.removeSubscription(context, sub, info.getLastDeliveredSequenceId());
/////////////////////////////////////////////////////////////////////////
1:             final Destination regionDestination = lookup(context, messageSend.getDestination(),false);
/////////////////////////////////////////////////////////////////////////
0:             sub = subscriptions.get(ack.getConsumerId());
0:                     LOG.warn("Ack for non existent subscription, ack:" + ack);
0:                     throw new IllegalArgumentException("The subscription does not exist: " + ack.getConsumerId());
/////////////////////////////////////////////////////////////////////////
1:     protected Destination lookup(ConnectionContext context, ActiveMQDestination destination,boolean createTemporary) throws Exception {
1:             if (isAutoCreateDestinations()) {
0:                     context.getBroker().addDestination(context, destination, createTemporary);
0:                     dest = addDestination(context, destination, false);
/////////////////////////////////////////////////////////////////////////
1:                     + messageDispatchNotification.getConsumerId() + " on "
1:                     + messageDispatchNotification.getDestination() + " does not exist for dispatch of message: "
0: 
1:      * For a Queue/TempQueue, dispatch order is imperative to match acks, so the
1:      * dispatch is deferred till the notification to ensure that the
1:      * subscription chosen by the master is used. AMQ-2102
1:      */
1:     protected void processDispatchNotificationViaDestination(MessageDispatchNotification messageDispatchNotification)
0:             throws Exception {
/////////////////////////////////////////////////////////////////////////
1:             throw new JMSException("Slave broker out of sync with master - Destination: "
1:                     + messageDispatchNotification.getDestination() + " does not exist for consumer "
1:                     + messageDispatchNotification.getConsumerId() + " with message: "
0:                     + messageDispatchNotification.getMessageId());
/////////////////////////////////////////////////////////////////////////
1:     protected Destination createDestination(ConnectionContext context, ActiveMQDestination destination)
0:             throws Exception {
/////////////////////////////////////////////////////////////////////////
0: 
1:     public void addProducer(ConnectionContext context, ProducerInfo info) throws Exception {
/////////////////////////////////////////////////////////////////////////
0:      * 
1:      * @param context
1:      *            the environment the operation is being executed under.
1:      * @throws Exception
1:      *             TODO
1:     public void removeProducer(ConnectionContext context, ProducerInfo info) throws Exception {
0:                 Destination dest = (Destination) iter.next();
0: 
1:     protected void dispose(ConnectionContext context, Destination dest) throws Exception {
0: 
1:     public void processConsumerControl(ConsumerBrokerExchange consumerExchange, ConsumerControl control) {
1:             ((AbstractSubscription) sub).setPrefetchSize(control.getPrefetch());
0:                 LOG.debug("setting prefetch: " + control.getPrefetch() + ", on subscription: "
0:                         + control.getConsumerId());
1:                 lookup(consumerExchange.getConnectionContext(), control.getDestination(),false).wakeup();
commit:38cfc9b
/////////////////////////////////////////////////////////////////////////
1:         Destination dest = null;
0:             dest = destinations.get(destination);
1:         }
0:         if (dest == null) {
0:             if (autoCreateDestinations) {
0:                 // Try to auto create the destination... re-invoke broker
0:                 // from the
0:                 // top so that the proper security checks are performed.
0:                 try {
0:                     context.getBroker().addDestination(context, destination);
0:                     dest = addDestination(context, destination);
0:                 } catch (DestinationAlreadyExistsException e) {
0:                     // if the destination already exists then lets ignore
0:                     // this error
1:                 }
0:                 // We should now have the dest created.
0:                 synchronized (destinationsMutex) {
0:             if (dest == null) {
0:                 throw new JMSException("The destination " + destination + " does not exist.");
1:             }
0:         return dest;
commit:d14e4ae
/////////////////////////////////////////////////////////////////////////
0:                         dest = addDestination(context, destination);
commit:3236474
/////////////////////////////////////////////////////////////////////////
1:             List<Destination> removeList = new ArrayList<Destination>();
1:                     removeList.add(dest);
0:                     
0:             for(Destination dest:removeList) {
0:               dest.removeSubscription(context, sub);
1:             }
commit:efecce6
/////////////////////////////////////////////////////////////////////////
0:                 if (!consumerExchange.getConnectionContext().isNetworkConnection()
0:                      && !consumerExchange.getConnectionContext()
0:                                 .isInRecoveryMode()) {
0:                     throw new IllegalArgumentException(
0:                             "The subscription does not exist: "
0:                                     + ack.getConsumerId());
0:                 } else {
commit:5a27904
/////////////////////////////////////////////////////////////////////////
1:             // But copy the matches first - to prevent deadlocks
0:             List<Destination>addList = new ArrayList<Destination>();
1:                     addList.add(dest);
0:             
0:             for (Destination dest:addList) {
0:                 dest.addSubscription(context, sub);
1:             }
commit:16f2d75
/////////////////////////////////////////////////////////////////////////
0:                 DestinationInterceptor destinationInterceptor = broker.getDestinationInterceptor();
0:                 if (destinationInterceptor != null) {
1:                     destinationInterceptor.remove(dest);
1:                 }
commit:931ed76
/////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////
0:         synchronized (destinationsMutex) {
0:             for (Iterator<Destination> i = destinations.values().iterator(); i.hasNext();) {
0:                 Destination dest = i.next();
0:                 dest.start();
1:             }
0:         synchronized (destinationsMutex) {
0:             for (Iterator<Destination> i = destinations.values().iterator(); i.hasNext();) {
0:                 Destination dest = i.next();
1:                 dest.stop();
1:             }
/////////////////////////////////////////////////////////////////////////
0:         
/////////////////////////////////////////////////////////////////////////
0:             } else {   
/////////////////////////////////////////////////////////////////////////
0:             
0:             synchronized(destinationsMutex) {
0:                 for (Iterator iter = destinationMap.get(info.getDestination()).iterator(); iter.hasNext();) {
0:                     Destination dest = (Destination)iter.next();
0:                     dest.addSubscription(context, sub);
1:                 }
/////////////////////////////////////////////////////////////////////////
0:         synchronized (destinationsMutex) {
0:             inactiveDests.removeAll(destinations.keySet());
1:         }
/////////////////////////////////////////////////////////////////////////
0:             synchronized (destinationsMutex) {
0:                 for (Iterator iter = destinationMap.get(info.getDestination())
0:                         .iterator(); iter.hasNext();) {
0:                     Destination dest = (Destination) iter.next();
0:                     dest.removeSubscription(context, sub);
1:                 }
/////////////////////////////////////////////////////////////////////////
0:         synchronized (destinationsMutex) {
0:             for (Iterator<Destination> iter = destinations.values().iterator(); iter.hasNext();) {
0:                 Destination dest = iter.next();
0:                 dest.gc();
1:             }
/////////////////////////////////////////////////////////////////////////
0:         synchronized (destinationsMutex) {
0:             for (Iterator iter = destinationMap.get(info.getDestination()).iterator(); iter.hasNext();) {
0:                 Destination dest = (Destination) iter.next();
1:                 dest.addProducer(context, info);
1:             }
/////////////////////////////////////////////////////////////////////////
0:         synchronized (destinationsMutex) {
0:             for (Iterator iter = destinationMap.get(info.getDestination()).iterator(); iter.hasNext();) {
0:                 Destination dest = (Destination)iter.next();
1:                 dest.removeProducer(context, info);
1:             }
commit:22565e4
/////////////////////////////////////////////////////////////////////////
0:         //The sub could be removed elsewhere - see ConnectionSplitBroker
1:         if (sub != null) {
0: 
0:             // remove the subscription from all the matching queues.
0:             for (Iterator iter = destinationMap.get(info.getDestination())
0:                     .iterator(); iter.hasNext();) {
0:                 Destination dest = (Destination) iter.next();
0:                 dest.removeSubscription(context, sub);
1:             }
0: 
0:             destroySubscription(sub);
commit:cd24f80
/////////////////////////////////////////////////////////////////////////
0: import java.io.IOException;
/////////////////////////////////////////////////////////////////////////
0:     public final  void start() throws Exception {
/////////////////////////////////////////////////////////////////////////
0:                 dispose(context,dest);
/////////////////////////////////////////////////////////////////////////
0:             
0:                 //networked subscriptions are going to acknowledge in flight messages 
0:                 //on behalf a subscription that is no more ...
0:                 if (!consumerExchange.getConnectionContext().isNetworkConnection()) {
0:                     throw new IllegalArgumentException("The subscription does not exist: " + ack.getConsumerId());
0:                 }else {
0:                     return;
1:                 }
/////////////////////////////////////////////////////////////////////////
0:     
0:     protected void dispose(ConnectionContext context,Destination dest) throws Exception {
0:         dest.dispose(context);
0:         dest.stop();
1:     }
commit:6d0c552
/////////////////////////////////////////////////////////////////////////
commit:634da7a
/////////////////////////////////////////////////////////////////////////
1: import org.apache.activemq.command.ProducerInfo;
/////////////////////////////////////////////////////////////////////////
0:     
0:     public void addProducer(ConnectionContext context, ProducerInfo info) throws Exception{
0:         for (Iterator iter = destinationMap.get(info.getDestination()).iterator(); iter.hasNext();) {
0:             Destination dest = (Destination)iter.next();
0:             dest.addProducer(context, info);
1:         }
1:     }
0: 
1:     /**
1:      * Removes a Producer.
0:      * @param context the environment the operation is being executed under.
0:      * @throws Exception TODO
1:      */
0:     public void removeProducer(ConnectionContext context, ProducerInfo info) throws Exception{
0:         for (Iterator iter = destinationMap.get(info.getDestination()).iterator(); iter.hasNext();) {
0:             Destination dest = (Destination)iter.next();
0:             dest.removeProducer(context, info);
1:         }
1:     }
0: 
0: 
commit:ea0cd01
/////////////////////////////////////////////////////////////////////////
1: import org.apache.activemq.security.SecurityContext;
/////////////////////////////////////////////////////////////////////////
0:     public final void start() throws Exception {
/////////////////////////////////////////////////////////////////////////
1:             context.setSecurityContext(SecurityContext.BROKER_SECURITY_CONTEXT);
commit:9dd11cb
/////////////////////////////////////////////////////////////////////////
1:     protected final SystemUsage usageManager;
/////////////////////////////////////////////////////////////////////////
1:         this.usageManager = memoryManager;
commit:6d8e2c5
/////////////////////////////////////////////////////////////////////////
1: import org.apache.activemq.usage.SystemUsage;
/////////////////////////////////////////////////////////////////////////
0:     protected final SystemUsage memoryManager;
/////////////////////////////////////////////////////////////////////////
0:     public AbstractRegion(RegionBroker broker, DestinationStatistics destinationStatistics, SystemUsage memoryManager, TaskRunnerFactory taskRunnerFactory,
commit:956fe93
/////////////////////////////////////////////////////////////////////////
0:                         //dest = addDestination(context, destination);
commit:a414c20
/////////////////////////////////////////////////////////////////////////
0:                         
0:                         context.getBroker().addDestination(context,destination);
0:                     dest=(Destination) destinations.get(destination);
commit:d00ce72
/////////////////////////////////////////////////////////////////////////
0:     public Destination addDestination(ConnectionContext context,ActiveMQDestination destination) throws Exception{
0:         synchronized(destinationsMutex){
0:             Destination dest=(Destination)destinations.get(destination);
0:             if(dest==null){
0:                 dest=createDestination(context,destination);
0:                 DestinationInterceptor destinationInterceptor=broker.getDestinationInterceptor();
0:                 if(destinationInterceptor!=null){
0:                     dest=destinationInterceptor.intercept(dest);
0:                 destinations.put(destination,dest);
0:                 destinationMap.put(destination,dest);
0:                 for(Iterator iter=subscriptions.values().iterator();iter.hasNext();){
0:                     Subscription sub=(Subscription)iter.next();
0:                     if(sub.matches(destination)){
0:                         dest.addSubscription(context,sub);
commit:84eb9f8
/////////////////////////////////////////////////////////////////////////
1: import org.apache.activemq.broker.ConsumerBrokerExchange;
1: import org.apache.activemq.broker.ProducerBrokerExchange;
/////////////////////////////////////////////////////////////////////////
0:     public void send(final ProducerBrokerExchange producerExchange, Message messageSend)
1:         final ConnectionContext context = producerExchange.getConnectionContext();
0:                
0:         if (producerExchange.isMutable() || producerExchange.getRegionDestination()==null) {
0:             final Destination regionDestination = lookup(context,messageSend.getDestination());
1:             producerExchange.setRegionDestination(regionDestination);
0:         }
0:         
0:         producerExchange.getRegionDestination().send(context, messageSend);
0:     public void acknowledge(ConsumerBrokerExchange consumerExchange,MessageAck ack) throws Exception{
0:         Subscription sub=consumerExchange.getSubscription();
0:         if(sub==null){
0:             sub=(Subscription)subscriptions.get(ack.getConsumerId());
0:             if(sub==null){
0:                 throw new IllegalArgumentException("The subscription does not exist: "+ack.getConsumerId());
0:             }
1:             consumerExchange.setSubscription(sub);
0:         }
0:         sub.acknowledge(consumerExchange.getConnectionContext(),ack);
commit:d2e6062
/////////////////////////////////////////////////////////////////////////
0: import sun.security.x509.IssuerAlternativeNameExtension;
/////////////////////////////////////////////////////////////////////////
0:     protected boolean started = false;
/////////////////////////////////////////////////////////////////////////
1:         started = true;
0:         for (Iterator i = destinations.values().iterator();i.hasNext();) {
0:             Destination dest = (Destination)i.next();
0:             dest.start();
0:         }
1:         started = false;
/////////////////////////////////////////////////////////////////////////
0:                 
commit:958c41a
/////////////////////////////////////////////////////////////////////////
0:         for (Iterator i = destinations.values().iterator();i.hasNext();) {
0:             Destination dest = (Destination)i.next();
0:             dest.stop();
0:         }
0:         destinations.clear();
commit:3a9299b
/////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////
commit:bfaff9b
/////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////
1:     protected final DestinationFactory destinationFactory;
/////////////////////////////////////////////////////////////////////////
0:     public AbstractRegion(RegionBroker broker,DestinationStatistics destinationStatistics, UsageManager memoryManager, TaskRunnerFactory taskRunnerFactory, DestinationFactory destinationFactory) {
1:         if (broker == null) {
1:             throw new IllegalArgumentException("null broker");
0:         }
1:         if (broker == null) {
1:             throw new IllegalArgumentException("null destinationFactory");
0:         }
1:         this.destinationFactory = destinationFactory;
/////////////////////////////////////////////////////////////////////////
0:             Set inactiveDests = getInactiveDestinations();
0:             for (Iterator iter = inactiveDests.iterator(); iter.hasNext();) {
0:             	ActiveMQDestination dest = (ActiveMQDestination) iter.next();
0:             	if( sub.matches(dest) ) {
0:             		context.getBroker().addDestination(context, dest);
0:             	}
0:             
/////////////////////////////////////////////////////////////////////////
1:         return destinationFactory.getDestinations();
0:         Set inactiveDests = destinationFactory.getDestinations();
/////////////////////////////////////////////////////////////////////////
0:     
0:     protected Destination createDestination(ConnectionContext context, ActiveMQDestination destination) throws Exception {
1:         return destinationFactory.createDestination(context, destination, destinationStatistics);
0:     }
commit:b792f11
/////////////////////////////////////////////////////////////////////////
0:     public void removeDestination(ConnectionContext context,ActiveMQDestination destination,long timeout)
0:                     throws Exception{
0:         // The destination cannot be removed if there are any active subscriptions
0:         for(Iterator iter=subscriptions.values().iterator();iter.hasNext();){
0:             Subscription sub=(Subscription) iter.next();
0:             if(sub.matches(destination)){
0:                 throw new JMSException("Destination still has an active subscription: "+destination);
0:             if(dest!=null){
0:                 destinationMap.removeAll(destination);
0:                 dest.dispose(context);
0:                 dest.stop();
0:             }else{
0:                 log.debug("Destination doesn't exist: " + dest);
0:             }
commit:6cb66e4
/////////////////////////////////////////////////////////////////////////
1:     protected final RegionBroker broker;
0:     public AbstractRegion(RegionBroker broker,DestinationStatistics destinationStatistics, UsageManager memoryManager, TaskRunnerFactory taskRunnerFactory, PersistenceAdapter persistenceAdapter) {
commit:f787e20
/////////////////////////////////////////////////////////////////////////
0:     
1:     /**
1:      * Get all the Destinations that are in storage
1:      * @return Set of all stored destinations
1:      */
0:     public Set getDurableDestinations(){
0:         return persistenceAdapter.getDestinations();
0:     }
1:      * @return all Destinations that don't have active consumers
commit:4098942
/////////////////////////////////////////////////////////////////////////
0: import org.apache.activemq.broker.Broker;
1: import org.apache.activemq.command.MessageDispatchNotification;
/////////////////////////////////////////////////////////////////////////
0:     protected final Broker broker;
0:     public AbstractRegion(Broker broker,DestinationStatistics destinationStatistics, UsageManager memoryManager, TaskRunnerFactory taskRunnerFactory, PersistenceAdapter persistenceAdapter) {
1:         this.broker = broker;
/////////////////////////////////////////////////////////////////////////
0:     public void processDispatchNotification(MessageDispatchNotification messageDispatchNotification) throws Throwable{
0:         Subscription sub = (Subscription) subscriptions.get(messageDispatchNotification.getConsumerId());
0:         if (sub != null){
1:             sub.processMessageDispatchNotification(messageDispatchNotification);
0:         }
0:     }
author:David Jencks
-------------------------------------------------------------------------------
commit:07b6a38
/////////////////////////////////////////////////////////////////////////
1:     public Set<Destination> getDestinations(ActiveMQDestination destination) {
/////////////////////////////////////////////////////////////////////////
1:         destinationFactory.removeDestination(dest);
author:James Strachan
-------------------------------------------------------------------------------
commit:2b84b26
/////////////////////////////////////////////////////////////////////////
commit:b006e61
/////////////////////////////////////////////////////////////////////////
0: import org.apache.activemq.broker.DestinationAlreadyExistsException;
/////////////////////////////////////////////////////////////////////////
0:                     try {
0:                         dest = addDestination(context, destination);
0:                         //context.getBroker().addDestination(context,destination);
0:                     }
0:                     catch (DestinationAlreadyExistsException e) {
0:                         // if the destination already exists then lets ignore this error
0:                     }
0:                     //dest=(Destination) destinations.get(destination);
commit:e8c8abc
/////////////////////////////////////////////////////////////////////////
0:  *
0: 
/////////////////////////////////////////////////////////////////////////
0:     protected final Map consumerChangeMutexMap = new HashMap();
0: 
/////////////////////////////////////////////////////////////////////////
0: 
/////////////////////////////////////////////////////////////////////////
0: 
0:             // TODO: implement a way to notify the subscribers that we want to take the down
0: 
0: 
/////////////////////////////////////////////////////////////////////////
0: 
0: 
0: 
0:      *
/////////////////////////////////////////////////////////////////////////
0: 
/////////////////////////////////////////////////////////////////////////
1:         Object addGuard;
0:         synchronized(consumerChangeMutexMap) {
1:             addGuard = consumerChangeMutexMap.get(info.getConsumerId());
1:             if (addGuard == null) {
1:                 addGuard = new Object();
1:                 consumerChangeMutexMap.put(info.getConsumerId(), addGuard);
1:         synchronized (addGuard) {
0:             Object o = subscriptions.get(info.getConsumerId());
1:             if (o != null) {
0:                 log.warn("A duplicate subscription was detected. Clients may be misbehaving. Later warnings you may see about subscription removal are a consequence of this.");
0:                 return (Subscription)o;
0:             }
0:             Subscription sub = createSubscription(context, info);
0:             // We may need to add some destinations that are in persistent store but not active
0:             // in the broker.
0:             //
0:             // TODO: think about this a little more.  This is good cause destinations are not loaded into
0:             // memory until a client needs to use the queue, but a management agent viewing the
0:             // broker will not see a destination that exists in persistent store.  We may want to
0:             // eagerly load all destinations into the broker but have an inactive state for the
0:             // destination which has reduced memory usage.
0:             //
0:             if( persistenceAdapter!=null ) {
0:                 Set inactiveDests = getInactiveDestinations();
0:                 for (Iterator iter = inactiveDests.iterator(); iter.hasNext();) {
0:                     ActiveMQDestination dest = (ActiveMQDestination) iter.next();
0:                     if( sub.matches(dest) ) {
0:                         context.getBroker().addDestination(context, dest);
0:                     }
0:                 }
0:             }
0: 
0:             subscriptions.put(info.getConsumerId(), sub);
0: 
1:             // At this point we're done directly manipulating subscriptions,
1:             // but we need to retain the synchronized block here. Consider
1:             // otherwise what would happen if at this point a second
1:             // thread added, then removed, as would be allowed with
1:             // no mutex held. Remove is only essentially run once
1:             // so everything after this point would be leaked.
0: 
0:             // Add the subscription to all the matching queues.
0:             for (Iterator iter = destinationMap.get(info.getDestination()).iterator(); iter.hasNext();) {
0:                 Destination dest = (Destination) iter.next();
0:                 dest.addSubscription(context, sub);
0:             }
0: 
0:             if( info.isBrowser() ) {
0:                 ((QueueBrowserSubscription)sub).browseDone();
0:             }
0: 
1:             return sub;
0: 
/////////////////////////////////////////////////////////////////////////
0: 
0: 
0: 
0: 
0: 
0: 
1:         synchronized (consumerChangeMutexMap) {
1:             consumerChangeMutexMap.remove(info.getConsumerId());
0:         }
0:     protected void destroySubscription(Subscription sub) {
/////////////////////////////////////////////////////////////////////////
0: 
/////////////////////////////////////////////////////////////////////////
0: 
/////////////////////////////////////////////////////////////////////////
0:         }
0:         }
0:     public boolean isAutoCreateDestinations() {
0: 
commit:a420312
/////////////////////////////////////////////////////////////////////////
0:         synchronized (destinationsMutex) {
0:             Destination dest = (Destination) destinations.get(destination);
0:             if (dest != null) {
0:                 log.warn("Attempt to add destination which is already created: " + destination);
0:             }
0:             else {
0:                 dest = createDestination(context, destination);
0: 
0:                 // intercept if there is a valid interceptor defined
0:                 DestinationInterceptor destinationInterceptor = broker.getDestinationInterceptor();
0:                 if (destinationInterceptor != null) {
0:                     dest = destinationInterceptor.intercept(dest);
0:                 }
0: 
0:                 dest.start();
0: 
0:                 destinations.put(destination, dest);
0:                 destinationMap.put(destination, dest);
0: 
0:                 // Add all consumers that are interested in the destination.
0:                 for (Iterator iter = subscriptions.values().iterator(); iter.hasNext();) {
0:                     Subscription sub = (Subscription) iter.next();
0:                     if (sub.matches(destination)) {
0:                         dest.addSubscription(context, sub);
0:                     }
commit:9d671b7
/////////////////////////////////////////////////////////////////////////
1: import org.apache.activemq.command.MessagePull;
1: import org.apache.activemq.command.Response;
/////////////////////////////////////////////////////////////////////////
0:     }
0: 
1:     public Response messagePull(ConnectionContext context, MessagePull pull) throws Exception {
0:         Subscription sub = (Subscription) subscriptions.get(pull.getConsumerId());
0:         if( sub==null )
0:             throw new IllegalArgumentException("The subscription does not exist: "+pull.getConsumerId());
1:         return sub.pullMessage(context, pull);
commit:da67a38
/////////////////////////////////////////////////////////////////////////
0:         
0:         // intercept if there is a valid interceptor defined
0:         DestinationInterceptor destinationInterceptor = broker.getDestinationInterceptor();
0:         if (destinationInterceptor != null) {
0:             dest = destinationInterceptor.intercept(dest);
0:         }
0:         
/////////////////////////////////////////////////////////////////////////
0:     public boolean isAutoCreateDestinations() { 
commit:bc344c9
/////////////////////////////////////////////////////////////////////////
1:         ActiveMQDestination destination = info.getDestination();
0:         if (destination != null && ! destination.isPattern() && ! destination.isComposite()) {
1:             // lets auto-create the destination
0:             lookup(context, destination);
0:         }
0:         
commit:06a5829
/////////////////////////////////////////////////////////////////////////
1:     /**
1:      * Provide an exact or wildcard lookup of destinations in the region
0:      * 
1:      * @return a set of matching destination objects.
0:      */
0:     public Set getDestinations(ActiveMQDestination destination) {
0:         synchronized(destinationsMutex){
0:             return destinationMap.get(destination);
0:         }
0:     }
0:     
commit:d680ba1
/////////////////////////////////////////////////////////////////////////
1: import java.util.HashMap;
1: import java.util.Map;
/////////////////////////////////////////////////////////////////////////
0:     
0:     public Map getDestinationMap() {
0:         synchronized(destinationsMutex){
0:             return new HashMap(destinations);
0:         }
0:     }
commit:0def1d4
/////////////////////////////////////////////////////////////////////////
1:     public Subscription addConsumer(ConnectionContext context, ConsumerInfo info) throws Exception {
/////////////////////////////////////////////////////////////////////////
0:         return sub;
============================================================================