1:39d0717: /**
1:39d0717:  * Licensed to the Apache Software Foundation (ASF) under one or more
1:39d0717:  * contributor license agreements.  See the NOTICE file distributed with
1:39d0717:  * this work for additional information regarding copyright ownership.
1:39d0717:  * The ASF licenses this file to You under the Apache License, Version 2.0
1:39d0717:  * (the "License"); you may not use this file except in compliance with
1:39d0717:  * the License.  You may obtain a copy of the License at
1:39d0717:  *
1:39d0717:  *      http://www.apache.org/licenses/LICENSE-2.0
1:39d0717:  *
1:39d0717:  * Unless required by applicable law or agreed to in writing, software
1:39d0717:  * distributed under the License is distributed on an "AS IS" BASIS,
1:39d0717:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:39d0717:  * See the License for the specific language governing permissions and
1:39d0717:  * limitations under the License.
1:39d0717:  */
1:39d0717: package org.apache.activemq;
1:39d0717: 
1:39d0717: import static org.junit.Assert.assertEquals;
1:39d0717: import static org.junit.Assert.fail;
1:39d0717: 
1:39d0717: import java.util.concurrent.atomic.AtomicInteger;
1:39d0717: 
1:39d0717: import javax.jms.TransactionRolledBackException;
1:39d0717: 
1:39d0717: import org.apache.activemq.transaction.Synchronization;
1:39d0717: import org.junit.After;
1:39d0717: import org.junit.Before;
1:39d0717: import org.junit.Test;
1:39d0717: 
1:39d0717: public class TransactionContextTest {
1:39d0717:     
1:39d0717:     TransactionContext underTest;
1:39d0717:     ActiveMQConnectionFactory factory = new ActiveMQConnectionFactory("vm://localhost");
1:39d0717:     ActiveMQConnection connection;
1:39d0717:     
1:39d0717:     
1:39d0717:     @Before
1:39d0717:     public void setup() throws Exception {
1:39d0717:         connection = factory.createActiveMQConnection();
1:39d0717:         underTest = new TransactionContext(connection);
1:39d0717:     }
1:39d0717:     
1:39d0717:     @After
1:39d0717:     public void tearDown() throws Exception {
1:39d0717:         connection.close();
1:39d0717:     }
1:39d0717:     
1:39d0717:     @Test
1:39d0717:     public void testSyncBeforeEndCalledOnceOnRollback() throws Exception {
1:39d0717:         final AtomicInteger beforeEndCountA = new AtomicInteger(0);
1:39d0717:         final AtomicInteger beforeEndCountB = new AtomicInteger(0);
1:39d0717:         final AtomicInteger rollbackCountA = new AtomicInteger(0);
1:39d0717:         final AtomicInteger rollbackCountB = new AtomicInteger(0);
1:39d0717:         underTest.addSynchronization(new Synchronization() {
1:39d0717:             @Override
1:39d0717:             public void beforeEnd() throws Exception {
1:39d0717:                 if (beforeEndCountA.getAndIncrement() == 0) {
1:39d0717:                     throw new TransactionRolledBackException("force rollback");
1:39d0717:                 }
1:39d0717:             }
1:39d0717: 
1:39d0717:             @Override
1:39d0717:             public void afterCommit() throws Exception {
1:39d0717:                 fail("exepcted rollback exception");
1:39d0717:             }
1:39d0717: 
1:39d0717:             @Override
1:39d0717:             public void afterRollback() throws Exception {
1:39d0717:                 rollbackCountA.incrementAndGet();
1:39d0717:             }
1:39d0717:             
1:39d0717:         });
1:39d0717:         
1:39d0717:         underTest.addSynchronization(new Synchronization() {
1:39d0717:             @Override
1:39d0717:             public void beforeEnd() throws Exception {
1:39d0717:                 beforeEndCountB.getAndIncrement();
1:39d0717:             }
1:39d0717:             
1:39d0717:             @Override     
1:39d0717:             public void afterCommit() throws Exception {
1:39d0717:                 fail("exepcted rollback exception");
1:39d0717:             }
1:39d0717: 
1:39d0717:             @Override
1:39d0717:             public void afterRollback() throws Exception {
1:39d0717:                 rollbackCountB.incrementAndGet();
1:39d0717:             }
1:39d0717: 
1:39d0717:         });
1:39d0717:         
1:39d0717:         
1:39d0717:         try {
1:39d0717:             underTest.commit();
1:39d0717:             fail("exepcted rollback exception");
1:39d0717:         } catch (TransactionRolledBackException expected) {
1:39d0717:         }
1:39d0717:         
1:39d0717:         assertEquals("beforeEnd A called once", 1, beforeEndCountA.get());
1:39d0717:         assertEquals("beforeEnd B called once", 1, beforeEndCountA.get());
1:39d0717:         assertEquals("rollbackCount B 0", 1, rollbackCountB.get());
1:39d0717:         assertEquals("rollbackCount A B", rollbackCountA.get(), rollbackCountB.get());
1:39d0717:     }
1:39d0717:     
1:39d0717:     @Test
1:39d0717:     public void testSyncIndexCleared() throws Exception {
1:39d0717:         final AtomicInteger beforeEndCountA = new AtomicInteger(0);
1:39d0717:         final AtomicInteger rollbackCountA = new AtomicInteger(0);
1:39d0717:         Synchronization sync = new Synchronization() {
1:39d0717:             @Override
1:39d0717:             public void beforeEnd() throws Exception {
1:39d0717:                 beforeEndCountA.getAndIncrement();
1:39d0717:             }
1:39d0717:             @Override
1:39d0717:             public void afterCommit() throws Exception {
1:39d0717:                 fail("exepcted rollback exception");
1:39d0717:             }
1:39d0717:             @Override
1:39d0717:             public void afterRollback() throws Exception {
1:39d0717:                 rollbackCountA.incrementAndGet();
1:39d0717:             } 
1:39d0717:         };
1:39d0717:         
1:39d0717:         underTest.begin();
1:39d0717:         underTest.addSynchronization(sync);
1:39d0717:         underTest.rollback();
1:39d0717:         
1:39d0717:         assertEquals("beforeEnd", 1, beforeEndCountA.get());
1:39d0717:         assertEquals("rollback", 1, rollbackCountA.get());
1:39d0717:      
1:39d0717:         // do it again
1:39d0717:         underTest.begin();
1:39d0717:         underTest.addSynchronization(sync);
1:39d0717:         underTest.rollback();
1:39d0717:      
1:39d0717:         assertEquals("beforeEnd", 2, beforeEndCountA.get());
1:39d0717:         assertEquals("rollback", 2, rollbackCountA.get());
1:39d0717:     }
1:39d0717: }
============================================================================
author:Timothy A. Bish
-------------------------------------------------------------------------------
commit:ef24cc9
author:Gary Tully
-------------------------------------------------------------------------------
commit:39d0717
/////////////////////////////////////////////////////////////////////////
1: /**
1:  * Licensed to the Apache Software Foundation (ASF) under one or more
1:  * contributor license agreements.  See the NOTICE file distributed with
1:  * this work for additional information regarding copyright ownership.
1:  * The ASF licenses this file to You under the Apache License, Version 2.0
1:  * (the "License"); you may not use this file except in compliance with
1:  * the License.  You may obtain a copy of the License at
1:  *
1:  *      http://www.apache.org/licenses/LICENSE-2.0
1:  *
1:  * Unless required by applicable law or agreed to in writing, software
1:  * distributed under the License is distributed on an "AS IS" BASIS,
1:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:  * See the License for the specific language governing permissions and
1:  * limitations under the License.
1:  */
1: package org.apache.activemq;
1: 
1: import static org.junit.Assert.assertEquals;
1: import static org.junit.Assert.fail;
1: 
1: import java.util.concurrent.atomic.AtomicInteger;
1: 
1: import javax.jms.TransactionRolledBackException;
1: 
1: import org.apache.activemq.transaction.Synchronization;
1: import org.junit.After;
1: import org.junit.Before;
1: import org.junit.Test;
1: 
1: public class TransactionContextTest {
1:     
1:     TransactionContext underTest;
1:     ActiveMQConnectionFactory factory = new ActiveMQConnectionFactory("vm://localhost");
1:     ActiveMQConnection connection;
1:     
1:     
1:     @Before
1:     public void setup() throws Exception {
1:         connection = factory.createActiveMQConnection();
1:         underTest = new TransactionContext(connection);
1:     }
1:     
1:     @After
1:     public void tearDown() throws Exception {
1:         connection.close();
1:     }
1:     
1:     @Test
1:     public void testSyncBeforeEndCalledOnceOnRollback() throws Exception {
1:         final AtomicInteger beforeEndCountA = new AtomicInteger(0);
1:         final AtomicInteger beforeEndCountB = new AtomicInteger(0);
1:         final AtomicInteger rollbackCountA = new AtomicInteger(0);
1:         final AtomicInteger rollbackCountB = new AtomicInteger(0);
1:         underTest.addSynchronization(new Synchronization() {
1:             @Override
1:             public void beforeEnd() throws Exception {
1:                 if (beforeEndCountA.getAndIncrement() == 0) {
1:                     throw new TransactionRolledBackException("force rollback");
1:                 }
1:             }
1: 
1:             @Override
1:             public void afterCommit() throws Exception {
1:                 fail("exepcted rollback exception");
1:             }
1: 
1:             @Override
1:             public void afterRollback() throws Exception {
1:                 rollbackCountA.incrementAndGet();
1:             }
1:             
1:         });
1:         
1:         underTest.addSynchronization(new Synchronization() {
1:             @Override
1:             public void beforeEnd() throws Exception {
1:                 beforeEndCountB.getAndIncrement();
1:             }
1:             
1:             @Override     
1:             public void afterCommit() throws Exception {
1:                 fail("exepcted rollback exception");
1:             }
1: 
1:             @Override
1:             public void afterRollback() throws Exception {
1:                 rollbackCountB.incrementAndGet();
1:             }
1: 
1:         });
1:         
1:         
1:         try {
1:             underTest.commit();
1:             fail("exepcted rollback exception");
1:         } catch (TransactionRolledBackException expected) {
1:         }
1:         
1:         assertEquals("beforeEnd A called once", 1, beforeEndCountA.get());
1:         assertEquals("beforeEnd B called once", 1, beforeEndCountA.get());
1:         assertEquals("rollbackCount B 0", 1, rollbackCountB.get());
1:         assertEquals("rollbackCount A B", rollbackCountA.get(), rollbackCountB.get());
1:     }
1:     
1:     @Test
1:     public void testSyncIndexCleared() throws Exception {
1:         final AtomicInteger beforeEndCountA = new AtomicInteger(0);
1:         final AtomicInteger rollbackCountA = new AtomicInteger(0);
1:         Synchronization sync = new Synchronization() {
1:             @Override
1:             public void beforeEnd() throws Exception {
1:                 beforeEndCountA.getAndIncrement();
1:             }
1:             @Override
1:             public void afterCommit() throws Exception {
1:                 fail("exepcted rollback exception");
1:             }
1:             @Override
1:             public void afterRollback() throws Exception {
1:                 rollbackCountA.incrementAndGet();
1:             } 
1:         };
1:         
1:         underTest.begin();
1:         underTest.addSynchronization(sync);
1:         underTest.rollback();
1:         
1:         assertEquals("beforeEnd", 1, beforeEndCountA.get());
1:         assertEquals("rollback", 1, rollbackCountA.get());
1:      
1:         // do it again
1:         underTest.begin();
1:         underTest.addSynchronization(sync);
1:         underTest.rollback();
1:      
1:         assertEquals("beforeEnd", 2, beforeEndCountA.get());
1:         assertEquals("rollback", 2, rollbackCountA.get());
1:     }
1: }
============================================================================