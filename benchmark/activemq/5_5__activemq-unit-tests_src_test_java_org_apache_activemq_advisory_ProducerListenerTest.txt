1:3582300: /**
1:57b4941:  * Licensed to the Apache Software Foundation (ASF) under one or more
1:57b4941:  * contributor license agreements.  See the NOTICE file distributed with
1:57b4941:  * this work for additional information regarding copyright ownership.
1:57b4941:  * The ASF licenses this file to You under the Apache License, Version 2.0
1:57b4941:  * (the "License"); you may not use this file except in compliance with
1:57b4941:  * the License.  You may obtain a copy of the License at
5:3582300:  *
1:230a86c:  *      http://www.apache.org/licenses/LICENSE-2.0
1:0bbc0ac:  *
1:3582300:  * Unless required by applicable law or agreed to in writing, software
1:3582300:  * distributed under the License is distributed on an "AS IS" BASIS,
1:3582300:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:3582300:  * See the License for the specific language governing permissions and
1:3582300:  * limitations under the License.
1:3582300:  */
1:3582300: package org.apache.activemq.advisory;
4:3582300: 
1:86cbdfd: import java.util.concurrent.ArrayBlockingQueue;
1:86cbdfd: import java.util.concurrent.BlockingQueue;
1:86cbdfd: import java.util.concurrent.TimeUnit;
1:3582300: 
1:3582300: import javax.jms.Connection;
1:11781d3: import javax.jms.Destination;
1:3582300: import javax.jms.JMSException;
1:3582300: import javax.jms.MessageProducer;
1:3582300: import javax.jms.Session;
1:230a86c: import org.apache.activemq.EmbeddedBrokerTestSupport;
1:8bf987b: import org.slf4j.Logger;
1:8bf987b: import org.slf4j.LoggerFactory;
1:230a86c: 
1:3582300: /**
1:c7d559f:  *
1:c7d559f:  *
1:3582300:  */
1:3582300: public class ProducerListenerTest extends EmbeddedBrokerTestSupport implements ProducerListener {
1:8bf987b:     private static final Logger LOG = LoggerFactory.getLogger(ProducerListenerTest.class);
1:3582300: 
1:3582300:     protected Session consumerSession1;
1:3582300:     protected Session consumerSession2;
1:3582300:     protected int consumerCounter;
1:3582300:     protected ProducerEventSource producerEventSource;
1:933eb2f:     protected BlockingQueue<ProducerEvent> eventQueue = new ArrayBlockingQueue<ProducerEvent>(1000);
1:3582300:     private Connection connection;
1:3582300: 
1:3582300:     public void testProducerEvents() throws Exception {
1:3582300:         producerEventSource.start();
1:3582300: 
1:3582300:         consumerSession1 = createProducer();
1:11781d3:         assertProducerEvent(1, true);
1:3582300: 
1:3582300:         consumerSession2 = createProducer();
1:11781d3:         assertProducerEvent(2, true);
1:3582300: 
1:3582300:         consumerSession1.close();
1:3582300:         consumerSession1 = null;
1:11781d3:         assertProducerEvent(1, false);
1:3582300: 
1:3582300:         consumerSession2.close();
1:3582300:         consumerSession2 = null;
1:11781d3:         assertProducerEvent(0, false);
1:3582300:     }
1:3582300: 
1:3582300:     public void testListenWhileAlreadyConsumersActive() throws Exception {
1:3582300:         consumerSession1 = createProducer();
1:3582300:         consumerSession2 = createProducer();
1:3582300: 
1:3582300:         producerEventSource.start();
1:11781d3:         assertProducerEvent(2, true);
1:11781d3:         assertProducerEvent(2, true);
1:3582300: 
1:3582300:         consumerSession1.close();
1:3582300:         consumerSession1 = null;
1:11781d3:         assertProducerEvent(1, false);
1:3582300: 
1:3582300:         consumerSession2.close();
1:3582300:         consumerSession2 = null;
1:11781d3:         assertProducerEvent(0, false);
1:3582300:     }
1:3582300: 
1:11781d3:     public void testConsumerEventsOnTemporaryDestination() throws Exception {
1:11781d3: 
1:11781d3:         Session s = connection.createSession(true,Session.AUTO_ACKNOWLEDGE);
1:11781d3:         Destination dest = useTopic ? s.createTemporaryTopic() : s.createTemporaryQueue();
1:11781d3:         producerEventSource = new ProducerEventSource(connection, dest);
1:11781d3:         producerEventSource.setProducerListener(this);
1:11781d3:         producerEventSource.start();
1:11781d3:         MessageProducer producer = s.createProducer(dest);
1:11781d3:         assertProducerEvent(1, true);
1:11781d3:         producer.close();
1:11781d3:         assertProducerEvent(0, false);
1:11781d3:     }
1:11781d3: 
1:11781d3: 
1:11781d3: 
1:c7d559f:     @Override
1:3582300:     public void onProducerEvent(ProducerEvent event) {
1:3582300:         eventQueue.add(event);
1:3582300:     }
1:3582300: 
1:c7d559f:     @Override
1:3582300:     protected void setUp() throws Exception {
1:3582300:         super.setUp();
1:3582300: 
1:3582300:         connection = createConnection();
1:3582300:         connection.start();
1:3582300:         producerEventSource = new ProducerEventSource(connection, destination);
1:3582300:         producerEventSource.setProducerListener(this);
1:3582300:     }
1:3582300: 
1:c7d559f:     @Override
1:3582300:     protected void tearDown() throws Exception {
1:3582300:         if (producerEventSource != null) {
1:3582300:             producerEventSource.stop();
1:3582300:         }
1:3582300:         if (consumerSession2 != null) {
1:3582300:             consumerSession2.close();
1:3582300:         }
1:3582300:         if (consumerSession1 != null) {
1:3582300:             consumerSession1.close();
1:3582300:         }
1:3582300:         if (connection != null) {
1:3582300:             connection.close();
1:3582300:         }
1:3582300:         super.tearDown();
1:3582300:     }
1:3582300: 
1:11781d3:     protected void assertProducerEvent(int count, boolean started) throws InterruptedException {
1:3582300:         ProducerEvent event = waitForProducerEvent();
1:3582300:         assertEquals("Producer count", count, event.getProducerCount());
1:3582300:         assertEquals("started", started, event.isStarted());
1:3582300:     }
1:3582300: 
1:3582300:     protected Session createProducer() throws JMSException {
1:3582300:         final String consumerText = "Consumer: " + (++consumerCounter);
1:230a86c:         LOG.info("Creating consumer: " + consumerText + " on destination: " + destination);
1:230a86c: 
1:3582300:         Session answer = connection.createSession(false, Session.AUTO_ACKNOWLEDGE);
1:3582300:         MessageProducer producer = answer.createProducer(destination);
1:c7d559f:         assertNotNull(producer);
1:c7d559f: 
1:3582300:         return answer;
1:3582300:     }
1:3582300: 
1:3582300:     protected ProducerEvent waitForProducerEvent() throws InterruptedException {
1:933eb2f:         ProducerEvent answer = eventQueue.poll(100000, TimeUnit.MILLISECONDS);
1:3582300:         assertTrue("Should have received a consumer event!", answer != null);
1:3582300:         return answer;
1:3582300:     }
1:3582300: 
1:3582300: }
============================================================================
author:rajdavies
-------------------------------------------------------------------------------
commit:11781d3
/////////////////////////////////////////////////////////////////////////
1: import javax.jms.Destination;
/////////////////////////////////////////////////////////////////////////
1:         assertProducerEvent(1, true);
1:         assertProducerEvent(2, true);
1:         assertProducerEvent(1, false);
1:         assertProducerEvent(0, false);
/////////////////////////////////////////////////////////////////////////
1:         assertProducerEvent(2, true);
1:         assertProducerEvent(2, true);
1:         assertProducerEvent(1, false);
1:         assertProducerEvent(0, false);
1:     public void testConsumerEventsOnTemporaryDestination() throws Exception {
1: 
1:         Session s = connection.createSession(true,Session.AUTO_ACKNOWLEDGE);
1:         Destination dest = useTopic ? s.createTemporaryTopic() : s.createTemporaryQueue();
1:         producerEventSource = new ProducerEventSource(connection, dest);
1:         producerEventSource.setProducerListener(this);
1:         producerEventSource.start();
1:         MessageProducer producer = s.createProducer(dest);
1:         assertProducerEvent(1, true);
1:         producer.close();
1:         assertProducerEvent(0, false);
1:     }
1: 
1: 
1: 
/////////////////////////////////////////////////////////////////////////
1:     protected void assertProducerEvent(int count, boolean started) throws InterruptedException {
author:Timothy A. Bish
-------------------------------------------------------------------------------
commit:c7d559f
/////////////////////////////////////////////////////////////////////////
1:  *
1:  *
/////////////////////////////////////////////////////////////////////////
1:     @Override
1:     @Override
/////////////////////////////////////////////////////////////////////////
1:     @Override
/////////////////////////////////////////////////////////////////////////
1:         assertNotNull(producer);
1: 
commit:ef24cc9
author:Hiram R. Chirino
-------------------------------------------------------------------------------
commit:0bbc0ac
/////////////////////////////////////////////////////////////////////////
1:  * 
commit:933eb2f
/////////////////////////////////////////////////////////////////////////
1:     protected BlockingQueue<ProducerEvent> eventQueue = new ArrayBlockingQueue<ProducerEvent>(1000);
/////////////////////////////////////////////////////////////////////////
1:         ProducerEvent answer = eventQueue.poll(100000, TimeUnit.MILLISECONDS);
commit:fc00993
/////////////////////////////////////////////////////////////////////////
0: import org.apache.commons.logging.Log;
0: import org.apache.commons.logging.LogFactory;
0:     private static final Log LOG = LogFactory.getLog(ProducerListenerTest.class);
commit:230a86c
/////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////
1:  *      http://www.apache.org/licenses/LICENSE-2.0
/////////////////////////////////////////////////////////////////////////
1: import org.apache.activemq.EmbeddedBrokerTestSupport;
1: 
/////////////////////////////////////////////////////////////////////////
1:         LOG.info("Creating consumer: " + consumerText + " on destination: " + destination);
1: 
0:         ProducerEvent answer = (ProducerEvent)eventQueue.poll(100000, TimeUnit.MILLISECONDS);
commit:86cbdfd
/////////////////////////////////////////////////////////////////////////
1: import java.util.concurrent.ArrayBlockingQueue;
1: import java.util.concurrent.BlockingQueue;
1: import java.util.concurrent.TimeUnit;
commit:57b4941
/////////////////////////////////////////////////////////////////////////
1:  * Licensed to the Apache Software Foundation (ASF) under one or more
1:  * contributor license agreements.  See the NOTICE file distributed with
1:  * this work for additional information regarding copyright ownership.
1:  * The ASF licenses this file to You under the Apache License, Version 2.0
1:  * (the "License"); you may not use this file except in compliance with
1:  * the License.  You may obtain a copy of the License at
commit:93dc39b
/////////////////////////////////////////////////////////////////////////
0:         log.info("Creating consumer: " + consumerText + " on destination: " + destination);
author:Bosanac Dejan
-------------------------------------------------------------------------------
commit:8bf987b
/////////////////////////////////////////////////////////////////////////
1: import org.slf4j.Logger;
1: import org.slf4j.LoggerFactory;
1:     private static final Logger LOG = LoggerFactory.getLogger(ProducerListenerTest.class);
author:Robert Davies
-------------------------------------------------------------------------------
commit:3582300
/////////////////////////////////////////////////////////////////////////
1: /**
1:  *
0:  * Copyright 2005-2006 The Apache Software Foundation
1:  *
0:  * Licensed under the Apache License, Version 2.0 (the "License");
0:  * you may not use this file except in compliance with the License.
0:  * You may obtain a copy of the License at
1:  *
0:  * http://www.apache.org/licenses/LICENSE-2.0
1:  *
1:  * Unless required by applicable law or agreed to in writing, software
1:  * distributed under the License is distributed on an "AS IS" BASIS,
1:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:  * See the License for the specific language governing permissions and
1:  * limitations under the License.
1:  */
1: package org.apache.activemq.advisory;
1: 
0: import edu.emory.mathcs.backport.java.util.concurrent.ArrayBlockingQueue;
0: import edu.emory.mathcs.backport.java.util.concurrent.BlockingQueue;
0: import edu.emory.mathcs.backport.java.util.concurrent.TimeUnit;
1: 
0: import org.apache.activemq.EmbeddedBrokerTestSupport;
0: import org.apache.activemq.advisory.ConsumerEvent;
0: import org.apache.activemq.advisory.ConsumerEventSource;
0: import org.apache.activemq.advisory.ConsumerListener;
1: 
1: import javax.jms.Connection;
1: import javax.jms.JMSException;
0: import javax.jms.Message;
0: import javax.jms.MessageConsumer;
0: import javax.jms.MessageListener;
1: import javax.jms.MessageProducer;
1: import javax.jms.Session;
1: 
1: /**
1:  * 
0:  * @version $Revision: 359679 $
1:  */
1: public class ProducerListenerTest extends EmbeddedBrokerTestSupport implements ProducerListener {
1: 
1:     protected Session consumerSession1;
1:     protected Session consumerSession2;
1:     protected int consumerCounter;
1:     protected ProducerEventSource producerEventSource;
0:     protected BlockingQueue eventQueue = new ArrayBlockingQueue(1000);
1:     private Connection connection;
1: 
1:     public void testProducerEvents() throws Exception {
1:         producerEventSource.start();
1: 
1:         consumerSession1 = createProducer();
0:         assertConsumerEvent(1, true);
1: 
1:         consumerSession2 = createProducer();
0:         assertConsumerEvent(2, true);
1: 
1:         consumerSession1.close();
1:         consumerSession1 = null;
0:         assertConsumerEvent(1, false);
1: 
1:         consumerSession2.close();
1:         consumerSession2 = null;
0:         assertConsumerEvent(0, false);
1:     }
1: 
1:     public void testListenWhileAlreadyConsumersActive() throws Exception {
1:         consumerSession1 = createProducer();
1:         consumerSession2 = createProducer();
1: 
1:         producerEventSource.start();
0:         assertConsumerEvent(2, true);
0:         assertConsumerEvent(2, true);
1: 
1:         consumerSession1.close();
1:         consumerSession1 = null;
0:         assertConsumerEvent(1, false);
1: 
1:         consumerSession2.close();
1:         consumerSession2 = null;
0:         assertConsumerEvent(0, false);
1:     }
1: 
1:     public void onProducerEvent(ProducerEvent event) {
1:         eventQueue.add(event);
1:     }
1: 
1:     protected void setUp() throws Exception {
1:         super.setUp();
1: 
1:         connection = createConnection();
1:         connection.start();
1:         producerEventSource = new ProducerEventSource(connection, destination);
1:         producerEventSource.setProducerListener(this);
1:     }
1: 
1:     protected void tearDown() throws Exception {
1:         if (producerEventSource != null) {
1:             producerEventSource.stop();
1:         }
1:         if (consumerSession2 != null) {
1:             consumerSession2.close();
1:         }
1:         if (consumerSession1 != null) {
1:             consumerSession1.close();
1:         }
1:         if (connection != null) {
1:             connection.close();
1:         }
1:         super.tearDown();
1:     }
1: 
0:     protected void assertConsumerEvent(int count, boolean started) throws InterruptedException {
1:         ProducerEvent event = waitForProducerEvent();
1:         assertEquals("Producer count", count, event.getProducerCount());
1:         assertEquals("started", started, event.isStarted());
1:     }
1: 
1:     protected Session createProducer() throws JMSException {
1:         final String consumerText = "Consumer: " + (++consumerCounter);
0:         System.out.println("Creating consumer: " + consumerText + " on destination: " + destination);
1:         
1:         Session answer = connection.createSession(false, Session.AUTO_ACKNOWLEDGE);
1:         MessageProducer producer = answer.createProducer(destination);
1:         return answer;
1:     }
1: 
1:     protected ProducerEvent waitForProducerEvent() throws InterruptedException {
0:         ProducerEvent answer = (ProducerEvent) eventQueue.poll(100000, TimeUnit.MILLISECONDS);
1:         assertTrue("Should have received a consumer event!", answer != null);
1:         return answer;
1:     }
1: 
1: }
============================================================================