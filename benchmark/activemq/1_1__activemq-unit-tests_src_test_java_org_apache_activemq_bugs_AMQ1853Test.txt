1:0b6bf7e: /**
1:0b6bf7e:  * Licensed to the Apache Software Foundation (ASF) under one or more
1:0b6bf7e:  * contributor license agreements.  See the NOTICE file distributed with
1:0b6bf7e:  * this work for additional information regarding copyright ownership.
1:0b6bf7e:  * The ASF licenses this file to You under the Apache License, Version 2.0
1:0b6bf7e:  * (the "License"); you may not use this file except in compliance with
1:0b6bf7e:  * the License.  You may obtain a copy of the License at
1:0b6bf7e:  *
1:0b6bf7e:  *      http://www.apache.org/licenses/LICENSE-2.0
1:0b6bf7e:  *
1:0b6bf7e:  * Unless required by applicable law or agreed to in writing, software
1:0b6bf7e:  * distributed under the License is distributed on an "AS IS" BASIS,
1:0b6bf7e:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:0b6bf7e:  * See the License for the specific language governing permissions and
1:0b6bf7e:  * limitations under the License.
1:0b6bf7e:  */
1:0b6bf7e: package org.apache.activemq.bugs;
2:0b6bf7e: 
1:0b6bf7e: import static org.junit.Assert.*;
1:0b6bf7e: 
1:0b6bf7e: import java.net.URI;
1:0b6bf7e: import java.util.Hashtable;
1:0b6bf7e: import java.util.Iterator;
1:0b6bf7e: import java.util.Map;
1:0b6bf7e: import java.util.concurrent.CountDownLatch;
1:0b6bf7e: import java.util.concurrent.atomic.AtomicInteger;
1:0b6bf7e: 
1:0b6bf7e: import javax.jms.DeliveryMode;
1:0b6bf7e: import javax.jms.Destination;
1:0b6bf7e: import javax.jms.ExceptionListener;
1:0b6bf7e: import javax.jms.JMSException;
1:0b6bf7e: import javax.jms.Message;
1:0b6bf7e: import javax.jms.MessageConsumer;
1:0b6bf7e: import javax.jms.MessageListener;
1:0b6bf7e: import javax.jms.Session;
1:0b6bf7e: import javax.jms.TextMessage;
1:0b6bf7e: 
1:0b6bf7e: import org.apache.activemq.ActiveMQConnection;
1:0b6bf7e: import org.apache.activemq.ActiveMQConnectionFactory;
1:0b6bf7e: import org.apache.activemq.ActiveMQMessageProducer;
1:0b6bf7e: import org.apache.activemq.ActiveMQSession;
1:0b6bf7e: import org.apache.activemq.RedeliveryPolicy;
1:0b6bf7e: import org.apache.activemq.broker.BrokerFactory;
1:0b6bf7e: import org.apache.activemq.broker.BrokerService;
1:4ab5e91: import org.apache.activemq.util.Wait;
1:4ab5e91: import org.apache.activemq.util.Wait.Condition;
1:0b6bf7e: import org.junit.After;
1:0b6bf7e: import org.junit.Before;
1:0b6bf7e: import org.junit.Test;
1:0b6bf7e: import org.slf4j.Logger;
1:0b6bf7e: import org.slf4j.LoggerFactory;
1:0b6bf7e: 
1:0b6bf7e: /**
1:0b6bf7e:  * Test validates that the AMQ consumer blocks on redelivery of a message,
1:0b6bf7e:  * through all redeliveries, until the message is either successfully consumed
1:0b6bf7e:  * or sent to the DLQ.
1:0b6bf7e:  */
1:0b6bf7e: public class AMQ1853Test {
1:0b6bf7e:     private static BrokerService broker;
1:0b6bf7e: 
1:0b6bf7e:     private static final Logger LOG = LoggerFactory.getLogger(AMQ1853Test.class);
1:0b6bf7e:     static final String jmsConnectionURI = "failover:(vm://localhost)";
1:0b6bf7e: 
1:0b6bf7e:     // Virtual Topic that the test publishes 10 messages to
1:0b6bf7e:     private static final String queueFail = "Queue.BlockingConsumer.QueueFail";
1:0b6bf7e: 
1:0b6bf7e:     // Number of messages
1:0b6bf7e: 
1:0b6bf7e:     private final int producerMessages = 5;
1:0b6bf7e:     private final int totalNumberMessages = producerMessages * 2;
1:0b6bf7e:     private final int maxRedeliveries = 2;
1:0b6bf7e:     private final int redeliveryDelay = 1000;
1:0b6bf7e: 
1:0b6bf7e:     private Map<String, AtomicInteger> messageList = null;
1:0b6bf7e: 
1:0b6bf7e:     @Before
1:0b6bf7e:     public void setUp() throws Exception {
1:0b6bf7e:         broker = BrokerFactory.createBroker(new URI("broker:()/localhost?persistent=false"));
1:0b6bf7e:         broker.setUseJmx(false);
1:4ab5e91:         broker.setDeleteAllMessagesOnStartup(true);
1:0b6bf7e:         broker.start();
1:0b6bf7e:         broker.waitUntilStarted();
1:0b6bf7e:     }
1:0b6bf7e: 
1:0b6bf7e:     @After
1:0b6bf7e:     public void tearDown() throws Exception {
1:0b6bf7e:         if (broker != null) {
1:0b6bf7e:             broker.stop();
1:0b6bf7e:             broker.waitUntilStopped();
1:0b6bf7e:             broker = null;
1:0b6bf7e:         }
1:0b6bf7e:     }
1:0b6bf7e: 
1:0b6bf7e:     @Test
1:0b6bf7e:     public void testConsumerMessagesAreNotOrdered() throws Exception {
1:0b6bf7e: 
1:0b6bf7e:         TestConsumer consumerAllFail = null;
1:0b6bf7e:         messageList = new Hashtable<String, AtomicInteger>();
1:0b6bf7e: 
1:0b6bf7e:         try {
1:0b6bf7e: 
1:0b6bf7e:             // The first 2 consumers will rollback, ultimately causing messages to land on the DLQ
1:0b6bf7e: 
1:0b6bf7e:             TestProducer producerAllFail = new TestProducer(queueFail);
1:0b6bf7e:             thread(producerAllFail, false);
1:0b6bf7e: 
1:0b6bf7e:             consumerAllFail = new TestConsumer(queueFail, true);
1:0b6bf7e:             thread(consumerAllFail, false);
1:0b6bf7e: 
1:0b6bf7e:             // Give the consumers a second to start
1:0b6bf7e:             Thread.sleep(1000);
1:0b6bf7e: 
1:0b6bf7e:             thread(producerAllFail, false);
1:0b6bf7e: 
1:0b6bf7e:             // Give the consumers a second to start
1:0b6bf7e:             Thread.sleep(1000);
1:0b6bf7e: 
1:0b6bf7e:             producerAllFail.getLatch().await();
1:0b6bf7e: 
1:0b6bf7e:             LOG.info("producer successful, count = " + producerAllFail.getLatch().getCount());
1:0b6bf7e:             LOG.info("final message list size =  " + messageList.size());
1:0b6bf7e: 
1:4ab5e91:             assertTrue("message list size =  " + messageList.size() + " exptected:" + totalNumberMessages,
1:4ab5e91:                 Wait.waitFor(new Condition() {
1:4ab5e91:                     @Override
1:4ab5e91:                     public boolean isSatisified() throws Exception {
1:4ab5e91:                         return totalNumberMessages == messageList.size();
1:4ab5e91:                     }
1:4ab5e91:                 }));
1:4ab5e91: 
1:0b6bf7e:             consumerAllFail.getLatch().await();
1:0b6bf7e: 
1:0b6bf7e:             LOG.info("consumerAllFail successful, count = " + consumerAllFail.getLatch().getCount());
1:0b6bf7e: 
1:0b6bf7e:             Iterator<String> keys = messageList.keySet().iterator();
1:0b6bf7e:             for (AtomicInteger counter : messageList.values()) {
1:0b6bf7e:                 String message = keys.next();
1:0b6bf7e:                 LOG.info("final count for message " + message + " counter =  " + counter.get());
1:4ab5e91:                 assertTrue("for message " + message + " counter =  " + counter.get(), counter.get() == maxRedeliveries + 1);
1:0b6bf7e:             }
1:0b6bf7e: 
1:0b6bf7e:             assertFalse(consumerAllFail.messageReceiptIsOrdered());
1:0b6bf7e:         } finally {
1:0b6bf7e:             if (consumerAllFail != null) {
1:0b6bf7e:                 consumerAllFail.setStop(true);
1:0b6bf7e:             }
1:0b6bf7e:         }
1:0b6bf7e:     }
1:0b6bf7e: 
1:0b6bf7e:     private static Thread thread(Runnable runnable, boolean daemon) {
1:0b6bf7e:         Thread brokerThread = new Thread(runnable);
1:0b6bf7e:         brokerThread.setDaemon(daemon);
1:0b6bf7e:         brokerThread.start();
1:0b6bf7e:         return brokerThread;
1:0b6bf7e:     }
1:0b6bf7e: 
1:0b6bf7e:     private class TestProducer implements Runnable {
1:0b6bf7e: 
1:0b6bf7e:         private CountDownLatch latch = null;
1:0b6bf7e:         private String destinationName = null;
1:0b6bf7e: 
1:0b6bf7e:         public TestProducer(String destinationName) {
1:0b6bf7e:             this.destinationName = destinationName;
1:0b6bf7e:             // We run the producer 2 times
1:0b6bf7e:             latch = new CountDownLatch(totalNumberMessages);
1:0b6bf7e:         }
1:0b6bf7e: 
1:0b6bf7e:         public CountDownLatch getLatch() {
1:0b6bf7e:             return latch;
1:0b6bf7e:         }
1:0b6bf7e: 
1:0b6bf7e:         public void run() {
1:0b6bf7e: 
1:0b6bf7e:             ActiveMQConnectionFactory connectionFactory = null;
1:0b6bf7e:             ActiveMQConnection connection = null;
1:0b6bf7e:             ActiveMQSession session = null;
1:0b6bf7e:             Destination destination = null;
1:0b6bf7e: 
1:0b6bf7e:             try {
1:0b6bf7e:                 LOG.info("Started TestProducer for destination (" + destinationName + ")");
1:0b6bf7e: 
1:0b6bf7e:                 connectionFactory = new ActiveMQConnectionFactory(jmsConnectionURI);
1:0b6bf7e:                 connection = (ActiveMQConnection) connectionFactory.createConnection();
1:0b6bf7e:                 connection.setCopyMessageOnSend(false);
1:0b6bf7e:                 connection.start();
1:0b6bf7e:                 session = (ActiveMQSession) connection.createSession(false, Session.AUTO_ACKNOWLEDGE);
1:0b6bf7e: 
1:0b6bf7e:                 destination = session.createQueue(this.destinationName);
1:0b6bf7e: 
1:0b6bf7e:                 // Create a MessageProducer from the Session to the Topic or Queue
1:0b6bf7e:                 ActiveMQMessageProducer producer = (ActiveMQMessageProducer) session.createProducer(destination);
1:0b6bf7e:                 producer.setDeliveryMode(DeliveryMode.NON_PERSISTENT);
1:0b6bf7e: 
1:0b6bf7e:                 for (int i = 0; i < (producerMessages); i++) {
1:0b6bf7e:                     TextMessage message = (TextMessage) session.createTextMessage();
1:0b6bf7e:                     message.setLongProperty("TestTime", (System.currentTimeMillis()));
1:0b6bf7e:                     try {
1:0b6bf7e:                         producer.send(message);
1:0b6bf7e:                         LOG.info("Producer (" + destinationName + ")\n" + message.getJMSMessageID() + " = sent messageId\n");
1:0b6bf7e: 
1:0b6bf7e:                         latch.countDown();
1:0b6bf7e:                         LOG.info(" Latch count  " + latch.getCount());
1:0b6bf7e:                         LOG.info("Producer message list size = " + messageList.keySet().size());
1:0b6bf7e:                         messageList.put(message.getJMSMessageID(), new AtomicInteger(0));
1:0b6bf7e:                         LOG.info("Producer message list size = " + messageList.keySet().size());
1:0b6bf7e: 
1:0b6bf7e:                     } catch (Exception deeperException) {
1:0b6bf7e:                         LOG.info("Producer for destination (" + destinationName + ") Caught: " + deeperException);
1:0b6bf7e:                     }
1:0b6bf7e: 
1:0b6bf7e:                     Thread.sleep(1000);
1:0b6bf7e:                 }
1:0b6bf7e: 
1:0b6bf7e:                 LOG.info("Finished TestProducer for destination (" + destinationName + ")");
1:0b6bf7e: 
1:0b6bf7e:             } catch (Exception e) {
1:0b6bf7e:                 LOG.error("Terminating TestProducer(" + destinationName + ")Caught: " + e);
1:0b6bf7e:             } finally {
1:0b6bf7e:                 try {
1:0b6bf7e:                     if (session != null) {
1:0b6bf7e:                         session.close();
1:0b6bf7e:                     }
1:0b6bf7e:                     if (connection != null) {
1:0b6bf7e:                         connection.close();
1:0b6bf7e:                     }
1:0b6bf7e:                 } catch (Exception e) {
1:0b6bf7e:                     LOG.error("Closing connection/session (" + destinationName + ")Caught: " + e);
1:0b6bf7e:                 }
1:0b6bf7e:             }
1:0b6bf7e:         }
1:0b6bf7e:     }
1:0b6bf7e: 
1:0b6bf7e:     private class TestConsumer implements Runnable, ExceptionListener, MessageListener {
1:0b6bf7e: 
1:0b6bf7e:         private CountDownLatch latch = null;
1:0b6bf7e:         private int receivedMessageCounter = 0;
1:0b6bf7e:         private boolean bFakeFail = false;
1:0b6bf7e:         String destinationName = null;
1:0b6bf7e:         boolean bMessageReceiptIsOrdered = true;
1:0b6bf7e:         boolean bStop = false;
1:0b6bf7e:         String previousMessageId = null;
1:0b6bf7e: 
1:0b6bf7e:         private ActiveMQConnectionFactory connectionFactory = null;
1:0b6bf7e:         private ActiveMQConnection connection = null;
1:0b6bf7e:         private Session session = null;
1:0b6bf7e:         private MessageConsumer consumer = null;
1:0b6bf7e: 
1:0b6bf7e:         public TestConsumer(String destinationName, boolean bFakeFail) {
1:0b6bf7e:             this.bFakeFail = bFakeFail;
1:0b6bf7e:             latch = new CountDownLatch(totalNumberMessages * (this.bFakeFail ? (maxRedeliveries + 1) : 1));
1:0b6bf7e:             this.destinationName = destinationName;
1:0b6bf7e:         }
1:0b6bf7e: 
1:0b6bf7e:         public CountDownLatch getLatch() {
1:0b6bf7e:             return latch;
1:0b6bf7e:         }
1:0b6bf7e: 
1:0b6bf7e:         public boolean messageReceiptIsOrdered() {
1:0b6bf7e:             return bMessageReceiptIsOrdered;
1:0b6bf7e:         }
1:0b6bf7e: 
1:0b6bf7e:         public void run() {
1:0b6bf7e: 
1:0b6bf7e:             try {
1:0b6bf7e:                 LOG.info("Started TestConsumer for destination (" + destinationName + ")");
1:0b6bf7e: 
1:0b6bf7e:                 connectionFactory = new ActiveMQConnectionFactory(jmsConnectionURI);
1:0b6bf7e:                 connection = (ActiveMQConnection) connectionFactory.createConnection();
1:0b6bf7e:                 connection.setNonBlockingRedelivery(true);
1:0b6bf7e:                 session = connection.createSession(true, Session.SESSION_TRANSACTED);
1:0b6bf7e: 
1:0b6bf7e:                 RedeliveryPolicy policy = connection.getRedeliveryPolicy();
1:0b6bf7e:                 policy.setInitialRedeliveryDelay(redeliveryDelay);
1:0b6bf7e:                 policy.setBackOffMultiplier(-1);
1:0b6bf7e:                 policy.setRedeliveryDelay(redeliveryDelay);
1:0b6bf7e:                 policy.setMaximumRedeliveryDelay(-1);
1:0b6bf7e:                 policy.setUseExponentialBackOff(false);
1:0b6bf7e:                 policy.setMaximumRedeliveries(maxRedeliveries);
1:0b6bf7e: 
1:0b6bf7e:                 connection.setExceptionListener(this);
1:0b6bf7e:                 Destination destination = session.createQueue(destinationName);
1:0b6bf7e:                 consumer = session.createConsumer(destination);
1:0b6bf7e:                 consumer.setMessageListener(this);
1:0b6bf7e: 
1:0b6bf7e:                 connection.start();
1:0b6bf7e: 
1:0b6bf7e:                 while (!bStop) {
1:0b6bf7e:                     Thread.sleep(100);
1:0b6bf7e:                 }
1:0b6bf7e: 
1:0b6bf7e:                 LOG.info("Finished TestConsumer for destination name (" + destinationName + ") remaining " + this.latch.getCount()
1:0b6bf7e:                         + " messages " + this.toString());
1:0b6bf7e: 
1:0b6bf7e:             } catch (Exception e) {
1:0b6bf7e:                 LOG.error("Consumer (" + destinationName + ") Caught: " + e);
1:0b6bf7e:             } finally {
1:0b6bf7e:                 try {
1:0b6bf7e:                     if (consumer != null) {
1:0b6bf7e:                         consumer.close();
1:0b6bf7e:                     }
1:0b6bf7e:                     if (session != null) {
1:0b6bf7e:                         session.close();
1:0b6bf7e:                     }
1:0b6bf7e:                     if (connection != null) {
1:0b6bf7e:                         connection.close();
1:0b6bf7e:                     }
1:0b6bf7e:                 } catch (Exception e) {
1:0b6bf7e:                     LOG.error("Closing connection/session (" + destinationName + ")Caught: " + e);
1:0b6bf7e:                 }
1:0b6bf7e:             }
1:0b6bf7e:         }
1:0b6bf7e: 
1:0b6bf7e:         public synchronized void onException(JMSException ex) {
1:0b6bf7e:             LOG.error("Consumer for destination, (" + destinationName + "), JMS Exception occured.  Shutting down client.");
1:0b6bf7e:         }
1:0b6bf7e: 
1:0b6bf7e:         public synchronized void setStop(boolean bStop) {
1:0b6bf7e:             this.bStop = bStop;
1:0b6bf7e:         }
1:0b6bf7e: 
1:0b6bf7e:         public synchronized void onMessage(Message message) {
1:0b6bf7e:             receivedMessageCounter++;
1:0b6bf7e:             latch.countDown();
1:0b6bf7e: 
1:0b6bf7e:             LOG.info("Consumer for destination (" + destinationName + ") latch countdown: " + latch.getCount() +
1:0b6bf7e:                      " :: Number messages received " + this.receivedMessageCounter);
1:0b6bf7e: 
1:0b6bf7e:             try {
1:0b6bf7e: 
1:0b6bf7e:                 if (receivedMessageCounter % (maxRedeliveries + 1) == 1) {
1:0b6bf7e:                     previousMessageId = message.getJMSMessageID();
1:0b6bf7e:                 }
1:0b6bf7e: 
1:0b6bf7e:                 if (bMessageReceiptIsOrdered) {
1:0b6bf7e:                     bMessageReceiptIsOrdered = previousMessageId.trim().equals(message.getJMSMessageID());
1:0b6bf7e:                 }
1:0b6bf7e: 
1:ddb15af:                 final String jmsMessageId = message.getJMSMessageID();
1:ddb15af:                 assertTrue("Did not find expected ", Wait.waitFor(new Wait.Condition() {
1:ddb15af:                     @Override
1:ddb15af:                     public boolean isSatisified() throws Exception {
1:ddb15af:                         return messageList.containsKey(jmsMessageId);
1:ddb15af:                     }
1:ddb15af:                 }));
1:ddb15af: 
1:ddb15af:                 AtomicInteger counter = messageList.get(jmsMessageId);
1:0b6bf7e:                 counter.incrementAndGet();
1:0b6bf7e: 
1:0b6bf7e:                 LOG.info("Consumer for destination (" + destinationName + ")\n" + message.getJMSMessageID() + " = currentMessageId\n"
1:0b6bf7e:                         + previousMessageId + " = previousMessageId\n" + bMessageReceiptIsOrdered + "= bMessageReceiptIsOrdered\n"
1:0b6bf7e:                         + ">>LATENCY " + (System.currentTimeMillis() - message.getLongProperty("TestTime")) + "\n" + "message counter = "
1:0b6bf7e:                         + counter.get());
1:0b6bf7e: 
1:0b6bf7e:                 if (!bFakeFail) {
1:0b6bf7e:                     LOG.debug("Consumer on destination " + destinationName + " committing JMS Session for message: " + message.toString());
1:0b6bf7e:                     session.commit();
1:0b6bf7e:                 } else {
1:0b6bf7e:                     LOG.debug("Consumer on destination " + destinationName + " rolling back JMS Session for message: " + message.toString());
1:0b6bf7e:                     session.rollback(); // rolls back all the consumed messages on the session to
1:0b6bf7e:                 }
1:0b6bf7e: 
1:ddb15af:             } catch (Exception ex) {
1:0b6bf7e:                 ex.printStackTrace();
1:0b6bf7e:                 LOG.error("Error reading JMS Message from destination " + destinationName + ".");
1:0b6bf7e:             }
1:0b6bf7e:         }
1:0b6bf7e:     }
1:0b6bf7e: }
============================================================================
author:Timothy A. Bish
-------------------------------------------------------------------------------
commit:ef24cc9
commit:ddb15af
/////////////////////////////////////////////////////////////////////////
1:                 final String jmsMessageId = message.getJMSMessageID();
1:                 assertTrue("Did not find expected ", Wait.waitFor(new Wait.Condition() {
1:                     @Override
1:                     public boolean isSatisified() throws Exception {
1:                         return messageList.containsKey(jmsMessageId);
1:                     }
1:                 }));
1: 
1:                 AtomicInteger counter = messageList.get(jmsMessageId);
/////////////////////////////////////////////////////////////////////////
1:             } catch (Exception ex) {
commit:4ab5e91
/////////////////////////////////////////////////////////////////////////
1: import org.apache.activemq.util.Wait;
1: import org.apache.activemq.util.Wait.Condition;
/////////////////////////////////////////////////////////////////////////
1:         broker.setDeleteAllMessagesOnStartup(true);
/////////////////////////////////////////////////////////////////////////
1:             assertTrue("message list size =  " + messageList.size() + " exptected:" + totalNumberMessages,
1:                 Wait.waitFor(new Condition() {
1:                     @Override
1:                     public boolean isSatisified() throws Exception {
1:                         return totalNumberMessages == messageList.size();
1:                     }
1:                 }));
1: 
/////////////////////////////////////////////////////////////////////////
1:                 assertTrue("for message " + message + " counter =  " + counter.get(), counter.get() == maxRedeliveries + 1);
commit:0b6bf7e
/////////////////////////////////////////////////////////////////////////
1: /**
1:  * Licensed to the Apache Software Foundation (ASF) under one or more
1:  * contributor license agreements.  See the NOTICE file distributed with
1:  * this work for additional information regarding copyright ownership.
1:  * The ASF licenses this file to You under the Apache License, Version 2.0
1:  * (the "License"); you may not use this file except in compliance with
1:  * the License.  You may obtain a copy of the License at
1:  *
1:  *      http://www.apache.org/licenses/LICENSE-2.0
1:  *
1:  * Unless required by applicable law or agreed to in writing, software
1:  * distributed under the License is distributed on an "AS IS" BASIS,
1:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:  * See the License for the specific language governing permissions and
1:  * limitations under the License.
1:  */
1: package org.apache.activemq.bugs;
1: 
1: import static org.junit.Assert.*;
1: 
1: import java.net.URI;
1: import java.util.Hashtable;
1: import java.util.Iterator;
1: import java.util.Map;
1: import java.util.concurrent.CountDownLatch;
1: import java.util.concurrent.atomic.AtomicInteger;
1: 
1: import javax.jms.DeliveryMode;
1: import javax.jms.Destination;
1: import javax.jms.ExceptionListener;
1: import javax.jms.JMSException;
1: import javax.jms.Message;
1: import javax.jms.MessageConsumer;
1: import javax.jms.MessageListener;
1: import javax.jms.Session;
1: import javax.jms.TextMessage;
1: 
1: import org.apache.activemq.ActiveMQConnection;
1: import org.apache.activemq.ActiveMQConnectionFactory;
1: import org.apache.activemq.ActiveMQMessageProducer;
1: import org.apache.activemq.ActiveMQSession;
1: import org.apache.activemq.RedeliveryPolicy;
1: import org.apache.activemq.broker.BrokerFactory;
1: import org.apache.activemq.broker.BrokerService;
1: import org.junit.After;
1: import org.junit.Before;
1: import org.junit.Test;
1: import org.slf4j.Logger;
1: import org.slf4j.LoggerFactory;
1: 
1: /**
1:  * Test validates that the AMQ consumer blocks on redelivery of a message,
1:  * through all redeliveries, until the message is either successfully consumed
1:  * or sent to the DLQ.
1:  */
1: public class AMQ1853Test {
1:     private static BrokerService broker;
1: 
1:     private static final Logger LOG = LoggerFactory.getLogger(AMQ1853Test.class);
1:     static final String jmsConnectionURI = "failover:(vm://localhost)";
1: 
1:     // Virtual Topic that the test publishes 10 messages to
1:     private static final String queueFail = "Queue.BlockingConsumer.QueueFail";
1: 
1:     // Number of messages
1: 
1:     private final int producerMessages = 5;
1:     private final int totalNumberMessages = producerMessages * 2;
1:     private final int maxRedeliveries = 2;
1:     private final int redeliveryDelay = 1000;
1: 
1:     private Map<String, AtomicInteger> messageList = null;
1: 
1:     @Before
1:     public void setUp() throws Exception {
1:         broker = BrokerFactory.createBroker(new URI("broker:()/localhost?persistent=false"));
1:         broker.setUseJmx(false);
1:         broker.start();
1:         broker.waitUntilStarted();
1:     }
1: 
1:     @After
1:     public void tearDown() throws Exception {
1:         if (broker != null) {
1:             broker.stop();
1:             broker.waitUntilStopped();
1:             broker = null;
1:         }
1:     }
1: 
1:     @Test
1:     public void testConsumerMessagesAreNotOrdered() throws Exception {
1: 
1:         TestConsumer consumerAllFail = null;
1:         messageList = new Hashtable<String, AtomicInteger>();
1: 
1:         try {
1: 
1:             // The first 2 consumers will rollback, ultimately causing messages to land on the DLQ
1: 
1:             TestProducer producerAllFail = new TestProducer(queueFail);
1:             thread(producerAllFail, false);
1: 
1:             consumerAllFail = new TestConsumer(queueFail, true);
1:             thread(consumerAllFail, false);
1: 
1:             // Give the consumers a second to start
1:             Thread.sleep(1000);
1: 
1:             thread(producerAllFail, false);
1: 
1:             // Give the consumers a second to start
1:             Thread.sleep(1000);
1: 
1:             producerAllFail.getLatch().await();
1: 
1:             LOG.info("producer successful, count = " + producerAllFail.getLatch().getCount());
1: 
0:             assertTrue("message list size =  " + messageList.size(), totalNumberMessages == messageList.size());
1:             LOG.info("final message list size =  " + messageList.size());
1: 
1:             consumerAllFail.getLatch().await();
1: 
1:             LOG.info("consumerAllFail successful, count = " + consumerAllFail.getLatch().getCount());
1: 
1:             Iterator<String> keys = messageList.keySet().iterator();
1:             for (AtomicInteger counter : messageList.values()) {
1:                 String message = keys.next();
0:                 assertTrue("for message " + message + " counter =  " + counter.get(), counter.get() == maxRedeliveries + 1);
1:                 LOG.info("final count for message " + message + " counter =  " + counter.get());
1:             }
1: 
1:             assertFalse(consumerAllFail.messageReceiptIsOrdered());
1:         } finally {
1:             if (consumerAllFail != null) {
1:                 consumerAllFail.setStop(true);
1:             }
1:         }
1:     }
1: 
1:     private static Thread thread(Runnable runnable, boolean daemon) {
1:         Thread brokerThread = new Thread(runnable);
1:         brokerThread.setDaemon(daemon);
1:         brokerThread.start();
1:         return brokerThread;
1:     }
1: 
1:     private class TestProducer implements Runnable {
1: 
1:         private CountDownLatch latch = null;
1:         private String destinationName = null;
1: 
1:         public TestProducer(String destinationName) {
1:             this.destinationName = destinationName;
1:             // We run the producer 2 times
1:             latch = new CountDownLatch(totalNumberMessages);
1:         }
1: 
1:         public CountDownLatch getLatch() {
1:             return latch;
1:         }
1: 
1:         public void run() {
1: 
1:             ActiveMQConnectionFactory connectionFactory = null;
1:             ActiveMQConnection connection = null;
1:             ActiveMQSession session = null;
1:             Destination destination = null;
1: 
1:             try {
1:                 LOG.info("Started TestProducer for destination (" + destinationName + ")");
1: 
1:                 connectionFactory = new ActiveMQConnectionFactory(jmsConnectionURI);
1:                 connection = (ActiveMQConnection) connectionFactory.createConnection();
1:                 connection.setCopyMessageOnSend(false);
1:                 connection.start();
1:                 session = (ActiveMQSession) connection.createSession(false, Session.AUTO_ACKNOWLEDGE);
1: 
1:                 destination = session.createQueue(this.destinationName);
1: 
1:                 // Create a MessageProducer from the Session to the Topic or Queue
1:                 ActiveMQMessageProducer producer = (ActiveMQMessageProducer) session.createProducer(destination);
1:                 producer.setDeliveryMode(DeliveryMode.NON_PERSISTENT);
1: 
1:                 for (int i = 0; i < (producerMessages); i++) {
1:                     TextMessage message = (TextMessage) session.createTextMessage();
1:                     message.setLongProperty("TestTime", (System.currentTimeMillis()));
1:                     try {
1:                         producer.send(message);
1:                         LOG.info("Producer (" + destinationName + ")\n" + message.getJMSMessageID() + " = sent messageId\n");
1: 
1:                         latch.countDown();
1:                         LOG.info(" Latch count  " + latch.getCount());
1:                         LOG.info("Producer message list size = " + messageList.keySet().size());
1:                         messageList.put(message.getJMSMessageID(), new AtomicInteger(0));
1:                         LOG.info("Producer message list size = " + messageList.keySet().size());
1: 
1:                     } catch (Exception deeperException) {
1:                         LOG.info("Producer for destination (" + destinationName + ") Caught: " + deeperException);
1:                     }
1: 
1:                     Thread.sleep(1000);
1:                 }
1: 
1:                 LOG.info("Finished TestProducer for destination (" + destinationName + ")");
1: 
1:             } catch (Exception e) {
1:                 LOG.error("Terminating TestProducer(" + destinationName + ")Caught: " + e);
1:             } finally {
1:                 try {
1:                     if (session != null) {
1:                         session.close();
1:                     }
1:                     if (connection != null) {
1:                         connection.close();
1:                     }
1:                 } catch (Exception e) {
1:                     LOG.error("Closing connection/session (" + destinationName + ")Caught: " + e);
1:                 }
1:             }
1:         }
1:     }
1: 
1:     private class TestConsumer implements Runnable, ExceptionListener, MessageListener {
1: 
1:         private CountDownLatch latch = null;
1:         private int receivedMessageCounter = 0;
1:         private boolean bFakeFail = false;
1:         String destinationName = null;
1:         boolean bMessageReceiptIsOrdered = true;
1:         boolean bStop = false;
1:         String previousMessageId = null;
1: 
1:         private ActiveMQConnectionFactory connectionFactory = null;
1:         private ActiveMQConnection connection = null;
1:         private Session session = null;
1:         private MessageConsumer consumer = null;
1: 
1:         public TestConsumer(String destinationName, boolean bFakeFail) {
1:             this.bFakeFail = bFakeFail;
1:             latch = new CountDownLatch(totalNumberMessages * (this.bFakeFail ? (maxRedeliveries + 1) : 1));
1:             this.destinationName = destinationName;
1:         }
1: 
1:         public CountDownLatch getLatch() {
1:             return latch;
1:         }
1: 
1:         public boolean messageReceiptIsOrdered() {
1:             return bMessageReceiptIsOrdered;
1:         }
1: 
1:         public void run() {
1: 
1:             try {
1:                 LOG.info("Started TestConsumer for destination (" + destinationName + ")");
1: 
1:                 connectionFactory = new ActiveMQConnectionFactory(jmsConnectionURI);
1:                 connection = (ActiveMQConnection) connectionFactory.createConnection();
1:                 connection.setNonBlockingRedelivery(true);
1:                 session = connection.createSession(true, Session.SESSION_TRANSACTED);
1: 
1:                 RedeliveryPolicy policy = connection.getRedeliveryPolicy();
1:                 policy.setInitialRedeliveryDelay(redeliveryDelay);
1:                 policy.setBackOffMultiplier(-1);
1:                 policy.setRedeliveryDelay(redeliveryDelay);
1:                 policy.setMaximumRedeliveryDelay(-1);
1:                 policy.setUseExponentialBackOff(false);
1:                 policy.setMaximumRedeliveries(maxRedeliveries);
1: 
1:                 connection.setExceptionListener(this);
1:                 Destination destination = session.createQueue(destinationName);
1:                 consumer = session.createConsumer(destination);
1:                 consumer.setMessageListener(this);
1: 
1:                 connection.start();
1: 
1:                 while (!bStop) {
1:                     Thread.sleep(100);
1:                 }
1: 
1:                 LOG.info("Finished TestConsumer for destination name (" + destinationName + ") remaining " + this.latch.getCount()
1:                         + " messages " + this.toString());
1: 
1:             } catch (Exception e) {
1:                 LOG.error("Consumer (" + destinationName + ") Caught: " + e);
1:             } finally {
1:                 try {
1:                     if (consumer != null) {
1:                         consumer.close();
1:                     }
1:                     if (session != null) {
1:                         session.close();
1:                     }
1:                     if (connection != null) {
1:                         connection.close();
1:                     }
1:                 } catch (Exception e) {
1:                     LOG.error("Closing connection/session (" + destinationName + ")Caught: " + e);
1:                 }
1:             }
1:         }
1: 
1:         public synchronized void onException(JMSException ex) {
1:             LOG.error("Consumer for destination, (" + destinationName + "), JMS Exception occured.  Shutting down client.");
1:         }
1: 
1:         public synchronized void setStop(boolean bStop) {
1:             this.bStop = bStop;
1:         }
1: 
1:         public synchronized void onMessage(Message message) {
1:             receivedMessageCounter++;
1:             latch.countDown();
1: 
1:             LOG.info("Consumer for destination (" + destinationName + ") latch countdown: " + latch.getCount() +
1:                      " :: Number messages received " + this.receivedMessageCounter);
1: 
1:             try {
1: 
1:                 if (receivedMessageCounter % (maxRedeliveries + 1) == 1) {
1:                     previousMessageId = message.getJMSMessageID();
1:                 }
1: 
1:                 if (bMessageReceiptIsOrdered) {
1:                     bMessageReceiptIsOrdered = previousMessageId.trim().equals(message.getJMSMessageID());
1:                 }
1: 
0:                 AtomicInteger counter = messageList.get(message.getJMSMessageID());
1:                 counter.incrementAndGet();
1: 
1:                 LOG.info("Consumer for destination (" + destinationName + ")\n" + message.getJMSMessageID() + " = currentMessageId\n"
1:                         + previousMessageId + " = previousMessageId\n" + bMessageReceiptIsOrdered + "= bMessageReceiptIsOrdered\n"
1:                         + ">>LATENCY " + (System.currentTimeMillis() - message.getLongProperty("TestTime")) + "\n" + "message counter = "
1:                         + counter.get());
1: 
1:                 if (!bFakeFail) {
1:                     LOG.debug("Consumer on destination " + destinationName + " committing JMS Session for message: " + message.toString());
1:                     session.commit();
1:                 } else {
1:                     LOG.debug("Consumer on destination " + destinationName + " rolling back JMS Session for message: " + message.toString());
1:                     session.rollback(); // rolls back all the consumed messages on the session to
1:                 }
1: 
0:             } catch (JMSException ex) {
1:                 ex.printStackTrace();
1:                 LOG.error("Error reading JMS Message from destination " + destinationName + ".");
1:             }
1:         }
1:     }
1: }
============================================================================