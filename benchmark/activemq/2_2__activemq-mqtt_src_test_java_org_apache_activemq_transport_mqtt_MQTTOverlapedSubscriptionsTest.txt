1:455f1ca: /**
1:455f1ca:  * Licensed to the Apache Software Foundation (ASF) under one or more
1:455f1ca:  * contributor license agreements.  See the NOTICE file distributed with
1:455f1ca:  * this work for additional information regarding copyright ownership.
1:455f1ca:  * The ASF licenses this file to You under the Apache License, Version 2.0
1:455f1ca:  * (the "License"); you may not use this file except in compliance with
1:455f1ca:  * the License.  You may obtain a copy of the License at
1:455f1ca:  *
1:455f1ca:  *      http://www.apache.org/licenses/LICENSE-2.0
1:455f1ca:  *
1:455f1ca:  * Unless required by applicable law or agreed to in writing, software
1:455f1ca:  * distributed under the License is distributed on an "AS IS" BASIS,
1:455f1ca:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:455f1ca:  * See the License for the specific language governing permissions and
1:455f1ca:  * limitations under the License.
1:455f1ca:  */
1:455f1ca: package org.apache.activemq.transport.mqtt;
1:455f1ca: 
1:455f1ca: import java.net.URI;
1:455f1ca: import java.net.URISyntaxException;
1:455f1ca: import java.util.concurrent.TimeUnit;
1:455f1ca: 
1:455f1ca: import org.apache.activemq.broker.BrokerService;
1:455f1ca: import org.apache.activemq.broker.TransportConnector;
1:455f1ca: import org.fusesource.mqtt.client.BlockingConnection;
1:455f1ca: import org.fusesource.mqtt.client.MQTT;
1:455f1ca: import org.fusesource.mqtt.client.QoS;
1:455f1ca: import org.fusesource.mqtt.client.Topic;
1:455f1ca: import org.junit.After;
1:455f1ca: import org.junit.Before;
1:455f1ca: import org.junit.Test;
1:455f1ca: 
1:455f1ca: public class MQTTOverlapedSubscriptionsTest {
1:455f1ca: 
1:455f1ca:     private BrokerService brokerService;
1:455f1ca:     private String mqttClientUrl;
1:455f1ca: 
1:455f1ca:     @Before
1:455f1ca:     public void setup() throws Exception {
1:455f1ca:         initializeBroker(true);
1:455f1ca:     }
1:455f1ca: 
1:455f1ca:     @After
1:455f1ca:     public void shutdown() throws Exception {
1:455f1ca:         brokerService.stop();
1:455f1ca:         brokerService.waitUntilStopped();
1:455f1ca:     }
1:455f1ca: 
1:455f1ca:     protected void initializeBroker(boolean deleteAllMessagesOnStart) throws Exception {
1:455f1ca: 
1:455f1ca:         brokerService = new BrokerService();
1:455f1ca:         brokerService.setPersistent(true);
1:455f1ca:         brokerService.setDeleteAllMessagesOnStartup(deleteAllMessagesOnStart);
1:455f1ca:         TransportConnector connector = new TransportConnector();
1:455f1ca:         connector.setUri(new URI("mqtt://localhost:0"));
1:455f1ca:         connector.setName("mqtt");
1:455f1ca:         brokerService.addConnector(connector);
1:455f1ca:         brokerService.start();
1:455f1ca:         brokerService.waitUntilStarted();
1:455f1ca: 
1:455f1ca:         mqttClientUrl = connector.getPublishableConnectString().replace("mqtt", "tcp");
1:455f1ca:     }
1:455f1ca: 
1:455f1ca:     @Test
1:455f1ca:     public void testMqttResubscribe() throws Exception {
1:455f1ca:         // inactive durable consumer on test/1 will be left on the broker after restart
1:455f1ca:         doTest("test/1");
1:455f1ca: 
1:455f1ca:         shutdown();
1:455f1ca:         initializeBroker(false);
1:455f1ca: 
1:455f1ca:         // new consumer on test/# will match all messages sent to the inactive sub
1:455f1ca:         doTest("test/#");
1:455f1ca:     }
1:455f1ca: 
1:455f1ca:     private BlockingConnection getConnection(String host, String clientId) throws URISyntaxException, Exception {
1:455f1ca:         BlockingConnection conn;
1:455f1ca:         MQTT mqttPub = new MQTT();
1:455f1ca:         mqttPub.setHost(host);
1:455f1ca:         mqttPub.setConnectAttemptsMax(0);
1:455f1ca:         mqttPub.setReconnectAttemptsMax(0);
1:455f1ca:         mqttPub.setClientId(clientId);
1:455f1ca:         mqttPub.setCleanSession(false);
1:455f1ca:         conn = mqttPub.blockingConnection();
1:455f1ca:         conn.connect();
1:455f1ca:         return conn;
1:455f1ca:     }
1:455f1ca: 
1:455f1ca:     public void doTest(String subscribe) throws Exception {
1:455f1ca:         String payload = "This is test payload";
1:455f1ca:         BlockingConnection connectionPub = getConnection(mqttClientUrl, "client1");
1:455f1ca:         BlockingConnection connectionSub = getConnection(mqttClientUrl, "client2");
1:455f1ca:         Topic[] topics = { new Topic(subscribe, QoS.values()[1]) };
1:455f1ca:         connectionSub.subscribe(topics);
1:455f1ca:         connectionPub.publish("test/1", payload.getBytes(), QoS.AT_LEAST_ONCE, false);
1:455f1ca:         receive(connectionSub, 3000);
1:455f1ca: 
1:455f1ca:         //Unsubscribe and resubscribe
1:455f1ca:         connectionSub.unsubscribe(new String[]{subscribe});
1:455f1ca:         connectionSub.subscribe(topics);
1:19c9404:         connectionPub.publish("test/1", payload.getBytes(), QoS.AT_LEAST_ONCE, false);
1:455f1ca:         receive(connectionSub, 3000);
1:455f1ca: 
1:455f1ca:         connectionPub.disconnect();
1:455f1ca:         connectionSub.disconnect();
1:455f1ca:     }
1:455f1ca: 
1:455f1ca:     public byte[] receive(BlockingConnection connection, int timeout) throws Exception {
1:455f1ca:         byte[] result = null;
1:455f1ca:         org.fusesource.mqtt.client.Message message = connection.receive(timeout, TimeUnit.MILLISECONDS);
1:455f1ca:         if (message != null) {
1:455f1ca:             result = message.getPayload();
1:455f1ca:             message.ack();
1:455f1ca:         }
1:455f1ca:         return result;
1:455f1ca:     }
1:455f1ca: }
============================================================================
author:Christopher L. Shannon (cshannon)
-------------------------------------------------------------------------------
commit:19c9404
/////////////////////////////////////////////////////////////////////////
1:         connectionPub.publish("test/1", payload.getBytes(), QoS.AT_LEAST_ONCE, false);
author:Timothy Bish
-------------------------------------------------------------------------------
commit:455f1ca
/////////////////////////////////////////////////////////////////////////
1: /**
1:  * Licensed to the Apache Software Foundation (ASF) under one or more
1:  * contributor license agreements.  See the NOTICE file distributed with
1:  * this work for additional information regarding copyright ownership.
1:  * The ASF licenses this file to You under the Apache License, Version 2.0
1:  * (the "License"); you may not use this file except in compliance with
1:  * the License.  You may obtain a copy of the License at
1:  *
1:  *      http://www.apache.org/licenses/LICENSE-2.0
1:  *
1:  * Unless required by applicable law or agreed to in writing, software
1:  * distributed under the License is distributed on an "AS IS" BASIS,
1:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:  * See the License for the specific language governing permissions and
1:  * limitations under the License.
1:  */
1: package org.apache.activemq.transport.mqtt;
1: 
1: import java.net.URI;
1: import java.net.URISyntaxException;
1: import java.util.concurrent.TimeUnit;
1: 
1: import org.apache.activemq.broker.BrokerService;
1: import org.apache.activemq.broker.TransportConnector;
1: import org.fusesource.mqtt.client.BlockingConnection;
1: import org.fusesource.mqtt.client.MQTT;
1: import org.fusesource.mqtt.client.QoS;
1: import org.fusesource.mqtt.client.Topic;
1: import org.junit.After;
1: import org.junit.Before;
1: import org.junit.Test;
1: 
1: public class MQTTOverlapedSubscriptionsTest {
1: 
1:     private BrokerService brokerService;
1:     private String mqttClientUrl;
1: 
1:     @Before
1:     public void setup() throws Exception {
1:         initializeBroker(true);
1:     }
1: 
1:     @After
1:     public void shutdown() throws Exception {
1:         brokerService.stop();
1:         brokerService.waitUntilStopped();
1:     }
1: 
1:     protected void initializeBroker(boolean deleteAllMessagesOnStart) throws Exception {
1: 
1:         brokerService = new BrokerService();
1:         brokerService.setPersistent(true);
1:         brokerService.setDeleteAllMessagesOnStartup(deleteAllMessagesOnStart);
1:         TransportConnector connector = new TransportConnector();
1:         connector.setUri(new URI("mqtt://localhost:0"));
1:         connector.setName("mqtt");
1:         brokerService.addConnector(connector);
1:         brokerService.start();
1:         brokerService.waitUntilStarted();
1: 
1:         mqttClientUrl = connector.getPublishableConnectString().replace("mqtt", "tcp");
1:     }
1: 
1:     @Test
1:     public void testMqttResubscribe() throws Exception {
1:         // inactive durable consumer on test/1 will be left on the broker after restart
1:         doTest("test/1");
1: 
1:         shutdown();
1:         initializeBroker(false);
1: 
1:         // new consumer on test/# will match all messages sent to the inactive sub
1:         doTest("test/#");
1:     }
1: 
1:     private BlockingConnection getConnection(String host, String clientId) throws URISyntaxException, Exception {
1:         BlockingConnection conn;
1:         MQTT mqttPub = new MQTT();
1:         mqttPub.setHost(host);
1:         mqttPub.setConnectAttemptsMax(0);
1:         mqttPub.setReconnectAttemptsMax(0);
1:         mqttPub.setClientId(clientId);
1:         mqttPub.setCleanSession(false);
1:         conn = mqttPub.blockingConnection();
1:         conn.connect();
1:         return conn;
1:     }
1: 
1:     public void doTest(String subscribe) throws Exception {
1:         String payload = "This is test payload";
1:         BlockingConnection connectionPub = getConnection(mqttClientUrl, "client1");
1:         BlockingConnection connectionSub = getConnection(mqttClientUrl, "client2");
1:         Topic[] topics = { new Topic(subscribe, QoS.values()[1]) };
1:         connectionSub.subscribe(topics);
1:         connectionPub.publish("test/1", payload.getBytes(), QoS.AT_LEAST_ONCE, false);
1:         receive(connectionSub, 3000);
1: 
1:         //Unsubscribe and resubscribe
1:         connectionSub.unsubscribe(new String[]{subscribe});
1:         connectionSub.subscribe(topics);
0:         connectionPub.publish(subscribe, payload.getBytes(), QoS.AT_LEAST_ONCE, false);
1:         receive(connectionSub, 3000);
1: 
1:         connectionPub.disconnect();
1:         connectionSub.disconnect();
1:     }
1: 
1:     public byte[] receive(BlockingConnection connection, int timeout) throws Exception {
1:         byte[] result = null;
1:         org.fusesource.mqtt.client.Message message = connection.receive(timeout, TimeUnit.MILLISECONDS);
1:         if (message != null) {
1:             result = message.getPayload();
1:             message.ack();
1:         }
1:         return result;
1:     }
1: }
============================================================================