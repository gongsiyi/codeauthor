1:72839b7: /**
1:72839b7:  * Licensed to the Apache Software Foundation (ASF) under one or more
1:72839b7:  * contributor license agreements.  See the NOTICE file distributed with
1:72839b7:  * this work for additional information regarding copyright ownership.
1:72839b7:  * The ASF licenses this file to You under the Apache License, Version 2.0
1:72839b7:  * (the "License"); you may not use this file except in compliance with
1:72839b7:  * the License.  You may obtain a copy of the License at
1:72839b7:  *
1:72839b7:  *      http://www.apache.org/licenses/LICENSE-2.0
1:72839b7:  *
1:72839b7:  * Unless required by applicable law or agreed to in writing, software
1:72839b7:  * distributed under the License is distributed on an "AS IS" BASIS,
1:72839b7:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:72839b7:  * See the License for the specific language governing permissions and
1:72839b7:  * limitations under the License.
1:72839b7:  */
1:72839b7: package org.apache.activemq.transport.amqp.client;
2:72839b7: 
1:b34336c: import java.util.concurrent.atomic.AtomicReference;
1:b34336c: 
1:72839b7: import org.apache.qpid.proton.engine.Connection;
1:cec3245: import org.apache.qpid.proton.engine.Delivery;
1:1a0f73e: import org.apache.qpid.proton.engine.Receiver;
1:1a0f73e: import org.apache.qpid.proton.engine.Sender;
1:72839b7: import org.apache.qpid.proton.engine.Session;
1:72839b7: 
1:72839b7: /**
1:b34336c:  * Abstract base for a validation hook that is used in tests to check the state
1:b34336c:  * of a remote resource after a variety of lifecycle events.
1:72839b7:  */
1:1a0f73e: public class AmqpValidator {
1:72839b7: 
1:b34336c:     private AtomicReference<String> errorMessage = new AtomicReference<String>();
1:72839b7: 
1:72839b7:     public void inspectOpenedResource(Connection connection) {
1:72839b7: 
2:72839b7:     }
1:72839b7: 
1:72839b7:     public void inspectOpenedResource(Session session) {
1:72839b7: 
1:72839b7:     }
1:72839b7: 
1:1a0f73e:     public void inspectOpenedResource(Sender sender) {
1:1a0f73e: 
1:1a0f73e:     }
1:1a0f73e: 
1:1a0f73e:     public void inspectOpenedResource(Receiver receiver) {
1:72839b7: 
1:72839b7:     }
1:72839b7: 
1:72839b7:     public void inspectClosedResource(Connection remoteConnection) {
1:72839b7: 
1:72839b7:     }
1:72839b7: 
1:72839b7:     public void inspectClosedResource(Session session) {
1:72839b7: 
1:72839b7:     }
1:72839b7: 
1:1a0f73e:     public void inspectClosedResource(Sender sender) {
1:72839b7: 
1:72839b7:     }
1:72839b7: 
1:1a0f73e:     public void inspectClosedResource(Receiver receiver) {
1:1a0f73e: 
1:1a0f73e:     }
1:1a0f73e: 
1:1a0f73e:     public void inspectDetachedResource(Sender sender) {
1:1a0f73e: 
1:1a0f73e:     }
1:1a0f73e: 
1:1a0f73e:     public void inspectDetachedResource(Receiver receiver) {
1:72839b7: 
1:72839b7:     }
1:72839b7: 
1:cec3245:     public void inspectDelivery(Receiver receiver, Delivery delivery) {
1:cec3245: 
1:cec3245:     }
1:cec3245: 
1:cec3245:     public void inspectDeliveryUpdate(Sender sender, Delivery delivery) {
1:cec3245: 
1:cec3245:     }
1:cec3245: 
1:72839b7:     public boolean isValid() {
1:b34336c:         return errorMessage.get() != null;
1:72839b7:     }
1:72839b7: 
1:b34336c:     public final void clearErrorMessage() {
1:b34336c:         errorMessage.set(null);
1:72839b7:     }
1:72839b7: 
1:b34336c:     public final String getErrorMessage() {
1:b34336c:         return errorMessage.get();
1:72839b7:     }
1:72839b7: 
1:b34336c:     protected final boolean markAsInvalid(String message) {
1:b34336c:         if (message == null) {
1:b34336c:             throw new NullPointerException("Provided error message cannot be null!");
1:72839b7:         }
1:b34336c: 
1:b34336c:         return errorMessage.compareAndSet(null, message);
1:72839b7:     }
1:72839b7: 
1:b34336c:     public final void assertValid() {
1:b34336c:         final String assertionErrorMessage = errorMessage.get();
1:b34336c:         if (assertionErrorMessage != null) {
1:b34336c:             throw new AssertionError(assertionErrorMessage);
1:72839b7:         }
1:72839b7:     }
1:72839b7: }
============================================================================
author:Timothy Bish
-------------------------------------------------------------------------------
commit:cec3245
/////////////////////////////////////////////////////////////////////////
1: import org.apache.qpid.proton.engine.Delivery;
/////////////////////////////////////////////////////////////////////////
1:     public void inspectDelivery(Receiver receiver, Delivery delivery) {
1: 
1:     }
1: 
1:     public void inspectDeliveryUpdate(Sender sender, Delivery delivery) {
1: 
1:     }
1: 
commit:b34336c
/////////////////////////////////////////////////////////////////////////
1: import java.util.concurrent.atomic.AtomicReference;
1: 
1:  * Abstract base for a validation hook that is used in tests to check the state
1:  * of a remote resource after a variety of lifecycle events.
1:     private AtomicReference<String> errorMessage = new AtomicReference<String>();
/////////////////////////////////////////////////////////////////////////
1:         return errorMessage.get() != null;
1:     public final void clearErrorMessage() {
1:         errorMessage.set(null);
1:     public final String getErrorMessage() {
1:         return errorMessage.get();
1:     protected final boolean markAsInvalid(String message) {
1:         if (message == null) {
1:             throw new NullPointerException("Provided error message cannot be null!");
1: 
1:         return errorMessage.compareAndSet(null, message);
1:     public final void assertValid() {
1:         final String assertionErrorMessage = errorMessage.get();
1:         if (assertionErrorMessage != null) {
1:             throw new AssertionError(assertionErrorMessage);
commit:1a0f73e
/////////////////////////////////////////////////////////////////////////
1: import org.apache.qpid.proton.engine.Receiver;
1: import org.apache.qpid.proton.engine.Sender;
1: public class AmqpValidator {
/////////////////////////////////////////////////////////////////////////
1:     public void inspectOpenedResource(Sender sender) {
1: 
1:     }
1: 
1:     public void inspectOpenedResource(Receiver receiver) {
/////////////////////////////////////////////////////////////////////////
1:     public void inspectClosedResource(Sender sender) {
1:     public void inspectClosedResource(Receiver receiver) {
1: 
1:     }
1: 
1:     public void inspectDetachedResource(Sender sender) {
1: 
1:     }
1: 
1:     public void inspectDetachedResource(Receiver receiver) {
/////////////////////////////////////////////////////////////////////////
0:     public void assertValid() {
commit:72839b7
/////////////////////////////////////////////////////////////////////////
1: /**
1:  * Licensed to the Apache Software Foundation (ASF) under one or more
1:  * contributor license agreements.  See the NOTICE file distributed with
1:  * this work for additional information regarding copyright ownership.
1:  * The ASF licenses this file to You under the Apache License, Version 2.0
1:  * (the "License"); you may not use this file except in compliance with
1:  * the License.  You may obtain a copy of the License at
1:  *
1:  *      http://www.apache.org/licenses/LICENSE-2.0
1:  *
1:  * Unless required by applicable law or agreed to in writing, software
1:  * distributed under the License is distributed on an "AS IS" BASIS,
1:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:  * See the License for the specific language governing permissions and
1:  * limitations under the License.
1:  */
1: package org.apache.activemq.transport.amqp.client;
1: 
1: import org.apache.qpid.proton.engine.Connection;
0: import org.apache.qpid.proton.engine.Link;
1: import org.apache.qpid.proton.engine.Session;
1: 
1: /**
0:  * Abstract base for a validation hook that is used in tests to check
0:  * the state of a remote resource after a variety of lifecycle events.
1:  */
0: public class AmqpStateInspector {
1: 
0:     private boolean valid = true;
0:     private String errorMessage;
1: 
1:     public void inspectOpenedResource(Connection connection) {
1: 
1:     }
1: 
1:     public void inspectOpenedResource(Session session) {
1: 
1:     }
1: 
0:     public void inspectOpenedResource(Link link) {
1: 
1:     }
1: 
1:     public void inspectClosedResource(Connection remoteConnection) {
1: 
1:     }
1: 
1:     public void inspectClosedResource(Session session) {
1: 
1:     }
1: 
0:     public void inspectClosedResource(Link link) {
1: 
1:     }
1: 
0:     public void inspectDetachedResource(Link link) {
1: 
1:     }
1: 
1:     public boolean isValid() {
0:         return valid;
1:     }
1: 
0:     protected void setValid(boolean valid) {
0:         this.valid = valid;
1:     }
1: 
0:     public String getErrorMessage() {
0:         return errorMessage;
1:     }
1: 
0:     protected void setErrorMessage(String errorMessage) {
0:         this.errorMessage = errorMessage;
1:     }
1: 
0:     protected void markAsInvalid(String errorMessage) {
0:         if (valid) {
0:             setValid(false);
0:             setErrorMessage(errorMessage);
1:         }
1:     }
1: 
0:     public void assertIfStateChecksFailed() {
0:         if (!isValid()) {
0:             throw new AssertionError(errorMessage);
1:         }
1:     }
1: }
============================================================================