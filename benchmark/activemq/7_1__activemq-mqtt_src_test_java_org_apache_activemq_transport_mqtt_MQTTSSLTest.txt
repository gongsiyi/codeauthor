1:829a186: /**
1:829a186:  * Licensed to the Apache Software Foundation (ASF) under one or more
1:829a186:  * contributor license agreements.  See the NOTICE file distributed with
1:829a186:  * this work for additional information regarding copyright ownership.
1:829a186:  * The ASF licenses this file to You under the Apache License, Version 2.0
1:829a186:  * (the "License"); you may not use this file except in compliance with
1:829a186:  * the License.  You may obtain a copy of the License at
1:829a186:  *
1:829a186:  *      http://www.apache.org/licenses/LICENSE-2.0
1:829a186:  *
1:829a186:  * Unless required by applicable law or agreed to in writing, software
1:829a186:  * distributed under the License is distributed on an "AS IS" BASIS,
1:829a186:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:829a186:  * See the License for the specific language governing permissions and
1:829a186:  * limitations under the License.
1:829a186:  */
1:829a186: package org.apache.activemq.transport.mqtt;
1:829a186: 
1:829a186: /**
1:829a186:  * Run the basic tests with the NIO Transport.
1:829a186:  */
1:829a186: public class MQTTSSLTest extends MQTTTest {
1:829a186: 
1:829a186:     @Override
1:829a186:     public String getProtocolScheme() {
1:829a186:         return "mqtt+ssl";
1:829a186:     }
1:829a186: 
1:829a186:     @Override
1:829a186:     public boolean isUseSSL() {
1:829a186:         return true;
1:829a186:     }
1:829a186: }
============================================================================
author:Timothy Bish
-------------------------------------------------------------------------------
commit:829a186
/////////////////////////////////////////////////////////////////////////
1: /**
1:  * Licensed to the Apache Software Foundation (ASF) under one or more
1:  * contributor license agreements.  See the NOTICE file distributed with
1:  * this work for additional information regarding copyright ownership.
1:  * The ASF licenses this file to You under the Apache License, Version 2.0
1:  * (the "License"); you may not use this file except in compliance with
1:  * the License.  You may obtain a copy of the License at
1:  *
1:  *      http://www.apache.org/licenses/LICENSE-2.0
1:  *
1:  * Unless required by applicable law or agreed to in writing, software
1:  * distributed under the License is distributed on an "AS IS" BASIS,
1:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:  * See the License for the specific language governing permissions and
1:  * limitations under the License.
1:  */
1: package org.apache.activemq.transport.mqtt;
1: 
1: /**
1:  * Run the basic tests with the NIO Transport.
1:  */
1: public class MQTTSSLTest extends MQTTTest {
1: 
1:     @Override
1:     public String getProtocolScheme() {
1:         return "mqtt+ssl";
1:     }
1: 
1:     @Override
1:     public boolean isUseSSL() {
1:         return true;
1:     }
1: }
commit:fb569e3
/////////////////////////////////////////////////////////////////////////
author:Dejan Bosanac
-------------------------------------------------------------------------------
commit:4ba4aa2
/////////////////////////////////////////////////////////////////////////
0: 
/////////////////////////////////////////////////////////////////////////
author:gtully
-------------------------------------------------------------------------------
commit:bf8eb0e
/////////////////////////////////////////////////////////////////////////
0:     @Ignore("See AMQ-4712")
0:     @Override
0:     @Test
0:     public void testResendMessageId() throws Exception {
0:         super.testResendMessageId();
0:     }
/////////////////////////////////////////////////////////////////////////
0:     protected MQTT createMQTTConnection(String clientId, boolean clean) throws Exception {
0:         MQTT mqtt = createMQTTConnection();
0:         if (clientId != null) {
0:             mqtt.setClientId(clientId);
0:         }
0:         mqtt.setCleanSession(clean);
0:         return mqtt;
0:     }
0: 
author:Kevin Earls
-------------------------------------------------------------------------------
commit:18e163d
/////////////////////////////////////////////////////////////////////////
0: import org.junit.Ignore;
0: import org.junit.Test;
0: import org.junit.runner.RunWith;
0: import org.junit.runners.BlockJUnit4ClassRunner;
0: import org.slf4j.Logger;
0: import org.slf4j.LoggerFactory;
0: @RunWith(BlockJUnit4ClassRunner.class)
0:     private static final Logger LOG = LoggerFactory.getLogger(MQTTSSLTest.class);
0: 
/////////////////////////////////////////////////////////////////////////
0:     @Ignore("See AMQ-4712")
0:     @Override
0:     @Test
0:     public void testReceiveMessageSentWhileOffline() throws Exception {
0:         super.testReceiveMessageSentWhileOffline();
0:     }
0: 
0: 
author:Hiram R. Chirino
-------------------------------------------------------------------------------
commit:f20e17a
/////////////////////////////////////////////////////////////////////////
0:         mqtt.setReconnectAttemptsMax(0);
commit:e0ae445
/////////////////////////////////////////////////////////////////////////
0:     public void setUp() throws Exception {
/////////////////////////////////////////////////////////////////////////
0:         super.setUp();
/////////////////////////////////////////////////////////////////////////
0:         mqtt.setConnectAttemptsMax(1);
0:         mqtt.setTracer(createTracer());
commit:a68916d
/////////////////////////////////////////////////////////////////////////
0: 
0:         String basedir = basedir().getPath();
0:         System.setProperty("javax.net.ssl.trustStore", basedir+"/src/test/resources/client.keystore");
0:         System.setProperty("javax.net.ssl.keyStore", basedir+"/src/test/resources/server.keystore");
0:     @Override
0:     protected String getProtocolScheme() {
0:         return "mqtt+ssl";
0:         mqtt.setHost("ssl://localhost:"+mqttConnector.getConnectUri().getPort());
/////////////////////////////////////////////////////////////////////////
author:Robert Davies
-------------------------------------------------------------------------------
commit:09c4500
/////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////
0:     protected void initializeConnection(MQTTClientProvider provider) throws Exception {
0:         SSLContext ctx = SSLContext.getInstance("TLS");
0:         ctx.init(new KeyManager[0], new TrustManager[]{new DefaultTrustManager()}, new SecureRandom());
0:         provider.setSslContext(ctx);
0:         provider.connect("ssl://localhost:"+mqttConnector.getConnectUri().getPort());
0:     }
0: 
0: 
0: 
commit:4c38438
/////////////////////////////////////////////////////////////////////////
0: public class MQTTSSLTest extends MQTTTest {
/////////////////////////////////////////////////////////////////////////
0:         super.startBroker();
0:     protected void addMQTTConnector(BrokerService brokerService) throws Exception {
0:     }
0: 
0:     protected MQTT createMQTTConnection() throws Exception {
0:         return mqtt;
0:     static class DefaultTrustManager implements X509TrustManager {
/////////////////////////////////////////////////////////////////////////
0: 
0: }
commit:0f5b406
/////////////////////////////////////////////////////////////////////////
0: /**
0:  * Licensed to the Apache Software Foundation (ASF) under one or more
0:  * contributor license agreements.  See the NOTICE file distributed with
0:  * this work for additional information regarding copyright ownership.
0:  * The ASF licenses this file to You under the Apache License, Version 2.0
0:  * (the "License"); you may not use this file except in compliance with
0:  * the License.  You may obtain a copy of the License at
0:  *
0:  *      http://www.apache.org/licenses/LICENSE-2.0
0:  *
0:  * Unless required by applicable law or agreed to in writing, software
0:  * distributed under the License is distributed on an "AS IS" BASIS,
0:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
0:  * See the License for the specific language governing permissions and
0:  * limitations under the License.
0:  */
0: package org.apache.activemq.transport.mqtt;
0: 
0: import java.security.SecureRandom;
0: import java.security.cert.CertificateException;
0: import java.security.cert.X509Certificate;
0: import java.util.Vector;
0: 
0: import javax.net.ssl.KeyManager;
0: import javax.net.ssl.SSLContext;
0: import javax.net.ssl.TrustManager;
0: import javax.net.ssl.X509TrustManager;
0: import org.apache.activemq.broker.BrokerService;
0: import org.fusesource.mqtt.client.BlockingConnection;
0: import org.fusesource.mqtt.client.MQTT;
0: import org.junit.After;
0: import org.junit.Before;
0: import org.junit.Test;
0: import org.slf4j.Logger;
0: import org.slf4j.LoggerFactory;
0: 
0: 
0: public class MQTTSSLConnectTest {
0:     private static final Logger LOG = LoggerFactory.getLogger(MQTTSSLConnectTest.class);
0:     BrokerService brokerService;
0:     Vector<Throwable> exceptions = new Vector<Throwable>();
0: 
0:     @Before
0:     public void startBroker() throws Exception {
0:         System.setProperty("javax.net.ssl.trustStore", "src/test/resources/client.keystore");
0:         System.setProperty("javax.net.ssl.trustStorePassword", "password");
0:         System.setProperty("javax.net.ssl.trustStoreType", "jks");
0:         System.setProperty("javax.net.ssl.keyStore", "src/test/resources/server.keystore");
0:         System.setProperty("javax.net.ssl.keyStorePassword", "password");
0:         System.setProperty("javax.net.ssl.keyStoreType", "jks");
0: 
0:         exceptions.clear();
0:         brokerService = new BrokerService();
0:         brokerService.setPersistent(false);
0:         brokerService.setAdvisorySupport(false);
0:     }
0: 
0:     @After
0:     public void stopBroker() throws Exception {
0:         if (brokerService != null) {
0:             brokerService.stop();
0:         }
0:     }
0: 
0:     @Test
0:     public void testConnect() throws Exception {
0: 
0:         brokerService.addConnector("mqtt+ssl://localhost:8883");
0:         brokerService.start();
0:         MQTT mqtt = new MQTT();
0:         mqtt.setHost("ssl://localhost:8883");
0:         SSLContext ctx = SSLContext.getInstance("TLS");
0:         ctx.init(new KeyManager[0], new TrustManager[]{new DefaultTrustManager()}, new SecureRandom());
0:         mqtt.setSslContext(ctx);
0:         BlockingConnection connection = mqtt.blockingConnection();
0: 
0:         connection.connect();
0:         Thread.sleep(1000);
0:         connection.disconnect();
0:     }
0: 
0: 
0:     private static class DefaultTrustManager implements X509TrustManager {
0: 
0:         public void checkClientTrusted(X509Certificate[] x509Certificates, String s) throws CertificateException {
0:         }
0: 
0:         public void checkServerTrusted(X509Certificate[] x509Certificates, String s) throws CertificateException {
0:         }
0: 
0:         public X509Certificate[] getAcceptedIssuers() {
0:             return new X509Certificate[0];
0:         }
0:     }
0: }
author:Gary Tully
-------------------------------------------------------------------------------
commit:279ecfc
/////////////////////////////////////////////////////////////////////////
0: import org.junit.Ignore;
0: @Ignore("hangs atm, needs investigation")
============================================================================