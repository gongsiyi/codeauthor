1:1a88ac6: /**
1:1a88ac6:  * Licensed to the Apache Software Foundation (ASF) under one or more
1:1a88ac6:  * contributor license agreements.  See the NOTICE file distributed with
1:1a88ac6:  * this work for additional information regarding copyright ownership.
1:1a88ac6:  * The ASF licenses this file to You under the Apache License, Version 2.0
1:1a88ac6:  * (the "License"); you may not use this file except in compliance with
1:1a88ac6:  * the License.  You may obtain a copy of the License at
2:1a88ac6:  *
1:230a86c:  *      http://www.apache.org/licenses/LICENSE-2.0
1:1a88ac6:  *
1:1a88ac6:  * Unless required by applicable law or agreed to in writing, software
1:1a88ac6:  * distributed under the License is distributed on an "AS IS" BASIS,
1:1a88ac6:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:1a88ac6:  * See the License for the specific language governing permissions and
1:1a88ac6:  * limitations under the License.
1:1a88ac6:  */
13:1a88ac6: 
1:1a88ac6: package org.apache.activemq.security;
1:1a88ac6: 
1:1a88ac6: import java.util.Map;
1:1a88ac6: 
1:1a88ac6: import javax.security.auth.Subject;
1:1a88ac6: import javax.security.auth.callback.CallbackHandler;
1:1a88ac6: import javax.security.auth.login.FailedLoginException;
1:1a88ac6: import javax.security.auth.login.LoginException;
1:1a88ac6: import javax.security.auth.spi.LoginModule;
1:1a88ac6: 
1:74a7a8b: import org.apache.activemq.jaas.GroupPrincipal;
1:74a7a8b: import org.apache.activemq.jaas.UserPrincipal;
1:74a7a8b: 
1:1a88ac6: public class StubLoginModule implements LoginModule {
1:1a88ac6:     public static final String ALLOW_LOGIN_PROPERTY = "org.apache.activemq.jaas.stubproperties.allow_login";
1:1a88ac6:     public static final String USERS_PROPERTY = "org.apache.activemq.jaas.stubproperties.users";
1:1a88ac6:     public static final String GROUPS_PROPERTY = "org.apache.activemq.jaas.stubproperties.groups";
1:230a86c: 
1:230a86c:     private Subject subject;
1:230a86c: 
1:230a86c:     private String userNames[];
1:230a86c:     private String groupNames[];
1:230a86c:     private boolean allowLogin;
1:230a86c: 
1:4743a20:     @Override
1:4743a20:     @SuppressWarnings("rawtypes")
1:1a88ac6:     public void initialize(Subject subject, CallbackHandler callbackHandler, Map sharedState, Map options) {
1:1a88ac6:         String allowLoginString = (String)(options.get(ALLOW_LOGIN_PROPERTY));
1:1a88ac6:         String usersString = (String)(options.get(USERS_PROPERTY));
1:1a88ac6:         String groupsString = (String)(options.get(GROUPS_PROPERTY));
1:230a86c: 
1:1a88ac6:         this.subject = subject;
1:230a86c: 
1:1a88ac6:         allowLogin = Boolean.parseBoolean(allowLoginString);
1:1a88ac6:         userNames = usersString.split(",");
1:1a88ac6:         groupNames = groupsString.split(",");
1:1a88ac6:     }
1:1a88ac6: 
1:4743a20:     @Override
1:1a88ac6:     public boolean login() throws LoginException {
1:1a88ac6:         if (!allowLogin) {
1:1a88ac6:             throw new FailedLoginException("Login was not allowed (as specified in configuration).");
1:1a88ac6:         }
1:230a86c: 
1:1a88ac6:         return true;
1:1a88ac6:     }
1:230a86c: 
1:4743a20:     @Override
1:1a88ac6:     public boolean commit() throws LoginException {
1:1a88ac6:         if (!allowLogin) {
1:1a88ac6:             throw new FailedLoginException("Login was not allowed (as specified in configuration).");
1:1a88ac6:         }
1:230a86c: 
1:1a88ac6:         for (int i = 0; i < userNames.length; ++i) {
1:230a86c:             if (userNames[i].length() > 0) {
1:1a88ac6:                 subject.getPrincipals().add(new UserPrincipal(userNames[i]));
1:1a88ac6:             }
1:1a88ac6:         }
1:230a86c: 
1:1a88ac6:         for (int i = 0; i < groupNames.length; ++i) {
1:1a88ac6:             if (groupNames[i].length() > 0) {
1:1a88ac6:                 subject.getPrincipals().add(new GroupPrincipal(groupNames[i]));
1:1a88ac6:             }
1:1a88ac6:         }
1:230a86c: 
1:1a88ac6:         return true;
1:1a88ac6:     }
1:1a88ac6: 
1:4743a20:     @Override
1:1a88ac6:     public boolean abort() throws LoginException {
1:1a88ac6:         return true;
1:1a88ac6:     }
1:1a88ac6: 
1:4743a20:     @Override
1:1a88ac6:     public boolean logout() throws LoginException {
1:1a88ac6:         subject.getPrincipals().clear();
1:230a86c: 
1:1a88ac6:         return true;
1:1a88ac6:     }
1:1a88ac6: 
1:1a88ac6: }
============================================================================
author:Timothy A. Bish
-------------------------------------------------------------------------------
commit:4743a20
/////////////////////////////////////////////////////////////////////////
1:     @Override
1:     @SuppressWarnings("rawtypes")
/////////////////////////////////////////////////////////////////////////
1:     @Override
/////////////////////////////////////////////////////////////////////////
1:     @Override
/////////////////////////////////////////////////////////////////////////
1:     @Override
1:     @Override
commit:ef24cc9
author:Hiram R. Chirino
-------------------------------------------------------------------------------
commit:74a7a8b
/////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////
1: import org.apache.activemq.jaas.GroupPrincipal;
1: import org.apache.activemq.jaas.UserPrincipal;
1: 
commit:230a86c
/////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////
1:  *      http://www.apache.org/licenses/LICENSE-2.0
/////////////////////////////////////////////////////////////////////////
1: 
1:     private Subject subject;
1: 
1:     private String userNames[];
1:     private String groupNames[];
1:     private boolean allowLogin;
1: 
1: 
1: 
/////////////////////////////////////////////////////////////////////////
1: 
1: 
1: 
1:             if (userNames[i].length() > 0) {
1: 
1: 
/////////////////////////////////////////////////////////////////////////
1: 
commit:1a88ac6
/////////////////////////////////////////////////////////////////////////
1: /**
1:  *
1:  * Licensed to the Apache Software Foundation (ASF) under one or more
1:  * contributor license agreements.  See the NOTICE file distributed with
1:  * this work for additional information regarding copyright ownership.
1:  * The ASF licenses this file to You under the Apache License, Version 2.0
1:  * (the "License"); you may not use this file except in compliance with
1:  * the License.  You may obtain a copy of the License at
1:  *
0:  * http://www.apache.org/licenses/LICENSE-2.0
1:  *
1:  * Unless required by applicable law or agreed to in writing, software
1:  * distributed under the License is distributed on an "AS IS" BASIS,
1:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:  * See the License for the specific language governing permissions and
1:  * limitations under the License.
1:  */
1: 
1: package org.apache.activemq.security;
1: 
0: import org.apache.activemq.jaas.GroupPrincipal;
0: import org.apache.activemq.jaas.UserPrincipal;
1: 
1: import java.util.Map;
1: 
1: import javax.security.auth.Subject;
1: import javax.security.auth.callback.CallbackHandler;
1: import javax.security.auth.login.FailedLoginException;
1: import javax.security.auth.login.LoginException;
1: import javax.security.auth.spi.LoginModule;
1: 
1: public class StubLoginModule implements LoginModule {
1:     public static final String ALLOW_LOGIN_PROPERTY = "org.apache.activemq.jaas.stubproperties.allow_login";
1:     public static final String USERS_PROPERTY = "org.apache.activemq.jaas.stubproperties.users";
1:     public static final String GROUPS_PROPERTY = "org.apache.activemq.jaas.stubproperties.groups";
1:     
0:     private Subject subject = null;
1:     
0:     private String userNames[] = null;
0:     private String groupNames[] = null;
0:     private boolean allowLogin = false;
1:     
1:     public void initialize(Subject subject, CallbackHandler callbackHandler, Map sharedState, Map options) {
1:         String allowLoginString = (String)(options.get(ALLOW_LOGIN_PROPERTY));
1:         String usersString = (String)(options.get(USERS_PROPERTY));
1:         String groupsString = (String)(options.get(GROUPS_PROPERTY));
1:         
1:         this.subject = subject;
1:         
1:         allowLogin = Boolean.parseBoolean(allowLoginString);
1:         userNames = usersString.split(",");
1:         groupNames = groupsString.split(",");
1:     }
1: 
1:     public boolean login() throws LoginException {
1:         if (!allowLogin) {
1:             throw new FailedLoginException("Login was not allowed (as specified in configuration).");
1:         }
1:         
1:         return true;
1:     }
1:     
1:     public boolean commit() throws LoginException {
1:         if (!allowLogin) {
1:             throw new FailedLoginException("Login was not allowed (as specified in configuration).");
1:         }
1:         
1:         for (int i = 0; i < userNames.length; ++i) {
0:             if (userNames[i].length() > 0 ) {
1:                 subject.getPrincipals().add(new UserPrincipal(userNames[i]));
1:             }
1:         }
1:         
1:         for (int i = 0; i < groupNames.length; ++i) {
1:             if (groupNames[i].length() > 0) {
1:                 subject.getPrincipals().add(new GroupPrincipal(groupNames[i]));
1:             }
1:         }
1:         
1:         return true;
1:     }
1: 
1:     public boolean abort() throws LoginException {
1:         return true;
1:     }
1: 
1:     public boolean logout() throws LoginException {
1:         subject.getPrincipals().clear();
1:         
1:         return true;
1:     }
1: 
1: }
============================================================================