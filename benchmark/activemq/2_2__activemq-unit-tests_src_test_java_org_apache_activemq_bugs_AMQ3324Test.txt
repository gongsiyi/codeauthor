1:3a806e9: /**
1:3a806e9:  * Licensed to the Apache Software Foundation (ASF) under one or more
1:3a806e9:  * contributor license agreements.  See the NOTICE file distributed with
1:3a806e9:  * this work for additional information regarding copyright ownership.
1:3a806e9:  * The ASF licenses this file to You under the Apache License, Version 2.0
1:3a806e9:  * (the "License"); you may not use this file except in compliance with
1:3a806e9:  * the License.  You may obtain a copy of the License at
1:3a806e9:  *
1:3a806e9:  *      http://www.apache.org/licenses/LICENSE-2.0
1:3a806e9:  *
1:3a806e9:  * Unless required by applicable law or agreed to in writing, software
1:3a806e9:  * distributed under the License is distributed on an "AS IS" BASIS,
1:3a806e9:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:3a806e9:  * See the License for the specific language governing permissions and
1:3a806e9:  * limitations under the License.
1:3a806e9:  */
1:3a806e9: package org.apache.activemq.bugs;
1:3a806e9: 
1:3a806e9: import static org.junit.Assert.assertNotNull;
1:3a806e9: import static org.junit.Assert.assertTrue;
1:3a806e9: 
1:3a806e9: import javax.jms.BytesMessage;
1:3a806e9: import javax.jms.Connection;
1:3a806e9: import javax.jms.Message;
1:3a806e9: import javax.jms.MessageConsumer;
1:3a806e9: import javax.jms.MessageProducer;
1:3a806e9: import javax.jms.Session;
1:3a806e9: import javax.jms.TemporaryQueue;
1:3a806e9: import javax.jms.Topic;
1:3a806e9: 
1:3a806e9: import org.apache.activemq.ActiveMQConnectionFactory;
1:3a806e9: import org.apache.activemq.advisory.AdvisorySupport;
1:3a806e9: import org.apache.activemq.broker.BrokerService;
1:3a806e9: import org.apache.activemq.broker.region.DestinationInterceptor;
1:3a806e9: import org.apache.activemq.broker.region.policy.PolicyEntry;
1:3a806e9: import org.apache.activemq.broker.region.policy.PolicyMap;
1:3a806e9: import org.apache.activemq.broker.region.virtual.MirroredQueue;
1:3a806e9: import org.apache.activemq.command.ActiveMQDestination;
1:3a806e9: import org.apache.activemq.util.Wait;
1:3a806e9: import org.junit.After;
1:3a806e9: import org.junit.Before;
1:3a806e9: import org.junit.Test;
1:3a806e9: import org.slf4j.Logger;
1:3a806e9: import org.slf4j.LoggerFactory;
1:3a806e9: 
1:3a806e9: public class AMQ3324Test {
1:3a806e9: 
1:3a806e9:     private static final transient Logger LOG = LoggerFactory.getLogger(AMQ3324Test.class);
1:3a806e9: 
1:3a806e9:     private static final String bindAddress = "tcp://0.0.0.0:0";
1:3a806e9:     private BrokerService broker;
1:3a806e9:     private ActiveMQConnectionFactory cf;
1:3a806e9: 
1:3a806e9:     private static final int MESSAGE_COUNT = 100;
1:3a806e9: 
1:3a806e9:     @Before
1:3a806e9:     public void setUp() throws Exception {
1:3a806e9:         broker = this.createBroker();
1:3a806e9:         String address = broker.getTransportConnectors().get(0).getPublishableConnectString();
1:3a806e9:         broker.start();
1:3a806e9:         broker.waitUntilStarted();
1:3a806e9: 
1:3a806e9:         cf = new ActiveMQConnectionFactory(address);
1:3a806e9:     }
1:3a806e9: 
1:3a806e9:     @After
1:3a806e9:     public void tearDown() throws Exception {
1:3a806e9:         if (broker != null) {
1:3a806e9:             broker.stop();
1:3a806e9:             broker.waitUntilStopped();
1:3a806e9:         }
1:3a806e9:     }
1:3a806e9: 
1:3a806e9:     @Test
1:3a806e9:     public void testTempMessageConsumedAdvisoryConnectionClose() throws Exception {
1:3a806e9: 
1:3a806e9:         Connection connection = cf.createConnection();
1:3a806e9:         connection.start();
1:3a806e9:         Session session = connection.createSession(false, Session.AUTO_ACKNOWLEDGE);
1:3a806e9: 
1:3a806e9:         final TemporaryQueue queue = session.createTemporaryQueue();
1:3a806e9:         MessageConsumer consumer = session.createConsumer(queue);
1:3a806e9: 
1:3a806e9:         final Topic advisoryTopic = AdvisorySupport.getMessageConsumedAdvisoryTopic((ActiveMQDestination) queue);
1:3a806e9: 
1:3a806e9:         MessageConsumer advisoryConsumer = session.createConsumer(advisoryTopic);
1:3a806e9:         MessageProducer producer = session.createProducer(queue);
1:3a806e9: 
1:3a806e9:         // send lots of messages to the tempQueue
1:3a806e9:         for (int i = 0; i < MESSAGE_COUNT; i++) {
1:3a806e9:             BytesMessage m = session.createBytesMessage();
1:3a806e9:             m.writeBytes(new byte[1024]);
1:3a806e9:             producer.send(m);
1:3a806e9:         }
1:3a806e9: 
1:3a806e9:         // consume one message from tempQueue
1:3a806e9:         Message msg = consumer.receive(5000);
1:3a806e9:         assertNotNull(msg);
1:3a806e9: 
1:3a806e9:         // check one advisory message has produced on the advisoryTopic
1:3a806e9:         Message advCmsg = advisoryConsumer.receive(5000);
1:3a806e9:         assertNotNull(advCmsg);
1:3a806e9: 
1:3a806e9:         connection.close();
1:3a806e9:         LOG.debug("Connection closed, destinations should now become inactive.");
1:3a806e9: 
1:3a806e9:         assertTrue("The destination " + advisoryTopic + "was not removed. ", Wait.waitFor(new Wait.Condition() {
1:3a806e9:             @Override
1:3a806e9:             public boolean isSatisified() throws Exception {
1:3a806e9:                 return broker.getAdminView().getTopics().length == 0;
1:3a806e9:             }
1:3a806e9:         }));
1:3a806e9: 
1:3a806e9:         assertTrue("The destination " + queue + " was not removed. ", Wait.waitFor(new Wait.Condition() {
1:3a806e9:             @Override
1:3a806e9:             public boolean isSatisified() throws Exception {
1:3a806e9:                 return broker.getAdminView().getTemporaryQueues().length == 0;
1:3a806e9:             }
1:3a806e9:         }));
1:3a806e9:     }
1:3a806e9: 
1:3a806e9:     protected BrokerService createBroker() throws Exception {
1:3a806e9:         BrokerService answer = new BrokerService();
1:3a806e9:         answer.setUseMirroredQueues(true);
1:3a806e9:         answer.setPersistent(false);
1:3a806e9:         answer.setSchedulePeriodForDestinationPurge(1000);
1:3a806e9: 
1:3a806e9:         PolicyEntry entry = new PolicyEntry();
1:3a806e9:         entry.setGcInactiveDestinations(true);
1:3a806e9:         entry.setInactiveTimoutBeforeGC(2000);
1:3a806e9:         entry.setProducerFlowControl(true);
1:3a806e9:         entry.setAdvisoryForConsumed(true);
1:db1f6fe:         entry.setAdvisoryForFastProducers(true);
1:3a806e9:         entry.setAdvisoryForDelivery(true);
1:3a806e9:         PolicyMap map = new PolicyMap();
1:3a806e9:         map.setDefaultEntry(entry);
1:3a806e9: 
1:3a806e9:         MirroredQueue mirrorQ = new MirroredQueue();
1:3a806e9:         mirrorQ.setCopyMessage(true);
1:3a806e9:         DestinationInterceptor[] destinationInterceptors = new DestinationInterceptor[]{mirrorQ};
1:3a806e9:         answer.setDestinationInterceptors(destinationInterceptors);
1:3a806e9: 
1:3a806e9:         answer.setDestinationPolicy(map);
1:3a806e9:         answer.addConnector(bindAddress);
1:3a806e9: 
1:3a806e9:         return answer;
1:3a806e9:     }
1:3a806e9: }
============================================================================
author:Timothy A. Bish
-------------------------------------------------------------------------------
commit:ef24cc9
commit:3a806e9
/////////////////////////////////////////////////////////////////////////
1: /**
1:  * Licensed to the Apache Software Foundation (ASF) under one or more
1:  * contributor license agreements.  See the NOTICE file distributed with
1:  * this work for additional information regarding copyright ownership.
1:  * The ASF licenses this file to You under the Apache License, Version 2.0
1:  * (the "License"); you may not use this file except in compliance with
1:  * the License.  You may obtain a copy of the License at
1:  *
1:  *      http://www.apache.org/licenses/LICENSE-2.0
1:  *
1:  * Unless required by applicable law or agreed to in writing, software
1:  * distributed under the License is distributed on an "AS IS" BASIS,
1:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:  * See the License for the specific language governing permissions and
1:  * limitations under the License.
1:  */
1: package org.apache.activemq.bugs;
1: 
1: import static org.junit.Assert.assertNotNull;
1: import static org.junit.Assert.assertTrue;
1: 
1: import javax.jms.BytesMessage;
1: import javax.jms.Connection;
1: import javax.jms.Message;
1: import javax.jms.MessageConsumer;
1: import javax.jms.MessageProducer;
1: import javax.jms.Session;
1: import javax.jms.TemporaryQueue;
1: import javax.jms.Topic;
1: 
1: import org.apache.activemq.ActiveMQConnectionFactory;
1: import org.apache.activemq.advisory.AdvisorySupport;
1: import org.apache.activemq.broker.BrokerService;
1: import org.apache.activemq.broker.region.DestinationInterceptor;
1: import org.apache.activemq.broker.region.policy.PolicyEntry;
1: import org.apache.activemq.broker.region.policy.PolicyMap;
1: import org.apache.activemq.broker.region.virtual.MirroredQueue;
1: import org.apache.activemq.command.ActiveMQDestination;
1: import org.apache.activemq.util.Wait;
1: import org.junit.After;
1: import org.junit.Before;
1: import org.junit.Test;
1: import org.slf4j.Logger;
1: import org.slf4j.LoggerFactory;
1: 
1: public class AMQ3324Test {
1: 
1:     private static final transient Logger LOG = LoggerFactory.getLogger(AMQ3324Test.class);
1: 
1:     private static final String bindAddress = "tcp://0.0.0.0:0";
1:     private BrokerService broker;
1:     private ActiveMQConnectionFactory cf;
1: 
1:     private static final int MESSAGE_COUNT = 100;
1: 
1:     @Before
1:     public void setUp() throws Exception {
1:         broker = this.createBroker();
1:         String address = broker.getTransportConnectors().get(0).getPublishableConnectString();
1:         broker.start();
1:         broker.waitUntilStarted();
1: 
1:         cf = new ActiveMQConnectionFactory(address);
1:     }
1: 
1:     @After
1:     public void tearDown() throws Exception {
1:         if (broker != null) {
1:             broker.stop();
1:             broker.waitUntilStopped();
1:         }
1:     }
1: 
1:     @Test
1:     public void testTempMessageConsumedAdvisoryConnectionClose() throws Exception {
1: 
1:         Connection connection = cf.createConnection();
1:         connection.start();
1:         Session session = connection.createSession(false, Session.AUTO_ACKNOWLEDGE);
1: 
1:         final TemporaryQueue queue = session.createTemporaryQueue();
1:         MessageConsumer consumer = session.createConsumer(queue);
1: 
1:         final Topic advisoryTopic = AdvisorySupport.getMessageConsumedAdvisoryTopic((ActiveMQDestination) queue);
1: 
1:         MessageConsumer advisoryConsumer = session.createConsumer(advisoryTopic);
1:         MessageProducer producer = session.createProducer(queue);
1: 
1:         // send lots of messages to the tempQueue
1:         for (int i = 0; i < MESSAGE_COUNT; i++) {
1:             BytesMessage m = session.createBytesMessage();
1:             m.writeBytes(new byte[1024]);
1:             producer.send(m);
1:         }
1: 
1:         // consume one message from tempQueue
1:         Message msg = consumer.receive(5000);
1:         assertNotNull(msg);
1: 
1:         // check one advisory message has produced on the advisoryTopic
1:         Message advCmsg = advisoryConsumer.receive(5000);
1:         assertNotNull(advCmsg);
1: 
1:         connection.close();
1:         LOG.debug("Connection closed, destinations should now become inactive.");
1: 
1:         assertTrue("The destination " + advisoryTopic + "was not removed. ", Wait.waitFor(new Wait.Condition() {
1:             @Override
1:             public boolean isSatisified() throws Exception {
1:                 return broker.getAdminView().getTopics().length == 0;
1:             }
1:         }));
1: 
1:         assertTrue("The destination " + queue + " was not removed. ", Wait.waitFor(new Wait.Condition() {
1:             @Override
1:             public boolean isSatisified() throws Exception {
1:                 return broker.getAdminView().getTemporaryQueues().length == 0;
1:             }
1:         }));
1:     }
1: 
1:     protected BrokerService createBroker() throws Exception {
1:         BrokerService answer = new BrokerService();
1:         answer.setUseMirroredQueues(true);
1:         answer.setPersistent(false);
1:         answer.setSchedulePeriodForDestinationPurge(1000);
1: 
1:         PolicyEntry entry = new PolicyEntry();
1:         entry.setGcInactiveDestinations(true);
1:         entry.setInactiveTimoutBeforeGC(2000);
1:         entry.setProducerFlowControl(true);
1:         entry.setAdvisoryForConsumed(true);
0:         entry.setAdvisdoryForFastProducers(true);
1:         entry.setAdvisoryForDelivery(true);
1:         PolicyMap map = new PolicyMap();
1:         map.setDefaultEntry(entry);
1: 
1:         MirroredQueue mirrorQ = new MirroredQueue();
1:         mirrorQ.setCopyMessage(true);
1:         DestinationInterceptor[] destinationInterceptors = new DestinationInterceptor[]{mirrorQ};
1:         answer.setDestinationInterceptors(destinationInterceptors);
1: 
1:         answer.setDestinationPolicy(map);
1:         answer.addConnector(bindAddress);
1: 
1:         return answer;
1:     }
1: }
author:Gary Tully
-------------------------------------------------------------------------------
commit:db1f6fe
/////////////////////////////////////////////////////////////////////////
1:         entry.setAdvisoryForFastProducers(true);
============================================================================