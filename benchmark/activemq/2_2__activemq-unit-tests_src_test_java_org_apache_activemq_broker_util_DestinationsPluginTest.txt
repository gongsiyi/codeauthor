1:845e62a: /**
1:845e62a:  * Licensed to the Apache Software Foundation (ASF) under one or more
1:845e62a:  * contributor license agreements.  See the NOTICE file distributed with
1:845e62a:  * this work for additional information regarding copyright ownership.
1:845e62a:  * The ASF licenses this file to You under the Apache License, Version 2.0
1:845e62a:  * (the "License"); you may not use this file except in compliance with
1:845e62a:  * the License.  You may obtain a copy of the License at
1:845e62a:  *
1:845e62a:  *      http://www.apache.org/licenses/LICENSE-2.0
1:845e62a:  *
1:845e62a:  * Unless required by applicable law or agreed to in writing, software
1:845e62a:  * distributed under the License is distributed on an "AS IS" BASIS,
1:845e62a:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:845e62a:  * See the License for the specific language governing permissions and
1:845e62a:  * limitations under the License.
1:845e62a:  */
1:845e62a: package org.apache.activemq.broker.util;
1:845e62a: 
1:845e62a: 
1:845e62a: import org.apache.activemq.broker.BrokerPlugin;
1:845e62a: import org.apache.activemq.broker.BrokerService;
1:845e62a: import org.apache.activemq.broker.jmx.BrokerView;
1:845e62a: import org.apache.activemq.command.ActiveMQDestination;
1:845e62a: import org.junit.After;
1:845e62a: import org.junit.Before;
1:845e62a: import org.junit.Test;
1:845e62a: 
1:8f13847: import static org.junit.Assert.*;
1:845e62a: 
1:845e62a: 
1:845e62a: public class DestinationsPluginTest {
1:845e62a: 
1:845e62a:     BrokerService broker;
1:845e62a: 
1:845e62a:     @Before
1:845e62a:     public void setUp() throws Exception {
1:845e62a:         broker = createBroker();
1:845e62a:         broker.start();
1:845e62a:         broker.waitUntilStarted();
1:845e62a:     }
1:845e62a: 
1:845e62a:     @After
1:845e62a:     public void shutdown() throws Exception {
1:845e62a:         broker.stop();
1:845e62a:         broker.waitUntilStopped();
1:845e62a:     }
1:845e62a: 
1:845e62a:     protected BrokerService createBroker() {
1:845e62a:         BrokerService broker = new BrokerService();
1:845e62a:         broker.setPersistent(false);
1:845e62a:         broker.setUseJmx(true);
1:845e62a:         broker.setPlugins(new BrokerPlugin[]{new DestinationsPlugin()});
1:845e62a:         broker.setDataDirectory("target/test");
1:845e62a:         return broker;
1:845e62a:     }
1:845e62a: 
1:845e62a:     @Test
1:845e62a:     public void testDestinationSave() throws Exception {
1:845e62a: 
1:845e62a:         BrokerView brokerView = broker.getAdminView();
1:845e62a:         brokerView.addQueue("test-queue");
1:845e62a: 
1:845e62a:         broker.stop();
1:845e62a:         broker.waitUntilStopped();
1:845e62a: 
1:845e62a:         broker = createBroker();
1:845e62a:         broker.start();
1:845e62a:         broker.waitUntilStarted();
1:845e62a: 
1:845e62a: 
1:845e62a:         ActiveMQDestination[] destinations = broker.getRegionBroker().getDestinations();
1:845e62a:         for (ActiveMQDestination destination : destinations) {
1:845e62a:             if (destination.isQueue()) {
1:845e62a:                 assertEquals("test-queue", destination.getPhysicalName());
1:845e62a:             }
1:845e62a:         }
1:845e62a: 
1:845e62a:     }
1:845e62a: 
1:845e62a: }
============================================================================
author:Kevin Earls
-------------------------------------------------------------------------------
commit:8f13847
/////////////////////////////////////////////////////////////////////////
1: import static org.junit.Assert.*;
author:Dejan Bosanac
-------------------------------------------------------------------------------
commit:845e62a
/////////////////////////////////////////////////////////////////////////
1: /**
1:  * Licensed to the Apache Software Foundation (ASF) under one or more
1:  * contributor license agreements.  See the NOTICE file distributed with
1:  * this work for additional information regarding copyright ownership.
1:  * The ASF licenses this file to You under the Apache License, Version 2.0
1:  * (the "License"); you may not use this file except in compliance with
1:  * the License.  You may obtain a copy of the License at
1:  *
1:  *      http://www.apache.org/licenses/LICENSE-2.0
1:  *
1:  * Unless required by applicable law or agreed to in writing, software
1:  * distributed under the License is distributed on an "AS IS" BASIS,
1:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:  * See the License for the specific language governing permissions and
1:  * limitations under the License.
1:  */
1: package org.apache.activemq.broker.util;
1: 
1: 
1: import org.apache.activemq.broker.BrokerPlugin;
1: import org.apache.activemq.broker.BrokerService;
1: import org.apache.activemq.broker.jmx.BrokerView;
1: import org.apache.activemq.command.ActiveMQDestination;
1: import org.junit.After;
1: import org.junit.Before;
1: import org.junit.Test;
1: 
0: import static junit.framework.Assert.assertEquals;
1: 
1: 
1: public class DestinationsPluginTest {
1: 
1:     BrokerService broker;
1: 
1:     @Before
1:     public void setUp() throws Exception {
1:         broker = createBroker();
1:         broker.start();
1:         broker.waitUntilStarted();
1:     }
1: 
1:     @After
1:     public void shutdown() throws Exception {
1:         broker.stop();
1:         broker.waitUntilStopped();
1:     }
1: 
1:     protected BrokerService createBroker() {
1:         BrokerService broker = new BrokerService();
1:         broker.setPersistent(false);
1:         broker.setUseJmx(true);
1:         broker.setPlugins(new BrokerPlugin[]{new DestinationsPlugin()});
1:         broker.setDataDirectory("target/test");
1:         return broker;
1:     }
1: 
1:     @Test
1:     public void testDestinationSave() throws Exception {
1: 
1:         BrokerView brokerView = broker.getAdminView();
1:         brokerView.addQueue("test-queue");
1: 
1:         broker.stop();
1:         broker.waitUntilStopped();
1: 
1:         broker = createBroker();
1:         broker.start();
1:         broker.waitUntilStarted();
1: 
1: 
1:         ActiveMQDestination[] destinations = broker.getRegionBroker().getDestinations();
1:         for (ActiveMQDestination destination : destinations) {
1:             if (destination.isQueue()) {
1:                 assertEquals("test-queue", destination.getPhysicalName());
1:             }
1:         }
1: 
1:     }
1: 
1: }
============================================================================