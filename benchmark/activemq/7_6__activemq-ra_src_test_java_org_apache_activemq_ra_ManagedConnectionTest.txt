1:92a698f: /**
1:57b4941:  * Licensed to the Apache Software Foundation (ASF) under one or more
1:57b4941:  * contributor license agreements.  See the NOTICE file distributed with
1:57b4941:  * this work for additional information regarding copyright ownership.
1:57b4941:  * The ASF licenses this file to You under the Apache License, Version 2.0
1:57b4941:  * (the "License"); you may not use this file except in compliance with
1:57b4941:  * the License.  You may obtain a copy of the License at
1:b0c2a40:  *
1:5f1adbe:  *      http://www.apache.org/licenses/LICENSE-2.0
1:540dd5c:  *
1:40a7d3b:  * Unless required by applicable law or agreed to in writing, software
1:92a698f:  * distributed under the License is distributed on an "AS IS" BASIS,
1:92a698f:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:92a698f:  * See the License for the specific language governing permissions and
1:92a698f:  * limitations under the License.
1:92a698f:  */
1:fd4bb60: package org.apache.activemq.ra;
36:40a7d3b: 
1:ba1bd26: import static org.junit.Assert.assertFalse;
1:ba1bd26: import static org.junit.Assert.assertNotNull;
1:ba1bd26: import static org.junit.Assert.assertTrue;
1:ba1bd26: import static org.junit.Assert.fail;
1:ba1bd26: 
1:40a7d3b: import javax.jms.ConnectionFactory;
1:40a7d3b: import javax.jms.JMSException;
1:40a7d3b: import javax.jms.MessageProducer;
1:40a7d3b: import javax.jms.Queue;
1:40a7d3b: import javax.jms.QueueConnection;
1:40a7d3b: import javax.jms.QueueConnectionFactory;
1:40a7d3b: import javax.jms.Session;
1:40a7d3b: import javax.jms.TopicConnection;
1:40a7d3b: import javax.jms.TopicConnectionFactory;
1:40a7d3b: import javax.resource.ResourceException;
1:40a7d3b: import javax.resource.spi.ConnectionEvent;
1:40a7d3b: 
1:5a27bdf: import org.apache.activemq.ActiveMQConnection;
1:fd4bb60: import org.apache.activemq.ActiveMQConnectionFactory;
1:5a27bdf: import org.junit.After;
1:ba1bd26: import org.junit.Before;
1:ba1bd26: import org.junit.Test;
1:540dd5c: 
1:ba1bd26: public class ManagedConnectionTest {
1:540dd5c: 
1:3858faa:     private static final String DEFAULT_HOST = "vm://localhost?broker.persistent=false";
1:540dd5c: 
1:40a7d3b:     private ConnectionManagerAdapter connectionManager = new ConnectionManagerAdapter();
1:40a7d3b:     private ActiveMQManagedConnectionFactory managedConnectionFactory;
1:40a7d3b:     private ConnectionFactory connectionFactory;
1:40a7d3b:     private ManagedConnectionProxy connection;
1:40a7d3b:     private ActiveMQManagedConnection managedConnection;
1:540dd5c: 
1:ba1bd26:     @Before
1:ba1bd26:     public void setUp() throws Exception {
1:40a7d3b:         managedConnectionFactory = new ActiveMQManagedConnectionFactory();
1:8733d17:         managedConnectionFactory.setServerUrl(DEFAULT_HOST);
1:8733d17:         managedConnectionFactory.setUserName(ActiveMQConnectionFactory.DEFAULT_USER);
1:8733d17:         managedConnectionFactory.setPassword(ActiveMQConnectionFactory.DEFAULT_PASSWORD);
1:540dd5c: 
1:540dd5c:         connectionFactory = (ConnectionFactory)managedConnectionFactory.createConnectionFactory(connectionManager);
1:540dd5c:         connection = (ManagedConnectionProxy)connectionFactory.createConnection();
1:40a7d3b:         managedConnection = connection.getManagedConnection();
1:540dd5c:     }
1:540dd5c: 
1:5a27bdf:     @After
1:5a27bdf:     public void destroyManagedConnection() throws Exception {
1:5a27bdf:         if (managedConnection != null) {
1:5a27bdf:             managedConnection.destroy();
1:5a27bdf:         }
1:5a27bdf:     }
1:5a27bdf: 
1:ba1bd26:     @Test(timeout = 60000)
1:40a7d3b:     public void testConnectionCloseEvent() throws ResourceException, JMSException {
1:540dd5c: 
1:540dd5c:         final boolean test[] = new boolean[] {
1:540dd5c:             false
1:540dd5c:         };
1:40a7d3b:         connectionManager.addConnectionEventListener(new ConnectionEventListenerAdapter() {
1:ba1bd26:             @Override
1:540dd5c:             public void connectionClosed(ConnectionEvent arg0) {
1:540dd5c:                 test[0] = true;
1:540dd5c:             }
2:540dd5c:         });
1:40a7d3b:         connection.close();
1:540dd5c:         assertTrue(test[0]);
1:540dd5c:     }
1:540dd5c: 
1:ba1bd26:     @Test(timeout = 60000)
1:40a7d3b:     public void testLocalTransactionCommittedEvent() throws ResourceException, JMSException {
1:540dd5c: 
1:540dd5c:         final boolean test[] = new boolean[] {
1:540dd5c:             false
1:540dd5c:         };
1:40a7d3b:         connectionManager.addConnectionEventListener(new ConnectionEventListenerAdapter() {
1:ba1bd26:             @Override
1:540dd5c:             public void localTransactionCommitted(ConnectionEvent arg0) {
1:540dd5c:                 test[0] = true;
1:540dd5c:             }
1:540dd5c:         });
1:540dd5c: 
1:40a7d3b:         managedConnection.getLocalTransaction().begin();
1:540dd5c:         Session session = connection.createSession(true, 0);
1:540dd5c: 
2:40a7d3b:         doWork(session);
1:40a7d3b:         session.commit();
1:540dd5c: 
1:540dd5c:         assertTrue(test[0]);
1:540dd5c:     }
1:540dd5c: 
1:ba1bd26:     @Test(timeout = 60000)
1:40a7d3b:     public void testLocalTransactionRollbackEvent() throws ResourceException, JMSException {
1:540dd5c: 
1:540dd5c:         final boolean test[] = new boolean[] {
1:540dd5c:             false
1:540dd5c:         };
1:40a7d3b:         connectionManager.addConnectionEventListener(new ConnectionEventListenerAdapter() {
1:ba1bd26:             @Override
1:540dd5c:             public void localTransactionRolledback(ConnectionEvent arg0) {
1:540dd5c:                 test[0] = true;
1:540dd5c:             }
1:540dd5c:         });
1:40a7d3b:         managedConnection.getLocalTransaction().begin();
1:540dd5c:         Session session = connection.createSession(true, 0);
1:40a7d3b:         doWork(session);
1:40a7d3b:         session.rollback();
1:540dd5c: 
1:540dd5c:         assertTrue(test[0]);
1:540dd5c:     }
1:540dd5c: 
1:ba1bd26:     @Test(timeout = 60000)
1:40a7d3b:     public void testLocalTransactionStartedEvent() throws ResourceException, JMSException {
1:540dd5c: 
1:540dd5c:         final boolean test[] = new boolean[] {
1:540dd5c:             false
1:540dd5c:         };
1:40a7d3b:         connectionManager.addConnectionEventListener(new ConnectionEventListenerAdapter() {
1:ba1bd26:             @Override
1:540dd5c:             public void localTransactionStarted(ConnectionEvent arg0) {
1:540dd5c:                 test[0] = true;
1:540dd5c:             }
1:540dd5c:         });
1:540dd5c: 
1:540dd5c:         // Begin the transaction... that should kick off the event.
1:40a7d3b:         managedConnection.getLocalTransaction().begin();
1:540dd5c:         Session session = connection.createSession(true, 0);
1:40a7d3b:         doWork(session);
1:540dd5c: 
1:540dd5c:         assertTrue(test[0]);
12:40a7d3b:     }
1:540dd5c: 
4:40a7d3b:     /**
1:540dd5c:      * A managed connection that has been clean up should throw exceptions when
1:540dd5c:      * it used.
3:40a7d3b:      */
1:ba1bd26:     @Test(timeout = 60000)
1:40a7d3b:     public void testCleanup() throws ResourceException, JMSException {
1:540dd5c: 
1:40a7d3b:         // Do some work and close it...
1:540dd5c:         Session session = connection.createSession(true, 0);
1:40a7d3b:         doWork(session);
1:40a7d3b:         connection.close();
3:40a7d3b:         try {
1:ba1bd26:             // This should throw exception
1:540dd5c:             doWork(session);
1:540dd5c:             fail("Using a session after the connection is closed should throw exception.");
1:540dd5c:         } catch (JMSException e) {
1:40a7d3b:         }
1:40a7d3b:     }
1:540dd5c: 
1:ba1bd26:     @Test(timeout = 60000)
1:5a27bdf:     public void testSetClientIdAfterCleanup() throws Exception {
1:5a27bdf: 
1:5a27bdf:         connection.setClientID("test");
1:5a27bdf:         try {
1:5a27bdf:             connection.setClientID("test");
1:5a27bdf:             fail("Should have received JMSException");
1:5a27bdf:         } catch (JMSException e) {
1:5a27bdf:         }
1:5a27bdf: 
1:5a27bdf:         ActiveMQConnection physicalConnection = (ActiveMQConnection) managedConnection.getPhysicalConnection();
1:5a27bdf:         try {
1:5a27bdf:             physicalConnection.setClientID("testTwo");
1:5a27bdf:             fail("Should have received JMSException");
1:5a27bdf:         } catch (JMSException e) {
1:5a27bdf:         }
1:5a27bdf: 
1:5a27bdf:         // close the proxy
1:5a27bdf:         connection.close();
1:5a27bdf: 
1:5a27bdf:         // can set the id on the physical connection again after cleanup
1:5a27bdf:         physicalConnection.setClientID("test3");
1:5a27bdf: 
1:5a27bdf:         try {
1:5a27bdf:             physicalConnection.setClientID("test4");
1:5a27bdf:             fail("Should have received JMSException");
1:5a27bdf:         } catch (JMSException e) {
1:5a27bdf:         }
1:5a27bdf:     }
1:5a27bdf: 
1:5a27bdf:     @Test(timeout = 60000)
1:40a7d3b:     public void testSessionCloseIndependance() throws ResourceException, JMSException {
1:540dd5c: 
1:540dd5c:         Session session1 = connection.createSession(true, 0);
1:540dd5c:         Session session2 = connection.createSession(true, 0);
1:540dd5c:         assertTrue(session1 != session2);
1:540dd5c: 
1:540dd5c:         doWork(session1);
1:40a7d3b:         session1.close();
1:540dd5c:         try {
1:ba1bd26:             // This should throw exception
1:540dd5c:             doWork(session1);
1:540dd5c:             fail("Using a session after the connection is closed should throw exception.");
1:540dd5c:         } catch (JMSException e) {
1:40a7d3b:         }
1:540dd5c: 
1:40a7d3b:         // Make sure that closing session 1 does not close session 2
2:40a7d3b:         doWork(session2);
1:40a7d3b:         session2.close();
1:540dd5c:         try {
1:ba1bd26:             // This should throw exception
1:540dd5c:             doWork(session2);
1:540dd5c:             fail("Using a session after the connection is closed should throw exception.");
1:540dd5c:         } catch (JMSException e) {
1:40a7d3b:         }
1:40a7d3b:     }
1:40a7d3b: 
1:40a7d3b:     /**
1:40a7d3b:      * Does some work so that we can test commit/rollback etc.
1:ba1bd26:      *
1:40a7d3b:      * @throws JMSException
1:40a7d3b:      */
1:40a7d3b:     public void doWork(Session session) throws JMSException {
1:540dd5c:         Queue t = session.createQueue("TEST");
1:540dd5c:         MessageProducer producer = session.createProducer(t);
1:540dd5c:         producer.send(session.createTextMessage("test message."));
1:40a7d3b:     }
1:40a7d3b: 
1:ba1bd26:     @Test(timeout = 60000)
1:40a7d3b:     public void testImplementsQueueAndTopicConnection() throws Exception {
1:40a7d3b:         QueueConnection qc = ((QueueConnectionFactory)connectionFactory).createQueueConnection();
1:40a7d3b:         assertNotNull(qc);
1:40a7d3b:         TopicConnection tc = ((TopicConnectionFactory)connectionFactory).createTopicConnection();
1:40a7d3b:         assertNotNull(tc);
1:40a7d3b:     }
1:40a7d3b: 
1:ba1bd26:     @Test(timeout = 60000)
1:40a7d3b:     public void testSelfEquality() {
1:40a7d3b:         assertEquality(managedConnection, managedConnection);
1:40a7d3b:     }
1:40a7d3b: 
1:ba1bd26:     @Test(timeout = 60000)
1:40a7d3b:     public void testSamePropertiesButNotEqual() throws Exception {
1:540dd5c:         ManagedConnectionProxy newConnection = (ManagedConnectionProxy)connectionFactory.createConnection();
1:40a7d3b:         assertNonEquality(managedConnection, newConnection.getManagedConnection());
1:c9b208f:         newConnection.close();
1:40a7d3b:     }
1:40a7d3b: 
1:40a7d3b:     private void assertEquality(ActiveMQManagedConnection leftCon, ActiveMQManagedConnection rightCon) {
1:40a7d3b:         assertTrue("ActiveMQManagedConnection are not equal", leftCon.equals(rightCon));
1:40a7d3b:         assertTrue("ActiveMQManagedConnection are not equal", rightCon.equals(leftCon));
1:40a7d3b:         assertTrue("HashCodes are not equal", leftCon.hashCode() == rightCon.hashCode());
1:40a7d3b:     }
1:40a7d3b: 
1:40a7d3b:     private void assertNonEquality(ActiveMQManagedConnection leftCon, ActiveMQManagedConnection rightCon) {
1:40a7d3b:         assertFalse("ActiveMQManagedConnection are equal", leftCon.equals(rightCon));
1:40a7d3b:         assertFalse("ActiveMQManagedConnection are equal", rightCon.equals(leftCon));
1:40a7d3b:         assertFalse("HashCodes are equal", leftCon.hashCode() == rightCon.hashCode());
1:40a7d3b:     }
1:40a7d3b: }
============================================================================
author:Hadrian Zbarcea
-------------------------------------------------------------------------------
commit:d54d046
author:Timothy Bish
-------------------------------------------------------------------------------
commit:c9b208f
/////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////
1:         newConnection.close();
commit:ba1bd26
/////////////////////////////////////////////////////////////////////////
1: import static org.junit.Assert.assertFalse;
1: import static org.junit.Assert.assertNotNull;
1: import static org.junit.Assert.assertTrue;
1: import static org.junit.Assert.fail;
1: 
/////////////////////////////////////////////////////////////////////////
1: import org.junit.Before;
1: import org.junit.Test;
1: public class ManagedConnectionTest {
/////////////////////////////////////////////////////////////////////////
1:     @Before
1:     public void setUp() throws Exception {
/////////////////////////////////////////////////////////////////////////
1:     @Test(timeout = 60000)
1:             @Override
/////////////////////////////////////////////////////////////////////////
1:     @Test(timeout = 60000)
1:             @Override
/////////////////////////////////////////////////////////////////////////
1:     @Test(timeout = 60000)
1:             @Override
/////////////////////////////////////////////////////////////////////////
1:     @Test(timeout = 60000)
1:             @Override
/////////////////////////////////////////////////////////////////////////
1:     @Test(timeout = 60000)
/////////////////////////////////////////////////////////////////////////
1:             // This should throw exception
1:     @Test(timeout = 60000)
/////////////////////////////////////////////////////////////////////////
1:             // This should throw exception
/////////////////////////////////////////////////////////////////////////
1:             // This should throw exception
/////////////////////////////////////////////////////////////////////////
1:      *
/////////////////////////////////////////////////////////////////////////
1:     @Test(timeout = 60000)
/////////////////////////////////////////////////////////////////////////
1:     @Test(timeout = 60000)
1:     @Test(timeout = 60000)
/////////////////////////////////////////////////////////////////////////
author:gtully
-------------------------------------------------------------------------------
commit:5a27bdf
/////////////////////////////////////////////////////////////////////////
1: import org.apache.activemq.ActiveMQConnection;
1: import org.junit.After;
/////////////////////////////////////////////////////////////////////////
1:     @After
1:     public void destroyManagedConnection() throws Exception {
1:         if (managedConnection != null) {
1:             managedConnection.destroy();
1:         }
1:     }
1: 
/////////////////////////////////////////////////////////////////////////
1:     public void testSetClientIdAfterCleanup() throws Exception {
1: 
1:         connection.setClientID("test");
1:         try {
1:             connection.setClientID("test");
1:             fail("Should have received JMSException");
1:         } catch (JMSException e) {
1:         }
1: 
1:         ActiveMQConnection physicalConnection = (ActiveMQConnection) managedConnection.getPhysicalConnection();
1:         try {
1:             physicalConnection.setClientID("testTwo");
1:             fail("Should have received JMSException");
1:         } catch (JMSException e) {
1:         }
1: 
1:         // close the proxy
1:         connection.close();
1: 
1:         // can set the id on the physical connection again after cleanup
1:         physicalConnection.setClientID("test3");
1: 
1:         try {
1:             physicalConnection.setClientID("test4");
1:             fail("Should have received JMSException");
1:         } catch (JMSException e) {
1:         }
1:     }
1: 
1:     @Test(timeout = 60000)
commit:3858faa
/////////////////////////////////////////////////////////////////////////
1:     private static final String DEFAULT_HOST = "vm://localhost?broker.persistent=false";
author:Hiram R. Chirino
-------------------------------------------------------------------------------
commit:b0c2a40
/////////////////////////////////////////////////////////////////////////
1:  * 
commit:540dd5c
/////////////////////////////////////////////////////////////////////////
1: 
1: 
1: 
0:         ActiveMQResourceAdapter adapter = new ActiveMQResourceAdapter();
0:         adapter.setServerUrl(DEFAULT_HOST);
0:         adapter.setUserName(ActiveMQConnectionFactory.DEFAULT_USER);
0:         adapter.setPassword(ActiveMQConnectionFactory.DEFAULT_PASSWORD);
0:         adapter.start(new BootstrapContext() {
0:             public WorkManager getWorkManager() {
0:                 return null;
1:             }
1: 
0:             public XATerminator getXATerminator() {
0:                 return null;
1:             }
1: 
0:             public Timer createTimer() throws UnavailableException {
0:                 return null;
1:             }
1:         });
1: 
1: 
1:         connectionFactory = (ConnectionFactory)managedConnectionFactory.createConnectionFactory(connectionManager);
1:         connection = (ManagedConnectionProxy)connectionFactory.createConnection();
1: 
1: 
1: 
1:         final boolean test[] = new boolean[] {
1:             false
1:         };
1:             public void connectionClosed(ConnectionEvent arg0) {
1:                 test[0] = true;
1:             }
1:         });
1:         assertTrue(test[0]);
1: 
1:         final boolean test[] = new boolean[] {
1:             false
1:         };
1:             public void localTransactionCommitted(ConnectionEvent arg0) {
1:                 test[0] = true;
1:             }
1:         });
1: 
1:         Session session = connection.createSession(true, 0);
1: 
1: 
1:         assertTrue(test[0]);
1: 
1: 
1: 
1:         final boolean test[] = new boolean[] {
1:             false
1:         };
1:             public void localTransactionRolledback(ConnectionEvent arg0) {
1:                 test[0] = true;
1:             }
1:         });
1:         Session session = connection.createSession(true, 0);
1: 
1:         assertTrue(test[0]);
1:     }
1: 
1:         final boolean test[] = new boolean[] {
1:             false
1:         };
1:             public void localTransactionStarted(ConnectionEvent arg0) {
1:                 test[0] = true;
1:             }
1:         });
1: 
1:         // Begin the transaction... that should kick off the event.
1:         Session session = connection.createSession(true, 0);
1: 
1:         assertTrue(test[0]);
1:      * A managed connection that has been clean up should throw exceptions when
1:      * it used.
1: 
1:         Session session = connection.createSession(true, 0);
0:             // This should throw expection
1:             doWork(session);
1:             fail("Using a session after the connection is closed should throw exception.");
1:         } catch (JMSException e) {
1: 
1:         Session session1 = connection.createSession(true, 0);
1:         Session session2 = connection.createSession(true, 0);
1:         assertTrue(session1 != session2);
1: 
1:         doWork(session1);
1:         try {
0:             // This should throw expection
1:             doWork(session1);
1:             fail("Using a session after the connection is closed should throw exception.");
1:         } catch (JMSException e) {
1: 
1:         try {
0:             // This should throw expection
1:             doWork(session2);
1:             fail("Using a session after the connection is closed should throw exception.");
1:         } catch (JMSException e) {
1:      * 
1:         Queue t = session.createQueue("TEST");
1:         MessageProducer producer = session.createProducer(t);
1:         producer.send(session.createTextMessage("test message."));
/////////////////////////////////////////////////////////////////////////
1:         ManagedConnectionProxy newConnection = (ManagedConnectionProxy)connectionFactory.createConnection();
commit:5f1adbe
/////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////
1:  *      http://www.apache.org/licenses/LICENSE-2.0
commit:57b4941
/////////////////////////////////////////////////////////////////////////
1:  * Licensed to the Apache Software Foundation (ASF) under one or more
1:  * contributor license agreements.  See the NOTICE file distributed with
1:  * this work for additional information regarding copyright ownership.
1:  * The ASF licenses this file to You under the Apache License, Version 2.0
1:  * (the "License"); you may not use this file except in compliance with
1:  * the License.  You may obtain a copy of the License at
commit:48b4869
/////////////////////////////////////////////////////////////////////////
0:  * Copyright 2005-2006 The Apache Software Foundation
commit:fd4bb60
/////////////////////////////////////////////////////////////////////////
1: package org.apache.activemq.ra;
/////////////////////////////////////////////////////////////////////////
1: import org.apache.activemq.ActiveMQConnectionFactory;
0: import org.apache.activemq.ra.ActiveMQManagedConnection;
0: import org.apache.activemq.ra.ActiveMQManagedConnectionFactory;
0: import org.apache.activemq.ra.ActiveMQResourceAdapter;
0: import org.apache.activemq.ra.ManagedConnectionProxy;
author:Robert Davies
-------------------------------------------------------------------------------
commit:8733d17
/////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////
1:         managedConnectionFactory.setServerUrl(DEFAULT_HOST);
1:         managedConnectionFactory.setUserName(ActiveMQConnectionFactory.DEFAULT_USER);
1:         managedConnectionFactory.setPassword(ActiveMQConnectionFactory.DEFAULT_PASSWORD);
author:Jonas B. Lim
-------------------------------------------------------------------------------
commit:92a698f
/////////////////////////////////////////////////////////////////////////
1: /**
0:  *
0:  * Copyright 2004 The Apache Software Foundation
0:  *
0:  * Licensed under the Apache License, Version 2.0 (the "License");
0:  * you may not use this file except in compliance with the License.
0:  * You may obtain a copy of the License at
0:  *
0:  *
1:  * distributed under the License is distributed on an "AS IS" BASIS,
1:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:  * See the License for the specific language governing permissions and
1:  * limitations under the License.
1:  */
author:James Strachan
-------------------------------------------------------------------------------
commit:40a7d3b
/////////////////////////////////////////////////////////////////////////
1: /** 
0:  * 
0:  * Copyright 2004 Hiram Chirino
0:  * 
0:  * Licensed under the Apache License, Version 2.0 (the "License"); 
0:  * you may not use this file except in compliance with the License. 
0:  * You may obtain a copy of the License at 
0:  * 
0:  * http://www.apache.org/licenses/LICENSE-2.0
0:  * 
1:  * Unless required by applicable law or agreed to in writing, software
0:  * distributed under the License is distributed on an "AS IS" BASIS, 
0:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. 
0:  * See the License for the specific language governing permissions and 
0:  * limitations under the License. 
0:  * 
0:  **/
0: package org.activemq.ra;
1: 
0: import java.util.Timer;
1: 
1: import javax.jms.ConnectionFactory;
1: import javax.jms.JMSException;
1: import javax.jms.MessageProducer;
1: import javax.jms.Queue;
1: import javax.jms.QueueConnection;
1: import javax.jms.QueueConnectionFactory;
1: import javax.jms.Session;
1: import javax.jms.TopicConnection;
1: import javax.jms.TopicConnectionFactory;
1: import javax.resource.ResourceException;
0: import javax.resource.spi.BootstrapContext;
1: import javax.resource.spi.ConnectionEvent;
0: import javax.resource.spi.UnavailableException;
0: import javax.resource.spi.XATerminator;
0: import javax.resource.spi.work.WorkManager;
1: 
0: import junit.framework.TestCase;
1: 
0: import org.activemq.ActiveMQConnectionFactory;
1: 
1: 
1: /**
0:  * @version $Revision$
1:  */
0: public class ManagedConnectionTest extends TestCase {
1:     
1:     
0:     private static final String DEFAULT_HOST = "vm://localhost";
1:     
1:     private ConnectionManagerAdapter connectionManager = new ConnectionManagerAdapter();
1:     private ActiveMQManagedConnectionFactory managedConnectionFactory;
1:     private ConnectionFactory connectionFactory;
1:     private ManagedConnectionProxy connection;
1:     private ActiveMQManagedConnection managedConnection;
1:     
1:     /**
0:      * @see junit.framework.TestCase#setUp()
1:      */
0:     protected void setUp() throws Exception {
1:         
0:     	ActiveMQResourceAdapter adapter = new ActiveMQResourceAdapter(); 
0:     	adapter.setServerUrl(DEFAULT_HOST);
0:     	adapter.setUserName(ActiveMQConnectionFactory.DEFAULT_USER);
0:     	adapter.setPassword(ActiveMQConnectionFactory.DEFAULT_PASSWORD);
0:     	adapter.start(new BootstrapContext(){
0: 			public WorkManager getWorkManager() {
0: 				return null;
1: 			}
0: 			public XATerminator getXATerminator() {
0: 				return null;
1: 			}
1: 
0: 			public Timer createTimer() throws UnavailableException {
0: 				return null;
1: 			}
0: 		});
1:     	
1:         managedConnectionFactory = new ActiveMQManagedConnectionFactory();
0:         managedConnectionFactory.setResourceAdapter(adapter);
1:     	    	
0:         connectionFactory = (ConnectionFactory) managedConnectionFactory.createConnectionFactory(connectionManager);
0:         connection = (ManagedConnectionProxy) connectionFactory.createConnection();
1:         managedConnection = connection.getManagedConnection();
1:         
1:     }
1:     
1:     public void testConnectionCloseEvent() throws ResourceException, JMSException {
1:         
0:         final boolean test[] = new boolean[]{false};
1:         connectionManager.addConnectionEventListener(new ConnectionEventListenerAdapter() {
0:                 public void connectionClosed(ConnectionEvent arg0) {
0:                     test[0]=true;
1:                 }
0:             });
1:         connection.close();
0:         assertTrue( test[0] );
1:     }
1:     
1:     public void testLocalTransactionCommittedEvent() throws ResourceException, JMSException {
1: 
0:         final boolean test[] = new boolean[]{false};
1:         connectionManager.addConnectionEventListener(new ConnectionEventListenerAdapter() {
0:                 public void localTransactionCommitted(ConnectionEvent arg0) {
0:                     test[0]=true;
1:                 }
0:             });
1:         
1:         managedConnection.getLocalTransaction().begin();
0:         Session session = connection.createSession(true,0);
1:         
1:         doWork(session);
1:         session.commit();
1:         
0:         assertTrue( test[0] );
1:         
1:     }
1:     
1:     public void testLocalTransactionRollbackEvent() throws ResourceException, JMSException {
1:         
0:         final boolean test[] = new boolean[]{false};
1:         connectionManager.addConnectionEventListener(new ConnectionEventListenerAdapter() {
0: 	            public void localTransactionRolledback(ConnectionEvent arg0) {
0: 	                test[0]=true;
1: 	            }
0:             });
1:         managedConnection.getLocalTransaction().begin();
0:         Session session = connection.createSession(true,0);
1:         doWork(session);
1:         session.rollback();
1:         
0:         assertTrue( test[0] );
1:     }    
1: 
1:     public void testLocalTransactionStartedEvent() throws ResourceException, JMSException {
1:         
0:         final boolean test[] = new boolean[]{false};
1:         connectionManager.addConnectionEventListener(new ConnectionEventListenerAdapter() {
0:                 public void localTransactionStarted(ConnectionEvent arg0) {
0:                     test[0]=true;
1:                 }
0:             });
1:         
0:         // Begin the transaction...  that should kick off the event.
1:         managedConnection.getLocalTransaction().begin();
0: 	    Session session = connection.createSession(true,0);
1:         doWork(session);
1:         
0:         assertTrue( test[0] );
1:     }
1: 
1:     /**
0:      * A managed connection that has been clean up should throw exceptions
0:      * when it used.
1:      */
1:     public void testCleanup() throws ResourceException, JMSException {
1:         
1:         // Do some work and close it...
0: 	    Session session = connection.createSession(true,0);
1:         doWork(session);
1:         connection.close();
1:         try {
0: 	        // This should throw expection        
1: 	        doWork(session);
0: 	        fail("Using a session after the connection is closed should throw exception.");
0:         } catch ( JMSException e) {
1:         }
1:     }
1: 
1:     public void testSessionCloseIndependance() throws ResourceException, JMSException {
1:         
0: 	    Session session1 = connection.createSession(true,0);
0: 	    Session session2 = connection.createSession(true,0);
0:         assertTrue( session1!=session2 );
1: 	    
0: 	    doWork(session1);
1:         session1.close();
1:         try {        	
0: 	        // This should throw expection
0: 	        doWork(session1);
0: 	        fail("Using a session after the connection is closed should throw exception.");
0:         } catch ( JMSException e) {
1:         }
1:         
1:         // Make sure that closing session 1 does not close session 2
1:         doWork(session2);
1:         session2.close();
1:         try {        	
0: 	        // This should throw expection
1: 	        doWork(session2);
0: 	        fail("Using a session after the connection is closed should throw exception.");
0:         } catch ( JMSException e) {
1:         }
1:     }
1: 
1:     /**
1:      * Does some work so that we can test commit/rollback etc.
1:      * @throws JMSException
1:      */
1:     public void doWork(Session session) throws JMSException {
0: 	    Queue t = session.createQueue("TEST");
0: 	    MessageProducer producer = session.createProducer(t);
0: 	    producer.send(session.createTextMessage("test message."));
1:     }
1: 
1:     public void testImplementsQueueAndTopicConnection() throws Exception {
1:         QueueConnection qc = ((QueueConnectionFactory)connectionFactory).createQueueConnection();
1:         assertNotNull(qc);
1:         TopicConnection tc = ((TopicConnectionFactory)connectionFactory).createTopicConnection();
1:         assertNotNull(tc);
1:     }
1: 
1:     public void testSelfEquality() {
1:         assertEquality(managedConnection, managedConnection);
1:     }
1: 
1:     public void testSamePropertiesButNotEqual() throws Exception {
0:         ManagedConnectionProxy newConnection = (ManagedConnectionProxy) connectionFactory.createConnection();
1:         assertNonEquality(managedConnection, newConnection.getManagedConnection());
1:     }
1: 
1:     private void assertEquality(ActiveMQManagedConnection leftCon, ActiveMQManagedConnection rightCon) {
1:         assertTrue("ActiveMQManagedConnection are not equal", leftCon.equals(rightCon));
1:         assertTrue("ActiveMQManagedConnection are not equal", rightCon.equals(leftCon));
1:         assertTrue("HashCodes are not equal", leftCon.hashCode() == rightCon.hashCode());
1:     }
1: 
1:     private void assertNonEquality(ActiveMQManagedConnection leftCon, ActiveMQManagedConnection rightCon) {
1:         assertFalse("ActiveMQManagedConnection are equal", leftCon.equals(rightCon));
1:         assertFalse("ActiveMQManagedConnection are equal", rightCon.equals(leftCon));
1:         assertFalse("HashCodes are equal", leftCon.hashCode() == rightCon.hashCode());
1:     }
1: 
1: }
============================================================================