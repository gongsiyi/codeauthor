1:fc00993: /**
1:4102acc:  * Licensed to the Apache Software Foundation (ASF) under one or more
1:4102acc:  * contributor license agreements.  See the NOTICE file distributed with
1:4102acc:  * this work for additional information regarding copyright ownership.
1:4102acc:  * The ASF licenses this file to You under the Apache License, Version 2.0
1:4102acc:  * (the "License"); you may not use this file except in compliance with
1:4102acc:  * the License.  You may obtain a copy of the License at
1:4102acc:  *
1:4102acc:  *      http://www.apache.org/licenses/LICENSE-2.0
1:4102acc:  *
1:4102acc:  * Unless required by applicable law or agreed to in writing, software
1:4102acc:  * distributed under the License is distributed on an "AS IS" BASIS,
1:4102acc:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:4102acc:  * See the License for the specific language governing permissions and
1:4102acc:  * limitations under the License.
1:4102acc:  */
1:4102acc: package org.apache.activemq.camel;
2:4102acc: 
1:74a7a8b: import javax.jms.JMSException;
1:74a7a8b: import javax.jms.Message;
1:74a7a8b: import javax.jms.Topic;
1:74a7a8b: import javax.jms.TopicPublisher;
1:74a7a8b: 
1:4102acc: import org.apache.activemq.ActiveMQSession;
1:4102acc: import org.apache.camel.Endpoint;
1:4102acc: 
1:4102acc: /**
1:4102acc:  * A JMS {@link javax.jms.TopicPublisher} which sends message exchanges to a
1:4102acc:  * Camel {@link Endpoint}
1:b0c2a40:  *
1:4102acc:  * 
1:4102acc:  */
1:4102acc: public class CamelTopicPublisher extends CamelMessageProducer implements TopicPublisher {
1:4102acc: 
1:4102acc:     public CamelTopicPublisher(CamelTopic destination, Endpoint endpoint, ActiveMQSession session) throws JMSException {
1:4102acc:         super(destination, endpoint, session);
1:4102acc:     }
1:4102acc: 
1:4102acc: 
1:4102acc:     /**
1:4102acc:      * Gets the topic associated with this <CODE>TopicPublisher</CODE>.
1:4102acc:      *
1:4102acc:      * @return this publisher's topic
1:4102acc:      * @throws JMSException if the JMS provider fails to get the topic for this
1:4102acc:      *                      <CODE>TopicPublisher</CODE> due to some internal error.
1:4102acc:      */
1:4102acc: 
1:4102acc:     public Topic getTopic() throws JMSException {
1:4102acc:         return (Topic) super.getDestination();
1:4102acc:     }
1:4102acc: 
1:4102acc:     /**
1:4102acc:      * Publishes a message to the topic. Uses the <CODE>TopicPublisher</CODE>'s
1:4102acc:      * default delivery mode, priority, and time to live.
1:4102acc:      *
1:4102acc:      * @param message the message to publish
1:4102acc:      * @throws JMSException                if the JMS provider fails to publish the message due to
1:4102acc:      *                                     some internal error.
1:4102acc:      * @throws javax.jms.MessageFormatException      if an invalid message is specified.
1:4102acc:      * @throws javax.jms.InvalidDestinationException if a client uses this method with a <CODE>TopicPublisher
1:4102acc:      *                                     </CODE> with an invalid topic.
1:4102acc:      * @throws java.lang.UnsupportedOperationException
1:4102acc:      *                                     if a client uses this method with a <CODE>TopicPublisher
1:4102acc:      *                                     </CODE> that did not specify a topic at creation time.
1:4102acc:      * @see javax.jms.MessageProducer#getDeliveryMode()
1:4102acc:      * @see javax.jms.MessageProducer#getTimeToLive()
1:4102acc:      * @see javax.jms.MessageProducer#getPriority()
1:4102acc:      */
1:4102acc: 
1:4102acc:     public void publish(Message message) throws JMSException {
1:4102acc:         super.send(message);
1:4102acc:     }
1:4102acc: 
1:4102acc:     /**
1:4102acc:      * Publishes a message to the topic, specifying delivery mode, priority,
1:4102acc:      * and time to live.
1:4102acc:      *
1:4102acc:      * @param message      the message to publish
1:4102acc:      * @param deliveryMode the delivery mode to use
1:4102acc:      * @param priority     the priority for this message
1:4102acc:      * @param timeToLive   the message's lifetime (in milliseconds)
1:4102acc:      * @throws JMSException                if the JMS provider fails to publish the message due to
1:4102acc:      *                                     some internal error.
1:4102acc:      * @throws javax.jms.MessageFormatException      if an invalid message is specified.
1:4102acc:      * @throws javax.jms.InvalidDestinationException if a client uses this method with a <CODE>TopicPublisher
1:4102acc:      *                                     </CODE> with an invalid topic.
1:4102acc:      * @throws java.lang.UnsupportedOperationException
1:4102acc:      *                                     if a client uses this method with a <CODE>TopicPublisher
1:4102acc:      *                                     </CODE> that did not specify a topic at creation time.
1:4102acc:      */
1:4102acc: 
1:4102acc:     public void publish(Message message, int deliveryMode, int priority,
1:4102acc:                         long timeToLive) throws JMSException {
1:4102acc:         super.send(message, deliveryMode, priority, timeToLive);
1:4102acc:     }
1:4102acc: 
1:4102acc:     /**
1:4102acc:      * Publishes a message to a topic for an unidentified message producer.
1:4102acc:      * Uses the <CODE>TopicPublisher</CODE>'s default delivery mode,
1:4102acc:      * priority, and time to live.
1:4102acc:      * <p/>
1:4102acc:      * <P>
1:4102acc:      * Typically, a message producer is assigned a topic at creation time;
1:4102acc:      * however, the JMS API also supports unidentified message producers, which
1:4102acc:      * require that the topic be supplied every time a message is published.
1:4102acc:      *
1:4102acc:      * @param topic   the topic to publish this message to
1:4102acc:      * @param message the message to publish
1:4102acc:      * @throws JMSException                if the JMS provider fails to publish the message due to
1:4102acc:      *                                     some internal error.
1:4102acc:      * @throws javax.jms.MessageFormatException      if an invalid message is specified.
1:4102acc:      * @throws javax.jms.InvalidDestinationException if a client uses this method with an invalid topic.
1:4102acc:      * @see javax.jms.MessageProducer#getDeliveryMode()
1:4102acc:      * @see javax.jms.MessageProducer#getTimeToLive()
1:4102acc:      * @see javax.jms.MessageProducer#getPriority()
1:4102acc:      */
1:4102acc: 
1:4102acc:     public void publish(Topic topic, Message message) throws JMSException {
1:4102acc:         super.send(topic, message);
1:4102acc:     }
1:4102acc: 
1:4102acc:     /**
1:4102acc:      * Publishes a message to a topic for an unidentified message producer,
1:4102acc:      * specifying delivery mode, priority and time to live.
1:4102acc:      * <p/>
1:4102acc:      * <P>
1:4102acc:      * Typically, a message producer is assigned a topic at creation time;
1:4102acc:      * however, the JMS API also supports unidentified message producers, which
1:4102acc:      * require that the topic be supplied every time a message is published.
1:4102acc:      *
1:4102acc:      * @param topic        the topic to publish this message to
1:4102acc:      * @param message      the message to publish
1:4102acc:      * @param deliveryMode the delivery mode to use
1:4102acc:      * @param priority     the priority for this message
1:4102acc:      * @param timeToLive   the message's lifetime (in milliseconds)
1:4102acc:      * @throws JMSException                if the JMS provider fails to publish the message due to
1:4102acc:      *                                     some internal error.
1:4102acc:      * @throws javax.jms.MessageFormatException      if an invalid message is specified.
1:4102acc:      * @throws javax.jms.InvalidDestinationException if a client uses this method with an invalid topic.
1:4102acc:      */
1:4102acc: 
1:4102acc:     public void publish(Topic topic, Message message, int deliveryMode,
1:4102acc:                         int priority, long timeToLive) throws JMSException {
1:4102acc:         super.send(topic, message, deliveryMode, priority, timeToLive);
1:4102acc:     }
1:4102acc: }
============================================================================
author:Hiram R. Chirino
-------------------------------------------------------------------------------
commit:b0c2a40
/////////////////////////////////////////////////////////////////////////
1:  * 
commit:fc00993
/////////////////////////////////////////////////////////////////////////
1: /**
commit:74a7a8b
/////////////////////////////////////////////////////////////////////////
1: import javax.jms.JMSException;
1: import javax.jms.Message;
1: import javax.jms.Topic;
1: import javax.jms.TopicPublisher;
1: 
author:Guillaume Nodet
-------------------------------------------------------------------------------
commit:702e2a0
author:James Strachan
-------------------------------------------------------------------------------
commit:4102acc
/////////////////////////////////////////////////////////////////////////
0: /*
1:  * Licensed to the Apache Software Foundation (ASF) under one or more
1:  * contributor license agreements.  See the NOTICE file distributed with
1:  * this work for additional information regarding copyright ownership.
1:  * The ASF licenses this file to You under the Apache License, Version 2.0
1:  * (the "License"); you may not use this file except in compliance with
1:  * the License.  You may obtain a copy of the License at
1:  *
1:  *      http://www.apache.org/licenses/LICENSE-2.0
1:  *
1:  * Unless required by applicable law or agreed to in writing, software
1:  * distributed under the License is distributed on an "AS IS" BASIS,
1:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:  * See the License for the specific language governing permissions and
1:  * limitations under the License.
1:  */
1: package org.apache.activemq.camel;
1: 
1: import org.apache.activemq.ActiveMQSession;
1: import org.apache.camel.Endpoint;
1: 
0: import javax.jms.JMSException;
0: import javax.jms.TopicPublisher;
0: import javax.jms.Topic;
0: import javax.jms.Message;
1: 
1: /**
1:  * A JMS {@link javax.jms.TopicPublisher} which sends message exchanges to a
1:  * Camel {@link Endpoint}
1:  *
0:  * @version $Revision: $
1:  */
1: public class CamelTopicPublisher extends CamelMessageProducer implements TopicPublisher {
1: 
1:     public CamelTopicPublisher(CamelTopic destination, Endpoint endpoint, ActiveMQSession session) throws JMSException {
1:         super(destination, endpoint, session);
1:     }
1: 
1: 
1:     /**
1:      * Gets the topic associated with this <CODE>TopicPublisher</CODE>.
1:      *
1:      * @return this publisher's topic
1:      * @throws JMSException if the JMS provider fails to get the topic for this
1:      *                      <CODE>TopicPublisher</CODE> due to some internal error.
1:      */
1: 
1:     public Topic getTopic() throws JMSException {
1:         return (Topic) super.getDestination();
1:     }
1: 
1:     /**
1:      * Publishes a message to the topic. Uses the <CODE>TopicPublisher</CODE>'s
1:      * default delivery mode, priority, and time to live.
1:      *
1:      * @param message the message to publish
1:      * @throws JMSException                if the JMS provider fails to publish the message due to
1:      *                                     some internal error.
1:      * @throws javax.jms.MessageFormatException      if an invalid message is specified.
1:      * @throws javax.jms.InvalidDestinationException if a client uses this method with a <CODE>TopicPublisher
1:      *                                     </CODE> with an invalid topic.
1:      * @throws java.lang.UnsupportedOperationException
1:      *                                     if a client uses this method with a <CODE>TopicPublisher
1:      *                                     </CODE> that did not specify a topic at creation time.
1:      * @see javax.jms.MessageProducer#getDeliveryMode()
1:      * @see javax.jms.MessageProducer#getTimeToLive()
1:      * @see javax.jms.MessageProducer#getPriority()
1:      */
1: 
1:     public void publish(Message message) throws JMSException {
1:         super.send(message);
1:     }
1: 
1:     /**
1:      * Publishes a message to the topic, specifying delivery mode, priority,
1:      * and time to live.
1:      *
1:      * @param message      the message to publish
1:      * @param deliveryMode the delivery mode to use
1:      * @param priority     the priority for this message
1:      * @param timeToLive   the message's lifetime (in milliseconds)
1:      * @throws JMSException                if the JMS provider fails to publish the message due to
1:      *                                     some internal error.
1:      * @throws javax.jms.MessageFormatException      if an invalid message is specified.
1:      * @throws javax.jms.InvalidDestinationException if a client uses this method with a <CODE>TopicPublisher
1:      *                                     </CODE> with an invalid topic.
1:      * @throws java.lang.UnsupportedOperationException
1:      *                                     if a client uses this method with a <CODE>TopicPublisher
1:      *                                     </CODE> that did not specify a topic at creation time.
1:      */
1: 
1:     public void publish(Message message, int deliveryMode, int priority,
1:                         long timeToLive) throws JMSException {
1:         super.send(message, deliveryMode, priority, timeToLive);
1:     }
1: 
1:     /**
1:      * Publishes a message to a topic for an unidentified message producer.
1:      * Uses the <CODE>TopicPublisher</CODE>'s default delivery mode,
1:      * priority, and time to live.
1:      * <p/>
1:      * <P>
1:      * Typically, a message producer is assigned a topic at creation time;
1:      * however, the JMS API also supports unidentified message producers, which
1:      * require that the topic be supplied every time a message is published.
1:      *
1:      * @param topic   the topic to publish this message to
1:      * @param message the message to publish
1:      * @throws JMSException                if the JMS provider fails to publish the message due to
1:      *                                     some internal error.
1:      * @throws javax.jms.MessageFormatException      if an invalid message is specified.
1:      * @throws javax.jms.InvalidDestinationException if a client uses this method with an invalid topic.
1:      * @see javax.jms.MessageProducer#getDeliveryMode()
1:      * @see javax.jms.MessageProducer#getTimeToLive()
1:      * @see javax.jms.MessageProducer#getPriority()
1:      */
1: 
1:     public void publish(Topic topic, Message message) throws JMSException {
1:         super.send(topic, message);
1:     }
1: 
1:     /**
1:      * Publishes a message to a topic for an unidentified message producer,
1:      * specifying delivery mode, priority and time to live.
1:      * <p/>
1:      * <P>
1:      * Typically, a message producer is assigned a topic at creation time;
1:      * however, the JMS API also supports unidentified message producers, which
1:      * require that the topic be supplied every time a message is published.
1:      *
1:      * @param topic        the topic to publish this message to
1:      * @param message      the message to publish
1:      * @param deliveryMode the delivery mode to use
1:      * @param priority     the priority for this message
1:      * @param timeToLive   the message's lifetime (in milliseconds)
1:      * @throws JMSException                if the JMS provider fails to publish the message due to
1:      *                                     some internal error.
1:      * @throws javax.jms.MessageFormatException      if an invalid message is specified.
1:      * @throws javax.jms.InvalidDestinationException if a client uses this method with an invalid topic.
1:      */
1: 
1:     public void publish(Topic topic, Message message, int deliveryMode,
1:                         int priority, long timeToLive) throws JMSException {
1:         super.send(topic, message, deliveryMode, priority, timeToLive);
1:     }
1: }
============================================================================