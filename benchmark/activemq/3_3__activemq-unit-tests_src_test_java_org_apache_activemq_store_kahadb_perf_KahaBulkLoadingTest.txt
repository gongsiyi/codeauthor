1:456a2ba: /**
1:456a2ba:  * Licensed to the Apache Software Foundation (ASF) under one or more
1:456a2ba:  * contributor license agreements.  See the NOTICE file distributed with
1:456a2ba:  * this work for additional information regarding copyright ownership.
1:456a2ba:  * The ASF licenses this file to You under the Apache License, Version 2.0
1:456a2ba:  * (the "License"); you may not use this file except in compliance with
1:456a2ba:  * the License.  You may obtain a copy of the License at
3:456a2ba:  *
1:456a2ba:  *      http://www.apache.org/licenses/LICENSE-2.0
1:0bbc0ac:  *
1:456a2ba:  * Unless required by applicable law or agreed to in writing, software
1:456a2ba:  * distributed under the License is distributed on an "AS IS" BASIS,
1:456a2ba:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:456a2ba:  * See the License for the specific language governing permissions and
1:456a2ba:  * limitations under the License.
1:456a2ba:  */
1:f62737b: package org.apache.activemq.store.kahadb.perf;
1:456a2ba: 
1:456a2ba: import java.io.File;
1:456a2ba: import java.io.IOException;
1:456a2ba: import java.net.URISyntaxException;
1:456a2ba: import java.util.concurrent.atomic.AtomicBoolean;
1:456a2ba: 
1:456a2ba: import javax.jms.BytesMessage;
1:456a2ba: import javax.jms.ConnectionFactory;
1:456a2ba: import javax.jms.DeliveryMode;
1:456a2ba: import javax.jms.MessageConsumer;
1:456a2ba: import javax.jms.MessageProducer;
1:456a2ba: import javax.jms.Session;
1:456a2ba: 
1:456a2ba: import junit.framework.Test;
1:456a2ba: 
1:456a2ba: import org.apache.activemq.ActiveMQConnectionFactory;
1:456a2ba: import org.apache.activemq.JmsTestSupport;
1:456a2ba: import org.apache.activemq.broker.BrokerService;
1:456a2ba: import org.apache.activemq.command.ActiveMQDestination;
1:456a2ba: import org.apache.activemq.command.ActiveMQQueue;
1:4743a20: import org.apache.activemq.store.kahadb.KahaDBStore;
1:8bf987b: import org.slf4j.Logger;
1:8bf987b: import org.slf4j.LoggerFactory;
1:456a2ba: 
1:456a2ba: /**
1:456a2ba:  * This tests bulk loading and unloading of messages to a Queue.s
1:4743a20:  *
1:4743a20:  *
1:456a2ba:  */
1:456a2ba: public class KahaBulkLoadingTest extends JmsTestSupport {
1:456a2ba: 
1:8bf987b:     private static final Logger LOG = LoggerFactory.getLogger(KahaBulkLoadingTest.class);
1:456a2ba: 
1:456a2ba:     protected int messageSize = 1024 * 4;
1:456a2ba: 
1:4743a20:     @Override
1:456a2ba:     protected BrokerService createBroker() throws Exception {
1:456a2ba:         BrokerService broker = new BrokerService();
1:456a2ba:         KahaDBStore kaha = new KahaDBStore();
1:456a2ba:         kaha.setDirectory(new File("target/activemq-data/kahadb"));
1:456a2ba:         // kaha.deleteAllMessages();
1:456a2ba:         broker.setPersistenceAdapter(kaha);
1:456a2ba:         broker.addConnector("tcp://localhost:0");
1:456a2ba:         return broker;
1:456a2ba:     }
1:456a2ba: 
1:4743a20:     @Override
1:456a2ba:     protected ConnectionFactory createConnectionFactory() throws URISyntaxException, IOException {
1:4743a20:         ActiveMQConnectionFactory factory = new ActiveMQConnectionFactory(broker.getTransportConnectors().get(0).getServer().getConnectURI());
1:456a2ba:         factory.setUseAsyncSend(true);
1:456a2ba:         return factory;
1:456a2ba:     }
1:456a2ba: 
1:456a2ba:     public void testQueueSendThenAddConsumer() throws Exception {
1:456a2ba:         long start;
1:456a2ba:         long end;
1:456a2ba:         ActiveMQDestination destination = new ActiveMQQueue("TEST");
1:456a2ba: 
1:456a2ba:         connection.setUseCompression(false);
1:456a2ba:         connection.getPrefetchPolicy().setAll(10);
1:456a2ba:         connection.start();
1:456a2ba: 
1:456a2ba:         Session session = connection.createSession(false, Session.DUPS_OK_ACKNOWLEDGE);
1:456a2ba: 
1:456a2ba:         LOG.info("Receiving messages that are in the queue");
1:456a2ba:         MessageConsumer consumer = session.createConsumer(destination);
1:456a2ba:         BytesMessage msg = (BytesMessage)consumer.receive(2000);
1:456a2ba:         int consumed = 0;
1:456a2ba:         if( msg!=null ) {
1:456a2ba:             consumed++;
1:456a2ba:         }
1:456a2ba:         while (true) {
1:456a2ba:             int counter = 0;
1:456a2ba:             if (msg == null) {
1:456a2ba:                 break;
1:456a2ba:             }
1:456a2ba:             end = start = System.currentTimeMillis();
1:456a2ba:             int size = 0;
1:456a2ba:             while ((end - start) < 5000) {
1:456a2ba:                 msg = (BytesMessage)consumer.receive(5000);
1:456a2ba:                 if (msg == null) {
1:456a2ba:                     break;
1:456a2ba:                 }
1:456a2ba:                 counter++;
1:456a2ba:                 consumed++;
1:456a2ba:                 end = System.currentTimeMillis();
1:456a2ba:                 size += msg.getBodyLength();
1:456a2ba:             }
1:456a2ba:             LOG.info("Consumed: " + (counter * 1000.0 / (end - start)) + " " + " messages/sec, " + (1.0 * size / (1024.0 * 1024.0)) * ((1000.0 / (end - start))) + " megs/sec ");
1:456a2ba:         }
1:456a2ba:         consumer.close();
1:456a2ba:         LOG.info("Consumed " + consumed + " messages from the queue.");
1:456a2ba: 
1:456a2ba:         MessageProducer producer = session.createProducer(destination);
1:456a2ba:         producer.setDeliveryMode(DeliveryMode.PERSISTENT);
1:456a2ba: 
1:456a2ba:         LOG.info("Sending messages that are " + (messageSize / 1024.0) + "k large");
1:456a2ba:         // Send a message to the broker.
1:456a2ba:         start = System.currentTimeMillis();
1:456a2ba: 
1:456a2ba:         final AtomicBoolean stop = new AtomicBoolean();
1:456a2ba:         Runtime.getRuntime().addShutdownHook(new Thread() {
1:456a2ba:             @Override
1:456a2ba:             public void run() {
1:456a2ba:                 stop.set(true);
1:456a2ba:             }
1:456a2ba:         });
1:456a2ba: 
1:456a2ba:         int produced = 0;
1:456a2ba:         while (!stop.get()) {
1:456a2ba:             end = start = System.currentTimeMillis();
1:456a2ba:             int produceCount = 0;
1:456a2ba:             while ((end - start) < 5000 && !stop.get()) {
1:456a2ba:                 BytesMessage bm = session.createBytesMessage();
1:456a2ba:                 bm.writeBytes(new byte[messageSize]);
1:456a2ba:                 producer.send(bm);
1:456a2ba:                 produceCount++;
1:456a2ba:                 produced++;
1:456a2ba:                 end = System.currentTimeMillis();
1:456a2ba:             }
1:456a2ba:             LOG.info("Produced: " + (produceCount * 1000.0 / (end - start)) + " messages/sec, " + (1.0 * produceCount * messageSize / (1024.0 * 1024.0)) * ((1000.0 / (end - start))) + " megs/sec");
1:456a2ba:         }
1:456a2ba:         LOG.info("Prodcued " + produced + " messages to the queue.");
1:456a2ba: 
1:456a2ba:     }
1:456a2ba: 
1:456a2ba:     public static Test suite() {
1:456a2ba:         return suite(KahaBulkLoadingTest.class);
1:456a2ba:     }
1:456a2ba: 
1:456a2ba:     public static void main(String[] args) {
1:456a2ba:         junit.textui.TestRunner.run(suite());
1:456a2ba:     }
1:456a2ba: 
1:456a2ba: }
============================================================================
author:Timothy A. Bish
-------------------------------------------------------------------------------
commit:4743a20
/////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////
1: import org.apache.activemq.store.kahadb.KahaDBStore;
1:  *
1:  *
/////////////////////////////////////////////////////////////////////////
1:     @Override
/////////////////////////////////////////////////////////////////////////
1:     @Override
1:         ActiveMQConnectionFactory factory = new ActiveMQConnectionFactory(broker.getTransportConnectors().get(0).getServer().getConnectURI());
commit:ef24cc9
author:Hiram R. Chirino
-------------------------------------------------------------------------------
commit:0bbc0ac
/////////////////////////////////////////////////////////////////////////
1:  * 
commit:f62737b
/////////////////////////////////////////////////////////////////////////
1: package org.apache.activemq.store.kahadb.perf;
0: import java.util.concurrent.atomic.AtomicInteger;
0: import javax.jms.Message;
/////////////////////////////////////////////////////////////////////////
0: import org.apache.activemq.broker.ProgressPrinter;
0: import org.apache.activemq.store.kahadb.KahaDBStore;
0:  * @version $Revision: 712224 $
commit:456a2ba
/////////////////////////////////////////////////////////////////////////
1: /**
1:  * Licensed to the Apache Software Foundation (ASF) under one or more
1:  * contributor license agreements.  See the NOTICE file distributed with
1:  * this work for additional information regarding copyright ownership.
1:  * The ASF licenses this file to You under the Apache License, Version 2.0
1:  * (the "License"); you may not use this file except in compliance with
1:  * the License.  You may obtain a copy of the License at
1:  *
1:  *      http://www.apache.org/licenses/LICENSE-2.0
1:  *
1:  * Unless required by applicable law or agreed to in writing, software
1:  * distributed under the License is distributed on an "AS IS" BASIS,
1:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:  * See the License for the specific language governing permissions and
1:  * limitations under the License.
1:  */
0: package org.apache.kahadb.store.perf;
1: 
1: import java.io.File;
1: import java.io.IOException;
1: import java.net.URISyntaxException;
1: import java.util.concurrent.atomic.AtomicBoolean;
1: 
1: import javax.jms.BytesMessage;
1: import javax.jms.ConnectionFactory;
1: import javax.jms.DeliveryMode;
1: import javax.jms.MessageConsumer;
1: import javax.jms.MessageProducer;
1: import javax.jms.Session;
1: 
1: import junit.framework.Test;
1: 
1: import org.apache.activemq.ActiveMQConnectionFactory;
1: import org.apache.activemq.JmsTestSupport;
1: import org.apache.activemq.broker.BrokerService;
0: import org.apache.activemq.broker.TransportConnector;
1: import org.apache.activemq.command.ActiveMQDestination;
1: import org.apache.activemq.command.ActiveMQQueue;
0: import org.apache.commons.logging.Log;
0: import org.apache.commons.logging.LogFactory;
0: import org.apache.kahadb.store.KahaDBStore;
1: 
1: /**
1:  * This tests bulk loading and unloading of messages to a Queue.s
1:  * 
0:  * @version $Revision$
1:  */
1: public class KahaBulkLoadingTest extends JmsTestSupport {
1: 
0:     private static final Log LOG = LogFactory.getLog(KahaBulkLoadingTest.class);
1: 
1:     protected int messageSize = 1024 * 4;
1: 
1:     protected BrokerService createBroker() throws Exception {
1:         BrokerService broker = new BrokerService();
1:         KahaDBStore kaha = new KahaDBStore();
1:         kaha.setDirectory(new File("target/activemq-data/kahadb"));
1:         // kaha.deleteAllMessages();
1:         broker.setPersistenceAdapter(kaha);
1:         broker.addConnector("tcp://localhost:0");
1:         return broker;
1:     }
1: 
1:     protected ConnectionFactory createConnectionFactory() throws URISyntaxException, IOException {
0:         ActiveMQConnectionFactory factory = new ActiveMQConnectionFactory(((TransportConnector)broker.getTransportConnectors().get(0)).getServer().getConnectURI());
1:         factory.setUseAsyncSend(true);
1:         return factory;
1:     }
1: 
1:     public void testQueueSendThenAddConsumer() throws Exception {
1:         long start;
1:         long end;
1:         ActiveMQDestination destination = new ActiveMQQueue("TEST");
1: 
1:         connection.setUseCompression(false);
1:         connection.getPrefetchPolicy().setAll(10);
1:         connection.start();
1: 
1:         Session session = connection.createSession(false, Session.DUPS_OK_ACKNOWLEDGE);
1: 
1:         LOG.info("Receiving messages that are in the queue");
1:         MessageConsumer consumer = session.createConsumer(destination);
1:         BytesMessage msg = (BytesMessage)consumer.receive(2000);
1:         int consumed = 0;
1:         if( msg!=null ) {
1:             consumed++;
1:         }
1:         while (true) {
1:             int counter = 0;
1:             if (msg == null) {
1:                 break;
1:             }
1:             end = start = System.currentTimeMillis();
1:             int size = 0;
1:             while ((end - start) < 5000) {
1:                 msg = (BytesMessage)consumer.receive(5000);
1:                 if (msg == null) {
1:                     break;
1:                 }
1:                 counter++;
1:                 consumed++;
1:                 end = System.currentTimeMillis();
1:                 size += msg.getBodyLength();
1:             }
1:             LOG.info("Consumed: " + (counter * 1000.0 / (end - start)) + " " + " messages/sec, " + (1.0 * size / (1024.0 * 1024.0)) * ((1000.0 / (end - start))) + " megs/sec ");
1:         }
1:         consumer.close();
1:         LOG.info("Consumed " + consumed + " messages from the queue.");
1: 
1:         MessageProducer producer = session.createProducer(destination);
1:         producer.setDeliveryMode(DeliveryMode.PERSISTENT);
1: 
1:         LOG.info("Sending messages that are " + (messageSize / 1024.0) + "k large");
1:         // Send a message to the broker.
1:         start = System.currentTimeMillis();
1: 
1:         final AtomicBoolean stop = new AtomicBoolean();
1:         Runtime.getRuntime().addShutdownHook(new Thread() {
1:             @Override
1:             public void run() {
1:                 stop.set(true);
1:             }
1:         });
1: 
1:         int produced = 0;
1:         while (!stop.get()) {
1:             end = start = System.currentTimeMillis();
1:             int produceCount = 0;
1:             while ((end - start) < 5000 && !stop.get()) {
1:                 BytesMessage bm = session.createBytesMessage();
1:                 bm.writeBytes(new byte[messageSize]);
1:                 producer.send(bm);
1:                 produceCount++;
1:                 produced++;
1:                 end = System.currentTimeMillis();
1:             }
1:             LOG.info("Produced: " + (produceCount * 1000.0 / (end - start)) + " messages/sec, " + (1.0 * produceCount * messageSize / (1024.0 * 1024.0)) * ((1000.0 / (end - start))) + " megs/sec");
1:         }
1:         LOG.info("Prodcued " + produced + " messages to the queue.");
1: 
1:     }
1: 
1:     public static Test suite() {
1:         return suite(KahaBulkLoadingTest.class);
1:     }
1: 
1:     public static void main(String[] args) {
1:         junit.textui.TestRunner.run(suite());
1:     }
1: 
1: }
author:Bosanac Dejan
-------------------------------------------------------------------------------
commit:8bf987b
/////////////////////////////////////////////////////////////////////////
1: import org.slf4j.Logger;
1: import org.slf4j.LoggerFactory;
/////////////////////////////////////////////////////////////////////////
1:     private static final Logger LOG = LoggerFactory.getLogger(KahaBulkLoadingTest.class);
============================================================================