1:4c38438: /**
1:4c38438:  * Licensed to the Apache Software Foundation (ASF) under one or more
1:4c38438:  * contributor license agreements.  See the NOTICE file distributed with
1:4c38438:  * this work for additional information regarding copyright ownership.
1:4c38438:  * The ASF licenses this file to You under the Apache License, Version 2.0
1:4c38438:  * (the "License"); you may not use this file except in compliance with
1:4c38438:  * the License.  You may obtain a copy of the License at
1:4c38438:  *
1:4c38438:  *      http://www.apache.org/licenses/LICENSE-2.0
1:4c38438:  *
1:4c38438:  * Unless required by applicable law or agreed to in writing, software
1:4c38438:  * distributed under the License is distributed on an "AS IS" BASIS,
1:4c38438:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:4c38438:  * See the License for the specific language governing permissions and
1:4c38438:  * limitations under the License.
1:4c38438:  */
1:4c38438: package org.apache.activemq.transport.mqtt;
4:4c38438: 
1:4c38438: import java.io.DataOutputStream;
1:4c38438: import java.io.EOFException;
1:4c38438: import java.io.IOException;
1:4c38438: import java.net.Socket;
1:4c38438: import java.net.URI;
1:4c38438: import java.net.UnknownHostException;
1:4c38438: import java.nio.ByteBuffer;
1:4c38438: import java.nio.channels.SelectionKey;
1:4c38438: import java.nio.channels.SocketChannel;
1:7a2293d: 
1:4c38438: import javax.net.SocketFactory;
1:7a2293d: 
1:4c38438: import org.apache.activemq.transport.nio.NIOOutputStream;
1:4c38438: import org.apache.activemq.transport.nio.SelectorManager;
1:4c38438: import org.apache.activemq.transport.nio.SelectorSelection;
1:4c38438: import org.apache.activemq.transport.tcp.TcpTransport;
1:4c38438: import org.apache.activemq.util.IOExceptionSupport;
1:4c38438: import org.apache.activemq.util.ServiceStopper;
1:4c38438: import org.apache.activemq.wireformat.WireFormat;
1:4c38438: import org.fusesource.hawtbuf.DataByteArrayInputStream;
1:4c38438: 
1:4c38438: /**
1:4c38438:  * An implementation of the {@link org.apache.activemq.transport.Transport} interface for using MQTT over NIO
1:4c38438:  */
1:4c38438: public class MQTTNIOTransport extends TcpTransport {
1:4c38438: 
1:4c38438:     private SocketChannel channel;
1:4c38438:     private SelectorSelection selection;
1:4c38438: 
1:4c38438:     private ByteBuffer inputBuffer;
1:4c38438:     MQTTCodec codec;
1:4c38438: 
1:4c38438:     public MQTTNIOTransport(WireFormat wireFormat, SocketFactory socketFactory, URI remoteLocation, URI localLocation) throws UnknownHostException, IOException {
1:4c38438:         super(wireFormat, socketFactory, remoteLocation, localLocation);
1:4c38438:     }
1:4c38438: 
1:4c38438:     public MQTTNIOTransport(WireFormat wireFormat, Socket socket) throws IOException {
1:4c38438:         super(wireFormat, socket);
1:4c38438:     }
1:4c38438: 
1:04ee70a:     public MQTTNIOTransport(WireFormat wireFormat, Socket socket, InitBuffer initBuffer) throws IOException {
1:04ee70a:         super(wireFormat, socket, initBuffer);
1:04ee70a:     }
1:04ee70a: 
1:3454a8b:     @Override
1:4c38438:     protected void initializeStreams() throws IOException {
1:4c38438:         channel = socket.getChannel();
1:4c38438:         channel.configureBlocking(false);
1:4c38438:         // listen for events telling us when the socket is readable.
1:4c38438:         selection = SelectorManager.getInstance().register(channel, new SelectorManager.Listener() {
1:3454a8b:             @Override
1:4c38438:             public void onSelect(SelectorSelection selection) {
1:4c38438:                 if (!isStopped()) {
1:4c38438:                     serviceRead();
1:4c38438:                 }
1:4c38438:             }
1:4c38438: 
1:3454a8b:             @Override
1:4c38438:             public void onError(SelectorSelection selection, Throwable error) {
1:4c38438:                 if (error instanceof IOException) {
1:4c38438:                     onException((IOException) error);
1:4c38438:                 } else {
1:4c38438:                     onException(IOExceptionSupport.create(error));
1:4c38438:                 }
1:4c38438:             }
1:4c38438:         });
1:4c38438: 
1:4c38438:         inputBuffer = ByteBuffer.allocate(8 * 1024);
1:4c38438:         NIOOutputStream outPutStream = new NIOOutputStream(channel, 8 * 1024);
1:3454a8b:         dataOut = new DataOutputStream(outPutStream);
1:3454a8b:         buffOut = outPutStream;
1:3454a8b:         codec = new MQTTCodec(this, (MQTTWireFormat) getWireFormat());
1:04ee70a: 
1:04ee70a:         try {
1:04ee70a:             if (initBuffer != null) {
1:04ee70a:                 processBuffer(initBuffer.buffer, initBuffer.readSize);
1:04ee70a:             }
1:04ee70a:         } catch (IOException e) {
1:04ee70a:             onException(e);
1:04ee70a:         } catch (Throwable e) {
1:04ee70a:             onException(IOExceptionSupport.create(e));
1:04ee70a:         }
1:4c38438:     }
1:4c38438: 
1:4c38438:     private void serviceRead() {
1:4c38438:         try {
1:4c38438: 
1:4c38438:             while (isStarted()) {
1:4c38438:                 // read channel
1:4c38438:                 int readSize = channel.read(inputBuffer);
1:4c38438:                 // channel is closed, cleanup
1:4c38438:                 if (readSize == -1) {
1:4c38438:                     onException(new EOFException());
1:4c38438:                     selection.close();
1:4c38438:                     break;
1:4c38438:                 }
1:4c38438:                 // nothing more to read, break
1:4c38438:                 if (readSize == 0) {
1:4c38438:                     break;
1:4c38438:                 }
1:4c38438: 
1:04ee70a:                 processBuffer(inputBuffer, readSize);
1:4c38438:             }
1:4c38438:         } catch (IOException e) {
1:4c38438:             onException(e);
1:4c38438:         } catch (Throwable e) {
1:4c38438:             onException(IOExceptionSupport.create(e));
1:4c38438:         }
1:4c38438:     }
1:4c38438: 
1:04ee70a:     protected void processBuffer(ByteBuffer buffer, int readSize) throws Exception {
1:04ee70a:         buffer.flip();
1:04ee70a:         DataByteArrayInputStream dis = new DataByteArrayInputStream(buffer.array());
1:04ee70a:         codec.parse(dis, readSize);
1:04ee70a: 
1:04ee70a:         receiveCounter += readSize;
1:04ee70a: 
1:04ee70a:         // clear the buffer
1:04ee70a:         buffer.clear();
1:04ee70a:     }
1:04ee70a: 
1:3454a8b:     @Override
1:4c38438:     protected void doStart() throws Exception {
1:4c38438:         connect();
1:4c38438:         selection.setInterestOps(SelectionKey.OP_READ);
1:4c38438:         selection.enable();
1:4c38438:     }
1:4c38438: 
1:3454a8b:     @Override
1:4c38438:     protected void doStop(ServiceStopper stopper) throws Exception {
1:4c38438:         try {
1:4c38438:             if (selection != null) {
1:4c38438:                 selection.close();
1:4c38438:             }
1:4c38438:         } finally {
1:4c38438:             super.doStop(stopper);
1:4c38438:         }
1:4c38438:     }
1:4c38438: }
============================================================================
author:Christopher L. Shannon (cshannon)
-------------------------------------------------------------------------------
commit:04ee70a
/////////////////////////////////////////////////////////////////////////
1:     public MQTTNIOTransport(WireFormat wireFormat, Socket socket, InitBuffer initBuffer) throws IOException {
1:         super(wireFormat, socket, initBuffer);
1:     }
1: 
/////////////////////////////////////////////////////////////////////////
1: 
1:         try {
1:             if (initBuffer != null) {
1:                 processBuffer(initBuffer.buffer, initBuffer.readSize);
1:             }
1:         } catch (IOException e) {
1:             onException(e);
1:         } catch (Throwable e) {
1:             onException(IOExceptionSupport.create(e));
1:         }
/////////////////////////////////////////////////////////////////////////
1:                 processBuffer(inputBuffer, readSize);
/////////////////////////////////////////////////////////////////////////
1:     protected void processBuffer(ByteBuffer buffer, int readSize) throws Exception {
1:         buffer.flip();
1:         DataByteArrayInputStream dis = new DataByteArrayInputStream(buffer.array());
1:         codec.parse(dis, readSize);
1: 
1:         receiveCounter += readSize;
1: 
1:         // clear the buffer
1:         buffer.clear();
1:     }
1: 
author:Timothy Bish
-------------------------------------------------------------------------------
commit:3454a8b
/////////////////////////////////////////////////////////////////////////
1:     @Override
1:             @Override
1:             @Override
/////////////////////////////////////////////////////////////////////////
1:         dataOut = new DataOutputStream(outPutStream);
1:         buffOut = outPutStream;
1:         codec = new MQTTCodec(this, (MQTTWireFormat) getWireFormat());
/////////////////////////////////////////////////////////////////////////
1:     @Override
1:     @Override
author:Hiram R. Chirino
-------------------------------------------------------------------------------
commit:c5cf038
author:Timothy A. Bish
-------------------------------------------------------------------------------
commit:7a2293d
/////////////////////////////////////////////////////////////////////////
1: 
/////////////////////////////////////////////////////////////////////////
0:                 receiveCounter += readSize;
1: 
author:Robert Davies
-------------------------------------------------------------------------------
commit:4c38438
/////////////////////////////////////////////////////////////////////////
1: /**
1:  * Licensed to the Apache Software Foundation (ASF) under one or more
1:  * contributor license agreements.  See the NOTICE file distributed with
1:  * this work for additional information regarding copyright ownership.
1:  * The ASF licenses this file to You under the Apache License, Version 2.0
1:  * (the "License"); you may not use this file except in compliance with
1:  * the License.  You may obtain a copy of the License at
1:  *
1:  *      http://www.apache.org/licenses/LICENSE-2.0
1:  *
1:  * Unless required by applicable law or agreed to in writing, software
1:  * distributed under the License is distributed on an "AS IS" BASIS,
1:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:  * See the License for the specific language governing permissions and
1:  * limitations under the License.
1:  */
1: package org.apache.activemq.transport.mqtt;
1: 
1: import java.io.DataOutputStream;
1: import java.io.EOFException;
1: import java.io.IOException;
1: import java.net.Socket;
1: import java.net.URI;
1: import java.net.UnknownHostException;
1: import java.nio.ByteBuffer;
1: import java.nio.channels.SelectionKey;
1: import java.nio.channels.SocketChannel;
1: 
1: import javax.net.SocketFactory;
1: import org.apache.activemq.transport.nio.NIOOutputStream;
1: import org.apache.activemq.transport.nio.SelectorManager;
1: import org.apache.activemq.transport.nio.SelectorSelection;
1: import org.apache.activemq.transport.tcp.TcpTransport;
1: import org.apache.activemq.util.IOExceptionSupport;
1: import org.apache.activemq.util.ServiceStopper;
1: import org.apache.activemq.wireformat.WireFormat;
1: import org.fusesource.hawtbuf.DataByteArrayInputStream;
1: 
1: /**
1:  * An implementation of the {@link org.apache.activemq.transport.Transport} interface for using MQTT over NIO
1:  */
1: public class MQTTNIOTransport extends TcpTransport {
1: 
1:     private SocketChannel channel;
1:     private SelectorSelection selection;
1: 
1:     private ByteBuffer inputBuffer;
1:     MQTTCodec codec;
1: 
1:     public MQTTNIOTransport(WireFormat wireFormat, SocketFactory socketFactory, URI remoteLocation, URI localLocation) throws UnknownHostException, IOException {
1:         super(wireFormat, socketFactory, remoteLocation, localLocation);
1:     }
1: 
1:     public MQTTNIOTransport(WireFormat wireFormat, Socket socket) throws IOException {
1:         super(wireFormat, socket);
1:     }
1: 
1:     protected void initializeStreams() throws IOException {
1:         channel = socket.getChannel();
1:         channel.configureBlocking(false);
1:         // listen for events telling us when the socket is readable.
1:         selection = SelectorManager.getInstance().register(channel, new SelectorManager.Listener() {
1:             public void onSelect(SelectorSelection selection) {
1:                 if (!isStopped()) {
1:                     serviceRead();
1:                 }
1:             }
1: 
1:             public void onError(SelectorSelection selection, Throwable error) {
1:                 if (error instanceof IOException) {
1:                     onException((IOException) error);
1:                 } else {
1:                     onException(IOExceptionSupport.create(error));
1:                 }
1:             }
1:         });
1: 
1:         inputBuffer = ByteBuffer.allocate(8 * 1024);
1:         NIOOutputStream outPutStream = new NIOOutputStream(channel, 8 * 1024);
0:         this.dataOut = new DataOutputStream(outPutStream);
0:         this.buffOut = outPutStream;
0:         codec = new MQTTCodec(this);
1:     }
1: 
1:     private void serviceRead() {
1:         try {
1: 
1:             while (isStarted()) {
1:                 // read channel
1:                 int readSize = channel.read(inputBuffer);
1:                 // channel is closed, cleanup
1:                 if (readSize == -1) {
1:                     onException(new EOFException());
1:                     selection.close();
1:                     break;
1:                 }
1:                 // nothing more to read, break
1:                 if (readSize == 0) {
1:                     break;
1:                 }
1: 
0:                 inputBuffer.flip();
0:                 DataByteArrayInputStream dis = new DataByteArrayInputStream(inputBuffer.array());
0:                 codec.parse(dis, readSize);
1: 
0:                 // clear the buffer
0:                 inputBuffer.clear();
1: 
1:             }
1:         } catch (IOException e) {
1:             onException(e);
1:         } catch (Throwable e) {
1:             onException(IOExceptionSupport.create(e));
1:         }
1:     }
1: 
1:     protected void doStart() throws Exception {
1:         connect();
1:         selection.setInterestOps(SelectionKey.OP_READ);
1:         selection.enable();
1:     }
1: 
1:     protected void doStop(ServiceStopper stopper) throws Exception {
1:         try {
1:             if (selection != null) {
1:                 selection.close();
1:             }
1:         } finally {
1:             super.doStop(stopper);
1:         }
1:     }
1: }
============================================================================