2:d29ca2a: /**
1:57b4941:  * Licensed to the Apache Software Foundation (ASF) under one or more
1:57b4941:  * contributor license agreements.  See the NOTICE file distributed with
1:57b4941:  * this work for additional information regarding copyright ownership.
1:57b4941:  * The ASF licenses this file to You under the Apache License, Version 2.0
1:57b4941:  * (the "License"); you may not use this file except in compliance with
1:57b4941:  * the License.  You may obtain a copy of the License at
3:d29ca2a:  *
1:230a86c:  *      http://www.apache.org/licenses/LICENSE-2.0
1:d29ca2a:  *
1:d29ca2a:  * Unless required by applicable law or agreed to in writing, software
1:d29ca2a:  * distributed under the License is distributed on an "AS IS" BASIS,
1:d29ca2a:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:d29ca2a:  * See the License for the specific language governing permissions and
1:d29ca2a:  * limitations under the License.
2:d29ca2a:  */
3:d29ca2a: 
1:d29ca2a: package org.apache.activemq.broker.region;
1:d29ca2a: 
1:d29ca2a: import org.apache.activemq.management.CountStatisticImpl;
1:d29ca2a: import org.apache.activemq.management.PollCountStatisticImpl;
1:d29ca2a: import org.apache.activemq.management.StatsImpl;
1:f71e2fe: import org.apache.activemq.management.*;
1:d29ca2a: 
1:d29ca2a: /**
1:d29ca2a:  * The J2EE Statistics for the a Destination.
1:b0c2a40:  *
1:d29ca2a:  *
1:d29ca2a:  */
1:d29ca2a: public class DestinationStatistics extends StatsImpl {
1:d29ca2a: 
1:d29ca2a:     protected CountStatisticImpl enqueues;
1:d29ca2a:     protected CountStatisticImpl dequeues;
1:25e3c1b:     protected CountStatisticImpl forwards;
1:d29ca2a:     protected CountStatisticImpl consumers;
1:634da7a:     protected CountStatisticImpl producers;
1:d29ca2a:     protected CountStatisticImpl messages;
1:d29ca2a:     protected PollCountStatisticImpl messagesCached;
1:36de58b:     protected CountStatisticImpl dispatched;
1:d4382e4:     protected CountStatisticImpl inflight;
1:c6a485f:     protected CountStatisticImpl expired;
1:c07b233:     protected TimeStatisticImpl processTime;
1:0736953:     protected CountStatisticImpl blockedSends;
1:0736953:     protected TimeStatisticImpl blockedTime;
1:f71e2fe:     protected SizeStatisticImpl messageSize;
1:0736953: 
1:d29ca2a: 
1:d29ca2a:     public DestinationStatistics() {
1:d29ca2a: 
1:d29ca2a:         enqueues = new CountStatisticImpl("enqueues", "The number of messages that have been sent to the destination");
1:36de58b:         dispatched = new CountStatisticImpl("dispatched", "The number of messages that have been dispatched from the destination");
1:36de58b:         dequeues = new CountStatisticImpl("dequeues", "The number of messages that have been acknowledged from the destination");
1:25e3c1b:         forwards = new CountStatisticImpl("forwards", "The number of messages that have been forwarded to a networked broker from the destination");
1:2a153b0:         inflight = new CountStatisticImpl("inflight", "The number of messages dispatched but awaiting acknowledgement");
1:c6a485f:         expired = new CountStatisticImpl("expired", "The number of messages that have expired");
1:d29ca2a: 
1:d29ca2a:         consumers = new CountStatisticImpl("consumers", "The number of consumers that that are subscribing to messages from the destination");
1:3c68051:         consumers.setDoReset(false);
1:634da7a:         producers = new CountStatisticImpl("producers", "The number of producers that that are publishing messages to the destination");
1:3c68051:         producers.setDoReset(false);
1:d29ca2a:         messages = new CountStatisticImpl("messages", "The number of messages that that are being held by the destination");
1:9b32b71:         messages.setDoReset(false);
1:d29ca2a:         messagesCached = new PollCountStatisticImpl("messagesCached", "The number of messages that are held in the destination's memory cache");
1:230a86c:         processTime = new TimeStatisticImpl("processTime", "information around length of time messages are held by a destination");
1:0736953:         blockedSends = new CountStatisticImpl("blockedSends", "number of messages that have to wait for flow control");
1:0736953:         blockedTime = new TimeStatisticImpl("blockedTime","amount of time messages are blocked for flow control");
1:f71e2fe:         messageSize = new SizeStatisticImpl("messageSize","Size of messages passing through the destination");
1:d29ca2a:         addStatistic("enqueues", enqueues);
1:36de58b:         addStatistic("dispatched", dispatched);
1:d29ca2a:         addStatistic("dequeues", dequeues);
1:2a153b0:         addStatistic("inflight", inflight);
1:9b32b71:         addStatistic("expired", expired);
1:d29ca2a:         addStatistic("consumers", consumers);
1:3c68051:         addStatistic("producers", producers);
1:d29ca2a:         addStatistic("messages", messages);
1:d29ca2a:         addStatistic("messagesCached", messagesCached);
1:230a86c:         addStatistic("processTime", processTime);
1:0736953:         addStatistic("blockedSends",blockedSends);
1:0736953:         addStatistic("blockedTime",blockedTime);
1:f71e2fe:         addStatistic("messageSize",messageSize);
6:d29ca2a:     }
1:230a86c: 
1:d29ca2a:     public CountStatisticImpl getEnqueues() {
1:d29ca2a:         return enqueues;
1:d29ca2a:     }
1:d29ca2a: 
1:d29ca2a:     public CountStatisticImpl getDequeues() {
1:d29ca2a:         return dequeues;
1:d29ca2a:     }
1:2a153b0: 
1:25e3c1b:     public CountStatisticImpl getForwards() {
1:25e3c1b:         return forwards;
1:25e3c1b:     }
1:25e3c1b: 
1:2a153b0:     public CountStatisticImpl getInflight() {
1:2a153b0:         return inflight;
1:2a153b0:     }
1:d29ca2a: 
1:c6a485f:     public CountStatisticImpl getExpired() {
1:c6a485f:         return expired;
1:d29ca2a:     }
1:d29ca2a: 
1:d29ca2a:     public CountStatisticImpl getConsumers() {
1:d29ca2a:         return consumers;
1:d29ca2a:     }
1:634da7a: 
1:634da7a:     public CountStatisticImpl getProducers() {
1:634da7a:         return producers;
1:634da7a:     }
1:d29ca2a: 
1:d29ca2a:     public PollCountStatisticImpl getMessagesCached() {
1:d29ca2a:         return messagesCached;
1:d29ca2a:     }
1:d29ca2a: 
1:d29ca2a:     public CountStatisticImpl getMessages() {
1:d29ca2a:         return messages;
1:d29ca2a:     }
1:c07b233: 
1:c07b233:     public void setMessagesCached(PollCountStatisticImpl messagesCached) {
1:c07b233:         this.messagesCached = messagesCached;
1:c07b233:     }
1:c07b233: 
1:c07b233:     public CountStatisticImpl getDispatched() {
1:c07b233:         return dispatched;
1:c07b233:     }
1:c07b233: 
1:230a86c:     public TimeStatisticImpl getProcessTime() {
1:c07b233:         return this.processTime;
1:c07b233:     }
1:d29ca2a: 
1:0736953:     public CountStatisticImpl getBlockedSends(){
1:0736953:         return this.blockedSends;
1:0736953:     }
1:0736953:     public TimeStatisticImpl getBlockedTime(){
1:0736953:         return this.blockedTime;
1:0736953:     }
1:f71e2fe:     public SizeStatisticImpl getMessageSize(){
1:f71e2fe:         return this.messageSize;
1:f71e2fe:     }
1:0736953: 
1:d29ca2a:     public void reset() {
1:3c68051:         if (this.isDoReset()) {
1:3c68051:             super.reset();
1:3c68051:             enqueues.reset();
1:3c68051:             dequeues.reset();
1:25e3c1b:             forwards.reset();
1:3c68051:             dispatched.reset();
1:3c68051:             inflight.reset();
1:c6a485f:             expired.reset();
1:0736953:             blockedSends.reset();
1:0736953:             blockedTime.reset();
1:f71e2fe:             messageSize.reset();
1:3c68051:         }
1:230a86c:     }
1:230a86c: 
1:ccf3f3c:     public void setEnabled(boolean enabled) {
1:ccf3f3c:         super.setEnabled(enabled);
1:ccf3f3c:         enqueues.setEnabled(enabled);
1:ccf3f3c:         dispatched.setEnabled(enabled);
1:ccf3f3c:         dequeues.setEnabled(enabled);
1:25e3c1b:         forwards.setEnabled(enabled);
1:2a153b0:         inflight.setEnabled(enabled);
1:c6a485f:         expired.setEnabled(true);
1:ccf3f3c:         consumers.setEnabled(enabled);
1:634da7a:         producers.setEnabled(enabled);
1:ccf3f3c:         messages.setEnabled(enabled);
1:ccf3f3c:         messagesCached.setEnabled(enabled);
1:c07b233:         processTime.setEnabled(enabled);
1:0736953:         blockedSends.setEnabled(enabled);
1:0736953:         blockedTime.setEnabled(enabled);
1:f71e2fe:         messageSize.setEnabled(enabled);
1:d29ca2a: 
1:230a86c:     }
1:d29ca2a: 
1:d29ca2a:     public void setParent(DestinationStatistics parent) {
1:d29ca2a:         if (parent != null) {
1:d29ca2a:             enqueues.setParent(parent.enqueues);
1:36de58b:             dispatched.setParent(parent.dispatched);
1:d29ca2a:             dequeues.setParent(parent.dequeues);
1:25e3c1b:             forwards.setParent(parent.forwards);
1:2a153b0:             inflight.setParent(parent.inflight);
1:c6a485f:             expired.setParent(parent.expired);
1:d29ca2a:             consumers.setParent(parent.consumers);
1:634da7a:             producers.setParent(parent.producers);
1:d29ca2a:             messagesCached.setParent(parent.messagesCached);
1:d29ca2a:             messages.setParent(parent.messages);
1:c07b233:             processTime.setParent(parent.processTime);
1:0736953:             blockedSends.setParent(parent.blockedSends);
1:0736953:             blockedTime.setParent(parent.blockedTime);
1:f71e2fe:             messageSize.setParent(parent.messageSize);
1:230a86c:         } else {
1:d29ca2a:             enqueues.setParent(null);
1:36de58b:             dispatched.setParent(null);
1:d29ca2a:             dequeues.setParent(null);
1:25e3c1b:             forwards.setParent(null);
1:2a153b0:             inflight.setParent(null);
1:c6a485f:             expired.setParent(null);
1:d29ca2a:             consumers.setParent(null);
1:634da7a:             producers.setParent(null);
1:d29ca2a:             messagesCached.setParent(null);
1:d29ca2a:             messages.setParent(null);
1:c07b233:             processTime.setParent(null);
1:0736953:             blockedSends.setParent(null);
1:0736953:             blockedTime.setParent(null);
1:f71e2fe:             messageSize.setParent(null);
1:86cbdfd:         }
1:d29ca2a:     }
1:c07b233: 
1:d29ca2a: }
============================================================================
author:Hadrian Zbarcea
-------------------------------------------------------------------------------
commit:d54d046
author:gtully
-------------------------------------------------------------------------------
commit:25e3c1b
/////////////////////////////////////////////////////////////////////////
1:     protected CountStatisticImpl forwards;
/////////////////////////////////////////////////////////////////////////
1:         forwards = new CountStatisticImpl("forwards", "The number of messages that have been forwarded to a networked broker from the destination");
/////////////////////////////////////////////////////////////////////////
1:     public CountStatisticImpl getForwards() {
1:         return forwards;
1:     }
1: 
/////////////////////////////////////////////////////////////////////////
1:             forwards.reset();
/////////////////////////////////////////////////////////////////////////
1:         forwards.setEnabled(enabled);
/////////////////////////////////////////////////////////////////////////
1:             forwards.setParent(parent.forwards);
/////////////////////////////////////////////////////////////////////////
1:             forwards.setParent(null);
author:Robert Davies
-------------------------------------------------------------------------------
commit:f71e2fe
/////////////////////////////////////////////////////////////////////////
1: import org.apache.activemq.management.*;
/////////////////////////////////////////////////////////////////////////
1:     protected SizeStatisticImpl messageSize;
/////////////////////////////////////////////////////////////////////////
1:         messageSize = new SizeStatisticImpl("messageSize","Size of messages passing through the destination");
/////////////////////////////////////////////////////////////////////////
1:         addStatistic("messageSize",messageSize);
/////////////////////////////////////////////////////////////////////////
1:     public SizeStatisticImpl getMessageSize(){
1:         return this.messageSize;
1:     }
/////////////////////////////////////////////////////////////////////////
1:             messageSize.reset();
/////////////////////////////////////////////////////////////////////////
1:         messageSize.setEnabled(enabled);
/////////////////////////////////////////////////////////////////////////
1:             messageSize.setParent(parent.messageSize);
/////////////////////////////////////////////////////////////////////////
1:             messageSize.setParent(null);
commit:0736953
/////////////////////////////////////////////////////////////////////////
1:     protected CountStatisticImpl blockedSends;
1:     protected TimeStatisticImpl blockedTime;
1: 
/////////////////////////////////////////////////////////////////////////
1:         blockedSends = new CountStatisticImpl("blockedSends", "number of messages that have to wait for flow control");
1:         blockedTime = new TimeStatisticImpl("blockedTime","amount of time messages are blocked for flow control");
/////////////////////////////////////////////////////////////////////////
1:         addStatistic("blockedSends",blockedSends);
1:         addStatistic("blockedTime",blockedTime);
/////////////////////////////////////////////////////////////////////////
1:     public CountStatisticImpl getBlockedSends(){
1:         return this.blockedSends;
1:     }
1:     public TimeStatisticImpl getBlockedTime(){
1:         return this.blockedTime;
1:     }
1: 
/////////////////////////////////////////////////////////////////////////
1:             blockedSends.reset();
1:             blockedTime.reset();
/////////////////////////////////////////////////////////////////////////
1:         blockedSends.setEnabled(enabled);
1:         blockedTime.setEnabled(enabled);
/////////////////////////////////////////////////////////////////////////
1:             blockedSends.setParent(parent.blockedSends);
1:             blockedTime.setParent(parent.blockedTime);
/////////////////////////////////////////////////////////////////////////
1:             blockedSends.setParent(null);
1:             blockedTime.setParent(null);
commit:3c68051
/////////////////////////////////////////////////////////////////////////
0: import org.apache.tools.ant.taskdefs.condition.IsReference;
/////////////////////////////////////////////////////////////////////////
1:         consumers.setDoReset(false);
1:         producers.setDoReset(false);
/////////////////////////////////////////////////////////////////////////
1:         addStatistic("producers", producers);
/////////////////////////////////////////////////////////////////////////
1:         if (this.isDoReset()) {
1:             super.reset();
1:             enqueues.reset();
1:             dequeues.reset();
1:             dispatched.reset();
1:             inflight.reset();
1:         }
commit:2a153b0
/////////////////////////////////////////////////////////////////////////
1:         inflight = new CountStatisticImpl("inflight", "The number of messages dispatched but awaiting acknowledgement");
/////////////////////////////////////////////////////////////////////////
1:         addStatistic("inflight", inflight);
/////////////////////////////////////////////////////////////////////////
1:     
1:     public CountStatisticImpl getInflight() {
1:         return inflight;
1:     }
/////////////////////////////////////////////////////////////////////////
0:         inflight.reset();
/////////////////////////////////////////////////////////////////////////
1:         inflight.setEnabled(enabled);
/////////////////////////////////////////////////////////////////////////
1:             inflight.setParent(parent.inflight);
/////////////////////////////////////////////////////////////////////////
1:             inflight.setParent(null);
commit:d4382e4
/////////////////////////////////////////////////////////////////////////
1:     protected CountStatisticImpl inflight;
commit:634da7a
/////////////////////////////////////////////////////////////////////////
1:     protected CountStatisticImpl producers;
/////////////////////////////////////////////////////////////////////////
1:         producers = new CountStatisticImpl("producers", "The number of producers that that are publishing messages to the destination");
/////////////////////////////////////////////////////////////////////////
0:         addStatistic("prodcuers", producers);
/////////////////////////////////////////////////////////////////////////
1:     
1:     public CountStatisticImpl getProducers() {
1:         return producers;
1:     }
/////////////////////////////////////////////////////////////////////////
1:         producers.setEnabled(enabled);
/////////////////////////////////////////////////////////////////////////
1:             producers.setParent(parent.producers);
/////////////////////////////////////////////////////////////////////////
1:             producers.setParent(null);
commit:c07b233
/////////////////////////////////////////////////////////////////////////
0: import org.apache.activemq.management.TimeStatisticImpl;
/////////////////////////////////////////////////////////////////////////
1:     protected TimeStatisticImpl processTime;
/////////////////////////////////////////////////////////////////////////
0:         processTime = new TimeStatisticImpl("processTime","information around length of time messages are held by a destination");
0:         addStatistic("processTime",processTime);
/////////////////////////////////////////////////////////////////////////
1:     
1:     public void setMessagesCached(PollCountStatisticImpl messagesCached) {
1:         this.messagesCached = messagesCached;
1:     }
1: 
1:     public CountStatisticImpl getDispatched() {
1:     return dispatched;
1:     }
1: 
0:     public TimeStatisticImpl getProcessTime(){
1:         return this.processTime;
1:     }
/////////////////////////////////////////////////////////////////////////
1:         processTime.setEnabled(enabled);
/////////////////////////////////////////////////////////////////////////
1:             processTime.setParent(parent.processTime);
/////////////////////////////////////////////////////////////////////////
1:             processTime.setParent(null);
1:     
author:Hiram R. Chirino
-------------------------------------------------------------------------------
commit:58aca86
commit:b0c2a40
/////////////////////////////////////////////////////////////////////////
1:  * 
commit:74a7a8b
/////////////////////////////////////////////////////////////////////////
commit:230a86c
/////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////
1:  *      http://www.apache.org/licenses/LICENSE-2.0
/////////////////////////////////////////////////////////////////////////
1:         processTime = new TimeStatisticImpl("processTime", "information around length of time messages are held by a destination");
1:         addStatistic("processTime", processTime);
/////////////////////////////////////////////////////////////////////////
1: 
0:         return dispatched;
1:     public TimeStatisticImpl getProcessTime() {
/////////////////////////////////////////////////////////////////////////
1:     }
1: 
/////////////////////////////////////////////////////////////////////////
1:     }
/////////////////////////////////////////////////////////////////////////
1:         } else {
/////////////////////////////////////////////////////////////////////////
commit:86cbdfd
/////////////////////////////////////////////////////////////////////////
1: }
commit:57b4941
/////////////////////////////////////////////////////////////////////////
1:  * Licensed to the Apache Software Foundation (ASF) under one or more
1:  * contributor license agreements.  See the NOTICE file distributed with
1:  * this work for additional information regarding copyright ownership.
1:  * The ASF licenses this file to You under the Apache License, Version 2.0
1:  * (the "License"); you may not use this file except in compliance with
1:  * the License.  You may obtain a copy of the License at
commit:48b4869
/////////////////////////////////////////////////////////////////////////
0:  * Copyright 2005-2006 The Apache Software Foundation
commit:d29ca2a
/////////////////////////////////////////////////////////////////////////
1: /**
1:  *
0:  * Copyright 2004 The Apache Software Foundation
1:  *
0:  * Licensed under the Apache License, Version 2.0 (the "License");
0:  * you may not use this file except in compliance with the License.
0:  * You may obtain a copy of the License at
1:  *
0:  * http://www.apache.org/licenses/LICENSE-2.0
1:  *
1:  * Unless required by applicable law or agreed to in writing, software
1:  * distributed under the License is distributed on an "AS IS" BASIS,
1:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:  * See the License for the specific language governing permissions and
1:  * limitations under the License.
1:  */
1: 
1: package org.apache.activemq.broker.region;
1: 
0: import org.apache.activemq.command.Message;
1: import org.apache.activemq.management.CountStatisticImpl;
1: import org.apache.activemq.management.PollCountStatisticImpl;
1: import org.apache.activemq.management.StatsImpl;
1: 
1: /**
1:  * The J2EE Statistics for the a Destination.
1:  * 
0:  * @version $Revision$
1:  */
1: public class DestinationStatistics extends StatsImpl {
1: 
1:     protected CountStatisticImpl enqueues;
1:     protected CountStatisticImpl dequeues;
1:     protected CountStatisticImpl consumers;
1:     protected CountStatisticImpl messages;
1:     protected PollCountStatisticImpl messagesCached;
1: 
1:     public DestinationStatistics() {
1: 
1:         enqueues = new CountStatisticImpl("enqueues", "The number of messages that have been sent to the destination");
0:         dequeues = new CountStatisticImpl("dequeues", "The number of messages that have been dispatched from the destination");
1:         consumers = new CountStatisticImpl("consumers", "The number of consumers that that are subscribing to messages from the destination");
1:         messages = new CountStatisticImpl("messages", "The number of messages that that are being held by the destination");
1:         messagesCached = new PollCountStatisticImpl("messagesCached", "The number of messages that are held in the destination's memory cache");
1: 
1:         addStatistic("enqueues", enqueues);
1:         addStatistic("dequeues", dequeues);
1:         addStatistic("consumers", consumers);
1:         addStatistic("messages", messages);
1:         addStatistic("messagesCached", messagesCached);
1:     }
1: 
1:     public CountStatisticImpl getEnqueues() {
1:         return enqueues;
1:     }
1: 
1:     public CountStatisticImpl getDequeues() {
1:         return dequeues;
1:     }
1: 
1:     public CountStatisticImpl getConsumers() {
1:         return consumers;
1:     }
1: 
1:     public PollCountStatisticImpl getMessagesCached() {
1:         return messagesCached;
1:     }
1: 
1:     public CountStatisticImpl getMessages() {
1:         return messages;
1:     }
1: 
1:     public void reset() {
0:         super.reset();
0:         enqueues.reset();
0:         dequeues.reset();
1:     }
1: 
1:     public void setParent(DestinationStatistics parent) {
1:         if (parent != null) {
1:             enqueues.setParent(parent.enqueues);
1:             dequeues.setParent(parent.dequeues);
1:             consumers.setParent(parent.consumers);
1:             messagesCached.setParent(parent.messagesCached);
1:             messages.setParent(parent.messages);
1:         }
0:         else {
1:             enqueues.setParent(null);
1:             dequeues.setParent(null);
1:             consumers.setParent(null);
1:             messagesCached.setParent(null);
1:             messages.setParent(null);
1:         }
1:     }
1: 
0:     public void setMessagesCached(PollCountStatisticImpl messagesCached) {
0:         this.messagesCached = messagesCached;
1:     }
1: 
1:     /**
0:      * Called when a message is enqueued to update the statistics.
1:      */
0:     public void onMessageEnqueue(Message message) {
0:         getEnqueues().increment();
0:         getMessages().increment();
1:     }
1: 
0:     public void onMessageDequeue(Message message) {
0:         getDequeues().increment();
1:     }
1: }
author:Timothy A. Bish
-------------------------------------------------------------------------------
commit:9b32b71
/////////////////////////////////////////////////////////////////////////
0:  *
0:  *
/////////////////////////////////////////////////////////////////////////
0: 
1:         messages.setDoReset(false);
1:         addStatistic("expired", expired);
/////////////////////////////////////////////////////////////////////////
0: 
/////////////////////////////////////////////////////////////////////////
0: 
author:Gary Tully
-------------------------------------------------------------------------------
commit:c6a485f
/////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////
1:     protected CountStatisticImpl expired;
/////////////////////////////////////////////////////////////////////////
1:         expired = new CountStatisticImpl("expired", "The number of messages that have expired");
0:         
/////////////////////////////////////////////////////////////////////////
0:         addStatistic("expired", expired);  
/////////////////////////////////////////////////////////////////////////
1:     public CountStatisticImpl getExpired() {
1:         return expired;
0:     }
0: 
/////////////////////////////////////////////////////////////////////////
1:             expired.reset();
/////////////////////////////////////////////////////////////////////////
1:         expired.setEnabled(true);
/////////////////////////////////////////////////////////////////////////
1:             expired.setParent(parent.expired);
/////////////////////////////////////////////////////////////////////////
1:             expired.setParent(null);
author:Jonas B. Lim
-------------------------------------------------------------------------------
commit:ccf3f3c
/////////////////////////////////////////////////////////////////////////
0:     }     
0:     
1:     public void setEnabled(boolean enabled) {
1:         super.setEnabled(enabled);
1:         enqueues.setEnabled(enabled);
1:         dispatched.setEnabled(enabled);
1:         dequeues.setEnabled(enabled);
1:         consumers.setEnabled(enabled);
1:         messages.setEnabled(enabled);
1:         messagesCached.setEnabled(enabled);
0: 
0:     }    
commit:36de58b
/////////////////////////////////////////////////////////////////////////
1:     protected CountStatisticImpl dispatched;
1:         dispatched = new CountStatisticImpl("dispatched", "The number of messages that have been dispatched from the destination");
1:         dequeues = new CountStatisticImpl("dequeues", "The number of messages that have been acknowledged from the destination");
1:         addStatistic("dispatched", dispatched);
/////////////////////////////////////////////////////////////////////////
0:         dispatched.reset();
1:             dispatched.setParent(parent.dispatched);
/////////////////////////////////////////////////////////////////////////
1:             dispatched.setParent(null);
/////////////////////////////////////////////////////////////////////////
0:     public CountStatisticImpl getDispatched() {
0: 	return dispatched;
============================================================================