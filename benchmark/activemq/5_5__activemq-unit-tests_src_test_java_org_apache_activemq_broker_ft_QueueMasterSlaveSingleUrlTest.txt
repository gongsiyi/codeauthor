1:00bb52b: /**
1:00bb52b:  * Licensed to the Apache Software Foundation (ASF) under one or more
1:00bb52b:  * contributor license agreements.  See the NOTICE file distributed with
1:00bb52b:  * this work for additional information regarding copyright ownership.
1:00bb52b:  * The ASF licenses this file to You under the Apache License, Version 2.0
1:00bb52b:  * (the "License"); you may not use this file except in compliance with
1:00bb52b:  * the License.  You may obtain a copy of the License at
1:00bb52b:  *
1:00bb52b:  *      http://www.apache.org/licenses/LICENSE-2.0
1:00bb52b:  *
1:00bb52b:  * Unless required by applicable law or agreed to in writing, software
1:00bb52b:  * distributed under the License is distributed on an "AS IS" BASIS,
1:00bb52b:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:00bb52b:  * See the License for the specific language governing permissions and
1:00bb52b:  * limitations under the License.
1:00bb52b:  */
1:00bb52b: package org.apache.activemq.broker.ft;
6:00bb52b: 
1:3536b1e: import java.io.File;
1:00bb52b: import java.net.URI;
1:e3a72cf: import java.util.concurrent.TimeUnit;
1:00bb52b: 
1:00bb52b: import org.apache.activemq.ActiveMQConnectionFactory;
1:00bb52b: import org.apache.activemq.broker.BrokerService;
1:00bb52b: import org.apache.activemq.broker.TransportConnector;
1:b2fca26: import org.apache.activemq.leveldb.LevelDBStore;
1:e3a72cf: import org.apache.activemq.util.Wait;
1:b0bf144: import org.junit.Ignore;
1:00bb52b: 
1:00bb52b: 
1:1877a14: public class QueueMasterSlaveSingleUrlTest extends QueueMasterSlaveTestSupport {
1:00bb52b:     private final String brokerUrl = "tcp://localhost:62001";
1:9ad65c6:     private final String singleUriString = "failover://(" + brokerUrl +")?randomize=false&useExponentialBackOff=false";
1:00bb52b: 
1:8ab1934:     @Override
1:f23303a:     protected void setUp() throws Exception {
1:f23303a:         setAutoFail(true);
1:f23303a:         super.setUp();
1:f23303a:     }
1:b0bf144: 
1:b0bf144:     @Override
1:00bb52b:     protected ActiveMQConnectionFactory createConnectionFactory() throws Exception {
1:00bb52b:         return new ActiveMQConnectionFactory(singleUriString);
2:00bb52b:     }
1:8ab1934: 
1:8ab1934:     @Override
1:00bb52b:     protected void createMaster() throws Exception {
1:00bb52b:         master = new BrokerService();
1:3536b1e:         master.setBrokerName("shared-master");
1:3536b1e:         configureSharedPersistenceAdapter(master);
1:00bb52b:         master.addConnector(brokerUrl);
1:00bb52b:         master.start();
1:00bb52b:     }
1:8ab1934: 
1:3536b1e:     private void configureSharedPersistenceAdapter(BrokerService broker) throws Exception {
1:b2fca26:        LevelDBStore adapter = new LevelDBStore();
1:3536b1e:        adapter.setDirectory(new File("shared"));
1:8ab1934:        broker.setPersistenceAdapter(adapter);
1:3536b1e:     }
1:f23303a: 
1:8ab1934:     @Override
1:8ab1934:     protected void createSlave() throws Exception {
1:00bb52b:         new Thread(new Runnable() {
1:8ab1934:             @Override
1:00bb52b:             public void run() {
1:00bb52b:                 try {
1:00bb52b:                     BrokerService broker = new BrokerService();
1:3536b1e:                     broker.setBrokerName("shared-slave");
1:3536b1e:                     configureSharedPersistenceAdapter(broker);
1:8ab1934:                     // add transport as a service so that it is bound on start, after store started
1:00bb52b:                     final TransportConnector tConnector = new TransportConnector();
1:00bb52b:                     tConnector.setUri(new URI(brokerUrl));
1:00bb52b:                     broker.addConnector(tConnector);
1:8ab1934: 
1:00bb52b:                     broker.start();
1:00bb52b:                     slave.set(broker);
1:00bb52b:                     slaveStarted.countDown();
1:00bb52b:                 } catch (Exception e) {
1:00bb52b:                     e.printStackTrace();
1:00bb52b:                 }
1:00bb52b:             }
1:3536b1e: 
1:00bb52b:         }).start();
1:b0bf144:     }
1:b0bf144: 
1:e3a72cf:     public void testNetworkMasterSlave() throws Exception {
1:e3a72cf: 
1:e3a72cf:         final BrokerService client = new BrokerService();
1:e3a72cf:         client.setBrokerName("client");
1:e3a72cf:         client.setPersistent(false);
1:e3a72cf:         client.getManagementContext().setCreateConnector(false);
1:e3a72cf:         client.addNetworkConnector("masterslave:(tcp://localhost:62001,tcp://localhost:62002)");
1:e3a72cf:         client.start();
1:e3a72cf:         try {
1:e3a72cf:             Wait.waitFor(new Wait.Condition() {
1:e3a72cf:                 @Override
1:e3a72cf:                 public boolean isSatisified() throws Exception {
1:e3a72cf:                     return client.getRegionBroker().getPeerBrokerInfos().length == 1;
1:e3a72cf:                 }
1:e3a72cf:             });
1:e3a72cf: 
1:e3a72cf:             assertTrue(!master.isSlave());
1:e3a72cf:             master.stop();
1:e3a72cf:             assertTrue("slave started", slaveStarted.await(60, TimeUnit.SECONDS));
1:e3a72cf:             assertTrue(!slave.get().isSlave());
1:e3a72cf: 
1:e3a72cf:             Wait.waitFor(new Wait.Condition() {
1:e3a72cf:                 @Override
1:e3a72cf:                 public boolean isSatisified() throws Exception {
1:e3a72cf:                     return client.getRegionBroker().getPeerBrokerInfos().length == 1;
1:e3a72cf:                 }
1:e3a72cf:             });
1:e3a72cf:         } finally {
1:e3a72cf:             client.stop();
1:e3a72cf:         }
1:e3a72cf: 
1:e3a72cf:     }
1:00bb52b: }
============================================================================
author:gtully
-------------------------------------------------------------------------------
commit:e3a72cf
/////////////////////////////////////////////////////////////////////////
1: import java.util.concurrent.TimeUnit;
1: import org.apache.activemq.util.Wait;
/////////////////////////////////////////////////////////////////////////
1:     public void testNetworkMasterSlave() throws Exception {
1: 
1:         final BrokerService client = new BrokerService();
1:         client.setBrokerName("client");
1:         client.setPersistent(false);
1:         client.getManagementContext().setCreateConnector(false);
1:         client.addNetworkConnector("masterslave:(tcp://localhost:62001,tcp://localhost:62002)");
1:         client.start();
1:         try {
1:             Wait.waitFor(new Wait.Condition() {
1:                 @Override
1:                 public boolean isSatisified() throws Exception {
1:                     return client.getRegionBroker().getPeerBrokerInfos().length == 1;
1:                 }
1:             });
1: 
1:             assertTrue(!master.isSlave());
1:             master.stop();
1:             assertTrue("slave started", slaveStarted.await(60, TimeUnit.SECONDS));
1:             assertTrue(!slave.get().isSlave());
1: 
1:             Wait.waitFor(new Wait.Condition() {
1:                 @Override
1:                 public boolean isSatisified() throws Exception {
1:                     return client.getRegionBroker().getPeerBrokerInfos().length == 1;
1:                 }
1:             });
1:         } finally {
1:             client.stop();
1:         }
1: 
1:     }
commit:9ad65c6
/////////////////////////////////////////////////////////////////////////
1:     private final String singleUriString = "failover://(" + brokerUrl +")?randomize=false&useExponentialBackOff=false";
/////////////////////////////////////////////////////////////////////////
author:Kevin Earls
-------------------------------------------------------------------------------
commit:b0bf144
/////////////////////////////////////////////////////////////////////////
1: import org.junit.Ignore;
/////////////////////////////////////////////////////////////////////////
1: 
0:     // The @Ignore is just here for documentation, since this is a JUnit3 test
0:     // I added the sleep because without it the two other test cases fail.  I haven't looked into it, but
0:     // my guess whatever setUp does isn't really finished when the teardown runs.
0:     @Ignore("See https://issues.apache.org/jira/browse/AMQ-5164")
1:     @Override
0:     public void testAdvisory() throws Exception {
0:         Thread.sleep(5 * 1000);
0:         //super.testAdvisory();
1:     }
1: 
author:Timothy A. Bish
-------------------------------------------------------------------------------
commit:8ab1934
/////////////////////////////////////////////////////////////////////////
1:     @Override
1:     @Override
/////////////////////////////////////////////////////////////////////////
1: 
1:        broker.setPersistenceAdapter(adapter);
1:     @Override
1:     protected void createSlave() throws Exception {
1:             @Override
1:                     // add transport as a service so that it is bound on start, after store started
1: 
/////////////////////////////////////////////////////////////////////////
1: 
commit:ef24cc9
author:Hiram R. Chirino
-------------------------------------------------------------------------------
commit:b2fca26
/////////////////////////////////////////////////////////////////////////
1: import org.apache.activemq.leveldb.LevelDBStore;
/////////////////////////////////////////////////////////////////////////
1:        LevelDBStore adapter = new LevelDBStore();
commit:1877a14
/////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////
1: public class QueueMasterSlaveSingleUrlTest extends QueueMasterSlaveTestSupport {
author:Gary Tully
-------------------------------------------------------------------------------
commit:f23303a
/////////////////////////////////////////////////////////////////////////
0:     @Override
1:     protected void setUp() throws Exception {
1:         setAutoFail(true);
1:         super.setUp();
1:     }
1: 
commit:3536b1e
/////////////////////////////////////////////////////////////////////////
1: import java.io.File;
0: import java.io.IOException;
0: import org.apache.activemq.store.amq.AMQPersistenceAdapter;
/////////////////////////////////////////////////////////////////////////
1:         master.setBrokerName("shared-master");
1:         configureSharedPersistenceAdapter(master);
1:     private void configureSharedPersistenceAdapter(BrokerService broker) throws Exception {
0:        AMQPersistenceAdapter adapter = new AMQPersistenceAdapter();
1:        adapter.setDirectory(new File("shared"));
0:        broker.setPersistenceAdapter(adapter); 
1:     }
1: 
1:                     broker.setBrokerName("shared-slave");
1:                     configureSharedPersistenceAdapter(broker);
commit:00bb52b
/////////////////////////////////////////////////////////////////////////
1: /**
1:  * Licensed to the Apache Software Foundation (ASF) under one or more
1:  * contributor license agreements.  See the NOTICE file distributed with
1:  * this work for additional information regarding copyright ownership.
1:  * The ASF licenses this file to You under the Apache License, Version 2.0
1:  * (the "License"); you may not use this file except in compliance with
1:  * the License.  You may obtain a copy of the License at
1:  *
1:  *      http://www.apache.org/licenses/LICENSE-2.0
1:  *
1:  * Unless required by applicable law or agreed to in writing, software
1:  * distributed under the License is distributed on an "AS IS" BASIS,
1:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:  * See the License for the specific language governing permissions and
1:  * limitations under the License.
1:  */
1: package org.apache.activemq.broker.ft;
1: 
1: import java.net.URI;
1: 
1: import org.apache.activemq.ActiveMQConnectionFactory;
1: import org.apache.activemq.broker.BrokerService;
1: import org.apache.activemq.broker.TransportConnector;
1: 
1: 
0: public class QueueMasterSlaveSingleUrlTest extends QueueMasterSlaveTest {
1:     private final String brokerUrl = "tcp://localhost:62001";
0:     private final String singleUriString = "failover://(" + brokerUrl +")?randomize=false";
1: 
1:     protected ActiveMQConnectionFactory createConnectionFactory() throws Exception {
1:         return new ActiveMQConnectionFactory(singleUriString);
1:     }
1: 
1:     protected void createMaster() throws Exception {
1:         master = new BrokerService();
0:         master.setBrokerName("shared");
1:         master.addConnector(brokerUrl);
1:         master.start();
1:     }
1:     
0:     protected void createSlave() throws Exception {      
1:         new Thread(new Runnable() {
1:             public void run() {
1:                 try {
1:                     BrokerService broker = new BrokerService();
0:                     broker.setBrokerName("shared");
0:                     // add transport as a service so that it is bound on start, after store started                
1:                     final TransportConnector tConnector = new TransportConnector();
1:                     tConnector.setUri(new URI(brokerUrl));
1:                     broker.addConnector(tConnector);
1:                     
1:                     broker.start();
1:                     slave.set(broker);
1:                     slaveStarted.countDown();
1:                 } catch (Exception e) {
1:                     e.printStackTrace();
1:                 }
1:             }
1: 
1:         }).start();
1:     }
1:         
1: }
============================================================================