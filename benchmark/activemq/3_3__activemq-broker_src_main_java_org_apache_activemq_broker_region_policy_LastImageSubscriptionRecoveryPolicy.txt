1:d29ca2a: /**
1:57b4941:  * Licensed to the Apache Software Foundation (ASF) under one or more
1:57b4941:  * contributor license agreements.  See the NOTICE file distributed with
1:57b4941:  * this work for additional information regarding copyright ownership.
1:57b4941:  * The ASF licenses this file to You under the Apache License, Version 2.0
1:57b4941:  * (the "License"); you may not use this file except in compliance with
1:57b4941:  * the License.  You may obtain a copy of the License at
4:d29ca2a:  *
1:230a86c:  *      http://www.apache.org/licenses/LICENSE-2.0
1:d29ca2a:  *
1:d29ca2a:  * Unless required by applicable law or agreed to in writing, software
1:d29ca2a:  * distributed under the License is distributed on an "AS IS" BASIS,
1:d29ca2a:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:d29ca2a:  * See the License for the specific language governing permissions and
1:d29ca2a:  * limitations under the License.
1:d29ca2a:  */
1:d29ca2a: package org.apache.activemq.broker.region.policy;
1:d29ca2a: 
1:2748ae1: import java.util.ArrayList;
1:2748ae1: import java.util.List;
1:1a5ad28: import org.apache.activemq.broker.Broker;
1:d29ca2a: import org.apache.activemq.broker.ConnectionContext;
1:d29ca2a: import org.apache.activemq.broker.region.MessageReference;
1:a110604: import org.apache.activemq.broker.region.SubscriptionRecovery;
1:d29ca2a: import org.apache.activemq.broker.region.Topic;
1:2748ae1: import org.apache.activemq.command.ActiveMQDestination;
1:2748ae1: import org.apache.activemq.command.Message;
1:2748ae1: import org.apache.activemq.filter.DestinationFilter;
1:c1a0cd6: 
1:d29ca2a: /**
1:230a86c:  * This implementation of {@link SubscriptionRecoveryPolicy} will only keep the
1:230a86c:  * last message.
1:d29ca2a:  * 
1:68d245f:  * @org.apache.xbean.XBean
1:b0c2a40:  * 
1:d29ca2a:  */
1:d29ca2a: public class LastImageSubscriptionRecoveryPolicy implements SubscriptionRecoveryPolicy {
1:d29ca2a: 
1:fc00993:     private volatile MessageReference lastImage;
1:d29ca2a: 
1:7f5213b:     public boolean add(ConnectionContext context, MessageReference node) throws Exception {
1:d29ca2a:         lastImage = node;
1:d29ca2a:         return true;
1:d29ca2a:     }
1:d29ca2a: 
1:230a86c:     public void recover(ConnectionContext context, Topic topic, SubscriptionRecovery sub) throws Exception {
1:d29ca2a:         // Re-dispatch the last message seen.
1:230a86c:         MessageReference node = lastImage;
1:230a86c:         if (node != null) {
1:230a86c:             sub.addRecoveredMessage(context, node);
1:d29ca2a:         }
1:d29ca2a:     }
1:d29ca2a: 
1:d29ca2a:     public void start() throws Exception {
1:d29ca2a:     }
1:d29ca2a: 
1:d29ca2a:     public void stop() throws Exception {
1:d29ca2a:     }
1:d29ca2a: 
1:230a86c:     public Message[] browse(ActiveMQDestination destination) throws Exception {
1:933eb2f:         List<Message> result = new ArrayList<Message>();
1:760c629:         if (lastImage != null) {
1:230a86c:             DestinationFilter filter = DestinationFilter.parseFilter(destination);
1:230a86c:             if (filter.matches(lastImage.getMessage().getDestination())) {
1:760c629:                 result.add(lastImage.getMessage());
1:d29ca2a:             }
1:d29ca2a:         }
1:933eb2f:         return result.toArray(new Message[result.size()]);
1:d29ca2a:     }
1:d29ca2a: 
1:c1a0cd6:     public SubscriptionRecoveryPolicy copy() {
1:c1a0cd6:         return new LastImageSubscriptionRecoveryPolicy();
1:c1a0cd6:     }
1:c1a0cd6:     
1:1a5ad28:     public void setBroker(Broker broker) {        
1:760c629:     }
1:1a5ad28: 
1:1a5ad28: }
============================================================================
author:Hiram R. Chirino
-------------------------------------------------------------------------------
commit:58aca86
commit:b0c2a40
/////////////////////////////////////////////////////////////////////////
1:  * 
commit:933eb2f
/////////////////////////////////////////////////////////////////////////
1:         List<Message> result = new ArrayList<Message>();
1:         return result.toArray(new Message[result.size()]);
commit:fc00993
/////////////////////////////////////////////////////////////////////////
1:     private volatile MessageReference lastImage;
commit:230a86c
/////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////
1:  *      http://www.apache.org/licenses/LICENSE-2.0
/////////////////////////////////////////////////////////////////////////
1:  * This implementation of {@link SubscriptionRecoveryPolicy} will only keep the
1:  * last message.
/////////////////////////////////////////////////////////////////////////
1:     public void recover(ConnectionContext context, Topic topic, SubscriptionRecovery sub) throws Exception {
1:         MessageReference node = lastImage;
1:         if (node != null) {
1:             sub.addRecoveredMessage(context, node);
/////////////////////////////////////////////////////////////////////////
1:     public Message[] browse(ActiveMQDestination destination) throws Exception {
1:         DestinationFilter filter = DestinationFilter.parseFilter(destination);
1:         if (filter.matches(lastImage.getMessage().getDestination())) {
commit:57b4941
/////////////////////////////////////////////////////////////////////////
1:  * Licensed to the Apache Software Foundation (ASF) under one or more
1:  * contributor license agreements.  See the NOTICE file distributed with
1:  * this work for additional information regarding copyright ownership.
1:  * The ASF licenses this file to You under the Apache License, Version 2.0
1:  * (the "License"); you may not use this file except in compliance with
1:  * the License.  You may obtain a copy of the License at
commit:c1a0cd6
/////////////////////////////////////////////////////////////////////////
1: 
/////////////////////////////////////////////////////////////////////////
1:     public SubscriptionRecoveryPolicy copy() {
1:         return new LastImageSubscriptionRecoveryPolicy();
1:     }
1: 
commit:7f5213b
/////////////////////////////////////////////////////////////////////////
1:     public boolean add(ConnectionContext context, MessageReference node) throws Exception {
0:     public void recover(ConnectionContext context, Topic topic, Subscription sub) throws Exception {
/////////////////////////////////////////////////////////////////////////
0:     public Message[] browse(ActiveMQDestination destination) throws Exception{
commit:68d245f
/////////////////////////////////////////////////////////////////////////
1:  * @org.apache.xbean.XBean
commit:48b4869
/////////////////////////////////////////////////////////////////////////
0:  * Copyright 2005-2006 The Apache Software Foundation
commit:d29ca2a
/////////////////////////////////////////////////////////////////////////
1: /**
1:  *
0:  * Copyright 2004 The Apache Software Foundation
1:  *
0:  * Licensed under the Apache License, Version 2.0 (the "License");
0:  * you may not use this file except in compliance with the License.
0:  * You may obtain a copy of the License at
1:  *
0:  * http://www.apache.org/licenses/LICENSE-2.0
1:  *
1:  * Unless required by applicable law or agreed to in writing, software
1:  * distributed under the License is distributed on an "AS IS" BASIS,
1:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:  * See the License for the specific language governing permissions and
1:  * limitations under the License.
1:  */
1: package org.apache.activemq.broker.region.policy;
1: 
1: import org.apache.activemq.broker.ConnectionContext;
1: import org.apache.activemq.broker.region.MessageReference;
0: import org.apache.activemq.broker.region.Subscription;
1: import org.apache.activemq.broker.region.Topic;
0: import org.apache.activemq.filter.MessageEvaluationContext;
1: 
1: /**
0:  * This implementation of {@link SubscriptionRecoveryPolicy} will only keep 
0:  * the last message.
1:  * 
0:  * @org.xbean.XBean
1:  * 
0:  * @version $Revision$
1:  */
1: public class LastImageSubscriptionRecoveryPolicy implements SubscriptionRecoveryPolicy {
1: 
0:     volatile private MessageReference lastImage;
1: 
0:     public boolean add(ConnectionContext context, MessageReference node) throws Throwable {
1:         lastImage = node;
1:         return true;
1:     }
1: 
0:     public void recover(ConnectionContext context, Topic topic, Subscription sub) throws Throwable {
1:         // Re-dispatch the last message seen.
0:         MessageReference node = lastImage;
0:         if( node != null ){
0:             MessageEvaluationContext msgContext = context.getMessageEvaluationContext();
0:             try {
0:                 msgContext.setDestination(node.getRegionDestination().getActiveMQDestination());
0:                 msgContext.setMessageReference(node);                        
0:                 if (sub.matches(node, msgContext)) {
0:                     sub.add(node);
1:                 }
0:             } finally {
0:                 msgContext.clear();
1:             }
1:         }
1:     }
1: 
1:     public void start() throws Exception {
1:     }
1: 
1:     public void stop() throws Exception {
1:     }
1: 
1: }
author:Gary Tully
-------------------------------------------------------------------------------
commit:760c629
/////////////////////////////////////////////////////////////////////////
1:         if (lastImage != null) {
0:             DestinationFilter filter = DestinationFilter.parseFilter(destination);
0:             if (filter.matches(lastImage.getMessage().getDestination())) {
1:                 result.add(lastImage.getMessage());
1:             }
author:Robert Davies
-------------------------------------------------------------------------------
commit:1a5ad28
/////////////////////////////////////////////////////////////////////////
1: import org.apache.activemq.broker.Broker;
/////////////////////////////////////////////////////////////////////////
1:     
1:     public void setBroker(Broker broker) {        
1:     }
commit:a110604
/////////////////////////////////////////////////////////////////////////
1: import org.apache.activemq.broker.region.SubscriptionRecovery;
/////////////////////////////////////////////////////////////////////////
0:     public void recover(ConnectionContext context,Topic topic,SubscriptionRecovery sub) throws Exception{
0:         MessageReference node=lastImage;
0:         if(node!=null){
0:             sub.addRecoveredMessage(context,node);
commit:2748ae1
/////////////////////////////////////////////////////////////////////////
1: import java.util.ArrayList;
1: import java.util.List;
1: import org.apache.activemq.command.ActiveMQDestination;
1: import org.apache.activemq.command.Message;
1: import org.apache.activemq.filter.DestinationFilter;
/////////////////////////////////////////////////////////////////////////
0:     public Message[] browse(ActiveMQDestination destination) throws Throwable{
0:         List result = new ArrayList();
0:         DestinationFilter filter=DestinationFilter.parseFilter(destination);
0:         if (filter.matches(lastImage.getMessage().getDestination())){
0:             result.add(lastImage.getMessage());
0:         }
0:         return (Message[])result.toArray(new Message[result.size()]);
0:     }
0: 
============================================================================