1:bbc039f: /**
1:bbc039f:  * Licensed to the Apache Software Foundation (ASF) under one or more
1:bbc039f:  * contributor license agreements.  See the NOTICE file distributed with
1:bbc039f:  * this work for additional information regarding copyright ownership.
1:bbc039f:  * The ASF licenses this file to You under the Apache License, Version 2.0
1:bbc039f:  * (the "License"); you may not use this file except in compliance with
1:bbc039f:  * the License.  You may obtain a copy of the License at
1:bbc039f:  *
1:bbc039f:  *      http://www.apache.org/licenses/LICENSE-2.0
1:bbc039f:  *
1:bbc039f:  * Unless required by applicable law or agreed to in writing, software
1:bbc039f:  * distributed under the License is distributed on an "AS IS" BASIS,
1:bbc039f:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:bbc039f:  * See the License for the specific language governing permissions and
1:bbc039f:  * limitations under the License.
1:bbc039f:  */
1:bbc039f: package org.apache.activemq.plugin;
1:bbc039f: 
1:bbc039f: import org.apache.activemq.schema.core.DtoBroker;
1:bbc039f: 
1:bbc039f: public class ProcessorFactory {
1:bbc039f: 
1:bbc039f:     public static ConfigurationProcessor createProcessor(RuntimeConfigurationBroker plugin, Class dtoClass) {
1:bbc039f:         if (dtoClass.equals(DtoBroker.Plugins.class)) {
1:bbc039f:             return new PluginsProcessor(plugin, dtoClass);
1:bbc039f:         } else if (dtoClass.equals(DtoBroker.NetworkConnectors.class)) {
1:bbc039f:             return new NetworkConnectorsProcessor(plugin, dtoClass);
1:bbc039f:         } else if (dtoClass.equals(DtoBroker.DestinationPolicy.class)) {
1:bbc039f:             return new DestinationPolicyProcessor(plugin, dtoClass);
1:bbc039f:         } else if (dtoClass.equals(DtoBroker.DestinationInterceptors.class)) {
1:bbc039f:             return new DestinationInterceptorProcessor(plugin, dtoClass);
1:bbc039f:         } else if (dtoClass.equals(DtoBroker.Destinations.class)) {
1:bbc039f:             return new DestinationsProcessor(plugin, dtoClass);
1:bbc039f:         } else {
1:bbc039f:             return new DefaultConfigurationProcessor(plugin, dtoClass);
1:bbc039f:         }
1:bbc039f:     }
1:bbc039f: 
1:bbc039f: }
============================================================================
author:Dejan Bosanac
-------------------------------------------------------------------------------
commit:bbc039f
/////////////////////////////////////////////////////////////////////////
1: /**
1:  * Licensed to the Apache Software Foundation (ASF) under one or more
1:  * contributor license agreements.  See the NOTICE file distributed with
1:  * this work for additional information regarding copyright ownership.
1:  * The ASF licenses this file to You under the Apache License, Version 2.0
1:  * (the "License"); you may not use this file except in compliance with
1:  * the License.  You may obtain a copy of the License at
1:  *
1:  *      http://www.apache.org/licenses/LICENSE-2.0
1:  *
1:  * Unless required by applicable law or agreed to in writing, software
1:  * distributed under the License is distributed on an "AS IS" BASIS,
1:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:  * See the License for the specific language governing permissions and
1:  * limitations under the License.
1:  */
1: package org.apache.activemq.plugin;
1: 
1: import org.apache.activemq.schema.core.DtoBroker;
1: 
1: public class ProcessorFactory {
1: 
1:     public static ConfigurationProcessor createProcessor(RuntimeConfigurationBroker plugin, Class dtoClass) {
1:         if (dtoClass.equals(DtoBroker.Plugins.class)) {
1:             return new PluginsProcessor(plugin, dtoClass);
1:         } else if (dtoClass.equals(DtoBroker.NetworkConnectors.class)) {
1:             return new NetworkConnectorsProcessor(plugin, dtoClass);
1:         } else if (dtoClass.equals(DtoBroker.DestinationPolicy.class)) {
1:             return new DestinationPolicyProcessor(plugin, dtoClass);
1:         } else if (dtoClass.equals(DtoBroker.DestinationInterceptors.class)) {
1:             return new DestinationInterceptorProcessor(plugin, dtoClass);
1:         } else if (dtoClass.equals(DtoBroker.Destinations.class)) {
1:             return new DestinationsProcessor(plugin, dtoClass);
1:         } else {
1:             return new DefaultConfigurationProcessor(plugin, dtoClass);
1:         }
1:     }
1: 
1: }
============================================================================