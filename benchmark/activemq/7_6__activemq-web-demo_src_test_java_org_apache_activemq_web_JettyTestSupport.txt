1:9e32de2: /**
1:9e32de2:  * Licensed to the Apache Software Foundation (ASF) under one or more
1:9e32de2:  * contributor license agreements.  See the NOTICE file distributed with
1:9e32de2:  * this work for additional information regarding copyright ownership.
1:9e32de2:  * The ASF licenses this file to You under the Apache License, Version 2.0
1:9e32de2:  * (the "License"); you may not use this file except in compliance with
1:9e32de2:  * the License.  You may obtain a copy of the License at
1:9e32de2:  *
1:9e32de2:  *      http://www.apache.org/licenses/LICENSE-2.0
1:9e32de2:  *
1:9e32de2:  * Unless required by applicable law or agreed to in writing, software
1:9e32de2:  * distributed under the License is distributed on an "AS IS" BASIS,
1:9e32de2:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:9e32de2:  * See the License for the specific language governing permissions and
1:9e32de2:  * limitations under the License.
1:9e32de2:  */
1:ce9f83c: package org.apache.activemq.web;
1:2b9c59c: 
1:f44c3d2: import static org.junit.Assert.assertTrue;
1:f44c3d2: 
1:c5cebd5: import java.io.IOException;
1:c5cebd5: import java.net.ServerSocket;
1:2b9c59c: import java.net.Socket;
1:9308db8: import java.net.URI;
1:2b9c59c: import java.net.URL;
1:c5cebd5: 
1:ce9f83c: import javax.jms.Connection;
1:ce9f83c: import javax.jms.MessageProducer;
1:ce9f83c: import javax.jms.Session;
1:c5cebd5: import javax.net.ServerSocketFactory;
1:2b9c59c: import javax.net.SocketFactory;
1:2b9c59c: 
1:ce9f83c: import org.apache.activemq.ActiveMQConnectionFactory;
1:ce9f83c: import org.apache.activemq.broker.BrokerService;
1:2b9c59c: import org.apache.activemq.util.Wait;
1:ce9f83c: import org.eclipse.jetty.server.Connector;
1:ce9f83c: import org.eclipse.jetty.server.Server;
1:f44c3d2: import org.eclipse.jetty.server.ServerConnector;
1:ce9f83c: import org.eclipse.jetty.webapp.WebAppContext;
1:bdf7aa4: import org.junit.After;
1:bdf7aa4: import org.junit.Before;
1:987769a: import org.slf4j.Logger;
1:987769a: import org.slf4j.LoggerFactory;
1:bdf7aa4: 
1:bdf7aa4: public class JettyTestSupport {
1:8bf987b:     private static final Logger LOG = LoggerFactory.getLogger(JettyTestSupport.class);
1:2b9c59c: 
1:c5cebd5:     protected BrokerService broker;
1:c5cebd5:     protected Session session;
1:c5cebd5:     protected MessageProducer producer;
1:c5cebd5:     protected URI tcpUri;
1:c5cebd5:     protected URI stompUri;
6:ce9f83c: 
1:c5cebd5:     private Server server;
1:c5cebd5:     private ActiveMQConnectionFactory factory;
1:c5cebd5:     private Connection connection;
1:c5cebd5:     private int proxyPort = 0;
1:ce9f83c: 
1:987769a:     protected boolean isPersistent() {
1:987769a:         return false;
1:987769a:     }
1:987769a: 
1:bdf7aa4:     @Before
1:bdf7aa4:     public void setUp() throws Exception {
1:ce9f83c:         broker = new BrokerService();
1:0c2b35d:         broker.setBrokerName("amq-broker");
1:987769a:         broker.setPersistent(isPersistent());
1:987769a:         broker.setDataDirectory("target/activemq-data");
1:ce9f83c:         broker.setUseJmx(true);
1:f3e9ec0:         tcpUri = new URI(broker.addConnector("tcp://localhost:0").getPublishableConnectString());
1:f3e9ec0:         stompUri = new URI(broker.addConnector("stomp://localhost:0").getPublishableConnectString());
1:ce9f83c:         broker.start();
1:ce9f83c:         broker.waitUntilStarted();
1:ce9f83c: 
1:c5cebd5:         int port = getPort();
1:ce9f83c:         server = new Server();
1:f44c3d2:         ServerConnector connector = new ServerConnector(server);
1:c5cebd5:         connector.setPort(port);
1:ce9f83c:         WebAppContext context = new WebAppContext();
1:ce9f83c: 
1:ce9f83c:         context.setResourceBase("src/main/webapp");
1:ce9f83c:         context.setContextPath("/");
1:ce9f83c:         context.setServer(server);
1:ce9f83c:         server.setHandler(context);
1:ce9f83c:         server.setConnectors(new Connector[] {
1:ce9f83c:             connector
1:ce9f83c:         });
1:2b9c59c:         server.start();
1:c5cebd5:         waitForJettySocketToAccept("http://localhost:" + port);
1:ce9f83c: 
1:9308db8:         factory = new ActiveMQConnectionFactory(tcpUri);
1:ce9f83c:         connection = factory.createConnection();
1:ce9f83c:         connection.start();
1:ce9f83c:         session = connection.createSession(false, Session.AUTO_ACKNOWLEDGE);
1:ce9f83c:         producer = session.createProducer(session.createQueue("test"));
1:ce9f83c:     }
1:bdf7aa4: 
1:ce9f83c: 
1:bdf7aa4:     @After
1:bdf7aa4:     public void tearDown() throws Exception {
1:d4742f5:         session.close();
1:d4742f5:         connection.close();
1:ce9f83c:         server.stop();
1:ce9f83c:         broker.stop();
1:ce9f83c:         broker.waitUntilStopped();
1:ce9f83c:     }
1:ce9f83c: 
1:c5cebd5:     protected int getPort() {
1:c5cebd5:         if (proxyPort == 0) {
1:c5cebd5:             ServerSocket ss = null;
1:c5cebd5:             try {
1:c5cebd5:                 ss = ServerSocketFactory.getDefault().createServerSocket(0);
1:c5cebd5:                 proxyPort = ss.getLocalPort();
1:c5cebd5:             } catch (IOException e) { // ignore
1:c5cebd5:             } finally {
1:c5cebd5:                 try {
1:c5cebd5:                     if (ss != null ) {
1:c5cebd5:                         ss.close();
1:c5cebd5:                     }
1:c5cebd5:                 } catch (IOException e) { // ignore
1:c5cebd5:                 }
1:c5cebd5:             }
1:c5cebd5:         }
1:c5cebd5:         return proxyPort;
1:c5cebd5:     }
1:c5cebd5: 
1:2b9c59c:     public void waitForJettySocketToAccept(String bindLocation) throws Exception {
1:2b9c59c:         final URL url = new URL(bindLocation);
1:2b9c59c:         assertTrue("Jetty endpoint is available", Wait.waitFor(new Wait.Condition() {
1:2b9c59c: 
1:f44c3d2:             @Override
1:2b9c59c:             public boolean isSatisified() throws Exception {
1:2b9c59c:                 boolean canConnect = false;
1:2b9c59c:                 try {
1:2b9c59c:                     Socket socket = SocketFactory.getDefault().createSocket(url.getHost(), url.getPort());
1:2b9c59c:                     socket.close();
1:2b9c59c:                     canConnect = true;
1:2b9c59c:                 } catch (Exception e) {
1:2b9c59c:                     LOG.warn("verify jetty available, failed to connect to " + url + e);
1:2b9c59c:                 }
1:2b9c59c:                 return canConnect;
1:2b9c59c:             }}, 60 * 1000));
1:2b9c59c:     }
1:ce9f83c: 
1:ce9f83c: }
============================================================================
author:Christopher L. Shannon (cshannon)
-------------------------------------------------------------------------------
commit:f44c3d2
/////////////////////////////////////////////////////////////////////////
1: import static org.junit.Assert.assertTrue;
1: 
/////////////////////////////////////////////////////////////////////////
1: import org.eclipse.jetty.server.ServerConnector;
/////////////////////////////////////////////////////////////////////////
1:         ServerConnector connector = new ServerConnector(server);
/////////////////////////////////////////////////////////////////////////
1:             @Override
author:Hadrian Zbarcea
-------------------------------------------------------------------------------
commit:c5cebd5
/////////////////////////////////////////////////////////////////////////
1: import java.io.IOException;
1: import java.net.ServerSocket;
1: 
1: import javax.net.ServerSocketFactory;
/////////////////////////////////////////////////////////////////////////
0: import static org.junit.Assert.assertTrue;
1:     protected BrokerService broker;
1:     protected Session session;
1:     protected MessageProducer producer;
1:     protected URI tcpUri;
1:     protected URI stompUri;
1:     private Server server;
1:     private ActiveMQConnectionFactory factory;
1:     private Connection connection;
1:     private int proxyPort = 0;
/////////////////////////////////////////////////////////////////////////
1:         int port = getPort();
1:         connector.setPort(port);
/////////////////////////////////////////////////////////////////////////
1:         waitForJettySocketToAccept("http://localhost:" + port);
/////////////////////////////////////////////////////////////////////////
1:     protected int getPort() {
1:         if (proxyPort == 0) {
1:             ServerSocket ss = null;
1:             try {
1:                 ss = ServerSocketFactory.getDefault().createServerSocket(0);
1:                 proxyPort = ss.getLocalPort();
1:             } catch (IOException e) { // ignore
1:             } finally {
1:                 try {
1:                     if (ss != null ) {
1:                         ss.close();
1:                     }
1:                 } catch (IOException e) { // ignore
1:                 }
1:             }
1:         }
1:         return proxyPort;
1:     }
1: 
author:Kevin Earls
-------------------------------------------------------------------------------
commit:bdf7aa4
/////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////
1: import org.junit.After;
1: import org.junit.Before;
0: import static org.junit.Assert.*;
1: 
1: public class JettyTestSupport {
/////////////////////////////////////////////////////////////////////////
1:     @Before
1:     public void setUp() throws Exception {
/////////////////////////////////////////////////////////////////////////
1: 
1:     @After
1:     public void tearDown() throws Exception {
author:Claus Ibsen
-------------------------------------------------------------------------------
commit:987769a
/////////////////////////////////////////////////////////////////////////
1: import org.slf4j.Logger;
1: import org.slf4j.LoggerFactory;
/////////////////////////////////////////////////////////////////////////
1:     protected boolean isPersistent() {
1:         return false;
1:     }
1: 
1:         broker.setPersistent(isPersistent());
1:         broker.setDataDirectory("target/activemq-data");
author:Bosanac Dejan
-------------------------------------------------------------------------------
commit:0c2b35d
/////////////////////////////////////////////////////////////////////////
1:         broker.setBrokerName("amq-broker");
commit:d4742f5
/////////////////////////////////////////////////////////////////////////
1:         session.close();
1:         connection.close();
commit:8bf987b
/////////////////////////////////////////////////////////////////////////
0: import org.slf4j.Logger;
0: import org.slf4j.LoggerFactory;
1:     private static final Logger LOG = LoggerFactory.getLogger(JettyTestSupport.class);
commit:9e32de2
/////////////////////////////////////////////////////////////////////////
1: /**
1:  * Licensed to the Apache Software Foundation (ASF) under one or more
1:  * contributor license agreements.  See the NOTICE file distributed with
1:  * this work for additional information regarding copyright ownership.
1:  * The ASF licenses this file to You under the Apache License, Version 2.0
1:  * (the "License"); you may not use this file except in compliance with
1:  * the License.  You may obtain a copy of the License at
1:  *
1:  *      http://www.apache.org/licenses/LICENSE-2.0
1:  *
1:  * Unless required by applicable law or agreed to in writing, software
1:  * distributed under the License is distributed on an "AS IS" BASIS,
1:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:  * See the License for the specific language governing permissions and
1:  * limitations under the License.
1:  */
commit:2b9c59c
/////////////////////////////////////////////////////////////////////////
1: import java.net.Socket;
1: import java.net.URL;
1: 
1: import javax.net.SocketFactory;
1: 
0: import junit.framework.TestCase;
1: import org.apache.activemq.util.Wait;
0: import org.apache.commons.logging.Log;
0: import org.apache.commons.logging.LogFactory;
0:     private static final Log LOG = LogFactory.getLog(JettyTestSupport.class);
1:     
/////////////////////////////////////////////////////////////////////////
1:         server.start();
0:         waitForJettySocketToAccept("http://localhost:8080");
/////////////////////////////////////////////////////////////////////////
1:     public void waitForJettySocketToAccept(String bindLocation) throws Exception {
1:         final URL url = new URL(bindLocation);
1:         assertTrue("Jetty endpoint is available", Wait.waitFor(new Wait.Condition() {
1: 
1:             public boolean isSatisified() throws Exception {
1:                 boolean canConnect = false;
1:                 try {
1:                     Socket socket = SocketFactory.getDefault().createSocket(url.getHost(), url.getPort());
1:                     socket.close();
1:                     canConnect = true;
1:                 } catch (Exception e) {
1:                     LOG.warn("verify jetty available, failed to connect to " + url + e);
1:                 }
1:                 return canConnect;
1:             }}, 60 * 1000));
1:     }
commit:ce9f83c
/////////////////////////////////////////////////////////////////////////
1: package org.apache.activemq.web;
1: 
1: import javax.jms.Connection;
1: import javax.jms.MessageProducer;
1: import javax.jms.Session;
1: 
1: import org.apache.activemq.ActiveMQConnectionFactory;
1: import org.apache.activemq.broker.BrokerService;
1: import org.eclipse.jetty.server.Connector;
1: import org.eclipse.jetty.server.Server;
0: import org.eclipse.jetty.server.nio.SelectChannelConnector;
1: import org.eclipse.jetty.webapp.WebAppContext;
1: 
0: import junit.framework.TestCase;
1: 
0: public class JettyTestSupport extends TestCase {
1: 
0:     BrokerService broker;
0:     Server server;
0:     ActiveMQConnectionFactory factory;
0:     Connection connection;
0:     Session session;
0:     MessageProducer producer;
1:     
0:     protected void setUp() throws Exception {
1:         broker = new BrokerService();
0:         broker.setPersistent(false);
1:         broker.setUseJmx(true);
0:         broker.addConnector("tcp://localhost:61616");
1:         broker.start();
1:         broker.waitUntilStarted();
1:         
1:         server = new Server();
0:         SelectChannelConnector connector = new SelectChannelConnector();
0:         connector.setPort(8080);
0:         connector.setServer(server);
1:         WebAppContext context = new WebAppContext();
1: 
1:         context.setResourceBase("src/main/webapp");
1:         context.setContextPath("/");
1:         context.setServer(server);
1:         server.setHandler(context);
1:         server.setConnectors(new Connector[] {
1:             connector
1:         });
0:         server.start();   
1:         
0:         factory = new ActiveMQConnectionFactory("tcp://localhost:61616");
1:         connection = factory.createConnection();
1:         connection.start();
1:         session = connection.createSession(false, Session.AUTO_ACKNOWLEDGE);
1:         producer = session.createProducer(session.createQueue("test"));
1:     }
1: 
0:     protected void tearDown() throws Exception {
1:         server.stop();
1:         broker.stop();
1:         broker.waitUntilStopped();
0:         session.close();
0:         connection.close();
1:     }
1: 
1:     
1:     
1: }
author:Timothy A. Bish
-------------------------------------------------------------------------------
commit:f3e9ec0
/////////////////////////////////////////////////////////////////////////
1:         tcpUri = new URI(broker.addConnector("tcp://localhost:0").getPublishableConnectString());
1:         stompUri = new URI(broker.addConnector("stomp://localhost:0").getPublishableConnectString());
commit:9308db8
/////////////////////////////////////////////////////////////////////////
1: import java.net.URI;
/////////////////////////////////////////////////////////////////////////
0: 
0: 
0:     URI tcpUri;
0:     URI stompUri;
0: 
0:         tcpUri = broker.addConnector("tcp://localhost:61616").getConnectUri();
0:         stompUri = broker.addConnector("stomp://localhost:61613").getConnectUri();
0: 
/////////////////////////////////////////////////////////////////////////
0: 
1:         factory = new ActiveMQConnectionFactory(tcpUri);
/////////////////////////////////////////////////////////////////////////
0: 
author:Alex Dean
-------------------------------------------------------------------------------
commit:88fc7fe
/////////////////////////////////////////////////////////////////////////
0:         broker.addConnector("stomp://localhost:61613");
============================================================================