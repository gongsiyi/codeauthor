2:d29ca2a: /**
1:57b4941:  * Licensed to the Apache Software Foundation (ASF) under one or more
1:57b4941:  * contributor license agreements.  See the NOTICE file distributed with
1:57b4941:  * this work for additional information regarding copyright ownership.
1:57b4941:  * The ASF licenses this file to You under the Apache License, Version 2.0
1:57b4941:  * (the "License"); you may not use this file except in compliance with
1:57b4941:  * the License.  You may obtain a copy of the License at
1:230a86c:  *
1:230a86c:  *      http://www.apache.org/licenses/LICENSE-2.0
5:d29ca2a:  *
1:d29ca2a:  * Unless required by applicable law or agreed to in writing, software
1:d29ca2a:  * distributed under the License is distributed on an "AS IS" BASIS,
1:d29ca2a:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:d29ca2a:  * See the License for the specific language governing permissions and
1:d29ca2a:  * limitations under the License.
2:d29ca2a:  */
9:d29ca2a: 
1:d29ca2a: package org.apache.activemq;
1:d29ca2a: 
1:d29ca2a: import java.util.List;
1:d29ca2a: import javax.jms.JMSException;
1:d29ca2a: import org.apache.activemq.command.ConsumerId;
1:d29ca2a: import org.apache.activemq.command.MessageDispatch;
1:d29ca2a: import org.apache.activemq.thread.Task;
1:d29ca2a: import org.apache.activemq.thread.TaskRunner;
1:d29ca2a: import org.apache.activemq.util.JMSExceptionSupport;
1:8bf987b: import org.slf4j.Logger;
1:8bf987b: import org.slf4j.LoggerFactory;
1:d29ca2a: 
1:d29ca2a: /**
1:230a86c:  * A utility class used by the Session for dispatching messages asynchronously
1:230a86c:  * to consumers
1:b0c2a40:  *
1:d29ca2a:  * @see javax.jms.Session
1:d29ca2a:  */
1:d29ca2a: public class ActiveMQSessionExecutor implements Task {
1:8bf987b:     private static final Logger LOG = LoggerFactory.getLogger(ActiveMQSessionExecutor.class);
1:d29ca2a: 
1:c14dc3a:     private final ActiveMQSession session;
1:c14dc3a:     private final MessageDispatchChannel messageQueue;
1:d29ca2a:     private boolean dispatchedBySessionPool;
1:577eae6:     private volatile TaskRunner taskRunner;
1:78cf4b1:     private boolean startedOrWarnedThatNotStarted;
1:d29ca2a: 
1:d29ca2a:     ActiveMQSessionExecutor(ActiveMQSession session) {
1:d29ca2a:         this.session = session;
1:1f063e8:         if (this.session.connection != null && this.session.connection.isMessagePrioritySupported()) {
1:c14dc3a:            this.messageQueue = new SimplePriorityMessageDispatchChannel();
1:d29ca2a:         }else {
1:c14dc3a:             this.messageQueue = new FifoMessageDispatchChannel();
1:d29ca2a:         }
1:c14dc3a:     }
1:230a86c: 
1:d29ca2a:     void setDispatchedBySessionPool(boolean value) {
1:d29ca2a:         dispatchedBySessionPool = value;
1:789d4e5:         wakeup();
1:d29ca2a:     }
1:d29ca2a: 
1:d29ca2a:     void execute(MessageDispatch message) throws InterruptedException {
1:230a86c: 
1:78cf4b1:         if (!startedOrWarnedThatNotStarted) {
1:d29ca2a: 
1:78cf4b1:             ActiveMQConnection connection = session.connection;
1:78cf4b1:             long aboutUnstartedConnectionTimeout = connection.getWarnAboutUnstartedConnectionTimeout();
1:78cf4b1:             if (connection.isStarted() || aboutUnstartedConnectionTimeout < 0L) {
1:78cf4b1:                 startedOrWarnedThatNotStarted = true;
1:230a86c:             } else {
1:78cf4b1:                 long elapsedTime = System.currentTimeMillis() - connection.getTimeCreated();
1:d29ca2a: 
1:230a86c:                 // lets only warn when a significant amount of time has passed
1:230a86c:                 // just in case its normal operation
1:78cf4b1:                 if (elapsedTime > aboutUnstartedConnectionTimeout) {
1:fc00993:                     LOG.warn("Received a message on a connection which is not yet started. Have you forgotten to call Connection.start()? Connection: " + connection
1:230a86c:                              + " Received: " + message);
1:78cf4b1:                     startedOrWarnedThatNotStarted = true;
1:d29ca2a:                 }
1:d29ca2a:             }
1:0cf2cdc:         }
1:d29ca2a: 
1:230a86c:         if (!session.isSessionAsyncDispatch() && !dispatchedBySessionPool) {
1:d29ca2a:             dispatch(message);
1:230a86c:         } else {
1:d29ca2a:             messageQueue.enqueue(message);
3:d29ca2a:             wakeup();
1:d29ca2a:         }
1:d29ca2a:     }
1:d29ca2a: 
1:da5139c:     public void wakeup() {
1:230a86c:         if (!dispatchedBySessionPool) {
1:230a86c:             if (session.isSessionAsyncDispatch()) {
1:686db79:                 try {
1:577eae6:                     TaskRunner taskRunner = this.taskRunner;
1:230a86c:                     if (taskRunner == null) {
1:577eae6:                         synchronized (this) {
1:577eae6:                             if (this.taskRunner == null) {
1:c808beb:                                 if (!isRunning()) {
1:c808beb:                                     // stop has been called
1:c808beb:                                     return;
1:230a86c:                                 }
1:577eae6:                                 this.taskRunner = session.connection.getSessionTaskRunner().createTaskRunner(this,
1:0cf2cdc:                                         "ActiveMQ Session: " + session.getSessionId());
1:789d4e5:                             }
1:577eae6:                             taskRunner = this.taskRunner;
1:d29ca2a:                         }
1:d29ca2a:                     }
1:686db79:                     taskRunner.wakeup();
1:686db79:                 } catch (InterruptedException e) {
1:b75a6da:                     Thread.currentThread().interrupt();
1:686db79:                 }
1:686db79:             } else {
1:f812e34:                 while (iterate()) {
1:f812e34:                 }
1:d29ca2a:             }
1:d29ca2a:         }
1:d29ca2a:     }
1:d29ca2a: 
1:d29ca2a:     void executeFirst(MessageDispatch message) {
1:d29ca2a:         messageQueue.enqueueFirst(message);
1:d29ca2a:         wakeup();
1:d29ca2a:     }
1:d29ca2a: 
1:b6673c4:     public boolean hasUncomsumedMessages() {
1:b6673c4:         return !messageQueue.isClosed() && messageQueue.isRunning() && !messageQueue.isEmpty();
1:d29ca2a:     }
1:230a86c: 
1:230a86c:     void dispatch(MessageDispatch message) {
1:230a86c:         // TODO - we should use a Map for this indexed by consumerId
1:577eae6:         for (ActiveMQMessageConsumer consumer : this.session.consumers) {
1:d29ca2a:             ConsumerId consumerId = message.getConsumerId();
1:230a86c:             if (consumerId.equals(consumer.getConsumerId())) {
1:d29ca2a:                 consumer.dispatch(message);
1:cbaa58b:                 break;
1:d29ca2a:             }
1:d29ca2a:         }
1:d29ca2a:     }
1:230a86c: 
1:d29ca2a:     synchronized void start() {
1:230a86c:         if (!messageQueue.isRunning()) {
1:d29ca2a:             messageQueue.start();
1:f812e34:             if (hasUncomsumedMessages()) {
1:230a86c:                 wakeup();
1:f812e34:             }
1:686db79:         }
1:d29ca2a:     }
1:d29ca2a: 
1:d29ca2a:     void stop() throws JMSException {
2:d29ca2a:         try {
1:230a86c:             if (messageQueue.isRunning()) {
1:c808beb:                 synchronized(this) {
1:d29ca2a:                     messageQueue.stop();
1:c808beb:                     if (this.taskRunner != null) {
1:c808beb:                         this.taskRunner.shutdown();
1:c808beb:                         this.taskRunner = null;
1:686db79:                     }
1:d29ca2a:                 }
1:d29ca2a:             }
2:d29ca2a:         } catch (InterruptedException e) {
1:686db79:             Thread.currentThread().interrupt();
1:d29ca2a:             throw JMSExceptionSupport.create(e);
1:d29ca2a:         }
1:d29ca2a:     }
1:230a86c: 
1:d29ca2a:     boolean isRunning() {
1:f25e2ca:         return messageQueue.isRunning();
1:d29ca2a:     }
1:d29ca2a: 
1:d29ca2a:     void close() {
1:d29ca2a:         messageQueue.close();
1:d29ca2a:     }
1:d29ca2a: 
1:d29ca2a:     void clear() {
1:d29ca2a:         messageQueue.clear();
1:d29ca2a:     }
1:d29ca2a: 
1:d29ca2a:     MessageDispatch dequeueNoWait() {
1:577eae6:         return messageQueue.dequeueNoWait();
1:d29ca2a:     }
1:230a86c: 
1:230a86c:     protected void clearMessagesInProgress() {
1:d29ca2a:         messageQueue.clear();
1:d29ca2a:     }
1:d29ca2a: 
1:d29ca2a:     public boolean isEmpty() {
1:d29ca2a:         return messageQueue.isEmpty();
1:d29ca2a:     }
1:d29ca2a: 
1:d29ca2a:     public boolean iterate() {
1:da5139c: 
1:230a86c:         // Deliver any messages queued on the consumer to their listeners.
1:577eae6:         for (ActiveMQMessageConsumer consumer : this.session.consumers) {
1:230a86c:             if (consumer.iterate()) {
1:230a86c:                 return true;
1:230a86c:             }
1:da5139c:         }
1:230a86c: 
1:230a86c:         // No messages left queued on the listeners.. so now dispatch messages
1:230a86c:         // queued on the session
1:d29ca2a:         MessageDispatch message = messageQueue.dequeueNoWait();
1:230a86c:         if (message == null) {
1:d29ca2a:             return false;
1:d29ca2a:         } else {
1:d29ca2a:             dispatch(message);
1:686db79:             return !messageQueue.isEmpty();
1:da5139c:         }
1:d29ca2a:     }
1:da5139c: 
1:0a66b79:     List<MessageDispatch> getUnconsumedMessages() {
1:230a86c:         return messageQueue.removeAll();
1:230a86c:     }
1:c9a3202:     
1:c9a3202:     void waitForQueueRestart() throws InterruptedException {
1:c9a3202:         synchronized (messageQueue.getMutex()) {
1:c9a3202:             while (messageQueue.isRunning() == false) {
1:c9a3202:                 if (messageQueue.isClosed()) {
1:c9a3202:                     break;
1:c9a3202:                 }
1:c9a3202:                 messageQueue.getMutex().wait();
1:c9a3202:             }
1:c9a3202:         }
1:c9a3202:     }
1:b75a6da: }
============================================================================
author:Hadrian Zbarcea
-------------------------------------------------------------------------------
commit:d54d046
author:Andy Taylor
-------------------------------------------------------------------------------
commit:c9a3202
/////////////////////////////////////////////////////////////////////////
1:     
1:     void waitForQueueRestart() throws InterruptedException {
1:         synchronized (messageQueue.getMutex()) {
1:             while (messageQueue.isRunning() == false) {
1:                 if (messageQueue.isClosed()) {
1:                     break;
1:                 }
1:                 messageQueue.getMutex().wait();
1:             }
1:         }
1:     }
author:Hiram R. Chirino
-------------------------------------------------------------------------------
commit:9a8f6e4
commit:b0c2a40
/////////////////////////////////////////////////////////////////////////
1:  * 
commit:fc00993
/////////////////////////////////////////////////////////////////////////
0:     private static final Log LOG = LogFactory.getLog(ActiveMQSessionExecutor.class);
/////////////////////////////////////////////////////////////////////////
1:                     LOG.warn("Received a message on a connection which is not yet started. Have you forgotten to call Connection.start()? Connection: " + connection
commit:f812e34
/////////////////////////////////////////////////////////////////////////
1:                 while (iterate()) {                    
1:                 }
/////////////////////////////////////////////////////////////////////////
1:             if (hasUncomsumedMessages()) {
1:             }
commit:230a86c
/////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////
1:  *      http://www.apache.org/licenses/LICENSE-2.0
/////////////////////////////////////////////////////////////////////////
1:  * A utility class used by the Session for dispatching messages asynchronously
1:  * to consumers
1:  * 
/////////////////////////////////////////////////////////////////////////
1: 
1:             } else {
1:                 // lets only warn when a significant amount of time has passed
1:                 // just in case its normal operation
0:                     log.warn("Received a message on a connection which is not yet started. Have you forgotten to call Connection.start()? Connection: " + connection
1:                              + " Received: " + message);
1:         if (!session.isSessionAsyncDispatch() && !dispatchedBySessionPool) {
1:         } else {
1:         if (!dispatchedBySessionPool) {
1:             if (session.isSessionAsyncDispatch()) {
1:                     if (taskRunner == null) {
0:                         taskRunner = session.connection.getSessionTaskRunner().createTaskRunner(this, "ActiveMQ Session: " + session.getSessionId());
1:                     }
0:                 while (iterate())
/////////////////////////////////////////////////////////////////////////
1:     void dispatch(MessageDispatch message) {
1:         // TODO - we should use a Map for this indexed by consumerId
1: 
0:             ActiveMQMessageConsumer consumer = (ActiveMQMessageConsumer)i.next();
1:             if (consumerId.equals(consumer.getConsumerId())) {
1: 
1:         if (!messageQueue.isRunning()) {
0:             if (hasUncomsumedMessages())
1:                 wakeup();
1:             if (messageQueue.isRunning()) {
0:                 if (taskRunner != null) {
0:                     taskRunner = null;
/////////////////////////////////////////////////////////////////////////
1: 
/////////////////////////////////////////////////////////////////////////
0:         return (MessageDispatch)messageQueue.dequeueNoWait();
1: 
1:     protected void clearMessagesInProgress() {
/////////////////////////////////////////////////////////////////////////
1:         // Deliver any messages queued on the consumer to their listeners.
0:         for (Iterator i = this.session.consumers.iterator(); i.hasNext();) {
0:             ActiveMQMessageConsumer consumer = (ActiveMQMessageConsumer)i.next();
1:             if (consumer.iterate()) {
1:                 return true;
1:             }
1: 
1:         // No messages left queued on the listeners.. so now dispatch messages
1:         // queued on the session
1:         if (message == null) {
/////////////////////////////////////////////////////////////////////////
0:     List getUnconsumedMessages() {
1:         return messageQueue.removeAll();
1:     }
1: 
commit:789d4e5
/////////////////////////////////////////////////////////////////////////
0:             if( session.isSessionAsyncDispatch() ) {
0:                 	if( taskRunner == null ) {
0:                 		taskRunner = session.connection.getSessionTaskRunner().createTaskRunner(this, "ActiveMQ Session: "+session.getSessionId());
1:                 	}
/////////////////////////////////////////////////////////////////////////
0:             if( hasUncomsumedMessages() )
1:             	wakeup();
commit:da5139c
/////////////////////////////////////////////////////////////////////////
1:     public void wakeup() {
0:         if( !dispatchedBySessionPool ) {
/////////////////////////////////////////////////////////////////////////
1: 
0:     	// Deliver any messages queued on the consumer to their listeners.
0:     	for (Iterator i = this.session.consumers.iterator(); i.hasNext();) {
0:             ActiveMQMessageConsumer consumer = (ActiveMQMessageConsumer) i.next();
0:         	if( consumer.iterate() ) {
0:         		return true;
1:         	}
1:         }
1:     	
0:     	// No messages left queued on the listeners.. so now dispatch messages queued on the session
commit:b75a6da
/////////////////////////////////////////////////////////////////////////
1:             Thread.currentThread().interrupt();
/////////////////////////////////////////////////////////////////////////
1: }
commit:57b4941
/////////////////////////////////////////////////////////////////////////
1:  * Licensed to the Apache Software Foundation (ASF) under one or more
1:  * contributor license agreements.  See the NOTICE file distributed with
1:  * this work for additional information regarding copyright ownership.
1:  * The ASF licenses this file to You under the Apache License, Version 2.0
1:  * (the "License"); you may not use this file except in compliance with
1:  * the License.  You may obtain a copy of the License at
commit:686db79
/////////////////////////////////////////////////////////////////////////
0:         if( !dispatchedBySessionPool && hasUncomsumedMessages() ) {
0:             if( taskRunner!=null ) {
1:                 try {
1:                     taskRunner.wakeup();
1:                 } catch (InterruptedException e) {
1:                     Thread.currentThread().interrupt();
1:                 }
1:             } else {
0:                 while( iterate() )
0:                     ;
/////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////
0:             if( session.isSessionAsyncDispatch() || dispatchedBySessionPool ) {
0:                 taskRunner = ActiveMQConnection.SESSION_TASK_RUNNER.createTaskRunner(this, "ActiveMQ Session: "+session.getSessionId());
1:             }
/////////////////////////////////////////////////////////////////////////
0:                 if( taskRunner!=null ) {
0:                     taskRunner.shutdown();
0:                     taskRunner=null;
1:                 }
/////////////////////////////////////////////////////////////////////////
1:             return !messageQueue.isEmpty();
commit:f25e2ca
/////////////////////////////////////////////////////////////////////////
1:             return messageQueue.isRunning();
commit:e2aad41
/////////////////////////////////////////////////////////////////////////
0:         if( taskRunner!=null && !dispatchedBySessionPool && hasUncomsumedMessages() ) {
/////////////////////////////////////////////////////////////////////////
0:             taskRunner = ActiveMQConnection.SESSION_TASK_RUNNER.createTaskRunner(this, "ActiveMQ Session: "+session.getSessionId());
commit:b6673c4
/////////////////////////////////////////////////////////////////////////
0:         if( !dispatchedBySessionPool && hasUncomsumedMessages() ) {
/////////////////////////////////////////////////////////////////////////
1:     public boolean hasUncomsumedMessages() {
1:         return !messageQueue.isClosed() && messageQueue.isRunning() && !messageQueue.isEmpty();
commit:48b4869
/////////////////////////////////////////////////////////////////////////
0:  * Copyright 2005-2006 The Apache Software Foundation
commit:d29ca2a
/////////////////////////////////////////////////////////////////////////
1: /**
1:  *
0:  * Copyright 2004 The Apache Software Foundation
1:  *
0:  * Licensed under the Apache License, Version 2.0 (the "License");
0:  * you may not use this file except in compliance with the License.
0:  * You may obtain a copy of the License at
1:  *
0:  * http://www.apache.org/licenses/LICENSE-2.0
1:  *
1:  * Unless required by applicable law or agreed to in writing, software
1:  * distributed under the License is distributed on an "AS IS" BASIS,
1:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:  * See the License for the specific language governing permissions and
1:  * limitations under the License.
1:  */
1: 
1: package org.apache.activemq;
1: 
0: import java.util.Iterator;
1: import java.util.List;
1: 
1: import javax.jms.JMSException;
1: 
1: import org.apache.activemq.command.ConsumerId;
1: import org.apache.activemq.command.MessageDispatch;
1: import org.apache.activemq.thread.Task;
1: import org.apache.activemq.thread.TaskRunner;
1: import org.apache.activemq.util.JMSExceptionSupport;
1: 
1: /**
0:  * A utility class used by the Session for dispatching messages asynchronously to consumers
1:  *
0:  * @version $Revision$
1:  * @see javax.jms.Session
1:  */
1: public class ActiveMQSessionExecutor implements Task {
1:     
0:     private ActiveMQSession session;
0:     private MessageDispatchChannel messageQueue = new MessageDispatchChannel();
1:     private boolean dispatchedBySessionPool;
0:     private TaskRunner taskRunner;
1: 
1:     ActiveMQSessionExecutor(ActiveMQSession session) {
1:         this.session = session;
1:     }
1: 
1:     void setDispatchedBySessionPool(boolean value) {
1:         dispatchedBySessionPool = value;
1:         wakeup();
1:     }
1:     
1: 
1:     void execute(MessageDispatch message) throws InterruptedException {
0:         if (!session.isAsyncDispatch() && !dispatchedBySessionPool){
1:             dispatch(message);
1:         }else {
1:             messageQueue.enqueue(message);
1:             wakeup();
1:         }
1:     }
1: 
0:     private void wakeup() {
0:         if( !dispatchedBySessionPool && !messageQueue.isClosed() && messageQueue.isRunning() && !messageQueue.isEmpty() ) {
1:             try {
0:                 taskRunner.wakeup();
1:             } catch (InterruptedException e) {
0:                 Thread.currentThread().interrupt();
1:             }
1:         }
1:     }
1: 
1:     void executeFirst(MessageDispatch message) {
1:         messageQueue.enqueueFirst(message);
1:         wakeup();
1:     }
1: 
0:     boolean hasUncomsumedMessages() {
0:         return !messageQueue.isEmpty();
1:     }
1: 
1:     /**
0:      * implementation of Runnable
1:      */
0:     public void run() {
1:     }
1:     
0:     void dispatch(MessageDispatch message){
0:         for (Iterator i = this.session.consumers.iterator(); i.hasNext();) {
0:             ActiveMQMessageConsumer consumer = (ActiveMQMessageConsumer) i.next();
1:             ConsumerId consumerId = message.getConsumerId();
0:             if( consumerId.equals(consumer.getConsumerId()) ) {
1:                 consumer.dispatch(message);
1:             }
1:         }
1:     }
1:     
1:     synchronized void start() {
0:         if( !messageQueue.isRunning() ) {
1:             messageQueue.start();
0:             taskRunner = ActiveMQConnection.SESSION_TASK_RUNNER.createTaskRunner(this);
1:             wakeup();
1:         }
1:     }
1: 
1:     void stop() throws JMSException {
1:         try {
0:             if( messageQueue.isRunning() ) {
1:                 messageQueue.stop();
0:                 taskRunner.shutdown();
1:             }
1:         } catch (InterruptedException e) {
1:             throw JMSExceptionSupport.create(e);
1:         }
1:     }
1:     
1:     boolean isRunning() {
0:         return messageQueue.isRunning();
1:     }
1: 
1:     void close() {
1:         messageQueue.close();
1:     }
1: 
1:     void clear() {
1:         messageQueue.clear();
1:     }
1: 
1:     MessageDispatch dequeueNoWait() {
0:         return (MessageDispatch) messageQueue.dequeueNoWait();
1:     }
1:     
0:     protected void clearMessagesInProgress(){
1:         messageQueue.clear();
1:     }
1: 
1:     public boolean isEmpty() {
1:         return messageQueue.isEmpty();
1:     }
1: 
1:     public boolean iterate() {
1:         MessageDispatch message = messageQueue.dequeueNoWait();
0:         if( message==null ) {
1:             return false;
1:         } else {
1:             dispatch(message);
0:             return true;
1:         }
1:     }
1: 
0: 	List getUnconsumedMessages() {
0: 		return messageQueue.removeAll();
1: 	}
1:     
1: }
author:Timothy A. Bish
-------------------------------------------------------------------------------
commit:0a66b79
/////////////////////////////////////////////////////////////////////////
0:  *
/////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////
1:     List<MessageDispatch> getUnconsumedMessages() {
author:Bosanac Dejan
-------------------------------------------------------------------------------
commit:8bf987b
/////////////////////////////////////////////////////////////////////////
1: import org.slf4j.Logger;
1: import org.slf4j.LoggerFactory;
/////////////////////////////////////////////////////////////////////////
1:     private static final Logger LOG = LoggerFactory.getLogger(ActiveMQSessionExecutor.class);
commit:1f063e8
/////////////////////////////////////////////////////////////////////////
1:         if (this.session.connection != null && this.session.connection.isMessagePrioritySupported()) {
author:Robert Davies
-------------------------------------------------------------------------------
commit:c14dc3a
/////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////
1:     private final ActiveMQSession session;
1:     private final MessageDispatchChannel messageQueue;
0:         if (this.session.connection.isMessagePrioritySupported()) {
1:            this.messageQueue = new SimplePriorityMessageDispatchChannel();
0:         }else {
1:             this.messageQueue = new FifoMessageDispatchChannel();
1:         }
commit:0cf2cdc
/////////////////////////////////////////////////////////////////////////
0: import java.util.concurrent.atomic.AtomicBoolean;
/////////////////////////////////////////////////////////////////////////
0:     private AtomicBoolean taskRunnerCreated = new AtomicBoolean();
/////////////////////////////////////////////////////////////////////////
0:                     if (taskRunnerCreated.compareAndSet(false, true)) {
0:                         if (taskRunner == null) {
0:                             taskRunner = session.connection.getSessionTaskRunner().createTaskRunner(this,
1:                                     "ActiveMQ Session: " + session.getSessionId());
1:                         }
0:                 while (iterate()) {
/////////////////////////////////////////////////////////////////////////
0:                     taskRunnerCreated.set(false);
commit:cbaa58b
/////////////////////////////////////////////////////////////////////////
0:         
/////////////////////////////////////////////////////////////////////////
1:                 break;
commit:1623820
/////////////////////////////////////////////////////////////////////////
commit:d964145
/////////////////////////////////////////////////////////////////////////
0:         if (!session.isSessionAsyncDispatch() && !dispatchedBySessionPool){
author:Gary Tully
-------------------------------------------------------------------------------
commit:c808beb
/////////////////////////////////////////////////////////////////////////
1:                                 if (!isRunning()) {
1:                                     // stop has been called
1:                                     return;
0:                                 }
/////////////////////////////////////////////////////////////////////////
1:                 synchronized(this) {
0:                     messageQueue.stop();
1:                     if (this.taskRunner != null) {
1:                         this.taskRunner.shutdown();
1:                         this.taskRunner = null;
0:                     }
author:David Jencks
-------------------------------------------------------------------------------
commit:577eae6
/////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////
1:     private volatile TaskRunner taskRunner;
/////////////////////////////////////////////////////////////////////////
1:                     TaskRunner taskRunner = this.taskRunner;
0:                     if (taskRunner == null) {
1:                         synchronized (this) {
1:                             if (this.taskRunner == null) {
1:                                 this.taskRunner = session.connection.getSessionTaskRunner().createTaskRunner(this,
0:                                         "ActiveMQ Session: " + session.getSessionId());
0:                             }
1:                             taskRunner = this.taskRunner;
/////////////////////////////////////////////////////////////////////////
1:         for (ActiveMQMessageConsumer consumer : this.session.consumers) {
/////////////////////////////////////////////////////////////////////////
0:                 TaskRunner taskRunner = this.taskRunner;
0:                     this.taskRunner = null;
/////////////////////////////////////////////////////////////////////////
1:         return messageQueue.dequeueNoWait();
/////////////////////////////////////////////////////////////////////////
1:         for (ActiveMQMessageConsumer consumer : this.session.consumers) {
author:James Strachan
-------------------------------------------------------------------------------
commit:78cf4b1
/////////////////////////////////////////////////////////////////////////
0: import org.apache.commons.logging.Log;
0: import org.apache.commons.logging.LogFactory;
/////////////////////////////////////////////////////////////////////////
0:     private static final transient Log log = LogFactory.getLog(ActiveMQSessionExecutor.class);
0: 
1:     private boolean startedOrWarnedThatNotStarted;
0:     private long warnAboutUnstartedConnectionTime = 500L;
/////////////////////////////////////////////////////////////////////////
1:         if (!startedOrWarnedThatNotStarted) {
0: 
1:             ActiveMQConnection connection = session.connection;
1:             long aboutUnstartedConnectionTimeout = connection.getWarnAboutUnstartedConnectionTimeout();
1:             if (connection.isStarted() || aboutUnstartedConnectionTimeout < 0L) {
1:                 startedOrWarnedThatNotStarted = true;
0:             }
0:             else {
1:                 long elapsedTime = System.currentTimeMillis() - connection.getTimeCreated();
0: 
0:                 // lets only warn when a significant amount of time has passed just in case its normal operation
1:                 if (elapsedTime > aboutUnstartedConnectionTimeout) {
0:                     log.warn("Received a message on a connection which is not yet started. Have you forgotten to call Connection.start()? Connection: " + connection + " Received: " + message);
1:                     startedOrWarnedThatNotStarted = true;
0:                 }
0:             }
0:         }
0: 
commit:6cf2169
/////////////////////////////////////////////////////////////////////////
0:                 taskRunner = session.connection.getSessionTaskRunner().createTaskRunner(this, "ActiveMQ Session: "+session.getSessionId());
commit:35e0888
/////////////////////////////////////////////////////////////////////////
0: 
0:         // TODO  - we should use a Map for this indexed by consumerId
0:         
============================================================================