1:40a7d3b: /**
1:57b4941:  * Licensed to the Apache Software Foundation (ASF) under one or more
1:57b4941:  * contributor license agreements.  See the NOTICE file distributed with
1:57b4941:  * this work for additional information regarding copyright ownership.
1:57b4941:  * The ASF licenses this file to You under the Apache License, Version 2.0
1:57b4941:  * (the "License"); you may not use this file except in compliance with
1:57b4941:  * the License.  You may obtain a copy of the License at
4:40a7d3b:  *
1:5f1adbe:  *      http://www.apache.org/licenses/LICENSE-2.0
1:40a7d3b:  *
1:40a7d3b:  * Unless required by applicable law or agreed to in writing, software
1:40a7d3b:  * distributed under the License is distributed on an "AS IS" BASIS,
1:40a7d3b:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:40a7d3b:  * See the License for the specific language governing permissions and
1:40a7d3b:  * limitations under the License.
1:92a698f:  */
1:f1a084e: package org.apache.activemq.web;
6:40a7d3b: 
1:540dd5c: import java.io.IOException;
1:540dd5c: import java.io.PrintWriter;
1:540dd5c: import java.util.Hashtable;
1:540dd5c: import java.util.Map;
1:540dd5c: 
1:40a7d3b: import javax.jms.Destination;
1:40a7d3b: import javax.jms.JMSException;
1:40a7d3b: import javax.jms.Message;
1:40a7d3b: import javax.jms.Session;
1:40a7d3b: import javax.servlet.ServletException;
1:40a7d3b: import javax.servlet.http.HttpServletRequest;
1:40a7d3b: import javax.servlet.http.HttpServletResponse;
1:40a7d3b: 
1:40a7d3b: /**
1:40a7d3b:  * A servlet which will publish dummy market data prices
1:b0c2a40:  * 
1:40a7d3b:  * 
1:40a7d3b:  */
1:40a7d3b: public class PortfolioPublishServlet extends MessageServletSupport {
1:40a7d3b: 
1:540dd5c:     private static final int MAX_DELTA_PERCENT = 1;
1:540dd5c:     private static final Map<String, Double> LAST_PRICES = new Hashtable<String, Double>();
1:40a7d3b: 
1:40a7d3b:     public void init() throws ServletException {
1:40a7d3b:         super.init();
3:40a7d3b:     }
1:40a7d3b: 
1:40a7d3b:     protected void doGet(HttpServletRequest request, HttpServletResponse response) throws ServletException, IOException {
1:40a7d3b:         PrintWriter out = response.getWriter();
1:40a7d3b:         String[] stocks = request.getParameterValues("stocks");
1:40a7d3b:         if (stocks == null || stocks.length == 0) {
1:40a7d3b:             out.println("<html><body>No <b>stocks</b> query parameter specified. Cannot publish market data</body></html>");
1:540dd5c:         } else {
1:540dd5c:             Integer total = (Integer)request.getSession(true).getAttribute("total");
1:540dd5c:             if (total == null) {
1:540dd5c:                 total = Integer.valueOf(0);
1:540dd5c:             }
1:540dd5c: 
1:40a7d3b:             int count = getNumberOfMessages(request);
1:540dd5c:             total = Integer.valueOf(total.intValue() + count);
1:540dd5c:             request.getSession().setAttribute("total", total);
1:540dd5c: 
1:40a7d3b:             try {
1:c1a1dd2:                 WebClient client = WebClient.getWebClient(request);
1:40a7d3b:                 for (int i = 0; i < count; i++) {
1:40a7d3b:                     sendMessage(client, stocks);
1:40a7d3b:                 }
1:40a7d3b:                 out.print("<html><head><meta http-equiv='refresh' content='");
1:40a7d3b:                 String refreshRate = request.getParameter("refresh");
1:40a7d3b:                 if (refreshRate == null || refreshRate.length() == 0) {
1:40a7d3b:                     refreshRate = "1";
1:40a7d3b:                 }
1:fafd12d:                 out.print(escape(refreshRate));
1:40a7d3b:                 out.println("'/></head>");
1:51eb87a:                 out.println("<body>Published <b>" + escape(Integer.toString(count)) + "</b> of " + escape(Integer.toString(total))
1:51eb87a:                         + " price messages.  Refresh = " + escape(refreshRate) + "s");
1:40a7d3b:                 out.println("</body></html>");
1:40a7d3b: 
1:540dd5c:             } catch (JMSException e) {
1:40a7d3b:                 out.println("<html><body>Failed sending price messages due to <b>" + e + "</b></body></html>");
1:40a7d3b:                 log("Failed to send message: " + e, e);
1:40a7d3b:             }
1:40a7d3b:         }
1:40a7d3b:     }
1:40a7d3b: 
1:40a7d3b:     protected void sendMessage(WebClient client, String[] stocks) throws JMSException {
1:40a7d3b:         Session session = client.getSession();
1:40a7d3b: 
1:40a7d3b:         int idx = 0;
1:40a7d3b:         while (true) {
1:540dd5c:             idx = (int)Math.round(stocks.length * Math.random());
1:40a7d3b:             if (idx < stocks.length) {
1:40a7d3b:                 break;
1:40a7d3b:             }
1:40a7d3b:         }
1:40a7d3b:         String stock = stocks[idx];
1:40a7d3b:         Destination destination = session.createTopic("STOCKS." + stock);
1:40a7d3b:         String stockText = createStockText(stock);
1:40a7d3b:         log("Sending: " + stockText + " on destination: " + destination);
1:40a7d3b:         Message message = session.createTextMessage(stockText);
1:40a7d3b:         client.send(destination, message);
1:40a7d3b:     }
1:40a7d3b: 
1:40a7d3b:     protected String createStockText(String stock) {
1:540dd5c:         Double value = LAST_PRICES.get(stock);
1:40a7d3b:         if (value == null) {
1:40a7d3b:             value = new Double(Math.random() * 100);
1:40a7d3b:         }
1:40a7d3b: 
1:40a7d3b:         // lets mutate the value by some percentage
1:40a7d3b:         double oldPrice = value.doubleValue();
1:40a7d3b:         value = new Double(mutatePrice(oldPrice));
1:540dd5c:         LAST_PRICES.put(stock, value);
1:40a7d3b:         double price = value.doubleValue();
1:40a7d3b: 
1:40a7d3b:         double offer = price * 1.001;
1:40a7d3b: 
1:40a7d3b:         String movement = (price > oldPrice) ? "up" : "down";
1:40a7d3b:         return "<price stock='" + stock + "' bid='" + price + "' offer='" + offer + "' movement='" + movement + "'/>";
1:40a7d3b:     }
1:40a7d3b: 
1:40a7d3b:     protected double mutatePrice(double price) {
1:540dd5c:         double percentChange = (2 * Math.random() * MAX_DELTA_PERCENT) - MAX_DELTA_PERCENT;
1:40a7d3b: 
1:40a7d3b:         return price * (100 + percentChange) / 100;
1:40a7d3b:     }
1:40a7d3b: 
1:40a7d3b:     protected int getNumberOfMessages(HttpServletRequest request) {
1:40a7d3b:         String name = request.getParameter("count");
1:40a7d3b:         if (name != null) {
1:40a7d3b:             return Integer.parseInt(name);
1:40a7d3b:         }
1:40a7d3b:         return 1;
1:40a7d3b:     }
1:51eb87a: 
1:51eb87a:     protected String escape(String text) throws IOException {
1:51eb87a:         return java.net.URLEncoder.encode(text, "UTF-8");
1:51eb87a:     }
1:40a7d3b: }
============================================================================
author:Bosanac Dejan
-------------------------------------------------------------------------------
commit:fafd12d
/////////////////////////////////////////////////////////////////////////
1:                 out.print(escape(refreshRate));
commit:51eb87a
/////////////////////////////////////////////////////////////////////////
1:                 out.println("<body>Published <b>" + escape(Integer.toString(count)) + "</b> of " + escape(Integer.toString(total))
1:                         + " price messages.  Refresh = " + escape(refreshRate) + "s");
/////////////////////////////////////////////////////////////////////////
1: 
1:     protected String escape(String text) throws IOException {
1:         return java.net.URLEncoder.encode(text, "UTF-8");
1:     }
author:Hiram R. Chirino
-------------------------------------------------------------------------------
commit:b0c2a40
/////////////////////////////////////////////////////////////////////////
1:  * 
commit:540dd5c
/////////////////////////////////////////////////////////////////////////
1: import java.io.IOException;
1: import java.io.PrintWriter;
1: import java.util.Hashtable;
1: import java.util.Map;
1: 
/////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////
1:     private static final int MAX_DELTA_PERCENT = 1;
1:     private static final Map<String, Double> LAST_PRICES = new Hashtable<String, Double>();
/////////////////////////////////////////////////////////////////////////
1:         } else {
1:             Integer total = (Integer)request.getSession(true).getAttribute("total");
1:             if (total == null) {
1:                 total = Integer.valueOf(0);
1:             }
1: 
1:             total = Integer.valueOf(total.intValue() + count);
1:             request.getSession().setAttribute("total", total);
1: 
/////////////////////////////////////////////////////////////////////////
0:                 out.println("<body>Published <b>" + count + "</b> of " + total + " price messages.  Refresh = " + refreshRate + "s");
1:             } catch (JMSException e) {
/////////////////////////////////////////////////////////////////////////
1:             idx = (int)Math.round(stocks.length * Math.random());
/////////////////////////////////////////////////////////////////////////
1:         Double value = LAST_PRICES.get(stock);
/////////////////////////////////////////////////////////////////////////
1:         LAST_PRICES.put(stock, value);
/////////////////////////////////////////////////////////////////////////
1:         double percentChange = (2 * Math.random() * MAX_DELTA_PERCENT) - MAX_DELTA_PERCENT;
commit:5f1adbe
/////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////
1:  *      http://www.apache.org/licenses/LICENSE-2.0
commit:57b4941
/////////////////////////////////////////////////////////////////////////
1:  * Licensed to the Apache Software Foundation (ASF) under one or more
1:  * contributor license agreements.  See the NOTICE file distributed with
1:  * this work for additional information regarding copyright ownership.
1:  * The ASF licenses this file to You under the Apache License, Version 2.0
1:  * (the "License"); you may not use this file except in compliance with
1:  * the License.  You may obtain a copy of the License at
commit:48b4869
/////////////////////////////////////////////////////////////////////////
0:  * Copyright 2005-2006 The Apache Software Foundation
commit:f1a084e
/////////////////////////////////////////////////////////////////////////
1: package org.apache.activemq.web;
author:Robert Davies
-------------------------------------------------------------------------------
commit:702b13b
/////////////////////////////////////////////////////////////////////////
0:                 total=Integer.valueOf(0);
0:             total=Integer.valueOf(total.intValue()+count);
author:James Strachan
-------------------------------------------------------------------------------
commit:c1a1dd2
/////////////////////////////////////////////////////////////////////////
1:                 WebClient client = WebClient.getWebClient(request);
commit:40a7d3b
/////////////////////////////////////////////////////////////////////////
1: /** 
1:  * 
0:  * Copyright 2004 Protique Ltd
1:  * 
0:  * Licensed under the Apache License, Version 2.0 (the "License"); 
0:  * you may not use this file except in compliance with the License. 
0:  * You may obtain a copy of the License at 
1:  * 
0:  * http://www.apache.org/licenses/LICENSE-2.0
1:  * 
1:  * Unless required by applicable law or agreed to in writing, software
1:  * distributed under the License is distributed on an "AS IS" BASIS, 
1:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. 
1:  * See the License for the specific language governing permissions and 
1:  * limitations under the License. 
1:  * 
0:  **/
0: package org.activemq.web;
1: 
1: import javax.jms.Destination;
1: import javax.jms.JMSException;
1: import javax.jms.Message;
1: import javax.jms.Session;
1: import javax.servlet.ServletException;
1: import javax.servlet.http.HttpServletRequest;
1: import javax.servlet.http.HttpServletResponse;
0: import java.io.IOException;
0: import java.io.PrintWriter;
0: import java.util.Hashtable;
0: import java.util.Map;
1: 
1: /**
1:  * A servlet which will publish dummy market data prices
1:  * 
0:  * @version $Revision: 1.1.1.1 $
1:  */
1: public class PortfolioPublishServlet extends MessageServletSupport {
1: 
0:     private static final int maxDeltaPercent = 1;
0:     private static final Map lastPrices = new Hashtable();
0:     private boolean ricoStyle = true;
1: 
1:     
1:     public void init() throws ServletException {
1:         super.init();
1:         
0:         ricoStyle = asBoolean(getServletConfig().getInitParameter("rico"), true);
1:     }
1: 
1:     protected void doGet(HttpServletRequest request, HttpServletResponse response) throws ServletException, IOException {
1:         PrintWriter out = response.getWriter();
1:         String[] stocks = request.getParameterValues("stocks");
1:         if (stocks == null || stocks.length == 0) {
1:             out.println("<html><body>No <b>stocks</b> query parameter specified. Cannot publish market data</body></html>");
1:         }
0:         else {
0:             Integer total=(Integer)request.getSession(true).getAttribute("total");
0:             if (total==null)
0:                 total=new Integer(0);
1:             
1:             
1:             int count = getNumberOfMessages(request);
0:             total=new Integer(total.intValue()+count);
0:             request.getSession().setAttribute("total",total);
1:             
1:             try {
0:                 WebClient client = getWebClient(request);
1:                 for (int i = 0; i < count; i++) {
1:                     sendMessage(client, stocks);
1:                 }
1:                 out.print("<html><head><meta http-equiv='refresh' content='");
1:                 String refreshRate = request.getParameter("refresh");
1:                 if (refreshRate == null || refreshRate.length() == 0) {
1:                     refreshRate = "1";
1:                 }
0:                 out.print(refreshRate);
1:                 out.println("'/></head>");
0:                 out.println("<body>Published <b>" + count + "</b> of "+total+ " price messages.  Refresh = "+refreshRate+"s");
1:                 out.println("</body></html>");
1: 
1:             }
0:             catch (JMSException e) {
1:                 out.println("<html><body>Failed sending price messages due to <b>" + e + "</b></body></html>");
1:                 log("Failed to send message: " + e, e);
1:             }
1:         }
1:     }
1: 
1:     protected void sendMessage(WebClient client, String[] stocks) throws JMSException {
1:         Session session = client.getSession();
1: 
1:         int idx = 0;
1:         while (true) {
0:             idx = (int) Math.round(stocks.length * Math.random());
1:             if (idx < stocks.length) {
1:                 break;
1:             }
1:         }
1:         String stock = stocks[idx];
1:         Destination destination = session.createTopic("STOCKS." + stock);
1:         String stockText = createStockText(stock);
1:         log("Sending: " + stockText + " on destination: " + destination);
1:         Message message = session.createTextMessage(stockText);
1:         client.send(destination, message);
1:     }
1: 
1:     protected String createStockText(String stock) {
0:         Double value = (Double) lastPrices.get(stock);
1:         if (value == null) {
1:             value = new Double(Math.random() * 100);
1:         }
1: 
1:         // lets mutate the value by some percentage
1:         double oldPrice = value.doubleValue();
1:         value = new Double(mutatePrice(oldPrice));
0:         lastPrices.put(stock, value);
1:         double price = value.doubleValue();
1: 
1:         double offer = price * 1.001;
1: 
1:         String movement = (price > oldPrice) ? "up" : "down";
1:         return "<price stock='" + stock + "' bid='" + price + "' offer='" + offer + "' movement='" + movement + "'/>";
1:     }
1: 
1:     protected double mutatePrice(double price) {
0:         double percentChange = (2 * Math.random() * maxDeltaPercent) - maxDeltaPercent;
1: 
1:         return price * (100 + percentChange) / 100;
1:     }
1: 
1:     protected int getNumberOfMessages(HttpServletRequest request) {
1:         String name = request.getParameter("count");
1:         if (name != null) {
1:             return Integer.parseInt(name);
1:         }
1:         return 1;
1:     }
1: }
author:Jonas B. Lim
-------------------------------------------------------------------------------
commit:92a698f
/////////////////////////////////////////////////////////////////////////
0: /**
0:  *
0:  * Copyright 2004 The Apache Software Foundation
0:  *
0:  * Licensed under the Apache License, Version 2.0 (the "License");
0:  * you may not use this file except in compliance with the License.
0:  * You may obtain a copy of the License at
0:  *
0:  *
0:  * distributed under the License is distributed on an "AS IS" BASIS,
0:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
0:  * See the License for the specific language governing permissions and
0:  * limitations under the License.
1:  */
author:Frederick G. Oconer
-------------------------------------------------------------------------------
commit:b6b7cce
============================================================================