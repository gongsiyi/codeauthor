3:9becfc0: /**
1:9becfc0:  * Licensed to the Apache Software Foundation (ASF) under one or more
1:9becfc0:  * contributor license agreements. See the NOTICE file distributed with
1:9becfc0:  * this work for additional information regarding copyright ownership.
1:9becfc0:  * The ASF licenses this file to You under the Apache License, Version 2.0
1:9becfc0:  * (the "License"); you may not use this file except in compliance with
1:9becfc0:  * the License. You may obtain a copy of the License at
1:9becfc0:  * <p/>
1:9becfc0:  * http://www.apache.org/licenses/LICENSE-2.0
1:9becfc0:  * <p/>
1:9becfc0:  * Unless required by applicable law or agreed to in writing, software
1:9becfc0:  * distributed under the License is distributed on an "AS IS" BASIS,
1:9becfc0:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:9becfc0:  * See the License for the specific language governing permissions and
1:9becfc0:  * limitations under the License.
3:9becfc0:  */
1:9becfc0: package org.apache.activemq.ra;
2:9becfc0: 
1:9becfc0: import javax.jms.ConnectionFactory;
1:9becfc0: import javax.jms.MessageProducer;
1:9becfc0: import javax.jms.Queue;
1:9becfc0: import javax.jms.Session;
1:9becfc0: import javax.net.ssl.KeyManager;
1:9becfc0: import javax.net.ssl.TrustManager;
1:9becfc0: 
1:ba1bd26: import org.apache.activemq.broker.SslBrokerService;
1:ba1bd26: import org.apache.activemq.broker.SslContext;
1:ba1bd26: import org.apache.activemq.broker.TransportConnector;
1:ba1bd26: import org.apache.activemq.transport.TransportFactory;
1:ba1bd26: import org.apache.activemq.transport.tcp.SslTransportFactory;
1:ba1bd26: import org.junit.After;
1:ba1bd26: import org.junit.Before;
1:ba1bd26: import org.junit.Test;
1:9becfc0: 
1:ba1bd26: public class SSLMAnagedConnectionFactoryTest {
1:ba1bd26: 
1:ba1bd26:     private static final String KAHADB_DIRECTORY = "target/activemq-data/";
1:ba1bd26:     private static final String DEFAULT_HOST = "ssl://localhost:0";
1:ba1bd26: 
1:9becfc0:     private ConnectionManagerAdapter connectionManager = new ConnectionManagerAdapter();
1:9becfc0:     private ActiveMQManagedConnectionFactory managedConnectionFactory;
1:9becfc0:     private ConnectionFactory connectionFactory;
1:9becfc0:     private ManagedConnectionProxy connection;
1:9becfc0:     private ActiveMQManagedConnection managedConnection;
1:9becfc0:     private SslBrokerService broker;
1:ba1bd26:     private String connectionURI;
1:9becfc0: 
1:ba1bd26:     @Before
1:ba1bd26:     public void setUp() throws Exception {
1:ba1bd26:         createAndStartBroker();
1:ba1bd26: 
1:9becfc0:         managedConnectionFactory = new ActiveMQManagedConnectionFactory();
1:ba1bd26:         managedConnectionFactory.setServerUrl(connectionURI);
1:9becfc0:         managedConnectionFactory.setTrustStore("server.keystore");
1:9becfc0:         managedConnectionFactory.setTrustStorePassword("password");
1:9becfc0:         managedConnectionFactory.setKeyStore("client.keystore");
1:9becfc0:         managedConnectionFactory.setKeyStorePassword("password");
1:9becfc0: 
1:ba1bd26:         connectionFactory = (ConnectionFactory)managedConnectionFactory.createConnectionFactory(connectionManager);
1:9becfc0:     }
1:9becfc0: 
1:ba1bd26:     @After
1:ba1bd26:     public void tearDown() throws Exception {
1:9becfc0:         if (broker != null) {
1:9becfc0:             broker.stop();
1:9becfc0:         }
1:9becfc0:     }
1:9becfc0: 
1:ba1bd26:     @Test(timeout = 60000)
1:9becfc0:     public void testSSLManagedConnection() throws Exception {
1:9becfc0:         connection = (ManagedConnectionProxy)connectionFactory.createConnection();
1:9becfc0:         managedConnection = connection.getManagedConnection();
1:9becfc0:         //do some stuff
1:9becfc0:         Session session = connection.createSession(false, Session.AUTO_ACKNOWLEDGE);
1:9becfc0:         Queue t = session.createQueue("TEST");
1:9becfc0:         MessageProducer producer = session.createProducer(t);
1:9becfc0:         producer.send(session.createTextMessage("test message."));
1:9becfc0:         managedConnection.destroy();
1:9becfc0:         connection.close();
1:9becfc0:     }
1:9becfc0: 
1:9becfc0:     private void createAndStartBroker() throws Exception {
1:9becfc0:         broker = new SslBrokerService();
1:9becfc0:         broker.setDeleteAllMessagesOnStartup(true);
1:9becfc0:         broker.setUseJmx(false);
1:9becfc0:         broker.setBrokerName("BROKER");
1:ba1bd26:         broker.setDataDirectory(KAHADB_DIRECTORY);
1:9becfc0:         KeyManager[] km = SSLTest.getKeyManager();
1:9becfc0:         TrustManager[] tm = SSLTest.getTrustManager();
1:ba1bd26:         TransportConnector connector = broker.addSslConnector(DEFAULT_HOST, km, tm, null);
1:9becfc0:         broker.start();
1:ba1bd26:         broker.waitUntilStarted();
1:ba1bd26: 
1:ba1bd26:         connectionURI = connector.getPublishableConnectString();
1:ba1bd26: 
1:9becfc0:         SslTransportFactory sslFactory = new SslTransportFactory();
1:9becfc0:         SslContext ctx = new SslContext(km, tm, null);
1:9becfc0:         SslContext.setCurrentSslContext(ctx);
1:9becfc0:         TransportFactory.registerTransportFactory("ssl", sslFactory);
1:9becfc0:     }
1:9becfc0: }
============================================================================
author:Timothy Bish
-------------------------------------------------------------------------------
commit:ba1bd26
/////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////
1: import org.apache.activemq.broker.SslBrokerService;
1: import org.apache.activemq.broker.SslContext;
1: import org.apache.activemq.broker.TransportConnector;
1: import org.apache.activemq.transport.TransportFactory;
1: import org.apache.activemq.transport.tcp.SslTransportFactory;
1: import org.junit.After;
1: import org.junit.Before;
1: import org.junit.Test;
1: public class SSLMAnagedConnectionFactoryTest {
1: 
1:     private static final String KAHADB_DIRECTORY = "target/activemq-data/";
1:     private static final String DEFAULT_HOST = "ssl://localhost:0";
1: 
1:     private String connectionURI;
1:     @Before
1:     public void setUp() throws Exception {
1:         createAndStartBroker();
1: 
1:         managedConnectionFactory.setServerUrl(connectionURI);
1:         connectionFactory = (ConnectionFactory)managedConnectionFactory.createConnectionFactory(connectionManager);
1:     @After
1:     public void tearDown() throws Exception {
1:     @Test(timeout = 60000)
/////////////////////////////////////////////////////////////////////////
1:         broker.setDataDirectory(KAHADB_DIRECTORY);
1:         TransportConnector connector = broker.addSslConnector(DEFAULT_HOST, km, tm, null);
1:         broker.waitUntilStarted();
1: 
1:         connectionURI = connector.getPublishableConnectString();
1: 
author:Andy Taylor
-------------------------------------------------------------------------------
commit:9becfc0
/////////////////////////////////////////////////////////////////////////
1: /**
1:  * Licensed to the Apache Software Foundation (ASF) under one or more
1:  * contributor license agreements. See the NOTICE file distributed with
1:  * this work for additional information regarding copyright ownership.
1:  * The ASF licenses this file to You under the Apache License, Version 2.0
1:  * (the "License"); you may not use this file except in compliance with
1:  * the License. You may obtain a copy of the License at
1:  * <p/>
1:  * http://www.apache.org/licenses/LICENSE-2.0
1:  * <p/>
1:  * Unless required by applicable law or agreed to in writing, software
1:  * distributed under the License is distributed on an "AS IS" BASIS,
1:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:  * See the License for the specific language governing permissions and
1:  * limitations under the License.
1:  */
1: package org.apache.activemq.ra;
1: 
0: import junit.framework.TestCase;
0: import org.apache.activemq.broker.SslBrokerService;
0: import org.apache.activemq.broker.SslContext;
0: import org.apache.activemq.broker.TransportConnector;
0: import org.apache.activemq.transport.TransportFactory;
0: import org.apache.activemq.transport.tcp.SslTransportFactory;
1: 
1: import javax.jms.ConnectionFactory;
1: import javax.jms.MessageProducer;
1: import javax.jms.Queue;
1: import javax.jms.Session;
1: import javax.net.ssl.KeyManager;
1: import javax.net.ssl.TrustManager;
1: 
1: /**
0:  * @author <a href="mailto:andy.taylor@jboss.org">Andy Taylor</a>
1:  */
0: public class SSLMAnagedConnectionFactoryTest extends TestCase {
1: 
0:     private static final String DEFAULT_HOST = "ssl://0.0.0.0:61616";
1:     private ConnectionManagerAdapter connectionManager = new ConnectionManagerAdapter();
1:     private ActiveMQManagedConnectionFactory managedConnectionFactory;
1:     private ConnectionFactory connectionFactory;
1:     private ManagedConnectionProxy connection;
1:     private ActiveMQManagedConnection managedConnection;
1:     private SslBrokerService broker;
0:     private TransportConnector connector;
1: 
1:     /**
0:      * @see junit.framework.TestCase#setUp()
1:      */
0:     protected void setUp() throws Exception {
1:         managedConnectionFactory = new ActiveMQManagedConnectionFactory();
0:         managedConnectionFactory.setServerUrl(DEFAULT_HOST);
1:         managedConnectionFactory.setTrustStore("server.keystore");
1:         managedConnectionFactory.setTrustStorePassword("password");
1:         managedConnectionFactory.setKeyStore("client.keystore");
1:         managedConnectionFactory.setKeyStorePassword("password");
1: 
0:         connectionFactory = (ConnectionFactory)managedConnectionFactory.createConnectionFactory(connectionManager);createAndStartBroker();
1:     }
1: 
0:     @Override
0:     protected void tearDown() throws Exception {
1:         if (broker != null) {
1:             broker.stop();
1:         }
1:     }
1: 
1:     public void testSSLManagedConnection() throws Exception {
1:         connection = (ManagedConnectionProxy)connectionFactory.createConnection();
1:         managedConnection = connection.getManagedConnection();
1:         //do some stuff
1:         Session session = connection.createSession(false, Session.AUTO_ACKNOWLEDGE);
1:         Queue t = session.createQueue("TEST");
1:         MessageProducer producer = session.createProducer(t);
1:         producer.send(session.createTextMessage("test message."));
1:         managedConnection.destroy();
1:         connection.close();
1:     }
1: 
1:     private void createAndStartBroker() throws Exception {
1:         broker = new SslBrokerService();
1:         broker.setDeleteAllMessagesOnStartup(true);
1:         broker.setUseJmx(false);
1:         broker.setBrokerName("BROKER");
1:         KeyManager[] km = SSLTest.getKeyManager();
1:         TrustManager[] tm = SSLTest.getTrustManager();
0:         connector = broker.addSslConnector(DEFAULT_HOST, km, tm, null);
1:         broker.start();
0:         broker.waitUntilStarted();     // for client side
1:         SslTransportFactory sslFactory = new SslTransportFactory();
1:         SslContext ctx = new SslContext(km, tm, null);
1:         SslContext.setCurrentSslContext(ctx);
1:         TransportFactory.registerTransportFactory("ssl", sslFactory);
1:     }
1: }
============================================================================