1:4b7131f: /**
1:4b7131f:  * Licensed to the Apache Software Foundation (ASF) under one or more
1:4b7131f:  * contributor license agreements.  See the NOTICE file distributed with
1:4b7131f:  * this work for additional information regarding copyright ownership.
1:4b7131f:  * The ASF licenses this file to You under the Apache License, Version 2.0
1:4b7131f:  * (the "License"); you may not use this file except in compliance with
1:4b7131f:  * the License.  You may obtain a copy of the License at
1:4b7131f:  *
1:4b7131f:  *      http://www.apache.org/licenses/LICENSE-2.0
1:4b7131f:  *
1:4b7131f:  * Unless required by applicable law or agreed to in writing, software
1:4b7131f:  * distributed under the License is distributed on an "AS IS" BASIS,
1:4b7131f:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:4b7131f:  * See the License for the specific language governing permissions and
1:4b7131f:  * limitations under the License.
1:4b7131f:  */
1:4b7131f: package org.apache.activemq.transport.mqtt;
1:4b7131f: 
1:4b7131f: import static org.junit.Assert.assertTrue;
1:4b7131f: 
1:4b7131f: import java.io.IOException;
1:4b7131f: import java.net.Socket;
1:4b7131f: import java.util.Arrays;
1:4b7131f: import java.util.Collection;
1:1c72579: import java.util.concurrent.ExecutorService;
1:1c72579: import java.util.concurrent.Executors;
1:101b712: import java.util.concurrent.TimeUnit;
1:1c72579: import java.util.concurrent.atomic.AtomicInteger;
1:4b7131f: 
1:4b7131f: import javax.net.ssl.SSLSocketFactory;
1:4b7131f: 
1:4b7131f: import org.apache.activemq.util.Wait;
1:1c72579: import org.fusesource.mqtt.client.BlockingConnection;
1:1c72579: import org.fusesource.mqtt.client.MQTT;
1:4b7131f: import org.junit.After;
1:4b7131f: import org.junit.Test;
1:4b7131f: import org.junit.runner.RunWith;
1:4b7131f: import org.junit.runners.Parameterized;
1:4b7131f: import org.junit.runners.Parameterized.Parameters;
1:4b7131f: import org.slf4j.Logger;
1:4b7131f: import org.slf4j.LoggerFactory;
1:4b7131f: 
1:4b7131f: /**
1:4b7131f:  * Test that connection attempts that don't send a CONNECT frame will
1:4b7131f:  * get cleaned up by the inactivity monitor.
1:4b7131f:  */
1:4b7131f: @RunWith(Parameterized.class)
1:4b7131f: public class MQTTConnectTest extends MQTTTestSupport {
1:4b7131f: 
1:4b7131f:     private static final Logger LOG = LoggerFactory.getLogger(MQTTConnectTest.class);
1:4b7131f: 
1:4b7131f:     private Socket connection;
1:4b7131f: 
1:4b7131f:     @Parameters(name="{0}")
1:4b7131f:     public static Collection<Object[]> data() {
1:4b7131f:         return Arrays.asList(new Object[][] {
1:4b7131f:                 {"mqtt", false},
1:4b7131f:                 {"mqtt+ssl", true},
1:4b7131f:                 {"mqtt+nio", false},
1:4b7131f:                 {"mqtt+nio+ssl", true}
1:4b7131f:             });
1:4b7131f:     }
1:4b7131f: 
1:4b7131f:     public MQTTConnectTest(String connectorScheme, boolean useSSL) {
1:4b7131f:         super(connectorScheme, useSSL);
1:4b7131f:     }
1:4b7131f: 
1:4b7131f:     @Override
1:4b7131f:     @After
1:4b7131f:     public void tearDown() throws Exception {
1:4b7131f:         if (connection != null) {
1:4b7131f:             try {
1:4b7131f:                 connection.close();
1:4b7131f:             } catch (Throwable e) {}
1:4b7131f:             connection = null;
1:4b7131f:         }
1:4b7131f:         super.tearDown();
1:4b7131f:     }
1:4b7131f: 
1:4b7131f:     @Override
1:4b7131f:     public String getProtocolConfig() {
1:101b712:         return "transport.connectAttemptTimeout=1000";
1:4b7131f:     }
1:4b7131f: 
1:1c72579:     @Test(timeout = 90000)
1:1c72579:     public void testParallelConnectPlain() throws Exception {
1:1c72579:         final int THREAD_COUNT = 16;
1:1c72579:         final int CONNECTION_COUNT = 100;
1:1c72579:         ExecutorService executorService = Executors.newFixedThreadPool(THREAD_COUNT);
1:1c72579:         final AtomicInteger clientIdGemeratpr = new AtomicInteger();
1:1c72579:         for (int i = 0; i < CONNECTION_COUNT; i++) {
1:1c72579:             executorService.execute(new Runnable() {
1:1c72579:                 @Override
1:1c72579:                 public void run() {
1:1c72579: 
1:1c72579:                     try {
1:1c72579:                         MQTT mqtt = createMQTTConnection();
1:1c72579:                         mqtt.setClientId("client-" + clientIdGemeratpr.incrementAndGet());
1:1c72579:                         mqtt.setCleanSession(true);
1:1c72579: 
1:1c72579:                         BlockingConnection connection = mqtt.blockingConnection();
1:1c72579:                         connection.connect();
1:1c72579:                         connection.disconnect();
1:1c72579:                     } catch (Exception e) {
1:1c72579:                         LOG.error("unexpected exception on connect/disconnect", e);
1:1c72579:                         exceptions.add(e);
1:1c72579:                     }
1:1c72579:                 }
1:1c72579:             });
1:1c72579:         }
1:1c72579: 
1:1c72579:         executorService.shutdown();
1:1c72579:         assertTrue("executor done on time", executorService.awaitTermination(60, TimeUnit.SECONDS));
1:1c72579:     }
1:1c72579: 
1:4b7131f:     @Test(timeout = 60 * 1000)
1:4b7131f:     public void testInactivityMonitor() throws Exception {
1:4b7131f: 
1:4b7131f:         Thread t1 = new Thread() {
1:4b7131f: 
1:4b7131f:             @Override
1:4b7131f:             public void run() {
1:4b7131f:                 try {
1:4b7131f:                     connection = createConnection();
1:4b7131f:                     connection.getOutputStream().write(0);
1:4b7131f:                     connection.getOutputStream().flush();
1:4b7131f:                 } catch (Exception ex) {
1:4b7131f:                     LOG.error("unexpected exception on connect/disconnect", ex);
1:4b7131f:                     exceptions.add(ex);
1:4b7131f:                 }
1:4b7131f:             }
1:4b7131f:         };
1:4b7131f: 
1:4b7131f:         t1.start();
1:4b7131f: 
1:4b7131f:         assertTrue("one connection", Wait.waitFor(new Wait.Condition() {
1:4b7131f:              @Override
1:4b7131f:              public boolean isSatisified() throws Exception {
1:4b7131f:                  return 1 == brokerService.getTransportConnectors().get(0).connectionCount();
1:4b7131f:              }
1:101b712:          }, TimeUnit.SECONDS.toMillis(30), TimeUnit.MILLISECONDS.toMillis(100)));
1:4b7131f: 
1:4b7131f:         // and it should be closed due to inactivity
1:4b7131f:         assertTrue("no dangling connections", Wait.waitFor(new Wait.Condition() {
1:4b7131f:             @Override
1:4b7131f:             public boolean isSatisified() throws Exception {
1:4b7131f:                 return 0 == brokerService.getTransportConnectors().get(0).connectionCount();
1:4b7131f:             }
1:101b712:         }, TimeUnit.SECONDS.toMillis(30), TimeUnit.MILLISECONDS.toMillis(100)));
1:4b7131f: 
1:4b7131f:         assertTrue("no exceptions", exceptions.isEmpty());
1:4b7131f:     }
1:4b7131f: 
1:4b7131f:     protected Socket createConnection() throws IOException {
1:4b7131f:         if (isUseSSL()) {
1:4b7131f:             return SSLSocketFactory.getDefault().createSocket("localhost", port);
1:4b7131f:         } else {
1:4b7131f:             return new Socket("localhost", port);
1:4b7131f:         }
1:4b7131f:     }
1:4b7131f: }
============================================================================
author:Timothy Bish
-------------------------------------------------------------------------------
commit:1c72579
/////////////////////////////////////////////////////////////////////////
1: import java.util.concurrent.ExecutorService;
1: import java.util.concurrent.Executors;
1: import java.util.concurrent.atomic.AtomicInteger;
1: import org.fusesource.mqtt.client.BlockingConnection;
1: import org.fusesource.mqtt.client.MQTT;
/////////////////////////////////////////////////////////////////////////
1:     @Test(timeout = 90000)
1:     public void testParallelConnectPlain() throws Exception {
1:         final int THREAD_COUNT = 16;
1:         final int CONNECTION_COUNT = 100;
1:         ExecutorService executorService = Executors.newFixedThreadPool(THREAD_COUNT);
1:         final AtomicInteger clientIdGemeratpr = new AtomicInteger();
1:         for (int i = 0; i < CONNECTION_COUNT; i++) {
1:             executorService.execute(new Runnable() {
1:                 @Override
1:                 public void run() {
1: 
1:                     try {
1:                         MQTT mqtt = createMQTTConnection();
1:                         mqtt.setClientId("client-" + clientIdGemeratpr.incrementAndGet());
1:                         mqtt.setCleanSession(true);
1: 
1:                         BlockingConnection connection = mqtt.blockingConnection();
1:                         connection.connect();
1:                         connection.disconnect();
1:                     } catch (Exception e) {
1:                         LOG.error("unexpected exception on connect/disconnect", e);
1:                         exceptions.add(e);
1:                     }
1:                 }
1:             });
1:         }
1: 
1:         executorService.shutdown();
1:         assertTrue("executor done on time", executorService.awaitTermination(60, TimeUnit.SECONDS));
1:     }
1: 
commit:101b712
/////////////////////////////////////////////////////////////////////////
1: import java.util.concurrent.TimeUnit;
/////////////////////////////////////////////////////////////////////////
1:         return "transport.connectAttemptTimeout=1000";
/////////////////////////////////////////////////////////////////////////
1:          }, TimeUnit.SECONDS.toMillis(30), TimeUnit.MILLISECONDS.toMillis(100)));
/////////////////////////////////////////////////////////////////////////
1:         }, TimeUnit.SECONDS.toMillis(30), TimeUnit.MILLISECONDS.toMillis(100)));
commit:4b7131f
/////////////////////////////////////////////////////////////////////////
1: /**
1:  * Licensed to the Apache Software Foundation (ASF) under one or more
1:  * contributor license agreements.  See the NOTICE file distributed with
1:  * this work for additional information regarding copyright ownership.
1:  * The ASF licenses this file to You under the Apache License, Version 2.0
1:  * (the "License"); you may not use this file except in compliance with
1:  * the License.  You may obtain a copy of the License at
1:  *
1:  *      http://www.apache.org/licenses/LICENSE-2.0
1:  *
1:  * Unless required by applicable law or agreed to in writing, software
1:  * distributed under the License is distributed on an "AS IS" BASIS,
1:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:  * See the License for the specific language governing permissions and
1:  * limitations under the License.
1:  */
1: package org.apache.activemq.transport.mqtt;
1: 
1: import static org.junit.Assert.assertTrue;
1: 
1: import java.io.IOException;
1: import java.net.Socket;
1: import java.util.Arrays;
1: import java.util.Collection;
1: 
1: import javax.net.ssl.SSLSocketFactory;
1: 
1: import org.apache.activemq.util.Wait;
1: import org.junit.After;
1: import org.junit.Test;
1: import org.junit.runner.RunWith;
1: import org.junit.runners.Parameterized;
1: import org.junit.runners.Parameterized.Parameters;
1: import org.slf4j.Logger;
1: import org.slf4j.LoggerFactory;
1: 
1: /**
1:  * Test that connection attempts that don't send a CONNECT frame will
1:  * get cleaned up by the inactivity monitor.
1:  */
1: @RunWith(Parameterized.class)
1: public class MQTTConnectTest extends MQTTTestSupport {
1: 
1:     private static final Logger LOG = LoggerFactory.getLogger(MQTTConnectTest.class);
1: 
1:     private Socket connection;
1: 
1:     @Parameters(name="{0}")
1:     public static Collection<Object[]> data() {
1:         return Arrays.asList(new Object[][] {
1:                 {"mqtt", false},
1:                 {"mqtt+ssl", true},
1:                 {"mqtt+nio", false},
1:                 {"mqtt+nio+ssl", true}
1:             });
1:     }
1: 
1:     public MQTTConnectTest(String connectorScheme, boolean useSSL) {
1:         super(connectorScheme, useSSL);
1:     }
1: 
1:     @Override
1:     @After
1:     public void tearDown() throws Exception {
1:         if (connection != null) {
1:             try {
1:                 connection.close();
1:             } catch (Throwable e) {}
1:             connection = null;
1:         }
1:         super.tearDown();
1:     }
1: 
1:     @Override
1:     public String getProtocolConfig() {
0:         return "transport.connectAttemptTimeout=2000";
1:     }
1: 
1:     @Test(timeout = 60 * 1000)
1:     public void testInactivityMonitor() throws Exception {
1: 
1:         Thread t1 = new Thread() {
1: 
1:             @Override
1:             public void run() {
1:                 try {
1:                     connection = createConnection();
1:                     connection.getOutputStream().write(0);
1:                     connection.getOutputStream().flush();
1:                 } catch (Exception ex) {
1:                     LOG.error("unexpected exception on connect/disconnect", ex);
1:                     exceptions.add(ex);
1:                 }
1:             }
1:         };
1: 
1:         t1.start();
1: 
1:         assertTrue("one connection", Wait.waitFor(new Wait.Condition() {
1:              @Override
1:              public boolean isSatisified() throws Exception {
1:                  return 1 == brokerService.getTransportConnectors().get(0).connectionCount();
1:              }
0:          }));
1: 
1:         // and it should be closed due to inactivity
1:         assertTrue("no dangling connections", Wait.waitFor(new Wait.Condition() {
1:             @Override
1:             public boolean isSatisified() throws Exception {
1:                 return 0 == brokerService.getTransportConnectors().get(0).connectionCount();
1:             }
0:         }));
1: 
1:         assertTrue("no exceptions", exceptions.isEmpty());
1:     }
1: 
1:     protected Socket createConnection() throws IOException {
1:         if (isUseSSL()) {
1:             return SSLSocketFactory.getDefault().createSocket("localhost", port);
1:         } else {
1:             return new Socket("localhost", port);
1:         }
1:     }
1: }
============================================================================