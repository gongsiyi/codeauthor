1:a107823: /**
1:57b4941:  * Licensed to the Apache Software Foundation (ASF) under one or more
1:57b4941:  * contributor license agreements.  See the NOTICE file distributed with
1:57b4941:  * this work for additional information regarding copyright ownership.
1:57b4941:  * The ASF licenses this file to You under the Apache License, Version 2.0
1:57b4941:  * (the "License"); you may not use this file except in compliance with
1:57b4941:  * the License.  You may obtain a copy of the License at
3:a107823:  *
1:5f1adbe:  *      http://www.apache.org/licenses/LICENSE-2.0
1:a107823:  *
1:a107823:  * Unless required by applicable law or agreed to in writing, software
1:a107823:  * distributed under the License is distributed on an "AS IS" BASIS,
1:a107823:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:a107823:  * See the License for the specific language governing permissions and
1:a107823:  * limitations under the License.
1:a107823:  */
1:a107823: package org.apache.activemq.console.filter;
1:a107823: 
1:a107823: import java.util.ArrayList;
1:5f1adbe: import java.util.Iterator;
1:a107823: import java.util.List;
1:a107823: 
1:a107823: public abstract class WildcardTransformFilter extends AbstractQueryFilter {
1:a107823: 
1:a107823:     /**
1:5f1adbe:      * Creates a wildcard transform filter that is able to convert a wildcard
1:5f1adbe:      * expression (determined by isWildcardQuery) to a another query type (use
1:5f1adbe:      * transformWildcardQuery).
1:5f1adbe:      * 
1:a107823:      * @param next - the next query filter
1:a107823:      */
1:a107823:     protected WildcardTransformFilter(QueryFilter next) {
1:a107823:         super(next);
1:a107823:     }
1:a107823: 
1:a107823:     /**
1:a107823:      * Converts the query list to set of different queries
1:5f1adbe:      * 
1:a107823:      * @param queries - query list to transform
1:a107823:      * @return - result of the query
1:a107823:      * @throws Exception
1:a107823:      */
1:a107823:     public List query(List queries) throws Exception {
1:a107823:         List newQueries = new ArrayList();
1:a107823: 
1:5f1adbe:         for (Iterator i = queries.iterator(); i.hasNext();) {
1:a107823:             String queryToken = (String)i.next();
1:a107823: 
1:a107823:             // Transform the wildcard query
1:a107823:             if (isWildcardQuery(queryToken)) {
1:a107823:                 // Transform the value part only
1:a107823:                 newQueries.add(transformWildcardQuery(queryToken));
1:a107823: 
1:5f1adbe:                 // Maintain the query as is
1:a107823:             } else {
1:a107823:                 newQueries.add(queryToken);
1:a107823:             }
1:a107823:         }
1:a107823: 
1:a107823:         return next.query(newQueries);
1:a107823:     }
1:a107823: 
1:a107823:     /**
1:a107823:      * Use to determine is a query string is a wildcard query
1:5f1adbe:      * 
1:a107823:      * @param query - query string
1:a107823:      * @return true, if the query string is a wildcard query, false otherwise
1:a107823:      */
1:a107823:     protected abstract boolean isWildcardQuery(String query);
1:a107823: 
1:a107823:     /**
1:a107823:      * Use to transform a wildcard query string to another query format
1:5f1adbe:      * 
1:a107823:      * @param query - query string to transform
1:a107823:      * @return transformed query
1:a107823:      */
1:a107823:     protected abstract String transformWildcardQuery(String query);
1:a107823: }
============================================================================
author:Hiram R. Chirino
-------------------------------------------------------------------------------
commit:5f1adbe
/////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////
1:  *      http://www.apache.org/licenses/LICENSE-2.0
/////////////////////////////////////////////////////////////////////////
1: import java.util.Iterator;
1:      * Creates a wildcard transform filter that is able to convert a wildcard
1:      * expression (determined by isWildcardQuery) to a another query type (use
1:      * transformWildcardQuery).
1:      * 
/////////////////////////////////////////////////////////////////////////
1:      * 
/////////////////////////////////////////////////////////////////////////
1:         for (Iterator i = queries.iterator(); i.hasNext();) {
/////////////////////////////////////////////////////////////////////////
1:                 // Maintain the query as is
/////////////////////////////////////////////////////////////////////////
1:      * 
/////////////////////////////////////////////////////////////////////////
1:      * 
commit:57b4941
/////////////////////////////////////////////////////////////////////////
1:  * Licensed to the Apache Software Foundation (ASF) under one or more
1:  * contributor license agreements.  See the NOTICE file distributed with
1:  * this work for additional information regarding copyright ownership.
1:  * The ASF licenses this file to You under the Apache License, Version 2.0
1:  * (the "License"); you may not use this file except in compliance with
1:  * the License.  You may obtain a copy of the License at
commit:a107823
/////////////////////////////////////////////////////////////////////////
1: /**
1:  *
0:  * Copyright 2005-2006 The Apache Software Foundation
1:  *
0:  * Licensed under the Apache License, Version 2.0 (the "License");
0:  * you may not use this file except in compliance with the License.
0:  * You may obtain a copy of the License at
1:  *
0:  * http://www.apache.org/licenses/LICENSE-2.0
1:  *
1:  * Unless required by applicable law or agreed to in writing, software
1:  * distributed under the License is distributed on an "AS IS" BASIS,
1:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:  * See the License for the specific language governing permissions and
1:  * limitations under the License.
1:  */
1: package org.apache.activemq.console.filter;
1: 
0: import java.util.Iterator;
1: import java.util.ArrayList;
1: import java.util.List;
1: 
1: public abstract class WildcardTransformFilter extends AbstractQueryFilter {
1: 
1:     /**
0:      * Creates a wildcard transform filter that is able to convert a wildcard expression (determined by isWildcardQuery)
0:      * to a another query type (use transformWildcardQuery).
1:      * @param next - the next query filter
1:      */
1:     protected WildcardTransformFilter(QueryFilter next) {
1:         super(next);
1:     }
1: 
1:     /**
1:      * Converts the query list to set of different queries
1:      * @param queries - query list to transform
1:      * @return - result of the query
1:      * @throws Exception
1:      */
1:     public List query(List queries) throws Exception {
1:         List newQueries = new ArrayList();
1: 
0:         for (Iterator i=queries.iterator(); i.hasNext();) {
1:             String queryToken = (String)i.next();
1: 
1:             // Transform the wildcard query
1:             if (isWildcardQuery(queryToken)) {
1:                 // Transform the value part only
1:                 newQueries.add(transformWildcardQuery(queryToken));
1: 
0:             // Maintain the query as is
1:             } else {
1:                 newQueries.add(queryToken);
1:             }
1:         }
1: 
1:         return next.query(newQueries);
1:     }
1: 
1:     /**
1:      * Use to determine is a query string is a wildcard query
1:      * @param query - query string
1:      * @return true, if the query string is a wildcard query, false otherwise
1:      */
1:     protected abstract boolean isWildcardQuery(String query);
1: 
1:     /**
1:      * Use to transform a wildcard query string to another query format
1:      * @param query - query string to transform
1:      * @return transformed query
1:      */
1:     protected abstract String transformWildcardQuery(String query);
1: }
author:Adrian T. Co
-------------------------------------------------------------------------------
commit:7fa8660
/////////////////////////////////////////////////////////////////////////
0: package org.apache.activemq.console.filter;
commit:4b8822f
/////////////////////////////////////////////////////////////////////////
0: /**
0:  *
0:  * Copyright 2005-2006 The Apache Software Foundation
0:  *
0:  * Licensed under the Apache License, Version 2.0 (the "License");
0:  * you may not use this file except in compliance with the License.
0:  * You may obtain a copy of the License at
0:  *
0:  * http://www.apache.org/licenses/LICENSE-2.0
0:  *
0:  * Unless required by applicable law or agreed to in writing, software
0:  * distributed under the License is distributed on an "AS IS" BASIS,
0:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
0:  * See the License for the specific language governing permissions and
0:  * limitations under the License.
0:  */
0: package org.apache.activemq.broker.console.filter;
0: 
0: import java.util.Iterator;
0: import java.util.ArrayList;
0: import java.util.List;
0: 
0: public abstract class WildcardTransformFilter extends AbstractQueryFilter {
0: 
0:     /**
0:      * Creates a wildcard transform filter that is able to convert a wildcard expression (determined by isWildcardQuery)
0:      * to a another query type (use transformWildcardQuery).
0:      * @param next - the next query filter
0:      */
0:     protected WildcardTransformFilter(QueryFilter next) {
0:         super(next);
0:     }
0: 
0:     /**
0:      * Converts the query list to set of different queries
0:      * @param queries - query list to transform
0:      * @return - result of the query
0:      * @throws Exception
0:      */
0:     public List query(List queries) throws Exception {
0:         List newQueries = new ArrayList();
0: 
0:         for (Iterator i=queries.iterator(); i.hasNext();) {
0:             String queryToken = (String)i.next();
0: 
0:             // Transform the wildcard query
0:             if (isWildcardQuery(queryToken)) {
0:                 // Transform the value part only
0:                 newQueries.add(transformWildcardQuery(queryToken));
0: 
0:             // Maintain the query as is
0:             } else {
0:                 newQueries.add(queryToken);
0:             }
0:         }
0: 
0:         return next.query(newQueries);
0:     }
0: 
0:     /**
0:      * Use to determine is a query string is a wildcard query
0:      * @param query - query string
0:      * @return true, if the query string is a wildcard query, false otherwise
0:      */
0:     protected abstract boolean isWildcardQuery(String query);
0: 
0:     /**
0:      * Use to transform a wildcard query string to another query format
0:      * @param query - query string to transform
0:      * @return transformed query
0:      */
0:     protected abstract String transformWildcardQuery(String query);
0: }
============================================================================