1:2a64e88: /**
1:2a64e88:  * Licensed to the Apache Software Foundation (ASF) under one or more
1:2a64e88:  * contributor license agreements.  See the NOTICE file distributed with
1:2a64e88:  * this work for additional information regarding copyright ownership.
1:2a64e88:  * The ASF licenses this file to You under the Apache License, Version 2.0
1:2a64e88:  * (the "License"); you may not use this file except in compliance with
1:2a64e88:  * the License.  You may obtain a copy of the License at
1:2a64e88:  *
1:2a64e88:  *      http://www.apache.org/licenses/LICENSE-2.0
1:2a64e88:  *
1:2a64e88:  * Unless required by applicable law or agreed to in writing, software
1:2a64e88:  * distributed under the License is distributed on an "AS IS" BASIS,
1:2a64e88:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:2a64e88:  * See the License for the specific language governing permissions and
1:2a64e88:  * limitations under the License.
1:2a64e88:  */
1:2a64e88: package org.apache.activemq.transport.nio;
1:2a64e88: 
1:2a64e88: import javax.jms.BytesMessage;
1:2a64e88: import javax.jms.Connection;
1:2a64e88: import javax.jms.Destination;
1:2a64e88: import javax.jms.JMSException;
1:2a64e88: import javax.jms.Message;
1:2a64e88: import javax.jms.MessageConsumer;
1:2a64e88: import javax.jms.MessageProducer;
1:2a64e88: import javax.jms.Queue;
1:2a64e88: import javax.jms.Session;
1:2a64e88: 
1:2a64e88: import junit.framework.TestCase;
1:2a64e88: 
1:2a64e88: import org.apache.activemq.ActiveMQConnectionFactory;
1:2a64e88: import org.apache.activemq.broker.BrokerService;
1:2a64e88: import org.apache.activemq.broker.TransportConnector;
1:2a64e88: import org.apache.activemq.util.Wait;
1:2a64e88: import org.slf4j.Logger;
1:2a64e88: import org.slf4j.LoggerFactory;
1:2a64e88: 
1:2a64e88: @SuppressWarnings({ "javadoc" })
1:2a64e88: public class NIOSSLConcurrencyTest extends TestCase {
1:2a64e88: 
1:2a64e88:     BrokerService broker;
1:2a64e88:     Connection connection;
1:2a64e88: 
1:2a64e88:     public static final String KEYSTORE_TYPE = "jks";
1:2a64e88:     public static final String PASSWORD = "password";
1:2a64e88:     public static final String SERVER_KEYSTORE = "src/test/resources/server.keystore";
1:2a64e88:     public static final String TRUST_KEYSTORE = "src/test/resources/client.keystore";
1:2a64e88: 
1:2a64e88:     public static final int PRODUCER_COUNT = 10;
1:2a64e88:     public static final int CONSUMER_COUNT = 10;
1:2a64e88:     public static final int MESSAGE_COUNT = 10000;
1:2a64e88:     public static final int MESSAGE_SIZE = 4096;
1:2a64e88: 
1:2a64e88:     final ConsumerThread[] consumers = new ConsumerThread[CONSUMER_COUNT];
1:2a64e88:     final Session[] producerSessions = new Session[PRODUCER_COUNT];
1:2a64e88:     final Session[] consumerSessions = new Session[CONSUMER_COUNT];
1:2a64e88: 
1:2a64e88:     byte[] messageData;
1:2a64e88:     volatile boolean failed;
1:2a64e88: 
1:2a64e88:     @Override
1:2a64e88:     protected void setUp() throws Exception {
1:2a64e88:         System.setProperty("javax.net.ssl.trustStore", TRUST_KEYSTORE);
1:2a64e88:         System.setProperty("javax.net.ssl.trustStorePassword", PASSWORD);
1:2a64e88:         System.setProperty("javax.net.ssl.trustStoreType", KEYSTORE_TYPE);
1:2a64e88:         System.setProperty("javax.net.ssl.keyStore", SERVER_KEYSTORE);
1:2a64e88:         System.setProperty("javax.net.ssl.keyStoreType", KEYSTORE_TYPE);
1:2a64e88:         System.setProperty("javax.net.ssl.keyStorePassword", PASSWORD);
1:2a64e88: 
1:2a64e88:         broker = new BrokerService();
1:2a64e88:         broker.setPersistent(false);
1:2a64e88:         broker.setUseJmx(false);
1:2a64e88:         TransportConnector connector = broker.addConnector("nio+ssl://localhost:0?transport.needClientAuth=true&transport.enabledCipherSuites=SSL_RSA_WITH_RC4_128_SHA,SSL_DH_anon_WITH_3DES_EDE_CBC_SHA");
1:2a64e88:         broker.start();
1:2a64e88:         broker.waitUntilStarted();
1:2a64e88: 
1:2a64e88:         failed = false;
1:2a64e88:         messageData = new byte[MESSAGE_SIZE];
1:2a64e88:         for (int i = 0; i < MESSAGE_SIZE;  i++)
1:2a64e88:         {
1:2a64e88:             messageData[i] = (byte) (i & 0xff);
1:2a64e88:         }
1:2a64e88: 
1:2a64e88:         ActiveMQConnectionFactory factory = new ActiveMQConnectionFactory("nio+ssl://localhost:" + connector.getConnectUri().getPort());
1:2a64e88:         connection = factory.createConnection();
1:2a64e88: 
1:2a64e88:         for (int i = 0; i < PRODUCER_COUNT; i++) {
1:2a64e88:             producerSessions[i] = connection.createSession(false, Session.AUTO_ACKNOWLEDGE);
1:2a64e88:         }
1:2a64e88: 
1:2a64e88:         for (int i = 0; i < CONSUMER_COUNT; i++) {
1:2a64e88:             consumerSessions[i] = connection.createSession(false, Session.AUTO_ACKNOWLEDGE);
1:2a64e88:         }
1:2a64e88: 
1:2a64e88:         connection.start();
1:2a64e88:     }
1:2a64e88: 
1:2a64e88:     @Override
1:2a64e88:     protected void tearDown() throws Exception {
1:2a64e88:         if (connection != null) {
1:2a64e88:             connection.close();
1:2a64e88:         }
1:2a64e88: 
1:2a64e88:         if (broker != null) {
1:2a64e88:             broker.stop();
1:2a64e88:             broker.waitUntilStopped();
1:2a64e88:         }
1:2a64e88:     }
1:2a64e88: 
1:2a64e88:     public void testLoad() throws Exception {
1:2a64e88:         for (int i = 0; i < PRODUCER_COUNT; i++) {
1:2a64e88:             Queue dest = producerSessions[i].createQueue("TEST" + i);
1:2a64e88:             ProducerThread producer = new ProducerThread(producerSessions[i], dest);
1:2a64e88:             producer.setMessageCount(MESSAGE_COUNT);
1:2a64e88:             producer.start();
1:2a64e88:         }
1:2a64e88: 
1:2a64e88:         for (int i = 0; i < CONSUMER_COUNT; i++) {
1:2a64e88:             Queue dest = consumerSessions[i].createQueue("TEST" + i);
1:2a64e88:             ConsumerThread consumer = new ConsumerThread(consumerSessions[i], dest);
1:2a64e88:             consumer.setMessageCount(MESSAGE_COUNT);
1:2a64e88:             consumer.start();
1:2a64e88:             consumers[i] = consumer;
1:2a64e88:         }
1:2a64e88: 
1:2a64e88:         Wait.waitFor(new Wait.Condition() {
1:2a64e88:             @Override
1:2a64e88:             public boolean isSatisified() throws Exception {
1:2a64e88:                 return failed || getReceived() == PRODUCER_COUNT * MESSAGE_COUNT;
1:2a64e88:             }
1:7e61d56:         }, 120000);
1:2a64e88: 
1:2a64e88:         assertEquals(PRODUCER_COUNT * MESSAGE_COUNT, getReceived());
1:2a64e88: 
1:2a64e88:     }
1:2a64e88: 
1:2a64e88:     protected int getReceived() {
1:2a64e88:         int received = 0;
1:2a64e88:         for (ConsumerThread consumer : consumers) {
1:2a64e88:             received += consumer.getReceived();
1:2a64e88:         }
1:2a64e88:         return received;
1:2a64e88:     }
1:2a64e88: 
1:2a64e88:     private class ConsumerThread extends Thread {
1:2a64e88: 
1:2a64e88:         private final Logger LOG = LoggerFactory.getLogger(ConsumerThread.class);
1:2a64e88: 
1:2a64e88:         int messageCount = 1000;
1:2a64e88:         int received = 0;
1:2a64e88:         Destination dest;
1:2a64e88:         Session sess;
1:2a64e88:         boolean breakOnNull = true;
1:2a64e88: 
1:2a64e88:         public ConsumerThread(Session sess, Destination dest) {
1:2a64e88:             this.dest = dest;
1:2a64e88:             this.sess = sess;
1:2a64e88:         }
1:2a64e88: 
1:2a64e88:         @Override
1:2a64e88:         public void run() {
1:2a64e88:           MessageConsumer consumer = null;
1:2a64e88: 
1:2a64e88:             try {
1:2a64e88:                 consumer = sess.createConsumer(dest);
1:2a64e88:                 while (received < messageCount) {
1:2a64e88:                     Message msg = consumer.receive(3000);
1:2a64e88:                     if (msg != null) {
1:2a64e88:                         LOG.info("Received test message: " + received++);
1:2a64e88:                     } else {
1:2a64e88:                         if (breakOnNull) {
1:2a64e88:                             break;
1:2a64e88:                         }
1:2a64e88:                     }
1:2a64e88:                 }
1:2a64e88:             } catch (JMSException e) {
1:2a64e88:                 e.printStackTrace();
1:2a64e88:                 failed = true;
1:2a64e88:             } finally {
1:2a64e88:                 if (consumer != null) {
1:2a64e88:                     try {
1:2a64e88:                         consumer.close();
1:2a64e88:                     } catch (JMSException e) {
1:2a64e88:                         e.printStackTrace();
1:2a64e88:                     }
1:2a64e88:                 }
1:2a64e88:             }
1:2a64e88:         }
1:2a64e88: 
1:2a64e88:         public int getReceived() {
1:2a64e88:             return received;
1:2a64e88:         }
1:2a64e88: 
1:2a64e88:         public void setMessageCount(int messageCount) {
1:2a64e88:             this.messageCount = messageCount;
1:2a64e88:         }
1:2a64e88:     }
1:2a64e88: 
1:2a64e88:     private class ProducerThread extends Thread {
1:2a64e88: 
1:2a64e88:         private final Logger LOG = LoggerFactory.getLogger(ProducerThread.class);
1:2a64e88: 
1:2a64e88:         int messageCount = 1000;
1:2a64e88:         Destination dest;
1:2a64e88:         protected Session sess;
1:2a64e88:         int sleep = 0;
1:2a64e88:         int sentCount = 0;
1:2a64e88: 
1:2a64e88:         public ProducerThread(Session sess, Destination dest) {
1:2a64e88:             this.dest = dest;
1:2a64e88:             this.sess = sess;
1:2a64e88:         }
1:2a64e88: 
1:2a64e88:         @Override
1:2a64e88:         public void run() {
1:2a64e88:             MessageProducer producer = null;
1:2a64e88:             try {
1:2a64e88:                 producer = sess.createProducer(dest);
1:2a64e88:                 for (sentCount = 0; sentCount < messageCount; sentCount++) {
1:2a64e88:                     producer.send(createMessage(sentCount));
1:2a64e88:                     LOG.info("Sent 'test message: " + sentCount + "'");
1:2a64e88:                     if (sleep > 0) {
1:2a64e88:                         Thread.sleep(sleep);
1:2a64e88:                     }
1:2a64e88:                 }
1:2a64e88:             } catch (Exception e) {
1:2a64e88:                 e.printStackTrace();
1:2a64e88:                 failed = true;
1:2a64e88:             } finally {
1:2a64e88:                 if (producer != null) {
1:2a64e88:                     try {
1:2a64e88:                         producer.close();
1:2a64e88:                     } catch (JMSException e) {
1:2a64e88:                         e.printStackTrace();
1:2a64e88:                     }
1:2a64e88:                 }
1:2a64e88:             }
1:2a64e88:         }
1:2a64e88: 
1:2a64e88:         protected Message createMessage(int i) throws Exception {
1:2a64e88:             BytesMessage b = sess.createBytesMessage();
1:2a64e88:             b.writeBytes(messageData);
1:2a64e88:             return b;
1:2a64e88:         }
1:2a64e88: 
1:2a64e88:         public void setMessageCount(int messageCount) {
1:2a64e88:             this.messageCount = messageCount;
1:2a64e88:         }
1:2a64e88: 
1:2a64e88:     }
1:2a64e88: }
============================================================================
author:Timothy A. Bish
-------------------------------------------------------------------------------
commit:7e61d56
/////////////////////////////////////////////////////////////////////////
1:         }, 120000);
commit:2a64e88
/////////////////////////////////////////////////////////////////////////
1: /**
1:  * Licensed to the Apache Software Foundation (ASF) under one or more
1:  * contributor license agreements.  See the NOTICE file distributed with
1:  * this work for additional information regarding copyright ownership.
1:  * The ASF licenses this file to You under the Apache License, Version 2.0
1:  * (the "License"); you may not use this file except in compliance with
1:  * the License.  You may obtain a copy of the License at
1:  *
1:  *      http://www.apache.org/licenses/LICENSE-2.0
1:  *
1:  * Unless required by applicable law or agreed to in writing, software
1:  * distributed under the License is distributed on an "AS IS" BASIS,
1:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:  * See the License for the specific language governing permissions and
1:  * limitations under the License.
1:  */
1: package org.apache.activemq.transport.nio;
1: 
1: import javax.jms.BytesMessage;
1: import javax.jms.Connection;
1: import javax.jms.Destination;
1: import javax.jms.JMSException;
1: import javax.jms.Message;
1: import javax.jms.MessageConsumer;
1: import javax.jms.MessageProducer;
1: import javax.jms.Queue;
1: import javax.jms.Session;
1: 
1: import junit.framework.TestCase;
1: 
1: import org.apache.activemq.ActiveMQConnectionFactory;
1: import org.apache.activemq.broker.BrokerService;
1: import org.apache.activemq.broker.TransportConnector;
1: import org.apache.activemq.util.Wait;
1: import org.slf4j.Logger;
1: import org.slf4j.LoggerFactory;
1: 
1: @SuppressWarnings({ "javadoc" })
1: public class NIOSSLConcurrencyTest extends TestCase {
1: 
1:     BrokerService broker;
1:     Connection connection;
1: 
1:     public static final String KEYSTORE_TYPE = "jks";
1:     public static final String PASSWORD = "password";
1:     public static final String SERVER_KEYSTORE = "src/test/resources/server.keystore";
1:     public static final String TRUST_KEYSTORE = "src/test/resources/client.keystore";
1: 
1:     public static final int PRODUCER_COUNT = 10;
1:     public static final int CONSUMER_COUNT = 10;
1:     public static final int MESSAGE_COUNT = 10000;
1:     public static final int MESSAGE_SIZE = 4096;
1: 
1:     final ConsumerThread[] consumers = new ConsumerThread[CONSUMER_COUNT];
1:     final Session[] producerSessions = new Session[PRODUCER_COUNT];
1:     final Session[] consumerSessions = new Session[CONSUMER_COUNT];
1: 
1:     byte[] messageData;
1:     volatile boolean failed;
1: 
1:     @Override
1:     protected void setUp() throws Exception {
1:         System.setProperty("javax.net.ssl.trustStore", TRUST_KEYSTORE);
1:         System.setProperty("javax.net.ssl.trustStorePassword", PASSWORD);
1:         System.setProperty("javax.net.ssl.trustStoreType", KEYSTORE_TYPE);
1:         System.setProperty("javax.net.ssl.keyStore", SERVER_KEYSTORE);
1:         System.setProperty("javax.net.ssl.keyStoreType", KEYSTORE_TYPE);
1:         System.setProperty("javax.net.ssl.keyStorePassword", PASSWORD);
1: 
1:         broker = new BrokerService();
1:         broker.setPersistent(false);
1:         broker.setUseJmx(false);
1:         TransportConnector connector = broker.addConnector("nio+ssl://localhost:0?transport.needClientAuth=true&transport.enabledCipherSuites=SSL_RSA_WITH_RC4_128_SHA,SSL_DH_anon_WITH_3DES_EDE_CBC_SHA");
1:         broker.start();
1:         broker.waitUntilStarted();
1: 
1:         failed = false;
1:         messageData = new byte[MESSAGE_SIZE];
1:         for (int i = 0; i < MESSAGE_SIZE;  i++)
1:         {
1:             messageData[i] = (byte) (i & 0xff);
1:         }
1: 
1:         ActiveMQConnectionFactory factory = new ActiveMQConnectionFactory("nio+ssl://localhost:" + connector.getConnectUri().getPort());
1:         connection = factory.createConnection();
1: 
1:         for (int i = 0; i < PRODUCER_COUNT; i++) {
1:             producerSessions[i] = connection.createSession(false, Session.AUTO_ACKNOWLEDGE);
1:         }
1: 
1:         for (int i = 0; i < CONSUMER_COUNT; i++) {
1:             consumerSessions[i] = connection.createSession(false, Session.AUTO_ACKNOWLEDGE);
1:         }
1: 
1:         connection.start();
1:     }
1: 
1:     @Override
1:     protected void tearDown() throws Exception {
1:         if (connection != null) {
1:             connection.close();
1:         }
1: 
1:         if (broker != null) {
1:             broker.stop();
1:             broker.waitUntilStopped();
1:         }
1:     }
1: 
1:     public void testLoad() throws Exception {
1:         for (int i = 0; i < PRODUCER_COUNT; i++) {
1:             Queue dest = producerSessions[i].createQueue("TEST" + i);
1:             ProducerThread producer = new ProducerThread(producerSessions[i], dest);
1:             producer.setMessageCount(MESSAGE_COUNT);
1:             producer.start();
1:         }
1: 
1:         for (int i = 0; i < CONSUMER_COUNT; i++) {
1:             Queue dest = consumerSessions[i].createQueue("TEST" + i);
1:             ConsumerThread consumer = new ConsumerThread(consumerSessions[i], dest);
1:             consumer.setMessageCount(MESSAGE_COUNT);
1:             consumer.start();
1:             consumers[i] = consumer;
1:         }
1: 
1:         Wait.waitFor(new Wait.Condition() {
1:             @Override
1:             public boolean isSatisified() throws Exception {
1:                 return failed || getReceived() == PRODUCER_COUNT * MESSAGE_COUNT;
1:             }
0:         }, 60000);
1: 
1:         assertEquals(PRODUCER_COUNT * MESSAGE_COUNT, getReceived());
1: 
1:     }
1: 
1:     protected int getReceived() {
1:         int received = 0;
1:         for (ConsumerThread consumer : consumers) {
1:             received += consumer.getReceived();
1:         }
1:         return received;
1:     }
1: 
1:     private class ConsumerThread extends Thread {
1: 
1:         private final Logger LOG = LoggerFactory.getLogger(ConsumerThread.class);
1: 
1:         int messageCount = 1000;
1:         int received = 0;
1:         Destination dest;
1:         Session sess;
1:         boolean breakOnNull = true;
1: 
1:         public ConsumerThread(Session sess, Destination dest) {
1:             this.dest = dest;
1:             this.sess = sess;
1:         }
1: 
1:         @Override
1:         public void run() {
1:           MessageConsumer consumer = null;
1: 
1:             try {
1:                 consumer = sess.createConsumer(dest);
1:                 while (received < messageCount) {
1:                     Message msg = consumer.receive(3000);
1:                     if (msg != null) {
1:                         LOG.info("Received test message: " + received++);
1:                     } else {
1:                         if (breakOnNull) {
1:                             break;
1:                         }
1:                     }
1:                 }
1:             } catch (JMSException e) {
1:                 e.printStackTrace();
1:                 failed = true;
1:             } finally {
1:                 if (consumer != null) {
1:                     try {
1:                         consumer.close();
1:                     } catch (JMSException e) {
1:                         e.printStackTrace();
1:                     }
1:                 }
1:             }
1:         }
1: 
1:         public int getReceived() {
1:             return received;
1:         }
1: 
1:         public void setMessageCount(int messageCount) {
1:             this.messageCount = messageCount;
1:         }
1:     }
1: 
1:     private class ProducerThread extends Thread {
1: 
1:         private final Logger LOG = LoggerFactory.getLogger(ProducerThread.class);
1: 
1:         int messageCount = 1000;
1:         Destination dest;
1:         protected Session sess;
1:         int sleep = 0;
1:         int sentCount = 0;
1: 
1:         public ProducerThread(Session sess, Destination dest) {
1:             this.dest = dest;
1:             this.sess = sess;
1:         }
1: 
1:         @Override
1:         public void run() {
1:             MessageProducer producer = null;
1:             try {
1:                 producer = sess.createProducer(dest);
1:                 for (sentCount = 0; sentCount < messageCount; sentCount++) {
1:                     producer.send(createMessage(sentCount));
1:                     LOG.info("Sent 'test message: " + sentCount + "'");
1:                     if (sleep > 0) {
1:                         Thread.sleep(sleep);
1:                     }
1:                 }
1:             } catch (Exception e) {
1:                 e.printStackTrace();
1:                 failed = true;
1:             } finally {
1:                 if (producer != null) {
1:                     try {
1:                         producer.close();
1:                     } catch (JMSException e) {
1:                         e.printStackTrace();
1:                     }
1:                 }
1:             }
1:         }
1: 
1:         protected Message createMessage(int i) throws Exception {
1:             BytesMessage b = sess.createBytesMessage();
1:             b.writeBytes(messageData);
1:             return b;
1:         }
1: 
1:         public void setMessageCount(int messageCount) {
1:             this.messageCount = messageCount;
1:         }
1: 
1:     }
1: }
============================================================================