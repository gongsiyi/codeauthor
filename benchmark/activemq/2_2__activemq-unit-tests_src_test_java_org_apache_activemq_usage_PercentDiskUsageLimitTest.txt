1:4cddd2c: /**
1:4cddd2c:  * Licensed to the Apache Software Foundation (ASF) under one or more
1:4cddd2c:  * contributor license agreements.  See the NOTICE file distributed with
1:4cddd2c:  * this work for additional information regarding copyright ownership.
1:4cddd2c:  * The ASF licenses this file to You under the Apache License, Version 2.0
1:4cddd2c:  * (the "License"); you may not use this file except in compliance with
1:4cddd2c:  * the License.  You may obtain a copy of the License at
1:4cddd2c:  *
1:4cddd2c:  *      http://www.apache.org/licenses/LICENSE-2.0
1:4cddd2c:  *
1:4cddd2c:  * Unless required by applicable law or agreed to in writing, software
1:4cddd2c:  * distributed under the License is distributed on an "AS IS" BASIS,
1:4cddd2c:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:4cddd2c:  * See the License for the specific language governing permissions and
1:4cddd2c:  * limitations under the License.
1:4cddd2c:  */
1:4cddd2c: package org.apache.activemq.usage;
1:4cddd2c: 
1:4cddd2c: import static org.junit.Assert.assertEquals;
1:d7febdd: import static org.junit.Assert.fail;
1:d7febdd: 
1:4cddd2c: 
1:4cddd2c: import java.io.File;
1:4cddd2c: 
1:d7febdd: import org.apache.activemq.ConfigurationException;
1:4cddd2c: import org.apache.activemq.broker.BrokerService;
1:4cddd2c: import org.apache.activemq.store.PersistenceAdapter;
1:4cddd2c: import org.apache.activemq.util.StoreUtil;
1:4cddd2c: import org.apache.commons.io.FileUtils;
1:4cddd2c: import org.junit.After;
1:4cddd2c: import org.junit.Before;
1:4cddd2c: import org.junit.Rule;
1:4cddd2c: import org.junit.Test;
1:4cddd2c: import org.junit.rules.TemporaryFolder;
1:4cddd2c: import org.slf4j.Logger;
1:4cddd2c: import org.slf4j.LoggerFactory;
1:4cddd2c: 
1:4cddd2c: /**
1:4cddd2c:  *
1:4cddd2c:  * This test is for AMQ-5393  and will check that schedulePeriodForDiskLimitCheck
1:4cddd2c:  * properly schedules a task that will update disk limits if the amount of usable disk space drops
1:4cddd2c:  * because another process uses up disk space.
1:4cddd2c:  *
1:4cddd2c:  */
1:4cddd2c: public class PercentDiskUsageLimitTest {
1:4cddd2c:     protected static final Logger LOG = LoggerFactory
1:4cddd2c:             .getLogger(PercentDiskUsageLimitTest.class);
1:4cddd2c: 
1:4cddd2c:     @Rule
1:4cddd2c:     public TemporaryFolder dataFileDir = new TemporaryFolder(new File("target"));
1:4cddd2c: 
1:4cddd2c:     private BrokerService broker;
1:4cddd2c:     private PersistenceAdapter adapter;
1:4cddd2c:     private TempUsage tempUsage;
1:4cddd2c:     private StoreUsage storeUsage;
1:4cddd2c:     private File storeDir;
1:4cddd2c: 
1:4cddd2c:     @Before
1:4cddd2c:     public void setUpBroker() throws Exception {
1:4cddd2c:         broker = new BrokerService();
1:4cddd2c:         broker.setPersistent(true);
1:4cddd2c:         broker.setDataDirectoryFile(dataFileDir.getRoot());
1:4cddd2c:         broker.setDeleteAllMessagesOnStartup(true);
1:4cddd2c:         adapter = broker.getPersistenceAdapter();
1:4cddd2c: 
1:4cddd2c:         FileUtils.forceMkdir(adapter.getDirectory());
1:4cddd2c:         FileUtils.forceMkdir(broker.getTempDataStore().getDirectory());
1:4cddd2c:         storeDir = StoreUtil.findParentDirectory(adapter.getDirectory());
1:4cddd2c: 
1:4cddd2c:         final SystemUsage systemUsage = broker.getSystemUsage();
1:4cddd2c:         tempUsage = systemUsage.getTempUsage();
1:4cddd2c:         storeUsage = systemUsage.getStoreUsage();
1:4cddd2c:     }
1:4cddd2c: 
1:4cddd2c:     protected void startBroker() throws Exception {
1:4cddd2c:         broker.start();
1:4cddd2c:         broker.waitUntilStarted();
1:4cddd2c:     }
1:4cddd2c: 
1:4cddd2c:     @After
1:4cddd2c:     public void stopBroker() throws Exception {
1:4cddd2c:         broker.stop();
1:4cddd2c:         broker.waitUntilStopped();
1:4cddd2c:     }
1:4cddd2c: 
1:4cddd2c: 
1:4cddd2c:     /**
1:4cddd2c:      *
1:4cddd2c:      */
1:4cddd2c:     @Test(timeout=30000)
1:4cddd2c:     public void testDiskLimit() throws Exception {
1:4cddd2c:         int freePercent = getFreePercentage();
1:4cddd2c: 
1:4cddd2c:         if (freePercent >= 2) {
1:4cddd2c:             int maxUsage = freePercent / 2;
1:4cddd2c: 
1:4cddd2c:             //Set max usage to less than free space so we know that all space can be allocated
1:4cddd2c:             storeUsage.setPercentLimit(maxUsage);
1:4cddd2c:             tempUsage.setPercentLimit(maxUsage);
1:4cddd2c:             startBroker();
1:4cddd2c: 
1:4cddd2c:             long diskLimit = broker.getSystemUsage().getStoreUsage().getLimit();
1:4cddd2c: 
1:4cddd2c:             //assert the disk limit is the same as the max usage percent * total available space
1:4cddd2c:             //within 1 mb
1:4cddd2c:             assertEquals(diskLimit, storeDir.getTotalSpace() * maxUsage / 100, 1000000);
1:4cddd2c:         }
1:4cddd2c:     }
1:4cddd2c: 
1:4cddd2c:     @Test(timeout=30000)
1:4cddd2c:     public void testDiskLimitOverMaxFree() throws Exception {
1:4cddd2c:         int freePercent = getFreePercentage();
1:4cddd2c: 
1:4cddd2c:         if (freePercent > 1) {
1:4cddd2c:             storeUsage.setPercentLimit(freePercent + 1);
1:4cddd2c:             startBroker();
1:4cddd2c: 
1:4cddd2c:             long diskLimit = broker.getSystemUsage().getStoreUsage().getLimit();
1:4cddd2c: 
1:4cddd2c:             //assert the disk limit is the same as the usable space
1:4cddd2c:             //within 1 mb
1:4cddd2c:             assertEquals(diskLimit, storeDir.getUsableSpace(), 1000000);
1:4cddd2c:         }
1:4cddd2c:     }
1:4cddd2c: 
1:4cddd2c:     @Test(timeout=30000)
1:d7febdd:     public void testStartFailDiskLimitOverMaxFree() throws Exception {
1:d7febdd:         broker.setAdjustUsageLimits(false);
1:d7febdd:         int freePercent = getFreePercentage();
1:d7febdd: 
1:d7febdd:         if (freePercent > 1) {
1:d7febdd:             storeUsage.setPercentLimit(freePercent + 1);
1:d7febdd: 
1:d7febdd:             try {
1:d7febdd:                 startBroker();
1:d7febdd:                 fail("Expect ex");
1:d7febdd:             } catch (ConfigurationException expected) {}
1:d7febdd:         }
1:d7febdd:     }
1:d7febdd: 
1:d7febdd:     @Test(timeout=30000)
1:4cddd2c:     public void testDiskLimitOver100Percent() throws Exception {
1:4cddd2c:         int freePercent = getFreePercentage();
1:4cddd2c: 
1:4cddd2c:         if (freePercent > 1) {
1:4cddd2c:             storeUsage.setPercentLimit(110);
1:4cddd2c:             startBroker();
1:4cddd2c: 
1:4cddd2c:             long diskLimit = broker.getSystemUsage().getStoreUsage().getLimit();
1:4cddd2c: 
1:4cddd2c:             //assert the disk limit is the same as the available space
1:4cddd2c:             //within 1 mb
1:4cddd2c:             assertEquals(diskLimit, storeDir.getUsableSpace(), 1000000);
1:4cddd2c:         }
1:4cddd2c:     }
1:4cddd2c: 
1:4cddd2c:     protected int getFreePercentage() {
1:4cddd2c:         File storeDir = StoreUtil.findParentDirectory(adapter.getDirectory());
1:4cddd2c:         return (int) (((double)storeDir.getUsableSpace() / storeDir.getTotalSpace()) * 100);
1:4cddd2c:     }
1:4cddd2c: 
1:4cddd2c: }
============================================================================
author:gtully
-------------------------------------------------------------------------------
commit:d7febdd
/////////////////////////////////////////////////////////////////////////
1: import static org.junit.Assert.fail;
1: 
1: import org.apache.activemq.ConfigurationException;
/////////////////////////////////////////////////////////////////////////
1:     public void testStartFailDiskLimitOverMaxFree() throws Exception {
1:         broker.setAdjustUsageLimits(false);
1:         int freePercent = getFreePercentage();
1: 
1:         if (freePercent > 1) {
1:             storeUsage.setPercentLimit(freePercent + 1);
1: 
1:             try {
1:                 startBroker();
1:                 fail("Expect ex");
1:             } catch (ConfigurationException expected) {}
1:         }
1:     }
1: 
1:     @Test(timeout=30000)
author:Christopher L. Shannon (cshannon)
-------------------------------------------------------------------------------
commit:4cddd2c
/////////////////////////////////////////////////////////////////////////
1: /**
1:  * Licensed to the Apache Software Foundation (ASF) under one or more
1:  * contributor license agreements.  See the NOTICE file distributed with
1:  * this work for additional information regarding copyright ownership.
1:  * The ASF licenses this file to You under the Apache License, Version 2.0
1:  * (the "License"); you may not use this file except in compliance with
1:  * the License.  You may obtain a copy of the License at
1:  *
1:  *      http://www.apache.org/licenses/LICENSE-2.0
1:  *
1:  * Unless required by applicable law or agreed to in writing, software
1:  * distributed under the License is distributed on an "AS IS" BASIS,
1:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:  * See the License for the specific language governing permissions and
1:  * limitations under the License.
1:  */
1: package org.apache.activemq.usage;
1: 
1: import static org.junit.Assert.assertEquals;
1: 
1: import java.io.File;
1: 
1: import org.apache.activemq.broker.BrokerService;
1: import org.apache.activemq.store.PersistenceAdapter;
1: import org.apache.activemq.util.StoreUtil;
1: import org.apache.commons.io.FileUtils;
1: import org.junit.After;
1: import org.junit.Before;
1: import org.junit.Rule;
1: import org.junit.Test;
1: import org.junit.rules.TemporaryFolder;
1: import org.slf4j.Logger;
1: import org.slf4j.LoggerFactory;
1: 
1: /**
1:  *
1:  * This test is for AMQ-5393  and will check that schedulePeriodForDiskLimitCheck
1:  * properly schedules a task that will update disk limits if the amount of usable disk space drops
1:  * because another process uses up disk space.
1:  *
1:  */
1: public class PercentDiskUsageLimitTest {
1:     protected static final Logger LOG = LoggerFactory
1:             .getLogger(PercentDiskUsageLimitTest.class);
1: 
1:     @Rule
1:     public TemporaryFolder dataFileDir = new TemporaryFolder(new File("target"));
1: 
1:     private BrokerService broker;
1:     private PersistenceAdapter adapter;
1:     private TempUsage tempUsage;
1:     private StoreUsage storeUsage;
1:     private File storeDir;
1: 
1:     @Before
1:     public void setUpBroker() throws Exception {
1:         broker = new BrokerService();
1:         broker.setPersistent(true);
1:         broker.setDataDirectoryFile(dataFileDir.getRoot());
1:         broker.setDeleteAllMessagesOnStartup(true);
1:         adapter = broker.getPersistenceAdapter();
1: 
1:         FileUtils.forceMkdir(adapter.getDirectory());
1:         FileUtils.forceMkdir(broker.getTempDataStore().getDirectory());
1:         storeDir = StoreUtil.findParentDirectory(adapter.getDirectory());
1: 
1:         final SystemUsage systemUsage = broker.getSystemUsage();
1:         tempUsage = systemUsage.getTempUsage();
1:         storeUsage = systemUsage.getStoreUsage();
1:     }
1: 
1:     protected void startBroker() throws Exception {
1:         broker.start();
1:         broker.waitUntilStarted();
1:     }
1: 
1:     @After
1:     public void stopBroker() throws Exception {
1:         broker.stop();
1:         broker.waitUntilStopped();
1:     }
1: 
1: 
1:     /**
1:      *
1:      */
1:     @Test(timeout=30000)
1:     public void testDiskLimit() throws Exception {
1:         int freePercent = getFreePercentage();
1: 
1:         if (freePercent >= 2) {
1:             int maxUsage = freePercent / 2;
1: 
1:             //Set max usage to less than free space so we know that all space can be allocated
1:             storeUsage.setPercentLimit(maxUsage);
1:             tempUsage.setPercentLimit(maxUsage);
1:             startBroker();
1: 
1:             long diskLimit = broker.getSystemUsage().getStoreUsage().getLimit();
1: 
1:             //assert the disk limit is the same as the max usage percent * total available space
1:             //within 1 mb
1:             assertEquals(diskLimit, storeDir.getTotalSpace() * maxUsage / 100, 1000000);
1:         }
1:     }
1: 
1:     @Test(timeout=30000)
1:     public void testDiskLimitOverMaxFree() throws Exception {
1:         int freePercent = getFreePercentage();
1: 
1:         if (freePercent > 1) {
1:             storeUsage.setPercentLimit(freePercent + 1);
1:             startBroker();
1: 
1:             long diskLimit = broker.getSystemUsage().getStoreUsage().getLimit();
1: 
1:             //assert the disk limit is the same as the usable space
1:             //within 1 mb
1:             assertEquals(diskLimit, storeDir.getUsableSpace(), 1000000);
1:         }
1:     }
1: 
1:     @Test(timeout=30000)
1:     public void testDiskLimitOver100Percent() throws Exception {
1:         int freePercent = getFreePercentage();
1: 
1:         if (freePercent > 1) {
1:             storeUsage.setPercentLimit(110);
1:             startBroker();
1: 
1:             long diskLimit = broker.getSystemUsage().getStoreUsage().getLimit();
1: 
1:             //assert the disk limit is the same as the available space
1:             //within 1 mb
1:             assertEquals(diskLimit, storeDir.getUsableSpace(), 1000000);
1:         }
1:     }
1: 
1:     protected int getFreePercentage() {
1:         File storeDir = StoreUtil.findParentDirectory(adapter.getDirectory());
1:         return (int) (((double)storeDir.getUsableSpace() / storeDir.getTotalSpace()) * 100);
1:     }
1: 
1: }
============================================================================