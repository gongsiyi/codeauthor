1:c0eae1b: /**
1:c0eae1b:  * Licensed to the Apache Software Foundation (ASF) under one or more
1:c0eae1b:  * contributor license agreements.  See the NOTICE file distributed with
1:c0eae1b:  * this work for additional information regarding copyright ownership.
1:c0eae1b:  * The ASF licenses this file to You under the Apache License, Version 2.0
1:c0eae1b:  * (the "License"); you may not use this file except in compliance with
1:c0eae1b:  * the License.  You may obtain a copy of the License at
1:c0eae1b:  *
1:c0eae1b:  *      http://www.apache.org/licenses/LICENSE-2.0
1:c0eae1b:  *
1:c0eae1b:  * Unless required by applicable law or agreed to in writing, software
1:c0eae1b:  * distributed under the License is distributed on an "AS IS" BASIS,
1:c0eae1b:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:c0eae1b:  * See the License for the specific language governing permissions and
1:c0eae1b:  * limitations under the License.
1:c0eae1b:  */
1:c0eae1b: package org.apache.activemq.maven;
1:c0eae1b: 
1:c0eae1b: import org.apache.activemq.broker.BrokerService;
1:c0eae1b: import org.apache.maven.plugin.MojoExecutionException;
1:c0eae1b: 
1:c0eae1b: /**
1:c0eae1b:  * Broker manager for use with Maven; uses the original singleton to track the broker instance.
1:c0eae1b:  */
1:c0eae1b: public class MavenBrokerSingletonManager implements MavenBrokerManager {
1:c0eae1b: 
1:c0eae1b:     public void start(boolean fork, String configUri) throws MojoExecutionException {
1:c0eae1b:         Broker.start(fork, configUri);
1:c0eae1b:     }
1:c0eae1b: 
1:c0eae1b:     public void stop() throws MojoExecutionException {
1:c0eae1b:         Broker.stop();
1:c0eae1b:     }
1:c0eae1b: 
1:c0eae1b:     /**
1:c0eae1b:      * Wait for a shutdown invocation elsewhere
1:c0eae1b:      *
1:c0eae1b:      * @throws Exception
1:c0eae1b:      */
1:c0eae1b:     protected void waitForShutdown() throws Exception {
1:c0eae1b:         Broker.waitForShutdown();
1:c0eae1b:     }
1:c0eae1b: 
1:c0eae1b:     /**
1:c0eae1b:      * Return the broker service created.
1:c0eae1b:      */
1:c0eae1b:     public BrokerService getBroker() {
1:c0eae1b:         return Broker.getBroker();
1:c0eae1b:     }
1:c0eae1b: 
1:c0eae1b:     /**
1:c0eae1b:      * Override the default creation of the broker service.  Primarily added for testing purposes.
1:c0eae1b:      *
1:c0eae1b:      * @param broker
1:c0eae1b:      */
1:c0eae1b:     public void setBroker(BrokerService broker) {
1:c0eae1b:         Broker.setBroker(broker);
1:c0eae1b:     }
1:c0eae1b: }
============================================================================
author:artnaseef
-------------------------------------------------------------------------------
commit:c0eae1b
/////////////////////////////////////////////////////////////////////////
1: /**
1:  * Licensed to the Apache Software Foundation (ASF) under one or more
1:  * contributor license agreements.  See the NOTICE file distributed with
1:  * this work for additional information regarding copyright ownership.
1:  * The ASF licenses this file to You under the Apache License, Version 2.0
1:  * (the "License"); you may not use this file except in compliance with
1:  * the License.  You may obtain a copy of the License at
1:  *
1:  *      http://www.apache.org/licenses/LICENSE-2.0
1:  *
1:  * Unless required by applicable law or agreed to in writing, software
1:  * distributed under the License is distributed on an "AS IS" BASIS,
1:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:  * See the License for the specific language governing permissions and
1:  * limitations under the License.
1:  */
1: package org.apache.activemq.maven;
1: 
1: import org.apache.activemq.broker.BrokerService;
1: import org.apache.maven.plugin.MojoExecutionException;
1: 
1: /**
1:  * Broker manager for use with Maven; uses the original singleton to track the broker instance.
1:  */
1: public class MavenBrokerSingletonManager implements MavenBrokerManager {
1: 
1:     public void start(boolean fork, String configUri) throws MojoExecutionException {
1:         Broker.start(fork, configUri);
1:     }
1: 
1:     public void stop() throws MojoExecutionException {
1:         Broker.stop();
1:     }
1: 
1:     /**
1:      * Wait for a shutdown invocation elsewhere
1:      *
1:      * @throws Exception
1:      */
1:     protected void waitForShutdown() throws Exception {
1:         Broker.waitForShutdown();
1:     }
1: 
1:     /**
1:      * Return the broker service created.
1:      */
1:     public BrokerService getBroker() {
1:         return Broker.getBroker();
1:     }
1: 
1:     /**
1:      * Override the default creation of the broker service.  Primarily added for testing purposes.
1:      *
1:      * @param broker
1:      */
1:     public void setBroker(BrokerService broker) {
1:         Broker.setBroker(broker);
1:     }
1: }
============================================================================