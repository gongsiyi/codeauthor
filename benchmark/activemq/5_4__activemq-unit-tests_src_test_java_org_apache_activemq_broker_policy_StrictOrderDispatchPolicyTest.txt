1:ff457e2: /**
1:57b4941:  * Licensed to the Apache Software Foundation (ASF) under one or more
1:57b4941:  * contributor license agreements.  See the NOTICE file distributed with
1:57b4941:  * this work for additional information regarding copyright ownership.
1:57b4941:  * The ASF licenses this file to You under the Apache License, Version 2.0
1:57b4941:  * (the "License"); you may not use this file except in compliance with
1:57b4941:  * the License.  You may obtain a copy of the License at
3:ff457e2:  *
1:230a86c:  *      http://www.apache.org/licenses/LICENSE-2.0
1:ff457e2:  *
1:ff457e2:  * Unless required by applicable law or agreed to in writing, software
1:ff457e2:  * distributed under the License is distributed on an "AS IS" BASIS,
1:ff457e2:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:ff457e2:  * See the License for the specific language governing permissions and
1:ff457e2:  * limitations under the License.
1:ff457e2:  */
1:ff457e2: package org.apache.activemq.broker.policy;
4:ff457e2: 
1:18d616c: import java.util.Iterator;
1:18d616c: 
1:c7d559f: import javax.jms.MessageConsumer;
1:c7d559f: 
1:ff457e2: import org.apache.activemq.broker.BrokerService;
1:ff457e2: import org.apache.activemq.broker.TopicSubscriptionTest;
1:ff457e2: import org.apache.activemq.broker.region.policy.PolicyEntry;
1:ff457e2: import org.apache.activemq.broker.region.policy.PolicyMap;
1:ff457e2: import org.apache.activemq.broker.region.policy.StrictOrderDispatchPolicy;
1:3d95025: import org.apache.activemq.util.MessageIdList;
1:bec711c: import org.junit.Test;
1:bec711c: import org.junit.runner.RunWith;
1:bec711c: import org.junit.runners.BlockJUnit4ClassRunner;
1:ff457e2: 
1:bec711c: import static org.junit.Assert.*;
1:bec711c: 
1:bec711c: @RunWith(BlockJUnit4ClassRunner.class)
1:ff457e2: public class StrictOrderDispatchPolicyTest extends TopicSubscriptionTest {
1:ff457e2: 
1:c7d559f:     @Override
1:ff457e2:     protected BrokerService createBroker() throws Exception {
1:ff457e2:         BrokerService broker = super.createBroker();
1:ff457e2: 
1:ff457e2:         PolicyEntry policy = new PolicyEntry();
1:ff457e2:         policy.setDispatchPolicy(new StrictOrderDispatchPolicy());
1:ff457e2: 
1:ff457e2:         PolicyMap pMap = new PolicyMap();
1:ff457e2:         pMap.setDefaultEntry(policy);
1:ff457e2: 
1:ff457e2:         broker.setDestinationPolicy(pMap);
1:ff457e2: 
1:ff457e2:         return broker;
2:ff457e2:     }
1:3d95025: 
1:bec711c:     @Test
1:c7d559f:     @Override
1:3d95025:     public void testOneProducerTwoConsumersLargeMessagesOnePrefetch() throws Exception {
1:3d95025:         super.testOneProducerTwoConsumersLargeMessagesOnePrefetch();
1:3d95025: 
1:3d95025:         assertReceivedMessagesAreOrdered();
1:3d95025:     }
1:bec711c: 
1:bec711c:     @Test
1:c7d559f:     @Override
1:ff457e2:     public void testOneProducerTwoConsumersSmallMessagesOnePrefetch() throws Exception {
1:ff457e2:         super.testOneProducerTwoConsumersSmallMessagesOnePrefetch();
1:ff457e2: 
2:ff457e2:         assertReceivedMessagesAreOrdered();
1:ff457e2:     }
1:ff457e2: 
1:bec711c:     @Test
1:c7d559f:     @Override
1:ff457e2:     public void testOneProducerTwoConsumersSmallMessagesLargePrefetch() throws Exception {
1:ff457e2:         super.testOneProducerTwoConsumersSmallMessagesLargePrefetch();
1:ff457e2: 
1:ff457e2:         assertReceivedMessagesAreOrdered();
1:ff457e2:     }
1:ff457e2: 
1:bec711c:     @Test
1:c7d559f:     @Override
1:ff457e2:     public void testOneProducerTwoConsumersLargeMessagesLargePrefetch() throws Exception {
1:ff457e2:         super.testOneProducerTwoConsumersLargeMessagesLargePrefetch();
1:ff457e2: 
1:ff457e2:         assertReceivedMessagesAreOrdered();
1:ff457e2:     }
1:ff457e2: 
1:bec711c:     @Test
1:c7d559f:     @Override
1:ff457e2:     public void testOneProducerManyConsumersFewMessages() throws Exception {
1:ff457e2:         super.testOneProducerManyConsumersFewMessages();
1:ff457e2: 
1:ff457e2:         assertReceivedMessagesAreOrdered();
1:ff457e2:     }
1:ff457e2: 
1:ff457e2: 
1:bec711c:     @Test
1:c7d559f:     @Override
1:ff457e2:     public void testOneProducerManyConsumersManyMessages() throws Exception {
1:ff457e2:         super.testOneProducerManyConsumersManyMessages();
1:ff457e2: 
1:ff457e2:         assertReceivedMessagesAreOrdered();
1:ff457e2:     }
1:ff457e2: 
1:bec711c:     @Test
1:c7d559f:     @Override
1:ff457e2:     public void testManyProducersOneConsumer() throws Exception {
1:ff457e2:         super.testManyProducersOneConsumer();
1:ff457e2: 
1:ff457e2:         assertReceivedMessagesAreOrdered();
1:ff457e2:     }
1:ff457e2: 
1:bec711c:     @Test
1:c7d559f:     @Override
1:ff457e2:     public void testManyProducersManyConsumers() throws Exception {
1:ff457e2:         super.testManyProducersManyConsumers();
1:ff457e2: 
1:ff457e2:         assertReceivedMessagesAreOrdered();
1:ff457e2:     }
1:ff457e2: 
1:ff457e2:     public void assertReceivedMessagesAreOrdered() throws Exception {
1:ff457e2:         // If there is only one consumer, messages is definitely ordered
1:ff457e2:         if (consumers.size() <= 1) {
1:ff457e2:             return;
1:ff457e2:         }
1:ff457e2: 
1:ff457e2:         // Get basis of order
1:c7d559f:         Iterator<MessageConsumer> i = consumers.keySet().iterator();
1:3d95025:         MessageIdList messageOrder = (MessageIdList)consumers.get(i.next());
1:ff457e2: 
1:230a86c:         for (; i.hasNext();) {
1:3d95025:             MessageIdList messageIdList = (MessageIdList)consumers.get(i.next());
1:3d95025:             assertTrue("Messages are not ordered.", messageOrder.equals(messageIdList));
1:ff457e2:         }
1:ff457e2:     }
1:ff457e2: }
============================================================================
author:Kevin Earls
-------------------------------------------------------------------------------
commit:bec711c
/////////////////////////////////////////////////////////////////////////
1: import org.junit.Test;
1: import org.junit.runner.RunWith;
1: import org.junit.runners.BlockJUnit4ClassRunner;
1: import static org.junit.Assert.*;
1: 
1: @RunWith(BlockJUnit4ClassRunner.class)
/////////////////////////////////////////////////////////////////////////
1:     @Test
/////////////////////////////////////////////////////////////////////////
1:     @Test
/////////////////////////////////////////////////////////////////////////
1:     @Test
/////////////////////////////////////////////////////////////////////////
1:     @Test
/////////////////////////////////////////////////////////////////////////
1:     @Test
/////////////////////////////////////////////////////////////////////////
1: 
1:     @Test
/////////////////////////////////////////////////////////////////////////
1:     @Test
/////////////////////////////////////////////////////////////////////////
1:     @Test
author:Timothy A. Bish
-------------------------------------------------------------------------------
commit:c7d559f
/////////////////////////////////////////////////////////////////////////
1: import javax.jms.MessageConsumer;
1: 
/////////////////////////////////////////////////////////////////////////
1:     @Override
/////////////////////////////////////////////////////////////////////////
1:     @Override
1:     @Override
1:     @Override
1:     @Override
1:     @Override
1:     @Override
1:     @Override
1:     @Override
/////////////////////////////////////////////////////////////////////////
1:         Iterator<MessageConsumer> i = consumers.keySet().iterator();
commit:ef24cc9
author:Hiram R. Chirino
-------------------------------------------------------------------------------
commit:230a86c
/////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////
1:  *      http://www.apache.org/licenses/LICENSE-2.0
/////////////////////////////////////////////////////////////////////////
1:         for (; i.hasNext();) {
commit:57b4941
/////////////////////////////////////////////////////////////////////////
1:  * Licensed to the Apache Software Foundation (ASF) under one or more
1:  * contributor license agreements.  See the NOTICE file distributed with
1:  * this work for additional information regarding copyright ownership.
1:  * The ASF licenses this file to You under the Apache License, Version 2.0
1:  * (the "License"); you may not use this file except in compliance with
1:  * the License.  You may obtain a copy of the License at
commit:18d616c
/////////////////////////////////////////////////////////////////////////
1: import java.util.Iterator;
1: 
/////////////////////////////////////////////////////////////////////////
commit:3d95025
/////////////////////////////////////////////////////////////////////////
1: import org.apache.activemq.util.MessageIdList;
/////////////////////////////////////////////////////////////////////////
1:     public void testOneProducerTwoConsumersLargeMessagesOnePrefetch() throws Exception {
1:         super.testOneProducerTwoConsumersLargeMessagesOnePrefetch();
1: 
1:         assertReceivedMessagesAreOrdered();
1:     }
1: 
/////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////
1:         MessageIdList messageOrder = (MessageIdList)consumers.get(i.next());
1:             MessageIdList messageIdList = (MessageIdList)consumers.get(i.next());
1:             assertTrue("Messages are not ordered.", messageOrder.equals(messageIdList));
author:James Strachan
-------------------------------------------------------------------------------
commit:312f248
/////////////////////////////////////////////////////////////////////////
0: import org.apache.activemq.util.MessageList;
/////////////////////////////////////////////////////////////////////////
0:         MessageList messageOrder = (MessageList)consumers.get(i.next());
0:             MessageList messageList = (MessageList)consumers.get(i.next());
author:Adrian T. Co
-------------------------------------------------------------------------------
commit:ff457e2
/////////////////////////////////////////////////////////////////////////
1: /**
1:  *
0:  * Copyright 2005-2006 The Apache Software Foundation
1:  *
0:  * Licensed under the Apache License, Version 2.0 (the "License");
0:  * you may not use this file except in compliance with the License.
0:  * You may obtain a copy of the License at
1:  *
0:  * http://www.apache.org/licenses/LICENSE-2.0
1:  *
1:  * Unless required by applicable law or agreed to in writing, software
1:  * distributed under the License is distributed on an "AS IS" BASIS,
1:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:  * See the License for the specific language governing permissions and
1:  * limitations under the License.
1:  */
1: package org.apache.activemq.broker.policy;
1: 
1: import org.apache.activemq.broker.BrokerService;
1: import org.apache.activemq.broker.TopicSubscriptionTest;
1: import org.apache.activemq.broker.region.policy.PolicyEntry;
1: import org.apache.activemq.broker.region.policy.PolicyMap;
1: import org.apache.activemq.broker.region.policy.StrictOrderDispatchPolicy;
1: 
0: import java.util.List;
0: import java.util.Iterator;
1: 
1: public class StrictOrderDispatchPolicyTest extends TopicSubscriptionTest {
1: 
1:     protected BrokerService createBroker() throws Exception {
1:         BrokerService broker = super.createBroker();
1: 
1:         PolicyEntry policy = new PolicyEntry();
1:         policy.setDispatchPolicy(new StrictOrderDispatchPolicy());
1: 
1:         PolicyMap pMap = new PolicyMap();
1:         pMap.setDefaultEntry(policy);
1: 
1:         broker.setDestinationPolicy(pMap);
1: 
1:         return broker;
1:     }
1: 
1:     public void testOneProducerTwoConsumersSmallMessagesOnePrefetch() throws Exception {
1:         super.testOneProducerTwoConsumersSmallMessagesOnePrefetch();
1: 
1:         assertReceivedMessagesAreOrdered();
1:     }
1: 
1:     public void testOneProducerTwoConsumersSmallMessagesLargePrefetch() throws Exception {
1:         super.testOneProducerTwoConsumersSmallMessagesLargePrefetch();
1: 
1:         assertReceivedMessagesAreOrdered();
1:     }
1: 
0:     public void testOneProducerTwoConsumersLargeMessagesOnePrefetch() throws Exception {
0:         super.testOneProducerTwoConsumersLargeMessagesOnePrefetch();
1: 
1:         assertReceivedMessagesAreOrdered();
1:     }
1: 
1:     public void testOneProducerTwoConsumersLargeMessagesLargePrefetch() throws Exception {
1:         super.testOneProducerTwoConsumersLargeMessagesLargePrefetch();
1: 
1:         assertReceivedMessagesAreOrdered();
1:     }
1: 
1:     public void testOneProducerManyConsumersFewMessages() throws Exception {
1:         super.testOneProducerManyConsumersFewMessages();
1: 
1:         assertReceivedMessagesAreOrdered();
1:     }
1: 
1:     public void testOneProducerManyConsumersManyMessages() throws Exception {
1:         super.testOneProducerManyConsumersManyMessages();
1: 
1:         assertReceivedMessagesAreOrdered();
1:     }
1: 
1:     public void testManyProducersOneConsumer() throws Exception {
1:         super.testManyProducersOneConsumer();
1: 
1:         assertReceivedMessagesAreOrdered();
1:     }
1: 
1:     public void testManyProducersManyConsumers() throws Exception {
1:         super.testManyProducersManyConsumers();
1: 
1:         assertReceivedMessagesAreOrdered();
1:     }
1: 
1:     public void assertReceivedMessagesAreOrdered() throws Exception {
1:         // If there is only one consumer, messages is definitely ordered
1:         if (consumers.size() <= 1) {
1:             return;
1:         }
1: 
1:         // Get basis of order
0:         Iterator i = consumers.keySet().iterator();
0:         List messageOrder = (List)consumers.get(i.next());
1: 
0:         for (;i.hasNext();) {
0:             List messageList = (List)consumers.get(i.next());
0:             assertTrue("Messages are not ordered.", messageOrder.equals(messageList));
1:         }
1:     }
1: }
============================================================================