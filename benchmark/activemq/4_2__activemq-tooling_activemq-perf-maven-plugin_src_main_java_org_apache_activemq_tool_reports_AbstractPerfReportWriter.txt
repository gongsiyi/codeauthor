1:a88906f: /**
1:57b4941:  * Licensed to the Apache Software Foundation (ASF) under one or more
1:57b4941:  * contributor license agreements.  See the NOTICE file distributed with
1:57b4941:  * this work for additional information regarding copyright ownership.
1:57b4941:  * The ASF licenses this file to You under the Apache License, Version 2.0
1:57b4941:  * (the "License"); you may not use this file except in compliance with
1:57b4941:  * the License.  You may obtain a copy of the License at
3:a88906f:  *
1:5f1adbe:  *      http://www.apache.org/licenses/LICENSE-2.0
1:a88906f:  *
1:a88906f:  * Unless required by applicable law or agreed to in writing, software
1:a88906f:  * distributed under the License is distributed on an "AS IS" BASIS,
1:a88906f:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:a88906f:  * See the License for the specific language governing permissions and
1:a88906f:  * limitations under the License.
1:a88906f:  */
1:a88906f: package org.apache.activemq.tool.reports;
1:a88906f: 
1:540dd5c: import java.util.Map;
1:540dd5c: 
1:540dd5c: import org.apache.activemq.tool.reports.plugins.CpuReportPlugin;
1:a88906f: import org.apache.activemq.tool.reports.plugins.ReportPlugin;
1:a88906f: import org.apache.activemq.tool.reports.plugins.ThroughputReportPlugin;
1:a88906f: 
1:a88906f: public abstract class AbstractPerfReportWriter implements PerformanceReportWriter {
1:a88906f: 
1:fddc01d:     public static final int REPORT_PLUGIN_THROUGHPUT = 0;
1:540dd5c:     public static final int REPORT_PLUGIN_CPU = 1;
1:540dd5c: 
1:a88906f:     protected ReportPlugin[] plugins = new ReportPlugin[] {
1:540dd5c:         new ThroughputReportPlugin(), new CpuReportPlugin()
1:540dd5c:     };
1:a88906f: 
1:a88906f:     protected void handleCsvData(int pluginType, String csvData) {
1:a88906f:         plugins[pluginType].handleCsvData(csvData);
1:a88906f:     }
1:a88906f: 
1:a88906f:     protected Map getSummary(int pluginType) {
1:a88906f:         return plugins[pluginType].getSummary();
1:a88906f:     }
1:a88906f: }
============================================================================
author:Timothy A. Bish
-------------------------------------------------------------------------------
commit:87e878b
author:Hiram R. Chirino
-------------------------------------------------------------------------------
commit:540dd5c
/////////////////////////////////////////////////////////////////////////
1: import java.util.Map;
1: 
1: import org.apache.activemq.tool.reports.plugins.CpuReportPlugin;
1:     public static final int REPORT_PLUGIN_CPU = 1;
1: 
1:         new ThroughputReportPlugin(), new CpuReportPlugin()
1:     };
commit:5f1adbe
/////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////
1:  *      http://www.apache.org/licenses/LICENSE-2.0
commit:57b4941
/////////////////////////////////////////////////////////////////////////
1:  * Licensed to the Apache Software Foundation (ASF) under one or more
1:  * contributor license agreements.  See the NOTICE file distributed with
1:  * this work for additional information regarding copyright ownership.
1:  * The ASF licenses this file to You under the Apache License, Version 2.0
1:  * (the "License"); you may not use this file except in compliance with
1:  * the License.  You may obtain a copy of the License at
commit:a88906f
/////////////////////////////////////////////////////////////////////////
1: /**
1:  *
0:  * Copyright 2005-2006 The Apache Software Foundation
1:  *
0:  * Licensed under the Apache License, Version 2.0 (the "License");
0:  * you may not use this file except in compliance with the License.
0:  * You may obtain a copy of the License at
1:  *
0:  * http://www.apache.org/licenses/LICENSE-2.0
1:  *
1:  * Unless required by applicable law or agreed to in writing, software
1:  * distributed under the License is distributed on an "AS IS" BASIS,
1:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:  * See the License for the specific language governing permissions and
1:  * limitations under the License.
1:  */
1: package org.apache.activemq.tool.reports;
1: 
1: import org.apache.activemq.tool.reports.plugins.ReportPlugin;
1: import org.apache.activemq.tool.reports.plugins.ThroughputReportPlugin;
0: import org.apache.activemq.tool.reports.plugins.CpuReportPlugin;
1: 
0: import java.util.Map;
1: 
1: public abstract class AbstractPerfReportWriter implements PerformanceReportWriter {
1:     protected ReportPlugin[] plugins = new ReportPlugin[] {
0:                                                 new ThroughputReportPlugin(),
0:                                                 new CpuReportPlugin()
0:                                        };
1: 
1:     protected void handleCsvData(int pluginType, String csvData) {
1:         plugins[pluginType].handleCsvData(csvData);
1:     }
1: 
1:     protected Map getSummary(int pluginType) {
1:         return plugins[pluginType].getSummary();
1:     }
1: }
author:James Strachan
-------------------------------------------------------------------------------
commit:dd55c21
author:Adrian T. Co
-------------------------------------------------------------------------------
commit:fddc01d
/////////////////////////////////////////////////////////////////////////
0: 
1:     public static final int REPORT_PLUGIN_THROUGHPUT = 0;
0:     public static final int REPORT_PLUGIN_CPU        = 1;
0:     
commit:f1c6e4c
/////////////////////////////////////////////////////////////////////////
0: import org.apache.activemq.tool.reports.plugins.ReportPlugin;
0: import org.apache.activemq.tool.reports.plugins.ThroughputReportPlugin;
0: import org.apache.activemq.tool.reports.plugins.CpuReportPlugin;
0:     protected ReportPlugin[] plugins = new ReportPlugin[] {
0:                                                 new ThroughputReportPlugin(),
0:                                                 new CpuReportPlugin()
0:                                        };
0:     protected void handleCsvData(int pluginType, String csvData) {
0:         plugins[pluginType].handleCsvData(csvData);
0:     protected Map getSummary(int pluginType) {
0:         return plugins[pluginType].getSummary();
commit:e0efebe
/////////////////////////////////////////////////////////////////////////
0:     public static final String KEY_SYS_TOTAL_TP          = "SystemTotalTP";
0:     public static final String KEY_SYS_TOTAL_CLIENTS     = "SystemTotalClients";
0:     public static final String KEY_SYS_AVE_TP            = "SystemAveTP";
0:     public static final String KEY_SYS_AVE_EMM_TP        = "SystemAveEMMTP";
0:     public static final String KEY_SYS_AVE_CLIENT_TP     = "SystemAveClientTP";
0:     public static final String KEY_SYS_AVE_CLIENT_EMM_TP = "SystemAveClientEMMTP";
/////////////////////////////////////////////////////////////////////////
0:         summary.put(KEY_SYS_AVE_CLIENT_TP, String.valueOf(systemAveTP / clientCount));
0:         summary.put(KEY_SYS_AVE_CLIENT_EMM_TP, String.valueOf(systemAveEMMTP / clientCount));
commit:77c889d
/////////////////////////////////////////////////////////////////////////
0: /**
0:  *
0:  * Copyright 2005-2006 The Apache Software Foundation
0:  *
0:  * Licensed under the Apache License, Version 2.0 (the "License");
0:  * you may not use this file except in compliance with the License.
0:  * You may obtain a copy of the License at
0:  *
0:  * http://www.apache.org/licenses/LICENSE-2.0
0:  *
0:  * Unless required by applicable law or agreed to in writing, software
0:  * distributed under the License is distributed on an "AS IS" BASIS,
0:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
0:  * See the License for the specific language governing permissions and
0:  * limitations under the License.
0:  */
0: package org.apache.activemq.tool.reports;
0: 
0: import org.apache.activemq.tool.ReflectionUtil;
0: 
0: import java.util.Properties;
0: import java.util.Map;
0: import java.util.HashMap;
0: import java.util.StringTokenizer;
0: import java.util.List;
0: import java.util.ArrayList;
0: import java.util.Set;
0: import java.util.Iterator;
0: 
0: public abstract class AbstractPerfReportWriter implements PerformanceReportWriter {
0:     public static final String KEY_SYS_TOTAL_TP      = "SystemTotalTP";
0:     public static final String KEY_SYS_TOTAL_CLIENTS = "SystemTotalClients";
0:     public static final String KEY_SYS_AVE_TP        = "SystemAveTP";
0:     public static final String KEY_SYS_AVE_EMM_TP    = "SystemAveEMMTP";
0:     public static final String KEY_MIN_CLIENT_TP = "MinClientTP";
0:     public static final String KEY_MAX_CLIENT_TP = "MaxClientTP";
0:     public static final String KEY_MIN_CLIENT_TOTAL_TP = "MinClientTotalTP";
0:     public static final String KEY_MAX_CLIENT_TOTAL_TP = "MaxClientTotalTP";
0:     public static final String KEY_MIN_CLIENT_AVE_TP = "MinClientAveTP";
0:     public static final String KEY_MAX_CLIENT_AVE_TP = "MaxClientAveTP";
0:     public static final String KEY_MIN_CLIENT_AVE_EMM_TP = "MinClientAveEMMTP";
0:     public static final String KEY_MAX_CLIENT_AVE_EMM_TP = "MaxClientAveEMMTP";
0: 
0:     protected Properties settings;
0:     protected Map clientThroughputs = new HashMap();
0: 
0:     public void setSettings(Properties settings) {
0:         this.settings = settings;
0:         ReflectionUtil.configureClass(this, settings);
0:     }
0: 
0:     public Properties getSettings() {
0:         return settings;
0:     }
0: 
0:     protected void parsePerfCsvData(String csvData) {
0:         StringTokenizer tokenizer = new StringTokenizer(csvData, ",");
0:         String data, key, val, clientName = null;
0:         Long throughput = null;
0:         while (tokenizer.hasMoreTokens()) {
0:             data = tokenizer.nextToken();
0:             key  = data.substring(0, data.indexOf("="));
0:             val  = data.substring(data.indexOf("=") + 1);
0: 
0:             if (key.equalsIgnoreCase("clientName")) {
0:                 clientName = val;
0:             } else if (key.equalsIgnoreCase("throughput")) {
0:                 throughput = Long.valueOf(val);
0:             } else {
0:                 // Ignore unknown token
0:             }
0:         }
0:         addToClientTPList(clientName, throughput);
0:     }
0: 
0:     protected void addToClientTPList(String clientName, Long throughput) {
0:         // Write to client's throughput list
0:         if (clientName == null || throughput == null) {
0:             throw new IllegalArgumentException("Invalid Throughput CSV Data: clientName=" + clientName + ", throughput=" + throughput);
0:         }
0: 
0:         List clientTPList = (List)clientThroughputs.get(clientName);
0:         if (clientTPList == null) {
0:             clientTPList = new ArrayList();
0:             clientThroughputs.put(clientName, clientTPList);
0:         }
0:         clientTPList.add(throughput);
0:     }
0: 
0:     protected Map createPerfSummary(Map clientTPMap) {
0:         long   minClientTP = Long.MAX_VALUE, // TP = throughput
0:                maxClientTP = Long.MIN_VALUE,
0:                minClientTotalTP = Long.MAX_VALUE,
0:                maxClientTotalTP = Long.MIN_VALUE,
0:                systemTotalTP = 0;
0: 
0:         double minClientAveTP = Double.MAX_VALUE,
0:                maxClientAveTP = Double.MIN_VALUE,
0:                minClientAveEMMTP = Double.MAX_VALUE, // EMM = Excluding Min/Max
0:                maxClientAveEMMTP = Double.MIN_VALUE,
0:                systemAveTP = 0.0,
0:                systemAveEMMTP = 0.0;
0: 
0:         String nameMinClientTP = "",
0:                nameMaxClientTP = "",
0:                nameMinClientTotalTP = "",
0:                nameMaxClientTotalTP = "",
0:                nameMinClientAveTP = "",
0:                nameMaxClientAveTP = "",
0:                nameMinClientAveEMMTP = "",
0:                nameMaxClientAveEMMTP = "";
0: 
0:         Set clientNames = clientTPMap.keySet();
0:         String clientName;
0:         List   clientTPList;
0:         long tempLong;
0:         double tempDouble;
0:         int clientCount = 0;
0:         for (Iterator i=clientNames.iterator(); i.hasNext();) {
0:             clientName = (String)i.next();
0:             clientTPList = (List)clientTPMap.get(clientName);
0:             clientCount++;
0: 
0:             tempLong = PerformanceStatisticsUtil.getMinThroughput(clientTPList);
0:             if (tempLong < minClientTP) {
0:                 minClientTP = tempLong;
0:                 nameMinClientTP = clientName;
0:             }
0: 
0:             tempLong = PerformanceStatisticsUtil.getMaxThroughput(clientTPList);
0:             if (tempLong > maxClientTP) {
0:                 maxClientTP = tempLong;
0:                 nameMaxClientTP = clientName;
0:             }
0: 
0:             tempLong = PerformanceStatisticsUtil.getTotalThroughput(clientTPList);
0:             systemTotalTP += tempLong; // Accumulate total TP
0:             if (tempLong < minClientTotalTP) {
0:                 minClientTotalTP = tempLong;
0:                 nameMinClientTotalTP = clientName;
0:             }
0: 
0:             if (tempLong > maxClientTotalTP) {
0:                 maxClientTotalTP = tempLong;
0:                 nameMaxClientTotalTP = clientName;
0:             }
0: 
0:             tempDouble = PerformanceStatisticsUtil.getAveThroughput(clientTPList);
0:             systemAveTP += tempDouble; // Accumulate ave throughput
0:             if (tempDouble < minClientAveTP) {
0:                 minClientAveTP = tempDouble;
0:                 nameMinClientAveTP = clientName;
0:             }
0: 
0:             if (tempDouble > maxClientAveTP) {
0:                 maxClientAveTP = tempDouble;
0:                 nameMaxClientAveTP = clientName;
0:             }
0: 
0:             tempDouble = PerformanceStatisticsUtil.getAveThroughputExcludingMinMax(clientTPList);
0:             systemAveEMMTP += tempDouble; // Accumulate ave throughput excluding min/max
0:             if (tempDouble < minClientAveEMMTP) {
0:                 minClientAveEMMTP = tempDouble;
0:                 nameMinClientAveEMMTP = clientName;
0:             }
0: 
0:             if (tempDouble > maxClientAveEMMTP) {
0:                 maxClientAveEMMTP = tempDouble;
0:                 nameMaxClientAveEMMTP = clientName;
0:             }
0:         }
0: 
0:         Map summary = new HashMap();
0:         summary.put(KEY_SYS_TOTAL_TP, String.valueOf(systemTotalTP));
0:         summary.put(KEY_SYS_TOTAL_CLIENTS, String.valueOf(clientCount));
0:         summary.put(KEY_SYS_AVE_TP, String.valueOf(systemAveTP));
0:         summary.put(KEY_SYS_AVE_EMM_TP, String.valueOf(systemAveEMMTP));
0:         summary.put(KEY_MIN_CLIENT_TP, nameMinClientTP + "=" + minClientTP);
0:         summary.put(KEY_MAX_CLIENT_TP, nameMaxClientTP + "=" + maxClientTP);
0:         summary.put(KEY_MIN_CLIENT_TOTAL_TP, nameMinClientTotalTP + "=" + minClientTotalTP);
0:         summary.put(KEY_MAX_CLIENT_TOTAL_TP, nameMaxClientTotalTP + "=" + maxClientTotalTP);
0:         summary.put(KEY_MIN_CLIENT_AVE_TP, nameMinClientAveTP + "=" + minClientAveTP);
0:         summary.put(KEY_MAX_CLIENT_AVE_TP, nameMaxClientAveTP + "=" + maxClientAveTP);
0:         summary.put(KEY_MIN_CLIENT_AVE_EMM_TP, nameMinClientAveEMMTP + "=" + minClientAveEMMTP);
0:         summary.put(KEY_MAX_CLIENT_AVE_EMM_TP, nameMaxClientAveEMMTP + "=" + maxClientAveEMMTP);
0: 
0:         return summary;
0:     }
0: }
============================================================================