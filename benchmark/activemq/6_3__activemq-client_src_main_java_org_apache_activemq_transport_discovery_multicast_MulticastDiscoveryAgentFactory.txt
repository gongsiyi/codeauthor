1:d29ca2a: /**
1:57b4941:  * Licensed to the Apache Software Foundation (ASF) under one or more
1:57b4941:  * contributor license agreements.  See the NOTICE file distributed with
1:57b4941:  * this work for additional information regarding copyright ownership.
1:57b4941:  * The ASF licenses this file to You under the Apache License, Version 2.0
1:57b4941:  * (the "License"); you may not use this file except in compliance with
1:57b4941:  * the License.  You may obtain a copy of the License at
3:d29ca2a:  *
1:230a86c:  *      http://www.apache.org/licenses/LICENSE-2.0
1:d29ca2a:  *
1:d29ca2a:  * Unless required by applicable law or agreed to in writing, software
1:d29ca2a:  * distributed under the License is distributed on an "AS IS" BASIS,
1:d29ca2a:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:d29ca2a:  * See the License for the specific language governing permissions and
1:d29ca2a:  * limitations under the License.
1:d29ca2a:  */
1:d29ca2a: package org.apache.activemq.transport.discovery.multicast;
1:d29ca2a: 
1:74a7a8b: import java.io.IOException;
1:74a7a8b: import java.net.URI;
1:74a7a8b: import java.util.Map;
1:74a7a8b: 
1:d29ca2a: import org.apache.activemq.transport.discovery.DiscoveryAgent;
1:d29ca2a: import org.apache.activemq.transport.discovery.DiscoveryAgentFactory;
1:d29ca2a: import org.apache.activemq.util.IOExceptionSupport;
1:d29ca2a: import org.apache.activemq.util.IntrospectionSupport;
1:d29ca2a: import org.apache.activemq.util.URISupport;
1:8bf987b: import org.slf4j.Logger;
1:8bf987b: import org.slf4j.LoggerFactory;
1:d29ca2a: 
1:d29ca2a: public class MulticastDiscoveryAgentFactory extends DiscoveryAgentFactory {
1:d29ca2a: 	
1:8bf987b: 	  private static final Logger LOG = LoggerFactory.getLogger(MulticastDiscoveryAgentFactory.class); 
1:d29ca2a: 
2:78aac70:     
1:d29ca2a:     protected DiscoveryAgent doCreateDiscoveryAgent(URI uri) throws IOException {
1:d29ca2a:         try {
1:d29ca2a:         	
1:78aac70:         	  if (LOG.isTraceEnabled()) {      
1:78aac70:                LOG.trace("doCreateDiscoveryAgent: uri = " + uri.toString());               
1:78aac70:             }
1:d29ca2a:             
1:78aac70:             MulticastDiscoveryAgent mda = new MulticastDiscoveryAgent();          
1:78aac70:             
1:78aac70:             mda.setDiscoveryURI(uri);            
1:78aac70:                         
1:78aac70:             // allow MDA's params to be set via query arguments  
1:78aac70:             // (e.g., multicast://default?group=foo             
1:784b93d:             Map options = URISupport.parseParameters(uri);         
1:78aac70:             IntrospectionSupport.setProperties(mda, options);
1:78aac70:             
1:78aac70:             return mda;
1:78aac70:             
1:d29ca2a:         } catch (Throwable e) {
1:d29ca2a:             throw IOExceptionSupport.create("Could not create discovery agent: " + uri, e);
1:d29ca2a:         }
1:d29ca2a:     }
1:d29ca2a: }
============================================================================
author:Hadrian Zbarcea
-------------------------------------------------------------------------------
commit:d54d046
author:Hiram R. Chirino
-------------------------------------------------------------------------------
commit:9a8f6e4
commit:74a7a8b
/////////////////////////////////////////////////////////////////////////
1: import java.io.IOException;
1: import java.net.URI;
1: import java.util.Map;
1: 
commit:230a86c
/////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////
1:  *      http://www.apache.org/licenses/LICENSE-2.0
commit:57b4941
/////////////////////////////////////////////////////////////////////////
1:  * Licensed to the Apache Software Foundation (ASF) under one or more
1:  * contributor license agreements.  See the NOTICE file distributed with
1:  * this work for additional information regarding copyright ownership.
1:  * The ASF licenses this file to You under the Apache License, Version 2.0
1:  * (the "License"); you may not use this file except in compliance with
1:  * the License.  You may obtain a copy of the License at
commit:48b4869
/////////////////////////////////////////////////////////////////////////
0:  * Copyright 2005-2006 The Apache Software Foundation
commit:d29ca2a
/////////////////////////////////////////////////////////////////////////
1: /**
1:  *
0:  * Copyright 2004 The Apache Software Foundation
1:  *
0:  * Licensed under the Apache License, Version 2.0 (the "License");
0:  * you may not use this file except in compliance with the License.
0:  * You may obtain a copy of the License at
1:  *
0:  * http://www.apache.org/licenses/LICENSE-2.0
1:  *
1:  * Unless required by applicable law or agreed to in writing, software
1:  * distributed under the License is distributed on an "AS IS" BASIS,
1:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:  * See the License for the specific language governing permissions and
1:  * limitations under the License.
1:  */
1: package org.apache.activemq.transport.discovery.multicast;
1: 
0: import java.io.IOException;
0: import java.net.URI;
0: import java.util.Map;
1: 
1: import org.apache.activemq.transport.discovery.DiscoveryAgent;
1: import org.apache.activemq.transport.discovery.DiscoveryAgentFactory;
1: import org.apache.activemq.util.IOExceptionSupport;
1: import org.apache.activemq.util.IntrospectionSupport;
1: import org.apache.activemq.util.URISupport;
1: 
1: public class MulticastDiscoveryAgentFactory extends DiscoveryAgentFactory {
1: 
1:     protected DiscoveryAgent doCreateDiscoveryAgent(URI uri) throws IOException {
1:         try {
1:             
0:             Map options = URISupport.parseParamters(uri);
0:             MulticastDiscoveryAgent rc = new MulticastDiscoveryAgent();
0:             rc.setGroup(uri.getHost());
0:             IntrospectionSupport.setProperties(rc, options);
0:             return rc;
1:             
1:         } catch (Throwable e) {
1:             throw IOExceptionSupport.create("Could not create discovery agent: " + uri, e);
1:         }
1:     }
1: }
author:Bosanac Dejan
-------------------------------------------------------------------------------
commit:8bf987b
/////////////////////////////////////////////////////////////////////////
1: import org.slf4j.Logger;
1: import org.slf4j.LoggerFactory;
1: 	  private static final Logger LOG = LoggerFactory.getLogger(MulticastDiscoveryAgentFactory.class); 
commit:784b93d
/////////////////////////////////////////////////////////////////////////
1:             Map options = URISupport.parseParameters(uri);         
author:Robert Davies
-------------------------------------------------------------------------------
commit:78aac70
/////////////////////////////////////////////////////////////////////////
0: import org.apache.commons.logging.Log;
0: import org.apache.commons.logging.LogFactory;
1: 	
0: 	  private static final Log LOG = LogFactory.getLog(MulticastDiscoveryAgentFactory.class); 
1:     
1:         	
1:         	  if (LOG.isTraceEnabled()) {      
1:                LOG.trace("doCreateDiscoveryAgent: uri = " + uri.toString());               
1:             }
1:             MulticastDiscoveryAgent mda = new MulticastDiscoveryAgent();          
1:             
1:             mda.setDiscoveryURI(uri);            
1:                         
1:             // allow MDA's params to be set via query arguments  
1:             // (e.g., multicast://default?group=foo             
0:             Map options = URISupport.parseParamters(uri);         
1:             IntrospectionSupport.setProperties(mda, options);
1:             
1:             return mda;
author:David Jencks
-------------------------------------------------------------------------------
commit:507ef42
/////////////////////////////////////////////////////////////////////////
0:     //See AMQ-1489. There's something wrong here but it is difficult to tell what.
0:     //It looks like to actually set the discovery URI you have to use something like
0:     //<transportConnector uri="..." discoveryUri="multicast://239.3.7.0:37000?discoveryURI=multicast://239.3.7.0:37000" />
0:     // or
0:     //<networkConnector name="..." uri="multicast://239.3.7.0:37000?discoveryURI=multicast://239.3.7.0:37000">
author:James Strachan
-------------------------------------------------------------------------------
commit:618396d
/////////////////////////////////////////////////////////////////////////
0: 
0: import java.io.IOException;
0: import java.net.URI;
0: import java.util.Map;
/////////////////////////////////////////////////////////////////////////
0:             // allow the discoveryURI to be set via a query argument on the URI
0:             // ?discoveryURI=someURI
commit:63b8251
/////////////////////////////////////////////////////////////////////////
0: import org.apache.commons.logging.Log;
0: import org.apache.commons.logging.LogFactory;
0:     private static final Log log = LogFactory.getLog(MulticastDiscoveryAgentFactory.class);
0:     
0: 
0:             if ("default".equals(uri.getHost())) {
0:                 log.info("Using default discovery uri " + uri);
0: 
0:             } else {
0:                 // only set the discovery URI if a non-default multicast IP/port endpoint is being used.
0:                 log.info("Setting discovery uri to " + uri);
0:                 rc.setDiscoveryURI(uri);
0:             }
0:             
============================================================================