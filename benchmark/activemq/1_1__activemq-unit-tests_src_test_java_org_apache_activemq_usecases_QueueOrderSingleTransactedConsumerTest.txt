1:f47b370: /*
1:f47b370:  * Licensed to the Apache Software Foundation (ASF) under one or more
1:f47b370:  * contributor license agreements.  See the NOTICE file distributed with
1:f47b370:  * this work for additional information regarding copyright ownership.
1:f47b370:  * The ASF licenses this file to You under the Apache License, Version 2.0
1:f47b370:  * (the "License"); you may not use this file except in compliance with
1:f47b370:  * the License.  You may obtain a copy of the License at
1:f47b370:  * <p/>
1:f47b370:  * http://www.apache.org/licenses/LICENSE-2.0
1:f47b370:  * <p/>
1:f47b370:  * Unless required by applicable law or agreed to in writing, software
1:f47b370:  * distributed under the License is distributed on an "AS IS" BASIS,
1:f47b370:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:f47b370:  * See the License for the specific language governing permissions and
1:f47b370:  * limitations under the License.
1:f47b370:  */
1:f47b370: 
1:f47b370: package org.apache.activemq.usecases;
1:f47b370: 
1:f47b370: import org.apache.activemq.ActiveMQConnectionFactory;
1:f47b370: import org.apache.activemq.broker.BrokerService;
1:f47b370: import org.apache.activemq.broker.region.policy.PolicyEntry;
1:f47b370: import org.apache.activemq.broker.region.policy.PolicyMap;
1:f47b370: import org.apache.activemq.command.ActiveMQQueue;
1:f47b370: import org.junit.After;
1:f47b370: import org.junit.Before;
1:f47b370: import org.junit.Test;
1:c2230fd: import org.slf4j.Logger;
1:c2230fd: import org.slf4j.LoggerFactory;
1:f47b370: 
1:f47b370: import javax.jms.Connection;
1:f47b370: import javax.jms.Message;
1:f47b370: import javax.jms.MessageConsumer;
1:f47b370: import javax.jms.MessageProducer;
1:f47b370: import javax.jms.Session;
1:f47b370: import javax.jms.TextMessage;
1:f47b370: import java.util.ArrayList;
1:f47b370: import java.util.List;
1:f47b370: 
1:f47b370: import static org.junit.Assert.assertEquals;
1:f47b370: 
1:f47b370: public class QueueOrderSingleTransactedConsumerTest {
1:f47b370: 
1:c2230fd:     private static final Logger LOG = LoggerFactory.getLogger(QueueOrderSingleTransactedConsumerTest.class);
1:c2230fd: 
1:f47b370:     BrokerService broker = null;
1:f47b370:     ActiveMQQueue dest = new ActiveMQQueue("Queue");
1:f47b370: 
1:f47b370:     @Test
1:f47b370:     public void testSingleConsumerTxRepeat() throws Exception {
1:f47b370: 
1:c2230fd:         // effect the broker sequence id that is region wide
1:c2230fd:         ActiveMQQueue dummyDest = new ActiveMQQueue("AnotherQueue");
1:c2230fd:         publishMessagesWithOrderProperty(10, 0, dest);
1:c2230fd:         publishMessagesWithOrderProperty(1, 0, dummyDest);
1:c2230fd: 
1:c2230fd:         publishMessagesWithOrderProperty(10, 10, dest);
1:c2230fd:         publishMessagesWithOrderProperty(1, 0, dummyDest);
1:c2230fd: 
1:c2230fd:         publishMessagesWithOrderProperty(10, 20, dest);
1:c2230fd:         publishMessagesWithOrderProperty(1, 0, dummyDest);
1:c2230fd: 
1:c2230fd:         publishMessagesWithOrderProperty(5, 30, dest);
1:f47b370: 
1:d7b5a62:         consumeVerifyOrderRollback(20);
1:d7b5a62:         consumeVerifyOrderRollback(10);
1:d7b5a62:         consumeVerifyOrderRollback(5);
1:f47b370:     }
1:f47b370: 
1:d7b5a62:     @Test
1:d7b5a62:     public void testSingleSessionXConsumerTxRepeat() throws Exception {
1:d7b5a62: 
1:c2230fd:         publishMessagesWithOrderProperty(50);
1:d7b5a62: 
1:c2230fd:         Connection connection = getConnectionFactory().createConnection();
1:f47b370:         connection.start();
1:f47b370:         Session session = connection.createSession(true, Session.SESSION_TRANSACTED);
1:c2230fd:         MessageConsumer messageConsumer = consumeVerifyOrder(session, 20);
1:c2230fd:         messageConsumer.close();
1:d7b5a62:         session.rollback();
1:c2230fd:         messageConsumer = consumeVerifyOrder(session, 10);
1:c2230fd:         messageConsumer.close();
1:d7b5a62:         session.rollback();
1:c2230fd:         messageConsumer = consumeVerifyOrder(session, 5);
1:c2230fd:         messageConsumer.close();
1:d7b5a62:         session.commit();
1:c2230fd:         connection.close();
1:c2230fd:     }
1:c2230fd: 
1:c2230fd:     @Test
1:c2230fd:     public void tesXConsumerTxRepeat() throws Exception {
1:c2230fd: 
1:c2230fd:         publishMessagesWithOrderProperty(10);
1:c2230fd: 
1:c2230fd:         Connection connection = getConnectionFactory().createConnection();
1:c2230fd:         connection.start();
1:c2230fd:         Session session = connection.createSession(true, Session.SESSION_TRANSACTED);
1:c2230fd:         MessageConsumer messageConsumer = consumeVerifyOrder(session, 6);
1:c2230fd:         messageConsumer.close();
1:c2230fd:         messageConsumer = consumeVerifyOrder(session, 4, 6);
1:c2230fd: 
1:c2230fd:         // rollback before close, so there are two consumers in the mix
1:c2230fd:         session.rollback();
1:c2230fd: 
1:c2230fd:         messageConsumer.close();
1:c2230fd: 
1:c2230fd:         messageConsumer = consumeVerifyOrder(session, 10);
1:c2230fd:         session.commit();
1:c2230fd:         messageConsumer.close();
1:c2230fd:         connection.close();
1:c2230fd:     }
1:c2230fd: 
1:c2230fd:     @Test
1:c2230fd:     public void testSingleTxXConsumerTxRepeat() throws Exception {
1:c2230fd: 
1:c2230fd:         publishMessagesWithOrderProperty(10);
1:c2230fd: 
1:c2230fd:         Connection connection = getConnectionFactory().createConnection();
1:c2230fd:         connection.start();
1:c2230fd:         Session session = connection.createSession(true, Session.SESSION_TRANSACTED);
1:c2230fd:         MessageConsumer messageConsumer = consumeVerifyOrder(session, 6);
1:c2230fd:         messageConsumer.close();
1:c2230fd:         messageConsumer = consumeVerifyOrder(session, 4, 6);
1:c2230fd:         messageConsumer.close();
1:c2230fd: 
1:c2230fd:         session.rollback();
1:c2230fd:         messageConsumer = consumeVerifyOrder(session, 10);
1:c2230fd:         session.commit();
1:c2230fd:         messageConsumer.close();
1:c2230fd:         connection.close();
1:d7b5a62:     }
1:d7b5a62: 
1:d7b5a62:     private void consumeVerifyOrderRollback(final int num) throws Exception {
1:c2230fd:         Connection connection = getConnectionFactory().createConnection();
1:d7b5a62:         connection.start();
1:d7b5a62:         Session session = connection.createSession(true, Session.SESSION_TRANSACTED);
1:c2230fd:         MessageConsumer messageConsumer = consumeVerifyOrder(session, num);
1:c2230fd:         messageConsumer.close();
1:d7b5a62:         session.rollback();
1:d7b5a62:         connection.close();
1:d7b5a62:     }
1:d7b5a62: 
1:c2230fd:     private MessageConsumer consumeVerifyOrder(Session session, final int num) throws Exception {
1:c2230fd:         return consumeVerifyOrder(session, num, 0);
1:c2230fd:     }
1:c2230fd: 
1:c2230fd:     private MessageConsumer consumeVerifyOrder(Session session, final int num, final int base) throws Exception {
1:f47b370:         MessageConsumer messageConsumer = session.createConsumer(dest);
1:f47b370:         for (int i=0; i<num; ) {
1:f47b370:             Message message = messageConsumer.receive(4000);
1:f47b370:             if (message != null) {
1:c2230fd:                 assertEquals(i + base, message.getIntProperty("Order"));
1:f47b370:                 i++;
1:c2230fd:                 LOG.debug("Received:" + message.getJMSMessageID() + ", Order: " + message.getIntProperty("Order"));
1:f47b370:             }
1:f47b370:         }
1:c2230fd:         return messageConsumer;
1:f47b370:     }
1:f47b370: 
1:c2230fd:     private void publishMessagesWithOrderProperty(int num) throws Exception {
1:c2230fd:         publishMessagesWithOrderProperty(num, 0, dest);
1:c2230fd:     }
1:c2230fd: 
1:c2230fd:     private void publishMessagesWithOrderProperty(int num, int seqStart, ActiveMQQueue destination) throws Exception {
1:c2230fd:         Connection connection = getConnectionFactory().createConnection();
1:f47b370:         connection.start();
1:f47b370:         Session session = connection.createSession(false, Session.AUTO_ACKNOWLEDGE);
1:c2230fd:         MessageProducer messageProducer = session.createProducer(destination);
1:f47b370:         TextMessage textMessage = session.createTextMessage("A");
1:f47b370:         for (int i=0; i<num; i++) {
1:c2230fd:             textMessage.setIntProperty("Order", i + seqStart);
1:f47b370:             messageProducer.send(textMessage);
1:f47b370:         }
1:f47b370:     }
1:f47b370: 
1:f47b370:     @Before
1:f47b370:     public void startBroker() throws Exception {
1:f47b370:         broker = new BrokerService();
1:f47b370:         broker.setDeleteAllMessagesOnStartup(true);
1:f47b370: 
1:f47b370:         // add the policy entries
1:f47b370:         PolicyMap policyMap = new PolicyMap();
1:f47b370:         List<PolicyEntry> entries = new ArrayList<PolicyEntry>();
1:f47b370:         PolicyEntry pe = new PolicyEntry();
1:f47b370:         pe.setExpireMessagesPeriod(0);
1:f47b370: 
1:f47b370:         pe.setQueuePrefetch(0); // make incremental dispatch to the consumers explicit
1:f47b370:         pe.setStrictOrderDispatch(true);  // force redeliveries back to the head of the queue
1:f47b370: 
1:f47b370:         pe.setQueue(">");
1:f47b370:         entries.add(pe);
1:f47b370:         policyMap.setPolicyEntries(entries);
1:f47b370:         broker.setDestinationPolicy(policyMap);
1:f47b370: 
1:f47b370:         broker.addConnector("tcp://0.0.0.0:0");
1:f47b370:         broker.start();
1:f47b370:     }
1:f47b370: 
1:f47b370:     @After
1:f47b370:     public void stopBroker() throws Exception {
1:f47b370:         if (broker != null) {
1:f47b370:             broker.stop();
1:f47b370:         }
1:f47b370:     }
1:c2230fd: 
1:c2230fd: 
1:c2230fd:     private ActiveMQConnectionFactory getConnectionFactory() throws Exception {
1:c2230fd:         return new ActiveMQConnectionFactory(broker.getTransportConnectorByScheme("tcp").getPublishableConnectString());
1:c2230fd:     }
1:c2230fd: 
1:f47b370: }
============================================================================
author:gtully
-------------------------------------------------------------------------------
commit:c2230fd
/////////////////////////////////////////////////////////////////////////
1: import org.slf4j.Logger;
1: import org.slf4j.LoggerFactory;
/////////////////////////////////////////////////////////////////////////
1:     private static final Logger LOG = LoggerFactory.getLogger(QueueOrderSingleTransactedConsumerTest.class);
1: 
1:         // effect the broker sequence id that is region wide
1:         ActiveMQQueue dummyDest = new ActiveMQQueue("AnotherQueue");
1:         publishMessagesWithOrderProperty(10, 0, dest);
1:         publishMessagesWithOrderProperty(1, 0, dummyDest);
1: 
1:         publishMessagesWithOrderProperty(10, 10, dest);
1:         publishMessagesWithOrderProperty(1, 0, dummyDest);
1: 
1:         publishMessagesWithOrderProperty(10, 20, dest);
1:         publishMessagesWithOrderProperty(1, 0, dummyDest);
1: 
1:         publishMessagesWithOrderProperty(5, 30, dest);
/////////////////////////////////////////////////////////////////////////
1:         publishMessagesWithOrderProperty(50);
1:         Connection connection = getConnectionFactory().createConnection();
1:         MessageConsumer messageConsumer = consumeVerifyOrder(session, 20);
1:         messageConsumer.close();
1:         messageConsumer = consumeVerifyOrder(session, 10);
1:         messageConsumer.close();
1:         messageConsumer = consumeVerifyOrder(session, 5);
1:         messageConsumer.close();
1:         connection.close();
1:     }
1: 
1:     @Test
1:     public void tesXConsumerTxRepeat() throws Exception {
1: 
1:         publishMessagesWithOrderProperty(10);
1: 
1:         Connection connection = getConnectionFactory().createConnection();
1:         connection.start();
1:         Session session = connection.createSession(true, Session.SESSION_TRANSACTED);
1:         MessageConsumer messageConsumer = consumeVerifyOrder(session, 6);
1:         messageConsumer.close();
1:         messageConsumer = consumeVerifyOrder(session, 4, 6);
1: 
1:         // rollback before close, so there are two consumers in the mix
1:         session.rollback();
1: 
1:         messageConsumer.close();
1: 
1:         messageConsumer = consumeVerifyOrder(session, 10);
1:         session.commit();
1:         messageConsumer.close();
1:         connection.close();
1:     }
1: 
1:     @Test
1:     public void testSingleTxXConsumerTxRepeat() throws Exception {
1: 
1:         publishMessagesWithOrderProperty(10);
1: 
1:         Connection connection = getConnectionFactory().createConnection();
1:         connection.start();
1:         Session session = connection.createSession(true, Session.SESSION_TRANSACTED);
1:         MessageConsumer messageConsumer = consumeVerifyOrder(session, 6);
1:         messageConsumer.close();
1:         messageConsumer = consumeVerifyOrder(session, 4, 6);
1:         messageConsumer.close();
1: 
1:         session.rollback();
1:         messageConsumer = consumeVerifyOrder(session, 10);
1:         session.commit();
1:         messageConsumer.close();
1:         connection.close();
1:         Connection connection = getConnectionFactory().createConnection();
1:         MessageConsumer messageConsumer = consumeVerifyOrder(session, num);
1:         messageConsumer.close();
1:     private MessageConsumer consumeVerifyOrder(Session session, final int num) throws Exception {
1:         return consumeVerifyOrder(session, num, 0);
1:     }
1: 
1:     private MessageConsumer consumeVerifyOrder(Session session, final int num, final int base) throws Exception {
1:                 assertEquals(i + base, message.getIntProperty("Order"));
1:                 LOG.debug("Received:" + message.getJMSMessageID() + ", Order: " + message.getIntProperty("Order"));
1:         return messageConsumer;
1:     private void publishMessagesWithOrderProperty(int num) throws Exception {
1:         publishMessagesWithOrderProperty(num, 0, dest);
1:     }
1: 
1:     private void publishMessagesWithOrderProperty(int num, int seqStart, ActiveMQQueue destination) throws Exception {
1:         Connection connection = getConnectionFactory().createConnection();
1:         MessageProducer messageProducer = session.createProducer(destination);
1:             textMessage.setIntProperty("Order", i + seqStart);
/////////////////////////////////////////////////////////////////////////
1: 
1: 
1:     private ActiveMQConnectionFactory getConnectionFactory() throws Exception {
1:         return new ActiveMQConnectionFactory(broker.getTransportConnectorByScheme("tcp").getPublishableConnectString());
1:     }
1: 
commit:d7b5a62
/////////////////////////////////////////////////////////////////////////
1:         consumeVerifyOrderRollback(20);
1:         consumeVerifyOrderRollback(10);
1:         consumeVerifyOrderRollback(5);
1:     @Test
1:     public void testSingleSessionXConsumerTxRepeat() throws Exception {
1: 
0:         publishMessages(100);
1: 
0:         consumeVerifyOrder(session, 20);
1:         session.rollback();
0:         consumeVerifyOrder(session, 10);
1:         session.rollback();
0:         consumeVerifyOrder(session, 5);
1:         session.commit();
1:     }
1: 
1:     private void consumeVerifyOrderRollback(final int num) throws Exception {
0:         Connection connection = new ActiveMQConnectionFactory(broker.getTransportConnectorByScheme("tcp").getPublishableConnectString()).createConnection();
1:         connection.start();
1:         Session session = connection.createSession(true, Session.SESSION_TRANSACTED);
0:         consumeVerifyOrder(session, num);
1:         session.rollback();
1:         connection.close();
1:     }
1: 
0:     private void consumeVerifyOrder(Session session, final int num) throws Exception {
/////////////////////////////////////////////////////////////////////////
0:         messageConsumer.close();
commit:f47b370
/////////////////////////////////////////////////////////////////////////
1: /*
1:  * Licensed to the Apache Software Foundation (ASF) under one or more
1:  * contributor license agreements.  See the NOTICE file distributed with
1:  * this work for additional information regarding copyright ownership.
1:  * The ASF licenses this file to You under the Apache License, Version 2.0
1:  * (the "License"); you may not use this file except in compliance with
1:  * the License.  You may obtain a copy of the License at
1:  * <p/>
1:  * http://www.apache.org/licenses/LICENSE-2.0
1:  * <p/>
1:  * Unless required by applicable law or agreed to in writing, software
1:  * distributed under the License is distributed on an "AS IS" BASIS,
1:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:  * See the License for the specific language governing permissions and
1:  * limitations under the License.
1:  */
1: 
1: package org.apache.activemq.usecases;
1: 
1: import org.apache.activemq.ActiveMQConnectionFactory;
1: import org.apache.activemq.broker.BrokerService;
1: import org.apache.activemq.broker.region.policy.PolicyEntry;
1: import org.apache.activemq.broker.region.policy.PolicyMap;
1: import org.apache.activemq.command.ActiveMQQueue;
1: import org.junit.After;
1: import org.junit.Before;
1: import org.junit.Test;
1: 
1: import javax.jms.Connection;
1: import javax.jms.Message;
1: import javax.jms.MessageConsumer;
1: import javax.jms.MessageProducer;
1: import javax.jms.Session;
1: import javax.jms.TextMessage;
1: import java.util.ArrayList;
1: import java.util.List;
1: 
1: import static org.junit.Assert.assertEquals;
1: 
1: public class QueueOrderSingleTransactedConsumerTest {
1: 
1:     BrokerService broker = null;
1:     ActiveMQQueue dest = new ActiveMQQueue("Queue");
1: 
1:     @Test
1:     public void testSingleConsumerTxRepeat() throws Exception {
1: 
0:         publishMessages(100);
1: 
0:         consumeVerifyOrderAndRollback(20);
0:         consumeVerifyOrderAndRollback(10);
0:         consumeVerifyOrderAndRollback(5);
1:     }
1: 
0:     private void consumeVerifyOrderAndRollback(final int num) throws Exception {
0:         Connection connection = new ActiveMQConnectionFactory(broker.getTransportConnectorByScheme("tcp").getPublishableConnectString()).createConnection();
1:         connection.start();
1:         Session session = connection.createSession(true, Session.SESSION_TRANSACTED);
1:         MessageConsumer messageConsumer = session.createConsumer(dest);
1:         for (int i=0; i<num; ) {
1:             Message message = messageConsumer.receive(4000);
1:             if (message != null) {
0:                 assertEquals(i, message.getIntProperty("Order"));
1:                 i++;
1:             }
1:         }
0:         session.rollback();
0:         connection.close();
1:     }
1: 
0:     private void publishMessages(int num) throws Exception {
0:         Connection connection = new ActiveMQConnectionFactory(broker.getTransportConnectorByScheme("tcp").getPublishableConnectString()).createConnection();
1:         connection.start();
1:         Session session = connection.createSession(false, Session.AUTO_ACKNOWLEDGE);
0:         MessageProducer messageProducer = session.createProducer(dest);
1:         TextMessage textMessage = session.createTextMessage("A");
1:         for (int i=0; i<num; i++) {
0:             textMessage.setIntProperty("Order", i);
1:             messageProducer.send(textMessage);
1:         }
1:     }
1: 
1:     @Before
1:     public void startBroker() throws Exception {
1:         broker = new BrokerService();
1:         broker.setDeleteAllMessagesOnStartup(true);
1: 
1:         // add the policy entries
1:         PolicyMap policyMap = new PolicyMap();
1:         List<PolicyEntry> entries = new ArrayList<PolicyEntry>();
1:         PolicyEntry pe = new PolicyEntry();
1:         pe.setExpireMessagesPeriod(0);
1: 
1:         pe.setQueuePrefetch(0); // make incremental dispatch to the consumers explicit
1:         pe.setStrictOrderDispatch(true);  // force redeliveries back to the head of the queue
1: 
1:         pe.setQueue(">");
1:         entries.add(pe);
1:         policyMap.setPolicyEntries(entries);
1:         broker.setDestinationPolicy(policyMap);
1: 
1:         broker.addConnector("tcp://0.0.0.0:0");
1:         broker.start();
1:     }
1: 
1:     @After
1:     public void stopBroker() throws Exception {
1:         if (broker != null) {
1:             broker.stop();
1:         }
1:     }
1: }
============================================================================