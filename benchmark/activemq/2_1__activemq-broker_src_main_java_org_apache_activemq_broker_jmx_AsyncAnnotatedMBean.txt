1:691c70d: /**
1:691c70d:  * Licensed to the Apache Software Foundation (ASF) under one or more
1:691c70d:  * contributor license agreements.  See the NOTICE file distributed with
1:691c70d:  * this work for additional information regarding copyright ownership.
1:691c70d:  * The ASF licenses this file to You under the Apache License, Version 2.0
1:691c70d:  * (the "License"); you may not use this file except in compliance with
1:691c70d:  * the License.  You may obtain a copy of the License at
1:691c70d:  *
1:691c70d:  *      http://www.apache.org/licenses/LICENSE-2.0
1:691c70d:  *
1:691c70d:  * Unless required by applicable law or agreed to in writing, software
1:691c70d:  * distributed under the License is distributed on an "AS IS" BASIS,
1:691c70d:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:691c70d:  * See the License for the specific language governing permissions and
1:691c70d:  * limitations under the License.
1:691c70d:  */
1:584c133: package org.apache.activemq.broker.jmx;
1:584c133: 
1:584c133: import java.util.concurrent.Callable;
1:584c133: import java.util.concurrent.ExecutionException;
1:584c133: import java.util.concurrent.ExecutorService;
1:584c133: import java.util.concurrent.Future;
1:584c133: import java.util.concurrent.TimeUnit;
1:584c133: 
1:584c133: import javax.management.MBeanException;
1:584c133: import javax.management.NotCompliantMBeanException;
1:584c133: import javax.management.ObjectName;
1:584c133: import javax.management.ReflectionException;
1:584c133: 
1:584c133: /**
1:584c133:  * MBean that invokes the requested operation using an async operation and waits for the result
1:584c133:  * if the operation times out then an exception is thrown.
1:584c133:  */
1:584c133: public class AsyncAnnotatedMBean extends AnnotatedMBean {
1:584c133: 
1:584c133:     private ExecutorService executor;
1:584c133:     private long timeout = 0;
1:584c133: 
1:584c133:     public <T> AsyncAnnotatedMBean(ExecutorService executor, long timeout, T impl, Class<T> mbeanInterface) throws NotCompliantMBeanException {
1:584c133:         super(impl, mbeanInterface);
1:584c133: 
1:584c133:         this.executor = executor;
1:584c133:         this.timeout = timeout;
1:584c133:     }
1:584c133: 
1:584c133:     protected AsyncAnnotatedMBean(Class<?> mbeanInterface) throws NotCompliantMBeanException {
1:584c133:         super(mbeanInterface);
1:584c133:     }
1:584c133: 
1:584c133:     protected Object asyncInvole(String s, Object[] objects, String[] strings) throws MBeanException, ReflectionException {
1:584c133:         return super.invoke(s, objects, strings);
1:584c133:     }
1:584c133: 
1:584c133:     @SuppressWarnings({ "unchecked", "rawtypes" })
1:584c133:     public static void registerMBean(ExecutorService executor, long timeout, ManagementContext context, Object object, ObjectName objectName) throws Exception {
1:584c133: 
1:584c133:         if (timeout < 0 && executor != null) {
1:584c133:             throw new IllegalArgumentException("async timeout cannot be negative.");
1:584c133:         }
1:584c133: 
1:584c133:         if (timeout > 0 && executor == null) {
1:584c133:             throw new NullPointerException("timeout given but no ExecutorService instance given.");
1:584c133:         }
1:584c133: 
1:584c133:         String mbeanName = object.getClass().getName() + "MBean";
1:584c133: 
1:584c133:         for (Class c : object.getClass().getInterfaces()) {
1:584c133:             if (mbeanName.equals(c.getName())) {
1:584c133:                 if (timeout == 0) {
1:584c133:                     context.registerMBean(new AnnotatedMBean(object, c), objectName);
1:584c133:                 } else {
1:584c133:                     context.registerMBean(new AsyncAnnotatedMBean(executor, timeout, object, c), objectName);
1:584c133:                 }
1:584c133:                 return;
1:584c133:             }
1:584c133:         }
1:584c133: 
1:584c133:         context.registerMBean(object, objectName);
1:584c133:     }
1:584c133: 
1:584c133:     @Override
1:584c133:     public Object invoke(String s, Object[] objects, String[] strings) throws MBeanException, ReflectionException {
1:584c133: 
1:584c133:         final String action = s;
1:584c133:         final Object[] params = objects;
1:584c133:         final String[] signature = strings;
1:584c133: 
1:584c133:         Future<Object> task = executor.submit(new Callable<Object>() {
1:584c133: 
1:584c133:             @Override
1:584c133:             public Object call() throws Exception {
1:584c133:                 return asyncInvole(action, params, signature);
1:584c133:             }
1:584c133:         });
1:584c133: 
1:584c133:         try {
1:584c133:             return task.get(timeout, TimeUnit.MILLISECONDS);
1:584c133:         } catch (ExecutionException e) {
1:584c133:             if (e.getCause() instanceof MBeanException) {
1:584c133:                 throw (MBeanException) e.getCause();
1:584c133:             }
1:584c133: 
1:584c133:             throw new MBeanException(e);
1:584c133:         } catch (Exception e) {
1:584c133:             throw new MBeanException(e);
1:584c133:         } finally {
1:584c133:             if (!task.isDone()) {
1:584c133:                 task.cancel(true);
1:584c133:             }
1:584c133:         }
1:584c133:     }
1:584c133: }
============================================================================
author:Hiram R. Chirino
-------------------------------------------------------------------------------
commit:58aca86
author:Timothy A. Bish
-------------------------------------------------------------------------------
commit:691c70d
/////////////////////////////////////////////////////////////////////////
1: /**
1:  * Licensed to the Apache Software Foundation (ASF) under one or more
1:  * contributor license agreements.  See the NOTICE file distributed with
1:  * this work for additional information regarding copyright ownership.
1:  * The ASF licenses this file to You under the Apache License, Version 2.0
1:  * (the "License"); you may not use this file except in compliance with
1:  * the License.  You may obtain a copy of the License at
1:  *
1:  *      http://www.apache.org/licenses/LICENSE-2.0
1:  *
1:  * Unless required by applicable law or agreed to in writing, software
1:  * distributed under the License is distributed on an "AS IS" BASIS,
1:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:  * See the License for the specific language governing permissions and
1:  * limitations under the License.
1:  */
commit:584c133
/////////////////////////////////////////////////////////////////////////
1: package org.apache.activemq.broker.jmx;
1: 
1: import java.util.concurrent.Callable;
1: import java.util.concurrent.ExecutionException;
1: import java.util.concurrent.ExecutorService;
1: import java.util.concurrent.Future;
1: import java.util.concurrent.TimeUnit;
1: 
1: import javax.management.MBeanException;
1: import javax.management.NotCompliantMBeanException;
1: import javax.management.ObjectName;
1: import javax.management.ReflectionException;
1: 
1: /**
1:  * MBean that invokes the requested operation using an async operation and waits for the result
1:  * if the operation times out then an exception is thrown.
1:  */
1: public class AsyncAnnotatedMBean extends AnnotatedMBean {
1: 
1:     private ExecutorService executor;
1:     private long timeout = 0;
1: 
1:     public <T> AsyncAnnotatedMBean(ExecutorService executor, long timeout, T impl, Class<T> mbeanInterface) throws NotCompliantMBeanException {
1:         super(impl, mbeanInterface);
1: 
1:         this.executor = executor;
1:         this.timeout = timeout;
1:     }
1: 
1:     protected AsyncAnnotatedMBean(Class<?> mbeanInterface) throws NotCompliantMBeanException {
1:         super(mbeanInterface);
1:     }
1: 
1:     protected Object asyncInvole(String s, Object[] objects, String[] strings) throws MBeanException, ReflectionException {
1:         return super.invoke(s, objects, strings);
1:     }
1: 
1:     @SuppressWarnings({ "unchecked", "rawtypes" })
1:     public static void registerMBean(ExecutorService executor, long timeout, ManagementContext context, Object object, ObjectName objectName) throws Exception {
1: 
1:         if (timeout < 0 && executor != null) {
1:             throw new IllegalArgumentException("async timeout cannot be negative.");
1:         }
1: 
1:         if (timeout > 0 && executor == null) {
1:             throw new NullPointerException("timeout given but no ExecutorService instance given.");
1:         }
1: 
1:         String mbeanName = object.getClass().getName() + "MBean";
1: 
1:         for (Class c : object.getClass().getInterfaces()) {
1:             if (mbeanName.equals(c.getName())) {
1:                 if (timeout == 0) {
1:                     context.registerMBean(new AnnotatedMBean(object, c), objectName);
1:                 } else {
1:                     context.registerMBean(new AsyncAnnotatedMBean(executor, timeout, object, c), objectName);
1:                 }
1:                 return;
1:             }
1:         }
1: 
1:         context.registerMBean(object, objectName);
1:     }
1: 
1:     @Override
1:     public Object invoke(String s, Object[] objects, String[] strings) throws MBeanException, ReflectionException {
1: 
1:         final String action = s;
1:         final Object[] params = objects;
1:         final String[] signature = strings;
1: 
1:         Future<Object> task = executor.submit(new Callable<Object>() {
1: 
1:             @Override
1:             public Object call() throws Exception {
1:                 return asyncInvole(action, params, signature);
1:             }
1:         });
1: 
1:         try {
1:             return task.get(timeout, TimeUnit.MILLISECONDS);
1:         } catch (ExecutionException e) {
1:             if (e.getCause() instanceof MBeanException) {
1:                 throw (MBeanException) e.getCause();
1:             }
1: 
1:             throw new MBeanException(e);
1:         } catch (Exception e) {
1:             throw new MBeanException(e);
1:         } finally {
1:             if (!task.isDone()) {
1:                 task.cancel(true);
1:             }
1:         }
1:     }
1: }
============================================================================