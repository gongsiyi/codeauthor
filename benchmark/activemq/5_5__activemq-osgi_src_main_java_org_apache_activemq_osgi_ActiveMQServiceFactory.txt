1:94f71cc: /**
1:94f71cc:  * Licensed to the Apache Software Foundation (ASF) under one or more
1:94f71cc:  * contributor license agreements.  See the NOTICE file distributed with
1:94f71cc:  * this work for additional information regarding copyright ownership.
1:94f71cc:  * The ASF licenses this file to You under the Apache License, Version 2.0
1:94f71cc:  * (the "License"); you may not use this file except in compliance with
1:94f71cc:  * the License.  You may obtain a copy of the License at
1:94f71cc:  *
1:94f71cc:  *      http://www.apache.org/licenses/LICENSE-2.0
1:94f71cc:  *
1:94f71cc:  * Unless required by applicable law or agreed to in writing, software
1:94f71cc:  * distributed under the License is distributed on an "AS IS" BASIS,
1:94f71cc:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:94f71cc:  * See the License for the specific language governing permissions and
1:94f71cc:  * limitations under the License.
1:94f71cc:  */
1:33c5642: package org.apache.activemq.osgi;
4:94f71cc: 
1:d9b03ac: import java.util.Collections;
1:d9b03ac: import java.util.Dictionary;
1:d9b03ac: import java.util.Enumeration;
1:d9b03ac: import java.util.HashMap;
1:d9b03ac: import java.util.Map;
1:d9b03ac: import java.util.Properties;
1:d9b03ac: 
1:94f71cc: import org.apache.activemq.broker.BrokerService;
1:77a9ade: import org.apache.activemq.spring.SpringBrokerContext;
1:94f71cc: import org.apache.activemq.spring.Utils;
1:a678244: import org.apache.camel.blueprint.CamelContextFactoryBean;
1:94f71cc: import org.osgi.framework.BundleContext;
1:94f71cc: import org.osgi.service.cm.ConfigurationException;
1:94f71cc: import org.osgi.service.cm.ManagedServiceFactory;
1:fd46439: import org.slf4j.Logger;
1:fd46439: import org.slf4j.LoggerFactory;
1:6c2ce67: import org.springframework.beans.BeansException;
1:6c2ce67: import org.springframework.beans.factory.config.BeanFactoryPostProcessor;
1:6c2ce67: import org.springframework.beans.factory.config.BeanPostProcessor;
1:6c2ce67: import org.springframework.beans.factory.config.ConfigurableListableBeanFactory;
1:cfe9e15: import org.springframework.beans.factory.config.PropertyPlaceholderConfigurer;
1:6c2ce67: import org.springframework.context.support.ClassPathXmlApplicationContext;
1:94f71cc: import org.springframework.core.io.Resource;
1:94f71cc: 
1:94f71cc: public class ActiveMQServiceFactory implements ManagedServiceFactory {
1:94f71cc: 
1:fd46439:     private static final Logger LOG = LoggerFactory.getLogger(ActiveMQServiceFactory.class);
1:fd46439: 
1:94f71cc:     BundleContext bundleContext;
1:94f71cc:     HashMap<String, BrokerService> brokers = new HashMap<String, BrokerService>();
1:94f71cc: 
1:d9b03ac:     @Override
1:94f71cc:     public String getName() {
1:94f71cc:         return "ActiveMQ Server Controller";
2:94f71cc:     }
1:94f71cc: 
1:d9b03ac:     public Map<String, BrokerService> getBrokersMap() {
1:d9b03ac:         return Collections.unmodifiableMap(brokers);
1:d9b03ac:     }
1:d9b03ac: 
1:d9b03ac:     @SuppressWarnings("rawtypes")
2:94f71cc:     @Override
1:fd46439:     synchronized public void updated(String pid, Dictionary properties) throws ConfigurationException {
1:acd1eda: 
1:acd1eda:         // First stop currently running broker (if any)
1:acd1eda:         deleted(pid);
1:acd1eda: 
1:d9b03ac:         String config = (String) properties.get("config");
2:94f71cc:         if (config == null) {
1:94f71cc:             throw new ConfigurationException("config", "Property must be set");
1:94f71cc:         }
1:d9b03ac:         String name = (String) properties.get("broker-name");
1:33c5642:         if (name == null) {
1:94f71cc:             throw new ConfigurationException("broker-name", "Property must be set");
1:94f71cc:         }
1:33c5642: 
1:33c5642:         LOG.info("Starting broker " + name);
1:33c5642: 
1:94f71cc:         try {
1:94f71cc:             Thread.currentThread().setContextClassLoader(BrokerService.class.getClassLoader());
1:94f71cc:             Resource resource = Utils.resourceFromString(config);
1:a6bceeb: 
1:6c2ce67:             ClassPathXmlApplicationContext ctx = new ClassPathXmlApplicationContext(
1:6c2ce67:                     new String[]{resource.getURL().toExternalForm()}, false);
1:6c2ce67: 
1:6c2ce67:             if (isCamelContextFactoryBeanExist()) {
1:6c2ce67: 
1:6c2ce67:                 ctx.addBeanFactoryPostProcessor(new BeanFactoryPostProcessor() {
1:6c2ce67: 
1:6c2ce67:                     @Override
1:6c2ce67:                     public void postProcessBeanFactory(ConfigurableListableBeanFactory beanFactory) throws BeansException {
1:6c2ce67: 
1:6c2ce67:                         beanFactory.addBeanPostProcessor(new BeanPostProcessor() {
1:6c2ce67: 
1:6c2ce67:                             @Override
1:6c2ce67:                             public Object postProcessBeforeInitialization(Object bean, String beanName) throws BeansException {
1:6c2ce67:                                 if (bean instanceof CamelContextFactoryBean) {
1:6c2ce67:                                     ((CamelContextFactoryBean) bean).setBundleContext(bundleContext);
1:6c2ce67:                                 }
1:6c2ce67:                                 return bean;
1:6c2ce67:                             }
1:6c2ce67: 
1:6c2ce67:                             @Override
1:6c2ce67:                             public Object postProcessAfterInitialization(Object bean, String beanName) throws BeansException {
1:6c2ce67:                                 return bean;
1:6c2ce67:                             }
1:6c2ce67:                         });
1:6c2ce67:                     }
1:6c2ce67:                 });
1:6c2ce67:             }
1:94f71cc: 
1:a6bceeb:             // Handle properties in configuration
1:d9b03ac:             PropertyPlaceholderConfigurer configurator = new PropertyPlaceholderConfigurer();
1:a6bceeb: 
1:d9b03ac:             // convert dictionary to properties. Is there a better way?
1:a6bceeb:             Properties props = new Properties();
1:d9b03ac:             Enumeration<?> elements = properties.keys();
1:a6bceeb:             while (elements.hasMoreElements()) {
1:a6bceeb:                 Object key = elements.nextElement();
1:a6bceeb:                 props.put(key, properties.get(key));
1:a6bceeb:             }
1:a6bceeb: 
1:a6bceeb:             configurator.setProperties(props);
1:a6bceeb:             configurator.setIgnoreUnresolvablePlaceholders(true);
1:a6bceeb: 
1:a6bceeb:             ctx.addBeanFactoryPostProcessor(configurator);
1:a6bceeb: 
1:a6bceeb:             ctx.refresh();
1:a6bceeb: 
1:a6bceeb:             // Start the broker
1:94f71cc:             BrokerService broker = ctx.getBean(BrokerService.class);
1:94f71cc:             if (broker == null) {
1:94f71cc:                 throw new ConfigurationException(null, "Broker not defined");
1:94f71cc:             }
1:d9b03ac:             // TODO deal with multiple brokers
1:94f71cc: 
1:77a9ade:             SpringBrokerContext brokerContext = new SpringBrokerContext();
1:77a9ade:             brokerContext.setConfigurationUrl(resource.getURL().toExternalForm());
1:77a9ade:             brokerContext.setApplicationContext(ctx);
1:77a9ade:             broker.setBrokerContext(brokerContext);
1:94f71cc: 
1:b40e5f9:             broker.setStartAsync(true);
1:94f71cc:             broker.start();
1:b40e5f9: 
1:b40e5f9:             if (!broker.isSlave())
1:b40e5f9:                 broker.waitUntilStarted();
1:94f71cc:             brokers.put(pid, broker);
1:94f71cc:         } catch (Exception e) {
1:94f71cc:             throw new ConfigurationException(null, "Cannot start the broker", e);
1:94f71cc:         }
1:94f71cc:     }
1:94f71cc: 
1:6c2ce67:     private boolean isCamelContextFactoryBeanExist() {
1:6c2ce67:         try {
1:6c2ce67:             Class.forName("org.apache.camel.osgi.CamelContextFactoryBean");
1:6c2ce67:             return true;
1:6c2ce67:         } catch (ClassNotFoundException e) {
1:6c2ce67:             return false;
1:6c2ce67:         }
1:6c2ce67:     }
1:6c2ce67: 
1:94f71cc:     @Override
1:fd46439:     synchronized public void deleted(String pid) {
1:94f71cc:         BrokerService broker = brokers.get(pid);
1:94f71cc:         if (broker == null) {
1:94f71cc:             return;
1:94f71cc:         }
1:94f71cc:         try {
1:acd1eda:             LOG.info("Stopping broker " + pid);
1:94f71cc:             broker.stop();
1:94f71cc:             broker.waitUntilStopped();
1:94f71cc:         } catch (Exception e) {
1:fd46439:             LOG.error("Exception on stopping broker", e);
1:fd46439:         }
1:fd46439:     }
1:fd46439: 
1:fd46439:     synchronized public void destroy() {
1:d9b03ac:         for (String broker : brokers.keySet()) {
1:fd46439:             deleted(broker);
1:94f71cc:         }
1:94f71cc:     }
1:94f71cc: 
1:94f71cc:     public BundleContext getBundleContext() {
1:94f71cc:         return bundleContext;
1:94f71cc:     }
1:94f71cc: 
1:94f71cc:     public void setBundleContext(BundleContext bundleContext) {
1:94f71cc:         this.bundleContext = bundleContext;
1:94f71cc:     }
1:94f71cc: }
============================================================================
author:Carlo Dapor
-------------------------------------------------------------------------------
commit:b40e5f9
/////////////////////////////////////////////////////////////////////////
1:             broker.setStartAsync(true);
1: 
1:             if (!broker.isSlave())
1:                 broker.waitUntilStarted();
author:Christopher L. Shannon (cshannon)
-------------------------------------------------------------------------------
commit:a678244
/////////////////////////////////////////////////////////////////////////
1: import org.apache.camel.blueprint.CamelContextFactoryBean;
commit:6c2ce67
/////////////////////////////////////////////////////////////////////////
0: import org.apache.camel.osgi.CamelContextFactoryBean;
1: import org.springframework.beans.BeansException;
1: import org.springframework.beans.factory.config.BeanFactoryPostProcessor;
1: import org.springframework.beans.factory.config.BeanPostProcessor;
1: import org.springframework.beans.factory.config.ConfigurableListableBeanFactory;
1: import org.springframework.context.support.ClassPathXmlApplicationContext;
/////////////////////////////////////////////////////////////////////////
1:             ClassPathXmlApplicationContext ctx = new ClassPathXmlApplicationContext(
1:                     new String[]{resource.getURL().toExternalForm()}, false);
1: 
1:             if (isCamelContextFactoryBeanExist()) {
1: 
1:                 ctx.addBeanFactoryPostProcessor(new BeanFactoryPostProcessor() {
1: 
1:                     @Override
1:                     public void postProcessBeanFactory(ConfigurableListableBeanFactory beanFactory) throws BeansException {
1: 
1:                         beanFactory.addBeanPostProcessor(new BeanPostProcessor() {
1: 
1:                             @Override
1:                             public Object postProcessBeforeInitialization(Object bean, String beanName) throws BeansException {
1:                                 if (bean instanceof CamelContextFactoryBean) {
1:                                     ((CamelContextFactoryBean) bean).setBundleContext(bundleContext);
1:                                 }
1:                                 return bean;
1:                             }
1: 
1:                             @Override
1:                             public Object postProcessAfterInitialization(Object bean, String beanName) throws BeansException {
1:                                 return bean;
1:                             }
1:                         });
1:                     }
1:                 });
1:             }
/////////////////////////////////////////////////////////////////////////
1:     private boolean isCamelContextFactoryBeanExist() {
1:         try {
1:             Class.forName("org.apache.camel.osgi.CamelContextFactoryBean");
1:             return true;
1:         } catch (ClassNotFoundException e) {
1:             return false;
1:         }
1:     }
1: 
author:gtully
-------------------------------------------------------------------------------
commit:3a6d67e
/////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////
0: import org.springframework.osgi.context.support.OsgiBundleXmlApplicationContext;
/////////////////////////////////////////////////////////////////////////
0:             // when camel is embedded it needs a bundle context
0:             OsgiBundleXmlApplicationContext ctx = new OsgiBundleXmlApplicationContext(new String[]{resource.getURL().toExternalForm()}) {
0:             ctx.setBundleContext(bundleContext);
commit:77a9ade
/////////////////////////////////////////////////////////////////////////
1: import org.apache.activemq.spring.SpringBrokerContext;
/////////////////////////////////////////////////////////////////////////
1:             SpringBrokerContext brokerContext = new SpringBrokerContext();
1:             brokerContext.setConfigurationUrl(resource.getURL().toExternalForm());
1:             brokerContext.setApplicationContext(ctx);
1:             broker.setBrokerContext(brokerContext);
author:Timothy Bish
-------------------------------------------------------------------------------
commit:d9b03ac
/////////////////////////////////////////////////////////////////////////
1: import java.util.Collections;
1: import java.util.Dictionary;
1: import java.util.Enumeration;
1: import java.util.HashMap;
1: import java.util.Map;
1: import java.util.Properties;
1: 
/////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////
1:     public Map<String, BrokerService> getBrokersMap() {
1:         return Collections.unmodifiableMap(brokers);
1:     }
1: 
1:     @SuppressWarnings("rawtypes")
1:         String config = (String) properties.get("config");
1:         String name = (String) properties.get("broker-name");
/////////////////////////////////////////////////////////////////////////
1:                 @Override
1:             PropertyPlaceholderConfigurer configurator = new PropertyPlaceholderConfigurer();
1:             // convert dictionary to properties. Is there a better way?
1:             Enumeration<?> elements = properties.keys();
/////////////////////////////////////////////////////////////////////////
1:             // TODO deal with multiple brokers
/////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////
1:         for (String broker : brokers.keySet()) {
author:Bosanac Dejan
-------------------------------------------------------------------------------
commit:cfe9e15
/////////////////////////////////////////////////////////////////////////
1: import org.springframework.beans.factory.config.PropertyPlaceholderConfigurer;
/////////////////////////////////////////////////////////////////////////
0:             PropertyPlaceholderConfigurer configurator =
0:                         new PropertyPlaceholderConfigurer();
commit:acd1eda
/////////////////////////////////////////////////////////////////////////
1: 
1:         // First stop currently running broker (if any)
1:         deleted(pid);
1: 
/////////////////////////////////////////////////////////////////////////
1:             LOG.info("Stopping broker " + pid);
commit:a6bceeb
/////////////////////////////////////////////////////////////////////////
0: import org.springframework.context.ConfigurableApplicationContext;
0: import org.springframework.context.support.ClassPathXmlApplicationContext;
0: import org.springframework.context.support.PropertySourcesPlaceholderConfigurer;
0: import java.util.*;
/////////////////////////////////////////////////////////////////////////
1: 
0:             ResourceXmlApplicationContext ctx = new ResourceXmlApplicationContext(resource, Collections.EMPTY_LIST, null, Collections.EMPTY_LIST, false) {
1:             // Handle properties in configuration
0:             PropertySourcesPlaceholderConfigurer configurator =
0:                         new PropertySourcesPlaceholderConfigurer();
1: 
0:             //convert dictionary to properties. Is there a better way?
1:             Properties props = new Properties();
0:             Enumeration elements = properties.keys();
1:             while (elements.hasMoreElements()) {
1:                 Object key = elements.nextElement();
1:                 props.put(key, properties.get(key));
1:             }
1: 
1:             configurator.setProperties(props);
1:             configurator.setIgnoreUnresolvablePlaceholders(true);
1: 
1:             ctx.addBeanFactoryPostProcessor(configurator);
1: 
1:             ctx.refresh();
1: 
1:             // Start the broker
commit:33c5642
/////////////////////////////////////////////////////////////////////////
1: package org.apache.activemq.osgi;
/////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////
1:         if (name == null) {
1: 
1:         LOG.info("Starting broker " + name);
0:         //TODO properties
1: 
commit:fd46439
/////////////////////////////////////////////////////////////////////////
1: import org.slf4j.Logger;
1: import org.slf4j.LoggerFactory;
/////////////////////////////////////////////////////////////////////////
1:     private static final Logger LOG = LoggerFactory.getLogger(ActiveMQServiceFactory.class);
1: 
/////////////////////////////////////////////////////////////////////////
1:     synchronized public void updated(String pid, Dictionary properties) throws ConfigurationException {
/////////////////////////////////////////////////////////////////////////
1:     synchronized public void deleted(String pid) {
0:         LOG.info("Stopping broker " + pid);
0:             LOG.warn("Broker " + pid + " not found");
1:             LOG.error("Exception on stopping broker", e);
1:         }
1:     }
1: 
1:     synchronized public void destroy() {
0:         for (String broker: brokers.keySet()) {
1:             deleted(broker);
commit:94f71cc
/////////////////////////////////////////////////////////////////////////
1: /**
1:  * Licensed to the Apache Software Foundation (ASF) under one or more
1:  * contributor license agreements.  See the NOTICE file distributed with
1:  * this work for additional information regarding copyright ownership.
1:  * The ASF licenses this file to You under the Apache License, Version 2.0
1:  * (the "License"); you may not use this file except in compliance with
1:  * the License.  You may obtain a copy of the License at
1:  *
1:  *      http://www.apache.org/licenses/LICENSE-2.0
1:  *
1:  * Unless required by applicable law or agreed to in writing, software
1:  * distributed under the License is distributed on an "AS IS" BASIS,
1:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:  * See the License for the specific language governing permissions and
1:  * limitations under the License.
1:  */
0: package org.apache.activemq.karaf;
1: 
1: import org.apache.activemq.broker.BrokerService;
1: import org.apache.activemq.spring.Utils;
0: import org.apache.xbean.spring.context.ResourceXmlApplicationContext;
1: import org.osgi.framework.BundleContext;
1: import org.osgi.service.cm.ConfigurationException;
1: import org.osgi.service.cm.ManagedServiceFactory;
0: import org.springframework.beans.factory.xml.XmlBeanDefinitionReader;
1: import org.springframework.core.io.Resource;
1: 
0: import java.util.Arrays;
0: import java.util.Dictionary;
0: import java.util.HashMap;
0: import java.util.Map;
1: 
1: public class ActiveMQServiceFactory implements ManagedServiceFactory {
1: 
1:     BundleContext bundleContext;
1:     HashMap<String, BrokerService> brokers = new HashMap<String, BrokerService>();
1: 
1:     @Override
1:     public String getName() {
1:         return "ActiveMQ Server Controller";
1:     }
1: 
1:     @Override
0:     public void updated(String pid, Dictionary properties) throws ConfigurationException {
0:         String config = (String)properties.get("config");
1:         if (config == null) {
1:             throw new ConfigurationException("config", "Property must be set");
1:         }
0:         String name = (String)properties.get("broker-name");
1:         if (config == null) {
1:             throw new ConfigurationException("broker-name", "Property must be set");
1:         }
1:         try {
1:             Thread.currentThread().setContextClassLoader(BrokerService.class.getClassLoader());
1:             Resource resource = Utils.resourceFromString(config);
0:             ResourceXmlApplicationContext ctx = new ResourceXmlApplicationContext((resource)) {
0:                 protected void initBeanDefinitionReader(XmlBeanDefinitionReader reader) {
0:                     reader.setValidating(false);
1:                 }
0:             };
1: 
1:             BrokerService broker = ctx.getBean(BrokerService.class);
1:             if (broker == null) {
1:                 throw new ConfigurationException(null, "Broker not defined");
1:             }
0:             //TODO deal with multiple brokers
1: 
1: 
1:             broker.start();
0:             broker.waitUntilStarted();
1:             brokers.put(pid, broker);
1: 
1: 
1:         } catch (Exception e) {
1:             throw new ConfigurationException(null, "Cannot start the broker", e);
1:         }
1:     }
1: 
1:     @Override
0:     public void deleted(String pid) {
1:         BrokerService broker = brokers.get(pid);
1:         if (broker == null) {
0:             //TODO LOG
1:             return;
1:         }
1:         try {
1:             broker.stop();
1:             broker.waitUntilStopped();
1:         } catch (Exception e) {
0:             //TODO LOG
0:             e.printStackTrace();
1:         }
1:     }
1: 
1:     public BundleContext getBundleContext() {
1:         return bundleContext;
1:     }
1: 
1:     public void setBundleContext(BundleContext bundleContext) {
1:         this.bundleContext = bundleContext;
1:     }
1: }
============================================================================