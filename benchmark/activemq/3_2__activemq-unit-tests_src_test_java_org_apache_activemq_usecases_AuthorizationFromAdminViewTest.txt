1:52aaa0a: /**
1:52aaa0a:  * Licensed to the Apache Software Foundation (ASF) under one or more
1:52aaa0a:  * contributor license agreements.  See the NOTICE file distributed with
1:52aaa0a:  * this work for additional information regarding copyright ownership.
1:52aaa0a:  * The ASF licenses this file to You under the Apache License, Version 2.0
1:52aaa0a:  * (the "License"); you may not use this file except in compliance with
1:52aaa0a:  * the License.  You may obtain a copy of the License at
1:52aaa0a:  *
1:52aaa0a:  *      http://www.apache.org/licenses/LICENSE-2.0
1:52aaa0a:  *
1:52aaa0a:  * Unless required by applicable law or agreed to in writing, software
1:52aaa0a:  * distributed under the License is distributed on an "AS IS" BASIS,
1:52aaa0a:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:52aaa0a:  * See the License for the specific language governing permissions and
1:52aaa0a:  * limitations under the License.
1:9e885ef:  */
1:9e885ef: package org.apache.activemq.usecases;
1:9e885ef: 
1:9e885ef: import org.apache.activemq.ActiveMQConnectionFactory;
1:9e885ef: import org.apache.activemq.broker.BrokerFactory;
1:9e885ef: import org.apache.activemq.broker.BrokerPlugin;
1:9e885ef: import org.apache.activemq.broker.BrokerService;
1:9e885ef: import org.apache.activemq.security.AuthorizationPlugin;
1:9e885ef: import org.apache.activemq.security.SimpleAuthorizationMap;
1:9e885ef: 
1:9e885ef: public class AuthorizationFromAdminViewTest extends org.apache.activemq.TestSupport {
1:9e885ef: 
1:9e885ef:     private BrokerService broker;
1:9e885ef: 
1:9e885ef:     protected ActiveMQConnectionFactory createConnectionFactory() throws Exception {
1:9e885ef:         return new ActiveMQConnectionFactory("vm://" + getName());
1:9e885ef:     }
1:9e885ef: 
1:9e885ef:     protected void setUp() throws Exception {
1:9e885ef:         createBroker();
1:9e885ef:         super.setUp();
1:9e885ef:     }
1:9e885ef: 
1:9e885ef:     protected void tearDown() throws Exception {
1:9e885ef:         super.tearDown();
1:9e885ef:         destroyBroker();
1:9e885ef:     }
1:9e885ef: 
1:9e885ef:     private void createBroker() throws Exception {
1:9e885ef:         broker = BrokerFactory.createBroker("broker:(vm://localhost)");
1:9e885ef:         broker.setPersistent(false);
1:9e885ef:         broker.setBrokerName(getName());
1:9e885ef: 
1:9e885ef:         AuthorizationPlugin plugin = new AuthorizationPlugin();
1:9e885ef:         plugin.setMap(new SimpleAuthorizationMap());
1:9e885ef:         BrokerPlugin[] plugins = new BrokerPlugin[] {plugin};
1:9e885ef:         broker.setPlugins(plugins);
1:9e885ef: 
1:9e885ef:         broker.start();
1:9e885ef:     }
1:9e885ef: 
1:9e885ef:     private void destroyBroker() throws Exception {
1:9e885ef:         if (broker != null)
1:9e885ef:             broker.stop();
1:9e885ef:     }
1:9e885ef: 
1:9e885ef:     public void testAuthorizationFromAdminView() throws Exception {
1:9e885ef:         broker.getAdminView().addQueue(getDestinationString());
1:9e885ef:     }
1:9e885ef: }
============================================================================
author:Timothy A. Bish
-------------------------------------------------------------------------------
commit:ef24cc9
author:Bosanac Dejan
-------------------------------------------------------------------------------
commit:52aaa0a
/////////////////////////////////////////////////////////////////////////
1: /**
1:  * Licensed to the Apache Software Foundation (ASF) under one or more
1:  * contributor license agreements.  See the NOTICE file distributed with
1:  * this work for additional information regarding copyright ownership.
1:  * The ASF licenses this file to You under the Apache License, Version 2.0
1:  * (the "License"); you may not use this file except in compliance with
1:  * the License.  You may obtain a copy of the License at
1:  *
1:  *      http://www.apache.org/licenses/LICENSE-2.0
1:  *
1:  * Unless required by applicable law or agreed to in writing, software
1:  * distributed under the License is distributed on an "AS IS" BASIS,
1:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:  * See the License for the specific language governing permissions and
1:  * limitations under the License.
author:Gary Tully
-------------------------------------------------------------------------------
commit:9e885ef
/////////////////////////////////////////////////////////////////////////
0: /* 
0:  * AuthorizationFromAdminViewTest 
0:  * Date: Oct 21, 2010 
0:  * Copyright: Sony BMG 
0:  * Created by: baraza 
1:  */
1: package org.apache.activemq.usecases;
1: 
1: import org.apache.activemq.ActiveMQConnectionFactory;
1: import org.apache.activemq.broker.BrokerFactory;
1: import org.apache.activemq.broker.BrokerPlugin;
1: import org.apache.activemq.broker.BrokerService;
1: import org.apache.activemq.security.AuthorizationPlugin;
1: import org.apache.activemq.security.SimpleAuthorizationMap;
1: 
1: public class AuthorizationFromAdminViewTest extends org.apache.activemq.TestSupport {
1: 
1:     private BrokerService broker;
1: 
1:     protected ActiveMQConnectionFactory createConnectionFactory() throws Exception {
1:         return new ActiveMQConnectionFactory("vm://" + getName());
1:     }
1: 
1:     protected void setUp() throws Exception {
1:         createBroker();
1:         super.setUp();
1:     }
1: 
1:     protected void tearDown() throws Exception {
1:         super.tearDown();
1:         destroyBroker();
1:     }
1: 
1:     private void createBroker() throws Exception {
1:         broker = BrokerFactory.createBroker("broker:(vm://localhost)");
1:         broker.setPersistent(false);
1:         broker.setBrokerName(getName());
1: 
1:         AuthorizationPlugin plugin = new AuthorizationPlugin();
1:         plugin.setMap(new SimpleAuthorizationMap());
1:         BrokerPlugin[] plugins = new BrokerPlugin[] {plugin};
1:         broker.setPlugins(plugins);
1: 
1:         broker.start();
1:     }
1: 
1:     private void destroyBroker() throws Exception {
1:         if (broker != null)
1:             broker.stop();
1:     }
1: 
1:     public void testAuthorizationFromAdminView() throws Exception {
1:         broker.getAdminView().addQueue(getDestinationString());
1:     }
1: }
============================================================================