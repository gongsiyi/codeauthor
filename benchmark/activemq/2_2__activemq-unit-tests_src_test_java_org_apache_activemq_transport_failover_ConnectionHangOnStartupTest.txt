1:a7e7bce: /**
1:a7e7bce:  * Licensed to the Apache Software Foundation (ASF) under one or more
1:a7e7bce:  * contributor license agreements.  See the NOTICE file distributed with
1:a7e7bce:  * this work for additional information regarding copyright ownership.
1:a7e7bce:  * The ASF licenses this file to You under the Apache License, Version 2.0
1:a7e7bce:  * (the "License"); you may not use this file except in compliance with
1:a7e7bce:  * the License.  You may obtain a copy of the License at
1:a7e7bce:  *
1:a7e7bce:  *      http://www.apache.org/licenses/LICENSE-2.0
1:a7e7bce:  *
1:a7e7bce:  * Unless required by applicable law or agreed to in writing, software
1:a7e7bce:  * distributed under the License is distributed on an "AS IS" BASIS,
1:a7e7bce:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:a7e7bce:  * See the License for the specific language governing permissions and
1:a7e7bce:  * limitations under the License.
1:a7e7bce:  */
1:a7e7bce: package org.apache.activemq.transport.failover;
1:a7e7bce: 
1:a7e7bce: import java.util.concurrent.CountDownLatch;
1:a7e7bce: import java.util.concurrent.atomic.AtomicReference;
1:a7e7bce: 
1:a7e7bce: import javax.jms.Connection;
1:a7e7bce: 
1:a7e7bce: import org.apache.activemq.ActiveMQConnectionFactory;
1:a7e7bce: import org.apache.activemq.broker.BrokerService;
1:a7e7bce: import org.apache.activemq.xbean.BrokerFactoryBean;
1:a7e7bce: import org.junit.After;
1:a7e7bce: import org.junit.Test;
1:a7e7bce: import org.slf4j.Logger;
1:a7e7bce: import org.slf4j.LoggerFactory;
1:a7e7bce: import org.springframework.core.io.ClassPathResource;
1:a7e7bce: 
1:a7e7bce: /**
1:a7e7bce:  * Tests for AMQ-3719
1:a7e7bce:  */
1:a7e7bce: public class ConnectionHangOnStartupTest {
1:a7e7bce: 
1:a7e7bce:     private static final Logger LOG = LoggerFactory.getLogger(ConnectionHangOnStartupTest.class);
1:a7e7bce: 
1:a7e7bce:     // short maxInactivityDurationInitalDelay to trigger the bug, short
1:a7e7bce:     // maxReconnectDelay so that the test runs faster (because it will retry
1:a7e7bce:     // connection sooner)
1:a7e7bce:     protected String uriString = "failover://(tcp://localhost:62001?wireFormat.maxInactivityDurationInitalDelay=1,tcp://localhost:62002?wireFormat.maxInactivityDurationInitalDelay=1)?randomize=false&maxReconnectDelay=200";
1:a7e7bce:     protected BrokerService master = null;
1:a7e7bce:     protected AtomicReference<BrokerService> slave = new AtomicReference<BrokerService>();
1:a7e7bce: 
1:a7e7bce:     @After
1:a7e7bce:     public void tearDown() throws Exception {
1:a7e7bce: 
1:a7e7bce:         BrokerService brokerService = slave.get();
1:a7e7bce:         if (brokerService != null) {
1:a7e7bce:             brokerService.stop();
1:a7e7bce:         }
1:a7e7bce:         if (master != null)
1:a7e7bce:             master.stop();
1:a7e7bce:     }
1:a7e7bce: 
1:a7e7bce:     protected ActiveMQConnectionFactory createConnectionFactory() throws Exception {
1:a7e7bce:         return new ActiveMQConnectionFactory(uriString);
1:a7e7bce:     }
1:a7e7bce: 
1:a7e7bce:     protected void createMaster() throws Exception {
1:a7e7bce:         BrokerFactoryBean brokerFactory = new BrokerFactoryBean(new ClassPathResource(getMasterXml()));
1:a7e7bce:         brokerFactory.afterPropertiesSet();
1:a7e7bce:         master = brokerFactory.getBroker();
1:a7e7bce:         master.start();
1:a7e7bce:     }
1:a7e7bce: 
1:a7e7bce:     protected void createSlave() throws Exception {
1:a7e7bce:         BrokerFactoryBean brokerFactory = new BrokerFactoryBean(new ClassPathResource(getSlaveXml()));
1:a7e7bce:         brokerFactory.afterPropertiesSet();
1:a7e7bce:         BrokerService broker = brokerFactory.getBroker();
1:a7e7bce:         broker.start();
1:a7e7bce:         slave.set(broker);
1:a7e7bce:     }
1:a7e7bce: 
1:a7e7bce:     protected String getSlaveXml() {
1:55fef72:         return "org/apache/activemq/broker/ft/sharedFileSlave.xml";
1:a7e7bce:     }
1:a7e7bce: 
1:a7e7bce:     protected String getMasterXml() {
1:55fef72:         return "org/apache/activemq/broker/ft/sharedFileMaster.xml";
1:a7e7bce:     }
1:a7e7bce: 
1:a7e7bce:     @Test(timeout=60000)
1:a7e7bce:     public void testInitialWireFormatNegotiationTimeout() throws Exception {
1:a7e7bce:         final AtomicReference<Connection> conn = new AtomicReference<Connection>();
1:a7e7bce:         final CountDownLatch connStarted = new CountDownLatch(1);
1:a7e7bce: 
1:a7e7bce:         Thread t = new Thread() {
1:a7e7bce:             @Override
1:a7e7bce:             public void run() {
1:a7e7bce:                 try {
1:a7e7bce:                     conn.set(createConnectionFactory().createConnection());
1:a7e7bce:                     conn.get().start();
1:a7e7bce:                 } catch (Exception ex) {
1:a7e7bce:                     LOG.error("could not create or start connection", ex);
1:a7e7bce:                 }
1:a7e7bce:                 connStarted.countDown();
1:a7e7bce:             }
1:a7e7bce:         };
1:a7e7bce:         t.start();
1:a7e7bce:         createMaster();
1:55fef72:         // slave will never start unless the master dies!
1:55fef72:         //createSlave();
1:a7e7bce: 
1:a7e7bce:         conn.get().stop();
1:a7e7bce:     }
1:a7e7bce: 
1:a7e7bce: }
============================================================================
author:Timothy A. Bish
-------------------------------------------------------------------------------
commit:ef24cc9
commit:a7e7bce
/////////////////////////////////////////////////////////////////////////
1: /**
1:  * Licensed to the Apache Software Foundation (ASF) under one or more
1:  * contributor license agreements.  See the NOTICE file distributed with
1:  * this work for additional information regarding copyright ownership.
1:  * The ASF licenses this file to You under the Apache License, Version 2.0
1:  * (the "License"); you may not use this file except in compliance with
1:  * the License.  You may obtain a copy of the License at
1:  *
1:  *      http://www.apache.org/licenses/LICENSE-2.0
1:  *
1:  * Unless required by applicable law or agreed to in writing, software
1:  * distributed under the License is distributed on an "AS IS" BASIS,
1:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:  * See the License for the specific language governing permissions and
1:  * limitations under the License.
1:  */
1: package org.apache.activemq.transport.failover;
1: 
1: import java.util.concurrent.CountDownLatch;
1: import java.util.concurrent.atomic.AtomicReference;
1: 
1: import javax.jms.Connection;
1: 
1: import org.apache.activemq.ActiveMQConnectionFactory;
1: import org.apache.activemq.broker.BrokerService;
1: import org.apache.activemq.xbean.BrokerFactoryBean;
1: import org.junit.After;
1: import org.junit.Test;
1: import org.slf4j.Logger;
1: import org.slf4j.LoggerFactory;
1: import org.springframework.core.io.ClassPathResource;
1: 
1: /**
1:  * Tests for AMQ-3719
1:  */
1: public class ConnectionHangOnStartupTest {
1: 
1:     private static final Logger LOG = LoggerFactory.getLogger(ConnectionHangOnStartupTest.class);
1: 
1:     // short maxInactivityDurationInitalDelay to trigger the bug, short
1:     // maxReconnectDelay so that the test runs faster (because it will retry
1:     // connection sooner)
1:     protected String uriString = "failover://(tcp://localhost:62001?wireFormat.maxInactivityDurationInitalDelay=1,tcp://localhost:62002?wireFormat.maxInactivityDurationInitalDelay=1)?randomize=false&maxReconnectDelay=200";
1:     protected BrokerService master = null;
1:     protected AtomicReference<BrokerService> slave = new AtomicReference<BrokerService>();
1: 
1:     @After
1:     public void tearDown() throws Exception {
1: 
1:         BrokerService brokerService = slave.get();
1:         if (brokerService != null) {
1:             brokerService.stop();
1:         }
1:         if (master != null)
1:             master.stop();
1:     }
1: 
1:     protected ActiveMQConnectionFactory createConnectionFactory() throws Exception {
1:         return new ActiveMQConnectionFactory(uriString);
1:     }
1: 
1:     protected void createMaster() throws Exception {
1:         BrokerFactoryBean brokerFactory = new BrokerFactoryBean(new ClassPathResource(getMasterXml()));
1:         brokerFactory.afterPropertiesSet();
1:         master = brokerFactory.getBroker();
1:         master.start();
1:     }
1: 
1:     protected void createSlave() throws Exception {
1:         BrokerFactoryBean brokerFactory = new BrokerFactoryBean(new ClassPathResource(getSlaveXml()));
1:         brokerFactory.afterPropertiesSet();
1:         BrokerService broker = brokerFactory.getBroker();
1:         broker.start();
1:         slave.set(broker);
1:     }
1: 
1:     protected String getSlaveXml() {
0:         return "org/apache/activemq/broker/ft/slave.xml";
1:     }
1: 
1:     protected String getMasterXml() {
0:         return "org/apache/activemq/broker/ft/master.xml";
1:     }
1: 
1:     @Test(timeout=60000)
1:     public void testInitialWireFormatNegotiationTimeout() throws Exception {
1:         final AtomicReference<Connection> conn = new AtomicReference<Connection>();
1:         final CountDownLatch connStarted = new CountDownLatch(1);
1: 
1:         Thread t = new Thread() {
1:             @Override
1:             public void run() {
1:                 try {
1:                     conn.set(createConnectionFactory().createConnection());
1:                     conn.get().start();
1:                 } catch (Exception ex) {
1:                     LOG.error("could not create or start connection", ex);
1:                 }
1:                 connStarted.countDown();
1:             }
1:         };
1:         t.start();
1:         createMaster();
0:         createSlave();
1: 
1:         conn.get().stop();
1:     }
1: 
1: }
author:Gary Tully
-------------------------------------------------------------------------------
commit:55fef72
/////////////////////////////////////////////////////////////////////////
1:         return "org/apache/activemq/broker/ft/sharedFileSlave.xml";
1:         return "org/apache/activemq/broker/ft/sharedFileMaster.xml";
/////////////////////////////////////////////////////////////////////////
1:         // slave will never start unless the master dies!
1:         //createSlave();
============================================================================