1:77f9b87: /**
1:77f9b87:  * Licensed to the Apache Software Foundation (ASF) under one or more
1:77f9b87:  * contributor license agreements.  See the NOTICE file distributed with
1:77f9b87:  * this work for additional information regarding copyright ownership.
1:77f9b87:  * The ASF licenses this file to You under the Apache License, Version 2.0
1:77f9b87:  * (the "License"); you may not use this file except in compliance with
1:77f9b87:  * the License.  You may obtain a copy of the License at
1:77f9b87:  *
1:77f9b87:  *      http://www.apache.org/licenses/LICENSE-2.0
1:77f9b87:  *
1:77f9b87:  * Unless required by applicable law or agreed to in writing, software
1:77f9b87:  * distributed under the License is distributed on an "AS IS" BASIS,
1:77f9b87:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:77f9b87:  * See the License for the specific language governing permissions and
1:77f9b87:  * limitations under the License.
1:77f9b87:  */
1:b66559e: package org.apache.activemq.jms.pool;
5:bfd1be5: 
1:e6597c4: import static org.junit.Assert.assertEquals;
1:e6597c4: 
1:e6597c4: import java.util.ArrayList;
1:e6597c4: import java.util.List;
1:e6597c4: import java.util.concurrent.CyclicBarrier;
1:e6597c4: import java.util.concurrent.ExecutorService;
1:e6597c4: import java.util.concurrent.Executors;
1:e6597c4: 
1:c7fccea: import javax.jms.Connection;
1:c7fccea: import javax.jms.ConnectionFactory;
1:c7fccea: import javax.jms.Destination;
1:c7fccea: import javax.jms.Message;
1:c7fccea: import javax.jms.MessageConsumer;
1:c7fccea: import javax.jms.MessageProducer;
1:c7fccea: import javax.jms.Session;
1:c7fccea: import javax.jms.TextMessage;
1:c7fccea: 
1:c7fccea: import org.apache.activemq.ActiveMQConnectionFactory;
1:bfd1be5: import org.apache.activemq.broker.BrokerService;
1:bfd1be5: import org.apache.activemq.broker.TransportConnector;
1:bfd1be5: import org.apache.log4j.Logger;
1:27ce49f: import org.junit.After;
1:e6597c4: import org.junit.Before;
1:e6597c4: import org.junit.Test;
1:dc607bb: 
1:e6597c4: public class PooledSessionExhaustionTest extends JmsPoolTestSupport {
1:c7fccea: 
1:bfd1be5:     private static final String QUEUE = "FOO";
1:dc607bb:     private static final int NUM_MESSAGES = 500;
1:bfd1be5: 
1:e6597c4:     private static final Logger LOG = Logger.getLogger(PooledSessionExhaustionTest.class);
1:bfd1be5: 
1:bfd1be5:     private ActiveMQConnectionFactory factory;
1:bfd1be5:     private PooledConnectionFactory pooledFactory;
1:bfd1be5:     private String connectionUri;
1:bfd1be5:     private int numReceived = 0;
1:dc607bb:     private final List<Exception> exceptionList = new ArrayList<Exception>();
1:bfd1be5: 
1:e6597c4:     @Before
1:77f9b87:     @Override
1:e6597c4:     public void setUp() throws Exception {
1:e6597c4:         super.setUp();
1:e6597c4: 
1:e6597c4:         brokerService = new BrokerService();
1:e6597c4:         brokerService.setPersistent(false);
1:e6597c4:         brokerService.setUseJmx(false);
1:e6597c4:         brokerService.setAdvisorySupport(false);
1:e6597c4:         brokerService.setSchedulerSupport(false);
1:e6597c4:         TransportConnector connector = brokerService.addConnector("tcp://localhost:0");
1:e6597c4:         brokerService.start();
1:bfd1be5:         connectionUri = connector.getPublishableConnectString();
1:bfd1be5:         factory = new ActiveMQConnectionFactory(connectionUri);
1:b66559e:         pooledFactory = new PooledConnectionFactory();
1:b66559e:         pooledFactory.setConnectionFactory(factory);
1:bfd1be5:         pooledFactory.setMaxConnections(1);
1:bfd1be5:         pooledFactory.setBlockIfSessionPoolIsFull(false);
1:dc607bb:         pooledFactory.setMaximumActiveSessionPerConnection(1);
1:77f9b87:     }
1:77f9b87: 
1:27ce49f:     @Override
1:27ce49f:     @After
1:27ce49f:     public void tearDown() throws Exception {
1:27ce49f:         try {
1:27ce49f:             pooledFactory.stop();
1:27ce49f:         } catch (Exception ex) {
1:27ce49f:             // ignored
1:27ce49f:         }
1:27ce49f: 
1:27ce49f:         super.tearDown();
1:27ce49f:     }
1:27ce49f: 
1:dc607bb:     class TestRunner implements Runnable {
1:dc607bb: 
1:dc607bb:         CyclicBarrier barrier;
1:dc607bb:         TestRunner(CyclicBarrier barrier) {
1:dc607bb:             this.barrier = barrier;
1:dc607bb:         }
1:dc607bb: 
1:dc607bb:         @Override
1:dc607bb:         public void run() {
1:dc607bb:             try {
1:dc607bb:                 barrier.await();
1:dc607bb:                 sendMessages(pooledFactory);
1:dc607bb:             } catch (Exception e) {
1:dc607bb:                 exceptionList.add(e);
1:dc607bb:                 throw new RuntimeException(e);
1:dc607bb:             }
1:dc607bb:         }
1:dc607bb:     }
1:dc607bb: 
1:bfd1be5:     public void sendMessages(ConnectionFactory connectionFactory) throws Exception {
1:bfd1be5:         for (int i = 0; i < NUM_MESSAGES; i++) {
1:bfd1be5:             Connection connection = connectionFactory.createConnection();
1:bfd1be5:             connection.start();
1:bfd1be5: 
1:bfd1be5:             Session session = connection.createSession(false, Session.AUTO_ACKNOWLEDGE);
1:bfd1be5:             Destination destination = session.createQueue(QUEUE);
1:bfd1be5:             MessageProducer producer = session.createProducer(destination);
1:bfd1be5: 
1:bfd1be5:             String msgTo = "hello";
1:bfd1be5:             TextMessage message = session.createTextMessage(msgTo);
1:bfd1be5:             producer.send(message);
1:bfd1be5:             connection.close();
1:e6597c4:             LOG.debug("sent " + i + " messages using " + connectionFactory.getClass());
2:bfd1be5:         }
1:bfd1be5:     }
1:bfd1be5: 
1:e6597c4:     @Test(timeout = 60000)
1:bfd1be5:     public void testCanExhaustSessions() throws Exception {
1:bfd1be5:         Thread thread = new Thread(new Runnable() {
1:e6597c4:             @Override
1:bfd1be5:             public void run() {
1:bfd1be5:                 try {
1:bfd1be5:                     ConnectionFactory connectionFactory = new ActiveMQConnectionFactory(connectionUri);
1:bfd1be5:                     Connection connection = connectionFactory.createConnection();
1:bfd1be5:                     connection.start();
1:bfd1be5: 
1:bfd1be5:                     Session session = connection.createSession(false, Session.AUTO_ACKNOWLEDGE);
1:bfd1be5:                     Destination destination = session.createQueue(QUEUE);
1:bfd1be5:                     MessageConsumer consumer = session.createConsumer(destination);
1:bfd1be5:                     for (int i = 0; i < NUM_MESSAGES; ++i) {
1:bfd1be5:                         Message msg = consumer.receive(5000);
1:bfd1be5:                         if (msg == null) {
1:bfd1be5:                             return;
1:bfd1be5:                         }
1:bfd1be5:                         numReceived++;
1:bfd1be5:                         if (numReceived % 20 == 0) {
1:e6597c4:                             LOG.debug("received " + numReceived + " messages ");
1:bfd1be5:                             System.runFinalization();
1:bfd1be5:                         }
1:bfd1be5:                     }
1:bfd1be5:                 } catch (Exception e) {
1:bfd1be5:                     throw new RuntimeException(e);
1:bfd1be5:                 }
1:bfd1be5:             }
1:bfd1be5:         });
1:bfd1be5:         thread.start();
1:dc607bb: 
1:dc607bb:         ExecutorService threads = Executors.newFixedThreadPool(2);
1:dc607bb:         final CyclicBarrier barrier = new CyclicBarrier(2, new Runnable() {
1:dc607bb: 
1:dc607bb:             @Override
1:dc607bb:             public void run() {
1:e6597c4:                 LOG.trace("Starting threads to send messages!");
1:dc607bb:             }
1:dc607bb:         });
1:bfd1be5: 
1:dc607bb:         threads.execute(new TestRunner(barrier));
1:dc607bb:         threads.execute(new TestRunner(barrier));
1:dc607bb: 
1:bfd1be5:         thread.join();
1:bfd1be5: 
1:dc607bb:         // we should expect that one of the threads will die because it cannot acquire a session,
1:dc607bb:         // will throw an exception
1:bfd1be5:         assertEquals(NUM_MESSAGES, numReceived);
1:dc607bb:         assertEquals(exceptionList.size(), 1);
1:bfd1be5:     }
1:bfd1be5: }
============================================================================
author:Timothy Bish
-------------------------------------------------------------------------------
commit:27ce49f
/////////////////////////////////////////////////////////////////////////
1: import org.junit.After;
/////////////////////////////////////////////////////////////////////////
1:     @Override
1:     @After
1:     public void tearDown() throws Exception {
1:         try {
1:             pooledFactory.stop();
1:         } catch (Exception ex) {
1:             // ignored
1:         }
1: 
1:         super.tearDown();
1:     }
1: 
commit:e6597c4
/////////////////////////////////////////////////////////////////////////
1: import static org.junit.Assert.assertEquals;
1: 
1: import java.util.ArrayList;
1: import java.util.List;
1: import java.util.concurrent.CyclicBarrier;
1: import java.util.concurrent.ExecutorService;
1: import java.util.concurrent.Executors;
1: 
/////////////////////////////////////////////////////////////////////////
1: import org.junit.Before;
1: import org.junit.Test;
1: public class PooledSessionExhaustionTest extends JmsPoolTestSupport {
1:     private static final Logger LOG = Logger.getLogger(PooledSessionExhaustionTest.class);
1:     @Before
1:     public void setUp() throws Exception {
1:         super.setUp();
1: 
1:         brokerService = new BrokerService();
1:         brokerService.setPersistent(false);
1:         brokerService.setUseJmx(false);
1:         brokerService.setAdvisorySupport(false);
1:         brokerService.setSchedulerSupport(false);
1:         TransportConnector connector = brokerService.addConnector("tcp://localhost:0");
1:         brokerService.start();
/////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////
1:             LOG.debug("sent " + i + " messages using " + connectionFactory.getClass());
1:     @Test(timeout = 60000)
1:             @Override
/////////////////////////////////////////////////////////////////////////
1:                             LOG.debug("received " + numReceived + " messages ");
/////////////////////////////////////////////////////////////////////////
1:                 LOG.trace("Starting threads to send messages!");
author:Christian Posta
-------------------------------------------------------------------------------
commit:dc607bb
/////////////////////////////////////////////////////////////////////////
0: import java.util.ArrayList;
0: import java.util.List;
0: import java.util.concurrent.CyclicBarrier;
0: import java.util.concurrent.ExecutorService;
0: import java.util.concurrent.Executors;
1: 
1:     private static final int NUM_MESSAGES = 500;
/////////////////////////////////////////////////////////////////////////
1:     private final List<Exception> exceptionList = new ArrayList<Exception>();
/////////////////////////////////////////////////////////////////////////
1:         pooledFactory.setMaximumActiveSessionPerConnection(1);
/////////////////////////////////////////////////////////////////////////
1:     class TestRunner implements Runnable {
1: 
1:         CyclicBarrier barrier;
1:         TestRunner(CyclicBarrier barrier) {
1:             this.barrier = barrier;
1:         }
1: 
1:         @Override
1:         public void run() {
1:             try {
1:                 barrier.await();
1:                 sendMessages(pooledFactory);
1:             } catch (Exception e) {
1:                 exceptionList.add(e);
1:                 throw new RuntimeException(e);
1:             }
1:         }
1:     }
1: 
/////////////////////////////////////////////////////////////////////////
0:             logger.info("sent " + i + " messages using " + connectionFactory.getClass());
/////////////////////////////////////////////////////////////////////////
1:         ExecutorService threads = Executors.newFixedThreadPool(2);
1:         final CyclicBarrier barrier = new CyclicBarrier(2, new Runnable() {
1: 
1:             @Override
1:             public void run() {
0:                 System.out.println("Starting threads to send messages!");
1:             }
1:         });
1: 
1:         threads.execute(new TestRunner(barrier));
1:         threads.execute(new TestRunner(barrier));
1: 
1:         // we should expect that one of the threads will die because it cannot acquire a session,
1:         // will throw an exception
1:         assertEquals(exceptionList.size(), 1);
author:gtully
-------------------------------------------------------------------------------
commit:b66559e
/////////////////////////////////////////////////////////////////////////
1: package org.apache.activemq.jms.pool;
/////////////////////////////////////////////////////////////////////////
1:         pooledFactory = new PooledConnectionFactory();
1:         pooledFactory.setConnectionFactory(factory);
author:Timothy A. Bish
-------------------------------------------------------------------------------
commit:c7fccea
/////////////////////////////////////////////////////////////////////////
1: import javax.jms.Connection;
1: import javax.jms.ConnectionFactory;
1: import javax.jms.Destination;
1: import javax.jms.Message;
1: import javax.jms.MessageConsumer;
1: import javax.jms.MessageProducer;
1: import javax.jms.Session;
1: import javax.jms.TextMessage;
1: 
0: import junit.framework.TestCase;
1: 
1: import org.apache.activemq.ActiveMQConnectionFactory;
/////////////////////////////////////////////////////////////////////////
0:         broker.setUseJmx(false);
commit:77f9b87
/////////////////////////////////////////////////////////////////////////
1: /**
1:  * Licensed to the Apache Software Foundation (ASF) under one or more
1:  * contributor license agreements.  See the NOTICE file distributed with
1:  * this work for additional information regarding copyright ownership.
1:  * The ASF licenses this file to You under the Apache License, Version 2.0
1:  * (the "License"); you may not use this file except in compliance with
1:  * the License.  You may obtain a copy of the License at
1:  *
1:  *      http://www.apache.org/licenses/LICENSE-2.0
1:  *
1:  * Unless required by applicable law or agreed to in writing, software
1:  * distributed under the License is distributed on an "AS IS" BASIS,
1:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:  * See the License for the specific language governing permissions and
1:  * limitations under the License.
1:  */
/////////////////////////////////////////////////////////////////////////
1:     @Override
/////////////////////////////////////////////////////////////////////////
0:     @Override
0:     protected void tearDown() throws Exception {
0:         broker.stop();
0:         broker.waitUntilStopped();
0:         broker = null;
1:     }
1: 
commit:bfd1be5
/////////////////////////////////////////////////////////////////////////
0: package org.apache.activemq.pool;
1: 
0: import org.apache.activemq.*;
1: import org.apache.activemq.broker.BrokerService;
1: import org.apache.activemq.broker.TransportConnector;
1: 
0: import junit.framework.*;
0: import javax.jms.*;
0: import javax.jms.Message;
1: 
1: import org.apache.log4j.Logger;
1: 
0: public class PooledSessionExhaustionTest extends TestCase {
1:     private static final String QUEUE = "FOO";
0:     private static final int NUM_MESSAGES = 700;
1: 
0:     private Logger logger = Logger.getLogger(getClass());
1: 
0:     private BrokerService broker;
1:     private ActiveMQConnectionFactory factory;
1:     private PooledConnectionFactory pooledFactory;
1:     private String connectionUri;
1:     private int numReceived = 0;
1: 
0:     protected void setUp() throws Exception {
0:         broker = new BrokerService();
0:         broker.setPersistent(false);
0:         TransportConnector connector = broker.addConnector("tcp://localhost:0");
0:         broker.start();
1:         connectionUri = connector.getPublishableConnectString();
1:         factory = new ActiveMQConnectionFactory(connectionUri);
0:         pooledFactory = new PooledConnectionFactory(factory);
1:         pooledFactory.setMaxConnections(1);
1:         pooledFactory.setBlockIfSessionPoolIsFull(false);
1:     }
1: 
1:     public void sendMessages(ConnectionFactory connectionFactory) throws Exception {
1:         for (int i = 0; i < NUM_MESSAGES; i++) {
1:             Connection connection = connectionFactory.createConnection();
1:             connection.start();
1: 
1:             Session session = connection.createSession(false, Session.AUTO_ACKNOWLEDGE);
1:             Destination destination = session.createQueue(QUEUE);
1:             MessageProducer producer = session.createProducer(destination);
1: 
1:             String msgTo = "hello";
1:             TextMessage message = session.createTextMessage(msgTo);
1:             producer.send(message);
1:             connection.close();
0:             logger.debug("sent " + i + " messages using " + connectionFactory.getClass());
1:         }
1:     }
1: 
1:     public void testCanExhaustSessions() throws Exception {
1:         Thread thread = new Thread(new Runnable() {
1:             public void run() {
1:                 try {
1:                     ConnectionFactory connectionFactory = new ActiveMQConnectionFactory(connectionUri);
1:                     Connection connection = connectionFactory.createConnection();
1:                     connection.start();
1: 
1:                     Session session = connection.createSession(false, Session.AUTO_ACKNOWLEDGE);
1:                     Destination destination = session.createQueue(QUEUE);
1:                     MessageConsumer consumer = session.createConsumer(destination);
1:                     for (int i = 0; i < NUM_MESSAGES; ++i) {
1:                         Message msg = consumer.receive(5000);
1:                         if (msg == null) {
1:                             return;
1:                         }
1:                         numReceived++;
1:                         if (numReceived % 20 == 0) {
0:                             logger.debug("received " + numReceived + " messages ");
1:                             System.runFinalization();
1:                         }
1:                     }
1:                 } catch (Exception e) {
1:                     throw new RuntimeException(e);
1:                 }
1:             }
1:         });
1:         thread.start();
1: 
0:         sendMessages(pooledFactory);
1:         thread.join();
1: 
1:         assertEquals(NUM_MESSAGES, numReceived);
1:     }
1: }
============================================================================