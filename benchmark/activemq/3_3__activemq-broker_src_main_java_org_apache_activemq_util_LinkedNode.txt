4:118c806: /**
1:118c806:  * Licensed to the Apache Software Foundation (ASF) under one or more
1:118c806:  * contributor license agreements.  See the NOTICE file distributed with
1:118c806:  * this work for additional information regarding copyright ownership.
1:118c806:  * The ASF licenses this file to You under the Apache License, Version 2.0
1:118c806:  * (the "License"); you may not use this file except in compliance with
1:118c806:  * the License.  You may obtain a copy of the License at
3:118c806:  *
1:230a86c:  *      http://www.apache.org/licenses/LICENSE-2.0
1:118c806:  *
1:118c806:  * Unless required by applicable law or agreed to in writing, software
1:118c806:  * distributed under the License is distributed on an "AS IS" BASIS,
1:118c806:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:118c806:  * See the License for the specific language governing permissions and
1:118c806:  * limitations under the License.
4:118c806:  */
1:118c806: package org.apache.activemq.util;
18:118c806: 
1:118c806: /**
1:f812e34:  * Provides a base class for you to extend when you want object to maintain a
1:f812e34:  * doubly linked list to other objects without using a collection class.
1:5e05df1:  *
1:118c806:  * @author chirino
1:118c806:  */
1:118c806: public class LinkedNode {
1:118c806: 
1:f812e34:     protected LinkedNode next = this;
1:f812e34:     protected LinkedNode prev = this;
1:f812e34:     protected boolean tail = true;
1:118c806: 
1:f812e34:     public LinkedNode getHeadNode() {
1:f812e34:         if (isHeadNode()) {
1:f812e34:             return this;
1:f812e34:         }
1:f812e34:         if (isTailNode()) {
1:f812e34:             return next;
1:f812e34:         }
1:f812e34:         LinkedNode rc = prev;
1:f812e34:         while (!rc.isHeadNode()) {
1:f812e34:             rc = rc.prev;
1:f812e34:         }
1:f812e34:         return rc;
1:f812e34:     }
1:118c806: 
1:f812e34:     public LinkedNode getTailNode() {
1:f812e34:         if (isTailNode()) {
1:f812e34:             return this;
1:f812e34:         }
1:f812e34:         if (isHeadNode()) {
1:f812e34:             return prev;
1:f812e34:         }
1:f812e34:         LinkedNode rc = next;
1:f812e34:         while (!rc.isTailNode()) {
1:f812e34:             rc = rc.next;
1:f812e34:         }
1:f812e34:         return rc;
1:f812e34:     }
1:118c806: 
1:f812e34:     public LinkedNode getNext() {
1:f812e34:         return tail ? null : next;
1:f812e34:     }
1:118c806: 
1:f812e34:     public LinkedNode getPrevious() {
1:f812e34:         return prev.tail ? null : prev;
1:f812e34:     }
1:118c806: 
1:f812e34:     public boolean isHeadNode() {
1:f812e34:         return prev.isTailNode();
1:f812e34:     }
1:118c806: 
1:f812e34:     public boolean isTailNode() {
1:f812e34:         return tail;
1:f812e34:     }
1:118c806: 
1:f812e34:     /**
1:f812e34:      * @param rightHead the node to link after this node.
1:f812e34:      * @return this
1:f812e34:      */
1:f812e34:     public LinkedNode linkAfter(LinkedNode rightHead) {
1:118c806: 
1:f812e34:         if (rightHead == this) {
1:f812e34:             throw new IllegalArgumentException("You cannot link to yourself");
1:f812e34:         }
1:f812e34:         if (!rightHead.isHeadNode()) {
1:f812e34:             throw new IllegalArgumentException("You only insert nodes that are the first in a list");
1:f812e34:         }
1:f812e34: 
1:f812e34:         LinkedNode rightTail = rightHead.prev;
1:f812e34: 
1:f812e34:         if (tail) {
1:f812e34:             tail = false;
1:f812e34:         } else {
1:f812e34:             rightTail.tail = false;
1:f812e34:         }
1:f812e34: 
1:f812e34:         rightHead.prev = this; // link the head of the right side.
1:f812e34:         rightTail.next = next; // link the tail of the right side
1:f812e34:         next.prev = rightTail; // link the head of the left side
1:f812e34:         next = rightHead; // link the tail of the left side.
1:f812e34: 
1:f812e34:         return this;
1:f812e34:     }
1:f812e34: 
1:f812e34:     /**
1:f812e34:      * @param leftHead the node to link after this node.
1:f812e34:      * @return this
1:f812e34:      */
1:f812e34:     public LinkedNode linkBefore(LinkedNode leftHead) {
1:f812e34: 
1:f812e34:         if (leftHead == this) {
1:f812e34:             throw new IllegalArgumentException("You cannot link to yourself");
1:f812e34:         }
1:f812e34:         if (!leftHead.isHeadNode()) {
1:f812e34:             throw new IllegalArgumentException("You only insert nodes that are the first in a list");
1:f812e34:         }
1:f812e34: 
1:f812e34:         // The left side is no longer going to be a tail..
1:f812e34:         LinkedNode leftTail = leftHead.prev;
1:f812e34:         leftTail.tail = false;
1:f812e34: 
1:f812e34:         leftTail.next = this; // link the tail of the left side.
1:f812e34:         leftHead.prev = prev; // link the head of the left side.
1:f812e34:         prev.next = leftHead; // link the tail of the right side.
1:f812e34:         prev = leftTail; // link the head of the right side.
1:f812e34: 
1:f812e34:         return leftHead;
1:f812e34:     }
1:f812e34: 
1:f812e34:     /**
1:f812e34:      * Removes this node out of the linked list it is chained in.
1:f812e34:      */
1:f812e34:     public void unlink() {
1:f812e34:         // If we are allready unlinked...
1:f812e34:         if (prev == this) {
1:d3ebc9c:             reset();
1:f812e34:             return;
1:f812e34:         }
1:f812e34: 
1:f812e34:         if (tail) {
1:f812e34:             prev.tail = true;
1:f812e34:         }
1:f812e34: 
1:f812e34:         // Update the peers links..
1:f812e34:         next.prev = prev;
1:f812e34:         prev.next = next;
1:f812e34: 
1:f812e34:         // Update our links..
1:d3ebc9c:         reset();
22:118c806:     }
1:5e05df1: 
1:d3ebc9c:     public void reset() {
1:f812e34:         next = this;
1:f812e34:         prev = this;
1:f812e34:         tail = true;
1:f812e34:     }
1:118c806: }
============================================================================
author:Timothy Bish
-------------------------------------------------------------------------------
commit:5e05df1
/////////////////////////////////////////////////////////////////////////
1:  *
/////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////
1: 
author:Hiram R. Chirino
-------------------------------------------------------------------------------
commit:58aca86
commit:f812e34
/////////////////////////////////////////////////////////////////////////
1:  * Provides a base class for you to extend when you want object to maintain a
1:  * doubly linked list to other objects without using a collection class.
1:     protected LinkedNode next = this;
1:     protected LinkedNode prev = this;
1:     protected boolean tail = true;
1:     public LinkedNode getHeadNode() {
1:         if (isHeadNode()) {
1:             return this;
1:         }
1:         if (isTailNode()) {
1:             return next;
1:         }
1:         LinkedNode rc = prev;
1:         while (!rc.isHeadNode()) {
1:             rc = rc.prev;
1:         }
1:         return rc;
1:     }
1:     public LinkedNode getTailNode() {
1:         if (isTailNode()) {
1:             return this;
1:         }
1:         if (isHeadNode()) {
1:             return prev;
1:         }
1:         LinkedNode rc = next;
1:         while (!rc.isTailNode()) {
1:             rc = rc.next;
1:         }
1:         return rc;
1:     }
1:     public LinkedNode getNext() {
1:         return tail ? null : next;
1:     }
1:     public LinkedNode getPrevious() {
1:         return prev.tail ? null : prev;
1:     }
1:     public boolean isHeadNode() {
1:         return prev.isTailNode();
1:     }
1:     public boolean isTailNode() {
1:         return tail;
1:     }
1:     /**
1:      * @param rightHead the node to link after this node.
1:      * @return this
1:      */
1:     public LinkedNode linkAfter(LinkedNode rightHead) {
1:         if (rightHead == this) {
1:             throw new IllegalArgumentException("You cannot link to yourself");
1:         }
1:         if (!rightHead.isHeadNode()) {
1:             throw new IllegalArgumentException("You only insert nodes that are the first in a list");
1:         }
1:         LinkedNode rightTail = rightHead.prev;
1: 
1:         if (tail) {
1:             tail = false;
1:         } else {
1:             rightTail.tail = false;
1:         }
1: 
1:         rightHead.prev = this; // link the head of the right side.
1:         rightTail.next = next; // link the tail of the right side
1:         next.prev = rightTail; // link the head of the left side
1:         next = rightHead; // link the tail of the left side.
1: 
1:         return this;
1:     }
1: 
1:     /**
1:      * @param leftHead the node to link after this node.
0:      * @return
1:      * @return this
1:      */
1:     public LinkedNode linkBefore(LinkedNode leftHead) {
1: 
1:         if (leftHead == this) {
1:             throw new IllegalArgumentException("You cannot link to yourself");
1:         }
1:         if (!leftHead.isHeadNode()) {
1:             throw new IllegalArgumentException("You only insert nodes that are the first in a list");
1:         }
1: 
1:         // The left side is no longer going to be a tail..
1:         LinkedNode leftTail = leftHead.prev;
1:         leftTail.tail = false;
1: 
1:         leftTail.next = this; // link the tail of the left side.
1:         leftHead.prev = prev; // link the head of the left side.
1:         prev.next = leftHead; // link the tail of the right side.
1:         prev = leftTail; // link the head of the right side.
1: 
1:         return leftHead;
1:     }
1: 
1:     /**
1:      * Removes this node out of the linked list it is chained in.
1:      */
1:     public void unlink() {
1:         // If we are allready unlinked...
1:         if (prev == this) {
1:             return;
1:         }
1: 
1:         if (tail) {
1:             prev.tail = true;
1:         }
1: 
1:         // Update the peers links..
1:         next.prev = prev;
1:         prev.next = next;
1: 
1:         // Update our links..
1:         next = this;
1:         prev = this;
1:         tail = true;
1:     }
1: 
commit:230a86c
/////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////
1:  *      http://www.apache.org/licenses/LICENSE-2.0
commit:118c806
/////////////////////////////////////////////////////////////////////////
1: /**
1:  *
1:  * Licensed to the Apache Software Foundation (ASF) under one or more
1:  * contributor license agreements.  See the NOTICE file distributed with
1:  * this work for additional information regarding copyright ownership.
1:  * The ASF licenses this file to You under the Apache License, Version 2.0
1:  * (the "License"); you may not use this file except in compliance with
1:  * the License.  You may obtain a copy of the License at
1:  *
0:  * http://www.apache.org/licenses/LICENSE-2.0
1:  *
1:  * Unless required by applicable law or agreed to in writing, software
1:  * distributed under the License is distributed on an "AS IS" BASIS,
1:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:  * See the License for the specific language governing permissions and
1:  * limitations under the License.
1:  */
1: package org.apache.activemq.util;
1: 
1: /**
0:  * Provides a base class for you to extend when you want object to maintain
0:  * a doubly linked list to other objects without using a collection class. 
1:  * 
1:  * @author chirino
1:  */
1: public class LinkedNode {
1: 	
0: 	protected LinkedNode next=this;
0: 	protected LinkedNode prev=this;
0: 	protected boolean tail=true; 
1: 	
1: 
0: 	public LinkedNode getHeadNode() {
0: 		if( isHeadNode() ) {
0: 			return this;
1: 		}
0: 		if( isTailNode() ) {
0: 			return next;
1: 		}
0: 		LinkedNode rc = prev;
0: 		while(!rc.isHeadNode()) {
0: 			rc = rc.prev;
1: 		}
0: 		return rc;
1: 	}
1: 	
0: 	public LinkedNode getTailNode() {
0: 		if( isTailNode() ) {
0: 			return this;
1: 		}
0: 		if( isHeadNode() ) {
0: 			return prev;
1: 		}
0: 		LinkedNode rc = next;
0: 		while(!rc.isTailNode()) {
0: 			rc = rc.next;
1: 		}
0: 		return rc;
1: 	}
1: 
0: 	public LinkedNode getNext() {
0: 		return tail ? null : next;
1: 	}
1: 
0: 	public LinkedNode getPrevious() {
0: 		return prev.tail ? null : prev;
1: 	}
1: 
0: 	public boolean isHeadNode() {
0: 		return prev.isTailNode();
1: 	}
1: 	
0: 	public boolean isTailNode() {
0: 		return tail;
1: 	}
1: 
1: 	/**
0: 	 * @param rightHead the node to link after this node.
0: 	 * @return this
1: 	 */
0: 	public LinkedNode linkAfter(LinkedNode rightHead) {
1: 		
0: 		if( rightHead == this ) {
0: 			throw new IllegalArgumentException("You cannot link to yourself");
1: 		}
0: 		if( !rightHead.isHeadNode() ) {
0: 			throw new IllegalArgumentException("You only insert nodes that are the first in a list");
1: 		}
1: 
0: 		LinkedNode rightTail = rightHead.prev;
1: 
0: 		if( tail ) {
0: 			tail = false;
0: 		} else {
0: 			rightTail.tail=false;
1: 		}
1: 				
0: 		rightHead.prev = this; // link the head of the right side.
0: 		rightTail.next = next; // link the tail of the right side
0: 		next.prev = rightTail; // link the head of the left side 		
0: 		next = rightHead;	   // link the tail of the left side.
1: 		
0: 		return this;
1: 	}
1: 
1: 	
1: 	/**
0: 	 * @param leftHead the node to link after this node.
0: 	 * @return 
0: 	 * @return this
1: 	 */
0: 	public LinkedNode linkBefore(LinkedNode leftHead) {
1: 		
1: 		
0: 		if( leftHead == this ) {
0: 			throw new IllegalArgumentException("You cannot link to yourself");
1: 		}
0: 		if( !leftHead.isHeadNode() ) {
0: 			throw new IllegalArgumentException("You only insert nodes that are the first in a list");
1: 		}
1: 
0: 		// The left side is no longer going to be a tail..
0: 		LinkedNode leftTail = leftHead.prev;
0: 		leftTail.tail = false;
1: 		
0: 		leftTail.next = this; // link the tail of the left side.		
0: 		leftHead.prev = prev; // link the head of the left side.
0: 		prev.next = leftHead; // link the tail of the right side.
0: 		prev = leftTail;      // link the head of the right side.
1: 		
0: 		return leftHead;
1: 	}
1: 
1: 	/**
0: 	 * Removes this node out of the linked list it is chained in.  
1: 	 */
0: 	public void unlink() {
0: 		// If we are allready unlinked...
0: 		if( prev==this ) {
0: 			return;
1: 		}
1: 		
0: 		if( tail ) {
0: 			prev.tail = true;
1: 		}
1: 		
0: 		// Update the peers links..
0: 		next.prev = prev;
0: 		prev.next = next;
1: 		
0: 		// Update our links..
0: 		next = this;
0: 		prev = this;
0: 		tail=true;
1: 	}
1: 	
1: }
author:Robert Davies
-------------------------------------------------------------------------------
commit:d3ebc9c
/////////////////////////////////////////////////////////////////////////
1:             reset();
/////////////////////////////////////////////////////////////////////////
1:         reset();
0:     }
0:     
1:     public void reset() {
============================================================================