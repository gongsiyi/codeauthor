1:885c379: /**
1:885c379:  * Licensed to the Apache Software Foundation (ASF) under one or more
1:885c379:  * contributor license agreements.  See the NOTICE file distributed with
1:885c379:  * this work for additional information regarding copyright ownership.
1:885c379:  * The ASF licenses this file to You under the Apache License, Version 2.0
1:885c379:  * (the "License"); you may not use this file except in compliance with
1:885c379:  * the License.  You may obtain a copy of the License at
2:885c379:  *
1:230a86c:  *      http://www.apache.org/licenses/LICENSE-2.0
1:885c379:  *
1:885c379:  * Unless required by applicable law or agreed to in writing, software
1:885c379:  * distributed under the License is distributed on an "AS IS" BASIS,
1:885c379:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:885c379:  * See the License for the specific language governing permissions and
1:885c379:  * limitations under the License.
1:885c379:  */
1:885c379: package org.apache.activemq.security;
9:885c379: 
1:885c379: import java.net.URI;
1:206f77a: import java.util.Arrays;
1:885c379: 
1:3a1bdc6: import javax.jms.Connection;
1:041b1b8: import javax.jms.JMSException;
1:f87f562: import javax.jms.JMSSecurityException;
1:041b1b8: import javax.jms.Message;
1:8b3761c: import javax.jms.MessageProducer;
1:3a1bdc6: import javax.jms.Session;
1:3a1bdc6: import javax.jms.TemporaryTopic;
1:3a1bdc6: import javax.management.ObjectName;
1:041b1b8: 
1:885c379: import junit.framework.Test;
1:041b1b8: 
1:8b3761c: import org.apache.activemq.ActiveMQConnection;
1:8b3761c: import org.apache.activemq.ActiveMQConnectionFactory;
1:041b1b8: import org.apache.activemq.CombinationTestSupport;
1:885c379: import org.apache.activemq.broker.BrokerFactory;
1:885c379: import org.apache.activemq.broker.BrokerService;
1:8b3761c: import org.apache.activemq.broker.TransportConnection;
1:8b3761c: import org.apache.activemq.broker.TransportConnectionState;
1:3a1bdc6: import org.apache.activemq.broker.jmx.TopicViewMBean;
1:041b1b8: import org.apache.activemq.command.ActiveMQMessage;
1:041b1b8: import org.apache.activemq.command.ActiveMQQueue;
1:8b3761c: import org.apache.activemq.util.Wait;
1:8bf987b: import org.slf4j.Logger;
1:8bf987b: import org.slf4j.LoggerFactory;
1:885c379: 
1:885c379: public class SimpleAuthenticationPluginTest extends SecurityTestSupport {
1:74a7a8b: 
1:8bf987b:     private static final Logger LOG = LoggerFactory.getLogger(SimpleAuthenticationPluginTest.class);
1:885c379: 
1:885c379:     public static Test suite() {
1:885c379:         return suite(SimpleAuthenticationPluginTest.class);
1:885c379:     }
1:3a1bdc6: 
1:8f19af7:     @Override
1:8f19af7:     protected void setUp() throws Exception {
1:8f19af7:         setAutoFail(true);
1:8f19af7:         super.setUp();
1:8f19af7:     }
1:8f19af7: 
1:885c379:     public static void main(String[] args) {
1:885c379:         junit.textui.TestRunner.run(suite());
1:885c379:     }
1:041b1b8: 
1:8b3761c:     @Override
1:885c379:     protected BrokerService createBroker() throws Exception {
1:885c379:         return createBroker("org/apache/activemq/security/simple-auth-broker.xml");
1:885c379:     }
1:041b1b8: 
1:885c379:     protected BrokerService createBroker(String uri) throws Exception {
1:fc00993:         LOG.info("Loading broker configuration from the classpath with URI: " + uri);
1:885c379:         return BrokerFactory.createBroker(new URI("xbean:" + uri));
1:74a7a8b:     }
1:8f19af7: 
1:041b1b8:     /**
1:041b1b8:      * @see {@link CombinationTestSupport}
1:041b1b8:      */
1:041b1b8:     public void initCombosForTestPredefinedDestinations() {
1:041b1b8:         addCombinationValues("userName", new Object[] {"guest"});
1:041b1b8:         addCombinationValues("password", new Object[] {"password"});
1:041b1b8:         addCombinationValues("destination", new Object[] {new ActiveMQQueue("TEST.Q")});
1:041b1b8:     }
1:8f19af7: 
1:041b1b8:     public void testPredefinedDestinations() throws JMSException {
1:8f19af7:         Message sent = doSend(false);
1:041b1b8:         assertEquals("guest", ((ActiveMQMessage)sent).getUserID());
1:041b1b8:         assertEquals("guest", sent.getStringProperty("JMSXUserID"));
1:041b1b8:     }
1:8f19af7: 
1:3a1bdc6:     public void testTempDestinations() throws Exception {
1:3a1bdc6:         Connection conn = factory.createConnection("guest", "password");
1:3a1bdc6:         Session sess = conn.createSession(false, Session.AUTO_ACKNOWLEDGE);
1:3a1bdc6:         String name = "org.apache.activemq:BrokerName=localhost,Type=TempTopic";
1:3a1bdc6:         try {
1:3a1bdc6:             conn.start();
1:3a1bdc6:             TemporaryTopic temp = sess.createTemporaryTopic();
1:3a1bdc6:             name += ",Destination=" + temp.getTopicName().replaceAll(":", "_");
1:3a1bdc6:             fail("Should have failed creating a temp topic");
1:3a1bdc6:         } catch (Exception ignore) {}
1:8f19af7: 
1:3a1bdc6:         ObjectName objName = new ObjectName(name);
1:3a1bdc6:         TopicViewMBean mbean = (TopicViewMBean)broker.getManagementContext().newProxyInstance(objName, TopicViewMBean.class, true);
1:3a1bdc6:         try {
1:3a1bdc6:             System.out.println(mbean.getName());
1:3a1bdc6:             fail("Shouldn't have created a temp topic");
1:3a1bdc6:         } catch (Exception ignore) {}
1:3a1bdc6:     }
1:3a1bdc6: 
1:f87f562:     public void testConnectionStartThrowsJMSSecurityException() throws Exception {
1:f87f562: 
1:f87f562:         Connection connection = factory.createConnection("badUser", "password");
1:f87f562:         try {
1:f87f562:             connection.start();
1:f87f562:             fail("Should throw JMSSecurityException");
1:f87f562:         } catch (JMSSecurityException jmsEx) {
1:f87f562:         } catch (Exception e) {
1:f87f562:             LOG.info("Expected JMSSecurityException but was: {}", e.getClass());
1:f87f562:             fail("Should throw JMSSecurityException");
1:f87f562:         }
1:f87f562:     }
1:f87f562: 
1:8b3761c:     public void testSecurityContextClearedOnPurge() throws Exception {
1:8b3761c: 
1:8b3761c:         connection.close();
1:8b3761c:         ActiveMQConnectionFactory tcpFactory = new ActiveMQConnectionFactory(broker.getTransportConnectors().get(0).getPublishableConnectString());
1:8b3761c:         ActiveMQConnection conn = (ActiveMQConnection) tcpFactory.createConnection("user", "password");
1:8b3761c:         Session sess = conn.createSession(false, Session.AUTO_ACKNOWLEDGE);
1:8b3761c:         conn.start();
1:8b3761c: 
1:206f77a:         LOG.info("dest list at start:" + Arrays.asList(broker.getRegionBroker().getDestinations()));
1:8b3761c:         final int numDests = broker.getRegionBroker().getDestinations().length;
1:8b3761c:         for (int i=0; i<10; i++) {
1:8b3761c:             MessageProducer p = sess.createProducer(new ActiveMQQueue("USERS.PURGE." + i));
1:8b3761c:             p.close();
1:8b3761c:         }
1:8b3761c: 
1:8b3761c:         assertTrue("dests are purged", Wait.waitFor(new Wait.Condition() {
1:8b3761c:             @Override
1:8b3761c:             public boolean isSatisified() throws Exception {
1:206f77a:                 LOG.info("dest list:" + Arrays.asList(broker.getRegionBroker().getDestinations()));
1:8b3761c:                 LOG.info("dests, orig: " + numDests + ", now: "+ broker.getRegionBroker().getDestinations().length);
1:206f77a:                 return numDests == broker.getRegionBroker().getDestinations().length;
1:8b3761c:             }
1:8b3761c:         }));
1:8b3761c: 
1:8b3761c:         // verify removed from connection security context
1:8b3761c:         TransportConnection brokerConnection = broker.getTransportConnectors().get(0).getConnections().get(0);
1:8b3761c:         TransportConnectionState transportConnectionState = brokerConnection.lookupConnectionState(conn.getConnectionInfo().getConnectionId());
1:8b3761c:         assertEquals("no destinations", 0, transportConnectionState.getContext().getSecurityContext().getAuthorizedWriteDests().size());
1:8b3761c:     }
1:8b3761c: 
1:885c379: }
============================================================================
author:gtully
-------------------------------------------------------------------------------
commit:206f77a
/////////////////////////////////////////////////////////////////////////
1: import java.util.Arrays;
/////////////////////////////////////////////////////////////////////////
1:         LOG.info("dest list at start:" + Arrays.asList(broker.getRegionBroker().getDestinations()));
/////////////////////////////////////////////////////////////////////////
1:                 LOG.info("dest list:" + Arrays.asList(broker.getRegionBroker().getDestinations()));
1:                 return numDests == broker.getRegionBroker().getDestinations().length;
author:Timothy A. Bish
-------------------------------------------------------------------------------
commit:f87f562
/////////////////////////////////////////////////////////////////////////
1: import javax.jms.JMSSecurityException;
/////////////////////////////////////////////////////////////////////////
1:     public void testConnectionStartThrowsJMSSecurityException() throws Exception {
1: 
1:         Connection connection = factory.createConnection("badUser", "password");
1:         try {
1:             connection.start();
1:             fail("Should throw JMSSecurityException");
1:         } catch (JMSSecurityException jmsEx) {
1:         } catch (Exception e) {
1:             LOG.info("Expected JMSSecurityException but was: {}", e.getClass());
1:             fail("Should throw JMSSecurityException");
1:         }
1:     }
1: 
commit:8b3761c
/////////////////////////////////////////////////////////////////////////
1: import javax.jms.MessageProducer;
1: import org.apache.activemq.ActiveMQConnection;
1: import org.apache.activemq.ActiveMQConnectionFactory;
1: import org.apache.activemq.broker.TransportConnection;
1: import org.apache.activemq.broker.TransportConnectionState;
1: import org.apache.activemq.util.Wait;
/////////////////////////////////////////////////////////////////////////
1:     @Override
/////////////////////////////////////////////////////////////////////////
1:     public void testSecurityContextClearedOnPurge() throws Exception {
1: 
1:         connection.close();
1:         ActiveMQConnectionFactory tcpFactory = new ActiveMQConnectionFactory(broker.getTransportConnectors().get(0).getPublishableConnectString());
1:         ActiveMQConnection conn = (ActiveMQConnection) tcpFactory.createConnection("user", "password");
1:         Session sess = conn.createSession(false, Session.AUTO_ACKNOWLEDGE);
1:         conn.start();
1: 
1:         final int numDests = broker.getRegionBroker().getDestinations().length;
1:         for (int i=0; i<10; i++) {
1:             MessageProducer p = sess.createProducer(new ActiveMQQueue("USERS.PURGE." + i));
1:             p.close();
1:         }
1: 
1:         assertTrue("dests are purged", Wait.waitFor(new Wait.Condition() {
1:             @Override
1:             public boolean isSatisified() throws Exception {
1:                 LOG.info("dests, orig: " + numDests + ", now: "+ broker.getRegionBroker().getDestinations().length);
0:                 return (numDests + 1) == broker.getRegionBroker().getDestinations().length;
1:             }
1:         }));
1: 
1:         // verify removed from connection security context
1:         TransportConnection brokerConnection = broker.getTransportConnectors().get(0).getConnections().get(0);
1:         TransportConnectionState transportConnectionState = brokerConnection.lookupConnectionState(conn.getConnectionInfo().getConnectionId());
1:         assertEquals("no destinations", 0, transportConnectionState.getContext().getSecurityContext().getAuthorizedWriteDests().size());
1:     }
1: 
commit:ef24cc9
commit:8f19af7
/////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////
1:     @Override
1:     protected void setUp() throws Exception {
1:         setAutoFail(true);
1:         super.setUp();
1:     }
1: 
/////////////////////////////////////////////////////////////////////////
1: 
/////////////////////////////////////////////////////////////////////////
1: 
1:         Message sent = doSend(false);
1: 
/////////////////////////////////////////////////////////////////////////
1: 
author:Bosanac Dejan
-------------------------------------------------------------------------------
commit:8bf987b
/////////////////////////////////////////////////////////////////////////
1: import org.slf4j.Logger;
1: import org.slf4j.LoggerFactory;
1:     private static final Logger LOG = LoggerFactory.getLogger(SimpleAuthenticationPluginTest.class);
commit:3a1bdc6
/////////////////////////////////////////////////////////////////////////
1: import javax.jms.Connection;
0: import javax.jms.MessageConsumer;
1: import javax.jms.Session;
1: import javax.jms.TemporaryTopic;
1: import javax.management.ObjectName;
1: import org.apache.activemq.broker.jmx.TopicViewMBean;
/////////////////////////////////////////////////////////////////////////
1:     
1:     public void testTempDestinations() throws Exception {
1:         Connection conn = factory.createConnection("guest", "password");
1:         Session sess = conn.createSession(false, Session.AUTO_ACKNOWLEDGE);
1:         String name = "org.apache.activemq:BrokerName=localhost,Type=TempTopic";
1:         try {
1:             conn.start();
1:             TemporaryTopic temp = sess.createTemporaryTopic();
1:             name += ",Destination=" + temp.getTopicName().replaceAll(":", "_");
1:             fail("Should have failed creating a temp topic");
1:         } catch (Exception ignore) {}
1:         
1:         ObjectName objName = new ObjectName(name);
1:         TopicViewMBean mbean = (TopicViewMBean)broker.getManagementContext().newProxyInstance(objName, TopicViewMBean.class, true);
1:         try {
1:             System.out.println(mbean.getName());
1:             fail("Shouldn't have created a temp topic");
1:         } catch (Exception ignore) {}
1:     }
author:Robert Davies
-------------------------------------------------------------------------------
commit:041b1b8
/////////////////////////////////////////////////////////////////////////
1: import javax.jms.JMSException;
1: import javax.jms.Message;
1: 
1: 
1: import org.apache.activemq.CombinationTestSupport;
1: import org.apache.activemq.command.ActiveMQMessage;
1: import org.apache.activemq.command.ActiveMQQueue;
/////////////////////////////////////////////////////////////////////////
1:     
1:     /**
1:      * @see {@link CombinationTestSupport}
1:      */
1:     public void initCombosForTestPredefinedDestinations() {
1:         addCombinationValues("userName", new Object[] {"guest"});
1:         addCombinationValues("password", new Object[] {"password"});
1:         addCombinationValues("destination", new Object[] {new ActiveMQQueue("TEST.Q")});
1:     }
1:     
1:     public void testPredefinedDestinations() throws JMSException {
0:     	Message sent = doSend(false);
1:         assertEquals("guest", ((ActiveMQMessage)sent).getUserID());
1:         assertEquals("guest", sent.getStringProperty("JMSXUserID"));
1:     }
author:Hiram R. Chirino
-------------------------------------------------------------------------------
commit:fc00993
/////////////////////////////////////////////////////////////////////////
0:     private static final Log LOG = LogFactory.getLog(SimpleAuthenticationPluginTest.class);
/////////////////////////////////////////////////////////////////////////
1:         LOG.info("Loading broker configuration from the classpath with URI: " + uri);
commit:74a7a8b
/////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////
1: 
/////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////
1: }
commit:230a86c
/////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////
1:  *      http://www.apache.org/licenses/LICENSE-2.0
commit:885c379
/////////////////////////////////////////////////////////////////////////
1: /**
1:  *
1:  * Licensed to the Apache Software Foundation (ASF) under one or more
1:  * contributor license agreements.  See the NOTICE file distributed with
1:  * this work for additional information regarding copyright ownership.
1:  * The ASF licenses this file to You under the Apache License, Version 2.0
1:  * (the "License"); you may not use this file except in compliance with
1:  * the License.  You may obtain a copy of the License at
1:  *
0:  * http://www.apache.org/licenses/LICENSE-2.0
1:  *
1:  * Unless required by applicable law or agreed to in writing, software
1:  * distributed under the License is distributed on an "AS IS" BASIS,
1:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:  * See the License for the specific language governing permissions and
1:  * limitations under the License.
1:  */
1: package org.apache.activemq.security;
1: 
1: import java.net.URI;
1: 
1: import junit.framework.Test;
1: 
1: import org.apache.activemq.broker.BrokerFactory;
1: import org.apache.activemq.broker.BrokerService;
0: import org.apache.commons.logging.Log;
0: import org.apache.commons.logging.LogFactory;
1: 
1: public class SimpleAuthenticationPluginTest extends SecurityTestSupport {
1: 
0:     private static final Log log = LogFactory.getLog(SimpleAuthenticationPluginTest.class);
1:     
1:     public static Test suite() {
1:         return suite(SimpleAuthenticationPluginTest.class);
1:     }
1: 
1:     public static void main(String[] args) {
1:         junit.textui.TestRunner.run(suite());
1:     }
1: 
1: 
1:     protected BrokerService createBroker() throws Exception {
1:         return createBroker("org/apache/activemq/security/simple-auth-broker.xml");
1:     }
1: 
1:     protected BrokerService createBroker(String uri) throws Exception {
0:         log.info("Loading broker configuration from the classpath with URI: " + uri);
1:         return BrokerFactory.createBroker(new URI("xbean:" + uri));
1:     }
1: 
1: 	
author:Jonas B. Lim
-------------------------------------------------------------------------------
commit:f490982
/////////////////////////////////////////////////////////////////////////
0:     private static final Log log = LogFactory.getLog(SimpleAuthenticationPluginTest.class);
0:         return suite(SimpleAuthenticationPluginTest.class);
commit:9dcd008
/////////////////////////////////////////////////////////////////////////
0: /**
0:  *
0:  * Licensed to the Apache Software Foundation (ASF) under one or more
0:  * contributor license agreements.  See the NOTICE file distributed with
0:  * this work for additional information regarding copyright ownership.
0:  * The ASF licenses this file to You under the Apache License, Version 2.0
0:  * (the "License"); you may not use this file except in compliance with
0:  * the License.  You may obtain a copy of the License at
0:  *
0:  * http://www.apache.org/licenses/LICENSE-2.0
0:  *
0:  * Unless required by applicable law or agreed to in writing, software
0:  * distributed under the License is distributed on an "AS IS" BASIS,
0:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
0:  * See the License for the specific language governing permissions and
0:  * limitations under the License.
0:  */
0: package org.apache.activemq.security;
0: 
0: import java.net.URI;
0: 
0: import junit.framework.Test;
0: 
0: import org.apache.activemq.broker.BrokerFactory;
0: import org.apache.activemq.broker.BrokerService;
0: import org.apache.commons.logging.Log;
0: import org.apache.commons.logging.LogFactory;
0: 
0: public class SimpleAuthenticationPluginTest extends SecurityTestSupport {
0: 
0:     private static final Log log = LogFactory.getLog(XBeanSecurityTest.class);
0:     
0:     public static Test suite() {
0:         return suite(XBeanSecurityTest.class);
0:     }
0: 
0:     public static void main(String[] args) {
0:         junit.textui.TestRunner.run(suite());
0:     }
0: 
0: 
0:     protected BrokerService createBroker() throws Exception {
0:         return createBroker("org/apache/activemq/security/simple-auth-broker.xml");
0:     }
0: 
0:     protected BrokerService createBroker(String uri) throws Exception {
0:         log.info("Loading broker configuration from the classpath with URI: " + uri);
0:         return BrokerFactory.createBroker(new URI("xbean:" + uri));
0:     }
0: 
0: 	
0: }
============================================================================