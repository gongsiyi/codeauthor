1:3713a3b: /**
1:3713a3b:  * Licensed to the Apache Software Foundation (ASF) under one or more
1:3713a3b:  * contributor license agreements.  See the NOTICE file distributed with
1:3713a3b:  * this work for additional information regarding copyright ownership.
1:3713a3b:  * The ASF licenses this file to You under the Apache License, Version 2.0
1:3713a3b:  * (the "License"); you may not use this file except in compliance with
1:3713a3b:  * the License.  You may obtain a copy of the License at
1:3713a3b:  *
1:3713a3b:  *      http://www.apache.org/licenses/LICENSE-2.0
1:3713a3b:  *
1:3713a3b:  * Unless required by applicable law or agreed to in writing, software
1:3713a3b:  * distributed under the License is distributed on an "AS IS" BASIS,
1:3713a3b:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:3713a3b:  * See the License for the specific language governing permissions and
1:3713a3b:  * limitations under the License.
1:3713a3b:  */
1:3713a3b: package org.apache.activemq.transport;
26:3713a3b: 
1:5cf33b5: import java.net.Socket;
1:5cf33b5: import java.net.SocketException;
1:5cf33b5: import java.net.URI;
1:5cf33b5: import java.util.concurrent.TimeUnit;
1:956724e: 
1:5cf33b5: import javax.jms.Connection;
1:5cf33b5: import javax.jms.Destination;
1:5cf33b5: import javax.jms.JMSException;
1:5cf33b5: import javax.jms.MessageConsumer;
1:5cf33b5: import javax.jms.Session;
1:956724e: 
1:3713a3b: import junit.framework.Test;
1:956724e: 
1:3713a3b: import org.apache.activemq.ActiveMQConnectionFactory;
1:3713a3b: import org.apache.activemq.JmsTestSupport;
1:3713a3b: import org.apache.activemq.broker.BrokerService;
1:3713a3b: import org.apache.activemq.command.ActiveMQQueue;
1:70057cb: import org.apache.activemq.store.kahadb.KahaDBPersistenceAdapter;
1:3713a3b: import org.apache.activemq.transport.stomp.Stomp;
1:3713a3b: import org.apache.activemq.transport.stomp.StompConnection;
1:3713a3b: import org.apache.activemq.util.SocketProxy;
1:3713a3b: import org.apache.activemq.util.URISupport;
1:8bf987b: import org.slf4j.Logger;
1:8bf987b: import org.slf4j.LoggerFactory;
1:970a97a: 
1:3713a3b: public class SoWriteTimeoutTest extends JmsTestSupport {
1:8bf987b:     private static final Logger LOG = LoggerFactory.getLogger(SoWriteTimeoutTest.class);
1:970a97a: 
1:3713a3b:     final int receiveBufferSize = 16*1024;
1:5cf33b5:     public String brokerTransportScheme = "nio";
1:970a97a: 
1:3713a3b:     protected BrokerService createBroker() throws Exception {
1:3713a3b:         BrokerService broker = super.createBroker();
1:70057cb:         broker.setPersistent(true);
1:5cf33b5:         broker.setDeleteAllMessagesOnStartup(true);
1:70057cb:         KahaDBPersistenceAdapter adapter = new KahaDBPersistenceAdapter();
1:70057cb:         adapter.setConcurrentStoreAndDispatchQueues(false);
1:70057cb:         broker.setPersistenceAdapter(adapter);
1:5cf33b5:         broker.addConnector(brokerTransportScheme + "://localhost:0?wireFormat.maxInactivityDuration=0&transport.soWriteTimeout=1000&transport.sleep=1000");
1:3713a3b:         if ("nio".equals(brokerTransportScheme)) {
1:3713a3b:             broker.addConnector("stomp+" + brokerTransportScheme + "://localhost:0?transport.soWriteTimeout=1000&transport.sleep=1000&socketBufferSize=" + receiveBufferSize + "&trace=true");
1:3713a3b:         }
1:3713a3b:         return broker;
1:3713a3b:     }
1:970a97a: 
1:3713a3b:     public void initCombosForTestWriteTimeout() {
1:3713a3b:         addCombinationValues("brokerTransportScheme", new Object[]{"tcp", "nio"});
1:3713a3b:     }
1:970a97a: 
1:3713a3b:     public void testWriteTimeout() throws Exception {
1:970a97a: 
1:3713a3b:         Destination dest = new ActiveMQQueue("testWriteTimeout");
1:3713a3b:         messageTextPrefix = initMessagePrefix(8*1024);
1:3713a3b:         sendMessages(dest, 500);
1:970a97a: 
1:3713a3b:         URI tcpBrokerUri = URISupport.removeQuery(broker.getTransportConnectors().get(0).getConnectUri());
1:3713a3b:         LOG.info("consuming using uri: " + tcpBrokerUri);
1:970a97a: 
1:3713a3b:         SocketProxy proxy = new SocketProxy();
1:3713a3b:         proxy.setTarget(tcpBrokerUri);
1:3713a3b:         proxy.setReceiveBufferSize(receiveBufferSize);
1:3713a3b:         proxy.open();
1:970a97a: 
1:3713a3b:         ActiveMQConnectionFactory factory = new ActiveMQConnectionFactory(proxy.getUrl());
1:3713a3b:         Connection c = factory.createConnection();
1:3713a3b:         c.start();
1:3713a3b:         Session session = c.createSession(true, Session.SESSION_TRANSACTED);
1:970a97a:         MessageConsumer consumer = session.createConsumer(dest);
1:3713a3b:         proxy.pause();
1:3713a3b:         // writes should back up... writeTimeout will kick in a abort the connection
1:d554044:         TimeUnit.SECONDS.sleep(10);
1:3713a3b:         proxy.goOn();
1:3713a3b:         assertNotNull("can receive buffered messages", consumer.receive(500));
1:3713a3b:         try {
1:3713a3b:             session.commit();
1:3713a3b:             fail("expect commit to fail as server has aborted writeTimeout connection");
1:3713a3b:         } catch (JMSException expected) {
1:3713a3b:         }
1:3713a3b:     }
1:970a97a: 
1:3713a3b:     public void testWriteTimeoutStompNio() throws Exception {
1:3713a3b:         ActiveMQQueue dest = new ActiveMQQueue("testWriteTimeout");
1:3713a3b:         messageTextPrefix = initMessagePrefix(8*1024);
1:3713a3b:         sendMessages(dest, 500);
1:970a97a: 
1:3713a3b:         URI stompBrokerUri = URISupport.removeQuery(broker.getTransportConnectors().get(1).getConnectUri());
1:3713a3b:         LOG.info("consuming using uri: " + stompBrokerUri);
1:970a97a: 
1:3713a3b:         SocketProxy proxy = new SocketProxy();
1:3713a3b:         proxy.setTarget(new URI("tcp://localhost:" + stompBrokerUri.getPort()));
1:3713a3b:         proxy.setReceiveBufferSize(receiveBufferSize);
1:3713a3b:         proxy.open();
1:970a97a: 
1:3713a3b:         StompConnection stompConnection = new StompConnection();
1:3713a3b:         stompConnection.open(new Socket("localhost", proxy.getUrl().getPort()));
1:970a97a:         stompConnection.getStompSocket().setTcpNoDelay(true);
1:970a97a: 
1:956724e:         String frame = "CONNECT\n" + "login:system\n" + "passcode:manager\n\n" + Stomp.NULL;
1:3713a3b:         stompConnection.sendFrame(frame);
2:3713a3b:         frame = stompConnection.receiveFrame();
1:3713a3b:         assertTrue(frame.startsWith("CONNECTED"));
1:970a97a: 
1:3713a3b:         frame = "SUBSCRIBE\n" + "destination:/queue/" + dest.getQueueName() + "\n" + "ack:client\n\n" + Stomp.NULL;
1:3713a3b:         stompConnection.sendFrame(frame);
1:fc9ad9f:         
1:3713a3b:         proxy.pause();
1:970a97a: 
1:3713a3b:         // writes should back up... writeTimeout will kick in a abort the connection
1:3713a3b:         TimeUnit.SECONDS.sleep(1);
1:3713a3b: 
1:3713a3b:         // see the blocked threads
1:3713a3b:         //dumpAllThreads("blocked on write");
1:970a97a: 
1:3713a3b:         // abort should be done after this
1:588a3c3:         TimeUnit.SECONDS.sleep(10);
1:970a97a: 
1:3713a3b:         proxy.goOn();
1:3713a3b: 
1:3713a3b:         // get a buffered message
1:3713a3b:         frame = stompConnection.receiveFrame();
2:3713a3b:         assertTrue(frame.startsWith("MESSAGE"));
1:970a97a: 
1:3713a3b:         // verify connection is dead
1:3713a3b:         try {
1:970a97a:             for (int i=0; i<200; i++) {
1:588a3c3:                 stompConnection.send("/queue/" + dest.getPhysicalName(),  "ShouldBeDeadConnectionText" + i);
1:3713a3b:             }
1:3713a3b:             fail("expected send to fail with timeout out connection");
1:3713a3b:         } catch (SocketException expected) {
1:3713a3b:             LOG.info("got exception on send after timeout: " + expected);
1:3713a3b:         }
1:3713a3b:     }
1:970a97a: 
1:3713a3b:     private String initMessagePrefix(int i) {
1:3713a3b:         byte[] content = new byte[i];
1:3713a3b:         return new String(content);
1:3713a3b:     }
1:3713a3b: 
1:ace122a:     @Override
1:ace122a:     protected void setUp() throws Exception {
1:ace122a:         setAutoFail(true);
1:ace122a:         super.setUp();
1:ace122a:     }
1:ace122a: 
1:3713a3b:     public static Test suite() {
1:3713a3b:         return suite(SoWriteTimeoutTest.class);
1:3713a3b:     }
1:3713a3b: }
============================================================================
author:gtully
-------------------------------------------------------------------------------
commit:fc9ad9f
/////////////////////////////////////////////////////////////////////////
1:         
author:Timothy A. Bish
-------------------------------------------------------------------------------
commit:ef24cc9
commit:956724e
/////////////////////////////////////////////////////////////////////////
1: 
1: 
1: 
/////////////////////////////////////////////////////////////////////////
1:         String frame = "CONNECT\n" + "login:system\n" + "passcode:manager\n\n" + Stomp.NULL;
commit:970a97a
/////////////////////////////////////////////////////////////////////////
1: 
1: 
/////////////////////////////////////////////////////////////////////////
1: 
1: 
1: 
1: 
1: 
1: 
1:         MessageConsumer consumer = session.createConsumer(dest);
/////////////////////////////////////////////////////////////////////////
1: 
1: 
1: 
1: 
1:         stompConnection.getStompSocket().setTcpNoDelay(true);
1: 
/////////////////////////////////////////////////////////////////////////
1: 
1: 
1: 
1: 
1: 
1: 
1:             for (int i=0; i<200; i++) {
/////////////////////////////////////////////////////////////////////////
1: 
author:Gary Tully
-------------------------------------------------------------------------------
commit:ace122a
/////////////////////////////////////////////////////////////////////////
1:     @Override
1:     protected void setUp() throws Exception {
1:         setAutoFail(true);
1:         super.setUp();
1:     }
1: 
commit:5cf33b5
/////////////////////////////////////////////////////////////////////////
1: import java.net.Socket;
1: import java.net.SocketException;
1: import java.net.URI;
1: import java.util.concurrent.TimeUnit;
1: import javax.jms.Connection;
1: import javax.jms.Destination;
1: import javax.jms.JMSException;
1: import javax.jms.MessageConsumer;
1: import javax.jms.Session;
/////////////////////////////////////////////////////////////////////////
1:     public String brokerTransportScheme = "nio";
1:         broker.setDeleteAllMessagesOnStartup(true);
1:         broker.addConnector(brokerTransportScheme + "://localhost:0?wireFormat.maxInactivityDuration=0&transport.soWriteTimeout=1000&transport.sleep=1000");
/////////////////////////////////////////////////////////////////////////
commit:588a3c3
/////////////////////////////////////////////////////////////////////////
1:         TimeUnit.SECONDS.sleep(10);
/////////////////////////////////////////////////////////////////////////
0:             for (int i=0; i<100; i++) {
1:                 stompConnection.send("/queue/" + dest.getPhysicalName(),  "ShouldBeDeadConnectionText" + i);
commit:d554044
/////////////////////////////////////////////////////////////////////////
1:         TimeUnit.SECONDS.sleep(10);
commit:3713a3b
/////////////////////////////////////////////////////////////////////////
1: /**
1:  * Licensed to the Apache Software Foundation (ASF) under one or more
1:  * contributor license agreements.  See the NOTICE file distributed with
1:  * this work for additional information regarding copyright ownership.
1:  * The ASF licenses this file to You under the Apache License, Version 2.0
1:  * (the "License"); you may not use this file except in compliance with
1:  * the License.  You may obtain a copy of the License at
1:  *
1:  *      http://www.apache.org/licenses/LICENSE-2.0
1:  *
1:  * Unless required by applicable law or agreed to in writing, software
1:  * distributed under the License is distributed on an "AS IS" BASIS,
1:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:  * See the License for the specific language governing permissions and
1:  * limitations under the License.
1:  */
1: package org.apache.activemq.transport;
1: 
0: import java.net.Socket;
0: import java.net.SocketException;
0: import java.net.URI;
0: import java.util.concurrent.TimeUnit;
1: 
0: import javax.jms.Connection;
0: import javax.jms.Destination;
0: import javax.jms.JMSException;
0: import javax.jms.MessageConsumer;
0: import javax.jms.Session;
1: 
1: import junit.framework.Test;
1: 
1: import org.apache.activemq.ActiveMQConnectionFactory;
1: import org.apache.activemq.JmsTestSupport;
1: import org.apache.activemq.broker.BrokerService;
1: import org.apache.activemq.command.ActiveMQQueue;
1: import org.apache.activemq.transport.stomp.Stomp;
1: import org.apache.activemq.transport.stomp.StompConnection;
1: import org.apache.activemq.util.SocketProxy;
1: import org.apache.activemq.util.URISupport;
0: import org.apache.commons.logging.Log;
0: import org.apache.commons.logging.LogFactory;
1: 
1: public class SoWriteTimeoutTest extends JmsTestSupport {
0:     private static final Log LOG = LogFactory.getLog(SoWriteTimeoutTest.class);
1:     
1:     final int receiveBufferSize = 16*1024;
0:     public String brokerTransportScheme = "nio";
1:     
1:     protected BrokerService createBroker() throws Exception {
1:         BrokerService broker = super.createBroker();
0:         broker.addConnector(brokerTransportScheme + "://localhost:0?transport.soWriteTimeout=1000&transport.sleep=1000&socketBufferSize="+ receiveBufferSize);
1:         if ("nio".equals(brokerTransportScheme)) {
1:             broker.addConnector("stomp+" + brokerTransportScheme + "://localhost:0?transport.soWriteTimeout=1000&transport.sleep=1000&socketBufferSize=" + receiveBufferSize + "&trace=true");
1:         }
1:         return broker;
1:     }
1:     
1:     public void initCombosForTestWriteTimeout() {
1:         addCombinationValues("brokerTransportScheme", new Object[]{"tcp", "nio"});
1:     }
1:     
1:     public void testWriteTimeout() throws Exception {
1:         
1:         Destination dest = new ActiveMQQueue("testWriteTimeout");
1:         messageTextPrefix = initMessagePrefix(8*1024);
1:         sendMessages(dest, 500);
1:         
1:         URI tcpBrokerUri = URISupport.removeQuery(broker.getTransportConnectors().get(0).getConnectUri());
1:         LOG.info("consuming using uri: " + tcpBrokerUri);
1:         
1:         SocketProxy proxy = new SocketProxy();
1:         proxy.setTarget(tcpBrokerUri);
1:         proxy.setReceiveBufferSize(receiveBufferSize);
1:         proxy.open();
1:         
1:         ActiveMQConnectionFactory factory = new ActiveMQConnectionFactory(proxy.getUrl());
1:         Connection c = factory.createConnection();
1:         c.start();
1:         Session session = c.createSession(true, Session.SESSION_TRANSACTED);
0:         MessageConsumer consumer = session.createConsumer(dest); 
1:         proxy.pause();
1:         // writes should back up... writeTimeout will kick in a abort the connection
0:         TimeUnit.SECONDS.sleep(4);
1:         proxy.goOn();
1:         assertNotNull("can receive buffered messages", consumer.receive(500));
1:         try {
1:             session.commit();
1:             fail("expect commit to fail as server has aborted writeTimeout connection");
1:         } catch (JMSException expected) {
1:         }
1:     }
1:     
1:     public void testWriteTimeoutStompNio() throws Exception {
1:         ActiveMQQueue dest = new ActiveMQQueue("testWriteTimeout");
1:         messageTextPrefix = initMessagePrefix(8*1024);
1:         sendMessages(dest, 500);
1:         
1:         URI stompBrokerUri = URISupport.removeQuery(broker.getTransportConnectors().get(1).getConnectUri());
1:         LOG.info("consuming using uri: " + stompBrokerUri);
1:         
1:         SocketProxy proxy = new SocketProxy();
1:         proxy.setTarget(new URI("tcp://localhost:" + stompBrokerUri.getPort()));
1:         proxy.setReceiveBufferSize(receiveBufferSize);
1:         proxy.open();
1:         
1:         StompConnection stompConnection = new StompConnection();
1:         stompConnection.open(new Socket("localhost", proxy.getUrl().getPort()));
1:         
0:         String frame = "CONNECT\n" + "login: system\n" + "passcode: manager\n\n" + Stomp.NULL;
1:         stompConnection.sendFrame(frame);
1:         frame = stompConnection.receiveFrame();
1:         assertTrue(frame.startsWith("CONNECTED"));
1: 
1:         frame = "SUBSCRIBE\n" + "destination:/queue/" + dest.getQueueName() + "\n" + "ack:client\n\n" + Stomp.NULL;
1:         stompConnection.sendFrame(frame);
1:         
0:         // ensure dispatch has started before pause
1:         frame = stompConnection.receiveFrame();
1:         assertTrue(frame.startsWith("MESSAGE"));
1:         
1:         proxy.pause();
1:         
1:         // writes should back up... writeTimeout will kick in a abort the connection
1:         TimeUnit.SECONDS.sleep(1);
1: 
1:         // see the blocked threads
1:         //dumpAllThreads("blocked on write");
1:         
1:         // abort should be done after this
0:         TimeUnit.SECONDS.sleep(4);
1: 
1:         proxy.goOn();
1:         
1:         // get a buffered message
1:         frame = stompConnection.receiveFrame();
1:         assertTrue(frame.startsWith("MESSAGE"));
1:         
1:         // verify connection is dead
1:         try {
0:             for (int i=0; i<10; i++) {
0:                 stompConnection.send("/queue/" + dest.getPhysicalName(), messageTextPrefix + "ReplyText" + i);
1:             }
1:             fail("expected send to fail with timeout out connection");
1:         } catch (SocketException expected) {
1:             LOG.info("got exception on send after timeout: " + expected);
1:         }
1:     }
1:     
1:     private String initMessagePrefix(int i) {
1:         byte[] content = new byte[i];
1:         return new String(content);
1:     }
1: 
1:     public static Test suite() {
1:         return suite(SoWriteTimeoutTest.class);
1:     }
1: }
author:Bosanac Dejan
-------------------------------------------------------------------------------
commit:aa8bc42
/////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////
commit:70057cb
/////////////////////////////////////////////////////////////////////////
1: import org.apache.activemq.store.kahadb.KahaDBPersistenceAdapter;
/////////////////////////////////////////////////////////////////////////
0: import javax.jms.*;
0: import java.net.Socket;
0: import java.net.SocketException;
0: import java.net.URI;
0: import java.util.concurrent.ExecutorService;
0: import java.util.concurrent.Executors;
0: import java.util.concurrent.TimeUnit;
0: 
0:     public String brokerTransportScheme = "tcp";
1:         broker.setPersistent(true);
1:         KahaDBPersistenceAdapter adapter = new KahaDBPersistenceAdapter();
1:         adapter.setConcurrentStoreAndDispatchQueues(false);
1:         broker.setPersistenceAdapter(adapter);
0:         broker.addConnector(brokerTransportScheme + "://localhost:0?wireFormat.maxInactivityDuration=0");
/////////////////////////////////////////////////////////////////////////
0:     public void testClientWriteTimeout() throws Exception {
0:         final ActiveMQQueue dest = new ActiveMQQueue("testClientWriteTimeout");
0:         messageTextPrefix = initMessagePrefix(80*1024);
0: 
0:         URI tcpBrokerUri = URISupport.removeQuery(broker.getTransportConnectors().get(0).getConnectUri());
0:         LOG.info("consuming using uri: " + tcpBrokerUri);
0: 
0: 
0:          ActiveMQConnectionFactory factory = new ActiveMQConnectionFactory(tcpBrokerUri);
0:         Connection c = factory.createConnection();
0:         c.start();
0:         Session session = c.createSession(false, Session.AUTO_ACKNOWLEDGE);
0:         MessageConsumer consumer = session.createConsumer(dest);
0: 
0:         SocketProxy proxy = new SocketProxy();
0:         proxy.setTarget(tcpBrokerUri);
0:         proxy.open();
0: 
0:         ActiveMQConnectionFactory pFactory = new ActiveMQConnectionFactory("failover:(" + proxy.getUrl() + "?soWriteTimeout=500)?jms.useAsyncSend=true&trackMessages=true");
0:         final Connection pc = pFactory.createConnection();
0:         pc.start();
0:         System.out.println("Pausing proxy");
0:         proxy.pause();
0: 
0:         final int messageCount = 20;
0:         ExecutorService executorService = Executors.newCachedThreadPool();
0:         executorService.execute(new Runnable() {
0:             @Override
0:             public void run() {
0:                 try {
0:                     System.out.println("sending messages");
0:                     sendMessages(pc, dest, messageCount);
0:                     System.out.println("messages sent");
0:                 } catch (Exception ignored) {
0:                     ignored.printStackTrace();
0:                 }
0:             }
0:         });
0: 
0:         // wait for timeout and reconnect
0:         TimeUnit.SECONDS.sleep(7);
0:         System.out.println("go on");
0:         proxy.goOn();
0:         for (int i=0; i<messageCount; i++) {
0:             assertNotNull("Got message after reconnect", consumer.receive(5000));
0:         }
0:         //broker.getAdminView().get
0:     }
0: 
commit:8bf987b
/////////////////////////////////////////////////////////////////////////
1: import org.slf4j.Logger;
1: import org.slf4j.LoggerFactory;
1:     private static final Logger LOG = LoggerFactory.getLogger(SoWriteTimeoutTest.class);
============================================================================