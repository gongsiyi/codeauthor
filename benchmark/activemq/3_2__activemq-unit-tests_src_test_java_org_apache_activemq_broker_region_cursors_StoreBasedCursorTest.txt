1:7eac1f7: /**
1:7eac1f7:  * Licensed to the Apache Software Foundation (ASF) under one or more
1:7eac1f7:  * contributor license agreements.  See the NOTICE file distributed with
1:7eac1f7:  * this work for additional information regarding copyright ownership.
1:7eac1f7:  * The ASF licenses this file to You under the Apache License, Version 2.0
1:7eac1f7:  * (the "License"); you may not use this file except in compliance with
1:7eac1f7:  * the License.  You may obtain a copy of the License at
1:7eac1f7:  *
1:7eac1f7:  *      http://www.apache.org/licenses/LICENSE-2.0
1:7eac1f7:  *
1:7eac1f7:  * Unless required by applicable law or agreed to in writing, software
1:7eac1f7:  * distributed under the License is distributed on an "AS IS" BASIS,
1:7eac1f7:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:7eac1f7:  * See the License for the specific language governing permissions and
1:7eac1f7:  * limitations under the License.
1:7eac1f7:  */
1:7eac1f7: package org.apache.activemq.broker.region.cursors;
2:7eac1f7: 
1:7eac1f7: /**
1:7eac1f7:  * A StoreBasedCursorTest
1:7eac1f7:  *
1:7eac1f7:  */
1:7eac1f7: 
1:7eac1f7: import java.util.Date;
1:7eac1f7: 
1:7eac1f7: import javax.jms.Connection;
1:7eac1f7: import javax.jms.DeliveryMode;
1:7eac1f7: import javax.jms.MessageProducer;
1:7eac1f7: import javax.jms.Queue;
1:7eac1f7: import javax.jms.Session;
1:7eac1f7: import javax.jms.TextMessage;
1:7eac1f7: 
1:5619cd0: import junit.framework.TestCase;
1:5619cd0: 
1:7eac1f7: import org.apache.activemq.ActiveMQConnectionFactory;
1:7eac1f7: import org.apache.activemq.broker.BrokerService;
1:7eac1f7: import org.apache.activemq.broker.region.policy.PolicyEntry;
1:7eac1f7: import org.apache.activemq.broker.region.policy.PolicyMap;
1:7eac1f7: import org.apache.activemq.usage.SystemUsage;
1:7eac1f7: 
1:7eac1f7: public class StoreBasedCursorTest extends TestCase {
1:7eac1f7:     protected String bindAddress = "tcp://localhost:60706";
1:7eac1f7:     BrokerService broker;
1:5619cd0:     ActiveMQConnectionFactory factory;
1:7eac1f7:     Connection connection;
1:7eac1f7:     Session session;
1:7eac1f7:     Queue queue;
1:7eac1f7:     int messageSize = 1024;
1:5619cd0:     // actual message is messageSize*2, and 4*MessageSize would allow 2 messages be delivered, but the flush of the cache is async so the flush
1:5619cd0:     // triggered on 2nd message maxing out the usage may not be in effect for the 3rd message to succeed. Making the memory usage more lenient
1:5619cd0:     // gives the usageChange listener in the cursor an opportunity to kick in.
1:5619cd0:     int memoryLimit = 12 * messageSize;
1:7eac1f7:     
1:7eac1f7:     protected void setUp() throws Exception {
1:7eac1f7:         super.setUp();
1:7eac1f7:         if (broker == null) {
1:7eac1f7:             broker = new BrokerService();
1:5619cd0:             broker.setAdvisorySupport(false);
1:7eac1f7:         }
1:7eac1f7:     }
1:7eac1f7: 
1:7eac1f7:     protected void tearDown() throws Exception {
1:7eac1f7:         super.tearDown();
1:7eac1f7:         if (broker != null) {
1:7eac1f7:             broker.stop();
1:7eac1f7:             broker = null;
1:7eac1f7:         }
1:7eac1f7:     }
1:7eac1f7:     
1:7eac1f7:     protected void start() throws Exception {
1:7eac1f7:         broker.start();
1:7eac1f7:         factory = new ActiveMQConnectionFactory("vm://localhost?jms.alwaysSyncSend=true");
1:5619cd0:         factory.setWatchTopicAdvisories(false);
1:7eac1f7:         connection = factory.createConnection();
1:7eac1f7:         connection.start();
1:7eac1f7:         session = connection.createSession(false, Session.AUTO_ACKNOWLEDGE);
1:7eac1f7:         queue = session.createQueue("QUEUE." + this.getClass().getName());
1:7eac1f7:     }
1:7eac1f7:     
1:7eac1f7:     protected void stop() throws Exception {
1:7eac1f7:         session.close();
1:7eac1f7:         connection.close();
1:7eac1f7:         broker.stop();
1:7eac1f7:         broker = null;
1:7eac1f7:     }
1:7eac1f7:     
1:7eac1f7:     protected void configureBroker(long memoryLimit, long systemLimit) throws Exception {
1:7eac1f7:         broker.setDeleteAllMessagesOnStartup(true);
1:7eac1f7:         broker.addConnector(bindAddress);
1:7eac1f7:         broker.setPersistent(true);
1:7eac1f7:         
1:7eac1f7:         SystemUsage systemUsage = broker.getSystemUsage();
1:7eac1f7:         systemUsage.setSendFailIfNoSpace(true);
1:7eac1f7:         systemUsage.getMemoryUsage().setLimit(systemLimit);
1:7eac1f7:         
1:7eac1f7:         PolicyEntry policy = new PolicyEntry();
1:09f1564:         policy.setProducerFlowControl(true);
1:09f1564:         policy.setUseCache(true);
1:7eac1f7:         PolicyMap pMap = new PolicyMap();
1:7eac1f7:         pMap.setDefaultEntry(policy);
1:7eac1f7:         broker.setDestinationPolicy(pMap);
1:7eac1f7:     }
1:7eac1f7:     
1:7eac1f7:     protected String createMessageText(int index) {
1:7eac1f7:         StringBuffer buffer = new StringBuffer(messageSize);
1:7eac1f7:         buffer.append("Message: " + index + " sent at: " + new Date());
1:7eac1f7:         if (buffer.length() > messageSize) {
1:7eac1f7:             return buffer.substring(0, messageSize);
1:7eac1f7:         }
1:7eac1f7:         for (int i = buffer.length(); i < messageSize; i++) {
1:7eac1f7:             buffer.append(' ');
1:7eac1f7:         }
1:7eac1f7:         return buffer.toString();
1:7eac1f7:     }
1:7eac1f7:     
1:7eac1f7:     protected void sendMessages(int deliveryMode) throws Exception {
1:7eac1f7:         start();
1:7eac1f7:         MessageProducer producer = session.createProducer(queue);
1:7eac1f7:         producer.setDeliveryMode(deliveryMode);
1:09f1564:         int i =0;
1:7eac1f7:         try {
1:09f1564:             for (i = 0; i < 200; i++) {
1:7eac1f7:                 TextMessage message = session.createTextMessage(createMessageText(i));
1:7eac1f7:                 producer.send(message);
1:7eac1f7:             }
1:7eac1f7:         } catch (javax.jms.ResourceAllocationException e) {
1:09f1564:         	e.printStackTrace();
1:09f1564:             fail(e.getMessage() + " num msgs = " + i + ". percentUsage = " + broker.getSystemUsage().getMemoryUsage().getPercentUsage());
1:7eac1f7:         }
1:7eac1f7:         stop();
1:7eac1f7:     }
1:7eac1f7:     
1:7eac1f7:     // use QueueStorePrefetch
1:7eac1f7:     public void testTwoUsageEqualPersistent() throws Exception {
1:7eac1f7:         configureBroker(memoryLimit, memoryLimit);
1:7eac1f7:         sendMessages(DeliveryMode.PERSISTENT);
1:7eac1f7:     }
1:7eac1f7:     
1:7eac1f7:     public void testUseCachePersistent() throws Exception {
1:09f1564:         int limit = memoryLimit / 2;
1:09f1564:         configureBroker(limit, memoryLimit);
1:7eac1f7:         sendMessages(DeliveryMode.PERSISTENT);
1:7eac1f7:     }
1:7eac1f7:     
1:7eac1f7:     public void testMemoryUsageLowPersistent() throws Exception {
1:7eac1f7:         configureBroker(memoryLimit, 10 * memoryLimit);
1:7eac1f7:         sendMessages(DeliveryMode.PERSISTENT);
1:7eac1f7:     }
1:7eac1f7:     
1:7eac1f7:     // use FilePendingMessageCursor
1:7eac1f7:     public void testTwoUsageEqualNonPersistent() throws Exception {
1:7eac1f7:         configureBroker(memoryLimit, memoryLimit);
1:7eac1f7:         sendMessages(DeliveryMode.NON_PERSISTENT);
1:7eac1f7:     }
1:7eac1f7:     
1:7eac1f7:     public void testMemoryUsageLowNonPersistent() throws Exception {
1:7eac1f7:         configureBroker(memoryLimit, 10 * memoryLimit);
1:7eac1f7:         sendMessages(DeliveryMode.NON_PERSISTENT);
1:7eac1f7:     }
1:7eac1f7: }
============================================================================
author:Timothy A. Bish
-------------------------------------------------------------------------------
commit:ef24cc9
author:Gary Tully
-------------------------------------------------------------------------------
commit:5619cd0
/////////////////////////////////////////////////////////////////////////
1: import junit.framework.TestCase;
1: 
1:     ActiveMQConnectionFactory factory;
1:     // actual message is messageSize*2, and 4*MessageSize would allow 2 messages be delivered, but the flush of the cache is async so the flush
1:     // triggered on 2nd message maxing out the usage may not be in effect for the 3rd message to succeed. Making the memory usage more lenient
1:     // gives the usageChange listener in the cursor an opportunity to kick in.
1:     int memoryLimit = 12 * messageSize;
1:             broker.setAdvisorySupport(false);
/////////////////////////////////////////////////////////////////////////
1:         factory.setWatchTopicAdvisories(false);
author:Robert Davies
-------------------------------------------------------------------------------
commit:09f1564
/////////////////////////////////////////////////////////////////////////
1:         policy.setProducerFlowControl(true);
1:         policy.setUseCache(true);
/////////////////////////////////////////////////////////////////////////
1:         int i =0;
1:             for (i = 0; i < 200; i++) {
1:         	e.printStackTrace();
1:             fail(e.getMessage() + " num msgs = " + i + ". percentUsage = " + broker.getSystemUsage().getMemoryUsage().getPercentUsage());
/////////////////////////////////////////////////////////////////////////
1:         int limit = memoryLimit / 2;
1:         configureBroker(limit, memoryLimit);
commit:7eac1f7
/////////////////////////////////////////////////////////////////////////
1: /**
1:  * Licensed to the Apache Software Foundation (ASF) under one or more
1:  * contributor license agreements.  See the NOTICE file distributed with
1:  * this work for additional information regarding copyright ownership.
1:  * The ASF licenses this file to You under the Apache License, Version 2.0
1:  * (the "License"); you may not use this file except in compliance with
1:  * the License.  You may obtain a copy of the License at
1:  *
1:  *      http://www.apache.org/licenses/LICENSE-2.0
1:  *
1:  * Unless required by applicable law or agreed to in writing, software
1:  * distributed under the License is distributed on an "AS IS" BASIS,
1:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:  * See the License for the specific language governing permissions and
1:  * limitations under the License.
1:  */
1: package org.apache.activemq.broker.region.cursors;
1: 
1: /**
1:  * A StoreBasedCursorTest
1:  *
1:  */
1: 
1: import java.util.Date;
1: 
1: import javax.jms.Connection;
0: import javax.jms.ConnectionFactory;
1: import javax.jms.DeliveryMode;
1: import javax.jms.MessageProducer;
1: import javax.jms.Queue;
1: import javax.jms.Session;
1: import javax.jms.TextMessage;
1: 
1: import org.apache.activemq.ActiveMQConnectionFactory;
1: import org.apache.activemq.broker.BrokerService;
1: import org.apache.activemq.broker.region.policy.PolicyEntry;
1: import org.apache.activemq.broker.region.policy.PolicyMap;
1: import org.apache.activemq.usage.SystemUsage;
1: 
0: import junit.framework.TestCase;
1: 
1: public class StoreBasedCursorTest extends TestCase {
1:     protected String bindAddress = "tcp://localhost:60706";
1:     BrokerService broker;
0:     ConnectionFactory factory;
1:     Connection connection;
1:     Session session;
1:     Queue queue;
1:     int messageSize = 1024;
0:     int memoryLimit = 5 * messageSize;
1:     
1:     protected void setUp() throws Exception {
1:         super.setUp();
1:         if (broker == null) {
1:             broker = new BrokerService();
1:         }
1:     }
1: 
1:     protected void tearDown() throws Exception {
1:         super.tearDown();
1:         if (broker != null) {
1:             broker.stop();
1:             broker = null;
1:         }
1:     }
1:     
1:     protected void start() throws Exception {
1:         broker.start();
1:         factory = new ActiveMQConnectionFactory("vm://localhost?jms.alwaysSyncSend=true");
1:         connection = factory.createConnection();
1:         connection.start();
1:         session = connection.createSession(false, Session.AUTO_ACKNOWLEDGE);
1:         queue = session.createQueue("QUEUE." + this.getClass().getName());
1:     }
1:     
1:     protected void stop() throws Exception {
1:         session.close();
1:         connection.close();
1:         broker.stop();
1:         broker = null;
1:     }
1:     
1:     protected void configureBroker(long memoryLimit, long systemLimit) throws Exception {
1:         broker.setDeleteAllMessagesOnStartup(true);
1:         broker.addConnector(bindAddress);
1:         broker.setPersistent(true);
1:         
1:         SystemUsage systemUsage = broker.getSystemUsage();
1:         systemUsage.setSendFailIfNoSpace(true);
1:         systemUsage.getMemoryUsage().setLimit(systemLimit);
1:         
1:         PolicyEntry policy = new PolicyEntry();
0:         policy.setMemoryLimit(memoryLimit);
1:         PolicyMap pMap = new PolicyMap();
1:         pMap.setDefaultEntry(policy);
1:         broker.setDestinationPolicy(pMap);
1:     }
1:     
1:     protected String createMessageText(int index) {
1:         StringBuffer buffer = new StringBuffer(messageSize);
1:         buffer.append("Message: " + index + " sent at: " + new Date());
1:         if (buffer.length() > messageSize) {
1:             return buffer.substring(0, messageSize);
1:         }
1:         for (int i = buffer.length(); i < messageSize; i++) {
1:             buffer.append(' ');
1:         }
1:         return buffer.toString();
1:     }
1:     
1:     protected void sendMessages(int deliveryMode) throws Exception {
1:         start();
1:         MessageProducer producer = session.createProducer(queue);
1:         producer.setDeliveryMode(deliveryMode);
1:         try {
0:             for (int i = 0; i < 200; i++) {
1:                 TextMessage message = session.createTextMessage(createMessageText(i));
1:                 producer.send(message);
1:             }
1:         } catch (javax.jms.ResourceAllocationException e) {
0:             fail(e.getMessage() + ". percentUsage = " + broker.getSystemUsage().getMemoryUsage().getPercentUsage());
1:         }
1:         stop();
1:     }
1:     
1:     // use QueueStorePrefetch
1:     public void testTwoUsageEqualPersistent() throws Exception {
1:         configureBroker(memoryLimit, memoryLimit);
1:         sendMessages(DeliveryMode.PERSISTENT);
1:     }
1:     
1:     public void testUseCachePersistent() throws Exception {
0:         int limit = memoryLimit / 3;
0:         configureBroker(limit, limit);
1:         sendMessages(DeliveryMode.PERSISTENT);
1:     }
1:     
1:     public void testMemoryUsageLowPersistent() throws Exception {
1:         configureBroker(memoryLimit, 10 * memoryLimit);
1:         sendMessages(DeliveryMode.PERSISTENT);
1:     }
1:     
1:     // use FilePendingMessageCursor
1:     public void testTwoUsageEqualNonPersistent() throws Exception {
1:         configureBroker(memoryLimit, memoryLimit);
1:         sendMessages(DeliveryMode.NON_PERSISTENT);
1:     }
1:     
1:     public void testMemoryUsageLowNonPersistent() throws Exception {
1:         configureBroker(memoryLimit, 10 * memoryLimit);
1:         sendMessages(DeliveryMode.NON_PERSISTENT);
1:     }
1: }
============================================================================