1:d29ca2a: /**
1:57b4941:  * Licensed to the Apache Software Foundation (ASF) under one or more
1:57b4941:  * contributor license agreements.  See the NOTICE file distributed with
1:57b4941:  * this work for additional information regarding copyright ownership.
1:57b4941:  * The ASF licenses this file to You under the Apache License, Version 2.0
1:57b4941:  * (the "License"); you may not use this file except in compliance with
1:57b4941:  * the License.  You may obtain a copy of the License at
1:5be5a62:  *
1:230a86c:  *      http://www.apache.org/licenses/LICENSE-2.0
1:5be5a62:  *
1:5be5a62:  * Unless required by applicable law or agreed to in writing, software
1:5be5a62:  * distributed under the License is distributed on an "AS IS" BASIS,
1:5be5a62:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:5be5a62:  * See the License for the specific language governing permissions and
1:5be5a62:  * limitations under the License.
1:5be5a62:  */
1:d29ca2a: package org.apache.activemq.util;
1:d29ca2a: 
1:391077e: import java.util.List;
1:391077e: import java.util.concurrent.CopyOnWriteArrayList;
1:86cbdfd: import java.util.concurrent.atomic.AtomicBoolean;
1:11be076: 
1:d29ca2a: import org.apache.activemq.Service;
1:8bf987b: import org.slf4j.Logger;
1:8bf987b: import org.slf4j.LoggerFactory;
1:d29ca2a: 
1:d29ca2a: /**
1:74a7a8b:  * A helper class for working with services together with a useful base class
1:74a7a8b:  * for service implementations.
1:b0c2a40:  * 
1:74a7a8b:  * 
1:d29ca2a:  */
1:8704338: public abstract class ServiceSupport implements Service {
1:8bf987b:     private static final Logger LOG = LoggerFactory.getLogger(ServiceSupport.class);
1:d29ca2a: 
1:11be076:     private AtomicBoolean started = new AtomicBoolean(false);
1:436fe42:     private AtomicBoolean stopping = new AtomicBoolean(false);
1:436fe42:     private AtomicBoolean stopped = new AtomicBoolean(false);
1:391077e:     private List<ServiceListener>serviceListeners = new CopyOnWriteArrayList<ServiceListener>();
1:11be076: 
1:d29ca2a:     public static void dispose(Service service) {
1:d29ca2a:         try {
1:d29ca2a:             service.stop();
1:74a7a8b:         } catch (Exception e) {
1:fc00993:             LOG.debug("Could not stop service: " + service + ". Reason: " + e, e);
1:d29ca2a:         }
1:d29ca2a:     }
1:d29ca2a: 
1:11be076:     public void start() throws Exception {
1:11be076:         if (started.compareAndSet(false, true)) {
1:ecc87ea:             boolean success = false;
1:3326ab9:             stopped.set(false);
1:ecc87ea:             try {
1:170b86a:                 preStart();
1:ecc87ea:                 doStart();
1:ecc87ea:                 success = true;
1:ecc87ea:             } finally {
1:ecc87ea:                 started.set(success);
1:d29ca2a:             }
1:391077e:             for(ServiceListener l:this.serviceListeners) {
1:391077e:                 l.started(this);
1:391077e:             }
1:ecc87ea:         }
3:11be076:     }
3:11be076: 
1:d29ca2a:     public void stop() throws Exception {
1:436fe42:         if (stopped.compareAndSet(false, true)) {
1:436fe42:             stopping.set(true);
1:d29ca2a:             ServiceStopper stopper = new ServiceStopper();
1:11be076:             try {
1:11be076:                 doStop(stopper);
1:74a7a8b:             } catch (Exception e) {
1:11be076:                 stopper.onException(this, e);
1:170b86a:             } finally {
1:170b86a:                 postStop(stopper);
1:11be076:             }
1:436fe42:             stopped.set(true);
1:11be076:             started.set(false);
1:436fe42:             stopping.set(false);
1:391077e:             for(ServiceListener l:this.serviceListeners) {
1:391077e:                 l.stopped(this);
1:391077e:             }
1:d29ca2a:             stopper.throwFirstException();
1:d29ca2a:         }
1:d29ca2a:     }
1:d29ca2a: 
1:d29ca2a:     /**
1:11be076:      * @return true if this service has been started
1:d29ca2a:      */
1:11be076:     public boolean isStarted() {
1:11be076:         return started.get();
1:11be076:     }
1:11be076: 
1:11be076:     /**
1:11be076:      * @return true if this service is in the process of closing
1:11be076:      */
1:436fe42:     public boolean isStopping() {
1:436fe42:         return stopping.get();
1:11be076:     }
1:11be076: 
1:11be076:     /**
1:11be076:      * @return true if this service is closed
1:11be076:      */
1:436fe42:     public boolean isStopped() {
1:436fe42:         return stopped.get();
1:11be076:     }
1:391077e:     
1:391077e:     public void addServiceListener(ServiceListener l) {
1:391077e:         this.serviceListeners.add(l);
1:391077e:     }
1:391077e:     
1:391077e:     public void removeServiceListener(ServiceListener l) {
1:391077e:         this.serviceListeners.remove(l);
1:391077e:     }
1:11be076: 
1:170b86a:     /**
1:5be5a62:      *
1:170b86a:      * handle for various operations after stopping the service (like locking)
1:5be5a62:      *
1:170b86a:      * @throws Exception
1:170b86a:      */
1:170b86a:     protected void postStop(ServiceStopper stopper) throws Exception {}
1:170b86a: 
1:11be076:     protected abstract void doStop(ServiceStopper stopper) throws Exception;
1:11be076: 
1:170b86a:     /**
5:d29ca2a:      *
1:170b86a:      * handle for various operations before starting the service (like locking)
1:d29ca2a:      *
1:170b86a:      * @throws Exception
1:170b86a:      */
1:170b86a:     protected void preStart() throws Exception {}
1:170b86a: 
1:11be076:     protected abstract void doStart() throws Exception;
1:11be076: }
============================================================================
author:Hiram R. Chirino
-------------------------------------------------------------------------------
commit:9a8f6e4
commit:b0c2a40
/////////////////////////////////////////////////////////////////////////
1:  * 
commit:fc00993
/////////////////////////////////////////////////////////////////////////
0:     private static final Log LOG = LogFactory.getLog(ServiceSupport.class);
/////////////////////////////////////////////////////////////////////////
1:             LOG.debug("Could not stop service: " + service + ". Reason: " + e, e);
commit:74a7a8b
/////////////////////////////////////////////////////////////////////////
1:  * A helper class for working with services together with a useful base class
1:  * for service implementations.
1:  * 
/////////////////////////////////////////////////////////////////////////
1:         } catch (Exception e) {
/////////////////////////////////////////////////////////////////////////
1:             } catch (Exception e) {
/////////////////////////////////////////////////////////////////////////
commit:230a86c
/////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////
1:  *      http://www.apache.org/licenses/LICENSE-2.0
commit:86cbdfd
/////////////////////////////////////////////////////////////////////////
1: import java.util.concurrent.atomic.AtomicBoolean;
commit:57b4941
/////////////////////////////////////////////////////////////////////////
1:  * Licensed to the Apache Software Foundation (ASF) under one or more
1:  * contributor license agreements.  See the NOTICE file distributed with
1:  * this work for additional information regarding copyright ownership.
1:  * The ASF licenses this file to You under the Apache License, Version 2.0
1:  * (the "License"); you may not use this file except in compliance with
1:  * the License.  You may obtain a copy of the License at
commit:d6c75ee
/////////////////////////////////////////////////////////////////////////
0:             log.debug("Could not stop service: " + service + ". Reason: " + e, e);
commit:5be5a62
/////////////////////////////////////////////////////////////////////////
1:  *
0:  * Copyright 2005-2006 The Apache Software Foundation
1:  *
0:  * Licensed under the Apache License, Version 2.0 (the "License");
0:  * you may not use this file except in compliance with the License.
0:  * You may obtain a copy of the License at
1:  *
0:  * http://www.apache.org/licenses/LICENSE-2.0
1:  *
1:  * Unless required by applicable law or agreed to in writing, software
1:  * distributed under the License is distributed on an "AS IS" BASIS,
1:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:  * See the License for the specific language governing permissions and
1:  * limitations under the License.
1:  */
commit:d29ca2a
/////////////////////////////////////////////////////////////////////////
1: /**
0: * <a href="http://activemq.org">ActiveMQ: The Open Source Message Fabric</a>
1: *
0: * Copyright 2005 (C) LogicBlaze, Inc. http://www.logicblaze.com
1: *
0: * Licensed under the Apache License, Version 2.0 (the "License");
0: * you may not use this file except in compliance with the License.
0: * You may obtain a copy of the License at
1: *
0: * http://www.apache.org/licenses/LICENSE-2.0
1: *
0: * Unless required by applicable law or agreed to in writing, software
0: * distributed under the License is distributed on an "AS IS" BASIS,
0: * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
0: * See the License for the specific language governing permissions and
0: * limitations under the License.
1: *
0: **/
1: package org.apache.activemq.util;
1: 
1: import org.apache.activemq.Service;
0: import org.apache.commons.logging.Log;
0: import org.apache.commons.logging.LogFactory;
1: 
1: /**
0:  * A helper class for working with services
1:  *  
0:  * @version $Revision: 1.1 $
1:  */
0: public abstract class ServiceSupport {
0:     private static final Log log = LogFactory.getLog(ServiceSupport.class);
1: 
1:     public static void dispose(Service service) {
1:         try {
1:             service.stop();
1:         }
0:         catch (Exception e) {
0:             log.error("Could not stop service: " + service + ". Reason: " + e, e);
1:         }
1:     }
1:     
1:     public void stop() throws Exception {
1:         ServiceStopper stopper = new ServiceStopper();
0:         stop(stopper);
1:         stopper.throwFirstException();
1:     }
1: 
1:     /**
0:      * Provides a way for derived classes to stop resources cleanly, handling exceptions
1:      */
0:     protected abstract void stop(ServiceStopper stopper);
1: }
author:Bosanac Dejan
-------------------------------------------------------------------------------
commit:170b86a
/////////////////////////////////////////////////////////////////////////
1:                 preStart();
/////////////////////////////////////////////////////////////////////////
1:             } finally {
1:                 postStop(stopper);
/////////////////////////////////////////////////////////////////////////
1:     /**
0:      *
1:      * handle for various operations after stopping the service (like locking)
0:      *
1:      * @throws Exception
1:      */
1:     protected void postStop(ServiceStopper stopper) throws Exception {}
1: 
1:     /**
0:      *
1:      * handle for various operations before starting the service (like locking)
0:      *
1:      * @throws Exception
1:      */
1:     protected void preStart() throws Exception {}
1: 
commit:3326ab9
/////////////////////////////////////////////////////////////////////////
1:             stopped.set(false);
commit:8bf987b
/////////////////////////////////////////////////////////////////////////
1: import org.slf4j.Logger;
1: import org.slf4j.LoggerFactory;
/////////////////////////////////////////////////////////////////////////
1:     private static final Logger LOG = LoggerFactory.getLogger(ServiceSupport.class);
author:Robert Davies
-------------------------------------------------------------------------------
commit:391077e
/////////////////////////////////////////////////////////////////////////
1: import java.util.List;
1: import java.util.concurrent.CopyOnWriteArrayList;
/////////////////////////////////////////////////////////////////////////
1:     private List<ServiceListener>serviceListeners = new CopyOnWriteArrayList<ServiceListener>();
/////////////////////////////////////////////////////////////////////////
1:             for(ServiceListener l:this.serviceListeners) {
1:                 l.started(this);
1:             }
/////////////////////////////////////////////////////////////////////////
1:             for(ServiceListener l:this.serviceListeners) {
1:                 l.stopped(this);
1:             }
/////////////////////////////////////////////////////////////////////////
1:     
1:     public void addServiceListener(ServiceListener l) {
1:         this.serviceListeners.add(l);
1:     }
1:     
1:     public void removeServiceListener(ServiceListener l) {
1:         this.serviceListeners.remove(l);
1:     }
commit:ecc87ea
/////////////////////////////////////////////////////////////////////////
1:             boolean success = false;
1:             try {
1:                 doStart();
1:                 success = true;
1:             } finally {
1:                 started.set(success);
1:             }
author:James Strachan
-------------------------------------------------------------------------------
commit:8704338
/////////////////////////////////////////////////////////////////////////
1: public abstract class ServiceSupport implements Service {
commit:436fe42
/////////////////////////////////////////////////////////////////////////
1:     private AtomicBoolean stopping = new AtomicBoolean(false);
1:     private AtomicBoolean stopped = new AtomicBoolean(false);
/////////////////////////////////////////////////////////////////////////
1:         if (stopped.compareAndSet(false, true)) {
1:             stopping.set(true);
/////////////////////////////////////////////////////////////////////////
1:             stopped.set(true);
1:             stopping.set(false);
/////////////////////////////////////////////////////////////////////////
1:     public boolean isStopping() {
1:         return stopping.get();
1:     public boolean isStopped() {
1:         return stopped.get();
commit:11be076
/////////////////////////////////////////////////////////////////////////
0: import edu.emory.mathcs.backport.java.util.concurrent.atomic.AtomicBoolean;
1: 
0:  * A helper class for working with services together with a useful base class for service implementations.
0:     private AtomicBoolean closed = new AtomicBoolean(false);
1:     private AtomicBoolean started = new AtomicBoolean(false);
0:     private AtomicBoolean closing = new AtomicBoolean(false);
1: 
/////////////////////////////////////////////////////////////////////////
1: 
1:     public void start() throws Exception {
1:         if (started.compareAndSet(false, true)) {
0:             doStart();
1:         }
1:     }
1: 
0:         if (closed.compareAndSet(false, true)) {
0:             closing.set(true);
0:             ServiceStopper stopper = new ServiceStopper();
1:             try {
1:                 doStop(stopper);
1:             }
0:             catch (Exception e) {
1:                 stopper.onException(this, e);
1:             }
0:             closed.set(true);
1:             started.set(false);
0:             closing.set(false);
0:             stopper.throwFirstException();
1:         }
1:      * @return true if this service has been started
1:     public boolean isStarted() {
1:         return started.get();
1:     }
1: 
1:     /**
1:      * @return true if this service is in the process of closing
1:      */
0:     public boolean isClosing() {
0:         return closing.get();
1:     }
1: 
1:     
1:     /**
1:      * @return true if this service is closed
1:      */
0:     public boolean isClosed() {
0:         return closed.get();
1:     }
1: 
1:     protected abstract void doStop(ServiceStopper stopper) throws Exception;
1: 
1:     protected abstract void doStart() throws Exception;
============================================================================