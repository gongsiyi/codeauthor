1:d29ca2a: /**
1:57b4941:  * Licensed to the Apache Software Foundation (ASF) under one or more
1:57b4941:  * contributor license agreements.  See the NOTICE file distributed with
1:57b4941:  * this work for additional information regarding copyright ownership.
1:57b4941:  * The ASF licenses this file to You under the Apache License, Version 2.0
1:57b4941:  * (the "License"); you may not use this file except in compliance with
1:57b4941:  * the License.  You may obtain a copy of the License at
3:d29ca2a:  *
1:230a86c:  *      http://www.apache.org/licenses/LICENSE-2.0
1:d29ca2a:  *
1:d29ca2a:  * Unless required by applicable law or agreed to in writing, software
1:d29ca2a:  * distributed under the License is distributed on an "AS IS" BASIS,
1:d29ca2a:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:d29ca2a:  * See the License for the specific language governing permissions and
1:d29ca2a:  * limitations under the License.
1:d29ca2a:  */
1:d29ca2a: package org.apache.activemq.transport;
4:d29ca2a: 
1:d29ca2a: import java.net.URI;
1:d29ca2a: import java.net.URISyntaxException;
1:d29ca2a: import java.util.ArrayList;
1:d29ca2a: import java.util.Iterator;
1:d29ca2a: 
1:d29ca2a: import org.apache.activemq.broker.BrokerService;
1:d29ca2a: import org.apache.activemq.broker.BrokerTest;
1:d29ca2a: import org.apache.activemq.broker.StubConnection;
1:d29ca2a: import org.apache.activemq.broker.TransportConnector;
1:d29ca2a: 
1:fc00993: public abstract class TransportBrokerTestSupport extends BrokerTest {
1:d29ca2a: 
1:1096564:     protected TransportConnector connector;
1:933eb2f:     private ArrayList<StubConnection> connections = new ArrayList<StubConnection>();
1:d29ca2a: 
1:0757cdc:     @Override
1:d29ca2a:     protected void setUp() throws Exception {
1:d29ca2a:         super.setUp();
1:d29ca2a:     }
1:d29ca2a: 
1:0757cdc:     @Override
1:d29ca2a:     protected BrokerService createBroker() throws Exception {
1:d29ca2a:         BrokerService service = super.createBroker();
1:d29ca2a:         connector = service.addConnector(getBindLocation());
1:d29ca2a:         return service;
1:d29ca2a:     }
1:0757cdc: 
1:d29ca2a:     protected abstract String getBindLocation();
1:d29ca2a: 
1:0757cdc:     @Override
1:d29ca2a:     protected void tearDown() throws Exception {
1:933eb2f:         for (Iterator<StubConnection> iter = connections.iterator(); iter.hasNext();) {
1:0757cdc:             try {
1:0757cdc:                 StubConnection connection = iter.next();
1:0757cdc:                 connection.stop();
1:0757cdc:                 iter.remove();
1:0757cdc:             } catch (Exception ex) {
1:0757cdc:             }
1:d29ca2a:         }
1:0757cdc: 
1:0757cdc:         if (connector != null) {
1:0757cdc:             try {
1:0757cdc:                 connector.stop();
1:0757cdc:             } catch (Exception ex) {
1:0757cdc:             }
1:1096564:         }
1:0757cdc: 
1:d29ca2a:         super.tearDown();
1:d29ca2a:     }
1:d29ca2a: 
1:d29ca2a:     protected URI getBindURI() throws URISyntaxException {
1:d29ca2a:         return new URI(getBindLocation());
1:d29ca2a:     }
1:d29ca2a: 
1:0757cdc:     @Override
1:d29ca2a:     protected StubConnection createConnection() throws Exception {
1:d29ca2a:         URI bindURI = getBindURI();
1:0757cdc: 
1:d29ca2a:         // Note: on platforms like OS X we cannot bind to the actual hostname, so we
1:0757cdc:         // instead use the original host name (typically localhost) to bind to
1:0757cdc: 
1:d29ca2a:         URI actualURI = connector.getServer().getConnectURI();
1:12838c2:         URI connectURI = new URI(actualURI.getScheme(), actualURI.getUserInfo(), bindURI.getHost(), actualURI.getPort(), actualURI.getPath(), bindURI
1:12838c2:                 .getQuery(), bindURI.getFragment());
1:d29ca2a: 
1:d29ca2a:         Transport transport = TransportFactory.connect(connectURI);
1:d29ca2a:         StubConnection connection = new StubConnection(transport);
1:d29ca2a:         connections.add(connection);
1:d29ca2a:         return connection;
1:d29ca2a:     }
1:d29ca2a: 
1:d29ca2a: }
============================================================================
author:Hadrian Zbarcea
-------------------------------------------------------------------------------
commit:f9bec8f
author:Timothy Bish
-------------------------------------------------------------------------------
commit:0757cdc
/////////////////////////////////////////////////////////////////////////
1:     @Override
1:     @Override
1: 
1:     @Override
1:             try {
1:                 StubConnection connection = iter.next();
1:                 connection.stop();
1:                 iter.remove();
1:             } catch (Exception ex) {
1:             }
1: 
1:         if (connector != null) {
1:             try {
1:                 connector.stop();
1:             } catch (Exception ex) {
1:             }
1: 
/////////////////////////////////////////////////////////////////////////
1:     @Override
1: 
1:         // instead use the original host name (typically localhost) to bind to
1: 
author:Timothy A. Bish
-------------------------------------------------------------------------------
commit:ef24cc9
author:Gary Tully
-------------------------------------------------------------------------------
commit:12838c2
/////////////////////////////////////////////////////////////////////////
1:         URI connectURI = new URI(actualURI.getScheme(), actualURI.getUserInfo(), bindURI.getHost(), actualURI.getPort(), actualURI.getPath(), bindURI
1:                 .getQuery(), bindURI.getFragment());
author:Hiram R. Chirino
-------------------------------------------------------------------------------
commit:1096564
/////////////////////////////////////////////////////////////////////////
1:     protected TransportConnector connector;
/////////////////////////////////////////////////////////////////////////
0:         if( connector!=null ) {
0:             connector.stop();
1:         }
commit:933eb2f
/////////////////////////////////////////////////////////////////////////
1:     private ArrayList<StubConnection> connections = new ArrayList<StubConnection>();
/////////////////////////////////////////////////////////////////////////
1:         for (Iterator<StubConnection> iter = connections.iterator(); iter.hasNext();) {
0:             StubConnection connection = iter.next();
commit:fc00993
/////////////////////////////////////////////////////////////////////////
1: public abstract class TransportBrokerTestSupport extends BrokerTest {
commit:230a86c
/////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////
1:  *      http://www.apache.org/licenses/LICENSE-2.0
/////////////////////////////////////////////////////////////////////////
commit:57b4941
/////////////////////////////////////////////////////////////////////////
1:  * Licensed to the Apache Software Foundation (ASF) under one or more
1:  * contributor license agreements.  See the NOTICE file distributed with
1:  * this work for additional information regarding copyright ownership.
1:  * The ASF licenses this file to You under the Apache License, Version 2.0
1:  * (the "License"); you may not use this file except in compliance with
1:  * the License.  You may obtain a copy of the License at
commit:4e15e1b
/////////////////////////////////////////////////////////////////////////
0:         // instead use the original host name (typically localhost) to bind to 
commit:48b4869
/////////////////////////////////////////////////////////////////////////
0:  * Copyright 2005-2006 The Apache Software Foundation
commit:d29ca2a
/////////////////////////////////////////////////////////////////////////
1: /**
1:  *
0:  * Copyright 2004 The Apache Software Foundation
1:  *
0:  * Licensed under the Apache License, Version 2.0 (the "License");
0:  * you may not use this file except in compliance with the License.
0:  * You may obtain a copy of the License at
1:  *
0:  * http://www.apache.org/licenses/LICENSE-2.0
1:  *
1:  * Unless required by applicable law or agreed to in writing, software
1:  * distributed under the License is distributed on an "AS IS" BASIS,
1:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:  * See the License for the specific language governing permissions and
1:  * limitations under the License.
1:  */
1: package org.apache.activemq.transport;
1: 
1: import java.net.URI;
1: import java.net.URISyntaxException;
1: import java.util.ArrayList;
1: import java.util.Iterator;
1: 
1: import org.apache.activemq.broker.BrokerService;
1: import org.apache.activemq.broker.BrokerTest;
1: import org.apache.activemq.broker.StubConnection;
1: import org.apache.activemq.broker.TransportConnector;
0: import org.apache.activemq.transport.Transport;
0: import org.apache.activemq.transport.TransportFactory;
1: 
0: abstract public class TransportBrokerTestSupport extends BrokerTest {
1: 
0:     private TransportConnector connector;
0:     ArrayList connections = new ArrayList();
1: 
1:     protected void setUp() throws Exception {
1:         super.setUp();
1:     }
1: 
1:     protected BrokerService createBroker() throws Exception {
1:         BrokerService service = super.createBroker();
1:         connector = service.addConnector(getBindLocation());
1:         return service;
1:     }
1:     
1:     protected abstract String getBindLocation();
1: 
1:     protected void tearDown() throws Exception {
0:         for (Iterator iter = connections.iterator(); iter.hasNext();) {
0:             StubConnection connection = (StubConnection) iter.next();
0:             connection.stop();
0:             iter.remove();
1:         }
0:         connector.stop();
1:         super.tearDown();
1:     }
1: 
1:     protected URI getBindURI() throws URISyntaxException {
1:         return new URI(getBindLocation());
1:     }
1: 
1:     protected StubConnection createConnection() throws Exception {
1:         URI bindURI = getBindURI();
1:         
1:         // Note: on platforms like OS X we cannot bind to the actual hostname, so we
0:         // instead use the orignal host name (typically localhost) to bind to 
1:         
1:         URI actualURI = connector.getServer().getConnectURI();
0:         URI connectURI = new URI(actualURI.getScheme(), actualURI.getUserInfo(), bindURI.getHost(), actualURI.getPort(), actualURI.getPath(), actualURI
0:                 .getQuery(), actualURI.getFragment());
1: 
1:         Transport transport = TransportFactory.connect(connectURI);
1:         StubConnection connection = new StubConnection(transport);
1:         connections.add(connection);
1:         return connection;
1:     }
1: 
1: }
============================================================================