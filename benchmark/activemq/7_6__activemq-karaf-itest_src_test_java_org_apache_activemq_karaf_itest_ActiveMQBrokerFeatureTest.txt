1:eff1194: /**
1:eff1194:  * Licensed to the Apache Software Foundation (ASF) under one or more
1:eff1194:  * contributor license agreements.  See the NOTICE file distributed with
1:eff1194:  * this work for additional information regarding copyright ownership.
1:eff1194:  * The ASF licenses this file to You under the Apache License, Version 2.0
1:eff1194:  * (the "License"); you may not use this file except in compliance with
1:eff1194:  * the License.  You may obtain a copy of the License at
1:eff1194:  *
1:eff1194:  *      http://www.apache.org/licenses/LICENSE-2.0
1:eff1194:  *
1:eff1194:  * Unless required by applicable law or agreed to in writing, software
1:eff1194:  * distributed under the License is distributed on an "AS IS" BASIS,
1:eff1194:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:eff1194:  * See the License for the specific language governing permissions and
1:eff1194:  * limitations under the License.
1:eff1194:  */
1:eff1194: package org.apache.activemq.karaf.itest;
1:6bdce73: 
1:50ea308: import static org.junit.Assert.assertEquals;
1:50ea308: import static org.ops4j.pax.exam.CoreOptions.mavenBundle;
1:50ea308: 
1:50ea308: import java.io.IOException;
1:50ea308: import java.net.URI;
1:50ea308: import java.util.concurrent.Callable;
1:50ea308: 
1:50ea308: import org.apache.http.client.CredentialsProvider;
1:50ea308: import org.apache.http.client.methods.CloseableHttpResponse;
1:50ea308: import org.apache.http.client.methods.HttpGet;
1:50ea308: import org.apache.http.client.methods.HttpPost;
1:50ea308: import org.apache.http.client.utils.URIBuilder;
1:50ea308: import org.apache.http.impl.client.BasicCredentialsProvider;
1:50ea308: import org.apache.http.impl.client.CloseableHttpClient;
1:50ea308: import org.apache.http.impl.client.HttpClientBuilder;
1:50ea308: import org.apache.http.util.EntityUtils;
1:eff1194: import org.junit.Test;
1:9743dbd: import org.ops4j.pax.exam.Configuration;
1:50ea308: import org.ops4j.pax.exam.Option;
1:0f492f3: import org.ops4j.pax.exam.options.WrappedUrlProvisionOption;
1:0f492f3: 
1:25f18ad: 
1:50ea308: public class ActiveMQBrokerFeatureTest extends AbstractFeatureTest {
1:50ea308: 	static final String WEB_CONSOLE_URL = "http://localhost:8181/activemqweb/";
1:acf84b4: 
1:eff1194:     @Configuration
1:eff1194:     public static Option[] configure() {
1:4dd3aa4:         return new Option[] //
1:4dd3aa4:         {
1:50ea308:          configure("connector", "activemq-broker"), //
1:50ea308:          // To access web console
1:50ea308:          //mavenBundle("commons-codec", "commons-codec").versionAsInProject(),
1:50ea308:          mavenBundle("org.apache.httpcomponents", "httpcore-osgi").version("4.4.4"),
1:50ea308:          mavenBundle("org.apache.httpcomponents", "httpclient-osgi").version("4.5.2"),
1:4dd3aa4:          configureBrokerStart()
1:4dd3aa4:         };
1:0f492f3:     }
1:0f492f3: 
1:0f492f3:     protected String installWrappedBundle(WrappedUrlProvisionOption option) {
1:0f492f3:         return executeCommand("bundle:install 'wrap:" + option.getURL() + "'");
1:0f492f3:     }
1:0f492f3: 
1:25f18ad:     @Test(timeout=5 * 60 * 1000)
1:75d4b76:     public void test() throws Throwable {
1:50ea308:         assertBrokerStarted();
1:50ea308:         JMSTester jms = new JMSTester();
1:50ea308:         jms.produceAndConsume(sessionFactory);
1:50ea308:         jms.tempSendReceive();
1:50ea308:         jms.close();
1:0f492f3:     }
2:b65fd27: 
1:50ea308:     private void produceMessageWebConsole(String nameAndPayload) throws Exception {
1:50ea308:     	CredentialsProvider credsProvider = new BasicCredentialsProvider();
1:50ea308:         credsProvider.setCredentials(
1:50ea308:                 new org.apache.http.auth.AuthScope("httpbin.org", 80),
1:50ea308:                 new org.apache.http.auth.UsernamePasswordCredentials(KarafShellHelper.USER, KarafShellHelper.PASSWORD));
1:50ea308:     	CloseableHttpClient client = HttpClientBuilder.create() //
1:50ea308:     			.setDefaultCredentialsProvider(credsProvider)
1:50ea308:     			.build();
1:50ea308: 
1:50ea308:         System.err.println(executeCommand("activemq:bstat").trim());
1:50ea308:         System.err.println("attempting to access web console..");
1:50ea308: 
1:50ea308: 		withinReason(new Callable<Boolean>() {
1:50ea308: 			public Boolean call() throws Exception {
1:50ea308: 				CloseableHttpResponse response = client.execute(new HttpGet(WEB_CONSOLE_URL + "index.jsp"));
1:50ea308:                 return response.getStatusLine().getStatusCode() != 200;
1:50ea308: 			}
1:50ea308: 		});
1:50ea308: 
1:50ea308:         System.err.println("attempting publish via web console..");
1:50ea308: 
1:50ea308:         // need to first get the secret
1:50ea308:         CloseableHttpResponse response = client.execute(new HttpGet(WEB_CONSOLE_URL + "send.jsp"));
1:50ea308:         int code = response.getStatusLine().getStatusCode();
1:50ea308:         assertEquals("getting send succeeded", 200, code);
1:50ea308: 
1:50ea308:         String secret = getSecret(EntityUtils.toString(response.getEntity()));
1:50ea308: 
1:50ea308:         URI sendUri = new URIBuilder(WEB_CONSOLE_URL + "sendMessage.action") //
1:50ea308:         		.addParameter("secret", secret) //
1:50ea308:         		.addParameter("JMSText", nameAndPayload)
1:50ea308:         		.addParameter("JMSDestination", nameAndPayload)
1:50ea308:         		.addParameter("JMSDestinationType", "queue")
1:50ea308:         		.build();
1:50ea308:         HttpPost post = new HttpPost(sendUri);
1:50ea308:         CloseableHttpResponse sendResponse = client.execute(post);
1:50ea308:         assertEquals("post succeeded, " + post, 302, sendResponse.getStatusLine().getStatusCode());
1:50ea308:         System.err.println(executeCommand("activemq:bstat").trim());
1:50ea308:     }
1:50ea308: 
1:50ea308: 	private String getSecret(String response) throws IOException {
1:50ea308:         final String secretMarker = "<input type=\"hidden\" name=\"secret\" value=\"";
1:50ea308:         String secret = response.substring(response.indexOf(secretMarker) + secretMarker.length());
1:50ea308:         secret = secret.substring(0, secret.indexOf("\"/>"));
1:50ea308: 		return secret;
1:50ea308: 	}
1:50ea308:     
1:50ea308:     @Test
1:50ea308:     public void testSendReceiveWeb() throws Throwable {
1:50ea308:         assertBrokerStarted();
1:50ea308:         JMSTester jms = new JMSTester();
1:50ea308:         final String nameAndPayload = String.valueOf(System.currentTimeMillis());
1:50ea308:       	produceMessageWebConsole(nameAndPayload);
1:50ea308:         assertEquals("got our message", nameAndPayload, jms.consumeMessage(nameAndPayload));
1:50ea308:         jms.tempSendReceive();
1:50ea308:         jms.close();
1:0f492f3:     }
1:acf84b4: 
1:0f492f3: }
============================================================================
author:Christian Schneider
-------------------------------------------------------------------------------
commit:50ea308
/////////////////////////////////////////////////////////////////////////
1: import static org.junit.Assert.assertEquals;
1: import static org.ops4j.pax.exam.CoreOptions.mavenBundle;
1: 
1: import java.io.IOException;
1: import java.net.URI;
1: import java.util.concurrent.Callable;
1: 
1: import org.apache.http.client.CredentialsProvider;
1: import org.apache.http.client.methods.CloseableHttpResponse;
1: import org.apache.http.client.methods.HttpGet;
1: import org.apache.http.client.methods.HttpPost;
1: import org.apache.http.client.utils.URIBuilder;
1: import org.apache.http.impl.client.BasicCredentialsProvider;
1: import org.apache.http.impl.client.CloseableHttpClient;
1: import org.apache.http.impl.client.HttpClientBuilder;
1: import org.apache.http.util.EntityUtils;
1: import org.ops4j.pax.exam.Option;
1: public class ActiveMQBrokerFeatureTest extends AbstractFeatureTest {
1: 	static final String WEB_CONSOLE_URL = "http://localhost:8181/activemqweb/";
1:          configure("connector", "activemq-broker"), //
1:          // To access web console
1:          //mavenBundle("commons-codec", "commons-codec").versionAsInProject(),
1:          mavenBundle("org.apache.httpcomponents", "httpcore-osgi").version("4.4.4"),
1:          mavenBundle("org.apache.httpcomponents", "httpclient-osgi").version("4.5.2"),
/////////////////////////////////////////////////////////////////////////
1:         assertBrokerStarted();
1:         JMSTester jms = new JMSTester();
1:         jms.produceAndConsume(sessionFactory);
1:         jms.tempSendReceive();
1:         jms.close();
1:     private void produceMessageWebConsole(String nameAndPayload) throws Exception {
1:     	CredentialsProvider credsProvider = new BasicCredentialsProvider();
1:         credsProvider.setCredentials(
1:                 new org.apache.http.auth.AuthScope("httpbin.org", 80),
1:                 new org.apache.http.auth.UsernamePasswordCredentials(KarafShellHelper.USER, KarafShellHelper.PASSWORD));
1:     	CloseableHttpClient client = HttpClientBuilder.create() //
1:     			.setDefaultCredentialsProvider(credsProvider)
1:     			.build();
1: 
1:         System.err.println(executeCommand("activemq:bstat").trim());
1:         System.err.println("attempting to access web console..");
1: 
1: 		withinReason(new Callable<Boolean>() {
1: 			public Boolean call() throws Exception {
1: 				CloseableHttpResponse response = client.execute(new HttpGet(WEB_CONSOLE_URL + "index.jsp"));
1:                 return response.getStatusLine().getStatusCode() != 200;
1: 			}
1: 		});
1: 
1:         System.err.println("attempting publish via web console..");
1: 
1:         // need to first get the secret
1:         CloseableHttpResponse response = client.execute(new HttpGet(WEB_CONSOLE_URL + "send.jsp"));
1:         int code = response.getStatusLine().getStatusCode();
1:         assertEquals("getting send succeeded", 200, code);
1: 
1:         String secret = getSecret(EntityUtils.toString(response.getEntity()));
1: 
1:         URI sendUri = new URIBuilder(WEB_CONSOLE_URL + "sendMessage.action") //
1:         		.addParameter("secret", secret) //
1:         		.addParameter("JMSText", nameAndPayload)
1:         		.addParameter("JMSDestination", nameAndPayload)
1:         		.addParameter("JMSDestinationType", "queue")
1:         		.build();
1:         HttpPost post = new HttpPost(sendUri);
1:         CloseableHttpResponse sendResponse = client.execute(post);
1:         assertEquals("post succeeded, " + post, 302, sendResponse.getStatusLine().getStatusCode());
1:         System.err.println(executeCommand("activemq:bstat").trim());
1:     }
1: 
1: 	private String getSecret(String response) throws IOException {
1:         final String secretMarker = "<input type=\"hidden\" name=\"secret\" value=\"";
1:         String secret = response.substring(response.indexOf(secretMarker) + secretMarker.length());
1:         secret = secret.substring(0, secret.indexOf("\"/>"));
1: 		return secret;
1: 	}
1:     
1:     @Test
1:     public void testSendReceiveWeb() throws Throwable {
1:         assertBrokerStarted();
1:         JMSTester jms = new JMSTester();
1:         final String nameAndPayload = String.valueOf(System.currentTimeMillis());
1:       	produceMessageWebConsole(nameAndPayload);
1:         assertEquals("got our message", nameAndPayload, jms.consumeMessage(nameAndPayload));
1:         jms.tempSendReceive();
1:         jms.close();
commit:4dd3aa4
/////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////
1:         return new Option[] //
1:         {
0:          configure("activemq"), //
1:          configureBrokerStart()
1:         };
/////////////////////////////////////////////////////////////////////////
0:         withinReason(new Runnable() {
0:             public void run() {
/////////////////////////////////////////////////////////////////////////
0:         executeCommand("activemq:bstat").trim();
0:         withinReason(new Runnable() {
0:             public void run() {
commit:b0884f8
/////////////////////////////////////////////////////////////////////////
author:Christopher L. Shannon (cshannon)
-------------------------------------------------------------------------------
commit:0f492f3
/////////////////////////////////////////////////////////////////////////
0: import java.io.File;
0: import java.io.FileInputStream;
0: import java.io.IOException;
0: import java.util.Properties;
0: import org.ops4j.pax.exam.CoreOptions;
1: import org.ops4j.pax.exam.options.WrappedUrlProvisionOption;
/////////////////////////////////////////////////////////////////////////
0:     protected final File file = new File("../../../classes/META-INF/maven/dependencies.properties");
1: 
0:     public final String getArtifactVersion(final String groupId, final String artifactId) {
0:         final Properties dependencies = new Properties();
0:         try (FileInputStream fis = new FileInputStream(file)){
0:             dependencies.load(fis);
0:             final String version = dependencies
0:                 .getProperty(groupId + "/" + artifactId + "/version");
0:             if (version == null) {
0:                 throw new RuntimeException(
0:                     "Could not resolve version. Do you have a dependency for " + groupId + "/"
0:                         + artifactId + " in your maven project?");
1:             }
0:             return version;
1:         }
0:         catch (IOException e) {
0:             throw new RuntimeException("Could not resolve version for groupId:" + groupId
0:                 + " artifactId:" + artifactId
0:                 + " by reading the dependency information generated by maven.", e);
1:         }
1:     }
1: 
1:     protected String installWrappedBundle(WrappedUrlProvisionOption option) {
1:         return executeCommand("bundle:install 'wrap:" + option.getURL() + "'");
1:     }
1: 
author:gtully
-------------------------------------------------------------------------------
commit:25f18ad
/////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////
1:     @Test(timeout=5 * 60 * 1000)
/////////////////////////////////////////////////////////////////////////
0:         executeCommand("activemq:bstat", COMMAND_TIMEOUT, false).trim();
1: 
0:         withinReason(new Callable<Boolean>(){
0:             @Override
0:             public Boolean call() throws Exception {
0:                 assertEquals("JMS_BODY_FIELD:JMSText = " + nameAndPayload, executeCommand("activemq:browse --amqurl tcp://localhost:61616 --user karaf --password karaf -Vbody " + nameAndPayload).trim());
0:                 return true;
0:             }
0:         });
commit:9743dbd
/////////////////////////////////////////////////////////////////////////
1: import org.ops4j.pax.exam.Configuration;
0: import org.ops4j.pax.exam.junit.PaxExam;
0: @RunWith(PaxExam.class)
author:Kevin Earls
-------------------------------------------------------------------------------
commit:b70fc9a
/////////////////////////////////////////////////////////////////////////
0:     @Test(timeout=2 * 60 * 1000)
/////////////////////////////////////////////////////////////////////////
0:     @Test(timeout = 5 * 60 * 1000)
author:Dejan Bosanac
-------------------------------------------------------------------------------
commit:fb684db
/////////////////////////////////////////////////////////////////////////
0:         assertEquals("JMS_BODY_FIELD:JMSText = " + nameAndPayload, executeCommand("activemq:browse --amqurl tcp://localhost:61616 --user karaf --password karaf -Vbody " + nameAndPayload).trim());
commit:ec2a3c7
/////////////////////////////////////////////////////////////////////////
commit:6bdce73
/////////////////////////////////////////////////////////////////////////
1: 
0: import org.junit.Ignore;
/////////////////////////////////////////////////////////////////////////
0:     @Ignore
commit:acf84b4
/////////////////////////////////////////////////////////////////////////
0: import javax.jms.Connection;
0: import javax.jms.Message;
0: import javax.jms.Session;
0: import javax.jms.TemporaryQueue;
1: 
0: import static org.junit.Assert.assertNotNull;
/////////////////////////////////////////////////////////////////////////
0:     @Test
0:     public void testTemporaryDestinations() throws Throwable {
0:         Connection connection = getConnection();
0:         Session session = connection.createSession(false, Session.AUTO_ACKNOWLEDGE);
0:         TemporaryQueue temporaryQueue = session.createTemporaryQueue();
0:         session.createProducer(temporaryQueue).send(session.createTextMessage("TEST"));
0:         Message msg = session.createConsumer(temporaryQueue).receive(3000);
0:         assertNotNull("Didn't receive the message", msg);
0:         connection.close();
0:     }
1: 
author:Gary Tully
-------------------------------------------------------------------------------
commit:14a9381
/////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////
0: public class ActiveMQBrokerFeatureTest extends AbstractJmsFeatureTest {
/////////////////////////////////////////////////////////////////////////
commit:b65fd27
/////////////////////////////////////////////////////////////////////////
1: 
0:         System.err.println(executeCommand("activemq:bstat").trim());
1: 
commit:af5f387
/////////////////////////////////////////////////////////////////////////
0:         return configureBrokerStart(configure("activemq"));
commit:964f8ca
/////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////
0:         produceMessage(nameAndPayload);
0:         assertEquals("got our message", nameAndPayload, consumeMessage(nameAndPayload));
0:     }
0: 
0:     protected String consumeMessage(String nameAndPayload) throws Exception {
0:         ActiveMQConnectionFactory factory = new ActiveMQConnectionFactory();
0:         Connection connection = factory.createConnection(USER,PASSWORD);
0:         connection.start();
0:         Session session = connection.createSession(false, Session.AUTO_ACKNOWLEDGE);
0:         MessageConsumer consumer = session.createConsumer(session.createQueue(nameAndPayload));
0:         TextMessage message = (TextMessage) consumer.receive(4000);
0:         System.err.println("message: " + message);
0:         connection.close();
0:         return message.getText();
0:     }
0: 
0:     protected void produceMessage(String nameAndPayload) throws Exception {
0:         ActiveMQConnectionFactory factory = new ActiveMQConnectionFactory();
0: 
commit:d84e8e1
/////////////////////////////////////////////////////////////////////////
0:         return configureBrokerStart(configure("activemq-broker"));
commit:88beb15
/////////////////////////////////////////////////////////////////////////
0: import javax.jms.Connection;
0: import javax.jms.MessageConsumer;
0: import javax.jms.Session;
0: import javax.jms.TextMessage;
/////////////////////////////////////////////////////////////////////////
0:         withinReason(new Callable<Boolean>() {
/////////////////////////////////////////////////////////////////////////
0:         // produce and consume
0:         final String nameAndPayload = String.valueOf(System.currentTimeMillis());
0:         Connection connection = factory.createConnection(USER,PASSWORD);
0:         connection.start();
0:         Session session = connection.createSession(false, Session.AUTO_ACKNOWLEDGE);
0:         session.createProducer(session.createQueue(nameAndPayload)).send(session.createTextMessage(nameAndPayload));
0: 
0:         MessageConsumer consumer = session.createConsumer(session.createQueue(nameAndPayload));
0:         TextMessage message = (TextMessage) consumer.receive(4000);
0:         System.err.println("message: " + message);
0:         assertEquals("got our message", nameAndPayload, message.getText());
0:         connection.close();
commit:75d4b76
/////////////////////////////////////////////////////////////////////////
0: import java.util.concurrent.Callable;
/////////////////////////////////////////////////////////////////////////
0: import static org.junit.Assert.assertEquals;
0: import static org.junit.Assert.assertTrue;
0: 
/////////////////////////////////////////////////////////////////////////
1:     public void test() throws Throwable {
0:         withinReason(new Callable<Boolean>(){
0:             @Override
0:             public Boolean call() throws Exception {
0:                 assertEquals("brokerName = amq-broker", executeCommand("activemq:list").trim());
0:                 return true;
0:             }
0:         });
0: 
0: 
0:         withinReason(new Callable<Boolean>(){
0:             @Override
0:             public Boolean call() throws Exception {
0:                 assertTrue(executeCommand("activemq:bstat").trim().contains("BrokerName = amq-broker"));
0:                 return true;
0:             }
0:         });
0: 
0:     }
author:Bosanac Dejan
-------------------------------------------------------------------------------
commit:eff1194
/////////////////////////////////////////////////////////////////////////
1: /**
1:  * Licensed to the Apache Software Foundation (ASF) under one or more
1:  * contributor license agreements.  See the NOTICE file distributed with
1:  * this work for additional information regarding copyright ownership.
1:  * The ASF licenses this file to You under the Apache License, Version 2.0
1:  * (the "License"); you may not use this file except in compliance with
1:  * the License.  You may obtain a copy of the License at
1:  *
1:  *      http://www.apache.org/licenses/LICENSE-2.0
1:  *
1:  * Unless required by applicable law or agreed to in writing, software
1:  * distributed under the License is distributed on an "AS IS" BASIS,
1:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:  * See the License for the specific language governing permissions and
1:  * limitations under the License.
1:  */
1: package org.apache.activemq.karaf.itest;
0: 
0: import org.apache.activemq.ActiveMQConnectionFactory;
1: import org.junit.Test;
0: import org.junit.runner.RunWith;
0: import org.ops4j.pax.exam.Option;
0: import org.ops4j.pax.exam.junit.Configuration;
0: import org.ops4j.pax.exam.junit.JUnit4TestRunner;
0: 
0: @RunWith(JUnit4TestRunner.class)
0: public class ActiveMQBrokerFeatureTest extends AbstractFeatureTest {
0: 
1:     @Configuration
1:     public static Option[] configure() {
0:         return configure("activemq-broker");
0:     }
0: 
0:     @Test
0:     public void test() throws Exception {
0:         ActiveMQConnectionFactory factory = new ActiveMQConnectionFactory();
0:         factory.getBrokerURL();
0:     }
0: 
0: }
============================================================================