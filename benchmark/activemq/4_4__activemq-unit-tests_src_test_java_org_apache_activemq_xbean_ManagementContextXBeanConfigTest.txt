1:a33f399: /**
1:57b4941:  * Licensed to the Apache Software Foundation (ASF) under one or more
1:57b4941:  * contributor license agreements.  See the NOTICE file distributed with
1:57b4941:  * this work for additional information regarding copyright ownership.
1:57b4941:  * The ASF licenses this file to You under the Apache License, Version 2.0
1:57b4941:  * (the "License"); you may not use this file except in compliance with
1:57b4941:  * the License.  You may obtain a copy of the License at
1:b0c2a40:  *
1:230a86c:  *      http://www.apache.org/licenses/LICENSE-2.0
5:a33f399:  *
1:a33f399:  * Unless required by applicable law or agreed to in writing, software
1:a33f399:  * distributed under the License is distributed on an "AS IS" BASIS,
1:a33f399:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:a33f399:  * See the License for the specific language governing permissions and
1:a33f399:  * limitations under the License.
1:a33f399:  */
1:a33f399: package org.apache.activemq.xbean;
8:a33f399: 
1:1ec71bd: import java.net.URI;
1:fe3660d: import java.util.HashMap;
1:1ec71bd: import java.util.Hashtable;
1:fe3660d: import java.util.Map;
1:cb7b657: 
1:fe3660d: import javax.management.MBeanServerConnection;
1:fe3660d: import javax.management.MBeanServerInvocationHandler;
1:1ec71bd: import javax.management.ObjectName;
1:fe3660d: import javax.management.remote.JMXConnector;
1:fe3660d: import javax.management.remote.JMXConnectorFactory;
1:fe3660d: import javax.management.remote.JMXServiceURL;
1:4743a20: 
1:1ec71bd: import junit.framework.TestCase;
1:4743a20: 
1:cb7b657: import org.apache.activemq.broker.BrokerFactory;
1:cb7b657: import org.apache.activemq.broker.BrokerService;
1:cb7b657: import org.apache.activemq.broker.jmx.BrokerViewMBean;
1:cb7b657: import org.apache.activemq.util.JMXSupport;
1:8bf987b: import org.slf4j.Logger;
1:8bf987b: import org.slf4j.LoggerFactory;
1:a33f399: 
1:a33f399: /**
1:4743a20:  *
1:a33f399:  */
1:a33f399: public class ManagementContextXBeanConfigTest extends TestCase {
1:a33f399: 
1:a33f399:     protected BrokerService brokerService;
1:8bf987b:     private static final transient Logger LOG = LoggerFactory.getLogger(ManagementContextXBeanConfigTest.class);
1:a33f399: 
1:7f5213b:     public void testManagmentContextConfiguredCorrectly() throws Exception {
1:a33f399:         assertEquals(2011, brokerService.getManagementContext().getConnectorPort());
1:a33f399:         assertEquals("test.domain", brokerService.getManagementContext().getJmxDomainName());
1:a33f399:         // Make sure the broker is registered in the right jmx domain.
1:933eb2f:         Hashtable<String, String> map = new Hashtable<String, String>();
1:cb7b657:         map.put("type", "Broker");
1:cb7b657:         map.put("brokerName", JMXSupport.encodeObjectNamePart("localhost"));
1:a33f399:         ObjectName on = new ObjectName("test.domain", map);
1:1ec71bd:         Object value = brokerService.getManagementContext().getAttribute(on, "TotalEnqueueCount");
1:a33f399:         assertNotNull(value);
1:a33f399:     }
1:230a86c: 
1:fe3660d:     public void testSuccessAuthentication() throws Exception {
1:fe3660d:         JMXServiceURL url = new JMXServiceURL("service:jmx:rmi:///jndi/rmi://localhost:2011/jmxrmi");
1:4743a20:         Map<String, Object> env = new HashMap<String, Object>();
1:fe3660d:         env.put(JMXConnector.CREDENTIALS, new String[]{"admin", "activemq"});
1:fe3660d:         JMXConnector connector = JMXConnectorFactory.connect(url, env);
1:fe3660d:         assertAuthentication(connector);
1:fe3660d:     }
1:230a86c: 
1:fe3660d:     public void testFailAuthentication() throws Exception {
1:fe3660d:         JMXServiceURL url = new JMXServiceURL("service:jmx:rmi:///jndi/rmi://localhost:2011/jmxrmi");
1:fe3660d:         try {
1:fe3660d:             JMXConnector connector = JMXConnectorFactory.connect(url, null);
1:fe3660d:             assertAuthentication(connector);
1:fe3660d:         } catch (SecurityException e) {
1:fe3660d:             return;
1:fe3660d:         }
1:fe3660d:         fail("Should have thrown an exception");
1:fe3660d:     }
1:a33f399: 
1:fe3660d:     public void assertAuthentication(JMXConnector connector) throws Exception {
1:fe3660d:         connector.connect();
1:fe3660d:         MBeanServerConnection connection = connector.getMBeanServerConnection();
1:cb7b657:         ObjectName name = new ObjectName("test.domain:type=Broker,brokerName=localhost");
1:4743a20:         BrokerViewMBean mbean = MBeanServerInvocationHandler
1:fe3660d:                 .newProxyInstance(connection, name, BrokerViewMBean.class, true);
1:fe3660d:         LOG.info("Broker " + mbean.getBrokerId() + " - " + mbean.getBrokerName());
1:fe3660d:     }
1:a33f399: 
1:4743a20:     @Override
1:a33f399:     protected void setUp() throws Exception {
1:a33f399:         brokerService = createBroker();
1:a33f399:         brokerService.start();
1:a33f399:     }
1:a33f399: 
1:4743a20:     @Override
1:a33f399:     protected void tearDown() throws Exception {
1:a33f399:         if (brokerService != null) {
1:a33f399:             brokerService.stop();
1:a33f399:         }
1:a33f399:     }
1:a33f399: 
1:a33f399:     protected BrokerService createBroker() throws Exception {
1:a33f399:         String uri = "org/apache/activemq/xbean/management-context-test.xml";
1:230a86c:         return BrokerFactory.createBroker(new URI("xbean:" + uri));
1:a33f399:     }
1:a33f399: 
1:a33f399: }
============================================================================
author:Timothy A. Bish
-------------------------------------------------------------------------------
commit:4743a20
/////////////////////////////////////////////////////////////////////////
1: 
1: 
/////////////////////////////////////////////////////////////////////////
1:  *
/////////////////////////////////////////////////////////////////////////
1:         Map<String, Object> env = new HashMap<String, Object>();
/////////////////////////////////////////////////////////////////////////
1:         BrokerViewMBean mbean = MBeanServerInvocationHandler
1:     @Override
1:     @Override
commit:ef24cc9
author:Robert Davies
-------------------------------------------------------------------------------
commit:cb7b657
/////////////////////////////////////////////////////////////////////////
1: 
1: import org.apache.activemq.broker.BrokerFactory;
1: import org.apache.activemq.broker.BrokerService;
1: import org.apache.activemq.broker.jmx.BrokerViewMBean;
1: import org.apache.activemq.util.JMXSupport;
/////////////////////////////////////////////////////////////////////////
1:         map.put("type", "Broker");
1:         map.put("brokerName", JMXSupport.encodeObjectNamePart("localhost"));
/////////////////////////////////////////////////////////////////////////
1:         ObjectName name = new ObjectName("test.domain:type=Broker,brokerName=localhost");
commit:1ec71bd
/////////////////////////////////////////////////////////////////////////
1: import java.net.URI;
1: import java.util.Hashtable;
1: import javax.management.ObjectName;
1: import junit.framework.TestCase;
/////////////////////////////////////////////////////////////////////////
1:         Object value = brokerService.getManagementContext().getAttribute(on, "TotalEnqueueCount");
author:Hiram R. Chirino
-------------------------------------------------------------------------------
commit:b0c2a40
/////////////////////////////////////////////////////////////////////////
1:  * 
commit:933eb2f
/////////////////////////////////////////////////////////////////////////
1:         Hashtable<String, String> map = new Hashtable<String, String>();
commit:230a86c
/////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////
1:  *      http://www.apache.org/licenses/LICENSE-2.0
/////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////
1: 
1: 
/////////////////////////////////////////////////////////////////////////
1:         return BrokerFactory.createBroker(new URI("xbean:" + uri));
commit:57b4941
/////////////////////////////////////////////////////////////////////////
1:  * Licensed to the Apache Software Foundation (ASF) under one or more
1:  * contributor license agreements.  See the NOTICE file distributed with
1:  * this work for additional information regarding copyright ownership.
1:  * The ASF licenses this file to You under the Apache License, Version 2.0
1:  * (the "License"); you may not use this file except in compliance with
1:  * the License.  You may obtain a copy of the License at
commit:7f5213b
/////////////////////////////////////////////////////////////////////////
1:     public void testManagmentContextConfiguredCorrectly() throws Exception {
commit:a33f399
/////////////////////////////////////////////////////////////////////////
1: /**
1:  *
0:  * Copyright 2005-2006 The Apache Software Foundation
1:  *
0:  * Licensed under the Apache License, Version 2.0 (the "License");
0:  * you may not use this file except in compliance with the License.
0:  * You may obtain a copy of the License at
1:  *
0:  * http://www.apache.org/licenses/LICENSE-2.0
1:  *
1:  * Unless required by applicable law or agreed to in writing, software
1:  * distributed under the License is distributed on an "AS IS" BASIS,
1:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:  * See the License for the specific language governing permissions and
1:  * limitations under the License.
1:  */
1: package org.apache.activemq.xbean;
1: 
0: import java.net.URI;
0: import java.util.Hashtable;
1: 
0: import javax.management.MBeanServer;
0: import javax.management.ObjectName;
1: 
0: import junit.framework.TestCase;
1: 
0: import org.apache.activemq.broker.BrokerFactory;
0: import org.apache.activemq.broker.BrokerService;
0: import org.apache.activemq.util.JMXSupport;
1: 
1: /**
1:  * 
0:  * @version $Revision: 1.1 $
1:  */
1: public class ManagementContextXBeanConfigTest extends TestCase {
1: 
1:     protected BrokerService brokerService;
1: 
0:     public void testManagmentContextConfiguredCorrectly() throws Throwable {
1: 
1:         assertEquals(2011, brokerService.getManagementContext().getConnectorPort());
1:         assertEquals("test.domain", brokerService.getManagementContext().getJmxDomainName());
1:         
0:         MBeanServer beanServer = brokerService.getManagementContext().getMBeanServer();
1:         
1:         
1:         // Make sure the broker is registered in the right jmx domain.
0:         Hashtable map = new Hashtable();
0:         map.put("Type", "Broker");
0:         map.put("BrokerName", JMXSupport.encodeObjectNamePart("localhost"));
1:         ObjectName on = new ObjectName("test.domain", map);
1: 
0:         Object value = beanServer.getAttribute(on, "TotalEnqueueCount");
1:         assertNotNull(value);
1:     }
1: 
1:     protected void setUp() throws Exception {
1:         brokerService = createBroker();
1:         brokerService.start();
1:     }
1: 
1:     protected void tearDown() throws Exception {
1:         if (brokerService != null) {
1:             brokerService.stop();
1:         }
1:     }
1: 
1:     protected BrokerService createBroker() throws Exception {
1:         String uri = "org/apache/activemq/xbean/management-context-test.xml";
0:         return BrokerFactory.createBroker(new URI("xbean:"+uri));
1:     }
1: 
1: }
author:Bosanac Dejan
-------------------------------------------------------------------------------
commit:8bf987b
/////////////////////////////////////////////////////////////////////////
1: import org.slf4j.Logger;
1: import org.slf4j.LoggerFactory;
/////////////////////////////////////////////////////////////////////////
1:     private static final transient Logger LOG = LoggerFactory.getLogger(ManagementContextXBeanConfigTest.class);
commit:fe3660d
/////////////////////////////////////////////////////////////////////////
0: import org.apache.activemq.broker.jmx.BrokerViewMBean;
1: import java.util.HashMap;
1: import java.util.Map;
1: import javax.management.MBeanServerConnection;
1: import javax.management.MBeanServerInvocationHandler;
1: import javax.management.remote.JMXConnector;
1: import javax.management.remote.JMXConnectorFactory;
1: import javax.management.remote.JMXServiceURL;
0: 
0: import org.apache.commons.logging.Log;
0: import org.apache.commons.logging.LogFactory;
/////////////////////////////////////////////////////////////////////////
0:     private static final transient Log LOG = LogFactory.getLog(ManagementContextXBeanConfigTest.class);
/////////////////////////////////////////////////////////////////////////
1:     public void testSuccessAuthentication() throws Exception {
1:         JMXServiceURL url = new JMXServiceURL("service:jmx:rmi:///jndi/rmi://localhost:2011/jmxrmi");
0:         Map env = new HashMap();
1:         env.put(JMXConnector.CREDENTIALS, new String[]{"admin", "activemq"});
1:         JMXConnector connector = JMXConnectorFactory.connect(url, env);
1:         assertAuthentication(connector);
1:     }
0: 
1:     public void testFailAuthentication() throws Exception {
1:         JMXServiceURL url = new JMXServiceURL("service:jmx:rmi:///jndi/rmi://localhost:2011/jmxrmi");
1:         try {
1:             JMXConnector connector = JMXConnectorFactory.connect(url, null);
1:             assertAuthentication(connector);
1:         } catch (SecurityException e) {
1:             return;
1:         }
1:         fail("Should have thrown an exception");
1:     }
0: 
1:     public void assertAuthentication(JMXConnector connector) throws Exception {
1:         connector.connect();
1:         MBeanServerConnection connection = connector.getMBeanServerConnection();
0:         ObjectName name = new ObjectName("test.domain:BrokerName=localhost,Type=Broker");
0:         BrokerViewMBean mbean = (BrokerViewMBean) MBeanServerInvocationHandler
1:                 .newProxyInstance(connection, name, BrokerViewMBean.class, true);
1:         LOG.info("Broker " + mbean.getBrokerId() + " - " + mbean.getBrokerName());
1:     }
0: 
============================================================================