1:6b4509c: /**
1:6b4509c:  * Licensed to the Apache Software Foundation (ASF) under one or more
1:6b4509c:  * contributor license agreements.  See the NOTICE file distributed with
1:6b4509c:  * this work for additional information regarding copyright ownership.
1:6b4509c:  * The ASF licenses this file to You under the Apache License, Version 2.0
1:6b4509c:  * (the "License"); you may not use this file except in compliance with
1:6b4509c:  * the License.  You may obtain a copy of the License at
1:6b4509c:  *
1:6b4509c:  *      http://www.apache.org/licenses/LICENSE-2.0
1:6b4509c:  *
1:6b4509c:  * Unless required by applicable law or agreed to in writing, software
1:6b4509c:  * distributed under the License is distributed on an "AS IS" BASIS,
1:6b4509c:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:6b4509c:  * See the License for the specific language governing permissions and
1:6b4509c:  * limitations under the License.
1:6b4509c:  */
1:6b4509c: package org.apache.activemq.transport.tcp;
3:6b4509c: 
1:6b4509c: import java.io.IOException;
1:6b4509c: import java.net.URI;
1:6b4509c: import java.net.URISyntaxException;
1:6b4509c: import java.net.UnknownHostException;
1:6b4509c: import java.util.HashMap;
1:6b4509c: import java.util.Map;
1:6b4509c: 
1:6b4509c: import javax.net.ServerSocketFactory;
1:6b4509c: import javax.net.SocketFactory;
1:6b4509c: 
1:6b4509c: import org.apache.activemq.transport.Transport;
1:6b4509c: import org.apache.activemq.transport.TransportServer;
1:6b4509c: import org.apache.activemq.util.IOExceptionSupport;
1:6b4509c: import org.apache.activemq.util.IntrospectionSupport;
1:6b4509c: import org.apache.activemq.util.URISupport;
1:6b4509c: import org.apache.activemq.wireformat.WireFormat;
1:8bf987b: import org.slf4j.Logger;
1:8bf987b: import org.slf4j.LoggerFactory;
1:6b4509c: 
1:6b4509c: /**
1:6b4509c:  * Automatically generated socket.close() calls to simulate network faults
1:6b4509c:  */
1:6b4509c: public class TcpFaultyTransportFactory extends TcpTransportFactory {
1:8bf987b:     private static final Logger LOG = LoggerFactory.getLogger(TcpFaultyTransportFactory.class);
1:6b4509c: 
1:6b4509c:    protected TcpFaultyTransport createTcpFaultyTransport(WireFormat wf, SocketFactory socketFactory, URI location, URI localLocation) throws UnknownHostException, IOException {
1:6b4509c:         return new TcpFaultyTransport(wf, socketFactory, location, localLocation);
1:6b4509c:     }
1:6b4509c: 
1:6b4509c:     protected Transport createTransport(URI location, WireFormat wf) throws UnknownHostException, IOException {
1:6b4509c:         URI localLocation = null;
1:6b4509c:         String path = location.getPath();
1:6b4509c:         // see if the path is a local URI location
1:6b4509c:         if (path != null && path.length() > 0) {
1:6b4509c:             int localPortIndex = path.indexOf(':');
1:6b4509c:             try {
1:6b4509c:                 Integer.parseInt(path.substring(localPortIndex + 1, path.length()));
1:6b4509c:                 String localString = location.getScheme() + ":/" + path;
1:6b4509c:                 localLocation = new URI(localString);
1:6b4509c:             } catch (Exception e) {
1:6b4509c:                 LOG.warn("path isn't a valid local location for TcpTransport to use", e);
1:6b4509c:             }
1:6b4509c:         }
1:6b4509c:         SocketFactory socketFactory = createSocketFactory();
1:6b4509c:         return createTcpFaultyTransport(wf, socketFactory, location, localLocation);
1:6b4509c:     }
1:6b4509c: 
1:6b4509c:     protected TcpFaultyTransportServer createTcpFaultyTransportServer(final URI location, ServerSocketFactory serverSocketFactory) throws IOException, URISyntaxException     {
1:6b4509c:         return new TcpFaultyTransportServer(this, location, serverSocketFactory);
1:6b4509c:     }
1:6b4509c: 
1:6b4509c:     public TransportServer doBind(final URI location) throws IOException {
1:6b4509c:         try {
1:784b93d:             Map<String, String> options = new HashMap<String, String>(URISupport.parseParameters(location));
1:6b4509c: 
1:6b4509c:             ServerSocketFactory serverSocketFactory = createServerSocketFactory();
1:6b4509c:             TcpFaultyTransportServer server = createTcpFaultyTransportServer(location, serverSocketFactory);
1:6b4509c:             server.setWireFormatFactory(createWireFormatFactory(options));
1:6b4509c:             IntrospectionSupport.setProperties(server, options);
1:6b4509c:             Map<String, Object> transportOptions = IntrospectionSupport.extractProperties(options, "transport.");
1:6b4509c:             server.setTransportOption(transportOptions);
1:6b4509c:             server.bind();
1:6b4509c: 
1:6b4509c:             return server;
1:6b4509c:         } catch (URISyntaxException e) {
1:6b4509c:             throw IOExceptionSupport.create(e);
1:6b4509c:         }
1:6b4509c:     }
1:6b4509c: 
1:6b4509c:     
1:6b4509c:     protected SocketFactory createSocketFactory() throws IOException {
1:6b4509c: 	return SocketTstFactory.getDefault();
1:6b4509c:     }
1:6b4509c: 
1:6b4509c:     
1:6b4509c:     protected ServerSocketFactory createServerSocketFactory() throws IOException {
1:6b4509c: 	return ServerSocketTstFactory.getDefault();
1:6b4509c:     }
1:6b4509c: }
============================================================================
author:Hadrian Zbarcea
-------------------------------------------------------------------------------
commit:f9bec8f
author:Timothy A. Bish
-------------------------------------------------------------------------------
commit:ef24cc9
author:Hiram R. Chirino
-------------------------------------------------------------------------------
commit:9a8f6e4
/////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////
author:Bosanac Dejan
-------------------------------------------------------------------------------
commit:8bf987b
/////////////////////////////////////////////////////////////////////////
1: import org.slf4j.Logger;
1: import org.slf4j.LoggerFactory;
/////////////////////////////////////////////////////////////////////////
1:     private static final Logger LOG = LoggerFactory.getLogger(TcpFaultyTransportFactory.class);
commit:784b93d
/////////////////////////////////////////////////////////////////////////
1:             Map<String, String> options = new HashMap<String, String>(URISupport.parseParameters(location));
author:Gary Tully
-------------------------------------------------------------------------------
commit:6b4509c
/////////////////////////////////////////////////////////////////////////
1: /**
1:  * Licensed to the Apache Software Foundation (ASF) under one or more
1:  * contributor license agreements.  See the NOTICE file distributed with
1:  * this work for additional information regarding copyright ownership.
1:  * The ASF licenses this file to You under the Apache License, Version 2.0
1:  * (the "License"); you may not use this file except in compliance with
1:  * the License.  You may obtain a copy of the License at
1:  *
1:  *      http://www.apache.org/licenses/LICENSE-2.0
1:  *
1:  * Unless required by applicable law or agreed to in writing, software
1:  * distributed under the License is distributed on an "AS IS" BASIS,
1:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:  * See the License for the specific language governing permissions and
1:  * limitations under the License.
1:  */
1: package org.apache.activemq.transport.tcp;
1: 
1: import java.io.IOException;
1: import java.net.URI;
1: import java.net.URISyntaxException;
1: import java.net.UnknownHostException;
1: import java.util.HashMap;
1: import java.util.Map;
1: 
1: import javax.net.ServerSocketFactory;
1: import javax.net.SocketFactory;
1: 
0: import org.apache.activemq.openwire.OpenWireFormat;
0: import org.apache.activemq.transport.InactivityMonitor;
1: import org.apache.activemq.transport.Transport;
0: import org.apache.activemq.transport.TransportFactory;
0: import org.apache.activemq.transport.TransportLoggerFactory;
1: import org.apache.activemq.transport.TransportServer;
0: import org.apache.activemq.transport.WireFormatNegotiator;
1: import org.apache.activemq.util.IOExceptionSupport;
1: import org.apache.activemq.util.IntrospectionSupport;
1: import org.apache.activemq.util.URISupport;
1: import org.apache.activemq.wireformat.WireFormat;
0: import org.apache.commons.logging.Log;
0: import org.apache.commons.logging.LogFactory;
1: 
0: import java.net.Socket;
0: import java.net.ServerSocket;
0: import java.net.InetAddress;
1: 
0: import org.apache.activemq.transport.tcp.ServerSocketTstFactory;
1: 
1: /**
1:  * Automatically generated socket.close() calls to simulate network faults
1:  */
1: public class TcpFaultyTransportFactory extends TcpTransportFactory {
0:     private static final Log LOG = LogFactory.getLog(TcpFaultyTransportFactory.class);
1: 
1:    protected TcpFaultyTransport createTcpFaultyTransport(WireFormat wf, SocketFactory socketFactory, URI location, URI localLocation) throws UnknownHostException, IOException {
1:         return new TcpFaultyTransport(wf, socketFactory, location, localLocation);
1:     }
1: 
1:     protected Transport createTransport(URI location, WireFormat wf) throws UnknownHostException, IOException {
1:         URI localLocation = null;
1:         String path = location.getPath();
1:         // see if the path is a local URI location
1:         if (path != null && path.length() > 0) {
1:             int localPortIndex = path.indexOf(':');
1:             try {
1:                 Integer.parseInt(path.substring(localPortIndex + 1, path.length()));
1:                 String localString = location.getScheme() + ":/" + path;
1:                 localLocation = new URI(localString);
1:             } catch (Exception e) {
1:                 LOG.warn("path isn't a valid local location for TcpTransport to use", e);
1:             }
1:         }
1:         SocketFactory socketFactory = createSocketFactory();
1:         return createTcpFaultyTransport(wf, socketFactory, location, localLocation);
1:     }
1: 
1:     protected TcpFaultyTransportServer createTcpFaultyTransportServer(final URI location, ServerSocketFactory serverSocketFactory) throws IOException, URISyntaxException     {
1:         return new TcpFaultyTransportServer(this, location, serverSocketFactory);
1:     }
1: 
1:     public TransportServer doBind(final URI location) throws IOException {
1:         try {
0:             Map<String, String> options = new HashMap<String, String>(URISupport.parseParamters(location));
1: 
1:             ServerSocketFactory serverSocketFactory = createServerSocketFactory();
1:             TcpFaultyTransportServer server = createTcpFaultyTransportServer(location, serverSocketFactory);
1:             server.setWireFormatFactory(createWireFormatFactory(options));
1:             IntrospectionSupport.setProperties(server, options);
1:             Map<String, Object> transportOptions = IntrospectionSupport.extractProperties(options, "transport.");
1:             server.setTransportOption(transportOptions);
1:             server.bind();
1: 
1:             return server;
1:         } catch (URISyntaxException e) {
1:             throw IOExceptionSupport.create(e);
1:         }
1:     }
1: 
1:     
1:     protected SocketFactory createSocketFactory() throws IOException {
1: 	return SocketTstFactory.getDefault();
1:     }
1: 
1:     
1:     protected ServerSocketFactory createServerSocketFactory() throws IOException {
1: 	return ServerSocketTstFactory.getDefault();
1:     }
1: }
============================================================================