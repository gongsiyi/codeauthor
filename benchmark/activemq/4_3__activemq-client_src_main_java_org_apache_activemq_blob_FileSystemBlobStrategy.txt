1:9d4f30c: /**
1:9d4f30c:  * Licensed to the Apache Software Foundation (ASF) under one or more
1:9d4f30c:  * contributor license agreements.  See the NOTICE file distributed with
1:9d4f30c:  * this work for additional information regarding copyright ownership.
1:9d4f30c:  * The ASF licenses this file to You under the Apache License, Version 2.0
1:9d4f30c:  * (the "License"); you may not use this file except in compliance with
1:9d4f30c:  * the License.  You may obtain a copy of the License at
3:9d4f30c:  *
1:9d4f30c:  *      http://www.apache.org/licenses/LICENSE-2.0
1:9d4f30c:  *
1:9d4f30c:  * Unless required by applicable law or agreed to in writing, software
1:9d4f30c:  * distributed under the License is distributed on an "AS IS" BASIS,
1:9d4f30c:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:9d4f30c:  * See the License for the specific language governing permissions and
1:9d4f30c:  * limitations under the License.
1:9d4f30c:  */
1:9d4f30c: package org.apache.activemq.blob;
7:9d4f30c: 
1:9d4f30c: import java.io.File;
1:9d4f30c: import java.io.FileInputStream;
1:9d4f30c: import java.io.FileOutputStream;
1:9d4f30c: import java.io.IOException;
1:9d4f30c: import java.io.InputStream;
1:9d4f30c: import java.net.MalformedURLException;
1:9d4f30c: import java.net.URISyntaxException;
1:9d4f30c: import java.net.URL;
1:9d4f30c: 
1:9d4f30c: import javax.jms.JMSException;
1:9d4f30c: 
1:9d4f30c: import org.apache.activemq.command.ActiveMQBlobMessage;
1:9d4f30c: 
1:9d4f30c: /**
1:9d4f30c:  * {@link BlobUploadStrategy} and {@link BlobDownloadStrategy} implementation which use the local filesystem for storing
1:9d4f30c:  * the payload
1:9d4f30c:  *
1:9d4f30c:  */
1:9d4f30c: public class FileSystemBlobStrategy implements BlobUploadStrategy, BlobDownloadStrategy{
1:12b26b6: 
1:9d4f30c: 
1:9d4f30c:     private final BlobTransferPolicy policy;
1:9d4f30c:     private File rootFile;
1:12b26b6: 
1:9d4f30c:     public FileSystemBlobStrategy(final BlobTransferPolicy policy) throws MalformedURLException, URISyntaxException  {
1:9d4f30c:         this.policy = policy;
1:12b26b6: 
1:9d4f30c:         createRootFolder();
1:9d4f30c:     }
1:12b26b6: 
1:9d4f30c:     /**
1:12b26b6:      * Create the root folder if not exist
1:12b26b6:      *
1:9d4f30c:      * @throws MalformedURLException
1:9d4f30c:      * @throws URISyntaxException
1:9d4f30c:      */
1:9d4f30c:     protected void createRootFolder() throws MalformedURLException, URISyntaxException {
1:9d4f30c:         rootFile = new File(new URL(policy.getUploadUrl()).toURI());
1:9d4f30c:         if (rootFile.exists() == false) {
1:9d4f30c:             rootFile.mkdirs();
1:9d4f30c:         } else if (rootFile.isDirectory() == false) {
1:9d4f30c:             throw new IllegalArgumentException("Given url is not a directory " + rootFile );
1:9d4f30c:         }
1:9d4f30c:     }
1:9d4f30c:     /*
1:9d4f30c:      * (non-Javadoc)
1:9d4f30c:      * @see org.apache.activemq.blob.BlobUploadStrategy#uploadFile(org.apache.activemq.command.ActiveMQBlobMessage, java.io.File)
1:9d4f30c:      */
1:9d4f30c:     public URL uploadFile(ActiveMQBlobMessage message, File file) throws JMSException, IOException {
1:12b26b6:         try(FileInputStream fis = new FileInputStream(file)) {
1:12b26b6:             return uploadStream(message, fis);
1:12b26b6:         }
1:9d4f30c:     }
1:9d4f30c: 
1:9d4f30c:     /*
1:9d4f30c:      * (non-Javadoc)
1:9d4f30c:      * @see org.apache.activemq.blob.BlobUploadStrategy#uploadStream(org.apache.activemq.command.ActiveMQBlobMessage, java.io.InputStream)
1:9d4f30c:      */
1:9d4f30c:     public URL uploadStream(ActiveMQBlobMessage message, InputStream in) throws JMSException, IOException {
1:9d4f30c:         File f = getFile(message);
1:12b26b6:         try(FileOutputStream out = new FileOutputStream(f)) {
1:12b26b6:             byte[] buffer = new byte[policy.getBufferSize()];
1:12b26b6:             for (int c = in.read(buffer); c != -1; c = in.read(buffer)) {
1:12b26b6:                 out.write(buffer, 0, c);
1:12b26b6:                 out.flush();
1:12b26b6:             }
1:9d4f30c:         }
1:9d4f30c:         // File.toURL() is deprecated
1:9d4f30c:         return f.toURI().toURL();
1:9d4f30c:     }
1:9d4f30c: 
1:9d4f30c:     /*
1:9d4f30c:      * (non-Javadoc)
1:9d4f30c:      * @see org.apache.activemq.blob.BlobDownloadStrategy#deleteFile(org.apache.activemq.command.ActiveMQBlobMessage)
1:9d4f30c:      */
1:9d4f30c:     public void deleteFile(ActiveMQBlobMessage message) throws IOException, JMSException {
1:9d4f30c:         File f = getFile(message);
1:9d4f30c:         if (f.exists()) {
1:9d4f30c:             if (f.delete() == false) throw new IOException("Unable to delete file " + f);
1:9d4f30c:         }
1:9d4f30c:     }
1:9d4f30c: 
1:9d4f30c:     /**
1:9d4f30c:      * Returns a {@link FileInputStream} for the give {@link ActiveMQBlobMessage}
1:9d4f30c:      */
1:9d4f30c:     public InputStream getInputStream(ActiveMQBlobMessage message) throws IOException, JMSException {
1:9d4f30c:         return new FileInputStream(getFile(message));
1:9d4f30c:     }
1:12b26b6: 
1:9d4f30c: 
1:9d4f30c:     /**
1:12b26b6:      * Return the {@link File} for the {@link ActiveMQBlobMessage}.
1:12b26b6:      *
1:9d4f30c:      * @param message
1:9d4f30c:      * @return file
1:9d4f30c:      * @throws JMSException
1:12b26b6:      * @throws IOException
1:9d4f30c:      */
1:9d4f30c:     protected File getFile(ActiveMQBlobMessage message) throws JMSException, IOException {
1:9d4f30c:     	if (message.getURL() != null) {
1:9d4f30c:     		try {
1:9d4f30c: 				return new File(message.getURL().toURI());
1:9d4f30c: 			} catch (URISyntaxException e) {
1:fa6d939:                                 IOException ioe = new IOException("Unable to open file for message " + message);
1:fa6d939:                                 ioe.initCause(e);
1:9d4f30c: 			}
1:9d4f30c:     	}
1:9d4f30c:         //replace all : with _ to make windows more happy
1:12b26b6:         String fileName = message.getJMSMessageID().replaceAll(":", "_");
1:12b26b6:         return new File(rootFile, fileName);
1:12b26b6: 
1:9d4f30c:     }
1:9d4f30c: }
============================================================================
author:Christopher L. Shannon (cshannon)
-------------------------------------------------------------------------------
commit:12b26b6
/////////////////////////////////////////////////////////////////////////
1: 
1: 
1: 
1: 
1:      * Create the root folder if not exist
1:      *
/////////////////////////////////////////////////////////////////////////
1:         try(FileInputStream fis = new FileInputStream(file)) {
1:             return uploadStream(message, fis);
1:         }
/////////////////////////////////////////////////////////////////////////
1:         try(FileOutputStream out = new FileOutputStream(f)) {
1:             byte[] buffer = new byte[policy.getBufferSize()];
1:             for (int c = in.read(buffer); c != -1; c = in.read(buffer)) {
1:                 out.write(buffer, 0, c);
1:                 out.flush();
1:             }
/////////////////////////////////////////////////////////////////////////
1: 
1:      * Return the {@link File} for the {@link ActiveMQBlobMessage}.
1:      *
1:      * @throws IOException
/////////////////////////////////////////////////////////////////////////
1:         String fileName = message.getJMSMessageID().replaceAll(":", "_");
1:         return new File(rootFile, fileName);
1: 
author:Hiram R. Chirino
-------------------------------------------------------------------------------
commit:9a8f6e4
author:Gary Tully
-------------------------------------------------------------------------------
commit:fa6d939
/////////////////////////////////////////////////////////////////////////
1:                                 IOException ioe = new IOException("Unable to open file for message " + message);
1:                                 ioe.initCause(e);
author:Bosanac Dejan
-------------------------------------------------------------------------------
commit:9d4f30c
/////////////////////////////////////////////////////////////////////////
1: /**
1:  * Licensed to the Apache Software Foundation (ASF) under one or more
1:  * contributor license agreements.  See the NOTICE file distributed with
1:  * this work for additional information regarding copyright ownership.
1:  * The ASF licenses this file to You under the Apache License, Version 2.0
1:  * (the "License"); you may not use this file except in compliance with
1:  * the License.  You may obtain a copy of the License at
1:  *
1:  *      http://www.apache.org/licenses/LICENSE-2.0
1:  *
1:  * Unless required by applicable law or agreed to in writing, software
1:  * distributed under the License is distributed on an "AS IS" BASIS,
1:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:  * See the License for the specific language governing permissions and
1:  * limitations under the License.
1:  */
1: package org.apache.activemq.blob;
1: 
1: import java.io.File;
1: import java.io.FileInputStream;
1: import java.io.FileOutputStream;
1: import java.io.IOException;
1: import java.io.InputStream;
1: import java.net.MalformedURLException;
1: import java.net.URISyntaxException;
1: import java.net.URL;
1: 
1: import javax.jms.JMSException;
1: 
1: import org.apache.activemq.command.ActiveMQBlobMessage;
1: 
1: /**
1:  * {@link BlobUploadStrategy} and {@link BlobDownloadStrategy} implementation which use the local filesystem for storing
1:  * the payload
1:  *
1:  */
1: public class FileSystemBlobStrategy implements BlobUploadStrategy, BlobDownloadStrategy{
1: 
1:    
1:     private final BlobTransferPolicy policy;
1:     private File rootFile;
1:     
1:     public FileSystemBlobStrategy(final BlobTransferPolicy policy) throws MalformedURLException, URISyntaxException  {
1:         this.policy = policy;
1:         
1:         createRootFolder();
1:     }
1:     
1:     /**
0:      * Create the root folder if not exist 
1:      * 
1:      * @throws MalformedURLException
1:      * @throws URISyntaxException
1:      */
1:     protected void createRootFolder() throws MalformedURLException, URISyntaxException {
1:         rootFile = new File(new URL(policy.getUploadUrl()).toURI());
1:         if (rootFile.exists() == false) {
1:             rootFile.mkdirs();
1:         } else if (rootFile.isDirectory() == false) {
1:             throw new IllegalArgumentException("Given url is not a directory " + rootFile );
1:         }
1:     }
1:     /*
1:      * (non-Javadoc)
1:      * @see org.apache.activemq.blob.BlobUploadStrategy#uploadFile(org.apache.activemq.command.ActiveMQBlobMessage, java.io.File)
1:      */
1:     public URL uploadFile(ActiveMQBlobMessage message, File file) throws JMSException, IOException {
0:         return uploadStream(message, new FileInputStream(file));
1:     }
1: 
1:     /*
1:      * (non-Javadoc)
1:      * @see org.apache.activemq.blob.BlobUploadStrategy#uploadStream(org.apache.activemq.command.ActiveMQBlobMessage, java.io.InputStream)
1:      */
1:     public URL uploadStream(ActiveMQBlobMessage message, InputStream in) throws JMSException, IOException {
1:         File f = getFile(message);
0:         FileOutputStream out = new FileOutputStream(f);
0:         byte[] buffer = new byte[policy.getBufferSize()];
0:         for (int c = in.read(buffer); c != -1; c = in.read(buffer)) {
0:             out.write(buffer, 0, c);
0:             out.flush();
1:         }
0:         out.flush();
0:         out.close();
1:         // File.toURL() is deprecated
1:         return f.toURI().toURL();
1:     }
1: 
1:     /*
1:      * (non-Javadoc)
1:      * @see org.apache.activemq.blob.BlobDownloadStrategy#deleteFile(org.apache.activemq.command.ActiveMQBlobMessage)
1:      */
1:     public void deleteFile(ActiveMQBlobMessage message) throws IOException, JMSException {
1:         File f = getFile(message);
1:         if (f.exists()) {
1:             if (f.delete() == false) throw new IOException("Unable to delete file " + f);
1:         }
1:     }
1: 
1:     /**
1:      * Returns a {@link FileInputStream} for the give {@link ActiveMQBlobMessage}
1:      */
1:     public InputStream getInputStream(ActiveMQBlobMessage message) throws IOException, JMSException {
1:         return new FileInputStream(getFile(message));
1:     }
1: 
1:     
1:     /**
0:      * Return the {@link File} for the {@link ActiveMQBlobMessage}. 
1:      * 
1:      * @param message
1:      * @return file
1:      * @throws JMSException
0:      * @throws IOException 
1:      */
1:     protected File getFile(ActiveMQBlobMessage message) throws JMSException, IOException {
1:     	if (message.getURL() != null) {
1:     		try {
1: 				return new File(message.getURL().toURI());
1: 			} catch (URISyntaxException e) {
0: 				throw new IOException("Unable to open file for message " + message ,e);
1: 			}
1:     	}
1:         //replace all : with _ to make windows more happy
0:         String fileName = message.getJMSMessageID().replaceAll(":", "_"); 
0:         return new File(rootFile, fileName);        
1:         
1:     }
1: }
============================================================================