1:c6cf88b: /**
1:57b4941:  * Licensed to the Apache Software Foundation (ASF) under one or more
1:57b4941:  * contributor license agreements.  See the NOTICE file distributed with
1:57b4941:  * this work for additional information regarding copyright ownership.
1:57b4941:  * The ASF licenses this file to You under the Apache License, Version 2.0
1:57b4941:  * (the "License"); you may not use this file except in compliance with
1:57b4941:  * the License.  You may obtain a copy of the License at
1:c6cf88b:  *
1:230a86c:  *      http://www.apache.org/licenses/LICENSE-2.0
1:0bbc0ac:  *
1:9f59397:  * Unless required by applicable law or agreed to in writing, software
1:9f59397:  * distributed under the License is distributed on an "AS IS" BASIS,
1:9f59397:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:9f59397:  * See the License for the specific language governing permissions and
1:9f59397:  * limitations under the License.
2:9f59397:  */
1:9f59397: package org.apache.activemq.security;
1:f812e34: 
1:2f469c1: import org.apache.activemq.filter.DestinationMapEntry;
1:2f469c1: 
1:9f59397: import java.util.Collections;
1:affd134: import java.util.HashSet;
1:9f59397: import java.util.Set;
1:affd134: import java.util.StringTokenizer;
1:f812e34: 
2:9f59397: /**
1:9f59397:  * Represents an entry in a {@link DefaultAuthorizationMap} for assigning
1:9f59397:  * different operations (read, write, admin) of user roles to a specific
1:9f59397:  * destination or a hierarchical wildcard area of destinations.
1:c6cf88b:  */
1:3dbc9c9: @SuppressWarnings("rawtypes")
1:9f59397: public class AuthorizationEntry extends DestinationMapEntry {
1:f812e34: 
1:933eb2f:     private Set<Object> readACLs = emptySet();
1:933eb2f:     private Set<Object> writeACLs = emptySet();
1:933eb2f:     private Set<Object> adminACLs = emptySet();
1:f812e34: 
1:2f469c1:     protected String adminRoles;
1:2f469c1:     protected String readRoles;
1:2f469c1:     protected String writeRoles;
1:f812e34: 
1:2f469c1:     private String groupClass;
1:f812e34: 
1:346119b:     public String getGroupClass() {
1:f812e34:         return groupClass;
1:f812e34:     }
1:f812e34: 
1:933eb2f:     @SuppressWarnings("unchecked")
1:933eb2f:     private Set<Object> emptySet() {
1:933eb2f:         return Collections.EMPTY_SET;
1:933eb2f:     }
1:933eb2f: 
1:346119b:     public void setGroupClass(String groupClass) {
1:346119b:         this.groupClass = groupClass;
1:f812e34:     }
1:f812e34: 
1:933eb2f:     public Set<Object> getAdminACLs() {
1:9f59397:         return adminACLs;
1:f812e34:     }
1:f812e34: 
1:933eb2f:     public void setAdminACLs(Set<Object> adminACLs) {
1:9f59397:         this.adminACLs = adminACLs;
1:f812e34:     }
1:f812e34: 
1:933eb2f:     public Set<Object> getReadACLs() {
1:9f59397:         return readACLs;
1:f812e34:     }
1:16546f9: 
1:933eb2f:     public void setReadACLs(Set<Object> readACLs) {
1:9f59397:         this.readACLs = readACLs;
1:f812e34:     }
2:16546f9: 
1:933eb2f:     public Set<Object> getWriteACLs() {
1:9f59397:         return writeACLs;
1:f812e34:     }
1:16546f9: 
1:933eb2f:     public void setWriteACLs(Set<Object> writeACLs) {
1:9f59397:         this.writeACLs = writeACLs;
1:346119b:     }
1:16546f9: 
1:affd134:     // helper methods for easier configuration in Spring
1:f812e34:     // ACLs are already set in the afterPropertiesSet method to ensure that
1:f812e34:     // groupClass is set first before
1:f812e34:     // calling parceACLs() on any of the roles. We still need to add the call to
1:f812e34:     // parceACLs inside the helper
1:f812e34:     // methods for instances where we configure security programatically without
1:f812e34:     // using xbean
1:affd134:     // -------------------------------------------------------------------------
1:346119b:     public void setAdmin(String roles) throws Exception {
1:f812e34:         adminRoles = roles;
1:f812e34:         setAdminACLs(parseACLs(adminRoles));
1:16546f9:     }
1:f812e34: 
1:346119b:     public void setRead(String roles) throws Exception {
1:f812e34:         readRoles = roles;
1:f812e34:         setReadACLs(parseACLs(readRoles));
1:346119b:     }
1:16546f9: 
1:346119b:     public void setWrite(String roles) throws Exception {
1:f812e34:         writeRoles = roles;
1:f812e34:         setWriteACLs(parseACLs(writeRoles));
1:16546f9:     }
1:f812e34: 
1:933eb2f:     protected Set<Object> parseACLs(String roles) throws Exception {
1:933eb2f:         Set<Object> answer = new HashSet<Object>();
1:affd134:         StringTokenizer iter = new StringTokenizer(roles, ",");
1:affd134:         while (iter.hasMoreTokens()) {
1:3dbc9c9:             String name = iter.nextToken().trim();
1:2f469c1:             String groupClass = (this.groupClass != null ? this.groupClass : DefaultAuthorizationMap.DEFAULT_GROUP_CLASS);
1:2f469c1:             answer.add(DefaultAuthorizationMap.createGroupPrincipal(name, groupClass));
1:16546f9:         }
1:affd134:         return answer;
1:f812e34:     }
1:8bb5803: 
1:8bb5803:     @Override
1:8bb5803:     public boolean equals(Object o) {
1:8bb5803:         if (this == o) return true;
1:8bb5803:         if (!(o instanceof AuthorizationEntry)) return false;
1:8bb5803: 
1:8bb5803:         AuthorizationEntry that = (AuthorizationEntry) o;
1:8bb5803: 
1:ea2746b:         if (adminACLs != null ? !adminACLs.equals(that.adminACLs) : that.adminACLs != null) return false;
1:8bb5803:         if (adminRoles != null ? !adminRoles.equals(that.adminRoles) : that.adminRoles != null) return false;
1:8bb5803:         if (groupClass != null ? !groupClass.equals(that.groupClass) : that.groupClass != null) return false;
1:ea2746b:         if (readACLs != null ? !readACLs.equals(that.readACLs) : that.readACLs != null) return false;
1:8bb5803:         if (readRoles != null ? !readRoles.equals(that.readRoles) : that.readRoles != null) return false;
1:ea2746b:         if (writeACLs != null ? !writeACLs.equals(that.writeACLs) : that.writeACLs != null) return false;
1:8bb5803:         if (writeRoles != null ? !writeRoles.equals(that.writeRoles) : that.writeRoles != null) return false;
1:8bb5803: 
1:8bb5803:         return true;
1:8bb5803:     }
1:8bb5803: 
1:8bb5803:     @Override
1:8bb5803:     public int hashCode() {
1:ea2746b:         int result = readACLs != null ? readACLs.hashCode() : 0;
1:ea2746b:         result = 31 * result + (writeACLs != null ? writeACLs.hashCode() : 0);
1:ea2746b:         result = 31 * result + (adminACLs != null ? adminACLs.hashCode() : 0);
1:ea2746b:         result = 31 * result + (adminRoles != null ? adminRoles.hashCode() : 0);
1:8bb5803:         result = 31 * result + (readRoles != null ? readRoles.hashCode() : 0);
1:8bb5803:         result = 31 * result + (writeRoles != null ? writeRoles.hashCode() : 0);
1:8bb5803:         result = 31 * result + (groupClass != null ? groupClass.hashCode() : 0);
1:8bb5803:         return result;
1:8bb5803:     }
1:16546f9: }
============================================================================
author:Dejan Bosanac
-------------------------------------------------------------------------------
commit:ea2746b
/////////////////////////////////////////////////////////////////////////
1:         if (adminACLs != null ? !adminACLs.equals(that.adminACLs) : that.adminACLs != null) return false;
1:         if (readACLs != null ? !readACLs.equals(that.readACLs) : that.readACLs != null) return false;
1:         if (writeACLs != null ? !writeACLs.equals(that.writeACLs) : that.writeACLs != null) return false;
/////////////////////////////////////////////////////////////////////////
1:         int result = readACLs != null ? readACLs.hashCode() : 0;
1:         result = 31 * result + (writeACLs != null ? writeACLs.hashCode() : 0);
1:         result = 31 * result + (adminACLs != null ? adminACLs.hashCode() : 0);
1:         result = 31 * result + (adminRoles != null ? adminRoles.hashCode() : 0);
commit:8bb5803
/////////////////////////////////////////////////////////////////////////
1: 
1:     @Override
1:     public boolean equals(Object o) {
1:         if (this == o) return true;
1:         if (!(o instanceof AuthorizationEntry)) return false;
1: 
1:         AuthorizationEntry that = (AuthorizationEntry) o;
1: 
1:         if (adminRoles != null ? !adminRoles.equals(that.adminRoles) : that.adminRoles != null) return false;
1:         if (groupClass != null ? !groupClass.equals(that.groupClass) : that.groupClass != null) return false;
1:         if (readRoles != null ? !readRoles.equals(that.readRoles) : that.readRoles != null) return false;
1:         if (writeRoles != null ? !writeRoles.equals(that.writeRoles) : that.writeRoles != null) return false;
1: 
1:         return true;
1:     }
1: 
1:     @Override
1:     public int hashCode() {
0:         int result = adminRoles != null ? adminRoles.hashCode() : 0;
1:         result = 31 * result + (readRoles != null ? readRoles.hashCode() : 0);
1:         result = 31 * result + (writeRoles != null ? writeRoles.hashCode() : 0);
1:         result = 31 * result + (groupClass != null ? groupClass.hashCode() : 0);
1:         return result;
1:     }
author:Bosanac Dejan
-------------------------------------------------------------------------------
commit:2f469c1
/////////////////////////////////////////////////////////////////////////
1: import org.apache.activemq.filter.DestinationMapEntry;
1: 
/////////////////////////////////////////////////////////////////////////
1:     protected String adminRoles;
1:     protected String readRoles;
1:     protected String writeRoles;
1:     private String groupClass;
/////////////////////////////////////////////////////////////////////////
1:             String groupClass = (this.groupClass != null ? this.groupClass : DefaultAuthorizationMap.DEFAULT_GROUP_CLASS);
1:             answer.add(DefaultAuthorizationMap.createGroupPrincipal(name, groupClass));
commit:9027d49
/////////////////////////////////////////////////////////////////////////
0:             DefaultAuthorizationMap.createGroupPrincipal(name, getGroupClass());
author:Gary Tully
-------------------------------------------------------------------------------
commit:c6cf88b
/////////////////////////////////////////////////////////////////////////
0: import javax.annotation.PostConstruct;
/////////////////////////////////////////////////////////////////////////
1:     /**
1:      *
0:      * @org.apache.xbean.InitMethod
1:      */
0:     @PostConstruct
author:Hiram R. Chirino
-------------------------------------------------------------------------------
commit:58aca86
commit:0bbc0ac
/////////////////////////////////////////////////////////////////////////
1:  * 
commit:933eb2f
/////////////////////////////////////////////////////////////////////////
1:     private Set<Object> readACLs = emptySet();
1:     private Set<Object> writeACLs = emptySet();
1:     private Set<Object> adminACLs = emptySet();
0:     private String adminRoles;
0:     private String readRoles;
0:     private String writeRoles;
/////////////////////////////////////////////////////////////////////////
1:     @SuppressWarnings("unchecked")
1:     private Set<Object> emptySet() {
1:         return Collections.EMPTY_SET;
1:     }
1: 
1:     public Set<Object> getAdminACLs() {
1:     public void setAdminACLs(Set<Object> adminACLs) {
1:     public Set<Object> getReadACLs() {
1:     public void setReadACLs(Set<Object> readACLs) {
1:     public Set<Object> getWriteACLs() {
1:     public void setWriteACLs(Set<Object> writeACLs) {
/////////////////////////////////////////////////////////////////////////
1:     protected Set<Object> parseACLs(String roles) throws Exception {
1:         Set<Object> answer = new HashSet<Object>();
commit:f812e34
/////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////
0: import org.apache.activemq.filter.DestinationMapEntry;
1: 
/////////////////////////////////////////////////////////////////////////
1: 
1: 
1: 
1:         return groupClass;
1: 
1:     }
/////////////////////////////////////////////////////////////////////////
1:     // ACLs are already set in the afterPropertiesSet method to ensure that
1:     // groupClass is set first before
1:     // calling parceACLs() on any of the roles. We still need to add the call to
1:     // parceACLs inside the helper
1:     // methods for instances where we configure security programatically without
1:     // using xbean
1:         adminRoles = roles;
1:         setAdminACLs(parseACLs(adminRoles));
1:         readRoles = roles;
1:         setReadACLs(parseACLs(readRoles));
1:         writeRoles = roles;
1:         setWriteACLs(parseACLs(writeRoles));
/////////////////////////////////////////////////////////////////////////
1: 
0:                 Class cls = Class.forName(groupClass);
1: 
0:                 Constructor[] constructors = cls.getConstructors();
0:                 int i;
0:                 for (i = 0; i < constructors.length; i++) {
0:                     Class[] paramTypes = constructors[i].getParameterTypes();
0:                     if (paramTypes.length != 0 && paramTypes[0].equals(paramClass[0])) {
0:                         break;
1:                     }
1:                 }
0:                 if (i < constructors.length) {
0:                     Object instance = constructors[i].newInstance(param);
0:                     answer.add(instance);
0:                 } else {
0:                     Object instance = cls.newInstance();
0:                     Method[] methods = cls.getMethods();
0:                     i = 0;
0:                     for (i = 0; i < methods.length; i++) {
0:                         Class[] paramTypes = methods[i].getParameterTypes();
0:                         if (paramTypes.length != 0 && methods[i].getName().equals("setName") && paramTypes[0].equals(paramClass[0])) {
0:                             break;
1:                         }
1:                     }
1: 
0:                     if (i < methods.length) {
0:                         methods[i].invoke(instance, param);
0:                         answer.add(instance);
0:                     } else {
0:                         throw new NoSuchMethodException();
1:                     }
1:                 }
0:             } catch (Exception e) {
0:                 throw e;
1: 
1: 
0:         if (adminRoles != null) {
0:             setAdminACLs(parseACLs(adminRoles));
0:         if (writeRoles != null) {
0:             setWriteACLs(parseACLs(writeRoles));
1: 
0:         if (readRoles != null) {
0:             setReadACLs(parseACLs(readRoles));
1: 
1:     }
commit:230a86c
/////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////
1:  *      http://www.apache.org/licenses/LICENSE-2.0
commit:57b4941
/////////////////////////////////////////////////////////////////////////
1:  * Licensed to the Apache Software Foundation (ASF) under one or more
1:  * contributor license agreements.  See the NOTICE file distributed with
1:  * this work for additional information regarding copyright ownership.
1:  * The ASF licenses this file to You under the Apache License, Version 2.0
1:  * (the "License"); you may not use this file except in compliance with
1:  * the License.  You may obtain a copy of the License at
author:Timothy A. Bish
-------------------------------------------------------------------------------
commit:3dbc9c9
/////////////////////////////////////////////////////////////////////////
0:  *
0:  *
1: @SuppressWarnings("rawtypes")
/////////////////////////////////////////////////////////////////////////
1:             String name = iter.nextToken().trim();
0:             Object[] param = new Object[]{name};
0:                 Class<?> cls = Class.forName(groupClass);
0:                 Constructor<?>[] constructors = cls.getConstructors();
0:                     Class<?>[] paramTypes = constructors[i].getParameterTypes();
0:                     if (paramTypes.length != 0 && paramTypes[0].equals(String.class)) {
/////////////////////////////////////////////////////////////////////////
0:                         Class<?>[] paramTypes = methods[i].getParameterTypes();
0:                         if (paramTypes.length != 0 && methods[i].getName().equals("setName") && paramTypes[0].equals(String.class)) {
author:Robert Davies
-------------------------------------------------------------------------------
commit:d36c0d4
/////////////////////////////////////////////////////////////////////////
0:             param[0] = name;
author:Jonas B. Lim
-------------------------------------------------------------------------------
commit:16546f9
/////////////////////////////////////////////////////////////////////////
0:     private String adminRoles = null;
0:     private String readRoles = null;
0:     private String writeRoles = null;
1:     
/////////////////////////////////////////////////////////////////////////
0:     // ACLs are already set in the afterPropertiesSet method to ensure that  groupClass is set first before
0:     // calling parceACLs() on any of the roles. We still need to add  the call to parceACLs inside the helper
0:     // methods for instances where we configure security programatically without using xbean
0:     	adminRoles = roles;
0:     	setAdminACLs(parseACLs(adminRoles));
0:     	readRoles = roles;
0:     	setReadACLs(parseACLs(readRoles));
0:     	writeRoles = roles;
0:     	setWriteACLs(parseACLs(writeRoles));
/////////////////////////////////////////////////////////////////////////
1:     
0:     public void afterPropertiesSet() throws Exception {
0:         super.afterPropertiesSet();
1:         
0:         if(adminRoles!=null) {
0:         	setAdminACLs(parseACLs(adminRoles));
1:         }
1: 
0:         if(writeRoles!=null) {
0:         	setWriteACLs(parseACLs(writeRoles));
1:         }
1:         
0:         if(readRoles!=null) {
0:         	setReadACLs(parseACLs(readRoles));
1:         }
1:         
1:     }    
commit:346119b
/////////////////////////////////////////////////////////////////////////
0: import java.lang.reflect.Constructor;
0: import java.lang.reflect.Method;
/////////////////////////////////////////////////////////////////////////
0:     
0:     private String groupClass = "org.apache.activemq.jaas.GroupPrincipal";
0:         
1:     public String getGroupClass() {
0:     	return groupClass;
1:     }
0:      
1:     public void setGroupClass(String groupClass) {
1:         this.groupClass = groupClass;
1:     }    
/////////////////////////////////////////////////////////////////////////
1:     public void setAdmin(String roles) throws Exception {
1:     public void setRead(String roles) throws Exception {
1:     public void setWrite(String roles) throws Exception {
0:     protected Set parseACLs(String roles) throws Exception {
0:             Class[] paramClass = new Class[1];
0:             paramClass[0] = String.class;
0:             
0:             Object[] param = new Object[1];
0:             param[0] = new String(name);
0: 
0:             try {
0:             	Class cls = Class.forName(groupClass);
0:             	
0:             	Constructor[] constructors = cls.getConstructors();
0:             	int i;
0:             	for (i=0; i<constructors.length; i++) {
0:             		Class[] paramTypes = constructors[i].getParameterTypes(); 
0:             		if (paramTypes.length!=0 && paramTypes[0].equals(paramClass[0])) break;
0:             	}
0:             	if (i < constructors.length) {
0:             		Object instance = constructors[i].newInstance(param);
0:                 	answer.add(instance);
0:             	}
0:             	else {
0:             		Object instance = cls.newInstance();
0:             		Method[] methods = cls.getMethods();
0:             		i=0;
0:             		for (i=0; i<methods.length; i++) {
0:             			Class[] paramTypes = methods[i].getParameterTypes();
0:             			if (paramTypes.length!=0 && methods[i].getName().equals("setName") && paramTypes[0].equals(paramClass[0])) break;
0:             		}
0:                 		
0:                 	if (i < methods.length) {
0:                 		methods[i].invoke(instance, param);
0:                     	answer.add(instance);
0:                 	}
0:                 	else throw new NoSuchMethodException();
0:             	}
0:             }
0:             catch (Exception e) { throw e; }
author:James Strachan
-------------------------------------------------------------------------------
commit:affd134
/////////////////////////////////////////////////////////////////////////
0: import org.apache.activemq.jaas.GroupPrincipal;
1: import java.util.HashSet;
1: import java.util.StringTokenizer;
/////////////////////////////////////////////////////////////////////////
1:     // helper methods for easier configuration in Spring
1:     // -------------------------------------------------------------------------
0:     public void setAdmin(String roles) {
0:         setAdminACLs(parseACLs(roles));
0:     }
0: 
0:     public void setRead(String roles) {
0:         setReadACLs(parseACLs(roles));
0:     }
0: 
0:     public void setWrite(String roles) {
0:         setWriteACLs(parseACLs(roles));
0:     }
0: 
0:     protected Set parseACLs(String roles) {
0:         Set answer = new HashSet();
1:         StringTokenizer iter = new StringTokenizer(roles, ",");
1:         while (iter.hasMoreTokens()) {
0:             String name = iter.nextToken().trim();
0:             answer.add(new GroupPrincipal(name));
0:         }
1:         return answer;
0:     }
commit:9f59397
/////////////////////////////////////////////////////////////////////////
1: /**
0:  *
0:  * Copyright 2005-2006 The Apache Software Foundation
0:  *
0:  * Licensed under the Apache License, Version 2.0 (the "License");
0:  * you may not use this file except in compliance with the License.
0:  * You may obtain a copy of the License at
0:  *
0:  * http://www.apache.org/licenses/LICENSE-2.0
0:  *
1:  * Unless required by applicable law or agreed to in writing, software
1:  * distributed under the License is distributed on an "AS IS" BASIS,
1:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:  * See the License for the specific language governing permissions and
1:  * limitations under the License.
1:  */
1: package org.apache.activemq.security;
0: 
0: import org.apache.activemq.filter.DestinationMapEntry;
0: 
1: import java.util.Collections;
1: import java.util.Set;
0: 
1: /**
1:  * Represents an entry in a {@link DefaultAuthorizationMap} for assigning
1:  * different operations (read, write, admin) of user roles to a specific
1:  * destination or a hierarchical wildcard area of destinations.
0:  * 
0:  * @org.apache.xbean.XBean
0:  * 
0:  * @version $Revision$
1:  */
1: public class AuthorizationEntry extends DestinationMapEntry {
0: 
0:     private Set readACLs = Collections.EMPTY_SET;
0:     private Set writeACLs = Collections.EMPTY_SET;
0:     private Set adminACLs = Collections.EMPTY_SET;
0: 
0:     public Set getAdminACLs() {
1:         return adminACLs;
0:     }
0: 
0:     public void setAdminACLs(Set adminACLs) {
1:         this.adminACLs = adminACLs;
0:     }
0: 
0:     public Set getReadACLs() {
1:         return readACLs;
0:     }
0: 
0:     public void setReadACLs(Set readACLs) {
1:         this.readACLs = readACLs;
0:     }
0: 
0:     public Set getWriteACLs() {
1:         return writeACLs;
0:     }
0: 
0:     public void setWriteACLs(Set writeACLs) {
1:         this.writeACLs = writeACLs;
0:     }
0: 
0: }
============================================================================