1:57f5d49: /**
1:57f5d49:  * Licensed to the Apache Software Foundation (ASF) under one or more
1:57f5d49:  * contributor license agreements.  See the NOTICE file distributed with
1:57f5d49:  * this work for additional information regarding copyright ownership.
1:57f5d49:  * The ASF licenses this file to You under the Apache License, Version 2.0
1:57f5d49:  * (the "License"); you may not use this file except in compliance with
1:57f5d49:  * the License.  You may obtain a copy of the License at
1:57f5d49:  *
1:57f5d49:  *      http://www.apache.org/licenses/LICENSE-2.0
1:57f5d49:  *
1:57f5d49:  * Unless required by applicable law or agreed to in writing, software
1:57f5d49:  * distributed under the License is distributed on an "AS IS" BASIS,
1:57f5d49:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:57f5d49:  * See the License for the specific language governing permissions and
1:57f5d49:  * limitations under the License.
1:57f5d49:  */
1:57f5d49: package org.apache.activemq.usecases;
1:57f5d49: 
1:57f5d49: import org.apache.activemq.TestSupport.PersistenceAdapterChoice;
1:57f5d49: import org.junit.Test;
1:57f5d49: import org.junit.runner.RunWith;
1:57f5d49: import org.junit.runners.Parameterized;
1:57f5d49: import org.slf4j.Logger;
1:57f5d49: import org.slf4j.LoggerFactory;
1:57f5d49: 
1:57f5d49: import javax.jms.Connection;
1:57f5d49: import javax.jms.JMSException;
1:57f5d49: import javax.jms.Message;
1:57f5d49: import javax.jms.MessageConsumer;
1:57f5d49: import javax.jms.MessageProducer;
1:57f5d49: import javax.jms.Session;
1:57f5d49: import java.util.ArrayList;
1:57f5d49: import java.util.Collection;
1:57f5d49: import java.util.List;
1:57f5d49: 
1:57f5d49: import static org.junit.Assert.assertEquals;
1:57f5d49: import static org.junit.Assert.assertTrue;
1:57f5d49: 
1:57f5d49: 
1:57f5d49: @RunWith(value = Parameterized.class)
1:57f5d49: public class DurableSubscriptionOffline3Test extends DurableSubscriptionOfflineTestBase {
1:57f5d49: 
1:57f5d49:     private static final Logger LOG = LoggerFactory.getLogger(DurableSubscriptionOffline3Test.class);
1:57f5d49: 
1:57f5d49:     @Parameterized.Parameters(name = "{0}")
1:57f5d49:     public static Collection<PersistenceAdapterChoice[]> getTestParameters() {
1:57f5d49:         String osName = System.getProperty("os.name");
1:57f5d49:         LOG.debug("Running on [" + osName + "]");
1:57f5d49: 
1:57f5d49:         PersistenceAdapterChoice[] kahaDb = {PersistenceAdapterChoice.KahaDB};
1:57f5d49:         PersistenceAdapterChoice[] jdbc = {PersistenceAdapterChoice.JDBC};
1:57f5d49:         List<PersistenceAdapterChoice[]> choices = new ArrayList<PersistenceAdapterChoice[]>();
1:57f5d49:         choices.add(kahaDb);
1:57f5d49:         choices.add(jdbc);
1:57f5d49:         if (!osName.equalsIgnoreCase("AIX") && !osName.equalsIgnoreCase("SunOS")) {
1:57f5d49:             PersistenceAdapterChoice[] levelDb = {PersistenceAdapterChoice.LevelDB};
1:57f5d49:             choices.add(levelDb);
1:57f5d49:         }
1:57f5d49: 
1:57f5d49:         return choices;
1:57f5d49:     }
1:57f5d49: 
1:57f5d49:     public DurableSubscriptionOffline3Test(PersistenceAdapterChoice persistenceAdapterChoice) {
1:57f5d49:         this.defaultPersistenceAdapter = persistenceAdapterChoice;
1:57f5d49: 
1:57f5d49:         LOG.info(">>>> running {} with persistenceAdapterChoice: {}", testName.getMethodName(), this.defaultPersistenceAdapter);
1:57f5d49:     }
1:57f5d49: 
1:57f5d49:     @Test(timeout = 60 * 1000)
1:57f5d49:     public void testInterleavedOfflineSubscriptionCanConsume() throws Exception {
1:57f5d49:         // create durable subscription 1
1:57f5d49:         Connection con = createConnection("cliId1");
1:57f5d49:         Session session = con.createSession(false, Session.AUTO_ACKNOWLEDGE);
1:57f5d49:         session.createDurableSubscriber(topic, "SubsId", "filter = 'true'", true);
1:57f5d49:         session.close();
1:57f5d49:         con.close();
1:57f5d49: 
1:57f5d49:         // send messages
1:57f5d49:         con = createConnection();
1:57f5d49:         session = con.createSession(false, Session.AUTO_ACKNOWLEDGE);
1:57f5d49:         MessageProducer producer = session.createProducer(null);
1:57f5d49: 
1:57f5d49:         int sent = 0;
1:57f5d49:         for (int i = 0; i < 10; i++) {
1:57f5d49:             sent++;
1:57f5d49:             Message message = session.createMessage();
1:57f5d49:             message.setStringProperty("filter", "true");
1:57f5d49:             producer.send(topic, message);
1:57f5d49:         }
1:57f5d49: 
1:57f5d49:         Thread.sleep(1 * 1000);
1:57f5d49: 
1:57f5d49:         // create durable subscription 2
1:57f5d49:         Connection con2 = createConnection("cliId2");
1:57f5d49:         Session session2 = con2.createSession(false, Session.AUTO_ACKNOWLEDGE);
1:57f5d49:         MessageConsumer consumer2 = session2.createDurableSubscriber(topic, "SubsId", "filter = 'true'", true);
1:57f5d49:         DurableSubscriptionOfflineTestListener listener2 = new DurableSubscriptionOfflineTestListener();
1:57f5d49:         consumer2.setMessageListener(listener2);
1:57f5d49: 
1:57f5d49:         assertEquals(0, listener2.count);
1:57f5d49:         session2.close();
1:57f5d49:         con2.close();
1:57f5d49: 
1:57f5d49:         // send some more
1:57f5d49:         for (int i = 0; i < 10; i++) {
1:57f5d49:             sent++;
1:57f5d49:             Message message = session.createMessage();
1:57f5d49:             message.setStringProperty("filter", "true");
1:57f5d49:             producer.send(topic, message);
1:57f5d49:         }
1:57f5d49: 
1:57f5d49:         Thread.sleep(1 * 1000);
1:57f5d49:         session.close();
1:57f5d49:         con.close();
1:57f5d49: 
1:57f5d49:         con2 = createConnection("cliId2");
1:57f5d49:         session2 = con2.createSession(false, Session.AUTO_ACKNOWLEDGE);
1:57f5d49:         consumer2 = session2.createDurableSubscriber(topic, "SubsId", "filter = 'true'", true);
1:57f5d49:         listener2 = new DurableSubscriptionOfflineTestListener("cliId2");
1:57f5d49:         consumer2.setMessageListener(listener2);
1:57f5d49:         // test online subs
1:57f5d49:         Thread.sleep(3 * 1000);
1:57f5d49: 
1:57f5d49:         assertEquals(10, listener2.count);
1:57f5d49: 
1:57f5d49:         // consume all messages
1:57f5d49:         con = createConnection("cliId1");
1:57f5d49:         session = con.createSession(false, Session.AUTO_ACKNOWLEDGE);
1:57f5d49:         MessageConsumer consumer = session.createDurableSubscriber(topic, "SubsId", "filter = 'true'", true);
1:57f5d49:         DurableSubscriptionOfflineTestListener listener = new DurableSubscriptionOfflineTestListener("cliId1");
1:57f5d49:         consumer.setMessageListener(listener);
1:57f5d49: 
1:57f5d49:         Thread.sleep(3 * 1000);
1:57f5d49: 
1:57f5d49:         session.close();
1:57f5d49:         con.close();
1:57f5d49: 
1:57f5d49:         assertEquals("offline consumer got all", sent, listener.count);
1:57f5d49:     }
1:57f5d49: 
1:57f5d49:     private static String filter = "$a='A1' AND (($b=true AND $c=true) OR ($d='D1' OR $d='D2'))";
1:57f5d49:     @Test(timeout = 60 * 1000)
1:57f5d49:     public void testMixOfOnLineAndOfflineSubsGetAllMatched() throws Exception {
1:57f5d49:         // create offline subs 1
1:57f5d49:         Connection con = createConnection("offCli1");
1:57f5d49:         Session session = con.createSession(false, Session.AUTO_ACKNOWLEDGE);
1:57f5d49:         session.createDurableSubscriber(topic, "SubsId", filter, true);
1:57f5d49:         session.close();
1:57f5d49:         con.close();
1:57f5d49: 
1:57f5d49:         // create offline subs 2
1:57f5d49:         con = createConnection("offCli2");
1:57f5d49:         session = con.createSession(false, Session.AUTO_ACKNOWLEDGE);
1:57f5d49:         session.createDurableSubscriber(topic, "SubsId", filter, true);
1:57f5d49:         session.close();
1:57f5d49:         con.close();
1:57f5d49: 
1:57f5d49:         // create online subs
1:57f5d49:         Connection con2 = createConnection("onlineCli1");
1:57f5d49:         Session session2 = con2.createSession(false, Session.AUTO_ACKNOWLEDGE);
1:57f5d49:         MessageConsumer consumer2 = session2.createDurableSubscriber(topic, "SubsId", filter, true);
1:57f5d49:         DurableSubscriptionOfflineTestListener listener2 = new DurableSubscriptionOfflineTestListener();
1:57f5d49:         consumer2.setMessageListener(listener2);
1:57f5d49: 
1:57f5d49:         // create non-durable consumer
1:57f5d49:         Connection con4 = createConnection("nondurableCli");
1:57f5d49:         Session session4 = con4.createSession(false, Session.AUTO_ACKNOWLEDGE);
1:57f5d49:         MessageConsumer consumer4 = session4.createConsumer(topic, filter, true);
1:57f5d49:         DurableSubscriptionOfflineTestListener listener4 = new DurableSubscriptionOfflineTestListener();
1:57f5d49:         consumer4.setMessageListener(listener4);
1:57f5d49: 
1:57f5d49:         // send messages
1:57f5d49:         con = createConnection();
1:57f5d49:         session = con.createSession(false, Session.AUTO_ACKNOWLEDGE);
1:57f5d49:         MessageProducer producer = session.createProducer(null);
1:57f5d49: 
1:57f5d49:         boolean hasRelevant = false;
1:57f5d49:         int filtered = 0;
1:57f5d49:         for (int i = 0; i < 100; i++) {
1:57f5d49:             int postf = (int) (Math.random() * 9) + 1;
1:57f5d49:             String d = "D" + postf;
1:57f5d49: 
1:57f5d49:             if ("D1".equals(d) || "D2".equals(d)) {
1:57f5d49:                 hasRelevant = true;
1:57f5d49:                 filtered++;
1:57f5d49:             }
1:57f5d49: 
1:57f5d49:             Message message = session.createMessage();
1:57f5d49:             message.setStringProperty("$a", "A1");
1:57f5d49:             message.setStringProperty("$d", d);
1:57f5d49:             producer.send(topic, message);
1:57f5d49:         }
1:57f5d49: 
1:57f5d49:         Message message = session.createMessage();
1:57f5d49:         message.setStringProperty("$a", "A1");
1:57f5d49:         message.setBooleanProperty("$b", true);
1:57f5d49:         message.setBooleanProperty("$c", hasRelevant);
1:57f5d49:         producer.send(topic, message);
1:57f5d49: 
1:57f5d49:         if (hasRelevant)
1:57f5d49:             filtered++;
1:57f5d49: 
1:57f5d49:         Thread.sleep(1 * 1000);
1:57f5d49:         session.close();
1:57f5d49:         con.close();
1:57f5d49: 
1:57f5d49:         Thread.sleep(3 * 1000);
1:57f5d49: 
1:57f5d49:         // test non-durable consumer
1:57f5d49:         session4.close();
1:57f5d49:         con4.close();
1:57f5d49:         assertEquals(filtered, listener4.count); // succeeded!
1:57f5d49: 
1:57f5d49:         // test online subs
1:57f5d49:         session2.close();
1:57f5d49:         con2.close();
1:57f5d49:         assertEquals(filtered, listener2.count); // succeeded!
1:57f5d49: 
1:57f5d49:         // test offline 1
1:57f5d49:         con = createConnection("offCli1");
1:57f5d49:         session = con.createSession(false, Session.AUTO_ACKNOWLEDGE);
1:57f5d49:         MessageConsumer consumer = session.createDurableSubscriber(topic, "SubsId", filter, true);
1:57f5d49:         DurableSubscriptionOfflineTestListener listener = new FilterCheckListener();
1:57f5d49:         consumer.setMessageListener(listener);
1:57f5d49: 
1:57f5d49:         Thread.sleep(3 * 1000);
1:57f5d49:         session.close();
1:57f5d49:         con.close();
1:57f5d49: 
1:57f5d49:         assertEquals(filtered, listener.count);
1:57f5d49: 
1:57f5d49:         // test offline 2
1:57f5d49:         Connection con3 = createConnection("offCli2");
1:57f5d49:         Session session3 = con3.createSession(false, Session.AUTO_ACKNOWLEDGE);
1:57f5d49:         MessageConsumer consumer3 = session3.createDurableSubscriber(topic, "SubsId", filter, true);
1:57f5d49:         DurableSubscriptionOfflineTestListener listener3 = new FilterCheckListener();
1:57f5d49:         consumer3.setMessageListener(listener3);
1:57f5d49: 
1:57f5d49:         Thread.sleep(3 * 1000);
1:57f5d49:         session3.close();
1:57f5d49:         con3.close();
1:57f5d49: 
1:57f5d49:         assertEquals(filtered, listener3.count);
1:57f5d49:         assertTrue("no unexpected exceptions: " + exceptions, exceptions.isEmpty());
1:57f5d49:     }
1:57f5d49: 
1:57f5d49:     @Test(timeout = 60 * 1000)
1:57f5d49:     public void testOfflineSubscriptionWithSelectorAfterRestart() throws Exception {
1:57f5d49: 
1:57f5d49:         if (PersistenceAdapterChoice.LevelDB == defaultPersistenceAdapter) {
1:57f5d49:             // https://issues.apache.org/jira/browse/AMQ-4296
1:57f5d49:             return;
1:57f5d49:         }
1:57f5d49: 
1:57f5d49:         // create offline subs 1
1:57f5d49:         Connection con = createConnection("offCli1");
1:57f5d49:         Session session = con.createSession(false, Session.AUTO_ACKNOWLEDGE);
1:57f5d49:         session.createDurableSubscriber(topic, "SubsId", "filter = 'true'", true);
1:57f5d49:         session.close();
1:57f5d49:         con.close();
1:57f5d49: 
1:57f5d49:         // create offline subs 2
1:57f5d49:         con = createConnection("offCli2");
1:57f5d49:         session = con.createSession(false, Session.AUTO_ACKNOWLEDGE);
1:57f5d49:         session.createDurableSubscriber(topic, "SubsId", "filter = 'true'", true);
1:57f5d49:         session.close();
1:57f5d49:         con.close();
1:57f5d49: 
1:57f5d49:         // send messages
1:57f5d49:         con = createConnection();
1:57f5d49:         session = con.createSession(false, Session.AUTO_ACKNOWLEDGE);
1:57f5d49:         MessageProducer producer = session.createProducer(null);
1:57f5d49: 
1:57f5d49:         int filtered = 0;
1:57f5d49:         for (int i = 0; i < 10; i++) {
1:57f5d49:             boolean filter = (int) (Math.random() * 2) >= 1;
1:57f5d49:             if (filter)
1:57f5d49:                 filtered++;
1:57f5d49: 
1:57f5d49:             Message message = session.createMessage();
1:57f5d49:             message.setStringProperty("filter", filter ? "true" : "false");
1:57f5d49:             producer.send(topic, message);
1:57f5d49:         }
1:57f5d49: 
1:57f5d49:         LOG.info("sent: " + filtered);
1:57f5d49:         Thread.sleep(1 * 1000);
1:57f5d49:         session.close();
1:57f5d49:         con.close();
1:57f5d49: 
1:57f5d49:         // restart broker
1:57f5d49:         Thread.sleep(3 * 1000);
1:57f5d49:         broker.stop();
1:57f5d49:         createBroker(false /*deleteAllMessages*/);
1:57f5d49: 
1:57f5d49:         // send more messages
1:57f5d49:         con = createConnection();
1:57f5d49:         session = con.createSession(false, Session.AUTO_ACKNOWLEDGE);
1:57f5d49:         producer = session.createProducer(null);
1:57f5d49: 
1:57f5d49:         for (int i = 0; i < 10; i++) {
1:57f5d49:             boolean filter = (int) (Math.random() * 2) >= 1;
1:57f5d49:             if (filter)
1:57f5d49:                 filtered++;
1:57f5d49: 
1:57f5d49:             Message message = session.createMessage();
1:57f5d49:             message.setStringProperty("filter", filter ? "true" : "false");
1:57f5d49:             producer.send(topic, message);
1:57f5d49:         }
1:57f5d49: 
1:57f5d49:         LOG.info("after restart, total sent with filter='true': " + filtered);
1:57f5d49:         Thread.sleep(1 * 1000);
1:57f5d49:         session.close();
1:57f5d49:         con.close();
1:57f5d49: 
1:57f5d49:         // test offline subs
1:57f5d49:         con = createConnection("offCli1");
1:57f5d49:         session = con.createSession(false, Session.AUTO_ACKNOWLEDGE);
1:57f5d49:         MessageConsumer consumer = session.createDurableSubscriber(topic, "SubsId", "filter = 'true'", true);
1:57f5d49:         DurableSubscriptionOfflineTestListener listener = new DurableSubscriptionOfflineTestListener("1>");
1:57f5d49:         consumer.setMessageListener(listener);
1:57f5d49: 
1:57f5d49:         Connection con3 = createConnection("offCli2");
1:57f5d49:         Session session3 = con3.createSession(false, Session.AUTO_ACKNOWLEDGE);
1:57f5d49:         MessageConsumer consumer3 = session3.createDurableSubscriber(topic, "SubsId", "filter = 'true'", true);
1:57f5d49:         DurableSubscriptionOfflineTestListener listener3 = new DurableSubscriptionOfflineTestListener();
1:57f5d49:         consumer3.setMessageListener(listener3);
1:57f5d49: 
1:57f5d49:         Thread.sleep(3 * 1000);
1:57f5d49: 
1:57f5d49:         session.close();
1:57f5d49:         con.close();
1:57f5d49:         session3.close();
1:57f5d49:         con3.close();
1:57f5d49: 
1:57f5d49:         assertEquals(filtered, listener.count);
1:57f5d49:         assertEquals(filtered, listener3.count);
1:57f5d49:     }
1:57f5d49: 
1:57f5d49:     @Test(timeout = 60 * 1000)
1:57f5d49:     public void testOfflineSubscriptionAfterRestart() throws Exception {
1:57f5d49:         // create offline subs 1
1:57f5d49:         Connection con = createConnection("offCli1");
1:57f5d49:         Session session = con.createSession(false, Session.AUTO_ACKNOWLEDGE);
1:57f5d49:         MessageConsumer consumer = session.createDurableSubscriber(topic, "SubsId", null, false);
1:57f5d49:         DurableSubscriptionOfflineTestListener listener = new DurableSubscriptionOfflineTestListener();
1:57f5d49:         consumer.setMessageListener(listener);
1:57f5d49: 
1:57f5d49:         // send messages
1:57f5d49:         MessageProducer producer = session.createProducer(null);
1:57f5d49: 
1:57f5d49:         int sent = 0;
1:57f5d49:         for (int i = 0; i < 10; i++) {
1:57f5d49:             sent++;
1:57f5d49:             Message message = session.createMessage();
1:57f5d49:             message.setStringProperty("filter", "false");
1:57f5d49:             producer.send(topic, message);
1:57f5d49:         }
1:57f5d49: 
1:57f5d49:         LOG.info("sent: " + sent);
1:57f5d49:         Thread.sleep(5 * 1000);
1:57f5d49:         session.close();
1:57f5d49:         con.close();
1:57f5d49: 
1:57f5d49:         assertEquals(sent, listener.count);
1:57f5d49: 
1:57f5d49:         // restart broker
1:57f5d49:         Thread.sleep(3 * 1000);
1:57f5d49:         broker.stop();
1:57f5d49:         createBroker(false /*deleteAllMessages*/);
1:57f5d49: 
1:57f5d49:         // send more messages
1:57f5d49:         con = createConnection();
1:57f5d49:         session = con.createSession(false, Session.AUTO_ACKNOWLEDGE);
1:57f5d49:         producer = session.createProducer(null);
1:57f5d49: 
1:57f5d49:         for (int i = 0; i < 10; i++) {
1:57f5d49:             sent++;
1:57f5d49:             Message message = session.createMessage();
1:57f5d49:             message.setStringProperty("filter", "false");
1:57f5d49:             producer.send(topic, message);
1:57f5d49:         }
1:57f5d49: 
1:57f5d49:         LOG.info("after restart, sent: " + sent);
1:57f5d49:         Thread.sleep(1 * 1000);
1:57f5d49:         session.close();
1:57f5d49:         con.close();
1:57f5d49: 
1:57f5d49:         // test offline subs
1:57f5d49:         con = createConnection("offCli1");
1:57f5d49:         session = con.createSession(false, Session.AUTO_ACKNOWLEDGE);
1:18571ce:         consumer = session.createDurableSubscriber(topic, "SubsId", null, false);
1:57f5d49:         consumer.setMessageListener(listener);
1:57f5d49: 
1:57f5d49:         Thread.sleep(3 * 1000);
1:57f5d49: 
1:57f5d49:         session.close();
1:57f5d49:         con.close();
1:57f5d49: 
1:57f5d49:         assertEquals(sent, listener.count);
1:57f5d49:     }
1:57f5d49: 
1:57f5d49:     public class FilterCheckListener extends DurableSubscriptionOfflineTestListener  {
1:57f5d49: 
1:57f5d49:         @Override
1:57f5d49:         public void onMessage(Message message) {
1:57f5d49:             count++;
1:57f5d49: 
1:57f5d49:             try {
1:57f5d49:                 Object b = message.getObjectProperty("$b");
1:57f5d49:                 if (b != null) {
1:57f5d49:                     boolean c = message.getBooleanProperty("$c");
1:57f5d49:                     assertTrue("", c);
1:57f5d49:                 } else {
1:57f5d49:                     String d = message.getStringProperty("$d");
1:57f5d49:                     assertTrue("", "D1".equals(d) || "D2".equals(d));
1:57f5d49:                 }
1:57f5d49:             }
1:57f5d49:             catch (JMSException e) {
1:57f5d49:                 e.printStackTrace();
1:57f5d49:                 exceptions.add(e);
1:57f5d49:             }
1:57f5d49:         }
1:57f5d49:     }
1:57f5d49: }
============================================================================
author:Christopher L. Shannon (cshannon)
-------------------------------------------------------------------------------
commit:18571ce
/////////////////////////////////////////////////////////////////////////
1:         consumer = session.createDurableSubscriber(topic, "SubsId", null, false);
author:Kevin Earls
-------------------------------------------------------------------------------
commit:57f5d49
/////////////////////////////////////////////////////////////////////////
1: /**
1:  * Licensed to the Apache Software Foundation (ASF) under one or more
1:  * contributor license agreements.  See the NOTICE file distributed with
1:  * this work for additional information regarding copyright ownership.
1:  * The ASF licenses this file to You under the Apache License, Version 2.0
1:  * (the "License"); you may not use this file except in compliance with
1:  * the License.  You may obtain a copy of the License at
1:  *
1:  *      http://www.apache.org/licenses/LICENSE-2.0
1:  *
1:  * Unless required by applicable law or agreed to in writing, software
1:  * distributed under the License is distributed on an "AS IS" BASIS,
1:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:  * See the License for the specific language governing permissions and
1:  * limitations under the License.
1:  */
1: package org.apache.activemq.usecases;
1: 
1: import org.apache.activemq.TestSupport.PersistenceAdapterChoice;
1: import org.junit.Test;
1: import org.junit.runner.RunWith;
1: import org.junit.runners.Parameterized;
1: import org.slf4j.Logger;
1: import org.slf4j.LoggerFactory;
1: 
1: import javax.jms.Connection;
1: import javax.jms.JMSException;
1: import javax.jms.Message;
1: import javax.jms.MessageConsumer;
1: import javax.jms.MessageProducer;
1: import javax.jms.Session;
1: import java.util.ArrayList;
1: import java.util.Collection;
1: import java.util.List;
1: 
1: import static org.junit.Assert.assertEquals;
1: import static org.junit.Assert.assertTrue;
1: 
1: 
1: @RunWith(value = Parameterized.class)
1: public class DurableSubscriptionOffline3Test extends DurableSubscriptionOfflineTestBase {
1: 
1:     private static final Logger LOG = LoggerFactory.getLogger(DurableSubscriptionOffline3Test.class);
1: 
1:     @Parameterized.Parameters(name = "{0}")
1:     public static Collection<PersistenceAdapterChoice[]> getTestParameters() {
1:         String osName = System.getProperty("os.name");
1:         LOG.debug("Running on [" + osName + "]");
1: 
1:         PersistenceAdapterChoice[] kahaDb = {PersistenceAdapterChoice.KahaDB};
1:         PersistenceAdapterChoice[] jdbc = {PersistenceAdapterChoice.JDBC};
1:         List<PersistenceAdapterChoice[]> choices = new ArrayList<PersistenceAdapterChoice[]>();
1:         choices.add(kahaDb);
1:         choices.add(jdbc);
1:         if (!osName.equalsIgnoreCase("AIX") && !osName.equalsIgnoreCase("SunOS")) {
1:             PersistenceAdapterChoice[] levelDb = {PersistenceAdapterChoice.LevelDB};
1:             choices.add(levelDb);
1:         }
1: 
1:         return choices;
1:     }
1: 
1:     public DurableSubscriptionOffline3Test(PersistenceAdapterChoice persistenceAdapterChoice) {
1:         this.defaultPersistenceAdapter = persistenceAdapterChoice;
1: 
1:         LOG.info(">>>> running {} with persistenceAdapterChoice: {}", testName.getMethodName(), this.defaultPersistenceAdapter);
1:     }
1: 
1:     @Test(timeout = 60 * 1000)
1:     public void testInterleavedOfflineSubscriptionCanConsume() throws Exception {
1:         // create durable subscription 1
1:         Connection con = createConnection("cliId1");
1:         Session session = con.createSession(false, Session.AUTO_ACKNOWLEDGE);
1:         session.createDurableSubscriber(topic, "SubsId", "filter = 'true'", true);
1:         session.close();
1:         con.close();
1: 
1:         // send messages
1:         con = createConnection();
1:         session = con.createSession(false, Session.AUTO_ACKNOWLEDGE);
1:         MessageProducer producer = session.createProducer(null);
1: 
1:         int sent = 0;
1:         for (int i = 0; i < 10; i++) {
1:             sent++;
1:             Message message = session.createMessage();
1:             message.setStringProperty("filter", "true");
1:             producer.send(topic, message);
1:         }
1: 
1:         Thread.sleep(1 * 1000);
1: 
1:         // create durable subscription 2
1:         Connection con2 = createConnection("cliId2");
1:         Session session2 = con2.createSession(false, Session.AUTO_ACKNOWLEDGE);
1:         MessageConsumer consumer2 = session2.createDurableSubscriber(topic, "SubsId", "filter = 'true'", true);
1:         DurableSubscriptionOfflineTestListener listener2 = new DurableSubscriptionOfflineTestListener();
1:         consumer2.setMessageListener(listener2);
1: 
1:         assertEquals(0, listener2.count);
1:         session2.close();
1:         con2.close();
1: 
1:         // send some more
1:         for (int i = 0; i < 10; i++) {
1:             sent++;
1:             Message message = session.createMessage();
1:             message.setStringProperty("filter", "true");
1:             producer.send(topic, message);
1:         }
1: 
1:         Thread.sleep(1 * 1000);
1:         session.close();
1:         con.close();
1: 
1:         con2 = createConnection("cliId2");
1:         session2 = con2.createSession(false, Session.AUTO_ACKNOWLEDGE);
1:         consumer2 = session2.createDurableSubscriber(topic, "SubsId", "filter = 'true'", true);
1:         listener2 = new DurableSubscriptionOfflineTestListener("cliId2");
1:         consumer2.setMessageListener(listener2);
1:         // test online subs
1:         Thread.sleep(3 * 1000);
1: 
1:         assertEquals(10, listener2.count);
1: 
1:         // consume all messages
1:         con = createConnection("cliId1");
1:         session = con.createSession(false, Session.AUTO_ACKNOWLEDGE);
1:         MessageConsumer consumer = session.createDurableSubscriber(topic, "SubsId", "filter = 'true'", true);
1:         DurableSubscriptionOfflineTestListener listener = new DurableSubscriptionOfflineTestListener("cliId1");
1:         consumer.setMessageListener(listener);
1: 
1:         Thread.sleep(3 * 1000);
1: 
1:         session.close();
1:         con.close();
1: 
1:         assertEquals("offline consumer got all", sent, listener.count);
1:     }
1: 
1:     private static String filter = "$a='A1' AND (($b=true AND $c=true) OR ($d='D1' OR $d='D2'))";
1:     @Test(timeout = 60 * 1000)
1:     public void testMixOfOnLineAndOfflineSubsGetAllMatched() throws Exception {
1:         // create offline subs 1
1:         Connection con = createConnection("offCli1");
1:         Session session = con.createSession(false, Session.AUTO_ACKNOWLEDGE);
1:         session.createDurableSubscriber(topic, "SubsId", filter, true);
1:         session.close();
1:         con.close();
1: 
1:         // create offline subs 2
1:         con = createConnection("offCli2");
1:         session = con.createSession(false, Session.AUTO_ACKNOWLEDGE);
1:         session.createDurableSubscriber(topic, "SubsId", filter, true);
1:         session.close();
1:         con.close();
1: 
1:         // create online subs
1:         Connection con2 = createConnection("onlineCli1");
1:         Session session2 = con2.createSession(false, Session.AUTO_ACKNOWLEDGE);
1:         MessageConsumer consumer2 = session2.createDurableSubscriber(topic, "SubsId", filter, true);
1:         DurableSubscriptionOfflineTestListener listener2 = new DurableSubscriptionOfflineTestListener();
1:         consumer2.setMessageListener(listener2);
1: 
1:         // create non-durable consumer
1:         Connection con4 = createConnection("nondurableCli");
1:         Session session4 = con4.createSession(false, Session.AUTO_ACKNOWLEDGE);
1:         MessageConsumer consumer4 = session4.createConsumer(topic, filter, true);
1:         DurableSubscriptionOfflineTestListener listener4 = new DurableSubscriptionOfflineTestListener();
1:         consumer4.setMessageListener(listener4);
1: 
1:         // send messages
1:         con = createConnection();
1:         session = con.createSession(false, Session.AUTO_ACKNOWLEDGE);
1:         MessageProducer producer = session.createProducer(null);
1: 
1:         boolean hasRelevant = false;
1:         int filtered = 0;
1:         for (int i = 0; i < 100; i++) {
1:             int postf = (int) (Math.random() * 9) + 1;
1:             String d = "D" + postf;
1: 
1:             if ("D1".equals(d) || "D2".equals(d)) {
1:                 hasRelevant = true;
1:                 filtered++;
1:             }
1: 
1:             Message message = session.createMessage();
1:             message.setStringProperty("$a", "A1");
1:             message.setStringProperty("$d", d);
1:             producer.send(topic, message);
1:         }
1: 
1:         Message message = session.createMessage();
1:         message.setStringProperty("$a", "A1");
1:         message.setBooleanProperty("$b", true);
1:         message.setBooleanProperty("$c", hasRelevant);
1:         producer.send(topic, message);
1: 
1:         if (hasRelevant)
1:             filtered++;
1: 
1:         Thread.sleep(1 * 1000);
1:         session.close();
1:         con.close();
1: 
1:         Thread.sleep(3 * 1000);
1: 
1:         // test non-durable consumer
1:         session4.close();
1:         con4.close();
1:         assertEquals(filtered, listener4.count); // succeeded!
1: 
1:         // test online subs
1:         session2.close();
1:         con2.close();
1:         assertEquals(filtered, listener2.count); // succeeded!
1: 
1:         // test offline 1
1:         con = createConnection("offCli1");
1:         session = con.createSession(false, Session.AUTO_ACKNOWLEDGE);
1:         MessageConsumer consumer = session.createDurableSubscriber(topic, "SubsId", filter, true);
1:         DurableSubscriptionOfflineTestListener listener = new FilterCheckListener();
1:         consumer.setMessageListener(listener);
1: 
1:         Thread.sleep(3 * 1000);
1:         session.close();
1:         con.close();
1: 
1:         assertEquals(filtered, listener.count);
1: 
1:         // test offline 2
1:         Connection con3 = createConnection("offCli2");
1:         Session session3 = con3.createSession(false, Session.AUTO_ACKNOWLEDGE);
1:         MessageConsumer consumer3 = session3.createDurableSubscriber(topic, "SubsId", filter, true);
1:         DurableSubscriptionOfflineTestListener listener3 = new FilterCheckListener();
1:         consumer3.setMessageListener(listener3);
1: 
1:         Thread.sleep(3 * 1000);
1:         session3.close();
1:         con3.close();
1: 
1:         assertEquals(filtered, listener3.count);
1:         assertTrue("no unexpected exceptions: " + exceptions, exceptions.isEmpty());
1:     }
1: 
1:     @Test(timeout = 60 * 1000)
1:     public void testOfflineSubscriptionWithSelectorAfterRestart() throws Exception {
1: 
1:         if (PersistenceAdapterChoice.LevelDB == defaultPersistenceAdapter) {
1:             // https://issues.apache.org/jira/browse/AMQ-4296
1:             return;
1:         }
1: 
1:         // create offline subs 1
1:         Connection con = createConnection("offCli1");
1:         Session session = con.createSession(false, Session.AUTO_ACKNOWLEDGE);
1:         session.createDurableSubscriber(topic, "SubsId", "filter = 'true'", true);
1:         session.close();
1:         con.close();
1: 
1:         // create offline subs 2
1:         con = createConnection("offCli2");
1:         session = con.createSession(false, Session.AUTO_ACKNOWLEDGE);
1:         session.createDurableSubscriber(topic, "SubsId", "filter = 'true'", true);
1:         session.close();
1:         con.close();
1: 
1:         // send messages
1:         con = createConnection();
1:         session = con.createSession(false, Session.AUTO_ACKNOWLEDGE);
1:         MessageProducer producer = session.createProducer(null);
1: 
1:         int filtered = 0;
1:         for (int i = 0; i < 10; i++) {
1:             boolean filter = (int) (Math.random() * 2) >= 1;
1:             if (filter)
1:                 filtered++;
1: 
1:             Message message = session.createMessage();
1:             message.setStringProperty("filter", filter ? "true" : "false");
1:             producer.send(topic, message);
1:         }
1: 
1:         LOG.info("sent: " + filtered);
1:         Thread.sleep(1 * 1000);
1:         session.close();
1:         con.close();
1: 
1:         // restart broker
1:         Thread.sleep(3 * 1000);
1:         broker.stop();
1:         createBroker(false /*deleteAllMessages*/);
1: 
1:         // send more messages
1:         con = createConnection();
1:         session = con.createSession(false, Session.AUTO_ACKNOWLEDGE);
1:         producer = session.createProducer(null);
1: 
1:         for (int i = 0; i < 10; i++) {
1:             boolean filter = (int) (Math.random() * 2) >= 1;
1:             if (filter)
1:                 filtered++;
1: 
1:             Message message = session.createMessage();
1:             message.setStringProperty("filter", filter ? "true" : "false");
1:             producer.send(topic, message);
1:         }
1: 
1:         LOG.info("after restart, total sent with filter='true': " + filtered);
1:         Thread.sleep(1 * 1000);
1:         session.close();
1:         con.close();
1: 
1:         // test offline subs
1:         con = createConnection("offCli1");
1:         session = con.createSession(false, Session.AUTO_ACKNOWLEDGE);
1:         MessageConsumer consumer = session.createDurableSubscriber(topic, "SubsId", "filter = 'true'", true);
1:         DurableSubscriptionOfflineTestListener listener = new DurableSubscriptionOfflineTestListener("1>");
1:         consumer.setMessageListener(listener);
1: 
1:         Connection con3 = createConnection("offCli2");
1:         Session session3 = con3.createSession(false, Session.AUTO_ACKNOWLEDGE);
1:         MessageConsumer consumer3 = session3.createDurableSubscriber(topic, "SubsId", "filter = 'true'", true);
1:         DurableSubscriptionOfflineTestListener listener3 = new DurableSubscriptionOfflineTestListener();
1:         consumer3.setMessageListener(listener3);
1: 
1:         Thread.sleep(3 * 1000);
1: 
1:         session.close();
1:         con.close();
1:         session3.close();
1:         con3.close();
1: 
1:         assertEquals(filtered, listener.count);
1:         assertEquals(filtered, listener3.count);
1:     }
1: 
1:     @Test(timeout = 60 * 1000)
1:     public void testOfflineSubscriptionAfterRestart() throws Exception {
1:         // create offline subs 1
1:         Connection con = createConnection("offCli1");
1:         Session session = con.createSession(false, Session.AUTO_ACKNOWLEDGE);
1:         MessageConsumer consumer = session.createDurableSubscriber(topic, "SubsId", null, false);
1:         DurableSubscriptionOfflineTestListener listener = new DurableSubscriptionOfflineTestListener();
1:         consumer.setMessageListener(listener);
1: 
1:         // send messages
1:         MessageProducer producer = session.createProducer(null);
1: 
1:         int sent = 0;
1:         for (int i = 0; i < 10; i++) {
1:             sent++;
1:             Message message = session.createMessage();
1:             message.setStringProperty("filter", "false");
1:             producer.send(topic, message);
1:         }
1: 
1:         LOG.info("sent: " + sent);
1:         Thread.sleep(5 * 1000);
1:         session.close();
1:         con.close();
1: 
1:         assertEquals(sent, listener.count);
1: 
1:         // restart broker
1:         Thread.sleep(3 * 1000);
1:         broker.stop();
1:         createBroker(false /*deleteAllMessages*/);
1: 
1:         // send more messages
1:         con = createConnection();
1:         session = con.createSession(false, Session.AUTO_ACKNOWLEDGE);
1:         producer = session.createProducer(null);
1: 
1:         for (int i = 0; i < 10; i++) {
1:             sent++;
1:             Message message = session.createMessage();
1:             message.setStringProperty("filter", "false");
1:             producer.send(topic, message);
1:         }
1: 
1:         LOG.info("after restart, sent: " + sent);
1:         Thread.sleep(1 * 1000);
1:         session.close();
1:         con.close();
1: 
1:         // test offline subs
1:         con = createConnection("offCli1");
1:         session = con.createSession(false, Session.AUTO_ACKNOWLEDGE);
0:         consumer = session.createDurableSubscriber(topic, "SubsId", null, true);
1:         consumer.setMessageListener(listener);
1: 
1:         Thread.sleep(3 * 1000);
1: 
1:         session.close();
1:         con.close();
1: 
1:         assertEquals(sent, listener.count);
1:     }
1: 
1:     public class FilterCheckListener extends DurableSubscriptionOfflineTestListener  {
1: 
1:         @Override
1:         public void onMessage(Message message) {
1:             count++;
1: 
1:             try {
1:                 Object b = message.getObjectProperty("$b");
1:                 if (b != null) {
1:                     boolean c = message.getBooleanProperty("$c");
1:                     assertTrue("", c);
1:                 } else {
1:                     String d = message.getStringProperty("$d");
1:                     assertTrue("", "D1".equals(d) || "D2".equals(d));
1:                 }
1:             }
1:             catch (JMSException e) {
1:                 e.printStackTrace();
1:                 exceptions.add(e);
1:             }
1:         }
1:     }
1: }
============================================================================