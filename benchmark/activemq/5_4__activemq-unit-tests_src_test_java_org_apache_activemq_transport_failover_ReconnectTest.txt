2:cafe4cb: /**
1:fc00993:  * Licensed to the Apache Software Foundation (ASF) under one or more
1:fc00993:  * contributor license agreements.  See the NOTICE file distributed with
1:fc00993:  * this work for additional information regarding copyright ownership.
1:fc00993:  * The ASF licenses this file to You under the Apache License, Version 2.0
1:fc00993:  * (the "License"); you may not use this file except in compliance with
1:fc00993:  * the License.  You may obtain a copy of the License at
1:b0c2a40:  *
1:fc00993:  *      http://www.apache.org/licenses/LICENSE-2.0
5:cafe4cb:  *
1:cafe4cb:  * Unless required by applicable law or agreed to in writing, software
1:cafe4cb:  * distributed under the License is distributed on an "AS IS" BASIS,
1:cafe4cb:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:cafe4cb:  * See the License for the specific language governing permissions and
1:cafe4cb:  * limitations under the License.
2:cafe4cb:  */
1:cafe4cb: package org.apache.activemq.transport.failover;
32:cafe4cb: 
1:cafe4cb: import java.io.IOException;
1:cafe4cb: import java.net.URI;
1:cafe4cb: import java.net.URISyntaxException;
1:74a7a8b: import java.util.concurrent.CountDownLatch;
1:74a7a8b: import java.util.concurrent.TimeUnit;
1:74a7a8b: import java.util.concurrent.atomic.AtomicBoolean;
1:cafe4cb: import java.util.concurrent.atomic.AtomicInteger;
1:cafe4cb: import javax.jms.DeliveryMode;
1:cafe4cb: import javax.jms.JMSException;
1:cafe4cb: import javax.jms.MessageConsumer;
1:cafe4cb: import javax.jms.MessageProducer;
1:cafe4cb: import javax.jms.Session;
1:cafe4cb: import junit.framework.TestCase;
1:cafe4cb: import org.apache.activemq.ActiveMQConnection;
1:cafe4cb: import org.apache.activemq.ActiveMQConnectionFactory;
1:cafe4cb: import org.apache.activemq.broker.BrokerService;
1:cafe4cb: import org.apache.activemq.broker.TransportConnector;
1:cafe4cb: import org.apache.activemq.command.ActiveMQQueue;
1:cafe4cb: import org.apache.activemq.transport.TransportListener;
1:cafe4cb: import org.apache.activemq.transport.mock.MockTransport;
1:cafe4cb: import org.apache.activemq.util.ServiceStopper;
1:1878e95: import org.apache.activemq.util.Wait;
1:8bf987b: import org.slf4j.Logger;
1:8bf987b: import org.slf4j.LoggerFactory;
1:c6b88f1: 
1:cafe4cb: public class ReconnectTest extends TestCase {
1:230a86c: 
1:cafe4cb:     public static final int MESSAGES_PER_ITTERATION = 10;
1:230a86c:     public static final int WORKER_COUNT = 10;
1:fc00993: 
1:8bf987b:     private static final Logger LOG = LoggerFactory.getLogger(ReconnectTest.class);
1:fc00993: 
1:230a86c:     private BrokerService bs;
1:230a86c:     private URI tcpUri;
1:a1c427e:     private final AtomicInteger resumedCount = new AtomicInteger();
1:a1c427e:     private final AtomicInteger interruptedCount = new AtomicInteger();
1:230a86c:     private Worker[] workers;
1:cafe4cb: 
1:c6b88f1:     class Worker implements Runnable {
1:cafe4cb: 
1:230a86c:         public AtomicInteger iterations = new AtomicInteger();
1:230a86c:         public CountDownLatch stopped = new CountDownLatch(1);
1:933eb2f: 
1:a1c427e:         private final ActiveMQConnection connection;
1:a1c427e:         private final AtomicBoolean stop = new AtomicBoolean(false);
1:230a86c:         private Throwable error;
1:a1c427e:         private final String name;
1:230a86c: 
1:c6b88f1:         public Worker(final String name) throws URISyntaxException, JMSException {
1:1878e95:             this.name = name;
1:a1c427e:             URI uri = new URI("failover://(mock://(" + tcpUri + "))?updateURIsSupported=false");
1:230a86c:             ActiveMQConnectionFactory factory = new ActiveMQConnectionFactory(uri);
1:1878e95:             connection = (ActiveMQConnection) factory.createConnection();
1:230a86c:             connection.addTransportListener(new TransportListener() {
1:230a86c:                 public void onCommand(Object command) {
3:230a86c:                 }
1:230a86c: 
1:230a86c:                 public void onException(IOException error) {
2:230a86c:                     setError(error);
1:c6b88f1:                 }
1:230a86c: 
1:230a86c:                 public void transportInterupted() {
1:1878e95:                     LOG.info("Worker " + name + " was interrupted...");
1:230a86c:                     interruptedCount.incrementAndGet();
1:230a86c:                 }
1:230a86c: 
1:230a86c:                 public void transportResumed() {
1:1878e95:                     LOG.info("Worker " + name + " was resummed...");
1:c6b88f1:                     resumedCount.incrementAndGet();
1:230a86c:                 }
1:230a86c:             });
1:230a86c:             connection.start();
1:230a86c:         }
1:230a86c: 
1:230a86c:         public void failConnection() {
1:a1c427e:             MockTransport mockTransport = connection.getTransportChannel().narrow(MockTransport.class);
1:230a86c:             mockTransport.onException(new IOException("Simulated error"));
1:230a86c:         }
1:230a86c: 
1:230a86c:         public void start() {
1:230a86c:             new Thread(this).start();
1:230a86c:         }
1:230a86c: 
1:230a86c:         public void stop() {
1:230a86c:             stop.set(true);
1:230a86c:             try {
1:230a86c:                 if (!stopped.await(5, TimeUnit.SECONDS)) {
1:230a86c:                     connection.close();
1:8179df8:                     stopped.await(5, TimeUnit.SECONDS);
1:230a86c:                 } else {
1:230a86c:                     connection.close();
1:230a86c:                 }
1:230a86c:             } catch (Exception e) {
1:230a86c:                 e.printStackTrace();
1:230a86c:             }
1:230a86c:         }
1:230a86c: 
1:230a86c:         public void run() {
1:230a86c:             try {
1:1878e95:                 ActiveMQQueue queue = new ActiveMQQueue("FOO_" + name);
1:230a86c:                 Session session = connection.createSession(false, Session.AUTO_ACKNOWLEDGE);
1:230a86c:                 MessageConsumer consumer = session.createConsumer(queue);
1:230a86c:                 MessageProducer producer = session.createProducer(queue);
1:230a86c:                 producer.setDeliveryMode(DeliveryMode.PERSISTENT);
1:230a86c:                 while (!stop.get()) {
1:230a86c:                     for (int i = 0; i < MESSAGES_PER_ITTERATION; i++) {
1:230a86c:                         producer.send(session.createTextMessage("TEST:" + i));
1:230a86c:                     }
1:230a86c:                     for (int i = 0; i < MESSAGES_PER_ITTERATION; i++) {
1:230a86c:                         consumer.receive();
1:230a86c:                     }
1:230a86c:                     iterations.incrementAndGet();
1:230a86c:                 }
1:230a86c:                 session.close();
1:230a86c:             } catch (JMSException e) {
1:230a86c:                 setError(e);
1:230a86c:             } finally {
1:230a86c:                 stopped.countDown();
1:230a86c:             }
1:230a86c:         }
1:230a86c: 
1:230a86c:         public synchronized Throwable getError() {
1:230a86c:             return error;
1:230a86c:         }
1:230a86c: 
1:230a86c:         public synchronized void setError(Throwable error) {
1:230a86c:             this.error = error;
1:230a86c:         }
1:230a86c: 
1:230a86c:         public synchronized void assertNoErrors() {
1:230a86c:             if (error != null) {
1:230a86c:                 error.printStackTrace();
1:1878e95:                 fail("Worker " + name + " got Exception: " + error);
1:230a86c:             }
1:230a86c:         }
1:230a86c:     }
1:230a86c: 
1:cafe4cb:     public void testReconnects() throws Exception {
1:230a86c: 
1:c6b88f1:         for (int k = 1; k < 10; k++) {
1:fc00993:             LOG.info("Test run: " + k);
1:230a86c: 
1:230a86c:             // Wait for at least one iteration to occur...
1:230a86c:             for (int i = 0; i < WORKER_COUNT; i++) {
1:1878e95:                 int c = 0;
1:c6b88f1:                 for (int j = 0; j < 30; j++) {
1:1878e95:                     c = workers[i].iterations.getAndSet(0);
1:1878e95:                     if (c != 0) {
1:1878e95:                         break;
1:1878e95:                     }
1:230a86c:                     workers[i].assertNoErrors();
1:1878e95:                     LOG.info("Test run " + k + ": Waiting for worker " + i + " to finish an iteration.");
1:c6b88f1:                     Thread.sleep(1000);
1:c6b88f1:                 }
1:1878e95:                 assertTrue("Test run " + k + ": Worker " + i + " never completed an interation.", c != 0);
1:230a86c:                 workers[i].assertNoErrors();
1:c6b88f1:             }
1:230a86c: 
1:fc00993:             LOG.info("Simulating transport error to cause reconnect.");
1:230a86c: 
1:230a86c:             // Simulate a transport failure.
1:230a86c:             for (int i = 0; i < WORKER_COUNT; i++) {
1:230a86c:                 workers[i].failConnection();
1:c6b88f1:             }
1:230a86c: 
1:1878e95:             assertTrue("Timed out waiting for all connections to be interrupted.", Wait.waitFor(new Wait.Condition(){
1:1878e95:                 public boolean isSatisified() throws Exception {
1:1878e95:                     LOG.debug("Test run waiting for connections to get interrupted.. at: " + interruptedCount.get());
1:1878e95:                     return interruptedCount.get() == WORKER_COUNT;
1:1878e95:                 }
1:1878e95:             }, TimeUnit.SECONDS.toMillis(60)));
1:230a86c: 
1:c6b88f1:             // Wait for the connections to re-establish...
1:1878e95:             assertTrue("Timed out waiting for all connections to be resumed.", Wait.waitFor(new Wait.Condition(){
1:1878e95:                 public boolean isSatisified() throws Exception {
1:1878e95:                     LOG.debug("Test run waiting for connections to get resumed.. at: " + resumedCount.get());
1:1878e95:                     return resumedCount.get() >= WORKER_COUNT;
1:1878e95:                 }
1:1878e95:             }, TimeUnit.SECONDS.toMillis(60)));
1:230a86c: 
1:230a86c:             // Reset the counters..
1:230a86c:             interruptedCount.set(0);
1:c6b88f1:             resumedCount.set(0);
1:230a86c:             for (int i = 0; i < WORKER_COUNT; i++) {
1:230a86c:                 workers[i].iterations.set(0);
1:230a86c:             }
1:1878e95: 
1:c6b88f1:             Thread.sleep(1000);
1:230a86c:         }
1:230a86c:     }
1:c6b88f1: 
1:a1c427e:     @Override
1:cafe4cb:     protected void setUp() throws Exception {
1:230a86c:         bs = new BrokerService();
1:230a86c:         bs.setPersistent(false);
1:230a86c:         bs.setUseJmx(true);
1:230a86c:         TransportConnector connector = bs.addConnector("tcp://localhost:0");
1:230a86c:         bs.start();
1:230a86c:         tcpUri = connector.getConnectUri();
1:230a86c:         workers = new Worker[WORKER_COUNT];
1:230a86c:         for (int i = 0; i < WORKER_COUNT; i++) {
1:1878e95:             workers[i] = new Worker("" + i);
1:230a86c:             workers[i].start();
1:230a86c:         }
1:230a86c:     }
1:230a86c: 
1:a1c427e:     @Override
1:cafe4cb:     protected void tearDown() throws Exception {
1:230a86c:         for (int i = 0; i < WORKER_COUNT; i++) {
1:230a86c:             workers[i].stop();
1:230a86c:         }
1:cafe4cb:         new ServiceStopper().stop(bs);
1:230a86c:     }
1:230a86c: }
============================================================================
author:Timothy A. Bish
-------------------------------------------------------------------------------
commit:ef24cc9
commit:1878e95
/////////////////////////////////////////////////////////////////////////
1: import org.apache.activemq.util.Wait;
/////////////////////////////////////////////////////////////////////////
1:             this.name = name;
1:             connection = (ActiveMQConnection) factory.createConnection();
/////////////////////////////////////////////////////////////////////////
1:                     LOG.info("Worker " + name + " was interrupted...");
1:                     LOG.info("Worker " + name + " was resummed...");
/////////////////////////////////////////////////////////////////////////
1:                 ActiveMQQueue queue = new ActiveMQQueue("FOO_" + name);
/////////////////////////////////////////////////////////////////////////
1:                 fail("Worker " + name + " got Exception: " + error);
1:                 int c = 0;
1:                     c = workers[i].iterations.getAndSet(0);
1:                     if (c != 0) {
1:                         break;
1:                     }
1:                     LOG.info("Test run " + k + ": Waiting for worker " + i + " to finish an iteration.");
1:                 assertTrue("Test run " + k + ": Worker " + i + " never completed an interation.", c != 0);
/////////////////////////////////////////////////////////////////////////
1:             assertTrue("Timed out waiting for all connections to be interrupted.", Wait.waitFor(new Wait.Condition(){
1:                 public boolean isSatisified() throws Exception {
1:                     LOG.debug("Test run waiting for connections to get interrupted.. at: " + interruptedCount.get());
1:                     return interruptedCount.get() == WORKER_COUNT;
1:                 }
1:             }, TimeUnit.SECONDS.toMillis(60)));
1:             assertTrue("Timed out waiting for all connections to be resumed.", Wait.waitFor(new Wait.Condition(){
1:                 public boolean isSatisified() throws Exception {
1:                     LOG.debug("Test run waiting for connections to get resumed.. at: " + resumedCount.get());
1:                     return resumedCount.get() >= WORKER_COUNT;
1:                 }
1:             }, TimeUnit.SECONDS.toMillis(60)));
/////////////////////////////////////////////////////////////////////////
1: 
/////////////////////////////////////////////////////////////////////////
1:             workers[i] = new Worker("" + i);
/////////////////////////////////////////////////////////////////////////
author:Hiram R. Chirino
-------------------------------------------------------------------------------
commit:b0c2a40
/////////////////////////////////////////////////////////////////////////
1:  * 
commit:c6b88f1
/////////////////////////////////////////////////////////////////////////
1: 
/////////////////////////////////////////////////////////////////////////
0:     private AtomicInteger resumedCount = new AtomicInteger();
1:     class Worker implements Runnable {
/////////////////////////////////////////////////////////////////////////
1:         public Worker(final String name) throws URISyntaxException, JMSException {
/////////////////////////////////////////////////////////////////////////
0:                     LOG.info("Worker "+name+" was interrupted...");
0:                     LOG.info("Worker "+name+" was resummed...");
1:                     resumedCount.incrementAndGet();
/////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////
0:                 fail("Worker "+name+" got Exception: " + error);
/////////////////////////////////////////////////////////////////////////
1:         for (int k = 1; k < 10; k++) {
0:                int c=0;
1:                 for (int j = 0; j < 30; j++) {
0:                        c = workers[i].iterations.getAndSet(0);
0:                        if( c != 0 ) {
0:                                break;
1:                        }
0:                     LOG.info("Test run "+k+": Waiting for worker " + i + " to finish an iteration.");
0:                 assertTrue("Test run "+k+": Worker " + i + " never completed an interation.", c != 0);
/////////////////////////////////////////////////////////////////////////
0:             long start;
0:             start = System.currentTimeMillis();
0:                if( System.currentTimeMillis()-start > 1000*60 ) {
0:                       fail("Timed out waiting for all connections to be interrupted.");
1:                }
0:                 LOG.info("Test run "+k+": Waiting for connections to get interrupted.. at: " + interruptedCount.get());
1:             // Wait for the connections to re-establish...
0:             start = System.currentTimeMillis();
0:             while (resumedCount.get() < WORKER_COUNT) {
0:                if( System.currentTimeMillis()-start > 1000*60 ) {
0:                        fail("Timed out waiting for all connections to be resumed.");
1:                }
0:                 LOG.info("Test run "+k+": Waiting for connections to get resumed.. at: " + resumedCount.get());
1:                 Thread.sleep(1000);
1:             }
1:             resumedCount.set(0);
1:             
1:             Thread.sleep(1000);
commit:933eb2f
/////////////////////////////////////////////////////////////////////////
1: 
0:         private ActiveMQConnection connection;
0:         private AtomicBoolean stop = new AtomicBoolean(false);
commit:fc00993
/////////////////////////////////////////////////////////////////////////
1:  * Licensed to the Apache Software Foundation (ASF) under one or more
1:  * contributor license agreements.  See the NOTICE file distributed with
1:  * this work for additional information regarding copyright ownership.
1:  * The ASF licenses this file to You under the Apache License, Version 2.0
1:  * (the "License"); you may not use this file except in compliance with
1:  * the License.  You may obtain a copy of the License at
1:  *      http://www.apache.org/licenses/LICENSE-2.0
/////////////////////////////////////////////////////////////////////////
1: 
0:     private static final Log LOG = LogFactory.getLog(ReconnectTest.class);
1: 
/////////////////////////////////////////////////////////////////////////
1:             LOG.info("Test run: " + k);
0:                     LOG.info("Waiting for worker " + i + " to finish an iteration.");
1:             LOG.info("Simulating transport error to cause reconnect.");
/////////////////////////////////////////////////////////////////////////
0:                 LOG.info("Waiting for connections to get interrupted.. at: " + interruptedCount.get());
0:             LOG.info("Pausing before starting next iterations...");
commit:74a7a8b
/////////////////////////////////////////////////////////////////////////
1: import java.util.concurrent.CountDownLatch;
1: import java.util.concurrent.TimeUnit;
1: import java.util.concurrent.atomic.AtomicBoolean;
/////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////
commit:230a86c
/////////////////////////////////////////////////////////////////////////
1: 
1:     public static final int WORKER_COUNT = 10;
1:     private BrokerService bs;
1:     private URI tcpUri;
0:     private AtomicInteger interruptedCount = new AtomicInteger();
1:     private Worker[] workers;
0:     class Worker implements Runnable, ExceptionListener {
0:         private ActiveMQConnection connection;
0:         private AtomicBoolean stop = new AtomicBoolean(false);
1:         public AtomicInteger iterations = new AtomicInteger();
1:         public CountDownLatch stopped = new CountDownLatch(1);
1:         private Throwable error;
0:         public Worker() throws URISyntaxException, JMSException {
0:             URI uri = new URI("failover://(mock://(" + tcpUri + "))");
1:             ActiveMQConnectionFactory factory = new ActiveMQConnectionFactory(uri);
0:             connection = (ActiveMQConnection)factory.createConnection();
0:             connection.setExceptionListener(this);
1:             connection.addTransportListener(new TransportListener() {
1:                 public void onCommand(Object command) {
1:                 }
1:                 public void onException(IOException error) {
1:                     setError(error);
1:                 }
1:                 public void transportInterupted() {
1:                     interruptedCount.incrementAndGet();
1:                 }
1: 
1:                 public void transportResumed() {
1:                 }
1:             });
1:             connection.start();
1:         }
1: 
1:         public void failConnection() {
0:             MockTransport mockTransport = (MockTransport)connection.getTransportChannel().narrow(MockTransport.class);
1:             mockTransport.onException(new IOException("Simulated error"));
1:         }
1: 
1:         public void start() {
1:             new Thread(this).start();
1:         }
1: 
1:         public void stop() {
1:             stop.set(true);
1:             try {
1:                 if (!stopped.await(5, TimeUnit.SECONDS)) {
1:                     connection.close();
0:                     stopped.await();
1:                 } else {
1:                     connection.close();
1:                 }
1:             } catch (Exception e) {
1:                 e.printStackTrace();
1:             }
1:         }
1: 
1:         public void run() {
1:             try {
0:                 ActiveMQQueue queue = new ActiveMQQueue("FOO");
1:                 Session session = connection.createSession(false, Session.AUTO_ACKNOWLEDGE);
1:                 MessageConsumer consumer = session.createConsumer(queue);
1:                 MessageProducer producer = session.createProducer(queue);
1:                 producer.setDeliveryMode(DeliveryMode.PERSISTENT);
1:                 while (!stop.get()) {
1:                     for (int i = 0; i < MESSAGES_PER_ITTERATION; i++) {
1:                         producer.send(session.createTextMessage("TEST:" + i));
1:                     }
1:                     for (int i = 0; i < MESSAGES_PER_ITTERATION; i++) {
1:                         consumer.receive();
1:                     }
1:                     iterations.incrementAndGet();
1:                 }
1:                 session.close();
1:             } catch (JMSException e) {
1:                 setError(e);
1:             } finally {
1:                 stopped.countDown();
1:             }
1:         }
1: 
0:         public void onException(JMSException error) {
1:             setError(error);
0:             stop();
1:         }
1: 
1:         public synchronized Throwable getError() {
1:             return error;
1:         }
1: 
1:         public synchronized void setError(Throwable error) {
1:             this.error = error;
1:         }
1: 
1:         public synchronized void assertNoErrors() {
1:             if (error != null) {
1:                 error.printStackTrace();
0:                 fail("Got Exception: " + error);
1:             }
1:         }
1: 
1:     }
1: 
0:         for (int k = 1; k < 5; k++) {
0:             log.info("Test run: " + k);
1:             // Wait for at least one iteration to occur...
1:             for (int i = 0; i < WORKER_COUNT; i++) {
0:                 for (int j = 0; workers[i].iterations.get() == 0 && j < 5; j++) {
1:                     workers[i].assertNoErrors();
0:                     log.info("Waiting for worker " + i + " to finish an iteration.");
0:                     Thread.sleep(1000);
1:                 }
0:                 assertTrue("Worker " + i + " never completed an interation.", workers[i].iterations.get() != 0);
1:                 workers[i].assertNoErrors();
1:             }
1: 
0:             log.info("Simulating transport error to cause reconnect.");
1: 
1:             // Simulate a transport failure.
1:             for (int i = 0; i < WORKER_COUNT; i++) {
1:                 workers[i].failConnection();
1:             }
1: 
0:             // Wait for the connections to get interrupted...
0:             while (interruptedCount.get() < WORKER_COUNT) {
0:                 log.info("Waiting for connections to get interrupted.. at: " + interruptedCount.get());
0:                 Thread.sleep(1000);
1:             }
1: 
0:             // let things stablize..
0:             log.info("Pausing before starting next iterations...");
0:             Thread.sleep(1000);
1: 
1:             // Reset the counters..
1:             interruptedCount.set(0);
1:             for (int i = 0; i < WORKER_COUNT; i++) {
1:                 workers[i].iterations.set(0);
1:             }
1: 
1:         }
1: 
1:         bs = new BrokerService();
1:         bs.setPersistent(false);
1:         bs.setUseJmx(true);
1:         TransportConnector connector = bs.addConnector("tcp://localhost:0");
1:         bs.start();
1:         tcpUri = connector.getConnectUri();
1: 
1:         workers = new Worker[WORKER_COUNT];
1:         for (int i = 0; i < WORKER_COUNT; i++) {
0:             workers[i] = new Worker();
1:             workers[i].start();
1:         }
1: 
1:         for (int i = 0; i < WORKER_COUNT; i++) {
1:             workers[i].stop();
1:         }
commit:86cbdfd
/////////////////////////////////////////////////////////////////////////
0: import java.util.concurrent.CountDownLatch;
0: import java.util.concurrent.TimeUnit;
0: import java.util.concurrent.atomic.AtomicBoolean;
commit:cafe4cb
/////////////////////////////////////////////////////////////////////////
1: /**
1:  *
0:  * Copyright 2005-2006 The Apache Software Foundation
1:  *
0:  * Licensed under the Apache License, Version 2.0 (the "License");
0:  * you may not use this file except in compliance with the License.
0:  * You may obtain a copy of the License at
1:  *
0:  * http://www.apache.org/licenses/LICENSE-2.0
1:  *
1:  * Unless required by applicable law or agreed to in writing, software
1:  * distributed under the License is distributed on an "AS IS" BASIS,
1:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:  * See the License for the specific language governing permissions and
1:  * limitations under the License.
1:  */
1: package org.apache.activemq.transport.failover;
1: 
1: import java.io.IOException;
1: import java.net.URI;
1: import java.net.URISyntaxException;
1: import java.util.concurrent.atomic.AtomicInteger;
1: 
1: import javax.jms.DeliveryMode;
0: import javax.jms.ExceptionListener;
1: import javax.jms.JMSException;
1: import javax.jms.MessageConsumer;
1: import javax.jms.MessageProducer;
1: import javax.jms.Session;
1: 
1: import junit.framework.TestCase;
1: 
1: import org.apache.activemq.ActiveMQConnection;
1: import org.apache.activemq.ActiveMQConnectionFactory;
1: import org.apache.activemq.broker.BrokerService;
1: import org.apache.activemq.broker.TransportConnector;
1: import org.apache.activemq.command.ActiveMQQueue;
1: import org.apache.activemq.transport.TransportListener;
1: import org.apache.activemq.transport.mock.MockTransport;
1: import org.apache.activemq.util.ServiceStopper;
0: import org.apache.commons.logging.Log;
0: import org.apache.commons.logging.LogFactory;
1: 
0: import edu.emory.mathcs.backport.java.util.concurrent.CountDownLatch;
0: import edu.emory.mathcs.backport.java.util.concurrent.TimeUnit;
0: import edu.emory.mathcs.backport.java.util.concurrent.atomic.AtomicBoolean;
1: 
1: /**
1:  *
0:  * @version $Revision: 1.1 $
1:  */
1: public class ReconnectTest extends TestCase {
1:     
0:     protected static final Log log = LogFactory.getLog(ReconnectTest.class);
1: 	public static final int MESSAGES_PER_ITTERATION = 10;
0: 	public static final int WORKER_COUNT = 10;
0: 	private BrokerService bs;
0: 	private URI tcpUri;
0: 	private AtomicInteger interruptedCount = new AtomicInteger();
0: 	private Worker[] workers;
1: 
0: 	class Worker implements Runnable, ExceptionListener {
1: 		
0: 		private ActiveMQConnection connection;
0: 		private AtomicBoolean stop=new AtomicBoolean(false);
0: 		public AtomicInteger iterations = new AtomicInteger();
0: 		public CountDownLatch stopped = new CountDownLatch(1);
0: 		private Throwable error;
1: 		
0: 		public Worker() throws URISyntaxException, JMSException {
0: 			URI uri = new URI("failover://(mock://("+tcpUri+"))");
0: 			ActiveMQConnectionFactory factory = new ActiveMQConnectionFactory(uri);
0: 			connection = (ActiveMQConnection)factory.createConnection();
0: 			connection.setExceptionListener(this);
0: 			connection.addTransportListener(new TransportListener() {
0: 				public void onCommand(Object command) {
0: 				}
0: 				public void onException(IOException error) {
0: 					setError(error);
0: 				}
0: 				public void transportInterupted() {
0: 					interruptedCount.incrementAndGet();
0: 				}
0: 				public void transportResumed() {
0: 				}});
0: 			connection.start();
0: 		}
1: 		
0: 	    public void failConnection() {
0: 			MockTransport mockTransport = (MockTransport)connection.getTransportChannel().narrow(MockTransport.class);
0: 	    	mockTransport.onException(new IOException("Simulated error"));
0: 	    }
1: 	    
0: 	    public void start() {
0: 	    	new Thread(this).start();
0: 	    }
0: 	    public void stop() {
0: 	    	stop.set(true);
0: 	    	try {
0: 				if( !stopped.await(5, TimeUnit.SECONDS) ) {
0: 					connection.close();
0: 					stopped.await();
0: 				} else {
0: 					connection.close();
0: 				}
0: 			} catch (Exception e) {
0: 				e.printStackTrace();
0: 			}
0: 	    }
1: 	    
0: 	    public void run() {
0: 	    	try {
0: 	    		ActiveMQQueue queue = new ActiveMQQueue("FOO");
0: 				Session session = connection.createSession(false, Session.AUTO_ACKNOWLEDGE);
0: 				MessageConsumer consumer = session.createConsumer(queue);
0: 				MessageProducer producer = session.createProducer(queue);
0: 				producer.setDeliveryMode(DeliveryMode.PERSISTENT);
0: 				while( !stop.get() ) {
0: 					for( int i=0; i < MESSAGES_PER_ITTERATION; i++) {
0: 						producer.send(session.createTextMessage("TEST:"+i));
0: 					}
0: 					for( int i=0; i < MESSAGES_PER_ITTERATION; i++) {
0: 						consumer.receive();
0: 					}
0: 					iterations.incrementAndGet();
0: 				}
0: 				session.close();
0: 			} catch (JMSException e) {
0: 				setError(e);
0: 			} finally {
0: 				stopped.countDown();
0: 			}
0: 	    }
1: 
0: 		public void onException(JMSException error) {
0: 			setError(error);
0: 			stop();
0: 		}
1: 
1: 
0: 		public synchronized Throwable getError() {
0: 			return error;
0: 		}
0: 		public synchronized void setError(Throwable error) {
0: 			this.error = error;
0: 		}
1: 
0: 		public synchronized void assertNoErrors() {
0: 			if( error !=null ) {
0: 				error.printStackTrace();
0: 				fail("Got Exception: "+error);
0: 			}
0: 		}
1: 		
0: 	}
1: 	
1:     public void testReconnects() throws Exception {
1:     	
0:     	for( int k=1; k < 5; k++ ) {
1:     		
0:         	System.out.println("Test run: "+k);
1:     		
0:     		// Wait for at least one iteration to occur...
0:         	for (int i=0; i < WORKER_COUNT; i++) {
0:         		for( int j=0; workers[i].iterations.get() == 0 && j < 5; j++ ) {
0:         			workers[i].assertNoErrors();
0:         			System.out.println("Waiting for worker "+i+" to finish an iteration.");
0:         			Thread.sleep(1000);
0:         		}
0:         		assertTrue("Worker "+i+" never completed an interation.", workers[i].iterations.get()!=0);
0:     			workers[i].assertNoErrors();
0:         	}
1:     		
0:         	System.out.println("Simulating transport error to cause reconnect.");
1:         	
0:         	// Simulate a transport failure.
0:         	for (int i=0; i < WORKER_COUNT; i++) {
0:         		workers[i].failConnection();
0:         	}
1:         	
0:     		// Wait for the connections to get interrupted...
0:         	while ( interruptedCount.get() < WORKER_COUNT ) {
0:     			System.out.println("Waiting for connections to get interrupted.. at: "+interruptedCount.get());
0:     			Thread.sleep(1000);
0:         	}
1: 
0:         	// let things stablize..
0: 			System.out.println("Pausing before starting next iterations...");
0:         	Thread.sleep(1000);
1: 
0:         	// Reset the counters..
0:         	interruptedCount.set(0);
0:         	for (int i=0; i < WORKER_COUNT; i++) {
0:         		workers[i].iterations.set(0);
0:         	}
1: 
0:     	}
1:     	
0:     }
1: 
1:     protected void setUp() throws Exception {
0:     	bs = new BrokerService();
0:     	bs.setPersistent(false);
0:     	bs.setUseJmx(true);
0:     	TransportConnector connector = bs.addConnector("tcp://localhost:0");
0:     	bs.start();
0:     	tcpUri = connector.getConnectUri();
1:     	
0:     	workers = new Worker[WORKER_COUNT];
0:     	for (int i=0; i < WORKER_COUNT; i++) {
0:     		workers[i] = new Worker();
0:     		workers[i].start();
0:     	}
1:     	    	
0:     }
1: 
1:     protected void tearDown() throws Exception {
0:     	for (int i=0; i < WORKER_COUNT; i++) {
0:     		workers[i].stop();
0:     	}
1:         new ServiceStopper().stop(bs);
0:     }
1: 
0: }
author:Bosanac Dejan
-------------------------------------------------------------------------------
commit:8bf987b
/////////////////////////////////////////////////////////////////////////
1: import org.slf4j.Logger;
1: import org.slf4j.LoggerFactory;
/////////////////////////////////////////////////////////////////////////
1:     private static final Logger LOG = LoggerFactory.getLogger(ReconnectTest.class);
author:Robert Davies
-------------------------------------------------------------------------------
commit:a1c427e
/////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////
1:     private final AtomicInteger resumedCount = new AtomicInteger();
1:     private final AtomicInteger interruptedCount = new AtomicInteger();
/////////////////////////////////////////////////////////////////////////
1:         private final ActiveMQConnection connection;
1:         private final AtomicBoolean stop = new AtomicBoolean(false);
1:         private final String name;
1:             URI uri = new URI("failover://(mock://(" + tcpUri + "))?updateURIsSupported=false");
/////////////////////////////////////////////////////////////////////////
1:             MockTransport mockTransport = connection.getTransportChannel().narrow(MockTransport.class);
/////////////////////////////////////////////////////////////////////////
1:     @Override
/////////////////////////////////////////////////////////////////////////
1:     @Override
commit:2db7df7
/////////////////////////////////////////////////////////////////////////
0:         private String name;
0:         public Worker(String name) throws URISyntaxException, JMSException {
0:             this.name=name;
/////////////////////////////////////////////////////////////////////////
0:                 ActiveMQQueue queue = new ActiveMQQueue("FOO_"+name);
/////////////////////////////////////////////////////////////////////////
0:             workers[i] = new Worker(""+i);
commit:8179df8
/////////////////////////////////////////////////////////////////////////
1:                     stopped.await(5, TimeUnit.SECONDS);
author:James Strachan
-------------------------------------------------------------------------------
commit:aa1aa58
/////////////////////////////////////////////////////////////////////////
0: 
0:     public static final int MESSAGES_PER_ITTERATION = 10;
/////////////////////////////////////////////////////////////////////////
0:         	log.info("Test run: "+k);
0:         			log.info("Waiting for worker "+i+" to finish an iteration.");
0:         	log.info("Simulating transport error to cause reconnect.");
/////////////////////////////////////////////////////////////////////////
0:     			log.info("Waiting for connections to get interrupted.. at: "+interruptedCount.get());
0: 			log.info("Pausing before starting next iterations...");
============================================================================