1:67ccfca: /**
1:67ccfca:  * Licensed to the Apache Software Foundation (ASF) under one or more
1:67ccfca:  * contributor license agreements.  See the NOTICE file distributed with
1:67ccfca:  * this work for additional information regarding copyright ownership.
1:67ccfca:  * The ASF licenses this file to You under the Apache License, Version 2.0
1:67ccfca:  * (the "License"); you may not use this file except in compliance with
1:67ccfca:  * the License.  You may obtain a copy of the License at
1:67ccfca:  *
1:67ccfca:  *      http://www.apache.org/licenses/LICENSE-2.0
1:67ccfca:  *
1:67ccfca:  * Unless required by applicable law or agreed to in writing, software
1:67ccfca:  * distributed under the License is distributed on an "AS IS" BASIS,
1:67ccfca:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:67ccfca:  * See the License for the specific language governing permissions and
1:67ccfca:  * limitations under the License.
1:67ccfca:  */
1:67ccfca: package org.apache.activemq.security;
1:67ccfca: 
1:67ccfca: import java.security.cert.X509Certificate;
1:67ccfca: 
1:67ccfca: /**
1:67ccfca:  * Base for all broker plugins that wish to provide connection authentication services
1:67ccfca:  */
1:67ccfca: public interface AuthenticationBroker {
1:67ccfca: 
1:67ccfca:     /**
1:67ccfca:      * Authenticate the given user using the mechanism provided by this service.
1:67ccfca:      *
1:67ccfca:      * @param username
1:67ccfca:      *        the given user name to authenticate, null indicates an anonymous user.
1:67ccfca:      * @param password
1:67ccfca:      *        the given password for the user to authenticate.
1:67ccfca:      * @param peerCertificates
1:67ccfca:      *        for an SSL channel the certificates from remote peer.
1:67ccfca:      *
1:67ccfca:      * @return a new SecurityContext for the authenticated user.
1:67ccfca:      *
1:67ccfca:      * @throws SecurityException if the user cannot be authenticated.
1:67ccfca:      */
1:67ccfca:     SecurityContext authenticate(String username, String password, X509Certificate[] peerCertificates) throws SecurityException;
1:67ccfca: 
1:67ccfca: }
============================================================================
author:Timothy Bish
-------------------------------------------------------------------------------
commit:67ccfca
/////////////////////////////////////////////////////////////////////////
1: /**
1:  * Licensed to the Apache Software Foundation (ASF) under one or more
1:  * contributor license agreements.  See the NOTICE file distributed with
1:  * this work for additional information regarding copyright ownership.
1:  * The ASF licenses this file to You under the Apache License, Version 2.0
1:  * (the "License"); you may not use this file except in compliance with
1:  * the License.  You may obtain a copy of the License at
1:  *
1:  *      http://www.apache.org/licenses/LICENSE-2.0
1:  *
1:  * Unless required by applicable law or agreed to in writing, software
1:  * distributed under the License is distributed on an "AS IS" BASIS,
1:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:  * See the License for the specific language governing permissions and
1:  * limitations under the License.
1:  */
1: package org.apache.activemq.security;
1: 
1: import java.security.cert.X509Certificate;
1: 
1: /**
1:  * Base for all broker plugins that wish to provide connection authentication services
1:  */
1: public interface AuthenticationBroker {
1: 
1:     /**
1:      * Authenticate the given user using the mechanism provided by this service.
1:      *
1:      * @param username
1:      *        the given user name to authenticate, null indicates an anonymous user.
1:      * @param password
1:      *        the given password for the user to authenticate.
1:      * @param peerCertificates
1:      *        for an SSL channel the certificates from remote peer.
1:      *
1:      * @return a new SecurityContext for the authenticated user.
1:      *
1:      * @throws SecurityException if the user cannot be authenticated.
1:      */
1:     SecurityContext authenticate(String username, String password, X509Certificate[] peerCertificates) throws SecurityException;
1: 
1: }
============================================================================