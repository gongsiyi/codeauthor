1:0af0021: /**
1:0af0021:  * Licensed to the Apache Software Foundation (ASF) under one or more
1:0af0021:  * contributor license agreements.  See the NOTICE file distributed with
1:0af0021:  * this work for additional information regarding copyright ownership.
1:0af0021:  * The ASF licenses this file to You under the Apache License, Version 2.0
1:0af0021:  * (the "License"); you may not use this file except in compliance with
1:0af0021:  * the License.  You may obtain a copy of the License at
1:0af0021:  *
1:0af0021:  *      http://www.apache.org/licenses/LICENSE-2.0
1:0af0021:  *
1:0af0021:  * Unless required by applicable law or agreed to in writing, software
1:0af0021:  * distributed under the License is distributed on an "AS IS" BASIS,
1:0af0021:  * WITHOUT WARRANTIES OR ONDITIONS OF ANY KIND, either express or implied.
1:0af0021:  * See the License for the specific language governing permissions and
1:0af0021:  * limitations under the License.
1:0af0021:  */
1:0af0021: package org.apache.activemq.usecases;
7:0af0021: 
1:0af0021: import static org.junit.Assert.assertTrue;
1:0af0021: 
1:0af0021: import java.io.File;
1:0af0021: import java.util.concurrent.TimeUnit;
1:0af0021: 
1:0af0021: import javax.jms.Connection;
1:0af0021: import javax.jms.ConnectionFactory;
1:0af0021: import javax.jms.JMSException;
1:0af0021: import javax.jms.Message;
1:0af0021: import javax.jms.MessageConsumer;
1:0af0021: import javax.jms.MessageProducer;
1:0af0021: import javax.jms.Session;
1:0af0021: 
1:0af0021: import org.apache.activemq.ActiveMQConnectionFactory;
1:0af0021: import org.apache.activemq.broker.BrokerFactory;
1:0af0021: import org.apache.activemq.broker.BrokerService;
1:0af0021: import org.apache.activemq.command.ActiveMQTopic;
1:0af0021: import org.apache.activemq.store.kahadb.KahaDBPersistenceAdapter;
1:0af0021: import org.apache.activemq.util.Wait;
1:0af0021: import org.junit.After;
1:0af0021: import org.junit.Before;
1:0af0021: import org.junit.Test;
1:0af0021: import org.slf4j.Logger;
1:0af0021: import org.slf4j.LoggerFactory;
1:0af0021: 
1:0af0021: public class DurableSubSelectorDelayTest {
1:0af0021: 
1:0af0021:     private static final Logger LOG = LoggerFactory.getLogger(DurableSubSelectorDelayTest.class);
1:0af0021: 
1:0af0021:     public static final long RUNTIME = 3 * 60 * 1000;
1:0af0021: 
1:0af0021:     private BrokerService broker;
1:0af0021:     private ActiveMQTopic topic;
1:1419103:     private String connectionUri;
1:0af0021: 
1:0af0021:     @Test
1:0af0021:     public void testProcess() throws Exception {
1:0af0021: 
1:0af0021:         MsgProducer msgProducer = new MsgProducer();
1:0af0021:         msgProducer.start();
1:0af0021: 
1:0af0021:         DurableSubscriber subscribers[] = new DurableSubscriber[10];
1:0af0021: 
1:0af0021:         for (int i = 0; i < subscribers.length; i++) {
1:0af0021:             subscribers[i] = new DurableSubscriber(i);
1:0af0021:             subscribers[i].process();
1:0af0021:         }
1:0af0021: 
1:0af0021:         // wait for server to finish
1:0af0021:         msgProducer.join();
1:0af0021: 
1:0af0021:         for (int j = 0; j < subscribers.length; j++) {
1:0af0021:             LOG.info("Unsubscribing subscriber " + subscribers[j]);
1:0af0021:             subscribers[j].unsubscribe();
1:0af0021:         }
1:0af0021: 
1:0af0021:         // allow the clean up thread time to run
1:0af0021:         TimeUnit.MINUTES.sleep(2);
1:0af0021: 
1:0af0021:         final KahaDBPersistenceAdapter pa = (KahaDBPersistenceAdapter) broker.getPersistenceAdapter();
1:9079095:         assertTrue("less than two journal file should be left, was: " + pa.getStore().getJournal().getFileMap().size(), Wait.waitFor(new Wait.Condition() {
1:0af0021: 
1:0af0021:             @Override
1:0af0021:             public boolean isSatisified() throws Exception {
1:9079095:                 return pa.getStore().getJournal().getFileMap().size() <= 2;
1:0af0021:             }
1:0af0021:         }, TimeUnit.MINUTES.toMillis(2)));
1:0af0021: 
1:0af0021:         LOG.info("DONE.");
1:0af0021:     }
1:0af0021: 
1:0af0021:     /**
1:0af0021:      * Message Producer
1:0af0021:      */
1:0af0021:     final class MsgProducer extends Thread {
1:0af0021: 
1:9079095:         final String url = "vm://" + DurableSubSelectorDelayTest.getName();
1:0af0021: 
2:0af0021:         final ConnectionFactory cf = new ActiveMQConnectionFactory(url);
1:0af0021: 
1:0af0021:         int transRover = 0;
1:0af0021:         int messageRover = 0;
1:9079095:         int count = 40;
1:0af0021: 
1:0af0021:         public MsgProducer() {
1:0af0021:             super("MsgProducer");
1:0af0021:             setDaemon(true);
1:0af0021:         }
1:0af0021: 
1:9079095:         public MsgProducer(int count) {
1:9079095:             super("MsgProducer");
1:9079095:             setDaemon(true);
1:9079095:             this.count = count;
1:9079095:         }
1:9079095: 
1:0af0021:         @Override
1:0af0021:         public void run() {
1:0af0021:             long endTime = RUNTIME + System.currentTimeMillis();
1:0af0021: 
1:0af0021:             try {
1:0af0021:                 while (endTime > System.currentTimeMillis()) {
1:0af0021:                     Thread.sleep(400);
1:0af0021:                     send();
1:0af0021:                 }
1:0af0021:             } catch (Throwable e) {
1:9079095:                 e.printStackTrace(System.out);
1:9079095:                 throw new RuntimeException(e);
1:0af0021:             }
1:0af0021:         }
1:0af0021: 
1:0af0021:         public void send() throws JMSException {
1:0af0021: 
1:0af0021:             int trans = ++transRover;
1:0af0021:             boolean relevantTrans = true;
1:0af0021: 
1:9079095:             LOG.info("Sending Trans[id=" + trans + ", count=" + count + "]");
1:0af0021: 
1:0af0021:             Connection con = cf.createConnection();
1:0af0021: 
1:0af0021:             Session sess = con.createSession(false, Session.AUTO_ACKNOWLEDGE);
1:0af0021: 
1:0af0021:             MessageProducer prod = sess.createProducer(null);
1:0af0021: 
1:0af0021:             for (int i = 0; i < count; i++) {
1:0af0021:                 Message message = sess.createMessage();
1:0af0021:                 message.setIntProperty("ID", ++messageRover);
1:0af0021:                 message.setIntProperty("TRANS", trans);
1:0af0021:                 message.setBooleanProperty("RELEVANT", false);
1:0af0021:                 prod.send(topic, message);
1:0af0021:             }
1:0af0021: 
1:0af0021:             Message message = sess.createMessage();
1:0af0021:             message.setIntProperty("ID", ++messageRover);
1:0af0021:             message.setIntProperty("TRANS", trans);
1:0af0021:             message.setBooleanProperty("COMMIT", true);
1:0af0021:             message.setBooleanProperty("RELEVANT", relevantTrans);
1:0af0021:             prod.send(topic, message);
1:0af0021: 
1:9079095:             LOG.info("Committed Trans[id=" + trans + ", count=" + count + "], ID=" + messageRover);
1:0af0021: 
1:0af0021:             sess.close();
1:0af0021:             con.close();
1:0af0021:         }
1:0af0021:     }
1:0af0021: 
1:0af0021:     /**
1:0af0021:      * Consumes massages from a durable subscription. Goes online/offline
1:0af0021:      * periodically. Checks the incoming messages against the sent messages of
1:0af0021:      * the server.
1:0af0021:      */
1:0af0021:     private final class DurableSubscriber {
1:0af0021: 
1:1419103:         final ConnectionFactory cf = new ActiveMQConnectionFactory(connectionUri);
1:0af0021: 
1:9079095:         private final String subName;
1:0af0021: 
1:0af0021:         private final int id;
1:0af0021:         private final String conClientId;
1:0af0021:         private final String selector;
1:0af0021: 
1:0af0021:         public DurableSubscriber(int id) throws JMSException {
1:0af0021:             this.id = id;
1:0af0021:             conClientId = "cli" + id;
1:9079095:             subName = "subscription" + id;
1:9079095:             selector = "RELEVANT = true";
1:0af0021:         }
1:0af0021: 
1:0af0021:         private void process() throws JMSException {
1:0af0021:             long end = System.currentTimeMillis() + 20000;
1:0af0021:             int transCount = 0;
1:0af0021: 
1:0af0021:             LOG.info(toString() + " ONLINE.");
1:0af0021:             Connection con = openConnection();
1:0af0021: 
1:0af0021:             Session sess = con.createSession(false, Session.AUTO_ACKNOWLEDGE);
1:1419103:             MessageConsumer consumer = sess.createDurableSubscriber(topic, subName, selector, false);
1:1419103: 
1:0af0021:             try {
1:0af0021: 
1:0af0021:                 do {
1:0af0021:                     long max = end - System.currentTimeMillis();
1:0af0021: 
1:0af0021:                     if (max <= 0) {
1:9079095:                         break;
1:0af0021:                     }
1:0af0021: 
1:0af0021:                     Message message = consumer.receive(max);
1:1419103:                     if (message == null) {
1:0af0021:                         continue;
1:1419103:                     }
1:0af0021: 
1:9079095:                     LOG.info("Received Trans[id=" + message.getIntProperty("TRANS") + ", count=" + transCount + "] in " + this + ".");
1:0af0021: 
1:0af0021:                 } while (true);
1:1419103: 
1:0af0021:             } finally {
1:0af0021:                 sess.close();
1:0af0021:                 con.close();
1:0af0021: 
1:0af0021:                 LOG.info(toString() + " OFFLINE.");
1:0af0021:             }
1:0af0021:         }
1:0af0021: 
1:0af0021:         private Connection openConnection() throws JMSException {
1:0af0021:             Connection con = cf.createConnection();
1:0af0021:             con.setClientID(conClientId);
1:0af0021:             con.start();
1:0af0021:             return con;
1:0af0021:         }
1:0af0021: 
1:0af0021:         private void unsubscribe() throws JMSException {
1:0af0021:             Connection con = openConnection();
1:9079095:             Session session = con.createSession(false, Session.AUTO_ACKNOWLEDGE);
1:0af0021:             session.unsubscribe(subName);
1:0af0021:             session.close();
1:0af0021:             con.close();
1:0af0021:         }
1:0af0021: 
1:0af0021:         @Override
1:0af0021:         public String toString() {
1:0af0021:             return "DurableSubscriber[id=" + id + "]";
1:0af0021:         }
1:0af0021:     }
1:0af0021: 
1:0af0021:     @Before
1:0af0021:     public void setUp() throws Exception {
1:0af0021:         topic = new ActiveMQTopic("TopicT");
1:0af0021:         startBroker();
1:0af0021:     }
1:0af0021: 
1:0af0021:     @After
1:0af0021:     public void tearDown() throws Exception {
1:0af0021:         destroyBroker();
1:0af0021:     }
1:0af0021: 
1:0af0021:     private void startBroker() throws Exception {
1:0af0021:         startBroker(true);
1:0af0021:     }
1:0af0021: 
1:0af0021:     private void startBroker(boolean deleteAllMessages) throws Exception {
1:0af0021:         if (broker != null)
1:0af0021:             return;
1:0af0021: 
1:0af0021:         broker = BrokerFactory.createBroker("broker:(vm://" + getName() + ")");
1:0af0021:         broker.setBrokerName(getName());
1:0af0021:         broker.setAdvisorySupport(false);
1:0af0021:         broker.setDeleteAllMessagesOnStartup(deleteAllMessages);
1:0af0021: 
1:0af0021:         File kahadbData = new File("activemq-data/" + getName() + "-kahadb");
1:9079095:         if (deleteAllMessages)
1:9079095:             delete(kahadbData);
1:0af0021: 
1:9079095:         broker.setPersistent(true);
1:9079095:         KahaDBPersistenceAdapter kahadb = new KahaDBPersistenceAdapter();
1:9079095:         kahadb.setDirectory(kahadbData);
1:9079095:         kahadb.setJournalMaxFileLength(500 * 1024);
1:9079095:         broker.setPersistenceAdapter(kahadb);
1:0af0021: 
1:1419103:         connectionUri = broker.addConnector("tcp://localhost:0").getPublishableConnectString();
1:0af0021: 
1:0af0021:         broker.getSystemUsage().getMemoryUsage().setLimit(256 * 1024 * 1024);
1:0af0021:         broker.getSystemUsage().getTempUsage().setLimit(256 * 1024 * 1024);
1:0af0021:         broker.getSystemUsage().getStoreUsage().setLimit(256 * 1024 * 1024);
1:0af0021: 
1:0af0021:         broker.start();
1:0af0021:     }
1:0af0021: 
1:0af0021:     protected static String getName() {
1:0af0021:         return "DurableSubSelectorDelayTest";
1:0af0021:     }
1:0af0021: 
1:0af0021:     private static boolean delete(File path) {
1:0af0021:         if (path == null)
1:0af0021:             return true;
1:0af0021: 
1:0af0021:         if (path.isDirectory()) {
1:0af0021:             for (File file : path.listFiles()) {
1:0af0021:                 delete(file);
1:0af0021:             }
1:0af0021:         }
1:0af0021:         return path.delete();
1:0af0021:     }
1:0af0021: 
1:0af0021:     private void destroyBroker() throws Exception {
1:0af0021:         if (broker == null)
1:0af0021:             return;
1:0af0021: 
1:0af0021:         broker.stop();
1:0af0021:         broker = null;
1:0af0021:     }
1:0af0021: }
============================================================================
author:Timothy A. Bish
-------------------------------------------------------------------------------
commit:ef24cc9
commit:9079095
/////////////////////////////////////////////////////////////////////////
1:         assertTrue("less than two journal file should be left, was: " + pa.getStore().getJournal().getFileMap().size(), Wait.waitFor(new Wait.Condition() {
1:                 return pa.getStore().getJournal().getFileMap().size() <= 2;
/////////////////////////////////////////////////////////////////////////
1:         final String url = "vm://" + DurableSubSelectorDelayTest.getName();
1:         int count = 40;
1:         public MsgProducer(int count) {
1:             super("MsgProducer");
1:             setDaemon(true);
1:             this.count = count;
1:         }
1: 
/////////////////////////////////////////////////////////////////////////
1:                 e.printStackTrace(System.out);
1:                 throw new RuntimeException(e);
/////////////////////////////////////////////////////////////////////////
1:             LOG.info("Sending Trans[id=" + trans + ", count=" + count + "]");
/////////////////////////////////////////////////////////////////////////
1:             LOG.info("Committed Trans[id=" + trans + ", count=" + count + "], ID=" + messageRover);
/////////////////////////////////////////////////////////////////////////
1:         private final String subName;
/////////////////////////////////////////////////////////////////////////
1:             subName = "subscription" + id;
1:             selector = "RELEVANT = true";
/////////////////////////////////////////////////////////////////////////
1:                         break;
/////////////////////////////////////////////////////////////////////////
1:                     LOG.info("Received Trans[id=" + message.getIntProperty("TRANS") + ", count=" + transCount + "] in " + this + ".");
/////////////////////////////////////////////////////////////////////////
1:             Session session = con.createSession(false, Session.AUTO_ACKNOWLEDGE);
/////////////////////////////////////////////////////////////////////////
1:         if (deleteAllMessages)
1:             delete(kahadbData);
1:         broker.setPersistent(true);
1:         KahaDBPersistenceAdapter kahadb = new KahaDBPersistenceAdapter();
1:         kahadb.setDirectory(kahadbData);
1:         kahadb.setJournalMaxFileLength(500 * 1024);
1:         broker.setPersistenceAdapter(kahadb);
commit:735f2c0
/////////////////////////////////////////////////////////////////////////
0:         assertTrue("only two journal files should be left ", Wait.waitFor(new Wait.Condition() {
0:                 return pa.getStore().getJournal().getFileMap().size() == 2;
commit:1419103
/////////////////////////////////////////////////////////////////////////
1:     private String connectionUri;
/////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////
1:         final ConnectionFactory cf = new ActiveMQConnectionFactory(connectionUri);
/////////////////////////////////////////////////////////////////////////
1:             MessageConsumer consumer = sess.createDurableSubscriber(topic, subName, selector, false);
1: 
/////////////////////////////////////////////////////////////////////////
1:                     if (message == null) {
1:                     }
1: 
/////////////////////////////////////////////////////////////////////////
1:         connectionUri = broker.addConnector("tcp://localhost:0").getPublishableConnectString();
commit:0af0021
/////////////////////////////////////////////////////////////////////////
1: /**
1:  * Licensed to the Apache Software Foundation (ASF) under one or more
1:  * contributor license agreements.  See the NOTICE file distributed with
1:  * this work for additional information regarding copyright ownership.
1:  * The ASF licenses this file to You under the Apache License, Version 2.0
1:  * (the "License"); you may not use this file except in compliance with
1:  * the License.  You may obtain a copy of the License at
1:  *
1:  *      http://www.apache.org/licenses/LICENSE-2.0
1:  *
1:  * Unless required by applicable law or agreed to in writing, software
1:  * distributed under the License is distributed on an "AS IS" BASIS,
1:  * WITHOUT WARRANTIES OR ONDITIONS OF ANY KIND, either express or implied.
1:  * See the License for the specific language governing permissions and
1:  * limitations under the License.
1:  */
1: package org.apache.activemq.usecases;
1: 
1: import static org.junit.Assert.assertTrue;
1: 
1: import java.io.File;
1: import java.util.concurrent.TimeUnit;
1: 
1: import javax.jms.Connection;
1: import javax.jms.ConnectionFactory;
1: import javax.jms.JMSException;
1: import javax.jms.Message;
1: import javax.jms.MessageConsumer;
1: import javax.jms.MessageProducer;
1: import javax.jms.Session;
1: 
1: import org.apache.activemq.ActiveMQConnectionFactory;
1: import org.apache.activemq.broker.BrokerFactory;
1: import org.apache.activemq.broker.BrokerService;
1: import org.apache.activemq.command.ActiveMQTopic;
1: import org.apache.activemq.store.kahadb.KahaDBPersistenceAdapter;
1: import org.apache.activemq.util.Wait;
1: import org.junit.After;
1: import org.junit.Before;
1: import org.junit.Test;
1: import org.slf4j.Logger;
1: import org.slf4j.LoggerFactory;
1: 
1: public class DurableSubSelectorDelayTest {
1: 
1:     private static final Logger LOG = LoggerFactory.getLogger(DurableSubSelectorDelayTest.class);
1: 
1:     public static final long RUNTIME = 3 * 60 * 1000;
1: 
1:     private BrokerService broker;
1:     private ActiveMQTopic topic;
1: 
1:     @Test
1:     public void testProcess() throws Exception {
1: 
1:         MsgProducer msgProducer = new MsgProducer();
1:         msgProducer.start();
1: 
1:         DurableSubscriber subscribers[] = new DurableSubscriber[10];
1: 
1:         for (int i = 0; i < subscribers.length; i++) {
1:             subscribers[i] = new DurableSubscriber(i);
1:             subscribers[i].process();
1:         }
1: 
1:         // wait for server to finish
1:         msgProducer.join();
1: 
1:         for (int j = 0; j < subscribers.length; j++) {
1: 
1:             LOG.info("Unsubscribing subscriber " + subscribers[j]);
1: 
0:             // broker.getAdminView().destroyDurableSubscriber(clientID,
0:             // Client.SUBSCRIPTION_NAME);
1: 
1:             subscribers[j].unsubscribe();
1:         }
1: 
1:         // allow the clean up thread time to run
1:         TimeUnit.MINUTES.sleep(2);
1: 
1:         final KahaDBPersistenceAdapter pa = (KahaDBPersistenceAdapter) broker.getPersistenceAdapter();
0:         assertTrue("only one journal file should be left ", Wait.waitFor(new Wait.Condition() {
1: 
1:             @Override
1:             public boolean isSatisified() throws Exception {
0:                 return pa.getStore().getJournal().getFileMap().size() == 1;
1:             }
1:         }, TimeUnit.MINUTES.toMillis(2)));
1: 
1:         LOG.info("DONE.");
1:     }
1: 
1:     /**
1:      * Message Producer
1:      */
1:     final class MsgProducer extends Thread {
1: 
0:          final String url = "vm://"
0:                  + DurableSubSelectorDelayTest.getName();
1: 
1:         final ConnectionFactory cf = new ActiveMQConnectionFactory(url);
1: 
1:         int transRover = 0;
1:         int messageRover = 0;
1: 
1:         public MsgProducer() {
1:             super("MsgProducer");
1:             setDaemon(true);
1:         }
1: 
1:         @Override
1:         public void run() {
1:             long endTime = RUNTIME + System.currentTimeMillis();
1: 
1:             try {
1:                 while (endTime > System.currentTimeMillis()) {
1:                     Thread.sleep(400);
1:                     send();
1:                 }
1:             } catch (Throwable e) {
0:                e.printStackTrace(System.out);
0:                throw new RuntimeException(e);
1:             }
1:         }
1: 
1:         public void send() throws JMSException {
1: 
1:             int trans = ++transRover;
1:             boolean relevantTrans = true;
0:             int count = 40;
1: 
0:             LOG.info("Sending Trans[id=" + trans + ", count="
0:                     + count + "]");
1: 
1:             Connection con = cf.createConnection();
1: 
1:             Session sess = con.createSession(false, Session.AUTO_ACKNOWLEDGE);
1: 
1:             MessageProducer prod = sess.createProducer(null);
1: 
1:             for (int i = 0; i < count; i++) {
1:                 Message message = sess.createMessage();
1:                 message.setIntProperty("ID", ++messageRover);
1:                 message.setIntProperty("TRANS", trans);
1:                 message.setBooleanProperty("RELEVANT", false);
1:                 prod.send(topic, message);
1:             }
1: 
1:             Message message = sess.createMessage();
1:             message.setIntProperty("ID", ++messageRover);
1:             message.setIntProperty("TRANS", trans);
1:             message.setBooleanProperty("COMMIT", true);
1:             message.setBooleanProperty("RELEVANT", relevantTrans);
1:             prod.send(topic, message);
1: 
0:             LOG.info("Committed Trans[id=" + trans + ", count="
0:                     + count + "], ID=" + messageRover);
1: 
1:             sess.close();
1:             con.close();
1:         }
1:     }
1: 
1:     /**
1:      * Consumes massages from a durable subscription. Goes online/offline
1:      * periodically. Checks the incoming messages against the sent messages of
1:      * the server.
1:      */
1:     private final class DurableSubscriber {
1: 
0:         String url = "tcp://localhost:61656";
1: 
1:         final ConnectionFactory cf = new ActiveMQConnectionFactory(url);
1: 
0:         private final String subName ;
1: 
1:         private final int id;
1:         private final String conClientId;
1:         private final String selector;
1: 
1:         public DurableSubscriber(int id) throws JMSException {
1:             this.id = id;
1:             conClientId = "cli" + id;
0:             subName = "subscription"+ id;
0:             selector ="RELEVANT = true";
1:         }
1: 
1:         private void process() throws JMSException {
1:             long end = System.currentTimeMillis() + 20000;
1:             int transCount = 0;
1: 
1:             LOG.info(toString() + " ONLINE.");
1:             Connection con = openConnection();
1: 
1:             Session sess = con.createSession(false, Session.AUTO_ACKNOWLEDGE);
1: 
1: 
0:             MessageConsumer consumer = sess.createDurableSubscriber(topic,
0:                     subName, selector, false);
1: 
0:             //MessageConsumer consumer = sess.createDurableSubscriber(topic,SUBSCRIPTION_NAME);
1:             try {
1:                 do {
1:                     long max = end - System.currentTimeMillis();
1: 
1:                     if (max <= 0) {
0:                             break;
1:                     }
1: 
1:                     Message message = consumer.receive(max);
0:                     if (message == null)
1:                         continue;
1: 
0:                     LOG.info("Received Trans[id="
0:                             + message.getIntProperty("TRANS") + ", count="
0:                             + transCount + "] in " + this + ".");
1: 
1:                 } while (true);
1:             } finally {
1:                 sess.close();
1:                 con.close();
1: 
1:                 LOG.info(toString() + " OFFLINE.");
1:             }
1:         }
1: 
1:         private Connection openConnection() throws JMSException {
1:             Connection con = cf.createConnection();
1:             con.setClientID(conClientId);
1:             con.start();
1:             return con;
1:         }
1: 
1:         private void unsubscribe() throws JMSException {
1:             Connection con = openConnection();
0:             Session session = con
0:                     .createSession(false, Session.AUTO_ACKNOWLEDGE);
1:             session.unsubscribe(subName);
1:             session.close();
1:             con.close();
1:         }
1: 
1:         @Override
1:         public String toString() {
1:             return "DurableSubscriber[id=" + id + "]";
1:         }
1:     }
1: 
1:     @Before
1:     public void setUp() throws Exception {
1:         topic = new ActiveMQTopic("TopicT");
1:         startBroker();
1:     }
1: 
1:     @After
1:     public void tearDown() throws Exception {
1:         destroyBroker();
1:     }
1: 
1:     private void startBroker() throws Exception {
1:         startBroker(true);
1:     }
1: 
1:     private void startBroker(boolean deleteAllMessages) throws Exception {
1:         if (broker != null)
1:             return;
1: 
1:         broker = BrokerFactory.createBroker("broker:(vm://" + getName() + ")");
1:         broker.setBrokerName(getName());
1:         broker.setAdvisorySupport(false);
1:         broker.setDeleteAllMessagesOnStartup(deleteAllMessages);
1: 
1:         File kahadbData = new File("activemq-data/" + getName() + "-kahadb");
0:             if (deleteAllMessages)
0:                 delete(kahadbData);
1: 
0:             broker.setPersistent(true);
0:             KahaDBPersistenceAdapter kahadb = new KahaDBPersistenceAdapter();
0:             kahadb.setDirectory(kahadbData);
0:             kahadb.setJournalMaxFileLength(  500 * 1024);
0:             broker.setPersistenceAdapter(kahadb);
1: 
0:         broker.addConnector("tcp://localhost:61656");
1: 
1:         broker.getSystemUsage().getMemoryUsage().setLimit(256 * 1024 * 1024);
1:         broker.getSystemUsage().getTempUsage().setLimit(256 * 1024 * 1024);
1:         broker.getSystemUsage().getStoreUsage().setLimit(256 * 1024 * 1024);
1: 
1:         broker.start();
1:     }
1: 
1:     protected static String getName() {
1:         return "DurableSubSelectorDelayTest";
1:     }
1: 
1:     private static boolean delete(File path) {
1:         if (path == null)
1:             return true;
1: 
1:         if (path.isDirectory()) {
1:             for (File file : path.listFiles()) {
1:                 delete(file);
1:             }
1:         }
1:         return path.delete();
1:     }
1: 
1:     private void destroyBroker() throws Exception {
1:         if (broker == null)
1:             return;
1: 
1:         broker.stop();
1:         broker = null;
1:     }
1: }
============================================================================