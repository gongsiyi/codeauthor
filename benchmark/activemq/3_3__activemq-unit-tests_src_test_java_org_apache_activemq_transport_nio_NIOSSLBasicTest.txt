1:838206f: /**
1:838206f:  * Licensed to the Apache Software Foundation (ASF) under one or more
1:838206f:  * contributor license agreements.  See the NOTICE file distributed with
1:838206f:  * this work for additional information regarding copyright ownership.
1:838206f:  * The ASF licenses this file to You under the Apache License, Version 2.0
1:838206f:  * (the "License"); you may not use this file except in compliance with
1:838206f:  * the License.  You may obtain a copy of the License at
1:838206f:  *
1:838206f:  *      http://www.apache.org/licenses/LICENSE-2.0
1:838206f:  *
1:838206f:  * Unless required by applicable law or agreed to in writing, software
1:838206f:  * distributed under the License is distributed on an "AS IS" BASIS,
1:838206f:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:838206f:  * See the License for the specific language governing permissions and
1:838206f:  * limitations under the License.
1:838206f:  */
1:838206f: package org.apache.activemq.transport.nio;
3:838206f: 
1:838206f: import javax.jms.Connection;
1:69fad2a: import javax.jms.JMSException;
1:838206f: import javax.jms.Message;
1:838206f: import javax.jms.MessageConsumer;
1:838206f: import javax.jms.MessageProducer;
1:838206f: import javax.jms.Queue;
1:838206f: import javax.jms.Session;
1:838206f: import javax.jms.TextMessage;
1:69fad2a: import javax.net.ssl.SSLHandshakeException;
1:838206f: 
1:838206f: import org.apache.activemq.ActiveMQConnectionFactory;
1:838206f: import org.apache.activemq.broker.BrokerService;
1:838206f: import org.apache.activemq.broker.TransportConnector;
1:838206f: import org.junit.After;
1:838206f: import org.junit.Before;
1:838206f: import org.junit.Test;
1:838206f: 
1:69fad2a: import junit.framework.TestCase;
1:69fad2a: 
1:838206f: public class NIOSSLBasicTest {
1:838206f: 
1:838206f:     public static final String KEYSTORE_TYPE = "jks";
1:838206f:     public static final String PASSWORD = "password";
1:838206f:     public static final String SERVER_KEYSTORE = "src/test/resources/org/apache/activemq/security/broker1.ks";
1:838206f:     public static final String TRUST_KEYSTORE = "src/test/resources/org/apache/activemq/security/broker1.ks";
1:838206f: 
1:838206f:     public static final int MESSAGE_COUNT = 1000;
1:838206f: 
1:838206f:     @Before
1:838206f:     public void before() throws Exception {
1:838206f:         System.setProperty("javax.net.ssl.trustStore", TRUST_KEYSTORE);
1:838206f:         System.setProperty("javax.net.ssl.trustStorePassword", PASSWORD);
1:838206f:         System.setProperty("javax.net.ssl.trustStoreType", KEYSTORE_TYPE);
1:838206f:         System.setProperty("javax.net.ssl.keyStore", SERVER_KEYSTORE);
1:838206f:         System.setProperty("javax.net.ssl.keyStoreType", KEYSTORE_TYPE);
1:838206f:         System.setProperty("javax.net.ssl.keyStorePassword", PASSWORD);
1:838206f:         // Choose a value that's informative: ssl,handshake,data,trustmanager or all
1:838206f:         //System.setProperty("javax.net.debug", "handshake");
1:838206f:     }
1:838206f: 
1:838206f:     @After
1:838206f:     public void after() throws Exception {
1:838206f:     }
1:838206f: 
1:838206f:     public BrokerService createBroker(String connectorName, String connectorString) throws Exception {
1:838206f:         BrokerService broker = new BrokerService();
1:838206f:         broker.setPersistent(false);
1:838206f:         broker.setUseJmx(false);
1:838206f:         TransportConnector connector = broker.addConnector(connectorString);
1:838206f:         connector.setName(connectorName);
1:838206f:         broker.start();
1:838206f:         broker.waitUntilStarted();
1:838206f:         return broker;
1:838206f:     }
1:838206f: 
1:838206f:     public void stopBroker(BrokerService broker) throws Exception {
1:838206f:         if (broker != null) {
1:838206f:             broker.stop();
1:838206f:             broker.waitUntilStopped();
1:838206f:         }
1:838206f:     }
1:838206f: 
1:838206f:     @Test
1:838206f:     public void basicConnector() throws Exception {
1:1e31df9:         BrokerService broker = createBroker("nio+ssl", getTransportType() + "://localhost:0?transport.needClientAuth=true");
1:69fad2a:         basicSendReceive("ssl://localhost:" + broker.getConnectorByName("nio+ssl").getConnectUri().getPort() + "?socket.verifyHostName=false");
1:838206f:         stopBroker(broker);
1:838206f:     }
1:838206f: 
1:1948fe4:     @Test
1:838206f:     public void enabledCipherSuites() throws Exception {
1:1e31df9:         BrokerService broker = createBroker("nio+ssl", getTransportType() + "://localhost:0?transport.needClientAuth=true&transport.verifyHostName=false&transport.enabledCipherSuites=TLS_RSA_WITH_AES_256_CBC_SHA256");
1:69fad2a:         basicSendReceive("ssl://localhost:" + broker.getConnectorByName("nio+ssl").getConnectUri().getPort() + "?socket.verifyHostName=false");
1:838206f:         stopBroker(broker);
1:838206f:     }
1:838206f: 
1:838206f:     @Test
1:1948fe4:     public void enabledProtocols() throws Exception {
1:1e31df9:         BrokerService broker = createBroker("nio+ssl", getTransportType() + "://localhost:61616?transport.needClientAuth=true&transport.enabledProtocols=TLSv1,TLSv1.1,TLSv1.2");
1:69fad2a:         basicSendReceive("ssl://localhost:" + broker.getConnectorByName("nio+ssl").getConnectUri().getPort() + "?socket.verifyHostName=false");
1:1948fe4:         stopBroker(broker);
1:1948fe4:     }
1:1948fe4: 
1:1e31df9:     //Client is missing verifyHostName=false so it should fail as cert doesn't have right host name
1:69fad2a:     @Test(expected = Exception.class)
1:1e31df9:     public void verifyHostNameErrorClient() throws Exception {
1:69fad2a:         BrokerService broker = null;
1:69fad2a:         try {
1:69fad2a:             broker = createBroker("nio+ssl", getTransportType() + "://localhost:61616?transport.needClientAuth=true");
1:69fad2a:             basicSendReceive("ssl://localhost:" + broker.getConnectorByName("nio+ssl").getConnectUri().getPort());
1:69fad2a:         } finally {
1:69fad2a:             if (broker != null) {
1:69fad2a:                 stopBroker(broker);
1:69fad2a:             }
1:69fad2a:         }
1:69fad2a:     }
1:69fad2a: 
1:838206f:     public void basicSendReceive(String uri) throws Exception {
1:838206f:         ActiveMQConnectionFactory factory = new ActiveMQConnectionFactory(uri);
1:838206f:         Connection connection = factory.createConnection();
1:838206f:         Session session = connection.createSession(false, Session.AUTO_ACKNOWLEDGE);
1:838206f:         connection.start();
1:69fad2a: 
1:838206f:         String body = "hello world!";
1:838206f:         Queue destination = session.createQueue("TEST");
1:838206f:         MessageProducer producer = session.createProducer(destination);
1:838206f:         producer.send(session.createTextMessage(body));
1:838206f: 
1:838206f:         MessageConsumer consumer = session.createConsumer(destination);
1:838206f:         Message received = consumer.receive(2000);
1:838206f:         TestCase.assertEquals(body, ((TextMessage)received).getText());
1:838206f:     }
1:04ee70a: 
1:04ee70a:     protected String getTransportType() {
1:04ee70a:         return "nio+ssl";
1:04ee70a:     }
1:838206f: }
============================================================================
author:Christopher L. Shannon (cshannon)
-------------------------------------------------------------------------------
commit:1e31df9
/////////////////////////////////////////////////////////////////////////
1:         BrokerService broker = createBroker("nio+ssl", getTransportType() + "://localhost:0?transport.needClientAuth=true");
1:         BrokerService broker = createBroker("nio+ssl", getTransportType() + "://localhost:0?transport.needClientAuth=true&transport.verifyHostName=false&transport.enabledCipherSuites=TLS_RSA_WITH_AES_256_CBC_SHA256");
1:         BrokerService broker = createBroker("nio+ssl", getTransportType() + "://localhost:61616?transport.needClientAuth=true&transport.enabledProtocols=TLSv1,TLSv1.1,TLSv1.2");
1:     //Client is missing verifyHostName=false so it should fail as cert doesn't have right host name
1:     public void verifyHostNameErrorClient() throws Exception {
/////////////////////////////////////////////////////////////////////////
commit:69fad2a
/////////////////////////////////////////////////////////////////////////
1: import javax.jms.JMSException;
1: import javax.net.ssl.SSLHandshakeException;
/////////////////////////////////////////////////////////////////////////
1: import junit.framework.TestCase;
1: 
/////////////////////////////////////////////////////////////////////////
0:         BrokerService broker = createBroker("nio+ssl", getTransportType() + "://localhost:0?transport.needClientAuth=true&transport.verifyHostName=false");
1:         basicSendReceive("ssl://localhost:" + broker.getConnectorByName("nio+ssl").getConnectUri().getPort() + "?socket.verifyHostName=false");
0:         BrokerService broker = createBroker("nio+ssl", getTransportType() + "://localhost:0?transport.needClientAuth=true&transport.verifyHostName=false&transport.enabledCipherSuites=TLS_RSA_WITH_AES_256_CBC_SHA256&transport.verifyHostName=false");
1:         basicSendReceive("ssl://localhost:" + broker.getConnectorByName("nio+ssl").getConnectUri().getPort() + "?socket.verifyHostName=false");
0:         BrokerService broker = createBroker("nio+ssl", getTransportType() + "://localhost:61616?transport.needClientAuth=true&transport.enabledProtocols=TLSv1,TLSv1.1,TLSv1.2&transport.verifyHostName=false");
1:         basicSendReceive("ssl://localhost:" + broker.getConnectorByName("nio+ssl").getConnectUri().getPort() + "?socket.verifyHostName=false");
0:     //Client/server is missing verifyHostName=false so it should fail as cert doesn't have right host name
1:     @Test(expected = Exception.class)
0:     public void verifyHostNameError() throws Exception {
1:         BrokerService broker = null;
1:         try {
1:             broker = createBroker("nio+ssl", getTransportType() + "://localhost:61616?transport.needClientAuth=true");
1:             basicSendReceive("ssl://localhost:" + broker.getConnectorByName("nio+ssl").getConnectUri().getPort());
1:         } finally {
1:             if (broker != null) {
1:                 stopBroker(broker);
1:             }
1:         }
1:     }
1: 
1: 
commit:04ee70a
/////////////////////////////////////////////////////////////////////////
0:         BrokerService broker = createBroker("nio+ssl", getTransportType() + "://localhost:0?transport.needClientAuth=true");
0:         BrokerService broker = createBroker("nio+ssl", getTransportType() + "://localhost:0?transport.needClientAuth=true&transport.enabledCipherSuites=SSL_RSA_WITH_RC4_128_SHA,SSL_DH_anon_WITH_3DES_EDE_CBC_SHA");
0:         BrokerService broker = createBroker("nio+ssl", getTransportType() + "://localhost:61616?transport.needClientAuth=true&transport.enabledProtocols=TLSv1,TLSv1.1,TLSv1.2");
/////////////////////////////////////////////////////////////////////////
1: 
1:     protected String getTransportType() {
1:         return "nio+ssl";
1:     }
author:Timothy Bish
-------------------------------------------------------------------------------
commit:1948fe4
/////////////////////////////////////////////////////////////////////////
1:     @Test
1:     public void enabledProtocols() throws Exception {
0:         BrokerService broker = createBroker("nio+ssl", "nio+ssl://localhost:61616?transport.needClientAuth=true&transport.enabledProtocols=TLSv1,TLSv1.1,TLSv1.2");
0:         basicSendReceive("ssl://localhost:" + broker.getConnectorByName("nio+ssl").getConnectUri().getPort());
1:         stopBroker(broker);
1:     }
1: 
author:Timothy A. Bish
-------------------------------------------------------------------------------
commit:ef24cc9
commit:838206f
/////////////////////////////////////////////////////////////////////////
1: /**
1:  * Licensed to the Apache Software Foundation (ASF) under one or more
1:  * contributor license agreements.  See the NOTICE file distributed with
1:  * this work for additional information regarding copyright ownership.
1:  * The ASF licenses this file to You under the Apache License, Version 2.0
1:  * (the "License"); you may not use this file except in compliance with
1:  * the License.  You may obtain a copy of the License at
1:  *
1:  *      http://www.apache.org/licenses/LICENSE-2.0
1:  *
1:  * Unless required by applicable law or agreed to in writing, software
1:  * distributed under the License is distributed on an "AS IS" BASIS,
1:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:  * See the License for the specific language governing permissions and
1:  * limitations under the License.
1:  */
1: package org.apache.activemq.transport.nio;
1: 
1: import javax.jms.Connection;
1: import javax.jms.Message;
1: import javax.jms.MessageConsumer;
1: import javax.jms.MessageProducer;
1: import javax.jms.Queue;
1: import javax.jms.Session;
1: import javax.jms.TextMessage;
1: 
0: import junit.framework.TestCase;
1: 
1: import org.apache.activemq.ActiveMQConnectionFactory;
1: import org.apache.activemq.broker.BrokerService;
1: import org.apache.activemq.broker.TransportConnector;
1: import org.junit.After;
1: import org.junit.Before;
1: import org.junit.Test;
1: 
1: public class NIOSSLBasicTest {
1: 
1:     public static final String KEYSTORE_TYPE = "jks";
1:     public static final String PASSWORD = "password";
1:     public static final String SERVER_KEYSTORE = "src/test/resources/org/apache/activemq/security/broker1.ks";
1:     public static final String TRUST_KEYSTORE = "src/test/resources/org/apache/activemq/security/broker1.ks";
1: 
1:     public static final int MESSAGE_COUNT = 1000;
1: 
1:     @Before
1:     public void before() throws Exception {
1:         System.setProperty("javax.net.ssl.trustStore", TRUST_KEYSTORE);
1:         System.setProperty("javax.net.ssl.trustStorePassword", PASSWORD);
1:         System.setProperty("javax.net.ssl.trustStoreType", KEYSTORE_TYPE);
1:         System.setProperty("javax.net.ssl.keyStore", SERVER_KEYSTORE);
1:         System.setProperty("javax.net.ssl.keyStoreType", KEYSTORE_TYPE);
1:         System.setProperty("javax.net.ssl.keyStorePassword", PASSWORD);
1:         // Choose a value that's informative: ssl,handshake,data,trustmanager or all
1:         //System.setProperty("javax.net.debug", "handshake");
1:     }
1: 
1:     @After
1:     public void after() throws Exception {
1:     }
1: 
1:     public BrokerService createBroker(String connectorName, String connectorString) throws Exception {
1:         BrokerService broker = new BrokerService();
1:         broker.setPersistent(false);
1:         broker.setUseJmx(false);
1:         TransportConnector connector = broker.addConnector(connectorString);
1:         connector.setName(connectorName);
1:         broker.start();
1:         broker.waitUntilStarted();
1:         return broker;
1:     }
1: 
1:     public void stopBroker(BrokerService broker) throws Exception {
1:         if (broker != null) {
1:             broker.stop();
1:             broker.waitUntilStopped();
1:         }
1:     }
1: 
1:     @Test
1:     public void basicConnector() throws Exception {
0:         BrokerService broker = createBroker("nio+ssl", "nio+ssl://localhost:0?transport.needClientAuth=true");
0:         basicSendReceive("ssl://localhost:" + broker.getConnectorByName("nio+ssl").getConnectUri().getPort());
1:         stopBroker(broker);
1:     }
1: 
1:     @Test
1:     public void enabledCipherSuites() throws Exception {
0:         BrokerService broker = createBroker("nio+ssl", "nio+ssl://localhost:0?transport.needClientAuth=true&transport.enabledCipherSuites=SSL_RSA_WITH_RC4_128_SHA,SSL_DH_anon_WITH_3DES_EDE_CBC_SHA");
0:         basicSendReceive("ssl://localhost:" + broker.getConnectorByName("nio+ssl").getConnectUri().getPort());
1:         stopBroker(broker);
1:     }
1: 
1:     public void basicSendReceive(String uri) throws Exception {
1:         ActiveMQConnectionFactory factory = new ActiveMQConnectionFactory(uri);
1:         Connection connection = factory.createConnection();
1:         Session session = connection.createSession(false, Session.AUTO_ACKNOWLEDGE);
1:         connection.start();
1: 
1:         String body = "hello world!";
1:         Queue destination = session.createQueue("TEST");
1:         MessageProducer producer = session.createProducer(destination);
1:         producer.send(session.createTextMessage(body));
1: 
1:         MessageConsumer consumer = session.createConsumer(destination);
1:         Message received = consumer.receive(2000);
1:         TestCase.assertEquals(body, ((TextMessage)received).getText());
1:     }
1: }
============================================================================