1:d29ca2a: /**
1:57b4941:  * Licensed to the Apache Software Foundation (ASF) under one or more
1:57b4941:  * contributor license agreements.  See the NOTICE file distributed with
1:57b4941:  * this work for additional information regarding copyright ownership.
1:57b4941:  * The ASF licenses this file to You under the Apache License, Version 2.0
1:57b4941:  * (the "License"); you may not use this file except in compliance with
1:57b4941:  * the License.  You may obtain a copy of the License at
6:d29ca2a:  *
1:230a86c:  *      http://www.apache.org/licenses/LICENSE-2.0
1:b0c2a40:  *
1:d29ca2a:  * Unless required by applicable law or agreed to in writing, software
1:d29ca2a:  * distributed under the License is distributed on an "AS IS" BASIS,
1:d29ca2a:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:d29ca2a:  * See the License for the specific language governing permissions and
1:d29ca2a:  * limitations under the License.
1:d29ca2a:  */
1:d29ca2a: package org.apache.activemq;
10:d29ca2a: 
1:d29ca2a: import java.io.IOException;
1:d29ca2a: import java.net.URI;
1:d29ca2a: import java.net.URISyntaxException;
1:230a86c: import java.util.concurrent.Callable;
1:230a86c: import java.util.concurrent.CountDownLatch;
1:230a86c: import java.util.concurrent.Semaphore;
1:230a86c: import java.util.concurrent.TimeUnit;
1:230a86c: import java.util.concurrent.atomic.AtomicInteger;
1:d29ca2a: 
1:d29ca2a: import javax.jms.BytesMessage;
1:d29ca2a: import javax.jms.Connection;
1:d29ca2a: import javax.jms.ConnectionFactory;
1:d29ca2a: import javax.jms.DeliveryMode;
1:d29ca2a: import javax.jms.JMSException;
1:d29ca2a: import javax.jms.Message;
1:d29ca2a: import javax.jms.MessageConsumer;
1:d29ca2a: import javax.jms.MessageListener;
1:d29ca2a: import javax.jms.MessageProducer;
1:d29ca2a: import javax.jms.Session;
1:d29ca2a: 
1:d29ca2a: import junit.framework.Test;
1:c7d559f: 
1:d29ca2a: import org.apache.activemq.broker.BrokerFactory;
1:d29ca2a: import org.apache.activemq.broker.BrokerService;
1:d29ca2a: import org.apache.activemq.command.ActiveMQDestination;
1:d29ca2a: import org.apache.activemq.command.ActiveMQQueue;
1:8bf987b: import org.slf4j.Logger;
1:8bf987b: import org.slf4j.LoggerFactory;
1:d29ca2a: 
1:d29ca2a: /**
1:d29ca2a:  * Benchmarks the broker by starting many consumer and producers against the
1:f812e34:  * same destination. Make sure you run with jvm option -server (makes a big
1:f812e34:  * difference). The tests simulate storing 1000 1k jms messages to see the rate
1:f812e34:  * of processing msg/sec.
1:c7d559f:  *
1:c7d559f:  *
1:d29ca2a:  */
1:d29ca2a: public class JmsBenchmark extends JmsTestSupport {
1:8bf987b:     private static final transient Logger LOG = LoggerFactory.getLogger(JmsBenchmark.class);
1:d29ca2a: 
1:f812e34:     private static final long SAMPLE_DELAY = Integer.parseInt(System.getProperty("SAMPLE_DELAY", "" + 1000 * 5));
1:d29ca2a:     private static final long SAMPLES = Integer.parseInt(System.getProperty("SAMPLES", "10"));
1:f812e34:     private static final long SAMPLE_DURATION = Integer.parseInt(System.getProperty("SAMPLES_DURATION", "" + 1000 * 60));
1:d29ca2a:     private static final int PRODUCER_COUNT = Integer.parseInt(System.getProperty("PRODUCER_COUNT", "10"));
1:d29ca2a:     private static final int CONSUMER_COUNT = Integer.parseInt(System.getProperty("CONSUMER_COUNT", "10"));
1:d29ca2a: 
1:d29ca2a:     public ActiveMQDestination destination;
1:d29ca2a: 
1:d29ca2a:     public static Test suite() {
1:d29ca2a:         return suite(JmsBenchmark.class);
1:d29ca2a:     }
1:d29ca2a: 
1:d29ca2a:     public static void main(String[] args) {
1:d29ca2a:         junit.textui.TestRunner.run(JmsBenchmark.class);
1:d29ca2a:     }
1:d29ca2a: 
1:d29ca2a:     public void initCombos() {
1:f812e34:         addCombinationValues("destination", new Object[] {new ActiveMQQueue("TEST")});
1:d29ca2a:     }
1:d29ca2a: 
1:c7d559f:     @Override
1:d29ca2a:     protected BrokerService createBroker() throws Exception {
1:d29ca2a:         return BrokerFactory.createBroker(new URI("broker://(tcp://localhost:0)?persistent=false"));
1:d29ca2a:     }
1:d29ca2a: 
1:c7d559f:     @Override
1:d29ca2a:     protected ConnectionFactory createConnectionFactory() throws URISyntaxException, IOException {
1:c7d559f:         return new ActiveMQConnectionFactory(broker.getTransportConnectors().get(0).getServer().getConnectURI());
1:d29ca2a:     }
1:d29ca2a: 
1:d29ca2a:     /**
1:230a86c:      * @throws Throwable
1:d29ca2a:      */
1:d29ca2a:     public void testConcurrentSendReceive() throws Throwable {
1:d29ca2a: 
1:d29ca2a:         final Semaphore connectionsEstablished = new Semaphore(1 - (CONSUMER_COUNT + PRODUCER_COUNT));
1:d29ca2a:         final Semaphore workerDone = new Semaphore(1 - (CONSUMER_COUNT + PRODUCER_COUNT));
1:d29ca2a:         final CountDownLatch sampleTimeDone = new CountDownLatch(1);
1:d29ca2a: 
1:d29ca2a:         final AtomicInteger producedMessages = new AtomicInteger(0);
1:d29ca2a:         final AtomicInteger receivedMessages = new AtomicInteger(0);
1:d29ca2a: 
1:c7d559f:         final Callable<Object> producer = new Callable<Object>() {
1:c7d559f:             @Override
1:d29ca2a:             public Object call() throws JMSException, InterruptedException {
1:d29ca2a:                 Connection connection = factory.createConnection();
1:d29ca2a:                 connections.add(connection);
1:d29ca2a:                 Session session = connection.createSession(false, Session.AUTO_ACKNOWLEDGE);
1:d29ca2a:                 MessageProducer producer = session.createProducer(destination);
1:d29ca2a:                 producer.setDeliveryMode(DeliveryMode.NON_PERSISTENT);
1:d29ca2a:                 BytesMessage message = session.createBytesMessage();
1:d29ca2a:                 message.writeBytes(new byte[1024]);
1:d29ca2a:                 connection.start();
1:d29ca2a:                 connectionsEstablished.release();
1:d29ca2a: 
1:d29ca2a:                 while (!sampleTimeDone.await(0, TimeUnit.MILLISECONDS)) {
1:d29ca2a:                     producer.send(message);
1:d29ca2a:                     producedMessages.incrementAndGet();
1:d29ca2a:                 }
1:d29ca2a: 
1:d29ca2a:                 connection.close();
1:d29ca2a:                 workerDone.release();
1:d29ca2a:                 return null;
1:d29ca2a:             }
1:d29ca2a:         };
1:d29ca2a: 
1:c7d559f:         final Callable<Object> consumer = new Callable<Object>() {
1:c7d559f:             @Override
1:d29ca2a:             public Object call() throws JMSException, InterruptedException {
1:d29ca2a:                 Connection connection = factory.createConnection();
1:d29ca2a:                 connections.add(connection);
1:d29ca2a:                 Session session = connection.createSession(false, Session.AUTO_ACKNOWLEDGE);
1:d29ca2a:                 MessageConsumer consumer = session.createConsumer(destination);
1:d29ca2a: 
1:d29ca2a:                 consumer.setMessageListener(new MessageListener() {
1:c7d559f:                     @Override
1:d29ca2a:                     public void onMessage(Message msg) {
1:d29ca2a:                         receivedMessages.incrementAndGet();
1:d29ca2a:                     }
2:d29ca2a:                 });
1:d29ca2a:                 connection.start();
1:d29ca2a: 
1:d29ca2a:                 connectionsEstablished.release();
1:d29ca2a:                 sampleTimeDone.await();
1:d29ca2a: 
1:d29ca2a:                 connection.close();
1:d29ca2a:                 workerDone.release();
1:d29ca2a:                 return null;
1:d29ca2a:             }
1:d29ca2a:         };
1:d29ca2a: 
1:d29ca2a:         final Throwable workerError[] = new Throwable[1];
1:d29ca2a:         for (int i = 0; i < PRODUCER_COUNT; i++) {
1:d29ca2a:             new Thread("Producer:" + i) {
1:c7d559f:                 @Override
1:d29ca2a:                 public void run() {
1:d29ca2a:                     try {
1:d29ca2a:                         producer.call();
1:d29ca2a:                     } catch (Throwable e) {
1:d29ca2a:                         e.printStackTrace();
1:d29ca2a:                         workerError[0] = e;
1:d29ca2a:                     }
1:d29ca2a:                 }
1:d29ca2a:             }.start();
1:d29ca2a:         }
1:d29ca2a: 
1:d29ca2a:         for (int i = 0; i < CONSUMER_COUNT; i++) {
1:d29ca2a:             new Thread("Consumer:" + i) {
1:c7d559f:                 @Override
1:d29ca2a:                 public void run() {
1:d29ca2a:                     try {
1:d29ca2a:                         consumer.call();
1:d29ca2a:                     } catch (Throwable e) {
1:d29ca2a:                         e.printStackTrace();
1:d29ca2a:                         workerError[0] = e;
1:d29ca2a:                     }
1:d29ca2a:                 }
1:d29ca2a:             }.start();
1:d29ca2a:         }
1:d29ca2a: 
1:fc00993:         LOG.info(getName() + ": Waiting for Producers and Consumers to startup.");
1:d29ca2a:         connectionsEstablished.acquire();
1:fc00993:         LOG.info("Producers and Consumers are now running.  Waiting for system to reach steady state: " + (SAMPLE_DELAY / 1000.0f) + " seconds");
1:d29ca2a:         Thread.sleep(1000 * 10);
1:d29ca2a: 
1:fc00993:         LOG.info("Starting sample: " + SAMPLES + " each lasting " + (SAMPLE_DURATION / 1000.0f) + " seconds");
1:d29ca2a: 
1:230a86c:         for (int i = 0; i < SAMPLES; i++) {
1:230a86c: 
1:d29ca2a:             long start = System.currentTimeMillis();
1:d29ca2a:             producedMessages.set(0);
1:d29ca2a:             receivedMessages.set(0);
1:230a86c: 
1:d29ca2a:             Thread.sleep(SAMPLE_DURATION);
1:230a86c: 
1:d29ca2a:             long end = System.currentTimeMillis();
1:d29ca2a:             int r = receivedMessages.get();
1:d29ca2a:             int p = producedMessages.get();
1:230a86c: 
1:fc00993:             LOG.info("published: " + p + " msgs at " + (p * 1000f / (end - start)) + " msgs/sec, " + "consumed: " + r + " msgs at " + (r * 1000f / (end - start)) + " msgs/sec");
1:d29ca2a:         }
1:d29ca2a: 
1:fc00993:         LOG.info("Sample done.");
1:d29ca2a:         sampleTimeDone.countDown();
1:d29ca2a: 
1:d29ca2a:         workerDone.acquire();
1:d29ca2a:         if (workerError[0] != null) {
1:d29ca2a:             throw workerError[0];
1:d29ca2a:         }
1:d29ca2a:     }
1:d29ca2a: }
============================================================================
author:Hadrian Zbarcea
-------------------------------------------------------------------------------
commit:f9bec8f
author:Timothy A. Bish
-------------------------------------------------------------------------------
commit:c7d559f
/////////////////////////////////////////////////////////////////////////
1: 
/////////////////////////////////////////////////////////////////////////
1:  *
1:  *
/////////////////////////////////////////////////////////////////////////
1:     @Override
1:     @Override
1:         return new ActiveMQConnectionFactory(broker.getTransportConnectors().get(0).getServer().getConnectURI());
/////////////////////////////////////////////////////////////////////////
1:         final Callable<Object> producer = new Callable<Object>() {
1:             @Override
/////////////////////////////////////////////////////////////////////////
1:         final Callable<Object> consumer = new Callable<Object>() {
1:             @Override
/////////////////////////////////////////////////////////////////////////
1:                     @Override
/////////////////////////////////////////////////////////////////////////
1:                 @Override
/////////////////////////////////////////////////////////////////////////
1:                 @Override
/////////////////////////////////////////////////////////////////////////
commit:ef24cc9
author:Hiram R. Chirino
-------------------------------------------------------------------------------
commit:b0c2a40
/////////////////////////////////////////////////////////////////////////
1:  * 
commit:933eb2f
/////////////////////////////////////////////////////////////////////////
commit:fc00993
/////////////////////////////////////////////////////////////////////////
0:     private static final transient Log LOG = LogFactory.getLog(JmsBenchmark.class);
/////////////////////////////////////////////////////////////////////////
1:         LOG.info(getName() + ": Waiting for Producers and Consumers to startup.");
1:         LOG.info("Producers and Consumers are now running.  Waiting for system to reach steady state: " + (SAMPLE_DELAY / 1000.0f) + " seconds");
1:         LOG.info("Starting sample: " + SAMPLES + " each lasting " + (SAMPLE_DURATION / 1000.0f) + " seconds");
/////////////////////////////////////////////////////////////////////////
1:             LOG.info("published: " + p + " msgs at " + (p * 1000f / (end - start)) + " msgs/sec, " + "consumed: " + r + " msgs at " + (r * 1000f / (end - start)) + " msgs/sec");
1:         LOG.info("Sample done.");
commit:f812e34
/////////////////////////////////////////////////////////////////////////
1:  * same destination. Make sure you run with jvm option -server (makes a big
1:  * difference). The tests simulate storing 1000 1k jms messages to see the rate
1:  * of processing msg/sec.
1:     private static final long SAMPLE_DELAY = Integer.parseInt(System.getProperty("SAMPLE_DELAY", "" + 1000 * 5));
1:     private static final long SAMPLE_DURATION = Integer.parseInt(System.getProperty("SAMPLES_DURATION", "" + 1000 * 60));
/////////////////////////////////////////////////////////////////////////
1:         addCombinationValues("destination", new Object[] {new ActiveMQQueue("TEST")});
/////////////////////////////////////////////////////////////////////////
0:         return new ActiveMQConnectionFactory(((TransportConnector)broker.getTransportConnectors().get(0)).getServer().getConnectURI());
/////////////////////////////////////////////////////////////////////////
0:         log.info("Producers and Consumers are now running.  Waiting for system to reach steady state: " + (SAMPLE_DELAY / 1000.0f) + " seconds");
/////////////////////////////////////////////////////////////////////////
0:             log.info("published: " + p + " msgs at " + (p * 1000f / (end - start)) + " msgs/sec, " + "consumed: " + r + " msgs at " + (r * 1000f / (end - start)) + " msgs/sec");
commit:230a86c
/////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////
1:  *      http://www.apache.org/licenses/LICENSE-2.0
/////////////////////////////////////////////////////////////////////////
1: import java.util.concurrent.Callable;
1: import java.util.concurrent.CountDownLatch;
1: import java.util.concurrent.Semaphore;
1: import java.util.concurrent.TimeUnit;
1: import java.util.concurrent.atomic.AtomicInteger;
/////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////
0:     private static final long SAMPLE_DELAY = Integer.parseInt(System.getProperty("SAMPLE_DELAY",
0:                                                                                  "" + 1000 * 5));
0:     private static final long SAMPLE_DURATION = Integer.parseInt(System.getProperty("SAMPLES_DURATION",
0:                                                                                     "" + 1000 * 60));
/////////////////////////////////////////////////////////////////////////
0:         addCombinationValues("destination", new Object[] {
0:         // new ActiveMQTopic("TEST"),
0:                              new ActiveMQQueue("TEST"),});
/////////////////////////////////////////////////////////////////////////
0:         return new ActiveMQConnectionFactory(((TransportConnector)broker.getTransportConnectors().get(0))
0:             .getServer().getConnectURI());
1:      * @throws Throwable
/////////////////////////////////////////////////////////////////////////
0:                  + (SAMPLE_DELAY / 1000.0f) + " seconds");
0:         log.info("Starting sample: " + SAMPLES + " each lasting " + (SAMPLE_DURATION / 1000.0f) + " seconds");
1:         for (int i = 0; i < SAMPLES; i++) {
1: 
1: 
1: 
1: 
0:             log.info("published: " + p + " msgs at " + (p * 1000f / (end - start)) + " msgs/sec, "
0:                      + "consumed: " + r + " msgs at " + (r * 1000f / (end - start)) + " msgs/sec");
commit:86cbdfd
/////////////////////////////////////////////////////////////////////////
0: import java.util.concurrent.Callable;
0: import java.util.concurrent.CountDownLatch;
0: import java.util.concurrent.Semaphore;
0: import java.util.concurrent.TimeUnit;
0: import java.util.concurrent.atomic.AtomicInteger;
commit:57b4941
/////////////////////////////////////////////////////////////////////////
1:  * Licensed to the Apache Software Foundation (ASF) under one or more
1:  * contributor license agreements.  See the NOTICE file distributed with
1:  * this work for additional information regarding copyright ownership.
1:  * The ASF licenses this file to You under the Apache License, Version 2.0
1:  * (the "License"); you may not use this file except in compliance with
1:  * the License.  You may obtain a copy of the License at
commit:7f5213b
/////////////////////////////////////////////////////////////////////////
0:      * @throws Throwable 
commit:48b4869
/////////////////////////////////////////////////////////////////////////
0:  * Copyright 2005-2006 The Apache Software Foundation
commit:d29ca2a
/////////////////////////////////////////////////////////////////////////
1: /**
1:  *
0:  * Copyright 2004 The Apache Software Foundation
1:  *
0:  * Licensed under the Apache License, Version 2.0 (the "License");
0:  * you may not use this file except in compliance with the License.
0:  * You may obtain a copy of the License at
1:  *
0:  * http://www.apache.org/licenses/LICENSE-2.0
1:  *
1:  * Unless required by applicable law or agreed to in writing, software
1:  * distributed under the License is distributed on an "AS IS" BASIS,
1:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:  * See the License for the specific language governing permissions and
1:  * limitations under the License.
1:  */
1: package org.apache.activemq;
1: 
1: import java.io.IOException;
1: import java.net.URI;
1: import java.net.URISyntaxException;
1: 
1: import javax.jms.BytesMessage;
1: import javax.jms.Connection;
1: import javax.jms.ConnectionFactory;
1: import javax.jms.DeliveryMode;
1: import javax.jms.JMSException;
1: import javax.jms.Message;
1: import javax.jms.MessageConsumer;
1: import javax.jms.MessageListener;
1: import javax.jms.MessageProducer;
1: import javax.jms.Session;
1: 
1: import junit.framework.Test;
1: 
0: import org.apache.activemq.ActiveMQConnectionFactory;
1: import org.apache.activemq.broker.BrokerFactory;
1: import org.apache.activemq.broker.BrokerService;
0: import org.apache.activemq.broker.TransportConnector;
1: import org.apache.activemq.command.ActiveMQDestination;
1: import org.apache.activemq.command.ActiveMQQueue;
1: 
0: import edu.emory.mathcs.backport.java.util.concurrent.Callable;
0: import edu.emory.mathcs.backport.java.util.concurrent.CountDownLatch;
0: import edu.emory.mathcs.backport.java.util.concurrent.Semaphore;
0: import edu.emory.mathcs.backport.java.util.concurrent.TimeUnit;
0: import edu.emory.mathcs.backport.java.util.concurrent.atomic.AtomicInteger;
1: 
1: /**
1:  * Benchmarks the broker by starting many consumer and producers against the
0:  * same destination.
1:  * 
0:  * Make sure you run with jvm option -server (makes a big difference). The tests
0:  * simulate storing 1000 1k jms messages to see the rate of processing msg/sec.
1:  * 
0:  * @version $Revision$
1:  */
1: public class JmsBenchmark extends JmsTestSupport {
1: 
0:     private static final long SAMPLE_DELAY = Integer.parseInt(System.getProperty("SAMPLE_DELAY", "" + 1000 * 5));
1:     private static final long SAMPLES = Integer.parseInt(System.getProperty("SAMPLES", "10"));
0:     private static final long SAMPLE_DURATION = Integer.parseInt(System.getProperty("SAMPLES_DURATION", "" + 1000*60));
1:     private static final int PRODUCER_COUNT = Integer.parseInt(System.getProperty("PRODUCER_COUNT", "10"));
1:     private static final int CONSUMER_COUNT = Integer.parseInt(System.getProperty("CONSUMER_COUNT", "10"));
1: 
1:     public ActiveMQDestination destination;
1: 
1:     public static Test suite() {
1:         return suite(JmsBenchmark.class);
1:     }
1: 
1:     public static void main(String[] args) {
1:         junit.textui.TestRunner.run(JmsBenchmark.class);
1:     }
1: 
1:     public void initCombos() {
0:         addCombinationValues("destination", new Object[] { 
0: //                new ActiveMQTopic("TEST"), 
0:                 new ActiveMQQueue("TEST"), 
1:                 });
1:     }
1: 
1:     protected BrokerService createBroker() throws Exception {
1:         return BrokerFactory.createBroker(new URI("broker://(tcp://localhost:0)?persistent=false"));
1:     }
1: 
1:     protected ConnectionFactory createConnectionFactory() throws URISyntaxException, IOException {
0:         return new ActiveMQConnectionFactory(((TransportConnector) broker.getTransportConnectors().get(0)).getServer().getConnectURI());
1:     }
1: 
1:     /**
0:      * @throws Throwable
1:      */
1:     public void testConcurrentSendReceive() throws Throwable {
1: 
1:         final Semaphore connectionsEstablished = new Semaphore(1 - (CONSUMER_COUNT + PRODUCER_COUNT));
1:         final Semaphore workerDone = new Semaphore(1 - (CONSUMER_COUNT + PRODUCER_COUNT));
1:         final CountDownLatch sampleTimeDone = new CountDownLatch(1);
1: 
1:         final AtomicInteger producedMessages = new AtomicInteger(0);
1:         final AtomicInteger receivedMessages = new AtomicInteger(0);
1: 
0:         final Callable producer = new Callable() {
1:             public Object call() throws JMSException, InterruptedException {
1:                 Connection connection = factory.createConnection();
1:                 connections.add(connection);
1:                 Session session = connection.createSession(false, Session.AUTO_ACKNOWLEDGE);
1:                 MessageProducer producer = session.createProducer(destination);
1:                 producer.setDeliveryMode(DeliveryMode.NON_PERSISTENT);
1:                 BytesMessage message = session.createBytesMessage();
1:                 message.writeBytes(new byte[1024]);
1:                 connection.start();
1:                 connectionsEstablished.release();
1: 
1:                 while (!sampleTimeDone.await(0, TimeUnit.MILLISECONDS)) {
1:                     producer.send(message);
1:                     producedMessages.incrementAndGet();
1:                 }
1: 
1:                 connection.close();
1:                 workerDone.release();
1:                 return null;
1:             }
1:         };
1: 
0:         final Callable consumer = new Callable() {
1:             public Object call() throws JMSException, InterruptedException {
1:                 Connection connection = factory.createConnection();
1:                 connections.add(connection);
1:                 Session session = connection.createSession(false, Session.AUTO_ACKNOWLEDGE);
1:                 MessageConsumer consumer = session.createConsumer(destination);
1: 
1:                 consumer.setMessageListener(new MessageListener() {
1:                     public void onMessage(Message msg) {
1:                         receivedMessages.incrementAndGet();
1:                     }
1:                 });
1:                 connection.start();
1: 
1:                 connectionsEstablished.release();
1:                 sampleTimeDone.await();
1: 
1:                 connection.close();
1:                 workerDone.release();
1:                 return null;
1:             }
1:         };
1: 
1:         final Throwable workerError[] = new Throwable[1];
1:         for (int i = 0; i < PRODUCER_COUNT; i++) {
1:             new Thread("Producer:" + i) {
1:                 public void run() {
1:                     try {
1:                         producer.call();
1:                     } catch (Throwable e) {
1:                         e.printStackTrace();
1:                         workerError[0] = e;
1:                     }
1:                 }
1:             }.start();
1:         }
1: 
1:         for (int i = 0; i < CONSUMER_COUNT; i++) {
1:             new Thread("Consumer:" + i) {
1:                 public void run() {
1:                     try {
1:                         consumer.call();
1:                     } catch (Throwable e) {
1:                         e.printStackTrace();
1:                         workerError[0] = e;
1:                     }
1:                 }
1:             }.start();
1:         }
1: 
0:         System.out.println(getName() + ": Waiting for Producers and Consumers to startup.");
1:         connectionsEstablished.acquire();
0:         System.out.println("Producers and Consumers are now running.  Waiting for system to reach steady state: "
0:                 + (SAMPLE_DELAY / 1000.0f) + " seconds");
1:         Thread.sleep(1000 * 10);
1: 
0:         System.out.println("Starting sample: "+SAMPLES+" each lasting "+ (SAMPLE_DURATION / 1000.0f) + " seconds");
1: 
1: 
0:         long now = System.currentTimeMillis();
0:         for( int i=0; i < SAMPLES; i ++) {
1:             
1:             long start = System.currentTimeMillis();
1:             receivedMessages.set(0);
1:             producedMessages.set(0);
1:             
1:             Thread.sleep(SAMPLE_DURATION);
1:             
1:             long end = System.currentTimeMillis();
1:             int r = receivedMessages.get();
1:             int p = producedMessages.get();
1:             
0:             System.out.println("published: " + p + " msgs at "+ (p * 1000f / (end - start)) + " msgs/sec, "+
0:                     "consumed: " + r + " msgs at "+ (r * 1000f / (end - start)) + " msgs/sec");
1:         }
1: 
0:         System.out.println("Sample done.");
1:         sampleTimeDone.countDown();
1: 
1:         workerDone.acquire();
1:         if (workerError[0] != null) {
1:             throw workerError[0];
1:         }
1: 
1:     }
1: 
1: }
author:Bosanac Dejan
-------------------------------------------------------------------------------
commit:8bf987b
/////////////////////////////////////////////////////////////////////////
1: import org.slf4j.Logger;
1: import org.slf4j.LoggerFactory;
/////////////////////////////////////////////////////////////////////////
1:     private static final transient Logger LOG = LoggerFactory.getLogger(JmsBenchmark.class);
author:James Strachan
-------------------------------------------------------------------------------
commit:aa1aa58
/////////////////////////////////////////////////////////////////////////
0: import org.apache.commons.logging.Log;
0: import org.apache.commons.logging.LogFactory;
/////////////////////////////////////////////////////////////////////////
0:     private static final transient Log log = LogFactory.getLog(JmsBenchmark.class);
/////////////////////////////////////////////////////////////////////////
0:         log.info(getName() + ": Waiting for Producers and Consumers to startup.");
0:         log.info("Producers and Consumers are now running.  Waiting for system to reach steady state: "
0:         log.info("Starting sample: "+SAMPLES+" each lasting "+ (SAMPLE_DURATION / 1000.0f) + " seconds");
/////////////////////////////////////////////////////////////////////////
0:             log.info("published: " + p + " msgs at "+ (p * 1000f / (end - start)) + " msgs/sec, "+
0:         log.info("Sample done.");
commit:f921ef7
/////////////////////////////////////////////////////////////////////////
0:             receivedMessages.set(0);
============================================================================