1:fc00993: /**
1:05a8cba:  * Licensed to the Apache Software Foundation (ASF) under one or more
1:05a8cba:  * contributor license agreements.  See the NOTICE file distributed with
1:05a8cba:  * this work for additional information regarding copyright ownership.
1:05a8cba:  * The ASF licenses this file to You under the Apache License, Version 2.0
1:05a8cba:  * (the "License"); you may not use this file except in compliance with
1:05a8cba:  * the License.  You may obtain a copy of the License at
1:05a8cba:  *
1:05a8cba:  *      http://www.apache.org/licenses/LICENSE-2.0
1:05a8cba:  *
1:05a8cba:  * Unless required by applicable law or agreed to in writing, software
1:05a8cba:  * distributed under the License is distributed on an "AS IS" BASIS,
1:05a8cba:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:05a8cba:  * See the License for the specific language governing permissions and
1:05a8cba:  * limitations under the License.
2:05a8cba:  */
1:05a8cba: package org.apache.activemq.blob;
5:52c22cc: 
1:05a8cba: import java.io.File;
1:52c22cc: import java.io.FileInputStream;
1:05a8cba: import java.io.IOException;
1:05a8cba: import java.io.InputStream;
1:52c22cc: import java.io.OutputStream;
1:5a521b4: import java.net.HttpURLConnection;
1:05a8cba: import java.net.MalformedURLException;
1:05a8cba: import java.net.URL;
1:5a521b4: 
1:5a521b4: import javax.jms.JMSException;
1:5a521b4: 
1:5a521b4: import org.apache.activemq.command.ActiveMQBlobMessage;
1:5a521b4: 
1:05a8cba: /**
1:f812e34:  * A default implementation of {@link BlobUploadStrategy} which uses the URL
1:f812e34:  * class to upload files or streams to a remote URL
1:52c22cc:  */
1:af159dd: public class DefaultBlobUploadStrategy extends DefaultStrategy implements BlobUploadStrategy {
1:5a521b4: 
1:05a8cba:     public DefaultBlobUploadStrategy(BlobTransferPolicy transferPolicy) {
1:af159dd:         super(transferPolicy);
2:52c22cc:     }
1:5a521b4: 
1:05a8cba:     public URL uploadFile(ActiveMQBlobMessage message, File file) throws JMSException, IOException {
1:12b26b6:         try(FileInputStream fis = new FileInputStream(file)) {
1:12b26b6:             return uploadStream(message, fis);
1:12b26b6:         }
1:5a521b4:     }
1:5a521b4: 
1:52c22cc:     public URL uploadStream(ActiveMQBlobMessage message, InputStream fis) throws JMSException, IOException {
1:af159dd:         URL url = createMessageURL(message);
1:5a521b4: 
2:5a521b4:         HttpURLConnection connection = (HttpURLConnection)url.openConnection();
1:5a521b4:         connection.setRequestMethod("PUT");
1:52c22cc:         connection.setDoOutput(true);
1:f812e34: 
1:f812e34:         // use chunked mode or otherwise URLConnection loads everything into
1:f812e34:         // memory
1:5a521b4:         // (chunked mode not supported before JRE 1.5)
1:5a521b4:         connection.setChunkedStreamingMode(transferPolicy.getBufferSize());
1:f812e34: 
1:12b26b6:         try(OutputStream os = connection.getOutputStream()) {
1:12b26b6:             byte[] buf = new byte[transferPolicy.getBufferSize()];
1:12b26b6:             for (int c = fis.read(buf); c != -1; c = fis.read(buf)) {
1:12b26b6:                 os.write(buf, 0, c);
1:12b26b6:                 os.flush();
1:12b26b6:             }
1:b64ac1d:         } catch (IOException error) {
1:b64ac1d:             throw new IOException("PUT failed to: " + url, error);
1:5a521b4:         }
1:f812e34: 
2:5a521b4:         if (!isSuccessfulCode(connection.getResponseCode())) {
1:b64ac1d:             throw new IOException("PUT to " + url + " was not successful: " + connection.getResponseCode() + " "
1:f812e34:                                   + connection.getResponseMessage());
1:f812e34:         }
1:f812e34: 
1:52c22cc:         return url;
1:f812e34:     }
1:5a521b4: 
1:5a521b4: 
1:5a521b4: }
============================================================================
author:gtully
-------------------------------------------------------------------------------
commit:b64ac1d
/////////////////////////////////////////////////////////////////////////
1:         } catch (IOException error) {
1:             throw new IOException("PUT failed to: " + url, error);
1:             throw new IOException("PUT to " + url + " was not successful: " + connection.getResponseCode() + " "
author:Christopher L. Shannon (cshannon)
-------------------------------------------------------------------------------
commit:12b26b6
/////////////////////////////////////////////////////////////////////////
1:         try(FileInputStream fis = new FileInputStream(file)) {
1:             return uploadStream(message, fis);
1:         }
/////////////////////////////////////////////////////////////////////////
1:         try(OutputStream os = connection.getOutputStream()) {
1:             byte[] buf = new byte[transferPolicy.getBufferSize()];
1:             for (int c = fis.read(buf); c != -1; c = fis.read(buf)) {
1:                 os.write(buf, 0, c);
1:                 os.flush();
1:             }
author:Hiram R. Chirino
-------------------------------------------------------------------------------
commit:9a8f6e4
commit:fc00993
/////////////////////////////////////////////////////////////////////////
1: /**
commit:f812e34
/////////////////////////////////////////////////////////////////////////
1:  * A default implementation of {@link BlobUploadStrategy} which uses the URL
1:  * class to upload files or streams to a remote URL
/////////////////////////////////////////////////////////////////////////
1: 
1:         // use chunked mode or otherwise URLConnection loads everything into
1:         // memory
1: 
0:             os.write(buf, 0, c);
0:             os.flush();
1: 
0:             throw new IOException("PUT was not successful: " + connection.getResponseCode() + " "
1:                                   + connection.getResponseMessage());
0:     public void deleteFile(ActiveMQBlobMessage message) throws IOException, JMSException {
/////////////////////////////////////////////////////////////////////////
0:             throw new IOException("DELETE was not successful: " + connection.getResponseCode() + " "
0:                                   + connection.getResponseMessage());
1:     }
0:     private boolean isSuccessfulCode(int responseCode) {
0:         return responseCode >= 200 && responseCode < 300; // 2xx => successful
1:     }
1: 
0:     protected URL createUploadURL(ActiveMQBlobMessage message) throws JMSException, MalformedURLException {
author:Bosanac Dejan
-------------------------------------------------------------------------------
commit:af159dd
/////////////////////////////////////////////////////////////////////////
1: public class DefaultBlobUploadStrategy extends DefaultStrategy implements BlobUploadStrategy {
1:         super(transferPolicy);
/////////////////////////////////////////////////////////////////////////
1:         URL url = createMessageURL(message);
/////////////////////////////////////////////////////////////////////////
author:James Strachan
-------------------------------------------------------------------------------
commit:5a521b4
/////////////////////////////////////////////////////////////////////////
1: import java.net.HttpURLConnection;
1: 
1: import javax.jms.JMSException;
1: 
1: import org.apache.activemq.command.ActiveMQBlobMessage;
/////////////////////////////////////////////////////////////////////////
1:         HttpURLConnection connection = (HttpURLConnection)url.openConnection();
1:         connection.setRequestMethod("PUT");
1:         
0:         // use chunked mode or otherwise URLConnection loads everything into memory
1:         // (chunked mode not supported before JRE 1.5)
1:         connection.setChunkedStreamingMode(transferPolicy.getBufferSize());
1:         
0:         	os.write(buf, 0, c);
0:         	os.flush();
1:         
1:         if (!isSuccessfulCode(connection.getResponseCode())) {
0:         	throw new IOException("PUT was not successful: "
0:         			+ connection.getResponseCode() + " " + connection.getResponseMessage());
0: 	public void deleteFile(ActiveMQBlobMessage message) throws IOException, JMSException {
0:         URL url = createUploadURL(message);
1: 
1:         HttpURLConnection connection = (HttpURLConnection)url.openConnection();
0:         connection.setRequestMethod("DELETE");
0:         connection.connect();
0:         connection.disconnect();
1: 
1:         if (!isSuccessfulCode(connection.getResponseCode())) {
0:         	throw new IOException("DELETE was not successful: "
0:         			+ connection.getResponseCode() + " " + connection.getResponseMessage());
1:         }
1: 	}
1: 	
0:     private boolean isSuccessfulCode(int responseCode) {
0: 		return responseCode >= 200 && responseCode < 300; // 2xx => successful
1: 	}
1: 
0: 	protected URL createUploadURL(ActiveMQBlobMessage message) throws JMSException, MalformedURLException {
commit:52c22cc
/////////////////////////////////////////////////////////////////////////
1: import java.io.FileInputStream;
1: import java.io.OutputStream;
0: import java.net.URLConnection;
/////////////////////////////////////////////////////////////////////////
0:         return uploadStream(message, new FileInputStream(file));
1:     public URL uploadStream(ActiveMQBlobMessage message, InputStream fis) throws JMSException, IOException {
1: 
0:         URLConnection connection = url.openConnection();
1:         connection.setDoOutput(true);
0:         OutputStream os = connection.getOutputStream();
1: 
0:         byte[] buf = new byte[transferPolicy.getBufferSize()];
0:         for (int c = fis.read(buf); c != -1; c = fis.read(buf)) {
0:             os.write(buf, 0, c);
1:         }
0:         os.close();
0:         fis.close();
1: 
0:         /*
0:         // Read the response.
0:         BufferedReader in = new BufferedReader(new InputStreamReader(connection.getInputStream()));
0:         String inputLine;
0:         while ((inputLine = in.readLine()) != null) {
0:             System.out.println(inputLine);
1:         }
0:         in.close();
1:         */
1: 
0:         // TODO we now need to ensure that the return code is OK?
1: 
1:         return url;
commit:05a8cba
/////////////////////////////////////////////////////////////////////////
0: /*
1:  * Licensed to the Apache Software Foundation (ASF) under one or more
1:  * contributor license agreements.  See the NOTICE file distributed with
1:  * this work for additional information regarding copyright ownership.
1:  * The ASF licenses this file to You under the Apache License, Version 2.0
1:  * (the "License"); you may not use this file except in compliance with
1:  * the License.  You may obtain a copy of the License at
1:  *
1:  *      http://www.apache.org/licenses/LICENSE-2.0
1:  *
1:  * Unless required by applicable law or agreed to in writing, software
1:  * distributed under the License is distributed on an "AS IS" BASIS,
1:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:  * See the License for the specific language governing permissions and
1:  * limitations under the License.
1:  */
1: package org.apache.activemq.blob;
0: 
0: import org.apache.activemq.command.ActiveMQBlobMessage;
0: 
0: import javax.jms.JMSException;
1: import java.io.File;
1: import java.io.IOException;
1: import java.io.InputStream;
1: import java.net.MalformedURLException;
1: import java.net.URL;
0: 
1: /**
0:  * A default implementation of {@link BlobUploadStrategy} which uses the URL class to upload
0:  * files or streams to a remote URL
1:  */
0: public class DefaultBlobUploadStrategy implements BlobUploadStrategy {
0:     private BlobTransferPolicy transferPolicy;
0: 
1:     public DefaultBlobUploadStrategy(BlobTransferPolicy transferPolicy) {
0:         this.transferPolicy = transferPolicy;
0:     }
0: 
1:     public URL uploadFile(ActiveMQBlobMessage message, File file) throws JMSException, IOException {
0:         URL url = createUploadURL(message);
0:         // TODO upload to URL
0:         // return url;
0:         throw new JMSException("Not implemented yet!");
0:     }
0: 
0:     public URL uploadStream(ActiveMQBlobMessage message, InputStream in) throws JMSException, IOException {
0:         URL url = createUploadURL(message);
0:         // TODO upload to URL
0:         // return url;
0:         throw new JMSException("Not implemented yet!");
0:     }
0: 
0:     protected URL createUploadURL(ActiveMQBlobMessage message) throws JMSException, MalformedURLException {
0:         return new URL(transferPolicy.getUploadUrl() + message.getMessageId().toString());
0:     }
0: }
============================================================================