1:3aec42d: /**
1:3aec42d:  * Licensed to the Apache Software Foundation (ASF) under one or more
1:3aec42d:  * contributor license agreements.  See the NOTICE file distributed with
1:3aec42d:  * this work for additional information regarding copyright ownership.
1:3aec42d:  * The ASF licenses this file to You under the Apache License, Version 2.0
1:3aec42d:  * (the "License"); you may not use this file except in compliance with
1:3aec42d:  * the License.  You may obtain a copy of the License at
1:3aec42d:  *
1:3aec42d:  *      http://www.apache.org/licenses/LICENSE-2.0
1:3aec42d:  *
1:3aec42d:  * Unless required by applicable law or agreed to in writing, software
1:3aec42d:  * distributed under the License is distributed on an "AS IS" BASIS,
1:3aec42d:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:3aec42d:  * See the License for the specific language governing permissions and
1:3aec42d:  * limitations under the License.
1:3aec42d:  */
1:3aec42d: 
1:3aec42d: package org.apache.activemq.transport.ws;
1:3aec42d: 
1:3aec42d: import static org.junit.Assert.assertNotNull;
1:3aec42d: import static org.junit.Assert.assertTrue;
1:3aec42d: 
1:3aec42d: import java.net.URI;
1:3aec42d: 
1:3aec42d: import org.apache.activemq.broker.BrokerFactory;
1:3aec42d: import org.apache.activemq.broker.BrokerService;
1:3aec42d: import org.apache.activemq.broker.TransportConnector;
1:3aec42d: import org.apache.activemq.spring.SpringSslContext;
1:3aec42d: import org.junit.After;
1:3aec42d: import org.junit.Before;
1:3aec42d: import org.junit.Test;
1:3aec42d: import org.slf4j.Logger;
1:3aec42d: import org.slf4j.LoggerFactory;
1:3aec42d: 
1:3aec42d: public class WSTransportLinkStealingTest {
1:3aec42d: 
1:3aec42d:     private static final Logger LOG = LoggerFactory.getLogger(WSTransportLinkStealingTest.class);
1:3aec42d: 
1:3aec42d:     private BrokerService broker;
1:3aec42d: 
1:3aec42d:     protected BrokerService createBroker(boolean deleteMessages) throws Exception {
1:3aec42d:         BrokerService broker = BrokerFactory.createBroker(
1:3aec42d:                 new URI("broker:()/localhost?persistent=false&useJmx=false"));
1:3aec42d: 
1:3aec42d:         SpringSslContext context = new SpringSslContext();
1:3aec42d:         context.setKeyStore("src/test/resources/server.keystore");
1:3aec42d:         context.setKeyStoreKeyPassword("password");
1:3aec42d:         context.setTrustStore("src/test/resources/client.keystore");
1:3aec42d:         context.setTrustStorePassword("password");
1:3aec42d:         context.afterPropertiesSet();
1:3aec42d:         broker.setSslContext(context);
1:3aec42d: 
1:f40532a:         broker.addConnector(getWSConnectorURI()).setName("ws+mqtt");
1:3aec42d:         broker.setDeleteAllMessagesOnStartup(deleteMessages);
1:3aec42d:         broker.start();
1:3aec42d:         broker.waitUntilStarted();
1:3aec42d: 
1:3aec42d:         return broker;
1:3aec42d:     }
1:3aec42d: 
1:3aec42d:     protected String getWSConnectorURI() {
1:3aec42d:         return "ws://127.0.0.1:61623?allowLinkStealing=true&websocket.maxTextMessageSize=99999&transport.maxIdleTime=1001";
1:3aec42d:     }
1:3aec42d: 
1:3aec42d:     protected void stopBroker() {
1:3aec42d:         try {
1:3aec42d:             if (broker != null) {
1:3aec42d:                 broker.stop();
1:3aec42d:                 broker.waitUntilStopped();
1:3aec42d:                 broker = null;
1:3aec42d:             }
1:3aec42d:         } catch (Exception e) {
1:3aec42d:             LOG.warn("Error during Broker stop");
1:3aec42d:         }
1:3aec42d:     }
1:3aec42d: 
1:3aec42d:     @Before
1:3aec42d:     public void setUp() throws Exception {
1:3aec42d:         broker = createBroker(true);
1:3aec42d:     }
1:3aec42d: 
1:3aec42d:     @After
1:3aec42d:     public void tearDown() throws Exception {
1:3aec42d:         stopBroker();
1:3aec42d:     }
1:3aec42d: 
1:3aec42d:     @Test
1:3aec42d:     public void testBrokerStart() throws Exception {
1:3aec42d:         assertTrue(broker.isStarted());
1:3aec42d: 
1:3aec42d:         TransportConnector connector = broker.getTransportConnectorByName("ws+mqtt");
1:3aec42d:         assertNotNull("Should have an WS transport", connector);
1:3aec42d:         assertTrue(connector.isAllowLinkStealing());
1:3aec42d:     }
1:3aec42d: }
============================================================================
author:Christopher L. Shannon (cshannon)
-------------------------------------------------------------------------------
commit:f40532a
/////////////////////////////////////////////////////////////////////////
1:         broker.addConnector(getWSConnectorURI()).setName("ws+mqtt");
author:Timothy Bish
-------------------------------------------------------------------------------
commit:3aec42d
/////////////////////////////////////////////////////////////////////////
1: /**
1:  * Licensed to the Apache Software Foundation (ASF) under one or more
1:  * contributor license agreements.  See the NOTICE file distributed with
1:  * this work for additional information regarding copyright ownership.
1:  * The ASF licenses this file to You under the Apache License, Version 2.0
1:  * (the "License"); you may not use this file except in compliance with
1:  * the License.  You may obtain a copy of the License at
1:  *
1:  *      http://www.apache.org/licenses/LICENSE-2.0
1:  *
1:  * Unless required by applicable law or agreed to in writing, software
1:  * distributed under the License is distributed on an "AS IS" BASIS,
1:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:  * See the License for the specific language governing permissions and
1:  * limitations under the License.
1:  */
1: 
1: package org.apache.activemq.transport.ws;
1: 
1: import static org.junit.Assert.assertNotNull;
1: import static org.junit.Assert.assertTrue;
1: 
1: import java.net.URI;
1: 
1: import org.apache.activemq.broker.BrokerFactory;
1: import org.apache.activemq.broker.BrokerService;
1: import org.apache.activemq.broker.TransportConnector;
1: import org.apache.activemq.spring.SpringSslContext;
1: import org.junit.After;
1: import org.junit.Before;
1: import org.junit.Test;
1: import org.slf4j.Logger;
1: import org.slf4j.LoggerFactory;
1: 
1: public class WSTransportLinkStealingTest {
1: 
1:     private static final Logger LOG = LoggerFactory.getLogger(WSTransportLinkStealingTest.class);
1: 
1:     private BrokerService broker;
1: 
1:     protected BrokerService createBroker(boolean deleteMessages) throws Exception {
1:         BrokerService broker = BrokerFactory.createBroker(
1:                 new URI("broker:()/localhost?persistent=false&useJmx=false"));
1: 
1:         SpringSslContext context = new SpringSslContext();
1:         context.setKeyStore("src/test/resources/server.keystore");
1:         context.setKeyStoreKeyPassword("password");
1:         context.setTrustStore("src/test/resources/client.keystore");
1:         context.setTrustStorePassword("password");
1:         context.afterPropertiesSet();
1:         broker.setSslContext(context);
1: 
0:         broker.addConnector(getWSConnectorURI()).setName("ws+mqtt");;
1:         broker.setDeleteAllMessagesOnStartup(deleteMessages);
1:         broker.start();
1:         broker.waitUntilStarted();
1: 
1:         return broker;
1:     }
1: 
1:     protected String getWSConnectorURI() {
1:         return "ws://127.0.0.1:61623?allowLinkStealing=true&websocket.maxTextMessageSize=99999&transport.maxIdleTime=1001";
1:     }
1: 
1:     protected void stopBroker() {
1:         try {
1:             if (broker != null) {
1:                 broker.stop();
1:                 broker.waitUntilStopped();
1:                 broker = null;
1:             }
1:         } catch (Exception e) {
1:             LOG.warn("Error during Broker stop");
1:         }
1:     }
1: 
1:     @Before
1:     public void setUp() throws Exception {
1:         broker = createBroker(true);
1:     }
1: 
1:     @After
1:     public void tearDown() throws Exception {
1:         stopBroker();
1:     }
1: 
1:     @Test
1:     public void testBrokerStart() throws Exception {
1:         assertTrue(broker.isStarted());
1: 
1:         TransportConnector connector = broker.getTransportConnectorByName("ws+mqtt");
1:         assertNotNull("Should have an WS transport", connector);
1:         assertTrue(connector.isAllowLinkStealing());
1:     }
1: }
============================================================================