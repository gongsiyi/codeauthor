1:bab4a92: /*
1:bab4a92:  * Licensed to the Apache Software Foundation (ASF) under one or more
1:bab4a92:  * contributor license agreements.  See the NOTICE file distributed with
1:bab4a92:  * this work for additional information regarding copyright ownership.
1:bab4a92:  * The ASF licenses this file to You under the Apache License, Version 2.0
1:bab4a92:  * (the "License"); you may not use this file except in compliance with
1:bab4a92:  * the License.  You may obtain a copy of the License at
1:bab4a92:  *
1:bab4a92:  *      http://www.apache.org/licenses/LICENSE-2.0
1:bab4a92:  *
1:bab4a92:  * Unless required by applicable law or agreed to in writing, software
1:bab4a92:  * distributed under the License is distributed on an "AS IS" BASIS,
1:bab4a92:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:bab4a92:  * See the License for the specific language governing permissions and
1:bab4a92:  * limitations under the License.
1:bab4a92:  */
1:bab4a92: package org.apache.activemq.junit;
1:bab4a92: 
1:bab4a92: import java.net.URI;
1:bab4a92: import javax.jms.BytesMessage;
1:bab4a92: import javax.jms.JMSException;
1:bab4a92: import javax.jms.MapMessage;
1:bab4a92: import javax.jms.Message;
1:bab4a92: import javax.jms.MessageConsumer;
1:bab4a92: import javax.jms.ObjectMessage;
1:bab4a92: import javax.jms.TextMessage;
1:bab4a92: 
1:bab4a92: import org.apache.activemq.ActiveMQConnectionFactory;
1:bab4a92: 
1:bab4a92: public abstract class AbstractActiveMQConsumerResource extends AbstractActiveMQClientResource {
1:bab4a92:     MessageConsumer consumer;
1:bab4a92:     long defaultReceiveTimout = 50;
1:bab4a92: 
1:bab4a92:     public AbstractActiveMQConsumerResource(String destinationName, ActiveMQConnectionFactory connectionFactory) {
1:bab4a92:         super(destinationName, connectionFactory);
1:bab4a92:     }
1:bab4a92: 
1:bab4a92:     public AbstractActiveMQConsumerResource(String destinationName, URI brokerURI) {
1:bab4a92:         super(destinationName, brokerURI);
1:bab4a92:     }
1:bab4a92: 
1:bab4a92:     public AbstractActiveMQConsumerResource(String destinationName, EmbeddedActiveMQBroker embeddedActiveMQBroker) {
1:bab4a92:         super(destinationName, embeddedActiveMQBroker);
1:bab4a92:     }
1:bab4a92: 
1:bab4a92:     public AbstractActiveMQConsumerResource(String destinationName, URI brokerURI, String userName, String password) {
1:bab4a92:         super(destinationName, brokerURI, userName, password);
1:bab4a92:     }
1:bab4a92: 
1:bab4a92:     public long getDefaultReceiveTimout() {
1:bab4a92:         return defaultReceiveTimout;
1:bab4a92:     }
1:bab4a92: 
1:bab4a92:     public void setDefaultReceiveTimout(long defaultReceiveTimout) {
1:bab4a92:         this.defaultReceiveTimout = defaultReceiveTimout;
1:bab4a92:     }
1:bab4a92: 
1:bab4a92:     @Override
1:bab4a92:     protected void createClient() throws JMSException {
1:bab4a92:         consumer = session.createConsumer(destination);
1:bab4a92:     }
1:bab4a92: 
1:bab4a92:     public BytesMessage receiveBytesMessage() throws JMSException {
1:bab4a92:         return (BytesMessage) this.receiveMessage();
1:bab4a92:     }
1:bab4a92: 
1:bab4a92:     public TextMessage receiveTextMessage() throws JMSException {
1:bab4a92:         return (TextMessage) this.receiveMessage();
1:bab4a92:     }
1:bab4a92: 
1:bab4a92:     public MapMessage receiveMapMessage() throws JMSException {
1:bab4a92:         return (MapMessage) this.receiveMessage();
1:bab4a92:     }
1:bab4a92: 
1:bab4a92:     public ObjectMessage receiveObjectMessage() throws JMSException {
1:bab4a92:         return (ObjectMessage) this.receiveMessage();
1:bab4a92:     }
1:bab4a92: 
1:bab4a92:     public BytesMessage receiveBytesMessage(long timeout) throws JMSException {
1:bab4a92:         return (BytesMessage) this.receiveMessage(timeout);
1:bab4a92:     }
1:bab4a92: 
1:bab4a92:     public TextMessage receiveTextMessage(long timeout) throws JMSException {
1:bab4a92:         return (TextMessage) this.receiveMessage(timeout);
1:bab4a92:     }
1:bab4a92: 
1:bab4a92:     public MapMessage receiveMapMessage(long timeout) throws JMSException {
1:bab4a92:         return (MapMessage) this.receiveMessage(timeout);
1:bab4a92:     }
1:bab4a92: 
1:bab4a92:     public ObjectMessage receiveObjectMessage(long timeout) throws JMSException {
1:bab4a92:         return (ObjectMessage) this.receiveMessage(timeout);
1:bab4a92:     }
1:bab4a92: 
1:bab4a92:     public Message receiveMessage() throws JMSException {
1:bab4a92:         return receiveMessage(defaultReceiveTimout);
1:bab4a92:     }
1:bab4a92: 
1:bab4a92:     /**
1:bab4a92:      * Receive a message with the given timeout
1:bab4a92:      *
1:bab4a92:      * @param timeout
1:bab4a92:      * @return
1:bab4a92:      * @throws JMSException
1:bab4a92:      */
1:bab4a92:     public Message receiveMessage(long timeout) throws JMSException {
1:bab4a92:         Message message = null;
1:bab4a92:         if (timeout > 0) {
1:bab4a92:             message = consumer.receive(timeout);
1:bab4a92:         } else if (timeout == 0) {
1:bab4a92:             message = consumer.receiveNoWait();
1:bab4a92:         } else {
1:bab4a92:             message = consumer.receive();
1:bab4a92:         }
1:bab4a92: 
1:bab4a92:         return message;
1:bab4a92:     }
1:bab4a92: }
============================================================================
author:Quinn Stevenson
-------------------------------------------------------------------------------
commit:bab4a92
/////////////////////////////////////////////////////////////////////////
1: /*
1:  * Licensed to the Apache Software Foundation (ASF) under one or more
1:  * contributor license agreements.  See the NOTICE file distributed with
1:  * this work for additional information regarding copyright ownership.
1:  * The ASF licenses this file to You under the Apache License, Version 2.0
1:  * (the "License"); you may not use this file except in compliance with
1:  * the License.  You may obtain a copy of the License at
1:  *
1:  *      http://www.apache.org/licenses/LICENSE-2.0
1:  *
1:  * Unless required by applicable law or agreed to in writing, software
1:  * distributed under the License is distributed on an "AS IS" BASIS,
1:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:  * See the License for the specific language governing permissions and
1:  * limitations under the License.
1:  */
1: package org.apache.activemq.junit;
1: 
1: import java.net.URI;
1: import javax.jms.BytesMessage;
1: import javax.jms.JMSException;
1: import javax.jms.MapMessage;
1: import javax.jms.Message;
1: import javax.jms.MessageConsumer;
1: import javax.jms.ObjectMessage;
1: import javax.jms.TextMessage;
1: 
1: import org.apache.activemq.ActiveMQConnectionFactory;
1: 
1: public abstract class AbstractActiveMQConsumerResource extends AbstractActiveMQClientResource {
1:     MessageConsumer consumer;
1:     long defaultReceiveTimout = 50;
1: 
1:     public AbstractActiveMQConsumerResource(String destinationName, ActiveMQConnectionFactory connectionFactory) {
1:         super(destinationName, connectionFactory);
1:     }
1: 
1:     public AbstractActiveMQConsumerResource(String destinationName, URI brokerURI) {
1:         super(destinationName, brokerURI);
1:     }
1: 
1:     public AbstractActiveMQConsumerResource(String destinationName, EmbeddedActiveMQBroker embeddedActiveMQBroker) {
1:         super(destinationName, embeddedActiveMQBroker);
1:     }
1: 
1:     public AbstractActiveMQConsumerResource(String destinationName, URI brokerURI, String userName, String password) {
1:         super(destinationName, brokerURI, userName, password);
1:     }
1: 
1:     public long getDefaultReceiveTimout() {
1:         return defaultReceiveTimout;
1:     }
1: 
1:     public void setDefaultReceiveTimout(long defaultReceiveTimout) {
1:         this.defaultReceiveTimout = defaultReceiveTimout;
1:     }
1: 
1:     @Override
1:     protected void createClient() throws JMSException {
1:         consumer = session.createConsumer(destination);
1:     }
1: 
1:     public BytesMessage receiveBytesMessage() throws JMSException {
1:         return (BytesMessage) this.receiveMessage();
1:     }
1: 
1:     public TextMessage receiveTextMessage() throws JMSException {
1:         return (TextMessage) this.receiveMessage();
1:     }
1: 
1:     public MapMessage receiveMapMessage() throws JMSException {
1:         return (MapMessage) this.receiveMessage();
1:     }
1: 
1:     public ObjectMessage receiveObjectMessage() throws JMSException {
1:         return (ObjectMessage) this.receiveMessage();
1:     }
1: 
1:     public BytesMessage receiveBytesMessage(long timeout) throws JMSException {
1:         return (BytesMessage) this.receiveMessage(timeout);
1:     }
1: 
1:     public TextMessage receiveTextMessage(long timeout) throws JMSException {
1:         return (TextMessage) this.receiveMessage(timeout);
1:     }
1: 
1:     public MapMessage receiveMapMessage(long timeout) throws JMSException {
1:         return (MapMessage) this.receiveMessage(timeout);
1:     }
1: 
1:     public ObjectMessage receiveObjectMessage(long timeout) throws JMSException {
1:         return (ObjectMessage) this.receiveMessage(timeout);
1:     }
1: 
1:     public Message receiveMessage() throws JMSException {
1:         return receiveMessage(defaultReceiveTimout);
1:     }
1: 
1:     /**
1:      * Receive a message with the given timeout
1:      *
1:      * @param timeout
1:      * @return
1:      * @throws JMSException
1:      */
1:     public Message receiveMessage(long timeout) throws JMSException {
1:         Message message = null;
1:         if (timeout > 0) {
1:             message = consumer.receive(timeout);
1:         } else if (timeout == 0) {
1:             message = consumer.receiveNoWait();
1:         } else {
1:             message = consumer.receive();
1:         }
1: 
1:         return message;
1:     }
1: }
============================================================================