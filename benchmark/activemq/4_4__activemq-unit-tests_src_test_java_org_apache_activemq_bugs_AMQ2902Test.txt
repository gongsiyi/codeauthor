1:c4911bd: /**
1:c4911bd:  * Licensed to the Apache Software Foundation (ASF) under one or more
1:c4911bd:  * contributor license agreements.  See the NOTICE file distributed with
1:c4911bd:  * this work for additional information regarding copyright ownership.
1:c4911bd:  * The ASF licenses this file to You under the Apache License, Version 2.0
1:c4911bd:  * (the "License"); you may not use this file except in compliance with
1:c4911bd:  * the License.  You may obtain a copy of the License at
1:c4911bd:  *
1:c4911bd:  *      http://www.apache.org/licenses/LICENSE-2.0
1:c4911bd:  *
1:c4911bd:  * Unless required by applicable law or agreed to in writing, software
1:c4911bd:  * distributed under the License is distributed on an "AS IS" BASIS,
1:c4911bd:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:c4911bd:  * See the License for the specific language governing permissions and
1:c4911bd:  * limitations under the License.
1:c4911bd:  */
1:c4911bd: package org.apache.activemq.bugs;
8:c4911bd: 
1:c4911bd: import java.util.concurrent.atomic.AtomicBoolean;
1:c4911bd: 
1:c4911bd: import javax.jms.Connection;
1:c4911bd: import javax.jms.ConnectionFactory;
1:c4911bd: import javax.jms.JMSException;
1:c4911bd: 
1:c4911bd: import junit.framework.TestCase;
1:c4911bd: 
1:c4911bd: import org.apache.activemq.ActiveMQConnectionFactory;
1:c4911bd: import org.apache.activemq.broker.TransportConnection;
1:c4911bd: import org.apache.activemq.transport.TransportDisposedIOException;
1:8bab1c1: import org.apache.activemq.util.DefaultTestAppender;
1:c4911bd: import org.apache.log4j.Appender;
1:c4911bd: import org.apache.log4j.Level;
1:c4911bd: import org.apache.log4j.Logger;
1:c4911bd: import org.apache.log4j.spi.LoggingEvent;
1:33cdefa: import org.slf4j.LoggerFactory;
1:c4911bd: 
1:c4911bd: public class AMQ2902Test extends TestCase {
1:33cdefa:     private static final org.slf4j.Logger LOG = LoggerFactory.getLogger(AMQ2580Test.class);
1:33cdefa: 
1:c4911bd:     final AtomicBoolean gotExceptionInLog = new AtomicBoolean(Boolean.FALSE);
1:2c27e5e:     final AtomicBoolean failedToFindMDC = new AtomicBoolean(Boolean.FALSE);
1:8bab1c1: 
1:8bab1c1:     Appender appender = new DefaultTestAppender() {
1:8bab1c1:         @Override
1:c4911bd:         public void doAppend(LoggingEvent event) {
1:c4911bd:             if (event.getThrowableInformation() != null
1:c4911bd:                     && event.getThrowableInformation().getThrowable() instanceof TransportDisposedIOException) {
1:c4911bd: 
1:6ea8438:                 // Prevent StackOverflowException so we can see a sane stack trace.
1:6ea8438:                 if (gotExceptionInLog.get()) {
1:6ea8438:                     return;
10:c4911bd:                 }
1:c4911bd: 
1:c4911bd:                 gotExceptionInLog.set(Boolean.TRUE);
1:33cdefa:                 LOG.error("got event: " + event + ", ex:" + event.getThrowableInformation().getThrowable(), event.getThrowableInformation().getThrowable());
1:65ba623:                 LOG.error("Event source: ", new Throwable("Here"));
1:c4911bd:             }
1:5e13c20:             if( !"Loaded the Bouncy Castle security provider.".equals(event.getMessage()) ) {
1:2c27e5e:                 if (event.getMDC("activemq.broker") == null) {
1:2c27e5e:                     failedToFindMDC.set(Boolean.TRUE);
1:2c27e5e:                 }
1:c4911bd:             }
1:c4911bd:             return;
1:c4911bd:         }
1:c4911bd:     };
1:c4911bd: 
1:c4911bd:     public void testNoExceptionOnClosewithStartStop() throws JMSException {
1:c4911bd:         ConnectionFactory connectionFactory = new ActiveMQConnectionFactory(
2:c4911bd:                 "vm://localhost?broker.persistent=false");
1:c4911bd:         Connection connection = connectionFactory.createConnection();
1:c4911bd:         connection.start();
1:c4911bd:         connection.stop();
1:c4911bd:         connection.close();
1:c4911bd:     }
1:c4911bd: 
1:c4911bd:     public void testNoExceptionOnClose() throws JMSException {
1:c4911bd:         ConnectionFactory connectionFactory = new ActiveMQConnectionFactory(
1:b60bfbb:                 "vm://localhost?broker.persistent=false");
1:c4911bd:         Connection connection = connectionFactory.createConnection();
1:c4911bd:         connection.close();
1:c4911bd:     }
1:c4911bd: 
1:6ea8438:     @Override
1:c4911bd:     public void setUp() throws Exception {
1:c4911bd:         gotExceptionInLog.set(Boolean.FALSE);
1:2c27e5e:         failedToFindMDC.set(Boolean.FALSE);
1:c4911bd:         Logger.getRootLogger().addAppender(appender);
1:c4911bd:         Logger.getLogger(TransportConnection.class.getName() + ".Transport").setLevel(Level.DEBUG);
1:2c27e5e:         Logger.getLogger(TransportConnection.class.getName()).setLevel(Level.DEBUG);
1:c4911bd:     }
1:c4911bd: 
1:6ea8438:     @Override
1:c4911bd:     public void tearDown() throws Exception {
1:c4911bd:         Logger.getRootLogger().removeAppender(appender);
1:c4911bd:         assertFalse("got unexpected ex in log on graceful close", gotExceptionInLog.get());
1:2c27e5e:         assertFalse("MDC is there", failedToFindMDC.get());
1:c4911bd:     }
1:c4911bd: }
============================================================================
author:gtully
-------------------------------------------------------------------------------
commit:b60bfbb
/////////////////////////////////////////////////////////////////////////
1:                 "vm://localhost?broker.persistent=false");
commit:8cf98a0
/////////////////////////////////////////////////////////////////////////
0:                 "vm://localhostTwo?broker.persistent=false");
author:Gary Tully
-------------------------------------------------------------------------------
commit:65ba623
/////////////////////////////////////////////////////////////////////////
1:                 LOG.error("Event source: ", new Throwable("Here"));
commit:33cdefa
/////////////////////////////////////////////////////////////////////////
1: import org.slf4j.LoggerFactory;
1:     private static final org.slf4j.Logger LOG = LoggerFactory.getLogger(AMQ2580Test.class);
1: 
/////////////////////////////////////////////////////////////////////////
1:                 LOG.error("got event: " + event + ", ex:" + event.getThrowableInformation().getThrowable(), event.getThrowableInformation().getThrowable());
commit:8bab1c1
/////////////////////////////////////////////////////////////////////////
1: import org.apache.activemq.util.DefaultTestAppender;
/////////////////////////////////////////////////////////////////////////
1:     
1:     Appender appender = new DefaultTestAppender() {
1:         @Override
/////////////////////////////////////////////////////////////////////////
commit:2c27e5e
/////////////////////////////////////////////////////////////////////////
1:     final AtomicBoolean failedToFindMDC = new AtomicBoolean(Boolean.FALSE);
/////////////////////////////////////////////////////////////////////////
1:             if (event.getMDC("activemq.broker") == null) {
1:                 failedToFindMDC.set(Boolean.TRUE);
1:             }
/////////////////////////////////////////////////////////////////////////
1:         failedToFindMDC.set(Boolean.FALSE);
1:         Logger.getLogger(TransportConnection.class.getName()).setLevel(Level.DEBUG);
1:         assertFalse("MDC is there", failedToFindMDC.get());
commit:c4911bd
/////////////////////////////////////////////////////////////////////////
1: /**
1:  * Licensed to the Apache Software Foundation (ASF) under one or more
1:  * contributor license agreements.  See the NOTICE file distributed with
1:  * this work for additional information regarding copyright ownership.
1:  * The ASF licenses this file to You under the Apache License, Version 2.0
1:  * (the "License"); you may not use this file except in compliance with
1:  * the License.  You may obtain a copy of the License at
1:  *
1:  *      http://www.apache.org/licenses/LICENSE-2.0
1:  *
1:  * Unless required by applicable law or agreed to in writing, software
1:  * distributed under the License is distributed on an "AS IS" BASIS,
1:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:  * See the License for the specific language governing permissions and
1:  * limitations under the License.
1:  */
1: package org.apache.activemq.bugs;
1: 
1: import java.util.concurrent.atomic.AtomicBoolean;
1: import javax.jms.Connection;
1: import javax.jms.ConnectionFactory;
1: import javax.jms.JMSException;
1: import junit.framework.TestCase;
1: import org.apache.activemq.ActiveMQConnectionFactory;
1: import org.apache.activemq.broker.TransportConnection;
1: import org.apache.activemq.transport.TransportDisposedIOException;
1: import org.apache.log4j.Appender;
0: import org.apache.log4j.Layout;
1: import org.apache.log4j.Level;
1: import org.apache.log4j.Logger;
0: import org.apache.log4j.spi.ErrorHandler;
0: import org.apache.log4j.spi.Filter;
1: import org.apache.log4j.spi.LoggingEvent;
1: 
1: public class AMQ2902Test extends TestCase {
1:     final AtomicBoolean gotExceptionInLog = new AtomicBoolean(Boolean.FALSE);
1: 
0:     Appender appender = new Appender() {
0:         public void addFilter(Filter newFilter) {
1:         }
1: 
0:         public Filter getFilter() {
0:             return null;
1:         }
1: 
0:         public void clearFilters() {
1:         }
1: 
0:         public void close() {
1:         }
1: 
1:         public void doAppend(LoggingEvent event) {
1:             if (event.getThrowableInformation() != null
1:                     && event.getThrowableInformation().getThrowable() instanceof TransportDisposedIOException) {
1:                 gotExceptionInLog.set(Boolean.TRUE);
1:             }
1:             return;
1:         }
1: 
0:         public String getName() {
0:             return "AMQ2902TestAppender";
1:         }
1: 
0:         public void setErrorHandler(ErrorHandler errorHandler) {
1:         }
1: 
0:         public ErrorHandler getErrorHandler() {
0:             return null;
1:         }
1: 
0:         public void setLayout(Layout layout) {
1:         }
1: 
0:         public Layout getLayout() {
0:             return null;
1:         }
1: 
0:         public void setName(String name) {
1:         }
1: 
0:         public boolean requiresLayout() {
0:             return false;
1:         }
1:     };
1: 
1:     public void testNoExceptionOnClosewithStartStop() throws JMSException {
1:         ConnectionFactory connectionFactory = new ActiveMQConnectionFactory(
1:                 "vm://localhost?broker.persistent=false");
1:         Connection connection = connectionFactory.createConnection();
1:         connection.start();
1:         connection.stop();
1:         connection.close();
1:     }
1: 
1:     public void testNoExceptionOnClose() throws JMSException {
1:         ConnectionFactory connectionFactory = new ActiveMQConnectionFactory(
1:                 "vm://localhost?broker.persistent=false");
1:         Connection connection = connectionFactory.createConnection();
1:         connection.close();
1:     }
1: 
1:     public void setUp() throws Exception {
1:         gotExceptionInLog.set(Boolean.FALSE);
1:         Logger.getRootLogger().addAppender(appender);
1:         Logger.getLogger(TransportConnection.class.getName() + ".Transport").setLevel(Level.DEBUG);
1:     }
1: 
1:     public void tearDown() throws Exception {
1:         Logger.getRootLogger().removeAppender(appender);
1:         assertFalse("got unexpected ex in log on graceful close", gotExceptionInLog.get());
1:     }
1: }
author:Timothy A. Bish
-------------------------------------------------------------------------------
commit:a2c297d
/////////////////////////////////////////////////////////////////////////
0:                 LOG.error("got event: " + event + ", ex:" + event.getThrowableInformation().getThrowable(), event.getThrowableInformation().getThrowable());
commit:6ea8438
/////////////////////////////////////////////////////////////////////////
0: 
0: 
0: 
/////////////////////////////////////////////////////////////////////////
0: 
0: 
1:                 // Prevent StackOverflowException so we can see a sane stack trace.
1:                 if (gotExceptionInLog.get()) {
1:                     return;
0:                 }
0: 
/////////////////////////////////////////////////////////////////////////
1:     @Override
/////////////////////////////////////////////////////////////////////////
1:     @Override
commit:ef24cc9
author:Hiram R. Chirino
-------------------------------------------------------------------------------
commit:5e13c20
/////////////////////////////////////////////////////////////////////////
1:             if( !"Loaded the Bouncy Castle security provider.".equals(event.getMessage()) ) {
0:                 if (event.getMDC("activemq.broker") == null) {
0:                     failedToFindMDC.set(Boolean.TRUE);
0:                 }
============================================================================