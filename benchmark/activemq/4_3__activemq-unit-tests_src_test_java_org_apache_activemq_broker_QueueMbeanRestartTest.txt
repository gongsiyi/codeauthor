1:ab12a60: /**
1:ab12a60:  * Licensed to the Apache Software Foundation (ASF) under one or more
1:ab12a60:  * contributor license agreements.  See the NOTICE file distributed with
1:ab12a60:  * this work for additional information regarding copyright ownership.
1:ab12a60:  * The ASF licenses this file to You under the Apache License, Version 2.0
1:ab12a60:  * (the "License"); you may not use this file except in compliance with
1:ab12a60:  * the License.  You may obtain a copy of the License at
1:ab12a60:  *
1:ab12a60:  *      http://www.apache.org/licenses/LICENSE-2.0
1:ab12a60:  *
1:ab12a60:  * Unless required by applicable law or agreed to in writing, software
1:ab12a60:  * distributed under the License is distributed on an "AS IS" BASIS,
1:ab12a60:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:ab12a60:  * See the License for the specific language governing permissions and
1:ab12a60:  * limitations under the License.
1:ab12a60:  */
1:ab12a60: package org.apache.activemq.broker;
1:f13968e: 
1:f7f294f: import java.util.ArrayList;
1:f7f294f: import java.util.Collection;
1:f7f294f: import java.util.List;
1:f7f294f: 
1:ab12a60: import javax.jms.MessageProducer;
1:ab12a60: import javax.jms.Session;
1:ab12a60: import javax.management.ObjectName;
1:f13968e: 
1:ab12a60: import org.apache.activemq.TestSupport;
1:ab12a60: import org.apache.activemq.command.ActiveMQQueue;
1:ab12a60: import org.apache.activemq.util.JMXSupport;
1:f7f294f: import org.junit.After;
1:f7f294f: import org.junit.Before;
1:f7f294f: import org.junit.Test;
1:f7f294f: import org.junit.runner.RunWith;
1:f7f294f: import org.junit.runners.Parameterized;
1:ab12a60: import org.slf4j.Logger;
1:ab12a60: import org.slf4j.LoggerFactory;
3:ab12a60: 
1:f7f294f: @RunWith(value = Parameterized.class)
1:ab12a60: public class QueueMbeanRestartTest extends TestSupport {
1:ab12a60:     private static final transient Logger LOG = LoggerFactory.getLogger(QueueMbeanRestartTest.class);
1:ab12a60: 
1:ab12a60:     BrokerService broker;
1:ab12a60: 
1:f7f294f:     private final TestSupport.PersistenceAdapterChoice persistenceAdapterChoice;
1:f7f294f: 
1:f7f294f:     @Parameterized.Parameters
1:f7f294f:     public static Collection<TestSupport.PersistenceAdapterChoice[]> getTestParameters() {
1:f7f294f:         TestSupport.PersistenceAdapterChoice[] kahaDb = {TestSupport.PersistenceAdapterChoice.KahaDB};
1:f7f294f:         TestSupport.PersistenceAdapterChoice[] levelDb = {TestSupport.PersistenceAdapterChoice.LevelDB};
1:f7f294f:         TestSupport.PersistenceAdapterChoice[] jdbc = {TestSupport.PersistenceAdapterChoice.JDBC};
1:f7f294f:         List<TestSupport.PersistenceAdapterChoice[]> choices = new ArrayList<TestSupport.PersistenceAdapterChoice[]>();
1:f7f294f:         choices.add(kahaDb);
1:f7f294f:         choices.add(levelDb);
1:f7f294f:         choices.add(jdbc);
1:f7f294f: 
1:f7f294f:         return choices;
1:f7f294f:     }
1:f7f294f: 
1:f7f294f:     public QueueMbeanRestartTest(TestSupport.PersistenceAdapterChoice choice) {
1:f7f294f:         this.persistenceAdapterChoice = choice;
2:ab12a60:     }
1:ab12a60: 
1:f7f294f:     @Before
1:ab12a60:     public void setUp() throws Exception {
1:ab12a60:         topic = false;
1:ab12a60:         super.setUp();
1:ab12a60:     }
1:ab12a60: 
1:f7f294f:     @After
1:ab12a60:     public void tearDown() throws Exception {
1:ab12a60:         super.tearDown();
1:ab12a60:         broker.stop();
1:ab12a60:     }
1:ab12a60: 
1:f7f294f:     @Test(timeout = 60000)
1:ab12a60:     public void testMBeanPresenceOnRestart() throws Exception {
1:ab12a60:         createBroker(true);
1:ab12a60: 
1:ab12a60:         sendMessages();
1:ab12a60:         verifyPresenceOfQueueMbean();
1:ab12a60:         LOG.info("restart....");
1:ab12a60: 
1:ab12a60:         restartBroker();
1:ab12a60:         verifyPresenceOfQueueMbean();
1:ab12a60:     }
1:ab12a60: 
1:ab12a60:     private void restartBroker() throws Exception {
1:ab12a60:         broker.stop();
1:ab12a60:         broker.waitUntilStopped();
1:0ed2ddb:         Thread.sleep(5 * 1000);
1:ab12a60:         createBroker(false);
1:f13968e:         broker.waitUntilStarted();
1:ab12a60:     }
1:ab12a60: 
1:ab12a60:     private void verifyPresenceOfQueueMbean() throws Exception {
1:ab12a60:         for (ObjectName name : broker.getManagementContext().queryNames(null, null)) {
1:ab12a60:             LOG.info("candidate :" + name);
1:123a512:             String type = name.getKeyProperty("destinationType");
1:ab12a60:             if (type != null && type.equals("Queue")) {
1:ab12a60:                 assertEquals(
1:ab12a60:                         JMXSupport.encodeObjectNamePart(((ActiveMQQueue) createDestination()).getPhysicalName()),
1:123a512:                         name.getKeyProperty("destinationName"));
1:ab12a60:                 LOG.info("found mbbean " + name);
1:ab12a60:                 return;
1:ab12a60:             }
1:ab12a60:         }
1:ab12a60:         fail("expected to find matching queue mbean for: " + createDestination());
1:ab12a60:     }
1:ab12a60: 
1:ab12a60:     private void sendMessages() throws Exception {
1:ab12a60:         Session session = createConnection().createSession(false, Session.AUTO_ACKNOWLEDGE);
1:ab12a60:         MessageProducer producer = session.createProducer(createDestination());
1:ab12a60:         producer.send(session.createTextMessage());
1:ab12a60:     }
1:ab12a60: 
1:ab12a60:     private void createBroker(boolean deleteAll) throws Exception {
1:ab12a60:         broker = new BrokerService();
1:f7f294f:         setPersistenceAdapter(broker, persistenceAdapterChoice);
1:ab12a60: 
1:ab12a60:         broker.setDeleteAllMessagesOnStartup(deleteAll);
1:ab12a60:         broker.start();
1:ab12a60:     }
1:ab12a60: }
============================================================================
author:Kevin Earls
-------------------------------------------------------------------------------
commit:0ed2ddb
/////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////
1:         Thread.sleep(5 * 1000);
author:Timothy A. Bish
-------------------------------------------------------------------------------
commit:f7f294f
/////////////////////////////////////////////////////////////////////////
1: import java.util.ArrayList;
1: import java.util.Collection;
1: import java.util.List;
1: 
1: import org.junit.After;
1: import org.junit.Before;
1: import org.junit.Test;
1: import org.junit.runner.RunWith;
1: import org.junit.runners.Parameterized;
1: @RunWith(value = Parameterized.class)
1:     private final TestSupport.PersistenceAdapterChoice persistenceAdapterChoice;
1: 
1:     @Parameterized.Parameters
1:     public static Collection<TestSupport.PersistenceAdapterChoice[]> getTestParameters() {
1:         TestSupport.PersistenceAdapterChoice[] kahaDb = {TestSupport.PersistenceAdapterChoice.KahaDB};
1:         TestSupport.PersistenceAdapterChoice[] levelDb = {TestSupport.PersistenceAdapterChoice.LevelDB};
1:         TestSupport.PersistenceAdapterChoice[] jdbc = {TestSupport.PersistenceAdapterChoice.JDBC};
1:         List<TestSupport.PersistenceAdapterChoice[]> choices = new ArrayList<TestSupport.PersistenceAdapterChoice[]>();
1:         choices.add(kahaDb);
1:         choices.add(levelDb);
1:         choices.add(jdbc);
1: 
1:         return choices;
1:     }
1: 
1:     public QueueMbeanRestartTest(TestSupport.PersistenceAdapterChoice choice) {
1:         this.persistenceAdapterChoice = choice;
1:     @Before
1:     @After
1:     @Test(timeout = 60000)
/////////////////////////////////////////////////////////////////////////
1:         setPersistenceAdapter(broker, persistenceAdapterChoice);
commit:ef24cc9
commit:123a512
/////////////////////////////////////////////////////////////////////////
0:     @Override
0:     @Override
/////////////////////////////////////////////////////////////////////////
1:             String type = name.getKeyProperty("destinationType");
1:                         name.getKeyProperty("destinationName"));
commit:f13968e
/////////////////////////////////////////////////////////////////////////
1: 
1: 
/////////////////////////////////////////////////////////////////////////
1:         broker.waitUntilStarted();
author:Hiram R. Chirino
-------------------------------------------------------------------------------
commit:77a679b
/////////////////////////////////////////////////////////////////////////
0:                 new Object[]{PersistenceAdapterChoice.KahaDB, PersistenceAdapterChoice.LevelDB, PersistenceAdapterChoice.JDBC});
author:Gary Tully
-------------------------------------------------------------------------------
commit:ab12a60
/////////////////////////////////////////////////////////////////////////
1: /**
1:  * Licensed to the Apache Software Foundation (ASF) under one or more
1:  * contributor license agreements.  See the NOTICE file distributed with
1:  * this work for additional information regarding copyright ownership.
1:  * The ASF licenses this file to You under the Apache License, Version 2.0
1:  * (the "License"); you may not use this file except in compliance with
1:  * the License.  You may obtain a copy of the License at
1:  *
1:  *      http://www.apache.org/licenses/LICENSE-2.0
1:  *
1:  * Unless required by applicable law or agreed to in writing, software
1:  * distributed under the License is distributed on an "AS IS" BASIS,
1:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:  * See the License for the specific language governing permissions and
1:  * limitations under the License.
1:  */
1: package org.apache.activemq.broker;
1: 
1: import javax.jms.MessageProducer;
1: import javax.jms.Session;
1: import javax.management.ObjectName;
0: import junit.framework.Test;
1: import org.apache.activemq.TestSupport;
1: import org.apache.activemq.command.ActiveMQQueue;
1: import org.apache.activemq.util.JMXSupport;
1: import org.slf4j.Logger;
1: import org.slf4j.LoggerFactory;
1: 
1: public class QueueMbeanRestartTest extends TestSupport {
1:     private static final transient Logger LOG = LoggerFactory.getLogger(QueueMbeanRestartTest.class);
1: 
1:     BrokerService broker;
1: 
0:     public static Test suite() {
0:         return suite(QueueMbeanRestartTest.class);
1:     }
1: 
1:     public void setUp() throws Exception {
1:         topic = false;
1:         super.setUp();
1:     }
1: 
1:     public void tearDown() throws Exception {
1:         super.tearDown();
1:         broker.stop();
1:     }
1: 
0:     public void initCombosForTestMBeanPresenceOnRestart() {
0:         addCombinationValues("defaultPersistenceAdapter",
0:                 new Object[]{PersistenceAdapterChoice.KahaDB, PersistenceAdapterChoice.JDBC});
1:     }
1: 
1:     public void testMBeanPresenceOnRestart() throws Exception {
1:         createBroker(true);
1: 
1:         sendMessages();
1:         verifyPresenceOfQueueMbean();
1:         LOG.info("restart....");
1: 
1:         restartBroker();
1:         verifyPresenceOfQueueMbean();
1:     }
1: 
1:     private void restartBroker() throws Exception {
1:         broker.stop();
1:         broker.waitUntilStopped();
1:         createBroker(false);
1:     }
1: 
1:     private void verifyPresenceOfQueueMbean() throws Exception {
1:         for (ObjectName name : broker.getManagementContext().queryNames(null, null)) {
1:             LOG.info("candidate :" + name);
0:             String type = name.getKeyProperty("Type");
1:             if (type != null && type.equals("Queue")) {
1:                 assertEquals(
1:                         JMXSupport.encodeObjectNamePart(((ActiveMQQueue) createDestination()).getPhysicalName()),
0:                         name.getKeyProperty("Destination"));
1:                 LOG.info("found mbbean " + name);
1:                 return;
1:             }
1:         }
1:         fail("expected to find matching queue mbean for: " + createDestination());
1:     }
1: 
1:     private void sendMessages() throws Exception {
1:         Session session = createConnection().createSession(false, Session.AUTO_ACKNOWLEDGE);
1:         MessageProducer producer = session.createProducer(createDestination());
1:         producer.send(session.createTextMessage());
1:     }
1: 
1:     private void createBroker(boolean deleteAll) throws Exception {
1:         broker = new BrokerService();
0:         setDefaultPersistenceAdapter(broker);
1: 
1:         broker.setDeleteAllMessagesOnStartup(deleteAll);
1:         broker.start();
1:     }
1: }
============================================================================