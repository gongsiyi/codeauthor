1:5ab78c1: /**
1:5ab78c1:  * Licensed to the Apache Software Foundation (ASF) under one or more
1:5ab78c1:  * contributor license agreements.  See the NOTICE file distributed with
1:5ab78c1:  * this work for additional information regarding copyright ownership.
1:5ab78c1:  * The ASF licenses this file to You under the Apache License, Version 2.0
1:5ab78c1:  * (the "License"); you may not use this file except in compliance with
1:5ab78c1:  * the License.  You may obtain a copy of the License at
1:5ab78c1:  *
1:5ab78c1:  *      http://www.apache.org/licenses/LICENSE-2.0
1:5ab78c1:  *
1:5ab78c1:  * Unless required by applicable law or agreed to in writing, software
1:5ab78c1:  * distributed under the License is distributed on an "AS IS" BASIS,
1:5ab78c1:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:5ab78c1:  * See the License for the specific language governing permissions and
1:5ab78c1:  * limitations under the License.
1:5ab78c1:  */
1:5ab78c1: 
1:5ab78c1: package org.apache.activemq.util.oxm;
1:5ab78c1: 
1:b358c05: import java.io.StringReader;
1:b358c05: import java.io.StringWriter;
1:5ab78c1: import javax.jms.JMSException;
1:5ab78c1: import javax.jms.ObjectMessage;
1:5ab78c1: import javax.jms.Session;
1:5ab78c1: import javax.jms.TextMessage;
1:b358c05: import javax.xml.transform.Result;
1:b358c05: import javax.xml.transform.Source;
1:b358c05: import javax.xml.transform.stream.StreamResult;
1:b358c05: import javax.xml.transform.stream.StreamSource;
1:5ab78c1: 
1:b358c05: import org.springframework.oxm.support.AbstractMarshaller;
1:b358c05: 
1:5ab78c1: 
1:5ab78c1: /**
1:b358c05:  * Transforms object messages to text messages and vice versa using Spring OXM.
1:5ab78c1:  *
1:5ab78c1:  */
1:5ab78c1: public class OXMMessageTransformer extends AbstractXMLMessageTransformer {
1:5ab78c1: 
1:5ab78c1: 	/**
1:5ab78c1: 	 * OXM marshaller used to marshall/unmarshall messages
1:5ab78c1: 	 */
1:5ab78c1: 	private AbstractMarshaller marshaller;
1:5ab78c1: 	
1:5ab78c1: 	public AbstractMarshaller getMarshaller() {
1:5ab78c1: 		return marshaller;
1:5ab78c1: 	}
1:5ab78c1: 
1:5ab78c1: 	public void setMarshaller(AbstractMarshaller marshaller) {
1:5ab78c1: 		this.marshaller = marshaller;
1:5ab78c1: 	}
1:5ab78c1: 
1:5ab78c1:     /**
1:5ab78c1:      * Marshalls the Object in the {@link ObjectMessage} to a string using XML
1:5ab78c1:      * encoding
1:5ab78c1:      */
1:5ab78c1: 	protected String marshall(Session session, ObjectMessage objectMessage)
1:5ab78c1: 			throws JMSException {
1:5ab78c1: 		try {
1:b358c05:             StringWriter writer = new StringWriter();
1:b358c05:             Result result = new StreamResult(writer);
1:b358c05:             marshaller.marshal(objectMessage.getObject(), result);
1:b358c05:             writer.flush();
1:b358c05: 			return writer.toString();
1:5ab78c1: 		} catch (Exception e) {
1:5ab78c1: 			throw new JMSException(e.getMessage());
1:5ab78c1: 		}
1:5ab78c1: 	} 
1:5ab78c1: 	
1:5ab78c1:     /**
1:5ab78c1:      * Unmarshalls the XML encoded message in the {@link TextMessage} to an
1:5ab78c1:      * Object
1:5ab78c1:      */
1:5ab78c1: 	protected Object unmarshall(Session session, TextMessage textMessage)
1:5ab78c1: 			throws JMSException {
1:5ab78c1: 		try {
1:b358c05:             String text = textMessage.getText();
1:b358c05:             Source source = new StreamSource(new StringReader(text));
1:b358c05: 			return marshaller.unmarshal(source);
1:5ab78c1: 		} catch (Exception e) {
1:5ab78c1: 			throw new JMSException(e.getMessage());
1:5ab78c1: 		}
1:5ab78c1: 	}
1:5ab78c1: 
1:5ab78c1: }
============================================================================
author:Hiram R. Chirino
-------------------------------------------------------------------------------
commit:ecaae53
author:Claus Ibsen
-------------------------------------------------------------------------------
commit:b358c05
/////////////////////////////////////////////////////////////////////////
1: import java.io.StringReader;
1: import java.io.StringWriter;
1: import javax.xml.transform.Result;
1: import javax.xml.transform.Source;
1: import javax.xml.transform.stream.StreamResult;
1: import javax.xml.transform.stream.StreamSource;
1: import org.springframework.oxm.support.AbstractMarshaller;
1: 
1:  * Transforms object messages to text messages and vice versa using Spring OXM.
/////////////////////////////////////////////////////////////////////////
1:             StringWriter writer = new StringWriter();
1:             Result result = new StreamResult(writer);
1:             marshaller.marshal(objectMessage.getObject(), result);
1:             writer.flush();
1: 			return writer.toString();
/////////////////////////////////////////////////////////////////////////
1:             String text = textMessage.getText();
1:             Source source = new StreamSource(new StringReader(text));
1: 			return marshaller.unmarshal(source);
commit:3b4aadc
/////////////////////////////////////////////////////////////////////////
author:Bosanac Dejan
-------------------------------------------------------------------------------
commit:5ab78c1
/////////////////////////////////////////////////////////////////////////
1: /**
1:  * Licensed to the Apache Software Foundation (ASF) under one or more
1:  * contributor license agreements.  See the NOTICE file distributed with
1:  * this work for additional information regarding copyright ownership.
1:  * The ASF licenses this file to You under the Apache License, Version 2.0
1:  * (the "License"); you may not use this file except in compliance with
1:  * the License.  You may obtain a copy of the License at
1:  *
1:  *      http://www.apache.org/licenses/LICENSE-2.0
1:  *
1:  * Unless required by applicable law or agreed to in writing, software
1:  * distributed under the License is distributed on an "AS IS" BASIS,
1:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:  * See the License for the specific language governing permissions and
1:  * limitations under the License.
1:  */
1: 
1: package org.apache.activemq.util.oxm;
1: 
1: import javax.jms.JMSException;
1: import javax.jms.ObjectMessage;
1: import javax.jms.Session;
1: import javax.jms.TextMessage;
1: 
0: import org.springframework.oxm.AbstractMarshaller;
0: import org.springframework.oxm.Marshaller;
0: import org.springframework.oxm.Unmarshaller;
0: import org.springframework.xml.transform.StringResult;
0: import org.springframework.xml.transform.StringSource;
1: 
1: /**
0:  * Transforms object messages to text messages and vice versa using {@link Spring OXM}
1:  *
1:  */
1: public class OXMMessageTransformer extends AbstractXMLMessageTransformer {
1: 
1: 	/**
1: 	 * OXM marshaller used to marshall/unmarshall messages
1: 	 */
1: 	private AbstractMarshaller marshaller;
1: 	
1: 	public AbstractMarshaller getMarshaller() {
1: 		return marshaller;
1: 	}
1: 
1: 	public void setMarshaller(AbstractMarshaller marshaller) {
1: 		this.marshaller = marshaller;
1: 	}
1: 
1:     /**
1:      * Marshalls the Object in the {@link ObjectMessage} to a string using XML
1:      * encoding
1:      */
1: 	protected String marshall(Session session, ObjectMessage objectMessage)
1: 			throws JMSException {
0: 		StringResult result = new StringResult();
1: 		try {
0: 			marshaller.marshal(objectMessage.getObject(), result);
0: 			return result.toString();
1: 		} catch (Exception e) {
1: 			throw new JMSException(e.getMessage());
1: 		}
1: 	} 
1: 	
1:     /**
1:      * Unmarshalls the XML encoded message in the {@link TextMessage} to an
1:      * Object
1:      */
1: 	protected Object unmarshall(Session session, TextMessage textMessage)
1: 			throws JMSException {
1: 		try {
0: 			return marshaller.unmarshal(new StringSource(textMessage.getText()));
1: 		} catch (Exception e) {
1: 			throw new JMSException(e.getMessage());
1: 		}
1: 	}
1: 
1: }
============================================================================