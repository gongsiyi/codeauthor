1:fc00993: /**
1:57b4941:  * Licensed to the Apache Software Foundation (ASF) under one or more
1:57b4941:  * contributor license agreements.  See the NOTICE file distributed with
1:57b4941:  * this work for additional information regarding copyright ownership.
1:57b4941:  * The ASF licenses this file to You under the Apache License, Version 2.0
1:57b4941:  * (the "License"); you may not use this file except in compliance with
1:57b4941:  * the License.  You may obtain a copy of the License at
2:4ae7e1c:  *
1:4ae7e1c:  *      http://www.apache.org/licenses/LICENSE-2.0
1:4ae7e1c:  *
1:4ae7e1c:  * Unless required by applicable law or agreed to in writing, software
1:4ae7e1c:  * distributed under the License is distributed on an "AS IS" BASIS,
1:4ae7e1c:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:4ae7e1c:  * See the License for the specific language governing permissions and
1:4ae7e1c:  * limitations under the License.
1:4ae7e1c:  */
1:4ae7e1c: package org.apache.activemq.broker.virtual;
7:4ae7e1c: 
1:74a7a8b: import java.net.URI;
1:74a7a8b: 
1:74a7a8b: import javax.jms.Connection;
1:74a7a8b: import javax.jms.Destination;
1:74a7a8b: import javax.jms.JMSException;
1:1ccd177: import javax.jms.Message;
1:74a7a8b: import javax.jms.MessageConsumer;
1:74a7a8b: import javax.jms.MessageProducer;
1:74a7a8b: import javax.jms.Session;
1:74a7a8b: import javax.jms.TextMessage;
1:74a7a8b: 
1:4ae7e1c: import org.apache.activemq.EmbeddedBrokerTestSupport;
1:4ae7e1c: import org.apache.activemq.broker.BrokerService;
1:1ccd177: import org.apache.activemq.command.ActiveMQMessage;
1:4ae7e1c: import org.apache.activemq.command.ActiveMQQueue;
1:4ae7e1c: import org.apache.activemq.command.ActiveMQTopic;
1:4ae7e1c: import org.apache.activemq.spring.ConsumerBean;
1:4ae7e1c: import org.apache.activemq.xbean.XBeanBrokerFactory;
1:1ccd177: import org.junit.Test;
1:8bf987b: import org.slf4j.Logger;
1:8bf987b: import org.slf4j.LoggerFactory;
1:4ae7e1c: 
1:1ccd177: import static org.junit.Assert.assertEquals;
1:1ccd177: 
1:4ae7e1c: /**
1:0bbc0ac:  * 
1:4ae7e1c:  * 
1:4ae7e1c:  */
1:4ae7e1c: public class CompositeQueueTest extends EmbeddedBrokerTestSupport {
1:4ae7e1c: 
1:8bf987b:     private static final Logger LOG = LoggerFactory.getLogger(CompositeQueueTest.class);
1:4ae7e1c:     
1:4f7aeec:     protected int total = 10;
1:027d2e7:     protected Connection connection;
1:027d2e7:     public String messageSelector1, messageSelector2 = null;
1:4f7aeec: 
1:4f7aeec: 
1:1ccd177:     @Test
1:4ae7e1c:     public void testVirtualTopicCreation() throws Exception {
1:4ae7e1c:         if (connection == null) {
1:4ae7e1c:             connection = createConnection();
2:4ae7e1c:         }
1:4ae7e1c:         connection.start();
1:4ae7e1c: 
1:4ae7e1c:         ConsumerBean messageList1 = new ConsumerBean();
1:4ae7e1c:         ConsumerBean messageList2 = new ConsumerBean();
1:4ae7e1c:         messageList1.setVerbose(true);
1:4ae7e1c:         messageList2.setVerbose(true);
1:4ae7e1c: 
1:4ae7e1c:         Session session = connection.createSession(false, Session.AUTO_ACKNOWLEDGE);
1:4ae7e1c:         
1:4ae7e1c:         Destination producerDestination = getProducerDestination();
1:4ae7e1c:         Destination destination1 = getConsumer1Dsetination();
1:4ae7e1c:         Destination destination2 = getConsumer2Dsetination();
1:4ae7e1c:         
1:fc00993:         LOG.info("Sending to: " + producerDestination);
1:fc00993:         LOG.info("Consuming from: " + destination1 + " and " + destination2);
1:4ae7e1c:         
1:027d2e7:         MessageConsumer c1 = session.createConsumer(destination1, messageSelector1);
1:027d2e7:         MessageConsumer c2 = session.createConsumer(destination2, messageSelector2);
1:4ae7e1c: 
1:4ae7e1c:         c1.setMessageListener(messageList1);
1:4ae7e1c:         c2.setMessageListener(messageList2);
1:4ae7e1c: 
1:4ae7e1c:         // create topic producer
1:4ae7e1c:         MessageProducer producer = session.createProducer(producerDestination);
1:4ae7e1c:         assertNotNull(producer);
1:4ae7e1c: 
1:4ae7e1c:         for (int i = 0; i < total; i++) {
1:4f7aeec:             producer.send(createMessage(session, i));
1:4ae7e1c:         }
1:4ae7e1c: 
1:4f7aeec:         assertMessagesArrived(messageList1, messageList2);
1:1ccd177:         assertOriginalDestination(messageList1, messageList2);
1:1ccd177: 
1:4f7aeec:     }
1:4f7aeec: 
1:4f7aeec:     protected void assertMessagesArrived(ConsumerBean messageList1, ConsumerBean messageList2) {
1:4ae7e1c:         messageList1.assertMessagesArrived(total);
1:4ae7e1c:         messageList2.assertMessagesArrived(total);
1:4ae7e1c:     }
1:4f7aeec: 
1:1ccd177:     protected void assertOriginalDestination(ConsumerBean messageList1, ConsumerBean messageList2) {
1:1ccd177:         for( Message message: messageList1.getMessages()) {
1:1ccd177:             ActiveMQMessage amqMessage = (ActiveMQMessage)message;
1:1ccd177:             assertEquals( getProducerDestination(), amqMessage.getOriginalDestination() );
1:1ccd177:         }
1:1ccd177: 
1:1ccd177:         for( Message message: messageList1.getMessages()) {
1:1ccd177:             ActiveMQMessage amqMessage = (ActiveMQMessage)message;
1:1ccd177:             assertEquals( getProducerDestination(), amqMessage.getOriginalDestination() );
1:1ccd177:         }
1:1ccd177:     }
1:1ccd177: 
1:4f7aeec:     protected TextMessage createMessage(Session session, int i) throws JMSException {
1:4f7aeec:         TextMessage textMessage = session.createTextMessage("message: " + i);
1:d36c0d4:         if (i % 2 != 0) {
1:4f7aeec:             textMessage.setStringProperty("odd", "yes");
1:027d2e7:         } else {
1:027d2e7:             textMessage.setStringProperty("odd", "no");
1:4f7aeec:         }
1:4f7aeec:         textMessage.setIntProperty("i", i);
1:4f7aeec:         return textMessage;
1:4f7aeec:     }
1:4f7aeec: 
1:4ae7e1c:     protected Destination getConsumer1Dsetination() {
1:4ae7e1c:         return new ActiveMQQueue("FOO");
1:4ae7e1c:     }
1:4ae7e1c: 
1:4ae7e1c:     protected Destination getConsumer2Dsetination() {
1:4ae7e1c:         return new ActiveMQTopic("BAR");
1:4ae7e1c:     }
1:4ae7e1c: 
1:4ae7e1c:     protected Destination getProducerDestination() {
1:4ae7e1c:         return new ActiveMQQueue("MY.QUEUE");
1:4ae7e1c:     }
1:4ae7e1c: 
1:4ae7e1c:     protected void tearDown() throws Exception {
1:4ae7e1c:         if (connection != null) {
1:4ae7e1c:             connection.close();
1:4ae7e1c:         }
1:4ae7e1c:         super.tearDown();
1:4ae7e1c:     }
1:4ae7e1c: 
1:4ae7e1c:     protected BrokerService createBroker() throws Exception {
1:4ae7e1c:         XBeanBrokerFactory factory = new XBeanBrokerFactory();
1:4ae7e1c:         BrokerService answer = factory.createBroker(new URI(getBrokerConfigUri()));
1:4ae7e1c:         return answer;
1:4ae7e1c:     }
1:4ae7e1c: 
1:4ae7e1c:     protected String getBrokerConfigUri() {
1:4ae7e1c:         return "org/apache/activemq/broker/virtual/composite-queue.xml";
1:86cbdfd:     }
1:4ae7e1c: }
============================================================================
author:Quinn Stevenson
-------------------------------------------------------------------------------
commit:1ccd177
/////////////////////////////////////////////////////////////////////////
1: import javax.jms.Message;
/////////////////////////////////////////////////////////////////////////
1: import org.apache.activemq.command.ActiveMQMessage;
1: import org.junit.Test;
1: import static org.junit.Assert.assertEquals;
1: 
/////////////////////////////////////////////////////////////////////////
1:     @Test
/////////////////////////////////////////////////////////////////////////
1:         assertOriginalDestination(messageList1, messageList2);
1: 
/////////////////////////////////////////////////////////////////////////
1:     protected void assertOriginalDestination(ConsumerBean messageList1, ConsumerBean messageList2) {
1:         for( Message message: messageList1.getMessages()) {
1:             ActiveMQMessage amqMessage = (ActiveMQMessage)message;
1:             assertEquals( getProducerDestination(), amqMessage.getOriginalDestination() );
1:         }
1: 
1:         for( Message message: messageList1.getMessages()) {
1:             ActiveMQMessage amqMessage = (ActiveMQMessage)message;
1:             assertEquals( getProducerDestination(), amqMessage.getOriginalDestination() );
1:         }
1:     }
1: 
author:Timothy A. Bish
-------------------------------------------------------------------------------
commit:ef24cc9
author:Hiram R. Chirino
-------------------------------------------------------------------------------
commit:0bbc0ac
/////////////////////////////////////////////////////////////////////////
1:  * 
commit:ecf89a6
/////////////////////////////////////////////////////////////////////////
0:     private Connection connection;
commit:fc00993
/////////////////////////////////////////////////////////////////////////
1: /**
/////////////////////////////////////////////////////////////////////////
0:     private static final Log LOG = LogFactory.getLog(CompositeQueueTest.class);
/////////////////////////////////////////////////////////////////////////
1:         LOG.info("Sending to: " + producerDestination);
1:         LOG.info("Consuming from: " + destination1 + " and " + destination2);
commit:74a7a8b
/////////////////////////////////////////////////////////////////////////
1: import java.net.URI;
1: 
1: import javax.jms.Connection;
1: import javax.jms.Destination;
1: import javax.jms.JMSException;
1: import javax.jms.MessageConsumer;
1: import javax.jms.MessageProducer;
1: import javax.jms.Session;
1: import javax.jms.TextMessage;
1: 
/////////////////////////////////////////////////////////////////////////
commit:86cbdfd
/////////////////////////////////////////////////////////////////////////
1: }
commit:57b4941
/////////////////////////////////////////////////////////////////////////
1:  * Licensed to the Apache Software Foundation (ASF) under one or more
1:  * contributor license agreements.  See the NOTICE file distributed with
1:  * this work for additional information regarding copyright ownership.
1:  * The ASF licenses this file to You under the Apache License, Version 2.0
1:  * (the "License"); you may not use this file except in compliance with
1:  * the License.  You may obtain a copy of the License at
author:Bosanac Dejan
-------------------------------------------------------------------------------
commit:8bf987b
/////////////////////////////////////////////////////////////////////////
1: import org.slf4j.Logger;
1: import org.slf4j.LoggerFactory;
/////////////////////////////////////////////////////////////////////////
1:     private static final Logger LOG = LoggerFactory.getLogger(CompositeQueueTest.class);
author:Gary Tully
-------------------------------------------------------------------------------
commit:027d2e7
/////////////////////////////////////////////////////////////////////////
1:     protected Connection connection;
1:     public String messageSelector1, messageSelector2 = null;
/////////////////////////////////////////////////////////////////////////
1:         MessageConsumer c1 = session.createConsumer(destination1, messageSelector1);
1:         MessageConsumer c2 = session.createConsumer(destination2, messageSelector2);
/////////////////////////////////////////////////////////////////////////
1:         } else {
1:             textMessage.setStringProperty("odd", "no");
author:Robert Davies
-------------------------------------------------------------------------------
commit:d36c0d4
/////////////////////////////////////////////////////////////////////////
1:         if (i % 2 != 0) {
commit:81920f6
/////////////////////////////////////////////////////////////////////////
author:James Strachan
-------------------------------------------------------------------------------
commit:4f7aeec
/////////////////////////////////////////////////////////////////////////
0: import javax.jms.TextMessage;
0: import javax.jms.JMSException;
/////////////////////////////////////////////////////////////////////////
1:     protected int total = 10;
1: 
1: 
/////////////////////////////////////////////////////////////////////////
1:             producer.send(createMessage(session, i));
1:         assertMessagesArrived(messageList1, messageList2);
1:     }
1: 
1:     protected void assertMessagesArrived(ConsumerBean messageList1, ConsumerBean messageList2) {
1: 
1:     protected TextMessage createMessage(Session session, int i) throws JMSException {
1:         TextMessage textMessage = session.createTextMessage("message: " + i);
0:         if (i % 2 == 1) {
1:             textMessage.setStringProperty("odd", "yes");
1:         }
1:         textMessage.setIntProperty("i", i);
1:         return textMessage;
1:     }
1: 
commit:4ae7e1c
/////////////////////////////////////////////////////////////////////////
0: /*
0:  * Copyright 2005-2006 The Apache Software Foundation.
1:  *
0:  * Licensed under the Apache License, Version 2.0 (the "License");
0:  * you may not use this file except in compliance with the License.
0:  * You may obtain a copy of the License at
1:  *
1:  *      http://www.apache.org/licenses/LICENSE-2.0
1:  *
1:  * Unless required by applicable law or agreed to in writing, software
1:  * distributed under the License is distributed on an "AS IS" BASIS,
1:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:  * See the License for the specific language governing permissions and
1:  * limitations under the License.
1:  */
1: package org.apache.activemq.broker.virtual;
1: 
1: import org.apache.activemq.EmbeddedBrokerTestSupport;
1: import org.apache.activemq.broker.BrokerService;
1: import org.apache.activemq.command.ActiveMQQueue;
1: import org.apache.activemq.command.ActiveMQTopic;
1: import org.apache.activemq.spring.ConsumerBean;
1: import org.apache.activemq.xbean.XBeanBrokerFactory;
0: import org.apache.commons.logging.Log;
0: import org.apache.commons.logging.LogFactory;
1: 
0: import javax.jms.Connection;
0: import javax.jms.Destination;
0: import javax.jms.MessageConsumer;
0: import javax.jms.MessageProducer;
0: import javax.jms.Session;
1: 
0: import java.net.URI;
1: 
1: /**
1:  * 
0:  * @version $Revision$
1:  */
1: public class CompositeQueueTest extends EmbeddedBrokerTestSupport {
1: 
0:     private static final Log log = LogFactory.getLog(CompositeQueueTest.class);
1:     
0:     private Connection connection;
1: 
1:     public void testVirtualTopicCreation() throws Exception {
1:         if (connection == null) {
1:             connection = createConnection();
1:         }
1:         connection.start();
1: 
1:         ConsumerBean messageList1 = new ConsumerBean();
1:         ConsumerBean messageList2 = new ConsumerBean();
1:         messageList1.setVerbose(true);
1:         messageList2.setVerbose(true);
1: 
1:         Session session = connection.createSession(false, Session.AUTO_ACKNOWLEDGE);
1:         
1:         Destination producerDestination = getProducerDestination();
1:         Destination destination1 = getConsumer1Dsetination();
1:         Destination destination2 = getConsumer2Dsetination();
1:         
0:         log.info("Sending to: " + producerDestination);
0:         log.info("Consuming from: " + destination1 + " and " + destination2);
1:         
0:         MessageConsumer c1 = session.createConsumer(destination1);
0:         MessageConsumer c2 = session.createConsumer(destination2);
1: 
1:         c1.setMessageListener(messageList1);
1:         c2.setMessageListener(messageList2);
1: 
1:         // create topic producer
1:         MessageProducer producer = session.createProducer(producerDestination);
1:         assertNotNull(producer);
1: 
0:         int total = 10;
1:         for (int i = 0; i < total; i++) {
0:             producer.send(session.createTextMessage("message: " + i));
1:         }
1: 
1:         messageList1.assertMessagesArrived(total);
1:         messageList2.assertMessagesArrived(total);
1:     }
1:     
1:     protected Destination getConsumer1Dsetination() {
1:         return new ActiveMQQueue("FOO");
1:     }
1: 
1:     protected Destination getConsumer2Dsetination() {
1:         return new ActiveMQTopic("BAR");
1:     }
1: 
1:     protected Destination getProducerDestination() {
1:         return new ActiveMQQueue("MY.QUEUE");
1:     }
1: 
1:     protected void tearDown() throws Exception {
1:         if (connection != null) {
1:             connection.close();
1:         }
1:         super.tearDown();
1:     }
1: 
1:     protected BrokerService createBroker() throws Exception {
1:         XBeanBrokerFactory factory = new XBeanBrokerFactory();
1:         BrokerService answer = factory.createBroker(new URI(getBrokerConfigUri()));
1:         
0:         // lets disable persistence as we are a test
0:         answer.setPersistent(false);
1:         
1:         return answer;
1:     }
1: 
1:     protected String getBrokerConfigUri() {
1:         return "org/apache/activemq/broker/virtual/composite-queue.xml";
1:     }
1: }
============================================================================