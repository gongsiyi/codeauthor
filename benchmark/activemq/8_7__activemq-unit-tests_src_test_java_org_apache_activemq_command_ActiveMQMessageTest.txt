3:d29ca2a: /**
1:57b4941:  * Licensed to the Apache Software Foundation (ASF) under one or more
1:57b4941:  * contributor license agreements.  See the NOTICE file distributed with
1:57b4941:  * this work for additional information regarding copyright ownership.
1:57b4941:  * The ASF licenses this file to You under the Apache License, Version 2.0
1:57b4941:  * (the "License"); you may not use this file except in compliance with
1:57b4941:  * the License.  You may obtain a copy of the License at
1:41c9366:  *
1:230a86c:  *      http://www.apache.org/licenses/LICENSE-2.0
1:b0c2a40:  *
1:d29ca2a:  * Unless required by applicable law or agreed to in writing, software
1:d29ca2a:  * distributed under the License is distributed on an "AS IS" BASIS,
1:d29ca2a:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:d29ca2a:  * See the License for the specific language governing permissions and
1:d29ca2a:  * limitations under the License.
3:d29ca2a:  */
1:d29ca2a: package org.apache.activemq.command;
1:933eb2f: 
1:d29ca2a: import java.io.IOException;
1:d29ca2a: import java.util.Enumeration;
1:d29ca2a: import java.util.Map;
5:d29ca2a: 
1:b1bc593: import javax.jms.DeliveryMode;
1:d29ca2a: import javax.jms.JMSException;
1:d29ca2a: import javax.jms.Message;
1:d29ca2a: import javax.jms.MessageFormatException;
1:d29ca2a: import javax.jms.MessageNotWriteableException;
1:d29ca2a: 
1:d29ca2a: import junit.framework.TestCase;
1:d29ca2a: 
1:d29ca2a: import org.apache.activemq.openwire.OpenWireFormat;
1:d29ca2a: import org.apache.activemq.state.CommandVisitor;
1:88acb0e: import org.apache.activemq.util.ByteSequence;
1:88acb0e: import org.apache.activemq.wireformat.WireFormat;
1:8bf987b: import org.slf4j.Logger;
1:8bf987b: import org.slf4j.LoggerFactory;
1:d29ca2a: 
1:d29ca2a: public class ActiveMQMessageTest extends TestCase {
1:230a86c: 
1:8bf987b:     private static final Logger LOG = LoggerFactory.getLogger(ActiveMQMessageTest.class);
1:230a86c: 
1:fc00993:     protected boolean readOnlyMessage;
1:fc00993: 
1:ecf89a6:     private String jmsMessageID;
1:d29ca2a:     private String jmsCorrelationID;
1:d29ca2a:     private ActiveMQDestination jmsDestination;
1:d29ca2a:     private ActiveMQDestination jmsReplyTo;
1:d29ca2a:     private int jmsDeliveryMode;
1:d29ca2a:     private boolean jmsRedelivered;
1:d29ca2a:     private String jmsType;
1:d29ca2a:     private long jmsExpiration;
1:d29ca2a:     private int jmsPriority;
1:d29ca2a:     private long jmsTimestamp;
1:d29ca2a:     private long[] consumerIDs;
1:41c9366: 
1:933eb2f:     /**
1:933eb2f:      * Constructor for ActiveMQMessageTest.
1:41c9366:      *
1:933eb2f:      * @param name
1:933eb2f:      */
1:933eb2f:     public ActiveMQMessageTest(String name) {
1:933eb2f:         super(name);
1:933eb2f:     }
1:d29ca2a: 
1:d29ca2a:     public static void main(String[] args) {
1:d29ca2a:     }
1:d29ca2a: 
1:d29ca2a:     /*
1:d29ca2a:      * @see TestCase#setUp()
1:d29ca2a:      */
1:2bd0e57:     @Override
1:d29ca2a:     protected void setUp() throws Exception {
1:d29ca2a:         super.setUp();
1:b8518e0:         this.jmsMessageID = "ID:TEST-ID:0:0:0:1";
1:d29ca2a:         this.jmsCorrelationID = "testcorrelationid";
1:d29ca2a:         this.jmsDestination = new ActiveMQTopic("test.topic");
1:d29ca2a:         this.jmsReplyTo = new ActiveMQTempTopic("test.replyto.topic:001");
1:d29ca2a:         this.jmsDeliveryMode = Message.DEFAULT_DELIVERY_MODE;
1:d29ca2a:         this.jmsRedelivered = true;
1:d29ca2a:         this.jmsType = "test type";
1:d29ca2a:         this.jmsExpiration = 100000;
1:d29ca2a:         this.jmsPriority = 5;
1:d29ca2a:         this.jmsTimestamp = System.currentTimeMillis();
1:d29ca2a:         this.readOnlyMessage = false;
1:d29ca2a:         this.consumerIDs = new long[3];
1:d29ca2a:         for (int i = 0; i < this.consumerIDs.length; i++) {
1:d29ca2a:             this.consumerIDs[i] = i;
1:d29ca2a:         }
1:d29ca2a:     }
1:d29ca2a: 
1:d29ca2a:     /*
1:d29ca2a:      * @see TestCase#tearDown()
1:d29ca2a:      */
1:2bd0e57:     @Override
1:d29ca2a:     protected void tearDown() throws Exception {
1:d29ca2a:         super.tearDown();
1:d29ca2a:     }
1:d29ca2a: 
1:d29ca2a:     public void testGetDataStructureType() {
1:d29ca2a:         ActiveMQMessage msg = new ActiveMQMessage();
1:d29ca2a:         assertEquals(msg.getDataStructureType(), CommandTypes.ACTIVEMQ_MESSAGE);
1:d29ca2a:     }
1:230a86c: 
1:d29ca2a:     public void testHashCode() throws Exception {
1:d29ca2a:         ActiveMQMessage msg = new ActiveMQMessage();
1:d29ca2a:         msg.setJMSMessageID(this.jmsMessageID);
1:b8518e0:         assertTrue(msg.getJMSMessageID().hashCode() == jmsMessageID.hashCode());
1:d29ca2a:     }
1:d29ca2a: 
1:d29ca2a:     public void testSetReadOnly() {
1:d29ca2a:         ActiveMQMessage msg = new ActiveMQMessage();
1:d29ca2a:         msg.setReadOnlyProperties(true);
1:d29ca2a:         boolean test = false;
1:d29ca2a:         try {
1:d29ca2a:             msg.setIntProperty("test", 1);
1:d29ca2a:         } catch (MessageNotWriteableException me) {
1:d29ca2a:             test = true;
1:d29ca2a:         } catch (JMSException e) {
1:d29ca2a:             e.printStackTrace(System.err);
1:d29ca2a:             test = false;
1:d29ca2a:         }
1:d29ca2a:         assertTrue(test);
1:d29ca2a:     }
1:d29ca2a: 
1:da77d2c:     public void testSetToForeignJMSID() throws Exception {
1:da77d2c:         ActiveMQMessage msg = new ActiveMQMessage();
1:da77d2c:         msg.setJMSMessageID("ID:EMS-SERVER.8B443C380083:429");
1:d29ca2a:     }
1:230a86c: 
1:d29ca2a:     /*
1:d29ca2a:      * Class to test for boolean equals(Object)
1:d29ca2a:      */
1:d29ca2a:     public void testEqualsObject() throws Exception {
1:d29ca2a:         ActiveMQMessage msg1 = new ActiveMQMessage();
1:d29ca2a:         ActiveMQMessage msg2 = new ActiveMQMessage();
1:d29ca2a:         msg1.setJMSMessageID(this.jmsMessageID);
1:d29ca2a:         assertTrue(!msg1.equals(msg2));
1:d29ca2a:         msg2.setJMSMessageID(this.jmsMessageID);
1:d29ca2a:         assertTrue(msg1.equals(msg2));
1:d29ca2a:     }
1:d29ca2a: 
1:d29ca2a:     public void testShallowCopy() throws Exception {
1:d29ca2a:         ActiveMQMessage msg1 = new ActiveMQMessage();
1:d29ca2a:         msg1.setJMSMessageID(jmsMessageID);
1:368dc8f:         ActiveMQMessage msg2 = (ActiveMQMessage) msg1.copy();
1:d29ca2a:         assertTrue(msg1 != msg2 && msg1.equals(msg2));
1:d29ca2a:     }
1:d29ca2a: 
1:d29ca2a:     public void testCopy() throws Exception {
2:d29ca2a:         this.jmsMessageID = "testid";
1:d29ca2a:         this.jmsCorrelationID = "testcorrelationid";
1:d29ca2a:         this.jmsDestination = new ActiveMQTopic("test.topic");
1:d29ca2a:         this.jmsReplyTo = new ActiveMQTempTopic("test.replyto.topic:001");
1:d29ca2a:         this.jmsDeliveryMode = Message.DEFAULT_DELIVERY_MODE;
1:d29ca2a:         this.jmsRedelivered = true;
1:d29ca2a:         this.jmsType = "test type";
1:d29ca2a:         this.jmsExpiration = 100000;
1:d29ca2a:         this.jmsPriority = 5;
1:d29ca2a:         this.jmsTimestamp = System.currentTimeMillis();
1:d29ca2a:         this.readOnlyMessage = false;
1:d29ca2a: 
1:d29ca2a:         ActiveMQMessage msg1 = new ActiveMQMessage();
1:d29ca2a:         msg1.setJMSMessageID(this.jmsMessageID);
1:d29ca2a:         msg1.setJMSCorrelationID(this.jmsCorrelationID);
1:d29ca2a:         msg1.setJMSDestination(this.jmsDestination);
1:d29ca2a:         msg1.setJMSReplyTo(this.jmsReplyTo);
1:d29ca2a:         msg1.setJMSDeliveryMode(this.jmsDeliveryMode);
1:d29ca2a:         msg1.setJMSRedelivered(this.jmsRedelivered);
1:d29ca2a:         msg1.setJMSType(this.jmsType);
1:d29ca2a:         msg1.setJMSExpiration(this.jmsExpiration);
1:d29ca2a:         msg1.setJMSPriority(this.jmsPriority);
1:d29ca2a:         msg1.setJMSTimestamp(this.jmsTimestamp);
1:d29ca2a:         msg1.setReadOnlyProperties(true);
1:d29ca2a:         ActiveMQMessage msg2 = new ActiveMQMessage();
1:d29ca2a:         msg1.copy(msg2);
1:368dc8f:         assertEquals(msg1.getJMSMessageID(), msg2.getJMSMessageID());
1:d29ca2a:         assertTrue(msg1.getJMSCorrelationID().equals(msg2.getJMSCorrelationID()));
1:d29ca2a:         assertTrue(msg1.getJMSDestination().equals(msg2.getJMSDestination()));
1:d29ca2a:         assertTrue(msg1.getJMSReplyTo().equals(msg2.getJMSReplyTo()));
1:d29ca2a:         assertTrue(msg1.getJMSDeliveryMode() == msg2.getJMSDeliveryMode());
1:d29ca2a:         assertTrue(msg1.getJMSRedelivered() == msg2.getJMSRedelivered());
1:d29ca2a:         assertTrue(msg1.getJMSType().equals(msg2.getJMSType()));
1:d29ca2a:         assertTrue(msg1.getJMSExpiration() == msg2.getJMSExpiration());
1:d29ca2a:         assertTrue(msg1.getJMSPriority() == msg2.getJMSPriority());
1:d29ca2a:         assertTrue(msg1.getJMSTimestamp() == msg2.getJMSTimestamp());
1:230a86c: 
1:fc00993:         LOG.info("Message is:  " + msg1);
1:d29ca2a:     }
1:d29ca2a: 
1:d29ca2a:     public void testGetAndSetJMSMessageID() throws Exception {
1:d29ca2a:         ActiveMQMessage msg = new ActiveMQMessage();
1:d29ca2a:         msg.setJMSMessageID(this.jmsMessageID);
1:d29ca2a:         assertEquals(msg.getJMSMessageID(), this.jmsMessageID);
1:d29ca2a:     }
1:d29ca2a: 
1:d29ca2a:     public void testGetAndSetJMSTimestamp() {
1:d29ca2a:         ActiveMQMessage msg = new ActiveMQMessage();
1:d29ca2a:         msg.setJMSTimestamp(this.jmsTimestamp);
1:d29ca2a:         assertTrue(msg.getJMSTimestamp() == this.jmsTimestamp);
1:d29ca2a:     }
1:d29ca2a: 
1:d29ca2a:     public void testGetJMSCorrelationIDAsBytes() throws Exception {
1:d29ca2a:         ActiveMQMessage msg = new ActiveMQMessage();
1:d29ca2a:         msg.setJMSCorrelationID(this.jmsCorrelationID);
1:d29ca2a:         byte[] testbytes = msg.getJMSCorrelationIDAsBytes();
1:d29ca2a:         String str2 = new String(testbytes);
1:d29ca2a:         assertTrue(this.jmsCorrelationID.equals(str2));
1:d29ca2a:     }
1:d29ca2a: 
1:d29ca2a:     public void testSetJMSCorrelationIDAsBytes() throws Exception {
1:d29ca2a:         ActiveMQMessage msg = new ActiveMQMessage();
1:d29ca2a:         byte[] testbytes = this.jmsCorrelationID.getBytes();
1:d29ca2a:         msg.setJMSCorrelationIDAsBytes(testbytes);
1:d29ca2a:         testbytes = msg.getJMSCorrelationIDAsBytes();
1:d29ca2a:         String str2 = new String(testbytes);
1:d29ca2a:         assertTrue(this.jmsCorrelationID.equals(str2));
1:d29ca2a:     }
1:d29ca2a: 
1:d29ca2a:     public void testGetAndSetJMSCorrelationID() {
1:d29ca2a:         ActiveMQMessage msg = new ActiveMQMessage();
1:d29ca2a:         msg.setJMSCorrelationID(this.jmsCorrelationID);
1:d29ca2a:         assertTrue(msg.getJMSCorrelationID().equals(this.jmsCorrelationID));
1:d29ca2a:     }
1:d29ca2a: 
1:d29ca2a:     public void testGetAndSetJMSReplyTo() throws JMSException {
1:d29ca2a:         ActiveMQMessage msg = new ActiveMQMessage();
1:d29ca2a:         msg.setJMSReplyTo(this.jmsReplyTo);
1:d29ca2a:         assertTrue(msg.getJMSReplyTo().equals(this.jmsReplyTo));
1:d29ca2a:     }
1:d29ca2a: 
1:d29ca2a:     public void testGetAndSetJMSDestination() throws Exception {
1:d29ca2a:         ActiveMQMessage msg = new ActiveMQMessage();
1:d29ca2a:         msg.setJMSDestination(this.jmsDestination);
1:d29ca2a:         assertTrue(msg.getJMSDestination().equals(this.jmsDestination));
1:d29ca2a:     }
1:d29ca2a: 
1:d29ca2a:     public void testGetAndSetJMSDeliveryMode() {
1:d29ca2a:         ActiveMQMessage msg = new ActiveMQMessage();
1:d29ca2a:         msg.setJMSDeliveryMode(this.jmsDeliveryMode);
1:d29ca2a:         assertTrue(msg.getJMSDeliveryMode() == this.jmsDeliveryMode);
1:d29ca2a:     }
1:d29ca2a: 
1:d29ca2a:     public void testGetAndSetMSRedelivered() {
1:d29ca2a:         ActiveMQMessage msg = new ActiveMQMessage();
1:d29ca2a:         msg.setJMSRedelivered(this.jmsRedelivered);
1:d29ca2a:         assertTrue(msg.getJMSRedelivered() == this.jmsRedelivered);
1:d29ca2a:     }
1:d29ca2a: 
1:d29ca2a:     public void testGetAndSetJMSType() {
1:d29ca2a:         ActiveMQMessage msg = new ActiveMQMessage();
1:d29ca2a:         msg.setJMSType(this.jmsType);
1:d29ca2a:         assertTrue(msg.getJMSType().equals(this.jmsType));
1:d29ca2a:     }
1:d29ca2a: 
1:d29ca2a:     public void testGetAndSetJMSExpiration() {
1:d29ca2a:         ActiveMQMessage msg = new ActiveMQMessage();
1:d29ca2a:         msg.setJMSExpiration(this.jmsExpiration);
1:d29ca2a:         assertTrue(msg.getJMSExpiration() == this.jmsExpiration);
1:d29ca2a:     }
1:d29ca2a: 
1:d29ca2a:     public void testGetAndSetJMSPriority() {
1:d29ca2a:         ActiveMQMessage msg = new ActiveMQMessage();
1:d29ca2a:         msg.setJMSPriority(this.jmsPriority);
1:d29ca2a:         assertTrue(msg.getJMSPriority() == this.jmsPriority);
1:d29ca2a: 
1:6519c3e:         msg.setJMSPriority(-90);
1:6519c3e:         assertEquals(0, msg.getJMSPriority());
1:d29ca2a: 
1:6519c3e:         msg.setJMSPriority(90);
1:41c9366:         assertEquals(9, msg.getJMSPriority());
1:d29ca2a:     }
1:d29ca2a: 
1:d29ca2a:     public void testClearProperties() throws JMSException {
1:d29ca2a:         ActiveMQMessage msg = new ActiveMQMessage();
1:d29ca2a:         msg.setStringProperty("test", "test");
1:230a86c:         msg.setContent(new ByteSequence(new byte[1], 0, 0));
1:d29ca2a:         msg.setJMSMessageID(this.jmsMessageID);
1:d29ca2a:         msg.clearProperties();
1:d29ca2a:         assertNull(msg.getStringProperty("test"));
1:d29ca2a:         assertNotNull(msg.getJMSMessageID());
1:d29ca2a:         assertNotNull(msg.getContent());
1:d29ca2a:     }
1:d29ca2a: 
1:d29ca2a:     public void testPropertyExists() throws JMSException {
1:d29ca2a:         ActiveMQMessage msg = new ActiveMQMessage();
1:d29ca2a:         msg.setStringProperty("test", "test");
1:d29ca2a:         assertTrue(msg.propertyExists("test"));
1:d29ca2a: 
1:7f7a95b:         msg.setIntProperty("JMSXDeliveryCount", 1);
1:7f7a95b:         assertTrue(msg.propertyExists("JMSXDeliveryCount"));
1:d29ca2a:     }
1:d29ca2a: 
1:d29ca2a:     public void testGetBooleanProperty() throws JMSException {
1:d29ca2a:         ActiveMQMessage msg = new ActiveMQMessage();
1:d29ca2a:         String name = "booleanProperty";
1:d29ca2a:         msg.setBooleanProperty(name, true);
1:d29ca2a:         assertTrue(msg.getBooleanProperty(name));
1:d29ca2a:     }
1:d29ca2a: 
1:d29ca2a:     public void testGetByteProperty() throws JMSException {
1:d29ca2a:         ActiveMQMessage msg = new ActiveMQMessage();
1:d29ca2a:         String name = "byteProperty";
1:368dc8f:         msg.setByteProperty(name, (byte) 1);
1:d29ca2a:         assertTrue(msg.getByteProperty(name) == 1);
1:d29ca2a:     }
1:d29ca2a: 
1:d29ca2a:     public void testGetShortProperty() throws JMSException {
1:d29ca2a:         ActiveMQMessage msg = new ActiveMQMessage();
1:d29ca2a:         String name = "shortProperty";
1:368dc8f:         msg.setShortProperty(name, (short) 1);
1:d29ca2a:         assertTrue(msg.getShortProperty(name) == 1);
1:d29ca2a:     }
1:d29ca2a: 
1:d29ca2a:     public void testGetIntProperty() throws JMSException {
1:d29ca2a:         ActiveMQMessage msg = new ActiveMQMessage();
1:d29ca2a:         String name = "intProperty";
1:d29ca2a:         msg.setIntProperty(name, 1);
1:d29ca2a:         assertTrue(msg.getIntProperty(name) == 1);
1:d29ca2a:     }
1:d29ca2a: 
1:d29ca2a:     public void testGetLongProperty() throws JMSException {
1:d29ca2a:         ActiveMQMessage msg = new ActiveMQMessage();
1:d29ca2a:         String name = "longProperty";
1:d29ca2a:         msg.setLongProperty(name, 1);
1:d29ca2a:         assertTrue(msg.getLongProperty(name) == 1);
1:d29ca2a:     }
1:d29ca2a: 
1:d29ca2a:     public void testGetFloatProperty() throws JMSException {
1:d29ca2a:         ActiveMQMessage msg = new ActiveMQMessage();
2:d29ca2a:         String name = "floatProperty";
2:d29ca2a:         msg.setFloatProperty(name, 1.3f);
1:d29ca2a:         assertTrue(msg.getFloatProperty(name) == 1.3f);
1:d29ca2a:     }
1:d29ca2a: 
1:d29ca2a:     public void testGetDoubleProperty() throws JMSException {
1:d29ca2a:         ActiveMQMessage msg = new ActiveMQMessage();
1:d29ca2a:         String name = "doubleProperty";
1:d29ca2a:         msg.setDoubleProperty(name, 1.3d);
1:d29ca2a:         assertTrue(msg.getDoubleProperty(name) == 1.3);
1:d29ca2a:     }
1:d29ca2a: 
1:d29ca2a:     public void testGetStringProperty() throws JMSException {
1:d29ca2a:         ActiveMQMessage msg = new ActiveMQMessage();
1:d29ca2a:         String name = "stringProperty";
1:d29ca2a:         msg.setStringProperty(name, name);
1:d29ca2a:         assertTrue(msg.getStringProperty(name).equals(name));
1:d29ca2a:     }
1:d29ca2a: 
1:d29ca2a:     public void testGetObjectProperty() throws JMSException {
1:d29ca2a:         ActiveMQMessage msg = new ActiveMQMessage();
1:d29ca2a:         String name = "floatProperty";
1:d29ca2a:         msg.setFloatProperty(name, 1.3f);
1:d29ca2a:         assertTrue(msg.getObjectProperty(name) instanceof Float);
1:368dc8f:         assertTrue(((Float) msg.getObjectProperty(name)).floatValue() == 1.3f);
1:d29ca2a:     }
1:d29ca2a: 
1:b1bc593:     public void testSetJMSDeliveryModeProperty() throws JMSException {
1:b1bc593:         ActiveMQMessage message = new ActiveMQMessage();
1:b1bc593:         String propertyName = "JMSDeliveryMode";
1:b1bc593: 
1:b1bc593:         // Set as Boolean
1:b1bc593:         message.setObjectProperty(propertyName, Boolean.TRUE);
1:b1bc593:         assertTrue(message.isPersistent());
1:b1bc593:         message.setObjectProperty(propertyName, Boolean.FALSE);
1:b1bc593:         assertFalse(message.isPersistent());
1:b1bc593:         message.setBooleanProperty(propertyName, true);
1:b1bc593:         assertTrue(message.isPersistent());
1:b1bc593:         message.setBooleanProperty(propertyName, false);
1:b1bc593:         assertFalse(message.isPersistent());
1:b1bc593: 
1:b1bc593:         // Set as Integer
1:b1bc593:         message.setObjectProperty(propertyName, DeliveryMode.PERSISTENT);
1:b1bc593:         assertTrue(message.isPersistent());
1:b1bc593:         message.setObjectProperty(propertyName, DeliveryMode.NON_PERSISTENT);
1:b1bc593:         assertFalse(message.isPersistent());
1:b1bc593:         message.setIntProperty(propertyName, DeliveryMode.PERSISTENT);
1:b1bc593:         assertTrue(message.isPersistent());
1:b1bc593:         message.setIntProperty(propertyName, DeliveryMode.NON_PERSISTENT);
1:b1bc593:         assertFalse(message.isPersistent());
1:b1bc593: 
1:b1bc593:         // Set as String
1:b1bc593:         message.setObjectProperty(propertyName, "PERSISTENT");
1:b1bc593:         assertTrue(message.isPersistent());
1:b1bc593:         message.setObjectProperty(propertyName, "NON_PERSISTENT");
1:b1bc593:         assertFalse(message.isPersistent());
1:b1bc593:         message.setStringProperty(propertyName, "PERSISTENT");
1:b1bc593:         assertTrue(message.isPersistent());
1:b1bc593:         message.setStringProperty(propertyName, "NON_PERSISTENT");
1:b1bc593:         assertFalse(message.isPersistent());
1:b1bc593:     }
1:b1bc593: 
1:41c9366:     @SuppressWarnings("rawtypes")
1:d29ca2a:     public void testGetPropertyNames() throws JMSException {
1:d29ca2a:         ActiveMQMessage msg = new ActiveMQMessage();
1:7f7a95b:         String name1 = "floatProperty";
1:7f7a95b:         msg.setFloatProperty(name1, 1.3f);
1:cf3db57:         String name2 = "JMSXDeliveryCount";
1:5b8bcf7:         msg.setIntProperty(name2, 1);
1:e121ccc:         String name3 = "JMSRedelivered";
1:e121ccc:         msg.setBooleanProperty(name3, false);
1:7f7a95b:         boolean found1 = false;
1:7f7a95b:         boolean found2 = false;
1:e121ccc:         boolean found3 = false;
1:d29ca2a:         for (Enumeration iter = msg.getPropertyNames(); iter.hasMoreElements();) {
1:7f7a95b:             Object element = iter.nextElement();
1:7f7a95b:             found1 |= element.equals(name1);
1:7f7a95b:             found2 |= element.equals(name2);
1:e121ccc:             found3 |= element.equals(name3);
1:d29ca2a:         }
1:e121ccc:         assertTrue("prop name1 found", found1);
1:e121ccc:         // spec compliance, only non JMS (and JMSX) props returned
1:e121ccc:         assertFalse("prop name2 not found", found2);
1:e121ccc:         assertFalse("prop name4 not found", found3);
1:d29ca2a:     }
1:d29ca2a: 
1:41c9366:     @SuppressWarnings("rawtypes")
1:e121ccc:     public void testGetAllPropertyNames() throws JMSException {
1:e121ccc:         ActiveMQMessage msg = new ActiveMQMessage();
1:e121ccc:         String name1 = "floatProperty";
1:e121ccc:         msg.setFloatProperty(name1, 1.3f);
1:e121ccc:         String name2 = "JMSXDeliveryCount";
1:e121ccc:         msg.setIntProperty(name2, 1);
1:e121ccc:         String name3 = "JMSRedelivered";
1:e121ccc:         msg.setBooleanProperty(name3, false);
1:e121ccc:         boolean found1 = false;
1:e121ccc:         boolean found2 = false;
1:e121ccc:         boolean found3 = false;
1:e121ccc:         for (Enumeration iter = msg.getAllPropertyNames(); iter.hasMoreElements();) {
1:e121ccc:             Object element = iter.nextElement();
1:e121ccc:             found1 |= element.equals(name1);
1:e121ccc:             found2 |= element.equals(name2);
1:e121ccc:             found3 |= element.equals(name3);
1:e121ccc:         }
1:7f7a95b:         assertTrue("prop name1 found", found1);
1:7f7a95b:         assertTrue("prop name2 found", found2);
1:e121ccc:         assertTrue("prop name4 found", found3);
1:e121ccc:     }
1:d29ca2a: 
1:d29ca2a:     public void testSetObjectProperty() throws JMSException {
1:d29ca2a:         ActiveMQMessage msg = new ActiveMQMessage();
1:d29ca2a:         String name = "property";
1:d29ca2a: 
1:d29ca2a:         try {
1:d29ca2a:             msg.setObjectProperty(name, "string");
1:d29ca2a:             msg.setObjectProperty(name, Byte.valueOf("1"));
1:d29ca2a:             msg.setObjectProperty(name, Short.valueOf("1"));
1:d29ca2a:             msg.setObjectProperty(name, Integer.valueOf("1"));
1:d29ca2a:             msg.setObjectProperty(name, Long.valueOf("1"));
1:d29ca2a:             msg.setObjectProperty(name, Float.valueOf("1.1f"));
1:d29ca2a:             msg.setObjectProperty(name, Double.valueOf("1.1"));
1:d29ca2a:             msg.setObjectProperty(name, Boolean.TRUE);
1:d29ca2a:             msg.setObjectProperty(name, null);
1:d29ca2a:         } catch (MessageFormatException e) {
1:d29ca2a:             fail("should accept object primitives and String");
1:d29ca2a:         }
1:d29ca2a:         try {
1:d29ca2a:             msg.setObjectProperty(name, new byte[5]);
1:d29ca2a:             fail("should accept only object primitives and String");
1:d29ca2a:         } catch (MessageFormatException e) {
1:d29ca2a:         }
1:d29ca2a:         try {
1:d29ca2a:             msg.setObjectProperty(name, new Object());
1:d29ca2a:             fail("should accept only object primitives and String");
1:d29ca2a:         } catch (MessageFormatException e) {
1:d29ca2a:         }
1:d29ca2a:     }
1:d29ca2a: 
1:d29ca2a:     public void testConvertProperties() throws Exception {
1:d29ca2a:         org.apache.activemq.command.Message msg = new org.apache.activemq.command.Message() {
1:2bd0e57:             @Override
1:d29ca2a:             public org.apache.activemq.command.Message copy() {
1:d29ca2a:                 return null;
1:d29ca2a:             }
1:230a86c: 
1:2bd0e57:             @Override
1:d29ca2a:             public void beforeMarshall(WireFormat wireFormat) throws IOException {
1:d29ca2a:                 super.beforeMarshall(wireFormat);
1:d29ca2a:             }
1:230a86c: 
1:2bd0e57:             @Override
1:d29ca2a:             public byte getDataStructureType() {
1:d29ca2a:                 return 0;
1:d29ca2a:             }
1:230a86c: 
1:2bd0e57:             @Override
1:7f5213b:             public Response visit(CommandVisitor visitor) throws Exception {
1:d29ca2a:                 return null;
1:d29ca2a:             }
1:d29ca2a: 
1:cdc2fd3:             @Override
1:41c9366:             public void clearBody() throws JMSException {
1:41c9366:             }
1:41c9366: 
1:41c9366:             @Override
1:41c9366:             public void storeContent() {
1:d29ca2a:             }
1:2bd0e57: 
1:2bd0e57:             @Override
1:2bd0e57:             public void storeContentAndClear() {
1:2bd0e57: 
1:2bd0e57:             }
1:d29ca2a:         };
1:d29ca2a: 
1:d29ca2a:         msg.setProperty("stringProperty", "string");
1:d29ca2a:         msg.setProperty("byteProperty", Byte.valueOf("1"));
1:d29ca2a:         msg.setProperty("shortProperty", Short.valueOf("1"));
1:d29ca2a:         msg.setProperty("intProperty", Integer.valueOf("1"));
1:d29ca2a:         msg.setProperty("longProperty", Long.valueOf("1"));
1:d29ca2a:         msg.setProperty("floatProperty", Float.valueOf("1.1f"));
1:d29ca2a:         msg.setProperty("doubleProperty", Double.valueOf("1.1"));
1:d29ca2a:         msg.setProperty("booleanProperty", Boolean.TRUE);
1:d29ca2a:         msg.setProperty("nullProperty", null);
1:d29ca2a: 
1:d29ca2a:         msg.beforeMarshall(new OpenWireFormat());
1:d29ca2a: 
1:41c9366:         Map<String, Object> properties = msg.getProperties();
1:230a86c:         assertEquals(properties.get("stringProperty"), "string");
1:368dc8f:         assertEquals(((Byte) properties.get("byteProperty")).byteValue(), 1);
1:368dc8f:         assertEquals(((Short) properties.get("shortProperty")).shortValue(), 1);
1:368dc8f:         assertEquals(((Integer) properties.get("intProperty")).intValue(), 1);
1:368dc8f:         assertEquals(((Long) properties.get("longProperty")).longValue(), 1);
1:368dc8f:         assertEquals(((Float) properties.get("floatProperty")).floatValue(), 1.1f, 0);
1:368dc8f:         assertEquals(((Double) properties.get("doubleProperty")).doubleValue(), 1.1, 0);
1:368dc8f:         assertEquals(((Boolean) properties.get("booleanProperty")).booleanValue(), true);
1:d29ca2a:         assertNull(properties.get("nullProperty"));
1:d29ca2a:     }
1:d29ca2a: 
1:d29ca2a:     public void testSetNullProperty() throws JMSException {
1:d29ca2a:         Message msg = new ActiveMQMessage();
1:d29ca2a:         String name = "cheese";
1:d29ca2a:         msg.setStringProperty(name, "Cheddar");
1:d29ca2a:         assertEquals("Cheddar", msg.getStringProperty(name));
1:d29ca2a: 
1:d29ca2a:         msg.setStringProperty(name, null);
1:d29ca2a:         assertEquals(null, msg.getStringProperty(name));
1:d29ca2a:     }
1:d29ca2a: 
1:d29ca2a:     public void testSetNullPropertyName() throws JMSException {
1:d29ca2a:         Message msg = new ActiveMQMessage();
1:d29ca2a: 
1:d29ca2a:         try {
1:d29ca2a:             msg.setStringProperty(null, "Cheese");
1:d29ca2a:             fail("Should have thrown exception");
1:d29ca2a:         } catch (IllegalArgumentException e) {
1:fc00993:             LOG.info("Worked, caught: " + e);
1:d29ca2a:         }
1:d29ca2a:     }
1:d29ca2a: 
1:d29ca2a:     public void testSetEmptyPropertyName() throws JMSException {
1:d29ca2a:         Message msg = new ActiveMQMessage();
1:d29ca2a: 
1:d29ca2a:         try {
1:d29ca2a:             msg.setStringProperty("", "Cheese");
1:d29ca2a:             fail("Should have thrown exception");
1:d29ca2a:         } catch (IllegalArgumentException e) {
1:fc00993:             LOG.info("Worked, caught: " + e);
1:d29ca2a:         }
1:d29ca2a:     }
1:d29ca2a: 
1:d29ca2a:     public void testGetAndSetJMSXDeliveryCount() throws JMSException {
1:d29ca2a:         Message msg = new ActiveMQMessage();
1:d29ca2a:         msg.setIntProperty("JMSXDeliveryCount", 1);
1:d29ca2a:         int count = msg.getIntProperty("JMSXDeliveryCount");
1:d29ca2a:         assertTrue("expected delivery count = 1 - got: " + count, count == 1);
1:d29ca2a:     }
1:d29ca2a: 
1:d29ca2a:     public void testClearBody() throws JMSException {
1:d29ca2a:         ActiveMQBytesMessage message = new ActiveMQBytesMessage();
1:d29ca2a:         message.clearBody();
1:d29ca2a:         assertFalse(message.isReadOnlyBody());
1:d29ca2a:         assertNull(message.getContent());
1:d29ca2a:     }
1:d29ca2a: 
1:d29ca2a:     public void testBooleanPropertyConversion() throws JMSException {
1:d29ca2a:         ActiveMQMessage msg = new ActiveMQMessage();
1:d29ca2a:         String propertyName = "property";
1:d29ca2a:         msg.setBooleanProperty(propertyName, true);
1:d29ca2a: 
1:368dc8f:         assertEquals(((Boolean) msg.getObjectProperty(propertyName)).booleanValue(), true);
1:d29ca2a:         assertTrue(msg.getBooleanProperty(propertyName));
1:d29ca2a:         assertEquals(msg.getStringProperty(propertyName), "true");
1:d29ca2a:         try {
1:d29ca2a:             msg.getByteProperty(propertyName);
1:d29ca2a:             fail("Should have thrown exception");
1:d29ca2a:         } catch (MessageFormatException e) {
1:d29ca2a:         }
1:d29ca2a:         try {
1:d29ca2a:             msg.getShortProperty(propertyName);
1:d29ca2a:             fail("Should have thrown exception");
1:d29ca2a:         } catch (MessageFormatException e) {
1:d29ca2a:         }
1:d29ca2a:         try {
1:d29ca2a:             msg.getIntProperty(propertyName);
1:d29ca2a:             fail("Should have thrown exception");
1:d29ca2a:         } catch (MessageFormatException e) {
1:d29ca2a:         }
1:d29ca2a:         try {
1:d29ca2a:             msg.getLongProperty(propertyName);
1:d29ca2a:             fail("Should have thrown exception");
1:d29ca2a:         } catch (MessageFormatException e) {
1:d29ca2a:         }
1:d29ca2a:         try {
1:d29ca2a:             msg.getFloatProperty(propertyName);
1:d29ca2a:             fail("Should have thrown exception");
1:d29ca2a:         } catch (MessageFormatException e) {
1:d29ca2a:         }
1:d29ca2a:         try {
1:d29ca2a:             msg.getDoubleProperty(propertyName);
1:d29ca2a:             fail("Should have thrown exception");
1:d29ca2a:         } catch (MessageFormatException e) {
1:d29ca2a:         }
1:d29ca2a:     }
1:d29ca2a: 
1:d29ca2a:     public void testBytePropertyConversion() throws JMSException {
1:d29ca2a:         ActiveMQMessage msg = new ActiveMQMessage();
1:d29ca2a:         String propertyName = "property";
1:368dc8f:         msg.setByteProperty(propertyName, (byte) 1);
1:d29ca2a: 
1:368dc8f:         assertEquals(((Byte) msg.getObjectProperty(propertyName)).byteValue(), 1);
1:d29ca2a:         assertEquals(msg.getByteProperty(propertyName), 1);
1:d29ca2a:         assertEquals(msg.getShortProperty(propertyName), 1);
1:d29ca2a:         assertEquals(msg.getIntProperty(propertyName), 1);
1:d29ca2a:         assertEquals(msg.getLongProperty(propertyName), 1);
1:d29ca2a:         assertEquals(msg.getStringProperty(propertyName), "1");
1:d29ca2a:         try {
1:d29ca2a:             msg.getBooleanProperty(propertyName);
1:d29ca2a:             fail("Should have thrown exception");
1:d29ca2a:         } catch (MessageFormatException e) {
1:d29ca2a:         }
1:d29ca2a:         try {
1:d29ca2a:             msg.getFloatProperty(propertyName);
1:d29ca2a:             fail("Should have thrown exception");
1:d29ca2a:         } catch (MessageFormatException e) {
1:d29ca2a:         }
1:d29ca2a:         try {
1:d29ca2a:             msg.getDoubleProperty(propertyName);
1:d29ca2a:             fail("Should have thrown exception");
1:d29ca2a:         } catch (MessageFormatException e) {
1:d29ca2a:         }
1:d29ca2a:     }
1:d29ca2a: 
1:d29ca2a:     public void testShortPropertyConversion() throws JMSException {
1:d29ca2a:         ActiveMQMessage msg = new ActiveMQMessage();
1:d29ca2a:         String propertyName = "property";
1:368dc8f:         msg.setShortProperty(propertyName, (short) 1);
1:d29ca2a: 
1:368dc8f:         assertEquals(((Short) msg.getObjectProperty(propertyName)).shortValue(), 1);
1:d29ca2a:         assertEquals(msg.getShortProperty(propertyName), 1);
1:d29ca2a:         assertEquals(msg.getIntProperty(propertyName), 1);
1:d29ca2a:         assertEquals(msg.getLongProperty(propertyName), 1);
1:d29ca2a:         assertEquals(msg.getStringProperty(propertyName), "1");
1:d29ca2a:         try {
1:d29ca2a:             msg.getBooleanProperty(propertyName);
1:d29ca2a:             fail("Should have thrown exception");
1:d29ca2a:         } catch (MessageFormatException e) {
1:d29ca2a:         }
1:d29ca2a:         try {
1:d29ca2a:             msg.getByteProperty(propertyName);
1:d29ca2a:             fail("Should have thrown exception");
1:d29ca2a:         } catch (MessageFormatException e) {
1:d29ca2a:         }
1:d29ca2a:         try {
1:d29ca2a:             msg.getFloatProperty(propertyName);
1:d29ca2a:             fail("Should have thrown exception");
1:d29ca2a:         } catch (MessageFormatException e) {
1:d29ca2a:         }
1:d29ca2a:         try {
1:d29ca2a:             msg.getDoubleProperty(propertyName);
1:d29ca2a:             fail("Should have thrown exception");
1:d29ca2a:         } catch (MessageFormatException e) {
1:d29ca2a:         }
1:d29ca2a:     }
1:d29ca2a: 
1:d29ca2a:     public void testIntPropertyConversion() throws JMSException {
1:d29ca2a:         ActiveMQMessage msg = new ActiveMQMessage();
1:d29ca2a:         String propertyName = "property";
1:2bd0e57:         msg.setIntProperty(propertyName, 1);
1:d29ca2a: 
1:368dc8f:         assertEquals(((Integer) msg.getObjectProperty(propertyName)).intValue(), 1);
1:d29ca2a:         assertEquals(msg.getIntProperty(propertyName), 1);
1:d29ca2a:         assertEquals(msg.getLongProperty(propertyName), 1);
1:d29ca2a:         assertEquals(msg.getStringProperty(propertyName), "1");
1:d29ca2a:         try {
1:d29ca2a:             msg.getBooleanProperty(propertyName);
1:d29ca2a:             fail("Should have thrown exception");
1:d29ca2a:         } catch (MessageFormatException e) {
1:d29ca2a:         }
1:d29ca2a:         try {
1:d29ca2a:             msg.getByteProperty(propertyName);
1:d29ca2a:             fail("Should have thrown exception");
1:d29ca2a:         } catch (MessageFormatException e) {
1:d29ca2a:         }
1:d29ca2a:         try {
1:d29ca2a:             msg.getShortProperty(propertyName);
1:d29ca2a:             fail("Should have thrown exception");
1:d29ca2a:         } catch (MessageFormatException e) {
1:d29ca2a:         }
1:d29ca2a:         try {
1:d29ca2a:             msg.getFloatProperty(propertyName);
1:d29ca2a:             fail("Should have thrown exception");
1:d29ca2a:         } catch (MessageFormatException e) {
1:d29ca2a:         }
1:d29ca2a:         try {
1:d29ca2a:             msg.getDoubleProperty(propertyName);
1:d29ca2a:             fail("Should have thrown exception");
1:d29ca2a:         } catch (MessageFormatException e) {
1:d29ca2a:         }
1:d29ca2a:     }
1:d29ca2a: 
1:d29ca2a:     public void testLongPropertyConversion() throws JMSException {
1:d29ca2a:         ActiveMQMessage msg = new ActiveMQMessage();
1:d29ca2a:         String propertyName = "property";
1:d29ca2a:         msg.setLongProperty(propertyName, 1);
1:d29ca2a: 
1:368dc8f:         assertEquals(((Long) msg.getObjectProperty(propertyName)).longValue(), 1);
1:d29ca2a:         assertEquals(msg.getLongProperty(propertyName), 1);
1:d29ca2a:         assertEquals(msg.getStringProperty(propertyName), "1");
1:d29ca2a:         try {
1:d29ca2a:             msg.getBooleanProperty(propertyName);
1:d29ca2a:             fail("Should have thrown exception");
1:d29ca2a:         } catch (MessageFormatException e) {
1:d29ca2a:         }
1:d29ca2a:         try {
1:d29ca2a:             msg.getByteProperty(propertyName);
1:d29ca2a:             fail("Should have thrown exception");
1:d29ca2a:         } catch (MessageFormatException e) {
1:d29ca2a:         }
1:d29ca2a:         try {
1:d29ca2a:             msg.getShortProperty(propertyName);
1:d29ca2a:             fail("Should have thrown exception");
1:d29ca2a:         } catch (MessageFormatException e) {
1:d29ca2a:         }
1:d29ca2a:         try {
1:d29ca2a:             msg.getIntProperty(propertyName);
1:d29ca2a:             fail("Should have thrown exception");
1:d29ca2a:         } catch (MessageFormatException e) {
1:d29ca2a:         }
1:d29ca2a:         try {
1:d29ca2a:             msg.getFloatProperty(propertyName);
1:d29ca2a:             fail("Should have thrown exception");
1:d29ca2a:         } catch (MessageFormatException e) {
1:d29ca2a:         }
1:d29ca2a:         try {
1:d29ca2a:             msg.getDoubleProperty(propertyName);
1:d29ca2a:             fail("Should have thrown exception");
1:d29ca2a:         } catch (MessageFormatException e) {
1:d29ca2a:         }
1:d29ca2a:     }
1:d29ca2a: 
1:d29ca2a:     public void testFloatPropertyConversion() throws JMSException {
1:d29ca2a:         ActiveMQMessage msg = new ActiveMQMessage();
1:d29ca2a:         String propertyName = "property";
1:368dc8f:         msg.setFloatProperty(propertyName, (float) 1.5);
1:368dc8f:         assertEquals(((Float) msg.getObjectProperty(propertyName)).floatValue(), 1.5, 0);
1:d29ca2a:         assertEquals(msg.getFloatProperty(propertyName), 1.5, 0);
1:d29ca2a:         assertEquals(msg.getDoubleProperty(propertyName), 1.5, 0);
1:d29ca2a:         assertEquals(msg.getStringProperty(propertyName), "1.5");
1:d29ca2a:         try {
1:d29ca2a:             msg.getBooleanProperty(propertyName);
1:d29ca2a:             fail("Should have thrown exception");
1:d29ca2a:         } catch (MessageFormatException e) {
1:d29ca2a:         }
1:d29ca2a:         try {
1:d29ca2a:             msg.getByteProperty(propertyName);
1:d29ca2a:             fail("Should have thrown exception");
1:d29ca2a:         } catch (MessageFormatException e) {
1:d29ca2a:         }
1:d29ca2a:         try {
1:d29ca2a:             msg.getShortProperty(propertyName);
1:d29ca2a:             fail("Should have thrown exception");
1:d29ca2a:         } catch (MessageFormatException e) {
1:d29ca2a:         }
1:d29ca2a:         try {
1:d29ca2a:             msg.getIntProperty(propertyName);
1:d29ca2a:             fail("Should have thrown exception");
1:d29ca2a:         } catch (MessageFormatException e) {
1:d29ca2a:         }
1:d29ca2a:         try {
1:d29ca2a:             msg.getLongProperty(propertyName);
1:d29ca2a:             fail("Should have thrown exception");
1:d29ca2a:         } catch (MessageFormatException e) {
1:d29ca2a:         }
1:d29ca2a:     }
1:d29ca2a: 
1:d29ca2a:     public void testDoublePropertyConversion() throws JMSException {
1:d29ca2a:         ActiveMQMessage msg = new ActiveMQMessage();
1:d29ca2a:         String propertyName = "property";
1:d29ca2a:         msg.setDoubleProperty(propertyName, 1.5);
1:368dc8f:         assertEquals(((Double) msg.getObjectProperty(propertyName)).doubleValue(), 1.5, 0);
1:d29ca2a:         assertEquals(msg.getDoubleProperty(propertyName), 1.5, 0);
1:d29ca2a:         assertEquals(msg.getStringProperty(propertyName), "1.5");
1:d29ca2a:         try {
1:d29ca2a:             msg.getBooleanProperty(propertyName);
1:d29ca2a:             fail("Should have thrown exception");
1:d29ca2a:         } catch (MessageFormatException e) {
1:d29ca2a:         }
1:d29ca2a:         try {
1:d29ca2a:             msg.getByteProperty(propertyName);
1:d29ca2a:             fail("Should have thrown exception");
1:d29ca2a:         } catch (MessageFormatException e) {
1:d29ca2a:         }
1:d29ca2a:         try {
1:d29ca2a:             msg.getShortProperty(propertyName);
1:d29ca2a:             fail("Should have thrown exception");
1:d29ca2a:         } catch (MessageFormatException e) {
1:d29ca2a:         }
1:d29ca2a:         try {
1:d29ca2a:             msg.getIntProperty(propertyName);
1:d29ca2a:             fail("Should have thrown exception");
1:d29ca2a:         } catch (MessageFormatException e) {
1:d29ca2a:         }
1:d29ca2a:         try {
1:d29ca2a:             msg.getLongProperty(propertyName);
1:d29ca2a:             fail("Should have thrown exception");
1:d29ca2a:         } catch (MessageFormatException e) {
1:d29ca2a:         }
1:d29ca2a:         try {
1:d29ca2a:             msg.getFloatProperty(propertyName);
1:d29ca2a:             fail("Should have thrown exception");
1:d29ca2a:         } catch (MessageFormatException e) {
1:d29ca2a:         }
1:d29ca2a:     }
1:d29ca2a: 
1:d29ca2a:     public void testStringPropertyConversion() throws JMSException {
1:d29ca2a:         ActiveMQMessage msg = new ActiveMQMessage();
1:d29ca2a:         String propertyName = "property";
1:d29ca2a:         String stringValue = "true";
1:d29ca2a:         msg.setStringProperty(propertyName, stringValue);
1:d29ca2a:         assertEquals(msg.getStringProperty(propertyName), stringValue);
1:368dc8f:         assertEquals((String) msg.getObjectProperty(propertyName), stringValue);
1:d29ca2a:         assertEquals(msg.getBooleanProperty(propertyName), true);
1:d29ca2a: 
1:d29ca2a:         stringValue = "1";
1:d29ca2a:         msg.setStringProperty(propertyName, stringValue);
1:d29ca2a:         assertEquals(msg.getByteProperty(propertyName), 1);
1:d29ca2a:         assertEquals(msg.getShortProperty(propertyName), 1);
1:d29ca2a:         assertEquals(msg.getIntProperty(propertyName), 1);
1:d29ca2a:         assertEquals(msg.getLongProperty(propertyName), 1);
1:d29ca2a: 
1:d29ca2a:         stringValue = "1.5";
1:d29ca2a:         msg.setStringProperty(propertyName, stringValue);
1:d29ca2a:         assertEquals(msg.getFloatProperty(propertyName), 1.5, 0);
1:d29ca2a:         assertEquals(msg.getDoubleProperty(propertyName), 1.5, 0);
1:d29ca2a: 
1:d29ca2a:         stringValue = "bad";
1:d29ca2a:         msg.setStringProperty(propertyName, stringValue);
1:d29ca2a:         try {
1:d29ca2a:             msg.getByteProperty(propertyName);
1:d29ca2a:             fail("Should have thrown exception");
1:d29ca2a:         } catch (NumberFormatException e) {
1:d29ca2a:         }
1:d29ca2a:         try {
1:d29ca2a:             msg.getShortProperty(propertyName);
1:d29ca2a:             fail("Should have thrown exception");
1:d29ca2a:         } catch (NumberFormatException e) {
1:d29ca2a:         }
1:d29ca2a:         try {
1:d29ca2a:             msg.getIntProperty(propertyName);
1:d29ca2a:             fail("Should have thrown exception");
1:d29ca2a:         } catch (NumberFormatException e) {
1:d29ca2a:         }
1:d29ca2a:         try {
1:d29ca2a:             msg.getLongProperty(propertyName);
1:d29ca2a:             fail("Should have thrown exception");
1:d29ca2a:         } catch (NumberFormatException e) {
1:d29ca2a:         }
1:d29ca2a:         try {
1:d29ca2a:             msg.getFloatProperty(propertyName);
1:d29ca2a:             fail("Should have thrown exception");
1:d29ca2a:         } catch (NumberFormatException e) {
1:d29ca2a:         }
1:d29ca2a:         try {
1:d29ca2a:             msg.getDoubleProperty(propertyName);
1:d29ca2a:             fail("Should have thrown exception");
1:d29ca2a:         } catch (NumberFormatException e) {
1:d29ca2a:         }
1:d29ca2a:         assertFalse(msg.getBooleanProperty(propertyName));
1:d29ca2a:     }
1:d29ca2a: 
1:d29ca2a:     public void testObjectPropertyConversion() throws JMSException {
1:d29ca2a:         ActiveMQMessage msg = new ActiveMQMessage();
1:d29ca2a:         String propertyName = "property";
1:d29ca2a:         Object obj = new Object();
1:d29ca2a:         try {
1:368dc8f:             ((org.apache.activemq.command.Message) msg).setProperty(propertyName, obj); // bypass
1:ecf89a6:             // object
1:ecf89a6:             // check
1:d29ca2a:         } catch (IOException e) {
1:d29ca2a:         }
1:d29ca2a:         try {
1:d29ca2a:             msg.getStringProperty(propertyName);
1:d29ca2a:             fail("Should have thrown exception");
1:d29ca2a:         } catch (MessageFormatException e) {
1:d29ca2a:         }
1:d29ca2a:         try {
1:d29ca2a:             msg.getBooleanProperty(propertyName);
1:d29ca2a:             fail("Should have thrown exception");
1:d29ca2a:         } catch (MessageFormatException e) {
1:d29ca2a:         }
1:d29ca2a:         try {
1:d29ca2a:             msg.getByteProperty(propertyName);
1:d29ca2a:             fail("Should have thrown exception");
1:d29ca2a:         } catch (MessageFormatException e) {
1:d29ca2a:         }
1:d29ca2a:         try {
1:d29ca2a:             msg.getShortProperty(propertyName);
1:d29ca2a:             fail("Should have thrown exception");
1:d29ca2a:         } catch (MessageFormatException e) {
1:d29ca2a:         }
1:d29ca2a:         try {
1:d29ca2a:             msg.getIntProperty(propertyName);
1:d29ca2a:             fail("Should have thrown exception");
1:d29ca2a:         } catch (MessageFormatException e) {
1:d29ca2a:         }
1:d29ca2a:         try {
1:d29ca2a:             msg.getLongProperty(propertyName);
1:d29ca2a:             fail("Should have thrown exception");
1:d29ca2a:         } catch (MessageFormatException e) {
1:d29ca2a:         }
1:d29ca2a:         try {
1:d29ca2a:             msg.getFloatProperty(propertyName);
1:d29ca2a:             fail("Should have thrown exception");
1:d29ca2a:         } catch (MessageFormatException e) {
1:d29ca2a:         }
1:d29ca2a:         try {
1:d29ca2a:             msg.getDoubleProperty(propertyName);
1:d29ca2a:             fail("Should have thrown exception");
1:d29ca2a:         } catch (MessageFormatException e) {
1:d29ca2a:         }
1:d29ca2a: 
1:d29ca2a:     }
1:d29ca2a: 
1:d29ca2a:     public void testReadOnlyProperties() throws JMSException {
1:d29ca2a:         ActiveMQMessage msg = new ActiveMQMessage();
1:d29ca2a:         String propertyName = "property";
1:d29ca2a:         msg.setReadOnlyProperties(true);
1:d29ca2a: 
1:d29ca2a:         try {
1:d29ca2a:             msg.setObjectProperty(propertyName, new Object());
1:d29ca2a:             fail("Should have thrown exception");
1:d29ca2a:         } catch (MessageNotWriteableException e) {
1:d29ca2a:         }
1:d29ca2a:         try {
1:d29ca2a:             msg.setStringProperty(propertyName, "test");
1:d29ca2a:             fail("Should have thrown exception");
1:d29ca2a:         } catch (MessageNotWriteableException e) {
1:d29ca2a:         }
1:d29ca2a:         try {
1:d29ca2a:             msg.setBooleanProperty(propertyName, true);
1:d29ca2a:             fail("Should have thrown exception");
1:d29ca2a:         } catch (MessageNotWriteableException e) {
1:d29ca2a:         }
1:d29ca2a:         try {
1:368dc8f:             msg.setByteProperty(propertyName, (byte) 1);
1:d29ca2a:             fail("Should have thrown exception");
1:d29ca2a:         } catch (MessageNotWriteableException e) {
1:d29ca2a:         }
1:d29ca2a:         try {
1:368dc8f:             msg.setShortProperty(propertyName, (short) 1);
1:d29ca2a:             fail("Should have thrown exception");
1:d29ca2a:         } catch (MessageNotWriteableException e) {
1:d29ca2a:         }
1:d29ca2a:         try {
1:d29ca2a:             msg.setIntProperty(propertyName, 1);
1:d29ca2a:             fail("Should have thrown exception");
1:d29ca2a:         } catch (MessageNotWriteableException e) {
1:d29ca2a:         }
1:d29ca2a:         try {
1:d29ca2a:             msg.setLongProperty(propertyName, 1);
1:d29ca2a:             fail("Should have thrown exception");
1:d29ca2a:         } catch (MessageNotWriteableException e) {
1:d29ca2a:         }
1:d29ca2a:         try {
1:368dc8f:             msg.setFloatProperty(propertyName, (float) 1.5);
1:d29ca2a:             fail("Should have thrown exception");
1:d29ca2a:         } catch (MessageNotWriteableException e) {
1:d29ca2a:         }
1:d29ca2a:         try {
1:d29ca2a:             msg.setDoubleProperty(propertyName, 1.5);
1:d29ca2a:             fail("Should have thrown exception");
1:d29ca2a:         } catch (MessageNotWriteableException e) {
1:d29ca2a:         }
1:cdc2fd3:     }
1:d29ca2a: 
1:d29ca2a:     public void testIsExpired() {
1:d29ca2a:         ActiveMQMessage msg = new ActiveMQMessage();
1:d29ca2a:         msg.setJMSExpiration(System.currentTimeMillis() - 1);
1:d29ca2a:         assertTrue(msg.isExpired());
1:d29ca2a:         msg.setJMSExpiration(System.currentTimeMillis() + 10000);
1:d29ca2a:         assertFalse(msg.isExpired());
1:d29ca2a:     }
1:d29ca2a: }
============================================================================
author:Hadrian Zbarcea
-------------------------------------------------------------------------------
commit:f9bec8f
author:Timothy Bish
-------------------------------------------------------------------------------
commit:b1bc593
/////////////////////////////////////////////////////////////////////////
1: import javax.jms.DeliveryMode;
/////////////////////////////////////////////////////////////////////////
1:     public void testSetJMSDeliveryModeProperty() throws JMSException {
1:         ActiveMQMessage message = new ActiveMQMessage();
1:         String propertyName = "JMSDeliveryMode";
1: 
1:         // Set as Boolean
1:         message.setObjectProperty(propertyName, Boolean.TRUE);
1:         assertTrue(message.isPersistent());
1:         message.setObjectProperty(propertyName, Boolean.FALSE);
1:         assertFalse(message.isPersistent());
1:         message.setBooleanProperty(propertyName, true);
1:         assertTrue(message.isPersistent());
1:         message.setBooleanProperty(propertyName, false);
1:         assertFalse(message.isPersistent());
1: 
1:         // Set as Integer
1:         message.setObjectProperty(propertyName, DeliveryMode.PERSISTENT);
1:         assertTrue(message.isPersistent());
1:         message.setObjectProperty(propertyName, DeliveryMode.NON_PERSISTENT);
1:         assertFalse(message.isPersistent());
1:         message.setIntProperty(propertyName, DeliveryMode.PERSISTENT);
1:         assertTrue(message.isPersistent());
1:         message.setIntProperty(propertyName, DeliveryMode.NON_PERSISTENT);
1:         assertFalse(message.isPersistent());
1: 
1:         // Set as String
1:         message.setObjectProperty(propertyName, "PERSISTENT");
1:         assertTrue(message.isPersistent());
1:         message.setObjectProperty(propertyName, "NON_PERSISTENT");
1:         assertFalse(message.isPersistent());
1:         message.setStringProperty(propertyName, "PERSISTENT");
1:         assertTrue(message.isPersistent());
1:         message.setStringProperty(propertyName, "NON_PERSISTENT");
1:         assertFalse(message.isPersistent());
1:     }
1: 
author:Timothy A. Bish
-------------------------------------------------------------------------------
commit:b8518e0
/////////////////////////////////////////////////////////////////////////
1:         this.jmsMessageID = "ID:TEST-ID:0:0:0:1";
/////////////////////////////////////////////////////////////////////////
1:         assertTrue(msg.getJMSMessageID().hashCode() == jmsMessageID.hashCode());
commit:368dc8f
/////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////
1:         ActiveMQMessage msg2 = (ActiveMQMessage) msg1.copy();
/////////////////////////////////////////////////////////////////////////
1:         assertEquals(msg1.getJMSMessageID(), msg2.getJMSMessageID());
/////////////////////////////////////////////////////////////////////////
1:         msg.setByteProperty(name, (byte) 1);
1:         msg.setShortProperty(name, (short) 1);
/////////////////////////////////////////////////////////////////////////
1:         assertTrue(((Float) msg.getObjectProperty(name)).floatValue() == 1.3f);
/////////////////////////////////////////////////////////////////////////
1:         assertEquals(((Byte) properties.get("byteProperty")).byteValue(), 1);
1:         assertEquals(((Short) properties.get("shortProperty")).shortValue(), 1);
1:         assertEquals(((Integer) properties.get("intProperty")).intValue(), 1);
1:         assertEquals(((Long) properties.get("longProperty")).longValue(), 1);
1:         assertEquals(((Float) properties.get("floatProperty")).floatValue(), 1.1f, 0);
1:         assertEquals(((Double) properties.get("doubleProperty")).doubleValue(), 1.1, 0);
1:         assertEquals(((Boolean) properties.get("booleanProperty")).booleanValue(), true);
/////////////////////////////////////////////////////////////////////////
1:         assertEquals(((Boolean) msg.getObjectProperty(propertyName)).booleanValue(), true);
/////////////////////////////////////////////////////////////////////////
1:         msg.setByteProperty(propertyName, (byte) 1);
1:         assertEquals(((Byte) msg.getObjectProperty(propertyName)).byteValue(), 1);
/////////////////////////////////////////////////////////////////////////
1:         msg.setShortProperty(propertyName, (short) 1);
1:         assertEquals(((Short) msg.getObjectProperty(propertyName)).shortValue(), 1);
/////////////////////////////////////////////////////////////////////////
1:         assertEquals(((Integer) msg.getObjectProperty(propertyName)).intValue(), 1);
/////////////////////////////////////////////////////////////////////////
1:         assertEquals(((Long) msg.getObjectProperty(propertyName)).longValue(), 1);
/////////////////////////////////////////////////////////////////////////
1:         msg.setFloatProperty(propertyName, (float) 1.5);
1:         assertEquals(((Float) msg.getObjectProperty(propertyName)).floatValue(), 1.5, 0);
/////////////////////////////////////////////////////////////////////////
1:         assertEquals(((Double) msg.getObjectProperty(propertyName)).doubleValue(), 1.5, 0);
/////////////////////////////////////////////////////////////////////////
1:         assertEquals((String) msg.getObjectProperty(propertyName), stringValue);
/////////////////////////////////////////////////////////////////////////
1:             ((org.apache.activemq.command.Message) msg).setProperty(propertyName, obj); // bypass
/////////////////////////////////////////////////////////////////////////
1:             msg.setByteProperty(propertyName, (byte) 1);
1:             msg.setShortProperty(propertyName, (short) 1);
/////////////////////////////////////////////////////////////////////////
1:             msg.setFloatProperty(propertyName, (float) 1.5);
commit:2bd0e57
/////////////////////////////////////////////////////////////////////////
1:     @Override
/////////////////////////////////////////////////////////////////////////
1:     @Override
/////////////////////////////////////////////////////////////////////////
1:             @Override
1:             @Override
1:             @Override
1:             @Override
/////////////////////////////////////////////////////////////////////////
1: 
1:             @Override
1:             public void storeContentAndClear() {
1: 
1:             }
/////////////////////////////////////////////////////////////////////////
1:         msg.setIntProperty(propertyName, 1);
commit:ef24cc9
commit:41c9366
/////////////////////////////////////////////////////////////////////////
1:  *
/////////////////////////////////////////////////////////////////////////
1: 
1:      *
/////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////
1:         assertEquals(9, msg.getJMSPriority());
/////////////////////////////////////////////////////////////////////////
1:     @SuppressWarnings("rawtypes")
/////////////////////////////////////////////////////////////////////////
1:     @SuppressWarnings("rawtypes")
/////////////////////////////////////////////////////////////////////////
1:             public void clearBody() throws JMSException {
1:             }
1: 
1:             @Override
1:             public void storeContent() {
/////////////////////////////////////////////////////////////////////////
1:         Map<String, Object> properties = msg.getProperties();
/////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////
author:Hiram R. Chirino
-------------------------------------------------------------------------------
commit:b0c2a40
/////////////////////////////////////////////////////////////////////////
1:  * 
commit:933eb2f
/////////////////////////////////////////////////////////////////////////
1:     
1:     /**
1:      * Constructor for ActiveMQMessageTest.
0:      * 
1:      * @param name
1:      */
1:     public ActiveMQMessageTest(String name) {
1:         super(name);
1:     }
/////////////////////////////////////////////////////////////////////////
commit:ecf89a6
/////////////////////////////////////////////////////////////////////////
1:     private String jmsMessageID;
/////////////////////////////////////////////////////////////////////////
1:             // object
1:             // check
commit:fc00993
/////////////////////////////////////////////////////////////////////////
0: import org.apache.commons.logging.Log;
0: import org.apache.commons.logging.LogFactory;
0:     private static final Log LOG = LogFactory.getLog(ActiveMQMessageTest.class);
1:     protected boolean readOnlyMessage;
1: 
0:         private String jmsMessageID;
/////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////
1:         LOG.info("Message is:  " + msg1);
/////////////////////////////////////////////////////////////////////////
1:             LOG.info("Worked, caught: " + e);
/////////////////////////////////////////////////////////////////////////
1:             LOG.info("Worked, caught: " + e);
commit:230a86c
/////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////
1:  *      http://www.apache.org/licenses/LICENSE-2.0
/////////////////////////////////////////////////////////////////////////
1: 
0:     private static final org.apache.commons.logging.Log log = org.apache.commons.logging.LogFactory.getLog(ActiveMQMessageTest.class);
1: 
/////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////
0:      * 
/////////////////////////////////////////////////////////////////////////
1: 
1: 
/////////////////////////////////////////////////////////////////////////
0:         ActiveMQMessage msg2 = (ActiveMQMessage)msg1.copy();
/////////////////////////////////////////////////////////////////////////
1: 
/////////////////////////////////////////////////////////////////////////
1:         msg.setContent(new ByteSequence(new byte[1], 0, 0));
/////////////////////////////////////////////////////////////////////////
0:         msg.setByteProperty(name, (byte)1);
0:         msg.setShortProperty(name, (short)1);
/////////////////////////////////////////////////////////////////////////
0:         assertTrue(((Float)msg.getObjectProperty(name)).floatValue() == 1.3f);
/////////////////////////////////////////////////////////////////////////
1: 
1: 
1: 
/////////////////////////////////////////////////////////////////////////
1:         assertEquals(properties.get("stringProperty"), "string");
0:         assertEquals(((Byte)properties.get("byteProperty")).byteValue(), 1);
0:         assertEquals(((Short)properties.get("shortProperty")).shortValue(), 1);
0:         assertEquals(((Integer)properties.get("intProperty")).intValue(), 1);
0:         assertEquals(((Long)properties.get("longProperty")).longValue(), 1);
0:         assertEquals(((Float)properties.get("floatProperty")).floatValue(), 1.1f, 0);
0:         assertEquals(((Double)properties.get("doubleProperty")).doubleValue(), 1.1, 0);
0:         assertEquals(((Boolean)properties.get("booleanProperty")).booleanValue(), true);
/////////////////////////////////////////////////////////////////////////
0:         assertEquals(((Boolean)msg.getObjectProperty(propertyName)).booleanValue(), true);
/////////////////////////////////////////////////////////////////////////
0:         msg.setByteProperty(propertyName, (byte)1);
0:         assertEquals(((Byte)msg.getObjectProperty(propertyName)).byteValue(), 1);
/////////////////////////////////////////////////////////////////////////
0:         msg.setShortProperty(propertyName, (short)1);
0:         assertEquals(((Short)msg.getObjectProperty(propertyName)).shortValue(), 1);
/////////////////////////////////////////////////////////////////////////
0:         msg.setIntProperty(propertyName, (int)1);
0:         assertEquals(((Integer)msg.getObjectProperty(propertyName)).intValue(), 1);
/////////////////////////////////////////////////////////////////////////
0:         assertEquals(((Long)msg.getObjectProperty(propertyName)).longValue(), 1);
/////////////////////////////////////////////////////////////////////////
0:         msg.setFloatProperty(propertyName, (float)1.5);
0:         assertEquals(((Float)msg.getObjectProperty(propertyName)).floatValue(), 1.5, 0);
/////////////////////////////////////////////////////////////////////////
0:         assertEquals(((Double)msg.getObjectProperty(propertyName)).doubleValue(), 1.5, 0);
/////////////////////////////////////////////////////////////////////////
0:         assertEquals((String)msg.getObjectProperty(propertyName), stringValue);
/////////////////////////////////////////////////////////////////////////
0:             ((org.apache.activemq.command.Message)msg).setProperty(propertyName, obj); // bypass
0:                                                                                         // object
0:                                                                                         // check
/////////////////////////////////////////////////////////////////////////
0:             msg.setByteProperty(propertyName, (byte)1);
0:             msg.setShortProperty(propertyName, (short)1);
/////////////////////////////////////////////////////////////////////////
0:             msg.setFloatProperty(propertyName, (float)1.5);
commit:88acb0e
/////////////////////////////////////////////////////////////////////////
1: import org.apache.activemq.util.ByteSequence;
1: import org.apache.activemq.wireformat.WireFormat;
commit:57b4941
/////////////////////////////////////////////////////////////////////////
1:  * Licensed to the Apache Software Foundation (ASF) under one or more
1:  * contributor license agreements.  See the NOTICE file distributed with
1:  * this work for additional information regarding copyright ownership.
1:  * The ASF licenses this file to You under the Apache License, Version 2.0
1:  * (the "License"); you may not use this file except in compliance with
1:  * the License.  You may obtain a copy of the License at
commit:93dc39b
/////////////////////////////////////////////////////////////////////////
0:         log.info("Message is:  " + msg1);
commit:f451ad0
/////////////////////////////////////////////////////////////////////////
0: import org.apache.activeio.command.WireFormat;
0: import org.apache.activeio.packet.ByteSequence;
commit:7f5213b
/////////////////////////////////////////////////////////////////////////
1:             public Response visit(CommandVisitor visitor) throws Exception {
commit:48b4869
/////////////////////////////////////////////////////////////////////////
0:  * Copyright 2005-2006 The Apache Software Foundation
commit:d29ca2a
/////////////////////////////////////////////////////////////////////////
1: /**
0:  *
0:  * Copyright 2004 The Apache Software Foundation
0:  *
0:  * Licensed under the Apache License, Version 2.0 (the "License");
0:  * you may not use this file except in compliance with the License.
0:  * You may obtain a copy of the License at
0:  *
0:  * http://www.apache.org/licenses/LICENSE-2.0
0:  *
1:  * Unless required by applicable law or agreed to in writing, software
1:  * distributed under the License is distributed on an "AS IS" BASIS,
1:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:  * See the License for the specific language governing permissions and
1:  * limitations under the License.
1:  */
1: package org.apache.activemq.command;
1: 
1: import java.io.IOException;
1: import java.util.Enumeration;
1: import java.util.Map;
1: 
1: import javax.jms.JMSException;
1: import javax.jms.Message;
1: import javax.jms.MessageFormatException;
1: import javax.jms.MessageNotWriteableException;
1: 
1: import junit.framework.TestCase;
1: 
0: import org.activeio.ByteSequence;
0: import org.activeio.command.WireFormat;
0: import org.apache.activemq.command.ActiveMQBytesMessage;
0: import org.apache.activemq.command.ActiveMQDestination;
0: import org.apache.activemq.command.ActiveMQMessage;
0: import org.apache.activemq.command.ActiveMQTempTopic;
0: import org.apache.activemq.command.ActiveMQTopic;
0: import org.apache.activemq.command.CommandTypes;
0: import org.apache.activemq.command.Response;
1: import org.apache.activemq.openwire.OpenWireFormat;
1: import org.apache.activemq.state.CommandVisitor;
1: 
1: /**
0:  * @version $Revision$
1:  */
1: public class ActiveMQMessageTest extends TestCase {
1:     
0:     private static final org.apache.commons.logging.Log log = org.apache.commons.logging.LogFactory
0:             .getLog(ActiveMQMessageTest.class);
1:     
0:     private String jmsMessageID;
1:     private String jmsCorrelationID;
1:     private ActiveMQDestination jmsDestination;
1:     private ActiveMQDestination jmsReplyTo;
1:     private int jmsDeliveryMode;
1:     private boolean jmsRedelivered;
1:     private String jmsType;
1:     private long jmsExpiration;
1:     private int jmsPriority;
1:     private long jmsTimestamp;
0:     protected boolean readOnlyMessage;
1:     private long[] consumerIDs;
1: 
1: 
1:     public static void main(String[] args) {
1:     }
1: 
1:     /*
1:      * @see TestCase#setUp()
1:      */
1:     protected void setUp() throws Exception {
1:         super.setUp();
1:         this.jmsMessageID = "testid";
1:         this.jmsCorrelationID = "testcorrelationid";
1:         this.jmsDestination = new ActiveMQTopic("test.topic");
1:         this.jmsReplyTo = new ActiveMQTempTopic("test.replyto.topic:001");
1:         this.jmsDeliveryMode = Message.DEFAULT_DELIVERY_MODE;
1:         this.jmsRedelivered = true;
1:         this.jmsType = "test type";
1:         this.jmsExpiration = 100000;
1:         this.jmsPriority = 5;
1:         this.jmsTimestamp = System.currentTimeMillis();
1:         this.readOnlyMessage = false;
1:         this.consumerIDs = new long[3];
1:         for (int i = 0; i < this.consumerIDs.length; i++) {
1:             this.consumerIDs[i] = i;
1:         }
1: 
1:     }
1: 
1:     /*
1:      * @see TestCase#tearDown()
1:      */
1:     protected void tearDown() throws Exception {
1:         super.tearDown();
1:     }
1: 
1:     /**
0:      * Constructor for ActiveMQMessageTest.
0:      *
0:      * @param arg0
1:      */
0:     public ActiveMQMessageTest(String arg0) {
0:         super(arg0);
1:     }
1: 
1:     public void testGetDataStructureType() {
1:         ActiveMQMessage msg = new ActiveMQMessage();
1:         assertEquals(msg.getDataStructureType(), CommandTypes.ACTIVEMQ_MESSAGE);
1:     }
1: 
1:     public void testHashCode() throws Exception {
1:         ActiveMQMessage msg = new ActiveMQMessage();
1:         msg.setJMSMessageID(this.jmsMessageID);
0:         assertTrue(msg.hashCode() == jmsMessageID.hashCode());
1:     }
1: 
1:     public void testSetReadOnly() {
1:         ActiveMQMessage msg = new ActiveMQMessage();
1:         msg.setReadOnlyProperties(true);
1:         boolean test = false;
1:         try {
1:             msg.setIntProperty("test", 1);
1:         } catch (MessageNotWriteableException me) {
1:             test = true;
1:         } catch (JMSException e) {
1:             e.printStackTrace(System.err);
1:             test = false;
1:         }
1:         assertTrue(test);
1:     }
1: 
1:     /*
1:      * Class to test for boolean equals(Object)
1:      */
1:     public void testEqualsObject() throws Exception {
1:         ActiveMQMessage msg1 = new ActiveMQMessage();
1:         ActiveMQMessage msg2 = new ActiveMQMessage();
1:         msg1.setJMSMessageID(this.jmsMessageID);
1:         assertTrue(!msg1.equals(msg2));
1:         msg2.setJMSMessageID(this.jmsMessageID);
1:         assertTrue(msg1.equals(msg2));
1:     }
1: 
1:     public void testShallowCopy() throws Exception {
1:         ActiveMQMessage msg1 = new ActiveMQMessage();
1:         msg1.setJMSMessageID(jmsMessageID);
0:         ActiveMQMessage msg2 = (ActiveMQMessage) msg1.copy();
1:         assertTrue(msg1 != msg2 && msg1.equals(msg2));
1:     }
1: 
1:     public void testCopy() throws Exception {
1:         this.jmsMessageID = "testid";
1:         this.jmsCorrelationID = "testcorrelationid";
1:         this.jmsDestination = new ActiveMQTopic("test.topic");
1:         this.jmsReplyTo = new ActiveMQTempTopic("test.replyto.topic:001");
1:         this.jmsDeliveryMode = Message.DEFAULT_DELIVERY_MODE;
1:         this.jmsRedelivered = true;
1:         this.jmsType = "test type";
1:         this.jmsExpiration = 100000;
1:         this.jmsPriority = 5;
1:         this.jmsTimestamp = System.currentTimeMillis();
1:         this.readOnlyMessage = false;
1: 
1:         ActiveMQMessage msg1 = new ActiveMQMessage();
1:         msg1.setJMSMessageID(this.jmsMessageID);
1:         msg1.setJMSCorrelationID(this.jmsCorrelationID);
1:         msg1.setJMSDestination(this.jmsDestination);
1:         msg1.setJMSReplyTo(this.jmsReplyTo);
1:         msg1.setJMSDeliveryMode(this.jmsDeliveryMode);
1:         msg1.setJMSRedelivered(this.jmsRedelivered);
1:         msg1.setJMSType(this.jmsType);
1:         msg1.setJMSExpiration(this.jmsExpiration);
1:         msg1.setJMSPriority(this.jmsPriority);
1:         msg1.setJMSTimestamp(this.jmsTimestamp);
1:         msg1.setReadOnlyProperties(true);
1:         ActiveMQMessage msg2 = new ActiveMQMessage();
1:         msg1.copy(msg2);
0:         assertTrue(msg1.getJMSMessageID().equals(msg2.getJMSMessageID()));
1:         assertTrue(msg1.getJMSCorrelationID().equals(msg2.getJMSCorrelationID()));
1:         assertTrue(msg1.getJMSDestination().equals(msg2.getJMSDestination()));
1:         assertTrue(msg1.getJMSReplyTo().equals(msg2.getJMSReplyTo()));
1:         assertTrue(msg1.getJMSDeliveryMode() == msg2.getJMSDeliveryMode());
1:         assertTrue(msg1.getJMSRedelivered() == msg2.getJMSRedelivered());
1:         assertTrue(msg1.getJMSType().equals(msg2.getJMSType()));
1:         assertTrue(msg1.getJMSExpiration() == msg2.getJMSExpiration());
1:         assertTrue(msg1.getJMSPriority() == msg2.getJMSPriority());
1:         assertTrue(msg1.getJMSTimestamp() == msg2.getJMSTimestamp());
1:     }
1: 
1:     public void testGetAndSetJMSMessageID() throws Exception {
1:         ActiveMQMessage msg = new ActiveMQMessage();
1:         msg.setJMSMessageID(this.jmsMessageID);
1:         assertEquals(msg.getJMSMessageID(), this.jmsMessageID);
1:     }
1: 
1:     public void testGetAndSetJMSTimestamp() {
1:         ActiveMQMessage msg = new ActiveMQMessage();
1:         msg.setJMSTimestamp(this.jmsTimestamp);
1:         assertTrue(msg.getJMSTimestamp() == this.jmsTimestamp);
1:     }
1: 
1:     public void testGetJMSCorrelationIDAsBytes() throws Exception {
1:         ActiveMQMessage msg = new ActiveMQMessage();
1:         msg.setJMSCorrelationID(this.jmsCorrelationID);
1:         byte[] testbytes = msg.getJMSCorrelationIDAsBytes();
1:         String str2 = new String(testbytes);
1:         assertTrue(this.jmsCorrelationID.equals(str2));
1:     }
1: 
1:     public void testSetJMSCorrelationIDAsBytes() throws Exception {
1:         ActiveMQMessage msg = new ActiveMQMessage();
1:         byte[] testbytes = this.jmsCorrelationID.getBytes();
1:         msg.setJMSCorrelationIDAsBytes(testbytes);
1:         testbytes = msg.getJMSCorrelationIDAsBytes();
1:         String str2 = new String(testbytes);
1:         assertTrue(this.jmsCorrelationID.equals(str2));
1:     }
1: 
1:     public void testGetAndSetJMSCorrelationID() {
1:         ActiveMQMessage msg = new ActiveMQMessage();
1:         msg.setJMSCorrelationID(this.jmsCorrelationID);
1:         assertTrue(msg.getJMSCorrelationID().equals(this.jmsCorrelationID));
1:     }
1: 
1:     public void testGetAndSetJMSReplyTo() throws JMSException {
1:         ActiveMQMessage msg = new ActiveMQMessage();
1:         msg.setJMSReplyTo(this.jmsReplyTo);
1:         assertTrue(msg.getJMSReplyTo().equals(this.jmsReplyTo));
1:     }
1: 
1:     public void testGetAndSetJMSDestination() throws Exception {
1:         ActiveMQMessage msg = new ActiveMQMessage();
1:         msg.setJMSDestination(this.jmsDestination);
1:         assertTrue(msg.getJMSDestination().equals(this.jmsDestination));
1:     }
1: 
1:     public void testGetAndSetJMSDeliveryMode() {
1:         ActiveMQMessage msg = new ActiveMQMessage();
1:         msg.setJMSDeliveryMode(this.jmsDeliveryMode);
1:         assertTrue(msg.getJMSDeliveryMode() == this.jmsDeliveryMode);
1:     }
1: 
1:     public void testGetAndSetMSRedelivered() {
1:         ActiveMQMessage msg = new ActiveMQMessage();
1:         msg.setJMSRedelivered(this.jmsRedelivered);
1:         assertTrue(msg.getJMSRedelivered() == this.jmsRedelivered);
1:     }
1: 
1:     public void testGetAndSetJMSType() {
1:         ActiveMQMessage msg = new ActiveMQMessage();
1:         msg.setJMSType(this.jmsType);
1:         assertTrue(msg.getJMSType().equals(this.jmsType));
1:     }
1: 
1:     public void testGetAndSetJMSExpiration() {
1:         ActiveMQMessage msg = new ActiveMQMessage();
1:         msg.setJMSExpiration(this.jmsExpiration);
1:         assertTrue(msg.getJMSExpiration() == this.jmsExpiration);
1:     }
1: 
1:     public void testGetAndSetJMSPriority() {
1:         ActiveMQMessage msg = new ActiveMQMessage();
1:         msg.setJMSPriority(this.jmsPriority);
1:         assertTrue(msg.getJMSPriority() == this.jmsPriority);
1:     }
1: 
1:     public void testClearProperties() throws JMSException {
1:         ActiveMQMessage msg = new ActiveMQMessage();
1:         msg.setStringProperty("test", "test");
0:         msg.setContent(new ByteSequence(new byte[1],0,0));
1:         msg.setJMSMessageID(this.jmsMessageID);
1:         msg.clearProperties();
1:         assertNull(msg.getStringProperty("test"));
1:         assertNotNull(msg.getJMSMessageID());
1:         assertNotNull(msg.getContent());
1:     }
1: 
1:     public void testPropertyExists() throws JMSException {
1:         ActiveMQMessage msg = new ActiveMQMessage();
1:         msg.setStringProperty("test", "test");
1:         assertTrue(msg.propertyExists("test"));
1:     }
1: 
1:     public void testGetBooleanProperty() throws JMSException {
1:         ActiveMQMessage msg = new ActiveMQMessage();
1:         String name = "booleanProperty";
1:         msg.setBooleanProperty(name, true);
1:         assertTrue(msg.getBooleanProperty(name));
1:     }
1: 
1:     public void testGetByteProperty() throws JMSException {
1:         ActiveMQMessage msg = new ActiveMQMessage();
1:         String name = "byteProperty";
0:         msg.setByteProperty(name, (byte) 1);
1:         assertTrue(msg.getByteProperty(name) == 1);
1:     }
1: 
1:     public void testGetShortProperty() throws JMSException {
1:         ActiveMQMessage msg = new ActiveMQMessage();
1:         String name = "shortProperty";
0:         msg.setShortProperty(name, (short) 1);
1:         assertTrue(msg.getShortProperty(name) == 1);
1:     }
1: 
1:     public void testGetIntProperty() throws JMSException {
1:         ActiveMQMessage msg = new ActiveMQMessage();
1:         String name = "intProperty";
1:         msg.setIntProperty(name, 1);
1:         assertTrue(msg.getIntProperty(name) == 1);
1:     }
1: 
1:     public void testGetLongProperty() throws JMSException {
1:         ActiveMQMessage msg = new ActiveMQMessage();
1:         String name = "longProperty";
1:         msg.setLongProperty(name, 1);
1:         assertTrue(msg.getLongProperty(name) == 1);
1:     }
1: 
1:     public void testGetFloatProperty() throws JMSException {
1:         ActiveMQMessage msg = new ActiveMQMessage();
1:         String name = "floatProperty";
1:         msg.setFloatProperty(name, 1.3f);
1:         assertTrue(msg.getFloatProperty(name) == 1.3f);
1:     }
1: 
1:     public void testGetDoubleProperty() throws JMSException {
1:         ActiveMQMessage msg = new ActiveMQMessage();
1:         String name = "doubleProperty";
1:         msg.setDoubleProperty(name, 1.3d);
1:         assertTrue(msg.getDoubleProperty(name) == 1.3);
1:     }
1: 
1:     public void testGetStringProperty() throws JMSException {
1:         ActiveMQMessage msg = new ActiveMQMessage();
1:         String name = "stringProperty";
1:         msg.setStringProperty(name, name);
1:         assertTrue(msg.getStringProperty(name).equals(name));
1:     }
1: 
1:     public void testGetObjectProperty() throws JMSException {
1:         ActiveMQMessage msg = new ActiveMQMessage();
1:         String name = "floatProperty";
1:         msg.setFloatProperty(name, 1.3f);
1:         assertTrue(msg.getObjectProperty(name) instanceof Float);
0:         assertTrue(((Float) msg.getObjectProperty(name)).floatValue() == 1.3f);
1:     }
1: 
1:     public void testGetPropertyNames() throws JMSException {
1:         ActiveMQMessage msg = new ActiveMQMessage();
1:         String name = "floatProperty";
1:         msg.setFloatProperty(name, 1.3f);
1:         for (Enumeration iter = msg.getPropertyNames(); iter.hasMoreElements();) {
0:             assertTrue(iter.nextElement().equals(name));
1:         }
1:     }
1: 
1:     public void testSetObjectProperty() throws JMSException {
1:         ActiveMQMessage msg = new ActiveMQMessage();
1:         String name = "property";
1: 
1:         try {
1:             msg.setObjectProperty(name, "string");
1:             msg.setObjectProperty(name, Byte.valueOf("1"));
1:             msg.setObjectProperty(name, Short.valueOf("1"));
1:             msg.setObjectProperty(name, Integer.valueOf("1"));
1:             msg.setObjectProperty(name, Long.valueOf("1"));
1:             msg.setObjectProperty(name, Float.valueOf("1.1f"));
1:             msg.setObjectProperty(name, Double.valueOf("1.1"));
1:             msg.setObjectProperty(name, Boolean.TRUE);
1:             msg.setObjectProperty(name, null);
1:         } catch (MessageFormatException e) {
1:             fail("should accept object primitives and String");
1:         }
1:         try {
1:             msg.setObjectProperty(name, new byte[5]);
1:             fail("should accept only object primitives and String");
1:         } catch (MessageFormatException e) {
1:         }
1:         try {
1:             msg.setObjectProperty(name, new Object());
1:             fail("should accept only object primitives and String");
1:         } catch (MessageFormatException e) {
1:         }
1:     }
1: 
1:     public void testConvertProperties() throws Exception {
1:         org.apache.activemq.command.Message msg = new org.apache.activemq.command.Message() {
1:             public org.apache.activemq.command.Message copy() {
1:                 return null;
1:             }
1:             public void beforeMarshall(WireFormat wireFormat) throws IOException {
1:                 super.beforeMarshall(wireFormat);
1:             }
1:             public byte getDataStructureType() {
1:                 return 0;
1:             }
0:             public Response visit(CommandVisitor visitor) throws Throwable {
1:                 return null;
1:             }
1:         };
1: 
1:         msg.setProperty("stringProperty", "string");
1:         msg.setProperty("byteProperty", Byte.valueOf("1"));
1:         msg.setProperty("shortProperty", Short.valueOf("1"));
1:         msg.setProperty("intProperty", Integer.valueOf("1"));
1:         msg.setProperty("longProperty", Long.valueOf("1"));
1:         msg.setProperty("floatProperty", Float.valueOf("1.1f"));
1:         msg.setProperty("doubleProperty", Double.valueOf("1.1"));
1:         msg.setProperty("booleanProperty", Boolean.TRUE);
1:         msg.setProperty("nullProperty", null);
1: 
1:         msg.beforeMarshall(new OpenWireFormat());
1: 
0:         Map properties = msg.getProperties();
0:         assertEquals(properties.get("stringProperty"),"string");
0:         assertEquals(((Byte)properties.get("byteProperty")).byteValue(),1); 
0:         assertEquals(((Short)properties.get("shortProperty")).shortValue(),1);
0:         assertEquals(((Integer)properties.get("intProperty")).intValue(),1);
0:         assertEquals(((Long)properties.get("longProperty")).longValue(),1);
0:         assertEquals(((Float)properties.get("floatProperty")).floatValue(),1.1f,0);
0:         assertEquals(((Double)properties.get("doubleProperty")).doubleValue(),1.1,0);
0:         assertEquals(((Boolean)properties.get("booleanProperty")).booleanValue(),true);
1:         assertNull(properties.get("nullProperty"));
1: 
1:     }
1: 
1:     public void testSetNullProperty() throws JMSException {
1:         Message msg = new ActiveMQMessage();
1:         String name = "cheese";
1:         msg.setStringProperty(name, "Cheddar");
1:         assertEquals("Cheddar", msg.getStringProperty(name));
1: 
1:         msg.setStringProperty(name, null);
1:         assertEquals(null, msg.getStringProperty(name));
1:     }
1: 
1:     public void testSetNullPropertyName() throws JMSException {
1:         Message msg = new ActiveMQMessage();
1: 
1:         try {
1:             msg.setStringProperty(null, "Cheese");
1:             fail("Should have thrown exception");
1:         } catch (IllegalArgumentException e) {
0:             log.info("Worked, caught: " + e);
1:         }
1:     }
1: 
1:     public void testSetEmptyPropertyName() throws JMSException {
1:         Message msg = new ActiveMQMessage();
1: 
1:         try {
1:             msg.setStringProperty("", "Cheese");
1:             fail("Should have thrown exception");
1:         } catch (IllegalArgumentException e) {
0:             log.info("Worked, caught: " + e);
1:         }
1:     }
1: 
1:     public void testGetAndSetJMSXDeliveryCount() throws JMSException {
1:         Message msg = new ActiveMQMessage();
1:         msg.setIntProperty("JMSXDeliveryCount", 1);
1:         int count = msg.getIntProperty("JMSXDeliveryCount");
1:         assertTrue("expected delivery count = 1 - got: " + count, count == 1);
1:     }
1: 
1:     public void testClearBody() throws JMSException {
1:         ActiveMQBytesMessage message = new ActiveMQBytesMessage();
1:         message.clearBody();
1:         assertFalse(message.isReadOnlyBody());
1:         assertNull(message.getContent());
1:     }
1: 
1:     public void testBooleanPropertyConversion() throws JMSException {
1:         ActiveMQMessage msg = new ActiveMQMessage();
1:         String propertyName = "property";
1:         msg.setBooleanProperty(propertyName, true);
1: 
0:         assertEquals(((Boolean) msg.getObjectProperty(propertyName)).booleanValue(), true);
1:         assertTrue(msg.getBooleanProperty(propertyName));
1:         assertEquals(msg.getStringProperty(propertyName), "true");
1:         try {
1:             msg.getByteProperty(propertyName);
1:             fail("Should have thrown exception");
1:         } catch (MessageFormatException e) {
1:         }
1:         try {
1:             msg.getShortProperty(propertyName);
1:             fail("Should have thrown exception");
1:         } catch (MessageFormatException e) {
1:         }
1:         try {
1:             msg.getIntProperty(propertyName);
1:             fail("Should have thrown exception");
1:         } catch (MessageFormatException e) {
1:         }
1:         try {
1:             msg.getLongProperty(propertyName);
1:             fail("Should have thrown exception");
1:         } catch (MessageFormatException e) {
1:         }
1:         try {
1:             msg.getFloatProperty(propertyName);
1:             fail("Should have thrown exception");
1:         } catch (MessageFormatException e) {
1:         }
1:         try {
1:             msg.getDoubleProperty(propertyName);
1:             fail("Should have thrown exception");
1:         } catch (MessageFormatException e) {
1:         }
1:     }
1: 
1:     public void testBytePropertyConversion() throws JMSException {
1:         ActiveMQMessage msg = new ActiveMQMessage();
1:         String propertyName = "property";
0:         msg.setByteProperty(propertyName, (byte) 1);
1: 
0:         assertEquals(((Byte) msg.getObjectProperty(propertyName)).byteValue(), 1);
1:         assertEquals(msg.getByteProperty(propertyName), 1);
1:         assertEquals(msg.getShortProperty(propertyName), 1);
1:         assertEquals(msg.getIntProperty(propertyName), 1);
1:         assertEquals(msg.getLongProperty(propertyName), 1);
1:         assertEquals(msg.getStringProperty(propertyName), "1");
1:         try {
1:             msg.getBooleanProperty(propertyName);
1:             fail("Should have thrown exception");
1:         } catch (MessageFormatException e) {
1:         }
1:         try {
1:             msg.getFloatProperty(propertyName);
1:             fail("Should have thrown exception");
1:         } catch (MessageFormatException e) {
1:         }
1:         try {
1:             msg.getDoubleProperty(propertyName);
1:             fail("Should have thrown exception");
1:         } catch (MessageFormatException e) {
1:         }
1:     }
1: 
1:     public void testShortPropertyConversion() throws JMSException {
1:         ActiveMQMessage msg = new ActiveMQMessage();
1:         String propertyName = "property";
0:         msg.setShortProperty(propertyName, (short) 1);
1: 
0:         assertEquals(((Short) msg.getObjectProperty(propertyName)).shortValue(), 1);
1:         assertEquals(msg.getShortProperty(propertyName), 1);
1:         assertEquals(msg.getIntProperty(propertyName), 1);
1:         assertEquals(msg.getLongProperty(propertyName), 1);
1:         assertEquals(msg.getStringProperty(propertyName), "1");
1:         try {
1:             msg.getBooleanProperty(propertyName);
1:             fail("Should have thrown exception");
1:         } catch (MessageFormatException e) {
1:         }
1:         try {
1:             msg.getByteProperty(propertyName);
1:             fail("Should have thrown exception");
1:         } catch (MessageFormatException e) {
1:         }
1:         try {
1:             msg.getFloatProperty(propertyName);
1:             fail("Should have thrown exception");
1:         } catch (MessageFormatException e) {
1:         }
1:         try {
1:             msg.getDoubleProperty(propertyName);
1:             fail("Should have thrown exception");
1:         } catch (MessageFormatException e) {
1:         }
1:     }
1: 
1:     public void testIntPropertyConversion() throws JMSException {
1:         ActiveMQMessage msg = new ActiveMQMessage();
1:         String propertyName = "property";
0:         msg.setIntProperty(propertyName, (int) 1);
1: 
0:         assertEquals(((Integer) msg.getObjectProperty(propertyName)).intValue(), 1);
1:         assertEquals(msg.getIntProperty(propertyName), 1);
1:         assertEquals(msg.getLongProperty(propertyName), 1);
1:         assertEquals(msg.getStringProperty(propertyName), "1");
1:         try {
1:             msg.getBooleanProperty(propertyName);
1:             fail("Should have thrown exception");
1:         } catch (MessageFormatException e) {
1:         }
1:         try {
1:             msg.getByteProperty(propertyName);
1:             fail("Should have thrown exception");
1:         } catch (MessageFormatException e) {
1:         }
1:         try {
1:             msg.getShortProperty(propertyName);
1:             fail("Should have thrown exception");
1:         } catch (MessageFormatException e) {
1:         }
1:         try {
1:             msg.getFloatProperty(propertyName);
1:             fail("Should have thrown exception");
1:         } catch (MessageFormatException e) {
1:         }
1:         try {
1:             msg.getDoubleProperty(propertyName);
1:             fail("Should have thrown exception");
1:         } catch (MessageFormatException e) {
1:         }
1:     }
1: 
1:     public void testLongPropertyConversion() throws JMSException {
1:         ActiveMQMessage msg = new ActiveMQMessage();
1:         String propertyName = "property";
1:         msg.setLongProperty(propertyName, 1);
1: 
0:         assertEquals(((Long) msg.getObjectProperty(propertyName)).longValue(), 1);
1:         assertEquals(msg.getLongProperty(propertyName), 1);
1:         assertEquals(msg.getStringProperty(propertyName), "1");
1:         try {
1:             msg.getBooleanProperty(propertyName);
1:             fail("Should have thrown exception");
1:         } catch (MessageFormatException e) {
1:         }
1:         try {
1:             msg.getByteProperty(propertyName);
1:             fail("Should have thrown exception");
1:         } catch (MessageFormatException e) {
1:         }
1:         try {
1:             msg.getShortProperty(propertyName);
1:             fail("Should have thrown exception");
1:         } catch (MessageFormatException e) {
1:         }
1:         try {
1:             msg.getIntProperty(propertyName);
1:             fail("Should have thrown exception");
1:         } catch (MessageFormatException e) {
1:         }
1:         try {
1:             msg.getFloatProperty(propertyName);
1:             fail("Should have thrown exception");
1:         } catch (MessageFormatException e) {
1:         }
1:         try {
1:             msg.getDoubleProperty(propertyName);
1:             fail("Should have thrown exception");
1:         } catch (MessageFormatException e) {
1:         }
1:     }
1: 
1:     public void testFloatPropertyConversion() throws JMSException {
1:         ActiveMQMessage msg = new ActiveMQMessage();
1:         String propertyName = "property";
0:         msg.setFloatProperty(propertyName, (float) 1.5);
0:         assertEquals(((Float) msg.getObjectProperty(propertyName)).floatValue(), 1.5, 0);
1:         assertEquals(msg.getFloatProperty(propertyName), 1.5, 0);
1:         assertEquals(msg.getDoubleProperty(propertyName), 1.5, 0);
1:         assertEquals(msg.getStringProperty(propertyName), "1.5");
1:         try {
1:             msg.getBooleanProperty(propertyName);
1:             fail("Should have thrown exception");
1:         } catch (MessageFormatException e) {
1:         }
1:         try {
1:             msg.getByteProperty(propertyName);
1:             fail("Should have thrown exception");
1:         } catch (MessageFormatException e) {
1:         }
1:         try {
1:             msg.getShortProperty(propertyName);
1:             fail("Should have thrown exception");
1:         } catch (MessageFormatException e) {
1:         }
1:         try {
1:             msg.getIntProperty(propertyName);
1:             fail("Should have thrown exception");
1:         } catch (MessageFormatException e) {
1:         }
1:         try {
1:             msg.getLongProperty(propertyName);
1:             fail("Should have thrown exception");
1:         } catch (MessageFormatException e) {
1:         }
1:     }
1: 
1:     public void testDoublePropertyConversion() throws JMSException {
1:         ActiveMQMessage msg = new ActiveMQMessage();
1:         String propertyName = "property";
1:         msg.setDoubleProperty(propertyName, 1.5);
0:         assertEquals(((Double) msg.getObjectProperty(propertyName)).doubleValue(), 1.5, 0);
1:         assertEquals(msg.getDoubleProperty(propertyName), 1.5, 0);
1:         assertEquals(msg.getStringProperty(propertyName), "1.5");
1:         try {
1:             msg.getBooleanProperty(propertyName);
1:             fail("Should have thrown exception");
1:         } catch (MessageFormatException e) {
1:         }
1:         try {
1:             msg.getByteProperty(propertyName);
1:             fail("Should have thrown exception");
1:         } catch (MessageFormatException e) {
1:         }
1:         try {
1:             msg.getShortProperty(propertyName);
1:             fail("Should have thrown exception");
1:         } catch (MessageFormatException e) {
1:         }
1:         try {
1:             msg.getIntProperty(propertyName);
1:             fail("Should have thrown exception");
1:         } catch (MessageFormatException e) {
1:         }
1:         try {
1:             msg.getLongProperty(propertyName);
1:             fail("Should have thrown exception");
1:         } catch (MessageFormatException e) {
1:         }
1:         try {
1:             msg.getFloatProperty(propertyName);
1:             fail("Should have thrown exception");
1:         } catch (MessageFormatException e) {
1:         }
1:     }
1: 
1:     public void testStringPropertyConversion() throws JMSException {
1:         ActiveMQMessage msg = new ActiveMQMessage();
1:         String propertyName = "property";
1:         String stringValue = "true";
1:         msg.setStringProperty(propertyName, stringValue);
1:         assertEquals(msg.getStringProperty(propertyName), stringValue);
0:         assertEquals((String) msg.getObjectProperty(propertyName), stringValue);
1:         assertEquals(msg.getBooleanProperty(propertyName), true);
1: 
1:         stringValue = "1";
1:         msg.setStringProperty(propertyName, stringValue);
1:         assertEquals(msg.getByteProperty(propertyName), 1);
1:         assertEquals(msg.getShortProperty(propertyName), 1);
1:         assertEquals(msg.getIntProperty(propertyName), 1);
1:         assertEquals(msg.getLongProperty(propertyName), 1);
1: 
1:         stringValue = "1.5";
1:         msg.setStringProperty(propertyName, stringValue);
1:         assertEquals(msg.getFloatProperty(propertyName), 1.5, 0);
1:         assertEquals(msg.getDoubleProperty(propertyName), 1.5, 0);
1: 
1:         stringValue = "bad";
1:         msg.setStringProperty(propertyName, stringValue);
1:         try {
1:             msg.getByteProperty(propertyName);
1:             fail("Should have thrown exception");
1:         } catch (NumberFormatException e) {
1:         }
1:         try {
1:             msg.getShortProperty(propertyName);
1:             fail("Should have thrown exception");
1:         } catch (NumberFormatException e) {
1:         }
1:         try {
1:             msg.getIntProperty(propertyName);
1:             fail("Should have thrown exception");
1:         } catch (NumberFormatException e) {
1:         }
1:         try {
1:             msg.getLongProperty(propertyName);
1:             fail("Should have thrown exception");
1:         } catch (NumberFormatException e) {
1:         }
1:         try {
1:             msg.getFloatProperty(propertyName);
1:             fail("Should have thrown exception");
1:         } catch (NumberFormatException e) {
1:         }
1:         try {
1:             msg.getDoubleProperty(propertyName);
1:             fail("Should have thrown exception");
1:         } catch (NumberFormatException e) {
1:         }
1:         assertFalse(msg.getBooleanProperty(propertyName));
1:     }
1: 
1:     public void testObjectPropertyConversion() throws JMSException {
1:         ActiveMQMessage msg = new ActiveMQMessage();
1:         String propertyName = "property";
1:         Object obj = new Object();
1:         try {
0:             ((org.apache.activemq.command.Message)msg).setProperty(propertyName, obj); //bypass object check
1:         } catch (IOException e) {
1:         }
1:         try {
1:             msg.getStringProperty(propertyName);
1:             fail("Should have thrown exception");
1:         } catch (MessageFormatException e) {
1:         }
1:         try {
1:             msg.getBooleanProperty(propertyName);
1:             fail("Should have thrown exception");
1:         } catch (MessageFormatException e) {
1:         }
1:         try {
1:             msg.getByteProperty(propertyName);
1:             fail("Should have thrown exception");
1:         } catch (MessageFormatException e) {
1:         }
1:         try {
1:             msg.getShortProperty(propertyName);
1:             fail("Should have thrown exception");
1:         } catch (MessageFormatException e) {
1:         }
1:         try {
1:             msg.getIntProperty(propertyName);
1:             fail("Should have thrown exception");
1:         } catch (MessageFormatException e) {
1:         }
1:         try {
1:             msg.getLongProperty(propertyName);
1:             fail("Should have thrown exception");
1:         } catch (MessageFormatException e) {
1:         }
1:         try {
1:             msg.getFloatProperty(propertyName);
1:             fail("Should have thrown exception");
1:         } catch (MessageFormatException e) {
1:         }
1:         try {
1:             msg.getDoubleProperty(propertyName);
1:             fail("Should have thrown exception");
1:         } catch (MessageFormatException e) {
1:         }
1: 
1:     }
1: 
1:     public void testReadOnlyProperties() throws JMSException {
1:         ActiveMQMessage msg = new ActiveMQMessage();
1:         String propertyName = "property";
1:         msg.setReadOnlyProperties(true);
1: 
1:         try {
1:             msg.setObjectProperty(propertyName, new Object());
1:             fail("Should have thrown exception");
1:         } catch (MessageNotWriteableException e) {
1:         }
1:         try {
1:             msg.setStringProperty(propertyName, "test");
1:             fail("Should have thrown exception");
1:         } catch (MessageNotWriteableException e) {
1:         }
1:         try {
1:             msg.setBooleanProperty(propertyName, true);
1:             fail("Should have thrown exception");
1:         } catch (MessageNotWriteableException e) {
1:         }
1:         try {
0:             msg.setByteProperty(propertyName, (byte) 1);
1:             fail("Should have thrown exception");
1:         } catch (MessageNotWriteableException e) {
1:         }
1:         try {
0:             msg.setShortProperty(propertyName, (short) 1);
1:             fail("Should have thrown exception");
1:         } catch (MessageNotWriteableException e) {
1:         }
1:         try {
1:             msg.setIntProperty(propertyName, 1);
1:             fail("Should have thrown exception");
1:         } catch (MessageNotWriteableException e) {
1:         }
1:         try {
1:             msg.setLongProperty(propertyName, 1);
1:             fail("Should have thrown exception");
1:         } catch (MessageNotWriteableException e) {
1:         }
1:         try {
0:             msg.setFloatProperty(propertyName, (float) 1.5);
1:             fail("Should have thrown exception");
1:         } catch (MessageNotWriteableException e) {
1:         }
1:         try {
1:             msg.setDoubleProperty(propertyName, 1.5);
1:             fail("Should have thrown exception");
1:         } catch (MessageNotWriteableException e) {
1:         }
1:     }
1: 
1:     public void testIsExpired() {
1:         ActiveMQMessage msg = new ActiveMQMessage();
1:         msg.setJMSExpiration(System.currentTimeMillis() - 1);
1:         assertTrue(msg.isExpired());
1:         msg.setJMSExpiration(System.currentTimeMillis() + 10000);
1:         assertFalse(msg.isExpired());
1:     }
1: 
1: }
author:Bosanac Dejan
-------------------------------------------------------------------------------
commit:8bf987b
/////////////////////////////////////////////////////////////////////////
1: import org.slf4j.Logger;
1: import org.slf4j.LoggerFactory;
1:     private static final Logger LOG = LoggerFactory.getLogger(ActiveMQMessageTest.class);
author:Gary Tully
-------------------------------------------------------------------------------
commit:6519c3e
/////////////////////////////////////////////////////////////////////////
0: 
1:         msg.setJMSPriority(-90);
1:         assertEquals(0, msg.getJMSPriority());
0: 
1:         msg.setJMSPriority(90);
0:         assertEquals(9, msg.getJMSPriority());                
commit:e121ccc
/////////////////////////////////////////////////////////////////////////
1:         String name3 = "JMSRedelivered";
1:         msg.setBooleanProperty(name3, false);
1:         boolean found3 = false;
1:             found3 |= element.equals(name3);
1:         }
1:         assertTrue("prop name1 found", found1);
1:         // spec compliance, only non JMS (and JMSX) props returned
1:         assertFalse("prop name2 not found", found2);
1:         assertFalse("prop name4 not found", found3);
1:     }
0: 
1:     public void testGetAllPropertyNames() throws JMSException {
1:         ActiveMQMessage msg = new ActiveMQMessage();
1:         String name1 = "floatProperty";
1:         msg.setFloatProperty(name1, 1.3f);
1:         String name2 = "JMSXDeliveryCount";
1:         msg.setIntProperty(name2, 1);
1:         String name3 = "JMSRedelivered";
1:         msg.setBooleanProperty(name3, false);
1:         boolean found1 = false;
1:         boolean found2 = false;
1:         boolean found3 = false;
1:         for (Enumeration iter = msg.getAllPropertyNames(); iter.hasMoreElements();) {
1:             Object element = iter.nextElement();
1:             found1 |= element.equals(name1);
1:             found2 |= element.equals(name2);
1:             found3 |= element.equals(name3);
1:         assertTrue("prop name4 found", found3);
commit:cf3db57
/////////////////////////////////////////////////////////////////////////
1:         String name2 = "JMSXDeliveryCount";
commit:5b8bcf7
/////////////////////////////////////////////////////////////////////////
0:         String name2 = "intProperty";
1:         msg.setIntProperty(name2, 1);
commit:7f7a95b
/////////////////////////////////////////////////////////////////////////
0: 
1:         msg.setIntProperty("JMSXDeliveryCount", 1);
1:         assertTrue(msg.propertyExists("JMSXDeliveryCount"));
/////////////////////////////////////////////////////////////////////////
1:         String name1 = "floatProperty";
1:         msg.setFloatProperty(name1, 1.3f);
0:         String name2 = "JMSXDeliveryCount";
0:         msg.setIntProperty("name2", 1);
1:         boolean found1 = false;
1:         boolean found2 = false;
1:             Object element = iter.nextElement();
1:             found1 |= element.equals(name1);
1:             found2 |= element.equals(name2);
1:         assertTrue("prop name1 found", found1);
1:         assertTrue("prop name2 found", found2);
author:Robert Davies
-------------------------------------------------------------------------------
commit:cdc2fd3
/////////////////////////////////////////////////////////////////////////
0: 
1:             @Override
0:             public void clearBody() throws JMSException {                
1:             }
author:James Strachan
-------------------------------------------------------------------------------
commit:9c0d3ce
/////////////////////////////////////////////////////////////////////////
0:         
0:         System.out.println("Message is:  " + msg1);
commit:da77d2c
/////////////////////////////////////////////////////////////////////////
1:     public void testSetToForeignJMSID() throws Exception {
1:         ActiveMQMessage msg = new ActiveMQMessage();
1:         msg.setJMSMessageID("ID:EMS-SERVER.8B443C380083:429");
0:         
0:     }
============================================================================