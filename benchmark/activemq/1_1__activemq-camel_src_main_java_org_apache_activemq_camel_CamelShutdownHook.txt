1:155461a: /**
1:155461a:  * Licensed to the Apache Software Foundation (ASF) under one or more
1:155461a:  * contributor license agreements.  See the NOTICE file distributed with
1:155461a:  * this work for additional information regarding copyright ownership.
1:155461a:  * The ASF licenses this file to You under the Apache License, Version 2.0
1:155461a:  * (the "License"); you may not use this file except in compliance with
1:155461a:  * the License.  You may obtain a copy of the License at
1:155461a:  *
1:155461a:  *      http://www.apache.org/licenses/LICENSE-2.0
1:155461a:  *
1:155461a:  * Unless required by applicable law or agreed to in writing, software
1:155461a:  * distributed under the License is distributed on an "AS IS" BASIS,
1:155461a:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:155461a:  * See the License for the specific language governing permissions and
1:155461a:  * limitations under the License.
1:155461a:  */
1:155461a: package org.apache.activemq.camel;
1:155461a: 
1:155461a: import org.apache.activemq.broker.BrokerService;
1:155461a: import org.apache.camel.CamelContext;
1:155461a: import org.apache.camel.CamelContextAware;
1:155461a: import org.slf4j.Logger;
1:155461a: import org.slf4j.LoggerFactory;
1:155461a: import org.springframework.beans.factory.annotation.Autowired;
1:155461a: 
1:155461a: /**
1:155461a:  * A shutdown hook that can be used to shutdown {@link CamelContext} before the
1:155461a:  * ActiveMQ broker is shut down. This is sometimes important as if the broker is
1:155461a:  * shutdown before Camel there could be a loss of data due to inflight exchanges
1:155461a:  * not yet completed.
1:155461a:  * <p>
1:155461a:  * This hook can be added to ActiveMQ configuration ({@code activemq.xml}) as in
1:155461a:  * the following example:
1:155461a:  * <p>
1:155461a:  * <code>
1:155461a:  * &lt;bean xmlns=&quot;http://www.springframework.org/schema/beans&quot; class=&quot;org.apache.activemq.camel.CamelShutdownHook&quot; /&gt;
1:155461a:  * </code>
1:155461a:  */
1:155461a: public final class CamelShutdownHook implements Runnable, CamelContextAware {
1:155461a: 
1:155461a:     private static final Logger LOG = LoggerFactory.getLogger(CamelShutdownHook.class);
1:155461a: 
1:155461a:     private CamelContext camelContext;
1:155461a: 
1:155461a:     @Autowired
1:155461a:     public CamelShutdownHook(final BrokerService brokerService) {
1:155461a:         brokerService.addPreShutdownHook(this);
1:155461a:     }
1:155461a: 
1:155461a:     @Override
1:155461a:     public CamelContext getCamelContext() {
1:155461a:         return camelContext;
1:155461a:     }
1:155461a: 
1:155461a:     @Override
1:155461a:     public void run() {
1:155461a:         if (camelContext != null) {
1:155461a:             try {
1:155461a:                 camelContext.stop();
1:155461a:             } catch (final Exception e) {
1:155461a:                 LOG.warn("Unable to stop CamelContext", e);
1:155461a:             }
1:155461a:         } else {
1:155461a:             LOG.warn("Unable to stop CamelContext, no CamelContext was set!");
1:155461a:         }
1:155461a:     }
1:155461a: 
1:155461a:     @Override
1:155461a:     public void setCamelContext(final CamelContext camelContext) {
1:155461a:         this.camelContext = camelContext;
1:155461a:     }
1:155461a: 
1:155461a: }
============================================================================
author:Zoran Regvart
-------------------------------------------------------------------------------
commit:155461a
/////////////////////////////////////////////////////////////////////////
1: /**
1:  * Licensed to the Apache Software Foundation (ASF) under one or more
1:  * contributor license agreements.  See the NOTICE file distributed with
1:  * this work for additional information regarding copyright ownership.
1:  * The ASF licenses this file to You under the Apache License, Version 2.0
1:  * (the "License"); you may not use this file except in compliance with
1:  * the License.  You may obtain a copy of the License at
1:  *
1:  *      http://www.apache.org/licenses/LICENSE-2.0
1:  *
1:  * Unless required by applicable law or agreed to in writing, software
1:  * distributed under the License is distributed on an "AS IS" BASIS,
1:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:  * See the License for the specific language governing permissions and
1:  * limitations under the License.
1:  */
1: package org.apache.activemq.camel;
1: 
1: import org.apache.activemq.broker.BrokerService;
1: import org.apache.camel.CamelContext;
1: import org.apache.camel.CamelContextAware;
1: import org.slf4j.Logger;
1: import org.slf4j.LoggerFactory;
1: import org.springframework.beans.factory.annotation.Autowired;
1: 
1: /**
1:  * A shutdown hook that can be used to shutdown {@link CamelContext} before the
1:  * ActiveMQ broker is shut down. This is sometimes important as if the broker is
1:  * shutdown before Camel there could be a loss of data due to inflight exchanges
1:  * not yet completed.
1:  * <p>
1:  * This hook can be added to ActiveMQ configuration ({@code activemq.xml}) as in
1:  * the following example:
1:  * <p>
1:  * <code>
1:  * &lt;bean xmlns=&quot;http://www.springframework.org/schema/beans&quot; class=&quot;org.apache.activemq.camel.CamelShutdownHook&quot; /&gt;
1:  * </code>
1:  */
1: public final class CamelShutdownHook implements Runnable, CamelContextAware {
1: 
1:     private static final Logger LOG = LoggerFactory.getLogger(CamelShutdownHook.class);
1: 
1:     private CamelContext camelContext;
1: 
1:     @Autowired
1:     public CamelShutdownHook(final BrokerService brokerService) {
1:         brokerService.addPreShutdownHook(this);
1:     }
1: 
1:     @Override
1:     public CamelContext getCamelContext() {
1:         return camelContext;
1:     }
1: 
1:     @Override
1:     public void run() {
1:         if (camelContext != null) {
1:             try {
1:                 camelContext.stop();
1:             } catch (final Exception e) {
1:                 LOG.warn("Unable to stop CamelContext", e);
1:             }
1:         } else {
1:             LOG.warn("Unable to stop CamelContext, no CamelContext was set!");
1:         }
1:     }
1: 
1:     @Override
1:     public void setCamelContext(final CamelContext camelContext) {
1:         this.camelContext = camelContext;
1:     }
1: 
1: }
============================================================================