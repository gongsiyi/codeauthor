1:717bca1: /**
1:717bca1:  * Licensed to the Apache Software Foundation (ASF) under one or more
1:717bca1:  * contributor license agreements.  See the NOTICE file distributed with
1:717bca1:  * this work for additional information regarding copyright ownership.
1:717bca1:  * The ASF licenses this file to You under the Apache License, Version 2.0
1:717bca1:  * (the "License"); you may not use this file except in compliance with
1:717bca1:  * the License.  You may obtain a copy of the License at
1:717bca1:  *
1:717bca1:  *      http://www.apache.org/licenses/LICENSE-2.0
1:717bca1:  *
1:717bca1:  * Unless required by applicable law or agreed to in writing, software
1:717bca1:  * distributed under the License is distributed on an "AS IS" BASIS,
1:717bca1:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:717bca1:  * See the License for the specific language governing permissions and
1:717bca1:  * limitations under the License.
1:717bca1:  */
1:717bca1: package org.apache.activemq.store.kahadb;
1:717bca1: 
1:717bca1: import java.util.Vector;
1:717bca1: import java.util.concurrent.ExecutorService;
1:717bca1: import java.util.concurrent.Executors;
1:717bca1: import java.util.concurrent.TimeUnit;
1:717bca1: import org.apache.activemq.command.ActiveMQDestination;
1:717bca1: import org.apache.activemq.command.ActiveMQMessage;
1:717bca1: import org.apache.activemq.command.ActiveMQQueue;
1:717bca1: import org.apache.activemq.command.Message;
1:717bca1: import org.apache.activemq.command.MessageAck;
1:717bca1: import org.apache.activemq.command.MessageId;
1:717bca1: import org.apache.activemq.command.ProducerId;
1:717bca1: import org.junit.After;
1:717bca1: import org.junit.Before;
1:717bca1: import org.junit.Test;
1:717bca1: 
1:717bca1: 
1:717bca1: import static org.junit.Assert.assertTrue;
1:717bca1: 
1:717bca1: public class KahaDBStoreTest {
1:717bca1: 
1:717bca1:     KahaDBStore.KahaDBMessageStore underTest;
1:717bca1:     KahaDBStore store;
1:717bca1:     ActiveMQMessage message;
1:717bca1:     ProducerId producerId = new ProducerId("1.1.1");
1:717bca1:     private static final int MESSAGE_COUNT = 2000;
1:717bca1:     private Vector<Throwable> exceptions = new Vector<Throwable>();
1:717bca1: 
1:717bca1:     @Before
1:717bca1:     public void initStore() throws Exception {
1:717bca1:         ActiveMQDestination destination = new ActiveMQQueue("Test");
1:717bca1:         store = new KahaDBStore();
1:717bca1:         store.setMaxAsyncJobs(100);
1:717bca1:         store.setDeleteAllMessages(true);
1:717bca1:         store.start();
1:717bca1:         underTest = store.new KahaDBMessageStore(destination);
1:717bca1:         underTest.start();
1:717bca1:         message = new ActiveMQMessage();
1:717bca1:         message.setDestination(destination);
1:717bca1:     }
1:717bca1: 
1:717bca1:     @After
1:717bca1:     public void destroyStore() throws Exception {
1:717bca1:         if (store != null) {
1:717bca1:             store.stop();
1:717bca1:         }
1:717bca1:     }
1:717bca1: 
1:717bca1:     @Test
1:717bca1:     public void testConcurrentStoreAndDispatchQueue() throws Exception {
1:717bca1: 
1:717bca1:         ExecutorService executor = Executors.newCachedThreadPool();
1:717bca1:         for (int i=0; i<MESSAGE_COUNT; i++) {
1:717bca1:             final int id = ++i;
1:717bca1:             executor.execute(new Runnable() {
1:717bca1:                 public void run() {
1:717bca1:                     try {
1:717bca1:                         Message msg = message.copy();
1:717bca1:                         msg.setMessageId(new MessageId(producerId, id));
1:717bca1:                         underTest.asyncAddQueueMessage(null, msg);
1:717bca1:                     } catch (Exception e) {
1:717bca1:                         exceptions.add(e);
1:717bca1:                     }
1:717bca1:                 }
1:717bca1:             });
1:717bca1:         }
1:717bca1: 
1:717bca1:         ExecutorService executor2 = Executors.newCachedThreadPool();
1:717bca1:         for (int i=0; i<MESSAGE_COUNT; i++) {
1:717bca1:             final int id = ++i;
1:717bca1:             executor2.execute(new Runnable() {
1:717bca1:                 public void run() {
1:717bca1:                     try {
1:717bca1:                         MessageAck ack = new MessageAck();
1:717bca1:                         ack.setLastMessageId(new MessageId(producerId, id));
1:717bca1:                         underTest.removeAsyncMessage(null, ack);
1:717bca1:                     } catch (Exception e) {
1:717bca1:                         exceptions.add(e);
1:717bca1:                     }
1:717bca1:                 }
1:717bca1:             });
1:717bca1:         }
1:717bca1: 
1:717bca1:         executor.shutdown();
1:717bca1:         executor.awaitTermination(60, TimeUnit.SECONDS);
1:717bca1: 
1:717bca1:         executor2.shutdown();
1:717bca1:         executor2.awaitTermination(60, TimeUnit.SECONDS);
1:717bca1: 
1:717bca1:         assertTrue("no exceptions " + exceptions, exceptions.isEmpty());
1:717bca1:     }
1:717bca1: }
============================================================================
author:Timothy A. Bish
-------------------------------------------------------------------------------
commit:ef24cc9
author:Gary Tully
-------------------------------------------------------------------------------
commit:717bca1
/////////////////////////////////////////////////////////////////////////
1: /**
1:  * Licensed to the Apache Software Foundation (ASF) under one or more
1:  * contributor license agreements.  See the NOTICE file distributed with
1:  * this work for additional information regarding copyright ownership.
1:  * The ASF licenses this file to You under the Apache License, Version 2.0
1:  * (the "License"); you may not use this file except in compliance with
1:  * the License.  You may obtain a copy of the License at
1:  *
1:  *      http://www.apache.org/licenses/LICENSE-2.0
1:  *
1:  * Unless required by applicable law or agreed to in writing, software
1:  * distributed under the License is distributed on an "AS IS" BASIS,
1:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:  * See the License for the specific language governing permissions and
1:  * limitations under the License.
1:  */
1: package org.apache.activemq.store.kahadb;
1: 
1: import java.util.Vector;
1: import java.util.concurrent.ExecutorService;
1: import java.util.concurrent.Executors;
1: import java.util.concurrent.TimeUnit;
1: import org.apache.activemq.command.ActiveMQDestination;
1: import org.apache.activemq.command.ActiveMQMessage;
1: import org.apache.activemq.command.ActiveMQQueue;
1: import org.apache.activemq.command.Message;
1: import org.apache.activemq.command.MessageAck;
1: import org.apache.activemq.command.MessageId;
1: import org.apache.activemq.command.ProducerId;
1: import org.junit.After;
1: import org.junit.Before;
1: import org.junit.Test;
1: 
1: 
1: import static org.junit.Assert.assertTrue;
1: 
1: public class KahaDBStoreTest {
1: 
1:     KahaDBStore.KahaDBMessageStore underTest;
1:     KahaDBStore store;
1:     ActiveMQMessage message;
1:     ProducerId producerId = new ProducerId("1.1.1");
1:     private static final int MESSAGE_COUNT = 2000;
1:     private Vector<Throwable> exceptions = new Vector<Throwable>();
1: 
1:     @Before
1:     public void initStore() throws Exception {
1:         ActiveMQDestination destination = new ActiveMQQueue("Test");
1:         store = new KahaDBStore();
1:         store.setMaxAsyncJobs(100);
1:         store.setDeleteAllMessages(true);
1:         store.start();
1:         underTest = store.new KahaDBMessageStore(destination);
1:         underTest.start();
1:         message = new ActiveMQMessage();
1:         message.setDestination(destination);
1:     }
1: 
1:     @After
1:     public void destroyStore() throws Exception {
1:         if (store != null) {
1:             store.stop();
1:         }
1:     }
1: 
1:     @Test
1:     public void testConcurrentStoreAndDispatchQueue() throws Exception {
1: 
1:         ExecutorService executor = Executors.newCachedThreadPool();
1:         for (int i=0; i<MESSAGE_COUNT; i++) {
1:             final int id = ++i;
1:             executor.execute(new Runnable() {
1:                 public void run() {
1:                     try {
1:                         Message msg = message.copy();
1:                         msg.setMessageId(new MessageId(producerId, id));
1:                         underTest.asyncAddQueueMessage(null, msg);
1:                     } catch (Exception e) {
1:                         exceptions.add(e);
1:                     }
1:                 }
1:             });
1:         }
1: 
1:         ExecutorService executor2 = Executors.newCachedThreadPool();
1:         for (int i=0; i<MESSAGE_COUNT; i++) {
1:             final int id = ++i;
1:             executor2.execute(new Runnable() {
1:                 public void run() {
1:                     try {
1:                         MessageAck ack = new MessageAck();
1:                         ack.setLastMessageId(new MessageId(producerId, id));
1:                         underTest.removeAsyncMessage(null, ack);
1:                     } catch (Exception e) {
1:                         exceptions.add(e);
1:                     }
1:                 }
1:             });
1:         }
1: 
1:         executor.shutdown();
1:         executor.awaitTermination(60, TimeUnit.SECONDS);
1: 
1:         executor2.shutdown();
1:         executor2.awaitTermination(60, TimeUnit.SECONDS);
1: 
1:         assertTrue("no exceptions " + exceptions, exceptions.isEmpty());
1:     }
1: }
============================================================================