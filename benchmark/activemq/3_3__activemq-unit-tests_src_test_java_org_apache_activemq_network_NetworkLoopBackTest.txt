1:78bedd6: /**
1:78bedd6:  * Licensed to the Apache Software Foundation (ASF) under one or more
1:78bedd6:  * contributor license agreements.  See the NOTICE file distributed with
1:78bedd6:  * this work for additional information regarding copyright ownership.
1:78bedd6:  * The ASF licenses this file to You under the Apache License, Version 2.0
1:78bedd6:  * (the "License"); you may not use this file except in compliance with
1:78bedd6:  * the License.  You may obtain a copy of the License at
1:78bedd6:  *
1:78bedd6:  *      http://www.apache.org/licenses/LICENSE-2.0
1:78bedd6:  *
1:78bedd6:  * Unless required by applicable law or agreed to in writing, software
1:78bedd6:  * distributed under the License is distributed on an "AS IS" BASIS,
1:78bedd6:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:78bedd6:  * See the License for the specific language governing permissions and
1:78bedd6:  * limitations under the License.
1:78bedd6:  */
1:78bedd6: package org.apache.activemq.network;
2:78bedd6: 
1:1b38caa: import static org.junit.Assert.assertEquals;
1:1b38caa: import static org.junit.Assert.assertTrue;
1:78bedd6: 
1:78bedd6: import org.apache.activemq.broker.BrokerService;
1:78bedd6: import org.apache.activemq.broker.TransportConnector;
1:1b38caa: import org.apache.activemq.util.Wait;
1:1b38caa: import org.junit.Test;
1:78bedd6: 
1:78bedd6: public class NetworkLoopBackTest {
1:78bedd6:     @Test
1:78bedd6:     public void testLoopbackOnDifferentUrlScheme() throws Exception {
1:78bedd6:         final BrokerService brokerServce = new BrokerService();
1:78bedd6:         brokerServce.setPersistent(false);
1:78bedd6: 
1:78bedd6:         TransportConnector transportConnector = brokerServce.addConnector("nio://0.0.0.0:0");
1:78bedd6:         // connection filter is bypassed when scheme is different
1:78bedd6:         final NetworkConnector networkConnector = brokerServce.addNetworkConnector("static:(tcp://"
1:78bedd6:                 + transportConnector.getConnectUri().getHost() + ":" +  transportConnector.getConnectUri().getPort() + ")");
1:78bedd6: 
1:78bedd6:         brokerServce.start();
1:78bedd6:         brokerServce.waitUntilStarted();
1:78bedd6: 
1:78bedd6:         try {
1:78bedd6:             Wait.waitFor(new Wait.Condition() {
1:78bedd6:                 @Override
1:78bedd6:                 public boolean isSatisified() throws Exception {
1:78bedd6:                     return 1 == networkConnector.bridges.size();
1:78bedd6:                 }
1:78bedd6:             });
1:78bedd6: 
1:9ef4259:             final DemandForwardingBridgeSupport loopbackBridge = (DemandForwardingBridgeSupport) networkConnector.bridges.values().iterator().next();
1:78bedd6:             assertTrue("nc started", networkConnector.isStarted());
1:78bedd6: 
1:78bedd6:             assertTrue("It should get disposed", Wait.waitFor(new Wait.Condition() {
1:78bedd6:                 @Override
1:78bedd6:                 public boolean isSatisified() throws Exception {
1:78bedd6:                     return loopbackBridge.getRemoteBroker().isDisposed();
1:78bedd6:                 }
1:78bedd6:             }));
1:78bedd6: 
1:78bedd6:             assertEquals("No peer brokers", 0, brokerServce.getBroker().getPeerBrokerInfos().length);
1:78bedd6: 
1:78bedd6:         } finally {
1:78bedd6:             brokerServce.stop();
1:78bedd6:         }
1:78bedd6:     }
1:78bedd6: }
============================================================================
author:Timothy Bish
-------------------------------------------------------------------------------
commit:9ef4259
/////////////////////////////////////////////////////////////////////////
1:             final DemandForwardingBridgeSupport loopbackBridge = (DemandForwardingBridgeSupport) networkConnector.bridges.values().iterator().next();
author:Timothy A. Bish
-------------------------------------------------------------------------------
commit:1b38caa
/////////////////////////////////////////////////////////////////////////
1: import static org.junit.Assert.assertEquals;
1: import static org.junit.Assert.assertTrue;
1: import org.apache.activemq.util.Wait;
1: import org.junit.Test;
author:Gary Tully
-------------------------------------------------------------------------------
commit:78bedd6
/////////////////////////////////////////////////////////////////////////
1: /**
1:  * Licensed to the Apache Software Foundation (ASF) under one or more
1:  * contributor license agreements.  See the NOTICE file distributed with
1:  * this work for additional information regarding copyright ownership.
1:  * The ASF licenses this file to You under the Apache License, Version 2.0
1:  * (the "License"); you may not use this file except in compliance with
1:  * the License.  You may obtain a copy of the License at
1:  *
1:  *      http://www.apache.org/licenses/LICENSE-2.0
1:  *
1:  * Unless required by applicable law or agreed to in writing, software
1:  * distributed under the License is distributed on an "AS IS" BASIS,
1:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:  * See the License for the specific language governing permissions and
1:  * limitations under the License.
1:  */
1: package org.apache.activemq.network;
1: 
0: import org.apache.activemq.util.Wait;
0: import org.junit.Test;
1: 
1: import org.apache.activemq.broker.BrokerService;
1: import org.apache.activemq.broker.TransportConnector;
1: 
0: import static junit.framework.Assert.assertEquals;
0: import static junit.framework.Assert.assertTrue;
1: 
1: public class NetworkLoopBackTest {
1:     @Test
1:     public void testLoopbackOnDifferentUrlScheme() throws Exception {
1:         final BrokerService brokerServce = new BrokerService();
1:         brokerServce.setPersistent(false);
1: 
1:         TransportConnector transportConnector = brokerServce.addConnector("nio://0.0.0.0:0");
1:         // connection filter is bypassed when scheme is different
1:         final NetworkConnector networkConnector = brokerServce.addNetworkConnector("static:(tcp://"
1:                 + transportConnector.getConnectUri().getHost() + ":" +  transportConnector.getConnectUri().getPort() + ")");
1: 
1:         brokerServce.start();
1:         brokerServce.waitUntilStarted();
1: 
1:         try {
1:             Wait.waitFor(new Wait.Condition() {
1:                 @Override
1:                 public boolean isSatisified() throws Exception {
1:                     return 1 == networkConnector.bridges.size();
1:                 }
1:             });
1: 
0:             final DemandForwardingBridgeSupport loopbackBridge = (DemandForwardingBridgeSupport) networkConnector.bridges.elements().nextElement();
1:             assertTrue("nc started", networkConnector.isStarted());
1: 
1:             assertTrue("It should get disposed", Wait.waitFor(new Wait.Condition() {
1:                 @Override
1:                 public boolean isSatisified() throws Exception {
1:                     return loopbackBridge.getRemoteBroker().isDisposed();
1:                 }
1:             }));
1: 
1:             assertEquals("No peer brokers", 0, brokerServce.getBroker().getPeerBrokerInfos().length);
1: 
1:         } finally {
1:             brokerServce.stop();
1:         }
1:     }
1: }
============================================================================