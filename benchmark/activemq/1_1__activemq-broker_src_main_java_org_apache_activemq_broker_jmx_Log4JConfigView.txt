1:25f1fe8: /**
1:25f1fe8:  * Licensed to the Apache Software Foundation (ASF) under one or more
1:25f1fe8:  * contributor license agreements.  See the NOTICE file distributed with
1:25f1fe8:  * this work for additional information regarding copyright ownership.
1:25f1fe8:  * The ASF licenses this file to You under the Apache License, Version 2.0
1:25f1fe8:  * (the "License"); you may not use this file except in compliance with
1:25f1fe8:  * the License.  You may obtain a copy of the License at
1:25f1fe8:  *
1:25f1fe8:  *      http://www.apache.org/licenses/LICENSE-2.0
1:25f1fe8:  *
1:25f1fe8:  * Unless required by applicable law or agreed to in writing, software
1:25f1fe8:  * distributed under the License is distributed on an "AS IS" BASIS,
1:25f1fe8:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:25f1fe8:  * See the License for the specific language governing permissions and
1:25f1fe8:  * limitations under the License.
1:25f1fe8:  */
1:25f1fe8: package org.apache.activemq.broker.jmx;
1:25f1fe8: 
1:25f1fe8: import java.lang.reflect.InvocationTargetException;
1:25f1fe8: import java.lang.reflect.Method;
1:25f1fe8: import java.net.MalformedURLException;
1:25f1fe8: import java.net.URL;
1:25f1fe8: import java.util.ArrayList;
1:25f1fe8: import java.util.Collections;
1:25f1fe8: import java.util.Enumeration;
1:25f1fe8: import java.util.List;
1:25f1fe8: import java.util.Locale;
1:25f1fe8: 
1:25f1fe8: import org.slf4j.Logger;
1:25f1fe8: import org.slf4j.LoggerFactory;
1:25f1fe8: 
1:25f1fe8: public class Log4JConfigView implements Log4JConfigViewMBean {
1:25f1fe8: 
1:25f1fe8:     private static final Logger LOG = LoggerFactory.getLogger(Log4JConfigView.class);
1:25f1fe8: 
1:25f1fe8:     @Override
1:25f1fe8:     public String getRootLogLevel() throws Exception {
1:25f1fe8:         ClassLoader cl = getClassLoader();
1:25f1fe8: 
1:25f1fe8:         if (!isLog4JAvailable(cl)) {
1:25f1fe8:             return null;
1:25f1fe8:         }
1:25f1fe8: 
1:25f1fe8:         Class<?> loggerClass = getLoggerClass(cl);
1:25f1fe8:         if (loggerClass == null) {
1:25f1fe8:             return null;
1:25f1fe8:         }
1:25f1fe8: 
1:25f1fe8:         Method getRootLogger = loggerClass.getMethod("getRootLogger", new Class[]{});
1:25f1fe8:         Method getLevel = loggerClass.getMethod("getLevel", new Class[]{});
1:25f1fe8:         Object rootLogger = getRootLogger.invoke(null, (Object[])null);
1:25f1fe8: 
1:25f1fe8:         return getLevel.invoke(rootLogger, (Object[])null).toString();
1:25f1fe8:     }
1:25f1fe8: 
1:25f1fe8:     @Override
1:25f1fe8:     public void setRootLogLevel(String level) throws Exception {
1:25f1fe8:         ClassLoader cl = getClassLoader();
1:25f1fe8: 
1:25f1fe8:         if (!isLog4JAvailable(cl)) {
1:25f1fe8:             return;
1:25f1fe8:         }
1:25f1fe8: 
1:25f1fe8:         Class<?> loggerClass = getLoggerClass(cl);
1:25f1fe8:         Class<?> levelClass = getLevelClass(cl);
1:25f1fe8:         if (levelClass == null || loggerClass == null) {
1:25f1fe8:             return;
1:25f1fe8:         }
1:25f1fe8: 
1:25f1fe8:         String targetLevel = level.toUpperCase(Locale.US);
1:25f1fe8:         Method getRootLogger = loggerClass.getMethod("getRootLogger", new Class[]{});
1:25f1fe8:         Method setLevel = loggerClass.getMethod("setLevel", levelClass);
1:25f1fe8:         Object rootLogger = getRootLogger.invoke(null, (Object[])null);
1:25f1fe8:         Method toLevel = levelClass.getMethod("toLevel", String.class);
1:25f1fe8:         Object newLevel = toLevel.invoke(null, targetLevel);
1:25f1fe8: 
1:25f1fe8:         // Check that the level conversion worked and that we got a level
1:25f1fe8:         // that matches what was asked for.  A bad level name will result
1:25f1fe8:         // in the lowest level value and we don't want to change unless we
1:25f1fe8:         // matched what the user asked for.
1:25f1fe8:         if (newLevel != null && newLevel.toString().equals(targetLevel)) {
1:25f1fe8:             LOG.debug("Set level {} for root logger.", level);
1:25f1fe8:             setLevel.invoke(rootLogger, newLevel);
1:25f1fe8:         }
1:25f1fe8:     }
1:25f1fe8: 
1:25f1fe8:     @Override
1:25f1fe8:     public List<String> getLoggers() throws Exception {
1:25f1fe8: 
1:25f1fe8:         ClassLoader cl = getClassLoader();
1:25f1fe8: 
1:25f1fe8:         if (!isLog4JAvailable(cl)) {
1:25f1fe8:             return Collections.emptyList();
1:25f1fe8:         }
1:25f1fe8: 
1:25f1fe8:         Class<?> logManagerClass = getLogManagerClass(cl);
1:25f1fe8:         Class<?> loggerClass = getLoggerClass(cl);
1:25f1fe8:         if (logManagerClass == null || loggerClass == null) {
1:25f1fe8:             return Collections.emptyList();
1:25f1fe8:         }
1:25f1fe8: 
1:25f1fe8:         Method getCurrentLoggers = logManagerClass.getMethod("getCurrentLoggers", new Class[]{});
1:25f1fe8:         Method getName = loggerClass.getMethod("getName", new Class[]{});
1:25f1fe8: 
1:25f1fe8:         List<String> list = new ArrayList<String>();
1:25f1fe8:         Enumeration<?> loggers = (Enumeration<?>)getCurrentLoggers.invoke(null, (Object[])null);
1:25f1fe8: 
1:25f1fe8:         while (loggers.hasMoreElements()) {
1:25f1fe8:             Object logger = loggers.nextElement();
1:25f1fe8:             if (logger != null) {
1:25f1fe8:                 list.add((String) getName.invoke(logger, (Object[])null));
1:25f1fe8:             }
1:25f1fe8:         }
1:25f1fe8: 
1:25f1fe8:         LOG.debug("Found {} loggers", list.size());
1:25f1fe8: 
1:25f1fe8:         return list;
1:25f1fe8:     }
1:25f1fe8: 
1:25f1fe8:     @Override
1:25f1fe8:     public String getLogLevel(String loggerName) throws Exception {
1:25f1fe8: 
1:25f1fe8:         ClassLoader cl = getClassLoader();
1:25f1fe8: 
1:25f1fe8:         if (!isLog4JAvailable(cl)) {
1:25f1fe8:             return null;
1:25f1fe8:         }
1:25f1fe8: 
1:25f1fe8:         Class<?> loggerClass = getLoggerClass(cl);
1:25f1fe8:         if (loggerClass == null) {
1:25f1fe8:             return null;
1:25f1fe8:         }
1:25f1fe8: 
1:25f1fe8:         Method getLogger = loggerClass.getMethod("getLogger", String.class);
1:25f1fe8:         String logLevel = null;
1:25f1fe8: 
1:25f1fe8:         if (loggerName != null && !loggerName.isEmpty()) {
1:25f1fe8:             Object logger = getLogger.invoke(null, loggerName);
1:25f1fe8:             if (logger != null) {
1:25f1fe8:                 LOG.debug("Found level {} for logger: {}", logLevel, loggerName);
1:25f1fe8:                 Method getLevel = loggerClass.getMethod("getLevel", new Class[]{});
1:25f1fe8:                 Object level = getLevel.invoke(logger, (Object[])null);
1:25f1fe8:                 if (level != null) {
1:25f1fe8:                     logLevel = level.toString();
1:25f1fe8:                 } else {
1:25f1fe8:                     Method getRootLogger = loggerClass.getMethod("getRootLogger", new Class[]{});
1:25f1fe8:                     Object rootLogger = getRootLogger.invoke(null, (Object[])null);
1:25f1fe8:                     logLevel = getLevel.invoke(rootLogger, (Object[])null).toString();
1:25f1fe8:                 }
1:25f1fe8:             }
1:25f1fe8:         } else {
1:25f1fe8:             throw new IllegalArgumentException("Logger names cannot be null or empty strings");
1:25f1fe8:         }
1:25f1fe8: 
1:25f1fe8:         return logLevel;
1:25f1fe8:     }
1:25f1fe8: 
1:25f1fe8:     @Override
1:25f1fe8:     public void setLogLevel(String loggerName, String level) throws Exception {
1:25f1fe8: 
1:25f1fe8:         if (loggerName == null || loggerName.isEmpty()) {
1:25f1fe8:             throw new IllegalArgumentException("Logger names cannot be null or empty strings");
1:25f1fe8:         }
1:25f1fe8: 
1:25f1fe8:         if (level == null || level.isEmpty()) {
1:25f1fe8:             throw new IllegalArgumentException("Level name cannot be null or empty strings");
1:25f1fe8:         }
1:25f1fe8: 
1:25f1fe8:         ClassLoader cl = getClassLoader();
1:25f1fe8: 
1:25f1fe8:         if (!isLog4JAvailable(cl)) {
1:25f1fe8:             return;
1:25f1fe8:         }
1:25f1fe8: 
1:25f1fe8:         Class<?> loggerClass = getLoggerClass(cl);
1:25f1fe8:         Class<?> levelClass = getLevelClass(cl);
1:25f1fe8:         if (loggerClass == null || levelClass == null) {
1:25f1fe8:             return;
1:25f1fe8:         }
1:25f1fe8: 
1:25f1fe8:         String targetLevel = level.toUpperCase(Locale.US);
1:25f1fe8:         Method getLogger = loggerClass.getMethod("getLogger", String.class);
1:25f1fe8:         Method setLevel = loggerClass.getMethod("setLevel", levelClass);
1:25f1fe8:         Method toLevel = levelClass.getMethod("toLevel", String.class);
1:25f1fe8: 
1:25f1fe8:         Object logger = getLogger.invoke(null, loggerName);
1:25f1fe8:         if (logger != null) {
1:25f1fe8:             Object newLevel = toLevel.invoke(null, targetLevel);
1:25f1fe8: 
1:25f1fe8:             // Check that the level conversion worked and that we got a level
1:25f1fe8:             // that matches what was asked for.  A bad level name will result
1:25f1fe8:             // in the lowest level value and we don't want to change unless we
1:25f1fe8:             // matched what the user asked for.
1:25f1fe8:             if (newLevel != null && newLevel.toString().equals(targetLevel)) {
1:25f1fe8:                 LOG.debug("Set level {} for logger: {}", level, loggerName);
1:25f1fe8:                 setLevel.invoke(logger, newLevel);
1:25f1fe8:             }
1:25f1fe8:         }
1:25f1fe8:     }
1:25f1fe8: 
1:25f1fe8:     @Override
1:25f1fe8:     public void reloadLog4jProperties() throws Throwable {
1:25f1fe8:         doReloadLog4jProperties();
1:25f1fe8:     }
1:25f1fe8: 
1:25f1fe8:     //---------- Static Helper Methods ---------------------------------------//
1:25f1fe8: 
1:25f1fe8:     public static void doReloadLog4jProperties() throws Throwable {
1:25f1fe8:         try {
1:25f1fe8:             ClassLoader cl = Log4JConfigView.class.getClassLoader();
1:25f1fe8:             Class<?> logManagerClass = getLogManagerClass(cl);
1:25f1fe8:             if (logManagerClass == null) {
1:25f1fe8:                 LOG.debug("Could not locate log4j classes on classpath.");
1:25f1fe8:                 return;
1:25f1fe8:             }
1:25f1fe8: 
1:25f1fe8:             Method resetConfiguration = logManagerClass.getMethod("resetConfiguration", new Class[]{});
1:25f1fe8:             resetConfiguration.invoke(null, new Object[]{});
1:25f1fe8: 
1:25f1fe8:             String configurationOptionStr = System.getProperty("log4j.configuration");
1:25f1fe8:             URL log4jprops = null;
1:25f1fe8:             if (configurationOptionStr != null) {
1:25f1fe8:                 try {
1:25f1fe8:                     log4jprops = new URL(configurationOptionStr);
1:25f1fe8:                 } catch (MalformedURLException ex) {
1:25f1fe8:                     log4jprops = cl.getResource("log4j.properties");
1:25f1fe8:                 }
1:25f1fe8:             } else {
1:25f1fe8:                log4jprops = cl.getResource("log4j.properties");
1:25f1fe8:             }
1:25f1fe8: 
1:25f1fe8:             if (log4jprops != null) {
1:25f1fe8:                 Class<?> propertyConfiguratorClass = cl.loadClass("org.apache.log4j.PropertyConfigurator");
1:25f1fe8:                 Method configure = propertyConfiguratorClass.getMethod("configure", new Class[]{URL.class});
1:25f1fe8:                 configure.invoke(null, new Object[]{log4jprops});
1:25f1fe8:             }
1:25f1fe8:         } catch (InvocationTargetException e) {
1:25f1fe8:             throw e.getTargetException();
1:25f1fe8:         }
1:25f1fe8:     }
1:25f1fe8: 
1:25f1fe8:     public static boolean isLog4JAvailable() {
1:25f1fe8:         return isLog4JAvailable(getClassLoader());
1:25f1fe8:     }
1:25f1fe8: 
1:25f1fe8:     private static ClassLoader getClassLoader() {
1:25f1fe8:         return Log4JConfigView.class.getClassLoader();
1:25f1fe8:     }
1:25f1fe8: 
1:25f1fe8:     private static boolean isLog4JAvailable(ClassLoader cl) {
1:25f1fe8:         if (getLogManagerClass(cl) != null) {
1:25f1fe8:             return true;
1:25f1fe8:         }
1:25f1fe8: 
1:25f1fe8:         LOG.debug("Could not locate log4j classes on classpath.");
1:25f1fe8: 
1:25f1fe8:         return false;
1:25f1fe8:     }
1:25f1fe8: 
1:25f1fe8:     private static Class<?> getLogManagerClass(ClassLoader cl) {
1:25f1fe8:         Class<?> logManagerClass = null;
1:25f1fe8:         try {
1:25f1fe8:             logManagerClass = cl.loadClass("org.apache.log4j.LogManager");
1:25f1fe8:         } catch (ClassNotFoundException e) {
1:25f1fe8:         }
1:25f1fe8:         return logManagerClass;
1:25f1fe8:     }
1:25f1fe8: 
1:25f1fe8:     private static Class<?> getLoggerClass(ClassLoader cl) {
1:25f1fe8:         Class<?> loggerClass = null;
1:25f1fe8:         try {
1:25f1fe8:             loggerClass = cl.loadClass("org.apache.log4j.Logger");
1:25f1fe8:         } catch (ClassNotFoundException e) {
1:25f1fe8:         }
1:25f1fe8:         return loggerClass;
1:25f1fe8:     }
1:25f1fe8: 
1:25f1fe8:     private static Class<?> getLevelClass(ClassLoader cl) {
1:25f1fe8:         Class<?> levelClass = null;
1:25f1fe8:         try {
1:25f1fe8:             levelClass = cl.loadClass("org.apache.log4j.Level");
1:25f1fe8:         } catch (ClassNotFoundException e) {
1:25f1fe8:         }
1:25f1fe8:         return levelClass;
1:25f1fe8:     }
1:25f1fe8: }
============================================================================
author:Timothy Bish
-------------------------------------------------------------------------------
commit:25f1fe8
/////////////////////////////////////////////////////////////////////////
1: /**
1:  * Licensed to the Apache Software Foundation (ASF) under one or more
1:  * contributor license agreements.  See the NOTICE file distributed with
1:  * this work for additional information regarding copyright ownership.
1:  * The ASF licenses this file to You under the Apache License, Version 2.0
1:  * (the "License"); you may not use this file except in compliance with
1:  * the License.  You may obtain a copy of the License at
1:  *
1:  *      http://www.apache.org/licenses/LICENSE-2.0
1:  *
1:  * Unless required by applicable law or agreed to in writing, software
1:  * distributed under the License is distributed on an "AS IS" BASIS,
1:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:  * See the License for the specific language governing permissions and
1:  * limitations under the License.
1:  */
1: package org.apache.activemq.broker.jmx;
1: 
1: import java.lang.reflect.InvocationTargetException;
1: import java.lang.reflect.Method;
1: import java.net.MalformedURLException;
1: import java.net.URL;
1: import java.util.ArrayList;
1: import java.util.Collections;
1: import java.util.Enumeration;
1: import java.util.List;
1: import java.util.Locale;
1: 
1: import org.slf4j.Logger;
1: import org.slf4j.LoggerFactory;
1: 
1: public class Log4JConfigView implements Log4JConfigViewMBean {
1: 
1:     private static final Logger LOG = LoggerFactory.getLogger(Log4JConfigView.class);
1: 
1:     @Override
1:     public String getRootLogLevel() throws Exception {
1:         ClassLoader cl = getClassLoader();
1: 
1:         if (!isLog4JAvailable(cl)) {
1:             return null;
1:         }
1: 
1:         Class<?> loggerClass = getLoggerClass(cl);
1:         if (loggerClass == null) {
1:             return null;
1:         }
1: 
1:         Method getRootLogger = loggerClass.getMethod("getRootLogger", new Class[]{});
1:         Method getLevel = loggerClass.getMethod("getLevel", new Class[]{});
1:         Object rootLogger = getRootLogger.invoke(null, (Object[])null);
1: 
1:         return getLevel.invoke(rootLogger, (Object[])null).toString();
1:     }
1: 
1:     @Override
1:     public void setRootLogLevel(String level) throws Exception {
1:         ClassLoader cl = getClassLoader();
1: 
1:         if (!isLog4JAvailable(cl)) {
1:             return;
1:         }
1: 
1:         Class<?> loggerClass = getLoggerClass(cl);
1:         Class<?> levelClass = getLevelClass(cl);
1:         if (levelClass == null || loggerClass == null) {
1:             return;
1:         }
1: 
1:         String targetLevel = level.toUpperCase(Locale.US);
1:         Method getRootLogger = loggerClass.getMethod("getRootLogger", new Class[]{});
1:         Method setLevel = loggerClass.getMethod("setLevel", levelClass);
1:         Object rootLogger = getRootLogger.invoke(null, (Object[])null);
1:         Method toLevel = levelClass.getMethod("toLevel", String.class);
1:         Object newLevel = toLevel.invoke(null, targetLevel);
1: 
1:         // Check that the level conversion worked and that we got a level
1:         // that matches what was asked for.  A bad level name will result
1:         // in the lowest level value and we don't want to change unless we
1:         // matched what the user asked for.
1:         if (newLevel != null && newLevel.toString().equals(targetLevel)) {
1:             LOG.debug("Set level {} for root logger.", level);
1:             setLevel.invoke(rootLogger, newLevel);
1:         }
1:     }
1: 
1:     @Override
1:     public List<String> getLoggers() throws Exception {
1: 
1:         ClassLoader cl = getClassLoader();
1: 
1:         if (!isLog4JAvailable(cl)) {
1:             return Collections.emptyList();
1:         }
1: 
1:         Class<?> logManagerClass = getLogManagerClass(cl);
1:         Class<?> loggerClass = getLoggerClass(cl);
1:         if (logManagerClass == null || loggerClass == null) {
1:             return Collections.emptyList();
1:         }
1: 
1:         Method getCurrentLoggers = logManagerClass.getMethod("getCurrentLoggers", new Class[]{});
1:         Method getName = loggerClass.getMethod("getName", new Class[]{});
1: 
1:         List<String> list = new ArrayList<String>();
1:         Enumeration<?> loggers = (Enumeration<?>)getCurrentLoggers.invoke(null, (Object[])null);
1: 
1:         while (loggers.hasMoreElements()) {
1:             Object logger = loggers.nextElement();
1:             if (logger != null) {
1:                 list.add((String) getName.invoke(logger, (Object[])null));
1:             }
1:         }
1: 
1:         LOG.debug("Found {} loggers", list.size());
1: 
1:         return list;
1:     }
1: 
1:     @Override
1:     public String getLogLevel(String loggerName) throws Exception {
1: 
1:         ClassLoader cl = getClassLoader();
1: 
1:         if (!isLog4JAvailable(cl)) {
1:             return null;
1:         }
1: 
1:         Class<?> loggerClass = getLoggerClass(cl);
1:         if (loggerClass == null) {
1:             return null;
1:         }
1: 
1:         Method getLogger = loggerClass.getMethod("getLogger", String.class);
1:         String logLevel = null;
1: 
1:         if (loggerName != null && !loggerName.isEmpty()) {
1:             Object logger = getLogger.invoke(null, loggerName);
1:             if (logger != null) {
1:                 LOG.debug("Found level {} for logger: {}", logLevel, loggerName);
1:                 Method getLevel = loggerClass.getMethod("getLevel", new Class[]{});
1:                 Object level = getLevel.invoke(logger, (Object[])null);
1:                 if (level != null) {
1:                     logLevel = level.toString();
1:                 } else {
1:                     Method getRootLogger = loggerClass.getMethod("getRootLogger", new Class[]{});
1:                     Object rootLogger = getRootLogger.invoke(null, (Object[])null);
1:                     logLevel = getLevel.invoke(rootLogger, (Object[])null).toString();
1:                 }
1:             }
1:         } else {
1:             throw new IllegalArgumentException("Logger names cannot be null or empty strings");
1:         }
1: 
1:         return logLevel;
1:     }
1: 
1:     @Override
1:     public void setLogLevel(String loggerName, String level) throws Exception {
1: 
1:         if (loggerName == null || loggerName.isEmpty()) {
1:             throw new IllegalArgumentException("Logger names cannot be null or empty strings");
1:         }
1: 
1:         if (level == null || level.isEmpty()) {
1:             throw new IllegalArgumentException("Level name cannot be null or empty strings");
1:         }
1: 
1:         ClassLoader cl = getClassLoader();
1: 
1:         if (!isLog4JAvailable(cl)) {
1:             return;
1:         }
1: 
1:         Class<?> loggerClass = getLoggerClass(cl);
1:         Class<?> levelClass = getLevelClass(cl);
1:         if (loggerClass == null || levelClass == null) {
1:             return;
1:         }
1: 
1:         String targetLevel = level.toUpperCase(Locale.US);
1:         Method getLogger = loggerClass.getMethod("getLogger", String.class);
1:         Method setLevel = loggerClass.getMethod("setLevel", levelClass);
1:         Method toLevel = levelClass.getMethod("toLevel", String.class);
1: 
1:         Object logger = getLogger.invoke(null, loggerName);
1:         if (logger != null) {
1:             Object newLevel = toLevel.invoke(null, targetLevel);
1: 
1:             // Check that the level conversion worked and that we got a level
1:             // that matches what was asked for.  A bad level name will result
1:             // in the lowest level value and we don't want to change unless we
1:             // matched what the user asked for.
1:             if (newLevel != null && newLevel.toString().equals(targetLevel)) {
1:                 LOG.debug("Set level {} for logger: {}", level, loggerName);
1:                 setLevel.invoke(logger, newLevel);
1:             }
1:         }
1:     }
1: 
1:     @Override
1:     public void reloadLog4jProperties() throws Throwable {
1:         doReloadLog4jProperties();
1:     }
1: 
1:     //---------- Static Helper Methods ---------------------------------------//
1: 
1:     public static void doReloadLog4jProperties() throws Throwable {
1:         try {
1:             ClassLoader cl = Log4JConfigView.class.getClassLoader();
1:             Class<?> logManagerClass = getLogManagerClass(cl);
1:             if (logManagerClass == null) {
1:                 LOG.debug("Could not locate log4j classes on classpath.");
1:                 return;
1:             }
1: 
1:             Method resetConfiguration = logManagerClass.getMethod("resetConfiguration", new Class[]{});
1:             resetConfiguration.invoke(null, new Object[]{});
1: 
1:             String configurationOptionStr = System.getProperty("log4j.configuration");
1:             URL log4jprops = null;
1:             if (configurationOptionStr != null) {
1:                 try {
1:                     log4jprops = new URL(configurationOptionStr);
1:                 } catch (MalformedURLException ex) {
1:                     log4jprops = cl.getResource("log4j.properties");
1:                 }
1:             } else {
1:                log4jprops = cl.getResource("log4j.properties");
1:             }
1: 
1:             if (log4jprops != null) {
1:                 Class<?> propertyConfiguratorClass = cl.loadClass("org.apache.log4j.PropertyConfigurator");
1:                 Method configure = propertyConfiguratorClass.getMethod("configure", new Class[]{URL.class});
1:                 configure.invoke(null, new Object[]{log4jprops});
1:             }
1:         } catch (InvocationTargetException e) {
1:             throw e.getTargetException();
1:         }
1:     }
1: 
1:     public static boolean isLog4JAvailable() {
1:         return isLog4JAvailable(getClassLoader());
1:     }
1: 
1:     private static ClassLoader getClassLoader() {
1:         return Log4JConfigView.class.getClassLoader();
1:     }
1: 
1:     private static boolean isLog4JAvailable(ClassLoader cl) {
1:         if (getLogManagerClass(cl) != null) {
1:             return true;
1:         }
1: 
1:         LOG.debug("Could not locate log4j classes on classpath.");
1: 
1:         return false;
1:     }
1: 
1:     private static Class<?> getLogManagerClass(ClassLoader cl) {
1:         Class<?> logManagerClass = null;
1:         try {
1:             logManagerClass = cl.loadClass("org.apache.log4j.LogManager");
1:         } catch (ClassNotFoundException e) {
1:         }
1:         return logManagerClass;
1:     }
1: 
1:     private static Class<?> getLoggerClass(ClassLoader cl) {
1:         Class<?> loggerClass = null;
1:         try {
1:             loggerClass = cl.loadClass("org.apache.log4j.Logger");
1:         } catch (ClassNotFoundException e) {
1:         }
1:         return loggerClass;
1:     }
1: 
1:     private static Class<?> getLevelClass(ClassLoader cl) {
1:         Class<?> levelClass = null;
1:         try {
1:             levelClass = cl.loadClass("org.apache.log4j.Level");
1:         } catch (ClassNotFoundException e) {
1:         }
1:         return levelClass;
1:     }
1: }
============================================================================