1:272fb2b: /**
1:272fb2b:  * Licensed to the Apache Software Foundation (ASF) under one or more
1:272fb2b:  * contributor license agreements.  See the NOTICE file distributed with
1:272fb2b:  * this work for additional information regarding copyright ownership.
1:272fb2b:  * The ASF licenses this file to You under the Apache License, Version 2.0
1:272fb2b:  * (the "License"); you may not use this file except in compliance with
1:272fb2b:  * the License.  You may obtain a copy of the License at
1:272fb2b:  *
1:272fb2b:  *      http://www.apache.org/licenses/LICENSE-2.0
1:272fb2b:  *
1:272fb2b:  * Unless required by applicable law or agreed to in writing, software
1:272fb2b:  * distributed under the License is distributed on an "AS IS" BASIS,
1:272fb2b:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:272fb2b:  * See the License for the specific language governing permissions and
1:272fb2b:  * limitations under the License.
1:272fb2b:  */
1:272fb2b: package org.apache.activemq.transport.amqp.client;
1:272fb2b: 
1:272fb2b: import org.apache.qpid.proton.amqp.Binary;
1:272fb2b: 
1:272fb2b: /**
1:272fb2b:  * Wrapper For Transaction state in identification
1:272fb2b:  */
1:272fb2b: public class AmqpTransactionId {
1:272fb2b: 
1:272fb2b:     public static final int DECLARE_MARKER = 1;
1:272fb2b:     public static final int ROLLBACK_MARKER = 2;
1:272fb2b:     public static final int COMMIT_MARKER = 3;
1:272fb2b: 
1:272fb2b:     private final String txId;
1:272fb2b:     private Binary remoteTxId;
1:272fb2b:     private int state = DECLARE_MARKER;
1:272fb2b: 
1:272fb2b:     public AmqpTransactionId(String txId) {
1:272fb2b:         this.txId = txId;
1:272fb2b:     }
1:272fb2b: 
1:272fb2b:     public boolean isDeclare() {
1:272fb2b:         return state == DECLARE_MARKER;
1:272fb2b:     }
1:272fb2b: 
1:272fb2b:     public boolean isCommit() {
1:272fb2b:         return state == COMMIT_MARKER;
1:272fb2b:     }
1:272fb2b: 
1:272fb2b:     public boolean isRollback() {
1:272fb2b:         return state == ROLLBACK_MARKER;
1:272fb2b:     }
1:272fb2b: 
1:272fb2b:     public void setState(int state) {
1:272fb2b:         this.state = state;
1:272fb2b:     }
1:272fb2b: 
1:272fb2b:     public String getTxId() {
1:272fb2b:         return txId;
1:272fb2b:     }
1:272fb2b: 
1:272fb2b:     public Binary getRemoteTxId() {
1:272fb2b:         return remoteTxId;
1:272fb2b:     }
1:272fb2b: 
1:272fb2b:     public void setRemoteTxId(Binary remoteTxId) {
1:272fb2b:         this.remoteTxId = remoteTxId;
1:272fb2b:     }
1:272fb2b: 
1:272fb2b:     @Override
1:272fb2b:     public int hashCode() {
1:272fb2b:         final int prime = 31;
1:272fb2b:         int result = 1;
1:272fb2b:         result = prime * result + ((txId == null) ? 0 : txId.hashCode());
1:272fb2b:         return result;
1:272fb2b:     }
1:272fb2b: 
1:272fb2b:     @Override
1:272fb2b:     public boolean equals(Object obj) {
1:272fb2b:         if (this == obj) {
1:272fb2b:             return true;
1:272fb2b:         }
1:272fb2b:         if (obj == null) {
1:272fb2b:             return false;
1:272fb2b:         }
1:272fb2b:         if (getClass() != obj.getClass()) {
1:272fb2b:             return false;
1:272fb2b:         }
1:272fb2b: 
1:272fb2b:         AmqpTransactionId other = (AmqpTransactionId) obj;
1:272fb2b:         if (txId == null) {
1:272fb2b:             if (other.txId != null) {
1:272fb2b:                 return false;
1:272fb2b:             }
1:272fb2b:         } else if (!txId.equals(other.txId)) {
1:272fb2b:             return false;
1:272fb2b:         }
1:272fb2b: 
1:272fb2b:         return true;
1:272fb2b:     }
1:272fb2b: }
============================================================================
author:Timothy Bish
-------------------------------------------------------------------------------
commit:272fb2b
/////////////////////////////////////////////////////////////////////////
1: /**
1:  * Licensed to the Apache Software Foundation (ASF) under one or more
1:  * contributor license agreements.  See the NOTICE file distributed with
1:  * this work for additional information regarding copyright ownership.
1:  * The ASF licenses this file to You under the Apache License, Version 2.0
1:  * (the "License"); you may not use this file except in compliance with
1:  * the License.  You may obtain a copy of the License at
1:  *
1:  *      http://www.apache.org/licenses/LICENSE-2.0
1:  *
1:  * Unless required by applicable law or agreed to in writing, software
1:  * distributed under the License is distributed on an "AS IS" BASIS,
1:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:  * See the License for the specific language governing permissions and
1:  * limitations under the License.
1:  */
1: package org.apache.activemq.transport.amqp.client;
1: 
1: import org.apache.qpid.proton.amqp.Binary;
1: 
1: /**
1:  * Wrapper For Transaction state in identification
1:  */
1: public class AmqpTransactionId {
1: 
1:     public static final int DECLARE_MARKER = 1;
1:     public static final int ROLLBACK_MARKER = 2;
1:     public static final int COMMIT_MARKER = 3;
1: 
1:     private final String txId;
1:     private Binary remoteTxId;
1:     private int state = DECLARE_MARKER;
1: 
1:     public AmqpTransactionId(String txId) {
1:         this.txId = txId;
1:     }
1: 
1:     public boolean isDeclare() {
1:         return state == DECLARE_MARKER;
1:     }
1: 
1:     public boolean isCommit() {
1:         return state == COMMIT_MARKER;
1:     }
1: 
1:     public boolean isRollback() {
1:         return state == ROLLBACK_MARKER;
1:     }
1: 
1:     public void setState(int state) {
1:         this.state = state;
1:     }
1: 
1:     public String getTxId() {
1:         return txId;
1:     }
1: 
1:     public Binary getRemoteTxId() {
1:         return remoteTxId;
1:     }
1: 
1:     public void setRemoteTxId(Binary remoteTxId) {
1:         this.remoteTxId = remoteTxId;
1:     }
1: 
1:     @Override
1:     public int hashCode() {
1:         final int prime = 31;
1:         int result = 1;
1:         result = prime * result + ((txId == null) ? 0 : txId.hashCode());
1:         return result;
1:     }
1: 
1:     @Override
1:     public boolean equals(Object obj) {
1:         if (this == obj) {
1:             return true;
1:         }
1:         if (obj == null) {
1:             return false;
1:         }
1:         if (getClass() != obj.getClass()) {
1:             return false;
1:         }
1: 
1:         AmqpTransactionId other = (AmqpTransactionId) obj;
1:         if (txId == null) {
1:             if (other.txId != null) {
1:                 return false;
1:             }
1:         } else if (!txId.equals(other.txId)) {
1:             return false;
1:         }
1: 
1:         return true;
1:     }
1: }
============================================================================