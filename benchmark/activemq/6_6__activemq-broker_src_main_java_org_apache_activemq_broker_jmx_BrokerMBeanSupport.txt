1:63a660a: /**
1:63a660a:  * Licensed to the Apache Software Foundation (ASF) under one or more
1:63a660a:  * contributor license agreements.  See the NOTICE file distributed with
1:63a660a:  * this work for additional information regarding copyright ownership.
1:63a660a:  * The ASF licenses this file to You under the Apache License, Version 2.0
1:63a660a:  * (the "License"); you may not use this file except in compliance with
1:63a660a:  * the License.  You may obtain a copy of the License at
1:63a660a:  *
1:63a660a:  *      http://www.apache.org/licenses/LICENSE-2.0
1:63a660a:  *
1:63a660a:  * Unless required by applicable law or agreed to in writing, software
1:63a660a:  * distributed under the License is distributed on an "AS IS" BASIS,
1:63a660a:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:63a660a:  * See the License for the specific language governing permissions and
1:63a660a:  * limitations under the License.
1:63a660a:  */
1:63a660a: package org.apache.activemq.broker.jmx;
1:63a660a: 
1:63a660a: import java.util.Hashtable;
1:63a660a: 
1:63a660a: import javax.management.MalformedObjectNameException;
1:63a660a: import javax.management.ObjectName;
1:63a660a: 
1:63a660a: import org.apache.activemq.broker.region.policy.AbortSlowConsumerStrategy;
1:63a660a: import org.apache.activemq.command.ActiveMQDestination;
1:63a660a: import org.apache.activemq.command.ConsumerInfo;
1:63a660a: import org.apache.activemq.command.ProducerInfo;
1:63a660a: import org.apache.activemq.transaction.XATransaction;
1:63a660a: import org.apache.activemq.util.JMXSupport;
1:63a660a: 
1:7d7d6fa: public class BrokerMBeanSupport {
1:63a660a: 
1:63a660a:     // MBean Name Creation
1:63a660a: 
1:63a660a:     public static ObjectName createBrokerObjectName(String jmxDomainName, String brokerName) throws MalformedObjectNameException  {
1:63a660a:         String objectNameStr = jmxDomainName + ":type=Broker,brokerName=";
1:63a660a:         objectNameStr += JMXSupport.encodeObjectNamePart(brokerName);
1:63a660a:         return new ObjectName(objectNameStr);
1:63a660a:     }
1:63a660a: 
1:63a660a:     public static ObjectName createDestinationName(ObjectName brokerObjectName, ActiveMQDestination destination) throws MalformedObjectNameException {
1:63a660a:         return createDestinationName(brokerObjectName.toString(), destination);
1:63a660a:     }
1:63a660a: 
1:63a660a:     public static ObjectName createDestinationName(String brokerObjectName, ActiveMQDestination destination) throws MalformedObjectNameException {
1:63a660a:         String objectNameStr = brokerObjectName;
1:63a660a:         objectNameStr += createDestinationProperties(destination);
1:63a660a:         return new ObjectName(objectNameStr);
1:63a660a:     }
1:63a660a: 
1:63a660a:     public static ObjectName createDestinationName(String brokerObjectName, String type, String name) throws MalformedObjectNameException {
1:63a660a:         String objectNameStr = brokerObjectName;
1:63a660a:         objectNameStr += createDestinationProperties(type, name);
1:63a660a:         return new ObjectName(objectNameStr);
1:63a660a:     }
1:63a660a: 
1:63a660a:     private static String createDestinationProperties(ActiveMQDestination destination){
1:63a660a:         String result = "";
1:63a660a:         if (destination != null){
1:63a660a:             result = createDestinationProperties(destination.getDestinationTypeAsString(), destination.getPhysicalName());
1:63a660a:         }
1:63a660a:         return result;
1:63a660a:     }
1:63a660a: 
1:63a660a:     private static String createDestinationProperties(String type, String name){
1:63a660a:         return ",destinationType="+ JMXSupport.encodeObjectNamePart(type) +
1:63a660a:                ",destinationName=" + JMXSupport.encodeObjectNamePart(name);
1:63a660a:     }
1:63a660a: 
1:63a660a:     public static ObjectName createSubscriptionName(ObjectName brokerObjectName, String connectionClientId, ConsumerInfo info) throws MalformedObjectNameException {
1:63a660a:         return createSubscriptionName(brokerObjectName.toString(), connectionClientId, info);
1:63a660a:     }
1:63a660a: 
1:63a660a:     public static ObjectName createSubscriptionName(String brokerObjectName, String connectionClientId, ConsumerInfo info) throws MalformedObjectNameException {
1:63a660a:         String objectNameStr = brokerObjectName;
1:63a660a:         objectNameStr += createDestinationProperties(info.getDestination()) + ",endpoint=Consumer";
1:63a660a:         objectNameStr += ",clientId=" + JMXSupport.encodeObjectNamePart(connectionClientId);
1:63a660a:         objectNameStr += ",consumerId=";
1:63a660a: 
1:63a660a:         if (info.isDurable()){
1:63a660a:             objectNameStr += "Durable(" + JMXSupport.encodeObjectNamePart(connectionClientId + ":" + info.getSubscriptionName()) +")";
1:63a660a:         } else {
1:63a660a:             objectNameStr += JMXSupport.encodeObjectNamePart(info.getConsumerId().toString());
1:63a660a:         }
1:63a660a: 
1:63a660a:         return new ObjectName(objectNameStr);
1:63a660a:     }
1:63a660a: 
1:63a660a:     public static ObjectName createProducerName(ObjectName brokerObjectName, String connectionClientId, ProducerInfo info) throws MalformedObjectNameException {
1:63a660a:         return createProducerName(brokerObjectName.toString(), connectionClientId, info);
1:63a660a:     }
1:63a660a: 
1:63a660a:     public static ObjectName createProducerName(String brokerObjectName, String connectionClientId, ProducerInfo producerInfo) throws MalformedObjectNameException {
1:63a660a:         String objectNameStr = brokerObjectName;
1:63a660a: 
1:63a660a:         if (producerInfo.getDestination() == null) {
1:63a660a:             objectNameStr += ",endpoint=dynamicProducer";
1:63a660a:         } else {
1:63a660a:             objectNameStr += createDestinationProperties(producerInfo.getDestination()) + ",endpoint=Producer";
1:63a660a:         }
1:63a660a: 
1:63a660a:         objectNameStr += ",clientId=" + JMXSupport.encodeObjectNamePart(connectionClientId);
1:63a660a:         objectNameStr += ",producerId=" + JMXSupport.encodeObjectNamePart(producerInfo.getProducerId().toString());
1:63a660a: 
1:63a660a:         return new ObjectName(objectNameStr);
1:63a660a:     }
1:63a660a: 
1:63a660a:     public static ObjectName createXATransactionName(ObjectName brokerObjectName, XATransaction transaction) throws MalformedObjectNameException {
1:63a660a:         return createXATransactionName(brokerObjectName.toString(), transaction);
1:63a660a:     }
1:63a660a: 
1:63a660a:     public static ObjectName createXATransactionName(String brokerObjectName, XATransaction transaction) throws MalformedObjectNameException {
1:63a660a:         String objectNameStr = brokerObjectName;
1:63a660a: 
1:63a660a:         objectNameStr += "," + "transactionType=RecoveredXaTransaction";
1:0709c2c:         objectNameStr += "," + "xid=" + JMXSupport.encodeObjectNamePart(transaction.getTransactionId().toString());
1:63a660a: 
1:63a660a:         return new ObjectName(objectNameStr);
1:63a660a:     }
1:63a660a: 
1:25f1fe8:     public static ObjectName createLog4JConfigViewName(String brokerObjectName) throws MalformedObjectNameException {
1:25f1fe8:         String objectNameStr = brokerObjectName;
1:25f1fe8: 
1:0709c2c:         objectNameStr += "," + "service=Log4JConfiguration";
1:25f1fe8: 
1:25f1fe8:         return new ObjectName(objectNameStr);
1:25f1fe8:     }
1:25f1fe8: 
1:3bffaf7:     public static ObjectName createPersistenceAdapterName(String brokerObjectName, String name) throws MalformedObjectNameException {
1:3bffaf7:         String objectNameStr = brokerObjectName;
1:63a660a: 
1:0709c2c:         objectNameStr += "," + "service=PersistenceAdapter";
1:0709c2c:         objectNameStr += "," + "instanceName=" + JMXSupport.encodeObjectNamePart(name);
2:3bffaf7: 
1:63a660a:         return new ObjectName(objectNameStr);
1:63a660a:     }
1:3bffaf7: 
1:63a660a:     public static ObjectName createAbortSlowConsumerStrategyName(ObjectName brokerObjectName, AbortSlowConsumerStrategy strategy) throws MalformedObjectNameException {
1:63a660a:         return createAbortSlowConsumerStrategyName(brokerObjectName.toString(), strategy);
1:63a660a:     }
1:63a660a: 
1:63a660a:     public static ObjectName createAbortSlowConsumerStrategyName(String brokerObjectName, AbortSlowConsumerStrategy strategy) throws MalformedObjectNameException {
1:63a660a:         String objectNameStr = brokerObjectName;
1:0709c2c:         objectNameStr += ",service=SlowConsumerStrategy,instanceName="+ JMXSupport.encodeObjectNamePart(strategy.getName());
1:63a660a:         ObjectName objectName = new ObjectName(objectNameStr);
1:63a660a:         return objectName;
1:63a660a:     }
1:63a660a: 
1:63a660a:     public static ObjectName createConnectorName(ObjectName brokerObjectName, String type, String name) throws MalformedObjectNameException {
1:63a660a:         return createConnectorName(brokerObjectName.toString(), type, name);
1:63a660a:     }
1:63a660a: 
1:63a660a:     public static ObjectName createConnectorName(String brokerObjectName, String type, String name) throws MalformedObjectNameException {
1:63a660a:         String objectNameStr = brokerObjectName;
1:63a660a:         objectNameStr += ",connector=" + type + ",connectorName="+ JMXSupport.encodeObjectNamePart(name);
1:63a660a:         ObjectName objectName = new ObjectName(objectNameStr);
1:63a660a:         return objectName;
1:63a660a:     }
1:63a660a: 
1:63a660a:     public static ObjectName createNetworkConnectorName(ObjectName brokerObjectName, String type, String name) throws MalformedObjectNameException {
1:63a660a:         return createNetworkConnectorName(brokerObjectName.toString(), type, name);
1:63a660a:     }
1:63a660a: 
1:61da1fa:     public static ObjectName createVirtualDestinationSelectorCacheName(ObjectName brokerObjectName, String type, String name) throws MalformedObjectNameException {
1:61da1fa:         String objectNameStr = brokerObjectName.toString();
1:61da1fa:         objectNameStr += ",service=" + type + ",virtualDestinationSelectoCache="+ JMXSupport.encodeObjectNamePart(name);
1:61da1fa:         ObjectName objectName = new ObjectName(objectNameStr);
1:61da1fa:         return objectName;
1:61da1fa:     }
1:61da1fa: 
1:63a660a:     public static ObjectName createNetworkConnectorName(String brokerObjectName, String type, String name) throws MalformedObjectNameException {
1:63a660a:         String objectNameStr = brokerObjectName;
1:63a660a:         objectNameStr += ",connector=" + type + ",networkConnectorName="+ JMXSupport.encodeObjectNamePart(name);
1:63a660a:         ObjectName objectName = new ObjectName(objectNameStr);
1:63a660a:         return objectName;
1:63a660a:     }
1:63a660a: 
1:aaa81de:     public static ObjectName createConnectionViewByType(ObjectName connectorName, String type, String name) throws MalformedObjectNameException {
2:63a660a:         String objectNameStr = connectorName.toString();
1:63a660a:         objectNameStr += ",connectionViewType=" + JMXSupport.encodeObjectNamePart(type);
1:aaa81de:         objectNameStr += ",connectionName="+ JMXSupport.encodeObjectNamePart(name);
1:63a660a:         return new ObjectName(objectNameStr);
1:63a660a:     }
1:63a660a: 
1:63a660a:     public static ObjectName createNetworkBridgeObjectName(ObjectName connectorName, String remoteAddress) throws MalformedObjectNameException {
1:63a660a:         Hashtable<String, String> map = new Hashtable<String, String>(connectorName.getKeyPropertyList());
1:63a660a:         map.put("networkBridge", JMXSupport.encodeObjectNamePart(remoteAddress));
1:63a660a:         return new ObjectName(connectorName.getDomain(), map);
1:63a660a:     }
1:63a660a: 
1:489f929:     public static ObjectName createNetworkOutBoundDestinationObjectName(ObjectName networkName, ActiveMQDestination destination) throws MalformedObjectNameException {
1:489f929:         String str = networkName.toString();
1:489f929:         str += ",direction=outbound" + createDestinationProperties(destination);
1:489f929:         return new ObjectName(str);
1:489f929: 
1:489f929:     }
1:489f929: 
1:489f929:     public static ObjectName createNetworkInBoundDestinationObjectName(ObjectName networkName, ActiveMQDestination destination) throws MalformedObjectNameException {
1:489f929:         String str = networkName.toString();
1:489f929:         str += ",direction=inbound" + createDestinationProperties(destination);
1:489f929:         return new ObjectName(str);
1:489f929: 
1:489f929:     }
1:489f929: 
1:489f929: 
1:63a660a:     public static ObjectName createProxyConnectorName(ObjectName brokerObjectName, String type, String name) throws MalformedObjectNameException {
1:63a660a:         return createProxyConnectorName(brokerObjectName.toString(), type, name);
1:63a660a:     }
1:63a660a: 
1:63a660a:     public static ObjectName createProxyConnectorName(String brokerObjectName, String type, String name) throws MalformedObjectNameException {
1:63a660a:         String objectNameStr = brokerObjectName;
1:63a660a:         objectNameStr += ",connector=" + type + ",proxyConnectorName="+ JMXSupport.encodeObjectNamePart(name);
1:63a660a:         ObjectName objectName = new ObjectName(objectNameStr);
1:63a660a:         return objectName;
1:63a660a:     }
1:63a660a: 
1:63a660a:     public static ObjectName createJmsConnectorName(ObjectName brokerObjectName, String type, String name) throws MalformedObjectNameException {
1:63a660a:         return createJmsConnectorName(brokerObjectName.toString(), type, name);
1:63a660a:     }
1:63a660a: 
1:63a660a:     public static ObjectName createJmsConnectorName(String brokerObjectName, String type, String name) throws MalformedObjectNameException {
1:63a660a:         String objectNameStr = brokerObjectName;
1:0709c2c:         objectNameStr += ",connector=" + type + ",jmsConnectors="+ JMXSupport.encodeObjectNamePart(name);
1:63a660a:         ObjectName objectName = new ObjectName(objectNameStr);
1:63a660a:         return objectName;
1:63a660a:     }
1:63a660a: 
1:63a660a:     public static ObjectName createJobSchedulerServiceName(ObjectName brokerObjectName) throws MalformedObjectNameException {
1:63a660a:         return createJobSchedulerServiceName(brokerObjectName.toString());
1:63a660a:     }
1:63a660a: 
1:63a660a:     public static ObjectName createJobSchedulerServiceName(String brokerObjectName) throws MalformedObjectNameException {
1:63a660a:         String objectNameStr = brokerObjectName;
1:63a660a:         objectNameStr += ",service=JobScheduler,name=JMS";
1:63a660a:         ObjectName objectName = new ObjectName(objectNameStr);
1:63a660a:         return objectName;
1:63a660a:     }
1:63a660a: 
1:63a660a:     public static ObjectName createHealthServiceName(ObjectName brokerObjectName) throws MalformedObjectNameException {
1:63a660a:         return createHealthServiceName(brokerObjectName.toString());
1:63a660a:     }
1:63a660a: 
1:63a660a:     public static ObjectName createHealthServiceName(String brokerObjectName) throws MalformedObjectNameException {
1:63a660a:         String objectNameStr = brokerObjectName;
1:63a660a:         objectNameStr += ",service=Health";
1:63a660a:         ObjectName objectName = new ObjectName(objectNameStr);
1:63a660a:         return objectName;
1:63a660a:     }
1:63a660a: 
1:63a660a:     // MBean Query Creation
1:63a660a: 
1:aaa81de:     public static ObjectName createConnectionQuery(String jmxDomainName, String brokerName, String name) throws MalformedObjectNameException {
1:5d4d748:         ObjectName brokerMBeanName = createBrokerObjectName(jmxDomainName, brokerName);
1:5d4d748:         return createConnectionQuery(brokerMBeanName.toString(), name);
1:5d4d748:     }
1:5d4d748: 
1:5d4d748:     public static ObjectName createConnectionQuery(String brokerMBeanName, String name) throws MalformedObjectNameException {
1:5d4d748:         return new ObjectName(brokerMBeanName + ","
1:aaa81de:                               + "connector=*," + "connectorName=*," + "connectionViewType=*,"
1:aaa81de:                               + "connectionName=" + JMXSupport.encodeObjectNamePart(name));
1:63a660a:     }
1:63a660a: 
1:5d4d748:     public static ObjectName createQueueQuery(String brokerMBeanName) throws MalformedObjectNameException {
1:5d4d748:         return createConnectionQuery(brokerMBeanName, "*");
1:5d4d748:     }
1:5d4d748: 
1:5d4d748:     public static ObjectName createQueueQuery(String brokerMBeanName, String destinationName) throws MalformedObjectNameException {
1:5d4d748:         return new ObjectName(brokerMBeanName + ","
1:5d4d748:                               + "destinationType=Queue,"
1:5d4d748:                               + "destinationName=" + JMXSupport.encodeObjectNamePart(destinationName));
1:5d4d748:     }
1:5d4d748: 
1:5d4d748:     public static ObjectName createTopicQuery(String brokerMBeanName) throws MalformedObjectNameException {
1:5d4d748:         return createConnectionQuery(brokerMBeanName, "*");
1:5d4d748:     }
1:5d4d748: 
1:5d4d748:     public static ObjectName createTopicQuery(String brokerMBeanName, String destinationName) throws MalformedObjectNameException {
1:5d4d748:         return new ObjectName(brokerMBeanName + ","
1:5d4d748:                               + "destinationType=Topic,"
1:5d4d748:                               + "destinationName=" + JMXSupport.encodeObjectNamePart(destinationName));
1:5d4d748:     }
1:5d4d748: 
1:63a660a:     public static ObjectName createConsumerQueury(String jmxDomainName, String clientId) throws MalformedObjectNameException {
1:63a660a:         return createConsumerQueury(jmxDomainName, null, clientId);
1:63a660a:     }
1:63a660a: 
1:63a660a:     public static ObjectName createConsumerQueury(String jmxDomainName, String brokerName, String clientId) throws MalformedObjectNameException {
2:63a660a:         return new ObjectName(jmxDomainName + ":type=Broker,brokerName="
1:63a660a:                               + (brokerName != null ? brokerName : "*") + ","
1:63a660a:                               + "destinationType=*,destinationName=*,"
1:63a660a:                               + "endpoint=Consumer,"
1:63a660a:                               + "clientId=" + JMXSupport.encodeObjectNamePart(clientId) + ","
1:63a660a:                               + "consumerId=*");
1:63a660a:     }
1:63a660a: 
1:63a660a:     public static ObjectName createProducerQueury(String jmxDomainName, String clientId) throws MalformedObjectNameException {
1:63a660a:         return createProducerQueury(jmxDomainName, null, clientId);
1:63a660a:     }
1:63a660a: 
1:63a660a:     public static ObjectName createProducerQueury(String jmxDomainName, String brokerName, String clientId) throws MalformedObjectNameException {
1:63a660a:         return new ObjectName(jmxDomainName + ":type=Broker,brokerName="
1:63a660a:                 + (brokerName != null ? brokerName : "*") + ","
1:63a660a:                 + "destinationType=*,destinationName=*,"
1:63a660a:                 + "endpoint=Producer,"
1:63a660a:                 + "clientId=" + JMXSupport.encodeObjectNamePart(clientId) + ","
1:63a660a:                 + "producerId=*");
1:63a660a:     }
1:63a660a: 
1:63a660a: }
============================================================================
author:Christian Posta
-------------------------------------------------------------------------------
commit:61da1fa
/////////////////////////////////////////////////////////////////////////
1:     public static ObjectName createVirtualDestinationSelectorCacheName(ObjectName brokerObjectName, String type, String name) throws MalformedObjectNameException {
1:         String objectNameStr = brokerObjectName.toString();
1:         objectNameStr += ",service=" + type + ",virtualDestinationSelectoCache="+ JMXSupport.encodeObjectNamePart(name);
1:         ObjectName objectName = new ObjectName(objectNameStr);
1:         return objectName;
1:     }
1: 
author:gtully
-------------------------------------------------------------------------------
commit:0709c2c
/////////////////////////////////////////////////////////////////////////
1:         objectNameStr += "," + "xid=" + JMXSupport.encodeObjectNamePart(transaction.getTransactionId().toString());
/////////////////////////////////////////////////////////////////////////
1:         objectNameStr += "," + "service=Log4JConfiguration";
/////////////////////////////////////////////////////////////////////////
1:         objectNameStr += "," + "service=PersistenceAdapter";
1:         objectNameStr += "," + "instanceName=" + JMXSupport.encodeObjectNamePart(name);
/////////////////////////////////////////////////////////////////////////
1:         objectNameStr += ",service=SlowConsumerStrategy,instanceName="+ JMXSupport.encodeObjectNamePart(strategy.getName());
/////////////////////////////////////////////////////////////////////////
1:         objectNameStr += ",connector=" + type + ",jmsConnectors="+ JMXSupport.encodeObjectNamePart(name);
author:Timothy Bish
-------------------------------------------------------------------------------
commit:25f1fe8
/////////////////////////////////////////////////////////////////////////
1:     public static ObjectName createLog4JConfigViewName(String brokerObjectName) throws MalformedObjectNameException {
1:         String objectNameStr = brokerObjectName;
1: 
0:         objectNameStr += "," + "Service=Log4JConfiguration";
1: 
1:         return new ObjectName(objectNameStr);
1:     }
1: 
author:rajdavies
-------------------------------------------------------------------------------
commit:489f929
/////////////////////////////////////////////////////////////////////////
1:     public static ObjectName createNetworkOutBoundDestinationObjectName(ObjectName networkName, ActiveMQDestination destination) throws MalformedObjectNameException {
1:         String str = networkName.toString();
1:         str += ",direction=outbound" + createDestinationProperties(destination);
1:         return new ObjectName(str);
1: 
1:     }
1: 
1:     public static ObjectName createNetworkInBoundDestinationObjectName(ObjectName networkName, ActiveMQDestination destination) throws MalformedObjectNameException {
1:         String str = networkName.toString();
1:         str += ",direction=inbound" + createDestinationProperties(destination);
1:         return new ObjectName(str);
1: 
1:     }
1: 
1: 
author:Timothy A. Bish
-------------------------------------------------------------------------------
commit:5d4d748
/////////////////////////////////////////////////////////////////////////
1:         ObjectName brokerMBeanName = createBrokerObjectName(jmxDomainName, brokerName);
1:         return createConnectionQuery(brokerMBeanName.toString(), name);
1:     }
1: 
1:     public static ObjectName createConnectionQuery(String brokerMBeanName, String name) throws MalformedObjectNameException {
1:         return new ObjectName(brokerMBeanName + ","
1:     public static ObjectName createQueueQuery(String brokerMBeanName) throws MalformedObjectNameException {
1:         return createConnectionQuery(brokerMBeanName, "*");
1:     }
1: 
1:     public static ObjectName createQueueQuery(String brokerMBeanName, String destinationName) throws MalformedObjectNameException {
1:         return new ObjectName(brokerMBeanName + ","
1:                               + "destinationType=Queue,"
1:                               + "destinationName=" + JMXSupport.encodeObjectNamePart(destinationName));
1:     }
1: 
1:     public static ObjectName createTopicQuery(String brokerMBeanName) throws MalformedObjectNameException {
1:         return createConnectionQuery(brokerMBeanName, "*");
1:     }
1: 
1:     public static ObjectName createTopicQuery(String brokerMBeanName, String destinationName) throws MalformedObjectNameException {
1:         return new ObjectName(brokerMBeanName + ","
1:                               + "destinationType=Topic,"
1:                               + "destinationName=" + JMXSupport.encodeObjectNamePart(destinationName));
1:     }
1: 
commit:63a660a
/////////////////////////////////////////////////////////////////////////
1: /**
1:  * Licensed to the Apache Software Foundation (ASF) under one or more
1:  * contributor license agreements.  See the NOTICE file distributed with
1:  * this work for additional information regarding copyright ownership.
1:  * The ASF licenses this file to You under the Apache License, Version 2.0
1:  * (the "License"); you may not use this file except in compliance with
1:  * the License.  You may obtain a copy of the License at
1:  *
1:  *      http://www.apache.org/licenses/LICENSE-2.0
1:  *
1:  * Unless required by applicable law or agreed to in writing, software
1:  * distributed under the License is distributed on an "AS IS" BASIS,
1:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:  * See the License for the specific language governing permissions and
1:  * limitations under the License.
1:  */
1: package org.apache.activemq.broker.jmx;
1: 
1: import java.util.Hashtable;
1: 
1: import javax.management.MalformedObjectNameException;
1: import javax.management.ObjectName;
1: 
1: import org.apache.activemq.broker.region.policy.AbortSlowConsumerStrategy;
1: import org.apache.activemq.command.ActiveMQDestination;
1: import org.apache.activemq.command.ConsumerInfo;
1: import org.apache.activemq.command.ProducerInfo;
1: import org.apache.activemq.transaction.XATransaction;
1: import org.apache.activemq.util.JMXSupport;
1: 
0: public class BrokerMBeanSuppurt {
1: 
1:     // MBean Name Creation
1: 
1:     public static ObjectName createBrokerObjectName(String jmxDomainName, String brokerName) throws MalformedObjectNameException  {
1:         String objectNameStr = jmxDomainName + ":type=Broker,brokerName=";
1:         objectNameStr += JMXSupport.encodeObjectNamePart(brokerName);
1:         return new ObjectName(objectNameStr);
1:     }
1: 
1:     public static ObjectName createDestinationName(ObjectName brokerObjectName, ActiveMQDestination destination) throws MalformedObjectNameException {
1:         return createDestinationName(brokerObjectName.toString(), destination);
1:     }
1: 
1:     public static ObjectName createDestinationName(String brokerObjectName, ActiveMQDestination destination) throws MalformedObjectNameException {
1:         String objectNameStr = brokerObjectName;
1:         objectNameStr += createDestinationProperties(destination);
1:         return new ObjectName(objectNameStr);
1:     }
1: 
1:     public static ObjectName createDestinationName(String brokerObjectName, String type, String name) throws MalformedObjectNameException {
1:         String objectNameStr = brokerObjectName;
1:         objectNameStr += createDestinationProperties(type, name);
1:         return new ObjectName(objectNameStr);
1:     }
1: 
1:     private static String createDestinationProperties(ActiveMQDestination destination){
1:         String result = "";
1:         if (destination != null){
1:             result = createDestinationProperties(destination.getDestinationTypeAsString(), destination.getPhysicalName());
1:         }
1:         return result;
1:     }
1: 
1:     private static String createDestinationProperties(String type, String name){
1:         return ",destinationType="+ JMXSupport.encodeObjectNamePart(type) +
1:                ",destinationName=" + JMXSupport.encodeObjectNamePart(name);
1:     }
1: 
1:     public static ObjectName createSubscriptionName(ObjectName brokerObjectName, String connectionClientId, ConsumerInfo info) throws MalformedObjectNameException {
1:         return createSubscriptionName(brokerObjectName.toString(), connectionClientId, info);
1:     }
1: 
1:     public static ObjectName createSubscriptionName(String brokerObjectName, String connectionClientId, ConsumerInfo info) throws MalformedObjectNameException {
1:         String objectNameStr = brokerObjectName;
1:         objectNameStr += createDestinationProperties(info.getDestination()) + ",endpoint=Consumer";
1:         objectNameStr += ",clientId=" + JMXSupport.encodeObjectNamePart(connectionClientId);
1:         objectNameStr += ",consumerId=";
1: 
1:         if (info.isDurable()){
1:             objectNameStr += "Durable(" + JMXSupport.encodeObjectNamePart(connectionClientId + ":" + info.getSubscriptionName()) +")";
1:         } else {
1:             objectNameStr += JMXSupport.encodeObjectNamePart(info.getConsumerId().toString());
1:         }
1: 
1:         return new ObjectName(objectNameStr);
1:     }
1: 
1:     public static ObjectName createProducerName(ObjectName brokerObjectName, String connectionClientId, ProducerInfo info) throws MalformedObjectNameException {
1:         return createProducerName(brokerObjectName.toString(), connectionClientId, info);
1:     }
1: 
1:     public static ObjectName createProducerName(String brokerObjectName, String connectionClientId, ProducerInfo producerInfo) throws MalformedObjectNameException {
1:         String objectNameStr = brokerObjectName;
1: 
1:         if (producerInfo.getDestination() == null) {
1:             objectNameStr += ",endpoint=dynamicProducer";
1:         } else {
1:             objectNameStr += createDestinationProperties(producerInfo.getDestination()) + ",endpoint=Producer";
1:         }
1: 
1:         objectNameStr += ",clientId=" + JMXSupport.encodeObjectNamePart(connectionClientId);
1:         objectNameStr += ",producerId=" + JMXSupport.encodeObjectNamePart(producerInfo.getProducerId().toString());
1: 
1:         return new ObjectName(objectNameStr);
1:     }
1: 
1:     public static ObjectName createXATransactionName(ObjectName brokerObjectName, XATransaction transaction) throws MalformedObjectNameException {
1:         return createXATransactionName(brokerObjectName.toString(), transaction);
1:     }
1: 
1:     public static ObjectName createXATransactionName(String brokerObjectName, XATransaction transaction) throws MalformedObjectNameException {
1:         String objectNameStr = brokerObjectName;
1: 
1:         objectNameStr += "," + "transactionType=RecoveredXaTransaction";
0:         objectNameStr += "," + "Xid=" + JMXSupport.encodeObjectNamePart(transaction.getTransactionId().toString());
1: 
1:         return new ObjectName(objectNameStr);
1:     }
1: 
1:     public static ObjectName createAbortSlowConsumerStrategyName(ObjectName brokerObjectName, AbortSlowConsumerStrategy strategy) throws MalformedObjectNameException {
1:         return createAbortSlowConsumerStrategyName(brokerObjectName.toString(), strategy);
1:     }
1: 
1:     public static ObjectName createAbortSlowConsumerStrategyName(String brokerObjectName, AbortSlowConsumerStrategy strategy) throws MalformedObjectNameException {
1:         String objectNameStr = brokerObjectName;
0:         objectNameStr += ",Service=SlowConsumerStrategy,InstanceName="+ JMXSupport.encodeObjectNamePart(strategy.getName());
1:         ObjectName objectName = new ObjectName(objectNameStr);
1:         return objectName;
1:     }
1: 
1:     public static ObjectName createConnectorName(ObjectName brokerObjectName, String type, String name) throws MalformedObjectNameException {
1:         return createConnectorName(brokerObjectName.toString(), type, name);
1:     }
1: 
1:     public static ObjectName createConnectorName(String brokerObjectName, String type, String name) throws MalformedObjectNameException {
1:         String objectNameStr = brokerObjectName;
1:         objectNameStr += ",connector=" + type + ",connectorName="+ JMXSupport.encodeObjectNamePart(name);
1:         ObjectName objectName = new ObjectName(objectNameStr);
1:         return objectName;
1:     }
1: 
1:     public static ObjectName createNetworkConnectorName(ObjectName brokerObjectName, String type, String name) throws MalformedObjectNameException {
1:         return createNetworkConnectorName(brokerObjectName.toString(), type, name);
1:     }
1: 
1:     public static ObjectName createNetworkConnectorName(String brokerObjectName, String type, String name) throws MalformedObjectNameException {
1:         String objectNameStr = brokerObjectName;
1:         objectNameStr += ",connector=" + type + ",networkConnectorName="+ JMXSupport.encodeObjectNamePart(name);
1:         ObjectName objectName = new ObjectName(objectNameStr);
1:         return objectName;
1:     }
1: 
0:     public static ObjectName createConnectionViewByAddressName(ObjectName connectorName, String type, String address) throws MalformedObjectNameException {
1:         String objectNameStr = connectorName.toString();
1:         objectNameStr += ",connectionViewType=" + JMXSupport.encodeObjectNamePart(type);
0:         objectNameStr += ",connectionName="+ JMXSupport.encodeObjectNamePart(address);
1:         return new ObjectName(objectNameStr);
1:     }
1: 
0:     public static ObjectName createConnectionViewByClientIdName(ObjectName connectorName, String clientId) throws MalformedObjectNameException {
1:         String objectNameStr = connectorName.toString();
0:         objectNameStr += ",connectionName="+JMXSupport.encodeObjectNamePart(clientId);
1:         return new ObjectName(objectNameStr);
1:     }
1: 
1:     public static ObjectName createNetworkBridgeObjectName(ObjectName connectorName, String remoteAddress) throws MalformedObjectNameException {
1:         Hashtable<String, String> map = new Hashtable<String, String>(connectorName.getKeyPropertyList());
1:         map.put("networkBridge", JMXSupport.encodeObjectNamePart(remoteAddress));
1:         return new ObjectName(connectorName.getDomain(), map);
1:     }
1: 
1:     public static ObjectName createProxyConnectorName(ObjectName brokerObjectName, String type, String name) throws MalformedObjectNameException {
1:         return createProxyConnectorName(brokerObjectName.toString(), type, name);
1:     }
1: 
1:     public static ObjectName createProxyConnectorName(String brokerObjectName, String type, String name) throws MalformedObjectNameException {
1:         String objectNameStr = brokerObjectName;
1:         objectNameStr += ",connector=" + type + ",proxyConnectorName="+ JMXSupport.encodeObjectNamePart(name);
1:         ObjectName objectName = new ObjectName(objectNameStr);
1:         return objectName;
1:     }
1: 
1:     public static ObjectName createJmsConnectorName(ObjectName brokerObjectName, String type, String name) throws MalformedObjectNameException {
1:         return createJmsConnectorName(brokerObjectName.toString(), type, name);
1:     }
1: 
1:     public static ObjectName createJmsConnectorName(String brokerObjectName, String type, String name) throws MalformedObjectNameException {
1:         String objectNameStr = brokerObjectName;
0:         objectNameStr += ",connector=" + type + ",JmsConnectors="+ JMXSupport.encodeObjectNamePart(name);
1:         ObjectName objectName = new ObjectName(objectNameStr);
1:         return objectName;
1:     }
1: 
1:     public static ObjectName createJobSchedulerServiceName(ObjectName brokerObjectName) throws MalformedObjectNameException {
1:         return createJobSchedulerServiceName(brokerObjectName.toString());
1:     }
1: 
1:     public static ObjectName createJobSchedulerServiceName(String brokerObjectName) throws MalformedObjectNameException {
1:         String objectNameStr = brokerObjectName;
1:         objectNameStr += ",service=JobScheduler,name=JMS";
1:         ObjectName objectName = new ObjectName(objectNameStr);
1:         return objectName;
1:     }
1: 
1:     public static ObjectName createHealthServiceName(ObjectName brokerObjectName) throws MalformedObjectNameException {
1:         return createHealthServiceName(brokerObjectName.toString());
1:     }
1: 
1:     public static ObjectName createHealthServiceName(String brokerObjectName) throws MalformedObjectNameException {
1:         String objectNameStr = brokerObjectName;
1:         objectNameStr += ",service=Health";
1:         ObjectName objectName = new ObjectName(objectNameStr);
1:         return objectName;
1:     }
1: 
1:     // MBean Query Creation
1: 
0:     public static ObjectName createConnectionQuery(String jmxDomainName, String brokerName, String clientId) throws MalformedObjectNameException {
1:         return new ObjectName(jmxDomainName + ":type=Broker,brokerName="
0:                               + JMXSupport.encodeObjectNamePart(brokerName) + ","
0:                               + "connector=*," + "connectorName=*,"
0:                               + "connectionName=" + JMXSupport.encodeObjectNamePart(clientId));
1:     }
1: 
1:     public static ObjectName createConsumerQueury(String jmxDomainName, String clientId) throws MalformedObjectNameException {
1:         return createConsumerQueury(jmxDomainName, null, clientId);
1:     }
1: 
1:     public static ObjectName createConsumerQueury(String jmxDomainName, String brokerName, String clientId) throws MalformedObjectNameException {
1:         return new ObjectName(jmxDomainName + ":type=Broker,brokerName="
1:                               + (brokerName != null ? brokerName : "*") + ","
1:                               + "destinationType=*,destinationName=*,"
1:                               + "endpoint=Consumer,"
1:                               + "clientId=" + JMXSupport.encodeObjectNamePart(clientId) + ","
1:                               + "consumerId=*");
1:     }
1: 
1:     public static ObjectName createProducerQueury(String jmxDomainName, String clientId) throws MalformedObjectNameException {
1:         return createProducerQueury(jmxDomainName, null, clientId);
1:     }
1: 
1:     public static ObjectName createProducerQueury(String jmxDomainName, String brokerName, String clientId) throws MalformedObjectNameException {
1:         return new ObjectName(jmxDomainName + ":type=Broker,brokerName="
1:                 + (brokerName != null ? brokerName : "*") + ","
1:                 + "destinationType=*,destinationName=*,"
1:                 + "endpoint=Producer,"
1:                 + "clientId=" + JMXSupport.encodeObjectNamePart(clientId) + ","
1:                 + "producerId=*");
1:     }
1: 
1: }
author:Gary Tully
-------------------------------------------------------------------------------
commit:3bffaf7
/////////////////////////////////////////////////////////////////////////
1:     public static ObjectName createPersistenceAdapterName(String brokerObjectName, String name) throws MalformedObjectNameException {
1:         String objectNameStr = brokerObjectName;
1: 
0:         objectNameStr += "," + "Service=PersistenceAdapter";
0:         objectNameStr += "," + "InstanceName=" + JMXSupport.encodeObjectNamePart(name);
1: 
0:         return new ObjectName(objectNameStr);
0:     }
1: 
commit:7d7d6fa
/////////////////////////////////////////////////////////////////////////
1: public class BrokerMBeanSupport {
commit:aaa81de
/////////////////////////////////////////////////////////////////////////
1:     public static ObjectName createConnectionViewByType(ObjectName connectorName, String type, String name) throws MalformedObjectNameException {
1:         objectNameStr += ",connectionName="+ JMXSupport.encodeObjectNamePart(name);
/////////////////////////////////////////////////////////////////////////
1:     public static ObjectName createConnectionQuery(String jmxDomainName, String brokerName, String name) throws MalformedObjectNameException {
1:                               + "connector=*," + "connectorName=*," + "connectionViewType=*,"
1:                               + "connectionName=" + JMXSupport.encodeObjectNamePart(name));
============================================================================