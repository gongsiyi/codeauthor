1:d29ca2a: /**
1:57b4941:  * Licensed to the Apache Software Foundation (ASF) under one or more
1:57b4941:  * contributor license agreements.  See the NOTICE file distributed with
1:57b4941:  * this work for additional information regarding copyright ownership.
1:57b4941:  * The ASF licenses this file to You under the Apache License, Version 2.0
1:57b4941:  * (the "License"); you may not use this file except in compliance with
1:57b4941:  * the License.  You may obtain a copy of the License at
4:d29ca2a:  *
1:230a86c:  *      http://www.apache.org/licenses/LICENSE-2.0
1:d29ca2a:  *
1:d29ca2a:  * Unless required by applicable law or agreed to in writing, software
1:d29ca2a:  * distributed under the License is distributed on an "AS IS" BASIS,
1:d29ca2a:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:d29ca2a:  * See the License for the specific language governing permissions and
1:d29ca2a:  * limitations under the License.
1:d29ca2a:  */
1:d29ca2a: package org.apache.activemq;
19:d29ca2a: 
1:74a7a8b: import java.util.ArrayList;
1:74a7a8b: import java.util.Arrays;
1:74a7a8b: import java.util.Collections;
1:74a7a8b: import java.util.Date;
1:74a7a8b: import java.util.Iterator;
1:74a7a8b: import java.util.List;
1:74a7a8b: 
1:d29ca2a: import javax.jms.DeliveryMode;
1:d29ca2a: import javax.jms.Destination;
1:d29ca2a: import javax.jms.JMSException;
1:d29ca2a: import javax.jms.Message;
1:d29ca2a: import javax.jms.MessageConsumer;
1:d29ca2a: import javax.jms.MessageListener;
1:d29ca2a: import javax.jms.MessageProducer;
1:d29ca2a: import javax.jms.Session;
1:d29ca2a: import javax.jms.TextMessage;
1:933eb2f: 
1:8bf987b: import org.slf4j.Logger;
1:8bf987b: import org.slf4j.LoggerFactory;
1:d29ca2a: 
1:d29ca2a: /**
1:b0c2a40:  * 
1:d29ca2a:  */
1:d29ca2a: public class JmsSendReceiveTestSupport extends TestSupport implements MessageListener {
1:8bf987b:     private static final Logger LOG = LoggerFactory.getLogger(JmsSendReceiveTestSupport.class);
1:230a86c: 
1:d29ca2a:     protected int messageCount = 100;
1:d29ca2a:     protected String[] data;
1:d29ca2a:     protected Session session;
1:d29ca2a:     protected MessageConsumer consumer;
1:d29ca2a:     protected MessageProducer producer;
1:d29ca2a:     protected Destination consumerDestination;
1:d29ca2a:     protected Destination producerDestination;
1:933eb2f:     protected List<Message> messages = createConcurrentList();
1:d29ca2a:     protected boolean topic = true;
1:230a86c:     protected boolean durable;
1:d29ca2a:     protected int deliveryMode = DeliveryMode.PERSISTENT;
1:d29ca2a:     protected final Object lock = new Object();
1:230a86c:     protected boolean verbose;
1:d29ca2a: 
1:230a86c:     /*
1:d29ca2a:      * @see junit.framework.TestCase#setUp()
1:d29ca2a:      */
1:d29ca2a:     protected void setUp() throws Exception {
1:d29ca2a:         super.setUp();
1:d29ca2a:         String temp = System.getProperty("messageCount");
1:230a86c: 
1:d29ca2a:         if (temp != null) {
1:d29ca2a:             int i = Integer.parseInt(temp);
1:d29ca2a:             if (i > 0) {
1:d29ca2a:                 messageCount = i;
1:d29ca2a:             }
1:86cbdfd:         }
1:230a86c: 
1:230a86c:         LOG.info("Message count for test case is: " + messageCount);
1:d29ca2a:         data = new String[messageCount];
1:230a86c: 
1:d29ca2a:         for (int i = 0; i < messageCount; i++) {
1:d29ca2a:             data[i] = "Text for message: " + i + " at " + new Date();
1:230a86c:         }
1:d29ca2a:     }
1:230a86c: 
1:d29ca2a:     /**
1:d29ca2a:      * Sends and consumes the messages.
1:230a86c:      * 
1:d29ca2a:      * @throws Exception
1:d29ca2a:      */
1:d29ca2a:     public void testSendReceive() throws Exception {
1:d29ca2a:         messages.clear();
1:d29ca2a:         for (int i = 0; i < data.length; i++) {
1:d29ca2a:             Message message = session.createTextMessage(data[i]);
1:230a86c:             message.setStringProperty("stringProperty", data[i]);
1:230a86c:             message.setIntProperty("intProperty", i);
1:230a86c: 
1:d29ca2a:             if (verbose) {
1:230a86c:                 if (LOG.isDebugEnabled()) {
1:230a86c:                     LOG.debug("About to send a message: " + message + " with text: " + data[i]);
1:d29ca2a:                 }
1:d29ca2a:             }
1:230a86c: 
1:5a81bbb:             sendToProducer(producer, producerDestination, message);
1:5b2e9be:             messageSent();
1:d29ca2a:         }
1:230a86c: 
1:d29ca2a:         assertMessagesAreReceived();
1:230a86c:         LOG.info("" + data.length + " messages(s) received, closing down connections");
1:d29ca2a:     }
1:230a86c: 
1:5b2e9be:     /**
1:5a81bbb:      * Sends a message to a destination using the supplied producer
1:5a81bbb:      * @param producer
1:5a81bbb:      * @param producerDestination
1:5a81bbb:      * @param message
1:5a81bbb:      * @throws JMSException
1:5a81bbb:      */
1:5a81bbb:     protected void sendToProducer(MessageProducer producer,
1:5a81bbb:             Destination producerDestination, Message message) throws JMSException {
1:d29ca2a:         producer.send(producerDestination, message);   
1:d29ca2a:     }
1:230a86c: 
1:d29ca2a:     /**
1:230a86c:      * Asserts messages are received.
1:d29ca2a:      * 
1:d29ca2a:      * @throws JMSException
1:d29ca2a:      */
1:d29ca2a:     protected void assertMessagesAreReceived() throws JMSException {
1:d29ca2a:         waitForMessagesToBeDelivered();
1:d29ca2a:         assertMessagesReceivedAreValid(messages);
1:d29ca2a:     }
1:d29ca2a: 
1:d29ca2a:     /**
1:d29ca2a:      * Tests if the messages received are valid.
1:d29ca2a:      * 
1:230a86c:      * @param receivedMessages - list of received messages.
1:d29ca2a:      * @throws JMSException
1:d29ca2a:      */
1:933eb2f:     protected void assertMessagesReceivedAreValid(List<Message> receivedMessages) throws JMSException {
1:933eb2f:         List<Object> copyOfMessages = Arrays.asList(receivedMessages.toArray());
1:d29ca2a:         int counter = 0;
1:230a86c: 
1:d29ca2a:         if (data.length != copyOfMessages.size()) {
1:933eb2f:             for (Iterator<Object> iter = copyOfMessages.iterator(); iter.hasNext();) {
1:230a86c:                 TextMessage message = (TextMessage)iter.next();
1:230a86c:                 if (LOG.isInfoEnabled()) {
1:230a86c:                     LOG.info("<== " + counter++ + " = " + message.getText());
1:d29ca2a:                 }
1:d29ca2a:             }
1:5a81bbb:         }
1:230a86c: 
1:d29ca2a:         assertEquals("Not enough messages received", data.length, receivedMessages.size());
1:230a86c: 
1:d29ca2a:         for (int i = 0; i < data.length; i++) {
1:230a86c:             TextMessage received = (TextMessage)receivedMessages.get(i);
1:d29ca2a:             String text = received.getText();
1:d29ca2a:             String stringProperty = received.getStringProperty("stringProperty");
1:d29ca2a:             int intProperty = received.getIntProperty("intProperty");
1:230a86c: 
1:d29ca2a:             if (verbose) {
1:230a86c:                 if (LOG.isDebugEnabled()) {
1:230a86c:                     LOG.info("Received Text: " + text);
1:d29ca2a:                 }
1:c2fc820:             }
1:230a86c: 
1:d29ca2a:             assertEquals("Message: " + i, data[i], text);
1:230a86c:             assertEquals(data[i], stringProperty);
1:230a86c:             assertEquals(i, intProperty);
1:d29ca2a:         }
1:d29ca2a:     }
1:d29ca2a: 
1:d29ca2a:     /**
1:d29ca2a:      * Waits for messages to be delivered.
1:d29ca2a:      */
1:d29ca2a:     protected void waitForMessagesToBeDelivered() {
1:f344696:         long maxWaitTime = 60000;
1:d29ca2a:         long waitTime = maxWaitTime;
1:d29ca2a:         long start = (maxWaitTime <= 0) ? 0 : System.currentTimeMillis();
1:230a86c: 
1:d29ca2a:         synchronized (lock) {
1:d29ca2a:             while (messages.size() < data.length && waitTime >= 0) {
1:d29ca2a:                 try {
1:d29ca2a:                     lock.wait(200);
1:230a86c:                 } catch (InterruptedException e) {
1:d29ca2a:                     e.printStackTrace();
1:d29ca2a:                 }
1:230a86c: 
1:d29ca2a:                 waitTime = maxWaitTime - (System.currentTimeMillis() - start);
1:d29ca2a:             }
1:d29ca2a:         }
1:d29ca2a:     }
1:d29ca2a: 
1:230a86c:     /*
1:230a86c:      * (non-Javadoc)
1:230a86c:      * 
1:d29ca2a:      * @see javax.jms.MessageListener#onMessage(javax.jms.Message)
1:d29ca2a:      */
1:d29ca2a:     public synchronized void onMessage(Message message) {
1:d29ca2a:         consumeMessage(message, messages);
1:d29ca2a:     }
1:d29ca2a: 
1:d29ca2a:     /**
1:d29ca2a:      * Consumes messages.
1:d29ca2a:      * 
1:230a86c:      * @param message - message to be consumed.
1:d29ca2a:      * @param messageList -list of consumed messages.
1:d29ca2a:      */
1:933eb2f:     protected void consumeMessage(Message message, List<Message> messageList) {
1:d29ca2a:         if (verbose) {
1:230a86c:             if (LOG.isDebugEnabled()) {
1:230a86c:                 LOG.info("Received message: " + message);
1:d29ca2a:             }
1:d29ca2a:         }
1:230a86c: 
1:d29ca2a:         messageList.add(message);
1:230a86c: 
1:d29ca2a:         if (messageList.size() >= data.length) {
1:d29ca2a:             synchronized (lock) {
1:d29ca2a:                 lock.notifyAll();
1:d29ca2a:             }
1:d29ca2a:         }
1:d29ca2a:     }
1:d29ca2a: 
1:d29ca2a:     /**
1:d29ca2a:      * Returns the ArrayList as a synchronized list.
1:d29ca2a:      * 
1:d29ca2a:      * @return List
1:d29ca2a:      */
1:933eb2f:     protected List<Message> createConcurrentList() {
1:933eb2f:         return Collections.synchronizedList(new ArrayList<Message>());
1:d29ca2a:     }
1:d29ca2a: 
1:5a81bbb:     /**
1:5b2e9be:      * Just a hook so can insert failure tests
1:230a86c:      * 
1:230a86c:      * @throws Exception
1:5b2e9be:      */
1:230a86c:     protected void messageSent() throws Exception {
1:230a86c: 
1:d29ca2a:     }
1:c2fc820: }
============================================================================
author:Hadrian Zbarcea
-------------------------------------------------------------------------------
commit:f9bec8f
author:Timothy A. Bish
-------------------------------------------------------------------------------
commit:ef24cc9
author:Bosanac Dejan
-------------------------------------------------------------------------------
commit:f344696
/////////////////////////////////////////////////////////////////////////
1:         long maxWaitTime = 60000;
commit:8bf987b
/////////////////////////////////////////////////////////////////////////
1: import org.slf4j.Logger;
1: import org.slf4j.LoggerFactory;
1:     private static final Logger LOG = LoggerFactory.getLogger(JmsSendReceiveTestSupport.class);
author:Hiram R. Chirino
-------------------------------------------------------------------------------
commit:b0c2a40
/////////////////////////////////////////////////////////////////////////
1:  * 
commit:933eb2f
/////////////////////////////////////////////////////////////////////////
0: import org.apache.commons.logging.Log;
0: import org.apache.commons.logging.LogFactory;
1: 
0:     private static final Log LOG = LogFactory.getLog(JmsSendReceiveTestSupport.class);
/////////////////////////////////////////////////////////////////////////
1:     protected List<Message> messages = createConcurrentList();
/////////////////////////////////////////////////////////////////////////
1:     protected void assertMessagesReceivedAreValid(List<Message> receivedMessages) throws JMSException {
1:         List<Object> copyOfMessages = Arrays.asList(receivedMessages.toArray());
1:             for (Iterator<Object> iter = copyOfMessages.iterator(); iter.hasNext();) {
/////////////////////////////////////////////////////////////////////////
1:     protected void consumeMessage(Message message, List<Message> messageList) {
/////////////////////////////////////////////////////////////////////////
1:     protected List<Message> createConcurrentList() {
1:         return Collections.synchronizedList(new ArrayList<Message>());
commit:74a7a8b
/////////////////////////////////////////////////////////////////////////
1: import java.util.ArrayList;
1: import java.util.Arrays;
1: import java.util.Collections;
1: import java.util.Date;
1: import java.util.Iterator;
1: import java.util.List;
1: 
/////////////////////////////////////////////////////////////////////////
commit:230a86c
/////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////
1:  *      http://www.apache.org/licenses/LICENSE-2.0
/////////////////////////////////////////////////////////////////////////
0:     private static final org.apache.commons.logging.Log LOG = org.apache.commons.logging.LogFactory.getLog(JmsSendReceiveTestSupport.class);
1: 
/////////////////////////////////////////////////////////////////////////
1:     protected boolean durable;
1:     protected boolean verbose;
1:     /*
1: 
1: 
1:         LOG.info("Message count for test case is: " + messageCount);
1: 
1:     }
1: 
1:      * 
1: 
1:             message.setStringProperty("stringProperty", data[i]);
1:             message.setIntProperty("intProperty", i);
1: 
1:                 if (LOG.isDebugEnabled()) {
1:                     LOG.debug("About to send a message: " + message + " with text: " + data[i]);
1: 
1: 
1:         LOG.info("" + data.length + " messages(s) received, closing down connections");
1:      * Asserts messages are received.
/////////////////////////////////////////////////////////////////////////
1:      * @param receivedMessages - list of received messages.
1: 
1:                 TextMessage message = (TextMessage)iter.next();
1:                 if (LOG.isInfoEnabled()) {
1:                     LOG.info("<== " + counter++ + " = " + message.getText());
1: 
1: 
1:             TextMessage received = (TextMessage)receivedMessages.get(i);
1: 
1:                 if (LOG.isDebugEnabled()) {
1:                     LOG.info("Received Text: " + text);
1: 
1:             assertEquals(data[i], stringProperty);
1:             assertEquals(i, intProperty);
/////////////////////////////////////////////////////////////////////////
1: 
1:                 } catch (InterruptedException e) {
1: 
1:     /*
1:      * (non-Javadoc)
1:      * 
/////////////////////////////////////////////////////////////////////////
1:      * @param message - message to be consumed.
1:             if (LOG.isDebugEnabled()) {
1:                 LOG.info("Received message: " + message);
1: 
1: 
/////////////////////////////////////////////////////////////////////////
1: 
1:      * 
1:      * @throws Exception
1:     protected void messageSent() throws Exception {
1: 
commit:0945e32
/////////////////////////////////////////////////////////////////////////
0:                 if (log.isInfoEnabled()) {
0:                     log.info("<== " + counter++ + " = " + message.getText());
commit:86cbdfd
/////////////////////////////////////////////////////////////////////////
1: }
commit:57b4941
/////////////////////////////////////////////////////////////////////////
1:  * Licensed to the Apache Software Foundation (ASF) under one or more
1:  * contributor license agreements.  See the NOTICE file distributed with
1:  * this work for additional information regarding copyright ownership.
1:  * The ASF licenses this file to You under the Apache License, Version 2.0
1:  * (the "License"); you may not use this file except in compliance with
1:  * the License.  You may obtain a copy of the License at
commit:48b4869
/////////////////////////////////////////////////////////////////////////
0:  * Copyright 2005-2006 The Apache Software Foundation
commit:d29ca2a
/////////////////////////////////////////////////////////////////////////
1: /**
1:  *
0:  * Copyright 2004 The Apache Software Foundation
1:  *
0:  * Licensed under the Apache License, Version 2.0 (the "License");
0:  * you may not use this file except in compliance with the License.
0:  * You may obtain a copy of the License at
1:  *
0:  * http://www.apache.org/licenses/LICENSE-2.0
1:  *
1:  * Unless required by applicable law or agreed to in writing, software
1:  * distributed under the License is distributed on an "AS IS" BASIS,
1:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:  * See the License for the specific language governing permissions and
1:  * limitations under the License.
1:  */
1: package org.apache.activemq;
1: 
1: import javax.jms.DeliveryMode;
1: import javax.jms.Destination;
1: import javax.jms.JMSException;
1: import javax.jms.Message;
1: import javax.jms.MessageConsumer;
1: import javax.jms.MessageListener;
1: import javax.jms.MessageProducer;
1: import javax.jms.Session;
1: import javax.jms.TextMessage;
0: import java.util.ArrayList;
0: import java.util.Arrays;
0: import java.util.Collections;
0: import java.util.Date;
0: import java.util.Iterator;
0: import java.util.List;
1: 
1: /**
0:  * @version $Revision: 1.7 $
1:  */
1: public class JmsSendReceiveTestSupport extends TestSupport implements MessageListener {
0:     private static final org.apache.commons.logging.Log log = org.apache.commons.logging.LogFactory
0:             .getLog(JmsSendReceiveTestSupport.class);
1:     
1:     protected int messageCount = 100;
1:     protected String[] data;
1:     protected Session session;
1:     protected MessageConsumer consumer;
1:     protected MessageProducer producer;
1:     protected Destination consumerDestination;
1:     protected Destination producerDestination;
0:     protected List messages = createConcurrentList();
1:     protected boolean topic = true;
0:     protected boolean durable = false;
1:     protected int deliveryMode = DeliveryMode.PERSISTENT;
1:     protected final Object lock = new Object();
0:     protected boolean verbose = false;
1: 
0:     /* 
1:      * @see junit.framework.TestCase#setUp()
1:      */
1:     protected void setUp() throws Exception {
1:         super.setUp();
1:         String temp = System.getProperty("messageCount");
1:         
1:         if (temp != null) {
1:             int i = Integer.parseInt(temp);
1:             if (i > 0) {
1:                 messageCount = i;
1:             }
1:         }
1:         
0:         log.info("Message count for test case is: " + messageCount);
1:         data = new String[messageCount];
1:         
1:         for (int i = 0; i < messageCount; i++) {
1:             data[i] = "Text for message: " + i + " at " + new Date();
1:         }
1:     }    
1:     
1:     /**
1:      * Sends and consumes the messages.
1:      *
1:      * @throws Exception
1:      */
1:     public void testSendReceive() throws Exception {
1:         messages.clear();
1:         
1:         for (int i = 0; i < data.length; i++) {
1:             Message message = session.createTextMessage(data[i]);
0:             message.setStringProperty("stringProperty",data[i]);
0:             message.setIntProperty("intProperty",i);
1:         
1:             if (verbose) {
0:                 log.info("About to send a message: " + message + " with text: " + data[i]);
1:             }
1:             
1:             producer.send(producerDestination, message);
1:         }
1:         
1:         assertMessagesAreReceived();
0:         log.info("" + data.length + " messages(s) received, closing down connections");
1:     }
1: 
1:     /**
0:      * Asserts messages are received. 
1:      * 
1:      * @throws JMSException
1:      */
1:     protected void assertMessagesAreReceived() throws JMSException {
1:         waitForMessagesToBeDelivered();
1:         assertMessagesReceivedAreValid(messages);
1:     }
1: 
1:     /**
1:      * Tests if the messages received are valid.
1:      * 
0:      * @param receivedMessages - list of received messages.  
1:      * @throws JMSException
1:      */
0:     protected void assertMessagesReceivedAreValid(List receivedMessages) throws JMSException {
0:         List copyOfMessages = Arrays.asList(receivedMessages.toArray());
1:         int counter = 0;
1:         
1:         if (data.length != copyOfMessages.size()) {
0:             for (Iterator iter = copyOfMessages.iterator(); iter.hasNext();) {
0:                 TextMessage message = (TextMessage) iter.next();
0:                 log.info("<== " + counter++ + " = " + message);
1:             }
1:         }
1:         
1:         assertEquals("Not enough messages received", data.length, receivedMessages.size());
1:         
1:         for (int i = 0; i < data.length; i++) {
0:             TextMessage received = (TextMessage) receivedMessages.get(i);
1:             String text = received.getText();
1:             String stringProperty = received.getStringProperty("stringProperty");
1:             int intProperty = received.getIntProperty("intProperty");
1:             
1:             if (verbose) {
0:                 log.info("Received Text: " + text);
1:             }
1:             
1:             assertEquals("Message: " + i, data[i], text);
0:             assertEquals(data[i],stringProperty);
0:             assertEquals(i,intProperty) ;
1:         }
1:     }
1: 
1:     /**
1:      * Waits for messages to be delivered.
1:      */
1:     protected void waitForMessagesToBeDelivered() {
0:         long maxWaitTime = 30000;
1:         long waitTime = maxWaitTime;
1:         long start = (maxWaitTime <= 0) ? 0 : System.currentTimeMillis();
1:         
1:         synchronized (lock) {
1:             while (messages.size() < data.length && waitTime >= 0) {
1:                 try {
1:                     lock.wait(200);
1:                 }
0:                 catch (InterruptedException e) {
1:                     e.printStackTrace();
1:                 }
1:         
1:                 waitTime = maxWaitTime - (System.currentTimeMillis() - start);
1:             }
1:         }
1:     }
1: 
0:     /* (non-Javadoc)
1:      * @see javax.jms.MessageListener#onMessage(javax.jms.Message)
1:      */
1:     public synchronized void onMessage(Message message) {
1:         consumeMessage(message, messages);
1:     }
1: 
1:     /**
1:      * Consumes messages.
1:      * 
0:      * @param message - message to be consumed. 
1:      * @param messageList -list of consumed messages.
1:      */
0:     protected void consumeMessage(Message message, List messageList) {
1:         if (verbose) {
0:             log.info("Received message: " + message);
1:         }
1:         
1:         messageList.add(message);
1:         
1:         if (messageList.size() >= data.length) {
1:             synchronized (lock) {
1:                 lock.notifyAll();
1:             }
1:         }
1:     }
1: 
1:     /**
1:      * Returns the ArrayList as a synchronized list.
1:      * 
1:      * @return List
1:      */
0:     protected List createConcurrentList() {
0:         return Collections.synchronizedList(new ArrayList());
1:     }
1: }
author:Gary Tully
-------------------------------------------------------------------------------
commit:5a81bbb
/////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////
1:             sendToProducer(producer, producerDestination, message);
/////////////////////////////////////////////////////////////////////////
1:      * Sends a message to a destination using the supplied producer
1:      * @param producer
1:      * @param producerDestination
1:      * @param message
1:      * @throws JMSException
1:      */
1:     protected void sendToProducer(MessageProducer producer,
1:             Destination producerDestination, Message message) throws JMSException {
0:         producer.send(producerDestination, message);   
1:     }
0: 
1:     /**
author:James Strachan
-------------------------------------------------------------------------------
commit:c2fc820
/////////////////////////////////////////////////////////////////////////
0:                 if (log.isDebugEnabled()) {
0:                     log.debug("About to send a message: " + message + " with text: " + data[i]);
1:                 }
/////////////////////////////////////////////////////////////////////////
0:                 if (log.isDebugEnabled()) {
0:                     log.info("<== " + counter++ + " = " + message);
1:                 }
/////////////////////////////////////////////////////////////////////////
0:                 if (log.isDebugEnabled()) {
0:                     log.info("Received Text: " + text);
0:                 }
/////////////////////////////////////////////////////////////////////////
0:             if (log.isDebugEnabled()) {
0:                 log.info("Received message: " + message);
0:             }
author:Robert Davies
-------------------------------------------------------------------------------
commit:5b2e9be
/////////////////////////////////////////////////////////////////////////
1:             messageSent();
/////////////////////////////////////////////////////////////////////////
0:     
1:     /**
1:      * Just a hook so can insert failure tests
0:      * @throws Exception 
0:      *
1:      */
0:     protected void messageSent() throws Exception{
0:         
0:     }
============================================================================