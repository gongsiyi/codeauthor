1:960dce7: /**
1:960dce7:  * Licensed to the Apache Software Foundation (ASF) under one or more
1:960dce7:  * contributor license agreements.  See the NOTICE file distributed with
1:960dce7:  * this work for additional information regarding copyright ownership.
1:960dce7:  * The ASF licenses this file to You under the Apache License, Version 2.0
1:960dce7:  * (the "License"); you may not use this file except in compliance with
1:960dce7:  * the License.  You may obtain a copy of the License at
1:540dd5c:  *
1:540dd5c:  *      http://www.apache.org/licenses/LICENSE-2.0
1:540dd5c:  *
1:960dce7:  * Unless required by applicable law or agreed to in writing, software
1:960dce7:  * distributed under the License is distributed on an "AS IS" BASIS,
1:960dce7:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:960dce7:  * See the License for the specific language governing permissions and
1:960dce7:  * limitations under the License.
1:960dce7:  */
1:a88906f: package org.apache.activemq.tool.sampler;
6:a88906f: 
1:e47e0e0: import java.util.concurrent.CountDownLatch;
1:86cbdfd: import java.util.concurrent.atomic.AtomicBoolean;
1:a88906f: 
1:e47e0e0: import org.apache.activemq.tool.ClientRunBasis;
1:540dd5c: import org.apache.activemq.tool.properties.AbstractObjectProperties;
1:540dd5c: import org.apache.activemq.tool.reports.PerformanceReportWriter;
1:e47e0e0: import org.apache.commons.lang.Validate;
1:e47e0e0: import org.slf4j.Logger;
1:e47e0e0: import org.slf4j.LoggerFactory;
1:540dd5c: 
1:a88906f: public abstract class AbstractPerformanceSampler extends AbstractObjectProperties implements PerformanceSampler {
1:540dd5c:     
1:e47e0e0:     private final Logger log = LoggerFactory.getLogger(this.getClass());
1:e47e0e0: 
1:e47e0e0:     protected long rampUpPercent = 0;
1:e47e0e0:     protected long rampDownPercent = 0;
1:e47e0e0: 
1:e47e0e0:     // the following are all optionally set; they are otherwise worked out at run time
1:e47e0e0:     protected Long rampUpTime;
1:e47e0e0:     protected Long rampDownTime;
1:e47e0e0:     protected Long duration;
1:e47e0e0: 
1:540dd5c:     protected long interval = 1000; // 1 sec
1:540dd5c:     protected PerformanceReportWriter perfReportWriter;
1:540dd5c:     protected PerformanceEventListener perfEventListener;
1:540dd5c:     protected final AtomicBoolean isRunning = new AtomicBoolean(false);
1:e47e0e0:     protected CountDownLatch completionLatch;
1:540dd5c:     protected long sampleIndex;
1:a88906f: 
1:e47e0e0:     @Override
1:e47e0e0:     public Long getRampUpTime() {
1:540dd5c:         return rampUpTime;
1:540dd5c:     }
1:a88906f: 
1:e47e0e0:     @Override
1:540dd5c:     public void setRampUpTime(long rampUpTime) {
1:540dd5c:         this.rampUpTime = rampUpTime;
1:540dd5c:     }
1:a88906f: 
1:e47e0e0:     @Override
1:e47e0e0:     public Long getRampDownTime() {
1:540dd5c:         return rampDownTime;
1:540dd5c:     }
1:a88906f: 
1:e47e0e0:     @Override
1:540dd5c:     public void setRampDownTime(long rampDownTime) {
1:540dd5c:         this.rampDownTime = rampDownTime;
1:540dd5c:     }
1:a88906f: 
1:e47e0e0:     @Override
1:e47e0e0:     public Long getDuration() {
1:540dd5c:         return duration;
1:540dd5c:     }
1:a88906f: 
1:e47e0e0:     @Override
1:540dd5c:     public void setDuration(long duration) {
1:540dd5c:         this.duration = duration;
1:540dd5c:     }
1:a88906f: 
1:e47e0e0:     @Override
1:540dd5c:     public long getInterval() {
1:540dd5c:         return interval;
1:540dd5c:     }
1:a88906f: 
1:e47e0e0:     @Override
1:540dd5c:     public void setInterval(long interval) {
1:540dd5c:         this.interval = interval;
1:540dd5c:     }
1:a88906f: 
1:e47e0e0:     @Override
1:e47e0e0:     public long getRampUpPercent() {
1:e47e0e0:         return rampUpPercent;
1:e47e0e0:     }
1:e47e0e0: 
1:e47e0e0:     @Override
1:e47e0e0:     public void setRampUpPercent(long rampUpPercent) {
1:e47e0e0:         Validate.isTrue((rampUpPercent >= 0) && (rampUpPercent <= 100), "rampUpPercent must be a value between 0 and 100");
1:e47e0e0:         this.rampUpPercent = rampUpPercent;
1:e47e0e0:     }
1:e47e0e0: 
1:e47e0e0:     @Override
1:e47e0e0:     public long getRampDownPercent() {
1:e47e0e0:         return rampDownPercent;
1:e47e0e0:     }
1:e47e0e0: 
1:e47e0e0:     @Override
1:e47e0e0:     public void setRampDownPercent(long rampDownPercent) {
1:e47e0e0:         Validate.isTrue((rampDownPercent >= 0) && (rampDownPercent < 100), "rampDownPercent must be a value between 0 and 99");
1:e47e0e0:         this.rampDownPercent = rampDownPercent;
1:e47e0e0:     }
1:e47e0e0: 
1:e47e0e0:     @Override
1:540dd5c:     public PerformanceReportWriter getPerfReportWriter() {
1:540dd5c:         return perfReportWriter;
1:540dd5c:     }
1:a88906f: 
1:e47e0e0:     @Override
1:540dd5c:     public void setPerfReportWriter(PerformanceReportWriter perfReportWriter) {
1:540dd5c:         this.perfReportWriter = perfReportWriter;
1:540dd5c:     }
1:a88906f: 
1:e47e0e0:     @Override
1:540dd5c:     public PerformanceEventListener getPerfEventListener() {
1:540dd5c:         return perfEventListener;
1:540dd5c:     }
1:a88906f: 
1:e47e0e0:     @Override
1:540dd5c:     public void setPerfEventListener(PerformanceEventListener perfEventListener) {
1:540dd5c:         this.perfEventListener = perfEventListener;
1:540dd5c:     }
1:a88906f: 
1:e47e0e0:     @Override
1:e47e0e0:     public void startSampler(CountDownLatch completionLatch, ClientRunBasis clientRunBasis, long clientRunDuration) {
1:e47e0e0:         Validate.notNull(clientRunBasis);
1:e47e0e0:         Validate.notNull(completionLatch);
1:e47e0e0: 
1:e47e0e0:         if (clientRunBasis == ClientRunBasis.time) {
1:e47e0e0:             // override the default durations
1:e47e0e0:             // if the user has overridden a duration, then use that
1:e47e0e0:             duration = (duration == null) ? clientRunDuration : this.duration;
1:e47e0e0:             rampUpTime = (rampUpTime == null) ? (duration / 100 * rampUpPercent) : this.rampUpTime;
1:e47e0e0:             rampDownTime = (rampDownTime == null) ? (duration / 100 * rampDownPercent) : this.rampDownTime;
1:e47e0e0: 
1:e47e0e0:             Validate.isTrue(duration >= (rampUpTime + rampDownTime),
1:e47e0e0:                     "Ramp times (up: " + rampDownTime + ", down: " + rampDownTime + ") exceed the sampler duration (" + duration + ")");
1:e47e0e0:             log.info("Sampling duration: {} ms, ramp up: {} ms, ramp down: {} ms", duration, rampUpTime, rampDownTime);
1:e47e0e0: 
1:e47e0e0:             // spawn notifier thread to stop the sampler, taking ramp-down time into account
1:e47e0e0:             Thread notifier = new Thread(new RampDownNotifier(this));
1:e47e0e0:             notifier.setName("RampDownNotifier[" + this.getClass().getSimpleName() + "]");
1:e47e0e0:             notifier.start();
1:e47e0e0:         } else {
1:e47e0e0:             log.info("Performance test running on count basis; ignoring duration and ramp times");
1:e47e0e0:             setRampUpTime(0);
1:e47e0e0:             setRampDownTime(0);
1:e47e0e0:         }
1:e47e0e0: 
1:e47e0e0:         this.completionLatch = completionLatch;
1:a88906f:         Thread t = new Thread(this);
1:e47e0e0:         t.setName(this.getClass().getSimpleName());
1:a88906f:         t.start();
1:e47e0e0:         isRunning.set(true);
1:540dd5c:     }
1:a88906f: 
1:e47e0e0:     @Override
1:e47e0e0:     public void finishSampling() {
1:e47e0e0:         isRunning.set(false);
1:e47e0e0:     }
1:e47e0e0: 
1:e47e0e0:     @Override
1:a88906f:     public void run() {
4:a88906f:         try {
1:e47e0e0:             log.debug("Ramp up start");
1:a88906f:             onRampUpStart();
1:a88906f:             if (perfEventListener != null) {
1:540dd5c:                 perfEventListener.onRampUpStart(this);
1:540dd5c:             }
1:a88906f: 
1:e47e0e0:             if (rampUpTime > 0) {
1:e47e0e0:                 try {
1:e47e0e0:                     Thread.sleep(rampUpTime);
1:e47e0e0:                 } catch (InterruptedException e) {
1:e47e0e0:                     e.printStackTrace();
1:e47e0e0:                 }
1:540dd5c:             }
1:a88906f: 
1:e47e0e0:             log.debug("Sampler start");
1:a88906f:             onSamplerStart();
1:a88906f:             if (perfEventListener != null) {
1:540dd5c:                 perfEventListener.onSamplerStart(this);
22:a88906f:             }
1:a88906f: 
1:a88906f:             sample();
1:a88906f: 
1:e47e0e0:             log.debug("Sampler end");
1:a88906f:             onSamplerEnd();
1:a88906f:             if (perfEventListener != null) {
1:540dd5c:                 perfEventListener.onSamplerEnd(this);
1:a88906f:             }
1:a88906f: 
1:e47e0e0:             if (rampDownTime > 0) {
1:e47e0e0:                 try {
1:e47e0e0:                     Thread.sleep(rampDownTime);
1:e47e0e0:                 } catch (InterruptedException e) {
1:e47e0e0:                     e.printStackTrace();
1:e47e0e0:                 }
1:a88906f:             }
1:a88906f: 
1:e47e0e0:             log.debug("Ramp down end");
1:a88906f:             onRampDownEnd();
1:a88906f:             if (perfEventListener != null) {
1:540dd5c:                 perfEventListener.onRampDownEnd(this);
1:a88906f:             }
1:a88906f:         } finally {
1:e47e0e0:             completionLatch.countDown();
1:a88906f:         }
1:a88906f:     }
1:a88906f: 
1:a88906f:     protected void sample() {
1:e47e0e0:         while (isRunning.get()) {
1:a88906f:             try {
1:a88906f:                 Thread.sleep(interval);
4:a88906f:             } catch (InterruptedException e) {
4:a88906f:                 e.printStackTrace();
1:a88906f:             }
1:a88906f:             sampleData();
1:a88906f:             sampleIndex++;
1:a88906f:         }
1:a88906f:     }
1:a88906f: 
1:e47e0e0:     @Override
1:a88906f:     public abstract void sampleData();
1:a88906f: 
1:a88906f:     // Call back functions to customize behavior of thread.
1:540dd5c:     protected void onRampUpStart() {
1:540dd5c:     }
1:540dd5c: 
1:540dd5c:     protected void onSamplerStart() {
1:540dd5c:     }
1:540dd5c: 
1:540dd5c:     protected void onSamplerEnd() {
1:540dd5c:     }
1:540dd5c: 
1:540dd5c:     protected void onRampDownEnd() {
1:540dd5c:     }
1:a88906f: }
============================================================================
author:Timothy Bish
-------------------------------------------------------------------------------
commit:e47e0e0
/////////////////////////////////////////////////////////////////////////
1: import java.util.concurrent.CountDownLatch;
1: import org.apache.activemq.tool.ClientRunBasis;
1: import org.apache.commons.lang.Validate;
1: import org.slf4j.Logger;
1: import org.slf4j.LoggerFactory;
1:     private final Logger log = LoggerFactory.getLogger(this.getClass());
1: 
1:     protected long rampUpPercent = 0;
1:     protected long rampDownPercent = 0;
1: 
1:     // the following are all optionally set; they are otherwise worked out at run time
1:     protected Long rampUpTime;
1:     protected Long rampDownTime;
1:     protected Long duration;
1: 
1:     protected CountDownLatch completionLatch;
1:     @Override
1:     public Long getRampUpTime() {
1:     @Override
1:     @Override
1:     public Long getRampDownTime() {
1:     @Override
1:     @Override
1:     public Long getDuration() {
1:     @Override
1:     @Override
1:     @Override
1:     @Override
1:     public long getRampUpPercent() {
1:         return rampUpPercent;
1:     }
1: 
1:     @Override
1:     public void setRampUpPercent(long rampUpPercent) {
1:         Validate.isTrue((rampUpPercent >= 0) && (rampUpPercent <= 100), "rampUpPercent must be a value between 0 and 100");
1:         this.rampUpPercent = rampUpPercent;
1:     }
1: 
1:     @Override
1:     public long getRampDownPercent() {
1:         return rampDownPercent;
1:     }
1: 
1:     @Override
1:     public void setRampDownPercent(long rampDownPercent) {
1:         Validate.isTrue((rampDownPercent >= 0) && (rampDownPercent < 100), "rampDownPercent must be a value between 0 and 99");
1:         this.rampDownPercent = rampDownPercent;
1:     }
1: 
1:     @Override
1:     @Override
1:     @Override
1:     @Override
1:     @Override
1:     public void startSampler(CountDownLatch completionLatch, ClientRunBasis clientRunBasis, long clientRunDuration) {
1:         Validate.notNull(clientRunBasis);
1:         Validate.notNull(completionLatch);
1: 
1:         if (clientRunBasis == ClientRunBasis.time) {
1:             // override the default durations
1:             // if the user has overridden a duration, then use that
1:             duration = (duration == null) ? clientRunDuration : this.duration;
1:             rampUpTime = (rampUpTime == null) ? (duration / 100 * rampUpPercent) : this.rampUpTime;
1:             rampDownTime = (rampDownTime == null) ? (duration / 100 * rampDownPercent) : this.rampDownTime;
1: 
1:             Validate.isTrue(duration >= (rampUpTime + rampDownTime),
1:                     "Ramp times (up: " + rampDownTime + ", down: " + rampDownTime + ") exceed the sampler duration (" + duration + ")");
1:             log.info("Sampling duration: {} ms, ramp up: {} ms, ramp down: {} ms", duration, rampUpTime, rampDownTime);
1: 
1:             // spawn notifier thread to stop the sampler, taking ramp-down time into account
1:             Thread notifier = new Thread(new RampDownNotifier(this));
1:             notifier.setName("RampDownNotifier[" + this.getClass().getSimpleName() + "]");
1:             notifier.start();
1:         } else {
1:             log.info("Performance test running on count basis; ignoring duration and ramp times");
1:             setRampUpTime(0);
1:             setRampDownTime(0);
1:         }
1: 
1:         this.completionLatch = completionLatch;
1:         t.setName(this.getClass().getSimpleName());
1:         isRunning.set(true);
1:     @Override
1:     public void finishSampling() {
1:         isRunning.set(false);
1:     }
1: 
1:     @Override
1:             log.debug("Ramp up start");
1:             if (rampUpTime > 0) {
1:                 try {
1:                     Thread.sleep(rampUpTime);
1:                 } catch (InterruptedException e) {
1:                     e.printStackTrace();
1:                 }
1:             log.debug("Sampler start");
/////////////////////////////////////////////////////////////////////////
1:             log.debug("Sampler end");
1:             if (rampDownTime > 0) {
1:                 try {
1:                     Thread.sleep(rampDownTime);
1:                 } catch (InterruptedException e) {
1:                     e.printStackTrace();
1:                 }
1:             log.debug("Ramp down end");
1:             completionLatch.countDown();
1:         while (isRunning.get()) {
/////////////////////////////////////////////////////////////////////////
1:     @Override
author:Timothy A. Bish
-------------------------------------------------------------------------------
commit:87e878b
author:Hiram R. Chirino
-------------------------------------------------------------------------------
commit:540dd5c
/////////////////////////////////////////////////////////////////////////
1:  *
1:  *      http://www.apache.org/licenses/LICENSE-2.0
1:  *
/////////////////////////////////////////////////////////////////////////
1: import org.apache.activemq.tool.properties.AbstractObjectProperties;
1: import org.apache.activemq.tool.reports.PerformanceReportWriter;
1: 
1:     
0:     protected long rampUpTime = 30 * 1000; // 30 secs
0:     protected long rampDownTime = 30 * 1000; // 30 secs
0:     protected long duration = 5 * 60 * 1000; // 5 mins
1:     protected long interval = 1000; // 1 sec
1:     protected PerformanceReportWriter perfReportWriter;
1:     protected PerformanceEventListener perfEventListener;
1:     protected final AtomicBoolean isRunning = new AtomicBoolean(false);
1:     protected long sampleIndex;
0:     public long getRampUpTime() {
1:         return rampUpTime;
1:     }
1:     public void setRampUpTime(long rampUpTime) {
1:         this.rampUpTime = rampUpTime;
1:     }
0:     public long getRampDownTime() {
1:         return rampDownTime;
1:     }
1:     public void setRampDownTime(long rampDownTime) {
1:         this.rampDownTime = rampDownTime;
1:     }
0:     public long getDuration() {
1:         return duration;
1:     }
1:     public void setDuration(long duration) {
1:         this.duration = duration;
1:     }
1:     public long getInterval() {
1:         return interval;
1:     }
1:     public void setInterval(long interval) {
1:         this.interval = interval;
1:     }
1:     public PerformanceReportWriter getPerfReportWriter() {
1:         return perfReportWriter;
1:     }
1:     public void setPerfReportWriter(PerformanceReportWriter perfReportWriter) {
1:         this.perfReportWriter = perfReportWriter;
1:     }
1:     public PerformanceEventListener getPerfEventListener() {
1:         return perfEventListener;
1:     }
1:     public void setPerfEventListener(PerformanceEventListener perfEventListener) {
1:         this.perfEventListener = perfEventListener;
1:     }
/////////////////////////////////////////////////////////////////////////
1:                 perfEventListener.onRampUpStart(this);
/////////////////////////////////////////////////////////////////////////
1:                 perfEventListener.onSamplerStart(this);
1:                 perfEventListener.onSamplerEnd(this);
/////////////////////////////////////////////////////////////////////////
1:                 perfEventListener.onRampDownEnd(this);
/////////////////////////////////////////////////////////////////////////
1:     }
/////////////////////////////////////////////////////////////////////////
0:         return isRunning.get();
1:     }
0:     public void waitUntilDone() {
0:         while (isRunning()) {
/////////////////////////////////////////////////////////////////////////
1:     }
1:     protected void onRampUpStart() {
1:     }
1: 
1:     protected void onSamplerStart() {
1:     }
1: 
1:     protected void onSamplerEnd() {
1:     }
1: 
1:     protected void onRampDownEnd() {
1:     }
commit:86cbdfd
/////////////////////////////////////////////////////////////////////////
1: import java.util.concurrent.atomic.AtomicBoolean;
commit:960dce7
/////////////////////////////////////////////////////////////////////////
1: /**
1:  * Licensed to the Apache Software Foundation (ASF) under one or more
1:  * contributor license agreements.  See the NOTICE file distributed with
1:  * this work for additional information regarding copyright ownership.
1:  * The ASF licenses this file to You under the Apache License, Version 2.0
1:  * (the "License"); you may not use this file except in compliance with
1:  * the License.  You may obtain a copy of the License at
0:  * 
0:  * http://www.apache.org/licenses/LICENSE-2.0
0:  * 
1:  * Unless required by applicable law or agreed to in writing, software
1:  * distributed under the License is distributed on an "AS IS" BASIS,
1:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:  * See the License for the specific language governing permissions and
1:  * limitations under the License.
1:  */
commit:a88906f
/////////////////////////////////////////////////////////////////////////
1: package org.apache.activemq.tool.sampler;
1: 
0: import org.apache.activemq.tool.reports.PerformanceReportWriter;
0: import org.apache.activemq.tool.properties.AbstractObjectProperties;
1: 
0: import edu.emory.mathcs.backport.java.util.concurrent.atomic.AtomicBoolean;
1: 
1: public abstract class AbstractPerformanceSampler extends AbstractObjectProperties implements PerformanceSampler {
0: 	protected long rampUpTime   = 30 * 1000; // 30 secs
0: 	protected long rampDownTime = 30 * 1000; // 30 secs
0: 	protected long duration     = 5 * 60 * 1000; // 5 mins
0: 	protected long interval     = 1000; // 1 sec
0: 	protected PerformanceReportWriter perfReportWriter = null;
0: 	protected PerformanceEventListener perfEventListener = null;
0: 	protected final AtomicBoolean isRunning = new AtomicBoolean(false);
1: 
0: 	protected long sampleIndex = 0;
1: 
0: 	public long getRampUpTime() {
0: 		return rampUpTime;
1: 	}
1: 
0: 	public void setRampUpTime(long rampUpTime) {
0: 		this.rampUpTime = rampUpTime;
1: 	}
1: 
0: 	public long getRampDownTime() {
0: 		return rampDownTime;
1: 	}
1: 
0: 	public void setRampDownTime(long rampDownTime) {
0: 		this.rampDownTime = rampDownTime;
1: 	}
1: 
0: 	public long getDuration() {
0: 		return duration;
1: 	}
1: 
0: 	public void setDuration(long duration) {
0: 		this.duration = duration;
1: 	}
1: 
0: 	public long getInterval() {
0: 		return interval;
1: 	}
1: 
0: 	public void setInterval(long interval) {
0: 		this.interval = interval;
1: 	}
1: 
0: 	public PerformanceReportWriter getPerfReportWriter() {
0: 		return perfReportWriter;
1: 	}
1: 
0: 	public void setPerfReportWriter(PerformanceReportWriter perfReportWriter) {
0: 		this.perfReportWriter = perfReportWriter;
1: 	}
1: 
0: 	public PerformanceEventListener getPerfEventListener() {
0: 		return perfEventListener;
1: 	}
1: 
0: 	public void setPerfEventListener(PerformanceEventListener perfEventListener) {
0: 		this.perfEventListener = perfEventListener;
1: 	}
1: 
0:     public void startSampler() {
0:         isRunning.set(true);
1:         Thread t = new Thread(this);
1:         t.start();
1:     }
1: 
1:     public void run() {
1:         try {
1:             onRampUpStart();
1:             if (perfEventListener != null) {
0:             	perfEventListener.onRampUpStart(this);
1:             }
1: 
1:             try {
0:                 Thread.sleep(rampUpTime);
1:             } catch (InterruptedException e) {
1:                 e.printStackTrace();
1:             }
1: 
1:             onSamplerStart();
1:             if (perfEventListener != null) {
0:             	perfEventListener.onSamplerStart(this);
1:             }
1: 
1:             sample();
1: 
1:             onSamplerEnd();
1:             if (perfEventListener != null) {
0:             	perfEventListener.onSamplerEnd(this);
1:             }
1: 
1:             try {
0:                 Thread.sleep(rampDownTime);
1:             } catch (InterruptedException e) {
1:                 e.printStackTrace();
1:             }
1: 
1:             onRampDownEnd();
1:             if (perfEventListener != null) {
0:             	perfEventListener.onRampDownEnd(this);
1:             }
1:         } finally {
0:             isRunning.set(false);
0:             synchronized (isRunning) {
0:                 isRunning.notifyAll();
1:             }
1:         }
1: 	}
1: 
1:     protected void sample() {
0:         // Compute for the actual duration window of the sampler
0:         long endTime = System.currentTimeMillis() + duration - rampDownTime - rampUpTime;
1: 
0:         while (System.currentTimeMillis() < endTime) {
1:             try {
1:                 Thread.sleep(interval);
1:             } catch (InterruptedException e) {
1:                 e.printStackTrace();
1:             }
1:             sampleData();
1:             sampleIndex++;
1:         }
1:     }
1: 
1:     public abstract void sampleData();
1: 
0:     public boolean isRunning() {
0: 		return isRunning.get();
1: 	}
1: 
0: 	public void waitUntilDone() {
0: 		while (isRunning()) {
1:             try {
0:                 synchronized (isRunning) {
0:                     isRunning.wait(0);
1:                 }
1:             } catch (InterruptedException e) {
1:                 e.printStackTrace();
1:             }
1:         }
1: 	}
1: 
1:     // Call back functions to customize behavior of thread.
0:     protected void onRampUpStart() {}
0:     protected void onSamplerStart() {}
0:     protected void onSamplerEnd() {}
0:     protected void onRampDownEnd() {}
1: }
author:James Strachan
-------------------------------------------------------------------------------
commit:dd55c21
author:Adrian T. Co
-------------------------------------------------------------------------------
commit:cc1986f
/////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////
0:             sample();
/////////////////////////////////////////////////////////////////////////
0:     protected void sample() {
0:         // Compute for the actual duration window of the sampler
0:         long endTime = System.currentTimeMillis() + duration - rampDownTime - rampUpTime;
0: 
0:         while (System.currentTimeMillis() < endTime) {
0:             try {
0:                 Thread.sleep(interval);
0:             } catch (InterruptedException e) {
0:                 e.printStackTrace();
0:             }
0:             sampleData();
0:             sampleIndex++;
0:         }
0:     }
0: 
0:     public abstract void sampleData();
commit:80bf241
/////////////////////////////////////////////////////////////////////////
0: package org.apache.activemq.tool.sampler;
0: 
0: import org.apache.activemq.tool.reports.PerformanceReportWriter;
0: import org.apache.activemq.tool.properties.AbstractObjectProperties;
0: 
0: import edu.emory.mathcs.backport.java.util.concurrent.atomic.AtomicBoolean;
0: 
0: public abstract class AbstractPerformanceSampler extends AbstractObjectProperties implements PerformanceSampler {
0: 	protected long rampUpTime   = 30 * 1000; // 30 secs
0: 	protected long rampDownTime = 30 * 1000; // 30 secs
0: 	protected long duration     = 5 * 60 * 1000; // 5 mins
0: 	protected long interval     = 1000; // 1 sec
0: 	protected PerformanceReportWriter perfReportWriter = null;
0: 	protected PerformanceEventListener perfEventListener = null;
0: 	protected final AtomicBoolean isRunning = new AtomicBoolean(false);
0: 
0: 	protected long sampleIndex = 0;
0: 
0: 	public long getRampUpTime() {
0: 		return rampUpTime;
0: 	}
0: 
0: 	public void setRampUpTime(long rampUpTime) {
0: 		this.rampUpTime = rampUpTime;
0: 	}
0: 
0: 	public long getRampDownTime() {
0: 		return rampDownTime;
0: 	}
0: 
0: 	public void setRampDownTime(long rampDownTime) {
0: 		this.rampDownTime = rampDownTime;
0: 	}
0: 
0: 	public long getDuration() {
0: 		return duration;
0: 	}
0: 
0: 	public void setDuration(long duration) {
0: 		this.duration = duration;
0: 	}
0: 
0: 	public long getInterval() {
0: 		return interval;
0: 	}
0: 
0: 	public void setInterval(long interval) {
0: 		this.interval = interval;
0: 	}
0: 
0: 	public PerformanceReportWriter getPerfReportWriter() {
0: 		return perfReportWriter;
0: 	}
0: 
0: 	public void setPerfReportWriter(PerformanceReportWriter perfReportWriter) {
0: 		this.perfReportWriter = perfReportWriter;
0: 	}
0: 
0: 	public PerformanceEventListener getPerfEventListener() {
0: 		return perfEventListener;
0: 	}
0: 
0: 	public void setPerfEventListener(PerformanceEventListener perfEventListener) {
0: 		this.perfEventListener = perfEventListener;
0: 	}
0: 
0:     public void startSampler() {
0:         isRunning.set(true);
0:         Thread t = new Thread(this);
0:         t.start();
0:     }
0: 
0:     public void run() {
0:         try {
0:             // Compute for the actual duration window of the sampler
0:             long endTime = System.currentTimeMillis() + duration - rampDownTime;
0: 
0:             onRampUpStart();
0:             if (perfEventListener != null) {
0:             	perfEventListener.onRampUpStart(this);
0:             }
0: 
0:             try {
0:                 Thread.sleep(rampUpTime);
0:             } catch (InterruptedException e) {
0:                 e.printStackTrace();
0:             }
0: 
0:             onSamplerStart();
0:             if (perfEventListener != null) {
0:             	perfEventListener.onSamplerStart(this);
0:             }
0: 
0:             while (System.currentTimeMillis() < endTime) {
0:                 try {
0:                     Thread.sleep(interval);
0:                 } catch (InterruptedException e) {
0:                     e.printStackTrace();
0:                 }
0:                 sampleData();
0:                 sampleIndex++;
0:             }
0: 
0:             onSamplerEnd();
0:             if (perfEventListener != null) {
0:             	perfEventListener.onSamplerEnd(this);
0:             }
0: 
0:             try {
0:                 Thread.sleep(rampDownTime);
0:             } catch (InterruptedException e) {
0:                 e.printStackTrace();
0:             }
0: 
0:             onRampDownEnd();
0:             if (perfEventListener != null) {
0:             	perfEventListener.onRampDownEnd(this);
0:             }
0:         } finally {
0:             isRunning.set(false);
0:             synchronized (isRunning) {
0:                 isRunning.notifyAll();
0:             }
0:         }
0: 	}
0: 
0: 	public abstract void sampleData();
0: 
0:     public boolean isRunning() {
0: 		return isRunning.get();
0: 	}
0: 
0: 	public void waitUntilDone() {
0: 		while (isRunning()) {
0:             try {
0:                 synchronized (isRunning) {
0:                     isRunning.wait(0);
0:                 }
0:             } catch (InterruptedException e) {
0:                 e.printStackTrace();
0:             }
0:         }
0: 	}
0: 
0:     // Call back functions to customize behavior of thread.
0:     protected void onRampUpStart() {}
0:     protected void onSamplerStart() {}
0:     protected void onSamplerEnd() {}
0:     protected void onRampDownEnd() {}
0: }
============================================================================