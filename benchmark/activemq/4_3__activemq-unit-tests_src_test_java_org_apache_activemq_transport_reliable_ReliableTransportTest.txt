1:2a076d0: /**
1:57b4941:  * Licensed to the Apache Software Foundation (ASF) under one or more
1:57b4941:  * contributor license agreements.  See the NOTICE file distributed with
1:57b4941:  * this work for additional information regarding copyright ownership.
1:57b4941:  * The ASF licenses this file to You under the Apache License, Version 2.0
1:57b4941:  * (the "License"); you may not use this file except in compliance with
1:57b4941:  * the License.  You may obtain a copy of the License at
4:2a076d0:  *
1:230a86c:  *      http://www.apache.org/licenses/LICENSE-2.0
1:2a076d0:  *
1:2a076d0:  * Unless required by applicable law or agreed to in writing, software
1:2a076d0:  * distributed under the License is distributed on an "AS IS" BASIS,
1:2a076d0:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:2a076d0:  * See the License for the specific language governing permissions and
1:2a076d0:  * limitations under the License.
1:2a076d0:  */
1:2a076d0: package org.apache.activemq.transport.reliable;
19:2a076d0: 
1:f812e34: import java.util.Queue;
1:2a076d0: 
1:f812e34: import junit.framework.TestCase;
1:2a076d0: import org.apache.activemq.command.ConsumerInfo;
1:2a076d0: import org.apache.activemq.transport.StubTransport;
1:2a076d0: import org.apache.activemq.transport.StubTransportListener;
1:8bf987b: import org.slf4j.Logger;
1:8bf987b: import org.slf4j.LoggerFactory;
1:2a076d0: 
1:2a076d0: /**
1:0bbc0ac:  * 
1:2a076d0:  */
1:2a076d0: public class ReliableTransportTest extends TestCase {
1:93dc39b: 
1:8bf987b:     private static final Logger LOG = LoggerFactory.getLogger(ReliableTransportTest.class);
1:2a076d0: 
1:2a076d0:     protected ReliableTransport transport;
1:2a076d0:     protected StubTransportListener listener = new StubTransportListener();
1:2a076d0:     protected ReplayStrategy replayStrategy;
1:2a076d0: 
1:2a076d0:     public void testValidSequenceOfPackets() throws Exception {
1:f812e34:         int[] sequenceNumbers = {1, 2, 3, 4, 5, 6, 7};
1:f812e34: 
1:2a076d0:         sendStreamOfCommands(sequenceNumbers, true);
2:2a076d0:     }
1:f812e34: 
1:2a076d0:     public void testValidWrapAroundPackets() throws Exception {
1:2a076d0:         int[] sequenceNumbers = new int[10];
1:f812e34: 
1:2a076d0:         int value = Integer.MAX_VALUE - 3;
1:2a076d0:         transport.setExpectedCounter(value);
1:f812e34: 
1:2a076d0:         for (int i = 0; i < 10; i++) {
1:fc00993:             LOG.info("command: " + i + " = " + value);
1:2a076d0:             sequenceNumbers[i] = value++;
1:2a076d0:         }
1:f812e34: 
1:2a076d0:         sendStreamOfCommands(sequenceNumbers, true);
1:2a076d0:     }
1:f812e34: 
1:2a076d0:     public void testDuplicatePacketsDropped() throws Exception {
1:f812e34:         int[] sequenceNumbers = {1, 2, 2, 3, 4, 5, 6, 7};
1:f812e34: 
1:2a076d0:         sendStreamOfCommands(sequenceNumbers, true, 7);
1:2a076d0:     }
1:f812e34: 
1:2a076d0:     public void testOldDuplicatePacketsDropped() throws Exception {
1:f812e34:         int[] sequenceNumbers = {1, 2, 3, 4, 5, 2, 6, 7};
1:f812e34: 
1:2a076d0:         sendStreamOfCommands(sequenceNumbers, true, 7);
1:2a076d0:     }
1:f812e34: 
1:2a076d0:     public void testOldDuplicatePacketsDroppedUsingNegativeCounters() throws Exception {
1:f812e34:         int[] sequenceNumbers = {-3, -1, -3, -2, -1, 0, 1, -1, 3, 2, 0, 2, 4};
1:f812e34: 
1:2a076d0:         transport.setExpectedCounter(-3);
1:f812e34: 
1:2a076d0:         sendStreamOfCommands(sequenceNumbers, true, 8);
1:2a076d0:     }
1:f812e34: 
1:2a076d0:     public void testWrongOrderOfPackets() throws Exception {
1:f812e34:         int[] sequenceNumbers = {4, 3, 1, 5, 2, 7, 6, 8, 10, 9};
1:2a076d0: 
1:2a076d0:         sendStreamOfCommands(sequenceNumbers, true);
1:2a076d0:     }
1:2a076d0: 
1:2a076d0:     public void testMissingPacketsFails() throws Exception {
1:f812e34:         int[] sequenceNumbers = {1, 2, /* 3, */4, 5, 6, 7, 8, 9, 10};
1:2a076d0: 
1:2a076d0:         sendStreamOfCommands(sequenceNumbers, false);
1:2a076d0:     }
1:2a076d0: 
1:2a076d0:     protected void sendStreamOfCommands(int[] sequenceNumbers, boolean expected) {
1:2a076d0:         sendStreamOfCommands(sequenceNumbers, expected, sequenceNumbers.length);
1:2a076d0:     }
1:f812e34: 
1:2a076d0:     protected void sendStreamOfCommands(int[] sequenceNumbers, boolean expected, int expectedCount) {
1:2a076d0:         for (int i = 0; i < sequenceNumbers.length; i++) {
1:2a076d0:             int commandId = sequenceNumbers[i];
1:f812e34: 
1:2a076d0:             ConsumerInfo info = new ConsumerInfo();
1:2a076d0:             info.setSelector("Cheese: " + commandId);
1:2a076d0:             info.setCommandId(commandId);
1:2a076d0: 
1:2a076d0:             transport.onCommand(info);
1:2a076d0:         }
1:f812e34: 
1:2a076d0:         Queue exceptions = listener.getExceptions();
1:2a076d0:         Queue commands = listener.getCommands();
1:2a076d0:         if (expected) {
1:2a076d0:             if (!exceptions.isEmpty()) {
1:f812e34:                 Exception e = (Exception)exceptions.remove();
1:2a076d0:                 e.printStackTrace();
1:2a076d0:                 fail("Caught exception: " + e);
1:2a076d0:             }
1:2a076d0:             assertEquals("number of messages received", expectedCount, commands.size());
1:f812e34: 
1:2a076d0:             assertEquals("Should have no buffered commands", 0, transport.getBufferedCommandCount());
1:f812e34:         } else {
1:2a076d0:             assertTrue("Should have received an exception!", exceptions.size() > 0);
1:f812e34:             Exception e = (Exception)exceptions.remove();
1:fc00993:             LOG.info("Caught expected response: " + e);
1:2a076d0:         }
1:2a076d0:     }
1:2a076d0: 
1:2a076d0:     protected void setUp() throws Exception {
1:2a076d0:         if (replayStrategy == null) {
1:2a076d0:             replayStrategy = new ExceptionIfDroppedReplayStrategy();
1:2a076d0:         }
1:2a076d0:         transport = new ReliableTransport(new StubTransport(), replayStrategy);
1:2a076d0:         transport.setTransportListener(listener);
1:2a076d0:         transport.start();
1:2a076d0:     }
1:2a076d0: 
1:2a076d0: }
============================================================================
author:Timothy A. Bish
-------------------------------------------------------------------------------
commit:ef24cc9
author:Hiram R. Chirino
-------------------------------------------------------------------------------
commit:0bbc0ac
/////////////////////////////////////////////////////////////////////////
1:  * 
commit:fc00993
/////////////////////////////////////////////////////////////////////////
0:     private static final Log LOG = LogFactory.getLog(ReliableTransportTest.class);
/////////////////////////////////////////////////////////////////////////
1:             LOG.info("command: " + i + " = " + value);
/////////////////////////////////////////////////////////////////////////
1:             LOG.info("Caught expected response: " + e);
commit:f812e34
/////////////////////////////////////////////////////////////////////////
1: import java.util.Queue;
1: import junit.framework.TestCase;
/////////////////////////////////////////////////////////////////////////
1:         int[] sequenceNumbers = {1, 2, 3, 4, 5, 6, 7};
1: 
1: 
1: 
1: 
1: 
1: 
1:         int[] sequenceNumbers = {1, 2, 2, 3, 4, 5, 6, 7};
1: 
1: 
1:         int[] sequenceNumbers = {1, 2, 3, 4, 5, 2, 6, 7};
1: 
1: 
1:         int[] sequenceNumbers = {-3, -1, -3, -2, -1, 0, 1, -1, 3, 2, 0, 2, 4};
1: 
1: 
1: 
1:         int[] sequenceNumbers = {4, 3, 1, 5, 2, 7, 6, 8, 10, 9};
1:         int[] sequenceNumbers = {1, 2, /* 3, */4, 5, 6, 7, 8, 9, 10};
/////////////////////////////////////////////////////////////////////////
1: 
1: 
1: 
1:                 Exception e = (Exception)exceptions.remove();
1: 
1:         } else {
1:             Exception e = (Exception)exceptions.remove();
commit:230a86c
/////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////
1:  *      http://www.apache.org/licenses/LICENSE-2.0
commit:86cbdfd
/////////////////////////////////////////////////////////////////////////
0: import java.util.Queue;
commit:57b4941
/////////////////////////////////////////////////////////////////////////
1:  * Licensed to the Apache Software Foundation (ASF) under one or more
1:  * contributor license agreements.  See the NOTICE file distributed with
1:  * this work for additional information regarding copyright ownership.
1:  * The ASF licenses this file to You under the Apache License, Version 2.0
1:  * (the "License"); you may not use this file except in compliance with
1:  * the License.  You may obtain a copy of the License at
commit:93dc39b
/////////////////////////////////////////////////////////////////////////
0: import junit.framework.TestCase;
0: import org.apache.commons.logging.Log;
0: import org.apache.commons.logging.LogFactory;
0: import edu.emory.mathcs.backport.java.util.Queue;
/////////////////////////////////////////////////////////////////////////
0:     protected static final Log log = LogFactory.getLog(ReliableTransportTest.class);
1: 
/////////////////////////////////////////////////////////////////////////
0:             log.info("command: " + i + " = " + value);
/////////////////////////////////////////////////////////////////////////
0:             log.info("Caught expected response: " + e);
author:Bosanac Dejan
-------------------------------------------------------------------------------
commit:8bf987b
/////////////////////////////////////////////////////////////////////////
1: import org.slf4j.Logger;
1: import org.slf4j.LoggerFactory;
1:     private static final Logger LOG = LoggerFactory.getLogger(ReliableTransportTest.class);
author:James Strachan
-------------------------------------------------------------------------------
commit:2a076d0
/////////////////////////////////////////////////////////////////////////
1: /**
1:  *
0:  * Copyright 2005-2006 The Apache Software Foundation
1:  *
0:  * Licensed under the Apache License, Version 2.0 (the "License");
0:  * you may not use this file except in compliance with the License.
0:  * You may obtain a copy of the License at
1:  *
0:  * http://www.apache.org/licenses/LICENSE-2.0
1:  *
1:  * Unless required by applicable law or agreed to in writing, software
1:  * distributed under the License is distributed on an "AS IS" BASIS,
1:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:  * See the License for the specific language governing permissions and
1:  * limitations under the License.
1:  */
1: package org.apache.activemq.transport.reliable;
1: 
0: import edu.emory.mathcs.backport.java.util.Queue;
1: 
1: import org.apache.activemq.command.ConsumerInfo;
1: import org.apache.activemq.transport.StubTransport;
1: import org.apache.activemq.transport.StubTransportListener;
0: import org.apache.activemq.transport.reliable.ExceptionIfDroppedReplayStrategy;
0: import org.apache.activemq.transport.reliable.ReliableTransport;
0: import org.apache.activemq.transport.reliable.ReplayStrategy;
1: 
0: import junit.framework.TestCase;
1: 
1: /**
1:  * 
0:  * @version $Revision$
1:  */
1: public class ReliableTransportTest extends TestCase {
1: 
1:     protected ReliableTransport transport;
1:     protected StubTransportListener listener = new StubTransportListener();
1:     protected ReplayStrategy replayStrategy;
1: 
1:     public void testValidSequenceOfPackets() throws Exception {
0:         int[] sequenceNumbers = { 1, 2, 3, 4, 5, 6, 7 };
1:         
1:         sendStreamOfCommands(sequenceNumbers, true);
1:     }
1:     
1:     public void testValidWrapAroundPackets() throws Exception {
1:         int[] sequenceNumbers = new int[10];
1:         
1:         int value = Integer.MAX_VALUE - 3;
1:         transport.setExpectedCounter(value);
1:         
1:         for (int i = 0; i < 10; i++) {
0:             System.out.println("command: " + i + " = " + value);
1:             sequenceNumbers[i] = value++;
1:         }
1:         
1:         sendStreamOfCommands(sequenceNumbers, true);
1:     }
1:     
1:     public void testDuplicatePacketsDropped() throws Exception {
0:         int[] sequenceNumbers = { 1, 2, 2, 3, 4, 5, 6, 7 };
1:         
1:         sendStreamOfCommands(sequenceNumbers, true, 7);
1:     }
1:     
1:     public void testOldDuplicatePacketsDropped() throws Exception {
0:         int[] sequenceNumbers = { 1, 2, 3, 4, 5, 2, 6, 7 };
1:         
1:         sendStreamOfCommands(sequenceNumbers, true, 7);
1:     }
1:     
1:     public void testOldDuplicatePacketsDroppedUsingNegativeCounters() throws Exception {
0:         int[] sequenceNumbers = { -3, -1, -3, -2, -1, 0, 1, -1, 3, 2, 0, 2, 4 };
1:         
1:         transport.setExpectedCounter(-3);
1:         
1:         sendStreamOfCommands(sequenceNumbers, true, 8);
1:     }
1:     
1:     public void testWrongOrderOfPackets() throws Exception {
0:         int[] sequenceNumbers = { 4, 3, 1, 5, 2, 7, 6, 8, 10, 9 };
1: 
1:         sendStreamOfCommands(sequenceNumbers, true);
1:     }
1: 
1:     public void testMissingPacketsFails() throws Exception {
0:         int[] sequenceNumbers = { 1, 2, /* 3, */  4, 5, 6, 7, 8, 9, 10 };
1: 
1:         sendStreamOfCommands(sequenceNumbers, false);
1:     }
1: 
1:     protected void sendStreamOfCommands(int[] sequenceNumbers, boolean expected) {
1:         sendStreamOfCommands(sequenceNumbers, expected, sequenceNumbers.length);
1:     }
1:     
1:     protected void sendStreamOfCommands(int[] sequenceNumbers, boolean expected, int expectedCount) {
1:         for (int i = 0; i < sequenceNumbers.length; i++) {
1:             int commandId = sequenceNumbers[i];
1:             
1:             ConsumerInfo info = new ConsumerInfo();
1:             info.setSelector("Cheese: " + commandId);
1:             info.setCommandId(commandId);
1: 
1:             transport.onCommand(info);
1:         }
1:         
1:         Queue exceptions = listener.getExceptions();
1:         Queue commands = listener.getCommands();
1:         if (expected) {
1:             if (!exceptions.isEmpty()) {
0:                 Exception e = (Exception) exceptions.remove();
1:                 e.printStackTrace();
1:                 fail("Caught exception: " + e);
1:             }
1:             assertEquals("number of messages received", expectedCount, commands.size());
1:             
1:             assertEquals("Should have no buffered commands", 0, transport.getBufferedCommandCount());
1:                    }
0:         else {
1:             assertTrue("Should have received an exception!", exceptions.size() > 0);
0:             Exception e = (Exception) exceptions.remove();
0:             System.out.println("Caught expected response: " + e);
1:         }
1:     }
1: 
1:     protected void setUp() throws Exception {
1:         if (replayStrategy == null) {
1:             replayStrategy = new ExceptionIfDroppedReplayStrategy();
1:         }
1:         transport = new ReliableTransport(new StubTransport(), replayStrategy);
1:         transport.setTransportListener(listener);
1:         transport.start();
1:     }
1: 
1: }
============================================================================