2:d29ca2a: /**
1:57b4941:  * Licensed to the Apache Software Foundation (ASF) under one or more
1:57b4941:  * contributor license agreements.  See the NOTICE file distributed with
1:57b4941:  * this work for additional information regarding copyright ownership.
1:57b4941:  * The ASF licenses this file to You under the Apache License, Version 2.0
1:57b4941:  * (the "License"); you may not use this file except in compliance with
1:57b4941:  * the License.  You may obtain a copy of the License at
3:d29ca2a:  *
1:230a86c:  *      http://www.apache.org/licenses/LICENSE-2.0
1:d29ca2a:  *
1:d29ca2a:  * Unless required by applicable law or agreed to in writing, software
1:d29ca2a:  * distributed under the License is distributed on an "AS IS" BASIS,
1:d29ca2a:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:d29ca2a:  * See the License for the specific language governing permissions and
1:d29ca2a:  * limitations under the License.
2:d29ca2a:  */
2:d29ca2a: 
1:d29ca2a: package org.apache.activemq.command;
1:d29ca2a: 
1:d29ca2a: import java.io.BufferedInputStream;
1:d29ca2a: import java.io.DataInputStream;
1:d29ca2a: import java.io.DataOutputStream;
1:d29ca2a: import java.io.EOFException;
1:d29ca2a: import java.io.IOException;
1:d29ca2a: import java.io.InputStream;
1:d29ca2a: import java.io.OutputStream;
1:d29ca2a: import java.util.zip.DeflaterOutputStream;
1:d29ca2a: import java.util.zip.InflaterInputStream;
1:d29ca2a: 
1:f451ad0: import javax.jms.JMSException;
1:f451ad0: import javax.jms.MessageEOFException;
1:f451ad0: import javax.jms.MessageFormatException;
1:f451ad0: import javax.jms.MessageNotReadableException;
1:f451ad0: import javax.jms.MessageNotWriteableException;
1:f451ad0: import javax.jms.StreamMessage;
1:f451ad0: 
1:f451ad0: import org.apache.activemq.ActiveMQConnection;
1:88acb0e: import org.apache.activemq.util.ByteArrayInputStream;
1:88acb0e: import org.apache.activemq.util.ByteArrayOutputStream;
1:88acb0e: import org.apache.activemq.util.ByteSequence;
1:f451ad0: import org.apache.activemq.util.JMSExceptionSupport;
1:09ebb72: import org.apache.activemq.util.MarshallingSupport;
1:f451ad0: 
1:d29ca2a: /**
1:d29ca2a:  * A <CODE>StreamMessage</CODE> object is used to send a stream of primitive
1:d29ca2a:  * types in the Java programming language. It is filled and read sequentially.
1:d29ca2a:  * It inherits from the <CODE>Message</CODE> interface and adds a stream
1:230a86c:  * message body. Its methods are based largely on those found in
1:230a86c:  * <CODE>java.io.DataInputStream</CODE> and
1:230a86c:  * <CODE>java.io.DataOutputStream</CODE>. <p/>
1:d29ca2a:  * <P>
1:d29ca2a:  * The primitive types can be read or written explicitly using methods for each
1:d29ca2a:  * type. They may also be read or written generically as objects. For instance,
1:230a86c:  * a call to <CODE>StreamMessage.writeInt(6)</CODE> is equivalent to
1:230a86c:  * <CODE>StreamMessage.writeObject(new
1:230a86c:  * Integer(6))</CODE>. Both forms are
1:230a86c:  * provided, because the explicit form is convenient for static programming, and
1:230a86c:  * the object form is needed when types are not known at compile time. <p/>
1:d29ca2a:  * <P>
1:d29ca2a:  * When the message is first created, and when <CODE>clearBody</CODE> is
1:d29ca2a:  * called, the body of the message is in write-only mode. After the first call
1:d29ca2a:  * to <CODE>reset</CODE> has been made, the message body is in read-only mode.
1:d29ca2a:  * After a message has been sent, the client that sent it can retain and modify
1:d29ca2a:  * it without affecting the message that has been sent. The same message object
1:d29ca2a:  * can be sent multiple times. When a message has been received, the provider
1:d29ca2a:  * has called <CODE>reset</CODE> so that the message body is in read-only mode
1:d29ca2a:  * for the client. <p/>
1:d29ca2a:  * <P>
1:d29ca2a:  * If <CODE>clearBody</CODE> is called on a message in read-only mode, the
1:d29ca2a:  * message body is cleared and the message body is in write-only mode. <p/>
1:d29ca2a:  * <P>
1:230a86c:  * If a client attempts to read a message in write-only mode, a
1:230a86c:  * <CODE>MessageNotReadableException</CODE> is thrown. <p/>
1:d29ca2a:  * <P>
1:230a86c:  * If a client attempts to write a message in read-only mode, a
1:230a86c:  * <CODE>MessageNotWriteableException</CODE> is thrown. <p/>
1:d29ca2a:  * <P>
1:d29ca2a:  * <CODE>StreamMessage</CODE> objects support the following conversion table.
1:230a86c:  * The marked cases must be supported. The unmarked cases must throw a
1:230a86c:  * <CODE>JMSException</CODE>. The <CODE>String</CODE>-to-primitive
1:230a86c:  * conversions may throw a runtime exception if the primitive's
1:230a86c:  * <CODE>valueOf()</CODE> method does not accept it as a valid
1:230a86c:  * <CODE>String</CODE> representation of the primitive. <p/>
1:d29ca2a:  * <P>
1:d29ca2a:  * A value written as the row type can be read as the column type. <p/>
1:d29ca2a:  *
1:230a86c:  * <PRE>
1:230a86c:  *  | | boolean byte short char int long float double String byte[]
1:d29ca2a:  * |----------------------------------------------------------------------
1:d29ca2a:  * |boolean | X X |byte | X X X X X |short | X X X X |char | X X |int | X X X
1:d29ca2a:  * |long | X X |float | X X X |double | X X |String | X X X X X X X X |byte[] |
1:d29ca2a:  * X |----------------------------------------------------------------------
1:d29ca2a:  *
1:d29ca2a:  * </PRE>
1:d29ca2a:  *
3:d29ca2a:  * <p/>
1:d29ca2a:  * <P>
1:d29ca2a:  * Attempting to read a null value as a primitive type must be treated as
1:d29ca2a:  * calling the primitive's corresponding <code>valueOf(String)</code>
1:d29ca2a:  * conversion method with a null value. Since <code>char</code> does not
1:d29ca2a:  * support a <code>String</code> conversion, attempting to read a null value
1:d29ca2a:  * as a <code>char</code> must throw a <code>NullPointerException</code>.
1:d29ca2a:  *
1:4afa5d6:  * @openwire:marshaller code="27"
1:d29ca2a:  * @see javax.jms.Session#createStreamMessage()
1:d29ca2a:  * @see javax.jms.BytesMessage
1:d29ca2a:  * @see javax.jms.MapMessage
1:d29ca2a:  * @see javax.jms.Message
1:d29ca2a:  * @see javax.jms.ObjectMessage
1:d29ca2a:  * @see javax.jms.TextMessage
1:d29ca2a:  */
1:d29ca2a: public class ActiveMQStreamMessage extends ActiveMQMessage implements StreamMessage {
1:d29ca2a: 
1:d29ca2a:     public static final byte DATA_STRUCTURE_TYPE = CommandTypes.ACTIVEMQ_STREAM_MESSAGE;
1:d29ca2a: 
1:fc00993:     protected transient DataOutputStream dataOut;
1:fc00993:     protected transient ByteArrayOutputStream bytesOut;
1:fc00993:     protected transient DataInputStream dataIn;
1:fc00993:     protected transient int remainingBytes = -1;
1:d29ca2a: 
1:cb5c29d:     @Override
1:d29ca2a:     public Message copy() {
1:d29ca2a:         ActiveMQStreamMessage copy = new ActiveMQStreamMessage();
1:d29ca2a:         copy(copy);
1:d29ca2a:         return copy;
1:d29ca2a:     }
1:d29ca2a: 
1:d29ca2a:     private void copy(ActiveMQStreamMessage copy) {
1:d29ca2a:         storeContent();
1:d29ca2a:         super.copy(copy);
1:d29ca2a:         copy.dataOut = null;
1:d29ca2a:         copy.bytesOut = null;
1:d29ca2a:         copy.dataIn = null;
1:d29ca2a:     }
1:d29ca2a: 
1:cb5c29d:     @Override
1:8cf4795:     public void onSend() throws JMSException {
1:d29ca2a:         super.onSend();
1:d29ca2a:         storeContent();
1:d29ca2a:     }
1:d29ca2a: 
1:cb5c29d:     @Override
1:41c9366:     public void storeContent() {
1:d29ca2a:         if (dataOut != null) {
1:d29ca2a:             try {
1:d29ca2a:                 dataOut.close();
1:d29ca2a:                 setContent(bytesOut.toByteSequence());
1:d29ca2a:                 bytesOut = null;
1:d29ca2a:                 dataOut = null;
1:d29ca2a:             } catch (IOException ioe) {
1:d29ca2a:                 throw new RuntimeException(ioe);
1:d29ca2a:             }
1:d29ca2a:         }
1:d29ca2a:     }
1:d29ca2a: 
1:41c9366:     @Override
1:f82993d:     public boolean isContentMarshalled() {
1:f82993d:         return content != null || dataOut == null;
1:f82993d:     }
1:f82993d: 
1:f82993d:     @Override
1:d29ca2a:     public byte getDataStructureType() {
1:d29ca2a:         return DATA_STRUCTURE_TYPE;
1:d29ca2a:     }
1:d29ca2a: 
1:cb5c29d:     @Override
1:05a8cba:     public String getJMSXMimeType() {
1:05a8cba:         return "jms/stream-message";
1:58b8d19:     }
1:d29ca2a: 
1:d29ca2a:     /**
1:d29ca2a:      * Clears out the message body. Clearing a message's body does not clear its
1:d29ca2a:      * header values or property entries. <p/>
1:d29ca2a:      * <P>
1:d29ca2a:      * If this message body was read-only, calling this method leaves the
1:d29ca2a:      * message body in the same state as an empty body in a newly created
1:d29ca2a:      * message.
1:d29ca2a:      *
1:230a86c:      * @throws JMSException if the JMS provider fails to clear the message body
1:230a86c:      *                 due to some internal error.
1:d29ca2a:      */
1:d29ca2a: 
1:cb5c29d:     @Override
1:d29ca2a:     public void clearBody() throws JMSException {
1:d29ca2a:         super.clearBody();
1:d29ca2a:         this.dataOut = null;
1:d29ca2a:         this.dataIn = null;
1:d29ca2a:         this.bytesOut = null;
1:230a86c:         this.remainingBytes = -1;
1:d29ca2a:     }
1:d29ca2a: 
1:d29ca2a:     /**
1:d29ca2a:      * Reads a <code>boolean</code> from the stream message.
1:d29ca2a:      *
1:d29ca2a:      * @return the <code>boolean</code> value read
1:230a86c:      * @throws JMSException if the JMS provider fails to read the message due to
1:230a86c:      *                 some internal error.
1:230a86c:      * @throws MessageEOFException if unexpected end of message stream has been
1:230a86c:      *                 reached.
1:230a86c:      * @throws MessageFormatException if this type conversion is invalid.
1:230a86c:      * @throws MessageNotReadableException if the message is in write-only mode.
1:d29ca2a:      */
1:d29ca2a: 
1:cb5c29d:     @Override
1:d29ca2a:     public boolean readBoolean() throws JMSException {
1:d29ca2a:         initializeReading();
1:d29ca2a:         try {
1:d29ca2a: 
1:d29ca2a:             this.dataIn.mark(10);
1:d29ca2a:             int type = this.dataIn.read();
1:d29ca2a:             if (type == -1) {
1:d29ca2a:                 throw new MessageEOFException("reached end of data");
1:d29ca2a:             }
1:09ebb72:             if (type == MarshallingSupport.BOOLEAN_TYPE) {
1:d29ca2a:                 return this.dataIn.readBoolean();
1:d29ca2a:             }
1:09ebb72:             if (type == MarshallingSupport.STRING_TYPE) {
1:d29ca2a:                 return Boolean.valueOf(this.dataIn.readUTF()).booleanValue();
1:d29ca2a:             }
1:09ebb72:             if (type == MarshallingSupport.NULL) {
1:d29ca2a:                 this.dataIn.reset();
1:d29ca2a:                 throw new NullPointerException("Cannot convert NULL value to boolean.");
1:d29ca2a:             } else {
1:d29ca2a:                 this.dataIn.reset();
1:d29ca2a:                 throw new MessageFormatException(" not a boolean type");
1:d29ca2a:             }
1:d29ca2a:         } catch (EOFException e) {
1:d29ca2a:             throw JMSExceptionSupport.createMessageEOFException(e);
1:d29ca2a:         } catch (IOException e) {
1:d29ca2a:             throw JMSExceptionSupport.createMessageFormatException(e);
1:d29ca2a:         }
1:d29ca2a:     }
1:d29ca2a: 
1:d29ca2a:     /**
1:d29ca2a:      * Reads a <code>byte</code> value from the stream message.
1:d29ca2a:      *
1:d29ca2a:      * @return the next byte from the stream message as a 8-bit
1:d29ca2a:      *         <code>byte</code>
1:230a86c:      * @throws JMSException if the JMS provider fails to read the message due to
1:230a86c:      *                 some internal error.
1:230a86c:      * @throws MessageEOFException if unexpected end of message stream has been
1:230a86c:      *                 reached.
1:230a86c:      * @throws MessageFormatException if this type conversion is invalid.
1:230a86c:      * @throws MessageNotReadableException if the message is in write-only mode.
1:d29ca2a:      */
1:d29ca2a: 
1:cb5c29d:     @Override
1:d29ca2a:     public byte readByte() throws JMSException {
1:d29ca2a:         initializeReading();
1:d29ca2a:         try {
1:d29ca2a: 
1:d29ca2a:             this.dataIn.mark(10);
1:d29ca2a:             int type = this.dataIn.read();
1:d29ca2a:             if (type == -1) {
1:d29ca2a:                 throw new MessageEOFException("reached end of data");
1:d29ca2a:             }
1:09ebb72:             if (type == MarshallingSupport.BYTE_TYPE) {
1:d29ca2a:                 return this.dataIn.readByte();
1:d29ca2a:             }
1:09ebb72:             if (type == MarshallingSupport.STRING_TYPE) {
1:d29ca2a:                 return Byte.valueOf(this.dataIn.readUTF()).byteValue();
1:d29ca2a:             }
1:09ebb72:             if (type == MarshallingSupport.NULL) {
1:d29ca2a:                 this.dataIn.reset();
1:d29ca2a:                 throw new NullPointerException("Cannot convert NULL value to byte.");
1:d29ca2a:             } else {
1:d29ca2a:                 this.dataIn.reset();
1:d29ca2a:                 throw new MessageFormatException(" not a byte type");
1:d29ca2a:             }
1:d29ca2a:         } catch (NumberFormatException mfe) {
1:d29ca2a:             try {
1:d29ca2a:                 this.dataIn.reset();
1:d29ca2a:             } catch (IOException ioe) {
1:d29ca2a:                 throw JMSExceptionSupport.create(ioe);
1:d29ca2a:             }
1:d29ca2a:             throw mfe;
1:d29ca2a: 
1:d29ca2a:         } catch (EOFException e) {
1:d29ca2a:             throw JMSExceptionSupport.createMessageEOFException(e);
1:d29ca2a:         } catch (IOException e) {
1:d29ca2a:             throw JMSExceptionSupport.createMessageFormatException(e);
1:d29ca2a:         }
1:d29ca2a:     }
1:d29ca2a: 
1:d29ca2a:     /**
1:d29ca2a:      * Reads a 16-bit integer from the stream message.
1:d29ca2a:      *
1:d29ca2a:      * @return a 16-bit integer from the stream message
1:230a86c:      * @throws JMSException if the JMS provider fails to read the message due to
1:230a86c:      *                 some internal error.
1:230a86c:      * @throws MessageEOFException if unexpected end of message stream has been
1:230a86c:      *                 reached.
1:230a86c:      * @throws MessageFormatException if this type conversion is invalid.
1:230a86c:      * @throws MessageNotReadableException if the message is in write-only mode.
1:d29ca2a:      */
1:d29ca2a: 
1:cb5c29d:     @Override
1:d29ca2a:     public short readShort() throws JMSException {
1:d29ca2a:         initializeReading();
1:d29ca2a:         try {
1:d29ca2a: 
1:d29ca2a:             this.dataIn.mark(17);
1:d29ca2a:             int type = this.dataIn.read();
1:d29ca2a:             if (type == -1) {
1:d29ca2a:                 throw new MessageEOFException("reached end of data");
1:d29ca2a:             }
1:09ebb72:             if (type == MarshallingSupport.SHORT_TYPE) {
1:d29ca2a:                 return this.dataIn.readShort();
1:d29ca2a:             }
1:09ebb72:             if (type == MarshallingSupport.BYTE_TYPE) {
1:d29ca2a:                 return this.dataIn.readByte();
1:d29ca2a:             }
1:09ebb72:             if (type == MarshallingSupport.STRING_TYPE) {
1:d29ca2a:                 return Short.valueOf(this.dataIn.readUTF()).shortValue();
1:d29ca2a:             }
1:09ebb72:             if (type == MarshallingSupport.NULL) {
1:d29ca2a:                 this.dataIn.reset();
1:d29ca2a:                 throw new NullPointerException("Cannot convert NULL value to short.");
1:d29ca2a:             } else {
1:d29ca2a:                 this.dataIn.reset();
1:d29ca2a:                 throw new MessageFormatException(" not a short type");
1:d29ca2a:             }
1:d29ca2a:         } catch (NumberFormatException mfe) {
1:d29ca2a:             try {
1:d29ca2a:                 this.dataIn.reset();
1:d29ca2a:             } catch (IOException ioe) {
1:d29ca2a:                 throw JMSExceptionSupport.create(ioe);
1:d29ca2a:             }
1:d29ca2a:             throw mfe;
1:d29ca2a: 
1:d29ca2a:         } catch (EOFException e) {
1:d29ca2a:             throw JMSExceptionSupport.createMessageEOFException(e);
1:d29ca2a:         } catch (IOException e) {
1:d29ca2a:             throw JMSExceptionSupport.createMessageFormatException(e);
1:d29ca2a:         }
1:d29ca2a: 
1:d29ca2a:     }
1:d29ca2a: 
1:d29ca2a:     /**
1:d29ca2a:      * Reads a Unicode character value from the stream message.
1:d29ca2a:      *
1:d29ca2a:      * @return a Unicode character from the stream message
1:230a86c:      * @throws JMSException if the JMS provider fails to read the message due to
1:230a86c:      *                 some internal error.
1:230a86c:      * @throws MessageEOFException if unexpected end of message stream has been
1:230a86c:      *                 reached.
1:230a86c:      * @throws MessageFormatException if this type conversion is invalid
1:230a86c:      * @throws MessageNotReadableException if the message is in write-only mode.
1:d29ca2a:      */
1:d29ca2a: 
1:cb5c29d:     @Override
1:d29ca2a:     public char readChar() throws JMSException {
1:d29ca2a:         initializeReading();
1:d29ca2a:         try {
1:d29ca2a: 
1:d29ca2a:             this.dataIn.mark(17);
1:d29ca2a:             int type = this.dataIn.read();
1:d29ca2a:             if (type == -1) {
1:d29ca2a:                 throw new MessageEOFException("reached end of data");
1:d29ca2a:             }
1:09ebb72:             if (type == MarshallingSupport.CHAR_TYPE) {
1:d29ca2a:                 return this.dataIn.readChar();
1:d29ca2a:             }
1:09ebb72:             if (type == MarshallingSupport.NULL) {
1:d29ca2a:                 this.dataIn.reset();
1:d29ca2a:                 throw new NullPointerException("Cannot convert NULL value to char.");
1:d29ca2a:             } else {
1:d29ca2a:                 this.dataIn.reset();
1:d29ca2a:                 throw new MessageFormatException(" not a char type");
1:d29ca2a:             }
1:d29ca2a:         } catch (NumberFormatException mfe) {
1:d29ca2a:             try {
1:d29ca2a:                 this.dataIn.reset();
1:d29ca2a:             } catch (IOException ioe) {
1:d29ca2a:                 throw JMSExceptionSupport.create(ioe);
1:d29ca2a:             }
1:d29ca2a:             throw mfe;
1:d29ca2a: 
1:d29ca2a:         } catch (EOFException e) {
1:d29ca2a:             throw JMSExceptionSupport.createMessageEOFException(e);
1:d29ca2a:         } catch (IOException e) {
1:d29ca2a:             throw JMSExceptionSupport.createMessageFormatException(e);
1:d29ca2a:         }
1:d29ca2a:     }
1:d29ca2a: 
1:d29ca2a:     /**
1:d29ca2a:      * Reads a 32-bit integer from the stream message.
1:d29ca2a:      *
1:d29ca2a:      * @return a 32-bit integer value from the stream message, interpreted as an
1:d29ca2a:      *         <code>int</code>
1:230a86c:      * @throws JMSException if the JMS provider fails to read the message due to
1:230a86c:      *                 some internal error.
1:230a86c:      * @throws MessageEOFException if unexpected end of message stream has been
1:230a86c:      *                 reached.
1:230a86c:      * @throws MessageFormatException if this type conversion is invalid.
1:230a86c:      * @throws MessageNotReadableException if the message is in write-only mode.
1:d29ca2a:      */
1:d29ca2a: 
1:cb5c29d:     @Override
1:d29ca2a:     public int readInt() throws JMSException {
1:d29ca2a:         initializeReading();
1:d29ca2a:         try {
1:d29ca2a: 
1:d29ca2a:             this.dataIn.mark(33);
1:d29ca2a:             int type = this.dataIn.read();
1:d29ca2a:             if (type == -1) {
1:d29ca2a:                 throw new MessageEOFException("reached end of data");
1:d29ca2a:             }
1:09ebb72:             if (type == MarshallingSupport.INTEGER_TYPE) {
1:d29ca2a:                 return this.dataIn.readInt();
1:d29ca2a:             }
1:09ebb72:             if (type == MarshallingSupport.SHORT_TYPE) {
1:d29ca2a:                 return this.dataIn.readShort();
1:d29ca2a:             }
1:09ebb72:             if (type == MarshallingSupport.BYTE_TYPE) {
1:d29ca2a:                 return this.dataIn.readByte();
1:d29ca2a:             }
1:09ebb72:             if (type == MarshallingSupport.STRING_TYPE) {
1:d29ca2a:                 return Integer.valueOf(this.dataIn.readUTF()).intValue();
1:d29ca2a:             }
1:09ebb72:             if (type == MarshallingSupport.NULL) {
1:d29ca2a:                 this.dataIn.reset();
1:d29ca2a:                 throw new NullPointerException("Cannot convert NULL value to int.");
1:d29ca2a:             } else {
1:d29ca2a:                 this.dataIn.reset();
1:d29ca2a:                 throw new MessageFormatException(" not an int type");
1:d29ca2a:             }
1:d29ca2a:         } catch (NumberFormatException mfe) {
1:d29ca2a:             try {
1:d29ca2a:                 this.dataIn.reset();
1:d29ca2a:             } catch (IOException ioe) {
1:d29ca2a:                 throw JMSExceptionSupport.create(ioe);
1:d29ca2a:             }
1:d29ca2a:             throw mfe;
1:d29ca2a: 
1:d29ca2a:         } catch (EOFException e) {
1:d29ca2a:             throw JMSExceptionSupport.createMessageEOFException(e);
1:d29ca2a:         } catch (IOException e) {
1:d29ca2a:             throw JMSExceptionSupport.createMessageFormatException(e);
1:d29ca2a:         }
1:d29ca2a:     }
1:d29ca2a: 
1:d29ca2a:     /**
1:d29ca2a:      * Reads a 64-bit integer from the stream message.
1:d29ca2a:      *
1:d29ca2a:      * @return a 64-bit integer value from the stream message, interpreted as a
1:d29ca2a:      *         <code>long</code>
1:230a86c:      * @throws JMSException if the JMS provider fails to read the message due to
1:230a86c:      *                 some internal error.
1:230a86c:      * @throws MessageEOFException if unexpected end of message stream has been
1:230a86c:      *                 reached.
1:230a86c:      * @throws MessageFormatException if this type conversion is invalid.
1:230a86c:      * @throws MessageNotReadableException if the message is in write-only mode.
1:d29ca2a:      */
1:d29ca2a: 
1:cb5c29d:     @Override
1:d29ca2a:     public long readLong() throws JMSException {
1:d29ca2a:         initializeReading();
1:d29ca2a:         try {
1:d29ca2a: 
1:d29ca2a:             this.dataIn.mark(65);
1:d29ca2a:             int type = this.dataIn.read();
1:d29ca2a:             if (type == -1) {
1:d29ca2a:                 throw new MessageEOFException("reached end of data");
1:d29ca2a:             }
1:09ebb72:             if (type == MarshallingSupport.LONG_TYPE) {
1:d29ca2a:                 return this.dataIn.readLong();
1:d29ca2a:             }
1:09ebb72:             if (type == MarshallingSupport.INTEGER_TYPE) {
1:d29ca2a:                 return this.dataIn.readInt();
1:d29ca2a:             }
1:09ebb72:             if (type == MarshallingSupport.SHORT_TYPE) {
1:d29ca2a:                 return this.dataIn.readShort();
1:d29ca2a:             }
1:09ebb72:             if (type == MarshallingSupport.BYTE_TYPE) {
1:d29ca2a:                 return this.dataIn.readByte();
1:d29ca2a:             }
1:09ebb72:             if (type == MarshallingSupport.STRING_TYPE) {
1:d29ca2a:                 return Long.valueOf(this.dataIn.readUTF()).longValue();
1:d29ca2a:             }
1:09ebb72:             if (type == MarshallingSupport.NULL) {
1:d29ca2a:                 this.dataIn.reset();
1:d29ca2a:                 throw new NullPointerException("Cannot convert NULL value to long.");
1:d29ca2a:             } else {
1:d29ca2a:                 this.dataIn.reset();
1:d29ca2a:                 throw new MessageFormatException(" not a long type");
1:d29ca2a:             }
1:d29ca2a:         } catch (NumberFormatException mfe) {
1:d29ca2a:             try {
1:d29ca2a:                 this.dataIn.reset();
1:d29ca2a:             } catch (IOException ioe) {
1:d29ca2a:                 throw JMSExceptionSupport.create(ioe);
1:d29ca2a:             }
1:d29ca2a:             throw mfe;
1:d29ca2a: 
1:d29ca2a:         } catch (EOFException e) {
1:d29ca2a:             throw JMSExceptionSupport.createMessageEOFException(e);
1:d29ca2a:         } catch (IOException e) {
1:d29ca2a:             throw JMSExceptionSupport.createMessageFormatException(e);
1:d29ca2a:         }
1:d29ca2a:     }
1:d29ca2a: 
1:d29ca2a:     /**
1:d29ca2a:      * Reads a <code>float</code> from the stream message.
1:d29ca2a:      *
1:d29ca2a:      * @return a <code>float</code> value from the stream message
1:230a86c:      * @throws JMSException if the JMS provider fails to read the message due to
1:230a86c:      *                 some internal error.
1:230a86c:      * @throws MessageEOFException if unexpected end of message stream has been
1:230a86c:      *                 reached.
1:230a86c:      * @throws MessageFormatException if this type conversion is invalid.
1:230a86c:      * @throws MessageNotReadableException if the message is in write-only mode.
1:d29ca2a:      */
1:d29ca2a: 
1:cb5c29d:     @Override
1:d29ca2a:     public float readFloat() throws JMSException {
1:d29ca2a:         initializeReading();
1:d29ca2a:         try {
1:d29ca2a:             this.dataIn.mark(33);
1:d29ca2a:             int type = this.dataIn.read();
1:d29ca2a:             if (type == -1) {
1:d29ca2a:                 throw new MessageEOFException("reached end of data");
1:d29ca2a:             }
1:09ebb72:             if (type == MarshallingSupport.FLOAT_TYPE) {
1:d29ca2a:                 return this.dataIn.readFloat();
1:d29ca2a:             }
1:09ebb72:             if (type == MarshallingSupport.STRING_TYPE) {
1:d29ca2a:                 return Float.valueOf(this.dataIn.readUTF()).floatValue();
1:d29ca2a:             }
1:09ebb72:             if (type == MarshallingSupport.NULL) {
1:d29ca2a:                 this.dataIn.reset();
1:d29ca2a:                 throw new NullPointerException("Cannot convert NULL value to float.");
1:d29ca2a:             } else {
1:d29ca2a:                 this.dataIn.reset();
1:d29ca2a:                 throw new MessageFormatException(" not a float type");
1:d29ca2a:             }
1:d29ca2a:         } catch (NumberFormatException mfe) {
1:d29ca2a:             try {
1:d29ca2a:                 this.dataIn.reset();
1:d29ca2a:             } catch (IOException ioe) {
1:d29ca2a:                 throw JMSExceptionSupport.create(ioe);
1:d29ca2a:             }
1:d29ca2a:             throw mfe;
1:d29ca2a: 
1:d29ca2a:         } catch (EOFException e) {
1:d29ca2a:             throw JMSExceptionSupport.createMessageEOFException(e);
1:d29ca2a:         } catch (IOException e) {
1:d29ca2a:             throw JMSExceptionSupport.createMessageFormatException(e);
1:d29ca2a:         }
1:d29ca2a:     }
1:d29ca2a: 
1:d29ca2a:     /**
1:d29ca2a:      * Reads a <code>double</code> from the stream message.
1:d29ca2a:      *
1:d29ca2a:      * @return a <code>double</code> value from the stream message
1:230a86c:      * @throws JMSException if the JMS provider fails to read the message due to
1:230a86c:      *                 some internal error.
1:230a86c:      * @throws MessageEOFException if unexpected end of message stream has been
1:230a86c:      *                 reached.
1:230a86c:      * @throws MessageFormatException if this type conversion is invalid.
1:230a86c:      * @throws MessageNotReadableException if the message is in write-only mode.
1:d29ca2a:      */
1:d29ca2a: 
1:cb5c29d:     @Override
1:d29ca2a:     public double readDouble() throws JMSException {
1:d29ca2a:         initializeReading();
1:d29ca2a:         try {
1:d29ca2a: 
1:d29ca2a:             this.dataIn.mark(65);
1:d29ca2a:             int type = this.dataIn.read();
1:d29ca2a:             if (type == -1) {
1:d29ca2a:                 throw new MessageEOFException("reached end of data");
1:d29ca2a:             }
1:09ebb72:             if (type == MarshallingSupport.DOUBLE_TYPE) {
1:d29ca2a:                 return this.dataIn.readDouble();
1:d29ca2a:             }
1:09ebb72:             if (type == MarshallingSupport.FLOAT_TYPE) {
1:d29ca2a:                 return this.dataIn.readFloat();
1:d29ca2a:             }
1:09ebb72:             if (type == MarshallingSupport.STRING_TYPE) {
1:d29ca2a:                 return Double.valueOf(this.dataIn.readUTF()).doubleValue();
1:d29ca2a:             }
1:09ebb72:             if (type == MarshallingSupport.NULL) {
1:d29ca2a:                 this.dataIn.reset();
1:d29ca2a:                 throw new NullPointerException("Cannot convert NULL value to double.");
1:d29ca2a:             } else {
1:d29ca2a:                 this.dataIn.reset();
1:d29ca2a:                 throw new MessageFormatException(" not a double type");
1:d29ca2a:             }
1:d29ca2a:         } catch (NumberFormatException mfe) {
1:d29ca2a:             try {
1:d29ca2a:                 this.dataIn.reset();
1:d29ca2a:             } catch (IOException ioe) {
1:d29ca2a:                 throw JMSExceptionSupport.create(ioe);
1:d29ca2a:             }
1:d29ca2a:             throw mfe;
1:d29ca2a: 
1:d29ca2a:         } catch (EOFException e) {
1:d29ca2a:             throw JMSExceptionSupport.createMessageEOFException(e);
1:d29ca2a:         } catch (IOException e) {
1:d29ca2a:             throw JMSExceptionSupport.createMessageFormatException(e);
1:d29ca2a:         }
1:d29ca2a:     }
1:d29ca2a: 
1:d29ca2a:     /**
1:d29ca2a:      * Reads a <CODE>String</CODE> from the stream message.
1:d29ca2a:      *
1:d29ca2a:      * @return a Unicode string from the stream message
1:230a86c:      * @throws JMSException if the JMS provider fails to read the message due to
1:230a86c:      *                 some internal error.
1:230a86c:      * @throws MessageEOFException if unexpected end of message stream has been
1:230a86c:      *                 reached.
1:230a86c:      * @throws MessageFormatException if this type conversion is invalid.
1:230a86c:      * @throws MessageNotReadableException if the message is in write-only mode.
1:d29ca2a:      */
1:d29ca2a: 
1:cb5c29d:     @Override
1:d29ca2a:     public String readString() throws JMSException {
1:d29ca2a:         initializeReading();
1:d29ca2a:         try {
1:d29ca2a: 
1:d29ca2a:             this.dataIn.mark(65);
1:d29ca2a:             int type = this.dataIn.read();
1:d29ca2a:             if (type == -1) {
1:d29ca2a:                 throw new MessageEOFException("reached end of data");
1:d29ca2a:             }
1:09ebb72:             if (type == MarshallingSupport.NULL) {
1:d29ca2a:                 return null;
1:d29ca2a:             }
1:09ebb72:             if (type == MarshallingSupport.BIG_STRING_TYPE) {
1:09ebb72:                 return MarshallingSupport.readUTF8(dataIn);
1:537b1b0:             }
1:09ebb72:             if (type == MarshallingSupport.STRING_TYPE) {
1:d29ca2a:                 return this.dataIn.readUTF();
1:d29ca2a:             }
1:09ebb72:             if (type == MarshallingSupport.LONG_TYPE) {
1:d29ca2a:                 return new Long(this.dataIn.readLong()).toString();
1:d29ca2a:             }
1:09ebb72:             if (type == MarshallingSupport.INTEGER_TYPE) {
1:d29ca2a:                 return new Integer(this.dataIn.readInt()).toString();
1:d29ca2a:             }
1:09ebb72:             if (type == MarshallingSupport.SHORT_TYPE) {
1:d29ca2a:                 return new Short(this.dataIn.readShort()).toString();
1:d29ca2a:             }
1:09ebb72:             if (type == MarshallingSupport.BYTE_TYPE) {
1:d29ca2a:                 return new Byte(this.dataIn.readByte()).toString();
1:d29ca2a:             }
1:09ebb72:             if (type == MarshallingSupport.FLOAT_TYPE) {
1:d29ca2a:                 return new Float(this.dataIn.readFloat()).toString();
1:d29ca2a:             }
1:09ebb72:             if (type == MarshallingSupport.DOUBLE_TYPE) {
1:d29ca2a:                 return new Double(this.dataIn.readDouble()).toString();
1:d29ca2a:             }
1:09ebb72:             if (type == MarshallingSupport.BOOLEAN_TYPE) {
1:d29ca2a:                 return (this.dataIn.readBoolean() ? Boolean.TRUE : Boolean.FALSE).toString();
1:d29ca2a:             }
1:09ebb72:             if (type == MarshallingSupport.CHAR_TYPE) {
1:d29ca2a:                 return new Character(this.dataIn.readChar()).toString();
1:d29ca2a:             } else {
1:d29ca2a:                 this.dataIn.reset();
1:d29ca2a:                 throw new MessageFormatException(" not a String type");
1:d29ca2a:             }
1:d29ca2a:         } catch (NumberFormatException mfe) {
1:d29ca2a:             try {
1:d29ca2a:                 this.dataIn.reset();
1:d29ca2a:             } catch (IOException ioe) {
1:d29ca2a:                 throw JMSExceptionSupport.create(ioe);
1:d29ca2a:             }
1:d29ca2a:             throw mfe;
1:d29ca2a: 
1:d29ca2a:         } catch (EOFException e) {
1:d29ca2a:             throw JMSExceptionSupport.createMessageEOFException(e);
1:d29ca2a:         } catch (IOException e) {
1:d29ca2a:             throw JMSExceptionSupport.createMessageFormatException(e);
1:d29ca2a:         }
1:d29ca2a:     }
1:d29ca2a: 
1:d29ca2a:     /**
1:d29ca2a:      * Reads a byte array field from the stream message into the specified
1:d29ca2a:      * <CODE>byte[]</CODE> object (the read buffer). <p/>
1:d29ca2a:      * <P>
1:d29ca2a:      * To read the field value, <CODE>readBytes</CODE> should be successively
1:d29ca2a:      * called until it returns a value less than the length of the read buffer.
1:d29ca2a:      * The value of the bytes in the buffer following the last byte read is
1:d29ca2a:      * undefined. <p/>
1:d29ca2a:      * <P>
1:d29ca2a:      * If <CODE>readBytes</CODE> returns a value equal to the length of the
1:d29ca2a:      * buffer, a subsequent <CODE>readBytes</CODE> call must be made. If there
1:d29ca2a:      * are no more bytes to be read, this call returns -1. <p/>
1:d29ca2a:      * <P>
1:d29ca2a:      * If the byte array field value is null, <CODE>readBytes</CODE> returns
1:d29ca2a:      * -1. <p/>
1:d29ca2a:      * <P>
1:d29ca2a:      * If the byte array field value is empty, <CODE>readBytes</CODE> returns
1:d29ca2a:      * 0. <p/>
1:d29ca2a:      * <P>
1:d29ca2a:      * Once the first <CODE>readBytes</CODE> call on a <CODE>byte[]</CODE>
1:d29ca2a:      * field value has been made, the full value of the field must be read
1:d29ca2a:      * before it is valid to read the next field. An attempt to read the next
1:230a86c:      * field before that has been done will throw a
1:230a86c:      * <CODE>MessageFormatException</CODE>. <p/>
1:d29ca2a:      * <P>
1:d29ca2a:      * To read the byte field value into a new <CODE>byte[]</CODE> object, use
1:d29ca2a:      * the <CODE>readObject</CODE> method.
1:d29ca2a:      *
1:230a86c:      * @param value the buffer into which the data is read
1:d29ca2a:      * @return the total number of bytes read into the buffer, or -1 if there is
1:d29ca2a:      *         no more data because the end of the byte field has been reached
1:230a86c:      * @throws JMSException if the JMS provider fails to read the message due to
1:230a86c:      *                 some internal error.
1:230a86c:      * @throws MessageEOFException if unexpected end of message stream has been
1:230a86c:      *                 reached.
1:230a86c:      * @throws MessageFormatException if this type conversion is invalid.
1:230a86c:      * @throws MessageNotReadableException if the message is in write-only mode.
1:d29ca2a:      * @see #readObject()
1:d29ca2a:      */
1:d29ca2a: 
1:cb5c29d:     @Override
1:d29ca2a:     public int readBytes(byte[] value) throws JMSException {
1:d29ca2a: 
1:d29ca2a:         initializeReading();
1:d29ca2a:         try {
1:d29ca2a:             if (value == null) {
1:d29ca2a:                 throw new NullPointerException();
1:d29ca2a:             }
1:d29ca2a: 
1:230a86c:             if (remainingBytes == -1) {
1:d29ca2a:                 this.dataIn.mark(value.length + 1);
1:d29ca2a:                 int type = this.dataIn.read();
1:d29ca2a:                 if (type == -1) {
1:d29ca2a:                     throw new MessageEOFException("reached end of data");
1:d29ca2a:                 }
1:09ebb72:                 if (type != MarshallingSupport.BYTE_ARRAY_TYPE) {
1:d29ca2a:                     throw new MessageFormatException("Not a byte array");
1:d29ca2a:                 }
1:d29ca2a:                 remainingBytes = this.dataIn.readInt();
1:230a86c:             } else if (remainingBytes == 0) {
1:d29ca2a:                 remainingBytes = -1;
1:d29ca2a:                 return -1;
1:d29ca2a:             }
1:d29ca2a: 
1:d29ca2a:             if (value.length <= remainingBytes) {
1:d29ca2a:                 // small buffer
1:d29ca2a:                 remainingBytes -= value.length;
1:d29ca2a:                 this.dataIn.readFully(value);
1:d29ca2a:                 return value.length;
1:d29ca2a:             } else {
1:d29ca2a:                 // big buffer
1:d29ca2a:                 int rc = this.dataIn.read(value, 0, remainingBytes);
1:230a86c:                 remainingBytes = 0;
1:61d3231:                 return rc != -1 ? rc : 0;
1:d29ca2a:             }
1:d29ca2a: 
1:d29ca2a:         } catch (EOFException e) {
1:d29ca2a:             JMSException jmsEx = new MessageEOFException(e.getMessage());
1:d29ca2a:             jmsEx.setLinkedException(e);
1:d29ca2a:             throw jmsEx;
1:d29ca2a:         } catch (IOException e) {
1:d29ca2a:             JMSException jmsEx = new MessageFormatException(e.getMessage());
1:d29ca2a:             jmsEx.setLinkedException(e);
1:d29ca2a:             throw jmsEx;
1:d29ca2a:         }
1:d29ca2a:     }
1:d29ca2a: 
1:d29ca2a:     /**
1:d29ca2a:      * Reads an object from the stream message. <p/>
1:d29ca2a:      * <P>
1:d29ca2a:      * This method can be used to return, in objectified format, an object in
1:d29ca2a:      * the Java programming language ("Java object") that has been written to
1:d29ca2a:      * the stream with the equivalent <CODE>writeObject</CODE> method call, or
1:d29ca2a:      * its equivalent primitive <CODE>write<I>type</I></CODE> method. <p/>
1:d29ca2a:      * <P>
1:230a86c:      * Note that byte values are returned as <CODE>byte[]</CODE>, not
1:230a86c:      * <CODE>Byte[]</CODE>. <p/>
1:d29ca2a:      * <P>
1:d29ca2a:      * An attempt to call <CODE>readObject</CODE> to read a byte field value
1:d29ca2a:      * into a new <CODE>byte[]</CODE> object before the full value of the byte
1:d29ca2a:      * field has been read will throw a <CODE>MessageFormatException</CODE>.
1:d29ca2a:      *
1:d29ca2a:      * @return a Java object from the stream message, in objectified format (for
1:d29ca2a:      *         example, if the object was written as an <CODE>int</CODE>, an
1:d29ca2a:      *         <CODE>Integer</CODE> is returned)
1:230a86c:      * @throws JMSException if the JMS provider fails to read the message due to
1:230a86c:      *                 some internal error.
1:230a86c:      * @throws MessageEOFException if unexpected end of message stream has been
1:230a86c:      *                 reached.
1:230a86c:      * @throws MessageFormatException if this type conversion is invalid.
1:230a86c:      * @throws MessageNotReadableException if the message is in write-only mode.
1:d29ca2a:      * @see #readBytes(byte[] value)
1:d29ca2a:      */
1:d29ca2a: 
1:cb5c29d:     @Override
1:d29ca2a:     public Object readObject() throws JMSException {
1:d29ca2a:         initializeReading();
1:d29ca2a:         try {
1:d29ca2a:             this.dataIn.mark(65);
1:d29ca2a:             int type = this.dataIn.read();
1:d29ca2a:             if (type == -1) {
1:d29ca2a:                 throw new MessageEOFException("reached end of data");
1:d29ca2a:             }
1:09ebb72:             if (type == MarshallingSupport.NULL) {
1:d29ca2a:                 return null;
1:d29ca2a:             }
1:09ebb72:             if (type == MarshallingSupport.BIG_STRING_TYPE) {
1:09ebb72:                 return MarshallingSupport.readUTF8(dataIn);
1:d29ca2a:             }
1:09ebb72:             if (type == MarshallingSupport.STRING_TYPE) {
1:d29ca2a:                 return this.dataIn.readUTF();
1:d29ca2a:             }
1:09ebb72:             if (type == MarshallingSupport.LONG_TYPE) {
1:d36c0d4:                 return Long.valueOf(this.dataIn.readLong());
1:d29ca2a:             }
1:09ebb72:             if (type == MarshallingSupport.INTEGER_TYPE) {
1:d36c0d4:                 return Integer.valueOf(this.dataIn.readInt());
1:d29ca2a:             }
1:09ebb72:             if (type == MarshallingSupport.SHORT_TYPE) {
1:d36c0d4:                 return Short.valueOf(this.dataIn.readShort());
1:d29ca2a:             }
1:09ebb72:             if (type == MarshallingSupport.BYTE_TYPE) {
1:d36c0d4:                 return Byte.valueOf(this.dataIn.readByte());
1:d29ca2a:             }
1:09ebb72:             if (type == MarshallingSupport.FLOAT_TYPE) {
1:d29ca2a:                 return new Float(this.dataIn.readFloat());
1:d29ca2a:             }
1:09ebb72:             if (type == MarshallingSupport.DOUBLE_TYPE) {
1:d29ca2a:                 return new Double(this.dataIn.readDouble());
1:d29ca2a:             }
1:09ebb72:             if (type == MarshallingSupport.BOOLEAN_TYPE) {
1:d29ca2a:                 return this.dataIn.readBoolean() ? Boolean.TRUE : Boolean.FALSE;
1:d29ca2a:             }
1:09ebb72:             if (type == MarshallingSupport.CHAR_TYPE) {
1:d36c0d4:                 return Character.valueOf(this.dataIn.readChar());
1:d29ca2a:             }
1:09ebb72:             if (type == MarshallingSupport.BYTE_ARRAY_TYPE) {
1:d29ca2a:                 int len = this.dataIn.readInt();
1:d29ca2a:                 byte[] value = new byte[len];
1:d29ca2a:                 this.dataIn.readFully(value);
1:d29ca2a:                 return value;
1:d29ca2a:             } else {
1:d29ca2a:                 this.dataIn.reset();
1:d29ca2a:                 throw new MessageFormatException("unknown type");
1:d29ca2a:             }
1:d29ca2a:         } catch (NumberFormatException mfe) {
1:d29ca2a:             try {
1:d29ca2a:                 this.dataIn.reset();
1:d29ca2a:             } catch (IOException ioe) {
1:d29ca2a:                 throw JMSExceptionSupport.create(ioe);
1:d29ca2a:             }
1:d29ca2a:             throw mfe;
1:d29ca2a: 
1:d29ca2a:         } catch (EOFException e) {
1:d29ca2a:             JMSException jmsEx = new MessageEOFException(e.getMessage());
1:d29ca2a:             jmsEx.setLinkedException(e);
1:d29ca2a:             throw jmsEx;
1:d29ca2a:         } catch (IOException e) {
1:d29ca2a:             JMSException jmsEx = new MessageFormatException(e.getMessage());
1:d29ca2a:             jmsEx.setLinkedException(e);
1:d29ca2a:             throw jmsEx;
1:d29ca2a:         }
1:05a8cba:     }
1:d29ca2a: 
1:d29ca2a:     /**
1:d29ca2a:      * Writes a <code>boolean</code> to the stream message. The value
1:d29ca2a:      * <code>true</code> is written as the value <code>(byte)1</code>; the
1:d29ca2a:      * value <code>false</code> is written as the value <code>(byte)0</code>.
1:d29ca2a:      *
1:230a86c:      * @param value the <code>boolean</code> value to be written
1:230a86c:      * @throws JMSException if the JMS provider fails to write the message due
1:230a86c:      *                 to some internal error.
1:230a86c:      * @throws MessageNotWriteableException if the message is in read-only mode.
1:d29ca2a:      */
1:d29ca2a: 
1:cb5c29d:     @Override
1:d29ca2a:     public void writeBoolean(boolean value) throws JMSException {
1:d29ca2a:         initializeWriting();
1:d29ca2a:         try {
1:09ebb72:             MarshallingSupport.marshalBoolean(dataOut, value);
1:d29ca2a:         } catch (IOException ioe) {
1:d29ca2a:             throw JMSExceptionSupport.create(ioe);
1:d29ca2a:         }
1:d29ca2a:     }
1:d29ca2a: 
1:d29ca2a:     /**
1:d29ca2a:      * Writes a <code>byte</code> to the stream message.
1:d29ca2a:      *
1:230a86c:      * @param value the <code>byte</code> value to be written
1:230a86c:      * @throws JMSException if the JMS provider fails to write the message due
1:230a86c:      *                 to some internal error.
1:230a86c:      * @throws MessageNotWriteableException if the message is in read-only mode.
1:d29ca2a:      */
1:d29ca2a: 
1:cb5c29d:     @Override
1:d29ca2a:     public void writeByte(byte value) throws JMSException {
1:d29ca2a:         initializeWriting();
1:d29ca2a:         try {
1:09ebb72:             MarshallingSupport.marshalByte(dataOut, value);
1:d29ca2a:         } catch (IOException ioe) {
1:d29ca2a:             throw JMSExceptionSupport.create(ioe);
1:d29ca2a:         }
1:d29ca2a:     }
1:d29ca2a: 
1:d29ca2a:     /**
1:d29ca2a:      * Writes a <code>short</code> to the stream message.
1:d29ca2a:      *
1:230a86c:      * @param value the <code>short</code> value to be written
1:230a86c:      * @throws JMSException if the JMS provider fails to write the message due
1:230a86c:      *                 to some internal error.
1:230a86c:      * @throws MessageNotWriteableException if the message is in read-only mode.
1:d29ca2a:      */
1:d29ca2a: 
1:cb5c29d:     @Override
1:d29ca2a:     public void writeShort(short value) throws JMSException {
1:d29ca2a:         initializeWriting();
1:d29ca2a:         try {
1:09ebb72:             MarshallingSupport.marshalShort(dataOut, value);
1:d29ca2a:         } catch (IOException ioe) {
1:d29ca2a:             throw JMSExceptionSupport.create(ioe);
1:d29ca2a:         }
1:d29ca2a:     }
1:d29ca2a: 
1:d29ca2a:     /**
1:d29ca2a:      * Writes a <code>char</code> to the stream message.
1:d29ca2a:      *
1:230a86c:      * @param value the <code>char</code> value to be written
1:230a86c:      * @throws JMSException if the JMS provider fails to write the message due
1:230a86c:      *                 to some internal error.
1:230a86c:      * @throws MessageNotWriteableException if the message is in read-only mode.
1:d29ca2a:      */
1:d29ca2a: 
1:cb5c29d:     @Override
1:d29ca2a:     public void writeChar(char value) throws JMSException {
1:d29ca2a:         initializeWriting();
1:d29ca2a:         try {
1:09ebb72:             MarshallingSupport.marshalChar(dataOut, value);
1:d29ca2a:         } catch (IOException ioe) {
1:d29ca2a:             throw JMSExceptionSupport.create(ioe);
1:d29ca2a:         }
1:d29ca2a:     }
1:d29ca2a: 
1:d29ca2a:     /**
1:d29ca2a:      * Writes an <code>int</code> to the stream message.
1:d29ca2a:      *
1:230a86c:      * @param value the <code>int</code> value to be written
1:230a86c:      * @throws JMSException if the JMS provider fails to write the message due
1:230a86c:      *                 to some internal error.
1:230a86c:      * @throws MessageNotWriteableException if the message is in read-only mode.
1:d29ca2a:      */
1:d29ca2a: 
1:cb5c29d:     @Override
1:d29ca2a:     public void writeInt(int value) throws JMSException {
1:d29ca2a:         initializeWriting();
1:d29ca2a:         try {
1:09ebb72:             MarshallingSupport.marshalInt(dataOut, value);
1:d29ca2a:         } catch (IOException ioe) {
1:d29ca2a:             throw JMSExceptionSupport.create(ioe);
1:d29ca2a:         }
1:d29ca2a:     }
1:d29ca2a: 
1:d29ca2a:     /**
1:d29ca2a:      * Writes a <code>long</code> to the stream message.
1:d29ca2a:      *
1:230a86c:      * @param value the <code>long</code> value to be written
1:230a86c:      * @throws JMSException if the JMS provider fails to write the message due
1:230a86c:      *                 to some internal error.
1:230a86c:      * @throws MessageNotWriteableException if the message is in read-only mode.
1:d29ca2a:      */
1:d29ca2a: 
1:cb5c29d:     @Override
1:d29ca2a:     public void writeLong(long value) throws JMSException {
1:d29ca2a:         initializeWriting();
1:d29ca2a:         try {
1:09ebb72:             MarshallingSupport.marshalLong(dataOut, value);
1:d29ca2a:         } catch (IOException ioe) {
1:d29ca2a:             throw JMSExceptionSupport.create(ioe);
1:d29ca2a:         }
1:d29ca2a:     }
1:d29ca2a: 
1:d29ca2a:     /**
1:d29ca2a:      * Writes a <code>float</code> to the stream message.
1:d29ca2a:      *
1:230a86c:      * @param value the <code>float</code> value to be written
1:230a86c:      * @throws JMSException if the JMS provider fails to write the message due
1:230a86c:      *                 to some internal error.
1:230a86c:      * @throws MessageNotWriteableException if the message is in read-only mode.
1:d29ca2a:      */
1:d29ca2a: 
1:cb5c29d:     @Override
1:d29ca2a:     public void writeFloat(float value) throws JMSException {
1:d29ca2a:         initializeWriting();
1:d29ca2a:         try {
1:09ebb72:             MarshallingSupport.marshalFloat(dataOut, value);
1:d29ca2a:         } catch (IOException ioe) {
1:d29ca2a:             throw JMSExceptionSupport.create(ioe);
1:d29ca2a:         }
1:d29ca2a:     }
1:d29ca2a: 
1:d29ca2a:     /**
1:d29ca2a:      * Writes a <code>double</code> to the stream message.
1:d29ca2a:      *
1:230a86c:      * @param value the <code>double</code> value to be written
1:230a86c:      * @throws JMSException if the JMS provider fails to write the message due
1:230a86c:      *                 to some internal error.
1:230a86c:      * @throws MessageNotWriteableException if the message is in read-only mode.
1:d29ca2a:      */
1:d29ca2a: 
1:cb5c29d:     @Override
1:d29ca2a:     public void writeDouble(double value) throws JMSException {
1:d29ca2a:         initializeWriting();
1:d29ca2a:         try {
1:09ebb72:             MarshallingSupport.marshalDouble(dataOut, value);
1:d29ca2a:         } catch (IOException ioe) {
1:d29ca2a:             throw JMSExceptionSupport.create(ioe);
1:d29ca2a:         }
1:d29ca2a:     }
1:d29ca2a: 
1:d29ca2a:     /**
1:d29ca2a:      * Writes a <code>String</code> to the stream message.
1:d29ca2a:      *
1:230a86c:      * @param value the <code>String</code> value to be written
1:230a86c:      * @throws JMSException if the JMS provider fails to write the message due
1:230a86c:      *                 to some internal error.
1:230a86c:      * @throws MessageNotWriteableException if the message is in read-only mode.
1:d29ca2a:      */
1:d29ca2a: 
1:cb5c29d:     @Override
1:d29ca2a:     public void writeString(String value) throws JMSException {
1:d29ca2a:         initializeWriting();
1:d29ca2a:         try {
1:d29ca2a:             if (value == null) {
1:09ebb72:                 MarshallingSupport.marshalNull(dataOut);
1:d29ca2a:             } else {
1:09ebb72:                 MarshallingSupport.marshalString(dataOut, value);
1:d29ca2a:             }
1:d29ca2a:         } catch (IOException ioe) {
1:d29ca2a:             throw JMSExceptionSupport.create(ioe);
1:d29ca2a:         }
1:d29ca2a:     }
1:d29ca2a: 
1:d29ca2a:     /**
1:d29ca2a:      * Writes a byte array field to the stream message. <p/>
1:d29ca2a:      * <P>
1:d29ca2a:      * The byte array <code>value</code> is written to the message as a byte
1:d29ca2a:      * array field. Consecutively written byte array fields are treated as two
1:d29ca2a:      * distinct fields when the fields are read.
1:d29ca2a:      *
1:230a86c:      * @param value the byte array value to be written
1:230a86c:      * @throws JMSException if the JMS provider fails to write the message due
1:230a86c:      *                 to some internal error.
1:230a86c:      * @throws MessageNotWriteableException if the message is in read-only mode.
1:d29ca2a:      */
1:d29ca2a: 
1:cb5c29d:     @Override
1:d29ca2a:     public void writeBytes(byte[] value) throws JMSException {
1:d29ca2a:         writeBytes(value, 0, value.length);
1:d29ca2a:     }
1:d29ca2a: 
1:d29ca2a:     /**
1:d29ca2a:      * Writes a portion of a byte array as a byte array field to the stream
1:d29ca2a:      * message. <p/>
1:d29ca2a:      * <P>
1:d29ca2a:      * The a portion of the byte array <code>value</code> is written to the
1:d29ca2a:      * message as a byte array field. Consecutively written byte array fields
1:d29ca2a:      * are treated as two distinct fields when the fields are read.
1:d29ca2a:      *
1:230a86c:      * @param value the byte array value to be written
1:230a86c:      * @param offset the initial offset within the byte array
1:230a86c:      * @param length the number of bytes to use
1:230a86c:      * @throws JMSException if the JMS provider fails to write the message due
1:230a86c:      *                 to some internal error.
1:230a86c:      * @throws MessageNotWriteableException if the message is in read-only mode.
1:d29ca2a:      */
1:d29ca2a: 
1:cb5c29d:     @Override
1:d29ca2a:     public void writeBytes(byte[] value, int offset, int length) throws JMSException {
1:d29ca2a:         initializeWriting();
1:d29ca2a:         try {
1:09ebb72:             MarshallingSupport.marshalByteArray(dataOut, value, offset, length);
1:d29ca2a:         } catch (IOException ioe) {
1:d29ca2a:             throw JMSExceptionSupport.create(ioe);
1:d29ca2a:         }
1:d29ca2a:     }
1:d29ca2a: 
1:d29ca2a:     /**
1:d29ca2a:      * Writes an object to the stream message. <p/>
1:d29ca2a:      * <P>
1:d29ca2a:      * This method works only for the objectified primitive object types (<code>Integer</code>,
1:d29ca2a:      * <code>Double</code>, <code>Long</code>&nbsp;...),
1:d29ca2a:      * <code>String</code> objects, and byte arrays.
1:d29ca2a:      *
1:230a86c:      * @param value the Java object to be written
1:230a86c:      * @throws JMSException if the JMS provider fails to write the message due
1:230a86c:      *                 to some internal error.
1:230a86c:      * @throws MessageFormatException if the object is invalid.
1:230a86c:      * @throws MessageNotWriteableException if the message is in read-only mode.
1:d29ca2a:      */
1:d29ca2a: 
1:cb5c29d:     @Override
1:d29ca2a:     public void writeObject(Object value) throws JMSException {
1:d29ca2a:         initializeWriting();
1:d29ca2a:         if (value == null) {
1:d29ca2a:             try {
1:09ebb72:                 MarshallingSupport.marshalNull(dataOut);
1:d29ca2a:             } catch (IOException ioe) {
1:d29ca2a:                 throw JMSExceptionSupport.create(ioe);
1:d29ca2a:             }
1:d29ca2a:         } else if (value instanceof String) {
1:d29ca2a:             writeString(value.toString());
1:d29ca2a:         } else if (value instanceof Character) {
1:230a86c:             writeChar(((Character)value).charValue());
1:d29ca2a:         } else if (value instanceof Boolean) {
1:230a86c:             writeBoolean(((Boolean)value).booleanValue());
1:d29ca2a:         } else if (value instanceof Byte) {
1:230a86c:             writeByte(((Byte)value).byteValue());
1:d29ca2a:         } else if (value instanceof Short) {
1:230a86c:             writeShort(((Short)value).shortValue());
1:d29ca2a:         } else if (value instanceof Integer) {
1:230a86c:             writeInt(((Integer)value).intValue());
1:d29ca2a:         } else if (value instanceof Float) {
1:230a86c:             writeFloat(((Float)value).floatValue());
1:d29ca2a:         } else if (value instanceof Double) {
1:230a86c:             writeDouble(((Double)value).doubleValue());
1:d29ca2a:         } else if (value instanceof byte[]) {
1:230a86c:             writeBytes((byte[])value);
1:537b1b0:         }else if (value instanceof Long) {
1:537b1b0:             writeLong(((Long)value).longValue());
1:58b8d19:         }else {
1:58b8d19:             throw new MessageFormatException("Unsupported Object type: " + value.getClass());
1:d29ca2a:         }
1:d29ca2a:     }
1:d29ca2a: 
1:d29ca2a:     /**
1:d29ca2a:      * Puts the message body in read-only mode and repositions the stream of
1:d29ca2a:      * bytes to the beginning.
1:d29ca2a:      *
1:230a86c:      * @throws JMSException if an internal error occurs
1:d29ca2a:      */
1:d29ca2a: 
1:cb5c29d:     @Override
1:d29ca2a:     public void reset() throws JMSException {
1:d29ca2a:         storeContent();
1:d29ca2a:         this.bytesOut = null;
1:d29ca2a:         this.dataIn = null;
1:d29ca2a:         this.dataOut = null;
1:230a86c:         this.remainingBytes = -1;
1:d29ca2a:         setReadOnlyBody(true);
1:d29ca2a:     }
1:d29ca2a: 
1:cb5c29d:     private void initializeWriting() throws JMSException {
1:d29ca2a:         checkReadOnlyBody();
1:d29ca2a:         if (this.dataOut == null) {
1:d29ca2a:             this.bytesOut = new ByteArrayOutputStream();
1:d29ca2a:             OutputStream os = bytesOut;
1:d29ca2a:             ActiveMQConnection connection = getConnection();
1:230a86c:             if (connection != null && connection.isUseCompression()) {
1:d29ca2a:                 compressed = true;
1:d29ca2a:                 os = new DeflaterOutputStream(os);
1:d29ca2a:             }
1:d29ca2a:             this.dataOut = new DataOutputStream(os);
1:d29ca2a:         }
1:cb5c29d: 
1:cb5c29d:         // For a message that already had a body and was sent we need to restore the content
1:cb5c29d:         // if the message is used again without having its clearBody method called.
1:cb5c29d:         if (this.content != null && this.content.length > 0) {
1:cb5c29d:             try {
1:cb5c29d:                 if (compressed) {
1:cb5c29d:                     ByteArrayInputStream input = new ByteArrayInputStream(this.content.getData(), this.content.getOffset(), this.content.getLength());
1:cb5c29d:                     InflaterInputStream inflater = new InflaterInputStream(input);
1:cb5c29d:                     try {
1:cb5c29d:                         byte[] buffer = new byte[8*1024];
1:cb5c29d:                         int read = 0;
1:cb5c29d:                         while ((read = inflater.read(buffer)) != -1) {
1:cb5c29d:                             this.dataOut.write(buffer, 0, read);
1:cb5c29d:                         }
1:cb5c29d:                     } finally {
1:cb5c29d:                         inflater.close();
1:cb5c29d:                     }
1:cb5c29d:                 } else {
1:cb5c29d:                     this.dataOut.write(this.content.getData(), this.content.getOffset(), this.content.getLength());
1:cb5c29d:                 }
1:cb5c29d:                 // Free up the buffer from the old content, will be re-written when
1:cb5c29d:                 // tbe message is sent again and storeContent() is called.
1:cb5c29d:                 this.content = null;
1:cb5c29d:             } catch (IOException ioe) {
1:cb5c29d:                 throw JMSExceptionSupport.create(ioe);
1:cb5c29d:             }
1:cb5c29d:         }
1:d29ca2a:     }
1:d29ca2a: 
1:d29ca2a:     protected void checkWriteOnlyBody() throws MessageNotReadableException {
1:d29ca2a:         if (!readOnlyBody) {
1:d29ca2a:             throw new MessageNotReadableException("Message body is write-only");
1:d29ca2a:         }
1:d29ca2a:     }
1:d29ca2a: 
1:d29ca2a:     private void initializeReading() throws MessageNotReadableException {
1:d29ca2a:         checkWriteOnlyBody();
1:d29ca2a:         if (this.dataIn == null) {
1:d29ca2a:             ByteSequence data = getContent();
1:f812e34:             if (data == null) {
1:230a86c:                 data = new ByteSequence(new byte[] {}, 0, 0);
1:f812e34:             }
1:d29ca2a:             InputStream is = new ByteArrayInputStream(data);
1:d29ca2a:             if (isCompressed()) {
1:d29ca2a:                 is = new InflaterInputStream(is);
1:d29ca2a:                 is = new BufferedInputStream(is);
1:d29ca2a:             }
1:d29ca2a:             this.dataIn = new DataInputStream(is);
1:d29ca2a:         }
1:d29ca2a:     }
1:d29ca2a: 
1:41c9366:     @Override
1:41c9366:     public void compress() throws IOException {
1:41c9366:         storeContent();
1:41c9366:         super.compress();
1:41c9366:     }
1:d29ca2a: 
1:cb5c29d:     @Override
1:d29ca2a:     public String toString() {
1:230a86c:         return super.toString() + " ActiveMQStreamMessage{ " + "bytesOut = " + bytesOut + ", dataOut = " + dataOut + ", dataIn = " + dataIn + " }";
1:d29ca2a:     }
1:d29ca2a: }
============================================================================
author:Timothy Bish
-------------------------------------------------------------------------------
commit:61d3231
/////////////////////////////////////////////////////////////////////////
1:                 return rc != -1 ? rc : 0;
commit:cb5c29d
/////////////////////////////////////////////////////////////////////////
1:     @Override
/////////////////////////////////////////////////////////////////////////
1:     @Override
/////////////////////////////////////////////////////////////////////////
1:     @Override
1:     @Override
/////////////////////////////////////////////////////////////////////////
1:     @Override
/////////////////////////////////////////////////////////////////////////
1:     @Override
/////////////////////////////////////////////////////////////////////////
1:     @Override
/////////////////////////////////////////////////////////////////////////
1:     @Override
/////////////////////////////////////////////////////////////////////////
1:     @Override
/////////////////////////////////////////////////////////////////////////
1:     @Override
/////////////////////////////////////////////////////////////////////////
1:     @Override
/////////////////////////////////////////////////////////////////////////
1:     @Override
/////////////////////////////////////////////////////////////////////////
1:     @Override
/////////////////////////////////////////////////////////////////////////
1:     @Override
/////////////////////////////////////////////////////////////////////////
1:     @Override
/////////////////////////////////////////////////////////////////////////
1:     @Override
/////////////////////////////////////////////////////////////////////////
1:     @Override
/////////////////////////////////////////////////////////////////////////
1:     @Override
/////////////////////////////////////////////////////////////////////////
1:     @Override
/////////////////////////////////////////////////////////////////////////
1:     @Override
/////////////////////////////////////////////////////////////////////////
1:     @Override
/////////////////////////////////////////////////////////////////////////
1:     @Override
/////////////////////////////////////////////////////////////////////////
1:     @Override
/////////////////////////////////////////////////////////////////////////
1:     @Override
/////////////////////////////////////////////////////////////////////////
1:     @Override
/////////////////////////////////////////////////////////////////////////
1:     @Override
/////////////////////////////////////////////////////////////////////////
1:     @Override
/////////////////////////////////////////////////////////////////////////
1:     @Override
/////////////////////////////////////////////////////////////////////////
1:     @Override
/////////////////////////////////////////////////////////////////////////
1:     private void initializeWriting() throws JMSException {
/////////////////////////////////////////////////////////////////////////
1: 
1:         // For a message that already had a body and was sent we need to restore the content
1:         // if the message is used again without having its clearBody method called.
1:         if (this.content != null && this.content.length > 0) {
1:             try {
1:                 if (compressed) {
1:                     ByteArrayInputStream input = new ByteArrayInputStream(this.content.getData(), this.content.getOffset(), this.content.getLength());
1:                     InflaterInputStream inflater = new InflaterInputStream(input);
1:                     try {
1:                         byte[] buffer = new byte[8*1024];
1:                         int read = 0;
1:                         while ((read = inflater.read(buffer)) != -1) {
1:                             this.dataOut.write(buffer, 0, read);
1:                         }
1:                     } finally {
1:                         inflater.close();
1:                     }
1:                 } else {
1:                     this.dataOut.write(this.content.getData(), this.content.getOffset(), this.content.getLength());
1:                 }
1:                 // Free up the buffer from the old content, will be re-written when
1:                 // tbe message is sent again and storeContent() is called.
1:                 this.content = null;
1:             } catch (IOException ioe) {
1:                 throw JMSExceptionSupport.create(ioe);
1:             }
1:         }
/////////////////////////////////////////////////////////////////////////
1:     @Override
author:Christopher L. Shannon (cshannon)
-------------------------------------------------------------------------------
commit:f82993d
/////////////////////////////////////////////////////////////////////////
1:     public boolean isContentMarshalled() {
1:         return content != null || dataOut == null;
1:     }
1: 
1:     @Override
author:Hadrian Zbarcea
-------------------------------------------------------------------------------
commit:d54d046
author:Hiram R. Chirino
-------------------------------------------------------------------------------
commit:9a8f6e4
commit:fc00993
/////////////////////////////////////////////////////////////////////////
1:     protected transient DataOutputStream dataOut;
1:     protected transient ByteArrayOutputStream bytesOut;
1:     protected transient DataInputStream dataIn;
1:     protected transient int remainingBytes = -1;
commit:f812e34
/////////////////////////////////////////////////////////////////////////
1:             if (data == null) {
1:             }
commit:230a86c
/////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////
1:  *      http://www.apache.org/licenses/LICENSE-2.0
/////////////////////////////////////////////////////////////////////////
1:  * message body. Its methods are based largely on those found in
1:  * <CODE>java.io.DataInputStream</CODE> and
1:  * <CODE>java.io.DataOutputStream</CODE>. <p/>
1:  * a call to <CODE>StreamMessage.writeInt(6)</CODE> is equivalent to
1:  * <CODE>StreamMessage.writeObject(new
1:  * Integer(6))</CODE>. Both forms are
1:  * provided, because the explicit form is convenient for static programming, and
1:  * the object form is needed when types are not known at compile time. <p/>
/////////////////////////////////////////////////////////////////////////
1:  * If a client attempts to read a message in write-only mode, a
1:  * <CODE>MessageNotReadableException</CODE> is thrown. <p/>
1:  * If a client attempts to write a message in read-only mode, a
1:  * <CODE>MessageNotWriteableException</CODE> is thrown. <p/>
1:  * The marked cases must be supported. The unmarked cases must throw a
1:  * <CODE>JMSException</CODE>. The <CODE>String</CODE>-to-primitive
1:  * conversions may throw a runtime exception if the primitive's
1:  * <CODE>valueOf()</CODE> method does not accept it as a valid
1:  * <CODE>String</CODE> representation of the primitive. <p/>
1:  * <PRE>
1:  *  | | boolean byte short char int long float double String byte[]
/////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////
1:      * @throws JMSException if the JMS provider fails to clear the message body
1:      *                 due to some internal error.
/////////////////////////////////////////////////////////////////////////
1:         this.remainingBytes = -1;
1:      * @throws JMSException if the JMS provider fails to read the message due to
1:      *                 some internal error.
1:      * @throws MessageEOFException if unexpected end of message stream has been
1:      *                 reached.
1:      * @throws MessageFormatException if this type conversion is invalid.
1:      * @throws MessageNotReadableException if the message is in write-only mode.
/////////////////////////////////////////////////////////////////////////
1:      * @throws JMSException if the JMS provider fails to read the message due to
1:      *                 some internal error.
1:      * @throws MessageEOFException if unexpected end of message stream has been
1:      *                 reached.
1:      * @throws MessageFormatException if this type conversion is invalid.
1:      * @throws MessageNotReadableException if the message is in write-only mode.
/////////////////////////////////////////////////////////////////////////
1:      * @throws JMSException if the JMS provider fails to read the message due to
1:      *                 some internal error.
1:      * @throws MessageEOFException if unexpected end of message stream has been
1:      *                 reached.
1:      * @throws MessageFormatException if this type conversion is invalid.
1:      * @throws MessageNotReadableException if the message is in write-only mode.
/////////////////////////////////////////////////////////////////////////
1:      * @throws JMSException if the JMS provider fails to read the message due to
1:      *                 some internal error.
1:      * @throws MessageEOFException if unexpected end of message stream has been
1:      *                 reached.
1:      * @throws MessageFormatException if this type conversion is invalid
1:      * @throws MessageNotReadableException if the message is in write-only mode.
/////////////////////////////////////////////////////////////////////////
1:      * @throws JMSException if the JMS provider fails to read the message due to
1:      *                 some internal error.
1:      * @throws MessageEOFException if unexpected end of message stream has been
1:      *                 reached.
1:      * @throws MessageFormatException if this type conversion is invalid.
1:      * @throws MessageNotReadableException if the message is in write-only mode.
/////////////////////////////////////////////////////////////////////////
1:      * @throws JMSException if the JMS provider fails to read the message due to
1:      *                 some internal error.
1:      * @throws MessageEOFException if unexpected end of message stream has been
1:      *                 reached.
1:      * @throws MessageFormatException if this type conversion is invalid.
1:      * @throws MessageNotReadableException if the message is in write-only mode.
/////////////////////////////////////////////////////////////////////////
1:      * @throws JMSException if the JMS provider fails to read the message due to
1:      *                 some internal error.
1:      * @throws MessageEOFException if unexpected end of message stream has been
1:      *                 reached.
1:      * @throws MessageFormatException if this type conversion is invalid.
1:      * @throws MessageNotReadableException if the message is in write-only mode.
/////////////////////////////////////////////////////////////////////////
1:      * @throws JMSException if the JMS provider fails to read the message due to
1:      *                 some internal error.
1:      * @throws MessageEOFException if unexpected end of message stream has been
1:      *                 reached.
1:      * @throws MessageFormatException if this type conversion is invalid.
1:      * @throws MessageNotReadableException if the message is in write-only mode.
/////////////////////////////////////////////////////////////////////////
1:      * @throws JMSException if the JMS provider fails to read the message due to
1:      *                 some internal error.
1:      * @throws MessageEOFException if unexpected end of message stream has been
1:      *                 reached.
1:      * @throws MessageFormatException if this type conversion is invalid.
1:      * @throws MessageNotReadableException if the message is in write-only mode.
/////////////////////////////////////////////////////////////////////////
1:      * field before that has been done will throw a
1:      * <CODE>MessageFormatException</CODE>. <p/>
1:      * @param value the buffer into which the data is read
1:      * @throws JMSException if the JMS provider fails to read the message due to
1:      *                 some internal error.
1:      * @throws MessageEOFException if unexpected end of message stream has been
1:      *                 reached.
1:      * @throws MessageFormatException if this type conversion is invalid.
1:      * @throws MessageNotReadableException if the message is in write-only mode.
/////////////////////////////////////////////////////////////////////////
1:             if (remainingBytes == -1) {
/////////////////////////////////////////////////////////////////////////
1:             } else if (remainingBytes == 0) {
/////////////////////////////////////////////////////////////////////////
1:                 remainingBytes = 0;
/////////////////////////////////////////////////////////////////////////
1:      * Note that byte values are returned as <CODE>byte[]</CODE>, not
1:      * <CODE>Byte[]</CODE>. <p/>
/////////////////////////////////////////////////////////////////////////
1:      * @throws JMSException if the JMS provider fails to read the message due to
1:      *                 some internal error.
1:      * @throws MessageEOFException if unexpected end of message stream has been
1:      *                 reached.
1:      * @throws MessageFormatException if this type conversion is invalid.
1:      * @throws MessageNotReadableException if the message is in write-only mode.
/////////////////////////////////////////////////////////////////////////
1:      * @param value the <code>boolean</code> value to be written
1:      * @throws JMSException if the JMS provider fails to write the message due
1:      *                 to some internal error.
1:      * @throws MessageNotWriteableException if the message is in read-only mode.
/////////////////////////////////////////////////////////////////////////
1:      * @param value the <code>byte</code> value to be written
1:      * @throws JMSException if the JMS provider fails to write the message due
1:      *                 to some internal error.
1:      * @throws MessageNotWriteableException if the message is in read-only mode.
/////////////////////////////////////////////////////////////////////////
1:      * @param value the <code>short</code> value to be written
1:      * @throws JMSException if the JMS provider fails to write the message due
1:      *                 to some internal error.
1:      * @throws MessageNotWriteableException if the message is in read-only mode.
/////////////////////////////////////////////////////////////////////////
1:      * @param value the <code>char</code> value to be written
1:      * @throws JMSException if the JMS provider fails to write the message due
1:      *                 to some internal error.
1:      * @throws MessageNotWriteableException if the message is in read-only mode.
/////////////////////////////////////////////////////////////////////////
1:      * @param value the <code>int</code> value to be written
1:      * @throws JMSException if the JMS provider fails to write the message due
1:      *                 to some internal error.
1:      * @throws MessageNotWriteableException if the message is in read-only mode.
/////////////////////////////////////////////////////////////////////////
1:      * @param value the <code>long</code> value to be written
1:      * @throws JMSException if the JMS provider fails to write the message due
1:      *                 to some internal error.
1:      * @throws MessageNotWriteableException if the message is in read-only mode.
/////////////////////////////////////////////////////////////////////////
1:      * @param value the <code>float</code> value to be written
1:      * @throws JMSException if the JMS provider fails to write the message due
1:      *                 to some internal error.
1:      * @throws MessageNotWriteableException if the message is in read-only mode.
/////////////////////////////////////////////////////////////////////////
1:      * @param value the <code>double</code> value to be written
1:      * @throws JMSException if the JMS provider fails to write the message due
1:      *                 to some internal error.
1:      * @throws MessageNotWriteableException if the message is in read-only mode.
/////////////////////////////////////////////////////////////////////////
1:      * @param value the <code>String</code> value to be written
1:      * @throws JMSException if the JMS provider fails to write the message due
1:      *                 to some internal error.
1:      * @throws MessageNotWriteableException if the message is in read-only mode.
/////////////////////////////////////////////////////////////////////////
1:      * @param value the byte array value to be written
1:      * @throws JMSException if the JMS provider fails to write the message due
1:      *                 to some internal error.
1:      * @throws MessageNotWriteableException if the message is in read-only mode.
/////////////////////////////////////////////////////////////////////////
1:      * @param value the byte array value to be written
1:      * @param offset the initial offset within the byte array
1:      * @param length the number of bytes to use
1:      * @throws JMSException if the JMS provider fails to write the message due
1:      *                 to some internal error.
1:      * @throws MessageNotWriteableException if the message is in read-only mode.
/////////////////////////////////////////////////////////////////////////
1:      * @param value the Java object to be written
1:      * @throws JMSException if the JMS provider fails to write the message due
1:      *                 to some internal error.
1:      * @throws MessageFormatException if the object is invalid.
1:      * @throws MessageNotWriteableException if the message is in read-only mode.
/////////////////////////////////////////////////////////////////////////
1:             writeChar(((Character)value).charValue());
1:             writeBoolean(((Boolean)value).booleanValue());
1:             writeByte(((Byte)value).byteValue());
1:             writeShort(((Short)value).shortValue());
1:             writeInt(((Integer)value).intValue());
1:             writeFloat(((Float)value).floatValue());
1:             writeDouble(((Double)value).doubleValue());
1:             writeBytes((byte[])value);
/////////////////////////////////////////////////////////////////////////
1:      * @throws JMSException if an internal error occurs
/////////////////////////////////////////////////////////////////////////
1:         this.remainingBytes = -1;
/////////////////////////////////////////////////////////////////////////
1:             if (connection != null && connection.isUseCompression()) {
/////////////////////////////////////////////////////////////////////////
1:                 data = new ByteSequence(new byte[] {}, 0, 0);
/////////////////////////////////////////////////////////////////////////
1:         return super.toString() + " ActiveMQStreamMessage{ " + "bytesOut = " + bytesOut + ", dataOut = " + dataOut + ", dataIn = " + dataIn + " }";
commit:88acb0e
/////////////////////////////////////////////////////////////////////////
1: import org.apache.activemq.util.ByteArrayInputStream;
1: import org.apache.activemq.util.ByteArrayOutputStream;
1: import org.apache.activemq.util.ByteSequence;
commit:57b4941
/////////////////////////////////////////////////////////////////////////
1:  * Licensed to the Apache Software Foundation (ASF) under one or more
1:  * contributor license agreements.  See the NOTICE file distributed with
1:  * this work for additional information regarding copyright ownership.
1:  * The ASF licenses this file to You under the Apache License, Version 2.0
1:  * (the "License"); you may not use this file except in compliance with
1:  * the License.  You may obtain a copy of the License at
commit:f451ad0
/////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////
1: import javax.jms.JMSException;
1: import javax.jms.MessageEOFException;
1: import javax.jms.MessageFormatException;
1: import javax.jms.MessageNotReadableException;
1: import javax.jms.MessageNotWriteableException;
1: import javax.jms.StreamMessage;
1: 
0: import org.apache.activeio.packet.ByteSequence;
0: import org.apache.activeio.util.ByteArrayInputStream;
0: import org.apache.activeio.util.ByteArrayOutputStream;
1: import org.apache.activemq.ActiveMQConnection;
1: import org.apache.activemq.util.JMSExceptionSupport;
1: 
commit:48b4869
/////////////////////////////////////////////////////////////////////////
0:  * Copyright 2005-2006 The Apache Software Foundation
commit:d29ca2a
/////////////////////////////////////////////////////////////////////////
1: /**
1:  *
0:  * Copyright 2004 The Apache Software Foundation
1:  *
0:  * Licensed under the Apache License, Version 2.0 (the "License");
0:  * you may not use this file except in compliance with the License.
0:  * You may obtain a copy of the License at
1:  *
0:  * http://www.apache.org/licenses/LICENSE-2.0
1:  *
1:  * Unless required by applicable law or agreed to in writing, software
1:  * distributed under the License is distributed on an "AS IS" BASIS,
1:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:  * See the License for the specific language governing permissions and
1:  * limitations under the License.
1:  */
1: 
1: package org.apache.activemq.command;
1: 
0: import javax.jms.JMSException;
0: import javax.jms.MessageEOFException;
0: import javax.jms.MessageFormatException;
0: import javax.jms.MessageNotReadableException;
0: import javax.jms.MessageNotWriteableException;
0: import javax.jms.StreamMessage;
1: 
0: import org.activeio.ByteArrayInputStream;
0: import org.activeio.ByteArrayOutputStream;
0: import org.activeio.ByteSequence;
0: import org.apache.activemq.ActiveMQConnection;
0: import org.apache.activemq.util.JMSExceptionSupport;
1: 
1: import java.io.BufferedInputStream;
1: import java.io.DataInputStream;
1: import java.io.DataOutputStream;
1: import java.io.EOFException;
1: import java.io.IOException;
1: import java.io.InputStream;
1: import java.io.OutputStream;
1: import java.util.zip.DeflaterOutputStream;
1: import java.util.zip.InflaterInputStream;
1: 
1: /**
1:  * A <CODE>StreamMessage</CODE> object is used to send a stream of primitive
1:  * types in the Java programming language. It is filled and read sequentially.
1:  * It inherits from the <CODE>Message</CODE> interface and adds a stream
0:  * message body. Its methods are based largely on those found in <CODE>java.io.DataInputStream</CODE>
0:  * and <CODE>java.io.DataOutputStream</CODE>. <p/>
1:  * <P>
1:  * The primitive types can be read or written explicitly using methods for each
1:  * type. They may also be read or written generically as objects. For instance,
0:  * a call to <CODE>StreamMessage.writeInt(6)</CODE> is equivalent to <CODE>StreamMessage.writeObject(new
0:  * Integer(6))</CODE>. Both forms are provided, because the explicit form is
0:  * convenient for static programming, and the object form is needed when types
0:  * are not known at compile time. <p/>
1:  * <P>
1:  * When the message is first created, and when <CODE>clearBody</CODE> is
1:  * called, the body of the message is in write-only mode. After the first call
1:  * to <CODE>reset</CODE> has been made, the message body is in read-only mode.
1:  * After a message has been sent, the client that sent it can retain and modify
1:  * it without affecting the message that has been sent. The same message object
1:  * can be sent multiple times. When a message has been received, the provider
1:  * has called <CODE>reset</CODE> so that the message body is in read-only mode
1:  * for the client. <p/>
1:  * <P>
1:  * If <CODE>clearBody</CODE> is called on a message in read-only mode, the
1:  * message body is cleared and the message body is in write-only mode. <p/>
1:  * <P>
0:  * If a client attempts to read a message in write-only mode, a <CODE>MessageNotReadableException</CODE>
0:  * is thrown. <p/>
1:  * <P>
0:  * If a client attempts to write a message in read-only mode, a <CODE>MessageNotWriteableException</CODE>
0:  * is thrown. <p/>
1:  * <P>
1:  * <CODE>StreamMessage</CODE> objects support the following conversion table.
0:  * The marked cases must be supported. The unmarked cases must throw a <CODE>JMSException</CODE>.
0:  * The <CODE>String</CODE>-to-primitive conversions may throw a runtime
0:  * exception if the primitive's <CODE>valueOf()</CODE> method does not accept
0:  * it as a valid <CODE>String</CODE> representation of the primitive. <p/>
1:  * <P>
1:  * A value written as the row type can be read as the column type. <p/>
1:  * 
0:  * <PRE> | | boolean byte short char int long float double String byte[]
1:  * |----------------------------------------------------------------------
1:  * |boolean | X X |byte | X X X X X |short | X X X X |char | X X |int | X X X
1:  * |long | X X |float | X X X |double | X X |String | X X X X X X X X |byte[] |
1:  * X |----------------------------------------------------------------------
1:  * 
1:  * </PRE>
1:  * 
1:  * <p/>
1:  * <P>
1:  * Attempting to read a null value as a primitive type must be treated as
1:  * calling the primitive's corresponding <code>valueOf(String)</code>
1:  * conversion method with a null value. Since <code>char</code> does not
1:  * support a <code>String</code> conversion, attempting to read a null value
1:  * as a <code>char</code> must throw a <code>NullPointerException</code>.
1:  * 
0:  * @openwire:marshaller
1:  * @see javax.jms.Session#createStreamMessage()
1:  * @see javax.jms.BytesMessage
1:  * @see javax.jms.MapMessage
1:  * @see javax.jms.Message
1:  * @see javax.jms.ObjectMessage
1:  * @see javax.jms.TextMessage
1:  */
1: public class ActiveMQStreamMessage extends ActiveMQMessage implements StreamMessage {
1: 
1:     public static final byte DATA_STRUCTURE_TYPE = CommandTypes.ACTIVEMQ_STREAM_MESSAGE;
1: 
1:     /**
0:      * message property types
1:      */
0:     private final static byte BYTES = 3;
0:     private final static byte STRING = 4;
0:     private final static byte BOOLEAN = 5;
0:     private final static byte CHAR = 6;
0:     private final static byte BYTE = 7;
0:     private final static byte SHORT = 8;
0:     private final static byte INT = 9;
0:     private final static byte LONG = 10;
0:     private final static byte FLOAT = 11;
0:     private final static byte DOUBLE = 12;
0:     private final static byte NULL = 13;
1: 
0:     transient protected DataOutputStream dataOut;
0:     transient protected ByteArrayOutputStream bytesOut;
0:     transient protected DataInputStream dataIn;
0:     transient protected int remainingBytes = -1;
1: 
1:     public Message copy() {
1:         ActiveMQStreamMessage copy = new ActiveMQStreamMessage();
1:         copy(copy);
1:         return copy;
1:     }
1: 
1:     private void copy(ActiveMQStreamMessage copy) {
1:         storeContent();
1:         super.copy(copy);
1:         copy.dataOut = null;
1:         copy.bytesOut = null;
1:         copy.dataIn = null;
1:     }
1:     
0:     public void onSend() {
1:         super.onSend();
1:         storeContent();
1:     }
1: 
0:     private void storeContent() {
1:         if (dataOut != null) {
1:             try {
1:                 dataOut.close();
1:                 setContent(bytesOut.toByteSequence());
1:                 bytesOut = null;
1:                 dataOut = null;
1:             } catch (IOException ioe) {
1:                 throw new RuntimeException(ioe);
1:             }
1:         }
1:     }
1: 
1:     public byte getDataStructureType() {
1:         return DATA_STRUCTURE_TYPE;
1:     }
1: 
1:     /**
1:      * Clears out the message body. Clearing a message's body does not clear its
1:      * header values or property entries. <p/>
1:      * <P>
1:      * If this message body was read-only, calling this method leaves the
1:      * message body in the same state as an empty body in a newly created
1:      * message.
1:      * 
0:      * @throws JMSException
0:      *             if the JMS provider fails to clear the message body due to
0:      *             some internal error.
1:      */
1: 
1:     public void clearBody() throws JMSException {
1:         super.clearBody();
1:         this.dataOut = null;
1:         this.dataIn = null;
1:         this.bytesOut = null;
0:         this.remainingBytes=-1;
1:     }
1: 
1:     /**
1:      * Reads a <code>boolean</code> from the stream message.
1:      * 
1:      * @return the <code>boolean</code> value read
0:      * @throws JMSException
0:      *             if the JMS provider fails to read the message due to some
0:      *             internal error.
0:      * @throws MessageEOFException
0:      *             if unexpected end of message stream has been reached.
0:      * @throws MessageFormatException
0:      *             if this type conversion is invalid.
0:      * @throws MessageNotReadableException
0:      *             if the message is in write-only mode.
1:      */
1: 
1:     public boolean readBoolean() throws JMSException {
1:         initializeReading();
1:         try {
1: 
1:             this.dataIn.mark(10);
1:             int type = this.dataIn.read();
1:             if (type == -1) {
1:                 throw new MessageEOFException("reached end of data");
1:             }
0:             if (type == BOOLEAN) {
1:                 return this.dataIn.readBoolean();
1:             }
0:             if (type == STRING) {
1:                 return Boolean.valueOf(this.dataIn.readUTF()).booleanValue();
1:             }
0:             if (type == NULL) {
1:                 this.dataIn.reset();
1:                 throw new NullPointerException("Cannot convert NULL value to boolean.");
1:             } else {
1:                 this.dataIn.reset();
1:                 throw new MessageFormatException(" not a boolean type");
1:             }
1:         } catch (EOFException e) {
1:             throw JMSExceptionSupport.createMessageEOFException(e);
1:         } catch (IOException e) {
1:             throw JMSExceptionSupport.createMessageFormatException(e);
1:         }
1:     }
1: 
1:     /**
1:      * Reads a <code>byte</code> value from the stream message.
1:      * 
1:      * @return the next byte from the stream message as a 8-bit
1:      *         <code>byte</code>
0:      * @throws JMSException
0:      *             if the JMS provider fails to read the message due to some
0:      *             internal error.
0:      * @throws MessageEOFException
0:      *             if unexpected end of message stream has been reached.
0:      * @throws MessageFormatException
0:      *             if this type conversion is invalid.
0:      * @throws MessageNotReadableException
0:      *             if the message is in write-only mode.
1:      */
1: 
1:     public byte readByte() throws JMSException {
1:         initializeReading();
1:         try {
1: 
1:             this.dataIn.mark(10);
1:             int type = this.dataIn.read();
1:             if (type == -1) {
1:                 throw new MessageEOFException("reached end of data");
1:             }
0:             if (type == BYTE) {
1:                 return this.dataIn.readByte();
1:             }
0:             if (type == STRING) {
1:                 return Byte.valueOf(this.dataIn.readUTF()).byteValue();
1:             }
0:             if (type == NULL) {
1:                 this.dataIn.reset();
1:                 throw new NullPointerException("Cannot convert NULL value to byte.");
1:             } else {
1:                 this.dataIn.reset();
1:                 throw new MessageFormatException(" not a byte type");
1:             }
1:         } catch (NumberFormatException mfe) {
1:             try {
1:                 this.dataIn.reset();
1:             } catch (IOException ioe) {
1:                 throw JMSExceptionSupport.create(ioe);
1:             }
1:             throw mfe;
1: 
1:         } catch (EOFException e) {
1:             throw JMSExceptionSupport.createMessageEOFException(e);
1:         } catch (IOException e) {
1:             throw JMSExceptionSupport.createMessageFormatException(e);
1:         }
1:     }
1: 
1:     /**
1:      * Reads a 16-bit integer from the stream message.
1:      * 
1:      * @return a 16-bit integer from the stream message
0:      * @throws JMSException
0:      *             if the JMS provider fails to read the message due to some
0:      *             internal error.
0:      * @throws MessageEOFException
0:      *             if unexpected end of message stream has been reached.
0:      * @throws MessageFormatException
0:      *             if this type conversion is invalid.
0:      * @throws MessageNotReadableException
0:      *             if the message is in write-only mode.
1:      */
1: 
1:     public short readShort() throws JMSException {
1:         initializeReading();
1:         try {
1: 
1:             this.dataIn.mark(17);
1:             int type = this.dataIn.read();
1:             if (type == -1) {
1:                 throw new MessageEOFException("reached end of data");
1:             }
0:             if (type == SHORT) {
1:                 return this.dataIn.readShort();
1:             }
0:             if (type == BYTE) {
1:                 return this.dataIn.readByte();
1:             }
0:             if (type == STRING) {
1:                 return Short.valueOf(this.dataIn.readUTF()).shortValue();
1:             }
0:             if (type == NULL) {
1:                 this.dataIn.reset();
1:                 throw new NullPointerException("Cannot convert NULL value to short.");
1:             } else {
1:                 this.dataIn.reset();
1:                 throw new MessageFormatException(" not a short type");
1:             }
1:         } catch (NumberFormatException mfe) {
1:             try {
1:                 this.dataIn.reset();
1:             } catch (IOException ioe) {
1:                 throw JMSExceptionSupport.create(ioe);
1:             }
1:             throw mfe;
1: 
1:         } catch (EOFException e) {
1:             throw JMSExceptionSupport.createMessageEOFException(e);
1:         } catch (IOException e) {
1:             throw JMSExceptionSupport.createMessageFormatException(e);
1:         }
1: 
1:     }
1: 
1:     /**
1:      * Reads a Unicode character value from the stream message.
1:      * 
1:      * @return a Unicode character from the stream message
0:      * @throws JMSException
0:      *             if the JMS provider fails to read the message due to some
0:      *             internal error.
0:      * @throws MessageEOFException
0:      *             if unexpected end of message stream has been reached.
0:      * @throws MessageFormatException
0:      *             if this type conversion is invalid
0:      * @throws MessageNotReadableException
0:      *             if the message is in write-only mode.
1:      */
1: 
1:     public char readChar() throws JMSException {
1:         initializeReading();
1:         try {
1: 
1:             this.dataIn.mark(17);
1:             int type = this.dataIn.read();
1:             if (type == -1) {
1:                 throw new MessageEOFException("reached end of data");
1:             }
0:             if (type == CHAR) {
1:                 return this.dataIn.readChar();
1:             }
0:             if (type == NULL) {
1:                 this.dataIn.reset();
1:                 throw new NullPointerException("Cannot convert NULL value to char.");
1:             } else {
1:                 this.dataIn.reset();
1:                 throw new MessageFormatException(" not a char type");
1:             }
1:         } catch (NumberFormatException mfe) {
1:             try {
1:                 this.dataIn.reset();
1:             } catch (IOException ioe) {
1:                 throw JMSExceptionSupport.create(ioe);
1:             }
1:             throw mfe;
1: 
1:         } catch (EOFException e) {
1:             throw JMSExceptionSupport.createMessageEOFException(e);
1:         } catch (IOException e) {
1:             throw JMSExceptionSupport.createMessageFormatException(e);
1:         }
1:     }
1: 
1:     /**
1:      * Reads a 32-bit integer from the stream message.
1:      * 
1:      * @return a 32-bit integer value from the stream message, interpreted as an
1:      *         <code>int</code>
0:      * @throws JMSException
0:      *             if the JMS provider fails to read the message due to some
0:      *             internal error.
0:      * @throws MessageEOFException
0:      *             if unexpected end of message stream has been reached.
0:      * @throws MessageFormatException
0:      *             if this type conversion is invalid.
0:      * @throws MessageNotReadableException
0:      *             if the message is in write-only mode.
1:      */
1: 
1:     public int readInt() throws JMSException {
1:         initializeReading();
1:         try {
1: 
1:             this.dataIn.mark(33);
1:             int type = this.dataIn.read();
1:             if (type == -1) {
1:                 throw new MessageEOFException("reached end of data");
1:             }
0:             if (type == INT) {
1:                 return this.dataIn.readInt();
1:             }
0:             if (type == SHORT) {
1:                 return this.dataIn.readShort();
1:             }
0:             if (type == BYTE) {
1:                 return this.dataIn.readByte();
1:             }
0:             if (type == STRING) {
1:                 return Integer.valueOf(this.dataIn.readUTF()).intValue();
1:             }
0:             if (type == NULL) {
1:                 this.dataIn.reset();
1:                 throw new NullPointerException("Cannot convert NULL value to int.");
1:             } else {
1:                 this.dataIn.reset();
1:                 throw new MessageFormatException(" not an int type");
1:             }
1:         } catch (NumberFormatException mfe) {
1:             try {
1:                 this.dataIn.reset();
1:             } catch (IOException ioe) {
1:                 throw JMSExceptionSupport.create(ioe);
1:             }
1:             throw mfe;
1: 
1:         } catch (EOFException e) {
1:             throw JMSExceptionSupport.createMessageEOFException(e);
1:         } catch (IOException e) {
1:             throw JMSExceptionSupport.createMessageFormatException(e);
1:         }
1:     }
1: 
1:     /**
1:      * Reads a 64-bit integer from the stream message.
1:      * 
1:      * @return a 64-bit integer value from the stream message, interpreted as a
1:      *         <code>long</code>
0:      * @throws JMSException
0:      *             if the JMS provider fails to read the message due to some
0:      *             internal error.
0:      * @throws MessageEOFException
0:      *             if unexpected end of message stream has been reached.
0:      * @throws MessageFormatException
0:      *             if this type conversion is invalid.
0:      * @throws MessageNotReadableException
0:      *             if the message is in write-only mode.
1:      */
1: 
1:     public long readLong() throws JMSException {
1:         initializeReading();
1:         try {
1: 
1:             this.dataIn.mark(65);
1:             int type = this.dataIn.read();
1:             if (type == -1) {
1:                 throw new MessageEOFException("reached end of data");
1:             }
0:             if (type == LONG) {
1:                 return this.dataIn.readLong();
1:             }
0:             if (type == INT) {
1:                 return this.dataIn.readInt();
1:             }
0:             if (type == SHORT) {
1:                 return this.dataIn.readShort();
1:             }
0:             if (type == BYTE) {
1:                 return this.dataIn.readByte();
1:             }
0:             if (type == STRING) {
1:                 return Long.valueOf(this.dataIn.readUTF()).longValue();
1:             }
0:             if (type == NULL) {
1:                 this.dataIn.reset();
1:                 throw new NullPointerException("Cannot convert NULL value to long.");
1:             } else {
1:                 this.dataIn.reset();
1:                 throw new MessageFormatException(" not a long type");
1:             }
1:         } catch (NumberFormatException mfe) {
1:             try {
1:                 this.dataIn.reset();
1:             } catch (IOException ioe) {
1:                 throw JMSExceptionSupport.create(ioe);
1:             }
1:             throw mfe;
1: 
1:         } catch (EOFException e) {
1:             throw JMSExceptionSupport.createMessageEOFException(e);
1:         } catch (IOException e) {
1:             throw JMSExceptionSupport.createMessageFormatException(e);
1:         }
1:     }
1: 
1:     /**
1:      * Reads a <code>float</code> from the stream message.
1:      * 
1:      * @return a <code>float</code> value from the stream message
0:      * @throws JMSException
0:      *             if the JMS provider fails to read the message due to some
0:      *             internal error.
0:      * @throws MessageEOFException
0:      *             if unexpected end of message stream has been reached.
0:      * @throws MessageFormatException
0:      *             if this type conversion is invalid.
0:      * @throws MessageNotReadableException
0:      *             if the message is in write-only mode.
1:      */
1: 
1:     public float readFloat() throws JMSException {
1:         initializeReading();
1:         try {
1:             this.dataIn.mark(33);
1:             int type = this.dataIn.read();
1:             if (type == -1) {
1:                 throw new MessageEOFException("reached end of data");
1:             }
0:             if (type == FLOAT) {
1:                 return this.dataIn.readFloat();
1:             }
0:             if (type == STRING) {
1:                 return Float.valueOf(this.dataIn.readUTF()).floatValue();
1:             }
0:             if (type == NULL) {
1:                 this.dataIn.reset();
1:                 throw new NullPointerException("Cannot convert NULL value to float.");
1:             } else {
1:                 this.dataIn.reset();
1:                 throw new MessageFormatException(" not a float type");
1:             }
1:         } catch (NumberFormatException mfe) {
1:             try {
1:                 this.dataIn.reset();
1:             } catch (IOException ioe) {
1:                 throw JMSExceptionSupport.create(ioe);
1:             }
1:             throw mfe;
1: 
1:         } catch (EOFException e) {
1:             throw JMSExceptionSupport.createMessageEOFException(e);
1:         } catch (IOException e) {
1:             throw JMSExceptionSupport.createMessageFormatException(e);
1:         }
1:     }
1: 
1:     /**
1:      * Reads a <code>double</code> from the stream message.
1:      * 
1:      * @return a <code>double</code> value from the stream message
0:      * @throws JMSException
0:      *             if the JMS provider fails to read the message due to some
0:      *             internal error.
0:      * @throws MessageEOFException
0:      *             if unexpected end of message stream has been reached.
0:      * @throws MessageFormatException
0:      *             if this type conversion is invalid.
0:      * @throws MessageNotReadableException
0:      *             if the message is in write-only mode.
1:      */
1: 
1:     public double readDouble() throws JMSException {
1:         initializeReading();
1:         try {
1: 
1:             this.dataIn.mark(65);
1:             int type = this.dataIn.read();
1:             if (type == -1) {
1:                 throw new MessageEOFException("reached end of data");
1:             }
0:             if (type == DOUBLE) {
1:                 return this.dataIn.readDouble();
1:             }
0:             if (type == FLOAT) {
1:                 return this.dataIn.readFloat();
1:             }
0:             if (type == STRING) {
1:                 return Double.valueOf(this.dataIn.readUTF()).doubleValue();
1:             }
0:             if (type == NULL) {
1:                 this.dataIn.reset();
1:                 throw new NullPointerException("Cannot convert NULL value to double.");
1:             } else {
1:                 this.dataIn.reset();
1:                 throw new MessageFormatException(" not a double type");
1:             }
1:         } catch (NumberFormatException mfe) {
1:             try {
1:                 this.dataIn.reset();
1:             } catch (IOException ioe) {
1:                 throw JMSExceptionSupport.create(ioe);
1:             }
1:             throw mfe;
1: 
1:         } catch (EOFException e) {
1:             throw JMSExceptionSupport.createMessageEOFException(e);
1:         } catch (IOException e) {
1:             throw JMSExceptionSupport.createMessageFormatException(e);
1:         }
1:     }
1: 
1:     /**
1:      * Reads a <CODE>String</CODE> from the stream message.
1:      * 
1:      * @return a Unicode string from the stream message
0:      * @throws JMSException
0:      *             if the JMS provider fails to read the message due to some
0:      *             internal error.
0:      * @throws MessageEOFException
0:      *             if unexpected end of message stream has been reached.
0:      * @throws MessageFormatException
0:      *             if this type conversion is invalid.
0:      * @throws MessageNotReadableException
0:      *             if the message is in write-only mode.
1:      */
1: 
1:     public String readString() throws JMSException {
1:         initializeReading();
1:         try {
1: 
1:             this.dataIn.mark(65);
1:             int type = this.dataIn.read();
1:             if (type == -1) {
1:                 throw new MessageEOFException("reached end of data");
1:             }
0:             if (type == NULL) {
1:                 return null;
1:             }
0:             if (type == STRING) {
1:                 return this.dataIn.readUTF();
1:             }
0:             if (type == LONG) {
1:                 return new Long(this.dataIn.readLong()).toString();
1:             }
0:             if (type == INT) {
1:                 return new Integer(this.dataIn.readInt()).toString();
1:             }
0:             if (type == SHORT) {
1:                 return new Short(this.dataIn.readShort()).toString();
1:             }
0:             if (type == BYTE) {
1:                 return new Byte(this.dataIn.readByte()).toString();
1:             }
0:             if (type == FLOAT) {
1:                 return new Float(this.dataIn.readFloat()).toString();
1:             }
0:             if (type == DOUBLE) {
1:                 return new Double(this.dataIn.readDouble()).toString();
1:             }
0:             if (type == BOOLEAN) {
1:                 return (this.dataIn.readBoolean() ? Boolean.TRUE : Boolean.FALSE).toString();
1:             }
0:             if (type == CHAR) {
1:                 return new Character(this.dataIn.readChar()).toString();
1:             } else {
1:                 this.dataIn.reset();
1:                 throw new MessageFormatException(" not a String type");
1:             }
1:         } catch (NumberFormatException mfe) {
1:             try {
1:                 this.dataIn.reset();
1:             } catch (IOException ioe) {
1:                 throw JMSExceptionSupport.create(ioe);
1:             }
1:             throw mfe;
1: 
1:         } catch (EOFException e) {
1:             throw JMSExceptionSupport.createMessageEOFException(e);
1:         } catch (IOException e) {
1:             throw JMSExceptionSupport.createMessageFormatException(e);
1:         }
1:     }
1: 
1:     /**
1:      * Reads a byte array field from the stream message into the specified
1:      * <CODE>byte[]</CODE> object (the read buffer). <p/>
1:      * <P>
1:      * To read the field value, <CODE>readBytes</CODE> should be successively
1:      * called until it returns a value less than the length of the read buffer.
1:      * The value of the bytes in the buffer following the last byte read is
1:      * undefined. <p/>
1:      * <P>
1:      * If <CODE>readBytes</CODE> returns a value equal to the length of the
1:      * buffer, a subsequent <CODE>readBytes</CODE> call must be made. If there
1:      * are no more bytes to be read, this call returns -1. <p/>
1:      * <P>
1:      * If the byte array field value is null, <CODE>readBytes</CODE> returns
1:      * -1. <p/>
1:      * <P>
1:      * If the byte array field value is empty, <CODE>readBytes</CODE> returns
1:      * 0. <p/>
1:      * <P>
1:      * Once the first <CODE>readBytes</CODE> call on a <CODE>byte[]</CODE>
1:      * field value has been made, the full value of the field must be read
1:      * before it is valid to read the next field. An attempt to read the next
0:      * field before that has been done will throw a <CODE>MessageFormatException</CODE>.
1:      * <p/>
1:      * <P>
1:      * To read the byte field value into a new <CODE>byte[]</CODE> object, use
1:      * the <CODE>readObject</CODE> method.
1:      * 
0:      * @param value
0:      *            the buffer into which the data is read
1:      * @return the total number of bytes read into the buffer, or -1 if there is
1:      *         no more data because the end of the byte field has been reached
0:      * @throws JMSException
0:      *             if the JMS provider fails to read the message due to some
0:      *             internal error.
0:      * @throws MessageEOFException
0:      *             if unexpected end of message stream has been reached.
0:      * @throws MessageFormatException
0:      *             if this type conversion is invalid.
0:      * @throws MessageNotReadableException
0:      *             if the message is in write-only mode.
1:      * @see #readObject()
1:      */
1: 
1:     public int readBytes(byte[] value) throws JMSException {
1:         
1:         initializeReading();
1:         try {
1:             if (value == null) {
1:                 throw new NullPointerException();
1:             }
1:             
0:             if( remainingBytes == -1 ) {
1:                 this.dataIn.mark(value.length + 1);
1:                 int type = this.dataIn.read();
1:                 if (type == -1) {
1:                     throw new MessageEOFException("reached end of data");
1:                 }
0:                 if (type != BYTES) {
1:                     throw new MessageFormatException("Not a byte array");
1:                 }
1:                 remainingBytes = this.dataIn.readInt();
0:             } else if ( remainingBytes == 0 ) {
1:                 remainingBytes = -1;
1:                 return -1;
1:             }
1:             
1:             if (value.length <= remainingBytes) {
1:                 // small buffer
1:                 remainingBytes -= value.length;
1:                 this.dataIn.readFully(value);
1:                 return value.length;
1:             } else {
1:                 // big buffer
1:                 int rc = this.dataIn.read(value, 0, remainingBytes);
0:                 remainingBytes=0;
0:                 return rc;
1:             }                
1:             
1:         } catch (EOFException e) {
1:             JMSException jmsEx = new MessageEOFException(e.getMessage());
1:             jmsEx.setLinkedException(e);
1:             throw jmsEx;
1:         } catch (IOException e) {
1:             JMSException jmsEx = new MessageFormatException(e.getMessage());
1:             jmsEx.setLinkedException(e);
1:             throw jmsEx;
1:         }
1:     }
1: 
1:     /**
1:      * Reads an object from the stream message. <p/>
1:      * <P>
1:      * This method can be used to return, in objectified format, an object in
1:      * the Java programming language ("Java object") that has been written to
1:      * the stream with the equivalent <CODE>writeObject</CODE> method call, or
1:      * its equivalent primitive <CODE>write<I>type</I></CODE> method. <p/>
1:      * <P>
0:      * Note that byte values are returned as <CODE>byte[]</CODE>, not <CODE>Byte[]</CODE>.
1:      * <p/>
1:      * <P>
1:      * An attempt to call <CODE>readObject</CODE> to read a byte field value
1:      * into a new <CODE>byte[]</CODE> object before the full value of the byte
1:      * field has been read will throw a <CODE>MessageFormatException</CODE>.
1:      * 
1:      * @return a Java object from the stream message, in objectified format (for
1:      *         example, if the object was written as an <CODE>int</CODE>, an
1:      *         <CODE>Integer</CODE> is returned)
0:      * @throws JMSException
0:      *             if the JMS provider fails to read the message due to some
0:      *             internal error.
0:      * @throws MessageEOFException
0:      *             if unexpected end of message stream has been reached.
0:      * @throws MessageFormatException
0:      *             if this type conversion is invalid.
0:      * @throws MessageNotReadableException
0:      *             if the message is in write-only mode.
1:      * @see #readBytes(byte[] value)
1:      */
1: 
1:     public Object readObject() throws JMSException {
1:         initializeReading();
1:         try {
1:             this.dataIn.mark(65);
1:             int type = this.dataIn.read();
1:             if (type == -1) {
1:                 throw new MessageEOFException("reached end of data");
1:             }
0:             if (type == NULL) {
1:                 return null;
1:             }
0:             if (type == STRING) {
1:                 return this.dataIn.readUTF();
1:             }
0:             if (type == LONG) {
0:                 return new Long(this.dataIn.readLong());
1:             }
0:             if (type == INT) {
0:                 return new Integer(this.dataIn.readInt());
1:             }
0:             if (type == SHORT) {
0:                 return new Short(this.dataIn.readShort());
1:             }
0:             if (type == BYTE) {
0:                 return new Byte(this.dataIn.readByte());
1:             }
0:             if (type == FLOAT) {
1:                 return new Float(this.dataIn.readFloat());
1:             }
0:             if (type == DOUBLE) {
1:                 return new Double(this.dataIn.readDouble());
1:             }
0:             if (type == BOOLEAN) {
1:                 return this.dataIn.readBoolean() ? Boolean.TRUE : Boolean.FALSE;
1:             }
0:             if (type == CHAR) {
0:                 return new Character(this.dataIn.readChar());
1:             }
0:             if (type == BYTES) {
1:                 int len = this.dataIn.readInt();
1:                 byte[] value = new byte[len];
1:                 this.dataIn.readFully(value);
1:                 return value;
1:             } else {
1:                 this.dataIn.reset();
1:                 throw new MessageFormatException("unknown type");
1:             }
1:         } catch (NumberFormatException mfe) {
1:             try {
1:                 this.dataIn.reset();
1:             } catch (IOException ioe) {
1:                 throw JMSExceptionSupport.create(ioe);
1:             }
1:             throw mfe;
1: 
1:         } catch (EOFException e) {
1:             JMSException jmsEx = new MessageEOFException(e.getMessage());
1:             jmsEx.setLinkedException(e);
1:             throw jmsEx;
1:         } catch (IOException e) {
1:             JMSException jmsEx = new MessageFormatException(e.getMessage());
1:             jmsEx.setLinkedException(e);
1:             throw jmsEx;
1:         }
1:     }
1: 
1:     /**
1:      * Writes a <code>boolean</code> to the stream message. The value
1:      * <code>true</code> is written as the value <code>(byte)1</code>; the
1:      * value <code>false</code> is written as the value <code>(byte)0</code>.
1:      * 
0:      * @param value
0:      *            the <code>boolean</code> value to be written
0:      * @throws JMSException
0:      *             if the JMS provider fails to write the message due to some
0:      *             internal error.
0:      * @throws MessageNotWriteableException
0:      *             if the message is in read-only mode.
1:      */
1: 
1:     public void writeBoolean(boolean value) throws JMSException {
1:         initializeWriting();
1:         try {
0:             this.dataOut.write(BOOLEAN);
0:             this.dataOut.writeBoolean(value);
1:         } catch (IOException ioe) {
1:             throw JMSExceptionSupport.create(ioe);
1:         }
1:     }
1: 
1:     /**
1:      * Writes a <code>byte</code> to the stream message.
1:      * 
0:      * @param value
0:      *            the <code>byte</code> value to be written
0:      * @throws JMSException
0:      *             if the JMS provider fails to write the message due to some
0:      *             internal error.
0:      * @throws MessageNotWriteableException
0:      *             if the message is in read-only mode.
1:      */
1: 
1:     public void writeByte(byte value) throws JMSException {
1:         initializeWriting();
1:         try {
0:             this.dataOut.write(BYTE);
0:             this.dataOut.writeByte(value);
1:         } catch (IOException ioe) {
1:             throw JMSExceptionSupport.create(ioe);
1:         }
1:     }
1: 
1:     /**
1:      * Writes a <code>short</code> to the stream message.
1:      * 
0:      * @param value
0:      *            the <code>short</code> value to be written
0:      * @throws JMSException
0:      *             if the JMS provider fails to write the message due to some
0:      *             internal error.
0:      * @throws MessageNotWriteableException
0:      *             if the message is in read-only mode.
1:      */
1: 
1:     public void writeShort(short value) throws JMSException {
1:         initializeWriting();
1:         try {
0:             this.dataOut.write(SHORT);
0:             this.dataOut.writeShort(value);
1:         } catch (IOException ioe) {
1:             throw JMSExceptionSupport.create(ioe);
1:         }
1:     }
1: 
1:     /**
1:      * Writes a <code>char</code> to the stream message.
1:      * 
0:      * @param value
0:      *            the <code>char</code> value to be written
0:      * @throws JMSException
0:      *             if the JMS provider fails to write the message due to some
0:      *             internal error.
0:      * @throws MessageNotWriteableException
0:      *             if the message is in read-only mode.
1:      */
1: 
1:     public void writeChar(char value) throws JMSException {
1:         initializeWriting();
1:         try {
0:             this.dataOut.write(CHAR);
0:             this.dataOut.writeChar(value);
1:         } catch (IOException ioe) {
1:             throw JMSExceptionSupport.create(ioe);
1:         }
1:     }
1: 
1:     /**
1:      * Writes an <code>int</code> to the stream message.
1:      * 
0:      * @param value
0:      *            the <code>int</code> value to be written
0:      * @throws JMSException
0:      *             if the JMS provider fails to write the message due to some
0:      *             internal error.
0:      * @throws MessageNotWriteableException
0:      *             if the message is in read-only mode.
1:      */
1: 
1:     public void writeInt(int value) throws JMSException {
1:         initializeWriting();
1:         try {
0:             this.dataOut.write(INT);
0:             this.dataOut.writeInt(value);
1:         } catch (IOException ioe) {
1:             throw JMSExceptionSupport.create(ioe);
1:         }
1:     }
1: 
1:     /**
1:      * Writes a <code>long</code> to the stream message.
1:      * 
0:      * @param value
0:      *            the <code>long</code> value to be written
0:      * @throws JMSException
0:      *             if the JMS provider fails to write the message due to some
0:      *             internal error.
0:      * @throws MessageNotWriteableException
0:      *             if the message is in read-only mode.
1:      */
1: 
1:     public void writeLong(long value) throws JMSException {
1:         initializeWriting();
1:         try {
0:             this.dataOut.write(LONG);
0:             this.dataOut.writeLong(value);
1:         } catch (IOException ioe) {
1:             throw JMSExceptionSupport.create(ioe);
1:         }
1:     }
1: 
1:     /**
1:      * Writes a <code>float</code> to the stream message.
1:      * 
0:      * @param value
0:      *            the <code>float</code> value to be written
0:      * @throws JMSException
0:      *             if the JMS provider fails to write the message due to some
0:      *             internal error.
0:      * @throws MessageNotWriteableException
0:      *             if the message is in read-only mode.
1:      */
1: 
1:     public void writeFloat(float value) throws JMSException {
1:         initializeWriting();
1:         try {
0:             this.dataOut.write(FLOAT);
0:             this.dataOut.writeFloat(value);
1:         } catch (IOException ioe) {
1:             throw JMSExceptionSupport.create(ioe);
1:         }
1:     }
1: 
1:     /**
1:      * Writes a <code>double</code> to the stream message.
1:      * 
0:      * @param value
0:      *            the <code>double</code> value to be written
0:      * @throws JMSException
0:      *             if the JMS provider fails to write the message due to some
0:      *             internal error.
0:      * @throws MessageNotWriteableException
0:      *             if the message is in read-only mode.
1:      */
1: 
1:     public void writeDouble(double value) throws JMSException {
1:         initializeWriting();
1:         try {
0:             this.dataOut.write(DOUBLE);
0:             this.dataOut.writeDouble(value);
1:         } catch (IOException ioe) {
1:             throw JMSExceptionSupport.create(ioe);
1:         }
1:     }
1: 
1:     /**
1:      * Writes a <code>String</code> to the stream message.
1:      * 
0:      * @param value
0:      *            the <code>String</code> value to be written
0:      * @throws JMSException
0:      *             if the JMS provider fails to write the message due to some
0:      *             internal error.
0:      * @throws MessageNotWriteableException
0:      *             if the message is in read-only mode.
1:      */
1: 
1:     public void writeString(String value) throws JMSException {
1:         initializeWriting();
1:         try {
1:             if (value == null) {
0:                 this.dataOut.write(NULL);
1:             } else {
0:                 this.dataOut.write(STRING);
0:                 this.dataOut.writeUTF(value);
1:             }
1:         } catch (IOException ioe) {
1:             throw JMSExceptionSupport.create(ioe);
1:         }
1:     }
1: 
1:     /**
1:      * Writes a byte array field to the stream message. <p/>
1:      * <P>
1:      * The byte array <code>value</code> is written to the message as a byte
1:      * array field. Consecutively written byte array fields are treated as two
1:      * distinct fields when the fields are read.
1:      * 
0:      * @param value
0:      *            the byte array value to be written
0:      * @throws JMSException
0:      *             if the JMS provider fails to write the message due to some
0:      *             internal error.
0:      * @throws MessageNotWriteableException
0:      *             if the message is in read-only mode.
1:      */
1: 
1:     public void writeBytes(byte[] value) throws JMSException {
1:         writeBytes(value, 0, value.length);
1:     }
1: 
1:     /**
1:      * Writes a portion of a byte array as a byte array field to the stream
1:      * message. <p/>
1:      * <P>
1:      * The a portion of the byte array <code>value</code> is written to the
1:      * message as a byte array field. Consecutively written byte array fields
1:      * are treated as two distinct fields when the fields are read.
1:      * 
0:      * @param value
0:      *            the byte array value to be written
0:      * @param offset
0:      *            the initial offset within the byte array
0:      * @param length
0:      *            the number of bytes to use
0:      * @throws JMSException
0:      *             if the JMS provider fails to write the message due to some
0:      *             internal error.
0:      * @throws MessageNotWriteableException
0:      *             if the message is in read-only mode.
1:      */
1: 
1:     public void writeBytes(byte[] value, int offset, int length) throws JMSException {
1:         initializeWriting();
1:         try {
0:             this.dataOut.write(BYTES);
0:             this.dataOut.writeInt(length);
0:             this.dataOut.write(value, offset, length);
1:         } catch (IOException ioe) {
1:             throw JMSExceptionSupport.create(ioe);
1:         }
1:     }
1: 
1:     /**
1:      * Writes an object to the stream message. <p/>
1:      * <P>
1:      * This method works only for the objectified primitive object types (<code>Integer</code>,
1:      * <code>Double</code>, <code>Long</code>&nbsp;...),
1:      * <code>String</code> objects, and byte arrays.
1:      * 
0:      * @param value
0:      *            the Java object to be written
0:      * @throws JMSException
0:      *             if the JMS provider fails to write the message due to some
0:      *             internal error.
0:      * @throws MessageFormatException
0:      *             if the object is invalid.
0:      * @throws MessageNotWriteableException
0:      *             if the message is in read-only mode.
1:      */
1: 
1:     public void writeObject(Object value) throws JMSException {
1:         initializeWriting();
1:         if (value == null) {
1:             try {
0:                 this.dataOut.write(NULL);
1:             } catch (IOException ioe) {
1:                 throw JMSExceptionSupport.create(ioe);
1:             }
1:         } else if (value instanceof String) {
1:             writeString(value.toString());
1:         } else if (value instanceof Character) {
0:             writeChar(((Character) value).charValue());
1:         } else if (value instanceof Boolean) {
0:             writeBoolean(((Boolean) value).booleanValue());
1:         } else if (value instanceof Byte) {
0:             writeByte(((Byte) value).byteValue());
1:         } else if (value instanceof Short) {
0:             writeShort(((Short) value).shortValue());
1:         } else if (value instanceof Integer) {
0:             writeInt(((Integer) value).intValue());
1:         } else if (value instanceof Float) {
0:             writeFloat(((Float) value).floatValue());
1:         } else if (value instanceof Double) {
0:             writeDouble(((Double) value).doubleValue());
1:         } else if (value instanceof byte[]) {
0:             writeBytes((byte[]) value);
1:         }
1:     }
1: 
1:     /**
1:      * Puts the message body in read-only mode and repositions the stream of
1:      * bytes to the beginning.
1:      * 
0:      * @throws JMSException
0:      *             if an internal error occurs
1:      */
1: 
1:     public void reset() throws JMSException {
1:         storeContent();
1:         this.bytesOut = null;
1:         this.dataIn = null;
1:         this.dataOut = null;
0:         this.remainingBytes=-1;
1:         setReadOnlyBody(true);
1:     }
1: 
0:     private void initializeWriting() throws MessageNotWriteableException {
1:         checkReadOnlyBody();
1:         if (this.dataOut == null) {
1:             this.bytesOut = new ByteArrayOutputStream();
1:             OutputStream os = bytesOut;
1:             ActiveMQConnection connection = getConnection();
0:             if (connection!=null && connection.isUseCompression()) {
1:                 compressed = true;
1:                 os = new DeflaterOutputStream(os);
1:             }
1:             this.dataOut = new DataOutputStream(os);
1:         }
1:     }
1: 
1:     protected void checkWriteOnlyBody() throws MessageNotReadableException {
1:         if (!readOnlyBody) {
1:             throw new MessageNotReadableException("Message body is write-only");
1:         }
1:     }
1: 
1:     private void initializeReading() throws MessageNotReadableException {
1:         checkWriteOnlyBody();
1:         if (this.dataIn == null) {
1:             ByteSequence data = getContent();
0:             if (data == null)
0:                 data = new ByteSequence(new byte[] {}, 0 ,0);
1:             InputStream is = new ByteArrayInputStream(data);
1:             if (isCompressed()) {
1:                 is = new InflaterInputStream(is);
1:                 is = new BufferedInputStream(is);
1:             }
1:             this.dataIn = new DataInputStream(is);
1:         }
1:     }
1: 
1:     public String toString() {
0:         return super.toString() + " ActiveMQStreamMessage{ " + "bytesOut = " + bytesOut + ", dataOut = " + dataOut
0:                 + ", dataIn = " + dataIn + " }";
1:     }
1: }
author:Timothy A. Bish
-------------------------------------------------------------------------------
commit:41c9366
/////////////////////////////////////////////////////////////////////////
0:  *
0:  *
0:  *
/////////////////////////////////////////////////////////////////////////
0:  *
/////////////////////////////////////////////////////////////////////////
1:     @Override
1:     public void storeContent() {
/////////////////////////////////////////////////////////////////////////
0:      *
/////////////////////////////////////////////////////////////////////////
0:      *
/////////////////////////////////////////////////////////////////////////
0:      *
/////////////////////////////////////////////////////////////////////////
0:      *
/////////////////////////////////////////////////////////////////////////
0:      *
/////////////////////////////////////////////////////////////////////////
0:      *
/////////////////////////////////////////////////////////////////////////
0:      *
/////////////////////////////////////////////////////////////////////////
0:      *
/////////////////////////////////////////////////////////////////////////
0:      *
/////////////////////////////////////////////////////////////////////////
0:      *
/////////////////////////////////////////////////////////////////////////
0:      *
/////////////////////////////////////////////////////////////////////////
0:      *
/////////////////////////////////////////////////////////////////////////
0:      *
/////////////////////////////////////////////////////////////////////////
0:      *
/////////////////////////////////////////////////////////////////////////
0:      *
/////////////////////////////////////////////////////////////////////////
0:      *
/////////////////////////////////////////////////////////////////////////
0:      *
/////////////////////////////////////////////////////////////////////////
0:      *
/////////////////////////////////////////////////////////////////////////
0:      *
/////////////////////////////////////////////////////////////////////////
0:      *
/////////////////////////////////////////////////////////////////////////
0:      *
/////////////////////////////////////////////////////////////////////////
0:      *
/////////////////////////////////////////////////////////////////////////
0:      *
/////////////////////////////////////////////////////////////////////////
0:      *
/////////////////////////////////////////////////////////////////////////
0:      *
/////////////////////////////////////////////////////////////////////////
1:     @Override
1:     public void compress() throws IOException {
1:         storeContent();
1:         super.compress();
1:     }
0: 
author:Robert Davies
-------------------------------------------------------------------------------
commit:58b8d19
/////////////////////////////////////////////////////////////////////////
1:         }else {
1:             throw new MessageFormatException("Unsupported Object type: " + value.getClass());
1:         }
commit:537b1b0
/////////////////////////////////////////////////////////////////////////
1:         }else if (value instanceof Long) {
1:             writeLong(((Long)value).longValue());
1:         } 
commit:d36c0d4
/////////////////////////////////////////////////////////////////////////
1:                 return Long.valueOf(this.dataIn.readLong());
1:                 return Integer.valueOf(this.dataIn.readInt());
1:                 return Short.valueOf(this.dataIn.readShort());
1:                 return Byte.valueOf(this.dataIn.readByte());
/////////////////////////////////////////////////////////////////////////
1:                 return Character.valueOf(this.dataIn.readChar());
author:James Strachan
-------------------------------------------------------------------------------
commit:05a8cba
/////////////////////////////////////////////////////////////////////////
1:     public String getJMSXMimeType() {
1:         return "jms/stream-message";
1:     }
0: 
0: 
commit:8cf4795
/////////////////////////////////////////////////////////////////////////
1:     public void onSend() throws JMSException {
commit:4afa5d6
/////////////////////////////////////////////////////////////////////////
1:  * @openwire:marshaller code="27"
author:Adrian T. Co
-------------------------------------------------------------------------------
commit:09ebb72
/////////////////////////////////////////////////////////////////////////
1: import org.apache.activemq.util.MarshallingSupport;
/////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////
0: 
/////////////////////////////////////////////////////////////////////////
1:             if (type == MarshallingSupport.BOOLEAN_TYPE) {
1:             if (type == MarshallingSupport.STRING_TYPE) {
1:             if (type == MarshallingSupport.NULL) {
/////////////////////////////////////////////////////////////////////////
1:             if (type == MarshallingSupport.BYTE_TYPE) {
1:             if (type == MarshallingSupport.STRING_TYPE) {
1:             if (type == MarshallingSupport.NULL) {
/////////////////////////////////////////////////////////////////////////
1:             if (type == MarshallingSupport.SHORT_TYPE) {
1:             if (type == MarshallingSupport.BYTE_TYPE) {
1:             if (type == MarshallingSupport.STRING_TYPE) {
1:             if (type == MarshallingSupport.NULL) {
/////////////////////////////////////////////////////////////////////////
1:             if (type == MarshallingSupport.CHAR_TYPE) {
1:             if (type == MarshallingSupport.NULL) {
/////////////////////////////////////////////////////////////////////////
1:             if (type == MarshallingSupport.INTEGER_TYPE) {
1:             if (type == MarshallingSupport.SHORT_TYPE) {
1:             if (type == MarshallingSupport.BYTE_TYPE) {
1:             if (type == MarshallingSupport.STRING_TYPE) {
1:             if (type == MarshallingSupport.NULL) {
/////////////////////////////////////////////////////////////////////////
1:             if (type == MarshallingSupport.LONG_TYPE) {
1:             if (type == MarshallingSupport.INTEGER_TYPE) {
1:             if (type == MarshallingSupport.SHORT_TYPE) {
1:             if (type == MarshallingSupport.BYTE_TYPE) {
1:             if (type == MarshallingSupport.STRING_TYPE) {
1:             if (type == MarshallingSupport.NULL) {
/////////////////////////////////////////////////////////////////////////
1:             if (type == MarshallingSupport.FLOAT_TYPE) {
1:             if (type == MarshallingSupport.STRING_TYPE) {
1:             if (type == MarshallingSupport.NULL) {
/////////////////////////////////////////////////////////////////////////
1:             if (type == MarshallingSupport.DOUBLE_TYPE) {
1:             if (type == MarshallingSupport.FLOAT_TYPE) {
1:             if (type == MarshallingSupport.STRING_TYPE) {
1:             if (type == MarshallingSupport.NULL) {
/////////////////////////////////////////////////////////////////////////
1:             if (type == MarshallingSupport.NULL) {
1:             if (type == MarshallingSupport.BIG_STRING_TYPE) {
1:                 return MarshallingSupport.readUTF8(dataIn);
0:             }
1:             if (type == MarshallingSupport.STRING_TYPE) {
1:             if (type == MarshallingSupport.LONG_TYPE) {
1:             if (type == MarshallingSupport.INTEGER_TYPE) {
1:             if (type == MarshallingSupport.SHORT_TYPE) {
1:             if (type == MarshallingSupport.BYTE_TYPE) {
1:             if (type == MarshallingSupport.FLOAT_TYPE) {
1:             if (type == MarshallingSupport.DOUBLE_TYPE) {
1:             if (type == MarshallingSupport.BOOLEAN_TYPE) {
1:             if (type == MarshallingSupport.CHAR_TYPE) {
/////////////////////////////////////////////////////////////////////////
0: 
0: 
1:                 if (type != MarshallingSupport.BYTE_ARRAY_TYPE) {
/////////////////////////////////////////////////////////////////////////
0: 
/////////////////////////////////////////////////////////////////////////
0:             }
0: 
/////////////////////////////////////////////////////////////////////////
1:             if (type == MarshallingSupport.NULL) {
1:             if (type == MarshallingSupport.BIG_STRING_TYPE) {
1:                 return MarshallingSupport.readUTF8(dataIn);
0:             }
1:             if (type == MarshallingSupport.STRING_TYPE) {
1:             if (type == MarshallingSupport.LONG_TYPE) {
1:             if (type == MarshallingSupport.INTEGER_TYPE) {
1:             if (type == MarshallingSupport.SHORT_TYPE) {
1:             if (type == MarshallingSupport.BYTE_TYPE) {
1:             if (type == MarshallingSupport.FLOAT_TYPE) {
1:             if (type == MarshallingSupport.DOUBLE_TYPE) {
1:             if (type == MarshallingSupport.BOOLEAN_TYPE) {
1:             if (type == MarshallingSupport.CHAR_TYPE) {
1:             if (type == MarshallingSupport.BYTE_ARRAY_TYPE) {
/////////////////////////////////////////////////////////////////////////
1:             MarshallingSupport.marshalBoolean(dataOut, value);
/////////////////////////////////////////////////////////////////////////
1:             MarshallingSupport.marshalByte(dataOut, value);
/////////////////////////////////////////////////////////////////////////
1:             MarshallingSupport.marshalShort(dataOut, value);
/////////////////////////////////////////////////////////////////////////
1:             MarshallingSupport.marshalChar(dataOut, value);
/////////////////////////////////////////////////////////////////////////
1:             MarshallingSupport.marshalInt(dataOut, value);
/////////////////////////////////////////////////////////////////////////
1:             MarshallingSupport.marshalLong(dataOut, value);
/////////////////////////////////////////////////////////////////////////
1:             MarshallingSupport.marshalFloat(dataOut, value);
/////////////////////////////////////////////////////////////////////////
1:             MarshallingSupport.marshalDouble(dataOut, value);
/////////////////////////////////////////////////////////////////////////
1:                 MarshallingSupport.marshalNull(dataOut);
1:                 MarshallingSupport.marshalString(dataOut, value);
/////////////////////////////////////////////////////////////////////////
1:             MarshallingSupport.marshalByteArray(dataOut, value, offset, length);
/////////////////////////////////////////////////////////////////////////
1:                 MarshallingSupport.marshalNull(dataOut);
============================================================================