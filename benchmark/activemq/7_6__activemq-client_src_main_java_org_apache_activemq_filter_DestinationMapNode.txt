1:d29ca2a: /**
1:57b4941:  * Licensed to the Apache Software Foundation (ASF) under one or more
1:57b4941:  * contributor license agreements.  See the NOTICE file distributed with
1:57b4941:  * this work for additional information regarding copyright ownership.
1:57b4941:  * The ASF licenses this file to You under the Apache License, Version 2.0
1:57b4941:  * (the "License"); you may not use this file except in compliance with
1:57b4941:  * the License.  You may obtain a copy of the License at
3:d29ca2a:  *
1:230a86c:  *      http://www.apache.org/licenses/LICENSE-2.0
1:d29ca2a:  *
1:d29ca2a:  * Unless required by applicable law or agreed to in writing, software
1:d29ca2a:  * distributed under the License is distributed on an "AS IS" BASIS,
1:d29ca2a:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:d29ca2a:  * See the License for the specific language governing permissions and
1:d29ca2a:  * limitations under the License.
1:d29ca2a:  */
1:d29ca2a: package org.apache.activemq.filter;
11:d29ca2a: 
1:d29ca2a: import java.util.ArrayList;
1:694120c: import java.util.Collection;
1:d29ca2a: import java.util.HashMap;
1:d29ca2a: import java.util.HashSet;
1:d29ca2a: import java.util.List;
1:d29ca2a: import java.util.Map;
1:d29ca2a: import java.util.Set;
1:d29ca2a: 
1:d29ca2a: /**
1:d29ca2a:  * An implementation class used to implement {@link DestinationMap}
1:b0c2a40:  *
1:d29ca2a:  *
1:d29ca2a:  */
1:eb827e2: public class DestinationMapNode implements DestinationNode {
1:d29ca2a:     protected static final String ANY_CHILD = DestinationMap.ANY_CHILD;
1:d29ca2a:     protected static final String ANY_DESCENDENT = DestinationMap.ANY_DESCENDENT;
1:d29ca2a: 
1:3dbc9c9:     // we synchronize at the DestinationMap level
1:d29ca2a:     private DestinationMapNode parent;
1:3dbc9c9:     private List<Object> values = new ArrayList<Object>();
1:3dbc9c9:     private Map<String, DestinationNode> childNodes = new HashMap<String, DestinationNode>();
1:eb827e2:     private String path = "Root";
1:f812e34:     // private DestinationMapNode anyChild;
1:eb827e2:     private int pathLength;
1:d29ca2a: 
1:d29ca2a:     public DestinationMapNode(DestinationMapNode parent) {
1:d29ca2a:         this.parent = parent;
1:eb827e2:         if (parent == null) {
1:eb827e2:             pathLength = 0;
1:f812e34:         } else {
1:eb827e2:             pathLength = parent.pathLength + 1;
8:d29ca2a:         }
1:d29ca2a:     }
1:cf5ee40: 
1:d29ca2a:     /**
1:664b534:      * Returns the child node for the given named path or null if it does not
1:664b534:      * exist
1:d29ca2a:      */
1:3dbc9c9:     public DestinationNode getChild(String path) {
1:3dbc9c9:         return childNodes.get(path);
1:d29ca2a:     }
1:cf5ee40: 
1:d29ca2a:     /**
1:694120c:      * Returns the child nodes
1:d29ca2a:      */
1:3dbc9c9:     public Collection<DestinationNode> getChildren() {
1:694120c:         return childNodes.values();
1:d29ca2a:     }
1:f812e34: 
1:d29ca2a:     public int getChildCount() {
1:d29ca2a:         return childNodes.size();
1:d29ca2a:     }
1:cf5ee40: 
1:d29ca2a:     /**
1:664b534:      * Returns the child node for the given named path, lazily creating one if
1:664b534:      * it does not yet exist
1:d29ca2a:      */
1:d29ca2a:     public DestinationMapNode getChildOrCreate(String path) {
1:f812e34:         DestinationMapNode answer = (DestinationMapNode)childNodes.get(path);
1:d29ca2a:         if (answer == null) {
1:d29ca2a:             answer = createChildNode();
1:d29ca2a:             answer.path = path;
1:d29ca2a:             childNodes.put(path, answer);
1:d29ca2a:         }
1:d29ca2a:         return answer;
1:d29ca2a:     }
1:d29ca2a: 
1:d29ca2a:     /**
1:cf5ee40:      * Returns a mutable List of the values available at this node in the tree
1:cf5ee40:      */
1:3dbc9c9:     @SuppressWarnings({ "rawtypes", "unchecked" })
1:d29ca2a:     public List getValues() {
1:d29ca2a:         return values;
1:d29ca2a:     }
1:cf5ee40: 
1:d29ca2a:     /**
1:e7e317d:      * Removes values available at this node in the tree
1:d29ca2a:      */
1:3dbc9c9:     @SuppressWarnings({ "rawtypes", "unchecked" })
1:cf5ee40:     public List removeValues() {
1:f812e34:         ArrayList v = new ArrayList(values);
1:f812e34:         // parent.getAnyChildNode().getValues().removeAll(v);
1:f812e34:         values.clear();
1:f812e34:         pruneIfEmpty();
1:cf5ee40:         return v;
1:cf5ee40:     }
1:f812e34: 
1:3dbc9c9:     @SuppressWarnings({ "rawtypes", "unchecked" })
1:cf5ee40:     public Set removeDesendentValues() {
1:cf5ee40:         Set answer = new HashSet();
1:cf5ee40:         removeDesendentValues(answer);
1:cf5ee40:         return answer;
1:cf5ee40:     }
1:f812e34: 
1:3dbc9c9:     @SuppressWarnings({ "rawtypes", "unchecked" })
1:cf5ee40:     protected void removeDesendentValues(Set answer) {
1:05c3112:         ArrayList<DestinationNode> candidates = new ArrayList<>();
1:e7e317d:         for (Map.Entry<String, DestinationNode> child : childNodes.entrySet()) {
1:05c3112:             candidates.add(child.getValue());
1:05c3112:         }
1:05c3112: 
1:05c3112:         for (DestinationNode node : candidates) {
1:e7e317d:             // remove all the values from the child
1:05c3112:             answer.addAll(node.removeValues());
1:05c3112:             answer.addAll(node.removeDesendentValues());
1:e7e317d:         }
1:cf5ee40:     }
1:cf5ee40: 
1:cf5ee40:     /**
1:d29ca2a:      * Returns a list of all the values from this node down the tree
1:d29ca2a:      */
1:3dbc9c9:     @SuppressWarnings({ "rawtypes", "unchecked" })
1:d29ca2a:     public Set getDesendentValues() {
1:d29ca2a:         Set answer = new HashSet();
1:d29ca2a:         appendDescendantValues(answer);
1:d29ca2a:         return answer;
1:cf5ee40:     }
1:cf5ee40: 
1:d29ca2a:     public void add(String[] paths, int idx, Object value) {
1:9735806:         if (idx >= paths.length) {
1:9735806:             values.add(value);
1:9735806:         } else {
1:9735806:             getChildOrCreate(paths[idx]).add(paths, idx + 1, value);
1:d29ca2a:         }
1:d29ca2a:     }
1:d29ca2a: 
1:9735806:     public void set(String[] paths, int idx, Object value) {
2:d29ca2a:         if (idx >= paths.length) {
1:9735806:             values.clear();
1:d29ca2a:             values.add(value);
1:f812e34:         } else {
1:e2a7d6a:             getChildOrCreate(paths[idx]).set(paths, idx + 1, value);
1:9735806:         }
1:9735806:     }
1:9735806: 
1:d29ca2a:     public void remove(String[] paths, int idx, Object value) {
1:d29ca2a:         if (idx >= paths.length) {
1:d29ca2a:             values.remove(value);
1:cf5ee40:             pruneIfEmpty();
1:f812e34:         } else {
1:d29ca2a:             getChildOrCreate(paths[idx]).remove(paths, ++idx, value);
1:d29ca2a:         }
1:d29ca2a:     }
1:d29ca2a: 
1:3dbc9c9:     public void removeAll(Set<DestinationNode> answer, String[] paths, int startIndex) {
1:eb827e2:         DestinationNode node = this;
1:933eb2f:         int size = paths.length;
1:933eb2f:         for (int i = startIndex; i < size && node != null; i++) {
1:d29ca2a: 
1:f812e34:             String path = paths[i];
1:cf5ee40:             if (path.equals(ANY_DESCENDENT)) {
1:cf5ee40:                 answer.addAll(node.removeDesendentValues());
1:cf5ee40:                 break;
1:cf5ee40:             }
1:cf5ee40: 
1:e7e317d:             // TODO is this correct, we are appending wildcard values here???
1:cf5ee40:             node.appendMatchingWildcards(answer, paths, i);
1:cf5ee40:             if (path.equals(ANY_CHILD)) {
1:f812e34:                 // node = node.getAnyChildNode();
1:eb827e2:                 node = new AnyChildDestinationNode(node);
1:f812e34:             } else {
1:cf5ee40:                 node = node.getChild(path);
1:d29ca2a:             }
1:d29ca2a:         }
1:f812e34: 
1:cf5ee40:         if (node != null) {
1:cf5ee40:             answer.addAll(node.removeValues());
1:cf5ee40:         }
1:cf5ee40: 
1:d29ca2a:     }
1:cf5ee40: 
1:3dbc9c9:     @SuppressWarnings({ "rawtypes", "unchecked" })
1:eb827e2:     public void appendDescendantValues(Set answer) {
1:e7e317d:         // add children values, then recursively add their children
1:3dbc9c9:         for(DestinationNode child : childNodes.values()) {
1:e7e317d:             answer.addAll(child.getValues());
1:eb827e2:             child.appendDescendantValues(answer);
1:d29ca2a:         }
1:d29ca2a:     }
1:f812e34: 
1:d29ca2a:     /**
1:d29ca2a:      * Factory method to create a child node
1:d29ca2a:      */
1:d29ca2a:     protected DestinationMapNode createChildNode() {
1:d29ca2a:         return new DestinationMapNode(this);
1:d29ca2a:     }
1:cf5ee40: 
1:eb827e2:     /**
1:eb827e2:      * Matches any entries in the map containing wildcards
1:eb827e2:      */
1:3dbc9c9:     @SuppressWarnings({ "rawtypes", "unchecked" })
1:d29ca2a:     public void appendMatchingWildcards(Set answer, String[] paths, int idx) {
1:eb827e2:         if (idx - 1 > pathLength) {
1:eb827e2:             return;
1:d29ca2a:         }
1:3dbc9c9:         DestinationNode wildCardNode = getChild(ANY_CHILD);
1:d29ca2a:         if (wildCardNode != null) {
1:f812e34:             wildCardNode.appendMatchingValues(answer, paths, idx + 1);
1:d29ca2a:         }
1:d29ca2a:         wildCardNode = getChild(ANY_DESCENDENT);
1:d29ca2a:         if (wildCardNode != null) {
1:e7e317d:             // for a wildcard Node match, add all values of the descendant node
1:e7e317d:             answer.addAll(wildCardNode.getValues());
1:e7e317d:             // and all descendants for paths like ">.>"
1:d29ca2a:             answer.addAll(wildCardNode.getDesendentValues());
1:d29ca2a:         }
1:d29ca2a:     }
1:d29ca2a: 
1:3b39d2c:     @SuppressWarnings({"rawtypes", "unchecked"})
1:3b39d2c:     public void appendMatchingValues(Set answer, String[] paths, int idx) {
1:3b39d2c:         appendMatchingValues(answer, paths, idx, true);
1:3b39d2c:     }
1:3b39d2c: 
1:3b39d2c:     public void appendMatchingValues(Set<DestinationNode> answer, String[] paths, int startIndex, boolean deep) {
1:eb827e2:         DestinationNode node = this;
1:664b534:         boolean couldMatchAny = true;
1:933eb2f:         int size = paths.length;
1:933eb2f:         for (int i = startIndex; i < size && node != null; i++) {
1:cf5ee40:             String path = paths[i];
1:3b39d2c:             if (deep && path.equals(ANY_DESCENDENT)) {
1:d29ca2a:                 answer.addAll(node.getDesendentValues());
1:664b534:                 couldMatchAny = false;
1:d29ca2a:                 break;
1:d29ca2a:             }
1:d29ca2a: 
1:d29ca2a:             node.appendMatchingWildcards(answer, paths, i);
1:d29ca2a: 
1:d29ca2a:             if (path.equals(ANY_CHILD)) {
1:eb827e2:                 node = new AnyChildDestinationNode(node);
1:f812e34:             } else {
1:d29ca2a:                 node = node.getChild(path);
1:d29ca2a:             }
1:d29ca2a:         }
1:d29ca2a:         if (node != null) {
1:d29ca2a:             answer.addAll(node.getValues());
1:664b534:             if (couldMatchAny) {
1:664b534:                 // lets allow FOO.BAR to match the FOO.BAR.> entry in the map
1:eb827e2:                 DestinationNode child = node.getChild(ANY_DESCENDENT);
1:664b534:                 if (child != null) {
1:664b534:                     answer.addAll(child.getValues());
1:d29ca2a:                 }
1:d29ca2a:             }
1:d29ca2a:         }
1:d29ca2a:     }
1:d29ca2a: 
1:d29ca2a:     public String getPath() {
1:d29ca2a:         return path;
1:d29ca2a:     }
1:d29ca2a: 
1:eb99e05:     public boolean isEmpty(){
1:eb99e05:         return childNodes.isEmpty();
1:eb99e05:     }
1:eb99e05: 
1:d29ca2a:     protected void pruneIfEmpty() {
1:d29ca2a:         if (parent != null && childNodes.isEmpty() && values.isEmpty()) {
1:d29ca2a:             parent.removeChild(this);
1:d29ca2a:         }
1:d29ca2a:     }
1:d29ca2a: 
1:d29ca2a:     protected void removeChild(DestinationMapNode node) {
1:d29ca2a:         childNodes.remove(node.getPath());
3:d29ca2a:         pruneIfEmpty();
1:d29ca2a:     }
1:d29ca2a: }
============================================================================
author:Hadrian Zbarcea
-------------------------------------------------------------------------------
commit:d54d046
author:Dejan Bosanac
-------------------------------------------------------------------------------
commit:3b39d2c
/////////////////////////////////////////////////////////////////////////
1:     @SuppressWarnings({"rawtypes", "unchecked"})
1:     public void appendMatchingValues(Set answer, String[] paths, int idx) {
1:         appendMatchingValues(answer, paths, idx, true);
1:     }
1: 
1:     public void appendMatchingValues(Set<DestinationNode> answer, String[] paths, int startIndex, boolean deep) {
1:             if (deep && path.equals(ANY_DESCENDENT)) {
commit:05c3112
/////////////////////////////////////////////////////////////////////////
1:         ArrayList<DestinationNode> candidates = new ArrayList<>();
1:             candidates.add(child.getValue());
1:         }
1: 
1:         for (DestinationNode node : candidates) {
1:             answer.addAll(node.removeValues());
1:             answer.addAll(node.removeDesendentValues());
author:Hiram Chirino
-------------------------------------------------------------------------------
commit:e7e317d
/////////////////////////////////////////////////////////////////////////
1:      * Removes values available at this node in the tree
/////////////////////////////////////////////////////////////////////////
1:         for (Map.Entry<String, DestinationNode> child : childNodes.entrySet()) {
1:             // remove all the values from the child
0:             answer.addAll(child.getValue().removeValues());
0:             answer.addAll(child.getValue().removeDesendentValues());
1:         }
/////////////////////////////////////////////////////////////////////////
1:             // TODO is this correct, we are appending wildcard values here???
/////////////////////////////////////////////////////////////////////////
1:         // add children values, then recursively add their children
1:             answer.addAll(child.getValues());
/////////////////////////////////////////////////////////////////////////
1:             // for a wildcard Node match, add all values of the descendant node
1:             answer.addAll(wildCardNode.getValues());
1:             // and all descendants for paths like ">.>"
commit:e2a7d6a
/////////////////////////////////////////////////////////////////////////
1:             getChildOrCreate(paths[idx]).set(paths, idx + 1, value);
commit:9735806
/////////////////////////////////////////////////////////////////////////
1:     public void set(String[] paths, int idx, Object value) {
1:         if (idx >= paths.length) {
1:             values.clear();
1:             values.add(value);
1:         } else {
1:             getChildOrCreate(paths[idx]).add(paths, idx + 1, value);
1:         }
1:     }
1: 
author:Robert Davies
-------------------------------------------------------------------------------
commit:eb99e05
/////////////////////////////////////////////////////////////////////////
1:     public boolean isEmpty(){
1:         return childNodes.isEmpty();
1:     }
1: 
author:Hiram R. Chirino
-------------------------------------------------------------------------------
commit:9a8f6e4
commit:b0c2a40
/////////////////////////////////////////////////////////////////////////
1:  * 
commit:933eb2f
/////////////////////////////////////////////////////////////////////////
1:         int size = paths.length;
1:         for (int i = startIndex; i < size && node != null; i++) {
/////////////////////////////////////////////////////////////////////////
1:         int size = paths.length;
1:         for (int i = startIndex; i < size && node != null; i++) {
commit:74a7a8b
/////////////////////////////////////////////////////////////////////////
0: import java.util.Iterator;
commit:f812e34
/////////////////////////////////////////////////////////////////////////
1:     // private DestinationMapNode anyChild;
1:         } else {
/////////////////////////////////////////////////////////////////////////
0:         return (DestinationMapNode)childNodes.get(path);
/////////////////////////////////////////////////////////////////////////
1: 
/////////////////////////////////////////////////////////////////////////
1:         DestinationMapNode answer = (DestinationMapNode)childNodes.get(path);
/////////////////////////////////////////////////////////////////////////
0:     // public DestinationMapNode getAnyChildNode() {
0:     // if (anyChild == null) {
0:     // anyChild = createChildNode();
0:     // }
0:     // return anyChild;
0:     // }
/////////////////////////////////////////////////////////////////////////
1:         ArrayList v = new ArrayList(values);
1:         // parent.getAnyChildNode().getValues().removeAll(v);
1:         values.clear();
1:         pruneIfEmpty();
1: 
1: 
0:         // if (anyChild != null) {
0:         // anyChild.removeDesendentValues(answer);
0:         // }
/////////////////////////////////////////////////////////////////////////
1:         } else {
0:             // if (idx == paths.length - 1) {
0:             // getAnyChildNode().getValues().add(value);
0:             // }
0:             // else {
0:             // getAnyChildNode().add(paths, idx + 1, value);
0:             // }
/////////////////////////////////////////////////////////////////////////
1:         } else {
0:             // if (idx == paths.length - 1) {
0:             // getAnyChildNode().getValues().remove(value);
0:             // }
0:             // else {
0:             // getAnyChildNode().remove(paths, idx + 1, value);
0:             // }
/////////////////////////////////////////////////////////////////////////
1:             String path = paths[i];
/////////////////////////////////////////////////////////////////////////
1:                 // node = node.getAnyChildNode();
1:             } else {
1: 
/////////////////////////////////////////////////////////////////////////
0:             DestinationNode child = (DestinationNode)iter.next();
1: 
0:         // if (anyChild != null) {
0:         // anyChild.appendDescendantValues(answer);
0:         // }
/////////////////////////////////////////////////////////////////////////
1:             wildCardNode.appendMatchingValues(answer, paths, idx + 1);
/////////////////////////////////////////////////////////////////////////
1:             } else {
commit:230a86c
/////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////
1:  *      http://www.apache.org/licenses/LICENSE-2.0
commit:57b4941
/////////////////////////////////////////////////////////////////////////
1:  * Licensed to the Apache Software Foundation (ASF) under one or more
1:  * contributor license agreements.  See the NOTICE file distributed with
1:  * this work for additional information regarding copyright ownership.
1:  * The ASF licenses this file to You under the Apache License, Version 2.0
1:  * (the "License"); you may not use this file except in compliance with
1:  * the License.  You may obtain a copy of the License at
commit:cf5ee40
/////////////////////////////////////////////////////////////////////////
1:      * Returns a mutable List of the values available at this node in the tree
1:      */
1:     public List removeValues() {
0:     	ArrayList v = new ArrayList(values);
0:     	parent.getAnyChildNode().getValues().removeAll(v);
0:     	values.clear();
1:     	pruneIfEmpty();
1:         return v;
1:     }
1:     
1:     
1:     public Set removeDesendentValues() {
1:         Set answer = new HashSet();
1:         removeDesendentValues(answer);
1:         return answer;
1:     }
1:     
1:     protected void removeDesendentValues(Set answer) {
0:         if (anyChild != null) {
0:             anyChild.removeDesendentValues(answer);
1:         }
0:         answer.addAll(removeValues());
1:     }
1: 
1:     /**
/////////////////////////////////////////////////////////////////////////
0:     public void removeAll(Set answer, String[] paths, int startIndex) {
0: //        if (idx >= paths.length) {
0: //            values.clear();
0: //            pruneIfEmpty();
0: //        }
0: //        else {
0: //            if (idx == paths.length - 1) {
0: //                getAnyChildNode().getValues().clear();
0: //            }
0: //            else {
0: //                getAnyChildNode().removeAll(paths, idx + 1);
0: //            }
0: //            getChildOrCreate(paths[idx]).removeAll(paths, ++idx);
0: //        }
0: //        
1:         
0:         DestinationMapNode node = this;
0:         for (int i = startIndex, size = paths.length; i < size && node != null; i++) {
1: 
1:         	String path = paths[i];
1:             if (path.equals(ANY_DESCENDENT)) {
1:                 answer.addAll(node.removeDesendentValues());
1:                 break;
1:             }
1: 
1:             node.appendMatchingWildcards(answer, paths, i);
1:             if (path.equals(ANY_CHILD)) {
0:                 node = node.getAnyChildNode();
1:                 node = node.getChild(path);
1:         
1:         if (node != null) {
1:             answer.addAll(node.removeValues());
1:         }
1: 
1:         
commit:48b4869
/////////////////////////////////////////////////////////////////////////
0:  * Copyright 2005-2006 The Apache Software Foundation
commit:d29ca2a
/////////////////////////////////////////////////////////////////////////
1: /**
1:  *
0:  * Copyright 2004 The Apache Software Foundation
1:  *
0:  * Licensed under the Apache License, Version 2.0 (the "License");
0:  * you may not use this file except in compliance with the License.
0:  * You may obtain a copy of the License at
1:  *
0:  * http://www.apache.org/licenses/LICENSE-2.0
1:  *
1:  * Unless required by applicable law or agreed to in writing, software
1:  * distributed under the License is distributed on an "AS IS" BASIS,
1:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:  * See the License for the specific language governing permissions and
1:  * limitations under the License.
1:  */
1: package org.apache.activemq.filter;
1: 
1: import java.util.ArrayList;
1: import java.util.HashMap;
1: import java.util.HashSet;
1: import java.util.List;
1: import java.util.Map;
1: import java.util.Set;
1: 
1: /**
1:  * An implementation class used to implement {@link DestinationMap}
1:  *
0:  * @version $Revision: 1.2 $
1:  */
0: public class DestinationMapNode {
0:     // we synchornize at the DestinationMap level
1:     private DestinationMapNode parent;
0:     private List values = new ArrayList();
0:     private Map childNodes = new HashMap();
0:     private String path = "*";
0:     private DestinationMapNode anyChild;
1:     protected static final String ANY_CHILD = DestinationMap.ANY_CHILD;
1:     protected static final String ANY_DESCENDENT = DestinationMap.ANY_DESCENDENT;
1: 
1: 
1:     public DestinationMapNode(DestinationMapNode parent) {
1:         this.parent = parent;
1:     }
1:     
1: 
1:     /**
0:      * Returns the child node for the given named path or null if it does not exist
1:      */
0:     public DestinationMapNode getChild(String path) {
0:         return (DestinationMapNode) childNodes.get(path);
1:     }
1: 
1:     public int getChildCount() {
1:         return childNodes.size();
1:     }
1:     
1:     /**
0:      * Returns the child node for the given named path, lazily creating one if it does
0:      * not yet exist
1:      */
1:     public DestinationMapNode getChildOrCreate(String path) {
0:         DestinationMapNode answer = (DestinationMapNode) childNodes.get(path);
1:         if (answer == null) {
1:             answer = createChildNode();
1:             answer.path = path;
1:             childNodes.put(path, answer);
1:         }
1:         return answer;
1:     }
1: 
1:     /**
0:      * Returns the node which represents all children (i.e. the * node)
1:      */
0:     public DestinationMapNode getAnyChildNode() {
0:         if (anyChild == null) {
0:             anyChild = createChildNode();
1:         }
0:         return anyChild;
1:     }
1: 
1:     /**
0:      * Returns a mutable List of the values available at this node in the tree
1:      */
1:     public List getValues() {
1:         return values;
1:     }
1: 
1:     /**
1:      * Returns a list of all the values from this node down the tree
1:      */
1:     public Set getDesendentValues() {
1:         Set answer = new HashSet();
1:         appendDescendantValues(answer);
1:         return answer;
1:     }
1: 
1:     public void add(String[] paths, int idx, Object value) {
1:         if (idx >= paths.length) {
1:             values.add(value);
1:         }
0:         else {
0:             if (idx == paths.length - 1) {
0:                 getAnyChildNode().getValues().add(value);
1:             }
0:             else {
0:                 getAnyChildNode().add(paths, idx + 1, value);
1:             }
0:             getChildOrCreate(paths[idx]).add(paths, idx + 1, value);
1:         }
1:     }
1: 
1:     public void remove(String[] paths, int idx, Object value) {
1:         if (idx >= paths.length) {
1:             values.remove(value);
1:             pruneIfEmpty();
1:         }
0:         else {
0:             if (idx == paths.length - 1) {
0:                 getAnyChildNode().getValues().remove(value);
1:             }
0:             else {
0:                 getAnyChildNode().remove(paths, idx + 1, value);
1:             }
1:             getChildOrCreate(paths[idx]).remove(paths, ++idx, value);
1:         }
1:     }
1: 
0:     public void removeAll(String[] paths, int idx) {
1:         if (idx >= paths.length) {
0:             values.clear();
1:             pruneIfEmpty();
1:         }
0:         else {
0:             if (idx == paths.length - 1) {
0:                 getAnyChildNode().getValues().clear();
1:             }
0:             else {
0:                 getAnyChildNode().removeAll(paths, idx + 1);
1:             }
0:             getChildOrCreate(paths[idx]).removeAll(paths, ++idx);
1:         }
1:     }
1: 
0:     protected void appendDescendantValues(Set answer) {
0:         answer.addAll(values);
0:         if (anyChild != null) {
0:             anyChild.appendDescendantValues(answer);
1:         }
1:     }
1: 
1:     /**
1:      * Factory method to create a child node
1:      */
1:     protected DestinationMapNode createChildNode() {
1:         return new DestinationMapNode(this);
1:     }
1: 
1:     public void appendMatchingWildcards(Set answer, String[] paths, int idx) {
0:         DestinationMapNode wildCardNode = getChild(ANY_CHILD);
1:         if (wildCardNode != null) {
0:             wildCardNode.appendMatchingValues(answer, paths, idx + 1);
1:         }
1:         wildCardNode = getChild(ANY_DESCENDENT);
1:         if (wildCardNode != null) {
1:             answer.addAll(wildCardNode.getDesendentValues());
1:         }
1:     }
1: 
0:     public void appendMatchingValues(Set answer, String[] paths, int startIndex) {
0:         DestinationMapNode node = this;
0:         for (int i = startIndex, size = paths.length; i < size && node != null; i++) {
0:             String path = paths[i];
0:             if (path.equals(ANY_DESCENDENT)) {
1:                 answer.addAll(node.getDesendentValues());
1:                 break;
1:             }
1: 
1:             node.appendMatchingWildcards(answer, paths, i);
1:             if (path.equals(ANY_CHILD)) {
0:                 node = node.getAnyChildNode();
1:             }
0:             else {
1:                 node = node.getChild(path);
1:             }
1:         }
1:         if (node != null) {
1:             answer.addAll(node.getValues());
1:         }
1:     }
1: 
1: 
1:     public String getPath() {
1:         return path;
1:     }
1: 
1:     protected void pruneIfEmpty() {
1:         if (parent != null && childNodes.isEmpty() && values.isEmpty()) {
1:             parent.removeChild(this);
1:         }
1:     }
1: 
1: 
1:     protected void removeChild(DestinationMapNode node) {
1:         childNodes.remove(node.getPath());
1:         pruneIfEmpty();
1:     }
1: }
author:Timothy A. Bish
-------------------------------------------------------------------------------
commit:3dbc9c9
/////////////////////////////////////////////////////////////////////////
0:  *
0:  *
1:     // we synchronize at the DestinationMap level
1:     private List<Object> values = new ArrayList<Object>();
1:     private Map<String, DestinationNode> childNodes = new HashMap<String, DestinationNode>();
/////////////////////////////////////////////////////////////////////////
1:     public DestinationNode getChild(String path) {
1:         return childNodes.get(path);
1:     public Collection<DestinationNode> getChildren() {
/////////////////////////////////////////////////////////////////////////
1:     @SuppressWarnings({ "rawtypes", "unchecked" })
/////////////////////////////////////////////////////////////////////////
1:     @SuppressWarnings({ "rawtypes", "unchecked" })
/////////////////////////////////////////////////////////////////////////
1:     @SuppressWarnings({ "rawtypes", "unchecked" })
1:     @SuppressWarnings({ "rawtypes", "unchecked" })
1:     @SuppressWarnings({ "rawtypes", "unchecked" })
/////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////
1:     public void removeAll(Set<DestinationNode> answer, String[] paths, int startIndex) {
/////////////////////////////////////////////////////////////////////////
1:     @SuppressWarnings({ "rawtypes", "unchecked" })
1:         for(DestinationNode child : childNodes.values()) {
/////////////////////////////////////////////////////////////////////////
1:     @SuppressWarnings({ "rawtypes", "unchecked" })
1:         DestinationNode wildCardNode = getChild(ANY_CHILD);
/////////////////////////////////////////////////////////////////////////
0:     public void appendMatchingValues(Set<DestinationNode> answer, String[] paths, int startIndex) {
author:James Strachan
-------------------------------------------------------------------------------
commit:eb827e2
/////////////////////////////////////////////////////////////////////////
0: import java.util.Iterator;
1: public class DestinationMapNode implements DestinationNode {
0:     protected static final String ANY_CHILD = DestinationMap.ANY_CHILD;
0:     protected static final String ANY_DESCENDENT = DestinationMap.ANY_DESCENDENT;
0: 
1:     private String path = "Root";
0: //    private DestinationMapNode anyChild;
1:     private int pathLength;
1:         if (parent == null) {
1:             pathLength = 0;
0:         }
0:         else {
1:             pathLength = parent.pathLength + 1;
0:         }
/////////////////////////////////////////////////////////////////////////
0: //    public DestinationMapNode getAnyChildNode() {
0: //        if (anyChild == null) {
0: //            anyChild = createChildNode();
0: //        }
0: //        return anyChild;
0: //    }
/////////////////////////////////////////////////////////////////////////
0: //    	parent.getAnyChildNode().getValues().removeAll(v);
/////////////////////////////////////////////////////////////////////////
0: //        if (anyChild != null) {
0: //            anyChild.removeDesendentValues(answer);
0: //        }
/////////////////////////////////////////////////////////////////////////
0: //            if (idx == paths.length - 1) {
0: //                getAnyChildNode().getValues().add(value);
0: //            }
0: //            else {
0: //                getAnyChildNode().add(paths, idx + 1, value);
0: //            }
/////////////////////////////////////////////////////////////////////////
0: //            if (idx == paths.length - 1) {
0: //                getAnyChildNode().getValues().remove(value);
0: //            }
0: //            else {
0: //                getAnyChildNode().remove(paths, idx + 1, value);
0: //            }
1:         DestinationNode node = this;
/////////////////////////////////////////////////////////////////////////
0:                 //node = node.getAnyChildNode();
1:                 node = new AnyChildDestinationNode(node);
/////////////////////////////////////////////////////////////////////////
1:     public void appendDescendantValues(Set answer) {
0: 
0:         // lets add all the children too
0:         Iterator iter = childNodes.values().iterator();
0:         while (iter.hasNext()) {
0:             DestinationNode child = (DestinationNode) iter.next();
1:             child.appendDescendantValues(answer);
0:         
0:         // TODO???
0: //        if (anyChild != null) {
0: //            anyChild.appendDescendantValues(answer);
0: //        }
/////////////////////////////////////////////////////////////////////////
1:     /**
1:      * Matches any entries in the map containing wildcards
1:      */
1:         if (idx - 1 > pathLength) {
1:             return;
0:         }
0:             wildCardNode.appendMatchingValues(answer, paths, idx+1);
/////////////////////////////////////////////////////////////////////////
1:         DestinationNode node = this;
/////////////////////////////////////////////////////////////////////////
0: 
0: 
1:                 node = new AnyChildDestinationNode(node);
/////////////////////////////////////////////////////////////////////////
1:                 DestinationNode child = node.getChild(ANY_DESCENDENT);
commit:694120c
/////////////////////////////////////////////////////////////////////////
1: import java.util.Collection;
/////////////////////////////////////////////////////////////////////////
0:     /**
1:      * Returns the child nodes
0:      */
0:     public Collection getChildren() {
1:         return childNodes.values();
0:     }
0:     
commit:664b534
/////////////////////////////////////////////////////////////////////////
0:  * 
/////////////////////////////////////////////////////////////////////////
1:      * Returns the child node for the given named path or null if it does not
1:      * exist
/////////////////////////////////////////////////////////////////////////
0: 
1:      * Returns the child node for the given named path, lazily creating one if
1:      * it does not yet exist
/////////////////////////////////////////////////////////////////////////
1:         boolean couldMatchAny = true;
1:                 couldMatchAny = false;
/////////////////////////////////////////////////////////////////////////
1:             if (couldMatchAny) {
1:                 // lets allow FOO.BAR to match the FOO.BAR.> entry in the map
0:                 DestinationMapNode child = node.getChild(ANY_DESCENDENT);
1:                 if (child != null) {
1:                     answer.addAll(child.getValues());
0:                 }
0:             }
/////////////////////////////////////////////////////////////////////////
============================================================================