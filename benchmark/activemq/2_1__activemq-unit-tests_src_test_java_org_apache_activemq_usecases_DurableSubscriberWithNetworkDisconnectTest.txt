1:f232cec: /**
1:f232cec:  * Licensed to the Apache Software Foundation (ASF) under one or more
1:f232cec:  * contributor license agreements.  See the NOTICE file distributed with
1:f232cec:  * this work for additional information regarding copyright ownership.
1:f232cec:  * The ASF licenses this file to You under the Apache License, Version 2.0
1:f232cec:  * (the "License"); you may not use this file except in compliance with
1:f232cec:  * the License.  You may obtain a copy of the License at
1:f232cec:  *
1:f232cec:  *      http://www.apache.org/licenses/LICENSE-2.0
1:f232cec:  *
1:f232cec:  * Unless required by applicable law or agreed to in writing, software
1:f232cec:  * distributed under the License is distributed on an "AS IS" BASIS,
1:f232cec:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:f232cec:  * See the License for the specific language governing permissions and
1:f232cec:  * limitations under the License.
1:f232cec:  */
1:f232cec: package org.apache.activemq.usecases;
1:f232cec: 
1:f232cec: import java.net.URI;
1:f232cec: import java.util.List;
1:f232cec: import javax.jms.Connection;
1:f232cec: import javax.jms.DeliveryMode;
1:f232cec: import javax.jms.JMSException;
1:f232cec: import javax.jms.Message;
1:f232cec: import javax.jms.MessageConsumer;
1:f232cec: import javax.jms.MessageListener;
1:f232cec: import javax.jms.MessageProducer;
1:f232cec: import javax.jms.Session;
1:f232cec: import javax.jms.TextMessage;
1:f232cec: import junit.framework.Test;
1:f232cec: import org.apache.activemq.ActiveMQConnectionFactory;
1:f232cec: import org.apache.activemq.JmsMultipleBrokersTestSupport;
1:f232cec: import org.apache.activemq.broker.BrokerService;
1:f232cec: import org.apache.activemq.broker.TransportConnector;
1:f232cec: import org.apache.activemq.command.ActiveMQTopic;
1:f232cec: import org.apache.activemq.network.DiscoveryNetworkConnector;
1:f232cec: import org.apache.activemq.network.NetworkConnector;
1:f232cec: import org.apache.activemq.util.SocketProxy;
1:f232cec: import org.apache.activemq.util.Wait;
1:f232cec: import org.apache.commons.logging.Log;
1:f232cec: import org.apache.commons.logging.LogFactory;
1:f232cec: 
1:f232cec: 
1:f232cec: public class DurableSubscriberWithNetworkDisconnectTest extends JmsMultipleBrokersTestSupport {
1:f232cec:     private static final Log LOG = LogFactory.getLog(DurableSubscriberWithNetworkDisconnectTest.class);
1:f232cec:     private static final int NETWORK_DOWN_TIME = 10000;
1:f232cec:     private static final String HUB = "HubBroker";
1:f232cec:     private static final String SPOKE = "SpokeBroker";
1:f232cec:     private SocketProxy socketProxy;
1:f232cec:     private long networkDownTimeStart;
1:f232cec:     private long inactiveDuration = 1000;
1:f232cec:     private long receivedMsgs = 0;
1:f232cec:     private boolean useSocketProxy = true;
1:f232cec:     protected static final int MESSAGE_COUNT = 200;
1:f232cec:     public boolean useDuplexNetworkBridge = true;
1:f232cec:     public boolean simulateStalledNetwork;
1:f232cec:     public boolean dynamicOnly = true;
1:f232cec:     public long networkTTL = 3;
1:f232cec:     public boolean exponentialBackOff;
1:f232cec:     public boolean failover = false;
1:f232cec:     public boolean inactivity = true;
1:f232cec: 
1:f232cec:     public void initCombosForTestSendOnAReceiveOnBWithTransportDisconnect() {
1:f232cec:         addCombinationValues("failover", new Object[]{Boolean.FALSE, Boolean.TRUE});
1:f232cec:     }
1:f232cec: 
1:f232cec:     public void testSendOnAReceiveOnBWithTransportDisconnect() throws Exception {
1:f232cec:         bridgeBrokers(SPOKE, HUB);
1:f232cec: 
1:f232cec:         startAllBrokers();
1:f232cec: 
1:f232cec:         // Setup connection
1:f232cec:         URI hubURI = brokers.get(HUB).broker.getVmConnectorURI();
1:f232cec:         URI spokeURI = brokers.get(SPOKE).broker.getVmConnectorURI();
1:f232cec:         ActiveMQConnectionFactory facHub = new ActiveMQConnectionFactory(hubURI);
1:f232cec:         ActiveMQConnectionFactory facSpoke = new ActiveMQConnectionFactory(spokeURI);
1:f232cec:         Connection conHub = facHub.createConnection();
1:f232cec:         Connection conSpoke = facSpoke.createConnection();
1:f232cec:         conHub.setClientID("clientHUB");
1:f232cec:         conSpoke.setClientID("clientSPOKE");
1:f232cec:         conHub.start();
1:f232cec:         conSpoke.start();
1:f232cec:         Session sesHub = conHub.createSession(false, Session.AUTO_ACKNOWLEDGE);
1:f232cec:         Session sesSpoke = conSpoke.createSession(false, Session.AUTO_ACKNOWLEDGE);
1:f232cec: 
1:f232cec:         ActiveMQTopic topic = new ActiveMQTopic("TEST.FOO");
1:f232cec:         String consumerName = "consumerName";
1:f232cec: 
1:f232cec:         // Setup consumers
1:f232cec:         MessageConsumer remoteConsumer = sesSpoke.createDurableSubscriber(topic, consumerName);
1:f232cec:         remoteConsumer.setMessageListener(new MessageListener() {
1:f232cec:             public void onMessage(Message msg) {
1:f232cec:                 try {
1:f232cec:                     TextMessage textMsg = (TextMessage) msg;
1:f232cec:                     receivedMsgs++;
1:f232cec:                     LOG.info("Received messages (" + receivedMsgs + "): " + textMsg.getText());
1:f232cec:                 } catch (JMSException e) {
1:f232cec:                     e.printStackTrace();
1:f232cec:                 }
1:f232cec:             }
1:f232cec:         });
1:f232cec: 
1:f232cec:         // allow subscription information to flow back to Spoke
1:f232cec:         sleep(1000);
1:f232cec: 
1:f232cec:         // Setup producer
1:f232cec:         MessageProducer localProducer = sesHub.createProducer(topic);
1:f232cec:         localProducer.setDeliveryMode(DeliveryMode.PERSISTENT);
1:f232cec: 
1:f232cec:         // Send messages
1:f232cec:         for (int i = 0; i < MESSAGE_COUNT; i++) {
1:f232cec:             sleep(50);
1:f232cec:             if (i == 50 || i == 150) {
1:f232cec:                 if (simulateStalledNetwork) {
1:f232cec:                     socketProxy.pause();
1:f232cec:                 } else {
1:f232cec:                     socketProxy.close();
1:f232cec:                 }
1:f232cec:                 networkDownTimeStart = System.currentTimeMillis();
1:f232cec:             } else if (networkDownTimeStart > 0) {
1:f232cec:                 // restart after NETWORK_DOWN_TIME seconds
1:f232cec:                 sleep(NETWORK_DOWN_TIME);
1:f232cec:                 networkDownTimeStart = 0;
1:f232cec:                 if (simulateStalledNetwork) {
1:f232cec:                     socketProxy.goOn();
1:f232cec:                 } else {
1:f232cec:                     socketProxy.reopen();
1:f232cec:                 }
1:f232cec:             } else {
1:f232cec:                 // slow message production to allow bridge to recover and limit message duplication
1:f232cec:                 sleep(500);
1:f232cec:             }
1:f232cec:             Message test = sesHub.createTextMessage("test-" + i);
1:f232cec:             localProducer.send(test);
1:f232cec:         }
1:f232cec: 
1:f232cec:         LOG.info("waiting for messages to flow");
1:f232cec:         Wait.waitFor(new Wait.Condition() {
1:f232cec:             @Override
1:f232cec:             public boolean isSatisified() throws Exception {
1:f232cec:                 return receivedMsgs >= MESSAGE_COUNT;
1:f232cec:             }
1:f232cec:         });
1:f232cec: 
1:f232cec:         assertTrue("At least message " + MESSAGE_COUNT +
1:f232cec:                 " must be received, count=" + receivedMsgs,
1:f232cec:                 MESSAGE_COUNT <= receivedMsgs);
1:f232cec:         brokers.get(HUB).broker.deleteAllMessages();
1:f232cec:         brokers.get(SPOKE).broker.deleteAllMessages();
1:f232cec:         conHub.close();
1:f232cec:         conSpoke.close();
1:f232cec:     }
1:f232cec: 
1:f232cec:     @Override
1:f232cec:     protected void startAllBrokers() throws Exception {
1:f232cec:         // Ensure HUB is started first so bridge will be active from the get go
1:f232cec:         BrokerItem brokerItem = brokers.get(HUB);
1:f232cec:         brokerItem.broker.start();
1:f232cec:         brokerItem = brokers.get(SPOKE);
1:f232cec:         brokerItem.broker.start();
1:f232cec:         sleep(600);
1:f232cec:     }
1:f232cec: 
1:f232cec:     public void setUp() throws Exception {
1:f232cec:         networkDownTimeStart = 0;
1:f232cec:         inactiveDuration = 1000;
1:f232cec:         useSocketProxy = true;
1:f232cec:         receivedMsgs = 0;
1:f232cec:         super.setAutoFail(true);
1:f232cec:         super.setUp();
1:f232cec:         final String options = "?persistent=true&useJmx=false&deleteAllMessagesOnStartup=true";
1:f232cec:         createBroker(new URI("broker:(tcp://localhost:61617)/" + HUB + options));
1:f232cec:         createBroker(new URI("broker:(tcp://localhost:61616)/" + SPOKE + options));
1:f232cec:     }
1:f232cec: 
1:f232cec:     public void tearDown() throws Exception {
1:f232cec:         super.tearDown();
1:f232cec:         if (socketProxy != null) {
1:f232cec:             socketProxy.close();
1:f232cec:         }
1:f232cec:     }
1:f232cec: 
1:f232cec:     public static Test suite() {
1:f232cec:         return suite(DurableSubscriberWithNetworkDisconnectTest.class);
1:f232cec:     }
1:f232cec: 
1:f232cec:     private void sleep(int milliSecondTime) {
1:f232cec:         try {
1:f232cec:             Thread.sleep(milliSecondTime);
1:f232cec:         } catch (InterruptedException igonred) {
1:f232cec:         }
1:f232cec:     }
1:f232cec: 
1:f232cec:     @Override
1:f232cec:     protected NetworkConnector bridgeBrokers(BrokerService localBroker, BrokerService remoteBroker, boolean l_dynamicOnly, int networkTTL, boolean l_conduit, boolean l_failover) throws Exception {
1:f232cec:         List<TransportConnector> transportConnectors = remoteBroker.getTransportConnectors();
1:f232cec:         URI remoteURI;
1:f232cec:         if (!transportConnectors.isEmpty()) {
1:f232cec:             remoteURI = ((TransportConnector) transportConnectors.get(0)).getConnectUri();
1:f232cec:             if (useSocketProxy) {
1:f232cec:                 socketProxy = new SocketProxy(remoteURI);
1:f232cec:                 remoteURI = socketProxy.getUrl();
1:f232cec:             }
1:f232cec:             String options = "";
1:f232cec:             if (failover) {
1:f232cec:                 options = "static:(failover:(" + remoteURI;
1:f232cec:             } else {
1:f232cec:                 options = "static:(" + remoteURI;
1:f232cec:             }
1:f232cec:             if (inactivity) {
1:f232cec:                 options += "?wireFormat.maxInactivityDuration=" + inactiveDuration + "&wireFormat.maxInactivityDurationInitalDelay=" + inactiveDuration + ")";
1:f232cec:             } else {
1:f232cec:                 options += ")";
1:f232cec:             }
1:f232cec: 
1:f232cec:              if (failover) {
1:53b29a2:                 options += "?maxReconnectAttempts=0)";
1:f232cec:              }
1:f232cec: 
1:f232cec:             options += "?useExponentialBackOff=" + exponentialBackOff;
1:f232cec:             DiscoveryNetworkConnector connector = new DiscoveryNetworkConnector(new URI(options));
1:f232cec:             connector.setDynamicOnly(dynamicOnly);
1:f232cec:             connector.setNetworkTTL(networkTTL);
1:f232cec:             localBroker.addNetworkConnector(connector);
1:f232cec:             maxSetupTime = 2000;
1:f232cec:             if (useDuplexNetworkBridge) {
1:f232cec:                 connector.setDuplex(true);
1:f232cec:             }
1:f232cec:             return connector;
1:f232cec:         } else {
1:f232cec:             throw new Exception("Remote broker has no registered connectors.");
1:f232cec:         }
1:f232cec:     }
1:f232cec: }
============================================================================
author:Timothy A. Bish
-------------------------------------------------------------------------------
commit:ef24cc9
author:Gary Tully
-------------------------------------------------------------------------------
commit:53b29a2
/////////////////////////////////////////////////////////////////////////
1:                 options += "?maxReconnectAttempts=0)";
commit:f232cec
/////////////////////////////////////////////////////////////////////////
1: /**
1:  * Licensed to the Apache Software Foundation (ASF) under one or more
1:  * contributor license agreements.  See the NOTICE file distributed with
1:  * this work for additional information regarding copyright ownership.
1:  * The ASF licenses this file to You under the Apache License, Version 2.0
1:  * (the "License"); you may not use this file except in compliance with
1:  * the License.  You may obtain a copy of the License at
1:  *
1:  *      http://www.apache.org/licenses/LICENSE-2.0
1:  *
1:  * Unless required by applicable law or agreed to in writing, software
1:  * distributed under the License is distributed on an "AS IS" BASIS,
1:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:  * See the License for the specific language governing permissions and
1:  * limitations under the License.
1:  */
1: package org.apache.activemq.usecases;
1: 
1: import java.net.URI;
1: import java.util.List;
1: import javax.jms.Connection;
1: import javax.jms.DeliveryMode;
1: import javax.jms.JMSException;
1: import javax.jms.Message;
1: import javax.jms.MessageConsumer;
1: import javax.jms.MessageListener;
1: import javax.jms.MessageProducer;
1: import javax.jms.Session;
1: import javax.jms.TextMessage;
1: import junit.framework.Test;
1: import org.apache.activemq.ActiveMQConnectionFactory;
1: import org.apache.activemq.JmsMultipleBrokersTestSupport;
1: import org.apache.activemq.broker.BrokerService;
1: import org.apache.activemq.broker.TransportConnector;
1: import org.apache.activemq.command.ActiveMQTopic;
1: import org.apache.activemq.network.DiscoveryNetworkConnector;
1: import org.apache.activemq.network.NetworkConnector;
1: import org.apache.activemq.util.SocketProxy;
1: import org.apache.activemq.util.Wait;
1: import org.apache.commons.logging.Log;
1: import org.apache.commons.logging.LogFactory;
1: 
1: 
1: public class DurableSubscriberWithNetworkDisconnectTest extends JmsMultipleBrokersTestSupport {
1:     private static final Log LOG = LogFactory.getLog(DurableSubscriberWithNetworkDisconnectTest.class);
1:     private static final int NETWORK_DOWN_TIME = 10000;
1:     private static final String HUB = "HubBroker";
1:     private static final String SPOKE = "SpokeBroker";
1:     private SocketProxy socketProxy;
1:     private long networkDownTimeStart;
1:     private long inactiveDuration = 1000;
1:     private long receivedMsgs = 0;
1:     private boolean useSocketProxy = true;
1:     protected static final int MESSAGE_COUNT = 200;
1:     public boolean useDuplexNetworkBridge = true;
1:     public boolean simulateStalledNetwork;
1:     public boolean dynamicOnly = true;
1:     public long networkTTL = 3;
1:     public boolean exponentialBackOff;
1:     public boolean failover = false;
1:     public boolean inactivity = true;
1: 
1:     public void initCombosForTestSendOnAReceiveOnBWithTransportDisconnect() {
1:         addCombinationValues("failover", new Object[]{Boolean.FALSE, Boolean.TRUE});
1:     }
1: 
1:     public void testSendOnAReceiveOnBWithTransportDisconnect() throws Exception {
1:         bridgeBrokers(SPOKE, HUB);
1: 
1:         startAllBrokers();
1: 
1:         // Setup connection
1:         URI hubURI = brokers.get(HUB).broker.getVmConnectorURI();
1:         URI spokeURI = brokers.get(SPOKE).broker.getVmConnectorURI();
1:         ActiveMQConnectionFactory facHub = new ActiveMQConnectionFactory(hubURI);
1:         ActiveMQConnectionFactory facSpoke = new ActiveMQConnectionFactory(spokeURI);
1:         Connection conHub = facHub.createConnection();
1:         Connection conSpoke = facSpoke.createConnection();
1:         conHub.setClientID("clientHUB");
1:         conSpoke.setClientID("clientSPOKE");
1:         conHub.start();
1:         conSpoke.start();
1:         Session sesHub = conHub.createSession(false, Session.AUTO_ACKNOWLEDGE);
1:         Session sesSpoke = conSpoke.createSession(false, Session.AUTO_ACKNOWLEDGE);
1: 
1:         ActiveMQTopic topic = new ActiveMQTopic("TEST.FOO");
1:         String consumerName = "consumerName";
1: 
1:         // Setup consumers
1:         MessageConsumer remoteConsumer = sesSpoke.createDurableSubscriber(topic, consumerName);
1:         remoteConsumer.setMessageListener(new MessageListener() {
1:             public void onMessage(Message msg) {
1:                 try {
1:                     TextMessage textMsg = (TextMessage) msg;
1:                     receivedMsgs++;
1:                     LOG.info("Received messages (" + receivedMsgs + "): " + textMsg.getText());
1:                 } catch (JMSException e) {
1:                     e.printStackTrace();
1:                 }
1:             }
1:         });
1: 
1:         // allow subscription information to flow back to Spoke
1:         sleep(1000);
1: 
1:         // Setup producer
1:         MessageProducer localProducer = sesHub.createProducer(topic);
1:         localProducer.setDeliveryMode(DeliveryMode.PERSISTENT);
1: 
1:         // Send messages
1:         for (int i = 0; i < MESSAGE_COUNT; i++) {
1:             sleep(50);
1:             if (i == 50 || i == 150) {
1:                 if (simulateStalledNetwork) {
1:                     socketProxy.pause();
1:                 } else {
1:                     socketProxy.close();
1:                 }
1:                 networkDownTimeStart = System.currentTimeMillis();
1:             } else if (networkDownTimeStart > 0) {
1:                 // restart after NETWORK_DOWN_TIME seconds
1:                 sleep(NETWORK_DOWN_TIME);
1:                 networkDownTimeStart = 0;
1:                 if (simulateStalledNetwork) {
1:                     socketProxy.goOn();
1:                 } else {
1:                     socketProxy.reopen();
1:                 }
1:             } else {
1:                 // slow message production to allow bridge to recover and limit message duplication
1:                 sleep(500);
1:             }
1:             Message test = sesHub.createTextMessage("test-" + i);
1:             localProducer.send(test);
1:         }
1: 
1:         LOG.info("waiting for messages to flow");
1:         Wait.waitFor(new Wait.Condition() {
1:             @Override
1:             public boolean isSatisified() throws Exception {
1:                 return receivedMsgs >= MESSAGE_COUNT;
1:             }
1:         });
1: 
1:         assertTrue("At least message " + MESSAGE_COUNT +
1:                 " must be received, count=" + receivedMsgs,
1:                 MESSAGE_COUNT <= receivedMsgs);
1:         brokers.get(HUB).broker.deleteAllMessages();
1:         brokers.get(SPOKE).broker.deleteAllMessages();
1:         conHub.close();
1:         conSpoke.close();
1:     }
1: 
1:     @Override
1:     protected void startAllBrokers() throws Exception {
1:         // Ensure HUB is started first so bridge will be active from the get go
1:         BrokerItem brokerItem = brokers.get(HUB);
1:         brokerItem.broker.start();
1:         brokerItem = brokers.get(SPOKE);
1:         brokerItem.broker.start();
1:         sleep(600);
1:     }
1: 
1:     public void setUp() throws Exception {
1:         networkDownTimeStart = 0;
1:         inactiveDuration = 1000;
1:         useSocketProxy = true;
1:         receivedMsgs = 0;
1:         super.setAutoFail(true);
1:         super.setUp();
1:         final String options = "?persistent=true&useJmx=false&deleteAllMessagesOnStartup=true";
1:         createBroker(new URI("broker:(tcp://localhost:61617)/" + HUB + options));
1:         createBroker(new URI("broker:(tcp://localhost:61616)/" + SPOKE + options));
1:     }
1: 
1:     public void tearDown() throws Exception {
1:         super.tearDown();
1:         if (socketProxy != null) {
1:             socketProxy.close();
1:         }
1:     }
1: 
1:     public static Test suite() {
1:         return suite(DurableSubscriberWithNetworkDisconnectTest.class);
1:     }
1: 
1:     private void sleep(int milliSecondTime) {
1:         try {
1:             Thread.sleep(milliSecondTime);
1:         } catch (InterruptedException igonred) {
1:         }
1:     }
1: 
1:     @Override
1:     protected NetworkConnector bridgeBrokers(BrokerService localBroker, BrokerService remoteBroker, boolean l_dynamicOnly, int networkTTL, boolean l_conduit, boolean l_failover) throws Exception {
1:         List<TransportConnector> transportConnectors = remoteBroker.getTransportConnectors();
1:         URI remoteURI;
1:         if (!transportConnectors.isEmpty()) {
1:             remoteURI = ((TransportConnector) transportConnectors.get(0)).getConnectUri();
1:             if (useSocketProxy) {
1:                 socketProxy = new SocketProxy(remoteURI);
1:                 remoteURI = socketProxy.getUrl();
1:             }
1:             String options = "";
1:             if (failover) {
1:                 options = "static:(failover:(" + remoteURI;
1:             } else {
1:                 options = "static:(" + remoteURI;
1:             }
1:             if (inactivity) {
1:                 options += "?wireFormat.maxInactivityDuration=" + inactiveDuration + "&wireFormat.maxInactivityDurationInitalDelay=" + inactiveDuration + ")";
1:             } else {
1:                 options += ")";
1:             }
1: 
1:              if (failover) {
0:                 options += "?maxReconnectAttempts=1)";
1:              }
1: 
1:             options += "?useExponentialBackOff=" + exponentialBackOff;
1:             DiscoveryNetworkConnector connector = new DiscoveryNetworkConnector(new URI(options));
1:             connector.setDynamicOnly(dynamicOnly);
1:             connector.setNetworkTTL(networkTTL);
1:             localBroker.addNetworkConnector(connector);
1:             maxSetupTime = 2000;
1:             if (useDuplexNetworkBridge) {
1:                 connector.setDuplex(true);
1:             }
1:             return connector;
1:         } else {
1:             throw new Exception("Remote broker has no registered connectors.");
1:         }
1:     }
1: }
============================================================================