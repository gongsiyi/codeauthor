1:c636b37: /**
1:c636b37:  * Licensed to the Apache Software Foundation (ASF) under one or more
1:c636b37:  * contributor license agreements.  See the NOTICE file distributed with
1:c636b37:  * this work for additional information regarding copyright ownership.
1:c636b37:  * The ASF licenses this file to You under the Apache License, Version 2.0
1:c636b37:  * (the "License"); you may not use this file except in compliance with
1:c636b37:  * the License.  You may obtain a copy of the License at
2:c636b37:  *
1:230a86c:  *      http://www.apache.org/licenses/LICENSE-2.0
1:c636b37:  *
1:c636b37:  * Unless required by applicable law or agreed to in writing, software
1:c636b37:  * distributed under the License is distributed on an "AS IS" BASIS,
1:c636b37:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:c636b37:  * See the License for the specific language governing permissions and
1:c636b37:  * limitations under the License.
1:c636b37:  */
1:c636b37: package org.apache.activemq.util;
2:c636b37: 
1:c636b37: import java.io.IOException;
1:74a7a8b: 
1:18300c6: import org.junit.Test;
1:c636b37: 
1:18300c6: public class DataByteArrayOutputStreamTest {
1:c636b37: 
1:c636b37:     /**
1:c636b37:      * This test case assumes that an ArrayIndexOutOfBoundsException will be thrown when the buffer fails to resize
1:c636b37:      * @throws IOException
1:c636b37:      */
1:18300c6:     @Test
1:c636b37:     public void testResize() throws IOException {
1:c636b37:         int initSize = 64;
1:c636b37:         DataByteArrayOutputStream out = new DataByteArrayOutputStream();
1:c636b37: 
1:c636b37:         fillOut(out, initSize);
1:c636b37:         // Should resized here
1:c636b37:         out.writeBoolean(true);
1:c636b37: 
1:c636b37:         fillOut(out, initSize);
1:c636b37:         // Should resized here
1:c636b37:         out.writeByte(1);
1:c636b37: 
1:c636b37:         fillOut(out, initSize);
1:c636b37:         // Should resized here
1:c636b37:         out.writeBytes("test");
1:c636b37: 
1:c636b37:         fillOut(out, initSize);
1:c636b37:         // Should resized here
1:c636b37:         out.writeChar('C');
1:c636b37: 
1:c636b37:         fillOut(out, initSize);
1:c636b37:         // Should resized here
1:c636b37:         out.writeChars("test");
1:c636b37: 
1:c636b37:         fillOut(out, initSize);
1:c636b37:         // Should resized here
1:c636b37:         out.writeDouble(3.1416);
1:c636b37: 
1:c636b37:         fillOut(out, initSize);
1:c636b37:         // Should resized here
1:c636b37:         out.writeFloat((float)3.1416);
1:c636b37: 
1:c636b37:         fillOut(out, initSize);
1:c636b37:         // Should resized here
1:c636b37:         out.writeInt(12345);
1:c636b37: 
1:c636b37:         fillOut(out, initSize);
1:c636b37:         // Should resized here
1:c636b37:         out.writeLong(12345);
1:c636b37: 
1:c636b37:         fillOut(out, initSize);
1:c636b37:         // Should resized here
1:c636b37:         out.writeShort(1234);
1:c636b37: 
1:c636b37:         fillOut(out, initSize);
1:c636b37:         // Should resized here
1:c636b37:         out.writeUTF("test");
1:c636b37: 
1:c636b37:         fillOut(out, initSize);
1:c636b37:         // Should resized here
1:c636b37:         out.write(1234);
1:c636b37: 
1:c636b37:         fillOut(out, initSize);
1:c636b37:         // Should resized here
1:c636b37:         out.write(new byte[10], 5, 5);
1:c636b37: 
1:c636b37:         fillOut(out, initSize);
1:c636b37:         // Should resized here
1:c636b37:         out.write(new byte[10]);
1:c636b37:     }
1:c636b37: 
1:c636b37:     /**
1:c636b37:      * This method restarts the stream to the init size, and fills it up with data
1:c636b37:      * @param out
1:c636b37:      * @param size
1:c636b37:      * @throws IOException
1:c636b37:      */
1:c636b37:     public void fillOut(DataByteArrayOutputStream out, int size) throws IOException {
1:c636b37:         out.restart(size);
1:c636b37:         out.write(new byte[size]);
1:c636b37:     }
1:c636b37: }
============================================================================
author:Timothy Bish
-------------------------------------------------------------------------------
commit:18300c6
/////////////////////////////////////////////////////////////////////////
1: import org.junit.Test;
1: public class DataByteArrayOutputStreamTest {
1:     @Test
author:Hiram R. Chirino
-------------------------------------------------------------------------------
commit:9a8f6e4
commit:74a7a8b
/////////////////////////////////////////////////////////////////////////
0: import junit.framework.TestCase;
1: 
commit:230a86c
/////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////
1:  *      http://www.apache.org/licenses/LICENSE-2.0
author:Adrian T. Co
-------------------------------------------------------------------------------
commit:c636b37
/////////////////////////////////////////////////////////////////////////
1: /**
1:  *
1:  * Licensed to the Apache Software Foundation (ASF) under one or more
1:  * contributor license agreements.  See the NOTICE file distributed with
1:  * this work for additional information regarding copyright ownership.
1:  * The ASF licenses this file to You under the Apache License, Version 2.0
1:  * (the "License"); you may not use this file except in compliance with
1:  * the License.  You may obtain a copy of the License at
1:  *
0:  * http://www.apache.org/licenses/LICENSE-2.0
1:  *
1:  * Unless required by applicable law or agreed to in writing, software
1:  * distributed under the License is distributed on an "AS IS" BASIS,
1:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:  * See the License for the specific language governing permissions and
1:  * limitations under the License.
1:  */
1: package org.apache.activemq.util;
1: 
0: import junit.framework.TestCase;
1: 
1: import java.io.IOException;
1: 
0: public class DataByteArrayOutputStreamTest extends TestCase {
1: 
1:     /**
1:      * This test case assumes that an ArrayIndexOutOfBoundsException will be thrown when the buffer fails to resize
1:      * @throws IOException
1:      */
1:     public void testResize() throws IOException {
1:         int initSize = 64;
1:         DataByteArrayOutputStream out = new DataByteArrayOutputStream();
1: 
1:         fillOut(out, initSize);
1:         // Should resized here
1:         out.writeBoolean(true);
1: 
1:         fillOut(out, initSize);
1:         // Should resized here
1:         out.writeByte(1);
1: 
1:         fillOut(out, initSize);
1:         // Should resized here
1:         out.writeBytes("test");
1: 
1:         fillOut(out, initSize);
1:         // Should resized here
1:         out.writeChar('C');
1: 
1:         fillOut(out, initSize);
1:         // Should resized here
1:         out.writeChars("test");
1: 
1:         fillOut(out, initSize);
1:         // Should resized here
1:         out.writeDouble(3.1416);
1: 
1:         fillOut(out, initSize);
1:         // Should resized here
1:         out.writeFloat((float)3.1416);
1: 
1:         fillOut(out, initSize);
1:         // Should resized here
1:         out.writeInt(12345);
1: 
1:         fillOut(out, initSize);
1:         // Should resized here
1:         out.writeLong(12345);
1: 
1:         fillOut(out, initSize);
1:         // Should resized here
1:         out.writeShort(1234);
1: 
1:         fillOut(out, initSize);
1:         // Should resized here
1:         out.writeUTF("test");
1: 
1:         fillOut(out, initSize);
1:         // Should resized here
1:         out.write(1234);
1: 
1:         fillOut(out, initSize);
1:         // Should resized here
1:         out.write(new byte[10], 5, 5);
1: 
1:         fillOut(out, initSize);
1:         // Should resized here
1:         out.write(new byte[10]);
1:     }
1: 
1:     /**
1:      * This method restarts the stream to the init size, and fills it up with data
1:      * @param out
1:      * @param size
1:      * @throws IOException
1:      */
1:     public void fillOut(DataByteArrayOutputStream out, int size) throws IOException {
1:         out.restart(size);
1:         out.write(new byte[size]);
1:     }
1: }
============================================================================