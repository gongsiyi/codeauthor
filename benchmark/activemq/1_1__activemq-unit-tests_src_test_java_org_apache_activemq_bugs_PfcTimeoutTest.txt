1:25f112c: /**
1:25f112c:  * Licensed to the Apache Software Foundation (ASF) under one or more
1:25f112c:  * contributor license agreements.  See the NOTICE file distributed with
1:25f112c:  * this work for additional information regarding copyright ownership.
1:25f112c:  * The ASF licenses this file to You under the Apache License, Version 2.0
1:25f112c:  * (the "License"); you may not use this file except in compliance with
1:25f112c:  * the License.  You may obtain a copy of the License at
1:25f112c:  * <p>
1:25f112c:  * http://www.apache.org/licenses/LICENSE-2.0
1:25f112c:  * <p>
1:25f112c:  * Unless required by applicable law or agreed to in writing, software
1:25f112c:  * distributed under the License is distributed on an "AS IS" BASIS,
1:25f112c:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:25f112c:  * See the License for the specific language governing permissions and
1:25f112c:  * limitations under the License.
1:25f112c:  */
1:25f112c: 
1:25f112c: package org.apache.activemq.bugs;
1:25f112c: 
1:25f112c: 
1:25f112c: import org.apache.activemq.ActiveMQConnection;
1:25f112c: import org.apache.activemq.ActiveMQConnectionFactory;
1:25f112c: import org.apache.activemq.broker.BrokerService;
1:25f112c: import org.apache.activemq.broker.jmx.DestinationView;
1:25f112c: import org.apache.activemq.broker.jmx.QueueView;
1:25f112c: import org.apache.activemq.broker.region.policy.PolicyEntry;
1:25f112c: import org.apache.activemq.broker.region.policy.PolicyMap;
1:25f112c: import org.junit.Test;
1:25f112c: import org.slf4j.Logger;
1:25f112c: import org.slf4j.LoggerFactory;
1:25f112c: 
1:25f112c: import javax.jms.Connection;
1:25f112c: import javax.jms.Message;
1:25f112c: import javax.jms.MessageConsumer;
1:25f112c: import javax.jms.MessageProducer;
1:25f112c: import javax.jms.Session;
1:25f112c: import javax.management.ObjectName;
1:25f112c: import java.util.ArrayList;
1:25f112c: import java.util.List;
1:25f112c: import java.util.Map;
1:25f112c: import java.util.concurrent.CountDownLatch;
1:25f112c: import java.util.concurrent.TimeUnit;
1:25f112c: 
1:25f112c: import static org.junit.Assert.assertEquals;
1:25f112c: import static org.junit.Assert.assertTrue;
1:25f112c: 
1:25f112c: 
1:25f112c: public class PfcTimeoutTest {
1:25f112c: 
1:25f112c:     private static final Logger LOG = LoggerFactory.getLogger(PfcTimeoutTest.class);
1:25f112c: 
1:25f112c:     private static final String TRANSPORT_URL = "tcp://0.0.0.0:0";
1:25f112c:     private static final String DESTINATION = "testQ1";
1:25f112c: 
1:25f112c:     protected BrokerService createBroker() throws Exception {
1:25f112c: 
1:25f112c:         BrokerService broker = new BrokerService();
1:25f112c:         broker.setDeleteAllMessagesOnStartup(true);
1:25f112c:         broker.setAdvisorySupport(false);
1:25f112c: 
1:25f112c: 
1:25f112c:         PolicyMap policyMap = new PolicyMap();
1:25f112c:         List<PolicyEntry> entries = new ArrayList<PolicyEntry>();
1:25f112c:         PolicyEntry pe = new PolicyEntry();
1:25f112c: 
1:25f112c:         pe.setProducerFlowControl(true);
1:25f112c:         pe.setMemoryLimit(10 * 1024);
1:25f112c:         // needs to be > 100% such that any pending send that is less that 100% and pushed usage over 100% can
1:25f112c:         // still get cached by the cursor and retain the message in memory
1:25f112c:         pe.setCursorMemoryHighWaterMark(140);
1:25f112c:         pe.setExpireMessagesPeriod(0);
1:25f112c:         pe.setQueue(">");
1:25f112c:         entries.add(pe);
1:25f112c:         policyMap.setPolicyEntries(entries);
1:25f112c:         broker.setDestinationPolicy(policyMap);
1:25f112c: 
1:25f112c:         broker.addConnector(TRANSPORT_URL);
1:25f112c: 
1:25f112c:         broker.start();
1:25f112c:         return broker;
1:25f112c:     }
1:25f112c: 
1:25f112c: 
1:25f112c:     @Test
1:25f112c:     public void testTransactedSendWithTimeout() throws Exception {
1:25f112c: 
1:25f112c: 
1:25f112c:         BrokerService broker = createBroker();
1:25f112c:         broker.waitUntilStarted();
1:25f112c: 
1:25f112c:         CountDownLatch gotTimeoutException = new CountDownLatch(1);
1:25f112c: 
1:25f112c:         try {
1:25f112c:             int sendTimeout = 5000;
1:25f112c: 
1:25f112c:             //send 3 messages that will trigger producer flow and the 3rd send
1:25f112c:             // times out after 10 seconds and rollback transaction
1:25f112c:             sendMessages(broker, gotTimeoutException, sendTimeout, 3);
1:25f112c: 
1:25f112c:             assertTrue(gotTimeoutException.await(sendTimeout * 2, TimeUnit.MILLISECONDS));
1:25f112c: 
1:25f112c:         } finally {
1:25f112c: 
1:25f112c:             broker.stop();
1:25f112c:             broker.waitUntilStopped();
1:25f112c:         }
1:25f112c: 
1:25f112c:     }
1:25f112c: 
1:25f112c:     @Test
1:25f112c:     public void testTransactedSendWithTimeoutRollbackUsage() throws Exception {
1:25f112c: 
1:25f112c: 
1:25f112c:         BrokerService broker = createBroker();
1:25f112c:         broker.waitUntilStarted();
1:25f112c: 
1:25f112c:         CountDownLatch gotTimeoutException = new CountDownLatch(1);
1:25f112c: 
1:25f112c:         try {
1:25f112c: 
1:25f112c:             int sendTimeout = 5000;
1:25f112c: 
1:25f112c:             //send 3 messages that will trigger producer flow and the 3rd send
1:25f112c:             // times out after 10 seconds and rollback transaction
1:25f112c:             int numberOfMessageSent = sendMessages(broker, gotTimeoutException, sendTimeout, 3);
1:25f112c: 
1:25f112c:             assertTrue(gotTimeoutException.await(sendTimeout * 2, TimeUnit.MILLISECONDS));
1:25f112c: 
1:25f112c:             //empty queue by consuming contents
1:25f112c:             consumeMessages(broker, numberOfMessageSent);
1:25f112c: 
1:25f112c:             QueueView queueView = getQueueView(broker, DESTINATION);
1:25f112c: 
1:25f112c:             long queueSize = queueView.getQueueSize();
1:25f112c:             long memoryUsage = queueView.getCursorMemoryUsage();
1:25f112c: 
1:25f112c: 
1:25f112c:             LOG.info("queueSize after test = " + queueSize);
1:25f112c:             LOG.info("memoryUsage after test = " + memoryUsage);
1:25f112c: 
1:25f112c:             assertEquals("queue size after test ", 0, queueSize);
1:25f112c:             assertEquals("memory size after test ", 0, memoryUsage);
1:25f112c: 
1:25f112c:         } finally {
1:25f112c: 
1:25f112c:             broker.stop();
1:25f112c:             broker.waitUntilStopped();
1:25f112c:         }
1:25f112c:     }
1:25f112c: 
1:25f112c:     private int sendMessages(final BrokerService broker, final CountDownLatch gotTimeoutException, int sendTimeeOut, int messageCount) throws Exception {
1:25f112c: 
1:25f112c:         int numberOfMessageSent = 0;
1:25f112c: 
1:25f112c:         ActiveMQConnectionFactory connectionFactory = newConnectionFactory(broker);
1:25f112c:         connectionFactory.setSendTimeout(sendTimeeOut);
1:25f112c:         Connection connection = (ActiveMQConnection) connectionFactory.createConnection();
1:25f112c:         connection.start();
1:25f112c: 
1:25f112c:         Session producerSession = connection.createSession(true, Session.SESSION_TRANSACTED);
1:25f112c: 
1:25f112c:         try {
1:25f112c: 
1:25f112c: 
1:25f112c:             MessageProducer jmsProducer = producerSession.createProducer(producerSession.createQueue(DESTINATION));
1:25f112c: 
1:25f112c:             Message sendMessage = producerSession.createTextMessage(createTextMessage(5000));
1:25f112c: 
1:25f112c:             for (int i = 0; i < messageCount; i++) {
1:25f112c: 
1:25f112c:                 jmsProducer.send(sendMessage);
1:25f112c:                 producerSession.commit();
1:25f112c:                 numberOfMessageSent++;
1:25f112c: 
1:25f112c:             }
1:25f112c: 
1:25f112c:             LOG.info(" Finished after producing : " + numberOfMessageSent);
1:25f112c:             return numberOfMessageSent;
1:25f112c: 
1:25f112c:         } catch (Exception ex) {
1:25f112c: 
1:25f112c:             LOG.info("Exception received producing ", ex);
1:25f112c:             LOG.info("finishing after exception :" + numberOfMessageSent);
1:25f112c:             LOG.info("rolling back current transaction ");
1:25f112c: 
1:25f112c:             gotTimeoutException.countDown();
1:25f112c:             producerSession.rollback();
1:25f112c: 
1:25f112c:             return numberOfMessageSent;
1:25f112c:         } finally {
1:25f112c:             if (connection != null) {
1:25f112c:                 connection.close();
1:25f112c:             }
1:25f112c:         }
1:25f112c: 
1:25f112c:     }
1:25f112c: 
1:25f112c:     private String createTextMessage(int size) {
1:25f112c:         StringBuffer buffer = new StringBuffer();
1:25f112c: 
1:25f112c:         for (int i = 0; i < size; i++) {
1:25f112c:             buffer.append("9");
1:25f112c:         }
1:25f112c: 
1:25f112c:         return buffer.toString();
1:25f112c:     }
1:25f112c: 
1:25f112c: 
1:25f112c:     private ActiveMQConnectionFactory newConnectionFactory(BrokerService broker) throws Exception {
1:25f112c:         ActiveMQConnectionFactory result = new ActiveMQConnectionFactory("admin", "admin", broker.getTransportConnectorByScheme("tcp").getPublishableConnectString());
1:25f112c:         result.setWatchTopicAdvisories(false);
1:25f112c:         return result;
1:25f112c:     }
1:25f112c: 
1:25f112c:     private int consumeMessages(BrokerService broker, int messageCount) throws Exception {
1:25f112c: 
1:25f112c:         int numberOfMessageConsumed = 0;
1:25f112c: 
1:25f112c:         ActiveMQConnectionFactory connectionFactory = newConnectionFactory(broker);
1:25f112c:         Connection connection = (ActiveMQConnection) connectionFactory.createConnection();
1:25f112c:         connection.start();
1:25f112c: 
1:25f112c:         Session consumerSession = connection.createSession(false, Session.AUTO_ACKNOWLEDGE);
1:25f112c: 
1:25f112c:         try {
1:25f112c: 
1:25f112c: 
1:25f112c:             MessageConsumer jmsConsumer = consumerSession.createConsumer(consumerSession.createQueue(DESTINATION));
1:25f112c: 
1:25f112c: 
1:25f112c:             for (int i = 0; i < messageCount; i++) {
1:25f112c:                 jmsConsumer.receive(1000);
1:25f112c:                 numberOfMessageConsumed++;
1:25f112c:             }
1:25f112c: 
1:25f112c:             LOG.info(" Finished after consuming  : " + numberOfMessageConsumed);
1:25f112c:             return numberOfMessageConsumed;
1:25f112c: 
1:25f112c:         } catch (Exception ex) {
1:25f112c: 
1:25f112c:             LOG.info("Exception received producing ", ex);
1:25f112c:             LOG.info("finishing after exception :" + numberOfMessageConsumed);
1:25f112c: 
1:25f112c: 
1:25f112c:             return numberOfMessageConsumed;
1:25f112c:         } finally {
1:25f112c:             if (connection != null) {
1:25f112c:                 connection.close();
1:25f112c:             }
1:25f112c:         }
1:25f112c: 
1:25f112c:     }
1:25f112c: 
1:25f112c: 
1:25f112c:     private QueueView getQueueView(BrokerService broker, String queueName) throws Exception {
1:25f112c:         Map<ObjectName, DestinationView> queueViews = broker.getAdminView().getBroker().getQueueViews();
1:25f112c: 
1:25f112c:         for (ObjectName key : queueViews.keySet()) {
1:25f112c:             DestinationView destinationView = queueViews.get(key);
1:25f112c: 
1:25f112c:             if (destinationView instanceof QueueView) {
1:25f112c:                 QueueView queueView = (QueueView) destinationView;
1:25f112c: 
1:25f112c:                 if (queueView.getName().equals(queueName)) {
1:25f112c:                     return queueView;
1:25f112c:                 }
1:25f112c: 
1:25f112c:             }
1:25f112c:         }
1:25f112c:         return null;
1:25f112c:     }
1:25f112c: 
1:25f112c: }
1:25f112c: 
============================================================================
author:gtully
-------------------------------------------------------------------------------
commit:25f112c
/////////////////////////////////////////////////////////////////////////
1: /**
1:  * Licensed to the Apache Software Foundation (ASF) under one or more
1:  * contributor license agreements.  See the NOTICE file distributed with
1:  * this work for additional information regarding copyright ownership.
1:  * The ASF licenses this file to You under the Apache License, Version 2.0
1:  * (the "License"); you may not use this file except in compliance with
1:  * the License.  You may obtain a copy of the License at
1:  * <p>
1:  * http://www.apache.org/licenses/LICENSE-2.0
1:  * <p>
1:  * Unless required by applicable law or agreed to in writing, software
1:  * distributed under the License is distributed on an "AS IS" BASIS,
1:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:  * See the License for the specific language governing permissions and
1:  * limitations under the License.
1:  */
1: 
1: package org.apache.activemq.bugs;
1: 
1: 
1: import org.apache.activemq.ActiveMQConnection;
1: import org.apache.activemq.ActiveMQConnectionFactory;
1: import org.apache.activemq.broker.BrokerService;
1: import org.apache.activemq.broker.jmx.DestinationView;
1: import org.apache.activemq.broker.jmx.QueueView;
1: import org.apache.activemq.broker.region.policy.PolicyEntry;
1: import org.apache.activemq.broker.region.policy.PolicyMap;
1: import org.junit.Test;
1: import org.slf4j.Logger;
1: import org.slf4j.LoggerFactory;
1: 
1: import javax.jms.Connection;
1: import javax.jms.Message;
1: import javax.jms.MessageConsumer;
1: import javax.jms.MessageProducer;
1: import javax.jms.Session;
1: import javax.management.ObjectName;
1: import java.util.ArrayList;
1: import java.util.List;
1: import java.util.Map;
1: import java.util.concurrent.CountDownLatch;
1: import java.util.concurrent.TimeUnit;
1: 
1: import static org.junit.Assert.assertEquals;
1: import static org.junit.Assert.assertTrue;
1: 
1: 
1: public class PfcTimeoutTest {
1: 
1:     private static final Logger LOG = LoggerFactory.getLogger(PfcTimeoutTest.class);
1: 
1:     private static final String TRANSPORT_URL = "tcp://0.0.0.0:0";
1:     private static final String DESTINATION = "testQ1";
1: 
1:     protected BrokerService createBroker() throws Exception {
1: 
1:         BrokerService broker = new BrokerService();
1:         broker.setDeleteAllMessagesOnStartup(true);
1:         broker.setAdvisorySupport(false);
1: 
1: 
1:         PolicyMap policyMap = new PolicyMap();
1:         List<PolicyEntry> entries = new ArrayList<PolicyEntry>();
1:         PolicyEntry pe = new PolicyEntry();
1: 
1:         pe.setProducerFlowControl(true);
1:         pe.setMemoryLimit(10 * 1024);
1:         // needs to be > 100% such that any pending send that is less that 100% and pushed usage over 100% can
1:         // still get cached by the cursor and retain the message in memory
1:         pe.setCursorMemoryHighWaterMark(140);
1:         pe.setExpireMessagesPeriod(0);
1:         pe.setQueue(">");
1:         entries.add(pe);
1:         policyMap.setPolicyEntries(entries);
1:         broker.setDestinationPolicy(policyMap);
1: 
1:         broker.addConnector(TRANSPORT_URL);
1: 
1:         broker.start();
1:         return broker;
1:     }
1: 
1: 
1:     @Test
1:     public void testTransactedSendWithTimeout() throws Exception {
1: 
1: 
1:         BrokerService broker = createBroker();
1:         broker.waitUntilStarted();
1: 
1:         CountDownLatch gotTimeoutException = new CountDownLatch(1);
1: 
1:         try {
1:             int sendTimeout = 5000;
1: 
1:             //send 3 messages that will trigger producer flow and the 3rd send
1:             // times out after 10 seconds and rollback transaction
1:             sendMessages(broker, gotTimeoutException, sendTimeout, 3);
1: 
1:             assertTrue(gotTimeoutException.await(sendTimeout * 2, TimeUnit.MILLISECONDS));
1: 
1:         } finally {
1: 
1:             broker.stop();
1:             broker.waitUntilStopped();
1:         }
1: 
1:     }
1: 
1:     @Test
1:     public void testTransactedSendWithTimeoutRollbackUsage() throws Exception {
1: 
1: 
1:         BrokerService broker = createBroker();
1:         broker.waitUntilStarted();
1: 
1:         CountDownLatch gotTimeoutException = new CountDownLatch(1);
1: 
1:         try {
1: 
1:             int sendTimeout = 5000;
1: 
1:             //send 3 messages that will trigger producer flow and the 3rd send
1:             // times out after 10 seconds and rollback transaction
1:             int numberOfMessageSent = sendMessages(broker, gotTimeoutException, sendTimeout, 3);
1: 
1:             assertTrue(gotTimeoutException.await(sendTimeout * 2, TimeUnit.MILLISECONDS));
1: 
1:             //empty queue by consuming contents
1:             consumeMessages(broker, numberOfMessageSent);
1: 
1:             QueueView queueView = getQueueView(broker, DESTINATION);
1: 
1:             long queueSize = queueView.getQueueSize();
1:             long memoryUsage = queueView.getCursorMemoryUsage();
1: 
1: 
1:             LOG.info("queueSize after test = " + queueSize);
1:             LOG.info("memoryUsage after test = " + memoryUsage);
1: 
1:             assertEquals("queue size after test ", 0, queueSize);
1:             assertEquals("memory size after test ", 0, memoryUsage);
1: 
1:         } finally {
1: 
1:             broker.stop();
1:             broker.waitUntilStopped();
1:         }
1:     }
1: 
1:     private int sendMessages(final BrokerService broker, final CountDownLatch gotTimeoutException, int sendTimeeOut, int messageCount) throws Exception {
1: 
1:         int numberOfMessageSent = 0;
1: 
1:         ActiveMQConnectionFactory connectionFactory = newConnectionFactory(broker);
1:         connectionFactory.setSendTimeout(sendTimeeOut);
1:         Connection connection = (ActiveMQConnection) connectionFactory.createConnection();
1:         connection.start();
1: 
1:         Session producerSession = connection.createSession(true, Session.SESSION_TRANSACTED);
1: 
1:         try {
1: 
1: 
1:             MessageProducer jmsProducer = producerSession.createProducer(producerSession.createQueue(DESTINATION));
1: 
1:             Message sendMessage = producerSession.createTextMessage(createTextMessage(5000));
1: 
1:             for (int i = 0; i < messageCount; i++) {
1: 
1:                 jmsProducer.send(sendMessage);
1:                 producerSession.commit();
1:                 numberOfMessageSent++;
1: 
1:             }
1: 
1:             LOG.info(" Finished after producing : " + numberOfMessageSent);
1:             return numberOfMessageSent;
1: 
1:         } catch (Exception ex) {
1: 
1:             LOG.info("Exception received producing ", ex);
1:             LOG.info("finishing after exception :" + numberOfMessageSent);
1:             LOG.info("rolling back current transaction ");
1: 
1:             gotTimeoutException.countDown();
1:             producerSession.rollback();
1: 
1:             return numberOfMessageSent;
1:         } finally {
1:             if (connection != null) {
1:                 connection.close();
1:             }
1:         }
1: 
1:     }
1: 
1:     private String createTextMessage(int size) {
1:         StringBuffer buffer = new StringBuffer();
1: 
1:         for (int i = 0; i < size; i++) {
1:             buffer.append("9");
1:         }
1: 
1:         return buffer.toString();
1:     }
1: 
1: 
1:     private ActiveMQConnectionFactory newConnectionFactory(BrokerService broker) throws Exception {
1:         ActiveMQConnectionFactory result = new ActiveMQConnectionFactory("admin", "admin", broker.getTransportConnectorByScheme("tcp").getPublishableConnectString());
1:         result.setWatchTopicAdvisories(false);
1:         return result;
1:     }
1: 
1:     private int consumeMessages(BrokerService broker, int messageCount) throws Exception {
1: 
1:         int numberOfMessageConsumed = 0;
1: 
1:         ActiveMQConnectionFactory connectionFactory = newConnectionFactory(broker);
1:         Connection connection = (ActiveMQConnection) connectionFactory.createConnection();
1:         connection.start();
1: 
1:         Session consumerSession = connection.createSession(false, Session.AUTO_ACKNOWLEDGE);
1: 
1:         try {
1: 
1: 
1:             MessageConsumer jmsConsumer = consumerSession.createConsumer(consumerSession.createQueue(DESTINATION));
1: 
1: 
1:             for (int i = 0; i < messageCount; i++) {
1:                 jmsConsumer.receive(1000);
1:                 numberOfMessageConsumed++;
1:             }
1: 
1:             LOG.info(" Finished after consuming  : " + numberOfMessageConsumed);
1:             return numberOfMessageConsumed;
1: 
1:         } catch (Exception ex) {
1: 
1:             LOG.info("Exception received producing ", ex);
1:             LOG.info("finishing after exception :" + numberOfMessageConsumed);
1: 
1: 
1:             return numberOfMessageConsumed;
1:         } finally {
1:             if (connection != null) {
1:                 connection.close();
1:             }
1:         }
1: 
1:     }
1: 
1: 
1:     private QueueView getQueueView(BrokerService broker, String queueName) throws Exception {
1:         Map<ObjectName, DestinationView> queueViews = broker.getAdminView().getBroker().getQueueViews();
1: 
1:         for (ObjectName key : queueViews.keySet()) {
1:             DestinationView destinationView = queueViews.get(key);
1: 
1:             if (destinationView instanceof QueueView) {
1:                 QueueView queueView = (QueueView) destinationView;
1: 
1:                 if (queueView.getName().equals(queueName)) {
1:                     return queueView;
1:                 }
1: 
1:             }
1:         }
1:         return null;
1:     }
1: 
1: }
1: 
============================================================================