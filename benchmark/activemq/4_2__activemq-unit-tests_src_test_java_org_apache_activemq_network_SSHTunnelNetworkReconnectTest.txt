1:7f883f6: /**
1:7f883f6:  * Licensed to the Apache Software Foundation (ASF) under one or more
1:7f883f6:  * contributor license agreements.  See the NOTICE file distributed with
1:7f883f6:  * this work for additional information regarding copyright ownership.
1:7f883f6:  * The ASF licenses this file to You under the Apache License, Version 2.0
1:7f883f6:  * (the "License"); you may not use this file except in compliance with
1:7f883f6:  * the License.  You may obtain a copy of the License at
1:230a86c:  *
1:230a86c:  *      http://www.apache.org/licenses/LICENSE-2.0
1:06a365f:  *
1:7f883f6:  * Unless required by applicable law or agreed to in writing, software
1:7f883f6:  * distributed under the License is distributed on an "AS IS" BASIS,
1:7f883f6:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:7f883f6:  * See the License for the specific language governing permissions and
1:7f883f6:  * limitations under the License.
1:7f883f6:  */
1:06a365f: package org.apache.activemq.network;
7:06a365f: 
1:06a365f: import java.io.IOException;
1:06a365f: import java.io.InputStream;
1:06a365f: import java.net.URI;
1:06a365f: import java.util.ArrayList;
1:06a365f: 
1:06a365f: import org.apache.activemq.broker.BrokerFactory;
1:06a365f: import org.apache.activemq.broker.BrokerService;
1:06a365f: 
1:06a365f: /**
1:230a86c:  * Test network reconnects over SSH tunnels. This case can be especially tricky
1:230a86c:  * since the SSH tunnels fool the TCP transport into thinking that they are
1:230a86c:  * initially connected.
1:c7d559f:  *
1:06a365f:  */
1:06a365f: public class SSHTunnelNetworkReconnectTest extends NetworkReconnectTest {
1:06a365f: 
1:c7d559f:     ArrayList<Process> processes = new ArrayList<Process>();
1:06a365f: 
1:c7d559f:     @Override
1:230a86c:     protected BrokerService createFirstBroker() throws Exception {
1:f812e34:         return BrokerFactory
1:f812e34:             .createBroker(new URI("xbean:org/apache/activemq/network/ssh-reconnect-broker1.xml"));
1:230a86c:     }
1:230a86c: 
1:c7d559f:     @Override
1:230a86c:     protected BrokerService createSecondBroker() throws Exception {
1:f812e34:         return BrokerFactory
1:f812e34:             .createBroker(new URI("xbean:org/apache/activemq/network/ssh-reconnect-broker2.xml"));
1:230a86c:     }
1:230a86c: 
1:c7d559f:     @Override
1:230a86c:     protected void setUp() throws Exception {
1:230a86c:         startProcess("ssh -Nn -L60006:localhost:61616 localhost");
1:230a86c:         startProcess("ssh -Nn -L60007:localhost:61617 localhost");
1:230a86c:         super.setUp();
1:230a86c:     }
1:230a86c: 
1:c7d559f:     @Override
1:230a86c:     protected void tearDown() throws Exception {
1:230a86c:         super.tearDown();
1:c7d559f:         for (Process p : processes) {
1:230a86c:             p.destroy();
1:230a86c:         }
1:230a86c:     }
1:230a86c: 
1:230a86c:     private void startProcess(String command) throws IOException {
1:230a86c:         final Process process = Runtime.getRuntime().exec(command);
1:230a86c:         processes.add(process);
1:230a86c:         new Thread("stdout: " + command) {
1:c7d559f:             @Override
1:230a86c:             public void run() {
1:230a86c:                 try {
1:230a86c:                     InputStream is = process.getInputStream();
1:230a86c:                     int c;
1:230a86c:                     while ((c = is.read()) >= 0) {
1:230a86c:                         System.out.write(c);
1:230a86c:                     }
1:230a86c:                 } catch (IOException e) {
1:230a86c:                 }
1:230a86c:             }
1:230a86c:         }.start();
1:230a86c:         new Thread("stderr: " + command) {
1:c7d559f:             @Override
1:230a86c:             public void run() {
1:230a86c:                 try {
1:230a86c:                     InputStream is = process.getErrorStream();
1:230a86c:                     int c;
1:230a86c:                     while ((c = is.read()) >= 0) {
1:230a86c:                         System.err.write(c);
1:230a86c:                     }
1:230a86c:                 } catch (IOException e) {
1:230a86c:                 }
1:230a86c:             }
1:230a86c:         }.start();
1:230a86c:     }
13:06a365f: }
============================================================================
author:Timothy A. Bish
-------------------------------------------------------------------------------
commit:c7d559f
/////////////////////////////////////////////////////////////////////////
1:  *
1:     ArrayList<Process> processes = new ArrayList<Process>();
1:     @Override
1:     @Override
1:     @Override
1:     @Override
1:         for (Process p : processes) {
/////////////////////////////////////////////////////////////////////////
1:             @Override
/////////////////////////////////////////////////////////////////////////
1:             @Override
commit:ef24cc9
author:Bosanac Dejan
-------------------------------------------------------------------------------
commit:8bf987b
/////////////////////////////////////////////////////////////////////////
0: import org.slf4j.Logger;
0: import org.slf4j.LoggerFactory;
/////////////////////////////////////////////////////////////////////////
0:     private static final transient Logger LOG = LoggerFactory.getLogger(SSHTunnelNetworkReconnectTest.class);
author:Hiram R. Chirino
-------------------------------------------------------------------------------
commit:fc00993
/////////////////////////////////////////////////////////////////////////
0:     private static final transient Log LOG = LogFactory.getLog(SSHTunnelNetworkReconnectTest.class);
commit:f812e34
/////////////////////////////////////////////////////////////////////////
1:         return BrokerFactory
1:             .createBroker(new URI("xbean:org/apache/activemq/network/ssh-reconnect-broker1.xml"));
1:         return BrokerFactory
1:             .createBroker(new URI("xbean:org/apache/activemq/network/ssh-reconnect-broker2.xml"));
commit:230a86c
/////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////
1:  *      http://www.apache.org/licenses/LICENSE-2.0
/////////////////////////////////////////////////////////////////////////
1:  * Test network reconnects over SSH tunnels. This case can be especially tricky
1:  * since the SSH tunnels fool the TCP transport into thinking that they are
1:  * initially connected.
1:  * 
1:     protected BrokerService createFirstBroker() throws Exception {
0:         return BrokerFactory.createBroker(new URI("xbean:org/apache/activemq/network/ssh-reconnect-broker1.xml"));
1:     }
1: 
1:     protected BrokerService createSecondBroker() throws Exception {
0:         return BrokerFactory.createBroker(new URI("xbean:org/apache/activemq/network/ssh-reconnect-broker2.xml"));
1:     }
1: 
1:     protected void setUp() throws Exception {
1:         startProcess("ssh -Nn -L60006:localhost:61616 localhost");
1:         startProcess("ssh -Nn -L60007:localhost:61617 localhost");
1:         super.setUp();
1:     }
1: 
1:     protected void tearDown() throws Exception {
1:         super.tearDown();
0:         for (Iterator iter = processes.iterator(); iter.hasNext();) {
0:             Process p = (Process)iter.next();
1:             p.destroy();
1:         }
1:     }
1: 
1:     private void startProcess(String command) throws IOException {
1:         final Process process = Runtime.getRuntime().exec(command);
1:         processes.add(process);
1:         new Thread("stdout: " + command) {
1:             public void run() {
1:                 try {
1:                     InputStream is = process.getInputStream();
1:                     int c;
1:                     while ((c = is.read()) >= 0) {
1:                         System.out.write(c);
1:                     }
1:                 } catch (IOException e) {
1:                 }
1:             }
1:         }.start();
1:         new Thread("stderr: " + command) {
1:             public void run() {
1:                 try {
1:                     InputStream is = process.getErrorStream();
1:                     int c;
1:                     while ((c = is.read()) >= 0) {
1:                         System.err.write(c);
1:                     }
1:                 } catch (IOException e) {
1:                 }
1:             }
1:         }.start();
1:     }
commit:06a365f
/////////////////////////////////////////////////////////////////////////
1: package org.apache.activemq.network;
1: 
1: import java.io.IOException;
1: import java.io.InputStream;
1: import java.net.URI;
1: import java.util.ArrayList;
0: import java.util.Iterator;
1: 
1: import org.apache.activemq.broker.BrokerFactory;
1: import org.apache.activemq.broker.BrokerService;
1: 
1: 
1: /**
0:  * Test network reconnects over SSH tunnels.  This case can be especially tricky since the SSH tunnels
0:  * fool the TCP transport into thinking that they are initially connected.
1:  *  
0:  * @author chirino
1:  */
1: public class SSHTunnelNetworkReconnectTest extends NetworkReconnectTest {
1: 
0: 	ArrayList processes = new ArrayList();
1: 	
1: 	
0: 	protected BrokerService createFirstBroker() throws Exception {
0: 		return BrokerFactory.createBroker(new URI("xbean:org/apache/activemq/network/ssh-reconnect-broker1.xml"));
1: 	}
1: 	
0: 	protected BrokerService createSecondBroker() throws Exception {
0: 		return BrokerFactory.createBroker(new URI("xbean:org/apache/activemq/network/ssh-reconnect-broker2.xml"));
1: 	}
1: 	
0: 	protected void setUp() throws Exception {		
0: 		startProcess("ssh -Nn -L60006:localhost:61616 localhost");
0: 		startProcess("ssh -Nn -L60007:localhost:61617 localhost");		
0: 		super.setUp();
1: 	}
1: 	
0: 	protected void tearDown() throws Exception {		
0: 		super.tearDown();
0: 		for (Iterator iter = processes.iterator(); iter.hasNext();) {
0: 			Process p = (Process) iter.next();
0: 			p.destroy();
1: 		}
1: 	}
1: 
0: 	private void startProcess(String command) throws IOException {
0: 		final Process process = Runtime.getRuntime().exec(command);
0: 		processes.add(process);
0: 		new Thread("stdout: "+command){
0: 			public void run() {
0: 				try {
0: 					InputStream is = process.getInputStream();
0: 					int c;
0: 					while((c=is.read())>=0) {
0: 						System.out.write(c);
1: 					}
0: 				} catch (IOException e) {
1: 				}
1: 			}
0: 		}.start();
0: 		new Thread("stderr: "+command){
0: 			public void run() {
0: 				try {
0: 					InputStream is = process.getErrorStream();
0: 					int c;
0: 					while((c=is.read())>=0) {
0: 						System.err.write(c);
1: 					}
0: 				} catch (IOException e) {
1: 				}
1: 			}
0: 		}.start();
1: 	}
1: }
commit:7f883f6
/////////////////////////////////////////////////////////////////////////
1: /**
0:  *
1:  * Licensed to the Apache Software Foundation (ASF) under one or more
1:  * contributor license agreements.  See the NOTICE file distributed with
1:  * this work for additional information regarding copyright ownership.
1:  * The ASF licenses this file to You under the Apache License, Version 2.0
1:  * (the "License"); you may not use this file except in compliance with
1:  * the License.  You may obtain a copy of the License at
0:  *
0:  * http://www.apache.org/licenses/LICENSE-2.0
0:  *
1:  * Unless required by applicable law or agreed to in writing, software
1:  * distributed under the License is distributed on an "AS IS" BASIS,
1:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:  * See the License for the specific language governing permissions and
1:  * limitations under the License.
1:  */
commit:2fc3e8e
/////////////////////////////////////////////////////////////////////////
0: /**
0:  *
0:  * Copyright 2005-2006 The Apache Software Foundation
0:  *
0:  * Licensed under the Apache License, Version 2.0 (the "License");
0:  * you may not use this file except in compliance with the License.
0:  * You may obtain a copy of the License at
0:  *
0:  * http://www.apache.org/licenses/LICENSE-2.0
0:  *
0:  * Unless required by applicable law or agreed to in writing, software
0:  * distributed under the License is distributed on an "AS IS" BASIS,
0:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
0:  * See the License for the specific language governing permissions and
0:  * limitations under the License.
0:  */
0: package org.apache.activemq.network;
0: 
0: import java.io.IOException;
0: import java.io.InputStream;
0: import java.net.URI;
0: import java.util.ArrayList;
0: import java.util.Iterator;
0: 
0: import org.apache.activemq.broker.BrokerFactory;
0: import org.apache.activemq.broker.BrokerService;
0: 
0: 
0: /**
0:  * Test network reconnects over SSH tunnels.  This case can be especially tricky since the SSH tunnels
0:  * fool the TCP transport into thinking that they are initially connected.
0:  *  
0:  * @author chirino
0:  */
0: public class SSHTunnelNetworkReconnectTest extends NetworkReconnectTest {
0: 
0: 	ArrayList processes = new ArrayList();
0: 	
0: 	
0: 	protected BrokerService createFirstBroker() throws Exception {
0: 		return BrokerFactory.createBroker(new URI("xbean:org/apache/activemq/network/ssh-reconnect-broker1.xml"));
0: 	}
0: 	
0: 	protected BrokerService createSecondBroker() throws Exception {
0: 		return BrokerFactory.createBroker(new URI("xbean:org/apache/activemq/network/ssh-reconnect-broker2.xml"));
0: 	}
0: 	
0: 	protected void setUp() throws Exception {		
0: 		startProcess("ssh -Nn -L60006:localhost:61616 localhost");
0: 		startProcess("ssh -Nn -L60007:localhost:61617 localhost");		
0: 		super.setUp();
0: 	}
0: 	
0: 	protected void tearDown() throws Exception {		
0: 		super.tearDown();
0: 		for (Iterator iter = processes.iterator(); iter.hasNext();) {
0: 			Process p = (Process) iter.next();
0: 			p.destroy();
0: 		}
0: 	}
0: 
0: 	private void startProcess(String command) throws IOException {
0: 		final Process process = Runtime.getRuntime().exec(command);
0: 		processes.add(process);
0: 		new Thread("stdout: "+command){
0: 			public void run() {
0: 				try {
0: 					InputStream is = process.getInputStream();
0: 					int c;
0: 					while((c=is.read())>=0) {
0: 						System.out.write(c);
0: 					}
0: 				} catch (IOException e) {
0: 				}
0: 			}
0: 		}.start();
0: 		new Thread("stderr: "+command){
0: 			public void run() {
0: 				try {
0: 					InputStream is = process.getErrorStream();
0: 					int c;
0: 					while((c=is.read())>=0) {
0: 						System.err.write(c);
0: 					}
0: 				} catch (IOException e) {
0: 				}
0: 			}
0: 		}.start();
0: 	}
0: }
author:James Strachan
-------------------------------------------------------------------------------
commit:aa1aa58
/////////////////////////////////////////////////////////////////////////
0: import org.apache.commons.logging.Log;
0: import org.apache.commons.logging.LogFactory;
/////////////////////////////////////////////////////////////////////////
0:     private static final transient Log log = LogFactory.getLog(SSHTunnelNetworkReconnectTest.class);
0:     ArrayList processes = new ArrayList();
============================================================================