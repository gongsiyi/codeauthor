1:3125cae: /**
1:3125cae:  * Licensed to the Apache Software Foundation (ASF) under one or more
1:3125cae:  * contributor license agreements.  See the NOTICE file distributed with
1:3125cae:  * this work for additional information regarding copyright ownership.
1:3125cae:  * The ASF licenses this file to You under the Apache License, Version 2.0
1:3125cae:  * (the "License"); you may not use this file except in compliance with
1:3125cae:  * the License.  You may obtain a copy of the License at
1:3125cae:  *
1:3125cae:  *      http://www.apache.org/licenses/LICENSE-2.0
1:3125cae:  *
1:3125cae:  * Unless required by applicable law or agreed to in writing, software
1:3125cae:  * distributed under the License is distributed on an "AS IS" BASIS,
1:3125cae:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:3125cae:  * See the License for the specific language governing permissions and
1:3125cae:  * limitations under the License.
1:3125cae:  */
1:3125cae: package org.apache.activemq.transport.stomp;
1:3125cae: 
1:3125cae: import static org.junit.Assert.assertTrue;
1:3125cae: 
1:3125cae: import java.io.IOException;
1:3125cae: import java.net.Socket;
1:3125cae: import java.util.Arrays;
1:3125cae: import java.util.Collection;
1:3125cae: import java.util.concurrent.TimeUnit;
1:3125cae: 
1:3125cae: import javax.net.ssl.SSLSocketFactory;
1:3125cae: 
1:3125cae: import org.apache.activemq.util.Wait;
1:3125cae: import org.junit.Test;
1:3125cae: import org.junit.runner.RunWith;
1:3125cae: import org.junit.runners.Parameterized;
1:3125cae: import org.junit.runners.Parameterized.Parameters;
1:3125cae: import org.slf4j.Logger;
1:3125cae: import org.slf4j.LoggerFactory;
1:3125cae: 
1:3125cae: /**
1:3125cae:  * Test that connection attempts that don't send the connect performative
1:3125cae:  * get cleaned up by the inactivity monitor.
1:3125cae:  */
1:3125cae: @RunWith(Parameterized.class)
1:3125cae: public class StompConnectTimeoutTest extends StompTestSupport {
1:3125cae: 
1:3125cae:     private static final Logger LOG = LoggerFactory.getLogger(StompConnectTimeoutTest.class);
1:3125cae: 
1:3125cae:     private Socket connection;
1:3125cae:     protected String connectorScheme;
1:3125cae: 
1:3125cae:     @Parameters(name="{0}")
1:3125cae:     public static Collection<Object[]> data() {
1:3125cae:         return Arrays.asList(new Object[][] {
1:3125cae:                 {"stomp"},
1:3125cae:                 {"stomp+ssl"},
1:3125cae:                 {"stomp+nio"},
1:3125cae:                 {"stomp+nio+ssl"}
1:3125cae:             });
1:3125cae:     }
1:3125cae: 
1:3125cae:     public StompConnectTimeoutTest(String connectorScheme) {
1:3125cae:         this.connectorScheme = connectorScheme;
1:3125cae:     }
1:3125cae: 
1:3125cae:     protected String getConnectorScheme() {
1:3125cae:         return connectorScheme;
1:3125cae:     }
1:3125cae: 
1:3125cae:     @Override
1:3125cae:     public void tearDown() throws Exception {
1:3125cae:         if (connection != null) {
1:3125cae:             try {
1:3125cae:                 connection.close();
1:3125cae:             } catch (Throwable e) {}
1:3125cae:             connection = null;
1:3125cae:         }
1:3125cae:         super.tearDown();
1:3125cae:     }
1:3125cae: 
1:3125cae:     @Override
1:3125cae:     public String getAdditionalConfig() {
1:3125cae:         return "?transport.connectAttemptTimeout=1200";
1:3125cae:     }
1:3125cae: 
1:3125cae:     @Test(timeout = 15000)
1:3125cae:     public void testInactivityMonitor() throws Exception {
1:3125cae: 
1:3125cae:         Thread t1 = new Thread() {
1:3125cae: 
1:3125cae:             @Override
1:3125cae:             public void run() {
1:3125cae:                 try {
1:3125cae:                     connection = createSocket();
1:3125cae:                     connection.getOutputStream().write('S');
1:3125cae:                     connection.getOutputStream().flush();
1:3125cae:                 } catch (Exception ex) {
1:3125cae:                     LOG.error("unexpected exception on connect/disconnect", ex);
1:3125cae:                     exceptions.add(ex);
1:3125cae:                 }
1:3125cae:             }
1:3125cae:         };
1:3125cae: 
1:3125cae:         t1.start();
1:3125cae: 
1:3125cae:         assertTrue("one connection", Wait.waitFor(new Wait.Condition() {
1:3125cae:              @Override
1:3125cae:              public boolean isSatisified() throws Exception {
1:3125cae:                  return 1 == brokerService.getTransportConnectorByScheme(getConnectorScheme()).connectionCount();
1:3125cae:              }
1:3125cae:         }, TimeUnit.SECONDS.toMillis(15), TimeUnit.MILLISECONDS.toMillis(250)));
1:3125cae: 
1:3125cae:         // and it should be closed due to inactivity
1:3125cae:         assertTrue("no dangling connections", Wait.waitFor(new Wait.Condition() {
1:3125cae:             @Override
1:3125cae:             public boolean isSatisified() throws Exception {
1:3125cae:                 return 0 == brokerService.getTransportConnectorByScheme(getConnectorScheme()).connectionCount();
1:3125cae:             }
1:3125cae:         }, TimeUnit.SECONDS.toMillis(15), TimeUnit.MILLISECONDS.toMillis(500)));
1:3125cae: 
1:3125cae:         assertTrue("no exceptions", exceptions.isEmpty());
1:3125cae:     }
1:3125cae: 
1:3125cae:     @Override
1:3125cae:     protected boolean isUseTcpConnector() {
1:3125cae:         return connectorScheme.equalsIgnoreCase("stomp");
1:3125cae:     }
1:3125cae: 
1:3125cae:     @Override
1:3125cae:     protected boolean isUseSslConnector() {
1:3125cae:         return connectorScheme.equalsIgnoreCase("stomp+ssl");
1:3125cae:     }
1:3125cae: 
1:3125cae:     @Override
1:3125cae:     protected boolean isUseNioConnector() {
1:3125cae:         return connectorScheme.equalsIgnoreCase("stomp+nio");
1:3125cae:     }
1:3125cae: 
1:3125cae:     @Override
1:3125cae:     protected boolean isUseNioPlusSslConnector() {
1:3125cae:         return connectorScheme.equalsIgnoreCase("stomp+nio+ssl");
1:3125cae:     }
1:3125cae: 
1:3125cae:     @Override
1:3125cae:     protected Socket createSocket() throws IOException {
1:3125cae: 
1:3125cae:         boolean useSSL = false;
1:3125cae:         int port = 0;
1:3125cae: 
1:3125cae:         switch (connectorScheme) {
1:3125cae:             case "stomp":
1:3125cae:                 port = this.port;
1:3125cae:                 break;
1:3125cae:             case "stomp+ssl":
1:3125cae:                 useSSL = true;
1:3125cae:                 port = this.sslPort;
1:3125cae:                 break;
1:3125cae:             case "stomp+nio":
1:3125cae:                 port = this.nioPort;
1:3125cae:                 break;
1:3125cae:             case "stomp+nio+ssl":
1:3125cae:                 useSSL = true;
1:3125cae:                 port = this.nioSslPort;
1:3125cae:                 break;
1:3125cae:             default:
1:3125cae:                 throw new IOException("Invalid STOMP connector scheme passed to test.");
1:3125cae:         }
1:3125cae: 
1:3125cae:         if (useSSL) {
1:3125cae:             return SSLSocketFactory.getDefault().createSocket("localhost", port);
1:3125cae:         } else {
1:3125cae:             return new Socket("localhost", port);
1:3125cae:         }
1:3125cae:     }
1:3125cae: }
============================================================================
author:Timothy Bish
-------------------------------------------------------------------------------
commit:3125cae
/////////////////////////////////////////////////////////////////////////
1: /**
1:  * Licensed to the Apache Software Foundation (ASF) under one or more
1:  * contributor license agreements.  See the NOTICE file distributed with
1:  * this work for additional information regarding copyright ownership.
1:  * The ASF licenses this file to You under the Apache License, Version 2.0
1:  * (the "License"); you may not use this file except in compliance with
1:  * the License.  You may obtain a copy of the License at
1:  *
1:  *      http://www.apache.org/licenses/LICENSE-2.0
1:  *
1:  * Unless required by applicable law or agreed to in writing, software
1:  * distributed under the License is distributed on an "AS IS" BASIS,
1:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:  * See the License for the specific language governing permissions and
1:  * limitations under the License.
1:  */
1: package org.apache.activemq.transport.stomp;
1: 
1: import static org.junit.Assert.assertTrue;
1: 
1: import java.io.IOException;
1: import java.net.Socket;
1: import java.util.Arrays;
1: import java.util.Collection;
1: import java.util.concurrent.TimeUnit;
1: 
1: import javax.net.ssl.SSLSocketFactory;
1: 
1: import org.apache.activemq.util.Wait;
1: import org.junit.Test;
1: import org.junit.runner.RunWith;
1: import org.junit.runners.Parameterized;
1: import org.junit.runners.Parameterized.Parameters;
1: import org.slf4j.Logger;
1: import org.slf4j.LoggerFactory;
1: 
1: /**
1:  * Test that connection attempts that don't send the connect performative
1:  * get cleaned up by the inactivity monitor.
1:  */
1: @RunWith(Parameterized.class)
1: public class StompConnectTimeoutTest extends StompTestSupport {
1: 
1:     private static final Logger LOG = LoggerFactory.getLogger(StompConnectTimeoutTest.class);
1: 
1:     private Socket connection;
1:     protected String connectorScheme;
1: 
1:     @Parameters(name="{0}")
1:     public static Collection<Object[]> data() {
1:         return Arrays.asList(new Object[][] {
1:                 {"stomp"},
1:                 {"stomp+ssl"},
1:                 {"stomp+nio"},
1:                 {"stomp+nio+ssl"}
1:             });
1:     }
1: 
1:     public StompConnectTimeoutTest(String connectorScheme) {
1:         this.connectorScheme = connectorScheme;
1:     }
1: 
1:     protected String getConnectorScheme() {
1:         return connectorScheme;
1:     }
1: 
1:     @Override
1:     public void tearDown() throws Exception {
1:         if (connection != null) {
1:             try {
1:                 connection.close();
1:             } catch (Throwable e) {}
1:             connection = null;
1:         }
1:         super.tearDown();
1:     }
1: 
1:     @Override
1:     public String getAdditionalConfig() {
1:         return "?transport.connectAttemptTimeout=1200";
1:     }
1: 
1:     @Test(timeout = 15000)
1:     public void testInactivityMonitor() throws Exception {
1: 
1:         Thread t1 = new Thread() {
1: 
1:             @Override
1:             public void run() {
1:                 try {
1:                     connection = createSocket();
1:                     connection.getOutputStream().write('S');
1:                     connection.getOutputStream().flush();
1:                 } catch (Exception ex) {
1:                     LOG.error("unexpected exception on connect/disconnect", ex);
1:                     exceptions.add(ex);
1:                 }
1:             }
1:         };
1: 
1:         t1.start();
1: 
1:         assertTrue("one connection", Wait.waitFor(new Wait.Condition() {
1:              @Override
1:              public boolean isSatisified() throws Exception {
1:                  return 1 == brokerService.getTransportConnectorByScheme(getConnectorScheme()).connectionCount();
1:              }
1:         }, TimeUnit.SECONDS.toMillis(15), TimeUnit.MILLISECONDS.toMillis(250)));
1: 
1:         // and it should be closed due to inactivity
1:         assertTrue("no dangling connections", Wait.waitFor(new Wait.Condition() {
1:             @Override
1:             public boolean isSatisified() throws Exception {
1:                 return 0 == brokerService.getTransportConnectorByScheme(getConnectorScheme()).connectionCount();
1:             }
1:         }, TimeUnit.SECONDS.toMillis(15), TimeUnit.MILLISECONDS.toMillis(500)));
1: 
1:         assertTrue("no exceptions", exceptions.isEmpty());
1:     }
1: 
1:     @Override
1:     protected boolean isUseTcpConnector() {
1:         return connectorScheme.equalsIgnoreCase("stomp");
1:     }
1: 
1:     @Override
1:     protected boolean isUseSslConnector() {
1:         return connectorScheme.equalsIgnoreCase("stomp+ssl");
1:     }
1: 
1:     @Override
1:     protected boolean isUseNioConnector() {
1:         return connectorScheme.equalsIgnoreCase("stomp+nio");
1:     }
1: 
1:     @Override
1:     protected boolean isUseNioPlusSslConnector() {
1:         return connectorScheme.equalsIgnoreCase("stomp+nio+ssl");
1:     }
1: 
1:     @Override
1:     protected Socket createSocket() throws IOException {
1: 
1:         boolean useSSL = false;
1:         int port = 0;
1: 
1:         switch (connectorScheme) {
1:             case "stomp":
1:                 port = this.port;
1:                 break;
1:             case "stomp+ssl":
1:                 useSSL = true;
1:                 port = this.sslPort;
1:                 break;
1:             case "stomp+nio":
1:                 port = this.nioPort;
1:                 break;
1:             case "stomp+nio+ssl":
1:                 useSSL = true;
1:                 port = this.nioSslPort;
1:                 break;
1:             default:
1:                 throw new IOException("Invalid STOMP connector scheme passed to test.");
1:         }
1: 
1:         if (useSSL) {
1:             return SSLSocketFactory.getDefault().createSocket("localhost", port);
1:         } else {
1:             return new Socket("localhost", port);
1:         }
1:     }
1: }
============================================================================