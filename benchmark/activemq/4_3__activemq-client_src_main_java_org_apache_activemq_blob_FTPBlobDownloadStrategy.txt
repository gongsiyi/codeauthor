1:b08ae50: /**
1:b08ae50:  * Licensed to the Apache Software Foundation (ASF) under one or more
1:b08ae50:  * contributor license agreements.  See the NOTICE file distributed with
1:b08ae50:  * this work for additional information regarding copyright ownership.
1:b08ae50:  * The ASF licenses this file to You under the Apache License, Version 2.0
1:b08ae50:  * (the "License"); you may not use this file except in compliance with
1:b08ae50:  * the License.  You may obtain a copy of the License at
1:b08ae50:  *
1:b08ae50:  *      http://www.apache.org/licenses/LICENSE-2.0
1:b08ae50:  *
1:b08ae50:  * Unless required by applicable law or agreed to in writing, software
1:b08ae50:  * distributed under the License is distributed on an "AS IS" BASIS,
1:b08ae50:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:b08ae50:  * See the License for the specific language governing permissions and
1:b08ae50:  * limitations under the License.
1:b08ae50:  */
1:b08ae50: package org.apache.activemq.blob;
10:b08ae50: 
1:af159dd: import java.io.FilterInputStream;
1:b08ae50: import java.io.IOException;
1:b08ae50: import java.io.InputStream;
1:af159dd: import java.net.MalformedURLException;
1:a438496: 
1:b08ae50: import javax.jms.JMSException;
1:a438496: 
1:b08ae50: import org.apache.activemq.command.ActiveMQBlobMessage;
1:b08ae50: import org.apache.commons.net.ftp.FTPClient;
1:b08ae50: 
1:b08ae50: /**
1:b08ae50:  * A FTP implementation for {@link BlobDownloadStrategy}.
1:b08ae50:  */
1:af159dd: public class FTPBlobDownloadStrategy extends FTPStrategy implements BlobDownloadStrategy {
1:af159dd: 
1:af159dd:     public FTPBlobDownloadStrategy(BlobTransferPolicy transferPolicy) throws MalformedURLException {
1:af159dd:         super(transferPolicy);
1:af159dd:     }
1:a438496: 
1:b08ae50:     public InputStream getInputStream(ActiveMQBlobMessage message) throws IOException, JMSException {
1:af159dd:         url = message.getURL();
1:af159dd:         final FTPClient ftp = createFTP();
1:b08ae50:         String path = url.getPath();
1:b08ae50:         String workingDir = path.substring(0, path.lastIndexOf("/"));
1:af159dd:         String file = path.substring(path.lastIndexOf("/") + 1);
1:b08ae50:         ftp.changeWorkingDirectory(workingDir);
1:b08ae50:         ftp.setFileType(FTPClient.BINARY_FILE_TYPE);
1:a438496: 
1:a438496:         InputStream input = new FilterInputStream(ftp.retrieveFileStream(file)) {
1:a438496: 
1:a438496:             public void close() throws IOException {
1:a438496:                 in.close();
2:a438496:                 ftp.quit();
1:a438496:                 ftp.disconnect();
1:a438496:             }
1:a438496:         };
1:a438496: 
1:b08ae50:         return input;
3:b08ae50:     }
1:b08ae50: 
1:af159dd:     public void deleteFile(ActiveMQBlobMessage message) throws IOException, JMSException {
1:af159dd:         url = message.getURL();
1:af159dd:         final FTPClient ftp = createFTP();
1:af159dd: 
1:af159dd:         String path = url.getPath();
1:af159dd:         try {
1:af159dd:             if (!ftp.deleteFile(path)) {
1:af159dd:                 throw new JMSException("Delete file failed: " + ftp.getReplyString());
1:af159dd:             }
1:af159dd:         } finally {
1:af159dd:             ftp.quit();
1:af159dd:             ftp.disconnect();
1:b08ae50:         }
1:af159dd: 
1:b08ae50:     }
1:a438496: 
1:b08ae50: }
============================================================================
author:Hiram R. Chirino
-------------------------------------------------------------------------------
commit:9a8f6e4
author:Bosanac Dejan
-------------------------------------------------------------------------------
commit:af159dd
/////////////////////////////////////////////////////////////////////////
1: import java.io.FilterInputStream;
1: import java.net.MalformedURLException;
/////////////////////////////////////////////////////////////////////////
1: public class FTPBlobDownloadStrategy extends FTPStrategy implements BlobDownloadStrategy {
1: 
1:     public FTPBlobDownloadStrategy(BlobTransferPolicy transferPolicy) throws MalformedURLException {
1:         super(transferPolicy);
1:     }
1:         url = message.getURL();
1:         final FTPClient ftp = createFTP();
1:         String file = path.substring(path.lastIndexOf("/") + 1);
/////////////////////////////////////////////////////////////////////////
1:     public void deleteFile(ActiveMQBlobMessage message) throws IOException, JMSException {
1:         url = message.getURL();
1:         final FTPClient ftp = createFTP();
1: 
1:         String path = url.getPath();
1:         try {
1:             if (!ftp.deleteFile(path)) {
1:                 throw new JMSException("Delete file failed: " + ftp.getReplyString());
1:             }
1:         } finally {
1:             ftp.quit();
1:             ftp.disconnect();
1: 
author:Timothy A. Bish
-------------------------------------------------------------------------------
commit:a438496
/////////////////////////////////////////////////////////////////////////
0: import java.io.FilterInputStream;
/////////////////////////////////////////////////////////////////////////
1: 
0:         final FTPClient ftp = new FTPClient();
0:             ftp.connect(connectUrl, port);
0:             throw new JMSException("Problem connecting the FTP-server");
1: 
1:             ftp.quit();
1: 
1: 
1:         InputStream input = new FilterInputStream(ftp.retrieveFileStream(file)) {
1: 
1:             public void close() throws IOException {
1:                 in.close();
1:                 ftp.quit();
1:                 ftp.disconnect();
1:             }
1:         };
1: 
1: 
author:Robert Davies
-------------------------------------------------------------------------------
commit:b08ae50
/////////////////////////////////////////////////////////////////////////
1: /**
1:  * Licensed to the Apache Software Foundation (ASF) under one or more
1:  * contributor license agreements.  See the NOTICE file distributed with
1:  * this work for additional information regarding copyright ownership.
1:  * The ASF licenses this file to You under the Apache License, Version 2.0
1:  * (the "License"); you may not use this file except in compliance with
1:  * the License.  You may obtain a copy of the License at
1:  *
1:  *      http://www.apache.org/licenses/LICENSE-2.0
1:  *
1:  * Unless required by applicable law or agreed to in writing, software
1:  * distributed under the License is distributed on an "AS IS" BASIS,
1:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:  * See the License for the specific language governing permissions and
1:  * limitations under the License.
1:  */
1: package org.apache.activemq.blob;
1: 
1: import java.io.IOException;
1: import java.io.InputStream;
0: import java.net.ConnectException;
0: import java.net.URL;
1: 
1: import javax.jms.JMSException;
1: 
1: import org.apache.activemq.command.ActiveMQBlobMessage;
1: import org.apache.commons.net.ftp.FTPClient;
1: 
1: /**
1:  * A FTP implementation for {@link BlobDownloadStrategy}.
1:  */
0: public class FTPBlobDownloadStrategy implements BlobDownloadStrategy {
0:     private String ftpUser;
0:     private String ftpPass;
1: 
1:     public InputStream getInputStream(ActiveMQBlobMessage message) throws IOException, JMSException {
0:         URL url = message.getURL();
1:         
0:         setUserInformation(url.getUserInfo());
0:         String connectUrl = url.getHost();
0:         int port = url.getPort() < 1 ? 21 : url.getPort();
1: 
0:         FTPClient ftp = new FTPClient();
0:         try {
0:         	ftp.connect(connectUrl, port);
0:         } catch(ConnectException e) {
0:         	throw new JMSException("Problem connecting the FTP-server");
1:         }
1:         
0:         if(!ftp.login(ftpUser, ftpPass)) {
0:         	ftp.quit();
0:             ftp.disconnect();
0:             throw new JMSException("Cant Authentificate to FTP-Server");
1:         }
1:         String path = url.getPath();
1:         String workingDir = path.substring(0, path.lastIndexOf("/"));
0:         String file = path.substring(path.lastIndexOf("/")+1);
1:         
1:         ftp.changeWorkingDirectory(workingDir);
1:         ftp.setFileType(FTPClient.BINARY_FILE_TYPE);
0:         InputStream input = ftp.retrieveFileStream(file);
0:         ftp.quit();
0:         ftp.disconnect();
1:         
1:         return input;
1:     }
1:     
0:     private void setUserInformation(String userInfo) {
0:         if(userInfo != null) {
0:             String[] userPass = userInfo.split(":");
0:             if(userPass.length > 0) this.ftpUser = userPass[0];
0:             if(userPass.length > 1) this.ftpPass = userPass[1];
0:         } else {
0:             this.ftpUser = "anonymous";
0:             this.ftpPass = "anonymous";
1:         }
1:     }
1: 
1: }
============================================================================