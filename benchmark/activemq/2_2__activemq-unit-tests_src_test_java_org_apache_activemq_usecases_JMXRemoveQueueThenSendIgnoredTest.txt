1:b5a1916: /**
1:b5a1916:  * Licensed to the Apache Software Foundation (ASF) under one or more
1:b5a1916:  * contributor license agreements.  See the NOTICE file distributed with
1:b5a1916:  * this work for additional information regarding copyright ownership.
1:b5a1916:  * The ASF licenses this file to You under the Apache License, Version 2.0
1:b5a1916:  * (the "License"); you may not use this file except in compliance with
1:b5a1916:  * the License.  You may obtain a copy of the License at
1:b5a1916:  *
1:b5a1916:  *      http://www.apache.org/licenses/LICENSE-2.0
1:b5a1916:  *
1:b5a1916:  * Unless required by applicable law or agreed to in writing, software
1:b5a1916:  * distributed under the License is distributed on an "AS IS" BASIS,
1:b5a1916:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:b5a1916:  * See the License for the specific language governing permissions and
1:b5a1916:  * limitations under the License.
1:b5a1916:  */
1:b5a1916: package org.apache.activemq.usecases;
2:b5a1916: 
1:b5a1916: import static org.junit.Assert.assertEquals;
1:b5a1916: 
1:b5a1916: import javax.jms.DeliveryMode;
1:b5a1916: import javax.jms.JMSException;
1:b5a1916: import javax.jms.Message;
1:b5a1916: import javax.jms.MessageConsumer;
1:b5a1916: import javax.jms.MessageProducer;
1:b5a1916: import javax.jms.Queue;
1:b5a1916: import javax.jms.QueueConnection;
1:b5a1916: import javax.jms.QueueSession;
1:b5a1916: import javax.jms.Session;
1:b5a1916: import javax.jms.TextMessage;
1:b5a1916: import javax.management.ObjectName;
1:b5a1916: 
1:b5a1916: import org.apache.activemq.ActiveMQConnectionFactory;
1:b5a1916: import org.apache.activemq.broker.BrokerService;
1:5345d16: import org.apache.activemq.broker.jmx.QueueViewMBean;
1:b5a1916: import org.junit.After;
1:b5a1916: import org.junit.Before;
1:b5a1916: import org.junit.Test;
1:b5a1916: import org.slf4j.Logger;
1:b5a1916: import org.slf4j.LoggerFactory;
1:b5a1916: 
1:b5a1916: public class JMXRemoveQueueThenSendIgnoredTest {
1:b5a1916: 
1:b5a1916:     private static final Logger LOG = LoggerFactory.getLogger(JMXRemoveQueueThenSendIgnoredTest.class);
1:5345d16:     private static final String domain = "org.apache.activemq";
1:b5a1916: 
1:b5a1916:     private BrokerService brokerService;
1:b5a1916:     private MessageProducer producer;
1:b5a1916:     private QueueSession session;
1:b5a1916:     private QueueConnection connection;
1:b5a1916:     private Queue queue;
1:b5a1916:     private int count = 1;
1:b5a1916: 
1:b5a1916:     @Before
1:b5a1916:     public void setUp() throws Exception  {
1:b5a1916:         brokerService = new BrokerService();
1:b5a1916:         brokerService.setBrokerName("dev");
1:b5a1916:         brokerService.setPersistent(false);
1:b5a1916:         brokerService.setUseJmx(true);
1:b5a1916:         brokerService.addConnector("tcp://localhost:0");
1:b5a1916:         brokerService.start();
1:b5a1916: 
1:b5a1916:         final String brokerUri = brokerService.getTransportConnectors().get(0).getPublishableConnectString();
1:b5a1916: 
1:b5a1916:         ActiveMQConnectionFactory activeMQConnectionFactory = new ActiveMQConnectionFactory(brokerUri);
1:b5a1916:         connection = activeMQConnectionFactory.createQueueConnection();
1:b5a1916:         session = connection.createQueueSession(true, Session.AUTO_ACKNOWLEDGE/*SESSION_TRANSACTED*/);
1:b5a1916:         queue = session.createQueue("myqueue");
1:b5a1916:         producer = session.createProducer(queue);
1:b5a1916:         producer.setDeliveryMode(DeliveryMode.PERSISTENT);
1:b5a1916: 
1:b5a1916:         connection.start();
1:b5a1916:     }
1:b5a1916: 
1:b5a1916:     @Test
1:b5a1916:     public void testRemoveQueueAndProduceAfterNewConsumerAdded() throws Exception {
1:b5a1916:         MessageConsumer firstConsumer = registerConsumer();
1:b5a1916:         produceMessage();
1:b5a1916:         Message message = firstConsumer.receive(5000);
1:6110e16:         LOG.info("Received message " + message);
1:b5a1916: 
1:b5a1916:         assertEquals(1, numberOfMessages());
1:b5a1916:         firstConsumer.close();
1:b5a1916:         session.commit();
1:b5a1916:         Thread.sleep(1000);
1:b5a1916: 
1:b5a1916:         removeQueue();
1:b5a1916:         Thread.sleep(1000);
1:b5a1916: 
1:b5a1916:         MessageConsumer secondConsumer = registerConsumer();
1:b5a1916:         produceMessage();
1:b5a1916:         message = secondConsumer.receive(5000);
3:b5a1916:         LOG.debug("Received message " + message);
1:b5a1916: 
1:b5a1916:         assertEquals(1, numberOfMessages());
1:b5a1916:         secondConsumer.close();
1:b5a1916:     }
1:b5a1916: 
1:b5a1916:     @Test
1:b5a1916:     public void testRemoveQueueAndProduceBeforeNewConsumerAdded() throws Exception {
1:b5a1916:         MessageConsumer firstConsumer = registerConsumer();
1:b5a1916:         produceMessage();
1:b5a1916:         Message message = firstConsumer.receive(5000);
1:6110e16:         LOG.info("Received message " + message);
1:b5a1916: 
1:b5a1916:         assertEquals(1, numberOfMessages());
1:b5a1916:         firstConsumer.close();
1:b5a1916:         session.commit();
1:b5a1916:         Thread.sleep(1000);
1:b5a1916: 
1:b5a1916:         removeQueue();
1:b5a1916:         Thread.sleep(1000);
1:b5a1916: 
1:b5a1916:         produceMessage();
1:b5a1916:         MessageConsumer secondConsumer = registerConsumer();
1:b5a1916:         message = secondConsumer.receive(5000);
1:b5a1916:         LOG.debug("Received message " + message);
1:b5a1916: 
1:b5a1916:         assertEquals(1, numberOfMessages());
1:b5a1916:         secondConsumer.close();
1:b5a1916:     }
1:b5a1916: 
1:b5a1916:     private MessageConsumer registerConsumer() throws JMSException {
1:b5a1916:         MessageConsumer consumer = session.createConsumer(queue);
1:b5a1916:         return consumer;
1:b5a1916:     }
1:b5a1916: 
1:b5a1916:     private int numberOfMessages() throws Exception {
1:5345d16:         ObjectName queueViewMBeanName = new ObjectName(
1:8e98968:             domain + ":destinationType=Queue,destinationName=myqueue,type=Broker,brokerName=dev");
1:6110e16:         QueueViewMBean queue = (QueueViewMBean)
1:6110e16:                 brokerService.getManagementContext().newProxyInstance(queueViewMBeanName, QueueViewMBean.class, true);
1:5345d16:         long size = queue.getQueueSize();
1:5345d16:         return (int)size;
1:b5a1916:     }
1:b5a1916: 
1:b5a1916:     private void removeQueue() throws Exception {
1:b5a1916:         LOG.debug("Removing Destination: myqueue");
1:b5a1916:         brokerService.getAdminView().removeQueue("myqueue");
1:b5a1916:     }
1:b5a1916: 
1:b5a1916:     private void produceMessage() throws JMSException {
1:b5a1916:         TextMessage textMessage = session.createTextMessage();
1:b5a1916:         textMessage.setText("Sending message: " + count++);
1:b5a1916:         LOG.debug("Sending message: " + textMessage);
1:b5a1916:         producer.send(textMessage);
1:b5a1916:         session.commit();
1:b5a1916:     }
1:b5a1916: 
1:b5a1916:     @After
1:b5a1916:     public void tearDown() throws Exception {
1:b5a1916:         connection.close();
1:b5a1916:         brokerService.stop();
1:b5a1916:     }
1:b5a1916: }
============================================================================
author:Timothy A. Bish
-------------------------------------------------------------------------------
commit:ef24cc9
commit:8e98968
/////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////
1:             domain + ":destinationType=Queue,destinationName=myqueue,type=Broker,brokerName=dev");
commit:5345d16
/////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////
0: import javax.management.MBeanServerInvocationHandler;
/////////////////////////////////////////////////////////////////////////
1: import org.apache.activemq.broker.jmx.QueueViewMBean;
/////////////////////////////////////////////////////////////////////////
1:     private static final String domain = "org.apache.activemq";
/////////////////////////////////////////////////////////////////////////
1:         ObjectName queueViewMBeanName = new ObjectName(
0:             domain + ":Type=Queue,Destination=myqueue,BrokerName=dev");
0:         QueueViewMBean queue = (QueueViewMBean)MBeanServerInvocationHandler.newProxyInstance(
0:                 mbeanServerConnection, queueViewMBeanName, QueueViewMBean.class, true);
1:         long size = queue.getQueueSize();
1:         return (int)size;
commit:b5a1916
/////////////////////////////////////////////////////////////////////////
1: /**
1:  * Licensed to the Apache Software Foundation (ASF) under one or more
1:  * contributor license agreements.  See the NOTICE file distributed with
1:  * this work for additional information regarding copyright ownership.
1:  * The ASF licenses this file to You under the Apache License, Version 2.0
1:  * (the "License"); you may not use this file except in compliance with
1:  * the License.  You may obtain a copy of the License at
1:  *
1:  *      http://www.apache.org/licenses/LICENSE-2.0
1:  *
1:  * Unless required by applicable law or agreed to in writing, software
1:  * distributed under the License is distributed on an "AS IS" BASIS,
1:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:  * See the License for the specific language governing permissions and
1:  * limitations under the License.
1:  */
1: package org.apache.activemq.usecases;
1: 
1: import static org.junit.Assert.assertEquals;
1: 
0: import java.util.List;
1: 
1: import javax.jms.DeliveryMode;
1: import javax.jms.JMSException;
1: import javax.jms.Message;
1: import javax.jms.MessageConsumer;
1: import javax.jms.MessageProducer;
1: import javax.jms.Queue;
1: import javax.jms.QueueConnection;
1: import javax.jms.QueueSession;
1: import javax.jms.Session;
1: import javax.jms.TextMessage;
0: import javax.management.MBeanServerConnection;
1: import javax.management.ObjectName;
0: import javax.management.remote.JMXConnector;
0: import javax.management.remote.JMXConnectorFactory;
0: import javax.management.remote.JMXServiceURL;
1: 
1: import org.apache.activemq.ActiveMQConnectionFactory;
1: import org.apache.activemq.broker.BrokerService;
1: import org.junit.After;
1: import org.junit.Before;
1: import org.junit.Test;
1: import org.slf4j.Logger;
1: import org.slf4j.LoggerFactory;
1: 
1: public class JMXRemoveQueueThenSendIgnoredTest {
1: 
1:     private static final Logger LOG = LoggerFactory.getLogger(JMXRemoveQueueThenSendIgnoredTest.class);
1: 
1:     private BrokerService brokerService;
1:     private MessageProducer producer;
1:     private QueueSession session;
1:     private QueueConnection connection;
1:     private Queue queue;
1:     private int count = 1;
1: 
1:     @Before
1:     public void setUp() throws Exception  {
1:         brokerService = new BrokerService();
1:         brokerService.setBrokerName("dev");
1:         brokerService.setPersistent(false);
1:         brokerService.setUseJmx(true);
1:         brokerService.addConnector("tcp://localhost:0");
1:         brokerService.start();
1: 
1:         final String brokerUri = brokerService.getTransportConnectors().get(0).getPublishableConnectString();
1: 
1:         ActiveMQConnectionFactory activeMQConnectionFactory = new ActiveMQConnectionFactory(brokerUri);
1:         connection = activeMQConnectionFactory.createQueueConnection();
1:         session = connection.createQueueSession(true, Session.AUTO_ACKNOWLEDGE/*SESSION_TRANSACTED*/);
1:         queue = session.createQueue("myqueue");
1:         producer = session.createProducer(queue);
1:         producer.setDeliveryMode(DeliveryMode.PERSISTENT);
1: 
1:         connection.start();
1:     }
1: 
1:     @Test
1:     public void testRemoveQueueAndProduceAfterNewConsumerAdded() throws Exception {
1:         MessageConsumer firstConsumer = registerConsumer();
1:         produceMessage();
1:         Message message = firstConsumer.receive(5000);
1:         LOG.debug("Received message " + message);
1: 
1:         assertEquals(1, numberOfMessages());
1:         firstConsumer.close();
1:         session.commit();
1:         Thread.sleep(1000);
1: 
1:         removeQueue();
1:         Thread.sleep(1000);
1: 
1:         MessageConsumer secondConsumer = registerConsumer();
1:         produceMessage();
1:         message = secondConsumer.receive(5000);
1:         LOG.debug("Received message " + message);
1: 
1:         assertEquals(1, numberOfMessages());
1:         secondConsumer.close();
1:     }
1: 
1:     @Test
1:     public void testRemoveQueueAndProduceBeforeNewConsumerAdded() throws Exception {
1:         MessageConsumer firstConsumer = registerConsumer();
1:         produceMessage();
1:         Message message = firstConsumer.receive(5000);
1:         LOG.debug("Received message " + message);
1: 
1:         assertEquals(1, numberOfMessages());
1:         firstConsumer.close();
1:         session.commit();
1:         Thread.sleep(1000);
1: 
1:         removeQueue();
1:         Thread.sleep(1000);
1: 
1:         produceMessage();
1:         MessageConsumer secondConsumer = registerConsumer();
1:         message = secondConsumer.receive(5000);
1:         LOG.debug("Received message " + message);
1: 
1:         assertEquals(1, numberOfMessages());
1:         secondConsumer.close();
1:     }
1: 
1:     private MessageConsumer registerConsumer() throws JMSException {
1:         MessageConsumer consumer = session.createConsumer(queue);
1:         return consumer;
1:     }
1: 
1:     private int numberOfMessages() throws Exception {
0:         JMXConnector jmxConnector = JMXConnectorFactory.connect(new JMXServiceURL("service:jmx:rmi:///jndi/rmi://localhost:1099/jmxrmi"));
0:         MBeanServerConnection mbeanServerConnection = jmxConnector.getMBeanServerConnection();
0:         String beanId = "org.apache.activemq:BrokerName=dev,Type=Queue,Destination=myqueue";
0:         List<?> object = (List<?>) mbeanServerConnection.invoke(new ObjectName(beanId), "browseMessages", null, null);
0:         jmxConnector.close();
0:         return object.size();
1:     }
1: 
1:     private void removeQueue() throws Exception {
1:         LOG.debug("Removing Destination: myqueue");
1:         brokerService.getAdminView().removeQueue("myqueue");
1:     }
1: 
1:     private void produceMessage() throws JMSException {
1:         TextMessage textMessage = session.createTextMessage();
1:         textMessage.setText("Sending message: " + count++);
1:         LOG.debug("Sending message: " + textMessage);
1:         producer.send(textMessage);
1:         session.commit();
1:     }
1: 
1:     @After
1:     public void tearDown() throws Exception {
1:         connection.close();
1:         brokerService.stop();
1:     }
1: }
author:Gary Tully
-------------------------------------------------------------------------------
commit:6110e16
/////////////////////////////////////////////////////////////////////////
1:         LOG.info("Received message " + message);
/////////////////////////////////////////////////////////////////////////
1:         LOG.info("Received message " + message);
/////////////////////////////////////////////////////////////////////////
1:         QueueViewMBean queue = (QueueViewMBean)
1:                 brokerService.getManagementContext().newProxyInstance(queueViewMBeanName, QueueViewMBean.class, true);
============================================================================