1:da67a38: /**
1:57b4941:  * Licensed to the Apache Software Foundation (ASF) under one or more
1:57b4941:  * contributor license agreements.  See the NOTICE file distributed with
1:57b4941:  * this work for additional information regarding copyright ownership.
1:57b4941:  * The ASF licenses this file to You under the Apache License, Version 2.0
1:57b4941:  * (the "License"); you may not use this file except in compliance with
1:57b4941:  * the License.  You may obtain a copy of the License at
6:da67a38:  *
1:230a86c:  *      http://www.apache.org/licenses/LICENSE-2.0
1:0bbc0ac:  *
1:da67a38:  * Unless required by applicable law or agreed to in writing, software
1:da67a38:  * distributed under the License is distributed on an "AS IS" BASIS,
1:da67a38:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:da67a38:  * See the License for the specific language governing permissions and
1:da67a38:  * limitations under the License.
1:da67a38:  */
1:da67a38: package org.apache.activemq.broker.region.virtual;
9:da67a38: 
1:f55edcf: import java.util.regex.Matcher;
1:f55edcf: import java.util.regex.Pattern;
1:f55edcf: 
1:d17eceb: import org.apache.activemq.broker.Broker;
1:d17eceb: import org.apache.activemq.broker.ConnectionContext;
1:da67a38: import org.apache.activemq.broker.region.Destination;
1:da67a38: import org.apache.activemq.command.ActiveMQDestination;
1:d17eceb: import org.apache.activemq.command.ActiveMQQueue;
1:da67a38: import org.apache.activemq.command.ActiveMQTopic;
1:d17eceb: import org.apache.activemq.filter.DestinationFilter;
1:16f2d75: 
1:da67a38: /**
1:da67a38:  * Creates <a href="http://activemq.org/site/virtual-destinations.html">Virtual
1:da67a38:  * Topics</a> using a prefix and postfix. The virtual destination creates a
1:da67a38:  * wildcard that is then used to look up all active queue subscriptions which
1:da67a38:  * match.
1:f55edcf:  *
1:da67a38:  * @org.apache.xbean.XBean
1:da67a38:  */
1:da67a38: public class VirtualTopic implements VirtualDestination {
1:da67a38: 
1:da67a38:     private String prefix = "Consumer.*.";
1:da67a38:     private String postfix = "";
1:da67a38:     private String name = ">";
1:027d2e7:     private boolean selectorAware = false;
1:3c3b5bb:     private boolean local = false;
1:340728f:     private boolean concurrentSend = false;
1:ffdaeb2:     private boolean transactedSend = false;
1:6da08b2:     private boolean dropOnResourceLimit = false;
1:573b366:     private boolean setOriginalDestination = true;
1:da67a38: 
1:f55edcf:     @Override
1:da67a38:     public ActiveMQDestination getVirtualDestination() {
1:da67a38:         return new ActiveMQTopic(getName());
2:da67a38:     }
1:027d2e7: 
1:f55edcf:     @Override
1:da67a38:     public Destination intercept(Destination destination) {
1:340728f:         return selectorAware ? new SelectorAwareVirtualTopicInterceptor(destination, this) :
1:340728f:                 new VirtualTopicInterceptor(destination, this);
1:da67a38:     }
1:3c3b5bb: 
1:f55edcf:     @Override
1:f55edcf:     public ActiveMQDestination getMappedDestinations() {
1:f55edcf:         return new ActiveMQQueue(prefix + name + postfix);
1:f55edcf:     }
1:f55edcf: 
1:f55edcf:     @Override
1:f55edcf:     public Destination interceptMappedDestination(Destination destination) {
1:f55edcf:         // do a reverse map from destination to get actual virtual destination
1:f55edcf:         final String physicalName = destination.getActiveMQDestination().getPhysicalName();
1:f55edcf:         final Pattern pattern = Pattern.compile(getRegex(prefix) + "(.*)" + getRegex(postfix));
1:f55edcf:         final Matcher matcher = pattern.matcher(physicalName);
1:f55edcf:         if (matcher.matches()) {
1:f55edcf:             final String virtualName = matcher.group(1);
1:f55edcf:             return new MappedQueueFilter(new ActiveMQTopic(virtualName), destination);
1:f55edcf:         }
1:f55edcf:         return destination;
1:f55edcf:     }
1:f55edcf: 
1:f55edcf:     private String getRegex(String part) {
1:f55edcf:         StringBuilder builder = new StringBuilder();
1:f55edcf:         for (char c : part.toCharArray()) {
1:f55edcf:             switch (c) {
1:f55edcf:                 case '.':
1:f55edcf:                     builder.append("\\.");
1:f55edcf:                     break;
1:f55edcf:                 case '*':
1:f55edcf:                     builder.append("[^\\.]*");
1:f55edcf:                     break;
1:f55edcf:                 default:
1:f55edcf:                     builder.append(c);
1:f55edcf:             }
1:f55edcf:         }
1:f55edcf:         return builder.toString();
1:f55edcf:     }
1:f55edcf: 
1:f55edcf:     @Override
1:d17eceb:     public void create(Broker broker, ConnectionContext context, ActiveMQDestination destination) throws Exception {
1:05c3112:         if (destination.isQueue() && destination.isPattern()) {
1:d17eceb:             DestinationFilter filter = DestinationFilter.parseFilter(new ActiveMQQueue(prefix + DestinationFilter.ANY_DESCENDENT));
1:d17eceb:             if (filter.matches(destination)) {
1:d17eceb:                 broker.addDestination(context, destination, false);
1:05c3112: 
1:d17eceb:             }
1:d17eceb:         }
1:d17eceb:     }
1:d17eceb: 
1:f55edcf:     @Override
1:f55edcf:     public void remove(Destination destination) {
1:16f2d75:     }
1:f55edcf: 
1:da67a38:     // Properties
2:da67a38:     // -------------------------------------------------------------------------
1:16f2d75: 
1:da67a38:     public String getPostfix() {
1:da67a38:         return postfix;
1:da67a38:     }
1:da67a38: 
1:da67a38:     /**
1:da67a38:      * Sets any postix used to identify the queue consumers
1:da67a38:      */
1:da67a38:     public void setPostfix(String postfix) {
1:da67a38:         this.postfix = postfix;
1:da67a38:     }
1:da67a38: 
1:da67a38:     public String getPrefix() {
1:da67a38:         return prefix;
1:da67a38:     }
1:da67a38: 
1:da67a38:     /**
1:da67a38:      * Sets the prefix wildcard used to identify the queue consumers for a given
1:da67a38:      * topic
1:da67a38:      */
1:da67a38:     public void setPrefix(String prefix) {
1:da67a38:         this.prefix = prefix;
1:da67a38:     }
1:da67a38: 
1:da67a38:     public String getName() {
1:da67a38:         return name;
1:da67a38:     }
1:da67a38: 
1:da67a38:     public void setName(String name) {
1:da67a38:         this.name = name;
1:da67a38:     }
1:f55edcf: 
1:027d2e7:     /**
1:f55edcf:      * Indicates whether the selectors of consumers are used to determine
1:f55edcf:      * dispatch to a virtual destination, when true only messages matching an
1:f55edcf:      * existing consumer will be dispatched.
1:f55edcf:      *
1:f55edcf:      * @param selectorAware
1:f55edcf:      *            when true take consumer selectors into consideration
1:027d2e7:      */
1:027d2e7:     public void setSelectorAware(boolean selectorAware) {
1:027d2e7:         this.selectorAware = selectorAware;
1:027d2e7:     }
1:f55edcf: 
1:027d2e7:     public boolean isSelectorAware() {
1:027d2e7:         return selectorAware;
1:027d2e7:     }
1:027d2e7: 
1:3c3b5bb:     public boolean isLocal() {
1:3c3b5bb:         return local;
1:3c3b5bb:     }
1:3c3b5bb: 
1:3c3b5bb:     public void setLocal(boolean local) {
1:3c3b5bb:         this.local = local;
1:3c3b5bb:     }
1:92860ae: 
1:92860ae:     @Override
1:92860ae:     public String toString() {
1:f55edcf:         return new StringBuilder("VirtualTopic:").append(prefix).append(',').append(name).append(',').
1:f55edcf:                                                   append(postfix).append(',').append(selectorAware).
1:f55edcf:                                                   append(',').append(local).toString();
1:92860ae:     }
1:340728f: 
1:340728f:     public boolean isConcurrentSend() {
1:340728f:         return concurrentSend;
1:340728f:     }
1:340728f: 
1:340728f:     /**
1:340728f:      * When true, dispatch to matching destinations in parallel (in multiple threads)
1:340728f:      * @param concurrentSend
1:340728f:      */
1:340728f:     public void setConcurrentSend(boolean concurrentSend) {
1:340728f:         this.concurrentSend = concurrentSend;
1:340728f:     }
1:ffdaeb2: 
1:ffdaeb2:     public boolean isTransactedSend() {
1:ffdaeb2:         return transactedSend;
1:ffdaeb2:     }
1:ffdaeb2: 
1:ffdaeb2:     /**
1:ffdaeb2:      * When true, dispatch to matching destinations always uses a transaction.
1:ffdaeb2:      * @param transactedSend
1:ffdaeb2:      */
1:ffdaeb2:     public void setTransactedSend(boolean transactedSend) {
1:ffdaeb2:         this.transactedSend = transactedSend;
1:ffdaeb2:     }
1:cc81680: 
1:cc81680:     @Override
1:cc81680:     public int hashCode() {
1:cc81680:         final int prime = 31;
1:cc81680:         int result = 1;
1:cc81680:         result = prime * result + (concurrentSend ? 1231 : 1237);
1:cc81680:         result = prime * result + (local ? 1231 : 1237);
1:cc81680:         result = prime * result + ((name == null) ? 0 : name.hashCode());
1:cc81680:         result = prime * result + ((postfix == null) ? 0 : postfix.hashCode());
1:cc81680:         result = prime * result + ((prefix == null) ? 0 : prefix.hashCode());
1:cc81680:         result = prime * result + (selectorAware ? 1231 : 1237);
1:cc81680:         result = prime * result + (transactedSend ? 1231 : 1237);
1:cc81680:         return result;
1:cc81680:     }
1:cc81680: 
1:cc81680:     @Override
1:cc81680:     public boolean equals(Object obj) {
1:cc81680:         if (this == obj)
1:cc81680:             return true;
1:cc81680:         if (obj == null)
1:cc81680:             return false;
1:cc81680:         if (getClass() != obj.getClass())
1:cc81680:             return false;
1:cc81680:         VirtualTopic other = (VirtualTopic) obj;
1:cc81680:         if (concurrentSend != other.concurrentSend)
1:cc81680:             return false;
1:cc81680:         if (local != other.local)
1:cc81680:             return false;
1:cc81680:         if (name == null) {
1:cc81680:             if (other.name != null)
1:cc81680:                 return false;
1:cc81680:         } else if (!name.equals(other.name))
1:cc81680:             return false;
1:cc81680:         if (postfix == null) {
1:cc81680:             if (other.postfix != null)
1:cc81680:                 return false;
1:cc81680:         } else if (!postfix.equals(other.postfix))
1:cc81680:             return false;
1:cc81680:         if (prefix == null) {
1:cc81680:             if (other.prefix != null)
1:cc81680:                 return false;
1:cc81680:         } else if (!prefix.equals(other.prefix))
1:cc81680:             return false;
1:cc81680:         if (selectorAware != other.selectorAware)
1:cc81680:             return false;
1:cc81680:         if (transactedSend != other.transactedSend)
1:cc81680:             return false;
1:cc81680:         return true;
1:cc81680:     }
1:6da08b2: 
1:6da08b2:     public boolean isDropOnResourceLimit() {
1:6da08b2:         return dropOnResourceLimit;
1:6da08b2:     }
1:6da08b2: 
1:6da08b2:     public void setDropOnResourceLimit(boolean dropOnResourceLimit) {
1:6da08b2:         this.dropOnResourceLimit = dropOnResourceLimit;
1:6da08b2:     }
1:573b366: 
1:573b366:     public boolean isSetOriginalDestination() {
1:573b366:         return setOriginalDestination;
1:573b366:     }
1:573b366: 
1:573b366:     public void setSetOriginalDestination(boolean setOriginalDestination) {
1:573b366:         this.setOriginalDestination = setOriginalDestination;
1:573b366:     }
1:da67a38: }
============================================================================
author:gtully
-------------------------------------------------------------------------------
commit:573b366
/////////////////////////////////////////////////////////////////////////
1:     private boolean setOriginalDestination = true;
/////////////////////////////////////////////////////////////////////////
1: 
1:     public boolean isSetOriginalDestination() {
1:         return setOriginalDestination;
1:     }
1: 
1:     public void setSetOriginalDestination(boolean setOriginalDestination) {
1:         this.setOriginalDestination = setOriginalDestination;
1:     }
commit:6da08b2
/////////////////////////////////////////////////////////////////////////
1:     private boolean dropOnResourceLimit = false;
/////////////////////////////////////////////////////////////////////////
1: 
1:     public boolean isDropOnResourceLimit() {
1:         return dropOnResourceLimit;
1:     }
1: 
1:     public void setDropOnResourceLimit(boolean dropOnResourceLimit) {
1:         this.dropOnResourceLimit = dropOnResourceLimit;
1:     }
commit:ffdaeb2
/////////////////////////////////////////////////////////////////////////
1:     private boolean transactedSend = false;
/////////////////////////////////////////////////////////////////////////
1: 
1:     public boolean isTransactedSend() {
1:         return transactedSend;
1:     }
1: 
1:     /**
1:      * When true, dispatch to matching destinations always uses a transaction.
1:      * @param transactedSend
1:      */
1:     public void setTransactedSend(boolean transactedSend) {
1:         this.transactedSend = transactedSend;
1:     }
commit:340728f
/////////////////////////////////////////////////////////////////////////
1:     private boolean concurrentSend = false;
/////////////////////////////////////////////////////////////////////////
1:         return selectorAware ? new SelectorAwareVirtualTopicInterceptor(destination, this) :
1:                 new VirtualTopicInterceptor(destination, this);
/////////////////////////////////////////////////////////////////////////
1: 
1:     public boolean isConcurrentSend() {
1:         return concurrentSend;
1:     }
1: 
1:     /**
1:      * When true, dispatch to matching destinations in parallel (in multiple threads)
1:      * @param concurrentSend
1:      */
1:     public void setConcurrentSend(boolean concurrentSend) {
1:         this.concurrentSend = concurrentSend;
1:     }
author:Christopher L. Shannon (cshannon)
-------------------------------------------------------------------------------
commit:cc81680
/////////////////////////////////////////////////////////////////////////
1: 
1:     @Override
1:     public int hashCode() {
1:         final int prime = 31;
1:         int result = 1;
1:         result = prime * result + (concurrentSend ? 1231 : 1237);
1:         result = prime * result + (local ? 1231 : 1237);
1:         result = prime * result + ((name == null) ? 0 : name.hashCode());
1:         result = prime * result + ((postfix == null) ? 0 : postfix.hashCode());
1:         result = prime * result + ((prefix == null) ? 0 : prefix.hashCode());
1:         result = prime * result + (selectorAware ? 1231 : 1237);
1:         result = prime * result + (transactedSend ? 1231 : 1237);
1:         return result;
1:     }
1: 
1:     @Override
1:     public boolean equals(Object obj) {
1:         if (this == obj)
1:             return true;
1:         if (obj == null)
1:             return false;
1:         if (getClass() != obj.getClass())
1:             return false;
1:         VirtualTopic other = (VirtualTopic) obj;
1:         if (concurrentSend != other.concurrentSend)
1:             return false;
1:         if (local != other.local)
1:             return false;
1:         if (name == null) {
1:             if (other.name != null)
1:                 return false;
1:         } else if (!name.equals(other.name))
1:             return false;
1:         if (postfix == null) {
1:             if (other.postfix != null)
1:                 return false;
1:         } else if (!postfix.equals(other.postfix))
1:             return false;
1:         if (prefix == null) {
1:             if (other.prefix != null)
1:                 return false;
1:         } else if (!prefix.equals(other.prefix))
1:             return false;
1:         if (selectorAware != other.selectorAware)
1:             return false;
1:         if (transactedSend != other.transactedSend)
1:             return false;
1:         return true;
1:     }
author:Dejan Bosanac
-------------------------------------------------------------------------------
commit:05c3112
/////////////////////////////////////////////////////////////////////////
1:         if (destination.isQueue() && destination.isPattern()) {
1: 
author:Timothy Bish
-------------------------------------------------------------------------------
commit:f55edcf
/////////////////////////////////////////////////////////////////////////
1: import java.util.regex.Matcher;
1: import java.util.regex.Pattern;
1: 
/////////////////////////////////////////////////////////////////////////
1:  *
/////////////////////////////////////////////////////////////////////////
1:     @Override
1:     @Override
0:         return selectorAware ? new SelectorAwareVirtualTopicInterceptor(destination, getPrefix(), getPostfix(), isLocal()) : new VirtualTopicInterceptor(
0:             destination, getPrefix(), getPostfix(), isLocal());
1:     @Override
1:     public ActiveMQDestination getMappedDestinations() {
1:         return new ActiveMQQueue(prefix + name + postfix);
1:     }
1: 
1:     @Override
1:     public Destination interceptMappedDestination(Destination destination) {
1:         // do a reverse map from destination to get actual virtual destination
1:         final String physicalName = destination.getActiveMQDestination().getPhysicalName();
1:         final Pattern pattern = Pattern.compile(getRegex(prefix) + "(.*)" + getRegex(postfix));
1:         final Matcher matcher = pattern.matcher(physicalName);
1:         if (matcher.matches()) {
1:             final String virtualName = matcher.group(1);
1:             return new MappedQueueFilter(new ActiveMQTopic(virtualName), destination);
1:         }
1:         return destination;
1:     }
1: 
1:     private String getRegex(String part) {
1:         StringBuilder builder = new StringBuilder();
1:         for (char c : part.toCharArray()) {
1:             switch (c) {
1:                 case '.':
1:                     builder.append("\\.");
1:                     break;
1:                 case '*':
1:                     builder.append("[^\\.]*");
1:                     break;
1:                 default:
1:                     builder.append(c);
1:             }
1:         }
1:         return builder.toString();
1:     }
1: 
1:     @Override
/////////////////////////////////////////////////////////////////////////
1:     @Override
1:     public void remove(Destination destination) {
1: 
/////////////////////////////////////////////////////////////////////////
1: 
1:      * Indicates whether the selectors of consumers are used to determine
1:      * dispatch to a virtual destination, when true only messages matching an
1:      * existing consumer will be dispatched.
1:      *
1:      * @param selectorAware
1:      *            when true take consumer selectors into consideration
1: 
/////////////////////////////////////////////////////////////////////////
1:         return new StringBuilder("VirtualTopic:").append(prefix).append(',').append(name).append(',').
1:                                                   append(postfix).append(',').append(selectorAware).
1:                                                   append(',').append(local).toString();
author:Gary Tully
-------------------------------------------------------------------------------
commit:92860ae
/////////////////////////////////////////////////////////////////////////
1: 
1:     @Override
1:     public String toString() {
0:         return new StringBuilder("VirtualTopic:").append(prefix).append(',').append(name).append(',').append(postfix).append(',').append(selectorAware).append(',').append(local).toString();
1:     }
commit:027d2e7
/////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////
1:     private boolean selectorAware = false;
/////////////////////////////////////////////////////////////////////////
0:         return selectorAware ? new SelectorAwareVirtualTopicInterceptor(destination, getPrefix(), getPostfix()) : 
0:             new VirtualTopicInterceptor(destination, getPrefix(), getPostfix());
/////////////////////////////////////////////////////////////////////////
1:     
1:     /**
0:      * Indicates whether the selectors of consumers are used to determine dispatch
0:      * to a virtual destination, when true only messages matching an existing 
0:      * consumer will be dispatched.
0:      * @param selectorAware when true take consumer selectors into consideration
1:      */
1:     public void setSelectorAware(boolean selectorAware) {
1:         this.selectorAware = selectorAware;
1:     }
1:     
1:     public boolean isSelectorAware() {
1:         return selectorAware;
1:     }
author:Hiram R. Chirino
-------------------------------------------------------------------------------
commit:58aca86
commit:0bbc0ac
/////////////////////////////////////////////////////////////////////////
1:  * 
commit:230a86c
/////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////
1:  *      http://www.apache.org/licenses/LICENSE-2.0
commit:57b4941
/////////////////////////////////////////////////////////////////////////
1:  * Licensed to the Apache Software Foundation (ASF) under one or more
1:  * contributor license agreements.  See the NOTICE file distributed with
1:  * this work for additional information regarding copyright ownership.
1:  * The ASF licenses this file to You under the Apache License, Version 2.0
1:  * (the "License"); you may not use this file except in compliance with
1:  * the License.  You may obtain a copy of the License at
author:Bosanac Dejan
-------------------------------------------------------------------------------
commit:3c3b5bb
/////////////////////////////////////////////////////////////////////////
1:     private boolean local = false;
/////////////////////////////////////////////////////////////////////////
0:         return selectorAware ? new SelectorAwareVirtualTopicInterceptor(destination, getPrefix(), getPostfix(), isLocal()) :
0:             new VirtualTopicInterceptor(destination, getPrefix(), getPostfix(), isLocal());
/////////////////////////////////////////////////////////////////////////
1: 
1:     public boolean isLocal() {
1:         return local;
1:     }
1: 
1:     public void setLocal(boolean local) {
1:         this.local = local;
1:     }
commit:d17eceb
/////////////////////////////////////////////////////////////////////////
1: import org.apache.activemq.broker.Broker;
1: import org.apache.activemq.broker.ConnectionContext;
1: import org.apache.activemq.command.ActiveMQQueue;
1: import org.apache.activemq.filter.DestinationFilter;
/////////////////////////////////////////////////////////////////////////
1:     public void create(Broker broker, ConnectionContext context, ActiveMQDestination destination) throws Exception {
0:         if (destination.isQueue() && destination.isPattern() && broker.getDestinations(destination).isEmpty()) {
1:             DestinationFilter filter = DestinationFilter.parseFilter(new ActiveMQQueue(prefix + DestinationFilter.ANY_DESCENDENT));
1:             if (filter.matches(destination)) {
1:                 broker.addDestination(context, destination, false);
1:             }
1:         }
1:     }
1: 
author:Robert Davies
-------------------------------------------------------------------------------
commit:16f2d75
/////////////////////////////////////////////////////////////////////////
1: 
0:     public void remove(Destination destination) {        
1:     }
1:     
author:James Strachan
-------------------------------------------------------------------------------
commit:42b768a
/////////////////////////////////////////////////////////////////////////
commit:da67a38
/////////////////////////////////////////////////////////////////////////
1: /**
1:  *
0:  * Copyright 2005-2006 The Apache Software Foundation
1:  *
0:  * Licensed under the Apache License, Version 2.0 (the "License");
0:  * you may not use this file except in compliance with the License.
0:  * You may obtain a copy of the License at
1:  *
0:  * http://www.apache.org/licenses/LICENSE-2.0
1:  *
1:  * Unless required by applicable law or agreed to in writing, software
1:  * distributed under the License is distributed on an "AS IS" BASIS,
1:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:  * See the License for the specific language governing permissions and
1:  * limitations under the License.
1:  */
1: package org.apache.activemq.broker.region.virtual;
1: 
1: import org.apache.activemq.broker.region.Destination;
1: import org.apache.activemq.command.ActiveMQDestination;
0: import org.apache.activemq.command.ActiveMQQueue;
1: import org.apache.activemq.command.ActiveMQTopic;
1: 
1: /**
1:  * Creates <a href="http://activemq.org/site/virtual-destinations.html">Virtual
1:  * Topics</a> using a prefix and postfix. The virtual destination creates a
1:  * wildcard that is then used to look up all active queue subscriptions which
1:  * match.
1:  * 
1:  * @org.apache.xbean.XBean
1:  * 
0:  * @version $Revision$
1:  */
1: public class VirtualTopic implements VirtualDestination {
1: 
1:     private String prefix = "Consumer.*.";
1:     private String postfix = "";
1:     private String name = ">";
1: 
1: 
1:     public ActiveMQDestination getVirtualDestination() {
1:         return new ActiveMQTopic(getName());
1:     }
1: 
1:     public Destination intercept(Destination destination) {
0:         return new VirtualTopicInterceptor(destination, getPrefix(), getPostfix());
1:     }
1:     
1:     // Properties
1:     // -------------------------------------------------------------------------
1: 
1:     public String getPostfix() {
1:         return postfix;
1:     }
1: 
1:     /**
1:      * Sets any postix used to identify the queue consumers
1:      */
1:     public void setPostfix(String postfix) {
1:         this.postfix = postfix;
1:     }
1: 
1:     public String getPrefix() {
1:         return prefix;
1:     }
1: 
1:     /**
1:      * Sets the prefix wildcard used to identify the queue consumers for a given
1:      * topic
1:      */
1:     public void setPrefix(String prefix) {
1:         this.prefix = prefix;
1:     }
1: 
1:     public String getName() {
1:         return name;
1:     }
1: 
1:     public void setName(String name) {
1:         this.name = name;
1:     }
1: 
0:     // Implementation methods
1:     // -------------------------------------------------------------------------
0:     protected ActiveMQDestination getQueueConsumersWildcard(ActiveMQDestination original) {
0:         return new ActiveMQQueue(prefix + original.getPhysicalName() + postfix);
1:     }
1: 
1: 
1: }
============================================================================