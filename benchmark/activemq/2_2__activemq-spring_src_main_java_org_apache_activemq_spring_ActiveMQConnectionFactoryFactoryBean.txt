1:5361df1: /**
1:5361df1:  *
1:5361df1:  * Licensed to the Apache Software Foundation (ASF) under one or more
1:5361df1:  * contributor license agreements.  See the NOTICE file distributed with
1:5361df1:  * this work for additional information regarding copyright ownership.
1:5361df1:  * The ASF licenses this file to You under the Apache License, Version 2.0
1:5361df1:  * (the "License"); you may not use this file except in compliance with
1:5361df1:  * the License.  You may obtain a copy of the License at
1:5361df1:  *
1:5361df1:  * http://www.apache.org/licenses/LICENSE-2.0
1:5361df1:  *
1:5361df1:  * Unless required by applicable law or agreed to in writing, software
1:5361df1:  * distributed under the License is distributed on an "AS IS" BASIS,
1:5361df1:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:5361df1:  * See the License for the specific language governing permissions and
1:5361df1:  * limitations under the License.
1:5361df1:  */
1:5361df1: package org.apache.activemq.spring;
1:5361df1: 
1:5361df1: import java.util.ArrayList;
1:5361df1: import java.util.List;
1:5361df1: 
1:5361df1: import org.springframework.beans.factory.FactoryBean;
1:5361df1: 
1:5361df1: /**
1:5361df1:  * A helper class for creating a failover configured {@link ActiveMQConnectionFactory}
1:5361df1:  * which supports one or more TCP based hostname/ports which can all be configured in a
1:5361df1:  * consistent way without too much URL hacking.
1:b0c2a40:  *
1:5361df1:  * 
1:5361df1:  */
1:5361df1: public class ActiveMQConnectionFactoryFactoryBean implements FactoryBean {
1:5361df1:     private List<String> tcpHostAndPorts = new ArrayList<String>();
1:5361df1: 
1:5361df1:     // tcp properties
1:5361df1:     private Long maxInactivityDuration;
1:5361df1:     private String tcpProperties;
1:5361df1: 
1:5361df1:     // failover properties
1:5361df1:     private Long maxReconnectDelay;
1:5361df1:     private String failoverProperties;
1:5361df1: 
1:5361df1:     public Object getObject() throws Exception {
1:5361df1:         ActiveMQConnectionFactory answer = new ActiveMQConnectionFactory();
1:5361df1:         String brokerURL = getBrokerURL();
1:5361df1:         answer.setBrokerURL(brokerURL);
1:5361df1:         return answer;
1:5361df1:     }
1:5361df1: 
1:5361df1:     public String getBrokerURL() {
1:5361df1:         StringBuffer buffer = new StringBuffer("failover:(");
1:5361df1:         int counter = 0;
1:5361df1:         for (String tcpHostAndPort : tcpHostAndPorts) {
1:5361df1:             if (counter++ > 0) {
1:5361df1:                 buffer.append(",");
1:5361df1:             }
1:5361df1:             buffer.append(createTcpHostAndPortUrl(tcpHostAndPort));
1:5361df1:         }
1:5361df1:         buffer.append(")");
1:5361df1: 
1:5361df1:         List<String> parameters = new ArrayList<String>();
1:5361df1:         if (maxReconnectDelay != null) {
1:5361df1:             parameters.add("maxReconnectDelay=" + maxReconnectDelay);
1:5361df1:         }
1:5361df1:         if (notEmpty(failoverProperties)) {
1:5361df1:             parameters.add(failoverProperties);
1:5361df1:         }
1:5361df1:         buffer.append(asQueryString(parameters));
1:5361df1:         return buffer.toString();
1:5361df1:     }
1:5361df1: 
1:5361df1:     public Class getObjectType() {
1:5361df1:         return ActiveMQConnectionFactory.class;
1:5361df1:     }
1:5361df1: 
1:5361df1:     public boolean isSingleton() {
1:5361df1:         return true;
1:5361df1:     }
1:5361df1: 
1:5361df1:     // Properties
1:5361df1:     //-------------------------------------------------------------------------
1:5361df1: 
1:5361df1:     public List<String> getTcpHostAndPorts() {
1:5361df1:         return tcpHostAndPorts;
1:5361df1:     }
1:5361df1: 
1:5361df1:     public void setTcpHostAndPorts(List<String> tcpHostAndPorts) {
1:5361df1:         this.tcpHostAndPorts = tcpHostAndPorts;
1:5361df1:     }
1:5361df1: 
1:5361df1:     public void setTcpHostAndPort(String tcpHostAndPort) {
1:5361df1:         tcpHostAndPorts = new ArrayList<String>();
1:5361df1:         tcpHostAndPorts.add(tcpHostAndPort);
1:5361df1:     }
1:5361df1: 
1:5361df1:     public Long getMaxInactivityDuration() {
1:5361df1:         return maxInactivityDuration;
1:5361df1:     }
1:5361df1: 
1:5361df1:     public void setMaxInactivityDuration(Long maxInactivityDuration) {
1:5361df1:         this.maxInactivityDuration = maxInactivityDuration;
1:5361df1:     }
1:5361df1: 
1:5361df1:     public String getTcpProperties() {
1:5361df1:         return tcpProperties;
1:5361df1:     }
1:5361df1: 
1:5361df1:     public void setTcpProperties(String tcpProperties) {
1:5361df1:         this.tcpProperties = tcpProperties;
1:5361df1:     }
1:5361df1: 
1:5361df1:     public Long getMaxReconnectDelay() {
1:5361df1:         return maxReconnectDelay;
1:5361df1:     }
1:5361df1: 
1:5361df1:     public void setMaxReconnectDelay(Long maxReconnectDelay) {
1:5361df1:         this.maxReconnectDelay = maxReconnectDelay;
1:5361df1:     }
1:5361df1: 
1:5361df1:     public String getFailoverProperties() {
1:5361df1:         return failoverProperties;
1:5361df1:     }
1:5361df1: 
1:5361df1:     public void setFailoverProperties(String failoverProperties) {
1:5361df1:         this.failoverProperties = failoverProperties;
1:5361df1:     }
1:5361df1: 
1:5361df1:     // Implementation methods
1:5361df1:     //-------------------------------------------------------------------------
1:5361df1: 
1:5361df1:     /**
1:5361df1:      * Turns a list of query string key=value strings into a query URL string
1:5361df1:      * of the form "?a=x&b=y"
1:5361df1:      */
1:5361df1:     protected String asQueryString(List<String> parameters) {
1:5361df1:         int size = parameters.size();
1:5361df1:         if (size < 1) {
1:5361df1:             return "";
1:5361df1:         }
1:5361df1:         else {
1:5361df1:             StringBuffer buffer = new StringBuffer("?");
1:5361df1:             buffer.append(parameters.get(0));
1:5361df1:             for (int i = 1; i < size; i++) {
1:5361df1:                 buffer.append("&");
1:5361df1:                 buffer.append(parameters.get(i));
1:5361df1:             }
1:5361df1:             return buffer.toString();
1:5361df1:         }
1:5361df1:     }
1:5361df1: 
1:5361df1:     /**
1:5361df1:      * Allows us to add any TCP specific URI configurations
1:5361df1:      */
1:5361df1:     protected String createTcpHostAndPortUrl(String tcpHostAndPort) {
1:5361df1:         List<String> parameters = new ArrayList<String>();
1:5361df1:         if (maxInactivityDuration != null) {
1:5361df1:             parameters.add("wireFormat.maxInactivityDuration=" + maxInactivityDuration);
1:5361df1:         }
1:5361df1:         if (notEmpty(tcpProperties)) {
1:5361df1:             parameters.add(tcpProperties);
1:5361df1:         }
1:5361df1:         return tcpHostAndPort + asQueryString(parameters);
1:5361df1:     }
1:5361df1: 
1:5361df1: 
1:5361df1:     protected boolean notEmpty(String text) {
1:5361df1:         return text != null && text.length() > 0;
1:5361df1:     }
1:5361df1: 
1:5361df1: }
============================================================================
author:Hiram R. Chirino
-------------------------------------------------------------------------------
commit:cd19db2
commit:58aca86
commit:b0c2a40
/////////////////////////////////////////////////////////////////////////
1:  * 
author:James Strachan
-------------------------------------------------------------------------------
commit:5361df1
/////////////////////////////////////////////////////////////////////////
1: /**
1:  *
1:  * Licensed to the Apache Software Foundation (ASF) under one or more
1:  * contributor license agreements.  See the NOTICE file distributed with
1:  * this work for additional information regarding copyright ownership.
1:  * The ASF licenses this file to You under the Apache License, Version 2.0
1:  * (the "License"); you may not use this file except in compliance with
1:  * the License.  You may obtain a copy of the License at
1:  *
1:  * http://www.apache.org/licenses/LICENSE-2.0
1:  *
1:  * Unless required by applicable law or agreed to in writing, software
1:  * distributed under the License is distributed on an "AS IS" BASIS,
1:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:  * See the License for the specific language governing permissions and
1:  * limitations under the License.
1:  */
1: package org.apache.activemq.spring;
1: 
1: import java.util.ArrayList;
1: import java.util.List;
1: 
1: import org.springframework.beans.factory.FactoryBean;
1: 
1: /**
1:  * A helper class for creating a failover configured {@link ActiveMQConnectionFactory}
1:  * which supports one or more TCP based hostname/ports which can all be configured in a
1:  * consistent way without too much URL hacking.
1:  *
0:  * @version $Revision: 1.1 $
1:  */
1: public class ActiveMQConnectionFactoryFactoryBean implements FactoryBean {
1:     private List<String> tcpHostAndPorts = new ArrayList<String>();
1: 
1:     // tcp properties
1:     private Long maxInactivityDuration;
1:     private String tcpProperties;
1: 
1:     // failover properties
1:     private Long maxReconnectDelay;
1:     private String failoverProperties;
1: 
1:     public Object getObject() throws Exception {
1:         ActiveMQConnectionFactory answer = new ActiveMQConnectionFactory();
1:         String brokerURL = getBrokerURL();
1:         answer.setBrokerURL(brokerURL);
1:         return answer;
1:     }
1: 
1:     public String getBrokerURL() {
1:         StringBuffer buffer = new StringBuffer("failover:(");
1:         int counter = 0;
1:         for (String tcpHostAndPort : tcpHostAndPorts) {
1:             if (counter++ > 0) {
1:                 buffer.append(",");
1:             }
1:             buffer.append(createTcpHostAndPortUrl(tcpHostAndPort));
1:         }
1:         buffer.append(")");
1: 
1:         List<String> parameters = new ArrayList<String>();
1:         if (maxReconnectDelay != null) {
1:             parameters.add("maxReconnectDelay=" + maxReconnectDelay);
1:         }
1:         if (notEmpty(failoverProperties)) {
1:             parameters.add(failoverProperties);
1:         }
1:         buffer.append(asQueryString(parameters));
1:         return buffer.toString();
1:     }
1: 
1:     public Class getObjectType() {
1:         return ActiveMQConnectionFactory.class;
1:     }
1: 
1:     public boolean isSingleton() {
1:         return true;
1:     }
1: 
1:     // Properties
1:     //-------------------------------------------------------------------------
1: 
1:     public List<String> getTcpHostAndPorts() {
1:         return tcpHostAndPorts;
1:     }
1: 
1:     public void setTcpHostAndPorts(List<String> tcpHostAndPorts) {
1:         this.tcpHostAndPorts = tcpHostAndPorts;
1:     }
1: 
1:     public void setTcpHostAndPort(String tcpHostAndPort) {
1:         tcpHostAndPorts = new ArrayList<String>();
1:         tcpHostAndPorts.add(tcpHostAndPort);
1:     }
1: 
1:     public Long getMaxInactivityDuration() {
1:         return maxInactivityDuration;
1:     }
1: 
1:     public void setMaxInactivityDuration(Long maxInactivityDuration) {
1:         this.maxInactivityDuration = maxInactivityDuration;
1:     }
1: 
1:     public String getTcpProperties() {
1:         return tcpProperties;
1:     }
1: 
1:     public void setTcpProperties(String tcpProperties) {
1:         this.tcpProperties = tcpProperties;
1:     }
1: 
1:     public Long getMaxReconnectDelay() {
1:         return maxReconnectDelay;
1:     }
1: 
1:     public void setMaxReconnectDelay(Long maxReconnectDelay) {
1:         this.maxReconnectDelay = maxReconnectDelay;
1:     }
1: 
1:     public String getFailoverProperties() {
1:         return failoverProperties;
1:     }
1: 
1:     public void setFailoverProperties(String failoverProperties) {
1:         this.failoverProperties = failoverProperties;
1:     }
1: 
1:     // Implementation methods
1:     //-------------------------------------------------------------------------
1: 
1:     /**
1:      * Turns a list of query string key=value strings into a query URL string
1:      * of the form "?a=x&b=y"
1:      */
1:     protected String asQueryString(List<String> parameters) {
1:         int size = parameters.size();
1:         if (size < 1) {
1:             return "";
1:         }
1:         else {
1:             StringBuffer buffer = new StringBuffer("?");
1:             buffer.append(parameters.get(0));
1:             for (int i = 1; i < size; i++) {
1:                 buffer.append("&");
1:                 buffer.append(parameters.get(i));
1:             }
1:             return buffer.toString();
1:         }
1:     }
1: 
1:     /**
1:      * Allows us to add any TCP specific URI configurations
1:      */
1:     protected String createTcpHostAndPortUrl(String tcpHostAndPort) {
1:         List<String> parameters = new ArrayList<String>();
1:         if (maxInactivityDuration != null) {
1:             parameters.add("wireFormat.maxInactivityDuration=" + maxInactivityDuration);
1:         }
1:         if (notEmpty(tcpProperties)) {
1:             parameters.add(tcpProperties);
1:         }
1:         return tcpHostAndPort + asQueryString(parameters);
1:     }
1: 
1: 
1:     protected boolean notEmpty(String text) {
1:         return text != null && text.length() > 0;
1:     }
1: 
1: }
============================================================================