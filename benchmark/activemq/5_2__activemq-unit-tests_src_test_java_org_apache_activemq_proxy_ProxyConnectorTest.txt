1:d29ca2a: /**
1:57b4941:  * Licensed to the Apache Software Foundation (ASF) under one or more
1:57b4941:  * contributor license agreements.  See the NOTICE file distributed with
1:57b4941:  * this work for additional information regarding copyright ownership.
1:57b4941:  * The ASF licenses this file to You under the Apache License, Version 2.0
1:57b4941:  * (the "License"); you may not use this file except in compliance with
1:57b4941:  * the License.  You may obtain a copy of the License at
3:d29ca2a:  *
1:230a86c:  *      http://www.apache.org/licenses/LICENSE-2.0
1:d29ca2a:  *
1:d29ca2a:  * Unless required by applicable law or agreed to in writing, software
1:d29ca2a:  * distributed under the License is distributed on an "AS IS" BASIS,
1:d29ca2a:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:d29ca2a:  * See the License for the specific language governing permissions and
1:d29ca2a:  * limitations under the License.
1:d29ca2a:  */
1:d29ca2a: package org.apache.activemq.proxy;
10:d29ca2a: 
1:d29ca2a: import javax.jms.DeliveryMode;
1:d29ca2a: 
1:f812e34: import junit.framework.Test;
1:d29ca2a: import org.apache.activemq.broker.StubConnection;
1:d29ca2a: import org.apache.activemq.command.ActiveMQDestination;
1:d29ca2a: import org.apache.activemq.command.ConnectionInfo;
1:d29ca2a: import org.apache.activemq.command.ConsumerInfo;
1:d29ca2a: import org.apache.activemq.command.Message;
1:d29ca2a: import org.apache.activemq.command.ProducerInfo;
1:d29ca2a: import org.apache.activemq.command.SessionInfo;
1:d29ca2a: 
1:d29ca2a: public class ProxyConnectorTest extends ProxyTestSupport {
1:f812e34: 
1:933eb2f:     public ActiveMQDestination destination;
1:933eb2f:     public byte destinationType;
1:933eb2f:     public int deliveryMode;
1:933eb2f: 
1:d29ca2a:     public static Test suite() {
1:d29ca2a:         return suite(ProxyConnectorTest.class);
1:d29ca2a:     }
1:f812e34: 
1:d29ca2a:     public static void main(String[] args) {
1:d29ca2a:         junit.textui.TestRunner.run(suite());
1:d29ca2a:     }
1:d29ca2a: 
1:d29ca2a:     public void setUp() throws Exception {
1:d29ca2a:         super.setAutoFail(true);
1:d29ca2a:         super.setUp();
1:d29ca2a:     }
1:d29ca2a: 
1:d29ca2a:     public void initCombosForTestSendAndConsume() {
1:f812e34:         addCombinationValues("deliveryMode", new Object[] {Integer.valueOf(DeliveryMode.NON_PERSISTENT), Integer.valueOf(DeliveryMode.PERSISTENT)});
1:933eb2f:         addCombinationValues("destinationType", new Object[] {Byte.valueOf(ActiveMQDestination.TOPIC_TYPE)});
1:d29ca2a:     }
1:f812e34: 
1:7f5213b:     public void testSendAndConsume() throws Exception {
1:f812e34: 
1:d29ca2a:         // Start a producer on local broker using the proxy
1:d29ca2a:         StubConnection connection1 = createProxyConnection();
1:d29ca2a:         ConnectionInfo connectionInfo1 = createConnectionInfo();
1:f812e34:         SessionInfo sessionInfo1 = createSessionInfo(connectionInfo1);
1:d29ca2a:         ProducerInfo producerInfo = createProducerInfo(sessionInfo1);
1:d29ca2a:         connection1.send(connectionInfo1);
1:d29ca2a:         connection1.send(sessionInfo1);
1:d29ca2a:         connection1.send(producerInfo);
1:d29ca2a: 
1:d29ca2a:         destination = createDestinationInfo(connection1, connectionInfo1, destinationType);
1:f812e34:         ConsumerInfo consumerInfo1 = createConsumerInfo(sessionInfo1, destination);
1:d29ca2a:         connection1.send(consumerInfo1);
1:d29ca2a: 
1:d29ca2a:         // Start a consumer on a remote broker using a proxy connection.
1:d29ca2a:         StubConnection connection2 = createRemoteProxyConnection();
1:d29ca2a:         ConnectionInfo connectionInfo2 = createConnectionInfo();
1:f812e34:         SessionInfo sessionInfo2 = createSessionInfo(connectionInfo2);
1:d29ca2a:         connection2.send(connectionInfo2);
1:d29ca2a:         connection2.send(sessionInfo2);
1:d29ca2a: 
1:f812e34:         ConsumerInfo consumerInfo2 = createConsumerInfo(sessionInfo2, destination);
1:d29ca2a:         connection2.send(consumerInfo2);
1:f812e34: 
1:d29ca2a:         // Give broker enough time to receive and register the consumer info
1:d29ca2a:         // Either that or make consumer retroactive
1:d29ca2a:         try {
1:43880af:             Thread.sleep(2000);
1:d29ca2a:         } catch (Exception e) {
1:d29ca2a:             e.printStackTrace();
1:d29ca2a:         }
1:d29ca2a: 
1:d29ca2a:         // Send the message to the local broker.
1:d29ca2a:         connection1.request(createMessage(producerInfo, destination, deliveryMode));
1:f812e34: 
1:f812e34:         // Verify that the message Was sent to the remote broker and the local
1:f812e34:         // broker.
1:d29ca2a:         Message m;
1:d29ca2a:         m = receiveMessage(connection1);
1:d29ca2a:         assertNotNull(m);
1:d29ca2a:         assertNoMessagesLeft(connection1);
1:d29ca2a: 
1:d29ca2a:         m = receiveMessage(connection2);
1:d29ca2a:         assertNotNull(m);
1:d29ca2a:         assertNoMessagesLeft(connection2);
1:d29ca2a: 
1:d29ca2a:     }
1:d29ca2a: 
1:d29ca2a: }
============================================================================
author:Hadrian Zbarcea
-------------------------------------------------------------------------------
commit:f9bec8f
author:Timothy A. Bish
-------------------------------------------------------------------------------
commit:ef24cc9
author:Gary Tully
-------------------------------------------------------------------------------
commit:43880af
/////////////////////////////////////////////////////////////////////////
1:             Thread.sleep(2000);
author:Hiram R. Chirino
-------------------------------------------------------------------------------
commit:933eb2f
/////////////////////////////////////////////////////////////////////////
1:     public ActiveMQDestination destination;
1:     public byte destinationType;
1:     public int deliveryMode;
1: 
/////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////
1:         addCombinationValues("destinationType", new Object[] {Byte.valueOf(ActiveMQDestination.TOPIC_TYPE)});
commit:f812e34
/////////////////////////////////////////////////////////////////////////
1: import junit.framework.Test;
/////////////////////////////////////////////////////////////////////////
1: 
1: 
/////////////////////////////////////////////////////////////////////////
1:         addCombinationValues("deliveryMode", new Object[] {Integer.valueOf(DeliveryMode.NON_PERSISTENT), Integer.valueOf(DeliveryMode.PERSISTENT)});
0:         addCombinationValues("destinationType", new Object[] {Byte.valueOf(ActiveMQDestination.TOPIC_TYPE),});
1: 
1: 
1:         SessionInfo sessionInfo1 = createSessionInfo(connectionInfo1);
1:         ConsumerInfo consumerInfo1 = createConsumerInfo(sessionInfo1, destination);
1:         SessionInfo sessionInfo2 = createSessionInfo(connectionInfo2);
1:         ConsumerInfo consumerInfo2 = createConsumerInfo(sessionInfo2, destination);
1: 
/////////////////////////////////////////////////////////////////////////
1: 
1:         // Verify that the message Was sent to the remote broker and the local
1:         // broker.
/////////////////////////////////////////////////////////////////////////
commit:230a86c
/////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////
1:  *      http://www.apache.org/licenses/LICENSE-2.0
commit:57b4941
/////////////////////////////////////////////////////////////////////////
1:  * Licensed to the Apache Software Foundation (ASF) under one or more
1:  * contributor license agreements.  See the NOTICE file distributed with
1:  * this work for additional information regarding copyright ownership.
1:  * The ASF licenses this file to You under the Apache License, Version 2.0
1:  * (the "License"); you may not use this file except in compliance with
1:  * the License.  You may obtain a copy of the License at
commit:7f5213b
/////////////////////////////////////////////////////////////////////////
1:     public void testSendAndConsume() throws Exception {
commit:48b4869
/////////////////////////////////////////////////////////////////////////
0:  * Copyright 2005-2006 The Apache Software Foundation
commit:d29ca2a
/////////////////////////////////////////////////////////////////////////
1: /**
1:  *
0:  * Copyright 2004 The Apache Software Foundation
1:  *
0:  * Licensed under the Apache License, Version 2.0 (the "License");
0:  * you may not use this file except in compliance with the License.
0:  * You may obtain a copy of the License at
1:  *
0:  * http://www.apache.org/licenses/LICENSE-2.0
1:  *
1:  * Unless required by applicable law or agreed to in writing, software
1:  * distributed under the License is distributed on an "AS IS" BASIS,
1:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:  * See the License for the specific language governing permissions and
1:  * limitations under the License.
1:  */
1: package org.apache.activemq.proxy;
1: 
1: import javax.jms.DeliveryMode;
1: 
1: import org.apache.activemq.broker.StubConnection;
1: import org.apache.activemq.command.ActiveMQDestination;
1: import org.apache.activemq.command.ConnectionInfo;
1: import org.apache.activemq.command.ConsumerInfo;
1: import org.apache.activemq.command.Message;
1: import org.apache.activemq.command.ProducerInfo;
1: import org.apache.activemq.command.SessionInfo;
1: 
0: import junit.framework.Test;
1: 
1: 
1: public class ProxyConnectorTest extends ProxyTestSupport {
1:     
1:     public static Test suite() {
1:         return suite(ProxyConnectorTest.class);
1:     }
1:     
1:     public static void main(String[] args) {
1:         junit.textui.TestRunner.run(suite());
1:     }
1: 
0:     public ActiveMQDestination destination;
0:     public byte destinationType;
0:     public int deliveryMode;
1: 
1:     public void setUp() throws Exception {
1:         super.setAutoFail(true);
1:         super.setUp();
1:     }
1: 
1:     public void initCombosForTestSendAndConsume() {
0:         addCombinationValues( "deliveryMode", new Object[]{ 
0:                 new Integer(DeliveryMode.NON_PERSISTENT), 
0:                 new Integer(DeliveryMode.PERSISTENT)
0:                 } );        
0:         addCombinationValues( "destinationType", new Object[]{ 
0:                 new Byte(ActiveMQDestination.TOPIC_TYPE), 
0:                 } );
1:     }
0:     public void testSendAndConsume() throws Throwable {
1:         
1:         // Start a producer on local broker using the proxy
1:         StubConnection connection1 = createProxyConnection();
1:         ConnectionInfo connectionInfo1 = createConnectionInfo();
0:         SessionInfo sessionInfo1 = createSessionInfo(connectionInfo1);        
1:         ProducerInfo producerInfo = createProducerInfo(sessionInfo1);
1:         connection1.send(connectionInfo1);
1:         connection1.send(sessionInfo1);
1:         connection1.send(producerInfo);
1: 
1:         destination = createDestinationInfo(connection1, connectionInfo1, destinationType);
0:         ConsumerInfo consumerInfo1 = createConsumerInfo(sessionInfo1, destination);        
1:         connection1.send(consumerInfo1);
1: 
1:         // Start a consumer on a remote broker using a proxy connection.
1:         StubConnection connection2 = createRemoteProxyConnection();
1:         ConnectionInfo connectionInfo2 = createConnectionInfo();
0:         SessionInfo sessionInfo2 = createSessionInfo(connectionInfo2);        
1:         connection2.send(connectionInfo2);
1:         connection2.send(sessionInfo2);
1: 
0:         ConsumerInfo consumerInfo2 = createConsumerInfo(sessionInfo2, destination);        
1:         connection2.send(consumerInfo2);
1:         
1:         // Give broker enough time to receive and register the consumer info
1:         // Either that or make consumer retroactive
1:         try {
0:             Thread.sleep(1000);
1:         } catch (Exception e) {
1:             e.printStackTrace();
1:         }
1: 
1:         // Send the message to the local broker.
1:         connection1.request(createMessage(producerInfo, destination, deliveryMode));
1:                 
0:         // Verify that the message Was sent to the remote broker and the local broker.
1:         Message m;
1:         m = receiveMessage(connection1);
1:         assertNotNull(m);
1:         assertNoMessagesLeft(connection1);
1: 
1:         m = receiveMessage(connection2);
1:         assertNotNull(m);
1:         assertNoMessagesLeft(connection2);
1: 
1:     }
1: 
1:    
1: }
author:Robert Davies
-------------------------------------------------------------------------------
commit:d36c0d4
/////////////////////////////////////////////////////////////////////////
0:         		Integer.valueOf(DeliveryMode.NON_PERSISTENT), 
0:         		Integer.valueOf(DeliveryMode.PERSISTENT)
0:                 Byte.valueOf(ActiveMQDestination.TOPIC_TYPE), 
============================================================================