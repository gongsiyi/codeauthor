1:456a2ba: /**
1:456a2ba:  * Licensed to the Apache Software Foundation (ASF) under one or more
1:456a2ba:  * contributor license agreements.  See the NOTICE file distributed with
1:456a2ba:  * this work for additional information regarding copyright ownership.
1:456a2ba:  * The ASF licenses this file to You under the Apache License, Version 2.0
1:456a2ba:  * (the "License"); you may not use this file except in compliance with
1:456a2ba:  * the License.  You may obtain a copy of the License at
1:456a2ba:  *
1:456a2ba:  *      http://www.apache.org/licenses/LICENSE-2.0
1:456a2ba:  *
1:456a2ba:  * Unless required by applicable law or agreed to in writing, software
1:456a2ba:  * distributed under the License is distributed on an "AS IS" BASIS,
1:456a2ba:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:456a2ba:  * See the License for the specific language governing permissions and
1:456a2ba:  * limitations under the License.
1:456a2ba:  */
1:1aab71b: package org.apache.activemq.store.kahadb.disk.util;
1:456a2ba: 
1:456a2ba: /**
1:456a2ba:  * Represents a range of numbers.
1:456a2ba:  * 
1:456a2ba:  * @author chirino
1:456a2ba:  */
1:456a2ba: public class Sequence extends LinkedNode<Sequence> {
1:456a2ba:     long first;
1:456a2ba:     long last;
1:456a2ba: 
1:456a2ba:     public Sequence(long value) {
1:456a2ba:         first = last = value;
1:456a2ba:     }
1:456a2ba: 
1:456a2ba:     public Sequence(long first, long last) {
1:456a2ba:         this.first = first;
1:456a2ba:         this.last = last;
1:456a2ba:     }
1:456a2ba: 
1:456a2ba:     public boolean isAdjacentToLast(long value) {
1:456a2ba:         return last + 1 == value;
1:456a2ba:     }
1:456a2ba: 
1:456a2ba:     public boolean isAdjacentToFirst(long value) {
1:456a2ba:         return first - 1 == value;
1:456a2ba:     }
1:456a2ba: 
1:456a2ba:     public boolean contains(long value) {
1:456a2ba:         return first <= value && value <= last;
1:456a2ba:     }
1:456a2ba: 
1:456a2ba:     public long range() {
1:456a2ba:         return first == last ? 1 : (last - first) + 1;
1:456a2ba:     }
1:456a2ba:     
1:456a2ba:     @Override
1:456a2ba:     public String toString() {
1:eaac0d2:         return first == last ? "" + first : first + ".." + last;
1:456a2ba:     }
1:456a2ba: 
1:456a2ba:     public long getFirst() {
1:456a2ba:         return first;
1:456a2ba:     }
1:456a2ba: 
1:456a2ba:     public void setFirst(long first) {
1:456a2ba:         this.first = first;
1:456a2ba:     }
1:456a2ba: 
1:456a2ba:     public long getLast() {
1:456a2ba:         return last;
1:456a2ba:     }
1:456a2ba: 
1:456a2ba:     public void setLast(long last) {
1:456a2ba:         this.last = last;
1:456a2ba:     }
1:456a2ba:     
1:456a2ba:     public interface Closure<T extends Throwable> {
1:456a2ba:         public void execute(long value) throws T;
1:456a2ba:     }
1:456a2ba: 
1:456a2ba:     public <T extends Throwable> void each(Closure<T> closure) throws T {
1:456a2ba:         for( long i=first; i<=last; i++ ) {
1:456a2ba:             closure.execute(i);
1:456a2ba:         }
1:456a2ba:     }
1:456a2ba: 
1:456a2ba: }
============================================================================
author:Hiram R. Chirino
-------------------------------------------------------------------------------
commit:c5cf038
commit:1aab71b
/////////////////////////////////////////////////////////////////////////
1: package org.apache.activemq.store.kahadb.disk.util;
commit:715010a
commit:456a2ba
/////////////////////////////////////////////////////////////////////////
1: /**
1:  * Licensed to the Apache Software Foundation (ASF) under one or more
1:  * contributor license agreements.  See the NOTICE file distributed with
1:  * this work for additional information regarding copyright ownership.
1:  * The ASF licenses this file to You under the Apache License, Version 2.0
1:  * (the "License"); you may not use this file except in compliance with
1:  * the License.  You may obtain a copy of the License at
1:  *
1:  *      http://www.apache.org/licenses/LICENSE-2.0
1:  *
1:  * Unless required by applicable law or agreed to in writing, software
1:  * distributed under the License is distributed on an "AS IS" BASIS,
1:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:  * See the License for the specific language governing permissions and
1:  * limitations under the License.
1:  */
0: package org.apache.kahadb.util;
1: 
1: /**
1:  * Represents a range of numbers.
1:  * 
1:  * @author chirino
1:  */
1: public class Sequence extends LinkedNode<Sequence> {
1:     long first;
1:     long last;
1: 
1:     public Sequence(long value) {
1:         first = last = value;
1:     }
1: 
1:     public Sequence(long first, long last) {
1:         this.first = first;
1:         this.last = last;
1:     }
1: 
1:     public boolean isAdjacentToLast(long value) {
1:         return last + 1 == value;
1:     }
1: 
1:     public boolean isAdjacentToFirst(long value) {
1:         return first - 1 == value;
1:     }
1: 
1:     public boolean contains(long value) {
1:         return first <= value && value <= last;
1:     }
1: 
1:     public long range() {
1:         return first == last ? 1 : (last - first) + 1;
1:     }
1:     
1:     @Override
1:     public String toString() {
0:         return first == last ? "" + first : first + "-" + last;
1:     }
1: 
1:     public long getFirst() {
1:         return first;
1:     }
1: 
1:     public void setFirst(long first) {
1:         this.first = first;
1:     }
1: 
1:     public long getLast() {
1:         return last;
1:     }
1: 
1:     public void setLast(long last) {
1:         this.last = last;
1:     }
1:     
1:     public interface Closure<T extends Throwable> {
1:         public void execute(long value) throws T;
1:     }
1: 
1:     public <T extends Throwable> void each(Closure<T> closure) throws T {
1:         for( long i=first; i<=last; i++ ) {
1:             closure.execute(i);
1:         }
1:     }
1: 
1: }
author:Gary Tully
-------------------------------------------------------------------------------
commit:eaac0d2
/////////////////////////////////////////////////////////////////////////
1:         return first == last ? "" + first : first + ".." + last;
============================================================================