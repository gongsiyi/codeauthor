1:88acb0e: /**
1:88acb0e:  * Licensed to the Apache Software Foundation (ASF) under one or more
1:88acb0e:  * contributor license agreements.  See the NOTICE file distributed with
1:88acb0e:  * this work for additional information regarding copyright ownership.
1:88acb0e:  * The ASF licenses this file to You under the Apache License, Version 2.0
1:88acb0e:  * (the "License"); you may not use this file except in compliance with
1:88acb0e:  * the License.  You may obtain a copy of the License at
2:88acb0e:  *
1:230a86c:  *      http://www.apache.org/licenses/LICENSE-2.0
1:88acb0e:  *
1:88acb0e:  * Unless required by applicable law or agreed to in writing, software
1:88acb0e:  * distributed under the License is distributed on an "AS IS" BASIS,
1:88acb0e:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:88acb0e:  * See the License for the specific language governing permissions and
1:88acb0e:  * limitations under the License.
1:88acb0e:  */
3:88acb0e: 
1:88acb0e: package org.apache.activemq.util;
1:88acb0e: 
1:88acb0e: public class ByteSequence {
1:f812e34: 
1:88acb0e:     public byte[] data;
1:88acb0e:     public int offset;
1:88acb0e:     public int length;
1:88acb0e: 
1:b6a3990:     public ByteSequence() {
6:88acb0e:     }
1:0607226: 
1:88acb0e:     public ByteSequence(byte data[]) {
2:88acb0e:         this.data = data;
1:88acb0e:         this.offset = 0;
1:f812e34:         this.length = data.length;
1:88acb0e:     }
1:88acb0e: 
1:88acb0e:     public ByteSequence(byte data[], int offset, int length) {
1:88acb0e:         this.data = data;
2:88acb0e:         this.offset = offset;
1:f812e34:         this.length = length;
1:0607226:     }
1:f812e34: 
1:88acb0e:     public byte[] getData() {
1:88acb0e:         return data;
1:86cbdfd:     }
1:f812e34: 
1:88acb0e:     public int getLength() {
1:88acb0e:         return length;
1:88acb0e:     }
1:f812e34: 
1:88acb0e:     public int getOffset() {
1:88acb0e:         return offset;
1:88acb0e:     }
1:f812e34: 
1:8c218ee:     public int remaining() { return length - offset; }
1:8c218ee: 
1:f812e34:     public void setData(byte[] data) {
1:f812e34:         this.data = data;
1:f812e34:     }
1:f812e34: 
1:f812e34:     public void setLength(int length) {
1:f812e34:         this.length = length;
1:f812e34:     }
1:f812e34: 
1:f812e34:     public void setOffset(int offset) {
1:f812e34:         this.offset = offset;
1:f812e34:     }
1:f812e34: 
1:f812e34:     public void compact() {
1:f812e34:         if (length != data.length) {
1:f812e34:             byte t[] = new byte[length];
1:f812e34:             System.arraycopy(data, offset, t, 0, length);
1:f812e34:             data = t;
1:f812e34:             offset = 0;
1:f812e34:         }
1:f812e34:     }
1:88acb0e: 
1:8c218ee:     public void reset() {
1:8c218ee:         length = remaining();
1:e793260:         if (length > 0) {
1:e793260:             System.arraycopy(data, offset, data, 0, length);
1:e793260:         } else {
1:e793260:             length = 0;
1:e793260:         }
1:8c218ee:         offset = 0;
1:8c218ee:     }
1:8c218ee: 
1:1aab71b:     public int indexOf(ByteSequence needle, int pos) {
1:8c218ee:         int max = length - needle.length - offset;
1:1aab71b:         for (int i = pos; i < max; i++) {
1:1aab71b:             if (matches(needle, i)) {
1:1aab71b:                 return i;
1:1aab71b:             }
1:1aab71b:         }
1:1aab71b:         return -1;
1:1aab71b:     }
1:8c218ee: 
1:1aab71b:     private boolean matches(ByteSequence needle, int pos) {
1:1aab71b:         for (int i = 0; i < needle.length; i++) {
1:1aab71b:             if( data[offset + pos+ i] != needle.data[needle.offset + i] ) {
1:1aab71b:                 return false;
1:1aab71b:             }
1:1aab71b:         }
1:1aab71b:         return true;
1:1aab71b:     }
1:1aab71b: 
1:1aab71b:     private byte getByte(int i) {
1:1aab71b:         return data[offset+i];
1:1aab71b:     }
1:1aab71b: 
1:1aab71b:     final public int indexOf(byte value, int pos) {
1:1aab71b:         for (int i = pos; i < length; i++) {
1:1aab71b:             if (data[offset + i] == value) {
1:1aab71b:                 return i;
1:1aab71b:             }
1:1aab71b:         }
1:1aab71b:         return -1;
1:1aab71b:     }
1:1aab71b: 
1:8c218ee:     public boolean startsWith(final byte[] bytes) {
1:8c218ee:         if (length - offset < bytes.length) {
1:8c218ee:             return false;
1:8c218ee:         }
1:8c218ee:         for (int i = 0; i<bytes.length; i++) {
1:8c218ee:             if (data[offset+i] != bytes[i]) {
1:8c218ee:                 return false;
1:8c218ee:             }
1:8c218ee:         }
1:8c218ee:         return true;
1:8c218ee:     }
1:0607226: }
============================================================================
author:gtully
-------------------------------------------------------------------------------
commit:e793260
/////////////////////////////////////////////////////////////////////////
1:         if (length > 0) {
1:             System.arraycopy(data, offset, data, 0, length);
1:         } else {
1:             length = 0;
1:         }
commit:8c218ee
/////////////////////////////////////////////////////////////////////////
1:     public int remaining() { return length - offset; }
1: 
/////////////////////////////////////////////////////////////////////////
1:     public void reset() {
1:         length = remaining();
0:         System.arraycopy(data, offset, data, 0, length);
1:         offset = 0;
1:     }
1: 
1:         int max = length - needle.length - offset;
/////////////////////////////////////////////////////////////////////////
1: 
1:     public boolean startsWith(final byte[] bytes) {
1:         if (length - offset < bytes.length) {
1:             return false;
1:         }
1:         for (int i = 0; i<bytes.length; i++) {
1:             if (data[offset+i] != bytes[i]) {
1:                 return false;
1:             }
1:         }
1:         return true;
1:     }
author:Hiram R. Chirino
-------------------------------------------------------------------------------
commit:9a8f6e4
commit:1aab71b
/////////////////////////////////////////////////////////////////////////
1:     public int indexOf(ByteSequence needle, int pos) {
0:         int max = length - needle.length;
1:         for (int i = pos; i < max; i++) {
1:             if (matches(needle, i)) {
1:                 return i;
1:             }
1:         }
1:         return -1;
1:     }
1: 
1:     private boolean matches(ByteSequence needle, int pos) {
1:         for (int i = 0; i < needle.length; i++) {
1:             if( data[offset + pos+ i] != needle.data[needle.offset + i] ) {
1:                 return false;
1:             }
1:         }
1:         return true;
1:     }
1: 
1:     private byte getByte(int i) {
1:         return data[offset+i];
1:     }
1: 
1:     final public int indexOf(byte value, int pos) {
1:         for (int i = pos; i < length; i++) {
1:             if (data[offset + i] == value) {
1:                 return i;
1:             }
1:         }
1:         return -1;
1:     }
commit:f812e34
/////////////////////////////////////////////////////////////////////////
1: 
/////////////////////////////////////////////////////////////////////////
1:         this.length = data.length;
1:         this.length = length;
1: 
1: 
1: 
1: 
1:     public void setData(byte[] data) {
1:         this.data = data;
1:     }
1: 
1:     public void setLength(int length) {
1:         this.length = length;
1:     }
1: 
1:     public void setOffset(int offset) {
1:         this.offset = offset;
1:     }
1: 
1:     public void compact() {
1:         if (length != data.length) {
1:             byte t[] = new byte[length];
1:             System.arraycopy(data, offset, t, 0, length);
1:             data = t;
1:             offset = 0;
1:         }
1:     }
commit:230a86c
/////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////
1:  *      http://www.apache.org/licenses/LICENSE-2.0
commit:0607226
/////////////////////////////////////////////////////////////////////////
1: 	
0: 	public void compact() {
0: 		if( length != data.length ) {
0: 			byte t[] = new byte[length];
0: 			System.arraycopy(data, offset, t, 0, length);
0: 			data=t;
0: 			offset=0;
1: 		}
1: 	}
commit:86cbdfd
/////////////////////////////////////////////////////////////////////////
1: }
commit:88acb0e
/////////////////////////////////////////////////////////////////////////
1: /**
1:  *
1:  * Licensed to the Apache Software Foundation (ASF) under one or more
1:  * contributor license agreements.  See the NOTICE file distributed with
1:  * this work for additional information regarding copyright ownership.
1:  * The ASF licenses this file to You under the Apache License, Version 2.0
1:  * (the "License"); you may not use this file except in compliance with
1:  * the License.  You may obtain a copy of the License at
1:  *
0:  * http://www.apache.org/licenses/LICENSE-2.0
1:  *
1:  * Unless required by applicable law or agreed to in writing, software
1:  * distributed under the License is distributed on an "AS IS" BASIS,
1:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:  * See the License for the specific language governing permissions and
1:  * limitations under the License.
1:  */
1: 
1: package org.apache.activemq.util;
1: 
1: public class ByteSequence {
1: 	
1:     public byte[] data;
1:     public int offset;
1:     public int length;
1: 
1:     public ByteSequence(byte data[]) {
1:         this.data = data;
1:         this.offset = 0;
0:         this.length = data.length;            
1:     }
1: 
1:     public ByteSequence(byte data[], int offset, int length) {
1:         this.data = data;
1:         this.offset = offset;
0:         this.length = length;            
1:     }
1:     
1:     public byte[] getData() {
1:         return data;
1:     }
1:     public int getLength() {
1:         return length;
1:     }
1:     public int getOffset() {
1:         return offset;
1:     }
0: 	public void setData(byte[] data) {
1: 		this.data = data;
1: 	}
0: 	public void setLength(int length) {
0: 		this.length = length;
1: 	}
0: 	public void setOffset(int offset) {
1: 		this.offset = offset;
1: 	}
1: 
1: }
author:Timothy A. Bish
-------------------------------------------------------------------------------
commit:b6a3990
/////////////////////////////////////////////////////////////////////////
1:     public ByteSequence() {
0:     }
0: 
============================================================================