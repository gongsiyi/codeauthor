1:2e57fb5: /*
1:2e57fb5:  * Copyright 2006 the original author or authors.
1:a59c9ba:  *
1:2e57fb5:  * Licensed under the Apache License, Version 2.0 (the "License");
1:2e57fb5:  * you may not use this file except in compliance with the License.
1:2e57fb5:  * You may obtain a copy of the License at
3:2e57fb5:  *
1:2e57fb5:  *      http://www.apache.org/licenses/LICENSE-2.0
1:2e57fb5:  *
1:2e57fb5:  * Unless required by applicable law or agreed to in writing, software
1:2e57fb5:  * distributed under the License is distributed on an "AS IS" BASIS,
1:2e57fb5:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:2e57fb5:  * See the License for the specific language governing permissions and
1:2e57fb5:  * limitations under the License.
2:2e57fb5:  */
1:2e57fb5: package org.apache.activemq.pool;
5:2e57fb5: 
1:b66559e: import java.io.IOException;
1:b66559e: import javax.jms.Connection;
1:2e57fb5: import org.apache.activemq.ActiveMQConnection;
1:b66559e: import org.apache.activemq.jms.pool.ConnectionPool;
1:b66559e: import org.apache.activemq.jms.pool.JcaConnectionPool;
1:b66559e: import org.apache.activemq.transport.TransportListener;
1:b66559e: import org.slf4j.Logger;
1:b66559e: import org.slf4j.LoggerFactory;
1:2e57fb5: 
1:2e57fb5: public class JcaPooledConnectionFactory extends XaPooledConnectionFactory {
1:b66559e:     private static final transient Logger LOG = LoggerFactory.getLogger(JcaPooledConnectionFactory.class);
1:2e57fb5: 
1:2e57fb5:     private String name;
1:2e57fb5: 
1:2e57fb5:     public String getName() {
1:2e57fb5:         return name;
4:2e57fb5:     }
1:2e57fb5: 
1:2e57fb5:     public void setName(String name) {
1:2e57fb5:         this.name = name;
1:2e57fb5:     }
1:2e57fb5: 
1:b66559e:     protected ConnectionPool createConnectionPool(Connection connection) {
1:b66559e:         return new JcaConnectionPool(connection, getTransactionManager(), getName()) {
1:b66559e: 
1:b66559e:             @Override
1:b66559e:             protected Connection wrap(final Connection connection) {
1:b66559e:                 // Add a transport Listener so that we can notice if this connection
1:b66559e:                 // should be expired due to a connection failure.
1:b66559e:                 ((ActiveMQConnection)connection).addTransportListener(new TransportListener() {
1:b66559e:                     @Override
1:b66559e:                     public void onCommand(Object command) {
1:b66559e:                     }
1:b66559e: 
1:b66559e:                     @Override
1:b66559e:                     public void onException(IOException error) {
1:b66559e:                         synchronized (this) {
1:b66559e:                             setHasExpired(true);
1:960186a:                             // only log if not stopped
1:960186a:                             if (!stopped.get()) {
1:960186a:                                 LOG.info("Expiring connection " + connection + " on IOException: " + error.getMessage());
1:960186a:                                 // log stacktrace at debug level
1:960186a:                                 LOG.debug("Expiring connection " + connection + " on IOException: ", error);
1:960186a:                             }
1:b66559e:                         }
1:b66559e:                     }
1:b66559e: 
1:b66559e:                     @Override
1:b66559e:                     public void transportInterupted() {
1:b66559e:                     }
1:b66559e: 
1:b66559e:                     @Override
1:b66559e:                     public void transportResumed() {
1:b66559e:                     }
1:b66559e:                 });
1:b66559e: 
1:b66559e:                 // make sure that we set the hasFailed flag, in case the transport already failed
1:b66559e:                 // prior to the addition of our new TransportListener
1:b66559e:                 setHasExpired(((ActiveMQConnection) connection).isTransportFailed());
1:b66559e: 
1:b66559e:                 // may want to return an amq EnhancedConnection
1:b66559e:                 return connection;
1:b66559e:             }
1:b66559e: 
1:b66559e:             @Override
1:b66559e:             protected void unWrap(Connection connection) {
1:b66559e:                 if (connection != null) {
1:b66559e:                     ((ActiveMQConnection)connection).cleanUpTempDestinations();
1:b66559e:                 }
1:b66559e:             }
1:b66559e:         };
1:2e57fb5:     }
1:2e57fb5: }
============================================================================
author:Claus Ibsen
-------------------------------------------------------------------------------
commit:960186a
/////////////////////////////////////////////////////////////////////////
1:                             // only log if not stopped
1:                             if (!stopped.get()) {
1:                                 LOG.info("Expiring connection " + connection + " on IOException: " + error.getMessage());
1:                                 // log stacktrace at debug level
1:                                 LOG.debug("Expiring connection " + connection + " on IOException: ", error);
1:                             }
author:gtully
-------------------------------------------------------------------------------
commit:b66559e
/////////////////////////////////////////////////////////////////////////
1: import java.io.IOException;
1: import javax.jms.Connection;
1: import org.apache.activemq.jms.pool.ConnectionPool;
1: import org.apache.activemq.jms.pool.JcaConnectionPool;
1: import org.apache.activemq.transport.TransportListener;
1: import org.slf4j.Logger;
1: import org.slf4j.LoggerFactory;
1:     private static final transient Logger LOG = LoggerFactory.getLogger(JcaPooledConnectionFactory.class);
/////////////////////////////////////////////////////////////////////////
1:     protected ConnectionPool createConnectionPool(Connection connection) {
1:         return new JcaConnectionPool(connection, getTransactionManager(), getName()) {
1: 
1:             @Override
1:             protected Connection wrap(final Connection connection) {
1:                 // Add a transport Listener so that we can notice if this connection
1:                 // should be expired due to a connection failure.
1:                 ((ActiveMQConnection)connection).addTransportListener(new TransportListener() {
1:                     @Override
1:                     public void onCommand(Object command) {
1:                     }
1: 
1:                     @Override
1:                     public void onException(IOException error) {
1:                         synchronized (this) {
1:                             setHasExpired(true);
0:                             LOG.info("Expiring connection " + connection + " on IOException: " + error);
0:                             LOG.debug("Expiring connection on IOException", error);
1:                         }
1:                     }
1: 
1:                     @Override
1:                     public void transportInterupted() {
1:                     }
1: 
1:                     @Override
1:                     public void transportResumed() {
1:                     }
1:                 });
1: 
1:                 // make sure that we set the hasFailed flag, in case the transport already failed
1:                 // prior to the addition of our new TransportListener
1:                 setHasExpired(((ActiveMQConnection) connection).isTransportFailed());
1: 
1:                 // may want to return an amq EnhancedConnection
1:                 return connection;
1:             }
1: 
1:             @Override
1:             protected void unWrap(Connection connection) {
1:                 if (connection != null) {
1:                     ((ActiveMQConnection)connection).cleanUpTempDestinations();
1:                 }
1:             }
1:         };
author:Timothy A. Bish
-------------------------------------------------------------------------------
commit:a59c9ba
/////////////////////////////////////////////////////////////////////////
1:  *
/////////////////////////////////////////////////////////////////////////
0:         return new JcaConnectionPool(connection, getTransactionManager(), getName());
author:Guillaume Nodet
-------------------------------------------------------------------------------
commit:2e57fb5
/////////////////////////////////////////////////////////////////////////
1: /*
1:  * Copyright 2006 the original author or authors.
1:  *
1:  * Licensed under the Apache License, Version 2.0 (the "License");
1:  * you may not use this file except in compliance with the License.
1:  * You may obtain a copy of the License at
1:  *
1:  *      http://www.apache.org/licenses/LICENSE-2.0
1:  *
1:  * Unless required by applicable law or agreed to in writing, software
1:  * distributed under the License is distributed on an "AS IS" BASIS,
1:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:  * See the License for the specific language governing permissions and
1:  * limitations under the License.
1:  */
1: package org.apache.activemq.pool;
1: 
1: import org.apache.activemq.ActiveMQConnection;
0: import org.apache.activemq.ActiveMQConnectionFactory;
1: 
0: /**
1:  * 
1:  */
1: public class JcaPooledConnectionFactory extends XaPooledConnectionFactory {
1: 
1:     private String name;
1: 
0:     public JcaPooledConnectionFactory() {
0:         super();
1:     }
1: 
0:     public JcaPooledConnectionFactory(ActiveMQConnectionFactory connectionFactory) {
0:         super(connectionFactory);
1:     }
1: 
0:     public JcaPooledConnectionFactory(String brokerURL) {
0:         super(brokerURL);
1:     }
1: 
1:     public String getName() {
1:         return name;
1:     }
1: 
1:     public void setName(String name) {
1:         this.name = name;
1:     }
1: 
0:     protected ConnectionPool createConnectionPool(ActiveMQConnection connection) {
0:         return new JcaConnectionPool(connection, getPoolFactory(), getTransactionManager(), getName());
1:     }
1: 
1: }
============================================================================