1:7f883f6: /**
1:7f883f6:  * Licensed to the Apache Software Foundation (ASF) under one or more
1:7f883f6:  * contributor license agreements.  See the NOTICE file distributed with
1:7f883f6:  * this work for additional information regarding copyright ownership.
1:7f883f6:  * The ASF licenses this file to You under the Apache License, Version 2.0
1:7f883f6:  * (the "License"); you may not use this file except in compliance with
1:7f883f6:  * the License.  You may obtain a copy of the License at
1:b0c2a40:  *
1:230a86c:  *      http://www.apache.org/licenses/LICENSE-2.0
3:7f883f6:  *
1:446629b:  * Unless required by applicable law or agreed to in writing, software
1:7f883f6:  * distributed under the License is distributed on an "AS IS" BASIS,
1:7f883f6:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:7f883f6:  * See the License for the specific language governing permissions and
1:7f883f6:  * limitations under the License.
1:7f883f6:  */
1:446629b: package org.apache.activemq.command;
14:446629b: 
1:11afd5f: import org.apache.activemq.advisory.AdvisorySupport;
1:446629b: import org.apache.activemq.filter.BooleanExpression;
1:446629b: import org.apache.activemq.filter.MessageEvaluationContext;
1:446629b: import org.apache.activemq.util.JMSExceptionSupport;
1:8bf987b: import org.slf4j.Logger;
1:8bf987b: import org.slf4j.LoggerFactory;
1:446629b: 
1:446629b: import javax.jms.JMSException;
1:446629b: import java.io.IOException;
1:3da1373: import java.util.Arrays;
1:446629b: 
3:446629b: /**
1:446629b:  * @openwire:marshaller code="91"
1:a95c6db:  *
2:446629b:  */
1:446629b: public class NetworkBridgeFilter implements DataStructure, BooleanExpression {
1:230a86c: 
1:230a86c:     public static final byte DATA_STRUCTURE_TYPE = CommandTypes.NETWORK_BRIDGE_FILTER;
1:8bf987b:     static final Logger LOG = LoggerFactory.getLogger(NetworkBridgeFilter.class);
1:446629b: 
1:af1b232:     protected BrokerId networkBrokerId;
1:a95c6db:     protected int messageTTL;
1:a95c6db:     protected int consumerTTL;
1:8012f28:     transient ConsumerInfo consumerInfo;
1:446629b: 
1:446629b:     public NetworkBridgeFilter() {
3:446629b:     }
1:230a86c: 
1:a95c6db:     public NetworkBridgeFilter(ConsumerInfo consumerInfo, BrokerId networkBrokerId, int messageTTL, int consumerTTL) {
1:af1b232:         this.networkBrokerId = networkBrokerId;
1:a95c6db:         this.messageTTL = messageTTL;
1:a95c6db:         this.consumerTTL = consumerTTL;
1:8012f28:         this.consumerInfo = consumerInfo;
1:446629b:     }
1:446629b: 
1:cc81680:     @Override
1:446629b:     public byte getDataStructureType() {
1:446629b:         return DATA_STRUCTURE_TYPE;
1:446629b:     }
1:446629b: 
1:cc81680:     @Override
1:446629b:     public boolean isMarshallAware() {
2:446629b:         return false;
1:446629b:     }
1:af1b232: 
1:cc81680:     @Override
1:230a86c:     public boolean matches(MessageEvaluationContext mec) throws JMSException {
1:230a86c:         try {
1:230a86c:             // for Queues - the message can be acknowledged and dropped whilst
1:230a86c:             // still
1:230a86c:             // in the dispatch loop
1:230a86c:             // so need to get the reference to it
1:f89d4dc:             Message message = mec.getMessage();
1:af1b232:             return message != null && matchesForwardingFilter(message, mec);
1:230a86c:         } catch (IOException e) {
1:446629b:             throw JMSExceptionSupport.create(e);
1:446629b:         }
1:446629b:     }
1:230a86c: 
1:cc81680:     @Override
1:230a86c:     public Object evaluate(MessageEvaluationContext message) throws JMSException {
1:230a86c:         return matches(message) ? Boolean.TRUE : Boolean.FALSE;
1:446629b:     }
1:230a86c: 
1:af1b232:     protected boolean matchesForwardingFilter(Message message, MessageEvaluationContext mec) {
1:230a86c: 
1:230a86c:         if (contains(message.getBrokerPath(), networkBrokerId)) {
1:fc00993:             if (LOG.isTraceEnabled()) {
1:af1b232:                 LOG.trace("Message all ready routed once through target broker ("
1:af1b232:                         + networkBrokerId + "), path: "
1:3da1373:                         + Arrays.toString(message.getBrokerPath()) + " - ignoring: " + message);
1:446629b:             }
1:446629b:             return false;
1:446629b:         }
1:230a86c: 
1:446629b:         int hops = message.getBrokerPath() == null ? 0 : message.getBrokerPath().length;
1:230a86c: 
1:a95c6db:         if (messageTTL > -1 && hops >= messageTTL) {
1:fc00993:             if (LOG.isTraceEnabled()) {
1:a95c6db:                 LOG.trace("Message restricted to " + messageTTL + " network hops ignoring: " + message);
1:446629b:             }
1:446629b:             return false;
1:446629b:         }
1:230a86c: 
1:8012f28:         if (message.isAdvisory()) {
1:002ade7:             if (consumerInfo != null && consumerInfo.isNetworkSubscription() && isAdvisoryInterpretedByNetworkBridge(message)) {
1:8012f28:                 // they will be interpreted by the bridge leading to dup commands
1:9988fff:                 if (LOG.isTraceEnabled()) {
1:9988fff:                     LOG.trace("not propagating advisory to network sub: " + consumerInfo.getConsumerId() + ", message: "+ message);
1:9988fff:                 }
1:8012f28:                 return false;
1:8012f28:             } else if ( message.getDataStructure() != null && message.getDataStructure().getDataStructureType() == CommandTypes.CONSUMER_INFO) {
1:8012f28:                 ConsumerInfo info = (ConsumerInfo)message.getDataStructure();
1:8012f28:                 hops = info.getBrokerPath() == null ? 0 : info.getBrokerPath().length;
1:a95c6db:                 if (consumerTTL > -1 && hops >= consumerTTL) {
1:8012f28:                     if (LOG.isTraceEnabled()) {
1:a95c6db:                         LOG.trace("ConsumerInfo advisory restricted to " + consumerTTL + " network hops ignoring: " + message);
1:8012f28:                     }
1:8012f28:                     return false;
1:446629b:                 }
1:446629b: 
1:8012f28:                 if (contains(info.getBrokerPath(), networkBrokerId)) {
1:8012f28:                     LOG.trace("ConsumerInfo advisory all ready routed once through target broker ("
1:8012f28:                             + networkBrokerId + "), path: "
1:8012f28:                             + Arrays.toString(info.getBrokerPath()) + " - ignoring: " + message);
1:8012f28:                     return false;
1:8012f28:                 }
1:af1b232:             }
1:446629b:         }
1:446629b:         return true;
1:11afd5f:     }
1:11afd5f: 
1:002ade7:     public static boolean isAdvisoryInterpretedByNetworkBridge(Message message) {
1:cc81680:         return AdvisorySupport.isConsumerAdvisoryTopic(message.getDestination()) ||
1:cc81680:                 AdvisorySupport.isVirtualDestinationConsumerAdvisoryTopic(message.getDestination()) ||
1:cc81680:                 AdvisorySupport.isTempDestinationAdvisoryTopic(message.getDestination());
1:446629b:     }
1:230a86c: 
1:230a86c:     public static boolean contains(BrokerId[] brokerPath, BrokerId brokerId) {
1:230a86c:         if (brokerPath != null && brokerId != null) {
1:230a86c:             for (int i = 0; i < brokerPath.length; i++) {
1:ecf89a6:                 if (brokerId.equals(brokerPath[i])) {
1:446629b:                     return true;
1:ecf89a6:                 }
1:446629b:             }
1:446629b:         }
1:446629b:         return false;
1:446629b:     }
1:446629b: 
1:a95c6db:     // keep for backward compat with older
1:a95c6db:     // wire formats
1:446629b:     public int getNetworkTTL() {
1:a95c6db:         return messageTTL;
1:446629b:     }
1:230a86c: 
1:446629b:     public void setNetworkTTL(int networkTTL) {
1:a95c6db:         messageTTL = networkTTL;
1:a95c6db:         consumerTTL = networkTTL;
1:446629b:     }
1:230a86c: 
1:446629b:     /**
1:446629b:      * @openwire:property version=1 cache=true
1:446629b:      */
1:446629b:     public BrokerId getNetworkBrokerId() {
1:446629b:         return networkBrokerId;
1:446629b:     }
1:446629b: 
1:446629b:     public void setNetworkBrokerId(BrokerId remoteBrokerPath) {
2:446629b:         this.networkBrokerId = remoteBrokerPath;
1:86cbdfd:     }
1:446629b: 
1:a95c6db:     public void setMessageTTL(int messageTTL) {
1:a95c6db:         this.messageTTL = messageTTL;
1:a95c6db:     }
1:a95c6db: 
1:a95c6db:     /**
1:a95c6db:      * @openwire:property version=10
1:a95c6db:      */
1:a95c6db:     public int getMessageTTL() {
1:a95c6db:         return this.messageTTL;
1:a95c6db:     }
1:a95c6db: 
1:a95c6db:     public void setConsumerTTL(int consumerTTL) {
1:a95c6db:         this.consumerTTL = consumerTTL;
1:a95c6db:     }
1:a95c6db: 
1:a95c6db:     /**
1:a95c6db:      * @openwire:property version=10
1:a95c6db:      */
1:a95c6db:     public int getConsumerTTL() {
1:a95c6db:         return this.consumerTTL;
1:a95c6db:     }
1:446629b: }
============================================================================
author:Christopher L. Shannon (cshannon)
-------------------------------------------------------------------------------
commit:cc81680
/////////////////////////////////////////////////////////////////////////
1:     @Override
1:     @Override
1:     @Override
/////////////////////////////////////////////////////////////////////////
1:     @Override
/////////////////////////////////////////////////////////////////////////
1:         return AdvisorySupport.isConsumerAdvisoryTopic(message.getDestination()) ||
1:                 AdvisorySupport.isVirtualDestinationConsumerAdvisoryTopic(message.getDestination()) ||
1:                 AdvisorySupport.isTempDestinationAdvisoryTopic(message.getDestination());
author:gtully
-------------------------------------------------------------------------------
commit:002ade7
/////////////////////////////////////////////////////////////////////////
1:             if (consumerInfo != null && consumerInfo.isNetworkSubscription() && isAdvisoryInterpretedByNetworkBridge(message)) {
/////////////////////////////////////////////////////////////////////////
1:     public static boolean isAdvisoryInterpretedByNetworkBridge(Message message) {
commit:11afd5f
/////////////////////////////////////////////////////////////////////////
1: import org.apache.activemq.advisory.AdvisorySupport;
/////////////////////////////////////////////////////////////////////////
0:             if (consumerInfo != null && consumerInfo.isNetworkSubscription() && advisoryIsInterpretedByNetworkBridge(message)) {
/////////////////////////////////////////////////////////////////////////
0:     private boolean advisoryIsInterpretedByNetworkBridge(Message message) {
0:         return AdvisorySupport.isConsumerAdvisoryTopic(message.getDestination()) || AdvisorySupport.isTempDestinationAdvisoryTopic(message.getDestination());
1:     }
1: 
author:Gary Tully
-------------------------------------------------------------------------------
commit:a95c6db
/////////////////////////////////////////////////////////////////////////
1:  *
/////////////////////////////////////////////////////////////////////////
1:     protected int messageTTL;
1:     protected int consumerTTL;
1:     public NetworkBridgeFilter(ConsumerInfo consumerInfo, BrokerId networkBrokerId, int messageTTL, int consumerTTL) {
1:         this.messageTTL = messageTTL;
1:         this.consumerTTL = consumerTTL;
/////////////////////////////////////////////////////////////////////////
1:         if (messageTTL > -1 && hops >= messageTTL) {
1:                 LOG.trace("Message restricted to " + messageTTL + " network hops ignoring: " + message);
/////////////////////////////////////////////////////////////////////////
1:                 if (consumerTTL > -1 && hops >= consumerTTL) {
1:                         LOG.trace("ConsumerInfo advisory restricted to " + consumerTTL + " network hops ignoring: " + message);
/////////////////////////////////////////////////////////////////////////
1:     // keep for backward compat with older
1:     // wire formats
1:         return messageTTL;
1:         messageTTL = networkTTL;
1:         consumerTTL = networkTTL;
/////////////////////////////////////////////////////////////////////////
1:     public void setMessageTTL(int messageTTL) {
1:         this.messageTTL = messageTTL;
1:     }
1: 
1:     /**
1:      * @openwire:property version=10
1:      */
1:     public int getMessageTTL() {
1:         return this.messageTTL;
1:     }
1: 
1:     public void setConsumerTTL(int consumerTTL) {
1:         this.consumerTTL = consumerTTL;
1:     }
1: 
1:     /**
1:      * @openwire:property version=10
1:      */
1:     public int getConsumerTTL() {
1:         return this.consumerTTL;
1:     }
commit:9988fff
/////////////////////////////////////////////////////////////////////////
1:                 if (LOG.isTraceEnabled()) {
1:                     LOG.trace("not propagating advisory to network sub: " + consumerInfo.getConsumerId() + ", message: "+ message);
1:                 }
commit:8012f28
/////////////////////////////////////////////////////////////////////////
1:     transient ConsumerInfo consumerInfo;
0:     public NetworkBridgeFilter(ConsumerInfo consumerInfo, BrokerId networkBrokerId, int networkTTL) {
1:         this.consumerInfo = consumerInfo;
/////////////////////////////////////////////////////////////////////////
1:         if (message.isAdvisory()) {
0:             if (consumerInfo != null && consumerInfo.isNetworkSubscription()) {
1:                 // they will be interpreted by the bridge leading to dup commands
0:                 //if (LOG.isTraceEnabled()) {
0:                 LOG.error("not propagating advisory to network sub: " + consumerInfo.getConsumerId() + ", message: "+ message);
0:                 //}
1:                 return false;
1:             } else if ( message.getDataStructure() != null && message.getDataStructure().getDataStructureType() == CommandTypes.CONSUMER_INFO) {
1:                 ConsumerInfo info = (ConsumerInfo)message.getDataStructure();
1:                 hops = info.getBrokerPath() == null ? 0 : info.getBrokerPath().length;
0:                 if (hops >= networkTTL) {
1:                     if (LOG.isTraceEnabled()) {
0:                         LOG.trace("ConsumerInfo advisory restricted to " + networkTTL + " network hops ignoring: " + message);
1:                     }
1:                     return false;
1:                 if (contains(info.getBrokerPath(), networkBrokerId)) {
1:                     LOG.trace("ConsumerInfo advisory all ready routed once through target broker ("
1:                             + networkBrokerId + "), path: "
1:                             + Arrays.toString(info.getBrokerPath()) + " - ignoring: " + message);
1:                     return false;
1:                 }
commit:af1b232
/////////////////////////////////////////////////////////////////////////
1:     protected BrokerId networkBrokerId;
0:     protected int networkTTL;
0:     public NetworkBridgeFilter(BrokerId networkBrokerId, int networkTTL) {
1:         this.networkBrokerId = networkBrokerId;
/////////////////////////////////////////////////////////////////////////
1:             return message != null && matchesForwardingFilter(message, mec);
/////////////////////////////////////////////////////////////////////////
1:     protected boolean matchesForwardingFilter(Message message, MessageEvaluationContext mec) {
1:                 LOG.trace("Message all ready routed once through target broker ("
/////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////
1: 
0:             if (contains(info.getBrokerPath(), networkBrokerId)) {
0:                 LOG.trace("ConsumerInfo advisory all ready routed once through target broker ("
1:                         + networkBrokerId + "), path: "
0:                         + Arrays.toString(info.getBrokerPath()) + " - ignoring: " + message);
1:             }
commit:3da1373
/////////////////////////////////////////////////////////////////////////
1: import java.util.Arrays;
/////////////////////////////////////////////////////////////////////////
0:                 LOG.trace("Message all ready routed once through this broker ("
0:                         + networkBrokerId + "), path: "
1:                         + Arrays.toString(message.getBrokerPath()) + " - ignoring: " + message);
author:Hiram R. Chirino
-------------------------------------------------------------------------------
commit:9a8f6e4
commit:b0c2a40
/////////////////////////////////////////////////////////////////////////
1:  * 
commit:ecf89a6
/////////////////////////////////////////////////////////////////////////
1:                 if (brokerId.equals(brokerPath[i])) {
1:                 }
commit:fc00993
/////////////////////////////////////////////////////////////////////////
0:     static final Log LOG = LogFactory.getLog(NetworkBridgeFilter.class);
/////////////////////////////////////////////////////////////////////////
1:             if (LOG.isTraceEnabled()) {
0:                 LOG.trace("Message all ready routed once through this broker - ignoring: " + message);
/////////////////////////////////////////////////////////////////////////
1:             if (LOG.isTraceEnabled()) {
0:                 LOG.trace("Message restricted to " + networkTTL + " network hops ignoring: " + message);
/////////////////////////////////////////////////////////////////////////
0:                 if (LOG.isTraceEnabled()) {
0:                     LOG.trace("ConsumerInfo advisory restricted to " + networkTTL + " network hops ignoring: " + message);
commit:230a86c
/////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////
1:  *      http://www.apache.org/licenses/LICENSE-2.0
/////////////////////////////////////////////////////////////////////////
1: 
0:     static final Log log = LogFactory.getLog(NetworkBridgeFilter.class);
1:     public static final byte DATA_STRUCTURE_TYPE = CommandTypes.NETWORK_BRIDGE_FILTER;
1: 
/////////////////////////////////////////////////////////////////////////
1:     public boolean matches(MessageEvaluationContext mec) throws JMSException {
1:         try {
1:             // for Queues - the message can be acknowledged and dropped whilst
1:             // still
1:             // in the dispatch loop
1:             // so need to get the reference to it
0:             return message != null && matchesForwardingFilter(message);
1:         } catch (IOException e) {
1: 
1:     public Object evaluate(MessageEvaluationContext message) throws JMSException {
1:         return matches(message) ? Boolean.TRUE : Boolean.FALSE;
1: 
0:     protected boolean matchesForwardingFilter(Message message) {
1: 
1:         if (contains(message.getBrokerPath(), networkBrokerId)) {
0:             if (log.isTraceEnabled()) {
1: 
1: 
0:         if (hops >= networkTTL) {
0:             if (log.isTraceEnabled()) {
1: 
0:         if (message.isAdvisory() && message.getDataStructure() != null && message.getDataStructure().getDataStructureType() == CommandTypes.CONSUMER_INFO) {
0:             ConsumerInfo info = (ConsumerInfo)message.getDataStructure();
0:             if (hops >= networkTTL) {
0:                 if (log.isTraceEnabled()) {
/////////////////////////////////////////////////////////////////////////
1: 
1:     public static boolean contains(BrokerId[] brokerPath, BrokerId brokerId) {
1:         if (brokerPath != null && brokerId != null) {
1:             for (int i = 0; i < brokerPath.length; i++) {
0:                 if (brokerId.equals(brokerPath[i]))
/////////////////////////////////////////////////////////////////////////
1: 
1: 
commit:86cbdfd
/////////////////////////////////////////////////////////////////////////
1: }
commit:7f883f6
/////////////////////////////////////////////////////////////////////////
1: /**
1:  *
1:  * Licensed to the Apache Software Foundation (ASF) under one or more
1:  * contributor license agreements.  See the NOTICE file distributed with
1:  * this work for additional information regarding copyright ownership.
1:  * The ASF licenses this file to You under the Apache License, Version 2.0
1:  * (the "License"); you may not use this file except in compliance with
1:  * the License.  You may obtain a copy of the License at
1:  *
1:  *
1:  * distributed under the License is distributed on an "AS IS" BASIS,
1:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:  * See the License for the specific language governing permissions and
1:  * limitations under the License.
1:  */
commit:446629b
/////////////////////////////////////////////////////////////////////////
1: /** 
0:  * <a href="http://activemq.org">ActiveMQ: The Open Source Message Fabric</a>
0:  * 
0:  * Copyright 2005 Hiram Chirino
0:  * 
0:  * Licensed under the Apache License, Version 2.0 (the "License"); 
0:  * you may not use this file except in compliance with the License. 
0:  * You may obtain a copy of the License at 
0:  * 
0:  * http://www.apache.org/licenses/LICENSE-2.0
0:  * 
1:  * Unless required by applicable law or agreed to in writing, software
0:  * distributed under the License is distributed on an "AS IS" BASIS, 
0:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. 
0:  * See the License for the specific language governing permissions and 
0:  * limitations under the License. 
0:  * 
0:  **/
1: 
1: package org.apache.activemq.command;
1: 
1: import java.io.IOException;
1: 
1: import javax.jms.JMSException;
1: 
1: import org.apache.activemq.filter.BooleanExpression;
1: import org.apache.activemq.filter.MessageEvaluationContext;
1: import org.apache.activemq.util.JMSExceptionSupport;
0: import org.apache.commons.logging.Log;
0: import org.apache.commons.logging.LogFactory;
1: 
1: /**
1:  * @openwire:marshaller code="91"
0:  * @version $Revision: 1.12 $
1:  */
1: public class NetworkBridgeFilter implements DataStructure, BooleanExpression {
1:     
0:     static final Log log=LogFactory.getLog(NetworkBridgeFilter.class);
0:     public static final byte DATA_STRUCTURE_TYPE=CommandTypes.NETWORK_BRIDGE_FILTER;
1: 
0:     private BrokerId networkBrokerId;
0:     private int networkTTL;
1: 
1:     public NetworkBridgeFilter() {
1:     }
1:     
0:     public NetworkBridgeFilter(BrokerId remoteBrokerPath, int networkTTL) {
1:         this.networkBrokerId = remoteBrokerPath;
0:         this.networkTTL = networkTTL;
1:     }
1: 
1:     public byte getDataStructureType() {
1:         return DATA_STRUCTURE_TYPE;
1:     }
1: 
1:     public boolean isMarshallAware() {
1:         return false;
1:     }
1: 
1: 
0:     public boolean matches(MessageEvaluationContext message) throws JMSException{
0:         try{
0:             return matchesForwardingFilter(message.getMessage());
0:         }catch(IOException e){
1:             throw JMSExceptionSupport.create(e);
1:         }
1:     }
1:     
0:     public Object evaluate(MessageEvaluationContext message) throws JMSException{
0:         return matches(message)?Boolean.TRUE:Boolean.FALSE;
1:     }
1:     
0:     protected boolean matchesForwardingFilter(Message message){
1:         
0:         if ( contains(message.getBrokerPath(), networkBrokerId) ){
0:             if (log.isTraceEnabled()){
0:                 log.trace("Message all ready routed once through this broker - ignoring: " + message);
1:             }
1:             return false;
1:         }
1:         
1:         int hops = message.getBrokerPath() == null ? 0 : message.getBrokerPath().length;
1:         
0:         if(hops >= networkTTL){
0:             if (log.isTraceEnabled()){
0:                 log.trace("Message restricted to " + networkTTL + " network hops ignoring: " + message);
1:             }
1:             return false;
1:         }
1:         
0:         // Don't propagate advisory messages about network subscriptions
0:         if(message.isAdvisory()&&message.getDataStructure()!=null
0:                         &&message.getDataStructure().getDataStructureType()==CommandTypes.CONSUMER_INFO){
0:             ConsumerInfo info=(ConsumerInfo) message.getDataStructure();
0:             hops = info.getBrokerPath() == null ? 0 : message.getBrokerPath().length;
0:             if(hops >= networkTTL ){
0:                 if (log.isTraceEnabled()){
0:                     log.trace("ConsumerInfo advisory restricted to " + networkTTL + " network hops ignoring: " + message);
1:                 }
1:                 return false;
1:             }
1:         }
1:         return true;
1:     }
1:     
0:     public static boolean contains(BrokerId[] brokerPath,BrokerId brokerId){
0:         if(brokerPath!=null){
0:             for(int i=0;i<brokerPath.length;i++){
0:                 if(brokerId.equals(brokerPath[i]))
1:                     return true;
1:             }
1:         }
1:         return false;
1:     }
1: 
1:     /**
0:      * @openwire:property version=1
1:      */
1:     public int getNetworkTTL() {
0:         return networkTTL;
1:     }
1:     public void setNetworkTTL(int networkTTL) {
0:         this.networkTTL = networkTTL;
1:     }
1:     
1:     /**
1:      * @openwire:property version=1 cache=true
1:      */
1:     public BrokerId getNetworkBrokerId() {
1:         return networkBrokerId;
1:     }
1: 
1:     public void setNetworkBrokerId(BrokerId remoteBrokerPath) {
1:         this.networkBrokerId = remoteBrokerPath;
1:     }
1: 
1: }
author:Bosanac Dejan
-------------------------------------------------------------------------------
commit:ecb10e9
/////////////////////////////////////////////////////////////////////////
0: import javax.jms.JMSException;
0: import java.io.IOException;
0: import java.util.Arrays;
0: 
/////////////////////////////////////////////////////////////////////////
0:                 return false;
commit:8bf987b
/////////////////////////////////////////////////////////////////////////
1: import org.slf4j.Logger;
1: import org.slf4j.LoggerFactory;
/////////////////////////////////////////////////////////////////////////
1:     static final Logger LOG = LoggerFactory.getLogger(NetworkBridgeFilter.class);
author:Robert Davies
-------------------------------------------------------------------------------
commit:14180c5
/////////////////////////////////////////////////////////////////////////
0:             hops = info.getBrokerPath() == null ? 0 : info.getBrokerPath().length;
/////////////////////////////////////////////////////////////////////////
0:         if(brokerPath!=null && brokerId != null){
commit:f89d4dc
/////////////////////////////////////////////////////////////////////////
0:     public boolean matches(MessageEvaluationContext mec) throws JMSException{
0:             //so need to get the reference to it
1:             Message message = mec.getMessage();
0:             return message != null &&  matchesForwardingFilter(message);
commit:55f4aad
/////////////////////////////////////////////////////////////////////////
0:             //for Queues - the message can be acknowledged and dropped whilst still
0:             //in the dispatch loop
0:             return message.getMessage() != null &&  matchesForwardingFilter(message.getMessage());
============================================================================