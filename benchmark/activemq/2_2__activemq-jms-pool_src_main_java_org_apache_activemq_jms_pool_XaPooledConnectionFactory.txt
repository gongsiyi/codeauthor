1:b66559e: /**
1:b66559e:  * Licensed to the Apache Software Foundation (ASF) under one or more
1:b66559e:  * contributor license agreements.  See the NOTICE file distributed with
1:b66559e:  * this work for additional information regarding copyright ownership.
1:b66559e:  * The ASF licenses this file to You under the Apache License, Version 2.0
1:b66559e:  * (the "License"); you may not use this file except in compliance with
1:b66559e:  * the License.  You may obtain a copy of the License at
1:b66559e:  *
1:b66559e:  *      http://www.apache.org/licenses/LICENSE-2.0
1:b66559e:  *
1:b66559e:  * Unless required by applicable law or agreed to in writing, software
1:b66559e:  * distributed under the License is distributed on an "AS IS" BASIS,
1:b66559e:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:b66559e:  * See the License for the specific language governing permissions and
1:b66559e:  * limitations under the License.
1:b66559e:  */
1:b66559e: package org.apache.activemq.jms.pool;
6:b66559e: 
1:b66559e: import java.io.Serializable;
1:b66559e: import java.util.Hashtable;
1:f395c70: 
1:b66559e: import javax.jms.Connection;
1:577b29c: import javax.jms.JMSException;
1:577b29c: import javax.jms.XAConnectionFactory;
1:b66559e: import javax.naming.Binding;
1:b66559e: import javax.naming.Context;
1:b66559e: import javax.naming.InitialContext;
1:b66559e: import javax.naming.Name;
1:b66559e: import javax.naming.NamingEnumeration;
1:b66559e: import javax.naming.spi.ObjectFactory;
1:b66559e: import javax.transaction.TransactionManager;
1:b66559e: 
1:b66559e: import org.slf4j.Logger;
1:b66559e: import org.slf4j.LoggerFactory;
1:b66559e: 
1:b66559e: /**
1:f395c70:  * A pooled connection factory that automatically enlists sessions in the
1:f395c70:  * current active XA transaction if any.
1:b66559e:  */
1:459593c: public class XaPooledConnectionFactory extends PooledConnectionFactory implements ObjectFactory, Serializable {
1:b66559e: 
1:b66559e:     private static final transient Logger LOG = LoggerFactory.getLogger(XaPooledConnectionFactory.class);
1:f395c70:     private static final long serialVersionUID = -6545688026350913005L;
1:f395c70: 
1:b66559e:     private TransactionManager transactionManager;
1:b66559e:     private boolean tmFromJndi = false;
1:b66559e:     private String tmJndiName = "java:/TransactionManager";
1:b66559e: 
1:b66559e:     public TransactionManager getTransactionManager() {
1:b66559e:         if (transactionManager == null && tmFromJndi) {
1:b66559e:             try {
1:b66559e:                 transactionManager = (TransactionManager) new InitialContext().lookup(getTmJndiName());
1:b66559e:             } catch (Throwable ignored) {
1:b66559e:                 if (LOG.isTraceEnabled()) {
1:b66559e:                     LOG.trace("exception on tmFromJndi: " + getTmJndiName(), ignored);
5:b66559e:                 }
1:b66559e:             }
1:b66559e:         }
1:b66559e:         return transactionManager;
1:b66559e:     }
1:b66559e: 
1:b66559e:     public void setTransactionManager(TransactionManager transactionManager) {
1:b66559e:         this.transactionManager = transactionManager;
1:b66559e:     }
1:b66559e: 
5:b66559e:     @Override
1:577b29c:     public void setConnectionFactory(Object toUse) {
1:577b29c:         if (toUse instanceof XAConnectionFactory) {
1:577b29c:             connectionFactory = toUse;
1:577b29c:         } else {
1:577b29c:             throw new IllegalArgumentException("connectionFactory should implement javax.xml.XAConnectionFactory");
1:577b29c:         }
1:577b29c:     }
1:577b29c: 
1:577b29c:     @Override
1:577b29c:     protected Connection createConnection(ConnectionKey key) throws JMSException {
1:577b29c:         if (connectionFactory instanceof XAConnectionFactory) {
1:577b29c:             if (key.getUserName() == null && key.getPassword() == null) {
1:577b29c:                 return ((XAConnectionFactory) connectionFactory).createXAConnection();
1:577b29c:             } else {
1:577b29c:                 return ((XAConnectionFactory) connectionFactory).createXAConnection(key.getUserName(), key.getPassword());
1:577b29c:             }
1:577b29c:         } else {
1:577b29c:             throw new IllegalStateException("connectionFactory should implement javax.jms.XAConnectionFactory");
1:577b29c:         }
1:577b29c:     }
1:577b29c: 
1:577b29c:     @Override
1:b66559e:     protected ConnectionPool createConnectionPool(Connection connection) {
1:b66559e:         return new XaConnectionPool(connection, getTransactionManager());
1:b66559e:     }
1:b66559e: 
1:b66559e:     @Override
1:b66559e:     public Object getObjectInstance(Object obj, Name name, Context nameCtx, Hashtable<?, ?> environment) throws Exception {
1:b66559e:         setTmFromJndi(true);
1:b66559e:         configFromJndiConf(obj);
1:b66559e:         if (environment != null) {
1:b66559e:             IntrospectionSupport.setProperties(this, environment);
1:b66559e:         }
1:b66559e:         return this;
1:b66559e:     }
1:b66559e: 
1:b66559e:     private void configFromJndiConf(Object rootContextName) {
1:b66559e:         if (rootContextName instanceof String) {
1:b66559e:             String name = (String) rootContextName;
1:b66559e:             name = name.substring(0, name.lastIndexOf('/')) + "/conf" + name.substring(name.lastIndexOf('/'));
1:b66559e:             try {
1:b66559e:                 InitialContext ctx = new InitialContext();
1:f395c70:                 NamingEnumeration<Binding> bindings = ctx.listBindings(name);
1:b66559e: 
1:b66559e:                 while (bindings.hasMore()) {
1:f395c70:                     Binding bd = bindings.next();
1:b66559e:                     IntrospectionSupport.setProperty(this, bd.getName(), bd.getObject());
1:b66559e:                 }
1:b66559e: 
1:b66559e:             } catch (Exception ignored) {
1:b66559e:                 if (LOG.isTraceEnabled()) {
1:b66559e:                     LOG.trace("exception on config from jndi: " + name, ignored);
1:b66559e:                 }
1:b66559e:             }
1:b66559e:         }
1:b66559e:     }
1:b66559e: 
1:b66559e:     public String getTmJndiName() {
1:b66559e:         return tmJndiName;
1:b66559e:     }
1:b66559e: 
1:b66559e:     public void setTmJndiName(String tmJndiName) {
1:b66559e:         this.tmJndiName = tmJndiName;
1:b66559e:     }
1:b66559e: 
1:b66559e:     public boolean isTmFromJndi() {
1:b66559e:         return tmFromJndi;
1:b66559e:     }
1:b66559e: 
1:b66559e:     /**
1:b66559e:      * Allow transaction manager resolution from JNDI (ee deployment)
1:f395c70:      *
1:b66559e:      * @param tmFromJndi
1:b66559e:      */
1:b66559e:     public void setTmFromJndi(boolean tmFromJndi) {
1:b66559e:         this.tmFromJndi = tmFromJndi;
1:b66559e:     }
1:b66559e: }
============================================================================
author:Timothy Bish
-------------------------------------------------------------------------------
commit:577b29c
/////////////////////////////////////////////////////////////////////////
1: import javax.jms.JMSException;
1: import javax.jms.XAConnectionFactory;
/////////////////////////////////////////////////////////////////////////
1:     public void setConnectionFactory(Object toUse) {
1:         if (toUse instanceof XAConnectionFactory) {
1:             connectionFactory = toUse;
1:         } else {
1:             throw new IllegalArgumentException("connectionFactory should implement javax.xml.XAConnectionFactory");
1:         }
1:     }
1: 
1:     @Override
1:     protected Connection createConnection(ConnectionKey key) throws JMSException {
1:         if (connectionFactory instanceof XAConnectionFactory) {
1:             if (key.getUserName() == null && key.getPassword() == null) {
1:                 return ((XAConnectionFactory) connectionFactory).createXAConnection();
1:             } else {
1:                 return ((XAConnectionFactory) connectionFactory).createXAConnection(key.getUserName(), key.getPassword());
1:             }
1:         } else {
1:             throw new IllegalStateException("connectionFactory should implement javax.jms.XAConnectionFactory");
1:         }
1:     }
1: 
1:     @Override
commit:459593c
/////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////
1: public class XaPooledConnectionFactory extends PooledConnectionFactory implements ObjectFactory, Serializable {
/////////////////////////////////////////////////////////////////////////
commit:f395c70
/////////////////////////////////////////////////////////////////////////
1: 
/////////////////////////////////////////////////////////////////////////
1:  * A pooled connection factory that automatically enlists sessions in the
1:  * current active XA transaction if any.
0: public class XaPooledConnectionFactory extends PooledConnectionFactory implements ObjectFactory, Serializable, QueueConnectionFactory, TopicConnectionFactory {
1:     private static final long serialVersionUID = -6545688026350913005L;
1: 
/////////////////////////////////////////////////////////////////////////
1:                 NamingEnumeration<Binding> bindings = ctx.listBindings(name);
1:                     Binding bd = bindings.next();
/////////////////////////////////////////////////////////////////////////
1:      *
/////////////////////////////////////////////////////////////////////////
author:gtully
-------------------------------------------------------------------------------
commit:b66559e
/////////////////////////////////////////////////////////////////////////
1: /**
1:  * Licensed to the Apache Software Foundation (ASF) under one or more
1:  * contributor license agreements.  See the NOTICE file distributed with
1:  * this work for additional information regarding copyright ownership.
1:  * The ASF licenses this file to You under the Apache License, Version 2.0
1:  * (the "License"); you may not use this file except in compliance with
1:  * the License.  You may obtain a copy of the License at
1:  *
1:  *      http://www.apache.org/licenses/LICENSE-2.0
1:  *
1:  * Unless required by applicable law or agreed to in writing, software
1:  * distributed under the License is distributed on an "AS IS" BASIS,
1:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:  * See the License for the specific language governing permissions and
1:  * limitations under the License.
1:  */
1: package org.apache.activemq.jms.pool;
1: 
1: import java.io.Serializable;
1: import java.util.Hashtable;
1: import javax.jms.Connection;
0: import javax.jms.ConnectionFactory;
0: import javax.jms.JMSException;
0: import javax.jms.QueueConnection;
0: import javax.jms.QueueConnectionFactory;
0: import javax.jms.TopicConnection;
0: import javax.jms.TopicConnectionFactory;
0: import javax.jms.XAConnectionFactory;
1: import javax.naming.Binding;
1: import javax.naming.Context;
1: import javax.naming.InitialContext;
1: import javax.naming.Name;
1: import javax.naming.NamingEnumeration;
1: import javax.naming.spi.ObjectFactory;
1: import javax.transaction.TransactionManager;
1: 
1: import org.slf4j.Logger;
1: import org.slf4j.LoggerFactory;
1: 
1: /**
0:  * A pooled connection factory that automatically enlists
0:  * sessions in the current active XA transaction if any.
1:  */
0: public class XaPooledConnectionFactory extends PooledConnectionFactory implements ObjectFactory,
0:         Serializable, QueueConnectionFactory, TopicConnectionFactory {
1: 
1:     private static final transient Logger LOG = LoggerFactory.getLogger(XaPooledConnectionFactory.class);
1:     private TransactionManager transactionManager;
1:     private boolean tmFromJndi = false;
1:     private String tmJndiName = "java:/TransactionManager";
1: 
1:     public TransactionManager getTransactionManager() {
1:         if (transactionManager == null && tmFromJndi) {
1:             try {
1:                 transactionManager = (TransactionManager) new InitialContext().lookup(getTmJndiName());
1:             } catch (Throwable ignored) {
1:                 if (LOG.isTraceEnabled()) {
1:                     LOG.trace("exception on tmFromJndi: " + getTmJndiName(), ignored);
1:                 }
1:             }
1:         }
1:         return transactionManager;
1:     }
1: 
1:     public void setTransactionManager(TransactionManager transactionManager) {
1:         this.transactionManager = transactionManager;
1:     }
1: 
1:     @Override
1:     protected ConnectionPool createConnectionPool(Connection connection) {
1:         return new XaConnectionPool(connection, getTransactionManager());
1:     }
1: 
1:     @Override
1:     public Object getObjectInstance(Object obj, Name name, Context nameCtx, Hashtable<?, ?> environment) throws Exception {
1:         setTmFromJndi(true);
1:         configFromJndiConf(obj);
1:         if (environment != null) {
1:             IntrospectionSupport.setProperties(this, environment);
1:         }
1:         return this;
1:     }
1: 
1:     private void configFromJndiConf(Object rootContextName) {
1:         if (rootContextName instanceof String) {
1:             String name = (String) rootContextName;
1:             name = name.substring(0, name.lastIndexOf('/')) + "/conf" + name.substring(name.lastIndexOf('/'));
1:             try {
1:                 InitialContext ctx = new InitialContext();
0:                 NamingEnumeration bindings = ctx.listBindings(name);
1: 
1:                 while (bindings.hasMore()) {
0:                     Binding bd = (Binding)bindings.next();
1:                     IntrospectionSupport.setProperty(this, bd.getName(), bd.getObject());
1:                 }
1: 
1:             } catch (Exception ignored) {
1:                 if (LOG.isTraceEnabled()) {
1:                     LOG.trace("exception on config from jndi: " + name, ignored);
1:                 }
1:             }
1:         }
1:     }
1: 
1:     public String getTmJndiName() {
1:         return tmJndiName;
1:     }
1: 
1:     public void setTmJndiName(String tmJndiName) {
1:         this.tmJndiName = tmJndiName;
1:     }
1: 
1:     public boolean isTmFromJndi() {
1:         return tmFromJndi;
1:     }
1: 
1:     /**
1:      * Allow transaction manager resolution from JNDI (ee deployment)
1:      * @param tmFromJndi
1:      */
1:     public void setTmFromJndi(boolean tmFromJndi) {
1:         this.tmFromJndi = tmFromJndi;
1:     }
1: 
1:     @Override
0:     public QueueConnection createQueueConnection() throws JMSException {
0:         return (QueueConnection) createConnection();
1:     }
1: 
1:     @Override
0:     public QueueConnection createQueueConnection(String userName, String password) throws JMSException {
0:         return (QueueConnection) createConnection(userName, password);
1:     }
1: 
1:     @Override
0:     public TopicConnection createTopicConnection() throws JMSException {
0:         return (TopicConnection) createConnection();
1:     }
1: 
1:     @Override
0:     public TopicConnection createTopicConnection(String userName, String password) throws JMSException {
0:         return (TopicConnection) createConnection(userName, password);
1:     }
1: 
1: }
============================================================================