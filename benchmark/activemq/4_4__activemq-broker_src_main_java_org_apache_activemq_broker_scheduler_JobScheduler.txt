3:7ae2055: /**
1:7ae2055:  * Licensed to the Apache Software Foundation (ASF) under one or more
1:7ae2055:  * contributor license agreements.  See the NOTICE file distributed with
1:7ae2055:  * this work for additional information regarding copyright ownership.
1:7ae2055:  * The ASF licenses this file to You under the Apache License, Version 2.0
1:7ae2055:  * (the "License"); you may not use this file except in compliance with
1:7ae2055:  * the License.  You may obtain a copy of the License at
1:7ae2055:  *
1:7ae2055:  *      http://www.apache.org/licenses/LICENSE-2.0
1:7ae2055:  *
1:7ae2055:  * Unless required by applicable law or agreed to in writing, software
1:7ae2055:  * distributed under the License is distributed on an "AS IS" BASIS,
1:7ae2055:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:7ae2055:  * See the License for the specific language governing permissions and
1:7ae2055:  * limitations under the License.
3:7ae2055:  */
1:7ae2055: package org.apache.activemq.broker.scheduler;
10:7ae2055: 
1:7ae2055: import java.util.List;
1:2d861da: 
1:1aab71b: import org.apache.activemq.util.ByteSequence;
1:c7c8e53: 
1:c7c8e53: public interface JobScheduler {
1:c7c8e53: 
1:e3154c3:     /**
1:7ae2055:      * @return the name of the scheduler
1:2d861da:      * @throws Exception
1:7ae2055:      */
1:2d861da:     String getName() throws Exception;
1:2d861da: 
1:2d861da:     /**
1:2d861da:      * Starts dispatch of scheduled Jobs to registered listeners.
1:2d861da:      *
1:2d861da:      * Any listener added after the start dispatch method can miss jobs so its
1:2d861da:      * important to register critical listeners before the start of job dispatching.
1:2d861da:      *
1:2d861da:      * @throws Exception
1:2d861da:      */
1:2d861da:     void startDispatching() throws Exception;
1:2d861da: 
1:2d861da:     /**
1:2d861da:      * Stops dispatching of scheduled Jobs to registered listeners.
1:2d861da:      *
1:2d861da:      * @throws Exception
1:2d861da:      */
1:2d861da:     void stopDispatching() throws Exception;
1:2d861da: 
1:2d861da:     /**
1:74846bb:      * Add a Job listener which will receive events related to scheduled jobs.
1:2d861da:      *
1:74846bb:      * @param listener
1:74846bb:      *      The job listener to add.
1:74846bb:      *
1:2d861da:      * @throws Exception
1:2d861da:      */
1:74846bb:     void addListener(JobListener listener) throws Exception;
1:2d861da: 
1:2d861da:     /**
1:74846bb:      * remove a JobListener that was previously registered.  If the given listener is not in
1:74846bb:      * the registry this method has no effect.
1:2d861da:      *
1:74846bb:      * @param listener
1:74846bb:      *      The listener that should be removed from the listener registry.
1:74846bb:      *
1:2d861da:      * @throws Exception
1:2d861da:      */
1:74846bb:     void removeListener(JobListener listener) throws Exception;
1:c7c8e53: 
1:7ae2055:     /**
1:e3154c3:      * Add a job to be scheduled
1:2d861da:      *
1:2d861da:      * @param jobId
1:2d861da:      *            a unique identifier for the job
1:2d861da:      * @param payload
1:2d861da:      *            the message to be sent when the job is scheduled
1:2d861da:      * @param delay
1:2d861da:      *            the time in milliseconds before the job will be run
1:74846bb:      *
1:74846bb:      * @throws Exception if an error occurs while scheduling the Job.
1:e3154c3:      */
1:2d861da:     void schedule(String jobId, ByteSequence payload, long delay) throws Exception;
1:e3154c3: 
1:7ae2055:     /**
1:7ae2055:      * Add a job to be scheduled
1:2d861da:      *
1:2d861da:      * @param jobId
1:2d861da:      *            a unique identifier for the job
1:2d861da:      * @param payload
1:2d861da:      *            the message to be sent when the job is scheduled
1:2d861da:      * @param cronEntry
1:74846bb:      *            The cron entry to use to schedule this job.
1:74846bb:      *
1:74846bb:      * @throws Exception if an error occurs while scheduling the Job.
1:7ae2055:      */
1:2d861da:     void schedule(String jobId, ByteSequence payload, String cronEntry) throws Exception;
1:c7c8e53: 
1:7ae2055:     /**
1:7ae2055:      * Add a job to be scheduled
1:2d861da:      *
1:2d861da:      * @param jobId
1:2d861da:      *            a unique identifier for the job
1:2d861da:      * @param payload
1:2d861da:      *            the message to be sent when the job is scheduled
1:2d861da:      * @param cronEntry
1:74846bb:      *            cron entry
1:2d861da:      * @param delay
1:2d861da:      *            time in ms to wait before scheduling
1:2d861da:      * @param period
1:2d861da:      *            the time in milliseconds between successive executions of the Job
1:2d861da:      * @param repeat
1:2d861da:      *            the number of times to execute the job - less than 0 will be repeated forever
1:e3154c3:      * @throws Exception
1:7ae2055:      */
1:2d861da:     void schedule(String jobId, ByteSequence payload, String cronEntry, long delay, long period, int repeat) throws Exception;
1:c7c8e53: 
1:7ae2055:     /**
1:7ae2055:      * remove all jobs scheduled to run at this time
1:2d861da:      *
1:7ae2055:      * @param time
1:74846bb:      *      The UTC time to use to remove a batch of scheduled Jobs.
1:74846bb:      *
1:2d861da:      * @throws Exception
1:7ae2055:      */
1:2d861da:     void remove(long time) throws Exception;
1:c7c8e53: 
1:7ae2055:     /**
1:7ae2055:      * remove a job with the matching jobId
1:2d861da:      *
1:7ae2055:      * @param jobId
1:74846bb:      *      The unique Job Id to search for and remove from the scheduled set of jobs.
1:74846bb:      *
1:74846bb:      * @throws Exception if an error occurs while removing the Job.
1:7ae2055:      */
1:2d861da:     void remove(String jobId) throws Exception;
1:2d861da: 
1:7ae2055:     /**
1:c7c8e53:      * remove all the Jobs from the scheduler
1:2d861da:      *
1:2d861da:      * @throws Exception
1:7ae2055:      */
1:2d861da:     void removeAllJobs() throws Exception;
1:2d861da: 
1:c7c8e53:     /**
1:c7c8e53:      * remove all the Jobs from the scheduler that are due between the start and finish times
1:2d861da:      *
1:2d861da:      * @param start
1:2d861da:      *            time in milliseconds
1:2d861da:      * @param finish
1:2d861da:      *            time in milliseconds
2:c7c8e53:      * @throws Exception
1:c7c8e53:      */
1:2d861da:     void removeAllJobs(long start, long finish) throws Exception;
1:c7c8e53: 
1:7ae2055:     /**
1:7ae2055:      * Get the next time jobs will be fired
1:2d861da:      *
1:7ae2055:      * @return the time in milliseconds
1:2d861da:      * @throws Exception
1:7ae2055:      */
1:2d861da:     long getNextScheduleTime() throws Exception;
1:2d861da: 
1:c7c8e53:     /**
1:c7c8e53:      * Get all the jobs scheduled to run next
1:2d861da:      *
1:c7c8e53:      * @return a list of jobs that will be scheduled next
1:c7c8e53:      * @throws Exception
1:c7c8e53:      */
1:2d861da:     List<Job> getNextScheduleJobs() throws Exception;
1:2d861da: 
1:c7c8e53:     /**
1:c7c8e53:      * Get all the outstanding Jobs
1:2d861da:      *
1:2d861da:      * @return a list of all jobs
1:2d861da:      * @throws Exception
1:c7c8e53:      */
1:2d861da:     List<Job> getAllJobs() throws Exception;
1:2d861da: 
1:c7c8e53:     /**
1:c7c8e53:      * Get all outstanding jobs due to run between start and finish
1:2d861da:      *
1:c7c8e53:      * @param start
1:c7c8e53:      * @param finish
1:c7c8e53:      * @return a list of jobs
1:c7c8e53:      * @throws Exception
1:c7c8e53:      */
1:2d861da:     List<Job> getAllJobs(long start, long finish) throws Exception;
1:7ae2055: 
1:7ae2055: }
============================================================================
author:Timothy Bish
-------------------------------------------------------------------------------
commit:74846bb
/////////////////////////////////////////////////////////////////////////
1:      * Add a Job listener which will receive events related to scheduled jobs.
1:      * @param listener
1:      *      The job listener to add.
1:      *
1:     void addListener(JobListener listener) throws Exception;
1:      * remove a JobListener that was previously registered.  If the given listener is not in
1:      * the registry this method has no effect.
1:      * @param listener
1:      *      The listener that should be removed from the listener registry.
1:      *
1:     void removeListener(JobListener listener) throws Exception;
/////////////////////////////////////////////////////////////////////////
1:      *
1:      * @throws Exception if an error occurs while scheduling the Job.
/////////////////////////////////////////////////////////////////////////
1:      *            The cron entry to use to schedule this job.
1:      *
1:      * @throws Exception if an error occurs while scheduling the Job.
/////////////////////////////////////////////////////////////////////////
1:      *            cron entry
/////////////////////////////////////////////////////////////////////////
1:      *      The UTC time to use to remove a batch of scheduled Jobs.
1:      *
/////////////////////////////////////////////////////////////////////////
1:      *      The unique Job Id to search for and remove from the scheduled set of jobs.
1:      *
1:      * @throws Exception if an error occurs while removing the Job.
author:Timothy A. Bish
-------------------------------------------------------------------------------
commit:2d861da
/////////////////////////////////////////////////////////////////////////
1: 
1:      * @throws Exception
1:     String getName() throws Exception;
1: 
1:     /**
1:      * Starts dispatch of scheduled Jobs to registered listeners.
1:      *
1:      * Any listener added after the start dispatch method can miss jobs so its
1:      * important to register critical listeners before the start of job dispatching.
1:      *
1:      * @throws Exception
1:      */
1:     void startDispatching() throws Exception;
1: 
1:     /**
1:      * Stops dispatching of scheduled Jobs to registered listeners.
1:      *
1:      * @throws Exception
1:      */
1:     void stopDispatching() throws Exception;
1: 
1:     /**
0:      * Add a Job listener
1:      *
0:      * @param l
1:      * @throws Exception
1:      */
0:     void addListener(JobListener l) throws Exception;
1: 
1:     /**
0:      * remove a JobListener
1:      *
0:      * @param l
1:      * @throws Exception
1:      */
0:     void removeListener(JobListener l) throws Exception;
1:      *
1:      * @param jobId
1:      *            a unique identifier for the job
1:      * @param payload
1:      *            the message to be sent when the job is scheduled
1:      * @param delay
1:      *            the time in milliseconds before the job will be run
1:     void schedule(String jobId, ByteSequence payload, long delay) throws Exception;
1:      *
1:      * @param jobId
1:      *            a unique identifier for the job
1:      * @param payload
1:      *            the message to be sent when the job is scheduled
1:      * @param cronEntry
0:      *            - cron entry
1:     void schedule(String jobId, ByteSequence payload, String cronEntry) throws Exception;
1:      *
1:      * @param jobId
1:      *            a unique identifier for the job
1:      * @param payload
1:      *            the message to be sent when the job is scheduled
1:      * @param cronEntry
0:      *            - cron entry
1:      * @param delay
1:      *            time in ms to wait before scheduling
1:      * @param period
1:      *            the time in milliseconds between successive executions of the Job
1:      * @param repeat
1:      *            the number of times to execute the job - less than 0 will be repeated forever
1:     void schedule(String jobId, ByteSequence payload, String cronEntry, long delay, long period, int repeat) throws Exception;
1:      *
1:      * @throws Exception
1:     void remove(long time) throws Exception;
1:      *
1:      * @throws Exception
1:     void remove(String jobId) throws Exception;
1: 
1:      *
1:     void removeAllJobs() throws Exception;
1: 
1:      *
1:      * @param start
1:      *            time in milliseconds
1:      * @param finish
1:      *            time in milliseconds
1:     void removeAllJobs(long start, long finish) throws Exception;
1:      *
1:      * @throws Exception
1:     long getNextScheduleTime() throws Exception;
1: 
1:      *
1:     List<Job> getNextScheduleJobs() throws Exception;
1: 
1:      *
1:      * @return a list of all jobs
1:      * @throws Exception
1:     List<Job> getAllJobs() throws Exception;
1: 
1:      *
1:     List<Job> getAllJobs(long start, long finish) throws Exception;
author:Hiram R. Chirino
-------------------------------------------------------------------------------
commit:58aca86
commit:1aab71b
/////////////////////////////////////////////////////////////////////////
1: import org.apache.activemq.util.ByteSequence;
author:Robert Davies
-------------------------------------------------------------------------------
commit:e3154c3
/////////////////////////////////////////////////////////////////////////
1:     /**
1:      * Add a job to be scheduled
0:      * @param jobId a unique identifier for the job
0:      * @param payload the message to be sent when the job is scheduled
0:      * @param cronEntry - cron entry
1:      * @throws Exception
1:      */
0:     public abstract void schedule(String jobId, ByteSequence payload,String cronEntry) throws Exception;
1: 
0:      * @param cronEntry - cron entry
0:      * @param delay time in ms to wait before scheduling
0:     public abstract void schedule(String jobId, ByteSequence payload,String cronEntry,long delay, long period, int repeat) throws Exception;
commit:c7c8e53
/////////////////////////////////////////////////////////////////////////
1: public interface JobScheduler {
1:      * @throws Exception 
0:     public abstract String getName() throws Exception;
1:  * @throws Exception 
0:     public abstract void addListener(JobListener l) throws Exception;
1:  * @throws Exception 
0:     public abstract void removeListener(JobListener l) throws Exception;
1:      * @throws Exception
0:     public abstract void schedule(String jobId, ByteSequence payload,long delay) throws Exception;
/////////////////////////////////////////////////////////////////////////
0:      * @throws Exception
0:     public abstract void schedule(String jobId, ByteSequence payload,long start, long period, int repeat) throws Exception;
0:      * @throws Exception 
0:     public abstract void remove(long time) throws  Exception;
0:      * @throws Exception 
0:     public abstract void remove(String jobId) throws  Exception;
1:     
1:      * remove all the Jobs from the scheduler
0:      * @throws Exception
0:     public abstract void removeAllJobs() throws Exception;
1:     
1:     /**
1:      * remove all the Jobs from the scheduler that are due between the start and finish times
0:      * @param start time in milliseconds
0:      * @param finish time in milliseconds
0:      * @throws Exception
1:      */
0:     public abstract void removeAllJobs(long start,long finish) throws Exception;
1:     
1: 
0:      * @throws Exception 
0:     public abstract long getNextScheduleTime() throws Exception;
1:     
1:     /**
1:      * Get all the jobs scheduled to run next
1:      * @return a list of jobs that will be scheduled next
0:      * @throws Exception
1:      */
0:     public abstract List<Job> getNextScheduleJobs() throws Exception;
1:     
1:     /**
1:      * Get all the outstanding Jobs
0:      * @return a  list of all jobs
0:      * @throws Exception 
1:      */
0:     public abstract List<Job> getAllJobs() throws Exception;
1:     
1:     /**
1:      * Get all outstanding jobs due to run between start and finish
1:      * @param start
1:      * @param finish
1:      * @return a list of jobs
0:      * @throws Exception
1:      */
0:     public abstract List<Job> getAllJobs(long start,long finish)throws Exception;
commit:7ae2055
/////////////////////////////////////////////////////////////////////////
1: /**
1:  * Licensed to the Apache Software Foundation (ASF) under one or more
1:  * contributor license agreements.  See the NOTICE file distributed with
1:  * this work for additional information regarding copyright ownership.
1:  * The ASF licenses this file to You under the Apache License, Version 2.0
1:  * (the "License"); you may not use this file except in compliance with
1:  * the License.  You may obtain a copy of the License at
1:  *
1:  *      http://www.apache.org/licenses/LICENSE-2.0
1:  *
1:  * Unless required by applicable law or agreed to in writing, software
1:  * distributed under the License is distributed on an "AS IS" BASIS,
1:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:  * See the License for the specific language governing permissions and
1:  * limitations under the License.
1:  */
1: package org.apache.activemq.broker.scheduler;
1: 
0: import java.io.IOException;
1: import java.util.List;
0: import org.apache.kahadb.util.ByteSequence;
1: 
0: interface JobScheduler {
1: 
1:     /**
1:      * @return the name of the scheduler
1:      */
0:     public abstract String getName();
1: /**
0:  * Add a Job listener
0:  * @param l
1:  */
0:     public abstract void addListener(JobListener l);
1: /**
0:  * remove a JobListener
0:  * @param l
1:  */
0:     public abstract void removeListener(JobListener l);
1: 
1:     /**
1:      * Add a job to be scheduled
0:      * @param jobId a unique identifier for the job
0:      * @param payload the message to be sent when the job is scheduled
0:      * @param delay the time in milliseconds before the job will be run
0:      * @throws IOException
1:      */
0:     public abstract void schedule(String jobId, ByteSequence payload,long delay) throws IOException;
1: 
1:     
1:     /**
1:      * Add a job to be scheduled
0:      * @param jobId a unique identifier for the job
0:      * @param payload the message to be sent when the job is scheduled
0:      * @param start 
0:      * @param period the time in milliseconds between successive executions of the Job
0:      * @param repeat the number of times to execute the job - less than 0 will be repeated forever
0:      * @throws IOException
1:      */
0:     public abstract void schedule(String jobId, ByteSequence payload,long start, long period, int repeat) throws IOException;
1: 
1:     /**
1:      * remove all jobs scheduled to run at this time
1:      * @param time
0:      * @throws IOException
1:      */
0:     public abstract void remove(long time) throws IOException;
1: 
1:     /**
1:      * remove a job with the matching jobId
1:      * @param jobId
0:      * @throws IOException
1:      */
0:     public abstract void remove(String jobId) throws IOException;
1: 
1:     /**
0:      * Get all the jobs scheduled to run next
0:      * @return a list of messages that will be scheduled next
0:      * @throws IOException
1:      */
0:     public abstract List<ByteSequence> getNextScheduleJobs() throws IOException;
1:     
1:     /**
1:      * Get the next time jobs will be fired
1:      * @return the time in milliseconds
0:      * @throws IOException 
1:      */
0:     public abstract long getNextScheduleTime() throws IOException;
1: 
1: }
============================================================================