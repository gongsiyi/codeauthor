1:490436c: /**
1:490436c:  * Licensed to the Apache Software Foundation (ASF) under one or more
1:490436c:  * contributor license agreements.  See the NOTICE file distributed with
1:490436c:  * this work for additional information regarding copyright ownership.
1:490436c:  * The ASF licenses this file to You under the Apache License, Version 2.0
1:490436c:  * (the "License"); you may not use this file except in compliance with
1:490436c:  * the License.  You may obtain a copy of the License at
1:490436c:  *
1:490436c:  *      http://www.apache.org/licenses/LICENSE-2.0
1:490436c:  *
1:490436c:  * Unless required by applicable law or agreed to in writing, software
1:490436c:  * distributed under the License is distributed on an "AS IS" BASIS,
1:490436c:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:490436c:  * See the License for the specific language governing permissions and
1:490436c:  * limitations under the License.
1:490436c:  */
1:490436c: package org.apache.activemq.transport.amqp;
2:490436c: 
1:490436c: import static org.junit.Assert.assertTrue;
1:490436c: 
1:490436c: import java.util.concurrent.atomic.AtomicBoolean;
1:490436c: import java.util.concurrent.atomic.AtomicInteger;
1:490436c: 
1:490436c: import javax.jms.Connection;
1:490436c: import javax.jms.ExceptionListener;
1:490436c: import javax.jms.JMSException;
1:490436c: import javax.jms.MessageConsumer;
1:490436c: import javax.jms.MessageProducer;
1:490436c: import javax.jms.Queue;
1:490436c: import javax.jms.Session;
1:490436c: import javax.jms.TextMessage;
1:490436c: 
1:490436c: import org.apache.activemq.broker.BrokerService;
1:490436c: import org.apache.activemq.broker.region.policy.PolicyEntry;
1:490436c: import org.apache.activemq.broker.region.policy.PolicyMap;
1:490436c: import org.apache.activemq.broker.region.policy.VMPendingQueueMessageStoragePolicy;
1:490436c: import org.apache.activemq.broker.region.policy.VMPendingSubscriberMessageStoragePolicy;
1:490436c: import org.apache.qpid.jms.JmsConnection;
1:490436c: import org.junit.Test;
1:490436c: 
1:490436c: public class JMSClientProducerFlowSendFailIfNoSpace extends JMSClientTestSupport {
1:490436c: 
1:490436c:     // used to test sendFailIfNoSpace on SystemUsage
1:490436c:     protected final AtomicBoolean gotResourceException = new AtomicBoolean(false);
1:490436c: 
1:490436c:     @Override
1:490436c:     protected void performAdditionalConfiguration(BrokerService brokerService) {
1:490436c: 
1:490436c:         // Setup a destination policy where it takes only 1 message at a time.
1:490436c:         PolicyMap policyMap = new PolicyMap();
1:490436c:         PolicyEntry policy = new PolicyEntry();
1:490436c:         policy.setMemoryLimit(1);
1:490436c:         policy.setPendingSubscriberPolicy(new VMPendingSubscriberMessageStoragePolicy());
1:490436c:         policy.setPendingQueuePolicy(new VMPendingQueueMessageStoragePolicy());
1:490436c:         policy.setProducerFlowControl(true);
1:490436c:         policyMap.setDefaultEntry(policy);
1:490436c:         brokerService.setDestinationPolicy(policyMap);
1:490436c: 
1:490436c:         brokerService.getSystemUsage().setSendFailIfNoSpace(true);
1:490436c:     }
1:490436c: 
1:490436c:     @Test(timeout = 60000)
1:490436c:     public void testPubisherRecoverAfterBlock() throws Exception {
1:490436c:         connection = createConnection();
1:490436c: 
1:490436c:         final Session session = connection.createSession(false, Session.CLIENT_ACKNOWLEDGE);
1:490436c:         final Queue queueA = session.createQueue(name.getMethodName());
1:490436c:         final MessageProducer producer = session.createProducer(queueA);
1:490436c: 
1:490436c:         final AtomicBoolean keepGoing = new AtomicBoolean(true);
1:490436c: 
1:490436c:         Thread thread = new Thread("Filler") {
1:490436c:             @Override
1:490436c:             public void run() {
1:490436c:                 while (keepGoing.get()) {
1:490436c:                     try {
1:490436c:                         producer.send(session.createTextMessage("Test message"));
1:490436c:                         if (gotResourceException.get()) {
1:490436c:                             // do not flood the broker with requests when full as we are
1:490436c:                             // sending async and they will be limited by the network buffers
1:490436c:                             Thread.sleep(200);
1:490436c:                         }
1:490436c:                     } catch (Exception e) {
1:490436c:                         // with async send, there will be no exceptions
1:490436c:                         LOG.info("Caught excepted exception: {}", e.getMessage());
1:490436c:                     }
1:490436c:                 }
1:490436c:             }
1:490436c:         };
1:490436c:         thread.start();
1:490436c:         waitForBlockedOrResourceLimit(new AtomicBoolean(false));
1:490436c: 
1:490436c:         // resourceException on second message, resumption if we
1:490436c:         // can receive 10
1:490436c:         MessageConsumer consumer = session.createConsumer(queueA);
1:490436c:         TextMessage msg;
1:490436c:         for (int idx = 0; idx < 10; ++idx) {
1:490436c:             msg = (TextMessage) consumer.receive(500);
1:490436c:             if (msg != null) {
1:490436c:                 msg.acknowledge();
1:490436c:             }
1:490436c:         }
1:490436c: 
1:490436c:         keepGoing.set(false);
1:490436c:     }
1:490436c: 
1:490436c:     @Test(timeout = 60000)
1:490436c:     public void testPubisherRecoverAfterBlockWithSyncSend() throws Exception {
1:490436c:         connection = createConnection(false, false);
1:490436c: 
1:490436c:         final Session session = connection.createSession(false, Session.CLIENT_ACKNOWLEDGE);
1:490436c:         final Queue queueA = session.createQueue(name.getMethodName());
1:490436c:         final MessageProducer producer = session.createProducer(queueA);
1:490436c: 
1:490436c:         final AtomicBoolean keepGoing = new AtomicBoolean(true);
1:490436c:         final AtomicInteger exceptionCount = new AtomicInteger(0);
1:490436c:         Thread thread = new Thread("Filler") {
1:490436c:             @Override
1:490436c:             public void run() {
1:490436c:                 while (keepGoing.get()) {
1:490436c:                     try {
1:490436c:                         producer.send(session.createTextMessage("Test message"));
1:490436c:                     } catch (JMSException jmsEx) {
1:490436c:                         LOG.debug("Client caught error: {} {}", jmsEx.getClass().getName(), jmsEx.getMessage());
1:490436c:                         gotResourceException.set(true);
1:490436c:                         exceptionCount.incrementAndGet();
1:490436c:                     }
1:490436c:                 }
1:490436c:             }
1:490436c:         };
1:490436c:         thread.start();
1:490436c:         waitForBlockedOrResourceLimit();
1:490436c: 
1:490436c:         // resourceException on second message, resumption if we
1:490436c:         // can receive 10
1:490436c:         MessageConsumer consumer = session.createConsumer(queueA);
1:490436c:         TextMessage msg;
1:490436c:         for (int idx = 0; idx < 10; ++idx) {
1:490436c:             msg = (TextMessage) consumer.receive(500);
1:490436c:             if (msg != null) {
1:490436c:                 msg.acknowledge();
1:490436c:             }
1:490436c:         }
1:490436c: 
1:490436c:         assertTrue("we were blocked at least 5 times", 5 < exceptionCount.get());
1:490436c:         keepGoing.set(false);
1:490436c:     }
1:490436c: 
1:490436c:     protected void waitForBlockedOrResourceLimit() throws InterruptedException {
1:490436c:         waitForBlockedOrResourceLimit(new AtomicBoolean(false));
1:490436c:     }
1:490436c: 
1:490436c:     protected void waitForBlockedOrResourceLimit(final AtomicBoolean done) throws InterruptedException {
1:490436c:         while (true) {
1:490436c:             Thread.sleep(100);
1:490436c:             // the producer is blocked once the done flag stays true or there is a resource exception
1:490436c:             if (done.get() || gotResourceException.get()) {
1:490436c:                 break;
1:490436c:             }
1:490436c:             done.set(true);
1:490436c:         }
1:490436c:     }
1:490436c: 
1:490436c:     @Override
1:490436c:     protected Connection createConnection() throws JMSException {
1:490436c:         return createConnection(true, true);
1:490436c:     }
1:490436c: 
1:490436c:     protected Connection createConnection(boolean async, boolean exceptionListener) throws JMSException {
1:490436c:         connection = super.createConnection();
1:490436c: 
1:490436c:         JmsConnection jmsConnection = (JmsConnection) connection;
1:490436c:         jmsConnection.setForceAsyncSend(async);
1:490436c: 
1:490436c:         if (exceptionListener) {
1:490436c:             connection.setExceptionListener(new ExceptionListener() {
1:490436c:                 @Override
1:490436c:                 public void onException(JMSException jmsEx) {
1:490436c:                     LOG.debug("Client caught error: {} {}", jmsEx.getClass().getName(), jmsEx.getMessage());
1:490436c:                     gotResourceException.set(true);
1:490436c:                 }
1:490436c:             });
1:490436c:         }
1:490436c: 
1:490436c:         connection.start();
1:490436c: 
1:490436c:         return connection;
1:490436c:     }
1:490436c: }
============================================================================
author:Timothy Bish
-------------------------------------------------------------------------------
commit:28e7cb0
/////////////////////////////////////////////////////////////////////////
commit:490436c
/////////////////////////////////////////////////////////////////////////
1: /**
1:  * Licensed to the Apache Software Foundation (ASF) under one or more
1:  * contributor license agreements.  See the NOTICE file distributed with
1:  * this work for additional information regarding copyright ownership.
1:  * The ASF licenses this file to You under the Apache License, Version 2.0
1:  * (the "License"); you may not use this file except in compliance with
1:  * the License.  You may obtain a copy of the License at
1:  *
1:  *      http://www.apache.org/licenses/LICENSE-2.0
1:  *
1:  * Unless required by applicable law or agreed to in writing, software
1:  * distributed under the License is distributed on an "AS IS" BASIS,
1:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:  * See the License for the specific language governing permissions and
1:  * limitations under the License.
1:  */
1: package org.apache.activemq.transport.amqp;
1: 
1: import static org.junit.Assert.assertTrue;
1: 
1: import java.util.concurrent.atomic.AtomicBoolean;
1: import java.util.concurrent.atomic.AtomicInteger;
1: 
1: import javax.jms.Connection;
1: import javax.jms.ExceptionListener;
1: import javax.jms.JMSException;
1: import javax.jms.MessageConsumer;
1: import javax.jms.MessageProducer;
1: import javax.jms.Queue;
1: import javax.jms.Session;
1: import javax.jms.TextMessage;
1: 
1: import org.apache.activemq.broker.BrokerService;
1: import org.apache.activemq.broker.region.policy.PolicyEntry;
1: import org.apache.activemq.broker.region.policy.PolicyMap;
1: import org.apache.activemq.broker.region.policy.VMPendingQueueMessageStoragePolicy;
1: import org.apache.activemq.broker.region.policy.VMPendingSubscriberMessageStoragePolicy;
1: import org.apache.qpid.jms.JmsConnection;
0: import org.junit.Rule;
1: import org.junit.Test;
0: import org.junit.rules.TestName;
1: 
1: public class JMSClientProducerFlowSendFailIfNoSpace extends JMSClientTestSupport {
1: 
0:     @Rule
0:     public TestName name = new TestName();
1: 
1:     // used to test sendFailIfNoSpace on SystemUsage
1:     protected final AtomicBoolean gotResourceException = new AtomicBoolean(false);
1: 
1:     @Override
1:     protected void performAdditionalConfiguration(BrokerService brokerService) {
1: 
1:         // Setup a destination policy where it takes only 1 message at a time.
1:         PolicyMap policyMap = new PolicyMap();
1:         PolicyEntry policy = new PolicyEntry();
1:         policy.setMemoryLimit(1);
1:         policy.setPendingSubscriberPolicy(new VMPendingSubscriberMessageStoragePolicy());
1:         policy.setPendingQueuePolicy(new VMPendingQueueMessageStoragePolicy());
1:         policy.setProducerFlowControl(true);
1:         policyMap.setDefaultEntry(policy);
1:         brokerService.setDestinationPolicy(policyMap);
1: 
1:         brokerService.getSystemUsage().setSendFailIfNoSpace(true);
1:     }
1: 
1:     @Test(timeout = 60000)
1:     public void testPubisherRecoverAfterBlock() throws Exception {
1:         connection = createConnection();
1: 
1:         final Session session = connection.createSession(false, Session.CLIENT_ACKNOWLEDGE);
1:         final Queue queueA = session.createQueue(name.getMethodName());
1:         final MessageProducer producer = session.createProducer(queueA);
1: 
1:         final AtomicBoolean keepGoing = new AtomicBoolean(true);
1: 
1:         Thread thread = new Thread("Filler") {
1:             @Override
1:             public void run() {
1:                 while (keepGoing.get()) {
1:                     try {
1:                         producer.send(session.createTextMessage("Test message"));
1:                         if (gotResourceException.get()) {
1:                             // do not flood the broker with requests when full as we are
1:                             // sending async and they will be limited by the network buffers
1:                             Thread.sleep(200);
1:                         }
1:                     } catch (Exception e) {
1:                         // with async send, there will be no exceptions
1:                         LOG.info("Caught excepted exception: {}", e.getMessage());
1:                     }
1:                 }
1:             }
1:         };
1:         thread.start();
1:         waitForBlockedOrResourceLimit(new AtomicBoolean(false));
1: 
1:         // resourceException on second message, resumption if we
1:         // can receive 10
1:         MessageConsumer consumer = session.createConsumer(queueA);
1:         TextMessage msg;
1:         for (int idx = 0; idx < 10; ++idx) {
1:             msg = (TextMessage) consumer.receive(500);
1:             if (msg != null) {
1:                 msg.acknowledge();
1:             }
1:         }
1: 
1:         keepGoing.set(false);
1:     }
1: 
1:     @Test(timeout = 60000)
1:     public void testPubisherRecoverAfterBlockWithSyncSend() throws Exception {
1:         connection = createConnection(false, false);
1: 
1:         final Session session = connection.createSession(false, Session.CLIENT_ACKNOWLEDGE);
1:         final Queue queueA = session.createQueue(name.getMethodName());
1:         final MessageProducer producer = session.createProducer(queueA);
1: 
1:         final AtomicBoolean keepGoing = new AtomicBoolean(true);
1:         final AtomicInteger exceptionCount = new AtomicInteger(0);
1:         Thread thread = new Thread("Filler") {
1:             @Override
1:             public void run() {
1:                 while (keepGoing.get()) {
1:                     try {
1:                         producer.send(session.createTextMessage("Test message"));
1:                     } catch (JMSException jmsEx) {
1:                         LOG.debug("Client caught error: {} {}", jmsEx.getClass().getName(), jmsEx.getMessage());
1:                         gotResourceException.set(true);
1:                         exceptionCount.incrementAndGet();
1:                     }
1:                 }
1:             }
1:         };
1:         thread.start();
1:         waitForBlockedOrResourceLimit();
1: 
1:         // resourceException on second message, resumption if we
1:         // can receive 10
1:         MessageConsumer consumer = session.createConsumer(queueA);
1:         TextMessage msg;
1:         for (int idx = 0; idx < 10; ++idx) {
1:             msg = (TextMessage) consumer.receive(500);
1:             if (msg != null) {
1:                 msg.acknowledge();
1:             }
1:         }
1: 
1:         assertTrue("we were blocked at least 5 times", 5 < exceptionCount.get());
1:         keepGoing.set(false);
1:     }
1: 
1:     protected void waitForBlockedOrResourceLimit() throws InterruptedException {
1:         waitForBlockedOrResourceLimit(new AtomicBoolean(false));
1:     }
1: 
1:     protected void waitForBlockedOrResourceLimit(final AtomicBoolean done) throws InterruptedException {
1:         while (true) {
1:             Thread.sleep(100);
1:             // the producer is blocked once the done flag stays true or there is a resource exception
1:             if (done.get() || gotResourceException.get()) {
1:                 break;
1:             }
1:             done.set(true);
1:         }
1:     }
1: 
1:     @Override
1:     protected Connection createConnection() throws JMSException {
1:         return createConnection(true, true);
1:     }
1: 
1:     protected Connection createConnection(boolean async, boolean exceptionListener) throws JMSException {
1:         connection = super.createConnection();
1: 
1:         JmsConnection jmsConnection = (JmsConnection) connection;
1:         jmsConnection.setForceAsyncSend(async);
1: 
1:         if (exceptionListener) {
1:             connection.setExceptionListener(new ExceptionListener() {
1:                 @Override
1:                 public void onException(JMSException jmsEx) {
1:                     LOG.debug("Client caught error: {} {}", jmsEx.getClass().getName(), jmsEx.getMessage());
1:                     gotResourceException.set(true);
1:                 }
1:             });
1:         }
1: 
1:         connection.start();
1: 
1:         return connection;
1:     }
1: }
============================================================================