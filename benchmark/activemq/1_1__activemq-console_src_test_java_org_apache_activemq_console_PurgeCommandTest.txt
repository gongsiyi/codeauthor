1:c8b6043: /**
1:c8b6043:  * Licensed to the Apache Software Foundation (ASF) under one or more
1:c8b6043:  * contributor license agreements.  See the NOTICE file distributed with
1:c8b6043:  * this work for additional information regarding copyright ownership.
1:c8b6043:  * The ASF licenses this file to You under the Apache License, Version 2.0
1:c8b6043:  * (the "License"); you may not use this file except in compliance with
1:c8b6043:  * the License.  You may obtain a copy of the License at
1:c8b6043:  *
1:c8b6043:  *      http://www.apache.org/licenses/LICENSE-2.0
1:c8b6043:  *
1:c8b6043:  * Unless required by applicable law or agreed to in writing, software
1:c8b6043:  * distributed under the License is distributed on an "AS IS" BASIS,
1:c8b6043:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:c8b6043:  * See the License for the specific language governing permissions and
1:c8b6043:  * limitations under the License.
1:c8b6043:  */
1:c8b6043: package org.apache.activemq.console;
1:c8b6043: 
1:c8b6043: import static org.junit.Assert.assertEquals;
1:c8b6043: import static org.junit.Assert.assertNotNull;
1:c8b6043: 
1:c8b6043: import java.io.ByteArrayOutputStream;
1:c8b6043: import java.util.Arrays;
1:c8b6043: import java.util.LinkedList;
1:c8b6043: 
1:c8b6043: import javax.jms.Connection;
1:c8b6043: import javax.jms.ConnectionFactory;
1:c8b6043: import javax.jms.JMSException;
1:c8b6043: import javax.jms.MessageConsumer;
1:c8b6043: import javax.jms.MessageProducer;
1:c8b6043: import javax.jms.Queue;
1:c8b6043: import javax.jms.Session;
1:c8b6043: import javax.management.MalformedObjectNameException;
1:c8b6043: import javax.management.ObjectName;
1:c8b6043: 
1:c8b6043: import org.apache.activemq.ActiveMQConnectionFactory;
1:c8b6043: import org.apache.activemq.broker.BrokerService;
1:c8b6043: import org.apache.activemq.broker.TransportConnector;
1:c8b6043: import org.apache.activemq.broker.jmx.QueueViewMBean;
1:c8b6043: import org.apache.activemq.console.command.PurgeCommand;
1:c8b6043: import org.apache.activemq.console.formatter.CommandShellOutputFormatter;
1:c8b6043: import org.junit.After;
1:c8b6043: import org.junit.Before;
1:c8b6043: import org.junit.Rule;
1:c8b6043: import org.junit.Test;
1:c8b6043: import org.junit.rules.TestName;
1:c8b6043: 
1:c8b6043: /**
1:c8b6043:  * Tests for the purge command.
1:c8b6043:  */
1:c8b6043: public class PurgeCommandTest {
1:c8b6043: 
1:c8b6043:     private BrokerService brokerService;
1:c8b6043:     private ConnectionFactory factory;
1:c8b6043: 
1:c8b6043:     @Rule public TestName name = new TestName();
1:c8b6043: 
1:c8b6043:     @Before
1:c8b6043:     public void createBroker() throws Exception {
1:c8b6043:         brokerService = new BrokerService();
1:c8b6043:         brokerService.getManagementContext().setCreateConnector(false);
1:c8b6043:         brokerService.setPersistent(false);
1:c8b6043:         TransportConnector connector = brokerService.addConnector("tcp://0.0.0.0:0");
1:c8b6043:         brokerService.start();
1:c8b6043:         brokerService.waitUntilStarted();
1:c8b6043: 
1:c8b6043:         factory = new ActiveMQConnectionFactory(connector.getPublishableConnectString());
1:c8b6043:     }
1:c8b6043: 
1:c8b6043:     @After
1:c8b6043:     public void stopBroker() throws Exception {
1:c8b6043:         if (brokerService != null) {
1:c8b6043:             brokerService.stop();
1:c8b6043:         }
1:c8b6043:     }
1:c8b6043: 
1:c8b6043:     @Test(timeout = 30000)
1:c8b6043:     public void testPurge() throws Exception {
1:c8b6043:         produce(10);
1:c8b6043: 
1:c8b6043:         QueueViewMBean queueView = getProxyToQueue(getDestinationName());
1:c8b6043:         assertEquals(10, queueView.getQueueSize());
1:c8b6043: 
1:c8b6043:         executePurge(getDestinationName());
1:c8b6043: 
1:c8b6043:         assertEquals(0, queueView.getQueueSize());
1:c8b6043:     }
1:c8b6043: 
1:c8b6043:     @Test(timeout = 30000)
1:c8b6043:     public void testPurgeWithReset() throws Exception {
1:c8b6043:         produce(20);
1:c8b6043:         consume(10);
1:c8b6043: 
1:c8b6043:         QueueViewMBean queueView = getProxyToQueue(getDestinationName());
1:c8b6043:         assertEquals(10, queueView.getQueueSize());
1:c8b6043:         assertEquals(20, queueView.getEnqueueCount());
1:c8b6043:         assertEquals(10, queueView.getDequeueCount());
1:c8b6043: 
1:c8b6043:         // Normal purge doesn't change stats.
1:c8b6043:         executePurge(getDestinationName());
1:c8b6043: 
1:c8b6043:         assertEquals(0, queueView.getQueueSize());
1:c8b6043:         assertEquals(20, queueView.getEnqueueCount());
1:c8b6043:         assertEquals(20, queueView.getDequeueCount());
1:c8b6043: 
1:c8b6043:         // Purge on empty leaves stats alone.
1:c8b6043:         executePurge(getDestinationName());
1:c8b6043: 
1:c8b6043:         assertEquals(0, queueView.getQueueSize());
1:c8b6043:         assertEquals(20, queueView.getEnqueueCount());
1:c8b6043:         assertEquals(20, queueView.getDequeueCount());
1:c8b6043: 
1:c8b6043:         executePurge("--reset " + getDestinationName());
1:c8b6043: 
1:c8b6043:         // Purge on empty with reset clears stats.
1:c8b6043:         assertEquals(0, queueView.getQueueSize());
1:c8b6043:         assertEquals(0, queueView.getEnqueueCount());
1:c8b6043:         assertEquals(0, queueView.getDequeueCount());
1:c8b6043: 
1:c8b6043:         produce(20);
1:c8b6043:         consume(10);
1:c8b6043: 
1:c8b6043:         assertEquals(10, queueView.getQueueSize());
1:c8b6043:         assertEquals(20, queueView.getEnqueueCount());
1:c8b6043:         assertEquals(10, queueView.getDequeueCount());
1:c8b6043: 
1:c8b6043:         executePurge("--reset " + getDestinationName());
1:c8b6043: 
1:c8b6043:         // Purge on non-empty with reset clears stats.
1:c8b6043:         assertEquals(0, queueView.getQueueSize());
1:c8b6043:         assertEquals(0, queueView.getEnqueueCount());
1:c8b6043:         assertEquals(0, queueView.getDequeueCount());
1:c8b6043:     }
1:c8b6043: 
1:c8b6043:     private String getDestinationName() {
1:c8b6043:         return name.getMethodName();
1:c8b6043:     }
1:c8b6043: 
1:c8b6043:     private String executePurge(String options) throws Exception {
1:c8b6043:         ByteArrayOutputStream byteArrayOutputStream = new ByteArrayOutputStream(1024);
1:c8b6043:         CommandContext context = new CommandContext();
1:c8b6043:         context.setFormatter(new CommandShellOutputFormatter(byteArrayOutputStream));
1:c8b6043: 
1:c8b6043:         PurgeCommand purgeCommand = new PurgeCommand();
1:c8b6043:         purgeCommand.setJmxUseLocal(true);
1:c8b6043:         purgeCommand.setCommandContext(context);
1:c8b6043: 
1:c8b6043:         LinkedList<String> args = new LinkedList<>();
1:c8b6043:         args.addAll(Arrays.asList(options.split(" ")));
1:c8b6043:         purgeCommand.execute(args);
1:c8b6043: 
1:c8b6043:         return byteArrayOutputStream.toString();
1:c8b6043:     }
1:c8b6043: 
1:c8b6043:     private QueueViewMBean getProxyToQueue(String name) throws MalformedObjectNameException, JMSException {
1:c8b6043:         ObjectName queueViewMBeanName = new ObjectName("org.apache.activemq:type=Broker,brokerName=localhost,destinationType=Queue,destinationName="+name);
1:c8b6043:         QueueViewMBean proxy = (QueueViewMBean) brokerService.getManagementContext()
1:c8b6043:                 .newProxyInstance(queueViewMBeanName, QueueViewMBean.class, true);
1:c8b6043:         return proxy;
1:c8b6043:     }
1:c8b6043: 
1:c8b6043:     private void produce(int count) throws Exception {
1:c8b6043:         Connection connection = factory.createConnection();
1:c8b6043:         Session session = connection.createSession(false, Session.AUTO_ACKNOWLEDGE);
1:c8b6043:         Queue queue = session.createQueue(getDestinationName());
1:c8b6043:         MessageProducer producer = session.createProducer(queue);
1:c8b6043: 
1:c8b6043:         for (int i = 0; i < count; ++i) {
1:c8b6043:             producer.send(session.createMessage());
1:c8b6043:         }
1:c8b6043: 
1:c8b6043:         connection.close();
1:c8b6043:     }
1:c8b6043: 
1:c8b6043:     private void consume(int count) throws Exception {
1:c8b6043:         Connection connection = factory.createConnection();
1:c8b6043:         Session session = connection.createSession(false, Session.AUTO_ACKNOWLEDGE);
1:c8b6043:         Queue queue = session.createQueue(getDestinationName());
1:c8b6043:         MessageConsumer consumer = session.createConsumer(queue);
1:c8b6043:         connection.start();
1:c8b6043: 
1:c8b6043:         for (int i = 0; i < count; ++i) {
1:c8b6043:             assertNotNull(consumer.receive(1000));
1:c8b6043:         }
1:c8b6043: 
1:c8b6043:         connection.close();
1:c8b6043:     }
1:c8b6043: }
============================================================================
author:Timothy Bish
-------------------------------------------------------------------------------
commit:c8b6043
/////////////////////////////////////////////////////////////////////////
1: /**
1:  * Licensed to the Apache Software Foundation (ASF) under one or more
1:  * contributor license agreements.  See the NOTICE file distributed with
1:  * this work for additional information regarding copyright ownership.
1:  * The ASF licenses this file to You under the Apache License, Version 2.0
1:  * (the "License"); you may not use this file except in compliance with
1:  * the License.  You may obtain a copy of the License at
1:  *
1:  *      http://www.apache.org/licenses/LICENSE-2.0
1:  *
1:  * Unless required by applicable law or agreed to in writing, software
1:  * distributed under the License is distributed on an "AS IS" BASIS,
1:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:  * See the License for the specific language governing permissions and
1:  * limitations under the License.
1:  */
1: package org.apache.activemq.console;
1: 
1: import static org.junit.Assert.assertEquals;
1: import static org.junit.Assert.assertNotNull;
1: 
1: import java.io.ByteArrayOutputStream;
1: import java.util.Arrays;
1: import java.util.LinkedList;
1: 
1: import javax.jms.Connection;
1: import javax.jms.ConnectionFactory;
1: import javax.jms.JMSException;
1: import javax.jms.MessageConsumer;
1: import javax.jms.MessageProducer;
1: import javax.jms.Queue;
1: import javax.jms.Session;
1: import javax.management.MalformedObjectNameException;
1: import javax.management.ObjectName;
1: 
1: import org.apache.activemq.ActiveMQConnectionFactory;
1: import org.apache.activemq.broker.BrokerService;
1: import org.apache.activemq.broker.TransportConnector;
1: import org.apache.activemq.broker.jmx.QueueViewMBean;
1: import org.apache.activemq.console.command.PurgeCommand;
1: import org.apache.activemq.console.formatter.CommandShellOutputFormatter;
1: import org.junit.After;
1: import org.junit.Before;
1: import org.junit.Rule;
1: import org.junit.Test;
1: import org.junit.rules.TestName;
1: 
1: /**
1:  * Tests for the purge command.
1:  */
1: public class PurgeCommandTest {
1: 
1:     private BrokerService brokerService;
1:     private ConnectionFactory factory;
1: 
1:     @Rule public TestName name = new TestName();
1: 
1:     @Before
1:     public void createBroker() throws Exception {
1:         brokerService = new BrokerService();
1:         brokerService.getManagementContext().setCreateConnector(false);
1:         brokerService.setPersistent(false);
1:         TransportConnector connector = brokerService.addConnector("tcp://0.0.0.0:0");
1:         brokerService.start();
1:         brokerService.waitUntilStarted();
1: 
1:         factory = new ActiveMQConnectionFactory(connector.getPublishableConnectString());
1:     }
1: 
1:     @After
1:     public void stopBroker() throws Exception {
1:         if (brokerService != null) {
1:             brokerService.stop();
1:         }
1:     }
1: 
1:     @Test(timeout = 30000)
1:     public void testPurge() throws Exception {
1:         produce(10);
1: 
1:         QueueViewMBean queueView = getProxyToQueue(getDestinationName());
1:         assertEquals(10, queueView.getQueueSize());
1: 
1:         executePurge(getDestinationName());
1: 
1:         assertEquals(0, queueView.getQueueSize());
1:     }
1: 
1:     @Test(timeout = 30000)
1:     public void testPurgeWithReset() throws Exception {
1:         produce(20);
1:         consume(10);
1: 
1:         QueueViewMBean queueView = getProxyToQueue(getDestinationName());
1:         assertEquals(10, queueView.getQueueSize());
1:         assertEquals(20, queueView.getEnqueueCount());
1:         assertEquals(10, queueView.getDequeueCount());
1: 
1:         // Normal purge doesn't change stats.
1:         executePurge(getDestinationName());
1: 
1:         assertEquals(0, queueView.getQueueSize());
1:         assertEquals(20, queueView.getEnqueueCount());
1:         assertEquals(20, queueView.getDequeueCount());
1: 
1:         // Purge on empty leaves stats alone.
1:         executePurge(getDestinationName());
1: 
1:         assertEquals(0, queueView.getQueueSize());
1:         assertEquals(20, queueView.getEnqueueCount());
1:         assertEquals(20, queueView.getDequeueCount());
1: 
1:         executePurge("--reset " + getDestinationName());
1: 
1:         // Purge on empty with reset clears stats.
1:         assertEquals(0, queueView.getQueueSize());
1:         assertEquals(0, queueView.getEnqueueCount());
1:         assertEquals(0, queueView.getDequeueCount());
1: 
1:         produce(20);
1:         consume(10);
1: 
1:         assertEquals(10, queueView.getQueueSize());
1:         assertEquals(20, queueView.getEnqueueCount());
1:         assertEquals(10, queueView.getDequeueCount());
1: 
1:         executePurge("--reset " + getDestinationName());
1: 
1:         // Purge on non-empty with reset clears stats.
1:         assertEquals(0, queueView.getQueueSize());
1:         assertEquals(0, queueView.getEnqueueCount());
1:         assertEquals(0, queueView.getDequeueCount());
1:     }
1: 
1:     private String getDestinationName() {
1:         return name.getMethodName();
1:     }
1: 
1:     private String executePurge(String options) throws Exception {
1:         ByteArrayOutputStream byteArrayOutputStream = new ByteArrayOutputStream(1024);
1:         CommandContext context = new CommandContext();
1:         context.setFormatter(new CommandShellOutputFormatter(byteArrayOutputStream));
1: 
1:         PurgeCommand purgeCommand = new PurgeCommand();
1:         purgeCommand.setJmxUseLocal(true);
1:         purgeCommand.setCommandContext(context);
1: 
1:         LinkedList<String> args = new LinkedList<>();
1:         args.addAll(Arrays.asList(options.split(" ")));
1:         purgeCommand.execute(args);
1: 
1:         return byteArrayOutputStream.toString();
1:     }
1: 
1:     private QueueViewMBean getProxyToQueue(String name) throws MalformedObjectNameException, JMSException {
1:         ObjectName queueViewMBeanName = new ObjectName("org.apache.activemq:type=Broker,brokerName=localhost,destinationType=Queue,destinationName="+name);
1:         QueueViewMBean proxy = (QueueViewMBean) brokerService.getManagementContext()
1:                 .newProxyInstance(queueViewMBeanName, QueueViewMBean.class, true);
1:         return proxy;
1:     }
1: 
1:     private void produce(int count) throws Exception {
1:         Connection connection = factory.createConnection();
1:         Session session = connection.createSession(false, Session.AUTO_ACKNOWLEDGE);
1:         Queue queue = session.createQueue(getDestinationName());
1:         MessageProducer producer = session.createProducer(queue);
1: 
1:         for (int i = 0; i < count; ++i) {
1:             producer.send(session.createMessage());
1:         }
1: 
1:         connection.close();
1:     }
1: 
1:     private void consume(int count) throws Exception {
1:         Connection connection = factory.createConnection();
1:         Session session = connection.createSession(false, Session.AUTO_ACKNOWLEDGE);
1:         Queue queue = session.createQueue(getDestinationName());
1:         MessageConsumer consumer = session.createConsumer(queue);
1:         connection.start();
1: 
1:         for (int i = 0; i < count; ++i) {
1:             assertNotNull(consumer.receive(1000));
1:         }
1: 
1:         connection.close();
1:     }
1: }
============================================================================