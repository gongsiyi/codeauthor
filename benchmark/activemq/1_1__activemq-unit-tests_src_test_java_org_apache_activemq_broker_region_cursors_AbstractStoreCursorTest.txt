1:bdfa339: /**
1:bdfa339:  * Licensed to the Apache Software Foundation (ASF) under one or more
1:bdfa339:  * contributor license agreements. See the NOTICE file distributed with
1:bdfa339:  * this work for additional information regarding copyright ownership.
1:bdfa339:  * The ASF licenses this file to You under the Apache License, Version 2.0
1:bdfa339:  * (the "License"); you may not use this file except in compliance with
1:bdfa339:  * the License. You may obtain a copy of the License at
1:bdfa339:  * <p>
1:bdfa339:  * http://www.apache.org/licenses/LICENSE-2.0
1:bdfa339:  * <p>
1:bdfa339:  * Unless required by applicable law or agreed to in writing, software
1:bdfa339:  * distributed under the License is distributed on an "AS IS" BASIS,
1:bdfa339:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:bdfa339:  * See the License for the specific language governing permissions and
1:bdfa339:  * limitations under the License.
1:bdfa339:  */
1:bdfa339: 
1:bdfa339: package org.apache.activemq.broker.region.cursors;
1:bdfa339: 
1:bdfa339: import org.apache.activemq.command.ActiveMQMessage;
1:bdfa339: import org.apache.activemq.command.MessageId;
1:bdfa339: import org.junit.Test;
1:bdfa339: 
1:bdfa339: import java.util.concurrent.Callable;
1:bdfa339: import java.util.concurrent.FutureTask;
1:bdfa339: 
1:bdfa339: import static org.junit.Assert.assertFalse;
1:bdfa339: 
1:bdfa339: public class AbstractStoreCursorTest {
1:bdfa339: 
1:bdfa339:     @Test
1:bdfa339:     public void testGotToStore() throws Exception  {
1:bdfa339: 
1:bdfa339:         ActiveMQMessage message = new ActiveMQMessage();
1:bdfa339:         message.setRecievedByDFBridge(true);
1:bdfa339: 
1:bdfa339:         MessageId messageId = new MessageId();
1:bdfa339:         message.setMessageId(messageId);
1:bdfa339: 
1:bdfa339:         FutureTask<Long> futureTask = new FutureTask<Long>(new Callable<Long>() {
1:bdfa339:             @Override
1:bdfa339:             public Long call() {
1:bdfa339:                 return 0l;
1:bdfa339:             }
1:bdfa339:         });
1:bdfa339:         messageId.setFutureOrSequenceLong(futureTask);
1:bdfa339: 
1:bdfa339:         futureTask.cancel(false);
1:bdfa339: 
1:bdfa339:         assertFalse(AbstractStoreCursor.gotToTheStore(message));
1:bdfa339:     }
1:bdfa339: }
============================================================================
author:gtully
-------------------------------------------------------------------------------
commit:bdfa339
/////////////////////////////////////////////////////////////////////////
1: /**
1:  * Licensed to the Apache Software Foundation (ASF) under one or more
1:  * contributor license agreements. See the NOTICE file distributed with
1:  * this work for additional information regarding copyright ownership.
1:  * The ASF licenses this file to You under the Apache License, Version 2.0
1:  * (the "License"); you may not use this file except in compliance with
1:  * the License. You may obtain a copy of the License at
1:  * <p>
1:  * http://www.apache.org/licenses/LICENSE-2.0
1:  * <p>
1:  * Unless required by applicable law or agreed to in writing, software
1:  * distributed under the License is distributed on an "AS IS" BASIS,
1:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:  * See the License for the specific language governing permissions and
1:  * limitations under the License.
1:  */
1: 
1: package org.apache.activemq.broker.region.cursors;
1: 
1: import org.apache.activemq.command.ActiveMQMessage;
1: import org.apache.activemq.command.MessageId;
1: import org.junit.Test;
1: 
1: import java.util.concurrent.Callable;
1: import java.util.concurrent.FutureTask;
1: 
1: import static org.junit.Assert.assertFalse;
1: 
1: public class AbstractStoreCursorTest {
1: 
1:     @Test
1:     public void testGotToStore() throws Exception  {
1: 
1:         ActiveMQMessage message = new ActiveMQMessage();
1:         message.setRecievedByDFBridge(true);
1: 
1:         MessageId messageId = new MessageId();
1:         message.setMessageId(messageId);
1: 
1:         FutureTask<Long> futureTask = new FutureTask<Long>(new Callable<Long>() {
1:             @Override
1:             public Long call() {
1:                 return 0l;
1:             }
1:         });
1:         messageId.setFutureOrSequenceLong(futureTask);
1: 
1:         futureTask.cancel(false);
1: 
1:         assertFalse(AbstractStoreCursor.gotToTheStore(message));
1:     }
1: }
============================================================================