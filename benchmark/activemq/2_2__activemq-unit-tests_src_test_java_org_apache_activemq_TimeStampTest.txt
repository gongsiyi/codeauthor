1:274f677: /**
1:fc00993:  * Licensed to the Apache Software Foundation (ASF) under one or more
1:fc00993:  * contributor license agreements.  See the NOTICE file distributed with
1:fc00993:  * this work for additional information regarding copyright ownership.
1:fc00993:  * The ASF licenses this file to You under the Apache License, Version 2.0
1:fc00993:  * (the "License"); you may not use this file except in compliance with
1:fc00993:  * the License.  You may obtain a copy of the License at
3:274f677:  *
1:fc00993:  *      http://www.apache.org/licenses/LICENSE-2.0
1:274f677:  *
1:fc00993:  * Unless required by applicable law or agreed to in writing, software
1:fc00993:  * distributed under the License is distributed on an "AS IS" BASIS,
1:fc00993:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:fc00993:  * See the License for the specific language governing permissions and
1:fc00993:  * limitations under the License.
1:274f677:  */
1:274f677: package org.apache.activemq;
3:274f677: 
1:274f677: import javax.jms.Connection;
1:274f677: import javax.jms.DeliveryMode;
1:274f677: import javax.jms.Destination;
1:274f677: import javax.jms.Message;
1:274f677: import javax.jms.MessageConsumer;
1:274f677: import javax.jms.MessageProducer;
1:274f677: import javax.jms.Session;
1:274f677: 
1:74a7a8b: import junit.framework.TestCase;
1:74a7a8b: import org.apache.activemq.broker.BrokerPlugin;
1:74a7a8b: import org.apache.activemq.broker.BrokerService;
1:5cf486c: import org.apache.activemq.broker.TransportConnector;
1:74a7a8b: import org.apache.activemq.broker.util.UDPTraceBrokerPlugin;
1:74a7a8b: import org.apache.activemq.broker.view.ConnectionDotFilePlugin;
1:74a7a8b: 
1:274f677: public class TimeStampTest extends TestCase {
1:274f677:     public void test() throws Exception {
1:274f677:         BrokerService broker = new BrokerService();
1:274f677:         broker.setPersistent(false);
1:274f677:         broker.setUseJmx(true);
1:ecf89a6:         broker.setPlugins(new BrokerPlugin[] {new ConnectionDotFilePlugin(), new UDPTraceBrokerPlugin()});
1:5cf486c:         TransportConnector tcpConnector = broker.addConnector("tcp://localhost:0");
1:5cf486c:         broker.addConnector("stomp://localhost:0");
1:274f677:         broker.start();
1:274f677: 
1:274f677:         // Create a ConnectionFactory
1:5cf486c:         ActiveMQConnectionFactory connectionFactory =
1:5cf486c:             new ActiveMQConnectionFactory(tcpConnector.getConnectUri());
1:274f677: 
1:274f677:         // Create a Connection
1:274f677:         Connection connection = connectionFactory.createConnection();
1:274f677:         connection.start();
1:274f677: 
1:274f677:         // Create a Session
1:274f677:         Session session = connection.createSession(false, Session.AUTO_ACKNOWLEDGE);
1:274f677: 
1:274f677:         // Create the destination Queue
1:274f677:         Destination destination = session.createQueue("TEST.FOO");
1:274f677: 
1:274f677:         // Create a MessageProducer from the Session to the Topic or Queue
1:274f677:         MessageProducer producer = session.createProducer(destination);
1:274f677:         producer.setDeliveryMode(DeliveryMode.NON_PERSISTENT);
1:274f677: 
1:274f677:         // Create a messages
1:274f677:         Message sentMessage = session.createMessage();
1:274f677: 
1:274f677:         // Tell the producer to send the message
1:274f677:         long beforeSend = System.currentTimeMillis();
1:274f677:         producer.send(sentMessage);
1:274f677:         long afterSend = System.currentTimeMillis();
1:274f677: 
1:274f677:         // assert message timestamp is in window
1:274f677:         assertTrue(beforeSend <= sentMessage.getJMSTimestamp() && sentMessage.getJMSTimestamp() <= afterSend);
1:274f677: 
1:274f677:         // Create a MessageConsumer from the Session to the Topic or Queue
1:274f677:         MessageConsumer consumer = session.createConsumer(destination);
1:274f677: 
1:274f677:         // Wait for a message
1:274f677:         Message receivedMessage = consumer.receive(1000);
1:274f677: 
1:274f677:         // assert we got the same message ID we sent
1:274f677:         assertEquals(sentMessage.getJMSMessageID(), receivedMessage.getJMSMessageID());
1:274f677: 
1:274f677:         // assert message timestamp is in window
1:ecf89a6:         assertTrue("JMS Message Timestamp should be set during the send method: \n" + "        beforeSend = " + beforeSend + "\n" + "   getJMSTimestamp = "
1:ecf89a6:                    + receivedMessage.getJMSTimestamp() + "\n" + "         afterSend = " + afterSend + "\n", beforeSend <= receivedMessage.getJMSTimestamp()
1:ecf89a6:                                                                                                             && receivedMessage.getJMSTimestamp() <= afterSend);
1:274f677: 
1:274f677:         // assert message timestamp is unchanged
1:ecf89a6:         assertEquals("JMS Message Timestamp of recieved message should be the same as the sent message\n        ", sentMessage.getJMSTimestamp(), receivedMessage.getJMSTimestamp());
1:274f677: 
1:274f677:         // Clean up
1:274f677:         producer.close();
1:274f677:         consumer.close();
1:274f677:         session.close();
1:274f677:         connection.close();
1:274f677:         broker.stop();
1:274f677:     }
1:274f677: }
============================================================================
author:Timothy A. Bish
-------------------------------------------------------------------------------
commit:ef24cc9
commit:5cf486c
/////////////////////////////////////////////////////////////////////////
1: import org.apache.activemq.broker.TransportConnector;
/////////////////////////////////////////////////////////////////////////
1:         TransportConnector tcpConnector = broker.addConnector("tcp://localhost:0");
1:         broker.addConnector("stomp://localhost:0");
1:         ActiveMQConnectionFactory connectionFactory =
1:             new ActiveMQConnectionFactory(tcpConnector.getConnectUri());
author:Hiram R. Chirino
-------------------------------------------------------------------------------
commit:ecf89a6
/////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////
1:         broker.setPlugins(new BrokerPlugin[] {new ConnectionDotFilePlugin(), new UDPTraceBrokerPlugin()});
/////////////////////////////////////////////////////////////////////////
1:         assertTrue("JMS Message Timestamp should be set during the send method: \n" + "        beforeSend = " + beforeSend + "\n" + "   getJMSTimestamp = "
1:                    + receivedMessage.getJMSTimestamp() + "\n" + "         afterSend = " + afterSend + "\n", beforeSend <= receivedMessage.getJMSTimestamp()
1:                                                                                                             && receivedMessage.getJMSTimestamp() <= afterSend);
1:         assertEquals("JMS Message Timestamp of recieved message should be the same as the sent message\n        ", sentMessage.getJMSTimestamp(), receivedMessage.getJMSTimestamp());
commit:fc00993
/////////////////////////////////////////////////////////////////////////
1:  * Licensed to the Apache Software Foundation (ASF) under one or more
1:  * contributor license agreements.  See the NOTICE file distributed with
1:  * this work for additional information regarding copyright ownership.
1:  * The ASF licenses this file to You under the Apache License, Version 2.0
1:  * (the "License"); you may not use this file except in compliance with
1:  * the License.  You may obtain a copy of the License at
1:  *      http://www.apache.org/licenses/LICENSE-2.0
1:  * Unless required by applicable law or agreed to in writing, software
1:  * distributed under the License is distributed on an "AS IS" BASIS,
1:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:  * See the License for the specific language governing permissions and
1:  * limitations under the License.
commit:74a7a8b
/////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////
1: import junit.framework.TestCase;
1: import org.apache.activemq.broker.BrokerPlugin;
1: import org.apache.activemq.broker.BrokerService;
1: import org.apache.activemq.broker.util.UDPTraceBrokerPlugin;
1: import org.apache.activemq.broker.view.ConnectionDotFilePlugin;
1: 
/////////////////////////////////////////////////////////////////////////
0:         assertTrue("JMS Message Timestamp should be set during the send method: \n" 
0:                 + "        beforeSend = " + beforeSend + "\n"
0:                 + "   getJMSTimestamp = " + receivedMessage.getJMSTimestamp() + "\n"
0:                 + "         afterSend = " + afterSend + "\n",
commit:274f677
/////////////////////////////////////////////////////////////////////////
1: /**
1:  *
0:  * Copyright 2006 The Apache Software Foundation
1:  *
0:  *  Licensed under the Apache License, Version 2.0 (the "License");
0:  *  you may not use this file except in compliance with the License.
0:  *  You may obtain a copy of the License at
1:  *
0:  *     http://www.apache.org/licenses/LICENSE-2.0
1:  *
0:  *  Unless required by applicable law or agreed to in writing, software
0:  *  distributed under the License is distributed on an "AS IS" BASIS,
0:  *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
0:  *  See the License for the specific language governing permissions and
0:  *  limitations under the License.
1:  */
1: package org.apache.activemq;
1: 
1: 
0: import junit.framework.TestCase;
0: import org.apache.activemq.broker.BrokerPlugin;
0: import org.apache.activemq.broker.BrokerService;
0: import org.apache.activemq.broker.util.UDPTraceBrokerPlugin;
0: import org.apache.activemq.broker.view.ConnectionDotFilePlugin;
1: 
1: import javax.jms.Connection;
1: import javax.jms.DeliveryMode;
1: import javax.jms.Destination;
1: import javax.jms.Message;
1: import javax.jms.MessageConsumer;
1: import javax.jms.MessageProducer;
1: import javax.jms.Session;
1: 
1: public class TimeStampTest extends TestCase {
1:     public void test() throws Exception {
1:         BrokerService broker = new BrokerService();
1:         broker.setPersistent(false);
1:         broker.setUseJmx(true);
0:         broker.setPlugins(new BrokerPlugin[] { new ConnectionDotFilePlugin(), new UDPTraceBrokerPlugin() });
0:         broker.addConnector("tcp://localhost:61616");
0:         broker.addConnector("stomp://localhost:61613");
1:         broker.start();
1: 
1:         // Create a ConnectionFactory
0:         ActiveMQConnectionFactory connectionFactory = new ActiveMQConnectionFactory("tcp://localhost:61616");
1: 
1:         // Create a Connection
1:         Connection connection = connectionFactory.createConnection();
1:         connection.start();
1: 
1:         // Create a Session
1:         Session session = connection.createSession(false, Session.AUTO_ACKNOWLEDGE);
1: 
1:         // Create the destination Queue
1:         Destination destination = session.createQueue("TEST.FOO");
1: 
1:         // Create a MessageProducer from the Session to the Topic or Queue
1:         MessageProducer producer = session.createProducer(destination);
1:         producer.setDeliveryMode(DeliveryMode.NON_PERSISTENT);
1: 
1:         // Create a messages
1:         Message sentMessage = session.createMessage();
1: 
1:         // Tell the producer to send the message
1:         long beforeSend = System.currentTimeMillis();
1:         producer.send(sentMessage);
1:         long afterSend = System.currentTimeMillis();
1: 
1:         // assert message timestamp is in window
1:         assertTrue(beforeSend <= sentMessage.getJMSTimestamp() && sentMessage.getJMSTimestamp() <= afterSend);
1: 
1:         // Create a MessageConsumer from the Session to the Topic or Queue
1:         MessageConsumer consumer = session.createConsumer(destination);
1: 
1:         // Wait for a message
1:         Message receivedMessage = consumer.receive(1000);
1: 
1:         // assert we got the same message ID we sent
1:         assertEquals(sentMessage.getJMSMessageID(), receivedMessage.getJMSMessageID());
1: 
1:         // assert message timestamp is in window
0:         assertTrue("JMS Message Timestamp should be set during the send method: \n" +
0:                 "        beforeSend = " + beforeSend + "\n" +
0:                 "   getJMSTimestamp = " + receivedMessage.getJMSTimestamp() + "\n" +
0:                 "         afterSend = " + afterSend + "\n",
0:                 beforeSend <= receivedMessage.getJMSTimestamp() && receivedMessage.getJMSTimestamp() <= afterSend);
1: 
1:         // assert message timestamp is unchanged
0:         assertEquals("JMS Message Timestamp of recieved message should be the same as the sent message\n        ",
0:                 sentMessage.getJMSTimestamp(), receivedMessage.getJMSTimestamp());
1: 
1:         // Clean up
1:         producer.close();
1:         consumer.close();
1:         session.close();
1:         connection.close();
1:         broker.stop();
1:     }
1: }
============================================================================