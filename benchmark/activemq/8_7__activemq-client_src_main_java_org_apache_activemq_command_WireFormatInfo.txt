1:d29ca2a: /**
1:57b4941:  * Licensed to the Apache Software Foundation (ASF) under one or more
1:57b4941:  * contributor license agreements.  See the NOTICE file distributed with
1:57b4941:  * this work for additional information regarding copyright ownership.
1:57b4941:  * The ASF licenses this file to You under the Apache License, Version 2.0
1:57b4941:  * (the "License"); you may not use this file except in compliance with
1:57b4941:  * the License.  You may obtain a copy of the License at
1:b0c2a40:  *
1:230a86c:  *      http://www.apache.org/licenses/LICENSE-2.0
5:d29ca2a:  *
1:d29ca2a:  * Unless required by applicable law or agreed to in writing, software
1:d29ca2a:  * distributed under the License is distributed on an "AS IS" BASIS,
1:d29ca2a:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:d29ca2a:  * See the License for the specific language governing permissions and
1:d29ca2a:  * limitations under the License.
1:d29ca2a:  */
1:d29ca2a: package org.apache.activemq.command;
28:d29ca2a: 
1:446629b: import java.io.DataInputStream;
1:446629b: import java.io.DataOutputStream;
1:446629b: import java.io.IOException;
1:d29ca2a: import java.util.Arrays;
1:446629b: import java.util.Collections;
1:446629b: import java.util.HashMap;
1:446629b: import java.util.Map;
1:25c99a6: 
1:cd0fb61: import org.apache.activemq.state.CommandVisitor;
1:88acb0e: import org.apache.activemq.util.ByteArrayInputStream;
1:88acb0e: import org.apache.activemq.util.ByteArrayOutputStream;
1:88acb0e: import org.apache.activemq.util.ByteSequence;
1:cd0fb61: import org.apache.activemq.util.MarshallingSupport;
1:88acb0e: import org.apache.activemq.wireformat.WireFormat;
1:190a44b: import org.fusesource.hawtbuf.UTF8Buffer;
1:cd0fb61: 
1:d29ca2a: /**
1:4afa5d6:  * @openwire:marshaller code="1"
1:25c99a6:  *
1:d29ca2a:  */
1:446629b: public class WireFormatInfo implements Command, MarshallAware {
1:446629b: 
1:f812e34:     public static final byte DATA_STRUCTURE_TYPE = CommandTypes.WIREFORMAT_INFO;
1:ecf89a6:     private static final int MAX_PROPERTY_SIZE = 1024 * 4;
1:fc00993:     private static final byte MAGIC[] = new byte[] {'A', 'c', 't', 'i', 'v', 'e', 'M', 'Q'};
1:446629b: 
1:d29ca2a:     protected byte magic[] = MAGIC;
1:446629b:     protected int version;
1:446629b:     protected ByteSequence marshalledProperties;
1:f812e34: 
1:ecf89a6:     protected transient Map<String, Object> properties;
1:8704338:     private transient Endpoint from;
1:8704338:     private transient Endpoint to;
1:d29ca2a: 
1:25c99a6:     @Override
1:d29ca2a:     public byte getDataStructureType() {
1:d29ca2a:         return DATA_STRUCTURE_TYPE;
11:d29ca2a:     }
1:f812e34: 
1:25c99a6:     @Override
1:d29ca2a:     public boolean isWireFormatInfo() {
1:d29ca2a:         return true;
1:33b73ac:     }
1:ef0c0e1: 
1:25c99a6:     @Override
1:446629b:     public boolean isMarshallAware() {
1:446629b:         return true;
1:446629b:     }
1:7b69145: 
1:33b73ac:     /**
1:6ce83ac:      * @openwire:property version=1 size=8 testSize=-1
1:d29ca2a:      */
1:d29ca2a:     public byte[] getMagic() {
1:d29ca2a:         return magic;
1:d29ca2a:     }
1:f812e34: 
1:d29ca2a:     public void setMagic(byte[] magic) {
1:d29ca2a:         this.magic = magic;
1:d29ca2a:     }
1:446629b: 
1:33b73ac:     /**
2:33b73ac:      * @openwire:property version=1
1:33b73ac:      */
1:d29ca2a:     public int getVersion() {
1:d29ca2a:         return version;
1:33b73ac:     }
1:f812e34: 
1:d29ca2a:     public void setVersion(int version) {
1:d29ca2a:         this.version = version;
1:33b73ac:     }
1:f812e34: 
1:446629b:     /**
1:446629b:      * @openwire:property version=1
1:446629b:      */
1:446629b:     public ByteSequence getMarshalledProperties() {
1:446629b:         return marshalledProperties;
1:446629b:     }
1:f812e34: 
1:446629b:     public void setMarshalledProperties(ByteSequence marshalledProperties) {
1:446629b:         this.marshalledProperties = marshalledProperties;
1:446629b:     }
1:446629b: 
1:d29ca2a:     /**
1:8704338:      * The endpoint within the transport where this message came from.
1:33b73ac:      */
1:25c99a6:     @Override
1:8704338:     public Endpoint getFrom() {
1:8704338:         return from;
1:33b73ac:     }
1:446629b: 
1:25c99a6:     @Override
1:8704338:     public void setFrom(Endpoint from) {
1:8704338:         this.from = from;
1:d29ca2a:     }
1:446629b: 
1:d29ca2a:     /**
1:f812e34:      * The endpoint within the transport where this message is going to - null
1:f812e34:      * means all endpoints.
1:d29ca2a:      */
1:25c99a6:     @Override
1:8704338:     public Endpoint getTo() {
1:8704338:         return to;
1:d29ca2a:     }
1:446629b: 
1:25c99a6:     @Override
1:8704338:     public void setTo(Endpoint to) {
1:8704338:         this.to = to;
1:d29ca2a:     }
1:f812e34: 
1:f812e34:     // ////////////////////
1:25c99a6:     //
1:446629b:     // Implementation Methods.
2:446629b:     //
1:f812e34:     // ////////////////////
1:f812e34: 
1:446629b:     public Object getProperty(String name) throws IOException {
1:f812e34:         if (properties == null) {
1:ecf89a6:             if (marshalledProperties == null) {
1:446629b:                 return null;
1:ecf89a6:             }
1:446629b:             properties = unmarsallProperties(marshalledProperties);
1:446629b:         }
1:446629b:         return properties.get(name);
1:446629b:     }
1:f812e34: 
1:ecf89a6:     @SuppressWarnings("unchecked")
1:ecf89a6:     public Map<String, Object> getProperties() throws IOException {
1:f812e34:         if (properties == null) {
1:ecf89a6:             if (marshalledProperties == null) {
1:446629b:                 return Collections.EMPTY_MAP;
1:ecf89a6:             }
1:446629b:             properties = unmarsallProperties(marshalledProperties);
1:446629b:         }
1:446629b:         return Collections.unmodifiableMap(properties);
1:446629b:     }
1:f812e34: 
1:446629b:     public void clearProperties() {
1:446629b:         marshalledProperties = null;
1:f812e34:         properties = null;
1:446629b:     }
1:446629b: 
1:446629b:     public void setProperty(String name, Object value) throws IOException {
1:446629b:         lazyCreateProperties();
1:446629b:         properties.put(name, value);
1:446629b:     }
1:446629b: 
1:446629b:     protected void lazyCreateProperties() throws IOException {
1:f812e34:         if (properties == null) {
1:f812e34:             if (marshalledProperties == null) {
1:ecf89a6:                 properties = new HashMap<String, Object>();
1:446629b:             } else {
1:446629b:                 properties = unmarsallProperties(marshalledProperties);
1:446629b:                 marshalledProperties = null;
1:446629b:             }
1:446629b:         }
1:446629b:     }
1:446629b: 
1:ecf89a6:     private Map<String, Object> unmarsallProperties(ByteSequence marshalledProperties) throws IOException {
1:ecf89a6:         return MarshallingSupport.unmarshalPrimitiveMap(new DataInputStream(new ByteArrayInputStream(marshalledProperties)), MAX_PROPERTY_SIZE);
1:446629b:     }
1:446629b: 
1:25c99a6:     @Override
1:446629b:     public void beforeMarshall(WireFormat wireFormat) throws IOException {
1:446629b:         // Need to marshal the properties.
1:f812e34:         if (marshalledProperties == null && properties != null) {
1:446629b:             ByteArrayOutputStream baos = new ByteArrayOutputStream();
1:446629b:             DataOutputStream os = new DataOutputStream(baos);
1:446629b:             MarshallingSupport.marshalPrimitiveMap(properties, os);
1:446629b:             os.close();
1:446629b:             marshalledProperties = baos.toByteSequence();
1:446629b:         }
1:446629b:     }
1:446629b: 
1:25c99a6:     @Override
1:446629b:     public void afterMarshall(WireFormat wireFormat) throws IOException {
1:446629b:     }
1:446629b: 
1:25c99a6:     @Override
1:446629b:     public void beforeUnmarshall(WireFormat wireFormat) throws IOException {
1:446629b:     }
1:446629b: 
1:25c99a6:     @Override
1:446629b:     public void afterUnmarshall(WireFormat wireFormat) throws IOException {
1:446629b:     }
1:446629b: 
1:d29ca2a:     public boolean isValid() {
1:d29ca2a:         return magic != null && Arrays.equals(magic, MAGIC);
1:d29ca2a:     }
1:33b73ac: 
1:25c99a6:     @Override
1:d29ca2a:     public void setResponseRequired(boolean responseRequired) {
1:d29ca2a:     }
1:33b73ac: 
1:d29ca2a:     /**
1:f812e34:      * @throws IOException
1:d29ca2a:      */
1:446629b:     public boolean isCacheEnabled() throws IOException {
1:6583ef1:         return Boolean.TRUE == getProperty("CacheEnabled");
1:d29ca2a:     }
1:f812e34: 
1:446629b:     public void setCacheEnabled(boolean cacheEnabled) throws IOException {
1:6583ef1:         setProperty("CacheEnabled", cacheEnabled ? Boolean.TRUE : Boolean.FALSE);
1:d29ca2a:     }
1:d29ca2a: 
1:8704338:     /**
1:f812e34:      * @throws IOException
1:8704338:      */
1:446629b:     public boolean isStackTraceEnabled() throws IOException {
1:6583ef1:         return Boolean.TRUE == getProperty("StackTraceEnabled");
1:d29ca2a:     }
1:f812e34: 
1:446629b:     public void setStackTraceEnabled(boolean stackTraceEnabled) throws IOException {
1:6583ef1:         setProperty("StackTraceEnabled", stackTraceEnabled ? Boolean.TRUE : Boolean.FALSE);
1:d29ca2a:     }
1:d29ca2a: 
1:8704338:     /**
1:f812e34:      * @throws IOException
1:8704338:      */
1:446629b:     public boolean isTcpNoDelayEnabled() throws IOException {
1:6583ef1:         return Boolean.TRUE == getProperty("TcpNoDelayEnabled");
1:d29ca2a:     }
1:f812e34: 
1:446629b:     public void setTcpNoDelayEnabled(boolean tcpNoDelayEnabled) throws IOException {
1:6583ef1:         setProperty("TcpNoDelayEnabled", tcpNoDelayEnabled ? Boolean.TRUE : Boolean.FALSE);
1:d29ca2a:     }
1:d29ca2a: 
2:79d2868:     /**
1:f812e34:      * @throws IOException
2:79d2868:      */
1:6583ef1:     public boolean isSizePrefixDisabled() throws IOException {
1:6583ef1:         return Boolean.TRUE == getProperty("SizePrefixDisabled");
1:d29ca2a:     }
1:f812e34: 
1:6583ef1:     public void setSizePrefixDisabled(boolean prefixPacketSize) throws IOException {
1:6583ef1:         setProperty("SizePrefixDisabled", prefixPacketSize ? Boolean.TRUE : Boolean.FALSE);
1:d29ca2a:     }
1:d29ca2a: 
1:79d2868:     /**
1:f812e34:      * @throws IOException
1:79d2868:      */
1:446629b:     public boolean isTightEncodingEnabled() throws IOException {
1:6583ef1:         return Boolean.TRUE == getProperty("TightEncodingEnabled");
1:d29ca2a:     }
1:f812e34: 
1:446629b:     public void setTightEncodingEnabled(boolean tightEncodingEnabled) throws IOException {
1:6583ef1:         setProperty("TightEncodingEnabled", tightEncodingEnabled ? Boolean.TRUE : Boolean.FALSE);
1:d29ca2a:     }
1:f812e34: 
1:190a44b:     public String getHost() throws IOException {
1:190a44b:         UTF8Buffer buff = (UTF8Buffer) getProperty("Host");
1:190a44b:         if( buff == null ) {
1:190a44b:             return null;
1:190a44b:         }
1:25c99a6:         return buff.toString();
1:190a44b:     }
1:190a44b: 
1:190a44b:     public void setHost(String hostname) throws IOException {
1:190a44b:         setProperty("Host", hostname);
1:190a44b:     }
1:190a44b: 
1:ef0c0e1:     /**
1:f812e34:      * @throws IOException
1:ef0c0e1:      */
1:ef0c0e1:     public long getMaxInactivityDuration() throws IOException {
1:f812e34:         Long l = (Long)getProperty("MaxInactivityDuration");
1:ef0c0e1:         return l == null ? 0 : l.longValue();
1:ef0c0e1:     }
1:f812e34: 
1:f559236:     public void setMaxInactivityDuration(long maxInactivityDuration) throws IOException {
1:ef0c0e1:         setProperty("MaxInactivityDuration", new Long(maxInactivityDuration));
1:ef0c0e1:     }
1:25c99a6: 
1:f559236:     public long getMaxInactivityDurationInitalDelay() throws IOException {
1:f559236:         Long l = (Long)getProperty("MaxInactivityDurationInitalDelay");
1:f559236:         return l == null ? 0 : l.longValue();
1:d29ca2a:     }
1:446629b: 
1:f559236:     public void setMaxInactivityDurationInitalDelay(long maxInactivityDurationInitalDelay) throws IOException {
1:f559236:         setProperty("MaxInactivityDurationInitalDelay", new Long(maxInactivityDurationInitalDelay));
1:d29ca2a:     }
1:446629b: 
1:e5e99d7:     public long getMaxFrameSize() throws IOException {
1:e5e99d7:         Long l = (Long)getProperty("MaxFrameSize");
1:e5e99d7:         return l == null ? 0 : l.longValue();
1:d29ca2a:     }
1:446629b: 
1:e5e99d7:     public void setMaxFrameSize(long maxFrameSize) throws IOException {
1:e5e99d7:         setProperty("MaxFrameSize", new Long(maxFrameSize));
1:d29ca2a:     }
1:d29ca2a: 
1:aa54a8b:     /**
1:f812e34:      * @throws IOException
1:aa54a8b:      */
1:aa54a8b:     public int getCacheSize() throws IOException {
1:f812e34:         Integer i = (Integer)getProperty("CacheSize");
1:aa54a8b:         return i == null ? 0 : i.intValue();
1:aa54a8b:     }
1:f812e34: 
1:aa54a8b:     public void setCacheSize(int cacheSize) throws IOException {
1:aa54a8b:         setProperty("CacheSize", new Integer(cacheSize));
1:aa54a8b:     }
1:f812e34: 
1:8d5e84b:     /**
1:8d5e84b:      * @throws IOException
1:8d5e84b:      */
1:8d5e84b:     public String getProviderName() throws IOException {
1:8d5e84b:         Object o = getProperty("ProviderName");
1:8d5e84b:         return o == null ? null : o.toString();
1:8d5e84b:     }
1:8d5e84b: 
1:8d5e84b:     public void setProviderName(String providerName) throws IOException {
1:8d5e84b:         setProperty("ProviderName", providerName);
1:8d5e84b:     }
1:8d5e84b: 
1:8d5e84b:     /**
1:8d5e84b:      * @throws IOException
1:8d5e84b:      */
1:8d5e84b:     public String getProviderVersion() throws IOException {
1:8d5e84b:         Object o = getProperty("ProviderVersion");
1:8d5e84b:         return o == null ? null : o.toString();
1:8d5e84b:     }
1:8d5e84b: 
1:8d5e84b:     public void setProviderVersion(String providerVersion) throws IOException {
1:8d5e84b:         setProperty("ProviderVersion", providerVersion);
1:8d5e84b:     }
1:8d5e84b: 
1:8d5e84b:     /**
1:8d5e84b:      * @throws IOException
1:8d5e84b:      */
1:8d5e84b:     public String getPlatformDetails() throws IOException {
1:8d5e84b:         Object o = getProperty("PlatformDetails");
1:8d5e84b:         return o == null ? null : o.toString();
1:8d5e84b:     }
1:8d5e84b: 
1:8d5e84b:     public void setPlatformDetails(String platformDetails) throws IOException {
1:8d5e84b:         setProperty("PlatformDetails", platformDetails);
1:8d5e84b:     }
1:8d5e84b: 
1:25c99a6:     @Override
1:7f5213b:     public Response visit(CommandVisitor visitor) throws Exception {
1:d29ca2a:         return visitor.processWireFormat(this);
1:d29ca2a:     }
1:aa54a8b: 
1:f392884:     @Override
1:33b73ac:     public String toString() {
1:ecf89a6:         Map<String, Object> p = null;
1:f812e34:         try {
1:f812e34:             p = getProperties();
1:ecf89a6:         } catch (IOException ignore) {
1:f812e34:         }
1:ecf89a6:         return "WireFormatInfo { version=" + version + ", properties=" + p + ", magic=" + toString(magic) + "}";
1:7b69145:     }
1:f812e34: 
1:f812e34:     private String toString(byte[] data) {
1:7b69145:         StringBuffer sb = new StringBuffer();
1:7b69145:         sb.append('[');
1:7b69145:         for (int i = 0; i < data.length; i++) {
1:f812e34:             if (i != 0) {
1:7b69145:                 sb.append(',');
1:7b69145:             }
1:f812e34:             sb.append((char)data[i]);
1:7b69145:         }
1:7b69145:         sb.append(']');
1:7b69145:         return sb.toString();
1:6583ef1:     }
1:aa54a8b: 
1:f812e34:     // /////////////////////////////////////////////////////////////
1:446629b:     //
1:446629b:     // This are not implemented.
1:446629b:     //
1:f812e34:     // /////////////////////////////////////////////////////////////
1:f812e34: 
1:25c99a6:     @Override
1:8704338:     public void setCommandId(int value) {
1:446629b:     }
1:f812e34: 
1:25c99a6:     @Override
1:8704338:     public int getCommandId() {
1:446629b:         return 0;
1:446629b:     }
1:f812e34: 
1:25c99a6:     @Override
1:446629b:     public boolean isResponseRequired() {
1:446629b:         return false;
1:446629b:     }
1:f812e34: 
1:25c99a6:     @Override
1:446629b:     public boolean isResponse() {
1:446629b:         return false;
1:446629b:     }
1:f812e34: 
1:25c99a6:     @Override
1:446629b:     public boolean isBrokerInfo() {
1:446629b:         return false;
1:446629b:     }
1:f812e34: 
1:25c99a6:     @Override
1:446629b:     public boolean isMessageDispatch() {
1:446629b:         return false;
1:446629b:     }
1:f812e34: 
1:25c99a6:     @Override
1:446629b:     public boolean isMessage() {
1:446629b:         return false;
1:446629b:     }
1:f812e34: 
1:25c99a6:     @Override
1:446629b:     public boolean isMessageAck() {
1:446629b:         return false;
1:446629b:     }
1:f812e34: 
1:25c99a6:     @Override
1:f812e34:     public boolean isMessageDispatchNotification() {
1:446629b:         return false;
1:446629b:     }
1:f812e34: 
1:25c99a6:     @Override
1:f812e34:     public boolean isShutdownInfo() {
1:446629b:         return false;
1:446629b:     }
1:25c99a6: 
1:25c99a6:     @Override
1:f392884:     public boolean isConnectionControl() {
7:d29ca2a:         return false;
1:446629b:     }
1:f812e34: 
1:25c99a6:     @Override
1:25c99a6:     public boolean isConsumerControl() {
1:25c99a6:         return false;
1:25c99a6:     }
1:25c99a6: 
1:446629b:     public void setCachedMarshalledForm(WireFormat wireFormat, ByteSequence data) {
1:446629b:     }
1:f812e34: 
1:446629b:     public ByteSequence getCachedMarshalledForm(WireFormat wireFormat) {
1:446629b:         return null;
1:33b73ac:     }
1:d29ca2a: }
============================================================================
author:Hadrian Zbarcea
-------------------------------------------------------------------------------
commit:d54d046
author:Michael L. Bloom
-------------------------------------------------------------------------------
commit:8d5e84b
/////////////////////////////////////////////////////////////////////////
1:     /**
1:      * @throws IOException
1:      */
1:     public String getProviderName() throws IOException {
1:         Object o = getProperty("ProviderName");
1:         return o == null ? null : o.toString();
1:     }
1: 
1:     public void setProviderName(String providerName) throws IOException {
1:         setProperty("ProviderName", providerName);
1:     }
1: 
1:     /**
1:      * @throws IOException
1:      */
1:     public String getProviderVersion() throws IOException {
1:         Object o = getProperty("ProviderVersion");
1:         return o == null ? null : o.toString();
1:     }
1: 
1:     public void setProviderVersion(String providerVersion) throws IOException {
1:         setProperty("ProviderVersion", providerVersion);
1:     }
1: 
1:     /**
1:      * @throws IOException
1:      */
1:     public String getPlatformDetails() throws IOException {
1:         Object o = getProperty("PlatformDetails");
1:         return o == null ? null : o.toString();
1:     }
1: 
1:     public void setPlatformDetails(String platformDetails) throws IOException {
1:         setProperty("PlatformDetails", platformDetails);
1:     }
1: 
author:Timothy Bish
-------------------------------------------------------------------------------
commit:25c99a6
/////////////////////////////////////////////////////////////////////////
1: 
/////////////////////////////////////////////////////////////////////////
1:  *
/////////////////////////////////////////////////////////////////////////
1:     @Override
1:     @Override
1:     @Override
/////////////////////////////////////////////////////////////////////////
1:     @Override
1:     @Override
/////////////////////////////////////////////////////////////////////////
1:     @Override
1:     @Override
1:     //
/////////////////////////////////////////////////////////////////////////
1:     @Override
/////////////////////////////////////////////////////////////////////////
1:     @Override
1:     @Override
1:     @Override
/////////////////////////////////////////////////////////////////////////
1:     @Override
/////////////////////////////////////////////////////////////////////////
1:         return buff.toString();
/////////////////////////////////////////////////////////////////////////
1: 
/////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////
1:     @Override
/////////////////////////////////////////////////////////////////////////
1:     @Override
1:     @Override
1:     @Override
1:     @Override
1:     @Override
1:     @Override
1:     @Override
1:     @Override
1:     @Override
1:     @Override
1: 
1:     @Override
1:     @Override
1:     public boolean isConsumerControl() {
1:         return false;
1:     }
1: 
author:Hiram Chirino
-------------------------------------------------------------------------------
commit:190a44b
/////////////////////////////////////////////////////////////////////////
1: import org.fusesource.hawtbuf.UTF8Buffer;
/////////////////////////////////////////////////////////////////////////
1:     public String getHost() throws IOException {
1:         UTF8Buffer buff = (UTF8Buffer) getProperty("Host");
1:         if( buff == null ) {
1:             return null;
1:         }
0:         return (String) buff.toString();
1:     }
1: 
1:     public void setHost(String hostname) throws IOException {
1:         setProperty("Host", hostname);
1:     }
1: 
author:Hiram R. Chirino
-------------------------------------------------------------------------------
commit:9a8f6e4
commit:b0c2a40
/////////////////////////////////////////////////////////////////////////
1:  * 
commit:ecf89a6
/////////////////////////////////////////////////////////////////////////
1:     private static final int MAX_PROPERTY_SIZE = 1024 * 4;
1:     protected transient Map<String, Object> properties;
/////////////////////////////////////////////////////////////////////////
1:             if (marshalledProperties == null) {
1:             }
1:     @SuppressWarnings("unchecked")
1:     public Map<String, Object> getProperties() throws IOException {
1:             if (marshalledProperties == null) {
1:             }
/////////////////////////////////////////////////////////////////////////
1:                 properties = new HashMap<String, Object>();
/////////////////////////////////////////////////////////////////////////
1:     private Map<String, Object> unmarsallProperties(ByteSequence marshalledProperties) throws IOException {
1:         return MarshallingSupport.unmarshalPrimitiveMap(new DataInputStream(new ByteArrayInputStream(marshalledProperties)), MAX_PROPERTY_SIZE);
/////////////////////////////////////////////////////////////////////////
1:         Map<String, Object> p = null;
1:         } catch (IOException ignore) {
1:         return "WireFormatInfo { version=" + version + ", properties=" + p + ", magic=" + toString(magic) + "}";
commit:fc00993
/////////////////////////////////////////////////////////////////////////
1:     private static final byte MAGIC[] = new byte[] {'A', 'c', 't', 'i', 'v', 'e', 'M', 'Q'};
commit:f812e34
/////////////////////////////////////////////////////////////////////////
0:     private static final int MAX_PROPERTY_SIZE = 1024 * 4;
1:     public static final byte DATA_STRUCTURE_TYPE = CommandTypes.WIREFORMAT_INFO;
0:     static final private byte MAGIC[] = new byte[] {'A', 'c', 't', 'i', 'v', 'e', 'M', 'Q'};
1: 
/////////////////////////////////////////////////////////////////////////
1: 
/////////////////////////////////////////////////////////////////////////
1: 
1: 
1: 
/////////////////////////////////////////////////////////////////////////
1:      * The endpoint within the transport where this message is going to - null
1:      * means all endpoints.
/////////////////////////////////////////////////////////////////////////
1: 
1:     // ////////////////////
1:     // ////////////////////
1: 
1:         if (properties == null) {
0:             if (marshalledProperties == null)
1: 
1:         if (properties == null) {
0:             if (marshalledProperties == null)
1: 
1:         properties = null;
/////////////////////////////////////////////////////////////////////////
1:         if (properties == null) {
1:             if (marshalledProperties == null) {
/////////////////////////////////////////////////////////////////////////
1: 
0:         return MarshallingSupport
0:             .unmarshalPrimitiveMap(new DataInputStream(new ByteArrayInputStream(marshalledProperties)),
0:                                    MAX_PROPERTY_SIZE);
1:         if (marshalledProperties == null && properties != null) {
/////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////
1:      * @throws IOException
1: 
1:      * @throws IOException
1: 
1:      * @throws IOException
1: 
1:      * @throws IOException
1: 
1:      * @throws IOException
1: 
1: 
1:      * @throws IOException
1:         Long l = (Long)getProperty("MaxInactivityDuration");
1: 
1:      * @throws IOException
1:         Integer i = (Integer)getProperty("CacheSize");
1: 
1: 
0:         Map p = null;
1:         try {
1:             p = getProperties();
0:         } catch (IOException e) {
1:         }
0:         return "WireFormatInfo { version=" + version + ", properties=" + p + ", magic=" + toString(magic)
0:                + "}";
1: 
1:     private String toString(byte[] data) {
1:             if (i != 0) {
1:             sb.append((char)data[i]);
1:     // /////////////////////////////////////////////////////////////
1:     // /////////////////////////////////////////////////////////////
1: 
1: 
1: 
1: 
1: 
1: 
1: 
1: 
1: 
1:     public boolean isMessageDispatchNotification() {
1: 
1:     public boolean isShutdownInfo() {
1: 
1: 
commit:230a86c
/////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////
1:  *      http://www.apache.org/licenses/LICENSE-2.0
commit:aa54a8b
/////////////////////////////////////////////////////////////////////////
1:     /**
0:      * @throws IOException 
1:      */
1:     public int getCacheSize() throws IOException {
0:         Integer i = (Integer) getProperty("CacheSize");
1:         return i == null ? 0 : i.intValue();
1:     }
1:     public void setCacheSize(int cacheSize) throws IOException {
1:         setProperty("CacheSize", new Integer(cacheSize));
1:     }
1:     
1:     
commit:88acb0e
/////////////////////////////////////////////////////////////////////////
1: import org.apache.activemq.util.ByteArrayInputStream;
1: import org.apache.activemq.util.ByteArrayOutputStream;
1: import org.apache.activemq.util.ByteSequence;
1: import org.apache.activemq.wireformat.WireFormat;
commit:57b4941
/////////////////////////////////////////////////////////////////////////
1:  * Licensed to the Apache Software Foundation (ASF) under one or more
1:  * contributor license agreements.  See the NOTICE file distributed with
1:  * this work for additional information regarding copyright ownership.
1:  * The ASF licenses this file to You under the Apache License, Version 2.0
1:  * (the "License"); you may not use this file except in compliance with
1:  * the License.  You may obtain a copy of the License at
commit:f451ad0
/////////////////////////////////////////////////////////////////////////
0: import org.apache.activeio.command.WireFormat;
0: import org.apache.activeio.packet.ByteSequence;
0: import org.apache.activeio.util.ByteArrayInputStream;
0: import org.apache.activeio.util.ByteArrayOutputStream;
commit:ef0c0e1
/////////////////////////////////////////////////////////////////////////
1:     
1:     /**
0:      * @throws IOException 
1:      */
1:     public long getMaxInactivityDuration() throws IOException {
0:         Long l = (Long) getProperty("MaxInactivityDuration");
1:         return l == null ? 0 : l.longValue();
1:     }
0:     public void seMaxInactivityDuration(long maxInactivityDuration) throws IOException {
1:         setProperty("MaxInactivityDuration", new Long(maxInactivityDuration));
1:     }
commit:7b69145
/////////////////////////////////////////////////////////////////////////
0:         return "WireFormatInfo { version="+version+", properties="+p+", magic="+toString(magic)+"}";
1:     }
1:     
0:     private String toString(byte []data) {
1:         StringBuffer sb = new StringBuffer();
1:         sb.append('[');
1:         for (int i = 0; i < data.length; i++) {
0:             if( i != 0 ) {
1:                 sb.append(',');
1:             }
0:             sb.append((char)data[i]);            
1:         }
1:         sb.append(']');
1:         return sb.toString();
commit:6583ef1
/////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////
0:     private static final int MAX_PROPERTY_SIZE = 1024*4;
0: 	public static final byte DATA_STRUCTURE_TYPE = CommandTypes.WIREFORMAT_INFO;
/////////////////////////////////////////////////////////////////////////
0:         return MarshallingSupport.unmarshalPrimitiveMap(new DataInputStream(new ByteArrayInputStream(marshalledProperties)), MAX_PROPERTY_SIZE);
/////////////////////////////////////////////////////////////////////////
1:         return Boolean.TRUE == getProperty("CacheEnabled");
1:         setProperty("CacheEnabled", cacheEnabled ? Boolean.TRUE : Boolean.FALSE);
1:         return Boolean.TRUE == getProperty("StackTraceEnabled");
1:         setProperty("StackTraceEnabled", stackTraceEnabled ? Boolean.TRUE : Boolean.FALSE);
1:         return Boolean.TRUE == getProperty("TcpNoDelayEnabled");
1:         setProperty("TcpNoDelayEnabled", tcpNoDelayEnabled ? Boolean.TRUE : Boolean.FALSE);
1:     public boolean isSizePrefixDisabled() throws IOException {
1:         return Boolean.TRUE == getProperty("SizePrefixDisabled");
1:     public void setSizePrefixDisabled(boolean prefixPacketSize) throws IOException {
1:         setProperty("SizePrefixDisabled", prefixPacketSize ? Boolean.TRUE : Boolean.FALSE);
1:         return Boolean.TRUE == getProperty("TightEncodingEnabled");
1:         setProperty("TightEncodingEnabled", tightEncodingEnabled ? Boolean.TRUE : Boolean.FALSE);
/////////////////////////////////////////////////////////////////////////
0:     	Map p=null;
0: 		try {
0: 			p = getProperties();
0: 		} catch (IOException e) {
1: 		}
0:         return "WireFormatInfo { version="+version+", properties="+p+", magic="+Arrays.toString(magic)+"}";
commit:cd0fb61
/////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////
0: import org.activeio.ByteArrayInputStream;
0: import org.activeio.ByteArrayOutputStream;
0: import org.activeio.ByteSequence;
0: import org.activeio.command.WireFormat;
1: import org.apache.activemq.state.CommandVisitor;
0: import org.apache.activemq.util.IntrospectionSupport;
1: import org.apache.activemq.util.MarshallingSupport;
1: 
commit:446629b
/////////////////////////////////////////////////////////////////////////
0: import org.activeio.ByteArrayInputStream;
0: import org.activeio.ByteArrayOutputStream;
0: import org.activeio.ByteSequence;
0: import org.activeio.command.WireFormat;
0: import org.apache.activemq.util.MarshallingSupport;
1: import java.io.DataInputStream;
1: import java.io.DataOutputStream;
1: import java.io.IOException;
1: import java.util.Collections;
1: import java.util.HashMap;
1: import java.util.Map;
1: public class WireFormatInfo implements Command, MarshallAware {
1:     protected int version;
0:     protected transient HashMap properties;
1:     protected ByteSequence marshalledProperties;
/////////////////////////////////////////////////////////////////////////
1:     public boolean isMarshallAware() {
1:         return true;
1:     }
1: 
1: 
/////////////////////////////////////////////////////////////////////////
1:     
1:     /**
1:      * @openwire:property version=1
1:      */
1:     public ByteSequence getMarshalledProperties() {
1:         return marshalledProperties;
1:     }
1:     public void setMarshalledProperties(ByteSequence marshalledProperties) {
1:         this.marshalledProperties = marshalledProperties;
1:     }
1: 
0:     //////////////////////
1:     // 
1:     // Implementation Methods.
1:     //
0:     //////////////////////
1:     
1:     public Object getProperty(String name) throws IOException {
0:         if( properties == null ) {
0:             if( marshalledProperties ==null )
1:                 return null;
1:             properties = unmarsallProperties(marshalledProperties);
1:         }
1:         return properties.get(name);
1:     }
1:     
0:     public Map getProperties() throws IOException {
0:         if( properties == null ) {
0:             if( marshalledProperties==null )
1:                 return Collections.EMPTY_MAP;
1:             properties = unmarsallProperties(marshalledProperties);
1:         }
1:         return Collections.unmodifiableMap(properties);
1:     }
1:     
1:     public void clearProperties() {
1:         marshalledProperties = null;
0:         properties=null;
1:     }
1: 
1:     public void setProperty(String name, Object value) throws IOException {
1:         lazyCreateProperties();
1:         properties.put(name, value);
1:     }
1: 
1:     protected void lazyCreateProperties() throws IOException {
0:         if( properties == null ) {
0:             if( marshalledProperties == null ) {
0:                 properties = new HashMap();
1:             } else {
1:                 properties = unmarsallProperties(marshalledProperties);
1:                 marshalledProperties = null;
1:             }
1:         }
1:     }
1:     
0:     private HashMap unmarsallProperties(ByteSequence marshalledProperties) throws IOException {
0:         return MarshallingSupport.unmarshalPrimitiveMap(new DataInputStream(new ByteArrayInputStream(marshalledProperties)));
1:     }
1: 
1:     public void beforeMarshall(WireFormat wireFormat) throws IOException {
1:         // Need to marshal the properties.
0:         if( marshalledProperties==null && properties!=null ) {
1:             ByteArrayOutputStream baos = new ByteArrayOutputStream();
1:             DataOutputStream os = new DataOutputStream(baos);
1:             MarshallingSupport.marshalPrimitiveMap(properties, os);
1:             os.close();
1:             marshalledProperties = baos.toByteSequence();
1:         }
1:     }
1: 
1:     public void afterMarshall(WireFormat wireFormat) throws IOException {
1:     }
1: 
1:     public void beforeUnmarshall(WireFormat wireFormat) throws IOException {
1:     }
1: 
1:     public void afterUnmarshall(WireFormat wireFormat) throws IOException {
1:     }
1: 
0:      * @throws IOException 
1:     public boolean isCacheEnabled() throws IOException {
0:         return Boolean.TRUE == getProperty("cache");
1:     public void setCacheEnabled(boolean cacheEnabled) throws IOException {
0:         setProperty("cache", cacheEnabled ? Boolean.TRUE : Boolean.FALSE);
0:      * @throws IOException 
1:     public boolean isStackTraceEnabled() throws IOException {
0:         return Boolean.TRUE == getProperty("stackTrace");
1:     public void setStackTraceEnabled(boolean stackTraceEnabled) throws IOException {
0:         setProperty("stackTrace", stackTraceEnabled ? Boolean.TRUE : Boolean.FALSE);
0:      * @throws IOException 
1:     public boolean isTcpNoDelayEnabled() throws IOException {
0:         return Boolean.TRUE == getProperty("tcpNoDelay");
1:     public void setTcpNoDelayEnabled(boolean tcpNoDelayEnabled) throws IOException {
0:         setProperty("tcpNoDelay", tcpNoDelayEnabled ? Boolean.TRUE : Boolean.FALSE);
0:      * @throws IOException 
0:     public boolean isPrefixPacketSize() throws IOException {
0:         return Boolean.TRUE == getProperty("prefixPacketSize");
0:     public void setPrefixPacketSize(boolean prefixPacketSize) throws IOException {
0:         setProperty("prefixPacketSize", prefixPacketSize ? Boolean.TRUE : Boolean.FALSE);
0:      * @throws IOException 
1:     public boolean isTightEncodingEnabled() throws IOException {
0:         return Boolean.TRUE == getProperty("tightEncoding");
1:     public void setTightEncodingEnabled(boolean tightEncodingEnabled) throws IOException {
0:         setProperty("tightEncoding", tightEncodingEnabled ? Boolean.TRUE : Boolean.FALSE);
1: 
0:     ///////////////////////////////////////////////////////////////
1:     //
1:     // This are not implemented.
1:     //
0:     ///////////////////////////////////////////////////////////////
1:     
0:     public void setCommandId(short value) {
1:     }
0:     public short getCommandId() {
1:         return 0;
1:     }
1:     public boolean isResponseRequired() {
1:         return false;
1:     }
1:     public boolean isResponse() {
1:         return false;
1:     }
1:     public boolean isBrokerInfo() {
1:         return false;
1:     }
1:     public boolean isMessageDispatch() {
1:         return false;
1:     }
1:     public boolean isMessage() {
1:         return false;
1:     }
1:     public boolean isMessageAck() {
1:         return false;
1:     }
0:     public boolean isMessageDispatchNotification(){
1:         return false;
1:     }
0:     public boolean isShutdownInfo(){
1:         return false;
1:     }
1:     public void setCachedMarshalledForm(WireFormat wireFormat, ByteSequence data) {
1:     }
1:     public ByteSequence getCachedMarshalledForm(WireFormat wireFormat) {
1:         return null;
1:     }
1: 
commit:7f5213b
/////////////////////////////////////////////////////////////////////////
1:     public Response visit(CommandVisitor visitor) throws Exception {
commit:33b73ac
/////////////////////////////////////////////////////////////////////////
0: import org.apache.activemq.util.IntrospectionSupport;
/////////////////////////////////////////////////////////////////////////
0:     protected boolean stackTraceEnabled;
0:     protected boolean tcpNoDelayEnabled;
0:     protected boolean cacheEnabled;
0:     protected boolean tightEncodingEnabled;
0:     protected boolean prefixPacketSize;
/////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////
1:     /**
1:      * @openwire:property version=1
1:      */
0:     public boolean isPrefixPacketSize() {
0:         return prefixPacketSize;
1:     }
0:     public void setPrefixPacketSize(boolean prefixPacketSize) {
0:         this.prefixPacketSize = prefixPacketSize;
1:     }
1: 
1:     /**
1:      * @openwire:property version=1
1:      */
0:     public boolean isTightEncodingEnabled() {
0:         return tightEncodingEnabled;
1:     }
0:     public void setTightEncodingEnabled(boolean tightEncodingEnabled) {
0:         this.tightEncodingEnabled = tightEncodingEnabled;
1:     }
1: 
/////////////////////////////////////////////////////////////////////////
1:     public String toString() {
0:         return IntrospectionSupport.toString(this, WireFormatInfo.class);
1:     }
commit:48b4869
/////////////////////////////////////////////////////////////////////////
0:  * Copyright 2005-2006 The Apache Software Foundation
commit:d29ca2a
/////////////////////////////////////////////////////////////////////////
1: /**
1:  *
0:  * Copyright 2004 The Apache Software Foundation
1:  *
0:  * Licensed under the Apache License, Version 2.0 (the "License");
0:  * you may not use this file except in compliance with the License.
0:  * You may obtain a copy of the License at
1:  *
0:  * http://www.apache.org/licenses/LICENSE-2.0
1:  *
1:  * Unless required by applicable law or agreed to in writing, software
1:  * distributed under the License is distributed on an "AS IS" BASIS,
1:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:  * See the License for the specific language governing permissions and
1:  * limitations under the License.
1:  */
1: package org.apache.activemq.command;
1: 
0: import org.apache.activemq.state.CommandVisitor;
1: 
1: import java.util.Arrays;
1: 
1: /**
1:  * 
0:  * @openwire:marshaller
0:  * @version $Revision$
1:  */
0: public class WireFormatInfo implements Command {
1: 
0:     public static final byte DATA_STRUCTURE_TYPE = CommandTypes.WIREFORMAT_INFO;
0:     static final private byte MAGIC[] = new byte[] { 'A', 'c', 't', 'i', 'v', 'e', 'M', 'Q' };
1: 
0:     static final public long STACK_TRACE_MASK = 0x00000001;
0:     static final public long TCP_NO_DELAY_MASK = 0x00000002;
0:     static final public long CACHE_MASK = 0x00000004;
0:     static final public long COMPRESSION_MASK = 0x00000008;
1: 
0:     protected int version;
1:     protected byte magic[] = MAGIC;
0:     protected int options;
1: 
1:     public byte getDataStructureType() {
1:         return DATA_STRUCTURE_TYPE;
1:     }
1: 
1:     public boolean isWireFormatInfo() {
1:         return true;
1:     }
1: 
1:     /**
0:      * @openwire:property version=1 size=8
1:      */
1:     public byte[] getMagic() {
1:         return magic;
1:     }
1: 
1:     public void setMagic(byte[] magic) {
1:         this.magic = magic;
1:     }
1: 
1:     /**
0:      * @openwire:property version=1
1:      */
1:     public int getVersion() {
1:         return version;
1:     }
1: 
1:     public void setVersion(int version) {
1:         this.version = version;
1:     }
1: 
1:     public boolean isValid() {
1:         return magic != null && Arrays.equals(magic, MAGIC);
1:     }
1: 
0:     public void setCommandId(short value) {
1:     }
1: 
0:     public short getCommandId() {
0:         return 0;
1:     }
1: 
0:     public boolean isResponseRequired() {
1:         return false;
1:     }
1: 
0:     public boolean isResponse() {
1:         return false;
1:     }
1: 
0:     public boolean isBrokerInfo() {
1:         return false;
1:     }
1: 
0:     public boolean isMessageDispatch() {
1:         return false;
1:     }
1: 
0:     public boolean isMessage() {
1:         return false;
1:     }
1: 
0:     public boolean isMessageAck() {
1:         return false;
1:     }
1: 
1:     public void setResponseRequired(boolean responseRequired) {
1:     }
1: 
0:     public String toString() {
0:         return "WireFormatInfo {version=" + version + "}";
1:     }
1: 
1:     /**
0:      * @openwire:property version=1
1:      */
0:     public int getOptions() {
0:         return options;
1:     }
1: 
0:     public void setOptions(int options) {
0:         this.options = options;
1:     }
1: 
0:     public boolean isStackTraceEnabled() {
0:         return (options & STACK_TRACE_MASK) != 0;
1:     }
1: 
0:     public void setStackTraceEnabled(boolean enable) {
0:         if (enable) {
0:             options |= STACK_TRACE_MASK;
1:         }
0:         else {
0:             options &= ~STACK_TRACE_MASK;
1:         }
1:     }
1: 
0:     public boolean isTcpNoDelayEnabled() {
0:         return (options & TCP_NO_DELAY_MASK) != 0;
1:     }
1: 
0:     public void setTcpNoDelayEnabled(boolean enable) {
0:         if (enable) {
0:             options |= TCP_NO_DELAY_MASK;
1:         }
0:         else {
0:             options &= ~TCP_NO_DELAY_MASK;
1:         }
1:     }
1: 
0:     public boolean isCacheEnabled() {
0:         return (options & CACHE_MASK) != 0;
1:     }
1: 
0:     public void setCacheEnabled(boolean enable) {
0:         if (enable) {
0:             options |= CACHE_MASK;
1:         }
0:         else {
0:             options &= ~CACHE_MASK;
1:         }
1:     }
1: 
0:     public Response visit(CommandVisitor visitor) throws Throwable {
1:         return visitor.processWireFormat(this);
1:     }
1: 
0:     public boolean isMarshallAware() {
1:         return false;
1:     }
1: 
1: }
author:Bosanac Dejan
-------------------------------------------------------------------------------
commit:e5e99d7
/////////////////////////////////////////////////////////////////////////
0: 
1:     public long getMaxFrameSize() throws IOException {
1:         Long l = (Long)getProperty("MaxFrameSize");
1:         return l == null ? 0 : l.longValue();
0:     }
0: 
1:     public void setMaxFrameSize(long maxFrameSize) throws IOException {
1:         setProperty("MaxFrameSize", new Long(maxFrameSize));
0:     }
author:Robert Davies
-------------------------------------------------------------------------------
commit:f392884
/////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////
1:     @Override
/////////////////////////////////////////////////////////////////////////
0:     
1:     public boolean isConnectionControl() {
0:         return false;
0:     }
commit:f559236
/////////////////////////////////////////////////////////////////////////
1:     public void setMaxInactivityDuration(long maxInactivityDuration) throws IOException {
0:     
1:     public long getMaxInactivityDurationInitalDelay() throws IOException {
1:         Long l = (Long)getProperty("MaxInactivityDurationInitalDelay");
1:         return l == null ? 0 : l.longValue();
0:     }
0: 
1:     public void setMaxInactivityDurationInitalDelay(long maxInactivityDurationInitalDelay) throws IOException {
1:         setProperty("MaxInactivityDurationInitalDelay", new Long(maxInactivityDurationInitalDelay));
0:     }
0:     
0:    
commit:5a429d9
/////////////////////////////////////////////////////////////////////////
0:     
0:     public boolean isShutdownInfo(){
0:         return false;
0:     }
commit:4098942
/////////////////////////////////////////////////////////////////////////
0:     public boolean isMessageDispatchNotification(){
0:         return false;
0:     }
0: 
author:James Strachan
-------------------------------------------------------------------------------
commit:ca067a6
/////////////////////////////////////////////////////////////////////////
0:     protected transient Map properties;
/////////////////////////////////////////////////////////////////////////
0:     private Map unmarsallProperties(ByteSequence marshalledProperties) throws IOException {
commit:8704338
/////////////////////////////////////////////////////////////////////////
0:     
0:     protected transient HashMap properties;
1:     private transient Endpoint from;
1:     private transient Endpoint to;
/////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////
1:     /**
1:      * The endpoint within the transport where this message came from.
1:      */
1:     public Endpoint getFrom() {
1:         return from;
0:     }
0: 
1:     public void setFrom(Endpoint from) {
1:         this.from = from;
0:     }
0: 
1:     /**
0:      * The endpoint within the transport where this message is going to - null means all endpoints.
1:      */
1:     public Endpoint getTo() {
1:         return to;
0:     }
0: 
1:     public void setTo(Endpoint to) {
1:         this.to = to;
0:     }
0:     
/////////////////////////////////////////////////////////////////////////
1:     public void setCommandId(int value) {
1:     public int getCommandId() {
commit:79d2868
/////////////////////////////////////////////////////////////////////////
0: 
0:     private boolean stackTraceEnabled;
0:     private boolean tcpNoDelayEnabled;
0:     private boolean cacheEnabled;
0:     private boolean compressionEnabled;
/////////////////////////////////////////////////////////////////////////
0:         return cacheEnabled;
0:     public void setCacheEnabled(boolean cacheEnabled) {
0:         this.cacheEnabled = cacheEnabled;
0:     }
0: 
1:     /**
0:      * @openwire:property version=1
1:      */
0:     public boolean isCompressionEnabled() {
0:         return compressionEnabled;
0:     }
0: 
0:     public void setCompressionEnabled(boolean compressionEnabled) {
0:         this.compressionEnabled = compressionEnabled;
0:     }
0: 
1:     /**
0:      * @openwire:property version=1
1:      */
0:     public boolean isStackTraceEnabled() {
0:         return stackTraceEnabled;
0:     }
0: 
0:     public void setStackTraceEnabled(boolean stackTraceEnabled) {
0:         this.stackTraceEnabled = stackTraceEnabled;
0:     }
0: 
1:     /**
0:      * @openwire:property version=1
1:      */
0:     public boolean isTcpNoDelayEnabled() {
0:         return tcpNoDelayEnabled;
0:     }
0: 
0:     public void setTcpNoDelayEnabled(boolean tcpNoDelayEnabled) {
0:         this.tcpNoDelayEnabled = tcpNoDelayEnabled;
commit:6ce83ac
/////////////////////////////////////////////////////////////////////////
1:      * @openwire:property version=1 size=8 testSize=-1
commit:4afa5d6
/////////////////////////////////////////////////////////////////////////
1:  * @openwire:marshaller code="1"
============================================================================