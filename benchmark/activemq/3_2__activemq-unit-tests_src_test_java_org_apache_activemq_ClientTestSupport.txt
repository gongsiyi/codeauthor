1:d29ca2a: /**
1:57b4941:  * Licensed to the Apache Software Foundation (ASF) under one or more
1:57b4941:  * contributor license agreements.  See the NOTICE file distributed with
1:57b4941:  * this work for additional information regarding copyright ownership.
1:57b4941:  * The ASF licenses this file to You under the Apache License, Version 2.0
1:57b4941:  * (the "License"); you may not use this file except in compliance with
1:57b4941:  * the License.  You may obtain a copy of the License at
3:d29ca2a:  *
1:230a86c:  *      http://www.apache.org/licenses/LICENSE-2.0
1:d29ca2a:  *
1:d29ca2a:  * Unless required by applicable law or agreed to in writing, software
1:d29ca2a:  * distributed under the License is distributed on an "AS IS" BASIS,
1:d29ca2a:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:d29ca2a:  * See the License for the specific language governing permissions and
1:d29ca2a:  * limitations under the License.
1:d29ca2a:  */
1:d29ca2a: package org.apache.activemq;
6:d29ca2a: 
1:230a86c: import java.io.File;
1:230a86c: import java.io.IOException;
1:230a86c: import java.net.URI;
1:230a86c: import java.net.URISyntaxException;
1:86cbdfd: import java.util.concurrent.TimeUnit;
1:86cbdfd: import java.util.concurrent.atomic.AtomicBoolean;
1:d29ca2a: 
1:230a86c: import javax.jms.JMSException;
1:230a86c: 
1:230a86c: import junit.framework.TestCase;
1:c7d559f: 
1:d29ca2a: import org.apache.activemq.broker.Broker;
1:d29ca2a: import org.apache.activemq.broker.BrokerFactory;
1:d29ca2a: import org.apache.activemq.broker.BrokerService;
1:d29ca2a: import org.apache.activemq.broker.StubConnection;
1:d29ca2a: import org.apache.activemq.broker.TransportConnector;
1:d29ca2a: import org.apache.activemq.command.ActiveMQDestination;
1:d29ca2a: import org.apache.activemq.command.ConnectionId;
1:d29ca2a: import org.apache.activemq.command.ConnectionInfo;
1:d29ca2a: import org.apache.activemq.command.ConsumerInfo;
1:d29ca2a: import org.apache.activemq.command.Message;
1:d29ca2a: import org.apache.activemq.command.MessageAck;
1:d29ca2a: import org.apache.activemq.command.MessageDispatch;
1:d29ca2a: import org.apache.activemq.command.RemoveInfo;
1:d29ca2a: import org.apache.activemq.command.SessionInfo;
1:d29ca2a: import org.apache.activemq.transport.TransportFactory;
1:d29ca2a: 
1:d29ca2a: public class ClientTestSupport extends TestCase {
1:d29ca2a: 
1:d29ca2a:     protected BrokerService broker;
1:230a86c:     protected long idGenerator;
1:d29ca2a: 
1:230a86c:     private ActiveMQConnectionFactory connFactory;
1:c7d559f:     private final String brokerURL = "vm://localhost?broker.persistent=false";
1:d29ca2a: 
1:c7d559f:     @Override
1:d29ca2a:     public void setUp() throws Exception {
1:d29ca2a:         final AtomicBoolean connected = new AtomicBoolean(false);
1:d29ca2a:         TransportConnector connector;
1:d29ca2a: 
1:d29ca2a:         // Start up a broker with a tcp connector.
1:d29ca2a:         try {
1:d29ca2a:             broker = BrokerFactory.createBroker(new URI(this.brokerURL));
1:c7d559f:             broker.getBrokerName();
1:5d99c99:             connector = new TransportConnector(TransportFactory.bind(new URI(this.brokerURL))) {
1:230a86c:                 // Hook into the connector so we can assert that the server
1:230a86c:                 // accepted a connection.
1:c7d559f:                 @Override
1:d29ca2a:                 protected org.apache.activemq.broker.Connection createConnection(org.apache.activemq.transport.Transport transport) throws IOException {
1:d29ca2a:                     connected.set(true);
1:d29ca2a:                     return super.createConnection(transport);
2:d29ca2a:                 }
1:d29ca2a:             };
1:5d99c99:             broker.addConnector(connector);
1:d29ca2a:             broker.start();
1:d29ca2a: 
1:d29ca2a:         } catch (IOException e) {
1:d29ca2a:             throw new JMSException("Error creating broker " + e);
1:d29ca2a:         } catch (URISyntaxException e) {
1:d29ca2a:             throw new JMSException("Error creating broker " + e);
1:d29ca2a:         }
1:d29ca2a: 
1:d29ca2a:         URI connectURI;
1:d29ca2a:         connectURI = connector.getServer().getConnectURI();
1:d29ca2a: 
1:d29ca2a:         // This should create the connection.
1:d29ca2a:         connFactory = new ActiveMQConnectionFactory(connectURI);
1:d29ca2a:     }
1:d29ca2a: 
1:c7d559f:     @Override
1:d29ca2a:     protected void tearDown() throws Exception {
1:d29ca2a:         super.tearDown();
1:d29ca2a:         if (broker != null) {
1:d29ca2a:             broker.stop();
1:d29ca2a:         }
1:d29ca2a:     }
1:d29ca2a: 
1:d29ca2a:     public ActiveMQConnectionFactory getConnectionFactory() throws JMSException {
1:230a86c:         if (this.connFactory == null) {
1:d29ca2a:             throw new JMSException("ActiveMQConnectionFactory is null ");
1:d29ca2a:         }
1:d29ca2a:         return this.connFactory;
1:d29ca2a:     }
1:d29ca2a: 
1:230a86c:     // Helper Classes
1:230a86c:     protected ConnectionInfo createConnectionInfo() throws Exception {
1:d29ca2a:         ConnectionInfo info = new ConnectionInfo();
1:230a86c:         info.setConnectionId(new ConnectionId("connection:" + (++idGenerator)));
1:230a86c:         info.setClientId(info.getConnectionId().getValue());
1:d29ca2a:         return info;
1:d29ca2a:     }
1:d29ca2a: 
1:7f5213b:     protected SessionInfo createSessionInfo(ConnectionInfo connectionInfo) throws Exception {
1:d29ca2a:         SessionInfo info = new SessionInfo(connectionInfo, ++idGenerator);
1:d29ca2a:         return info;
1:d29ca2a:     }
1:d29ca2a: 
1:7f5213b:     protected ConsumerInfo createConsumerInfo(SessionInfo sessionInfo, ActiveMQDestination destination) throws Exception {
1:d29ca2a:         ConsumerInfo info = new ConsumerInfo(sessionInfo, ++idGenerator);
1:d29ca2a:         info.setBrowser(false);
1:d29ca2a:         info.setDestination(destination);
1:d29ca2a:         info.setPrefetchSize(1000);
1:d29ca2a:         info.setDispatchAsync(false);
1:d29ca2a:         return info;
1:d29ca2a:     }
1:d29ca2a: 
1:d29ca2a:     protected RemoveInfo closeConsumerInfo(ConsumerInfo consumerInfo) {
1:d29ca2a:         return consumerInfo.createRemoveCommand();
1:d29ca2a:     }
1:d29ca2a: 
1:d29ca2a:     protected MessageAck createAck(ConsumerInfo consumerInfo, Message msg, int count, byte ackType) {
1:d29ca2a:         MessageAck ack = new MessageAck();
1:d29ca2a:         ack.setAckType(ackType);
1:d29ca2a:         ack.setConsumerId(consumerInfo.getConsumerId());
1:230a86c:         ack.setDestination(msg.getDestination());
1:230a86c:         ack.setLastMessageId(msg.getMessageId());
1:d29ca2a:         ack.setMessageCount(count);
1:d29ca2a:         return ack;
1:d29ca2a:     }
1:d29ca2a: 
1:fc00993:     protected Message receiveMessage(StubConnection connection, int maxWait) throws InterruptedException {
1:230a86c:         while (true) {
1:fc00993:             Object o = connection.getDispatchQueue().poll(maxWait, TimeUnit.MILLISECONDS);
1:d29ca2a: 
1:fc00993:             if (o == null) {
1:d29ca2a:                 return null;
1:fc00993:             }
1:d29ca2a: 
1:230a86c:             if (o instanceof MessageDispatch) {
1:d29ca2a:                 MessageDispatch dispatch = (MessageDispatch)o;
1:d29ca2a:                 return dispatch.getMessage();
1:d29ca2a:             }
1:d29ca2a:         }
1:d29ca2a:     }
1:d29ca2a: 
1:230a86c:     protected Broker getBroker() throws Exception {
1:230a86c:         return this.broker != null ? this.broker.getBroker() : null;
1:d29ca2a:     }
1:d29ca2a: 
1:d29ca2a:     public static void removeMessageStore() {
1:230a86c:         if (System.getProperty("activemq.store.dir") != null) {
1:d29ca2a:             recursiveDelete(new File(System.getProperty("activemq.store.dir")));
1:d29ca2a:         }
1:230a86c:         if (System.getProperty("derby.system.home") != null) {
1:d29ca2a:             recursiveDelete(new File(System.getProperty("derby.system.home")));
1:d29ca2a:         }
1:d29ca2a:     }
1:d29ca2a: 
1:d29ca2a:     public static void recursiveDelete(File f) {
1:230a86c:         if (f.isDirectory()) {
1:d29ca2a:             File[] files = f.listFiles();
1:d29ca2a:             for (int i = 0; i < files.length; i++) {
1:d29ca2a:                 recursiveDelete(files[i]);
1:d29ca2a:             }
1:d29ca2a:         }
1:d29ca2a:         f.delete();
1:86cbdfd:     }
1:d29ca2a: 
1:d29ca2a: }
============================================================================
author:Hadrian Zbarcea
-------------------------------------------------------------------------------
commit:f9bec8f
author:Timothy A. Bish
-------------------------------------------------------------------------------
commit:c7d559f
/////////////////////////////////////////////////////////////////////////
1: 
/////////////////////////////////////////////////////////////////////////
1:     private final String brokerURL = "vm://localhost?broker.persistent=false";
1:     @Override
/////////////////////////////////////////////////////////////////////////
1:             broker.getBrokerName();
1:                 @Override
/////////////////////////////////////////////////////////////////////////
1:     @Override
commit:ef24cc9
author:Hiram R. Chirino
-------------------------------------------------------------------------------
commit:5d99c99
/////////////////////////////////////////////////////////////////////////
1:             connector = new TransportConnector(TransportFactory.bind(new URI(this.brokerURL))) {
/////////////////////////////////////////////////////////////////////////
1:             broker.addConnector(connector);
commit:fc00993
/////////////////////////////////////////////////////////////////////////
1:     protected Message receiveMessage(StubConnection connection, int maxWait) throws InterruptedException {
1:             Object o = connection.getDispatchQueue().poll(maxWait, TimeUnit.MILLISECONDS);
1:             if (o == null) {
1:             }
commit:230a86c
/////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////
1:  *      http://www.apache.org/licenses/LICENSE-2.0
/////////////////////////////////////////////////////////////////////////
1: import java.io.File;
1: import java.io.IOException;
1: import java.net.URI;
1: import java.net.URISyntaxException;
1: import javax.jms.JMSException;
1: 
1: import junit.framework.TestCase;
/////////////////////////////////////////////////////////////////////////
1:     protected long idGenerator;
1:     private ActiveMQConnectionFactory connFactory;
0:     private String brokerURL = "vm://localhost?broker.persistent=false";
/////////////////////////////////////////////////////////////////////////
0:             connector = new TransportConnector(broker.getBroker(), TransportFactory.bind(brokerId, new URI(this.brokerURL))) {
1:                 // Hook into the connector so we can assert that the server
1:                 // accepted a connection.
/////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////
1:         if (this.connFactory == null) {
1:     // Helper Classes
1:     protected ConnectionInfo createConnectionInfo() throws Exception {
1:         info.setConnectionId(new ConnectionId("connection:" + (++idGenerator)));
1:         info.setClientId(info.getConnectionId().getValue());
/////////////////////////////////////////////////////////////////////////
1:         ack.setDestination(msg.getDestination());
1:         ack.setLastMessageId(msg.getMessageId());
1:         while (true) {
0:             if (o == null)
1:             if (o instanceof MessageDispatch) {
1:     protected Broker getBroker() throws Exception {
1:         return this.broker != null ? this.broker.getBroker() : null;
1:         if (System.getProperty("activemq.store.dir") != null) {
1:         if (System.getProperty("derby.system.home") != null) {
1:         if (f.isDirectory()) {
commit:86cbdfd
/////////////////////////////////////////////////////////////////////////
1: import java.util.concurrent.TimeUnit;
1: import java.util.concurrent.atomic.AtomicBoolean;
/////////////////////////////////////////////////////////////////////////
1: }
commit:57b4941
/////////////////////////////////////////////////////////////////////////
1:  * Licensed to the Apache Software Foundation (ASF) under one or more
1:  * contributor license agreements.  See the NOTICE file distributed with
1:  * this work for additional information regarding copyright ownership.
1:  * The ASF licenses this file to You under the Apache License, Version 2.0
1:  * (the "License"); you may not use this file except in compliance with
1:  * the License.  You may obtain a copy of the License at
commit:7f5213b
/////////////////////////////////////////////////////////////////////////
0:      protected ConnectionInfo createConnectionInfo() throws Exception {
1:     protected SessionInfo createSessionInfo(ConnectionInfo connectionInfo) throws Exception {
1:     protected ConsumerInfo createConsumerInfo(SessionInfo sessionInfo, ActiveMQDestination destination) throws Exception {
commit:c59246d
/////////////////////////////////////////////////////////////////////////
0:         info.setClientId( info.getConnectionId().getValue() );
commit:48b4869
/////////////////////////////////////////////////////////////////////////
0:  * Copyright 2005-2006 The Apache Software Foundation
commit:d29ca2a
/////////////////////////////////////////////////////////////////////////
1: /**
1:  *
0:  * Copyright 2004 The Apache Software Foundation
1:  *
0:  * Licensed under the Apache License, Version 2.0 (the "License");
0:  * you may not use this file except in compliance with the License.
0:  * You may obtain a copy of the License at
1:  *
0:  * http://www.apache.org/licenses/LICENSE-2.0
1:  *
1:  * Unless required by applicable law or agreed to in writing, software
1:  * distributed under the License is distributed on an "AS IS" BASIS,
1:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:  * See the License for the specific language governing permissions and
1:  * limitations under the License.
1:  */
1: package org.apache.activemq;
1: 
0: import edu.emory.mathcs.backport.java.util.concurrent.TimeUnit;
0: import edu.emory.mathcs.backport.java.util.concurrent.atomic.AtomicBoolean;
1: 
0: import org.apache.activemq.ActiveMQConnectionFactory;
1: import org.apache.activemq.broker.Broker;
1: import org.apache.activemq.broker.BrokerFactory;
1: import org.apache.activemq.broker.BrokerService;
1: import org.apache.activemq.broker.StubConnection;
1: import org.apache.activemq.broker.TransportConnector;
1: import org.apache.activemq.command.ActiveMQDestination;
1: import org.apache.activemq.command.ConnectionId;
1: import org.apache.activemq.command.ConnectionInfo;
1: import org.apache.activemq.command.ConsumerInfo;
1: import org.apache.activemq.command.Message;
1: import org.apache.activemq.command.MessageAck;
1: import org.apache.activemq.command.MessageDispatch;
1: import org.apache.activemq.command.RemoveInfo;
1: import org.apache.activemq.command.SessionInfo;
1: import org.apache.activemq.transport.TransportFactory;
1: 
0: import javax.jms.JMSException;
1: 
0: import java.io.File;
0: import java.io.IOException;
0: import java.net.URI;
0: import java.net.URISyntaxException;
1: 
0: import junit.framework.TestCase;
1: 
1: public class ClientTestSupport extends TestCase {
1: 
0:     private ActiveMQConnectionFactory connFactory;
1:     protected BrokerService broker;
0:     private String brokerURL = "vm://localhost?broker.persistent=false";
1: 
0:     protected long idGenerator=0;
1: 
1:     public void setUp() throws Exception {
1:         final AtomicBoolean connected = new AtomicBoolean(false);
1:         TransportConnector connector;
1: 
1:         // Start up a broker with a tcp connector.
1:         try {
1:             broker = BrokerFactory.createBroker(new URI(this.brokerURL));
0:             String brokerId = broker.getBrokerName();
0:             connector = new TransportConnector(broker.getBroker(), TransportFactory.bind(brokerId,new URI(this.brokerURL))) {
0:                 // Hook into the connector so we can assert that the server accepted a connection.
1:                 protected org.apache.activemq.broker.Connection createConnection(org.apache.activemq.transport.Transport transport) throws IOException {
1:                     connected.set(true);
1:                     return super.createConnection(transport);
1:                 }
1:             };
0:             connector.start();
1:             broker.start();
1: 
1:         } catch (IOException e) {
1:             throw new JMSException("Error creating broker " + e);
1:         } catch (URISyntaxException e) {
1:             throw new JMSException("Error creating broker " + e);
1:         }
1: 
1:         URI connectURI;
1:         connectURI = connector.getServer().getConnectURI();
1: 
1:         // This should create the connection.
1:         connFactory = new ActiveMQConnectionFactory(connectURI);
1:     }
1: 
1:     
1:     protected void tearDown() throws Exception {
1:         super.tearDown();
1:         if (broker != null) {
1:             broker.stop();
1:         }
1:     }
1: 
1: 
1:     public ActiveMQConnectionFactory getConnectionFactory() throws JMSException {
0:         if(this.connFactory == null){
1:             throw new JMSException("ActiveMQConnectionFactory is null ");
1:         }
1:         return this.connFactory;
1:     }
1: 
0:     //Helper Classes
0:      protected ConnectionInfo createConnectionInfo() throws Throwable {
1:         ConnectionInfo info = new ConnectionInfo();
0:         info.setConnectionId(new ConnectionId("connection:"+(++idGenerator)));
0:         info.setClientId( info.getConnectionId().getConnectionId() );
1:         return info;
1:     }
1: 
0:     protected SessionInfo createSessionInfo(ConnectionInfo connectionInfo) throws Throwable {
1:         SessionInfo info = new SessionInfo(connectionInfo, ++idGenerator);
1:         return info;
1:     }
1: 
0:     protected ConsumerInfo createConsumerInfo(SessionInfo sessionInfo, ActiveMQDestination destination) throws Throwable {
1:         ConsumerInfo info = new ConsumerInfo(sessionInfo, ++idGenerator);
1:         info.setBrowser(false);
1:         info.setDestination(destination);
1:         info.setPrefetchSize(1000);
1:         info.setDispatchAsync(false);
1:         return info;
1:     }
1: 
1:     protected RemoveInfo closeConsumerInfo(ConsumerInfo consumerInfo) {
1:         return consumerInfo.createRemoveCommand();
1:     }
1: 
1:     protected MessageAck createAck(ConsumerInfo consumerInfo, Message msg, int count, byte ackType) {
1:         MessageAck ack = new MessageAck();
1:         ack.setAckType(ackType);
1:         ack.setConsumerId(consumerInfo.getConsumerId());
0:         ack.setDestination( msg.getDestination() );
0:         ack.setLastMessageId( msg.getMessageId() );
1:         ack.setMessageCount(count);
1:         return ack;
1:     }
1: 
0:     protected Message receiveMessage(StubConnection connection, int MAX_WAIT) throws InterruptedException {
0:         while( true ) {
0:             Object o = connection.getDispatchQueue().poll(MAX_WAIT, TimeUnit.MILLISECONDS);
1: 
0:             if( o == null )
1:                 return null;
1: 
0:             if( o instanceof MessageDispatch ) {
1:                 MessageDispatch dispatch = (MessageDispatch)o;
1:                 return dispatch.getMessage();
1:             }
1:         }
1:     }
1: 
0:     protected Broker getBroker() throws Exception{
0:        return this.broker != null?this.broker.getBroker():null;
1:     }
1: 
1:     public static void removeMessageStore() {
0:         if( System.getProperty("activemq.store.dir")!=null ) {
1:             recursiveDelete(new File(System.getProperty("activemq.store.dir")));
1:         }
0:         if( System.getProperty("derby.system.home")!=null ) {
1:             recursiveDelete(new File(System.getProperty("derby.system.home")));
1:         }
1:     }
1: 
1:     public static void recursiveDelete(File f) {
0:         if( f.isDirectory() ) {
1:             File[] files = f.listFiles();
1:             for (int i = 0; i < files.length; i++) {
1:                 recursiveDelete(files[i]);
1:             }
1:         }
1:         f.delete();
1:     }
1: 
1: }
============================================================================