1:92a698f: /**
1:57b4941:  * Licensed to the Apache Software Foundation (ASF) under one or more
1:57b4941:  * contributor license agreements.  See the NOTICE file distributed with
1:57b4941:  * this work for additional information regarding copyright ownership.
1:57b4941:  * The ASF licenses this file to You under the Apache License, Version 2.0
1:57b4941:  * (the "License"); you may not use this file except in compliance with
1:57b4941:  * the License.  You may obtain a copy of the License at
3:92a698f:  *
1:5f1adbe:  *      http://www.apache.org/licenses/LICENSE-2.0
1:92a698f:  *
1:40a7d3b:  * Unless required by applicable law or agreed to in writing, software
1:92a698f:  * distributed under the License is distributed on an "AS IS" BASIS,
1:92a698f:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:92a698f:  * See the License for the specific language governing permissions and
1:92a698f:  * limitations under the License.
1:92a698f:  */
1:fd4bb60: package org.apache.activemq.ra;
2:40a7d3b: 
2:40a7d3b: /**
1:40a7d3b:  * A helper class used to provide access to the current active
1:540dd5c:  * {@link InboundContext} instance being used to process a message in the
1:540dd5c:  * current thread so that messages can be produced using the same session.
1:b0c2a40:  * 
1:540dd5c:  * 
1:40a7d3b:  */
1:540dd5c: public final class InboundContextSupport {
1:540dd5c: 
1:540dd5c:     private static final ThreadLocal<InboundContext> THREAD_LOCAL = new ThreadLocal<InboundContext>();
1:540dd5c: 
1:540dd5c:     private InboundContextSupport() {
1:540dd5c:     }
1:40a7d3b: 
1:40a7d3b:     /**
1:540dd5c:      * Returns the current {@link InboundContext} used by the current thread
1:540dd5c:      * which is processing a message. This allows us to access the current
1:540dd5c:      * Session to send a message using the same underlying session to avoid
1:540dd5c:      * unnecessary XA or to use regular JMS transactions while using message
1:540dd5c:      * driven POJOs.
1:540dd5c:      * 
1:40a7d3b:      * @return
1:40a7d3b:      */
1:40a7d3b:     public static InboundContext getActiveSessionAndProducer() {
1:540dd5c:         return THREAD_LOCAL.get();
1:40a7d3b:     }
1:40a7d3b: 
1:40a7d3b:     /**
1:40a7d3b:      * Registers the session and producer which should be called before the
1:40a7d3b:      * {@link javax.resource.spi.endpoint.MessageEndpoint#beforeDelivery(java.lang.reflect.Method)}
1:40a7d3b:      * method is called.
1:540dd5c:      * 
1:40a7d3b:      * @param sessionAndProducer
1:40a7d3b:      */
1:40a7d3b:     public static void register(InboundContext sessionAndProducer) {
1:540dd5c:         THREAD_LOCAL.set(sessionAndProducer);
1:40a7d3b:     }
1:40a7d3b: 
1:40a7d3b:     /**
1:40a7d3b:      * Unregisters the session and producer which should be called after the
1:40a7d3b:      * {@link javax.resource.spi.endpoint.MessageEndpoint#afterDelivery()}
1:40a7d3b:      * method is called.
1:540dd5c:      * 
1:40a7d3b:      * @param sessionAndProducer
1:40a7d3b:      */
1:40a7d3b:     public static void unregister(InboundContext sessionAndProducer) {
1:540dd5c:         THREAD_LOCAL.set(null);
1:40a7d3b:     }
1:40a7d3b: }
============================================================================
author:Hadrian Zbarcea
-------------------------------------------------------------------------------
commit:d54d046
author:Hiram R. Chirino
-------------------------------------------------------------------------------
commit:b0c2a40
/////////////////////////////////////////////////////////////////////////
1:  * 
commit:540dd5c
/////////////////////////////////////////////////////////////////////////
1:  * {@link InboundContext} instance being used to process a message in the
1:  * current thread so that messages can be produced using the same session.
1:  * 
1: public final class InboundContextSupport {
1: 
1:     private static final ThreadLocal<InboundContext> THREAD_LOCAL = new ThreadLocal<InboundContext>();
1: 
1:     private InboundContextSupport() {
1:     }
1:      * Returns the current {@link InboundContext} used by the current thread
1:      * which is processing a message. This allows us to access the current
1:      * Session to send a message using the same underlying session to avoid
1:      * unnecessary XA or to use regular JMS transactions while using message
1:      * driven POJOs.
1:      * 
1:         return THREAD_LOCAL.get();
1:      * 
1:         THREAD_LOCAL.set(sessionAndProducer);
1:      * 
1:         THREAD_LOCAL.set(null);
commit:5f1adbe
/////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////
1:  *      http://www.apache.org/licenses/LICENSE-2.0
commit:ecf89a6
/////////////////////////////////////////////////////////////////////////
0:     private static final ThreadLocal<InboundContext> threadLocal = new ThreadLocal<InboundContext>();
/////////////////////////////////////////////////////////////////////////
0:         return threadLocal.get();
commit:57b4941
/////////////////////////////////////////////////////////////////////////
1:  * Licensed to the Apache Software Foundation (ASF) under one or more
1:  * contributor license agreements.  See the NOTICE file distributed with
1:  * this work for additional information regarding copyright ownership.
1:  * The ASF licenses this file to You under the Apache License, Version 2.0
1:  * (the "License"); you may not use this file except in compliance with
1:  * the License.  You may obtain a copy of the License at
commit:48b4869
/////////////////////////////////////////////////////////////////////////
0:  * Copyright 2005-2006 The Apache Software Foundation
commit:fd4bb60
/////////////////////////////////////////////////////////////////////////
1: package org.apache.activemq.ra;
author:Jonas B. Lim
-------------------------------------------------------------------------------
commit:92a698f
/////////////////////////////////////////////////////////////////////////
1: /**
1:  *
0:  * Copyright 2004 The Apache Software Foundation
1:  *
0:  * Licensed under the Apache License, Version 2.0 (the "License");
0:  * you may not use this file except in compliance with the License.
0:  * You may obtain a copy of the License at
1:  *
1:  *
1:  * distributed under the License is distributed on an "AS IS" BASIS,
1:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:  * See the License for the specific language governing permissions and
1:  * limitations under the License.
1:  */
author:James Strachan
-------------------------------------------------------------------------------
commit:40a7d3b
/////////////////////////////////////////////////////////////////////////
1: /** 
0:  * 
0:  * Copyright 2004 Protique Ltd
0:  * Copyright 2005 LogicBlaze Inc.
0:  * 
0:  * Licensed under the Apache License, Version 2.0 (the "License"); 
0:  * you may not use this file except in compliance with the License. 
0:  * You may obtain a copy of the License at 
0:  * 
0:  * http://www.apache.org/licenses/LICENSE-2.0
0:  * 
1:  * Unless required by applicable law or agreed to in writing, software
0:  * distributed under the License is distributed on an "AS IS" BASIS, 
0:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. 
0:  * See the License for the specific language governing permissions and 
0:  * limitations under the License. 
0:  * 
0:  **/
0: package org.activemq.ra;
1: 
1: /**
1:  * A helper class used to provide access to the current active
0:  * {@link InboundContext} instance being used to process a message
0:  * in the current thread so that messages can be produced using the same
0:  * session.
0:  *
0:  * @version $Revision$
1:  */
0: public class InboundContextSupport {
0:     private static final ThreadLocal threadLocal = new ThreadLocal();
1: 
1:     /**
0:      * Returns the current {@link InboundContext} used by the current thread which is processing a message.
0:      * This allows us to access the current Session to send a message using the same underlying
0:      * session to avoid unnecessary XA or to use regular JMS transactions while using message driven POJOs.
0:      *
1:      * @return
1:      */
1:     public static InboundContext getActiveSessionAndProducer() {
0:         return (InboundContext) threadLocal.get();
1:     }
1: 
1: 
1:     /**
1:      * Registers the session and producer which should be called before the
1:      * {@link javax.resource.spi.endpoint.MessageEndpoint#beforeDelivery(java.lang.reflect.Method)}
1:      * method is called.
0:      *
1:      * @param sessionAndProducer
1:      */
1:     public static void register(InboundContext sessionAndProducer) {
0:         threadLocal.set(sessionAndProducer);
1:     }
1: 
1:     /**
1:      * Unregisters the session and producer which should be called after the
1:      * {@link javax.resource.spi.endpoint.MessageEndpoint#afterDelivery()}
1:      * method is called.
0:      *
1:      * @param sessionAndProducer
1:      */
1:     public static void unregister(InboundContext sessionAndProducer) {
0:         threadLocal.set(null);
1:     }
1: }
============================================================================