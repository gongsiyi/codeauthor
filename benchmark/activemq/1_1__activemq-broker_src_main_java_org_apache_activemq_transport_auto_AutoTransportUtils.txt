1:04ee70a: /**
1:04ee70a:  * Licensed to the Apache Software Foundation (ASF) under one or more
1:04ee70a:  * contributor license agreements.  See the NOTICE file distributed with
1:04ee70a:  * this work for additional information regarding copyright ownership.
1:04ee70a:  * The ASF licenses this file to You under the Apache License, Version 2.0
1:04ee70a:  * (the "License"); you may not use this file except in compliance with
1:04ee70a:  * the License.  You may obtain a copy of the License at
1:04ee70a:  *
1:04ee70a:  *      http://www.apache.org/licenses/LICENSE-2.0
1:04ee70a:  *
1:04ee70a:  * Unless required by applicable law or agreed to in writing, software
1:04ee70a:  * distributed under the License is distributed on an "AS IS" BASIS,
1:04ee70a:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:04ee70a:  * See the License for the specific language governing permissions and
1:04ee70a:  * limitations under the License.
1:04ee70a:  */
1:e14aca8: package org.apache.activemq.transport.auto;
1:04ee70a: 
1:04ee70a: import java.util.Arrays;
1:04ee70a: import java.util.HashMap;
1:04ee70a: import java.util.HashSet;
1:04ee70a: import java.util.Map;
1:04ee70a: import java.util.Set;
1:04ee70a: 
1:04ee70a: import org.apache.activemq.util.IntrospectionSupport;
1:04ee70a: 
1:04ee70a: /**
1:04ee70a:  *
1:04ee70a:  *
1:04ee70a:  */
1:04ee70a: public class AutoTransportUtils {
1:04ee70a: 
1:04ee70a:     //wireformats
1:04ee70a:     public static String ALL = "all";
1:04ee70a:     public static String OPENWIRE = "default";
1:04ee70a:     public static String STOMP = "stomp";
1:04ee70a:     public static String AMQP = "amqp";
1:04ee70a:     public static String MQTT = "mqtt";
1:04ee70a: 
1:04ee70a:     //transports
1:04ee70a:     public static String AUTO = "auto";
1:04ee70a: 
1:04ee70a:     public static Map<String, Map<String, Object>> extractWireFormatOptions(Map<String, String> options ) {
1:04ee70a:         Map<String, Map<String, Object>> wireFormatOptions = new HashMap<>();
1:04ee70a:         if (options != null) {
1:04ee70a:             wireFormatOptions.put(OPENWIRE, IntrospectionSupport.extractProperties(options, "wireFormat.default."));
1:04ee70a:             wireFormatOptions.put(STOMP, IntrospectionSupport.extractProperties(options, "wireFormat.stomp."));
1:04ee70a:             wireFormatOptions.put(AMQP, IntrospectionSupport.extractProperties(options, "wireFormat.amqp."));
1:04ee70a:             wireFormatOptions.put(MQTT, IntrospectionSupport.extractProperties(options, "wireFormat.mqtt."));
1:04ee70a:             wireFormatOptions.put(ALL, IntrospectionSupport.extractProperties(options, "wireFormat."));
1:04ee70a:         }
1:04ee70a:         return wireFormatOptions;
1:04ee70a:     }
1:04ee70a: 
1:04ee70a:     public static Set<String> parseProtocols(String protocolString) {
1:04ee70a:         Set<String> protocolSet = new HashSet<>();;
1:04ee70a:         if (protocolString != null && !protocolString.isEmpty()) {
1:04ee70a:             protocolSet.addAll(Arrays.asList(protocolString.split(",")));
1:04ee70a:         }
1:04ee70a:         return protocolSet;
1:04ee70a:     }
1:04ee70a: }
============================================================================
author:Christopher L. Shannon (cshannon)
-------------------------------------------------------------------------------
commit:e14aca8
/////////////////////////////////////////////////////////////////////////
1: package org.apache.activemq.transport.auto;
commit:04ee70a
/////////////////////////////////////////////////////////////////////////
1: /**
1:  * Licensed to the Apache Software Foundation (ASF) under one or more
1:  * contributor license agreements.  See the NOTICE file distributed with
1:  * this work for additional information regarding copyright ownership.
1:  * The ASF licenses this file to You under the Apache License, Version 2.0
1:  * (the "License"); you may not use this file except in compliance with
1:  * the License.  You may obtain a copy of the License at
1:  *
1:  *      http://www.apache.org/licenses/LICENSE-2.0
1:  *
1:  * Unless required by applicable law or agreed to in writing, software
1:  * distributed under the License is distributed on an "AS IS" BASIS,
1:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:  * See the License for the specific language governing permissions and
1:  * limitations under the License.
1:  */
0: package org.apache.activemq.broker.transport.auto;
1: 
1: import java.util.Arrays;
1: import java.util.HashMap;
1: import java.util.HashSet;
1: import java.util.Map;
1: import java.util.Set;
1: 
1: import org.apache.activemq.util.IntrospectionSupport;
1: 
1: /**
1:  *
1:  *
1:  */
1: public class AutoTransportUtils {
1: 
1:     //wireformats
1:     public static String ALL = "all";
1:     public static String OPENWIRE = "default";
1:     public static String STOMP = "stomp";
1:     public static String AMQP = "amqp";
1:     public static String MQTT = "mqtt";
1: 
1:     //transports
1:     public static String AUTO = "auto";
1: 
1:     public static Map<String, Map<String, Object>> extractWireFormatOptions(Map<String, String> options ) {
1:         Map<String, Map<String, Object>> wireFormatOptions = new HashMap<>();
1:         if (options != null) {
1:             wireFormatOptions.put(OPENWIRE, IntrospectionSupport.extractProperties(options, "wireFormat.default."));
1:             wireFormatOptions.put(STOMP, IntrospectionSupport.extractProperties(options, "wireFormat.stomp."));
1:             wireFormatOptions.put(AMQP, IntrospectionSupport.extractProperties(options, "wireFormat.amqp."));
1:             wireFormatOptions.put(MQTT, IntrospectionSupport.extractProperties(options, "wireFormat.mqtt."));
1:             wireFormatOptions.put(ALL, IntrospectionSupport.extractProperties(options, "wireFormat."));
1:         }
1:         return wireFormatOptions;
1:     }
1: 
1:     public static Set<String> parseProtocols(String protocolString) {
1:         Set<String> protocolSet = new HashSet<>();;
1:         if (protocolString != null && !protocolString.isEmpty()) {
1:             protocolSet.addAll(Arrays.asList(protocolString.split(",")));
1:         }
1:         return protocolSet;
1:     }
1: }
============================================================================