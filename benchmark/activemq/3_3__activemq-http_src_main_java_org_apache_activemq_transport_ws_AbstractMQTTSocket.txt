1:27edaff: /**
1:27edaff:  * Licensed to the Apache Software Foundation (ASF) under one or more
1:27edaff:  * contributor license agreements.  See the NOTICE file distributed with
1:27edaff:  * this work for additional information regarding copyright ownership.
1:27edaff:  * The ASF licenses this file to You under the Apache License, Version 2.0
1:27edaff:  * (the "License"); you may not use this file except in compliance with
1:27edaff:  * the License.  You may obtain a copy of the License at
1:27edaff:  *
1:27edaff:  *      http://www.apache.org/licenses/LICENSE-2.0
1:27edaff:  *
1:27edaff:  * Unless required by applicable law or agreed to in writing, software
1:27edaff:  * distributed under the License is distributed on an "AS IS" BASIS,
1:27edaff:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:27edaff:  * See the License for the specific language governing permissions and
1:27edaff:  * limitations under the License.
1:27edaff:  */
1:be10b86: package org.apache.activemq.transport.ws;
1:be10b86: 
1:27edaff: import java.io.IOException;
1:be10b86: import java.security.cert.X509Certificate;
1:34eb1ee: import java.util.Map;
1:be10b86: import java.util.concurrent.CountDownLatch;
1:96494f7: import java.util.concurrent.locks.ReentrantLock;
1:be10b86: 
1:be10b86: import org.apache.activemq.broker.BrokerService;
1:be10b86: import org.apache.activemq.broker.BrokerServiceAware;
1:27edaff: import org.apache.activemq.command.Command;
1:34eb1ee: import org.apache.activemq.jms.pool.IntrospectionSupport;
1:be10b86: import org.apache.activemq.transport.TransportSupport;
1:be10b86: import org.apache.activemq.transport.mqtt.MQTTInactivityMonitor;
1:be10b86: import org.apache.activemq.transport.mqtt.MQTTProtocolConverter;
1:be10b86: import org.apache.activemq.transport.mqtt.MQTTTransport;
1:be10b86: import org.apache.activemq.transport.mqtt.MQTTWireFormat;
1:27edaff: import org.apache.activemq.util.IOExceptionSupport;
1:be10b86: import org.apache.activemq.util.ServiceStopper;
1:27edaff: import org.fusesource.mqtt.codec.MQTTFrame;
1:be10b86: 
1:be10b86: public abstract class AbstractMQTTSocket extends TransportSupport implements MQTTTransport, BrokerServiceAware {
1:be10b86: 
1:96494f7:     protected ReentrantLock protocolLock = new ReentrantLock();
1:10ae0d9:     protected volatile MQTTProtocolConverter protocolConverter = null;
1:be10b86:     protected MQTTWireFormat wireFormat = new MQTTWireFormat();
1:27edaff:     protected final MQTTInactivityMonitor mqttInactivityMonitor = new MQTTInactivityMonitor(this, wireFormat);
1:be10b86:     protected final CountDownLatch socketTransportStarted = new CountDownLatch(1);
1:27edaff:     protected BrokerService brokerService;
1:27edaff:     protected volatile int receiveCounter;
1:be10b86:     protected final String remoteAddress;
1:f8bfff0:     protected X509Certificate[] peerCertificates;
1:34eb1ee:     private Map<String, Object> transportOptions;
1:be10b86: 
1:be10b86:     public AbstractMQTTSocket(String remoteAddress) {
1:be10b86:         super();
1:be10b86:         this.remoteAddress = remoteAddress;
1:be10b86:     }
1:be10b86: 
1:be10b86:     @Override
1:27edaff:     public void oneway(Object command) throws IOException {
1:96494f7:         protocolLock.lock();
1:27edaff:         try {
1:27edaff:             getProtocolConverter().onActiveMQCommand((Command)command);
1:27edaff:         } catch (Exception e) {
1:27edaff:             onException(IOExceptionSupport.create(e));
1:96494f7:         } finally {
1:96494f7:             protocolLock.unlock();
1:be10b86:         }
1:be10b86:     }
1:be10b86: 
1:f8bfff0:     @Override
1:27edaff:     public void sendToActiveMQ(Command command) {
1:96494f7:         protocolLock.lock();
1:96494f7:         try {
1:96494f7:             doConsume(command);
1:96494f7:         } finally {
1:96494f7:             protocolLock.unlock();
1:96494f7:         }
1:be10b86:     }
1:27edaff: 
1:27edaff:     @Override
1:be10b86:     protected void doStop(ServiceStopper stopper) throws Exception {
1:27edaff:         mqttInactivityMonitor.stop();
1:27edaff:         handleStopped();
1:be10b86:     }
1:27edaff: 
1:be10b86:     @Override
1:be10b86:     protected void doStart() throws Exception {
1:be10b86:         socketTransportStarted.countDown();
1:27edaff:         mqttInactivityMonitor.setTransportListener(getTransportListener());
1:27edaff:         mqttInactivityMonitor.startConnectChecker(wireFormat.getConnectAttemptTimeout());
1:be10b86:     }
1:be10b86: 
1:27edaff:     //----- Abstract methods for subclasses to implement ---------------------//
1:be10b86: 
1:be10b86:     @Override
1:27edaff:     public abstract void sendToMQTT(MQTTFrame command) throws IOException;
1:be10b86: 
1:27edaff:     /**
1:27edaff:      * Called when the transport is stopping to allow the dervied classes
1:27edaff:      * a chance to close WebSocket resources.
1:27edaff:      *
1:27edaff:      * @throws IOException if an error occurs during the stop.
1:27edaff:      */
1:27edaff:     public abstract void handleStopped() throws IOException;
1:be10b86: 
1:27edaff:     //----- Accessor methods -------------------------------------------------//
1:be10b86: 
1:be10b86:     @Override
1:be10b86:     public MQTTInactivityMonitor getInactivityMonitor() {
1:27edaff:         return mqttInactivityMonitor;
1:be10b86:     }
1:be10b86: 
1:be10b86:     @Override
1:be10b86:     public MQTTWireFormat getWireFormat() {
1:be10b86:         return wireFormat;
1:be10b86:     }
1:be10b86: 
1:be10b86:     @Override
1:be10b86:     public String getRemoteAddress() {
1:be10b86:         return remoteAddress;
1:be10b86:     }
1:27edaff: 
1:27edaff:     @Override
1:be10b86:     public int getReceiveCounter() {
1:27edaff:         return receiveCounter;
1:f8bfff0:     }
3:27edaff: 
1:27edaff:     @Override
1:be10b86:     public X509Certificate[] getPeerCertificates() {
1:f8bfff0:         return peerCertificates;
1:be10b86:     }
1:f8bfff0: 
1:be10b86:     @Override
1:f8bfff0:     public void setPeerCertificates(X509Certificate[] certificates) {
1:f8bfff0:         this.peerCertificates = certificates;
1:be10b86:     }
1:27edaff: 
1:27edaff:     @Override
1:be10b86:     public void setBrokerService(BrokerService brokerService) {
1:be10b86:         this.brokerService = brokerService;
1:27edaff:     }
1:27edaff: 
1:27edaff:     //----- Internal support methods -----------------------------------------//
1:27edaff: 
1:be10b86:     protected MQTTProtocolConverter getProtocolConverter() {
1:27edaff:         if (protocolConverter == null) {
1:10ae0d9:             synchronized(this) {
1:10ae0d9:                 if (protocolConverter == null) {
1:be10b86:                     protocolConverter = new MQTTProtocolConverter(this, brokerService);
1:34eb1ee:                     IntrospectionSupport.setProperties(protocolConverter, transportOptions);
1:10ae0d9:                 }
1:10ae0d9:             }
4:27edaff:         }
1:be10b86:         return protocolConverter;
1:27edaff:     }
1:34eb1ee: 
1:be10b86:     protected boolean transportStartedAtLeastOnce() {
1:be10b86:         return socketTransportStarted.getCount() == 0;
1:be10b86:     }
1:be10b86: 
1:34eb1ee:     public void setTransportOptions(Map<String, Object> transportOptions) {
1:34eb1ee:         this.transportOptions = transportOptions;
1:be10b86:     }
1:34eb1ee: }
============================================================================
author:Christopher L. Shannon (cshannon)
-------------------------------------------------------------------------------
commit:96494f7
/////////////////////////////////////////////////////////////////////////
1: import java.util.concurrent.locks.ReentrantLock;
/////////////////////////////////////////////////////////////////////////
1:     protected ReentrantLock protocolLock = new ReentrantLock();
/////////////////////////////////////////////////////////////////////////
1:         protocolLock.lock();
1:         } finally {
1:             protocolLock.unlock();
1:         protocolLock.lock();
1:         try {
1:             doConsume(command);
1:         } finally {
1:             protocolLock.unlock();
1:         }
commit:be10b86
/////////////////////////////////////////////////////////////////////////
1: package org.apache.activemq.transport.ws;
1: 
1: import java.security.cert.X509Certificate;
1: import java.util.concurrent.CountDownLatch;
1: 
1: import org.apache.activemq.broker.BrokerService;
1: import org.apache.activemq.broker.BrokerServiceAware;
1: import org.apache.activemq.transport.TransportSupport;
1: import org.apache.activemq.transport.mqtt.MQTTInactivityMonitor;
1: import org.apache.activemq.transport.mqtt.MQTTProtocolConverter;
1: import org.apache.activemq.transport.mqtt.MQTTTransport;
1: import org.apache.activemq.transport.mqtt.MQTTWireFormat;
1: import org.apache.activemq.util.ServiceStopper;
1: 
1: public abstract class AbstractMQTTSocket extends TransportSupport implements MQTTTransport, BrokerServiceAware {
1: 
1:     protected MQTTWireFormat wireFormat = new MQTTWireFormat();
1:     protected final CountDownLatch socketTransportStarted = new CountDownLatch(1);
0:     protected MQTTProtocolConverter protocolConverter = null;
0:     private BrokerService brokerService;
1:     protected final String remoteAddress;
1: 
1:     public AbstractMQTTSocket(String remoteAddress) {
1:         super();
1:         this.remoteAddress = remoteAddress;
1:     }
1: 
1:     protected boolean transportStartedAtLeastOnce() {
1:         return socketTransportStarted.getCount() == 0;
1:     }
1: 
1:     protected void doStart() throws Exception {
1:         socketTransportStarted.countDown();
1:     }
1: 
1:     @Override
1:     protected void doStop(ServiceStopper stopper) throws Exception {
1:     }
1: 
1:     protected MQTTProtocolConverter getProtocolConverter() {
0:         if( protocolConverter == null ) {
1:             protocolConverter = new MQTTProtocolConverter(this, brokerService);
1:         }
1:         return protocolConverter;
1:     }
1: 
1:     @Override
1:     public int getReceiveCounter() {
0:         return 0;
1:     }
1: 
1:     @Override
1:     public X509Certificate[] getPeerCertificates() {
0:         return new X509Certificate[0];
1:     }
1: 
1:     @Override
1:     public MQTTInactivityMonitor getInactivityMonitor() {
0:         return null;
1:     }
1: 
1:     @Override
1:     public MQTTWireFormat getWireFormat() {
1:         return wireFormat;
1:     }
1: 
1:     @Override
1:     public String getRemoteAddress() {
1:         return remoteAddress;
1:     }
1: 
1:     @Override
1:     public void setBrokerService(BrokerService brokerService) {
1:         this.brokerService = brokerService;
1:     }
1: }
author:Dejan Bosanac
-------------------------------------------------------------------------------
commit:34eb1ee
/////////////////////////////////////////////////////////////////////////
1: import java.util.Map;
1: import org.apache.activemq.jms.pool.IntrospectionSupport;
/////////////////////////////////////////////////////////////////////////
1:     private Map<String, Object> transportOptions;
/////////////////////////////////////////////////////////////////////////
1:                     IntrospectionSupport.setProperties(protocolConverter, transportOptions);
1: 
1:     public void setTransportOptions(Map<String, Object> transportOptions) {
1:         this.transportOptions = transportOptions;
1:     }
commit:f8bfff0
/////////////////////////////////////////////////////////////////////////
1:     protected X509Certificate[] peerCertificates;
/////////////////////////////////////////////////////////////////////////
1:         return peerCertificates;
1:     }
1: 
1:     @Override
1:     public void setPeerCertificates(X509Certificate[] certificates) {
1:         this.peerCertificates = certificates;
author:Timothy Bish
-------------------------------------------------------------------------------
commit:10ae0d9
/////////////////////////////////////////////////////////////////////////
1:     protected volatile MQTTProtocolConverter protocolConverter = null;
/////////////////////////////////////////////////////////////////////////
1:             synchronized(this) {
1:                 if (protocolConverter == null) {
0:                     protocolConverter = new MQTTProtocolConverter(this, brokerService);
1:                 }
1:             }
commit:27edaff
/////////////////////////////////////////////////////////////////////////
1: /**
1:  * Licensed to the Apache Software Foundation (ASF) under one or more
1:  * contributor license agreements.  See the NOTICE file distributed with
1:  * this work for additional information regarding copyright ownership.
1:  * The ASF licenses this file to You under the Apache License, Version 2.0
1:  * (the "License"); you may not use this file except in compliance with
1:  * the License.  You may obtain a copy of the License at
1:  *
1:  *      http://www.apache.org/licenses/LICENSE-2.0
1:  *
1:  * Unless required by applicable law or agreed to in writing, software
1:  * distributed under the License is distributed on an "AS IS" BASIS,
1:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:  * See the License for the specific language governing permissions and
1:  * limitations under the License.
1:  */
1: import java.io.IOException;
1: import org.apache.activemq.command.Command;
1: import org.apache.activemq.util.IOExceptionSupport;
1: import org.fusesource.mqtt.codec.MQTTFrame;
0:     protected MQTTWireFormat wireFormat = new MQTTWireFormat();
1:     protected final MQTTInactivityMonitor mqttInactivityMonitor = new MQTTInactivityMonitor(this, wireFormat);
0:     protected final CountDownLatch socketTransportStarted = new CountDownLatch(1);
1:     protected BrokerService brokerService;
1:     protected volatile int receiveCounter;
/////////////////////////////////////////////////////////////////////////
1:     @Override
1:     public void oneway(Object command) throws IOException {
1:         try {
1:             getProtocolConverter().onActiveMQCommand((Command)command);
1:         } catch (Exception e) {
1:             onException(IOExceptionSupport.create(e));
1:         }
1:     @Override
1:     public void sendToActiveMQ(Command command) {
0:         doConsume(command);
1:         mqttInactivityMonitor.stop();
1:         handleStopped();
0:     protected void doStart() throws Exception {
0:         socketTransportStarted.countDown();
1:         mqttInactivityMonitor.setTransportListener(getTransportListener());
1:         mqttInactivityMonitor.startConnectChecker(wireFormat.getConnectAttemptTimeout());
1:     //----- Abstract methods for subclasses to implement ---------------------//
1: 
1:     public abstract void sendToMQTT(MQTTFrame command) throws IOException;
1: 
1:     /**
1:      * Called when the transport is stopping to allow the dervied classes
1:      * a chance to close WebSocket resources.
1:      *
1:      * @throws IOException if an error occurs during the stop.
1:      */
1:     public abstract void handleStopped() throws IOException;
1: 
1:     //----- Accessor methods -------------------------------------------------//
1:         return mqttInactivityMonitor;
/////////////////////////////////////////////////////////////////////////
0:     public int getReceiveCounter() {
1:         return receiveCounter;
1:     }
1: 
1:     @Override
0:     public X509Certificate[] getPeerCertificates() {
0:         return new X509Certificate[0];
1:     }
1: 
1:     @Override
1: 
1:     //----- Internal support methods -----------------------------------------//
1: 
0:     protected MQTTProtocolConverter getProtocolConverter() {
1:         if (protocolConverter == null) {
0:             protocolConverter = new MQTTProtocolConverter(this, brokerService);
1:         }
1: 
0:         return protocolConverter;
1:     }
1: 
0:     protected boolean transportStartedAtLeastOnce() {
0:         return socketTransportStarted.getCount() == 0;
1:     }
============================================================================