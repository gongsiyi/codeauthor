1:88acb0e: /**
1:88acb0e:  * Licensed to the Apache Software Foundation (ASF) under one or more
1:88acb0e:  * contributor license agreements.  See the NOTICE file distributed with
1:88acb0e:  * this work for additional information regarding copyright ownership.
1:88acb0e:  * The ASF licenses this file to You under the Apache License, Version 2.0
1:88acb0e:  * (the "License"); you may not use this file except in compliance with
1:88acb0e:  * the License.  You may obtain a copy of the License at
2:88acb0e:  *
1:230a86c:  *      http://www.apache.org/licenses/LICENSE-2.0
1:88acb0e:  *
1:88acb0e:  * Unless required by applicable law or agreed to in writing, software
1:88acb0e:  * distributed under the License is distributed on an "AS IS" BASIS,
1:88acb0e:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:88acb0e:  * See the License for the specific language governing permissions and
1:88acb0e:  * limitations under the License.
1:88acb0e:  */
1:88acb0e: package org.apache.activemq.util;
8:88acb0e: 
1:88acb0e: import java.io.IOException;
1:88acb0e: import java.io.InputStream;
1:88acb0e: 
1:88acb0e: /**
1:f812e34:  * Very similar to the java.io.ByteArrayInputStream but this version is not
1:f812e34:  * thread safe.
1:88acb0e:  */
1:88acb0e: public class ByteArrayInputStream extends InputStream {
1:88acb0e: 
1:88acb0e:     byte buffer[];
1:88acb0e:     int limit;
1:88acb0e:     int pos;
1:88acb0e:     int mark;
1:88acb0e: 
1:88acb0e:     public ByteArrayInputStream(byte data[]) {
1:88acb0e:         this(data, 0, data.length);
1:88acb0e:     }
1:f812e34: 
1:88acb0e:     public ByteArrayInputStream(ByteSequence sequence) {
1:88acb0e:         this(sequence.getData(), sequence.getOffset(), sequence.getLength());
1:88acb0e:     }
1:88acb0e: 
1:88acb0e:     public ByteArrayInputStream(byte data[], int offset, int size) {
1:88acb0e:         this.buffer = data;
1:ecf89a6:         this.mark = offset;
1:ecf89a6:         this.pos = offset;
1:f812e34:         this.limit = offset + size;
1:88acb0e:     }
1:f812e34: 
1:88acb0e:     public int read() throws IOException {
1:fc00993:         if (pos < limit) {
1:88acb0e:             return buffer[pos++] & 0xff;
1:fc00993:         } else {
1:88acb0e:             return -1;
1:fc00993:         }
1:88acb0e:     }
1:f812e34: 
1:88acb0e:     public int read(byte[] b) throws IOException {
1:88acb0e:         return read(b, 0, b.length);
1:88acb0e:     }
1:f812e34: 
1:88acb0e:     public int read(byte b[], int off, int len) {
1:88acb0e:         if (pos < limit) {
1:f812e34:             len = Math.min(len, limit - pos);
1:88acb0e:             if (len > 0) {
1:88acb0e:                 System.arraycopy(buffer, pos, b, off, len);
1:88acb0e:                 pos += len;
1:88acb0e:             }
1:88acb0e:             return len;
1:88acb0e:         } else {
1:88acb0e:             return -1;
1:88acb0e:         }
1:88acb0e:     }
1:88acb0e: 
1:88acb0e:     public long skip(long len) throws IOException {
1:88acb0e:         if (pos < limit) {
1:f812e34:             len = Math.min(len, limit - pos);
1:88acb0e:             if (len > 0) {
1:88acb0e:                 pos += len;
1:88acb0e:             }
1:88acb0e:             return len;
1:88acb0e:         } else {
1:88acb0e:             return -1;
1:88acb0e:         }
1:88acb0e:     }
1:88acb0e: 
1:88acb0e:     public int available() {
1:88acb0e:         return limit - pos;
1:88acb0e:     }
1:88acb0e: 
1:88acb0e:     public boolean markSupported() {
1:88acb0e:         return true;
1:88acb0e:     }
1:f812e34: 
1:88acb0e:     public void mark(int markpos) {
1:88acb0e:         mark = pos;
1:88acb0e:     }
1:f812e34: 
1:88acb0e:     public void reset() {
1:88acb0e:         pos = mark;
1:88acb0e:     }
1:88acb0e: }
============================================================================
author:Hiram R. Chirino
-------------------------------------------------------------------------------
commit:9a8f6e4
commit:ecf89a6
/////////////////////////////////////////////////////////////////////////
1:         this.mark = offset;
1:         this.pos = offset;
commit:fc00993
/////////////////////////////////////////////////////////////////////////
1:         if (pos < limit) {
1:         } else {
1:         }
commit:f812e34
/////////////////////////////////////////////////////////////////////////
1:  * Very similar to the java.io.ByteArrayInputStream but this version is not
1:  * thread safe.
/////////////////////////////////////////////////////////////////////////
1: 
0:         this.mark = this.pos = offset;
1:         this.limit = offset + size;
1: 
0:         if (pos < limit)
/////////////////////////////////////////////////////////////////////////
1: 
1:             len = Math.min(len, limit - pos);
/////////////////////////////////////////////////////////////////////////
1:             len = Math.min(len, limit - pos);
/////////////////////////////////////////////////////////////////////////
1: 
/////////////////////////////////////////////////////////////////////////
1: 
1: 
commit:230a86c
/////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////
1:  *      http://www.apache.org/licenses/LICENSE-2.0
commit:88acb0e
/////////////////////////////////////////////////////////////////////////
1: /**
1:  *
1:  * Licensed to the Apache Software Foundation (ASF) under one or more
1:  * contributor license agreements.  See the NOTICE file distributed with
1:  * this work for additional information regarding copyright ownership.
1:  * The ASF licenses this file to You under the Apache License, Version 2.0
1:  * (the "License"); you may not use this file except in compliance with
1:  * the License.  You may obtain a copy of the License at
1:  *
0:  * http://www.apache.org/licenses/LICENSE-2.0
1:  *
1:  * Unless required by applicable law or agreed to in writing, software
1:  * distributed under the License is distributed on an "AS IS" BASIS,
1:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:  * See the License for the specific language governing permissions and
1:  * limitations under the License.
1:  */
1: package org.apache.activemq.util;
1: 
1: import java.io.IOException;
1: import java.io.InputStream;
1: 
1: 
1: /**
0:  * Very similar to the java.io.ByteArrayInputStream but this version 
0:  * is not thread safe.
1:  */
1: public class ByteArrayInputStream extends InputStream {
1: 
1:     byte buffer[];
1:     int limit;
1:     int pos;
1:     int mark;
1: 
1:     public ByteArrayInputStream(byte data[]) {
1:         this(data, 0, data.length);
1:     }
1:     
1:     public ByteArrayInputStream(ByteSequence sequence) {
1:         this(sequence.getData(), sequence.getOffset(), sequence.getLength());
1:     }
1: 
1:     public ByteArrayInputStream(byte data[], int offset, int size) {
1:         this.buffer = data;
0:         this.mark= this.pos = offset;        
0:         this.limit = offset+size;
1:     }
1:     
1:     public int read() throws IOException {
0:         if( pos < limit )
1:             return buffer[pos++] & 0xff;
0:         else
1:             return -1;
1:     }
1: 
1:     public int read(byte[] b) throws IOException {
1:         return read(b, 0, b.length);
1:     }
1:     
1:     public int read(byte b[], int off, int len) {
1:         if (pos < limit) {
0:             len = Math.min(len, limit-pos);
1:             if (len > 0) {
1:                 System.arraycopy(buffer, pos, b, off, len);
1:                 pos += len;
1:             }
1:             return len;
1:         } else {
1:             return -1;
1:         }
1:     }
1: 
1:     public long skip(long len) throws IOException {
1:         if (pos < limit) {
0:             len = Math.min(len, limit-pos);
1:             if (len > 0) {
1:                 pos += len;
1:             }
1:             return len;
1:         } else {
1:             return -1;
1:         }
1:     }
1:     
1:     public int available() {
1:         return limit - pos;
1:     }
1: 
1:     public boolean markSupported() {
1:         return true;
1:     }
1:     
1:     public void mark(int markpos) {
1:         mark = pos;
1:     }
1:     
1:     public void reset() {
1:         pos = mark;
1:     }
1: }
============================================================================