2:d29ca2a: /**
1:57b4941:  * Licensed to the Apache Software Foundation (ASF) under one or more
1:57b4941:  * contributor license agreements.  See the NOTICE file distributed with
1:57b4941:  * this work for additional information regarding copyright ownership.
1:57b4941:  * The ASF licenses this file to You under the Apache License, Version 2.0
1:57b4941:  * (the "License"); you may not use this file except in compliance with
1:57b4941:  * the License.  You may obtain a copy of the License at
5:d29ca2a:  *
1:230a86c:  *      http://www.apache.org/licenses/LICENSE-2.0
1:b0c2a40:  *
1:d29ca2a:  * Unless required by applicable law or agreed to in writing, software
1:d29ca2a:  * distributed under the License is distributed on an "AS IS" BASIS,
1:d29ca2a:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:d29ca2a:  * See the License for the specific language governing permissions and
1:d29ca2a:  * limitations under the License.
2:d29ca2a:  */
1:d29ca2a: package org.apache.activemq.broker.jmx;
1:f5dcc9d: 
1:f5dcc9d: import java.io.IOException;
1:f5dcc9d: 
1:f5dcc9d: import javax.management.ObjectName;
1:63a660a: 
1:d29ca2a: import org.apache.activemq.broker.Broker;
1:d29ca2a: import org.apache.activemq.broker.TransportConnection;
1:d29ca2a: import org.apache.activemq.broker.TransportConnector;
1:d29ca2a: import org.apache.activemq.command.ConnectionInfo;
1:d29ca2a: import org.apache.activemq.command.Response;
1:d29ca2a: import org.apache.activemq.thread.TaskRunnerFactory;
1:d29ca2a: import org.apache.activemq.transport.Transport;
1:d29ca2a: import org.apache.activemq.util.IOExceptionSupport;
1:8bf987b: import org.slf4j.Logger;
1:8bf987b: import org.slf4j.LoggerFactory;
1:74a7a8b: 
1:d29ca2a: /**
1:d29ca2a:  * A managed transport connection
1:d29ca2a:  */
1:d29ca2a: public class ManagedTransportConnection extends TransportConnection {
1:8bf987b:     private static final Logger LOG = LoggerFactory.getLogger(ManagedTransportConnection.class);
1:74a7a8b: 
1:1ec71bd:     private final ManagementContext managementContext;
1:d29ca2a:     private final ObjectName connectorName;
1:63a660a:     private final ConnectionViewMBean mbean;
1:cafe4cb: 
1:cafe4cb:     private ObjectName byClientIdName;
1:f812e34:     private ObjectName byAddressName;
11:d29ca2a: 
1:f5dcc9d:     private final boolean populateUserName;
1:f5dcc9d: 
1:f812e34:     public ManagedTransportConnection(TransportConnector connector, Transport transport, Broker broker,
1:8a01c5d:                                       TaskRunnerFactory factory, TaskRunnerFactory stopFactory,
1:8a01c5d:                                       ManagementContext context, ObjectName connectorName)
1:f812e34:         throws IOException {
1:8a01c5d:         super(connector, transport, broker, factory, stopFactory);
1:1ec71bd:         this.managementContext = context;
1:d29ca2a:         this.connectorName = connectorName;
1:0efaaec:         this.mbean = new ConnectionView(this, managementContext);
1:f5dcc9d:         this.populateUserName = broker.getBrokerService().isPopulateUserNameInMBeans();
1:c051381:         if (managementContext.isAllowRemoteAddressInMBeanNames()) {
1:aaa81de:             byAddressName = createObjectName("remoteAddress", transport.getRemoteAddress());
1:c051381:             registerMBean(byAddressName);
1:c051381:         }
1:cafe4cb:     }
1:cafe4cb: 
1:33cdefa:     @Override
1:33cdefa:     public void stopAsync() {
1:33cdefa:         super.stopAsync();
1:2b5b890:         synchronized (this) {
1:2b5b890:             unregisterMBean(byClientIdName);
1:2b5b890:             unregisterMBean(byAddressName);
1:2b5b890:             byClientIdName = null;
1:2b5b890:             byAddressName = null;
1:2b5b890:         }
1:33cdefa:     }
1:d29ca2a: 
1:63a660a:     @Override
1:7f5213b:     public Response processAddConnection(ConnectionInfo info) throws Exception {
1:d29ca2a:         Response answer = super.processAddConnection(info);
1:d29ca2a:         String clientId = info.getClientId();
1:f5dcc9d:         if (populateUserName) {
1:f5dcc9d:             ((ConnectionView) mbean).setUserName(info.getUserName());
1:f5dcc9d:         }
1:aaa81de:         if (clientId != null) {
1:aaa81de:             if (byClientIdName == null) {
1:aaa81de:                 byClientIdName = createObjectName("clientId", clientId);
1:aaa81de:                 registerMBean(byClientIdName);
1:9968209:             }
1:f812e34:         }
1:d29ca2a:         return answer;
1:cafe4cb:     }
1:d29ca2a: 
1:d29ca2a:     // Implementation methods
1:d29ca2a:     // -------------------------------------------------------------------------
1:cafe4cb:     protected void registerMBean(ObjectName name) {
1:f812e34:         if (name != null) {
1:f812e34:             try {
1:ced6909:                 AnnotatedMBean.registerMBean(managementContext, mbean, name);
1:f812e34:             } catch (Throwable e) {
1:e1bbde7:                 LOG.warn("Failed to register MBean {}", name);
1:e1bbde7:                 LOG.debug("Failure reason: ", e);
1:f812e34:             }
1:f812e34:         }
1:cafe4cb:     }
1:cafe4cb: 
1:cafe4cb:     protected void unregisterMBean(ObjectName name) {
1:d29ca2a:         if (name != null) {
1:f812e34:             try {
1:1ec71bd:                 managementContext.unregisterMBean(name);
1:f812e34:             } catch (Throwable e) {
1:e1bbde7:                 LOG.warn("Failed to unregister MBean {}", name);
1:e1bbde7:                 LOG.debug("Failure reason: ", e);
1:cafe4cb:             }
1:cafe4cb:         }
1:cafe4cb:     }
1:d29ca2a: 
1:aaa81de:     protected ObjectName createObjectName(String type, String value) throws IOException {
1:cafe4cb:         try {
1:7d7d6fa:             return BrokerMBeanSupport.createConnectionViewByType(connectorName, type, value);
2:f812e34:         } catch (Throwable e) {
1:f812e34:             throw IOExceptionSupport.create(e);
1:f812e34:         }
1:f812e34:     }
1:cafe4cb: 
1:cafe4cb: }
============================================================================
author:gtully
-------------------------------------------------------------------------------
commit:2b5b890
/////////////////////////////////////////////////////////////////////////
1:         synchronized (this) {
1:             unregisterMBean(byClientIdName);
1:             unregisterMBean(byAddressName);
1:             byClientIdName = null;
1:             byAddressName = null;
1:         }
author:Timothy Bish
-------------------------------------------------------------------------------
commit:e1bbde7
/////////////////////////////////////////////////////////////////////////
1:                 LOG.warn("Failed to register MBean {}", name);
1:                 LOG.debug("Failure reason: ", e);
/////////////////////////////////////////////////////////////////////////
1:                 LOG.warn("Failed to unregister MBean {}", name);
1:                 LOG.debug("Failure reason: ", e);
author:Gary Tully
-------------------------------------------------------------------------------
commit:7d7d6fa
/////////////////////////////////////////////////////////////////////////
1:             return BrokerMBeanSupport.createConnectionViewByType(connectorName, type, value);
commit:aaa81de
/////////////////////////////////////////////////////////////////////////
1:             byAddressName = createObjectName("remoteAddress", transport.getRemoteAddress());
/////////////////////////////////////////////////////////////////////////
1:         if (clientId != null) {
1:             if (byClientIdName == null) {
1:                 byClientIdName = createObjectName("clientId", clientId);
1:                 registerMBean(byClientIdName);
/////////////////////////////////////////////////////////////////////////
1:     protected ObjectName createObjectName(String type, String value) throws IOException {
0:             return BrokerMBeanSuppurt.createConnectionViewByType(connectorName, type, value);
commit:9968209
/////////////////////////////////////////////////////////////////////////
0:         if (!managementContext.isAllowRemoteAddressInMBeanNames()) {
0:             if (clientId != null) {
0:                 if (byClientIdName == null) {
0:                     byClientIdName = createByClientIdObjectName(clientId);
0:                     registerMBean(byClientIdName);
1:                 }
commit:33cdefa
/////////////////////////////////////////////////////////////////////////
1:     @Override
1:     public void stopAsync() {
0:         if (!isStopping()) {
0:             synchronized (this) {
0:                 unregisterMBean(byClientIdName);
0:                 unregisterMBean(byAddressName);
0:                 byClientIdName = null;
0:                 byAddressName = null;
1:             }
1:         super.stopAsync();
commit:c051381
/////////////////////////////////////////////////////////////////////////
1:         if (managementContext.isAllowRemoteAddressInMBeanNames()) {
0:             byAddressName = createByAddressObjectName("address", transport.getRemoteAddress());
1:             registerMBean(byAddressName);
1:         }
/////////////////////////////////////////////////////////////////////////
commit:4cf6dae
/////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////
author:Timothy A. Bish
-------------------------------------------------------------------------------
commit:63a660a
/////////////////////////////////////////////////////////////////////////
1: 
/////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////
1:     private final ConnectionViewMBean mbean;
/////////////////////////////////////////////////////////////////////////
1:     @Override
/////////////////////////////////////////////////////////////////////////
0:             return BrokerMBeanSuppurt.createConnectionViewByAddressName(connectorName, type, value);
/////////////////////////////////////////////////////////////////////////
0:             return BrokerMBeanSuppurt.createConnectionViewByClientIdName(connectorName, value);
commit:0efaaec
/////////////////////////////////////////////////////////////////////////
1:         this.mbean = new ConnectionView(this, managementContext);
commit:f5dcc9d
/////////////////////////////////////////////////////////////////////////
1: import java.io.IOException;
0: import java.util.Hashtable;
1: 
1: import javax.management.ObjectName;
1: 
/////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////
1:     private final boolean populateUserName;
1: 
/////////////////////////////////////////////////////////////////////////
1:         this.populateUserName = broker.getBrokerService().isPopulateUserNameInMBeans();
/////////////////////////////////////////////////////////////////////////
1:         if (populateUserName) {
1:             ((ConnectionView) mbean).setUserName(info.getUserName());
1:         }
/////////////////////////////////////////////////////////////////////////
0:         Hashtable<String, String> map = connectorName.getKeyPropertyList();
/////////////////////////////////////////////////////////////////////////
0:         Hashtable<String, String> map = connectorName.getKeyPropertyList();
author:Robert Davies
-------------------------------------------------------------------------------
commit:c37859a
/////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////
0:             String objectNameStr = connectorName.toString();
0:             objectNameStr += ",connectionViewType="   + JMXSupport.encodeObjectNamePart(type);
0:             objectNameStr += ",connectionName="+JMXSupport.encodeObjectNamePart(value);
0:             return new ObjectName(objectNameStr);
0:             String objectNameStr = connectorName.toString();
0:             objectNameStr += ",connectionName="+JMXSupport.encodeObjectNamePart(value);
0:             return new ObjectName(objectNameStr);
commit:1ec71bd
/////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////
0: import java.io.IOException;
0: import java.util.Hashtable;
0: import javax.management.ObjectName;
/////////////////////////////////////////////////////////////////////////
1:     private final ManagementContext managementContext;
/////////////////////////////////////////////////////////////////////////
0:                                       TaskRunnerFactory factory, ManagementContext context, ObjectName connectorName)
1:         this.managementContext = context;
/////////////////////////////////////////////////////////////////////////
0:                 managementContext.registerMBean(mbean, name);
/////////////////////////////////////////////////////////////////////////
1:                 managementContext.unregisterMBean(name);
author:Hiram R. Chirino
-------------------------------------------------------------------------------
commit:58aca86
commit:b0c2a40
/////////////////////////////////////////////////////////////////////////
1:  * 
commit:fc00993
/////////////////////////////////////////////////////////////////////////
0:     private static final Log LOG = LogFactory.getLog(ManagedTransportConnection.class);
/////////////////////////////////////////////////////////////////////////
0:                 LOG.warn("Failed to register MBean: " + name);
0:                 LOG.debug("Failure reason: " + e, e);
/////////////////////////////////////////////////////////////////////////
0:                 LOG.warn("Failed to unregister mbean: " + name);
0:                 LOG.debug("Failure reason: " + e, e);
commit:74a7a8b
/////////////////////////////////////////////////////////////////////////
0: import java.io.IOException;
0: import java.util.Hashtable;
1: 
0: import javax.management.MBeanServer;
0: import javax.management.ObjectName;
1: 
/////////////////////////////////////////////////////////////////////////
commit:f812e34
/////////////////////////////////////////////////////////////////////////
1:     private ObjectName byAddressName;
1:     public ManagedTransportConnection(TransportConnector connector, Transport transport, Broker broker,
0:                                       TaskRunnerFactory factory, MBeanServer server, ObjectName connectorName)
1:         throws IOException {
/////////////////////////////////////////////////////////////////////////
0:         synchronized (this) {
0:             unregisterMBean(byClientIdName);
0:             unregisterMBean(byAddressName);
0:             byClientIdName = null;
0:             byAddressName = null;
1:         }
/////////////////////////////////////////////////////////////////////////
0:             if (byClientIdName == null) {
0:                 byClientIdName = createByClientIdObjectName(clientId);
0:                 registerMBean(byClientIdName);
/////////////////////////////////////////////////////////////////////////
1:         if (name != null) {
1:             try {
0:                 server.registerMBean(mbean, name);
1:             } catch (Throwable e) {
0:                 log.warn("Failed to register MBean: " + name);
0:                 log.debug("Failure reason: " + e, e);
1:             }
1:         }
1:             } catch (Throwable e) {
0:                 log.debug("Failure reason: " + e, e);
/////////////////////////////////////////////////////////////////////////
0:             return new ObjectName(connectorName.getDomain() + ":" + "BrokerName="
0:                                   + JMXSupport.encodeObjectNamePart((String)map.get("BrokerName")) + ","
0:                                   + "Type=Connection," + "ConnectorName="
0:                                   + JMXSupport.encodeObjectNamePart((String)map.get("ConnectorName")) + ","
0:                                   + "ViewType=" + JMXSupport.encodeObjectNamePart(type) + "," + "Name="
0:                                   + JMXSupport.encodeObjectNamePart(value));
1:         } catch (Throwable e) {
0:     protected ObjectName createByClientIdObjectName(String value) throws IOException {
0:         // Build the object name for the destination
0:         Hashtable map = connectorName.getKeyPropertyList();
1:         try {
0:             return new ObjectName(connectorName.getDomain() + ":" + "BrokerName="
0:                                   + JMXSupport.encodeObjectNamePart((String)map.get("BrokerName")) + ","
0:                                   + "Type=Connection," + "ConnectorName="
0:                                   + JMXSupport.encodeObjectNamePart((String)map.get("ConnectorName")) + ","
0:                                   + "Connection=" + JMXSupport.encodeObjectNamePart(value));
1:         } catch (Throwable e) {
1:             throw IOExceptionSupport.create(e);
1:         }
1:     }
commit:230a86c
/////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////
1:  *      http://www.apache.org/licenses/LICENSE-2.0
commit:ea74731
/////////////////////////////////////////////////////////////////////////
0:     public void doStop() throws Exception {
/////////////////////////////////////////////////////////////////////////
0:         super.doStop();
commit:cafe4cb
/////////////////////////////////////////////////////////////////////////
1: 
1:     private ObjectName byClientIdName;
0: 	private ObjectName byAddressName;
0:             ObjectName connectorName) throws IOException {
0:         byAddressName = createByAddressObjectName("address", transport.getRemoteAddress());
0:         registerMBean(byAddressName);
/////////////////////////////////////////////////////////////////////////
0:     	synchronized(this) {
0: 	        unregisterMBean(byClientIdName);
0: 	        unregisterMBean(byAddressName);
0: 	        byClientIdName=null;
0: 	        byAddressName=null;
1:     	}
0:             if(byClientIdName==null) {
0:     	        byClientIdName = createByClientIdObjectName(clientId);
0:     	        registerMBean(byClientIdName);
1:             }
1:     protected void registerMBean(ObjectName name) {
0:     	if( name!=null ) {
1: 	        try {
0: 	            server.registerMBean(mbean, name);
0: 	        } catch (Throwable e) {
0: 	            log.warn("Failed to register MBean: "+name);
0: 	            log.debug("Failure reason: "+e,e);
1: 	        }
1:     	}
1:     protected void unregisterMBean(ObjectName name) {
0:                 log.debug("Failure reason: "+e,e);
0:     protected ObjectName createByAddressObjectName(String type, String value) throws IOException {
/////////////////////////////////////////////////////////////////////////
0:             		"ViewType="+JMXSupport.encodeObjectNamePart(type)+","+
0:             		"Name="+JMXSupport.encodeObjectNamePart(value)
1:     
0:     protected ObjectName createByClientIdObjectName(String value) throws IOException {
0:         // Build the object name for the destination
0:         Hashtable map = connectorName.getKeyPropertyList();
0:         try {
0:             return new ObjectName(
0:             		connectorName.getDomain()+":"+
0:             		"BrokerName="+JMXSupport.encodeObjectNamePart((String) map.get("BrokerName"))+","+
0:             		"Type=Connection,"+
0:                     "ConnectorName="+JMXSupport.encodeObjectNamePart((String) map.get("ConnectorName"))+","+
0:                 	"Connection="+JMXSupport.encodeObjectNamePart(value)
0:             		);
1:         }
0:         catch (Throwable e) {
0:             throw IOExceptionSupport.create(e);
1:         }
1:     }
1: 
1: 
commit:57b4941
/////////////////////////////////////////////////////////////////////////
1:  * Licensed to the Apache Software Foundation (ASF) under one or more
1:  * contributor license agreements.  See the NOTICE file distributed with
1:  * this work for additional information regarding copyright ownership.
1:  * The ASF licenses this file to You under the Apache License, Version 2.0
1:  * (the "License"); you may not use this file except in compliance with
1:  * the License.  You may obtain a copy of the License at
commit:d724f9e
/////////////////////////////////////////////////////////////////////////
0:             		"BrokerName="+JMXSupport.encodeObjectNamePart((String) map.get("BrokerName"))+","+
0:                     "ConnectorName="+JMXSupport.encodeObjectNamePart((String) map.get("ConnectorName"))+","+
commit:07d4e8c
/////////////////////////////////////////////////////////////////////////
0:         Hashtable map = connectorName.getKeyPropertyList();
0:             return new ObjectName(
0:             		connectorName.getDomain()+":"+
0:             		"BrokerName="+map.get("BrokerName")+","+
0:             		"Type=Connection,"+
0:             		"Connection="+JMXSupport.encodeObjectNamePart(connectionId)
0:             		);
commit:7f5213b
/////////////////////////////////////////////////////////////////////////
1:     public Response processAddConnection(ConnectionInfo info) throws Exception {
commit:ef94b84
/////////////////////////////////////////////////////////////////////////
commit:48b4869
/////////////////////////////////////////////////////////////////////////
0:  * Copyright 2005-2006 The Apache Software Foundation
commit:d29ca2a
/////////////////////////////////////////////////////////////////////////
1: /**
1:  *
0:  * Copyright 2004 The Apache Software Foundation
1:  *
0:  * Licensed under the Apache License, Version 2.0 (the "License");
0:  * you may not use this file except in compliance with the License.
0:  * You may obtain a copy of the License at
1:  *
0:  * http://www.apache.org/licenses/LICENSE-2.0
1:  *
1:  * Unless required by applicable law or agreed to in writing, software
1:  * distributed under the License is distributed on an "AS IS" BASIS,
1:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:  * See the License for the specific language governing permissions and
1:  * limitations under the License.
1:  */
1: package org.apache.activemq.broker.jmx;
1: 
1: import org.apache.activemq.broker.Broker;
1: import org.apache.activemq.broker.TransportConnection;
1: import org.apache.activemq.broker.TransportConnector;
1: import org.apache.activemq.command.ConnectionInfo;
1: import org.apache.activemq.command.Response;
1: import org.apache.activemq.thread.TaskRunnerFactory;
1: import org.apache.activemq.transport.Transport;
1: import org.apache.activemq.util.IOExceptionSupport;
0: import org.apache.activemq.util.JMXSupport;
0: import org.apache.commons.logging.Log;
0: import org.apache.commons.logging.LogFactory;
1: 
0: import javax.management.MBeanServer;
0: import javax.management.ObjectName;
1: 
0: import java.io.IOException;
0: import java.util.Hashtable;
1: 
1: /**
1:  * A managed transport connection
1:  * 
0:  * @version $Revision: 1.1 $
1:  */
1: public class ManagedTransportConnection extends TransportConnection {
0:     private static final Log log = LogFactory.getLog(ManagedTransportConnection.class);
1: 
0:     private final MBeanServer server;
1:     private final ObjectName connectorName;
0:     private ConnectionViewMBean mbean;
0:     private ObjectName name;
0:     private String connectionId;
1: 
0:     public ManagedTransportConnection(TransportConnector connector, Transport transport, Broker broker, TaskRunnerFactory factory, MBeanServer server,
0:             ObjectName connectorName, String connectionId) throws IOException {
0:         super(connector, transport, broker, factory);
0:         this.server = server;
1:         this.connectorName = connectorName;
0:         this.mbean = new ConnectionView(this);
0:         setConnectionId(connectionId);
0:     }
1: 
0:     public void stop() throws Exception {
0:         unregisterMBean();
0:         super.stop();
0:     }
1: 
0:     public String getConnectionId() {
0:         return connectionId;
0:     }
1: 
1:     /**
0:      * Sets the connection ID of this connection. On startup this connection ID
0:      * is set to an incrementing counter; once the client registers it is set to
0:      * the clientID of the JMS client.
1:      */
0:     public void setConnectionId(String connectionId) throws IOException {
0:         this.connectionId = connectionId;
0:         unregisterMBean();
0:         name = createObjectName();
0:         registerMBean();
0:     }
1: 
0:     public Response processAddConnection(ConnectionInfo info) throws Throwable {
1:         Response answer = super.processAddConnection(info);
1:         String clientId = info.getClientId();
0:         if (clientId != null) {
0:             // lets update the MBean name
0:             setConnectionId(clientId);
0:         }
1:         return answer;
0:     }
1: 
1:     // Implementation methods
1:     // -------------------------------------------------------------------------
0:     protected void registerMBean() throws IOException {
0:         try {
0:             server.registerMBean(mbean, name);
0:         }
0:         catch (Throwable e) {
0:             throw IOExceptionSupport.create(e);
0:         }
1: 
0:     }
1: 
0:     protected void unregisterMBean() {
1:         if (name != null) {
0:             try {
0:                 server.unregisterMBean(name);
0:             }
0:             catch (Throwable e) {
0:                 log.warn("Failed to unregister mbean: " + name);
0:             }
0:         }
0:     }
1: 
0:     protected ObjectName createObjectName() throws IOException {
0:         // Build the object name for the destination
0:         Hashtable map = new Hashtable(connectorName.getKeyPropertyList());
0:         map.put("Type", "Connection");
0:         String jmxConnectionId = JMXSupport.encodeObjectNamePart(connectionId);
0:         map.put("Connection", JMXSupport.encodeObjectNamePart(connectionId));
0:         try {
0:             return new ObjectName(connectorName.getDomain(), map);
0:         }
0:         catch (Throwable e) {
0:             throw IOExceptionSupport.create(e);
0:         }
0:     }
0: }
author:Claus Ibsen
-------------------------------------------------------------------------------
commit:8a01c5d
/////////////////////////////////////////////////////////////////////////
1:                                       TaskRunnerFactory factory, TaskRunnerFactory stopFactory,
1:                                       ManagementContext context, ObjectName connectorName)
1:         super(connector, transport, broker, factory, stopFactory);
author:Bosanac Dejan
-------------------------------------------------------------------------------
commit:8bf987b
/////////////////////////////////////////////////////////////////////////
1: import org.slf4j.Logger;
1: import org.slf4j.LoggerFactory;
/////////////////////////////////////////////////////////////////////////
1:     private static final Logger LOG = LoggerFactory.getLogger(ManagedTransportConnection.class);
commit:ced6909
/////////////////////////////////////////////////////////////////////////
1:                 AnnotatedMBean.registerMBean(managementContext, mbean, name);
author:James Strachan
-------------------------------------------------------------------------------
commit:4b595ea
/////////////////////////////////////////////////////////////////////////
0:     public synchronized void stop() throws Exception {
0:         if (isStarting()) {
0:             setPendingStop(true);
0:             return;
0:         }
============================================================================