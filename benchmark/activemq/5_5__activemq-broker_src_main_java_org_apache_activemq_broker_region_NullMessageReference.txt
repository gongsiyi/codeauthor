1:bfaff9b: /**
1:bfaff9b:  * Licensed to the Apache Software Foundation (ASF) under one or more
1:bfaff9b:  * contributor license agreements.  See the NOTICE file distributed with
1:bfaff9b:  * this work for additional information regarding copyright ownership.
1:bfaff9b:  * The ASF licenses this file to You under the Apache License, Version 2.0
1:bfaff9b:  * (the "License"); you may not use this file except in compliance with
1:bfaff9b:  * the License.  You may obtain a copy of the License at
2:bfaff9b:  *
1:230a86c:  *      http://www.apache.org/licenses/LICENSE-2.0
1:bfaff9b:  *
1:bfaff9b:  * Unless required by applicable law or agreed to in writing, software
1:bfaff9b:  * distributed under the License is distributed on an "AS IS" BASIS,
1:bfaff9b:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:bfaff9b:  * See the License for the specific language governing permissions and
1:bfaff9b:  * limitations under the License.
1:bfaff9b:  */
1:bfaff9b: package org.apache.activemq.broker.region;
3:bfaff9b: 
1:bfaff9b: import org.apache.activemq.command.ActiveMQMessage;
1:bfaff9b: import org.apache.activemq.command.ConsumerId;
1:bfaff9b: import org.apache.activemq.command.Message;
1:bfaff9b: import org.apache.activemq.command.MessageId;
1:bfaff9b: 
1:bfaff9b: /**
1:11579bb:  * Used by the {@link QueueMessageReference#NULL_MESSAGE}
1:bfaff9b:  */
1:11579bb: public final class NullMessageReference implements QueueMessageReference {
1:bfaff9b: 
1:00879cf:     private final ActiveMQMessage message = new ActiveMQMessage();
1:f812e34:     private volatile int references;
1:bfaff9b: 
1:1241e41:     @Override
1:f812e34:     public void drop() {
3:f812e34:         throw new RuntimeException("not implemented");
1:f812e34:     }
1:bfaff9b: 
1:1241e41:     @Override
1:1241e41:     public synchronized boolean dropIfLive() {
1:1241e41:         throw new RuntimeException("not implemented");
1:1241e41:     }
1:1241e41: 
1:1241e41:     @Override
1:f812e34:     public LockOwner getLockOwner() {
1:f812e34:         throw new RuntimeException("not implemented");
1:f812e34:     }
1:bfaff9b: 
1:1241e41:     @Override
1:f812e34:     public boolean isAcked() {
1:f812e34:         return false;
1:f812e34:     }
1:bfaff9b: 
1:6cc2c11:     @Override
1:f812e34:     public boolean isDropped() {
1:d4382e4:         return false;
1:f812e34:     }
1:bfaff9b: 
1:1241e41:     @Override
1:f812e34:     public boolean lock(LockOwner subscription) {
1:f812e34:         return true;
1:f812e34:     }
1:bfaff9b: 
1:1241e41:     @Override
1:f812e34:     public void setAcked(boolean b) {
1:f812e34:         throw new RuntimeException("not implemented");
1:f812e34:     }
1:bfaff9b: 
1:1241e41:     @Override
1:d4382e4:     public boolean unlock() {
1:a7891c3:         return true;
1:f812e34:     }
1:bfaff9b: 
1:1241e41:     @Override
1:f812e34:     public int decrementReferenceCount() {
1:f812e34:         return --references;
1:f812e34:     }
1:bfaff9b: 
1:1241e41:     @Override
1:f812e34:     public long getExpiration() {
1:f812e34:         throw new RuntimeException("not implemented");
1:f812e34:     }
1:bfaff9b: 
1:1241e41:     @Override
1:f812e34:     public String getGroupID() {
1:f812e34:         return null;
1:f812e34:     }
1:bfaff9b: 
1:1241e41:     @Override
1:f812e34:     public int getGroupSequence() {
1:f812e34:         return 0;
1:f812e34:     }
1:bfaff9b: 
1:1241e41:     @Override
1:00879cf:     public Message getMessage()  {
1:f812e34:         return message;
1:f812e34:     }
1:bfaff9b: 
1:1241e41:     @Override
1:f812e34:     public Message getMessageHardRef() {
1:f812e34:         throw new RuntimeException("not implemented");
1:f812e34:     }
1:bfaff9b: 
1:1241e41:     @Override
1:f812e34:     public MessageId getMessageId() {
1:f812e34:         return message.getMessageId();
1:f812e34:     }
1:bfaff9b: 
1:1241e41:     @Override
1:f812e34:     public int getRedeliveryCounter() {
1:f812e34:         throw new RuntimeException("not implemented");
1:f812e34:     }
1:bfaff9b: 
1:1241e41:     @Override
1:f812e34:     public int getReferenceCount() {
1:f812e34:         return references;
1:f812e34:     }
1:bfaff9b: 
1:1241e41:     @Override
1:f812e34:     public Destination getRegionDestination() {
1:f812e34:         return null;
1:f812e34:     }
1:bfaff9b: 
1:1241e41:     @Override
1:f812e34:     public int getSize() {
1:f812e34:         throw new RuntimeException("not implemented");
1:f812e34:     }
1:bfaff9b: 
1:1241e41:     @Override
1:f812e34:     public ConsumerId getTargetConsumerId() {
1:f812e34:         throw new RuntimeException("not implemented");
1:f812e34:     }
1:bfaff9b: 
1:1241e41:     @Override
1:f812e34:     public void incrementRedeliveryCounter() {
1:f812e34:         throw new RuntimeException("not implemented");
1:f812e34:     }
1:bfaff9b: 
1:1241e41:     @Override
1:f812e34:     public int incrementReferenceCount() {
1:f812e34:         return ++references;
1:f812e34:     }
1:bfaff9b: 
1:1241e41:     @Override
1:f812e34:     public boolean isExpired() {
1:fe31092:         return false;
1:f812e34:     }
1:f812e34: 
1:1241e41:     @Override
1:f812e34:     public boolean isPersistent() {
1:f812e34:         throw new RuntimeException("not implemented");
1:f812e34:     }
1:bfaff9b: 
1:1241e41:     @Override
1:cdc2fd3:     public boolean isAdvisory() {
1:cdc2fd3:         return false;
1:cdc2fd3:     }
1:cdc2fd3: 
1:1241e41:     @Override
1:6cc2c11:     public boolean canProcessAsExpired() {
1:6cc2c11:         return false;
1:6cc2c11:     }
1:6cc2c11: 
24:bfaff9b: }
============================================================================
author:gtully
-------------------------------------------------------------------------------
commit:6cc2c11
/////////////////////////////////////////////////////////////////////////
1:     @Override
1:     public boolean canProcessAsExpired() {
1:         return false;
1:     }
1: 
commit:11579bb
/////////////////////////////////////////////////////////////////////////
1:  * Used by the {@link QueueMessageReference#NULL_MESSAGE}
1: public final class NullMessageReference implements QueueMessageReference {
author:Christopher L. Shannon (cshannon)
-------------------------------------------------------------------------------
commit:1241e41
/////////////////////////////////////////////////////////////////////////
1:     @Override
1:     @Override
1:     public synchronized boolean dropIfLive() {
1:         throw new RuntimeException("not implemented");
1:     }
1: 
1:     @Override
1:     @Override
1:     @Override
1:     @Override
1:     @Override
1:     @Override
1:     @Override
1:     @Override
1:     @Override
1:     @Override
1:     @Override
1:     @Override
1:     @Override
1:     @Override
1:     @Override
1:     @Override
1:     @Override
1:     @Override
1:     @Override
1:     @Override
1:     @Override
1:     @Override
1:     @Override
author:Hiram R. Chirino
-------------------------------------------------------------------------------
commit:58aca86
commit:f812e34
/////////////////////////////////////////////////////////////////////////
0:  * Only used by the {@link QueueMessageReference#NULL_MESSAGE}
0: final class NullMessageReference implements QueueMessageReference {
0:     private ActiveMQMessage message = new ActiveMQMessage();
1:     private volatile int references;
1:     public void drop() {
1:         throw new RuntimeException("not implemented");
1:     }
1:     public LockOwner getLockOwner() {
1:         throw new RuntimeException("not implemented");
1:     }
1:     public boolean isAcked() {
1:         return false;
1:     }
1:     public boolean isDropped() {
1:         throw new RuntimeException("not implemented");
1:     }
1:     public boolean lock(LockOwner subscription) {
1:         return true;
1:     }
1:     public void setAcked(boolean b) {
1:         throw new RuntimeException("not implemented");
1:     }
0:     public void unlock() {
1:     }
1:     public int decrementReferenceCount() {
1:         return --references;
1:     }
1:     public long getExpiration() {
1:         throw new RuntimeException("not implemented");
1:     }
1:     public String getGroupID() {
1:         return null;
1:     }
1:     public int getGroupSequence() {
1:         return 0;
1:     }
0:     public Message getMessage() throws IOException {
1:         return message;
1:     }
1:     public Message getMessageHardRef() {
1:         throw new RuntimeException("not implemented");
1:     }
1:     public MessageId getMessageId() {
1:         return message.getMessageId();
1:     }
1:     public int getRedeliveryCounter() {
1:         throw new RuntimeException("not implemented");
1:     }
1:     public int getReferenceCount() {
1:         return references;
1:     }
1:     public Destination getRegionDestination() {
1:         return null;
1:     }
1:     public int getSize() {
1:         throw new RuntimeException("not implemented");
1:     }
1:     public ConsumerId getTargetConsumerId() {
1:         throw new RuntimeException("not implemented");
1:     }
1:     public void incrementRedeliveryCounter() {
1:         throw new RuntimeException("not implemented");
1:     }
1:     public int incrementReferenceCount() {
1:         return ++references;
1:     }
1:     public boolean isExpired() {
1:         throw new RuntimeException("not implemented");
1:     }
1: 
1:     public boolean isPersistent() {
1:         throw new RuntimeException("not implemented");
1:     }
commit:230a86c
/////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////
1:  *      http://www.apache.org/licenses/LICENSE-2.0
commit:a7891c3
/////////////////////////////////////////////////////////////////////////
0: final class NullMessageReference implements
/////////////////////////////////////////////////////////////////////////
1: 		return true;
/////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////
0: 		return null;
0: 		return 0;
commit:a19bfd4
/////////////////////////////////////////////////////////////////////////
0:  * Only used by the {@link QueueMessageReference#NULL_MESSAGE} 
author:Gary Tully
-------------------------------------------------------------------------------
commit:fe31092
/////////////////////////////////////////////////////////////////////////
1:         return false;
author:Robert Davies
-------------------------------------------------------------------------------
commit:00879cf
/////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////
1:     private final ActiveMQMessage message = new ActiveMQMessage();
/////////////////////////////////////////////////////////////////////////
1:     public Message getMessage()  {
commit:cdc2fd3
/////////////////////////////////////////////////////////////////////////
1:     public boolean isAdvisory() {
1:         return false;
1:     }
1: 
commit:d4382e4
/////////////////////////////////////////////////////////////////////////
1:         return false;
/////////////////////////////////////////////////////////////////////////
1:     public boolean unlock() {
0:         return true;
commit:bfaff9b
/////////////////////////////////////////////////////////////////////////
1: /**
1:  *
1:  * Licensed to the Apache Software Foundation (ASF) under one or more
1:  * contributor license agreements.  See the NOTICE file distributed with
1:  * this work for additional information regarding copyright ownership.
1:  * The ASF licenses this file to You under the Apache License, Version 2.0
1:  * (the "License"); you may not use this file except in compliance with
1:  * the License.  You may obtain a copy of the License at
1:  *
0:  * http://www.apache.org/licenses/LICENSE-2.0
1:  *
1:  * Unless required by applicable law or agreed to in writing, software
1:  * distributed under the License is distributed on an "AS IS" BASIS,
1:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:  * See the License for the specific language governing permissions and
1:  * limitations under the License.
1:  */
1: package org.apache.activemq.broker.region;
1: 
0: import java.io.IOException;
1: 
1: import org.apache.activemq.command.ActiveMQMessage;
1: import org.apache.activemq.command.ConsumerId;
1: import org.apache.activemq.command.Message;
1: import org.apache.activemq.command.MessageId;
1: 
1: /**
0:  * Only used by the {@link QueueMessageReference#END_OF_BROWSE_MARKER} 
1:  */
0: final class EndOfBrowseMarkerQueueMessageReference implements
0: 		QueueMessageReference {
1: 
0: 	private ActiveMQMessage message = new ActiveMQMessage();
0: 	private volatile int references;
1: 	
0: 	public void drop() {
0: 		throw new RuntimeException("not implemented");
1: 	}
1: 
0: 	public LockOwner getLockOwner() {
0: 		throw new RuntimeException("not implemented");
1: 	}
1: 
0: 	public boolean isAcked() {
0: 		return false;
1: 	}
1: 
0: 	public boolean isDropped() {
0: 		throw new RuntimeException("not implemented");
1: 	}
1: 
0: 	public boolean lock(LockOwner subscription) {
0: 		throw new RuntimeException("not implemented");
1: 	}
1: 
0: 	public void setAcked(boolean b) {
0: 		throw new RuntimeException("not implemented");
1: 	}
1: 
0: 	public void unlock() {
0: 		throw new RuntimeException("not implemented");
1: 	}
1: 
0: 	public int decrementReferenceCount() {
0: 		return --references;
1: 	}
1: 
0: 	public long getExpiration() {
0: 		throw new RuntimeException("not implemented");
1: 	}
1: 
0: 	public String getGroupID() {
0: 		throw new RuntimeException("not implemented");
1: 	}
1: 
0: 	public int getGroupSequence() {
0: 		throw new RuntimeException("not implemented");
1: 	}
1: 
0: 	public Message getMessage() throws IOException {
0: 		return message;
1: 	}
1: 
0: 	public Message getMessageHardRef() {
0: 		throw new RuntimeException("not implemented");
1: 	}
1: 
0: 	public MessageId getMessageId() {
0: 		return message.getMessageId();
1: 	}
1: 
0: 	public int getRedeliveryCounter() {
0: 		throw new RuntimeException("not implemented");
1: 	}
1: 
0: 	public int getReferenceCount() {
0: 		return references;
1: 	}
1: 
0: 	public Destination getRegionDestination() {
0: 		return null;
1: 	}
1: 
0: 	public int getSize() {
0: 		throw new RuntimeException("not implemented");
1: 	}
1: 
0: 	public ConsumerId getTargetConsumerId() {
0: 		throw new RuntimeException("not implemented");
1: 	}
1: 
0: 	public void incrementRedeliveryCounter() {
0: 		throw new RuntimeException("not implemented");
1: 	}
1: 
0: 	public int incrementReferenceCount() {
0: 		return ++references;
1: 	}
1: 
0: 	public boolean isExpired() {
0: 		throw new RuntimeException("not implemented");
1: 	}
1: 
0: 	public boolean isPersistent() {
0: 		throw new RuntimeException("not implemented");
1: 	}
1: 
1: }
============================================================================