1:ad1f751: /**
1:ad1f751:  * Licensed to the Apache Software Foundation (ASF) under one or more
1:ad1f751:  * contributor license agreements.  See the NOTICE file distributed with
1:ad1f751:  * this work for additional information regarding copyright ownership.
1:ad1f751:  * The ASF licenses this file to You under the Apache License, Version 2.0
1:ad1f751:  * (the "License"); you may not use this file except in compliance with
1:ad1f751:  * the License.  You may obtain a copy of the License at
1:ad1f751:  *
1:ad1f751:  *      http://www.apache.org/licenses/LICENSE-2.0
1:ad1f751:  *
1:ad1f751:  * Unless required by applicable law or agreed to in writing, software
1:ad1f751:  * distributed under the License is distributed on an "AS IS" BASIS,
1:ad1f751:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:ad1f751:  * See the License for the specific language governing permissions and
1:ad1f751:  * limitations under the License.
1:ad1f751:  */
1:ad1f751: 
1:ad1f751: package org.apache.activemq.store;
1:ad1f751: 
1:ad1f751: import java.util.concurrent.ExecutionException;
1:ad1f751: import java.util.concurrent.TimeUnit;
1:ad1f751: import java.util.concurrent.TimeoutException;
1:ad1f751: 
1:ad1f751: public class InlineListenableFuture implements ListenableFuture<Object> {
1:ad1f751:     public Object call() throws Exception {
1:ad1f751:         return null;
1:ad1f751:     }
1:ad1f751: 
1:ad1f751:     @Override
1:ad1f751:     public void addListener(Runnable listener) {
1:ad1f751:         listener.run();
1:ad1f751:     }
1:ad1f751: 
1:ad1f751:     @Override
1:ad1f751:     public boolean cancel(boolean mayInterruptIfRunning) {
1:ad1f751:         return false;
1:ad1f751:     }
1:ad1f751: 
1:ad1f751:     @Override
1:ad1f751:     public boolean isCancelled() {
1:ad1f751:         return false;
1:ad1f751:     }
1:ad1f751: 
1:ad1f751:     @Override
1:ad1f751:     public boolean isDone() {
1:ad1f751:         return true;
1:ad1f751:     }
1:ad1f751: 
1:ad1f751:     @Override
1:ad1f751:     public Object get() throws InterruptedException, ExecutionException {
1:ad1f751:         return null;
1:ad1f751:     }
1:ad1f751: 
1:ad1f751:     @Override
1:ad1f751:     public Object get(long timeout, TimeUnit unit) throws InterruptedException, ExecutionException, TimeoutException {
1:ad1f751:         return null;
1:ad1f751:     }
1:ad1f751: }
============================================================================
author:gtully
-------------------------------------------------------------------------------
commit:ad1f751
/////////////////////////////////////////////////////////////////////////
1: /**
1:  * Licensed to the Apache Software Foundation (ASF) under one or more
1:  * contributor license agreements.  See the NOTICE file distributed with
1:  * this work for additional information regarding copyright ownership.
1:  * The ASF licenses this file to You under the Apache License, Version 2.0
1:  * (the "License"); you may not use this file except in compliance with
1:  * the License.  You may obtain a copy of the License at
1:  *
1:  *      http://www.apache.org/licenses/LICENSE-2.0
1:  *
1:  * Unless required by applicable law or agreed to in writing, software
1:  * distributed under the License is distributed on an "AS IS" BASIS,
1:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:  * See the License for the specific language governing permissions and
1:  * limitations under the License.
1:  */
1: 
1: package org.apache.activemq.store;
1: 
1: import java.util.concurrent.ExecutionException;
1: import java.util.concurrent.TimeUnit;
1: import java.util.concurrent.TimeoutException;
1: 
1: public class InlineListenableFuture implements ListenableFuture<Object> {
1:     public Object call() throws Exception {
1:         return null;
1:     }
1: 
1:     @Override
1:     public void addListener(Runnable listener) {
1:         listener.run();
1:     }
1: 
1:     @Override
1:     public boolean cancel(boolean mayInterruptIfRunning) {
1:         return false;
1:     }
1: 
1:     @Override
1:     public boolean isCancelled() {
1:         return false;
1:     }
1: 
1:     @Override
1:     public boolean isDone() {
1:         return true;
1:     }
1: 
1:     @Override
1:     public Object get() throws InterruptedException, ExecutionException {
1:         return null;
1:     }
1: 
1:     @Override
1:     public Object get(long timeout, TimeUnit unit) throws InterruptedException, ExecutionException, TimeoutException {
1:         return null;
1:     }
1: }
============================================================================