1:a9119ec: /**
1:a9119ec:  * Licensed to the Apache Software Foundation (ASF) under one or more
1:a9119ec:  * contributor license agreements.  See the NOTICE file distributed with
1:a9119ec:  * this work for additional information regarding copyright ownership.
1:a9119ec:  * The ASF licenses this file to You under the Apache License, Version 2.0
1:a9119ec:  * (the "License"); you may not use this file except in compliance with
1:a9119ec:  * the License.  You may obtain a copy of the License at
1:a9119ec:  *
1:a9119ec:  *      http://www.apache.org/licenses/LICENSE-2.0
1:a9119ec:  *
1:a9119ec:  * Unless required by applicable law or agreed to in writing, software
1:a9119ec:  * distributed under the License is distributed on an "AS IS" BASIS,
1:a9119ec:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:a9119ec:  * See the License for the specific language governing permissions and
1:a9119ec:  * limitations under the License.
1:a9119ec:  */
1:a9119ec: package org.apache.activemq.broker;
1:a9119ec: 
1:a9119ec: import java.util.ArrayList;
1:a9119ec: import java.util.HashMap;
1:a9119ec: import java.util.List;
1:a9119ec: import java.util.Map;
1:a9119ec: import java.util.concurrent.ConcurrentHashMap;
1:a9119ec: 
1:a9119ec: import org.apache.activemq.command.ConnectionId;
1:a9119ec: import org.apache.activemq.command.ConsumerId;
1:a9119ec: import org.apache.activemq.command.ProducerId;
1:a9119ec: import org.apache.activemq.command.SessionId;
1:a9119ec: 
1:a9119ec: /**
1:b0c2a40:  * 
1:a9119ec:  */
1:a9119ec: 
1:a9119ec: public class MapTransportConnectionStateRegister  implements TransportConnectionStateRegister{
1:a9119ec: 
1:a9119ec:     private  Map <ConnectionId,TransportConnectionState>connectionStates = new ConcurrentHashMap<ConnectionId,TransportConnectionState>();
1:a9119ec: 
1:a9119ec:     public TransportConnectionState registerConnectionState(ConnectionId connectionId,
1:a9119ec:                                                                TransportConnectionState state) {
1:a9119ec:         TransportConnectionState rc = connectionStates.put(connectionId, state);
1:a9119ec:         return rc;
1:a9119ec:     }
1:a9119ec: 
1:a9119ec:     public TransportConnectionState unregisterConnectionState(ConnectionId connectionId) {
1:a9119ec:         TransportConnectionState rc = connectionStates.remove(connectionId);
1:f93d05a:         if (rc.getReferenceCounter().get() > 1) {
1:f93d05a:             rc.decrementReference();
1:f93d05a:             connectionStates.put(connectionId, rc);
1:f93d05a:         }
1:a9119ec:         return rc;
1:a9119ec:     }
1:a9119ec: 
1:a9119ec:     public List<TransportConnectionState> listConnectionStates() {
1:a9119ec:     	
1:a9119ec:         List<TransportConnectionState> rc = new ArrayList<TransportConnectionState>();
1:a9119ec:         rc.addAll(connectionStates.values());
1:a9119ec:         return rc;
1:a9119ec:     }
1:a9119ec: 
1:a9119ec:     public TransportConnectionState lookupConnectionState(String connectionId) {
1:a9119ec:         return connectionStates.get(new ConnectionId(connectionId));
1:a9119ec:     }
1:a9119ec: 
1:a9119ec:     public TransportConnectionState lookupConnectionState(ConsumerId id) {
1:a9119ec:         TransportConnectionState cs = lookupConnectionState(id.getConnectionId());
1:a9119ec:         if (cs == null) {
1:a9119ec:             throw new IllegalStateException(
1:a9119ec:                                             "Cannot lookup a consumer from a connection that had not been registered: "
1:a9119ec:                                                 + id.getParentId().getParentId());
1:a9119ec:         }
1:a9119ec:         return cs;
1:a9119ec:     }
1:a9119ec: 
1:a9119ec:     public TransportConnectionState lookupConnectionState(ProducerId id) {
1:a9119ec:     	 TransportConnectionState cs = lookupConnectionState(id.getConnectionId());
1:a9119ec:         if (cs == null) {
1:a9119ec:             throw new IllegalStateException(
1:a9119ec:                                             "Cannot lookup a producer from a connection that had not been registered: "
1:a9119ec:                                                 + id.getParentId().getParentId());
1:a9119ec:         }
1:a9119ec:         return cs;
1:a9119ec:     }
1:a9119ec: 
1:a9119ec:     public TransportConnectionState lookupConnectionState(SessionId id) {
1:a9119ec:     	 TransportConnectionState cs = lookupConnectionState(id.getConnectionId());
1:a9119ec:         if (cs == null) {
1:a9119ec:             throw new IllegalStateException(
1:a9119ec:                                             "Cannot lookup a session from a connection that had not been registered: "
1:a9119ec:                                                 + id.getParentId());
1:a9119ec:         }
1:a9119ec:         return cs;
1:a9119ec:     }
1:a9119ec: 
1:a9119ec:     public TransportConnectionState lookupConnectionState(ConnectionId connectionId) {
1:a9119ec:         TransportConnectionState cs = connectionStates.get(connectionId);
1:a9119ec:         if (cs == null) {
1:a9119ec:             throw new IllegalStateException("Cannot lookup a connection that had not been registered: "
1:a9119ec:                                             + connectionId);
1:a9119ec:         }
1:a9119ec:         return cs;
1:a9119ec:     }
1:a9119ec: 
1:a9119ec: 	
1:a9119ec: 
1:a9119ec: 	public boolean doesHandleMultipleConnectionStates() {
1:a9119ec: 		return true;
1:a9119ec: 	}
1:a9119ec: 
1:a9119ec: 	public boolean isEmpty() {
1:a9119ec: 		return connectionStates.isEmpty();
1:a9119ec: 	}
1:a9119ec: 
1:a9119ec: 	public void clear() {
1:a9119ec: 		connectionStates.clear();
1:a9119ec: 		
1:a9119ec: 	}
1:a9119ec: 
1:a9119ec: 	public void intialize(TransportConnectionStateRegister other) {
1:a9119ec: 		connectionStates.clear();
1:a9119ec: 		connectionStates.putAll(other.mapStates());
1:a9119ec: 		
1:a9119ec: 	}
1:a9119ec: 
1:a9119ec: 	public Map<ConnectionId, TransportConnectionState> mapStates() {
1:a9119ec: 		HashMap<ConnectionId, TransportConnectionState> map = new HashMap<ConnectionId, TransportConnectionState>(connectionStates);
1:a9119ec: 		return map;
1:a9119ec: 	}
1:a9119ec: 
1:a9119ec: }
============================================================================
author:Hadrian Zbarcea
-------------------------------------------------------------------------------
commit:d54d046
author:Hiram R. Chirino
-------------------------------------------------------------------------------
commit:58aca86
commit:b0c2a40
/////////////////////////////////////////////////////////////////////////
1:  * 
author:Gary Tully
-------------------------------------------------------------------------------
commit:f93d05a
/////////////////////////////////////////////////////////////////////////
1:         if (rc.getReferenceCounter().get() > 1) {
1:             rc.decrementReference();
1:             connectionStates.put(connectionId, rc);
1:         }
author:Robert Davies
-------------------------------------------------------------------------------
commit:a9119ec
/////////////////////////////////////////////////////////////////////////
1: /**
1:  * Licensed to the Apache Software Foundation (ASF) under one or more
1:  * contributor license agreements.  See the NOTICE file distributed with
1:  * this work for additional information regarding copyright ownership.
1:  * The ASF licenses this file to You under the Apache License, Version 2.0
1:  * (the "License"); you may not use this file except in compliance with
1:  * the License.  You may obtain a copy of the License at
1:  *
1:  *      http://www.apache.org/licenses/LICENSE-2.0
1:  *
1:  * Unless required by applicable law or agreed to in writing, software
1:  * distributed under the License is distributed on an "AS IS" BASIS,
1:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:  * See the License for the specific language governing permissions and
1:  * limitations under the License.
1:  */
1: package org.apache.activemq.broker;
1: 
1: import java.util.ArrayList;
1: import java.util.HashMap;
1: import java.util.List;
1: import java.util.Map;
1: import java.util.concurrent.ConcurrentHashMap;
1: 
1: import org.apache.activemq.command.ConnectionId;
1: import org.apache.activemq.command.ConsumerId;
1: import org.apache.activemq.command.ProducerId;
1: import org.apache.activemq.command.SessionId;
1: 
1: /**
0:  * @version $Revision: 1.8 $
1:  */
1: 
1: public class MapTransportConnectionStateRegister  implements TransportConnectionStateRegister{
1: 
1:     private  Map <ConnectionId,TransportConnectionState>connectionStates = new ConcurrentHashMap<ConnectionId,TransportConnectionState>();
1: 
1:     public TransportConnectionState registerConnectionState(ConnectionId connectionId,
1:                                                                TransportConnectionState state) {
1:         TransportConnectionState rc = connectionStates.put(connectionId, state);
1:         return rc;
1:     }
1: 
1:     public TransportConnectionState unregisterConnectionState(ConnectionId connectionId) {
1:         TransportConnectionState rc = connectionStates.remove(connectionId);
1:         return rc;
1:     }
1: 
1:     public List<TransportConnectionState> listConnectionStates() {
1:     	
1:         List<TransportConnectionState> rc = new ArrayList<TransportConnectionState>();
1:         rc.addAll(connectionStates.values());
1:         return rc;
1:     }
1: 
1:     public TransportConnectionState lookupConnectionState(String connectionId) {
1:         return connectionStates.get(new ConnectionId(connectionId));
1:     }
1: 
1:     public TransportConnectionState lookupConnectionState(ConsumerId id) {
1:         TransportConnectionState cs = lookupConnectionState(id.getConnectionId());
1:         if (cs == null) {
1:             throw new IllegalStateException(
1:                                             "Cannot lookup a consumer from a connection that had not been registered: "
1:                                                 + id.getParentId().getParentId());
1:         }
1:         return cs;
1:     }
1: 
1:     public TransportConnectionState lookupConnectionState(ProducerId id) {
1:     	 TransportConnectionState cs = lookupConnectionState(id.getConnectionId());
1:         if (cs == null) {
1:             throw new IllegalStateException(
1:                                             "Cannot lookup a producer from a connection that had not been registered: "
1:                                                 + id.getParentId().getParentId());
1:         }
1:         return cs;
1:     }
1: 
1:     public TransportConnectionState lookupConnectionState(SessionId id) {
1:     	 TransportConnectionState cs = lookupConnectionState(id.getConnectionId());
1:         if (cs == null) {
1:             throw new IllegalStateException(
1:                                             "Cannot lookup a session from a connection that had not been registered: "
1:                                                 + id.getParentId());
1:         }
1:         return cs;
1:     }
1: 
1:     public TransportConnectionState lookupConnectionState(ConnectionId connectionId) {
1:         TransportConnectionState cs = connectionStates.get(connectionId);
1:         if (cs == null) {
1:             throw new IllegalStateException("Cannot lookup a connection that had not been registered: "
1:                                             + connectionId);
1:         }
1:         return cs;
1:     }
1: 
1: 	
1: 
1: 	public boolean doesHandleMultipleConnectionStates() {
1: 		return true;
1: 	}
1: 
1: 	public boolean isEmpty() {
1: 		return connectionStates.isEmpty();
1: 	}
1: 
1: 	public void clear() {
1: 		connectionStates.clear();
1: 		
1: 	}
1: 
1: 	public void intialize(TransportConnectionStateRegister other) {
1: 		connectionStates.clear();
1: 		connectionStates.putAll(other.mapStates());
1: 		
1: 	}
1: 
1: 	public Map<ConnectionId, TransportConnectionState> mapStates() {
1: 		HashMap<ConnectionId, TransportConnectionState> map = new HashMap<ConnectionId, TransportConnectionState>(connectionStates);
1: 		return map;
1: 	}
1: 
1: }
============================================================================