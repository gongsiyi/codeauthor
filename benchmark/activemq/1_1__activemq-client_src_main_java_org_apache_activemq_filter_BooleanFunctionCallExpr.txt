1:bf07137: /**
1:bf07137:  * Licensed to the Apache Software Foundation (ASF) under one or more
1:bf07137:  * contributor license agreements.  See the NOTICE file distributed with
1:bf07137:  * this work for additional information regarding copyright ownership.
1:bf07137:  * The ASF licenses this file to You under the Apache License, Version 2.0
1:bf07137:  * (the "License"); you may not use this file except in compliance with
1:bf07137:  * the License.  You may obtain a copy of the License at
1:bf07137:  *
1:bf07137:  *      http://www.apache.org/licenses/LICENSE-2.0
1:bf07137:  *
1:bf07137:  * Unless required by applicable law or agreed to in writing, software
1:bf07137:  * distributed under the License is distributed on an "AS IS" BASIS,
1:bf07137:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:bf07137:  * See the License for the specific language governing permissions and
1:bf07137:  * limitations under the License.
1:bf07137:  */
1:bf07137: package org.apache.activemq.filter;
1:bf07137: 
1:bf07137: import java.util.List;
1:bf07137: 
1:bf07137: /**
1:bf07137:  * Function call expression that evaluates to a boolean value.  Selector parsing requires BooleanExpression objects for
1:bf07137:  * Boolean expressions, such as operands to AND, and as the final result of a selector.  This provides that interface
1:bf07137:  * for function call expressions that resolve to Boolean values.
1:bf07137:  * <p/>
1:bf07137:  * If a function can return different types at evaluation-time, the function implementation needs to decide whether it
1:bf07137:  * supports casting to Boolean at parse-time.
1:bf07137:  *
1:bf07137:  * @see    FunctionCallExpression#createFunctionCall
1:bf07137:  */
1:bf07137: 
1:bf07137: public class BooleanFunctionCallExpr extends FunctionCallExpression implements BooleanExpression {
1:bf07137:     /**
1:bf07137:      * Constructs a function call expression with the named filter function and arguments, which returns a boolean
1:bf07137:      * result.
1:bf07137:      *
1:bf07137:      * @param    func_name - Name of the filter function to be called when evaluated.
1:bf07137:      * @param    args - List of argument expressions passed to the function.
1:bf07137:      */
1:bf07137: 
1:bf07137:     public BooleanFunctionCallExpr(String func_name, List<Expression> args)
1:bf07137:             throws invalidFunctionExpressionException {
1:bf07137:         super(func_name, args);
1:bf07137:     }
1:bf07137: 
1:bf07137: 
1:bf07137:     /**
1:bf07137:      * Evaluate the function call expression, in the given context, and return an indication of whether the
1:bf07137:      * expression "matches" (i.e.&nbsp;evaluates to true).
1:bf07137:      *
1:bf07137:      * @param    message_ctx - message context against which the expression will be evaluated.
1:bf07137:      * @return the boolean evaluation of the function call expression.
1:bf07137:      */
1:bf07137: 
1:bf07137:     public boolean matches(MessageEvaluationContext message_ctx) throws javax.jms.JMSException {
1:bf07137:         Boolean result;
1:bf07137: 
1:bf07137:         result = (Boolean) evaluate(message_ctx);
1:bf07137: 
1:bf07137:         if (result != null)
1:bf07137:             return result.booleanValue();
1:bf07137: 
1:bf07137:         return false;
1:bf07137:     }
1:bf07137: }
1:bf07137: 
============================================================================
author:Gary Tully
-------------------------------------------------------------------------------
commit:bf07137
/////////////////////////////////////////////////////////////////////////
1: /**
1:  * Licensed to the Apache Software Foundation (ASF) under one or more
1:  * contributor license agreements.  See the NOTICE file distributed with
1:  * this work for additional information regarding copyright ownership.
1:  * The ASF licenses this file to You under the Apache License, Version 2.0
1:  * (the "License"); you may not use this file except in compliance with
1:  * the License.  You may obtain a copy of the License at
1:  *
1:  *      http://www.apache.org/licenses/LICENSE-2.0
1:  *
1:  * Unless required by applicable law or agreed to in writing, software
1:  * distributed under the License is distributed on an "AS IS" BASIS,
1:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:  * See the License for the specific language governing permissions and
1:  * limitations under the License.
1:  */
1: package org.apache.activemq.filter;
1: 
1: import java.util.List;
1: 
1: /**
1:  * Function call expression that evaluates to a boolean value.  Selector parsing requires BooleanExpression objects for
1:  * Boolean expressions, such as operands to AND, and as the final result of a selector.  This provides that interface
1:  * for function call expressions that resolve to Boolean values.
1:  * <p/>
1:  * If a function can return different types at evaluation-time, the function implementation needs to decide whether it
1:  * supports casting to Boolean at parse-time.
1:  *
1:  * @see    FunctionCallExpression#createFunctionCall
1:  */
1: 
1: public class BooleanFunctionCallExpr extends FunctionCallExpression implements BooleanExpression {
1:     /**
1:      * Constructs a function call expression with the named filter function and arguments, which returns a boolean
1:      * result.
1:      *
1:      * @param    func_name - Name of the filter function to be called when evaluated.
1:      * @param    args - List of argument expressions passed to the function.
1:      */
1: 
1:     public BooleanFunctionCallExpr(String func_name, List<Expression> args)
1:             throws invalidFunctionExpressionException {
1:         super(func_name, args);
1:     }
1: 
1: 
1:     /**
1:      * Evaluate the function call expression, in the given context, and return an indication of whether the
1:      * expression "matches" (i.e.&nbsp;evaluates to true).
1:      *
1:      * @param    message_ctx - message context against which the expression will be evaluated.
1:      * @return the boolean evaluation of the function call expression.
1:      */
1: 
1:     public boolean matches(MessageEvaluationContext message_ctx) throws javax.jms.JMSException {
1:         Boolean result;
1: 
1:         result = (Boolean) evaluate(message_ctx);
1: 
1:         if (result != null)
1:             return result.booleanValue();
1: 
1:         return false;
1:     }
1: }
1: 
============================================================================