1:227ed96: /**
1:227ed96:  * Licensed to the Apache Software Foundation (ASF) under one or more
1:227ed96:  * contributor license agreements.  See the NOTICE file distributed with
1:227ed96:  * this work for additional information regarding copyright ownership.
1:227ed96:  * The ASF licenses this file to You under the Apache License, Version 2.0
1:227ed96:  * (the "License"); you may not use this file except in compliance with
1:227ed96:  * the License.  You may obtain a copy of the License at
1:227ed96:  *
1:227ed96:  *      http://www.apache.org/licenses/LICENSE-2.0
1:227ed96:  *
1:227ed96:  * Unless required by applicable law or agreed to in writing, software
1:227ed96:  * distributed under the License is distributed on an "AS IS" BASIS,
1:227ed96:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:227ed96:  * See the License for the specific language governing permissions and
1:227ed96:  * limitations under the License.
1:227ed96:  */
1:227ed96: package org.apache.activemq.usecases;
1:227ed96: 
1:227ed96: import junit.framework.TestCase;
1:227ed96: import org.apache.activemq.ActiveMQConnectionFactory;
1:8bf987b: import org.slf4j.Logger;
1:8bf987b: import org.slf4j.LoggerFactory;
1:227ed96: 
1:227ed96: import javax.jms.*;
1:227ed96: import javax.jms.Queue;
1:227ed96: import java.util.*;
1:227ed96: import java.util.concurrent.CountDownLatch;
1:227ed96: 
1:227ed96: /*
1:227ed96:  * Test plan:
1:227ed96:  * Producer: publish messages into a queue, with 10 message groups, closing the group with seq=-1 on message 5 and message 10
1:227ed96:  * Consumers: 2 consumers created after all messages are sent
1:227ed96:  *
1:227ed96:  * Expected: for each group, messages 1-5 are handled by one consumer and messages 6-10 are handled by the other consumer.  Messages
1:227ed96:  * 1 and 6 have the JMSXGroupFirstForConsumer property set to true.
1:227ed96:  */
1:227ed96: public class MessageGroupCloseTest extends TestCase {
1:8bf987b:     private static final Logger LOG = LoggerFactory.getLogger(MessageGroupNewConsumerTest.class);
1:227ed96:     private Connection connection;
1:227ed96:     // Released after all messages are created
1:227ed96:     private CountDownLatch latchMessagesCreated = new CountDownLatch(1);
1:227ed96: 
1:227ed96:     private int messagesSent, messagesRecvd1, messagesRecvd2, messageGroupCount, errorCountFirstForConsumer, errorCountWrongConsumerClose, errorCountDuplicateClose;
1:227ed96:     // groupID, count
1:227ed96:     private HashMap<String, Integer> messageGroups1 = new HashMap<String, Integer>();
1:227ed96:     private HashMap<String, Integer> messageGroups2 = new HashMap<String, Integer>();
1:227ed96:     private HashSet<String> closedGroups1 = new HashSet<String>();
1:227ed96:     private HashSet<String> closedGroups2 = new HashSet<String>();
1:227ed96:     // with the prefetch too high, this bug is not realized
1:227ed96:     private static final String connStr =
1:227ed96:         "vm://localhost?broker.persistent=false&broker.useJmx=false&jms.prefetchPolicy.all=1";
1:227ed96: 
1:227ed96:     public void testNewConsumer() throws JMSException, InterruptedException {
1:227ed96:         ActiveMQConnectionFactory factory = new ActiveMQConnectionFactory(connStr);
1:227ed96:         connection = factory.createConnection();
1:227ed96:         connection.start();
1:227ed96:         final String queueName = this.getClass().getSimpleName();
1:227ed96:         final Thread producerThread = new Thread() {
1:227ed96:             public void run() {
1:227ed96:                 try {
1:227ed96:                     Session session = connection.createSession(true, Session.SESSION_TRANSACTED);
1:227ed96:                     Queue queue = session.createQueue(queueName);
1:227ed96:                     MessageProducer prod = session.createProducer(queue);
1:227ed96:                     for (int i=0; i<10; i++) {
1:227ed96:                         for (int j=0; j<10; j++) {
1:227ed96:                             int seq = j + 1;
1:227ed96:                             if ((j+1) % 5 == 0) {
1:227ed96:                                 seq = -1;
2:227ed96:                             }
1:227ed96:                             Message message = generateMessage(session, Integer.toString(i), seq);
1:227ed96:                             prod.send(message);
1:227ed96:                             session.commit();
1:227ed96:                             messagesSent++;
1:227ed96:                             LOG.info("Sent message: group=" + i + ", seq="+ seq);
1:227ed96:                             //Thread.sleep(20);
1:227ed96:                         }
1:227ed96:                         if (i % 100 == 0) {
1:227ed96:                             LOG.info("Sent messages: group=" + i);
1:227ed96:                         }
1:4743a20:                         setMessageGroupCount(getMessageGroupCount() + 1);
1:227ed96:                     }
1:227ed96:                     LOG.info(messagesSent+" messages sent");
1:227ed96:                     latchMessagesCreated.countDown();
1:227ed96:                     prod.close();
1:227ed96:                     session.close();
1:227ed96:                 } catch (Exception e) {
1:227ed96:                     LOG.error("Producer failed", e);
1:227ed96:                 }
1:227ed96:             }
1:227ed96:         };
1:227ed96:         final Thread consumerThread1 = new Thread() {
1:227ed96:             public void run() {
1:227ed96:                 try {
1:227ed96:                     latchMessagesCreated.await();
1:227ed96:                     LOG.info("starting consumer1");
1:227ed96:                     Session session = connection.createSession(true, Session.SESSION_TRANSACTED);
1:227ed96:                     Queue queue = session.createQueue(queueName);
1:227ed96:                     MessageConsumer con1 = session.createConsumer(queue);
1:227ed96:                     while(true) {
1:227ed96:                         Message message = con1.receive(5000);
1:227ed96:                         if (message == null) break;
1:227ed96:                         LOG.info("Con1: got message "+formatMessage(message));
1:227ed96:                         checkMessage(message, "Con1", messageGroups1, closedGroups1);
1:227ed96:                         session.commit();
1:227ed96:                         messagesRecvd1++;
1:227ed96:                         if (messagesRecvd1 % 100 == 0) {
1:227ed96:                             LOG.info("Con1: got messages count=" + messagesRecvd1);
1:227ed96:                         }
1:227ed96:                         //Thread.sleep(50);
1:227ed96:                     }
1:227ed96:                     LOG.info("Con1: total messages=" + messagesRecvd1);
1:227ed96:                     LOG.info("Con1: total message groups=" + messageGroups1.size());
1:227ed96:                     con1.close();
1:227ed96:                     session.close();
1:227ed96:                 } catch (Exception e) {
1:227ed96:                     LOG.error("Consumer 1 failed", e);
1:227ed96:                 }
1:227ed96:             }
1:227ed96:         };
1:227ed96:         final Thread consumerThread2 = new Thread() {
1:227ed96:             public void run() {
1:227ed96:                 try {
1:227ed96:                     latchMessagesCreated.await();
1:227ed96:                     LOG.info("starting consumer2");
1:227ed96:                     Session session = connection.createSession(true, Session.SESSION_TRANSACTED);
1:227ed96:                     Queue queue = session.createQueue(queueName);
1:227ed96:                     MessageConsumer con2 = session.createConsumer(queue);
1:227ed96:                     while(true) {
1:227ed96:                         Message message = con2.receive(5000);
1:227ed96:                         if (message == null) { break; }
1:227ed96:                         LOG.info("Con2: got message "+formatMessage(message));
1:227ed96:                         checkMessage(message, "Con2", messageGroups2, closedGroups2);
1:227ed96:                         session.commit();
1:227ed96:                         messagesRecvd2++;
1:227ed96:                         if (messagesRecvd2 % 100 == 0) {
1:227ed96:                             LOG.info("Con2: got messages count=" + messagesRecvd2);
1:227ed96:                         }
1:227ed96:                         //Thread.sleep(50);
1:227ed96:                     }
1:227ed96:                     con2.close();
1:227ed96:                     session.close();
1:227ed96:                     LOG.info("Con2: total messages=" + messagesRecvd2);
1:227ed96:                     LOG.info("Con2: total message groups=" + messageGroups2.size());
1:227ed96:                 } catch (Exception e) {
1:227ed96:                     LOG.error("Consumer 2 failed", e);
1:227ed96:                 }
1:227ed96:             }
1:227ed96:         };
1:227ed96:         consumerThread2.start();
1:227ed96:         consumerThread1.start();
1:227ed96:         producerThread.start();
1:227ed96:         // wait for threads to finish
1:227ed96:         producerThread.join();
1:227ed96:         consumerThread1.join();
1:227ed96:         consumerThread2.join();
1:227ed96:         connection.close();
1:227ed96:         // check results
1:227ed96: 
1:227ed96:         assertEquals("consumers should get all the messages", messagesSent, messagesRecvd1 + messagesRecvd2);
1:227ed96:         assertEquals("not all message groups closed for consumer 1", messageGroups1.size(), closedGroups1.size());
1:227ed96:         assertEquals("not all message groups closed for consumer 2", messageGroups2.size(), closedGroups2.size());
1:227ed96:         assertTrue("producer failed to send any messages", messagesSent > 0);
1:227ed96:         assertEquals("JMSXGroupFirstForConsumer not set", 0, errorCountFirstForConsumer);
1:227ed96:         assertEquals("wrong consumer got close message", 0, errorCountWrongConsumerClose);
1:227ed96:         assertEquals("consumer got duplicate close message", 0, errorCountDuplicateClose);
1:227ed96:     }
1:227ed96: 
1:227ed96:     public Message generateMessage(Session session, String groupId, int seq) throws JMSException {
1:227ed96:         TextMessage m = session.createTextMessage();
1:227ed96:         m.setJMSType("TEST_MESSAGE");
1:227ed96:         m.setStringProperty("JMSXGroupID", groupId);
1:227ed96:         m.setIntProperty("JMSXGroupSeq", seq);
1:227ed96:         m.setText("<?xml?><testMessage/>");
1:227ed96:         return m;
1:227ed96:     }
1:227ed96:     public String formatMessage(Message m) {
1:227ed96:         try {
1:227ed96:             return "group="+m.getStringProperty("JMSXGroupID")+", seq="+m.getIntProperty("JMSXGroupSeq");
1:227ed96:         } catch (Exception e) {
1:227ed96:             return e.getClass().getSimpleName()+": "+e.getMessage();
1:227ed96:         }
1:227ed96:     }
1:227ed96:     public void checkMessage(Message m, String consumerId, Map<String, Integer> messageGroups, Set<String> closedGroups) throws JMSException {
1:227ed96:         String groupId = m.getStringProperty("JMSXGroupID");
1:227ed96:         int seq = m.getIntProperty("JMSXGroupSeq");
1:227ed96:         Integer count = messageGroups.get(groupId);
1:227ed96:         if (count == null) {
1:227ed96:             // first time seeing this group
1:227ed96:             if (!m.propertyExists("JMSXGroupFirstForConsumer") ||
1:227ed96:                 !m.getBooleanProperty("JMSXGroupFirstForConsumer")) {
1:227ed96:                 LOG.info(consumerId + ": JMSXGroupFirstForConsumer not set for group=" + groupId + ", seq=" +seq);
1:227ed96:                 errorCountFirstForConsumer++;
1:227ed96:             }
1:227ed96:             if (seq == -1) {
1:227ed96:                 closedGroups.add(groupId);
1:227ed96:                 LOG.info(consumerId + ": wrong consumer got close message for group=" + groupId);
1:227ed96:                 errorCountWrongConsumerClose++;
1:227ed96:             }
1:227ed96:             messageGroups.put(groupId, 1);
1:227ed96:         } else {
1:227ed96:             // existing group
1:227ed96:             if (closedGroups.contains(groupId)) {
1:227ed96:                 // group reassigned to same consumer
1:227ed96:                 closedGroups.remove(groupId);
1:227ed96:                 if (!m.propertyExists("JMSXGroupFirstForConsumer") ||
1:227ed96:                     !m.getBooleanProperty("JMSXGroupFirstForConsumer")) {
1:227ed96:                     LOG.info(consumerId + ": JMSXGroupFirstForConsumer not set for group=" + groupId + ", seq=" +seq);
1:227ed96:                     errorCountFirstForConsumer++;
1:227ed96:                 }
1:227ed96:                 if (seq == -1) {
1:227ed96:                     LOG.info(consumerId + ": consumer got duplicate close message for group=" + groupId);
1:227ed96:                     errorCountDuplicateClose++;
1:227ed96:                 }
1:227ed96:             }
1:227ed96:             if (seq == -1) {
1:227ed96:                 closedGroups.add(groupId);
1:227ed96:             }
1:227ed96:             messageGroups.put(groupId, count + 1);
1:8bf987b:         }
1:227ed96:     }
1:4743a20: 
1:4743a20:     /**
1:4743a20:      * @return the messageGroupCount
1:4743a20:      */
1:4743a20:     public int getMessageGroupCount() {
1:4743a20:         return messageGroupCount;
1:4743a20:     }
1:4743a20: 
1:4743a20:     /**
1:4743a20:      * @param messageGroupCount the messageGroupCount to set
1:4743a20:      */
1:4743a20:     public void setMessageGroupCount(int messageGroupCount) {
1:4743a20:         this.messageGroupCount = messageGroupCount;
1:4743a20:     }
1:227ed96: }
============================================================================
author:Timothy A. Bish
-------------------------------------------------------------------------------
commit:4743a20
/////////////////////////////////////////////////////////////////////////
1:                         setMessageGroupCount(getMessageGroupCount() + 1);
/////////////////////////////////////////////////////////////////////////
1: 
1:     /**
1:      * @return the messageGroupCount
1:      */
1:     public int getMessageGroupCount() {
1:         return messageGroupCount;
1:     }
1: 
1:     /**
1:      * @param messageGroupCount the messageGroupCount to set
1:      */
1:     public void setMessageGroupCount(int messageGroupCount) {
1:         this.messageGroupCount = messageGroupCount;
1:     }
commit:ef24cc9
commit:42e51a3
/////////////////////////////////////////////////////////////////////////
author:Bosanac Dejan
-------------------------------------------------------------------------------
commit:8bf987b
/////////////////////////////////////////////////////////////////////////
1: import org.slf4j.Logger;
1: import org.slf4j.LoggerFactory;
/////////////////////////////////////////////////////////////////////////
1:     private static final Logger LOG = LoggerFactory.getLogger(MessageGroupNewConsumerTest.class);
/////////////////////////////////////////////////////////////////////////
1: }
commit:227ed96
/////////////////////////////////////////////////////////////////////////
1: /**
1:  * Licensed to the Apache Software Foundation (ASF) under one or more
1:  * contributor license agreements.  See the NOTICE file distributed with
1:  * this work for additional information regarding copyright ownership.
1:  * The ASF licenses this file to You under the Apache License, Version 2.0
1:  * (the "License"); you may not use this file except in compliance with
1:  * the License.  You may obtain a copy of the License at
1:  *
1:  *      http://www.apache.org/licenses/LICENSE-2.0
1:  *
1:  * Unless required by applicable law or agreed to in writing, software
1:  * distributed under the License is distributed on an "AS IS" BASIS,
1:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:  * See the License for the specific language governing permissions and
1:  * limitations under the License.
1:  */
1: package org.apache.activemq.usecases;
1: 
1: import junit.framework.TestCase;
1: import org.apache.activemq.ActiveMQConnectionFactory;
0: import org.apache.commons.logging.Log;
0: import org.apache.commons.logging.LogFactory;
1: 
1: import javax.jms.*;
1: import javax.jms.Queue;
1: import java.util.*;
1: import java.util.concurrent.CountDownLatch;
1: 
1: /*
1:  * Test plan:
1:  * Producer: publish messages into a queue, with 10 message groups, closing the group with seq=-1 on message 5 and message 10
1:  * Consumers: 2 consumers created after all messages are sent
1:  *
1:  * Expected: for each group, messages 1-5 are handled by one consumer and messages 6-10 are handled by the other consumer.  Messages
1:  * 1 and 6 have the JMSXGroupFirstForConsumer property set to true.
1:  */
1: public class MessageGroupCloseTest extends TestCase {
0:     private static final Log LOG = LogFactory.getLog(MessageGroupNewConsumerTest.class);
1:     private Connection connection;
1:     // Released after all messages are created
1:     private CountDownLatch latchMessagesCreated = new CountDownLatch(1);
1: 
1:     private int messagesSent, messagesRecvd1, messagesRecvd2, messageGroupCount, errorCountFirstForConsumer, errorCountWrongConsumerClose, errorCountDuplicateClose;
1:     // groupID, count
1:     private HashMap<String, Integer> messageGroups1 = new HashMap<String, Integer>();
1:     private HashMap<String, Integer> messageGroups2 = new HashMap<String, Integer>();
1:     private HashSet<String> closedGroups1 = new HashSet<String>();
1:     private HashSet<String> closedGroups2 = new HashSet<String>();
1:     // with the prefetch too high, this bug is not realized
1:     private static final String connStr =
0:         //"tcp://localhost:61616";
1:         "vm://localhost?broker.persistent=false&broker.useJmx=false&jms.prefetchPolicy.all=1";
1: 
1:     public void testNewConsumer() throws JMSException, InterruptedException {
1:         ActiveMQConnectionFactory factory = new ActiveMQConnectionFactory(connStr);
1:         connection = factory.createConnection();
1:         connection.start();
1:         final String queueName = this.getClass().getSimpleName();
1:         final Thread producerThread = new Thread() {
1:             public void run() {
1:                 try {
1:                     Session session = connection.createSession(true, Session.SESSION_TRANSACTED);
1:                     Queue queue = session.createQueue(queueName);
1:                     MessageProducer prod = session.createProducer(queue);
1:                     for (int i=0; i<10; i++) {
1:                         for (int j=0; j<10; j++) {
1:                             int seq = j + 1;
1:                             if ((j+1) % 5 == 0) {
1:                                 seq = -1;
1:                             }
1:                             Message message = generateMessage(session, Integer.toString(i), seq);
1:                             prod.send(message);
1:                             session.commit();
1:                             messagesSent++;
1:                             LOG.info("Sent message: group=" + i + ", seq="+ seq);
1:                             //Thread.sleep(20);
1:                         }
1:                         if (i % 100 == 0) {
1:                             LOG.info("Sent messages: group=" + i);
1:                         }
0:                         messageGroupCount++;
1:                     }
1:                     LOG.info(messagesSent+" messages sent");
1:                     latchMessagesCreated.countDown();
1:                     prod.close();
1:                     session.close();
1:                 } catch (Exception e) {
1:                     LOG.error("Producer failed", e);
1:                 }
1:             }
1:         };
1:         final Thread consumerThread1 = new Thread() {
1:             public void run() {
1:                 try {
1:                     latchMessagesCreated.await();
1:                     LOG.info("starting consumer1");
1:                     Session session = connection.createSession(true, Session.SESSION_TRANSACTED);
1:                     Queue queue = session.createQueue(queueName);
1:                     MessageConsumer con1 = session.createConsumer(queue);
1:                     while(true) {
1:                         Message message = con1.receive(5000);
1:                         if (message == null) break;
1:                         LOG.info("Con1: got message "+formatMessage(message));
1:                         checkMessage(message, "Con1", messageGroups1, closedGroups1);
1:                         session.commit();
1:                         messagesRecvd1++;
1:                         if (messagesRecvd1 % 100 == 0) {
1:                             LOG.info("Con1: got messages count=" + messagesRecvd1);
1:                         }
1:                         //Thread.sleep(50);
1:                     }
1:                     LOG.info("Con1: total messages=" + messagesRecvd1);
1:                     LOG.info("Con1: total message groups=" + messageGroups1.size());
1:                     con1.close();
1:                     session.close();
1:                 } catch (Exception e) {
1:                     LOG.error("Consumer 1 failed", e);
1:                 }
1:             }
1:         };
1:         final Thread consumerThread2 = new Thread() {
1:             public void run() {
1:                 try {
1:                     latchMessagesCreated.await();
1:                     LOG.info("starting consumer2");
1:                     Session session = connection.createSession(true, Session.SESSION_TRANSACTED);
1:                     Queue queue = session.createQueue(queueName);
1:                     MessageConsumer con2 = session.createConsumer(queue);
1:                     while(true) {
1:                         Message message = con2.receive(5000);
1:                         if (message == null) { break; }
1:                         LOG.info("Con2: got message "+formatMessage(message));
1:                         checkMessage(message, "Con2", messageGroups2, closedGroups2);
1:                         session.commit();
1:                         messagesRecvd2++;
1:                         if (messagesRecvd2 % 100 == 0) {
1:                             LOG.info("Con2: got messages count=" + messagesRecvd2);
1:                         }
1:                         //Thread.sleep(50);
1:                     }
1:                     con2.close();
1:                     session.close();
1:                     LOG.info("Con2: total messages=" + messagesRecvd2);
1:                     LOG.info("Con2: total message groups=" + messageGroups2.size());
1:                 } catch (Exception e) {
1:                     LOG.error("Consumer 2 failed", e);
1:                 }
1:             }
1:         };
1:         consumerThread2.start();
1:         consumerThread1.start();
1:         producerThread.start();
1:         // wait for threads to finish
1:         producerThread.join();
1:         consumerThread1.join();
1:         consumerThread2.join();
1:         connection.close();
1:         // check results
1: 
1:         assertEquals("consumers should get all the messages", messagesSent, messagesRecvd1 + messagesRecvd2);
1:         assertEquals("not all message groups closed for consumer 1", messageGroups1.size(), closedGroups1.size());
1:         assertEquals("not all message groups closed for consumer 2", messageGroups2.size(), closedGroups2.size());
1:         assertTrue("producer failed to send any messages", messagesSent > 0);
1:         assertEquals("JMSXGroupFirstForConsumer not set", 0, errorCountFirstForConsumer);
1:         assertEquals("wrong consumer got close message", 0, errorCountWrongConsumerClose);
1:         assertEquals("consumer got duplicate close message", 0, errorCountDuplicateClose);
1:     }
1: 
1:     public Message generateMessage(Session session, String groupId, int seq) throws JMSException {
1:         TextMessage m = session.createTextMessage();
1:         m.setJMSType("TEST_MESSAGE");
1:         m.setStringProperty("JMSXGroupID", groupId);
1:         m.setIntProperty("JMSXGroupSeq", seq);
1:         m.setText("<?xml?><testMessage/>");
1:         return m;
1:     }
1:     public String formatMessage(Message m) {
1:         try {
1:             return "group="+m.getStringProperty("JMSXGroupID")+", seq="+m.getIntProperty("JMSXGroupSeq");
1:         } catch (Exception e) {
1:             return e.getClass().getSimpleName()+": "+e.getMessage();
1:         }
1:     }
1:     public void checkMessage(Message m, String consumerId, Map<String, Integer> messageGroups, Set<String> closedGroups) throws JMSException {
1:         String groupId = m.getStringProperty("JMSXGroupID");
1:         int seq = m.getIntProperty("JMSXGroupSeq");
1:         Integer count = messageGroups.get(groupId);
1:         if (count == null) {
1:             // first time seeing this group
1:             if (!m.propertyExists("JMSXGroupFirstForConsumer") ||
1:                 !m.getBooleanProperty("JMSXGroupFirstForConsumer")) {
1:                 LOG.info(consumerId + ": JMSXGroupFirstForConsumer not set for group=" + groupId + ", seq=" +seq);
1:                 errorCountFirstForConsumer++;
1:             }
1:             if (seq == -1) {
1:                 closedGroups.add(groupId);
1:                 LOG.info(consumerId + ": wrong consumer got close message for group=" + groupId);
1:                 errorCountWrongConsumerClose++;
1:             }
1:             messageGroups.put(groupId, 1);
1:         } else {
1:             // existing group
1:             if (closedGroups.contains(groupId)) {
1:                 // group reassigned to same consumer
1:                 closedGroups.remove(groupId);
1:                 if (!m.propertyExists("JMSXGroupFirstForConsumer") ||
1:                     !m.getBooleanProperty("JMSXGroupFirstForConsumer")) {
1:                     LOG.info(consumerId + ": JMSXGroupFirstForConsumer not set for group=" + groupId + ", seq=" +seq);
1:                     errorCountFirstForConsumer++;
1:                 }
1:                 if (seq == -1) {
1:                     LOG.info(consumerId + ": consumer got duplicate close message for group=" + groupId);
1:                     errorCountDuplicateClose++;
1:                 }
1:             }
1:             if (seq == -1) {
1:                 closedGroups.add(groupId);
1:             }
1:             messageGroups.put(groupId, count + 1);
1:         }
1:     }
1: }
============================================================================