1:f9451e5: /**
1:f9451e5:  * Licensed to the Apache Software Foundation (ASF) under one or more
1:f9451e5:  * contributor license agreements.  See the NOTICE file distributed with
1:f9451e5:  * this work for additional information regarding copyright ownership.
1:f9451e5:  * The ASF licenses this file to You under the Apache License, Version 2.0
1:f9451e5:  * (the "License"); you may not use this file except in compliance with
1:f9451e5:  * the License.  You may obtain a copy of the License at
1:f9451e5:  *
1:f9451e5:  *      http://www.apache.org/licenses/LICENSE-2.0
1:f9451e5:  *
1:f9451e5:  * Unless required by applicable law or agreed to in writing, software
1:f9451e5:  * distributed under the License is distributed on an "AS IS" BASIS,
1:f9451e5:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:f9451e5:  * See the License for the specific language governing permissions and
1:f9451e5:  * limitations under the License.
1:f9451e5:  */
1:f9451e5: package org.apache.activemq.shiro.subject;
3:f9451e5: 
1:9ef4259: import java.security.Principal;
1:9ef4259: import java.util.Set;
1:9ef4259: import java.util.concurrent.ConcurrentMap;
1:9ef4259: 
1:f9451e5: import org.apache.activemq.command.ActiveMQDestination;
1:f9451e5: import org.apache.activemq.security.SecurityContext;
1:f9451e5: import org.apache.shiro.subject.Subject;
1:f9451e5: 
1:f9451e5: /**
1:f9451e5:  * ActiveMQ {@code SecurityContext} implementation that retains a Shiro {@code Subject} instance for use during
1:f9451e5:  * security checks and other security-related operations.
1:f9451e5:  *
1:f9451e5:  * @since 5.10.0
1:f9451e5:  */
1:f9451e5: public class SubjectSecurityContext extends SecurityContext {
1:f9451e5: 
1:f9451e5:     private final Subject subject;
1:f9451e5: 
1:f9451e5:     public SubjectSecurityContext(SubjectConnectionReference conn) {
1:f9451e5:         //The username might not be available at the time this object is instantiated (the Subject might be
1:f9451e5:         //anonymous).  Instead we override the getUserName() method below and that will always delegate to the
1:f9451e5:         //Subject to return the most accurate/freshest username available.
1:f9451e5:         super(null);
1:f9451e5:         this.subject = conn.getSubject();
2:f9451e5:     }
1:f9451e5: 
1:f9451e5:     public Subject getSubject() {
1:f9451e5:         return subject;
1:f9451e5:     }
1:f9451e5: 
1:f9451e5:     private static String getUsername(Subject subject) {
1:f9451e5:         if (subject != null) {
1:f9451e5:             Object principal = subject.getPrincipal();
1:f9451e5:             if (principal != null) {
1:f9451e5:                 return String.valueOf(principal);
1:f9451e5:             }
1:f9451e5:         }
1:f9451e5:         return null;
1:f9451e5:     }
1:f9451e5: 
2:f9451e5:     @Override
1:f9451e5:     public String getUserName() {
1:f9451e5:         return getUsername(this.subject);
1:f9451e5:     }
1:f9451e5: 
1:f9451e5:     private static UnsupportedOperationException notAllowed(String methodName) {
1:f9451e5:         String msg = "Do not invoke the '" + methodName + "' method or use a broker filter that invokes it.  Use one " +
1:f9451e5:                 "of the Shiro-based security filters instead.";
1:f9451e5:         return new UnsupportedOperationException(msg);
1:f9451e5:     }
1:f9451e5: 
1:f9451e5:     @Override
1:f9451e5:     public boolean isInOneOf(Set<?> allowedPrincipals) {
1:f9451e5:         throw notAllowed("isInOneOf");
1:f9451e5:     }
1:f9451e5: 
1:f9451e5:     @Override
1:9ef4259:     public ConcurrentMap<ActiveMQDestination, ActiveMQDestination> getAuthorizedWriteDests() {
1:f9451e5:         throw notAllowed("getAuthorizedWriteDests");
1:f9451e5:     }
1:f9451e5: 
1:f9451e5:     @Override
1:f9451e5:     public Set<Principal> getPrincipals() {
1:f9451e5:         throw notAllowed("getPrincipals");
1:f9451e5:     }
1:f9451e5: }
============================================================================
author:Dejan Bosanac
-------------------------------------------------------------------------------
commit:5f8a3df
/////////////////////////////////////////////////////////////////////////
author:Timothy Bish
-------------------------------------------------------------------------------
commit:9ef4259
/////////////////////////////////////////////////////////////////////////
1: import java.security.Principal;
1: import java.util.Set;
1: import java.util.concurrent.ConcurrentMap;
1: 
/////////////////////////////////////////////////////////////////////////
0:     public ConcurrentMap<ActiveMQDestination, ActiveMQDestination> getAuthorizedReadDests() {
1:     public ConcurrentMap<ActiveMQDestination, ActiveMQDestination> getAuthorizedWriteDests() {
author:Les Hazlewood
-------------------------------------------------------------------------------
commit:f9451e5
/////////////////////////////////////////////////////////////////////////
1: /**
1:  * Licensed to the Apache Software Foundation (ASF) under one or more
1:  * contributor license agreements.  See the NOTICE file distributed with
1:  * this work for additional information regarding copyright ownership.
1:  * The ASF licenses this file to You under the Apache License, Version 2.0
1:  * (the "License"); you may not use this file except in compliance with
1:  * the License.  You may obtain a copy of the License at
1:  *
1:  *      http://www.apache.org/licenses/LICENSE-2.0
1:  *
1:  * Unless required by applicable law or agreed to in writing, software
1:  * distributed under the License is distributed on an "AS IS" BASIS,
1:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:  * See the License for the specific language governing permissions and
1:  * limitations under the License.
1:  */
1: package org.apache.activemq.shiro.subject;
1: 
1: import org.apache.activemq.command.ActiveMQDestination;
1: import org.apache.activemq.security.SecurityContext;
1: import org.apache.shiro.subject.Subject;
1: 
0: import java.security.Principal;
0: import java.util.Set;
0: import java.util.concurrent.ConcurrentHashMap;
1: 
1: /**
1:  * ActiveMQ {@code SecurityContext} implementation that retains a Shiro {@code Subject} instance for use during
1:  * security checks and other security-related operations.
1:  *
1:  * @since 5.10.0
1:  */
1: public class SubjectSecurityContext extends SecurityContext {
1: 
1:     private final Subject subject;
1: 
1:     public SubjectSecurityContext(SubjectConnectionReference conn) {
1:         //The username might not be available at the time this object is instantiated (the Subject might be
1:         //anonymous).  Instead we override the getUserName() method below and that will always delegate to the
1:         //Subject to return the most accurate/freshest username available.
1:         super(null);
1:         this.subject = conn.getSubject();
1:     }
1: 
1:     public Subject getSubject() {
1:         return subject;
1:     }
1: 
1:     private static String getUsername(Subject subject) {
1:         if (subject != null) {
1:             Object principal = subject.getPrincipal();
1:             if (principal != null) {
1:                 return String.valueOf(principal);
1:             }
1:         }
1:         return null;
1:     }
1: 
1:     @Override
1:     public String getUserName() {
1:         return getUsername(this.subject);
1:     }
1: 
1:     private static UnsupportedOperationException notAllowed(String methodName) {
1:         String msg = "Do not invoke the '" + methodName + "' method or use a broker filter that invokes it.  Use one " +
1:                 "of the Shiro-based security filters instead.";
1:         return new UnsupportedOperationException(msg);
1:     }
1: 
1:     @Override
1:     public boolean isInOneOf(Set<?> allowedPrincipals) {
1:         throw notAllowed("isInOneOf");
1:     }
1: 
1:     @Override
0:     public ConcurrentHashMap<ActiveMQDestination, ActiveMQDestination> getAuthorizedReadDests() {
0:         throw notAllowed("getAuthorizedReadDests");
1:     }
1: 
1:     @Override
0:     public ConcurrentHashMap<ActiveMQDestination, ActiveMQDestination> getAuthorizedWriteDests() {
1:         throw notAllowed("getAuthorizedWriteDests");
1:     }
1: 
1:     @Override
1:     public Set<Principal> getPrincipals() {
1:         throw notAllowed("getPrincipals");
1:     }
1: }
============================================================================