1:9e7fae0: /**
1:9e7fae0:  * Licensed to the Apache Software Foundation (ASF) under one or more
1:9e7fae0:  * contributor license agreements.  See the NOTICE file distributed with
1:9e7fae0:  * this work for additional information regarding copyright ownership.
1:9e7fae0:  * The ASF licenses this file to You under the Apache License, Version 2.0
1:9e7fae0:  * (the "License"); you may not use this file except in compliance with
1:9e7fae0:  * the License.  You may obtain a copy of the License at
1:9e7fae0:  *
1:9e7fae0:  *      http://www.apache.org/licenses/LICENSE-2.0
1:9e7fae0:  *
1:9e7fae0:  * Unless required by applicable law or agreed to in writing, software
1:9e7fae0:  * distributed under the License is distributed on an "AS IS" BASIS,
1:9e7fae0:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:9e7fae0:  * See the License for the specific language governing permissions and
1:9e7fae0:  * limitations under the License.
1:9e7fae0:  */
1:9e7fae0: package org.apache.activemq.plugin.util;
1:9e7fae0: 
1:9e7fae0: import java.util.Set;
1:9e7fae0: 
1:9e7fae0: import org.apache.activemq.broker.region.Destination;
1:9e7fae0: import org.apache.activemq.broker.region.DestinationFilter;
1:9e7fae0: import org.apache.activemq.broker.region.Queue;
1:9e7fae0: import org.apache.activemq.broker.region.RegionBroker;
1:9e7fae0: import org.apache.activemq.broker.region.Topic;
1:9e7fae0: import org.apache.activemq.broker.region.policy.PolicyEntry;
1:9e7fae0: import org.apache.activemq.broker.region.policy.PolicyMap;
1:9e7fae0: import org.apache.activemq.plugin.AbstractRuntimeConfigurationBroker;
1:9e7fae0: 
1:9e7fae0: 
1:9e7fae0: public class PolicyEntryUtil {
1:9e7fae0: 
1:9e7fae0: 
1:9e7fae0:     /**
1:9e7fae0:      * Find a matching PolicyEntry by looking up the Set of entries from the map and
1:9e7fae0:      * then comparing the destination to find the exact match.  This lets us be able to
1:9e7fae0:      * find the correct policy entry to update even though there might be multiple that
1:9e7fae0:      * are returned from the get method of the PolicyMap.
1:9e7fae0:      *
1:9e7fae0:      * @param runtimeBroker
1:9e7fae0:      * @param entry
1:9e7fae0:      * @return
1:9e7fae0:      */
1:9e7fae0:     public static PolicyEntry findEntryByDestination(AbstractRuntimeConfigurationBroker runtimeBroker,
1:9e7fae0:             PolicyEntry entry) {
1:9e7fae0: 
1:9e7fae0:         PolicyMap existingMap = runtimeBroker.getBrokerService().getDestinationPolicy();
1:9e7fae0:         @SuppressWarnings("unchecked")
1:9e7fae0:         Set<PolicyEntry> existingEntries = existingMap.get(entry.getDestination());
1:9e7fae0: 
1:9e7fae0:         //First just look up by the destination type to see if anything matches
1:9e7fae0:         PolicyEntry existingEntry = null;
1:9e7fae0:         for (PolicyEntry ee: existingEntries) {
1:9e7fae0:             if (ee.getDestination().equals(entry.getDestination())) {
1:9e7fae0:                 existingEntry = ee;
1:9e7fae0:                 break;
1:9e7fae0:             }
1:9e7fae0:         }
1:9e7fae0:         return existingEntry;
1:9e7fae0:     }
1:9e7fae0: 
1:9e7fae0:     /**
1:9e7fae0:      * Utility to properly apply an updated policy entry to all existing destinations that
1:9e7fae0:      * match this entry.  The destination will only be updated if the policy is the exact
1:9e7fae0:      * policy (most specific) that matches the destination.
1:9e7fae0:      *
1:9e7fae0:      * @param runtimeBroker
1:9e7fae0:      * @param updatedEntry
1:9e7fae0:      */
1:a253ad3:     public static void applyRetrospectively(AbstractRuntimeConfigurationBroker runtimeBroker,
1:a253ad3:             PolicyEntry updatedEntry) {
1:a253ad3:         PolicyEntryUtil.applyRetrospectively(runtimeBroker, updatedEntry, null);
1:a253ad3:     }
1:a253ad3: 
1:a253ad3:     /**
1:a253ad3:      *
1:a253ad3:      * Utility to properly apply an updated policy entry to all existing destinations that
1:a253ad3:      * match this entry.  The destination will only be updated if the policy is the exact
1:a253ad3:      * policy (most specific) that matches the destination.
1:a253ad3:      *
1:a253ad3:      * The includedProperties List is optional and is used to specify a list of properties
1:a253ad3:      * to apply retrospectively to the matching destinations. This allows only certain properties
1:a253ad3:      * to be reapplied.  If the list is null then all properties will be applied.
1:a253ad3:      *
1:a253ad3:      * @param runtimeBroker
1:a253ad3:      * @param updatedEntry
1:a253ad3:      * @param includedProperties
1:a253ad3:      */
1:a253ad3:     public static void applyRetrospectively(AbstractRuntimeConfigurationBroker runtimeBroker,
1:a253ad3:             PolicyEntry updatedEntry, Set<String> includedProperties) {
1:9e7fae0:         RegionBroker regionBroker = (RegionBroker) runtimeBroker.getBrokerService().getRegionBroker();
1:9e7fae0:         for (Destination destination : regionBroker.getDestinations(updatedEntry.getDestination())) {
1:9e7fae0:             //Look up the policy that applies to the destination
1:9e7fae0:             PolicyEntry specificyPolicy = regionBroker.getDestinationPolicy().getEntryFor(
1:9e7fae0:                     destination.getActiveMQDestination());
1:9e7fae0: 
1:9e7fae0:             //only update the destination if it matches the specific policy being updated
1:9e7fae0:             //currently just an identity check which is what we want
1:9e7fae0:             if (updatedEntry.equals(specificyPolicy)){
1:9e7fae0:                 Destination target = destination;
1:a253ad3:                 while (target instanceof DestinationFilter) {
1:a253ad3:                     target = ((DestinationFilter)target).getNext();
1:9e7fae0:                 }
1:a253ad3:                 //If we are providing a list of properties to set then use them
1:a253ad3:                 //to set eligible properties that are in the includedProperties list
1:9e7fae0:                 if (target.getActiveMQDestination().isQueue()) {
1:a253ad3:                     updatedEntry.update((Queue) target, includedProperties);
1:9e7fae0:                 } else if (target.getActiveMQDestination().isTopic()) {
1:a253ad3:                     updatedEntry.update((Topic) target, includedProperties);
1:9e7fae0:                 }
1:9e7fae0:                 runtimeBroker.debug("applied update to:" + target);
1:9e7fae0:             }
1:9e7fae0:         }
1:9e7fae0:     }
1:9e7fae0: }
============================================================================
author:Christopher L. Shannon (cshannon)
-------------------------------------------------------------------------------
commit:fc4c697
/////////////////////////////////////////////////////////////////////////
commit:a253ad3
/////////////////////////////////////////////////////////////////////////
0: import java.util.List;
0: import org.apache.activemq.broker.region.BaseDestination;
/////////////////////////////////////////////////////////////////////////
1:     public static void applyRetrospectively(AbstractRuntimeConfigurationBroker runtimeBroker,
1:             PolicyEntry updatedEntry) {
1:         PolicyEntryUtil.applyRetrospectively(runtimeBroker, updatedEntry, null);
1:     }
1: 
1:     /**
1:      *
1:      * Utility to properly apply an updated policy entry to all existing destinations that
1:      * match this entry.  The destination will only be updated if the policy is the exact
1:      * policy (most specific) that matches the destination.
1:      *
1:      * The includedProperties List is optional and is used to specify a list of properties
1:      * to apply retrospectively to the matching destinations. This allows only certain properties
1:      * to be reapplied.  If the list is null then all properties will be applied.
1:      *
1:      * @param runtimeBroker
1:      * @param updatedEntry
1:      * @param includedProperties
1:      */
1:     public static void applyRetrospectively(AbstractRuntimeConfigurationBroker runtimeBroker,
1:             PolicyEntry updatedEntry, Set<String> includedProperties) {
/////////////////////////////////////////////////////////////////////////
1:                 while (target instanceof DestinationFilter) {
1:                     target = ((DestinationFilter)target).getNext();
1:                 //If we are providing a list of properties to set then use them
1:                 //to set eligible properties that are in the includedProperties list
1:                     updatedEntry.update((Queue) target, includedProperties);
1:                     updatedEntry.update((Topic) target, includedProperties);
commit:9e7fae0
/////////////////////////////////////////////////////////////////////////
1: /**
1:  * Licensed to the Apache Software Foundation (ASF) under one or more
1:  * contributor license agreements.  See the NOTICE file distributed with
1:  * this work for additional information regarding copyright ownership.
1:  * The ASF licenses this file to You under the Apache License, Version 2.0
1:  * (the "License"); you may not use this file except in compliance with
1:  * the License.  You may obtain a copy of the License at
1:  *
1:  *      http://www.apache.org/licenses/LICENSE-2.0
1:  *
1:  * Unless required by applicable law or agreed to in writing, software
1:  * distributed under the License is distributed on an "AS IS" BASIS,
1:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:  * See the License for the specific language governing permissions and
1:  * limitations under the License.
1:  */
1: package org.apache.activemq.plugin.util;
1: 
1: import java.util.Set;
1: 
1: import org.apache.activemq.broker.region.Destination;
1: import org.apache.activemq.broker.region.DestinationFilter;
1: import org.apache.activemq.broker.region.Queue;
1: import org.apache.activemq.broker.region.RegionBroker;
1: import org.apache.activemq.broker.region.Topic;
1: import org.apache.activemq.broker.region.policy.PolicyEntry;
1: import org.apache.activemq.broker.region.policy.PolicyMap;
1: import org.apache.activemq.plugin.AbstractRuntimeConfigurationBroker;
1: 
1: 
1: public class PolicyEntryUtil {
1: 
1: 
1:     /**
1:      * Find a matching PolicyEntry by looking up the Set of entries from the map and
1:      * then comparing the destination to find the exact match.  This lets us be able to
1:      * find the correct policy entry to update even though there might be multiple that
1:      * are returned from the get method of the PolicyMap.
1:      *
1:      * @param runtimeBroker
1:      * @param entry
1:      * @return
1:      */
1:     public static PolicyEntry findEntryByDestination(AbstractRuntimeConfigurationBroker runtimeBroker,
1:             PolicyEntry entry) {
1: 
1:         PolicyMap existingMap = runtimeBroker.getBrokerService().getDestinationPolicy();
1:         @SuppressWarnings("unchecked")
1:         Set<PolicyEntry> existingEntries = existingMap.get(entry.getDestination());
1: 
1:         //First just look up by the destination type to see if anything matches
1:         PolicyEntry existingEntry = null;
1:         for (PolicyEntry ee: existingEntries) {
1:             if (ee.getDestination().equals(entry.getDestination())) {
1:                 existingEntry = ee;
1:                 break;
1:             }
1:         }
1:         return existingEntry;
1:     }
1: 
1:     /**
1:      * Utility to properly apply an updated policy entry to all existing destinations that
1:      * match this entry.  The destination will only be updated if the policy is the exact
1:      * policy (most specific) that matches the destination.
1:      *
1:      * @param runtimeBroker
1:      * @param updatedEntry
1:      */
0:     public static void applyRetrospectively(AbstractRuntimeConfigurationBroker runtimeBroker, PolicyEntry updatedEntry) {
1:         RegionBroker regionBroker = (RegionBroker) runtimeBroker.getBrokerService().getRegionBroker();
1:         for (Destination destination : regionBroker.getDestinations(updatedEntry.getDestination())) {
1:             //Look up the policy that applies to the destination
1:             PolicyEntry specificyPolicy = regionBroker.getDestinationPolicy().getEntryFor(
1:                     destination.getActiveMQDestination());
1: 
1:             //only update the destination if it matches the specific policy being updated
1:             //currently just an identity check which is what we want
1:             if (updatedEntry.equals(specificyPolicy)){
1:                 Destination target = destination;
0:                 if (destination instanceof DestinationFilter) {
0:                     target = ((DestinationFilter)destination).getNext();
1:                 }
1:                 if (target.getActiveMQDestination().isQueue()) {
0:                     updatedEntry.update((Queue) target);
1:                 } else if (target.getActiveMQDestination().isTopic()) {
0:                     updatedEntry.update((Topic) target);
1:                 }
1:                 runtimeBroker.debug("applied update to:" + target);
1:             }
1:         }
1:     }
1: }
============================================================================