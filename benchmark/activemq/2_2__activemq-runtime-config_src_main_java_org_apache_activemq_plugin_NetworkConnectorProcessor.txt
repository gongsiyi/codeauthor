1:bbc039f: /**
1:bbc039f:  * Licensed to the Apache Software Foundation (ASF) under one or more
1:bbc039f:  * contributor license agreements.  See the NOTICE file distributed with
1:bbc039f:  * this work for additional information regarding copyright ownership.
1:bbc039f:  * The ASF licenses this file to You under the Apache License, Version 2.0
1:bbc039f:  * (the "License"); you may not use this file except in compliance with
1:bbc039f:  * the License.  You may obtain a copy of the License at
1:bbc039f:  *
1:bbc039f:  *      http://www.apache.org/licenses/LICENSE-2.0
1:bbc039f:  *
1:bbc039f:  * Unless required by applicable law or agreed to in writing, software
1:bbc039f:  * distributed under the License is distributed on an "AS IS" BASIS,
1:bbc039f:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:bbc039f:  * See the License for the specific language governing permissions and
1:bbc039f:  * limitations under the License.
1:bbc039f:  */
1:bbc039f: package org.apache.activemq.plugin;
2:bbc039f: 
1:bab0887: import java.util.TreeMap;
1:bab0887: 
1:bbc039f: import org.apache.activemq.network.DiscoveryNetworkConnector;
1:bbc039f: import org.apache.activemq.network.NetworkConnector;
1:bbc039f: import org.apache.activemq.schema.core.DtoNetworkConnector;
1:bbc039f: import org.apache.activemq.util.IntrospectionSupport;
1:bbc039f: 
1:bbc039f: public class NetworkConnectorProcessor extends DefaultConfigurationProcessor {
1:bbc039f: 
1:bbc039f:     public NetworkConnectorProcessor(RuntimeConfigurationBroker plugin, Class configurationClass) {
1:bbc039f:         super(plugin, configurationClass);
1:bbc039f:     }
1:bbc039f: 
1:bbc039f:     @Override
1:bbc039f:     public void addNew(Object o) {
1:bbc039f:         DtoNetworkConnector networkConnector = (DtoNetworkConnector) o;
1:bbc039f:         if (networkConnector.getUri() != null) {
1:bbc039f:             try {
1:bbc039f:                 DiscoveryNetworkConnector nc = fromDto(networkConnector, new DiscoveryNetworkConnector());
1:bbc039f:                 plugin.getBrokerService().addNetworkConnector(nc);
1:bab0887:                 plugin.getBrokerService().startNetworkConnector(nc, null);
1:bbc039f:                 plugin.info("started new network connector: " + nc);
1:bbc039f:             } catch (Exception e) {
1:bbc039f:                 plugin.info("Failed to add new networkConnector " + networkConnector, e);
1:bbc039f:             }
1:bbc039f:         }
1:bbc039f:     }
1:bbc039f: 
1:bbc039f:     @Override
1:bbc039f:     public void remove(Object o) {
1:bbc039f:         DtoNetworkConnector toRemove = (DtoNetworkConnector) o;
1:bbc039f:         for (NetworkConnector existingCandidate :
1:bbc039f:                 plugin.getBrokerService().getNetworkConnectors()) {
1:bbc039f:             if (configMatch(toRemove, existingCandidate)) {
1:bbc039f:                 if (plugin.getBrokerService().removeNetworkConnector(existingCandidate)) {
1:bbc039f:                     try {
1:bbc039f:                         existingCandidate.stop();
1:bbc039f:                         plugin.info("stopped and removed networkConnector: " + existingCandidate);
1:bbc039f:                     } catch (Exception e) {
1:bbc039f:                         plugin.info("Failed to stop removed network connector: " + existingCandidate);
1:bbc039f:                     }
1:bbc039f:                 }
1:bbc039f:             }
1:bbc039f:         }
1:bbc039f:     }
1:bbc039f: 
1:bbc039f:     private boolean configMatch(DtoNetworkConnector dto, NetworkConnector candidate) {
1:bbc039f:         TreeMap<String, String> dtoProps = new TreeMap<String, String>();
1:bbc039f:         IntrospectionSupport.getProperties(dto, dtoProps, null);
1:bbc039f: 
1:bbc039f:         TreeMap<String, String> candidateProps = new TreeMap<String, String>();
1:bbc039f:         IntrospectionSupport.getProperties(candidate, candidateProps, null);
1:bbc039f: 
1:bbc039f:         // every dto prop must be present in the candidate
1:bbc039f:         for (String key : dtoProps.keySet()) {
1:bbc039f:             if (!candidateProps.containsKey(key) || !candidateProps.get(key).equals(dtoProps.get(key))) {
1:bbc039f:                 return false;
1:bbc039f:             }
1:bbc039f:         }
1:bbc039f:         return true;
1:bbc039f:     }
1:bbc039f: }
============================================================================
author:Christopher L. Shannon (cshannon)
-------------------------------------------------------------------------------
commit:bab0887
/////////////////////////////////////////////////////////////////////////
1: import java.util.TreeMap;
1: 
/////////////////////////////////////////////////////////////////////////
1:                 plugin.getBrokerService().startNetworkConnector(nc, null);
author:Dejan Bosanac
-------------------------------------------------------------------------------
commit:bbc039f
/////////////////////////////////////////////////////////////////////////
1: /**
1:  * Licensed to the Apache Software Foundation (ASF) under one or more
1:  * contributor license agreements.  See the NOTICE file distributed with
1:  * this work for additional information regarding copyright ownership.
1:  * The ASF licenses this file to You under the Apache License, Version 2.0
1:  * (the "License"); you may not use this file except in compliance with
1:  * the License.  You may obtain a copy of the License at
1:  *
1:  *      http://www.apache.org/licenses/LICENSE-2.0
1:  *
1:  * Unless required by applicable law or agreed to in writing, software
1:  * distributed under the License is distributed on an "AS IS" BASIS,
1:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:  * See the License for the specific language governing permissions and
1:  * limitations under the License.
1:  */
1: package org.apache.activemq.plugin;
1: 
1: import org.apache.activemq.network.DiscoveryNetworkConnector;
1: import org.apache.activemq.network.NetworkConnector;
1: import org.apache.activemq.schema.core.DtoNetworkConnector;
1: import org.apache.activemq.util.IntrospectionSupport;
1: 
0: import java.util.TreeMap;
1: 
1: public class NetworkConnectorProcessor extends DefaultConfigurationProcessor {
1: 
1:     public NetworkConnectorProcessor(RuntimeConfigurationBroker plugin, Class configurationClass) {
1:         super(plugin, configurationClass);
1:     }
1: 
1:     @Override
1:     public void addNew(Object o) {
1:         DtoNetworkConnector networkConnector = (DtoNetworkConnector) o;
1:         if (networkConnector.getUri() != null) {
1:             try {
1:                 DiscoveryNetworkConnector nc = fromDto(networkConnector, new DiscoveryNetworkConnector());
1:                 plugin.getBrokerService().addNetworkConnector(nc);
0:                 nc.start();
1:                 plugin.info("started new network connector: " + nc);
1:             } catch (Exception e) {
1:                 plugin.info("Failed to add new networkConnector " + networkConnector, e);
1:             }
1:         }
1:     }
1: 
1:     @Override
1:     public void remove(Object o) {
1:         DtoNetworkConnector toRemove = (DtoNetworkConnector) o;
1:         for (NetworkConnector existingCandidate :
1:                 plugin.getBrokerService().getNetworkConnectors()) {
1:             if (configMatch(toRemove, existingCandidate)) {
1:                 if (plugin.getBrokerService().removeNetworkConnector(existingCandidate)) {
1:                     try {
1:                         existingCandidate.stop();
1:                         plugin.info("stopped and removed networkConnector: " + existingCandidate);
1:                     } catch (Exception e) {
1:                         plugin.info("Failed to stop removed network connector: " + existingCandidate);
1:                     }
1:                 }
1:             }
1:         }
1:     }
1: 
1:     private boolean configMatch(DtoNetworkConnector dto, NetworkConnector candidate) {
1:         TreeMap<String, String> dtoProps = new TreeMap<String, String>();
1:         IntrospectionSupport.getProperties(dto, dtoProps, null);
1: 
1:         TreeMap<String, String> candidateProps = new TreeMap<String, String>();
1:         IntrospectionSupport.getProperties(candidate, candidateProps, null);
1: 
1:         // every dto prop must be present in the candidate
1:         for (String key : dtoProps.keySet()) {
1:             if (!candidateProps.containsKey(key) || !candidateProps.get(key).equals(dtoProps.get(key))) {
1:                 return false;
1:             }
1:         }
1:         return true;
1:     }
1: }
============================================================================