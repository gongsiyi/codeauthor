1:7cf7fba: /*
1:7cf7fba:  * Licensed to the Apache Software Foundation (ASF) under one or more
1:7cf7fba:  * contributor license agreements.  See the NOTICE file distributed with
1:7cf7fba:  * this work for additional information regarding copyright ownership.
1:7cf7fba:  * The ASF licenses this file to You under the Apache License, Version 2.0
1:7cf7fba:  * (the "License"); you may not use this file except in compliance with
1:7cf7fba:  * the License.  You may obtain a copy of the License at
1:7cf7fba:  *
1:7cf7fba:  *      http://www.apache.org/licenses/LICENSE-2.0
1:7cf7fba:  *
1:7cf7fba:  * Unless required by applicable law or agreed to in writing, software
1:7cf7fba:  * distributed under the License is distributed on an "AS IS" BASIS,
1:7cf7fba:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:7cf7fba:  * See the License for the specific language governing permissions and
1:7cf7fba:  * limitations under the License.
1:7cf7fba:  */
1:7cf7fba: package org.apache.activemq.transport.amqp.interop;
1:7cf7fba: 
1:7cf7fba: import static org.junit.Assert.assertEquals;
1:7cf7fba: import static org.junit.Assert.assertNotNull;
1:7cf7fba: import static org.junit.Assert.assertTrue;
1:7cf7fba: 
1:7cf7fba: import java.util.concurrent.TimeUnit;
1:7cf7fba: 
1:7cf7fba: import org.apache.activemq.broker.BrokerService;
1:7cf7fba: import org.apache.activemq.broker.jmx.QueueViewMBean;
1:7cf7fba: import org.apache.activemq.broker.region.policy.PolicyEntry;
1:7cf7fba: import org.apache.activemq.broker.region.policy.PolicyMap;
1:7cf7fba: import org.apache.activemq.broker.region.policy.VMPendingQueueMessageStoragePolicy;
1:7cf7fba: import org.apache.activemq.broker.region.policy.VMPendingSubscriberMessageStoragePolicy;
1:7cf7fba: import org.apache.activemq.transport.amqp.client.AmqpClient;
1:7cf7fba: import org.apache.activemq.transport.amqp.client.AmqpClientTestSupport;
1:7cf7fba: import org.apache.activemq.transport.amqp.client.AmqpConnection;
1:7cf7fba: import org.apache.activemq.transport.amqp.client.AmqpMessage;
1:7cf7fba: import org.apache.activemq.transport.amqp.client.AmqpReceiver;
1:7cf7fba: import org.apache.activemq.transport.amqp.client.AmqpSender;
1:7cf7fba: import org.apache.activemq.transport.amqp.client.AmqpSession;
1:7cf7fba: import org.apache.activemq.util.Wait;
1:7cf7fba: import org.junit.Test;
1:7cf7fba: 
1:7cf7fba: public class AmqpFlowControlTest extends AmqpClientTestSupport {
1:7cf7fba: 
1:7cf7fba:     @Override
1:7cf7fba:     protected void performAdditionalConfiguration(BrokerService brokerService) throws Exception {
1:7cf7fba:         // Setup a destination policy where it takes only 1 message at a time.
1:7cf7fba:         PolicyMap policyMap = new PolicyMap();
1:7cf7fba:         PolicyEntry policy = new PolicyEntry();
1:7cf7fba:         policy.setMemoryLimit(1);
1:7cf7fba:         policy.setPendingSubscriberPolicy(new VMPendingSubscriberMessageStoragePolicy());
1:7cf7fba:         policy.setPendingQueuePolicy(new VMPendingQueueMessageStoragePolicy());
1:7cf7fba:         policy.setProducerFlowControl(true);
1:7cf7fba:         policyMap.setDefaultEntry(policy);
1:7cf7fba: 
1:7cf7fba:         brokerService.setDestinationPolicy(policyMap);
1:7cf7fba:     }
1:7cf7fba: 
1:7cf7fba:     @Test(timeout = 60000)
1:7cf7fba:     public void testCreditNotGrantedUntilBacklogClears() throws Exception {
1:7cf7fba:         final int MSG_COUNT = 1000;
1:7cf7fba: 
1:7cf7fba:         AmqpClient client = createAmqpClient();
1:7cf7fba:         AmqpConnection connection = trackConnection(client.connect());
1:7cf7fba:         AmqpSession session = connection.createSession();
1:7cf7fba: 
1:7cf7fba:         AmqpReceiver receiver = session.createReceiver("queue://" + getTestName());
1:7cf7fba:         AmqpSender sender = session.createSender("queue://" + getTestName(), true);
1:7cf7fba: 
1:7cf7fba:         for (int i = 1; i <= MSG_COUNT; ++i) {
1:7cf7fba:             AmqpMessage message = new AmqpMessage();
1:7cf7fba:             message.setText("Test-Message: " + i);
1:7cf7fba:             sender.send(message);
1:7cf7fba: 
1:7cf7fba:             if (i % 1000 == 0) {
1:7cf7fba:                 LOG.info("Sent message: {}", i);
1:7cf7fba:             }
1:7cf7fba:         }
1:7cf7fba: 
1:7cf7fba:         // Should only accept one message
1:7cf7fba:         final QueueViewMBean queue = getProxyToQueue(getTestName());
1:7cf7fba:         assertTrue("All messages should arrive", Wait.waitFor(new Wait.Condition() {
1:7cf7fba: 
1:7cf7fba:             @Override
1:7cf7fba:             public boolean isSatisified() throws Exception {
1:7cf7fba:                 return queue.getQueueSize() == 1;
1:7cf7fba:             }
1:7cf7fba:         }));
1:7cf7fba: 
1:7cf7fba:         assertEquals(0, sender.getEndpoint().getRemoteCredit());
1:7cf7fba: 
1:7cf7fba:         receiver.flow(1);
1:7cf7fba:         AmqpMessage received = receiver.receive(5, TimeUnit.SECONDS);
1:7cf7fba:         assertNotNull(received);
1:7cf7fba:         received.accept();
1:7cf7fba: 
1:7cf7fba:         // Should not grant any credit until backlog starts to clear
1:7cf7fba:         assertEquals(0, sender.getEndpoint().getRemoteCredit());
1:7cf7fba: 
1:7cf7fba:         receiver.flow(MSG_COUNT - 1);
1:7cf7fba:         for (int i = 0; i < MSG_COUNT - 1; ++i) {
1:7cf7fba:             received = receiver.receive(5, TimeUnit.SECONDS);
1:7cf7fba:             assertNotNull(received);
1:7cf7fba:             received.accept();
1:7cf7fba:         }
1:7cf7fba: 
1:7cf7fba:         // Should have been granted credit once backlog was cleared.
1:7cf7fba:         assertTrue(sender.getEndpoint().getRemoteCredit() > 0);
1:7cf7fba: 
1:7cf7fba:         sender.close();
1:7cf7fba:         connection.close();
1:7cf7fba:     }
1:7cf7fba: }
============================================================================
author:Timothy Bish
-------------------------------------------------------------------------------
commit:7cf7fba
/////////////////////////////////////////////////////////////////////////
1: /*
1:  * Licensed to the Apache Software Foundation (ASF) under one or more
1:  * contributor license agreements.  See the NOTICE file distributed with
1:  * this work for additional information regarding copyright ownership.
1:  * The ASF licenses this file to You under the Apache License, Version 2.0
1:  * (the "License"); you may not use this file except in compliance with
1:  * the License.  You may obtain a copy of the License at
1:  *
1:  *      http://www.apache.org/licenses/LICENSE-2.0
1:  *
1:  * Unless required by applicable law or agreed to in writing, software
1:  * distributed under the License is distributed on an "AS IS" BASIS,
1:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:  * See the License for the specific language governing permissions and
1:  * limitations under the License.
1:  */
1: package org.apache.activemq.transport.amqp.interop;
1: 
1: import static org.junit.Assert.assertEquals;
1: import static org.junit.Assert.assertNotNull;
1: import static org.junit.Assert.assertTrue;
1: 
1: import java.util.concurrent.TimeUnit;
1: 
1: import org.apache.activemq.broker.BrokerService;
1: import org.apache.activemq.broker.jmx.QueueViewMBean;
1: import org.apache.activemq.broker.region.policy.PolicyEntry;
1: import org.apache.activemq.broker.region.policy.PolicyMap;
1: import org.apache.activemq.broker.region.policy.VMPendingQueueMessageStoragePolicy;
1: import org.apache.activemq.broker.region.policy.VMPendingSubscriberMessageStoragePolicy;
1: import org.apache.activemq.transport.amqp.client.AmqpClient;
1: import org.apache.activemq.transport.amqp.client.AmqpClientTestSupport;
1: import org.apache.activemq.transport.amqp.client.AmqpConnection;
1: import org.apache.activemq.transport.amqp.client.AmqpMessage;
1: import org.apache.activemq.transport.amqp.client.AmqpReceiver;
1: import org.apache.activemq.transport.amqp.client.AmqpSender;
1: import org.apache.activemq.transport.amqp.client.AmqpSession;
1: import org.apache.activemq.util.Wait;
1: import org.junit.Test;
1: 
1: public class AmqpFlowControlTest extends AmqpClientTestSupport {
1: 
1:     @Override
1:     protected void performAdditionalConfiguration(BrokerService brokerService) throws Exception {
1:         // Setup a destination policy where it takes only 1 message at a time.
1:         PolicyMap policyMap = new PolicyMap();
1:         PolicyEntry policy = new PolicyEntry();
1:         policy.setMemoryLimit(1);
1:         policy.setPendingSubscriberPolicy(new VMPendingSubscriberMessageStoragePolicy());
1:         policy.setPendingQueuePolicy(new VMPendingQueueMessageStoragePolicy());
1:         policy.setProducerFlowControl(true);
1:         policyMap.setDefaultEntry(policy);
1: 
1:         brokerService.setDestinationPolicy(policyMap);
1:     }
1: 
1:     @Test(timeout = 60000)
1:     public void testCreditNotGrantedUntilBacklogClears() throws Exception {
1:         final int MSG_COUNT = 1000;
1: 
1:         AmqpClient client = createAmqpClient();
1:         AmqpConnection connection = trackConnection(client.connect());
1:         AmqpSession session = connection.createSession();
1: 
1:         AmqpReceiver receiver = session.createReceiver("queue://" + getTestName());
1:         AmqpSender sender = session.createSender("queue://" + getTestName(), true);
1: 
1:         for (int i = 1; i <= MSG_COUNT; ++i) {
1:             AmqpMessage message = new AmqpMessage();
1:             message.setText("Test-Message: " + i);
1:             sender.send(message);
1: 
1:             if (i % 1000 == 0) {
1:                 LOG.info("Sent message: {}", i);
1:             }
1:         }
1: 
1:         // Should only accept one message
1:         final QueueViewMBean queue = getProxyToQueue(getTestName());
1:         assertTrue("All messages should arrive", Wait.waitFor(new Wait.Condition() {
1: 
1:             @Override
1:             public boolean isSatisified() throws Exception {
1:                 return queue.getQueueSize() == 1;
1:             }
1:         }));
1: 
1:         assertEquals(0, sender.getEndpoint().getRemoteCredit());
1: 
1:         receiver.flow(1);
1:         AmqpMessage received = receiver.receive(5, TimeUnit.SECONDS);
1:         assertNotNull(received);
1:         received.accept();
1: 
1:         // Should not grant any credit until backlog starts to clear
1:         assertEquals(0, sender.getEndpoint().getRemoteCredit());
1: 
1:         receiver.flow(MSG_COUNT - 1);
1:         for (int i = 0; i < MSG_COUNT - 1; ++i) {
1:             received = receiver.receive(5, TimeUnit.SECONDS);
1:             assertNotNull(received);
1:             received.accept();
1:         }
1: 
1:         // Should have been granted credit once backlog was cleared.
1:         assertTrue(sender.getEndpoint().getRemoteCredit() > 0);
1: 
1:         sender.close();
1:         connection.close();
1:     }
1: }
============================================================================