1:456a2ba: /**
1:456a2ba:  * Licensed to the Apache Software Foundation (ASF) under one or more
1:456a2ba:  * contributor license agreements.  See the NOTICE file distributed with
1:456a2ba:  * this work for additional information regarding copyright ownership.
1:456a2ba:  * The ASF licenses this file to You under the Apache License, Version 2.0
1:456a2ba:  * (the "License"); you may not use this file except in compliance with
1:456a2ba:  * the License.  You may obtain a copy of the License at
1:456a2ba:  *
1:456a2ba:  *      http://www.apache.org/licenses/LICENSE-2.0
1:456a2ba:  *
1:456a2ba:  * Unless required by applicable law or agreed to in writing, software
1:456a2ba:  * distributed under the License is distributed on an "AS IS" BASIS,
1:456a2ba:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:456a2ba:  * See the License for the specific language governing permissions and
1:456a2ba:  * limitations under the License.
1:456a2ba:  */
1:1aab71b: package org.apache.activemq.store.kahadb.disk.journal;
9:456a2ba: 
1:456a2ba: import java.io.File;
1:456a2ba: import java.util.concurrent.CountDownLatch;
1:62bdbb0: import java.util.concurrent.Executors;
1:456a2ba: import java.util.concurrent.TimeUnit;
1:456a2ba: 
1:456a2ba: import junit.framework.TestCase;
1:1aab71b: import org.apache.activemq.util.ByteSequence;
1:1aab71b: import org.apache.activemq.util.IOHelper;
1:456a2ba: 
1:456a2ba: public class JournalTest extends TestCase {
1:456a2ba:     protected static final int DEFAULT_MAX_BATCH_SIZE = 1024 * 1024 * 4;
1:456a2ba: 
1:456a2ba:     Journal dataManager;
1:456a2ba:     File dir;
1:cdba931: 
1:456a2ba:     @Override
1:456a2ba:     public void setUp() throws Exception {
1:456a2ba:         dir = new File("target/tests/DataFileAppenderTest");
1:456a2ba:         dir.mkdirs();
1:456a2ba:         dataManager = new Journal();
1:456a2ba:         dataManager.setDirectory(dir);
1:456a2ba:         configure(dataManager);
1:456a2ba:         dataManager.start();
4:456a2ba:     }
1:cdba931: 
1:456a2ba:     protected void configure(Journal dataManager) {
1:456a2ba:     }
1:456a2ba: 
1:456a2ba:     @Override
1:456a2ba:     public void tearDown() throws Exception {
1:456a2ba:         dataManager.close();
1:cdba931:         IOHelper.delete(dir);
1:456a2ba:     }
1:456a2ba: 
1:456a2ba:     public void testBatchWriteCallbackCompleteAfterTimeout() throws Exception {
1:456a2ba:         final int iterations = 10;
1:456a2ba:         final CountDownLatch latch = new CountDownLatch(iterations);
1:456a2ba:         ByteSequence data = new ByteSequence("DATA".getBytes());
1:456a2ba:         for (int i=0; i < iterations; i++) {
1:456a2ba:             dataManager.write(data, new Runnable() {
1:456a2ba:                 public void run() {
1:cdba931:                     latch.countDown();
1:456a2ba:                 }
1:456a2ba:             });
1:456a2ba:         }
1:456a2ba:         // at this point most probably dataManager.getInflightWrites().size() >= 0
1:456a2ba:         // as the Thread created in DataFileAppender.enqueue() may not have caught up.
1:456a2ba:         assertTrue("queued data is written", latch.await(5, TimeUnit.SECONDS));
1:456a2ba:     }
1:456a2ba: 
1:456a2ba:     public void testBatchWriteCallbackCompleteAfterClose() throws Exception {
1:456a2ba:         final int iterations = 10;
1:456a2ba:         final CountDownLatch latch = new CountDownLatch(iterations);
1:456a2ba:         ByteSequence data = new ByteSequence("DATA".getBytes());
1:456a2ba:         for (int i=0; i<iterations; i++) {
1:456a2ba:             dataManager.write(data, new Runnable() {
1:456a2ba:                 public void run() {
1:cdba931:                     latch.countDown();
1:456a2ba:                 }
1:456a2ba:             });
1:456a2ba:         }
1:456a2ba:         dataManager.close();
1:456a2ba:         assertTrue("queued data is written", dataManager.getInflightWrites().isEmpty());
1:456a2ba:         assertEquals("none written", 0, latch.getCount());
1:456a2ba:     }
1:cdba931: 
1:456a2ba:     public void testBatchWriteCompleteAfterClose() throws Exception {
1:456a2ba:         ByteSequence data = new ByteSequence("DATA".getBytes());
1:456a2ba:         final int iterations = 10;
1:456a2ba:         for (int i=0; i<iterations; i++) {
1:456a2ba:             dataManager.write(data, false);
1:456a2ba:         }
1:456a2ba:         dataManager.close();
1:456a2ba:         assertTrue("queued data is written:" + dataManager.getInflightWrites().size(), dataManager.getInflightWrites().isEmpty());
1:456a2ba:     }
1:cdba931: 
1:456a2ba:     public void testBatchWriteToMaxMessageSize() throws Exception {
1:456a2ba:         final int iterations = 4;
1:456a2ba:         final CountDownLatch latch = new CountDownLatch(iterations);
1:456a2ba:         Runnable done = new Runnable() {
1:456a2ba:             public void run() {
1:cdba931:                 latch.countDown();
1:456a2ba:             }
1:456a2ba:         };
1:456a2ba:         int messageSize = DEFAULT_MAX_BATCH_SIZE / iterations;
1:456a2ba:         byte[] message = new byte[messageSize];
1:456a2ba:         ByteSequence data = new ByteSequence(message);
1:cdba931: 
1:456a2ba:         for (int i=0; i< iterations; i++) {
1:456a2ba:             dataManager.write(data, done);
1:456a2ba:         }
1:cdba931: 
1:456a2ba:         // write may take some time
1:456a2ba:         assertTrue("all callbacks complete", latch.await(10, TimeUnit.SECONDS));
1:456a2ba:     }
1:cdba931: 
1:456a2ba:     public void testNoBatchWriteWithSync() throws Exception {
1:456a2ba:         ByteSequence data = new ByteSequence("DATA".getBytes());
1:456a2ba:         final int iterations = 10;
1:456a2ba:         for (int i=0; i<iterations; i++) {
1:456a2ba:             dataManager.write(data, true);
1:456a2ba:             assertTrue("queued data is written", dataManager.getInflightWrites().isEmpty());
1:456a2ba:         }
1:456a2ba:     }
1:456a2ba: }
============================================================================
author:gtully
-------------------------------------------------------------------------------
commit:62bdbb0
/////////////////////////////////////////////////////////////////////////
1: import java.util.concurrent.Executors;
author:Timothy A. Bish
-------------------------------------------------------------------------------
commit:6010bd3
commit:cdba931
/////////////////////////////////////////////////////////////////////////
0: import org.apache.kahadb.util.IOHelper;
1: 
/////////////////////////////////////////////////////////////////////////
1: 
1:         IOHelper.delete(dir);
/////////////////////////////////////////////////////////////////////////
1:                     latch.countDown();
/////////////////////////////////////////////////////////////////////////
1:                     latch.countDown();
/////////////////////////////////////////////////////////////////////////
1: 
/////////////////////////////////////////////////////////////////////////
1: 
1:                 latch.countDown();
1: 
1: 
1: 
author:Hiram R. Chirino
-------------------------------------------------------------------------------
commit:1aab71b
/////////////////////////////////////////////////////////////////////////
1: package org.apache.activemq.store.kahadb.disk.journal;
1: import org.apache.activemq.util.ByteSequence;
1: import org.apache.activemq.util.IOHelper;
commit:715010a
commit:f73b622
/////////////////////////////////////////////////////////////////////////
commit:456a2ba
/////////////////////////////////////////////////////////////////////////
1: /**
1:  * Licensed to the Apache Software Foundation (ASF) under one or more
1:  * contributor license agreements.  See the NOTICE file distributed with
1:  * this work for additional information regarding copyright ownership.
1:  * The ASF licenses this file to You under the Apache License, Version 2.0
1:  * (the "License"); you may not use this file except in compliance with
1:  * the License.  You may obtain a copy of the License at
1:  *
1:  *      http://www.apache.org/licenses/LICENSE-2.0
1:  *
1:  * Unless required by applicable law or agreed to in writing, software
1:  * distributed under the License is distributed on an "AS IS" BASIS,
1:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:  * See the License for the specific language governing permissions and
1:  * limitations under the License.
1:  */
0: package org.apache.kahadb.journal;
1: 
1: import java.io.File;
1: import java.util.concurrent.CountDownLatch;
1: import java.util.concurrent.TimeUnit;
1: 
1: import junit.framework.TestCase;
0: import org.apache.kahadb.journal.Journal;
0: import org.apache.kahadb.util.ByteSequence;
1: 
1: public class JournalTest extends TestCase {
1:     protected static final int DEFAULT_MAX_BATCH_SIZE = 1024 * 1024 * 4;
1: 
1:     Journal dataManager;
1:     File dir;
1:     
1:     @Override
1:     public void setUp() throws Exception {
1:         dir = new File("target/tests/DataFileAppenderTest");
1:         dir.mkdirs();
1:         dataManager = new Journal();
1:         dataManager.setDirectory(dir);
1:         configure(dataManager);
1:         dataManager.start();
1:     }
1:     
1:     protected void configure(Journal dataManager) {
0:         dataManager.setUseNio(false);
1:     }
1: 
1:     @Override
1:     public void tearDown() throws Exception {
1:         dataManager.close();
0:         deleteFilesInDirectory(dir);
0:         dir.delete();
1:     }
1: 
0:     private void deleteFilesInDirectory(File directory) {
0:         File[] files = directory.listFiles();
0:         for (int i=0; i<files.length; i++) {
0:             File f = files[i];
0:             if (f.isDirectory()) {
0:                 deleteFilesInDirectory(f);
1:             }   
0:             f.delete();
1:         }  
1:     }  
1: 
1:     public void testBatchWriteCallbackCompleteAfterTimeout() throws Exception {
1:         final int iterations = 10;
1:         final CountDownLatch latch = new CountDownLatch(iterations);
1:         ByteSequence data = new ByteSequence("DATA".getBytes());
1:         for (int i=0; i < iterations; i++) {
1:             dataManager.write(data, new Runnable() {
1:                 public void run() {
0:                     latch.countDown();                 
1:                 }
1:             });
1:         }
1:         // at this point most probably dataManager.getInflightWrites().size() >= 0
1:         // as the Thread created in DataFileAppender.enqueue() may not have caught up.
1:         assertTrue("queued data is written", latch.await(5, TimeUnit.SECONDS));
1:     }
1: 
1:     public void testBatchWriteCallbackCompleteAfterClose() throws Exception {
1:         final int iterations = 10;
1:         final CountDownLatch latch = new CountDownLatch(iterations);
1:         ByteSequence data = new ByteSequence("DATA".getBytes());
1:         for (int i=0; i<iterations; i++) {
1:             dataManager.write(data, new Runnable() {
1:                 public void run() {
0:                     latch.countDown();                 
1:                 }
1:             });
1:         }
1:         dataManager.close();
1:         assertTrue("queued data is written", dataManager.getInflightWrites().isEmpty());
1:         assertEquals("none written", 0, latch.getCount());
1:     }
1:     
1:     public void testBatchWriteCompleteAfterClose() throws Exception {
1:         ByteSequence data = new ByteSequence("DATA".getBytes());
1:         final int iterations = 10;
1:         for (int i=0; i<iterations; i++) {
1:             dataManager.write(data, false);
1:         }
1:         dataManager.close();
1:         assertTrue("queued data is written:" + dataManager.getInflightWrites().size(), dataManager.getInflightWrites().isEmpty());
1:     }
1:     
1:     public void testBatchWriteToMaxMessageSize() throws Exception {
1:         final int iterations = 4;
1:         final CountDownLatch latch = new CountDownLatch(iterations);
1:         Runnable done = new Runnable() {
1:             public void run() {
0:                 latch.countDown();                 
1:             }
1:         };
1:         int messageSize = DEFAULT_MAX_BATCH_SIZE / iterations;
1:         byte[] message = new byte[messageSize];
1:         ByteSequence data = new ByteSequence(message);
1:         
1:         for (int i=0; i< iterations; i++) {
1:             dataManager.write(data, done);
1:         }
1:         
1:         // write may take some time
1:         assertTrue("all callbacks complete", latch.await(10, TimeUnit.SECONDS));
1:     }
1:     
1:     public void testNoBatchWriteWithSync() throws Exception {
1:         ByteSequence data = new ByteSequence("DATA".getBytes());
1:         final int iterations = 10;
1:         for (int i=0; i<iterations; i++) {
1:             dataManager.write(data, true);
1:             assertTrue("queued data is written", dataManager.getInflightWrites().isEmpty());
1:         }
1:     }
1: }
============================================================================