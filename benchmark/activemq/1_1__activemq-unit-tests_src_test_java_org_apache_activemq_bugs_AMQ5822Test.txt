1:848adc4: /**
1:848adc4:  * Licensed to the Apache Software Foundation (ASF) under one or more
1:848adc4:  * contributor license agreements.  See the NOTICE file distributed with
1:848adc4:  * this work for additional information regarding copyright ownership.
1:848adc4:  * The ASF licenses this file to You under the Apache License, Version 2.0
1:848adc4:  * (the "License"); you may not use this file except in compliance with
1:848adc4:  * the License.  You may obtain a copy of the License at
1:848adc4:  *
1:848adc4:  *      http://www.apache.org/licenses/LICENSE-2.0
1:848adc4:  *
1:848adc4:  * Unless required by applicable law or agreed to in writing, software
1:848adc4:  * distributed under the License is distributed on an "AS IS" BASIS,
1:848adc4:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:848adc4:  * See the License for the specific language governing permissions and
1:848adc4:  * limitations under the License.
1:848adc4:  */
1:848adc4: package org.apache.activemq.bugs;
1:848adc4: 
1:848adc4: import javax.jms.BytesMessage;
1:848adc4: import javax.jms.DeliveryMode;
1:848adc4: import javax.jms.MessageProducer;
1:848adc4: import javax.jms.Queue;
1:848adc4: import javax.jms.Session;
1:848adc4: 
1:848adc4: import org.apache.activemq.ActiveMQConnection;
1:848adc4: import org.apache.activemq.ActiveMQConnectionFactory;
1:848adc4: import org.apache.activemq.broker.BrokerService;
1:848adc4: import org.junit.After;
1:848adc4: import org.junit.Before;
1:848adc4: import org.junit.Test;
1:848adc4: import org.slf4j.Logger;
1:848adc4: import org.slf4j.LoggerFactory;
1:848adc4: 
1:0c72e5d: public class AMQ5822Test {
1:848adc4: 
1:0c72e5d:     private static final Logger LOG = LoggerFactory.getLogger(AMQ5822Test.class);
1:848adc4: 
1:848adc4:     private BrokerService brokerService;
1:848adc4:     private String connectionUri;
1:848adc4: 
1:848adc4:     @Before
1:848adc4:     public void setUp() throws Exception {
1:848adc4:         brokerService = new BrokerService();
1:848adc4:         brokerService.setPersistent(false);
1:848adc4:         brokerService.setUseJmx(false);
1:848adc4:         brokerService.addConnector("nio://0.0.0.0:0?"
1:848adc4:             + "wireFormat.maxInactivityDurationInitalDelay=1000&wireFormat.maxInactivityDuration=300");
1:848adc4:         brokerService.start();
1:848adc4: 
1:848adc4:         connectionUri = brokerService.getTransportConnectorByScheme("nio").getPublishableConnectString();
1:848adc4:     }
1:848adc4: 
1:848adc4:     @After
1:848adc4:     public void tearDown() throws Exception {
1:848adc4:         brokerService.stop();
1:848adc4:         brokerService.waitUntilStopped();
1:848adc4:     }
1:848adc4: 
1:848adc4:     @Test
1:848adc4:     public void testReadCounter() throws Exception {
1:848adc4:         LOG.info("Connecting to: {}", connectionUri);
1:848adc4: 
1:848adc4:         byte[] payload = new byte[50 * 1024 * 1024];
1:848adc4: 
1:848adc4:         ActiveMQConnectionFactory factory = new ActiveMQConnectionFactory(connectionUri + "?useInactivityMonitor=false");
1:848adc4:         final ActiveMQConnection connection = (ActiveMQConnection) factory.createConnection();
1:848adc4:         connection.start();
1:848adc4: 
1:848adc4:         LOG.info("Connected to: {}", connection.getTransport());
1:848adc4: 
1:848adc4:         Session session = connection.createSession(false, Session.AUTO_ACKNOWLEDGE);
1:848adc4:         Queue queue = session.createQueue("test");
1:848adc4:         MessageProducer producer = session.createProducer(queue);
1:848adc4:         BytesMessage message = session.createBytesMessage();
1:848adc4: 
1:848adc4:         message.writeBytes(payload);
1:848adc4: 
1:848adc4:         producer.setDeliveryMode(DeliveryMode.PERSISTENT);
1:848adc4:         producer.send(message);
1:848adc4: 
1:848adc4:         connection.close();
1:848adc4:     }
1:848adc4: }
============================================================================
author:Timothy Bish
-------------------------------------------------------------------------------
commit:0c72e5d
/////////////////////////////////////////////////////////////////////////
1: public class AMQ5822Test {
1:     private static final Logger LOG = LoggerFactory.getLogger(AMQ5822Test.class);
commit:848adc4
/////////////////////////////////////////////////////////////////////////
1: /**
1:  * Licensed to the Apache Software Foundation (ASF) under one or more
1:  * contributor license agreements.  See the NOTICE file distributed with
1:  * this work for additional information regarding copyright ownership.
1:  * The ASF licenses this file to You under the Apache License, Version 2.0
1:  * (the "License"); you may not use this file except in compliance with
1:  * the License.  You may obtain a copy of the License at
1:  *
1:  *      http://www.apache.org/licenses/LICENSE-2.0
1:  *
1:  * Unless required by applicable law or agreed to in writing, software
1:  * distributed under the License is distributed on an "AS IS" BASIS,
1:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:  * See the License for the specific language governing permissions and
1:  * limitations under the License.
1:  */
1: package org.apache.activemq.bugs;
1: 
1: import javax.jms.BytesMessage;
1: import javax.jms.DeliveryMode;
1: import javax.jms.MessageProducer;
1: import javax.jms.Queue;
1: import javax.jms.Session;
1: 
1: import org.apache.activemq.ActiveMQConnection;
1: import org.apache.activemq.ActiveMQConnectionFactory;
1: import org.apache.activemq.broker.BrokerService;
1: import org.junit.After;
1: import org.junit.Before;
1: import org.junit.Test;
1: import org.slf4j.Logger;
1: import org.slf4j.LoggerFactory;
1: 
0: public class AMQ6000Test {
1: 
0:     private static final Logger LOG = LoggerFactory.getLogger(AMQ6000Test.class);
1: 
1:     private BrokerService brokerService;
1:     private String connectionUri;
1: 
1:     @Before
1:     public void setUp() throws Exception {
1:         brokerService = new BrokerService();
1:         brokerService.setPersistent(false);
1:         brokerService.setUseJmx(false);
1:         brokerService.addConnector("nio://0.0.0.0:0?"
1:             + "wireFormat.maxInactivityDurationInitalDelay=1000&wireFormat.maxInactivityDuration=300");
1:         brokerService.start();
1: 
1:         connectionUri = brokerService.getTransportConnectorByScheme("nio").getPublishableConnectString();
1:     }
1: 
1:     @After
1:     public void tearDown() throws Exception {
1:         brokerService.stop();
1:         brokerService.waitUntilStopped();
1:     }
1: 
1:     @Test
1:     public void testReadCounter() throws Exception {
1:         LOG.info("Connecting to: {}", connectionUri);
1: 
1:         byte[] payload = new byte[50 * 1024 * 1024];
1: 
1:         ActiveMQConnectionFactory factory = new ActiveMQConnectionFactory(connectionUri + "?useInactivityMonitor=false");
1:         final ActiveMQConnection connection = (ActiveMQConnection) factory.createConnection();
1:         connection.start();
1: 
1:         LOG.info("Connected to: {}", connection.getTransport());
1: 
1:         Session session = connection.createSession(false, Session.AUTO_ACKNOWLEDGE);
1:         Queue queue = session.createQueue("test");
1:         MessageProducer producer = session.createProducer(queue);
1:         BytesMessage message = session.createBytesMessage();
1: 
1:         message.writeBytes(payload);
1: 
1:         producer.setDeliveryMode(DeliveryMode.PERSISTENT);
1:         producer.send(message);
1: 
1:         connection.close();
1:     }
1: }
============================================================================