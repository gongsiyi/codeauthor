1:24a7626: /**
1:24a7626:  * Licensed to the Apache Software Foundation (ASF) under one or more
1:24a7626:  * contributor license agreements.  See the NOTICE file distributed with
1:24a7626:  * this work for additional information regarding copyright ownership.
1:24a7626:  * The ASF licenses this file to You under the Apache License, Version 2.0
1:24a7626:  * (the "License"); you may not use this file except in compliance with
1:24a7626:  * the License.  You may obtain a copy of the License at
1:24a7626:  *
1:24a7626:  *      http://www.apache.org/licenses/LICENSE-2.0
1:24a7626:  *
1:24a7626:  * Unless required by applicable law or agreed to in writing, software
1:24a7626:  * distributed under the License is distributed on an "AS IS" BASIS,
1:24a7626:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:24a7626:  * See the License for the specific language governing permissions and
1:24a7626:  * limitations under the License.
1:24a7626:  */
1:24a7626: package org.apache.activemq.store.jdbc;
1:24a7626: 
1:24a7626: import java.sql.PreparedStatement;
1:24a7626: import java.sql.ResultSet;
1:24a7626: 
1:24a7626: import org.apache.activemq.broker.BrokerService;
1:24a7626: import org.apache.activemq.command.Message;
1:24a7626: import org.apache.activemq.openwire.OpenWireFormat;
1:24a7626: import org.apache.activemq.store.StoreOrderTest;
1:24a7626: import org.apache.activemq.util.ByteSequence;
1:24a7626: import org.apache.activemq.wireformat.WireFormat;
1:8bf987b: import org.slf4j.Logger;
1:8bf987b: import org.slf4j.LoggerFactory;
1:24a7626: import org.apache.derby.jdbc.EmbeddedDataSource;
1:24a7626: 
1:24a7626: //  https://issues.apache.org/activemq/browse/AMQ-2594
1:24a7626: public class JDBCStoreOrderTest extends StoreOrderTest {
1:24a7626: 
1:8bf987b:     private static final Logger LOG = LoggerFactory.getLogger(JDBCStoreOrderTest.class);
1:24a7626:     
1:24a7626:     @Override
1:24a7626:      protected void dumpMessages() throws Exception {
1:24a7626:         WireFormat wireFormat = new OpenWireFormat();
1:24a7626:         java.sql.Connection conn = ((JDBCPersistenceAdapter) broker.getPersistenceAdapter()).getDataSource().getConnection();
1:24a7626:         PreparedStatement statement = conn.prepareStatement("SELECT ID, MSG FROM ACTIVEMQ_MSGS");    
1:24a7626:         ResultSet result = statement.executeQuery();
1:24a7626:         while(result.next()) {
1:24a7626:             long id = result.getLong(1);
1:24a7626:             Message message = (Message)wireFormat.unmarshal(new ByteSequence(result.getBytes(2)));
1:a6a6a70:             LOG.info("id: " + id + ", message SeqId: " + message.getMessageId().getBrokerSequenceId() + ", MSG: " + message);
2:24a7626:         }
1:24a7626:         statement.close();
1:24a7626:         conn.close();
1:8bf987b:     }
1:24a7626:     
1:24a7626:      @Override
1:24a7626:      protected void setPersistentAdapter(BrokerService brokerService)
1:24a7626:              throws Exception {
1:165959e:         brokerService.setPersistenceAdapter(new JDBCPersistenceAdapter());
1:24a7626:     }
1:24a7626: 
1:24a7626: }
============================================================================
author:gtully
-------------------------------------------------------------------------------
commit:165959e
/////////////////////////////////////////////////////////////////////////
1:         brokerService.setPersistenceAdapter(new JDBCPersistenceAdapter());
author:Timothy A. Bish
-------------------------------------------------------------------------------
commit:ef24cc9
author:Bosanac Dejan
-------------------------------------------------------------------------------
commit:8bf987b
/////////////////////////////////////////////////////////////////////////
1: import org.slf4j.Logger;
1: import org.slf4j.LoggerFactory;
1:     private static final Logger LOG = LoggerFactory.getLogger(JDBCStoreOrderTest.class);
/////////////////////////////////////////////////////////////////////////
1: }
commit:24a7626
/////////////////////////////////////////////////////////////////////////
1: /**
1:  * Licensed to the Apache Software Foundation (ASF) under one or more
1:  * contributor license agreements.  See the NOTICE file distributed with
1:  * this work for additional information regarding copyright ownership.
1:  * The ASF licenses this file to You under the Apache License, Version 2.0
1:  * (the "License"); you may not use this file except in compliance with
1:  * the License.  You may obtain a copy of the License at
1:  *
1:  *      http://www.apache.org/licenses/LICENSE-2.0
1:  *
1:  * Unless required by applicable law or agreed to in writing, software
1:  * distributed under the License is distributed on an "AS IS" BASIS,
1:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:  * See the License for the specific language governing permissions and
1:  * limitations under the License.
1:  */
1: package org.apache.activemq.store.jdbc;
1: 
1: import java.sql.PreparedStatement;
1: import java.sql.ResultSet;
1: 
1: import org.apache.activemq.broker.BrokerService;
1: import org.apache.activemq.command.Message;
1: import org.apache.activemq.openwire.OpenWireFormat;
1: import org.apache.activemq.store.StoreOrderTest;
1: import org.apache.activemq.util.ByteSequence;
1: import org.apache.activemq.wireformat.WireFormat;
0: import org.apache.commons.logging.Log;
0: import org.apache.commons.logging.LogFactory;
1: import org.apache.derby.jdbc.EmbeddedDataSource;
1: 
1: //  https://issues.apache.org/activemq/browse/AMQ-2594
1: public class JDBCStoreOrderTest extends StoreOrderTest {
1: 
0:     private static final Log LOG = LogFactory.getLog(JDBCStoreOrderTest.class);
1:     
1:     @Override
1:      protected void dumpMessages() throws Exception {
1:         WireFormat wireFormat = new OpenWireFormat();
1:         java.sql.Connection conn = ((JDBCPersistenceAdapter) broker.getPersistenceAdapter()).getDataSource().getConnection();
1:         PreparedStatement statement = conn.prepareStatement("SELECT ID, MSG FROM ACTIVEMQ_MSGS");    
1:         ResultSet result = statement.executeQuery();
1:         while(result.next()) {
1:             long id = result.getLong(1);
1:             Message message = (Message)wireFormat.unmarshal(new ByteSequence(result.getBytes(2)));
0:             LOG.error("id: " + id + ", message SeqId: " + message.getMessageId().getBrokerSequenceId() + ", MSG: " + message);
1:         }
1:         statement.close();
1:         conn.close();
1:     }
1:     
1:      @Override
1:      protected void setPersistentAdapter(BrokerService brokerService)
1:              throws Exception {
0:         JDBCPersistenceAdapter jdbc = new JDBCPersistenceAdapter();
0:         EmbeddedDataSource dataSource = new EmbeddedDataSource();
0:         dataSource.setDatabaseName("derbyDb");
0:         dataSource.setCreateDatabase("create");
0:         jdbc.setDataSource(dataSource);
0:         brokerService.setPersistenceAdapter(jdbc);
1:     }
1: 
1: }
author:Gary Tully
-------------------------------------------------------------------------------
commit:a6a6a70
/////////////////////////////////////////////////////////////////////////
1:             LOG.info("id: " + id + ", message SeqId: " + message.getMessageId().getBrokerSequenceId() + ", MSG: " + message);
============================================================================