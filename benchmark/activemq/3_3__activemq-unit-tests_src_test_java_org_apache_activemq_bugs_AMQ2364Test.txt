1:612437c: /**
1:612437c:  * Licensed to the Apache Software Foundation (ASF) under one or more
1:612437c:  * contributor license agreements.  See the NOTICE file distributed with
1:612437c:  * this work for additional information regarding copyright ownership.
1:612437c:  * The ASF licenses this file to You under the Apache License, Version 2.0
1:612437c:  * (the "License"); you may not use this file except in compliance with
1:612437c:  * the License.  You may obtain a copy of the License at
1:612437c:  *
1:612437c:  *      http://www.apache.org/licenses/LICENSE-2.0
1:612437c:  *
1:612437c:  * Unless required by applicable law or agreed to in writing, software
1:612437c:  * distributed under the License is distributed on an "AS IS" BASIS,
1:612437c:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:612437c:  * See the License for the specific language governing permissions and
1:612437c:  * limitations under the License.
1:612437c:  */
1:612437c: package org.apache.activemq.bugs;
1:612437c: //package org.apache.activemq.transport.failover;
2:612437c: 
1:5219fa1: import static org.junit.Assert.assertEquals;
1:5219fa1: 
1:612437c: import java.lang.reflect.Field;
1:612437c: import java.net.URI;
1:612437c: import java.util.Collection;
1:612437c: import java.util.concurrent.ConcurrentHashMap;
1:9ef4259: import java.util.concurrent.ConcurrentMap;
1:612437c: import java.util.concurrent.CountDownLatch;
1:612437c: 
1:612437c: import javax.jms.Destination;
1:612437c: import javax.jms.JMSException;
1:612437c: import javax.jms.Message;
1:612437c: import javax.jms.MessageConsumer;
1:612437c: import javax.jms.MessageListener;
1:612437c: import javax.jms.MessageProducer;
1:612437c: import javax.jms.Session;
1:612437c: 
1:612437c: import org.apache.activemq.ActiveMQConnection;
1:612437c: import org.apache.activemq.ActiveMQConnectionFactory;
1:612437c: import org.apache.activemq.command.ActiveMQQueue;
1:612437c: import org.apache.activemq.command.ConnectionId;
1:612437c: import org.apache.activemq.state.ConnectionState;
1:612437c: import org.apache.activemq.state.ConnectionStateTracker;
1:612437c: import org.apache.activemq.state.TransactionState;
1:612437c: import org.apache.activemq.transport.MutexTransport;
1:612437c: import org.apache.activemq.transport.ResponseCorrelator;
1:612437c: import org.apache.activemq.transport.failover.FailoverTransport;
1:612437c: import org.junit.Test;
1:612437c: 
1:612437c: 
1:612437c: public class AMQ2364Test {
1:612437c: 
1:612437c:     @SuppressWarnings("unchecked")
1:612437c:     @Test
1:612437c:     public void testRollbackLeak() throws Exception {
1:612437c: 
1:612437c:         int messageCount = 1000;
1:612437c:         URI failoverUri = new URI("failover:(vm://localhost)?jms.redeliveryPolicy.maximumRedeliveries=0");
1:612437c: 
1:612437c:         Destination dest = new ActiveMQQueue("Failover.Leak");
1:612437c: 
1:612437c:         ActiveMQConnectionFactory cf = new ActiveMQConnectionFactory(failoverUri);
1:612437c:         ActiveMQConnection connection = (ActiveMQConnection) cf.createConnection();
1:612437c:         connection.start();
1:612437c:         final Session session = connection.createSession(true, Session.SESSION_TRANSACTED);
1:612437c: 
1:612437c:         MessageProducer producer = session.createProducer(dest);
1:612437c: 
1:612437c:         for (int i = 0; i < messageCount; ++i)
1:612437c:             producer.send(session.createTextMessage("Test message #" + i));
1:612437c:         producer.close();
1:612437c:         session.commit();
1:612437c: 
1:612437c:         MessageConsumer consumer = session.createConsumer(dest);
1:612437c: 
1:612437c:         final CountDownLatch latch = new CountDownLatch(messageCount);
1:612437c:         consumer.setMessageListener(new MessageListener() {
1:612437c: 
1:5219fa1:             @Override
1:612437c:             public void onMessage(Message msg) {
1:612437c:                 try {
1:612437c:                     session.rollback();
1:612437c:                 } catch (JMSException e) {
1:612437c:                     e.printStackTrace();
1:612437c:                 } finally {
1:612437c:                     latch.countDown();
1:612437c:                 }
1:612437c:             }
1:612437c:         });
1:612437c: 
1:612437c:         latch.await();
1:612437c:         consumer.close();
1:612437c:         session.close();
1:612437c: 
1:612437c:         ResponseCorrelator respCorr = (ResponseCorrelator) connection.getTransport();
1:612437c:         MutexTransport mutexTrans = (MutexTransport) respCorr.getNext();
1:612437c:         FailoverTransport failoverTrans = (FailoverTransport) mutexTrans.getNext();
1:612437c:         Field stateTrackerField = FailoverTransport.class.getDeclaredField("stateTracker");
1:612437c:         stateTrackerField.setAccessible(true);
1:612437c:         ConnectionStateTracker stateTracker = (ConnectionStateTracker) stateTrackerField.get(failoverTrans);
1:612437c:         Field statesField = ConnectionStateTracker.class.getDeclaredField("connectionStates");
1:612437c:         statesField.setAccessible(true);
1:9ef4259:         ConcurrentMap<ConnectionId, ConnectionState> states =
1:612437c:                 (ConcurrentHashMap<ConnectionId, ConnectionState>) statesField.get(stateTracker);
1:612437c: 
1:612437c:         ConnectionState state = states.get(connection.getConnectionInfo().getConnectionId());
1:612437c: 
1:612437c:         Collection<TransactionState> transactionStates = state.getTransactionStates();
1:612437c: 
1:612437c:         connection.stop();
1:612437c:         connection.close();
1:612437c: 
1:5219fa1:         assertEquals("Transaction states not cleaned up", 0,transactionStates.size());
1:612437c:     }
1:612437c: }
============================================================================
author:Timothy Bish
-------------------------------------------------------------------------------
commit:9ef4259
/////////////////////////////////////////////////////////////////////////
1: import java.util.concurrent.ConcurrentMap;
/////////////////////////////////////////////////////////////////////////
1:         ConcurrentMap<ConnectionId, ConnectionState> states =
author:Timothy A. Bish
-------------------------------------------------------------------------------
commit:5219fa1
/////////////////////////////////////////////////////////////////////////
1: import static org.junit.Assert.assertEquals;
1: 
/////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////
1:             @Override
/////////////////////////////////////////////////////////////////////////
1:         assertEquals("Transaction states not cleaned up", 0,transactionStates.size());
commit:ef24cc9
author:Robert Davies
-------------------------------------------------------------------------------
commit:612437c
/////////////////////////////////////////////////////////////////////////
1: /**
1:  * Licensed to the Apache Software Foundation (ASF) under one or more
1:  * contributor license agreements.  See the NOTICE file distributed with
1:  * this work for additional information regarding copyright ownership.
1:  * The ASF licenses this file to You under the Apache License, Version 2.0
1:  * (the "License"); you may not use this file except in compliance with
1:  * the License.  You may obtain a copy of the License at
1:  *
1:  *      http://www.apache.org/licenses/LICENSE-2.0
1:  *
1:  * Unless required by applicable law or agreed to in writing, software
1:  * distributed under the License is distributed on an "AS IS" BASIS,
1:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:  * See the License for the specific language governing permissions and
1:  * limitations under the License.
1:  */
1: package org.apache.activemq.bugs;
1: //package org.apache.activemq.transport.failover;
1: 
1: import java.lang.reflect.Field;
1: import java.net.URI;
1: import java.util.Collection;
1: import java.util.concurrent.ConcurrentHashMap;
1: import java.util.concurrent.CountDownLatch;
1: 
1: import javax.jms.Destination;
1: import javax.jms.JMSException;
1: import javax.jms.Message;
1: import javax.jms.MessageConsumer;
1: import javax.jms.MessageListener;
1: import javax.jms.MessageProducer;
1: import javax.jms.Session;
1: 
0: import junit.framework.Assert;
1: 
1: import org.apache.activemq.ActiveMQConnection;
1: import org.apache.activemq.ActiveMQConnectionFactory;
1: import org.apache.activemq.command.ActiveMQQueue;
1: import org.apache.activemq.command.ConnectionId;
1: import org.apache.activemq.state.ConnectionState;
1: import org.apache.activemq.state.ConnectionStateTracker;
1: import org.apache.activemq.state.TransactionState;
1: import org.apache.activemq.transport.MutexTransport;
1: import org.apache.activemq.transport.ResponseCorrelator;
1: import org.apache.activemq.transport.failover.FailoverTransport;
1: import org.junit.Test;
1: 
1: 
1: public class AMQ2364Test {
1: 
1:     @SuppressWarnings("unchecked")
1:     @Test
1:     public void testRollbackLeak() throws Exception {
1: 
1:         int messageCount = 1000;
1:         URI failoverUri = new URI("failover:(vm://localhost)?jms.redeliveryPolicy.maximumRedeliveries=0");
1: 
1:         Destination dest = new ActiveMQQueue("Failover.Leak");
1: 
1:         ActiveMQConnectionFactory cf = new ActiveMQConnectionFactory(failoverUri);
1:         ActiveMQConnection connection = (ActiveMQConnection) cf.createConnection();
1:         connection.start();
1:         final Session session = connection.createSession(true, Session.SESSION_TRANSACTED);
1: 
1:         MessageProducer producer = session.createProducer(dest);
1: 
1:         for (int i = 0; i < messageCount; ++i)
1:             producer.send(session.createTextMessage("Test message #" + i));
1:         producer.close();
1:         session.commit();
1: 
1:         MessageConsumer consumer = session.createConsumer(dest);
1: 
1:         final CountDownLatch latch = new CountDownLatch(messageCount);
1:         consumer.setMessageListener(new MessageListener() {
1: 
1:             public void onMessage(Message msg) {
1:                 try {
1:                     session.rollback();
1:                 } catch (JMSException e) {
1:                     e.printStackTrace();
1:                 } finally {
1:                     latch.countDown();
1:                 }
1:             }
1:         });
1: 
1:         latch.await();
1:         consumer.close();
1:         session.close();
1: 
1:         ResponseCorrelator respCorr = (ResponseCorrelator) connection.getTransport();
1:         MutexTransport mutexTrans = (MutexTransport) respCorr.getNext();
1:         FailoverTransport failoverTrans = (FailoverTransport) mutexTrans.getNext();
1:         Field stateTrackerField = FailoverTransport.class.getDeclaredField("stateTracker");
1:         stateTrackerField.setAccessible(true);
1:         ConnectionStateTracker stateTracker = (ConnectionStateTracker) stateTrackerField.get(failoverTrans);
1:         Field statesField = ConnectionStateTracker.class.getDeclaredField("connectionStates");
1:         statesField.setAccessible(true);
0:         ConcurrentHashMap<ConnectionId, ConnectionState> states =
1:                 (ConcurrentHashMap<ConnectionId, ConnectionState>) statesField.get(stateTracker);
1: 
1:         ConnectionState state = states.get(connection.getConnectionInfo().getConnectionId());
1: 
1:         Collection<TransactionState> transactionStates = state.getTransactionStates();
1: 
1:         connection.stop();
1:         connection.close();
1: 
0:         Assert.assertEquals("Transaction states not cleaned up", 0,transactionStates.size());
1:     }
1: }
============================================================================