1:d29ca2a: /**
1:57b4941:  * Licensed to the Apache Software Foundation (ASF) under one or more
1:57b4941:  * contributor license agreements.  See the NOTICE file distributed with
1:57b4941:  * this work for additional information regarding copyright ownership.
1:57b4941:  * The ASF licenses this file to You under the Apache License, Version 2.0
1:57b4941:  * (the "License"); you may not use this file except in compliance with
1:57b4941:  * the License.  You may obtain a copy of the License at
3:d29ca2a:  *
1:230a86c:  *      http://www.apache.org/licenses/LICENSE-2.0
1:d29ca2a:  *
1:d29ca2a:  * Unless required by applicable law or agreed to in writing, software
1:d29ca2a:  * distributed under the License is distributed on an "AS IS" BASIS,
1:d29ca2a:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:d29ca2a:  * See the License for the specific language governing permissions and
1:d29ca2a:  * limitations under the License.
1:d29ca2a:  */
1:d29ca2a: package org.apache.activemq.transport.fanout;
9:d29ca2a: 
1:d29ca2a: import java.io.IOException;
1:d29ca2a: import java.net.URI;
1:d29ca2a: import java.net.URISyntaxException;
1:d29ca2a: import java.util.HashMap;
1:d29ca2a: import java.util.Map;
1:d29ca2a: 
1:d29ca2a: import org.apache.activemq.transport.MutexTransport;
1:d29ca2a: import org.apache.activemq.transport.ResponseCorrelator;
1:d29ca2a: import org.apache.activemq.transport.Transport;
1:d29ca2a: import org.apache.activemq.transport.TransportFactory;
1:d29ca2a: import org.apache.activemq.transport.TransportServer;
1:d29ca2a: import org.apache.activemq.transport.discovery.DiscoveryTransport;
1:9ecc679: import org.apache.activemq.transport.discovery.DiscoveryTransportFactory;
1:d29ca2a: import org.apache.activemq.util.IntrospectionSupport;
1:d29ca2a: import org.apache.activemq.util.URISupport;
1:d29ca2a: import org.apache.activemq.util.URISupport.CompositeData;
1:d29ca2a: 
1:d29ca2a: public class FanoutTransportFactory extends TransportFactory {
1:d29ca2a: 
1:d29ca2a:     public Transport doConnect(URI location) throws IOException {
1:d29ca2a:         try {
1:d29ca2a:             Transport transport = createTransport(location);
1:f812e34:             transport = new MutexTransport(transport);
1:d29ca2a:             transport = new ResponseCorrelator(transport);
2:d29ca2a:             return transport;
1:d29ca2a:         } catch (URISyntaxException e) {
1:f812e34:             throw new IOException("Invalid location: " + location);
1:d29ca2a:         }
1:d29ca2a:     }
1:f812e34: 
1:d29ca2a:     public Transport doCompositeConnect(URI location) throws IOException {
1:d29ca2a:         try {
1:d29ca2a:             return createTransport(location);
1:d29ca2a:         } catch (URISyntaxException e) {
1:f812e34:             throw new IOException("Invalid location: " + location);
1:d29ca2a:         }
1:d29ca2a:     }
1:d29ca2a: 
1:d29ca2a:     /**
1:d29ca2a:      * @param location
1:f812e34:      * @return
1:d29ca2a:      * @throws IOException
1:f812e34:      * @throws URISyntaxException
1:d29ca2a:      */
1:d29ca2a:     public Transport createTransport(URI location) throws IOException, URISyntaxException {
1:ecfae00:         CompositeData compositeData = URISupport.parseComposite(location);
1:4f32c6b:         Map<String, String> parameters = compositeData.getParameters();
1:9ecc679:         FanoutTransport fanoutTransport = createTransport(parameters);        
1:330c9a8:         DiscoveryTransport discoveryTransport = DiscoveryTransportFactory.createTransport(fanoutTransport, compositeData, parameters);
1:9ecc679:         return discoveryTransport;
1:d29ca2a:     }
1:f812e34: 
1:9ecc679:     public FanoutTransport createTransport(Map<String,String> parameters) throws IOException {
1:d29ca2a:         FanoutTransport transport = new FanoutTransport();
1:d29ca2a:         IntrospectionSupport.setProperties(transport, parameters);
1:d29ca2a:         return transport;
1:d29ca2a:     }
1:f812e34: 
1:5d99c99:     public TransportServer doBind(URI location) throws IOException {
1:f812e34:         throw new IOException("Invalid server URI: " + location);
1:d29ca2a:     }
1:f812e34: 
1:d29ca2a: }
============================================================================
author:Hadrian Zbarcea
-------------------------------------------------------------------------------
commit:d54d046
commit:ecfae00
/////////////////////////////////////////////////////////////////////////
1:         CompositeData compositeData = URISupport.parseComposite(location);
0:         Map<String, String> parameters = new HashMap<String, String>(compositeData.getParameters());
0:         DiscoveryAgent discoveryAgent = DiscoveryAgentFactory.createDiscoveryAgent(compositeData.getComponents()[0]);
author:Hiram R. Chirino
-------------------------------------------------------------------------------
commit:9a8f6e4
commit:5d99c99
/////////////////////////////////////////////////////////////////////////
1:     public TransportServer doBind(URI location) throws IOException {
commit:933eb2f
/////////////////////////////////////////////////////////////////////////
0:         Map<String, String> parameters = new HashMap<String, String>(compositData.getParameters());
commit:f812e34
/////////////////////////////////////////////////////////////////////////
1:             transport = new MutexTransport(transport);
1:             throw new IOException("Invalid location: " + location);
1: 
1:             throw new IOException("Invalid location: " + location);
1:      * @return
1:      * @throws URISyntaxException
1: 
1: 
1: 
/////////////////////////////////////////////////////////////////////////
0:     public TransportServer doBind(String brokerId, URI location) throws IOException {
1:         throw new IOException("Invalid server URI: " + location);
commit:230a86c
/////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////
1:  *      http://www.apache.org/licenses/LICENSE-2.0
commit:57b4941
/////////////////////////////////////////////////////////////////////////
1:  * Licensed to the Apache Software Foundation (ASF) under one or more
1:  * contributor license agreements.  See the NOTICE file distributed with
1:  * this work for additional information regarding copyright ownership.
1:  * The ASF licenses this file to You under the Apache License, Version 2.0
1:  * (the "License"); you may not use this file except in compliance with
1:  * the License.  You may obtain a copy of the License at
commit:48b4869
/////////////////////////////////////////////////////////////////////////
0:  * Copyright 2005-2006 The Apache Software Foundation
commit:d29ca2a
/////////////////////////////////////////////////////////////////////////
1: /**
1:  *
0:  * Copyright 2004 The Apache Software Foundation
1:  *
0:  * Licensed under the Apache License, Version 2.0 (the "License");
0:  * you may not use this file except in compliance with the License.
0:  * You may obtain a copy of the License at
1:  *
0:  * http://www.apache.org/licenses/LICENSE-2.0
1:  *
1:  * Unless required by applicable law or agreed to in writing, software
1:  * distributed under the License is distributed on an "AS IS" BASIS,
1:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:  * See the License for the specific language governing permissions and
1:  * limitations under the License.
1:  */
1: package org.apache.activemq.transport.fanout;
1: 
1: import java.io.IOException;
1: import java.net.URI;
1: import java.net.URISyntaxException;
1: import java.util.HashMap;
1: import java.util.Map;
1: 
1: import org.apache.activemq.transport.MutexTransport;
1: import org.apache.activemq.transport.ResponseCorrelator;
1: import org.apache.activemq.transport.Transport;
1: import org.apache.activemq.transport.TransportFactory;
1: import org.apache.activemq.transport.TransportServer;
0: import org.apache.activemq.transport.discovery.DiscoveryAgent;
0: import org.apache.activemq.transport.discovery.DiscoveryAgentFactory;
1: import org.apache.activemq.transport.discovery.DiscoveryTransport;
1: import org.apache.activemq.util.IntrospectionSupport;
1: import org.apache.activemq.util.URISupport;
1: import org.apache.activemq.util.URISupport.CompositeData;
1: 
1: public class FanoutTransportFactory extends TransportFactory {
1: 
1:     public Transport doConnect(URI location) throws IOException {
1:         try {
1:             Transport transport = createTransport(location);
0:             transport =  new MutexTransport(transport);
1:             transport = new ResponseCorrelator(transport);
1:             return transport;
1:         } catch (URISyntaxException e) {
0:             throw new IOException("Invalid location: "+location);
1:         }
1:     }
1:     
1:     public Transport doCompositeConnect(URI location) throws IOException {
1:         try {
1:             return createTransport(location);
1:         } catch (URISyntaxException e) {
0:             throw new IOException("Invalid location: "+location);
1:         }
1:     }
1: 
1:     /**
1:      * @param location
0:      * @return 
1:      * @throws IOException
0:      * @throws URISyntaxException 
1:      */
1:     public Transport createTransport(URI location) throws IOException, URISyntaxException {
1:         
0:         CompositeData compositData = URISupport.parseComposite(location);
0:         Map parameters = new HashMap(compositData.getParameters());
0:         DiscoveryTransport transport = new DiscoveryTransport(createTransport(parameters));
1:         
0:         DiscoveryAgent discoveryAgent = DiscoveryAgentFactory.createDiscoveryAgent(compositData.getComponents()[0]);
0:         transport.setDiscoveryAgent(discoveryAgent);
1:         
1:         return transport;
1: 
1:     }
1: 
0:     public FanoutTransport createTransport(Map parameters) throws IOException {
1:         FanoutTransport transport = new FanoutTransport();
1:         IntrospectionSupport.setProperties(transport, parameters);
1:         return transport;
1:     }
1: 
0:     public TransportServer doBind(String brokerId,URI location) throws IOException {
0:         throw new IOException("Invalid server URI: "+location);
1:     }
1: 
1: }
author:Bosanac Dejan
-------------------------------------------------------------------------------
commit:330c9a8
/////////////////////////////////////////////////////////////////////////
1:         DiscoveryTransport discoveryTransport = DiscoveryTransportFactory.createTransport(fanoutTransport, compositeData, parameters);
author:Gary Tully
-------------------------------------------------------------------------------
commit:4f32c6b
/////////////////////////////////////////////////////////////////////////
1:         Map<String, String> parameters = compositeData.getParameters();
commit:9ecc679
/////////////////////////////////////////////////////////////////////////
1: import org.apache.activemq.transport.discovery.DiscoveryTransportFactory;
/////////////////////////////////////////////////////////////////////////
1:         FanoutTransport fanoutTransport = createTransport(parameters);        
0:         DiscoveryTransport discoveryTransport = DiscoveryTransportFactory.createTransport(fanoutTransport, compositeData);        
1:         return discoveryTransport;
1:     public FanoutTransport createTransport(Map<String,String> parameters) throws IOException {
============================================================================