1:5ab78c1: /**
1:5ab78c1:  * Licensed to the Apache Software Foundation (ASF) under one or more
1:5ab78c1:  * contributor license agreements.  See the NOTICE file distributed with
1:5ab78c1:  * this work for additional information regarding copyright ownership.
1:5ab78c1:  * The ASF licenses this file to You under the Apache License, Version 2.0
1:5ab78c1:  * (the "License"); you may not use this file except in compliance with
1:5ab78c1:  * the License.  You may obtain a copy of the License at
1:5ab78c1:  *
1:5ab78c1:  *      http://www.apache.org/licenses/LICENSE-2.0
1:5ab78c1:  *
1:5ab78c1:  * Unless required by applicable law or agreed to in writing, software
1:5ab78c1:  * distributed under the License is distributed on an "AS IS" BASIS,
1:5ab78c1:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:5ab78c1:  * See the License for the specific language governing permissions and
1:5ab78c1:  * limitations under the License.
1:5ab78c1:  */
2:5ab78c1: 
1:5ab78c1: package org.apache.activemq.util.oxm;
1:5ab78c1: 
1:5ab78c1: import java.io.Serializable;
1:5ab78c1: import java.io.StringReader;
1:5ab78c1: import java.io.StringWriter;
1:5ab78c1: import javax.jms.JMSException;
1:5ab78c1: import javax.jms.ObjectMessage;
1:5ab78c1: import javax.jms.Session;
1:5ab78c1: import javax.jms.TextMessage;
1:5ab78c1: 
1:5ab78c1: import com.thoughtworks.xstream.XStream;
1:5ab78c1: import com.thoughtworks.xstream.io.HierarchicalStreamDriver;
1:5ab78c1: import com.thoughtworks.xstream.io.HierarchicalStreamReader;
1:5ab78c1: import com.thoughtworks.xstream.io.HierarchicalStreamWriter;
1:5ab78c1: import com.thoughtworks.xstream.io.xml.PrettyPrintWriter;
1:5ab78c1: import com.thoughtworks.xstream.io.xml.XppReader;
1:5ab78c1: 
1:2d88395: import org.xmlpull.mxp1.MXParser;
1:2d88395: 
1:5ab78c1: /**
1:5ab78c1:  * Transforms object messages to text messages and vice versa using
1:5ab78c1:  * {@link XStream}
1:5ab78c1:  * 
1:5ab78c1:  */
1:5ab78c1: public class XStreamMessageTransformer extends AbstractXMLMessageTransformer {
1:5ab78c1: 
1:5ab78c1:     private XStream xStream;
1:5ab78c1:     
1:5ab78c1:     /**
1:5ab78c1:      * Specialized driver to be used with stream readers and writers
1:5ab78c1:      */
1:5ab78c1:     private HierarchicalStreamDriver streamDriver;
1:5ab78c1:     
1:5ab78c1:     // Properties
1:5ab78c1:     // -------------------------------------------------------------------------
1:5ab78c1:     public XStream getXStream() {
1:5ab78c1:         if (xStream == null) {
1:5ab78c1:             xStream = createXStream();
1:5ab78c1:         }
1:5ab78c1:         return xStream;
1:5ab78c1:     }
1:5ab78c1: 
1:5ab78c1:     public void setXStream(XStream xStream) {
1:5ab78c1:         this.xStream = xStream;
1:5ab78c1:     }
1:5ab78c1: 
1:5ab78c1:     public HierarchicalStreamDriver getStreamDriver() {
1:5ab78c1: 		return streamDriver;
1:5ab78c1: 	}
1:5ab78c1: 
1:5ab78c1: 	public void setStreamDriver(HierarchicalStreamDriver streamDriver) {
1:5ab78c1: 		this.streamDriver = streamDriver;
1:5ab78c1: 	}
1:5ab78c1: 	
1:5ab78c1: 	// Implementation methods
1:5ab78c1:     // -------------------------------------------------------------------------
1:5ab78c1:     protected XStream createXStream() {
1:5ab78c1:         return new XStream();
1:5ab78c1:     }	
1:5ab78c1: 	
1:5ab78c1:     /**
1:5ab78c1:      * Marshalls the Object in the {@link ObjectMessage} to a string using XML
1:5ab78c1:      * encoding
1:5ab78c1:      */
1:5ab78c1:     protected String marshall(Session session, ObjectMessage objectMessage) throws JMSException {
1:5ab78c1:         Serializable object = objectMessage.getObject();
1:5ab78c1:         StringWriter buffer = new StringWriter();
1:5ab78c1:         HierarchicalStreamWriter out;
1:5ab78c1:         if (streamDriver != null) {
1:5ab78c1:         	out = streamDriver.createWriter(buffer);
1:5ab78c1:         } else {
1:5ab78c1:         	out = new PrettyPrintWriter(buffer);
1:5ab78c1:         }
1:5ab78c1:         getXStream().marshal(object, out);
1:5ab78c1:         return buffer.toString();
1:5ab78c1:     }
1:5ab78c1: 
1:5ab78c1:     /**
1:5ab78c1:      * Unmarshalls the XML encoded message in the {@link TextMessage} to an
1:5ab78c1:      * Object
1:5ab78c1:      */
1:5ab78c1:     protected Object unmarshall(Session session, TextMessage textMessage) throws JMSException {
1:5ab78c1:         HierarchicalStreamReader in;
1:5ab78c1:         if (streamDriver != null) {
1:5ab78c1:         	in = streamDriver.createReader(new StringReader(textMessage.getText()));
1:5ab78c1:         } else {
1:2d88395:         	in = new XppReader(new StringReader(textMessage.getText()), new MXParser());
1:5ab78c1:         }
1:5ab78c1:         return getXStream().unmarshal(in);
1:5ab78c1:     }
1:5ab78c1: 
1:5ab78c1: }
============================================================================
author:Hiram R. Chirino
-------------------------------------------------------------------------------
commit:ecaae53
author:Claus Ibsen
-------------------------------------------------------------------------------
commit:2d88395
/////////////////////////////////////////////////////////////////////////
1: import org.xmlpull.mxp1.MXParser;
1: 
/////////////////////////////////////////////////////////////////////////
1:         	in = new XppReader(new StringReader(textMessage.getText()), new MXParser());
commit:3b4aadc
/////////////////////////////////////////////////////////////////////////
author:Bosanac Dejan
-------------------------------------------------------------------------------
commit:5ab78c1
/////////////////////////////////////////////////////////////////////////
1: /**
1:  * Licensed to the Apache Software Foundation (ASF) under one or more
1:  * contributor license agreements.  See the NOTICE file distributed with
1:  * this work for additional information regarding copyright ownership.
1:  * The ASF licenses this file to You under the Apache License, Version 2.0
1:  * (the "License"); you may not use this file except in compliance with
1:  * the License.  You may obtain a copy of the License at
1:  *
1:  *      http://www.apache.org/licenses/LICENSE-2.0
1:  *
1:  * Unless required by applicable law or agreed to in writing, software
1:  * distributed under the License is distributed on an "AS IS" BASIS,
1:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:  * See the License for the specific language governing permissions and
1:  * limitations under the License.
1:  */
1: 
1: package org.apache.activemq.util.oxm;
1: 
1: import java.io.Serializable;
1: import java.io.StringReader;
1: import java.io.StringWriter;
1: 
1: import javax.jms.JMSException;
1: import javax.jms.ObjectMessage;
1: import javax.jms.Session;
1: import javax.jms.TextMessage;
1: 
1: import com.thoughtworks.xstream.XStream;
1: import com.thoughtworks.xstream.io.HierarchicalStreamDriver;
1: import com.thoughtworks.xstream.io.HierarchicalStreamReader;
1: import com.thoughtworks.xstream.io.HierarchicalStreamWriter;
1: import com.thoughtworks.xstream.io.xml.PrettyPrintWriter;
1: import com.thoughtworks.xstream.io.xml.XppReader;
1: 
1: /**
1:  * Transforms object messages to text messages and vice versa using
1:  * {@link XStream}
1:  * 
1:  */
1: public class XStreamMessageTransformer extends AbstractXMLMessageTransformer {
1: 
1:     private XStream xStream;
1:     
1:     /**
1:      * Specialized driver to be used with stream readers and writers
1:      */
1:     private HierarchicalStreamDriver streamDriver;
1:     
1:     // Properties
1:     // -------------------------------------------------------------------------
1:     public XStream getXStream() {
1:         if (xStream == null) {
1:             xStream = createXStream();
1:         }
1:         return xStream;
1:     }
1: 
1:     public void setXStream(XStream xStream) {
1:         this.xStream = xStream;
1:     }
1: 
1:     public HierarchicalStreamDriver getStreamDriver() {
1: 		return streamDriver;
1: 	}
1: 
1: 	public void setStreamDriver(HierarchicalStreamDriver streamDriver) {
1: 		this.streamDriver = streamDriver;
1: 	}
1: 	
1: 	// Implementation methods
1:     // -------------------------------------------------------------------------
1:     protected XStream createXStream() {
1:         return new XStream();
1:     }	
1: 	
1:     /**
1:      * Marshalls the Object in the {@link ObjectMessage} to a string using XML
1:      * encoding
1:      */
1:     protected String marshall(Session session, ObjectMessage objectMessage) throws JMSException {
1:         Serializable object = objectMessage.getObject();
1:         StringWriter buffer = new StringWriter();
1:         HierarchicalStreamWriter out;
1:         if (streamDriver != null) {
1:         	out = streamDriver.createWriter(buffer);
1:         } else {
1:         	out = new PrettyPrintWriter(buffer);
1:         }
1:         getXStream().marshal(object, out);
1:         return buffer.toString();
1:     }
1: 
1:     /**
1:      * Unmarshalls the XML encoded message in the {@link TextMessage} to an
1:      * Object
1:      */
1:     protected Object unmarshall(Session session, TextMessage textMessage) throws JMSException {
1:         HierarchicalStreamReader in;
1:         if (streamDriver != null) {
1:         	in = streamDriver.createReader(new StringReader(textMessage.getText()));
1:         } else {
0:         	in = new XppReader(new StringReader(textMessage.getText()));
1:         }
1:         return getXStream().unmarshal(in);
1:     }
1: 
1: }
============================================================================