1:d54e21b: /*
1:6e69319:  * Licensed to the Apache Software Foundation (ASF) under one or more
1:6e69319:  * contributor license agreements.  See the NOTICE file distributed with
1:6e69319:  * this work for additional information regarding copyright ownership.
1:6e69319:  * The ASF licenses this file to You under the Apache License, Version 2.0
1:6e69319:  * (the "License"); you may not use this file except in compliance with
1:6e69319:  * the License.  You may obtain a copy of the License at
1:6e69319:  *
1:6e69319:  *      http://www.apache.org/licenses/LICENSE-2.0
1:6e69319:  *
1:6e69319:  * Unless required by applicable law or agreed to in writing, software
1:6e69319:  * distributed under the License is distributed on an "AS IS" BASIS,
1:6e69319:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:6e69319:  * See the License for the specific language governing permissions and
1:6e69319:  * limitations under the License.
1:6e69319:  */
1:6e69319: package org.apache.activemq.transport.amqp.message;
6:6e69319: 
1:63d62a7: import static org.apache.activemq.transport.amqp.message.AmqpMessageSupport.JMS_AMQP_MESSAGE_FORMAT;
1:63d62a7: import static org.apache.activemq.transport.amqp.message.AmqpMessageSupport.getBinaryFromMessageBody;
1:6e69319: 
1:6e69319: import javax.jms.JMSException;
1:6e69319: import javax.jms.MessageFormatException;
1:6e69319: 
1:63d62a7: import org.apache.activemq.command.ActiveMQBytesMessage;
1:63d62a7: import org.apache.activemq.command.ActiveMQMessage;
1:63d62a7: import org.apache.qpid.proton.amqp.Binary;
1:6e69319: import org.apache.qpid.proton.amqp.UnsignedInteger;
1:05ff52d: import org.apache.qpid.proton.amqp.messaging.Header;
1:6e69319: import org.apache.qpid.proton.message.ProtonJMessage;
1:6e69319: 
1:63d62a7: public class AMQPNativeOutboundTransformer implements OutboundTransformer {
1:6e69319: 
1:6e69319:     @Override
1:63d62a7:     public EncodedMessage transform(ActiveMQMessage message) throws Exception {
1:63d62a7:         if (message == null || !(message instanceof ActiveMQBytesMessage)) {
5:6e69319:             return null;
1:2ec586f:         }
1:2ec586f: 
1:63d62a7:         return transform(this, (ActiveMQBytesMessage) message);
1:2ec586f:     }
1:6e69319: 
1:63d62a7:     static EncodedMessage transform(OutboundTransformer options, ActiveMQBytesMessage message) throws JMSException {
1:9ec6ee4:         final long messageFormat;
1:9ec6ee4:         if (message.propertyExists(JMS_AMQP_MESSAGE_FORMAT)) {
1:9ec6ee4:             try {
1:9ec6ee4:                 messageFormat = message.getLongProperty(JMS_AMQP_MESSAGE_FORMAT);
1:9ec6ee4:             } catch (MessageFormatException e) {
1:9ec6ee4:                 return null;
1:9ec6ee4:             }
1:9ec6ee4:         } else {
1:9ec6ee4:             messageFormat = 0;
8:6e69319:         }
1:2ec586f: 
1:63d62a7:         Binary encodedMessage = getBinaryFromMessageBody(message);
1:63d62a7:         byte encodedData[] = encodedMessage.getArray();
1:63d62a7:         int encodedSize = encodedMessage.getLength();
1:6e69319: 
1:63d62a7:         int count = message.getRedeliveryCounter();
1:63d62a7:         if (count >= 1) {
1:6e69319: 
1:63d62a7:             // decode...
1:63d62a7:             ProtonJMessage amqp = (ProtonJMessage) org.apache.qpid.proton.message.Message.Factory.create();
1:63d62a7:             int offset = 0;
1:63d62a7:             int len = encodedSize;
1:63d62a7:             while (len > 0) {
1:63d62a7:                 final int decoded = amqp.decode(encodedData, offset, len);
1:63d62a7:                 assert decoded > 0 : "Make progress decoding the message";
1:63d62a7:                 offset += decoded;
1:63d62a7:                 len -= decoded;
1:6e69319:             }
1:63d62a7: 
1:63d62a7:             // Update the DeliveryCount header...
1:63d62a7:             // The AMQP delivery-count field only includes prior failed delivery attempts,
1:63d62a7:             // whereas JMSXDeliveryCount includes the first/current delivery attempt. Subtract 1.
1:63d62a7:             if (amqp.getHeader() == null) {
1:63d62a7:                 amqp.setHeader(new Header());
1:63d62a7:             }
1:63d62a7: 
1:63d62a7:             amqp.getHeader().setDeliveryCount(new UnsignedInteger(count));
1:63d62a7: 
1:63d62a7:             // Re-encode...
1:63d62a7:             final AmqpWritableBuffer buffer = new AmqpWritableBuffer();
1:63d62a7:             int written = amqp.encode(buffer);
1:63d62a7: 
1:63d62a7:             encodedData = buffer.getArray();
1:63d62a7:             encodedSize = written;
1:05ff52d:         }
1:05ff52d: 
1:63d62a7:         return new EncodedMessage(messageFormat, encodedData, 0, encodedSize);
1:6e69319:     }
1:6e69319: }
============================================================================
author:Timothy Bish
-------------------------------------------------------------------------------
commit:9ec6ee4
/////////////////////////////////////////////////////////////////////////
1:         final long messageFormat;
1:         if (message.propertyExists(JMS_AMQP_MESSAGE_FORMAT)) {
1:             try {
1:                 messageFormat = message.getLongProperty(JMS_AMQP_MESSAGE_FORMAT);
1:             } catch (MessageFormatException e) {
1:                 return null;
1:             }
1:         } else {
1:             messageFormat = 0;
commit:63d62a7
/////////////////////////////////////////////////////////////////////////
1: import static org.apache.activemq.transport.amqp.message.AmqpMessageSupport.JMS_AMQP_MESSAGE_FORMAT;
1: import static org.apache.activemq.transport.amqp.message.AmqpMessageSupport.getBinaryFromMessageBody;
1: import org.apache.activemq.command.ActiveMQBytesMessage;
1: import org.apache.activemq.command.ActiveMQMessage;
1: import org.apache.qpid.proton.amqp.Binary;
1: public class AMQPNativeOutboundTransformer implements OutboundTransformer {
1:     public EncodedMessage transform(ActiveMQMessage message) throws Exception {
1:         if (message == null || !(message instanceof ActiveMQBytesMessage)) {
1:         return transform(this, (ActiveMQBytesMessage) message);
1:     static EncodedMessage transform(OutboundTransformer options, ActiveMQBytesMessage message) throws JMSException {
0:             messageFormat = message.getLongProperty(JMS_AMQP_MESSAGE_FORMAT);
1:         Binary encodedMessage = getBinaryFromMessageBody(message);
1:         byte encodedData[] = encodedMessage.getArray();
1:         int encodedSize = encodedMessage.getLength();
1:         int count = message.getRedeliveryCounter();
1:         if (count >= 1) {
1:             // decode...
1:             ProtonJMessage amqp = (ProtonJMessage) org.apache.qpid.proton.message.Message.Factory.create();
1:             int offset = 0;
1:             int len = encodedSize;
1:             while (len > 0) {
1:                 final int decoded = amqp.decode(encodedData, offset, len);
1:                 assert decoded > 0 : "Make progress decoding the message";
1:                 offset += decoded;
1:                 len -= decoded;
1: 
1:             // Update the DeliveryCount header...
1:             // The AMQP delivery-count field only includes prior failed delivery attempts,
1:             // whereas JMSXDeliveryCount includes the first/current delivery attempt. Subtract 1.
1:             if (amqp.getHeader() == null) {
1:                 amqp.setHeader(new Header());
1:             }
1: 
1:             amqp.getHeader().setDeliveryCount(new UnsignedInteger(count));
1: 
1:             // Re-encode...
1:             final AmqpWritableBuffer buffer = new AmqpWritableBuffer();
1:             int written = amqp.encode(buffer);
1: 
1:             encodedData = buffer.getArray();
1:             encodedSize = written;
1:         return new EncodedMessage(messageFormat, encodedData, 0, encodedSize);
commit:d54e21b
/////////////////////////////////////////////////////////////////////////
1: /*
/////////////////////////////////////////////////////////////////////////
0:     public AMQPNativeOutboundTransformer(ActiveMQJMSVendor vendor) {
commit:f05ff94
/////////////////////////////////////////////////////////////////////////
0:         if (msg == null || !(msg instanceof BytesMessage)) {
commit:05ff52d
/////////////////////////////////////////////////////////////////////////
1: import org.apache.qpid.proton.amqp.messaging.Header;
/////////////////////////////////////////////////////////////////////////
0:                 if (amqp.getHeader() == null) {
0:                     amqp.setHeader(new Header());
1:                 }
1: 
commit:2ec586f
/////////////////////////////////////////////////////////////////////////
0:         if (msg == null) {
1:         }
0:         if (!(msg instanceof BytesMessage)) {
1:         }
1: 
0:             if (!msg.getBooleanProperty(prefixVendor + "NATIVE")) {
1: 
/////////////////////////////////////////////////////////////////////////
0:             if (count > 1) {
0:                 while (len > 0) {
0:                     assert decoded > 0 : "Make progress decoding the message";
/////////////////////////////////////////////////////////////////////////
0:                 ByteBuffer buffer = ByteBuffer.wrap(new byte[1024 * 4]);
0:                 if (overflow.position() > 0) {
0:                     buffer = ByteBuffer.wrap(new byte[1024 * 4 + overflow.position()]);
/////////////////////////////////////////////////////////////////////////
commit:6e69319
/////////////////////////////////////////////////////////////////////////
0: /**
1:  * Licensed to the Apache Software Foundation (ASF) under one or more
1:  * contributor license agreements.  See the NOTICE file distributed with
1:  * this work for additional information regarding copyright ownership.
1:  * The ASF licenses this file to You under the Apache License, Version 2.0
1:  * (the "License"); you may not use this file except in compliance with
1:  * the License.  You may obtain a copy of the License at
1:  *
1:  *      http://www.apache.org/licenses/LICENSE-2.0
1:  *
1:  * Unless required by applicable law or agreed to in writing, software
1:  * distributed under the License is distributed on an "AS IS" BASIS,
1:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:  * See the License for the specific language governing permissions and
1:  * limitations under the License.
1:  */
1: package org.apache.activemq.transport.amqp.message;
1: 
0: import java.nio.ByteBuffer;
1: 
0: import javax.jms.BytesMessage;
1: import javax.jms.JMSException;
0: import javax.jms.Message;
1: import javax.jms.MessageFormatException;
1: 
1: import org.apache.qpid.proton.amqp.UnsignedInteger;
0: import org.apache.qpid.proton.codec.CompositeWritableBuffer;
0: import org.apache.qpid.proton.codec.DroppingWritableBuffer;
0: import org.apache.qpid.proton.codec.WritableBuffer;
1: import org.apache.qpid.proton.message.ProtonJMessage;
1: 
0: public class AMQPNativeOutboundTransformer extends OutboundTransformer {
1: 
0:     public AMQPNativeOutboundTransformer(JMSVendor vendor) {
0:         super(vendor);
1:     }
1: 
1:     @Override
0:     public EncodedMessage transform(Message msg) throws Exception {
0:         if( msg == null )
1:             return null;
0:         if( !(msg instanceof BytesMessage) )
1:             return null;
0:         try {
0:             if( !msg.getBooleanProperty(prefixVendor + "NATIVE") ) {
1:                 return null;
1:             }
0:         } catch (MessageFormatException e) {
1:             return null;
1:         }
0:         return transform(this, (BytesMessage) msg);
1:     }
1: 
0:     static EncodedMessage transform(OutboundTransformer options, BytesMessage msg) throws JMSException {
0:         long messageFormat;
0:         try {
0:             messageFormat = msg.getLongProperty(options.prefixVendor + "MESSAGE_FORMAT");
0:         } catch (MessageFormatException e) {
1:             return null;
1:         }
0:         byte data[] = new byte[(int) msg.getBodyLength()];
0:         int dataSize = data.length;
0:         msg.readBytes(data);
0:         msg.reset();
1: 
0:         try {
0:             int count = msg.getIntProperty("JMSXDeliveryCount");
0:             if( count > 1 ) {
1: 
0:                 // decode...
0:                 ProtonJMessage amqp = (ProtonJMessage) org.apache.qpid.proton.message.Message.Factory.create();
0:                 int offset = 0;
0:                 int len = data.length;
0:                 while( len > 0 ) {
0:                     final int decoded = amqp.decode(data, offset, len);
0:                     assert decoded > 0: "Make progress decoding the message";
0:                     offset += decoded;
0:                     len -= decoded;
1:                 }
1: 
0:                 // Update the DeliveryCount header...
0:                 // The AMQP delivery-count field only includes prior failed delivery attempts,
0:                 // whereas JMSXDeliveryCount includes the first/current delivery attempt. Subtract 1.
0:                 amqp.getHeader().setDeliveryCount(new UnsignedInteger(count - 1));
1: 
0:                 // Re-encode...
0:                 ByteBuffer buffer = ByteBuffer.wrap(new byte[1024*4]);
0:                 final DroppingWritableBuffer overflow = new DroppingWritableBuffer();
0:                 int c = amqp.encode(new CompositeWritableBuffer(new WritableBuffer.ByteBufferWrapper(buffer), overflow));
0:                 if( overflow.position() > 0 ) {
0:                     buffer = ByteBuffer.wrap(new byte[1024*4+overflow.position()]);
0:                     c = amqp.encode(new WritableBuffer.ByteBufferWrapper(buffer));
1:                 }
0:                 data = buffer.array();
0:                 dataSize = c;
1:             }
0:         } catch (JMSException e) {
1:         }
1: 
0:         return new EncodedMessage(messageFormat, data, 0, dataSize);
1:     }
1: 
1: }
============================================================================