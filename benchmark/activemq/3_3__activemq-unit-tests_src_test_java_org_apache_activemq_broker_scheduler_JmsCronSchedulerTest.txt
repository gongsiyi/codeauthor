1:8280417: /**
1:8280417:  * Licensed to the Apache Software Foundation (ASF) under one or more
1:8280417:  * contributor license agreements.  See the NOTICE file distributed with
1:8280417:  * this work for additional information regarding copyright ownership.
1:8280417:  * The ASF licenses this file to You under the Apache License, Version 2.0
1:8280417:  * (the "License"); you may not use this file except in compliance with
1:8280417:  * the License.  You may obtain a copy of the License at
1:8280417:  *
1:8280417:  *      http://www.apache.org/licenses/LICENSE-2.0
1:8280417:  *
1:8280417:  * Unless required by applicable law or agreed to in writing, software
1:8280417:  * distributed under the License is distributed on an "AS IS" BASIS,
1:8280417:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:8280417:  * See the License for the specific language governing permissions and
1:8280417:  * limitations under the License.
1:8280417:  */
1:8280417: package org.apache.activemq.broker.scheduler;
6:8280417: 
1:433912f: import static org.junit.Assert.assertEquals;
1:433912f: import static org.junit.Assert.assertNotNull;
1:433912f: import static org.junit.Assert.assertNull;
1:433912f: import static org.junit.Assert.assertTrue;
1:433912f: import static org.junit.Assert.fail;
1:433912f: 
1:cbb46ea: import java.util.Date;
1:8280417: import java.util.List;
1:8280417: import java.util.concurrent.CountDownLatch;
1:8280417: import java.util.concurrent.TimeUnit;
1:8280417: import java.util.concurrent.atomic.AtomicInteger;
1:8280417: 
1:8280417: import javax.jms.Connection;
1:cbb46ea: import javax.jms.JMSException;
1:8280417: import javax.jms.Message;
1:8280417: import javax.jms.MessageConsumer;
1:8280417: import javax.jms.MessageListener;
1:8280417: import javax.jms.MessageProducer;
1:8280417: import javax.jms.Session;
1:8280417: import javax.jms.TextMessage;
1:8280417: 
1:8280417: import org.apache.activemq.ScheduledMessage;
1:cbb46ea: import org.junit.Test;
1:8280417: import org.slf4j.Logger;
1:8280417: import org.slf4j.LoggerFactory;
1:cbb46ea: 
1:433912f: public class JmsCronSchedulerTest extends JobSchedulerTestSupport {
1:8280417: 
1:8280417:     private static final Logger LOG = LoggerFactory.getLogger(JmsCronSchedulerTest.class);
1:8280417: 
1:cbb46ea:     @Test
1:8280417:     public void testSimulatenousCron() throws Exception {
1:8280417: 
1:8280417:         final int COUNT = 10;
1:8280417:         final AtomicInteger count = new AtomicInteger();
1:8280417:         Connection connection = createConnection();
1:8280417: 
1:8280417:         Session session = connection.createSession(false, Session.AUTO_ACKNOWLEDGE);
1:8280417: 
1:8280417:         MessageConsumer consumer = session.createConsumer(destination);
1:8280417: 
1:8280417:         final CountDownLatch latch = new CountDownLatch(COUNT);
1:8280417:         consumer.setMessageListener(new MessageListener() {
1:b3c1327:             @Override
1:8280417:             public void onMessage(Message message) {
1:8280417:                 count.incrementAndGet();
1:cbb46ea:                 latch.countDown();
1:cbb46ea:                 assertTrue(message instanceof TextMessage);
1:cbb46ea:                 TextMessage tm = (TextMessage) message;
1:cbb46ea:                 try {
1:cbb46ea:                     LOG.info("Received [{}] count: {} ", tm.getText(), count.get());
1:cbb46ea:                 } catch (JMSException e) {
1:cbb46ea:                     LOG.error("Unexpected exception in onMessage", e);
1:cbb46ea:                     fail("Unexpected exception in onMessage: " + e.getMessage());
1:cbb46ea:                 }
1:cbb46ea:             }
1:8280417:         });
1:cbb46ea: 
1:8280417:         connection.start();
1:8280417:         for (int i = 0; i < COUNT; i++) {
1:315b00f:             MessageProducer producer = session.createProducer(destination);
1:cbb46ea:             TextMessage message = session.createTextMessage("test msg "+ i);
1:315b00f:             message.setStringProperty(ScheduledMessage.AMQ_SCHEDULED_CRON, "* * * * *");
1:315b00f:             producer.send(message);
1:cbb46ea:             LOG.info("Message {} sent at {}", i, new Date().toString());
1:315b00f:             producer.close();
1:5fd307c:             // wait a couple sec so cron start time is different for next message
1:8280417:             Thread.sleep(2000);
6:8280417:         }
1:8280417:         SchedulerBroker sb = (SchedulerBroker) this.broker.getBroker().getAdaptor(SchedulerBroker.class);
1:8280417:         JobScheduler js = sb.getJobScheduler();
1:8280417:         List<Job> list = js.getAllJobs();
1:8280417:         assertEquals(COUNT, list.size());
1:8280417:         latch.await(2, TimeUnit.MINUTES);
1:5fd307c:         // All should messages should have been received by now
1:8280417:         assertEquals(COUNT, count.get());
1:5fd307c: 
1:5fd307c:         connection.close();
1:8280417:     }
1:315b00f: 
1:cbb46ea:     @Test
1:315b00f:     public void testCronScheduleWithTtlSet() throws Exception {
1:315b00f: 
1:315b00f:         Connection connection = createConnection();
1:315b00f:         Session session = connection.createSession(false, Session.AUTO_ACKNOWLEDGE);
1:315b00f:         MessageConsumer consumer = session.createConsumer(destination);
1:315b00f:         connection.start();
1:315b00f: 
1:315b00f:         MessageProducer producer = session.createProducer(destination);
1:315b00f:         producer.setTimeToLive(TimeUnit.MINUTES.toMillis(1));
1:315b00f:         TextMessage message = session.createTextMessage("test msg ");
1:315b00f:         message.setStringProperty(ScheduledMessage.AMQ_SCHEDULED_CRON, "* * * * *");
1:315b00f: 
1:315b00f:         producer.send(message);
1:315b00f:         producer.close();
1:315b00f: 
1:315b00f:         Thread.sleep(TimeUnit.MINUTES.toMillis(2));
1:315b00f: 
1:315b00f:         assertNotNull(consumer.receiveNoWait());
1:315b00f:         assertNull(consumer.receiveNoWait());
1:5fd307c: 
1:5fd307c:         connection.close();
1:315b00f:     }
1:8280417: }
============================================================================
author:Timothy Bish
-------------------------------------------------------------------------------
commit:5fd307c
/////////////////////////////////////////////////////////////////////////
1:             // wait a couple sec so cron start time is different for next message
/////////////////////////////////////////////////////////////////////////
1:         // All should messages should have been received by now
1: 
1:         connection.close();
/////////////////////////////////////////////////////////////////////////
1: 
1:         connection.close();
commit:433912f
/////////////////////////////////////////////////////////////////////////
1: import static org.junit.Assert.assertEquals;
1: import static org.junit.Assert.assertNotNull;
1: import static org.junit.Assert.assertNull;
1: import static org.junit.Assert.assertTrue;
1: import static org.junit.Assert.fail;
1: 
/////////////////////////////////////////////////////////////////////////
1: public class JmsCronSchedulerTest extends JobSchedulerTestSupport {
/////////////////////////////////////////////////////////////////////////
author:Kevin Earls
-------------------------------------------------------------------------------
commit:cbb46ea
/////////////////////////////////////////////////////////////////////////
1: import java.util.Date;
1: import javax.jms.JMSException;
/////////////////////////////////////////////////////////////////////////
0: import org.junit.After;
0: import org.junit.Before;
0: import org.junit.Rule;
1: import org.junit.Test;
0: import org.junit.rules.TestName;
0: import org.junit.runner.RunWith;
0: import org.junit.runners.BlockJUnit4ClassRunner;
0: @RunWith(BlockJUnit4ClassRunner.class)
0:     @Rule
0:     public TestName testName = new TestName();
1: 
1:     @Test
/////////////////////////////////////////////////////////////////////////
1:                 latch.countDown();
1:                 assertTrue(message instanceof TextMessage);
1:                 TextMessage tm = (TextMessage) message;
1:                 try {
1:                     LOG.info("Received [{}] count: {} ", tm.getText(), count.get());
1:                 } catch (JMSException e) {
1:                     LOG.error("Unexpected exception in onMessage", e);
1:                     fail("Unexpected exception in onMessage: " + e.getMessage());
1:                 }
1:             TextMessage message = session.createTextMessage("test msg "+ i);
1:             LOG.info("Message {} sent at {}", i, new Date().toString());
/////////////////////////////////////////////////////////////////////////
1:     @Test
/////////////////////////////////////////////////////////////////////////
0:     @Before
0:     public void setUp() throws Exception {
0:         LOG.info("Starting test {}", testName.getMethodName());
0:     @After
0:     public void tearDown() throws Exception {
0:         super.tearDown();
1:     }
1: 
author:Timothy A. Bish
-------------------------------------------------------------------------------
commit:b3c1327
/////////////////////////////////////////////////////////////////////////
1:             @Override
/////////////////////////////////////////////////////////////////////////
0:         answer.setPersistent(true);
commit:ef24cc9
commit:315b00f
/////////////////////////////////////////////////////////////////////////
0:                 LOG.debug("Received one Message, count is at: " + count.get());
1:             MessageProducer producer = session.createProducer(destination);
0:             TextMessage message = session.createTextMessage("test msg "+i);
1:             message.setStringProperty(ScheduledMessage.AMQ_SCHEDULED_CRON, "* * * * *");
1:             producer.send(message);
1:             producer.close();
0:             //wait a couple sec so cron start time is different for next message
/////////////////////////////////////////////////////////////////////////
1:     public void testCronScheduleWithTtlSet() throws Exception {
1: 
1:         Connection connection = createConnection();
1:         Session session = connection.createSession(false, Session.AUTO_ACKNOWLEDGE);
1:         MessageConsumer consumer = session.createConsumer(destination);
1:         connection.start();
1: 
1:         MessageProducer producer = session.createProducer(destination);
1:         producer.setTimeToLive(TimeUnit.MINUTES.toMillis(1));
1:         TextMessage message = session.createTextMessage("test msg ");
1:         message.setStringProperty(ScheduledMessage.AMQ_SCHEDULED_CRON, "* * * * *");
1: 
1:         producer.send(message);
1:         producer.close();
1: 
1:         Thread.sleep(TimeUnit.MINUTES.toMillis(2));
1: 
1:         assertNotNull(consumer.receiveNoWait());
1:         assertNull(consumer.receiveNoWait());
1:     }
1: 
commit:8280417
/////////////////////////////////////////////////////////////////////////
1: /**
1:  * Licensed to the Apache Software Foundation (ASF) under one or more
1:  * contributor license agreements.  See the NOTICE file distributed with
1:  * this work for additional information regarding copyright ownership.
1:  * The ASF licenses this file to You under the Apache License, Version 2.0
1:  * (the "License"); you may not use this file except in compliance with
1:  * the License.  You may obtain a copy of the License at
1:  *
1:  *      http://www.apache.org/licenses/LICENSE-2.0
1:  *
1:  * Unless required by applicable law or agreed to in writing, software
1:  * distributed under the License is distributed on an "AS IS" BASIS,
1:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:  * See the License for the specific language governing permissions and
1:  * limitations under the License.
1:  */
1: package org.apache.activemq.broker.scheduler;
1: 
0: import java.io.File;
1: import java.util.List;
1: import java.util.concurrent.CountDownLatch;
1: import java.util.concurrent.TimeUnit;
1: import java.util.concurrent.atomic.AtomicInteger;
1: 
1: import javax.jms.Connection;
1: import javax.jms.Message;
1: import javax.jms.MessageConsumer;
1: import javax.jms.MessageListener;
1: import javax.jms.MessageProducer;
1: import javax.jms.Session;
1: import javax.jms.TextMessage;
1: 
0: import org.apache.activemq.EmbeddedBrokerTestSupport;
1: import org.apache.activemq.ScheduledMessage;
0: import org.apache.activemq.broker.BrokerService;
0: import org.apache.activemq.util.IOHelper;
1: import org.slf4j.Logger;
1: import org.slf4j.LoggerFactory;
1: 
0: public class JmsCronSchedulerTest extends EmbeddedBrokerTestSupport {
1: 
1:     private static final Logger LOG = LoggerFactory.getLogger(JmsCronSchedulerTest.class);
1: 
1:     public void testSimulatenousCron() throws Exception {
1: 
1:         final int COUNT = 10;
1:         final AtomicInteger count = new AtomicInteger();
1:         Connection connection = createConnection();
1: 
1:         Session session = connection.createSession(false, Session.AUTO_ACKNOWLEDGE);
1: 
1:         MessageConsumer consumer = session.createConsumer(destination);
1: 
1:         final CountDownLatch latch = new CountDownLatch(COUNT);
1:         consumer.setMessageListener(new MessageListener() {
1:             public void onMessage(Message message) {
0:                 latch.countDown();
1:                 count.incrementAndGet();
0:             	LOG.debug("Received one Message, count is at: " + count.get());
1:             }
1:         });
1: 
1:         connection.start();
1:         for (int i = 0; i < COUNT; i++) {
0: 	        MessageProducer producer = session.createProducer(destination);
0: 	        TextMessage message = session.createTextMessage("test msg "+i);
0: 	        message.setStringProperty(ScheduledMessage.AMQ_SCHEDULED_CRON, "* * * * *");
0: 	        producer.send(message);
0: 	        producer.close();
0: 	        //wait a couple sec so cron start time is different for next message
1:             Thread.sleep(2000);
1:         }
1:         SchedulerBroker sb = (SchedulerBroker) this.broker.getBroker().getAdaptor(SchedulerBroker.class);
1:         JobScheduler js = sb.getJobScheduler();
1:         List<Job> list = js.getAllJobs();
1:         assertEquals(COUNT, list.size());
1:         latch.await(2, TimeUnit.MINUTES);
0:         //All should messages should have been received by now
1:         assertEquals(COUNT, count.get());
1:     }
1: 
0:     @Override
0:     protected void setUp() throws Exception {
0:         bindAddress = "vm://localhost";
0:         super.setUp();
1:     }
1: 
0:     @Override
0:     protected BrokerService createBroker() throws Exception {
0:         return createBroker(true);
1:     }
1: 
0:     protected BrokerService createBroker(boolean delete) throws Exception {
0:         File schedulerDirectory = new File("target/scheduler");
0:         if (delete) {
0:             IOHelper.mkdirs(schedulerDirectory);
0:             IOHelper.deleteChildren(schedulerDirectory);
1:         }
0:         BrokerService answer = new BrokerService();
0:         answer.setPersistent(isPersistent());
0:         answer.getManagementContext().setCreateConnector(false);
0:         answer.setDeleteAllMessagesOnStartup(true);
0:         answer.setDataDirectory("target");
0:         answer.setSchedulerDirectoryFile(schedulerDirectory);
0:         answer.setSchedulerSupport(true);
0:         answer.setUseJmx(false);
0:         answer.addConnector(bindAddress);
0:         return answer;
1:     }
1: }
============================================================================