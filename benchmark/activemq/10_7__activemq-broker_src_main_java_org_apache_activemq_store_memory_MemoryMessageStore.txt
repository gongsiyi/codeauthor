1:bb8d32c: /*
1:fc00993:  * Licensed to the Apache Software Foundation (ASF) under one or more
1:fc00993:  * contributor license agreements.  See the NOTICE file distributed with
1:fc00993:  * this work for additional information regarding copyright ownership.
1:fc00993:  * The ASF licenses this file to You under the Apache License, Version 2.0
1:fc00993:  * (the "License"); you may not use this file except in compliance with
1:fc00993:  * the License.  You may obtain a copy of the License at
1:785b16b:  *
1:fc00993:  *      http://www.apache.org/licenses/LICENSE-2.0
1:785b16b:  *
1:fc00993:  * Unless required by applicable law or agreed to in writing, software
1:fc00993:  * distributed under the License is distributed on an "AS IS" BASIS,
1:fc00993:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:fc00993:  * See the License for the specific language governing permissions and
1:fc00993:  * limitations under the License.
2:d29ca2a:  */
1:d29ca2a: package org.apache.activemq.store.memory;
5:d29ca2a: 
1:d29ca2a: import java.io.IOException;
1:d29ca2a: import java.util.Collections;
1:d29ca2a: import java.util.LinkedHashMap;
1:d29ca2a: import java.util.Map;
1:0afb7f9: 
1:d29ca2a: import org.apache.activemq.broker.ConnectionContext;
1:d29ca2a: import org.apache.activemq.command.ActiveMQDestination;
1:d29ca2a: import org.apache.activemq.command.Message;
1:d29ca2a: import org.apache.activemq.command.MessageAck;
1:d29ca2a: import org.apache.activemq.command.MessageId;
1:bb8d32c: import org.apache.activemq.store.AbstractMessageStore;
1:54e2e3b: import org.apache.activemq.store.IndexListener;
1:d29ca2a: import org.apache.activemq.store.MessageRecoveryListener;
1:c6542a9: import org.apache.activemq.store.MessageStoreStatistics;
1:d29ca2a: 
1:18d616c: /**
1:bb8d32c:  * An implementation of {@link org.apache.activemq.store.MessageStore}
1:18d616c:  */
1:63e3f41: public class MemoryMessageStore extends AbstractMessageStore {
1:d29ca2a: 
1:933eb2f:     protected final Map<MessageId, Message> messageTable;
1:a110604:     protected MessageId lastBatchId;
1:54e2e3b:     protected long sequenceId;
1:d29ca2a: 
1:f812e34:     public MemoryMessageStore(ActiveMQDestination destination) {
1:933eb2f:         this(destination, new LinkedHashMap<MessageId, Message>());
1:d29ca2a:     }
1:d29ca2a: 
1:933eb2f:     public MemoryMessageStore(ActiveMQDestination destination, Map<MessageId, Message> messageTable) {
1:63e3f41:         super(destination);
1:f812e34:         this.messageTable = Collections.synchronizedMap(messageTable);
1:d29ca2a:     }
1:d29ca2a: 
1:bd28c3b:     @Override
1:f812e34:     public synchronized void addMessage(ConnectionContext context, Message message) throws IOException {
1:f812e34:         synchronized (messageTable) {
1:f812e34:             messageTable.put(message.getMessageId(), message);
1:c6542a9:             incMessageStoreStatistics(getMessageStoreStatistics(), message);
1:499e39e:             message.incrementReferenceCount();
1:499e39e:             message.getMessageId().setFutureOrSequenceLong(sequenceId++);
1:499e39e:             if (indexListener != null) {
1:499e39e:                 indexListener.onAdd(new IndexListener.MessageContext(context, message, null));
1:499e39e:             }
1:54e2e3b:         }
1:d29ca2a:     }
1:d29ca2a: 
1:bd28c3b:     @Override
1:f812e34:     public Message getMessage(MessageId identity) throws IOException {
1:933eb2f:         return messageTable.get(identity);
1:d29ca2a:     }
1:d29ca2a: 
1:bd28c3b:     @Override
1:f812e34:     public void removeMessage(ConnectionContext context, MessageAck ack) throws IOException {
1:415d46c:         removeMessage(ack.getLastMessageId());
1:d29ca2a:     }
1:d29ca2a: 
1:f812e34:     public void removeMessage(MessageId msgId) throws IOException {
1:f812e34:         synchronized (messageTable) {
1:ce1d85d:             Message removed = messageTable.remove(msgId);
1:bb8d32c:             if (removed != null) {
1:ce1d85d:                 removed.decrementReferenceCount();
1:c6542a9:                 decMessageStoreStatistics(getMessageStoreStatistics(), removed);
1:ce1d85d:             }
1:f812e34:             if ((lastBatchId != null && lastBatchId.equals(msgId)) || messageTable.isEmpty()) {
1:f812e34:                 lastBatchId = null;
1:d29ca2a:             }
1:d29ca2a:         }
1:d29ca2a:     }
1:d29ca2a: 
1:bd28c3b:     @Override
1:f812e34:     public void recover(MessageRecoveryListener listener) throws Exception {
1:bb8d32c:         // the message table is a synchronizedMap - so just have to synchronize here
1:f812e34:         synchronized (messageTable) {
1:bb8d32c:             for (Message message : messageTable.values()) {
1:bb8d32c:                 listener.recoverMessage(message);
1:d29ca2a:             }
1:d29ca2a:         }
1:d29ca2a:     }
1:d29ca2a: 
1:bd28c3b:     @Override
1:f812e34:     public void removeAllMessages(ConnectionContext context) throws IOException {
1:f812e34:         synchronized (messageTable) {
1:d29ca2a:             messageTable.clear();
1:785b16b:             getMessageStoreStatistics().reset();
1:d29ca2a:         }
1:d29ca2a:     }
1:d29ca2a: 
1:f812e34:     public void delete() {
1:f812e34:         synchronized (messageTable) {
1:d29ca2a:             messageTable.clear();
1:785b16b:             getMessageStoreStatistics().reset();
1:18d616c:         }
1:d29ca2a:     }
1:18d616c: 
1:bd28c3b:     @Override
1:f812e34:     public void recoverNextMessages(int maxReturned, MessageRecoveryListener listener) throws Exception {
1:f812e34:         synchronized (messageTable) {
1:f812e34:             boolean pastLackBatch = lastBatchId == null;
1:bb8d32c:             for (Map.Entry<MessageId, Message> entry : messageTable.entrySet()) {
1:f812e34:                 if (pastLackBatch) {
1:f812e34:                     Object msg = entry.getValue();
1:bb8d32c:                     lastBatchId = entry.getKey();
2:f812e34:                     if (msg.getClass() == MessageId.class) {
1:bb8d32c:                         listener.recoverMessageReference((MessageId) msg);
2:f812e34:                     } else {
1:bb8d32c:                         listener.recoverMessage((Message) msg);
1:785b16b:                     }
1:f812e34:                 } else {
1:f812e34:                     pastLackBatch = entry.getKey().equals(lastBatchId);
1:d29ca2a:                 }
1:d29ca2a:             }
1:d29ca2a:         }
1:415d46c:     }
1:785b16b: 
1:bd28c3b:     @Override
1:f812e34:     public void resetBatching() {
1:f812e34:         lastBatchId = null;
1:6d8e2c5:     }
1:d29ca2a: 
1:9bb4682:     @Override
1:9bb4682:     public void setBatch(MessageId messageId) {
1:9bb4682:         lastBatchId = messageId;
1:9bb4682:     }
1:266d23e: 
1:bd28c3b:     @Override
1:266d23e:     public void updateMessage(Message message) {
1:266d23e:         synchronized (messageTable) {
1:785b16b:             Message original = messageTable.get(message.getMessageId());
1:785b16b: 
1:bb8d32c:             // if can't be found then increment count, else remove old size
1:785b16b:             if (original == null) {
1:a49d46e:                 getMessageStoreStatistics().getMessageCount().increment();
1:785b16b:             } else {
1:785b16b:                 getMessageStoreStatistics().getMessageSize().addSize(-original.getSize());
1:266d23e:             }
1:266d23e:             messageTable.put(message.getMessageId(), message);
1:a49d46e:             getMessageStoreStatistics().getMessageSize().addSize(message.getSize());
1:266d23e:         }
1:a49d46e:     }
1:a49d46e: 
1:785b16b:     @Override
1:785b16b:     public void recoverMessageStoreStatistics() throws IOException {
1:785b16b:         synchronized (messageTable) {
1:785b16b:             long size = 0;
1:785b16b:             int count = 0;
1:bb8d32c:             for (Message message : messageTable.values()) {
1:bb8d32c:                 size += message.getSize();
1:a49d46e:             }
1:a49d46e: 
1:785b16b:             getMessageStoreStatistics().reset();
1:785b16b:             getMessageStoreStatistics().getMessageCount().setCount(count);
1:785b16b:             getMessageStoreStatistics().getMessageSize().setTotalSize(size);
1:785b16b:         }
1:785b16b:     }
1:785b16b: 
1:c6542a9:     protected static final void incMessageStoreStatistics(final MessageStoreStatistics stats, final Message message) {
1:c6542a9:         if (stats != null && message != null) {
1:c6542a9:             stats.getMessageCount().increment();
1:c6542a9:             stats.getMessageSize().addSize(message.getSize());
1:c6542a9:         }
1:785b16b:     }
1:785b16b: 
1:c6542a9:     protected static final void decMessageStoreStatistics(final MessageStoreStatistics stats, final Message message) {
1:c6542a9:         if (stats != null && message != null) {
1:c6542a9:             stats.getMessageCount().decrement();
1:c6542a9:             stats.getMessageSize().addSize(-message.getSize());
1:c6542a9:         }
1:415d46c:     }
2:415d46c: }
============================================================================
author:Hadrian Zbarcea
-------------------------------------------------------------------------------
commit:d54d046
author:Timothy Bish
-------------------------------------------------------------------------------
commit:bb8d32c
/////////////////////////////////////////////////////////////////////////
1: /*
/////////////////////////////////////////////////////////////////////////
1: import org.apache.activemq.store.AbstractMessageStore;
1:  * An implementation of {@link org.apache.activemq.store.MessageStore}
/////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////
1:             if (removed != null) {
/////////////////////////////////////////////////////////////////////////
1:         // the message table is a synchronizedMap - so just have to synchronize here
1:             for (Message message : messageTable.values()) {
1:                 listener.recoverMessage(message);
/////////////////////////////////////////////////////////////////////////
1:             for (Map.Entry<MessageId, Message> entry : messageTable.entrySet()) {
1:                     lastBatchId = entry.getKey();
1:                         listener.recoverMessageReference((MessageId) msg);
1:                         listener.recoverMessage((Message) msg);
/////////////////////////////////////////////////////////////////////////
1:             // if can't be found then increment count, else remove old size
/////////////////////////////////////////////////////////////////////////
1:             for (Message message : messageTable.values()) {
1:                 size += message.getSize();
/////////////////////////////////////////////////////////////////////////
author:gtully
-------------------------------------------------------------------------------
commit:499e39e
/////////////////////////////////////////////////////////////////////////
1:             message.incrementReferenceCount();
1:             message.getMessageId().setFutureOrSequenceLong(sequenceId++);
1:             if (indexListener != null) {
1:                 indexListener.onAdd(new IndexListener.MessageContext(context, message, null));
1:             }
commit:54e2e3b
/////////////////////////////////////////////////////////////////////////
1: import org.apache.activemq.store.IndexListener;
/////////////////////////////////////////////////////////////////////////
1:     protected long sequenceId;
/////////////////////////////////////////////////////////////////////////
0:         message.getMessageId().setFutureOrSequenceLong(sequenceId++);
0:         if (indexListener != null) {
0:             indexListener.onAdd(new IndexListener.MessageContext(context, message, null));
1:         }
commit:266d23e
/////////////////////////////////////////////////////////////////////////
1: 
1:     public void updateMessage(Message message) {
1:         synchronized (messageTable) {
1:             messageTable.put(message.getMessageId(), message);
1:         }
1:     }
author:Marc Breslow
-------------------------------------------------------------------------------
commit:4a937de
/////////////////////////////////////////////////////////////////////////
0:                 Message msg = iter.next();
0:                 listener.recoverMessage(msg);
author:Christopher L. Shannon
-------------------------------------------------------------------------------
commit:c6542a9
/////////////////////////////////////////////////////////////////////////
1: import org.apache.activemq.store.MessageStoreStatistics;
/////////////////////////////////////////////////////////////////////////
1:             incMessageStoreStatistics(getMessageStoreStatistics(), message);
/////////////////////////////////////////////////////////////////////////
1:                 decMessageStoreStatistics(getMessageStoreStatistics(), removed);
/////////////////////////////////////////////////////////////////////////
1:     protected static final void incMessageStoreStatistics(final MessageStoreStatistics stats, final Message message) {
1:         if (stats != null && message != null) {
1:             stats.getMessageCount().increment();
1:             stats.getMessageSize().addSize(message.getSize());
1:         }
1:     protected static final void decMessageStoreStatistics(final MessageStoreStatistics stats, final Message message) {
1:         if (stats != null && message != null) {
1:             stats.getMessageCount().decrement();
1:             stats.getMessageSize().addSize(-message.getSize());
1:         }
commit:bd28c3b
/////////////////////////////////////////////////////////////////////////
1:     @Override
/////////////////////////////////////////////////////////////////////////
1:     @Override
/////////////////////////////////////////////////////////////////////////
1:     @Override
/////////////////////////////////////////////////////////////////////////
0:                 getMessageStoreStatistics().getMessageCount().decrement();
0:                 getMessageStoreStatistics().getMessageSize().addSize(-removed.getSize());
1:     @Override
/////////////////////////////////////////////////////////////////////////
1:     @Override
/////////////////////////////////////////////////////////////////////////
1:     @Override
/////////////////////////////////////////////////////////////////////////
1:     @Override
/////////////////////////////////////////////////////////////////////////
1:     @Override
author:Christopher L. Shannon (cshannon)
-------------------------------------------------------------------------------
commit:a49d46e
/////////////////////////////////////////////////////////////////////////
0:             incMessageStoreStatistics(message);
/////////////////////////////////////////////////////////////////////////
0:                 decMessageStoreStatistics(removed);
/////////////////////////////////////////////////////////////////////////
0:     protected final void incMessageStoreStatistics(Message message) {
1:         getMessageStoreStatistics().getMessageCount().increment();
1:         getMessageStoreStatistics().getMessageSize().addSize(message.getSize());
1:     }
1: 
0:     protected final void decMessageStoreStatistics(Message message) {
0:         getMessageStoreStatistics().getMessageCount().decrement();
0:         getMessageStoreStatistics().getMessageSize().addSize(-message.getSize());
1:     }
1: 
commit:785b16b
/////////////////////////////////////////////////////////////////////////
1:  *
1:  *
/////////////////////////////////////////////////////////////////////////
0:             getMessageStoreStatistics().getMessageCount().increment();
0:             getMessageStoreStatistics().getMessageSize().addSize(message.getSize());
/////////////////////////////////////////////////////////////////////////
0:             getMessageStoreStatistics().getMessageCount().decrement();
0:             getMessageStoreStatistics().getMessageSize().addSize(-removed.getSize());
/////////////////////////////////////////////////////////////////////////
1:             getMessageStoreStatistics().reset();
1:             getMessageStoreStatistics().reset();
/////////////////////////////////////////////////////////////////////////
1:             Message original = messageTable.get(message.getMessageId());
1: 
0:             //if can't be found then increment count, else remove old size
1:             if (original == null) {
0:                 getMessageStoreStatistics().getMessageCount().increment();
1:             } else {
1:                 getMessageStoreStatistics().getMessageSize().addSize(-original.getSize());
1:             }
0:             getMessageStoreStatistics().getMessageSize().addSize(message.getSize());
1: 
1:     @Override
1:     public void recoverMessageStoreStatistics() throws IOException {
1:         synchronized (messageTable) {
1:             long size = 0;
1:             int count = 0;
0:             for (Iterator<Message> iter = messageTable.values().iterator(); iter
0:                     .hasNext();) {
0:                 Message msg = iter.next();
0:                 size += msg.getSize();
1:             }
1: 
1:             getMessageStoreStatistics().reset();
1:             getMessageStoreStatistics().getMessageCount().setCount(count);
1:             getMessageStoreStatistics().getMessageSize().setTotalSize(size);
1:         }
1:     }
1: 
author:Hiram R. Chirino
-------------------------------------------------------------------------------
commit:58aca86
commit:9a8f6e4
/////////////////////////////////////////////////////////////////////////
commit:b0c2a40
/////////////////////////////////////////////////////////////////////////
0:  * 
commit:ce1d85d
/////////////////////////////////////////////////////////////////////////
0:         message.incrementReferenceCount();
/////////////////////////////////////////////////////////////////////////
1:             Message removed = messageTable.remove(msgId);
0:             if( removed !=null ) {
1:                 removed.decrementReferenceCount();
1:             }
commit:933eb2f
/////////////////////////////////////////////////////////////////////////
1:     protected final Map<MessageId, Message> messageTable;
1:         this(destination, new LinkedHashMap<MessageId, Message>());
1:     public MemoryMessageStore(ActiveMQDestination destination, Map<MessageId, Message> messageTable) {
/////////////////////////////////////////////////////////////////////////
1:         return messageTable.get(identity);
/////////////////////////////////////////////////////////////////////////
0:             for (Iterator<Message> iter = messageTable.values().iterator(); iter.hasNext();) {
0:                 Object msg = iter.next();
commit:fc00993
/////////////////////////////////////////////////////////////////////////
1:  * Licensed to the Apache Software Foundation (ASF) under one or more
1:  * contributor license agreements.  See the NOTICE file distributed with
1:  * this work for additional information regarding copyright ownership.
1:  * The ASF licenses this file to You under the Apache License, Version 2.0
1:  * (the "License"); you may not use this file except in compliance with
1:  * the License.  You may obtain a copy of the License at
0:  *
1:  *      http://www.apache.org/licenses/LICENSE-2.0
0:  *
1:  * Unless required by applicable law or agreed to in writing, software
1:  * distributed under the License is distributed on an "AS IS" BASIS,
1:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:  * See the License for the specific language governing permissions and
1:  * limitations under the License.
commit:f812e34
/////////////////////////////////////////////////////////////////////////
0:  * An implementation of {@link org.apache.activemq.store.MessageStore} which
0:  * uses a
0: public class MemoryMessageStore implements MessageStore {
1:     public MemoryMessageStore(ActiveMQDestination destination) {
0:         this(destination, new LinkedHashMap());
0:     public MemoryMessageStore(ActiveMQDestination destination, Map messageTable) {
0:         this.destination = destination;
1:         this.messageTable = Collections.synchronizedMap(messageTable);
1:     public synchronized void addMessage(ConnectionContext context, Message message) throws IOException {
1:         synchronized (messageTable) {
1:             messageTable.put(message.getMessageId(), message);
0:     // public void addMessageReference(ConnectionContext context,MessageId
0:     // messageId,long expirationTime,String messageRef)
0:     // throws IOException{
0:     // synchronized(messageTable){
0:     // messageTable.put(messageId,messageRef);
0:     // }
0:     // }
1:     public Message getMessage(MessageId identity) throws IOException {
0:     // public String getMessageReference(MessageId identity) throws IOException{
0:     // return (String)messageTable.get(identity);
0:     // }
1:     public void removeMessage(ConnectionContext context, MessageAck ack) throws IOException {
1:     public void removeMessage(MessageId msgId) throws IOException {
1:         synchronized (messageTable) {
1:             if ((lastBatchId != null && lastBatchId.equals(msgId)) || messageTable.isEmpty()) {
1:                 lastBatchId = null;
1:     public void recover(MessageRecoveryListener listener) throws Exception {
0:         // the message table is a synchronizedMap - so just have to synchronize
0:         // here
1:         synchronized (messageTable) {
0:             for (Iterator iter = messageTable.values().iterator(); iter.hasNext();) {
0:                 Object msg = (Object)iter.next();
1:                 if (msg.getClass() == MessageId.class) {
1:                 } else {
0:     public void start() {
0:     public void stop() {
1:     public void removeAllMessages(ConnectionContext context) throws IOException {
1:         synchronized (messageTable) {
0:     public ActiveMQDestination getDestination() {
1:     public void delete() {
1:         synchronized (messageTable) {
0:      * @param usageManager The UsageManager that is controlling the
0:      *                destination's memory usage.
0:     public void setUsageManager(UsageManager usageManager) {
0:     public int getMessageCount() {
1:     public void recoverNextMessages(int maxReturned, MessageRecoveryListener listener) throws Exception {
1:         synchronized (messageTable) {
1:             boolean pastLackBatch = lastBatchId == null;
0:             int count = 0;
0:             for (Iterator iter = messageTable.entrySet().iterator(); iter.hasNext();) {
0:                 Map.Entry entry = (Entry)iter.next();
1:                 if (pastLackBatch) {
1:                     Object msg = entry.getValue();
0:                     lastBatchId = (MessageId)entry.getKey();
1:                     if (msg.getClass() == MessageId.class) {
1:                     } else {
1:                 } else {
1:                     pastLackBatch = entry.getKey().equals(lastBatchId);
1:     public void resetBatching() {
1:         lastBatchId = null;
commit:0afb7f9
/////////////////////////////////////////////////////////////////////////
1: 
/////////////////////////////////////////////////////////////////////////
0: //    public void addMessageReference(ConnectionContext context,MessageId messageId,long expirationTime,String messageRef)
0: //            throws IOException{
0: //        synchronized(messageTable){
0: //            messageTable.put(messageId,messageRef);
0: //        }
0: //    }
0: //    public String getMessageReference(MessageId identity) throws IOException{
0: //        return (String)messageTable.get(identity);
0: //    }
/////////////////////////////////////////////////////////////////////////
0:                 if(msg.getClass()==MessageId.class){
0:                     listener.recoverMessageReference((MessageId)msg);
/////////////////////////////////////////////////////////////////////////
0:                     if(msg.getClass()==MessageId.class){
0:                         listener.recoverMessageReference((MessageId)msg);
commit:57b4941
/////////////////////////////////////////////////////////////////////////
0:  * Licensed to the Apache Software Foundation (ASF) under one or more
0:  * contributor license agreements.  See the NOTICE file distributed with
0:  * this work for additional information regarding copyright ownership.
0:  * The ASF licenses this file to You under the Apache License, Version 2.0
0:  * (the "License"); you may not use this file except in compliance with
0:  * the License.  You may obtain a copy of the License at
commit:18d616c
/////////////////////////////////////////////////////////////////////////
0: import org.apache.activemq.memory.UsageManager;
/////////////////////////////////////////////////////////////////////////
1:     
1:     /**
0:      * @param usageManager The UsageManager that is controlling the destination's memory usage.
1:      */
0:     public void setUsageManager(UsageManager usageManager) {
1:     }
commit:f451ad0
/////////////////////////////////////////////////////////////////////////
0:     public void start() {
0:     public void stop() {
commit:7f5213b
/////////////////////////////////////////////////////////////////////////
0:     public void recover(MessageRecoveryListener listener) throws Exception {
commit:48b4869
/////////////////////////////////////////////////////////////////////////
0:  * Copyright 2005-2006 The Apache Software Foundation
commit:d29ca2a
/////////////////////////////////////////////////////////////////////////
0: /**
0:  *
0:  * Copyright 2004 The Apache Software Foundation
0:  *
0:  * Licensed under the Apache License, Version 2.0 (the "License");
0:  * you may not use this file except in compliance with the License.
0:  * You may obtain a copy of the License at
0:  *
0:  * http://www.apache.org/licenses/LICENSE-2.0
0:  *
0:  * Unless required by applicable law or agreed to in writing, software
0:  * distributed under the License is distributed on an "AS IS" BASIS,
0:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
0:  * See the License for the specific language governing permissions and
0:  * limitations under the License.
1:  */
1: package org.apache.activemq.store.memory;
1: 
1: import java.io.IOException;
1: import java.util.Collections;
0: import java.util.Iterator;
1: import java.util.LinkedHashMap;
1: import java.util.Map;
1: 
1: import org.apache.activemq.broker.ConnectionContext;
1: import org.apache.activemq.command.ActiveMQDestination;
1: import org.apache.activemq.command.Message;
1: import org.apache.activemq.command.MessageAck;
1: import org.apache.activemq.command.MessageId;
1: import org.apache.activemq.store.MessageRecoveryListener;
0: import org.apache.activemq.store.MessageStore;
1: 
0: /**
0:  * An implementation of {@link org.apache.activemq.store.MessageStore} which uses a
0:  *
0:  * @version $Revision: 1.7 $
1:  */
0: public class MemoryMessageStore implements MessageStore {
1: 
0:     protected final ActiveMQDestination destination;
0:     protected final Map messageTable;
1: 
0:     public MemoryMessageStore(ActiveMQDestination destination) {
0:         this(destination, new LinkedHashMap());
1:     }
1: 
0:     public MemoryMessageStore(ActiveMQDestination destination, Map messageTable) {
0:         this.destination = destination;
0:         this.messageTable = Collections.synchronizedMap(messageTable);
1:     }
1: 
0:     public synchronized void addMessage(ConnectionContext context, Message message) throws IOException {
0:         messageTable.put(message.getMessageId(), message);
1:     }
0:     public void addMessageReference(ConnectionContext context, MessageId messageId, long expirationTime, String messageRef) throws IOException {
0:         messageTable.put(messageId, messageRef);
1:     }
1: 
0:     public Message getMessage(MessageId identity) throws IOException {
0:         return (Message) messageTable.get(identity);
1:     }
0:     public String getMessageReference(MessageId identity) throws IOException {
0:         return (String) messageTable.get(identity);
1:     }
1: 
0:     public void removeMessage(ConnectionContext context, MessageAck ack) throws IOException {
0:         messageTable.remove(ack.getLastMessageId());
1:     }
1:     
0:     public void removeMessage(MessageId msgId) throws IOException {
0:         messageTable.remove(msgId);
1:     }
1: 
0:     public void recover(MessageRecoveryListener listener) throws Throwable {
0:         for (Iterator iter = messageTable.values().iterator(); iter.hasNext();) {
0:             Object msg = (Object) iter.next();
0:             if( msg.getClass() == String.class ) {
0:                 listener.recoverMessageReference((String) msg);
0:             } else {
0:                 listener.recoverMessage((Message) msg);
1:             }
1:         }
1:     }
1: 
0:     public void start() throws IOException {
1:     }
1: 
0:     public void stop(long timeout) throws IOException {
1:     }
1: 
0:     public void removeAllMessages(ConnectionContext context) throws IOException {
1:         messageTable.clear();
1:     }
1: 
0:     public ActiveMQDestination getDestination() {
0:         return destination;
1:     }
1: 
0:     public void delete() {
1:         messageTable.clear();
1:     }
1: 
1: }
author:Gary Tully
-------------------------------------------------------------------------------
commit:9bb4682
/////////////////////////////////////////////////////////////////////////
0: 
1:     @Override
1:     public void setBatch(MessageId messageId) {
1:         lastBatchId = messageId;
1:     }
0:     
author:Robert Davies
-------------------------------------------------------------------------------
commit:63e3f41
/////////////////////////////////////////////////////////////////////////
0: import org.apache.activemq.store.AbstractMessageStore;
/////////////////////////////////////////////////////////////////////////
1: public class MemoryMessageStore extends AbstractMessageStore {
/////////////////////////////////////////////////////////////////////////
1:         super(destination);
/////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////
commit:6d8e2c5
/////////////////////////////////////////////////////////////////////////
0: import org.apache.activemq.usage.MemoryUsage;
0: import org.apache.activemq.usage.SystemUsage;
/////////////////////////////////////////////////////////////////////////
0:     
/////////////////////////////////////////////////////////////////////////
0: 
0:     /**
0:      * @param memoeyUSage
0:      * @see org.apache.activemq.store.MessageStore#setMemoryUsage(org.apache.activemq.usage.MemoryUsage)
0:      */
0:     public void setMemoryUsage(MemoryUsage memoeyUSage){
0:         // TODO Auto-generated method stub
0:         
1:     }
commit:3a5f48d
/////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////
commit:7351c4b
/////////////////////////////////////////////////////////////////////////
0:             if((lastBatchId!=null && lastBatchId.equals(msgId)) || messageTable.isEmpty()){
commit:415d46c
/////////////////////////////////////////////////////////////////////////
0:         synchronized(messageTable){
0:             messageTable.put(message.getMessageId(),message);
1:         }
0:         synchronized(messageTable){
0:             messageTable.put(messageId,messageRef);
1:         }
/////////////////////////////////////////////////////////////////////////
1:         removeMessage(ack.getLastMessageId());
0:         synchronized(messageTable){
0:             messageTable.remove(msgId);
0:             if(lastBatchId!=null&lastBatchId.equals(msgId)){
0:                 lastBatchId=null;
1:             }
1:         }
/////////////////////////////////////////////////////////////////////////
0:         synchronized(messageTable){
0:             messageTable.clear();
0:         }
/////////////////////////////////////////////////////////////////////////
0:         synchronized(messageTable){
0:             messageTable.clear();
0:         }
/////////////////////////////////////////////////////////////////////////
0:             int count=0;
0:                     lastBatchId=(MessageId)entry.getKey();
/////////////////////////////////////////////////////////////////////////
0:         lastBatchId=null;
commit:a110604
/////////////////////////////////////////////////////////////////////////
0: import java.util.Map.Entry;
/////////////////////////////////////////////////////////////////////////
1:     protected MessageId lastBatchId;
/////////////////////////////////////////////////////////////////////////
0:     
0:         synchronized(messageTable){
0:             
0:             boolean pastLackBatch=lastBatchId==null;
0:             int count = 0;
0:             for(Iterator iter=messageTable.entrySet().iterator();iter.hasNext();){
0:                 Map.Entry entry=(Entry)iter.next();
0:                 if(pastLackBatch){
0:                     count++;
0:                     Object msg=entry.getValue();
0:                     lastBatchId = (MessageId)entry.getKey();
0:                     if(msg.getClass()==String.class){
0:                         listener.recoverMessageReference((String)msg);
0:                     }else{
0:                         listener.recoverMessage((Message)msg);
0:                     }
0:                 }else{
0:                     pastLackBatch=entry.getKey().equals(lastBatchId);
0:                 }
0:             }
0:             listener.finished();
0:         }
0:         lastBatchId = null;
commit:629bc81
/////////////////////////////////////////////////////////////////////////
0:  * 
0:  * Licensed to the Apache Software Foundation (ASF) under one or more contributor license agreements. See the NOTICE
0:  * file distributed with this work for additional information regarding copyright ownership. The ASF licenses this file
0:  * to You under the Apache License, Version 2.0 (the "License"); you may not use this file except in compliance with the
0:  * License. You may obtain a copy of the License at
0:  * 
0:  * 
0:  * Unless required by applicable law or agreed to in writing, software distributed under the License is distributed on
0:  * an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the License for the
0:  * specific language governing permissions and limitations under the License.
0: 
/////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////
0:  * 
0: public class MemoryMessageStore implements MessageStore{
0:     public MemoryMessageStore(ActiveMQDestination destination){
0:         this(destination,new LinkedHashMap());
0:     public MemoryMessageStore(ActiveMQDestination destination,Map messageTable){
0:         this.destination=destination;
0:         this.messageTable=Collections.synchronizedMap(messageTable);
0:     public synchronized void addMessage(ConnectionContext context,Message message) throws IOException{
0:         messageTable.put(message.getMessageId(),message);
0:     public void addMessageReference(ConnectionContext context,MessageId messageId,long expirationTime,String messageRef)
0:             throws IOException{
0:         messageTable.put(messageId,messageRef);
0:     public Message getMessage(MessageId identity) throws IOException{
0:         return (Message)messageTable.get(identity);
0:     }
0: 
0:     public String getMessageReference(MessageId identity) throws IOException{
0:         return (String)messageTable.get(identity);
0:     }
0: 
0:     public void removeMessage(ConnectionContext context,MessageAck ack) throws IOException{
0: 
0:     public void removeMessage(MessageId msgId) throws IOException{
0:     public void recover(MessageRecoveryListener listener) throws Exception{
0:                 Object msg=(Object)iter.next();
0:                     listener.recoverMessageReference((String)msg);
0:                     listener.recoverMessage((Message)msg);
0:     public void start(){
0:     public void stop(){
0:     public void removeAllMessages(ConnectionContext context) throws IOException{
0:     public ActiveMQDestination getDestination(){
0:     public void delete(){
0: 
0:     public void setUsageManager(UsageManager usageManager){
0:     public int getMessageCount(){
0:         return messageTable.size();
0:     }
0: 
0:     public void resetBatching(MessageId nextToDispatch){
0:     }
0: 
0:     public void recoverNextMessages(int maxReturned,MessageRecoveryListener listener) throws Exception{
0:     }
0: 
0:     public void resetBatching(){
0:     }
commit:2748ae1
/////////////////////////////////////////////////////////////////////////
0:             listener.finished();
commit:7f384b6
/////////////////////////////////////////////////////////////////////////
0:         // the message table is a synchronizedMap - so just have to synchronize here
0:         synchronized(messageTable){
0:             for(Iterator iter=messageTable.values().iterator();iter.hasNext();){
0:                 Object msg=(Object) iter.next();
0:                 if(msg.getClass()==String.class){
0:                     listener.recoverMessageReference((String) msg);
0:                 }else{
0:                     listener.recoverMessage((Message) msg);
0:                 }
author:Guillaume Nodet
-------------------------------------------------------------------------------
commit:747acfe
/////////////////////////////////////////////////////////////////////////
0:             if(lastBatchId!=null && lastBatchId.equals(msgId)){
============================================================================