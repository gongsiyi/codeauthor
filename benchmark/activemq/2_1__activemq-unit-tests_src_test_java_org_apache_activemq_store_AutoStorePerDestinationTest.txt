1:221da8b: /**
1:221da8b:  * Licensed to the Apache Software Foundation (ASF) under one or more
1:221da8b:  * contributor license agreements.  See the NOTICE file distributed with
1:221da8b:  * this work for additional information regarding copyright ownership.
1:221da8b:  * The ASF licenses this file to You under the Apache License, Version 2.0
1:221da8b:  * (the "License"); you may not use this file except in compliance with
1:221da8b:  * the License.  You may obtain a copy of the License at
1:221da8b:  *
1:221da8b:  *      http://www.apache.org/licenses/LICENSE-2.0
1:221da8b:  *
1:221da8b:  * Unless required by applicable law or agreed to in writing, software
1:221da8b:  * distributed under the License is distributed on an "AS IS" BASIS,
1:221da8b:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:221da8b:  * See the License for the specific language governing permissions and
1:221da8b:  * limitations under the License.
1:221da8b:  */
1:221da8b: package org.apache.activemq.store;
1:221da8b: 
1:221da8b: import java.util.ArrayList;
1:221da8b: import org.apache.activemq.store.kahadb.FilteredKahaDBPersistenceAdapter;
1:221da8b: import org.apache.activemq.store.kahadb.MultiKahaDBPersistenceAdapter;
1:221da8b: 
1:221da8b: public class AutoStorePerDestinationTest extends StorePerDestinationTest {
1:221da8b: 
1:221da8b:     // use perDestinationFlag to get multiple stores from one match all adapter
1:221da8b:     public void prepareBrokerWithMultiStore(boolean deleteAllMessages) throws Exception {
1:221da8b: 
1:221da8b:         MultiKahaDBPersistenceAdapter multiKahaDBPersistenceAdapter = new MultiKahaDBPersistenceAdapter();
1:221da8b:         if (deleteAllMessages) {
1:221da8b:             multiKahaDBPersistenceAdapter.deleteAllMessages();
1:221da8b:         }
1:221da8b:         ArrayList<FilteredKahaDBPersistenceAdapter> adapters = new ArrayList<FilteredKahaDBPersistenceAdapter>();
1:221da8b: 
1:221da8b:         FilteredKahaDBPersistenceAdapter template = new FilteredKahaDBPersistenceAdapter();
1:221da8b:         template.setPersistenceAdapter(createStore(deleteAllMessages));
1:221da8b:         template.setPerDestination(true);
1:221da8b:         adapters.add(template);
1:221da8b: 
1:221da8b:         multiKahaDBPersistenceAdapter.setFilteredPersistenceAdapters(adapters);
1:221da8b:         brokerService  = createBroker(multiKahaDBPersistenceAdapter);
1:221da8b:     }
1:221da8b: }
============================================================================
author:Timothy A. Bish
-------------------------------------------------------------------------------
commit:ef24cc9
author:Gary Tully
-------------------------------------------------------------------------------
commit:221da8b
/////////////////////////////////////////////////////////////////////////
1: /**
1:  * Licensed to the Apache Software Foundation (ASF) under one or more
1:  * contributor license agreements.  See the NOTICE file distributed with
1:  * this work for additional information regarding copyright ownership.
1:  * The ASF licenses this file to You under the Apache License, Version 2.0
1:  * (the "License"); you may not use this file except in compliance with
1:  * the License.  You may obtain a copy of the License at
1:  *
1:  *      http://www.apache.org/licenses/LICENSE-2.0
1:  *
1:  * Unless required by applicable law or agreed to in writing, software
1:  * distributed under the License is distributed on an "AS IS" BASIS,
1:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:  * See the License for the specific language governing permissions and
1:  * limitations under the License.
1:  */
1: package org.apache.activemq.store;
1: 
1: import java.util.ArrayList;
1: import org.apache.activemq.store.kahadb.FilteredKahaDBPersistenceAdapter;
1: import org.apache.activemq.store.kahadb.MultiKahaDBPersistenceAdapter;
1: 
1: public class AutoStorePerDestinationTest extends StorePerDestinationTest {
1: 
1:     // use perDestinationFlag to get multiple stores from one match all adapter
1:     public void prepareBrokerWithMultiStore(boolean deleteAllMessages) throws Exception {
1: 
1:         MultiKahaDBPersistenceAdapter multiKahaDBPersistenceAdapter = new MultiKahaDBPersistenceAdapter();
1:         if (deleteAllMessages) {
1:             multiKahaDBPersistenceAdapter.deleteAllMessages();
1:         }
1:         ArrayList<FilteredKahaDBPersistenceAdapter> adapters = new ArrayList<FilteredKahaDBPersistenceAdapter>();
1: 
1:         FilteredKahaDBPersistenceAdapter template = new FilteredKahaDBPersistenceAdapter();
1:         template.setPersistenceAdapter(createStore(deleteAllMessages));
1:         template.setPerDestination(true);
1:         adapters.add(template);
1: 
1:         multiKahaDBPersistenceAdapter.setFilteredPersistenceAdapters(adapters);
1:         brokerService  = createBroker(multiKahaDBPersistenceAdapter);
1:     }
1: }
============================================================================