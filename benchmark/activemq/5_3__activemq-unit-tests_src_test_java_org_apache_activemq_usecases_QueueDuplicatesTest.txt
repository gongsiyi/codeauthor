1:a677c21: /**
1:57b4941:  * Licensed to the Apache Software Foundation (ASF) under one or more
1:57b4941:  * contributor license agreements.  See the NOTICE file distributed with
1:57b4941:  * this work for additional information regarding copyright ownership.
1:57b4941:  * The ASF licenses this file to You under the Apache License, Version 2.0
1:57b4941:  * (the "License"); you may not use this file except in compliance with
1:57b4941:  * the License.  You may obtain a copy of the License at
3:a677c21:  *
1:230a86c:  *      http://www.apache.org/licenses/LICENSE-2.0
1:a677c21:  *
1:a677c21:  * Unless required by applicable law or agreed to in writing, software
1:a677c21:  * distributed under the License is distributed on an "AS IS" BASIS,
1:a677c21:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:a677c21:  * See the License for the specific language governing permissions and
1:a677c21:  * limitations under the License.
1:a677c21:  */
2:a677c21: 
1:a677c21: package org.apache.activemq.usecases;
1:230a86c: 
1:a677c21: import java.text.DateFormat;
1:a677c21: import java.text.SimpleDateFormat;
1:a677c21: import java.util.Date;
1:a677c21: import java.util.HashMap;
1:a677c21: import java.util.Map;
1:a677c21: 
1:a677c21: import javax.jms.Connection;
1:a677c21: import javax.jms.DeliveryMode;
1:a677c21: import javax.jms.Destination;
1:a677c21: import javax.jms.JMSException;
1:a677c21: import javax.jms.Message;
1:a677c21: import javax.jms.MessageConsumer;
1:a677c21: import javax.jms.MessageListener;
1:a677c21: import javax.jms.MessageProducer;
1:a677c21: import javax.jms.Session;
1:a677c21: import javax.jms.TextMessage;
1:a677c21: 
1:a677c21: import junit.framework.TestCase;
1:a677c21: 
1:a677c21: import org.apache.activemq.ActiveMQConnectionFactory;
1:8bf987b: import org.slf4j.Logger;
1:8bf987b: import org.slf4j.LoggerFactory;
1:a677c21: 
1:a677c21: public class QueueDuplicatesTest extends TestCase {
1:230a86c: 
1:8bf987b:     private static final Logger LOG = LoggerFactory.getLogger(QueueDuplicatesTest.class);
1:a677c21: 
1:a677c21:     private static DateFormat formatter = new SimpleDateFormat("HH:mm:ss SSS");
2:a677c21:     private String brokerUrl;
1:a677c21:     private String subject;
1:a677c21:     private Connection brokerConnection;
1:a677c21: 
1:a677c21:     public QueueDuplicatesTest(String name) {
1:a677c21:         super(name);
5:a677c21:     }
1:a677c21: 
1:a677c21:     protected void setUp() throws Exception {
1:a677c21:         String peerUrl = "peer://localhost:6099";
1:a677c21: 
1:a677c21:         subject = this.getClass().getName();
1:a677c21: 
1:a677c21:         ActiveMQConnectionFactory fac = createFactory(peerUrl);
1:a677c21:         brokerConnection = fac.createConnection();
1:a677c21:         brokerConnection.start();
1:86cbdfd:     }
1:a677c21: 
1:a677c21:     protected void tearDown() throws Exception {
1:a677c21:         if (brokerConnection != null) {
1:a677c21:             brokerConnection.close();
1:a677c21:         }
1:a677c21:     }
1:a677c21: 
1:a677c21:     public void testDuplicates() {
1:a677c21:         try {
1:a677c21:             // Get Session
1:a677c21:             Session session = createSession(brokerConnection);
1:a677c21:             // create consumer
1:a677c21:             Destination dest = session.createQueue(subject);
1:a677c21:             MessageConsumer consumer = session.createConsumer(dest);
1:a677c21:             // subscribe to queue
1:a677c21:             consumer.setMessageListener(new SimpleConsumer());
1:a677c21:             // create producer
1:a677c21:             Thread sendingThread = new SendingThread(brokerUrl, subject);
1:a677c21:             // start producer
1:a677c21:             sendingThread.start();
1:a677c21:             // wait about 5 seconds
1:a677c21:             Thread.sleep(5000);
1:a677c21:             // unsubscribe consumer
1:a677c21:             consumer.close();
1:a677c21:             // wait another 5 seconds
1:a677c21:             Thread.sleep(5000);
1:a677c21:             // create new consumer
1:a677c21:             consumer = session.createConsumer(dest);
1:a677c21:             // subscribe to queue
1:a677c21:             consumer.setMessageListener(new SimpleConsumer());
1:a677c21:             // sleep a little while longer
1:a677c21:             Thread.sleep(15000);
1:a677c21:             session.close();
1:230a86c:         } catch (Exception e) {
1:a677c21:             e.printStackTrace();
1:a677c21:         }
1:a677c21:     }
1:a677c21: 
1:a677c21:     Session createSession(Connection peerConnection) throws JMSException {
1:a677c21:         // Connect using peer to peer connection
1:a677c21:         Session session = peerConnection.createSession(false, Session.AUTO_ACKNOWLEDGE);
1:a677c21:         return session;
1:a677c21:     }
1:a677c21: 
1:a677c21:     private ActiveMQConnectionFactory createFactory(String brokerUrl) {
1:a677c21:         ActiveMQConnectionFactory cf = new ActiveMQConnectionFactory();
1:a677c21:         cf.setBrokerURL(brokerUrl);
1:a677c21: 
1:a677c21:         return cf;
1:a677c21:     }
1:230a86c: 
1:a677c21:     private class SendingThread extends Thread {
1:a677c21:         private String subject;
1:a677c21: 
1:a677c21:         SendingThread(String brokerUrl, String subject) {
1:a677c21:             this.subject = subject;
1:a677c21:             setDaemon(false);
1:a677c21:         }
1:a677c21: 
1:a677c21:         public void run() {
1:a677c21:             try {
1:a677c21:                 Session session = createSession(brokerConnection);
1:a677c21:                 Destination dest = session.createQueue(subject);
1:a677c21:                 MessageProducer producer = session.createProducer(dest);
1:a677c21:                 producer.setDeliveryMode(DeliveryMode.NON_PERSISTENT);
1:230a86c:                 for (int i = 0; i < 20; i++) {
1:a677c21:                     String txt = "Text Message: " + i;
1:a677c21:                     TextMessage msg = session.createTextMessage(txt);
1:a677c21:                     producer.send(msg);
1:fc00993:                     LOG.info(formatter.format(new Date()) + " Sent ==> " + msg + " to " + subject);
1:a677c21:                     Thread.sleep(1000);
1:a677c21:                 }
1:a677c21:                 session.close();
1:230a86c:             } catch (Exception e) {
1:a677c21:                 e.printStackTrace();
1:a677c21:             }
1:a677c21:         }
1:a677c21:     }
1:230a86c: 
1:a677c21:     private static class SimpleConsumer implements MessageListener {
1:933eb2f:         private Map<String, Message> msgs = new HashMap<String, Message>();
1:a677c21: 
1:a677c21:         public void onMessage(Message message) {
1:fc00993:             LOG.info(formatter.format(new Date()) + " SimpleConsumer Message Received: " + message);
1:a677c21:             try {
1:a677c21:                 String id = message.getJMSMessageID();
1:a677c21:                 assertNull("Message is duplicate: " + id, msgs.get(id));
1:a677c21:                 msgs.put(id, message);
1:230a86c:             } catch (Exception e) {
1:a677c21:                 e.printStackTrace();
1:a677c21:             }
1:a677c21:         }
1:a677c21:     }
1:a677c21: }
============================================================================
author:Hadrian Zbarcea
-------------------------------------------------------------------------------
commit:f9bec8f
author:Timothy A. Bish
-------------------------------------------------------------------------------
commit:ef24cc9
author:Bosanac Dejan
-------------------------------------------------------------------------------
commit:8bf987b
/////////////////////////////////////////////////////////////////////////
1: import org.slf4j.Logger;
1: import org.slf4j.LoggerFactory;
1:     private static final Logger LOG = LoggerFactory.getLogger(QueueDuplicatesTest.class);
author:Hiram R. Chirino
-------------------------------------------------------------------------------
commit:933eb2f
/////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////
1:         private Map<String, Message> msgs = new HashMap<String, Message>();
commit:fc00993
/////////////////////////////////////////////////////////////////////////
0:     private static final Log LOG = LogFactory.getLog(QueueDuplicatesTest.class);
/////////////////////////////////////////////////////////////////////////
1:                     LOG.info(formatter.format(new Date()) + " Sent ==> " + msg + " to " + subject);
/////////////////////////////////////////////////////////////////////////
1:             LOG.info(formatter.format(new Date()) + " SimpleConsumer Message Received: " + message);
commit:230a86c
/////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////
1:  *      http://www.apache.org/licenses/LICENSE-2.0
/////////////////////////////////////////////////////////////////////////
1: 
/////////////////////////////////////////////////////////////////////////
1: 
/////////////////////////////////////////////////////////////////////////
1:         } catch (Exception e) {
/////////////////////////////////////////////////////////////////////////
1: 
/////////////////////////////////////////////////////////////////////////
1:                 for (int i = 0; i < 20; i++) {
/////////////////////////////////////////////////////////////////////////
1:             } catch (Exception e) {
1: 
/////////////////////////////////////////////////////////////////////////
1:             } catch (Exception e) {
commit:86cbdfd
/////////////////////////////////////////////////////////////////////////
1: }
commit:57b4941
/////////////////////////////////////////////////////////////////////////
1:  * Licensed to the Apache Software Foundation (ASF) under one or more
1:  * contributor license agreements.  See the NOTICE file distributed with
1:  * this work for additional information regarding copyright ownership.
1:  * The ASF licenses this file to You under the Apache License, Version 2.0
1:  * (the "License"); you may not use this file except in compliance with
1:  * the License.  You may obtain a copy of the License at
author:James Strachan
-------------------------------------------------------------------------------
commit:a677c21
/////////////////////////////////////////////////////////////////////////
1: /**
1:  *
0:  * Copyright 2005-2006 The Apache Software Foundation
1:  *
0:  * Licensed under the Apache License, Version 2.0 (the "License");
0:  * you may not use this file except in compliance with the License.
0:  * You may obtain a copy of the License at
1:  *
0:  * http://www.apache.org/licenses/LICENSE-2.0
1:  *
1:  * Unless required by applicable law or agreed to in writing, software
1:  * distributed under the License is distributed on an "AS IS" BASIS,
1:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:  * See the License for the specific language governing permissions and
1:  * limitations under the License.
1:  */
1: 
1: package org.apache.activemq.usecases;
1: import java.text.DateFormat;
1: import java.text.SimpleDateFormat;
1: import java.util.Date;
1: import java.util.HashMap;
1: import java.util.Map;
1: 
1: import javax.jms.Connection;
1: import javax.jms.DeliveryMode;
1: import javax.jms.Destination;
1: import javax.jms.JMSException;
1: import javax.jms.Message;
1: import javax.jms.MessageConsumer;
1: import javax.jms.MessageListener;
1: import javax.jms.MessageProducer;
1: import javax.jms.Session;
1: import javax.jms.TextMessage;
1: 
1: import junit.framework.TestCase;
1: 
1: import org.apache.activemq.ActiveMQConnectionFactory;
0: import org.apache.commons.logging.Log;
0: import org.apache.commons.logging.LogFactory;
1: 
1: public class QueueDuplicatesTest extends TestCase {
1:     
0:     private static final Log log = LogFactory.getLog(QueueDuplicatesTest.class);
1: 
1:     private static DateFormat formatter = new SimpleDateFormat("HH:mm:ss SSS");
1:     private String brokerUrl;
1:     private String subject;
1:     private Connection brokerConnection;
1: 
1:     public QueueDuplicatesTest(String name) {
1:         super(name);
1:     }
1: 
1:     protected void setUp() throws Exception {
1:         String peerUrl = "peer://localhost:6099";
1: 
1:         subject = this.getClass().getName();
1: 
1:         ActiveMQConnectionFactory fac = createFactory(peerUrl);
1:         brokerConnection = fac.createConnection();
1:         brokerConnection.start();
1:     }
1: 
1:     protected void tearDown() throws Exception {
1:         if (brokerConnection != null) {
1:             brokerConnection.close();
1:         }
1:     }
1: 
1:     public void testDuplicates() {
1:         try {
1:             // Get Session
1:             Session session = createSession(brokerConnection);
1:             // create consumer
1:             Destination dest = session.createQueue(subject);
1:             MessageConsumer consumer = session.createConsumer(dest);
1:             // subscribe to queue
1:             consumer.setMessageListener(new SimpleConsumer());
1:             // create producer
1:             Thread sendingThread = new SendingThread(brokerUrl, subject);
1:             // start producer
1:             sendingThread.start();
1:             // wait about 5 seconds
1:             Thread.sleep(5000);
1:             // unsubscribe consumer
1:             consumer.close();
1:             // wait another 5 seconds
1:             Thread.sleep(5000);
1:             // create new consumer
1:             consumer = session.createConsumer(dest);
1:             // subscribe to queue
1:             consumer.setMessageListener(new SimpleConsumer());
1:             // sleep a little while longer
1:             Thread.sleep(15000);
1:             session.close();
1:         }
0:         catch (Exception e) {
1:             e.printStackTrace();
1:         }
1:     }
1: 
1:     Session createSession(Connection peerConnection) throws JMSException {
1:         // Connect using peer to peer connection
1:         Session session = peerConnection.createSession(false, Session.AUTO_ACKNOWLEDGE);
1:         return session;
1:     }
1: 
1:     private ActiveMQConnectionFactory createFactory(String brokerUrl) {
1:         ActiveMQConnectionFactory cf = new ActiveMQConnectionFactory();
1:         cf.setBrokerURL(brokerUrl);
1: 
1:         return cf;
1:     }
1:     private class SendingThread extends Thread {
1:         private String brokerUrl;
1:         private String subject;
1: 
1:         SendingThread(String brokerUrl, String subject) {
0:             this.brokerUrl = brokerUrl;
1:             this.subject = subject;
1:             setDaemon(false);
1:         }
1: 
1:         public void run() {
1:             try {
1:                 Session session = createSession(brokerConnection);
1:                 Destination dest = session.createQueue(subject);
1:                 MessageProducer producer = session.createProducer(dest);
1:                 producer.setDeliveryMode(DeliveryMode.NON_PERSISTENT);
0:                 for (int i = 0;i < 20;i++) {
1:                     String txt = "Text Message: " + i;
1:                     TextMessage msg = session.createTextMessage(txt);
1:                     producer.send(msg);
0:                     log.info(formatter.format(new Date()) + " Sent ==> " + msg + " to " + subject);
1:                     Thread.sleep(1000);
1:                 }
1:                 session.close();
1:             }
0:             catch (Exception e) {
1:                 e.printStackTrace();
1:             }
1:         }
1:     }
1:     private static class SimpleConsumer implements MessageListener {
0:         private Map msgs = new HashMap();
1: 
1:         public void onMessage(Message message) {
0:             log.info(formatter.format(new Date()) + " SimpleConsumer Message Received: " + message);
1:             try {
1:                 String id = message.getJMSMessageID();
1:                 assertNull("Message is duplicate: " + id, msgs.get(id));
1:                 msgs.put(id, message);
1:             }
0:             catch (Exception e) {
1:                 e.printStackTrace();
1:             }
1:         }
1:     }
1: }
============================================================================