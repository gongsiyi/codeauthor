1:6ce702d: /**
1:6ce702d:  * Licensed to the Apache Software Foundation (ASF) under one or more
1:6ce702d:  * contributor license agreements.  See the NOTICE file distributed with
1:6ce702d:  * this work for additional information regarding copyright ownership.
1:6ce702d:  * The ASF licenses this file to You under the Apache License, Version 2.0
1:6ce702d:  * (the "License"); you may not use this file except in compliance with
1:6ce702d:  * the License.  You may obtain a copy of the License at
1:6ce702d:  *
1:6ce702d:  *      http://www.apache.org/licenses/LICENSE-2.0
1:6ce702d:  *
1:6ce702d:  * Unless required by applicable law or agreed to in writing, software
1:6ce702d:  * distributed under the License is distributed on an "AS IS" BASIS,
1:6ce702d:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:6ce702d:  * See the License for the specific language governing permissions and
1:6ce702d:  * limitations under the License.
1:6ce702d:  */
1:6ce702d: package org.apache.activemq.broker;
2:6ce702d: 
1:5e05df1: import java.io.IOException;
1:5e05df1: 
1:6ce702d: import org.apache.activemq.Service;
1:6ce702d: import org.apache.activemq.store.PersistenceAdapter;
1:6ce702d: 
1:6ce702d: /**
1:6ce702d:  * Represents a lock service to ensure that a broker is the only master
1:6ce702d:  */
1:6ce702d: public interface Locker extends Service {
1:6ce702d: 
1:6ce702d:     /**
1:6ce702d:      * Used by a timer to keep alive the lock.
1:6ce702d:      * If the method returns false the broker should be terminated
1:6ce702d:      * if an exception is thrown, the lock state cannot be determined
1:6ce702d:      */
1:6ce702d:     boolean keepAlive() throws IOException;
1:6ce702d: 
1:6ce702d:     /**
1:6ce702d:      * set the delay interval in milliseconds between lock acquire attempts
1:6ce702d:      *
1:6ce702d:      * @param lockAcquireSleepInterval the sleep interval in miliseconds
1:6ce702d:      */
1:6ce702d:     void setLockAcquireSleepInterval(long lockAcquireSleepInterval);
1:6ce702d: 
1:6ce702d:     /**
1:6ce702d:      * Set the name of the lock to use.
1:6ce702d:      */
1:6ce702d:     public void setName(String name);
1:6ce702d: 
1:6ce702d:     /**
1:6ce702d:      * Specify whether to fail immediately if the lock is already held.  When set, the CustomLock must throw an
1:6ce702d:      * IOException immediately upon detecting the lock is already held.
1:6ce702d:      *
1:6ce702d:      * @param failIfLocked: true => fail immediately if the lock is held; false => block until the lock can be obtained
1:6ce702d:      *                      (default).
1:6ce702d:      */
1:6ce702d:     public void setFailIfLocked(boolean failIfLocked);
1:6ce702d: 
1:efaa351:     /**
1:efaa351:      * A reference to what is locked
1:efaa351:      */
1:efaa351:     public void setLockable(LockableServiceSupport lockable);
1:6ce702d: 
1:6ce702d:     /**
1:f5178cc:      * Optionally configure the locker with the persistence adapter currently used
1:f5178cc:      * You can use persistence adapter configuration details like, data directory
1:f5178cc:      * datasource, etc. to be used by the locker
1:6ce702d:      *
1:6ce702d:      * @param persistenceAdapter
1:6ce702d:      * @throws IOException
1:6ce702d:      */
1:6ce702d:     public void configure(PersistenceAdapter persistenceAdapter) throws IOException;
1:6ce702d: 
1:6ce702d: }
============================================================================
author:Timothy Bish
-------------------------------------------------------------------------------
commit:5e05df1
/////////////////////////////////////////////////////////////////////////
1: import java.io.IOException;
1: 
author:gtully
-------------------------------------------------------------------------------
commit:efaa351
/////////////////////////////////////////////////////////////////////////
1:     /**
1:      * A reference to what is locked
1:      */
1:     public void setLockable(LockableServiceSupport lockable);
author:Hiram R. Chirino
-------------------------------------------------------------------------------
commit:58aca86
author:Bosanac Dejan
-------------------------------------------------------------------------------
commit:f5178cc
/////////////////////////////////////////////////////////////////////////
1:      * Optionally configure the locker with the persistence adapter currently used
1:      * You can use persistence adapter configuration details like, data directory
1:      * datasource, etc. to be used by the locker
commit:6ce702d
/////////////////////////////////////////////////////////////////////////
1: /**
1:  * Licensed to the Apache Software Foundation (ASF) under one or more
1:  * contributor license agreements.  See the NOTICE file distributed with
1:  * this work for additional information regarding copyright ownership.
1:  * The ASF licenses this file to You under the Apache License, Version 2.0
1:  * (the "License"); you may not use this file except in compliance with
1:  * the License.  You may obtain a copy of the License at
1:  *
1:  *      http://www.apache.org/licenses/LICENSE-2.0
1:  *
1:  * Unless required by applicable law or agreed to in writing, software
1:  * distributed under the License is distributed on an "AS IS" BASIS,
1:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:  * See the License for the specific language governing permissions and
1:  * limitations under the License.
1:  */
1: package org.apache.activemq.broker;
1: 
1: import org.apache.activemq.Service;
1: import org.apache.activemq.store.PersistenceAdapter;
1: 
0: import java.io.IOException;
1: 
1: /**
1:  * Represents a lock service to ensure that a broker is the only master
1:  */
1: public interface Locker extends Service {
1: 
1:     /**
1:      * Used by a timer to keep alive the lock.
1:      * If the method returns false the broker should be terminated
1:      * if an exception is thrown, the lock state cannot be determined
1:      */
1:     boolean keepAlive() throws IOException;
1: 
1:     /**
1:      * set the delay interval in milliseconds between lock acquire attempts
1:      *
1:      * @param lockAcquireSleepInterval the sleep interval in miliseconds
1:      */
1:     void setLockAcquireSleepInterval(long lockAcquireSleepInterval);
1: 
1:     /**
1:      * Set the name of the lock to use.
1:      */
1:     public void setName(String name);
1: 
1:     /**
1:      * Specify whether to fail immediately if the lock is already held.  When set, the CustomLock must throw an
1:      * IOException immediately upon detecting the lock is already held.
1:      *
1:      * @param failIfLocked: true => fail immediately if the lock is held; false => block until the lock can be obtained
1:      *                      (default).
1:      */
1:     public void setFailIfLocked(boolean failIfLocked);
1: 
1: 
1:     /**
0:      * Configure the locker with the persistence adapter currently used
1:      *
1:      * @param persistenceAdapter
1:      * @throws IOException
1:      */
1:     public void configure(PersistenceAdapter persistenceAdapter) throws IOException;
1: 
1: }
============================================================================