1:4b018b4: /*
1:82a5839:  * Licensed to the Apache Software Foundation (ASF) under one or more
1:82a5839:  * contributor license agreements.  See the NOTICE file distributed with
1:82a5839:  * this work for additional information regarding copyright ownership.
1:82a5839:  * The ASF licenses this file to You under the Apache License, Version 2.0
1:82a5839:  * (the "License"); you may not use this file except in compliance with
1:82a5839:  * the License.  You may obtain a copy of the License at
1:82a5839:  *
1:82a5839:  *      http://www.apache.org/licenses/LICENSE-2.0
1:82a5839:  *
1:82a5839:  * Unless required by applicable law or agreed to in writing, software
1:82a5839:  * distributed under the License is distributed on an "AS IS" BASIS,
1:82a5839:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:82a5839:  * See the License for the specific language governing permissions and
1:82a5839:  * limitations under the License.
1:82a5839:  */
1:82a5839: package org.apache.activemq.transport.amqp.client.transport;
1:82a5839: 
1:82a5839: import java.util.Arrays;
1:82a5839: import java.util.Collections;
1:82a5839: import java.util.List;
1:82a5839: 
2:82a5839: /**
1:82a5839:  * Holds the defined SSL options for connections that operate over a secure
1:82a5839:  * transport.  Options are read from the environment and can be overridden by
1:82a5839:  * specifying them on the connection URI.
1:82a5839:  */
1:82a5839: public class NettyTransportSslOptions extends NettyTransportOptions {
1:82a5839: 
1:82a5839:     public static final String DEFAULT_STORE_TYPE = "jks";
1:82a5839:     public static final String DEFAULT_CONTEXT_PROTOCOL = "TLS";
1:82a5839:     public static final boolean DEFAULT_TRUST_ALL = false;
1:31c55f7:     public static final boolean DEFAULT_VERIFY_HOST = false;
1:82a5839:     public static final List<String> DEFAULT_DISABLED_PROTOCOLS = Collections.unmodifiableList(Arrays.asList(new String[]{"SSLv2Hello", "SSLv3"}));
1:82a5839:     public static final int DEFAULT_SSL_PORT = 5671;
1:82a5839: 
1:82a5839:     public static final NettyTransportSslOptions INSTANCE = new NettyTransportSslOptions();
1:82a5839: 
1:82a5839:     private String keyStoreLocation;
1:82a5839:     private String keyStorePassword;
1:82a5839:     private String trustStoreLocation;
1:82a5839:     private String trustStorePassword;
1:82a5839:     private String storeType = DEFAULT_STORE_TYPE;
1:82a5839:     private String[] enabledCipherSuites;
1:82a5839:     private String[] disabledCipherSuites;
1:82a5839:     private String[] enabledProtocols;
1:82a5839:     private String[] disabledProtocols = DEFAULT_DISABLED_PROTOCOLS.toArray(new String[0]);
1:82a5839:     private String contextProtocol = DEFAULT_CONTEXT_PROTOCOL;
1:82a5839: 
1:82a5839:     private boolean trustAll = DEFAULT_TRUST_ALL;
1:82a5839:     private boolean verifyHost = DEFAULT_VERIFY_HOST;
1:82a5839:     private String keyAlias;
1:82a5839:     private int defaultSslPort = DEFAULT_SSL_PORT;
1:82a5839: 
1:82a5839:     static {
1:82a5839:         INSTANCE.setKeyStoreLocation(System.getProperty("javax.net.ssl.keyStore"));
1:82a5839:         INSTANCE.setKeyStorePassword(System.getProperty("javax.net.ssl.keyStorePassword"));
1:82a5839:         INSTANCE.setTrustStoreLocation(System.getProperty("javax.net.ssl.trustStore"));
1:82a5839:         INSTANCE.setTrustStorePassword(System.getProperty("javax.net.ssl.keyStorePassword"));
1:82a5839:     }
1:82a5839: 
1:82a5839:     /**
1:82a5839:      * @return the keyStoreLocation currently configured.
1:82a5839:      */
1:82a5839:     public String getKeyStoreLocation() {
1:82a5839:         return keyStoreLocation;
1:82a5839:     }
1:82a5839: 
1:82a5839:     /**
1:82a5839:      * Sets the location on disk of the key store to use.
1:82a5839:      *
1:82a5839:      * @param keyStoreLocation
1:82a5839:      *        the keyStoreLocation to use to create the key manager.
1:82a5839:      */
1:82a5839:     public void setKeyStoreLocation(String keyStoreLocation) {
1:82a5839:         this.keyStoreLocation = keyStoreLocation;
1:82a5839:     }
1:82a5839: 
1:82a5839:     /**
1:82a5839:      * @return the keyStorePassword
1:82a5839:      */
1:82a5839:     public String getKeyStorePassword() {
1:82a5839:         return keyStorePassword;
1:82a5839:     }
1:82a5839: 
1:82a5839:     /**
1:82a5839:      * @param keyStorePassword the keyStorePassword to set
1:82a5839:      */
1:82a5839:     public void setKeyStorePassword(String keyStorePassword) {
1:82a5839:         this.keyStorePassword = keyStorePassword;
1:82a5839:     }
1:82a5839: 
1:82a5839:     /**
1:82a5839:      * @return the trustStoreLocation
1:82a5839:      */
1:82a5839:     public String getTrustStoreLocation() {
1:82a5839:         return trustStoreLocation;
1:82a5839:     }
1:82a5839: 
1:82a5839:     /**
1:82a5839:      * @param trustStoreLocation the trustStoreLocation to set
1:82a5839:      */
1:82a5839:     public void setTrustStoreLocation(String trustStoreLocation) {
1:82a5839:         this.trustStoreLocation = trustStoreLocation;
1:82a5839:     }
1:82a5839: 
1:82a5839:     /**
1:82a5839:      * @return the trustStorePassword
1:82a5839:      */
1:82a5839:     public String getTrustStorePassword() {
1:82a5839:         return trustStorePassword;
1:82a5839:     }
1:82a5839: 
1:82a5839:     /**
1:82a5839:      * @param trustStorePassword the trustStorePassword to set
1:82a5839:      */
1:82a5839:     public void setTrustStorePassword(String trustStorePassword) {
1:82a5839:         this.trustStorePassword = trustStorePassword;
1:82a5839:     }
1:82a5839: 
1:82a5839:     /**
1:82a5839:      * @return the storeType
1:82a5839:      */
1:82a5839:     public String getStoreType() {
1:82a5839:         return storeType;
1:82a5839:     }
1:82a5839: 
1:82a5839:     /**
1:82a5839:      * @param storeType
1:82a5839:      *        the format that the store files are encoded in.
1:82a5839:      */
1:82a5839:     public void setStoreType(String storeType) {
1:82a5839:         this.storeType = storeType;
1:82a5839:     }
1:82a5839: 
1:82a5839:     /**
1:82a5839:      * @return the enabledCipherSuites
1:82a5839:      */
1:82a5839:     public String[] getEnabledCipherSuites() {
1:82a5839:         return enabledCipherSuites;
1:82a5839:     }
1:82a5839: 
1:82a5839:     /**
1:82a5839:      * @param enabledCipherSuites the enabledCipherSuites to set
1:82a5839:      */
1:82a5839:     public void setEnabledCipherSuites(String[] enabledCipherSuites) {
1:82a5839:         this.enabledCipherSuites = enabledCipherSuites;
1:82a5839:     }
1:82a5839: 
1:82a5839:     /**
1:82a5839:      * @return the disabledCipherSuites
1:82a5839:      */
1:82a5839:     public String[] getDisabledCipherSuites() {
1:82a5839:         return disabledCipherSuites;
1:82a5839:     }
1:82a5839: 
1:82a5839:     /**
1:82a5839:      * @param disabledCipherSuites the disabledCipherSuites to set
1:82a5839:      */
1:82a5839:     public void setDisabledCipherSuites(String[] disabledCipherSuites) {
1:82a5839:         this.disabledCipherSuites = disabledCipherSuites;
1:82a5839:     }
1:82a5839: 
1:82a5839:     /**
1:82a5839:      * @return the enabledProtocols or null if the defaults should be used
1:82a5839:      */
1:82a5839:     public String[] getEnabledProtocols() {
1:82a5839:         return enabledProtocols;
1:82a5839:     }
1:82a5839: 
1:82a5839:     /**
1:82a5839:      * The protocols to be set as enabled.
1:82a5839:      *
1:82a5839:      * @param enabledProtocols the enabled protocols to set, or null if the defaults should be used.
1:82a5839:      */
1:82a5839:     public void setEnabledProtocols(String[] enabledProtocols) {
1:82a5839:         this.enabledProtocols = enabledProtocols;
1:82a5839:     }
1:82a5839: 
1:82a5839:     /**
1:82a5839:      *
1:82a5839:      * @return the protocols to disable or null if none should be
1:82a5839:      */
1:82a5839:     public String[] getDisabledProtocols() {
1:82a5839:         return disabledProtocols;
1:82a5839:     }
1:82a5839: 
1:82a5839:     /**
1:82a5839:      * The protocols to be disable.
1:82a5839:      *
1:82a5839:      * @param disabledProtocols the protocols to disable, or null if none should be.
1:82a5839:      */
1:82a5839:     public void setDisabledProtocols(String[] disabledProtocols) {
1:82a5839:         this.disabledProtocols = disabledProtocols;
1:82a5839:     }
1:82a5839: 
1:82a5839:     /**
1:82a5839:     * @return the context protocol to use
1:82a5839:     */
1:82a5839:     public String getContextProtocol() {
1:82a5839:         return contextProtocol;
1:82a5839:     }
1:82a5839: 
1:82a5839:     /**
1:82a5839:      * The protocol value to use when creating an SSLContext via
1:82a5839:      * SSLContext.getInstance(protocol).
1:82a5839:      *
1:82a5839:      * @param contextProtocol the context protocol to use.
1:82a5839:      */
1:82a5839:     public void setContextProtocol(String contextProtocol) {
1:82a5839:         this.contextProtocol = contextProtocol;
1:82a5839:     }
1:82a5839: 
1:82a5839:     /**
1:82a5839:      * @return the trustAll
1:82a5839:      */
1:82a5839:     public boolean isTrustAll() {
1:82a5839:         return trustAll;
1:82a5839:     }
1:82a5839: 
1:82a5839:     /**
1:82a5839:      * @param trustAll the trustAll to set
1:82a5839:      */
1:82a5839:     public void setTrustAll(boolean trustAll) {
1:82a5839:         this.trustAll = trustAll;
1:82a5839:     }
1:82a5839: 
1:82a5839:     /**
1:82a5839:      * @return the verifyHost
1:82a5839:      */
1:82a5839:     public boolean isVerifyHost() {
1:82a5839:         return verifyHost;
1:82a5839:     }
1:82a5839: 
1:82a5839:     /**
1:82a5839:      * @param verifyHost the verifyHost to set
1:82a5839:      */
1:82a5839:     public void setVerifyHost(boolean verifyHost) {
1:82a5839:         this.verifyHost = verifyHost;
1:82a5839:     }
1:82a5839: 
1:82a5839:     /**
1:82a5839:      * @return the key alias
1:82a5839:      */
1:82a5839:     public String getKeyAlias() {
1:82a5839:         return keyAlias;
1:82a5839:     }
1:82a5839: 
1:82a5839:     /**
1:82a5839:      * @param keyAlias the key alias to use
1:82a5839:      */
1:82a5839:     public void setKeyAlias(String keyAlias) {
1:82a5839:         this.keyAlias = keyAlias;
1:82a5839:     }
1:82a5839: 
1:82a5839:     public int getDefaultSslPort() {
1:82a5839:         return defaultSslPort;
1:82a5839:     }
1:82a5839: 
1:82a5839:     public void setDefaultSslPort(int defaultSslPort) {
1:82a5839:         this.defaultSslPort = defaultSslPort;
1:82a5839:     }
1:82a5839: 
1:82a5839:     @Override
1:4b018b4:     public boolean isSSL() {
1:4b018b4:         return true;
1:4b018b4:     }
1:4b018b4: 
1:4b018b4:     @Override
1:82a5839:     public NettyTransportSslOptions clone() {
1:82a5839:         return copyOptions(new NettyTransportSslOptions());
1:82a5839:     }
1:82a5839: 
1:82a5839:     protected NettyTransportSslOptions copyOptions(NettyTransportSslOptions copy) {
1:82a5839:         super.copyOptions(copy);
1:82a5839: 
1:82a5839:         copy.setKeyStoreLocation(getKeyStoreLocation());
1:82a5839:         copy.setKeyStorePassword(getKeyStorePassword());
1:82a5839:         copy.setTrustStoreLocation(getTrustStoreLocation());
1:82a5839:         copy.setTrustStorePassword(getTrustStorePassword());
1:82a5839:         copy.setStoreType(getStoreType());
1:82a5839:         copy.setEnabledCipherSuites(getEnabledCipherSuites());
1:82a5839:         copy.setDisabledCipherSuites(getDisabledCipherSuites());
1:82a5839:         copy.setEnabledProtocols(getEnabledProtocols());
1:82a5839:         copy.setDisabledProtocols(getDisabledProtocols());
1:82a5839:         copy.setTrustAll(isTrustAll());
1:82a5839:         copy.setVerifyHost(isVerifyHost());
1:82a5839:         copy.setKeyAlias(getKeyAlias());
1:82a5839:         copy.setContextProtocol(getContextProtocol());
1:82a5839:         return copy;
1:82a5839:     }
1:82a5839: }
============================================================================
author:Timothy Bish
-------------------------------------------------------------------------------
commit:4b018b4
/////////////////////////////////////////////////////////////////////////
1: /*
/////////////////////////////////////////////////////////////////////////
1:     public boolean isSSL() {
1:         return true;
1:     }
1: 
1:     @Override
commit:31c55f7
/////////////////////////////////////////////////////////////////////////
1:     public static final boolean DEFAULT_VERIFY_HOST = false;
commit:82a5839
/////////////////////////////////////////////////////////////////////////
1: /**
1:  * Licensed to the Apache Software Foundation (ASF) under one or more
1:  * contributor license agreements.  See the NOTICE file distributed with
1:  * this work for additional information regarding copyright ownership.
1:  * The ASF licenses this file to You under the Apache License, Version 2.0
1:  * (the "License"); you may not use this file except in compliance with
1:  * the License.  You may obtain a copy of the License at
1:  *
1:  *      http://www.apache.org/licenses/LICENSE-2.0
1:  *
1:  * Unless required by applicable law or agreed to in writing, software
1:  * distributed under the License is distributed on an "AS IS" BASIS,
1:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:  * See the License for the specific language governing permissions and
1:  * limitations under the License.
1:  */
1: package org.apache.activemq.transport.amqp.client.transport;
1: 
1: import java.util.Arrays;
1: import java.util.Collections;
1: import java.util.List;
1: 
1: /**
1:  * Holds the defined SSL options for connections that operate over a secure
1:  * transport.  Options are read from the environment and can be overridden by
1:  * specifying them on the connection URI.
1:  */
1: public class NettyTransportSslOptions extends NettyTransportOptions {
1: 
1:     public static final String DEFAULT_STORE_TYPE = "jks";
1:     public static final String DEFAULT_CONTEXT_PROTOCOL = "TLS";
1:     public static final boolean DEFAULT_TRUST_ALL = false;
0:     public static final boolean DEFAULT_VERIFY_HOST = true;
1:     public static final List<String> DEFAULT_DISABLED_PROTOCOLS = Collections.unmodifiableList(Arrays.asList(new String[]{"SSLv2Hello", "SSLv3"}));
1:     public static final int DEFAULT_SSL_PORT = 5671;
1: 
1:     public static final NettyTransportSslOptions INSTANCE = new NettyTransportSslOptions();
1: 
1:     private String keyStoreLocation;
1:     private String keyStorePassword;
1:     private String trustStoreLocation;
1:     private String trustStorePassword;
1:     private String storeType = DEFAULT_STORE_TYPE;
1:     private String[] enabledCipherSuites;
1:     private String[] disabledCipherSuites;
1:     private String[] enabledProtocols;
1:     private String[] disabledProtocols = DEFAULT_DISABLED_PROTOCOLS.toArray(new String[0]);
1:     private String contextProtocol = DEFAULT_CONTEXT_PROTOCOL;
1: 
1:     private boolean trustAll = DEFAULT_TRUST_ALL;
1:     private boolean verifyHost = DEFAULT_VERIFY_HOST;
1:     private String keyAlias;
1:     private int defaultSslPort = DEFAULT_SSL_PORT;
1: 
1:     static {
1:         INSTANCE.setKeyStoreLocation(System.getProperty("javax.net.ssl.keyStore"));
1:         INSTANCE.setKeyStorePassword(System.getProperty("javax.net.ssl.keyStorePassword"));
1:         INSTANCE.setTrustStoreLocation(System.getProperty("javax.net.ssl.trustStore"));
1:         INSTANCE.setTrustStorePassword(System.getProperty("javax.net.ssl.keyStorePassword"));
1:     }
1: 
1:     /**
1:      * @return the keyStoreLocation currently configured.
1:      */
1:     public String getKeyStoreLocation() {
1:         return keyStoreLocation;
1:     }
1: 
1:     /**
1:      * Sets the location on disk of the key store to use.
1:      *
1:      * @param keyStoreLocation
1:      *        the keyStoreLocation to use to create the key manager.
1:      */
1:     public void setKeyStoreLocation(String keyStoreLocation) {
1:         this.keyStoreLocation = keyStoreLocation;
1:     }
1: 
1:     /**
1:      * @return the keyStorePassword
1:      */
1:     public String getKeyStorePassword() {
1:         return keyStorePassword;
1:     }
1: 
1:     /**
1:      * @param keyStorePassword the keyStorePassword to set
1:      */
1:     public void setKeyStorePassword(String keyStorePassword) {
1:         this.keyStorePassword = keyStorePassword;
1:     }
1: 
1:     /**
1:      * @return the trustStoreLocation
1:      */
1:     public String getTrustStoreLocation() {
1:         return trustStoreLocation;
1:     }
1: 
1:     /**
1:      * @param trustStoreLocation the trustStoreLocation to set
1:      */
1:     public void setTrustStoreLocation(String trustStoreLocation) {
1:         this.trustStoreLocation = trustStoreLocation;
1:     }
1: 
1:     /**
1:      * @return the trustStorePassword
1:      */
1:     public String getTrustStorePassword() {
1:         return trustStorePassword;
1:     }
1: 
1:     /**
1:      * @param trustStorePassword the trustStorePassword to set
1:      */
1:     public void setTrustStorePassword(String trustStorePassword) {
1:         this.trustStorePassword = trustStorePassword;
1:     }
1: 
1:     /**
1:      * @return the storeType
1:      */
1:     public String getStoreType() {
1:         return storeType;
1:     }
1: 
1:     /**
1:      * @param storeType
1:      *        the format that the store files are encoded in.
1:      */
1:     public void setStoreType(String storeType) {
1:         this.storeType = storeType;
1:     }
1: 
1:     /**
1:      * @return the enabledCipherSuites
1:      */
1:     public String[] getEnabledCipherSuites() {
1:         return enabledCipherSuites;
1:     }
1: 
1:     /**
1:      * @param enabledCipherSuites the enabledCipherSuites to set
1:      */
1:     public void setEnabledCipherSuites(String[] enabledCipherSuites) {
1:         this.enabledCipherSuites = enabledCipherSuites;
1:     }
1: 
1:     /**
1:      * @return the disabledCipherSuites
1:      */
1:     public String[] getDisabledCipherSuites() {
1:         return disabledCipherSuites;
1:     }
1: 
1:     /**
1:      * @param disabledCipherSuites the disabledCipherSuites to set
1:      */
1:     public void setDisabledCipherSuites(String[] disabledCipherSuites) {
1:         this.disabledCipherSuites = disabledCipherSuites;
1:     }
1: 
1:     /**
1:      * @return the enabledProtocols or null if the defaults should be used
1:      */
1:     public String[] getEnabledProtocols() {
1:         return enabledProtocols;
1:     }
1: 
1:     /**
1:      * The protocols to be set as enabled.
1:      *
1:      * @param enabledProtocols the enabled protocols to set, or null if the defaults should be used.
1:      */
1:     public void setEnabledProtocols(String[] enabledProtocols) {
1:         this.enabledProtocols = enabledProtocols;
1:     }
1: 
1:     /**
1:      *
1:      * @return the protocols to disable or null if none should be
1:      */
1:     public String[] getDisabledProtocols() {
1:         return disabledProtocols;
1:     }
1: 
1:     /**
1:      * The protocols to be disable.
1:      *
1:      * @param disabledProtocols the protocols to disable, or null if none should be.
1:      */
1:     public void setDisabledProtocols(String[] disabledProtocols) {
1:         this.disabledProtocols = disabledProtocols;
1:     }
1: 
1:     /**
1:     * @return the context protocol to use
1:     */
1:     public String getContextProtocol() {
1:         return contextProtocol;
1:     }
1: 
1:     /**
1:      * The protocol value to use when creating an SSLContext via
1:      * SSLContext.getInstance(protocol).
1:      *
1:      * @param contextProtocol the context protocol to use.
1:      */
1:     public void setContextProtocol(String contextProtocol) {
1:         this.contextProtocol = contextProtocol;
1:     }
1: 
1:     /**
1:      * @return the trustAll
1:      */
1:     public boolean isTrustAll() {
1:         return trustAll;
1:     }
1: 
1:     /**
1:      * @param trustAll the trustAll to set
1:      */
1:     public void setTrustAll(boolean trustAll) {
1:         this.trustAll = trustAll;
1:     }
1: 
1:     /**
1:      * @return the verifyHost
1:      */
1:     public boolean isVerifyHost() {
1:         return verifyHost;
1:     }
1: 
1:     /**
1:      * @param verifyHost the verifyHost to set
1:      */
1:     public void setVerifyHost(boolean verifyHost) {
1:         this.verifyHost = verifyHost;
1:     }
1: 
1:     /**
1:      * @return the key alias
1:      */
1:     public String getKeyAlias() {
1:         return keyAlias;
1:     }
1: 
1:     /**
1:      * @param keyAlias the key alias to use
1:      */
1:     public void setKeyAlias(String keyAlias) {
1:         this.keyAlias = keyAlias;
1:     }
1: 
1:     public int getDefaultSslPort() {
1:         return defaultSslPort;
1:     }
1: 
1:     public void setDefaultSslPort(int defaultSslPort) {
1:         this.defaultSslPort = defaultSslPort;
1:     }
1: 
1:     @Override
1:     public NettyTransportSslOptions clone() {
1:         return copyOptions(new NettyTransportSslOptions());
1:     }
1: 
1:     protected NettyTransportSslOptions copyOptions(NettyTransportSslOptions copy) {
1:         super.copyOptions(copy);
1: 
1:         copy.setKeyStoreLocation(getKeyStoreLocation());
1:         copy.setKeyStorePassword(getKeyStorePassword());
1:         copy.setTrustStoreLocation(getTrustStoreLocation());
1:         copy.setTrustStorePassword(getTrustStorePassword());
1:         copy.setStoreType(getStoreType());
1:         copy.setEnabledCipherSuites(getEnabledCipherSuites());
1:         copy.setDisabledCipherSuites(getDisabledCipherSuites());
1:         copy.setEnabledProtocols(getEnabledProtocols());
1:         copy.setDisabledProtocols(getDisabledProtocols());
1:         copy.setTrustAll(isTrustAll());
1:         copy.setVerifyHost(isVerifyHost());
1:         copy.setKeyAlias(getKeyAlias());
1:         copy.setContextProtocol(getContextProtocol());
1:         return copy;
1:     }
1: }
============================================================================