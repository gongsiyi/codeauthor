1:d29ca2a: /**
1:57b4941:  * Licensed to the Apache Software Foundation (ASF) under one or more
1:57b4941:  * contributor license agreements.  See the NOTICE file distributed with
1:57b4941:  * this work for additional information regarding copyright ownership.
1:57b4941:  * The ASF licenses this file to You under the Apache License, Version 2.0
1:57b4941:  * (the "License"); you may not use this file except in compliance with
1:57b4941:  * the License.  You may obtain a copy of the License at
2:f812e34:  *
1:230a86c:  *      http://www.apache.org/licenses/LICENSE-2.0
1:b0c2a40:  *
1:d29ca2a:  * Unless required by applicable law or agreed to in writing, software
1:d29ca2a:  * distributed under the License is distributed on an "AS IS" BASIS,
1:d29ca2a:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:d29ca2a:  * See the License for the specific language governing permissions and
1:d29ca2a:  * limitations under the License.
1:d29ca2a:  */
1:d29ca2a: package org.apache.activemq;
11:d29ca2a: 
1:b08ae50: import java.net.MalformedURLException;
1:d29ca2a: import java.util.Enumeration;
1:f812e34: 
1:e996dbe: import javax.jms.BytesMessage;
1:e996dbe: import javax.jms.Destination;
1:e996dbe: import javax.jms.JMSException;
1:e996dbe: import javax.jms.MapMessage;
1:d29ca2a: import javax.jms.Message;
1:e996dbe: import javax.jms.MessageEOFException;
1:e996dbe: import javax.jms.ObjectMessage;
1:e996dbe: import javax.jms.StreamMessage;
1:e996dbe: import javax.jms.TextMessage;
1:e996dbe: 
1:b08ae50: import org.apache.activemq.blob.BlobDownloader;
1:e996dbe: import org.apache.activemq.command.ActiveMQBlobMessage;
1:e996dbe: import org.apache.activemq.command.ActiveMQBytesMessage;
1:e996dbe: import org.apache.activemq.command.ActiveMQDestination;
1:e996dbe: import org.apache.activemq.command.ActiveMQMapMessage;
1:e996dbe: import org.apache.activemq.command.ActiveMQMessage;
1:e996dbe: import org.apache.activemq.command.ActiveMQObjectMessage;
1:e996dbe: import org.apache.activemq.command.ActiveMQStreamMessage;
1:e996dbe: import org.apache.activemq.command.ActiveMQTextMessage;
1:f812e34: 
1:d29ca2a: /**
1:f812e34:  * A helper class for converting normal JMS interfaces into ActiveMQ specific
1:f812e34:  * ones.
1:e996dbe:  *
1:e996dbe:  *
1:d29ca2a:  */
1:933eb2f: public final class ActiveMQMessageTransformation {
1:f812e34: 
1:e996dbe:     private ActiveMQMessageTransformation() {
1:933eb2f:     }
1:e996dbe: 
1:f812e34:     /**
1:d29ca2a:      * Creates a an available JMS message from another provider.
1:e996dbe:      *
1:f812e34:      * @param destination - Destination to be converted into ActiveMQ's
1:f812e34:      *                implementation.
1:f812e34:      * @return ActiveMQDestination - ActiveMQ's implementation of the
1:f812e34:      *         destination.
1:f812e34:      * @throws JMSException if an error occurs
1:f812e34:      */
1:f812e34:     public static ActiveMQDestination transformDestination(Destination destination) throws JMSException {
1:e996dbe:         return ActiveMQDestination.transform(destination);
1:f812e34:     }
1:933eb2f: 
1:d29ca2a:     /**
1:f812e34:      * Creates a fast shallow copy of the current ActiveMQMessage or creates a
1:f812e34:      * whole new message instance from an available JMS message from another
1:f812e34:      * provider.
1:e996dbe:      *
1:d29ca2a:      * @param message - Message to be converted into ActiveMQ's implementation.
1:f812e34:      * @param connection
1:f812e34:      * @return ActiveMQMessage - ActiveMQ's implementation object of the
1:f812e34:      *         message.
2:d29ca2a:      * @throws JMSException if an error occurs
1:d29ca2a:      */
1:933eb2f:     public static ActiveMQMessage transformMessage(Message message, ActiveMQConnection connection)
1:f812e34:         throws JMSException {
1:d29ca2a:         if (message instanceof ActiveMQMessage) {
1:f812e34:             return (ActiveMQMessage)message;
1:d29ca2a: 
1:f812e34:         } else {
1:d29ca2a:             ActiveMQMessage activeMessage = null;
1:d29ca2a: 
1:d29ca2a:             if (message instanceof BytesMessage) {
1:f812e34:                 BytesMessage bytesMsg = (BytesMessage)message;
1:d29ca2a:                 bytesMsg.reset();
1:d29ca2a:                 ActiveMQBytesMessage msg = new ActiveMQBytesMessage();
2:d29ca2a:                 msg.setConnection(connection);
2:d29ca2a:                 try {
1:d29ca2a:                     for (;;) {
1:d29ca2a:                         // Reads a byte from the message stream until the stream
1:d29ca2a:                         // is empty
1:d29ca2a:                         msg.writeByte(bytesMsg.readByte());
1:86cbdfd:                     }
1:d29ca2a:                 } catch (MessageEOFException e) {
1:d29ca2a:                     // if an end of message stream as expected
1:d29ca2a:                 } catch (JMSException e) {
10:d29ca2a:                 }
1:d29ca2a: 
2:d29ca2a:                 activeMessage = msg;
1:d29ca2a:             } else if (message instanceof MapMessage) {
1:f812e34:                 MapMessage mapMsg = (MapMessage)message;
1:d29ca2a:                 ActiveMQMapMessage msg = new ActiveMQMapMessage();
1:b08ae50:                 msg.setConnection(connection);
1:d29ca2a:                 Enumeration iter = mapMsg.getMapNames();
1:d29ca2a: 
1:d29ca2a:                 while (iter.hasMoreElements()) {
1:d29ca2a:                     String name = iter.nextElement().toString();
1:d29ca2a:                     msg.setObject(name, mapMsg.getObject(name));
1:d29ca2a:                 }
1:d29ca2a: 
1:d29ca2a:                 activeMessage = msg;
1:d29ca2a:             } else if (message instanceof ObjectMessage) {
1:f812e34:                 ObjectMessage objMsg = (ObjectMessage)message;
1:d29ca2a:                 ActiveMQObjectMessage msg = new ActiveMQObjectMessage();
1:d29ca2a:                 msg.setConnection(connection);
1:d29ca2a:                 msg.setObject(objMsg.getObject());
1:d29ca2a:                 msg.storeContent();
1:d29ca2a:                 activeMessage = msg;
1:d29ca2a:             } else if (message instanceof StreamMessage) {
1:f812e34:                 StreamMessage streamMessage = (StreamMessage)message;
1:d29ca2a:                 streamMessage.reset();
1:d29ca2a:                 ActiveMQStreamMessage msg = new ActiveMQStreamMessage();
1:d29ca2a:                 msg.setConnection(connection);
1:d29ca2a:                 Object obj = null;
1:d29ca2a: 
1:b08ae50:                 try {
1:d29ca2a:                     while ((obj = streamMessage.readObject()) != null) {
1:d29ca2a:                         msg.writeObject(obj);
1:d29ca2a:                     }
1:d29ca2a:                 } catch (MessageEOFException e) {
1:d29ca2a:                     // if an end of message stream as expected
1:d29ca2a:                 } catch (JMSException e) {
1:d29ca2a:                 }
1:d29ca2a: 
1:d29ca2a:                 activeMessage = msg;
1:d29ca2a:             } else if (message instanceof TextMessage) {
1:f812e34:                 TextMessage textMsg = (TextMessage)message;
1:d29ca2a:                 ActiveMQTextMessage msg = new ActiveMQTextMessage();
1:d29ca2a:                 msg.setConnection(connection);
1:d29ca2a:                 msg.setText(textMsg.getText());
1:b08ae50:                 activeMessage = msg;
1:b08ae50:             } else if (message instanceof BlobMessage) {
1:e996dbe:                 BlobMessage blobMessage = (BlobMessage)message;
1:e996dbe:                 ActiveMQBlobMessage msg = new ActiveMQBlobMessage();
1:e996dbe:                 msg.setConnection(connection);
1:6585d5c:                 if (connection != null){
1:e996dbe:                     msg.setBlobDownloader(new BlobDownloader(connection.getBlobTransferPolicy()));
1:6585d5c:                 }
1:e996dbe:                 try {
1:e996dbe:                     msg.setURL(blobMessage.getURL());
1:e996dbe:                 } catch (MalformedURLException e) {
1:e996dbe: 
1:e996dbe:                 }
1:e996dbe:                 activeMessage = msg;
2:d29ca2a:             } else {
1:d29ca2a:                 activeMessage = new ActiveMQMessage();
1:d29ca2a:                 activeMessage.setConnection(connection);
1:b08ae50:             }
1:b08ae50: 
1:86faaef:             copyProperties(message, activeMessage);
1:d29ca2a: 
1:d29ca2a:             return activeMessage;
1:d29ca2a:         }
1:d29ca2a:     }
1:d29ca2a: 
1:d29ca2a:     /**
1:f812e34:      * Copies the standard JMS and user defined properties from the givem
1:f812e34:      * message to the specified message
1:e996dbe:      *
1:86faaef:      * @param fromMessage the message to take the properties from
1:13af1e3:      * @param toMessage the message to add the properties to
1:86faaef:      * @throws JMSException
1:d29ca2a:      */
1:13af1e3:     public static void copyProperties(Message fromMessage, Message toMessage) throws JMSException {
1:13af1e3:         toMessage.setJMSMessageID(fromMessage.getJMSMessageID());
1:13af1e3:         toMessage.setJMSCorrelationID(fromMessage.getJMSCorrelationID());
1:13af1e3:         toMessage.setJMSReplyTo(transformDestination(fromMessage.getJMSReplyTo()));
1:13af1e3:         toMessage.setJMSDestination(transformDestination(fromMessage.getJMSDestination()));
1:13af1e3:         toMessage.setJMSDeliveryMode(fromMessage.getJMSDeliveryMode());
1:13af1e3:         toMessage.setJMSRedelivered(fromMessage.getJMSRedelivered());
1:13af1e3:         toMessage.setJMSType(fromMessage.getJMSType());
1:13af1e3:         toMessage.setJMSExpiration(fromMessage.getJMSExpiration());
1:13af1e3:         toMessage.setJMSPriority(fromMessage.getJMSPriority());
1:13af1e3:         toMessage.setJMSTimestamp(fromMessage.getJMSTimestamp());
1:d29ca2a: 
1:86faaef:         Enumeration propertyNames = fromMessage.getPropertyNames();
1:d29ca2a: 
1:d29ca2a:         while (propertyNames.hasMoreElements()) {
1:d29ca2a:             String name = propertyNames.nextElement().toString();
1:86faaef:             Object obj = fromMessage.getObjectProperty(name);
1:13af1e3:             toMessage.setObjectProperty(name, obj);
1:d29ca2a:         }
1:d29ca2a:     }
1:d29ca2a: }
============================================================================
author:Hadrian Zbarcea
-------------------------------------------------------------------------------
commit:d54d046
author:Timothy Bish
-------------------------------------------------------------------------------
commit:e996dbe
/////////////////////////////////////////////////////////////////////////
1: import javax.jms.BytesMessage;
1: import javax.jms.Destination;
1: import javax.jms.JMSException;
1: import javax.jms.MapMessage;
1: import javax.jms.MessageEOFException;
1: import javax.jms.ObjectMessage;
1: import javax.jms.StreamMessage;
1: import javax.jms.TextMessage;
1: 
1: import org.apache.activemq.command.ActiveMQBlobMessage;
1: import org.apache.activemq.command.ActiveMQBytesMessage;
1: import org.apache.activemq.command.ActiveMQDestination;
1: import org.apache.activemq.command.ActiveMQMapMessage;
1: import org.apache.activemq.command.ActiveMQMessage;
1: import org.apache.activemq.command.ActiveMQObjectMessage;
1: import org.apache.activemq.command.ActiveMQStreamMessage;
1: import org.apache.activemq.command.ActiveMQTextMessage;
1:  *
1:  *
1:     private ActiveMQMessageTransformation() {
1: 
1:      *
/////////////////////////////////////////////////////////////////////////
1:         return ActiveMQDestination.transform(destination);
1:      *
/////////////////////////////////////////////////////////////////////////
1:                 BlobMessage blobMessage = (BlobMessage)message;
1:                 ActiveMQBlobMessage msg = new ActiveMQBlobMessage();
1:                 msg.setConnection(connection);
1:                     msg.setBlobDownloader(new BlobDownloader(connection.getBlobTransferPolicy()));
1:                 try {
1:                     msg.setURL(blobMessage.getURL());
1:                 } catch (MalformedURLException e) {
1: 
1:                 }
1:                 activeMessage = msg;
/////////////////////////////////////////////////////////////////////////
1:      *
author:Robert Davies
-------------------------------------------------------------------------------
commit:6585d5c
/////////////////////////////////////////////////////////////////////////
0: import javax.jms.*;
0: import org.apache.activemq.command.*;
/////////////////////////////////////////////////////////////////////////
1:                 if (connection != null){
0:             	    msg.setBlobDownloader(new BlobDownloader(connection.getBlobTransferPolicy()));
1:                 }
commit:b08ae50
/////////////////////////////////////////////////////////////////////////
1: import java.net.MalformedURLException;
/////////////////////////////////////////////////////////////////////////
1: import org.apache.activemq.blob.BlobDownloader;
0: import org.apache.activemq.blob.BlobUploader;
0: import org.apache.activemq.command.ActiveMQBlobMessage;
/////////////////////////////////////////////////////////////////////////
1:             } else if (message instanceof BlobMessage) {
0:             	BlobMessage blobMessage = (BlobMessage)message;
0:             	ActiveMQBlobMessage msg = new ActiveMQBlobMessage();
1:             	msg.setConnection(connection);
0:             	msg.setBlobDownloader(new BlobDownloader(connection.getBlobTransferPolicy()));
1:             	try {
0: 					msg.setURL(blobMessage.getURL());
0: 				} catch (MalformedURLException e) {
1: 					
1: 				}
1:             	activeMessage = msg;
author:Hiram R. Chirino
-------------------------------------------------------------------------------
commit:9a8f6e4
commit:b0c2a40
/////////////////////////////////////////////////////////////////////////
1:  * 
commit:933eb2f
/////////////////////////////////////////////////////////////////////////
1: public final class ActiveMQMessageTransformation {
0:     private ActiveMQMessageTransformation() {    
1:     }
1:     
/////////////////////////////////////////////////////////////////////////
1:     public static ActiveMQMessage transformMessage(Message message, ActiveMQConnection connection)
commit:74a7a8b
/////////////////////////////////////////////////////////////////////////
0: import javax.jms.MessageEOFException;
commit:f812e34
/////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////
1:  * A helper class for converting normal JMS interfaces into ActiveMQ specific
1:  * ones.
1:     /**
1:      * 
1:      * @param destination - Destination to be converted into ActiveMQ's
1:      *                implementation.
1:      * @return ActiveMQDestination - ActiveMQ's implementation of the
1:      *         destination.
1:      * @throws JMSException if an error occurs
1:      */
1:     public static ActiveMQDestination transformDestination(Destination destination) throws JMSException {
1: 
0:                 return (ActiveMQDestination)destination;
1: 
1:             } else {
0:                     activeMQDestination = new ActiveMQTempQueue(((Queue)destination).getQueueName());
0:                 } else if (destination instanceof TemporaryTopic) {
0:                     activeMQDestination = new ActiveMQTempTopic(((Topic)destination).getTopicName());
0:                 } else if (destination instanceof Queue) {
0:                     activeMQDestination = new ActiveMQQueue(((Queue)destination).getQueueName());
0:                 } else if (destination instanceof Topic) {
0:                     activeMQDestination = new ActiveMQTopic(((Topic)destination).getTopicName());
0:         return activeMQDestination;
1:     }
1: 
1:      * Creates a fast shallow copy of the current ActiveMQMessage or creates a
1:      * whole new message instance from an available JMS message from another
1:      * provider.
1:      * 
1:      * @param connection
1:      * @return ActiveMQMessage - ActiveMQ's implementation object of the
1:      *         message.
0:     public static final ActiveMQMessage transformMessage(Message message, ActiveMQConnection connection)
1:         throws JMSException {
1:             return (ActiveMQMessage)message;
1:                 BytesMessage bytesMsg = (BytesMessage)message;
/////////////////////////////////////////////////////////////////////////
1:                 MapMessage mapMsg = (MapMessage)message;
/////////////////////////////////////////////////////////////////////////
1:                 ObjectMessage objMsg = (ObjectMessage)message;
1:                 StreamMessage streamMessage = (StreamMessage)message;
/////////////////////////////////////////////////////////////////////////
1:                 TextMessage textMsg = (TextMessage)message;
/////////////////////////////////////////////////////////////////////////
1:      * Copies the standard JMS and user defined properties from the givem
1:      * message to the specified message
0:      * 
commit:230a86c
/////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////
1:  *      http://www.apache.org/licenses/LICENSE-2.0
commit:86cbdfd
/////////////////////////////////////////////////////////////////////////
1: }
commit:57b4941
/////////////////////////////////////////////////////////////////////////
1:  * Licensed to the Apache Software Foundation (ASF) under one or more
1:  * contributor license agreements.  See the NOTICE file distributed with
1:  * this work for additional information regarding copyright ownership.
1:  * The ASF licenses this file to You under the Apache License, Version 2.0
1:  * (the "License"); you may not use this file except in compliance with
1:  * the License.  You may obtain a copy of the License at
commit:48b4869
/////////////////////////////////////////////////////////////////////////
0:  * Copyright 2005-2006 The Apache Software Foundation
commit:d29ca2a
/////////////////////////////////////////////////////////////////////////
1: /**
0:  *
0:  * Copyright 2004 The Apache Software Foundation
0:  *
0:  * Licensed under the Apache License, Version 2.0 (the "License");
0:  * you may not use this file except in compliance with the License.
0:  * You may obtain a copy of the License at
0:  *
0:  * http://www.apache.org/licenses/LICENSE-2.0
0:  *
1:  * Unless required by applicable law or agreed to in writing, software
1:  * distributed under the License is distributed on an "AS IS" BASIS,
1:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:  * See the License for the specific language governing permissions and
1:  * limitations under the License.
1:  */
1: package org.apache.activemq;
1: 
1: import java.util.Enumeration;
1: 
0: import javax.jms.BytesMessage;
0: import javax.jms.Destination;
0: import javax.jms.MessageEOFException;
0: import javax.jms.JMSException;
0: import javax.jms.MapMessage;
1: import javax.jms.Message;
0: import javax.jms.ObjectMessage;
0: import javax.jms.Queue;
0: import javax.jms.StreamMessage;
0: import javax.jms.TemporaryQueue;
0: import javax.jms.TemporaryTopic;
0: import javax.jms.TextMessage;
0: import javax.jms.Topic;
1: 
1: 
0: import org.apache.activemq.command.ActiveMQBytesMessage;
0: import org.apache.activemq.command.ActiveMQDestination;
0: import org.apache.activemq.command.ActiveMQMapMessage;
0: import org.apache.activemq.command.ActiveMQMessage;
0: import org.apache.activemq.command.ActiveMQObjectMessage;
0: import org.apache.activemq.command.ActiveMQQueue;
0: import org.apache.activemq.command.ActiveMQStreamMessage;
0: import org.apache.activemq.command.ActiveMQTempQueue;
0: import org.apache.activemq.command.ActiveMQTempTopic;
0: import org.apache.activemq.command.ActiveMQTextMessage;
0: import org.apache.activemq.command.ActiveMQTopic;
1: 
1: /**
0:  * A helper class for converting normal JMS interfaces into ActiveMQ specific ones.
0:  * 
0:  * @version $Revision: 1.1 $
1:  */
0: public class ActiveMQMessageTransformation {
1: 
1: 	/**
1:      * Creates a an available JMS message from another provider.
0: 	 * 
0: 	 * @param destination -  Destination to be converted into ActiveMQ's implementation.
0: 	 * @return ActiveMQDestination - ActiveMQ's implementation of the destination.
1: 	 * @throws JMSException if an error occurs
1: 	 */
0: 	public static ActiveMQDestination transformDestination(Destination destination) throws JMSException {
0:         ActiveMQDestination activeMQDestination = null;
1:         
0:         if (destination != null) {
0:             if (destination instanceof ActiveMQDestination) {
0:             	return (ActiveMQDestination) destination;
1:             	
1:             }
0:             else {
0:                 if (destination instanceof TemporaryQueue) {
0:                 	activeMQDestination = new ActiveMQTempQueue(((Queue) destination).getQueueName());
1:                 }
0:                 else if (destination instanceof TemporaryTopic) {
0:                 	activeMQDestination = new ActiveMQTempTopic(((Topic) destination).getTopicName());
1:                 }
0:                 else if (destination instanceof Queue) {
0:                 	activeMQDestination = new ActiveMQQueue(((Queue) destination).getQueueName());
1:                 }
0:                 else if (destination instanceof Topic) {
0:                 	activeMQDestination = new ActiveMQTopic(((Topic) destination).getTopicName());
1:                 }
1:             }
1:         }
1: 
0:         return activeMQDestination;		
1: 	}
1: 	
1: 	
1:     /**
0:      * Creates a fast shallow copy of the current ActiveMQMessage or creates a whole new
0:      * message instance from an available JMS message from another provider.
0:      *
1:      * @param message - Message to be converted into ActiveMQ's implementation.
0:      * @param connection 
0:      * @return ActiveMQMessage -  ActiveMQ's implementation object of the message.
1:      * @throws JMSException if an error occurs
1:      */
0: 	public static final ActiveMQMessage transformMessage(Message message, ActiveMQConnection connection) throws JMSException {
1:         if (message instanceof ActiveMQMessage) {
0:             return (ActiveMQMessage) message;
1: 
1:         } else {
1:             ActiveMQMessage activeMessage = null;
1: 
1:             if (message instanceof BytesMessage) {
0:                 BytesMessage bytesMsg = (BytesMessage) message;
1:                 bytesMsg.reset();
1:                 ActiveMQBytesMessage msg = new ActiveMQBytesMessage();
1:                 msg.setConnection(connection);
1:                 try {
1:                     for (;;) {
1:                         // Reads a byte from the message stream until the stream
1:                         // is empty
1:                         msg.writeByte(bytesMsg.readByte());
1:                     }
1:                 } catch (MessageEOFException e) {
1:                     // if an end of message stream as expected
1:                 } catch (JMSException e) {
1:                 }
1: 
1:                 activeMessage = msg;
1:             } else if (message instanceof MapMessage) {
0:                 MapMessage mapMsg = (MapMessage) message;
1:                 ActiveMQMapMessage msg = new ActiveMQMapMessage();
1:                 msg.setConnection(connection);
1:                 Enumeration iter = mapMsg.getMapNames();
1: 
1:                 while (iter.hasMoreElements()) {
1:                     String name = iter.nextElement().toString();
1:                     msg.setObject(name, mapMsg.getObject(name));
1:                 }
1: 
1:                 activeMessage = msg;
1:             } else if (message instanceof ObjectMessage) {
0:                 ObjectMessage objMsg = (ObjectMessage) message;
1:                 ActiveMQObjectMessage msg = new ActiveMQObjectMessage();
1:                 msg.setConnection(connection);
1:                 msg.setObject(objMsg.getObject());
1:                 msg.storeContent();
1:                 activeMessage = msg;
1:             } else if (message instanceof StreamMessage) {
0:                 StreamMessage streamMessage = (StreamMessage) message;
1:                 streamMessage.reset();
1:                 ActiveMQStreamMessage msg = new ActiveMQStreamMessage();
1:                 msg.setConnection(connection);
1:                 Object obj = null;
1: 
1:                 try {
1:                     while ((obj = streamMessage.readObject()) != null) {
1:                         msg.writeObject(obj);
1:                     }
1:                 } catch (MessageEOFException e) {
1:                     // if an end of message stream as expected
1:                 } catch (JMSException e) {
1:                 }
1: 
1:                 activeMessage = msg;
1:             } else if (message instanceof TextMessage) {
0:                 TextMessage textMsg = (TextMessage) message;
1:                 ActiveMQTextMessage msg = new ActiveMQTextMessage();
1:                 msg.setConnection(connection);
1:                 msg.setText(textMsg.getText());
1:                 activeMessage = msg;
1:             } else {
1:                 activeMessage = new ActiveMQMessage();
1:                 activeMessage.setConnection(connection);
1:             }
1: 
0:             activeMessage.setJMSMessageID(message.getJMSMessageID());
0:             activeMessage.setJMSCorrelationID(message.getJMSCorrelationID());
0:             activeMessage.setJMSReplyTo(transformDestination(message.getJMSReplyTo()));
0:             activeMessage.setJMSDestination(transformDestination(message.getJMSDestination()));
0:             activeMessage.setJMSDeliveryMode(message.getJMSDeliveryMode());
0:             activeMessage.setJMSRedelivered(message.getJMSRedelivered());
0:             activeMessage.setJMSType(message.getJMSType());
0:             activeMessage.setJMSExpiration(message.getJMSExpiration());
0:             activeMessage.setJMSPriority(message.getJMSPriority());
0:             activeMessage.setJMSTimestamp(message.getJMSTimestamp());
1: 
0:             Enumeration propertyNames = message.getPropertyNames();
1: 
1:             while (propertyNames.hasMoreElements()) {
1:                 String name = propertyNames.nextElement().toString();
0:                 Object obj = message.getObjectProperty(name);
0:                 activeMessage.setObjectProperty(name, obj);
1:             }
1: 
1:             return activeMessage;
1:         }
1:     }
1: }
author:Adrian T. Co
-------------------------------------------------------------------------------
commit:13af1e3
/////////////////////////////////////////////////////////////////////////
1:      * @param toMessage the message to add the properties to
1:     public static void copyProperties(Message fromMessage, Message toMessage) throws JMSException {
1:         toMessage.setJMSMessageID(fromMessage.getJMSMessageID());
1:         toMessage.setJMSCorrelationID(fromMessage.getJMSCorrelationID());
1:         toMessage.setJMSReplyTo(transformDestination(fromMessage.getJMSReplyTo()));
1:         toMessage.setJMSDestination(transformDestination(fromMessage.getJMSDestination()));
1:         toMessage.setJMSDeliveryMode(fromMessage.getJMSDeliveryMode());
1:         toMessage.setJMSRedelivered(fromMessage.getJMSRedelivered());
1:         toMessage.setJMSType(fromMessage.getJMSType());
1:         toMessage.setJMSExpiration(fromMessage.getJMSExpiration());
1:         toMessage.setJMSPriority(fromMessage.getJMSPriority());
1:         toMessage.setJMSTimestamp(fromMessage.getJMSTimestamp());
1:             toMessage.setObjectProperty(name, obj);
author:James Strachan
-------------------------------------------------------------------------------
commit:86faaef
/////////////////////////////////////////////////////////////////////////
1:             copyProperties(message, activeMessage);
0: 
0:     /**
0:      * Copies the standard JMS and user defined properties from the givem message to the specified message
0:      *
1:      * @param fromMessage the message to take the properties from
0:      * @param toMesage the message to add the properties to
1:      * @throws JMSException
0:      */
0:     public static void copyProperties(Message fromMessage, Message toMesage) throws JMSException {
0:         toMesage.setJMSMessageID(fromMessage.getJMSMessageID());
0:         toMesage.setJMSCorrelationID(fromMessage.getJMSCorrelationID());
0:         toMesage.setJMSReplyTo(transformDestination(fromMessage.getJMSReplyTo()));
0:         toMesage.setJMSDestination(transformDestination(fromMessage.getJMSDestination()));
0:         toMesage.setJMSDeliveryMode(fromMessage.getJMSDeliveryMode());
0:         toMesage.setJMSRedelivered(fromMessage.getJMSRedelivered());
0:         toMesage.setJMSType(fromMessage.getJMSType());
0:         toMesage.setJMSExpiration(fromMessage.getJMSExpiration());
0:         toMesage.setJMSPriority(fromMessage.getJMSPriority());
0:         toMesage.setJMSTimestamp(fromMessage.getJMSTimestamp());
0: 
1:         Enumeration propertyNames = fromMessage.getPropertyNames();
0: 
0:         while (propertyNames.hasMoreElements()) {
0:             String name = propertyNames.nextElement().toString();
1:             Object obj = fromMessage.getObjectProperty(name);
0:             toMesage.setObjectProperty(name, obj);
0:         }
0:     }
============================================================================