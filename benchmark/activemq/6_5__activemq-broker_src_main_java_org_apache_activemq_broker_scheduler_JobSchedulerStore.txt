1:803c42d: /**
1:803c42d:  * Licensed to the Apache Software Foundation (ASF) under one or more
1:803c42d:  * contributor license agreements.  See the NOTICE file distributed with
1:803c42d:  * this work for additional information regarding copyright ownership.
1:803c42d:  * The ASF licenses this file to You under the Apache License, Version 2.0
1:803c42d:  * (the "License"); you may not use this file except in compliance with
1:803c42d:  * the License.  You may obtain a copy of the License at
1:803c42d:  *
1:803c42d:  *      http://www.apache.org/licenses/LICENSE-2.0
1:803c42d:  *
1:803c42d:  * Unless required by applicable law or agreed to in writing, software
1:803c42d:  * distributed under the License is distributed on an "AS IS" BASIS,
1:803c42d:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:803c42d:  * See the License for the specific language governing permissions and
1:803c42d:  * limitations under the License.
1:803c42d:  */
1:7ae2055: package org.apache.activemq.broker.scheduler;
1:1c0dbd1: 
1:1c0dbd1: import java.io.File;
1:2e98d40: 
1:2d861da: import org.apache.activemq.Service;
1:2d861da: 
1:0484af1: /**
1:2d861da:  * A Job Scheduler Store interface use to manage delay processing of Messaging
1:2d861da:  * related jobs.
1:0484af1:  */
1:0484af1: public interface JobSchedulerStore extends Service {
1:2d861da: 
1:74846bb:     /**
1:74846bb:      * Gets the location where the Job Scheduler will write the persistent data used
1:74846bb:      * to preserve and recover scheduled Jobs.
1:74846bb:      *
1:74846bb:      * If the scheduler implementation does not utilize a file system based store this
1:74846bb:      * method returns null.
1:74846bb:      *
1:74846bb:      * @return the directory where persistent store data is written.
1:74846bb:      */
1:0484af1:     File getDirectory();
43:7ae2055: 
1:74846bb:     /**
1:74846bb:      * Sets the directory where persistent store data will be written.  This method
1:74846bb:      * must be called before the scheduler store is started to have any effect.
1:74846bb:      *
1:74846bb:      * @param directory
1:74846bb:      *      The directory where the job scheduler store is to be located.
1:74846bb:      */
1:0484af1:     void setDirectory(File directory);
1:7ae2055: 
1:74846bb:     /**
1:74846bb:      * The size of the current store on disk if the store utilizes a disk based store
1:74846bb:      * mechanism.
1:74846bb:      *
1:74846bb:      * @return the current store size on disk.
1:74846bb:      */
1:0484af1:     long size();
1:7ae2055: 
1:74846bb:     /**
1:74846bb:      * Returns the JobScheduler instance identified by the given name.
1:74846bb:      *
1:74846bb:      * @param name
1:74846bb:      *        the name of the JobScheduler instance to lookup.
1:74846bb:      *
1:74846bb:      * @return the named JobScheduler or null if none exists with the given name.
1:74846bb:      *
1:74846bb:      * @throws Exception if an error occurs while loading the named scheduler.
1:74846bb:      */
1:0484af1:     JobScheduler getJobScheduler(String name) throws Exception;
1:7ae2055: 
1:74846bb:     /**
1:74846bb:      * Removes the named JobScheduler if it exists, purging all scheduled messages
1:74846bb:      * assigned to it.
1:74846bb:      *
1:74846bb:      * @param name
1:74846bb:      *        the name of the scheduler instance to remove.
1:74846bb:      *
1:74846bb:      * @return true if there was a scheduler with the given name to remove.
1:74846bb:      *
1:74846bb:      * @throws Exception if an error occurs while removing the scheduler.
1:74846bb:      */
1:0484af1:     boolean removeJobScheduler(String name) throws Exception;
3:2e98d40: }
============================================================================
author:Timothy Bish
-------------------------------------------------------------------------------
commit:74846bb
/////////////////////////////////////////////////////////////////////////
1:     /**
1:      * Gets the location where the Job Scheduler will write the persistent data used
1:      * to preserve and recover scheduled Jobs.
1:      *
1:      * If the scheduler implementation does not utilize a file system based store this
1:      * method returns null.
1:      *
1:      * @return the directory where persistent store data is written.
1:      */
1:     /**
1:      * Sets the directory where persistent store data will be written.  This method
1:      * must be called before the scheduler store is started to have any effect.
1:      *
1:      * @param directory
1:      *      The directory where the job scheduler store is to be located.
1:      */
1:     /**
1:      * The size of the current store on disk if the store utilizes a disk based store
1:      * mechanism.
1:      *
1:      * @return the current store size on disk.
1:      */
1:     /**
1:      * Returns the JobScheduler instance identified by the given name.
1:      *
1:      * @param name
1:      *        the name of the JobScheduler instance to lookup.
1:      *
1:      * @return the named JobScheduler or null if none exists with the given name.
1:      *
1:      * @throws Exception if an error occurs while loading the named scheduler.
1:      */
1:     /**
1:      * Removes the named JobScheduler if it exists, purging all scheduled messages
1:      * assigned to it.
1:      *
1:      * @param name
1:      *        the name of the scheduler instance to remove.
1:      *
1:      * @return true if there was a scheduler with the given name to remove.
1:      *
1:      * @throws Exception if an error occurs while removing the scheduler.
1:      */
author:Timothy A. Bish
-------------------------------------------------------------------------------
commit:2d861da
/////////////////////////////////////////////////////////////////////////
1: import org.apache.activemq.Service;
1: 
1:  * A Job Scheduler Store interface use to manage delay processing of Messaging
1:  * related jobs.
1: 
author:Hiram R. Chirino
-------------------------------------------------------------------------------
commit:58aca86
commit:803c42d
/////////////////////////////////////////////////////////////////////////
1: /**
1:  * Licensed to the Apache Software Foundation (ASF) under one or more
1:  * contributor license agreements.  See the NOTICE file distributed with
1:  * this work for additional information regarding copyright ownership.
1:  * The ASF licenses this file to You under the Apache License, Version 2.0
1:  * (the "License"); you may not use this file except in compliance with
1:  * the License.  You may obtain a copy of the License at
1:  *
1:  *      http://www.apache.org/licenses/LICENSE-2.0
1:  *
1:  * Unless required by applicable law or agreed to in writing, software
1:  * distributed under the License is distributed on an "AS IS" BASIS,
1:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:  * See the License for the specific language governing permissions and
1:  * limitations under the License.
1:  */
commit:0484af1
/////////////////////////////////////////////////////////////////////////
0: import org.apache.activemq.Service;
1: /**
0:  * @author <a href="http://hiramchirino.com">Hiram Chirino</a>
1:  */
1: public interface JobSchedulerStore extends Service {
1:     File getDirectory();
1:     void setDirectory(File directory);
1:     long size();
1:     JobScheduler getJobScheduler(String name) throws Exception;
1:     boolean removeJobScheduler(String name) throws Exception;
commit:1aab71b
/////////////////////////////////////////////////////////////////////////
0: import org.apache.activemq.store.kahadb.disk.index.BTreeIndex;
0: import org.apache.activemq.store.kahadb.disk.journal.Journal;
0: import org.apache.activemq.store.kahadb.disk.journal.Location;
0: import org.apache.activemq.store.kahadb.disk.page.Page;
0: import org.apache.activemq.store.kahadb.disk.page.PageFile;
0: import org.apache.activemq.store.kahadb.disk.page.Transaction;
0: import org.apache.activemq.util.ByteSequence;
0: import org.apache.activemq.store.kahadb.disk.util.IntegerMarshaller;
0: import org.apache.activemq.util.LockFile;
0: import org.apache.activemq.store.kahadb.disk.util.StringMarshaller;
0: import org.apache.activemq.store.kahadb.disk.util.VariableMarshaller;
author:Bosanac Dejan
-------------------------------------------------------------------------------
commit:1c0dbd1
/////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////
0: import org.slf4j.Logger;
0: import org.slf4j.LoggerFactory;
1: 
0: import java.io.DataInput;
0: import java.io.DataOutput;
1: import java.io.File;
0: import java.io.IOException;
0: import java.util.ArrayList;
0: import java.util.HashMap;
0: import java.util.HashSet;
0: import java.util.Iterator;
0: import java.util.List;
0: import java.util.Map;
0: import java.util.Map.Entry;
0: import java.util.Set;
/////////////////////////////////////////////////////////////////////////
0:         this.pageFile.setWriteBatchSize(1);
commit:8bf987b
/////////////////////////////////////////////////////////////////////////
0: import org.slf4j.Logger;
0: import org.slf4j.LoggerFactory;
/////////////////////////////////////////////////////////////////////////
0:     static final Logger LOG = LoggerFactory.getLogger(JobSchedulerStore.class);
author:Gary Tully
-------------------------------------------------------------------------------
commit:c94b407
/////////////////////////////////////////////////////////////////////////
0:             this.pageFile.flush();
author:Robert Davies
-------------------------------------------------------------------------------
commit:e3154c3
/////////////////////////////////////////////////////////////////////////
0:     synchronized ByteSequence getPayload(Location location) throws IllegalStateException, IOException {
commit:2e98d40
/////////////////////////////////////////////////////////////////////////
1:     
0:     public long size() {
0:         if ( !isStarted() ) {
0:             return 0;
1:         }
0:         try {
0:             return journal.getDiskSize() + pageFile.getDiskSize();
0:         } catch (IOException e) {
0:             throw new RuntimeException(e);
1:         }
1:     }
commit:7ae2055
/////////////////////////////////////////////////////////////////////////
0: /**
0:  * Licensed to the Apache Software Foundation (ASF) under one or more
0:  * contributor license agreements.  See the NOTICE file distributed with
0:  * this work for additional information regarding copyright ownership.
0:  * The ASF licenses this file to You under the Apache License, Version 2.0
0:  * (the "License"); you may not use this file except in compliance with
0:  * the License.  You may obtain a copy of the License at
0:  *
0:  *      http://www.apache.org/licenses/LICENSE-2.0
0:  *
0:  * Unless required by applicable law or agreed to in writing, software
0:  * distributed under the License is distributed on an "AS IS" BASIS,
0:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
0:  * See the License for the specific language governing permissions and
0:  * limitations under the License.
0:  */
1: package org.apache.activemq.broker.scheduler;
1: 
0: import java.io.DataInput;
0: import java.io.DataOutput;
0: import java.io.File;
0: import java.io.IOException;
0: import java.util.ArrayList;
0: import java.util.HashMap;
0: import java.util.HashSet;
0: import java.util.Iterator;
0: import java.util.List;
0: import java.util.Map;
0: import java.util.Set;
0: import java.util.Map.Entry;
0: import org.apache.activemq.util.IOHelper;
0: import org.apache.activemq.util.ServiceStopper;
0: import org.apache.activemq.util.ServiceSupport;
0: import org.apache.commons.logging.Log;
0: import org.apache.commons.logging.LogFactory;
0: import org.apache.kahadb.index.BTreeIndex;
0: import org.apache.kahadb.journal.Journal;
0: import org.apache.kahadb.journal.Location;
0: import org.apache.kahadb.page.Page;
0: import org.apache.kahadb.page.PageFile;
0: import org.apache.kahadb.page.Transaction;
0: import org.apache.kahadb.util.ByteSequence;
0: import org.apache.kahadb.util.IntegerMarshaller;
0: import org.apache.kahadb.util.LockFile;
0: import org.apache.kahadb.util.StringMarshaller;
0: import org.apache.kahadb.util.VariableMarshaller;
1: 
0: public class JobSchedulerStore extends ServiceSupport {
0:     static final Log LOG = LogFactory.getLog(JobSchedulerStore.class);
0:     private static final int DATABASE_LOCKED_WAIT_DELAY = 10 * 1000;
1: 
0:     public static final int CLOSED_STATE = 1;
0:     public static final int OPEN_STATE = 2;
1: 
0:     private File directory;
0:     PageFile pageFile;
0:     private Journal journal;
0:     private LockFile lockFile;
0:     private boolean failIfDatabaseIsLocked;
0:     private int journalMaxFileLength = Journal.DEFAULT_MAX_FILE_LENGTH;
0:     private int journalMaxWriteBatchSize = Journal.DEFAULT_MAX_WRITE_BATCH_SIZE;
0:     private boolean enableIndexWriteAsync = false;
0:     // private int indexWriteBatchSize = PageFile.DEFAULT_WRITE_BATCH_SIZE;
0:     MetaData metaData = new MetaData(this);
0:     final MetaDataMarshaller metaDataMarshaller = new MetaDataMarshaller(this);
0:     Map<String, JobSchedulerImpl> schedulers = new HashMap<String, JobSchedulerImpl>();
1: 
0:     protected class MetaData {
0:         protected MetaData(JobSchedulerStore store) {
0:             this.store = store;
0:         }
0:         private final JobSchedulerStore store;
0:         Page<MetaData> page;
0:         BTreeIndex<Integer, Integer> journalRC;
0:         BTreeIndex<String, JobSchedulerImpl> storedSchedulers;
1: 
0:         void createIndexes(Transaction tx) throws IOException {
0:             this.storedSchedulers = new BTreeIndex<String, JobSchedulerImpl>(pageFile, tx.allocate().getPageId());
0:             this.journalRC = new BTreeIndex<Integer, Integer>(pageFile, tx.allocate().getPageId());
0:         }
1: 
0:         void load(Transaction tx) throws IOException {
0:             this.storedSchedulers.setKeyMarshaller(StringMarshaller.INSTANCE);
0:             this.storedSchedulers.setValueMarshaller(new JobSchedulerMarshaller(this.store));
0:             this.storedSchedulers.load(tx);
0:             this.journalRC.setKeyMarshaller(IntegerMarshaller.INSTANCE);
0:             this.journalRC.setValueMarshaller(IntegerMarshaller.INSTANCE);
0:             this.journalRC.load(tx);
0:         }
1: 
0:         void loadScheduler(Transaction tx, Map<String, JobSchedulerImpl> schedulers) throws IOException {
0:             for (Iterator<Entry<String, JobSchedulerImpl>> i = this.storedSchedulers.iterator(tx); i.hasNext();) {
0:                 Entry<String, JobSchedulerImpl> entry = i.next();
0:                 entry.getValue().load(tx);
0:                 schedulers.put(entry.getKey(), entry.getValue());
0:             }
0:         }
1: 
0:         public void read(DataInput is) throws IOException {
0:             this.storedSchedulers = new BTreeIndex<String, JobSchedulerImpl>(pageFile, is.readLong());
0:             this.storedSchedulers.setKeyMarshaller(StringMarshaller.INSTANCE);
0:             this.storedSchedulers.setValueMarshaller(new JobSchedulerMarshaller(this.store));
0:             this.journalRC = new BTreeIndex<Integer, Integer>(pageFile, is.readLong());
0:             this.journalRC.setKeyMarshaller(IntegerMarshaller.INSTANCE);
0:             this.journalRC.setValueMarshaller(IntegerMarshaller.INSTANCE);
0:         }
1: 
0:         public void write(DataOutput os) throws IOException {
0:             os.writeLong(this.storedSchedulers.getPageId());
0:             os.writeLong(this.journalRC.getPageId());
1: 
0:         }
0:     }
1: 
0:     class MetaDataMarshaller extends VariableMarshaller<MetaData> {
0:         private final JobSchedulerStore store;
1: 
0:         MetaDataMarshaller(JobSchedulerStore store) {
0:             this.store = store;
0:         }
0:         public MetaData readPayload(DataInput dataIn) throws IOException {
0:             MetaData rc = new MetaData(this.store);
0:             rc.read(dataIn);
0:             return rc;
0:         }
1: 
0:         public void writePayload(MetaData object, DataOutput dataOut) throws IOException {
0:             object.write(dataOut);
0:         }
0:     }
1: 
0:     class ValueMarshaller extends VariableMarshaller<List<JobLocation>> {
0:         public List<JobLocation> readPayload(DataInput dataIn) throws IOException {
0:             List<JobLocation> result = new ArrayList<JobLocation>();
0:             int size = dataIn.readInt();
0:             for (int i = 0; i < size; i++) {
0:                 JobLocation jobLocation = new JobLocation();
0:                 jobLocation.readExternal(dataIn);
0:                 result.add(jobLocation);
0:             }
0:             return result;
0:         }
1: 
0:         public void writePayload(List<JobLocation> value, DataOutput dataOut) throws IOException {
0:             dataOut.writeInt(value.size());
0:             for (JobLocation jobLocation : value) {
0:                 jobLocation.writeExternal(dataOut);
0:             }
0:         }
0:     }
1: 
0:     class JobSchedulerMarshaller extends VariableMarshaller<JobSchedulerImpl> {
0:         private final JobSchedulerStore store;
0:         JobSchedulerMarshaller(JobSchedulerStore store) {
0:             this.store = store;
0:         }
0:         public JobSchedulerImpl readPayload(DataInput dataIn) throws IOException {
0:             JobSchedulerImpl result = new JobSchedulerImpl(this.store);
0:             result.read(dataIn);
0:             return result;
0:         }
1: 
0:         public void writePayload(JobSchedulerImpl js, DataOutput dataOut) throws IOException {
0:             js.write(dataOut);
0:         }
0:     }
1: 
0:     public File getDirectory() {
0:         return directory;
0:     }
1: 
0:     public void setDirectory(File directory) {
0:         this.directory = directory;
0:     }
1: 
0:     public JobScheduler getJobScheduler(final String name) throws Exception {
0:         JobSchedulerImpl result = this.schedulers.get(name);
0:         if (result == null) {
0:             final JobSchedulerImpl js = new JobSchedulerImpl(this);
0:             js.setName(name);
0:             getPageFile().tx().execute(new Transaction.Closure<IOException>() {
0:                 public void execute(Transaction tx) throws IOException {
0:                     js.createIndexes(tx);
0:                     js.load(tx);
0:                     metaData.storedSchedulers.put(tx, name, js);
0:                 }
0:             });
0:             result = js;
0:             this.schedulers.put(name, js);
0:             if (isStarted()) {
0:                 result.start();
0:             }
0:         }
0:         return result;
0:     }
1: 
0:     synchronized public boolean removeJobScheduler(final String name) throws Exception {
0:         boolean result = false;
0:         final JobSchedulerImpl js = this.schedulers.remove(name);
0:         result = js != null;
0:         if (result) {
0:             js.stop();
0:             getPageFile().tx().execute(new Transaction.Closure<IOException>() {
0:                 public void execute(Transaction tx) throws IOException {
0:                     metaData.storedSchedulers.remove(tx, name);
0:                     js.destroy(tx);
0:                 }
0:             });
0:         }
0:         return result;
0:     }
1: 
0:     @Override
0:     protected synchronized void doStart() throws Exception {
0:         if (this.directory == null) {
0:             this.directory = new File(IOHelper.getDefaultDataDirectory() + File.pathSeparator + "delayedDB");
0:         }
0:         IOHelper.mkdirs(this.directory);
0:         lock();
0:         this.journal = new Journal();
0:         this.journal.setDirectory(directory);
0:         this.journal.setMaxFileLength(getJournalMaxFileLength());
0:         this.journal.setWriteBatchSize(getJournalMaxWriteBatchSize());
0:         this.journal.start();
0:         this.pageFile = new PageFile(directory, "scheduleDB");
0:         this.pageFile.load();
1: 
0:         this.pageFile.tx().execute(new Transaction.Closure<IOException>() {
0:             public void execute(Transaction tx) throws IOException {
0:                 if (pageFile.getPageCount() == 0) {
0:                     Page<MetaData> page = tx.allocate();
0:                     assert page.getPageId() == 0;
0:                     page.set(metaData);
0:                     metaData.page = page;
0:                     metaData.createIndexes(tx);
0:                     tx.store(metaData.page, metaDataMarshaller, true);
1: 
0:                 } else {
0:                     Page<MetaData> page = tx.load(0, metaDataMarshaller);
0:                     metaData = page.get();
0:                     metaData.page = page;
0:                 }
0:                 metaData.load(tx);
0:                 metaData.loadScheduler(tx, schedulers);
0:                 for (JobSchedulerImpl js :schedulers.values()) {
0:                     try {
0:                         js.start();
0:                     } catch (Exception e) {
0:                         JobSchedulerStore.LOG.error("Failed to load " + js.getName(),e);
0:                     }
0:                }
0:             }
0:         });
1: 
0:         this.pageFile.flush();
0:         LOG.info(this + " started");
0:     }
1:     
0:     @Override
0:     protected synchronized void doStop(ServiceStopper stopper) throws Exception {
0:         for (JobSchedulerImpl js : this.schedulers.values()) {
0:             js.stop();
0:         }
0:         if (this.pageFile != null) {
0:             this.pageFile.unload();
0:         }
0:         if (this.journal != null) {
0:             journal.close();
0:         }
0:         if (this.lockFile != null) {
0:             this.lockFile.unlock();
0:         }
0:         this.lockFile = null;
0:         LOG.info(this + " stopped");
1: 
0:     }
1: 
0:     synchronized void incrementJournalCount(Transaction tx, Location location) throws IOException {
0:         int logId = location.getDataFileId();
0:         Integer val = this.metaData.journalRC.get(tx, logId);
0:         int refCount = val != null ? val.intValue() + 1 : 1;
0:         this.metaData.journalRC.put(tx, logId, refCount);
1: 
0:     }
1: 
0:     synchronized void decrementJournalCount(Transaction tx, Location location) throws IOException {
0:         int logId = location.getDataFileId();
0:         int refCount = this.metaData.journalRC.get(tx, logId);
0:         refCount--;
0:         if (refCount <= 0) {
0:             this.metaData.journalRC.remove(tx, logId);
0:             Set<Integer> set = new HashSet<Integer>();
0:             set.add(logId);
0:             this.journal.removeDataFiles(set);
0:         } else {
0:             this.metaData.journalRC.put(tx, logId, refCount);
0:         }
1: 
0:     }
1: 
0:     synchronized ByteSequence getJob(Location location) throws IllegalStateException, IOException {
0:         ByteSequence result = null;
0:         result = this.journal.read(location);
0:         return result;
0:     }
1: 
0:     synchronized Location write(ByteSequence payload, boolean sync) throws IllegalStateException, IOException {
0:         return this.journal.write(payload, sync);
0:     }
1: 
0:     private void lock() throws IOException {
0:         if (lockFile == null) {
0:             File lockFileName = new File(directory, "lock");
0:             lockFile = new LockFile(lockFileName, true);
0:             if (failIfDatabaseIsLocked) {
0:                 lockFile.lock();
0:             } else {
0:                 while (true) {
0:                     try {
0:                         lockFile.lock();
0:                         break;
0:                     } catch (IOException e) {
0:                         LOG.info("Database " + lockFileName + " is locked... waiting "
0:                                 + (DATABASE_LOCKED_WAIT_DELAY / 1000)
0:                                 + " seconds for the database to be unlocked. Reason: " + e);
0:                         try {
0:                             Thread.sleep(DATABASE_LOCKED_WAIT_DELAY);
0:                         } catch (InterruptedException e1) {
0:                         }
0:                     }
0:                 }
0:             }
0:         }
0:     }
1: 
0:     PageFile getPageFile() {
0:         this.pageFile.isLoaded();
0:         return this.pageFile;
0:     }
1: 
0:     public boolean isFailIfDatabaseIsLocked() {
0:         return failIfDatabaseIsLocked;
0:     }
1: 
0:     public void setFailIfDatabaseIsLocked(boolean failIfDatabaseIsLocked) {
0:         this.failIfDatabaseIsLocked = failIfDatabaseIsLocked;
0:     }
1: 
0:     public int getJournalMaxFileLength() {
0:         return journalMaxFileLength;
0:     }
1: 
0:     public void setJournalMaxFileLength(int journalMaxFileLength) {
0:         this.journalMaxFileLength = journalMaxFileLength;
0:     }
1: 
0:     public int getJournalMaxWriteBatchSize() {
0:         return journalMaxWriteBatchSize;
0:     }
1: 
0:     public void setJournalMaxWriteBatchSize(int journalMaxWriteBatchSize) {
0:         this.journalMaxWriteBatchSize = journalMaxWriteBatchSize;
0:     }
1: 
0:     public boolean isEnableIndexWriteAsync() {
0:         return enableIndexWriteAsync;
0:     }
1: 
0:     public void setEnableIndexWriteAsync(boolean enableIndexWriteAsync) {
0:         this.enableIndexWriteAsync = enableIndexWriteAsync;
0:     }
1: 
0:     @Override
0:     public String toString() {
0:         return "JobSchedulerStore:" + this.directory;
0:     }
1: 
0: }
============================================================================