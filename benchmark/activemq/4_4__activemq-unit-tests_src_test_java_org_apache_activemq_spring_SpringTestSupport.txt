1:67310ad: /**
1:67310ad:  * Licensed to the Apache Software Foundation (ASF) under one or more
1:67310ad:  * contributor license agreements.  See the NOTICE file distributed with
1:67310ad:  * this work for additional information regarding copyright ownership.
1:67310ad:  * The ASF licenses this file to You under the Apache License, Version 2.0
1:67310ad:  * (the "License"); you may not use this file except in compliance with
1:67310ad:  * the License.  You may obtain a copy of the License at
1:b0c2a40:  *
1:230a86c:  *      http://www.apache.org/licenses/LICENSE-2.0
3:67310ad:  *
1:67310ad:  * Unless required by applicable law or agreed to in writing, software
1:67310ad:  * distributed under the License is distributed on an "AS IS" BASIS,
1:67310ad:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:67310ad:  * See the License for the specific language governing permissions and
1:67310ad:  * limitations under the License.
1:67310ad:  */
1:67310ad: package org.apache.activemq.spring;
2:67310ad: 
1:74a7a8b: import java.util.Iterator;
1:74a7a8b: import java.util.List;
1:74a7a8b: 
1:4743a20: import javax.jms.Message;
1:4743a20: 
1:67310ad: import junit.framework.TestCase;
1:4743a20: 
1:8bf987b: import org.slf4j.Logger;
1:8bf987b: import org.slf4j.LoggerFactory;
1:67310ad: import org.springframework.context.support.AbstractApplicationContext;
1:67310ad: import org.springframework.context.support.ClassPathXmlApplicationContext;
1:67310ad: 
1:67310ad: /**
1:4743a20:  *
1:67310ad:  */
1:67310ad: public class SpringTestSupport extends TestCase {
1:8bf987b:     private static final Logger LOG = LoggerFactory.getLogger(SpringTest.class);
1:67310ad:     protected AbstractApplicationContext context;
1:67310ad:     protected SpringConsumer consumer;
1:67310ad:     protected SpringProducer producer;
1:67310ad: 
1:67310ad:     /**
1:67310ad:      * assert method that is used by all the test method to send and receive messages
1:67310ad:      * based on each spring configuration.
1:67310ad:      *
1:67310ad:      * @param config
1:67310ad:      * @throws Exception
1:67310ad:      */
1:67310ad:     protected void assertSenderConfig(String config) throws Exception {
1:67310ad:         Thread.currentThread().setContextClassLoader(SpringTest.class.getClassLoader());
1:67310ad:         context = new ClassPathXmlApplicationContext(config);
1:67310ad: 
1:67310ad:         consumer = (SpringConsumer) context.getBean("consumer");
1:67310ad:         assertTrue("Found a valid consumer", consumer != null);
1:67310ad: 
1:67310ad:         consumer.start();
1:67310ad: 
1:67310ad:         // Wait a little to drain any left over messages.
1:67310ad:         Thread.sleep(1000);
1:67310ad:         consumer.flushMessages();
1:67310ad: 
1:67310ad:         producer = (SpringProducer) context.getBean("producer");
1:67310ad:         assertTrue("Found a valid producer", producer != null);
1:67310ad: 
1:67310ad:         producer.start();
1:67310ad: 
1:67310ad:         // lets sleep a little to give the JMS time to dispatch stuff
1:67310ad:         consumer.waitForMessagesToArrive(producer.getMessageCount());
1:67310ad: 
1:67310ad:         // now lets check that the consumer has received some messages
1:4743a20:         List<Message> messages = consumer.flushMessages();
1:fc00993:         LOG.info("Consumer has received messages....");
1:4743a20:         for (Iterator<Message> iter = messages.iterator(); iter.hasNext();) {
1:67310ad:             Object message = iter.next();
1:fc00993:             LOG.info("Received: " + message);
1:67310ad:         }
1:67310ad: 
1:67310ad:         assertEquals("Message count", producer.getMessageCount(), messages.size());
1:67310ad:     }
1:67310ad: 
1:67310ad:     /**
1:67310ad:      * Clean up method.
1:67310ad:      *
1:67310ad:      * @throws Exception
1:67310ad:      */
1:4743a20:     @Override
1:67310ad:     protected void tearDown() throws Exception {
1:67310ad:         if (consumer != null) {
1:67310ad:             consumer.stop();
1:67310ad:         }
1:67310ad:         if (producer != null) {
1:67310ad:             producer.stop();
1:67310ad:         }
1:67310ad: 
1:67310ad:         if (context != null) {
1:67310ad:             context.destroy();
1:67310ad:         }
1:67310ad:     }
1:67310ad: }
============================================================================
author:Timothy A. Bish
-------------------------------------------------------------------------------
commit:4743a20
/////////////////////////////////////////////////////////////////////////
1: import javax.jms.Message;
1: 
1: 
1:  *
/////////////////////////////////////////////////////////////////////////
1:         List<Message> messages = consumer.flushMessages();
1:         for (Iterator<Message> iter = messages.iterator(); iter.hasNext();) {
/////////////////////////////////////////////////////////////////////////
1:     @Override
commit:ef24cc9
author:Hiram R. Chirino
-------------------------------------------------------------------------------
commit:b0c2a40
/////////////////////////////////////////////////////////////////////////
1:  * 
commit:fc00993
/////////////////////////////////////////////////////////////////////////
0: import org.apache.activemq.test.JmsTopicSendReceiveTest;
0: import org.apache.commons.logging.Log;
0: import org.apache.commons.logging.LogFactory;
/////////////////////////////////////////////////////////////////////////
0:     private static final Log LOG = LogFactory.getLog(SpringTest.class);
/////////////////////////////////////////////////////////////////////////
1:         LOG.info("Consumer has received messages....");
1:             LOG.info("Received: " + message);
commit:74a7a8b
/////////////////////////////////////////////////////////////////////////
1: import java.util.Iterator;
1: import java.util.List;
1: 
commit:230a86c
/////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////
1:  *      http://www.apache.org/licenses/LICENSE-2.0
author:Bosanac Dejan
-------------------------------------------------------------------------------
commit:8bf987b
/////////////////////////////////////////////////////////////////////////
1: import org.slf4j.Logger;
1: import org.slf4j.LoggerFactory;
/////////////////////////////////////////////////////////////////////////
1:     private static final Logger LOG = LoggerFactory.getLogger(SpringTest.class);
author:James Strachan
-------------------------------------------------------------------------------
commit:67310ad
/////////////////////////////////////////////////////////////////////////
1: /**
1:  *
1:  * Licensed to the Apache Software Foundation (ASF) under one or more
1:  * contributor license agreements.  See the NOTICE file distributed with
1:  * this work for additional information regarding copyright ownership.
1:  * The ASF licenses this file to You under the Apache License, Version 2.0
1:  * (the "License"); you may not use this file except in compliance with
1:  * the License.  You may obtain a copy of the License at
1:  *
0:  * http://www.apache.org/licenses/LICENSE-2.0
1:  *
1:  * Unless required by applicable law or agreed to in writing, software
1:  * distributed under the License is distributed on an "AS IS" BASIS,
1:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:  * See the License for the specific language governing permissions and
1:  * limitations under the License.
1:  */
1: package org.apache.activemq.spring;
1: 
1: import junit.framework.TestCase;
1: import org.springframework.context.support.AbstractApplicationContext;
1: import org.springframework.context.support.ClassPathXmlApplicationContext;
1: 
0: import java.util.Iterator;
0: import java.util.List;
1: 
1: /**
0:  * @version $Revision: 1.1 $
1:  */
1: public class SpringTestSupport extends TestCase {
0:     private static final org.apache.commons.logging.Log log = org.apache.commons.logging.LogFactory.getLog(SpringTest.class);
1:     protected AbstractApplicationContext context;
1:     protected SpringConsumer consumer;
1:     protected SpringProducer producer;
1: 
1:     /**
1:      * assert method that is used by all the test method to send and receive messages
1:      * based on each spring configuration.
1:      *
1:      * @param config
1:      * @throws Exception
1:      */
1:     protected void assertSenderConfig(String config) throws Exception {
1:         Thread.currentThread().setContextClassLoader(SpringTest.class.getClassLoader());
1:         context = new ClassPathXmlApplicationContext(config);
1: 
1:         consumer = (SpringConsumer) context.getBean("consumer");
1:         assertTrue("Found a valid consumer", consumer != null);
1: 
1:         consumer.start();
1: 
1:         // Wait a little to drain any left over messages.
1:         Thread.sleep(1000);
1:         consumer.flushMessages();
1: 
1:         producer = (SpringProducer) context.getBean("producer");
1:         assertTrue("Found a valid producer", producer != null);
1: 
1:         producer.start();
1: 
1:         // lets sleep a little to give the JMS time to dispatch stuff
1:         consumer.waitForMessagesToArrive(producer.getMessageCount());
1: 
1:         // now lets check that the consumer has received some messages
0:         List messages = consumer.flushMessages();
0:         log.info("Consumer has received messages....");
0:         for (Iterator iter = messages.iterator(); iter.hasNext();) {
1:             Object message = iter.next();
0:             log.info("Received: " + message);
1:         }
1: 
1:         assertEquals("Message count", producer.getMessageCount(), messages.size());
1:     }
1: 
1:     /**
1:      * Clean up method.
1:      *
1:      * @throws Exception
1:      */
1:     protected void tearDown() throws Exception {
1:         if (consumer != null) {
1:             consumer.stop();
1:         }
1:         if (producer != null) {
1:             producer.stop();
1:         }
1: 
1:         if (context != null) {
1:             context.destroy();
1:         }
1:     }
1: }
============================================================================