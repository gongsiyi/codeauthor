2:d29ca2a: /**
1:57b4941:  * Licensed to the Apache Software Foundation (ASF) under one or more
1:57b4941:  * contributor license agreements.  See the NOTICE file distributed with
1:57b4941:  * this work for additional information regarding copyright ownership.
1:57b4941:  * The ASF licenses this file to You under the Apache License, Version 2.0
1:57b4941:  * (the "License"); you may not use this file except in compliance with
1:57b4941:  * the License.  You may obtain a copy of the License at
1:f812e34:  *
1:230a86c:  *      http://www.apache.org/licenses/LICENSE-2.0
1:b0c2a40:  *
1:d29ca2a:  * Unless required by applicable law or agreed to in writing, software
1:d29ca2a:  * distributed under the License is distributed on an "AS IS" BASIS,
1:d29ca2a:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:d29ca2a:  * See the License for the specific language governing permissions and
1:d29ca2a:  * limitations under the License.
2:d29ca2a:  */
1:7f639a6: 
1:d29ca2a: package org.apache.activemq.filter;
8:d29ca2a: 
1:d29ca2a: import java.io.IOException;
1:d29ca2a: 
1:d29ca2a: import javax.jms.JMSException;
1:d29ca2a: import org.apache.activemq.command.ActiveMQDestination;
1:d29ca2a: import org.apache.activemq.util.JMSExceptionSupport;
1:d29ca2a: 
1:7f639a6: /**
1:d29ca2a:  * Represents a filter which only operates on Destinations
1:7f639a6:  */
1:d29ca2a: public abstract class DestinationFilter implements BooleanExpression {
1:f812e34: 
1:d29ca2a:     public static final String ANY_DESCENDENT = ">";
1:d29ca2a:     public static final String ANY_CHILD = "*";
1:f812e34: 
1:d29ca2a:     public Object evaluate(MessageEvaluationContext message) throws JMSException {
1:d29ca2a:         return matches(message) ? Boolean.TRUE : Boolean.FALSE;
6:d29ca2a:     }
1:7f639a6: 
1:d29ca2a:     public boolean matches(MessageEvaluationContext message) throws JMSException {
1:d29ca2a:         try {
1:ecf89a6:             if (message.isDropped()) {
1:d29ca2a:                 return false;
1:7f639a6:             }
1:d29ca2a:             return matches(message.getMessage().getDestination());
1:d29ca2a:         } catch (IOException e) {
1:d29ca2a:             throw JMSExceptionSupport.create(e);
1:7f639a6:         }
1:7f639a6:     }
1:7f639a6: 
1:d29ca2a:     public abstract boolean matches(ActiveMQDestination destination);
1:d29ca2a: 
1:d29ca2a:     public static DestinationFilter parseFilter(ActiveMQDestination destination) {
1:d29ca2a:         if (destination.isComposite()) {
1:d29ca2a:             return new CompositeDestinationFilter(destination);
1:ecf89a6:         }
1:d29ca2a:         String[] paths = DestinationPath.getDestinationPaths(destination);
1:d29ca2a:         int idx = paths.length - 1;
1:d29ca2a:         if (idx >= 0) {
1:d29ca2a:             String lastPath = paths[idx];
1:d29ca2a:             if (lastPath.equals(ANY_DESCENDENT)) {
1:7d5131e:                 return new PrefixDestinationFilter(paths, destination.getDestinationType());
1:f812e34:             } else {
1:d29ca2a:                 while (idx >= 0) {
1:d29ca2a:                     lastPath = paths[idx--];
1:d29ca2a:                     if (lastPath.equals(ANY_CHILD)) {
1:7d5131e:                         return new WildcardDestinationFilter(paths, destination.getDestinationType());
1:d29ca2a:                     }
1:d29ca2a:                 }
1:d29ca2a:             }
1:d29ca2a:         }
1:d29ca2a: 
1:d29ca2a:         // if none of the paths contain a wildcard then use equality
1:d29ca2a:         return new SimpleDestinationFilter(destination);
1:7f639a6:     }
1:7f639a6: 
1:94b404d:     public abstract boolean isWildcard();
1:d29ca2a: }
============================================================================
author:Hadrian Zbarcea
-------------------------------------------------------------------------------
commit:d54d046
author:Dhiraj Bokde
-------------------------------------------------------------------------------
commit:94b404d
/////////////////////////////////////////////////////////////////////////
1:     public abstract boolean isWildcard();
author:Hiram Chirino
-------------------------------------------------------------------------------
commit:e7e317d
/////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////
author:rajdavies
-------------------------------------------------------------------------------
commit:7f639a6
/////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////
0:         paths = rationalizePaths(paths);
/////////////////////////////////////////////////////////////////////////
1: 
1:     /**
0:      * Look for the case where any CHILD is followed by any decsendant
1:      */
0:     public static String[] rationalizePaths(String[] paths) {
0:         String[] result = paths;
0:         if (paths != null && paths.length > 1) {
0:             int last = paths.length - 1;
0:             if (paths[last].equals(ANY_DESCENDENT)) {
0:                 last -= 1;
0:                 if (paths[last].equals(ANY_DESCENDENT) || paths[last].equals(ANY_CHILD)) {
1: 
0:                     result = new String[paths.length-1];
0:                     System.arraycopy(paths,0,result,0,result.length);
0:                     result[result.length-1] = ANY_DESCENDENT;
0:                     result = rationalizePaths(result);
1:                 }
1:             }
1:         }
1: 
0:         return result;
1:     }
1: 
author:Hiram R. Chirino
-------------------------------------------------------------------------------
commit:9a8f6e4
commit:b0c2a40
/////////////////////////////////////////////////////////////////////////
1:  * 
commit:ecf89a6
/////////////////////////////////////////////////////////////////////////
1:             if (message.isDropped()) {
1:             }
commit:f812e34
/////////////////////////////////////////////////////////////////////////
1:  * 
1: 
1: 
0:             if (message.isDropped())
/////////////////////////////////////////////////////////////////////////
1:             } else {
commit:230a86c
/////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////
1:  *      http://www.apache.org/licenses/LICENSE-2.0
commit:57b4941
/////////////////////////////////////////////////////////////////////////
1:  * Licensed to the Apache Software Foundation (ASF) under one or more
1:  * contributor license agreements.  See the NOTICE file distributed with
1:  * this work for additional information regarding copyright ownership.
1:  * The ASF licenses this file to You under the Apache License, Version 2.0
1:  * (the "License"); you may not use this file except in compliance with
1:  * the License.  You may obtain a copy of the License at
commit:48b4869
/////////////////////////////////////////////////////////////////////////
0:  * Copyright 2005-2006 The Apache Software Foundation
commit:d29ca2a
/////////////////////////////////////////////////////////////////////////
1: /**
0:  *
0:  * Copyright 2004 The Apache Software Foundation
0:  *
0:  * Licensed under the Apache License, Version 2.0 (the "License");
0:  * you may not use this file except in compliance with the License.
0:  * You may obtain a copy of the License at
0:  *
0:  * http://www.apache.org/licenses/LICENSE-2.0
0:  *
1:  * Unless required by applicable law or agreed to in writing, software
1:  * distributed under the License is distributed on an "AS IS" BASIS,
1:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:  * See the License for the specific language governing permissions and
1:  * limitations under the License.
1:  */
1: 
1: package org.apache.activemq.filter;
1: 
1: import java.io.IOException;
1: 
1: import javax.jms.JMSException;
1: 
1: import org.apache.activemq.command.ActiveMQDestination;
1: import org.apache.activemq.util.JMSExceptionSupport;
1: 
1: 
1: /**
1:  * Represents a filter which only operates on Destinations
0:  *
0:  * @version $Revision: 1.3 $
1:  */
1: public abstract class DestinationFilter implements BooleanExpression {
1:     
1:     public static final String ANY_DESCENDENT = ">";
1:     public static final String ANY_CHILD = "*";
1: 
1:     public Object evaluate(MessageEvaluationContext message) throws JMSException {
1:         return matches(message) ? Boolean.TRUE : Boolean.FALSE;
1:     }
1:     
1:     public boolean matches(MessageEvaluationContext message) throws JMSException {
1:         try {
0:             if( message.isDropped() )
1:                 return false;
1:             return matches(message.getMessage().getDestination());
1:         } catch (IOException e) {
1:             throw JMSExceptionSupport.create(e);
1:         }
1:     }
1: 
1:     public abstract boolean matches(ActiveMQDestination destination);
1: 
1:     public static DestinationFilter parseFilter(ActiveMQDestination destination) {
1:         if (destination.isComposite()) {
1:             return new CompositeDestinationFilter(destination);
1:         }
1:         String[] paths = DestinationPath.getDestinationPaths(destination);
1:         int idx = paths.length - 1;
1:         if (idx >= 0) {
1:             String lastPath = paths[idx];
1:             if (lastPath.equals(ANY_DESCENDENT)) {
0:                 return new PrefixDestinationFilter(paths);
1:             }
0:             else {
1:                 while (idx >= 0) {
1:                     lastPath = paths[idx--];
1:                     if (lastPath.equals(ANY_CHILD)) {
0:                         return new WildcardDestinationFilter(paths);
1:                     }
1:                 }
1:             }
1:         }
1: 
1:         // if none of the paths contain a wildcard then use equality
1:         return new SimpleDestinationFilter(destination);
1:     }
1: }
author:Bosanac Dejan
-------------------------------------------------------------------------------
commit:7d5131e
/////////////////////////////////////////////////////////////////////////
1:                 return new PrefixDestinationFilter(paths, destination.getDestinationType());
1:                         return new WildcardDestinationFilter(paths, destination.getDestinationType());
============================================================================