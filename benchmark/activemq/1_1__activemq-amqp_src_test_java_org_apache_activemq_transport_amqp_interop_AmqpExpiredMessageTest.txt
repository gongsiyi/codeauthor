1:0752d84: /*
1:0752d84:  * Licensed to the Apache Software Foundation (ASF) under one or more
1:0752d84:  * contributor license agreements.  See the NOTICE file distributed with
1:0752d84:  * this work for additional information regarding copyright ownership.
1:0752d84:  * The ASF licenses this file to You under the Apache License, Version 2.0
1:0752d84:  * (the "License"); you may not use this file except in compliance with
1:0752d84:  * the License.  You may obtain a copy of the License at
1:0752d84:  *
1:0752d84:  *      http://www.apache.org/licenses/LICENSE-2.0
1:0752d84:  *
1:0752d84:  * Unless required by applicable law or agreed to in writing, software
1:0752d84:  * distributed under the License is distributed on an "AS IS" BASIS,
1:0752d84:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:0752d84:  * See the License for the specific language governing permissions and
1:0752d84:  * limitations under the License.
1:0752d84:  */
1:0752d84: package org.apache.activemq.transport.amqp.interop;
1:0752d84: 
1:0752d84: import static org.junit.Assert.assertEquals;
1:0752d84: import static org.junit.Assert.assertNotNull;
1:0752d84: import static org.junit.Assert.assertNull;
1:0752d84: 
1:0752d84: import java.util.concurrent.TimeUnit;
1:0752d84: 
1:0752d84: import org.apache.activemq.broker.jmx.QueueViewMBean;
1:0752d84: import org.apache.activemq.transport.amqp.client.AmqpClient;
1:0752d84: import org.apache.activemq.transport.amqp.client.AmqpClientTestSupport;
1:0752d84: import org.apache.activemq.transport.amqp.client.AmqpConnection;
1:0752d84: import org.apache.activemq.transport.amqp.client.AmqpMessage;
1:0752d84: import org.apache.activemq.transport.amqp.client.AmqpReceiver;
1:0752d84: import org.apache.activemq.transport.amqp.client.AmqpSender;
1:0752d84: import org.apache.activemq.transport.amqp.client.AmqpSession;
1:0752d84: import org.junit.Test;
1:0752d84: 
1:0752d84: public class AmqpExpiredMessageTest extends AmqpClientTestSupport {
1:0752d84: 
1:0752d84:    @Test(timeout = 60000)
1:0752d84:    public void testSendMessageThatIsAlreadyExpiredUsingAbsoluteTime() throws Exception {
1:0752d84:       AmqpClient client = createAmqpClient();
1:0752d84:       AmqpConnection connection = trackConnection(client.connect());
1:0752d84:       AmqpSession session = connection.createSession();
1:0752d84: 
1:0752d84:       AmqpSender sender = session.createSender(getTestName());
1:0752d84: 
1:0752d84:       // Get the Queue View early to avoid racing the delivery.
1:0752d84:       final QueueViewMBean queueView = getProxyToQueue(getTestName());
1:0752d84:       assertNotNull(queueView);
1:0752d84: 
1:0752d84:       AmqpMessage message = new AmqpMessage();
1:0752d84:       message.setAbsoluteExpiryTime(System.currentTimeMillis() - 5000);
1:0752d84:       message.setText("Test-Message");
1:0752d84:       sender.send(message);
1:0752d84:       sender.close();
1:0752d84: 
1:0752d84:       // Broker doesn't track messages that arrived already expired.
1:0752d84:       assertEquals(0, queueView.getQueueSize());
1:0752d84: 
1:0752d84:       // Now try and get the message
1:0752d84:       AmqpReceiver receiver = session.createReceiver(getTestName());
1:0752d84:       receiver.flow(1);
1:0752d84:       AmqpMessage received = receiver.receive(1, TimeUnit.SECONDS);
1:0752d84:       assertNull(received);
1:0752d84: 
1:0752d84:       // Broker doesn't track messages that arrived already expired.
1:0752d84:       assertEquals(0, queueView.getExpiredCount());
1:0752d84: 
1:0752d84:       connection.close();
1:0752d84:    }
1:0752d84: 
1:0752d84:    @Test(timeout = 60000)
1:0752d84:    public void testSendMessageThatIsNotExpiredUsingAbsoluteTime() throws Exception {
1:0752d84:       AmqpClient client = createAmqpClient();
1:0752d84:       AmqpConnection connection = trackConnection(client.connect());
1:0752d84:       AmqpSession session = connection.createSession();
1:0752d84: 
1:0752d84:       AmqpSender sender = session.createSender(getTestName());
1:0752d84: 
1:0752d84:       // Get the Queue View early to avoid racing the delivery.
1:0752d84:       final QueueViewMBean queueView = getProxyToQueue(getTestName());
1:0752d84:       assertNotNull(queueView);
1:0752d84: 
1:0752d84:       AmqpMessage message = new AmqpMessage();
1:0752d84:       message.setAbsoluteExpiryTime(System.currentTimeMillis() + 5000);
1:0752d84:       message.setText("Test-Message");
1:0752d84:       sender.send(message);
1:0752d84:       sender.close();
1:0752d84: 
1:0752d84:       assertEquals(1, queueView.getQueueSize());
1:0752d84: 
1:0752d84:       // Now try and get the message
1:0752d84:       AmqpReceiver receiver = session.createReceiver(getTestName());
1:0752d84:       receiver.flow(1);
1:0752d84:       AmqpMessage received = receiver.receive(5, TimeUnit.SECONDS);
1:0752d84:       assertNotNull(received);
1:0752d84: 
1:0752d84:       assertEquals(0, queueView.getExpiredCount());
1:0752d84: 
1:0752d84:       connection.close();
1:0752d84:    }
1:0752d84: 
1:0752d84:    @Test(timeout = 60000)
1:0752d84:    public void testSendMessageThatIsExiredUsingAbsoluteTimeWithLongTTL() throws Exception {
1:0752d84:       AmqpClient client = createAmqpClient();
1:0752d84:       AmqpConnection connection = trackConnection(client.connect());
1:0752d84:       AmqpSession session = connection.createSession();
1:0752d84: 
1:0752d84:       AmqpSender sender = session.createSender(getTestName());
1:0752d84: 
1:0752d84:       // Get the Queue View early to avoid racing the delivery.
1:0752d84:       final QueueViewMBean queueView = getProxyToQueue(getTestName());
1:0752d84:       assertNotNull(queueView);
1:0752d84: 
1:0752d84:       AmqpMessage message = new AmqpMessage();
1:0752d84:       message.setAbsoluteExpiryTime(System.currentTimeMillis() - 5000);
1:0752d84:       // AET should override any TTL set
1:0752d84:       message.setTimeToLive(60000);
1:0752d84:       message.setText("Test-Message");
1:0752d84:       sender.send(message);
1:0752d84:       sender.close();
1:0752d84: 
1:0752d84:       // Broker doesn't track messages that arrived already expired.
1:0752d84:       assertEquals(0, queueView.getQueueSize());
1:0752d84: 
1:0752d84:       // Now try and get the message
1:0752d84:       AmqpReceiver receiver = session.createReceiver(getTestName());
1:0752d84:       receiver.flow(1);
1:0752d84:       AmqpMessage received = receiver.receive(1, TimeUnit.SECONDS);
1:0752d84:       assertNull(received);
1:0752d84: 
1:0752d84:       // Broker doesn't track messages that arrived already expired.
1:0752d84:       assertEquals(0, queueView.getExpiredCount());
1:0752d84: 
1:0752d84:       connection.close();
1:0752d84:    }
1:0752d84: 
1:0752d84:    @Test(timeout = 60000)
1:0752d84:    public void testSendMessageThatIsExpiredUsingTTLWhenAbsoluteIsZero() throws Exception {
1:0752d84:       AmqpClient client = createAmqpClient();
1:0752d84:       AmqpConnection connection = trackConnection(client.connect());
1:0752d84:       AmqpSession session = connection.createSession();
1:0752d84: 
1:0752d84:       AmqpSender sender = session.createSender(getTestName());
1:0752d84: 
1:0752d84:       // Get the Queue View early to avoid racing the delivery.
1:0752d84:       final QueueViewMBean queueView = getProxyToQueue(getTestName());
1:0752d84:       assertNotNull(queueView);
1:0752d84: 
1:0752d84:       AmqpMessage message = new AmqpMessage();
1:0752d84:       message.setAbsoluteExpiryTime(0);
1:0752d84:       // AET should override any TTL set unless it is zero
1:0752d84:       message.setTimeToLive(1000);
1:0752d84:       message.setText("Test-Message");
1:0752d84:       sender.send(message);
1:0752d84:       sender.close();
1:0752d84: 
1:0752d84:       assertEquals(1, queueView.getQueueSize());
1:0752d84: 
1:0752d84:       Thread.sleep(1000);
1:0752d84: 
1:0752d84:       // Now try and get the message
1:0752d84:       AmqpReceiver receiver = session.createReceiver(getTestName());
1:0752d84:       receiver.flow(1);
1:0752d84:       AmqpMessage received = receiver.receive(1, TimeUnit.SECONDS);
1:0752d84:       assertNull(received);
1:0752d84: 
1:0752d84:       assertEquals(1, queueView.getExpiredCount());
1:0752d84: 
1:0752d84:       connection.close();
1:0752d84:    }
1:0752d84: 
1:0752d84:    @Test(timeout = 60000)
1:0752d84:    public void testSendMessageThatIsNotExpiredUsingAbsoluteTimeWithElspsedTTL() throws Exception {
1:0752d84:       AmqpClient client = createAmqpClient();
1:0752d84:       AmqpConnection connection = trackConnection(client.connect());
1:0752d84:       AmqpSession session = connection.createSession();
1:0752d84: 
1:0752d84:       AmqpSender sender = session.createSender(getTestName());
1:0752d84: 
1:0752d84:       // Get the Queue View early to avoid racing the delivery.
1:0752d84:       final QueueViewMBean queueView = getProxyToQueue(getTestName());
1:0752d84:       assertNotNull(queueView);
1:0752d84: 
1:0752d84:       AmqpMessage message = new AmqpMessage();
1:0752d84:       message.setAbsoluteExpiryTime(System.currentTimeMillis() + 5000);
1:0752d84:       // AET should override any TTL set
1:0752d84:       message.setTimeToLive(10);
1:0752d84:       message.setText("Test-Message");
1:0752d84:       sender.send(message);
1:0752d84:       sender.close();
1:0752d84: 
1:0752d84:       Thread.sleep(50);
1:0752d84: 
1:0752d84:       assertEquals(1, queueView.getQueueSize());
1:0752d84: 
1:0752d84:       // Now try and get the message
1:0752d84:       AmqpReceiver receiver = session.createReceiver(getTestName());
1:0752d84:       receiver.flow(1);
1:0752d84:       AmqpMessage received = receiver.receive(5, TimeUnit.SECONDS);
1:0752d84:       assertNotNull(received);
1:0752d84: 
1:0752d84:       assertEquals(0, queueView.getExpiredCount());
1:0752d84: 
1:0752d84:       connection.close();
1:0752d84:    }
1:0752d84: 
1:0752d84:    @Test(timeout = 60000)
1:0752d84:    public void testSendMessageThatIsNotExpiredUsingTimeToLive() throws Exception {
1:0752d84:       AmqpClient client = createAmqpClient();
1:0752d84:       AmqpConnection connection = trackConnection(client.connect());
1:0752d84:       AmqpSession session = connection.createSession();
1:0752d84: 
1:0752d84:       AmqpSender sender = session.createSender(getTestName());
1:0752d84: 
1:0752d84:       // Get the Queue View early to avoid racing the delivery.
1:0752d84:       final QueueViewMBean queueView = getProxyToQueue(getTestName());
1:0752d84:       assertNotNull(queueView);
1:0752d84: 
1:0752d84:       AmqpMessage message = new AmqpMessage();
1:0752d84:       message.setTimeToLive(5000);
1:0752d84:       message.setText("Test-Message");
1:0752d84:       sender.send(message);
1:0752d84:       sender.close();
1:0752d84: 
1:0752d84:       assertEquals(1, queueView.getQueueSize());
1:0752d84: 
1:0752d84:       // Now try and get the message
1:0752d84:       AmqpReceiver receiver = session.createReceiver(getTestName());
1:0752d84:       receiver.flow(1);
1:0752d84:       AmqpMessage received = receiver.receive(5, TimeUnit.SECONDS);
1:0752d84:       assertNotNull(received);
1:0752d84: 
1:0752d84:       assertEquals(0, queueView.getExpiredCount());
1:0752d84: 
1:0752d84:       connection.close();
1:0752d84:    }
1:0752d84: 
1:0752d84:    @Test(timeout = 60000)
1:0752d84:    public void testSendMessageThenAllowToExpiredUsingTimeToLive() throws Exception {
1:0752d84:       AmqpClient client = createAmqpClient();
1:0752d84:       AmqpConnection connection = trackConnection(client.connect());
1:0752d84:       AmqpSession session = connection.createSession();
1:0752d84: 
1:0752d84:       AmqpSender sender = session.createSender(getTestName());
1:0752d84: 
1:0752d84:       // Get the Queue View early to avoid racing the delivery.
1:0752d84:       final QueueViewMBean queueView = getProxyToQueue(getTestName());
1:0752d84:       assertNotNull(queueView);
1:0752d84: 
1:0752d84:       AmqpMessage message = new AmqpMessage();
1:0752d84:       message.setTimeToLive(10);
1:0752d84:       message.setText("Test-Message");
1:0752d84:       sender.send(message);
1:0752d84:       sender.close();
1:0752d84: 
1:0752d84:       Thread.sleep(50);
1:0752d84: 
1:0752d84:       assertEquals(1, queueView.getQueueSize());
1:0752d84: 
1:0752d84:       // Now try and get the message
1:0752d84:       AmqpReceiver receiver = session.createReceiver(getTestName());
1:0752d84:       receiver.flow(1);
1:0752d84:       AmqpMessage received = receiver.receive(1, TimeUnit.SECONDS);
1:0752d84:       assertNull(received);
1:0752d84: 
1:0752d84:       assertEquals(1, queueView.getExpiredCount());
1:0752d84: 
1:0752d84:       connection.close();
1:0752d84:    }
1:0752d84: }
============================================================================
author:Timothy Bish
-------------------------------------------------------------------------------
commit:0752d84
/////////////////////////////////////////////////////////////////////////
1: /*
1:  * Licensed to the Apache Software Foundation (ASF) under one or more
1:  * contributor license agreements.  See the NOTICE file distributed with
1:  * this work for additional information regarding copyright ownership.
1:  * The ASF licenses this file to You under the Apache License, Version 2.0
1:  * (the "License"); you may not use this file except in compliance with
1:  * the License.  You may obtain a copy of the License at
1:  *
1:  *      http://www.apache.org/licenses/LICENSE-2.0
1:  *
1:  * Unless required by applicable law or agreed to in writing, software
1:  * distributed under the License is distributed on an "AS IS" BASIS,
1:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:  * See the License for the specific language governing permissions and
1:  * limitations under the License.
1:  */
1: package org.apache.activemq.transport.amqp.interop;
1: 
1: import static org.junit.Assert.assertEquals;
1: import static org.junit.Assert.assertNotNull;
1: import static org.junit.Assert.assertNull;
1: 
1: import java.util.concurrent.TimeUnit;
1: 
1: import org.apache.activemq.broker.jmx.QueueViewMBean;
1: import org.apache.activemq.transport.amqp.client.AmqpClient;
1: import org.apache.activemq.transport.amqp.client.AmqpClientTestSupport;
1: import org.apache.activemq.transport.amqp.client.AmqpConnection;
1: import org.apache.activemq.transport.amqp.client.AmqpMessage;
1: import org.apache.activemq.transport.amqp.client.AmqpReceiver;
1: import org.apache.activemq.transport.amqp.client.AmqpSender;
1: import org.apache.activemq.transport.amqp.client.AmqpSession;
1: import org.junit.Test;
1: 
1: public class AmqpExpiredMessageTest extends AmqpClientTestSupport {
1: 
1:    @Test(timeout = 60000)
1:    public void testSendMessageThatIsAlreadyExpiredUsingAbsoluteTime() throws Exception {
1:       AmqpClient client = createAmqpClient();
1:       AmqpConnection connection = trackConnection(client.connect());
1:       AmqpSession session = connection.createSession();
1: 
1:       AmqpSender sender = session.createSender(getTestName());
1: 
1:       // Get the Queue View early to avoid racing the delivery.
1:       final QueueViewMBean queueView = getProxyToQueue(getTestName());
1:       assertNotNull(queueView);
1: 
1:       AmqpMessage message = new AmqpMessage();
1:       message.setAbsoluteExpiryTime(System.currentTimeMillis() - 5000);
1:       message.setText("Test-Message");
1:       sender.send(message);
1:       sender.close();
1: 
1:       // Broker doesn't track messages that arrived already expired.
1:       assertEquals(0, queueView.getQueueSize());
1: 
1:       // Now try and get the message
1:       AmqpReceiver receiver = session.createReceiver(getTestName());
1:       receiver.flow(1);
1:       AmqpMessage received = receiver.receive(1, TimeUnit.SECONDS);
1:       assertNull(received);
1: 
1:       // Broker doesn't track messages that arrived already expired.
1:       assertEquals(0, queueView.getExpiredCount());
1: 
1:       connection.close();
1:    }
1: 
1:    @Test(timeout = 60000)
1:    public void testSendMessageThatIsNotExpiredUsingAbsoluteTime() throws Exception {
1:       AmqpClient client = createAmqpClient();
1:       AmqpConnection connection = trackConnection(client.connect());
1:       AmqpSession session = connection.createSession();
1: 
1:       AmqpSender sender = session.createSender(getTestName());
1: 
1:       // Get the Queue View early to avoid racing the delivery.
1:       final QueueViewMBean queueView = getProxyToQueue(getTestName());
1:       assertNotNull(queueView);
1: 
1:       AmqpMessage message = new AmqpMessage();
1:       message.setAbsoluteExpiryTime(System.currentTimeMillis() + 5000);
1:       message.setText("Test-Message");
1:       sender.send(message);
1:       sender.close();
1: 
1:       assertEquals(1, queueView.getQueueSize());
1: 
1:       // Now try and get the message
1:       AmqpReceiver receiver = session.createReceiver(getTestName());
1:       receiver.flow(1);
1:       AmqpMessage received = receiver.receive(5, TimeUnit.SECONDS);
1:       assertNotNull(received);
1: 
1:       assertEquals(0, queueView.getExpiredCount());
1: 
1:       connection.close();
1:    }
1: 
1:    @Test(timeout = 60000)
1:    public void testSendMessageThatIsExiredUsingAbsoluteTimeWithLongTTL() throws Exception {
1:       AmqpClient client = createAmqpClient();
1:       AmqpConnection connection = trackConnection(client.connect());
1:       AmqpSession session = connection.createSession();
1: 
1:       AmqpSender sender = session.createSender(getTestName());
1: 
1:       // Get the Queue View early to avoid racing the delivery.
1:       final QueueViewMBean queueView = getProxyToQueue(getTestName());
1:       assertNotNull(queueView);
1: 
1:       AmqpMessage message = new AmqpMessage();
1:       message.setAbsoluteExpiryTime(System.currentTimeMillis() - 5000);
1:       // AET should override any TTL set
1:       message.setTimeToLive(60000);
1:       message.setText("Test-Message");
1:       sender.send(message);
1:       sender.close();
1: 
1:       // Broker doesn't track messages that arrived already expired.
1:       assertEquals(0, queueView.getQueueSize());
1: 
1:       // Now try and get the message
1:       AmqpReceiver receiver = session.createReceiver(getTestName());
1:       receiver.flow(1);
1:       AmqpMessage received = receiver.receive(1, TimeUnit.SECONDS);
1:       assertNull(received);
1: 
1:       // Broker doesn't track messages that arrived already expired.
1:       assertEquals(0, queueView.getExpiredCount());
1: 
1:       connection.close();
1:    }
1: 
1:    @Test(timeout = 60000)
1:    public void testSendMessageThatIsExpiredUsingTTLWhenAbsoluteIsZero() throws Exception {
1:       AmqpClient client = createAmqpClient();
1:       AmqpConnection connection = trackConnection(client.connect());
1:       AmqpSession session = connection.createSession();
1: 
1:       AmqpSender sender = session.createSender(getTestName());
1: 
1:       // Get the Queue View early to avoid racing the delivery.
1:       final QueueViewMBean queueView = getProxyToQueue(getTestName());
1:       assertNotNull(queueView);
1: 
1:       AmqpMessage message = new AmqpMessage();
1:       message.setAbsoluteExpiryTime(0);
1:       // AET should override any TTL set unless it is zero
1:       message.setTimeToLive(1000);
1:       message.setText("Test-Message");
1:       sender.send(message);
1:       sender.close();
1: 
1:       assertEquals(1, queueView.getQueueSize());
1: 
1:       Thread.sleep(1000);
1: 
1:       // Now try and get the message
1:       AmqpReceiver receiver = session.createReceiver(getTestName());
1:       receiver.flow(1);
1:       AmqpMessage received = receiver.receive(1, TimeUnit.SECONDS);
1:       assertNull(received);
1: 
1:       assertEquals(1, queueView.getExpiredCount());
1: 
1:       connection.close();
1:    }
1: 
1:    @Test(timeout = 60000)
1:    public void testSendMessageThatIsNotExpiredUsingAbsoluteTimeWithElspsedTTL() throws Exception {
1:       AmqpClient client = createAmqpClient();
1:       AmqpConnection connection = trackConnection(client.connect());
1:       AmqpSession session = connection.createSession();
1: 
1:       AmqpSender sender = session.createSender(getTestName());
1: 
1:       // Get the Queue View early to avoid racing the delivery.
1:       final QueueViewMBean queueView = getProxyToQueue(getTestName());
1:       assertNotNull(queueView);
1: 
1:       AmqpMessage message = new AmqpMessage();
1:       message.setAbsoluteExpiryTime(System.currentTimeMillis() + 5000);
1:       // AET should override any TTL set
1:       message.setTimeToLive(10);
1:       message.setText("Test-Message");
1:       sender.send(message);
1:       sender.close();
1: 
1:       Thread.sleep(50);
1: 
1:       assertEquals(1, queueView.getQueueSize());
1: 
1:       // Now try and get the message
1:       AmqpReceiver receiver = session.createReceiver(getTestName());
1:       receiver.flow(1);
1:       AmqpMessage received = receiver.receive(5, TimeUnit.SECONDS);
1:       assertNotNull(received);
1: 
1:       assertEquals(0, queueView.getExpiredCount());
1: 
1:       connection.close();
1:    }
1: 
1:    @Test(timeout = 60000)
1:    public void testSendMessageThatIsNotExpiredUsingTimeToLive() throws Exception {
1:       AmqpClient client = createAmqpClient();
1:       AmqpConnection connection = trackConnection(client.connect());
1:       AmqpSession session = connection.createSession();
1: 
1:       AmqpSender sender = session.createSender(getTestName());
1: 
1:       // Get the Queue View early to avoid racing the delivery.
1:       final QueueViewMBean queueView = getProxyToQueue(getTestName());
1:       assertNotNull(queueView);
1: 
1:       AmqpMessage message = new AmqpMessage();
1:       message.setTimeToLive(5000);
1:       message.setText("Test-Message");
1:       sender.send(message);
1:       sender.close();
1: 
1:       assertEquals(1, queueView.getQueueSize());
1: 
1:       // Now try and get the message
1:       AmqpReceiver receiver = session.createReceiver(getTestName());
1:       receiver.flow(1);
1:       AmqpMessage received = receiver.receive(5, TimeUnit.SECONDS);
1:       assertNotNull(received);
1: 
1:       assertEquals(0, queueView.getExpiredCount());
1: 
1:       connection.close();
1:    }
1: 
1:    @Test(timeout = 60000)
1:    public void testSendMessageThenAllowToExpiredUsingTimeToLive() throws Exception {
1:       AmqpClient client = createAmqpClient();
1:       AmqpConnection connection = trackConnection(client.connect());
1:       AmqpSession session = connection.createSession();
1: 
1:       AmqpSender sender = session.createSender(getTestName());
1: 
1:       // Get the Queue View early to avoid racing the delivery.
1:       final QueueViewMBean queueView = getProxyToQueue(getTestName());
1:       assertNotNull(queueView);
1: 
1:       AmqpMessage message = new AmqpMessage();
1:       message.setTimeToLive(10);
1:       message.setText("Test-Message");
1:       sender.send(message);
1:       sender.close();
1: 
1:       Thread.sleep(50);
1: 
1:       assertEquals(1, queueView.getQueueSize());
1: 
1:       // Now try and get the message
1:       AmqpReceiver receiver = session.createReceiver(getTestName());
1:       receiver.flow(1);
1:       AmqpMessage received = receiver.receive(1, TimeUnit.SECONDS);
1:       assertNull(received);
1: 
1:       assertEquals(1, queueView.getExpiredCount());
1: 
1:       connection.close();
1:    }
1: }
============================================================================