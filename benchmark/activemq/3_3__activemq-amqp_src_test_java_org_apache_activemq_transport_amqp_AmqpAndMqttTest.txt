1:31c55f7: /*
1:4f108ce:  * Licensed to the Apache Software Foundation (ASF) under one or more
1:4f108ce:  * contributor license agreements.  See the NOTICE file distributed with
1:4f108ce:  * this work for additional information regarding copyright ownership.
1:4f108ce:  * The ASF licenses this file to You under the Apache License, Version 2.0
1:4f108ce:  * (the "License"); you may not use this file except in compliance with
1:4f108ce:  * the License.  You may obtain a copy of the License at
1:4f108ce:  *
1:4f108ce:  *      http://www.apache.org/licenses/LICENSE-2.0
1:4f108ce:  *
1:4f108ce:  * Unless required by applicable law or agreed to in writing, software
1:4f108ce:  * distributed under the License is distributed on an "AS IS" BASIS,
1:4f108ce:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:4f108ce:  * See the License for the specific language governing permissions and
1:4f108ce:  * limitations under the License.
1:4f108ce:  */
1:31c55f7: package org.apache.activemq.transport.amqp;
4:4aac5a6: 
1:3051882: import static org.junit.Assert.assertNotNull;
1:3051882: import static org.junit.Assert.assertTrue;
1:4aac5a6: 
1:4aac5a6: import java.io.UnsupportedEncodingException;
1:4aac5a6: import java.util.Arrays;
1:4aac5a6: 
1:3051882: import javax.jms.BytesMessage;
1:3051882: import javax.jms.Connection;
1:3051882: import javax.jms.ExceptionListener;
1:3051882: import javax.jms.JMSException;
1:3051882: import javax.jms.Message;
1:3051882: import javax.jms.MessageConsumer;
1:3051882: import javax.jms.Session;
1:3051882: 
1:3051882: import org.apache.activemq.broker.BrokerService;
1:3051882: import org.apache.activemq.broker.TransportConnector;
1:3051882: import org.apache.qpid.jms.JmsConnectionFactory;
1:3051882: import org.fusesource.mqtt.client.BlockingConnection;
1:3051882: import org.fusesource.mqtt.client.MQTT;
1:3051882: import org.fusesource.mqtt.client.QoS;
1:3051882: import org.junit.After;
1:3051882: import org.junit.Before;
1:3051882: import org.junit.Test;
1:3051882: 
1:3051882: public class AmqpAndMqttTest {
1:4aac5a6: 
1:4aac5a6:     protected BrokerService broker;
1:4aac5a6:     private TransportConnector amqpConnector;
1:4aac5a6:     private TransportConnector mqttConnector;
1:4aac5a6: 
1:3051882:     @Before
1:3051882:     public void setUp() throws Exception {
1:4aac5a6:         broker = createBroker();
1:4aac5a6:         broker.start();
1:4aac5a6:         broker.waitUntilStarted();
1:4aac5a6:     }
1:4aac5a6: 
1:3051882:     @After
1:3051882:     public void tearDown() throws Exception {
1:3051882:         if (broker != null) {
1:4aac5a6:             broker.stop();
1:4aac5a6:             broker.waitUntilStopped();
1:4aac5a6:             broker = null;
1:4aac5a6:         }
1:4aac5a6:     }
1:4aac5a6: 
1:4aac5a6:     protected BrokerService createBroker() throws Exception {
1:4aac5a6:         BrokerService broker = new BrokerService();
1:4aac5a6:         broker.setPersistent(false);
1:3051882:         broker.setUseJmx(false);
1:3051882:         broker.setAdvisorySupport(false);
1:3051882:         broker.setSchedulerSupport(false);
1:3051882: 
1:4aac5a6:         amqpConnector = broker.addConnector("amqp://0.0.0.0:0");
1:4aac5a6:         mqttConnector = broker.addConnector("mqtt://0.0.0.0:0");
1:3051882: 
1:4aac5a6:         return broker;
1:4aac5a6:     }
1:4aac5a6: 
1:3051882:     @Test(timeout = 60000)
1:4aac5a6:     public void testFromMqttToAmqp() throws Exception {
1:4aac5a6:         Connection amqp = createAmqpConnection();
1:4aac5a6:         Session session = amqp.createSession(false, Session.AUTO_ACKNOWLEDGE);
1:4aac5a6:         MessageConsumer consumer = session.createConsumer(session.createTopic("topic://FOO"));
1:4aac5a6: 
1:4aac5a6:         final BlockingConnection mqtt = createMQTTConnection().blockingConnection();
1:4aac5a6:         mqtt.connect();
1:4aac5a6:         byte[] payload = bytes("Hello World");
1:4aac5a6:         mqtt.publish("FOO", payload, QoS.AT_LEAST_ONCE, false);
1:4aac5a6:         mqtt.disconnect();
1:4aac5a6: 
1:4aac5a6:         Message msg = consumer.receive(1000 * 5);
1:4aac5a6:         assertNotNull(msg);
1:4aac5a6:         assertTrue(msg instanceof BytesMessage);
1:4aac5a6: 
1:4aac5a6:         BytesMessage bmsg = (BytesMessage) msg;
1:4aac5a6:         byte[] actual = new byte[(int) bmsg.getBodyLength()];
1:4aac5a6:         bmsg.readBytes(actual);
1:4aac5a6:         assertTrue(Arrays.equals(actual, payload));
1:4aac5a6:         amqp.close();
1:4aac5a6:     }
1:4aac5a6: 
1:4aac5a6:     private byte[] bytes(String value) {
1:4aac5a6:         try {
1:4aac5a6:             return value.getBytes("UTF-8");
1:4aac5a6:         } catch (UnsupportedEncodingException e) {
1:4aac5a6:             throw new RuntimeException(e);
1:4aac5a6:         }
1:4aac5a6:     }
1:4aac5a6: 
1:4aac5a6:     protected MQTT createMQTTConnection() throws Exception {
1:4aac5a6:         MQTT mqtt = new MQTT();
1:4aac5a6:         mqtt.setConnectAttemptsMax(1);
1:4aac5a6:         mqtt.setReconnectAttemptsMax(0);
1:4aac5a6:         mqtt.setHost("localhost", mqttConnector.getConnectUri().getPort());
1:4aac5a6:         return mqtt;
1:4aac5a6:     }
1:4aac5a6: 
1:4aac5a6:     public Connection createAmqpConnection() throws Exception {
1:3051882: 
1:3051882:         String amqpURI = "amqp://localhost:" + amqpConnector.getConnectUri().getPort();
1:3051882: 
1:3051882:         final JmsConnectionFactory factory = new JmsConnectionFactory(amqpURI);
1:3051882: 
1:3051882:         factory.setUsername("admin");
1:3051882:         factory.setPassword("password");
1:3051882: 
1:4aac5a6:         final Connection connection = factory.createConnection();
1:4aac5a6:         connection.setExceptionListener(new ExceptionListener() {
3:4aac5a6:             @Override
1:4aac5a6:             public void onException(JMSException exception) {
1:4aac5a6:                 exception.printStackTrace();
1:4aac5a6:             }
1:4aac5a6:         });
1:31c55f7: 
1:4aac5a6:         connection.start();
1:4aac5a6:         return connection;
1:4aac5a6:     }
1:4aac5a6: }
============================================================================
author:Timothy Bish
-------------------------------------------------------------------------------
commit:31c55f7
/////////////////////////////////////////////////////////////////////////
1: /*
/////////////////////////////////////////////////////////////////////////
1: package org.apache.activemq.transport.amqp;
/////////////////////////////////////////////////////////////////////////
1: 
commit:3051882
/////////////////////////////////////////////////////////////////////////
1: import static org.junit.Assert.assertNotNull;
1: import static org.junit.Assert.assertTrue;
1: import javax.jms.BytesMessage;
1: import javax.jms.Connection;
1: import javax.jms.ExceptionListener;
1: import javax.jms.JMSException;
1: import javax.jms.Message;
1: import javax.jms.MessageConsumer;
1: import javax.jms.Session;
1: 
1: import org.apache.activemq.broker.BrokerService;
1: import org.apache.activemq.broker.TransportConnector;
1: import org.apache.qpid.jms.JmsConnectionFactory;
1: import org.fusesource.mqtt.client.BlockingConnection;
1: import org.fusesource.mqtt.client.MQTT;
1: import org.fusesource.mqtt.client.QoS;
1: import org.junit.After;
1: import org.junit.Before;
1: import org.junit.Test;
1: 
1: public class AmqpAndMqttTest {
1:     @Before
1:     public void setUp() throws Exception {
1:     @After
1:     public void tearDown() throws Exception {
1:         if (broker != null) {
1:         broker.setUseJmx(false);
1:         broker.setAdvisorySupport(false);
1:         broker.setSchedulerSupport(false);
1: 
1: 
1:     @Test(timeout = 60000)
/////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////
1: 
1:         String amqpURI = "amqp://localhost:" + amqpConnector.getConnectUri().getPort();
1: 
1:         final JmsConnectionFactory factory = new JmsConnectionFactory(amqpURI);
1: 
1:         factory.setUsername("admin");
1:         factory.setPassword("password");
1: 
/////////////////////////////////////////////////////////////////////////
author:gtully
-------------------------------------------------------------------------------
commit:4f108ce
/////////////////////////////////////////////////////////////////////////
0: /**
1:  * Licensed to the Apache Software Foundation (ASF) under one or more
1:  * contributor license agreements.  See the NOTICE file distributed with
1:  * this work for additional information regarding copyright ownership.
1:  * The ASF licenses this file to You under the Apache License, Version 2.0
1:  * (the "License"); you may not use this file except in compliance with
1:  * the License.  You may obtain a copy of the License at
1:  *
1:  *      http://www.apache.org/licenses/LICENSE-2.0
1:  *
1:  * Unless required by applicable law or agreed to in writing, software
1:  * distributed under the License is distributed on an "AS IS" BASIS,
1:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:  * See the License for the specific language governing permissions and
1:  * limitations under the License.
1:  */
author:Hiram R. Chirino
-------------------------------------------------------------------------------
commit:4aac5a6
/////////////////////////////////////////////////////////////////////////
0: package org.apache.activemq.conversions;
1: 
0: import org.apache.activemq.CombinationTestSupport;
0: import org.apache.activemq.broker.BrokerService;
0: import org.apache.activemq.broker.TransportConnector;
0: import org.apache.qpid.amqp_1_0.jms.impl.ConnectionFactoryImpl;
0: import org.apache.qpid.amqp_1_0.jms.impl.QueueImpl;
0: import org.apache.qpid.amqp_1_0.jms.impl.TopicImpl;
0: import org.fusesource.mqtt.client.BlockingConnection;
0: import org.fusesource.mqtt.client.MQTT;
0: import org.fusesource.mqtt.client.QoS;
1: 
0: import javax.jms.*;
1: import java.io.UnsupportedEncodingException;
1: import java.util.Arrays;
1: 
0: /**
0:  */
0: public class AmqpAndMqttTest extends CombinationTestSupport {
1: 
1:     protected BrokerService broker;
1:     private TransportConnector amqpConnector;
1:     private TransportConnector mqttConnector;
1: 
1:     @Override
0:     protected void setUp() throws Exception {
0:         super.setUp();
1:         broker = createBroker();
1:         broker.start();
1:         broker.waitUntilStarted();
1:     }
1: 
1:     @Override
0:     protected void tearDown() throws Exception {
0:         if( broker!=null ) {
1:             broker.stop();
1:             broker.waitUntilStopped();
1:             broker = null;
1:         }
0:         super.tearDown();
1:     }
1: 
1:     protected BrokerService createBroker() throws Exception {
1:         BrokerService broker = new BrokerService();
1:         broker.setPersistent(false);
1:         amqpConnector = broker.addConnector("amqp://0.0.0.0:0");
1:         mqttConnector = broker.addConnector("mqtt://0.0.0.0:0");
1:         return broker;
1:     }
1: 
1: 
1:     public void testFromMqttToAmqp() throws Exception {
1:         Connection amqp = createAmqpConnection();
1:         Session session = amqp.createSession(false, Session.AUTO_ACKNOWLEDGE);
1:         MessageConsumer consumer = session.createConsumer(session.createTopic("topic://FOO"));
1: 
1:         final BlockingConnection mqtt = createMQTTConnection().blockingConnection();
1:         mqtt.connect();
1:         byte[] payload = bytes("Hello World");
1:         mqtt.publish("FOO", payload, QoS.AT_LEAST_ONCE, false);
1:         mqtt.disconnect();
1: 
1:         Message msg = consumer.receive(1000 * 5);
1:         assertNotNull(msg);
1:         assertTrue(msg instanceof BytesMessage);
1: 
1:         BytesMessage bmsg = (BytesMessage) msg;
1:         byte[] actual = new byte[(int) bmsg.getBodyLength()];
1:         bmsg.readBytes(actual);
1:         assertTrue(Arrays.equals(actual, payload));
1:         amqp.close();
1:     }
1: 
1:     private byte[] bytes(String value) {
1:         try {
1:             return value.getBytes("UTF-8");
1:         } catch (UnsupportedEncodingException e) {
1:             throw new RuntimeException(e);
1:         }
1:     }
1: 
1: 
1:     protected MQTT createMQTTConnection() throws Exception {
1:         MQTT mqtt = new MQTT();
1:         mqtt.setConnectAttemptsMax(1);
1:         mqtt.setReconnectAttemptsMax(0);
1:         mqtt.setHost("localhost", mqttConnector.getConnectUri().getPort());
1:         return mqtt;
1:     }
1: 
1:     public Connection createAmqpConnection() throws Exception {
0:         final ConnectionFactoryImpl factory = new ConnectionFactoryImpl("localhost", amqpConnector.getConnectUri().getPort(), "admin", "password");
1:         final Connection connection = factory.createConnection();
1:         connection.setExceptionListener(new ExceptionListener() {
1:             @Override
1:             public void onException(JMSException exception) {
1:                 exception.printStackTrace();
1:             }
1:         });
1:         connection.start();
1:         return connection;
1:     }
1: 
1: }
============================================================================