1:d29ca2a: /**
1:57b4941:  * Licensed to the Apache Software Foundation (ASF) under one or more
1:57b4941:  * contributor license agreements.  See the NOTICE file distributed with
1:57b4941:  * this work for additional information regarding copyright ownership.
1:57b4941:  * The ASF licenses this file to You under the Apache License, Version 2.0
1:57b4941:  * (the "License"); you may not use this file except in compliance with
1:57b4941:  * the License.  You may obtain a copy of the License at
3:d29ca2a:  *
1:230a86c:  *      http://www.apache.org/licenses/LICENSE-2.0
1:d29ca2a:  *
1:d29ca2a:  * Unless required by applicable law or agreed to in writing, software
1:d29ca2a:  * distributed under the License is distributed on an "AS IS" BASIS,
1:d29ca2a:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:d29ca2a:  * See the License for the specific language governing permissions and
1:d29ca2a:  * limitations under the License.
1:d29ca2a:  */
1:d29ca2a: package org.apache.activemq.broker.region.policy;
1:d29ca2a: 
1:4759253: import java.util.List;
1:d29ca2a: 
1:d29ca2a: import org.apache.activemq.broker.region.MessageReference;
1:933eb2f: import org.apache.activemq.broker.region.Subscription;
1:d29ca2a: import org.apache.activemq.filter.MessageEvaluationContext;
1:d29ca2a: 
1:d29ca2a: /**
1:d29ca2a:  * Abstraction to allow different dispatching policies to be plugged
1:2044ade:  * into the  topic region implementations.  This is used by a topic to deliver
1:d29ca2a:  * messages to the matching subscriptions.
1:b0c2a40:  * 
1:d29ca2a:  * 
1:d29ca2a:  */
1:d29ca2a: public interface DispatchPolicy {
1:d29ca2a:     
1:d29ca2a:     /**
1:d29ca2a:      * Decides how to dispatch a selected message to a collection of consumers.  A safe
1:2044ade:      * approach is to dispatch to every subscription that matches.
1:d29ca2a:      *
1:95ba6ef:      * The list will be safe to iterate over when this method is called
1:d29ca2a:      * 
1:d29ca2a:      * @return true if at least one consumer was dispatched or false if there are no active subscriptions that could be dispatched
1:d29ca2a:      */
1:933eb2f:     boolean dispatch(MessageReference node, MessageEvaluationContext msgContext, List<Subscription> consumers) throws Exception;
1:d29ca2a: 
1:d29ca2a: }
============================================================================
author:Hadrian Zbarcea
-------------------------------------------------------------------------------
commit:d54d046
author:Hiram R. Chirino
-------------------------------------------------------------------------------
commit:58aca86
commit:b0c2a40
/////////////////////////////////////////////////////////////////////////
1:  * 
commit:933eb2f
/////////////////////////////////////////////////////////////////////////
1: import org.apache.activemq.broker.region.Subscription;
/////////////////////////////////////////////////////////////////////////
1:     boolean dispatch(MessageReference node, MessageEvaluationContext msgContext, List<Subscription> consumers) throws Exception;
commit:74a7a8b
/////////////////////////////////////////////////////////////////////////
commit:230a86c
/////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////
1:  *      http://www.apache.org/licenses/LICENSE-2.0
commit:57b4941
/////////////////////////////////////////////////////////////////////////
1:  * Licensed to the Apache Software Foundation (ASF) under one or more
1:  * contributor license agreements.  See the NOTICE file distributed with
1:  * this work for additional information regarding copyright ownership.
1:  * The ASF licenses this file to You under the Apache License, Version 2.0
1:  * (the "License"); you may not use this file except in compliance with
1:  * the License.  You may obtain a copy of the License at
commit:7f5213b
/////////////////////////////////////////////////////////////////////////
0:     boolean dispatch(ConnectionContext newParam, MessageReference node, MessageEvaluationContext msgContext, List consumers) throws Exception;
commit:4759253
/////////////////////////////////////////////////////////////////////////
1: import java.util.List;
/////////////////////////////////////////////////////////////////////////
0:     boolean dispatch(ConnectionContext newParam, MessageReference node, MessageEvaluationContext msgContext, List consumers) throws Throwable;
commit:48b4869
/////////////////////////////////////////////////////////////////////////
0:  * Copyright 2005-2006 The Apache Software Foundation
commit:d29ca2a
/////////////////////////////////////////////////////////////////////////
1: /**
1:  *
0:  * Copyright 2004 The Apache Software Foundation
1:  *
0:  * Licensed under the Apache License, Version 2.0 (the "License");
0:  * you may not use this file except in compliance with the License.
0:  * You may obtain a copy of the License at
1:  *
0:  * http://www.apache.org/licenses/LICENSE-2.0
1:  *
1:  * Unless required by applicable law or agreed to in writing, software
1:  * distributed under the License is distributed on an "AS IS" BASIS,
1:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:  * See the License for the specific language governing permissions and
1:  * limitations under the License.
1:  */
1: package org.apache.activemq.broker.region.policy;
1: 
0: import org.apache.activemq.broker.ConnectionContext;
1: import org.apache.activemq.broker.region.MessageReference;
1: import org.apache.activemq.filter.MessageEvaluationContext;
1: 
0: import edu.emory.mathcs.backport.java.util.concurrent.CopyOnWriteArrayList;
1: 
1: /**
1:  * Abstraction to allow different dispatching policies to be plugged
0:  * into the region implementations.  This is used by a queue to deliver
1:  * messages to the matching subscriptions.
1:  * 
0:  * @version $Revision$
1:  */
1: public interface DispatchPolicy {
1:     
1:     /**
1:      * Decides how to dispatch a selected message to a collection of consumers.  A safe
0:      * approach is to dispatch to every subscription that matches.  Queue Subscriptions that 
0:      * have not exceeded their pre-fetch limit will attempt to lock the message before 
0:      * dispatching to the client.  First subscription to lock the message wins.  
1:      * 
0:      * Order of dispatching to the subscriptions matters since a subscription with a 
0:      * large pre-fetch may take all the messages if he is always dispatched to first.  
0:      * Once a message has been locked, it does not need to be dispatched to any 
0:      * further subscriptions.
1:      * 
1:      * @return true if at least one consumer was dispatched or false if there are no active subscriptions that could be dispatched
1:      */
0:     boolean dispatch(ConnectionContext newParam, MessageReference node, MessageEvaluationContext msgContext, CopyOnWriteArrayList consumers) throws Throwable;
1: 
1: }
author:Gary Tully
-------------------------------------------------------------------------------
commit:2044ade
/////////////////////////////////////////////////////////////////////////
1:  * into the  topic region implementations.  This is used by a topic to deliver
/////////////////////////////////////////////////////////////////////////
1:      * approach is to dispatch to every subscription that matches.
0:      *
author:Robert Davies
-------------------------------------------------------------------------------
commit:95ba6ef
/////////////////////////////////////////////////////////////////////////
1:      * The list will be safe to iterate over when this method is called
0:      * 
commit:6895d00
/////////////////////////////////////////////////////////////////////////
0:     boolean dispatch(MessageReference node, MessageEvaluationContext msgContext, List consumers) throws Exception;
author:James Strachan
-------------------------------------------------------------------------------
commit:88203ae
/////////////////////////////////////////////////////////////////////////
0: import edu.emory.mathcs.backport.java.util.concurrent.CopyOnWriteArrayList;
0: 
============================================================================