1:43c3cae: /**
1:43c3cae:  * Licensed to the Apache Software Foundation (ASF) under one or more
1:43c3cae:  * contributor license agreements.  See the NOTICE file distributed with
1:43c3cae:  * this work for additional information regarding copyright ownership.
1:43c3cae:  * The ASF licenses this file to You under the Apache License, Version 2.0
1:43c3cae:  * (the "License"); you may not use this file except in compliance with
1:43c3cae:  * the License.  You may obtain a copy of the License at
1:43c3cae:  *
1:43c3cae:  *      http://www.apache.org/licenses/LICENSE-2.0
1:43c3cae:  *
1:43c3cae:  * Unless required by applicable law or agreed to in writing, software
1:43c3cae:  * distributed under the License is distributed on an "AS IS" BASIS,
1:43c3cae:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:43c3cae:  * See the License for the specific language governing permissions and
1:43c3cae:  * limitations under the License.
1:43c3cae:  */
1:43c3cae: package org.apache.activemq;
1:43c3cae: 
1:43c3cae: import static org.junit.Assert.fail;
1:43c3cae: 
1:43c3cae: import javax.jms.JMSException;
1:43c3cae: import javax.jms.Session;
1:43c3cae: 
1:43c3cae: public abstract class AbstractAuthorizationTest extends RuntimeConfigTestSupport {
1:43c3cae: 
1:43c3cae:     protected void assertDeniedTemp(String userPass) {
1:43c3cae:         try {
1:43c3cae:             assertAllowedTemp(userPass);
1:43c3cae:             fail("Expected not allowed exception");
1:43c3cae:         } catch (Exception expected) {
1:43c3cae:             LOG.debug("got:" + expected, expected);
1:43c3cae:         }
1:43c3cae:     }
1:43c3cae: 
1:43c3cae:     protected void assertAllowedTemp(String userPass) throws Exception {
1:43c3cae:         ActiveMQConnection connection = new ActiveMQConnectionFactory("vm://localhost").createActiveMQConnection(userPass, userPass);
1:43c3cae:         connection.start();
1:43c3cae:         try {
1:43c3cae:             Session session = connection.createSession(false, Session.AUTO_ACKNOWLEDGE);
1:43c3cae:             session.createConsumer(session.createTemporaryQueue());
1:43c3cae:         } finally {
1:43c3cae:             connection.close();
1:43c3cae:         }
1:43c3cae: 
1:43c3cae:     }
1:43c3cae: 
1:43c3cae:     protected void assertDenied(String userPass, String destination) {
1:43c3cae:         try {
1:43c3cae:             assertAllowed(userPass, destination);
1:43c3cae:             fail("Expected not allowed exception");
1:43c3cae:         } catch (JMSException expected) {
1:43c3cae:             LOG.debug("got:" + expected, expected);
1:43c3cae:         }
1:43c3cae:     }
1:43c3cae: 
1:43c3cae:     protected void assertAllowed(String userPass, String dest) throws JMSException {
1:43c3cae:         ActiveMQConnection connection = new ActiveMQConnectionFactory("vm://localhost").createActiveMQConnection(userPass, userPass);
1:43c3cae:         connection.start();
1:43c3cae:         try {
1:43c3cae:             Session session = connection.createSession(false, Session.AUTO_ACKNOWLEDGE);
1:43c3cae:             session.createConsumer(session.createQueue(dest));
1:43c3cae:         } finally {
1:43c3cae:             connection.close();
1:43c3cae:         }
1:43c3cae:     }
1:43c3cae: 
1:c1e94c6:     protected void assertAllowedWrite(String userPass, String dest) throws JMSException {
1:c1e94c6:         ActiveMQConnection connection = new ActiveMQConnectionFactory("vm://localhost").createActiveMQConnection(userPass, userPass);
1:c1e94c6:         connection.start();
1:c1e94c6:         try {
1:c1e94c6:             Session session = connection.createSession(false, Session.AUTO_ACKNOWLEDGE);
1:c1e94c6:             session.createProducer(session.createQueue(dest)).send(session.createTextMessage());
1:c1e94c6:         } finally {
1:c1e94c6:             connection.close();
1:c1e94c6:         }
1:c1e94c6:     }
1:c1e94c6: 
1:c1e94c6:     protected void assertDeniedWrite(String userPass, String destination) {
1:c1e94c6:         try {
1:c1e94c6:             assertAllowedWrite(userPass, destination);
1:c1e94c6:             fail("Expected not allowed exception");
1:c1e94c6:         } catch (JMSException expected) {
1:c1e94c6:             LOG.debug("got:" + expected, expected);
1:c1e94c6:         }
1:c1e94c6:     }
1:c1e94c6: 
1:c1e94c6: 
1:43c3cae: }
============================================================================
author:gtully
-------------------------------------------------------------------------------
commit:c1e94c6
/////////////////////////////////////////////////////////////////////////
1:     protected void assertAllowedWrite(String userPass, String dest) throws JMSException {
1:         ActiveMQConnection connection = new ActiveMQConnectionFactory("vm://localhost").createActiveMQConnection(userPass, userPass);
1:         connection.start();
1:         try {
1:             Session session = connection.createSession(false, Session.AUTO_ACKNOWLEDGE);
1:             session.createProducer(session.createQueue(dest)).send(session.createTextMessage());
1:         } finally {
1:             connection.close();
1:         }
1:     }
1: 
1:     protected void assertDeniedWrite(String userPass, String destination) {
1:         try {
1:             assertAllowedWrite(userPass, destination);
1:             fail("Expected not allowed exception");
1:         } catch (JMSException expected) {
1:             LOG.debug("got:" + expected, expected);
1:         }
1:     }
1: 
1: 
author:Christopher L. Shannon (cshannon)
-------------------------------------------------------------------------------
commit:43c3cae
/////////////////////////////////////////////////////////////////////////
1: /**
1:  * Licensed to the Apache Software Foundation (ASF) under one or more
1:  * contributor license agreements.  See the NOTICE file distributed with
1:  * this work for additional information regarding copyright ownership.
1:  * The ASF licenses this file to You under the Apache License, Version 2.0
1:  * (the "License"); you may not use this file except in compliance with
1:  * the License.  You may obtain a copy of the License at
1:  *
1:  *      http://www.apache.org/licenses/LICENSE-2.0
1:  *
1:  * Unless required by applicable law or agreed to in writing, software
1:  * distributed under the License is distributed on an "AS IS" BASIS,
1:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:  * See the License for the specific language governing permissions and
1:  * limitations under the License.
1:  */
1: package org.apache.activemq;
1: 
1: import static org.junit.Assert.fail;
1: 
1: import javax.jms.JMSException;
1: import javax.jms.Session;
1: 
1: public abstract class AbstractAuthorizationTest extends RuntimeConfigTestSupport {
1: 
1:     protected void assertDeniedTemp(String userPass) {
1:         try {
1:             assertAllowedTemp(userPass);
1:             fail("Expected not allowed exception");
1:         } catch (Exception expected) {
1:             LOG.debug("got:" + expected, expected);
1:         }
1:     }
1: 
1:     protected void assertAllowedTemp(String userPass) throws Exception {
1:         ActiveMQConnection connection = new ActiveMQConnectionFactory("vm://localhost").createActiveMQConnection(userPass, userPass);
1:         connection.start();
1:         try {
1:             Session session = connection.createSession(false, Session.AUTO_ACKNOWLEDGE);
1:             session.createConsumer(session.createTemporaryQueue());
1:         } finally {
1:             connection.close();
1:         }
1: 
1:     }
1: 
1:     protected void assertDenied(String userPass, String destination) {
1:         try {
1:             assertAllowed(userPass, destination);
1:             fail("Expected not allowed exception");
1:         } catch (JMSException expected) {
1:             LOG.debug("got:" + expected, expected);
1:         }
1:     }
1: 
1:     protected void assertAllowed(String userPass, String dest) throws JMSException {
1:         ActiveMQConnection connection = new ActiveMQConnectionFactory("vm://localhost").createActiveMQConnection(userPass, userPass);
1:         connection.start();
1:         try {
1:             Session session = connection.createSession(false, Session.AUTO_ACKNOWLEDGE);
1:             session.createConsumer(session.createQueue(dest));
1:         } finally {
1:             connection.close();
1:         }
1:     }
1: 
1: }
============================================================================