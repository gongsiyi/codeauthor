1:e375af3: /**
1:e375af3:  * Licensed to the Apache Software Foundation (ASF) under one or more
1:e375af3:  * contributor license agreements.  See the NOTICE file distributed with
1:e375af3:  * this work for additional information regarding copyright ownership.
1:e375af3:  * The ASF licenses this file to You under the Apache License, Version 2.0
1:e375af3:  * (the "License"); you may not use this file except in compliance with
1:e375af3:  * the License.  You may obtain a copy of the License at
1:e375af3:  *
1:e375af3:  *      http://www.apache.org/licenses/LICENSE-2.0
1:e375af3:  *
1:e375af3:  * Unless required by applicable law or agreed to in writing, software
1:e375af3:  * distributed under the License is distributed on an "AS IS" BASIS,
1:e375af3:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:e375af3:  * See the License for the specific language governing permissions and
1:e375af3:  * limitations under the License.
1:e375af3:  */
1:473b328: package org.apache.activemq.transport.http;
1:473b328: 
1:473b328: import static org.junit.Assert.assertEquals;
1:473b328: 
1:473b328: import java.util.Arrays;
1:473b328: import java.util.List;
1:473b328: import java.util.concurrent.CountDownLatch;
1:473b328: import java.util.concurrent.atomic.AtomicInteger;
1:473b328: 
1:473b328: import org.eclipse.jetty.client.HttpClient;
1:473b328: import org.eclipse.jetty.client.api.Request;
1:473b328: import org.eclipse.jetty.client.api.Result;
1:473b328: import org.eclipse.jetty.client.util.BufferingResponseListener;
1:473b328: import org.eclipse.jetty.http.HttpMethod;
1:473b328: import org.eclipse.jetty.http.HttpStatus;
1:473b328: import org.eclipse.jetty.util.ssl.SslContextFactory;
1:473b328: 
1:473b328: public class HttpTraceTestSupport {
1:473b328: 
1:473b328:     public static List<Object[]> getTestParameters() {
1:473b328:         return Arrays.asList(new Object[][] {
1:473b328:             //value is empty
1:473b328:             {"http.enableTrace=", HttpStatus.FORBIDDEN_403},
1:473b328:             //default, trace method not specified
1:473b328:             {null, HttpStatus.FORBIDDEN_403},
1:473b328:             // enable http trace method
1:473b328:             {"http.enableTrace=true", HttpStatus.OK_200},
1:473b328:             // disable trace method
1:473b328:             {"http.enableTrace=false", HttpStatus.FORBIDDEN_403}
1:473b328:         });
1:473b328:     }
1:473b328: 
1:473b328:     public static void testHttpTraceEnabled(final String uri, final int expectedStatus) throws Exception {
1:473b328:         testHttpTraceEnabled(uri, expectedStatus, new SslContextFactory());
1:473b328:     }
1:473b328: 
1:473b328:     public static void testHttpTraceEnabled(final String uri, final int expectedStatus, SslContextFactory
1:473b328:             sslContextFactory) throws Exception {
1:473b328:         HttpClient httpClient = sslContextFactory != null ? new HttpClient(sslContextFactory) :
1:473b328:             new HttpClient(new SslContextFactory());
1:473b328:         httpClient.start();
1:473b328: 
1:473b328:         final CountDownLatch latch = new CountDownLatch(1);
1:473b328:         Request request = httpClient.newRequest(uri).method(HttpMethod.TRACE);
1:473b328:         final AtomicInteger status = new AtomicInteger();
1:473b328:         request.send(new BufferingResponseListener() {
1:473b328:             @Override
1:473b328:             public void onComplete(Result result) {
1:473b328:                 status.set(result.getResponse().getStatus());
1:473b328:                 latch.countDown();
1:473b328:             }
1:473b328:         });
1:473b328:         latch.await();
1:473b328:         assertEquals(expectedStatus, status.get());
1:473b328:     }
1:473b328: }
============================================================================
author:Christopher L. Shannon (cshannon)
-------------------------------------------------------------------------------
commit:e375af3
/////////////////////////////////////////////////////////////////////////
1: /**
1:  * Licensed to the Apache Software Foundation (ASF) under one or more
1:  * contributor license agreements.  See the NOTICE file distributed with
1:  * this work for additional information regarding copyright ownership.
1:  * The ASF licenses this file to You under the Apache License, Version 2.0
1:  * (the "License"); you may not use this file except in compliance with
1:  * the License.  You may obtain a copy of the License at
1:  *
1:  *      http://www.apache.org/licenses/LICENSE-2.0
1:  *
1:  * Unless required by applicable law or agreed to in writing, software
1:  * distributed under the License is distributed on an "AS IS" BASIS,
1:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:  * See the License for the specific language governing permissions and
1:  * limitations under the License.
1:  */
commit:473b328
/////////////////////////////////////////////////////////////////////////
1: package org.apache.activemq.transport.http;
1: 
1: import static org.junit.Assert.assertEquals;
1: 
1: import java.util.Arrays;
1: import java.util.List;
1: import java.util.concurrent.CountDownLatch;
1: import java.util.concurrent.atomic.AtomicInteger;
1: 
1: import org.eclipse.jetty.client.HttpClient;
1: import org.eclipse.jetty.client.api.Request;
1: import org.eclipse.jetty.client.api.Result;
1: import org.eclipse.jetty.client.util.BufferingResponseListener;
1: import org.eclipse.jetty.http.HttpMethod;
1: import org.eclipse.jetty.http.HttpStatus;
1: import org.eclipse.jetty.util.ssl.SslContextFactory;
1: 
1: public class HttpTraceTestSupport {
1: 
1:     public static List<Object[]> getTestParameters() {
1:         return Arrays.asList(new Object[][] {
1:             //value is empty
1:             {"http.enableTrace=", HttpStatus.FORBIDDEN_403},
1:             //default, trace method not specified
1:             {null, HttpStatus.FORBIDDEN_403},
1:             // enable http trace method
1:             {"http.enableTrace=true", HttpStatus.OK_200},
1:             // disable trace method
1:             {"http.enableTrace=false", HttpStatus.FORBIDDEN_403}
1:         });
1:     }
1: 
1:     public static void testHttpTraceEnabled(final String uri, final int expectedStatus) throws Exception {
1:         testHttpTraceEnabled(uri, expectedStatus, new SslContextFactory());
1:     }
1: 
1:     public static void testHttpTraceEnabled(final String uri, final int expectedStatus, SslContextFactory
1:             sslContextFactory) throws Exception {
1:         HttpClient httpClient = sslContextFactory != null ? new HttpClient(sslContextFactory) :
1:             new HttpClient(new SslContextFactory());
1:         httpClient.start();
1: 
1:         final CountDownLatch latch = new CountDownLatch(1);
1:         Request request = httpClient.newRequest(uri).method(HttpMethod.TRACE);
1:         final AtomicInteger status = new AtomicInteger();
1:         request.send(new BufferingResponseListener() {
1:             @Override
1:             public void onComplete(Result result) {
1:                 status.set(result.getResponse().getStatus());
1:                 latch.countDown();
1:             }
1:         });
1:         latch.await();
1:         assertEquals(expectedStatus, status.get());
1:     }
1: }
============================================================================