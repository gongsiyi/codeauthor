1:31c55f7: /*
1:57b4941:  * Licensed to the Apache Software Foundation (ASF) under one or more
1:57b4941:  * contributor license agreements.  See the NOTICE file distributed with
1:57b4941:  * this work for additional information regarding copyright ownership.
1:57b4941:  * The ASF licenses this file to You under the Apache License, Version 2.0
1:57b4941:  * (the "License"); you may not use this file except in compliance with
1:57b4941:  * the License.  You may obtain a copy of the License at
1:b0c2a40:  *
1:230a86c:  *      http://www.apache.org/licenses/LICENSE-2.0
4:d29ca2a:  *
1:d29ca2a:  * Unless required by applicable law or agreed to in writing, software
1:d29ca2a:  * distributed under the License is distributed on an "AS IS" BASIS,
1:d29ca2a:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:d29ca2a:  * See the License for the specific language governing permissions and
1:d29ca2a:  * limitations under the License.
2:d29ca2a:  */
1:d29ca2a: package org.apache.activemq.transport.mock;
1:d29ca2a: 
1:d29ca2a: import java.io.IOException;
1:3ac0537: import java.net.URI;
1:31c55f7: import java.security.cert.X509Certificate;
1:31c55f7: 
1:f915da5: import org.apache.activemq.transport.DefaultTransportListener;
1:d29ca2a: import org.apache.activemq.transport.FutureResponse;
1:84fd773: import org.apache.activemq.transport.ResponseCallback;
1:d29ca2a: import org.apache.activemq.transport.Transport;
1:d29ca2a: import org.apache.activemq.transport.TransportFilter;
1:d29ca2a: import org.apache.activemq.transport.TransportListener;
1:31c55f7: import org.apache.activemq.wireformat.WireFormat;
1:d29ca2a: 
1:f915da5: public class MockTransport extends DefaultTransportListener implements Transport {
1:d29ca2a: 
1:d29ca2a:     protected Transport next;
1:436fe42:     protected TransportListener transportListener;
1:d29ca2a: 
1:d29ca2a:     public MockTransport(Transport next) {
1:d29ca2a:         this.next = next;
1:d29ca2a:     }
1:8978ac0: 
1:31c55f7:     @Override
1:fc00993:     public synchronized void setTransportListener(TransportListener channelListener) {
1:436fe42:         this.transportListener = channelListener;
1:fc00993:         if (channelListener == null) {
1:cafe4cb:             getNext().setTransportListener(null);
1:fc00993:         } else {
1:cafe4cb:             getNext().setTransportListener(this);
1:d29ca2a:         }
1:f392884:     }
1:d29ca2a: 
3:d29ca2a:     /**
1:d29ca2a:      * @see org.apache.activemq.Service#start()
1:31c55f7:      * @throws IOException
1:31c55f7:      *         if the next channel has not been set.
1:d29ca2a:      */
1:31c55f7:     @Override
1:d29ca2a:     public void start() throws Exception {
1:fc00993:         if (getNext() == null) {
1:d29ca2a:             throw new IOException("The next channel has not been set.");
1:fc00993:         }
1:fc00993:         if (transportListener == null) {
1:d29ca2a:             throw new IOException("The command listener has not been set.");
1:fc00993:         }
1:cafe4cb:         getNext().start();
1:fc00993:     }
1:d29ca2a: 
1:d29ca2a:     /**
1:d29ca2a:      * @see org.apache.activemq.Service#stop()
1:d29ca2a:      */
1:31c55f7:     @Override
1:d29ca2a:     public void stop() throws Exception {
1:cafe4cb:         getNext().stop();
1:f812e34:     }
1:d29ca2a: 
1:f392884:     @Override
1:cafe4cb:     public void onCommand(Object command) {
1:cafe4cb:         getTransportListener().onCommand(command);
1:d29ca2a:     }
1:d29ca2a: 
1:d29ca2a:     /**
1:cafe4cb:      * @return Returns the getNext().
1:d29ca2a:      */
1:fc00993:     public synchronized Transport getNext() {
1:d29ca2a:         return next;
1:d29ca2a:     }
1:d29ca2a: 
1:d29ca2a:     /**
1:d29ca2a:      * @return Returns the packetListener.
1:d29ca2a:      */
1:31c55f7:     @Override
1:fc00993:     public synchronized TransportListener getTransportListener() {
1:436fe42:         return transportListener;
1:d29ca2a:     }
1:f812e34: 
1:f392884:     @Override
1:cafe4cb:     public String toString() {
1:cafe4cb:         return getNext().toString();
1:d29ca2a:     }
1:d29ca2a: 
1:31c55f7:     @Override
1:cafe4cb:     public void oneway(Object command) throws IOException {
1:cafe4cb:         getNext().oneway(command);
1:d29ca2a:     }
1:d29ca2a: 
1:31c55f7:     @Override
1:cafe4cb:     public FutureResponse asyncRequest(Object command, ResponseCallback responseCallback) throws IOException {
1:cafe4cb:         return getNext().asyncRequest(command, null);
1:d29ca2a:     }
1:d29ca2a: 
1:31c55f7:     @Override
1:cafe4cb:     public Object request(Object command) throws IOException {
1:cafe4cb:         return getNext().request(command);
1:d29ca2a:     }
1:f812e34: 
1:31c55f7:     @Override
1:f812e34:     public Object request(Object command, int timeout) throws IOException {
1:cafe4cb:         return getNext().request(command, timeout);
1:d29ca2a:     }
1:d29ca2a: 
1:f392884:     @Override
1:cafe4cb:     public void onException(IOException error) {
1:cafe4cb:         getTransportListener().onException(error);
1:d29ca2a:     }
1:d29ca2a: 
1:31c55f7:     @Override
1:933eb2f:     public <T> T narrow(Class<T> target) {
1:f812e34:         if (target.isAssignableFrom(getClass())) {
1:933eb2f:             return target.cast(this);
1:d29ca2a:         }
1:cafe4cb:         return getNext().narrow(target);
1:d29ca2a:     }
1:d29ca2a: 
1:fc00993:     public synchronized void setNext(Transport next) {
1:d29ca2a:         this.next = next;
1:d29ca2a:     }
1:d29ca2a: 
1:cafe4cb:     public void install(TransportFilter filter) {
1:d29ca2a:         filter.setTransportListener(this);
1:d29ca2a:         getNext().setTransportListener(filter);
1:d29ca2a:         setNext(filter);
1:d29ca2a:     }
1:d29ca2a: 
1:31c55f7:     @Override
1:f812e34:     public String getRemoteAddress() {
1:f812e34:         return getNext().getRemoteAddress();
1:f812e34:     }
1:d29ca2a: 
1:d29ca2a:     /**
1:c7469c4:      * @see org.apache.activemq.transport.Transport#isFaultTolerant()
1:d29ca2a:      */
1:31c55f7:     @Override
1:f812e34:     public boolean isFaultTolerant() {
1:f812e34:         return getNext().isFaultTolerant();
1:f812e34:     }
1:f812e34: 
1:31c55f7:     @Override
1:31c55f7:     public boolean isDisposed() {
1:31c55f7:         return getNext().isDisposed();
1:cafe4cb:     }
1:d29ca2a: 
1:31c55f7:     @Override
1:31c55f7:     public boolean isConnected() {
1:31c55f7:         return getNext().isConnected();
1:31c55f7:     }
1:d29ca2a: 
1:31c55f7:     @Override
1:31c55f7:     public void reconnect(URI uri) throws IOException {
1:31c55f7:         getNext().reconnect(uri);
1:31c55f7:     }
1:31c55f7: 
1:31c55f7:     @Override
1:8978ac0:     public int getReceiveCounter() {
1:8978ac0:         return getNext().getReceiveCounter();
1:8978ac0:     }
1:d29ca2a: 
1:31c55f7:     @Override
1:f392884:     public boolean isReconnectSupported() {
1:f392884:         return getNext().isReconnectSupported();
1:d29ca2a:     }
1:d29ca2a: 
1:31c55f7:     @Override
1:f392884:     public boolean isUpdateURIsSupported() {
1:f392884:         return getNext().isUpdateURIsSupported();
1:d29ca2a:     }
1:31c55f7: 
1:31c55f7:     @Override
1:31c55f7:     public void updateURIs(boolean reblance, URI[] uris) throws IOException {
1:31c55f7:         getNext().updateURIs(reblance, uris);
1:31c55f7:     }
1:31c55f7: 
1:31c55f7:     @Override
1:31c55f7:     public X509Certificate[] getPeerCertificates() {
1:31c55f7:         return getNext().getPeerCertificates();
1:31c55f7:     }
1:31c55f7: 
1:31c55f7:     @Override
1:31c55f7:     public void setPeerCertificates(X509Certificate[] certificates) {
1:31c55f7:         getNext().setPeerCertificates(certificates);
1:31c55f7:     }
1:31c55f7: 
1:31c55f7:     @Override
1:31c55f7:     public WireFormat getWireFormat() {
1:31c55f7:         return getNext().getWireFormat();
1:f392884:     }
1:f392884: }
============================================================================
author:Timothy Bish
-------------------------------------------------------------------------------
commit:31c55f7
/////////////////////////////////////////////////////////////////////////
1: /*
/////////////////////////////////////////////////////////////////////////
1: import java.security.cert.X509Certificate;
1: 
1: import org.apache.activemq.wireformat.WireFormat;
/////////////////////////////////////////////////////////////////////////
1:     @Override
/////////////////////////////////////////////////////////////////////////
1:      * @throws IOException
1:      *         if the next channel has not been set.
1:     @Override
/////////////////////////////////////////////////////////////////////////
1:     @Override
/////////////////////////////////////////////////////////////////////////
1:     @Override
/////////////////////////////////////////////////////////////////////////
1:     @Override
1:     @Override
1:     @Override
1:     @Override
/////////////////////////////////////////////////////////////////////////
1:     @Override
/////////////////////////////////////////////////////////////////////////
1:     @Override
/////////////////////////////////////////////////////////////////////////
1:     @Override
1:     @Override
1:     public boolean isDisposed() {
1:         return getNext().isDisposed();
1:     @Override
1:     public boolean isConnected() {
1:         return getNext().isConnected();
1:     }
1:     @Override
1:     public void reconnect(URI uri) throws IOException {
1:         getNext().reconnect(uri);
1:     }
1: 
1:     @Override
1:     @Override
1:     @Override
1: 
1:     @Override
1:     public void updateURIs(boolean reblance, URI[] uris) throws IOException {
1:         getNext().updateURIs(reblance, uris);
1:     }
1: 
1:     @Override
1:     public X509Certificate[] getPeerCertificates() {
1:         return getNext().getPeerCertificates();
1:     }
1: 
1:     @Override
1:     public void setPeerCertificates(X509Certificate[] certificates) {
1:         getNext().setPeerCertificates(certificates);
1:     }
1: 
1:     @Override
1:     public WireFormat getWireFormat() {
1:         return getNext().getWireFormat();
author:Hiram R. Chirino
-------------------------------------------------------------------------------
commit:9a8f6e4
commit:b0c2a40
/////////////////////////////////////////////////////////////////////////
1:  * 
commit:8978ac0
/////////////////////////////////////////////////////////////////////////
1: 
1:     public int getReceiveCounter() {
1:         return getNext().getReceiveCounter();
1:     }
commit:933eb2f
/////////////////////////////////////////////////////////////////////////
1:     public <T> T narrow(Class<T> target) {
1:             return target.cast(this);
commit:fc00993
/////////////////////////////////////////////////////////////////////////
1:     public synchronized void setTransportListener(TransportListener channelListener) {
1:         if (channelListener == null) {
1:         } else {
1:         }
/////////////////////////////////////////////////////////////////////////
1:         if (getNext() == null) {
1:         }
1:         if (transportListener == null) {
1:         }
/////////////////////////////////////////////////////////////////////////
1:     public synchronized Transport getNext() {
1:     public synchronized TransportListener getTransportListener() {
/////////////////////////////////////////////////////////////////////////
1:     public synchronized void setNext(Transport next) {
commit:f812e34
/////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////
0:         if (getNext() == null)
0:         if (transportListener == null)
/////////////////////////////////////////////////////////////////////////
1:     }
/////////////////////////////////////////////////////////////////////////
1: 
/////////////////////////////////////////////////////////////////////////
1: 
1:     public Object request(Object command, int timeout) throws IOException {
/////////////////////////////////////////////////////////////////////////
1:         if (target.isAssignableFrom(getClass())) {
/////////////////////////////////////////////////////////////////////////
1:     public String getRemoteAddress() {
1:         return getNext().getRemoteAddress();
1:     }
1:     public boolean isFaultTolerant() {
1:         return getNext().isFaultTolerant();
1:     }
1: 
commit:230a86c
/////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////
1:  *      http://www.apache.org/licenses/LICENSE-2.0
commit:cafe4cb
/////////////////////////////////////////////////////////////////////////
1:             getNext().setTransportListener(null);
1:             getNext().setTransportListener(this);
/////////////////////////////////////////////////////////////////////////
0:         if( getNext() == null )
1:         getNext().start();
1:         getNext().stop();
1:     public void onCommand(Object command) {
1:         getTransportListener().onCommand(command);
1:      * @return Returns the getNext().
/////////////////////////////////////////////////////////////////////////
1:     public String toString() {
1:         return getNext().toString();
1:     public void oneway(Object command) throws IOException {
1:         getNext().oneway(command);
1:     public FutureResponse asyncRequest(Object command, ResponseCallback responseCallback) throws IOException {
1:         return getNext().asyncRequest(command, null);
1:     public Object request(Object command) throws IOException {
1:         return getNext().request(command);
1:         return getNext().request(command, timeout);
1:     public void onException(IOException error) {
1:         getTransportListener().onException(error);
0:     public Object narrow(Class target) {
1:         return getNext().narrow(target);
1:     public void install(TransportFilter filter) {
0: 		return getNext().getRemoteAddress();
1: }
commit:9ca56a0
/////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////
0:     synchronized public void onCommand(Object command) {
/////////////////////////////////////////////////////////////////////////
0:     synchronized public void oneway(Object command) throws IOException {
0:     synchronized public FutureResponse asyncRequest(Object command, ResponseCallback responseCallback) throws IOException {
0:     synchronized public Object request(Object command) throws IOException {
0:     public Object request(Object command,int timeout) throws IOException {
commit:57b4941
/////////////////////////////////////////////////////////////////////////
1:  * Licensed to the Apache Software Foundation (ASF) under one or more
1:  * contributor license agreements.  See the NOTICE file distributed with
1:  * this work for additional information regarding copyright ownership.
1:  * The ASF licenses this file to You under the Apache License, Version 2.0
1:  * (the "License"); you may not use this file except in compliance with
1:  * the License.  You may obtain a copy of the License at
commit:84fd773
/////////////////////////////////////////////////////////////////////////
1: import org.apache.activemq.transport.ResponseCallback;
/////////////////////////////////////////////////////////////////////////
0:     synchronized public FutureResponse asyncRequest(Command command, ResponseCallback responseCallback) throws IOException {
0:         return next.asyncRequest(command, null);
commit:48b4869
/////////////////////////////////////////////////////////////////////////
0:  * Copyright 2005-2006 The Apache Software Foundation
commit:d29ca2a
/////////////////////////////////////////////////////////////////////////
1: /**
1:  *
0:  * Copyright 2004 The Apache Software Foundation
1:  *
0:  * Licensed under the Apache License, Version 2.0 (the "License");
0:  * you may not use this file except in compliance with the License.
0:  * You may obtain a copy of the License at
1:  *
0:  * http://www.apache.org/licenses/LICENSE-2.0
1:  *
1:  * Unless required by applicable law or agreed to in writing, software
1:  * distributed under the License is distributed on an "AS IS" BASIS,
1:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:  * See the License for the specific language governing permissions and
1:  * limitations under the License.
1:  */
1: package org.apache.activemq.transport.mock;
1: 
1: import java.io.IOException;
1: 
0: import org.apache.activemq.command.Command;
0: import org.apache.activemq.command.Response;
1: import org.apache.activemq.transport.FutureResponse;
1: import org.apache.activemq.transport.Transport;
1: import org.apache.activemq.transport.TransportFilter;
1: import org.apache.activemq.transport.TransportListener;
1: 
1: 
1: /**
0:  * @version $Revision: 1.5 $
1:  */
0: public class MockTransport implements Transport, TransportListener {
1: 
1:     protected Transport next;
0:     protected TransportListener commandListener;
1: 
1:     public MockTransport(Transport next) {
1:         this.next = next;
1:     }
1: 
1:     /**
1:      */
0:     synchronized public void setTransportListener(TransportListener channelListener) {
0:         this.commandListener = channelListener;
0:         if (channelListener == null)
0:             next.setTransportListener(null);
0:         else
0:             next.setTransportListener(this);
1:     }
1: 
1: 
1:     /**
1:      * @see org.apache.activemq.Service#start()
0:      * @throws IOException if the next channel has not been set.
1:      */
1:     public void start() throws Exception {
0:         if( next == null )
1:             throw new IOException("The next channel has not been set.");
0:         if( commandListener == null )
1:             throw new IOException("The command listener has not been set.");
0:         next.start();
1:     }
1: 
1:     /**
1:      * @see org.apache.activemq.Service#stop()
1:      */
1:     public void stop() throws Exception {
0:         next.stop();
1:     }    
1: 
0:     synchronized public void onCommand(Command command) {
0:         commandListener.onCommand(command);
1:     }
1: 
1:     /**
0:      * @return Returns the next.
1:      */
0:     synchronized public Transport getNext() {
1:         return next;
1:     }
1: 
1:     /**
1:      * @return Returns the packetListener.
1:      */
0:     synchronized public TransportListener getCommandListener() {
0:         return commandListener;
1:     }
1:     
0:     synchronized public String toString() {
0:         return next.toString();
1:     }
1: 
0:     synchronized public void oneway(Command command) throws IOException {
0:         next.oneway(command);
1:     }
1: 
0:     synchronized public FutureResponse asyncRequest(Command command) throws IOException {
0:         return next.asyncRequest(command);
1:     }
1: 
0:     synchronized public Response request(Command command) throws IOException {
0:         return next.request(command);
1:     }
1: 
0:     synchronized public void onException(IOException error) {
0:         commandListener.onException(error);
1:     }
1: 
0:     synchronized public Object narrow(Class target) {
0:         if( target.isAssignableFrom(getClass()) ) {
0:             return this;
1:         }
0:         return next.narrow(target);
1:     }
1: 
0:     synchronized public void setNext(Transport next) {
1:         this.next = next;
1:     }
1: 
0:     synchronized public void install(TransportFilter filter) {
1:         filter.setTransportListener(this);
1:         getNext().setTransportListener(filter);
1:         setNext(filter);
1:     }  
1:     
1: }
author:Robert Davies
-------------------------------------------------------------------------------
commit:f392884
/////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////
1:     @Override
/////////////////////////////////////////////////////////////////////////
1:     @Override
/////////////////////////////////////////////////////////////////////////
1:     @Override
/////////////////////////////////////////////////////////////////////////
0:     
0: 
1:     public boolean isReconnectSupported() {
1:         return getNext().isReconnectSupported();
1:     }
0: 
1:     public boolean isUpdateURIsSupported() {
1:         return getNext().isUpdateURIsSupported();
1:     }
0:     public void updateURIs(boolean reblance,URI[] uris) throws IOException {
0:        getNext().updateURIs(reblance,uris);
1:     }
commit:ecc87ea
/////////////////////////////////////////////////////////////////////////
0: 	
0: 	public boolean isConnected() {
0:        return getNext().isConnected();
0:     }
commit:3ac0537
/////////////////////////////////////////////////////////////////////////
1: import java.net.URI;
/////////////////////////////////////////////////////////////////////////
0: 	public boolean isDisposed() {
0: 		return getNext().isDisposed();
0: 	}
0: 
0: 	public void reconnect(URI uri) throws IOException {
0: 		getNext().reconnect(uri);
0: 	}
0: 
commit:c7469c4
/////////////////////////////////////////////////////////////////////////
0: 	}
0: 
0:     /**
1:      * @see org.apache.activemq.transport.Transport#isFaultTolerant()
0:      */
0:     public boolean isFaultTolerant(){
0:        return getNext().isFaultTolerant();
0:     }  
commit:5fe0a4c
/////////////////////////////////////////////////////////////////////////
0:     
0:     public Response request(Command command,int timeout) throws IOException {
0:         return next.request(command, timeout);
0:     }
commit:f915da5
/////////////////////////////////////////////////////////////////////////
1: import org.apache.activemq.transport.DefaultTransportListener;
/////////////////////////////////////////////////////////////////////////
1: public class MockTransport extends DefaultTransportListener implements Transport {
author:James Strachan
-------------------------------------------------------------------------------
commit:0f1dcce
/////////////////////////////////////////////////////////////////////////
0:     }
0: 
0: 	public String getRemoteAddress() {
0: 		return next.getRemoteAddress();
0: 	}  
commit:436fe42
/////////////////////////////////////////////////////////////////////////
1:     protected TransportListener transportListener;
/////////////////////////////////////////////////////////////////////////
1:         this.transportListener = channelListener;
/////////////////////////////////////////////////////////////////////////
0:         if( transportListener == null )
/////////////////////////////////////////////////////////////////////////
0:         transportListener.onCommand(command);
/////////////////////////////////////////////////////////////////////////
0:     synchronized public TransportListener getTransportListener() {
1:         return transportListener;
/////////////////////////////////////////////////////////////////////////
0:         transportListener.onException(error);
============================================================================