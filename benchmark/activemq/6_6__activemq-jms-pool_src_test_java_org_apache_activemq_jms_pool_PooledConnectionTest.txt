2:3a84de9: /**
1:974f689:  * Licensed to the Apache Software Foundation (ASF) under one or more
1:974f689:  * contributor license agreements.  See the NOTICE file distributed with
1:974f689:  * this work for additional information regarding copyright ownership.
1:974f689:  * The ASF licenses this file to You under the Apache License, Version 2.0
1:974f689:  * (the "License"); you may not use this file except in compliance with
1:974f689:  * the License.  You may obtain a copy of the License at
1:974f689:  *
1:974f689:  *      http://www.apache.org/licenses/LICENSE-2.0
1:974f689:  *
1:974f689:  * Unless required by applicable law or agreed to in writing, software
1:974f689:  * distributed under the License is distributed on an "AS IS" BASIS,
1:974f689:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:974f689:  * See the License for the specific language governing permissions and
1:974f689:  * limitations under the License.
2:3a84de9:  */
1:b66559e: package org.apache.activemq.jms.pool;
3:1b38caa: 
1:5b4fb8a: import static org.junit.Assert.assertEquals;
1:e6597c4: import static org.junit.Assert.fail;
1:e6597c4: 
1:3a84de9: import javax.jms.Connection;
1:3a84de9: import javax.jms.ConnectionFactory;
1:3a84de9: import javax.jms.IllegalStateException;
1:5b4fb8a: import javax.jms.JMSException;
1:5b4fb8a: import javax.jms.Session;
1:1b38caa: 
1:b66559e: import org.apache.activemq.ActiveMQConnectionFactory;
1:e6597c4: import org.junit.Test;
1:1b38caa: import org.slf4j.Logger;
1:1b38caa: import org.slf4j.LoggerFactory;
1:1b38caa: 
1:5b4fb8a: import java.util.HashSet;
1:5b4fb8a: import java.util.LinkedList;
1:5b4fb8a: 
1:3a84de9: /**
1:3a84de9:  * A couple of tests against the PooledConnection class.
3:3a84de9:  *
1:3a84de9:  */
1:e6597c4: public class PooledConnectionTest extends JmsPoolTestSupport {
1:1b38caa: 
1:e6597c4:     private final Logger LOG = LoggerFactory.getLogger(PooledConnectionTest.class);
1:1b38caa: 
1:1b38caa:     /**
1:1b38caa:      * AMQ-3752:
1:1b38caa:      * Tests how the ActiveMQConnection reacts to repeated calls to
1:1b38caa:      * setClientID().
1:1b38caa:      *
1:1b38caa:      * @throws Exception
1:1b38caa:      */
1:e6597c4:     @Test(timeout = 60000)
1:1b38caa:     public void testRepeatedSetClientIDCalls() throws Exception {
1:e6597c4:         LOG.debug("running testRepeatedSetClientIDCalls()");
1:1b38caa: 
1:1b38caa:         // 1st test: call setClientID("newID") twice
1:1b38caa:         // this should be tolerated and not result in an exception
1:1b38caa:         //
1:1b38caa:         ConnectionFactory cf = createPooledConnectionFactory();
1:1b38caa:         Connection conn = cf.createConnection();
1:1b38caa:         conn.setClientID("newID");
1:1b38caa: 
1:1b38caa:         try {
1:1b38caa:             conn.setClientID("newID");
1:1b38caa:             conn.start();
1:1b38caa:             conn.close();
1:1b38caa:         } catch (IllegalStateException ise) {
1:e6597c4:             LOG.error("Repeated calls to ActiveMQConnection.setClientID(\"newID\") caused " + ise.getMessage());
1:1b38caa:             fail("Repeated calls to ActiveMQConnection.setClientID(\"newID\") caused " + ise.getMessage());
1:27ce49f:         } finally {
1:27ce49f:             ((PooledConnectionFactory) cf).stop();
1:1b38caa:         }
1:5b4fb8a: 
1:1b38caa:         // 2nd test: call setClientID() twice with different IDs
1:1b38caa:         // this should result in an IllegalStateException
1:1b38caa:         //
1:1b38caa:         cf = createPooledConnectionFactory();
1:1b38caa:         conn = cf.createConnection();
1:1b38caa:         conn.setClientID("newID1");
1:1b38caa:         try {
1:1b38caa:             conn.setClientID("newID2");
1:1b38caa:             fail("calling ActiveMQConnection.setClientID() twice with different clientID must raise an IllegalStateException");
1:1b38caa:         } catch (IllegalStateException ise) {
1:e6597c4:             LOG.debug("Correctly received " + ise);
1:4e011e0:         } finally {
1:4e011e0:             conn.close();
1:27ce49f:             ((PooledConnectionFactory) cf).stop();
1:1b38caa:         }
1:1b38caa: 
1:1b38caa:         // 3rd test: try to call setClientID() after start()
1:1b38caa:         // should result in an exception
1:1b38caa:         cf = createPooledConnectionFactory();
1:1b38caa:         conn = cf.createConnection();
1:1b38caa:         try {
1:1b38caa:         conn.start();
1:1b38caa:         conn.setClientID("newID3");
1:1b38caa:         fail("Calling setClientID() after start() mut raise a JMSException.");
1:1b38caa:         } catch (IllegalStateException ise) {
1:e6597c4:             LOG.debug("Correctly received " + ise);
1:4e011e0:         } finally {
1:4e011e0:             conn.close();
1:27ce49f:             ((PooledConnectionFactory) cf).stop();
1:1b38caa:         }
1:1b38caa: 
1:e6597c4:         LOG.debug("Test finished.");
1:1b38caa:     }
1:1b38caa: 
1:1b38caa:     protected ConnectionFactory createPooledConnectionFactory() {
1:b66559e:         PooledConnectionFactory cf = new PooledConnectionFactory();
1:e6597c4:         cf.setConnectionFactory(new ActiveMQConnectionFactory(
1:e6597c4:             "vm://localhost?broker.persistent=false&broker.useJmx=false&broker.schedulerSupport=false"));
1:b66559e:         cf.setMaxConnections(1);
1:e6597c4:         LOG.debug("ConnectionFactory initialized.");
1:1b38caa:         return cf;
1:1b38caa:     }
1:5b4fb8a: 
1:5b4fb8a:     @Test(timeout = 60000)
1:5b4fb8a:     public void testAllSessionsAvailableOnConstrainedPool() throws Exception {
1:5b4fb8a:         PooledConnectionFactory cf = new PooledConnectionFactory();
1:5b4fb8a:         cf.setConnectionFactory(new ActiveMQConnectionFactory(
1:5b4fb8a:                 "vm://localhost?broker.persistent=false&broker.useJmx=false&broker.schedulerSupport=false"));
1:5b4fb8a:         cf.setMaxConnections(5);
1:5b4fb8a:         cf.setMaximumActiveSessionPerConnection(2);
1:5b4fb8a:         cf.setBlockIfSessionPoolIsFull(false);
1:5b4fb8a: 
1:5b4fb8a:         LinkedList<Connection> connections = new LinkedList<>();
1:5b4fb8a:         HashSet<Session> sessions = new HashSet();
1:5b4fb8a: 
1:5b4fb8a:         for (int i=0; i<10; i++) {
1:5b4fb8a:             Connection conn = cf.createConnection();
1:5b4fb8a:             LOG.info("connection: " + i + ", " + ((PooledConnection)conn).getConnection());
1:5b4fb8a: 
1:5b4fb8a:             conn.start();
1:5b4fb8a:             connections.add(conn);
1:5b4fb8a:             sessions.add(conn.createSession(false, Session.AUTO_ACKNOWLEDGE));
1:5b4fb8a:         }
1:5b4fb8a: 
1:5b4fb8a:         assertEquals(sessions.size(), 10);
1:5b4fb8a:         assertEquals(connections.size(), 10);
1:5b4fb8a: 
1:5b4fb8a:         Connection connectionToClose = connections.getLast();
1:5b4fb8a:         connectionToClose.close();
1:5b4fb8a: 
1:5b4fb8a:         Connection conn = cf.createConnection();
1:5b4fb8a:         LOG.info("connection:" + ((PooledConnection)conn).getConnection());
1:5b4fb8a: 
1:5b4fb8a:         conn.start();
1:5b4fb8a:         connections.add(conn);
1:5b4fb8a:         try {
1:5b4fb8a:             sessions.add(conn.createSession(false, Session.AUTO_ACKNOWLEDGE));
1:5b4fb8a:         } catch (JMSException expected) {
1:5b4fb8a:             conn.close();
1:5b4fb8a:         }
1:5b4fb8a: 
1:5b4fb8a:         conn = cf.createConnection();
1:5b4fb8a:         LOG.info("connection:" + ((PooledConnection)conn).getConnection());
1:5b4fb8a: 
1:5b4fb8a:         conn.start();
1:5b4fb8a:         connections.add(conn);
1:5b4fb8a:         try {
1:5b4fb8a:             sessions.add(conn.createSession(false, Session.AUTO_ACKNOWLEDGE));
1:5b4fb8a:         } catch (JMSException expected) {
1:5b4fb8a:             conn.close();
1:5b4fb8a:         }
1:1b38caa: 
1:5b4fb8a:         assertEquals(sessions.size(), 10);
1:5b4fb8a:         assertEquals(connections.size(), 12);
1:5b4fb8a:     }
1:4e011e0: }
============================================================================
author:gtully
-------------------------------------------------------------------------------
commit:5b4fb8a
/////////////////////////////////////////////////////////////////////////
1: import static org.junit.Assert.assertEquals;
1: import javax.jms.JMSException;
1: import javax.jms.Session;
1: import java.util.HashSet;
1: import java.util.LinkedList;
1: 
/////////////////////////////////////////////////////////////////////////
1: 
1:     @Test(timeout = 60000)
1:     public void testAllSessionsAvailableOnConstrainedPool() throws Exception {
1:         PooledConnectionFactory cf = new PooledConnectionFactory();
1:         cf.setConnectionFactory(new ActiveMQConnectionFactory(
1:                 "vm://localhost?broker.persistent=false&broker.useJmx=false&broker.schedulerSupport=false"));
1:         cf.setMaxConnections(5);
1:         cf.setMaximumActiveSessionPerConnection(2);
1:         cf.setBlockIfSessionPoolIsFull(false);
1: 
1:         LinkedList<Connection> connections = new LinkedList<>();
1:         HashSet<Session> sessions = new HashSet();
1: 
1:         for (int i=0; i<10; i++) {
1:             Connection conn = cf.createConnection();
1:             LOG.info("connection: " + i + ", " + ((PooledConnection)conn).getConnection());
1: 
1:             conn.start();
1:             connections.add(conn);
1:             sessions.add(conn.createSession(false, Session.AUTO_ACKNOWLEDGE));
1:         }
1: 
1:         assertEquals(sessions.size(), 10);
1:         assertEquals(connections.size(), 10);
1: 
1:         Connection connectionToClose = connections.getLast();
1:         connectionToClose.close();
1: 
1:         Connection conn = cf.createConnection();
1:         LOG.info("connection:" + ((PooledConnection)conn).getConnection());
1: 
1:         conn.start();
1:         connections.add(conn);
1:         try {
1:             sessions.add(conn.createSession(false, Session.AUTO_ACKNOWLEDGE));
1:         } catch (JMSException expected) {
1:             conn.close();
1:         }
1: 
1:         conn = cf.createConnection();
1:         LOG.info("connection:" + ((PooledConnection)conn).getConnection());
1: 
1:         conn.start();
1:         connections.add(conn);
1:         try {
1:             sessions.add(conn.createSession(false, Session.AUTO_ACKNOWLEDGE));
1:         } catch (JMSException expected) {
1:             conn.close();
1:         }
1: 
1:         assertEquals(sessions.size(), 10);
1:         assertEquals(connections.size(), 12);
1:     }
commit:b66559e
/////////////////////////////////////////////////////////////////////////
1: package org.apache.activemq.jms.pool;
/////////////////////////////////////////////////////////////////////////
1: import org.apache.activemq.ActiveMQConnectionFactory;
/////////////////////////////////////////////////////////////////////////
1:         PooledConnectionFactory cf = new PooledConnectionFactory();
0:         cf.setConnectionFactory(new ActiveMQConnectionFactory("vm://localhost?broker.persistent=false"));
1:         cf.setMaxConnections(1);
author:Timothy Bish
-------------------------------------------------------------------------------
commit:27ce49f
/////////////////////////////////////////////////////////////////////////
1:         } finally {
1:             ((PooledConnectionFactory) cf).stop();
/////////////////////////////////////////////////////////////////////////
1:             ((PooledConnectionFactory) cf).stop();
/////////////////////////////////////////////////////////////////////////
1:             ((PooledConnectionFactory) cf).stop();
commit:e6597c4
/////////////////////////////////////////////////////////////////////////
1: import static org.junit.Assert.fail;
1: 
1: import org.junit.Test;
/////////////////////////////////////////////////////////////////////////
1: public class PooledConnectionTest extends JmsPoolTestSupport {
1:     private final Logger LOG = LoggerFactory.getLogger(PooledConnectionTest.class);
/////////////////////////////////////////////////////////////////////////
1:     @Test(timeout = 60000)
1:         LOG.debug("running testRepeatedSetClientIDCalls()");
/////////////////////////////////////////////////////////////////////////
1:             LOG.error("Repeated calls to ActiveMQConnection.setClientID(\"newID\") caused " + ise.getMessage());
/////////////////////////////////////////////////////////////////////////
1:             LOG.debug("Correctly received " + ise);
/////////////////////////////////////////////////////////////////////////
1:             LOG.debug("Correctly received " + ise);
1:         LOG.debug("Test finished.");
1:         cf.setConnectionFactory(new ActiveMQConnectionFactory(
1:             "vm://localhost?broker.persistent=false&broker.useJmx=false&broker.schedulerSupport=false"));
1:         LOG.debug("ConnectionFactory initialized.");
author:Timothy A. Bish
-------------------------------------------------------------------------------
commit:1b38caa
/////////////////////////////////////////////////////////////////////////
0: import junit.framework.TestCase;
1: 
1: import org.slf4j.Logger;
1: import org.slf4j.LoggerFactory;
1: 
1: 
0:     private final Logger log = LoggerFactory.getLogger(PooledConnectionTest.class);
1: 
0:     @Override
0:     public void setUp() throws Exception {
0:         log.debug("setUp() called.");
1:     }
1: 
1: 
0:     @Override
0:     public void tearDown() throws Exception {
0:         log.debug("tearDown() called.");
1:     }
1: 
1:     /**
1:      * AMQ-3752:
1:      * Tests how the ActiveMQConnection reacts to repeated calls to
1:      * setClientID().
1:      *
1:      * @throws Exception
1:      */
1:     public void testRepeatedSetClientIDCalls() throws Exception {
0:         log.debug("running testRepeatedSetClientIDCalls()");
1: 
1:         // 1st test: call setClientID("newID") twice
1:         // this should be tolerated and not result in an exception
1:         //
1:         ConnectionFactory cf = createPooledConnectionFactory();
1:         Connection conn = cf.createConnection();
1:         conn.setClientID("newID");
1: 
1:         try {
1:             conn.setClientID("newID");
1:             conn.start();
1:             conn.close();
0:             cf = null;
1:         } catch (IllegalStateException ise) {
0:             log.error("Repeated calls to ActiveMQConnection.setClientID(\"newID\") caused " + ise.getMessage());
1:             fail("Repeated calls to ActiveMQConnection.setClientID(\"newID\") caused " + ise.getMessage());
1:         }
1: 
1:         // 2nd test: call setClientID() twice with different IDs
1:         // this should result in an IllegalStateException
1:         //
1:         cf = createPooledConnectionFactory();
1:         conn = cf.createConnection();
1:         conn.setClientID("newID1");
1:         try {
1:             conn.setClientID("newID2");
1:             fail("calling ActiveMQConnection.setClientID() twice with different clientID must raise an IllegalStateException");
1:         } catch (IllegalStateException ise) {
0:             log.debug("Correctly received " + ise);
1: 
1:         // 3rd test: try to call setClientID() after start()
1:         // should result in an exception
1:         cf = createPooledConnectionFactory();
1:         conn = cf.createConnection();
1:         try {
1:         conn.start();
1:         conn.setClientID("newID3");
1:         fail("Calling setClientID() after start() mut raise a JMSException.");
1:         } catch (IllegalStateException ise) {
0:             log.debug("Correctly received " + ise);
1: 
0:         log.debug("Test finished.");
1:     }
1: 
1:     protected ConnectionFactory createPooledConnectionFactory() {
0:         ConnectionFactory cf = new PooledConnectionFactory("vm://localhost?broker.persistent=false");
0:         ((PooledConnectionFactory)cf).setMaxConnections(1);
0:         log.debug("ConnectionFactory initialized.");
1:         return cf;
1:     }
author:Gary Tully
-------------------------------------------------------------------------------
commit:4e011e0
/////////////////////////////////////////////////////////////////////////
1:         } finally {
1:             conn.close();
1:         }
/////////////////////////////////////////////////////////////////////////
1:         } finally {
1:             conn.close();
0:         }
author:Bosanac Dejan
-------------------------------------------------------------------------------
commit:974f689
/////////////////////////////////////////////////////////////////////////
1:  * Licensed to the Apache Software Foundation (ASF) under one or more
1:  * contributor license agreements.  See the NOTICE file distributed with
1:  * this work for additional information regarding copyright ownership.
1:  * The ASF licenses this file to You under the Apache License, Version 2.0
1:  * (the "License"); you may not use this file except in compliance with
1:  * the License.  You may obtain a copy of the License at
1:  *
1:  *      http://www.apache.org/licenses/LICENSE-2.0
1:  *
1:  * Unless required by applicable law or agreed to in writing, software
1:  * distributed under the License is distributed on an "AS IS" BASIS,
1:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:  * See the License for the specific language governing permissions and
1:  * limitations under the License.
0: import junit.framework.Assert;
0: import junit.framework.TestCase;
0: import org.slf4j.Logger;
0: import org.slf4j.LoggerFactory;
0: 
author:Torsten Mielke
-------------------------------------------------------------------------------
commit:3a84de9
/////////////////////////////////////////////////////////////////////////
1: /**
1:  * 
1:  */
0: package org.apache.activemq.pool;
0: 
1: import javax.jms.Connection;
1: import javax.jms.ConnectionFactory;
1: import javax.jms.IllegalStateException;
0: 
0: import junit.framework.Assert;
0: import junit.framework.TestCase;
0: 
0: import org.slf4j.Logger;
0: import org.slf4j.LoggerFactory;
0: 
1: /**
1:  * A couple of tests against the PooledConnection class.
1:  *
1:  */
0: public class PooledConnectionTest extends TestCase {
0: 	
0: 	private Logger log = LoggerFactory.getLogger(PooledConnectionTest.class);
0: 	
0: 	
0: 	@Override
0: 	public void setUp() throws Exception {
0: 		log.debug("setUp() called.");
0: 	}
0: 	
0: 	
0: 	@Override
0: 	public void tearDown() throws Exception {
0: 		log.debug("tearDown() called.");
0: 	}
0: 		
0: 	
1: 	/**
0: 	 * AMQ-3752:
0: 	 * Tests how the ActiveMQConnection reacts to repeated calls to
0: 	 * setClientID(). 
1: 	 * 
0: 	 * @throws Exception
1: 	 */
0: 	public void testRepeatedSetClientIDCalls() throws Exception {
0: 		log.debug("running testRepeatedSetClientIDCalls()");
0: 		
0: 		// 1st test: call setClientID("newID") twice 
0: 		// this should be tolerated and not result in an exception
0: 		//
0: 		ConnectionFactory cf = createPooledConnectionFactory();
0: 		Connection conn = cf.createConnection();
0: 		conn.setClientID("newID");
0: 		
0: 		try {
0: 			conn.setClientID("newID");
0: 			conn.start();
0: 			conn.close();
0: 			cf = null;
0: 		} catch (IllegalStateException ise) {
0: 			log.error("Repeated calls to ActiveMQConnection.setClientID(\"newID\") caused " + ise.getMessage());
0: 			Assert.fail("Repeated calls to ActiveMQConnection.setClientID(\"newID\") caused " + ise.getMessage());
0: 		}
0: 		
0: 		// 2nd test: call setClientID() twice with different IDs
0: 		// this should result in an IllegalStateException
0: 		//
0: 		cf = createPooledConnectionFactory();
0: 		conn = cf.createConnection();
0: 		conn.setClientID("newID1");
0: 		try {
0: 			conn.setClientID("newID2");
0: 			Assert.fail("calling ActiveMQConnection.setClientID() twice with different clientID must raise an IllegalStateException"); 
0: 		} catch (IllegalStateException ise) {
0: 			log.debug("Correctly received " + ise);
0: 		}
0: 		
0: 		// 3rd test: try to call setClientID() after start()
0: 		// should result in an exception
0: 		cf = createPooledConnectionFactory();
0: 		conn = cf.createConnection();
0: 		try {
0: 		conn.start();
0: 		conn.setClientID("newID3");
0: 		Assert.fail("Calling setClientID() after start() mut raise a JMSException.");
0: 		} catch (IllegalStateException ise) {
0: 			log.debug("Correctly received " + ise);
0: 		}
0: 		
0: 		log.debug("Test finished.");
0: 	}
0: 	
0: 	
0: 	protected ConnectionFactory createPooledConnectionFactory() {
0: 		ConnectionFactory cf = new PooledConnectionFactory("vm://localhost?broker.persistent=false");
0: 		((PooledConnectionFactory)cf).setMaxConnections(1);	
0: 		log.debug("ConnectionFactory initialized.");
0: 		return cf;
0: 	}
0: }
============================================================================