1:dc258ab: /**
1:dc258ab:  * Licensed to the Apache Software Foundation (ASF) under one or more
1:dc258ab:  * contributor license agreements.  See the NOTICE file distributed with
1:dc258ab:  * this work for additional information regarding copyright ownership.
1:dc258ab:  * The ASF licenses this file to You under the Apache License, Version 2.0
1:dc258ab:  * (the "License"); you may not use this file except in compliance with
1:dc258ab:  * the License.  You may obtain a copy of the License at
1:dc258ab:  *
1:dc258ab:  *      http://www.apache.org/licenses/LICENSE-2.0
1:dc258ab:  *
1:dc258ab:  * Unless required by applicable law or agreed to in writing, software
1:dc258ab:  * distributed under the License is distributed on an "AS IS" BASIS,
1:dc258ab:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:dc258ab:  * See the License for the specific language governing permissions and
1:dc258ab:  * limitations under the License.
1:dc258ab:  */
1:dc258ab: package org.apache.activemq.store.jdbc;
11:dc258ab: 
1:dc258ab: import java.io.IOException;
1:dc258ab: import java.sql.Connection;
1:dc258ab: import java.sql.PreparedStatement;
1:dc258ab: import java.sql.ResultSet;
1:dc258ab: import java.sql.SQLException;
1:dc258ab: import java.sql.Timestamp;
1:dc258ab: import java.util.Date;
1:dc258ab: import java.util.concurrent.TimeUnit;
1:dc258ab: import org.apache.activemq.util.IOExceptionSupport;
1:6ce702d: import org.apache.activemq.util.ServiceStopper;
1:dc258ab: import org.slf4j.Logger;
1:dc258ab: import org.slf4j.LoggerFactory;
1:dc258ab: 
1:dc258ab: /**
1:dc258ab:  * Represents an exclusive lease on a database to avoid multiple brokers running
1:dc258ab:  * against the same logical database.
1:dc258ab:  * 
1:dc258ab:  * @org.apache.xbean.XBean element="lease-database-locker"
1:dc258ab:  * 
1:dc258ab:  */
1:efaa351: public class LeaseDatabaseLocker extends AbstractJDBCLocker {
1:dc258ab:     private static final Logger LOG = LoggerFactory.getLogger(LeaseDatabaseLocker.class);
1:dc258ab: 
1:6f2c998:     protected int maxAllowableDiffFromDBTime = 0;
1:dc258ab:     protected long diffFromCurrentTime = Long.MAX_VALUE;
1:dc258ab:     protected String leaseHolderId;
1:b5c6c1e:     protected boolean handleStartException;
1:dc258ab: 
1:6ce702d:     public void doStart() throws Exception {
1:dc258ab: 
1:efaa351:         if (lockAcquireSleepInterval < lockable.getLockKeepAlivePeriod()) {
1:efaa351:             LOG.warn("LockableService keep alive period: " + lockable.getLockKeepAlivePeriod()
1:f45ce09:                     + ", which renews the lease, is greater than lockAcquireSleepInterval: " + lockAcquireSleepInterval
1:ef1d254:                     + ", the lease duration. These values will allow the lease to expire.");
1:ef1d254:         }
1:ef1d254: 
1:efaa351:         LOG.info(getLeaseHolderId() + " attempting to acquire exclusive lease to become the master");
1:8a8fcb6:         String sql = getStatements().getLeaseObtainStatement();
1:dc258ab:         LOG.debug(getLeaseHolderId() + " locking Query is "+sql);
1:dc258ab: 
1:13bbe52:         long now = 0l;
1:efaa351:         while (!isStopping()) {
1:dc258ab:             Connection connection = null;
1:dc258ab:             PreparedStatement statement = null;
3:dc258ab:             try {
1:dc258ab:                 connection = getConnection();
1:dc258ab:                 initTimeDiff(connection);
1:dc258ab: 
1:dc258ab:                 statement = connection.prepareStatement(sql);
1:dc258ab:                 setQueryTimeout(statement);
1:dc258ab: 
1:13bbe52:                 now = System.currentTimeMillis() + diffFromCurrentTime;
1:dc258ab:                 statement.setString(1, getLeaseHolderId());
1:dc258ab:                 statement.setLong(2, now + lockAcquireSleepInterval);
1:dc258ab:                 statement.setLong(3, now);
1:dc258ab: 
1:dc258ab:                 int result = statement.executeUpdate();
1:dc258ab:                 if (result == 1) {
1:dc258ab:                     // we got the lease, verify we still have it
1:dc258ab:                     if (keepAlive()) {
1:dc258ab:                         break;
15:dc258ab:                     }
1:dc258ab:                 }
1:dc258ab: 
1:dc258ab:                 reportLeasOwnerShipAndDuration(connection);
1:dc258ab: 
1:dc258ab:             } catch (Exception e) {
1:2e00891:                 LOG.warn(getLeaseHolderId() + " lease acquire failure: "+ e, e);
1:d60022e:                 if (isStopping()) {
1:d60022e:                     throw new Exception(
1:d60022e:                             "Cannot start broker as being asked to shut down. "
1:d60022e:                                     + "Interrupted attempt to acquire lock: "
1:d60022e:                                     + e, e);
1:d60022e:                 }
1:b5c6c1e:                 if (handleStartException) {
1:c7291f1:                     throw e;
1:b5c6c1e:                 }
1:dc258ab:             } finally {
1:dc258ab:                 close(statement);
1:dc258ab:                 close(connection);
1:dc258ab:             }
1:dc258ab: 
1:2e00891:             LOG.debug(getLeaseHolderId() + " failed to acquire lease.  Sleeping for " + lockAcquireSleepInterval + " milli(s) before trying again...");
1:dc258ab:             TimeUnit.MILLISECONDS.sleep(lockAcquireSleepInterval);
1:dc258ab:         }
1:efaa351:         if (isStopping()) {
1:ba5fdc5:             throw new RuntimeException(getLeaseHolderId() + " failing lease acquire due to stop");
1:dc258ab:         }
1:dc258ab: 
1:f57fd7d:         LOG.info(getLeaseHolderId() + ", becoming master with lease expiry " + new Date(now + lockAcquireSleepInterval) + " on dataSource: " + dataSource);
1:dc258ab:     }
1:dc258ab: 
1:dc258ab:     private void reportLeasOwnerShipAndDuration(Connection connection) throws SQLException {
1:dc258ab:         PreparedStatement statement = null;
1:dc258ab:         try {
1:8a8fcb6:             statement = connection.prepareStatement(getStatements().getLeaseOwnerStatement());
1:dc258ab:             ResultSet resultSet = statement.executeQuery();
1:dc258ab:             while (resultSet.next()) {
1:2e00891:                 LOG.debug(getLeaseHolderId() + " Lease held by " + resultSet.getString(1) + " till " + new Date(resultSet.getLong(2)));
1:dc258ab:             }
1:dc258ab:         } finally {
1:dc258ab:             close(statement);
1:dc258ab:         }
1:dc258ab:     }
1:dc258ab: 
1:dc258ab:     protected long initTimeDiff(Connection connection) throws SQLException {
1:6f2c998:         if (Long.MAX_VALUE == diffFromCurrentTime) {
1:6f2c998:             if (maxAllowableDiffFromDBTime > 0) {
1:6f2c998:                 diffFromCurrentTime = determineTimeDifference(connection);
1:6f2c998:             } else {
1:6f2c998:                 diffFromCurrentTime = 0l;
1:6f2c998:             }
1:dc258ab:         }
1:dc258ab:         return diffFromCurrentTime;
1:dc258ab:     }
1:dc258ab: 
1:17bf5c7:     protected long determineTimeDifference(Connection connection) throws SQLException {
1:8a8fcb6:         PreparedStatement statement = connection.prepareStatement(getStatements().getCurrentDateTime());
1:dc258ab:         ResultSet resultSet = statement.executeQuery();
1:dc258ab:         long result = 0l;
1:dc258ab:         if (resultSet.next()) {
1:dc258ab:             Timestamp timestamp = resultSet.getTimestamp(1);
1:dc258ab:             long diff = System.currentTimeMillis() - timestamp.getTime();
1:17bf5c7:             if (Math.abs(diff) > maxAllowableDiffFromDBTime) {
1:dc258ab:                 // off by more than maxAllowableDiffFromDBTime so lets adjust
1:17bf5c7:                 result = (-diff);
1:dc258ab:             }
1:17bf5c7:             LOG.info(getLeaseHolderId() + " diff adjust from db: " + result + ", db time: " + timestamp);
1:dc258ab:         }
1:dc258ab:         return result;
1:dc258ab:     }
1:dc258ab: 
1:6ce702d:     public void doStop(ServiceStopper stopper) throws Exception {
1:efaa351:         if (lockable.getBrokerService() != null && lockable.getBrokerService().isRestartRequested()) {
1:13bbe52:             // keep our lease for restart
1:13bbe52:             return;
1:13bbe52:         }
1:13bbe52:         releaseLease();
1:dc258ab:     }
1:dc258ab: 
1:dc258ab:     private void releaseLease() {
1:dc258ab:         Connection connection = null;
1:dc258ab:         PreparedStatement statement = null;
1:dc258ab:         try {
1:dc258ab:             connection = getConnection();
1:8a8fcb6:             statement = connection.prepareStatement(getStatements().getLeaseUpdateStatement());
1:dc258ab:             statement.setString(1, null);
1:dc258ab:             statement.setLong(2, 0l);
1:dc258ab:             statement.setString(3, getLeaseHolderId());
1:dc258ab:             if (statement.executeUpdate() == 1) {
1:dc258ab:                 LOG.info(getLeaseHolderId() + ", released lease");
1:dc258ab:             }
1:dc258ab:         } catch (Exception e) {
1:dc258ab:             LOG.error(getLeaseHolderId() + " failed to release lease: " + e, e);
1:dc258ab:         } finally {
1:dc258ab:             close(statement);
1:dc258ab:             close(connection);
1:dc258ab:         }
1:dc258ab:     }
1:dc258ab: 
1:dc258ab:     @Override
1:dc258ab:     public boolean keepAlive() throws IOException {
1:dc258ab:         boolean result = false;
1:8a8fcb6:         final String sql = getStatements().getLeaseUpdateStatement();
1:dc258ab:         LOG.debug(getLeaseHolderId() + ", lease keepAlive Query is " + sql);
1:dc258ab: 
1:dc258ab:         Connection connection = null;
1:dc258ab:         PreparedStatement statement = null;
1:dc258ab:         try {
1:dc258ab:             connection = getConnection();
1:dc258ab: 
1:dc258ab:             initTimeDiff(connection);
1:dc258ab:             statement = connection.prepareStatement(sql);
1:dc258ab:             setQueryTimeout(statement);
1:dc258ab: 
2:dc258ab:             final long now = System.currentTimeMillis() + diffFromCurrentTime;
1:dc258ab:             statement.setString(1, getLeaseHolderId());
1:dc258ab:             statement.setLong(2, now + lockAcquireSleepInterval);
1:dc258ab:             statement.setString(3, getLeaseHolderId());
1:dc258ab: 
1:dc258ab:             result = (statement.executeUpdate() == 1);
1:13bbe52: 
1:13bbe52:             if (!result) {
1:13bbe52:                 reportLeasOwnerShipAndDuration(connection);
1:13bbe52:             }
1:dc258ab:         } catch (Exception e) {
1:dc258ab:             LOG.warn(getLeaseHolderId() + ", failed to update lease: " + e, e);
1:dc258ab:             IOException ioe = IOExceptionSupport.create(e);
1:efaa351:             lockable.getBrokerService().handleIOException(ioe);
1:dc258ab:             throw ioe;
1:dc258ab:         } finally {
1:dc258ab:             close(statement);
1:dc258ab:             close(connection);
1:dc258ab:         }
1:dc258ab:         return result;
1:dc258ab:     }
1:dc258ab: 
1:dc258ab:     public String getLeaseHolderId() {
1:dc258ab:         if (leaseHolderId == null) {
1:efaa351:             if (lockable.getBrokerService() != null) {
1:efaa351:                 leaseHolderId = lockable.getBrokerService().getBrokerName();
1:dc258ab:             }
1:dc258ab:         }
1:dc258ab:         return leaseHolderId;
1:dc258ab:     }
1:dc258ab: 
1:dc258ab:     public void setLeaseHolderId(String leaseHolderId) {
1:dc258ab:         this.leaseHolderId = leaseHolderId;
1:dc258ab:     }
1:dc258ab: 
1:dc258ab:     public int getMaxAllowableDiffFromDBTime() {
1:dc258ab:         return maxAllowableDiffFromDBTime;
1:dc258ab:     }
1:dc258ab: 
1:dc258ab:     public void setMaxAllowableDiffFromDBTime(int maxAllowableDiffFromDBTime) {
1:dc258ab:         this.maxAllowableDiffFromDBTime = maxAllowableDiffFromDBTime;
1:dc258ab:     }
1:13bbe52: 
1:b5c6c1e:     public boolean isHandleStartException() {
1:b5c6c1e:         return handleStartException;
1:b5c6c1e:     }
1:b5c6c1e: 
1:b5c6c1e:     public void setHandleStartException(boolean handleStartException) {
1:b5c6c1e:         this.handleStartException = handleStartException;
1:b5c6c1e:     }
1:b5c6c1e: 
1:13bbe52:     @Override
1:13bbe52:     public String toString() {
1:13bbe52:         return "LeaseDatabaseLocker owner:" + leaseHolderId + ",duration:" + lockAcquireSleepInterval + ",renew:" + lockAcquireSleepInterval;
1:13bbe52:     }
1:dc258ab: }
============================================================================
author:Dejan Bosanac
-------------------------------------------------------------------------------
commit:c7291f1
/////////////////////////////////////////////////////////////////////////
1:                     throw e;
commit:2e00891
/////////////////////////////////////////////////////////////////////////
1:                 LOG.warn(getLeaseHolderId() + " lease acquire failure: "+ e, e);
/////////////////////////////////////////////////////////////////////////
1:             LOG.debug(getLeaseHolderId() + " failed to acquire lease.  Sleeping for " + lockAcquireSleepInterval + " milli(s) before trying again...");
/////////////////////////////////////////////////////////////////////////
1:                 LOG.debug(getLeaseHolderId() + " Lease held by " + resultSet.getString(1) + " till " + new Date(resultSet.getLong(2)));
commit:b5c6c1e
/////////////////////////////////////////////////////////////////////////
1:     protected boolean handleStartException;
/////////////////////////////////////////////////////////////////////////
1:                 if (handleStartException) {
0:                     lockable.getBrokerService().handleIOException(IOExceptionSupport.create(e));
1:                 }
/////////////////////////////////////////////////////////////////////////
1:     public boolean isHandleStartException() {
1:         return handleStartException;
1:     }
1: 
1:     public void setHandleStartException(boolean handleStartException) {
1:         this.handleStartException = handleStartException;
1:     }
1: 
commit:d60022e
/////////////////////////////////////////////////////////////////////////
1:                 if (isStopping()) {
1:                     throw new Exception(
1:                             "Cannot start broker as being asked to shut down. "
1:                                     + "Interrupted attempt to acquire lock: "
1:                                     + e, e);
1:                 }
0:                 lockable.getBrokerService().handleIOException(IOExceptionSupport.create(e));
author:gtully
-------------------------------------------------------------------------------
commit:f45ce09
/////////////////////////////////////////////////////////////////////////
1:                     + ", which renews the lease, is greater than lockAcquireSleepInterval: " + lockAcquireSleepInterval
commit:f57fd7d
/////////////////////////////////////////////////////////////////////////
1:         LOG.info(getLeaseHolderId() + ", becoming master with lease expiry " + new Date(now + lockAcquireSleepInterval) + " on dataSource: " + dataSource);
commit:efaa351
/////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////
1: public class LeaseDatabaseLocker extends AbstractJDBCLocker {
1:         if (lockAcquireSleepInterval < lockable.getLockKeepAlivePeriod()) {
1:             LOG.warn("LockableService keep alive period: " + lockable.getLockKeepAlivePeriod()
1:         LOG.info(getLeaseHolderId() + " attempting to acquire exclusive lease to become the master");
1:         while (!isStopping()) {
/////////////////////////////////////////////////////////////////////////
1:         if (isStopping()) {
/////////////////////////////////////////////////////////////////////////
1:         if (lockable.getBrokerService() != null && lockable.getBrokerService().isRestartRequested()) {
/////////////////////////////////////////////////////////////////////////
1:             lockable.getBrokerService().handleIOException(ioe);
/////////////////////////////////////////////////////////////////////////
1:             if (lockable.getBrokerService() != null) {
1:                 leaseHolderId = lockable.getBrokerService().getBrokerName();
author:Claus Ibsen
-------------------------------------------------------------------------------
commit:8a8fcb6
/////////////////////////////////////////////////////////////////////////
1:         String sql = getStatements().getLeaseObtainStatement();
/////////////////////////////////////////////////////////////////////////
1:             statement = connection.prepareStatement(getStatements().getLeaseOwnerStatement());
/////////////////////////////////////////////////////////////////////////
1:         PreparedStatement statement = connection.prepareStatement(getStatements().getCurrentDateTime());
/////////////////////////////////////////////////////////////////////////
1:             statement = connection.prepareStatement(getStatements().getLeaseUpdateStatement());
/////////////////////////////////////////////////////////////////////////
1:         final String sql = getStatements().getLeaseUpdateStatement();
author:Gary Tully
-------------------------------------------------------------------------------
commit:13bbe52
/////////////////////////////////////////////////////////////////////////
1:         long now = 0l;
/////////////////////////////////////////////////////////////////////////
1:                 now = System.currentTimeMillis() + diffFromCurrentTime;
/////////////////////////////////////////////////////////////////////////
0:         LOG.info(getLeaseHolderId() + ", becoming master with lease expiry " + new Date(now) + " on dataSource: " + dataSource);
/////////////////////////////////////////////////////////////////////////
0:         if (persistenceAdapter.getBrokerService() != null && persistenceAdapter.getBrokerService().isRestartRequested()) {
1:             // keep our lease for restart
1:             return;
1:         }
1:         releaseLease();
/////////////////////////////////////////////////////////////////////////
1: 
1:             if (!result) {
1:                 reportLeasOwnerShipAndDuration(connection);
1:             }
/////////////////////////////////////////////////////////////////////////
1: 
1:     @Override
1:     public String toString() {
1:         return "LeaseDatabaseLocker owner:" + leaseHolderId + ",duration:" + lockAcquireSleepInterval + ",renew:" + lockAcquireSleepInterval;
1:     }
commit:17bf5c7
/////////////////////////////////////////////////////////////////////////
1:     protected long determineTimeDifference(Connection connection) throws SQLException {
1:             if (Math.abs(diff) > maxAllowableDiffFromDBTime) {
1:                 result = (-diff);
1:             LOG.info(getLeaseHolderId() + " diff adjust from db: " + result + ", db time: " + timestamp);
commit:ef1d254
/////////////////////////////////////////////////////////////////////////
0:         if (lockAcquireSleepInterval < persistenceAdapter.getLockKeepAlivePeriod()) {
0:             LOG.warn("Persistence adapter keep alive period: " + persistenceAdapter.getLockKeepAlivePeriod()
0:                     + ", which renews the lease, is less than lockAcquireSleepInterval: " + lockAcquireSleepInterval
1:                     + ", the lease duration. These values will allow the lease to expire.");
1:         }
1: 
commit:ba5fdc5
/////////////////////////////////////////////////////////////////////////
0:                 LOG.debug(getLeaseHolderId() + " lease acquire failure: "+ e, e);
/////////////////////////////////////////////////////////////////////////
1:             throw new RuntimeException(getLeaseHolderId() + " failing lease acquire due to stop");
commit:0a5ce71
/////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////
commit:6f2c998
/////////////////////////////////////////////////////////////////////////
1:     protected int maxAllowableDiffFromDBTime = 0;
/////////////////////////////////////////////////////////////////////////
0:         LOG.info(getLeaseHolderId() + " attempting to acquire exclusive lease to become the Master broker");
/////////////////////////////////////////////////////////////////////////
1:         if (Long.MAX_VALUE == diffFromCurrentTime) {
1:             if (maxAllowableDiffFromDBTime > 0) {
1:                 diffFromCurrentTime = determineTimeDifference(connection);
1:             } else {
1:                 diffFromCurrentTime = 0l;
1:             }
commit:dc258ab
/////////////////////////////////////////////////////////////////////////
1: /**
1:  * Licensed to the Apache Software Foundation (ASF) under one or more
1:  * contributor license agreements.  See the NOTICE file distributed with
1:  * this work for additional information regarding copyright ownership.
1:  * The ASF licenses this file to You under the Apache License, Version 2.0
1:  * (the "License"); you may not use this file except in compliance with
1:  * the License.  You may obtain a copy of the License at
1:  *
1:  *      http://www.apache.org/licenses/LICENSE-2.0
1:  *
1:  * Unless required by applicable law or agreed to in writing, software
1:  * distributed under the License is distributed on an "AS IS" BASIS,
1:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:  * See the License for the specific language governing permissions and
1:  * limitations under the License.
1:  */
1: package org.apache.activemq.store.jdbc;
1: 
1: import java.io.IOException;
1: import java.sql.Connection;
1: import java.sql.PreparedStatement;
1: import java.sql.ResultSet;
1: import java.sql.SQLException;
1: import java.sql.Timestamp;
1: import java.util.Date;
1: import java.util.concurrent.TimeUnit;
0: import javax.sql.DataSource;
1: import org.apache.activemq.util.IOExceptionSupport;
1: import org.slf4j.Logger;
1: import org.slf4j.LoggerFactory;
1: 
1: /**
1:  * Represents an exclusive lease on a database to avoid multiple brokers running
1:  * against the same logical database.
1:  * 
1:  * @org.apache.xbean.XBean element="lease-database-locker"
1:  * 
1:  */
0: public class LeaseDatabaseLocker implements DatabaseLocker {
1:     private static final Logger LOG = LoggerFactory.getLogger(LeaseDatabaseLocker.class);
0:     public static final long DEFAULT_LOCK_ACQUIRE_SLEEP_INTERVAL = 5000;
0:     protected DataSource dataSource;
0:     protected Statements statements;
0:     protected long lockAcquireSleepInterval = DEFAULT_LOCK_ACQUIRE_SLEEP_INTERVAL;
1: 
0:     protected boolean stopping;
0:     protected int maxAllowableDiffFromDBTime = 2000;
1:     protected long diffFromCurrentTime = Long.MAX_VALUE;
1:     protected String leaseHolderId;
0:     protected int queryTimeout = -1;
0:     JDBCPersistenceAdapter persistenceAdapter;
1: 
1: 
0:     public void setPersistenceAdapter(JDBCPersistenceAdapter adapter) throws IOException {
0:         this.dataSource = adapter.getLockDataSource();
0:         this.statements = adapter.getStatements();
0:         this.persistenceAdapter = adapter;
1:     }
1:     
0:     public void start() throws Exception {
0:         stopping = false;
1: 
0:         LOG.info(getLeaseHolderId() + " attempting to acquire the exclusive lease to become the Master broker");
0:         String sql = statements.getLeaseObtainStatement();
1:         LOG.debug(getLeaseHolderId() + " locking Query is "+sql);
1: 
0:         while (!stopping) {
1:             Connection connection = null;
1:             PreparedStatement statement = null;
1:             try {
1:                 connection = getConnection();
1:                 initTimeDiff(connection);
1: 
1:                 statement = connection.prepareStatement(sql);
1:                 setQueryTimeout(statement);
1: 
1:                 final long now = System.currentTimeMillis() + diffFromCurrentTime;
1:                 statement.setString(1, getLeaseHolderId());
1:                 statement.setLong(2, now + lockAcquireSleepInterval);
1:                 statement.setLong(3, now);
1: 
1:                 int result = statement.executeUpdate();
1:                 if (result == 1) {
1:                     // we got the lease, verify we still have it
1:                     if (keepAlive()) {
1:                         break;
1:                     }
1:                 }
1: 
1:                 reportLeasOwnerShipAndDuration(connection);
1: 
1:             } catch (Exception e) {
0:                 LOG.debug(getLeaseHolderId() + " lease aquire failure: "+ e, e);
1:             } finally {
1:                 close(statement);
1:                 close(connection);
1:             }
1: 
0:             LOG.info(getLeaseHolderId() + " failed to acquire lease.  Sleeping for " + lockAcquireSleepInterval + " milli(s) before trying again...");
1:             TimeUnit.MILLISECONDS.sleep(lockAcquireSleepInterval);
1:         }
0:         if (stopping) {
0:             throw new RuntimeException(getLeaseHolderId() + " failing lease aquire due to stop");
1:         }
1: 
0:         LOG.info(getLeaseHolderId() + ", becoming the master on dataSource: " + dataSource);
1:     }
1: 
0:     private void setQueryTimeout(PreparedStatement statement) throws SQLException {
0:         if (queryTimeout > 0) {
0:             statement.setQueryTimeout(queryTimeout);
1:         }
1:     }
1: 
0:     private Connection getConnection() throws SQLException {
0:         return dataSource.getConnection();
1:     }
1: 
0:     private void close(Connection connection) {
0:         if (null != connection) {
1:             try {
0:                 connection.close();
0:             } catch (SQLException e1) {
0:                 LOG.debug(getLeaseHolderId() + " caught exception while closing connection: " + e1, e1);
1:             }
1:         }
1:     }
1: 
0:     private void close(PreparedStatement statement) {
0:         if (null != statement) {
1:             try {
0:                 statement.close();
0:             } catch (SQLException e1) {
0:                 LOG.debug(getLeaseHolderId() + ", caught while closing statement: " + e1, e1);
1:             }
1:         }
1:     }
1: 
1:     private void reportLeasOwnerShipAndDuration(Connection connection) throws SQLException {
1:         PreparedStatement statement = null;
1:         try {
0:             statement = connection.prepareStatement(statements.getLeaseOwnerStatement());
1:             ResultSet resultSet = statement.executeQuery();
1:             while (resultSet.next()) {
0:                 LOG.info(getLeaseHolderId() + " Lease held by " + resultSet.getString(1) + " till " + new Date(resultSet.getLong(2)));
1:             }
1:         } finally {
1:             close(statement);
1:         }
1:     }
1: 
1:     protected long initTimeDiff(Connection connection) throws SQLException {
0:         if (maxAllowableDiffFromDBTime > 0 && Long.MAX_VALUE == diffFromCurrentTime) {
0:             diffFromCurrentTime = determineTimeDifference(connection);
1:         }
1:         return diffFromCurrentTime;
1:     }
1: 
0:     private long determineTimeDifference(Connection connection) throws SQLException {
0:         PreparedStatement statement = connection.prepareStatement(statements.getCurrentDateTime());
1:         ResultSet resultSet = statement.executeQuery();
1:         long result = 0l;
1:         if (resultSet.next()) {
1:             Timestamp timestamp = resultSet.getTimestamp(1);
1:             long diff = System.currentTimeMillis() - timestamp.getTime();
0:             LOG.info(getLeaseHolderId() + " diff from db: " + diff + ", db time: " + timestamp);
0:             if (diff > maxAllowableDiffFromDBTime || diff < -maxAllowableDiffFromDBTime) {
1:                 // off by more than maxAllowableDiffFromDBTime so lets adjust
0:                 result = diff;
1:             }
1:         }
1:         return result;
1:     }
1: 
0:     public void stop() throws Exception {
0:         releaseLease();
0:         stopping = true;
1:     }
1: 
1:     private void releaseLease() {
1:         Connection connection = null;
1:         PreparedStatement statement = null;
1:         try {
1:             connection = getConnection();
0:             statement = connection.prepareStatement(statements.getLeaseUpdateStatement());
1:             statement.setString(1, null);
1:             statement.setLong(2, 0l);
1:             statement.setString(3, getLeaseHolderId());
1:             if (statement.executeUpdate() == 1) {
1:                 LOG.info(getLeaseHolderId() + ", released lease");
1:             }
1:         } catch (Exception e) {
1:             LOG.error(getLeaseHolderId() + " failed to release lease: " + e, e);
1:         } finally {
1:             close(statement);
1:             close(connection);
1:         }
1:     }
1: 
1:     @Override
1:     public boolean keepAlive() throws IOException {
1:         boolean result = false;
0:         final String sql = statements.getLeaseUpdateStatement();
1:         LOG.debug(getLeaseHolderId() + ", lease keepAlive Query is " + sql);
1: 
1:         Connection connection = null;
1:         PreparedStatement statement = null;
1:         try {
1:             connection = getConnection();
1: 
1:             initTimeDiff(connection);
1:             statement = connection.prepareStatement(sql);
1:             setQueryTimeout(statement);
1: 
1:             final long now = System.currentTimeMillis() + diffFromCurrentTime;
1:             statement.setString(1, getLeaseHolderId());
1:             statement.setLong(2, now + lockAcquireSleepInterval);
1:             statement.setString(3, getLeaseHolderId());
1: 
1:             result = (statement.executeUpdate() == 1);
1:         } catch (Exception e) {
1:             LOG.warn(getLeaseHolderId() + ", failed to update lease: " + e, e);
1:             IOException ioe = IOExceptionSupport.create(e);
0:             persistenceAdapter.getBrokerService().handleIOException(ioe);
1:             throw ioe;
1:         } finally {
1:             close(statement);
1:             close(connection);
1:         }
1:         return result;
1:     }
1: 
0:     public long getLockAcquireSleepInterval() {
0:         return lockAcquireSleepInterval;
1:     }
1: 
0:     public void setLockAcquireSleepInterval(long lockAcquireSleepInterval) {
0:         this.lockAcquireSleepInterval = lockAcquireSleepInterval;
1:     }
1:     
0:     public int getQueryTimeout() {
0:         return queryTimeout;
1:     }
1: 
0:     public void setQueryTimeout(int queryTimeout) {
0:         this.queryTimeout = queryTimeout;
1:     }
1: 
1:     public String getLeaseHolderId() {
1:         if (leaseHolderId == null) {
0:             if (persistenceAdapter.getBrokerService() != null) {
0:                 leaseHolderId = persistenceAdapter.getBrokerService().getBrokerName();
1:             }
1:         }
1:         return leaseHolderId;
1:     }
1: 
1:     public void setLeaseHolderId(String leaseHolderId) {
1:         this.leaseHolderId = leaseHolderId;
1:     }
1: 
1:     public int getMaxAllowableDiffFromDBTime() {
1:         return maxAllowableDiffFromDBTime;
1:     }
1: 
1:     public void setMaxAllowableDiffFromDBTime(int maxAllowableDiffFromDBTime) {
1:         this.maxAllowableDiffFromDBTime = maxAllowableDiffFromDBTime;
1:     }
1: }
author:Hiram R. Chirino
-------------------------------------------------------------------------------
commit:c5cf038
author:Bosanac Dejan
-------------------------------------------------------------------------------
commit:6ce702d
/////////////////////////////////////////////////////////////////////////
0: 
0: import org.apache.activemq.broker.AbstractLocker;
0: import org.apache.activemq.store.PersistenceAdapter;
1: import org.apache.activemq.util.ServiceStopper;
/////////////////////////////////////////////////////////////////////////
0: public class LeaseDatabaseLocker extends AbstractLocker {
/////////////////////////////////////////////////////////////////////////
0:     public void configure(PersistenceAdapter adapter) throws IOException {
0:         if (adapter instanceof JDBCPersistenceAdapter) {
0:             this.persistenceAdapter = (JDBCPersistenceAdapter)adapter;
0:             this.dataSource = ((JDBCPersistenceAdapter) adapter).getLockDataSource();
0:             this.statements = ((JDBCPersistenceAdapter) adapter).getStatements();
0:         }
0:         lockAcquireSleepInterval = DEFAULT_LOCK_ACQUIRE_SLEEP_INTERVAL;
1:     public void doStart() throws Exception {
/////////////////////////////////////////////////////////////////////////
1:     public void doStop(ServiceStopper stopper) throws Exception {
============================================================================