1:2bbfbcf: /**
1:2bbfbcf:  * Licensed to the Apache Software Foundation (ASF) under one or more
1:2bbfbcf:  * contributor license agreements.  See the NOTICE file distributed with
1:2bbfbcf:  * this work for additional information regarding copyright ownership.
1:2bbfbcf:  * The ASF licenses this file to You under the Apache License, Version 2.0
1:2bbfbcf:  * (the "License"); you may not use this file except in compliance with
1:2bbfbcf:  * the License.  You may obtain a copy of the License at
1:2bbfbcf:  *
1:2bbfbcf:  *      http://www.apache.org/licenses/LICENSE-2.0
1:2bbfbcf:  *
1:2bbfbcf:  * Unless required by applicable law or agreed to in writing, software
1:2bbfbcf:  * distributed under the License is distributed on an "AS IS" BASIS,
1:2bbfbcf:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:2bbfbcf:  * See the License for the specific language governing permissions and
1:2bbfbcf:  * limitations under the License.
1:2bbfbcf:  */
1:2bbfbcf: package org.apache.activemq.network;
1:2bbfbcf: 
1:2bbfbcf: import java.io.File;
1:2bbfbcf: import java.io.IOException;
1:2bbfbcf: import java.net.Socket;
1:2bbfbcf: import java.net.URI;
1:2bbfbcf: import java.net.URISyntaxException;
1:2bbfbcf: import java.util.ArrayList;
1:2bbfbcf: import java.util.List;
1:2bbfbcf: 
1:2bbfbcf: import javax.jms.Connection;
1:2bbfbcf: import javax.jms.JMSException;
1:2bbfbcf: import javax.jms.Message;
1:2bbfbcf: import javax.jms.MessageConsumer;
1:2bbfbcf: import javax.jms.MessageProducer;
1:2bbfbcf: import javax.jms.Session;
1:2bbfbcf: import javax.jms.TextMessage;
1:2bbfbcf: import javax.net.ServerSocketFactory;
1:2bbfbcf: import org.apache.activemq.ActiveMQConnectionFactory;
1:2bbfbcf: import org.apache.activemq.broker.BrokerService;
1:2bbfbcf: import org.apache.activemq.broker.TransportConnector;
1:2bbfbcf: import org.apache.activemq.broker.jmx.ManagementContext;
1:2bbfbcf: import org.apache.activemq.command.Response;
1:2bbfbcf: import org.apache.activemq.store.PersistenceAdapter;
1:2bbfbcf: import org.apache.activemq.store.kahadb.KahaDBPersistenceAdapter;
1:2bbfbcf: import org.apache.activemq.store.leveldb.LevelDBPersistenceAdapter;
1:2bbfbcf: import org.apache.activemq.transport.Transport;
1:2bbfbcf: import org.apache.activemq.transport.TransportFilter;
1:2bbfbcf: import org.apache.activemq.transport.TransportServer;
1:2bbfbcf: import org.apache.activemq.transport.nio.NIOTransport;
1:2bbfbcf: import org.apache.activemq.transport.nio.NIOTransportFactory;
1:2bbfbcf: import org.apache.activemq.transport.tcp.TcpTransportFactory;
1:2bbfbcf: import org.apache.activemq.transport.tcp.TcpTransportServer;
1:2bbfbcf: import org.apache.activemq.wireformat.WireFormat;
1:2bbfbcf: import org.junit.After;
1:2bbfbcf: import org.junit.AfterClass;
1:2bbfbcf: import org.junit.Before;
1:2bbfbcf: import org.junit.BeforeClass;
1:2bbfbcf: import org.junit.Test;
1:2bbfbcf: import org.slf4j.Logger;
1:2bbfbcf: import org.slf4j.LoggerFactory;
1:2bbfbcf: import static org.junit.Assert.*;
1:2bbfbcf: 
1:2bbfbcf: /**
1:2bbfbcf:  *
1:2bbfbcf:  * @author x22koe
1:2bbfbcf:  */
1:2bbfbcf: public class CheckDuplicateMessagesOnDuplexTest {
1:2bbfbcf: 
1:2bbfbcf:     private static final Logger log = LoggerFactory.getLogger(CheckDuplicateMessagesOnDuplexTest.class);
1:2bbfbcf:     private BrokerService localBroker;
1:2bbfbcf:     private BrokerService remoteBroker;
1:2bbfbcf:     private ActiveMQConnectionFactory localFactory;
1:2bbfbcf:     private ActiveMQConnectionFactory remoteFactory;
1:2bbfbcf:     private Session localSession;
1:2bbfbcf:     private MessageConsumer consumer;
1:2bbfbcf:     private Session remoteSession;
1:2bbfbcf:     private MessageProducer producer;
1:2bbfbcf:     private Connection remoteConnection;
1:2bbfbcf:     private Connection localConnection;
1:2bbfbcf:     private DebugTransportFilter debugTransportFilter;
1:2bbfbcf:     private boolean useLevelDB = false;
1:2bbfbcf: 
1:2bbfbcf:     public CheckDuplicateMessagesOnDuplexTest() {
1:2bbfbcf:     }
1:2bbfbcf: 
1:2bbfbcf:     @BeforeClass
1:2bbfbcf:     public static void setUpClass() {
1:2bbfbcf:     }
1:2bbfbcf: 
1:2bbfbcf:     @AfterClass
1:2bbfbcf:     public static void tearDownClass() {
1:2bbfbcf:     }
1:2bbfbcf: 
1:2bbfbcf:     @Before
1:2bbfbcf:     public void setUp() {
1:2bbfbcf:     }
1:2bbfbcf: 
1:2bbfbcf:     @After
1:2bbfbcf:     public void tearDown() {
1:2bbfbcf:     }
1:2bbfbcf: 
1:2bbfbcf:     @Test
1:2bbfbcf:     public void testConnectionLossBehaviorBeforeAckIsSent() throws Exception {
1:2bbfbcf:         createBrokers();
1:2bbfbcf:         localBroker.deleteAllMessages();
1:2bbfbcf:         remoteBroker.deleteAllMessages();
1:2bbfbcf:         startBrokers();
1:2bbfbcf:         openConnections();
1:2bbfbcf: 
1:2bbfbcf:         Thread.sleep(1000);
1:2bbfbcf:         log.info("\n\n==============================================\nsend hello1\n");
1:2bbfbcf: 
1:2bbfbcf:         // simulate network failure between REMOTE and LOCAL just before the reception response is sent back to REMOTE
1:2bbfbcf:         debugTransportFilter.closeOnResponse = true;
1:2bbfbcf: 
1:2bbfbcf:         producer.send(remoteSession.createTextMessage("hello1"));
1:2bbfbcf:         Message msg = consumer.receive(30000);
1:2bbfbcf: 
1:2bbfbcf:         assertNotNull("expected hello1", msg);
1:2bbfbcf:         assertEquals("hello1", ((TextMessage) msg).getText());
1:2bbfbcf: 
1:2bbfbcf:         Thread.sleep(1000);
1:2bbfbcf:         log.info("\n\n------------------------------------------\nsend hello2\n");
1:2bbfbcf: 
1:2bbfbcf:         producer.send(remoteSession.createTextMessage("hello2"));
1:2bbfbcf:         msg = consumer.receive(30000);
1:2bbfbcf: 
1:2bbfbcf:         assertNotNull("expected hello2", msg);
1:2bbfbcf:         assertEquals("hello2", ((TextMessage) msg).getText());
1:2bbfbcf: 
1:2bbfbcf:         closeLocalConnection();
1:2bbfbcf: 
1:2bbfbcf:         Thread.sleep(1000);
1:2bbfbcf:         log.info("\n\n------------------------------------------\nsend hello3\n");
1:2bbfbcf: 
1:2bbfbcf:         openLocalConnection();
1:2bbfbcf: 
1:2bbfbcf:         Thread.sleep(1000);
1:2bbfbcf: 
1:2bbfbcf:         producer.send(remoteSession.createTextMessage("hello3"));
1:2bbfbcf:         msg = consumer.receive(30000);
1:2bbfbcf: 
1:2bbfbcf:         assertNotNull("expected hello3", msg);
1:2bbfbcf:         assertEquals("hello3", ((TextMessage) msg).getText());
1:2bbfbcf: 
1:2bbfbcf:         Thread.sleep(1000);
1:2bbfbcf:         log.info("\n\n==============================================\n\n");
1:2bbfbcf: 
1:2bbfbcf:         closeConnections();
1:2bbfbcf:         stopBrokers();
1:2bbfbcf: 
1:2bbfbcf:         // restart the local broker, which should be empty
1:2bbfbcf: 
1:2bbfbcf:         Thread.sleep(1000);
1:2bbfbcf:         log.info("\n\n##############################################\n\n");
1:2bbfbcf: 
1:2bbfbcf:         createLocalBroker();
1:2bbfbcf:         startLocalBroker();
1:2bbfbcf:         openLocalConnection();
1:2bbfbcf: 
1:2bbfbcf:         // this should not return the "hello1" message
1:2bbfbcf:         msg = consumer.receive(1000);
1:2bbfbcf: 
1:2bbfbcf:         closeLocalConnection();
1:2bbfbcf:         stopLocalBroker();
1:2bbfbcf: 
1:2bbfbcf:         assertNull(msg);
1:2bbfbcf:     }
1:2bbfbcf: 
1:2bbfbcf:     private void createBrokers() throws Exception {
1:2bbfbcf:         createLocalBroker();
1:2bbfbcf:         createRemoteBroker();
1:2bbfbcf:     }
1:2bbfbcf: 
1:2bbfbcf:     private void createLocalBroker() throws Exception {
1:2bbfbcf:         localBroker = new BrokerService();
1:2bbfbcf:         localBroker.setBrokerName("LOCAL");
1:2bbfbcf:         localBroker.setUseJmx(true);
1:2bbfbcf:         localBroker.setSchedulePeriodForDestinationPurge(5000);
1:2bbfbcf:         ManagementContext managementContext = new ManagementContext();
1:2bbfbcf:         managementContext.setCreateConnector(false);
1:2bbfbcf:         localBroker.setManagementContext(managementContext);
1:2bbfbcf:         PersistenceAdapter persistenceAdapter = persistanceAdapterFactory("target/local");
1:2bbfbcf:         localBroker.setPersistenceAdapter(persistenceAdapter);
1:2bbfbcf:         List<TransportConnector> transportConnectors = new ArrayList<TransportConnector>();
1:2bbfbcf:         DebugTransportFactory tf = new DebugTransportFactory();
1:2bbfbcf:         TransportServer transport = tf.doBind(URI.create("nio://127.0.0.1:23539"));
1:2bbfbcf:         TransportConnector transportConnector = new TransportConnector(transport);
1:2bbfbcf:         transportConnector.setName("tc");
1:2bbfbcf:         transportConnector.setAuditNetworkProducers(true);
1:2bbfbcf:         transportConnectors.add(transportConnector);
1:2bbfbcf:         localBroker.setTransportConnectors(transportConnectors);
1:2bbfbcf:     }
1:2bbfbcf: 
1:2bbfbcf:     private void createRemoteBroker() throws Exception {
1:2bbfbcf:         remoteBroker = new BrokerService();
1:2bbfbcf:         remoteBroker.setBrokerName("REMOTE");
1:2bbfbcf:         remoteBroker.setUseJmx(true);
1:2bbfbcf:         remoteBroker.setSchedulePeriodForDestinationPurge(5000);
1:2bbfbcf:         ManagementContext managementContext = new ManagementContext();
1:2bbfbcf:         managementContext.setCreateConnector(false);
1:2bbfbcf:         remoteBroker.setManagementContext(managementContext);
1:2bbfbcf:         PersistenceAdapter persistenceAdapter = persistanceAdapterFactory("target/remote");
1:2bbfbcf:         remoteBroker.setPersistenceAdapter(persistenceAdapter);
1:2bbfbcf:         List<NetworkConnector> networkConnectors = new ArrayList<NetworkConnector>();
1:2bbfbcf:         DiscoveryNetworkConnector networkConnector = new DiscoveryNetworkConnector();
1:2bbfbcf:         networkConnector.setName("to local");
1:2bbfbcf:         // set maxInactivityDuration to 0, otherwise the broker restarts while you are in the debugger
1:2bbfbcf:         networkConnector.setUri(URI.create("static://(tcp://127.0.0.1:23539?wireFormat.maxInactivityDuration=0)"));
1:2bbfbcf:         networkConnector.setDuplex(true);
1:2bbfbcf:         //networkConnector.setNetworkTTL(5);
1:2bbfbcf:         //networkConnector.setDynamicOnly(true);
1:2bbfbcf:         networkConnector.setAlwaysSyncSend(true);
1:2bbfbcf:         networkConnector.setDecreaseNetworkConsumerPriority(false);
1:2bbfbcf:         networkConnector.setPrefetchSize(1);
1:2bbfbcf:         networkConnector.setCheckDuplicateMessagesOnDuplex(true);
1:2bbfbcf:         networkConnectors.add(networkConnector);
1:2bbfbcf:         remoteBroker.setNetworkConnectors(networkConnectors);
1:2bbfbcf:     }
1:2bbfbcf: 
1:2bbfbcf:     private void startBrokers() throws Exception {
1:2bbfbcf:         startLocalBroker();
1:2bbfbcf:         startRemoteBroker();
1:2bbfbcf:     }
1:2bbfbcf: 
1:2bbfbcf:     private void startLocalBroker() throws Exception {
1:2bbfbcf:         localBroker.start();
1:2bbfbcf:         localBroker.waitUntilStarted();
1:2bbfbcf:     }
1:2bbfbcf: 
1:2bbfbcf:     private void startRemoteBroker() throws Exception {
1:2bbfbcf:         remoteBroker.start();
1:2bbfbcf:         remoteBroker.waitUntilStarted();
1:2bbfbcf:     }
1:2bbfbcf: 
1:2bbfbcf:     private void openConnections() throws JMSException {
1:2bbfbcf:         openLocalConnection();
1:2bbfbcf:         openRemoteConnection();
1:2bbfbcf:     }
1:2bbfbcf: 
1:2bbfbcf:     private void openLocalConnection() throws JMSException {
1:2bbfbcf:         localFactory = new ActiveMQConnectionFactory(localBroker.getVmConnectorURI());
1:2bbfbcf:         //localFactory.setSendAcksAsync(false);
1:2bbfbcf:         localConnection = localFactory.createConnection();
1:2bbfbcf:         localConnection.start();
1:2bbfbcf:         localSession = localConnection.createSession(false, Session.AUTO_ACKNOWLEDGE);
1:2bbfbcf:         consumer = localSession.createConsumer(localSession.createQueue("testqueue"));
1:2bbfbcf:     }
1:2bbfbcf: 
1:2bbfbcf:     private void openRemoteConnection() throws JMSException {
1:2bbfbcf:         remoteFactory = new ActiveMQConnectionFactory(remoteBroker.getVmConnectorURI());
1:2bbfbcf:         //remoteFactory.setSendAcksAsync(false);
1:2bbfbcf:         remoteConnection = remoteFactory.createConnection();
1:2bbfbcf:         remoteConnection.start();
1:2bbfbcf:         remoteSession = remoteConnection.createSession(false, Session.AUTO_ACKNOWLEDGE);
1:2bbfbcf:         producer = remoteSession.createProducer(remoteSession.createQueue("testqueue"));
1:2bbfbcf:     }
1:2bbfbcf: 
1:2bbfbcf:     private void closeConnections() throws JMSException {
1:2bbfbcf:         closeLocalConnection();
1:2bbfbcf:         closeRemoteConnection();
1:2bbfbcf:     }
1:2bbfbcf: 
1:2bbfbcf:     private void closeLocalConnection() throws JMSException {
1:2bbfbcf:         localConnection.close();
1:2bbfbcf:     }
1:2bbfbcf: 
1:2bbfbcf:     private void closeRemoteConnection() throws JMSException {
1:2bbfbcf:         remoteConnection.close();
1:2bbfbcf:     }
1:2bbfbcf: 
1:2bbfbcf:     private void stopBrokers() throws Exception {
1:2bbfbcf:         stopRemoteBroker();
1:2bbfbcf:         stopLocalBroker();
1:2bbfbcf:     }
1:2bbfbcf: 
1:2bbfbcf:     private void stopLocalBroker() throws Exception {
1:2bbfbcf:         localBroker.stop();
1:2bbfbcf:         localBroker.waitUntilStopped();
1:2bbfbcf:     }
1:2bbfbcf: 
1:2bbfbcf:     private void stopRemoteBroker() throws Exception {
1:2bbfbcf:         remoteBroker.stop();
1:2bbfbcf:         remoteBroker.waitUntilStopped();
1:2bbfbcf:     }
1:2bbfbcf: 
1:2bbfbcf:     private PersistenceAdapter persistanceAdapterFactory(String path) {
1:2bbfbcf:         if (useLevelDB) {
1:2bbfbcf:             return persistanceAdapterFactory_LevelDB(path);
1:2bbfbcf:         } else {
1:2bbfbcf:             return persistanceAdapterFactory_KahaDB(path);
1:2bbfbcf:         }
1:2bbfbcf:     }
1:2bbfbcf: 
1:2bbfbcf:     private PersistenceAdapter persistanceAdapterFactory_KahaDB(String path) {
1:2bbfbcf:         KahaDBPersistenceAdapter kahaDBPersistenceAdapter = new KahaDBPersistenceAdapter();
1:2bbfbcf:         kahaDBPersistenceAdapter.setDirectory(new File(path));
1:2bbfbcf:         kahaDBPersistenceAdapter.setIgnoreMissingJournalfiles(true);
1:2bbfbcf:         kahaDBPersistenceAdapter.setCheckForCorruptJournalFiles(true);
1:2bbfbcf:         kahaDBPersistenceAdapter.setChecksumJournalFiles(true);
1:2bbfbcf:         return kahaDBPersistenceAdapter;
1:2bbfbcf:     }
1:2bbfbcf: 
1:2bbfbcf:     private PersistenceAdapter persistanceAdapterFactory_LevelDB(String path) {
1:2bbfbcf:         LevelDBPersistenceAdapter levelDBPersistenceAdapter = new LevelDBPersistenceAdapter();
1:2bbfbcf:         levelDBPersistenceAdapter.setDirectory(new File(path));
1:2bbfbcf:         return levelDBPersistenceAdapter;
1:2bbfbcf:     }
1:2bbfbcf: 
1:2bbfbcf:     private class DebugTransportFactory extends NIOTransportFactory {
1:2bbfbcf: 
1:2bbfbcf:         @Override
1:2bbfbcf:         protected TcpTransportServer createTcpTransportServer(URI location, ServerSocketFactory serverSocketFactory)
1:2bbfbcf:                 throws IOException, URISyntaxException {
1:2bbfbcf:             return new DebugTransportServer(this, location, serverSocketFactory);
1:2bbfbcf:         }
1:2bbfbcf:     }
1:2bbfbcf: 
1:2bbfbcf:     private class DebugTransportServer extends TcpTransportServer {
1:2bbfbcf: 
1:2bbfbcf:         public DebugTransportServer(TcpTransportFactory transportFactory, URI location,
1:2bbfbcf:                                     ServerSocketFactory serverSocketFactory) throws IOException, URISyntaxException {
1:2bbfbcf:             super(transportFactory, location, serverSocketFactory);
1:2bbfbcf:         }
1:2bbfbcf: 
1:2bbfbcf:         @Override
1:2bbfbcf:         protected Transport createTransport(Socket socket, WireFormat format) throws IOException {
1:2bbfbcf:             Transport transport;
1:2bbfbcf:             transport = new NIOTransport(format, socket);
1:2bbfbcf:             debugTransportFilter = new DebugTransportFilter(transport);
1:2bbfbcf:             return debugTransportFilter;
1:2bbfbcf:         }
1:2bbfbcf:     }
1:2bbfbcf: 
1:2bbfbcf:     private class DebugTransportFilter extends TransportFilter {
1:2bbfbcf: 
1:2bbfbcf:         boolean closeOnResponse = false;
1:2bbfbcf: 
1:2bbfbcf:         public DebugTransportFilter(Transport next) {
1:2bbfbcf:             super(next);
1:2bbfbcf:         }
1:2bbfbcf: 
1:2bbfbcf:         @Override
1:2bbfbcf:         public void oneway(Object command) throws IOException {
1:2bbfbcf:             if (closeOnResponse && command instanceof Response) {
1:2bbfbcf:                 closeOnResponse = false;
1:2bbfbcf:                 log.warn("\n\nclosing connection before response is sent\n\n");
1:2bbfbcf:                 try {
1:2bbfbcf:                     ((NIOTransport) next).stop();
1:2bbfbcf:                 } catch (Exception ex) {
1:2bbfbcf:                     log.error("couldn't stop niotransport", ex);
1:2bbfbcf:                 }
1:2bbfbcf:                 // don't send response
1:2bbfbcf:                 return;
1:2bbfbcf:             }
1:2bbfbcf:             super.oneway(command);
1:2bbfbcf:         }
1:2bbfbcf:     }
1:2bbfbcf: }
============================================================================
author:rajdavies
-------------------------------------------------------------------------------
commit:2bbfbcf
/////////////////////////////////////////////////////////////////////////
1: /**
1:  * Licensed to the Apache Software Foundation (ASF) under one or more
1:  * contributor license agreements.  See the NOTICE file distributed with
1:  * this work for additional information regarding copyright ownership.
1:  * The ASF licenses this file to You under the Apache License, Version 2.0
1:  * (the "License"); you may not use this file except in compliance with
1:  * the License.  You may obtain a copy of the License at
1:  *
1:  *      http://www.apache.org/licenses/LICENSE-2.0
1:  *
1:  * Unless required by applicable law or agreed to in writing, software
1:  * distributed under the License is distributed on an "AS IS" BASIS,
1:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:  * See the License for the specific language governing permissions and
1:  * limitations under the License.
1:  */
1: package org.apache.activemq.network;
1: 
1: import java.io.File;
1: import java.io.IOException;
1: import java.net.Socket;
1: import java.net.URI;
1: import java.net.URISyntaxException;
1: import java.util.ArrayList;
1: import java.util.List;
1: 
1: import javax.jms.Connection;
1: import javax.jms.JMSException;
1: import javax.jms.Message;
1: import javax.jms.MessageConsumer;
1: import javax.jms.MessageProducer;
1: import javax.jms.Session;
1: import javax.jms.TextMessage;
1: import javax.net.ServerSocketFactory;
1: import org.apache.activemq.ActiveMQConnectionFactory;
1: import org.apache.activemq.broker.BrokerService;
1: import org.apache.activemq.broker.TransportConnector;
1: import org.apache.activemq.broker.jmx.ManagementContext;
1: import org.apache.activemq.command.Response;
1: import org.apache.activemq.store.PersistenceAdapter;
1: import org.apache.activemq.store.kahadb.KahaDBPersistenceAdapter;
1: import org.apache.activemq.store.leveldb.LevelDBPersistenceAdapter;
1: import org.apache.activemq.transport.Transport;
1: import org.apache.activemq.transport.TransportFilter;
1: import org.apache.activemq.transport.TransportServer;
1: import org.apache.activemq.transport.nio.NIOTransport;
1: import org.apache.activemq.transport.nio.NIOTransportFactory;
1: import org.apache.activemq.transport.tcp.TcpTransportFactory;
1: import org.apache.activemq.transport.tcp.TcpTransportServer;
1: import org.apache.activemq.wireformat.WireFormat;
1: import org.junit.After;
1: import org.junit.AfterClass;
1: import org.junit.Before;
1: import org.junit.BeforeClass;
1: import org.junit.Test;
1: import org.slf4j.Logger;
1: import org.slf4j.LoggerFactory;
1: import static org.junit.Assert.*;
1: 
1: /**
1:  *
1:  * @author x22koe
1:  */
1: public class CheckDuplicateMessagesOnDuplexTest {
1: 
1:     private static final Logger log = LoggerFactory.getLogger(CheckDuplicateMessagesOnDuplexTest.class);
1:     private BrokerService localBroker;
1:     private BrokerService remoteBroker;
1:     private ActiveMQConnectionFactory localFactory;
1:     private ActiveMQConnectionFactory remoteFactory;
1:     private Session localSession;
1:     private MessageConsumer consumer;
1:     private Session remoteSession;
1:     private MessageProducer producer;
1:     private Connection remoteConnection;
1:     private Connection localConnection;
1:     private DebugTransportFilter debugTransportFilter;
1:     private boolean useLevelDB = false;
1: 
1:     public CheckDuplicateMessagesOnDuplexTest() {
1:     }
1: 
1:     @BeforeClass
1:     public static void setUpClass() {
1:     }
1: 
1:     @AfterClass
1:     public static void tearDownClass() {
1:     }
1: 
1:     @Before
1:     public void setUp() {
1:     }
1: 
1:     @After
1:     public void tearDown() {
1:     }
1: 
1:     @Test
1:     public void testConnectionLossBehaviorBeforeAckIsSent() throws Exception {
1:         createBrokers();
1:         localBroker.deleteAllMessages();
1:         remoteBroker.deleteAllMessages();
1:         startBrokers();
1:         openConnections();
1: 
1:         Thread.sleep(1000);
1:         log.info("\n\n==============================================\nsend hello1\n");
1: 
1:         // simulate network failure between REMOTE and LOCAL just before the reception response is sent back to REMOTE
1:         debugTransportFilter.closeOnResponse = true;
1: 
1:         producer.send(remoteSession.createTextMessage("hello1"));
1:         Message msg = consumer.receive(30000);
1: 
1:         assertNotNull("expected hello1", msg);
1:         assertEquals("hello1", ((TextMessage) msg).getText());
1: 
1:         Thread.sleep(1000);
1:         log.info("\n\n------------------------------------------\nsend hello2\n");
1: 
1:         producer.send(remoteSession.createTextMessage("hello2"));
1:         msg = consumer.receive(30000);
1: 
1:         assertNotNull("expected hello2", msg);
1:         assertEquals("hello2", ((TextMessage) msg).getText());
1: 
1:         closeLocalConnection();
1: 
1:         Thread.sleep(1000);
1:         log.info("\n\n------------------------------------------\nsend hello3\n");
1: 
1:         openLocalConnection();
1: 
1:         Thread.sleep(1000);
1: 
1:         producer.send(remoteSession.createTextMessage("hello3"));
1:         msg = consumer.receive(30000);
1: 
1:         assertNotNull("expected hello3", msg);
1:         assertEquals("hello3", ((TextMessage) msg).getText());
1: 
1:         Thread.sleep(1000);
1:         log.info("\n\n==============================================\n\n");
1: 
1:         closeConnections();
1:         stopBrokers();
1: 
1:         // restart the local broker, which should be empty
1: 
1:         Thread.sleep(1000);
1:         log.info("\n\n##############################################\n\n");
1: 
1:         createLocalBroker();
1:         startLocalBroker();
1:         openLocalConnection();
1: 
1:         // this should not return the "hello1" message
1:         msg = consumer.receive(1000);
1: 
1:         closeLocalConnection();
1:         stopLocalBroker();
1: 
1:         assertNull(msg);
1:     }
1: 
1:     private void createBrokers() throws Exception {
1:         createLocalBroker();
1:         createRemoteBroker();
1:     }
1: 
1:     private void createLocalBroker() throws Exception {
1:         localBroker = new BrokerService();
1:         localBroker.setBrokerName("LOCAL");
1:         localBroker.setUseJmx(true);
1:         localBroker.setSchedulePeriodForDestinationPurge(5000);
1:         ManagementContext managementContext = new ManagementContext();
1:         managementContext.setCreateConnector(false);
1:         localBroker.setManagementContext(managementContext);
1:         PersistenceAdapter persistenceAdapter = persistanceAdapterFactory("target/local");
1:         localBroker.setPersistenceAdapter(persistenceAdapter);
1:         List<TransportConnector> transportConnectors = new ArrayList<TransportConnector>();
1:         DebugTransportFactory tf = new DebugTransportFactory();
1:         TransportServer transport = tf.doBind(URI.create("nio://127.0.0.1:23539"));
1:         TransportConnector transportConnector = new TransportConnector(transport);
1:         transportConnector.setName("tc");
1:         transportConnector.setAuditNetworkProducers(true);
1:         transportConnectors.add(transportConnector);
1:         localBroker.setTransportConnectors(transportConnectors);
1:     }
1: 
1:     private void createRemoteBroker() throws Exception {
1:         remoteBroker = new BrokerService();
1:         remoteBroker.setBrokerName("REMOTE");
1:         remoteBroker.setUseJmx(true);
1:         remoteBroker.setSchedulePeriodForDestinationPurge(5000);
1:         ManagementContext managementContext = new ManagementContext();
1:         managementContext.setCreateConnector(false);
1:         remoteBroker.setManagementContext(managementContext);
1:         PersistenceAdapter persistenceAdapter = persistanceAdapterFactory("target/remote");
1:         remoteBroker.setPersistenceAdapter(persistenceAdapter);
1:         List<NetworkConnector> networkConnectors = new ArrayList<NetworkConnector>();
1:         DiscoveryNetworkConnector networkConnector = new DiscoveryNetworkConnector();
1:         networkConnector.setName("to local");
1:         // set maxInactivityDuration to 0, otherwise the broker restarts while you are in the debugger
1:         networkConnector.setUri(URI.create("static://(tcp://127.0.0.1:23539?wireFormat.maxInactivityDuration=0)"));
1:         networkConnector.setDuplex(true);
1:         //networkConnector.setNetworkTTL(5);
1:         //networkConnector.setDynamicOnly(true);
1:         networkConnector.setAlwaysSyncSend(true);
1:         networkConnector.setDecreaseNetworkConsumerPriority(false);
1:         networkConnector.setPrefetchSize(1);
1:         networkConnector.setCheckDuplicateMessagesOnDuplex(true);
1:         networkConnectors.add(networkConnector);
1:         remoteBroker.setNetworkConnectors(networkConnectors);
1:     }
1: 
1:     private void startBrokers() throws Exception {
1:         startLocalBroker();
1:         startRemoteBroker();
1:     }
1: 
1:     private void startLocalBroker() throws Exception {
1:         localBroker.start();
1:         localBroker.waitUntilStarted();
1:     }
1: 
1:     private void startRemoteBroker() throws Exception {
1:         remoteBroker.start();
1:         remoteBroker.waitUntilStarted();
1:     }
1: 
1:     private void openConnections() throws JMSException {
1:         openLocalConnection();
1:         openRemoteConnection();
1:     }
1: 
1:     private void openLocalConnection() throws JMSException {
1:         localFactory = new ActiveMQConnectionFactory(localBroker.getVmConnectorURI());
1:         //localFactory.setSendAcksAsync(false);
1:         localConnection = localFactory.createConnection();
1:         localConnection.start();
1:         localSession = localConnection.createSession(false, Session.AUTO_ACKNOWLEDGE);
1:         consumer = localSession.createConsumer(localSession.createQueue("testqueue"));
1:     }
1: 
1:     private void openRemoteConnection() throws JMSException {
1:         remoteFactory = new ActiveMQConnectionFactory(remoteBroker.getVmConnectorURI());
1:         //remoteFactory.setSendAcksAsync(false);
1:         remoteConnection = remoteFactory.createConnection();
1:         remoteConnection.start();
1:         remoteSession = remoteConnection.createSession(false, Session.AUTO_ACKNOWLEDGE);
1:         producer = remoteSession.createProducer(remoteSession.createQueue("testqueue"));
1:     }
1: 
1:     private void closeConnections() throws JMSException {
1:         closeLocalConnection();
1:         closeRemoteConnection();
1:     }
1: 
1:     private void closeLocalConnection() throws JMSException {
1:         localConnection.close();
1:     }
1: 
1:     private void closeRemoteConnection() throws JMSException {
1:         remoteConnection.close();
1:     }
1: 
1:     private void stopBrokers() throws Exception {
1:         stopRemoteBroker();
1:         stopLocalBroker();
1:     }
1: 
1:     private void stopLocalBroker() throws Exception {
1:         localBroker.stop();
1:         localBroker.waitUntilStopped();
1:     }
1: 
1:     private void stopRemoteBroker() throws Exception {
1:         remoteBroker.stop();
1:         remoteBroker.waitUntilStopped();
1:     }
1: 
1:     private PersistenceAdapter persistanceAdapterFactory(String path) {
1:         if (useLevelDB) {
1:             return persistanceAdapterFactory_LevelDB(path);
1:         } else {
1:             return persistanceAdapterFactory_KahaDB(path);
1:         }
1:     }
1: 
1:     private PersistenceAdapter persistanceAdapterFactory_KahaDB(String path) {
1:         KahaDBPersistenceAdapter kahaDBPersistenceAdapter = new KahaDBPersistenceAdapter();
1:         kahaDBPersistenceAdapter.setDirectory(new File(path));
1:         kahaDBPersistenceAdapter.setIgnoreMissingJournalfiles(true);
1:         kahaDBPersistenceAdapter.setCheckForCorruptJournalFiles(true);
1:         kahaDBPersistenceAdapter.setChecksumJournalFiles(true);
1:         return kahaDBPersistenceAdapter;
1:     }
1: 
1:     private PersistenceAdapter persistanceAdapterFactory_LevelDB(String path) {
1:         LevelDBPersistenceAdapter levelDBPersistenceAdapter = new LevelDBPersistenceAdapter();
1:         levelDBPersistenceAdapter.setDirectory(new File(path));
1:         return levelDBPersistenceAdapter;
1:     }
1: 
1:     private class DebugTransportFactory extends NIOTransportFactory {
1: 
1:         @Override
1:         protected TcpTransportServer createTcpTransportServer(URI location, ServerSocketFactory serverSocketFactory)
1:                 throws IOException, URISyntaxException {
1:             return new DebugTransportServer(this, location, serverSocketFactory);
1:         }
1:     }
1: 
1:     private class DebugTransportServer extends TcpTransportServer {
1: 
1:         public DebugTransportServer(TcpTransportFactory transportFactory, URI location,
1:                                     ServerSocketFactory serverSocketFactory) throws IOException, URISyntaxException {
1:             super(transportFactory, location, serverSocketFactory);
1:         }
1: 
1:         @Override
1:         protected Transport createTransport(Socket socket, WireFormat format) throws IOException {
1:             Transport transport;
1:             transport = new NIOTransport(format, socket);
1:             debugTransportFilter = new DebugTransportFilter(transport);
1:             return debugTransportFilter;
1:         }
1:     }
1: 
1:     private class DebugTransportFilter extends TransportFilter {
1: 
1:         boolean closeOnResponse = false;
1: 
1:         public DebugTransportFilter(Transport next) {
1:             super(next);
1:         }
1: 
1:         @Override
1:         public void oneway(Object command) throws IOException {
1:             if (closeOnResponse && command instanceof Response) {
1:                 closeOnResponse = false;
1:                 log.warn("\n\nclosing connection before response is sent\n\n");
1:                 try {
1:                     ((NIOTransport) next).stop();
1:                 } catch (Exception ex) {
1:                     log.error("couldn't stop niotransport", ex);
1:                 }
1:                 // don't send response
1:                 return;
1:             }
1:             super.oneway(command);
1:         }
1:     }
1: }
============================================================================