1:10c6b29: /**
1:57b4941:  * Licensed to the Apache Software Foundation (ASF) under one or more
1:57b4941:  * contributor license agreements.  See the NOTICE file distributed with
1:57b4941:  * this work for additional information regarding copyright ownership.
1:57b4941:  * The ASF licenses this file to You under the Apache License, Version 2.0
1:57b4941:  * (the "License"); you may not use this file except in compliance with
1:57b4941:  * the License.  You may obtain a copy of the License at
2:5be5a62:  *
1:230a86c:  *      http://www.apache.org/licenses/LICENSE-2.0
1:5be5a62:  *
1:10c6b29:  * Unless required by applicable law or agreed to in writing, software
1:5be5a62:  * distributed under the License is distributed on an "AS IS" BASIS,
1:5be5a62:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:5be5a62:  * See the License for the specific language governing permissions and
1:5be5a62:  * limitations under the License.
1:5be5a62:  */
1:10c6b29: package org.apache.activemq.broker.policy;
2:10c6b29: 
1:74a7a8b: import javax.jms.Destination;
1:74a7a8b: import javax.jms.Message;
1:74a7a8b: 
1:be919fb: import javax.jms.Queue;
1:10c6b29: import org.apache.activemq.ActiveMQConnection;
1:10c6b29: import org.apache.activemq.ActiveMQConnectionFactory;
1:c8d74e7: import org.apache.activemq.RedeliveryPolicy;
1:10c6b29: import org.apache.activemq.command.ActiveMQQueue;
1:8bf987b: import org.slf4j.Logger;
1:8bf987b: import org.slf4j.LoggerFactory;
1:10c6b29: 
1:10c6b29: /**
1:0bbc0ac:  * 
1:5be5a62:  * 
1:10c6b29:  */
1:10c6b29: public class DeadLetterTest extends DeadLetterTestSupport {
1:8bf987b:     private static final Logger LOG = LoggerFactory.getLogger(DeadLetterTest.class);
1:10c6b29: 
1:1554954:     protected int rollbackCount;
1:10c6b29: 
1:10c6b29:     protected void doTest() throws Exception {
1:10c6b29:         connection.start();
1:10c6b29: 
1:10c6b29:         ActiveMQConnection amqConnection = (ActiveMQConnection) connection;
1:10c6b29:         rollbackCount = amqConnection.getRedeliveryPolicy().getMaximumRedeliveries() + 1;
1:933eb2f:         LOG.info("Will redeliver messages: " + rollbackCount + " times");
1:10c6b29: 
1:10c6b29:         makeConsumer();
1:10c6b29:         makeDlqConsumer();
1:10c6b29: 
1:10c6b29:         sendMessages();
1:10c6b29: 
1:10c6b29:         // now lets receive and rollback N times
1:10c6b29:         for (int i = 0; i < messageCount; i++) {
1:10c6b29:             consumeAndRollback(i);
1:10c6b29:         }
1:10c6b29: 
1:be919fb:         verifyIsDlq((Queue) dlqDestination);
1:10c6b29:         for (int i = 0; i < messageCount; i++) {
1:10c6b29:             Message msg = dlqConsumer.receive(1000);
1:10c6b29:             assertMessage(msg, i);
1:10c6b29:             assertNotNull("Should be a DLQ message for loop: " + i, msg);
1:10c6b29:         }
1:80f7e38:         session.commit();
1:10c6b29:     }
1:10c6b29: 
1:10c6b29:     protected void consumeAndRollback(int messageCounter) throws Exception {
1:10c6b29:         for (int i = 0; i < rollbackCount; i++) {
1:10c6b29:             Message message = consumer.receive(5000);
1:10c6b29:             assertNotNull("No message received for message: " + messageCounter + " and rollback loop: " + i, message);
1:10c6b29:             assertMessage(message, messageCounter);
1:10c6b29: 
1:10c6b29:             session.rollback();
1:10c6b29:         }
1:933eb2f:         LOG.info("Rolled back: " + rollbackCount + " times");
1:10c6b29:     }
1:10c6b29: 
1:10c6b29:     protected void setUp() throws Exception {
1:10c6b29:         transactedMode = true;
1:10c6b29:         super.setUp();
1:10c6b29:     }
1:10c6b29: 
1:10c6b29:     protected ActiveMQConnectionFactory createConnectionFactory() throws Exception {
1:10c6b29:         ActiveMQConnectionFactory answer = super.createConnectionFactory();
1:10c6b29:         RedeliveryPolicy policy = new RedeliveryPolicy();
1:10c6b29:         policy.setMaximumRedeliveries(3);
1:10c6b29:         policy.setBackOffMultiplier((short) 1);
1:10c6b29:         policy.setInitialRedeliveryDelay(10);
1:10c6b29:         policy.setUseExponentialBackOff(false);
1:10c6b29:         answer.setRedeliveryPolicy(policy);
1:10c6b29:         return answer;
1:10c6b29:     }
1:10c6b29: 
1:10c6b29:     protected Destination createDlqDestination() {
1:10c6b29:         return new ActiveMQQueue("ActiveMQ.DLQ");
1:10c6b29:     }
1:10c6b29: 
1:10c6b29: }
============================================================================
author:gtully
-------------------------------------------------------------------------------
commit:be919fb
/////////////////////////////////////////////////////////////////////////
1: import javax.jms.Queue;
/////////////////////////////////////////////////////////////////////////
1:         verifyIsDlq((Queue) dlqDestination);
author:Timothy A. Bish
-------------------------------------------------------------------------------
commit:ef24cc9
author:Hiram R. Chirino
-------------------------------------------------------------------------------
commit:0bbc0ac
/////////////////////////////////////////////////////////////////////////
1:  * 
commit:933eb2f
/////////////////////////////////////////////////////////////////////////
0: import org.apache.commons.logging.Log;
0: import org.apache.commons.logging.LogFactory;
0:     private static final Log LOG = LogFactory.getLog(DeadLetterTest.class);
/////////////////////////////////////////////////////////////////////////
1:         LOG.info("Will redeliver messages: " + rollbackCount + " times");
/////////////////////////////////////////////////////////////////////////
1:         LOG.info("Rolled back: " + rollbackCount + " times");
commit:74a7a8b
/////////////////////////////////////////////////////////////////////////
1: import javax.jms.Destination;
1: import javax.jms.Message;
1: 
commit:230a86c
/////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////
1:  *      http://www.apache.org/licenses/LICENSE-2.0
commit:57b4941
/////////////////////////////////////////////////////////////////////////
1:  * Licensed to the Apache Software Foundation (ASF) under one or more
1:  * contributor license agreements.  See the NOTICE file distributed with
1:  * this work for additional information regarding copyright ownership.
1:  * The ASF licenses this file to You under the Apache License, Version 2.0
1:  * (the "License"); you may not use this file except in compliance with
1:  * the License.  You may obtain a copy of the License at
commit:93dc39b
/////////////////////////////////////////////////////////////////////////
0:         log.info("Will redeliver messages: " + rollbackCount + " times");
/////////////////////////////////////////////////////////////////////////
0:         log.info("Rolled back: " + rollbackCount + " times");
commit:5be5a62
/////////////////////////////////////////////////////////////////////////
1:  *
0:  * Copyright 2005-2006 The Apache Software Foundation
1:  *
0:  * Licensed under the Apache License, Version 2.0 (the "License");
0:  * you may not use this file except in compliance with the License.
0:  * You may obtain a copy of the License at
1:  *
1:  *
1:  * distributed under the License is distributed on an "AS IS" BASIS,
1:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:  * See the License for the specific language governing permissions and
1:  * limitations under the License.
1:  */
author:Bosanac Dejan
-------------------------------------------------------------------------------
commit:8bf987b
/////////////////////////////////////////////////////////////////////////
1: import org.slf4j.Logger;
1: import org.slf4j.LoggerFactory;
1:     private static final Logger LOG = LoggerFactory.getLogger(DeadLetterTest.class);
commit:1554954
/////////////////////////////////////////////////////////////////////////
1:     protected int rollbackCount;
author:Gary Tully
-------------------------------------------------------------------------------
commit:80f7e38
/////////////////////////////////////////////////////////////////////////
1:         session.commit();
author:James Strachan
-------------------------------------------------------------------------------
commit:c8d74e7
/////////////////////////////////////////////////////////////////////////
1: import org.apache.activemq.RedeliveryPolicy;
commit:10c6b29
/////////////////////////////////////////////////////////////////////////
1: /**
0:  * 
0:  * Copyright 2005 LogicBlaze, Inc. http://www.logicblaze.com
0:  * 
0:  * Licensed under the Apache License, Version 2.0 (the "License"); 
0:  * you may not use this file except in compliance with the License. 
0:  * You may obtain a copy of the License at 
0:  * 
0:  * http://www.apache.org/licenses/LICENSE-2.0
0:  * 
1:  * Unless required by applicable law or agreed to in writing, software
0:  * distributed under the License is distributed on an "AS IS" BASIS, 
0:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. 
0:  * See the License for the specific language governing permissions and 
0:  * limitations under the License. 
0:  * 
0:  **/
1: package org.apache.activemq.broker.policy;
1: 
1: import org.apache.activemq.ActiveMQConnection;
1: import org.apache.activemq.ActiveMQConnectionFactory;
1: import org.apache.activemq.command.ActiveMQQueue;
0: import org.apache.activemq.command.RedeliveryPolicy;
1: 
0: import javax.jms.Destination;
0: import javax.jms.Message;
1: 
1: /**
0:  * 
0:  * @version $Revision$
1:  */
1: public class DeadLetterTest extends DeadLetterTestSupport {
1: 
0:     private int rollbackCount;
1: 
1:     protected void doTest() throws Exception {
1:         connection.start();
1: 
1:         ActiveMQConnection amqConnection = (ActiveMQConnection) connection;
1:         rollbackCount = amqConnection.getRedeliveryPolicy().getMaximumRedeliveries() + 1;
0:         System.out.println("Will redeliver messages: " + rollbackCount + " times");
1: 
1:         makeConsumer();
1:         makeDlqConsumer();
1: 
1:         sendMessages();
1: 
1:         // now lets receive and rollback N times
1:         for (int i = 0; i < messageCount; i++) {
1:             consumeAndRollback(i);
1:         }
1: 
1:         for (int i = 0; i < messageCount; i++) {
1:             Message msg = dlqConsumer.receive(1000);
1:             assertMessage(msg, i);
1:             assertNotNull("Should be a DLQ message for loop: " + i, msg);
1:         }
1:     }
1: 
1:     protected void consumeAndRollback(int messageCounter) throws Exception {
1:         for (int i = 0; i < rollbackCount; i++) {
1:             Message message = consumer.receive(5000);
1:             assertNotNull("No message received for message: " + messageCounter + " and rollback loop: " + i, message);
1:             assertMessage(message, messageCounter);
1: 
1:             session.rollback();
1:         }
0:         System.out.println("Rolled back: " + rollbackCount + " times");
1:     }
1: 
1:     protected void setUp() throws Exception {
1:         transactedMode = true;
1:         super.setUp();
1:     }
1: 
1:     protected ActiveMQConnectionFactory createConnectionFactory() throws Exception {
1:         ActiveMQConnectionFactory answer = super.createConnectionFactory();
1:         RedeliveryPolicy policy = new RedeliveryPolicy();
1:         policy.setMaximumRedeliveries(3);
1:         policy.setBackOffMultiplier((short) 1);
1:         policy.setInitialRedeliveryDelay(10);
1:         policy.setUseExponentialBackOff(false);
1:         answer.setRedeliveryPolicy(policy);
1:         return answer;
1:     }
1: 
1:     protected Destination createDlqDestination() {
1:         return new ActiveMQQueue("ActiveMQ.DLQ");
1:     }
1: 
1: }
============================================================================