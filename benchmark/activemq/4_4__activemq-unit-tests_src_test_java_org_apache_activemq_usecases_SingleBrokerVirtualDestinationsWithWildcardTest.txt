1:ab412fa: /**
1:ab412fa:  * Licensed to the Apache Software Foundation (ASF) under one or more
1:ab412fa:  * contributor license agreements.  See the NOTICE file distributed with
1:ab412fa:  * this work for additional information regarding copyright ownership.
1:ab412fa:  * The ASF licenses this file to You under the Apache License, Version 2.0
1:ab412fa:  * (the "License"); you may not use this file except in compliance with
1:ab412fa:  * the License.  You may obtain a copy of the License at
1:ab412fa:  *
1:ab412fa:  *      http://www.apache.org/licenses/LICENSE-2.0
1:ab412fa:  *
1:ab412fa:  * Unless required by applicable law or agreed to in writing, software
1:ab412fa:  * distributed under the License is distributed on an "AS IS" BASIS,
1:ab412fa:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:ab412fa:  * See the License for the specific language governing permissions and
1:ab412fa:  * limitations under the License.
1:ab412fa:  */
1:ab412fa: package org.apache.activemq.usecases;
1:ab412fa: 
1:ab412fa: import java.io.File;
1:ab412fa: import java.io.IOException;
1:ab412fa: import java.net.URI;
1:ab412fa: 
1:ab412fa: import javax.jms.MessageConsumer;
1:ab412fa: 
1:ab412fa: import org.apache.activemq.JmsMultipleBrokersTestSupport;
1:ab412fa: import org.apache.activemq.broker.BrokerService;
1:ab412fa: import org.apache.activemq.broker.region.DestinationInterceptor;
1:ab412fa: import org.apache.activemq.broker.region.virtual.VirtualDestination;
1:ab412fa: import org.apache.activemq.broker.region.virtual.VirtualDestinationInterceptor;
1:ab412fa: import org.apache.activemq.broker.region.virtual.VirtualTopic;
1:ab412fa: import org.apache.activemq.store.kahadb.KahaDBStore;
1:ab412fa: import org.apache.activemq.util.MessageIdList;
1:ab412fa: 
1:ab412fa: public class SingleBrokerVirtualDestinationsWithWildcardTest extends JmsMultipleBrokersTestSupport {
1:ab412fa: 
1:ab412fa:     /**
1:ab412fa:      * virtual destinations
1:ab412fa:      */
1:ab412fa:     public void testVirtualDestinations() throws Exception {
1:ab412fa:         startAllBrokers();
1:ab412fa: 
1:ab412fa:         sendReceive("local.test", true, "Consumer.a.local.test", false, 1, 1);
1:ab412fa:         sendReceive("global.test", true, "Consumer.a.global.test", false, 1, 1);
1:ab412fa: 
1:ab412fa:         destroyAllBrokers();
1:ab412fa:     }
1:ab412fa: 
1:ab412fa:     /**
1:ab412fa:      * virtual destinations with wild-card subscriptions (without individual virtual queue)
1:ab412fa:      */
1:ab412fa:     public void testVirtualDestinationsWithWildcardWithoutIndividualVirtualQueue() throws Exception {
1:ab412fa:         startAllBrokers();
1:ab412fa: 
2:ab412fa:         sendReceive("local.test.1", true, "Consumer.a.local.test.>", false, 1, 1);
2:ab412fa:         sendReceive("global.test.1", true, "Consumer.a.global.test.>", false, 1, 1);
1:ab412fa: 
1:ab412fa:         destroyAllBrokers();
1:ab412fa:     }
1:ab412fa: 
1:ab412fa:     /**
1:ab412fa:      * virtual destinations with wild-card subscriptions (with individual virtual queue)
1:ab412fa:      */
1:ab412fa:     public void testVirtualDestinationsWithWildcardWithIndividualVirtualQueue() throws Exception {
1:ab412fa:         startAllBrokers();
1:ab412fa: 
1:ab412fa:         sendReceive("local.test.1", true, "Consumer.a.local.test.1", false, 1, 1);
1:068b794:         sendReceive("local.test.1", true, "Consumer.a.local.test.>", false, 1, 2);
1:05c3112:         sendReceive("local.test.1.2", true, "Consumer.a.local.test.>", false, 1, 1);
1:ab412fa:         sendReceive("global.test.1", true, "Consumer.a.global.test.1", false, 1, 1);
1:068b794:         sendReceive("global.test.1", true, "Consumer.a.global.test.>", false, 1, 2);
1:05c3112:         sendReceive("global.test.1.2", true, "Consumer.a.global.test.>", false, 1, 1);
1:ab412fa: 
1:ab412fa:         destroyAllBrokers();
1:ab412fa:     }
1:ab412fa: 
1:ab412fa:     /**
1:ab412fa:      * virtual destinations with wild-card subscriptions (wit virtual queue pre-created)
1:ab412fa:      */
1:ab412fa:     public void testVirtualDestinationsWithWildcardWithVirtualQueuePreCreated() throws Exception {
1:ab412fa:         startAllBrokers();
1:ab412fa: 
1:ab412fa:         sendReceive("Consumer.a.local.test.>", false, "Consumer.a.local.test.>", false, 1, 1);
1:d17eceb:         sendReceive("local.test.1", true, "Consumer.a.local.test.>", false, 1, 1);
1:ab412fa:         sendReceive("Consumer.a.global.test.>", false, "Consumer.a.global.test.>", false, 1, 1);
1:d17eceb:         sendReceive("global.test.1", true, "Consumer.a.global.test.>", false, 1, 1);
1:ab412fa: 
1:ab412fa:         destroyAllBrokers();
1:ab412fa:     }
1:ab412fa: 
1:ab412fa:     public void sendReceive(String dest1, boolean topic1, String dest2, boolean topic2, int send, int expected) throws Exception{
1:ab412fa:         MessageConsumer client = createConsumer("BrokerA", createDestination(dest2, topic2));
1:ab412fa:         Thread.sleep(1000);
1:ab412fa:         sendMessages("BrokerA", createDestination(dest1, topic1), send);
1:ab412fa:         MessageIdList msgs = getConsumerMessages("BrokerA", client);
1:ab412fa:         msgs.setMaximumDuration(1000);
1:ab412fa:         assertEquals(expected, msgs.getMessageCount());
1:ab412fa:         client.close();
1:ab412fa:         Thread.sleep(500);
1:ab412fa:     }
1:ab412fa: 
1:4743a20:     @Override
1:ab412fa:     public void setUp() throws Exception {
1:ab412fa:         super.setAutoFail(true);
1:ab412fa:         super.setUp();
1:ab412fa:         String options = new String("?useJmx=false&deleteAllMessagesOnStartup=true");
1:ab412fa:         createAndConfigureBroker(new URI("broker:(tcp://localhost:61616)/BrokerA" + options));
1:ab412fa:     }
1:ab412fa: 
1:ab412fa:     private BrokerService createAndConfigureBroker(URI uri) throws Exception {
1:ab412fa:         BrokerService broker = createBroker(uri);
1:ab412fa: 
1:ab412fa:         configurePersistenceAdapter(broker);
1:ab412fa: 
1:ab412fa:         // make all topics virtual and consumers use the default prefix
1:ab412fa:         VirtualDestinationInterceptor virtualDestinationInterceptor = new VirtualDestinationInterceptor();
1:ab412fa:         virtualDestinationInterceptor.setVirtualDestinations(new VirtualDestination[]{new VirtualTopic()});
1:ab412fa:         DestinationInterceptor[] destinationInterceptors = new DestinationInterceptor[]{virtualDestinationInterceptor};
1:ab412fa:         broker.setDestinationInterceptors(destinationInterceptors);
1:ab412fa:         return broker;
1:ab412fa:     }
1:ab412fa: 
1:ab412fa:     protected void configurePersistenceAdapter(BrokerService broker) throws IOException {
1:ab412fa:         File dataFileDir = new File("target/test-amq-data/kahadb/" + broker.getBrokerName());
1:ab412fa:         KahaDBStore kaha = new KahaDBStore();
1:ab412fa:         kaha.setDirectory(dataFileDir);
1:ab412fa:         broker.setPersistenceAdapter(kaha);
1:ab412fa:     }
1:ab412fa: }
============================================================================
author:gtully
-------------------------------------------------------------------------------
commit:068b794
/////////////////////////////////////////////////////////////////////////
1:         sendReceive("local.test.1", true, "Consumer.a.local.test.>", false, 1, 2);
1:         sendReceive("global.test.1", true, "Consumer.a.global.test.>", false, 1, 2);
author:Dejan Bosanac
-------------------------------------------------------------------------------
commit:05c3112
/////////////////////////////////////////////////////////////////////////
1:         sendReceive("local.test.1.2", true, "Consumer.a.local.test.>", false, 1, 1);
1:         sendReceive("global.test.1.2", true, "Consumer.a.global.test.>", false, 1, 1);
author:Timothy A. Bish
-------------------------------------------------------------------------------
commit:4743a20
/////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////
1:     @Override
commit:ef24cc9
author:Bosanac Dejan
-------------------------------------------------------------------------------
commit:d17eceb
/////////////////////////////////////////////////////////////////////////
1:         sendReceive("local.test.1", true, "Consumer.a.local.test.>", false, 1, 1);
1:         sendReceive("global.test.1", true, "Consumer.a.global.test.>", false, 1, 1);
/////////////////////////////////////////////////////////////////////////
commit:ab412fa
/////////////////////////////////////////////////////////////////////////
1: /**
1:  * Licensed to the Apache Software Foundation (ASF) under one or more
1:  * contributor license agreements.  See the NOTICE file distributed with
1:  * this work for additional information regarding copyright ownership.
1:  * The ASF licenses this file to You under the Apache License, Version 2.0
1:  * (the "License"); you may not use this file except in compliance with
1:  * the License.  You may obtain a copy of the License at
1:  *
1:  *      http://www.apache.org/licenses/LICENSE-2.0
1:  *
1:  * Unless required by applicable law or agreed to in writing, software
1:  * distributed under the License is distributed on an "AS IS" BASIS,
1:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:  * See the License for the specific language governing permissions and
1:  * limitations under the License.
1:  */
1: package org.apache.activemq.usecases;
1: 
1: import java.io.File;
1: import java.io.IOException;
1: import java.net.URI;
1: 
0: import javax.jms.Destination;
1: import javax.jms.MessageConsumer;
1: 
1: import org.apache.activemq.JmsMultipleBrokersTestSupport;
1: import org.apache.activemq.broker.BrokerService;
1: import org.apache.activemq.broker.region.DestinationInterceptor;
1: import org.apache.activemq.broker.region.virtual.VirtualDestination;
1: import org.apache.activemq.broker.region.virtual.VirtualDestinationInterceptor;
1: import org.apache.activemq.broker.region.virtual.VirtualTopic;
0: import org.apache.activemq.command.ActiveMQDestination;
0: import org.apache.activemq.command.ActiveMQQueue;
0: import org.apache.activemq.network.NetworkConnector;
1: import org.apache.activemq.store.kahadb.KahaDBStore;
1: import org.apache.activemq.util.MessageIdList;
1: 
1: public class SingleBrokerVirtualDestinationsWithWildcardTest extends JmsMultipleBrokersTestSupport {
1: 
1:     /**
1:      * virtual destinations
1:      */
1:     public void testVirtualDestinations() throws Exception {
1:         startAllBrokers();
1: 
1:         sendReceive("local.test", true, "Consumer.a.local.test", false, 1, 1);
1:         sendReceive("global.test", true, "Consumer.a.global.test", false, 1, 1);
1: 
1:         destroyAllBrokers();
1:     }
1: 
1:     /**
1:      * virtual destinations with wild-card subscriptions (without individual virtual queue)
1:      */
1:     public void testVirtualDestinationsWithWildcardWithoutIndividualVirtualQueue() throws Exception {
1:         startAllBrokers();
1: 
1:         sendReceive("local.test.1", true, "Consumer.a.local.test.>", false, 1, 1);
1:         sendReceive("global.test.1", true, "Consumer.a.global.test.>", false, 1, 1);
1: 
1:         destroyAllBrokers();
1:     }
1: 
1:     /**
1:      * virtual destinations with wild-card subscriptions (with individual virtual queue)
1:      */
1:     public void testVirtualDestinationsWithWildcardWithIndividualVirtualQueue() throws Exception {
1:         startAllBrokers();
1: 
1:         sendReceive("local.test.1", true, "Consumer.a.local.test.1", false, 1, 1);
1:         sendReceive("local.test.1", true, "Consumer.a.local.test.>", false, 1, 1);
1:         sendReceive("global.test.1", true, "Consumer.a.global.test.1", false, 1, 1);
1:         sendReceive("global.test.1", true, "Consumer.a.global.test.>", false, 1, 1);
1: 
1:         destroyAllBrokers();
1:     }
1: 
1:     /**
1:      * virtual destinations with wild-card subscriptions (wit virtual queue pre-created)
1:      */
1:     public void testVirtualDestinationsWithWildcardWithVirtualQueuePreCreated() throws Exception {
1:         startAllBrokers();
1: 
1:         sendReceive("Consumer.a.local.test.>", false, "Consumer.a.local.test.>", false, 1, 1);
0:         sendReceive("local.test.1", true, "Consumer.a.local.test.>", false, 1, 2); // duplicates due to wildcard queue pre-created
1:         sendReceive("Consumer.a.global.test.>", false, "Consumer.a.global.test.>", false, 1, 1);
0:         sendReceive("global.test.1", true, "Consumer.a.global.test.>", false, 1, 2); // duplicates due to wildcard queue pre-created
1: 
1:         destroyAllBrokers();
1:     }
1: 
1:     public void sendReceive(String dest1, boolean topic1, String dest2, boolean topic2, int send, int expected) throws Exception{
1:         MessageConsumer client = createConsumer("BrokerA", createDestination(dest2, topic2));
1:         Thread.sleep(1000);
1:         sendMessages("BrokerA", createDestination(dest1, topic1), send);
1:         MessageIdList msgs = getConsumerMessages("BrokerA", client);
1:         msgs.setMaximumDuration(1000);
1:         assertEquals(expected, msgs.getMessageCount());
1:         client.close();
1:         Thread.sleep(500);
1:     }
1: 
1:     public void setUp() throws Exception {
1:         super.setAutoFail(true);
1:         super.setUp();
1:         String options = new String("?useJmx=false&deleteAllMessagesOnStartup=true");
1:         createAndConfigureBroker(new URI("broker:(tcp://localhost:61616)/BrokerA" + options));
1:     }
1: 
1:     private BrokerService createAndConfigureBroker(URI uri) throws Exception {
1:         BrokerService broker = createBroker(uri);
0:         // without this  testVirtualDestinationsWithWildcardWithoutIndividualVirtualQueue will fail
0:         broker.setDestinations(new ActiveMQDestination[] {new ActiveMQQueue("Consumer.a.local.test.1"), new ActiveMQQueue("Consumer.a.global.test.1")});
1: 
1:         configurePersistenceAdapter(broker);
1: 
1:         // make all topics virtual and consumers use the default prefix
1:         VirtualDestinationInterceptor virtualDestinationInterceptor = new VirtualDestinationInterceptor();
1:         virtualDestinationInterceptor.setVirtualDestinations(new VirtualDestination[]{new VirtualTopic()});
1:         DestinationInterceptor[] destinationInterceptors = new DestinationInterceptor[]{virtualDestinationInterceptor};
1:         broker.setDestinationInterceptors(destinationInterceptors);
1:         return broker;
1:     }
1: 
1:     protected void configurePersistenceAdapter(BrokerService broker) throws IOException {
1:         File dataFileDir = new File("target/test-amq-data/kahadb/" + broker.getBrokerName());
1:         KahaDBStore kaha = new KahaDBStore();
1:         kaha.setDirectory(dataFileDir);
1:         broker.setPersistenceAdapter(kaha);
1:     }
1: }
============================================================================