1:7d8ce02: /**
1:7d8ce02:  * Licensed to the Apache Software Foundation (ASF) under one or more
1:7d8ce02:  * contributor license agreements.  See the NOTICE file distributed with
1:7d8ce02:  * this work for additional information regarding copyright ownership.
1:7d8ce02:  * The ASF licenses this file to You under the Apache License, Version 2.0
1:7d8ce02:  * (the "License"); you may not use this file except in compliance with
1:7d8ce02:  * the License.  You may obtain a copy of the License at
1:7d8ce02:  *
1:7d8ce02:  *      http://www.apache.org/licenses/LICENSE-2.0
1:7d8ce02:  *
1:7d8ce02:  * Unless required by applicable law or agreed to in writing, software
1:7d8ce02:  * distributed under the License is distributed on an "AS IS" BASIS,
1:7d8ce02:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:7d8ce02:  * See the License for the specific language governing permissions and
1:7d8ce02:  * limitations under the License.
1:7d8ce02:  */
1:7d8ce02: package org.apache.activemq.transport.failover;
1:7d8ce02: 
1:7d8ce02: import static org.junit.Assert.assertEquals;
1:7d8ce02: import static org.junit.Assert.assertNotNull;
1:7d8ce02: import static org.junit.Assert.assertTrue;
1:7d8ce02: 
1:7d8ce02: import java.io.IOException;
1:7d8ce02: import java.net.URI;
1:7d8ce02: 
1:7d8ce02: import org.apache.activemq.broker.BrokerService;
1:db1506a: import org.apache.activemq.command.BrokerInfo;
1:db1506a: import org.apache.activemq.command.Command;
1:7d8ce02: import org.apache.activemq.transport.Transport;
1:7d8ce02: import org.apache.activemq.transport.TransportFactory;
1:7d8ce02: import org.apache.activemq.transport.TransportListener;
1:7d8ce02: import org.apache.activemq.util.Wait;
1:7d8ce02: import org.junit.After;
1:7d8ce02: import org.junit.Before;
1:7d8ce02: import org.junit.Test;
1:7d8ce02: import org.slf4j.Logger;
1:7d8ce02: import org.slf4j.LoggerFactory;
1:7d8ce02: 
1:7d8ce02: public class FailoverTransportBackupsTest {
1:7d8ce02: 
1:7d8ce02:     private static final Logger LOG = LoggerFactory.getLogger(FailoverTransportBackupsTest.class);
1:7d8ce02: 
1:7d8ce02:     protected Transport transport;
1:7d8ce02:     protected FailoverTransport failoverTransport;
1:7d8ce02:     private int transportInterruptions;
1:7d8ce02:     private int transportResumptions;
1:7d8ce02: 
1:7d8ce02:     BrokerService broker1;
1:7d8ce02:     BrokerService broker2;
1:7d8ce02:     BrokerService broker3;
1:7d8ce02: 
1:7d8ce02:     @Before
1:7d8ce02:     public void setUp() throws Exception {
1:7d8ce02:         broker1 = createBroker("1");
1:7d8ce02:         broker2 = createBroker("2");
1:7d8ce02:         broker3 = createBroker("3");
1:7d8ce02: 
1:7d8ce02:         broker1.start();
1:7d8ce02:         broker2.start();
1:7d8ce02:         broker3.start();
1:7d8ce02: 
1:7d8ce02:         broker1.waitUntilStarted();
1:7d8ce02:         broker2.waitUntilStarted();
1:7d8ce02:         broker3.waitUntilStarted();
1:7d8ce02: 
1:7d8ce02:         // Reset stats
1:7d8ce02:         transportInterruptions = 0;
1:7d8ce02:         transportResumptions = 0;
1:7d8ce02:     }
1:7d8ce02: 
1:7d8ce02:     @After
1:7d8ce02:     public void tearDown() throws Exception {
1:7d8ce02:         if (transport != null) {
1:7d8ce02:             transport.stop();
1:7d8ce02:         }
1:7d8ce02: 
1:7d8ce02:         broker1.stop();
1:7d8ce02:         broker1.waitUntilStopped();
1:7d8ce02:         broker2.stop();
1:7d8ce02:         broker2.waitUntilStopped();
1:7d8ce02:         broker3.stop();
1:7d8ce02:         broker3.waitUntilStopped();
1:7d8ce02:     }
1:7d8ce02: 
1:7d8ce02:     @Test
1:7d8ce02:     public void testBackupsAreCreated() throws Exception {
1:7d8ce02:         this.transport = createTransport(2);
1:7d8ce02:         assertNotNull(failoverTransport);
1:7d8ce02:         assertTrue(failoverTransport.isBackup());
1:7d8ce02:         assertEquals(2, failoverTransport.getBackupPoolSize());
1:7d8ce02: 
3:7d8ce02:         assertTrue("Timed out waiting for Backups to connect.", Wait.waitFor(new Wait.Condition(){
1:4743a20:             @Override
1:7d8ce02:             public boolean isSatisified() throws Exception {
1:7d8ce02:                 LOG.debug("Current Backup Count = " + failoverTransport.getCurrentBackups());
1:7d8ce02:                 return failoverTransport.getCurrentBackups() == 2;
1:7d8ce02:             }
1:7d8ce02:         }));
1:7d8ce02:     }
1:7d8ce02: 
1:7d8ce02:     @Test
1:7d8ce02:     public void testFailoverToBackups() throws Exception {
1:7d8ce02:         this.transport = createTransport(2);
1:7d8ce02:         assertNotNull(failoverTransport);
1:7d8ce02:         assertTrue(failoverTransport.isBackup());
1:7d8ce02:         assertEquals(2, failoverTransport.getBackupPoolSize());
1:7d8ce02: 
1:7d8ce02:         assertTrue("Timed out waiting for Backups to connect.", Wait.waitFor(new Wait.Condition(){
1:4743a20:             @Override
1:7d8ce02:             public boolean isSatisified() throws Exception {
1:7d8ce02:                 LOG.debug("Current Backup Count = " + failoverTransport.getCurrentBackups());
1:7d8ce02:                 return failoverTransport.getCurrentBackups() == 2;
1:7d8ce02:             }
1:7d8ce02:         }));
1:7d8ce02: 
1:db1506a:         assertEquals("conected to..", "1", currentBrokerInfo.getBrokerName());
1:7d8ce02:         broker1.stop();
1:7d8ce02: 
1:db1506a:         assertTrue("Timed out waiting for Backups to connect.", Wait.waitFor(new Wait.Condition() {
1:4743a20:             @Override
1:7d8ce02:             public boolean isSatisified() throws Exception {
1:7d8ce02:                 LOG.debug("Current Backup Count = " + failoverTransport.getCurrentBackups());
1:7d8ce02:                 return failoverTransport.getCurrentBackups() == 1;
1:7d8ce02:             }
1:7d8ce02:         }));
1:7d8ce02: 
1:7d8ce02:         assertTrue("Incorrect number of Transport interruptions", transportInterruptions >= 1);
1:7d8ce02:         assertTrue("Incorrect number of Transport resumptions", transportResumptions >= 1);
1:7d8ce02: 
1:db1506a:         assertEquals("conected to..", "2", currentBrokerInfo.getBrokerName());
1:7d8ce02:         broker2.stop();
1:7d8ce02: 
1:db1506a:         assertTrue("Timed out waiting for Backups to connect.", Wait.waitFor(new Wait.Condition() {
1:4743a20:             @Override
1:7d8ce02:             public boolean isSatisified() throws Exception {
1:7d8ce02:                 LOG.debug("Current Backup Count = " + failoverTransport.getCurrentBackups());
1:7d8ce02:                 return failoverTransport.getCurrentBackups() == 0;
1:7d8ce02:             }
1:7d8ce02:         }));
1:7d8ce02: 
1:7d8ce02:         assertTrue("Incorrect number of Transport interruptions", transportInterruptions >= 2);
1:7d8ce02:         assertTrue("Incorrect number of Transport resumptions", transportResumptions >= 2);
1:db1506a: 
1:db1506a:         assertEquals("conected to..", "3", currentBrokerInfo.getBrokerName());
1:7d8ce02:     }
1:7d8ce02: 
1:7d8ce02:     @Test
1:7d8ce02:     public void testBackupsRefilled() throws Exception {
1:7d8ce02:         this.transport = createTransport(1);
1:7d8ce02:         assertNotNull(failoverTransport);
1:7d8ce02:         assertTrue(failoverTransport.isBackup());
1:7d8ce02:         assertEquals(1, failoverTransport.getBackupPoolSize());
1:7d8ce02: 
1:7d8ce02:         assertTrue("Timed out waiting for Backups to connect.", Wait.waitFor(new Wait.Condition(){
1:4743a20:             @Override
1:7d8ce02:             public boolean isSatisified() throws Exception {
1:7d8ce02:                 LOG.debug("Current Backup Count = " + failoverTransport.getCurrentBackups());
1:7d8ce02:                 return failoverTransport.getCurrentBackups() == 1;
1:7d8ce02:             }
1:7d8ce02:         }));
1:7d8ce02: 
1:7d8ce02:         broker1.stop();
1:7d8ce02: 
1:7d8ce02:         assertTrue("Timed out waiting for Backups to connect.", Wait.waitFor(new Wait.Condition(){
1:4743a20:             @Override
1:7d8ce02:             public boolean isSatisified() throws Exception {
1:7d8ce02:                 LOG.debug("Current Backup Count = " + failoverTransport.getCurrentBackups());
1:7d8ce02:                 return failoverTransport.getCurrentBackups() == 1;
1:7d8ce02:             }
1:7d8ce02:         }));
1:7d8ce02: 
1:7d8ce02:         broker2.stop();
1:7d8ce02: 
1:7d8ce02:         assertTrue("Timed out waiting for Backups to connect.", Wait.waitFor(new Wait.Condition(){
1:4743a20:             @Override
1:7d8ce02:             public boolean isSatisified() throws Exception {
1:7d8ce02:                 LOG.debug("Current Backup Count = " + failoverTransport.getCurrentBackups());
1:7d8ce02:                 return failoverTransport.getCurrentBackups() == 0;
1:7d8ce02:             }
1:7d8ce02:         }));
1:7d8ce02:     }
1:7d8ce02: 
1:7d8ce02:     private BrokerService createBroker(String name) throws Exception {
1:7d8ce02:         BrokerService bs = new BrokerService();
1:7d8ce02:         bs.setBrokerName(name);
1:7d8ce02:         bs.setUseJmx(false);
1:7d8ce02:         bs.setPersistent(false);
1:7d8ce02:         bs.addConnector("tcp://localhost:0");
1:7d8ce02:         return bs;
1:7d8ce02:     }
1:7d8ce02: 
1:db1506a:     BrokerInfo currentBrokerInfo;
1:7d8ce02:     protected Transport createTransport(int backups) throws Exception {
1:7d8ce02:         String connectionUri = "failover://("+
1:7d8ce02:                                broker1.getTransportConnectors().get(0).getPublishableConnectString() + "," +
1:7d8ce02:                                broker2.getTransportConnectors().get(0).getPublishableConnectString() + "," +
1:7d8ce02:                                broker3.getTransportConnectors().get(0).getPublishableConnectString() + ")";
1:7d8ce02: 
1:7d8ce02:         if (backups > 0) {
1:7d8ce02:             connectionUri += "?randomize=false&backup=true&backupPoolSize=" + backups;
1:7d8ce02:         }
1:7d8ce02: 
1:7d8ce02:         Transport transport = TransportFactory.connect(new URI(connectionUri));
1:7d8ce02:         transport.setTransportListener(new TransportListener() {
1:7d8ce02: 
1:4743a20:             @Override
1:7d8ce02:             public void onCommand(Object command) {
1:7d8ce02:                 LOG.debug("Test Transport Listener received Command: " + command);
1:db1506a:                 if (command instanceof BrokerInfo) {
1:db1506a:                     currentBrokerInfo = (BrokerInfo) command;
1:db1506a:                     LOG.info("BrokerInfo: " + currentBrokerInfo);
1:db1506a:                 }
1:7d8ce02:             }
1:7d8ce02: 
1:4743a20:             @Override
1:7d8ce02:             public void onException(IOException error) {
1:7d8ce02:                 LOG.debug("Test Transport Listener received Exception: " + error);
1:7d8ce02:             }
1:7d8ce02: 
1:4743a20:             @Override
1:7d8ce02:             public void transportInterupted() {
1:7d8ce02:                 transportInterruptions++;
1:7d8ce02:                 LOG.debug("Test Transport Listener records transport Interrupted: " + transportInterruptions);
1:7d8ce02:             }
1:7d8ce02: 
1:4743a20:             @Override
1:7d8ce02:             public void transportResumed() {
1:7d8ce02:                 transportResumptions++;
1:7d8ce02:                 LOG.debug("Test Transport Listener records transport Resumed: " + transportResumptions);
1:7d8ce02:             }
1:7d8ce02:         });
1:7d8ce02:         transport.start();
1:7d8ce02: 
1:7d8ce02:         this.failoverTransport = transport.narrow(FailoverTransport.class);
1:7d8ce02: 
1:7d8ce02:         return transport;
1:7d8ce02:     }
1:7d8ce02: }
============================================================================
author:gtully
-------------------------------------------------------------------------------
commit:db1506a
/////////////////////////////////////////////////////////////////////////
1: import org.apache.activemq.command.BrokerInfo;
1: import org.apache.activemq.command.Command;
/////////////////////////////////////////////////////////////////////////
1:         assertEquals("conected to..", "1", currentBrokerInfo.getBrokerName());
1:         assertTrue("Timed out waiting for Backups to connect.", Wait.waitFor(new Wait.Condition() {
/////////////////////////////////////////////////////////////////////////
1:         assertEquals("conected to..", "2", currentBrokerInfo.getBrokerName());
1:         assertTrue("Timed out waiting for Backups to connect.", Wait.waitFor(new Wait.Condition() {
/////////////////////////////////////////////////////////////////////////
1: 
1:         assertEquals("conected to..", "3", currentBrokerInfo.getBrokerName());
/////////////////////////////////////////////////////////////////////////
1:     BrokerInfo currentBrokerInfo;
/////////////////////////////////////////////////////////////////////////
1:                 if (command instanceof BrokerInfo) {
1:                     currentBrokerInfo = (BrokerInfo) command;
1:                     LOG.info("BrokerInfo: " + currentBrokerInfo);
1:                 }
author:Timothy A. Bish
-------------------------------------------------------------------------------
commit:4743a20
/////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////
1:             @Override
/////////////////////////////////////////////////////////////////////////
1:             @Override
/////////////////////////////////////////////////////////////////////////
1:             @Override
/////////////////////////////////////////////////////////////////////////
1:             @Override
/////////////////////////////////////////////////////////////////////////
1:             @Override
/////////////////////////////////////////////////////////////////////////
1:             @Override
/////////////////////////////////////////////////////////////////////////
1:             @Override
/////////////////////////////////////////////////////////////////////////
1:             @Override
1:             @Override
1:             @Override
1:             @Override
commit:ef24cc9
commit:7d8ce02
/////////////////////////////////////////////////////////////////////////
1: /**
1:  * Licensed to the Apache Software Foundation (ASF) under one or more
1:  * contributor license agreements.  See the NOTICE file distributed with
1:  * this work for additional information regarding copyright ownership.
1:  * The ASF licenses this file to You under the Apache License, Version 2.0
1:  * (the "License"); you may not use this file except in compliance with
1:  * the License.  You may obtain a copy of the License at
1:  *
1:  *      http://www.apache.org/licenses/LICENSE-2.0
1:  *
1:  * Unless required by applicable law or agreed to in writing, software
1:  * distributed under the License is distributed on an "AS IS" BASIS,
1:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:  * See the License for the specific language governing permissions and
1:  * limitations under the License.
1:  */
1: package org.apache.activemq.transport.failover;
1: 
1: import static org.junit.Assert.assertEquals;
1: import static org.junit.Assert.assertNotNull;
1: import static org.junit.Assert.assertTrue;
1: 
1: import java.io.IOException;
1: import java.net.URI;
1: 
1: import org.apache.activemq.broker.BrokerService;
1: import org.apache.activemq.transport.Transport;
1: import org.apache.activemq.transport.TransportFactory;
1: import org.apache.activemq.transport.TransportListener;
1: import org.apache.activemq.util.Wait;
1: import org.junit.After;
1: import org.junit.Before;
1: import org.junit.Test;
1: import org.slf4j.Logger;
1: import org.slf4j.LoggerFactory;
1: 
1: public class FailoverTransportBackupsTest {
1: 
1:     private static final Logger LOG = LoggerFactory.getLogger(FailoverTransportBackupsTest.class);
1: 
1:     protected Transport transport;
1:     protected FailoverTransport failoverTransport;
0:     private int commandsReceived;
0:     private int exceptionReceived;
1:     private int transportInterruptions;
1:     private int transportResumptions;
1: 
1:     BrokerService broker1;
1:     BrokerService broker2;
1:     BrokerService broker3;
1: 
1:     @Before
1:     public void setUp() throws Exception {
1:         broker1 = createBroker("1");
1:         broker2 = createBroker("2");
1:         broker3 = createBroker("3");
1: 
1:         broker1.start();
1:         broker2.start();
1:         broker3.start();
1: 
1:         broker1.waitUntilStarted();
1:         broker2.waitUntilStarted();
1:         broker3.waitUntilStarted();
1: 
1:         // Reset stats
0:         commandsReceived = 0;
0:         exceptionReceived = 0;
1:         transportInterruptions = 0;
1:         transportResumptions = 0;
1:     }
1: 
1:     @After
1:     public void tearDown() throws Exception {
1:         if (transport != null) {
1:             transport.stop();
1:         }
1: 
1:         broker1.stop();
1:         broker1.waitUntilStopped();
1:         broker2.stop();
1:         broker2.waitUntilStopped();
1:         broker3.stop();
1:         broker3.waitUntilStopped();
1:     }
1: 
1:     @Test
1:     public void testBackupsAreCreated() throws Exception {
1:         this.transport = createTransport(2);
1:         assertNotNull(failoverTransport);
1:         assertTrue(failoverTransport.isBackup());
1:         assertEquals(2, failoverTransport.getBackupPoolSize());
1: 
1:         assertTrue("Timed out waiting for Backups to connect.", Wait.waitFor(new Wait.Condition(){
1:             public boolean isSatisified() throws Exception {
1:                 LOG.debug("Current Backup Count = " + failoverTransport.getCurrentBackups());
1:                 return failoverTransport.getCurrentBackups() == 2;
1:             }
1:         }));
1:     }
1: 
1:     @Test
1:     public void testFailoverToBackups() throws Exception {
1:         this.transport = createTransport(2);
1:         assertNotNull(failoverTransport);
1:         assertTrue(failoverTransport.isBackup());
1:         assertEquals(2, failoverTransport.getBackupPoolSize());
1: 
1:         assertTrue("Timed out waiting for Backups to connect.", Wait.waitFor(new Wait.Condition(){
1:             public boolean isSatisified() throws Exception {
1:                 LOG.debug("Current Backup Count = " + failoverTransport.getCurrentBackups());
1:                 return failoverTransport.getCurrentBackups() == 2;
1:             }
1:         }));
1: 
1:         broker1.stop();
1: 
1:         assertTrue("Timed out waiting for Backups to connect.", Wait.waitFor(new Wait.Condition(){
1:             public boolean isSatisified() throws Exception {
1:                 LOG.debug("Current Backup Count = " + failoverTransport.getCurrentBackups());
1:                 return failoverTransport.getCurrentBackups() == 1;
1:             }
1:         }));
1: 
1:         assertTrue("Incorrect number of Transport interruptions", transportInterruptions >= 1);
1:         assertTrue("Incorrect number of Transport resumptions", transportResumptions >= 1);
1: 
1:         broker2.stop();
1: 
1:         assertTrue("Timed out waiting for Backups to connect.", Wait.waitFor(new Wait.Condition(){
1:             public boolean isSatisified() throws Exception {
1:                 LOG.debug("Current Backup Count = " + failoverTransport.getCurrentBackups());
1:                 return failoverTransport.getCurrentBackups() == 0;
1:             }
1:         }));
1: 
1:         assertTrue("Incorrect number of Transport interruptions", transportInterruptions >= 2);
1:         assertTrue("Incorrect number of Transport resumptions", transportResumptions >= 2);
1:     }
1: 
1:     @Test
1:     public void testBackupsRefilled() throws Exception {
1:         this.transport = createTransport(1);
1:         assertNotNull(failoverTransport);
1:         assertTrue(failoverTransport.isBackup());
1:         assertEquals(1, failoverTransport.getBackupPoolSize());
1: 
1:         assertTrue("Timed out waiting for Backups to connect.", Wait.waitFor(new Wait.Condition(){
1:             public boolean isSatisified() throws Exception {
1:                 LOG.debug("Current Backup Count = " + failoverTransport.getCurrentBackups());
1:                 return failoverTransport.getCurrentBackups() == 1;
1:             }
1:         }));
1: 
1:         broker1.stop();
1: 
1:         assertTrue("Timed out waiting for Backups to connect.", Wait.waitFor(new Wait.Condition(){
1:             public boolean isSatisified() throws Exception {
1:                 LOG.debug("Current Backup Count = " + failoverTransport.getCurrentBackups());
1:                 return failoverTransport.getCurrentBackups() == 1;
1:             }
1:         }));
1: 
1:         broker2.stop();
1: 
1:         assertTrue("Timed out waiting for Backups to connect.", Wait.waitFor(new Wait.Condition(){
1:             public boolean isSatisified() throws Exception {
1:                 LOG.debug("Current Backup Count = " + failoverTransport.getCurrentBackups());
1:                 return failoverTransport.getCurrentBackups() == 0;
1:             }
1:         }));
1:     }
1: 
1:     private BrokerService createBroker(String name) throws Exception {
1:         BrokerService bs = new BrokerService();
1:         bs.setBrokerName(name);
1:         bs.setUseJmx(false);
1:         bs.setPersistent(false);
1:         bs.addConnector("tcp://localhost:0");
1:         return bs;
1:     }
1: 
1:     protected Transport createTransport(int backups) throws Exception {
1:         String connectionUri = "failover://("+
1:                                broker1.getTransportConnectors().get(0).getPublishableConnectString() + "," +
1:                                broker2.getTransportConnectors().get(0).getPublishableConnectString() + "," +
1:                                broker3.getTransportConnectors().get(0).getPublishableConnectString() + ")";
1: 
1:         if (backups > 0) {
1:             connectionUri += "?randomize=false&backup=true&backupPoolSize=" + backups;
1:         }
1: 
1:         Transport transport = TransportFactory.connect(new URI(connectionUri));
1:         transport.setTransportListener(new TransportListener() {
1: 
1:             public void onCommand(Object command) {
1:                 LOG.debug("Test Transport Listener received Command: " + command);
0:                 commandsReceived++;
1:             }
1: 
1:             public void onException(IOException error) {
1:                 LOG.debug("Test Transport Listener received Exception: " + error);
0:                 exceptionReceived++;
1:             }
1: 
1:             public void transportInterupted() {
1:                 transportInterruptions++;
1:                 LOG.debug("Test Transport Listener records transport Interrupted: " + transportInterruptions);
1:             }
1: 
1:             public void transportResumed() {
1:                 transportResumptions++;
1:                 LOG.debug("Test Transport Listener records transport Resumed: " + transportResumptions);
1:             }
1:         });
1:         transport.start();
1: 
1:         this.failoverTransport = transport.narrow(FailoverTransport.class);
1: 
1:         return transport;
1:     }
1: }
============================================================================