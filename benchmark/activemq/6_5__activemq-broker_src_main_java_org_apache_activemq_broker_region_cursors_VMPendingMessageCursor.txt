1:7d1e6bc: /**
1:fc00993:  * Licensed to the Apache Software Foundation (ASF) under one or more
1:fc00993:  * contributor license agreements.  See the NOTICE file distributed with
1:fc00993:  * this work for additional information regarding copyright ownership.
1:fc00993:  * The ASF licenses this file to You under the Apache License, Version 2.0
1:fc00993:  * (the "License"); you may not use this file except in compliance with
1:fc00993:  * the License.  You may obtain a copy of the License at
2:fc00993:  *
1:fc00993:  *      http://www.apache.org/licenses/LICENSE-2.0
1:0bbc0ac:  *
1:fc00993:  * Unless required by applicable law or agreed to in writing, software
1:fc00993:  * distributed under the License is distributed on an "AS IS" BASIS,
1:fc00993:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:fc00993:  * See the License for the specific language governing permissions and
1:fc00993:  * limitations under the License.
1:7d1e6bc:  */
1:7d1e6bc: package org.apache.activemq.broker.region.cursors;
1:230a86c: 
1:ae7de6c: import java.util.ArrayList;
1:7d1e6bc: import java.util.Iterator;
1:7d1e6bc: import java.util.LinkedList;
1:ae7de6c: import java.util.List;
1:734fb7d: 
1:ae7de6c: import org.apache.activemq.broker.ConnectionContext;
1:ae7de6c: import org.apache.activemq.broker.region.Destination;
1:7d1e6bc: import org.apache.activemq.broker.region.MessageReference;
1:5bd3bf6: import org.apache.activemq.broker.region.QueueMessageReference;
1:ae7de6c: 
1:7d1e6bc: /**
1:230a86c:  * hold pending messages in a linked list (messages awaiting disptach to a
1:230a86c:  * consumer) cursor
1:734fb7d:  *
1:734fb7d:  *
1:7d1e6bc:  */
1:230a86c: public class VMPendingMessageCursor extends AbstractPendingMessageCursor {
1:00879cf:     private final PendingList list;
1:230a86c:     private Iterator<MessageReference> iter;
1:734fb7d: 
1:00879cf:     public VMPendingMessageCursor(boolean prioritizedMessages) {
1:00879cf:         super(prioritizedMessages);
1:00879cf:         if (this.prioritizedMessages) {
1:00879cf:             this.list= new PrioritizedPendingList();
1:00879cf:         }else {
1:00879cf:             this.list = new OrderedPendingList();
1:489f5aa:         }
1:00879cf:     }
1:734fb7d: 
1:ae7de6c: 
1:734fb7d:     @Override
1:ac0462a:     public synchronized List<MessageReference> remove(ConnectionContext context, Destination destination)
1:ac0462a:             throws Exception {
1:ae7de6c:         List<MessageReference> rc = new ArrayList<MessageReference>();
1:b02c06f:         for (Iterator<MessageReference> iterator = list.iterator(); iterator.hasNext();) {
1:b02c06f:             MessageReference r = iterator.next();
1:ac0462a:             if (r.getRegionDestination() == destination) {
1:b02c06f:                 r.decrementReferenceCount();
1:ae7de6c:                 rc.add(r);
1:b02c06f:                 iterator.remove();
1:ae7de6c:             }
1:ae7de6c:         }
1:ac0462a:         return rc;
1:ae7de6c:     }
1:ae7de6c: 
1:0c0be94:     /**
1:7d1e6bc:      * @return true if there are no pending messages
1:7d1e6bc:      */
1:734fb7d: 
1:734fb7d:     @Override
1:d56371f:     public synchronized boolean isEmpty() {
1:b732d3d:         if (list.isEmpty()) {
1:b732d3d:             return true;
1:b732d3d:         } else {
1:b732d3d:             for (Iterator<MessageReference> iterator = list.iterator(); iterator.hasNext();) {
1:b732d3d:                 MessageReference node = iterator.next();
1:ac0462a:                 if (node == QueueMessageReference.NULL_MESSAGE) {
1:ac0462a:                     continue;
1:f2fc864:                 }
1:b732d3d:                 if (!node.isDropped()) {
1:b732d3d:                     return false;
1:b732d3d:                 }
1:b732d3d:                 // We can remove dropped references.
1:b732d3d:                 iterator.remove();
1:b732d3d:             }
1:b732d3d:             return true;
1:b732d3d:         }
1:5bd3bf6:     }
1:230a86c: 
1:7d1e6bc:     /**
1:7d1e6bc:      * reset the cursor
1:7d1e6bc:      */
1:734fb7d: 
1:734fb7d:     @Override
1:d56371f:     public synchronized void reset() {
1:00879cf:         iter = list.iterator();
1:230a86c:         last = null;
1:6895d00:     }
1:230a86c: 
1:7d1e6bc:     /**
1:7d1e6bc:      * add message to await dispatch
1:734fb7d:      *
1:7d1e6bc:      * @param node
1:7d1e6bc:      */
1:734fb7d: 
1:734fb7d:     @Override
1:cc6213e:     public synchronized boolean tryAddMessageLast(MessageReference node, long maxWait) {
1:230a86c:         node.incrementReferenceCount();
1:00879cf:         list.addMessageLast(node);
1:54e2e3b:         return true;
5:7d1e6bc:     }
1:734fb7d: 
1:7d1e6bc:     /**
1:7d1e6bc:      * add message to await dispatch
1:734fb7d:      *
1:7d1e6bc:      * @param node
1:7d1e6bc:      */
1:230a86c: 
1:734fb7d:     @Override
1:d56371f:     public synchronized void addMessageFirst(MessageReference node) {
1:230a86c:         node.incrementReferenceCount();
1:00879cf:         list.addMessageFirst(node);
1:7d1e6bc:     }
1:230a86c: 
1:7d1e6bc:     /**
1:7d1e6bc:      * @return true if there pending messages to dispatch
1:7d1e6bc:      */
1:734fb7d: 
1:734fb7d:     @Override
1:d56371f:     public synchronized boolean hasNext() {
1:230a86c:         return iter.hasNext();
1:7d1e6bc:     }
1:489f5aa: 
1:7d1e6bc:     /**
1:7d1e6bc:      * @return the next pending message
1:7d1e6bc:      */
1:734fb7d: 
1:734fb7d:     @Override
1:d56371f:     public synchronized MessageReference next() {
1:ac0462a:         last = iter.next();
1:5619cd0:         if (last != null) {
1:5619cd0:             last.incrementReferenceCount();
1:5619cd0:         }
1:230a86c:         return last;
1:7d1e6bc:     }
1:00879cf: 
1:7d1e6bc:     /**
1:7d1e6bc:      * remove the message at the cursor position
1:7d1e6bc:      */
1:734fb7d: 
1:734fb7d:     @Override
1:d56371f:     public synchronized void remove() {
1:230a86c:         if (last != null) {
1:230a86c:             last.decrementReferenceCount();
1:230a86c:         }
1:7d1e6bc:         iter.remove();
1:7d1e6bc:     }
1:00879cf: 
1:7d1e6bc:     /**
1:7d1e6bc:      * @return the number of pending messages
1:7d1e6bc:      */
1:734fb7d: 
1:734fb7d:     @Override
1:d56371f:     public synchronized int size() {
1:7d1e6bc:         return list.size();
1:7d1e6bc:     }
1:230a86c: 
1:734fb7d:     @Override
1:734fb7d:     public synchronized long messageSize() {
1:734fb7d:         return list.messageSize();
1:734fb7d:     }
1:734fb7d: 
1:7d1e6bc:     /**
1:7d1e6bc:      * clear all pending messages
1:7d1e6bc:      */
1:734fb7d: 
1:734fb7d:     @Override
1:d56371f:     public synchronized void clear() {
1:230a86c:         for (Iterator<MessageReference> i = list.iterator(); i.hasNext();) {
1:230a86c:             MessageReference ref = i.next();
1:230a86c:             ref.decrementReferenceCount();
1:ac0462a:         }
1:7d1e6bc:         list.clear();
1:f6972ec:     }
1:734fb7d: 
1:230a86c: 
1:734fb7d:     @Override
1:d56371f:     public synchronized void remove(MessageReference node) {
1:00879cf:         list.remove(node);
1:00879cf:         node.decrementReferenceCount();
1:6895d00:     }
1:00879cf: 
1:7d1e6bc:     /**
1:0c0be94:      * Page in a restricted number of messages
1:734fb7d:      *
1:0c0be94:      * @param maxItems
1:0c0be94:      * @return a list of paged in messages
1:0c0be94:      */
1:734fb7d: 
1:734fb7d:     @Override
1:489f5aa:     public LinkedList<MessageReference> pageInList(int maxItems) {
1:156a609:         LinkedList<MessageReference> result = new LinkedList<MessageReference>();
1:00879cf:         for (Iterator<MessageReference>i = list.iterator();i.hasNext();) {
1:00879cf:             MessageReference ref = i.next();
1:156a609:             ref.incrementReferenceCount();
1:156a609:             result.add(ref);
1:156a609:             if (result.size() >= maxItems) {
1:156a609:                 break;
1:156a609:             }
1:156a609:         }
1:156a609:         return result;
1:0c0be94:     }
1:734fb7d: 
1:00879cf: 
1:734fb7d:     @Override
1:36486fe:     public boolean isTransient() {
1:36486fe:         return true;
1:36486fe:     }
1:734fb7d: 
1:00879cf: 
1:734fb7d:     @Override
1:ac0462a:     public void destroy() throws Exception {
1:ac0462a:         super.destroy();
1:ac0462a:         clear();
1:ac0462a:     }
1:6895d00: }
============================================================================
author:Hadrian Zbarcea
-------------------------------------------------------------------------------
commit:d54d046
author:Christopher L. Shannon (cshannon)
-------------------------------------------------------------------------------
commit:cc6213e
/////////////////////////////////////////////////////////////////////////
1:     public synchronized boolean tryAddMessageLast(MessageReference node, long maxWait) {
commit:734fb7d
/////////////////////////////////////////////////////////////////////////
1: 
/////////////////////////////////////////////////////////////////////////
1:  *
1:  *
1: 
/////////////////////////////////////////////////////////////////////////
1: 
1:     @Override
/////////////////////////////////////////////////////////////////////////
1: 
1:     @Override
/////////////////////////////////////////////////////////////////////////
1: 
1:     @Override
/////////////////////////////////////////////////////////////////////////
1:      *
1: 
1:     @Override
/////////////////////////////////////////////////////////////////////////
1:      *
1: 
1:     @Override
/////////////////////////////////////////////////////////////////////////
1: 
1:     @Override
/////////////////////////////////////////////////////////////////////////
1: 
1:     @Override
/////////////////////////////////////////////////////////////////////////
1: 
1:     @Override
/////////////////////////////////////////////////////////////////////////
1: 
1:     @Override
1:     @Override
1:     public synchronized long messageSize() {
1:         return list.messageSize();
1:     }
1: 
1: 
1:     @Override
/////////////////////////////////////////////////////////////////////////
1: 
1:     @Override
/////////////////////////////////////////////////////////////////////////
1:      *
1: 
1:     @Override
/////////////////////////////////////////////////////////////////////////
1: 
1:     @Override
1: 
1:     @Override
author:gtully
-------------------------------------------------------------------------------
commit:54e2e3b
/////////////////////////////////////////////////////////////////////////
0:     public synchronized boolean addMessageLast(MessageReference node) {
1:         return true;
author:Hiram R. Chirino
-------------------------------------------------------------------------------
commit:58aca86
commit:0bbc0ac
/////////////////////////////////////////////////////////////////////////
1:  * 
commit:b02c06f
/////////////////////////////////////////////////////////////////////////
1:         for (Iterator<MessageReference> iterator = list.iterator(); iterator.hasNext();) {
1:             MessageReference r = iterator.next();
1:                 r.decrementReferenceCount();
1:                 iterator.remove();
commit:ae7de6c
/////////////////////////////////////////////////////////////////////////
1: import java.util.ArrayList;
1: import java.util.List;
1: 
1: import org.apache.activemq.broker.ConnectionContext;
1: import org.apache.activemq.broker.region.Destination;
/////////////////////////////////////////////////////////////////////////
1:     
0:     @Override
0:     public List<MessageReference> remove(ConnectionContext context, Destination destination) throws Exception {
1:         List<MessageReference> rc = new ArrayList<MessageReference>();
0:         for (MessageReference r : list) {
0:             if( r.getRegionDestination()==destination ) {
1:                 rc.add(r);
1:             }
1:         }
0:         return rc ;        
1:     }
1:     
commit:b732d3d
/////////////////////////////////////////////////////////////////////////
1:         if (list.isEmpty()) {
1:             return true;
1:         } else {
1:             for (Iterator<MessageReference> iterator = list.iterator(); iterator.hasNext();) {
1:                 MessageReference node = iterator.next();
1:                 if (!node.isDropped()) {
1:                     return false;
1:                 }
1:                 // We can remove dropped references.
1:                 iterator.remove();
1:             }
1:             return true;
1:         }
commit:fc00993
/////////////////////////////////////////////////////////////////////////
1:  * Licensed to the Apache Software Foundation (ASF) under one or more
1:  * contributor license agreements.  See the NOTICE file distributed with
1:  * this work for additional information regarding copyright ownership.
1:  * The ASF licenses this file to You under the Apache License, Version 2.0
1:  * (the "License"); you may not use this file except in compliance with
1:  * the License.  You may obtain a copy of the License at
1:  *
1:  *      http://www.apache.org/licenses/LICENSE-2.0
1:  *
1:  * Unless required by applicable law or agreed to in writing, software
1:  * distributed under the License is distributed on an "AS IS" BASIS,
1:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:  * See the License for the specific language governing permissions and
1:  * limitations under the License.
commit:230a86c
/////////////////////////////////////////////////////////////////////////
1: 
1: 
1:  * hold pending messages in a linked list (messages awaiting disptach to a
1:  * consumer) cursor
1: public class VMPendingMessageCursor extends AbstractPendingMessageCursor {
1:     private Iterator<MessageReference> iter;
1: 
0:     public boolean isEmpty() {
0:     public void reset() {
1:         last = null;
1: 
0:     public void addMessageLast(MessageReference node) {
1:         node.incrementReferenceCount();
1: 
0:      * 
0:      * @param position
0:     public void addMessageFirst(MessageReference node) {
1:         node.incrementReferenceCount();
0:     public boolean hasNext() {
1:         return iter.hasNext();
0:     public MessageReference next() {
0:         last = (MessageReference)iter.next();
1:         return last;
0:     public void remove() {
1:         if (last != null) {
1:             last.decrementReferenceCount();
1:         }
0:     public int size() {
0:     public void clear() {
1: 
0:     public void remove(MessageReference node) {
1:         for (Iterator<MessageReference> i = list.iterator(); i.hasNext();) {
1:             MessageReference ref = i.next();
0:             if (node.getMessageId().equals(ref.getMessageId())) {
1:                 ref.decrementReferenceCount();
1: 
0:      * 
commit:489f5aa
/////////////////////////////////////////////////////////////////////////
0:     private LinkedList<MessageReference> list = new LinkedList<MessageReference>();
0:     private Iterator<MessageReference> iter = null;
0:     private MessageReference last;
1:     
/////////////////////////////////////////////////////////////////////////
0:         last=null;
/////////////////////////////////////////////////////////////////////////
0:     	node.incrementReferenceCount();
/////////////////////////////////////////////////////////////////////////
0:     	node.incrementReferenceCount();
/////////////////////////////////////////////////////////////////////////
0:     	last = (MessageReference) iter.next();
0:     	return last;
/////////////////////////////////////////////////////////////////////////
0:     	if( last!=null ) {
0:     		last.decrementReferenceCount();
1:     	}
/////////////////////////////////////////////////////////////////////////
0:         for(Iterator<MessageReference> i=list.iterator();i.hasNext();){
0:             MessageReference ref=i.next();
0:             	ref.decrementReferenceCount();
/////////////////////////////////////////////////////////////////////////
1:     public LinkedList<MessageReference> pageInList(int maxItems) {
author:Gary Tully
-------------------------------------------------------------------------------
commit:aad7e73
/////////////////////////////////////////////////////////////////////////
commit:156a609
/////////////////////////////////////////////////////////////////////////
1:         LinkedList<MessageReference> result = new LinkedList<MessageReference>();
0:         for (MessageReference ref: list) {
1:             ref.incrementReferenceCount();
1:             result.add(ref);
1:             if (result.size() >= maxItems) {
1:                 break;
1:             }
1:         }
1:         return result;
commit:5619cd0
/////////////////////////////////////////////////////////////////////////
1:         if (last != null) {
1:             last.incrementReferenceCount();
1:         }
commit:9b260dc
/////////////////////////////////////////////////////////////////////////
author:Robert Davies
-------------------------------------------------------------------------------
commit:00879cf
/////////////////////////////////////////////////////////////////////////
1:     private final PendingList list;
1:     
1:     public VMPendingMessageCursor(boolean prioritizedMessages) {
1:         super(prioritizedMessages);
1:         if (this.prioritizedMessages) {
1:             this.list= new PrioritizedPendingList();
1:         }else {
1:             this.list = new OrderedPendingList();
1:         }
1:     
/////////////////////////////////////////////////////////////////////////
1:     
/////////////////////////////////////////////////////////////////////////
1:     
1:         iter = list.iterator();
/////////////////////////////////////////////////////////////////////////
1:     
1:         list.addMessageLast(node);
/////////////////////////////////////////////////////////////////////////
0:     
1:         list.addMessageFirst(node);
0:     
/////////////////////////////////////////////////////////////////////////
0:     
/////////////////////////////////////////////////////////////////////////
0:     
/////////////////////////////////////////////////////////////////////////
0:     
/////////////////////////////////////////////////////////////////////////
0:     
/////////////////////////////////////////////////////////////////////////
0:     
1:         list.remove(node);
1:         node.decrementReferenceCount();
/////////////////////////////////////////////////////////////////////////
0:     
1:         for (Iterator<MessageReference>i = list.iterator();i.hasNext();) {
1:             MessageReference ref = i.next();
/////////////////////////////////////////////////////////////////////////
0:     
0:     
commit:ac0462a
/////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////
0:     private final LinkedList<MessageReference> list = new LinkedList<MessageReference>();
0:     public VMPendingMessageCursor() {
0:         this.useCache = false;
1:     public synchronized List<MessageReference> remove(ConnectionContext context, Destination destination)
1:             throws Exception {
0:         List<MessageReference> rc = new ArrayList<MessageReference>();
1:             if (r.getRegionDestination() == destination) {
1:         return rc;
0: 
0:     @Override
1:                 if (node == QueueMessageReference.NULL_MESSAGE) {
1:                     continue;
/////////////////////////////////////////////////////////////////////////
0:     @Override
/////////////////////////////////////////////////////////////////////////
0:     @Override
/////////////////////////////////////////////////////////////////////////
0:     @Override
/////////////////////////////////////////////////////////////////////////
0:     @Override
/////////////////////////////////////////////////////////////////////////
0:     @Override
1:         last = iter.next();
/////////////////////////////////////////////////////////////////////////
0:     @Override
/////////////////////////////////////////////////////////////////////////
0:     @Override
/////////////////////////////////////////////////////////////////////////
0:     @Override
0:         for (Iterator<MessageReference> i = list.iterator(); i.hasNext();) {
0:             MessageReference ref = i.next();
0:             ref.decrementReferenceCount();
1:         }
0:     @Override
/////////////////////////////////////////////////////////////////////////
0:     @Override
0: 
0:     @Override
0: 
0:     @Override
1:     public void destroy() throws Exception {
1:         super.destroy();
1:         clear();
1:     }
commit:41b7acb
/////////////////////////////////////////////////////////////////////////
0:     public synchronized List<MessageReference> remove(ConnectionContext context, Destination destination) throws Exception {
0:     	List<MessageReference> rc = new ArrayList<MessageReference>();
commit:f2fc864
/////////////////////////////////////////////////////////////////////////
0:     
0:     public VMPendingMessageCursor(){
0:         this.useCache=false;
1:     }
commit:d56371f
/////////////////////////////////////////////////////////////////////////
1:     public synchronized boolean isEmpty() {
/////////////////////////////////////////////////////////////////////////
1:     public synchronized void reset() {
/////////////////////////////////////////////////////////////////////////
0:     public synchronized void addMessageLast(MessageReference node) {
/////////////////////////////////////////////////////////////////////////
1:     public synchronized void addMessageFirst(MessageReference node) {
/////////////////////////////////////////////////////////////////////////
1:     public synchronized boolean hasNext() {
1:     public synchronized MessageReference next() {
/////////////////////////////////////////////////////////////////////////
1:     public synchronized void remove() {
/////////////////////////////////////////////////////////////////////////
1:     public synchronized int size() {
1:     public synchronized void clear() {
1:     public synchronized void remove(MessageReference node) {
commit:36486fe
/////////////////////////////////////////////////////////////////////////
0:     
1:     public boolean isTransient() {
1:         return true;
1:     }
commit:5bd3bf6
/////////////////////////////////////////////////////////////////////////
1: import org.apache.activemq.broker.region.QueueMessageReference;
/////////////////////////////////////////////////////////////////////////
0:                 if (node== QueueMessageReference.NULL_MESSAGE){
0:                 	continue;
1:                 }
commit:0c0be94
/////////////////////////////////////////////////////////////////////////
0:     
1:     /**
1:      * Page in a restricted number of messages
1:      * @param maxItems
1:      * @return a list of paged in messages
1:      */
0:     public LinkedList pageInList(int maxItems) {
0:         return list;
1:     }
commit:f6972ec
/////////////////////////////////////////////////////////////////////////
0:     public void remove(MessageReference node){
0:         for(Iterator i=list.iterator();i.hasNext();){
0:             MessageReference ref=(MessageReference)i.next();
0:             if(node.getMessageId().equals(ref.getMessageId())){
0:                 i.remove();
0:                 break;
1:             }
commit:6895d00
/////////////////////////////////////////////////////////////////////////
0:     
0:     public void remove(MessageReference node) {
0:         boolean matched = false;
0:         int size = list.size();
0:         for (Iterator i = list.iterator();i.hasNext();) {
0:             MessageReference ref = (MessageReference)i.next();
0:                 System.err.println("MATCHIG " + node.getMessageId() + " AGAINST " + ref.getMessageId());
0:                 if(node.getMessageId().equals(ref.getMessageId())){
0:                     i.remove();
0:                     matched = true;
0:                     break;
1:                 }
1:         }
0:         System.err.println("REMOVED " + node.getMessageId() + "  = " + matched + " presize = " + size + " size now = " + list.size());
1:     }
commit:4eef609
/////////////////////////////////////////////////////////////////////////
0: public class VMPendingMessageCursor extends AbstractPendingMessageCursor{
commit:7d1e6bc
/////////////////////////////////////////////////////////////////////////
1: /**
0:  * 
0:  * Licensed to the Apache Software Foundation (ASF) under one or more contributor license agreements. See the NOTICE
0:  * file distributed with this work for additional information regarding copyright ownership. The ASF licenses this file
0:  * to You under the Apache License, Version 2.0 (the "License"); you may not use this file except in compliance with the
0:  * License. You may obtain a copy of the License at
0:  * 
0:  * http://www.apache.org/licenses/LICENSE-2.0
0:  * 
0:  * Unless required by applicable law or agreed to in writing, software distributed under the License is distributed on
0:  * an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the License for the
0:  * specific language governing permissions and limitations under the License.
1:  */
1: package org.apache.activemq.broker.region.cursors;
1: import java.util.Iterator;
1: import java.util.LinkedList;
1: import org.apache.activemq.broker.region.MessageReference;
1: /**
0:  * hold pending messages in a linked list (messages awaiting disptach to a consumer) cursor
0:  * 
0:  * @version $Revision$
1:  */
0: public class VMPendingMessageCursor implements PendingMessageCursor{
0:     private LinkedList list = new LinkedList();
0:     private Iterator iter = null;
1:     /**
1:      * @return true if there are no pending messages
1:      */
0:     public boolean isEmpty(){
0:         return list.isEmpty();
1:     }
0: 
1:     /**
1:      * reset the cursor
0:      *
1:      */
0:     public void reset(){
0:         iter = list.listIterator();
1:     }
0:     
1:     /**
1:      * add message to await dispatch
0:      * 
1:      * @param node
1:      */
0:     public void addMessageLast(MessageReference node){
0:         list.addLast(node);
1:     }
0:     
1:     /**
1:      * add message to await dispatch
0:      * @param position 
1:      * @param node
1:      */
0:     public void addMessageFirst(MessageReference node){
0:         list.addFirst(node);
1:     }
0: 
0: 
1:     /**
1:      * @return true if there pending messages to dispatch
1:      */
0:     public boolean hasNext(){
0:        return iter.hasNext();
1:     }
0: 
1:     /**
1:      * @return the next pending message
1:      */
0:     public MessageReference next(){
0:         return (MessageReference) iter.next();
1:     }
0: 
1:     /**
1:      * remove the message at the cursor position
0:      * 
1:      */
0:     public void remove(){
1:         iter.remove();
1:     }
0: 
1:     /**
1:      * @return the number of pending messages
1:      */
0:     public int size(){
1:         return list.size();
1:     }
0: 
1:     /**
1:      * clear all pending messages
0:      * 
1:      */
0:     public void clear(){
1:         list.clear();
1:     }
1: }
============================================================================