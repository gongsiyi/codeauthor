1:4150650: /**
1:4150650:  * Licensed to the Apache Software Foundation (ASF) under one or more
1:4150650:  * contributor license agreements.  See the NOTICE file distributed with
1:4150650:  * this work for additional information regarding copyright ownership.
1:4150650:  * The ASF licenses this file to You under the Apache License, Version 2.0
1:4150650:  * (the "License"); you may not use this file except in compliance with
1:4150650:  * the License.  You may obtain a copy of the License at
1:4150650:  *
1:4150650:  *      http://www.apache.org/licenses/LICENSE-2.0
1:4150650:  *
1:4150650:  * Unless required by applicable law or agreed to in writing, software
1:4150650:  * distributed under the License is distributed on an "AS IS" BASIS,
1:4150650:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:4150650:  * See the License for the specific language governing permissions and
1:4150650:  * limitations under the License.
1:4150650:  */
1:4150650: package org.apache.activemq.broker.ft;
1:4150650: 
1:4150650: import java.util.concurrent.CountDownLatch;
1:4150650: import java.util.concurrent.TimeUnit;
1:4150650: import javax.jms.Connection;
1:4150650: import javax.jms.Destination;
1:4150650: import javax.jms.ExceptionListener;
1:4150650: import javax.jms.JMSException;
1:4150650: import javax.jms.Message;
1:4150650: import javax.jms.MessageProducer;
1:4150650: import javax.jms.Session;
1:4150650: import org.apache.activemq.ActiveMQConnectionFactory;
1:4150650: import org.apache.activemq.JmsTopicSendReceiveWithTwoConnectionsTest;
1:4150650: import org.apache.activemq.broker.BrokerService;
1:170b86a: import org.apache.activemq.store.jdbc.DataSourceServiceSupport;
1:4150650: import org.apache.activemq.store.jdbc.JDBCPersistenceAdapter;
1:4150650: import org.apache.activemq.util.DefaultIOExceptionHandler;
1:170b86a: import org.apache.activemq.util.IOHelper;
1:4150650: import org.apache.derby.jdbc.EmbeddedDataSource;
1:165959e: import org.junit.After;
1:4150650: import org.slf4j.Logger;
1:4150650: import org.slf4j.LoggerFactory;
1:4150650: 
1:4150650: public class DbRestartJDBCQueueTest extends JmsTopicSendReceiveWithTwoConnectionsTest implements ExceptionListener {
1:4150650:     private static final transient Logger LOG = LoggerFactory.getLogger(DbRestartJDBCQueueTest.class);
1:4150650: 
1:4150650:     public boolean transactedSends = false;
1:4150650:     public int failureCount = 25;  // or 20 for even tx batch boundary
1:4150650: 
1:4150650:     int inflightMessageCount = 0;
1:4150650:     EmbeddedDataSource sharedDs;
1:4150650:     BrokerService broker;
1:4150650:     final CountDownLatch restartDBLatch = new CountDownLatch(1);
1:4150650: 
1:4150650:     protected void setUp() throws Exception {
1:4150650:         setAutoFail(true);
1:4150650:         topic = false;
1:4150650:         verbose = true;
1:4150650:         // startup db
1:170b86a:         sharedDs = (EmbeddedDataSource) DataSourceServiceSupport.createDataSource(IOHelper.getDefaultDataDirectory());
1:4150650: 
1:4150650:         broker = new BrokerService();
1:4150650: 
1:4150650:         DefaultIOExceptionHandler handler = new DefaultIOExceptionHandler();
1:4150650:         handler.setIgnoreSQLExceptions(false);
1:4150650:         handler.setStopStartConnectors(true);
1:4150650:         broker.setIoExceptionHandler(handler);
1:4150650:         broker.addConnector("tcp://localhost:0");
1:4150650:         broker.setUseJmx(false);
1:4150650:         broker.setPersistent(true);
1:4150650:         broker.setDeleteAllMessagesOnStartup(true);
1:4150650:         JDBCPersistenceAdapter persistenceAdapter = new JDBCPersistenceAdapter();
1:4150650:         persistenceAdapter.setDataSource(sharedDs);
1:170b86a:         persistenceAdapter.setUseLock(false);
1:4150650:         persistenceAdapter.setLockKeepAlivePeriod(500);
1:170b86a:         persistenceAdapter.getLocker().setLockAcquireSleepInterval(500);
1:4150650:         broker.setPersistenceAdapter(persistenceAdapter);
1:4150650:         broker.start();
1:4150650:         super.setUp();
1:4150650:     }
1:4150650: 
1:4150650:     protected void tearDown() throws  Exception {
1:4150650:        super.tearDown();
1:13bbe52:        broker.stop();
1:4150650:     }
1:4150650: 
1:165959e:     @After
1:165959e:     public void shutDownDerby() {
1:165959e:         DataSourceServiceSupport.shutdownDefaultDataSource(sharedDs);
1:165959e:     }
1:4150650: 
1:4150650:     protected Session createSendSession(Connection sendConnection) throws Exception {
1:4150650:         if (transactedSends) {
1:4150650:             return sendConnection.createSession(true, Session.SESSION_TRANSACTED);
1:4150650:         } else {
1:4150650:             return sendConnection.createSession(false, Session.AUTO_ACKNOWLEDGE);
1:4150650:         }
1:4150650:     }
1:4150650: 
1:4150650:     protected ActiveMQConnectionFactory createConnectionFactory() throws Exception {
1:4150650:         ActiveMQConnectionFactory f =
1:4150650:                 new ActiveMQConnectionFactory("failover://" + broker.getTransportConnectors().get(0).getPublishableConnectString());
1:4150650:         f.setExceptionListener(this);
1:4150650:         return f;
1:4150650:     }
1:4150650: 
1:4150650:     @Override
1:4150650:     protected void messageSent() throws Exception {    
1:4150650:         if (++inflightMessageCount == failureCount) {
1:4150650:             LOG.info("STOPPING DB!@!!!!");
1:4150650:             final EmbeddedDataSource ds = sharedDs;
1:4150650:             ds.setShutdownDatabase("shutdown");
1:4150650:             try {
1:4150650:                 ds.getConnection();
1:4150650:             } catch (Exception ignored) {
1:4150650:             }
1:4150650:             LOG.info("DB STOPPED!@!!!!");
1:4150650:             
1:4150650:             Thread dbRestartThread = new Thread("db-re-start-thread") {
1:4150650:                 public void run() {
1:4150650:                     LOG.info("Sleeping for 10 seconds before allowing db restart");
1:4150650:                     try {
1:4150650:                         restartDBLatch.await(10, TimeUnit.SECONDS);
1:4150650:                     } catch (InterruptedException e) {
1:4150650:                         e.printStackTrace();
1:4150650:                     }
1:4150650:                     ds.setShutdownDatabase("false");
1:4150650:                     LOG.info("DB RESTARTED!@!!!!");
1:4150650:                 }
1:4150650:             };
1:4150650:             dbRestartThread.start();
1:4150650:         }
1:4150650:     }
1:4150650:      
1:4150650:     protected void sendToProducer(MessageProducer producer,
1:4150650:             Destination producerDestination, Message message) throws JMSException {
1:4150650:         {   
1:4150650:             // do some retries as db failures filter back to the client until broker sees
1:4150650:             // db lock failure and shuts down
1:4150650:             boolean sent = false;
1:4150650:             do {
1:4150650:                 try { 
1:4150650:                     producer.send(producerDestination, message);
1:4150650: 
1:4150650:                     if (transactedSends && ((inflightMessageCount+1) %10 == 0 || (inflightMessageCount+1) >= messageCount)) {
1:4150650:                         LOG.info("committing on send: " + inflightMessageCount + " message: " + message);
1:4150650:                         session.commit();
1:4150650:                     }
1:4150650: 
1:4150650:                     sent = true;
1:4150650:                 } catch (JMSException e) {
1:4150650:                     LOG.info("Exception on producer send:", e);
1:4150650:                     try { 
1:4150650:                         Thread.sleep(2000);
1:4150650:                     } catch (InterruptedException ignored) {
1:4150650:                     }
1:4150650:                 }
1:4150650:             } while(!sent);
1:4150650: 
1:4150650:         }
1:4150650:     }
1:4150650: 
1:4150650:     @Override
1:4150650:     public void onException(JMSException exception) {
1:4150650:         LOG.error("exception on connection: ", exception);
1:4150650:     }
1:4150650: }
============================================================================
author:gtully
-------------------------------------------------------------------------------
commit:165959e
/////////////////////////////////////////////////////////////////////////
1: import org.junit.After;
/////////////////////////////////////////////////////////////////////////
1:     @After
1:     public void shutDownDerby() {
1:         DataSourceServiceSupport.shutdownDefaultDataSource(sharedDs);
1:     }
author:Gary Tully
-------------------------------------------------------------------------------
commit:13bbe52
/////////////////////////////////////////////////////////////////////////
1:        broker.stop();
commit:4150650
/////////////////////////////////////////////////////////////////////////
1: /**
1:  * Licensed to the Apache Software Foundation (ASF) under one or more
1:  * contributor license agreements.  See the NOTICE file distributed with
1:  * this work for additional information regarding copyright ownership.
1:  * The ASF licenses this file to You under the Apache License, Version 2.0
1:  * (the "License"); you may not use this file except in compliance with
1:  * the License.  You may obtain a copy of the License at
1:  *
1:  *      http://www.apache.org/licenses/LICENSE-2.0
1:  *
1:  * Unless required by applicable law or agreed to in writing, software
1:  * distributed under the License is distributed on an "AS IS" BASIS,
1:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:  * See the License for the specific language governing permissions and
1:  * limitations under the License.
1:  */
1: package org.apache.activemq.broker.ft;
1: 
1: import java.util.concurrent.CountDownLatch;
1: import java.util.concurrent.TimeUnit;
1: import javax.jms.Connection;
1: import javax.jms.Destination;
1: import javax.jms.ExceptionListener;
1: import javax.jms.JMSException;
1: import javax.jms.Message;
1: import javax.jms.MessageProducer;
1: import javax.jms.Session;
1: import org.apache.activemq.ActiveMQConnectionFactory;
1: import org.apache.activemq.JmsTopicSendReceiveWithTwoConnectionsTest;
1: import org.apache.activemq.broker.BrokerService;
0: import org.apache.activemq.store.jdbc.DataSourceSupport;
1: import org.apache.activemq.store.jdbc.JDBCPersistenceAdapter;
1: import org.apache.activemq.util.DefaultIOExceptionHandler;
1: import org.apache.derby.jdbc.EmbeddedDataSource;
1: import org.slf4j.Logger;
1: import org.slf4j.LoggerFactory;
1: 
1: public class DbRestartJDBCQueueTest extends JmsTopicSendReceiveWithTwoConnectionsTest implements ExceptionListener {
1:     private static final transient Logger LOG = LoggerFactory.getLogger(DbRestartJDBCQueueTest.class);
1: 
1:     public boolean transactedSends = false;
1:     public int failureCount = 25;  // or 20 for even tx batch boundary
1: 
1:     int inflightMessageCount = 0;
1:     EmbeddedDataSource sharedDs;
1:     BrokerService broker;
1:     final CountDownLatch restartDBLatch = new CountDownLatch(1);
1: 
1:     protected void setUp() throws Exception {
1:         setAutoFail(true);
1:         topic = false;
1:         verbose = true;
1:         // startup db
0:         sharedDs = (EmbeddedDataSource) new DataSourceSupport().getDataSource();
1: 
1:         broker = new BrokerService();
1: 
1:         DefaultIOExceptionHandler handler = new DefaultIOExceptionHandler();
1:         handler.setIgnoreSQLExceptions(false);
1:         handler.setStopStartConnectors(true);
1:         broker.setIoExceptionHandler(handler);
1:         broker.addConnector("tcp://localhost:0");
1:         broker.setUseJmx(false);
1:         broker.setPersistent(true);
1:         broker.setDeleteAllMessagesOnStartup(true);
1:         JDBCPersistenceAdapter persistenceAdapter = new JDBCPersistenceAdapter();
1:         persistenceAdapter.setDataSource(sharedDs);
0:         persistenceAdapter.setUseDatabaseLock(false);
1:         persistenceAdapter.setLockKeepAlivePeriod(500);
0:         persistenceAdapter.setLockAcquireSleepInterval(500);
1:         broker.setPersistenceAdapter(persistenceAdapter);
1:         broker.start();
1:         super.setUp();
1:     }
1: 
1:     protected void tearDown() throws  Exception {
1:        super.tearDown();
0:         broker.stop();
1:     }
1: 
1: 
1:     protected Session createSendSession(Connection sendConnection) throws Exception {
1:         if (transactedSends) {
1:             return sendConnection.createSession(true, Session.SESSION_TRANSACTED);
1:         } else {
1:             return sendConnection.createSession(false, Session.AUTO_ACKNOWLEDGE);
1:         }
1:     }
1: 
1:     protected ActiveMQConnectionFactory createConnectionFactory() throws Exception {
1:         ActiveMQConnectionFactory f =
1:                 new ActiveMQConnectionFactory("failover://" + broker.getTransportConnectors().get(0).getPublishableConnectString());
1:         f.setExceptionListener(this);
1:         return f;
1:     }
1: 
1:     @Override
1:     protected void messageSent() throws Exception {    
1:         if (++inflightMessageCount == failureCount) {
1:             LOG.info("STOPPING DB!@!!!!");
1:             final EmbeddedDataSource ds = sharedDs;
1:             ds.setShutdownDatabase("shutdown");
1:             try {
1:                 ds.getConnection();
1:             } catch (Exception ignored) {
1:             }
1:             LOG.info("DB STOPPED!@!!!!");
1:             
1:             Thread dbRestartThread = new Thread("db-re-start-thread") {
1:                 public void run() {
1:                     LOG.info("Sleeping for 10 seconds before allowing db restart");
1:                     try {
1:                         restartDBLatch.await(10, TimeUnit.SECONDS);
1:                     } catch (InterruptedException e) {
1:                         e.printStackTrace();
1:                     }
1:                     ds.setShutdownDatabase("false");
1:                     LOG.info("DB RESTARTED!@!!!!");
1:                 }
1:             };
1:             dbRestartThread.start();
1:         }
1:     }
1:      
1:     protected void sendToProducer(MessageProducer producer,
1:             Destination producerDestination, Message message) throws JMSException {
1:         {   
1:             // do some retries as db failures filter back to the client until broker sees
1:             // db lock failure and shuts down
1:             boolean sent = false;
1:             do {
1:                 try { 
1:                     producer.send(producerDestination, message);
1: 
1:                     if (transactedSends && ((inflightMessageCount+1) %10 == 0 || (inflightMessageCount+1) >= messageCount)) {
1:                         LOG.info("committing on send: " + inflightMessageCount + " message: " + message);
1:                         session.commit();
1:                     }
1: 
1:                     sent = true;
1:                 } catch (JMSException e) {
1:                     LOG.info("Exception on producer send:", e);
1:                     try { 
1:                         Thread.sleep(2000);
1:                     } catch (InterruptedException ignored) {
1:                     }
1:                 }
1:             } while(!sent);
1: 
1:         }
1:     }
1: 
1:     @Override
1:     public void onException(JMSException exception) {
1:         LOG.error("exception on connection: ", exception);
1:     }
1: }
author:Timothy A. Bish
-------------------------------------------------------------------------------
commit:ef24cc9
author:Bosanac Dejan
-------------------------------------------------------------------------------
commit:170b86a
/////////////////////////////////////////////////////////////////////////
1: import org.apache.activemq.store.jdbc.DataSourceServiceSupport;
1: import org.apache.activemq.util.IOHelper;
/////////////////////////////////////////////////////////////////////////
1:         sharedDs = (EmbeddedDataSource) DataSourceServiceSupport.createDataSource(IOHelper.getDefaultDataDirectory());
/////////////////////////////////////////////////////////////////////////
1:         persistenceAdapter.setUseLock(false);
1:         persistenceAdapter.getLocker().setLockAcquireSleepInterval(500);
============================================================================