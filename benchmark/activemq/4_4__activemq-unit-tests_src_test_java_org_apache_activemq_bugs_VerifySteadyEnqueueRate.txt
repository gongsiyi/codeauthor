1:675afd6: /**
1:675afd6:  * Licensed to the Apache Software Foundation (ASF) under one or more
1:675afd6:  * contributor license agreements.  See the NOTICE file distributed with
1:675afd6:  * this work for additional information regarding copyright ownership.
1:675afd6:  * The ASF licenses this file to You under the Apache License, Version 2.0
1:675afd6:  * (the "License"); you may not use this file except in compliance with
1:675afd6:  * the License.  You may obtain a copy of the License at
1:675afd6:  *
1:675afd6:  *      http://www.apache.org/licenses/LICENSE-2.0
1:675afd6:  *
1:675afd6:  * Unless required by applicable law or agreed to in writing, software
1:675afd6:  * distributed under the License is distributed on an "AS IS" BASIS,
1:675afd6:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:675afd6:  * See the License for the specific language governing permissions and
1:675afd6:  * limitations under the License.
1:675afd6:  */
1:675afd6: package org.apache.activemq.bugs;
1:deea2d1: 
1:b2fca26: import junit.framework.TestCase;
1:b2fca26: import org.apache.activemq.ActiveMQConnectionFactory;
1:b2fca26: import org.apache.activemq.broker.BrokerService;
1:b2fca26: import org.apache.activemq.store.kahadb.KahaDBStore;
1:b2fca26: import org.slf4j.Logger;
1:b2fca26: import org.slf4j.LoggerFactory;
1:b2fca26: 
1:b2fca26: import javax.jms.Connection;
1:5e2eedc: import java.io.File;
1:675afd6: import java.text.DateFormat;
1:675afd6: import java.util.Date;
1:c22cd65: import java.util.concurrent.ExecutorService;
1:c22cd65: import java.util.concurrent.Executors;
1:c22cd65: import java.util.concurrent.TimeUnit;
1:c22cd65: import java.util.concurrent.atomic.AtomicLong;
1:deea2d1: 
1:675afd6: public class VerifySteadyEnqueueRate extends TestCase {
1:c22cd65: 
1:8bf987b:     private static final Logger LOG = LoggerFactory.getLogger(VerifySteadyEnqueueRate.class);
1:c22cd65: 
1:c22cd65:     private static int max_messages = 1000000;
1:5219fa1:     private final String destinationName = getName() + "_Queue";
1:675afd6:     private BrokerService broker;
1:675afd6:     final boolean useTopic = false;
1:c22cd65: 
1:675afd6:     protected static final String payload = new String(new byte[24]);
2:c22cd65: 
1:5219fa1:     @Override
1:675afd6:     public void setUp() throws Exception {
1:675afd6:         startBroker();
8:675afd6:     }
1:deea2d1: 
1:5219fa1:     @Override
1:675afd6:     public void tearDown() throws Exception {
1:675afd6:         broker.stop();
1:675afd6:     }
1:c22cd65: 
1:5219fa1:     @SuppressWarnings("unused")
1:deea2d1:     public void testEnqueueRateCanMeetSLA() throws Exception {
1:675afd6:         if (true) {
1:675afd6:             return;
1:675afd6:         }
1:c22cd65:         doTestEnqueue(false);
1:675afd6:     }
1:c22cd65: 
1:c22cd65:     private void doTestEnqueue(final boolean transacted) throws Exception {
1:675afd6:         final long min = 100;
1:c059425:         final AtomicLong total = new AtomicLong(0);
1:c059425:         final AtomicLong slaViolations = new AtomicLong(0);
1:c22cd65:         final AtomicLong max = new AtomicLong(0);
1:deea2d1:         final int numThreads = 6;
1:5219fa1: 
1:c22cd65:         Runnable runner = new Runnable() {
1:deea2d1: 
1:5219fa1:             @Override
1:c22cd65:             public void run() {
1:c22cd65:                 try {
1:c22cd65:                     MessageSender producer = new MessageSender(destinationName,
1:c22cd65:                             createConnection(), transacted, useTopic);
1:c22cd65: 
1:c22cd65:                     for (int i = 0; i < max_messages; i++) {
1:c22cd65:                         long startT = System.currentTimeMillis();
1:c22cd65:                         producer.send(payload);
1:c22cd65:                         long endT = System.currentTimeMillis();
1:c22cd65:                         long duration = endT - startT;
1:5219fa1: 
1:c059425:                         total.incrementAndGet();
1:c059425: 
1:c22cd65:                         if (duration > max.get()) {
1:c22cd65:                             max.set(duration);
1:c22cd65:                         }
1:c22cd65: 
1:c22cd65:                         if (duration > min) {
1:c059425:                             slaViolations.incrementAndGet();
1:c059425:                             System.err.println("SLA violation @ "+Thread.currentThread().getName()
1:c22cd65:                                     + " "
1:c22cd65:                                     + DateFormat.getTimeInstance().format(
1:c22cd65:                                             new Date(startT)) + " at message "
1:c059425:                                     + i + " send time=" + duration
1:c059425:                                     + " - Total SLA violations: "+slaViolations.get()+"/"+total.get()+" ("+String.format("%.6f", 100.0*slaViolations.get()/total.get())+"%)");
1:c22cd65:                         }
1:c22cd65:                     }
1:c22cd65: 
1:c22cd65:                 } catch (Exception e) {
1:c22cd65:                     // TODO Auto-generated catch block
1:c22cd65:                     e.printStackTrace();
1:c22cd65:                 }
1:180b0ec:                 System.out.println("Max Violation = " + max + " - Total SLA violations: "+slaViolations.get()+"/"+total.get()+" ("+String.format("%.6f", 100.0*slaViolations.get()/total.get())+"%)");
1:675afd6:             }
2:675afd6:         };
1:c22cd65:         ExecutorService executor = Executors.newCachedThreadPool();
1:5219fa1: 
1:c22cd65:         for (int i = 0; i < numThreads; i++) {
1:c22cd65:             executor.execute(runner);
1:675afd6:         }
1:5219fa1: 
1:c22cd65:         executor.shutdown();
1:c22cd65:         while(!executor.isTerminated()) {
1:c22cd65:             executor.awaitTermination(10, TimeUnit.SECONDS);
1:c22cd65:         }
1:675afd6:     }
1:c22cd65: 
1:675afd6:     private Connection createConnection() throws Exception {
1:c22cd65:         ActiveMQConnectionFactory factory = new ActiveMQConnectionFactory(
1:c22cd65:                 broker.getTransportConnectors().get(0).getConnectUri());
1:675afd6:         return factory.createConnection();
1:675afd6:     }
1:c22cd65: 
1:675afd6:     private void startBroker() throws Exception {
1:675afd6:         broker = new BrokerService();
1:deea2d1:         //broker.setDeleteAllMessagesOnStartup(true);
1:675afd6:         broker.setPersistent(true);
1:675afd6:         broker.setUseJmx(true);
1:5e2eedc: 
1:b2fca26:         KahaDBStore kaha = new KahaDBStore();
1:b2fca26:         kaha.setDirectory(new File("target/activemq-data/kahadb"));
1:b2fca26:         // The setEnableJournalDiskSyncs(false) setting is a little dangerous right now, as I have not verified
1:b2fca26:         // what happens if the index is updated but a journal update is lost.
1:b2fca26:         // Index is going to be in consistent, but can it be repaired?
1:b2fca26:         kaha.setEnableJournalDiskSyncs(false);
1:b2fca26:         // Using a bigger journal file size makes he take fewer spikes as it is not switching files as often.
1:b2fca26:         kaha.setJournalMaxFileLength(1024*1024*100);
1:5219fa1: 
1:b2fca26:         // small batch means more frequent and smaller writes
1:b2fca26:         kaha.setIndexWriteBatchSize(100);
1:b2fca26:         // do the index write in a separate thread
1:b2fca26:         kaha.setEnableIndexWriteAsync(true);
1:5219fa1: 
1:b2fca26:         broker.setPersistenceAdapter(kaha);
1:5e2eedc: 
1:5e2eedc:         broker.addConnector("tcp://localhost:0").setName("Default");
1:675afd6:         broker.start();
1:675afd6:         LOG.info("Starting broker..");
1:5e2eedc:     }
1:675afd6: }
============================================================================
author:Hiram R. Chirino
-------------------------------------------------------------------------------
commit:b2fca26
/////////////////////////////////////////////////////////////////////////
1: import junit.framework.TestCase;
1: import org.apache.activemq.ActiveMQConnectionFactory;
1: import org.apache.activemq.broker.BrokerService;
1: import org.apache.activemq.store.kahadb.KahaDBStore;
1: import org.slf4j.Logger;
1: import org.slf4j.LoggerFactory;
1: 
1: import javax.jms.Connection;
/////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////
1:         KahaDBStore kaha = new KahaDBStore();
1:         kaha.setDirectory(new File("target/activemq-data/kahadb"));
1:         // The setEnableJournalDiskSyncs(false) setting is a little dangerous right now, as I have not verified
1:         // what happens if the index is updated but a journal update is lost.
1:         // Index is going to be in consistent, but can it be repaired?
1:         kaha.setEnableJournalDiskSyncs(false);
1:         // Using a bigger journal file size makes he take fewer spikes as it is not switching files as often.
1:         kaha.setJournalMaxFileLength(1024*1024*100);
1:         // small batch means more frequent and smaller writes
1:         kaha.setIndexWriteBatchSize(100);
1:         // do the index write in a separate thread
1:         kaha.setEnableIndexWriteAsync(true);
1:         broker.setPersistenceAdapter(kaha);
commit:180b0ec
/////////////////////////////////////////////////////////////////////////
1:                 System.out.println("Max Violation = " + max + " - Total SLA violations: "+slaViolations.get()+"/"+total.get()+" ("+String.format("%.6f", 100.0*slaViolations.get()/total.get())+"%)");
commit:8262ef7
/////////////////////////////////////////////////////////////////////////
0:             // Using a bigger journal file size makes he take fewer spikes as it is not switching files as often.
0:             kaha.getJournal().setMaxFileLength(1024*1024*100);
commit:c059425
/////////////////////////////////////////////////////////////////////////
1:         final AtomicLong total = new AtomicLong(0);
1:         final AtomicLong slaViolations = new AtomicLong(0);
/////////////////////////////////////////////////////////////////////////
1:                         total.incrementAndGet();
1:                         
1:                         	slaViolations.incrementAndGet();
1:                             System.err.println("SLA violation @ "+Thread.currentThread().getName()
1:                                     + i + " send time=" + duration
1:                                     + " - Total SLA violations: "+slaViolations.get()+"/"+total.get()+" ("+String.format("%.6f", 100.0*slaViolations.get()/total.get())+"%)");
/////////////////////////////////////////////////////////////////////////
0:             kaha.setCleanupInterval(1000 * 60 * 60 * 60);
0:             // The setEnableJournalDiskSyncs(false) setting is a little dangerous right now, as I have not verified 
0:             // what happens if the index is updated but a journal update is lost.
0:             // Index is going to be in consistent, but can it be repaired?
0:             kaha.setEnableJournalDiskSyncs(false);
0:             kaha.getPageFile().setWriteBatchSize(100);
0:             kaha.getPageFile().setEnableWriteThread(true);
commit:19c4316
/////////////////////////////////////////////////////////////////////////
0:             kaha.getPageFile().setWriteBatchSize(10);
commit:5e2eedc
/////////////////////////////////////////////////////////////////////////
1: import java.io.File;
/////////////////////////////////////////////////////////////////////////
0: import org.apache.activemq.store.kahadb.KahaDBStore;
/////////////////////////////////////////////////////////////////////////
0:     private boolean useAMQPStore=true;
/////////////////////////////////////////////////////////////////////////
0:         if( useAMQPStore ) {
0:             AMQPersistenceAdapterFactory factory = (AMQPersistenceAdapterFactory) broker.getPersistenceFactory();
0:             // ensure there are a bunch of data files but multiple entries in each
0:             //factory.setMaxFileLength(1024 * 20);
0:             // speed up the test case, checkpoint an cleanup early and often
0:             //factory.setCheckpointInterval(500);
0:             factory.setCleanupInterval(1000*60*30);
0:             factory.setSyncOnWrite(false);
1:             
0:             //int indexBinSize=262144; // good for 6M
0:             int indexBinSize=1024;
0:             factory.setIndexMaxBinSize(indexBinSize * 2);
0:             factory.setIndexBinSize(indexBinSize);
0:             factory.setIndexPageSize(192*20);
0:         } else {
0:             KahaDBStore kaha = new KahaDBStore();
0:             kaha.setDirectory(new File("target/activemq-data/kahadb"));
0:             kaha.deleteAllMessages();
0:             broker.setPersistenceAdapter(kaha);
1:         }
1: 
1:         broker.addConnector("tcp://localhost:0").setName("Default");
author:Timothy A. Bish
-------------------------------------------------------------------------------
commit:5219fa1
/////////////////////////////////////////////////////////////////////////
1:     private final String destinationName = getName() + "_Queue";
0:     private final boolean useAMQPStore = false;
1:     @Override
1:     @Override
1:     @SuppressWarnings("unused")
/////////////////////////////////////////////////////////////////////////
1: 
1:             @Override
/////////////////////////////////////////////////////////////////////////
1: 
0:                             slaViolations.incrementAndGet();
/////////////////////////////////////////////////////////////////////////
1: 
1: 
/////////////////////////////////////////////////////////////////////////
0:             // The setEnableJournalDiskSyncs(false) setting is a little dangerous right now, as I have not verified
1: 
1: 
commit:ef24cc9
author:Bosanac Dejan
-------------------------------------------------------------------------------
commit:8bf987b
/////////////////////////////////////////////////////////////////////////
0: import org.slf4j.Logger;
0: import org.slf4j.LoggerFactory;
1:     private static final Logger LOG = LoggerFactory.getLogger(VerifySteadyEnqueueRate.class);
author:Gary Tully
-------------------------------------------------------------------------------
commit:deea2d1
/////////////////////////////////////////////////////////////////////////
1:     public void testEnqueueRateCanMeetSLA() throws Exception {
/////////////////////////////////////////////////////////////////////////
1:         final int numThreads = 6;
1:         
/////////////////////////////////////////////////////////////////////////
1:         
/////////////////////////////////////////////////////////////////////////
1:         //broker.setDeleteAllMessagesOnStartup(true);
/////////////////////////////////////////////////////////////////////////
0:             kaha.setJournalMaxFileLength(1024*1024*100);
1:             
0:             // small batch means more frequent and smaller writes
0:             kaha.setIndexWriteBatchSize(100);
0:             // do the index write in a separate thread
0:             kaha.setEnableIndexWriteAsync(true);
1:             
commit:c22cd65
/////////////////////////////////////////////////////////////////////////
1: import java.util.concurrent.ExecutorService;
1: import java.util.concurrent.Executors;
1: import java.util.concurrent.TimeUnit;
1: import java.util.concurrent.atomic.AtomicLong;
0:     private static final Log LOG = LogFactory
0:             .getLog(VerifySteadyEnqueueRate.class);
1:     private static int max_messages = 1000000;
0:     private String destinationName = getName() + "_Queue";
1: 
0:     private boolean useAMQPStore = false;
1: 
/////////////////////////////////////////////////////////////////////////
1:         doTestEnqueue(false);
1: 
1:     private void doTestEnqueue(final boolean transacted) throws Exception {
1:         final AtomicLong max = new AtomicLong(0);
1: 
1:         Runnable runner = new Runnable() {
1: 
1:             public void run() {
1:                 try {
1:                     MessageSender producer = new MessageSender(destinationName,
1:                             createConnection(), transacted, useTopic);
1: 
1:                     for (int i = 0; i < max_messages; i++) {
1:                         long startT = System.currentTimeMillis();
1:                         producer.send(payload);
1:                         long endT = System.currentTimeMillis();
1:                         long duration = endT - startT;
1: 
1:                         if (duration > max.get()) {
1:                             max.set(duration);
1:                         }
1: 
1:                         if (duration > min) {
0:                             System.err.println(Thread.currentThread().getName()
1:                                     + " "
1:                                     + DateFormat.getTimeInstance().format(
1:                                             new Date(startT)) + " at message "
0:                                     + i + " send time=" + duration);
1:                         }
1:                     }
1: 
1:                 } catch (Exception e) {
1:                     // TODO Auto-generated catch block
1:                     e.printStackTrace();
1:                 }
0:                 System.out.println("max = " + max);
1:         ExecutorService executor = Executors.newCachedThreadPool();
0:         int numThreads = 6;
1:         for (int i = 0; i < numThreads; i++) {
1:             executor.execute(runner);
1:         
1:         executor.shutdown();
1:         while(!executor.isTerminated()) {
1:             executor.awaitTermination(10, TimeUnit.SECONDS);
1:         }
1:         ActiveMQConnectionFactory factory = new ActiveMQConnectionFactory(
1:                 broker.getTransportConnectors().get(0).getConnectUri());
/////////////////////////////////////////////////////////////////////////
1: 
0:         if (useAMQPStore) {
0:             AMQPersistenceAdapterFactory factory = (AMQPersistenceAdapterFactory) broker
0:                     .getPersistenceFactory();
0:             // ensure there are a bunch of data files but multiple entries in
0:             // each
0:             // factory.setMaxFileLength(1024 * 20);
0:             // factory.setCheckpointInterval(500);
0:             factory.setCleanupInterval(1000 * 60 * 30);
1: 
0:             // int indexBinSize=262144; // good for 6M
0:             int indexBinSize = 1024;
0:             factory.setIndexPageSize(192 * 20);
/////////////////////////////////////////////////////////////////////////
commit:675afd6
/////////////////////////////////////////////////////////////////////////
1: /**
1:  * Licensed to the Apache Software Foundation (ASF) under one or more
1:  * contributor license agreements.  See the NOTICE file distributed with
1:  * this work for additional information regarding copyright ownership.
1:  * The ASF licenses this file to You under the Apache License, Version 2.0
1:  * (the "License"); you may not use this file except in compliance with
1:  * the License.  You may obtain a copy of the License at
1:  *
1:  *      http://www.apache.org/licenses/LICENSE-2.0
1:  *
1:  * Unless required by applicable law or agreed to in writing, software
1:  * distributed under the License is distributed on an "AS IS" BASIS,
1:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:  * See the License for the specific language governing permissions and
1:  * limitations under the License.
1:  */
1: package org.apache.activemq.bugs;
0: 
1: import java.text.DateFormat;
1: import java.util.Date;
0: import java.util.concurrent.CountDownLatch;
0: 
0: import javax.jms.Connection;
0: import javax.jms.Message;
0: import javax.jms.MessageConsumer;
0: import javax.jms.MessageListener;
0: import javax.jms.ObjectMessage;
0: import javax.jms.Session;
0: 
0: import junit.framework.TestCase;
0: 
0: import org.apache.activemq.ActiveMQConnectionFactory;
0: import org.apache.activemq.broker.BrokerService;
0: import org.apache.activemq.store.amq.AMQPersistenceAdapter;
0: import org.apache.activemq.store.amq.AMQPersistenceAdapterFactory;
0: import org.apache.commons.logging.Log;
0: import org.apache.commons.logging.LogFactory;
0: 
0: 
1: public class VerifySteadyEnqueueRate extends TestCase {
0: 
0:     private static final Log LOG = LogFactory.getLog(VerifySteadyEnqueueRate.class);
0: 
0:     private final CountDownLatch latch = new CountDownLatch(max_messages);
0:     private static int max_messages = 10000000;
0:     private static int messageCounter;
0:     private String destinationName = getName()+"_Queue";
1:     private BrokerService broker;
0:     private Connection receiverConnection;
0:     private Connection producerConnection;
1:     final boolean useTopic = false;
0:     
0:     AMQPersistenceAdapter persistentAdapter;
1:     protected static final String payload = new String(new byte[24]);
0: 
1:     public void setUp() throws Exception {
0:         messageCounter = 0;
1:         startBroker();
0:         receiverConnection = createConnection();
0:         receiverConnection.start();
0:         producerConnection = createConnection();
0:         producerConnection.start();
1:     }
0:     
1:     public void tearDown() throws Exception {
0:         receiverConnection.close();
0:         producerConnection.close();
1:         broker.stop();
1:     }
0: 
0:     public void testForDataFileNotDeleted() throws Exception {
1:         if (true) {
1:             return;
1:         }
0:         doTestForDataFileNotDeleted(false);
1:     }
0:        
0:     private void doTestForDataFileNotDeleted(boolean transacted) throws Exception {
1:         final long min = 100;
0:         long max = 0;
0:         long reportTime = 0;
0:         Receiver receiver = new Receiver() {
0:             public void receive(String s) throws Exception {
0:                 messageCounter++; 
0:                 latch.countDown();
1:             }
1:         };
0:         //buildReceiver(receiverConnection, destinationName, transacted, receiver, useTopic);
0: 
0:         final MessageSender producer = new MessageSender(destinationName, producerConnection, transacted, useTopic);
0:         for (int i=0; i< max_messages; i++) {
0:             long startT = System.currentTimeMillis();
0:             producer.send(payload );
0:             long endT = System.currentTimeMillis();
0:             long duration = endT - startT;
0:             
0:             if (duration > max) {
0:                 max = duration;
1:             }
0:             
0:             if (duration > min) {
0:                 System.err.println(DateFormat.getTimeInstance().format(new Date(startT)) + " at message " + i + " send time=" + duration);    
1:             }
1:         }
0:         System.out.println("max = " + max);
0:         //latch.await();
0:         //assertEquals(max_messages, messageCounter);
0:         //waitFordataFilesToBeCleanedUp(persistentAdapter.getAsyncDataManager(), 30000, 2); 
1:     }
0: 
1:     private Connection createConnection() throws Exception {
0:         ActiveMQConnectionFactory factory = new ActiveMQConnectionFactory(broker.getTransportConnectors().get(0).getConnectUri());
1:         return factory.createConnection();
1:     }
0: 
1:     private void startBroker() throws Exception {
1:         broker = new BrokerService();
0:         broker.setDeleteAllMessagesOnStartup(true);
1:         broker.setPersistent(true);
1:         broker.setUseJmx(true);
0:         broker.addConnector("tcp://localhost:0").setName("Default");
0:            
0:         AMQPersistenceAdapterFactory factory = (AMQPersistenceAdapterFactory) broker.getPersistenceFactory();
0:         // ensure there are a bunch of data files but multiple entries in each
0:         //factory.setMaxFileLength(1024 * 20);
0:         // speed up the test case, checkpoint an cleanup early and often
0:         //factory.setCheckpointInterval(500);
0:         factory.setCleanupInterval(1000*60*30);
0:         factory.setSyncOnWrite(false);
0:         
0:         //int indexBinSize=262144; // good for 6M
0:         int indexBinSize=1024;
0:         factory.setIndexMaxBinSize(indexBinSize * 2);
0:         factory.setIndexBinSize(indexBinSize);
0:         factory.setIndexPageSize(192*20);
0:         persistentAdapter = (AMQPersistenceAdapter) broker.getPersistenceAdapter();
1:         broker.start();
1:         LOG.info("Starting broker..");
1:     }
0: 
0:     private void buildReceiver(Connection connection, final String queueName, boolean transacted, final Receiver receiver, boolean isTopic) throws Exception {
0:         final Session session = transacted ? connection.createSession(true, Session.SESSION_TRANSACTED) : connection.createSession(false, Session.AUTO_ACKNOWLEDGE);
0:         MessageConsumer inputMessageConsumer = session.createConsumer(isTopic ? session.createTopic(queueName) : session.createQueue(queueName));
0:         MessageListener messageListener = new MessageListener() {
0: 
0:             public void onMessage(Message message) {
0:                 try {
0:                     ObjectMessage objectMessage = (ObjectMessage)message;
0:                     String s = (String)objectMessage.getObject();
0:                     receiver.receive(s);
0:                     if (session.getTransacted()) {
0:                         session.commit();
1:                     }
0:                 } catch (Exception e) {
0:                     e.printStackTrace();
1:                 }
1:             }
1:         };
0:         inputMessageConsumer.setMessageListener(messageListener);
1:     }
1: }
============================================================================