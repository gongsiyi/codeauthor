1:3f32507: /**
1:3f32507:  * Licensed to the Apache Software Foundation (ASF) under one or more
1:3f32507:  * contributor license agreements.  See the NOTICE file distributed with
1:3f32507:  * this work for additional information regarding copyright ownership.
1:3f32507:  * The ASF licenses this file to You under the Apache License, Version 2.0
1:3f32507:  * (the "License"); you may not use this file except in compliance with
1:3f32507:  * the License.  You may obtain a copy of the License at
1:3f32507:  *
1:3f32507:  *      http://www.apache.org/licenses/LICENSE-2.0
1:3f32507:  *
1:3f32507:  * Unless required by applicable law or agreed to in writing, software
1:3f32507:  * distributed under the License is distributed on an "AS IS" BASIS,
1:3f32507:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:3f32507:  * See the License for the specific language governing permissions and
1:3f32507:  * limitations under the License.
1:3f32507:  */
1:3f32507: 
1:3f32507: package org.apache.activemq.usecases;
1:3f32507: 
1:3f32507: import java.net.URI;
1:3f32507: 
1:3f32507: import javax.jms.Connection;
1:3f32507: import javax.jms.ConnectionFactory;
1:3f32507: import javax.jms.DeliveryMode;
1:3f32507: import javax.jms.Message;
1:3f32507: import javax.jms.MessageConsumer;
1:3f32507: import javax.jms.MessageProducer;
1:3f32507: import javax.jms.Queue;
1:3f32507: import javax.jms.Session;
1:3f32507: import javax.jms.TextMessage;
1:3f32507: 
1:3f32507: import junit.framework.TestCase;
1:3f32507: 
1:3f32507: import org.apache.activemq.ActiveMQConnectionFactory;
1:3f32507: import org.apache.activemq.broker.BrokerFactory;
1:3f32507: import org.apache.activemq.broker.BrokerService;
1:3f32507: 
1:3f32507: public class TestBrokerConnectionDuplexExcludedDestinations extends TestCase {
1:3f32507: 
1:3f32507:     BrokerService receiverBroker;
1:3f32507:     BrokerService senderBroker;
1:3f32507: 
1:3f32507:     Connection hubConnection;
1:3f32507:     Session hubSession;
1:3f32507: 
1:3f32507:     Connection spokeConnection;
1:3f32507:     Session spokeSession;
1:3f32507: 
1:3f32507:     @Override
1:3f32507:     public void setUp() throws Exception {
1:3f32507:         // Hub broker
1:3f32507:         String configFileName = "org/apache/activemq/usecases/receiver-duplex.xml";
1:3f32507:         URI uri = new URI("xbean:" + configFileName);
1:3f32507:         receiverBroker = BrokerFactory.createBroker(uri);
1:3f32507:         receiverBroker.setPersistent(false);
1:3f32507:         receiverBroker.setBrokerName("Hub");
1:3f32507: 
1:3f32507:         // Spoke broker
1:3f32507:         configFileName = "org/apache/activemq/usecases/sender-duplex.xml";
1:3f32507:         uri = new URI("xbean:" + configFileName);
1:3f32507:         senderBroker = BrokerFactory.createBroker(uri);
1:3f32507:         senderBroker.setPersistent(false);
1:3f32507:         senderBroker.setBrokerName("Spoke");
1:3f32507: 
1:3f32507:         // Start both Hub and Spoke broker
1:3f32507:         receiverBroker.start();
1:3f32507:         senderBroker.start();
1:3f32507: 
1:3f32507:         // create hub session
1:3f32507:         ConnectionFactory cfHub = new ActiveMQConnectionFactory("tcp://localhost:62002");
1:3f32507: 
1:3f32507:         hubConnection = cfHub.createConnection();
1:3f32507:         hubConnection.start();
1:3f32507:         hubSession = hubConnection.createSession(false, Session.AUTO_ACKNOWLEDGE);
1:3f32507: 
1:3f32507:         // create spoke session
1:3f32507:         ConnectionFactory cfSpoke = new ActiveMQConnectionFactory("tcp://localhost:62001");
1:3f32507:         spokeConnection = cfSpoke.createConnection();
1:3f32507:         spokeConnection.start();
1:3f32507:         spokeSession = spokeConnection.createSession(false, Session.AUTO_ACKNOWLEDGE);
1:3f32507:     }
1:3f32507: 
1:3f32507:     @Override
1:3f32507:     public void tearDown() throws Exception {
1:3f32507:         hubSession.close();
1:3f32507:         hubConnection.stop();
1:3f32507:         hubConnection.close();
1:3f32507: 
1:3f32507:         spokeSession.close();
1:3f32507:         spokeConnection.stop();
1:3f32507:         spokeConnection.close();
1:3f32507: 
1:3f32507:         senderBroker.stop();
1:3f32507:         receiverBroker.stop();
1:3f32507:     }
1:3f32507: 
1:3f32507:     public void testDuplexSendFromHubToSpoke() throws Exception {
1:3f32507: 
1:3f32507:         //create hub producer
1:3f32507:         MessageProducer hubProducer = hubSession.createProducer(null);
1:3f32507:         hubProducer.setDeliveryMode(DeliveryMode.NON_PERSISTENT);
1:3f32507:         hubProducer.setDisableMessageID(true);
1:3f32507:         hubProducer.setDisableMessageTimestamp(true);
1:3f32507: 
1:3f32507:         //create spoke producer
1:3f32507:         MessageProducer spokeProducer = hubSession.createProducer(null);
1:3f32507:         spokeProducer.setDeliveryMode(DeliveryMode.NON_PERSISTENT);
1:3f32507:         spokeProducer.setDisableMessageID(true);
1:3f32507:         spokeProducer.setDisableMessageTimestamp(true);
1:3f32507: 
1:3f32507:         Queue excludedQueueHub = hubSession.createQueue("exclude.test.foo");
1:3f32507:         TextMessage excludedMsgHub = hubSession.createTextMessage();
1:3f32507:         excludedMsgHub.setText(excludedQueueHub.toString());
1:3f32507: 
1:3f32507:         Queue includedQueueHub = hubSession.createQueue("include.test.foo");
1:3f32507: 
1:3f32507:         TextMessage includedMsgHub = hubSession.createTextMessage();
1:3f32507:         includedMsgHub.setText(includedQueueHub.toString());
1:3f32507: 
1:3f32507:         Queue alwaysIncludedQueueHub = hubSession.createQueue("always.include.test.foo");
1:3f32507: 
1:3f32507:         TextMessage alwaysIncludedMsgHub = hubSession.createTextMessage();
1:3f32507:         alwaysIncludedMsgHub.setText(alwaysIncludedQueueHub.toString());
1:3f32507: 
1:3f32507:         // Sending from Hub queue
1:3f32507:         hubProducer.send(excludedQueueHub, excludedMsgHub);
1:3f32507:         hubProducer.send(includedQueueHub, includedMsgHub);
1:3f32507:         hubProducer.send(alwaysIncludedQueueHub, alwaysIncludedMsgHub);
1:3f32507: 
1:3f32507:         Queue excludedQueueSpoke = spokeSession.createQueue("exclude.test.foo");
1:3f32507:         MessageConsumer excludedConsumerSpoke = spokeSession.createConsumer(excludedQueueSpoke);
1:3f32507: 
1:3f32507:         Thread.sleep(100);
1:3f32507: 
1:3f32507:         Queue includedQueueSpoke = spokeSession.createQueue("include.test.foo");
1:3f32507:         MessageConsumer includedConsumerSpoke = spokeSession.createConsumer(includedQueueSpoke);
1:3f32507: 
1:3f32507:         Thread.sleep(100);
1:3f32507: 
1:3f32507:         Queue alwaysIncludedQueueSpoke = spokeSession.createQueue("always.include.test.foo");
1:3f32507:         MessageConsumer alwaysIncludedConsumerSpoke = spokeSession.createConsumer(alwaysIncludedQueueHub);
1:3f32507: 
1:3f32507:         Thread.sleep(100);
1:3f32507:         TextMessage alwaysIncludedMsgSpoke = spokeSession.createTextMessage();
1:3f32507:         alwaysIncludedMsgSpoke.setText(alwaysIncludedQueueSpoke.toString());
1:3f32507:         spokeProducer.send(alwaysIncludedQueueSpoke, alwaysIncludedMsgSpoke);
1:3f32507: 
1:3f32507:         MessageConsumer alwaysIncludedConsumerHub = spokeSession.createConsumer(alwaysIncludedQueueHub);
1:3f32507:         assertNotNull(alwaysIncludedConsumerHub);
1:3f32507: 
1:3f32507:         // Receiving from excluded Spoke queue
1:3f32507:         Message msg = excludedConsumerSpoke.receive(200);
1:3f32507:         assertNull(msg);
1:3f32507: 
1:3f32507:         // Receiving from included Spoke queue
1:3f32507:         msg = includedConsumerSpoke.receive(200);
1:3f32507:         assertEquals(includedMsgHub, msg);
1:3f32507: 
1:3f32507:         // Receiving from included Spoke queue
1:3f32507:         msg = alwaysIncludedConsumerSpoke.receive(200);
1:3f32507:         assertEquals(alwaysIncludedMsgHub, msg);
1:3f32507: 
1:3f32507:         // we should be able to receive excluded queue message on Hub
1:3f32507:         MessageConsumer excludedConsumerHub = hubSession.createConsumer(excludedQueueHub);
1:3f32507:         msg = excludedConsumerHub.receive(200);;
1:3f32507:         assertEquals(excludedMsgHub, msg);
1:3f32507: 
1:3f32507:         hubProducer.close();
1:3f32507:         excludedConsumerSpoke.close();
1:3f32507:     }
1:3f32507: }
============================================================================
author:Hadrian Zbarcea
-------------------------------------------------------------------------------
commit:3f32507
/////////////////////////////////////////////////////////////////////////
1: /**
1:  * Licensed to the Apache Software Foundation (ASF) under one or more
1:  * contributor license agreements.  See the NOTICE file distributed with
1:  * this work for additional information regarding copyright ownership.
1:  * The ASF licenses this file to You under the Apache License, Version 2.0
1:  * (the "License"); you may not use this file except in compliance with
1:  * the License.  You may obtain a copy of the License at
1:  *
1:  *      http://www.apache.org/licenses/LICENSE-2.0
1:  *
1:  * Unless required by applicable law or agreed to in writing, software
1:  * distributed under the License is distributed on an "AS IS" BASIS,
1:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:  * See the License for the specific language governing permissions and
1:  * limitations under the License.
1:  */
1: 
1: package org.apache.activemq.usecases;
1: 
1: import java.net.URI;
1: 
1: import javax.jms.Connection;
1: import javax.jms.ConnectionFactory;
1: import javax.jms.DeliveryMode;
1: import javax.jms.Message;
1: import javax.jms.MessageConsumer;
1: import javax.jms.MessageProducer;
1: import javax.jms.Queue;
1: import javax.jms.Session;
1: import javax.jms.TextMessage;
1: 
1: import junit.framework.TestCase;
1: 
1: import org.apache.activemq.ActiveMQConnectionFactory;
1: import org.apache.activemq.broker.BrokerFactory;
1: import org.apache.activemq.broker.BrokerService;
1: 
1: public class TestBrokerConnectionDuplexExcludedDestinations extends TestCase {
1: 
1:     BrokerService receiverBroker;
1:     BrokerService senderBroker;
1: 
1:     Connection hubConnection;
1:     Session hubSession;
1: 
1:     Connection spokeConnection;
1:     Session spokeSession;
1: 
1:     @Override
1:     public void setUp() throws Exception {
1:         // Hub broker
1:         String configFileName = "org/apache/activemq/usecases/receiver-duplex.xml";
1:         URI uri = new URI("xbean:" + configFileName);
1:         receiverBroker = BrokerFactory.createBroker(uri);
1:         receiverBroker.setPersistent(false);
1:         receiverBroker.setBrokerName("Hub");
1: 
1:         // Spoke broker
1:         configFileName = "org/apache/activemq/usecases/sender-duplex.xml";
1:         uri = new URI("xbean:" + configFileName);
1:         senderBroker = BrokerFactory.createBroker(uri);
1:         senderBroker.setPersistent(false);
1:         senderBroker.setBrokerName("Spoke");
1: 
1:         // Start both Hub and Spoke broker
1:         receiverBroker.start();
1:         senderBroker.start();
1: 
1:         // create hub session
1:         ConnectionFactory cfHub = new ActiveMQConnectionFactory("tcp://localhost:62002");
1: 
1:         hubConnection = cfHub.createConnection();
1:         hubConnection.start();
1:         hubSession = hubConnection.createSession(false, Session.AUTO_ACKNOWLEDGE);
1: 
1:         // create spoke session
1:         ConnectionFactory cfSpoke = new ActiveMQConnectionFactory("tcp://localhost:62001");
1:         spokeConnection = cfSpoke.createConnection();
1:         spokeConnection.start();
1:         spokeSession = spokeConnection.createSession(false, Session.AUTO_ACKNOWLEDGE);
1:     }
1: 
1:     @Override
1:     public void tearDown() throws Exception {
1:         hubSession.close();
1:         hubConnection.stop();
1:         hubConnection.close();
1: 
1:         spokeSession.close();
1:         spokeConnection.stop();
1:         spokeConnection.close();
1: 
1:         senderBroker.stop();
1:         receiverBroker.stop();
1:     }
1: 
1:     public void testDuplexSendFromHubToSpoke() throws Exception {
1: 
1:         //create hub producer
1:         MessageProducer hubProducer = hubSession.createProducer(null);
1:         hubProducer.setDeliveryMode(DeliveryMode.NON_PERSISTENT);
1:         hubProducer.setDisableMessageID(true);
1:         hubProducer.setDisableMessageTimestamp(true);
1: 
1:         //create spoke producer
1:         MessageProducer spokeProducer = hubSession.createProducer(null);
1:         spokeProducer.setDeliveryMode(DeliveryMode.NON_PERSISTENT);
1:         spokeProducer.setDisableMessageID(true);
1:         spokeProducer.setDisableMessageTimestamp(true);
1: 
1:         Queue excludedQueueHub = hubSession.createQueue("exclude.test.foo");
1:         TextMessage excludedMsgHub = hubSession.createTextMessage();
1:         excludedMsgHub.setText(excludedQueueHub.toString());
1: 
1:         Queue includedQueueHub = hubSession.createQueue("include.test.foo");
1: 
1:         TextMessage includedMsgHub = hubSession.createTextMessage();
1:         includedMsgHub.setText(includedQueueHub.toString());
1: 
1:         Queue alwaysIncludedQueueHub = hubSession.createQueue("always.include.test.foo");
1: 
1:         TextMessage alwaysIncludedMsgHub = hubSession.createTextMessage();
1:         alwaysIncludedMsgHub.setText(alwaysIncludedQueueHub.toString());
1: 
1:         // Sending from Hub queue
1:         hubProducer.send(excludedQueueHub, excludedMsgHub);
1:         hubProducer.send(includedQueueHub, includedMsgHub);
1:         hubProducer.send(alwaysIncludedQueueHub, alwaysIncludedMsgHub);
1: 
1:         Queue excludedQueueSpoke = spokeSession.createQueue("exclude.test.foo");
1:         MessageConsumer excludedConsumerSpoke = spokeSession.createConsumer(excludedQueueSpoke);
1: 
1:         Thread.sleep(100);
1: 
1:         Queue includedQueueSpoke = spokeSession.createQueue("include.test.foo");
1:         MessageConsumer includedConsumerSpoke = spokeSession.createConsumer(includedQueueSpoke);
1: 
1:         Thread.sleep(100);
1: 
1:         Queue alwaysIncludedQueueSpoke = spokeSession.createQueue("always.include.test.foo");
1:         MessageConsumer alwaysIncludedConsumerSpoke = spokeSession.createConsumer(alwaysIncludedQueueHub);
1: 
1:         Thread.sleep(100);
1:         TextMessage alwaysIncludedMsgSpoke = spokeSession.createTextMessage();
1:         alwaysIncludedMsgSpoke.setText(alwaysIncludedQueueSpoke.toString());
1:         spokeProducer.send(alwaysIncludedQueueSpoke, alwaysIncludedMsgSpoke);
1: 
1:         MessageConsumer alwaysIncludedConsumerHub = spokeSession.createConsumer(alwaysIncludedQueueHub);
1:         assertNotNull(alwaysIncludedConsumerHub);
1: 
1:         // Receiving from excluded Spoke queue
1:         Message msg = excludedConsumerSpoke.receive(200);
1:         assertNull(msg);
1: 
1:         // Receiving from included Spoke queue
1:         msg = includedConsumerSpoke.receive(200);
1:         assertEquals(includedMsgHub, msg);
1: 
1:         // Receiving from included Spoke queue
1:         msg = alwaysIncludedConsumerSpoke.receive(200);
1:         assertEquals(alwaysIncludedMsgHub, msg);
1: 
1:         // we should be able to receive excluded queue message on Hub
1:         MessageConsumer excludedConsumerHub = hubSession.createConsumer(excludedQueueHub);
1:         msg = excludedConsumerHub.receive(200);;
1:         assertEquals(excludedMsgHub, msg);
1: 
1:         hubProducer.close();
1:         excludedConsumerSpoke.close();
1:     }
1: }
author:Timothy A. Bish
-------------------------------------------------------------------------------
commit:4743a20
/////////////////////////////////////////////////////////////////////////
0:     BrokerService receiverBroker;
0:     BrokerService senderBroker;
0:     Connection hubConnection;
0:     Session hubSession;
0:     Connection spokeConnection;
0:     Session spokeSession;
0:     @Override
0:     public void setUp() throws Exception {
0:         // Hub broker
0:         String configFileName = "org/apache/activemq/usecases/receiver-duplex.xml";
0:         URI uri = new URI("xbean:" + configFileName);
0:         receiverBroker = BrokerFactory.createBroker(uri);
0:         receiverBroker.setPersistent(false);
0:         receiverBroker.setBrokerName("Hub");
0:         // Spoke broker
0:         configFileName = "org/apache/activemq/usecases/sender-duplex.xml";
0:         uri = new URI("xbean:" + configFileName);
0:         senderBroker = BrokerFactory.createBroker(uri);
0:         senderBroker.setPersistent(false);
0:         senderBroker.setBrokerName("Spoke");
0:         // Start both Hub and Spoke broker
0:         receiverBroker.start();
0:         senderBroker.start();
0:         // create hub session
0:         ConnectionFactory cfHub = new ActiveMQConnectionFactory("tcp://localhost:62002");
0:         hubConnection = cfHub.createConnection();
0:         hubConnection.start();
0:         hubSession = hubConnection.createSession(false, Session.AUTO_ACKNOWLEDGE);
0:         // create spoke session
0:         ConnectionFactory cfSpoke = new ActiveMQConnectionFactory("tcp://localhost:62001");
0:         spokeConnection = cfSpoke.createConnection();
0:         spokeConnection.start();
0:         spokeSession = spokeConnection.createSession(false, Session.AUTO_ACKNOWLEDGE);
0:     }
0:     @Override
0:     public void tearDown() throws Exception {
0:         hubSession.close();
0:         hubConnection.stop();
0:         hubConnection.close();
0:         spokeSession.close();
0:         spokeConnection.stop();
0:         spokeConnection.close();
0:         senderBroker.stop();
0:         receiverBroker.stop();
0:     }
0:     public void testDuplexSendFromHubToSpoke() throws Exception {
0: 
0:         //create hub producer
0:         MessageProducer hubProducer = hubSession.createProducer(null);
0:         hubProducer.setDeliveryMode(DeliveryMode.NON_PERSISTENT);
0:         hubProducer.setDisableMessageID(true);
0:         hubProducer.setDisableMessageTimestamp(true);
0: 
0:         //create spoke producer
0:         MessageProducer spokeProducer = hubSession.createProducer(null);
0:         spokeProducer.setDeliveryMode(DeliveryMode.NON_PERSISTENT);
0:         spokeProducer.setDisableMessageID(true);
0:         spokeProducer.setDisableMessageTimestamp(true);
0: 
0:         Queue excludedQueueHub = hubSession.createQueue("exclude.test.foo");
0:         TextMessage excludedMsgHub = hubSession.createTextMessage();
0:         excludedMsgHub.setText(excludedQueueHub.toString());
0: 
0:         Queue includedQueueHub = hubSession.createQueue("include.test.foo");
0: 
0:         TextMessage includedMsgHub = hubSession.createTextMessage();
0:         includedMsgHub.setText(includedQueueHub.toString());
0: 
0:         Queue alwaysIncludedQueueHub = hubSession.createQueue("always.include.test.foo");
0: 
0:         TextMessage alwaysIncludedMsgHub = hubSession.createTextMessage();
0:         alwaysIncludedMsgHub.setText(alwaysIncludedQueueHub.toString());
0: 
0:         // Sending from Hub queue
0:         hubProducer.send(excludedQueueHub, excludedMsgHub);
0:         hubProducer.send(includedQueueHub, includedMsgHub);
0:         Queue excludedQueueSpoke = spokeSession.createQueue("exclude.test.foo");
0:         MessageConsumer excludedConsumerSpoke = spokeSession.createConsumer(excludedQueueSpoke);
0:         Thread.sleep(100);
0:         Queue includedQueueSpoke = spokeSession.createQueue("include.test.foo");
0:         MessageConsumer includedConsumerSpoke = spokeSession.createConsumer(includedQueueSpoke);
0:         Thread.sleep(100);
0:         Queue alwaysIncludedQueueSpoke = spokeSession.createQueue("always.include.test.foo");
0:         MessageConsumer alwaysIncludedConsumerSpoke = spokeSession.createConsumer(alwaysIncludedQueueHub);
0:         alwaysIncludedMsgSpoke.setText(alwaysIncludedQueueSpoke.toString());
0:         MessageConsumer alwaysIncludedConsumerHub = spokeSession.createConsumer(alwaysIncludedQueueHub);
0:         assertNotNull(alwaysIncludedConsumerHub);
0:         // Receiving from excluded Spoke queue
0:         Message msg = excludedConsumerSpoke.receive(200);
0:         assertNull(msg);
0:         // Receiving from included Spoke queue
0:         msg = includedConsumerSpoke.receive(200);
0:         assertEquals(includedMsgHub, msg);
0:         // Receiving from included Spoke queue
0:         msg = alwaysIncludedConsumerSpoke.receive(200);
0:         assertEquals(alwaysIncludedMsgHub, msg);
0:         // we should be able to receive excluded queue message on Hub
0:         MessageConsumer excludedConsumerHub = hubSession.createConsumer(excludedQueueHub);
0:         msg = excludedConsumerHub.receive(200);;
0:         assertEquals(excludedMsgHub, msg);
0:         hubProducer.close();
0:         excludedConsumerSpoke.close();
0:     }
commit:ef24cc9
author:Bosanac Dejan
-------------------------------------------------------------------------------
commit:4fcc1f7
/////////////////////////////////////////////////////////////////////////
0: 		//create spoke producer
0: 		MessageProducer spokeProducer = hubSession.createProducer(null);
0: 		spokeProducer.setDeliveryMode(DeliveryMode.NON_PERSISTENT);
0: 		spokeProducer.setDisableMessageID(true);
0: 		spokeProducer.setDisableMessageTimestamp(true);
0: 
/////////////////////////////////////////////////////////////////////////
0: 		includedMsgHub.setText(includedQueueHub.toString());
0: 
0: 		Queue alwaysIncludedQueueHub = hubSession.createQueue("always.include.test.foo");
0: 
0: 		TextMessage alwaysIncludedMsgHub = hubSession.createTextMessage();
0: 		alwaysIncludedMsgHub.setText(alwaysIncludedQueueHub.toString());
0:         hubProducer.send(alwaysIncludedQueueHub, alwaysIncludedMsgHub);
/////////////////////////////////////////////////////////////////////////
0: 		MessageConsumer includedConsumerSpoke = spokeSession.createConsumer(includedQueueSpoke);
0: 
0: 		Thread.sleep(100);
0: 
0: 	    Queue alwaysIncludedQueueSpoke = spokeSession.createQueue("always.include.test.foo");
0: 		MessageConsumer alwaysIncludedConsumerSpoke = spokeSession.createConsumer(alwaysIncludedQueueHub);
0: 
0:         Thread.sleep(100);
0:         TextMessage alwaysIncludedMsgSpoke = spokeSession.createTextMessage();
0: 		alwaysIncludedMsgSpoke.setText(alwaysIncludedQueueSpoke.toString());
0:         spokeProducer.send(alwaysIncludedQueueSpoke, alwaysIncludedMsgSpoke);
0: 
0: 
0: 		MessageConsumer alwaysIncludedConsumerHub = spokeSession.createConsumer(alwaysIncludedQueueHub);
0: 
/////////////////////////////////////////////////////////////////////////
0: 
0: 		// Receiving from included Spoke queue
0: 		msg = alwaysIncludedConsumerSpoke.receive(200);
0: 		assertEquals(alwaysIncludedMsgHub, msg);
commit:d185430
/////////////////////////////////////////////////////////////////////////
0: 	
0: 	BrokerService receiverBroker;
0: 	BrokerService senderBroker;
0: 	
0: 	Connection hubConnection;
0: 	Session hubSession;
0: 	
0: 	Connection spokeConnection;
0: 	Session spokeSession;
0: 	
0: 	public void setUp() throws Exception {
0: 		receiverBroker = BrokerFactory.createBroker(uri);
0: 		senderBroker = BrokerFactory.createBroker(uri);
0: 		senderBroker.setBrokerName("Spoke");
0: 		
0: 		// create hub session
0: 		ConnectionFactory cfHub = new ActiveMQConnectionFactory("tcp://localhost:62002");
0: 		hubConnection = cfHub.createConnection();
0: 		hubSession = hubConnection.createSession(false, Session.AUTO_ACKNOWLEDGE);
0: 
0: 		// create spoke session
0: 		ConnectionFactory cfSpoke = new ActiveMQConnectionFactory("tcp://localhost:62001");
0: 		spokeConnection = cfSpoke.createConnection();
0: 		spokeConnection.start();
0: 		spokeSession = spokeConnection.createSession(false, Session.AUTO_ACKNOWLEDGE);
0: 	}
0: 	
0: 	public void tearDown() throws Exception {
0: 		hubSession.close();
0: 		hubConnection.stop();
0: 		hubConnection.close();
0: 		
0: 		spokeSession.close();
0: 		spokeConnection.stop();
0: 		spokeConnection.close();
0: 
0: 		senderBroker.stop();
0: 		receiverBroker.stop();
0: 	}
0: 
0: 	public void testDuplexSendFromHubToSpoke()
0: 			throws Exception {
0: 
0: 		//create hub producer
0: 		MessageProducer hubProducer = hubSession.createProducer(null);
0: 		Queue excludedQueueHub = hubSession.createQueue("exclude.test.foo");
0: 		TextMessage excludedMsgHub = hubSession.createTextMessage();
0: 		Queue includedQueueHub = hubSession.createQueue("include.test.foo");
0: 		TextMessage includedMsgHub = hubSession.createTextMessage();
0: 		includedMsgHub.setText(includedQueueHub.toString());		
0: 		Queue excludedQueueSpoke = spokeSession.createQueue("exclude.test.foo");
0: 		MessageConsumer excludedConsumerSpoke = spokeSession.createConsumer(excludedQueueSpoke);
0: 		
0: 		Thread.sleep(100);
0: 
0: 	    Queue includedQueueSpoke = spokeSession.createQueue("include.test.foo");
0: 		MessageConsumer includedConsumerSpoke = spokeSession.createConsumer(includedQueueSpoke);		
/////////////////////////////////////////////////////////////////////////
0: 		assertEquals(includedMsgHub, msg);
0: 		
0: 		// we should be able to receive excluded queue message on Hub
0: 		MessageConsumer excludedConsumerHub = hubSession.createConsumer(excludedQueueHub);
0: 		msg = excludedConsumerHub.receive(200);;
0: 		assertEquals(excludedMsgHub, msg);
0: 		excludedConsumerSpoke.close();
0: 	
commit:39dd6b9
/////////////////////////////////////////////////////////////////////////
0: /**
0:  * Licensed to the Apache Software Foundation (ASF) under one or more
0:  * contributor license agreements.  See the NOTICE file distributed with
0:  * this work for additional information regarding copyright ownership.
0:  * The ASF licenses this file to You under the Apache License, Version 2.0
0:  * (the "License"); you may not use this file except in compliance with
0:  * the License.  You may obtain a copy of the License at
0:  *
0:  *      http://www.apache.org/licenses/LICENSE-2.0
0:  *
0:  * Unless required by applicable law or agreed to in writing, software
0:  * distributed under the License is distributed on an "AS IS" BASIS,
0:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
0:  * See the License for the specific language governing permissions and
0:  * limitations under the License.
0:  */
0: 
0: package org.apache.activemq.usecases;
0: 
0: import java.net.URI;
0: 
0: import javax.jms.Connection;
0: import javax.jms.ConnectionFactory;
0: import javax.jms.DeliveryMode;
0: import javax.jms.Message;
0: import javax.jms.MessageConsumer;
0: import javax.jms.MessageProducer;
0: import javax.jms.Queue;
0: import javax.jms.Session;
0: import javax.jms.TextMessage;
0: 
0: import junit.framework.TestCase;
0: 
0: import org.apache.activemq.ActiveMQConnectionFactory;
0: import org.apache.activemq.broker.BrokerFactory;
0: import org.apache.activemq.broker.BrokerService;
0: 
0: public class TestBrokerConnectionDuplexExcludedDestinations extends TestCase {
0: 
0: 	public void testBrokerConnectionDuplexPropertiesPropagation()
0: 			throws Exception {
0: 
0: 		// Hub broker
0: 		String configFileName = "org/apache/activemq/usecases/receiver-duplex.xml";
0: 		URI uri = new URI("xbean:" + configFileName);
0: 		BrokerService receiverBroker = BrokerFactory.createBroker(uri);
0: 		receiverBroker.setPersistent(false);
0: 		receiverBroker.setBrokerName("Hub");
0: 
0: 		// Spoke broker
0: 		configFileName = "org/apache/activemq/usecases/sender-duplex.xml";
0: 		uri = new URI("xbean:" + configFileName);
0: 		BrokerService senderBroker = BrokerFactory.createBroker(uri);
0: 		senderBroker.setPersistent(false);
0: 		receiverBroker.setBrokerName("Spoke");
0: 
0: 		// Start both Hub and Spoke broker
0: 		receiverBroker.start();
0: 		senderBroker.start();
0: 
0: 		final ConnectionFactory cfHub = new ActiveMQConnectionFactory(
0: 				"tcp://localhost:62002");
0: 		final Connection hubConnection = cfHub.createConnection();
0: 		hubConnection.start();
0: 		final Session hubSession = hubConnection.createSession(false,
0: 				Session.AUTO_ACKNOWLEDGE);
0: 		final MessageProducer hubProducer = hubSession.createProducer(null);
0: 		hubProducer.setDeliveryMode(DeliveryMode.NON_PERSISTENT);
0: 		hubProducer.setDisableMessageID(true);
0: 		hubProducer.setDisableMessageTimestamp(true);
0: 
0: 		final Queue excludedQueueHub = hubSession.createQueue("exclude.test.foo");
0: 		final TextMessage excludedMsgHub = hubSession.createTextMessage();
0: 		excludedMsgHub.setText(excludedQueueHub.toString());
0: 		
0: 		final Queue includedQueueHub = hubSession.createQueue("include.test.foo");
0: 
0: 		final TextMessage includedMsgHub = hubSession.createTextMessage();
0: 		excludedMsgHub.setText(includedQueueHub.toString());		
0: 
0: 		// Sending from Hub queue
0: 		hubProducer.send(excludedQueueHub, excludedMsgHub);
0: 		hubProducer.send(includedQueueHub, includedMsgHub);
0: 
0: 		final ConnectionFactory cfSpoke = new ActiveMQConnectionFactory(
0: 				"tcp://localhost:62001");
0: 		final Connection spokeConnection = cfSpoke.createConnection();
0: 		spokeConnection.start();
0: 		final Session spokeSession = spokeConnection.createSession(false,
0: 				Session.AUTO_ACKNOWLEDGE);
0: 		final Queue excludedQueueSpoke = spokeSession.createQueue("exclude.test.foo");
0: 		final MessageConsumer excludedConsumerSpoke = spokeSession
0: 				.createConsumer(excludedQueueSpoke);
0: 
0: 		final Queue includedQueueSpoke = spokeSession.createQueue("include.test.foo");
0: 		final MessageConsumer includedConsumerSpoke = spokeSession
0: 				.createConsumer(includedQueueSpoke);		
0: 		
0: 		// Receiving from excluded Spoke queue
0: 		Message msg = excludedConsumerSpoke.receive(200);
0: 		assertNull(msg);
0: 		
0: 		// Receiving from included Spoke queue
0: 		msg = includedConsumerSpoke.receive(200);
0: 		assertEquals(msg, includedMsgHub);
0: 
0: 		excludedConsumerSpoke.close();
0: 		hubSession.close();
0: 		hubConnection.stop();
0: 		hubConnection.close();
0: 		hubProducer.close();
0: 		spokeSession.close();
0: 		spokeConnection.stop();
0: 		spokeConnection.close();
0: 
0: 		senderBroker.stop();
0: 		receiverBroker.stop();
0: 
0: 	}
0: }
============================================================================