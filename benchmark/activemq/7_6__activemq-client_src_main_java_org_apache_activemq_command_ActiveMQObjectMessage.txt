1:d29ca2a: /**
1:57b4941:  * Licensed to the Apache Software Foundation (ASF) under one or more
1:57b4941:  * contributor license agreements.  See the NOTICE file distributed with
1:57b4941:  * this work for additional information regarding copyright ownership.
1:57b4941:  * The ASF licenses this file to You under the Apache License, Version 2.0
1:57b4941:  * (the "License"); you may not use this file except in compliance with
1:57b4941:  * the License.  You may obtain a copy of the License at
7:d29ca2a:  *
1:230a86c:  *      http://www.apache.org/licenses/LICENSE-2.0
1:d29ca2a:  *
1:d29ca2a:  * Unless required by applicable law or agreed to in writing, software
1:d29ca2a:  * distributed under the License is distributed on an "AS IS" BASIS,
1:d29ca2a:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:d29ca2a:  * See the License for the specific language governing permissions and
1:d29ca2a:  * limitations under the License.
1:d29ca2a:  */
10:d29ca2a: 
1:d29ca2a: package org.apache.activemq.command;
1:d29ca2a: 
1:d29ca2a: import java.io.DataInputStream;
1:d29ca2a: import java.io.DataOutputStream;
1:d29ca2a: import java.io.IOException;
1:d29ca2a: import java.io.InputStream;
1:d29ca2a: import java.io.ObjectOutputStream;
1:d29ca2a: import java.io.OutputStream;
1:d29ca2a: import java.io.Serializable;
1:94446e5: import java.util.ArrayList;
1:eeec0c0: import java.util.Arrays;
1:94446e5: import java.util.List;
1:b9dcb01: import java.util.concurrent.ConcurrentHashMap;
1:d29ca2a: import java.util.zip.DeflaterOutputStream;
1:d29ca2a: import java.util.zip.InflaterInputStream;
1:f451ad0: 
1:74a7a8b: import javax.jms.JMSException;
1:74a7a8b: import javax.jms.ObjectMessage;
1:74a7a8b: 
1:74a7a8b: import org.apache.activemq.ActiveMQConnection;
1:74a7a8b: import org.apache.activemq.util.ByteArrayInputStream;
1:74a7a8b: import org.apache.activemq.util.ByteArrayOutputStream;
1:74a7a8b: import org.apache.activemq.util.ByteSequence;
1:74a7a8b: import org.apache.activemq.util.ClassLoadingAwareObjectInputStream;
1:74a7a8b: import org.apache.activemq.util.JMSExceptionSupport;
1:0585bc1: import org.apache.activemq.wireformat.WireFormat;
1:74a7a8b: 
1:d29ca2a: /**
1:f812e34:  * An <CODE>ObjectMessage</CODE> object is used to send a message that
1:f812e34:  * contains a serializable object in the Java programming language ("Java
1:f812e34:  * object"). It inherits from the <CODE>Message</CODE> interface and adds a
1:f812e34:  * body containing a single reference to an object. Only
1:f812e34:  * <CODE>Serializable</CODE> Java objects can be used. <p/>
1:f812e34:  * <P>
1:f812e34:  * If a collection of Java objects must be sent, one of the
1:f812e34:  * <CODE>Collection</CODE> classes provided since JDK 1.2 can be used. <p/>
1:f812e34:  * <P>
1:f812e34:  * When a client receives an <CODE>ObjectMessage</CODE>, it is in read-only
1:f812e34:  * mode. If a client attempts to write to the message at this point, a
1:f812e34:  * <CODE>MessageNotWriteableException</CODE> is thrown. If
1:f812e34:  * <CODE>clearBody</CODE> is called, the message can now be both read from and
1:f812e34:  * written to.
1:f812e34:  *
1:4afa5d6:  * @openwire:marshaller code="26"
1:d29ca2a:  * @see javax.jms.Session#createObjectMessage()
1:d29ca2a:  * @see javax.jms.Session#createObjectMessage(Serializable)
1:d29ca2a:  * @see javax.jms.BytesMessage
1:d29ca2a:  * @see javax.jms.MapMessage
1:d29ca2a:  * @see javax.jms.Message
1:d29ca2a:  * @see javax.jms.StreamMessage
1:d29ca2a:  * @see javax.jms.TextMessage
1:d29ca2a:  */
1:b9dcb01: public class ActiveMQObjectMessage extends ActiveMQMessage implements ObjectMessage, TransientInitializer {
1:ecf89a6: 
1:d29ca2a:     public static final byte DATA_STRUCTURE_TYPE = CommandTypes.ACTIVEMQ_OBJECT_MESSAGE;
1:94446e5: 
1:b9dcb01:     private transient List<String> trustedPackages = Arrays.asList(ClassLoadingAwareObjectInputStream.serializablePackages);
1:b9dcb01:     private transient boolean trustAllPackages = false;
1:f451ad0: 
1:d29ca2a:     protected transient Serializable object;
1:d29ca2a: 
1:b9dcb01:     @Override
1:d29ca2a:     public Message copy() {
1:d29ca2a:         ActiveMQObjectMessage copy = new ActiveMQObjectMessage();
1:d29ca2a:         copy(copy);
1:94446e5:         copy.setTrustAllPackages(trustAllPackages);
1:94446e5:         copy.setTrustedPackages(trustedPackages);
1:d29ca2a:         return copy;
2:d29ca2a:     }
1:d29ca2a: 
1:d29ca2a:     private void copy(ActiveMQObjectMessage copy) {
1:e9f30fe:         ActiveMQConnection connection = getConnection();
1:e9f30fe:         if (connection == null || !connection.isObjectMessageSerializationDefered()) {
1:d29ca2a:             storeContent();
1:f812e34:             copy.object = null;
1:e9f30fe:         } else {
1:e9f30fe:             copy.object = object;
1:d29ca2a:         }
1:d29ca2a:         super.copy(copy);
1:f812e34: 
1:d29ca2a:     }
1:d29ca2a: 
1:b9dcb01:     @Override
1:3003895:     public void storeContentAndClear() {
1:3003895:         storeContent();
1:3003895:         object = null;
1:3003895:     }
1:3003895: 
1:b9dcb01:     @Override
1:d29ca2a:     public void storeContent() {
1:d29ca2a:         ByteSequence bodyAsBytes = getContent();
1:d29ca2a:         if (bodyAsBytes == null && object != null) {
3:d29ca2a:             try {
1:d29ca2a:                 ByteArrayOutputStream bytesOut = new ByteArrayOutputStream();
1:d29ca2a:                 OutputStream os = bytesOut;
1:d29ca2a:                 ActiveMQConnection connection = getConnection();
1:f812e34:                 if (connection != null && connection.isUseCompression()) {
1:d29ca2a:                     compressed = true;
1:d29ca2a:                     os = new DeflaterOutputStream(os);
1:d29ca2a:                 }
1:d29ca2a:                 DataOutputStream dataOut = new DataOutputStream(os);
1:d29ca2a:                 ObjectOutputStream objOut = new ObjectOutputStream(dataOut);
1:d29ca2a:                 objOut.writeObject(object);
1:8d42a5a:                 objOut.flush();
1:8d42a5a:                 objOut.reset();
1:d29ca2a:                 objOut.close();
1:d29ca2a:                 setContent(bytesOut.toByteSequence());
1:d29ca2a:             } catch (IOException ioe) {
1:d29ca2a:                 throw new RuntimeException(ioe.getMessage(), ioe);
1:d29ca2a:             }
1:d29ca2a:         }
1:d29ca2a:     }
1:d29ca2a: 
1:3003895:     @Override
1:f82993d:     public boolean isContentMarshalled() {
1:f82993d:         return content != null || object == null;
1:f82993d:     }
1:f82993d: 
1:f82993d:     @Override
1:d29ca2a:     public byte getDataStructureType() {
1:d29ca2a:         return DATA_STRUCTURE_TYPE;
1:d29ca2a:     }
1:d29ca2a: 
1:b9dcb01:     @Override
1:05a8cba:     public String getJMSXMimeType() {
1:05a8cba:         return "jms/object-message";
1:d29ca2a:     }
1:d29ca2a: 
1:d29ca2a:     /**
1:f812e34:      * Clears out the message body. Clearing a message's body does not clear its
1:f812e34:      * header values or property entries. <p/>
1:f812e34:      * <P>
1:f812e34:      * If this message body was read-only, calling this method leaves the
1:f812e34:      * message body in the same state as an empty body in a newly created
1:f812e34:      * message.
1:f812e34:      *
1:f812e34:      * @throws JMSException if the JMS provider fails to clear the message body
1:f812e34:      *                 due to some internal error.
1:d29ca2a:      */
1:d29ca2a: 
1:b9dcb01:     @Override
1:d29ca2a:     public void clearBody() throws JMSException {
1:d29ca2a:         super.clearBody();
1:d29ca2a:         this.object = null;
1:d29ca2a:     }
1:d29ca2a: 
1:d29ca2a:     /**
1:f812e34:      * Sets the serializable object containing this message's data. It is
1:f812e34:      * important to note that an <CODE>ObjectMessage</CODE> contains a
1:f812e34:      * snapshot of the object at the time <CODE>setObject()</CODE> is called;
1:f812e34:      * subsequent modifications of the object will have no effect on the
1:f812e34:      * <CODE>ObjectMessage</CODE> body.
1:f812e34:      *
1:d29ca2a:      * @param newObject the message's data
1:f812e34:      * @throws JMSException if the JMS provider fails to set the object due to
1:f812e34:      *                 some internal error.
1:f812e34:      * @throws javax.jms.MessageFormatException if object serialization fails.
1:f812e34:      * @throws javax.jms.MessageNotWriteableException if the message is in
1:f812e34:      *                 read-only mode.
1:d29ca2a:      */
1:d29ca2a: 
1:b9dcb01:     @Override
1:d29ca2a:     public void setObject(Serializable newObject) throws JMSException {
1:d29ca2a:         checkReadOnlyBody();
1:d29ca2a:         this.object = newObject;
1:d29ca2a:         setContent(null);
1:d29ca2a:         ActiveMQConnection connection = getConnection();
1:f812e34:         if (connection == null || !connection.isObjectMessageSerializationDefered()) {
1:d29ca2a:             storeContent();
1:d29ca2a:         }
1:d29ca2a:     }
1:d29ca2a: 
1:d29ca2a:     /**
1:f812e34:      * Gets the serializable object containing this message's data. The default
1:f812e34:      * value is null.
1:f812e34:      *
1:d29ca2a:      * @return the serializable object containing this message's data
1:d29ca2a:      * @throws JMSException
1:d29ca2a:      */
1:b9dcb01:     @Override
1:d29ca2a:     public Serializable getObject() throws JMSException {
1:f812e34:         if (object == null && getContent() != null) {
1:d29ca2a:             try {
1:d29ca2a:                 ByteSequence content = getContent();
1:d29ca2a:                 InputStream is = new ByteArrayInputStream(content);
1:f812e34:                 if (isCompressed()) {
1:d29ca2a:                     is = new InflaterInputStream(is);
1:d29ca2a:                 }
1:d29ca2a:                 DataInputStream dataIn = new DataInputStream(is);
1:88acb0e:                 ClassLoadingAwareObjectInputStream objIn = new ClassLoadingAwareObjectInputStream(dataIn);
1:94446e5:                 objIn.setTrustedPackages(trustedPackages);
1:94446e5:                 objIn.setTrustAllPackages(trustAllPackages);
1:d29ca2a:                 try {
1:f812e34:                     object = (Serializable)objIn.readObject();
1:d29ca2a:                 } catch (ClassNotFoundException ce) {
1:7b16aec:                     throw JMSExceptionSupport.create("Failed to build body from content. Serializable class not available to broker. Reason: " + ce, ce);
1:7b16aec:                 } finally {
1:d29ca2a:                     dataIn.close();
1:d29ca2a:                 }
1:d29ca2a:             } catch (IOException e) {
1:d29ca2a:                 throw JMSExceptionSupport.create("Failed to build body from bytes. Reason: " + e, e);
1:d29ca2a:             }
1:d29ca2a:         }
1:d29ca2a:         return this.object;
1:d29ca2a:     }
1:d29ca2a: 
1:b9dcb01:     @Override
1:0585bc1:     public void beforeMarshall(WireFormat wireFormat) throws IOException {
1:0585bc1:         super.beforeMarshall(wireFormat);
1:0585bc1:         // may have initiated on vm transport with deferred marshalling
1:0585bc1:         storeContent();
1:d29ca2a:     }
1:d29ca2a: 
1:41c9366:     @Override
1:7c3bb40:     public void clearUnMarshalledState() throws JMSException {
1:7c3bb40:         super.clearUnMarshalledState();
1:c1da3ac:         this.object = null;
1:d29ca2a:     }
1:d29ca2a: 
1:41c9366:     @Override
1:d9b9427:     public void onMessageRolledBack() {
1:d9b9427:         super.onMessageRolledBack();
1:f812e34: 
1:f812e34:         // lets force the object to be deserialized again - as we could have
1:f812e34:         // changed the object
1:d9b9427:         object = null;
1:d29ca2a:     }
1:d29ca2a: 
1:0585bc1:     @Override
1:41c9366:     public void compress() throws IOException {
1:41c9366:         storeContent();
1:41c9366:         super.compress();
1:d29ca2a:     }
1:d29ca2a: 
1:b9dcb01:     @Override
1:d29ca2a:     public String toString() {
1:d29ca2a:         try {
1:d29ca2a:             getObject();
1:d29ca2a:         } catch (JMSException e) {
1:d29ca2a:         }
1:d29ca2a:         return super.toString();
1:d29ca2a:     }
1:94446e5: 
1:94446e5:     public List<String> getTrustedPackages() {
1:94446e5:         return trustedPackages;
1:94446e5:     }
1:94446e5: 
1:94446e5:     public void setTrustedPackages(List<String> trustedPackages) {
1:94446e5:         this.trustedPackages = trustedPackages;
1:94446e5:     }
1:94446e5: 
1:94446e5:     public boolean isTrustAllPackages() {
1:94446e5:         return trustAllPackages;
1:94446e5:     }
1:94446e5: 
1:94446e5:     public void setTrustAllPackages(boolean trustAllPackages) {
1:94446e5:         this.trustAllPackages = trustAllPackages;
1:94446e5:     }
1:b9dcb01: 
1:b9dcb01:     @Override
1:b9dcb01:     public void initTransients() {
1:b9dcb01:         trustedPackages = Arrays.asList(ClassLoadingAwareObjectInputStream.serializablePackages);
1:b9dcb01:         trustAllPackages = false;
1:b9dcb01:     }
1:d29ca2a: }
============================================================================
author:Christopher L. Shannon (cshannon)
-------------------------------------------------------------------------------
commit:f82993d
/////////////////////////////////////////////////////////////////////////
1:     public boolean isContentMarshalled() {
1:         return content != null || object == null;
1:     }
1: 
1:     @Override
commit:7c3bb40
/////////////////////////////////////////////////////////////////////////
1:     public void clearUnMarshalledState() throws JMSException {
1:         super.clearUnMarshalledState();
commit:b9dcb01
/////////////////////////////////////////////////////////////////////////
1: import java.util.concurrent.ConcurrentHashMap;
/////////////////////////////////////////////////////////////////////////
1: public class ActiveMQObjectMessage extends ActiveMQMessage implements ObjectMessage, TransientInitializer {
1:     private transient List<String> trustedPackages = Arrays.asList(ClassLoadingAwareObjectInputStream.serializablePackages);
1:     private transient boolean trustAllPackages = false;
1:     @Override
/////////////////////////////////////////////////////////////////////////
1:     @Override
1:     @Override
/////////////////////////////////////////////////////////////////////////
1:     @Override
/////////////////////////////////////////////////////////////////////////
1:     @Override
/////////////////////////////////////////////////////////////////////////
1:     @Override
/////////////////////////////////////////////////////////////////////////
1:     @Override
1:     @Override
/////////////////////////////////////////////////////////////////////////
1:     @Override
/////////////////////////////////////////////////////////////////////////
1: 
1:     @Override
1:     public void initTransients() {
1:         trustedPackages = Arrays.asList(ClassLoadingAwareObjectInputStream.serializablePackages);
1:         trustAllPackages = false;
1:     }
author:Hadrian Zbarcea
-------------------------------------------------------------------------------
commit:d54d046
author:Dejan Bosanac
-------------------------------------------------------------------------------
commit:eeec0c0
/////////////////////////////////////////////////////////////////////////
1: import java.util.Arrays;
/////////////////////////////////////////////////////////////////////////
0:     private List<String> trustedPackages = Arrays.asList(ClassLoadingAwareObjectInputStream.serializablePackages);
commit:94446e5
/////////////////////////////////////////////////////////////////////////
1: import java.util.ArrayList;
1: import java.util.List;
/////////////////////////////////////////////////////////////////////////
1: 
0:     private List<String> trustedPackages = new ArrayList<String>();
0:     private boolean trustAllPackages = false;
1:         copy.setTrustAllPackages(trustAllPackages);
1:         copy.setTrustedPackages(trustedPackages);
/////////////////////////////////////////////////////////////////////////
1:                 objIn.setTrustedPackages(trustedPackages);
1:                 objIn.setTrustAllPackages(trustAllPackages);
/////////////////////////////////////////////////////////////////////////
1: 
1:     public List<String> getTrustedPackages() {
1:         return trustedPackages;
1:     }
1: 
1:     public void setTrustedPackages(List<String> trustedPackages) {
1:         this.trustedPackages = trustedPackages;
1:     }
1: 
1:     public boolean isTrustAllPackages() {
1:         return trustAllPackages;
1:     }
1: 
1:     public void setTrustAllPackages(boolean trustAllPackages) {
1:         this.trustAllPackages = trustAllPackages;
1:     }
author:Hiram R. Chirino
-------------------------------------------------------------------------------
commit:3003895
/////////////////////////////////////////////////////////////////////////
1:     public void storeContentAndClear() {
1:         storeContent();
1:         object = null;
1:     }
1: 
1:     @Override
commit:9a8f6e4
commit:ecf89a6
/////////////////////////////////////////////////////////////////////////
1:     
0:     // TODO: verify classloader
0:     static final ClassLoader ACTIVEMQ_CLASSLOADER = ActiveMQObjectMessage.class.getClassLoader(); 
commit:74a7a8b
/////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////
1: import javax.jms.JMSException;
1: import javax.jms.ObjectMessage;
1: 
1: import org.apache.activemq.ActiveMQConnection;
1: import org.apache.activemq.util.ByteArrayInputStream;
1: import org.apache.activemq.util.ByteArrayOutputStream;
1: import org.apache.activemq.util.ByteSequence;
1: import org.apache.activemq.util.ClassLoadingAwareObjectInputStream;
1: import org.apache.activemq.util.JMSExceptionSupport;
1: 
commit:f812e34
/////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////
1:  * An <CODE>ObjectMessage</CODE> object is used to send a message that
1:  * contains a serializable object in the Java programming language ("Java
1:  * object"). It inherits from the <CODE>Message</CODE> interface and adds a
1:  * body containing a single reference to an object. Only
1:  * <CODE>Serializable</CODE> Java objects can be used. <p/>
1:  * <P>
1:  * If a collection of Java objects must be sent, one of the
1:  * <CODE>Collection</CODE> classes provided since JDK 1.2 can be used. <p/>
1:  * <P>
1:  * When a client receives an <CODE>ObjectMessage</CODE>, it is in read-only
1:  * mode. If a client attempts to write to the message at this point, a
1:  * <CODE>MessageNotWriteableException</CODE> is thrown. If
1:  * <CODE>clearBody</CODE> is called, the message can now be both read from and
1:  * written to.
1:  * 
/////////////////////////////////////////////////////////////////////////
0:     static final ClassLoader ACTIVEMQ_CLASSLOADER = ActiveMQObjectMessage.class.getClassLoader(); // TODO
0:                                                                                                     // verify
0:                                                                                                     // classloader
/////////////////////////////////////////////////////////////////////////
1:         copy.object = null;
1: 
/////////////////////////////////////////////////////////////////////////
1:                 if (connection != null && connection.isUseCompression()) {
/////////////////////////////////////////////////////////////////////////
1:      * Clears out the message body. Clearing a message's body does not clear its
1:      * header values or property entries. <p/>
1:      * <P>
1:      * If this message body was read-only, calling this method leaves the
1:      * message body in the same state as an empty body in a newly created
1:      * message.
1:      * 
1:      * @throws JMSException if the JMS provider fails to clear the message body
1:      *                 due to some internal error.
/////////////////////////////////////////////////////////////////////////
1:      * Sets the serializable object containing this message's data. It is
1:      * important to note that an <CODE>ObjectMessage</CODE> contains a
1:      * snapshot of the object at the time <CODE>setObject()</CODE> is called;
1:      * subsequent modifications of the object will have no effect on the
1:      * <CODE>ObjectMessage</CODE> body.
1:      * 
1:      * @throws JMSException if the JMS provider fails to set the object due to
1:      *                 some internal error.
1:      * @throws javax.jms.MessageFormatException if object serialization fails.
1:      * @throws javax.jms.MessageNotWriteableException if the message is in
1:      *                 read-only mode.
/////////////////////////////////////////////////////////////////////////
1:         if (connection == null || !connection.isObjectMessageSerializationDefered()) {
1:      * Gets the serializable object containing this message's data. The default
1:      * value is null.
1:      * 
1:         if (object == null && getContent() != null) {
1:                 if (isCompressed()) {
1:                     object = (Serializable)objIn.readObject();
/////////////////////////////////////////////////////////////////////////
1: 
1:         // lets force the object to be deserialized again - as we could have
1:         // changed the object
commit:230a86c
/////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////
1:  *      http://www.apache.org/licenses/LICENSE-2.0
commit:88acb0e
/////////////////////////////////////////////////////////////////////////
0: import org.apache.activemq.util.ByteArrayInputStream;
0: import org.apache.activemq.util.ByteArrayOutputStream;
0: import org.apache.activemq.util.ByteSequence;
0: import org.apache.activemq.util.ClassLoadingAwareObjectInputStream;
/////////////////////////////////////////////////////////////////////////
0:     static final ClassLoader ACTIVEMQ_CLASSLOADER = ActiveMQObjectMessage.class.getClassLoader(); //TODO verify classloader
/////////////////////////////////////////////////////////////////////////
1:                 ClassLoadingAwareObjectInputStream objIn = new ClassLoadingAwareObjectInputStream(dataIn);
/////////////////////////////////////////////////////////////////////////
commit:57b4941
/////////////////////////////////////////////////////////////////////////
1:  * Licensed to the Apache Software Foundation (ASF) under one or more
1:  * contributor license agreements.  See the NOTICE file distributed with
1:  * this work for additional information regarding copyright ownership.
1:  * The ASF licenses this file to You under the Apache License, Version 2.0
1:  * (the "License"); you may not use this file except in compliance with
1:  * the License.  You may obtain a copy of the License at
commit:f451ad0
/////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////
0: import javax.jms.JMSException;
0: import javax.jms.ObjectMessage;
1: 
0: import org.apache.activeio.packet.ByteSequence;
0: import org.apache.activeio.util.ByteArrayInputStream;
0: import org.apache.activeio.util.ByteArrayOutputStream;
0: import org.apache.activemq.ActiveMQConnection;
0: import org.apache.activemq.util.ClassLoading;
0: import org.apache.activemq.util.JMSExceptionSupport;
1: 
commit:48b4869
/////////////////////////////////////////////////////////////////////////
0:  * Copyright 2005-2006 The Apache Software Foundation
commit:d29ca2a
/////////////////////////////////////////////////////////////////////////
1: /**
1:  *
0:  * Copyright 2004 The Apache Software Foundation
1:  *
0:  * Licensed under the Apache License, Version 2.0 (the "License");
0:  * you may not use this file except in compliance with the License.
0:  * You may obtain a copy of the License at
1:  *
0:  * http://www.apache.org/licenses/LICENSE-2.0
1:  *
1:  * Unless required by applicable law or agreed to in writing, software
1:  * distributed under the License is distributed on an "AS IS" BASIS,
1:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:  * See the License for the specific language governing permissions and
1:  * limitations under the License.
1:  */
1: 
1: package org.apache.activemq.command;
1: 
1: 
1: 
1: 
0: import org.activeio.ByteArrayInputStream;
0: import org.activeio.ByteArrayOutputStream;
0: import org.activeio.ByteSequence;
0: import org.apache.activemq.ActiveMQConnection;
0: import org.apache.activemq.util.ClassLoading;
0: import org.apache.activemq.util.JMSExceptionSupport;
1: 
0: import javax.jms.JMSException;
0: import javax.jms.ObjectMessage;
1: import java.io.DataInputStream;
1: import java.io.DataOutputStream;
1: import java.io.IOException;
1: import java.io.InputStream;
0: import java.io.ObjectInputStream;
1: import java.io.ObjectOutputStream;
1: import java.io.OutputStream;
1: import java.io.Serializable;
0: import java.io.ObjectStreamClass;
1: import java.util.zip.DeflaterOutputStream;
1: import java.util.zip.InflaterInputStream;
0: import java.lang.reflect.Proxy;
1: 
1: /**
0:  * An <CODE>ObjectMessage</CODE> object is used to send a message that contains a serializable object in the Java
0:  * programming language ("Java object"). It inherits from the <CODE>Message</CODE> interface and adds a body containing
0:  * a single reference to an object. Only <CODE>Serializable</CODE> Java objects can be used.
0:  * <p/>
0:  * <P>If a collection of Java objects must be sent, one of the <CODE>Collection</CODE> classes provided since JDK 1.2
0:  * can be used.
0:  * <p/>
0:  * <P>When a client receives an <CODE>ObjectMessage</CODE>, it is in read-only mode. If a client attempts to write to
0:  * the message at this point, a <CODE>MessageNotWriteableException</CODE> is thrown. If <CODE>clearBody</CODE> is
0:  * called, the message can now be both read from and written to.
1:  *
0:  * @openwire:marshaller
1:  * @see javax.jms.Session#createObjectMessage()
1:  * @see javax.jms.Session#createObjectMessage(Serializable)
1:  * @see javax.jms.BytesMessage
1:  * @see javax.jms.MapMessage
1:  * @see javax.jms.Message
1:  * @see javax.jms.StreamMessage
1:  * @see javax.jms.TextMessage
1:  */
0: public class ActiveMQObjectMessage extends ActiveMQMessage implements ObjectMessage {
0:     static final private ClassLoader ACTIVEMQ_CLASSLOADER = ActiveMQObjectMessage.class.getClassLoader(); //TODO verify classloader
1:     public static final byte DATA_STRUCTURE_TYPE = CommandTypes.ACTIVEMQ_OBJECT_MESSAGE;
1: 
1:     protected transient Serializable object;
1: 
1:     public Message copy() {
1:         ActiveMQObjectMessage copy = new ActiveMQObjectMessage();
1:         copy(copy);
1:         return copy;
1:     }
1: 
1:     private void copy(ActiveMQObjectMessage copy) {
1:         storeContent();
1:         super.copy(copy);
0:         copy.object=null;
1:     }
1:         
1:     public void storeContent() {
1:         ByteSequence bodyAsBytes = getContent();
1:         if (bodyAsBytes == null && object != null) {
1:             try {
1:                 ByteArrayOutputStream bytesOut = new ByteArrayOutputStream();
1:                 OutputStream os = bytesOut;
1:                 ActiveMQConnection connection = getConnection();
0:                 if (connection!=null && connection.isUseCompression()) {
1:                     compressed = true;
1:                     os = new DeflaterOutputStream(os);
1:                 }
1:                 DataOutputStream dataOut = new DataOutputStream(os);
1:                 ObjectOutputStream objOut = new ObjectOutputStream(dataOut);
1:                 objOut.writeObject(object);
1:                 objOut.close();
1:                 setContent(bytesOut.toByteSequence());
1:             } catch (IOException ioe) {
1:                 throw new RuntimeException(ioe.getMessage(), ioe);
1:             }
1:         }
1:     }
1: 
1:     public byte getDataStructureType() {
1:         return DATA_STRUCTURE_TYPE;
1:     }
1: 
1:     /**
0:      * Clears out the message body. Clearing a message's body does not clear its header values or property entries.
0:      * <p/>
0:      * <P>If this message body was read-only, calling this method leaves the message body in the same state as an empty
0:      * body in a newly created message.
1:      *
0:      * @throws JMSException if the JMS provider fails to clear the message body due to some internal error.
1:      */
1: 
1:     public void clearBody() throws JMSException {
1:         super.clearBody();
1:         this.object = null;
1:     }
1: 
1:     /**
0:      * Sets the serializable object containing this message's data. It is important to note that an
0:      * <CODE>ObjectMessage</CODE> contains a snapshot of the object at the time <CODE>setObject()</CODE> is called;
0:      * subsequent modifications of the object will have no effect on the <CODE>ObjectMessage</CODE> body.
1:      *
1:      * @param newObject the message's data
0:      * @throws JMSException if the JMS provider fails to set the object due to some internal error.
0:      * @throws javax.jms.MessageFormatException
0:      *                      if object serialization fails.
0:      * @throws javax.jms.MessageNotWriteableException
0:      *                      if the message is in read-only mode.
1:      */
1: 
1:     public void setObject(Serializable newObject) throws JMSException {
1:         checkReadOnlyBody();
1:         this.object = newObject;
1:         setContent(null);
1:         ActiveMQConnection connection = getConnection();
0:         if( connection==null || !connection.isObjectMessageSerializationDefered() ) {
1:             storeContent();
1:         }
1:     }
1: 
1: 
1:     /**
0:      * Gets the serializable object containing this message's data. The default value is null.
1:      *
1:      * @return the serializable object containing this message's data
1:      * @throws JMSException
1:      */
1:     public Serializable getObject() throws JMSException {
0:         if (object == null && getContent()!=null ) {
1:             try {
1:                 ByteSequence content = getContent();
1:                 InputStream is = new ByteArrayInputStream(content);
0:                 if( isCompressed() ) {
1:                     is = new InflaterInputStream(is);
1:                 }
1:                 DataInputStream dataIn = new DataInputStream(is);
0:                 ObjectInputStreamExt objIn = new ObjectInputStreamExt(dataIn);
1:                 try {
0:                     object = (Serializable) objIn.readObject();
1:                 } catch (ClassNotFoundException ce) {
0:                     throw new IOException(ce.getMessage());
1:                 }
1:                 dataIn.close();
1:             } catch (IOException e) {
1:                 throw JMSExceptionSupport.create("Failed to build body from bytes. Reason: " + e, e);
1:             }
1:         }
1:         return this.object;
1:     }
1: 
1:     public String toString() {
1:         try {
1:             getObject();
1:         } catch (JMSException e) {
1:         }
1:         return super.toString();
1:     }
1: 
0:     static public class ObjectInputStreamExt extends ObjectInputStream {
1: 
0:         public ObjectInputStreamExt(InputStream in) throws IOException {
0:             super(in);
1:         }
1: 
0:         protected Class resolveClass(ObjectStreamClass classDesc) throws IOException, ClassNotFoundException {
0:             ClassLoader cl = Thread.currentThread().getContextClassLoader();
0:             return load(classDesc.getName(), cl);
1:         }
1: 
0:         protected Class resolveProxyClass(String[] interfaces) throws IOException, ClassNotFoundException {
0:             ClassLoader cl = Thread.currentThread().getContextClassLoader();
0:             Class[] cinterfaces = new Class[interfaces.length];
0:             for (int i = 0; i < interfaces.length; i++)
0:                 cinterfaces[i] = load(interfaces[i], cl);
1: 
1:             try {
0:                 return Proxy.getProxyClass(cinterfaces[0].getClassLoader(), cinterfaces);
0:             } catch (IllegalArgumentException e) {
0:                 throw new ClassNotFoundException(null, e);
1:             }
1:         }
1: 
0:         private Class load(String className, ClassLoader cl) throws ClassNotFoundException {
1:             try {
0:                 return ClassLoading.loadClass(className, cl);
0:             } catch ( ClassNotFoundException e ) {
0:                 return ClassLoading.loadClass(className, ACTIVEMQ_CLASSLOADER);
1:             }
1:         }
1: 
1:     }
1: }
author:Timothy A. Bish
-------------------------------------------------------------------------------
commit:41c9366
/////////////////////////////////////////////////////////////////////////
0:  *
/////////////////////////////////////////////////////////////////////////
0: 
0:     static final ClassLoader ACTIVEMQ_CLASSLOADER = ActiveMQObjectMessage.class.getClassLoader();
/////////////////////////////////////////////////////////////////////////
0: 
1:     @Override
/////////////////////////////////////////////////////////////////////////
0:      *
/////////////////////////////////////////////////////////////////////////
0:      *
/////////////////////////////////////////////////////////////////////////
0:      *
/////////////////////////////////////////////////////////////////////////
1:     @Override
1:     public void compress() throws IOException {
1:         storeContent();
1:         super.compress();
0:     }
0: 
author:Gary Tully
-------------------------------------------------------------------------------
commit:c1da3ac
/////////////////////////////////////////////////////////////////////////
0:     public void clearMarshalledState() throws JMSException {
0:         super.clearMarshalledState();
1:         this.object = null;
0:     }
0: 
commit:0585bc1
/////////////////////////////////////////////////////////////////////////
1: import org.apache.activemq.wireformat.WireFormat;
/////////////////////////////////////////////////////////////////////////
1:     @Override
1:     public void beforeMarshall(WireFormat wireFormat) throws IOException {
1:         super.beforeMarshall(wireFormat);
1:         // may have initiated on vm transport with deferred marshalling
1:         storeContent();
0:     }
0: 
commit:e9f30fe
/////////////////////////////////////////////////////////////////////////
1:         ActiveMQConnection connection = getConnection();
1:         if (connection == null || !connection.isObjectMessageSerializationDefered()) {
0:             storeContent();
0:             copy.object = null;
1:         } else {
1:             copy.object = object;
0:         }
0:         
commit:7b16aec
/////////////////////////////////////////////////////////////////////////
1:                     throw JMSExceptionSupport.create("Failed to build body from content. Serializable class not available to broker. Reason: " + ce, ce);
1:                 } finally {
0:                     dataIn.close();
author:James Strachan
-------------------------------------------------------------------------------
commit:05a8cba
/////////////////////////////////////////////////////////////////////////
0: import org.apache.activemq.ActiveMQConnection;
0: import org.apache.activemq.util.ByteArrayInputStream;
0: import org.apache.activemq.util.ByteArrayOutputStream;
0: import org.apache.activemq.util.ByteSequence;
0: import org.apache.activemq.util.ClassLoadingAwareObjectInputStream;
0: import org.apache.activemq.util.JMSExceptionSupport;
0: 
0: import javax.jms.JMSException;
0: import javax.jms.ObjectMessage;
/////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////
1:     public String getJMSXMimeType() {
1:         return "jms/object-message";
0:     }
0: 
0: 
commit:8d42a5a
/////////////////////////////////////////////////////////////////////////
1:                 objOut.flush();
1:                 objOut.reset();
commit:d9b9427
/////////////////////////////////////////////////////////////////////////
0: 
0: import java.io.ObjectStreamClass;
0: import java.lang.reflect.Proxy;
/////////////////////////////////////////////////////////////////////////
1:     public void onMessageRolledBack() {
1:         super.onMessageRolledBack();
0:         
0:         // lets force the object to be deserialized again - as we could have changed the object
1:         object = null;
0:     }
0: 
commit:4afa5d6
/////////////////////////////////////////////////////////////////////////
1:  * @openwire:marshaller code="26"
============================================================================