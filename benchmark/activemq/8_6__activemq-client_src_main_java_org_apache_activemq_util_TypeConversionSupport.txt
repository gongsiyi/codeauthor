1:d29ca2a: /**
1:57b4941:  * Licensed to the Apache Software Foundation (ASF) under one or more
1:57b4941:  * contributor license agreements.  See the NOTICE file distributed with
1:57b4941:  * this work for additional information regarding copyright ownership.
1:57b4941:  * The ASF licenses this file to You under the Apache License, Version 2.0
1:57b4941:  * (the "License"); you may not use this file except in compliance with
1:57b4941:  * the License.  You may obtain a copy of the License at
3:d29ca2a:  *
1:230a86c:  *      http://www.apache.org/licenses/LICENSE-2.0
1:d29ca2a:  *
1:d29ca2a:  * Unless required by applicable law or agreed to in writing, software
1:d29ca2a:  * distributed under the License is distributed on an "AS IS" BASIS,
1:d29ca2a:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:d29ca2a:  * See the License for the specific language governing permissions and
1:d29ca2a:  * limitations under the License.
1:d29ca2a:  */
1:d29ca2a: package org.apache.activemq.util;
1:d29ca2a: 
1:25a1dd0: import java.math.BigInteger;
1:1802116: import java.net.URI;
1:1802116: import java.net.URISyntaxException;
1:07d4e8c: import java.util.Date;
1:d29ca2a: import java.util.HashMap;
1:b749228: import java.util.Map;
1:d29ca2a: 
1:07d4e8c: import org.apache.activemq.command.ActiveMQDestination;
1:543935b: import org.fusesource.hawtbuf.UTF8Buffer;
1:07d4e8c: 
1:1802116: /**
1:1802116:  * Type conversion support for ActiveMQ.
1:1802116:  */
1:933eb2f: public final class TypeConversionSupport {
1:d29ca2a: 
1:f7c7993:     private static final Converter IDENTITY_CONVERTER = new Converter() {
1:f7c7993:         @Override
1:f7c7993:         public Object convert(Object value) {
1:d29ca2a:             return value;
1:f7c7993:         }
1:f7c7993:     };
1:d29ca2a: 
1:b749228:     private static class ConversionKey {
1:543935b:         final Class<?> from;
1:543935b:         final Class<?> to;
1:d29ca2a:         final int hashCode;
1:f7c7993: 
1:543935b:         public ConversionKey(Class<?> from, Class<?> to) {
1:d29ca2a:             this.from = from;
1:d29ca2a:             this.to = to;
1:d29ca2a:             this.hashCode = from.hashCode() ^ (to.hashCode() << 1);
1:d29ca2a:         }
1:d29ca2a: 
1:543935b:         @Override
1:2b99ffc:         public boolean equals(Object obj) {
1:2b99ffc:             if (this == obj)
1:2b99ffc:                 return true;
1:2b99ffc:             if (obj == null)
1:2b99ffc:                 return false;
1:2b99ffc:             if (getClass() != obj.getClass())
1:2b99ffc:                 return false;
1:2b99ffc:             ConversionKey other = (ConversionKey) obj;
1:2b99ffc:             if (from == null) {
1:2b99ffc:                 if (other.from != null)
1:2b99ffc:                     return false;
1:2b99ffc:             } else if (!from.equals(other.from))
1:2b99ffc:                 return false;
1:2b99ffc:             if (to == null) {
1:2b99ffc:                 if (other.to != null)
1:2b99ffc:                     return false;
1:2b99ffc:             } else if (!to.equals(other.to))
1:2b99ffc:                 return false;
1:2b99ffc:             return true;
1:d29ca2a:         }
1:d29ca2a: 
1:543935b:         @Override
1:d29ca2a:         public int hashCode() {
1:d29ca2a:             return hashCode;
1:d29ca2a:         }
1:d29ca2a:     }
1:d29ca2a: 
1:1802116:     public interface Converter {
1:d29ca2a:         Object convert(Object value);
1:d29ca2a:     }
1:d29ca2a: 
1:b749228:     private static final Map<ConversionKey, Converter> CONVERSION_MAP = new HashMap<ConversionKey, Converter>();
1:d29ca2a:     static {
1:d29ca2a:         Converter toStringConverter = new Converter() {
1:543935b:             @Override
1:d29ca2a:             public Object convert(Object value) {
1:d29ca2a:                 return value.toString();
1:d29ca2a:             }
1:d29ca2a:         };
1:d29ca2a:         CONVERSION_MAP.put(new ConversionKey(Boolean.class, String.class), toStringConverter);
1:d29ca2a:         CONVERSION_MAP.put(new ConversionKey(Byte.class, String.class), toStringConverter);
1:d29ca2a:         CONVERSION_MAP.put(new ConversionKey(Short.class, String.class), toStringConverter);
1:d29ca2a:         CONVERSION_MAP.put(new ConversionKey(Integer.class, String.class), toStringConverter);
1:d29ca2a:         CONVERSION_MAP.put(new ConversionKey(Long.class, String.class), toStringConverter);
1:d29ca2a:         CONVERSION_MAP.put(new ConversionKey(Float.class, String.class), toStringConverter);
1:d29ca2a:         CONVERSION_MAP.put(new ConversionKey(Double.class, String.class), toStringConverter);
1:543935b:         CONVERSION_MAP.put(new ConversionKey(UTF8Buffer.class, String.class), toStringConverter);
1:25a1dd0:         CONVERSION_MAP.put(new ConversionKey(URI.class, String.class), toStringConverter);
1:25a1dd0:         CONVERSION_MAP.put(new ConversionKey(BigInteger.class, String.class), toStringConverter);
1:d29ca2a: 
1:d29ca2a:         CONVERSION_MAP.put(new ConversionKey(String.class, Boolean.class), new Converter() {
1:543935b:             @Override
1:d29ca2a:             public Object convert(Object value) {
1:933eb2f:                 return Boolean.valueOf((String)value);
1:d29ca2a:             }
1:d29ca2a:         });
1:d29ca2a:         CONVERSION_MAP.put(new ConversionKey(String.class, Byte.class), new Converter() {
1:543935b:             @Override
1:d29ca2a:             public Object convert(Object value) {
1:933eb2f:                 return Byte.valueOf((String)value);
1:fc00993:             }
1:d29ca2a:         });
1:d29ca2a:         CONVERSION_MAP.put(new ConversionKey(String.class, Short.class), new Converter() {
1:543935b:             @Override
1:d29ca2a:             public Object convert(Object value) {
1:933eb2f:                 return Short.valueOf((String)value);
1:d29ca2a:             }
1:d29ca2a:         });
1:d29ca2a:         CONVERSION_MAP.put(new ConversionKey(String.class, Integer.class), new Converter() {
1:543935b:             @Override
1:d29ca2a:             public Object convert(Object value) {
1:933eb2f:                 return Integer.valueOf((String)value);
1:d29ca2a:             }
1:d29ca2a:         });
1:d29ca2a:         CONVERSION_MAP.put(new ConversionKey(String.class, Long.class), new Converter() {
1:543935b:             @Override
1:d29ca2a:             public Object convert(Object value) {
1:933eb2f:                 return Long.valueOf((String)value);
1:d29ca2a:             }
1:d29ca2a:         });
1:d29ca2a:         CONVERSION_MAP.put(new ConversionKey(String.class, Float.class), new Converter() {
1:543935b:             @Override
1:d29ca2a:             public Object convert(Object value) {
1:933eb2f:                 return Float.valueOf((String)value);
1:d29ca2a:             }
1:d29ca2a:         });
1:d29ca2a:         CONVERSION_MAP.put(new ConversionKey(String.class, Double.class), new Converter() {
1:543935b:             @Override
1:d29ca2a:             public Object convert(Object value) {
1:933eb2f:                 return Double.valueOf((String)value);
1:d29ca2a:             }
1:d29ca2a:         });
1:d29ca2a: 
1:d29ca2a:         Converter longConverter = new Converter() {
1:543935b:             @Override
1:d29ca2a:             public Object convert(Object value) {
1:933eb2f:                 return Long.valueOf(((Number)value).longValue());
1:d29ca2a:             }
1:d29ca2a:         };
1:d29ca2a:         CONVERSION_MAP.put(new ConversionKey(Byte.class, Long.class), longConverter);
1:d29ca2a:         CONVERSION_MAP.put(new ConversionKey(Short.class, Long.class), longConverter);
1:d29ca2a:         CONVERSION_MAP.put(new ConversionKey(Integer.class, Long.class), longConverter);
1:07d4e8c:         CONVERSION_MAP.put(new ConversionKey(Date.class, Long.class), new Converter() {
1:543935b:             @Override
1:07d4e8c:             public Object convert(Object value) {
1:933eb2f:                 return Long.valueOf(((Date)value).getTime());
1:07d4e8c:             }
1:07d4e8c:         });
1:d29ca2a: 
1:d29ca2a:         Converter intConverter = new Converter() {
1:543935b:             @Override
1:d29ca2a:             public Object convert(Object value) {
1:933eb2f:                 return Integer.valueOf(((Number)value).intValue());
1:d29ca2a:             }
1:d29ca2a:         };
1:d29ca2a:         CONVERSION_MAP.put(new ConversionKey(Byte.class, Integer.class), intConverter);
1:d29ca2a:         CONVERSION_MAP.put(new ConversionKey(Short.class, Integer.class), intConverter);
1:d29ca2a: 
1:d29ca2a:         CONVERSION_MAP.put(new ConversionKey(Byte.class, Short.class), new Converter() {
1:543935b:             @Override
1:d29ca2a:             public Object convert(Object value) {
1:933eb2f:                 return Short.valueOf(((Number)value).shortValue());
1:d29ca2a:             }
1:d29ca2a:         });
1:933eb2f: 
1:d29ca2a:         CONVERSION_MAP.put(new ConversionKey(Float.class, Double.class), new Converter() {
1:543935b:             @Override
1:d29ca2a:             public Object convert(Object value) {
1:933eb2f:                 return new Double(((Number)value).doubleValue());
1:d29ca2a:             }
1:d29ca2a:         });
1:07d4e8c:         CONVERSION_MAP.put(new ConversionKey(String.class, ActiveMQDestination.class), new Converter() {
1:543935b:             @Override
1:07d4e8c:             public Object convert(Object value) {
1:933eb2f:                 return ActiveMQDestination.createDestination((String)value, ActiveMQDestination.QUEUE_TYPE);
1:07d4e8c:             }
1:07d4e8c:         });
1:1802116:         CONVERSION_MAP.put(new ConversionKey(String.class, URI.class), new Converter() {
1:543935b:             @Override
1:1802116:             public Object convert(Object value) {
1:1802116:                 String text = value.toString();
1:1802116:                 try {
1:1802116:                     return new URI(text);
1:1802116:                 } catch (URISyntaxException e) {
1:1802116:                     throw new RuntimeException(e);
1:d29ca2a:                 }
1:d29ca2a:             }
1:1802116:         });
1:1802116:     }
1:d29ca2a: 
1:933eb2f:     private TypeConversionSupport() {
1:933eb2f:     }
1:933eb2f: 
1:543935b:     public static Object convert(Object value, Class<?> to) {
1:b749228:         if (value == null) {
1:b749228:             // lets avoid NullPointerException when converting to boolean for null values
1:1802116:             if (boolean.class.isAssignableFrom(to)) {
1:b749228:                 return Boolean.FALSE;
1:1802116:             }
1:d29ca2a:             return null;
1:fc00993:         }
1:d29ca2a: 
1:b749228:         // eager same instance type test to avoid the overhead of invoking the type converter
1:b749228:         // if already same type
1:1802116:         if (to.isInstance(value)) {
1:1802116:             return to.cast(value);
2:b749228:         }
1:d29ca2a: 
1:b749228:         // lookup converter
1:1802116:         Converter c = lookupConverter(value.getClass(), to);
1:b749228:         if (c != null) {
1:d29ca2a:             return c.convert(value);
1:b749228:         } else {
1:b749228:             return null;
1:d29ca2a:         }
1:d29ca2a:     }
1:d29ca2a: 
1:543935b:     public static Converter lookupConverter(Class<?> from, Class<?> to) {
1:1802116:         // use wrapped type for primitives
1:1802116:         if (from.isPrimitive()) {
1:1802116:             from = convertPrimitiveTypeToWrapperType(from);
1:1802116:         }
1:1802116:         if (to.isPrimitive()) {
1:1802116:             to = convertPrimitiveTypeToWrapperType(to);
1:1802116:         }
1:d29ca2a: 
1:f7c7993:         if (from.equals(to)) {
1:f7c7993:             return IDENTITY_CONVERTER;
1:f7c7993:         }
1:d29ca2a: 
1:1802116:         return CONVERSION_MAP.get(new ConversionKey(from, to));
1:1802116:     }
1:d29ca2a: 
1:1802116:     /**
1:1802116:      * Converts primitive types such as int to its wrapper type like
1:1802116:      * {@link Integer}
1:1802116:      */
1:1802116:     private static Class<?> convertPrimitiveTypeToWrapperType(Class<?> type) {
1:1802116:         Class<?> rc = type;
1:1802116:         if (type.isPrimitive()) {
1:1802116:             if (type == int.class) {
1:1802116:                 rc = Integer.class;
1:1802116:             } else if (type == long.class) {
1:1802116:                 rc = Long.class;
1:1802116:             } else if (type == double.class) {
1:1802116:                 rc = Double.class;
1:1802116:             } else if (type == float.class) {
1:1802116:                 rc = Float.class;
1:1802116:             } else if (type == short.class) {
1:1802116:                 rc = Short.class;
1:1802116:             } else if (type == byte.class) {
1:1802116:                 rc = Byte.class;
1:1802116:             } else if (type == boolean.class) {
1:1802116:                 rc = Boolean.class;
1:1802116:             }
1:1802116:         }
1:1802116:         return rc;
1:1802116:     }
1:b749228: }
============================================================================
author:Hadrian Zbarcea
-------------------------------------------------------------------------------
commit:d54d046
author:Christopher L. Shannon (cshannon)
-------------------------------------------------------------------------------
commit:2b99ffc
/////////////////////////////////////////////////////////////////////////
1:         public boolean equals(Object obj) {
1:             if (this == obj)
1:                 return true;
1:             if (obj == null)
1:                 return false;
1:             if (getClass() != obj.getClass())
1:                 return false;
1:             ConversionKey other = (ConversionKey) obj;
1:             if (from == null) {
1:                 if (other.from != null)
1:                     return false;
1:             } else if (!from.equals(other.from))
1:                 return false;
1:             if (to == null) {
1:                 if (other.to != null)
1:                     return false;
1:             } else if (!to.equals(other.to))
1:                 return false;
1:             return true;
author:Gary Tully
-------------------------------------------------------------------------------
commit:25a1dd0
/////////////////////////////////////////////////////////////////////////
1: import java.math.BigInteger;
/////////////////////////////////////////////////////////////////////////
1:         CONVERSION_MAP.put(new ConversionKey(URI.class, String.class), toStringConverter);
1:         CONVERSION_MAP.put(new ConversionKey(BigInteger.class, String.class), toStringConverter);
author:Timothy A. Bish
-------------------------------------------------------------------------------
commit:543935b
/////////////////////////////////////////////////////////////////////////
1: import org.fusesource.hawtbuf.UTF8Buffer;
/////////////////////////////////////////////////////////////////////////
1:         final Class<?> from;
1:         final Class<?> to;
1:         public ConversionKey(Class<?> from, Class<?> to) {
1:         @Override
1:         @Override
/////////////////////////////////////////////////////////////////////////
1:             @Override
/////////////////////////////////////////////////////////////////////////
1:         CONVERSION_MAP.put(new ConversionKey(UTF8Buffer.class, String.class), toStringConverter);
1:             @Override
1:             @Override
1:             @Override
1:             @Override
1:             @Override
1:             @Override
1:             @Override
1:             @Override
/////////////////////////////////////////////////////////////////////////
1:             @Override
1:             @Override
/////////////////////////////////////////////////////////////////////////
1:             @Override
1:             @Override
1:             @Override
1:             @Override
/////////////////////////////////////////////////////////////////////////
1:     public static Object convert(Object value, Class<?> to) {
/////////////////////////////////////////////////////////////////////////
1:     public static Converter lookupConverter(Class<?> from, Class<?> to) {
/////////////////////////////////////////////////////////////////////////
author:Hiram R. Chirino
-------------------------------------------------------------------------------
commit:9a8f6e4
commit:933eb2f
/////////////////////////////////////////////////////////////////////////
1: public final class TypeConversionSupport {
/////////////////////////////////////////////////////////////////////////
0:             ConversionKey x = (ConversionKey)o;
/////////////////////////////////////////////////////////////////////////
0:     private static final HashMap<ConversionKey, Converter> CONVERSION_MAP = new HashMap<ConversionKey, Converter>();
/////////////////////////////////////////////////////////////////////////
1:                 return Boolean.valueOf((String)value);
1:                 return Byte.valueOf((String)value);
1:                 return Short.valueOf((String)value);
1:                 return Integer.valueOf((String)value);
1:                 return Long.valueOf((String)value);
1:                 return Float.valueOf((String)value);
1:                 return Double.valueOf((String)value);
1:                 return Long.valueOf(((Number)value).longValue());
/////////////////////////////////////////////////////////////////////////
1:                 return Long.valueOf(((Date)value).getTime());
1:                 return Integer.valueOf(((Number)value).intValue());
/////////////////////////////////////////////////////////////////////////
1:                 return Short.valueOf(((Number)value).shortValue());
1: 
1:                 return new Double(((Number)value).doubleValue());
1:                 return ActiveMQDestination.createDestination((String)value, ActiveMQDestination.QUEUE_TYPE);
1:     private TypeConversionSupport() {
1:     }
1: 
/////////////////////////////////////////////////////////////////////////
0:         Converter c = CONVERSION_MAP.get(new ConversionKey(value.getClass(), clazz));
commit:fc00993
/////////////////////////////////////////////////////////////////////////
0:     private static final HashMap CONVERSION_MAP = new HashMap();
/////////////////////////////////////////////////////////////////////////
0:     public static Object convert(Object value, Class clazz) {
0:         if (value.getClass() == clazz) {
1:         }
0:         if (c == null) {
1:         }
commit:230a86c
/////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////
1:  *      http://www.apache.org/licenses/LICENSE-2.0
commit:57b4941
/////////////////////////////////////////////////////////////////////////
1:  * Licensed to the Apache Software Foundation (ASF) under one or more
1:  * contributor license agreements.  See the NOTICE file distributed with
1:  * this work for additional information regarding copyright ownership.
1:  * The ASF licenses this file to You under the Apache License, Version 2.0
1:  * (the "License"); you may not use this file except in compliance with
1:  * the License.  You may obtain a copy of the License at
commit:07d4e8c
/////////////////////////////////////////////////////////////////////////
1: import java.util.Date;
1: import org.apache.activemq.command.ActiveMQDestination;
1: 
/////////////////////////////////////////////////////////////////////////
1:         CONVERSION_MAP.put(new ConversionKey(Date.class, Long.class), new Converter() {
1:             public Object convert(Object value) {
0:                 return new Long(((Date) value).getTime());
1:             }
1:         });
/////////////////////////////////////////////////////////////////////////
1:         CONVERSION_MAP.put(new ConversionKey(String.class, ActiveMQDestination.class), new Converter() {
1:             public Object convert(Object value) {
0:                 return ActiveMQDestination.createDestination((String) value, ActiveMQDestination.QUEUE_TYPE);
1:             }
1:         });
commit:48b4869
/////////////////////////////////////////////////////////////////////////
0:  * Copyright 2005-2006 The Apache Software Foundation
commit:d29ca2a
/////////////////////////////////////////////////////////////////////////
1: /**
1:  *
0:  * Copyright 2004 The Apache Software Foundation
1:  *
0:  * Licensed under the Apache License, Version 2.0 (the "License");
0:  * you may not use this file except in compliance with the License.
0:  * You may obtain a copy of the License at
1:  *
0:  * http://www.apache.org/licenses/LICENSE-2.0
1:  *
1:  * Unless required by applicable law or agreed to in writing, software
1:  * distributed under the License is distributed on an "AS IS" BASIS,
1:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:  * See the License for the specific language governing permissions and
1:  * limitations under the License.
1:  */
1: package org.apache.activemq.util;
1: 
1: import java.util.HashMap;
1: 
0: public class TypeConversionSupport {
1: 
0:     static class ConversionKey {
0:         final Class from;
0:         final Class to;
1:         final int hashCode;
1: 
0:         public ConversionKey(Class from, Class to) {
1:             this.from = from;
1:             this.to = to;
1:             this.hashCode = from.hashCode() ^ (to.hashCode() << 1);
1:         }
1: 
0:         public boolean equals(Object o) {
0:             ConversionKey x = (ConversionKey) o;
0:             return x.from == from && x.to == to;
1:         }
1: 
1:         public int hashCode() {
1:             return hashCode;
1:         }
1:     }
1: 
0:     interface Converter {
1:         Object convert(Object value);
1:     }
1: 
0:     static final private HashMap CONVERSION_MAP = new HashMap();
1:     static {
1:         Converter toStringConverter = new Converter() {
1:             public Object convert(Object value) {
1:                 return value.toString();
1:             }
1:         };
1:         CONVERSION_MAP.put(new ConversionKey(Boolean.class, String.class), toStringConverter);
1:         CONVERSION_MAP.put(new ConversionKey(Byte.class, String.class), toStringConverter);
1:         CONVERSION_MAP.put(new ConversionKey(Short.class, String.class), toStringConverter);
1:         CONVERSION_MAP.put(new ConversionKey(Integer.class, String.class), toStringConverter);
1:         CONVERSION_MAP.put(new ConversionKey(Long.class, String.class), toStringConverter);
1:         CONVERSION_MAP.put(new ConversionKey(Float.class, String.class), toStringConverter);
1:         CONVERSION_MAP.put(new ConversionKey(Double.class, String.class), toStringConverter);
1: 
1:         CONVERSION_MAP.put(new ConversionKey(String.class, Boolean.class), new Converter() {
1:             public Object convert(Object value) {
0:                 return Boolean.valueOf((String) value);
1:             }
1:         });
1:         CONVERSION_MAP.put(new ConversionKey(String.class, Byte.class), new Converter() {
1:             public Object convert(Object value) {
0:                 return Byte.valueOf((String) value);
1:             }
1:         });
1:         CONVERSION_MAP.put(new ConversionKey(String.class, Short.class), new Converter() {
1:             public Object convert(Object value) {
0:                 return Short.valueOf((String) value);
1:             }
1:         });
1:         CONVERSION_MAP.put(new ConversionKey(String.class, Integer.class), new Converter() {
1:             public Object convert(Object value) {
0:                 return Integer.valueOf((String) value);
1:             }
1:         });
1:         CONVERSION_MAP.put(new ConversionKey(String.class, Long.class), new Converter() {
1:             public Object convert(Object value) {
0:                 return Long.valueOf((String) value);
1:             }
1:         });
1:         CONVERSION_MAP.put(new ConversionKey(String.class, Float.class), new Converter() {
1:             public Object convert(Object value) {
0:                 return Float.valueOf((String) value);
1:             }
1:         });
1:         CONVERSION_MAP.put(new ConversionKey(String.class, Double.class), new Converter() {
1:             public Object convert(Object value) {
0:                 return Double.valueOf((String) value);
1:             }
1:         });
1: 
1:         Converter longConverter = new Converter() {
1:             public Object convert(Object value) {
0:                 return new Long(((Number) value).longValue());
1:             }
1:         };
1:         CONVERSION_MAP.put(new ConversionKey(Byte.class, Long.class), longConverter);
1:         CONVERSION_MAP.put(new ConversionKey(Short.class, Long.class), longConverter);
1:         CONVERSION_MAP.put(new ConversionKey(Integer.class, Long.class), longConverter);
1: 
1:         Converter intConverter = new Converter() {
1:             public Object convert(Object value) {
0:                 return new Integer(((Number) value).intValue());
1:             }
1:         };
1:         CONVERSION_MAP.put(new ConversionKey(Byte.class, Integer.class), intConverter);
1:         CONVERSION_MAP.put(new ConversionKey(Short.class, Integer.class), intConverter);
1: 
1:         CONVERSION_MAP.put(new ConversionKey(Byte.class, Short.class), new Converter() {
1:             public Object convert(Object value) {
0:                 return new Short(((Number) value).shortValue());
1:             }
1:         });
1:         
1:         CONVERSION_MAP.put(new ConversionKey(Float.class, Double.class), new Converter() {
1:             public Object convert(Object value) {
0:                 return new Double(((Number) value).doubleValue());
1:             }
1:         });
1:     }
1: 
0:     static public Object convert(Object value, Class clazz) {
1: 
0:         assert value != null && clazz != null;
1: 
0:         if (value.getClass() == clazz)
1:             return value;
1: 
0:         Converter c = (Converter) CONVERSION_MAP.get(new ConversionKey(value.getClass(), clazz));
0:         if (c == null)
1:             return null;
1:         return c.convert(value);
1: 
1:     }
1: 
1: }
author:Christian Posta
-------------------------------------------------------------------------------
commit:f7c7993
/////////////////////////////////////////////////////////////////////////
1:     private static final Converter IDENTITY_CONVERTER = new Converter() {
1:         @Override
1:         public Object convert(Object value) {
0:             return value;
1:         }
1:     };
1: 
/////////////////////////////////////////////////////////////////////////
1:         if (from.equals(to)) {
1:             return IDENTITY_CONVERTER;
1:         }
0: 
author:Claus Ibsen
-------------------------------------------------------------------------------
commit:1802116
/////////////////////////////////////////////////////////////////////////
1: import java.net.URI;
1: import java.net.URISyntaxException;
1: /**
1:  * Type conversion support for ActiveMQ.
1:  */
/////////////////////////////////////////////////////////////////////////
1:     public interface Converter {
/////////////////////////////////////////////////////////////////////////
1:         CONVERSION_MAP.put(new ConversionKey(String.class, URI.class), new Converter() {
1:             public Object convert(Object value) {
1:                 String text = value.toString();
1:                 try {
1:                     return new URI(text);
1:                 } catch (URISyntaxException e) {
1:                     throw new RuntimeException(e);
1:                 }
1:             }
1:         });
0:     public static Object convert(Object value, Class to) {
1:             if (boolean.class.isAssignableFrom(to)) {
/////////////////////////////////////////////////////////////////////////
1:         if (to.isInstance(value)) {
1:             return to.cast(value);
1:         Converter c = lookupConverter(value.getClass(), to);
/////////////////////////////////////////////////////////////////////////
0:     public static Converter lookupConverter(Class from, Class to) {
1:         // use wrapped type for primitives
1:         if (from.isPrimitive()) {
1:             from = convertPrimitiveTypeToWrapperType(from);
1:         }
1:         if (to.isPrimitive()) {
1:             to = convertPrimitiveTypeToWrapperType(to);
1:         }
0: 
1:         return CONVERSION_MAP.get(new ConversionKey(from, to));
1:     }
0: 
1:     /**
1:      * Converts primitive types such as int to its wrapper type like
1:      * {@link Integer}
1:      */
1:     private static Class<?> convertPrimitiveTypeToWrapperType(Class<?> type) {
1:         Class<?> rc = type;
1:         if (type.isPrimitive()) {
1:             if (type == int.class) {
1:                 rc = Integer.class;
1:             } else if (type == long.class) {
1:                 rc = Long.class;
1:             } else if (type == double.class) {
1:                 rc = Double.class;
1:             } else if (type == float.class) {
1:                 rc = Float.class;
1:             } else if (type == short.class) {
1:                 rc = Short.class;
1:             } else if (type == byte.class) {
1:                 rc = Byte.class;
1:             } else if (type == boolean.class) {
1:                 rc = Boolean.class;
1:             }
1:         }
1:         return rc;
1:     }
0: 
commit:b749228
/////////////////////////////////////////////////////////////////////////
1: import java.util.Map;
1:     private static class ConversionKey {
/////////////////////////////////////////////////////////////////////////
1:     private static final Map<ConversionKey, Converter> CONVERSION_MAP = new HashMap<ConversionKey, Converter>();
/////////////////////////////////////////////////////////////////////////
0:     public static Object convert(Object value, Class type) {
1:         if (value == null) {
1:             // lets avoid NullPointerException when converting to boolean for null values
0:             if (boolean.class.isAssignableFrom(type)) {
1:                 return Boolean.FALSE;
1:             }
1:         // eager same instance type test to avoid the overhead of invoking the type converter
1:         // if already same type
0:         if (type.isInstance(value)) {
0:             return type.cast(value);
1:         }
0: 
1:         // lookup converter
0:         Converter c = CONVERSION_MAP.get(new ConversionKey(value.getClass(), type));
1:         if (c != null) {
0:             return c.convert(value);
1:         } else {
1:             return null;
1:         }
author:Robert Davies
-------------------------------------------------------------------------------
commit:d36c0d4
/////////////////////////////////////////////////////////////////////////
0:                 return Long.valueOf(((Number) value).longValue());
/////////////////////////////////////////////////////////////////////////
0:                 return Long.valueOf(((Date) value).getTime());
0:                 return Integer.valueOf(((Number) value).intValue());
/////////////////////////////////////////////////////////////////////////
0:                 return Short.valueOf(((Number) value).shortValue());
============================================================================