1:d29ca2a: /**
1:57b4941:  * Licensed to the Apache Software Foundation (ASF) under one or more
1:57b4941:  * contributor license agreements.  See the NOTICE file distributed with
1:57b4941:  * this work for additional information regarding copyright ownership.
1:57b4941:  * The ASF licenses this file to You under the Apache License, Version 2.0
1:57b4941:  * (the "License"); you may not use this file except in compliance with
1:57b4941:  * the License.  You may obtain a copy of the License at
1:b0c2a40:  *
1:230a86c:  *      http://www.apache.org/licenses/LICENSE-2.0
4:d29ca2a:  *
1:d29ca2a:  * Unless required by applicable law or agreed to in writing, software
1:d29ca2a:  * distributed under the License is distributed on an "AS IS" BASIS,
1:d29ca2a:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:d29ca2a:  * See the License for the specific language governing permissions and
1:d29ca2a:  * limitations under the License.
1:d29ca2a:  */
1:d29ca2a: package org.apache.activemq.selector;
3:d29ca2a: 
1:bf07137: import javax.jms.InvalidSelectorException;
1:d29ca2a: import junit.framework.TestCase;
1:4743a20: 
1:d29ca2a: import org.apache.activemq.filter.BooleanExpression;
1:bf07137: import org.apache.activemq.filter.BooleanFunctionCallExpr;
1:d29ca2a: import org.apache.activemq.filter.ComparisonExpression;
1:d29ca2a: import org.apache.activemq.filter.Expression;
1:d29ca2a: import org.apache.activemq.filter.LogicExpression;
1:d29ca2a: import org.apache.activemq.filter.PropertyExpression;
1:d29ca2a: import org.apache.activemq.filter.XPathExpression;
1:8bf987b: import org.slf4j.Logger;
1:8bf987b: import org.slf4j.LoggerFactory;
1:d29ca2a: 
1:d29ca2a: /**
1:4743a20:  *
1:d29ca2a:  */
1:d29ca2a: public class SelectorParserTest extends TestCase {
1:8bf987b:     private static final Logger LOG = LoggerFactory.getLogger(SelectorParserTest.class);
1:d29ca2a: 
1:bf07137:     public void testFunctionCall() throws Exception {
1:bf07137:         Object filter = parse("REGEX('sales.*', group)");
1:bf07137:         assertTrue("expected type", filter instanceof BooleanFunctionCallExpr);
1:bf07137:         LOG.info("function exp:" + filter);
1:bf07137: 
1:bf07137:         // non existent function
1:bf07137:         try {
1:bf07137:             parse("DoesNotExist('sales.*', group)");
1:bf07137:             fail("expect ex on non existent function");
1:bf07137:         } catch (InvalidSelectorException expected) {}
1:bf07137: 
1:bf07137:     }
1:bf07137: 
1:d29ca2a:     public void testParseXPath() throws Exception {
1:d29ca2a:         BooleanExpression filter = parse("XPATH '//title[@lang=''eng'']'");
1:d29ca2a:         assertTrue("Created XPath expression", filter instanceof XPathExpression);
1:fc00993:         LOG.info("Expression: " + filter);
2:d29ca2a:     }
1:230a86c: 
1:d29ca2a:     public void testParseWithParensAround() throws Exception {
1:d29ca2a:         String[] values = {"x = 1 and y = 2", "(x = 1) and (y = 2)", "((x = 1) and (y = 2))"};
1:d29ca2a: 
1:d29ca2a:         for (int i = 0; i < values.length; i++) {
1:d29ca2a:             String value = values[i];
1:fc00993:             LOG.info("Parsing: " + value);
1:d29ca2a: 
1:d29ca2a:             BooleanExpression andExpression = parse(value);
1:d29ca2a:             assertTrue("Created LogicExpression expression", andExpression instanceof LogicExpression);
1:230a86c:             LogicExpression logicExpression = (LogicExpression)andExpression;
1:d29ca2a:             Expression left = logicExpression.getLeft();
1:d29ca2a:             Expression right = logicExpression.getRight();
1:d29ca2a: 
1:d29ca2a:             assertTrue("Left is a binary filter", left instanceof ComparisonExpression);
1:d29ca2a:             assertTrue("Right is a binary filter", right instanceof ComparisonExpression);
1:230a86c:             ComparisonExpression leftCompare = (ComparisonExpression)left;
1:230a86c:             ComparisonExpression rightCompare = (ComparisonExpression)right;
1:d29ca2a:             assertPropertyExpression("left", leftCompare.getLeft(), "x");
1:d29ca2a:             assertPropertyExpression("right", rightCompare.getLeft(), "y");
1:d29ca2a:         }
1:d29ca2a:     }
1:d29ca2a: 
1:d29ca2a:     protected void assertPropertyExpression(String message, Expression expression, String expected) {
1:d29ca2a:         assertTrue(message + ". Must be PropertyExpression", expression instanceof PropertyExpression);
1:230a86c:         PropertyExpression propExp = (PropertyExpression)expression;
1:d29ca2a:         assertEquals(message + ". Property name", expected, propExp.getName());
1:d29ca2a:     }
1:d29ca2a: 
1:d29ca2a:     protected BooleanExpression parse(String text) throws Exception {
1:1ab76f7:         return SelectorParser.parse(text);
1:86cbdfd:     }
1:d29ca2a: }
============================================================================
author:Hadrian Zbarcea
-------------------------------------------------------------------------------
commit:f9bec8f
author:Gary Tully
-------------------------------------------------------------------------------
commit:bf07137
/////////////////////////////////////////////////////////////////////////
1: import javax.jms.InvalidSelectorException;
1: import org.apache.activemq.filter.BooleanFunctionCallExpr;
/////////////////////////////////////////////////////////////////////////
1:     public void testFunctionCall() throws Exception {
1:         Object filter = parse("REGEX('sales.*', group)");
1:         assertTrue("expected type", filter instanceof BooleanFunctionCallExpr);
1:         LOG.info("function exp:" + filter);
1: 
1:         // non existent function
1:         try {
1:             parse("DoesNotExist('sales.*', group)");
1:             fail("expect ex on non existent function");
1:         } catch (InvalidSelectorException expected) {}
1: 
1:     }
1: 
author:Timothy A. Bish
-------------------------------------------------------------------------------
commit:4743a20
/////////////////////////////////////////////////////////////////////////
1: 
1:  *
commit:ef24cc9
author:Hiram R. Chirino
-------------------------------------------------------------------------------
commit:b0c2a40
/////////////////////////////////////////////////////////////////////////
1:  * 
commit:fc00993
/////////////////////////////////////////////////////////////////////////
0: import org.apache.activemq.spring.ConsumerBean;
0: import org.apache.commons.logging.Log;
0: import org.apache.commons.logging.LogFactory;
0:     private static final Log LOG = LogFactory.getLog(SelectorParserTest.class);
1:         LOG.info("Expression: " + filter);
/////////////////////////////////////////////////////////////////////////
1:             LOG.info("Parsing: " + value);
commit:230a86c
/////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////
1:  *      http://www.apache.org/licenses/LICENSE-2.0
/////////////////////////////////////////////////////////////////////////
0:     private static final org.apache.commons.logging.Log log = org.apache.commons.logging.LogFactory.getLog(SelectorParserTest.class);
0:         log.info("Expression: " + filter);
1: 
/////////////////////////////////////////////////////////////////////////
1:             LogicExpression logicExpression = (LogicExpression)andExpression;
1:             ComparisonExpression leftCompare = (ComparisonExpression)left;
1:             ComparisonExpression rightCompare = (ComparisonExpression)right;
/////////////////////////////////////////////////////////////////////////
1:         PropertyExpression propExp = (PropertyExpression)expression;
commit:86cbdfd
/////////////////////////////////////////////////////////////////////////
1: }
commit:57b4941
/////////////////////////////////////////////////////////////////////////
1:  * Licensed to the Apache Software Foundation (ASF) under one or more
1:  * contributor license agreements.  See the NOTICE file distributed with
1:  * this work for additional information regarding copyright ownership.
1:  * The ASF licenses this file to You under the Apache License, Version 2.0
1:  * (the "License"); you may not use this file except in compliance with
1:  * the License.  You may obtain a copy of the License at
commit:48b4869
/////////////////////////////////////////////////////////////////////////
0:  * Copyright 2005-2006 The Apache Software Foundation
commit:d29ca2a
/////////////////////////////////////////////////////////////////////////
1: /**
1:  *
0:  * Copyright 2004 The Apache Software Foundation
1:  *
0:  * Licensed under the Apache License, Version 2.0 (the "License");
0:  * you may not use this file except in compliance with the License.
0:  * You may obtain a copy of the License at
1:  *
0:  * http://www.apache.org/licenses/LICENSE-2.0
1:  *
1:  * Unless required by applicable law or agreed to in writing, software
1:  * distributed under the License is distributed on an "AS IS" BASIS,
1:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:  * See the License for the specific language governing permissions and
1:  * limitations under the License.
1:  */
1: package org.apache.activemq.selector;
1: 
1: import junit.framework.TestCase;
1: 
1: import org.apache.activemq.filter.BooleanExpression;
1: import org.apache.activemq.filter.ComparisonExpression;
1: import org.apache.activemq.filter.Expression;
1: import org.apache.activemq.filter.LogicExpression;
1: import org.apache.activemq.filter.PropertyExpression;
1: import org.apache.activemq.filter.XPathExpression;
0: import org.apache.activemq.selector.SelectorParser;
1: 
1: /**
0:  * @version $Revision: 1.2 $
1:  */
1: public class SelectorParserTest extends TestCase {
0:     private static final org.apache.commons.logging.Log log = org.apache.commons.logging.LogFactory
0:             .getLog(SelectorParserTest.class);
1: 
1:     public void testParseXPath() throws Exception {
1:         BooleanExpression filter = parse("XPATH '//title[@lang=''eng'']'");
1:         assertTrue("Created XPath expression", filter instanceof XPathExpression);
0:         log.info("Expression: "+filter);
1:     }
1:     
1:     public void testParseWithParensAround() throws Exception {
1:         String[] values = {"x = 1 and y = 2", "(x = 1) and (y = 2)", "((x = 1) and (y = 2))"};
1: 
1:         for (int i = 0; i < values.length; i++) {
1:             String value = values[i];
0:             log.info("Parsing: " + value);
1: 
1:             BooleanExpression andExpression = parse(value);
1:             assertTrue("Created LogicExpression expression", andExpression instanceof LogicExpression);
0:             LogicExpression logicExpression = (LogicExpression) andExpression;
1:             Expression left = logicExpression.getLeft();
1:             Expression right = logicExpression.getRight();
1: 
1:             assertTrue("Left is a binary filter", left instanceof ComparisonExpression);
1:             assertTrue("Right is a binary filter", right instanceof ComparisonExpression);
0:             ComparisonExpression leftCompare = (ComparisonExpression) left;
0:             ComparisonExpression rightCompare = (ComparisonExpression) right;
1:             assertPropertyExpression("left", leftCompare.getLeft(), "x");
1:             assertPropertyExpression("right", rightCompare.getLeft(), "y");
1:         }
1:     }
1: 
1:     protected void assertPropertyExpression(String message, Expression expression, String expected) {
1:         assertTrue(message + ". Must be PropertyExpression", expression instanceof PropertyExpression);
0:         PropertyExpression propExp = (PropertyExpression) expression;
1:         assertEquals(message + ". Property name", expected, propExp.getName());
1:     }
1: 
1:     protected BooleanExpression parse(String text) throws Exception {
0:         return new SelectorParser().parse(text);
1:     }
1: }
author:Bosanac Dejan
-------------------------------------------------------------------------------
commit:8bf987b
/////////////////////////////////////////////////////////////////////////
1: import org.slf4j.Logger;
1: import org.slf4j.LoggerFactory;
1:     private static final Logger LOG = LoggerFactory.getLogger(SelectorParserTest.class);
author:Guillaume Nodet
-------------------------------------------------------------------------------
commit:1ab76f7
/////////////////////////////////////////////////////////////////////////
1:         return SelectorParser.parse(text);
============================================================================