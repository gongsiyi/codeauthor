1:fc00993: /**
1:4102acc:  * Licensed to the Apache Software Foundation (ASF) under one or more
1:4102acc:  * contributor license agreements.  See the NOTICE file distributed with
1:4102acc:  * this work for additional information regarding copyright ownership.
1:4102acc:  * The ASF licenses this file to You under the Apache License, Version 2.0
1:4102acc:  * (the "License"); you may not use this file except in compliance with
1:4102acc:  * the License.  You may obtain a copy of the License at
5:4102acc:  *
1:4102acc:  *      http://www.apache.org/licenses/LICENSE-2.0
1:4102acc:  *
1:4102acc:  * Unless required by applicable law or agreed to in writing, software
1:4102acc:  * distributed under the License is distributed on an "AS IS" BASIS,
1:4102acc:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:4102acc:  * See the License for the specific language governing permissions and
1:4102acc:  * limitations under the License.
1:4102acc:  */
1:4102acc: package org.apache.activemq.camel;
3:4102acc: 
1:4102acc: import javax.jms.JMSException;
1:4102acc: import javax.jms.Message;
1:4102acc: import javax.jms.Queue;
1:4102acc: import javax.jms.QueueSender;
1:4102acc: 
1:f812e34: import org.apache.activemq.ActiveMQSession;
1:f812e34: import org.apache.camel.Endpoint;
1:f812e34: 
1:4102acc: /**
1:f812e34:  * A JMS {@link javax.jms.QueueSender} which sends message exchanges to a Camel
1:f812e34:  * {@link org.apache.camel.Endpoint}
1:b0c2a40:  * 
1:f812e34:  * 
1:4102acc:  */
1:4102acc: public class CamelQueueSender extends CamelMessageProducer implements QueueSender {
1:4102acc: 
1:4102acc:     public CamelQueueSender(CamelQueue destination, Endpoint endpoint, ActiveMQSession session) throws JMSException {
1:4102acc:         super(destination, endpoint, session);
2:4102acc:     }
1:4102acc: 
1:4102acc:     /**
1:4102acc:      * Gets the queue associated with this <CODE>QueueSender</CODE>.
1:f812e34:      * 
1:4102acc:      * @return this sender's queue
1:4102acc:      * @throws JMSException if the JMS provider fails to get the queue for this
1:f812e34:      *                 <CODE>QueueSender</CODE> due to some internal error.
1:4102acc:      */
1:4102acc: 
1:4102acc:     public Queue getQueue() throws JMSException {
1:f812e34:         return (Queue)super.getDestination();
1:4102acc:     }
1:4102acc: 
1:4102acc:     /**
1:f812e34:      * Sends a message to a queue for an unidentified message producer. Uses the
1:f812e34:      * <CODE>QueueSender</CODE>'s default delivery mode, priority, and time
1:f812e34:      * to live. <p/> <p/> Typically, a message producer is assigned a queue at
1:f812e34:      * creation time; however, the JMS API also supports unidentified message
1:f812e34:      * producers, which require that the queue be supplied every time a message
1:f812e34:      * is sent.
1:f812e34:      * 
1:f812e34:      * @param queue the queue to send this message to
1:4102acc:      * @param message the message to send
1:f812e34:      * @throws JMSException if the JMS provider fails to send the message due to
1:f812e34:      *                 some internal error.
1:4102acc:      * @see javax.jms.MessageProducer#getDeliveryMode()
1:4102acc:      * @see javax.jms.MessageProducer#getTimeToLive()
1:4102acc:      * @see javax.jms.MessageProducer#getPriority()
1:4102acc:      */
1:4102acc: 
1:4102acc:     public void send(Queue queue, Message message) throws JMSException {
1:4102acc:         super.send(queue, message);
1:4102acc:     }
1:4102acc: 
1:4102acc:     /**
1:4102acc:      * Sends a message to a queue for an unidentified message producer,
1:f812e34:      * specifying delivery mode, priority and time to live. <p/> <p/> Typically,
1:f812e34:      * a message producer is assigned a queue at creation time; however, the JMS
1:f812e34:      * API also supports unidentified message producers, which require that the
1:f812e34:      * queue be supplied every time a message is sent.
1:f812e34:      * 
1:f812e34:      * @param queue the queue to send this message to
1:f812e34:      * @param message the message to send
1:4102acc:      * @param deliveryMode the delivery mode to use
1:f812e34:      * @param priority the priority for this message
1:f812e34:      * @param timeToLive the message's lifetime (in milliseconds)
1:f812e34:      * @throws JMSException if the JMS provider fails to send the message due to
1:f812e34:      *                 some internal error.
1:4102acc:      */
1:4102acc: 
1:f812e34:     public void send(Queue queue, Message message, int deliveryMode, int priority, long timeToLive) throws JMSException {
1:f812e34:         super.send(queue, message, deliveryMode, priority, timeToLive);
1:f812e34:     }
1:4102acc: }
============================================================================
author:Hiram R. Chirino
-------------------------------------------------------------------------------
commit:b0c2a40
/////////////////////////////////////////////////////////////////////////
1:  * 
commit:fc00993
/////////////////////////////////////////////////////////////////////////
1: /**
commit:f812e34
/////////////////////////////////////////////////////////////////////////
1: import org.apache.activemq.ActiveMQSession;
1: import org.apache.camel.Endpoint;
1: 
1:  * A JMS {@link javax.jms.QueueSender} which sends message exchanges to a Camel
1:  * {@link org.apache.camel.Endpoint}
1:  * 
/////////////////////////////////////////////////////////////////////////
1:      * 
1:      *                 <CODE>QueueSender</CODE> due to some internal error.
1:         return (Queue)super.getDestination();
1:      * Sends a message to a queue for an unidentified message producer. Uses the
1:      * <CODE>QueueSender</CODE>'s default delivery mode, priority, and time
1:      * to live. <p/> <p/> Typically, a message producer is assigned a queue at
1:      * creation time; however, the JMS API also supports unidentified message
1:      * producers, which require that the queue be supplied every time a message
1:      * is sent.
1:      * 
1:      * @param queue the queue to send this message to
1:      * @throws JMSException if the JMS provider fails to send the message due to
1:      *                 some internal error.
/////////////////////////////////////////////////////////////////////////
1:      * specifying delivery mode, priority and time to live. <p/> <p/> Typically,
1:      * a message producer is assigned a queue at creation time; however, the JMS
1:      * API also supports unidentified message producers, which require that the
1:      * queue be supplied every time a message is sent.
1:      * 
1:      * @param queue the queue to send this message to
1:      * @param message the message to send
1:      * @param priority the priority for this message
1:      * @param timeToLive the message's lifetime (in milliseconds)
1:      * @throws JMSException if the JMS provider fails to send the message due to
1:      *                 some internal error.
1:     public void send(Queue queue, Message message, int deliveryMode, int priority, long timeToLive) throws JMSException {
1:         super.send(queue, message, deliveryMode, priority, timeToLive);
1: }
author:Guillaume Nodet
-------------------------------------------------------------------------------
commit:702e2a0
author:James Strachan
-------------------------------------------------------------------------------
commit:4102acc
/////////////////////////////////////////////////////////////////////////
0: /*
1:  * Licensed to the Apache Software Foundation (ASF) under one or more
1:  * contributor license agreements.  See the NOTICE file distributed with
1:  * this work for additional information regarding copyright ownership.
1:  * The ASF licenses this file to You under the Apache License, Version 2.0
1:  * (the "License"); you may not use this file except in compliance with
1:  * the License.  You may obtain a copy of the License at
1:  *
1:  *      http://www.apache.org/licenses/LICENSE-2.0
1:  *
1:  * Unless required by applicable law or agreed to in writing, software
1:  * distributed under the License is distributed on an "AS IS" BASIS,
1:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:  * See the License for the specific language governing permissions and
1:  * limitations under the License.
1:  */
1: package org.apache.activemq.camel;
1: 
0: import org.apache.activemq.ActiveMQSession;
0: import org.apache.camel.Endpoint;
1: 
1: import javax.jms.JMSException;
1: import javax.jms.Message;
1: import javax.jms.Queue;
1: import javax.jms.QueueSender;
1: 
1: /**
0:  * A JMS {@link javax.jms.QueueSender} which sends message exchanges to a
0:  * Camel {@link org.apache.camel.Endpoint}
1:  *
0:  * @version $Revision: $
1:  */
1: public class CamelQueueSender extends CamelMessageProducer implements QueueSender {
1: 
1:     public CamelQueueSender(CamelQueue destination, Endpoint endpoint, ActiveMQSession session) throws JMSException {
1:         super(destination, endpoint, session);
1:     }
1: 
1: 
1:     /**
1:      * Gets the queue associated with this <CODE>QueueSender</CODE>.
1:      *
1:      * @return this sender's queue
1:      * @throws JMSException if the JMS provider fails to get the queue for this
0:      *                      <CODE>QueueSender</CODE> due to some internal error.
1:      */
1: 
1:     public Queue getQueue() throws JMSException {
0:         return (Queue) super.getDestination();
1:     }
1: 
1:     /**
0:      * Sends a message to a queue for an unidentified message producer. Uses
0:      * the <CODE>QueueSender</CODE>'s default delivery mode, priority, and
0:      * time to live.
0:      * <p/>
0:      * <p/>
0:      * Typically, a message producer is assigned a queue at creation time;
0:      * however, the JMS API also supports unidentified message producers, which
0:      * require that the queue be supplied every time a message is sent.
1:      *
0:      * @param queue   the queue to send this message to
1:      * @param message the message to send
0:      * @throws JMSException if the JMS provider fails to send the message due to some
0:      *                      internal error.
1:      * @see javax.jms.MessageProducer#getDeliveryMode()
1:      * @see javax.jms.MessageProducer#getTimeToLive()
1:      * @see javax.jms.MessageProducer#getPriority()
1:      */
1: 
1:     public void send(Queue queue, Message message) throws JMSException {
1:         super.send(queue, message);
1:     }
1: 
1:     /**
1:      * Sends a message to a queue for an unidentified message producer,
0:      * specifying delivery mode, priority and time to live.
0:      * <p/>
0:      * <p/>
0:      * Typically, a message producer is assigned a queue at creation time;
0:      * however, the JMS API also supports unidentified message producers, which
0:      * require that the queue be supplied every time a message is sent.
1:      *
0:      * @param queue        the queue to send this message to
0:      * @param message      the message to send
1:      * @param deliveryMode the delivery mode to use
0:      * @param priority     the priority for this message
0:      * @param timeToLive   the message's lifetime (in milliseconds)
0:      * @throws JMSException if the JMS provider fails to send the message due to some
0:      *                      internal error.
1:      */
1: 
0:     public void send(Queue queue, Message message, int deliveryMode, int priority, long timeToLive)
0:             throws JMSException {
0:         super.send(queue,
0:                 message,
0:                 deliveryMode,
0:                 priority,
0:                 timeToLive);
1:     }
1: }
============================================================================