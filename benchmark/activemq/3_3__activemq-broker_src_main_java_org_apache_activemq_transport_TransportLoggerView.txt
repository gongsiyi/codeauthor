1:c4d8d86: /**
1:c4d8d86:  * Licensed to the Apache Software Foundation (ASF) under one or more
1:c4d8d86:  * contributor license agreements.  See the NOTICE file distributed with
1:c4d8d86:  * this work for additional information regarding copyright ownership.
1:c4d8d86:  * The ASF licenses this file to You under the Apache License, Version 2.0
1:c4d8d86:  * (the "License"); you may not use this file except in compliance with
1:c4d8d86:  * the License.  You may obtain a copy of the License at
1:c4d8d86:  *
1:c4d8d86:  *      http://www.apache.org/licenses/LICENSE-2.0
1:c4d8d86:  *
1:c4d8d86:  * Unless required by applicable law or agreed to in writing, software
1:c4d8d86:  * distributed under the License is distributed on an "AS IS" BASIS,
1:c4d8d86:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:c4d8d86:  * See the License for the specific language governing permissions and
1:c4d8d86:  * limitations under the License.
1:c4d8d86:  */
1:c4d8d86: package org.apache.activemq.transport;
1:c4d8d86: 
1:c4d8d86: import java.lang.ref.WeakReference;
1:c4d8d86: import java.util.Collections;
1:c4d8d86: import java.util.HashSet;
1:c4d8d86: import java.util.Set;
1:c4d8d86: 
1:c4d8d86: import javax.management.ObjectName;
1:c4d8d86: 
1:ced6909: import org.apache.activemq.broker.jmx.AnnotatedMBean;
1:c4d8d86: import org.apache.activemq.broker.jmx.ManagementContext;
1:c4d8d86: import org.apache.activemq.util.JMXSupport;
1:8bf987b: import org.slf4j.Logger;
1:8bf987b: import org.slf4j.LoggerFactory;
1:c4d8d86: 
1:c4d8d86: /**
1:c4d8d86:  * Class implementing the TransportLoggerViewMBean interface.
1:c4d8d86:  * When an object of this class is created, it registers itself in
1:c4d8d86:  * the MBeanServer of the management context provided.
1:c4d8d86:  * When a TransportLogger object is finalized because the Transport Stack
1:c4d8d86:  * where it resides is no longer in use, the method unregister() will be called.
1:c4d8d86:  * 
1:c4d8d86:  * @author David Martin Clavo david(dot)martin(dot)clavo(at)gmail.com
1:0bbc0ac:  *  
1:9a8f6e4:  * @see TransportLoggerViewMBean
1:c4d8d86:  */
1:c4d8d86: public class TransportLoggerView implements TransportLoggerViewMBean {
1:c4d8d86: 
1:8bf987b:     private static final Logger log = LoggerFactory.getLogger(TransportLoggerView.class);
1:c4d8d86:     
1:c4d8d86:     /**
1:c4d8d86:      * Set with the TransportLoggerViews objects created.
1:c4d8d86:      * Used by the methods enableAllTransportLoggers and diablellTransportLoggers.
1:c4d8d86:      * The method unregister() removes objects from this set.
1:c4d8d86:      */
1:c4d8d86:     private static Set<TransportLoggerView> transportLoggerViews = Collections.synchronizedSet(new HashSet<TransportLoggerView>());
1:c4d8d86: 
1:c4d8d86:     private final WeakReference<TransportLogger> transportLogger;
1:c4d8d86:     private final String nextTransportName;
1:c4d8d86:     private final int id;
1:c4d8d86:     private final ManagementContext managementContext;
1:c4d8d86:     private final ObjectName name;
1:c4d8d86: 
1:c4d8d86:     /**
1:c4d8d86:      * Constructor.
1:c4d8d86:      * @param transportLogger The TransportLogger object which is to be managed by this MBean.
1:c4d8d86:      * @param nextTransportName The name of the next TransportLayer. This is used to give a unique
1:c4d8d86:      * name for each MBean of the TransportLoggerView class.
1:c4d8d86:      * @param id The id of the TransportLogger to be watched.
1:c4d8d86:      * @param managementContext The management context who has the MBeanServer where this MBean will be registered.
1:c4d8d86:      */
1:c4d8d86:     public TransportLoggerView (TransportLogger transportLogger, String nextTransportName, int id, ManagementContext managementContext) {
1:c4d8d86:         this.transportLogger = new WeakReference<TransportLogger>(transportLogger);
1:c4d8d86:         this.nextTransportName = nextTransportName;
1:c4d8d86:         this.id = id;
1:c4d8d86:         this.managementContext = managementContext;
1:c4d8d86:         this.name = this.createTransportLoggerObjectName();
1:c4d8d86:         
1:c4d8d86:         TransportLoggerView.transportLoggerViews.add(this);
1:c4d8d86:         this.register();
1:c4d8d86:     }
1:c4d8d86:     
1:c4d8d86:     /**
1:c4d8d86:      * Enable logging for all Transport Loggers at once.
1:c4d8d86:      */
1:c4d8d86:     public static void enableAllTransportLoggers() {
1:c4d8d86:         for (TransportLoggerView view : transportLoggerViews) {
1:c4d8d86:             view.enableLogging();
1:c4d8d86:         }
1:c4d8d86:     }
1:c4d8d86:     
1:c4d8d86:     /**
1:c4d8d86:      * Disable logging for all Transport Loggers at once.
1:c4d8d86:      */
1:c4d8d86:     public static void disableAllTransportLoggers() {
1:c4d8d86:         for (TransportLoggerView view : transportLoggerViews) {
1:c4d8d86:             view.disableLogging();
1:c4d8d86:         }
1:c4d8d86:     }
1:c4d8d86: 
1:c4d8d86:     // doc comment inherited from TransportLoggerViewMBean
1:c4d8d86:     public void enableLogging() {
1:c4d8d86:         this.setLogging(true);
1:c4d8d86:     }
1:c4d8d86: 
1:c4d8d86:     // doc comment inherited from TransportLoggerViewMBean
1:c4d8d86:     public void disableLogging() {
1:c4d8d86:         this.setLogging(false);
1:c4d8d86:     }   
1:c4d8d86: 
1:c4d8d86:     // doc comment inherited from TransportLoggerViewMBean
1:c4d8d86:     public boolean isLogging() {
1:c4d8d86:         return transportLogger.get().isLogging();
1:c4d8d86:     }
1:c4d8d86: 
1:c4d8d86:     // doc comment inherited from TransportLoggerViewMBean
1:c4d8d86:     public void setLogging(boolean logging) {
1:c4d8d86:         transportLogger.get().setLogging(logging);
1:c4d8d86:     }
1:c4d8d86: 
1:c4d8d86:     /**
1:c4d8d86:      * Registers this MBean in the MBeanServer of the management context
1:c4d8d86:      * provided at creation time. This method is only called by the constructor.
1:c4d8d86:      */
1:c4d8d86:     private void register() {
1:c4d8d86:         try {
1:ced6909:         	AnnotatedMBean.registerMBean(this.managementContext, this, this.name);
1:c4d8d86:         } catch (Exception e) {
1:c4d8d86:             log.error("Could not register MBean for TransportLoggerView " + id + "with name " + this.name.toString() + ", reason: " + e, e);
1:c4d8d86:         }
1:c4d8d86: 
1:c4d8d86:     }
1:c4d8d86: 
1:c4d8d86:     /**
1:c4d8d86:      * Unregisters the MBean from the MBeanServer of the management context
1:c4d8d86:      * provided at creation time.
1:c4d8d86:      * This method is called by the TransportLogger object being managed when
1:c4d8d86:      * the TransportLogger object is finalized, to avoid the memory leak that
1:c4d8d86:      * would be caused if MBeans were not unregistered. 
1:c4d8d86:      */
1:c4d8d86:     public void unregister() {
1:c4d8d86:         
1:c4d8d86:         TransportLoggerView.transportLoggerViews.remove(this);
1:c4d8d86:         
1:c4d8d86:         try {
1:1ec71bd:             this.managementContext.unregisterMBean(this.name);
1:c4d8d86:         } catch (Exception e) {
1:c4d8d86:             log.error("Could not unregister MBean for TransportLoggerView " + id + "with name " + this.name.toString() + ", reason: " + e, e);
1:c4d8d86:         }
1:c4d8d86:     }
1:c4d8d86: 
1:c4d8d86:     /**
1:c4d8d86:      * Creates the ObjectName to be used when registering the MBean.
1:c4d8d86:      * @return the ObjectName to be used when registering the MBean.
1:c4d8d86:      */
1:c4d8d86:     private ObjectName createTransportLoggerObjectName()  {
1:c4d8d86:         try {
1:c4d8d86:             return new ObjectName(
1:c4d8d86:                     createTransportLoggerObjectNameRoot(this.managementContext)
1:c4d8d86:                     + JMXSupport.encodeObjectNamePart(TransportLogger.class.getSimpleName()
1:c4d8d86:                             + " " + this.id + ";" + this.nextTransportName));
1:c4d8d86:         } catch (Exception e) {
1:c4d8d86:             log.error("Could not create ObjectName for TransportLoggerView " + id + ", reason: " + e, e);
1:c4d8d86:             return null;
1:c4d8d86:         }
1:c4d8d86:     }
1:c4d8d86: 
1:c4d8d86:     /**
1:c4d8d86:      * Creates the part of the ObjectName that will be used by all MBeans.
1:c4d8d86:      * This method is public so it can be used by the TransportLoggerControl class.
1:c4d8d86:      * @param managementContext
1:c4d8d86:      * @return A String with the part of the ObjectName common to all the TransportLoggerView MBeans.
1:c4d8d86:      */
1:c4d8d86:     public static String createTransportLoggerObjectNameRoot(ManagementContext managementContext) {
1:c4d8d86:         return managementContext.getJmxDomainName()+":"+"Type=TransportLogger,"+"TransportLoggerName=";
1:c4d8d86:     }
1:c4d8d86: 
1:c4d8d86: }
============================================================================
author:Hiram R. Chirino
-------------------------------------------------------------------------------
commit:58aca86
commit:9a8f6e4
/////////////////////////////////////////////////////////////////////////
1:  * @see TransportLoggerViewMBean
commit:0bbc0ac
/////////////////////////////////////////////////////////////////////////
1:  *  
commit:c4d8d86
/////////////////////////////////////////////////////////////////////////
1: /**
1:  * Licensed to the Apache Software Foundation (ASF) under one or more
1:  * contributor license agreements.  See the NOTICE file distributed with
1:  * this work for additional information regarding copyright ownership.
1:  * The ASF licenses this file to You under the Apache License, Version 2.0
1:  * (the "License"); you may not use this file except in compliance with
1:  * the License.  You may obtain a copy of the License at
1:  *
1:  *      http://www.apache.org/licenses/LICENSE-2.0
1:  *
1:  * Unless required by applicable law or agreed to in writing, software
1:  * distributed under the License is distributed on an "AS IS" BASIS,
1:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:  * See the License for the specific language governing permissions and
1:  * limitations under the License.
1:  */
1: package org.apache.activemq.transport;
1: 
1: import java.lang.ref.WeakReference;
1: import java.util.Collections;
1: import java.util.HashSet;
1: import java.util.Set;
1: 
1: import javax.management.ObjectName;
1: 
1: import org.apache.activemq.broker.jmx.ManagementContext;
1: import org.apache.activemq.util.JMXSupport;
0: import org.apache.commons.logging.Log;
0: import org.apache.commons.logging.LogFactory;
1: 
1: /**
1:  * Class implementing the TransportLoggerViewMBean interface.
1:  * When an object of this class is created, it registers itself in
1:  * the MBeanServer of the management context provided.
1:  * When a TransportLogger object is finalized because the Transport Stack
1:  * where it resides is no longer in use, the method unregister() will be called.
1:  * 
1:  * @author David Martin Clavo david(dot)martin(dot)clavo(at)gmail.com
0:  * @version $Revision$ 
0:  * @see TransportLoggerViewMBean.
1:  */
1: public class TransportLoggerView implements TransportLoggerViewMBean {
1: 
0:     private static final Log log = LogFactory.getLog(TransportLoggerView.class);
1:     
1:     /**
1:      * Set with the TransportLoggerViews objects created.
1:      * Used by the methods enableAllTransportLoggers and diablellTransportLoggers.
1:      * The method unregister() removes objects from this set.
1:      */
1:     private static Set<TransportLoggerView> transportLoggerViews = Collections.synchronizedSet(new HashSet<TransportLoggerView>());
1: 
1:     private final WeakReference<TransportLogger> transportLogger;
1:     private final String nextTransportName;
1:     private final int id;
1:     private final ManagementContext managementContext;
1:     private final ObjectName name;
1: 
1:     /**
1:      * Constructor.
1:      * @param transportLogger The TransportLogger object which is to be managed by this MBean.
1:      * @param nextTransportName The name of the next TransportLayer. This is used to give a unique
1:      * name for each MBean of the TransportLoggerView class.
1:      * @param id The id of the TransportLogger to be watched.
1:      * @param managementContext The management context who has the MBeanServer where this MBean will be registered.
1:      */
1:     public TransportLoggerView (TransportLogger transportLogger, String nextTransportName, int id, ManagementContext managementContext) {
1:         this.transportLogger = new WeakReference<TransportLogger>(transportLogger);
1:         this.nextTransportName = nextTransportName;
1:         this.id = id;
1:         this.managementContext = managementContext;
1:         this.name = this.createTransportLoggerObjectName();
1:         
1:         TransportLoggerView.transportLoggerViews.add(this);
1:         this.register();
1:     }
1:     
1:     /**
1:      * Enable logging for all Transport Loggers at once.
1:      */
1:     public static void enableAllTransportLoggers() {
1:         for (TransportLoggerView view : transportLoggerViews) {
1:             view.enableLogging();
1:         }
1:     }
1:     
1:     /**
1:      * Disable logging for all Transport Loggers at once.
1:      */
1:     public static void disableAllTransportLoggers() {
1:         for (TransportLoggerView view : transportLoggerViews) {
1:             view.disableLogging();
1:         }
1:     }
1: 
1:     // doc comment inherited from TransportLoggerViewMBean
1:     public void enableLogging() {
1:         this.setLogging(true);
1:     }
1: 
1:     // doc comment inherited from TransportLoggerViewMBean
1:     public void disableLogging() {
1:         this.setLogging(false);
1:     }   
1: 
1:     // doc comment inherited from TransportLoggerViewMBean
1:     public boolean isLogging() {
1:         return transportLogger.get().isLogging();
1:     }
1: 
1:     // doc comment inherited from TransportLoggerViewMBean
1:     public void setLogging(boolean logging) {
1:         transportLogger.get().setLogging(logging);
1:     }
1: 
1:     /**
1:      * Registers this MBean in the MBeanServer of the management context
1:      * provided at creation time. This method is only called by the constructor.
1:      */
1:     private void register() {
1:         try {
0:             this.managementContext.getMBeanServer().registerMBean(this, this.name);
1:         } catch (Exception e) {
1:             log.error("Could not register MBean for TransportLoggerView " + id + "with name " + this.name.toString() + ", reason: " + e, e);
1:         }
1: 
1:     }
1: 
1:     /**
1:      * Unregisters the MBean from the MBeanServer of the management context
1:      * provided at creation time.
1:      * This method is called by the TransportLogger object being managed when
1:      * the TransportLogger object is finalized, to avoid the memory leak that
1:      * would be caused if MBeans were not unregistered. 
1:      */
1:     public void unregister() {
1:         
1:         TransportLoggerView.transportLoggerViews.remove(this);
1:         
1:         try {
0:             this.managementContext.getMBeanServer().unregisterMBean(this.name);
1:         } catch (Exception e) {
1:             log.error("Could not unregister MBean for TransportLoggerView " + id + "with name " + this.name.toString() + ", reason: " + e, e);
1:         }
1:     }
1: 
1:     /**
1:      * Creates the ObjectName to be used when registering the MBean.
1:      * @return the ObjectName to be used when registering the MBean.
1:      */
1:     private ObjectName createTransportLoggerObjectName()  {
1:         try {
1:             return new ObjectName(
1:                     createTransportLoggerObjectNameRoot(this.managementContext)
1:                     + JMXSupport.encodeObjectNamePart(TransportLogger.class.getSimpleName()
1:                             + " " + this.id + ";" + this.nextTransportName));
1:         } catch (Exception e) {
1:             log.error("Could not create ObjectName for TransportLoggerView " + id + ", reason: " + e, e);
1:             return null;
1:         }
1:     }
1: 
1:     /**
1:      * Creates the part of the ObjectName that will be used by all MBeans.
1:      * This method is public so it can be used by the TransportLoggerControl class.
1:      * @param managementContext
1:      * @return A String with the part of the ObjectName common to all the TransportLoggerView MBeans.
1:      */
1:     public static String createTransportLoggerObjectNameRoot(ManagementContext managementContext) {
1:         return managementContext.getJmxDomainName()+":"+"Type=TransportLogger,"+"TransportLoggerName=";
1:     }
1: 
1: }
author:Bosanac Dejan
-------------------------------------------------------------------------------
commit:8bf987b
/////////////////////////////////////////////////////////////////////////
1: import org.slf4j.Logger;
1: import org.slf4j.LoggerFactory;
/////////////////////////////////////////////////////////////////////////
1:     private static final Logger log = LoggerFactory.getLogger(TransportLoggerView.class);
commit:ced6909
/////////////////////////////////////////////////////////////////////////
1: import org.apache.activemq.broker.jmx.AnnotatedMBean;
/////////////////////////////////////////////////////////////////////////
1:         	AnnotatedMBean.registerMBean(this.managementContext, this, this.name);
author:Robert Davies
-------------------------------------------------------------------------------
commit:1ec71bd
/////////////////////////////////////////////////////////////////////////
0:             this.managementContext.registerMBean(this, this.name);
/////////////////////////////////////////////////////////////////////////
1:             this.managementContext.unregisterMBean(this.name);
commit:19a83ae
/////////////////////////////////////////////////////////////////////////
commit:df6b542
/////////////////////////////////////////////////////////////////////////
0: package org.apache.activemq.transport;
0: 
0: import java.lang.ref.WeakReference;
0: import java.util.Collections;
0: import java.util.HashSet;
0: import java.util.Set;
0: 
0: import javax.management.ObjectName;
0: 
0: import org.apache.activemq.broker.jmx.ManagementContext;
0: import org.apache.activemq.util.JMXSupport;
0: import org.apache.commons.logging.Log;
0: import org.apache.commons.logging.LogFactory;
0: 
0: /**
0:  * Class implementing the TransportLoggerViewMBean interface.
0:  * When an object of this class is created, it registers itself in
0:  * the MBeanServer of the management context provided.
0:  * When a TransportLogger object is finalized because the Transport Stack
0:  * where it resides is no longer in use, the method unregister() will be called. 
0:  * @see TransportLoggerViewMBean.
0:  */
0: public class TransportLoggerView implements TransportLoggerViewMBean {
0: 
0:     private static final Log log = LogFactory.getLog(TransportLoggerView.class);
0:     
0:     /**
0:      * Set with the TransportLoggerViews objects created.
0:      * Used by the methods enableAllTransportLoggers and diablellTransportLoggers.
0:      * The method unregister() removes objects from this set.
0:      */
0:     private static Set<TransportLoggerView> transportLoggerViews = Collections.synchronizedSet(new HashSet<TransportLoggerView>());
0: 
0:     private final WeakReference<TransportLogger> transportLogger;
0:     private final String nextTransportName;
0:     private final int id;
0:     private final ManagementContext managementContext;
0:     private final ObjectName name;
0: 
0:     /**
0:      * Constructor.
0:      * @param transportLogger The TransportLogger object which is to be managed by this MBean.
0:      * @param nextTransportName The name of the next TransportLayer. This is used to give a unique
0:      * name for each MBean of the TransportLoggerView class.
0:      * @param id The id of the TransportLogger to be watched.
0:      * @param managementContext The management context who has the MBeanServer where this MBean will be registered.
0:      */
0:     public TransportLoggerView (TransportLogger transportLogger, String nextTransportName, int id, ManagementContext managementContext) {
0:         this.transportLogger = new WeakReference<TransportLogger>(transportLogger);
0:         this.nextTransportName = nextTransportName;
0:         this.id = id;
0:         this.managementContext = managementContext;
0:         this.name = this.createTransportLoggerObjectName();
0:         
0:         TransportLoggerView.transportLoggerViews.add(this);
0:         this.register();
0:     }
0:     
0:     /**
0:      * Enable logging for all Transport Loggers at once.
0:      */
0:     public static void enableAllTransportLoggers() {
0:         for (TransportLoggerView view : transportLoggerViews) {
0:             view.enableLogging();
0:         }
0:     }
0:     
0:     /**
0:      * Disable logging for all Transport Loggers at once.
0:      */
0:     public static void disableAllTransportLoggers() {
0:         for (TransportLoggerView view : transportLoggerViews) {
0:             view.disableLogging();
0:         }
0:     }
0: 
0:     // doc comment inherited from TransportLoggerViewMBean
0:     public void enableLogging() {
0:         this.setLogging(true);
0:     }
0: 
0:     // doc comment inherited from TransportLoggerViewMBean
0:     public void disableLogging() {
0:         this.setLogging(false);
0:     }   
0: 
0:     // doc comment inherited from TransportLoggerViewMBean
0:     public boolean isLogging() {
0:         return transportLogger.get().isLogging();
0:     }
0: 
0:     // doc comment inherited from TransportLoggerViewMBean
0:     public void setLogging(boolean logging) {
0:         transportLogger.get().setLogging(logging);
0:     }
0: 
0:     /**
0:      * Registers this MBean in the MBeanServer of the management context
0:      * provided at creation time. This method is only called by the constructor.
0:      */
0:     private void register() {
0:         try {
0:             this.managementContext.getMBeanServer().registerMBean(this, this.name);
0:         } catch (Exception e) {
0:             log.error("Could not register MBean for TransportLoggerView " + id + "with name " + this.name.toString() + ", reason: " + e, e);
0:         }
0: 
0:     }
0: 
0:     /**
0:      * Unregisters the MBean from the MBeanServer of the management context
0:      * provided at creation time.
0:      * This method is called by the TransportLogger object being managed when
0:      * the TransportLogger object is finalized, to avoid the memory leak that
0:      * would be caused if MBeans were not unregistered. 
0:      */
0:     public void unregister() {
0:         
0:         TransportLoggerView.transportLoggerViews.remove(this);
0:         
0:         try {
0:             this.managementContext.getMBeanServer().unregisterMBean(this.name);
0:         } catch (Exception e) {
0:             log.error("Could not unregister MBean for TransportLoggerView " + id + "with name " + this.name.toString() + ", reason: " + e, e);
0:         }
0:     }
0: 
0:     /**
0:      * Creates the ObjectName to be used when registering the MBean.
0:      * @return the ObjectName to be used when registering the MBean.
0:      */
0:     private ObjectName createTransportLoggerObjectName()  {
0:         try {
0:             return new ObjectName(
0:                     createTransportLoggerObjectNameRoot(this.managementContext)
0:                     + JMXSupport.encodeObjectNamePart(TransportLogger.class.getSimpleName()
0:                             + " " + this.id + ";" + this.nextTransportName));
0:         } catch (Exception e) {
0:             log.error("Could not create ObjectName for TransportLoggerView " + id + ", reason: " + e, e);
0:             return null;
0:         }
0:     }
0: 
0:     /**
0:      * Creates the part of the ObjectName that will be used by all MBeans.
0:      * This method is public so it can be used by the TransportLoggerControl class.
0:      * @param managementContext
0:      * @return A String with the part of the ObjectName common to all the TransportLoggerView MBeans.
0:      */
0:     public static String createTransportLoggerObjectNameRoot(ManagementContext managementContext) {
0:         return managementContext.getJmxDomainName()+":"+"Type=TransportLogger,"+"TransportLoggerName=";
0:     }
0: 
0: }
============================================================================