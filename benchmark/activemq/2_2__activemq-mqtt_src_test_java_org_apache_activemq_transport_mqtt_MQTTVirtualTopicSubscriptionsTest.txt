1:413e484: /**
1:413e484:  * Licensed to the Apache Software Foundation (ASF) under one or more
1:413e484:  * contributor license agreements.  See the NOTICE file distributed with
1:413e484:  * this work for additional information regarding copyright ownership.
1:413e484:  * The ASF licenses this file to You under the Apache License, Version 2.0
1:413e484:  * (the "License"); you may not use this file except in compliance with
1:413e484:  * the License.  You may obtain a copy of the License at
1:413e484:  *
1:413e484:  *      http://www.apache.org/licenses/LICENSE-2.0
1:413e484:  *
1:413e484:  * Unless required by applicable law or agreed to in writing, software
1:413e484:  * distributed under the License is distributed on an "AS IS" BASIS,
1:413e484:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:413e484:  * See the License for the specific language governing permissions and
1:413e484:  * limitations under the License.
1:413e484:  */
1:413e484: package org.apache.activemq.transport.mqtt;
2:413e484: 
1:919ca96: import static org.junit.Assert.assertEquals;
1:919ca96: import static org.junit.Assert.assertNotNull;
1:af999fe: import static org.junit.Assert.assertTrue;
1:af999fe: 
1:919ca96: import org.apache.activemq.ActiveMQConnection;
1:919ca96: import org.apache.activemq.command.ActiveMQMessage;
1:919ca96: import org.apache.activemq.util.ByteSequence;
1:af999fe: import org.apache.activemq.util.Wait;
1:af999fe: import org.fusesource.mqtt.client.BlockingConnection;
1:af999fe: import org.fusesource.mqtt.client.MQTT;
1:919ca96: import org.fusesource.mqtt.client.Message;
1:af999fe: import org.fusesource.mqtt.client.QoS;
1:af999fe: import org.fusesource.mqtt.client.Topic;
1:413e484: import org.junit.Before;
1:413e484: import org.junit.Test;
1:919ca96: import org.slf4j.Logger;
1:919ca96: import org.slf4j.LoggerFactory;
1:919ca96: 
1:919ca96: import javax.jms.DeliveryMode;
1:919ca96: import javax.jms.MessageConsumer;
1:919ca96: import javax.jms.Session;
1:919ca96: import java.util.concurrent.TimeUnit;
1:413e484: 
1:413e484: /**
1:413e484:  * Run the basic tests with the NIO Transport.
1:413e484:  */
1:413e484: public class MQTTVirtualTopicSubscriptionsTest extends MQTTTest {
1:919ca96:     private static final Logger LOG = LoggerFactory.getLogger(MQTTVirtualTopicSubscriptionsTest.class);
1:413e484: 
2:413e484:     @Override
1:413e484:     @Before
1:413e484:     public void setUp() throws Exception {
1:59f8cfc:         protocolConfig = "transport.subscriptionStrategy=mqtt-virtual-topic-subscriptions";
1:413e484:         super.setUp();
1:413e484:     }
1:413e484: 
1:413e484:     @Override
1:af999fe:     @Test(timeout = 60 * 1000)
1:413e484:     public void testSendMQTTReceiveJMS() throws Exception {
1:413e484:         doTestSendMQTTReceiveJMS("VirtualTopic.foo.*");
1:413e484:     }
1:af999fe: 
1:413e484:     @Override
1:413e484:     @Test(timeout = 2 * 60 * 1000)
1:413e484:     public void testSendJMSReceiveMQTT() throws Exception {
1:413e484:         doTestSendJMSReceiveMQTT("VirtualTopic.foo.far");
1:413e484:     }
1:af999fe: 
1:413e484:     @Override
1:413e484:     @Test(timeout = 30 * 10000)
1:413e484:     public void testJmsMapping() throws Exception {
1:413e484:         doTestJmsMapping("VirtualTopic.test.foo");
1:413e484:     }
1:af999fe: 
1:af999fe:     @Test(timeout = 60 * 1000)
1:af999fe:     public void testSubscribeOnVirtualTopicAsDurable() throws Exception {
1:af999fe:         MQTT mqtt = createMQTTConnection();
1:af999fe:         mqtt.setClientId("VirtualTopicSubscriber");
1:af999fe:         mqtt.setKeepAlive((short) 2);
1:af999fe:         mqtt.setCleanSession(false);
1:af999fe: 
1:af999fe:         final BlockingConnection connection = mqtt.blockingConnection();
1:af999fe:         connection.connect();
1:af999fe: 
1:af999fe:         final String topicName = "VirtualTopic/foo/bah";
1:af999fe: 
1:af999fe:         connection.subscribe(new Topic[] { new Topic(topicName, QoS.EXACTLY_ONCE)});
1:af999fe: 
1:af999fe:         assertTrue("Should create a durable subscription", Wait.waitFor(new Wait.Condition() {
1:af999fe: 
1:af999fe:             @Override
1:af999fe:             public boolean isSatisified() throws Exception {
1:af999fe:                 return brokerService.getAdminView().getDurableTopicSubscribers().length == 1;
1:af999fe:             }
1:af999fe:         }));
1:af999fe: 
1:af999fe:         connection.unsubscribe(new String[] { topicName });
1:af999fe: 
1:af999fe:         assertTrue("Should remove a durable subscription", Wait.waitFor(new Wait.Condition() {
1:af999fe: 
1:af999fe:             @Override
1:af999fe:             public boolean isSatisified() throws Exception {
1:af999fe:                 return brokerService.getAdminView().getDurableTopicSubscribers().length == 0;
1:af999fe:             }
1:af999fe:         }));
1:af999fe: 
1:af999fe:         connection.disconnect();
1:af999fe:     }
1:919ca96: 
1:919ca96:     @Test(timeout = 60 * 1000)
1:af999fe:     public void testDurableVirtaulTopicSubIsRecovered() throws Exception {
1:af999fe:         MQTT mqtt = createMQTTConnection();
1:af999fe:         mqtt.setClientId("VirtualTopicSubscriber");
1:af999fe:         mqtt.setKeepAlive((short) 2);
1:af999fe:         mqtt.setCleanSession(false);
1:919ca96: 
1:af999fe:         final String topicName = "VirtualTopic/foo/bah";
1:af999fe: 
1:af999fe:         {
1:af999fe:             final BlockingConnection connection = mqtt.blockingConnection();
1:af999fe:             connection.connect();
1:af999fe: 
1:af999fe:             connection.subscribe(new Topic[] { new Topic(topicName, QoS.EXACTLY_ONCE)});
1:af999fe: 
1:af999fe:             assertTrue("Should create a durable subscription", Wait.waitFor(new Wait.Condition() {
1:af999fe: 
1:af999fe:                 @Override
1:af999fe:                 public boolean isSatisified() throws Exception {
1:af999fe:                     return brokerService.getAdminView().getDurableTopicSubscribers().length == 1;
1:af999fe:                 }
1:af999fe:             }));
1:af999fe: 
1:af999fe:             connection.disconnect();
1:af999fe:         }
1:af999fe: 
1:af999fe:         assertTrue("Should be one inactive subscription", Wait.waitFor(new Wait.Condition() {
1:af999fe: 
1:af999fe:             @Override
1:af999fe:             public boolean isSatisified() throws Exception {
1:af999fe:                 return brokerService.getAdminView().getInactiveDurableTopicSubscribers().length == 1;
1:af999fe:             }
1:af999fe:         }));
1:af999fe: 
1:af999fe:         {
1:af999fe:             final BlockingConnection connection = mqtt.blockingConnection();
1:af999fe:             connection.connect();
1:af999fe: 
1:af999fe:             assertTrue("Should recover a durable subscription", Wait.waitFor(new Wait.Condition() {
1:af999fe: 
1:af999fe:                 @Override
1:af999fe:                 public boolean isSatisified() throws Exception {
1:af999fe:                     return brokerService.getAdminView().getDurableTopicSubscribers().length == 1;
1:af999fe:                 }
1:af999fe:             }));
1:af999fe: 
1:af999fe:             connection.subscribe(new Topic[] { new Topic(topicName, QoS.EXACTLY_ONCE)});
1:af999fe: 
1:af999fe:             assertTrue("Should still be just one durable subscription", Wait.waitFor(new Wait.Condition() {
1:af999fe: 
1:af999fe:                 @Override
1:af999fe:                 public boolean isSatisified() throws Exception {
1:af999fe:                     return brokerService.getAdminView().getDurableTopicSubscribers().length == 1;
1:af999fe:                 }
1:af999fe:             }));
1:af999fe: 
1:af999fe:             connection.disconnect();
1:af999fe:         }
1:af999fe:     }
1:413e484: 
1:413e484:     @Test(timeout = 60 * 1000)
1:919ca96:     public void testRetainMessageDurability() throws Exception {
1:919ca96:         MQTT mqtt = createMQTTConnection();
1:919ca96:         mqtt.setClientId("sub");
1:919ca96: 
1:919ca96:         final BlockingConnection connection = mqtt.blockingConnection();
1:919ca96:         connection.connect();
1:413e484: 
1:919ca96:         final String topicName = "foo/bah";
1:919ca96: 
1:919ca96:         connection.subscribe(new Topic[] { new Topic(topicName, QoS.EXACTLY_ONCE)});
1:919ca96: 
1:919ca96: 
1:919ca96:         // jms client
1:919ca96:         ActiveMQConnection activeMQConnection = (ActiveMQConnection) cf.createConnection();
1:919ca96:         // MUST set to true to receive retained messages
1:919ca96:         activeMQConnection.setUseRetroactiveConsumer(true);
1:919ca96:         activeMQConnection.start();
1:919ca96:         Session s = activeMQConnection.createSession(false, Session.AUTO_ACKNOWLEDGE);
1:919ca96:         javax.jms.Queue consumerQ = s.createQueue("Consumer.RegularSub.VirtualTopic.foo.bah");
1:919ca96:         MessageConsumer consumer = s.createConsumer(consumerQ);
1:919ca96: 
1:919ca96: 
1:919ca96:         // publisher
1:919ca96:         final MQTTClientProvider provider = getMQTTClientProvider();
1:919ca96:         initializeConnection(provider);
1:919ca96: 
1:919ca96:         // send retained message
1:919ca96:         final String RETAINED = "RETAINED_MESSAGE_TEXT";
1:919ca96:         provider.publish(topicName, RETAINED.getBytes(), EXACTLY_ONCE, true);
1:919ca96: 
1:919ca96:         Message message = connection.receive(5, TimeUnit.SECONDS);
1:919ca96:         assertNotNull("got message", message);
1:919ca96: 
1:919ca96:         String response = new String(message.getPayload());
1:919ca96:         LOG.info("Got message:" + response);
1:919ca96: 
1:919ca96: 
1:919ca96:         // jms - verify retained message is persistent
1:919ca96:         ActiveMQMessage activeMQMessage = (ActiveMQMessage) consumer.receive(5000);
1:919ca96:         assertNotNull("Should get retained message", activeMQMessage);
1:919ca96:         ByteSequence bs = activeMQMessage.getContent();
1:919ca96:         assertEquals(RETAINED, new String(bs.data, bs.offset, bs.length));
1:919ca96:         LOG.info("Got message with deliverMode:" + activeMQMessage.getJMSDeliveryMode());
1:919ca96:         assertEquals(DeliveryMode.PERSISTENT, activeMQMessage.getJMSDeliveryMode());
1:919ca96: 
1:919ca96:         activeMQConnection.close();
1:919ca96:         connection.unsubscribe(new String[] { topicName });
1:919ca96: 
1:919ca96:         connection.disconnect();
1:919ca96:     }
1:919ca96: 
1:413e484: }
============================================================================
author:gtully
-------------------------------------------------------------------------------
commit:919ca96
/////////////////////////////////////////////////////////////////////////
1: import static org.junit.Assert.assertEquals;
1: import static org.junit.Assert.assertNotNull;
1: import org.apache.activemq.ActiveMQConnection;
1: import org.apache.activemq.command.ActiveMQMessage;
1: import org.apache.activemq.util.ByteSequence;
1: import org.fusesource.mqtt.client.Message;
1: import org.slf4j.Logger;
1: import org.slf4j.LoggerFactory;
1: 
1: import javax.jms.DeliveryMode;
1: import javax.jms.MessageConsumer;
1: import javax.jms.Session;
1: import java.util.concurrent.TimeUnit;
1:     private static final Logger LOG = LoggerFactory.getLogger(MQTTVirtualTopicSubscriptionsTest.class);
/////////////////////////////////////////////////////////////////////////
1: 
1:     @Test(timeout = 60 * 1000)
1:     public void testRetainMessageDurability() throws Exception {
1:         MQTT mqtt = createMQTTConnection();
1:         mqtt.setClientId("sub");
1: 
1:         final BlockingConnection connection = mqtt.blockingConnection();
1:         connection.connect();
1: 
1:         final String topicName = "foo/bah";
1: 
1:         connection.subscribe(new Topic[] { new Topic(topicName, QoS.EXACTLY_ONCE)});
1: 
1: 
1:         // jms client
1:         ActiveMQConnection activeMQConnection = (ActiveMQConnection) cf.createConnection();
1:         // MUST set to true to receive retained messages
1:         activeMQConnection.setUseRetroactiveConsumer(true);
1:         activeMQConnection.start();
1:         Session s = activeMQConnection.createSession(false, Session.AUTO_ACKNOWLEDGE);
1:         javax.jms.Queue consumerQ = s.createQueue("Consumer.RegularSub.VirtualTopic.foo.bah");
1:         MessageConsumer consumer = s.createConsumer(consumerQ);
1: 
1: 
1:         // publisher
1:         final MQTTClientProvider provider = getMQTTClientProvider();
1:         initializeConnection(provider);
1: 
1:         // send retained message
1:         final String RETAINED = "RETAINED_MESSAGE_TEXT";
1:         provider.publish(topicName, RETAINED.getBytes(), EXACTLY_ONCE, true);
1: 
1:         Message message = connection.receive(5, TimeUnit.SECONDS);
1:         assertNotNull("got message", message);
1: 
1:         String response = new String(message.getPayload());
1:         LOG.info("Got message:" + response);
1: 
1: 
1:         // jms - verify retained message is persistent
1:         ActiveMQMessage activeMQMessage = (ActiveMQMessage) consumer.receive(5000);
1:         assertNotNull("Should get retained message", activeMQMessage);
1:         ByteSequence bs = activeMQMessage.getContent();
1:         assertEquals(RETAINED, new String(bs.data, bs.offset, bs.length));
1:         LOG.info("Got message with deliverMode:" + activeMQMessage.getJMSDeliveryMode());
1:         assertEquals(DeliveryMode.PERSISTENT, activeMQMessage.getJMSDeliveryMode());
1: 
1:         activeMQConnection.close();
1:         connection.unsubscribe(new String[] { topicName });
1: 
1:         connection.disconnect();
1:     }
1: 
author:Timothy Bish
-------------------------------------------------------------------------------
commit:af999fe
/////////////////////////////////////////////////////////////////////////
1: import static org.junit.Assert.assertTrue;
1: 
1: import org.apache.activemq.util.Wait;
1: import org.fusesource.mqtt.client.BlockingConnection;
1: import org.fusesource.mqtt.client.MQTT;
1: import org.fusesource.mqtt.client.QoS;
1: import org.fusesource.mqtt.client.Topic;
/////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////
1: 
1:     @Test(timeout = 60 * 1000)
1:     public void testSubscribeOnVirtualTopicAsDurable() throws Exception {
1:         MQTT mqtt = createMQTTConnection();
1:         mqtt.setClientId("VirtualTopicSubscriber");
1:         mqtt.setKeepAlive((short) 2);
1:         mqtt.setCleanSession(false);
1: 
1:         final BlockingConnection connection = mqtt.blockingConnection();
1:         connection.connect();
1: 
1:         final String topicName = "VirtualTopic/foo/bah";
1: 
1:         connection.subscribe(new Topic[] { new Topic(topicName, QoS.EXACTLY_ONCE)});
1: 
1:         assertTrue("Should create a durable subscription", Wait.waitFor(new Wait.Condition() {
1: 
1:             @Override
1:             public boolean isSatisified() throws Exception {
1:                 return brokerService.getAdminView().getDurableTopicSubscribers().length == 1;
1:             }
1:         }));
1: 
1:         connection.unsubscribe(new String[] { topicName });
1: 
1:         assertTrue("Should remove a durable subscription", Wait.waitFor(new Wait.Condition() {
1: 
1:             @Override
1:             public boolean isSatisified() throws Exception {
1:                 return brokerService.getAdminView().getDurableTopicSubscribers().length == 0;
1:             }
1:         }));
1: 
1:         connection.disconnect();
1:     }
1: 
1:     @Test(timeout = 60 * 1000)
1:     public void testDurableVirtaulTopicSubIsRecovered() throws Exception {
1:         MQTT mqtt = createMQTTConnection();
1:         mqtt.setClientId("VirtualTopicSubscriber");
1:         mqtt.setKeepAlive((short) 2);
1:         mqtt.setCleanSession(false);
1: 
1:         final String topicName = "VirtualTopic/foo/bah";
1: 
1:         {
1:             final BlockingConnection connection = mqtt.blockingConnection();
1:             connection.connect();
1: 
1:             connection.subscribe(new Topic[] { new Topic(topicName, QoS.EXACTLY_ONCE)});
1: 
1:             assertTrue("Should create a durable subscription", Wait.waitFor(new Wait.Condition() {
1: 
1:                 @Override
1:                 public boolean isSatisified() throws Exception {
1:                     return brokerService.getAdminView().getDurableTopicSubscribers().length == 1;
1:                 }
1:             }));
1: 
1:             connection.disconnect();
1:         }
1: 
1:         assertTrue("Should be one inactive subscription", Wait.waitFor(new Wait.Condition() {
1: 
1:             @Override
1:             public boolean isSatisified() throws Exception {
1:                 return brokerService.getAdminView().getInactiveDurableTopicSubscribers().length == 1;
1:             }
1:         }));
1: 
1:         {
1:             final BlockingConnection connection = mqtt.blockingConnection();
1:             connection.connect();
1: 
1:             assertTrue("Should recover a durable subscription", Wait.waitFor(new Wait.Condition() {
1: 
1:                 @Override
1:                 public boolean isSatisified() throws Exception {
1:                     return brokerService.getAdminView().getDurableTopicSubscribers().length == 1;
1:                 }
1:             }));
1: 
1:             connection.subscribe(new Topic[] { new Topic(topicName, QoS.EXACTLY_ONCE)});
1: 
1:             assertTrue("Should still be just one durable subscription", Wait.waitFor(new Wait.Condition() {
1: 
1:                 @Override
1:                 public boolean isSatisified() throws Exception {
1:                     return brokerService.getAdminView().getDurableTopicSubscribers().length == 1;
1:                 }
1:             }));
1: 
1:             connection.disconnect();
1:         }
1:     }
commit:59f8cfc
/////////////////////////////////////////////////////////////////////////
1:         protocolConfig = "transport.subscriptionStrategy=mqtt-virtual-topic-subscriptions";
commit:413e484
/////////////////////////////////////////////////////////////////////////
1: /**
1:  * Licensed to the Apache Software Foundation (ASF) under one or more
1:  * contributor license agreements.  See the NOTICE file distributed with
1:  * this work for additional information regarding copyright ownership.
1:  * The ASF licenses this file to You under the Apache License, Version 2.0
1:  * (the "License"); you may not use this file except in compliance with
1:  * the License.  You may obtain a copy of the License at
1:  *
1:  *      http://www.apache.org/licenses/LICENSE-2.0
1:  *
1:  * Unless required by applicable law or agreed to in writing, software
1:  * distributed under the License is distributed on an "AS IS" BASIS,
1:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:  * See the License for the specific language governing permissions and
1:  * limitations under the License.
1:  */
1: package org.apache.activemq.transport.mqtt;
1: 
1: import org.junit.Before;
0: import org.junit.Ignore;
1: import org.junit.Test;
1: 
1: /**
1:  * Run the basic tests with the NIO Transport.
1:  */
1: public class MQTTVirtualTopicSubscriptionsTest extends MQTTTest {
1: 
1:     @Override
1:     @Before
1:     public void setUp() throws Exception {
0:         protocolConfig = "transport.subscriptionStrategyName=mqtt-virtual-topic-subscriptions";
1:         super.setUp();
1:     }
1: 
0:     // TODO - This currently fails on the durable case because we have a hard time
0:     //        recovering the original Topic name when a client tries to subscribe
0:     //        durable to a VirtualTopic.* type topic.
1:     @Override
0:     @Ignore
0:     public void testRetainedMessageOnVirtualTopics() throws Exception {}
1: 
1:     @Override
1:     @Test(timeout = 60 * 1000)
1:     public void testSendMQTTReceiveJMS() throws Exception {
1:         doTestSendMQTTReceiveJMS("VirtualTopic.foo.*");
1:     }
1: 
1:     @Override
1:     @Test(timeout = 2 * 60 * 1000)
1:     public void testSendJMSReceiveMQTT() throws Exception {
1:         doTestSendJMSReceiveMQTT("VirtualTopic.foo.far");
1:     }
1: 
1:     @Override
1:     @Test(timeout = 30 * 10000)
1:     public void testJmsMapping() throws Exception {
1:         doTestJmsMapping("VirtualTopic.test.foo");
1:     }
1: }
============================================================================