1:d29ca2a: /**
1:57b4941:  * Licensed to the Apache Software Foundation (ASF) under one or more
1:57b4941:  * contributor license agreements.  See the NOTICE file distributed with
1:57b4941:  * this work for additional information regarding copyright ownership.
1:57b4941:  * The ASF licenses this file to You under the Apache License, Version 2.0
1:57b4941:  * (the "License"); you may not use this file except in compliance with
1:57b4941:  * the License.  You may obtain a copy of the License at
3:d29ca2a:  *
1:230a86c:  *      http://www.apache.org/licenses/LICENSE-2.0
1:d29ca2a:  *
1:d29ca2a:  * Unless required by applicable law or agreed to in writing, software
1:d29ca2a:  * distributed under the License is distributed on an "AS IS" BASIS,
1:d29ca2a:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:d29ca2a:  * See the License for the specific language governing permissions and
1:d29ca2a:  * limitations under the License.
1:d29ca2a:  */
2:d29ca2a: 
1:d29ca2a: package org.apache.activemq;
1:d29ca2a: 
1:d29ca2a: import javax.jms.JMSException;
1:d29ca2a: import javax.jms.Topic;
1:d29ca2a: import javax.jms.TopicSubscriber;
1:d29ca2a: 
1:74a7a8b: import org.apache.activemq.command.ActiveMQDestination;
1:74a7a8b: import org.apache.activemq.command.ConsumerId;
1:74a7a8b: 
1:d29ca2a: /**
1:d29ca2a:  * A client uses a <CODE>TopicSubscriber</CODE> object to receive messages
1:d29ca2a:  * that have been published to a topic. A <CODE>TopicSubscriber</CODE> object
1:d29ca2a:  * is the publish/subscribe form of a message consumer. A <CODE>
1:d29ca2a:  * MessageConsumer</CODE> can be created by using <CODE>
1:d29ca2a:  * Session.createConsumer</CODE>.
1:d29ca2a:  * <p/>
1:d29ca2a:  * <P>
1:d29ca2a:  * A <CODE>TopicSession</CODE> allows the creation of multiple <CODE>
1:d29ca2a:  * TopicSubscriber</CODE> objects per topic. It will deliver each message for
1:d29ca2a:  * a topic to each subscriber eligible to receive it. Each copy of the message
1:d29ca2a:  * is treated as a completely separate message. Work done on one copy has no
1:d29ca2a:  * effect on the others; acknowledging one does not acknowledge the others; one
1:d29ca2a:  * message may be delivered immediately, while another waits for its subscriber
1:d29ca2a:  * to process messages ahead of it.
1:d29ca2a:  * <p/>
1:d29ca2a:  * <P>
1:d29ca2a:  * Regular <CODE>TopicSubscriber</CODE> objects are not durable. They receive
1:d29ca2a:  * only messages that are published while they are active.
1:d29ca2a:  * <p/>
1:d29ca2a:  * <P>
1:d29ca2a:  * Messages filtered out by a subscriber's message selector will never be
1:d29ca2a:  * delivered to the subscriber. From the subscriber's perspective, they do not
1:d29ca2a:  * exist.
1:d29ca2a:  * <p/>
1:d29ca2a:  * <P>
1:d29ca2a:  * In some cases, a connection may both publish and subscribe to a topic. The
1:d29ca2a:  * subscriber <CODE>NoLocal</CODE> attribute allows a subscriber to inhibit
1:d29ca2a:  * the delivery of messages published by its own connection.
1:d29ca2a:  * <p/>
1:d29ca2a:  * <P>
1:d29ca2a:  * If a client needs to receive all the messages published on a topic,
1:d29ca2a:  * including the ones published while the subscriber is inactive, it uses a
1:d29ca2a:  * durable <CODE>TopicSubscriber</CODE>. The JMS provider retains a record
1:d29ca2a:  * of this durable subscription and insures that all messages from the topic's
1:d29ca2a:  * publishers are retained until they are acknowledged by this durable
1:d29ca2a:  * subscriber or they have expired.
1:d29ca2a:  * <p/>
1:d29ca2a:  * <P>
1:d29ca2a:  * Sessions with durable subscribers must always provide the same client
1:d29ca2a:  * identifier. In addition, each client must specify a name that uniquely
1:d29ca2a:  * identifies (within client identifier) each durable subscription it creates.
1:d29ca2a:  * Only one session at a time can have a <CODE>TopicSubscriber</CODE> for a
1:d29ca2a:  * particular durable subscription.
1:d29ca2a:  * <p/>
1:d29ca2a:  * <P>
1:d29ca2a:  * A client can change an existing durable subscription by creating a durable
1:d29ca2a:  * <CODE>TopicSubscriber</CODE> with the same name and a new topic and/or
1:d29ca2a:  * message selector. Changing a durable subscription is equivalent to
1:d29ca2a:  * unsubscribing (deleting) the old one and creating a new one.
1:d29ca2a:  * <p/>
1:d29ca2a:  * <P>
1:d29ca2a:  * The <CODE>unsubscribe</CODE> method is used to delete a durable
1:d29ca2a:  * subscription. The <CODE>unsubscribe</CODE> method can be used at the
1:d29ca2a:  * <CODE>Session</CODE> or <CODE>TopicSession</CODE> level. This method
1:d29ca2a:  * deletes the state being maintained on behalf of the subscriber by its
1:d29ca2a:  * provider.
1:d29ca2a:  * <p/>
1:d29ca2a:  * <P>
1:d29ca2a:  * Creating a <CODE>MessageConsumer</CODE> provides the same features as
1:d29ca2a:  * creating a <CODE>TopicSubscriber</CODE>. To create a durable subscriber,
1:d29ca2a:  * use of <CODE>Session.CreateDurableSubscriber</CODE> is recommended. The
1:d29ca2a:  * <CODE>TopicSubscriber</CODE> is provided to support existing code.
1:d29ca2a:  *
1:d29ca2a:  * @see javax.jms.Session#createConsumer
1:d29ca2a:  * @see javax.jms.Session#createDurableSubscriber
1:d29ca2a:  * @see javax.jms.TopicSession
1:d29ca2a:  * @see javax.jms.TopicSession#createSubscriber
1:d29ca2a:  * @see javax.jms.TopicSubscriber
1:d29ca2a:  * @see javax.jms.MessageConsumer
1:d29ca2a:  */
1:d29ca2a: 
1:d29ca2a: public class ActiveMQTopicSubscriber extends ActiveMQMessageConsumer implements
1:d29ca2a:         TopicSubscriber {
1:d29ca2a: 
1:d29ca2a:     /**
1:d29ca2a:      * @param theSession
1:c59246d:      * @param value 
1:d29ca2a:      * @param dest
1:d29ca2a:      * @param name
1:d29ca2a:      * @param selector
1:d29ca2a:      * @param cnum
1:d29ca2a:      * @param noLocalValue
1:d29ca2a:      * @param browserValue
1:d29ca2a:      * @param asyncDispatch 
1:d29ca2a:      * @throws JMSException
1:d29ca2a:      */
1:d29ca2a:     protected ActiveMQTopicSubscriber(ActiveMQSession theSession,
1:bed10aa:                                       ConsumerId consumerId, ActiveMQDestination dest, String name, String selector, int prefetch, int maximumPendingMessageCount,
1:d29ca2a:                                       boolean noLocalValue, boolean browserValue, boolean asyncDispatch) throws JMSException {
1:fba0742:         super(theSession, consumerId, dest, name, selector, prefetch, maximumPendingMessageCount, noLocalValue, browserValue, asyncDispatch, null);
1:d29ca2a:     }
1:d29ca2a: 
1:d29ca2a:     /**
1:d29ca2a:      * Gets the <CODE>Topic</CODE> associated with this subscriber.
1:d29ca2a:      *
1:d29ca2a:      * @return this subscriber's <CODE>Topic</CODE>
1:d29ca2a:      * @throws JMSException if the JMS provider fails to get the topic for this topic
1:d29ca2a:      *                      subscriber due to some internal error.
1:d29ca2a:      */
1:d29ca2a: 
1:d29ca2a:     public Topic getTopic() throws JMSException {
1:d29ca2a:         checkClosed();
1:d29ca2a:         return (Topic) super.getDestination();
1:d29ca2a:     }
1:d29ca2a: 
1:d29ca2a:     /**
1:d29ca2a:      * Gets the <CODE>NoLocal</CODE> attribute for this subscriber. The
1:d29ca2a:      * default value for this attribute is false.
1:d29ca2a:      *
1:d29ca2a:      * @return true if locally published messages are being inhibited
1:d29ca2a:      * @throws JMSException if the JMS provider fails to get the <CODE>NoLocal
1:d29ca2a:      *                      </CODE> attribute for this topic subscriber due to some
1:d29ca2a:      *                      internal error.
1:d29ca2a:      */
1:d29ca2a: 
1:d29ca2a:     public boolean getNoLocal() throws JMSException {
1:d29ca2a:         checkClosed();
1:d29ca2a:         return super.isNoLocal();
1:d29ca2a:     }
1:d29ca2a: }
============================================================================
author:Hadrian Zbarcea
-------------------------------------------------------------------------------
commit:d54d046
author:Hiram R. Chirino
-------------------------------------------------------------------------------
commit:9a8f6e4
commit:74a7a8b
/////////////////////////////////////////////////////////////////////////
1: import org.apache.activemq.command.ActiveMQDestination;
1: import org.apache.activemq.command.ConsumerId;
1: 
commit:230a86c
/////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////
1:  *      http://www.apache.org/licenses/LICENSE-2.0
commit:57b4941
/////////////////////////////////////////////////////////////////////////
1:  * Licensed to the Apache Software Foundation (ASF) under one or more
1:  * contributor license agreements.  See the NOTICE file distributed with
1:  * this work for additional information regarding copyright ownership.
1:  * The ASF licenses this file to You under the Apache License, Version 2.0
1:  * (the "License"); you may not use this file except in compliance with
1:  * the License.  You may obtain a copy of the License at
commit:c59246d
/////////////////////////////////////////////////////////////////////////
1:      * @param value 
commit:48b4869
/////////////////////////////////////////////////////////////////////////
0:  * Copyright 2005-2006 The Apache Software Foundation
commit:d29ca2a
/////////////////////////////////////////////////////////////////////////
1: /**
1:  *
0:  * Copyright 2004 The Apache Software Foundation
1:  *
0:  * Licensed under the Apache License, Version 2.0 (the "License");
0:  * you may not use this file except in compliance with the License.
0:  * You may obtain a copy of the License at
1:  *
0:  * http://www.apache.org/licenses/LICENSE-2.0
1:  *
1:  * Unless required by applicable law or agreed to in writing, software
1:  * distributed under the License is distributed on an "AS IS" BASIS,
1:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:  * See the License for the specific language governing permissions and
1:  * limitations under the License.
1:  */
1: 
1: package org.apache.activemq;
1: 
0: import org.apache.activemq.command.ActiveMQDestination;
0: import org.apache.activemq.command.ConsumerId;
1: 
1: import javax.jms.JMSException;
1: import javax.jms.Topic;
1: import javax.jms.TopicSubscriber;
1: 
1: /**
1:  * A client uses a <CODE>TopicSubscriber</CODE> object to receive messages
1:  * that have been published to a topic. A <CODE>TopicSubscriber</CODE> object
1:  * is the publish/subscribe form of a message consumer. A <CODE>
1:  * MessageConsumer</CODE> can be created by using <CODE>
1:  * Session.createConsumer</CODE>.
1:  * <p/>
1:  * <P>
1:  * A <CODE>TopicSession</CODE> allows the creation of multiple <CODE>
1:  * TopicSubscriber</CODE> objects per topic. It will deliver each message for
1:  * a topic to each subscriber eligible to receive it. Each copy of the message
1:  * is treated as a completely separate message. Work done on one copy has no
1:  * effect on the others; acknowledging one does not acknowledge the others; one
1:  * message may be delivered immediately, while another waits for its subscriber
1:  * to process messages ahead of it.
1:  * <p/>
1:  * <P>
1:  * Regular <CODE>TopicSubscriber</CODE> objects are not durable. They receive
1:  * only messages that are published while they are active.
1:  * <p/>
1:  * <P>
1:  * Messages filtered out by a subscriber's message selector will never be
1:  * delivered to the subscriber. From the subscriber's perspective, they do not
1:  * exist.
1:  * <p/>
1:  * <P>
1:  * In some cases, a connection may both publish and subscribe to a topic. The
1:  * subscriber <CODE>NoLocal</CODE> attribute allows a subscriber to inhibit
1:  * the delivery of messages published by its own connection.
1:  * <p/>
1:  * <P>
1:  * If a client needs to receive all the messages published on a topic,
1:  * including the ones published while the subscriber is inactive, it uses a
1:  * durable <CODE>TopicSubscriber</CODE>. The JMS provider retains a record
1:  * of this durable subscription and insures that all messages from the topic's
1:  * publishers are retained until they are acknowledged by this durable
1:  * subscriber or they have expired.
1:  * <p/>
1:  * <P>
1:  * Sessions with durable subscribers must always provide the same client
1:  * identifier. In addition, each client must specify a name that uniquely
1:  * identifies (within client identifier) each durable subscription it creates.
1:  * Only one session at a time can have a <CODE>TopicSubscriber</CODE> for a
1:  * particular durable subscription.
1:  * <p/>
1:  * <P>
1:  * A client can change an existing durable subscription by creating a durable
1:  * <CODE>TopicSubscriber</CODE> with the same name and a new topic and/or
1:  * message selector. Changing a durable subscription is equivalent to
1:  * unsubscribing (deleting) the old one and creating a new one.
1:  * <p/>
1:  * <P>
1:  * The <CODE>unsubscribe</CODE> method is used to delete a durable
1:  * subscription. The <CODE>unsubscribe</CODE> method can be used at the
1:  * <CODE>Session</CODE> or <CODE>TopicSession</CODE> level. This method
1:  * deletes the state being maintained on behalf of the subscriber by its
1:  * provider.
1:  * <p/>
1:  * <P>
1:  * Creating a <CODE>MessageConsumer</CODE> provides the same features as
1:  * creating a <CODE>TopicSubscriber</CODE>. To create a durable subscriber,
1:  * use of <CODE>Session.CreateDurableSubscriber</CODE> is recommended. The
1:  * <CODE>TopicSubscriber</CODE> is provided to support existing code.
1:  *
1:  * @see javax.jms.Session#createConsumer
1:  * @see javax.jms.Session#createDurableSubscriber
1:  * @see javax.jms.TopicSession
1:  * @see javax.jms.TopicSession#createSubscriber
1:  * @see javax.jms.TopicSubscriber
1:  * @see javax.jms.MessageConsumer
1:  */
1: 
1: public class ActiveMQTopicSubscriber extends ActiveMQMessageConsumer implements
1:         TopicSubscriber {
1: 
1:     /**
1:      * @param theSession
0:      * @param consumerId 
1:      * @param dest
1:      * @param name
1:      * @param selector
1:      * @param cnum
1:      * @param noLocalValue
1:      * @param browserValue
1:      * @param asyncDispatch 
1:      * @throws JMSException
1:      */
1:     protected ActiveMQTopicSubscriber(ActiveMQSession theSession,
0:                                       ConsumerId consumerId, ActiveMQDestination dest, String name, String selector, int prefetch,
1:                                       boolean noLocalValue, boolean browserValue, boolean asyncDispatch) throws JMSException {
0:         super(theSession, consumerId, dest, name, selector, prefetch, noLocalValue, browserValue, asyncDispatch);
1:     }
1: 
1:     /**
1:      * Gets the <CODE>Topic</CODE> associated with this subscriber.
1:      *
1:      * @return this subscriber's <CODE>Topic</CODE>
1:      * @throws JMSException if the JMS provider fails to get the topic for this topic
1:      *                      subscriber due to some internal error.
1:      */
1: 
1:     public Topic getTopic() throws JMSException {
1:         checkClosed();
1:         return (Topic) super.getDestination();
1:     }
1: 
1:     /**
1:      * Gets the <CODE>NoLocal</CODE> attribute for this subscriber. The
1:      * default value for this attribute is false.
1:      *
1:      * @return true if locally published messages are being inhibited
1:      * @throws JMSException if the JMS provider fails to get the <CODE>NoLocal
1:      *                      </CODE> attribute for this topic subscriber due to some
1:      *                      internal error.
1:      */
1: 
1:     public boolean getNoLocal() throws JMSException {
1:         checkClosed();
1:         return super.isNoLocal();
1:     }
1: }
author:James Strachan
-------------------------------------------------------------------------------
commit:fba0742
/////////////////////////////////////////////////////////////////////////
1:         super(theSession, consumerId, dest, name, selector, prefetch, maximumPendingMessageCount, noLocalValue, browserValue, asyncDispatch, null);
commit:bed10aa
/////////////////////////////////////////////////////////////////////////
1:                                       ConsumerId consumerId, ActiveMQDestination dest, String name, String selector, int prefetch, int maximumPendingMessageCount,
0:         super(theSession, consumerId, dest, name, selector, prefetch, maximumPendingMessageCount, noLocalValue, browserValue, asyncDispatch);
============================================================================