1:91059de: /**
1:91059de:  * Licensed to the Apache Software Foundation (ASF) under one or more
1:91059de:  * contributor license agreements.  See the NOTICE file distributed with
1:91059de:  * this work for additional information regarding copyright ownership.
1:91059de:  * The ASF licenses this file to You under the Apache License, Version 2.0
1:91059de:  * (the "License"); you may not use this file except in compliance with
1:91059de:  * the License.  You may obtain a copy of the License at
1:91059de:  *
1:91059de:  *      http://www.apache.org/licenses/LICENSE-2.0
1:91059de:  *
1:91059de:  * Unless required by applicable law or agreed to in writing, software
1:91059de:  * distributed under the License is distributed on an "AS IS" BASIS,
1:91059de:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:91059de:  * See the License for the specific language governing permissions and
1:91059de:  * limitations under the License.
1:91059de:  */
1:91059de: package org.apache.activemq.transport.failover;
1:7388438: 
1:e28b55c: import java.util.ArrayList;
1:e28b55c: import java.util.HashMap;
1:e28b55c: import java.util.HashSet;
1:e28b55c: import java.util.List;
1:e28b55c: import java.util.Map;
1:e28b55c: import java.util.Set;
1:e28b55c: 
1:e28b55c: import javax.jms.Connection;
1:e28b55c: import javax.jms.JMSException;
1:e28b55c: import javax.jms.MessageConsumer;
1:e28b55c: import javax.jms.Queue;
1:e28b55c: import javax.jms.Session;
1:e28b55c: 
1:91059de: import junit.framework.TestCase;
1:e28b55c: 
1:91059de: import org.apache.activemq.ActiveMQConnection;
1:91059de: import org.apache.activemq.ActiveMQConnectionFactory;
1:91059de: import org.apache.activemq.broker.BrokerService;
1:91059de: import org.apache.activemq.broker.TransportConnector;
1:91059de: import org.apache.activemq.network.NetworkConnector;
1:1a3ade0: import org.apache.activemq.util.Wait;
1:91059de: import org.slf4j.Logger;
1:91059de: import org.slf4j.LoggerFactory;
7:91059de: 
1:91059de: public class FailoverClusterTestSupport extends TestCase {
1:91059de:     protected final Logger logger = LoggerFactory.getLogger(getClass());
1:91059de: 
1:91059de:     private static final int NUMBER_OF_CLIENTS = 30;
1:91059de: 
1:91059de:     private String clientUrl;
1:91059de: 
1:91059de:     private final Map<String, BrokerService> brokers = new HashMap<String, BrokerService>();
1:91059de:     private final List<ActiveMQConnection> connections = new ArrayList<ActiveMQConnection>();
1:91059de: 
1:1a3ade0:     protected void assertClientsConnectedToTwoBrokers() throws Exception {
1:1a3ade0:         assertClientsConnectedToXBrokers(2);
7:91059de:     }
1:e28b55c: 
1:1a3ade0:     protected void assertClientsConnectedToThreeBrokers() throws Exception {
1:1a3ade0:         assertClientsConnectedToXBrokers(3);
1:1a3ade0:     }
1:1a3ade0: 
1:1a3ade0:     protected void assertClientsConnectedToXBrokers(final int x) throws Exception {
1:1a3ade0:         final Set<String> set = new HashSet<String>();
1:1a3ade0:         Wait.waitFor(new Wait.Condition() {
1:1a3ade0:             @Override
1:1a3ade0:             public boolean isSatisified() throws Exception {
1:1a3ade0:                 set.clear();
1:1a3ade0:                 for (ActiveMQConnection c : connections) {
1:1a3ade0:                     if (c.getTransportChannel().getRemoteAddress() != null) {
1:1a3ade0:                         set.add(c.getTransportChannel().getRemoteAddress());
1:1a3ade0:                     }
1:1a3ade0:                 }
1:1a3ade0:                 return set.size() == x;
1:beda82a:             }
1:1a3ade0:         });
1:1a3ade0: 
1:1a3ade0:         assertTrue("Only " + x + " connections should be found: " + set,
1:1a3ade0:                 set.size() == x);
1:beda82a:     }
1:beda82a: 
1:beda82a:     protected void assertClientsConnectionsEvenlyDistributed(double minimumPercentage) {
1:e28b55c:         Map<String, Double> clientConnectionCounts = new HashMap<String, Double>();
1:beda82a:         int total = 0;
1:beda82a:         for (ActiveMQConnection c : connections) {
1:e28b55c:             String key = c.getTransportChannel().getRemoteAddress();
1:beda82a:             if (key != null) {
1:beda82a:                 total++;
1:beda82a:                 if (clientConnectionCounts.containsKey(key)) {
1:beda82a:                     double count = clientConnectionCounts.get(key);
1:beda82a:                     count += 1.0;
1:beda82a:                     clientConnectionCounts.put(key, count);
1:beda82a:                 } else {
1:beda82a:                     clientConnectionCounts.put(key, 1.0);
1:beda82a:                 }
1:beda82a:             }
1:beda82a:         }
1:beda82a:         Set<String> keys = clientConnectionCounts.keySet();
1:beda82a:         for(String key: keys){
1:b9cc24b:             double count = clientConnectionCounts.get(key);
1:b9cc24b:             double percentage = count / total;
1:beda82a:             logger.info(count + " of " + total + " connections for " + key + " = " + percentage);
1:e28b55c:             assertTrue("Connections distribution expected to be >= than " + minimumPercentage
1:beda82a:                     + ".  Actuall distribution was " + percentage + " for connection " + key,
1:beda82a:                     percentage >= minimumPercentage);
1:beda82a:         }
1:beda82a:     }
1:e28b55c: 
1:7388438:     protected void assertAllConnectedTo(String url) throws Exception {
1:7388438:         for (ActiveMQConnection c : connections) {
1:b9cc24b:             assertEquals(url, c.getTransportChannel().getRemoteAddress());
1:e28b55c:         }
1:beda82a:     }
1:beda82a: 
1:db1506a:     protected void assertBrokerInfo(String brokerName) throws Exception {
1:db1506a:         for (ActiveMQConnection c : connections) {
1:db1506a:             assertEquals(brokerName, c.getBrokerInfo().getBrokerName());
1:db1506a:         }
1:db1506a:     }
1:db1506a: 
1:91059de:     protected void addBroker(String name, BrokerService brokerService) {
1:91059de:         brokers.put(name, brokerService);
1:7388438:     }
1:7388438: 
1:91059de:     protected BrokerService getBroker(String name) {
1:91059de:         return brokers.get(name);
1:7388438:     }
1:e28b55c: 
1:7388438:     protected void stopBroker(String name) throws Exception {
1:7388438:         BrokerService broker = brokers.remove(name);
1:7388438:         broker.stop();
1:7388438:         broker.waitUntilStopped();
1:7388438:     }
1:91059de: 
1:91059de:     protected BrokerService removeBroker(String name) {
1:91059de:         return brokers.remove(name);
1:91059de:     }
1:91059de: 
1:91059de:     protected void destroyBrokerCluster() throws JMSException, Exception {
1:91059de:         for (BrokerService b : brokers.values()) {
1:e28b55c:             try {
1:e28b55c:                 b.stop();
1:e28b55c:                 b.waitUntilStopped();
1:e28b55c:             } catch (Exception e) {
1:e28b55c:                 // Keep on going, we want to try and stop them all.
1:e28b55c:                 logger.info("Error while stopping broker["+ b.getBrokerName() +"] continuing...");
1:e28b55c:             }
1:91059de:         }
1:91059de:         brokers.clear();
1:91059de:     }
1:91059de: 
1:91059de:     protected void shutdownClients() throws JMSException {
1:91059de:         for (Connection c : connections) {
1:91059de:             c.close();
1:91059de:         }
1:91059de:     }
1:91059de: 
1:91059de:     protected BrokerService createBroker(String brokerName) throws Exception {
1:91059de:         BrokerService answer = new BrokerService();
1:91059de:         answer.setPersistent(false);
1:91059de:         answer.setUseJmx(false);
1:91059de:         answer.setBrokerName(brokerName);
1:91059de:         answer.setUseShutdownHook(false);
1:91059de:         return answer;
1:91059de:     }
1:91059de: 
1:91059de:     protected void addTransportConnector(BrokerService brokerService,
1:e28b55c:                                          String connectorName, String uri, boolean clustered) throws Exception {
1:91059de:         TransportConnector connector = brokerService.addConnector(uri);
1:91059de:         connector.setName(connectorName);
1:91059de:         if (clustered) {
1:91059de:             connector.setRebalanceClusterClients(true);
1:91059de:             connector.setUpdateClusterClients(true);
1:91059de:             connector.setUpdateClusterClientsOnRemove(true);
1:91059de:         } else {
1:91059de:             connector.setRebalanceClusterClients(false);
1:91059de:             connector.setUpdateClusterClients(false);
1:91059de:             connector.setUpdateClusterClientsOnRemove(false);
1:91059de:         }
1:91059de:     }
1:91059de: 
1:91059de:     protected void addNetworkBridge(BrokerService answer, String bridgeName,
1:e28b55c:                                     String uri, boolean duplex, String destinationFilter) throws Exception {
1:91059de:         NetworkConnector network = answer.addNetworkConnector(uri);
1:91059de:         network.setName(bridgeName);
1:91059de:         network.setDuplex(duplex);
1:91059de:         if (destinationFilter != null && !destinationFilter.equals("")) {
1:91059de:             network.setDestinationFilter(bridgeName);
1:91059de:         }
1:91059de:     }
1:91059de: 
1:91059de:     protected void createClients() throws Exception {
1:7388438:         createClients(NUMBER_OF_CLIENTS);
1:7388438:     }
1:e28b55c: 
1:beda82a:     @SuppressWarnings("unused")
1:e28b55c:     protected void createClients(int numOfClients) throws Exception {
1:e28b55c:         ActiveMQConnectionFactory factory = new ActiveMQConnectionFactory(clientUrl);
1:beda82a:         for (int i = 0; i < numOfClients; i++) {
1:e28b55c:             ActiveMQConnection c = (ActiveMQConnection) factory.createConnection();
1:91059de:             c.start();
1:91059de:             Session s = c.createSession(false, Session.AUTO_ACKNOWLEDGE);
1:91059de:             Queue queue = s.createQueue(getClass().getName());
1:91059de:             MessageConsumer consumer = s.createConsumer(queue);
1:91059de:             connections.add(c);
1:91059de:         }
1:91059de:     }
1:7388438: 
1:91059de:     public String getClientUrl() {
1:91059de:         return clientUrl;
1:91059de:     }
1:91059de: 
1:91059de:     public void setClientUrl(String clientUrl) {
1:91059de:         this.clientUrl = clientUrl;
1:beda82a:     }
1:91059de: }
============================================================================
author:gtully
-------------------------------------------------------------------------------
commit:db1506a
/////////////////////////////////////////////////////////////////////////
1:     protected void assertBrokerInfo(String brokerName) throws Exception {
1:         for (ActiveMQConnection c : connections) {
1:             assertEquals(brokerName, c.getBrokerInfo().getBrokerName());
1:         }
1:     }
1: 
commit:1a3ade0
/////////////////////////////////////////////////////////////////////////
1: import org.apache.activemq.util.Wait;
/////////////////////////////////////////////////////////////////////////
1:     protected void assertClientsConnectedToTwoBrokers() throws Exception {
1:         assertClientsConnectedToXBrokers(2);
1:     protected void assertClientsConnectedToThreeBrokers() throws Exception {
1:         assertClientsConnectedToXBrokers(3);
1:     }
1: 
1:     protected void assertClientsConnectedToXBrokers(final int x) throws Exception {
1:         final Set<String> set = new HashSet<String>();
1:         Wait.waitFor(new Wait.Condition() {
1:             @Override
1:             public boolean isSatisified() throws Exception {
1:                 set.clear();
1:                 for (ActiveMQConnection c : connections) {
1:                     if (c.getTransportChannel().getRemoteAddress() != null) {
1:                         set.add(c.getTransportChannel().getRemoteAddress());
1:                     }
1:                 }
1:                 return set.size() == x;
1:         });
1: 
1:         assertTrue("Only " + x + " connections should be found: " + set,
1:                 set.size() == x);
author:Timothy A. Bish
-------------------------------------------------------------------------------
commit:b9cc24b
/////////////////////////////////////////////////////////////////////////
1:             double count = clientConnectionCounts.get(key);
1:             double percentage = count / total;
/////////////////////////////////////////////////////////////////////////
1:             assertEquals(url, c.getTransportChannel().getRemoteAddress());
commit:ef24cc9
commit:e28b55c
/////////////////////////////////////////////////////////////////////////
1: import java.util.ArrayList;
1: import java.util.HashMap;
1: import java.util.HashSet;
1: import java.util.List;
1: import java.util.Map;
1: import java.util.Set;
1: 
1: import javax.jms.Connection;
1: import javax.jms.JMSException;
1: import javax.jms.MessageConsumer;
1: import javax.jms.Queue;
1: import javax.jms.Session;
1: 
1: 
/////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////
1: 
1:         Map<String, Double> clientConnectionCounts = new HashMap<String, Double>();
1:             String key = c.getTransportChannel().getRemoteAddress();
/////////////////////////////////////////////////////////////////////////
0:             double count = (double)clientConnectionCounts.get(key);
0:             double percentage = count / (double)total;
1:             assertTrue("Connections distribution expected to be >= than " + minimumPercentage
1: 
1:     }
/////////////////////////////////////////////////////////////////////////
1: 
/////////////////////////////////////////////////////////////////////////
1:             try {
1:                 b.stop();
1:                 b.waitUntilStopped();
1:             } catch (Exception e) {
1:                 // Keep on going, we want to try and stop them all.
1:                 logger.info("Error while stopping broker["+ b.getBrokerName() +"] continuing...");
1:             }
/////////////////////////////////////////////////////////////////////////
1:                                          String connectorName, String uri, boolean clustered) throws Exception {
/////////////////////////////////////////////////////////////////////////
1:                                     String uri, boolean duplex, String destinationFilter) throws Exception {
/////////////////////////////////////////////////////////////////////////
1: 
1:     protected void createClients(int numOfClients) throws Exception {
1:         ActiveMQConnectionFactory factory = new ActiveMQConnectionFactory(clientUrl);
1:             ActiveMQConnection c = (ActiveMQConnection) factory.createConnection();
author:Bosanac Dejan
-------------------------------------------------------------------------------
commit:beda82a
/////////////////////////////////////////////////////////////////////////
0:             if (c.getTransportChannel().getRemoteAddress() != null) {
0:                 set.add(c.getTransportChannel().getRemoteAddress());
1:             }
/////////////////////////////////////////////////////////////////////////
0:             if (c.getTransportChannel().getRemoteAddress() != null) {
0:                 set.add(c.getTransportChannel().getRemoteAddress());
1:             }
1:     
1:     protected void assertClientsConnectionsEvenlyDistributed(double minimumPercentage) {
0:     	Map<String, Double> clientConnectionCounts = new HashMap<String, Double>();
1:         int total = 0;
1:         for (ActiveMQConnection c : connections) {
0:         	String key = c.getTransportChannel().getRemoteAddress();
1:             if (key != null) {
1:                 total++;
1:                 if (clientConnectionCounts.containsKey(key)) {
1:                     double count = clientConnectionCounts.get(key);
1:                     count += 1.0;
1:                     clientConnectionCounts.put(key, count);
1:                 } else {
1:                     clientConnectionCounts.put(key, 1.0);
1:                 }
1:             }
1:         }
1:         Set<String> keys = clientConnectionCounts.keySet();
1:         for(String key: keys){
0:         	double count = (double)clientConnectionCounts.get(key);
0:         	double percentage = count / (double)total;
1:             logger.info(count + " of " + total + " connections for " + key + " = " + percentage);
0:         	assertTrue("Connections distribution expected to be >= than " + minimumPercentage
1:                     + ".  Actuall distribution was " + percentage + " for connection " + key,
1:                     percentage >= minimumPercentage);
1:         }
1:     }
1:     
1:     } 
/////////////////////////////////////////////////////////////////////////
0:             b.waitUntilStopped();
/////////////////////////////////////////////////////////////////////////
1:     @SuppressWarnings("unused")
0: 	protected void createClients(int numOfClients) throws Exception {
1:         for (int i = 0; i < numOfClients; i++) {
/////////////////////////////////////////////////////////////////////////
1: }
commit:7388438
/////////////////////////////////////////////////////////////////////////
1:     protected void assertAllConnectedTo(String url) throws Exception {
1:         for (ActiveMQConnection c : connections) {
0:             assertEquals(c.getTransportChannel().getRemoteAddress(), url);
1:         }
1:     }    
1: 
/////////////////////////////////////////////////////////////////////////
1:     
1:     protected void stopBroker(String name) throws Exception {
1:         BrokerService broker = brokers.remove(name);
1:         broker.stop();
1:         broker.waitUntilStopped();
1:     }
/////////////////////////////////////////////////////////////////////////
1:         createClients(NUMBER_OF_CLIENTS);
1:     }
1:     
0:     protected void createClients(int num) throws Exception {
0:         for (int i = 0; i < num; i++) {
commit:91059de
/////////////////////////////////////////////////////////////////////////
1: /**
1:  * Licensed to the Apache Software Foundation (ASF) under one or more
1:  * contributor license agreements.  See the NOTICE file distributed with
1:  * this work for additional information regarding copyright ownership.
1:  * The ASF licenses this file to You under the Apache License, Version 2.0
1:  * (the "License"); you may not use this file except in compliance with
1:  * the License.  You may obtain a copy of the License at
1:  *
1:  *      http://www.apache.org/licenses/LICENSE-2.0
1:  *
1:  * Unless required by applicable law or agreed to in writing, software
1:  * distributed under the License is distributed on an "AS IS" BASIS,
1:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:  * See the License for the specific language governing permissions and
1:  * limitations under the License.
1:  */
1: package org.apache.activemq.transport.failover;
1: 
1: import junit.framework.TestCase;
1: import org.apache.activemq.ActiveMQConnection;
1: import org.apache.activemq.ActiveMQConnectionFactory;
1: import org.apache.activemq.broker.BrokerService;
1: import org.apache.activemq.broker.TransportConnector;
1: import org.apache.activemq.network.NetworkConnector;
1: import org.slf4j.Logger;
1: import org.slf4j.LoggerFactory;
1: 
0: import javax.jms.Connection;
0: import javax.jms.JMSException;
0: import javax.jms.MessageConsumer;
0: import javax.jms.Queue;
0: import javax.jms.Session;
0: import java.util.ArrayList;
0: import java.util.HashMap;
0: import java.util.HashSet;
0: import java.util.List;
0: import java.util.Map;
0: import java.util.Set;
1: 
1: public class FailoverClusterTestSupport extends TestCase {
1:     protected final Logger logger = LoggerFactory.getLogger(getClass());
1: 
1:     private static final int NUMBER_OF_CLIENTS = 30;
1: 
1:     private String clientUrl;
1: 
1:     private final Map<String, BrokerService> brokers = new HashMap<String, BrokerService>();
1:     private final List<ActiveMQConnection> connections = new ArrayList<ActiveMQConnection>();
1: 
0:     protected void assertClientsConnectedToTwoBrokers() {
0:         Set<String> set = new HashSet<String>();
0:         for (ActiveMQConnection c : connections) {
0:             set.add(c.getTransportChannel().getRemoteAddress());
1:         }
0:         assertTrue("Only 2 connections should be found: " + set,
0:                 set.size() == 2);
1:     }
1: 
0:     protected void assertClientsConnectedToThreeBrokers() {
0:         Set<String> set = new HashSet<String>();
0:         for (ActiveMQConnection c : connections) {
0:             set.add(c.getTransportChannel().getRemoteAddress());
1:         }
0:         assertTrue("Only 3 connections should be found: " + set,
0:                 set.size() == 3);
1:     }
1: 
1:     protected void addBroker(String name, BrokerService brokerService) {
1:         brokers.put(name, brokerService);
1:     }
1: 
1:     protected BrokerService getBroker(String name) {
1:         return brokers.get(name);
1:     }
1: 
1:     protected BrokerService removeBroker(String name) {
1:         return brokers.remove(name);
1:     }
1: 
1:     protected void destroyBrokerCluster() throws JMSException, Exception {
1:         for (BrokerService b : brokers.values()) {
0:             b.stop();
1:         }
1:         brokers.clear();
1:     }
1: 
1:     protected void shutdownClients() throws JMSException {
1:         for (Connection c : connections) {
1:             c.close();
1:         }
1:     }
1: 
1:     protected BrokerService createBroker(String brokerName) throws Exception {
1:         BrokerService answer = new BrokerService();
1:         answer.setPersistent(false);
1:         answer.setUseJmx(false);
1:         answer.setBrokerName(brokerName);
1:         answer.setUseShutdownHook(false);
1:         return answer;
1:     }
1: 
1:     protected void addTransportConnector(BrokerService brokerService,
0:                                          String connectorName, String uri, boolean clustered)
0:             throws Exception {
1:         TransportConnector connector = brokerService.addConnector(uri);
1:         connector.setName(connectorName);
1:         if (clustered) {
1:             connector.setRebalanceClusterClients(true);
1:             connector.setUpdateClusterClients(true);
1:             connector.setUpdateClusterClientsOnRemove(true);
1:         } else {
1:             connector.setRebalanceClusterClients(false);
1:             connector.setUpdateClusterClients(false);
1:             connector.setUpdateClusterClientsOnRemove(false);
1:         }
1:     }
1: 
1:     protected void addNetworkBridge(BrokerService answer, String bridgeName,
0:                                     String uri, boolean duplex, String destinationFilter)
0:             throws Exception {
1:         NetworkConnector network = answer.addNetworkConnector(uri);
1:         network.setName(bridgeName);
1:         network.setDuplex(duplex);
1:         if (destinationFilter != null && !destinationFilter.equals("")) {
1:             network.setDestinationFilter(bridgeName);
1:         }
1:     }
1: 
0:     @SuppressWarnings("unused")
1:     protected void createClients() throws Exception {
0:         ActiveMQConnectionFactory factory = new ActiveMQConnectionFactory(
0:                 clientUrl);
0:         for (int i = 0; i < NUMBER_OF_CLIENTS; i++) {
0:             ActiveMQConnection c = (ActiveMQConnection) factory
0:                     .createConnection();
1:             c.start();
1:             Session s = c.createSession(false, Session.AUTO_ACKNOWLEDGE);
1:             Queue queue = s.createQueue(getClass().getName());
1:             MessageConsumer consumer = s.createConsumer(queue);
1:             connections.add(c);
1:         }
1:     }
1: 
1:     public String getClientUrl() {
1:         return clientUrl;
1:     }
1: 
1:     public void setClientUrl(String clientUrl) {
1:         this.clientUrl = clientUrl;
1:     }
1: }
============================================================================