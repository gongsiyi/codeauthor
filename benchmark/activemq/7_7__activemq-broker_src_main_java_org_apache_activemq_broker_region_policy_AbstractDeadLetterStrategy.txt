1:a414c20: /**
1:a414c20:  * Licensed to the Apache Software Foundation (ASF) under one or more
1:a414c20:  * contributor license agreements.  See the NOTICE file distributed with
1:a414c20:  * this work for additional information regarding copyright ownership.
1:a414c20:  * The ASF licenses this file to You under the Apache License, Version 2.0
1:a414c20:  * (the "License"); you may not use this file except in compliance with
1:a414c20:  * the License.  You may obtain a copy of the License at
4:a414c20:  *
1:230a86c:  *      http://www.apache.org/licenses/LICENSE-2.0
1:0bbc0ac:  *
1:a414c20:  * Unless required by applicable law or agreed to in writing, software
1:a414c20:  * distributed under the License is distributed on an "AS IS" BASIS,
1:a414c20:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:a414c20:  * See the License for the specific language governing permissions and
1:a414c20:  * limitations under the License.
1:a414c20:  */
1:a414c20: package org.apache.activemq.broker.region.policy;
8:a414c20: 
1:66a945a: import org.apache.activemq.ActiveMQMessageAudit;
1:a414c20: import org.apache.activemq.command.Message;
1:8bf987b: import org.slf4j.Logger;
1:8bf987b: import org.slf4j.LoggerFactory;
1:a401575: 
1:a414c20: /**
1:230a86c:  * A strategy for choosing which destination is used for dead letter queue
1:230a86c:  * messages.
1:97502bd:  *
1:a414c20:  */
1:230a86c: public abstract class AbstractDeadLetterStrategy implements DeadLetterStrategy {
1:8bf987b:     private static final Logger LOG = LoggerFactory.getLogger(AbstractDeadLetterStrategy.class);
1:c5e1eae:     private boolean processNonPersistent = false;
1:230a86c:     private boolean processExpired = true;
1:7877fd5:     private boolean enableAudit = true;
1:97502bd:     private final ActiveMQMessageAudit messageAudit = new ActiveMQMessageAudit();
1:0142c4d:     private long expiration;
1:230a86c: 
1:97502bd:     @Override
1:97502bd:     public void rollback(Message message) {
1:97502bd:         if (message != null && this.enableAudit) {
1:97502bd:             messageAudit.rollback(message);
1:97502bd:         }
1:97502bd:     }
1:97502bd: 
1:97502bd:     @Override
1:230a86c:     public boolean isSendToDeadLetterQueue(Message message) {
1:230a86c:         boolean result = false;
1:230a86c:         if (message != null) {
1:230a86c:             result = true;
1:7877fd5:             if (enableAudit && messageAudit.isDuplicate(message)) {
1:230a86c:                 result = false;
1:e1bbde7:                 LOG.debug("Not adding duplicate to DLQ: {}, dest: {}", message.getMessageId(), message.getDestination());
1:66a945a:             }
1:74a7a8b:             if (!message.isPersistent() && !processNonPersistent) {
1:230a86c:                 result = false;
1:66a945a:             }
1:74a7a8b:             if (message.isExpired() && !processExpired) {
1:66a945a:                 result = false;
2:a414c20:             }
1:a414c20:         }
1:a414c20:         return result;
1:a414c20:     }
1:230a86c: 
1:a414c20:     /**
1:a414c20:      * @return the processExpired
1:a414c20:      */
1:97502bd:     @Override
1:230a86c:     public boolean isProcessExpired() {
1:a414c20:         return this.processExpired;
1:a414c20:     }
1:230a86c: 
1:a414c20:     /**
1:a414c20:      * @param processExpired the processExpired to set
1:a414c20:      */
1:97502bd:     @Override
1:230a86c:     public void setProcessExpired(boolean processExpired) {
1:230a86c:         this.processExpired = processExpired;
1:a414c20:     }
1:230a86c: 
1:a414c20:     /**
1:a414c20:      * @return the processNonPersistent
1:a414c20:      */
1:97502bd:     @Override
1:230a86c:     public boolean isProcessNonPersistent() {
1:a414c20:         return this.processNonPersistent;
1:a414c20:     }
1:230a86c: 
1:a414c20:     /**
1:a414c20:      * @param processNonPersistent the processNonPersistent to set
1:a414c20:      */
1:97502bd:     @Override
1:230a86c:     public void setProcessNonPersistent(boolean processNonPersistent) {
1:230a86c:         this.processNonPersistent = processNonPersistent;
1:a414c20:     }
1:a414c20: 
1:7877fd5:     public boolean isEnableAudit() {
1:7877fd5:         return enableAudit;
1:7877fd5:     }
1:7877fd5: 
1:7877fd5:     public void setEnableAudit(boolean enableAudit) {
1:7877fd5:         this.enableAudit = enableAudit;
1:7877fd5:     }
1:0142c4d: 
1:0142c4d:     public long getExpiration() {
1:0142c4d:         return expiration;
1:0142c4d:     }
1:0142c4d: 
1:0142c4d:     public void setExpiration(long expiration) {
1:0142c4d:         this.expiration = expiration;
1:0142c4d:     }
1:b6cb0ea: 
1:b6cb0ea:     public int getMaxProducersToAudit() {
1:b6cb0ea:         return messageAudit.getMaximumNumberOfProducersToTrack();
1:b6cb0ea:     }
1:b6cb0ea: 
1:b6cb0ea:     public void setMaxProducersToAudit(int maxProducersToAudit) {
1:b6cb0ea:         messageAudit.setMaximumNumberOfProducersToTrack(maxProducersToAudit);
1:b6cb0ea:     }
1:b6cb0ea: 
1:b6cb0ea:     public void setMaxAuditDepth(int maxAuditDepth) {
1:b6cb0ea:         messageAudit.setAuditDepth(maxAuditDepth);
1:b6cb0ea:     }
1:b6cb0ea: 
1:b6cb0ea:     public int getMaxAuditDepth() {
1:b6cb0ea:         return messageAudit.getAuditDepth();
1:b6cb0ea:     }
1:b6cb0ea: 
1:a414c20: }
============================================================================
author:gtully
-------------------------------------------------------------------------------
commit:b6cb0ea
/////////////////////////////////////////////////////////////////////////
1: 
1:     public int getMaxProducersToAudit() {
1:         return messageAudit.getMaximumNumberOfProducersToTrack();
1:     }
1: 
1:     public void setMaxProducersToAudit(int maxProducersToAudit) {
1:         messageAudit.setMaximumNumberOfProducersToTrack(maxProducersToAudit);
1:     }
1: 
1:     public void setMaxAuditDepth(int maxAuditDepth) {
1:         messageAudit.setAuditDepth(maxAuditDepth);
1:     }
1: 
1:     public int getMaxAuditDepth() {
1:         return messageAudit.getAuditDepth();
1:     }
1: 
commit:0142c4d
/////////////////////////////////////////////////////////////////////////
1:     private long expiration;
/////////////////////////////////////////////////////////////////////////
1: 
1:     public long getExpiration() {
1:         return expiration;
1:     }
1: 
1:     public void setExpiration(long expiration) {
1:         this.expiration = expiration;
1:     }
author:Timothy Bish
-------------------------------------------------------------------------------
commit:e1bbde7
/////////////////////////////////////////////////////////////////////////
1:                 LOG.debug("Not adding duplicate to DLQ: {}, dest: {}", message.getMessageId(), message.getDestination());
author:Timothy A. Bish
-------------------------------------------------------------------------------
commit:97502bd
/////////////////////////////////////////////////////////////////////////
1:  *
1:     private final ActiveMQMessageAudit messageAudit = new ActiveMQMessageAudit();
1:     @Override
1:     public void rollback(Message message) {
1:         if (message != null && this.enableAudit) {
1:             messageAudit.rollback(message);
1:         }
1:     }
1: 
1:     @Override
/////////////////////////////////////////////////////////////////////////
1:     @Override
/////////////////////////////////////////////////////////////////////////
1:     @Override
/////////////////////////////////////////////////////////////////////////
1:     @Override
/////////////////////////////////////////////////////////////////////////
1:     @Override
author:Hiram R. Chirino
-------------------------------------------------------------------------------
commit:58aca86
commit:9a8f6e4
/////////////////////////////////////////////////////////////////////////
commit:0bbc0ac
/////////////////////////////////////////////////////////////////////////
1:  * 
commit:74a7a8b
/////////////////////////////////////////////////////////////////////////
1:             if (!message.isPersistent() && !processNonPersistent) {
1:             if (message.isExpired() && !processExpired) {
commit:230a86c
/////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////
1:  *      http://www.apache.org/licenses/LICENSE-2.0
/////////////////////////////////////////////////////////////////////////
1:  * A strategy for choosing which destination is used for dead letter queue
1:  * messages.
1: public abstract class AbstractDeadLetterStrategy implements DeadLetterStrategy {
0:     private boolean processNonPersistent = true;
1:     private boolean processExpired = true;
1: 
1:     public boolean isSendToDeadLetterQueue(Message message) {
1:         boolean result = false;
1:         if (message != null) {
1:             result = true;
0:             if (message.isPersistent() == false && processNonPersistent == false) {
1:                 result = false;
0:             if (message.isExpired() && processExpired == false) {
1:                 result = false;
1: 
1:     public boolean isProcessExpired() {
1: 
1:     public void setProcessExpired(boolean processExpired) {
1:         this.processExpired = processExpired;
1: 
1:     public boolean isProcessNonPersistent() {
1: 
1:     public void setProcessNonPersistent(boolean processNonPersistent) {
1:         this.processNonPersistent = processNonPersistent;
author:Gary Tully
-------------------------------------------------------------------------------
commit:7877fd5
/////////////////////////////////////////////////////////////////////////
1:     private boolean enableAudit = true;
0:     private ActiveMQMessageAudit messageAudit = new ActiveMQMessageAudit();
1:             if (enableAudit && messageAudit.isDuplicate(message)) {
/////////////////////////////////////////////////////////////////////////
1:     public boolean isEnableAudit() {
1:         return enableAudit;
1:     }
1: 
1:     public void setEnableAudit(boolean enableAudit) {
1:         this.enableAudit = enableAudit;
1:     }
commit:27c1719
/////////////////////////////////////////////////////////////////////////
0: import org.apache.activemq.broker.region.MessageReference;
0: import org.apache.activemq.broker.region.Subscription;
0: import org.apache.activemq.command.ActiveMQDestination;
commit:66a945a
/////////////////////////////////////////////////////////////////////////
1: import org.apache.activemq.ActiveMQMessageAudit;
0: import org.apache.commons.logging.Log;
0: import org.apache.commons.logging.LogFactory;
/////////////////////////////////////////////////////////////////////////
0:     private static final Log LOG = LogFactory.getLog(AbstractDeadLetterStrategy.class);
0:     private ActiveMQMessageAudit audit = new ActiveMQMessageAudit();
0:             if (audit.isDuplicate(message)) {
1:                 result = false;
0:                 if (LOG.isDebugEnabled()) {
0:                     LOG.debug("Not adding duplicate to DLQ: " + message.getMessageId() + ", dest: " + message.getDestination());
1:                 }
1:             }
author:Bosanac Dejan
-------------------------------------------------------------------------------
commit:8bf987b
/////////////////////////////////////////////////////////////////////////
1: import org.slf4j.Logger;
1: import org.slf4j.LoggerFactory;
/////////////////////////////////////////////////////////////////////////
1:     private static final Logger LOG = LoggerFactory.getLogger(AbstractDeadLetterStrategy.class);
author:Robert Davies
-------------------------------------------------------------------------------
commit:c5e1eae
/////////////////////////////////////////////////////////////////////////
1:     private boolean processNonPersistent = false;
commit:a401575
/////////////////////////////////////////////////////////////////////////
1:     
commit:a414c20
/////////////////////////////////////////////////////////////////////////
1: /**
1:  *
1:  * Licensed to the Apache Software Foundation (ASF) under one or more
1:  * contributor license agreements.  See the NOTICE file distributed with
1:  * this work for additional information regarding copyright ownership.
1:  * The ASF licenses this file to You under the Apache License, Version 2.0
1:  * (the "License"); you may not use this file except in compliance with
1:  * the License.  You may obtain a copy of the License at
1:  *
0:  * http://www.apache.org/licenses/LICENSE-2.0
1:  *
1:  * Unless required by applicable law or agreed to in writing, software
1:  * distributed under the License is distributed on an "AS IS" BASIS,
1:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:  * See the License for the specific language governing permissions and
1:  * limitations under the License.
1:  */
1: package org.apache.activemq.broker.region.policy;
1: 
1: import org.apache.activemq.command.Message;
1: 
1: /**
0:  * A strategy for choosing which destination is used for dead letter queue messages.
1:  * 
0:  * @version $Revision: 426366 $
1:  */
0: public abstract  class AbstractDeadLetterStrategy implements DeadLetterStrategy {
0:     private boolean processNonPersistent=true;
0:     private boolean processExpired=true;
1:     
0:     public boolean isSendToDeadLetterQueue(Message message){
0:         boolean result=false;
0:         if(message!=null){
0:             result=true;
0:             if(message.isPersistent()==false&&processNonPersistent==false){
0:                 result=false;
1:             }
0:             if(message.isExpired()&&processExpired==false){
0:                 result=false;
1:             }
1:         }
1:         return result;
1:     }
1:     
1:     /**
1:      * @return the processExpired
1:      */
0:     public boolean isProcessExpired(){
1:         return this.processExpired;
1:     }
1:     
1:     /**
1:      * @param processExpired the processExpired to set
1:      */
0:     public void setProcessExpired(boolean processExpired){
0:         this.processExpired=processExpired;
1:     }
1:     
1:     /**
1:      * @return the processNonPersistent
1:      */
0:     public boolean isProcessNonPersistent(){
1:         return this.processNonPersistent;
1:     }
1:     
1:     /**
1:      * @param processNonPersistent the processNonPersistent to set
1:      */
0:     public void setProcessNonPersistent(boolean processNonPersistent){
0:         this.processNonPersistent=processNonPersistent;
1:     }
1: 
1:  
1: }
============================================================================