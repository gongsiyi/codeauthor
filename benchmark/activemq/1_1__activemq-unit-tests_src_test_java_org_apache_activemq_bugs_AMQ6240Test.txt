1:77d46dc: /**
1:77d46dc:  * Licensed to the Apache Software Foundation (ASF) under one or more
1:77d46dc:  * contributor license agreements.  See the NOTICE file distributed with
1:77d46dc:  * this work for additional information regarding copyright ownership.
1:77d46dc:  * The ASF licenses this file to You under the Apache License, Version 2.0
1:77d46dc:  * (the "License"); you may not use this file except in compliance with
1:77d46dc:  * the License.  You may obtain a copy of the License at
1:77d46dc:  *
1:77d46dc:  *      http://www.apache.org/licenses/LICENSE-2.0
1:77d46dc:  *
1:77d46dc:  * Unless required by applicable law or agreed to in writing, software
1:77d46dc:  * distributed under the License is distributed on an "AS IS" BASIS,
1:77d46dc:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:77d46dc:  * See the License for the specific language governing permissions and
1:77d46dc:  * limitations under the License.
1:77d46dc:  */
1:77d46dc: package org.apache.activemq.bugs;
5:77d46dc: 
1:77d46dc: import org.apache.activemq.ActiveMQConnection;
1:77d46dc: import org.apache.activemq.EmbeddedBrokerTestSupport;
1:530c1a8: import org.apache.activemq.broker.BrokerService;
1:77d46dc: import org.apache.activemq.broker.region.policy.PolicyEntry;
1:77d46dc: import org.apache.activemq.broker.region.policy.PolicyMap;
1:77d46dc: import org.apache.activemq.command.ActiveMQDestination;
1:77d46dc: import org.apache.activemq.command.ActiveMQQueue;
1:530c1a8: import org.apache.activemq.store.kahadb.KahaDBPersistenceAdapter;
1:77d46dc: import org.apache.activemq.transport.RequestTimedOutIOException;
1:77d46dc: import org.slf4j.Logger;
1:77d46dc: import org.slf4j.LoggerFactory;
1:77d46dc: 
1:530c1a8: import javax.jms.BytesMessage;
1:530c1a8: import javax.jms.JMSException;
1:530c1a8: import javax.jms.MessageProducer;
1:530c1a8: import javax.jms.Session;
1:77d46dc: import java.util.concurrent.atomic.AtomicInteger;
1:77d46dc: 
1:530c1a8: public class AMQ6240Test extends EmbeddedBrokerTestSupport {
1:77d46dc: 
1:77d46dc:     static final Logger LOG = LoggerFactory.getLogger(AMQ6240Test.class);
1:77d46dc: 
1:77d46dc:     public void testBlockedTxProducerConnectionTimeoutConnectionCanClose() throws Exception {
1:77d46dc:         final ActiveMQConnection cx = (ActiveMQConnection)createConnection();
1:77d46dc:         final ActiveMQDestination queue = createDestination("noPfc");
1:77d46dc: 
1:530c1a8:         cx.setSendTimeout(4000);
1:530c1a8:         cx.setCloseTimeout(1000);
1:77d46dc: 
1:530c1a8:         final AtomicInteger exceptionCount = new AtomicInteger(0);
1:77d46dc:         Runnable r = new Runnable() {
1:77d46dc:             public void run() {
1:530c1a8:                 int count=0;
1:77d46dc:                 try {
1:77d46dc:                     LOG.info("Sender thread starting");
1:77d46dc:                     Session session = cx.createSession(true, Session.SESSION_TRANSACTED);
1:77d46dc:                     MessageProducer producer = session.createProducer(queue);
1:77d46dc: 
1:530c1a8:                     BytesMessage message = session.createBytesMessage();
1:530c1a8:                     message.writeBytes(new byte[8*1024]);
1:530c1a8:                     for(; count<100; count++){
1:77d46dc:                         producer.send(message);
1:77d46dc:                     }
1:77d46dc:                     LOG.info("Done sending..");
1:77d46dc:                 } catch (JMSException e) {
1:77d46dc:                     if (e.getCause() instanceof RequestTimedOutIOException) {
1:77d46dc:                         exceptionCount.incrementAndGet();
1:530c1a8:                         LOG.info("Got expected send time out on message: " + count);
1:77d46dc:                     } else {
1:77d46dc:                         e.printStackTrace();
1:77d46dc:                     }
1:77d46dc:                     return;
1:77d46dc:                 }
1:77d46dc:             }
1:77d46dc:         };
1:77d46dc:         cx.start();
1:77d46dc:         Thread producerThread = new Thread(r);
1:77d46dc:         producerThread.start();
1:530c1a8:         producerThread.join(7000);
1:77d46dc:         cx.close();
1:530c1a8:         // We should have a few timeout exceptions as store will fill up
1:77d46dc:         assertTrue("No exception from the broker", exceptionCount.get() > 0);
1:77d46dc:     }
1:77d46dc: 
1:530c1a8:     @Override
1:530c1a8:     protected BrokerService createBroker() throws Exception {
1:530c1a8:         BrokerService answer = new BrokerService();
1:530c1a8:         answer.getManagementContext().setCreateConnector(false);
1:530c1a8:         answer.addConnector(bindAddress);
1:77d46dc: 
1:77d46dc:         PolicyMap policyMap = new PolicyMap();
1:77d46dc:         PolicyEntry noProducerFlowControl = new PolicyEntry();
1:77d46dc:         noProducerFlowControl.setProducerFlowControl(false);
1:77d46dc:         policyMap.put(new ActiveMQQueue("noPfc"), noProducerFlowControl);
1:530c1a8:         answer.setDestinationPolicy(policyMap);
1:530c1a8:         KahaDBPersistenceAdapter kahaDBPersistenceAdapter = new KahaDBPersistenceAdapter();
1:530c1a8:         kahaDBPersistenceAdapter.setJournalMaxFileLength(16*1024);
1:530c1a8:         answer.getSystemUsage().getStoreUsage().setLimit(34*1024);
1:530c1a8:         answer.setDeleteAllMessagesOnStartup(true);
1:77d46dc: 
1:530c1a8:         return answer;
1:77d46dc:     }
1:77d46dc: }
============================================================================
author:gtully
-------------------------------------------------------------------------------
commit:530c1a8
/////////////////////////////////////////////////////////////////////////
1: import org.apache.activemq.broker.BrokerService;
1: import org.apache.activemq.store.kahadb.KahaDBPersistenceAdapter;
1: import javax.jms.BytesMessage;
1: import javax.jms.JMSException;
1: import javax.jms.MessageProducer;
1: import javax.jms.Session;
1: public class AMQ6240Test extends EmbeddedBrokerTestSupport {
1:         cx.setSendTimeout(4000);
1:         cx.setCloseTimeout(1000);
1:         final AtomicInteger exceptionCount = new AtomicInteger(0);
1:                 int count=0;
1:                     BytesMessage message = session.createBytesMessage();
1:                     message.writeBytes(new byte[8*1024]);
1:                     for(; count<100; count++){
1:                         LOG.info("Got expected send time out on message: " + count);
1:         producerThread.join(7000);
1:         // We should have a few timeout exceptions as store will fill up
1:     @Override
1:     protected BrokerService createBroker() throws Exception {
1:         BrokerService answer = new BrokerService();
1:         answer.getManagementContext().setCreateConnector(false);
1:         answer.addConnector(bindAddress);
1:         answer.setDestinationPolicy(policyMap);
1:         KahaDBPersistenceAdapter kahaDBPersistenceAdapter = new KahaDBPersistenceAdapter();
1:         kahaDBPersistenceAdapter.setJournalMaxFileLength(16*1024);
1:         answer.getSystemUsage().getStoreUsage().setLimit(34*1024);
1:         answer.setDeleteAllMessagesOnStartup(true);
1:         return answer;
commit:77d46dc
/////////////////////////////////////////////////////////////////////////
1: /**
1:  * Licensed to the Apache Software Foundation (ASF) under one or more
1:  * contributor license agreements.  See the NOTICE file distributed with
1:  * this work for additional information regarding copyright ownership.
1:  * The ASF licenses this file to You under the Apache License, Version 2.0
1:  * (the "License"); you may not use this file except in compliance with
1:  * the License.  You may obtain a copy of the License at
1:  *
1:  *      http://www.apache.org/licenses/LICENSE-2.0
1:  *
1:  * Unless required by applicable law or agreed to in writing, software
1:  * distributed under the License is distributed on an "AS IS" BASIS,
1:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:  * See the License for the specific language governing permissions and
1:  * limitations under the License.
1:  */
1: package org.apache.activemq.bugs;
1: 
1: import org.apache.activemq.ActiveMQConnection;
0: import org.apache.activemq.ActiveMQConnectionFactory;
1: import org.apache.activemq.EmbeddedBrokerTestSupport;
1: import org.apache.activemq.broker.region.policy.PolicyEntry;
1: import org.apache.activemq.broker.region.policy.PolicyMap;
1: import org.apache.activemq.command.ActiveMQDestination;
1: import org.apache.activemq.command.ActiveMQQueue;
1: import org.apache.activemq.transport.RequestTimedOutIOException;
1: import org.slf4j.Logger;
1: import org.slf4j.LoggerFactory;
1: 
0: import javax.jms.*;
1: import java.util.concurrent.atomic.AtomicInteger;
1: 
0: public class AMQ6240Test extends JmsTimeoutTest {
1: 
1:     static final Logger LOG = LoggerFactory.getLogger(AMQ6240Test.class);
1: 
1: 
0:     public boolean isPersistent() { return true;}
1: 
1:     public void testBlockedTxProducerConnectionTimeoutConnectionCanClose() throws Exception {
1:         final ActiveMQConnection cx = (ActiveMQConnection)createConnection();
1:         final ActiveMQDestination queue = createDestination("noPfc");
1: 
0:         // we should not take longer than 10 seconds to return from send
0:         cx.setSendTimeout(10000);
1: 
1:         Runnable r = new Runnable() {
1:             public void run() {
1:                 try {
1:                     LOG.info("Sender thread starting");
1:                     Session session = cx.createSession(true, Session.SESSION_TRANSACTED);
1:                     MessageProducer producer = session.createProducer(queue);
0:                     producer.setDeliveryMode(DeliveryMode.PERSISTENT);
1: 
0:                     TextMessage message = session.createTextMessage(createMessageText());
0:                     for(int count=0; count<messageCount; count++){
1:                         producer.send(message);
1:                     }
1:                     LOG.info("Done sending..");
1:                 } catch (JMSException e) {
1:                     if (e.getCause() instanceof RequestTimedOutIOException) {
1:                         exceptionCount.incrementAndGet();
1:                     } else {
1:                         e.printStackTrace();
1:                     }
1:                     return;
1:                 }
1: 
1:             }
1:         };
1:         cx.start();
1:         Thread producerThread = new Thread(r);
1:         producerThread.start();
0:         producerThread.join(15000);
1:         cx.close();
0:         // We should have a few timeout exceptions as memory store will fill up
1:         assertTrue("No exception from the broker", exceptionCount.get() > 0);
1:     }
1: 
1: 
0:     protected void setUp() throws Exception {
0:         super.setUp();
1: 
1:         PolicyMap policyMap = new PolicyMap();
1:         PolicyEntry noProducerFlowControl = new PolicyEntry();
1:         noProducerFlowControl.setProducerFlowControl(false);
1:         policyMap.put(new ActiveMQQueue("noPfc"), noProducerFlowControl);
0:         broker.setDestinationPolicy(policyMap);
0:         broker.getSystemUsage().getStoreUsage().setLimit(50*1024*1024);
1: 
1:     }
1: }
============================================================================