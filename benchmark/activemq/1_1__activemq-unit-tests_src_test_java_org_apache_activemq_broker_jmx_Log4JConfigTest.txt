1:25f1fe8: /**
1:25f1fe8:  * Licensed to the Apache Software Foundation (ASF) under one or more
1:25f1fe8:  * contributor license agreements.  See the NOTICE file distributed with
1:25f1fe8:  * this work for additional information regarding copyright ownership.
1:25f1fe8:  * The ASF licenses this file to You under the Apache License, Version 2.0
1:25f1fe8:  * (the "License"); you may not use this file except in compliance with
1:25f1fe8:  * the License.  You may obtain a copy of the License at
1:25f1fe8:  *
1:25f1fe8:  *      http://www.apache.org/licenses/LICENSE-2.0
1:25f1fe8:  *
1:25f1fe8:  * Unless required by applicable law or agreed to in writing, software
1:25f1fe8:  * distributed under the License is distributed on an "AS IS" BASIS,
1:25f1fe8:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:25f1fe8:  * See the License for the specific language governing permissions and
1:25f1fe8:  * limitations under the License.
1:25f1fe8:  */
1:25f1fe8: package org.apache.activemq.broker.jmx;
1:25f1fe8: 
1:25f1fe8: import java.util.List;
1:25f1fe8: 
1:25f1fe8: import javax.jms.ConnectionFactory;
1:25f1fe8: import javax.management.MBeanServer;
1:25f1fe8: import javax.management.MBeanServerInvocationHandler;
1:25f1fe8: import javax.management.MalformedObjectNameException;
1:25f1fe8: import javax.management.ObjectName;
1:25f1fe8: 
1:25f1fe8: import org.apache.activemq.ActiveMQConnectionFactory;
1:25f1fe8: import org.apache.activemq.EmbeddedBrokerTestSupport;
1:25f1fe8: import org.apache.activemq.broker.BrokerService;
1:25f1fe8: import org.apache.log4j.Level;
1:25f1fe8: import org.apache.log4j.Logger;
1:25f1fe8: import org.junit.Test;
1:25f1fe8: import org.slf4j.LoggerFactory;
1:25f1fe8: 
1:25f1fe8: public class Log4JConfigTest extends EmbeddedBrokerTestSupport {
1:25f1fe8: 
1:25f1fe8:     private static final org.slf4j.Logger LOG = LoggerFactory.getLogger(Log4JConfigTest.class);
1:25f1fe8: 
1:25f1fe8:     private static final String BROKER_LOGGER = "org.apache.activemq.broker.BrokerService";
1:25f1fe8: 
1:25f1fe8:     protected MBeanServer mbeanServer;
1:25f1fe8:     protected String domain = "org.apache.activemq";
1:25f1fe8: 
1:25f1fe8:     @Override
1:25f1fe8:     protected void setUp() throws Exception {
1:25f1fe8:         bindAddress = "tcp://localhost:0";
1:25f1fe8:         useTopic = false;
1:25f1fe8:         super.setUp();
1:25f1fe8:         mbeanServer = broker.getManagementContext().getMBeanServer();
1:25f1fe8:     }
1:25f1fe8: 
1:25f1fe8:     @Override
1:25f1fe8:     protected void tearDown() throws Exception {
1:25f1fe8:         super.tearDown();
1:25f1fe8:     }
1:25f1fe8: 
1:25f1fe8:     @Override
1:25f1fe8:     protected ConnectionFactory createConnectionFactory() throws Exception {
1:25f1fe8:         return new ActiveMQConnectionFactory(broker.getTransportConnectors().get(0).getPublishableConnectString());
1:25f1fe8:     }
1:25f1fe8: 
1:25f1fe8:     @Override
1:25f1fe8:     protected BrokerService createBroker() throws Exception {
1:25f1fe8:         BrokerService answer = new BrokerService();
1:25f1fe8:         answer.setPersistent(true);
1:25f1fe8:         answer.setDeleteAllMessagesOnStartup(true);
1:25f1fe8:         answer.setUseJmx(true);
1:25f1fe8:         answer.setSchedulerSupport(true);
1:25f1fe8:         answer.addConnector(bindAddress);
1:25f1fe8:         return answer;
1:25f1fe8:     }
1:25f1fe8: 
1:25f1fe8:     @Test
1:25f1fe8:     public void testLog4JConfigViewExists() throws Exception {
1:25f1fe8:         String brokerObjectName = broker.getBrokerObjectName().toString();
1:25f1fe8:         String log4jConfigViewName = BrokerMBeanSupport.createLog4JConfigViewName(brokerObjectName).toString();
1:25f1fe8:         assertRegisteredObjectName(log4jConfigViewName);
1:25f1fe8:     }
1:25f1fe8: 
1:25f1fe8:     @Test
1:25f1fe8:     public void testLog4JConfigViewGetLoggers() throws Throwable {
1:25f1fe8:         String brokerObjectName = broker.getBrokerObjectName().toString();
1:25f1fe8:         ObjectName log4jConfigViewName = BrokerMBeanSupport.createLog4JConfigViewName(brokerObjectName);
1:25f1fe8:         Log4JConfigViewMBean log4jConfigView =  MBeanServerInvocationHandler.newProxyInstance(
1:25f1fe8:             mbeanServer, log4jConfigViewName, Log4JConfigViewMBean.class, true);
1:25f1fe8: 
1:25f1fe8:         List<String> loggers = log4jConfigView.getLoggers();
1:25f1fe8:         assertNotNull(loggers);
1:25f1fe8:         assertFalse(loggers.isEmpty());
1:25f1fe8:     }
1:25f1fe8: 
1:25f1fe8:     @Test
1:25f1fe8:     public void testLog4JConfigViewGetLevel() throws Throwable {
1:25f1fe8:         String brokerObjectName = broker.getBrokerObjectName().toString();
1:25f1fe8:         ObjectName log4jConfigViewName = BrokerMBeanSupport.createLog4JConfigViewName(brokerObjectName);
1:25f1fe8:         Log4JConfigViewMBean log4jConfigView =  MBeanServerInvocationHandler.newProxyInstance(
1:25f1fe8:             mbeanServer, log4jConfigViewName, Log4JConfigViewMBean.class, true);
1:25f1fe8: 
1:25f1fe8:         String level = log4jConfigView.getLogLevel(BROKER_LOGGER);
1:25f1fe8:         assertNotNull(level);
1:25f1fe8:         assertFalse(level.isEmpty());
1:25f1fe8:     }
1:25f1fe8: 
1:25f1fe8:     @Test
1:25f1fe8:     public void testLog4JConfigViewGetLevelUnknownLoggerName() throws Throwable {
1:25f1fe8:         String brokerObjectName = broker.getBrokerObjectName().toString();
1:25f1fe8:         ObjectName log4jConfigViewName = BrokerMBeanSupport.createLog4JConfigViewName(brokerObjectName);
1:25f1fe8:         Log4JConfigViewMBean log4jConfigView =  MBeanServerInvocationHandler.newProxyInstance(
1:25f1fe8:             mbeanServer, log4jConfigViewName, Log4JConfigViewMBean.class, true);
1:25f1fe8: 
1:25f1fe8:         // Non-existent loggers will return a name equal to the root level.
1:25f1fe8:         String level = log4jConfigView.getLogLevel("not.a.logger");
1:25f1fe8:         assertNotNull(level);
1:25f1fe8:         assertFalse(level.isEmpty());
1:25f1fe8:         assertEquals(Logger.getRootLogger().getLevel().toString(), level);
1:25f1fe8:     }
1:25f1fe8: 
1:25f1fe8:     @Test
1:25f1fe8:     public void testLog4JConfigViewSetLevel() throws Throwable {
1:25f1fe8:         String brokerObjectName = broker.getBrokerObjectName().toString();
1:25f1fe8:         ObjectName log4jConfigViewName = BrokerMBeanSupport.createLog4JConfigViewName(brokerObjectName);
1:25f1fe8:         Log4JConfigViewMBean log4jConfigView =  MBeanServerInvocationHandler.newProxyInstance(
1:25f1fe8:             mbeanServer, log4jConfigViewName, Log4JConfigViewMBean.class, true);
1:25f1fe8: 
1:25f1fe8:         String level = log4jConfigView.getLogLevel(BROKER_LOGGER);
1:25f1fe8:         assertNotNull(level);
1:25f1fe8:         assertFalse(level.isEmpty());
1:25f1fe8: 
1:25f1fe8:         log4jConfigView.setLogLevel(BROKER_LOGGER, "WARN");
1:25f1fe8:         level = log4jConfigView.getLogLevel(BROKER_LOGGER);
1:25f1fe8:         assertNotNull(level);
1:25f1fe8:         assertEquals("WARN", level);
1:25f1fe8: 
1:25f1fe8:         log4jConfigView.setLogLevel(BROKER_LOGGER, "INFO");
1:25f1fe8:         level = log4jConfigView.getLogLevel(BROKER_LOGGER);
1:25f1fe8:         assertNotNull(level);
1:25f1fe8:         assertEquals("INFO", level);
1:25f1fe8:     }
1:25f1fe8: 
1:25f1fe8:     @Test
1:25f1fe8:     public void testLog4JConfigViewSetLevelNoChangeIfLevelIsBad() throws Throwable {
1:25f1fe8:         String brokerObjectName = broker.getBrokerObjectName().toString();
1:25f1fe8:         ObjectName log4jConfigViewName = BrokerMBeanSupport.createLog4JConfigViewName(brokerObjectName);
1:25f1fe8:         Log4JConfigViewMBean log4jConfigView =  MBeanServerInvocationHandler.newProxyInstance(
1:25f1fe8:             mbeanServer, log4jConfigViewName, Log4JConfigViewMBean.class, true);
1:25f1fe8: 
1:25f1fe8:         log4jConfigView.setLogLevel(BROKER_LOGGER, "INFO");
1:25f1fe8:         String level = log4jConfigView.getLogLevel(BROKER_LOGGER);
1:25f1fe8:         assertNotNull(level);
1:25f1fe8:         assertEquals("INFO", level);
1:25f1fe8: 
1:25f1fe8:         log4jConfigView.setLogLevel(BROKER_LOGGER, "BAD");
1:25f1fe8:         level = log4jConfigView.getLogLevel(BROKER_LOGGER);
1:25f1fe8:         assertNotNull(level);
1:25f1fe8:         assertEquals("INFO", level);
1:25f1fe8:     }
1:25f1fe8: 
1:25f1fe8:     @Test
1:25f1fe8:     public void testLog4JConfigViewGetRootLogLevel() throws Throwable {
1:25f1fe8:         String brokerObjectName = broker.getBrokerObjectName().toString();
1:25f1fe8:         ObjectName log4jConfigViewName = BrokerMBeanSupport.createLog4JConfigViewName(brokerObjectName);
1:25f1fe8:         Log4JConfigViewMBean log4jConfigView =  MBeanServerInvocationHandler.newProxyInstance(
1:25f1fe8:             mbeanServer, log4jConfigViewName, Log4JConfigViewMBean.class, true);
1:25f1fe8: 
1:25f1fe8:         String level = log4jConfigView.getRootLogLevel();
1:25f1fe8:         assertNotNull(level);
1:25f1fe8:         assertFalse(level.isEmpty());
1:25f1fe8: 
1:25f1fe8:         String currentRootLevel = Logger.getRootLogger().getLevel().toString();
1:25f1fe8:         assertEquals(currentRootLevel, level);
1:25f1fe8:     }
1:25f1fe8: 
1:25f1fe8:     @Test
1:25f1fe8:     public void testLog4JConfigViewSetRootLevel() throws Throwable {
1:25f1fe8:         String brokerObjectName = broker.getBrokerObjectName().toString();
1:25f1fe8:         ObjectName log4jConfigViewName = BrokerMBeanSupport.createLog4JConfigViewName(brokerObjectName);
1:25f1fe8:         Log4JConfigViewMBean log4jConfigView =  MBeanServerInvocationHandler.newProxyInstance(
1:25f1fe8:             mbeanServer, log4jConfigViewName, Log4JConfigViewMBean.class, true);
1:25f1fe8: 
1:25f1fe8:         String currentRootLevel = Logger.getRootLogger().getLevel().toString();
1:25f1fe8:         log4jConfigView.setRootLogLevel("WARN");
1:25f1fe8:         currentRootLevel = Logger.getRootLogger().getLevel().toString();
1:25f1fe8:         assertEquals("WARN", currentRootLevel);
1:25f1fe8:         log4jConfigView.setRootLogLevel("INFO");
1:25f1fe8:         currentRootLevel = Logger.getRootLogger().getLevel().toString();
1:25f1fe8:         assertEquals("INFO", currentRootLevel);
1:25f1fe8: 
1:25f1fe8:         Level level;
1:25f1fe8:     }
1:25f1fe8: 
1:25f1fe8:     protected ObjectName assertRegisteredObjectName(String name) throws MalformedObjectNameException, NullPointerException {
1:25f1fe8:         ObjectName objectName = new ObjectName(name);
1:25f1fe8:         if (mbeanServer.isRegistered(objectName)) {
1:25f1fe8:             LOG.info("Bean Registered: " + objectName);
1:25f1fe8:         } else {
1:25f1fe8:             fail("Could not find MBean!: " + objectName);
1:25f1fe8:         }
1:25f1fe8:         return objectName;
1:25f1fe8:     }
1:25f1fe8: }
============================================================================
author:Timothy Bish
-------------------------------------------------------------------------------
commit:25f1fe8
/////////////////////////////////////////////////////////////////////////
1: /**
1:  * Licensed to the Apache Software Foundation (ASF) under one or more
1:  * contributor license agreements.  See the NOTICE file distributed with
1:  * this work for additional information regarding copyright ownership.
1:  * The ASF licenses this file to You under the Apache License, Version 2.0
1:  * (the "License"); you may not use this file except in compliance with
1:  * the License.  You may obtain a copy of the License at
1:  *
1:  *      http://www.apache.org/licenses/LICENSE-2.0
1:  *
1:  * Unless required by applicable law or agreed to in writing, software
1:  * distributed under the License is distributed on an "AS IS" BASIS,
1:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:  * See the License for the specific language governing permissions and
1:  * limitations under the License.
1:  */
1: package org.apache.activemq.broker.jmx;
1: 
1: import java.util.List;
1: 
1: import javax.jms.ConnectionFactory;
1: import javax.management.MBeanServer;
1: import javax.management.MBeanServerInvocationHandler;
1: import javax.management.MalformedObjectNameException;
1: import javax.management.ObjectName;
1: 
1: import org.apache.activemq.ActiveMQConnectionFactory;
1: import org.apache.activemq.EmbeddedBrokerTestSupport;
1: import org.apache.activemq.broker.BrokerService;
1: import org.apache.log4j.Level;
1: import org.apache.log4j.Logger;
1: import org.junit.Test;
1: import org.slf4j.LoggerFactory;
1: 
1: public class Log4JConfigTest extends EmbeddedBrokerTestSupport {
1: 
1:     private static final org.slf4j.Logger LOG = LoggerFactory.getLogger(Log4JConfigTest.class);
1: 
1:     private static final String BROKER_LOGGER = "org.apache.activemq.broker.BrokerService";
1: 
1:     protected MBeanServer mbeanServer;
1:     protected String domain = "org.apache.activemq";
1: 
1:     @Override
1:     protected void setUp() throws Exception {
1:         bindAddress = "tcp://localhost:0";
1:         useTopic = false;
1:         super.setUp();
1:         mbeanServer = broker.getManagementContext().getMBeanServer();
1:     }
1: 
1:     @Override
1:     protected void tearDown() throws Exception {
1:         super.tearDown();
1:     }
1: 
1:     @Override
1:     protected ConnectionFactory createConnectionFactory() throws Exception {
1:         return new ActiveMQConnectionFactory(broker.getTransportConnectors().get(0).getPublishableConnectString());
1:     }
1: 
1:     @Override
1:     protected BrokerService createBroker() throws Exception {
1:         BrokerService answer = new BrokerService();
1:         answer.setPersistent(true);
1:         answer.setDeleteAllMessagesOnStartup(true);
1:         answer.setUseJmx(true);
1:         answer.setSchedulerSupport(true);
1:         answer.addConnector(bindAddress);
1:         return answer;
1:     }
1: 
1:     @Test
1:     public void testLog4JConfigViewExists() throws Exception {
1:         String brokerObjectName = broker.getBrokerObjectName().toString();
1:         String log4jConfigViewName = BrokerMBeanSupport.createLog4JConfigViewName(brokerObjectName).toString();
1:         assertRegisteredObjectName(log4jConfigViewName);
1:     }
1: 
1:     @Test
1:     public void testLog4JConfigViewGetLoggers() throws Throwable {
1:         String brokerObjectName = broker.getBrokerObjectName().toString();
1:         ObjectName log4jConfigViewName = BrokerMBeanSupport.createLog4JConfigViewName(brokerObjectName);
1:         Log4JConfigViewMBean log4jConfigView =  MBeanServerInvocationHandler.newProxyInstance(
1:             mbeanServer, log4jConfigViewName, Log4JConfigViewMBean.class, true);
1: 
1:         List<String> loggers = log4jConfigView.getLoggers();
1:         assertNotNull(loggers);
1:         assertFalse(loggers.isEmpty());
1:     }
1: 
1:     @Test
1:     public void testLog4JConfigViewGetLevel() throws Throwable {
1:         String brokerObjectName = broker.getBrokerObjectName().toString();
1:         ObjectName log4jConfigViewName = BrokerMBeanSupport.createLog4JConfigViewName(brokerObjectName);
1:         Log4JConfigViewMBean log4jConfigView =  MBeanServerInvocationHandler.newProxyInstance(
1:             mbeanServer, log4jConfigViewName, Log4JConfigViewMBean.class, true);
1: 
1:         String level = log4jConfigView.getLogLevel(BROKER_LOGGER);
1:         assertNotNull(level);
1:         assertFalse(level.isEmpty());
1:     }
1: 
1:     @Test
1:     public void testLog4JConfigViewGetLevelUnknownLoggerName() throws Throwable {
1:         String brokerObjectName = broker.getBrokerObjectName().toString();
1:         ObjectName log4jConfigViewName = BrokerMBeanSupport.createLog4JConfigViewName(brokerObjectName);
1:         Log4JConfigViewMBean log4jConfigView =  MBeanServerInvocationHandler.newProxyInstance(
1:             mbeanServer, log4jConfigViewName, Log4JConfigViewMBean.class, true);
1: 
1:         // Non-existent loggers will return a name equal to the root level.
1:         String level = log4jConfigView.getLogLevel("not.a.logger");
1:         assertNotNull(level);
1:         assertFalse(level.isEmpty());
1:         assertEquals(Logger.getRootLogger().getLevel().toString(), level);
1:     }
1: 
1:     @Test
1:     public void testLog4JConfigViewSetLevel() throws Throwable {
1:         String brokerObjectName = broker.getBrokerObjectName().toString();
1:         ObjectName log4jConfigViewName = BrokerMBeanSupport.createLog4JConfigViewName(brokerObjectName);
1:         Log4JConfigViewMBean log4jConfigView =  MBeanServerInvocationHandler.newProxyInstance(
1:             mbeanServer, log4jConfigViewName, Log4JConfigViewMBean.class, true);
1: 
1:         String level = log4jConfigView.getLogLevel(BROKER_LOGGER);
1:         assertNotNull(level);
1:         assertFalse(level.isEmpty());
1: 
1:         log4jConfigView.setLogLevel(BROKER_LOGGER, "WARN");
1:         level = log4jConfigView.getLogLevel(BROKER_LOGGER);
1:         assertNotNull(level);
1:         assertEquals("WARN", level);
1: 
1:         log4jConfigView.setLogLevel(BROKER_LOGGER, "INFO");
1:         level = log4jConfigView.getLogLevel(BROKER_LOGGER);
1:         assertNotNull(level);
1:         assertEquals("INFO", level);
1:     }
1: 
1:     @Test
1:     public void testLog4JConfigViewSetLevelNoChangeIfLevelIsBad() throws Throwable {
1:         String brokerObjectName = broker.getBrokerObjectName().toString();
1:         ObjectName log4jConfigViewName = BrokerMBeanSupport.createLog4JConfigViewName(brokerObjectName);
1:         Log4JConfigViewMBean log4jConfigView =  MBeanServerInvocationHandler.newProxyInstance(
1:             mbeanServer, log4jConfigViewName, Log4JConfigViewMBean.class, true);
1: 
1:         log4jConfigView.setLogLevel(BROKER_LOGGER, "INFO");
1:         String level = log4jConfigView.getLogLevel(BROKER_LOGGER);
1:         assertNotNull(level);
1:         assertEquals("INFO", level);
1: 
1:         log4jConfigView.setLogLevel(BROKER_LOGGER, "BAD");
1:         level = log4jConfigView.getLogLevel(BROKER_LOGGER);
1:         assertNotNull(level);
1:         assertEquals("INFO", level);
1:     }
1: 
1:     @Test
1:     public void testLog4JConfigViewGetRootLogLevel() throws Throwable {
1:         String brokerObjectName = broker.getBrokerObjectName().toString();
1:         ObjectName log4jConfigViewName = BrokerMBeanSupport.createLog4JConfigViewName(brokerObjectName);
1:         Log4JConfigViewMBean log4jConfigView =  MBeanServerInvocationHandler.newProxyInstance(
1:             mbeanServer, log4jConfigViewName, Log4JConfigViewMBean.class, true);
1: 
1:         String level = log4jConfigView.getRootLogLevel();
1:         assertNotNull(level);
1:         assertFalse(level.isEmpty());
1: 
1:         String currentRootLevel = Logger.getRootLogger().getLevel().toString();
1:         assertEquals(currentRootLevel, level);
1:     }
1: 
1:     @Test
1:     public void testLog4JConfigViewSetRootLevel() throws Throwable {
1:         String brokerObjectName = broker.getBrokerObjectName().toString();
1:         ObjectName log4jConfigViewName = BrokerMBeanSupport.createLog4JConfigViewName(brokerObjectName);
1:         Log4JConfigViewMBean log4jConfigView =  MBeanServerInvocationHandler.newProxyInstance(
1:             mbeanServer, log4jConfigViewName, Log4JConfigViewMBean.class, true);
1: 
1:         String currentRootLevel = Logger.getRootLogger().getLevel().toString();
1:         log4jConfigView.setRootLogLevel("WARN");
1:         currentRootLevel = Logger.getRootLogger().getLevel().toString();
1:         assertEquals("WARN", currentRootLevel);
1:         log4jConfigView.setRootLogLevel("INFO");
1:         currentRootLevel = Logger.getRootLogger().getLevel().toString();
1:         assertEquals("INFO", currentRootLevel);
1: 
1:         Level level;
1:     }
1: 
1:     protected ObjectName assertRegisteredObjectName(String name) throws MalformedObjectNameException, NullPointerException {
1:         ObjectName objectName = new ObjectName(name);
1:         if (mbeanServer.isRegistered(objectName)) {
1:             LOG.info("Bean Registered: " + objectName);
1:         } else {
1:             fail("Could not find MBean!: " + objectName);
1:         }
1:         return objectName;
1:     }
1: }
============================================================================