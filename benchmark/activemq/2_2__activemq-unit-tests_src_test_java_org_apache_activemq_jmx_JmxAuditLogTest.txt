1:a65ac58: /**
1:a65ac58:  * Licensed to the Apache Software Foundation (ASF) under one or more
1:a65ac58:  * contributor license agreements. See the NOTICE file distributed with
1:a65ac58:  * this work for additional information regarding copyright ownership.
1:a65ac58:  * The ASF licenses this file to You under the Apache License, Version 2.0
1:a65ac58:  * (the "License"); you may not use this file except in compliance with
1:a65ac58:  * the License. You may obtain a copy of the License at
1:a65ac58:  *
1:a65ac58:  *     http://www.apache.org/licenses/LICENSE-2.0
1:a65ac58:  *
1:a65ac58:  * Unless required by applicable law or agreed to in writing, software
1:a65ac58:  * distributed under the License is distributed on an "AS IS" BASIS,
1:a65ac58:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:a65ac58:  * See the License for the specific language governing permissions and
1:a65ac58:  * limitations under the License.
1:a65ac58:  */
1:a65ac58: 
1:a65ac58: package org.apache.activemq.jmx;
1:a65ac58: 
1:a65ac58: import javax.management.MBeanServerConnection;
1:a65ac58: import javax.management.ObjectName;
1:a65ac58: import javax.management.remote.JMXConnector;
1:a65ac58: import javax.management.remote.JMXConnectorFactory;
1:a65ac58: import javax.management.remote.JMXServiceURL;
1:a65ac58: import java.util.HashMap;
1:a65ac58: import java.util.Map;
1:a65ac58: import java.util.concurrent.TimeUnit;
1:d7f7083: import java.util.concurrent.atomic.AtomicBoolean;
1:d7f7083: import java.util.concurrent.atomic.AtomicInteger;
1:a65ac58: 
1:a65ac58: import org.apache.activemq.TestSupport;
1:a65ac58: import org.apache.activemq.broker.BrokerService;
1:a65ac58: import org.apache.activemq.broker.jmx.ManagementContext;
1:a65ac58: import org.apache.activemq.command.ActiveMQDestination;
1:a65ac58: import org.apache.activemq.command.ActiveMQQueue;
1:a65ac58: import org.apache.activemq.util.DefaultTestAppender;
1:a65ac58: import org.apache.log4j.Appender;
1:a65ac58: import org.apache.log4j.Level;
1:a65ac58: import org.apache.log4j.Logger;
1:a65ac58: import org.apache.log4j.spi.LoggingEvent;
1:a65ac58: import org.junit.Test;
1:a65ac58: 
1:d7f7083: import static org.apache.activemq.broker.util.JMXAuditLogEntry.VERBS;
1:3a0a723: import static org.apache.activemq.util.TestUtils.findOpenPort;
1:3a0a723: 
1:a65ac58: public class JmxAuditLogTest extends TestSupport
1:a65ac58: {
1:a65ac58:    protected BrokerService broker;
1:a65ac58: 
1:a65ac58:    protected ActiveMQQueue queue;
1:a65ac58: 
1:3a0a723:    int portToUse;
1:3a0a723: 
1:a65ac58:    @Override
1:a65ac58:    protected void setUp() throws Exception
1:a65ac58:    {
1:a65ac58:       super.setUp();
1:a65ac58:       setMaxTestTime(TimeUnit.MINUTES.toMillis(10));
1:a65ac58:       setAutoFail(true);
1:a65ac58: 
1:d7f7083:       System.setProperty("org.apache.activemq.audit", "all");
1:a65ac58: 
1:a65ac58:       broker = new BrokerService();
1:a65ac58:       broker.setUseJmx(true);
1:3a0a723:       portToUse = findOpenPort();
1:3a0a723:       broker.setManagementContext(createManagementContext("broker", portToUse));
1:a65ac58:       broker.setPopulateUserNameInMBeans(true);
1:a65ac58:       broker.setDestinations(createDestinations());
1:a65ac58:       broker.start();
1:a65ac58:    }
1:a65ac58: 
1:a65ac58:    @Override
1:a65ac58:    protected void tearDown() throws Exception
1:a65ac58:    {
1:a65ac58:       System.clearProperty("org.apache.activemq.audit");
1:a65ac58:       broker.stop();
1:a65ac58:       super.tearDown();
1:a65ac58:    }
1:a65ac58: 
1:a65ac58:    protected ActiveMQDestination[] createDestinations()
1:a65ac58:    {
1:a65ac58:       queue = new ActiveMQQueue("myTestQueue");
1:a65ac58:       return new ActiveMQDestination[] {queue};
1:a65ac58:    }
1:a65ac58: 
1:a65ac58:    private MBeanServerConnection createJMXConnector(int port) throws Exception
1:a65ac58:    {
1:a65ac58:       String url = "service:jmx:rmi:///jndi/rmi://localhost:" + port + "/jmxrmi";
1:a65ac58: 
1:a65ac58:       Map env = new HashMap<String, String>();
1:a65ac58:       String[] creds = {"admin", "activemq"};
1:a65ac58:       env.put(JMXConnector.CREDENTIALS, creds);
1:a65ac58: 
1:a65ac58:       JMXConnector connector = JMXConnectorFactory.connect(new JMXServiceURL(url), env);
1:a65ac58:       connector.connect();
1:a65ac58:       return connector.getMBeanServerConnection();
1:a65ac58:    }
1:a65ac58: 
1:a65ac58:    private ManagementContext createManagementContext(String name, int port)
1:a65ac58:    {
1:a65ac58:       ManagementContext managementContext = new ManagementContext();
1:a65ac58:       managementContext.setBrokerName(name);
1:a65ac58:       managementContext.setConnectorPort(port);
1:a65ac58:       managementContext.setConnectorHost("localhost");
1:a65ac58:       managementContext.setCreateConnector(true);
1:a65ac58: 
1:a65ac58:       Map<String, String> env = new HashMap<String, String>();
1:a65ac58:       env.put("jmx.remote.x.password.file", basedir + "/src/test/resources/jmx.password");
1:a65ac58:       env.put("jmx.remote.x.access.file", basedir + "/src/test/resources/jmx.access");
1:a65ac58:       managementContext.setEnvironment(env);
1:a65ac58:       return managementContext;
1:a65ac58:    }
1:a65ac58: 
1:a65ac58:    @Test
1:a65ac58:    public void testPasswordsAreNotLoggedWhenAuditIsTurnedOn() throws Exception
1:a65ac58:    {
1:a65ac58:       Logger log4jLogger = Logger.getLogger("org.apache.activemq.audit");
1:a65ac58:       log4jLogger.setLevel(Level.INFO);
1:d7f7083:       final AtomicInteger logCount = new AtomicInteger(0);
1:d7f7083:       final AtomicBoolean gotEnded = new AtomicBoolean(false);
1:a65ac58: 
1:a65ac58:       Appender appender = new DefaultTestAppender()
1:a65ac58:       {
1:a65ac58:          @Override
1:a65ac58:          public void doAppend(LoggingEvent event)
1:a65ac58:          {
1:a65ac58:             if (event.getMessage() instanceof String)
1:a65ac58:             {
1:a65ac58:                String message = (String) event.getMessage();
1:d7f7083:                System.out.println(message);
1:a65ac58:                if (message.contains("testPassword"))
1:a65ac58:                {
1:a65ac58:                   fail("Password should not appear in log file");
1:a65ac58:                }
1:d7f7083:                if (message.contains(VERBS[1])) {
1:d7f7083:                   gotEnded.set(true);
1:d7f7083:                }
1:a65ac58:             }
1:d7f7083:             logCount.incrementAndGet();
1:a65ac58:          }
1:a65ac58:       };
1:a65ac58:       log4jLogger.addAppender(appender);
1:a65ac58: 
1:3a0a723:       MBeanServerConnection conn = createJMXConnector(portToUse);
1:a65ac58:       ObjectName queueObjName = new ObjectName(broker.getBrokerObjectName() + ",destinationType=Queue,destinationName=" + queue.getQueueName());
1:a65ac58: 
1:a65ac58:       Object[] params = {"body", "testUser", "testPassword"};
1:a65ac58:       String[] signature = {"java.lang.String", "java.lang.String", "java.lang.String"};
1:a65ac58: 
1:a65ac58:       conn.invoke(queueObjName, "sendTextMessage", params, signature);
1:a65ac58:       log4jLogger.removeAppender(appender);
1:d7f7083: 
1:d7f7083:       assertTrue("got ended statement", gotEnded.get());
1:d7f7083:       assertEquals("got two messages", 2, logCount.get());
1:d7f7083: 
1:a65ac58:    }
1:a65ac58: }
============================================================================
author:gtully
-------------------------------------------------------------------------------
commit:d7f7083
/////////////////////////////////////////////////////////////////////////
1: import java.util.concurrent.atomic.AtomicBoolean;
1: import java.util.concurrent.atomic.AtomicInteger;
/////////////////////////////////////////////////////////////////////////
1: import static org.apache.activemq.broker.util.JMXAuditLogEntry.VERBS;
/////////////////////////////////////////////////////////////////////////
1:       System.setProperty("org.apache.activemq.audit", "all");
/////////////////////////////////////////////////////////////////////////
1:       final AtomicInteger logCount = new AtomicInteger(0);
1:       final AtomicBoolean gotEnded = new AtomicBoolean(false);
/////////////////////////////////////////////////////////////////////////
1:                System.out.println(message);
1:                if (message.contains(VERBS[1])) {
1:                   gotEnded.set(true);
1:                }
1:             logCount.incrementAndGet();
/////////////////////////////////////////////////////////////////////////
1: 
1:       assertTrue("got ended statement", gotEnded.get());
1:       assertEquals("got two messages", 2, logCount.get());
1: 
commit:3a0a723
/////////////////////////////////////////////////////////////////////////
1: import static org.apache.activemq.util.TestUtils.findOpenPort;
1: 
1:    int portToUse;
1: 
/////////////////////////////////////////////////////////////////////////
1:       portToUse = findOpenPort();
1:       broker.setManagementContext(createManagementContext("broker", portToUse));
/////////////////////////////////////////////////////////////////////////
1:       MBeanServerConnection conn = createJMXConnector(portToUse);
author:Martyn Taylor
-------------------------------------------------------------------------------
commit:a65ac58
/////////////////////////////////////////////////////////////////////////
1: /**
1:  * Licensed to the Apache Software Foundation (ASF) under one or more
1:  * contributor license agreements. See the NOTICE file distributed with
1:  * this work for additional information regarding copyright ownership.
1:  * The ASF licenses this file to You under the Apache License, Version 2.0
1:  * (the "License"); you may not use this file except in compliance with
1:  * the License. You may obtain a copy of the License at
1:  *
1:  *     http://www.apache.org/licenses/LICENSE-2.0
1:  *
1:  * Unless required by applicable law or agreed to in writing, software
1:  * distributed under the License is distributed on an "AS IS" BASIS,
1:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:  * See the License for the specific language governing permissions and
1:  * limitations under the License.
1:  */
1: 
1: package org.apache.activemq.jmx;
1: 
1: import javax.management.MBeanServerConnection;
1: import javax.management.ObjectName;
1: import javax.management.remote.JMXConnector;
1: import javax.management.remote.JMXConnectorFactory;
1: import javax.management.remote.JMXServiceURL;
1: import java.util.HashMap;
1: import java.util.Map;
1: import java.util.concurrent.TimeUnit;
1: 
1: import org.apache.activemq.TestSupport;
1: import org.apache.activemq.broker.BrokerService;
1: import org.apache.activemq.broker.jmx.ManagementContext;
1: import org.apache.activemq.command.ActiveMQDestination;
1: import org.apache.activemq.command.ActiveMQQueue;
1: import org.apache.activemq.util.DefaultTestAppender;
1: import org.apache.log4j.Appender;
1: import org.apache.log4j.Level;
1: import org.apache.log4j.Logger;
1: import org.apache.log4j.spi.LoggingEvent;
1: import org.junit.Test;
1: 
1: public class JmxAuditLogTest extends TestSupport
1: {
1:    protected BrokerService broker;
1: 
1:    protected ActiveMQQueue queue;
1: 
1:    @Override
1:    protected void setUp() throws Exception
1:    {
1:       super.setUp();
1:       setMaxTestTime(TimeUnit.MINUTES.toMillis(10));
1:       setAutoFail(true);
1: 
0:       System.setProperty("org.apache.activemq.audit", "true");
1: 
1:       broker = new BrokerService();
1:       broker.setUseJmx(true);
0:       broker.setManagementContext(createManagementContext("broker", 1099));
1:       broker.setPopulateUserNameInMBeans(true);
1:       broker.setDestinations(createDestinations());
1:       broker.start();
1:    }
1: 
1:    @Override
1:    protected void tearDown() throws Exception
1:    {
1:       System.clearProperty("org.apache.activemq.audit");
1:       broker.stop();
1:       super.tearDown();
1:    }
1: 
1:    protected ActiveMQDestination[] createDestinations()
1:    {
1:       queue = new ActiveMQQueue("myTestQueue");
1:       return new ActiveMQDestination[] {queue};
1:    }
1: 
1:    private MBeanServerConnection createJMXConnector(int port) throws Exception
1:    {
1:       String url = "service:jmx:rmi:///jndi/rmi://localhost:" + port + "/jmxrmi";
1: 
1:       Map env = new HashMap<String, String>();
1:       String[] creds = {"admin", "activemq"};
1:       env.put(JMXConnector.CREDENTIALS, creds);
1: 
1:       JMXConnector connector = JMXConnectorFactory.connect(new JMXServiceURL(url), env);
1:       connector.connect();
1:       return connector.getMBeanServerConnection();
1:    }
1: 
1:    private ManagementContext createManagementContext(String name, int port)
1:    {
1:       ManagementContext managementContext = new ManagementContext();
1:       managementContext.setBrokerName(name);
1:       managementContext.setConnectorPort(port);
1:       managementContext.setConnectorHost("localhost");
1:       managementContext.setCreateConnector(true);
1: 
1:       Map<String, String> env = new HashMap<String, String>();
1:       env.put("jmx.remote.x.password.file", basedir + "/src/test/resources/jmx.password");
1:       env.put("jmx.remote.x.access.file", basedir + "/src/test/resources/jmx.access");
1:       managementContext.setEnvironment(env);
1:       return managementContext;
1:    }
1: 
1:    @Test
1:    public void testPasswordsAreNotLoggedWhenAuditIsTurnedOn() throws Exception
1:    {
1:       Logger log4jLogger = Logger.getLogger("org.apache.activemq.audit");
1:       log4jLogger.setLevel(Level.INFO);
1: 
1:       Appender appender = new DefaultTestAppender()
1:       {
1:          @Override
1:          public void doAppend(LoggingEvent event)
1:          {
1:             if (event.getMessage() instanceof String)
1:             {
1:                String message = (String) event.getMessage();
1:                if (message.contains("testPassword"))
1:                {
1:                   fail("Password should not appear in log file");
1:                }
1:             }
1:          }
1:       };
1:       log4jLogger.addAppender(appender);
1: 
0:       MBeanServerConnection conn = createJMXConnector(1099);
1:       ObjectName queueObjName = new ObjectName(broker.getBrokerObjectName() + ",destinationType=Queue,destinationName=" + queue.getQueueName());
1: 
1:       Object[] params = {"body", "testUser", "testPassword"};
1:       String[] signature = {"java.lang.String", "java.lang.String", "java.lang.String"};
1: 
1:       conn.invoke(queueObjName, "sendTextMessage", params, signature);
1:       log4jLogger.removeAppender(appender);
1:    }
1: }
============================================================================