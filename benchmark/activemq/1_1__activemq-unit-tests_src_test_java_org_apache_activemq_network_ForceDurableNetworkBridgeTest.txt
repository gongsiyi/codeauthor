1:e73ab34: /**
1:e73ab34:  * Licensed to the Apache Software Foundation (ASF) under one or more
1:e73ab34:  * contributor license agreements.  See the NOTICE file distributed with
1:e73ab34:  * this work for additional information regarding copyright ownership.
1:e73ab34:  * The ASF licenses this file to You under the Apache License, Version 2.0
1:e73ab34:  * (the "License"); you may not use this file except in compliance with
1:e73ab34:  * the License.  You may obtain a copy of the License at
1:e73ab34:  *
1:e73ab34:  *      http://www.apache.org/licenses/LICENSE-2.0
1:e73ab34:  *
1:e73ab34:  * Unless required by applicable law or agreed to in writing, software
1:e73ab34:  * distributed under the License is distributed on an "AS IS" BASIS,
1:e73ab34:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:e73ab34:  * See the License for the specific language governing permissions and
1:e73ab34:  * limitations under the License.
1:e73ab34:  */
1:e73ab34: package org.apache.activemq.network;
1:e73ab34: 
1:e73ab34: import java.io.File;
1:e73ab34: import java.net.URI;
1:e73ab34: import java.util.Arrays;
1:e73ab34: import java.util.Collection;
1:e73ab34: import java.util.List;
1:e73ab34: 
1:e73ab34: import javax.jms.MessageConsumer;
1:e73ab34: import javax.jms.Session;
1:e73ab34: import javax.jms.TopicSubscriber;
1:e73ab34: 
1:e73ab34: import org.apache.activemq.ActiveMQConnectionFactory;
1:e73ab34: import org.apache.activemq.broker.BrokerService;
1:e73ab34: import org.apache.activemq.broker.TransportConnector;
1:e73ab34: import org.apache.activemq.command.ActiveMQDestination;
1:e73ab34: import org.apache.activemq.command.ActiveMQTopic;
1:e73ab34: import org.apache.activemq.util.Wait;
1:e73ab34: import org.apache.activemq.util.Wait.Condition;
1:e73ab34: import org.junit.After;
1:e73ab34: import org.junit.Before;
1:e73ab34: import org.junit.Test;
1:e73ab34: import org.junit.runner.RunWith;
1:e73ab34: import org.junit.runners.Parameterized;
1:e73ab34: import org.junit.runners.Parameterized.Parameters;
1:e73ab34: import org.slf4j.Logger;
1:e73ab34: import org.slf4j.LoggerFactory;
1:e73ab34: 
1:e73ab34: import com.google.common.collect.Lists;
1:e73ab34: 
1:e73ab34: @RunWith(Parameterized.class)
1:e73ab34: public class ForceDurableNetworkBridgeTest extends DynamicNetworkTestSupport {
1:e73ab34: 
1:e73ab34:     protected static final Logger LOG = LoggerFactory.getLogger(ForceDurableNetworkBridgeTest.class);
1:e73ab34: 
1:e73ab34:     protected String testTopicName2 = "include.nonforced.bar";
1:e73ab34:     protected String staticTopic = "include.static.bar";
1:e73ab34:     protected String staticTopic2 = "include.static.nonforced.bar";
1:e73ab34:     public static enum FLOW {FORWARD, REVERSE};
1:e73ab34:     private BrokerService broker1;
1:e73ab34:     private BrokerService broker2;
1:e73ab34:     private Session session1;
1:e73ab34:     private final FLOW flow;
1:e73ab34: 
1:e73ab34:     @Parameters
1:e73ab34:     public static Collection<Object[]> data() {
1:e73ab34:         return Arrays.asList(new Object[][] {
1:e73ab34:                 {FLOW.FORWARD},
1:e73ab34:                 {FLOW.REVERSE}
1:e73ab34:         });
1:e73ab34:     }
1:e73ab34: 
1:e73ab34:     public ForceDurableNetworkBridgeTest(final FLOW flow) {
1:e73ab34:         this.flow = flow;
1:e73ab34:     }
1:e73ab34: 
1:e73ab34:     @Before
1:e73ab34:     public void setUp() throws Exception {
1:e73ab34:         doSetUp(true, tempFolder.newFolder(), tempFolder.newFolder());
1:e73ab34:     }
1:e73ab34: 
1:e73ab34:     @After
1:e73ab34:     public void tearDown() throws Exception {
1:e73ab34:         doTearDown();
1:e73ab34:     }
1:e73ab34: 
1:e73ab34:     @Test
1:e73ab34:     public void testForceDurableSubscriptionStatic() throws Exception {
1:e73ab34:         final ActiveMQTopic topic = new ActiveMQTopic(staticTopic);
1:e73ab34: 
1:e73ab34:         assertNCDurableSubsCount(broker2, topic, 1);
1:e73ab34:         assertConsumersCount(broker2, topic, 1);
1:e73ab34: 
1:e73ab34:         //Static so consumers stick around
1:e73ab34:         assertNCDurableSubsCount(broker2, topic, 1);
1:e73ab34:         assertConsumersCount(broker2, topic, 1);
1:e73ab34:     }
1:e73ab34: 
1:e73ab34:     @Test
1:e73ab34:     public void testConsumerNotForceDurableSubscriptionStatic() throws Exception {
1:e73ab34:         final ActiveMQTopic topic = new ActiveMQTopic(staticTopic2);
1:e73ab34: 
1:e73ab34:         assertConsumersCount(broker2, topic, 1);
1:e73ab34:         assertNCDurableSubsCount(broker2, topic, 0);
1:e73ab34:     }
1:e73ab34: 
1:e73ab34:     @Test
1:e73ab34:     public void testConsumerNotForceDurableSubscription() throws Exception {
1:e73ab34:         final ActiveMQTopic topic = new ActiveMQTopic(testTopicName2);
1:e73ab34:         MessageConsumer sub1 = session1.createConsumer(topic);
1:e73ab34: 
1:e73ab34:         assertConsumersCount(broker2, topic, 1);
1:e73ab34:         assertNCDurableSubsCount(broker2, topic, 0);
1:e73ab34:         sub1.close();
1:e73ab34: 
1:e73ab34:         assertNCDurableSubsCount(broker2, topic, 0);
1:e73ab34:         assertConsumersCount(broker2, topic, 0);
1:e73ab34:     }
1:e73ab34: 
1:e73ab34:     @Test
1:e73ab34:     public void testConsumerNotForceDurableWithAnotherDurable() throws Exception {
1:e73ab34:         final ActiveMQTopic topic = new ActiveMQTopic(testTopicName2);
1:e73ab34:         TopicSubscriber durSub = session1.createDurableSubscriber(topic, subName);
1:e73ab34:         session1.createConsumer(topic);
1:e73ab34: 
1:e73ab34:         //1 consumer because of conduit
1:e73ab34:         //1 durable sub
1:e73ab34:         assertConsumersCount(broker2, topic, 1);
1:e73ab34:         assertNCDurableSubsCount(broker2, topic, 1);
1:e73ab34: 
1:e73ab34:         //Remove the sub
1:e73ab34:         durSub.close();
1:e73ab34:         Thread.sleep(1000);
1:e73ab34:         removeSubscription(broker1, topic, subName);
1:e73ab34: 
1:e73ab34:         //The durable should be gone even though there is a consumer left
1:e73ab34:         //since we are not forcing durable subs
1:e73ab34:         assertNCDurableSubsCount(broker2, topic, 0);
1:e73ab34:         //consumers count ends up being 0 here, even though there is a non-durable consumer left,
1:e73ab34:         //because the durable sub is destroyed and it is a conduit subscription
1:e73ab34:         //this is another good reason to want to enable forcing of durables
1:e73ab34:         assertConsumersCount(broker2, topic, 0);
1:e73ab34:     }
1:e73ab34: 
1:e73ab34:     @Test
1:e73ab34:     public void testForceDurableSubscription() throws Exception {
1:e73ab34:         final ActiveMQTopic topic = new ActiveMQTopic(testTopicName);
1:e73ab34:         MessageConsumer sub1 = session1.createConsumer(topic);
1:e73ab34: 
1:e73ab34:         assertNCDurableSubsCount(broker2, topic, 1);
1:e73ab34:         assertConsumersCount(broker2, topic, 1);
1:e73ab34:         sub1.close();
1:e73ab34: 
1:e73ab34:         assertNCDurableSubsCount(broker2, topic, 0);
1:e73ab34:         assertConsumersCount(broker2, topic, 0);
1:e73ab34:     }
1:e73ab34: 
1:e73ab34:     @Test
1:e73ab34:     public void testForceDurableMultiSubscriptions() throws Exception {
1:e73ab34:         final ActiveMQTopic topic = new ActiveMQTopic(testTopicName);
1:e73ab34:         MessageConsumer sub1 = session1.createConsumer(topic);
1:e73ab34:         MessageConsumer sub2 = session1.createConsumer(topic);
1:e73ab34:         MessageConsumer sub3 = session1.createConsumer(topic);
1:e73ab34: 
1:e73ab34:         assertNCDurableSubsCount(broker2, topic, 1);
1:e73ab34:         assertConsumersCount(broker2, topic, 1);
1:e73ab34:         sub1.close();
1:e73ab34:         sub2.close();
1:e73ab34: 
1:e73ab34:         assertNCDurableSubsCount(broker2, topic, 1);
1:e73ab34:         assertConsumersCount(broker2, topic, 1);
1:e73ab34: 
1:e73ab34:         sub3.close();
1:e73ab34: 
1:e73ab34:         assertNCDurableSubsCount(broker2, topic, 0);
1:e73ab34:         assertConsumersCount(broker2, topic, 0);
1:e73ab34:     }
1:e73ab34: 
1:e73ab34:     @Test
1:e73ab34:     public void testForceDurableSubWithDurableCreatedFirst() throws Exception {
1:e73ab34:         final ActiveMQTopic topic = new ActiveMQTopic(testTopicName);
1:e73ab34:         TopicSubscriber durSub = session1.createDurableSubscriber(topic, subName);
1:e73ab34:         durSub.close();
1:e73ab34:         assertNCDurableSubsCount(broker2, topic, 1);
1:e73ab34: 
1:e73ab34:         MessageConsumer sub1 = session1.createConsumer(topic);
1:e73ab34:         Thread.sleep(1000);
1:e73ab34:         assertNCDurableSubsCount(broker2, topic, 1);
1:e73ab34:         sub1.close();
1:e73ab34: 
1:e73ab34:         Thread.sleep(1000);
1:e73ab34:         assertNCDurableSubsCount(broker2, topic, 1);
1:e73ab34: 
1:e73ab34:         removeSubscription(broker1, topic, subName);
1:e73ab34:         assertNCDurableSubsCount(broker2, topic, 0);
1:e73ab34:     }
1:e73ab34: 
1:e73ab34:     @Test
1:e73ab34:     public void testForceDurableSubWithNonDurableCreatedFirst() throws Exception {
1:e73ab34:         final ActiveMQTopic topic = new ActiveMQTopic(testTopicName);
1:e73ab34:         MessageConsumer sub1 = session1.createConsumer(topic);
1:e73ab34:         assertNCDurableSubsCount(broker2, topic, 1);
1:e73ab34: 
1:e73ab34:         TopicSubscriber durSub = session1.createDurableSubscriber(topic, subName);
1:e73ab34:         durSub.close();
1:e73ab34:         Thread.sleep(1000);
1:e73ab34:         assertNCDurableSubsCount(broker2, topic, 1);
1:e73ab34: 
1:e73ab34:         removeSubscription(broker1, topic, subName);
1:e73ab34:         Thread.sleep(1000);
1:e73ab34:         assertConsumersCount(broker2, topic, 1);
1:e73ab34:         assertNCDurableSubsCount(broker2, topic, 1);
1:e73ab34: 
1:e73ab34:         sub1.close();
1:e73ab34:         assertNCDurableSubsCount(broker2, topic, 0);
1:e73ab34:     }
1:e73ab34: 
1:e73ab34:     @Test
1:e73ab34:     public void testDurableSticksAroundOnConsumerClose() throws Exception {
1:e73ab34:         final ActiveMQTopic topic = new ActiveMQTopic(testTopicName);
1:e73ab34:         //Create the normal consumer first
1:e73ab34:         MessageConsumer sub1 = session1.createConsumer(topic);
1:e73ab34:         assertNCDurableSubsCount(broker2, topic, 1);
1:e73ab34: 
1:e73ab34:         TopicSubscriber durSub = session1.createDurableSubscriber(topic, subName);
1:e73ab34:         durSub.close();
1:e73ab34:         sub1.close();
1:e73ab34:         Thread.sleep(1000);
1:e73ab34:         //Both consumer and durable are closed but the durable should stick around
1:e73ab34:         assertConsumersCount(broker2, topic, 1);
1:e73ab34:         assertNCDurableSubsCount(broker2, topic, 1);
1:e73ab34: 
1:e73ab34:         removeSubscription(broker1, topic, subName);
1:e73ab34:         assertConsumersCount(broker2, topic, 0);
1:e73ab34:         assertNCDurableSubsCount(broker2, topic, 0);
1:e73ab34:     }
1:e73ab34: 
1:e73ab34:     protected void restartBrokers() throws Exception {
1:e73ab34:         doTearDown();
1:e73ab34:         doSetUp(false, localBroker.getDataDirectoryFile(), remoteBroker.getDataDirectoryFile());
1:e73ab34:     }
1:e73ab34: 
1:e73ab34:     protected void doSetUp(boolean deleteAllMessages, File localDataDir,
1:e73ab34:             File remoteDataDir) throws Exception {
1:e73ab34:         included = new ActiveMQTopic(testTopicName);
1:e73ab34:         doSetUpRemoteBroker(deleteAllMessages, remoteDataDir);
1:e73ab34:         doSetUpLocalBroker(deleteAllMessages, localDataDir);
1:e73ab34:         //Give time for advisories to propagate
1:e73ab34:         Thread.sleep(1000);
1:e73ab34:     }
1:e73ab34: 
1:e73ab34:     protected void doSetUpLocalBroker(boolean deleteAllMessages, File dataDir) throws Exception {
1:e73ab34:         localBroker = createLocalBroker(dataDir);
1:e73ab34:         localBroker.setDeleteAllMessagesOnStartup(deleteAllMessages);
1:e73ab34:         localBroker.start();
1:e73ab34:         localBroker.waitUntilStarted();
1:e73ab34:         URI localURI = localBroker.getVmConnectorURI();
1:e73ab34:         ActiveMQConnectionFactory fac = new ActiveMQConnectionFactory(localURI);
1:e73ab34:         fac.setAlwaysSyncSend(true);
1:e73ab34:         fac.setDispatchAsync(false);
1:e73ab34:         localConnection = fac.createConnection();
1:e73ab34:         localConnection.setClientID("clientId");
1:e73ab34:         localConnection.start();
1:e73ab34: 
1:e73ab34:         Wait.waitFor(new Condition() {
1:e73ab34:             @Override
1:e73ab34:             public boolean isSatisified() throws Exception {
1:e73ab34:                 return localBroker.getNetworkConnectors().get(0).activeBridges().size() == 1;
1:e73ab34:             }
1:e73ab34:         }, 10000, 500);
1:e73ab34: 
1:e73ab34:         localSession = localConnection.createSession(false, Session.AUTO_ACKNOWLEDGE);
1:e73ab34: 
1:e73ab34:         if (flow.equals(FLOW.FORWARD)) {
1:e73ab34:             broker1 = localBroker;
1:e73ab34:             session1 = localSession;
1:e73ab34:         } else {
1:e73ab34:             broker2 = localBroker;
1:e73ab34:         }
1:e73ab34:     }
1:e73ab34: 
1:e73ab34:     protected void doSetUpRemoteBroker(boolean deleteAllMessages, File dataDir) throws Exception {
1:e73ab34:         remoteBroker = createRemoteBroker(dataDir);
1:e73ab34:         remoteBroker.setDeleteAllMessagesOnStartup(deleteAllMessages);
1:e73ab34:         remoteBroker.start();
1:e73ab34:         remoteBroker.waitUntilStarted();
1:e73ab34:         URI remoteURI = remoteBroker.getVmConnectorURI();
1:e73ab34:         ActiveMQConnectionFactory fac = new ActiveMQConnectionFactory(remoteURI);
1:e73ab34:         remoteConnection = fac.createConnection();
1:e73ab34:         remoteConnection.setClientID("clientId");
1:e73ab34:         remoteConnection.start();
1:e73ab34:         remoteSession = remoteConnection.createSession(false, Session.AUTO_ACKNOWLEDGE);
1:e73ab34: 
1:e73ab34:         if (flow.equals(FLOW.FORWARD)) {
1:e73ab34:             broker2 = remoteBroker;
1:e73ab34:         } else {
1:e73ab34:             broker1 = remoteBroker;
1:e73ab34:             session1 = remoteSession;
1:e73ab34:         }
1:e73ab34:     }
1:e73ab34: 
1:e73ab34:     protected BrokerService createLocalBroker(File dataDir) throws Exception {
1:e73ab34:         BrokerService brokerService = new BrokerService();
1:e73ab34:         brokerService.setMonitorConnectionSplits(true);
1:e73ab34:         brokerService.setDataDirectoryFile(dataDir);
1:e73ab34:         brokerService.setBrokerName("localBroker");
1:e73ab34:         brokerService.addNetworkConnector(configureLocalNetworkConnector());
1:e73ab34:         brokerService.addConnector("tcp://localhost:0");
1:e73ab34:         brokerService.setDestinations(new ActiveMQDestination[] {
1:e73ab34:                 new ActiveMQTopic(testTopicName),
1:e73ab34:                 new ActiveMQTopic(testTopicName2),
1:e73ab34:                 new ActiveMQTopic(excludeTopicName)});
1:e73ab34: 
1:e73ab34:         return brokerService;
1:e73ab34:     }
1:e73ab34: 
1:e73ab34:     protected NetworkConnector configureLocalNetworkConnector() throws Exception {
1:e73ab34:         List<TransportConnector> transportConnectors = remoteBroker.getTransportConnectors();
1:e73ab34:         URI remoteURI = transportConnectors.get(0).getConnectUri();
1:e73ab34:         String uri = "static:(" + remoteURI + ")";
1:e73ab34:         NetworkConnector connector = new DiscoveryNetworkConnector(new URI(uri));
1:e73ab34:         connector.setName("networkConnector");
1:e73ab34:         connector.setDynamicOnly(false);
1:e73ab34:         connector.setDecreaseNetworkConsumerPriority(false);
1:e73ab34:         connector.setConduitSubscriptions(true);
1:e73ab34:         connector.setDuplex(true);
1:e73ab34:         connector.setStaticBridge(false);
1:e73ab34:         connector.setStaticallyIncludedDestinations(Lists.<ActiveMQDestination>newArrayList(
1:e73ab34:                 new ActiveMQTopic(staticTopic + "?forceDurable=true"),
1:e73ab34:                 new ActiveMQTopic(staticTopic2)));
1:e73ab34:         connector.setDynamicallyIncludedDestinations(
1:e73ab34:                 Lists.<ActiveMQDestination>newArrayList(
1:e73ab34:                         new ActiveMQTopic("include.test.>?forceDurable=true"),
1:e73ab34:                         new ActiveMQTopic(testTopicName2)));
1:e73ab34:         connector.setExcludedDestinations(
1:e73ab34:                 Lists.<ActiveMQDestination>newArrayList(new ActiveMQTopic(excludeTopicName)));
1:e73ab34:         return connector;
1:e73ab34:     }
1:e73ab34: 
1:e73ab34: 
1:e73ab34:     protected BrokerService createRemoteBroker(File dataDir) throws Exception {
1:e73ab34:         BrokerService brokerService = new BrokerService();
1:e73ab34:         brokerService.setBrokerName("remoteBroker");
1:e73ab34:         brokerService.setUseJmx(false);
1:e73ab34:         brokerService.setDataDirectoryFile(dataDir);
1:e73ab34:         brokerService.addConnector("tcp://localhost:0");
1:e73ab34:         brokerService.setDestinations(new ActiveMQDestination[] {
1:e73ab34:                 new ActiveMQTopic(testTopicName),
1:e73ab34:                 new ActiveMQTopic(testTopicName2),
1:e73ab34:                 new ActiveMQTopic(excludeTopicName)});
1:e73ab34: 
1:e73ab34:         return brokerService;
1:e73ab34:     }
1:e73ab34: 
1:e73ab34: }
============================================================================
author:Christopher L. Shannon (cshannon)
-------------------------------------------------------------------------------
commit:e73ab34
/////////////////////////////////////////////////////////////////////////
1: /**
1:  * Licensed to the Apache Software Foundation (ASF) under one or more
1:  * contributor license agreements.  See the NOTICE file distributed with
1:  * this work for additional information regarding copyright ownership.
1:  * The ASF licenses this file to You under the Apache License, Version 2.0
1:  * (the "License"); you may not use this file except in compliance with
1:  * the License.  You may obtain a copy of the License at
1:  *
1:  *      http://www.apache.org/licenses/LICENSE-2.0
1:  *
1:  * Unless required by applicable law or agreed to in writing, software
1:  * distributed under the License is distributed on an "AS IS" BASIS,
1:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:  * See the License for the specific language governing permissions and
1:  * limitations under the License.
1:  */
1: package org.apache.activemq.network;
1: 
1: import java.io.File;
1: import java.net.URI;
1: import java.util.Arrays;
1: import java.util.Collection;
1: import java.util.List;
1: 
1: import javax.jms.MessageConsumer;
1: import javax.jms.Session;
1: import javax.jms.TopicSubscriber;
1: 
1: import org.apache.activemq.ActiveMQConnectionFactory;
1: import org.apache.activemq.broker.BrokerService;
1: import org.apache.activemq.broker.TransportConnector;
1: import org.apache.activemq.command.ActiveMQDestination;
1: import org.apache.activemq.command.ActiveMQTopic;
1: import org.apache.activemq.util.Wait;
1: import org.apache.activemq.util.Wait.Condition;
1: import org.junit.After;
1: import org.junit.Before;
1: import org.junit.Test;
1: import org.junit.runner.RunWith;
1: import org.junit.runners.Parameterized;
1: import org.junit.runners.Parameterized.Parameters;
1: import org.slf4j.Logger;
1: import org.slf4j.LoggerFactory;
1: 
1: import com.google.common.collect.Lists;
1: 
1: @RunWith(Parameterized.class)
1: public class ForceDurableNetworkBridgeTest extends DynamicNetworkTestSupport {
1: 
1:     protected static final Logger LOG = LoggerFactory.getLogger(ForceDurableNetworkBridgeTest.class);
1: 
1:     protected String testTopicName2 = "include.nonforced.bar";
1:     protected String staticTopic = "include.static.bar";
1:     protected String staticTopic2 = "include.static.nonforced.bar";
1:     public static enum FLOW {FORWARD, REVERSE};
1:     private BrokerService broker1;
1:     private BrokerService broker2;
1:     private Session session1;
1:     private final FLOW flow;
1: 
1:     @Parameters
1:     public static Collection<Object[]> data() {
1:         return Arrays.asList(new Object[][] {
1:                 {FLOW.FORWARD},
1:                 {FLOW.REVERSE}
1:         });
1:     }
1: 
1:     public ForceDurableNetworkBridgeTest(final FLOW flow) {
1:         this.flow = flow;
1:     }
1: 
1:     @Before
1:     public void setUp() throws Exception {
1:         doSetUp(true, tempFolder.newFolder(), tempFolder.newFolder());
1:     }
1: 
1:     @After
1:     public void tearDown() throws Exception {
1:         doTearDown();
1:     }
1: 
1:     @Test
1:     public void testForceDurableSubscriptionStatic() throws Exception {
1:         final ActiveMQTopic topic = new ActiveMQTopic(staticTopic);
1: 
1:         assertNCDurableSubsCount(broker2, topic, 1);
1:         assertConsumersCount(broker2, topic, 1);
1: 
1:         //Static so consumers stick around
1:         assertNCDurableSubsCount(broker2, topic, 1);
1:         assertConsumersCount(broker2, topic, 1);
1:     }
1: 
1:     @Test
1:     public void testConsumerNotForceDurableSubscriptionStatic() throws Exception {
1:         final ActiveMQTopic topic = new ActiveMQTopic(staticTopic2);
1: 
1:         assertConsumersCount(broker2, topic, 1);
1:         assertNCDurableSubsCount(broker2, topic, 0);
1:     }
1: 
1:     @Test
1:     public void testConsumerNotForceDurableSubscription() throws Exception {
1:         final ActiveMQTopic topic = new ActiveMQTopic(testTopicName2);
1:         MessageConsumer sub1 = session1.createConsumer(topic);
1: 
1:         assertConsumersCount(broker2, topic, 1);
1:         assertNCDurableSubsCount(broker2, topic, 0);
1:         sub1.close();
1: 
1:         assertNCDurableSubsCount(broker2, topic, 0);
1:         assertConsumersCount(broker2, topic, 0);
1:     }
1: 
1:     @Test
1:     public void testConsumerNotForceDurableWithAnotherDurable() throws Exception {
1:         final ActiveMQTopic topic = new ActiveMQTopic(testTopicName2);
1:         TopicSubscriber durSub = session1.createDurableSubscriber(topic, subName);
1:         session1.createConsumer(topic);
1: 
1:         //1 consumer because of conduit
1:         //1 durable sub
1:         assertConsumersCount(broker2, topic, 1);
1:         assertNCDurableSubsCount(broker2, topic, 1);
1: 
1:         //Remove the sub
1:         durSub.close();
1:         Thread.sleep(1000);
1:         removeSubscription(broker1, topic, subName);
1: 
1:         //The durable should be gone even though there is a consumer left
1:         //since we are not forcing durable subs
1:         assertNCDurableSubsCount(broker2, topic, 0);
1:         //consumers count ends up being 0 here, even though there is a non-durable consumer left,
1:         //because the durable sub is destroyed and it is a conduit subscription
1:         //this is another good reason to want to enable forcing of durables
1:         assertConsumersCount(broker2, topic, 0);
1:     }
1: 
1:     @Test
1:     public void testForceDurableSubscription() throws Exception {
1:         final ActiveMQTopic topic = new ActiveMQTopic(testTopicName);
1:         MessageConsumer sub1 = session1.createConsumer(topic);
1: 
1:         assertNCDurableSubsCount(broker2, topic, 1);
1:         assertConsumersCount(broker2, topic, 1);
1:         sub1.close();
1: 
1:         assertNCDurableSubsCount(broker2, topic, 0);
1:         assertConsumersCount(broker2, topic, 0);
1:     }
1: 
1:     @Test
1:     public void testForceDurableMultiSubscriptions() throws Exception {
1:         final ActiveMQTopic topic = new ActiveMQTopic(testTopicName);
1:         MessageConsumer sub1 = session1.createConsumer(topic);
1:         MessageConsumer sub2 = session1.createConsumer(topic);
1:         MessageConsumer sub3 = session1.createConsumer(topic);
1: 
1:         assertNCDurableSubsCount(broker2, topic, 1);
1:         assertConsumersCount(broker2, topic, 1);
1:         sub1.close();
1:         sub2.close();
1: 
1:         assertNCDurableSubsCount(broker2, topic, 1);
1:         assertConsumersCount(broker2, topic, 1);
1: 
1:         sub3.close();
1: 
1:         assertNCDurableSubsCount(broker2, topic, 0);
1:         assertConsumersCount(broker2, topic, 0);
1:     }
1: 
1:     @Test
1:     public void testForceDurableSubWithDurableCreatedFirst() throws Exception {
1:         final ActiveMQTopic topic = new ActiveMQTopic(testTopicName);
1:         TopicSubscriber durSub = session1.createDurableSubscriber(topic, subName);
1:         durSub.close();
1:         assertNCDurableSubsCount(broker2, topic, 1);
1: 
1:         MessageConsumer sub1 = session1.createConsumer(topic);
1:         Thread.sleep(1000);
1:         assertNCDurableSubsCount(broker2, topic, 1);
1:         sub1.close();
1: 
1:         Thread.sleep(1000);
1:         assertNCDurableSubsCount(broker2, topic, 1);
1: 
1:         removeSubscription(broker1, topic, subName);
1:         assertNCDurableSubsCount(broker2, topic, 0);
1:     }
1: 
1:     @Test
1:     public void testForceDurableSubWithNonDurableCreatedFirst() throws Exception {
1:         final ActiveMQTopic topic = new ActiveMQTopic(testTopicName);
1:         MessageConsumer sub1 = session1.createConsumer(topic);
1:         assertNCDurableSubsCount(broker2, topic, 1);
1: 
1:         TopicSubscriber durSub = session1.createDurableSubscriber(topic, subName);
1:         durSub.close();
1:         Thread.sleep(1000);
1:         assertNCDurableSubsCount(broker2, topic, 1);
1: 
1:         removeSubscription(broker1, topic, subName);
1:         Thread.sleep(1000);
1:         assertConsumersCount(broker2, topic, 1);
1:         assertNCDurableSubsCount(broker2, topic, 1);
1: 
1:         sub1.close();
1:         assertNCDurableSubsCount(broker2, topic, 0);
1:     }
1: 
1:     @Test
1:     public void testDurableSticksAroundOnConsumerClose() throws Exception {
1:         final ActiveMQTopic topic = new ActiveMQTopic(testTopicName);
1:         //Create the normal consumer first
1:         MessageConsumer sub1 = session1.createConsumer(topic);
1:         assertNCDurableSubsCount(broker2, topic, 1);
1: 
1:         TopicSubscriber durSub = session1.createDurableSubscriber(topic, subName);
1:         durSub.close();
1:         sub1.close();
1:         Thread.sleep(1000);
1:         //Both consumer and durable are closed but the durable should stick around
1:         assertConsumersCount(broker2, topic, 1);
1:         assertNCDurableSubsCount(broker2, topic, 1);
1: 
1:         removeSubscription(broker1, topic, subName);
1:         assertConsumersCount(broker2, topic, 0);
1:         assertNCDurableSubsCount(broker2, topic, 0);
1:     }
1: 
1:     protected void restartBrokers() throws Exception {
1:         doTearDown();
1:         doSetUp(false, localBroker.getDataDirectoryFile(), remoteBroker.getDataDirectoryFile());
1:     }
1: 
1:     protected void doSetUp(boolean deleteAllMessages, File localDataDir,
1:             File remoteDataDir) throws Exception {
1:         included = new ActiveMQTopic(testTopicName);
1:         doSetUpRemoteBroker(deleteAllMessages, remoteDataDir);
1:         doSetUpLocalBroker(deleteAllMessages, localDataDir);
1:         //Give time for advisories to propagate
1:         Thread.sleep(1000);
1:     }
1: 
1:     protected void doSetUpLocalBroker(boolean deleteAllMessages, File dataDir) throws Exception {
1:         localBroker = createLocalBroker(dataDir);
1:         localBroker.setDeleteAllMessagesOnStartup(deleteAllMessages);
1:         localBroker.start();
1:         localBroker.waitUntilStarted();
1:         URI localURI = localBroker.getVmConnectorURI();
1:         ActiveMQConnectionFactory fac = new ActiveMQConnectionFactory(localURI);
1:         fac.setAlwaysSyncSend(true);
1:         fac.setDispatchAsync(false);
1:         localConnection = fac.createConnection();
1:         localConnection.setClientID("clientId");
1:         localConnection.start();
1: 
1:         Wait.waitFor(new Condition() {
1:             @Override
1:             public boolean isSatisified() throws Exception {
1:                 return localBroker.getNetworkConnectors().get(0).activeBridges().size() == 1;
1:             }
1:         }, 10000, 500);
1: 
1:         localSession = localConnection.createSession(false, Session.AUTO_ACKNOWLEDGE);
1: 
1:         if (flow.equals(FLOW.FORWARD)) {
1:             broker1 = localBroker;
1:             session1 = localSession;
1:         } else {
1:             broker2 = localBroker;
1:         }
1:     }
1: 
1:     protected void doSetUpRemoteBroker(boolean deleteAllMessages, File dataDir) throws Exception {
1:         remoteBroker = createRemoteBroker(dataDir);
1:         remoteBroker.setDeleteAllMessagesOnStartup(deleteAllMessages);
1:         remoteBroker.start();
1:         remoteBroker.waitUntilStarted();
1:         URI remoteURI = remoteBroker.getVmConnectorURI();
1:         ActiveMQConnectionFactory fac = new ActiveMQConnectionFactory(remoteURI);
1:         remoteConnection = fac.createConnection();
1:         remoteConnection.setClientID("clientId");
1:         remoteConnection.start();
1:         remoteSession = remoteConnection.createSession(false, Session.AUTO_ACKNOWLEDGE);
1: 
1:         if (flow.equals(FLOW.FORWARD)) {
1:             broker2 = remoteBroker;
1:         } else {
1:             broker1 = remoteBroker;
1:             session1 = remoteSession;
1:         }
1:     }
1: 
1:     protected BrokerService createLocalBroker(File dataDir) throws Exception {
1:         BrokerService brokerService = new BrokerService();
1:         brokerService.setMonitorConnectionSplits(true);
1:         brokerService.setDataDirectoryFile(dataDir);
1:         brokerService.setBrokerName("localBroker");
1:         brokerService.addNetworkConnector(configureLocalNetworkConnector());
1:         brokerService.addConnector("tcp://localhost:0");
1:         brokerService.setDestinations(new ActiveMQDestination[] {
1:                 new ActiveMQTopic(testTopicName),
1:                 new ActiveMQTopic(testTopicName2),
1:                 new ActiveMQTopic(excludeTopicName)});
1: 
1:         return brokerService;
1:     }
1: 
1:     protected NetworkConnector configureLocalNetworkConnector() throws Exception {
1:         List<TransportConnector> transportConnectors = remoteBroker.getTransportConnectors();
1:         URI remoteURI = transportConnectors.get(0).getConnectUri();
1:         String uri = "static:(" + remoteURI + ")";
1:         NetworkConnector connector = new DiscoveryNetworkConnector(new URI(uri));
1:         connector.setName("networkConnector");
1:         connector.setDynamicOnly(false);
1:         connector.setDecreaseNetworkConsumerPriority(false);
1:         connector.setConduitSubscriptions(true);
1:         connector.setDuplex(true);
1:         connector.setStaticBridge(false);
1:         connector.setStaticallyIncludedDestinations(Lists.<ActiveMQDestination>newArrayList(
1:                 new ActiveMQTopic(staticTopic + "?forceDurable=true"),
1:                 new ActiveMQTopic(staticTopic2)));
1:         connector.setDynamicallyIncludedDestinations(
1:                 Lists.<ActiveMQDestination>newArrayList(
1:                         new ActiveMQTopic("include.test.>?forceDurable=true"),
1:                         new ActiveMQTopic(testTopicName2)));
1:         connector.setExcludedDestinations(
1:                 Lists.<ActiveMQDestination>newArrayList(new ActiveMQTopic(excludeTopicName)));
1:         return connector;
1:     }
1: 
1: 
1:     protected BrokerService createRemoteBroker(File dataDir) throws Exception {
1:         BrokerService brokerService = new BrokerService();
1:         brokerService.setBrokerName("remoteBroker");
1:         brokerService.setUseJmx(false);
1:         brokerService.setDataDirectoryFile(dataDir);
1:         brokerService.addConnector("tcp://localhost:0");
1:         brokerService.setDestinations(new ActiveMQDestination[] {
1:                 new ActiveMQTopic(testTopicName),
1:                 new ActiveMQTopic(testTopicName2),
1:                 new ActiveMQTopic(excludeTopicName)});
1: 
1:         return brokerService;
1:     }
1: 
1: }
============================================================================