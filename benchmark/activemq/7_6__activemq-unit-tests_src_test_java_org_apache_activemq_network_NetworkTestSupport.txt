1:d29ca2a: /**
1:57b4941:  * Licensed to the Apache Software Foundation (ASF) under one or more
1:57b4941:  * contributor license agreements.  See the NOTICE file distributed with
1:57b4941:  * this work for additional information regarding copyright ownership.
1:57b4941:  * The ASF licenses this file to You under the Apache License, Version 2.0
1:57b4941:  * (the "License"); you may not use this file except in compliance with
1:57b4941:  * the License.  You may obtain a copy of the License at
1:230a86c:  *
1:230a86c:  *      http://www.apache.org/licenses/LICENSE-2.0
4:d29ca2a:  *
1:d29ca2a:  * Unless required by applicable law or agreed to in writing, software
1:d29ca2a:  * distributed under the License is distributed on an "AS IS" BASIS,
1:d29ca2a:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:d29ca2a:  * See the License for the specific language governing permissions and
1:d29ca2a:  * limitations under the License.
1:d29ca2a:  */
1:d29ca2a: package org.apache.activemq.network;
1:5d99c99: 
1:d29ca2a: import java.io.IOException;
1:d29ca2a: import java.net.URI;
1:d29ca2a: import java.net.URISyntaxException;
1:d29ca2a: import java.util.ArrayList;
1:d29ca2a: import java.util.Iterator;
17:d29ca2a: 
1:8d36b4c: import org.apache.activemq.broker.BrokerFactory;
1:d29ca2a: import org.apache.activemq.broker.BrokerRegistry;
1:d29ca2a: import org.apache.activemq.broker.BrokerService;
1:d29ca2a: import org.apache.activemq.broker.BrokerTestSupport;
1:d29ca2a: import org.apache.activemq.broker.StubConnection;
1:d29ca2a: import org.apache.activemq.broker.TransportConnector;
1:d29ca2a: import org.apache.activemq.store.PersistenceAdapter;
1:d29ca2a: import org.apache.activemq.store.memory.MemoryPersistenceAdapter;
1:d29ca2a: import org.apache.activemq.transport.Transport;
1:d29ca2a: import org.apache.activemq.transport.TransportFactory;
1:6d8e2c5: import org.apache.activemq.usage.SystemUsage;
1:d29ca2a: 
1:d29ca2a: public class NetworkTestSupport extends BrokerTestSupport {
1:230a86c: 
1:c7d559f:     protected ArrayList<StubConnection> connections = new ArrayList<StubConnection>();
1:230a86c: 
1:d29ca2a:     protected TransportConnector connector;
1:d29ca2a: 
1:d29ca2a:     protected PersistenceAdapter remotePersistenceAdapter;
1:d29ca2a:     protected BrokerService remoteBroker;
1:6d8e2c5:     protected SystemUsage remoteMemoryManager;
1:d29ca2a:     protected TransportConnector remoteConnector;
1:d3ce3d8:     protected boolean useJmx = false;
1:230a86c: 
1:c7d559f:     @Override
1:d29ca2a:     protected void setUp() throws Exception {
1:d29ca2a:         super.setUp();
1:230a86c: 
1:c7d559f:         remotePersistenceAdapter = createRemotePersistenceAdapter(true);
1:d29ca2a:         remoteBroker = createRemoteBroker(remotePersistenceAdapter);
1:d29ca2a:         remoteConnector = createRemoteConnector();
1:5d99c99:         remoteBroker.addConnector( remoteConnector );
1:5d99c99:         BrokerRegistry.getInstance().bind("remotehost", remoteBroker);
1:5d99c99:         remoteBroker.start();
1:d29ca2a:     }
1:c7d559f: 
1:c7d559f:     @Override
1:5d99c99:     protected BrokerService createBroker() throws Exception {
1:5d99c99:         BrokerService broker = BrokerFactory.createBroker(new URI("broker:()/localhost?persistent=false&useJmx=false&"));
1:5d99c99:         connector = createConnector();
1:5d99c99:         broker.addConnector(connector);
1:d3ce3d8:         broker.setUseJmx(useJmx);
1:5d99c99:         return broker;
1:5d99c99:     }
1:5d99c99: 
1:d29ca2a:     /**
1:d29ca2a:      * @return
2:d29ca2a:      * @throws Exception
1:d29ca2a:      * @throws IOException
1:d29ca2a:      * @throws URISyntaxException
1:d29ca2a:      */
1:d29ca2a:     protected TransportConnector createRemoteConnector() throws Exception, IOException, URISyntaxException {
1:5d99c99:         return new TransportConnector(TransportFactory.bind(new URI(getRemoteURI())));
1:d29ca2a:     }
1:5d99c99: 
1:d29ca2a:     /**
1:c59246d:      * @param value
1:d29ca2a:      * @return
1:d29ca2a:      * @throws Exception
1:d29ca2a:      * @throws IOException
1:d29ca2a:      * @throws URISyntaxException
1:d29ca2a:      */
1:d29ca2a:     protected TransportConnector createConnector() throws Exception, IOException, URISyntaxException {
1:5d99c99:         return new TransportConnector(TransportFactory.bind(new URI(getLocalURI())));
1:d29ca2a:     }
1:5d99c99: 
1:d29ca2a:     protected String getRemoteURI() {
1:d29ca2a:         return "vm://remotehost";
1:d29ca2a:     }
1:230a86c: 
1:d29ca2a:     protected String getLocalURI() {
1:d29ca2a:         return "vm://localhost";
1:d29ca2a:     }
1:d29ca2a: 
1:d29ca2a:     protected PersistenceAdapter createRemotePersistenceAdapter(boolean clean) throws Exception {
1:230a86c:         if (remotePersistenceAdapter == null || clean) {
1:d29ca2a:             remotePersistenceAdapter = new MemoryPersistenceAdapter();
1:d29ca2a:         }
1:d29ca2a:         return remotePersistenceAdapter;
1:d29ca2a:     }
1:230a86c: 
1:d29ca2a:     protected BrokerService createRemoteBroker(PersistenceAdapter persistenceAdapter) throws Exception {
1:d29ca2a:         BrokerService answer = new BrokerService();
1:8432e0a:         answer.setBrokerName("remote");
1:d3ce3d8:         answer.setUseJmx(useJmx);
1:d29ca2a:         answer.setPersistenceAdapter(persistenceAdapter);
1:d29ca2a:         return answer;
1:d29ca2a:     }
1:230a86c: 
1:c7d559f:     @Override
1:d29ca2a:     protected StubConnection createConnection() throws Exception {
1:d29ca2a:         Transport transport = TransportFactory.connect(connector.getServer().getConnectURI());
1:d29ca2a:         StubConnection connection = new StubConnection(transport);
1:d29ca2a:         connections.add(connection);
1:d29ca2a:         return connection;
1:d29ca2a:     }
1:230a86c: 
1:d29ca2a:     protected StubConnection createRemoteConnection() throws Exception {
1:d29ca2a:         Transport transport = TransportFactory.connect(remoteConnector.getServer().getConnectURI());
1:d29ca2a:         StubConnection connection = new StubConnection(transport);
1:d29ca2a:         connections.add(connection);
1:d29ca2a:         return connection;
1:d29ca2a:     }
1:230a86c: 
1:d29ca2a:     protected Transport createTransport() throws Exception {
1:d29ca2a:         Transport transport = TransportFactory.connect(connector.getServer().getConnectURI());
1:d29ca2a:         return transport;
1:d29ca2a:     }
1:d29ca2a: 
1:d29ca2a:     protected Transport createRemoteTransport() throws Exception {
1:d29ca2a:         Transport transport = TransportFactory.connect(remoteConnector.getServer().getConnectURI());
1:d29ca2a:         return transport;
1:d29ca2a:     }
1:d29ca2a: 
1:d29ca2a:     /**
1:230a86c:      * Simulates a broker restart. The memory based persistence adapter is
1:d29ca2a:      * reused so that it does not "loose" it's "persistent" messages.
1:c7d559f:      *
1:230a86c:      * @throws Exception
1:d29ca2a:      */
1:d29ca2a:     protected void restartRemoteBroker() throws Exception {
1:d29ca2a: 
1:d29ca2a:         BrokerRegistry.getInstance().unbind("remotehost");
1:d29ca2a:         remoteConnector.stop();
1:d29ca2a: 
1:d29ca2a:         remoteBroker.stop();
2:d29ca2a:         remotePersistenceAdapter.stop();
1:d29ca2a:         remotePersistenceAdapter = createRemotePersistenceAdapter(false);
2:d29ca2a:         remotePersistenceAdapter.start();
1:c7d559f: 
1:d29ca2a:         remoteBroker = createRemoteBroker(remotePersistenceAdapter);
1:5d99c99:         remoteBroker.addConnector(getRemoteURI());
2:d29ca2a:         remoteBroker.start();
2:d29ca2a:         BrokerRegistry.getInstance().bind("remotehost", remoteBroker);
1:d29ca2a:     }
1:d29ca2a: 
1:c7d559f:     @Override
1:d29ca2a:     protected void tearDown() throws Exception {
1:c7d559f:         for (Iterator<StubConnection> iter = connections.iterator(); iter.hasNext();) {
1:c7d559f:             StubConnection connection = iter.next();
1:d29ca2a:             connection.stop();
1:d29ca2a:             iter.remove();
1:d29ca2a:         }
1:230a86c: 
1:d29ca2a:         BrokerRegistry.getInstance().unbind("remotehost");
1:d29ca2a:         remoteConnector.stop();
1:d29ca2a:         connector.stop();
1:d29ca2a: 
1:d29ca2a:         remoteBroker.stop();
1:645037e:         remoteBroker.waitUntilStopped();
1:230a86c:         remotePersistenceAdapter.stop();
1:d29ca2a:         super.tearDown();
1:d29ca2a:     }
1:d29ca2a: 
1:d29ca2a: }
============================================================================
author:Hadrian Zbarcea
-------------------------------------------------------------------------------
commit:f9bec8f
author:Timothy A. Bish
-------------------------------------------------------------------------------
commit:c7d559f
/////////////////////////////////////////////////////////////////////////
1:     protected ArrayList<StubConnection> connections = new ArrayList<StubConnection>();
/////////////////////////////////////////////////////////////////////////
1:     @Override
1:         remotePersistenceAdapter = createRemotePersistenceAdapter(true);
1: 
1:     @Override
/////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////
1:     @Override
/////////////////////////////////////////////////////////////////////////
1:      *
/////////////////////////////////////////////////////////////////////////
1: 
1:     @Override
1:         for (Iterator<StubConnection> iter = connections.iterator(); iter.hasNext();) {
1:             StubConnection connection = iter.next();
commit:ef24cc9
author:Torsten Mielke
-------------------------------------------------------------------------------
commit:d3ce3d8
/////////////////////////////////////////////////////////////////////////
1:     protected boolean useJmx = false;
/////////////////////////////////////////////////////////////////////////
1:         broker.setUseJmx(useJmx);
/////////////////////////////////////////////////////////////////////////
1:         answer.setUseJmx(useJmx);
author:Bosanac Dejan
-------------------------------------------------------------------------------
commit:645037e
/////////////////////////////////////////////////////////////////////////
1:         remoteBroker.waitUntilStopped();
author:Hiram R. Chirino
-------------------------------------------------------------------------------
commit:5d99c99
/////////////////////////////////////////////////////////////////////////
0:         remotePersistenceAdapter = createRemotePersistenceAdapter(true);        
1:         remoteBroker.addConnector( remoteConnector );
1:         BrokerRegistry.getInstance().bind("remotehost", remoteBroker);
1:         remoteBroker.start();
1:     
1:     
1:     protected BrokerService createBroker() throws Exception {
1:         BrokerService broker = BrokerFactory.createBroker(new URI("broker:()/localhost?persistent=false&useJmx=false&"));
1:         connector = createConnector();
1:         broker.addConnector(connector);
1:         return broker;
1:     }
1: 
/////////////////////////////////////////////////////////////////////////
1:         return new TransportConnector(TransportFactory.bind(new URI(getRemoteURI())));
/////////////////////////////////////////////////////////////////////////
1:         return new TransportConnector(TransportFactory.bind(new URI(getLocalURI())));
/////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////
1:         
1:         remoteBroker.addConnector(getRemoteURI());
commit:328229b
/////////////////////////////////////////////////////////////////////////
0:         remoteConnector = new TransportConnector(remoteBroker.getBroker(), TransportFactory.bind(brokerId, new URI(getRemoteURI())));
commit:230a86c
/////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////
1:  *      http://www.apache.org/licenses/LICENSE-2.0
/////////////////////////////////////////////////////////////////////////
1: 
1: 
/////////////////////////////////////////////////////////////////////////
1: 
1: 
/////////////////////////////////////////////////////////////////////////
0:         return new TransportConnector(remoteBroker.getBroker(), TransportFactory.bind(broker.getBrokerName(), new URI(getRemoteURI())));
/////////////////////////////////////////////////////////////////////////
0:         return new TransportConnector(broker.getBroker(), TransportFactory.bind(broker.getBrokerName(), new URI(getLocalURI())));
/////////////////////////////////////////////////////////////////////////
1:         if (remotePersistenceAdapter == null || clean) {
1: 
1: 
/////////////////////////////////////////////////////////////////////////
1: 
/////////////////////////////////////////////////////////////////////////
1: 
/////////////////////////////////////////////////////////////////////////
1:      * Simulates a broker restart. The memory based persistence adapter is
1:      * 
1:      * @throws Exception
/////////////////////////////////////////////////////////////////////////
0:         remoteConnector = new TransportConnector(broker.getBroker(), TransportFactory.bind(brokerId, new URI(getRemoteURI())));
1: 
0:             StubConnection connection = (StubConnection)iter.next();
1: 
1:         remotePersistenceAdapter.stop();
commit:57b4941
/////////////////////////////////////////////////////////////////////////
1:  * Licensed to the Apache Software Foundation (ASF) under one or more
1:  * contributor license agreements.  See the NOTICE file distributed with
1:  * this work for additional information regarding copyright ownership.
1:  * The ASF licenses this file to You under the Apache License, Version 2.0
1:  * (the "License"); you may not use this file except in compliance with
1:  * the License.  You may obtain a copy of the License at
commit:c59246d
/////////////////////////////////////////////////////////////////////////
1:      * @param value
commit:48b4869
/////////////////////////////////////////////////////////////////////////
0:  * Copyright 2005-2006 The Apache Software Foundation
commit:d29ca2a
/////////////////////////////////////////////////////////////////////////
1: /**
1:  *
0:  * Copyright 2004 The Apache Software Foundation
1:  *
0:  * Licensed under the Apache License, Version 2.0 (the "License");
0:  * you may not use this file except in compliance with the License.
0:  * You may obtain a copy of the License at
1:  *
0:  * http://www.apache.org/licenses/LICENSE-2.0
1:  *
1:  * Unless required by applicable law or agreed to in writing, software
1:  * distributed under the License is distributed on an "AS IS" BASIS,
1:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:  * See the License for the specific language governing permissions and
1:  * limitations under the License.
1:  */
1: package org.apache.activemq.network;
1: 
1: import java.io.IOException;
1: import java.net.URI;
1: import java.net.URISyntaxException;
1: import java.util.ArrayList;
1: import java.util.Iterator;
1: 
1: import org.apache.activemq.broker.BrokerRegistry;
1: import org.apache.activemq.broker.BrokerService;
1: import org.apache.activemq.broker.BrokerTestSupport;
1: import org.apache.activemq.broker.StubConnection;
1: import org.apache.activemq.broker.TransportConnector;
0: import org.apache.activemq.memory.UsageManager;
1: import org.apache.activemq.store.PersistenceAdapter;
1: import org.apache.activemq.store.memory.MemoryPersistenceAdapter;
1: import org.apache.activemq.transport.Transport;
1: import org.apache.activemq.transport.TransportFactory;
1: 
1: public class NetworkTestSupport extends BrokerTestSupport {
1:     
0:     protected ArrayList connections = new ArrayList();
1:     
1:     protected TransportConnector connector;
1: 
1:     protected PersistenceAdapter remotePersistenceAdapter;
1:     protected BrokerService remoteBroker;
0:     protected UsageManager remoteMemoryManager;
1:     protected TransportConnector remoteConnector;
1: 
1: 
1:     protected void setUp() throws Exception {
1:         
1:         super.setUp();
0:         connector = createConnector();
0:         connector.start();
1:         
0:         remotePersistenceAdapter = createRemotePersistenceAdapter(true);
1:         remotePersistenceAdapter.start();
1:         remoteBroker = createRemoteBroker(remotePersistenceAdapter);
1:         remoteBroker.start();
1:         BrokerRegistry.getInstance().bind("remotehost", remoteBroker);
1:         remoteConnector = createRemoteConnector();
0:         remoteConnector.start();
1:     }
1: 
1:     /**
1:      * @return
1:      * @throws Exception
1:      * @throws IOException
1:      * @throws URISyntaxException
1:      */
1:     protected TransportConnector createRemoteConnector() throws Exception, IOException, URISyntaxException {
0:         return new TransportConnector(remoteBroker.getBroker(),
0:                 TransportFactory.bind(broker.getBrokerName(),
0:                         new URI(getRemoteURI())));
1:     }
1: 
1:     /**
0:      * @param brokerId
1:      * @return
1:      * @throws Exception
1:      * @throws IOException
1:      * @throws URISyntaxException
1:      */
1:     protected TransportConnector createConnector() throws Exception, IOException, URISyntaxException {
0:         return new TransportConnector(broker.getBroker(),
0:                 TransportFactory.bind(broker.getBrokerName(), new URI(getLocalURI())));
1:     }
1: 
1:     protected String getRemoteURI() {
1:         return "vm://remotehost";
1:     }
1: 
1:     protected String getLocalURI() {
1:         return "vm://localhost";
1:     }
1: 
1:     protected PersistenceAdapter createRemotePersistenceAdapter(boolean clean) throws Exception {
0:         if( remotePersistenceAdapter == null || clean ) {
1:             remotePersistenceAdapter = new MemoryPersistenceAdapter();
1:         }
1:         return remotePersistenceAdapter;
1:     }
1: 
1:     protected BrokerService createRemoteBroker(PersistenceAdapter persistenceAdapter) throws Exception {
1:         BrokerService answer = new BrokerService();
1:         answer.setPersistenceAdapter(persistenceAdapter);
1:         return answer;
1:     }
1:     
1:     protected StubConnection createConnection() throws Exception {
1:         Transport transport = TransportFactory.connect(connector.getServer().getConnectURI());
1:         StubConnection connection = new StubConnection(transport);
1:         connections.add(connection);
1:         return connection;
1:     }
1: 
1:     protected StubConnection createRemoteConnection() throws Exception {
1:         Transport transport = TransportFactory.connect(remoteConnector.getServer().getConnectURI());
1:         StubConnection connection = new StubConnection(transport);
1:         connections.add(connection);
1:         return connection;
1:     }
1:     
1:     protected Transport createTransport() throws Exception {
1:         Transport transport = TransportFactory.connect(connector.getServer().getConnectURI());
1:         return transport;
1:     }
1: 
1:     protected Transport createRemoteTransport() throws Exception {
1:         Transport transport = TransportFactory.connect(remoteConnector.getServer().getConnectURI());
1:         return transport;
1:     }
1: 
1:     /**
0:      * Simulates a broker restart.  The memory based persistence adapter is
1:      * reused so that it does not "loose" it's "persistent" messages.
1:      * @throws Exception 
1:      */
1:     protected void restartRemoteBroker() throws Exception {
1: 
1:         BrokerRegistry.getInstance().unbind("remotehost");
1:         remoteConnector.stop();
1: 
1:         remoteBroker.stop();
1:         remotePersistenceAdapter.stop();
1:         remotePersistenceAdapter = createRemotePersistenceAdapter(false);
1:         remotePersistenceAdapter.start();
1:         remoteBroker = createRemoteBroker(remotePersistenceAdapter);
1:         remoteBroker.start();
0:         String brokerId = remoteBroker.getBrokerName();
0:         remoteConnector = new TransportConnector(broker.getBroker(),TransportFactory.bind(brokerId,new URI(getRemoteURI())));
0:         remoteConnector.start();
1:         BrokerRegistry.getInstance().bind("remotehost", remoteBroker);
1:     }
1:     
1:     protected void tearDown() throws Exception {
0:         for (Iterator iter = connections.iterator(); iter.hasNext();) {
0:             StubConnection connection = (StubConnection) iter.next();
1:             connection.stop();
1:             iter.remove();
1:         }
1:         
1:         BrokerRegistry.getInstance().unbind("remotehost");
1:         remoteConnector.stop();
1:         connector.stop();
1: 
1:         remoteBroker.stop();
1:         remotePersistenceAdapter.stop();        
1:         super.tearDown();
1:     }
1: 
1: }
author:Robert Davies
-------------------------------------------------------------------------------
commit:6d8e2c5
/////////////////////////////////////////////////////////////////////////
1: import org.apache.activemq.usage.SystemUsage;
/////////////////////////////////////////////////////////////////////////
1:     protected SystemUsage remoteMemoryManager;
commit:8432e0a
/////////////////////////////////////////////////////////////////////////
1:         answer.setBrokerName("remote");
commit:af249b6
/////////////////////////////////////////////////////////////////////////
0:         BrokerService broker = BrokerFactory.createBroker(new URI("broker:()/localhost?persistent=false&useJmx=false&"));
0:         return broker;
0:         broker.setBrokerName("remote");
author:James Strachan
-------------------------------------------------------------------------------
commit:8d36b4c
/////////////////////////////////////////////////////////////////////////
1: import org.apache.activemq.broker.BrokerFactory;
/////////////////////////////////////////////////////////////////////////
0:     
0:     protected BrokerService createBroker() throws Exception {
0:         return BrokerFactory.createBroker(new URI("broker:()/localhost?persistent=false&useJmx=false"));
0:     }
0:     
0:         answer.setUseJmx(false);
============================================================================