1:4686ec5: /**
1:57b4941:  * Licensed to the Apache Software Foundation (ASF) under one or more
1:57b4941:  * contributor license agreements.  See the NOTICE file distributed with
1:57b4941:  * this work for additional information regarding copyright ownership.
1:57b4941:  * The ASF licenses this file to You under the Apache License, Version 2.0
1:57b4941:  * (the "License"); you may not use this file except in compliance with
1:57b4941:  * the License.  You may obtain a copy of the License at
1:3dbc9c9:  *
1:230a86c:  *      http://www.apache.org/licenses/LICENSE-2.0
1:3dbc9c9:  *
1:4686ec5:  * Unless required by applicable law or agreed to in writing, software
1:4686ec5:  * distributed under the License is distributed on an "AS IS" BASIS,
1:4686ec5:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:4686ec5:  * See the License for the specific language governing permissions and
1:4686ec5:  * limitations under the License.
1:4686ec5:  */
1:4686ec5: package org.apache.activemq.security;
1:9dcd008: 
1:3dbc9c9: import java.security.Principal;
1:9dcd008: import java.util.HashMap;
1:9dcd008: import java.util.HashSet;
1:9dcd008: import java.util.Iterator;
1:9dcd008: import java.util.List;
1:9dcd008: import java.util.Map;
1:9dcd008: import java.util.Set;
1:9dcd008: import java.util.StringTokenizer;
1:9dcd008: 
1:4686ec5: import org.apache.activemq.broker.Broker;
1:4686ec5: import org.apache.activemq.broker.BrokerPlugin;
1:74a7a8b: import org.apache.activemq.jaas.GroupPrincipal;
1:9dcd008: 
1:4686ec5: /**
1:4686ec5:  * A simple authentication plugin
1:f812e34:  *
1:f812e34:  * @org.apache.xbean.XBean element="simpleAuthenticationPlugin"
1:f812e34:  *                         description="Provides a simple authentication plugin
1:f812e34:  *                         configured with a map of user-passwords and a map of
1:f812e34:  *                         user-groups or a list of authentication users"
1:0bbc0ac:  *
1:3dbc9c9:  *
1:4686ec5:  */
1:4686ec5: public class SimpleAuthenticationPlugin implements BrokerPlugin {
1:1406d40:     private Map<String, String> userPasswords = new HashMap<String, String>();
1:1406d40:     private Map<String, Set<Principal>> userGroups = new HashMap<String, Set<Principal>>();
1:eeacd65:     private static final String DEFAULT_ANONYMOUS_USER = "anonymous";
1:eeacd65:     private static final String DEFAULT_ANONYMOUS_GROUP = "anonymous";
1:eeacd65:     private String anonymousUser = DEFAULT_ANONYMOUS_USER;
1:eeacd65:     private String anonymousGroup = DEFAULT_ANONYMOUS_GROUP;
1:eeacd65:     private boolean anonymousAccessAllowed = false;
1:9dcd008: 
1:f812e34:     public SimpleAuthenticationPlugin() {
1:f812e34:     }
1:eeacd65: 
1:3dbc9c9:     public SimpleAuthenticationPlugin(List<?> users) {
1:f812e34:         setUsers(users);
1:9dcd008:     }
1:eeacd65: 
1:eeacd65:     public Broker installPlugin(Broker parent) {
1:eeacd65:         SimpleAuthenticationBroker broker = new SimpleAuthenticationBroker(parent, userPasswords, userGroups);
1:eeacd65:         broker.setAnonymousAccessAllowed(anonymousAccessAllowed);
1:eeacd65:         broker.setAnonymousUser(anonymousUser);
1:eeacd65:         broker.setAnonymousGroup(anonymousGroup);
1:eeacd65:         return broker;
3:4686ec5:     }
1:9dcd008: 
1:3dbc9c9:     public Map<String, Set<Principal>> getUserGroups() {
1:4686ec5:         return userGroups;
1:4686ec5:     }
1:f812e34: 
1:9dcd008:     /**
1:9dcd008:      * Sets individual users for authentication
1:3dbc9c9:      *
1:9dcd008:      * @org.apache.xbean.ElementType class="org.apache.activemq.security.AuthenticationUser"
1:9dcd008:      */
1:3dbc9c9:     public void setUsers(List<?> users) {
1:1406d40:         userPasswords.clear();
1:1406d40:         userGroups.clear();
1:3dbc9c9:         for (Iterator<?> it = users.iterator(); it.hasNext();) {
1:f812e34:             AuthenticationUser user = (AuthenticationUser)it.next();
1:f812e34:             userPasswords.put(user.getUsername(), user.getPassword());
1:3dbc9c9:             Set<Principal> groups = new HashSet<Principal>();
1:f490982:             StringTokenizer iter = new StringTokenizer(user.getGroups(), ",");
1:9dcd008:             while (iter.hasMoreTokens()) {
1:9dcd008:                 String name = iter.nextToken().trim();
1:9dcd008:                 groups.add(new GroupPrincipal(name));
1:9dcd008:             }
1:f812e34:             userGroups.put(user.getUsername(), groups);
1:f812e34:         }
1:f812e34:     }
1:3dbc9c9: 
1:3dbc9c9: 
1:eeacd65:     public void setAnonymousAccessAllowed(boolean anonymousAccessAllowed) {
1:eeacd65:         this.anonymousAccessAllowed = anonymousAccessAllowed;
1:eeacd65:     }
1:eeacd65: 
1:67a7d30:     public boolean isAnonymousAccessAllowed() {
1:67a7d30:         return anonymousAccessAllowed;
1:67a7d30:     }
1:67a7d30: 
1:eeacd65:     public void setAnonymousUser(String anonymousUser) {
1:eeacd65:         this.anonymousUser = anonymousUser;
1:eeacd65:     }
1:eeacd65: 
1:67a7d30:     public String getAnonymousUser() {
1:67a7d30:         return anonymousUser;
1:67a7d30:     }
1:67a7d30: 
1:eeacd65:     public void setAnonymousGroup(String anonymousGroup) {
1:eeacd65:         this.anonymousGroup = anonymousGroup;
1:eeacd65:     }
6:4686ec5: 
1:67a7d30:     public String getAnonymousGroup() {
1:67a7d30:         return anonymousGroup;
1:67a7d30:     }
1:67a7d30: 
1:4686ec5:     /**
1:f812e34:      * Sets the groups a user is in. The key is the user name and the value is a
1:f812e34:      * Set of groups
1:4686ec5:      */
1:3dbc9c9:     public void setUserGroups(Map<String, Set<Principal>> userGroups) {
1:4686ec5:         this.userGroups = userGroups;
1:9dcd008:     }
1:4686ec5: 
1:ecf89a6:     public Map<String, String> getUserPasswords() {
1:4686ec5:         return userPasswords;
1:9dcd008:     }
1:4686ec5: 
1:4686ec5:     /**
1:4686ec5:      * Sets the map indexed by user name with the value the password
1:4686ec5:      */
1:ecf89a6:     public void setUserPasswords(Map<String, String> userPasswords) {
1:4686ec5:         this.userPasswords = userPasswords;
1:4686ec5:     }
1:4686ec5: 
1:4686ec5: }
============================================================================
author:Robert Gemmell
-------------------------------------------------------------------------------
commit:1406d40
/////////////////////////////////////////////////////////////////////////
1:     private Map<String, String> userPasswords = new HashMap<String, String>();
1:     private Map<String, Set<Principal>> userGroups = new HashMap<String, Set<Principal>>();
/////////////////////////////////////////////////////////////////////////
1:         userPasswords.clear();
1:         userGroups.clear();
author:gtully
-------------------------------------------------------------------------------
commit:67a7d30
/////////////////////////////////////////////////////////////////////////
1:     public boolean isAnonymousAccessAllowed() {
1:         return anonymousAccessAllowed;
1:     }
1: 
1:     public String getAnonymousUser() {
1:         return anonymousUser;
1:     }
1: 
1:     public String getAnonymousGroup() {
1:         return anonymousGroup;
1:     }
1: 
author:Hiram R. Chirino
-------------------------------------------------------------------------------
commit:58aca86
commit:0bbc0ac
/////////////////////////////////////////////////////////////////////////
1:  * 
commit:ecf89a6
/////////////////////////////////////////////////////////////////////////
0:     private Map<String, String> userPasswords;
0:     private Map<String, Set<GroupPrincipal>> userGroups;
/////////////////////////////////////////////////////////////////////////
0:     public Map<String, Set<GroupPrincipal>> getUserGroups() {
/////////////////////////////////////////////////////////////////////////
0:         userPasswords = new HashMap<String, String>();
0:         userGroups = new HashMap<String, Set<GroupPrincipal>>();
0:             Set<GroupPrincipal> groups = new HashSet<GroupPrincipal>();
/////////////////////////////////////////////////////////////////////////
0:     public void setUserGroups(Map<String, Set<GroupPrincipal>> userGroups) {
1:     public Map<String, String> getUserPasswords() {
1:     public void setUserPasswords(Map<String, String> userPasswords) {
commit:74a7a8b
/////////////////////////////////////////////////////////////////////////
1: import org.apache.activemq.jaas.GroupPrincipal;
commit:f812e34
/////////////////////////////////////////////////////////////////////////
1:  * 
1:  * @org.apache.xbean.XBean element="simpleAuthenticationPlugin"
1:  *                         description="Provides a simple authentication plugin
1:  *                         configured with a map of user-passwords and a map of
1:  *                         user-groups or a list of authentication users"
/////////////////////////////////////////////////////////////////////////
1:     public SimpleAuthenticationPlugin() {
1:     }
1:         setUsers(users);
/////////////////////////////////////////////////////////////////////////
1: 
0:         userPasswords = new HashMap();
0:         userGroups = new HashMap();
0:         for (Iterator it = users.iterator(); it.hasNext();) {
1:             AuthenticationUser user = (AuthenticationUser)it.next();
1:             userPasswords.put(user.getUsername(), user.getPassword());
1:             userGroups.put(user.getUsername(), groups);
1:         }
1:     }
1:      * Sets the groups a user is in. The key is the user name and the value is a
1:      * Set of groups
commit:230a86c
/////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////
1:  *      http://www.apache.org/licenses/LICENSE-2.0
commit:57b4941
/////////////////////////////////////////////////////////////////////////
1:  * Licensed to the Apache Software Foundation (ASF) under one or more
1:  * contributor license agreements.  See the NOTICE file distributed with
1:  * this work for additional information regarding copyright ownership.
1:  * The ASF licenses this file to You under the Apache License, Version 2.0
1:  * (the "License"); you may not use this file except in compliance with
1:  * the License.  You may obtain a copy of the License at
author:Timothy A. Bish
-------------------------------------------------------------------------------
commit:3dbc9c9
/////////////////////////////////////////////////////////////////////////
1: import java.security.Principal;
/////////////////////////////////////////////////////////////////////////
1:  *
1:  *
1:  *
0:     private Map<String, Set<Principal>> userGroups;
/////////////////////////////////////////////////////////////////////////
1:     public SimpleAuthenticationPlugin(List<?> users) {
/////////////////////////////////////////////////////////////////////////
1:     public Map<String, Set<Principal>> getUserGroups() {
1:      *
1:     public void setUsers(List<?> users) {
0:         userGroups = new HashMap<String, Set<Principal>>();
1:         for (Iterator<?> it = users.iterator(); it.hasNext();) {
1:             Set<Principal> groups = new HashSet<Principal>();
/////////////////////////////////////////////////////////////////////////
1: 
1: 
/////////////////////////////////////////////////////////////////////////
1:     public void setUserGroups(Map<String, Set<Principal>> userGroups) {
author:Bosanac Dejan
-------------------------------------------------------------------------------
commit:eeacd65
/////////////////////////////////////////////////////////////////////////
1:     private static final String DEFAULT_ANONYMOUS_USER = "anonymous";
1:     private static final String DEFAULT_ANONYMOUS_GROUP = "anonymous";
1:     private String anonymousUser = DEFAULT_ANONYMOUS_USER;
1:     private String anonymousGroup = DEFAULT_ANONYMOUS_GROUP;
1:     private boolean anonymousAccessAllowed = false;
/////////////////////////////////////////////////////////////////////////
1:     public Broker installPlugin(Broker parent) {
1:         SimpleAuthenticationBroker broker = new SimpleAuthenticationBroker(parent, userPasswords, userGroups);
1:         broker.setAnonymousAccessAllowed(anonymousAccessAllowed);
1:         broker.setAnonymousUser(anonymousUser);
1:         broker.setAnonymousGroup(anonymousGroup);
1:         return broker;
/////////////////////////////////////////////////////////////////////////
1:     
1:     
1:     public void setAnonymousAccessAllowed(boolean anonymousAccessAllowed) {
1:         this.anonymousAccessAllowed = anonymousAccessAllowed;
1:     }
1: 
1:     public void setAnonymousUser(String anonymousUser) {
1:         this.anonymousUser = anonymousUser;
1:     }
1: 
1:     public void setAnonymousGroup(String anonymousGroup) {
1:         this.anonymousGroup = anonymousGroup;
1:     }
author:Jonas B. Lim
-------------------------------------------------------------------------------
commit:f490982
/////////////////////////////////////////////////////////////////////////
1:             StringTokenizer iter = new StringTokenizer(user.getGroups(), ",");
commit:9dcd008
/////////////////////////////////////////////////////////////////////////
1: import java.util.HashMap;
1: import java.util.HashSet;
1: import java.util.Iterator;
1: import java.util.List;
1: import java.util.Map;
1: import java.util.Set;
1: import java.util.StringTokenizer;
1: 
0: import org.apache.activemq.jaas.GroupPrincipal;
1: 
/////////////////////////////////////////////////////////////////////////
0:  * plugin configured with a map of user-passwords and a map of user-groups or a list of authentication users"
/////////////////////////////////////////////////////////////////////////
0:     public SimpleAuthenticationPlugin() {}
1: 
0:     public SimpleAuthenticationPlugin(List users) {
0:     	setUsers(users);
1:     }
1: 
/////////////////////////////////////////////////////////////////////////
1:     
1:     /**
1:      * Sets individual users for authentication
0:      * 
1:      * @org.apache.xbean.ElementType class="org.apache.activemq.security.AuthenticationUser"
1:      */
0:     public void setUsers(List users) {
0:     	userPasswords = new HashMap();
0:     	userGroups = new HashMap();
0:     	for (Iterator it = users.iterator(); it.hasNext();) {
0:     	    AuthenticationUser user = (AuthenticationUser)it.next();
0:     	    userPasswords.put(user.getUsername(), user.getPassword());
0:             Set groups = new HashSet();
0:             StringTokenizer iter = new StringTokenizer(user.getGroup(), ",");
1:             while (iter.hasMoreTokens()) {
1:                 String name = iter.nextToken().trim();
1:                 groups.add(new GroupPrincipal(name));
1:             }
0:     	    userGroups.put(user.getUsername(), groups);
1:     	}
1:     }    
author:James Strachan
-------------------------------------------------------------------------------
commit:4686ec5
/////////////////////////////////////////////////////////////////////////
1: /**
0:  *
0:  * Copyright 2005-2006 The Apache Software Foundation
0:  *
0:  * Licensed under the Apache License, Version 2.0 (the "License");
0:  * you may not use this file except in compliance with the License.
0:  * You may obtain a copy of the License at
0:  *
0:  * http://www.apache.org/licenses/LICENSE-2.0
0:  *
1:  * Unless required by applicable law or agreed to in writing, software
1:  * distributed under the License is distributed on an "AS IS" BASIS,
1:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:  * See the License for the specific language governing permissions and
1:  * limitations under the License.
1:  */
1: package org.apache.activemq.security;
1: 
1: import org.apache.activemq.broker.Broker;
1: import org.apache.activemq.broker.BrokerPlugin;
1: 
0: import java.util.Map;
1: 
1: /**
1:  * A simple authentication plugin
0:  *  
0:  * @org.apache.xbean.XBean element="simpleAuthenticationPlugin" description="Provides a simple authentication
0:  * plugin configured with a map of user-passwords and a map of user-groups"
0:  * 
0:  * @version $Revision$
1:  */
1: public class SimpleAuthenticationPlugin implements BrokerPlugin {
0:     private Map userPasswords;
0:     private Map userGroups;
1: 
0:     public Broker installPlugin(Broker broker) {
0:         return new SimpleAuthenticationBroker(broker, userPasswords, userGroups);
1:     }
1: 
0:     public Map getUserGroups() {
1:         return userGroups;
1:     }
1: 
1:     /**
0:      * Sets the groups a user is in. The key is the user name and the value is a Set of groups
1:      */
0:     public void setUserGroups(Map userGroups) {
1:         this.userGroups = userGroups;
1:     }
1: 
0:     public Map getUserPasswords() {
1:         return userPasswords;
1:     }
1: 
1:     /**
1:      * Sets the map indexed by user name with the value the password
1:      */
0:     public void setUserPasswords(Map userPasswords) {
1:         this.userPasswords = userPasswords;
1:     }
1: 
1: }
============================================================================