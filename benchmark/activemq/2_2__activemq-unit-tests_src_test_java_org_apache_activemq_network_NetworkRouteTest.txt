1:6c5732b: /**
1:6c5732b:  * Licensed to the Apache Software Foundation (ASF) under one or more
1:6c5732b:  * contributor license agreements.  See the NOTICE file distributed with
1:6c5732b:  * this work for additional information regarding copyright ownership.
1:6c5732b:  * The ASF licenses this file to You under the Apache License, Version 2.0
1:6c5732b:  * (the "License"); you may not use this file except in compliance with
1:6c5732b:  * the License.  You may obtain a copy of the License at
1:6c5732b:  *
1:6c5732b:  *      http://www.apache.org/licenses/LICENSE-2.0
1:6c5732b:  *
1:6c5732b:  * Unless required by applicable law or agreed to in writing, software
1:6c5732b:  * distributed under the License is distributed on an "AS IS" BASIS,
1:6c5732b:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:6c5732b:  * See the License for the specific language governing permissions and
1:6c5732b:  * limitations under the License.
1:6c5732b:  */
1:6c5732b: package org.apache.activemq.network;
1:6c5732b: 
1:6c5732b: import java.util.Arrays;
1:6c5732b: import java.util.concurrent.CountDownLatch;
1:6c5732b: import java.util.concurrent.TimeUnit;
1:6c5732b: import org.apache.activemq.advisory.AdvisorySupport;
1:6c5732b: import org.apache.activemq.broker.BrokerService;
1:6c5732b: import org.apache.activemq.command.ActiveMQMessage;
1:6c5732b: import org.apache.activemq.command.ActiveMQTopic;
1:6c5732b: import org.apache.activemq.command.BrokerId;
1:6c5732b: import org.apache.activemq.command.BrokerInfo;
1:6c5732b: import org.apache.activemq.command.ConnectionId;
1:6c5732b: import org.apache.activemq.command.ConsumerId;
1:6c5732b: import org.apache.activemq.command.ConsumerInfo;
1:6c5732b: import org.apache.activemq.command.MessageAck;
1:6c5732b: import org.apache.activemq.command.MessageDispatch;
1:6c5732b: import org.apache.activemq.command.RemoveInfo;
1:6c5732b: import org.apache.activemq.command.Response;
1:6c5732b: import org.apache.activemq.command.SessionId;
1:6c5732b: import org.apache.activemq.transport.FutureResponse;
1:6c5732b: import org.apache.activemq.transport.ResponseCallback;
1:6c5732b: import org.apache.activemq.transport.Transport;
1:6c5732b: import org.apache.activemq.transport.TransportListener;
1:36237cb: import org.apache.activemq.transport.tcp.TcpTransport;
1:6c5732b: import org.easymock.EasyMock;
1:6c5732b: import org.easymock.IAnswer;
1:6c5732b: import org.easymock.IMocksControl;
1:6c5732b: import org.junit.After;
1:6c5732b: import org.junit.Assert;
1:6c5732b: import org.junit.Before;
1:6c5732b: import org.junit.Test;
1:6c5732b: 
1:6c5732b: public class NetworkRouteTest {
1:6c5732b:     private IMocksControl control;
1:6c5732b:     private BrokerService brokerService;
1:6c5732b:     private Transport localBroker;
1:6c5732b:     private Transport remoteBroker;
1:6c5732b:     private TransportListener localListener;
1:6c5732b:     private TransportListener remoteListener;
1:6c5732b:     private MessageDispatch msgDispatch;
1:6c5732b:     private ActiveMQMessage path1Msg;
1:6c5732b:     private ActiveMQMessage path2Msg;
1:6c5732b:     private ActiveMQMessage removePath1Msg;
1:6c5732b:     private ActiveMQMessage removePath2Msg;
1:6c5732b: 
1:6c5732b:     // this sort of mockery is very brittle but it is fast!
1:6c5732b: 
1:6c5732b:     @Test
1:6c5732b:     public void verifyNoRemoveOnOneConduitRemove() throws Exception {
1:d84a586:         localBroker.oneway(EasyMock.isA(ConsumerInfo.class));
1:6c5732b:         control.replay();
1:6c5732b: 
1:6c5732b:         remoteListener.onCommand(path2Msg);
1:6c5732b:         remoteListener.onCommand(path1Msg);
1:6c5732b: 
1:6c5732b:         remoteListener.onCommand(removePath2Msg);
1:6c5732b:         control.verify();
1:6c5732b:     }
1:6c5732b: 
1:6c5732b:     @Test
1:6c5732b:     public void addAndRemoveOppositeOrder() throws Exception {
1:6c5732b:         // from (1)
1:d84a586:         localBroker.oneway(EasyMock.isA(ConsumerInfo.class));
1:6c5732b:         ArgHolder localConsumer = ArgHolder.holdArgsForLastObjectCall();
1:6c5732b:         // from (2a)
1:6c5732b:         remoteBroker.asyncRequest(EasyMock.isA(ActiveMQMessage.class), EasyMock.isA(ResponseCallback.class));
1:6c5732b:         ArgHolder firstMessageFuture = ArgHolder.holdArgsForLastFutureRequestCall();
1:6c5732b:         localBroker.oneway(EasyMock.isA(MessageAck.class));
1:6c5732b:         // from (2b)
1:6c5732b:         remoteBroker.asyncRequest(EasyMock.isA(ActiveMQMessage.class), EasyMock.isA(ResponseCallback.class));
1:6c5732b:         ArgHolder secondMessageFuture = ArgHolder.holdArgsForLastFutureRequestCall();
1:6c5732b: 
1:6c5732b:         localBroker.oneway(EasyMock.isA(MessageAck.class));
1:6c5732b:         // from (3)
1:6c5732b:         localBroker.oneway(EasyMock.isA(RemoveInfo.class));
1:6c5732b:         ExpectationWaiter waitForRemove = ExpectationWaiter.waiterForLastVoidCall();
1:6c5732b:         control.replay();
1:6c5732b: 
1:6c5732b:         // (1) send advisory of path 1
1:6c5732b:         remoteListener.onCommand(path1Msg);
1:6c5732b:         msgDispatch.setConsumerId(((ConsumerInfo) localConsumer.arguments[0]).getConsumerId());
1:6c5732b:         // send advisory of path 2, doesn't send a ConsumerInfo to localBroker
1:6c5732b:         remoteListener.onCommand(path2Msg);
1:6c5732b:         // (2a) send a message
1:6c5732b:         localListener.onCommand(msgDispatch);
1:6c5732b:         ResponseCallback callback = (ResponseCallback) firstMessageFuture.arguments[1];
1:6c5732b:         FutureResponse response = new FutureResponse(callback);
1:6c5732b:         response.set(new Response());
1:6c5732b: 
1:6c5732b:         // send advisory of path 2 remove, doesn't send a RemoveInfo to localBroker
1:6c5732b:         remoteListener.onCommand(removePath2Msg);
1:6c5732b:         // (2b) send a message
1:6c5732b:         localListener.onCommand(msgDispatch);
1:6c5732b:         callback = (ResponseCallback) secondMessageFuture.arguments[1];
1:6c5732b:         response = new FutureResponse(callback);
1:6c5732b:         response.set(new Response());
1:6c5732b: 
1:6c5732b:         // (3) send advisory of path 1 remove, sends a RemoveInfo to localBroker
1:6c5732b:         remoteListener.onCommand(removePath1Msg);
1:6c5732b:         waitForRemove.assertHappens(5, TimeUnit.SECONDS);
1:6c5732b:         // send a message, does not send message as in 2a and 2b
1:6c5732b:         localListener.onCommand(msgDispatch);
1:6c5732b: 
1:6c5732b:         control.verify();
1:6c5732b:     }
1:6c5732b: 
1:6c5732b:     @Test
1:6c5732b:     public void addAndRemoveSameOrder() throws Exception {
1:6c5732b:         // from (1)
1:d84a586:         localBroker.oneway(EasyMock.isA(ConsumerInfo.class));
1:6c5732b:         ArgHolder localConsumer = ArgHolder.holdArgsForLastObjectCall();
1:6c5732b: 
1:6c5732b:         // from (2a)
1:6c5732b:         remoteBroker.asyncRequest(EasyMock.isA(ActiveMQMessage.class), EasyMock.isA(ResponseCallback.class));
1:6c5732b:         ArgHolder firstMessageFuture = ArgHolder.holdArgsForLastFutureRequestCall();
1:6c5732b: 
1:6c5732b:         localBroker.oneway(EasyMock.isA(MessageAck.class));
1:6c5732b: 
1:6c5732b:         // from (2b)
1:6c5732b:         remoteBroker.asyncRequest(EasyMock.isA(ActiveMQMessage.class), EasyMock.isA(ResponseCallback.class));
1:6c5732b:         ArgHolder secondMessageFuture = ArgHolder.holdArgsForLastFutureRequestCall();
1:6c5732b: 
1:6c5732b:         localBroker.oneway(EasyMock.isA(MessageAck.class));
1:6c5732b: 
1:6c5732b:         // from (3)
1:6c5732b:         localBroker.oneway(EasyMock.isA(RemoveInfo.class));
1:6c5732b:         ExpectationWaiter waitForRemove = ExpectationWaiter.waiterForLastVoidCall();
1:6c5732b:         control.replay();
1:6c5732b: 
1:6c5732b:         // (1) send advisory of path 1
1:6c5732b:         remoteListener.onCommand(path1Msg);
1:6c5732b:         msgDispatch.setConsumerId(((ConsumerInfo) localConsumer.arguments[0]).getConsumerId());
1:6c5732b:         // send advisory of path 2, doesn't send a ConsumerInfo to localBroker
1:6c5732b:         remoteListener.onCommand(path2Msg);
1:6c5732b:         // (2a) send a message
1:6c5732b:         localListener.onCommand(msgDispatch);
1:6c5732b:         ResponseCallback callback = (ResponseCallback) firstMessageFuture.arguments[1];
1:6c5732b:         FutureResponse response = new FutureResponse(callback);
1:6c5732b:         response.set(new Response());
1:6c5732b: 
1:6c5732b:         // send advisory of path 1 remove, shouldn't send a RemoveInfo to localBroker
1:6c5732b:         remoteListener.onCommand(removePath1Msg);
1:6c5732b:         // (2b) send a message, should send the message as in 2a
1:6c5732b:         localListener.onCommand(msgDispatch);
1:6c5732b:         callback = (ResponseCallback) secondMessageFuture.arguments[1];
1:6c5732b:         response = new FutureResponse(callback);
1:6c5732b:         response.set(new Response());
1:6c5732b: 
1:6c5732b:         // (3) send advisory of path 1 remove, should send a RemoveInfo to localBroker
1:6c5732b:         remoteListener.onCommand(removePath2Msg);
1:6c5732b:         waitForRemove.assertHappens(5, TimeUnit.SECONDS);
1:6c5732b:         // send a message, does not send message as in 2a
1:6c5732b:         localListener.onCommand(msgDispatch);
1:6c5732b: 
1:6c5732b:         control.verify();
1:6c5732b:     }
1:6c5732b: 
1:6c5732b:     @Before
1:6c5732b:     public void before() throws Exception {
1:6c5732b:         control = EasyMock.createControl();
1:6c5732b:         localBroker = control.createMock(Transport.class);
1:6c5732b:         remoteBroker = control.createMock(Transport.class);
1:6c5732b: 
1:6c5732b:         NetworkBridgeConfiguration configuration = new NetworkBridgeConfiguration();
1:6c5732b:         brokerService = new BrokerService();
1:6c5732b:         BrokerInfo remoteBrokerInfo = new BrokerInfo();
1:6c5732b: 
1:6c5732b:         configuration.setDuplex(true);
1:6c5732b:         configuration.setNetworkTTL(5);
1:6c5732b:         brokerService.setBrokerId("broker-1");
1:6c5732b:         brokerService.setPersistent(false);
1:6c5732b:         brokerService.setUseJmx(false);
1:6c5732b:         brokerService.start();
1:6c5732b:         brokerService.waitUntilStarted();
1:6c5732b:         remoteBrokerInfo.setBrokerId(new BrokerId("remote-broker-id"));
1:6c5732b:         remoteBrokerInfo.setBrokerName("remote-broker-name");
1:6c5732b: 
1:6c5732b:         localBroker.setTransportListener(EasyMock.isA(TransportListener.class));
1:6c5732b:         ArgHolder localListenerRef = ArgHolder.holdArgsForLastVoidCall();
1:6c5732b: 
1:6c5732b:         remoteBroker.setTransportListener(EasyMock.isA(TransportListener.class));
1:6c5732b:         ArgHolder remoteListenerRef = ArgHolder.holdArgsForLastVoidCall();
1:6c5732b:         localBroker.start();
1:6c5732b:         remoteBroker.start();
1:6c5732b: 
1:6c5732b:         remoteBroker.oneway(EasyMock.isA(Object.class));
1:6c5732b:         EasyMock.expectLastCall().times(4);
1:6c5732b:         remoteBroker.oneway(EasyMock.isA(Object.class));
1:6c5732b:         ExpectationWaiter remoteInitWaiter = ExpectationWaiter.waiterForLastVoidCall();
1:6c5732b: 
1:6c5732b:         localBroker.oneway(remoteBrokerInfo);
1:6c5732b:         EasyMock.expect(localBroker.request(EasyMock.isA(Object.class)))
1:6c5732b:                 .andReturn(null);
1:36237cb:         EasyMock.expect(remoteBroker.narrow(TcpTransport.class)).andReturn(null);
1:6c5732b:         localBroker.oneway(EasyMock.isA(Object.class));
1:6c5732b:         ExpectationWaiter localInitWaiter = ExpectationWaiter.waiterForLastVoidCall();
1:6c5732b: 
1:6c5732b:         control.replay();
1:6c5732b: 
1:6c5732b:         DurableConduitBridge bridge = new DurableConduitBridge(configuration, localBroker, remoteBroker);
1:6c5732b:         bridge.setBrokerService(brokerService);
1:6c5732b:         bridge.start();
1:6c5732b: 
1:6c5732b:         localListener = (TransportListener) localListenerRef.getArguments()[0];
1:6c5732b:         Assert.assertNotNull(localListener);
1:6c5732b:         remoteListener = (TransportListener) remoteListenerRef.getArguments()[0];
1:6c5732b:         Assert.assertNotNull(remoteListener);
1:6c5732b: 
1:6c5732b:         remoteListener.onCommand(remoteBrokerInfo);
1:6c5732b: 
1:6c5732b:         remoteInitWaiter.assertHappens(5, TimeUnit.SECONDS);
1:6c5732b:         localInitWaiter.assertHappens(5, TimeUnit.SECONDS);
1:6c5732b: 
1:6c5732b:         control.verify();
1:6c5732b:         control.reset();
1:6c5732b: 
1:6c5732b:         ActiveMQMessage msg = new ActiveMQMessage();
1:6c5732b:         msg.setDestination(new ActiveMQTopic("test"));
1:6c5732b:         msgDispatch = new MessageDispatch();
1:6c5732b:         msgDispatch.setMessage(msg);
1:bbf288b:         msgDispatch.setDestination(msg.getDestination());
1:6c5732b: 
1:6c5732b:         ConsumerInfo path1 = new ConsumerInfo();
1:6c5732b:         path1.setDestination(msg.getDestination());
1:6c5732b:         path1.setConsumerId(new ConsumerId(new SessionId(new ConnectionId("conn-id-1"), 1), 3));
1:6c5732b:         path1.setBrokerPath(new BrokerId[]{
1:6c5732b:                 new BrokerId("remote-broker-id"),
1:6c5732b:                 new BrokerId("server(1)-broker-id"),
1:6c5732b:         });
1:6c5732b:         path1Msg = new ActiveMQMessage();
1:6c5732b:         path1Msg.setDestination(AdvisorySupport.getConsumerAdvisoryTopic(path1.getDestination()));
1:6c5732b:         path1Msg.setDataStructure(path1);
1:6c5732b: 
1:6c5732b:         ConsumerInfo path2 = new ConsumerInfo();
1:6c5732b:         path2.setDestination(path1.getDestination());
1:6c5732b:         path2.setConsumerId(new ConsumerId(new SessionId(new ConnectionId("conn-id-2"), 2), 4));
1:6c5732b:         path2.setBrokerPath(new BrokerId[]{
1:6c5732b:                 new BrokerId("remote-broker-id"),
1:6c5732b:                 new BrokerId("server(2)-broker-id"),
1:6c5732b:                 new BrokerId("server(1)-broker-id"),
1:6c5732b:         });
1:6c5732b:         path2Msg = new ActiveMQMessage();
1:6c5732b:         path2Msg.setDestination(path1Msg.getDestination());
1:6c5732b:         path2Msg.setDataStructure(path2);
1:6c5732b: 
1:6c5732b:         RemoveInfo removePath1 = new RemoveInfo(path1.getConsumerId());
1:6c5732b:         RemoveInfo removePath2 = new RemoveInfo(path2.getConsumerId());
1:6c5732b: 
1:6c5732b:         removePath1Msg = new ActiveMQMessage();
1:6c5732b:         removePath1Msg.setDestination(path1Msg.getDestination());
1:6c5732b:         removePath1Msg.setDataStructure(removePath1);
1:6c5732b: 
1:6c5732b:         removePath2Msg = new ActiveMQMessage();
1:6c5732b:         removePath2Msg.setDestination(path1Msg.getDestination());
1:6c5732b:         removePath2Msg.setDataStructure(removePath2);
1:6c5732b:     }
1:6c5732b: 
1:6c5732b:     @After
1:6c5732b:     public void after() throws Exception {
1:6c5732b:         control.reset();
1:6c5732b:         brokerService.stop();
1:6c5732b:         brokerService.waitUntilStopped();
1:6c5732b:     }
1:6c5732b: 
1:6c5732b:     private static class ArgHolder {
1:6c5732b:         public Object[] arguments;
1:6c5732b: 
1:6c5732b:         public static ArgHolder holdArgsForLastVoidCall() {
1:6c5732b:             final ArgHolder holder = new ArgHolder();
1:6c5732b:             EasyMock.expectLastCall().andAnswer(new IAnswer<Object>() {
1:6c5732b:                 @Override
1:6c5732b:                 public Object answer() throws Throwable {
1:6c5732b:                     Object[] args = EasyMock.getCurrentArguments();
1:6c5732b:                     holder.arguments = Arrays.copyOf(args, args.length);
1:6c5732b:                     return null;
1:6c5732b:                 }
1:6c5732b:             });
1:6c5732b:             return holder;
1:6c5732b:         }
1:6c5732b: 
1:6c5732b:         public static ArgHolder holdArgsForLastObjectCall() {
1:6c5732b:             final ArgHolder holder = new ArgHolder();
1:6c5732b:             EasyMock.expect(new Object()).andAnswer(new IAnswer<Object>() {
1:6c5732b:                 @Override
1:6c5732b:                 public Object answer() throws Throwable {
1:6c5732b:                     Object[] args = EasyMock.getCurrentArguments();
1:6c5732b:                     holder.arguments = Arrays.copyOf(args, args.length);
1:6c5732b:                     return null;
1:6c5732b:                 }
1:6c5732b:             });
1:6c5732b:             return holder;
1:6c5732b:         }
1:6c5732b: 
1:6c5732b:         public static ArgHolder holdArgsForLastFutureRequestCall() {
1:6c5732b:             final ArgHolder holder = new ArgHolder();
1:6c5732b:             EasyMock.expect(new FutureResponse(null)).andAnswer(new IAnswer<FutureResponse>() {
1:6c5732b:                 @Override
1:6c5732b:                 public FutureResponse answer() throws Throwable {
1:6c5732b:                     Object[] args = EasyMock.getCurrentArguments();
1:6c5732b:                     holder.arguments = Arrays.copyOf(args, args.length);
1:6c5732b:                     return null;
1:6c5732b:                 }
1:6c5732b:             });
1:6c5732b: 
1:6c5732b:             return holder;
1:6c5732b:         }
1:6c5732b: 
1:6c5732b:         public Object[] getArguments() {
1:6c5732b:             Assert.assertNotNull(arguments);
1:6c5732b:             return arguments;
1:6c5732b:         }
1:6c5732b:     }
1:6c5732b: 
1:6c5732b:     private static class ExpectationWaiter {
1:6c5732b:         private CountDownLatch latch = new CountDownLatch(1);
1:6c5732b: 
1:6c5732b:         public static ExpectationWaiter waiterForLastVoidCall() {
1:6c5732b:             final ExpectationWaiter waiter = new ExpectationWaiter();
1:6c5732b:             EasyMock.expectLastCall().andAnswer(new IAnswer<Object>() {
1:6c5732b:                 @Override
1:6c5732b:                 public Object answer() throws Throwable {
1:6c5732b:                     waiter.latch.countDown();
1:6c5732b:                     return null;
1:6c5732b:                 }
1:6c5732b:             });
1:6c5732b:             return waiter;
1:6c5732b:         }
1:6c5732b: 
1:6c5732b:         public void assertHappens(long timeout, TimeUnit unit) throws InterruptedException {
1:6c5732b:             Assert.assertTrue(latch.await(timeout, unit));
1:6c5732b:         }
1:6c5732b:     }
1:6c5732b: }
============================================================================
author:gtully
-------------------------------------------------------------------------------
commit:d84a586
/////////////////////////////////////////////////////////////////////////
1:         localBroker.oneway(EasyMock.isA(ConsumerInfo.class));
/////////////////////////////////////////////////////////////////////////
1:         localBroker.oneway(EasyMock.isA(ConsumerInfo.class));
/////////////////////////////////////////////////////////////////////////
1:         localBroker.oneway(EasyMock.isA(ConsumerInfo.class));
commit:bbf288b
/////////////////////////////////////////////////////////////////////////
1:         msgDispatch.setDestination(msg.getDestination());
commit:6c5732b
/////////////////////////////////////////////////////////////////////////
1: /**
1:  * Licensed to the Apache Software Foundation (ASF) under one or more
1:  * contributor license agreements.  See the NOTICE file distributed with
1:  * this work for additional information regarding copyright ownership.
1:  * The ASF licenses this file to You under the Apache License, Version 2.0
1:  * (the "License"); you may not use this file except in compliance with
1:  * the License.  You may obtain a copy of the License at
1:  *
1:  *      http://www.apache.org/licenses/LICENSE-2.0
1:  *
1:  * Unless required by applicable law or agreed to in writing, software
1:  * distributed under the License is distributed on an "AS IS" BASIS,
1:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:  * See the License for the specific language governing permissions and
1:  * limitations under the License.
1:  */
1: package org.apache.activemq.network;
1: 
1: import java.util.Arrays;
1: import java.util.concurrent.CountDownLatch;
1: import java.util.concurrent.TimeUnit;
1: import org.apache.activemq.advisory.AdvisorySupport;
1: import org.apache.activemq.broker.BrokerService;
1: import org.apache.activemq.command.ActiveMQMessage;
1: import org.apache.activemq.command.ActiveMQTopic;
1: import org.apache.activemq.command.BrokerId;
1: import org.apache.activemq.command.BrokerInfo;
1: import org.apache.activemq.command.ConnectionId;
1: import org.apache.activemq.command.ConsumerId;
1: import org.apache.activemq.command.ConsumerInfo;
1: import org.apache.activemq.command.MessageAck;
1: import org.apache.activemq.command.MessageDispatch;
1: import org.apache.activemq.command.RemoveInfo;
1: import org.apache.activemq.command.Response;
1: import org.apache.activemq.command.SessionId;
1: import org.apache.activemq.transport.FutureResponse;
1: import org.apache.activemq.transport.ResponseCallback;
1: import org.apache.activemq.transport.Transport;
1: import org.apache.activemq.transport.TransportListener;
1: import org.easymock.EasyMock;
1: import org.easymock.IAnswer;
1: import org.easymock.IMocksControl;
1: import org.junit.After;
1: import org.junit.Assert;
1: import org.junit.Before;
1: import org.junit.Test;
1: 
1: public class NetworkRouteTest {
1:     private IMocksControl control;
1:     private BrokerService brokerService;
1:     private Transport localBroker;
1:     private Transport remoteBroker;
1:     private TransportListener localListener;
1:     private TransportListener remoteListener;
1:     private MessageDispatch msgDispatch;
1:     private ActiveMQMessage path1Msg;
1:     private ActiveMQMessage path2Msg;
1:     private ActiveMQMessage removePath1Msg;
1:     private ActiveMQMessage removePath2Msg;
1: 
1:     // this sort of mockery is very brittle but it is fast!
1: 
1:     @Test
1:     public void verifyNoRemoveOnOneConduitRemove() throws Exception {
0:         EasyMock.expect(localBroker.request(EasyMock.isA(ConsumerInfo.class))).andReturn(null);
1:         control.replay();
1: 
1:         remoteListener.onCommand(path2Msg);
1:         remoteListener.onCommand(path1Msg);
1: 
1:         remoteListener.onCommand(removePath2Msg);
1:         control.verify();
1:     }
1: 
1:     @Test
1:     public void addAndRemoveOppositeOrder() throws Exception {
1:         // from (1)
0:         localBroker.request(EasyMock.isA(ConsumerInfo.class));
1:         ArgHolder localConsumer = ArgHolder.holdArgsForLastObjectCall();
1:         // from (2a)
1:         remoteBroker.asyncRequest(EasyMock.isA(ActiveMQMessage.class), EasyMock.isA(ResponseCallback.class));
1:         ArgHolder firstMessageFuture = ArgHolder.holdArgsForLastFutureRequestCall();
1:         localBroker.oneway(EasyMock.isA(MessageAck.class));
1:         // from (2b)
1:         remoteBroker.asyncRequest(EasyMock.isA(ActiveMQMessage.class), EasyMock.isA(ResponseCallback.class));
1:         ArgHolder secondMessageFuture = ArgHolder.holdArgsForLastFutureRequestCall();
1: 
1:         localBroker.oneway(EasyMock.isA(MessageAck.class));
1:         // from (3)
1:         localBroker.oneway(EasyMock.isA(RemoveInfo.class));
1:         ExpectationWaiter waitForRemove = ExpectationWaiter.waiterForLastVoidCall();
1:         control.replay();
1: 
1:         // (1) send advisory of path 1
1:         remoteListener.onCommand(path1Msg);
1:         msgDispatch.setConsumerId(((ConsumerInfo) localConsumer.arguments[0]).getConsumerId());
1:         // send advisory of path 2, doesn't send a ConsumerInfo to localBroker
1:         remoteListener.onCommand(path2Msg);
1:         // (2a) send a message
1:         localListener.onCommand(msgDispatch);
1:         ResponseCallback callback = (ResponseCallback) firstMessageFuture.arguments[1];
1:         FutureResponse response = new FutureResponse(callback);
1:         response.set(new Response());
1: 
1:         // send advisory of path 2 remove, doesn't send a RemoveInfo to localBroker
1:         remoteListener.onCommand(removePath2Msg);
1:         // (2b) send a message
1:         localListener.onCommand(msgDispatch);
1:         callback = (ResponseCallback) secondMessageFuture.arguments[1];
1:         response = new FutureResponse(callback);
1:         response.set(new Response());
1: 
1:         // (3) send advisory of path 1 remove, sends a RemoveInfo to localBroker
1:         remoteListener.onCommand(removePath1Msg);
1:         waitForRemove.assertHappens(5, TimeUnit.SECONDS);
1:         // send a message, does not send message as in 2a and 2b
1:         localListener.onCommand(msgDispatch);
1: 
1:         control.verify();
1:     }
1: 
1:     @Test
1:     public void addAndRemoveSameOrder() throws Exception {
1:         // from (1)
0:         localBroker.request(EasyMock.isA(ConsumerInfo.class));
1:         ArgHolder localConsumer = ArgHolder.holdArgsForLastObjectCall();
1: 
1:         // from (2a)
1:         remoteBroker.asyncRequest(EasyMock.isA(ActiveMQMessage.class), EasyMock.isA(ResponseCallback.class));
1:         ArgHolder firstMessageFuture = ArgHolder.holdArgsForLastFutureRequestCall();
1: 
1:         localBroker.oneway(EasyMock.isA(MessageAck.class));
1: 
1:         // from (2b)
1:         remoteBroker.asyncRequest(EasyMock.isA(ActiveMQMessage.class), EasyMock.isA(ResponseCallback.class));
1:         ArgHolder secondMessageFuture = ArgHolder.holdArgsForLastFutureRequestCall();
1: 
1:         localBroker.oneway(EasyMock.isA(MessageAck.class));
1: 
1:         // from (3)
1:         localBroker.oneway(EasyMock.isA(RemoveInfo.class));
1:         ExpectationWaiter waitForRemove = ExpectationWaiter.waiterForLastVoidCall();
1:         control.replay();
1: 
1:         // (1) send advisory of path 1
1:         remoteListener.onCommand(path1Msg);
1:         msgDispatch.setConsumerId(((ConsumerInfo) localConsumer.arguments[0]).getConsumerId());
1:         // send advisory of path 2, doesn't send a ConsumerInfo to localBroker
1:         remoteListener.onCommand(path2Msg);
1:         // (2a) send a message
1:         localListener.onCommand(msgDispatch);
1:         ResponseCallback callback = (ResponseCallback) firstMessageFuture.arguments[1];
1:         FutureResponse response = new FutureResponse(callback);
1:         response.set(new Response());
1: 
1:         // send advisory of path 1 remove, shouldn't send a RemoveInfo to localBroker
1:         remoteListener.onCommand(removePath1Msg);
1:         // (2b) send a message, should send the message as in 2a
1:         localListener.onCommand(msgDispatch);
1:         callback = (ResponseCallback) secondMessageFuture.arguments[1];
1:         response = new FutureResponse(callback);
1:         response.set(new Response());
1: 
1:         // (3) send advisory of path 1 remove, should send a RemoveInfo to localBroker
1:         remoteListener.onCommand(removePath2Msg);
1:         waitForRemove.assertHappens(5, TimeUnit.SECONDS);
1:         // send a message, does not send message as in 2a
1:         localListener.onCommand(msgDispatch);
1: 
1:         control.verify();
1:     }
1: 
1:     @Before
1:     public void before() throws Exception {
1:         control = EasyMock.createControl();
1:         localBroker = control.createMock(Transport.class);
1:         remoteBroker = control.createMock(Transport.class);
1: 
1:         NetworkBridgeConfiguration configuration = new NetworkBridgeConfiguration();
1:         brokerService = new BrokerService();
1:         BrokerInfo remoteBrokerInfo = new BrokerInfo();
1: 
1:         configuration.setDuplex(true);
1:         configuration.setNetworkTTL(5);
1:         brokerService.setBrokerId("broker-1");
1:         brokerService.setPersistent(false);
1:         brokerService.setUseJmx(false);
1:         brokerService.start();
1:         brokerService.waitUntilStarted();
1:         remoteBrokerInfo.setBrokerId(new BrokerId("remote-broker-id"));
1:         remoteBrokerInfo.setBrokerName("remote-broker-name");
1: 
1:         localBroker.setTransportListener(EasyMock.isA(TransportListener.class));
1:         ArgHolder localListenerRef = ArgHolder.holdArgsForLastVoidCall();
1: 
1:         remoteBroker.setTransportListener(EasyMock.isA(TransportListener.class));
1:         ArgHolder remoteListenerRef = ArgHolder.holdArgsForLastVoidCall();
1:         localBroker.start();
1:         remoteBroker.start();
1: 
1:         remoteBroker.oneway(EasyMock.isA(Object.class));
1:         EasyMock.expectLastCall().times(4);
1:         remoteBroker.oneway(EasyMock.isA(Object.class));
1:         ExpectationWaiter remoteInitWaiter = ExpectationWaiter.waiterForLastVoidCall();
1: 
1:         localBroker.oneway(remoteBrokerInfo);
1:         EasyMock.expect(localBroker.request(EasyMock.isA(Object.class)))
1:                 .andReturn(null);
1:         localBroker.oneway(EasyMock.isA(Object.class));
1:         ExpectationWaiter localInitWaiter = ExpectationWaiter.waiterForLastVoidCall();
1: 
1:         control.replay();
1: 
1:         DurableConduitBridge bridge = new DurableConduitBridge(configuration, localBroker, remoteBroker);
1:         bridge.setBrokerService(brokerService);
1:         bridge.start();
1: 
1:         localListener = (TransportListener) localListenerRef.getArguments()[0];
1:         Assert.assertNotNull(localListener);
1:         remoteListener = (TransportListener) remoteListenerRef.getArguments()[0];
1:         Assert.assertNotNull(remoteListener);
1: 
1:         remoteListener.onCommand(remoteBrokerInfo);
1: 
1:         remoteInitWaiter.assertHappens(5, TimeUnit.SECONDS);
1:         localInitWaiter.assertHappens(5, TimeUnit.SECONDS);
1: 
1:         control.verify();
1:         control.reset();
1: 
1:         ActiveMQMessage msg = new ActiveMQMessage();
1:         msg.setDestination(new ActiveMQTopic("test"));
1:         msgDispatch = new MessageDispatch();
1:         msgDispatch.setMessage(msg);
1: 
1:         ConsumerInfo path1 = new ConsumerInfo();
1:         path1.setDestination(msg.getDestination());
1:         path1.setConsumerId(new ConsumerId(new SessionId(new ConnectionId("conn-id-1"), 1), 3));
1:         path1.setBrokerPath(new BrokerId[]{
1:                 new BrokerId("remote-broker-id"),
1:                 new BrokerId("server(1)-broker-id"),
1:         });
1:         path1Msg = new ActiveMQMessage();
1:         path1Msg.setDestination(AdvisorySupport.getConsumerAdvisoryTopic(path1.getDestination()));
1:         path1Msg.setDataStructure(path1);
1: 
1:         ConsumerInfo path2 = new ConsumerInfo();
1:         path2.setDestination(path1.getDestination());
1:         path2.setConsumerId(new ConsumerId(new SessionId(new ConnectionId("conn-id-2"), 2), 4));
1:         path2.setBrokerPath(new BrokerId[]{
1:                 new BrokerId("remote-broker-id"),
1:                 new BrokerId("server(2)-broker-id"),
1:                 new BrokerId("server(1)-broker-id"),
1:         });
1:         path2Msg = new ActiveMQMessage();
1:         path2Msg.setDestination(path1Msg.getDestination());
1:         path2Msg.setDataStructure(path2);
1: 
1:         RemoveInfo removePath1 = new RemoveInfo(path1.getConsumerId());
1:         RemoveInfo removePath2 = new RemoveInfo(path2.getConsumerId());
1: 
1:         removePath1Msg = new ActiveMQMessage();
1:         removePath1Msg.setDestination(path1Msg.getDestination());
1:         removePath1Msg.setDataStructure(removePath1);
1: 
1:         removePath2Msg = new ActiveMQMessage();
1:         removePath2Msg.setDestination(path1Msg.getDestination());
1:         removePath2Msg.setDataStructure(removePath2);
1:     }
1: 
1:     @After
1:     public void after() throws Exception {
1:         control.reset();
1:         brokerService.stop();
1:         brokerService.waitUntilStopped();
1:     }
1: 
1:     private static class ArgHolder {
1:         public Object[] arguments;
1: 
1:         public static ArgHolder holdArgsForLastVoidCall() {
1:             final ArgHolder holder = new ArgHolder();
1:             EasyMock.expectLastCall().andAnswer(new IAnswer<Object>() {
1:                 @Override
1:                 public Object answer() throws Throwable {
1:                     Object[] args = EasyMock.getCurrentArguments();
1:                     holder.arguments = Arrays.copyOf(args, args.length);
1:                     return null;
1:                 }
1:             });
1:             return holder;
1:         }
1: 
1:         public static ArgHolder holdArgsForLastObjectCall() {
1:             final ArgHolder holder = new ArgHolder();
1:             EasyMock.expect(new Object()).andAnswer(new IAnswer<Object>() {
1:                 @Override
1:                 public Object answer() throws Throwable {
1:                     Object[] args = EasyMock.getCurrentArguments();
1:                     holder.arguments = Arrays.copyOf(args, args.length);
1:                     return null;
1:                 }
1:             });
1:             return holder;
1:         }
1: 
1:         public static ArgHolder holdArgsForLastFutureRequestCall() {
1:             final ArgHolder holder = new ArgHolder();
1:             EasyMock.expect(new FutureResponse(null)).andAnswer(new IAnswer<FutureResponse>() {
1:                 @Override
1:                 public FutureResponse answer() throws Throwable {
1:                     Object[] args = EasyMock.getCurrentArguments();
1:                     holder.arguments = Arrays.copyOf(args, args.length);
1:                     return null;
1:                 }
1:             });
1: 
1:             return holder;
1:         }
1: 
1:         public Object[] getArguments() {
1:             Assert.assertNotNull(arguments);
1:             return arguments;
1:         }
1:     }
1: 
1:     private static class ExpectationWaiter {
1:         private CountDownLatch latch = new CountDownLatch(1);
1: 
1:         public static ExpectationWaiter waiterForLastVoidCall() {
1:             final ExpectationWaiter waiter = new ExpectationWaiter();
1:             EasyMock.expectLastCall().andAnswer(new IAnswer<Object>() {
1:                 @Override
1:                 public Object answer() throws Throwable {
1:                     waiter.latch.countDown();
1:                     return null;
1:                 }
1:             });
1:             return waiter;
1:         }
1: 
1:         public void assertHappens(long timeout, TimeUnit unit) throws InterruptedException {
1:             Assert.assertTrue(latch.await(timeout, unit));
1:         }
1:     }
1: }
author:Dejan Bosanac
-------------------------------------------------------------------------------
commit:36237cb
/////////////////////////////////////////////////////////////////////////
1: import org.apache.activemq.transport.tcp.TcpTransport;
/////////////////////////////////////////////////////////////////////////
1:         EasyMock.expect(remoteBroker.narrow(TcpTransport.class)).andReturn(null);
============================================================================