1:8e83b7f: /**
1:8e83b7f:  * Licensed to the Apache Software Foundation (ASF) under one or more
1:8e83b7f:  * contributor license agreements.  See the NOTICE file distributed with
1:8e83b7f:  * this work for additional information regarding copyright ownership.
1:8e83b7f:  * The ASF licenses this file to You under the Apache License, Version 2.0
1:8e83b7f:  * (the "License"); you may not use this file except in compliance with
1:8e83b7f:  * the License.  You may obtain a copy of the License at
1:8e83b7f:  *
1:8e83b7f:  *      http://www.apache.org/licenses/LICENSE-2.0
1:8e83b7f:  *
1:8e83b7f:  * Unless required by applicable law or agreed to in writing, software
1:8e83b7f:  * distributed under the License is distributed on an "AS IS" BASIS,
1:8e83b7f:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:8e83b7f:  * See the License for the specific language governing permissions and
1:8e83b7f:  * limitations under the License.
1:8e83b7f:  */
1:8e83b7f: 
1:8e83b7f: package org.apache.activemq.spring;
1:8e83b7f: 
1:8bf987b: import org.slf4j.Logger;
1:8bf987b: import org.slf4j.LoggerFactory;
1:8e83b7f: import org.junit.Assert;
1:8e83b7f: import org.junit.Test;
1:8e83b7f: import org.junit.runner.RunWith;
1:8e83b7f: import org.springframework.jms.core.JmsTemplate;
1:8e83b7f: import org.springframework.jms.core.MessageCreator;
1:8e83b7f: import org.springframework.test.annotation.DirtiesContext;
1:8e83b7f: import org.springframework.test.context.ContextConfiguration;
1:8e83b7f: import org.springframework.test.context.junit4.SpringJUnit4ClassRunner;
1:8e83b7f: import org.springframework.test.context.transaction.TransactionConfiguration;
1:8e83b7f: import org.springframework.transaction.PlatformTransactionManager;
1:8e83b7f: import org.springframework.transaction.TransactionException;
1:8e83b7f: import org.springframework.transaction.TransactionStatus;
1:8e83b7f: import org.springframework.transaction.support.TransactionCallbackWithoutResult;
1:8e83b7f: import org.springframework.transaction.support.TransactionTemplate;
1:8e83b7f: 
1:8e83b7f: import javax.annotation.Resource;
1:8e83b7f: import javax.jms.JMSException;
1:8e83b7f: import javax.jms.Message;
1:8e83b7f: import javax.jms.Session;
1:8e83b7f: import java.util.Arrays;
1:8e83b7f: 
1:8e83b7f: @RunWith(SpringJUnit4ClassRunner.class)
1:8e83b7f: 
1:8e83b7f: @ContextConfiguration(locations = {"classpath:spring/xa.xml"})
1:8e83b7f: @TransactionConfiguration(transactionManager = "transactionManager", defaultRollback = false)
1:8e83b7f: public class ParallelXATransactionTest {
1:8e83b7f: 
1:8bf987b:     private static final Logger LOG = LoggerFactory.getLogger(ParallelXATransactionTest.class);
1:8e83b7f: 
1:8e83b7f:     @Resource(name = "transactionManager")
1:8e83b7f:     PlatformTransactionManager txManager = null;
1:8e83b7f: 
1:8e83b7f:     @Resource(name = "transactionManager2")
1:8e83b7f:     PlatformTransactionManager txManager2 = null;
1:8e83b7f: 
1:8e83b7f: 
1:8e83b7f:     @Resource(name = "jmsTemplate")
1:8e83b7f:     JmsTemplate jmsTemplate = null;
1:8e83b7f: 
1:8e83b7f:     @Resource(name = "jmsTemplate2")
1:8e83b7f:     JmsTemplate jmsTemplate2 = null;
1:8e83b7f: 
1:8e83b7f: 
1:8e83b7f:     public static final int NB_MSG = 100;
1:8e83b7f:     public static final String BODY = Arrays.toString(new int[1024]);
1:8e83b7f:     private static final String[] QUEUES = {"TEST.queue1", "TEST.queue2", "TEST.queue3", "TEST.queue4", "TEST.queue5"};
1:8e83b7f:     private static final String AUDIT = "TEST.audit";
1:8e83b7f:     public static final int SLEEP = 500;
1:8e83b7f: 
1:8e83b7f:     @Test
1:8e83b7f:     @DirtiesContext
1:8e83b7f:     public void testParalellXaTx() throws Exception {
1:8e83b7f: 
1:8e83b7f: 
1:8e83b7f:         class ProducerThread extends Thread {
1:8e83b7f: 
1:8e83b7f:             PlatformTransactionManager txManager;
1:8e83b7f:             JmsTemplate jmsTemplate;
1:8e83b7f:             Exception lastException;
1:8e83b7f: 
1:8e83b7f: 
1:8e83b7f:             public ProducerThread(JmsTemplate jmsTemplate, PlatformTransactionManager txManager) {
1:8e83b7f:                this.jmsTemplate = jmsTemplate;
1:8e83b7f:                this.txManager = txManager;
1:8e83b7f:             }
1:8e83b7f: 
1:8e83b7f:             public void run() {
1:8e83b7f:                 int i = 0;
1:8e83b7f:                 while (i++ < 10) {
1:8e83b7f: 
1:8e83b7f:                     try {
1:8e83b7f:                         Thread.sleep((long) (Math.random() * SLEEP));
1:8e83b7f:                     } catch (InterruptedException e) {
1:8e83b7f:                         e.printStackTrace();
1:8e83b7f:                     }
1:8e83b7f:                     TransactionTemplate tt = new TransactionTemplate(this.txManager);
1:8e83b7f: 
1:8e83b7f: 
1:8e83b7f:                     try {
1:8e83b7f:                         tt.execute(new TransactionCallbackWithoutResult() {
1:8e83b7f:                             @Override
1:8e83b7f:                             protected void doInTransactionWithoutResult(TransactionStatus status) {
1:8e83b7f:                                 try {
1:8e83b7f: 
1:8e83b7f:                                     for (final String queue : QUEUES) {
1:8e83b7f:                                         jmsTemplate.send(queue + "," + AUDIT, new MessageCreator() {
1:8e83b7f:                                             public Message createMessage(Session session) throws JMSException {
1:8e83b7f:                                                 return session.createTextMessage("P1: " + queue + " - " + BODY);
1:8e83b7f:                                             }
1:8e83b7f:                                         });
1:8e83b7f:                                         Thread.sleep((long) (Math.random() * SLEEP));
1:8e83b7f:                                         LOG.info("P1: Send msg to " + queue + "," + AUDIT);
1:8e83b7f:                                     }
1:8e83b7f: 
1:8e83b7f:                                 } catch (Exception e) {
1:8e83b7f:                                     Assert.fail("Exception occurred " + e);
1:8e83b7f:                                 }
1:8e83b7f: 
1:8e83b7f: 
1:8e83b7f:                             }
1:8e83b7f:                         });
1:8e83b7f:                     } catch (TransactionException e) {
1:8e83b7f:                         lastException = e;
1:8e83b7f:                         break;
1:8e83b7f:                     }
1:8e83b7f: 
1:8e83b7f:                 }
1:8e83b7f:             }
1:8e83b7f: 
1:8e83b7f:             public Exception getLastException() {
1:8e83b7f:                 return lastException;
1:8e83b7f:             }
1:8e83b7f:         }
1:8e83b7f: 
1:8e83b7f: 
1:8e83b7f:         ProducerThread t1 = new ProducerThread(jmsTemplate, txManager);
1:8e83b7f:         ProducerThread t2 = new ProducerThread(jmsTemplate2, txManager2);
1:8e83b7f: 
1:8e83b7f:         t1.start();
1:8e83b7f:         t2.start();
1:8e83b7f: 
1:8e83b7f:         t1.join();
1:8e83b7f:         t2.join();
1:8e83b7f: 
1:8e83b7f:         if (t1.getLastException() != null) {
1:8e83b7f:             Assert.fail("Exception occurred " + t1.getLastException());
1:8e83b7f:         }
1:8e83b7f: 
1:8e83b7f:         if (t2.getLastException() != null) {
1:8e83b7f:             Assert.fail("Exception occurred " + t2.getLastException());
1:8e83b7f:         }
1:8e83b7f: 
1:8e83b7f:     }
1:8e83b7f: 
1:8e83b7f: }
============================================================================
author:Bosanac Dejan
-------------------------------------------------------------------------------
commit:8bf987b
/////////////////////////////////////////////////////////////////////////
1: import org.slf4j.Logger;
1: import org.slf4j.LoggerFactory;
/////////////////////////////////////////////////////////////////////////
1:     private static final Logger LOG = LoggerFactory.getLogger(ParallelXATransactionTest.class);
commit:8e83b7f
/////////////////////////////////////////////////////////////////////////
1: /**
1:  * Licensed to the Apache Software Foundation (ASF) under one or more
1:  * contributor license agreements.  See the NOTICE file distributed with
1:  * this work for additional information regarding copyright ownership.
1:  * The ASF licenses this file to You under the Apache License, Version 2.0
1:  * (the "License"); you may not use this file except in compliance with
1:  * the License.  You may obtain a copy of the License at
1:  *
1:  *      http://www.apache.org/licenses/LICENSE-2.0
1:  *
1:  * Unless required by applicable law or agreed to in writing, software
1:  * distributed under the License is distributed on an "AS IS" BASIS,
1:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:  * See the License for the specific language governing permissions and
1:  * limitations under the License.
1:  */
1: 
1: package org.apache.activemq.spring;
1: 
0: import org.apache.commons.logging.Log;
0: import org.apache.commons.logging.LogFactory;
1: import org.junit.Assert;
1: import org.junit.Test;
1: import org.junit.runner.RunWith;
1: import org.springframework.jms.core.JmsTemplate;
1: import org.springframework.jms.core.MessageCreator;
1: import org.springframework.test.annotation.DirtiesContext;
1: import org.springframework.test.context.ContextConfiguration;
1: import org.springframework.test.context.junit4.SpringJUnit4ClassRunner;
1: import org.springframework.test.context.transaction.TransactionConfiguration;
1: import org.springframework.transaction.PlatformTransactionManager;
1: import org.springframework.transaction.TransactionException;
1: import org.springframework.transaction.TransactionStatus;
1: import org.springframework.transaction.support.TransactionCallbackWithoutResult;
1: import org.springframework.transaction.support.TransactionTemplate;
1: 
1: import javax.annotation.Resource;
1: import javax.jms.JMSException;
1: import javax.jms.Message;
1: import javax.jms.Session;
1: import java.util.Arrays;
1: 
1: @RunWith(SpringJUnit4ClassRunner.class)
1: 
1: @ContextConfiguration(locations = {"classpath:spring/xa.xml"})
1: @TransactionConfiguration(transactionManager = "transactionManager", defaultRollback = false)
1: public class ParallelXATransactionTest {
1: 
0:     private static final Log LOG = LogFactory.getLog(ParallelXATransactionTest.class);
1: 
1:     @Resource(name = "transactionManager")
1:     PlatformTransactionManager txManager = null;
1: 
1:     @Resource(name = "transactionManager2")
1:     PlatformTransactionManager txManager2 = null;
1: 
1: 
1:     @Resource(name = "jmsTemplate")
1:     JmsTemplate jmsTemplate = null;
1: 
1:     @Resource(name = "jmsTemplate2")
1:     JmsTemplate jmsTemplate2 = null;
1: 
1: 
1:     public static final int NB_MSG = 100;
1:     public static final String BODY = Arrays.toString(new int[1024]);
1:     private static final String[] QUEUES = {"TEST.queue1", "TEST.queue2", "TEST.queue3", "TEST.queue4", "TEST.queue5"};
1:     private static final String AUDIT = "TEST.audit";
1:     public static final int SLEEP = 500;
1: 
1:     @Test
1:     @DirtiesContext
1:     public void testParalellXaTx() throws Exception {
1: 
1: 
1:         class ProducerThread extends Thread {
1: 
1:             PlatformTransactionManager txManager;
1:             JmsTemplate jmsTemplate;
1:             Exception lastException;
1: 
1: 
1:             public ProducerThread(JmsTemplate jmsTemplate, PlatformTransactionManager txManager) {
1:                this.jmsTemplate = jmsTemplate;
1:                this.txManager = txManager;
1:             }
1: 
1:             public void run() {
1:                 int i = 0;
1:                 while (i++ < 10) {
1: 
1:                     try {
1:                         Thread.sleep((long) (Math.random() * SLEEP));
1:                     } catch (InterruptedException e) {
1:                         e.printStackTrace();
1:                     }
1:                     TransactionTemplate tt = new TransactionTemplate(this.txManager);
1: 
1: 
1:                     try {
1:                         tt.execute(new TransactionCallbackWithoutResult() {
1:                             @Override
1:                             protected void doInTransactionWithoutResult(TransactionStatus status) {
1:                                 try {
1: 
1:                                     for (final String queue : QUEUES) {
1:                                         jmsTemplate.send(queue + "," + AUDIT, new MessageCreator() {
1:                                             public Message createMessage(Session session) throws JMSException {
1:                                                 return session.createTextMessage("P1: " + queue + " - " + BODY);
1:                                             }
1:                                         });
1:                                         Thread.sleep((long) (Math.random() * SLEEP));
1:                                         LOG.info("P1: Send msg to " + queue + "," + AUDIT);
1:                                     }
1: 
1:                                 } catch (Exception e) {
1:                                     Assert.fail("Exception occurred " + e);
1:                                 }
1: 
1: 
1:                             }
1:                         });
1:                     } catch (TransactionException e) {
1:                         lastException = e;
1:                         break;
1:                     }
1: 
1:                 }
1:             }
1: 
1:             public Exception getLastException() {
1:                 return lastException;
1:             }
1:         }
1: 
1: 
1:         ProducerThread t1 = new ProducerThread(jmsTemplate, txManager);
1:         ProducerThread t2 = new ProducerThread(jmsTemplate2, txManager2);
1: 
1:         t1.start();
1:         t2.start();
1: 
1:         t1.join();
1:         t2.join();
1: 
1:         if (t1.getLastException() != null) {
1:             Assert.fail("Exception occurred " + t1.getLastException());
1:         }
1: 
1:         if (t2.getLastException() != null) {
1:             Assert.fail("Exception occurred " + t2.getLastException());
1:         }
1: 
1:     }
1: 
1: }
============================================================================