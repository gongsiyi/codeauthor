1:3601e81: /**
1:7f883f6:  * Licensed to the Apache Software Foundation (ASF) under one or more
1:7f883f6:  * contributor license agreements.  See the NOTICE file distributed with
1:7f883f6:  * this work for additional information regarding copyright ownership.
1:7f883f6:  * The ASF licenses this file to You under the Apache License, Version 2.0
1:7f883f6:  * (the "License"); you may not use this file except in compliance with
1:7f883f6:  * the License.  You may obtain a copy of the License at
1:7f883f6:  *
1:230a86c:  *      http://www.apache.org/licenses/LICENSE-2.0
1:7f883f6:  *
1:7f883f6:  * Unless required by applicable law or agreed to in writing, software
1:7f883f6:  * distributed under the License is distributed on an "AS IS" BASIS,
1:7f883f6:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:7f883f6:  * See the License for the specific language governing permissions and
1:7f883f6:  * limitations under the License.
1:3601e81:  */
1:3601e81: package org.apache.activemq.broker.jmx;
3:4dde323: 
1:3601e81: import javax.management.openmbean.CompositeData;
1:3601e81: import javax.management.openmbean.OpenDataException;
1:3601e81: import javax.management.openmbean.TabularData;
1:4dde323: 
1:e06685f: import org.apache.activemq.broker.BrokerService;
1:857cc8c: import org.apache.activemq.broker.ConnectionContext;
1:4dde323: import org.apache.activemq.broker.region.DurableTopicSubscription;
1:3601e81: import org.apache.activemq.broker.region.Subscription;
1:857cc8c: import org.apache.activemq.command.RemoveSubscriptionInfo;
1:230a86c: 
1:3601e81: /**
1:b0c2a40:  *
1:3601e81:  */
1:230a86c: public class DurableSubscriptionView extends SubscriptionView implements DurableSubscriptionViewMBean {
1:230a86c: 
1:c717221:     protected ManagedRegionBroker broker;
1:e06685f:     protected BrokerService brokerService;
1:3601e81:     protected String subscriptionName;
1:4dde323:     protected DurableTopicSubscription durableSub;
1:230a86c: 
1:c82f6f3:     /**
1:c82f6f3:      * Constructor
1:230a86c:      *
1:c82f6f3:      * @param clientId
1:c82f6f3:      * @param sub
1:c82f6f3:      */
1:e06685f:     public DurableSubscriptionView(ManagedRegionBroker broker, BrokerService brokerService, String clientId, String userName, Subscription sub) {
1:f5dcc9d:         super(clientId, userName, sub);
1:c717221:         this.broker = broker;
1:e06685f:         this.brokerService = brokerService;
1:4dde323:         this.durableSub=(DurableTopicSubscription) sub;
1:b52624e:         if (sub != null) {
1:333158a:             this.subscriptionName = sub.getConsumerInfo().getSubscriptionName();
1:b52624e:         }
1:86cbdfd:     }
1:230a86c: 
1:3601e81:     /**
1:3601e81:      * @return name of the durable consumer
1:3601e81:      */
1:230a86c:     public String getSubscriptionName() {
1:3601e81:         return subscriptionName;
1:3601e81:     }
1:f5dcc9d: 
1:3601e81:     /**
1:3601e81:      * Browse messages for this durable subscriber
1:7f883f6:      *
1:3601e81:      * @return messages
1:3601e81:      * @throws OpenDataException
1:3601e81:      */
1:230a86c:     public CompositeData[] browse() throws OpenDataException {
1:c717221:         return broker.browse(this);
1:3601e81:     }
1:f5dcc9d: 
1:3601e81:     /**
1:3601e81:      * Browse messages for this durable subscriber
1:f5dcc9d:      *
1:3601e81:      * @return messages
1:3601e81:      * @throws OpenDataException
1:3601e81:      */
1:230a86c:     public TabularData browseAsTable() throws OpenDataException {
1:c717221:         return broker.browseAsTable(this);
1:c717221:     }
1:230a86c: 
1:857cc8c:     /**
1:230a86c:      * Destroys the durable subscription so that messages will no longer be
1:230a86c:      * stored for this subscription
1:857cc8c:      */
1:857cc8c:     public void destroy() throws Exception {
1:857cc8c:         RemoveSubscriptionInfo info = new RemoveSubscriptionInfo();
1:857cc8c:         info.setClientId(clientId);
1:933eb2f:         info.setSubscriptionName(subscriptionName);
1:857cc8c:         ConnectionContext context = new ConnectionContext();
1:857cc8c:         context.setBroker(broker);
1:857cc8c:         context.setClientId(clientId);
1:e06685f:         brokerService.getBroker().removeSubscription(context, info);
1:3601e81:     }
1:230a86c: 
1:230a86c:     public String toString() {
1:4dde323:         return "ActiveDurableSubscriptionView: " + getClientId() + ":" + getSubscriptionName();
1:4dde323:     }
1:f5dcc9d: 
1:4dde323: 
1:4dde323:     public int cursorSize() {
1:4dde323:         if (durableSub != null && durableSub.getPending() != null) {
1:4dde323:             return durableSub.getPending().size();
1:4dde323:         }
1:4dde323:         return 0;
1:4dde323:     }
1:f5dcc9d: 
1:11579bb:     @Override
1:11579bb:     public void removeMessage(@MBeanInfo("messageId") String messageId) throws Exception {
1:11579bb:         throw new IllegalStateException("Subscription must be inactive");
1:11579bb:     }
1:f5dcc9d: 
1:4dde323:     public boolean doesCursorHaveMessagesBuffered() {
1:4dde323:         if (durableSub != null && durableSub.getPending() != null) {
1:4dde323:             return durableSub.getPending().hasMessagesBufferedToDeliver();
1:4dde323:         }
1:4dde323:         return false;
1:4dde323:     }
1:370d56e: 
1:f5dcc9d: 
1:4dde323:     public boolean doesCursorHaveSpace() {
1:4dde323:         if (durableSub != null && durableSub.getPending() != null) {
1:4dde323:             return durableSub.getPending().hasSpace();
1:4dde323:         }
1:4dde323:         return false;
1:4dde323:     }
1:4dde323: 
1:4dde323:     /* (non-Javadoc)
1:4dde323:      * @see org.apache.activemq.broker.jmx.DurableSubscriptionViewMBean#getCursorMemoryUsage()
1:4dde323:      */
1:4dde323:     public long getCursorMemoryUsage() {
1:4dde323:         if (durableSub != null && durableSub.getPending() != null && durableSub.getPending().getSystemUsage()!=null) {
1:4dde323:             return durableSub.getPending().getSystemUsage().getMemoryUsage().getUsage();
1:4dde323:         }
1:4dde323:         return 0;
1:4dde323:     }
1:4dde323: 
1:4dde323: 
1:4dde323:     public int getCursorPercentUsage() {
1:4dde323:         if (durableSub != null && durableSub.getPending() != null && durableSub.getPending().getSystemUsage()!=null) {
1:4dde323:             return durableSub.getPending().getSystemUsage().getMemoryUsage().getPercentUsage();
1:4dde323:         }
1:4dde323:         return 0;
1:4dde323:     }
1:4dde323: 
1:4dde323:     public boolean isCursorFull() {
1:4dde323:         if (durableSub != null && durableSub.getPending() != null) {
1:4dde323:             return durableSub.getPending().isFull();
1:4dde323:         }
1:4dde323:         return false;
1:3601e81:     }
1:4dde323: 
1:370d56e:     @Override
1:370d56e:     public boolean isActive() {
1:370d56e:         return durableSub.isActive();
1:370d56e:     }
1:370d56e: 
1:370d56e: 
1:3601e81: }
============================================================================
author:Hadrian Zbarcea
-------------------------------------------------------------------------------
commit:d54d046
author:gtully
-------------------------------------------------------------------------------
commit:11579bb
/////////////////////////////////////////////////////////////////////////
1:     @Override
1:     public void removeMessage(@MBeanInfo("messageId") String messageId) throws Exception {
1:         throw new IllegalStateException("Subscription must be inactive");
1:     }
author:Bosanac Dejan
-------------------------------------------------------------------------------
commit:e06685f
/////////////////////////////////////////////////////////////////////////
1: import org.apache.activemq.broker.BrokerService;
/////////////////////////////////////////////////////////////////////////
1:     protected BrokerService brokerService;
/////////////////////////////////////////////////////////////////////////
1:     public DurableSubscriptionView(ManagedRegionBroker broker, BrokerService brokerService, String clientId, String userName, Subscription sub) {
1:         this.brokerService = brokerService;
/////////////////////////////////////////////////////////////////////////
1:         brokerService.getBroker().removeSubscription(context, info);
commit:370d56e
/////////////////////////////////////////////////////////////////////////
1: 
1:     @Override
1:     public boolean isActive() {
1:         return durableSub.isActive();
1:     }
1:     
1:     
author:Hiram R. Chirino
-------------------------------------------------------------------------------
commit:58aca86
commit:b0c2a40
/////////////////////////////////////////////////////////////////////////
1:  * 
commit:933eb2f
/////////////////////////////////////////////////////////////////////////
1:         info.setSubscriptionName(subscriptionName);
commit:230a86c
/////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////
1:  *      http://www.apache.org/licenses/LICENSE-2.0
/////////////////////////////////////////////////////////////////////////
1: 
1: public class DurableSubscriptionView extends SubscriptionView implements DurableSubscriptionViewMBean {
1: 
1: 
1:      * 
0:     public DurableSubscriptionView(ManagedRegionBroker broker, String clientId, Subscription sub) {
0:         super(clientId, sub);
1: 
1:     public String getSubscriptionName() {
/////////////////////////////////////////////////////////////////////////
1:     public CompositeData[] browse() throws OpenDataException {
/////////////////////////////////////////////////////////////////////////
1:     public TabularData browseAsTable() throws OpenDataException {
1: 
1:      * Destroys the durable subscription so that messages will no longer be
1:      * stored for this subscription
/////////////////////////////////////////////////////////////////////////
1: 
1:     public String toString() {
0:         return "InactiveDurableSubscriptionView: " + getClientId() + ":" + getSubscriptionName();
commit:86cbdfd
/////////////////////////////////////////////////////////////////////////
1: }
commit:333158a
/////////////////////////////////////////////////////////////////////////
1:         this.subscriptionName = sub.getConsumerInfo().getSubscriptionName();
commit:7f883f6
/////////////////////////////////////////////////////////////////////////
1:  *
1:  * Licensed to the Apache Software Foundation (ASF) under one or more
1:  * contributor license agreements.  See the NOTICE file distributed with
1:  * this work for additional information regarding copyright ownership.
1:  * The ASF licenses this file to You under the Apache License, Version 2.0
1:  * (the "License"); you may not use this file except in compliance with
1:  * the License.  You may obtain a copy of the License at
1:  *
1:  *
1:  * Unless required by applicable law or agreed to in writing, software
1:  * distributed under the License is distributed on an "AS IS" BASIS,
1:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:  * See the License for the specific language governing permissions and
1:  * limitations under the License.
author:Timothy A. Bish
-------------------------------------------------------------------------------
commit:f5dcc9d
/////////////////////////////////////////////////////////////////////////
1:  *
/////////////////////////////////////////////////////////////////////////
0:      *
0:     public DurableSubscriptionView(ManagedRegionBroker broker, String clientId, String userName, Subscription sub) {
1:         super(clientId, userName, sub);
/////////////////////////////////////////////////////////////////////////
0:      *
/////////////////////////////////////////////////////////////////////////
0:      *
/////////////////////////////////////////////////////////////////////////
1: 
/////////////////////////////////////////////////////////////////////////
1: 
/////////////////////////////////////////////////////////////////////////
1: 
/////////////////////////////////////////////////////////////////////////
1: 
/////////////////////////////////////////////////////////////////////////
1: 
1: 
author:Robert Davies
-------------------------------------------------------------------------------
commit:b52624e
/////////////////////////////////////////////////////////////////////////
1:         if (sub != null) {
0:             this.subscriptionName = sub.getConsumerInfo().getSubscriptionName();
1:         }
commit:4dde323
/////////////////////////////////////////////////////////////////////////
1: import org.apache.activemq.broker.region.DurableTopicSubscription;
/////////////////////////////////////////////////////////////////////////
1:     protected DurableTopicSubscription durableSub;
/////////////////////////////////////////////////////////////////////////
1:         this.durableSub=(DurableTopicSubscription) sub;
/////////////////////////////////////////////////////////////////////////
1:         return "ActiveDurableSubscriptionView: " + getClientId() + ":" + getSubscriptionName();
1:     }
1: 
1:     
1:     public int cursorSize() {
1:         if (durableSub != null && durableSub.getPending() != null) {
1:             return durableSub.getPending().size();
1:         }
1:         return 0;
1:     }
1: 
1:    
1:     public boolean doesCursorHaveMessagesBuffered() {
1:         if (durableSub != null && durableSub.getPending() != null) {
1:             return durableSub.getPending().hasMessagesBufferedToDeliver();
1:         }
1:         return false;
1:     }
1: 
1:    
1:     public boolean doesCursorHaveSpace() {
1:         if (durableSub != null && durableSub.getPending() != null) {
1:             return durableSub.getPending().hasSpace();
1:         }
1:         return false;
1:     }
1: 
1:     /* (non-Javadoc)
1:      * @see org.apache.activemq.broker.jmx.DurableSubscriptionViewMBean#getCursorMemoryUsage()
1:      */
1:     public long getCursorMemoryUsage() {
1:         if (durableSub != null && durableSub.getPending() != null && durableSub.getPending().getSystemUsage()!=null) {
1:             return durableSub.getPending().getSystemUsage().getMemoryUsage().getUsage();
1:         }
1:         return 0;
1:     }
1: 
1:     
1:     public int getCursorPercentUsage() {
1:         if (durableSub != null && durableSub.getPending() != null && durableSub.getPending().getSystemUsage()!=null) {
1:             return durableSub.getPending().getSystemUsage().getMemoryUsage().getPercentUsage();
1:         }
1:         return 0;
1:     }
1: 
1:     public boolean isCursorFull() {
1:         if (durableSub != null && durableSub.getPending() != null) {
1:             return durableSub.getPending().isFull();
1:         }
1:         return false;
commit:c717221
/////////////////////////////////////////////////////////////////////////
1:     protected ManagedRegionBroker broker;
0:     public DurableSubscriptionView(ManagedRegionBroker broker,String clientId,Subscription sub){
1:         this.broker = broker;
/////////////////////////////////////////////////////////////////////////
1:         return broker.browse(this);
/////////////////////////////////////////////////////////////////////////
1:         return broker.browseAsTable(this);
1:     }
0:     
0:     public String toString(){
0:         return "InactiveDurableSubscriptionView: " + getClientId()  + ":" +  getSubscriptionName();
commit:c82f6f3
/////////////////////////////////////////////////////////////////////////
1:     /**
1:      * Constructor
1:      * @param clientId
1:      * @param sub
1:      */
0:     public DurableSubscriptionView(String clientId,Subscription sub){
0:         super(clientId,sub);
0:     
commit:3601e81
/////////////////////////////////////////////////////////////////////////
1: /**
0:  * 
0:  * Copyright 2005-2006 The Apache Software Foundation
0:  * 
0:  * Licensed under the Apache License, Version 2.0 (the "License"); you may not use this file except in compliance with
0:  * the License. You may obtain a copy of the License at
0:  * 
0:  * http://www.apache.org/licenses/LICENSE-2.0
0:  * 
0:  * Unless required by applicable law or agreed to in writing, software distributed under the License is distributed on
0:  * an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the License for the
0:  * specific language governing permissions and limitations under the License.
1:  */
1: package org.apache.activemq.broker.jmx;
0: 
1: import javax.management.openmbean.CompositeData;
1: import javax.management.openmbean.OpenDataException;
1: import javax.management.openmbean.TabularData;
1: import org.apache.activemq.broker.region.Subscription;
1: /**
0:  * @version $Revision: 1.5 $
1:  */
0: public class DurableSubscriptionView extends SubscriptionView implements  DurableSubscriptionViewMBean {
0:     
1:     protected String subscriptionName;
0:     public DurableSubscriptionView(Subscription sub){
0:         super(sub);
0:         this.subscriptionName = sub.getConsumerInfo().getSubcriptionName();
1:     }
1:     /**
1:      * @return name of the durable consumer
1:      */
0:     public String getSubscriptionName(){
1:         return subscriptionName;
1:     }
0: 
1:     /**
1:      * Browse messages for this durable subscriber
0:      * 
1:      * @return messages
1:      * @throws OpenDataException
1:      */
0:     public CompositeData[] browse() throws OpenDataException{
0:         return null;
1:     }
0: 
1:     /**
1:      * Browse messages for this durable subscriber
0:      * 
1:      * @return messages
1:      * @throws OpenDataException
1:      */
0:     public TabularData browseAsTable() throws OpenDataException{
0:         return null;
1:     }
1: }
author:James Strachan
-------------------------------------------------------------------------------
commit:857cc8c
/////////////////////////////////////////////////////////////////////////
0: 
1: import org.apache.activemq.broker.ConnectionContext;
1: import org.apache.activemq.command.RemoveSubscriptionInfo;
/////////////////////////////////////////////////////////////////////////
1:     /**
0:      * Destroys the durable subscription so that messages will no longer be stored for this subscription
1:      */
1:     public void destroy() throws Exception {
1:         RemoveSubscriptionInfo info = new RemoveSubscriptionInfo();
1:         info.setClientId(clientId);
0:         info.setSubcriptionName(subscriptionName);
1:         ConnectionContext context = new ConnectionContext();
1:         context.setBroker(broker);
1:         context.setClientId(clientId);
0:         broker.removeSubscription(context, info);
0:     }
0:     
============================================================================