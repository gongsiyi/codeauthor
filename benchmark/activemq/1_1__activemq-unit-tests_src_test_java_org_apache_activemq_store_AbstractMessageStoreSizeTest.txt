1:785b16b: /**
1:785b16b:  * Licensed to the Apache Software Foundation (ASF) under one or more
1:785b16b:  * contributor license agreements.  See the NOTICE file distributed with
1:785b16b:  * this work for additional information regarding copyright ownership.
1:785b16b:  * The ASF licenses this file to You under the Apache License, Version 2.0
1:785b16b:  * (the "License"); you may not use this file except in compliance with
1:785b16b:  * the License.  You may obtain a copy of the License at
1:785b16b:  *
1:785b16b:  *      http://www.apache.org/licenses/LICENSE-2.0
1:785b16b:  *
1:785b16b:  * Unless required by applicable law or agreed to in writing, software
1:785b16b:  * distributed under the License is distributed on an "AS IS" BASIS,
1:785b16b:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:785b16b:  * See the License for the specific language governing permissions and
1:785b16b:  * limitations under the License.
1:785b16b:  */
1:785b16b: package org.apache.activemq.store;
1:785b16b: 
1:785b16b: import static org.junit.Assert.assertTrue;
1:785b16b: 
1:785b16b: import java.util.Random;
1:785b16b: 
1:785b16b: import org.apache.activemq.broker.ConnectionContext;
1:785b16b: import org.apache.activemq.command.ActiveMQMessage;
1:785b16b: import org.apache.activemq.command.ActiveMQQueue;
1:785b16b: import org.apache.activemq.command.MessageId;
1:785b16b: import org.apache.activemq.command.ProducerId;
1:785b16b: import org.apache.activemq.util.ByteSequence;
1:785b16b: import org.apache.activemq.util.IdGenerator;
1:785b16b: import org.junit.After;
1:785b16b: import org.junit.Before;
1:785b16b: import org.junit.Test;
1:785b16b: 
1:785b16b: /**
1:785b16b:  * This test is for AMQ-5748 to verify that {@link MessageStore} implements correctly
1:785b16b:  * compute the size of the messages in the store.
1:785b16b:  *
1:785b16b:  */
1:785b16b: public abstract class AbstractMessageStoreSizeTest {
1:785b16b: 
1:785b16b:     protected static final IdGenerator id = new IdGenerator();
1:785b16b:     protected ActiveMQQueue destination = new ActiveMQQueue("Test");
1:785b16b:     protected ProducerId producerId = new ProducerId("1.1.1");
1:785b16b:     protected static final int MESSAGE_COUNT = 20;
1:785b16b:     protected static String dataDirectory = "target/test-amq-5748/datadb";
1:785b16b:     protected static int testMessageSize = 1000;
1:785b16b: 
1:785b16b:     @Before
1:785b16b:     public void init() throws Exception {
1:785b16b:         this.initStore();
1:785b16b:     }
1:785b16b: 
1:785b16b:     @After
1:785b16b:     public void destroy() throws Exception {
1:785b16b:         this.destroyStore();
1:785b16b:     }
1:785b16b: 
1:785b16b:     protected abstract void initStore() throws Exception;
1:785b16b: 
1:785b16b: 
1:785b16b:     protected abstract void destroyStore() throws Exception;
1:785b16b: 
1:785b16b: 
1:785b16b:     /**
1:785b16b:      * This method tests that the message size exists after writing a bunch of messages to the store.
1:785b16b:      * @throws Exception
1:785b16b:      */
1:785b16b:     @Test
1:785b16b:     public void testMessageSize() throws Exception {
1:785b16b:         writeMessages();
1:785b16b:         long messageSize = getMessageStore().getMessageSize();
1:785b16b:         assertTrue(getMessageStore().getMessageCount() == 20);
1:785b16b:         assertTrue(messageSize > 20 * testMessageSize);
1:785b16b:     }
1:785b16b: 
1:785b16b: 
1:785b16b:     /**
1:785b16b:      * Write random byte messages to the store for testing.
1:785b16b:      *
1:785b16b:      * @throws Exception
1:785b16b:      */
1:785b16b:     protected void writeMessages() throws Exception {
1:785b16b:         final ConnectionContext context = new ConnectionContext();
1:785b16b: 
1:785b16b:         for (int i = 0; i < MESSAGE_COUNT; i++) {
1:785b16b:             ActiveMQMessage message = new ActiveMQMessage();
1:785b16b:             final byte[] data = new byte[testMessageSize];
1:785b16b:             final Random rng = new Random();
1:785b16b:             rng.nextBytes(data);
1:785b16b:             message.setContent(new ByteSequence(data));
1:785b16b:             message.setDestination(destination);
1:785b16b:             message.setMessageId(new MessageId(id.generateId() + ":1", i));
1:785b16b:             getMessageStore().addMessage(context, message);
1:785b16b:         }
1:785b16b:     }
1:785b16b: 
1:785b16b:     protected abstract MessageStore getMessageStore();
1:785b16b: }
============================================================================
author:Christopher L. Shannon (cshannon)
-------------------------------------------------------------------------------
commit:785b16b
/////////////////////////////////////////////////////////////////////////
1: /**
1:  * Licensed to the Apache Software Foundation (ASF) under one or more
1:  * contributor license agreements.  See the NOTICE file distributed with
1:  * this work for additional information regarding copyright ownership.
1:  * The ASF licenses this file to You under the Apache License, Version 2.0
1:  * (the "License"); you may not use this file except in compliance with
1:  * the License.  You may obtain a copy of the License at
1:  *
1:  *      http://www.apache.org/licenses/LICENSE-2.0
1:  *
1:  * Unless required by applicable law or agreed to in writing, software
1:  * distributed under the License is distributed on an "AS IS" BASIS,
1:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:  * See the License for the specific language governing permissions and
1:  * limitations under the License.
1:  */
1: package org.apache.activemq.store;
1: 
1: import static org.junit.Assert.assertTrue;
1: 
1: import java.util.Random;
1: 
1: import org.apache.activemq.broker.ConnectionContext;
1: import org.apache.activemq.command.ActiveMQMessage;
1: import org.apache.activemq.command.ActiveMQQueue;
1: import org.apache.activemq.command.MessageId;
1: import org.apache.activemq.command.ProducerId;
1: import org.apache.activemq.util.ByteSequence;
1: import org.apache.activemq.util.IdGenerator;
1: import org.junit.After;
1: import org.junit.Before;
1: import org.junit.Test;
1: 
1: /**
1:  * This test is for AMQ-5748 to verify that {@link MessageStore} implements correctly
1:  * compute the size of the messages in the store.
1:  *
1:  */
1: public abstract class AbstractMessageStoreSizeTest {
1: 
1:     protected static final IdGenerator id = new IdGenerator();
1:     protected ActiveMQQueue destination = new ActiveMQQueue("Test");
1:     protected ProducerId producerId = new ProducerId("1.1.1");
1:     protected static final int MESSAGE_COUNT = 20;
1:     protected static String dataDirectory = "target/test-amq-5748/datadb";
1:     protected static int testMessageSize = 1000;
1: 
1:     @Before
1:     public void init() throws Exception {
1:         this.initStore();
1:     }
1: 
1:     @After
1:     public void destroy() throws Exception {
1:         this.destroyStore();
1:     }
1: 
1:     protected abstract void initStore() throws Exception;
1: 
1: 
1:     protected abstract void destroyStore() throws Exception;
1: 
1: 
1:     /**
1:      * This method tests that the message size exists after writing a bunch of messages to the store.
1:      * @throws Exception
1:      */
1:     @Test
1:     public void testMessageSize() throws Exception {
1:         writeMessages();
1:         long messageSize = getMessageStore().getMessageSize();
1:         assertTrue(getMessageStore().getMessageCount() == 20);
1:         assertTrue(messageSize > 20 * testMessageSize);
1:     }
1: 
1: 
1:     /**
1:      * Write random byte messages to the store for testing.
1:      *
1:      * @throws Exception
1:      */
1:     protected void writeMessages() throws Exception {
1:         final ConnectionContext context = new ConnectionContext();
1: 
1:         for (int i = 0; i < MESSAGE_COUNT; i++) {
1:             ActiveMQMessage message = new ActiveMQMessage();
1:             final byte[] data = new byte[testMessageSize];
1:             final Random rng = new Random();
1:             rng.nextBytes(data);
1:             message.setContent(new ByteSequence(data));
1:             message.setDestination(destination);
1:             message.setMessageId(new MessageId(id.generateId() + ":1", i));
1:             getMessageStore().addMessage(context, message);
1:         }
1:     }
1: 
1:     protected abstract MessageStore getMessageStore();
1: }
============================================================================