1:b4aa53d: /*
1:b4aa53d:  * Licensed to the Apache Software Foundation (ASF) under one or more
1:b4aa53d:  * contributor license agreements.  See the NOTICE file distributed with
1:b4aa53d:  * this work for additional information regarding copyright ownership.
1:b4aa53d:  * The ASF licenses this file to You under the Apache License, Version 2.0
1:b4aa53d:  * (the "License"); you may not use this file except in compliance with
1:b4aa53d:  * the License.  You may obtain a copy of the License at
1:b4aa53d:  *
1:b4aa53d:  *      http://www.apache.org/licenses/LICENSE-2.0
1:b4aa53d:  *
1:b4aa53d:  * Unless required by applicable law or agreed to in writing, software
1:b4aa53d:  * distributed under the License is distributed on an "AS IS" BASIS,
1:b4aa53d:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:b4aa53d:  * See the License for the specific language governing permissions and
1:b4aa53d:  * limitations under the License.
1:b4aa53d:  */
1:b4aa53d: package org.apache.activemq.bugs;
1:b4aa53d: 
1:b4aa53d: import static org.junit.Assert.assertEquals;
1:b4aa53d: import static org.junit.Assert.assertNotNull;
1:b4aa53d: import static org.junit.Assert.assertTrue;
1:b4aa53d: 
1:b4aa53d: import java.io.File;
1:b4aa53d: import java.io.IOException;
1:b4aa53d: import java.util.ArrayList;
1:b4aa53d: import java.util.concurrent.TimeUnit;
1:b4aa53d: 
1:b4aa53d: import javax.jms.BytesMessage;
1:b4aa53d: import javax.jms.Connection;
1:b4aa53d: import javax.jms.DeliveryMode;
1:b4aa53d: import javax.jms.Destination;
1:b4aa53d: import javax.jms.JMSException;
1:b4aa53d: import javax.jms.Message;
1:b4aa53d: import javax.jms.MessageConsumer;
1:b4aa53d: import javax.jms.MessageProducer;
1:b4aa53d: import javax.jms.Queue;
1:b4aa53d: import javax.jms.Session;
1:b4aa53d: import javax.management.MalformedObjectNameException;
1:b4aa53d: import javax.management.ObjectName;
1:b4aa53d: 
1:b4aa53d: import org.apache.activemq.ActiveMQConnectionFactory;
1:b4aa53d: import org.apache.activemq.broker.BrokerService;
1:b4aa53d: import org.apache.activemq.broker.jmx.QueueViewMBean;
1:b4aa53d: import org.apache.activemq.broker.region.policy.PolicyEntry;
1:b4aa53d: import org.apache.activemq.broker.region.policy.PolicyMap;
1:b4aa53d: import org.apache.activemq.store.kahadb.KahaDBPersistenceAdapter;
1:b4aa53d: import org.apache.activemq.store.kahadb.MessageDatabase;
1:b4aa53d: import org.apache.commons.io.FileUtils;
1:b4aa53d: import org.apache.commons.io.filefilter.TrueFileFilter;
1:b4aa53d: import org.apache.commons.io.filefilter.WildcardFileFilter;
1:b4aa53d: import org.apache.log4j.Level;
1:b4aa53d: import org.junit.After;
1:b4aa53d: import org.junit.Before;
1:b4aa53d: import org.junit.Test;
1:b4aa53d: import org.slf4j.Logger;
1:b4aa53d: import org.slf4j.LoggerFactory;
1:b4aa53d: 
1:b4aa53d: /**
1:b4aa53d:  * Test loss of message on index rebuild when presistJMSRedelivered is on.
1:b4aa53d:  */
1:b4aa53d: public class AMQ6133PersistJMSRedeliveryTest {
1:b4aa53d: 
1:b4aa53d:     private static final Logger LOG = LoggerFactory.getLogger(AMQ6133PersistJMSRedeliveryTest.class);
1:b4aa53d:     private static final String QUEUE_NAME = "test.queue";
1:b4aa53d: 
1:b4aa53d:     private BrokerService broker;
1:b4aa53d: 
1:b4aa53d:     @Test
1:b4aa53d:     public void testPersistJMSRedeliveredMessageLossOnIndexRebuild() throws Exception {
1:b4aa53d:         sendMessages();
1:b4aa53d:         LOG.info("#### Finished sending messages, test starting. ####");
1:b4aa53d: 
1:b4aa53d:         long msgCount = getProxyToQueue(QUEUE_NAME).getQueueSize();
1:b4aa53d: 
1:b4aa53d:         final int ITERATIONS = 3;
1:b4aa53d: 
1:b4aa53d:         // Force some updates
1:b4aa53d:         for (int i = 0; i < ITERATIONS; ++i) {
1:b4aa53d:             LOG.info("Consumer and Rollback iteration: {}", i);
1:b4aa53d:             consumerAndRollback(i);
1:b4aa53d:         }
1:b4aa53d: 
1:b4aa53d:         // Allow GC to run at least once.
1:b4aa53d:         TimeUnit.SECONDS.sleep(20);
1:b4aa53d: 
1:b4aa53d:         restart();
1:b4aa53d: 
1:b4aa53d:         assertEquals(msgCount, getProxyToQueue(QUEUE_NAME).getQueueSize());
1:b4aa53d: 
1:b4aa53d:         restartWithRecovery(getPersistentDir());
1:b4aa53d: 
1:b4aa53d:         assertEquals(msgCount, getProxyToQueue(QUEUE_NAME).getQueueSize());
1:b4aa53d:     }
1:b4aa53d: 
1:b4aa53d:     @Before
1:b4aa53d:     public void setup() throws Exception {
1:b4aa53d: 
1:b4aa53d:         // Investigate loss of messages on message update in store.
1:b4aa53d:         org.apache.log4j.Logger.getLogger(MessageDatabase.class).setLevel(Level.TRACE);
1:b4aa53d: 
1:b4aa53d:         createBroker(true);
1:b4aa53d:     }
1:b4aa53d: 
1:b4aa53d:     @After
1:b4aa53d:     public void tearDown() throws Exception {
1:b4aa53d:         broker.stop();
1:b4aa53d:     }
1:b4aa53d: 
1:b4aa53d:     private void restart() throws Exception {
1:b4aa53d:         broker.stop();
1:b4aa53d:         broker.waitUntilStopped();
1:b4aa53d: 
1:b4aa53d:         createBroker(false);
1:b4aa53d:     }
1:b4aa53d: 
1:b4aa53d:     private void restartWithRecovery(File persistenceDir) throws Exception {
1:b4aa53d:         broker.stop();
1:b4aa53d:         broker.waitUntilStopped();
1:b4aa53d: 
1:b4aa53d:         // delete the index so that it needs to be rebuilt from replay
1:b4aa53d:         for (File index : FileUtils.listFiles(persistenceDir, new WildcardFileFilter("db.*"), TrueFileFilter.INSTANCE)) {
1:b4aa53d:             FileUtils.deleteQuietly(index);
1:b4aa53d:         }
1:b4aa53d: 
1:b4aa53d:         createBroker(false);
1:b4aa53d:     }
1:b4aa53d: 
1:b4aa53d:     private void sendMessages() throws Exception {
1:b4aa53d:         Connection connection = createConnection();
1:b4aa53d:         Session session = connection.createSession(false, Session.AUTO_ACKNOWLEDGE);
1:b4aa53d:         Destination queue = session.createQueue(QUEUE_NAME);
1:b4aa53d:         Destination retainQueue = session.createQueue(QUEUE_NAME + "-retain");
1:b4aa53d:         MessageProducer producer = session.createProducer(null);
1:b4aa53d: 
1:b4aa53d:         final byte[] payload = new byte[1000];
1:b4aa53d:         producer.setDeliveryMode(DeliveryMode.PERSISTENT);
1:b4aa53d:         BytesMessage message = session.createBytesMessage();
1:b4aa53d:         message.writeBytes(payload);
1:b4aa53d: 
1:b4aa53d:         // Build up a set of messages that will be redelivered and updated later.
1:b4aa53d:         while (getLogFileCount() < 3) {
1:b4aa53d:             producer.send(queue, message);
1:b4aa53d:         }
1:b4aa53d: 
1:b4aa53d:         // Now create some space for files that are retained during the test.
1:b4aa53d:         while (getLogFileCount() < 6) {
1:b4aa53d:             producer.send(retainQueue, message);
1:b4aa53d:         }
1:b4aa53d: 
1:b4aa53d:         connection.close();
1:b4aa53d:     }
1:b4aa53d: 
1:b4aa53d:     private void consumerAndRollback(int iteration) throws Exception {
1:b4aa53d:         Connection connection = createConnection();
1:b4aa53d:         Session session = connection.createSession(false, Session.CLIENT_ACKNOWLEDGE);
1:b4aa53d:         Queue queue = session.createQueue(QUEUE_NAME);
1:b4aa53d:         MessageConsumer consumer = session.createConsumer(queue);
1:b4aa53d: 
1:b4aa53d:         long msgCount = getProxyToQueue(queue.getQueueName()).getQueueSize();
1:b4aa53d: 
1:b4aa53d:         for (int i = 0; i < msgCount; ++i) {
1:b4aa53d:             Message message = consumer.receive(50000);
1:b4aa53d:             assertNotNull(message);
1:b4aa53d:             if (iteration > 0) {
1:b4aa53d:                 assertTrue(message.getJMSRedelivered());
1:b4aa53d:             }
1:b4aa53d:         }
1:b4aa53d: 
1:b4aa53d:         connection.close();
1:b4aa53d:     }
1:b4aa53d: 
1:b4aa53d:     private Connection createConnection() throws Exception {
1:b4aa53d:         ActiveMQConnectionFactory factory = new ActiveMQConnectionFactory("vm://localhost?jms.prefetchPolicy.all=0");
1:b4aa53d:         factory.setAlwaysSyncSend(true);
1:b4aa53d:         Connection connection = factory.createConnection();
1:b4aa53d:         connection.start();
1:b4aa53d: 
1:b4aa53d:         return connection;
1:b4aa53d:     }
1:b4aa53d: 
1:b4aa53d:     private void createBroker(boolean deleteAllMessages) throws Exception {
1:b4aa53d:         PolicyEntry entry = new PolicyEntry();
1:b4aa53d:         entry.setPersistJMSRedelivered(true);
1:b4aa53d: 
1:b4aa53d:         PolicyMap policyMap = new PolicyMap();
1:b4aa53d:         policyMap.setDefaultEntry(entry);
1:b4aa53d: 
1:b4aa53d:         broker = new BrokerService();
1:b4aa53d:         broker.setDeleteAllMessagesOnStartup(deleteAllMessages);
1:b4aa53d:         broker.setPersistent(true);
1:b4aa53d:         broker.setDestinationPolicy(policyMap);
1:b4aa53d: 
1:b4aa53d:         KahaDBPersistenceAdapter kahaDB = new KahaDBPersistenceAdapter();
1:b4aa53d:         kahaDB.setJournalMaxFileLength(128 * 1024);
1:b4aa53d:         kahaDB.setCleanupInterval(8*1000);
1:b4aa53d: 
1:b4aa53d:         broker.setPersistenceAdapter(kahaDB);
1:b4aa53d:         broker.getSystemUsage().getStoreUsage().setLimit(7*1024*1024);
1:b4aa53d:         broker.start();
1:b4aa53d:         broker.waitUntilStarted();
1:b4aa53d:     }
1:b4aa53d: 
1:b4aa53d:     private int getLogFileCount() throws Exception {
1:b4aa53d:         return new ArrayList<File>(
1:b4aa53d:                 FileUtils.listFiles(getPersistentDir(),
1:b4aa53d:                     new WildcardFileFilter("*.log"), TrueFileFilter.INSTANCE)).size();
1:b4aa53d:     }
1:b4aa53d: 
1:b4aa53d:     private File getPersistentDir() throws IOException {
1:b4aa53d:         return broker.getPersistenceAdapter().getDirectory();
1:b4aa53d:     }
1:b4aa53d: 
1:b4aa53d:     protected QueueViewMBean getProxyToQueue(String name) throws MalformedObjectNameException, JMSException {
1:b4aa53d:         ObjectName queueViewMBeanName = new ObjectName("org.apache.activemq:type=Broker,brokerName=localhost,destinationType=Queue,destinationName="+name);
1:b4aa53d:         QueueViewMBean proxy = (QueueViewMBean) broker.getManagementContext()
1:b4aa53d:                 .newProxyInstance(queueViewMBeanName, QueueViewMBean.class, true);
1:b4aa53d:         return proxy;
1:b4aa53d:     }
1:b4aa53d: }
============================================================================
author:Christopher L. Shannon (cshannon)
-------------------------------------------------------------------------------
commit:b4aa53d
/////////////////////////////////////////////////////////////////////////
1: /*
1:  * Licensed to the Apache Software Foundation (ASF) under one or more
1:  * contributor license agreements.  See the NOTICE file distributed with
1:  * this work for additional information regarding copyright ownership.
1:  * The ASF licenses this file to You under the Apache License, Version 2.0
1:  * (the "License"); you may not use this file except in compliance with
1:  * the License.  You may obtain a copy of the License at
1:  *
1:  *      http://www.apache.org/licenses/LICENSE-2.0
1:  *
1:  * Unless required by applicable law or agreed to in writing, software
1:  * distributed under the License is distributed on an "AS IS" BASIS,
1:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:  * See the License for the specific language governing permissions and
1:  * limitations under the License.
1:  */
1: package org.apache.activemq.bugs;
1: 
1: import static org.junit.Assert.assertEquals;
1: import static org.junit.Assert.assertNotNull;
1: import static org.junit.Assert.assertTrue;
1: 
1: import java.io.File;
1: import java.io.IOException;
1: import java.util.ArrayList;
1: import java.util.concurrent.TimeUnit;
1: 
1: import javax.jms.BytesMessage;
1: import javax.jms.Connection;
1: import javax.jms.DeliveryMode;
1: import javax.jms.Destination;
1: import javax.jms.JMSException;
1: import javax.jms.Message;
1: import javax.jms.MessageConsumer;
1: import javax.jms.MessageProducer;
1: import javax.jms.Queue;
1: import javax.jms.Session;
1: import javax.management.MalformedObjectNameException;
1: import javax.management.ObjectName;
1: 
1: import org.apache.activemq.ActiveMQConnectionFactory;
1: import org.apache.activemq.broker.BrokerService;
1: import org.apache.activemq.broker.jmx.QueueViewMBean;
1: import org.apache.activemq.broker.region.policy.PolicyEntry;
1: import org.apache.activemq.broker.region.policy.PolicyMap;
1: import org.apache.activemq.store.kahadb.KahaDBPersistenceAdapter;
1: import org.apache.activemq.store.kahadb.MessageDatabase;
1: import org.apache.commons.io.FileUtils;
1: import org.apache.commons.io.filefilter.TrueFileFilter;
1: import org.apache.commons.io.filefilter.WildcardFileFilter;
1: import org.apache.log4j.Level;
1: import org.junit.After;
1: import org.junit.Before;
1: import org.junit.Test;
1: import org.slf4j.Logger;
1: import org.slf4j.LoggerFactory;
1: 
1: /**
1:  * Test loss of message on index rebuild when presistJMSRedelivered is on.
1:  */
1: public class AMQ6133PersistJMSRedeliveryTest {
1: 
1:     private static final Logger LOG = LoggerFactory.getLogger(AMQ6133PersistJMSRedeliveryTest.class);
1:     private static final String QUEUE_NAME = "test.queue";
1: 
1:     private BrokerService broker;
1: 
1:     @Test
1:     public void testPersistJMSRedeliveredMessageLossOnIndexRebuild() throws Exception {
1:         sendMessages();
1:         LOG.info("#### Finished sending messages, test starting. ####");
1: 
1:         long msgCount = getProxyToQueue(QUEUE_NAME).getQueueSize();
1: 
1:         final int ITERATIONS = 3;
1: 
1:         // Force some updates
1:         for (int i = 0; i < ITERATIONS; ++i) {
1:             LOG.info("Consumer and Rollback iteration: {}", i);
1:             consumerAndRollback(i);
1:         }
1: 
1:         // Allow GC to run at least once.
1:         TimeUnit.SECONDS.sleep(20);
1: 
1:         restart();
1: 
1:         assertEquals(msgCount, getProxyToQueue(QUEUE_NAME).getQueueSize());
1: 
1:         restartWithRecovery(getPersistentDir());
1: 
1:         assertEquals(msgCount, getProxyToQueue(QUEUE_NAME).getQueueSize());
1:     }
1: 
1:     @Before
1:     public void setup() throws Exception {
1: 
1:         // Investigate loss of messages on message update in store.
1:         org.apache.log4j.Logger.getLogger(MessageDatabase.class).setLevel(Level.TRACE);
1: 
1:         createBroker(true);
1:     }
1: 
1:     @After
1:     public void tearDown() throws Exception {
1:         broker.stop();
1:     }
1: 
1:     private void restart() throws Exception {
1:         broker.stop();
1:         broker.waitUntilStopped();
1: 
1:         createBroker(false);
1:     }
1: 
1:     private void restartWithRecovery(File persistenceDir) throws Exception {
1:         broker.stop();
1:         broker.waitUntilStopped();
1: 
1:         // delete the index so that it needs to be rebuilt from replay
1:         for (File index : FileUtils.listFiles(persistenceDir, new WildcardFileFilter("db.*"), TrueFileFilter.INSTANCE)) {
1:             FileUtils.deleteQuietly(index);
1:         }
1: 
1:         createBroker(false);
1:     }
1: 
1:     private void sendMessages() throws Exception {
1:         Connection connection = createConnection();
1:         Session session = connection.createSession(false, Session.AUTO_ACKNOWLEDGE);
1:         Destination queue = session.createQueue(QUEUE_NAME);
1:         Destination retainQueue = session.createQueue(QUEUE_NAME + "-retain");
1:         MessageProducer producer = session.createProducer(null);
1: 
1:         final byte[] payload = new byte[1000];
1:         producer.setDeliveryMode(DeliveryMode.PERSISTENT);
1:         BytesMessage message = session.createBytesMessage();
1:         message.writeBytes(payload);
1: 
1:         // Build up a set of messages that will be redelivered and updated later.
1:         while (getLogFileCount() < 3) {
1:             producer.send(queue, message);
1:         }
1: 
1:         // Now create some space for files that are retained during the test.
1:         while (getLogFileCount() < 6) {
1:             producer.send(retainQueue, message);
1:         }
1: 
1:         connection.close();
1:     }
1: 
1:     private void consumerAndRollback(int iteration) throws Exception {
1:         Connection connection = createConnection();
1:         Session session = connection.createSession(false, Session.CLIENT_ACKNOWLEDGE);
1:         Queue queue = session.createQueue(QUEUE_NAME);
1:         MessageConsumer consumer = session.createConsumer(queue);
1: 
1:         long msgCount = getProxyToQueue(queue.getQueueName()).getQueueSize();
1: 
1:         for (int i = 0; i < msgCount; ++i) {
1:             Message message = consumer.receive(50000);
1:             assertNotNull(message);
1:             if (iteration > 0) {
1:                 assertTrue(message.getJMSRedelivered());
1:             }
1:         }
1: 
1:         connection.close();
1:     }
1: 
1:     private Connection createConnection() throws Exception {
1:         ActiveMQConnectionFactory factory = new ActiveMQConnectionFactory("vm://localhost?jms.prefetchPolicy.all=0");
1:         factory.setAlwaysSyncSend(true);
1:         Connection connection = factory.createConnection();
1:         connection.start();
1: 
1:         return connection;
1:     }
1: 
1:     private void createBroker(boolean deleteAllMessages) throws Exception {
1:         PolicyEntry entry = new PolicyEntry();
1:         entry.setPersistJMSRedelivered(true);
1: 
1:         PolicyMap policyMap = new PolicyMap();
1:         policyMap.setDefaultEntry(entry);
1: 
1:         broker = new BrokerService();
1:         broker.setDeleteAllMessagesOnStartup(deleteAllMessages);
1:         broker.setPersistent(true);
1:         broker.setDestinationPolicy(policyMap);
1: 
1:         KahaDBPersistenceAdapter kahaDB = new KahaDBPersistenceAdapter();
1:         kahaDB.setJournalMaxFileLength(128 * 1024);
1:         kahaDB.setCleanupInterval(8*1000);
1: 
1:         broker.setPersistenceAdapter(kahaDB);
1:         broker.getSystemUsage().getStoreUsage().setLimit(7*1024*1024);
1:         broker.start();
1:         broker.waitUntilStarted();
1:     }
1: 
1:     private int getLogFileCount() throws Exception {
1:         return new ArrayList<File>(
1:                 FileUtils.listFiles(getPersistentDir(),
1:                     new WildcardFileFilter("*.log"), TrueFileFilter.INSTANCE)).size();
1:     }
1: 
1:     private File getPersistentDir() throws IOException {
1:         return broker.getPersistenceAdapter().getDirectory();
1:     }
1: 
1:     protected QueueViewMBean getProxyToQueue(String name) throws MalformedObjectNameException, JMSException {
1:         ObjectName queueViewMBeanName = new ObjectName("org.apache.activemq:type=Broker,brokerName=localhost,destinationType=Queue,destinationName="+name);
1:         QueueViewMBean proxy = (QueueViewMBean) broker.getManagementContext()
1:                 .newProxyInstance(queueViewMBeanName, QueueViewMBean.class, true);
1:         return proxy;
1:     }
1: }
============================================================================