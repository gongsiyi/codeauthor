1:41211c7: /**
1:41211c7:  * Licensed to the Apache Software Foundation (ASF) under one or more
1:41211c7:  * contributor license agreements.  See the NOTICE file distributed with
1:41211c7:  * this work for additional information regarding copyright ownership.
1:41211c7:  * The ASF licenses this file to You under the Apache License, Version 2.0
1:41211c7:  * (the "License"); you may not use this file except in compliance with
1:41211c7:  * the License.  You may obtain a copy of the License at
1:41211c7:  *
1:41211c7:  *      http://www.apache.org/licenses/LICENSE-2.0
1:41211c7:  *
1:41211c7:  * Unless required by applicable law or agreed to in writing, software
1:41211c7:  * distributed under the License is distributed on an "AS IS" BASIS,
1:41211c7:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:41211c7:  * See the License for the specific language governing permissions and
1:41211c7:  * limitations under the License.
1:41211c7:  */
1:41211c7: package org.apache.activemq.network;
4:41211c7: 
1:6013441: import java.io.File;
1:41211c7: import java.net.URI;
1:41211c7: import java.util.ArrayList;
1:41211c7: import java.util.List;
1:6013441: 
1:41211c7: import javax.jms.Connection;
1:41211c7: import javax.jms.MessageConsumer;
1:41211c7: import javax.jms.Session;
1:41211c7: 
1:41211c7: import org.apache.activemq.JmsMultipleBrokersTestSupport;
1:41211c7: import org.apache.activemq.broker.BrokerService;
1:41211c7: import org.apache.activemq.broker.region.Destination;
1:41211c7: import org.apache.activemq.broker.region.DestinationFilter;
1:41211c7: import org.apache.activemq.broker.region.DurableTopicSubscription;
1:41211c7: import org.apache.activemq.command.ActiveMQDestination;
1:41211c7: import org.apache.activemq.command.ActiveMQTopic;
1:41211c7: import org.apache.activemq.util.SubscriptionKey;
1:41211c7: import org.apache.activemq.util.Wait;
1:41211c7: import org.apache.activemq.util.Wait.Condition;
1:41211c7: 
1:41211c7: import com.google.common.collect.Lists;
1:41211c7: 
1:41211c7: import junit.framework.Test;
1:41211c7: 
1:41211c7: /**
1:41211c7:  * Test to make sure durable subscriptions propagate properly throughout network bridges
1:41211c7:  * and that conduit subscriptions work properly
1:41211c7:  */
1:41211c7: public class DurableFiveBrokerNetworkBridgeTest extends JmsMultipleBrokersTestSupport {
1:41211c7: 
1:41211c7:     private boolean duplex = true;
1:6013441:     private boolean deletePersistentMessagesOnStartup = true;
1:41211c7: 
1:41211c7:     @Override
1:41211c7:     protected NetworkConnector bridgeBrokers(String localBrokerName, String remoteBrokerName) throws Exception {
1:41211c7:         NetworkConnector connector = super.bridgeBrokers(localBrokerName, remoteBrokerName);
1:41211c7:         connector.setDynamicallyIncludedDestinations(
1:41211c7:                 Lists.<ActiveMQDestination> newArrayList(new ActiveMQTopic("TEST.FOO?forceDurable=true")));
1:41211c7:         connector.setDuplex(duplex);
1:41211c7:         connector.setDecreaseNetworkConsumerPriority(false);
1:41211c7:         connector.setConduitSubscriptions(true);
1:41211c7:         connector.setSyncDurableSubs(true);
1:41211c7:         connector.setNetworkTTL(-1);
1:3ca439c:         connector.setClientIdToken("|");
1:41211c7:         return connector;
1:6013441:     }
1:6013441: 
1:08aa511:     public void testDurablePropagationBrokerRestart() throws Exception {
1:6013441:         duplex = true;
1:6013441: 
1:6013441:         // Setup broker networks
1:6013441:         bridgeBrokers("Broker_A_A", "Broker_B_B");
1:6013441:         bridgeBrokers("Broker_B_B", "Broker_C_C");
1:6013441:         bridgeBrokers("Broker_C_C", "Broker_D_D");
1:6013441:         bridgeBrokers("Broker_D_D", "Broker_E_E");
1:6013441: 
1:6013441:         startAllBrokers();
1:6013441: 
1:6013441:         // Setup destination
1:6013441:         ActiveMQTopic dest = (ActiveMQTopic) createDestination("TEST.FOO", true);
1:6013441: 
1:6013441:         // Setup consumers
1:6013441:         Connection conn = brokers.get("Broker_A_A").factory.createConnection();
1:6013441:         conn.setClientID("clientId1");
1:6013441:         conn.start();
1:6013441:         Session ses = conn.createSession(false, Session.AUTO_ACKNOWLEDGE);
1:6013441:         MessageConsumer clientA = ses.createDurableSubscriber(dest, "subA");
1:6013441:         MessageConsumer clientA2 = ses.createDurableSubscriber(dest, "subA2");
1:6013441: 
1:6013441:         // let consumers propagate around the network
1:6013441:         assertNCDurableSubsCount(brokers.get("Broker_B_B").broker, dest, 1);
1:6013441:         assertNCDurableSubsCount(brokers.get("Broker_C_C").broker, dest, 1);
1:6013441:         assertNCDurableSubsCount(brokers.get("Broker_D_D").broker, dest, 1);
1:6013441:         assertNCDurableSubsCount(brokers.get("Broker_E_E").broker, dest, 1);
1:6013441:         assertNCDurableSubsCount(brokers.get("Broker_A_A").broker, dest, 0);
1:6013441: 
1:6013441:         //bring online a consumer on the other side
1:6013441:         Connection conn2 = brokers.get("Broker_E_E").factory.createConnection();
1:6013441:         conn2.setClientID("clientId2");
1:6013441:         conn2.start();
1:6013441:         Session ses2 = conn2.createSession(false, Session.AUTO_ACKNOWLEDGE);
1:6013441:         MessageConsumer clientE = ses2.createDurableSubscriber(dest, "subE");
1:6013441:         MessageConsumer clientE2 = ses2.createDurableSubscriber(dest, "subE2");
1:6013441: 
1:6013441:         // let consumers propagate around the network
1:6013441:         assertNCDurableSubsCount(brokers.get("Broker_B_B").broker, dest, 2);
1:6013441:         assertNCDurableSubsCount(brokers.get("Broker_C_C").broker, dest, 2);
1:6013441:         assertNCDurableSubsCount(brokers.get("Broker_D_D").broker, dest, 2);
1:6013441:         assertNCDurableSubsCount(brokers.get("Broker_E_E").broker, dest, 1);
1:6013441:         assertNCDurableSubsCount(brokers.get("Broker_A_A").broker, dest, 1);
1:6013441: 
1:6013441:         clientA.close();
1:6013441:         clientA2.close();
1:6013441:         clientE.close();
1:6013441:         clientE2.close();
1:6013441: 
1:6013441:         this.destroyAllBrokers();
1:6013441:         deletePersistentMessagesOnStartup = false;
1:6013441:         String options = new String("?persistent=true&useJmx=false");
1:6013441:         createBroker(new URI("broker:(tcp://localhost:61616)/Broker_A_A" + options));
1:6013441:         createBroker(new URI("broker:(tcp://localhost:61617)/Broker_B_B" + options));
1:6013441:         createBroker(new URI("broker:(tcp://localhost:61618)/Broker_C_C" + options));
1:6013441:         createBroker(new URI("broker:(tcp://localhost:61619)/Broker_D_D" + options));
1:6013441:         createBroker(new URI("broker:(tcp://localhost:61620)/Broker_E_E" + options));
1:6013441:         bridgeBrokers("Broker_A_A", "Broker_B_B");
1:6013441:         bridgeBrokers("Broker_B_B", "Broker_C_C");
1:6013441:         bridgeBrokers("Broker_C_C", "Broker_D_D");
1:6013441:         bridgeBrokers("Broker_D_D", "Broker_E_E");
1:6013441: 
1:6013441:         startAllBrokers();
1:6013441: 
1:6013441:         conn = brokers.get("Broker_A_A").factory.createConnection();
1:6013441:         conn.setClientID("clientId1");
1:6013441:         conn.start();
1:6013441:         ses = conn.createSession(false, Session.AUTO_ACKNOWLEDGE);
1:6013441:         conn2 = brokers.get("Broker_E_E").factory.createConnection();
1:6013441:         conn2.setClientID("clientId2");
1:6013441:         conn2.start();
1:6013441:         ses2 = conn2.createSession(false, Session.AUTO_ACKNOWLEDGE);
1:6013441:         //bring one online and leave others offline to test mixed
1:6013441:         clientE = ses2.createDurableSubscriber(dest, "subE");
1:41211c7:         clientE.close();
1:41211c7: 
1:41211c7:         ses.unsubscribe("subA");
1:6013441:         ses.unsubscribe("subA2");
1:41211c7:         ses2.unsubscribe("subE");
1:6013441:         ses2.unsubscribe("subE2");
1:41211c7: 
1:3ca439c:         assertNCDurableSubsCount(brokers.get("Broker_A_A").broker, dest, 0);
1:3ca439c:         assertNCDurableSubsCount(brokers.get("Broker_B_B").broker, dest, 0);
1:3ca439c:         assertNCDurableSubsCount(brokers.get("Broker_C_C").broker, dest, 0);
1:3ca439c:         assertNCDurableSubsCount(brokers.get("Broker_D_D").broker, dest, 0);
1:3ca439c:         assertNCDurableSubsCount(brokers.get("Broker_E_E").broker, dest, 0);
1:6013441:     }
1:41211c7: 
1:41211c7:     public void testDurablePropagationDuplex() throws Exception {
1:41211c7:         duplex = true;
1:41211c7:         testDurablePropagation();
5:41211c7:     }
1:41211c7: 
1:41211c7:     public void testDurablePropagationOneWay() throws Exception {
1:6013441:         duplex = false;
1:41211c7:         testDurablePropagation();
1:41211c7:     }
1:41211c7: 
1:41211c7:     /**
1:3ca439c:      * Broker_A_A -> Broker_B_B -> Broker_C_C
1:41211c7:      */
1:41211c7:     protected void testDurablePropagation() throws Exception {
1:41211c7:         // Setup broker networks
1:3ca439c:         bridgeBrokers("Broker_A_A", "Broker_B_B");
1:3ca439c:         bridgeBrokers("Broker_B_B", "Broker_C_C");
1:6013441:         if (!duplex) {
1:6013441:             bridgeBrokers("Broker_B_B", "Broker_A_A");
1:6013441:             bridgeBrokers("Broker_C_C", "Broker_B_B");
1:6013441:         }
1:41211c7: 
1:41211c7:         startAllBrokers();
1:41211c7: 
1:41211c7:         // Setup destination
1:41211c7:         ActiveMQTopic dest = (ActiveMQTopic) createDestination("TEST.FOO", true);
1:41211c7: 
1:41211c7:         // Setup consumers
1:3ca439c:         Session ses = createSession("Broker_A_A");
1:41211c7:         MessageConsumer clientA = ses.createDurableSubscriber(dest, "subA");
1:41211c7:         MessageConsumer clientB = ses.createDurableSubscriber(dest, "subB");
1:41211c7: 
1:41211c7:         // let consumers propagate around the network
1:3ca439c:         assertNCDurableSubsCount(brokers.get("Broker_B_B").broker, dest, 1);
1:3ca439c:         assertNCDurableSubsCount(brokers.get("Broker_C_C").broker, dest, 1);
1:3ca439c:         assertNCDurableSubsCount(brokers.get("Broker_A_A").broker, dest, 0);
1:41211c7: 
1:3ca439c:         sendMessages("Broker_C_C", dest, 1);
1:41211c7:         assertNotNull(clientA.receive(1000));
1:41211c7:         assertNotNull(clientB.receive(1000));
1:41211c7: 
1:41211c7:         //bring online a consumer on the other side
1:3ca439c:         Session ses2 = createSession("Broker_C_C");
1:41211c7:         MessageConsumer clientC = ses2.createDurableSubscriber(dest, "subC");
1:41211c7:         //there will be 2 network durables, 1 for each direction of the bridge
1:3ca439c:         assertNCDurableSubsCount(brokers.get("Broker_B_B").broker, dest, 2);
1:3ca439c:         assertNCDurableSubsCount(brokers.get("Broker_C_C").broker, dest, 1);
1:3ca439c:         assertNCDurableSubsCount(brokers.get("Broker_A_A").broker, dest, 1);
1:41211c7: 
1:41211c7:         clientA.close();
1:41211c7:         clientB.close();
1:41211c7:         clientC.close();
1:41211c7:         ses.unsubscribe("subA");
1:41211c7:         ses.unsubscribe("subB");
1:41211c7:         ses2.unsubscribe("subC");
1:41211c7: 
1:3ca439c:         assertNCDurableSubsCount(brokers.get("Broker_A_A").broker, dest, 0);
1:3ca439c:         assertNCDurableSubsCount(brokers.get("Broker_B_B").broker, dest, 0);
1:3ca439c:         assertNCDurableSubsCount(brokers.get("Broker_C_C").broker, dest, 0);
1:41211c7: 
1:41211c7:     }
1:41211c7: 
1:41211c7:     public void testDurablePropagationConsumerAllBrokersDuplex() throws Exception {
1:41211c7:         duplex = true;
1:41211c7:         testDurablePropagationConsumerAllBrokers();
1:41211c7:     }
1:41211c7: 
1:41211c7:     public void testDurablePropagationConsumerAllBrokersOneWay() throws Exception {
2:41211c7:         duplex = false;
1:41211c7:         testDurablePropagationConsumerAllBrokers();
1:41211c7:     }
1:41211c7: 
1:41211c7:     protected void testDurablePropagationConsumerAllBrokers() throws Exception {
1:41211c7:         // Setup broker networks
1:3ca439c:         bridgeBrokers("Broker_A_A", "Broker_B_B");
1:3ca439c:         bridgeBrokers("Broker_B_B", "Broker_C_C");
1:6013441:         if (!duplex) {
1:6013441:             bridgeBrokers("Broker_B_B", "Broker_A_A");
1:6013441:             bridgeBrokers("Broker_C_C", "Broker_B_B");
1:41211c7:         }
1:41211c7: 
1:41211c7:         startAllBrokers();
1:41211c7: 
1:41211c7:         // Setup destination
1:41211c7:         ActiveMQTopic dest = (ActiveMQTopic) createDestination("TEST.FOO", true);
1:41211c7: 
1:41211c7:         // Setup consumers
1:3ca439c:         Session ses = createSession("Broker_A_A");
1:41211c7:         MessageConsumer clientA = ses.createDurableSubscriber(dest, "subA");
1:41211c7: 
1:41211c7:         // let consumers propagate around the network
1:3ca439c:         assertNCDurableSubsCount(brokers.get("Broker_B_B").broker, dest, 1);
1:3ca439c:         assertNCDurableSubsCount(brokers.get("Broker_C_C").broker, dest, 1);
1:3ca439c:         assertNCDurableSubsCount(brokers.get("Broker_A_A").broker, dest, 0);
1:41211c7: 
1:41211c7:         //bring online a consumer on the other side
1:3ca439c:         Session ses2 = createSession("Broker_B_B");
1:41211c7:         MessageConsumer clientB = ses2.createDurableSubscriber(dest, "subB");
1:41211c7: 
1:3ca439c:         assertNCDurableSubsCount(brokers.get("Broker_B_B").broker, dest, 1);
1:3ca439c:         assertNCDurableSubsCount(brokers.get("Broker_C_C").broker, dest, 1);
1:3ca439c:         assertNCDurableSubsCount(brokers.get("Broker_A_A").broker, dest, 1);
1:41211c7: 
1:3ca439c:         Session ses3 = createSession("Broker_C_C");
1:41211c7:         MessageConsumer clientC = ses3.createDurableSubscriber(dest, "subC");
1:41211c7: 
1:3ca439c:         assertNCDurableSubsCount(brokers.get("Broker_B_B").broker, dest, 2);
1:3ca439c:         assertNCDurableSubsCount(brokers.get("Broker_C_C").broker, dest, 1);
1:3ca439c:         assertNCDurableSubsCount(brokers.get("Broker_A_A").broker, dest, 1);
1:41211c7: 
1:41211c7: 
1:41211c7:         clientA.close();
1:41211c7:         clientB.close();
1:41211c7:         clientC.close();
1:41211c7:         ses.unsubscribe("subA");
1:41211c7:         ses2.unsubscribe("subB");
1:41211c7:         ses3.unsubscribe("subC");
1:41211c7: 
1:41211c7: 
1:3ca439c:         assertNCDurableSubsCount(brokers.get("Broker_A_A").broker, dest, 0);
1:3ca439c:         assertNCDurableSubsCount(brokers.get("Broker_B_B").broker, dest, 0);
1:3ca439c:         assertNCDurableSubsCount(brokers.get("Broker_C_C").broker, dest, 0);
1:41211c7: 
1:41211c7:     }
1:41211c7: 
1:41211c7:     public void testDurablePropagation5BrokerDuplex() throws Exception {
1:41211c7:         duplex = true;
1:41211c7:         testDurablePropagation5Broker();
1:41211c7:     }
1:41211c7: 
1:41211c7:     public void testDurablePropagation5BrokerOneWay() throws Exception {
1:41211c7:         duplex = false;
1:41211c7:         testDurablePropagation5Broker();
1:41211c7:     }
1:41211c7: 
1:41211c7:     protected void testDurablePropagation5Broker() throws Exception {
1:41211c7:         // Setup broker networks
1:3ca439c:         bridgeBrokers("Broker_A_A", "Broker_B_B");
1:3ca439c:         bridgeBrokers("Broker_B_B", "Broker_C_C");
1:3ca439c:         bridgeBrokers("Broker_C_C", "Broker_D_D");
1:3ca439c:         bridgeBrokers("Broker_D_D", "Broker_E_E");
3:41211c7:         if (!duplex) {
1:3ca439c:             bridgeBrokers("Broker_B_B", "Broker_A_A");
1:3ca439c:             bridgeBrokers("Broker_C_C", "Broker_B_B");
2:6013441:             bridgeBrokers("Broker_D_D", "Broker_C_C");
2:6013441:             bridgeBrokers("Broker_E_E", "Broker_D_D");
1:6013441:         }
1:6013441: 
1:41211c7:         startAllBrokers();
1:6013441: 
1:41211c7:         // Setup destination
1:41211c7:         ActiveMQTopic dest = (ActiveMQTopic) createDestination("TEST.FOO", true);
1:6013441: 
1:41211c7:         // Setup consumers
1:3ca439c:         Session ses = createSession("Broker_A_A");
1:41211c7:         MessageConsumer clientA = ses.createDurableSubscriber(dest, "subA");
1:41211c7:         Thread.sleep(1000);
1:6013441: 
1:41211c7:         // let consumers propagate around the network
1:3ca439c:         assertNCDurableSubsCount(brokers.get("Broker_B_B").broker, dest, 1);
1:3ca439c:         assertNCDurableSubsCount(brokers.get("Broker_C_C").broker, dest, 1);
1:3ca439c:         assertNCDurableSubsCount(brokers.get("Broker_D_D").broker, dest, 1);
1:3ca439c:         assertNCDurableSubsCount(brokers.get("Broker_E_E").broker, dest, 1);
1:6013441:         assertNCDurableSubsCount(brokers.get("Broker_A_A").broker, dest, 0);
1:41211c7: 
1:3ca439c:         sendMessages("Broker_E_E", dest, 1);
1:41211c7:         assertNotNull(clientA.receive(1000));
1:41211c7: 
1:41211c7:         //bring online a consumer on the other side
1:3ca439c:         Session ses2 = createSession("Broker_E_E");
1:41211c7:         MessageConsumer clientE = ses2.createDurableSubscriber(dest, "subE");
1:41211c7:         Thread.sleep(1000);
1:41211c7: 
1:41211c7:         //there will be 2 network durables, 1 for each direction of the bridge
1:3ca439c:         assertNCDurableSubsCount(brokers.get("Broker_B_B").broker, dest, 2);
1:3ca439c:         assertNCDurableSubsCount(brokers.get("Broker_C_C").broker, dest, 2);
1:3ca439c:         assertNCDurableSubsCount(brokers.get("Broker_D_D").broker, dest, 2);
1:3ca439c:         assertNCDurableSubsCount(brokers.get("Broker_E_E").broker, dest, 1);
1:3ca439c:         assertNCDurableSubsCount(brokers.get("Broker_A_A").broker, dest, 1);
1:41211c7: 
1:41211c7:         clientA.close();
1:6013441:         clientE.close();
1:6013441:         ses.unsubscribe("subA");
1:6013441:         ses2.unsubscribe("subE");
1:41211c7: 
1:3ca439c:         assertNCDurableSubsCount(brokers.get("Broker_A_A").broker, dest, 0);
1:6013441:         assertNCDurableSubsCount(brokers.get("Broker_B_B").broker, dest, 0);
1:6013441:         assertNCDurableSubsCount(brokers.get("Broker_C_C").broker, dest, 0);
1:6013441:         assertNCDurableSubsCount(brokers.get("Broker_D_D").broker, dest, 0);
1:6013441:         assertNCDurableSubsCount(brokers.get("Broker_E_E").broker, dest, 0);
1:41211c7: 
1:6013441:     }
1:41211c7: 
1:41211c7:     public void testDurablePropagationSpokeDuplex() throws Exception {
1:41211c7:         duplex = true;
1:41211c7:         testDurablePropagationSpoke();
1:41211c7:     }
1:41211c7: 
1:41211c7:     public void testDurablePropagationSpokeOneWay() throws Exception {
1:41211c7:         duplex = false;
1:41211c7:         testDurablePropagationSpoke();
1:41211c7:     }
1:41211c7: 
1:41211c7:     protected void testDurablePropagationSpoke() throws Exception {
1:41211c7:         // Setup broker networks
1:3ca439c:         bridgeBrokers("Broker_A_A", "Broker_B_B");
1:3ca439c:         bridgeBrokers("Broker_B_B", "Broker_C_C");
1:3ca439c:         bridgeBrokers("Broker_B_B", "Broker_D_D");
1:41211c7:         if (!duplex) {
1:3ca439c:             bridgeBrokers("Broker_B_B", "Broker_A_A");
1:3ca439c:             bridgeBrokers("Broker_C_C", "Broker_B_B");
1:3ca439c:             bridgeBrokers("Broker_D_D", "Broker_B_B");
1:41211c7:         }
1:41211c7: 
1:41211c7:         startAllBrokers();
1:41211c7: 
1:41211c7:         // Setup destination
1:41211c7:         ActiveMQTopic dest = (ActiveMQTopic) createDestination("TEST.FOO", true);
1:41211c7: 
1:41211c7:         // Setup consumers
1:3ca439c:         Session ses = createSession("Broker_A_A");
1:3ca439c:         Session ses2 = createSession("Broker_B_B");
1:3ca439c:         Session ses3 = createSession("Broker_C_C");
1:3ca439c:         Session ses4 = createSession("Broker_D_D");
1:41211c7: 
1:41211c7:         MessageConsumer clientA = ses.createDurableSubscriber(dest, "subA");
1:41211c7:         MessageConsumer clientAB = ses.createDurableSubscriber(dest, "subAB");
1:41211c7:         Thread.sleep(1000);
1:41211c7: 
1:41211c7:         // let consumers propagate around the network
1:3ca439c:         assertNCDurableSubsCount(brokers.get("Broker_B_B").broker, dest, 1);
1:3ca439c:         assertNCDurableSubsCount(brokers.get("Broker_C_C").broker, dest, 1);
1:3ca439c:         assertNCDurableSubsCount(brokers.get("Broker_D_D").broker, dest, 1);
1:3ca439c:         assertNCDurableSubsCount(brokers.get("Broker_A_A").broker, dest, 0);
1:41211c7: 
1:41211c7:         MessageConsumer clientD = ses4.createDurableSubscriber(dest, "subD");
1:41211c7:         Thread.sleep(1000);
1:41211c7: 
1:3ca439c:         assertNCDurableSubsCount(brokers.get("Broker_B_B").broker, dest, 2);
1:3ca439c:         assertNCDurableSubsCount(brokers.get("Broker_C_C").broker, dest, 1);
1:3ca439c:         assertNCDurableSubsCount(brokers.get("Broker_D_D").broker, dest, 1);
1:3ca439c:         assertNCDurableSubsCount(brokers.get("Broker_A_A").broker, dest, 1);
1:41211c7: 
1:3ca439c:         sendMessages("Broker_A_A", dest, 1);
1:41211c7:         assertNotNull(clientD.receive(1000));
1:3ca439c:         sendMessages("Broker_C_C", dest, 1);
1:41211c7:         assertNotNull(clientD.receive(1000));
1:41211c7: 
1:41211c7:         MessageConsumer clientB = ses2.createDurableSubscriber(dest, "subB");
1:41211c7:         MessageConsumer clientC = ses3.createDurableSubscriber(dest, "subC");
1:41211c7:         Thread.sleep(1000);
1:41211c7: 
1:3ca439c:         assertNCDurableSubsCount(brokers.get("Broker_B_B").broker, dest, 3);
1:3ca439c:         assertNCDurableSubsCount(brokers.get("Broker_C_C").broker, dest, 1);
1:3ca439c:         assertNCDurableSubsCount(brokers.get("Broker_D_D").broker, dest, 1);
1:3ca439c:         assertNCDurableSubsCount(brokers.get("Broker_A_A").broker, dest, 1);
1:41211c7: 
1:41211c7:         clientA.close();
1:41211c7:         clientAB.close();
1:41211c7:         clientB.close();
1:41211c7:         clientC.close();
1:41211c7:         clientD.close();
1:41211c7: 
1:41211c7:         ses.unsubscribe("subA");
1:41211c7:         ses.unsubscribe("subAB");
1:41211c7:         ses2.unsubscribe("subB");
1:41211c7:         ses3.unsubscribe("subC");
1:41211c7:         ses4.unsubscribe("subD");
1:41211c7: 
1:3ca439c:         assertNCDurableSubsCount(brokers.get("Broker_A_A").broker, dest, 0);
1:3ca439c:         assertNCDurableSubsCount(brokers.get("Broker_B_B").broker, dest, 0);
1:3ca439c:         assertNCDurableSubsCount(brokers.get("Broker_C_C").broker, dest, 0);
1:3ca439c:         assertNCDurableSubsCount(brokers.get("Broker_D_D").broker, dest, 0);
1:41211c7:     }
1:41211c7: 
1:41211c7:     public void testForceDurablePropagationDuplex() throws Exception {
1:41211c7:         duplex = true;
1:41211c7:         testForceDurablePropagation();
1:41211c7:     }
1:41211c7: 
1:41211c7:     public void testForceDurablePropagationOneWay() throws Exception {
1:41211c7:         duplex = false;
1:41211c7:         testForceDurablePropagation();
1:41211c7:     }
1:41211c7: 
1:41211c7:     protected void testForceDurablePropagation() throws Exception {
1:41211c7:         // Setup broker networks
1:3ca439c:         bridgeBrokers("Broker_A_A", "Broker_B_B");
1:3ca439c:         bridgeBrokers("Broker_B_B", "Broker_C_C");
1:41211c7:         if (!duplex) {
1:3ca439c:             bridgeBrokers("Broker_B_B", "Broker_A_A");
1:3ca439c:             bridgeBrokers("Broker_C_C", "Broker_B_B");
1:41211c7:         }
1:41211c7: 
1:41211c7:         startAllBrokers();
1:41211c7: 
1:41211c7:         // Setup destination
1:41211c7:         ActiveMQTopic dest = (ActiveMQTopic) createDestination("TEST.FOO", true);
1:41211c7: 
1:41211c7:         // Setup consumers
1:3ca439c:         Session ses = createSession("Broker_A_A");
1:41211c7:         MessageConsumer clientA = ses.createConsumer(dest);
1:41211c7:         Thread.sleep(1000);
1:41211c7: 
1:41211c7:         // let consumers propagate around the network
1:3ca439c:         assertNCDurableSubsCount(brokers.get("Broker_B_B").broker, dest, 1);
1:3ca439c:         assertNCDurableSubsCount(brokers.get("Broker_C_C").broker, dest, 1);
1:3ca439c:         assertNCDurableSubsCount(brokers.get("Broker_A_A").broker, dest, 0);
1:41211c7: 
1:3ca439c:         sendMessages("Broker_C_C", dest, 1);
1:41211c7:         assertNotNull(clientA.receive(1000));
1:41211c7: 
1:3ca439c:         Session ses2 = createSession("Broker_C_C");
1:41211c7:         MessageConsumer clientC = ses2.createConsumer(dest);
1:41211c7:         Thread.sleep(1000);
1:41211c7: 
1:3ca439c:         assertNCDurableSubsCount(brokers.get("Broker_B_B").broker, dest, 2);
1:3ca439c:         assertNCDurableSubsCount(brokers.get("Broker_C_C").broker, dest, 1);
1:3ca439c:         assertNCDurableSubsCount(brokers.get("Broker_A_A").broker, dest, 1);
1:41211c7: 
1:41211c7:         clientA.close();
1:41211c7:         clientC.close();
1:41211c7: 
1:3ca439c:         assertNCDurableSubsCount(brokers.get("Broker_A_A").broker, dest, 0);
1:3ca439c:         assertNCDurableSubsCount(brokers.get("Broker_B_B").broker, dest, 0);
1:3ca439c:         assertNCDurableSubsCount(brokers.get("Broker_C_C").broker, dest, 0);
1:41211c7:     }
1:41211c7: 
1:41211c7:     public void testDurablePropagationSyncDuplex() throws Exception {
1:41211c7:         duplex = true;
1:41211c7:         testDurablePropagationSync();
1:41211c7:     }
1:41211c7: 
1:41211c7:     public void testDurablePropagationSyncOneWay() throws Exception {
1:41211c7:         duplex = false;
1:41211c7:         testDurablePropagationSync();
1:41211c7:     }
1:41211c7: 
1:41211c7:     protected void testDurablePropagationSync() throws Exception {
1:41211c7:         // Setup broker networks
1:3ca439c:         NetworkConnector nc1 = bridgeBrokers("Broker_A_A", "Broker_B_B");
1:3ca439c:         NetworkConnector nc2 = bridgeBrokers("Broker_B_B", "Broker_C_C");
1:41211c7: 
1:41211c7:         NetworkConnector nc3 = null;
1:41211c7:         NetworkConnector nc4 = null;
1:41211c7:         if (!duplex) {
1:3ca439c:             nc3 = bridgeBrokers("Broker_B_B", "Broker_A_A");
1:3ca439c:             nc4 = bridgeBrokers("Broker_C_C", "Broker_B_B");
1:41211c7:         }
1:41211c7: 
1:41211c7:         startAllBrokers();
1:41211c7: 
1:41211c7:         nc1.stop();
1:41211c7:         nc2.stop();
1:41211c7: 
1:41211c7:         if (!duplex) {
1:41211c7:             nc3.stop();
1:41211c7:             nc4.stop();
1:41211c7:         }
1:41211c7: 
1:41211c7:         // Setup destination
1:41211c7:         ActiveMQTopic dest = (ActiveMQTopic) createDestination("TEST.FOO", true);
1:41211c7: 
1:41211c7:         // Setup consumers
1:3ca439c:         Session ses = createSession("Broker_A_A");
1:3ca439c:         Session ses2 = createSession("Broker_C_C");
1:41211c7:         MessageConsumer clientA = ses.createDurableSubscriber(dest, "subA");
1:41211c7:         MessageConsumer clientB = ses.createDurableSubscriber(dest, "subB");
1:41211c7:         MessageConsumer clientC = ses2.createDurableSubscriber(dest, "subC");
1:41211c7:         Thread.sleep(1000);
1:41211c7: 
1:3ca439c:         assertNCDurableSubsCount(brokers.get("Broker_A_A").broker, dest, 0);
1:3ca439c:         assertNCDurableSubsCount(brokers.get("Broker_B_B").broker, dest, 0);
1:3ca439c:         assertNCDurableSubsCount(brokers.get("Broker_C_C").broker, dest, 0);
1:41211c7: 
1:41211c7:         nc1.start();
1:41211c7:         nc2.start();
1:41211c7:         if (!duplex) {
1:41211c7:             nc3.start();
1:41211c7:             nc4.start();
1:41211c7:         }
1:41211c7: 
1:41211c7:         //there will be 2 network durables, 1 for each direction of the bridge
1:3ca439c:         assertNCDurableSubsCount(brokers.get("Broker_B_B").broker, dest, 2);
1:3ca439c:         assertNCDurableSubsCount(brokers.get("Broker_C_C").broker, dest, 1);
1:3ca439c:         assertNCDurableSubsCount(brokers.get("Broker_A_A").broker, dest, 1);
1:41211c7: 
1:41211c7:         clientA.close();
1:41211c7:         clientB.close();
1:41211c7:         clientC.close();
1:41211c7:     }
1:41211c7: 
1:41211c7:     public void testDurablePropagationMultipleBridgesDifferentDestinations() throws Exception {
1:41211c7:         duplex = true;
1:41211c7: 
1:41211c7:         // Setup broker networks
1:3ca439c:         bridgeBrokers("Broker_A_A", "Broker_B_B");
1:3ca439c:         bridgeBrokers("Broker_B_B", "Broker_C_C");
1:41211c7: 
1:41211c7:         //Duplicate the bridges with different included destinations - valid use case
1:3ca439c:         NetworkConnector nc3 = bridgeBrokers("Broker_A_A", "Broker_B_B");
1:3ca439c:         NetworkConnector nc4 = bridgeBrokers("Broker_B_B", "Broker_C_C");
1:3ca439c:         nc3.setName("nc_3_3");
1:3ca439c:         nc4.setName("nc_4_4");
1:41211c7:         nc3.setDynamicallyIncludedDestinations(
1:41211c7:                 Lists.<ActiveMQDestination> newArrayList(new ActiveMQTopic("TEST.FOO2?forceDurable=true")));
1:41211c7:         nc4.setDynamicallyIncludedDestinations(
1:41211c7:                 Lists.<ActiveMQDestination> newArrayList(new ActiveMQTopic("TEST.FOO2?forceDurable=true")));
1:41211c7: 
1:41211c7:         startAllBrokers();
1:41211c7: 
1:41211c7:         // Setup destination
1:41211c7:         ActiveMQTopic dest = (ActiveMQTopic) createDestination("TEST.FOO", true);
1:41211c7:         ActiveMQTopic dest2 = (ActiveMQTopic) createDestination("TEST.FOO2", true);
1:41211c7: 
1:41211c7:         // Setup consumers
1:3ca439c:         Session ses = createSession("Broker_A_A");
1:3ca439c:         Session ses2 = createSession("Broker_C_C");
1:41211c7:         MessageConsumer clientA = ses.createDurableSubscriber(dest, "subA");
1:41211c7:         MessageConsumer clientAa = ses.createDurableSubscriber(dest2, "subAa");
1:41211c7:         MessageConsumer clientC = ses2.createDurableSubscriber(dest, "subC");
1:41211c7:         MessageConsumer clientCc = ses2.createDurableSubscriber(dest2, "subCc");
1:41211c7:         Thread.sleep(1000);
1:41211c7: 
1:41211c7:         //make sure network durables are online
1:3ca439c:         assertNCDurableSubsCount(brokers.get("Broker_B_B").broker, dest, 2);
1:3ca439c:         assertNCDurableSubsCount(brokers.get("Broker_C_C").broker, dest, 1);
1:3ca439c:         assertNCDurableSubsCount(brokers.get("Broker_A_A").broker, dest, 1);
1:3ca439c:         assertNCDurableSubsCount(brokers.get("Broker_B_B").broker, dest2, 2);
1:3ca439c:         assertNCDurableSubsCount(brokers.get("Broker_C_C").broker, dest2, 1);
1:3ca439c:         assertNCDurableSubsCount(brokers.get("Broker_A_A").broker, dest2, 1);
1:41211c7: 
1:41211c7:         clientA.close();
1:41211c7:         clientC.close();
1:41211c7:         ses.unsubscribe("subA");
1:41211c7:         ses2.unsubscribe("subC");
1:41211c7: 
1:3ca439c:         assertNCDurableSubsCount(brokers.get("Broker_B_B").broker, dest, 0);
1:3ca439c:         assertNCDurableSubsCount(brokers.get("Broker_C_C").broker, dest, 0);
1:3ca439c:         assertNCDurableSubsCount(brokers.get("Broker_A_A").broker, dest, 0);
1:3ca439c:         assertNCDurableSubsCount(brokers.get("Broker_B_B").broker, dest2, 2);
1:3ca439c:         assertNCDurableSubsCount(brokers.get("Broker_C_C").broker, dest2, 1);
1:3ca439c:         assertNCDurableSubsCount(brokers.get("Broker_A_A").broker, dest2, 1);
1:41211c7: 
1:41211c7:         clientAa.close();
1:41211c7:         clientCc.close();
1:41211c7:         ses.unsubscribe("subAa");
1:41211c7:         ses2.unsubscribe("subCc");
1:41211c7: 
1:3ca439c:         assertNCDurableSubsCount(brokers.get("Broker_B_B").broker, dest2, 0);
1:3ca439c:         assertNCDurableSubsCount(brokers.get("Broker_C_C").broker, dest2, 0);
1:3ca439c:         assertNCDurableSubsCount(brokers.get("Broker_A_A").broker, dest2, 0);
1:41211c7:     }
1:41211c7: 
1:41211c7:     protected void assertNCDurableSubsCount(final BrokerService brokerService, final ActiveMQTopic dest,
1:41211c7:             final int count) throws Exception {
1:41211c7:         assertTrue(Wait.waitFor(new Condition() {
1:41211c7:             @Override
1:41211c7:             public boolean isSatisified() throws Exception {
1:41211c7:                 return count == getNCDurableSubs(brokerService, dest).size();
1:41211c7:             }
1:41211c7:         }, 10000, 500));
1:41211c7:     }
1:41211c7: 
1:41211c7:     protected List<DurableTopicSubscription> getNCDurableSubs(final BrokerService brokerService,
1:41211c7:             final ActiveMQTopic dest) throws Exception {
1:41211c7:         List<DurableTopicSubscription> subs = new ArrayList<>();
1:41211c7:         Destination d = brokerService.getDestination(dest);
1:41211c7:         org.apache.activemq.broker.region.Topic destination = null;
1:41211c7:         if (d instanceof DestinationFilter) {
1:41211c7:             destination = ((DestinationFilter) d).getAdaptor(org.apache.activemq.broker.region.Topic.class);
1:41211c7:         } else {
1:41211c7:             destination = (org.apache.activemq.broker.region.Topic) d;
1:41211c7:         }
1:41211c7: 
1:41211c7:         for (SubscriptionKey key : destination.getDurableTopicSubs().keySet()) {
1:41211c7:             if (key.getSubscriptionName().startsWith(DemandForwardingBridge.DURABLE_SUB_PREFIX)) {
1:41211c7:                 DurableTopicSubscription sub = destination.getDurableTopicSubs().get(key);
1:41211c7:                 if (sub != null) {
1:41211c7:                     subs.add(sub);
1:41211c7:                 }
1:41211c7:             }
1:41211c7:         }
1:41211c7: 
1:41211c7:         return subs;
1:41211c7:     }
1:41211c7: 
1:41211c7:     @Override
1:41211c7:     public void setUp() throws Exception {
1:41211c7:         super.setAutoFail(true);
1:41211c7:         super.setUp();
1:2e3a7f6:         deletePersistentMessagesOnStartup = true;
1:6013441:         String options = new String("?persistent=true&useJmx=false");
1:3ca439c:         createBroker(new URI("broker:(tcp://localhost:61616)/Broker_A_A" + options));
1:3ca439c:         createBroker(new URI("broker:(tcp://localhost:61617)/Broker_B_B" + options));
1:3ca439c:         createBroker(new URI("broker:(tcp://localhost:61618)/Broker_C_C" + options));
1:3ca439c:         createBroker(new URI("broker:(tcp://localhost:61619)/Broker_D_D" + options));
1:3ca439c:         createBroker(new URI("broker:(tcp://localhost:61620)/Broker_E_E" + options));
1:41211c7:     }
1:41211c7: 
1:41211c7:     @Override
1:41211c7:     protected void configureBroker(BrokerService broker) {
1:41211c7:         broker.setBrokerId(broker.getBrokerName());
1:6013441:         broker.setDeleteAllMessagesOnStartup(deletePersistentMessagesOnStartup);
1:6013441:         broker.setDataDirectory("target" + File.separator + "test-data" + File.separator + "DurableFiveBrokerNetworkBridgeTest");
1:41211c7:     }
1:41211c7: 
1:41211c7:     protected Session createSession(String broker) throws Exception {
1:41211c7:         Connection con = createConnection(broker);
1:41211c7:         con.start();
1:41211c7:         return con.createSession(false, Session.AUTO_ACKNOWLEDGE);
1:41211c7:     }
1:41211c7: 
1:41211c7:     public static Test suite() {
1:41211c7:         return suite(DurableFiveBrokerNetworkBridgeTest.class);
1:41211c7:     }
1:41211c7: }
============================================================================
author:Christopher L. Shannon (cshannon)
-------------------------------------------------------------------------------
commit:08aa511
/////////////////////////////////////////////////////////////////////////
1:     public void testDurablePropagationBrokerRestart() throws Exception {
/////////////////////////////////////////////////////////////////////////
commit:2e3a7f6
/////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////
1:         deletePersistentMessagesOnStartup = true;
commit:6013441
/////////////////////////////////////////////////////////////////////////
1: import java.io.File;
/////////////////////////////////////////////////////////////////////////
1:     private boolean deletePersistentMessagesOnStartup = true;
/////////////////////////////////////////////////////////////////////////
0:     public void testDurablePropagationBrokerRestartDuplex() throws Exception {
1:         duplex = true;
0:         testDurablePropagationBrokerRestart();
1:     }
1: 
0:     public void testDurablePropagationBrokerRestartOneWay() throws Exception {
1:         duplex = false;
0:         testDurablePropagationBrokerRestart();
1:     }
1: 
0:     protected void testDurablePropagationBrokerRestart() throws Exception {
0:         deletePersistentMessagesOnStartup = true;
1: 
1:         // Setup broker networks
1:         bridgeBrokers("Broker_A_A", "Broker_B_B");
1:         bridgeBrokers("Broker_B_B", "Broker_C_C");
1:         bridgeBrokers("Broker_C_C", "Broker_D_D");
1:         bridgeBrokers("Broker_D_D", "Broker_E_E");
1: 
1:         if (!duplex) {
1:             bridgeBrokers("Broker_B_B", "Broker_A_A");
1:             bridgeBrokers("Broker_C_C", "Broker_B_B");
1:             bridgeBrokers("Broker_D_D", "Broker_C_C");
1:             bridgeBrokers("Broker_E_E", "Broker_D_D");
1:         }
1: 
1:         startAllBrokers();
1: 
1:         // Setup destination
1:         ActiveMQTopic dest = (ActiveMQTopic) createDestination("TEST.FOO", true);
1: 
1:         // Setup consumers
1:         Connection conn = brokers.get("Broker_A_A").factory.createConnection();
1:         conn.setClientID("clientId1");
1:         conn.start();
1:         Session ses = conn.createSession(false, Session.AUTO_ACKNOWLEDGE);
1:         MessageConsumer clientA = ses.createDurableSubscriber(dest, "subA");
1:         MessageConsumer clientA2 = ses.createDurableSubscriber(dest, "subA2");
1: 
1:         // let consumers propagate around the network
1:         assertNCDurableSubsCount(brokers.get("Broker_B_B").broker, dest, 1);
1:         assertNCDurableSubsCount(brokers.get("Broker_C_C").broker, dest, 1);
1:         assertNCDurableSubsCount(brokers.get("Broker_D_D").broker, dest, 1);
1:         assertNCDurableSubsCount(brokers.get("Broker_E_E").broker, dest, 1);
1:         assertNCDurableSubsCount(brokers.get("Broker_A_A").broker, dest, 0);
1: 
1:         //bring online a consumer on the other side
1:         Connection conn2 = brokers.get("Broker_E_E").factory.createConnection();
1:         conn2.setClientID("clientId2");
1:         conn2.start();
1:         Session ses2 = conn2.createSession(false, Session.AUTO_ACKNOWLEDGE);
1:         MessageConsumer clientE = ses2.createDurableSubscriber(dest, "subE");
1:         MessageConsumer clientE2 = ses2.createDurableSubscriber(dest, "subE2");
1: 
1:         // let consumers propagate around the network
1:         assertNCDurableSubsCount(brokers.get("Broker_B_B").broker, dest, 2);
1:         assertNCDurableSubsCount(brokers.get("Broker_C_C").broker, dest, 2);
1:         assertNCDurableSubsCount(brokers.get("Broker_D_D").broker, dest, 2);
1:         assertNCDurableSubsCount(brokers.get("Broker_E_E").broker, dest, 1);
1:         assertNCDurableSubsCount(brokers.get("Broker_A_A").broker, dest, 1);
1: 
1:         clientA.close();
1:         clientA2.close();
1:         clientE.close();
1:         clientE2.close();
1: 
1:         this.destroyAllBrokers();
1:         deletePersistentMessagesOnStartup = false;
1:         String options = new String("?persistent=true&useJmx=false");
1:         createBroker(new URI("broker:(tcp://localhost:61616)/Broker_A_A" + options));
1:         createBroker(new URI("broker:(tcp://localhost:61617)/Broker_B_B" + options));
1:         createBroker(new URI("broker:(tcp://localhost:61618)/Broker_C_C" + options));
1:         createBroker(new URI("broker:(tcp://localhost:61619)/Broker_D_D" + options));
1:         createBroker(new URI("broker:(tcp://localhost:61620)/Broker_E_E" + options));
1:         bridgeBrokers("Broker_A_A", "Broker_B_B");
1:         bridgeBrokers("Broker_B_B", "Broker_C_C");
1:         bridgeBrokers("Broker_C_C", "Broker_D_D");
1:         bridgeBrokers("Broker_D_D", "Broker_E_E");
1:         if (!duplex) {
1:             bridgeBrokers("Broker_B_B", "Broker_A_A");
1:             bridgeBrokers("Broker_C_C", "Broker_B_B");
1:             bridgeBrokers("Broker_D_D", "Broker_C_C");
1:             bridgeBrokers("Broker_E_E", "Broker_D_D");
1:         }
1: 
1:         startAllBrokers();
1: 
1:         conn = brokers.get("Broker_A_A").factory.createConnection();
1:         conn.setClientID("clientId1");
1:         conn.start();
1:         ses = conn.createSession(false, Session.AUTO_ACKNOWLEDGE);
1:         conn2 = brokers.get("Broker_E_E").factory.createConnection();
1:         conn2.setClientID("clientId2");
1:         conn2.start();
1:         ses2 = conn2.createSession(false, Session.AUTO_ACKNOWLEDGE);
1:         //bring one online and leave others offline to test mixed
1:         clientE = ses2.createDurableSubscriber(dest, "subE");
1:         clientE.close();
1: 
1:         ses.unsubscribe("subA");
1:         ses.unsubscribe("subA2");
1:         ses2.unsubscribe("subE");
1:         ses2.unsubscribe("subE2");
1: 
1:         assertNCDurableSubsCount(brokers.get("Broker_A_A").broker, dest, 0);
1:         assertNCDurableSubsCount(brokers.get("Broker_B_B").broker, dest, 0);
1:         assertNCDurableSubsCount(brokers.get("Broker_C_C").broker, dest, 0);
1:         assertNCDurableSubsCount(brokers.get("Broker_D_D").broker, dest, 0);
1:         assertNCDurableSubsCount(brokers.get("Broker_E_E").broker, dest, 0);
1:     }
1: 
/////////////////////////////////////////////////////////////////////////
1:         String options = new String("?persistent=true&useJmx=false");
/////////////////////////////////////////////////////////////////////////
1:         broker.setDeleteAllMessagesOnStartup(deletePersistentMessagesOnStartup);
1:         broker.setDataDirectory("target" + File.separator + "test-data" + File.separator + "DurableFiveBrokerNetworkBridgeTest");
commit:3ca439c
/////////////////////////////////////////////////////////////////////////
1:         connector.setClientIdToken("|");
/////////////////////////////////////////////////////////////////////////
1:      * Broker_A_A -> Broker_B_B -> Broker_C_C
1:         bridgeBrokers("Broker_A_A", "Broker_B_B");
1:         bridgeBrokers("Broker_B_B", "Broker_C_C");
1:             bridgeBrokers("Broker_B_B", "Broker_A_A");
1:             bridgeBrokers("Broker_C_C", "Broker_B_B");
/////////////////////////////////////////////////////////////////////////
1:         Session ses = createSession("Broker_A_A");
1:         assertNCDurableSubsCount(brokers.get("Broker_B_B").broker, dest, 1);
1:         assertNCDurableSubsCount(brokers.get("Broker_C_C").broker, dest, 1);
1:         assertNCDurableSubsCount(brokers.get("Broker_A_A").broker, dest, 0);
1:         sendMessages("Broker_C_C", dest, 1);
1:         Session ses2 = createSession("Broker_C_C");
1:         assertNCDurableSubsCount(brokers.get("Broker_B_B").broker, dest, 2);
1:         assertNCDurableSubsCount(brokers.get("Broker_C_C").broker, dest, 1);
1:         assertNCDurableSubsCount(brokers.get("Broker_A_A").broker, dest, 1);
/////////////////////////////////////////////////////////////////////////
1:         assertNCDurableSubsCount(brokers.get("Broker_A_A").broker, dest, 0);
1:         assertNCDurableSubsCount(brokers.get("Broker_B_B").broker, dest, 0);
1:         assertNCDurableSubsCount(brokers.get("Broker_C_C").broker, dest, 0);
/////////////////////////////////////////////////////////////////////////
1:         bridgeBrokers("Broker_A_A", "Broker_B_B");
1:         bridgeBrokers("Broker_B_B", "Broker_C_C");
1:             bridgeBrokers("Broker_B_B", "Broker_A_A");
1:             bridgeBrokers("Broker_C_C", "Broker_B_B");
/////////////////////////////////////////////////////////////////////////
1:         Session ses = createSession("Broker_A_A");
1:         assertNCDurableSubsCount(brokers.get("Broker_B_B").broker, dest, 1);
1:         assertNCDurableSubsCount(brokers.get("Broker_C_C").broker, dest, 1);
1:         assertNCDurableSubsCount(brokers.get("Broker_A_A").broker, dest, 0);
1:         Session ses2 = createSession("Broker_B_B");
1:         assertNCDurableSubsCount(brokers.get("Broker_B_B").broker, dest, 1);
1:         assertNCDurableSubsCount(brokers.get("Broker_C_C").broker, dest, 1);
1:         assertNCDurableSubsCount(brokers.get("Broker_A_A").broker, dest, 1);
1:         Session ses3 = createSession("Broker_C_C");
1:         assertNCDurableSubsCount(brokers.get("Broker_B_B").broker, dest, 2);
1:         assertNCDurableSubsCount(brokers.get("Broker_C_C").broker, dest, 1);
1:         assertNCDurableSubsCount(brokers.get("Broker_A_A").broker, dest, 1);
/////////////////////////////////////////////////////////////////////////
1:         assertNCDurableSubsCount(brokers.get("Broker_A_A").broker, dest, 0);
1:         assertNCDurableSubsCount(brokers.get("Broker_B_B").broker, dest, 0);
1:         assertNCDurableSubsCount(brokers.get("Broker_C_C").broker, dest, 0);
/////////////////////////////////////////////////////////////////////////
1:         bridgeBrokers("Broker_A_A", "Broker_B_B");
1:         bridgeBrokers("Broker_B_B", "Broker_C_C");
1:         bridgeBrokers("Broker_C_C", "Broker_D_D");
1:         bridgeBrokers("Broker_D_D", "Broker_E_E");
1:             bridgeBrokers("Broker_B_B", "Broker_A_A");
1:             bridgeBrokers("Broker_C_C", "Broker_B_B");
0:             bridgeBrokers("Broker_D_D", "Broker_C_C");
0:             bridgeBrokers("Broker_E_E", "Broker_D_D");
/////////////////////////////////////////////////////////////////////////
1:         Session ses = createSession("Broker_A_A");
1:         assertNCDurableSubsCount(brokers.get("Broker_B_B").broker, dest, 1);
1:         assertNCDurableSubsCount(brokers.get("Broker_C_C").broker, dest, 1);
1:         assertNCDurableSubsCount(brokers.get("Broker_D_D").broker, dest, 1);
1:         assertNCDurableSubsCount(brokers.get("Broker_E_E").broker, dest, 1);
1:         assertNCDurableSubsCount(brokers.get("Broker_A_A").broker, dest, 0);
1:         sendMessages("Broker_E_E", dest, 1);
1:         Session ses2 = createSession("Broker_E_E");
1:         assertNCDurableSubsCount(brokers.get("Broker_B_B").broker, dest, 2);
1:         assertNCDurableSubsCount(brokers.get("Broker_C_C").broker, dest, 2);
1:         assertNCDurableSubsCount(brokers.get("Broker_D_D").broker, dest, 2);
1:         assertNCDurableSubsCount(brokers.get("Broker_E_E").broker, dest, 1);
1:         assertNCDurableSubsCount(brokers.get("Broker_A_A").broker, dest, 1);
1:         assertNCDurableSubsCount(brokers.get("Broker_A_A").broker, dest, 0);
1:         assertNCDurableSubsCount(brokers.get("Broker_B_B").broker, dest, 0);
1:         assertNCDurableSubsCount(brokers.get("Broker_C_C").broker, dest, 0);
1:         assertNCDurableSubsCount(brokers.get("Broker_D_D").broker, dest, 0);
1:         assertNCDurableSubsCount(brokers.get("Broker_E_E").broker, dest, 0);
/////////////////////////////////////////////////////////////////////////
1:         bridgeBrokers("Broker_A_A", "Broker_B_B");
1:         bridgeBrokers("Broker_B_B", "Broker_C_C");
1:         bridgeBrokers("Broker_B_B", "Broker_D_D");
0:             bridgeBrokers("Broker_B_B", "Broker_A_A");
0:             bridgeBrokers("Broker_C_C", "Broker_B_B");
1:             bridgeBrokers("Broker_D_D", "Broker_B_B");
/////////////////////////////////////////////////////////////////////////
1:         Session ses = createSession("Broker_A_A");
1:         Session ses2 = createSession("Broker_B_B");
1:         Session ses3 = createSession("Broker_C_C");
1:         Session ses4 = createSession("Broker_D_D");
1:         assertNCDurableSubsCount(brokers.get("Broker_B_B").broker, dest, 1);
1:         assertNCDurableSubsCount(brokers.get("Broker_C_C").broker, dest, 1);
1:         assertNCDurableSubsCount(brokers.get("Broker_D_D").broker, dest, 1);
1:         assertNCDurableSubsCount(brokers.get("Broker_A_A").broker, dest, 0);
1:         assertNCDurableSubsCount(brokers.get("Broker_B_B").broker, dest, 2);
1:         assertNCDurableSubsCount(brokers.get("Broker_C_C").broker, dest, 1);
1:         assertNCDurableSubsCount(brokers.get("Broker_D_D").broker, dest, 1);
1:         assertNCDurableSubsCount(brokers.get("Broker_A_A").broker, dest, 1);
1:         sendMessages("Broker_A_A", dest, 1);
1:         sendMessages("Broker_C_C", dest, 1);
1:         assertNCDurableSubsCount(brokers.get("Broker_B_B").broker, dest, 3);
1:         assertNCDurableSubsCount(brokers.get("Broker_C_C").broker, dest, 1);
1:         assertNCDurableSubsCount(brokers.get("Broker_D_D").broker, dest, 1);
1:         assertNCDurableSubsCount(brokers.get("Broker_A_A").broker, dest, 1);
/////////////////////////////////////////////////////////////////////////
1:         assertNCDurableSubsCount(brokers.get("Broker_A_A").broker, dest, 0);
1:         assertNCDurableSubsCount(brokers.get("Broker_B_B").broker, dest, 0);
1:         assertNCDurableSubsCount(brokers.get("Broker_C_C").broker, dest, 0);
1:         assertNCDurableSubsCount(brokers.get("Broker_D_D").broker, dest, 0);
/////////////////////////////////////////////////////////////////////////
1:         bridgeBrokers("Broker_A_A", "Broker_B_B");
1:         bridgeBrokers("Broker_B_B", "Broker_C_C");
0:             bridgeBrokers("Broker_B_B", "Broker_A_A");
0:             bridgeBrokers("Broker_C_C", "Broker_B_B");
/////////////////////////////////////////////////////////////////////////
1:         Session ses = createSession("Broker_A_A");
1:         assertNCDurableSubsCount(brokers.get("Broker_B_B").broker, dest, 1);
1:         assertNCDurableSubsCount(brokers.get("Broker_C_C").broker, dest, 1);
1:         assertNCDurableSubsCount(brokers.get("Broker_A_A").broker, dest, 0);
1:         sendMessages("Broker_C_C", dest, 1);
1:         Session ses2 = createSession("Broker_C_C");
1:         assertNCDurableSubsCount(brokers.get("Broker_B_B").broker, dest, 2);
1:         assertNCDurableSubsCount(brokers.get("Broker_C_C").broker, dest, 1);
1:         assertNCDurableSubsCount(brokers.get("Broker_A_A").broker, dest, 1);
1:         assertNCDurableSubsCount(brokers.get("Broker_A_A").broker, dest, 0);
1:         assertNCDurableSubsCount(brokers.get("Broker_B_B").broker, dest, 0);
1:         assertNCDurableSubsCount(brokers.get("Broker_C_C").broker, dest, 0);
/////////////////////////////////////////////////////////////////////////
1:         NetworkConnector nc1 = bridgeBrokers("Broker_A_A", "Broker_B_B");
1:         NetworkConnector nc2 = bridgeBrokers("Broker_B_B", "Broker_C_C");
1:             nc3 = bridgeBrokers("Broker_B_B", "Broker_A_A");
1:             nc4 = bridgeBrokers("Broker_C_C", "Broker_B_B");
/////////////////////////////////////////////////////////////////////////
1:         Session ses = createSession("Broker_A_A");
1:         Session ses2 = createSession("Broker_C_C");
1:         assertNCDurableSubsCount(brokers.get("Broker_A_A").broker, dest, 0);
1:         assertNCDurableSubsCount(brokers.get("Broker_B_B").broker, dest, 0);
1:         assertNCDurableSubsCount(brokers.get("Broker_C_C").broker, dest, 0);
/////////////////////////////////////////////////////////////////////////
1:         assertNCDurableSubsCount(brokers.get("Broker_B_B").broker, dest, 2);
1:         assertNCDurableSubsCount(brokers.get("Broker_C_C").broker, dest, 1);
1:         assertNCDurableSubsCount(brokers.get("Broker_A_A").broker, dest, 1);
/////////////////////////////////////////////////////////////////////////
1:         bridgeBrokers("Broker_A_A", "Broker_B_B");
1:         bridgeBrokers("Broker_B_B", "Broker_C_C");
1:         NetworkConnector nc3 = bridgeBrokers("Broker_A_A", "Broker_B_B");
1:         NetworkConnector nc4 = bridgeBrokers("Broker_B_B", "Broker_C_C");
1:         nc3.setName("nc_3_3");
1:         nc4.setName("nc_4_4");
/////////////////////////////////////////////////////////////////////////
1:         Session ses = createSession("Broker_A_A");
1:         Session ses2 = createSession("Broker_C_C");
/////////////////////////////////////////////////////////////////////////
1:         assertNCDurableSubsCount(brokers.get("Broker_B_B").broker, dest, 2);
1:         assertNCDurableSubsCount(brokers.get("Broker_C_C").broker, dest, 1);
1:         assertNCDurableSubsCount(brokers.get("Broker_A_A").broker, dest, 1);
1:         assertNCDurableSubsCount(brokers.get("Broker_B_B").broker, dest2, 2);
1:         assertNCDurableSubsCount(brokers.get("Broker_C_C").broker, dest2, 1);
1:         assertNCDurableSubsCount(brokers.get("Broker_A_A").broker, dest2, 1);
1:         assertNCDurableSubsCount(brokers.get("Broker_B_B").broker, dest, 0);
1:         assertNCDurableSubsCount(brokers.get("Broker_C_C").broker, dest, 0);
1:         assertNCDurableSubsCount(brokers.get("Broker_A_A").broker, dest, 0);
1:         assertNCDurableSubsCount(brokers.get("Broker_B_B").broker, dest2, 2);
1:         assertNCDurableSubsCount(brokers.get("Broker_C_C").broker, dest2, 1);
1:         assertNCDurableSubsCount(brokers.get("Broker_A_A").broker, dest2, 1);
1:         assertNCDurableSubsCount(brokers.get("Broker_B_B").broker, dest2, 0);
1:         assertNCDurableSubsCount(brokers.get("Broker_C_C").broker, dest2, 0);
1:         assertNCDurableSubsCount(brokers.get("Broker_A_A").broker, dest2, 0);
/////////////////////////////////////////////////////////////////////////
1:         createBroker(new URI("broker:(tcp://localhost:61616)/Broker_A_A" + options));
1:         createBroker(new URI("broker:(tcp://localhost:61617)/Broker_B_B" + options));
1:         createBroker(new URI("broker:(tcp://localhost:61618)/Broker_C_C" + options));
1:         createBroker(new URI("broker:(tcp://localhost:61619)/Broker_D_D" + options));
1:         createBroker(new URI("broker:(tcp://localhost:61620)/Broker_E_E" + options));
author:Christopher L. Shannon
-------------------------------------------------------------------------------
commit:41211c7
/////////////////////////////////////////////////////////////////////////
1: /**
1:  * Licensed to the Apache Software Foundation (ASF) under one or more
1:  * contributor license agreements.  See the NOTICE file distributed with
1:  * this work for additional information regarding copyright ownership.
1:  * The ASF licenses this file to You under the Apache License, Version 2.0
1:  * (the "License"); you may not use this file except in compliance with
1:  * the License.  You may obtain a copy of the License at
1:  *
1:  *      http://www.apache.org/licenses/LICENSE-2.0
1:  *
1:  * Unless required by applicable law or agreed to in writing, software
1:  * distributed under the License is distributed on an "AS IS" BASIS,
1:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:  * See the License for the specific language governing permissions and
1:  * limitations under the License.
1:  */
1: package org.apache.activemq.network;
1: 
1: import java.net.URI;
1: import java.util.ArrayList;
1: import java.util.List;
1: 
1: import javax.jms.Connection;
1: import javax.jms.MessageConsumer;
1: import javax.jms.Session;
1: 
1: import org.apache.activemq.JmsMultipleBrokersTestSupport;
1: import org.apache.activemq.broker.BrokerService;
1: import org.apache.activemq.broker.region.Destination;
1: import org.apache.activemq.broker.region.DestinationFilter;
1: import org.apache.activemq.broker.region.DurableTopicSubscription;
1: import org.apache.activemq.command.ActiveMQDestination;
1: import org.apache.activemq.command.ActiveMQTopic;
1: import org.apache.activemq.util.SubscriptionKey;
1: import org.apache.activemq.util.Wait;
1: import org.apache.activemq.util.Wait.Condition;
1: 
1: import com.google.common.collect.Lists;
1: 
1: import junit.framework.Test;
1: 
1: /**
1:  * Test to make sure durable subscriptions propagate properly throughout network bridges
1:  * and that conduit subscriptions work properly
1:  */
1: public class DurableFiveBrokerNetworkBridgeTest extends JmsMultipleBrokersTestSupport {
1: 
1:     private boolean duplex = true;
1: 
1:     @Override
1:     protected NetworkConnector bridgeBrokers(String localBrokerName, String remoteBrokerName) throws Exception {
1:         NetworkConnector connector = super.bridgeBrokers(localBrokerName, remoteBrokerName);
1:         connector.setDynamicallyIncludedDestinations(
1:                 Lists.<ActiveMQDestination> newArrayList(new ActiveMQTopic("TEST.FOO?forceDurable=true")));
1:         connector.setDuplex(duplex);
1:         connector.setDecreaseNetworkConsumerPriority(false);
1:         connector.setConduitSubscriptions(true);
1:         connector.setSyncDurableSubs(true);
1:         connector.setNetworkTTL(-1);
1:         return connector;
1:     }
1: 
1:     public void testDurablePropagationDuplex() throws Exception {
1:         duplex = true;
1:         testDurablePropagation();
1:     }
1: 
1:     public void testDurablePropagationOneWay() throws Exception {
1:         duplex = false;
1:         testDurablePropagation();
1:     }
1: 
1:     /**
0:      * BrokerA -> BrokerB -> BrokerC
1:      */
1:     protected void testDurablePropagation() throws Exception {
1:         // Setup broker networks
0:         bridgeBrokers("BrokerA", "BrokerB");
0:         bridgeBrokers("BrokerB", "BrokerC");
1:         if (!duplex) {
0:             bridgeBrokers("BrokerB", "BrokerA");
0:             bridgeBrokers("BrokerC", "BrokerB");
1:         }
1: 
1:         startAllBrokers();
1: 
1:         // Setup destination
1:         ActiveMQTopic dest = (ActiveMQTopic) createDestination("TEST.FOO", true);
1: 
1:         // Setup consumers
0:         Session ses = createSession("BrokerA");
1:         MessageConsumer clientA = ses.createDurableSubscriber(dest, "subA");
1:         MessageConsumer clientB = ses.createDurableSubscriber(dest, "subB");
1: 
1:         // let consumers propagate around the network
0:         assertNCDurableSubsCount(brokers.get("BrokerB").broker, dest, 1);
0:         assertNCDurableSubsCount(brokers.get("BrokerC").broker, dest, 1);
0:         assertNCDurableSubsCount(brokers.get("BrokerA").broker, dest, 0);
1: 
0:         sendMessages("BrokerC", dest, 1);
1:         assertNotNull(clientA.receive(1000));
1:         assertNotNull(clientB.receive(1000));
1: 
1:         //bring online a consumer on the other side
0:         Session ses2 = createSession("BrokerC");
1:         MessageConsumer clientC = ses2.createDurableSubscriber(dest, "subC");
1:         //there will be 2 network durables, 1 for each direction of the bridge
0:         assertNCDurableSubsCount(brokers.get("BrokerB").broker, dest, 2);
0:         assertNCDurableSubsCount(brokers.get("BrokerC").broker, dest, 1);
0:         assertNCDurableSubsCount(brokers.get("BrokerA").broker, dest, 1);
1: 
1:         clientA.close();
1:         clientB.close();
1:         clientC.close();
1:         ses.unsubscribe("subA");
1:         ses.unsubscribe("subB");
1:         ses2.unsubscribe("subC");
1: 
0:         assertNCDurableSubsCount(brokers.get("BrokerA").broker, dest, 0);
0:         assertNCDurableSubsCount(brokers.get("BrokerB").broker, dest, 0);
0:         assertNCDurableSubsCount(brokers.get("BrokerC").broker, dest, 0);
1: 
1:     }
1: 
1:     public void testDurablePropagationConsumerAllBrokersDuplex() throws Exception {
1:         duplex = true;
1:         testDurablePropagationConsumerAllBrokers();
1:     }
1: 
1:     public void testDurablePropagationConsumerAllBrokersOneWay() throws Exception {
1:         duplex = false;
1:         testDurablePropagationConsumerAllBrokers();
1:     }
1: 
1:     protected void testDurablePropagationConsumerAllBrokers() throws Exception {
1:         // Setup broker networks
0:         bridgeBrokers("BrokerA", "BrokerB");
0:         bridgeBrokers("BrokerB", "BrokerC");
1:         if (!duplex) {
0:             bridgeBrokers("BrokerB", "BrokerA");
0:             bridgeBrokers("BrokerC", "BrokerB");
1:         }
1: 
1:         startAllBrokers();
1: 
1:         // Setup destination
1:         ActiveMQTopic dest = (ActiveMQTopic) createDestination("TEST.FOO", true);
1: 
1:         // Setup consumers
0:         Session ses = createSession("BrokerA");
1:         MessageConsumer clientA = ses.createDurableSubscriber(dest, "subA");
1: 
1:         // let consumers propagate around the network
0:         assertNCDurableSubsCount(brokers.get("BrokerB").broker, dest, 1);
0:         assertNCDurableSubsCount(brokers.get("BrokerC").broker, dest, 1);
0:         assertNCDurableSubsCount(brokers.get("BrokerA").broker, dest, 0);
1: 
1:         //bring online a consumer on the other side
0:         Session ses2 = createSession("BrokerB");
1:         MessageConsumer clientB = ses2.createDurableSubscriber(dest, "subB");
1: 
0:         assertNCDurableSubsCount(brokers.get("BrokerB").broker, dest, 1);
0:         assertNCDurableSubsCount(brokers.get("BrokerC").broker, dest, 1);
0:         assertNCDurableSubsCount(brokers.get("BrokerA").broker, dest, 1);
1: 
0:         Session ses3 = createSession("BrokerC");
1:         MessageConsumer clientC = ses3.createDurableSubscriber(dest, "subC");
1: 
0:         assertNCDurableSubsCount(brokers.get("BrokerB").broker, dest, 2);
0:         assertNCDurableSubsCount(brokers.get("BrokerC").broker, dest, 1);
0:         assertNCDurableSubsCount(brokers.get("BrokerA").broker, dest, 1);
1: 
1: 
1:         clientA.close();
1:         clientB.close();
1:         clientC.close();
1:         ses.unsubscribe("subA");
1:         ses2.unsubscribe("subB");
1:         ses3.unsubscribe("subC");
1: 
1: 
0:         assertNCDurableSubsCount(brokers.get("BrokerA").broker, dest, 0);
0:         assertNCDurableSubsCount(brokers.get("BrokerB").broker, dest, 0);
0:         assertNCDurableSubsCount(brokers.get("BrokerC").broker, dest, 0);
1: 
1:     }
1: 
1:     public void testDurablePropagation5BrokerDuplex() throws Exception {
1:         duplex = true;
1:         testDurablePropagation5Broker();
1:     }
1: 
1:     public void testDurablePropagation5BrokerOneWay() throws Exception {
1:         duplex = false;
1:         testDurablePropagation5Broker();
1:     }
1: 
1:     protected void testDurablePropagation5Broker() throws Exception {
1:         // Setup broker networks
0:         bridgeBrokers("BrokerA", "BrokerB");
0:         bridgeBrokers("BrokerB", "BrokerC");
0:         bridgeBrokers("BrokerC", "BrokerD");
0:         bridgeBrokers("BrokerD", "BrokerE");
1:         if (!duplex) {
0:             bridgeBrokers("BrokerB", "BrokerA");
0:             bridgeBrokers("BrokerC", "BrokerB");
0:             bridgeBrokers("BrokerD", "BrokerC");
0:             bridgeBrokers("BrokerE", "BrokerD");
1:         }
1: 
1:         startAllBrokers();
1: 
1:         // Setup destination
1:         ActiveMQTopic dest = (ActiveMQTopic) createDestination("TEST.FOO", true);
1: 
1:         // Setup consumers
0:         Session ses = createSession("BrokerA");
1:         MessageConsumer clientA = ses.createDurableSubscriber(dest, "subA");
1:         Thread.sleep(1000);
1: 
1:         // let consumers propagate around the network
0:         assertNCDurableSubsCount(brokers.get("BrokerB").broker, dest, 1);
0:         assertNCDurableSubsCount(brokers.get("BrokerC").broker, dest, 1);
0:         assertNCDurableSubsCount(brokers.get("BrokerD").broker, dest, 1);
0:         assertNCDurableSubsCount(brokers.get("BrokerE").broker, dest, 1);
0:         assertNCDurableSubsCount(brokers.get("BrokerA").broker, dest, 0);
1: 
0:         sendMessages("BrokerE", dest, 1);
1:         assertNotNull(clientA.receive(1000));
1: 
1:         //bring online a consumer on the other side
0:         Session ses2 = createSession("BrokerE");
1:         MessageConsumer clientE = ses2.createDurableSubscriber(dest, "subE");
1:         Thread.sleep(1000);
1: 
1:         //there will be 2 network durables, 1 for each direction of the bridge
0:         assertNCDurableSubsCount(brokers.get("BrokerB").broker, dest, 2);
0:         assertNCDurableSubsCount(brokers.get("BrokerC").broker, dest, 2);
0:         assertNCDurableSubsCount(brokers.get("BrokerD").broker, dest, 2);
0:         assertNCDurableSubsCount(brokers.get("BrokerE").broker, dest, 1);
0:         assertNCDurableSubsCount(brokers.get("BrokerA").broker, dest, 1);
1: 
1:         clientA.close();
1:         clientE.close();
1:         ses.unsubscribe("subA");
1:         ses2.unsubscribe("subE");
1: 
0:         assertNCDurableSubsCount(brokers.get("BrokerA").broker, dest, 0);
0:         assertNCDurableSubsCount(brokers.get("BrokerB").broker, dest, 0);
0:         assertNCDurableSubsCount(brokers.get("BrokerC").broker, dest, 0);
0:         assertNCDurableSubsCount(brokers.get("BrokerD").broker, dest, 0);
0:         assertNCDurableSubsCount(brokers.get("BrokerE").broker, dest, 0);
1: 
1:     }
1: 
1:     public void testDurablePropagationSpokeDuplex() throws Exception {
1:         duplex = true;
1:         testDurablePropagationSpoke();
1:     }
1: 
1:     public void testDurablePropagationSpokeOneWay() throws Exception {
1:         duplex = false;
1:         testDurablePropagationSpoke();
1:     }
1: 
1:     protected void testDurablePropagationSpoke() throws Exception {
1:         // Setup broker networks
0:         bridgeBrokers("BrokerA", "BrokerB");
0:         bridgeBrokers("BrokerB", "BrokerC");
0:         bridgeBrokers("BrokerB", "BrokerD");
1:         if (!duplex) {
0:             bridgeBrokers("BrokerB", "BrokerA");
0:             bridgeBrokers("BrokerC", "BrokerB");
0:             bridgeBrokers("BrokerD", "BrokerB");
1:         }
1: 
1:         startAllBrokers();
1: 
1:         // Setup destination
1:         ActiveMQTopic dest = (ActiveMQTopic) createDestination("TEST.FOO", true);
1: 
1:         // Setup consumers
0:         Session ses = createSession("BrokerA");
0:         Session ses2 = createSession("BrokerB");
0:         Session ses3 = createSession("BrokerC");
0:         Session ses4 = createSession("BrokerD");
1: 
1:         MessageConsumer clientA = ses.createDurableSubscriber(dest, "subA");
1:         MessageConsumer clientAB = ses.createDurableSubscriber(dest, "subAB");
1:         Thread.sleep(1000);
1: 
1:         // let consumers propagate around the network
0:         assertNCDurableSubsCount(brokers.get("BrokerB").broker, dest, 1);
0:         assertNCDurableSubsCount(brokers.get("BrokerC").broker, dest, 1);
0:         assertNCDurableSubsCount(brokers.get("BrokerD").broker, dest, 1);
0:         assertNCDurableSubsCount(brokers.get("BrokerA").broker, dest, 0);
1: 
1:         MessageConsumer clientD = ses4.createDurableSubscriber(dest, "subD");
1:         Thread.sleep(1000);
1: 
0:         assertNCDurableSubsCount(brokers.get("BrokerB").broker, dest, 2);
0:         assertNCDurableSubsCount(brokers.get("BrokerC").broker, dest, 1);
0:         assertNCDurableSubsCount(brokers.get("BrokerD").broker, dest, 1);
0:         assertNCDurableSubsCount(brokers.get("BrokerA").broker, dest, 1);
1: 
0:         sendMessages("BrokerA", dest, 1);
1:         assertNotNull(clientD.receive(1000));
0:         sendMessages("BrokerC", dest, 1);
1:         assertNotNull(clientD.receive(1000));
1: 
1:         MessageConsumer clientB = ses2.createDurableSubscriber(dest, "subB");
1:         MessageConsumer clientC = ses3.createDurableSubscriber(dest, "subC");
1:         Thread.sleep(1000);
1: 
0:         assertNCDurableSubsCount(brokers.get("BrokerB").broker, dest, 3);
0:         assertNCDurableSubsCount(brokers.get("BrokerC").broker, dest, 1);
0:         assertNCDurableSubsCount(brokers.get("BrokerD").broker, dest, 1);
0:         assertNCDurableSubsCount(brokers.get("BrokerA").broker, dest, 1);
1: 
1:         clientA.close();
1:         clientAB.close();
1:         clientB.close();
1:         clientC.close();
1:         clientD.close();
1: 
1:         ses.unsubscribe("subA");
1:         ses.unsubscribe("subAB");
1:         ses2.unsubscribe("subB");
1:         ses3.unsubscribe("subC");
1:         ses4.unsubscribe("subD");
1: 
0:         assertNCDurableSubsCount(brokers.get("BrokerA").broker, dest, 0);
0:         assertNCDurableSubsCount(brokers.get("BrokerB").broker, dest, 0);
0:         assertNCDurableSubsCount(brokers.get("BrokerC").broker, dest, 0);
0:         assertNCDurableSubsCount(brokers.get("BrokerD").broker, dest, 0);
1:     }
1: 
1:     public void testForceDurablePropagationDuplex() throws Exception {
1:         duplex = true;
1:         testForceDurablePropagation();
1:     }
1: 
1:     public void testForceDurablePropagationOneWay() throws Exception {
1:         duplex = false;
1:         testForceDurablePropagation();
1:     }
1: 
1:     protected void testForceDurablePropagation() throws Exception {
1:         // Setup broker networks
0:         bridgeBrokers("BrokerA", "BrokerB");
0:         bridgeBrokers("BrokerB", "BrokerC");
1:         if (!duplex) {
0:             bridgeBrokers("BrokerB", "BrokerA");
0:             bridgeBrokers("BrokerC", "BrokerB");
1:         }
1: 
1:         startAllBrokers();
1: 
1:         // Setup destination
1:         ActiveMQTopic dest = (ActiveMQTopic) createDestination("TEST.FOO", true);
1: 
1:         // Setup consumers
0:         Session ses = createSession("BrokerA");
1:         MessageConsumer clientA = ses.createConsumer(dest);
1:         Thread.sleep(1000);
1: 
1:         // let consumers propagate around the network
0:         assertNCDurableSubsCount(brokers.get("BrokerB").broker, dest, 1);
0:         assertNCDurableSubsCount(brokers.get("BrokerC").broker, dest, 1);
0:         assertNCDurableSubsCount(brokers.get("BrokerA").broker, dest, 0);
1: 
0:         sendMessages("BrokerC", dest, 1);
1:         assertNotNull(clientA.receive(1000));
1: 
0:         Session ses2 = createSession("BrokerC");
1:         MessageConsumer clientC = ses2.createConsumer(dest);
1:         Thread.sleep(1000);
1: 
0:         assertNCDurableSubsCount(brokers.get("BrokerB").broker, dest, 2);
0:         assertNCDurableSubsCount(brokers.get("BrokerC").broker, dest, 1);
0:         assertNCDurableSubsCount(brokers.get("BrokerA").broker, dest, 1);
1: 
1:         clientA.close();
1:         clientC.close();
1: 
0:         assertNCDurableSubsCount(brokers.get("BrokerA").broker, dest, 0);
0:         assertNCDurableSubsCount(brokers.get("BrokerB").broker, dest, 0);
0:         assertNCDurableSubsCount(brokers.get("BrokerC").broker, dest, 0);
1:     }
1: 
1:     public void testDurablePropagationSyncDuplex() throws Exception {
1:         duplex = true;
1:         testDurablePropagationSync();
1:     }
1: 
1:     public void testDurablePropagationSyncOneWay() throws Exception {
1:         duplex = false;
1:         testDurablePropagationSync();
1:     }
1: 
1:     protected void testDurablePropagationSync() throws Exception {
1:         // Setup broker networks
0:         NetworkConnector nc1 = bridgeBrokers("BrokerA", "BrokerB");
0:         NetworkConnector nc2 = bridgeBrokers("BrokerB", "BrokerC");
1: 
1:         NetworkConnector nc3 = null;
1:         NetworkConnector nc4 = null;
1:         if (!duplex) {
0:             nc3 = bridgeBrokers("BrokerB", "BrokerA");
0:             nc4 = bridgeBrokers("BrokerC", "BrokerB");
1:         }
1: 
1:         startAllBrokers();
1: 
1:         nc1.stop();
1:         nc2.stop();
1: 
1:         if (!duplex) {
1:             nc3.stop();
1:             nc4.stop();
1:         }
1: 
1:         // Setup destination
1:         ActiveMQTopic dest = (ActiveMQTopic) createDestination("TEST.FOO", true);
1: 
1:         // Setup consumers
0:         Session ses = createSession("BrokerA");
0:         Session ses2 = createSession("BrokerC");
1:         MessageConsumer clientA = ses.createDurableSubscriber(dest, "subA");
1:         MessageConsumer clientB = ses.createDurableSubscriber(dest, "subB");
1:         MessageConsumer clientC = ses2.createDurableSubscriber(dest, "subC");
1:         Thread.sleep(1000);
1: 
0:         assertNCDurableSubsCount(brokers.get("BrokerA").broker, dest, 0);
0:         assertNCDurableSubsCount(brokers.get("BrokerB").broker, dest, 0);
0:         assertNCDurableSubsCount(brokers.get("BrokerC").broker, dest, 0);
1: 
1:         nc1.start();
1:         nc2.start();
1:         if (!duplex) {
1:             nc3.start();
1:             nc4.start();
1:         }
1: 
1:         //there will be 2 network durables, 1 for each direction of the bridge
0:         assertNCDurableSubsCount(brokers.get("BrokerB").broker, dest, 2);
0:         assertNCDurableSubsCount(brokers.get("BrokerC").broker, dest, 1);
0:         assertNCDurableSubsCount(brokers.get("BrokerA").broker, dest, 1);
1: 
1:         clientA.close();
1:         clientB.close();
1:         clientC.close();
1:     }
1: 
1:     public void testDurablePropagationMultipleBridgesDifferentDestinations() throws Exception {
1:         duplex = true;
1: 
1:         // Setup broker networks
0:         bridgeBrokers("BrokerA", "BrokerB");
0:         bridgeBrokers("BrokerB", "BrokerC");
1: 
1:         //Duplicate the bridges with different included destinations - valid use case
0:         NetworkConnector nc3 = bridgeBrokers("BrokerA", "BrokerB");
0:         NetworkConnector nc4 = bridgeBrokers("BrokerB", "BrokerC");
0:         nc3.setName("nc3");
0:         nc4.setName("nc4");
1:         nc3.setDynamicallyIncludedDestinations(
1:                 Lists.<ActiveMQDestination> newArrayList(new ActiveMQTopic("TEST.FOO2?forceDurable=true")));
1:         nc4.setDynamicallyIncludedDestinations(
1:                 Lists.<ActiveMQDestination> newArrayList(new ActiveMQTopic("TEST.FOO2?forceDurable=true")));
1: 
1:         startAllBrokers();
1: 
1:         // Setup destination
1:         ActiveMQTopic dest = (ActiveMQTopic) createDestination("TEST.FOO", true);
1:         ActiveMQTopic dest2 = (ActiveMQTopic) createDestination("TEST.FOO2", true);
1: 
1:         // Setup consumers
0:         Session ses = createSession("BrokerA");
0:         Session ses2 = createSession("BrokerC");
1:         MessageConsumer clientA = ses.createDurableSubscriber(dest, "subA");
1:         MessageConsumer clientAa = ses.createDurableSubscriber(dest2, "subAa");
1:         MessageConsumer clientC = ses2.createDurableSubscriber(dest, "subC");
1:         MessageConsumer clientCc = ses2.createDurableSubscriber(dest2, "subCc");
1:         Thread.sleep(1000);
1: 
1:         //make sure network durables are online
0:         assertNCDurableSubsCount(brokers.get("BrokerB").broker, dest, 2);
0:         assertNCDurableSubsCount(brokers.get("BrokerC").broker, dest, 1);
0:         assertNCDurableSubsCount(brokers.get("BrokerA").broker, dest, 1);
0:         assertNCDurableSubsCount(brokers.get("BrokerB").broker, dest2, 2);
0:         assertNCDurableSubsCount(brokers.get("BrokerC").broker, dest2, 1);
0:         assertNCDurableSubsCount(brokers.get("BrokerA").broker, dest2, 1);
1: 
1:         clientA.close();
1:         clientC.close();
1:         ses.unsubscribe("subA");
1:         ses2.unsubscribe("subC");
1: 
0:         assertNCDurableSubsCount(brokers.get("BrokerB").broker, dest, 0);
0:         assertNCDurableSubsCount(brokers.get("BrokerC").broker, dest, 0);
0:         assertNCDurableSubsCount(brokers.get("BrokerA").broker, dest, 0);
0:         assertNCDurableSubsCount(brokers.get("BrokerB").broker, dest2, 2);
0:         assertNCDurableSubsCount(brokers.get("BrokerC").broker, dest2, 1);
0:         assertNCDurableSubsCount(brokers.get("BrokerA").broker, dest2, 1);
1: 
1:         clientAa.close();
1:         clientCc.close();
1:         ses.unsubscribe("subAa");
1:         ses2.unsubscribe("subCc");
1: 
0:         assertNCDurableSubsCount(brokers.get("BrokerB").broker, dest2, 0);
0:         assertNCDurableSubsCount(brokers.get("BrokerC").broker, dest2, 0);
0:         assertNCDurableSubsCount(brokers.get("BrokerA").broker, dest2, 0);
1:     }
1: 
1:     protected void assertNCDurableSubsCount(final BrokerService brokerService, final ActiveMQTopic dest,
1:             final int count) throws Exception {
1:         assertTrue(Wait.waitFor(new Condition() {
1:             @Override
1:             public boolean isSatisified() throws Exception {
1:                 return count == getNCDurableSubs(brokerService, dest).size();
1:             }
1:         }, 10000, 500));
1:     }
1: 
1:     protected List<DurableTopicSubscription> getNCDurableSubs(final BrokerService brokerService,
1:             final ActiveMQTopic dest) throws Exception {
1:         List<DurableTopicSubscription> subs = new ArrayList<>();
1:         Destination d = brokerService.getDestination(dest);
1:         org.apache.activemq.broker.region.Topic destination = null;
1:         if (d instanceof DestinationFilter) {
1:             destination = ((DestinationFilter) d).getAdaptor(org.apache.activemq.broker.region.Topic.class);
1:         } else {
1:             destination = (org.apache.activemq.broker.region.Topic) d;
1:         }
1: 
1:         for (SubscriptionKey key : destination.getDurableTopicSubs().keySet()) {
1:             if (key.getSubscriptionName().startsWith(DemandForwardingBridge.DURABLE_SUB_PREFIX)) {
1:                 DurableTopicSubscription sub = destination.getDurableTopicSubs().get(key);
1:                 if (sub != null) {
1:                     subs.add(sub);
1:                 }
1:             }
1:         }
1: 
1:         return subs;
1:     }
1: 
1:     @Override
1:     public void setUp() throws Exception {
1:         super.setAutoFail(true);
1:         super.setUp();
0:         String options = new String("?persistent=false&useJmx=false");
0:         createBroker(new URI("broker:(tcp://localhost:61616)/BrokerA" + options));
0:         createBroker(new URI("broker:(tcp://localhost:61617)/BrokerB" + options));
0:         createBroker(new URI("broker:(tcp://localhost:61618)/BrokerC" + options));
0:         createBroker(new URI("broker:(tcp://localhost:61619)/BrokerD" + options));
0:         createBroker(new URI("broker:(tcp://localhost:61620)/BrokerE" + options));
1:     }
1: 
1:     @Override
1:     protected void configureBroker(BrokerService broker) {
1:         broker.setBrokerId(broker.getBrokerName());
1:     }
1: 
1:     protected Session createSession(String broker) throws Exception {
1:         Connection con = createConnection(broker);
1:         con.start();
1:         return con.createSession(false, Session.AUTO_ACKNOWLEDGE);
1:     }
1: 
1:     public static Test suite() {
1:         return suite(DurableFiveBrokerNetworkBridgeTest.class);
1:     }
1: }
============================================================================