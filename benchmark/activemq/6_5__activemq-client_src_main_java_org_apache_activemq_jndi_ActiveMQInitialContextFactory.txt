1:d29ca2a: /**
1:57b4941:  * Licensed to the Apache Software Foundation (ASF) under one or more
1:57b4941:  * contributor license agreements.  See the NOTICE file distributed with
1:57b4941:  * this work for additional information regarding copyright ownership.
1:57b4941:  * The ASF licenses this file to You under the Apache License, Version 2.0
1:57b4941:  * (the "License"); you may not use this file except in compliance with
1:57b4941:  * the License.  You may obtain a copy of the License at
1:f812e34:  *
1:230a86c:  *      http://www.apache.org/licenses/LICENSE-2.0
1:b0c2a40:  *
1:d29ca2a:  * Unless required by applicable law or agreed to in writing, software
1:d29ca2a:  * distributed under the License is distributed on an "AS IS" BASIS,
1:d29ca2a:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:d29ca2a:  * See the License for the specific language governing permissions and
1:d29ca2a:  * limitations under the License.
3:d29ca2a:  */
1:d29ca2a: package org.apache.activemq.jndi;
3:d29ca2a: 
1:d29ca2a: import java.net.URISyntaxException;
1:d29ca2a: import java.util.ArrayList;
1:d29ca2a: import java.util.Hashtable;
1:d29ca2a: import java.util.Iterator;
1:d29ca2a: import java.util.List;
1:d29ca2a: import java.util.Map;
1:d29ca2a: import java.util.Properties;
1:d29ca2a: import java.util.StringTokenizer;
1:74a7a8b: import java.util.concurrent.ConcurrentHashMap;
1:d29ca2a: 
1:d29ca2a: import javax.jms.Queue;
1:d29ca2a: import javax.jms.Topic;
1:d29ca2a: import javax.naming.Context;
1:d29ca2a: import javax.naming.NamingException;
1:d29ca2a: import javax.naming.spi.InitialContextFactory;
1:d29ca2a: 
1:d29ca2a: import org.apache.activemq.ActiveMQConnectionFactory;
1:d914548: import org.apache.activemq.ActiveMQXAConnectionFactory;
1:d29ca2a: import org.apache.activemq.command.ActiveMQQueue;
1:d29ca2a: import org.apache.activemq.command.ActiveMQTopic;
1:d29ca2a: 
1:d29ca2a: /**
1:f812e34:  * A factory of the ActiveMQ InitialContext which contains
1:61b2f6b:  * {@link javax.jms.ConnectionFactory} instances as well as a child context called
1:f812e34:  * <i>destinations</i> which contain all of the current active destinations, in
1:f812e34:  * child context depending on the QoS such as transient or durable and queue or
1:f812e34:  * topic.
1:d29ca2a:  */
1:d29ca2a: public class ActiveMQInitialContextFactory implements InitialContextFactory {
1:d29ca2a: 
1:75bd4f2:     private static final String[] DEFAULT_CONNECTION_FACTORY_NAMES = {"ConnectionFactory", "XAConnectionFactory", "QueueConnectionFactory", "TopicConnectionFactory"};
1:d29ca2a: 
1:d29ca2a:     private String connectionPrefix = "connection.";
1:d29ca2a:     private String queuePrefix = "queue.";
1:d29ca2a:     private String topicPrefix = "topic.";
1:d29ca2a: 
1:61b2f6b:     @Override
1:d29ca2a:     public Context getInitialContext(Hashtable environment) throws NamingException {
1:d29ca2a:         // lets create a factory
1:933eb2f:         Map<String, Object> data = new ConcurrentHashMap<String, Object>();
1:d29ca2a:         String[] names = getConnectionFactoryNames(environment);
1:d29ca2a:         for (int i = 0; i < names.length; i++) {
1:f812e34:             ActiveMQConnectionFactory factory = null;
1:d29ca2a:             String name = names[i];
1:d29ca2a: 
1:f812e34:             try {
1:f812e34:                 factory = createConnectionFactory(name, environment);
1:f812e34:             } catch (Exception e) {
1:d29ca2a:                 throw new NamingException("Invalid broker URL");
1:d29ca2a: 
2:d29ca2a:             }
1:f812e34:             /*
1:f812e34:              * if( broker==null ) { try { broker = factory.getEmbeddedBroker(); }
1:f812e34:              * catch (JMSException e) { log.warn("Failed to get embedded
1:f812e34:              * broker", e); } }
1:f812e34:              */
1:f812e34:             data.put(name, factory);
1:d29ca2a:         }
1:d29ca2a: 
1:d29ca2a:         createQueues(data, environment);
1:d29ca2a:         createTopics(data, environment);
1:d29ca2a:         /*
1:f812e34:          * if (broker != null) { data.put("destinations",
1:f812e34:          * broker.getDestinationContext(environment)); }
1:f812e34:          */
1:d29ca2a:         data.put("dynamicQueues", new LazyCreateContext() {
1:d29ca2a:             private static final long serialVersionUID = 6503881346214855588L;
1:d29ca2a: 
1:61b2f6b:             @Override
1:d29ca2a:             protected Object createEntry(String name) {
1:d29ca2a:                 return new ActiveMQQueue(name);
1:d29ca2a:             }
1:d29ca2a:         });
1:d29ca2a:         data.put("dynamicTopics", new LazyCreateContext() {
1:d29ca2a:             private static final long serialVersionUID = 2019166796234979615L;
1:d29ca2a: 
1:61b2f6b:             @Override
1:d29ca2a:             protected Object createEntry(String name) {
1:d29ca2a:                 return new ActiveMQTopic(name);
1:d29ca2a:             }
1:d29ca2a:         });
1:d29ca2a: 
1:3b973bc:         return createContext(environment, data);
1:d29ca2a:     }
1:d29ca2a: 
1:d29ca2a:     // Properties
1:f812e34:     // -------------------------------------------------------------------------
1:d29ca2a:     public String getTopicPrefix() {
1:d29ca2a:         return topicPrefix;
1:d29ca2a:     }
1:d29ca2a: 
1:d29ca2a:     public void setTopicPrefix(String topicPrefix) {
1:d29ca2a:         this.topicPrefix = topicPrefix;
1:d29ca2a:     }
1:d29ca2a: 
1:d29ca2a:     public String getQueuePrefix() {
1:d29ca2a:         return queuePrefix;
1:d29ca2a:     }
1:d29ca2a: 
1:d29ca2a:     public void setQueuePrefix(String queuePrefix) {
1:d29ca2a:         this.queuePrefix = queuePrefix;
1:d29ca2a:     }
1:d29ca2a: 
1:d29ca2a:     // Implementation methods
1:f812e34:     // -------------------------------------------------------------------------
1:d29ca2a: 
1:933eb2f:     protected ReadOnlyContext createContext(Hashtable environment, Map<String, Object> data) {
1:d29ca2a:         return new ReadOnlyContext(environment, data);
1:d29ca2a:     }
1:d29ca2a: 
1:fc00993:     protected ActiveMQConnectionFactory createConnectionFactory(String name, Hashtable environment) throws URISyntaxException {
1:d29ca2a:         Hashtable temp = new Hashtable(environment);
1:75bd4f2:         if (DEFAULT_CONNECTION_FACTORY_NAMES[1].equals(name)) {
1:75bd4f2:             // don't try to mod environment, it may be readonly
1:75bd4f2:             temp.put("xa", String.valueOf(true));
1:d29ca2a:         }
1:f812e34:         String prefix = connectionPrefix + name + ".";
1:d29ca2a:         for (Iterator iter = environment.entrySet().iterator(); iter.hasNext();) {
1:f812e34:             Map.Entry entry = (Map.Entry)iter.next();
1:f812e34:             String key = (String)entry.getKey();
1:f812e34:             if (key.startsWith(prefix)) {
1:d29ca2a:                 // Rename the key...
1:d29ca2a:                 temp.remove(key);
1:d29ca2a:                 key = key.substring(prefix.length());
1:d29ca2a:                 temp.put(key, entry.getValue());
1:d29ca2a:             }
1:d29ca2a:         }
1:d29ca2a:         return createConnectionFactory(temp);
1:d29ca2a:     }
1:d29ca2a: 
1:d29ca2a:     protected String[] getConnectionFactoryNames(Map environment) {
1:f812e34:         String factoryNames = (String)environment.get("connectionFactoryNames");
1:d29ca2a:         if (factoryNames != null) {
1:933eb2f:             List<String> list = new ArrayList<String>();
1:fc00993:             for (StringTokenizer enumeration = new StringTokenizer(factoryNames, ","); enumeration.hasMoreTokens();) {
1:d29ca2a:                 list.add(enumeration.nextToken().trim());
1:d29ca2a:             }
1:d29ca2a:             int size = list.size();
1:d29ca2a:             if (size > 0) {
1:d29ca2a:                 String[] answer = new String[size];
1:d29ca2a:                 list.toArray(answer);
1:d29ca2a:                 return answer;
1:d29ca2a:             }
1:d29ca2a:         }
1:fc00993:         return DEFAULT_CONNECTION_FACTORY_NAMES;
1:d29ca2a:     }
1:d29ca2a: 
1:933eb2f:     protected void createQueues(Map<String, Object> data, Hashtable environment) {
1:d29ca2a:         for (Iterator iter = environment.entrySet().iterator(); iter.hasNext();) {
1:f812e34:             Map.Entry entry = (Map.Entry)iter.next();
1:d29ca2a:             String key = entry.getKey().toString();
1:d29ca2a:             if (key.startsWith(queuePrefix)) {
1:d29ca2a:                 String jndiName = key.substring(queuePrefix.length());
1:d29ca2a:                 data.put(jndiName, createQueue(entry.getValue().toString()));
1:d29ca2a:             }
1:d29ca2a:         }
1:d29ca2a:     }
1:d29ca2a: 
1:933eb2f:     protected void createTopics(Map<String, Object> data, Hashtable environment) {
1:d29ca2a:         for (Iterator iter = environment.entrySet().iterator(); iter.hasNext();) {
1:f812e34:             Map.Entry entry = (Map.Entry)iter.next();
1:d29ca2a:             String key = entry.getKey().toString();
1:d29ca2a:             if (key.startsWith(topicPrefix)) {
1:d29ca2a:                 String jndiName = key.substring(topicPrefix.length());
1:d29ca2a:                 data.put(jndiName, createTopic(entry.getValue().toString()));
1:d29ca2a:             }
1:d29ca2a:         }
1:d29ca2a:     }
1:d29ca2a: 
1:d29ca2a:     /**
1:d29ca2a:      * Factory method to create new Queue instances
1:d29ca2a:      */
1:d29ca2a:     protected Queue createQueue(String name) {
1:d29ca2a:         return new ActiveMQQueue(name);
1:d29ca2a:     }
1:d29ca2a: 
1:d29ca2a:     /**
1:d29ca2a:      * Factory method to create new Topic instances
1:d29ca2a:      */
1:d29ca2a:     protected Topic createTopic(String name) {
1:d29ca2a:         return new ActiveMQTopic(name);
1:d29ca2a:     }
1:f812e34: 
1:d29ca2a:     /**
1:f812e34:      * Factory method to create a new connection factory from the given
1:f812e34:      * environment
1:d29ca2a:      */
1:fc00993:     protected ActiveMQConnectionFactory createConnectionFactory(Hashtable environment) throws URISyntaxException {
1:d914548:         ActiveMQConnectionFactory answer = needsXA(environment) ? new ActiveMQXAConnectionFactory() : new ActiveMQConnectionFactory();
1:d29ca2a:         Properties properties = new Properties();
1:d29ca2a:         properties.putAll(environment);
1:d29ca2a:         answer.setProperties(properties);
1:d29ca2a:         return answer;
1:d29ca2a:     }
1:d29ca2a: 
1:016ae05:     protected boolean needsXA(Hashtable environment) {
1:d914548:         boolean isXA = Boolean.parseBoolean((String) environment.get("xa"));
1:d914548:         // property not applicable to connectionfactory so remove
1:d914548:         environment.remove("xa");
1:d914548:         return isXA;
1:d29ca2a:     }
1:d29ca2a: 
1:d29ca2a:     public String getConnectionPrefix() {
1:d29ca2a:         return connectionPrefix;
1:d29ca2a:     }
1:f812e34: 
1:d29ca2a:     public void setConnectionPrefix(String connectionPrefix) {
1:d29ca2a:         this.connectionPrefix = connectionPrefix;
1:d29ca2a:     }
1:d29ca2a: }
============================================================================
author:Christopher L. Shannon (cshannon)
-------------------------------------------------------------------------------
commit:016ae05
/////////////////////////////////////////////////////////////////////////
1:     protected boolean needsXA(Hashtable environment) {
author:Hadrian Zbarcea
-------------------------------------------------------------------------------
commit:d54d046
author:Timothy Bish
-------------------------------------------------------------------------------
commit:61b2f6b
/////////////////////////////////////////////////////////////////////////
1:  * {@link javax.jms.ConnectionFactory} instances as well as a child context called
/////////////////////////////////////////////////////////////////////////
1:     @Override
/////////////////////////////////////////////////////////////////////////
1:             @Override
/////////////////////////////////////////////////////////////////////////
1:             @Override
/////////////////////////////////////////////////////////////////////////
author:Hiram R. Chirino
-------------------------------------------------------------------------------
commit:9a8f6e4
commit:b0c2a40
/////////////////////////////////////////////////////////////////////////
1:  * 
commit:933eb2f
/////////////////////////////////////////////////////////////////////////
1:         Map<String, Object> data = new ConcurrentHashMap<String, Object>();
/////////////////////////////////////////////////////////////////////////
1:     protected ReadOnlyContext createContext(Hashtable environment, Map<String, Object> data) {
/////////////////////////////////////////////////////////////////////////
1:             List<String> list = new ArrayList<String>();
/////////////////////////////////////////////////////////////////////////
1:     protected void createQueues(Map<String, Object> data, Hashtable environment) {
/////////////////////////////////////////////////////////////////////////
1:     protected void createTopics(Map<String, Object> data, Hashtable environment) {
commit:fc00993
/////////////////////////////////////////////////////////////////////////
0:     private static final String[] DEFAULT_CONNECTION_FACTORY_NAMES = {"ConnectionFactory", "QueueConnectionFactory", "TopicConnectionFactory"};
/////////////////////////////////////////////////////////////////////////
1:     protected ActiveMQConnectionFactory createConnectionFactory(String name, Hashtable environment) throws URISyntaxException {
/////////////////////////////////////////////////////////////////////////
1:             for (StringTokenizer enumeration = new StringTokenizer(factoryNames, ","); enumeration.hasMoreTokens();) {
/////////////////////////////////////////////////////////////////////////
1:         return DEFAULT_CONNECTION_FACTORY_NAMES;
/////////////////////////////////////////////////////////////////////////
1:     protected ActiveMQConnectionFactory createConnectionFactory(Hashtable environment) throws URISyntaxException {
commit:74a7a8b
/////////////////////////////////////////////////////////////////////////
1: import java.util.concurrent.ConcurrentHashMap;
/////////////////////////////////////////////////////////////////////////
commit:f812e34
/////////////////////////////////////////////////////////////////////////
1:  * A factory of the ActiveMQ InitialContext which contains
0:  * {@link ConnectionFactory} instances as well as a child context called
1:  * <i>destinations</i> which contain all of the current active destinations, in
1:  * child context depending on the QoS such as transient or durable and queue or
1:  * topic.
1:  * 
0:     private static final String[] defaultConnectionFactoryNames = {"ConnectionFactory",
0:                                                                    "QueueConnectionFactory",
0:                                                                    "TopicConnectionFactory"};
/////////////////////////////////////////////////////////////////////////
1:             ActiveMQConnectionFactory factory = null;
1:             try {
1:                 factory = createConnectionFactory(name, environment);
1:             } catch (Exception e) {
1:             /*
1:              * if( broker==null ) { try { broker = factory.getEmbeddedBroker(); }
1:              * catch (JMSException e) { log.warn("Failed to get embedded
1:              * broker", e); } }
1:              */
1:             data.put(name, factory);
1:          * if (broker != null) { data.put("destinations",
1:          * broker.getDestinationContext(environment)); }
1:          */
/////////////////////////////////////////////////////////////////////////
1:     // -------------------------------------------------------------------------
/////////////////////////////////////////////////////////////////////////
1:     // -------------------------------------------------------------------------
0:     protected ActiveMQConnectionFactory createConnectionFactory(String name, Hashtable environment)
0:         throws URISyntaxException {
1:         String prefix = connectionPrefix + name + ".";
1:             Map.Entry entry = (Map.Entry)iter.next();
1:             String key = (String)entry.getKey();
1:             if (key.startsWith(prefix)) {
/////////////////////////////////////////////////////////////////////////
1:         String factoryNames = (String)environment.get("connectionFactoryNames");
0:             for (StringTokenizer enumeration = new StringTokenizer(factoryNames, ","); enumeration
0:                 .hasMoreTokens();) {
/////////////////////////////////////////////////////////////////////////
1:             Map.Entry entry = (Map.Entry)iter.next();
/////////////////////////////////////////////////////////////////////////
1:             Map.Entry entry = (Map.Entry)iter.next();
/////////////////////////////////////////////////////////////////////////
1: 
1:      * Factory method to create a new connection factory from the given
1:      * environment
0:     protected ActiveMQConnectionFactory createConnectionFactory(Hashtable environment)
0:         throws URISyntaxException {
/////////////////////////////////////////////////////////////////////////
1: 
commit:230a86c
/////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////
1:  *      http://www.apache.org/licenses/LICENSE-2.0
commit:86cbdfd
/////////////////////////////////////////////////////////////////////////
0: import java.util.concurrent.ConcurrentHashMap;
commit:57b4941
/////////////////////////////////////////////////////////////////////////
1:  * Licensed to the Apache Software Foundation (ASF) under one or more
1:  * contributor license agreements.  See the NOTICE file distributed with
1:  * this work for additional information regarding copyright ownership.
1:  * The ASF licenses this file to You under the Apache License, Version 2.0
1:  * (the "License"); you may not use this file except in compliance with
1:  * the License.  You may obtain a copy of the License at
commit:48b4869
/////////////////////////////////////////////////////////////////////////
0:  * Copyright 2005-2006 The Apache Software Foundation
commit:d29ca2a
/////////////////////////////////////////////////////////////////////////
1: /**
0:  *
0:  * Copyright 2004 The Apache Software Foundation
0:  *
0:  * Licensed under the Apache License, Version 2.0 (the "License");
0:  * you may not use this file except in compliance with the License.
0:  * You may obtain a copy of the License at
0:  *
0:  * http://www.apache.org/licenses/LICENSE-2.0
0:  *
1:  * Unless required by applicable law or agreed to in writing, software
1:  * distributed under the License is distributed on an "AS IS" BASIS,
1:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:  * See the License for the specific language governing permissions and
1:  * limitations under the License.
1:  */
1: package org.apache.activemq.jndi;
1: 
1: import java.net.URISyntaxException;
1: import java.util.ArrayList;
1: import java.util.Hashtable;
1: import java.util.Iterator;
1: import java.util.List;
1: import java.util.Map;
1: import java.util.Properties;
1: import java.util.StringTokenizer;
1: 
0: import javax.jms.ConnectionFactory;
1: import javax.jms.Queue;
1: import javax.jms.Topic;
1: import javax.naming.Context;
1: import javax.naming.NamingException;
1: import javax.naming.spi.InitialContextFactory;
1: 
1: import org.apache.activemq.ActiveMQConnectionFactory;
0: import org.apache.activemq.broker.Broker;
1: import org.apache.activemq.command.ActiveMQQueue;
1: import org.apache.activemq.command.ActiveMQTopic;
1: 
0: import edu.emory.mathcs.backport.java.util.concurrent.ConcurrentHashMap;
1: 
1: /**
0:  * A factory of the ActiveMQ InitialContext which contains {@link ConnectionFactory}
0:  * instances as well as a child context called <i>destinations</i> which contain all of the
0:  * current active destinations, in child context depending on the QoS such as
0:  * transient or durable and queue or topic.
0:  *
0:  * @version $Revision: 1.2 $
1:  */
1: public class ActiveMQInitialContextFactory implements InitialContextFactory {
1: 
0:     private static final String[] defaultConnectionFactoryNames = {
0:         "ConnectionFactory", "QueueConnectionFactory", "TopicConnectionFactory"
0:     };
1: 
1:     private String connectionPrefix = "connection.";
1:     private String queuePrefix = "queue.";
1:     private String topicPrefix = "topic.";
1: 
1:     public Context getInitialContext(Hashtable environment) throws NamingException {
1:         // lets create a factory
0:         Map data = new ConcurrentHashMap();
1:         String[] names = getConnectionFactoryNames(environment);
1:         for (int i = 0; i < names.length; i++) {
0:             ActiveMQConnectionFactory factory =null;
1:             String name = names[i];
1: 
0:             try{
0:              factory = createConnectionFactory(name, environment);
0:             }catch(Exception e){
1:                 throw new NamingException("Invalid broker URL");
1: 
1:             }
0:        /*     if( broker==null ) {
0:                 try {
0:                     broker = factory.getEmbeddedBroker();
1:                 }
0:                 catch (JMSException e) {
0:                     log.warn("Failed to get embedded broker", e);
1:                 }
1:             }
1:        */
0:             data.put(name,factory);
1:         }
1: 
1:         createQueues(data, environment);
1:         createTopics(data, environment);
1:         /*
0:         if (broker != null) {
0:             data.put("destinations", broker.getDestinationContext(environment));
1:         }
1:         */
1:         data.put("dynamicQueues", new LazyCreateContext() {
1:             private static final long serialVersionUID = 6503881346214855588L;
1: 
1:             protected Object createEntry(String name) {
1:                 return new ActiveMQQueue(name);
1:             }
1:         });
1:         data.put("dynamicTopics", new LazyCreateContext() {
1:             private static final long serialVersionUID = 2019166796234979615L;
1: 
1:             protected Object createEntry(String name) {
1:                 return new ActiveMQTopic(name);
1:             }
1:         });
1: 
1:         return new ReadOnlyContext(environment, data);
1:     }
1: 
0:     private ActiveMQConnectionFactory createConnectionFactory(String name, Hashtable environment)   throws URISyntaxException {
1:         Hashtable temp = new Hashtable(environment);
0:         String prefix = connectionPrefix+name+".";
1:         for (Iterator iter = environment.entrySet().iterator(); iter.hasNext();) {
0:             Map.Entry entry = (Map.Entry) iter.next();
0:             String key = (String) entry.getKey();
0:             if( key.startsWith(prefix) ) {
1:                 // Rename the key...
1:                 temp.remove(key);
1:                 key = key.substring(prefix.length());
1:                 temp.put(key, entry.getValue());
1:             }
1:         }
1:         return createConnectionFactory(temp);
1:     }
1: 
1:     // Properties
0:     //-------------------------------------------------------------------------
1:     public String getTopicPrefix() {
1:         return topicPrefix;
1:     }
1: 
1:     public void setTopicPrefix(String topicPrefix) {
1:         this.topicPrefix = topicPrefix;
1:     }
1: 
1:     public String getQueuePrefix() {
1:         return queuePrefix;
1:     }
1: 
1:     public void setQueuePrefix(String queuePrefix) {
1:         this.queuePrefix = queuePrefix;
1:     }
1: 
1:     // Implementation methods
0:     //-------------------------------------------------------------------------
1:     protected String[] getConnectionFactoryNames(Map environment) {
0:         String factoryNames = (String) environment.get("connectionFactoryNames");
1:         if (factoryNames != null) {
0:             List list = new ArrayList();
0:             for (StringTokenizer enumeration = new StringTokenizer(factoryNames, ","); enumeration.hasMoreTokens();) {
1:                 list.add(enumeration.nextToken().trim());
1:             }
1:             int size = list.size();
1:             if (size > 0) {
1:                 String[] answer = new String[size];
1:                 list.toArray(answer);
1:                 return answer;
1:             }
1:         }
0:         return defaultConnectionFactoryNames;
1:     }
1: 
0:     protected void createQueues(Map data, Hashtable environment) {
1:         for (Iterator iter = environment.entrySet().iterator(); iter.hasNext();) {
0:             Map.Entry entry = (Map.Entry) iter.next();
1:             String key = entry.getKey().toString();
1:             if (key.startsWith(queuePrefix)) {
1:                 String jndiName = key.substring(queuePrefix.length());
1:                 data.put(jndiName, createQueue(entry.getValue().toString()));
1:             }
1:         }
1:     }
1: 
0:     protected void createTopics(Map data, Hashtable environment) {
1:         for (Iterator iter = environment.entrySet().iterator(); iter.hasNext();) {
0:             Map.Entry entry = (Map.Entry) iter.next();
1:             String key = entry.getKey().toString();
1:             if (key.startsWith(topicPrefix)) {
1:                 String jndiName = key.substring(topicPrefix.length());
1:                 data.put(jndiName, createTopic(entry.getValue().toString()));
1:             }
1:         }
1:     }
1: 
1:     /**
1:      * Factory method to create new Queue instances
1:      */
1:     protected Queue createQueue(String name) {
1:         return new ActiveMQQueue(name);
1:     }
1: 
1:     /**
1:      * Factory method to create new Topic instances
1:      */
1:     protected Topic createTopic(String name) {
1:         return new ActiveMQTopic(name);
1:     }
1: 	
1:     /**
0:      * Factory method to create a new connection factory from the given environment
1:      */
0:     protected ActiveMQConnectionFactory createConnectionFactory(Hashtable environment) throws URISyntaxException {
0:         ActiveMQConnectionFactory answer = new ActiveMQConnectionFactory();
1:         Properties properties = new Properties();
1:         properties.putAll(environment);
1:         answer.setProperties(properties);
1:         return answer;
1:     }
1: 
1:     public String getConnectionPrefix() {
1:         return connectionPrefix;
1:     }
1:     
1: 
1:     public void setConnectionPrefix(String connectionPrefix) {
1:         this.connectionPrefix = connectionPrefix;
1:     }
1:     
1: }
author:Gary Tully
-------------------------------------------------------------------------------
commit:75bd4f2
/////////////////////////////////////////////////////////////////////////
1:     private static final String[] DEFAULT_CONNECTION_FACTORY_NAMES = {"ConnectionFactory", "XAConnectionFactory", "QueueConnectionFactory", "TopicConnectionFactory"};
/////////////////////////////////////////////////////////////////////////
1:         if (DEFAULT_CONNECTION_FACTORY_NAMES[1].equals(name)) {
1:             // don't try to mod environment, it may be readonly
1:             temp.put("xa", String.valueOf(true));
0:         }
commit:d914548
/////////////////////////////////////////////////////////////////////////
1: import org.apache.activemq.ActiveMQXAConnectionFactory;
/////////////////////////////////////////////////////////////////////////
1:         ActiveMQConnectionFactory answer = needsXA(environment) ? new ActiveMQXAConnectionFactory() : new ActiveMQConnectionFactory();
0:     private boolean needsXA(Hashtable environment) {
1:         boolean isXA = Boolean.parseBoolean((String) environment.get("xa"));
1:         // property not applicable to connectionfactory so remove
1:         environment.remove("xa");
1:         return isXA;
0:     }
0: 
author:James Strachan
-------------------------------------------------------------------------------
commit:3b973bc
/////////////////////////////////////////////////////////////////////////
1:         return createContext(environment, data);
/////////////////////////////////////////////////////////////////////////
0: 
0:     protected ReadOnlyContext createContext(Hashtable environment, Map data) {
0:         return new ReadOnlyContext(environment, data);
0:     }
0: 
0:     protected ActiveMQConnectionFactory createConnectionFactory(String name, Hashtable environment)   throws URISyntaxException {
0:         Hashtable temp = new Hashtable(environment);
0:         String prefix = connectionPrefix+name+".";
0:         for (Iterator iter = environment.entrySet().iterator(); iter.hasNext();) {
0:             Map.Entry entry = (Map.Entry) iter.next();
0:             String key = (String) entry.getKey();
0:             if( key.startsWith(prefix) ) {
0:                 // Rename the key...
0:                 temp.remove(key);
0:                 key = key.substring(prefix.length());
0:                 temp.put(key, entry.getValue());
0:             }
0:         }
0:         return createConnectionFactory(temp);
0:     }
0: 
============================================================================