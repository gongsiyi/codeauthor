1:0c0be94: /**
1:fc00993:  * Licensed to the Apache Software Foundation (ASF) under one or more
1:fc00993:  * contributor license agreements.  See the NOTICE file distributed with
1:fc00993:  * this work for additional information regarding copyright ownership.
1:fc00993:  * The ASF licenses this file to You under the Apache License, Version 2.0
1:fc00993:  * (the "License"); you may not use this file except in compliance with
1:fc00993:  * the License.  You may obtain a copy of the License at
1:fc00993:  *
1:fc00993:  *      http://www.apache.org/licenses/LICENSE-2.0
1:fc00993:  *
1:fc00993:  * Unless required by applicable law or agreed to in writing, software
1:fc00993:  * distributed under the License is distributed on an "AS IS" BASIS,
1:fc00993:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:fc00993:  * See the License for the specific language governing permissions and
1:fc00993:  * limitations under the License.
2:0c0be94:  */
1:0c0be94: package org.apache.activemq.broker.region.policy;
4:0c0be94: 
1:23cda2d: import org.apache.activemq.broker.Broker;
1:00879cf: import org.apache.activemq.broker.region.Subscription;
1:0c0be94: import org.apache.activemq.broker.region.cursors.PendingMessageCursor;
1:0c0be94: 
1:0c0be94: /**
1:230a86c:  * Abstraction to allow different policies for holding messages awaiting
1:230a86c:  * dispatch to active clients
1:b0c2a40:  * 
1:230a86c:  * 
1:230a86c:  */
1:230a86c: public interface PendingSubscriberMessageStoragePolicy {
1:230a86c: 
1:0c0be94:     /**
1:0c0be94:      * Retrieve the configured pending message storage cursor;
1:23cda2d:      * @param broker 
5:0c0be94:      * 
1:0c0be94:      * @param name
1:0c0be94:      * @param maxBatchSize
1:0c0be94:      * @return the Pending Message cursor
1:0c0be94:      */
1:00879cf:     PendingMessageCursor getSubscriberPendingMessageCursor(Broker broker,String name,int maxBatchSize,Subscription subs);
1:0c0be94: }
============================================================================
author:Hiram R. Chirino
-------------------------------------------------------------------------------
commit:58aca86
commit:b0c2a40
/////////////////////////////////////////////////////////////////////////
1:  * 
commit:fc00993
/////////////////////////////////////////////////////////////////////////
1:  * Licensed to the Apache Software Foundation (ASF) under one or more
1:  * contributor license agreements.  See the NOTICE file distributed with
1:  * this work for additional information regarding copyright ownership.
1:  * The ASF licenses this file to You under the Apache License, Version 2.0
1:  * (the "License"); you may not use this file except in compliance with
1:  * the License.  You may obtain a copy of the License at
1:  *
1:  *      http://www.apache.org/licenses/LICENSE-2.0
1:  *
1:  * Unless required by applicable law or agreed to in writing, software
1:  * distributed under the License is distributed on an "AS IS" BASIS,
1:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:  * See the License for the specific language governing permissions and
1:  * limitations under the License.
/////////////////////////////////////////////////////////////////////////
0:     PendingMessageCursor getSubscriberPendingMessageCursor(String name, Store tmpStorage, int maxBatchSize);
commit:230a86c
/////////////////////////////////////////////////////////////////////////
1:  * Abstraction to allow different policies for holding messages awaiting
1:  * dispatch to active clients
1:  * 
0:  * @version $Revision$
1:  */
1: public interface PendingSubscriberMessageStoragePolicy {
1: 
/////////////////////////////////////////////////////////////////////////
0:     public PendingMessageCursor getSubscriberPendingMessageCursor(String name, Store tmpStorage, int maxBatchSize);
author:Robert Davies
-------------------------------------------------------------------------------
commit:00879cf
/////////////////////////////////////////////////////////////////////////
1: import org.apache.activemq.broker.region.Subscription;
/////////////////////////////////////////////////////////////////////////
1:     PendingMessageCursor getSubscriberPendingMessageCursor(Broker broker,String name,int maxBatchSize,Subscription subs);
commit:23cda2d
/////////////////////////////////////////////////////////////////////////
1: import org.apache.activemq.broker.Broker;
/////////////////////////////////////////////////////////////////////////
1:      * @param broker 
0:     PendingMessageCursor getSubscriberPendingMessageCursor(Broker broker,String name,int maxBatchSize);
commit:0c0be94
/////////////////////////////////////////////////////////////////////////
1: /**
1:  * 
0:  * Licensed to the Apache Software Foundation (ASF) under one or more contributor license agreements. See the NOTICE
0:  * file distributed with this work for additional information regarding copyright ownership. The ASF licenses this file
0:  * to You under the Apache License, Version 2.0 (the "License"); you may not use this file except in compliance with the
0:  * License. You may obtain a copy of the License at
1:  * 
0:  * http://www.apache.org/licenses/LICENSE-2.0
1:  * 
0:  * Unless required by applicable law or agreed to in writing, software distributed under the License is distributed on
0:  * an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the License for the
0:  * specific language governing permissions and limitations under the License.
1:  */
1: 
1: package org.apache.activemq.broker.region.policy;
1: 
1: import org.apache.activemq.broker.region.cursors.PendingMessageCursor;
0: import org.apache.activemq.kaha.Store;
1: 
1: 
1: /**
0: * Abstraction to allow different policies for holding messages awaiting dispatch to active clients
1: * 
0: * @version $Revision$
1: */
0: public interface PendingSubscriberMessageStoragePolicy{
1:     
1:     /**
1:      * Retrieve the configured pending message storage cursor;
1:      * 
1:      * @param name
0:      * @param tmpStorage
1:      * @param maxBatchSize
1:      * @return the Pending Message cursor
1:      */
0:     public PendingMessageCursor getSubscriberPendingMessageCursor(String name,Store tmpStorage,
0:             int maxBatchSize);
1: }
============================================================================