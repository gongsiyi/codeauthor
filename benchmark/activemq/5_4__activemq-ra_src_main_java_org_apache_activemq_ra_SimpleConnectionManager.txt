1:92a698f: /**
1:57b4941:  * Licensed to the Apache Software Foundation (ASF) under one or more
1:57b4941:  * contributor license agreements.  See the NOTICE file distributed with
1:57b4941:  * this work for additional information regarding copyright ownership.
1:57b4941:  * The ASF licenses this file to You under the Apache License, Version 2.0
1:57b4941:  * (the "License"); you may not use this file except in compliance with
1:57b4941:  * the License.  You may obtain a copy of the License at
2:92a698f:  *
1:5f1adbe:  *      http://www.apache.org/licenses/LICENSE-2.0
1:92a698f:  *
1:40a7d3b:  * Unless required by applicable law or agreed to in writing, software
1:92a698f:  * distributed under the License is distributed on an "AS IS" BASIS,
1:92a698f:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:92a698f:  * See the License for the specific language governing permissions and
1:92a698f:  * limitations under the License.
1:92a698f:  */
1:fd4bb60: package org.apache.activemq.ra;
3:40a7d3b: 
1:40a7d3b: import javax.resource.ResourceException;
1:40a7d3b: import javax.resource.spi.ConnectionEvent;
1:40a7d3b: import javax.resource.spi.ConnectionEventListener;
1:40a7d3b: import javax.resource.spi.ConnectionManager;
1:40a7d3b: import javax.resource.spi.ConnectionRequestInfo;
1:40a7d3b: import javax.resource.spi.ManagedConnection;
1:40a7d3b: import javax.resource.spi.ManagedConnectionFactory;
1:40a7d3b: import javax.security.auth.Subject;
1:40a7d3b: 
1:8bf987b: import org.slf4j.Logger;
1:8bf987b: import org.slf4j.LoggerFactory;
1:40a7d3b: 
2:40a7d3b: /**
1:540dd5c:  * A simple implementation of a ConnectionManager. An Application Server will
1:540dd5c:  * have a better implementation with pooling and security etc.
1:b0c2a40:  * 
1:92a698f:  * 
1:40a7d3b:  */
1:40a7d3b: public class SimpleConnectionManager implements ConnectionManager, ConnectionEventListener {
1:40a7d3b: 
1:40a7d3b:     private static final long serialVersionUID = -7662970495944876239L;
1:540dd5c: 
1:8bf987b:     private static final Logger LOG = LoggerFactory.getLogger(SimpleConnectionManager.class);
1:40a7d3b: 
1:40a7d3b:     /**
1:540dd5c:      * @see javax.resource.spi.ConnectionManager#allocateConnection(javax.resource.spi.ManagedConnectionFactory,
1:540dd5c:      *      javax.resource.spi.ConnectionRequestInfo)
1:40a7d3b:      */
1:40a7d3b:     public Object allocateConnection(ManagedConnectionFactory connectionFactory, ConnectionRequestInfo info) throws ResourceException {
1:40a7d3b:         Subject subject = null;
1:40a7d3b:         ManagedConnection connection = connectionFactory.createManagedConnection(subject, info);
1:40a7d3b:         connection.addConnectionEventListener(this);
1:40a7d3b:         return connection.getConnection(subject, info);
5:40a7d3b:     }
1:40a7d3b: 
1:40a7d3b:     /**
1:40a7d3b:      * @see javax.resource.spi.ConnectionEventListener#connectionClosed(javax.resource.spi.ConnectionEvent)
1:40a7d3b:      */
1:40a7d3b:     public void connectionClosed(ConnectionEvent event) {
1:40a7d3b:         try {
1:540dd5c:             ((ManagedConnection)event.getSource()).cleanup();
1:540dd5c:         } catch (ResourceException e) {
1:540dd5c:             LOG.warn("Error occured during the cleanup of a managed connection: ", e);
1:40a7d3b:         }
1:40a7d3b:         try {
1:540dd5c:             ((ManagedConnection)event.getSource()).destroy();
1:540dd5c:         } catch (ResourceException e) {
1:540dd5c:             LOG.warn("Error occured during the destruction of a managed connection: ", e);
1:40a7d3b:         }
1:40a7d3b:     }
1:40a7d3b: 
1:40a7d3b:     /**
1:40a7d3b:      * @see javax.resource.spi.ConnectionEventListener#localTransactionStarted(javax.resource.spi.ConnectionEvent)
1:40a7d3b:      */
1:40a7d3b:     public void localTransactionStarted(ConnectionEvent event) {
1:40a7d3b:     }
1:40a7d3b: 
1:40a7d3b:     /**
1:40a7d3b:      * @see javax.resource.spi.ConnectionEventListener#localTransactionCommitted(javax.resource.spi.ConnectionEvent)
1:40a7d3b:      */
1:40a7d3b:     public void localTransactionCommitted(ConnectionEvent event) {
1:40a7d3b:     }
1:40a7d3b: 
1:40a7d3b:     /**
1:40a7d3b:      * @see javax.resource.spi.ConnectionEventListener#localTransactionRolledback(javax.resource.spi.ConnectionEvent)
1:40a7d3b:      */
1:40a7d3b:     public void localTransactionRolledback(ConnectionEvent event) {
1:40a7d3b:     }
1:40a7d3b: 
1:40a7d3b:     /**
1:40a7d3b:      * @see javax.resource.spi.ConnectionEventListener#connectionErrorOccurred(javax.resource.spi.ConnectionEvent)
1:40a7d3b:      */
1:40a7d3b:     public void connectionErrorOccurred(ConnectionEvent event) {
1:540dd5c:         LOG.warn("Managed connection experiened an error: ", event.getException());
1:40a7d3b:         try {
1:540dd5c:             ((ManagedConnection)event.getSource()).cleanup();
1:540dd5c:         } catch (ResourceException e) {
1:540dd5c:             LOG.warn("Error occured during the cleanup of a managed connection: ", e);
1:40a7d3b:         }
1:40a7d3b:         try {
1:540dd5c:             ((ManagedConnection)event.getSource()).destroy();
1:540dd5c:         } catch (ResourceException e) {
1:540dd5c:             LOG.warn("Error occured during the destruction of a managed connection: ", e);
1:40a7d3b:         }
1:40a7d3b:     }
1:40a7d3b: 
1:40a7d3b: }
============================================================================
author:Hadrian Zbarcea
-------------------------------------------------------------------------------
commit:d54d046
author:Hiram R. Chirino
-------------------------------------------------------------------------------
commit:b0c2a40
/////////////////////////////////////////////////////////////////////////
1:  * 
commit:540dd5c
/////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////
0: import org.apache.commons.logging.Log;
0: import org.apache.commons.logging.LogFactory;
1:  * A simple implementation of a ConnectionManager. An Application Server will
1:  * have a better implementation with pooling and security etc.
1: 
0:     private static final Log LOG = LogFactory.getLog(SimpleConnectionManager.class);
1:      * @see javax.resource.spi.ConnectionManager#allocateConnection(javax.resource.spi.ManagedConnectionFactory,
1:      *      javax.resource.spi.ConnectionRequestInfo)
/////////////////////////////////////////////////////////////////////////
1:             ((ManagedConnection)event.getSource()).cleanup();
1:         } catch (ResourceException e) {
1:             LOG.warn("Error occured during the cleanup of a managed connection: ", e);
1:             ((ManagedConnection)event.getSource()).destroy();
1:         } catch (ResourceException e) {
1:             LOG.warn("Error occured during the destruction of a managed connection: ", e);
/////////////////////////////////////////////////////////////////////////
1:         LOG.warn("Managed connection experiened an error: ", event.getException());
1:             ((ManagedConnection)event.getSource()).cleanup();
1:         } catch (ResourceException e) {
1:             LOG.warn("Error occured during the cleanup of a managed connection: ", e);
1:             ((ManagedConnection)event.getSource()).destroy();
1:         } catch (ResourceException e) {
1:             LOG.warn("Error occured during the destruction of a managed connection: ", e);
commit:5f1adbe
/////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////
1:  *      http://www.apache.org/licenses/LICENSE-2.0
commit:57b4941
/////////////////////////////////////////////////////////////////////////
1:  * Licensed to the Apache Software Foundation (ASF) under one or more
1:  * contributor license agreements.  See the NOTICE file distributed with
1:  * this work for additional information regarding copyright ownership.
1:  * The ASF licenses this file to You under the Apache License, Version 2.0
1:  * (the "License"); you may not use this file except in compliance with
1:  * the License.  You may obtain a copy of the License at
commit:48b4869
/////////////////////////////////////////////////////////////////////////
0:  * Copyright 2005-2006 The Apache Software Foundation
commit:fd4bb60
/////////////////////////////////////////////////////////////////////////
1: package org.apache.activemq.ra;
author:Bosanac Dejan
-------------------------------------------------------------------------------
commit:8bf987b
/////////////////////////////////////////////////////////////////////////
1: import org.slf4j.Logger;
1: import org.slf4j.LoggerFactory;
/////////////////////////////////////////////////////////////////////////
1:     private static final Logger LOG = LoggerFactory.getLogger(SimpleConnectionManager.class);
author:Jonas B. Lim
-------------------------------------------------------------------------------
commit:92a698f
/////////////////////////////////////////////////////////////////////////
1: /**
1:  *
0:  * Copyright 2004 The Apache Software Foundation
1:  *
0:  * Licensed under the Apache License, Version 2.0 (the "License");
0:  * you may not use this file except in compliance with the License.
0:  * You may obtain a copy of the License at
1:  *
1:  *
1:  * distributed under the License is distributed on an "AS IS" BASIS,
1:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:  * See the License for the specific language governing permissions and
1:  * limitations under the License.
1:  */
author:James Strachan
-------------------------------------------------------------------------------
commit:40a7d3b
/////////////////////////////////////////////////////////////////////////
1: /** 
0:  * 
0:  * Copyright 2004 Hiram Chirino
0:  * Copyright 2005 LogicBlaze Inc.
0:  * 
0:  * Licensed under the Apache License, Version 2.0 (the "License"); 
0:  * you may not use this file except in compliance with the License. 
0:  * You may obtain a copy of the License at 
0:  * 
0:  * http://www.apache.org/licenses/LICENSE-2.0
0:  * 
1:  * Unless required by applicable law or agreed to in writing, software
0:  * distributed under the License is distributed on an "AS IS" BASIS, 
0:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. 
0:  * See the License for the specific language governing permissions and 
0:  * limitations under the License. 
0:  * 
0:  **/
0: package org.activemq.ra;
1: 
0: import org.apache.commons.logging.Log;
0: import org.apache.commons.logging.LogFactory;
1: 
1: import javax.resource.ResourceException;
1: import javax.resource.spi.ConnectionEvent;
1: import javax.resource.spi.ConnectionEventListener;
1: import javax.resource.spi.ConnectionManager;
1: import javax.resource.spi.ConnectionRequestInfo;
1: import javax.resource.spi.ManagedConnection;
1: import javax.resource.spi.ManagedConnectionFactory;
1: import javax.security.auth.Subject;
1: 
1: 
1: /**
0:  * A simple implementation of a ConnectionManager.
0:  * An Application Server will have a better implementation with pooling and security etc.
0:  * 
0:  * @version $Revision$
1:  */
1: public class SimpleConnectionManager implements ConnectionManager, ConnectionEventListener {
1: 
1:     private static final long serialVersionUID = -7662970495944876239L;
1:     
0:     private static final Log log = LogFactory.getLog(SimpleConnectionManager.class);
1: 
1:     /**
0:      * @see javax.resource.spi.ConnectionManager#allocateConnection(javax.resource.spi.ManagedConnectionFactory, javax.resource.spi.ConnectionRequestInfo)
1:      */
1:     public Object allocateConnection(ManagedConnectionFactory connectionFactory, ConnectionRequestInfo info) throws ResourceException {
1:         Subject subject = null;
1:         ManagedConnection connection = connectionFactory.createManagedConnection(subject, info);
1:         connection.addConnectionEventListener(this);
1:         return connection.getConnection(subject, info);
1:     }
1: 
1:     /**
1:      * @see javax.resource.spi.ConnectionEventListener#connectionClosed(javax.resource.spi.ConnectionEvent)
1:      */
1:     public void connectionClosed(ConnectionEvent event) {
1:         try {
0:             ((ManagedConnection) event.getSource()).cleanup();
1:         }
0:         catch (ResourceException e) {
0:             log.warn("Error occured during the cleanup of a managed connection: ", e);
1:         }
1:         try {
0:             ((ManagedConnection) event.getSource()).destroy();
1:         }
0:         catch (ResourceException e) {
0:             log.warn("Error occured during the destruction of a managed connection: ", e);
1:         }
1:     }
1: 
1:     /**
1:      * @see javax.resource.spi.ConnectionEventListener#localTransactionStarted(javax.resource.spi.ConnectionEvent)
1:      */
1:     public void localTransactionStarted(ConnectionEvent event) {
1:     }
1: 
1:     /**
1:      * @see javax.resource.spi.ConnectionEventListener#localTransactionCommitted(javax.resource.spi.ConnectionEvent)
1:      */
1:     public void localTransactionCommitted(ConnectionEvent event) {
1:     }
1: 
1:     /**
1:      * @see javax.resource.spi.ConnectionEventListener#localTransactionRolledback(javax.resource.spi.ConnectionEvent)
1:      */
1:     public void localTransactionRolledback(ConnectionEvent event) {
1:     }
1: 
1:     /**
1:      * @see javax.resource.spi.ConnectionEventListener#connectionErrorOccurred(javax.resource.spi.ConnectionEvent)
1:      */
1:     public void connectionErrorOccurred(ConnectionEvent event) {
0:         log.warn("Managed connection experiened an error: ", event.getException());
1:         try {
0:             ((ManagedConnection) event.getSource()).cleanup();
1:         }
0:         catch (ResourceException e) {
0:             log.warn("Error occured during the cleanup of a managed connection: ", e);
1:         }
1:         try {
0:             ((ManagedConnection) event.getSource()).destroy();
1:         }
0:         catch (ResourceException e) {
0:             log.warn("Error occured during the destruction of a managed connection: ", e);
1:         }
1:     }
1: 
1: }
============================================================================