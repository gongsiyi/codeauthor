1:1a88ac6: /**
1:1a88ac6:  * Licensed to the Apache Software Foundation (ASF) under one or more
1:1a88ac6:  * contributor license agreements.  See the NOTICE file distributed with
1:1a88ac6:  * this work for additional information regarding copyright ownership.
1:1a88ac6:  * The ASF licenses this file to You under the Apache License, Version 2.0
1:1a88ac6:  * (the "License"); you may not use this file except in compliance with
1:1a88ac6:  * the License.  You may obtain a copy of the License at
9:1a88ac6:  *
1:5f1adbe:  *      http://www.apache.org/licenses/LICENSE-2.0
1:540dd5c:  *
1:1a88ac6:  * Unless required by applicable law or agreed to in writing, software
1:1a88ac6:  * distributed under the License is distributed on an "AS IS" BASIS,
1:1a88ac6:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:1a88ac6:  * See the License for the specific language governing permissions and
1:1a88ac6:  * limitations under the License.
1:1a88ac6:  */
3:540dd5c: 
1:1a88ac6: package org.apache.activemq.jaas;
1:540dd5c: 
1:1a88ac6: import java.security.cert.X509Certificate;
1:8d63083: import java.util.Collections;
1:1a88ac6: import java.util.Enumeration;
1:1a88ac6: import java.util.HashSet;
1:1a88ac6: import java.util.Map;
1:1a88ac6: import java.util.Properties;
1:1a88ac6: import java.util.Set;
1:540dd5c: 
1:1a88ac6: import javax.security.auth.Subject;
1:1a88ac6: import javax.security.auth.callback.CallbackHandler;
1:1a88ac6: import javax.security.auth.login.LoginException;
1:540dd5c: 
1:1a88ac6: /**
1:540dd5c:  * A LoginModule allowing for SSL certificate based authentication based on
1:540dd5c:  * Distinguished Names (DN) stored in text files. The DNs are parsed using a
1:540dd5c:  * Properties class where each line is <user_name>=<user_DN>. This class also
1:540dd5c:  * uses a group definition file where each line is <group_name>=<user_name_1>,<user_name_2>,etc.
1:540dd5c:  * The user and group files' locations must be specified in the
1:540dd5c:  * org.apache.activemq.jaas.textfiledn.user and
1:540dd5c:  * org.apache.activemq.jaas.textfiledn.user properties respectively. NOTE: This
1:540dd5c:  * class will re-read user and group files for every authentication (i.e it does
1:540dd5c:  * live updates of allowed groups and users).
1:12b26b6:  *
1:1a88ac6:  * @author sepandm@gmail.com (Sepand)
1:1a88ac6:  */
1:1a88ac6: public class TextFileCertificateLoginModule extends CertificateLoginModule {
1:540dd5c: 
1:59cd018:     private static final String USER_FILE_PROP_NAME = "org.apache.activemq.jaas.textfiledn.user";
1:59cd018:     private static final String GROUP_FILE_PROP_NAME = "org.apache.activemq.jaas.textfiledn.group";
1:540dd5c: 
1:8d63083:     private Map<String, Set<String>> groupsByUser;
1:59cd018:     private Map<String, String> usersByDn;
1:540dd5c: 
1:1a88ac6:     /**
1:540dd5c:      * Performs initialization of file paths. A standard JAAS override.
1:1a88ac6:      */
1:1667d80:     @Override
1:1a88ac6:     public void initialize(Subject subject, CallbackHandler callbackHandler, Map sharedState, Map options) {
1:540dd5c:         super.initialize(subject, callbackHandler, sharedState, options);
1:540dd5c: 
1:59cd018:         usersByDn = load(USER_FILE_PROP_NAME, "", options).invertedPropertiesMap();
1:8d63083:         groupsByUser = load(GROUP_FILE_PROP_NAME, "", options).invertedPropertiesValuesMap();
1:59cd018:      }
1:540dd5c: 
1:1a88ac6:     /**
1:540dd5c:      * Overriding to allow DN authorization based on DNs specified in text
1:540dd5c:      * files.
1:12b26b6:      *
1:1a88ac6:      * @param certs The certificate the incoming connection provided.
1:540dd5c:      * @return The user's authenticated name or null if unable to authenticate
1:540dd5c:      *         the user.
1:540dd5c:      * @throws LoginException Thrown if unable to find user file or connection
1:540dd5c:      *                 certificate.
1:1a88ac6:      */
1:1667d80:     @Override
1:1a88ac6:     protected String getUserNameForCertificates(final X509Certificate[] certs) throws LoginException {
1:1a88ac6:         if (certs == null) {
1:1a88ac6:             throw new LoginException("Client certificates not found. Cannot authenticate.");
9:1a88ac6:         }
1:540dd5c: 
1:59cd018:         return usersByDn.get(getDistinguishedName(certs));
1:1a88ac6:     }
1:540dd5c: 
1:1a88ac6:     /**
1:1a88ac6:      * Overriding to allow for group discovery based on text files.
1:12b26b6:      *
1:540dd5c:      * @param username The name of the user being examined. This is the same
1:540dd5c:      *                name returned by getUserNameForCertificates.
1:1a88ac6:      * @return A Set of name Strings for groups this user belongs to.
1:1a88ac6:      * @throws LoginException Thrown if unable to find group definition file.
1:1a88ac6:      */
1:1667d80:     @Override
1:540dd5c:     protected Set<String> getUserGroups(String username) throws LoginException {
1:8d63083:         Set<String> userGroups = groupsByUser.get(username);
1:8d63083:         if (userGroups == null) {
1:8d63083:             userGroups = Collections.emptySet();
1:1a88ac6:         }
1:1a88ac6:         return userGroups;
1:1a88ac6:     }
1:1a88ac6: }
============================================================================
author:gtully
-------------------------------------------------------------------------------
commit:8d63083
/////////////////////////////////////////////////////////////////////////
1: import java.util.Collections;
/////////////////////////////////////////////////////////////////////////
1:     private Map<String, Set<String>> groupsByUser;
/////////////////////////////////////////////////////////////////////////
1:         groupsByUser = load(GROUP_FILE_PROP_NAME, "", options).invertedPropertiesValuesMap();
/////////////////////////////////////////////////////////////////////////
1:         Set<String> userGroups = groupsByUser.get(username);
1:         if (userGroups == null) {
1:             userGroups = Collections.emptySet();
commit:59cd018
/////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////
1:     private static final String USER_FILE_PROP_NAME = "org.apache.activemq.jaas.textfiledn.user";
1:     private static final String GROUP_FILE_PROP_NAME = "org.apache.activemq.jaas.textfiledn.group";
0:     private Properties groups;
1:     private Map<String, String> usersByDn;
/////////////////////////////////////////////////////////////////////////
1:         usersByDn = load(USER_FILE_PROP_NAME, "", options).invertedPropertiesMap();
0:         groups = load(GROUP_FILE_PROP_NAME, "", options).getProps();
1:      }
/////////////////////////////////////////////////////////////////////////
1:         return usersByDn.get(getDistinguishedName(certs));
/////////////////////////////////////////////////////////////////////////
author:Christopher L. Shannon (cshannon)
-------------------------------------------------------------------------------
commit:12b26b6
/////////////////////////////////////////////////////////////////////////
1:  *
/////////////////////////////////////////////////////////////////////////
1:      *
/////////////////////////////////////////////////////////////////////////
0:         try(java.io.FileInputStream in = new java.io.FileInputStream(usersFile)) {
/////////////////////////////////////////////////////////////////////////
1:      *
author:Gary Tully
-------------------------------------------------------------------------------
commit:1667d80
/////////////////////////////////////////////////////////////////////////
1:     @Override
/////////////////////////////////////////////////////////////////////////
1:     @Override
/////////////////////////////////////////////////////////////////////////
0:         for (Enumeration<Object> vals = users.elements(); vals.hasMoreElements();) {
/////////////////////////////////////////////////////////////////////////
1:     @Override
/////////////////////////////////////////////////////////////////////////
0:         for (Enumeration<Object> enumeration = groups.keys(); enumeration.hasMoreElements();) {
author:Hiram R. Chirino
-------------------------------------------------------------------------------
commit:540dd5c
/////////////////////////////////////////////////////////////////////////
1:  * A LoginModule allowing for SSL certificate based authentication based on
1:  * Distinguished Names (DN) stored in text files. The DNs are parsed using a
1:  * Properties class where each line is <user_name>=<user_DN>. This class also
1:  * uses a group definition file where each line is <group_name>=<user_name_1>,<user_name_2>,etc.
1:  * The user and group files' locations must be specified in the
1:  * org.apache.activemq.jaas.textfiledn.user and
1:  * org.apache.activemq.jaas.textfiledn.user properties respectively. NOTE: This
1:  * class will re-read user and group files for every authentication (i.e it does
1:  * live updates of allowed groups and users).
1: 
1: 
1: 
1:      * Performs initialization of file paths. A standard JAAS override.
1:         super.initialize(subject, callbackHandler, sharedState, options);
1: 
0:         usersFilePathname = (String)options.get(USER_FILE) + "";
0:         groupsFilePathname = (String)options.get(GROUP_FILE) + "";
1: 
1:      * Overriding to allow DN authorization based on DNs specified in text
1:      * files.
1:      * 
1:      * @return The user's authenticated name or null if unable to authenticate
1:      *         the user.
1:      * @throws LoginException Thrown if unable to find user file or connection
1:      *                 certificate.
1: 
0:         File usersFile = new File(baseDir, usersFilePathname);
1: 
1: 
0:             java.io.FileInputStream in = new java.io.FileInputStream(usersFile);
1: 
1: 
0:         Enumeration<Object> keys = users.keys();
0:         for (Enumeration vals = users.elements(); vals.hasMoreElements();) {
0:             if (((String)vals.nextElement()).equals(dn)) {
1: 
1: 
1:      * @param username The name of the user being examined. This is the same
1:      *                name returned by getUserNameForCertificates.
1:     protected Set<String> getUserGroups(String username) throws LoginException {
1: 
0:             java.io.FileInputStream in = new java.io.FileInputStream(groupsFile);
0:         Set<String> userGroups = new HashSet<String>();
0:             String groupName = (String)enumeration.nextElement();
/////////////////////////////////////////////////////////////////////////
0: 
commit:5f1adbe
/////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////
1:  *      http://www.apache.org/licenses/LICENSE-2.0
commit:a8b1810
/////////////////////////////////////////////////////////////////////////
0:         String dn = getDistinguishedName(certs);
commit:1a88ac6
/////////////////////////////////////////////////////////////////////////
1: /**
1:  *
1:  * Licensed to the Apache Software Foundation (ASF) under one or more
1:  * contributor license agreements.  See the NOTICE file distributed with
1:  * this work for additional information regarding copyright ownership.
1:  * The ASF licenses this file to You under the Apache License, Version 2.0
1:  * (the "License"); you may not use this file except in compliance with
1:  * the License.  You may obtain a copy of the License at
1:  *
0:  * http://www.apache.org/licenses/LICENSE-2.0
1:  *
1:  * Unless required by applicable law or agreed to in writing, software
1:  * distributed under the License is distributed on an "AS IS" BASIS,
1:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:  * See the License for the specific language governing permissions and
1:  * limitations under the License.
1:  */
0: 
1: package org.apache.activemq.jaas;
0: 
0: import java.io.File;
0: import java.io.IOException;
1: import java.security.cert.X509Certificate;
1: import java.util.Enumeration;
1: import java.util.HashSet;
1: import java.util.Map;
1: import java.util.Properties;
1: import java.util.Set;
0: 
1: import javax.security.auth.Subject;
1: import javax.security.auth.callback.CallbackHandler;
1: import javax.security.auth.login.LoginException;
0: 
1: /**
0:  * A LoginModule allowing for SSL certificate based authentication based on Distinguished Names (DN) stored in text
0:  *      files.
1:  *      
0:  * The DNs are parsed using a Properties class where each line is <user_name>=<user_DN>.
0:  * This class also uses a group definition file where each line is <group_name>=<user_name_1>,<user_name_2>,etc.
0:  * The user and group files' locations must be specified in the org.apache.activemq.jaas.textfiledn.user and
0:  *      org.apache.activemq.jaas.textfiledn.user properties respectively.
1:  * 
0:  * NOTE: This class will re-read user and group files for every authentication (i.e it does live updates of allowed
0:  *      groups and users).
1:  * 
1:  * @author sepandm@gmail.com (Sepand)
1:  */
1: public class TextFileCertificateLoginModule extends CertificateLoginModule {
0:     
0:     private final String USER_FILE = "org.apache.activemq.jaas.textfiledn.user";
0:     private final String GROUP_FILE = "org.apache.activemq.jaas.textfiledn.group";
0:     
0:     private File baseDir;
0:     private String usersFilePathname;
0:     private String groupsFilePathname;
0:     
1:     /**
0:      * Performs initialization of file paths.
1:      * 
0:      * A standard JAAS override.
1:      */
1:     public void initialize(Subject subject, CallbackHandler callbackHandler, Map sharedState, Map options) {
0:         super.initialize(subject, callbackHandler, sharedState, options);       
0:         if (System.getProperty("java.security.auth.login.config") != null) {
0:             baseDir = new File(System.getProperty("java.security.auth.login.config")).getParentFile();
0:         } else {
0:             baseDir = new File(".");
1:         }
0:         
0:         usersFilePathname = (String) options.get(USER_FILE)+"";
0:         groupsFilePathname = (String) options.get(GROUP_FILE)+"";
1:     }
0:     
1:     /**
0:      * Overriding to allow DN authorization based on DNs specified in text files.
1:      *  
1:      * @param certs The certificate the incoming connection provided.
0:      * @return The user's authenticated name or null if unable to authenticate the user.
0:      * @throws LoginException Thrown if unable to find user file or connection certificate. 
1:      */
1:     protected String getUserNameForCertificates(final X509Certificate[] certs) throws LoginException {
1:         if (certs == null) {
1:             throw new LoginException("Client certificates not found. Cannot authenticate.");
1:         }
0:         
0:         File usersFile = new File(baseDir,usersFilePathname);
0:         
0:         Properties users = new Properties();
0:         
0:         try {
0:             users.load(new java.io.FileInputStream(usersFile));
0:         } catch (IOException ioe) {
0:             throw new LoginException("Unable to load user properties file " + usersFile);
1:         }
0:         
0:         String dn = certs[0].getSubjectDN().getName();
0:         
0:         for(Enumeration vals = users.elements(), keys = users.keys(); vals.hasMoreElements(); ) {
0:             if ( ((String)vals.nextElement()).equals(dn) ) {
0:                 return (String)keys.nextElement();
0:             } else {
0:                 keys.nextElement();
1:             }
1:         }
0:         
0:         return null;
1:     }
0:     
1:     /**
1:      * Overriding to allow for group discovery based on text files.
1:      * 
0:      * @param username The name of the user being examined. This is the same name returned by
0:      *      getUserNameForCertificates.
1:      * @return A Set of name Strings for groups this user belongs to.
1:      * @throws LoginException Thrown if unable to find group definition file.
1:      */
0:     protected Set getUserGroups(String username) throws LoginException {
0:         File groupsFile = new File(baseDir, groupsFilePathname);
0:         
0:         Properties groups = new Properties();
0:         try {
0:             groups.load(new java.io.FileInputStream(groupsFile));
0:         } catch (IOException ioe) {
0:             throw new LoginException("Unable to load group properties file " + groupsFile);
1:         }
0:         Set userGroups = new HashSet();
0:         for (Enumeration enumeration = groups.keys(); enumeration.hasMoreElements();) {
0:             String groupName = (String) enumeration.nextElement();
0:             String[] userList = (groups.getProperty(groupName) + "").split(",");
0:             for (int i = 0; i < userList.length; i++) {
0:                 if (username.equals(userList[i])) {
0:                     userGroups.add(groupName);
0:                     break;
1:                 }
1:             }
1:         }
0:         
1:         return userGroups;
1:     }
1: }
author:Robert Davies
-------------------------------------------------------------------------------
commit:b266786
/////////////////////////////////////////////////////////////////////////
0:     private static final String USER_FILE = "org.apache.activemq.jaas.textfiledn.user";
0:     private static final String GROUP_FILE = "org.apache.activemq.jaas.textfiledn.group";
/////////////////////////////////////////////////////////////////////////
0:         	java.io.FileInputStream in = new java.io.FileInputStream(usersFile);
0:             users.load(in);
0:             in.close();
/////////////////////////////////////////////////////////////////////////
0:         	java.io.FileInputStream in = new java.io.FileInputStream(groupsFile);
0:             groups.load(in);
0:             in.close();
============================================================================