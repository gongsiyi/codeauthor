1:ed395d1: /*
1:3306467:  * Licensed to the Apache Software Foundation (ASF) under one or more
1:3306467:  * contributor license agreements.  See the NOTICE file distributed with
1:3306467:  * this work for additional information regarding copyright ownership.
1:3306467:  * The ASF licenses this file to You under the Apache License, Version 2.0
1:3306467:  * (the "License"); you may not use this file except in compliance with
1:3306467:  * the License.  You may obtain a copy of the License at
1:3306467:  *
1:3306467:  *      http://www.apache.org/licenses/LICENSE-2.0
1:3306467:  *
1:3306467:  * Unless required by applicable law or agreed to in writing, software
1:3306467:  * distributed under the License is distributed on an "AS IS" BASIS,
1:3306467:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:3306467:  * See the License for the specific language governing permissions and
1:3306467:  * limitations under the License.
1:3306467:  */
1:3306467: package org.apache.activemq.transport.amqp.protocol;
2:3306467: 
1:ed395d1: import java.util.ArrayDeque;
1:ed395d1: import java.util.Deque;
1:3306467: 
2:3306467: /**
1:3306467:  * Utility class that can generate and if enabled pool the binary tag values
1:3306467:  * used to identify transfers over an AMQP link.
1:3306467:  */
1:3306467: public final class AmqpTransferTagGenerator {
1:3306467: 
1:3306467:     public static final int DEFAULT_TAG_POOL_SIZE = 1024;
1:3306467: 
1:ed395d1:     private final Deque<byte[]> tagPool;
1:ed395d1: 
1:3306467:     private long nextTagId;
1:3306467:     private int maxPoolSize = DEFAULT_TAG_POOL_SIZE;
1:3306467: 
1:3306467:     public AmqpTransferTagGenerator() {
1:ed395d1:         this(true);
1:3306467:     }
1:3306467: 
1:3306467:     public AmqpTransferTagGenerator(boolean pool) {
1:3306467:         if (pool) {
1:ed395d1:             this.tagPool = new ArrayDeque<>();
2:3306467:         } else {
1:3306467:             this.tagPool = null;
1:3306467:         }
1:3306467:     }
1:3306467: 
1:3306467:     /**
1:3306467:      * Retrieves the next available tag.
1:3306467:      *
1:3306467:      * @return a new or unused tag depending on the pool option.
1:3306467:      */
1:3306467:     public byte[] getNextTag() {
1:ed395d1:         byte[] tagBytes = null;
1:ed395d1: 
1:ed395d1:         if (tagPool != null) {
1:ed395d1:             tagBytes = tagPool.pollFirst();
1:ed395d1:         }
1:ed395d1: 
1:ed395d1:         if (tagBytes == null) {
1:ed395d1:             long tag = nextTagId++;
1:ed395d1:             int size = encodingSize(tag);
1:ed395d1: 
1:ed395d1:             tagBytes = new byte[size];
1:ed395d1: 
1:ed395d1:             for (int i = 0; i < size; ++i) {
1:ed395d1:                 tagBytes[size - 1 - i] = (byte) (tag >>> (i * 8));
1:3306467:             }
1:3306467:         }
1:ed395d1: 
1:ed395d1:         return tagBytes;
1:3306467:     }
1:3306467: 
1:3306467:     /**
1:3306467:      * When used as a pooled cache of tags the unused tags should always be returned once
1:3306467:      * the transfer has been settled.
1:3306467:      *
1:3306467:      * @param data
1:3306467:      *        a previously borrowed tag that is no longer in use.
1:3306467:      */
1:3306467:     public void returnTag(byte[] data) {
1:3306467:         if (tagPool != null && tagPool.size() < maxPoolSize) {
1:ed395d1:             tagPool.offerLast(data);
1:3306467:         }
1:3306467:     }
1:3306467: 
1:3306467:     /**
1:3306467:      * Gets the current max pool size value.
1:3306467:      *
1:3306467:      * @return the current max tag pool size.
1:3306467:      */
1:3306467:     public int getMaxPoolSize() {
1:3306467:         return maxPoolSize;
1:3306467:     }
1:3306467: 
1:3306467:     /**
1:3306467:      * Sets the max tag pool size.  If the size is smaller than the current number
1:3306467:      * of pooled tags the pool will drain over time until it matches the max.
1:3306467:      *
1:3306467:      * @param maxPoolSize
1:3306467:      *        the maximum number of tags to hold in the pool.
1:3306467:      */
1:3306467:     public void setMaxPoolSize(int maxPoolSize) {
1:3306467:         this.maxPoolSize = maxPoolSize;
1:3306467:     }
1:ed395d1: 
1:ed395d1:     /**
1:ed395d1:      * @return true if the generator is using a pool of tags to reduce allocations.
1:ed395d1:      */
1:ed395d1:     public boolean isPooling() {
1:ed395d1:         return tagPool != null;
1:ed395d1:     }
1:ed395d1: 
1:ed395d1:     private int encodingSize(long value) {
1:ed395d1:         if (value < 0) {
1:ed395d1:             return Long.BYTES;
1:ed395d1:         }
1:ed395d1: 
1:ed395d1:         int size = 1;
1:ed395d1:         while (size < 8 && (value >= (1L << (size * 8)))) {
1:ed395d1:             size++;
1:ed395d1:         }
1:ed395d1: 
1:ed395d1:         return size;
1:ed395d1:     }
1:3306467: }
============================================================================
author:Timothy Bish
-------------------------------------------------------------------------------
commit:ed395d1
/////////////////////////////////////////////////////////////////////////
1: /*
/////////////////////////////////////////////////////////////////////////
1: import java.util.ArrayDeque;
1: import java.util.Deque;
/////////////////////////////////////////////////////////////////////////
1:     private final Deque<byte[]> tagPool;
1: 
1:         this(true);
1:             this.tagPool = new ArrayDeque<>();
/////////////////////////////////////////////////////////////////////////
1:         byte[] tagBytes = null;
1: 
1:         if (tagPool != null) {
1:             tagBytes = tagPool.pollFirst();
1:         }
1: 
1:         if (tagBytes == null) {
1:             long tag = nextTagId++;
1:             int size = encodingSize(tag);
1: 
1:             tagBytes = new byte[size];
1: 
1:             for (int i = 0; i < size; ++i) {
1:                 tagBytes[size - 1 - i] = (byte) (tag >>> (i * 8));
1: 
1:         return tagBytes;
/////////////////////////////////////////////////////////////////////////
1:             tagPool.offerLast(data);
/////////////////////////////////////////////////////////////////////////
1: 
1:     /**
1:      * @return true if the generator is using a pool of tags to reduce allocations.
1:      */
1:     public boolean isPooling() {
1:         return tagPool != null;
1:     }
1: 
1:     private int encodingSize(long value) {
1:         if (value < 0) {
1:             return Long.BYTES;
1:         }
1: 
1:         int size = 1;
1:         while (size < 8 && (value >= (1L << (size * 8)))) {
1:             size++;
1:         }
1: 
1:         return size;
1:     }
commit:3306467
/////////////////////////////////////////////////////////////////////////
1: /**
1:  * Licensed to the Apache Software Foundation (ASF) under one or more
1:  * contributor license agreements.  See the NOTICE file distributed with
1:  * this work for additional information regarding copyright ownership.
1:  * The ASF licenses this file to You under the Apache License, Version 2.0
1:  * (the "License"); you may not use this file except in compliance with
1:  * the License.  You may obtain a copy of the License at
1:  *
1:  *      http://www.apache.org/licenses/LICENSE-2.0
1:  *
1:  * Unless required by applicable law or agreed to in writing, software
1:  * distributed under the License is distributed on an "AS IS" BASIS,
1:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:  * See the License for the specific language governing permissions and
1:  * limitations under the License.
1:  */
1: package org.apache.activemq.transport.amqp.protocol;
1: 
0: import java.io.UnsupportedEncodingException;
0: import java.util.Iterator;
0: import java.util.LinkedHashSet;
0: import java.util.Set;
1: 
1: /**
1:  * Utility class that can generate and if enabled pool the binary tag values
1:  * used to identify transfers over an AMQP link.
1:  */
1: public final class AmqpTransferTagGenerator {
1: 
1:     public static final int DEFAULT_TAG_POOL_SIZE = 1024;
1: 
1:     private long nextTagId;
1:     private int maxPoolSize = DEFAULT_TAG_POOL_SIZE;
1: 
0:     private final Set<byte[]> tagPool;
1: 
1:     public AmqpTransferTagGenerator() {
0:         this(false);
1:     }
1: 
1:     public AmqpTransferTagGenerator(boolean pool) {
1:         if (pool) {
0:             this.tagPool = new LinkedHashSet<byte[]>();
1:         } else {
1:             this.tagPool = null;
1:         }
1:     }
1: 
1:     /**
1:      * Retrieves the next available tag.
1:      *
1:      * @return a new or unused tag depending on the pool option.
1:      */
1:     public byte[] getNextTag() {
0:         byte[] rc;
0:         if (tagPool != null && !tagPool.isEmpty()) {
0:             final Iterator<byte[]> iterator = tagPool.iterator();
0:             rc = iterator.next();
0:             iterator.remove();
1:         } else {
0:             try {
0:                 rc = Long.toHexString(nextTagId++).getBytes("UTF-8");
0:             } catch (UnsupportedEncodingException e) {
0:                 // This should never happen since we control the input.
0:                 throw new RuntimeException(e);
1:             }
1:         }
0:         return rc;
1:     }
1: 
1:     /**
1:      * When used as a pooled cache of tags the unused tags should always be returned once
1:      * the transfer has been settled.
1:      *
1:      * @param data
1:      *        a previously borrowed tag that is no longer in use.
1:      */
1:     public void returnTag(byte[] data) {
1:         if (tagPool != null && tagPool.size() < maxPoolSize) {
0:             tagPool.add(data);
1:         }
1:     }
1: 
1:     /**
1:      * Gets the current max pool size value.
1:      *
1:      * @return the current max tag pool size.
1:      */
1:     public int getMaxPoolSize() {
1:         return maxPoolSize;
1:     }
1: 
1:     /**
1:      * Sets the max tag pool size.  If the size is smaller than the current number
1:      * of pooled tags the pool will drain over time until it matches the max.
1:      *
1:      * @param maxPoolSize
1:      *        the maximum number of tags to hold in the pool.
1:      */
1:     public void setMaxPoolSize(int maxPoolSize) {
1:         this.maxPoolSize = maxPoolSize;
1:     }
1: }
============================================================================