1:9ce91fa: /**
1:9ce91fa:  * Licensed to the Apache Software Foundation (ASF) under one or more
1:9ce91fa:  * contributor license agreements.  See the NOTICE file distributed with
1:9ce91fa:  * this work for additional information regarding copyright ownership.
1:9ce91fa:  * The ASF licenses this file to You under the Apache License, Version 2.0
1:9ce91fa:  * (the "License"); you may not use this file except in compliance with
1:9ce91fa:  * the License.  You may obtain a copy of the License at
1:9ce91fa:  *
1:9ce91fa:  *      http://www.apache.org/licenses/LICENSE-2.0
1:9ce91fa:  *
1:9ce91fa:  * Unless required by applicable law or agreed to in writing, software
1:9ce91fa:  * distributed under the License is distributed on an "AS IS" BASIS,
1:9ce91fa:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:9ce91fa:  * See the License for the specific language governing permissions and
1:9ce91fa:  * limitations under the License.
1:9ce91fa:  */
1:9ce91fa: package org.apache.activemq.transport.failover;
2:9ce91fa: 
1:9ce91fa: import java.io.IOException;
1:9ce91fa: import java.net.URI;
1:9ce91fa: import java.util.ArrayList;
1:9ce91fa: import java.util.Collection;
1:9ce91fa: import java.util.Set;
1:444412f: import java.util.concurrent.atomic.AtomicBoolean;
1:9ce91fa: 
1:9ce91fa: import javax.jms.Connection;
1:9ce91fa: import javax.jms.DeliveryMode;
1:e53668e: import javax.jms.ExceptionListener;
1:9ce91fa: import javax.jms.JMSException;
1:9ce91fa: import javax.jms.Message;
1:9ce91fa: import javax.jms.MessageConsumer;
1:9ce91fa: import javax.jms.MessageProducer;
1:9ce91fa: import javax.jms.Session;
1:9ce91fa: import javax.jms.TextMessage;
1:cc700dd: import javax.jms.TransactionRolledBackException;
1:9ce91fa: 
1:9ce91fa: import junit.framework.TestCase;
1:9ce91fa: 
1:9ce91fa: import org.apache.activemq.ActiveMQConnectionFactory;
1:9ce91fa: import org.apache.activemq.broker.BrokerService;
1:9ce91fa: import org.apache.activemq.broker.TransportConnector;
1:9ce91fa: import org.apache.activemq.broker.region.Destination;
1:9ce91fa: import org.apache.activemq.broker.region.Queue;
1:9ce91fa: import org.apache.activemq.command.ActiveMQQueue;
1:9ce91fa: import org.apache.activemq.util.ServiceStopper;
1:9ce91fa: import org.apache.log4j.Logger;
1:9ce91fa: 
1:9ce91fa: /**
1:9ce91fa:  * TestCase showing the message-destroying described in AMQ-1925
1:b0c2a40:  * 
1:9ce91fa:  * 
1:9ce91fa:  */
1:e53668e: public class AMQ1925Test extends TestCase implements ExceptionListener {
1:9ce91fa: 	private static final Logger log = Logger.getLogger(AMQ1925Test.class);
1:9ce91fa: 
1:9ce91fa: 	private static final String QUEUE_NAME = "test.amq1925";
1:9ce91fa: 	private static final String PROPERTY_MSG_NUMBER = "NUMBER";
1:9ce91fa: 	private static final int MESSAGE_COUNT = 10000;
1:9ce91fa: 
1:9ce91fa: 	private BrokerService bs;
1:9ce91fa: 	private URI tcpUri;
1:9ce91fa: 	private ActiveMQConnectionFactory cf;
1:9ce91fa: 
1:e53668e:     private JMSException exception;
1:e53668e: 
1:0706a4c: 	public void XtestAMQ1925_TXInProgress() throws Exception {
1:9ce91fa: 		Connection connection = cf.createConnection();
1:9ce91fa: 		connection.start();
1:9ce91fa: 		Session session = connection.createSession(true,
1:9ce91fa: 				Session.SESSION_TRANSACTED);
1:9ce91fa: 		MessageConsumer consumer = session.createConsumer(session
1:9ce91fa: 				.createQueue(QUEUE_NAME));
1:9ce91fa: 
1:9ce91fa: 		// The runnable is likely to interrupt during the session#commit, since
1:9ce91fa: 		// this takes the longest
1:9ce91fa: 		final Object starter = new Object();
1:9ce91fa: 		final AtomicBoolean restarted = new AtomicBoolean();
1:9ce91fa: 		new Thread(new Runnable() {
1:9ce91fa: 			public void run() {
1:9ce91fa: 				try {
1:9ce91fa: 					synchronized (starter) {
1:9ce91fa: 						starter.wait();
1:9ce91fa: 					}
1:9ce91fa: 
1:9ce91fa: 					// Simulate broker failure & restart
1:9ce91fa: 					bs.stop();
1:9ce91fa: 					bs = new BrokerService();
1:9ce91fa: 					bs.setPersistent(true);
1:9ce91fa: 					bs.setUseJmx(true);
1:9ce91fa: 					bs.addConnector(tcpUri);
1:9ce91fa: 					bs.start();
1:9ce91fa: 
1:9ce91fa: 					restarted.set(true);
1:9ce91fa: 				} catch (Exception e) {
1:9ce91fa: 					e.printStackTrace();
1:9ce91fa: 				}
1:9ce91fa: 			}
1:9ce91fa: 		}).start();
1:9ce91fa: 
1:9ce91fa: 		synchronized (starter) {
1:9ce91fa: 			starter.notifyAll();
1:9ce91fa: 		}
1:9ce91fa: 		for (int i = 0; i < MESSAGE_COUNT; i++) {
3:9ce91fa: 			Message message = consumer.receive(500);
1:9ce91fa: 			assertNotNull("No Message " + i + " found", message);
1:9ce91fa: 
1:9ce91fa: 			if (i < 10)
1:9ce91fa: 				assertFalse("Timing problem, restarted too soon", restarted
1:9ce91fa: 						.get());
1:9ce91fa: 			if (i == 10) {
1:9ce91fa: 				synchronized (starter) {
1:9ce91fa: 					starter.notifyAll();
1:9ce91fa: 				}
1:9ce91fa: 			}
1:9ce91fa: 			if (i > MESSAGE_COUNT - 100) {
1:9ce91fa: 				assertTrue("Timing problem, restarted too late", restarted
1:9ce91fa: 						.get());
1:9ce91fa: 			}
1:9ce91fa: 
1:9ce91fa: 			assertEquals(i, message.getIntProperty(PROPERTY_MSG_NUMBER));
2:9ce91fa: 			session.commit();
1:9ce91fa: 		}
1:9ce91fa: 		assertNull(consumer.receive(500));
1:9ce91fa: 
1:9ce91fa: 		consumer.close();
1:9ce91fa: 		session.close();
1:9ce91fa: 		connection.close();
1:9ce91fa: 
1:9ce91fa: 		assertQueueEmpty();
1:9ce91fa: 	}
1:9ce91fa: 
1:9ce91fa: 	public void XtestAMQ1925_TXInProgress_TwoConsumers() throws Exception {
1:9ce91fa: 		Connection connection = cf.createConnection();
1:9ce91fa: 		connection.start();
1:9ce91fa: 		Session session1 = connection.createSession(true,
1:9ce91fa: 				Session.SESSION_TRANSACTED);
1:9ce91fa: 		MessageConsumer consumer1 = session1.createConsumer(session1
1:9ce91fa: 				.createQueue(QUEUE_NAME));
1:9ce91fa: 		Session session2 = connection.createSession(true,
1:9ce91fa: 				Session.SESSION_TRANSACTED);
1:9ce91fa: 		MessageConsumer consumer2 = session2.createConsumer(session2
1:9ce91fa: 				.createQueue(QUEUE_NAME));
1:9ce91fa: 
1:9ce91fa: 		// The runnable is likely to interrupt during the session#commit, since
1:9ce91fa: 		// this takes the longest
1:9ce91fa: 		final Object starter = new Object();
1:9ce91fa: 		final AtomicBoolean restarted = new AtomicBoolean();
1:9ce91fa: 		new Thread(new Runnable() {
1:9ce91fa: 			public void run() {
1:9ce91fa: 				try {
1:9ce91fa: 					synchronized (starter) {
1:9ce91fa: 						starter.wait();
1:9ce91fa: 					}
1:9ce91fa: 
1:9ce91fa: 					// Simulate broker failure & restart
1:9ce91fa: 					bs.stop();
1:9ce91fa: 					bs = new BrokerService();
1:9ce91fa: 					bs.setPersistent(true);
1:9ce91fa: 					bs.setUseJmx(true);
1:9ce91fa: 					bs.addConnector(tcpUri);
1:9ce91fa: 					bs.start();
1:9ce91fa: 
1:9ce91fa: 					restarted.set(true);
1:9ce91fa: 				} catch (Exception e) {
1:9ce91fa: 					e.printStackTrace();
1:9ce91fa: 				}
1:9ce91fa: 			}
1:9ce91fa: 		}).start();
1:9ce91fa: 
1:9ce91fa: 		synchronized (starter) {
1:9ce91fa: 			starter.notifyAll();
1:9ce91fa: 		}
1:9ce91fa: 		Collection<Integer> results = new ArrayList<Integer>(MESSAGE_COUNT);
1:9ce91fa: 		for (int i = 0; i < MESSAGE_COUNT; i++) {
1:9ce91fa: 			Message message1 = consumer1.receive(20);
1:9ce91fa: 			Message message2 = consumer2.receive(20);
1:9ce91fa: 			if (message1 == null && message2 == null) {
1:9ce91fa: 				if (results.size() < MESSAGE_COUNT) {
1:9ce91fa: 					message1 = consumer1.receive(500);
1:9ce91fa: 					message2 = consumer2.receive(500);
1:9ce91fa: 
1:9ce91fa: 					if (message1 == null && message2 == null) {
1:9ce91fa: 						// Missing messages
1:9ce91fa: 						break;
1:9ce91fa: 					}
1:9ce91fa: 				}
1:9ce91fa: 				break;
1:9ce91fa: 			}
1:9ce91fa: 
1:9ce91fa: 			if (i < 10)
1:9ce91fa: 				assertFalse("Timing problem, restarted too soon", restarted
1:9ce91fa: 						.get());
1:9ce91fa: 			if (i == 10) {
1:9ce91fa: 				synchronized (starter) {
1:9ce91fa: 					starter.notifyAll();
1:9ce91fa: 				}
1:9ce91fa: 			}
1:9ce91fa: 			if (i > MESSAGE_COUNT - 50) {
1:9ce91fa: 				assertTrue("Timing problem, restarted too late", restarted
1:9ce91fa: 						.get());
1:9ce91fa: 			}
1:9ce91fa: 
1:9ce91fa: 			if (message1 != null) {
1:9ce91fa: 				results.add(message1.getIntProperty(PROPERTY_MSG_NUMBER));
1:9ce91fa: 				session1.commit();
1:9ce91fa: 			}
1:9ce91fa: 			if (message2 != null) {
1:9ce91fa: 				results.add(message2.getIntProperty(PROPERTY_MSG_NUMBER));
1:9ce91fa: 				session2.commit();
1:9ce91fa: 			}
1:9ce91fa: 		}
1:9ce91fa: 		assertNull(consumer1.receive(500));
1:9ce91fa: 		assertNull(consumer2.receive(500));
1:9ce91fa: 
1:9ce91fa: 		consumer1.close();
1:9ce91fa: 		session1.close();
1:9ce91fa: 		consumer2.close();
1:9ce91fa: 		session2.close();
1:9ce91fa: 		connection.close();
1:9ce91fa: 
1:9ce91fa: 		int foundMissingMessages = 0;
1:9ce91fa: 		if (results.size() < MESSAGE_COUNT) {
1:9ce91fa: 			foundMissingMessages = tryToFetchMissingMessages();
1:9ce91fa: 		}
1:9ce91fa: 		for (int i = 0; i < MESSAGE_COUNT; i++) {
1:9ce91fa: 			assertTrue("Message-Nr " + i + " not found (" + results.size()
1:9ce91fa: 					+ " total, " + foundMissingMessages
1:9ce91fa: 					+ " have been found 'lingering' in the queue)", results
1:9ce91fa: 					.contains(i));
1:9ce91fa: 		}
1:9ce91fa: 		assertQueueEmpty();
1:9ce91fa: 	}
1:9ce91fa: 
1:9ce91fa: 	private int tryToFetchMissingMessages() throws JMSException {
1:9ce91fa: 		Connection connection = cf.createConnection();
1:9ce91fa: 		connection.start();
1:9ce91fa: 		Session session = connection.createSession(true, 0);
1:9ce91fa: 		MessageConsumer consumer = session.createConsumer(session
1:9ce91fa: 				.createQueue(QUEUE_NAME));
1:9ce91fa: 
1:9ce91fa: 		int count = 0;
1:9ce91fa: 		while (true) {
1:9ce91fa: 			Message message = consumer.receive(500);
1:9ce91fa: 			if (message == null)
1:9ce91fa: 				break;
1:9ce91fa: 
1:9ce91fa: 			log.info("Found \"missing\" message: " + message);
1:9ce91fa: 			count++;
1:9ce91fa: 		}
1:9ce91fa: 
1:9ce91fa: 		consumer.close();
1:9ce91fa: 		session.close();
1:9ce91fa: 		connection.close();
1:9ce91fa: 
1:9ce91fa: 		return count;
1:9ce91fa: 	}
1:9ce91fa: 
1:9ce91fa: 	public void testAMQ1925_TXBegin() throws Exception {
1:9ce91fa: 		Connection connection = cf.createConnection();
1:9ce91fa: 		connection.start();
1:e53668e: 		connection.setExceptionListener(this);
1:9ce91fa: 		Session session = connection.createSession(true,
1:9ce91fa: 				Session.SESSION_TRANSACTED);
1:9ce91fa: 		MessageConsumer consumer = session.createConsumer(session
1:9ce91fa: 				.createQueue(QUEUE_NAME));
1:9ce91fa: 
1:cc700dd: 		boolean restartDone = false;
1:9ce91fa: 		for (int i = 0; i < MESSAGE_COUNT; i++) {
1:243db1c: 			Message message = consumer.receive(5000);
1:9ce91fa: 			assertNotNull(message);
1:9ce91fa: 
1:cc700dd: 			if (i == 222 && !restartDone) {
1:9ce91fa: 				// Simulate broker failure & restart
1:9ce91fa: 				bs.stop();
1:9ce91fa: 				bs = new BrokerService();
1:9ce91fa: 				bs.setPersistent(true);
1:9ce91fa: 				bs.setUseJmx(true);
1:9ce91fa: 				bs.addConnector(tcpUri);
1:9ce91fa: 				bs.start();
1:cc700dd: 				restartDone = true;
1:9ce91fa: 			}
1:9ce91fa: 
1:9ce91fa: 			assertEquals(i, message.getIntProperty(PROPERTY_MSG_NUMBER));
1:cc700dd: 			try {
1:cc700dd: 			    session.commit();
1:cc700dd: 			} catch (TransactionRolledBackException expectedOnOccasion) {
1:cc700dd: 			    log.info("got rollback: "  + expectedOnOccasion);
1:cc700dd: 			    i--;
1:cc700dd: 			}
1:9ce91fa: 		}
1:9ce91fa: 		assertNull(consumer.receive(500));
1:9ce91fa: 
1:9ce91fa: 		consumer.close();
1:9ce91fa: 		session.close();
1:9ce91fa: 		connection.close();
1:9ce91fa: 
1:9ce91fa: 		assertQueueEmpty();
1:e53668e: 		assertNull("no exception on connection listener: " + exception, exception);
1:9ce91fa: 	}
1:9ce91fa: 
1:9ce91fa: 	public void testAMQ1925_TXCommited() throws Exception {
1:9ce91fa: 		Connection connection = cf.createConnection();
1:9ce91fa: 		connection.start();
1:9ce91fa: 		Session session = connection.createSession(true,
1:9ce91fa: 				Session.SESSION_TRANSACTED);
1:9ce91fa: 		MessageConsumer consumer = session.createConsumer(session
1:9ce91fa: 				.createQueue(QUEUE_NAME));
1:9ce91fa: 
1:9ce91fa: 		for (int i = 0; i < MESSAGE_COUNT; i++) {
1:243db1c: 			Message message = consumer.receive(5000);
1:9ce91fa: 			assertNotNull(message);
1:9ce91fa: 
1:9ce91fa: 			assertEquals(i, message.getIntProperty(PROPERTY_MSG_NUMBER));
1:9ce91fa: 			session.commit();
1:9ce91fa: 
2:9ce91fa: 			if (i == 222) {
1:9ce91fa: 				// Simulate broker failure & restart
1:9ce91fa: 				bs.stop();
1:9ce91fa: 				bs = new BrokerService();
1:9ce91fa: 				bs.setPersistent(true);
1:9ce91fa: 				bs.setUseJmx(true);
1:9ce91fa: 				bs.addConnector(tcpUri);
1:9ce91fa: 				bs.start();
1:9ce91fa: 			}
1:9ce91fa: 		}
1:9ce91fa: 		assertNull(consumer.receive(500));
1:9ce91fa: 
1:9ce91fa: 		consumer.close();
1:9ce91fa: 		session.close();
1:9ce91fa: 		connection.close();
1:9ce91fa: 
1:9ce91fa: 		assertQueueEmpty();
1:9ce91fa: 	}
1:9ce91fa: 
1:9ce91fa: 	private void assertQueueEmpty() throws Exception {
1:9ce91fa: 		Connection connection = cf.createConnection();
1:9ce91fa: 		connection.start();
1:9ce91fa: 		Session session = connection.createSession(true,
1:9ce91fa: 				Session.SESSION_TRANSACTED);
1:9ce91fa: 		MessageConsumer consumer = session.createConsumer(session
1:9ce91fa: 				.createQueue(QUEUE_NAME));
1:9ce91fa: 
1:9ce91fa: 		Message msg = consumer.receive(500);
1:9ce91fa: 		if (msg != null) {
1:9ce91fa: 			fail(msg.toString());
1:9ce91fa: 		}
1:9ce91fa: 
1:9ce91fa: 		consumer.close();
1:9ce91fa: 		session.close();
1:9ce91fa: 		connection.close();
1:9ce91fa: 
1:9ce91fa: 		assertQueueLength(0);
1:9ce91fa: 	}
1:9ce91fa: 
1:9ce91fa: 	private void assertQueueLength(int len) throws Exception, IOException {
1:9ce91fa: 		Set<Destination> destinations = bs.getBroker().getDestinations(
1:9ce91fa: 				new ActiveMQQueue(QUEUE_NAME));
1:9ce91fa: 		Queue queue = (Queue) destinations.iterator().next();
1:9ce91fa: 		assertEquals(len, queue.getMessageStore().getMessageCount());
1:9ce91fa: 	}
1:9ce91fa: 
1:9ce91fa: 	private void sendMessagesToQueue() throws Exception {
1:9ce91fa: 		Connection connection = cf.createConnection();
1:9ce91fa: 		Session session = connection.createSession(true,
1:9ce91fa: 				Session.SESSION_TRANSACTED);
1:9ce91fa: 		MessageProducer producer = session.createProducer(session
1:9ce91fa: 				.createQueue(QUEUE_NAME));
1:9ce91fa: 
1:9ce91fa: 		producer.setDeliveryMode(DeliveryMode.PERSISTENT);
1:9ce91fa: 		for (int i = 0; i < MESSAGE_COUNT; i++) {
1:9ce91fa: 			TextMessage message = session
1:9ce91fa: 					.createTextMessage("Test message " + i);
1:9ce91fa: 			message.setIntProperty(PROPERTY_MSG_NUMBER, i);
1:9ce91fa: 			producer.send(message);
1:9ce91fa: 		}
1:9ce91fa: 		session.commit();
1:9ce91fa: 
1:9ce91fa: 		producer.close();
1:9ce91fa: 		session.close();
1:9ce91fa: 		connection.close();
1:9ce91fa: 
1:9ce91fa: 		assertQueueLength(MESSAGE_COUNT);
1:9ce91fa: 	}
1:9ce91fa: 
1:9ce91fa: 	protected void setUp() throws Exception {
1:e53668e: 	    exception = null;
1:9ce91fa: 		bs = new BrokerService();
1:0706a4c: 		bs.setDeleteAllMessagesOnStartup(true);
1:9ce91fa: 		bs.setPersistent(true);
1:9ce91fa: 		bs.setUseJmx(true);
1:9ce91fa: 		TransportConnector connector = bs.addConnector("tcp://localhost:0");
1:9ce91fa: 		bs.start();
1:9ce91fa: 		tcpUri = connector.getConnectUri();
1:9ce91fa: 
1:9ce91fa: 		cf = new ActiveMQConnectionFactory("failover://(" + tcpUri + ")");
1:9ce91fa: 
1:9ce91fa: 		sendMessagesToQueue();
1:9ce91fa: 	}
1:9ce91fa: 
1:9ce91fa: 	protected void tearDown() throws Exception {
1:9ce91fa: 		new ServiceStopper().stop(bs);
1:9ce91fa: 	}
1:9ce91fa: 
1:e53668e:     public void onException(JMSException exception) {
1:e53668e:         this.exception = exception;    
1:e53668e:     }
1:e53668e: 
1:9ce91fa: }
============================================================================
author:gtully
-------------------------------------------------------------------------------
commit:243db1c
/////////////////////////////////////////////////////////////////////////
1: 			Message message = consumer.receive(5000);
/////////////////////////////////////////////////////////////////////////
1: 			Message message = consumer.receive(5000);
author:Timothy A. Bish
-------------------------------------------------------------------------------
commit:ef24cc9
author:Hiram R. Chirino
-------------------------------------------------------------------------------
commit:b0c2a40
/////////////////////////////////////////////////////////////////////////
1:  * 
author:Gary Tully
-------------------------------------------------------------------------------
commit:cc700dd
/////////////////////////////////////////////////////////////////////////
1: import javax.jms.TransactionRolledBackException;
/////////////////////////////////////////////////////////////////////////
1: 		boolean restartDone = false;
1: 			if (i == 222 && !restartDone) {
/////////////////////////////////////////////////////////////////////////
1: 				restartDone = true;
1: 			try {
1: 			    session.commit();
1: 			} catch (TransactionRolledBackException expectedOnOccasion) {
1: 			    log.info("got rollback: "  + expectedOnOccasion);
1: 			    i--;
1: 			}
commit:e53668e
/////////////////////////////////////////////////////////////////////////
1: import javax.jms.ExceptionListener;
/////////////////////////////////////////////////////////////////////////
1: public class AMQ1925Test extends TestCase implements ExceptionListener {
/////////////////////////////////////////////////////////////////////////
1:     private JMSException exception;
1: 
/////////////////////////////////////////////////////////////////////////
1: 		connection.setExceptionListener(this);
/////////////////////////////////////////////////////////////////////////
1: 		assertNull("no exception on connection listener: " + exception, exception);
/////////////////////////////////////////////////////////////////////////
1: 	    exception = null;
/////////////////////////////////////////////////////////////////////////
1:     public void onException(JMSException exception) {
1:         this.exception = exception;    
1:     }
1: 
author:Bosanac Dejan
-------------------------------------------------------------------------------
commit:444412f
/////////////////////////////////////////////////////////////////////////
1: import java.util.concurrent.atomic.AtomicBoolean;
/////////////////////////////////////////////////////////////////////////
author:Robert Davies
-------------------------------------------------------------------------------
commit:0706a4c
/////////////////////////////////////////////////////////////////////////
1: 	public void XtestAMQ1925_TXInProgress() throws Exception {
/////////////////////////////////////////////////////////////////////////
1: 		bs.setDeleteAllMessagesOnStartup(true);
commit:9ce91fa
/////////////////////////////////////////////////////////////////////////
1: /**
1:  * Licensed to the Apache Software Foundation (ASF) under one or more
1:  * contributor license agreements.  See the NOTICE file distributed with
1:  * this work for additional information regarding copyright ownership.
1:  * The ASF licenses this file to You under the Apache License, Version 2.0
1:  * (the "License"); you may not use this file except in compliance with
1:  * the License.  You may obtain a copy of the License at
1:  *
1:  *      http://www.apache.org/licenses/LICENSE-2.0
1:  *
1:  * Unless required by applicable law or agreed to in writing, software
1:  * distributed under the License is distributed on an "AS IS" BASIS,
1:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:  * See the License for the specific language governing permissions and
1:  * limitations under the License.
1:  */
1: package org.apache.activemq.transport.failover;
1: 
1: import java.io.IOException;
1: import java.net.URI;
1: import java.util.ArrayList;
1: import java.util.Collection;
1: import java.util.Set;
1: 
1: import javax.jms.Connection;
1: import javax.jms.DeliveryMode;
1: import javax.jms.JMSException;
1: import javax.jms.Message;
1: import javax.jms.MessageConsumer;
1: import javax.jms.MessageProducer;
1: import javax.jms.Session;
1: import javax.jms.TextMessage;
1: 
1: import junit.framework.TestCase;
1: 
1: import org.apache.activemq.ActiveMQConnectionFactory;
1: import org.apache.activemq.broker.BrokerService;
1: import org.apache.activemq.broker.TransportConnector;
1: import org.apache.activemq.broker.region.Destination;
1: import org.apache.activemq.broker.region.Queue;
1: import org.apache.activemq.command.ActiveMQQueue;
1: import org.apache.activemq.util.ServiceStopper;
1: import org.apache.log4j.Logger;
1: 
0: import edu.emory.mathcs.backport.java.util.concurrent.atomic.AtomicBoolean;
1: 
1: /**
1:  * TestCase showing the message-destroying described in AMQ-1925
1:  * 
0:  * @version $Revision: 1.1 $
1:  */
0: public class AMQ1925Test extends TestCase {
1: 	private static final Logger log = Logger.getLogger(AMQ1925Test.class);
1: 
1: 	private static final String QUEUE_NAME = "test.amq1925";
1: 	private static final String PROPERTY_MSG_NUMBER = "NUMBER";
1: 	private static final int MESSAGE_COUNT = 10000;
1: 
1: 	private BrokerService bs;
1: 	private URI tcpUri;
1: 	private ActiveMQConnectionFactory cf;
1: 
0: 	public void testAMQ1925_TXInProgress() throws Exception {
1: 		Connection connection = cf.createConnection();
1: 		connection.start();
1: 		Session session = connection.createSession(true,
1: 				Session.SESSION_TRANSACTED);
1: 		MessageConsumer consumer = session.createConsumer(session
1: 				.createQueue(QUEUE_NAME));
1: 
1: 		// The runnable is likely to interrupt during the session#commit, since
1: 		// this takes the longest
1: 		final Object starter = new Object();
1: 		final AtomicBoolean restarted = new AtomicBoolean();
1: 		new Thread(new Runnable() {
1: 			public void run() {
1: 				try {
1: 					synchronized (starter) {
1: 						starter.wait();
1: 					}
1: 
1: 					// Simulate broker failure & restart
1: 					bs.stop();
1: 					bs = new BrokerService();
1: 					bs.setPersistent(true);
1: 					bs.setUseJmx(true);
1: 					bs.addConnector(tcpUri);
1: 					bs.start();
1: 
1: 					restarted.set(true);
1: 				} catch (Exception e) {
1: 					e.printStackTrace();
1: 				}
1: 			}
1: 		}).start();
1: 
1: 		synchronized (starter) {
1: 			starter.notifyAll();
1: 		}
1: 		for (int i = 0; i < MESSAGE_COUNT; i++) {
1: 			Message message = consumer.receive(500);
1: 			assertNotNull("No Message " + i + " found", message);
1: 
1: 			if (i < 10)
1: 				assertFalse("Timing problem, restarted too soon", restarted
1: 						.get());
1: 			if (i == 10) {
1: 				synchronized (starter) {
1: 					starter.notifyAll();
1: 				}
1: 			}
1: 			if (i > MESSAGE_COUNT - 100) {
1: 				assertTrue("Timing problem, restarted too late", restarted
1: 						.get());
1: 			}
1: 
1: 			assertEquals(i, message.getIntProperty(PROPERTY_MSG_NUMBER));
1: 			session.commit();
1: 		}
1: 		assertNull(consumer.receive(500));
1: 
1: 		consumer.close();
1: 		session.close();
1: 		connection.close();
1: 
1: 		assertQueueEmpty();
1: 	}
1: 
1: 	public void XtestAMQ1925_TXInProgress_TwoConsumers() throws Exception {
1: 		Connection connection = cf.createConnection();
1: 		connection.start();
1: 		Session session1 = connection.createSession(true,
1: 				Session.SESSION_TRANSACTED);
1: 		MessageConsumer consumer1 = session1.createConsumer(session1
1: 				.createQueue(QUEUE_NAME));
1: 		Session session2 = connection.createSession(true,
1: 				Session.SESSION_TRANSACTED);
1: 		MessageConsumer consumer2 = session2.createConsumer(session2
1: 				.createQueue(QUEUE_NAME));
1: 
1: 		// The runnable is likely to interrupt during the session#commit, since
1: 		// this takes the longest
1: 		final Object starter = new Object();
1: 		final AtomicBoolean restarted = new AtomicBoolean();
1: 		new Thread(new Runnable() {
1: 			public void run() {
1: 				try {
1: 					synchronized (starter) {
1: 						starter.wait();
1: 					}
1: 
1: 					// Simulate broker failure & restart
1: 					bs.stop();
1: 					bs = new BrokerService();
1: 					bs.setPersistent(true);
1: 					bs.setUseJmx(true);
1: 					bs.addConnector(tcpUri);
1: 					bs.start();
1: 
1: 					restarted.set(true);
1: 				} catch (Exception e) {
1: 					e.printStackTrace();
1: 				}
1: 			}
1: 		}).start();
1: 
1: 		synchronized (starter) {
1: 			starter.notifyAll();
1: 		}
1: 		Collection<Integer> results = new ArrayList<Integer>(MESSAGE_COUNT);
1: 		for (int i = 0; i < MESSAGE_COUNT; i++) {
1: 			Message message1 = consumer1.receive(20);
1: 			Message message2 = consumer2.receive(20);
1: 			if (message1 == null && message2 == null) {
1: 				if (results.size() < MESSAGE_COUNT) {
1: 					message1 = consumer1.receive(500);
1: 					message2 = consumer2.receive(500);
1: 
1: 					if (message1 == null && message2 == null) {
1: 						// Missing messages
1: 						break;
1: 					}
1: 				}
1: 				break;
1: 			}
1: 
1: 			if (i < 10)
1: 				assertFalse("Timing problem, restarted too soon", restarted
1: 						.get());
1: 			if (i == 10) {
1: 				synchronized (starter) {
1: 					starter.notifyAll();
1: 				}
1: 			}
1: 			if (i > MESSAGE_COUNT - 50) {
1: 				assertTrue("Timing problem, restarted too late", restarted
1: 						.get());
1: 			}
1: 
1: 			if (message1 != null) {
1: 				results.add(message1.getIntProperty(PROPERTY_MSG_NUMBER));
1: 				session1.commit();
1: 			}
1: 			if (message2 != null) {
1: 				results.add(message2.getIntProperty(PROPERTY_MSG_NUMBER));
1: 				session2.commit();
1: 			}
1: 		}
1: 		assertNull(consumer1.receive(500));
1: 		assertNull(consumer2.receive(500));
1: 
1: 		consumer1.close();
1: 		session1.close();
1: 		consumer2.close();
1: 		session2.close();
1: 		connection.close();
1: 
1: 		int foundMissingMessages = 0;
1: 		if (results.size() < MESSAGE_COUNT) {
1: 			foundMissingMessages = tryToFetchMissingMessages();
1: 		}
1: 		for (int i = 0; i < MESSAGE_COUNT; i++) {
1: 			assertTrue("Message-Nr " + i + " not found (" + results.size()
1: 					+ " total, " + foundMissingMessages
1: 					+ " have been found 'lingering' in the queue)", results
1: 					.contains(i));
1: 		}
1: 		assertQueueEmpty();
1: 	}
1: 
1: 	private int tryToFetchMissingMessages() throws JMSException {
1: 		Connection connection = cf.createConnection();
1: 		connection.start();
1: 		Session session = connection.createSession(true, 0);
1: 		MessageConsumer consumer = session.createConsumer(session
1: 				.createQueue(QUEUE_NAME));
1: 
1: 		int count = 0;
1: 		while (true) {
1: 			Message message = consumer.receive(500);
1: 			if (message == null)
1: 				break;
1: 
1: 			log.info("Found \"missing\" message: " + message);
1: 			count++;
1: 		}
1: 
1: 		consumer.close();
1: 		session.close();
1: 		connection.close();
1: 
1: 		return count;
1: 	}
1: 
1: 	public void testAMQ1925_TXBegin() throws Exception {
1: 		Connection connection = cf.createConnection();
1: 		connection.start();
1: 		Session session = connection.createSession(true,
1: 				Session.SESSION_TRANSACTED);
1: 		MessageConsumer consumer = session.createConsumer(session
1: 				.createQueue(QUEUE_NAME));
1: 
1: 		for (int i = 0; i < MESSAGE_COUNT; i++) {
1: 			Message message = consumer.receive(500);
1: 			assertNotNull(message);
1: 
1: 			if (i == 222) {
1: 				// Simulate broker failure & restart
1: 				bs.stop();
1: 				bs = new BrokerService();
1: 				bs.setPersistent(true);
1: 				bs.setUseJmx(true);
1: 				bs.addConnector(tcpUri);
1: 				bs.start();
1: 			}
1: 
1: 			assertEquals(i, message.getIntProperty(PROPERTY_MSG_NUMBER));
1: 			session.commit();
1: 		}
1: 		assertNull(consumer.receive(500));
1: 
1: 		consumer.close();
1: 		session.close();
1: 		connection.close();
1: 
1: 		assertQueueEmpty();
1: 	}
1: 
1: 	public void testAMQ1925_TXCommited() throws Exception {
1: 		Connection connection = cf.createConnection();
1: 		connection.start();
1: 		Session session = connection.createSession(true,
1: 				Session.SESSION_TRANSACTED);
1: 		MessageConsumer consumer = session.createConsumer(session
1: 				.createQueue(QUEUE_NAME));
1: 
1: 		for (int i = 0; i < MESSAGE_COUNT; i++) {
1: 			Message message = consumer.receive(500);
1: 			assertNotNull(message);
1: 
1: 			assertEquals(i, message.getIntProperty(PROPERTY_MSG_NUMBER));
1: 			session.commit();
1: 
1: 			if (i == 222) {
1: 				// Simulate broker failure & restart
1: 				bs.stop();
1: 				bs = new BrokerService();
1: 				bs.setPersistent(true);
1: 				bs.setUseJmx(true);
1: 				bs.addConnector(tcpUri);
1: 				bs.start();
1: 			}
1: 		}
1: 		assertNull(consumer.receive(500));
1: 
1: 		consumer.close();
1: 		session.close();
1: 		connection.close();
1: 
1: 		assertQueueEmpty();
1: 	}
1: 
1: 	private void assertQueueEmpty() throws Exception {
1: 		Connection connection = cf.createConnection();
1: 		connection.start();
1: 		Session session = connection.createSession(true,
1: 				Session.SESSION_TRANSACTED);
1: 		MessageConsumer consumer = session.createConsumer(session
1: 				.createQueue(QUEUE_NAME));
1: 
1: 		Message msg = consumer.receive(500);
1: 		if (msg != null) {
1: 			fail(msg.toString());
1: 		}
1: 
1: 		consumer.close();
1: 		session.close();
1: 		connection.close();
1: 
1: 		assertQueueLength(0);
1: 	}
1: 
1: 	private void assertQueueLength(int len) throws Exception, IOException {
1: 		Set<Destination> destinations = bs.getBroker().getDestinations(
1: 				new ActiveMQQueue(QUEUE_NAME));
1: 		Queue queue = (Queue) destinations.iterator().next();
1: 		assertEquals(len, queue.getMessageStore().getMessageCount());
1: 	}
1: 
1: 	private void sendMessagesToQueue() throws Exception {
1: 		Connection connection = cf.createConnection();
1: 		Session session = connection.createSession(true,
1: 				Session.SESSION_TRANSACTED);
1: 		MessageProducer producer = session.createProducer(session
1: 				.createQueue(QUEUE_NAME));
1: 
1: 		producer.setDeliveryMode(DeliveryMode.PERSISTENT);
1: 		for (int i = 0; i < MESSAGE_COUNT; i++) {
1: 			TextMessage message = session
1: 					.createTextMessage("Test message " + i);
1: 			message.setIntProperty(PROPERTY_MSG_NUMBER, i);
1: 			producer.send(message);
1: 		}
1: 		session.commit();
1: 
1: 		producer.close();
1: 		session.close();
1: 		connection.close();
1: 
1: 		assertQueueLength(MESSAGE_COUNT);
1: 	}
1: 
1: 	protected void setUp() throws Exception {
1: 		bs = new BrokerService();
1: 		bs.setPersistent(true);
0: 		bs.deleteAllMessages();
1: 		bs.setUseJmx(true);
1: 		TransportConnector connector = bs.addConnector("tcp://localhost:0");
1: 		bs.start();
1: 		tcpUri = connector.getConnectUri();
1: 
1: 		cf = new ActiveMQConnectionFactory("failover://(" + tcpUri + ")");
1: 
1: 		sendMessagesToQueue();
1: 	}
1: 
1: 	protected void tearDown() throws Exception {
1: 		new ServiceStopper().stop(bs);
1: 	}
1: 
1: }
============================================================================