1:7646526: /**
1:7646526:  * Licensed to the Apache Software Foundation (ASF) under one or more
1:7646526:  * contributor license agreements.  See the NOTICE file distributed with
1:7646526:  * this work for additional information regarding copyright ownership.
1:7646526:  * The ASF licenses this file to You under the Apache License, Version 2.0
1:7646526:  * (the "License"); you may not use this file except in compliance with
1:7646526:  * the License.  You may obtain a copy of the License at
1:7646526:  *
1:7646526:  *      http://www.apache.org/licenses/LICENSE-2.0
1:7646526:  *
1:7646526:  * Unless required by applicable law or agreed to in writing, software
1:7646526:  * distributed under the License is distributed on an "AS IS" BASIS,
1:7646526:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:7646526:  * See the License for the specific language governing permissions and
1:7646526:  * limitations under the License.
1:7646526:  */
1:7646526: package org.apache.activemq.broker.policy;
1:7646526: 
1:7646526: import org.apache.activemq.broker.BrokerPlugin;
1:7646526: import org.apache.activemq.broker.BrokerService;
1:7646526: import org.apache.activemq.command.ActiveMQQueue;
1:7646526: import org.apache.activemq.command.ActiveMQTopic;
1:7646526: import org.apache.activemq.filter.DestinationMap;
1:7646526: import org.apache.activemq.security.*;
1:7646526: 
1:7646526: import javax.jms.*;
1:7646526: 
1:7646526: import static org.apache.activemq.security.SimpleSecurityBrokerSystemTest.*;
1:7646526: 
1:7646526: public class SecureDLQTest extends DeadLetterTestSupport {
1:7646526: 
1:7646526:     Connection dlqConnection;
1:7646526:     Session dlqSession;
1:7646526: 
1:7646526:     public static AuthorizationMap createAuthorizationMap() {
1:7646526:         DestinationMap readAccess = new DefaultAuthorizationMap();
1:7646526:         readAccess.put(new ActiveMQQueue("TEST"), ADMINS);
1:7646526:         readAccess.put(new ActiveMQQueue("TEST"), USERS);
1:7646526:         readAccess.put(new ActiveMQQueue("ActiveMQ.DLQ"), ADMINS);
1:7646526: 
1:7646526:         DestinationMap writeAccess = new DefaultAuthorizationMap();
1:7646526:         writeAccess.put(new ActiveMQQueue("TEST"), ADMINS);
1:7646526:         writeAccess.put(new ActiveMQQueue("TEST"), USERS);
1:7646526:         writeAccess.put(new ActiveMQQueue("ActiveMQ.DLQ"), ADMINS);
1:7646526: 
1:7646526:         readAccess.put(new ActiveMQTopic("ActiveMQ.Advisory.>"), WILDCARD);
1:7646526:         writeAccess.put(new ActiveMQTopic("ActiveMQ.Advisory.>"), WILDCARD);
1:7646526: 
1:7646526:         DestinationMap adminAccess = new DefaultAuthorizationMap();
1:7646526:         adminAccess.put(new ActiveMQQueue("TEST"), ADMINS);
1:7646526:         adminAccess.put(new ActiveMQQueue("TEST"), USERS);
1:7646526:         adminAccess.put(new ActiveMQQueue("ActiveMQ.DLQ"), ADMINS);
1:7646526:         adminAccess.put(new ActiveMQTopic("ActiveMQ.Advisory.>"), WILDCARD);
1:7646526: 
1:7646526:         return new SimpleAuthorizationMap(writeAccess, readAccess, adminAccess);
3:7646526:     }
1:7646526: 
1:7646526:     @Override
1:7646526:     protected BrokerService createBroker() throws Exception {
1:7646526:         BrokerService broker = super.createBroker();
1:7646526:         AuthorizationPlugin authorizationPlugin = new AuthorizationPlugin(createAuthorizationMap());
1:7646526: 
1:7646526:         broker.setPlugins(new BrokerPlugin[] {authorizationPlugin, new SimpleSecurityBrokerSystemTest.SimpleAuthenticationFactory()});
1:7646526:         return broker;
1:7646526:     }
1:7646526: 
1:7646526:     // lets disable the inapplicable tests
1:7646526:     public void testTransientTopicMessage() throws Exception {
1:7646526:     }
1:7646526: 
1:7646526:     public void testDurableTopicMessage() throws Exception {
1:7646526:     }
1:7646526: 
1:7646526:     @Override
1:7646526:     protected void doTest() throws Exception {
1:7646526:         timeToLive = 1000;
1:7646526:         acknowledgeMode = Session.CLIENT_ACKNOWLEDGE;
1:7646526:         makeConsumer();
1:7646526:         sendMessages();
1:7646526:         Thread.sleep(1000);
1:7646526:         consumer.close();
1:7646526: 
1:7646526:         Thread.sleep(1000);
1:7646526:         // this should try to send expired messages to dlq
1:7646526:         makeConsumer();
1:7646526: 
1:7646526:         makeDlqConsumer();
1:7646526:         for (int i = 0; i < messageCount; i++) {
1:7646526:             Message msg = dlqConsumer.receive(1000);
1:7646526:             assertMessage(msg, i);
1:7646526:             assertNotNull("Should be a DLQ message for loop: " + i, msg);
1:7646526:         }
1:7646526: 
1:7646526:     }
1:7646526: 
1:7646526:     @Override
1:7646526:     public void tearDown() throws Exception {
1:89e8767:         if (dlqConnection != null) {
1:89e8767:             dlqConnection.close();
1:89e8767:         }
1:7646526:         super.tearDown();
1:7646526:     }
1:7646526: 
1:7646526:     @Override
1:7646526:     protected Connection createConnection() throws Exception {
1:7646526:         return getConnectionFactory().createConnection("user", "password");
1:7646526:     }
1:7646526: 
1:7646526:     @Override
1:7646526:     protected void makeDlqConsumer() throws Exception {
1:7646526:         dlqDestination = createDlqDestination();
1:7646526:         dlqConnection = getConnectionFactory().createConnection("system", "manager");
1:7646526:         dlqConnection.start();
1:7646526:         dlqSession = dlqConnection.createSession(false, Session.AUTO_ACKNOWLEDGE);
1:7646526: 
1:7646526:         dlqConsumer = dlqSession.createConsumer(dlqDestination);
1:7646526:     }
1:7646526: 
1:7646526:     @Override
1:7646526:     protected Destination createDlqDestination() {
1:7646526:         return new ActiveMQQueue("ActiveMQ.DLQ");
1:7646526:     }
1:7646526: 
1:7646526:     @Override
1:7646526:     protected String getDestinationString() {
1:7646526:         return "TEST";
1:7646526:     }
1:7646526: }
============================================================================
author:gtully
-------------------------------------------------------------------------------
commit:89e8767
/////////////////////////////////////////////////////////////////////////
1:         if (dlqConnection != null) {
1:             dlqConnection.close();
1:         }
author:Dejan Bosanac
-------------------------------------------------------------------------------
commit:7646526
/////////////////////////////////////////////////////////////////////////
1: /**
1:  * Licensed to the Apache Software Foundation (ASF) under one or more
1:  * contributor license agreements.  See the NOTICE file distributed with
1:  * this work for additional information regarding copyright ownership.
1:  * The ASF licenses this file to You under the Apache License, Version 2.0
1:  * (the "License"); you may not use this file except in compliance with
1:  * the License.  You may obtain a copy of the License at
1:  *
1:  *      http://www.apache.org/licenses/LICENSE-2.0
1:  *
1:  * Unless required by applicable law or agreed to in writing, software
1:  * distributed under the License is distributed on an "AS IS" BASIS,
1:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:  * See the License for the specific language governing permissions and
1:  * limitations under the License.
1:  */
1: package org.apache.activemq.broker.policy;
1: 
1: import org.apache.activemq.broker.BrokerPlugin;
1: import org.apache.activemq.broker.BrokerService;
1: import org.apache.activemq.command.ActiveMQQueue;
1: import org.apache.activemq.command.ActiveMQTopic;
1: import org.apache.activemq.filter.DestinationMap;
1: import org.apache.activemq.security.*;
1: 
1: import javax.jms.*;
1: 
1: import static org.apache.activemq.security.SimpleSecurityBrokerSystemTest.*;
1: 
1: public class SecureDLQTest extends DeadLetterTestSupport {
1: 
1:     Connection dlqConnection;
1:     Session dlqSession;
1: 
1:     public static AuthorizationMap createAuthorizationMap() {
1:         DestinationMap readAccess = new DefaultAuthorizationMap();
1:         readAccess.put(new ActiveMQQueue("TEST"), ADMINS);
1:         readAccess.put(new ActiveMQQueue("TEST"), USERS);
1:         readAccess.put(new ActiveMQQueue("ActiveMQ.DLQ"), ADMINS);
1: 
1:         DestinationMap writeAccess = new DefaultAuthorizationMap();
1:         writeAccess.put(new ActiveMQQueue("TEST"), ADMINS);
1:         writeAccess.put(new ActiveMQQueue("TEST"), USERS);
1:         writeAccess.put(new ActiveMQQueue("ActiveMQ.DLQ"), ADMINS);
1: 
1:         readAccess.put(new ActiveMQTopic("ActiveMQ.Advisory.>"), WILDCARD);
1:         writeAccess.put(new ActiveMQTopic("ActiveMQ.Advisory.>"), WILDCARD);
1: 
1:         DestinationMap adminAccess = new DefaultAuthorizationMap();
1:         adminAccess.put(new ActiveMQQueue("TEST"), ADMINS);
1:         adminAccess.put(new ActiveMQQueue("TEST"), USERS);
1:         adminAccess.put(new ActiveMQQueue("ActiveMQ.DLQ"), ADMINS);
1:         adminAccess.put(new ActiveMQTopic("ActiveMQ.Advisory.>"), WILDCARD);
1: 
1:         return new SimpleAuthorizationMap(writeAccess, readAccess, adminAccess);
1:     }
1: 
1:     @Override
1:     protected BrokerService createBroker() throws Exception {
1:         BrokerService broker = super.createBroker();
1:         AuthorizationPlugin authorizationPlugin = new AuthorizationPlugin(createAuthorizationMap());
1: 
1:         broker.setPlugins(new BrokerPlugin[] {authorizationPlugin, new SimpleSecurityBrokerSystemTest.SimpleAuthenticationFactory()});
1:         return broker;
1:     }
1: 
1:     // lets disable the inapplicable tests
1:     public void testTransientTopicMessage() throws Exception {
1:     }
1: 
1:     public void testDurableTopicMessage() throws Exception {
1:     }
1: 
1:     @Override
1:     protected void doTest() throws Exception {
1:         timeToLive = 1000;
1:         acknowledgeMode = Session.CLIENT_ACKNOWLEDGE;
1:         makeConsumer();
1:         sendMessages();
1:         Thread.sleep(1000);
1:         consumer.close();
1: 
1:         Thread.sleep(1000);
1:         // this should try to send expired messages to dlq
1:         makeConsumer();
1: 
1:         makeDlqConsumer();
1:         for (int i = 0; i < messageCount; i++) {
1:             Message msg = dlqConsumer.receive(1000);
1:             assertMessage(msg, i);
1:             assertNotNull("Should be a DLQ message for loop: " + i, msg);
1:         }
1: 
1:     }
1: 
1:     @Override
1:     public void tearDown() throws Exception {
1:         super.tearDown();
0:         if (dlqSession != null) {
0:             dlqSession.close();
1:         }
0:         if (dlqConsumer != null) {
0:             dlqConsumer.close();
1:         }
1:     }
1: 
1:     @Override
1:     protected Connection createConnection() throws Exception {
1:         return getConnectionFactory().createConnection("user", "password");
1:     }
1: 
1:     @Override
1:     protected void makeDlqConsumer() throws Exception {
1:         dlqDestination = createDlqDestination();
1:         dlqConnection = getConnectionFactory().createConnection("system", "manager");
1:         dlqConnection.start();
1:         dlqSession = dlqConnection.createSession(false, Session.AUTO_ACKNOWLEDGE);
1: 
1:         dlqConsumer = dlqSession.createConsumer(dlqDestination);
1:     }
1: 
1:     @Override
1:     protected Destination createDlqDestination() {
1:         return new ActiveMQQueue("ActiveMQ.DLQ");
1:     }
1: 
1:     @Override
1:     protected String getDestinationString() {
1:         return "TEST";
1:     }
1: }
============================================================================