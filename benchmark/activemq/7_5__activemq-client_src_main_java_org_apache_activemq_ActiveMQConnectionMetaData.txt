1:d29ca2a: /**
1:57b4941:  * Licensed to the Apache Software Foundation (ASF) under one or more
1:57b4941:  * contributor license agreements.  See the NOTICE file distributed with
1:57b4941:  * this work for additional information regarding copyright ownership.
1:57b4941:  * The ASF licenses this file to You under the Apache License, Version 2.0
1:57b4941:  * (the "License"); you may not use this file except in compliance with
1:57b4941:  * the License.  You may obtain a copy of the License at
1:230a86c:  *
1:230a86c:  *      http://www.apache.org/licenses/LICENSE-2.0
1:230a86c:  *
1:d29ca2a:  * Unless required by applicable law or agreed to in writing, software
1:d29ca2a:  * distributed under the License is distributed on an "AS IS" BASIS,
1:d29ca2a:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:d29ca2a:  * See the License for the specific language governing permissions and
1:d29ca2a:  * limitations under the License.
1:d29ca2a:  */
1:d29ca2a: package org.apache.activemq;
14:d29ca2a: 
1:d29ca2a: import java.util.Enumeration;
1:933eb2f: import java.util.Vector;
1:d29ca2a: import java.util.regex.Matcher;
1:d29ca2a: import java.util.regex.Pattern;
1:d29ca2a: 
1:d29ca2a: import javax.jms.ConnectionMetaData;
1:d29ca2a: 
1:d29ca2a: /**
1:d29ca2a:  * A <CODE>ConnectionMetaData</CODE> object provides information describing
1:d29ca2a:  * the <CODE>Connection</CODE> object.
1:d29ca2a:  */
1:74a7a8b: public final class ActiveMQConnectionMetaData implements ConnectionMetaData {
1:d29ca2a: 
1:d29ca2a:     public static final String PROVIDER_VERSION;
1:d29ca2a:     public static final int PROVIDER_MAJOR_VERSION;
1:d29ca2a:     public static final int PROVIDER_MINOR_VERSION;
1:8d5e84b:     public static final String PROVIDER_NAME = "ActiveMQ";
1:5fa0bbd:     public static final String DEFAULT_PLATFORM_DETAILS = "Java";
1:8d5e84b:     public static final String PLATFORM_DETAILS;
1:230a86c: 
1:d29ca2a:     public static final ActiveMQConnectionMetaData INSTANCE = new ActiveMQConnectionMetaData();
1:230a86c: 
1:d29ca2a:     static {
1:230a86c:         String version = null;
1:230a86c:         int major = 0;
1:230a86c:         int minor = 0;
1:d29ca2a:         try {
1:d29ca2a:             Package p = Package.getPackage("org.apache.activemq");
1:d29ca2a:             if (p != null) {
1:d29ca2a:                 version = p.getImplementationVersion();
1:57fc29b:                 if (version != null) {
1:57fc29b:                     Pattern pattern = Pattern.compile("(\\d+)\\.(\\d+).*");
1:57fc29b:                     Matcher m = pattern.matcher(version);
1:57fc29b:                     if (m.matches()) {
1:57fc29b:                         major = Integer.parseInt(m.group(1));
1:57fc29b:                         minor = Integer.parseInt(m.group(2));
1:57fc29b:                     }
1:d29ca2a:                 }
1:d29ca2a:             }
1:230a86c:         } catch (Throwable e) {
1:d29ca2a:         }
1:d29ca2a:         PROVIDER_VERSION = version;
1:d29ca2a:         PROVIDER_MAJOR_VERSION = major;
1:d29ca2a:         PROVIDER_MINOR_VERSION = minor;
1:8d5e84b:         PLATFORM_DETAILS = ActiveMQConnectionMetaData.getPlatformDetails();
1:d29ca2a:     }
1:230a86c: 
1:230a86c:     private ActiveMQConnectionMetaData() {
1:230a86c:     }
1:230a86c: 
1:d29ca2a:     /**
1:d29ca2a:      * Gets the JMS API version.
1:f5dff68:      *
1:d29ca2a:      * @return the JMS API version
1:d29ca2a:      */
1:f5dff68:     @Override
1:d29ca2a:     public String getJMSVersion() {
1:d29ca2a:         return "1.1";
1:d29ca2a:     }
1:d29ca2a: 
1:d29ca2a:     /**
1:d29ca2a:      * Gets the JMS major version number.
1:f5dff68:      *
1:d29ca2a:      * @return the JMS API major version number
1:d29ca2a:      */
1:f5dff68:     @Override
1:d29ca2a:     public int getJMSMajorVersion() {
1:d29ca2a:         return 1;
1:d29ca2a:     }
1:d29ca2a: 
1:d29ca2a:     /**
1:d29ca2a:      * Gets the JMS minor version number.
1:f5dff68:      *
1:d29ca2a:      * @return the JMS API minor version number
1:d29ca2a:      */
1:f5dff68:     @Override
1:d29ca2a:     public int getJMSMinorVersion() {
1:d29ca2a:         return 1;
1:d29ca2a:     }
1:d29ca2a: 
1:d29ca2a:     /**
1:d29ca2a:      * Gets the JMS provider name.
1:f5dff68:      *
1:d29ca2a:      * @return the JMS provider name
1:d29ca2a:      */
1:f5dff68:     @Override
1:d29ca2a:     public String getJMSProviderName() {
1:d29ca2a:         return "ActiveMQ";
1:d29ca2a:     }
1:d29ca2a: 
1:d29ca2a:     /**
1:d29ca2a:      * Gets the JMS provider version.
1:f5dff68:      *
1:d29ca2a:      * @return the JMS provider version
1:d29ca2a:      */
1:f5dff68:     @Override
1:d29ca2a:     public String getProviderVersion() {
1:d29ca2a:         return PROVIDER_VERSION;
1:d29ca2a:     }
1:d29ca2a: 
1:d29ca2a:     /**
1:d29ca2a:      * Gets the JMS provider major version number.
1:f5dff68:      *
1:d29ca2a:      * @return the JMS provider major version number
1:d29ca2a:      */
1:f5dff68:     @Override
1:d29ca2a:     public int getProviderMajorVersion() {
1:d29ca2a:         return PROVIDER_MAJOR_VERSION;
1:d29ca2a:     }
1:d29ca2a: 
1:d29ca2a:     /**
1:d29ca2a:      * Gets the JMS provider minor version number.
1:f5dff68:      *
1:d29ca2a:      * @return the JMS provider minor version number
1:d29ca2a:      */
1:f5dff68:     @Override
1:d29ca2a:     public int getProviderMinorVersion() {
1:d29ca2a:         return PROVIDER_MINOR_VERSION;
1:d29ca2a:     }
1:d29ca2a: 
1:d29ca2a:     /**
1:d29ca2a:      * Gets an enumeration of the JMSX property names.
1:f5dff68:      *
1:d29ca2a:      * @return an Enumeration of JMSX property names
1:d29ca2a:      */
1:f5dff68:     @Override
1:933eb2f:     public Enumeration<String> getJMSXPropertyNames() {
1:933eb2f:         Vector<String> jmxProperties = new Vector<String>();
1:f5dff68:         jmxProperties.add("JMSXUserID");
1:933eb2f:         jmxProperties.add("JMSXGroupID");
1:933eb2f:         jmxProperties.add("JMSXGroupSeq");
1:933eb2f:         jmxProperties.add("JMSXDeliveryCount");
1:933eb2f:         jmxProperties.add("JMSXProducerTXID");
1:933eb2f:         return jmxProperties.elements();
1:d29ca2a:     }
1:8d5e84b: 
1:8d5e84b:     /**
1:8d5e84b:      * Get the platform details for the JMS provider.
1:8d5e84b:      *
1:8d5e84b:      * @return String containing the platform details
1:8d5e84b:      */
1:8d5e84b:     private static String getPlatformDetails() {
1:7118247:         String details = "java";
1:8d5e84b:         try {
1:8d5e84b:             StringBuilder platformInfo = new StringBuilder(128);
1:8d5e84b: 
1:8d5e84b:             platformInfo.append("JVM: ");
1:8d5e84b:             platformInfo.append(System.getProperty("java.version"));
1:8d5e84b:             platformInfo.append(", ");
1:8d5e84b:             platformInfo.append(System.getProperty("java.vm.version"));
1:8d5e84b:             platformInfo.append(", ");
1:8d5e84b:             platformInfo.append(System.getProperty("java.vendor"));
1:8d5e84b:             platformInfo.append(", OS: ");
1:8d5e84b:             platformInfo.append(System.getProperty("os.name"));
1:8d5e84b:             platformInfo.append(", ");
1:8d5e84b:             platformInfo.append(System.getProperty("os.version"));
1:8d5e84b:             platformInfo.append(", ");
1:8d5e84b:             platformInfo.append(System.getProperty("os.arch"));
1:8d5e84b: 
1:8d5e84b:             details = platformInfo.toString();
1:8d5e84b:         } catch (Throwable e) {
1:8d5e84b:         }
1:8d5e84b:         return details;
1:8d5e84b:     }
1:d29ca2a: }
============================================================================
author:Christopher L. Shannon (cshannon)
-------------------------------------------------------------------------------
commit:5fa0bbd
/////////////////////////////////////////////////////////////////////////
1:     public static final String DEFAULT_PLATFORM_DETAILS = "Java";
commit:7118247
/////////////////////////////////////////////////////////////////////////
1:         String details = "java";
author:Hadrian Zbarcea
-------------------------------------------------------------------------------
commit:d54d046
author:Michael L. Bloom
-------------------------------------------------------------------------------
commit:8d5e84b
/////////////////////////////////////////////////////////////////////////
1:     public static final String PROVIDER_NAME = "ActiveMQ";
1:     public static final String PLATFORM_DETAILS;
/////////////////////////////////////////////////////////////////////////
1:         PLATFORM_DETAILS = ActiveMQConnectionMetaData.getPlatformDetails();
/////////////////////////////////////////////////////////////////////////
1: 
1:     /**
1:      * Get the platform details for the JMS provider.
1:      *
1:      * @return String containing the platform details
1:      */
1:     private static String getPlatformDetails() {
0:         String details = "unknown";
1:         try {
1:             StringBuilder platformInfo = new StringBuilder(128);
1: 
1:             platformInfo.append("JVM: ");
1:             platformInfo.append(System.getProperty("java.version"));
1:             platformInfo.append(", ");
1:             platformInfo.append(System.getProperty("java.vm.version"));
1:             platformInfo.append(", ");
1:             platformInfo.append(System.getProperty("java.vendor"));
1:             platformInfo.append(", OS: ");
1:             platformInfo.append(System.getProperty("os.name"));
1:             platformInfo.append(", ");
1:             platformInfo.append(System.getProperty("os.version"));
1:             platformInfo.append(", ");
1:             platformInfo.append(System.getProperty("os.arch"));
1: 
1:             details = platformInfo.toString();
1:         } catch (Throwable e) {
1:         }
1:         return details;
1:     }
author:gtully
-------------------------------------------------------------------------------
commit:57fc29b
/////////////////////////////////////////////////////////////////////////
1:                 if (version != null) {
1:                     Pattern pattern = Pattern.compile("(\\d+)\\.(\\d+).*");
1:                     Matcher m = pattern.matcher(version);
1:                     if (m.matches()) {
1:                         major = Integer.parseInt(m.group(1));
1:                         minor = Integer.parseInt(m.group(2));
1:                     }
author:Timothy A. Bish
-------------------------------------------------------------------------------
commit:f5dff68
/////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////
1:      *
1:     @Override
1:      *
1:     @Override
1:      *
1:     @Override
1:      *
1:     @Override
1:      *
1:     @Override
1:      *
1:     @Override
1:      *
1:     @Override
1:      *
1:     @Override
1:         jmxProperties.add("JMSXUserID");
author:Hiram R. Chirino
-------------------------------------------------------------------------------
commit:9a8f6e4
commit:933eb2f
/////////////////////////////////////////////////////////////////////////
1: import java.util.Vector;
/////////////////////////////////////////////////////////////////////////
1:     public Enumeration<String> getJMSXPropertyNames() {
1:         Vector<String> jmxProperties = new Vector<String>();
1:         jmxProperties.add("JMSXGroupID");
1:         jmxProperties.add("JMSXGroupSeq");
1:         jmxProperties.add("JMSXDeliveryCount");
1:         jmxProperties.add("JMSXProducerTXID");
1:         return jmxProperties.elements();
commit:74a7a8b
/////////////////////////////////////////////////////////////////////////
1: public final class ActiveMQConnectionMetaData implements ConnectionMetaData {
commit:230a86c
/////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////
1:  *      http://www.apache.org/licenses/LICENSE-2.0
/////////////////////////////////////////////////////////////////////////
1: 
1: 
1:         String version = null;
1:         int major = 0;
1:         int minor = 0;
0:                 if (m.matches()) {
1:         } catch (Throwable e) {
1: 
1:     private ActiveMQConnectionMetaData() {
1:     }
1: 
1:      * 
/////////////////////////////////////////////////////////////////////////
1:      * 
/////////////////////////////////////////////////////////////////////////
0:      * 
/////////////////////////////////////////////////////////////////////////
0:      * 
/////////////////////////////////////////////////////////////////////////
0:      * 
/////////////////////////////////////////////////////////////////////////
0:      * 
/////////////////////////////////////////////////////////////////////////
0:      * 
/////////////////////////////////////////////////////////////////////////
0:      * 
/////////////////////////////////////////////////////////////////////////
0:         jmxProperties.put("JMSXDeliveryCount", "1");
0:         jmxProperties.put("JMSXProducerTXID", "1");
commit:57b4941
/////////////////////////////////////////////////////////////////////////
1:  * Licensed to the Apache Software Foundation (ASF) under one or more
1:  * contributor license agreements.  See the NOTICE file distributed with
1:  * this work for additional information regarding copyright ownership.
1:  * The ASF licenses this file to You under the Apache License, Version 2.0
1:  * (the "License"); you may not use this file except in compliance with
1:  * the License.  You may obtain a copy of the License at
commit:48b4869
/////////////////////////////////////////////////////////////////////////
0:  * Copyright 2005-2006 The Apache Software Foundation
commit:d29ca2a
/////////////////////////////////////////////////////////////////////////
1: /**
0:  *
0:  * Copyright 2004 The Apache Software Foundation
0:  *
0:  * Licensed under the Apache License, Version 2.0 (the "License");
0:  * you may not use this file except in compliance with the License.
0:  * You may obtain a copy of the License at
0:  *
0:  * http://www.apache.org/licenses/LICENSE-2.0
0:  *
1:  * Unless required by applicable law or agreed to in writing, software
1:  * distributed under the License is distributed on an "AS IS" BASIS,
1:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:  * See the License for the specific language governing permissions and
1:  * limitations under the License.
1:  */
1: package org.apache.activemq;
1: 
1: import java.util.Enumeration;
0: import java.util.Hashtable;
1: import java.util.regex.Matcher;
1: import java.util.regex.Pattern;
1: 
1: import javax.jms.ConnectionMetaData;
1: 
1: /**
1:  * A <CODE>ConnectionMetaData</CODE> object provides information describing
1:  * the <CODE>Connection</CODE> object.
1:  */
1: 
0: public class ActiveMQConnectionMetaData implements ConnectionMetaData {
1: 
1:     public static final String PROVIDER_VERSION;
1:     public static final int PROVIDER_MAJOR_VERSION;
1:     public static final int PROVIDER_MINOR_VERSION;
1:     
1:     public static final ActiveMQConnectionMetaData INSTANCE = new ActiveMQConnectionMetaData();
1:     
1:     static {
0:         String version=null;
0:         int major=0;
0:         int minor=0;
1:         try {
1:             Package p = Package.getPackage("org.apache.activemq");
1:             if (p != null) {
1:                 version = p.getImplementationVersion();
0:                 Pattern pattern = Pattern.compile("(\\d+)\\.(\\d+).*");
0:                 Matcher m = pattern.matcher(version);
0:                 if( m.matches() ) {
0:                     major = Integer.parseInt(m.group(1));
0:                     minor = Integer.parseInt(m.group(2));
1:                 }
1:             }
0:         } catch ( Throwable e) {
1:         }
1:         PROVIDER_VERSION = version;
1:         PROVIDER_MAJOR_VERSION = major;
1:         PROVIDER_MINOR_VERSION = minor;
1:     }
1:     
0:     private ActiveMQConnectionMetaData() {}
1:     
1:     /**
1:      * Gets the JMS API version.
0:      *
1:      * @return the JMS API version
1:      */
1: 
1:     public String getJMSVersion() {
1:         return "1.1";
1:     }
1: 
1:     /**
1:      * Gets the JMS major version number.
0:      *
1:      * @return the JMS API major version number
1:      */
1: 
1:     public int getJMSMajorVersion() {
1:         return 1;
1:     }
1: 
1:     /**
1:      * Gets the JMS minor version number.
0:      *
1:      * @return the JMS API minor version number
1:      */
1: 
1:     public int getJMSMinorVersion() {
1:         return 1;
1:     }
1: 
1:     /**
1:      * Gets the JMS provider name.
0:      *
1:      * @return the JMS provider name
1:      */
1: 
1:     public String getJMSProviderName() {
1:         return "ActiveMQ";
1:     }
1: 
1:     /**
1:      * Gets the JMS provider version.
0:      *
1:      * @return the JMS provider version
1:      */
1: 
1:     public String getProviderVersion() {
1:         return PROVIDER_VERSION;
1:     }
1: 
1:     /**
1:      * Gets the JMS provider major version number.
0:      *
1:      * @return the JMS provider major version number
1:      */
1: 
1:     public int getProviderMajorVersion() {
1:         return PROVIDER_MAJOR_VERSION;
1:     }
1: 
1:     /**
1:      * Gets the JMS provider minor version number.
0:      *
1:      * @return the JMS provider minor version number
1:      */
1: 
1:     public int getProviderMinorVersion() {
1:         return PROVIDER_MINOR_VERSION;
1:     }
1: 
1:     /**
1:      * Gets an enumeration of the JMSX property names.
0:      *
1:      * @return an Enumeration of JMSX property names
1:      */
1: 
0:     public Enumeration getJMSXPropertyNames() {
0:         Hashtable jmxProperties = new Hashtable();
0:         jmxProperties.put("JMSXGroupID", "1");
0:         jmxProperties.put("JMSXGroupSeq", "1");
0:         jmxProperties.put("JMSXDeliveryCount","1");
0:         return jmxProperties.keys();
1:     }
1: }
author:Robert Davies
-------------------------------------------------------------------------------
commit:a401575
/////////////////////////////////////////////////////////////////////////
0:         jmxProperties.put("JMSXProducerTXID","1");
============================================================================