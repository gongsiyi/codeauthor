1:0ae90c0: /**
1:0ae90c0:  * Licensed to the Apache Software Foundation (ASF) under one or more
1:0ae90c0:  * contributor license agreements.  See the NOTICE file distributed with
1:0ae90c0:  * this work for additional information regarding copyright ownership.
1:0ae90c0:  * The ASF licenses this file to You under the Apache License, Version 2.0
1:0ae90c0:  * (the "License"); you may not use this file except in compliance with
1:0ae90c0:  * the License.  You may obtain a copy of the License at
1:0ae90c0:  *
1:0ae90c0:  *      http://www.apache.org/licenses/LICENSE-2.0
1:0ae90c0:  *
1:0ae90c0:  * Unless required by applicable law or agreed to in writing, software
1:0ae90c0:  * distributed under the License is distributed on an "AS IS" BASIS,
1:0ae90c0:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:0ae90c0:  * See the License for the specific language governing permissions and
1:0ae90c0:  * limitations under the License.
1:0ae90c0:  */
1:0ae90c0: package org.apache.activemq.store.kahadb;
1:0ae90c0: 
1:0ae90c0: import org.apache.activemq.ActiveMQConnectionFactory;
1:0ae90c0: import org.apache.activemq.broker.BrokerService;
1:0ae90c0: import org.apache.activemq.broker.region.BaseDestination;
1:0ae90c0: import org.apache.activemq.command.ActiveMQQueue;
1:0ae90c0: import org.apache.activemq.usage.StoreUsage;
1:fad5081: import org.apache.activemq.util.IOHelper;
1:fad5081: import org.apache.activemq.util.Wait;
1:0ae90c0: import org.junit.After;
1:0ae90c0: import org.junit.Test;
1:0ae90c0: import org.slf4j.Logger;
1:0ae90c0: import org.slf4j.LoggerFactory;
1:0ae90c0: 
1:0ae90c0: import javax.jms.BytesMessage;
1:0ae90c0: import javax.jms.Connection;
1:0ae90c0: import javax.jms.Destination;
1:0ae90c0: import javax.jms.MessageConsumer;
1:0ae90c0: import javax.jms.MessageProducer;
1:0ae90c0: import javax.jms.Session;
1:fad5081: import java.io.File;
1:0ae90c0: import java.util.ArrayList;
1:0ae90c0: import java.util.List;
1:fad5081: import java.util.concurrent.Executor;
1:fad5081: import java.util.concurrent.ExecutorService;
1:fad5081: import java.util.concurrent.Executors;
1:fad5081: import java.util.concurrent.TimeUnit;
1:fad5081: import java.util.concurrent.atomic.AtomicBoolean;
1:0ae90c0: 
1:0ae90c0: import static org.junit.Assert.*;
1:0ae90c0: 
1:0ae90c0: public class MKahaDBStoreLimitTest {
1:0ae90c0: 
1:0ae90c0:     private static final Logger LOG = LoggerFactory.getLogger(MKahaDBStoreLimitTest.class);
1:0ae90c0: 
1:0ae90c0:     final ActiveMQQueue queueA = new ActiveMQQueue("Q.A");
1:0ae90c0:     final ActiveMQQueue queueB = new ActiveMQQueue("Q.B");
1:0ae90c0: 
1:0ae90c0:     private BrokerService broker;
1:0ae90c0: 
1:0ae90c0:     @After
1:0ae90c0:     public void stopBroker() throws Exception {
1:0ae90c0:         if (broker != null) {
1:0ae90c0:             broker.stop();
1:0ae90c0:             broker.waitUntilStopped();
1:0ae90c0:         }
1:0ae90c0:     }
1:0ae90c0: 
1:0ae90c0:     private BrokerService createBroker(MultiKahaDBPersistenceAdapter persistenceAdapter) throws Exception {
1:0ae90c0:         broker = new BrokerService();
1:0ae90c0:         broker.setPersistenceAdapter(persistenceAdapter);
1:0ae90c0:         broker.setUseJmx(false);
1:0ae90c0:         broker.setAdvisorySupport(false);
1:0ae90c0:         broker.setSchedulerSupport(false);
1:0ae90c0:         broker.setPersistenceAdapter(persistenceAdapter);
1:0ae90c0:         broker.setDeleteAllMessagesOnStartup(true);
1:0ae90c0:         return broker;
1:0ae90c0:     }
1:0ae90c0: 
1:fad5081:     @Test
1:0ae90c0:     public void testPerDestUsage() throws Exception {
1:0ae90c0: 
1:0ae90c0:         // setup multi-kaha adapter
1:0ae90c0:         MultiKahaDBPersistenceAdapter persistenceAdapter = new MultiKahaDBPersistenceAdapter();
1:0ae90c0: 
1:0ae90c0:         KahaDBPersistenceAdapter kahaStore = new KahaDBPersistenceAdapter();
1:0ae90c0:         kahaStore.setJournalMaxFileLength(1024 * 5);
1:0ae90c0:         kahaStore.setCleanupInterval(1000);
1:fad5081: 
1:0ae90c0:         // set up a store per destination
1:0ae90c0:         FilteredKahaDBPersistenceAdapter filtered = new FilteredKahaDBPersistenceAdapter();
1:0ae90c0:         StoreUsage storeUsage = new StoreUsage();
1:0ae90c0:         storeUsage.setPercentLimit(10);
1:0ae90c0:         storeUsage.setTotal(1024*1024*10);
1:0ae90c0:         filtered.setUsage(storeUsage);
1:0ae90c0:         filtered.setPersistenceAdapter(kahaStore);
1:0ae90c0:         filtered.setPerDestination(true);
1:0ae90c0:         List<FilteredKahaDBPersistenceAdapter> stores = new ArrayList<>();
1:0ae90c0:         stores.add(filtered);
1:0ae90c0: 
1:0ae90c0:         persistenceAdapter.setFilteredPersistenceAdapters(stores);
1:0ae90c0: 
1:0ae90c0:         createBroker(persistenceAdapter).start();
1:0ae90c0: 
1:0ae90c0: 
1:0ae90c0: 
1:0ae90c0:         produceMessages(queueA, 20);
1:0ae90c0:         produceMessages(queueB, 0);
1:0ae90c0: 
1:0ae90c0:         LOG.info("Store global u: " + broker.getSystemUsage().getStoreUsage().getUsage() + ", %:" + broker.getSystemUsage().getStoreUsage().getPercentUsage());
1:0ae90c0: 
1:0ae90c0:         assertTrue("some usage", broker.getSystemUsage().getStoreUsage().getUsage() > 0);
1:0ae90c0: 
1:0ae90c0:         BaseDestination baseDestinationA = (BaseDestination) broker.getRegionBroker().getDestinationMap().get(queueA);
1:0ae90c0:         BaseDestination baseDestinationB = (BaseDestination) broker.getRegionBroker().getDestinationMap().get(queueB);
1:0ae90c0: 
1:0ae90c0:         LOG.info("Store A u: " + baseDestinationA.getSystemUsage().getStoreUsage().getUsage() + ", %: " + baseDestinationA.getSystemUsage().getStoreUsage().getPercentUsage());
1:0ae90c0: 
1:0ae90c0:         assertTrue(baseDestinationA.getSystemUsage().getStoreUsage().getUsage() > 0);
1:0ae90c0: 
1:0ae90c0:         produceMessages(queueB, 40);
1:0ae90c0:         assertTrue(baseDestinationB.getSystemUsage().getStoreUsage().getUsage() > 0);
1:0ae90c0:         assertTrue(baseDestinationB.getSystemUsage().getStoreUsage().getUsage() > baseDestinationA.getSystemUsage().getStoreUsage().getUsage());
1:0ae90c0: 
1:0ae90c0:         LOG.info("Store B u: " + baseDestinationB.getSystemUsage().getStoreUsage().getUsage() + ", %: " + baseDestinationB.getSystemUsage().getStoreUsage().getPercentUsage());
1:0ae90c0:         LOG.info("Store global u: " + broker.getSystemUsage().getStoreUsage().getUsage() + ", %:" + broker.getSystemUsage().getStoreUsage().getPercentUsage());
1:0ae90c0: 
1:0ae90c0:         consume(queueA);
1:0ae90c0: 
1:0ae90c0:         consume(queueB);
1:0ae90c0: 
1:0ae90c0:         LOG.info("Store global u: " + broker.getSystemUsage().getStoreUsage().getUsage() + ", %:" + broker.getSystemUsage().getStoreUsage().getPercentUsage());
1:0ae90c0:         LOG.info("Store A u: " + baseDestinationA.getSystemUsage().getStoreUsage().getUsage() + ", %: " + baseDestinationA.getSystemUsage().getStoreUsage().getPercentUsage());
1:0ae90c0:         LOG.info("Store B u: " + baseDestinationB.getSystemUsage().getStoreUsage().getUsage() + ", %: " + baseDestinationB.getSystemUsage().getStoreUsage().getPercentUsage());
1:0ae90c0: 
1:0ae90c0:     }
1:0ae90c0: 
1:0ae90c0:     @Test
1:0ae90c0:     public void testExplicitAdapter() throws Exception {
1:0ae90c0:         MultiKahaDBPersistenceAdapter persistenceAdapter = new MultiKahaDBPersistenceAdapter();
1:0ae90c0:         KahaDBPersistenceAdapter kahaStore = new KahaDBPersistenceAdapter();
1:0ae90c0:         kahaStore.setJournalMaxFileLength(1024*25);
1:0ae90c0: 
1:0ae90c0:         FilteredKahaDBPersistenceAdapter filtered = new FilteredKahaDBPersistenceAdapter();
1:0ae90c0:         StoreUsage storeUsage = new StoreUsage();
1:0ae90c0:         storeUsage.setPercentLimit(50);
1:0ae90c0:         storeUsage.setTotal(512*1024);
1:0ae90c0: 
1:0ae90c0:         filtered.setUsage(storeUsage);
1:0ae90c0:         filtered.setDestination(queueA);
1:0ae90c0:         filtered.setPersistenceAdapter(kahaStore);
1:0ae90c0:         List<FilteredKahaDBPersistenceAdapter> stores = new ArrayList<>();
1:0ae90c0:         stores.add(filtered);
1:0ae90c0: 
1:0ae90c0:         persistenceAdapter.setFilteredPersistenceAdapters(stores);
1:0ae90c0: 
1:0ae90c0:         BrokerService brokerService = createBroker(persistenceAdapter);
1:0ae90c0:         brokerService.getSystemUsage().getStoreUsage().setTotal(1024*1024);
1:0ae90c0:         brokerService.start();
1:0ae90c0: 
1:0ae90c0: 
1:0ae90c0:         produceMessages(queueA, 20);
1:0ae90c0: 
1:0ae90c0:         LOG.info("Store global u: " + broker.getSystemUsage().getStoreUsage().getUsage() + ", %:" + broker.getSystemUsage().getStoreUsage().getPercentUsage());
1:0ae90c0: 
1:0ae90c0:         assertTrue("some usage", broker.getSystemUsage().getStoreUsage().getUsage() > 0);
1:0ae90c0: 
1:0ae90c0:         BaseDestination baseDestinationA = (BaseDestination) broker.getRegionBroker().getDestinationMap().get(queueA);
1:0ae90c0:         LOG.info("Store A u: " + baseDestinationA.getSystemUsage().getStoreUsage().getUsage() + ", %: " + baseDestinationA.getSystemUsage().getStoreUsage().getPercentUsage());
1:0ae90c0: 
1:0ae90c0:         assertTrue("limited store has more % usage than parent", baseDestinationA.getSystemUsage().getStoreUsage().getPercentUsage() > broker.getSystemUsage().getStoreUsage().getPercentUsage());
1:0ae90c0: 
1:0ae90c0:     }
1:0ae90c0: 
1:0ae90c0:     @Test
1:fad5081:     public void testExplicitAdapterBlockingProducer() throws Exception {
1:fad5081:         MultiKahaDBPersistenceAdapter persistenceAdapter = new MultiKahaDBPersistenceAdapter();
1:fad5081:         KahaDBPersistenceAdapter kahaStore = new KahaDBPersistenceAdapter();
1:fad5081:         kahaStore.setJournalMaxFileLength(1024*8);
1:fad5081:         kahaStore.setIndexDirectory(new File(IOHelper.getDefaultDataDirectory()));
1:fad5081: 
1:fad5081:         FilteredKahaDBPersistenceAdapter filtered = new FilteredKahaDBPersistenceAdapter();
1:fad5081:         StoreUsage storeUsage = new StoreUsage();
1:fad5081:         storeUsage.setLimit(40*1024);
1:fad5081: 
1:fad5081:         filtered.setUsage(storeUsage);
1:fad5081:         filtered.setDestination(queueA);
1:fad5081:         filtered.setPersistenceAdapter(kahaStore);
1:fad5081:         List<FilteredKahaDBPersistenceAdapter> stores = new ArrayList<>();
1:fad5081:         stores.add(filtered);
1:fad5081: 
1:fad5081:         persistenceAdapter.setFilteredPersistenceAdapters(stores);
1:fad5081: 
1:fad5081:         BrokerService brokerService = createBroker(persistenceAdapter);
1:fad5081:         brokerService.start();
1:0ae90c0: 
1:fad5081:         final AtomicBoolean done = new AtomicBoolean();
1:fad5081:         ExecutorService executor = Executors.newCachedThreadPool();
1:fad5081:         executor.submit(new Runnable() {
1:fad5081:             @Override
1:fad5081:             public void run() {
1:fad5081:                 try {
1:fad5081:                     produceMessages(queueA, 20);
1:fad5081:                     done.set(true);
1:fad5081:                 } catch (Exception ignored) {
1:fad5081:                 }
1:fad5081:             }
1:fad5081:         });
1:fad5081: 
1:fad5081:         assertTrue("some messages got to dest", Wait.waitFor(new Wait.Condition() {
1:fad5081:             @Override
1:fad5081:             public boolean isSatisified() throws Exception {
1:fad5081:                 BaseDestination baseDestinationA = (BaseDestination) broker.getRegionBroker().getDestinationMap().get(queueA);
1:fad5081:                 return baseDestinationA != null && baseDestinationA.getDestinationStatistics().getMessages().getCount() > 4l;
1:fad5081:             }
1:fad5081:         }));
1:fad5081: 
1:fad5081:         BaseDestination baseDestinationA = (BaseDestination) broker.getRegionBroker().getDestinationMap().get(queueA);
1:fad5081:         // loop till producer stalled
1:fad5081:         long enqueues = 0l;
1:fad5081:         do {
1:fad5081:             enqueues = baseDestinationA.getDestinationStatistics().getEnqueues().getCount();
1:fad5081:             LOG.info("Dest Enqueues: " + enqueues);
1:fad5081:             TimeUnit.MILLISECONDS.sleep(500);
1:fad5081:         } while (enqueues != baseDestinationA.getDestinationStatistics().getEnqueues().getCount());
1:fad5081: 
1:fad5081: 
1:fad5081:         assertFalse("expect producer to block", done.get());
1:fad5081: 
1:fad5081:         LOG.info("Store global u: " + broker.getSystemUsage().getStoreUsage().getUsage() + ", %:" + broker.getSystemUsage().getStoreUsage().getPercentUsage());
1:fad5081: 
1:fad5081:         assertTrue("some usage", broker.getSystemUsage().getStoreUsage().getUsage() > 0);
1:fad5081: 
1:fad5081:         LOG.info("Store A u: " + baseDestinationA.getSystemUsage().getStoreUsage().getUsage() + ", %: " + baseDestinationA.getSystemUsage().getStoreUsage().getPercentUsage());
1:fad5081: 
1:fad5081:         assertTrue("limited store has more % usage than parent", baseDestinationA.getSystemUsage().getStoreUsage().getPercentUsage() > broker.getSystemUsage().getStoreUsage().getPercentUsage());
1:fad5081: 
1:fad5081:         executor.shutdownNow();
1:fad5081:     }
1:fad5081: 
1:0ae90c0: 
1:0ae90c0:     private void consume(Destination queue) throws Exception {
1:0ae90c0:         ActiveMQConnectionFactory cf = new ActiveMQConnectionFactory("vm://localhost?create=false");
1:0ae90c0:         Connection connection = cf.createConnection();
1:0ae90c0:         connection.start();
1:0ae90c0:         Session session = connection.createSession(false, Session.AUTO_ACKNOWLEDGE);
1:0ae90c0:         MessageConsumer consumer = session.createConsumer(queue);
1:0ae90c0:         for (int i = 0; i < 5; ++i) {
1:0ae90c0:             assertNotNull("message[" + i + "]", consumer.receive(4000));
1:0ae90c0:         }
1:0ae90c0:         connection.close();
1:0ae90c0:     }
1:0ae90c0: 
1:0ae90c0:     private void produceMessages(Destination queue, int count) throws Exception {
1:0ae90c0:         ActiveMQConnectionFactory cf = new ActiveMQConnectionFactory("vm://localhost?create=false");
1:0ae90c0:         Connection connection = cf.createConnection();
1:0ae90c0:         connection.start();
1:0ae90c0:         Session session = connection.createSession(false, Session.AUTO_ACKNOWLEDGE);
1:0ae90c0:         MessageProducer producer = session.createProducer(queue);
1:0ae90c0:         BytesMessage bytesMessage = session.createBytesMessage();
1:fad5081:         bytesMessage.writeBytes(new byte[1*1024]);
1:0ae90c0:         for (int i = 0; i < count; ++i) {
1:0ae90c0:             producer.send(bytesMessage);
1:0ae90c0:         }
1:0ae90c0:         connection.close();
1:0ae90c0:     }
1:0ae90c0: }
============================================================================
author:gtully
-------------------------------------------------------------------------------
commit:fad5081
/////////////////////////////////////////////////////////////////////////
1: import org.apache.activemq.util.IOHelper;
1: import org.apache.activemq.util.Wait;
/////////////////////////////////////////////////////////////////////////
1: import java.io.File;
1: import java.util.concurrent.Executor;
1: import java.util.concurrent.ExecutorService;
1: import java.util.concurrent.Executors;
1: import java.util.concurrent.TimeUnit;
1: import java.util.concurrent.atomic.AtomicBoolean;
/////////////////////////////////////////////////////////////////////////
1:     @Test
1:     public void testExplicitAdapterBlockingProducer() throws Exception {
1:         MultiKahaDBPersistenceAdapter persistenceAdapter = new MultiKahaDBPersistenceAdapter();
1:         KahaDBPersistenceAdapter kahaStore = new KahaDBPersistenceAdapter();
1:         kahaStore.setJournalMaxFileLength(1024*8);
1:         kahaStore.setIndexDirectory(new File(IOHelper.getDefaultDataDirectory()));
1: 
1:         FilteredKahaDBPersistenceAdapter filtered = new FilteredKahaDBPersistenceAdapter();
1:         StoreUsage storeUsage = new StoreUsage();
1:         storeUsage.setLimit(40*1024);
1: 
1:         filtered.setUsage(storeUsage);
1:         filtered.setDestination(queueA);
1:         filtered.setPersistenceAdapter(kahaStore);
1:         List<FilteredKahaDBPersistenceAdapter> stores = new ArrayList<>();
1:         stores.add(filtered);
1: 
1:         persistenceAdapter.setFilteredPersistenceAdapters(stores);
1: 
1:         BrokerService brokerService = createBroker(persistenceAdapter);
1:         brokerService.start();
1: 
1:         final AtomicBoolean done = new AtomicBoolean();
1:         ExecutorService executor = Executors.newCachedThreadPool();
1:         executor.submit(new Runnable() {
1:             @Override
1:             public void run() {
1:                 try {
1:                     produceMessages(queueA, 20);
1:                     done.set(true);
1:                 } catch (Exception ignored) {
1:                 }
1:             }
1:         });
1: 
1:         assertTrue("some messages got to dest", Wait.waitFor(new Wait.Condition() {
1:             @Override
1:             public boolean isSatisified() throws Exception {
1:                 BaseDestination baseDestinationA = (BaseDestination) broker.getRegionBroker().getDestinationMap().get(queueA);
1:                 return baseDestinationA != null && baseDestinationA.getDestinationStatistics().getMessages().getCount() > 4l;
1:             }
1:         }));
1: 
1:         BaseDestination baseDestinationA = (BaseDestination) broker.getRegionBroker().getDestinationMap().get(queueA);
1:         // loop till producer stalled
1:         long enqueues = 0l;
1:         do {
1:             enqueues = baseDestinationA.getDestinationStatistics().getEnqueues().getCount();
1:             LOG.info("Dest Enqueues: " + enqueues);
1:             TimeUnit.MILLISECONDS.sleep(500);
1:         } while (enqueues != baseDestinationA.getDestinationStatistics().getEnqueues().getCount());
1: 
1: 
1:         assertFalse("expect producer to block", done.get());
1: 
1:         LOG.info("Store global u: " + broker.getSystemUsage().getStoreUsage().getUsage() + ", %:" + broker.getSystemUsage().getStoreUsage().getPercentUsage());
1: 
1:         assertTrue("some usage", broker.getSystemUsage().getStoreUsage().getUsage() > 0);
1: 
1:         LOG.info("Store A u: " + baseDestinationA.getSystemUsage().getStoreUsage().getUsage() + ", %: " + baseDestinationA.getSystemUsage().getStoreUsage().getPercentUsage());
1: 
1:         assertTrue("limited store has more % usage than parent", baseDestinationA.getSystemUsage().getStoreUsage().getPercentUsage() > broker.getSystemUsage().getStoreUsage().getPercentUsage());
1: 
1:         executor.shutdownNow();
1:     }
1: 
/////////////////////////////////////////////////////////////////////////
1:         bytesMessage.writeBytes(new byte[1*1024]);
commit:0ae90c0
/////////////////////////////////////////////////////////////////////////
1: /**
1:  * Licensed to the Apache Software Foundation (ASF) under one or more
1:  * contributor license agreements.  See the NOTICE file distributed with
1:  * this work for additional information regarding copyright ownership.
1:  * The ASF licenses this file to You under the Apache License, Version 2.0
1:  * (the "License"); you may not use this file except in compliance with
1:  * the License.  You may obtain a copy of the License at
1:  *
1:  *      http://www.apache.org/licenses/LICENSE-2.0
1:  *
1:  * Unless required by applicable law or agreed to in writing, software
1:  * distributed under the License is distributed on an "AS IS" BASIS,
1:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:  * See the License for the specific language governing permissions and
1:  * limitations under the License.
1:  */
1: package org.apache.activemq.store.kahadb;
1: 
1: import org.apache.activemq.ActiveMQConnectionFactory;
1: import org.apache.activemq.broker.BrokerService;
1: import org.apache.activemq.broker.region.BaseDestination;
1: import org.apache.activemq.command.ActiveMQQueue;
1: import org.apache.activemq.usage.StoreUsage;
1: import org.junit.After;
1: import org.junit.Test;
1: import org.slf4j.Logger;
1: import org.slf4j.LoggerFactory;
1: 
1: import javax.jms.BytesMessage;
1: import javax.jms.Connection;
1: import javax.jms.Destination;
1: import javax.jms.MessageConsumer;
1: import javax.jms.MessageProducer;
1: import javax.jms.Session;
1: import java.util.ArrayList;
1: import java.util.List;
1: 
1: import static org.junit.Assert.*;
1: 
1: public class MKahaDBStoreLimitTest {
1: 
1:     private static final Logger LOG = LoggerFactory.getLogger(MKahaDBStoreLimitTest.class);
1: 
1:     final ActiveMQQueue queueA = new ActiveMQQueue("Q.A");
1:     final ActiveMQQueue queueB = new ActiveMQQueue("Q.B");
1: 
1:     private BrokerService broker;
1: 
1:     @After
1:     public void stopBroker() throws Exception {
1:         if (broker != null) {
1:             broker.stop();
1:             broker.waitUntilStopped();
1:         }
1:     }
1: 
1:     private BrokerService createBroker(MultiKahaDBPersistenceAdapter persistenceAdapter) throws Exception {
1:         broker = new BrokerService();
1:         broker.setPersistenceAdapter(persistenceAdapter);
1:         broker.setUseJmx(false);
1:         broker.setAdvisorySupport(false);
1:         broker.setSchedulerSupport(false);
1:         broker.setPersistenceAdapter(persistenceAdapter);
1:         broker.setDeleteAllMessagesOnStartup(true);
1:         return broker;
1:     }
1: 
1:     @Test
1:     public void testPerDestUsage() throws Exception {
1: 
1:         // setup multi-kaha adapter
1:         MultiKahaDBPersistenceAdapter persistenceAdapter = new MultiKahaDBPersistenceAdapter();
1: 
1:         KahaDBPersistenceAdapter kahaStore = new KahaDBPersistenceAdapter();
1:         kahaStore.setJournalMaxFileLength(1024 * 5);
1:         kahaStore.setCleanupInterval(1000);
1: 
1:         // set up a store per destination
1:         FilteredKahaDBPersistenceAdapter filtered = new FilteredKahaDBPersistenceAdapter();
1:         StoreUsage storeUsage = new StoreUsage();
1:         storeUsage.setPercentLimit(10);
1:         storeUsage.setTotal(1024*1024*10);
1:         filtered.setUsage(storeUsage);
1:         filtered.setPersistenceAdapter(kahaStore);
1:         filtered.setPerDestination(true);
1:         List<FilteredKahaDBPersistenceAdapter> stores = new ArrayList<>();
1:         stores.add(filtered);
1: 
1:         persistenceAdapter.setFilteredPersistenceAdapters(stores);
1: 
1:         createBroker(persistenceAdapter).start();
1: 
1: 
1: 
1:         produceMessages(queueA, 20);
1:         produceMessages(queueB, 0);
1: 
1:         LOG.info("Store global u: " + broker.getSystemUsage().getStoreUsage().getUsage() + ", %:" + broker.getSystemUsage().getStoreUsage().getPercentUsage());
1: 
1:         assertTrue("some usage", broker.getSystemUsage().getStoreUsage().getUsage() > 0);
1: 
1:         BaseDestination baseDestinationA = (BaseDestination) broker.getRegionBroker().getDestinationMap().get(queueA);
1:         BaseDestination baseDestinationB = (BaseDestination) broker.getRegionBroker().getDestinationMap().get(queueB);
1: 
1:         LOG.info("Store A u: " + baseDestinationA.getSystemUsage().getStoreUsage().getUsage() + ", %: " + baseDestinationA.getSystemUsage().getStoreUsage().getPercentUsage());
1: 
1:         assertTrue(baseDestinationA.getSystemUsage().getStoreUsage().getUsage() > 0);
1: 
1:         produceMessages(queueB, 40);
1:         assertTrue(baseDestinationB.getSystemUsage().getStoreUsage().getUsage() > 0);
1:         assertTrue(baseDestinationB.getSystemUsage().getStoreUsage().getUsage() > baseDestinationA.getSystemUsage().getStoreUsage().getUsage());
1: 
1:         LOG.info("Store B u: " + baseDestinationB.getSystemUsage().getStoreUsage().getUsage() + ", %: " + baseDestinationB.getSystemUsage().getStoreUsage().getPercentUsage());
1:         LOG.info("Store global u: " + broker.getSystemUsage().getStoreUsage().getUsage() + ", %:" + broker.getSystemUsage().getStoreUsage().getPercentUsage());
1: 
1:         consume(queueA);
1: 
1:         consume(queueB);
1: 
1:         LOG.info("Store global u: " + broker.getSystemUsage().getStoreUsage().getUsage() + ", %:" + broker.getSystemUsage().getStoreUsage().getPercentUsage());
1:         LOG.info("Store A u: " + baseDestinationA.getSystemUsage().getStoreUsage().getUsage() + ", %: " + baseDestinationA.getSystemUsage().getStoreUsage().getPercentUsage());
1:         LOG.info("Store B u: " + baseDestinationB.getSystemUsage().getStoreUsage().getUsage() + ", %: " + baseDestinationB.getSystemUsage().getStoreUsage().getPercentUsage());
1: 
1:     }
1: 
1:     @Test
1:     public void testExplicitAdapter() throws Exception {
1:         MultiKahaDBPersistenceAdapter persistenceAdapter = new MultiKahaDBPersistenceAdapter();
1:         KahaDBPersistenceAdapter kahaStore = new KahaDBPersistenceAdapter();
1:         kahaStore.setJournalMaxFileLength(1024*25);
1: 
1:         FilteredKahaDBPersistenceAdapter filtered = new FilteredKahaDBPersistenceAdapter();
1:         StoreUsage storeUsage = new StoreUsage();
1:         storeUsage.setPercentLimit(50);
1:         storeUsage.setTotal(512*1024);
1: 
1:         filtered.setUsage(storeUsage);
1:         filtered.setDestination(queueA);
1:         filtered.setPersistenceAdapter(kahaStore);
1:         List<FilteredKahaDBPersistenceAdapter> stores = new ArrayList<>();
1:         stores.add(filtered);
1: 
1:         persistenceAdapter.setFilteredPersistenceAdapters(stores);
1: 
1:         BrokerService brokerService = createBroker(persistenceAdapter);
1:         brokerService.getSystemUsage().getStoreUsage().setTotal(1024*1024);
1:         brokerService.start();
1: 
1: 
1:         produceMessages(queueA, 20);
1: 
1:         LOG.info("Store global u: " + broker.getSystemUsage().getStoreUsage().getUsage() + ", %:" + broker.getSystemUsage().getStoreUsage().getPercentUsage());
1: 
1:         assertTrue("some usage", broker.getSystemUsage().getStoreUsage().getUsage() > 0);
1: 
1:         BaseDestination baseDestinationA = (BaseDestination) broker.getRegionBroker().getDestinationMap().get(queueA);
1:         LOG.info("Store A u: " + baseDestinationA.getSystemUsage().getStoreUsage().getUsage() + ", %: " + baseDestinationA.getSystemUsage().getStoreUsage().getPercentUsage());
1: 
1:         assertTrue("limited store has more % usage than parent", baseDestinationA.getSystemUsage().getStoreUsage().getPercentUsage() > broker.getSystemUsage().getStoreUsage().getPercentUsage());
1: 
1:     }
1: 
1: 
1:     private void consume(Destination queue) throws Exception {
1:         ActiveMQConnectionFactory cf = new ActiveMQConnectionFactory("vm://localhost?create=false");
1:         Connection connection = cf.createConnection();
1:         connection.start();
1:         Session session = connection.createSession(false, Session.AUTO_ACKNOWLEDGE);
1:         MessageConsumer consumer = session.createConsumer(queue);
1:         for (int i = 0; i < 5; ++i) {
1:             assertNotNull("message[" + i + "]", consumer.receive(4000));
1:         }
1:         connection.close();
1:     }
1: 
1:     private void produceMessages(Destination queue, int count) throws Exception {
1:         ActiveMQConnectionFactory cf = new ActiveMQConnectionFactory("vm://localhost?create=false");
1:         Connection connection = cf.createConnection();
1:         connection.start();
1:         Session session = connection.createSession(false, Session.AUTO_ACKNOWLEDGE);
1:         MessageProducer producer = session.createProducer(queue);
1:         BytesMessage bytesMessage = session.createBytesMessage();
0:         bytesMessage.writeBytes(new byte[2*1024]);
1:         for (int i = 0; i < count; ++i) {
1:             producer.send(bytesMessage);
1:         }
1:         connection.close();
1:     }
1: }
============================================================================