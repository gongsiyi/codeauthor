1:c7c8e53: /**
1:c7c8e53:  * Licensed to the Apache Software Foundation (ASF) under one or more
1:c7c8e53:  * contributor license agreements.  See the NOTICE file distributed with
1:c7c8e53:  * this work for additional information regarding copyright ownership.
1:c7c8e53:  * The ASF licenses this file to You under the Apache License, Version 2.0
1:c7c8e53:  * (the "License"); you may not use this file except in compliance with
1:c7c8e53:  * the License.  You may obtain a copy of the License at
1:c7c8e53:  *
1:c7c8e53:  *      http://www.apache.org/licenses/LICENSE-2.0
1:c7c8e53:  *
1:c7c8e53:  * Unless required by applicable law or agreed to in writing, software
1:c7c8e53:  * distributed under the License is distributed on an "AS IS" BASIS,
1:c7c8e53:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:c7c8e53:  * See the License for the specific language governing permissions and
1:c7c8e53:  * limitations under the License.
1:c7c8e53:  */
1:c7c8e53: package org.apache.activemq.broker.scheduler;
6:c7c8e53: 
1:c7c8e53: import java.util.Collections;
1:c7c8e53: import java.util.List;
1:2d861da: 
1:1aab71b: import org.apache.activemq.util.ByteSequence;
1:c7c8e53: 
1:74846bb: /**
1:74846bb:  * A wrapper for instances of the JobScheduler interface that ensures that methods
1:74846bb:  * provides safe and sane return values and can deal with null values being passed
1:74846bb:  * in etc.  Provides a measure of safety when using unknown implementations of the
1:74846bb:  * JobSchedulerStore which might not always do the right thing.
1:74846bb:  */
1:c7c8e53: public class JobSchedulerFacade implements JobScheduler {
1:c7c8e53: 
1:c7c8e53:     private final SchedulerBroker broker;
1:2d861da: 
1:2d861da:     JobSchedulerFacade(SchedulerBroker broker) {
1:2d861da:         this.broker = broker;
1:c7c8e53:     }
1:2d861da: 
1:2d861da:     @Override
1:c7c8e53:     public void addListener(JobListener l) throws Exception {
1:c7c8e53:         JobScheduler js = this.broker.getInternalScheduler();
1:2d861da:         if (js != null) {
1:c7c8e53:             js.addListener(l);
1:c7c8e53:         }
1:c7c8e53:     }
1:e3154c3: 
1:2d861da:     @Override
1:c7c8e53:     public List<Job> getAllJobs() throws Exception {
1:c7c8e53:         JobScheduler js = this.broker.getInternalScheduler();
1:2d861da:         if (js != null) {
1:c7c8e53:             return js.getAllJobs();
1:c7c8e53:         }
1:c7c8e53:         return Collections.emptyList();
1:c7c8e53:     }
1:c7c8e53: 
1:2d861da:     @Override
1:c7c8e53:     public List<Job> getAllJobs(long start, long finish) throws Exception {
1:c7c8e53:         JobScheduler js = this.broker.getInternalScheduler();
1:2d861da:         if (js != null) {
1:2d861da:             return js.getAllJobs(start, finish);
1:c7c8e53:         }
1:c7c8e53:         return Collections.emptyList();
1:c7c8e53:     }
1:c7c8e53: 
1:2d861da:     @Override
1:c7c8e53:     public String getName() throws Exception {
1:c7c8e53:         JobScheduler js = this.broker.getInternalScheduler();
1:2d861da:         if (js != null) {
1:c7c8e53:             return js.getName();
1:c7c8e53:         }
1:c7c8e53:         return "";
1:c7c8e53:     }
1:c7c8e53: 
1:2d861da:     @Override
1:c7c8e53:     public List<Job> getNextScheduleJobs() throws Exception {
1:c7c8e53:         JobScheduler js = this.broker.getInternalScheduler();
1:2d861da:         if (js != null) {
1:c7c8e53:             return js.getNextScheduleJobs();
1:c7c8e53:         }
1:c7c8e53:         return Collections.emptyList();
1:c7c8e53:     }
1:c7c8e53: 
1:2d861da:     @Override
1:c7c8e53:     public long getNextScheduleTime() throws Exception {
1:c7c8e53:         JobScheduler js = this.broker.getInternalScheduler();
1:2d861da:         if (js != null) {
1:c7c8e53:             return js.getNextScheduleTime();
1:c7c8e53:         }
1:c7c8e53:         return 0;
1:c7c8e53:     }
1:c7c8e53: 
1:2d861da:     @Override
1:c7c8e53:     public void remove(long time) throws Exception {
1:c7c8e53:         JobScheduler js = this.broker.getInternalScheduler();
1:2d861da:         if (js != null) {
1:c7c8e53:             js.remove(time);
1:c7c8e53:         }
1:c7c8e53:     }
1:c7c8e53: 
1:2d861da:     @Override
1:c7c8e53:     public void remove(String jobId) throws Exception {
1:c7c8e53:         JobScheduler js = this.broker.getInternalScheduler();
1:2d861da:         if (js != null) {
1:c7c8e53:             js.remove(jobId);
1:c7c8e53:         }
1:c7c8e53:     }
1:c7c8e53: 
1:2d861da:     @Override
1:c7c8e53:     public void removeAllJobs() throws Exception {
1:c7c8e53:         JobScheduler js = this.broker.getInternalScheduler();
1:2d861da:         if (js != null) {
1:c7c8e53:             js.removeAllJobs();
1:c7c8e53:         }
1:c7c8e53:     }
1:c7c8e53: 
1:2d861da:     @Override
1:c7c8e53:     public void removeAllJobs(long start, long finish) throws Exception {
1:c7c8e53:         JobScheduler js = this.broker.getInternalScheduler();
1:2d861da:         if (js != null) {
1:2d861da:             js.removeAllJobs(start, finish);
1:c7c8e53:         }
1:c7c8e53:     }
1:c7c8e53: 
1:2d861da:     @Override
1:c7c8e53:     public void removeListener(JobListener l) throws Exception {
1:c7c8e53:         JobScheduler js = this.broker.getInternalScheduler();
1:2d861da:         if (js != null) {
1:c7c8e53:             js.removeListener(l);
1:c7c8e53:         }
1:c7c8e53:     }
1:c7c8e53: 
1:2d861da:     @Override
1:c7c8e53:     public void schedule(String jobId, ByteSequence payload, long delay) throws Exception {
1:c7c8e53:         JobScheduler js = this.broker.getInternalScheduler();
1:2d861da:         if (js != null) {
1:c7c8e53:             js.schedule(jobId, payload, delay);
1:c7c8e53:         }
1:c7c8e53:     }
1:c7c8e53: 
1:2d861da:     @Override
1:2d861da:     public void schedule(String jobId, ByteSequence payload, String cronEntry, long start, long period, int repeat) throws Exception {
1:c7c8e53:         JobScheduler js = this.broker.getInternalScheduler();
1:2d861da:         if (js != null) {
1:2d861da:             js.schedule(jobId, payload, cronEntry, start, period, repeat);
1:c7c8e53:         }
1:c7c8e53:     }
1:2d861da: 
1:2d861da:     @Override
1:e3154c3:     public void schedule(String jobId, ByteSequence payload, String cronEntry) throws Exception {
1:e3154c3:         JobScheduler js = this.broker.getInternalScheduler();
1:2d861da:         if (js != null) {
1:e3154c3:             js.schedule(jobId, payload, cronEntry);
1:2d861da:         }
1:e3154c3:     }
1:2d861da: 
1:2d861da:     @Override
1:2d861da:     public void startDispatching() throws Exception {
1:2d861da:         JobScheduler js = this.broker.getInternalScheduler();
1:2d861da:         if (js != null) {
1:2d861da:             js.startDispatching();
1:2d861da:         }
1:2d861da:     }
1:2d861da: 
1:2d861da:     @Override
1:2d861da:     public void stopDispatching() throws Exception {
1:2d861da:         JobScheduler js = this.broker.getInternalScheduler();
1:2d861da:         if (js != null) {
1:2d861da:             js.stopDispatching();
1:2d861da:         }
1:e3154c3:     }
1:c7c8e53: }
============================================================================
author:Timothy Bish
-------------------------------------------------------------------------------
commit:74846bb
/////////////////////////////////////////////////////////////////////////
1: /**
1:  * A wrapper for instances of the JobScheduler interface that ensures that methods
1:  * provides safe and sane return values and can deal with null values being passed
1:  * in etc.  Provides a measure of safety when using unknown implementations of the
1:  * JobSchedulerStore which might not always do the right thing.
1:  */
author:Timothy A. Bish
-------------------------------------------------------------------------------
commit:2d861da
/////////////////////////////////////////////////////////////////////////
1: 
1: 
1:     JobSchedulerFacade(SchedulerBroker broker) {
1:         this.broker = broker;
1: 
1:     @Override
1:         if (js != null) {
1:     @Override
1:         if (js != null) {
1:     @Override
1:         if (js != null) {
1:             return js.getAllJobs(start, finish);
1:     @Override
1:         if (js != null) {
1:     @Override
1:         if (js != null) {
1:     @Override
1:         if (js != null) {
1:     @Override
1:         if (js != null) {
1:     @Override
1:         if (js != null) {
1:     @Override
1:         if (js != null) {
1:     @Override
1:         if (js != null) {
1:             js.removeAllJobs(start, finish);
1:     @Override
1:         if (js != null) {
1:     @Override
1:         if (js != null) {
1:     @Override
1:     public void schedule(String jobId, ByteSequence payload, String cronEntry, long start, long period, int repeat) throws Exception {
1:         if (js != null) {
1:             js.schedule(jobId, payload, cronEntry, start, period, repeat);
1: 
1:     @Override
1:         if (js != null) {
1:     }
1: 
1:     @Override
1:     public void startDispatching() throws Exception {
1:         JobScheduler js = this.broker.getInternalScheduler();
1:         if (js != null) {
1:             js.startDispatching();
1:         }
1:     }
1: 
1:     @Override
1:     public void stopDispatching() throws Exception {
1:         JobScheduler js = this.broker.getInternalScheduler();
1:         if (js != null) {
1:             js.stopDispatching();
1:         }
author:Hiram R. Chirino
-------------------------------------------------------------------------------
commit:58aca86
commit:1aab71b
/////////////////////////////////////////////////////////////////////////
1: import org.apache.activemq.util.ByteSequence;
author:Robert Davies
-------------------------------------------------------------------------------
commit:e3154c3
/////////////////////////////////////////////////////////////////////////
0:     public void schedule(String jobId, ByteSequence payload,String cronEntry, long start, long period, int repeat) throws Exception {
0:             js.schedule(jobId, payload, cronEntry,start,period,repeat);
1:     public void schedule(String jobId, ByteSequence payload, String cronEntry) throws Exception {
1:         JobScheduler js = this.broker.getInternalScheduler();
0:         if (js !=null) {
1:             js.schedule(jobId, payload, cronEntry);
1:         }
1:         
1:     }
commit:c7c8e53
/////////////////////////////////////////////////////////////////////////
1: /**
1:  * Licensed to the Apache Software Foundation (ASF) under one or more
1:  * contributor license agreements.  See the NOTICE file distributed with
1:  * this work for additional information regarding copyright ownership.
1:  * The ASF licenses this file to You under the Apache License, Version 2.0
1:  * (the "License"); you may not use this file except in compliance with
1:  * the License.  You may obtain a copy of the License at
1:  *
1:  *      http://www.apache.org/licenses/LICENSE-2.0
1:  *
1:  * Unless required by applicable law or agreed to in writing, software
1:  * distributed under the License is distributed on an "AS IS" BASIS,
1:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:  * See the License for the specific language governing permissions and
1:  * limitations under the License.
1:  */
1: package org.apache.activemq.broker.scheduler;
1: 
1: import java.util.Collections;
1: import java.util.List;
0: import org.apache.kahadb.util.ByteSequence;
1: 
1: public class JobSchedulerFacade implements JobScheduler {
1: 
1:     private final SchedulerBroker broker;
1:     
0:     JobSchedulerFacade(SchedulerBroker broker){
0:         this.broker=broker;
1:     }
1:     public void addListener(JobListener l) throws Exception {
1:         JobScheduler js = this.broker.getInternalScheduler();
0:         if (js !=null) {
1:             js.addListener(l);
1:         }
1:     }
1: 
1:     public List<Job> getAllJobs() throws Exception {
1:         JobScheduler js = this.broker.getInternalScheduler();
0:         if (js !=null) {
1:             return js.getAllJobs();
1:         }
1:         return Collections.emptyList();
1:     }
1: 
1:     public List<Job> getAllJobs(long start, long finish) throws Exception {
1:         JobScheduler js = this.broker.getInternalScheduler();
0:         if (js !=null) {
0:             return js.getAllJobs(start,finish);
1:         }
1:         return Collections.emptyList();
1:     }
1: 
1:     public String getName() throws Exception {
1:         JobScheduler js = this.broker.getInternalScheduler();
0:         if (js !=null) {
1:             return js.getName();
1:         }
1:         return "";
1:     }
1: 
1:     public List<Job> getNextScheduleJobs() throws Exception {
1:         JobScheduler js = this.broker.getInternalScheduler();
0:         if (js !=null) {
1:             return js.getNextScheduleJobs();
1:         }
1:         return Collections.emptyList();
1:     }
1: 
1:     public long getNextScheduleTime() throws Exception {
1:         JobScheduler js = this.broker.getInternalScheduler();
0:         if (js !=null) {
1:             return js.getNextScheduleTime();
1:         }
1:         return 0;
1:     }
1: 
1:     public void remove(long time) throws Exception {
1:         JobScheduler js = this.broker.getInternalScheduler();
0:         if (js !=null) {
1:             js.remove(time);
1:         }
1:     }
1: 
1:     public void remove(String jobId) throws Exception {
1:         JobScheduler js = this.broker.getInternalScheduler();
0:         if (js !=null) {
1:             js.remove(jobId);
1:         }
1: 
1:     }
1: 
1:     public void removeAllJobs() throws Exception {
1:         JobScheduler js = this.broker.getInternalScheduler();
0:         if (js !=null) {
1:             js.removeAllJobs();
1:         }
1:     }
1: 
1:     public void removeAllJobs(long start, long finish) throws Exception {
1:         JobScheduler js = this.broker.getInternalScheduler();
0:         if (js !=null) {
0:             js.removeAllJobs(start,finish);
1:         }
1: 
1:     }
1: 
1:     public void removeListener(JobListener l) throws Exception {
1:         JobScheduler js = this.broker.getInternalScheduler();
0:         if (js !=null) {
1:             js.removeListener(l);
1:         }
1: 
1:     }
1: 
1:     public void schedule(String jobId, ByteSequence payload, long delay) throws Exception {
1:         JobScheduler js = this.broker.getInternalScheduler();
0:         if (js !=null) {
1:             js.schedule(jobId, payload, delay);
1:         }
1:     }
1: 
0:     public void schedule(String jobId, ByteSequence payload, long start, long period, int repeat) throws Exception {
1:         JobScheduler js = this.broker.getInternalScheduler();
0:         if (js !=null) {
0:             js.schedule(jobId, payload, start,period,repeat);
1:         }
1:     }
1: }
============================================================================