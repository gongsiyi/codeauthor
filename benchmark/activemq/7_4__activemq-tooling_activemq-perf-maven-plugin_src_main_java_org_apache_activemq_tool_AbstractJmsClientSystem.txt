1:a88906f: /**
1:57b4941:  * Licensed to the Apache Software Foundation (ASF) under one or more
1:57b4941:  * contributor license agreements.  See the NOTICE file distributed with
1:57b4941:  * this work for additional information regarding copyright ownership.
1:57b4941:  * The ASF licenses this file to You under the Apache License, Version 2.0
1:57b4941:  * (the "License"); you may not use this file except in compliance with
1:57b4941:  * the License.  You may obtain a copy of the License at
3:a88906f:  *
1:5f1adbe:  *      http://www.apache.org/licenses/LICENSE-2.0
1:a88906f:  *
1:a88906f:  * Unless required by applicable law or agreed to in writing, software
1:a88906f:  * distributed under the License is distributed on an "AS IS" BASIS,
1:a88906f:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:a88906f:  * See the License for the specific language governing permissions and
1:a88906f:  * limitations under the License.
1:a88906f:  */
1:a88906f: package org.apache.activemq.tool;
9:a88906f: 
1:a88906f: import java.io.File;
1:a88906f: import java.io.FileInputStream;
1:540dd5c: import java.io.IOException;
1:e47e0e0: import java.util.ArrayList;
1:540dd5c: import java.util.Enumeration;
1:e47e0e0: import java.util.List;
1:540dd5c: import java.util.Properties;
1:e47e0e0: import java.util.Set;
1:e47e0e0: import java.util.concurrent.CountDownLatch;
1:540dd5c: 
1:540dd5c: import javax.jms.ConnectionFactory;
1:540dd5c: import javax.jms.ConnectionMetaData;
1:540dd5c: import javax.jms.JMSException;
1:540dd5c: 
1:540dd5c: import org.apache.activemq.tool.properties.AbstractObjectProperties;
1:540dd5c: import org.apache.activemq.tool.properties.JmsClientProperties;
1:540dd5c: import org.apache.activemq.tool.properties.JmsClientSystemProperties;
1:540dd5c: import org.apache.activemq.tool.properties.JmsFactoryProperties;
1:540dd5c: import org.apache.activemq.tool.properties.ReflectionUtil;
1:540dd5c: import org.apache.activemq.tool.reports.PerformanceReportWriter;
1:540dd5c: import org.apache.activemq.tool.reports.VerbosePerfReportWriter;
1:540dd5c: import org.apache.activemq.tool.reports.XmlFilePerfReportWriter;
1:540dd5c: import org.apache.activemq.tool.sampler.CpuSamplerTask;
1:e47e0e0: import org.apache.activemq.tool.sampler.PerformanceSampler;
1:540dd5c: import org.apache.activemq.tool.sampler.ThroughputSamplerTask;
1:540dd5c: import org.apache.activemq.tool.spi.SPIConnectionFactory;
1:8bf987b: import org.slf4j.Logger;
1:8bf987b: import org.slf4j.LoggerFactory;
1:a88906f: 
1:a88906f: public abstract class AbstractJmsClientSystem extends AbstractObjectProperties {
1:8bf987b:     private static final Logger LOG = LoggerFactory.getLogger(AbstractJmsClientSystem.class);
1:a88906f: 
1:a88906f:     protected ThreadGroup clientThreadGroup;
1:a88906f:     protected ConnectionFactory jmsConnFactory;
1:a88906f: 
1:a88906f:     // Properties
1:540dd5c:     protected JmsFactoryProperties factory = new JmsFactoryProperties();
1:a88906f:     protected ThroughputSamplerTask tpSampler = new ThroughputSamplerTask();
1:a88906f: 
1:540dd5c:     private int clientDestIndex;
1:540dd5c:     private int clientDestCount;
1:540dd5c: 
1:a88906f:     public void runSystemTest() throws JMSException {
1:a88906f:         // Create connection factory
1:a88906f:         jmsConnFactory = loadJmsFactory(getSysTest().getSpiClass(), factory.getFactorySettings());
1:a88906f: 
1:a88906f:         setProviderMetaData(jmsConnFactory.createConnection().getMetaData(), getJmsClientProperties());
1:a88906f: 
1:a88906f:         // Create performance sampler
1:a88906f:         PerformanceReportWriter writer = createPerfWriter();
1:a88906f:         writer.openReportWriter();
1:a88906f:         writer.writeProperties("jvmSettings", System.getProperties());
1:a88906f:         writer.writeProperties("testSystemSettings", ReflectionUtil.retrieveObjectProperties(getSysTest()));
1:a88906f:         writer.writeProperties("jmsFactorySettings", ReflectionUtil.retrieveObjectProperties(jmsConnFactory));
1:a88906f:         writer.writeProperties("jmsClientSettings", ReflectionUtil.retrieveObjectProperties(getJmsClientProperties()));
1:a88906f: 
1:e47e0e0:         // set up performance samplers indicated by the user
1:e47e0e0:         List<PerformanceSampler> samplers = new ArrayList<>();
1:e47e0e0: 
1:e47e0e0:         Set<String> requestedSamplers = getSysTest().getSamplersSet();
1:e47e0e0:         if (requestedSamplers.contains(JmsClientSystemProperties.SAMPLER_TP)) {
1:e47e0e0:             writer.writeProperties("tpSamplerSettings", ReflectionUtil.retrieveObjectProperties(tpSampler));
1:e47e0e0:             samplers.add(tpSampler);
1:e47e0e0:         }
1:e47e0e0: 
1:e47e0e0:         if (requestedSamplers.contains(JmsClientSystemProperties.SAMPLER_CPU)) {
1:e47e0e0:             CpuSamplerTask cpuSampler = new CpuSamplerTask();
1:e47e0e0:             writer.writeProperties("cpuSamplerSettings", ReflectionUtil.retrieveObjectProperties(cpuSampler));
1:e47e0e0: 
1:e47e0e0:             try {
1:e47e0e0:                 cpuSampler.createPlugin();
1:e47e0e0:                 samplers.add(cpuSampler);
1:e47e0e0:             } catch (IOException e) {
1:e47e0e0:                 LOG.warn("Unable to start CPU sampler plugin. Reason: " + e.getMessage());
1:e47e0e0:             }
1:e47e0e0:         }
1:e47e0e0: 
1:e47e0e0:         // spawn client threads
1:a88906f:         clientThreadGroup = new ThreadGroup(getSysTest().getClientPrefix() + " Thread Group");
1:e47e0e0: 
1:e47e0e0:         int numClients = getSysTest().getNumClients();
1:e47e0e0:         final CountDownLatch clientCompletionLatch = new CountDownLatch(numClients);
1:e47e0e0:         for (int i = 0; i < numClients; i++) {
1:e47e0e0:             distributeDestinations(getSysTest().getDestDistro(), i, numClients, getSysTest().getTotalDests());
1:a88906f: 
1:a88906f:             final String clientName = getSysTest().getClientPrefix() + i;
1:a88906f:             final int clientDestIndex = this.clientDestIndex;
1:a88906f:             final int clientDestCount = this.clientDestCount;
1:a88906f:             Thread t = new Thread(clientThreadGroup, new Runnable() {
1:e47e0e0:                 @Override
1:a88906f:                 public void run() {
1:a88906f:                     runJmsClient(clientName, clientDestIndex, clientDestCount);
1:e47e0e0:                     LOG.info("Client completed");
1:e47e0e0:                     clientCompletionLatch.countDown();
4:a88906f:                 }
1:a88906f:             });
1:a88906f:             t.setName(getSysTest().getClientPrefix() + i + " Thread");
1:a88906f:             t.start();
1:a88906f:         }
1:a88906f: 
1:e47e0e0:         // start the samplers
1:e47e0e0:         final CountDownLatch samplerCompletionLatch = new CountDownLatch(requestedSamplers.size());
1:e47e0e0:         for (PerformanceSampler sampler : samplers) {
1:e47e0e0:             sampler.setPerfReportWriter(writer);
1:e47e0e0:             sampler.startSampler(samplerCompletionLatch, getClientRunBasis(), getClientRunDuration());
1:a88906f:         }
1:a88906f: 
1:e47e0e0:         try {
1:e47e0e0:             // wait for the clients to finish
1:e47e0e0:             clientCompletionLatch.await();
1:e47e0e0:             LOG.debug("All clients completed");
1:e47e0e0:         } catch (InterruptedException e) {
1:e47e0e0:             e.printStackTrace();
1:e47e0e0:         } finally {
1:e47e0e0:             // if count-based, ramp-down time is not relevant, shut the samplers down
1:e47e0e0:             if (getClientRunBasis() == ClientRunBasis.count) {
1:e47e0e0:                 for (PerformanceSampler sampler : samplers) {
1:e47e0e0:                     sampler.finishSampling();
1:e47e0e0:                 }
1:e47e0e0:             }
1:e47e0e0: 
1:a88906f:             try {
1:e47e0e0:                 LOG.debug("Waiting for samplers to shut down");
1:e47e0e0:                 samplerCompletionLatch.await();
1:e47e0e0:                 LOG.debug("All samplers completed");
1:e47e0e0:             } catch (InterruptedException e) {
1:e47e0e0:                 e.printStackTrace();
1:e47e0e0:             } finally {
1:e47e0e0:                 writer.closeReportWriter();
1:a88906f:             }
1:a88906f:         }
1:a88906f:     }
1:a88906f: 
1:e47e0e0:     protected abstract ClientRunBasis getClientRunBasis();
1:e47e0e0: 
1:e47e0e0:     protected abstract long getClientRunDuration();
1:e47e0e0: 
1:a88906f:     public ThroughputSamplerTask getTpSampler() {
1:a88906f:         return tpSampler;
1:a88906f:     }
1:a88906f: 
1:a88906f:     public JmsFactoryProperties getFactory() {
1:a88906f:         return factory;
1:a88906f:     }
1:a88906f: 
1:a88906f:     public void setFactory(JmsFactoryProperties factory) {
1:a88906f:         this.factory = factory;
1:a88906f:     }
1:a88906f: 
1:a88906f:     public abstract JmsClientSystemProperties getSysTest();
1:540dd5c: 
1:a88906f:     public abstract void setSysTest(JmsClientSystemProperties sysTestProps);
1:540dd5c: 
1:a88906f:     public abstract JmsClientProperties getJmsClientProperties();
1:a88906f: 
1:a88906f:     protected PerformanceReportWriter createPerfWriter() {
1:a88906f:         if (getSysTest().getReportType().equalsIgnoreCase(JmsClientSystemProperties.REPORT_XML_FILE)) {
1:a88906f:             String reportName;
1:a88906f: 
1:a88906f:             if ((reportName = getSysTest().getReportName()) == null) {
1:540dd5c:                 reportName = getSysTest().getClientPrefix() + "_" + "numClients" + getSysTest().getNumClients() + "_" + "numDests" + getSysTest().getTotalDests() + "_" + getSysTest().getDestDistro();
1:a88906f:             }
1:a88906f:             return new XmlFilePerfReportWriter(getSysTest().getReportDir(), reportName);
1:a88906f:         } else if (getSysTest().getReportType().equalsIgnoreCase(JmsClientSystemProperties.REPORT_VERBOSE)) {
1:a88906f:             return new VerbosePerfReportWriter();
1:a88906f:         } else {
1:a88906f:             // Use verbose if unknown report type
1:a88906f:             return new VerbosePerfReportWriter();
1:a88906f:         }
1:a88906f:     }
1:a88906f: 
1:a88906f:     protected void distributeDestinations(String distroType, int clientIndex, int numClients, int numDests) {
1:a88906f:         if (distroType.equalsIgnoreCase(JmsClientSystemProperties.DEST_DISTRO_ALL)) {
1:a88906f:             clientDestCount = numDests;
1:a88906f:             clientDestIndex = 0;
1:a88906f:         } else if (distroType.equalsIgnoreCase(JmsClientSystemProperties.DEST_DISTRO_EQUAL)) {
1:540dd5c:             int destPerClient = numDests / numClients;
1:a88906f:             // There are equal or more destinations per client
1:a88906f:             if (destPerClient > 0) {
1:a88906f:                 clientDestCount = destPerClient;
1:a88906f:                 clientDestIndex = destPerClient * clientIndex;
1:540dd5c:                 // If there are more clients than destinations, share
1:540dd5c:                 // destinations per client
1:a88906f:             } else {
1:a88906f:                 clientDestCount = 1; // At most one destination per client
1:a88906f:                 clientDestIndex = clientIndex % numDests;
1:a88906f:             }
1:a88906f:         } else if (distroType.equalsIgnoreCase(JmsClientSystemProperties.DEST_DISTRO_DIVIDE)) {
1:540dd5c:             int destPerClient = numDests / numClients;
1:a88906f:             // There are equal or more destinations per client
1:a88906f:             if (destPerClient > 0) {
1:a88906f:                 int remain = numDests % numClients;
1:a88906f:                 int nextIndex;
1:a88906f:                 if (clientIndex < remain) {
1:a88906f:                     destPerClient++;
1:a88906f:                     nextIndex = clientIndex * destPerClient;
1:a88906f:                 } else {
1:a88906f:                     nextIndex = (clientIndex * destPerClient) + remain;
1:a88906f:                 }
1:a88906f: 
1:a88906f:                 clientDestCount = destPerClient;
1:a88906f:                 clientDestIndex = nextIndex;
1:a88906f: 
1:540dd5c:                 // If there are more clients than destinations, share
1:540dd5c:                 // destinations per client
1:a88906f:             } else {
1:a88906f:                 clientDestCount = 1; // At most one destination per client
1:a88906f:                 clientDestIndex = clientIndex % numDests;
1:a88906f:             }
1:a88906f: 
1:540dd5c:             // Send to all for unknown behavior
1:a88906f:         } else {
1:540dd5c:             LOG.warn("Unknown destination distribution type: " + distroType);
1:a88906f:             clientDestCount = numDests;
1:a88906f:             clientDestIndex = 0;
1:a88906f:         }
1:a88906f:     }
1:a88906f: 
1:a88906f:     protected ConnectionFactory loadJmsFactory(String spiClass, Properties factorySettings) throws JMSException {
1:a88906f:         try {
1:e47e0e0:             Class<?> spi = Class.forName(spiClass);
1:a88906f:             SPIConnectionFactory spiFactory = (SPIConnectionFactory)spi.newInstance();
1:a88906f:             ConnectionFactory jmsFactory = spiFactory.createConnectionFactory(factorySettings);
1:540dd5c:             LOG.info("Created: " + jmsFactory.getClass().getName() + " using SPIConnectionFactory: " + spiFactory.getClass().getName());
1:a88906f:             return jmsFactory;
1:a88906f:         } catch (Exception e) {
1:a88906f:             e.printStackTrace();
1:a88906f:             throw new JMSException(e.getMessage());
1:a88906f:         }
1:a88906f:     }
1:a88906f: 
1:a88906f:     protected void setProviderMetaData(ConnectionMetaData metaData, JmsClientProperties props) throws JMSException {
1:a88906f:         props.setJmsProvider(metaData.getJMSProviderName() + "-" + metaData.getProviderVersion());
1:a88906f:         props.setJmsVersion(metaData.getJMSVersion());
1:a88906f: 
1:a88906f:         String jmsProperties = "";
1:e47e0e0:         Enumeration<?> jmsProps = metaData.getJMSXPropertyNames();
1:a88906f:         while (jmsProps.hasMoreElements()) {
1:540dd5c:             jmsProperties += jmsProps.nextElement().toString() + ",";
1:a88906f:         }
1:a88906f:         if (jmsProperties.length() > 0) {
1:a88906f:             // Remove the last comma
1:540dd5c:             jmsProperties = jmsProperties.substring(0, jmsProperties.length() - 1);
1:a88906f:         }
1:a88906f:         props.setJmsProperties(jmsProperties);
1:a88906f:     }
1:a88906f: 
1:a88906f:     protected abstract void runJmsClient(String clientName, int clientDestIndex, int clientDestCount);
1:a88906f: 
1:a88906f:     protected static Properties parseStringArgs(String[] args) {
1:a88906f:         File configFile = null;
1:a88906f:         Properties props = new Properties();
1:a88906f: 
1:a88906f:         if (args == null || args.length == 0) {
1:a88906f:             return props; // Empty properties
1:a88906f:         }
1:a88906f: 
1:540dd5c:         for (int i = 0; i < args.length; i++) {
1:a88906f:             String arg = args[i];
1:a88906f:             if (arg.startsWith("-D") || arg.startsWith("-d")) {
1:a88906f:                 arg = arg.substring(2);
1:a88906f:             }
1:540dd5c:             int index = arg.indexOf("=");
1:a88906f:             String key = arg.substring(0, index);
1:a88906f:             String val = arg.substring(index + 1);
1:a88906f: 
1:a88906f:             if (key.equalsIgnoreCase("sysTest.propsConfigFile")) {
1:a88906f:                 if (!val.endsWith(".properties")) {
1:a88906f:                     val += ".properties";
1:a88906f:                 }
1:a88906f:                 configFile = new File(val);
1:a88906f:             }
1:a88906f:             props.setProperty(key, val);
1:a88906f:         }
1:a88906f: 
1:a88906f:         Properties fileProps = new Properties();
1:a88906f:         try {
1:a88906f:             if (configFile != null) {
1:12b26b6:                 try(FileInputStream inputStream = new FileInputStream(configFile)) {
1:12b26b6:                     LOG.info("Loading properties file: " + configFile.getAbsolutePath());
1:12b26b6:                     fileProps.load(inputStream);
1:12b26b6:                 }
1:a88906f:             }
2:a88906f:         } catch (IOException e) {
1:a88906f:             e.printStackTrace();
1:a88906f:         }
1:a88906f:         // Overwrite file settings with command line settings
1:a88906f:         fileProps.putAll(props);
1:a88906f:         return fileProps;
1:a88906f:     }
1:a88906f: }
============================================================================
author:Christopher L. Shannon (cshannon)
-------------------------------------------------------------------------------
commit:12b26b6
/////////////////////////////////////////////////////////////////////////
1:                 try(FileInputStream inputStream = new FileInputStream(configFile)) {
1:                     LOG.info("Loading properties file: " + configFile.getAbsolutePath());
1:                     fileProps.load(inputStream);
1:                 }
author:Timothy Bish
-------------------------------------------------------------------------------
commit:e47e0e0
/////////////////////////////////////////////////////////////////////////
1: import java.util.ArrayList;
1: import java.util.List;
1: import java.util.Set;
1: import java.util.concurrent.CountDownLatch;
/////////////////////////////////////////////////////////////////////////
1: import org.apache.activemq.tool.sampler.PerformanceSampler;
/////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////
1:         // set up performance samplers indicated by the user
1:         List<PerformanceSampler> samplers = new ArrayList<>();
1: 
1:         Set<String> requestedSamplers = getSysTest().getSamplersSet();
1:         if (requestedSamplers.contains(JmsClientSystemProperties.SAMPLER_TP)) {
1:             writer.writeProperties("tpSamplerSettings", ReflectionUtil.retrieveObjectProperties(tpSampler));
1:             samplers.add(tpSampler);
1:         }
1: 
1:         if (requestedSamplers.contains(JmsClientSystemProperties.SAMPLER_CPU)) {
1:             CpuSamplerTask cpuSampler = new CpuSamplerTask();
1:             writer.writeProperties("cpuSamplerSettings", ReflectionUtil.retrieveObjectProperties(cpuSampler));
1: 
1:             try {
1:                 cpuSampler.createPlugin();
1:                 samplers.add(cpuSampler);
1:             } catch (IOException e) {
1:                 LOG.warn("Unable to start CPU sampler plugin. Reason: " + e.getMessage());
1:             }
1:         }
1: 
1:         // spawn client threads
1: 
1:         int numClients = getSysTest().getNumClients();
1:         final CountDownLatch clientCompletionLatch = new CountDownLatch(numClients);
1:         for (int i = 0; i < numClients; i++) {
1:             distributeDestinations(getSysTest().getDestDistro(), i, numClients, getSysTest().getTotalDests());
1:                 @Override
1:                     LOG.info("Client completed");
1:                     clientCompletionLatch.countDown();
1:         // start the samplers
1:         final CountDownLatch samplerCompletionLatch = new CountDownLatch(requestedSamplers.size());
1:         for (PerformanceSampler sampler : samplers) {
1:             sampler.setPerfReportWriter(writer);
1:             sampler.startSampler(samplerCompletionLatch, getClientRunBasis(), getClientRunDuration());
1:         try {
1:             // wait for the clients to finish
1:             clientCompletionLatch.await();
1:             LOG.debug("All clients completed");
1:         } catch (InterruptedException e) {
1:             e.printStackTrace();
1:         } finally {
1:             // if count-based, ramp-down time is not relevant, shut the samplers down
1:             if (getClientRunBasis() == ClientRunBasis.count) {
1:                 for (PerformanceSampler sampler : samplers) {
1:                     sampler.finishSampling();
1:                 }
1:             }
1: 
1:                 LOG.debug("Waiting for samplers to shut down");
1:                 samplerCompletionLatch.await();
1:                 LOG.debug("All samplers completed");
1:             } catch (InterruptedException e) {
1:                 e.printStackTrace();
1:             } finally {
1:                 writer.closeReportWriter();
1:     protected abstract ClientRunBasis getClientRunBasis();
1: 
1:     protected abstract long getClientRunDuration();
1: 
/////////////////////////////////////////////////////////////////////////
1:             Class<?> spi = Class.forName(spiClass);
/////////////////////////////////////////////////////////////////////////
1:         Enumeration<?> jmsProps = metaData.getJMSXPropertyNames();
author:Timothy A. Bish
-------------------------------------------------------------------------------
commit:87e878b
author:Bosanac Dejan
-------------------------------------------------------------------------------
commit:8bf987b
/////////////////////////////////////////////////////////////////////////
1: import org.slf4j.Logger;
1: import org.slf4j.LoggerFactory;
1:     private static final Logger LOG = LoggerFactory.getLogger(AbstractJmsClientSystem.class);
author:Hiram R. Chirino
-------------------------------------------------------------------------------
commit:540dd5c
/////////////////////////////////////////////////////////////////////////
1: import java.io.IOException;
1: import java.util.Enumeration;
1: import java.util.Properties;
1: 
1: import javax.jms.ConnectionFactory;
1: import javax.jms.ConnectionMetaData;
1: import javax.jms.JMSException;
1: 
1: import org.apache.activemq.tool.properties.AbstractObjectProperties;
1: import org.apache.activemq.tool.properties.JmsClientProperties;
1: import org.apache.activemq.tool.properties.JmsClientSystemProperties;
1: import org.apache.activemq.tool.properties.JmsFactoryProperties;
1: import org.apache.activemq.tool.properties.ReflectionUtil;
1: import org.apache.activemq.tool.reports.PerformanceReportWriter;
1: import org.apache.activemq.tool.reports.VerbosePerfReportWriter;
1: import org.apache.activemq.tool.reports.XmlFilePerfReportWriter;
1: import org.apache.activemq.tool.sampler.CpuSamplerTask;
1: import org.apache.activemq.tool.sampler.ThroughputSamplerTask;
1: import org.apache.activemq.tool.spi.SPIConnectionFactory;
0: import org.apache.commons.logging.Log;
0: import org.apache.commons.logging.LogFactory;
0:     private static final Log LOG = LogFactory.getLog(AbstractJmsClientSystem.class);
1:     protected JmsFactoryProperties factory = new JmsFactoryProperties();
1:     private int clientDestIndex;
1:     private int clientDestCount;
1: 
/////////////////////////////////////////////////////////////////////////
0:         for (int i = 0; i < getSysTest().getNumClients(); i++) {
/////////////////////////////////////////////////////////////////////////
0:                 LOG.warn("Unable to start CPU sampler plugin. Reason: " + e.getMessage());
/////////////////////////////////////////////////////////////////////////
1: 
1: 
/////////////////////////////////////////////////////////////////////////
1:                 reportName = getSysTest().getClientPrefix() + "_" + "numClients" + getSysTest().getNumClients() + "_" + "numDests" + getSysTest().getTotalDests() + "_" + getSysTest().getDestDistro();
/////////////////////////////////////////////////////////////////////////
1:             int destPerClient = numDests / numClients;
1:                 // If there are more clients than destinations, share
1:                 // destinations per client
1:             int destPerClient = numDests / numClients;
/////////////////////////////////////////////////////////////////////////
1:                 // If there are more clients than destinations, share
1:                 // destinations per client
1:             // Send to all for unknown behavior
1:             LOG.warn("Unknown destination distribution type: " + distroType);
/////////////////////////////////////////////////////////////////////////
1:             LOG.info("Created: " + jmsFactory.getClass().getName() + " using SPIConnectionFactory: " + spiFactory.getClass().getName());
/////////////////////////////////////////////////////////////////////////
1:             jmsProperties += jmsProps.nextElement().toString() + ",";
1:             jmsProperties = jmsProperties.substring(0, jmsProperties.length() - 1);
/////////////////////////////////////////////////////////////////////////
1:         for (int i = 0; i < args.length; i++) {
1:             int index = arg.indexOf("=");
/////////////////////////////////////////////////////////////////////////
0:                 LOG.info("Loading properties file: " + configFile.getAbsolutePath());
commit:5f1adbe
/////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////
1:  *      http://www.apache.org/licenses/LICENSE-2.0
commit:57b4941
/////////////////////////////////////////////////////////////////////////
1:  * Licensed to the Apache Software Foundation (ASF) under one or more
1:  * contributor license agreements.  See the NOTICE file distributed with
1:  * this work for additional information regarding copyright ownership.
1:  * The ASF licenses this file to You under the Apache License, Version 2.0
1:  * (the "License"); you may not use this file except in compliance with
1:  * the License.  You may obtain a copy of the License at
commit:a88906f
/////////////////////////////////////////////////////////////////////////
1: /**
1:  *
0:  * Copyright 2005-2006 The Apache Software Foundation
1:  *
0:  * Licensed under the Apache License, Version 2.0 (the "License");
0:  * you may not use this file except in compliance with the License.
0:  * You may obtain a copy of the License at
1:  *
0:  * http://www.apache.org/licenses/LICENSE-2.0
1:  *
1:  * Unless required by applicable law or agreed to in writing, software
1:  * distributed under the License is distributed on an "AS IS" BASIS,
1:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:  * See the License for the specific language governing permissions and
1:  * limitations under the License.
1:  */
1: package org.apache.activemq.tool;
1: 
0: import org.apache.commons.logging.Log;
0: import org.apache.commons.logging.LogFactory;
0: import org.apache.activemq.tool.sampler.ThroughputSamplerTask;
0: import org.apache.activemq.tool.sampler.CpuSamplerTask;
0: import org.apache.activemq.tool.reports.PerformanceReportWriter;
0: import org.apache.activemq.tool.reports.XmlFilePerfReportWriter;
0: import org.apache.activemq.tool.reports.VerbosePerfReportWriter;
0: import org.apache.activemq.tool.properties.JmsClientSystemProperties;
0: import org.apache.activemq.tool.properties.AbstractObjectProperties;
0: import org.apache.activemq.tool.properties.JmsFactoryProperties;
0: import org.apache.activemq.tool.properties.ReflectionUtil;
0: import org.apache.activemq.tool.properties.JmsClientProperties;
0: import org.apache.activemq.tool.spi.SPIConnectionFactory;
1: 
0: import javax.jms.ConnectionFactory;
0: import javax.jms.JMSException;
0: import javax.jms.ConnectionMetaData;
0: import java.util.Properties;
0: import java.util.Enumeration;
0: import java.io.IOException;
1: import java.io.File;
1: import java.io.FileInputStream;
1: 
1: public abstract class AbstractJmsClientSystem extends AbstractObjectProperties {
0:     private static final Log log = LogFactory.getLog(AbstractJmsClientSystem.class);
1: 
0:     private int clientDestIndex, clientDestCount;
1: 
1:     protected ThreadGroup clientThreadGroup;
1:     protected ConnectionFactory jmsConnFactory;
1: 
1:     // Properties
0:     protected JmsFactoryProperties factory  = new JmsFactoryProperties();
1:     protected ThroughputSamplerTask tpSampler = new ThroughputSamplerTask();
0:     protected CpuSamplerTask cpuSampler = new CpuSamplerTask();
1: 
1:     public void runSystemTest() throws JMSException {
1:         // Create connection factory
1:         jmsConnFactory = loadJmsFactory(getSysTest().getSpiClass(), factory.getFactorySettings());
1: 
1:         setProviderMetaData(jmsConnFactory.createConnection().getMetaData(), getJmsClientProperties());
1: 
1:         // Create performance sampler
1:         PerformanceReportWriter writer = createPerfWriter();
0:         tpSampler.setPerfReportWriter(writer);
0:         cpuSampler.setPerfReportWriter(writer);
1: 
1:         writer.openReportWriter();
1:         writer.writeProperties("jvmSettings", System.getProperties());
1:         writer.writeProperties("testSystemSettings", ReflectionUtil.retrieveObjectProperties(getSysTest()));
1:         writer.writeProperties("jmsFactorySettings", ReflectionUtil.retrieveObjectProperties(jmsConnFactory));
1:         writer.writeProperties("jmsClientSettings", ReflectionUtil.retrieveObjectProperties(getJmsClientProperties()));
0:         writer.writeProperties("tpSamplerSettings", ReflectionUtil.retrieveObjectProperties(tpSampler));
0:         writer.writeProperties("cpuSamplerSettings", ReflectionUtil.retrieveObjectProperties(cpuSampler));
1: 
1:         clientThreadGroup = new ThreadGroup(getSysTest().getClientPrefix() + " Thread Group");
0:         for (int i=0; i<getSysTest().getNumClients(); i++) {
0:             distributeDestinations(getSysTest().getDestDistro(), i, getSysTest().getNumClients(), getSysTest().getTotalDests());
1: 
1:             final String clientName = getSysTest().getClientPrefix() + i;
1:             final int clientDestIndex = this.clientDestIndex;
1:             final int clientDestCount = this.clientDestCount;
1:             Thread t = new Thread(clientThreadGroup, new Runnable() {
1:                 public void run() {
1:                     runJmsClient(clientName, clientDestIndex, clientDestCount);
1:                 }
1:             });
1:             t.setName(getSysTest().getClientPrefix() + i + " Thread");
1:             t.start();
1:         }
1: 
0:         // Run samplers
0:         if (getSysTest().getSamplers().indexOf(JmsClientSystemProperties.SAMPLER_TP) > -1) {
0:             tpSampler.startSampler();
1:         }
1: 
0:         if (getSysTest().getSamplers().indexOf(JmsClientSystemProperties.SAMPLER_CPU) > -1) {
1:             try {
0:                 cpuSampler.createPlugin();
0:                 cpuSampler.startSampler();
1:             } catch (IOException e) {
0:                 log.warn("Unable to start CPU sampler plugin. Reason: " + e.getMessage());
1:             }
1:         }
1: 
0:         tpSampler.waitUntilDone();
0:         cpuSampler.waitUntilDone();
1: 
0:         writer.closeReportWriter();
1:     }
1: 
1:     public ThroughputSamplerTask getTpSampler() {
1:         return tpSampler;
1:     }
1: 
0:     public void setTpSampler(ThroughputSamplerTask tpSampler) {
0:         this.tpSampler = tpSampler;
1:     }
1: 
0:     public CpuSamplerTask getCpuSampler() {
0:         return cpuSampler;
1:     }
1: 
0:     public void setCpuSampler(CpuSamplerTask cpuSampler) {
0:         this.cpuSampler = cpuSampler;
1:     }
1: 
1:     public JmsFactoryProperties getFactory() {
1:         return factory;
1:     }
1: 
1:     public void setFactory(JmsFactoryProperties factory) {
1:         this.factory = factory;
1:     }
1: 
1:     public abstract JmsClientSystemProperties getSysTest();
1:     public abstract void setSysTest(JmsClientSystemProperties sysTestProps);
1:     public abstract JmsClientProperties getJmsClientProperties();
1: 
1:     protected PerformanceReportWriter createPerfWriter() {
1:         if (getSysTest().getReportType().equalsIgnoreCase(JmsClientSystemProperties.REPORT_XML_FILE)) {
1:             String reportName;
1: 
1:             if ((reportName = getSysTest().getReportName()) == null) {
0:                 reportName = getSysTest().getClientPrefix() + "_" +
0:                              "numClients" + getSysTest().getNumClients() + "_" +
0:                              "numDests" + getSysTest().getTotalDests() + "_" +
0:                              getSysTest().getDestDistro();
1:             }
1:             return new XmlFilePerfReportWriter(getSysTest().getReportDir(), reportName);
1:         } else if (getSysTest().getReportType().equalsIgnoreCase(JmsClientSystemProperties.REPORT_VERBOSE)) {
1:             return new VerbosePerfReportWriter();
1:         } else {
1:             // Use verbose if unknown report type
1:             return new VerbosePerfReportWriter();
1:         }
1:     }
1: 
1:     protected void distributeDestinations(String distroType, int clientIndex, int numClients, int numDests) {
1:         if (distroType.equalsIgnoreCase(JmsClientSystemProperties.DEST_DISTRO_ALL)) {
1:             clientDestCount = numDests;
1:             clientDestIndex = 0;
1:         } else if (distroType.equalsIgnoreCase(JmsClientSystemProperties.DEST_DISTRO_EQUAL)) {
0:             int destPerClient = (numDests / numClients);
1:             // There are equal or more destinations per client
1:             if (destPerClient > 0) {
1:                 clientDestCount = destPerClient;
1:                 clientDestIndex = destPerClient * clientIndex;
0:             // If there are more clients than destinations, share destinations per client
1:             } else {
1:                 clientDestCount = 1; // At most one destination per client
1:                 clientDestIndex = clientIndex % numDests;
1:             }
1:         } else if (distroType.equalsIgnoreCase(JmsClientSystemProperties.DEST_DISTRO_DIVIDE)) {
0:             int destPerClient = (numDests / numClients);
1:             // There are equal or more destinations per client
1:             if (destPerClient > 0) {
1:                 int remain = numDests % numClients;
1:                 int nextIndex;
1:                 if (clientIndex < remain) {
1:                     destPerClient++;
1:                     nextIndex = clientIndex * destPerClient;
1:                 } else {
1:                     nextIndex = (clientIndex * destPerClient) + remain;
1:                 }
1: 
1:                 clientDestCount = destPerClient;
1:                 clientDestIndex = nextIndex;
1: 
0:             // If there are more clients than destinations, share destinations per client
1:             } else {
1:                 clientDestCount = 1; // At most one destination per client
1:                 clientDestIndex = clientIndex % numDests;
1:             }
1: 
0:         // Send to all for unknown behavior
1:         } else {
0:             log.warn("Unknown destination distribution type: " + distroType);
1:             clientDestCount = numDests;
1:             clientDestIndex = 0;
1:         }
1:     }
1: 
1:     protected ConnectionFactory loadJmsFactory(String spiClass, Properties factorySettings) throws JMSException {
1:         try {
0:             Class spi = Class.forName(spiClass);
1:             SPIConnectionFactory spiFactory = (SPIConnectionFactory)spi.newInstance();
1:             ConnectionFactory jmsFactory = spiFactory.createConnectionFactory(factorySettings);
0:             log.info("Created: " + jmsFactory.getClass().getName() + " using SPIConnectionFactory: " + spiFactory.getClass().getName());
1:             return jmsFactory;
1:         } catch (Exception e) {
1:             e.printStackTrace();
1:             throw new JMSException(e.getMessage());
1:         }
1:     }
1: 
1:     protected void setProviderMetaData(ConnectionMetaData metaData, JmsClientProperties props) throws JMSException {
1:         props.setJmsProvider(metaData.getJMSProviderName() + "-" + metaData.getProviderVersion());
1:         props.setJmsVersion(metaData.getJMSVersion());
1: 
1:         String jmsProperties = "";
0:         Enumeration jmsProps = metaData.getJMSXPropertyNames();
1:         while (jmsProps.hasMoreElements()) {
0:             jmsProperties += (jmsProps.nextElement().toString() + ",");
1:         }
1:         if (jmsProperties.length() > 0) {
1:             // Remove the last comma
0:             jmsProperties = jmsProperties.substring(0, jmsProperties.length()-1);
1:         }
1:         props.setJmsProperties(jmsProperties);
1:     }
1: 
1:     protected abstract void runJmsClient(String clientName, int clientDestIndex, int clientDestCount);
1: 
1:     protected static Properties parseStringArgs(String[] args) {
1:         File configFile = null;
1:         Properties props = new Properties();
1: 
1:         if (args == null || args.length == 0) {
1:             return props; // Empty properties
1:         }
1: 
0:         for (int i=0; i<args.length; i++) {
1:             String arg = args[i];
1:             if (arg.startsWith("-D") || arg.startsWith("-d")) {
1:                 arg = arg.substring(2);
1:             }
0:             int index  = arg.indexOf("=");
1:             String key = arg.substring(0, index);
1:             String val = arg.substring(index + 1);
1: 
1:             if (key.equalsIgnoreCase("sysTest.propsConfigFile")) {
1:                 if (!val.endsWith(".properties")) {
1:                     val += ".properties";
1:                 }
1:                 configFile = new File(val);
1:             }
1:             props.setProperty(key, val);
1:         }
1: 
1:         Properties fileProps = new Properties();
1:         try {
1:             if (configFile != null) {
0:                 log.info("Loading properties file: " + configFile.getAbsolutePath());
0:                 fileProps.load(new FileInputStream(configFile));
1:             }
1:         } catch (IOException e) {
1:             e.printStackTrace();
1:         }
1:         // Overwrite file settings with command line settings
1:         fileProps.putAll(props);
1:         return fileProps;
1:     }
1: }
author:James Strachan
-------------------------------------------------------------------------------
commit:dd55c21
author:Adrian T. Co
-------------------------------------------------------------------------------
commit:6d9e5b5
/////////////////////////////////////////////////////////////////////////
0: 
/////////////////////////////////////////////////////////////////////////
0:                 log.info("Loading properties file: " + configFile.getAbsolutePath());
commit:0d9c764
/////////////////////////////////////////////////////////////////////////
0: 
0:         if (args == null || args.length == 0) {
0:             return props; // Empty properties
0:         }
0:         
/////////////////////////////////////////////////////////////////////////
0:             if (configFile != null) {
0:                 fileProps.load(new FileInputStream(configFile));
0:             }
commit:52105b6
/////////////////////////////////////////////////////////////////////////
0: import java.io.File;
0: import java.io.FileInputStream;
/////////////////////////////////////////////////////////////////////////
0: 
0:     protected static Properties parseStringArgs(String[] args) {
0:         File configFile = null;
0:         Properties props = new Properties();
0:         for (int i=0; i<args.length; i++) {
0:             String arg = args[i];
0:             if (arg.startsWith("-D") || arg.startsWith("-d")) {
0:                 arg = arg.substring(2);
0:             }
0:             int index  = arg.indexOf("=");
0:             String key = arg.substring(0, index);
0:             String val = arg.substring(index + 1);
0: 
0:             if (key.equalsIgnoreCase("sysTest.propsConfigFile")) {
0:                 if (!val.endsWith(".properties")) {
0:                     val += ".properties";
0:                 }
0:                 configFile = new File(val);
0:             }
0:             props.setProperty(key, val);
0:         }
0: 
0:         Properties fileProps = new Properties();
0:         try {
0:             fileProps.load(new FileInputStream(configFile));
0:         } catch (IOException e) {
0:             e.printStackTrace();
0:         }
0:         // Overwrite file settings with command line settings
0:         fileProps.putAll(props);
0:         return fileProps;
0:     }
commit:ffcbd0c
/////////////////////////////////////////////////////////////////////////
0: import javax.jms.ConnectionMetaData;
0: import java.util.Enumeration;
/////////////////////////////////////////////////////////////////////////
0:         setProviderMetaData(jmsConnFactory.createConnection().getMetaData(), getJmsClientProperties());
0: 
/////////////////////////////////////////////////////////////////////////
0:     protected void setProviderMetaData(ConnectionMetaData metaData, JmsClientProperties props) throws JMSException {
0:         props.setJmsProvider(metaData.getJMSProviderName() + "-" + metaData.getProviderVersion());
0:         props.setJmsVersion(metaData.getJMSVersion());
0: 
0:         String jmsProperties = "";
0:         Enumeration jmsProps = metaData.getJMSXPropertyNames();
0:         while (jmsProps.hasMoreElements()) {
0:             jmsProperties += (jmsProps.nextElement().toString() + ",");
0:         }
0:         if (jmsProperties.length() > 0) {
0:             // Remove the last comma
0:             jmsProperties = jmsProperties.substring(0, jmsProperties.length()-1);
0:         }
0:         props.setJmsProperties(jmsProperties);
0:     }
0: 
commit:f1c6e4c
/////////////////////////////////////////////////////////////////////////
0: /**
0:  *
0:  * Copyright 2005-2006 The Apache Software Foundation
0:  *
0:  * Licensed under the Apache License, Version 2.0 (the "License");
0:  * you may not use this file except in compliance with the License.
0:  * You may obtain a copy of the License at
0:  *
0:  * http://www.apache.org/licenses/LICENSE-2.0
0:  *
0:  * Unless required by applicable law or agreed to in writing, software
0:  * distributed under the License is distributed on an "AS IS" BASIS,
0:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
0:  * See the License for the specific language governing permissions and
0:  * limitations under the License.
0:  */
0: package org.apache.activemq.tool;
0: 
0: import org.apache.commons.logging.Log;
0: import org.apache.commons.logging.LogFactory;
0: import org.apache.activemq.tool.sampler.ThroughputSamplerTask;
0: import org.apache.activemq.tool.sampler.CpuSamplerTask;
0: import org.apache.activemq.tool.reports.PerformanceReportWriter;
0: import org.apache.activemq.tool.reports.XmlFilePerfReportWriter;
0: import org.apache.activemq.tool.reports.VerbosePerfReportWriter;
0: import org.apache.activemq.tool.properties.JmsClientSystemProperties;
0: import org.apache.activemq.tool.properties.AbstractObjectProperties;
0: import org.apache.activemq.tool.properties.JmsFactoryProperties;
0: import org.apache.activemq.tool.properties.ReflectionUtil;
0: import org.apache.activemq.tool.properties.JmsClientProperties;
0: import org.apache.activemq.tool.spi.SPIConnectionFactory;
0: 
0: import javax.jms.ConnectionFactory;
0: import javax.jms.JMSException;
0: import java.util.Properties;
0: import java.io.IOException;
0: 
0: public abstract class AbstractJmsClientSystem extends AbstractObjectProperties {
0:     private static final Log log = LogFactory.getLog(AbstractJmsClientSystem.class);
0: 
0:     private int clientDestIndex, clientDestCount;
0: 
0:     protected ThreadGroup clientThreadGroup;
0:     protected ConnectionFactory jmsConnFactory;
0: 
0:     // Properties
0:     protected JmsFactoryProperties factory  = new JmsFactoryProperties();
0:     protected ThroughputSamplerTask tpSampler = new ThroughputSamplerTask();
0:     protected CpuSamplerTask cpuSampler = new CpuSamplerTask();
0: 
0:     public void runSystemTest() throws JMSException {
0:         // Create connection factory
0:         jmsConnFactory = loadJmsFactory(getSysTest().getSpiClass(), factory.getFactorySettings());
0: 
0:         // Create performance sampler
0:         PerformanceReportWriter writer = createPerfWriter();
0:         tpSampler.setPerfReportWriter(writer);
0:         cpuSampler.setPerfReportWriter(writer);
0: 
0:         writer.openReportWriter();
0:         writer.writeProperties("jvmSettings", System.getProperties());
0:         writer.writeProperties("testSystemSettings", ReflectionUtil.retrieveObjectProperties(getSysTest()));
0:         writer.writeProperties("jmsFactorySettings", ReflectionUtil.retrieveObjectProperties(jmsConnFactory));
0:         writer.writeProperties("jmsClientSettings", ReflectionUtil.retrieveObjectProperties(getJmsClientProperties()));
0:         writer.writeProperties("tpSamplerSettings", ReflectionUtil.retrieveObjectProperties(tpSampler));
0:         writer.writeProperties("cpuSamplerSettings", ReflectionUtil.retrieveObjectProperties(cpuSampler));
0: 
0:         clientThreadGroup = new ThreadGroup(getSysTest().getClientPrefix() + " Thread Group");
0:         for (int i=0; i<getSysTest().getNumClients(); i++) {
0:             distributeDestinations(getSysTest().getDestDistro(), i, getSysTest().getNumClients(), getSysTest().getTotalDests());
0: 
0:             final String clientName = getSysTest().getClientPrefix() + i;
0:             final int clientDestIndex = this.clientDestIndex;
0:             final int clientDestCount = this.clientDestCount;
0:             Thread t = new Thread(clientThreadGroup, new Runnable() {
0:                 public void run() {
0:                     runJmsClient(clientName, clientDestIndex, clientDestCount);
0:                 }
0:             });
0:             t.setName(getSysTest().getClientPrefix() + i + " Thread");
0:             t.start();
0:         }
0: 
0:         // Run samplers
0:         if (getSysTest().getSamplers().indexOf(JmsClientSystemProperties.SAMPLER_TP) > -1) {
0:             tpSampler.startSampler();
0:         }
0: 
0:         if (getSysTest().getSamplers().indexOf(JmsClientSystemProperties.SAMPLER_CPU) > -1) {
0:             try {
0:                 cpuSampler.createPlugin();
0:                 cpuSampler.startSampler();
0:             } catch (IOException e) {
0:                 log.warn("Unable to start CPU sampler plugin. Reason: " + e.getMessage());
0:             }
0:         }
0: 
0:         tpSampler.waitUntilDone();
0:         cpuSampler.waitUntilDone();
0: 
0:         writer.closeReportWriter();
0:     }
0: 
0:     public ThroughputSamplerTask getTpSampler() {
0:         return tpSampler;
0:     }
0: 
0:     public void setTpSampler(ThroughputSamplerTask tpSampler) {
0:         this.tpSampler = tpSampler;
0:     }
0: 
0:     public CpuSamplerTask getCpuSampler() {
0:         return cpuSampler;
0:     }
0: 
0:     public void setCpuSampler(CpuSamplerTask cpuSampler) {
0:         this.cpuSampler = cpuSampler;
0:     }
0: 
0:     public JmsFactoryProperties getFactory() {
0:         return factory;
0:     }
0: 
0:     public void setFactory(JmsFactoryProperties factory) {
0:         this.factory = factory;
0:     }
0: 
0:     public abstract JmsClientSystemProperties getSysTest();
0:     public abstract void setSysTest(JmsClientSystemProperties sysTestProps);
0:     public abstract JmsClientProperties getJmsClientProperties();
0: 
0:     protected PerformanceReportWriter createPerfWriter() {
0:         if (getSysTest().getReportType().equalsIgnoreCase(JmsClientSystemProperties.REPORT_XML_FILE)) {
0:             String reportName;
0: 
0:             if ((reportName = getSysTest().getReportName()) == null) {
0:                 reportName = getSysTest().getClientPrefix() + "_" +
0:                              "numClients" + getSysTest().getNumClients() + "_" +
0:                              "numDests" + getSysTest().getTotalDests() + "_" +
0:                              getSysTest().getDestDistro();
0:             }
0:             return new XmlFilePerfReportWriter(getSysTest().getReportDir(), reportName);
0:         } else if (getSysTest().getReportType().equalsIgnoreCase(JmsClientSystemProperties.REPORT_VERBOSE)) {
0:             return new VerbosePerfReportWriter();
0:         } else {
0:             // Use verbose if unknown report type
0:             return new VerbosePerfReportWriter();
0:         }
0:     }
0: 
0:     protected void distributeDestinations(String distroType, int clientIndex, int numClients, int numDests) {
0:         if (distroType.equalsIgnoreCase(JmsClientSystemProperties.DEST_DISTRO_ALL)) {
0:             clientDestCount = numDests;
0:             clientDestIndex = 0;
0:         } else if (distroType.equalsIgnoreCase(JmsClientSystemProperties.DEST_DISTRO_EQUAL)) {
0:             int destPerClient = (numDests / numClients);
0:             // There are equal or more destinations per client
0:             if (destPerClient > 0) {
0:                 clientDestCount = destPerClient;
0:                 clientDestIndex = destPerClient * clientIndex;
0:             // If there are more clients than destinations, share destinations per client
0:             } else {
0:                 clientDestCount = 1; // At most one destination per client
0:                 clientDestIndex = clientIndex % numDests;
0:             }
0:         } else if (distroType.equalsIgnoreCase(JmsClientSystemProperties.DEST_DISTRO_DIVIDE)) {
0:             int destPerClient = (numDests / numClients);
0:             // There are equal or more destinations per client
0:             if (destPerClient > 0) {
0:                 int remain = numDests % numClients;
0:                 int nextIndex;
0:                 if (clientIndex < remain) {
0:                     destPerClient++;
0:                     nextIndex = clientIndex * destPerClient;
0:                 } else {
0:                     nextIndex = (clientIndex * destPerClient) + remain;
0:                 }
0: 
0:                 clientDestCount = destPerClient;
0:                 clientDestIndex = nextIndex;
0: 
0:             // If there are more clients than destinations, share destinations per client
0:             } else {
0:                 clientDestCount = 1; // At most one destination per client
0:                 clientDestIndex = clientIndex % numDests;
0:             }
0: 
0:         // Send to all for unknown behavior
0:         } else {
0:             log.warn("Unknown destination distribution type: " + distroType);
0:             clientDestCount = numDests;
0:             clientDestIndex = 0;
0:         }
0:     }
0: 
0:     protected ConnectionFactory loadJmsFactory(String spiClass, Properties factorySettings) throws JMSException {
0:         try {
0:             Class spi = Class.forName(spiClass);
0:             SPIConnectionFactory spiFactory = (SPIConnectionFactory)spi.newInstance();
0:             ConnectionFactory jmsFactory = spiFactory.createConnectionFactory(factorySettings);
0:             log.info("Created: " + jmsFactory.getClass().getName() + " using SPIConnectionFactory: " + spiFactory.getClass().getName());
0:             return jmsFactory;
0:         } catch (Exception e) {
0:             e.printStackTrace();
0:             throw new JMSException(e.getMessage());
0:         }
0:     }
0: 
0:     protected abstract void runJmsClient(String clientName, int clientDestIndex, int clientDestCount);
0: }
============================================================================