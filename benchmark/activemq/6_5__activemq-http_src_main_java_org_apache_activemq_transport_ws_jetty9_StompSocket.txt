1:0771df3: /**
1:0771df3:  * Licensed to the Apache Software Foundation (ASF) under one or more
1:0771df3:  * contributor license agreements.  See the NOTICE file distributed with
1:0771df3:  * this work for additional information regarding copyright ownership.
1:0771df3:  * The ASF licenses this file to You under the Apache License, Version 2.0
1:0771df3:  * (the "License"); you may not use this file except in compliance with
1:0771df3:  * the License.  You may obtain a copy of the License at
1:0885c60:  *
1:0771df3:  *      http://www.apache.org/licenses/LICENSE-2.0
4:0771df3:  *
1:0771df3:  * Unless required by applicable law or agreed to in writing, software
1:0771df3:  * distributed under the License is distributed on an "AS IS" BASIS,
1:0771df3:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:0771df3:  * See the License for the specific language governing permissions and
1:0771df3:  * limitations under the License.
1:0771df3:  */
1:3f82625: package org.apache.activemq.transport.ws.jetty9;
1:3f82625: 
1:0771df3: import java.io.IOException;
1:caa6b8e: import java.util.concurrent.TimeUnit;
1:3f82625: 
1:cc95295: import org.apache.activemq.transport.stomp.Stomp;
1:0771df3: import org.apache.activemq.transport.stomp.StompFrame;
1:eea3230: import org.apache.activemq.transport.ws.AbstractStompSocket;
1:450cabe: import org.apache.activemq.util.IOExceptionSupport;
1:3f82625: import org.eclipse.jetty.websocket.api.Session;
1:3f82625: import org.eclipse.jetty.websocket.api.WebSocketListener;
1:6f92d5f: import org.slf4j.Logger;
1:6f92d5f: import org.slf4j.LoggerFactory;
1:3f82625: 
1:0771df3: /**
1:0771df3:  * Implements web socket and mediates between servlet and the broker
1:0771df3:  */
1:be10b86: public class StompSocket extends AbstractStompSocket implements WebSocketListener {
1:eea3230: 
1:6f92d5f:     private static final Logger LOG = LoggerFactory.getLogger(StompSocket.class);
1:8cf3187: 
1:caa6b8e:     private final int ORDERLY_CLOSE_TIMEOUT = 10;
1:caa6b8e: 
1:eea3230:     private Session session;
1:0885c60: 
1:be10b86:     public StompSocket(String remoteAddress) {
1:be10b86:         super(remoteAddress);
1:be10b86:     }
1:be10b86: 
1:3f82625:     @Override
1:0771df3:     public void sendToStomp(StompFrame command) throws IOException {
1:450cabe:         try {
1:450cabe:             //timeout after a period of time so we don't wait forever and hold the protocol lock
1:2490c85:             session.getRemote().sendStringByFuture(getWireFormat().marshalToString(command)).get(getDefaultSendTimeOut(), TimeUnit.SECONDS);
1:450cabe:         } catch (Exception e) {
1:450cabe:             throw IOExceptionSupport.create(e);
1:516c9db:         }
1:516c9db:     }
1:516c9db: 
1:3f82625:     @Override
1:f05f83b:     public void handleStopped() throws IOException {
1:f05f83b:         if (session != null && session.isOpen()) {
1:f05f83b:             session.close();
1:f05f83b:         }
1:f05f83b:     }
1:f05f83b: 
1:f05f83b:     //----- WebSocketListener event callbacks --------------------------------//
1:f05f83b: 
1:f05f83b:     @Override
1:3f82625:     public void onWebSocketBinary(byte[] arg0, int arg1, int arg2) {
1:450cabe:     }
1:3f82625: 
1:3f82625:     @Override
1:3f82625:     public void onWebSocketClose(int arg0, String arg1) {
3:3f82625:         try {
1:caa6b8e:             if (protocolLock.tryLock() || protocolLock.tryLock(ORDERLY_CLOSE_TIMEOUT, TimeUnit.SECONDS)) {
1:30d6ad7:                 LOG.debug("Stomp WebSocket closed: code[{}] message[{}]", arg0, arg1);
1:caa6b8e:                 protocolConverter.onStompCommand(new StompFrame(Stomp.Commands.DISCONNECT));
1:caa6b8e:             }
2:3f82625:         } catch (Exception e) {
1:30d6ad7:             LOG.debug("Failed to close STOMP WebSocket cleanly", e);
1:caa6b8e:         } finally {
1:caa6b8e:             if (protocolLock.isHeldByCurrentThread()) {
1:caa6b8e:                 protocolLock.unlock();
1:caa6b8e:             }
4:3f82625:         }
1:3f82625:     }
1:3f82625: 
3:e778467:     @Override
1:3f82625:     public void onWebSocketConnect(Session session) {
1:3f82625:         this.session = session;
1:3f82625:     }
1:3f82625: 
1:3f82625:     @Override
1:516c9db:     public void onWebSocketError(Throwable arg0) {
1:3f82625:     }
1:3f82625: 
1:3f82625:     @Override
1:3f82625:     public void onWebSocketText(String data) {
1:eea3230:         processStompFrame(data);
1:3f82625:     }
1:450cabe: 
1:450cabe:     private static int getDefaultSendTimeOut() {
1:450cabe:         return Integer.getInteger("org.apache.activemq.transport.ws.StompSocket.sendTimeout", 30);
1:450cabe:     }
1:3f82625: }
============================================================================
author:Timothy Bish
-------------------------------------------------------------------------------
commit:2490c85
/////////////////////////////////////////////////////////////////////////
1:             session.getRemote().sendStringByFuture(getWireFormat().marshalToString(command)).get(getDefaultSendTimeOut(), TimeUnit.SECONDS);
commit:30d6ad7
/////////////////////////////////////////////////////////////////////////
1:                 LOG.debug("Stomp WebSocket closed: code[{}] message[{}]", arg0, arg1);
1:             LOG.debug("Failed to close STOMP WebSocket cleanly", e);
commit:caa6b8e
/////////////////////////////////////////////////////////////////////////
1: import java.util.concurrent.TimeUnit;
/////////////////////////////////////////////////////////////////////////
1:     private final int ORDERLY_CLOSE_TIMEOUT = 10;
1: 
/////////////////////////////////////////////////////////////////////////
1:             if (protocolLock.tryLock() || protocolLock.tryLock(ORDERLY_CLOSE_TIMEOUT, TimeUnit.SECONDS)) {
0:                 LOG.info("Stomp WebSocket closed: code[{}] message[{}]", arg0, arg1);
1:                 protocolConverter.onStompCommand(new StompFrame(Stomp.Commands.DISCONNECT));
1:             }
1:         } finally {
1:             if (protocolLock.isHeldByCurrentThread()) {
1:                 protocolLock.unlock();
1:             }
commit:f05f83b
/////////////////////////////////////////////////////////////////////////
1:     public void handleStopped() throws IOException {
1:         if (session != null && session.isOpen()) {
1:             session.close();
1:         }
1:     }
1: 
1:     //----- WebSocketListener event callbacks --------------------------------//
1: 
1:     @Override
commit:eea3230
/////////////////////////////////////////////////////////////////////////
1: import org.apache.activemq.transport.ws.AbstractStompSocket;
/////////////////////////////////////////////////////////////////////////
0: class StompSocket extends AbstractStompSocket implements WebSocketListener {
1: 
1:     private Session session;
/////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////
1:         processStompFrame(data);
commit:2994108
/////////////////////////////////////////////////////////////////////////
0:                 if (data.equals("\n")) {
0:                 } else {
0:                     protocolConverter.onStompCommand((StompFrame)wireFormat.unmarshal(new ByteSequence(data.getBytes("UTF-8"))));
commit:516c9db
/////////////////////////////////////////////////////////////////////////
0: import org.apache.activemq.command.KeepAliveInfo;
/////////////////////////////////////////////////////////////////////////
0:     private final StompInactivityMonitor stompInactivityMonitor = new StompInactivityMonitor(this, wireFormat);
/////////////////////////////////////////////////////////////////////////
0:         stompInactivityMonitor.setTransportListener(getTransportListener());
/////////////////////////////////////////////////////////////////////////
1:     public void onWebSocketError(Throwable arg0) {
/////////////////////////////////////////////////////////////////////////
0:             if (data != null) {
0:                 if (data.startsWith("\n")) {
0:                     sendToActiveMQ(new KeepAliveInfo());
1:                 }
1: 
0:                 protocolConverter.onStompCommand((StompFrame)wireFormat.unmarshal(new ByteSequence(data.getBytes("UTF-8"))));
1:             }
commit:0f09f78
/////////////////////////////////////////////////////////////////////////
0:     private StompInactivityMonitor stompInactivityMonitor = new StompInactivityMonitor(this, wireFormat);
/////////////////////////////////////////////////////////////////////////
0:         return stompInactivityMonitor;
author:Christopher L. Shannon (cshannon)
-------------------------------------------------------------------------------
commit:450cabe
/////////////////////////////////////////////////////////////////////////
1: import org.apache.activemq.util.IOExceptionSupport;
/////////////////////////////////////////////////////////////////////////
1:         try {
1:             //timeout after a period of time so we don't wait forever and hold the protocol lock
0:             session.getRemote().sendStringByFuture(command.format()).get(getDefaultSendTimeOut(), TimeUnit.SECONDS);
1:         } catch (Exception e) {
1:             throw IOExceptionSupport.create(e);
1:         }
/////////////////////////////////////////////////////////////////////////
1: 
1:     private static int getDefaultSendTimeOut() {
1:         return Integer.getInteger("org.apache.activemq.transport.ws.StompSocket.sendTimeout", 30);
1:     }
commit:946c945
/////////////////////////////////////////////////////////////////////////
0:         //Send async - do we need to wait for the future to complete?
0:         session.getRemote().sendStringByFuture(command.format());
commit:be10b86
/////////////////////////////////////////////////////////////////////////
1: public class StompSocket extends AbstractStompSocket implements WebSocketListener {
1:     public StompSocket(String remoteAddress) {
1:         super(remoteAddress);
1:     }
1: 
author:Daniel Kulp
-------------------------------------------------------------------------------
commit:3f82625
/////////////////////////////////////////////////////////////////////////
1: package org.apache.activemq.transport.ws.jetty9;
/////////////////////////////////////////////////////////////////////////
1: import org.eclipse.jetty.websocket.api.Session;
1: import org.eclipse.jetty.websocket.api.WebSocketListener;
0: class StompSocket extends TransportSupport implements WebSocketListener, StompTransport {
0:     Session session;
/////////////////////////////////////////////////////////////////////////
0:         session.getRemote().sendString(command.format());
/////////////////////////////////////////////////////////////////////////
1: 
1:     @Override
1:     public void onWebSocketBinary(byte[] arg0, int arg1, int arg2) {
1:     }
1: 
1:     @Override
1:     public void onWebSocketClose(int arg0, String arg1) {
1:         try {
0:             protocolConverter.onStompCommand(new StompFrame(Stomp.Commands.DISCONNECT));
1:         } catch (Exception e) {
0:             LOG.warn("Failed to close WebSocket", e);
1:         }
1:     }
1: 
1:     @Override
1:     public void onWebSocketConnect(Session session) {
1:         this.session = session;
1:     }
1: 
1:     @Override
0:     public void onWebSocketError(Throwable arg0) {       
1:     }
1: 
1:     @Override
1:     public void onWebSocketText(String data) {
0:         if (!transportStartedAtLeastOnce()) {
0:             LOG.debug("Waiting for StompSocket to be properly started...");
1:             try {
0:                 socketTransportStarted.await();
0:             } catch (InterruptedException e) {
0:                 LOG.warn("While waiting for StompSocket to be properly started, we got interrupted!! Should be okay, but you could see race conditions...");
1:             }
1:         }
1: 
1:         try {
0:             protocolConverter.onStompCommand((StompFrame)wireFormat.unmarshal(new ByteSequence(data.getBytes("UTF-8"))));
1:         } catch (Exception e) {
0:             onException(IOExceptionSupport.create(e));
1:         }
1:     }
1: 
author:Hiram R. Chirino
-------------------------------------------------------------------------------
commit:9a1ad8c
author:Timothy A. Bish
-------------------------------------------------------------------------------
commit:f8f24e8
/////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////
commit:e778467
/////////////////////////////////////////////////////////////////////////
0: class StompSocket extends TransportSupport implements WebSocket.OnTextMessage, StompTransport {
0:     Connection outbound;
1:     @Override
0:     public void onOpen(Connection connection) {
0:         this.outbound = connection;
1:     @Override
0:     public void onClose(int closeCode, String message) {
0:     }
1:     @Override
0:     public void onMessage(String data) {
/////////////////////////////////////////////////////////////////////////
0:     @Override
0:     @Override
0:     @Override
0:     @Override
0:     @Override
/////////////////////////////////////////////////////////////////////////
0:     @Override
0:     @Override
0:     @Override
0:         outbound.sendMessage(command.format());
commit:f33f32e
/////////////////////////////////////////////////////////////////////////
commit:8cf3187
/////////////////////////////////////////////////////////////////////////
1: 
0:     @Override
0:     public void asyncSendToActiveMQ(Command command) {
0:         doConsume(command);
0:     }
commit:0885c60
/////////////////////////////////////////////////////////////////////////
0: import org.apache.activemq.transport.stomp.StompInactivityMonitor;
/////////////////////////////////////////////////////////////////////////
1:  *
0:     ProtocolConverter protocolConverter = new ProtocolConverter(this, null);
1: 
/////////////////////////////////////////////////////////////////////////
0: 
0:     @Override
0:     public StompInactivityMonitor getInactivityMonitor() {
0:         return null;
0:     }
0: 
0:     @Override
0:     public StompWireFormat getWireFormat() {
0:         return this.wireFormat;
0:     }
author:Bosanac Dejan
-------------------------------------------------------------------------------
commit:cc95295
/////////////////////////////////////////////////////////////////////////
0: import org.apache.activemq.command.ShutdownInfo;
1: import org.apache.activemq.transport.stomp.Stomp;
/////////////////////////////////////////////////////////////////////////
0:         try {
0:             protocolConverter.onStompCommand(new StompFrame(Stomp.Commands.DISCONNECT));
0:         } catch (Exception e) {
0:             LOG.warn("Failed to close WebSocket", e);
0:         }
commit:6f92d5f
/////////////////////////////////////////////////////////////////////////
0: import java.util.concurrent.CountDownLatch;
/////////////////////////////////////////////////////////////////////////
1: import org.slf4j.Logger;
1: import org.slf4j.LoggerFactory;
1:     private static final Logger LOG = LoggerFactory.getLogger(StompSocket.class);
0: 
0:     private final CountDownLatch socketTransportStarted = new CountDownLatch(1);
/////////////////////////////////////////////////////////////////////////
0: 
0:         if (!transportStartedAtLeastOnce()) {
0:             LOG.debug("Waiting for StompSocket to be properly started...");
0:             try {
0:                 socketTransportStarted.await();
0:             } catch (InterruptedException e) {
0:                 LOG.warn("While waiting for StompSocket to be properly started, we got interrupted!! Should be okay, but you could see race conditions...");
0:             }
0:         }
0: 
0: 
/////////////////////////////////////////////////////////////////////////
0:     private boolean transportStartedAtLeastOnce() {
0:         return socketTransportStarted.getCount() == 0;
0:     }
0: 
0:         socketTransportStarted.countDown();
commit:fc2d548
/////////////////////////////////////////////////////////////////////////
0:         outbound.sendMessage(WebSocket.SENTINEL_FRAME, command.format());
commit:684f5df
/////////////////////////////////////////////////////////////////////////
0:             protocolConverter.onStompCommand((StompFrame)wireFormat.unmarshal(new ByteSequence(data.getBytes("UTF-8"))));
commit:0771df3
/////////////////////////////////////////////////////////////////////////
1: /**
1:  * Licensed to the Apache Software Foundation (ASF) under one or more
1:  * contributor license agreements.  See the NOTICE file distributed with
1:  * this work for additional information regarding copyright ownership.
1:  * The ASF licenses this file to You under the Apache License, Version 2.0
1:  * (the "License"); you may not use this file except in compliance with
1:  * the License.  You may obtain a copy of the License at
1:  *
1:  *      http://www.apache.org/licenses/LICENSE-2.0
1:  *
1:  * Unless required by applicable law or agreed to in writing, software
1:  * distributed under the License is distributed on an "AS IS" BASIS,
1:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:  * See the License for the specific language governing permissions and
1:  * limitations under the License.
1:  */
0: package org.apache.activemq.transport.ws;
0: 
1: import java.io.IOException;
0: import java.security.cert.X509Certificate;
0: 
0: import org.apache.activemq.command.Command;
0: import org.apache.activemq.transport.TransportSupport;
0: import org.apache.activemq.transport.stomp.LegacyFrameTranslator;
0: import org.apache.activemq.transport.stomp.ProtocolConverter;
1: import org.apache.activemq.transport.stomp.StompFrame;
0: import org.apache.activemq.transport.stomp.StompTransport;
0: import org.apache.activemq.transport.stomp.StompWireFormat;
0: import org.apache.activemq.util.ByteSequence;
0: import org.apache.activemq.util.IOExceptionSupport;
0: import org.apache.activemq.util.ServiceStopper;
0: import org.eclipse.jetty.websocket.WebSocket;
0: 
1: /**
1:  * 
1:  * Implements web socket and mediates between servlet and the broker
1:  *
1:  */
0: class StompSocket extends TransportSupport implements WebSocket, StompTransport {
0:     Outbound outbound;
0:     ProtocolConverter protocolConverter = new ProtocolConverter(this, new LegacyFrameTranslator(), null);
0:     StompWireFormat wireFormat = new StompWireFormat();
0: 
0:     public void onConnect(Outbound outbound) {
0:         this.outbound=outbound;
0:     }
0:     
0:     public void onMessage(byte frame, byte[] data,int offset, int length) {}
0: 
0:     public void onMessage(byte frame, String data) {
0:         try {
0:             protocolConverter.onStompCommand((StompFrame)wireFormat.unmarshal(new ByteSequence(data.getBytes())));
0:         } catch (Exception e) {
0:             onException(IOExceptionSupport.create(e));
0:         }
0:     }
0: 
0:     public void onDisconnect() {
0:     }
0: 
0:     protected void doStart() throws Exception {
0:     }
0: 
0:     protected void doStop(ServiceStopper stopper) throws Exception {
0:     }
0: 
0:     public int getReceiveCounter() {
0:         return 0;
0:     }
0: 
0:     public String getRemoteAddress() {
0:         return "StompSocket_" + this.hashCode();
0:     }
0: 
0:     public void oneway(Object command) throws IOException {
0:         try {
0:             protocolConverter.onActiveMQCommand((Command)command);
0:         } catch (Exception e) {
0:             onException(IOExceptionSupport.create(e));
0:         }
0:     }
0: 
0:     public X509Certificate[] getPeerCertificates() {
0:         return null;
0:     }
0: 
0:     public void sendToActiveMQ(Command command) {
0:         doConsume(command);
0:     }
0: 
1:     public void sendToStomp(StompFrame command) throws IOException {
0:         outbound.sendMessage(WebSocket.SENTINEL_FRAME, command.toString());
0:     }
0: }
============================================================================