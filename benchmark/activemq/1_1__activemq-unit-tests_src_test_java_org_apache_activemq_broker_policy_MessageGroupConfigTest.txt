1:e000471: /**
1:e000471:  * Licensed to the Apache Software Foundation (ASF) under one or more
1:e000471:  * contributor license agreements.  See the NOTICE file distributed with
1:e000471:  * this work for additional information regarding copyright ownership.
1:e000471:  * The ASF licenses this file to You under the Apache License, Version 2.0
1:e000471:  * (the "License"); you may not use this file except in compliance with
1:e000471:  * the License.  You may obtain a copy of the License at
1:e000471:  *
1:e000471:  *      http://www.apache.org/licenses/LICENSE-2.0
1:e000471:  *
1:e000471:  * Unless required by applicable law or agreed to in writing, software
1:e000471:  * distributed under the License is distributed on an "AS IS" BASIS,
1:e000471:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:e000471:  * See the License for the specific language governing permissions and
1:e000471:  * limitations under the License.
1:e000471:  */
1:e000471: package org.apache.activemq.broker.policy;
2:e000471: 
1:e000471: import org.apache.activemq.TestSupport;
1:e000471: import org.apache.activemq.broker.BrokerService;
1:e000471: import org.apache.activemq.broker.region.Queue;
1:e000471: import org.apache.activemq.broker.region.group.CachedMessageGroupMap;
1:e000471: import org.apache.activemq.broker.region.group.MessageGroupHashBucket;
1:e000471: import org.apache.activemq.broker.region.group.MessageGroupMap;
1:e000471: import org.apache.activemq.broker.region.group.SimpleMessageGroupMap;
1:e000471: import org.apache.activemq.broker.region.policy.PolicyEntry;
1:e000471: import org.apache.activemq.broker.region.policy.PolicyMap;
1:e000471: import org.apache.activemq.command.ActiveMQDestination;
1:e000471: 
1:e000471: /**
1:e000471:  * 
1:e000471:  */
1:e000471: public class MessageGroupConfigTest extends TestSupport {
1:e000471:     protected BrokerService broker;
1:e000471: 
1:e000471:     @Override
1:e000471:     protected void setUp() throws Exception {
1:e000471:         super.setUp();  
1:e000471:     }
1:e000471: 
1:e000471:     @Override
1:e000471:     protected void tearDown() throws Exception {
1:e000471:         broker.stop();
1:e000471:         super.tearDown();    
1:e000471:     }
1:e000471: 
1:e000471: 
1:e000471: 
1:e000471:     public void testCachedGroupConfiguration() throws Exception {
1:e000471:         doTestGroupConfiguration("cached",CachedMessageGroupMap.class);
1:e000471:     }
1:e000471: 
1:7f17f49:     public void testCachedGroupConfigurationWithCacheSize() throws Exception {
1:7f17f49:         CachedMessageGroupMap result = (CachedMessageGroupMap) doTestGroupConfiguration("cached?cacheSize=10",CachedMessageGroupMap.class);
1:7f17f49:         assertEquals(10,result.getMaximumCacheSize());
1:7f17f49: 
1:7f17f49:     }
1:7f17f49: 
1:e000471:     public void testSimpleGroupConfiguration() throws Exception {
1:e000471:         doTestGroupConfiguration("simple", SimpleMessageGroupMap.class);
1:e000471:     }
1:e000471: 
1:e000471:     public void testBucketGroupConfiguration() throws Exception {
1:e000471:         doTestGroupConfiguration("bucket", MessageGroupHashBucket.class);
1:e000471:     }
1:e000471: 
1:7f17f49:     public void testBucketGroupConfigurationWithBucketCount() throws Exception {
1:7f17f49:         MessageGroupHashBucket result = (MessageGroupHashBucket) doTestGroupConfiguration("bucket?bucketCount=2", MessageGroupHashBucket.class);
1:7f17f49:         assertEquals(2,result.getBucketCount());
1:7f17f49:     }
1:7f17f49: 
1:7f17f49:     public MessageGroupMap doTestGroupConfiguration(String type, Class classType) throws Exception {
1:e000471:         broker = new BrokerService();
1:e000471: 
1:e000471:         PolicyEntry defaultEntry = new PolicyEntry();
1:e000471:         defaultEntry.setMessageGroupMapFactoryType(type);
1:e000471:         PolicyMap policyMap = new PolicyMap();
1:e000471:         policyMap.setDefaultEntry(defaultEntry);
1:e000471:         broker.setDestinationPolicy(policyMap);
1:e000471:         broker.start();
1:e000471:         super.topic = false;
1:e000471:         ActiveMQDestination destination = (ActiveMQDestination) createDestination("org.apache.foo");
1:e000471:         Queue brokerDestination = (Queue) broker.getDestination(destination);
1:e000471: 
1:e000471:         assertNotNull(brokerDestination);
1:e000471:         MessageGroupMap messageGroupMap = brokerDestination.getMessageGroupOwners();
1:e000471:         assertNotNull(messageGroupMap);
1:e000471:         assertTrue(messageGroupMap.getClass().isAssignableFrom(classType));
1:7f17f49:         return messageGroupMap;
1:e000471:     }
1:e000471: 
1:e000471: 
1:e000471: }
============================================================================
author:rajdavies
-------------------------------------------------------------------------------
commit:7f17f49
/////////////////////////////////////////////////////////////////////////
1:     public void testCachedGroupConfigurationWithCacheSize() throws Exception {
1:         CachedMessageGroupMap result = (CachedMessageGroupMap) doTestGroupConfiguration("cached?cacheSize=10",CachedMessageGroupMap.class);
1:         assertEquals(10,result.getMaximumCacheSize());
1: 
1:     }
1: 
/////////////////////////////////////////////////////////////////////////
1:     public void testBucketGroupConfigurationWithBucketCount() throws Exception {
1:         MessageGroupHashBucket result = (MessageGroupHashBucket) doTestGroupConfiguration("bucket?bucketCount=2", MessageGroupHashBucket.class);
1:         assertEquals(2,result.getBucketCount());
1:     }
1: 
1:     public MessageGroupMap doTestGroupConfiguration(String type, Class classType) throws Exception {
/////////////////////////////////////////////////////////////////////////
1:         return messageGroupMap;
commit:e000471
/////////////////////////////////////////////////////////////////////////
1: /**
1:  * Licensed to the Apache Software Foundation (ASF) under one or more
1:  * contributor license agreements.  See the NOTICE file distributed with
1:  * this work for additional information regarding copyright ownership.
1:  * The ASF licenses this file to You under the Apache License, Version 2.0
1:  * (the "License"); you may not use this file except in compliance with
1:  * the License.  You may obtain a copy of the License at
1:  *
1:  *      http://www.apache.org/licenses/LICENSE-2.0
1:  *
1:  * Unless required by applicable law or agreed to in writing, software
1:  * distributed under the License is distributed on an "AS IS" BASIS,
1:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:  * See the License for the specific language governing permissions and
1:  * limitations under the License.
1:  */
1: package org.apache.activemq.broker.policy;
1: 
1: import org.apache.activemq.TestSupport;
1: import org.apache.activemq.broker.BrokerService;
1: import org.apache.activemq.broker.region.Queue;
1: import org.apache.activemq.broker.region.group.CachedMessageGroupMap;
1: import org.apache.activemq.broker.region.group.MessageGroupHashBucket;
1: import org.apache.activemq.broker.region.group.MessageGroupMap;
1: import org.apache.activemq.broker.region.group.SimpleMessageGroupMap;
1: import org.apache.activemq.broker.region.policy.PolicyEntry;
1: import org.apache.activemq.broker.region.policy.PolicyMap;
1: import org.apache.activemq.command.ActiveMQDestination;
1: 
1: /**
1:  * 
1:  */
1: public class MessageGroupConfigTest extends TestSupport {
1:     protected BrokerService broker;
1: 
1:     @Override
1:     protected void setUp() throws Exception {
1:         super.setUp();  
1:     }
1: 
1:     @Override
1:     protected void tearDown() throws Exception {
1:         broker.stop();
1:         super.tearDown();    
1:     }
1: 
1: 
1: 
1:     public void testCachedGroupConfiguration() throws Exception {
1:         doTestGroupConfiguration("cached",CachedMessageGroupMap.class);
1:     }
1: 
1:     public void testSimpleGroupConfiguration() throws Exception {
1:         doTestGroupConfiguration("simple", SimpleMessageGroupMap.class);
1:     }
1: 
1:     public void testBucketGroupConfiguration() throws Exception {
1:         doTestGroupConfiguration("bucket", MessageGroupHashBucket.class);
1:     }
1: 
0:     public void doTestGroupConfiguration(String type, Class classType) throws Exception {
1:         broker = new BrokerService();
1: 
1:         PolicyEntry defaultEntry = new PolicyEntry();
1:         defaultEntry.setMessageGroupMapFactoryType(type);
1:         PolicyMap policyMap = new PolicyMap();
1:         policyMap.setDefaultEntry(defaultEntry);
1:         broker.setDestinationPolicy(policyMap);
1:         broker.start();
1:         super.topic = false;
1:         ActiveMQDestination destination = (ActiveMQDestination) createDestination("org.apache.foo");
1:         Queue brokerDestination = (Queue) broker.getDestination(destination);
1: 
1:         assertNotNull(brokerDestination);
1:         MessageGroupMap messageGroupMap = brokerDestination.getMessageGroupOwners();
1:         assertNotNull(messageGroupMap);
1:         assertTrue(messageGroupMap.getClass().isAssignableFrom(classType));
1: 
1:     }
1: 
1: 
1: }
============================================================================