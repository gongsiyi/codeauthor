1:54c56a0: /**
1:54c56a0:  * Licensed to the Apache Software Foundation (ASF) under one or more
1:54c56a0:  * contributor license agreements.  See the NOTICE file distributed with
1:54c56a0:  * this work for additional information regarding copyright ownership.
1:54c56a0:  * The ASF licenses this file to You under the Apache License, Version 2.0
1:54c56a0:  * (the "License"); you may not use this file except in compliance with
1:54c56a0:  * the License.  You may obtain a copy of the License at
1:54c56a0:  *
1:54c56a0:  *      http://www.apache.org/licenses/LICENSE-2.0
1:54c56a0:  *
1:54c56a0:  * Unless required by applicable law or agreed to in writing, software
1:54c56a0:  * distributed under the License is distributed on an "AS IS" BASIS,
1:54c56a0:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:54c56a0:  * See the License for the specific language governing permissions and
1:54c56a0:  * limitations under the License.
1:54c56a0:  */
1:54c56a0: package org.apache.activemq.usecases;
1:54c56a0: 
1:54c56a0: import org.apache.activemq.JmsMultipleBrokersTestSupport;
1:54c56a0: import org.apache.activemq.broker.BrokerService;
1:54c56a0: import org.apache.activemq.network.DiscoveryNetworkConnector;
1:54c56a0: import org.apache.activemq.network.NetworkConnector;
1:54c56a0: import org.apache.activemq.spring.SpringSslContext;
1:54c56a0: import org.slf4j.Logger;
1:54c56a0: import org.slf4j.LoggerFactory;
1:54c56a0: 
1:54c56a0: import java.net.URI;
1:54c56a0: 
1:54c56a0: public class NetworkAsyncStartSslTest extends JmsMultipleBrokersTestSupport {
1:54c56a0:     private static final Logger LOG = LoggerFactory.getLogger(NetworkAsyncStartSslTest.class);
1:54c56a0: 
1:54c56a0:     private String brokerBDomain = "localhost:61617";
1:54c56a0:     private String brokerCDomain = "localhost:61618";
1:54c56a0:     int bridgeCount=0;
1:54c56a0: 
1:54c56a0:     public static final String KEYSTORE_TYPE = "jks";
1:54c56a0:     public static final String PASSWORD = "password";
1:54c56a0:     public static final String SERVER_KEYSTORE = "src/test/resources/server.keystore";
1:54c56a0:     public static final String TRUST_KEYSTORE = "src/test/resources/client.keystore";
1:54c56a0: 
1:54c56a0:     public void testSslPerConnectorConfig() throws Exception {
1:54c56a0:         String transport = "ssl";
1:54c56a0:         String brokerBUri = transport + "://" + brokerBDomain;
1:54c56a0:         String brokerCUri = transport + "://" + brokerCDomain;
1:54c56a0: 
1:54c56a0:         SpringSslContext brokerSslContext = new SpringSslContext();
1:54c56a0:         brokerSslContext.setKeyStore(SERVER_KEYSTORE);
1:54c56a0:         brokerSslContext.setKeyStorePassword(PASSWORD);
1:54c56a0:         brokerSslContext.setKeyStoreType(KEYSTORE_TYPE);
1:54c56a0:         brokerSslContext.setTrustStore(TRUST_KEYSTORE);
1:54c56a0:         brokerSslContext.setTrustStorePassword(PASSWORD);
1:54c56a0:         brokerSslContext.afterPropertiesSet();
1:54c56a0: 
1:54c56a0:         BrokerService brokerC = brokers.get("BrokerC").broker;
1:54c56a0:         brokerC.setSslContext(brokerSslContext);
1:54c56a0:         brokerC.addConnector(brokerCUri);
1:54c56a0:         brokerC.start();
1:54c56a0: 
1:54c56a0:         BrokerService brokerB = brokers.get("BrokerB").broker;
1:54c56a0:         brokerB.setSslContext(brokerSslContext);
1:54c56a0:         brokerB.addConnector(brokerBUri);
1:54c56a0:         brokerB.start();
1:54c56a0: 
1:54c56a0:         BrokerService brokerA = brokers.get("BrokerA").broker;
1:54c56a0:         brokerA.setNetworkConnectorStartAsync(true);
1:54c56a0:         NetworkConnector networkConnector = bridgeBroker(brokerA, brokerBUri);
1:54c56a0:         networkConnector.setSslContext(brokerSslContext);
1:54c56a0:         LOG.info("Added bridge to: " + brokerBUri);
1:54c56a0: 
1:54c56a0:         // no ssl context, will fail
1:54c56a0:         bridgeBroker(brokerA, brokerCUri);
1:54c56a0:         LOG.info("Added bridge to: " + brokerCUri);
1:54c56a0: 
1:54c56a0:         LOG.info("starting A..");
1:54c56a0:         brokerA.start();
1:54c56a0: 
1:54c56a0:         // wait for A to get bridge to B
1:54c56a0:         waitForBridgeFormation(brokerA, 1, 0);
1:54c56a0: 
1:54c56a0:         assertTrue("one worked", hasBridge("BrokerA", "BrokerB"));
1:54c56a0:         assertFalse("one failed", hasBridge("BrokerA", "BrokerC"));
1:54c56a0:     }
1:54c56a0: 
1:54c56a0:     private NetworkConnector bridgeBroker(BrokerService localBroker, String remoteURI) throws Exception {
1:54c56a0:         String uri = "static:(" + remoteURI + ")";
1:54c56a0:         NetworkConnector connector = new DiscoveryNetworkConnector(new URI(uri));
1:54c56a0:         connector.setName("bridge-" + bridgeCount++);
1:54c56a0:         localBroker.addNetworkConnector(connector);
1:54c56a0:         return connector;
1:54c56a0:     }
1:54c56a0: 
1:54c56a0:     @Override
1:54c56a0:     public void setUp() throws Exception {
1:54c56a0:         super.setAutoFail(true);
1:54c56a0:         super.setUp();
1:54c56a0:         // initially with no tcp transport connector
1:54c56a0:         createBroker(new URI("broker:()BrokerA?persistent=false&useJmx=false"));
1:54c56a0:         createBroker(new URI("broker:()BrokerB?persistent=false&useJmx=false"));
1:54c56a0:         createBroker(new URI("broker:()BrokerC?persistent=false&useJmx=false"));
1:54c56a0:     }
1:54c56a0: }
============================================================================
author:gtully
-------------------------------------------------------------------------------
commit:54c56a0
/////////////////////////////////////////////////////////////////////////
1: /**
1:  * Licensed to the Apache Software Foundation (ASF) under one or more
1:  * contributor license agreements.  See the NOTICE file distributed with
1:  * this work for additional information regarding copyright ownership.
1:  * The ASF licenses this file to You under the Apache License, Version 2.0
1:  * (the "License"); you may not use this file except in compliance with
1:  * the License.  You may obtain a copy of the License at
1:  *
1:  *      http://www.apache.org/licenses/LICENSE-2.0
1:  *
1:  * Unless required by applicable law or agreed to in writing, software
1:  * distributed under the License is distributed on an "AS IS" BASIS,
1:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:  * See the License for the specific language governing permissions and
1:  * limitations under the License.
1:  */
1: package org.apache.activemq.usecases;
1: 
1: import org.apache.activemq.JmsMultipleBrokersTestSupport;
1: import org.apache.activemq.broker.BrokerService;
1: import org.apache.activemq.network.DiscoveryNetworkConnector;
1: import org.apache.activemq.network.NetworkConnector;
1: import org.apache.activemq.spring.SpringSslContext;
1: import org.slf4j.Logger;
1: import org.slf4j.LoggerFactory;
1: 
1: import java.net.URI;
1: 
1: public class NetworkAsyncStartSslTest extends JmsMultipleBrokersTestSupport {
1:     private static final Logger LOG = LoggerFactory.getLogger(NetworkAsyncStartSslTest.class);
1: 
1:     private String brokerBDomain = "localhost:61617";
1:     private String brokerCDomain = "localhost:61618";
1:     int bridgeCount=0;
1: 
1:     public static final String KEYSTORE_TYPE = "jks";
1:     public static final String PASSWORD = "password";
1:     public static final String SERVER_KEYSTORE = "src/test/resources/server.keystore";
1:     public static final String TRUST_KEYSTORE = "src/test/resources/client.keystore";
1: 
1:     public void testSslPerConnectorConfig() throws Exception {
1:         String transport = "ssl";
1:         String brokerBUri = transport + "://" + brokerBDomain;
1:         String brokerCUri = transport + "://" + brokerCDomain;
1: 
1:         SpringSslContext brokerSslContext = new SpringSslContext();
1:         brokerSslContext.setKeyStore(SERVER_KEYSTORE);
1:         brokerSslContext.setKeyStorePassword(PASSWORD);
1:         brokerSslContext.setKeyStoreType(KEYSTORE_TYPE);
1:         brokerSslContext.setTrustStore(TRUST_KEYSTORE);
1:         brokerSslContext.setTrustStorePassword(PASSWORD);
1:         brokerSslContext.afterPropertiesSet();
1: 
1:         BrokerService brokerC = brokers.get("BrokerC").broker;
1:         brokerC.setSslContext(brokerSslContext);
1:         brokerC.addConnector(brokerCUri);
1:         brokerC.start();
1: 
1:         BrokerService brokerB = brokers.get("BrokerB").broker;
1:         brokerB.setSslContext(brokerSslContext);
1:         brokerB.addConnector(brokerBUri);
1:         brokerB.start();
1: 
1:         BrokerService brokerA = brokers.get("BrokerA").broker;
1:         brokerA.setNetworkConnectorStartAsync(true);
1:         NetworkConnector networkConnector = bridgeBroker(brokerA, brokerBUri);
1:         networkConnector.setSslContext(brokerSslContext);
1:         LOG.info("Added bridge to: " + brokerBUri);
1: 
1:         // no ssl context, will fail
1:         bridgeBroker(brokerA, brokerCUri);
1:         LOG.info("Added bridge to: " + brokerCUri);
1: 
1:         LOG.info("starting A..");
1:         brokerA.start();
1: 
1:         // wait for A to get bridge to B
1:         waitForBridgeFormation(brokerA, 1, 0);
1: 
1:         assertTrue("one worked", hasBridge("BrokerA", "BrokerB"));
1:         assertFalse("one failed", hasBridge("BrokerA", "BrokerC"));
1:     }
1: 
1:     private NetworkConnector bridgeBroker(BrokerService localBroker, String remoteURI) throws Exception {
1:         String uri = "static:(" + remoteURI + ")";
1:         NetworkConnector connector = new DiscoveryNetworkConnector(new URI(uri));
1:         connector.setName("bridge-" + bridgeCount++);
1:         localBroker.addNetworkConnector(connector);
1:         return connector;
1:     }
1: 
1:     @Override
1:     public void setUp() throws Exception {
1:         super.setAutoFail(true);
1:         super.setUp();
1:         // initially with no tcp transport connector
1:         createBroker(new URI("broker:()BrokerA?persistent=false&useJmx=false"));
1:         createBroker(new URI("broker:()BrokerB?persistent=false&useJmx=false"));
1:         createBroker(new URI("broker:()BrokerC?persistent=false&useJmx=false"));
1:     }
1: }
============================================================================