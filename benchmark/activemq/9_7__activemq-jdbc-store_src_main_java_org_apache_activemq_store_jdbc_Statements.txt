1:4843dd4: /**
1:57b4941:  * Licensed to the Apache Software Foundation (ASF) under one or more
1:57b4941:  * contributor license agreements.  See the NOTICE file distributed with
1:57b4941:  * this work for additional information regarding copyright ownership.
1:57b4941:  * The ASF licenses this file to You under the Apache License, Version 2.0
1:57b4941:  * (the "License"); you may not use this file except in compliance with
1:57b4941:  * the License.  You may obtain a copy of the License at
3:4843dd4:  *
1:230a86c:  *      http://www.apache.org/licenses/LICENSE-2.0
1:4843dd4:  *
1:4843dd4:  * Unless required by applicable law or agreed to in writing, software
1:4843dd4:  * distributed under the License is distributed on an "AS IS" BASIS,
1:4843dd4:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:4843dd4:  * See the License for the specific language governing permissions and
1:4843dd4:  * limitations under the License.
1:4843dd4:  */
1:4843dd4: package org.apache.activemq.store.jdbc;
1:4843dd4: 
1:4843dd4: /**
1:b0c2a40:  * 
1:4843dd4:  * 
1:4843dd4:  * @org.apache.xbean.XBean element="statements"
1:4843dd4:  * 
1:4843dd4:  */
1:4843dd4: public class Statements {
1:4843dd4: 
1:4843dd4:     protected String messageTableName = "ACTIVEMQ_MSGS";
1:4843dd4:     protected String durableSubAcksTableName = "ACTIVEMQ_ACKS";
1:90d0c4b:     protected String lockTableName = "ACTIVEMQ_LOCK";
1:4843dd4:     protected String binaryDataType = "BLOB";
1:4843dd4:     protected String containerNameDataType = "VARCHAR(250)";
1:4843dd4:     protected String msgIdDataType = "VARCHAR(250)";
1:78e7221:     protected String sequenceDataType = "BIGINT";
1:4843dd4:     protected String longDataType = "BIGINT";
1:4843dd4:     protected String stringIdDataType = "VARCHAR(250)";
1:933eb2f:     protected boolean useExternalMessageReferences;
1:4843dd4: 
1:933eb2f:     private String tablePrefix = "";
1:4843dd4:     private String addMessageStatement;
1:4843dd4:     private String updateMessageStatement;
1:d22e841:     private String removeMessageStatement;
1:4843dd4:     private String findMessageSequenceIdStatement;
1:4843dd4:     private String findMessageStatement;
1:1cec28c:     private String findMessageByIdStatement;
1:4843dd4:     private String findAllMessagesStatement;
1:4843dd4:     private String findLastSequenceIdInMsgsStatement;
1:4843dd4:     private String findLastSequenceIdInAcksStatement;
1:4843dd4:     private String createDurableSubStatement;
1:4843dd4:     private String findDurableSubStatement;
1:4843dd4:     private String findAllDurableSubsStatement;
1:fa4481c:     private String updateLastPriorityAckRowOfDurableSubStatement;
1:4843dd4:     private String deleteSubscriptionStatement;
1:4843dd4:     private String findAllDurableSubMessagesStatement;
1:4eef609:     private String findDurableSubMessagesStatement;
1:4f5e620:     private String findDurableSubMessagesByPriorityStatement;
1:4843dd4:     private String findAllDestinationsStatement;
1:4843dd4:     private String removeAllMessagesStatement;
1:4843dd4:     private String removeAllSubscriptionsStatement;
1:4843dd4:     private String[] createSchemaStatements;
1:efaa351:     private String[] createLockSchemaStatements;
1:4843dd4:     private String[] dropSchemaStatements;
1:90d0c4b:     private String lockCreateStatement;
1:90d0c4b:     private String lockUpdateStatement;
1:4eef609:     private String nextDurableSubscriberMessageStatement;
1:4eef609:     private String durableSubscriberMessageCountStatement;
1:4597ddd:     private String lastAckedDurableSubscriberMessageStatement;
1:629bc81:     private String destinationMessageCountStatement;
1:629bc81:     private String findNextMessagesStatement;
1:12f0195:     private String findNextMessagesByPriorityStatement;
1:90d0c4b:     private boolean useLockCreateWhereClause;
1:5ffcaf4:     private String findAllMessageIdsStatement;
1:a6a6a70:     private String lastProducerSequenceIdStatement;
1:06cbebc:     private String selectDurablePriorityAckStatement;
1:4843dd4: 
1:06cbebc:     private String insertDurablePriorityAckStatement;
1:06cbebc:     private String updateDurableLastAckStatement;
1:fa4481c:     private String deleteOldMessagesStatementWithPriority;
1:fa4481c:     private String durableSubscriberMessageCountStatementWithPriority;
1:9c76857:     private String dropAckPKAlterStatementEnd;
1:64f3492:     private String updateXidFlagStatement;
1:64f3492:     private String findOpsPendingOutcomeStatement;
1:64f3492:     private String clearXidFlagStatement;
1:64f3492:     private String updateDurableLastAckInTxStatement;
1:64f3492:     private String findAcksPendingOutcomeStatement;
1:64f3492:     private String clearDurableLastAckInTxStatement;
1:64f3492:     private String updateDurableLastAckWithPriorityStatement;
1:64f3492:     private String updateDurableLastAckWithPriorityInTxStatement;
1:64f3492:     private String findXidByIdStatement;
1:dc258ab:     private String leaseObtainStatement;
1:dc258ab:     private String currentDateTimeStatement;
1:dc258ab:     private String leaseUpdateStatement;
1:dc258ab:     private String leaseOwnerStatement;
1:4843dd4: 
1:4843dd4:     public String[] getCreateSchemaStatements() {
1:4843dd4:         if (createSchemaStatements == null) {
1:4843dd4:             createSchemaStatements = new String[] {
1:74a7a8b:                 "CREATE TABLE " + getFullMessageTableName() + "(" + "ID " + sequenceDataType + " NOT NULL"
1:8bc3ee2:                     + ", CONTAINER " + containerNameDataType + " NOT NULL, MSGID_PROD " + msgIdDataType + ", MSGID_SEQ "
1:2677c6b:                     + sequenceDataType + ", EXPIRATION " + longDataType + ", MSG "
1:74a7a8b:                     + (useExternalMessageReferences ? stringIdDataType : binaryDataType)
1:74a7a8b:                     + ", PRIMARY KEY ( ID ) )",
1:74a7a8b:                 "CREATE INDEX " + getFullMessageTableName() + "_MIDX ON " + getFullMessageTableName() + " (MSGID_PROD,MSGID_SEQ)",
1:74a7a8b:                 "CREATE INDEX " + getFullMessageTableName() + "_CIDX ON " + getFullMessageTableName() + " (CONTAINER)",
1:74a7a8b:                 "CREATE INDEX " + getFullMessageTableName() + "_EIDX ON " + getFullMessageTableName() + " (EXPIRATION)",
1:74a7a8b:                 "CREATE TABLE " + getFullAckTableName() + "(" + "CONTAINER " + containerNameDataType + " NOT NULL"
1:74a7a8b:                     + ", SUB_DEST " + stringIdDataType 
1:74a7a8b:                     + ", CLIENT_ID " + stringIdDataType + " NOT NULL" + ", SUB_NAME " + stringIdDataType
1:74a7a8b:                     + " NOT NULL" + ", SELECTOR " + stringIdDataType + ", LAST_ACKED_ID " + sequenceDataType
1:2677c6b:                     + ", PRIMARY KEY ( CONTAINER, CLIENT_ID, SUB_NAME))", 
1:2677c6b:                 "ALTER TABLE " + getFullMessageTableName() + " ADD PRIORITY " + sequenceDataType,
1:2677c6b:                 "CREATE INDEX " + getFullMessageTableName() + "_PIDX ON " + getFullMessageTableName() + " (PRIORITY)",
1:74ba052:                 "ALTER TABLE " + getFullMessageTableName() + " ADD XID " + stringIdDataType,
1:fc81559:                 "ALTER TABLE " + getFullAckTableName() + " ADD PRIORITY " + sequenceDataType  + " DEFAULT 5 NOT NULL",
1:74ba052:                 "ALTER TABLE " + getFullAckTableName() + " ADD XID " + stringIdDataType,
1:9c76857:                 "ALTER TABLE " + getFullAckTableName() + " " + getDropAckPKAlterStatementEnd(),
1:06cbebc:                 "ALTER TABLE " + getFullAckTableName() + " ADD PRIMARY KEY (CONTAINER, CLIENT_ID, SUB_NAME, PRIORITY)",
1:74ba052:                 "CREATE INDEX " + getFullMessageTableName() + "_XIDX ON " + getFullMessageTableName() + " (XID)",
1:74ba052:                 "CREATE INDEX " + getFullAckTableName() + "_XIDX ON " + getFullAckTableName() + " (XID)"
1:90d0c4b:             };
1:4843dd4:         }
1:efaa351:         getCreateLockSchemaStatements();
1:efaa351:         String[] allCreateStatements = new String[createSchemaStatements.length + createLockSchemaStatements.length];
1:efaa351:         System.arraycopy(createSchemaStatements, 0, allCreateStatements, 0, createSchemaStatements.length);
1:efaa351:         System.arraycopy(createLockSchemaStatements, 0, allCreateStatements, createSchemaStatements.length, createLockSchemaStatements.length);
1:efaa351: 
1:efaa351:         return allCreateStatements;
1:efaa351:     }
1:efaa351: 
1:efaa351:     public String[] getCreateLockSchemaStatements() {
1:efaa351:         if (createLockSchemaStatements == null) {
1:efaa351:             createLockSchemaStatements = new String[] {
1:efaa351:                 "CREATE TABLE " + getFullLockTableName()
1:efaa351:                     + "( ID " + longDataType + " NOT NULL, TIME " + longDataType
1:efaa351:                     + ", BROKER_NAME " + stringIdDataType + ", PRIMARY KEY (ID) )",
1:efaa351:                 "INSERT INTO " + getFullLockTableName() + "(ID) VALUES (1)"
1:efaa351:             };
1:efaa351:         }
1:efaa351:         return createLockSchemaStatements;
1:86cbdfd:     }
1:4f5e620: 
1:9c76857:     public String getDropAckPKAlterStatementEnd() {
1:9c76857:         if (dropAckPKAlterStatementEnd == null) {
1:9c76857:             dropAckPKAlterStatementEnd = "DROP PRIMARY KEY";
1:4843dd4:         }
1:9c76857:         return dropAckPKAlterStatementEnd;
1:9c76857:     }
1:f812e34: 
1:9c76857:     public void setDropAckPKAlterStatementEnd(String dropAckPKAlterStatementEnd) {
1:9c76857:         this.dropAckPKAlterStatementEnd = dropAckPKAlterStatementEnd;
1:9c76857:     }
1:4843dd4: 
1:4843dd4:     public String[] getDropSchemaStatements() {
1:4843dd4:         if (dropSchemaStatements == null) {
1:f812e34:             dropSchemaStatements = new String[] {"DROP TABLE " + getFullAckTableName() + "",
1:ddd2fa6:                                                  "DROP TABLE " + getFullMessageTableName() + "",
1:ddd2fa6:                                                  "DROP TABLE " + getFullLockTableName() + ""};
1:4843dd4:         }
1:4843dd4:         return dropSchemaStatements;
1:4843dd4:     }
1:4843dd4: 
1:4843dd4:     public String getAddMessageStatement() {
1:4843dd4:         if (addMessageStatement == null) {
1:f812e34:             addMessageStatement = "INSERT INTO "
1:f812e34:                                   + getFullMessageTableName()
1:64f3492:                                   + "(ID, MSGID_PROD, MSGID_SEQ, CONTAINER, EXPIRATION, PRIORITY, MSG, XID) VALUES (?, ?, ?, ?, ?, ?, ?, ?)";
1:4843dd4:         }
1:4843dd4:         return addMessageStatement;
1:4843dd4:     }
1:4843dd4: 
1:4843dd4:     public String getUpdateMessageStatement() {
1:4843dd4:         if (updateMessageStatement == null) {
1:266d23e:             updateMessageStatement = "UPDATE " + getFullMessageTableName() + " SET MSG=? WHERE MSGID_PROD=? AND MSGID_SEQ=? AND CONTAINER=?";
1:4843dd4:         }
1:4843dd4:         return updateMessageStatement;
1:4843dd4:     }
1:4843dd4: 
1:d22e841:     public String getRemoveMessageStatement() {
1:d22e841:         if (removeMessageStatement == null) {
1:d22e841:             removeMessageStatement = "DELETE FROM " + getFullMessageTableName() + " WHERE ID=?";
1:4843dd4:         }
1:d22e841:         return removeMessageStatement;
1:4843dd4:     }
1:4843dd4: 
1:4843dd4:     public String getFindMessageSequenceIdStatement() {
1:4843dd4:         if (findMessageSequenceIdStatement == null) {
1:4f5e620:             findMessageSequenceIdStatement = "SELECT ID, PRIORITY FROM " + getFullMessageTableName()
1:a6a6a70:                                              + " WHERE MSGID_PROD=? AND MSGID_SEQ=? AND CONTAINER=?";
1:4843dd4:         }
1:4843dd4:         return findMessageSequenceIdStatement;
1:4843dd4:     }
1:4843dd4: 
1:4843dd4:     public String getFindMessageStatement() {
1:1cec28c:         if (findMessageStatement == null) {
1:24a7626:             findMessageStatement = "SELECT MSG FROM " + getFullMessageTableName() + " WHERE MSGID_PROD=? AND MSGID_SEQ=?";
1:4843dd4:         }
1:1cec28c:         return findMessageStatement;
1:4843dd4:     }
1:4843dd4: 
1:1cec28c:     public String getFindMessageByIdStatement() {
1:fd65b82:         if (findMessageByIdStatement == null) {
1:fd65b82:         	findMessageByIdStatement = "SELECT MSG FROM " + getFullMessageTableName() + " WHERE ID=?";
1:1cec28c:         }
1:fd65b82:         return findMessageByIdStatement;
1:1cec28c:     }
1:1cec28c: 
1:64f3492:     public String getFindXidByIdStatement() {
1:64f3492:         if (findXidByIdStatement == null) {
1:64f3492:             findXidByIdStatement = "SELECT XID FROM " + getFullMessageTableName() + " WHERE ID=?";
1:64f3492:         }
1:64f3492:         return findXidByIdStatement;
1:64f3492:     }
1:4843dd4: 
1:4843dd4:     public String getFindAllMessagesStatement() {
1:4843dd4:         if (findAllMessagesStatement == null) {
1:4843dd4:             findAllMessagesStatement = "SELECT ID, MSG FROM " + getFullMessageTableName()
1:f812e34:                                        + " WHERE CONTAINER=? ORDER BY ID";
1:4843dd4:         }
1:4843dd4:         return findAllMessagesStatement;
1:4843dd4:     }
1:4843dd4:     
1:5ffcaf4:     public String getFindAllMessageIdsStatement() {
1:8732f70:         //  this needs to be limited maybe need to use getFindLastSequenceIdInMsgsStatement
1:8732f70:         // and work back for X
1:5ffcaf4:         if (findAllMessageIdsStatement == null) {
1:5ffcaf4:             findAllMessageIdsStatement = "SELECT ID, MSGID_PROD, MSGID_SEQ FROM " + getFullMessageTableName()
1:ae840c4:                                        + " ORDER BY ID DESC";
1:9c76857:         }
1:5ffcaf4:         return findAllMessageIdsStatement;
1:fa4481c:     }
1:dc258ab: 
1:f2a335c:     public void setFindAllMessageIdsStatement(String val) {
1:f2a335c:         findAllMessageIdsStatement = val;
1:f2a335c:     }
1:f2a335c: 
1:4843dd4:     public String getFindLastSequenceIdInMsgsStatement() {
1:4843dd4:         if (findLastSequenceIdInMsgsStatement == null) {
1:4843dd4:             findLastSequenceIdInMsgsStatement = "SELECT MAX(ID) FROM " + getFullMessageTableName();
1:4843dd4:         }
1:4843dd4:         return findLastSequenceIdInMsgsStatement;
1:4843dd4:     }
1:4843dd4: 
1:a6a6a70:     public String getLastProducerSequenceIdStatement() {
1:a6a6a70:         if (lastProducerSequenceIdStatement == null) {
1:a6a6a70:             lastProducerSequenceIdStatement = "SELECT MAX(MSGID_SEQ) FROM " + getFullMessageTableName()
1:a6a6a70:                                             + " WHERE MSGID_PROD=?";
1:a6a6a70:         }
1:a6a6a70:         return lastProducerSequenceIdStatement;
1:a6a6a70:     }
1:64f3492: 
1:64f3492: 
1:4843dd4:     public String getFindLastSequenceIdInAcksStatement() {
1:4843dd4:         if (findLastSequenceIdInAcksStatement == null) {
1:4843dd4:             findLastSequenceIdInAcksStatement = "SELECT MAX(LAST_ACKED_ID) FROM " + getFullAckTableName();
1:4843dd4:         }
1:4843dd4:         return findLastSequenceIdInAcksStatement;
1:4843dd4:     }
1:4843dd4: 
1:4843dd4:     public String getCreateDurableSubStatement() {
1:4843dd4:         if (createDurableSubStatement == null) {
1:f812e34:             createDurableSubStatement = "INSERT INTO "
1:f812e34:                                         + getFullAckTableName()
1:4f5e620:                                         + "(CONTAINER, CLIENT_ID, SUB_NAME, SELECTOR, LAST_ACKED_ID, SUB_DEST, PRIORITY) "
1:4f5e620:                                         + "VALUES (?, ?, ?, ?, ?, ?, ?)";
1:4843dd4:         }
1:4843dd4:         return createDurableSubStatement;
1:4843dd4:     }
1:4843dd4: 
1:4843dd4:     public String getFindDurableSubStatement() {
1:4843dd4:         if (findDurableSubStatement == null) {
1:2728ccb:             findDurableSubStatement = "SELECT SELECTOR, SUB_DEST " + "FROM " + getFullAckTableName()
1:f812e34:                                       + " WHERE CONTAINER=? AND CLIENT_ID=? AND SUB_NAME=?";
1:4843dd4:         }
1:4843dd4:         return findDurableSubStatement;
1:4843dd4:     }
1:4843dd4: 
1:4843dd4:     public String getFindAllDurableSubsStatement() {
1:4843dd4:         if (findAllDurableSubsStatement == null) {
1:f812e34:             findAllDurableSubsStatement = "SELECT SELECTOR, SUB_NAME, CLIENT_ID, SUB_DEST" + " FROM "
1:fa4481c:                                           + getFullAckTableName() + " WHERE CONTAINER=? AND PRIORITY=0";
1:4843dd4:         }
1:4843dd4:         return findAllDurableSubsStatement;
1:4843dd4:     }
1:4843dd4: 
1:fa4481c:     public String getUpdateLastPriorityAckRowOfDurableSubStatement() {
1:fa4481c:         if (updateLastPriorityAckRowOfDurableSubStatement == null) {
1:fa4481c:             updateLastPriorityAckRowOfDurableSubStatement = "UPDATE " + getFullAckTableName() + " SET LAST_ACKED_ID=?"
1:06cbebc:                                                  + " WHERE CONTAINER=? AND CLIENT_ID=? AND SUB_NAME=? AND PRIORITY=?";
1:4843dd4:         }
1:fa4481c:         return updateLastPriorityAckRowOfDurableSubStatement;
1:4843dd4:     }
1:4843dd4: 
1:4843dd4:     public String getDeleteSubscriptionStatement() {
1:4843dd4:         if (deleteSubscriptionStatement == null) {
1:4843dd4:             deleteSubscriptionStatement = "DELETE FROM " + getFullAckTableName()
1:f812e34:                                           + " WHERE CONTAINER=? AND CLIENT_ID=? AND SUB_NAME=?";
1:4843dd4:         }
1:4843dd4:         return deleteSubscriptionStatement;
1:4843dd4:     }
1:4843dd4: 
1:4843dd4:     public String getFindAllDurableSubMessagesStatement() {
1:4843dd4:         if (findAllDurableSubMessagesStatement == null) {
2:f812e34:             findAllDurableSubMessagesStatement = "SELECT M.ID, M.MSG FROM " + getFullMessageTableName()
2:f812e34:                                                  + " M, " + getFullAckTableName() + " D "
1:f812e34:                                                  + " WHERE D.CONTAINER=? AND D.CLIENT_ID=? AND D.SUB_NAME=?"
1:f812e34:                                                  + " AND M.CONTAINER=D.CONTAINER AND M.ID > D.LAST_ACKED_ID"
1:4f5e620:                                                  + " ORDER BY M.PRIORITY DESC, M.ID";
1:4843dd4:         }
1:4843dd4:         return findAllDurableSubMessagesStatement;
1:4843dd4:     }
1:f812e34: 
1:f812e34:     public String getFindDurableSubMessagesStatement() {
1:f812e34:         if (findDurableSubMessagesStatement == null) {
1:f812e34:             findDurableSubMessagesStatement = "SELECT M.ID, M.MSG FROM " + getFullMessageTableName() + " M, "
1:4f5e620:                                               + getFullAckTableName() + " D "
1:f812e34:                                               + " WHERE D.CONTAINER=? AND D.CLIENT_ID=? AND D.SUB_NAME=?"
1:64f3492:                                               + " AND M.XID IS NULL"
1:f812e34:                                               + " AND M.CONTAINER=D.CONTAINER AND M.ID > D.LAST_ACKED_ID"
1:8191f19:                                               + " AND M.ID > ?"
2:f812e34:                                               + " ORDER BY M.ID";
1:8732f70:         }
1:4eef609:         return findDurableSubMessagesStatement;
1:8732f70:     }
1:f812e34:     
1:4f5e620:     public String getFindDurableSubMessagesByPriorityStatement() {
1:4f5e620:         if (findDurableSubMessagesByPriorityStatement == null) {
1:cb96783:             findDurableSubMessagesByPriorityStatement = "SELECT M.ID, M.MSG FROM " + getFullMessageTableName() + " M,"
1:cb96783:                                               + " " + getFullAckTableName() + " D"
1:4f5e620:                                               + " WHERE D.CONTAINER=? AND D.CLIENT_ID=? AND D.SUB_NAME=?"
1:64f3492:                                               + " AND M.XID IS NULL"
1:fa4481c:                                               + " AND M.CONTAINER=D.CONTAINER"
1:fa4481c:                                               + " AND M.PRIORITY=D.PRIORITY AND M.ID > D.LAST_ACKED_ID"
1:cb96783:                                               + " AND M.ID > ? AND M.PRIORITY = ?"
1:f812e34:                                               + " ORDER BY M.ID";
1:4f5e620:         }
1:4f5e620:         return findDurableSubMessagesByPriorityStatement;
1:4f5e620:     }    
1:f812e34: 
1:f812e34:     public String getNextDurableSubscriberMessageStatement() {
1:f812e34:         if (nextDurableSubscriberMessageStatement == null) {
1:f812e34:             nextDurableSubscriberMessageStatement = "SELECT M.ID, M.MSG FROM "
1:f812e34:                                                     + getFullMessageTableName()
1:f812e34:                                                     + " M, "
1:f812e34:                                                     + getFullAckTableName()
1:f812e34:                                                     + " D "
1:f812e34:                                                     + " WHERE D.CONTAINER=? AND D.CLIENT_ID=? AND D.SUB_NAME=?"
2:f812e34:                                                     + " AND M.CONTAINER=D.CONTAINER AND M.ID > ?"
1:f812e34:                                                     + " ORDER BY M.ID ";
1:4597ddd:         }
1:4eef609:         return nextDurableSubscriberMessageStatement;
1:4597ddd:     }
1:f812e34: 
1:4597ddd:     /**
1:4eef609:      * @return the durableSubscriberMessageCountStatement
1:629bc81:      */
1:f812e34: 
1:f812e34:     public String getDurableSubscriberMessageCountStatement() {
1:f812e34:         if (durableSubscriberMessageCountStatement == null) {
1:f812e34:             durableSubscriberMessageCountStatement = "SELECT COUNT(*) FROM "
1:f812e34:                                                      + getFullMessageTableName()
1:f812e34:                                                      + " M, "
1:f812e34:                                                      + getFullAckTableName()
1:f812e34:                                                      + " D "
1:f812e34:                                                      + " WHERE D.CONTAINER=? AND D.CLIENT_ID=? AND D.SUB_NAME=?"
1:06cbebc:                                                      + " AND M.CONTAINER=D.CONTAINER "
1:fa4481c:                                                      + "     AND M.ID >"
1:06cbebc:                                                      + "          ( SELECT LAST_ACKED_ID FROM " + getFullAckTableName()
2:06cbebc:                                                      + "           WHERE CONTAINER=D.CONTAINER AND CLIENT_ID=D.CLIENT_ID"
1:fa4481c:                                                      + "           AND SUB_NAME=D.SUB_NAME )";
1:4843dd4: 
1:629bc81:         }
1:4eef609:         return durableSubscriberMessageCountStatement;
1:b6ba20b:     }
1:f812e34: 
1:fa4481c:     public String getDurableSubscriberMessageCountStatementWithPriority() {
1:fa4481c:         if (durableSubscriberMessageCountStatementWithPriority == null) {
1:fa4481c:             durableSubscriberMessageCountStatementWithPriority = "SELECT COUNT(*) FROM "
1:fa4481c:                                                      + getFullMessageTableName()
1:fa4481c:                                                      + " M, "
1:fa4481c:                                                      + getFullAckTableName()
1:fa4481c:                                                      + " D "
1:f812e34:                                                      + " WHERE D.CONTAINER=? AND D.CLIENT_ID=? AND D.SUB_NAME=?"
1:fa4481c:                                                      + " AND M.CONTAINER=D.CONTAINER "
1:fa4481c:                                                      + " AND M.PRIORITY=D.PRIORITY "
1:fa4481c:                                                      + " AND M.ID > D.LAST_ACKED_ID";
1:fa4481c:         }
1:9c76857: 
1:fa4481c:         return durableSubscriberMessageCountStatementWithPriority;
1:fa4481c:     }
1:9c76857: 
1:f812e34:     public String getFindAllDestinationsStatement() {
1:4843dd4:         if (findAllDestinationsStatement == null) {
1:b6f63b0:             findAllDestinationsStatement = "SELECT DISTINCT CONTAINER FROM " + getFullMessageTableName()
1:8bc3ee2:                     + " WHERE CONTAINER IS NOT NULL UNION SELECT DISTINCT CONTAINER FROM " + getFullAckTableName();
1:4843dd4:         }
1:4843dd4:         return findAllDestinationsStatement;
1:4843dd4:     }
1:4843dd4: 
1:4843dd4:     public String getRemoveAllMessagesStatement() {
1:4843dd4:         if (removeAllMessagesStatement == null) {
1:4843dd4:             removeAllMessagesStatement = "DELETE FROM " + getFullMessageTableName() + " WHERE CONTAINER=?";
1:4843dd4:         }
1:4843dd4:         return removeAllMessagesStatement;
1:4843dd4:     }
1:4843dd4: 
1:4843dd4:     public String getRemoveAllSubscriptionsStatement() {
1:4843dd4:         if (removeAllSubscriptionsStatement == null) {
1:4843dd4:             removeAllSubscriptionsStatement = "DELETE FROM " + getFullAckTableName() + " WHERE CONTAINER=?";
1:4843dd4:         }
1:4843dd4:         return removeAllSubscriptionsStatement;
1:4843dd4:     }
1:4843dd4: 
1:fa4481c:     public String getDeleteOldMessagesStatementWithPriority() {
1:fa4481c:         if (deleteOldMessagesStatementWithPriority == null) {
1:fa4481c:             deleteOldMessagesStatementWithPriority = "DELETE FROM " + getFullMessageTableName()
1:fe31092:                                          + " WHERE (PRIORITY=? AND ID <= "
1:fa4481c:                                          + "     ( SELECT min(" + getFullAckTableName() + ".LAST_ACKED_ID)"
1:fa4481c:                                          + "       FROM " + getFullAckTableName() + " WHERE "
1:fa4481c:                                          +          getFullAckTableName() + ".CONTAINER="
1:fa4481c:                                          +          getFullMessageTableName() + ".CONTAINER"
1:fe31092:                                          + "        AND " + getFullAckTableName() + ".PRIORITY=?)"
1:fa4481c:                                          + "   )";
1:4843dd4:         }
1:fa4481c:         return deleteOldMessagesStatementWithPriority;
1:4843dd4:     }
1:4843dd4: 
1:90d0c4b:     public String getLockCreateStatement() {
1:90d0c4b:         if (lockCreateStatement == null) {
1:90d0c4b:             lockCreateStatement = "SELECT * FROM " + getFullLockTableName();
1:90d0c4b:             if (useLockCreateWhereClause) {
1:90d0c4b:                 lockCreateStatement += " WHERE ID = 1";
1:fa4481c:             }
1:90d0c4b:             lockCreateStatement += " FOR UPDATE";
1:fa4481c:         }
1:90d0c4b:         return lockCreateStatement;
1:b6ba20b:     }
1:f812e34: 
1:dc258ab:     public String getLeaseObtainStatement() {
1:dc258ab:         if (leaseObtainStatement == null) {
1:dc258ab:             leaseObtainStatement = "UPDATE " + getFullLockTableName()
1:dc258ab:                     + " SET BROKER_NAME=?, TIME=?"
1:dc258ab:                     + " WHERE (TIME IS NULL OR TIME < ?) AND ID = 1";
1:dc258ab:         }
1:dc258ab:         return leaseObtainStatement;
1:dc258ab:     }
1:4843dd4: 
1:dc258ab:     public String getCurrentDateTime() {
1:dc258ab:         if (currentDateTimeStatement == null) {
1:dc258ab:             currentDateTimeStatement = "SELECT CURRENT_TIMESTAMP FROM " + getFullLockTableName();
1:dc258ab:         }
1:dc258ab:         return currentDateTimeStatement;
1:dc258ab:     }
1:dc258ab: 
1:dc258ab:     public String getLeaseUpdateStatement() {
1:dc258ab:         if (leaseUpdateStatement == null) {
1:dc258ab:             leaseUpdateStatement = "UPDATE " + getFullLockTableName()
1:dc258ab:                     + " SET BROKER_NAME=?, TIME=?"
1:dc258ab:                     + " WHERE BROKER_NAME=? AND ID = 1";
1:dc258ab:         }
1:dc258ab:         return leaseUpdateStatement;
1:dc258ab:     }
1:dc258ab: 
1:dc258ab:     public String getLeaseOwnerStatement() {
1:dc258ab:         if (leaseOwnerStatement == null) {
1:dc258ab:             leaseOwnerStatement = "SELECT BROKER_NAME, TIME FROM " + getFullLockTableName()
1:dc258ab:                     + " WHERE ID = 1";
1:dc258ab:         }
1:dc258ab:         return leaseOwnerStatement;
1:dc258ab:     }
1:dc258ab: 
1:90d0c4b:     public String getLockUpdateStatement() {
1:90d0c4b:         if (lockUpdateStatement == null) {
1:6eeb269:             lockUpdateStatement = "UPDATE " + getFullLockTableName() + " SET TIME = ? WHERE ID = 1";
1:b6ba20b:         }
1:90d0c4b:         return lockUpdateStatement;
1:b6ba20b:     }
1:f812e34: 
1:4843dd4:     /**
1:629bc81:      * @return the destinationMessageCountStatement
1:4843dd4:      */
1:f812e34:     public String getDestinationMessageCountStatement() {
1:f812e34:         if (destinationMessageCountStatement == null) {
1:f812e34:             destinationMessageCountStatement = "SELECT COUNT(*) FROM " + getFullMessageTableName()
1:64f3492:                                                + " WHERE CONTAINER=? AND XID IS NULL";
1:629bc81:         }
1:629bc81:         return destinationMessageCountStatement;
1:629bc81:     }
1:fa4481c: 
1:4843dd4:     /**
1:12f0195:      * @return the findNextMessagesStatement
1:12f0195:      */
1:f812e34:     public String getFindNextMessagesStatement() {
1:f812e34:         if (findNextMessagesStatement == null) {
1:f812e34:             findNextMessagesStatement = "SELECT ID, MSG FROM " + getFullMessageTableName()
1:a2697b8:                                         + " WHERE CONTAINER=? AND ID < ? AND ID > ? AND XID IS NULL ORDER BY ID";
1:629bc81:         }
1:629bc81:         return findNextMessagesStatement;
1:629bc81:     }
1:f812e34: 
1:4597ddd:     /**
1:629bc81:      * @return the findNextMessagesStatement
1:4843dd4:      */
1:12f0195:     public String getFindNextMessagesByPriorityStatement() {
1:12f0195:         if (findNextMessagesByPriorityStatement == null) {
1:12f0195:             findNextMessagesByPriorityStatement = "SELECT ID, MSG FROM " + getFullMessageTableName()
1:3432a75:                                         + " WHERE CONTAINER=?"
1:64f3492:                                         + " AND XID IS NULL"
1:a2697b8:                                         + " AND ID < ? "
1:a2697b8:                                         + " AND ( (ID > ? AND PRIORITY = 9) "
1:a2697b8:                                         + "    OR (ID > ? AND PRIORITY = 8) "
1:a2697b8:                                         + "    OR (ID > ? AND PRIORITY = 7) "
1:a2697b8:                                         + "    OR (ID > ? AND PRIORITY = 6) "
1:a2697b8:                                         + "    OR (ID > ? AND PRIORITY = 5) "
1:a2697b8:                                         + "    OR (ID > ? AND PRIORITY = 4) "
1:a2697b8:                                         + "    OR (ID > ? AND PRIORITY = 3) "
1:a2697b8:                                         + "    OR (ID > ? AND PRIORITY = 2) "
1:a2697b8:                                         + "    OR (ID > ? AND PRIORITY = 1) "
1:a2697b8:                                         + "    OR (ID > ? AND PRIORITY = 0) )"
1:3432a75:                                         + " ORDER BY PRIORITY DESC, ID";
1:12f0195:         }
1:12f0195:         return findNextMessagesByPriorityStatement;
1:12f0195:     }    
1:f2a335c: 
1:f2a335c:     public void setFindNextMessagesByPriorityStatement(String val) {
1:f2a335c:         findNextMessagesByPriorityStatement = val;
1:f2a335c:     }
1:f2a335c: 
1:12f0195:     /**
1:4597ddd:      * @return the lastAckedDurableSubscriberMessageStatement
1:4597ddd:      */
1:f812e34:     public String getLastAckedDurableSubscriberMessageStatement() {
1:f812e34:         if (lastAckedDurableSubscriberMessageStatement == null) {
1:f812e34:             lastAckedDurableSubscriberMessageStatement = "SELECT MAX(LAST_ACKED_ID) FROM "
1:f812e34:                                                          + getFullAckTableName()
1:f812e34:                                                          + " WHERE CONTAINER=? AND CLIENT_ID=? AND SUB_NAME=?";                                                    
1:4597ddd:         }
1:4597ddd:         return lastAckedDurableSubscriberMessageStatement;
1:4597ddd:     }
1:12f0195: 
1:06cbebc:     public String getSelectDurablePriorityAckStatement() {
1:06cbebc:         if (selectDurablePriorityAckStatement == null) {
1:06cbebc:             selectDurablePriorityAckStatement = "SELECT LAST_ACKED_ID FROM " + getFullAckTableName()
1:06cbebc:                                                     + " WHERE CONTAINER=? AND CLIENT_ID=? AND SUB_NAME=?"
1:06cbebc:                                                     + " AND PRIORITY = ?";
1:06cbebc:         }
1:06cbebc:         return selectDurablePriorityAckStatement;
1:06cbebc:     }
1:fa4481c: 
1:06cbebc:     public String getInsertDurablePriorityAckStatement() {
1:06cbebc:         if (insertDurablePriorityAckStatement == null) {
1:06cbebc:             insertDurablePriorityAckStatement = "INSERT INTO "
1:06cbebc:                                   + getFullAckTableName()
1:06cbebc:                                   + "(CONTAINER, CLIENT_ID, SUB_NAME, PRIORITY)"
1:06cbebc:                                   + " VALUES (?, ?, ?, ?)";            
1:06cbebc:        }
1:06cbebc:         return insertDurablePriorityAckStatement;
1:06cbebc:     }
1:fa4481c: 
1:fa4481c: 
1:06cbebc:     public String getUpdateDurableLastAckStatement() {
1:06cbebc:         if (updateDurableLastAckStatement == null) {
1:06cbebc:             updateDurableLastAckStatement  = "UPDATE " + getFullAckTableName()
1:64f3492:                     + " SET LAST_ACKED_ID=?, XID = NULL WHERE CONTAINER=? AND CLIENT_ID=? AND SUB_NAME=?";
1:06cbebc:         }
1:06cbebc:         return  updateDurableLastAckStatement;
1:06cbebc:     }
1:fa4481c: 
1:64f3492:     public String getUpdateDurableLastAckInTxStatement() {
1:64f3492:         if (updateDurableLastAckInTxStatement == null) {
1:64f3492:             updateDurableLastAckInTxStatement = "UPDATE " + getFullAckTableName()
1:64f3492:                     + " SET XID=? WHERE CONTAINER=? AND CLIENT_ID=? AND SUB_NAME=?";
1:64f3492:         }
1:64f3492:         return updateDurableLastAckInTxStatement;
1:64f3492:     }
1:64f3492: 
1:64f3492:     public String getUpdateDurableLastAckWithPriorityStatement() {
1:64f3492:         if (updateDurableLastAckWithPriorityStatement == null) {
1:64f3492:             updateDurableLastAckWithPriorityStatement  = "UPDATE " + getFullAckTableName()
1:64f3492:                     + " SET LAST_ACKED_ID=?, XID = NULL WHERE CONTAINER=? AND CLIENT_ID=? AND SUB_NAME=? AND PRIORITY=?";
1:64f3492:         }
1:64f3492:         return  updateDurableLastAckWithPriorityStatement;
1:64f3492:     }
1:64f3492: 
1:64f3492:     public String getUpdateDurableLastAckWithPriorityInTxStatement() {
1:64f3492:         if (updateDurableLastAckWithPriorityInTxStatement == null) {
1:64f3492:             updateDurableLastAckWithPriorityInTxStatement  = "UPDATE " + getFullAckTableName()
1:64f3492:                     + " SET XID=? WHERE CONTAINER=? AND CLIENT_ID=? AND SUB_NAME=? AND PRIORITY=?";
1:64f3492:         }
1:64f3492:         return  updateDurableLastAckWithPriorityInTxStatement;
1:64f3492:     }
1:64f3492: 
1:64f3492:     public String getClearDurableLastAckInTxStatement() {
1:64f3492:         if (clearDurableLastAckInTxStatement == null) {
1:64f3492:             clearDurableLastAckInTxStatement = "UPDATE " + getFullAckTableName()
1:64f3492:                     + " SET XID = NULL WHERE CONTAINER=? AND CLIENT_ID=? AND SUB_NAME=? AND PRIORITY=?";
1:64f3492:         }
1:64f3492:         return clearDurableLastAckInTxStatement;
1:64f3492:     }
1:64f3492: 
1:64f3492:     public String getFindOpsPendingOutcomeStatement() {
1:64f3492:         if (findOpsPendingOutcomeStatement == null) {
1:64f3492:             findOpsPendingOutcomeStatement = "SELECT ID, XID, MSG FROM " + getFullMessageTableName()
1:64f3492:                     + " WHERE XID IS NOT NULL ORDER BY ID";
1:64f3492:         }
1:64f3492:         return findOpsPendingOutcomeStatement;
1:64f3492:     }
1:64f3492: 
1:64f3492:     public String getFindAcksPendingOutcomeStatement() {
1:64f3492:         if (findAcksPendingOutcomeStatement == null) {
1:64f3492:             findAcksPendingOutcomeStatement = "SELECT XID," +
1:64f3492:                     " CONTAINER, CLIENT_ID, SUB_NAME FROM " + getFullAckTableName()
1:64f3492:                     + " WHERE XID IS NOT NULL";
1:64f3492:         }
1:64f3492:         return findAcksPendingOutcomeStatement;
1:64f3492:     }
1:64f3492: 
1:64f3492:     public String getUpdateXidFlagStatement() {
1:64f3492:         if (updateXidFlagStatement == null) {
1:64f3492:             updateXidFlagStatement = "UPDATE " + getFullMessageTableName()
1:64f3492:                     + " SET XID = ? WHERE ID = ?";
1:64f3492:         }
1:64f3492:         return updateXidFlagStatement;
1:64f3492:     }
1:64f3492: 
1:64f3492:     public String getClearXidFlagStatement() {
1:64f3492:         if (clearXidFlagStatement == null) {
1:64f3492:             clearXidFlagStatement = "UPDATE "  + getFullMessageTableName()
1:3155c62:                     + " SET XID = NULL, ID = ? WHERE ID = ?";
1:64f3492:         }
1:64f3492:         return clearXidFlagStatement;
1:64f3492:     }
1:64f3492: 
1:4843dd4:     public String getFullMessageTableName() {
1:4843dd4:         return getTablePrefix() + getMessageTableName();
1:4843dd4:     }
1:4843dd4: 
1:4843dd4:     public String getFullAckTableName() {
1:4843dd4:         return getTablePrefix() + getDurableSubAcksTableName();
1:4843dd4:     }
1:f812e34: 
1:90d0c4b:     public String getFullLockTableName() {
1:90d0c4b:         return getTablePrefix() + getLockTableName();
1:b6ba20b:     }
1:4843dd4: 
1:4843dd4:     /**
1:4843dd4:      * @return Returns the containerNameDataType.
1:4843dd4:      */
1:4843dd4:     public String getContainerNameDataType() {
1:4843dd4:         return containerNameDataType;
1:4843dd4:     }
1:4843dd4: 
1:4843dd4:     /**
1:f812e34:      * @param containerNameDataType The containerNameDataType to set.
1:4843dd4:      */
1:4843dd4:     public void setContainerNameDataType(String containerNameDataType) {
1:4843dd4:         this.containerNameDataType = containerNameDataType;
1:4843dd4:     }
1:4843dd4: 
1:4843dd4:     /**
1:4843dd4:      * @return Returns the messageDataType.
1:4843dd4:      */
1:4843dd4:     public String getBinaryDataType() {
1:4843dd4:         return binaryDataType;
1:4843dd4:     }
1:4843dd4: 
1:4843dd4:     /**
1:f812e34:      * @param messageDataType The messageDataType to set.
1:4843dd4:      */
1:4843dd4:     public void setBinaryDataType(String messageDataType) {
1:4843dd4:         this.binaryDataType = messageDataType;
1:4843dd4:     }
1:4843dd4: 
1:4843dd4:     /**
1:4843dd4:      * @return Returns the messageTableName.
1:4843dd4:      */
1:4843dd4:     public String getMessageTableName() {
1:4843dd4:         return messageTableName;
1:4843dd4:     }
1:4843dd4: 
1:4843dd4:     /**
1:f812e34:      * @param messageTableName The messageTableName to set.
1:4843dd4:      */
1:4843dd4:     public void setMessageTableName(String messageTableName) {
1:4843dd4:         this.messageTableName = messageTableName;
1:4843dd4:     }
1:4843dd4: 
1:4843dd4:     /**
1:4843dd4:      * @return Returns the msgIdDataType.
1:4843dd4:      */
1:4843dd4:     public String getMsgIdDataType() {
1:4843dd4:         return msgIdDataType;
1:4843dd4:     }
1:4843dd4: 
1:4843dd4:     /**
1:f812e34:      * @param msgIdDataType The msgIdDataType to set.
1:4843dd4:      */
1:4843dd4:     public void setMsgIdDataType(String msgIdDataType) {
1:4843dd4:         this.msgIdDataType = msgIdDataType;
1:4843dd4:     }
1:4843dd4: 
1:4843dd4:     /**
1:4843dd4:      * @return Returns the sequenceDataType.
1:4843dd4:      */
1:4843dd4:     public String getSequenceDataType() {
1:4843dd4:         return sequenceDataType;
1:4843dd4:     }
1:4843dd4: 
1:4843dd4:     /**
1:f812e34:      * @param sequenceDataType The sequenceDataType to set.
1:4843dd4:      */
1:4843dd4:     public void setSequenceDataType(String sequenceDataType) {
1:4843dd4:         this.sequenceDataType = sequenceDataType;
1:4843dd4:     }
1:4843dd4: 
1:4843dd4:     /**
1:4843dd4:      * @return Returns the tablePrefix.
1:4843dd4:      */
1:4843dd4:     public String getTablePrefix() {
1:4843dd4:         return tablePrefix;
1:4843dd4:     }
1:4843dd4: 
1:4843dd4:     /**
1:f812e34:      * @param tablePrefix The tablePrefix to set.
1:4843dd4:      */
1:4843dd4:     public void setTablePrefix(String tablePrefix) {
1:4843dd4:         this.tablePrefix = tablePrefix;
1:4843dd4:     }
1:4843dd4: 
1:4843dd4:     /**
1:4843dd4:      * @return Returns the durableSubAcksTableName.
1:4843dd4:      */
1:4843dd4:     public String getDurableSubAcksTableName() {
1:4843dd4:         return durableSubAcksTableName;
1:4843dd4:     }
1:4843dd4: 
1:4843dd4:     /**
1:f812e34:      * @param durableSubAcksTableName The durableSubAcksTableName to set.
1:4843dd4:      */
1:4843dd4:     public void setDurableSubAcksTableName(String durableSubAcksTableName) {
1:4843dd4:         this.durableSubAcksTableName = durableSubAcksTableName;
1:4843dd4:     }
1:f812e34: 
1:90d0c4b:     public String getLockTableName() {
1:90d0c4b:         return lockTableName;
1:4843dd4:     }
1:4843dd4: 
1:90d0c4b:     public void setLockTableName(String lockTableName) {
1:90d0c4b:         this.lockTableName = lockTableName;
1:4843dd4:     }
1:4843dd4: 
1:4843dd4:     public String getLongDataType() {
1:4843dd4:         return longDataType;
1:4843dd4:     }
1:4843dd4: 
1:4843dd4:     public void setLongDataType(String longDataType) {
1:4843dd4:         this.longDataType = longDataType;
1:4843dd4:     }
1:4843dd4: 
1:4843dd4:     public String getStringIdDataType() {
1:4843dd4:         return stringIdDataType;
1:4843dd4:     }
1:4843dd4: 
1:4843dd4:     public void setStringIdDataType(String stringIdDataType) {
1:4843dd4:         this.stringIdDataType = stringIdDataType;
1:4843dd4:     }
1:4843dd4: 
1:4843dd4:     public void setUseExternalMessageReferences(boolean useExternalMessageReferences) {
1:4843dd4:         this.useExternalMessageReferences = useExternalMessageReferences;
1:4843dd4:     }
1:4843dd4: 
1:4843dd4:     public boolean isUseExternalMessageReferences() {
1:4843dd4:         return useExternalMessageReferences;
1:4843dd4:     }
1:4843dd4: 
1:4843dd4:     public void setAddMessageStatement(String addMessageStatment) {
1:4843dd4:         this.addMessageStatement = addMessageStatment;
1:4843dd4:     }
1:4843dd4: 
1:4843dd4:     public void setCreateDurableSubStatement(String createDurableSubStatment) {
1:4843dd4:         this.createDurableSubStatement = createDurableSubStatment;
1:4843dd4:     }
1:4843dd4: 
1:4843dd4:     public void setCreateSchemaStatements(String[] createSchemaStatments) {
1:4843dd4:         this.createSchemaStatements = createSchemaStatments;
1:4843dd4:     }
1:4843dd4: 
1:efaa351:     public void setCreateLockSchemaStatements(String[] createLockSchemaStatments) {
1:efaa351:         this.createLockSchemaStatements = createLockSchemaStatments;
1:efaa351:     }
1:efaa351: 
1:fe31092:     public void setDeleteOldMessagesStatementWithPriority(String deleteOldMessagesStatementWithPriority) {
1:fe31092:         this.deleteOldMessagesStatementWithPriority = deleteOldMessagesStatementWithPriority;
1:4843dd4:     }
1:4843dd4: 
1:4843dd4:     public void setDeleteSubscriptionStatement(String deleteSubscriptionStatment) {
1:4843dd4:         this.deleteSubscriptionStatement = deleteSubscriptionStatment;
1:4843dd4:     }
1:4843dd4: 
1:4843dd4:     public void setDropSchemaStatements(String[] dropSchemaStatments) {
1:4843dd4:         this.dropSchemaStatements = dropSchemaStatments;
1:4843dd4:     }
1:4843dd4: 
1:4843dd4:     public void setFindAllDestinationsStatement(String findAllDestinationsStatment) {
1:4843dd4:         this.findAllDestinationsStatement = findAllDestinationsStatment;
1:4843dd4:     }
1:4843dd4: 
1:4843dd4:     public void setFindAllDurableSubMessagesStatement(String findAllDurableSubMessagesStatment) {
1:4843dd4:         this.findAllDurableSubMessagesStatement = findAllDurableSubMessagesStatment;
1:4843dd4:     }
1:4843dd4: 
1:4843dd4:     public void setFindAllDurableSubsStatement(String findAllDurableSubsStatment) {
1:4843dd4:         this.findAllDurableSubsStatement = findAllDurableSubsStatment;
1:4843dd4:     }
1:4843dd4: 
1:4843dd4:     public void setFindAllMessagesStatement(String findAllMessagesStatment) {
1:4843dd4:         this.findAllMessagesStatement = findAllMessagesStatment;
1:4843dd4:     }
1:4843dd4: 
1:4843dd4:     public void setFindDurableSubStatement(String findDurableSubStatment) {
1:4843dd4:         this.findDurableSubStatement = findDurableSubStatment;
1:4843dd4:     }
1:4843dd4: 
1:4843dd4:     public void setFindLastSequenceIdInAcksStatement(String findLastSequenceIdInAcks) {
1:4843dd4:         this.findLastSequenceIdInAcksStatement = findLastSequenceIdInAcks;
1:4843dd4:     }
1:4843dd4: 
1:4843dd4:     public void setFindLastSequenceIdInMsgsStatement(String findLastSequenceIdInMsgs) {
1:4843dd4:         this.findLastSequenceIdInMsgsStatement = findLastSequenceIdInMsgs;
1:4843dd4:     }
1:4843dd4: 
1:4843dd4:     public void setFindMessageSequenceIdStatement(String findMessageSequenceIdStatment) {
1:4843dd4:         this.findMessageSequenceIdStatement = findMessageSequenceIdStatment;
1:4843dd4:     }
1:4843dd4: 
1:4843dd4:     public void setFindMessageStatement(String findMessageStatment) {
1:4843dd4:         this.findMessageStatement = findMessageStatment;
1:4843dd4:     }
1:fd65b82:     
1:fd65b82:     public void setFindMessageByIdStatement(String findMessageByIdStatement) {
1:fd65b82:         this.findMessageByIdStatement = findMessageByIdStatement;
1:fd65b82:     }
1:4843dd4: 
1:4843dd4:     public void setRemoveAllMessagesStatement(String removeAllMessagesStatment) {
1:4843dd4:         this.removeAllMessagesStatement = removeAllMessagesStatment;
1:4843dd4:     }
1:4843dd4: 
1:4843dd4:     public void setRemoveAllSubscriptionsStatement(String removeAllSubscriptionsStatment) {
1:4843dd4:         this.removeAllSubscriptionsStatement = removeAllSubscriptionsStatment;
1:4843dd4:     }
1:4843dd4: 
1:d22e841:     public void setRemoveMessageStatment(String removeMessageStatement) {
1:d22e841:         this.removeMessageStatement = removeMessageStatement;
1:4843dd4:     }
1:4843dd4: 
1:fa4481c:     public void setUpdateLastPriorityAckRowOfDurableSubStatement(String updateLastPriorityAckRowOfDurableSubStatement) {
1:fa4481c:         this.updateLastPriorityAckRowOfDurableSubStatement = updateLastPriorityAckRowOfDurableSubStatement;
1:4843dd4:     }
1:4843dd4: 
1:4843dd4:     public void setUpdateMessageStatement(String updateMessageStatment) {
1:4843dd4:         this.updateMessageStatement = updateMessageStatment;
1:4843dd4:     }
1:4843dd4: 
1:90d0c4b:     public boolean isUseLockCreateWhereClause() {
1:90d0c4b:         return useLockCreateWhereClause;
1:4843dd4:     }
1:fa4481c: 
1:90d0c4b:     public void setUseLockCreateWhereClause(boolean useLockCreateWhereClause) {
1:90d0c4b:         this.useLockCreateWhereClause = useLockCreateWhereClause;
1:b6ba20b:     }
1:06cbebc: 
1:90d0c4b:     public void setLockCreateStatement(String lockCreateStatement) {
1:90d0c4b:         this.lockCreateStatement = lockCreateStatement;
1:b6ba20b:     }
1:06cbebc: 
1:90d0c4b:     public void setLockUpdateStatement(String lockUpdateStatement) {
1:90d0c4b:         this.lockUpdateStatement = lockUpdateStatement;
1:b6ba20b:     }
1:06cbebc: 
1:629bc81:     /**
1:f812e34:      * @param findDurableSubMessagesStatement the
1:f812e34:      *                findDurableSubMessagesStatement to set
1:629bc81:      */
1:f812e34:     public void setFindDurableSubMessagesStatement(String findDurableSubMessagesStatement) {
1:f812e34:         this.findDurableSubMessagesStatement = findDurableSubMessagesStatement;
7:4eef609:     }
1:06cbebc: 
1:629bc81:     /**
1:4eef609:      * @param nextDurableSubscriberMessageStatement the nextDurableSubscriberMessageStatement to set
2:b6ba20b:      */
1:f812e34:     public void setNextDurableSubscriberMessageStatement(String nextDurableSubscriberMessageStatement) {
1:f812e34:         this.nextDurableSubscriberMessageStatement = nextDurableSubscriberMessageStatement;
1:4eef609:     }
1:06cbebc: 
1:629bc81:     /**
1:4eef609:      * @param durableSubscriberMessageCountStatement the durableSubscriberMessageCountStatement to set
1:b6ba20b:      */
1:f812e34:     public void setDurableSubscriberMessageCountStatement(String durableSubscriberMessageCountStatement) {
1:f812e34:         this.durableSubscriberMessageCountStatement = durableSubscriberMessageCountStatement;
1:f812e34:     }
1:f812e34: 
1:fa4481c:     public void setDurableSubscriberMessageCountStatementWithPriority(String durableSubscriberMessageCountStatementWithPriority) {
1:fa4481c:         this.durableSubscriberMessageCountStatementWithPriority = durableSubscriberMessageCountStatementWithPriority;
1:fa4481c:     }
1:fa4481c: 
1:b6ba20b:     /**
1:629bc81:      * @param findNextMessagesStatement the findNextMessagesStatement to set
1:629bc81:      */
1:f812e34:     public void setFindNextMessagesStatement(String findNextMessagesStatement) {
1:f812e34:         this.findNextMessagesStatement = findNextMessagesStatement;
1:629bc81:     }
1:06cbebc: 
1:629bc81:     /**
1:629bc81:      * @param destinationMessageCountStatement the destinationMessageCountStatement to set
1:629bc81:      */
1:f812e34:     public void setDestinationMessageCountStatement(String destinationMessageCountStatement) {
1:f812e34:         this.destinationMessageCountStatement = destinationMessageCountStatement;
1:629bc81:     }
1:a6a6a70: 
1:b6ba20b:     /**
1:4597ddd:      * @param lastAckedDurableSubscriberMessageStatement the lastAckedDurableSubscriberMessageStatement to set
1:4597ddd:      */
1:f812e34:     public void setLastAckedDurableSubscriberMessageStatement(
1:f812e34:                                                               String lastAckedDurableSubscriberMessageStatement) {
1:f812e34:         this.lastAckedDurableSubscriberMessageStatement = lastAckedDurableSubscriberMessageStatement;
1:a6a6a70:     }
1:f812e34: 
1:a6a6a70: 
1:a6a6a70:     public void setLastProducerSequenceIdStatement(String lastProducerSequenceIdStatement) {
1:a6a6a70:         this.lastProducerSequenceIdStatement = lastProducerSequenceIdStatement;
1:06cbebc:     }
2:a6a6a70: 
1:06cbebc:     public void setSelectDurablePriorityAckStatement(String selectDurablePriorityAckStatement) {
1:06cbebc:         this.selectDurablePriorityAckStatement = selectDurablePriorityAckStatement;
1:06cbebc:     }
1:06cbebc: 
1:06cbebc:     public void setInsertDurablePriorityAckStatement(String insertDurablePriorityAckStatement) {
1:06cbebc:         this.insertDurablePriorityAckStatement = insertDurablePriorityAckStatement;
1:06cbebc:     }
1:06cbebc: 
1:06cbebc:     public void setUpdateDurableLastAckStatement(String updateDurableLastAckStatement) {
1:06cbebc:         this.updateDurableLastAckStatement = updateDurableLastAckStatement;
1:64f3492:     }
1:64f3492: 
1:64f3492:     public void setUpdateXidFlagStatement(String updateXidFlagStatement) {
1:64f3492:         this.updateXidFlagStatement = updateXidFlagStatement;
1:64f3492:     }
1:64f3492: 
1:64f3492:     public void setFindOpsPendingOutcomeStatement(String findOpsPendingOutcomeStatement) {
1:64f3492:         this.findOpsPendingOutcomeStatement = findOpsPendingOutcomeStatement;
1:64f3492:     }
1:64f3492: 
1:64f3492:     public void setClearXidFlagStatement(String clearXidFlagStatement) {
1:64f3492:         this.clearXidFlagStatement = clearXidFlagStatement;
1:64f3492:     }
1:64f3492: 
1:64f3492:     public void setUpdateDurableLastAckInTxStatement(String updateDurableLastAckInTxStatement) {
1:64f3492:         this.updateDurableLastAckInTxStatement = updateDurableLastAckInTxStatement;
1:64f3492:     }
1:64f3492: 
1:64f3492:     public void setFindAcksPendingOutcomeStatement(String findAcksPendingOutcomeStatement) {
1:64f3492:         this.findAcksPendingOutcomeStatement = findAcksPendingOutcomeStatement;
1:64f3492:     }
1:64f3492: 
1:64f3492:     public void setClearDurableLastAckInTxStatement(String clearDurableLastAckInTxStatement) {
1:64f3492:         this.clearDurableLastAckInTxStatement = clearDurableLastAckInTxStatement;
1:64f3492:     }
1:64f3492: 
1:64f3492:     public void setUpdateDurableLastAckWithPriorityStatement(String updateDurableLastAckWithPriorityStatement) {
1:64f3492:         this.updateDurableLastAckWithPriorityStatement = updateDurableLastAckWithPriorityStatement;
1:64f3492:     }
1:64f3492: 
1:64f3492:     public void setUpdateDurableLastAckWithPriorityInTxStatement(String updateDurableLastAckWithPriorityInTxStatement) {
1:64f3492:         this.updateDurableLastAckWithPriorityInTxStatement = updateDurableLastAckWithPriorityInTxStatement;
1:64f3492:     }
1:64f3492: 
1:64f3492:     public void setFindXidByIdStatement(String findXidByIdStatement) {
1:64f3492:         this.findXidByIdStatement = findXidByIdStatement;
1:64f3492:     }
1:dc258ab: 
1:dc258ab:     public void setLeaseObtainStatement(String leaseObtainStatement) {
1:dc258ab:         this.leaseObtainStatement = leaseObtainStatement;
1:dc258ab:     }
1:dc258ab: 
1:dc258ab:     public void setCurrentDateTimeStatement(String currentDateTimeStatement) {
1:dc258ab:         this.currentDateTimeStatement = currentDateTimeStatement;
1:dc258ab:     }
1:dc258ab: 
1:dc258ab:     public void setLeaseUpdateStatement(String leaseUpdateStatement) {
1:dc258ab:         this.leaseUpdateStatement = leaseUpdateStatement;
1:dc258ab:     }
1:dc258ab: 
1:dc258ab:     public void setLeaseOwnerStatement(String leaseOwnerStatement) {
1:dc258ab:         this.leaseOwnerStatement = leaseOwnerStatement;
1:8bc3ee2:     }
1:dc258ab: }
============================================================================
author:Benjamin Graf
-------------------------------------------------------------------------------
commit:8bc3ee2
/////////////////////////////////////////////////////////////////////////
1:                     + ", CONTAINER " + containerNameDataType + " NOT NULL, MSGID_PROD " + msgIdDataType + ", MSGID_SEQ "
/////////////////////////////////////////////////////////////////////////
1:                     + " WHERE CONTAINER IS NOT NULL UNION SELECT DISTINCT CONTAINER FROM " + getFullAckTableName();
/////////////////////////////////////////////////////////////////////////
1: }
author:Hadrian Zbarcea
-------------------------------------------------------------------------------
commit:d54d046
author:gtully
-------------------------------------------------------------------------------
commit:a2697b8
/////////////////////////////////////////////////////////////////////////
1:                                         + " WHERE CONTAINER=? AND ID < ? AND ID > ? AND XID IS NULL ORDER BY ID";
/////////////////////////////////////////////////////////////////////////
1:                                         + " AND ID < ? "
1:                                         + " AND ( (ID > ? AND PRIORITY = 9) "
1:                                         + "    OR (ID > ? AND PRIORITY = 8) "
1:                                         + "    OR (ID > ? AND PRIORITY = 7) "
1:                                         + "    OR (ID > ? AND PRIORITY = 6) "
1:                                         + "    OR (ID > ? AND PRIORITY = 5) "
1:                                         + "    OR (ID > ? AND PRIORITY = 4) "
1:                                         + "    OR (ID > ? AND PRIORITY = 3) "
1:                                         + "    OR (ID > ? AND PRIORITY = 2) "
1:                                         + "    OR (ID > ? AND PRIORITY = 1) "
1:                                         + "    OR (ID > ? AND PRIORITY = 0) )"
commit:eece28a
/////////////////////////////////////////////////////////////////////////
0:                                         + " AND ((ID > ? AND ID < ? AND PRIORITY = ?) OR PRIORITY < ?)"
commit:f2a335c
/////////////////////////////////////////////////////////////////////////
1:     public void setFindAllMessageIdsStatement(String val) {
1:         findAllMessageIdsStatement = val;
1:     }
1: 
/////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////
0:                                         + " AND ((ID > ? AND ID < ? AND PRIORITY >= ?) OR PRIORITY < ?)"
1: 
1:     public void setFindNextMessagesByPriorityStatement(String val) {
1:         findNextMessagesByPriorityStatement = val;
1:     }
1: 
commit:3155c62
/////////////////////////////////////////////////////////////////////////
1:                     + " SET XID = NULL, ID = ? WHERE ID = ?";
commit:6348d11
/////////////////////////////////////////////////////////////////////////
0:                                         + " WHERE CONTAINER=? AND ID > ? AND ID < ? AND XID IS NULL ORDER BY ID";
/////////////////////////////////////////////////////////////////////////
0:                                         + " AND ((ID > ? AND ID < ? AND PRIORITY = ?) OR PRIORITY < ?)"
commit:266d23e
/////////////////////////////////////////////////////////////////////////
1:             updateMessageStatement = "UPDATE " + getFullMessageTableName() + " SET MSG=? WHERE MSGID_PROD=? AND MSGID_SEQ=? AND CONTAINER=?";
commit:efaa351
/////////////////////////////////////////////////////////////////////////
1:     private String[] createLockSchemaStatements;
/////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////
1:         getCreateLockSchemaStatements();
1:         String[] allCreateStatements = new String[createSchemaStatements.length + createLockSchemaStatements.length];
1:         System.arraycopy(createSchemaStatements, 0, allCreateStatements, 0, createSchemaStatements.length);
1:         System.arraycopy(createLockSchemaStatements, 0, allCreateStatements, createSchemaStatements.length, createLockSchemaStatements.length);
1: 
1:         return allCreateStatements;
1:     }
1: 
1:     public String[] getCreateLockSchemaStatements() {
1:         if (createLockSchemaStatements == null) {
1:             createLockSchemaStatements = new String[] {
1:                 "CREATE TABLE " + getFullLockTableName()
1:                     + "( ID " + longDataType + " NOT NULL, TIME " + longDataType
1:                     + ", BROKER_NAME " + stringIdDataType + ", PRIMARY KEY (ID) )",
1:                 "INSERT INTO " + getFullLockTableName() + "(ID) VALUES (1)"
1:             };
1:         }
1:         return createLockSchemaStatements;
/////////////////////////////////////////////////////////////////////////
1:     public void setCreateLockSchemaStatements(String[] createLockSchemaStatments) {
1:         this.createLockSchemaStatements = createLockSchemaStatments;
1:     }
1: 
author:Bosanac Dejan
-------------------------------------------------------------------------------
commit:74ba052
/////////////////////////////////////////////////////////////////////////
1:                 "ALTER TABLE " + getFullMessageTableName() + " ADD XID " + stringIdDataType,
1:                 "ALTER TABLE " + getFullAckTableName() + " ADD XID " + stringIdDataType,
1:                 "CREATE INDEX " + getFullMessageTableName() + "_XIDX ON " + getFullMessageTableName() + " (XID)",
1:                 "CREATE INDEX " + getFullAckTableName() + "_XIDX ON " + getFullAckTableName() + " (XID)"
commit:2677c6b
/////////////////////////////////////////////////////////////////////////
1:                     + sequenceDataType + ", EXPIRATION " + longDataType + ", MSG "
1:                     + ", PRIMARY KEY ( CONTAINER, CLIENT_ID, SUB_NAME))", 
1:                 "ALTER TABLE " + getFullMessageTableName() + " ADD PRIORITY " + sequenceDataType,
1:                 "CREATE INDEX " + getFullMessageTableName() + "_PIDX ON " + getFullMessageTableName() + " (PRIORITY)",
0:                 "ALTER TABLE " + getFullAckTableName() + " ADD PRIORITY " + sequenceDataType,
commit:4f5e620
/////////////////////////////////////////////////////////////////////////
1:     private String findDurableSubMessagesByPriorityStatement;
/////////////////////////////////////////////////////////////////////////
0:                     + ", PRIORITY " + sequenceDataType + ", PRIMARY KEY ( CONTAINER, CLIENT_ID, SUB_NAME))", 
/////////////////////////////////////////////////////////////////////////
1:             findMessageSequenceIdStatement = "SELECT ID, PRIORITY FROM " + getFullMessageTableName()
/////////////////////////////////////////////////////////////////////////
1:                                         + "(CONTAINER, CLIENT_ID, SUB_NAME, SELECTOR, LAST_ACKED_ID, SUB_DEST, PRIORITY) "
1:                                         + "VALUES (?, ?, ?, ?, ?, ?, ?)";
/////////////////////////////////////////////////////////////////////////
0:             updateLastAckOfDurableSubStatement = "UPDATE " + getFullAckTableName() + " SET LAST_ACKED_ID=?, PRIORITY=?"
/////////////////////////////////////////////////////////////////////////
1:     
1:     public String getFindDurableSubMessagesByPriorityStatement() {
1:         if (findDurableSubMessagesByPriorityStatement == null) {
0:             findDurableSubMessagesByPriorityStatement = "SELECT M.ID, M.MSG FROM " + getFullMessageTableName() + " M, "
1:                                               + getFullAckTableName() + " D "
1:                                               + " WHERE D.CONTAINER=? AND D.CLIENT_ID=? AND D.SUB_NAME=?"
0:                                               + " AND M.CONTAINER=D.CONTAINER AND "
0:                                               + "((M.ID > ? AND M.PRIORITY = ?) OR M.PRIORITY < ?)"
1:                                               + " ORDER BY M.PRIORITY DESC, M.ID";
1:         }
1:         return findDurableSubMessagesByPriorityStatement;
1:     }    
commit:12f0195
/////////////////////////////////////////////////////////////////////////
1:     private String findNextMessagesByPriorityStatement;
/////////////////////////////////////////////////////////////////////////
0:                     + sequenceDataType + ", EXPIRATION " + longDataType + ", PRIORITY " + sequenceDataType + ", MSG "
0:                 "CREATE INDEX " + getFullMessageTableName() + "_PIDX ON " + getFullMessageTableName() + " (PRIORITY)",
/////////////////////////////////////////////////////////////////////////
0:                                   + "(ID, MSGID_PROD, MSGID_SEQ, CONTAINER, EXPIRATION, PRIORITY, MSG) VALUES (?, ?, ?, ?, ?, ?, ?)";
/////////////////////////////////////////////////////////////////////////
1:      * @return the findNextMessagesStatement
1:      */
1:     public String getFindNextMessagesByPriorityStatement() {
1:         if (findNextMessagesByPriorityStatement == null) {
1:             findNextMessagesByPriorityStatement = "SELECT ID, MSG FROM " + getFullMessageTableName()
0:                                         + " WHERE CONTAINER=? ORDER BY PRIORITY DESC, ID";
1:         }
1:         return findNextMessagesByPriorityStatement;
1:     }    
1:     
1:     /**
commit:952d036
/////////////////////////////////////////////////////////////////////////
0:                                          + " WHERE ( EXPIRATION<>0 AND EXPIRATION<?) OR ID < "
commit:d22e841
/////////////////////////////////////////////////////////////////////////
1:     private String removeMessageStatement;
/////////////////////////////////////////////////////////////////////////
1:     public String getRemoveMessageStatement() {
1:         if (removeMessageStatement == null) {
1:             removeMessageStatement = "DELETE FROM " + getFullMessageTableName() + " WHERE ID=?";
1:         return removeMessageStatement;
/////////////////////////////////////////////////////////////////////////
1:     public void setRemoveMessageStatment(String removeMessageStatement) {
1:         this.removeMessageStatement = removeMessageStatement;
commit:fd65b82
/////////////////////////////////////////////////////////////////////////
1:         if (findMessageByIdStatement == null) {
1:         	findMessageByIdStatement = "SELECT MSG FROM " + getFullMessageTableName() + " WHERE ID=?";
1:         return findMessageByIdStatement;
/////////////////////////////////////////////////////////////////////////
1:     
1:     public void setFindMessageByIdStatement(String findMessageByIdStatement) {
1:         this.findMessageByIdStatement = findMessageByIdStatement;
1:     }
commit:1cec28c
/////////////////////////////////////////////////////////////////////////
1:     private String findMessageByIdStatement;
/////////////////////////////////////////////////////////////////////////
1:     public String getFindMessageByIdStatement() {
1:         if (findMessageStatement == null) {
0:             findMessageStatement = "SELECT MSG FROM " + getFullMessageTableName() + " WHERE ID=?";
1:         }
1:         return findMessageStatement;
1:     }
1:     
commit:24a7626
/////////////////////////////////////////////////////////////////////////
1:             findMessageStatement = "SELECT MSG FROM " + getFullMessageTableName() + " WHERE MSGID_PROD=? AND MSGID_SEQ=?";
commit:50dc880
/////////////////////////////////////////////////////////////////////////
0:                                         + " WHERE CONTAINER=? AND ID > ? ORDER BY ID";
commit:5170a8b
/////////////////////////////////////////////////////////////////////////
0:                                         + " WHERE CONTAINER=? AND ID >= ? ORDER BY ID";
commit:ae840c4
/////////////////////////////////////////////////////////////////////////
1:                                        + " ORDER BY ID DESC";
commit:5ffcaf4
/////////////////////////////////////////////////////////////////////////
1:     private String findAllMessageIdsStatement;
/////////////////////////////////////////////////////////////////////////
1:     public String getFindAllMessageIdsStatement() {
1:         if (findAllMessageIdsStatement == null) {
1:             findAllMessageIdsStatement = "SELECT ID, MSGID_PROD, MSGID_SEQ FROM " + getFullMessageTableName()
1:         return findAllMessageIdsStatement;
commit:78e7221
/////////////////////////////////////////////////////////////////////////
1:     protected String sequenceDataType = "BIGINT";
author:Hiram R. Chirino
-------------------------------------------------------------------------------
commit:c5cf038
commit:b0c2a40
/////////////////////////////////////////////////////////////////////////
1:  * 
commit:ddd2fa6
/////////////////////////////////////////////////////////////////////////
1:                                                  "DROP TABLE " + getFullMessageTableName() + "",
1:                                                  "DROP TABLE " + getFullLockTableName() + ""};
commit:933eb2f
/////////////////////////////////////////////////////////////////////////
1:     protected boolean useExternalMessageReferences;
1:     private String tablePrefix = "";
/////////////////////////////////////////////////////////////////////////
0:                                                  "DROP TABLE " + getFullMessageTableName() + ""};
commit:74a7a8b
/////////////////////////////////////////////////////////////////////////
1:                 "CREATE TABLE " + getFullMessageTableName() + "(" + "ID " + sequenceDataType + " NOT NULL"
0:                     + ", CONTAINER " + containerNameDataType + ", MSGID_PROD " + msgIdDataType + ", MSGID_SEQ "
0:                     + sequenceDataType + ", EXPIRATION " + longDataType + ", MSG "
1:                     + (useExternalMessageReferences ? stringIdDataType : binaryDataType)
1:                     + ", PRIMARY KEY ( ID ) )",
1:                 "CREATE INDEX " + getFullMessageTableName() + "_MIDX ON " + getFullMessageTableName() + " (MSGID_PROD,MSGID_SEQ)",
1:                 "CREATE INDEX " + getFullMessageTableName() + "_CIDX ON " + getFullMessageTableName() + " (CONTAINER)",
1:                 "CREATE INDEX " + getFullMessageTableName() + "_EIDX ON " + getFullMessageTableName() + " (EXPIRATION)",
1:                 "CREATE TABLE " + getFullAckTableName() + "(" + "CONTAINER " + containerNameDataType + " NOT NULL"
1:                     + ", SUB_DEST " + stringIdDataType 
1:                     + ", CLIENT_ID " + stringIdDataType + " NOT NULL" + ", SUB_NAME " + stringIdDataType
1:                     + " NOT NULL" + ", SELECTOR " + stringIdDataType + ", LAST_ACKED_ID " + sequenceDataType
0:                     + ", PRIMARY KEY ( CONTAINER, CLIENT_ID, SUB_NAME))", 
0:                 "CREATE TABLE " + getFullLockTableName() 
0:                     + "( ID " + longDataType + " NOT NULL, TIME " + longDataType 
0:                     + ", BROKER_NAME " + stringIdDataType + ", PRIMARY KEY (ID) )",
0:                 "INSERT INTO " + getFullLockTableName() + "(ID) VALUES (1)", 
commit:f812e34
/////////////////////////////////////////////////////////////////////////
1:             dropSchemaStatements = new String[] {"DROP TABLE " + getFullAckTableName() + "",
0:                                                  "DROP TABLE " + getFullMessageTableName() + "",};
1:             addMessageStatement = "INSERT INTO "
1:                                   + getFullMessageTableName()
0:                                   + "(ID, MSGID_PROD, MSGID_SEQ, CONTAINER, EXPIRATION, MSG) VALUES (?, ?, ?, ?, ?, ?)";
/////////////////////////////////////////////////////////////////////////
0:                                              + " WHERE MSGID_PROD=? AND MSGID_SEQ=?";
/////////////////////////////////////////////////////////////////////////
1:                                        + " WHERE CONTAINER=? ORDER BY ID";
/////////////////////////////////////////////////////////////////////////
1:             createDurableSubStatement = "INSERT INTO "
1:                                         + getFullAckTableName()
0:                                         + "(CONTAINER, CLIENT_ID, SUB_NAME, SELECTOR, LAST_ACKED_ID, SUB_DEST) "
0:                                         + "VALUES (?, ?, ?, ?, ?, ?)";
/////////////////////////////////////////////////////////////////////////
1:                                       + " WHERE CONTAINER=? AND CLIENT_ID=? AND SUB_NAME=?";
1:             findAllDurableSubsStatement = "SELECT SELECTOR, SUB_NAME, CLIENT_ID, SUB_DEST" + " FROM "
0:                                           + getFullAckTableName() + " WHERE CONTAINER=?";
/////////////////////////////////////////////////////////////////////////
1:                                                  + " WHERE CONTAINER=? AND CLIENT_ID=? AND SUB_NAME=?";
/////////////////////////////////////////////////////////////////////////
1:                                           + " WHERE CONTAINER=? AND CLIENT_ID=? AND SUB_NAME=?";
1:             findAllDurableSubMessagesStatement = "SELECT M.ID, M.MSG FROM " + getFullMessageTableName()
1:                                                  + " M, " + getFullAckTableName() + " D "
1:                                                  + " WHERE D.CONTAINER=? AND D.CLIENT_ID=? AND D.SUB_NAME=?"
1:                                                  + " AND M.CONTAINER=D.CONTAINER AND M.ID > D.LAST_ACKED_ID"
1:                                                  + " ORDER BY M.ID";
1: 
1:     public String getFindDurableSubMessagesStatement() {
1:         if (findDurableSubMessagesStatement == null) {
1:             findDurableSubMessagesStatement = "SELECT M.ID, M.MSG FROM " + getFullMessageTableName() + " M, "
0:                                               + getFullAckTableName() + " D "
1:                                               + " WHERE D.CONTAINER=? AND D.CLIENT_ID=? AND D.SUB_NAME=?"
1:                                               + " AND M.CONTAINER=D.CONTAINER AND M.ID > ?"
1:                                               + " ORDER BY M.ID";
1: 
1:             findAllDurableSubMessagesStatement = "SELECT M.ID, M.MSG FROM " + getFullMessageTableName()
1:                                                  + " M, " + getFullAckTableName() + " D "
1:                                                  + " WHERE D.CONTAINER=? AND D.CLIENT_ID=? AND D.SUB_NAME=?"
1:                                                  + " AND M.CONTAINER=D.CONTAINER AND M.ID > D.LAST_ACKED_ID"
1:                                                  + " ORDER BY M.ID";
1: 
1:     public String getNextDurableSubscriberMessageStatement() {
1:         if (nextDurableSubscriberMessageStatement == null) {
1:             nextDurableSubscriberMessageStatement = "SELECT M.ID, M.MSG FROM "
1:                                                     + getFullMessageTableName()
1:                                                     + " M, "
1:                                                     + getFullAckTableName()
1:                                                     + " D "
1:                                                     + " WHERE D.CONTAINER=? AND D.CLIENT_ID=? AND D.SUB_NAME=?"
1:                                                     + " AND M.CONTAINER=D.CONTAINER AND M.ID > ?"
1:                                                     + " ORDER BY M.ID ";
1: 
1: 
1:     public String getDurableSubscriberMessageCountStatement() {
1:         if (durableSubscriberMessageCountStatement == null) {
1:             durableSubscriberMessageCountStatement = "SELECT COUNT(*) FROM "
1:                                                      + getFullMessageTableName()
1:                                                      + " M, "
1:                                                      + getFullAckTableName()
1:                                                      + " D "
1:                                                      + " WHERE D.CONTAINER=? AND D.CLIENT_ID=? AND D.SUB_NAME=?"
0:                                                      + " AND M.CONTAINER=D.CONTAINER AND M.ID > D.LAST_ACKED_ID";
1: 
1:     public String getFindAllDestinationsStatement() {
/////////////////////////////////////////////////////////////////////////
0:                                          + " WHERE ( EXPIRATION<>0 AND EXPIRATION<?) OR ID <= "
0:                                          + "( SELECT min(" + getFullAckTableName() + ".LAST_ACKED_ID) "
0:                                          + "FROM " + getFullAckTableName() + " WHERE "
0:                                          + getFullAckTableName() + ".CONTAINER=" + getFullMessageTableName()
0:                                          + ".CONTAINER)";
1: 
/////////////////////////////////////////////////////////////////////////
1: 
1: 
1:     public String getDestinationMessageCountStatement() {
1:         if (destinationMessageCountStatement == null) {
1:             destinationMessageCountStatement = "SELECT COUNT(*) FROM " + getFullMessageTableName()
0:                                                + " WHERE CONTAINER=?";
/////////////////////////////////////////////////////////////////////////
1:     public String getFindNextMessagesStatement() {
1:         if (findNextMessagesStatement == null) {
1:             findNextMessagesStatement = "SELECT ID, MSG FROM " + getFullMessageTableName()
0:                                         + " WHERE CONTAINER=? AND ID > ? ORDER BY ID";
1: 
1:     public String getLastAckedDurableSubscriberMessageStatement() {
1:         if (lastAckedDurableSubscriberMessageStatement == null) {
1:             lastAckedDurableSubscriberMessageStatement = "SELECT MAX(LAST_ACKED_ID) FROM "
1:                                                          + getFullAckTableName()
0:                                                          + " WHERE CONTAINER=? AND CLIENT_ID=? AND SUB_NAME=?";
/////////////////////////////////////////////////////////////////////////
1: 
/////////////////////////////////////////////////////////////////////////
1:      * @param containerNameDataType The containerNameDataType to set.
/////////////////////////////////////////////////////////////////////////
1:      * @param messageDataType The messageDataType to set.
/////////////////////////////////////////////////////////////////////////
1:      * @param messageTableName The messageTableName to set.
/////////////////////////////////////////////////////////////////////////
1:      * @param msgIdDataType The msgIdDataType to set.
/////////////////////////////////////////////////////////////////////////
1:      * @param sequenceDataType The sequenceDataType to set.
/////////////////////////////////////////////////////////////////////////
1:      * @param tablePrefix The tablePrefix to set.
/////////////////////////////////////////////////////////////////////////
1:      * @param durableSubAcksTableName The durableSubAcksTableName to set.
1: 
/////////////////////////////////////////////////////////////////////////
1:      * @param findDurableSubMessagesStatement the
1:      *                findDurableSubMessagesStatement to set
1:     public void setFindDurableSubMessagesStatement(String findDurableSubMessagesStatement) {
1:         this.findDurableSubMessagesStatement = findDurableSubMessagesStatement;
1:     public void setNextDurableSubscriberMessageStatement(String nextDurableSubscriberMessageStatement) {
1:         this.nextDurableSubscriberMessageStatement = nextDurableSubscriberMessageStatement;
1:     public void setDurableSubscriberMessageCountStatement(String durableSubscriberMessageCountStatement) {
1:         this.durableSubscriberMessageCountStatement = durableSubscriberMessageCountStatement;
1:     }
1: 
1:     public void setFindNextMessagesStatement(String findNextMessagesStatement) {
1:         this.findNextMessagesStatement = findNextMessagesStatement;
1:     public void setDestinationMessageCountStatement(String destinationMessageCountStatement) {
1:         this.destinationMessageCountStatement = destinationMessageCountStatement;
1:     public void setLastAckedDurableSubscriberMessageStatement(
1:                                                               String lastAckedDurableSubscriberMessageStatement) {
1:         this.lastAckedDurableSubscriberMessageStatement = lastAckedDurableSubscriberMessageStatement;
1: 
commit:230a86c
/////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////
1:  *      http://www.apache.org/licenses/LICENSE-2.0
commit:2728ccb
/////////////////////////////////////////////////////////////////////////
0:                             + ", SUB_DEST " + stringIdDataType 
/////////////////////////////////////////////////////////////////////////
0:                     + "(CONTAINER, CLIENT_ID, SUB_NAME, SELECTOR, LAST_ACKED_ID, SUB_DEST) " + "VALUES (?, ?, ?, ?, ?, ?)";
1:             findDurableSubStatement = "SELECT SELECTOR, SUB_DEST " + "FROM " + getFullAckTableName()
/////////////////////////////////////////////////////////////////////////
0:             findAllDurableSubsStatement = "SELECT SELECTOR, SUB_NAME, CLIENT_ID, SUB_DEST" + " FROM " + getFullAckTableName()
commit:86cbdfd
/////////////////////////////////////////////////////////////////////////
1: }
commit:57b4941
/////////////////////////////////////////////////////////////////////////
1:  * Licensed to the Apache Software Foundation (ASF) under one or more
1:  * contributor license agreements.  See the NOTICE file distributed with
1:  * this work for additional information regarding copyright ownership.
1:  * The ASF licenses this file to You under the Apache License, Version 2.0
1:  * (the "License"); you may not use this file except in compliance with
1:  * the License.  You may obtain a copy of the License at
commit:5bd451b
/////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////
commit:4843dd4
/////////////////////////////////////////////////////////////////////////
1: /**
1:  *
0:  * Copyright 2005-2006 The Apache Software Foundation
1:  *
0:  * Licensed under the Apache License, Version 2.0 (the "License");
0:  * you may not use this file except in compliance with the License.
0:  * You may obtain a copy of the License at
1:  *
0:  * http://www.apache.org/licenses/LICENSE-2.0
1:  *
1:  * Unless required by applicable law or agreed to in writing, software
1:  * distributed under the License is distributed on an "AS IS" BASIS,
1:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:  * See the License for the specific language governing permissions and
1:  * limitations under the License.
1:  */
1: package org.apache.activemq.store.jdbc;
1: 
1: /**
0:  * @version $Revision: 1.4 $
1:  * 
1:  * @org.apache.xbean.XBean element="statements"
1:  * 
1:  */
1: public class Statements {
1: 
0:     private String tablePrefix = "";
1:     protected String messageTableName = "ACTIVEMQ_MSGS";
1:     protected String durableSubAcksTableName = "ACTIVEMQ_ACKS";
1: 
1:     protected String binaryDataType = "BLOB";
1:     protected String containerNameDataType = "VARCHAR(250)";
0:     protected String xidDataType = "VARCHAR(250)";
1:     protected String msgIdDataType = "VARCHAR(250)";
0:     protected String sequenceDataType = "INTEGER";
1:     protected String longDataType = "BIGINT";
1:     protected String stringIdDataType = "VARCHAR(250)";
1: 
0:     protected boolean useExternalMessageReferences = false;
1: 
1:     private String addMessageStatement;
1:     private String updateMessageStatement;
0:     private String removeMessageStatment;
1:     private String findMessageSequenceIdStatement;
1:     private String findMessageStatement;
1:     private String findAllMessagesStatement;
1:     private String findLastSequenceIdInMsgsStatement;
1:     private String findLastSequenceIdInAcksStatement;
1:     private String createDurableSubStatement;
1:     private String findDurableSubStatement;
1:     private String findAllDurableSubsStatement;
0:     private String updateLastAckOfDurableSubStatement;
1:     private String deleteSubscriptionStatement;
1:     private String findAllDurableSubMessagesStatement;
1:     private String findAllDestinationsStatement;
1:     private String removeAllMessagesStatement;
1:     private String removeAllSubscriptionsStatement;
0:     private String deleteOldMessagesStatement;
1:     private String[] createSchemaStatements;
1:     private String[] dropSchemaStatements;
1: 
1:     public String[] getCreateSchemaStatements() {
1:         if (createSchemaStatements == null) {
1:             createSchemaStatements = new String[] {
0:                     "CREATE TABLE " + getFullMessageTableName() + "(" + "ID " + sequenceDataType + " NOT NULL"
0:                             + ", CONTAINER " + containerNameDataType + ", MSGID_PROD " + msgIdDataType + ", MSGID_SEQ "
0:                             + sequenceDataType + ", EXPIRATION " + longDataType + ", MSG "
0:                             + (useExternalMessageReferences ? stringIdDataType : binaryDataType)
0:                             + ", PRIMARY KEY ( ID ) )",
0:                     "CREATE INDEX " + getFullMessageTableName() + "_MIDX ON " + getFullMessageTableName()
0:                             + " (MSGID_PROD,MSGID_SEQ)",
0:                     "CREATE INDEX " + getFullMessageTableName() + "_CIDX ON " + getFullMessageTableName()
0:                             + " (CONTAINER)",
0:                     "CREATE INDEX " + getFullMessageTableName() + "_EIDX ON " + getFullMessageTableName()
0:                             + " (EXPIRATION)",
0:                     "CREATE TABLE " + getFullAckTableName() + "(" + "CONTAINER " + containerNameDataType + " NOT NULL"
0:                             + ", CLIENT_ID " + stringIdDataType + " NOT NULL" + ", SUB_NAME " + stringIdDataType
0:                             + " NOT NULL" + ", SELECTOR " + stringIdDataType + ", LAST_ACKED_ID " + sequenceDataType
0:                             + ", PRIMARY KEY ( CONTAINER, CLIENT_ID, SUB_NAME))", };
1:         }
0:         return createSchemaStatements;
1:     }
1: 
1:     public String[] getDropSchemaStatements() {
1:         if (dropSchemaStatements == null) {
0:             dropSchemaStatements = new String[] { "DROP TABLE " + getFullAckTableName() + "",
0:                     "DROP TABLE " + getFullMessageTableName() + "", };
1:         }
1:         return dropSchemaStatements;
1:     }
1: 
1:     public String getAddMessageStatement() {
1:         if (addMessageStatement == null) {
0:             addMessageStatement = "INSERT INTO " + getFullMessageTableName()
0:                     + "(ID, MSGID_PROD, MSGID_SEQ, CONTAINER, EXPIRATION, MSG) VALUES (?, ?, ?, ?, ?, ?)";
1:         }
1:         return addMessageStatement;
1:     }
1: 
1:     public String getUpdateMessageStatement() {
1:         if (updateMessageStatement == null) {
0:             updateMessageStatement = "UPDATE " + getFullMessageTableName() + " SET MSG=? WHERE ID=?";
1:         }
1:         return updateMessageStatement;
1:     }
1: 
0:     public String getRemoveMessageStatment() {
0:         if (removeMessageStatment == null) {
0:             removeMessageStatment = "DELETE FROM " + getFullMessageTableName() + " WHERE ID=?";
1:         }
0:         return removeMessageStatment;
1:     }
1: 
1:     public String getFindMessageSequenceIdStatement() {
1:         if (findMessageSequenceIdStatement == null) {
0:             findMessageSequenceIdStatement = "SELECT ID FROM " + getFullMessageTableName()
0:                     + " WHERE MSGID_PROD=? AND MSGID_SEQ=?";
1:         }
1:         return findMessageSequenceIdStatement;
1:     }
1: 
1:     public String getFindMessageStatement() {
0:         if (findMessageStatement == null) {
0:             findMessageStatement = "SELECT MSG FROM " + getFullMessageTableName() + " WHERE ID=?";
1:         }
0:         return findMessageStatement;
1:     }
1: 
1:     public String getFindAllMessagesStatement() {
1:         if (findAllMessagesStatement == null) {
1:             findAllMessagesStatement = "SELECT ID, MSG FROM " + getFullMessageTableName()
0:                     + " WHERE CONTAINER=? ORDER BY ID";
1:         }
1:         return findAllMessagesStatement;
1:     }
1: 
1:     public String getFindLastSequenceIdInMsgsStatement() {
1:         if (findLastSequenceIdInMsgsStatement == null) {
1:             findLastSequenceIdInMsgsStatement = "SELECT MAX(ID) FROM " + getFullMessageTableName();
1:         }
1:         return findLastSequenceIdInMsgsStatement;
1:     }
1: 
1:     public String getFindLastSequenceIdInAcksStatement() {
1:         if (findLastSequenceIdInAcksStatement == null) {
1:             findLastSequenceIdInAcksStatement = "SELECT MAX(LAST_ACKED_ID) FROM " + getFullAckTableName();
1:         }
1:         return findLastSequenceIdInAcksStatement;
1:     }
1: 
1:     public String getCreateDurableSubStatement() {
1:         if (createDurableSubStatement == null) {
0:             createDurableSubStatement = "INSERT INTO " + getFullAckTableName()
0:                     + "(CONTAINER, CLIENT_ID, SUB_NAME, SELECTOR, LAST_ACKED_ID) " + "VALUES (?, ?, ?, ?, ?)";
1:         }
1:         return createDurableSubStatement;
1:     }
1: 
1:     public String getFindDurableSubStatement() {
1:         if (findDurableSubStatement == null) {
0:             findDurableSubStatement = "SELECT SELECTOR, SUB_NAME " + "FROM " + getFullAckTableName()
0:                     + " WHERE CONTAINER=? AND CLIENT_ID=? AND SUB_NAME=?";
1:         }
1:         return findDurableSubStatement;
1:     }
1: 
1:     public String getFindAllDurableSubsStatement() {
1:         if (findAllDurableSubsStatement == null) {
0:             findAllDurableSubsStatement = "SELECT SELECTOR, SUB_NAME, CLIENT_ID" + " FROM " + getFullAckTableName()
0:                     + " WHERE CONTAINER=?";
1:         }
1:         return findAllDurableSubsStatement;
1:     }
1: 
0:     public String getUpdateLastAckOfDurableSubStatement() {
0:         if (updateLastAckOfDurableSubStatement == null) {
0:             updateLastAckOfDurableSubStatement = "UPDATE " + getFullAckTableName() + " SET LAST_ACKED_ID=?"
0:                     + " WHERE CONTAINER=? AND CLIENT_ID=? AND SUB_NAME=?";
1:         }
0:         return updateLastAckOfDurableSubStatement;
1:     }
1: 
1:     public String getDeleteSubscriptionStatement() {
1:         if (deleteSubscriptionStatement == null) {
1:             deleteSubscriptionStatement = "DELETE FROM " + getFullAckTableName()
0:                     + " WHERE CONTAINER=? AND CLIENT_ID=? AND SUB_NAME=?";
1:         }
1:         return deleteSubscriptionStatement;
1:     }
1: 
1:     public String getFindAllDurableSubMessagesStatement() {
1:         if (findAllDurableSubMessagesStatement == null) {
0:             findAllDurableSubMessagesStatement = "SELECT M.ID, M.MSG FROM " + getFullMessageTableName() + " M, "
0:                     + getFullAckTableName() + " D " + " WHERE D.CONTAINER=? AND D.CLIENT_ID=? AND D.SUB_NAME=?"
0:                     + " AND M.CONTAINER=D.CONTAINER AND M.ID > D.LAST_ACKED_ID" + " ORDER BY M.ID";
1:         }
1:         return findAllDurableSubMessagesStatement;
1:     }
1: 
0:     public String getFindAllDestinationsStatement() {
1:         if (findAllDestinationsStatement == null) {
0:             findAllDestinationsStatement = "SELECT DISTINCT CONTAINER FROM " + getFullMessageTableName();
1:         }
1:         return findAllDestinationsStatement;
1:     }
1: 
1:     public String getRemoveAllMessagesStatement() {
1:         if (removeAllMessagesStatement == null) {
1:             removeAllMessagesStatement = "DELETE FROM " + getFullMessageTableName() + " WHERE CONTAINER=?";
1:         }
1:         return removeAllMessagesStatement;
1:     }
1: 
1:     public String getRemoveAllSubscriptionsStatement() {
1:         if (removeAllSubscriptionsStatement == null) {
1:             removeAllSubscriptionsStatement = "DELETE FROM " + getFullAckTableName() + " WHERE CONTAINER=?";
1:         }
1:         return removeAllSubscriptionsStatement;
1:     }
1: 
0:     public String getDeleteOldMessagesStatement() {
0:         if (deleteOldMessagesStatement == null) {
0:             deleteOldMessagesStatement = "DELETE FROM " + getFullMessageTableName()
0:                     + " WHERE ( EXPIRATION<>0 AND EXPIRATION<?) OR ID <= " + "( SELECT min(" + getFullAckTableName()
0:                     + ".LAST_ACKED_ID) " + "FROM " + getFullAckTableName() + " WHERE " + getFullAckTableName()
0:                     + ".CONTAINER=" + getFullMessageTableName() + ".CONTAINER)";
1:         }
0:         return deleteOldMessagesStatement;
1:     }
1: 
1:     public String getFullMessageTableName() {
1:         return getTablePrefix() + getMessageTableName();
1:     }
1: 
1:     public String getFullAckTableName() {
1:         return getTablePrefix() + getDurableSubAcksTableName();
1:     }
1: 
1:     /**
1:      * @return Returns the containerNameDataType.
1:      */
1:     public String getContainerNameDataType() {
1:         return containerNameDataType;
1:     }
1: 
1:     /**
0:      * @param containerNameDataType
0:      *            The containerNameDataType to set.
1:      */
1:     public void setContainerNameDataType(String containerNameDataType) {
1:         this.containerNameDataType = containerNameDataType;
1:     }
1: 
1:     /**
1:      * @return Returns the messageDataType.
1:      */
1:     public String getBinaryDataType() {
1:         return binaryDataType;
1:     }
1: 
1:     /**
0:      * @param messageDataType
0:      *            The messageDataType to set.
1:      */
1:     public void setBinaryDataType(String messageDataType) {
1:         this.binaryDataType = messageDataType;
1:     }
1: 
1:     /**
1:      * @return Returns the messageTableName.
1:      */
1:     public String getMessageTableName() {
1:         return messageTableName;
1:     }
1: 
1:     /**
0:      * @param messageTableName
0:      *            The messageTableName to set.
1:      */
1:     public void setMessageTableName(String messageTableName) {
1:         this.messageTableName = messageTableName;
1:     }
1: 
1:     /**
1:      * @return Returns the msgIdDataType.
1:      */
1:     public String getMsgIdDataType() {
1:         return msgIdDataType;
1:     }
1: 
1:     /**
0:      * @param msgIdDataType
0:      *            The msgIdDataType to set.
1:      */
1:     public void setMsgIdDataType(String msgIdDataType) {
1:         this.msgIdDataType = msgIdDataType;
1:     }
1: 
1:     /**
1:      * @return Returns the sequenceDataType.
1:      */
1:     public String getSequenceDataType() {
1:         return sequenceDataType;
1:     }
1: 
1:     /**
0:      * @param sequenceDataType
0:      *            The sequenceDataType to set.
1:      */
1:     public void setSequenceDataType(String sequenceDataType) {
1:         this.sequenceDataType = sequenceDataType;
1:     }
1: 
1:     /**
1:      * @return Returns the tablePrefix.
1:      */
1:     public String getTablePrefix() {
1:         return tablePrefix;
1:     }
1: 
1:     /**
0:      * @param tablePrefix
0:      *            The tablePrefix to set.
1:      */
1:     public void setTablePrefix(String tablePrefix) {
1:         this.tablePrefix = tablePrefix;
1:     }
1: 
1:     /**
0:      * @return Returns the xidDataType.
1:      */
0:     public String getXidDataType() {
0:         return xidDataType;
1:     }
1: 
1:     /**
0:      * @param xidDataType
0:      *            The xidDataType to set.
1:      */
0:     public void setXidDataType(String xidDataType) {
0:         this.xidDataType = xidDataType;
1:     }
1: 
1:     /**
1:      * @return Returns the durableSubAcksTableName.
1:      */
1:     public String getDurableSubAcksTableName() {
1:         return durableSubAcksTableName;
1:     }
1: 
1:     /**
0:      * @param durableSubAcksTableName
0:      *            The durableSubAcksTableName to set.
1:      */
1:     public void setDurableSubAcksTableName(String durableSubAcksTableName) {
1:         this.durableSubAcksTableName = durableSubAcksTableName;
1:     }
1: 
1:     public String getLongDataType() {
1:         return longDataType;
1:     }
1: 
1:     public void setLongDataType(String longDataType) {
1:         this.longDataType = longDataType;
1:     }
1: 
1:     public String getStringIdDataType() {
1:         return stringIdDataType;
1:     }
1: 
1:     public void setStringIdDataType(String stringIdDataType) {
1:         this.stringIdDataType = stringIdDataType;
1:     }
1: 
1:     public void setUseExternalMessageReferences(boolean useExternalMessageReferences) {
1:         this.useExternalMessageReferences = useExternalMessageReferences;
1:     }
1: 
1:     public boolean isUseExternalMessageReferences() {
1:         return useExternalMessageReferences;
1:     }
1: 
1:     public void setAddMessageStatement(String addMessageStatment) {
1:         this.addMessageStatement = addMessageStatment;
1:     }
1: 
1:     public void setCreateDurableSubStatement(String createDurableSubStatment) {
1:         this.createDurableSubStatement = createDurableSubStatment;
1:     }
1: 
1:     public void setCreateSchemaStatements(String[] createSchemaStatments) {
1:         this.createSchemaStatements = createSchemaStatments;
1:     }
1: 
0:     public void setDeleteOldMessagesStatement(String deleteOldMessagesStatment) {
0:         this.deleteOldMessagesStatement = deleteOldMessagesStatment;
1:     }
1: 
1:     public void setDeleteSubscriptionStatement(String deleteSubscriptionStatment) {
1:         this.deleteSubscriptionStatement = deleteSubscriptionStatment;
1:     }
1: 
1:     public void setDropSchemaStatements(String[] dropSchemaStatments) {
1:         this.dropSchemaStatements = dropSchemaStatments;
1:     }
1: 
1:     public void setFindAllDestinationsStatement(String findAllDestinationsStatment) {
1:         this.findAllDestinationsStatement = findAllDestinationsStatment;
1:     }
1: 
1:     public void setFindAllDurableSubMessagesStatement(String findAllDurableSubMessagesStatment) {
1:         this.findAllDurableSubMessagesStatement = findAllDurableSubMessagesStatment;
1:     }
1: 
1:     public void setFindAllDurableSubsStatement(String findAllDurableSubsStatment) {
1:         this.findAllDurableSubsStatement = findAllDurableSubsStatment;
1:     }
1: 
1:     public void setFindAllMessagesStatement(String findAllMessagesStatment) {
1:         this.findAllMessagesStatement = findAllMessagesStatment;
1:     }
1: 
1:     public void setFindDurableSubStatement(String findDurableSubStatment) {
1:         this.findDurableSubStatement = findDurableSubStatment;
1:     }
1: 
1:     public void setFindLastSequenceIdInAcksStatement(String findLastSequenceIdInAcks) {
1:         this.findLastSequenceIdInAcksStatement = findLastSequenceIdInAcks;
1:     }
1: 
1:     public void setFindLastSequenceIdInMsgsStatement(String findLastSequenceIdInMsgs) {
1:         this.findLastSequenceIdInMsgsStatement = findLastSequenceIdInMsgs;
1:     }
1: 
1:     public void setFindMessageSequenceIdStatement(String findMessageSequenceIdStatment) {
1:         this.findMessageSequenceIdStatement = findMessageSequenceIdStatment;
1:     }
1: 
1:     public void setFindMessageStatement(String findMessageStatment) {
1:         this.findMessageStatement = findMessageStatment;
1:     }
1: 
1:     public void setRemoveAllMessagesStatement(String removeAllMessagesStatment) {
1:         this.removeAllMessagesStatement = removeAllMessagesStatment;
1:     }
1: 
1:     public void setRemoveAllSubscriptionsStatement(String removeAllSubscriptionsStatment) {
1:         this.removeAllSubscriptionsStatement = removeAllSubscriptionsStatment;
1:     }
1: 
0:     public void setRemoveMessageStatment(String removeMessageStatment) {
0:         this.removeMessageStatment = removeMessageStatment;
1:     }
1: 
0:     public void setUpdateLastAckOfDurableSubStatement(String updateLastAckOfDurableSub) {
0:         this.updateLastAckOfDurableSubStatement = updateLastAckOfDurableSub;
1:     }
1: 
1:     public void setUpdateMessageStatement(String updateMessageStatment) {
1:         this.updateMessageStatement = updateMessageStatment;
1:     }
1: 
1: }
author:Gary Tully
-------------------------------------------------------------------------------
commit:dc258ab
/////////////////////////////////////////////////////////////////////////
1:     private String leaseObtainStatement;
1:     private String currentDateTimeStatement;
1:     private String leaseUpdateStatement;
1:     private String leaseOwnerStatement;
/////////////////////////////////////////////////////////////////////////
0:                     + "( ID " + longDataType + " NOT NULL, TIME " + longDataType
0:                 "INSERT INTO " + getFullLockTableName() + "(ID) VALUES (1)",
/////////////////////////////////////////////////////////////////////////
1:     public String getLeaseObtainStatement() {
1:         if (leaseObtainStatement == null) {
1:             leaseObtainStatement = "UPDATE " + getFullLockTableName()
1:                     + " SET BROKER_NAME=?, TIME=?"
1:                     + " WHERE (TIME IS NULL OR TIME < ?) AND ID = 1";
1:         }
1:         return leaseObtainStatement;
1:     }
1: 
1:     public String getCurrentDateTime() {
1:         if (currentDateTimeStatement == null) {
1:             currentDateTimeStatement = "SELECT CURRENT_TIMESTAMP FROM " + getFullLockTableName();
1:         }
1:         return currentDateTimeStatement;
1:     }
1: 
1:     public String getLeaseUpdateStatement() {
1:         if (leaseUpdateStatement == null) {
1:             leaseUpdateStatement = "UPDATE " + getFullLockTableName()
1:                     + " SET BROKER_NAME=?, TIME=?"
1:                     + " WHERE BROKER_NAME=? AND ID = 1";
1:         }
1:         return leaseUpdateStatement;
1:     }
1: 
1:     public String getLeaseOwnerStatement() {
1:         if (leaseOwnerStatement == null) {
1:             leaseOwnerStatement = "SELECT BROKER_NAME, TIME FROM " + getFullLockTableName()
1:                     + " WHERE ID = 1";
1:         }
1:         return leaseOwnerStatement;
1:     }
1: 
/////////////////////////////////////////////////////////////////////////
1: 
1:     public void setLeaseObtainStatement(String leaseObtainStatement) {
1:         this.leaseObtainStatement = leaseObtainStatement;
1:     }
1: 
1:     public void setCurrentDateTimeStatement(String currentDateTimeStatement) {
1:         this.currentDateTimeStatement = currentDateTimeStatement;
1:     }
1: 
1:     public void setLeaseUpdateStatement(String leaseUpdateStatement) {
1:         this.leaseUpdateStatement = leaseUpdateStatement;
1:     }
1: 
1:     public void setLeaseOwnerStatement(String leaseOwnerStatement) {
1:         this.leaseOwnerStatement = leaseOwnerStatement;
1:     }
commit:64f3492
/////////////////////////////////////////////////////////////////////////
1:     private String updateXidFlagStatement;
1:     private String findOpsPendingOutcomeStatement;
1:     private String clearXidFlagStatement;
1:     private String updateDurableLastAckInTxStatement;
1:     private String findAcksPendingOutcomeStatement;
1:     private String clearDurableLastAckInTxStatement;
1:     private String updateDurableLastAckWithPriorityStatement;
1:     private String updateDurableLastAckWithPriorityInTxStatement;
1:     private String findXidByIdStatement;
/////////////////////////////////////////////////////////////////////////
0:                 "ALTER TABLE " + getFullMessageTableName() + " ADD XID " + binaryDataType,
0:                 "ALTER TABLE " + getFullAckTableName() + " ADD XID " + binaryDataType,
/////////////////////////////////////////////////////////////////////////
1:                                   + "(ID, MSGID_PROD, MSGID_SEQ, CONTAINER, EXPIRATION, PRIORITY, MSG, XID) VALUES (?, ?, ?, ?, ?, ?, ?, ?)";
/////////////////////////////////////////////////////////////////////////
1: 
1:     public String getFindXidByIdStatement() {
1:         if (findXidByIdStatement == null) {
1:             findXidByIdStatement = "SELECT XID FROM " + getFullMessageTableName() + " WHERE ID=?";
1:         }
1:         return findXidByIdStatement;
1:     }
1: 
/////////////////////////////////////////////////////////////////////////
1:                                               + " AND M.XID IS NULL"
/////////////////////////////////////////////////////////////////////////
1:                                               + " AND M.XID IS NULL"
/////////////////////////////////////////////////////////////////////////
1:                                                + " WHERE CONTAINER=? AND XID IS NULL";
/////////////////////////////////////////////////////////////////////////
0:                                         + " WHERE CONTAINER=? AND ID > ? AND XID IS NULL ORDER BY ID";
/////////////////////////////////////////////////////////////////////////
1:                                         + " AND XID IS NULL"
/////////////////////////////////////////////////////////////////////////
1:                     + " SET LAST_ACKED_ID=?, XID = NULL WHERE CONTAINER=? AND CLIENT_ID=? AND SUB_NAME=?";
1:     public String getUpdateDurableLastAckInTxStatement() {
1:         if (updateDurableLastAckInTxStatement == null) {
1:             updateDurableLastAckInTxStatement = "UPDATE " + getFullAckTableName()
1:                     + " SET XID=? WHERE CONTAINER=? AND CLIENT_ID=? AND SUB_NAME=?";
1:         }
1:         return updateDurableLastAckInTxStatement;
1:     }
1: 
1:     public String getUpdateDurableLastAckWithPriorityStatement() {
1:         if (updateDurableLastAckWithPriorityStatement == null) {
1:             updateDurableLastAckWithPriorityStatement  = "UPDATE " + getFullAckTableName()
1:                     + " SET LAST_ACKED_ID=?, XID = NULL WHERE CONTAINER=? AND CLIENT_ID=? AND SUB_NAME=? AND PRIORITY=?";
1:         }
1:         return  updateDurableLastAckWithPriorityStatement;
1:     }
1: 
1:     public String getUpdateDurableLastAckWithPriorityInTxStatement() {
1:         if (updateDurableLastAckWithPriorityInTxStatement == null) {
1:             updateDurableLastAckWithPriorityInTxStatement  = "UPDATE " + getFullAckTableName()
1:                     + " SET XID=? WHERE CONTAINER=? AND CLIENT_ID=? AND SUB_NAME=? AND PRIORITY=?";
1:         }
1:         return  updateDurableLastAckWithPriorityInTxStatement;
1:     }
1: 
1:     public String getClearDurableLastAckInTxStatement() {
1:         if (clearDurableLastAckInTxStatement == null) {
1:             clearDurableLastAckInTxStatement = "UPDATE " + getFullAckTableName()
1:                     + " SET XID = NULL WHERE CONTAINER=? AND CLIENT_ID=? AND SUB_NAME=? AND PRIORITY=?";
1:         }
1:         return clearDurableLastAckInTxStatement;
1:     }
1: 
1:     public String getFindOpsPendingOutcomeStatement() {
1:         if (findOpsPendingOutcomeStatement == null) {
1:             findOpsPendingOutcomeStatement = "SELECT ID, XID, MSG FROM " + getFullMessageTableName()
1:                     + " WHERE XID IS NOT NULL ORDER BY ID";
1:         }
1:         return findOpsPendingOutcomeStatement;
1:     }
1: 
1:     public String getFindAcksPendingOutcomeStatement() {
1:         if (findAcksPendingOutcomeStatement == null) {
1:             findAcksPendingOutcomeStatement = "SELECT XID," +
1:                     " CONTAINER, CLIENT_ID, SUB_NAME FROM " + getFullAckTableName()
1:                     + " WHERE XID IS NOT NULL";
1:         }
1:         return findAcksPendingOutcomeStatement;
1:     }
1: 
1:     public String getUpdateXidFlagStatement() {
1:         if (updateXidFlagStatement == null) {
1:             updateXidFlagStatement = "UPDATE " + getFullMessageTableName()
1:                     + " SET XID = ? WHERE ID = ?";
1:         }
1:         return updateXidFlagStatement;
1:     }
1: 
1:     public String getClearXidFlagStatement() {
1:         if (clearXidFlagStatement == null) {
1:             clearXidFlagStatement = "UPDATE "  + getFullMessageTableName()
0:                     + " SET XID = NULL WHERE ID = ?";
1:         }
1:         return clearXidFlagStatement;
1:     }
1: 
/////////////////////////////////////////////////////////////////////////
1:     }
1: 
1:     public void setUpdateXidFlagStatement(String updateXidFlagStatement) {
1:         this.updateXidFlagStatement = updateXidFlagStatement;
1:     }
1: 
1:     public void setFindOpsPendingOutcomeStatement(String findOpsPendingOutcomeStatement) {
1:         this.findOpsPendingOutcomeStatement = findOpsPendingOutcomeStatement;
1:     }
1: 
1:     public void setClearXidFlagStatement(String clearXidFlagStatement) {
1:         this.clearXidFlagStatement = clearXidFlagStatement;
1:     }
1: 
1:     public void setUpdateDurableLastAckInTxStatement(String updateDurableLastAckInTxStatement) {
1:         this.updateDurableLastAckInTxStatement = updateDurableLastAckInTxStatement;
1:     }
1: 
1:     public void setFindAcksPendingOutcomeStatement(String findAcksPendingOutcomeStatement) {
1:         this.findAcksPendingOutcomeStatement = findAcksPendingOutcomeStatement;
1:     }
1: 
1:     public void setClearDurableLastAckInTxStatement(String clearDurableLastAckInTxStatement) {
1:         this.clearDurableLastAckInTxStatement = clearDurableLastAckInTxStatement;
1:     }
1: 
1:     public void setUpdateDurableLastAckWithPriorityStatement(String updateDurableLastAckWithPriorityStatement) {
1:         this.updateDurableLastAckWithPriorityStatement = updateDurableLastAckWithPriorityStatement;
1:     }
1: 
1:     public void setUpdateDurableLastAckWithPriorityInTxStatement(String updateDurableLastAckWithPriorityInTxStatement) {
1:         this.updateDurableLastAckWithPriorityInTxStatement = updateDurableLastAckWithPriorityInTxStatement;
1:     }
1: 
1:     public void setFindXidByIdStatement(String findXidByIdStatement) {
1:         this.findXidByIdStatement = findXidByIdStatement;
1:     }
commit:9d15861
/////////////////////////////////////////////////////////////////////////
0:                     + " UNION SELECT DISTINCT CONTAINER FROM "  + getFullAckTableName();
commit:b6f63b0
/////////////////////////////////////////////////////////////////////////
1:             findAllDestinationsStatement = "SELECT DISTINCT CONTAINER FROM " + getFullMessageTableName()
0:                     + " UNION DISTINCT SELECT DISTINCT CONTAINER FROM "  + getFullAckTableName();
commit:ab12a60
/////////////////////////////////////////////////////////////////////////
0:             findAllDestinationsStatement = "SELECT DISTINCT CONTAINER FROM " + getFullMessageTableName();
commit:fe31092
/////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////
1:                                          + " WHERE (PRIORITY=? AND ID <= "
1:                                          + "        AND " + getFullAckTableName() + ".PRIORITY=?)"
/////////////////////////////////////////////////////////////////////////
1:     public void setDeleteOldMessagesStatementWithPriority(String deleteOldMessagesStatementWithPriority) {
1:         this.deleteOldMessagesStatementWithPriority = deleteOldMessagesStatementWithPriority;
commit:cb96783
/////////////////////////////////////////////////////////////////////////
1:             findDurableSubMessagesByPriorityStatement = "SELECT M.ID, M.MSG FROM " + getFullMessageTableName() + " M,"
1:                                               + " " + getFullAckTableName() + " D"
1:                                               + " AND M.ID > ? AND M.PRIORITY = ?"
0:                                               + " ORDER BY M.ID";
commit:9c76857
/////////////////////////////////////////////////////////////////////////
1:     private String dropAckPKAlterStatementEnd;
/////////////////////////////////////////////////////////////////////////
1:                 "ALTER TABLE " + getFullAckTableName() + " " + getDropAckPKAlterStatementEnd(),
1:     public String getDropAckPKAlterStatementEnd() {
1:         if (dropAckPKAlterStatementEnd == null) {
1:             dropAckPKAlterStatementEnd = "DROP PRIMARY KEY";
1:         }
1:         return dropAckPKAlterStatementEnd;
1:     }
1: 
1:     public void setDropAckPKAlterStatementEnd(String dropAckPKAlterStatementEnd) {
1:         this.dropAckPKAlterStatementEnd = dropAckPKAlterStatementEnd;
1:     }
1: 
commit:8191f19
/////////////////////////////////////////////////////////////////////////
1:                                               + " AND M.ID > ?"
/////////////////////////////////////////////////////////////////////////
0:                                               + " AND ( (M.ID > ?) OR (M.PRIORITY < ?) )" 
/////////////////////////////////////////////////////////////////////////
0:             findAllDestinationsStatement = "SELECT DISTINCT CONTAINER FROM " + getFullAckTableName();
commit:fc81559
/////////////////////////////////////////////////////////////////////////
1:                 "ALTER TABLE " + getFullAckTableName() + " ADD PRIORITY " + sequenceDataType  + " DEFAULT 5 NOT NULL",
commit:fa4481c
/////////////////////////////////////////////////////////////////////////
1:     private String updateLastPriorityAckRowOfDurableSubStatement;
/////////////////////////////////////////////////////////////////////////
1:     private String deleteOldMessagesStatementWithPriority;
1:     private String durableSubscriberMessageCountStatementWithPriority;
/////////////////////////////////////////////////////////////////////////
0:                                       + " WHERE CONTAINER=? AND CLIENT_ID=? AND SUB_NAME=?";
/////////////////////////////////////////////////////////////////////////
1:                                           + getFullAckTableName() + " WHERE CONTAINER=? AND PRIORITY=0";
1:     public String getUpdateLastPriorityAckRowOfDurableSubStatement() {
1:         if (updateLastPriorityAckRowOfDurableSubStatement == null) {
1:             updateLastPriorityAckRowOfDurableSubStatement = "UPDATE " + getFullAckTableName() + " SET LAST_ACKED_ID=?"
1:         return updateLastPriorityAckRowOfDurableSubStatement;
/////////////////////////////////////////////////////////////////////////
0:                                                  + " ORDER BY M.PRIORITY DESC, M.ID";
/////////////////////////////////////////////////////////////////////////
0:                                               + " AND M.CONTAINER=D.CONTAINER AND M.ID > D.LAST_ACKED_ID"
/////////////////////////////////////////////////////////////////////////
1:                                               + " AND M.CONTAINER=D.CONTAINER"
1:                                               + " AND M.PRIORITY=D.PRIORITY AND M.ID > D.LAST_ACKED_ID"
/////////////////////////////////////////////////////////////////////////
0:                                                      + " WHERE D.CONTAINER=? AND D.CLIENT_ID=? AND D.SUB_NAME=?"
1:                                                      + "     AND M.ID >"
1:                                                      + "           AND SUB_NAME=D.SUB_NAME )";
1: 
1:     public String getDurableSubscriberMessageCountStatementWithPriority() {
1:         if (durableSubscriberMessageCountStatementWithPriority == null) {
1:             durableSubscriberMessageCountStatementWithPriority = "SELECT COUNT(*) FROM "
1:                                                      + getFullMessageTableName()
1:                                                      + " M, "
1:                                                      + getFullAckTableName()
1:                                                      + " D "
0:                                                      + " WHERE D.CONTAINER=? AND D.CLIENT_ID=? AND D.SUB_NAME=?"
1:                                                      + " AND M.CONTAINER=D.CONTAINER "
1:                                                      + " AND M.PRIORITY=D.PRIORITY "
1:                                                      + " AND M.ID > D.LAST_ACKED_ID";
1:         }
1: 
1:         return durableSubscriberMessageCountStatementWithPriority;
1:     }
1: 
/////////////////////////////////////////////////////////////////////////
1:     public String getDeleteOldMessagesStatementWithPriority() {
1:         if (deleteOldMessagesStatementWithPriority == null) {
1:             deleteOldMessagesStatementWithPriority = "DELETE FROM " + getFullMessageTableName()
0:                                          + " WHERE ( EXPIRATION<>0 AND EXPIRATION<?)"
0:                                          + " OR (ID <= "
1:                                          + "     ( SELECT min(" + getFullAckTableName() + ".LAST_ACKED_ID)"
1:                                          + "       FROM " + getFullAckTableName() + " WHERE "
1:                                          +          getFullAckTableName() + ".CONTAINER="
1:                                          +          getFullMessageTableName() + ".CONTAINER"
0:                                          + "        AND " + getFullAckTableName() + ".PRIORITY=" + getFullMessageTableName() + ".PRIORITY )"
1:                                          + "   )";
1:         }
1:         return deleteOldMessagesStatementWithPriority;
1:     }
1: 
0:                                          + " OR (ID <= "
0:                                          +          getFullMessageTableName() + ".CONTAINER )"
1: 
/////////////////////////////////////////////////////////////////////////
0:             lastAckedDurableSubscriberMessageStatement = "SELECT MAX(LAST_ACKED_ID) FROM "
0:                                                          + " WHERE CONTAINER=? AND CLIENT_ID=? AND SUB_NAME=?";                                                    
/////////////////////////////////////////////////////////////////////////
0:                     + " SET LAST_ACKED_ID = ? WHERE CONTAINER=? AND CLIENT_ID=? AND SUB_NAME=?";
/////////////////////////////////////////////////////////////////////////
0:     public void setDeleteOldMessagesStatementWithPriority(String deleteOldMessagesStatmentWithPriority) {
0:         this.deleteOldMessagesStatementWithPriority = deleteOldMessagesStatmentWithPriority;
1:     }
1: 
/////////////////////////////////////////////////////////////////////////
1:     public void setUpdateLastPriorityAckRowOfDurableSubStatement(String updateLastPriorityAckRowOfDurableSubStatement) {
1:         this.updateLastPriorityAckRowOfDurableSubStatement = updateLastPriorityAckRowOfDurableSubStatement;
/////////////////////////////////////////////////////////////////////////
1:     public void setDurableSubscriberMessageCountStatementWithPriority(String durableSubscriberMessageCountStatementWithPriority) {
1:         this.durableSubscriberMessageCountStatementWithPriority = durableSubscriberMessageCountStatementWithPriority;
1:     }
1: 
commit:06cbebc
/////////////////////////////////////////////////////////////////////////
1:     private String selectDurablePriorityAckStatement;
1: 
1:     private String insertDurablePriorityAckStatement;
1:     private String updateDurableLastAckStatement;
/////////////////////////////////////////////////////////////////////////
0:                 "ALTER TABLE " + getFullAckTableName() + " ADD PRIORITY " + sequenceDataType  + " NOT NULL DEFAULT 5",
0:                 "ALTER TABLE " + getFullAckTableName() + " DROP PRIMARY KEY",
1:                 "ALTER TABLE " + getFullAckTableName() + " ADD PRIMARY KEY (CONTAINER, CLIENT_ID, SUB_NAME, PRIORITY)",
/////////////////////////////////////////////////////////////////////////
0:                                       + " WHERE CONTAINER=? AND CLIENT_ID=? AND SUB_NAME=? AND SUB_DEST IS NOT NULL";
/////////////////////////////////////////////////////////////////////////
0:                                           + getFullAckTableName() + " WHERE CONTAINER=? AND SUB_DEST IS NOT NULL";
0:             updateLastAckOfDurableSubStatement = "UPDATE " + getFullAckTableName() + " SET LAST_ACKED_ID=?"
1:                                                  + " WHERE CONTAINER=? AND CLIENT_ID=? AND SUB_NAME=? AND PRIORITY=?";
/////////////////////////////////////////////////////////////////////////
0:                                               + "((M.ID > ? AND M.PRIORITY = ?) "
0:                                               + "   OR (M.PRIORITY <> ? "
0:                                               + "     AND ( M.ID >"
1:                                               + "          ( SELECT LAST_ACKED_ID FROM " + getFullAckTableName()
1:                                               + "           WHERE CONTAINER=D.CONTAINER AND CLIENT_ID=D.CLIENT_ID"
0:                                               + "           AND SUB_NAME=D.SUB_NAME AND PRIORITY=M.PRIORITY )"
0:                                               + "          OR "
0:                                               + "          ( (SELECT COUNT(LAST_ACKED_ID) FROM " + getFullAckTableName()
1:                                               + "           WHERE CONTAINER=D.CONTAINER AND CLIENT_ID=D.CLIENT_ID"
0:                                               + "           AND SUB_NAME=D.SUB_NAME AND PRIORITY=M.PRIORITY) = 0)"
0:                                               + "        )"
0:                                               + "   )"
0:                                               + ")"
/////////////////////////////////////////////////////////////////////////
0:                                                      + " WHERE D.CONTAINER=? AND D.CLIENT_ID=? AND D.SUB_NAME=? AND D.SUB_DEST IS NOT NULL"
1:                                                      + " AND M.CONTAINER=D.CONTAINER "
0:                                                      + "     AND ( M.ID >"
0:                                                      + "          ( SELECT LAST_ACKED_ID FROM " + getFullAckTableName()
0:                                                      + "           WHERE CONTAINER=D.CONTAINER AND CLIENT_ID=D.CLIENT_ID"
0:                                                      + "           AND SUB_NAME=D.SUB_NAME AND PRIORITY=M.PRIORITY )"
0:                                                      + "          OR "
0:                                                      + "          ( (SELECT COUNT(LAST_ACKED_ID) FROM " + getFullAckTableName()
0:                                                      + "           WHERE CONTAINER=D.CONTAINER AND CLIENT_ID=D.CLIENT_ID"
0:                                                      + "           AND SUB_NAME=D.SUB_NAME AND PRIORITY=M.PRIORITY) = 0)"
0:                                                      + "        )";
/////////////////////////////////////////////////////////////////////////
0:                                          + "     ( SELECT min(" + getFullAckTableName() + ".LAST_ACKED_ID)"
0:                                          + "       FROM " + getFullAckTableName() + " WHERE "
0:                                          +          getFullMessageTableName() + ".CONTAINER"
0:                                          + "        AND " + getFullAckTableName() + ".SUB_DEST IS NULL"
0:                                          + "        AND " + getFullAckTableName() + ".PRIORITY=" + getFullMessageTableName() + ".PRIORITY )"
0:                                          + "    AND ID <"
0:                                          + "     ( SELECT min(" + getFullAckTableName() + ".LAST_ACKED_ID)"
0:                                          + "       FROM " + getFullAckTableName() + " WHERE "
0:                                          +          getFullMessageTableName() + ".CONTAINER"
0:                                          + "        AND " + getFullAckTableName() + ".SUB_DEST IS NOT NULL )"
0:                                          + "   )";
1: 
/////////////////////////////////////////////////////////////////////////
1:     public String getSelectDurablePriorityAckStatement() {
1:         if (selectDurablePriorityAckStatement == null) {
1:             selectDurablePriorityAckStatement = "SELECT LAST_ACKED_ID FROM " + getFullAckTableName()
1:                                                     + " WHERE CONTAINER=? AND CLIENT_ID=? AND SUB_NAME=?"
1:                                                     + " AND PRIORITY = ?";
1:         }
1:         return selectDurablePriorityAckStatement;
1:     }
1: 
1:     public String getInsertDurablePriorityAckStatement() {
1:         if (insertDurablePriorityAckStatement == null) {
1:             insertDurablePriorityAckStatement = "INSERT INTO "
1:                                   + getFullAckTableName()
1:                                   + "(CONTAINER, CLIENT_ID, SUB_NAME, PRIORITY)"
1:                                   + " VALUES (?, ?, ?, ?)";            
1:        }
1:         return insertDurablePriorityAckStatement;
1:     }
1: 
1: 
1:     public String getUpdateDurableLastAckStatement() {
1:         if (updateDurableLastAckStatement == null) {
1:             updateDurableLastAckStatement  = "UPDATE " + getFullAckTableName()
0:                     + " SET LAST_ACKED_ID = ? WHERE CONTAINER=? AND CLIENT_ID=? AND SUB_NAME=?"
0:                     + " AND PRIORITY = " + (Byte.MAX_VALUE - 1);
1:         }
1:         return  updateDurableLastAckStatement;
1:     }
1: 
/////////////////////////////////////////////////////////////////////////
1:     public void setSelectDurablePriorityAckStatement(String selectDurablePriorityAckStatement) {
1:         this.selectDurablePriorityAckStatement = selectDurablePriorityAckStatement;
1:     }
1: 
1:     public void setInsertDurablePriorityAckStatement(String insertDurablePriorityAckStatement) {
1:         this.insertDurablePriorityAckStatement = insertDurablePriorityAckStatement;
1:     }
1: 
1:     public void setUpdateDurableLastAckStatement(String updateDurableLastAckStatement) {
1:         this.updateDurableLastAckStatement = updateDurableLastAckStatement;
1:     }    
commit:3432a75
/////////////////////////////////////////////////////////////////////////
0:                                                      + " AND M.CONTAINER=D.CONTAINER AND M.ID > D.LAST_ACKED_ID AND M.PRIORITY <= D.PRIORITY";
/////////////////////////////////////////////////////////////////////////
0:                                          + " WHERE ( EXPIRATION<>0 AND EXPIRATION<?)"
0:                                          + " OR (ID < "
0:                                          + "   ( SELECT min(" + getFullAckTableName() + ".LAST_ACKED_ID)"
0:                                          + "      FROM " + getFullAckTableName() + " WHERE "
0:                                          +          getFullAckTableName() + ".CONTAINER="
0:                                          +          getFullMessageTableName() + ".CONTAINER )"
0:                                          + "   AND PRIORITY >= "
0:                                          + "   ( SELECT min(" + getFullAckTableName() + ".PRIORITY) "
0:                                          + "     FROM " + getFullAckTableName() + " WHERE "
0:                                          +          getFullAckTableName() + ".CONTAINER="
0:                                          + getFullMessageTableName() + ".CONTAINER ))";
/////////////////////////////////////////////////////////////////////////
1:                                         + " WHERE CONTAINER=?"
0:                                         + " AND ((ID > ? AND PRIORITY = ?) OR PRIORITY < ?)"
1:                                         + " ORDER BY PRIORITY DESC, ID";
/////////////////////////////////////////////////////////////////////////
0:             lastAckedDurableSubscriberMessageStatement = "SELECT MAX(LAST_ACKED_ID), PRIORITY FROM "
0:                                                          + " WHERE CONTAINER=? AND CLIENT_ID=? AND SUB_NAME=?"
0:                                                          + " GROUP BY PRIORITY"
0:                                                          + " ORDER BY PRIORITY ASC";
commit:a6a6a70
/////////////////////////////////////////////////////////////////////////
1:     private String lastProducerSequenceIdStatement;
/////////////////////////////////////////////////////////////////////////
1:                                              + " WHERE MSGID_PROD=? AND MSGID_SEQ=? AND CONTAINER=?";
/////////////////////////////////////////////////////////////////////////
1:     public String getLastProducerSequenceIdStatement() {
1:         if (lastProducerSequenceIdStatement == null) {
1:             lastProducerSequenceIdStatement = "SELECT MAX(MSGID_SEQ) FROM " + getFullMessageTableName()
1:                                             + " WHERE MSGID_PROD=?";
1:         }
1:         return lastProducerSequenceIdStatement;
1:     }
1: 
1: 
/////////////////////////////////////////////////////////////////////////
1: 
1:     public void setLastProducerSequenceIdStatement(String lastProducerSequenceIdStatement) {
1:         this.lastProducerSequenceIdStatement = lastProducerSequenceIdStatement;
1:     }
1: 
commit:8732f70
/////////////////////////////////////////////////////////////////////////
0:     
0:     public String getFindAllMessageIds() {
1:         //  this needs to be limited maybe need to use getFindLastSequenceIdInMsgsStatement
1:         // and work back for X
0:         if (findAllMessagesStatement == null) {
0:             findAllMessagesStatement = "SELECT ID, MSGID_PROD, MSGID_SEQ FROM " + getFullMessageTableName()
0:                                        + " WHERE CONTAINER=? ORDER BY ID DESC";
1:         }
0:         return findAllMessagesStatement;
1:     }
author:Robert Davies
-------------------------------------------------------------------------------
commit:6eeb269
/////////////////////////////////////////////////////////////////////////
1:             lockUpdateStatement = "UPDATE " + getFullLockTableName() + " SET TIME = ? WHERE ID = 1";
commit:4597ddd
/////////////////////////////////////////////////////////////////////////
1:     private String lastAckedDurableSubscriberMessageStatement;
/////////////////////////////////////////////////////////////////////////
0:     
1:     /**
1:      * @return the lastAckedDurableSubscriberMessageStatement
1:      */
0:     public String getLastAckedDurableSubscriberMessageStatement(){
0:         if(lastAckedDurableSubscriberMessageStatement==null) {
0:             lastAckedDurableSubscriberMessageStatement = "SELECT MAX(LAST_ACKED_ID) FROM " + getFullAckTableName()
0:             + " WHERE CONTAINER=? AND CLIENT_ID=? AND SUB_NAME=?";
1:         }
1:         return lastAckedDurableSubscriberMessageStatement;
1:     }
0: 
/////////////////////////////////////////////////////////////////////////
1:     }    
/////////////////////////////////////////////////////////////////////////
0: 
0:     
0:     
0:     
1:     /**
1:      * @param lastAckedDurableSubscriberMessageStatement the lastAckedDurableSubscriberMessageStatement to set
1:      */
0:     public void setLastAckedDurableSubscriberMessageStatement(String lastAckedDurableSubscriberMessageStatement){
0:         this.lastAckedDurableSubscriberMessageStatement=lastAckedDurableSubscriberMessageStatement;
1:     }
commit:5367f1e
/////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////
0:    public String getFindAllDestinationsStatement() {
/////////////////////////////////////////////////////////////////////////
0:      
commit:629bc81
/////////////////////////////////////////////////////////////////////////
1:     private String destinationMessageCountStatement;
1:     private String findNextMessagesStatement;
/////////////////////////////////////////////////////////////////////////
0:     
1:     /**
1:      * @return the destinationMessageCountStatement
1:      */
0:     public String getDestinationMessageCountStatement(){
0:         if (destinationMessageCountStatement==null) {
0:             destinationMessageCountStatement= "SELECT COUNT(*) FROM " + getFullMessageTableName()
0:             + " WHERE CONTAINER=?";
1:         }
1:         return destinationMessageCountStatement;
1:     }
0: 
1:     /**
1:      * @return the findNextMessagesStatement
1:      */
0:     public String getFindNextMessagesStatement(){
0:         if(findNextMessagesStatement == null) {            
0:             findNextMessagesStatement="SELECT ID, MSG FROM " + getFullMessageTableName()
0:             + " WHERE CONTAINER=? AND ID > ? ORDER BY ID";
1:         }
1:         return findNextMessagesStatement;
1:     }
0: 
/////////////////////////////////////////////////////////////////////////
0:     
1:     /**
1:      * @param findNextMessagesStatement the findNextMessagesStatement to set
1:      */
0:     public void setFindNextMessagesStatement(String findNextMessagesStatement){
0:         this.findNextMessagesStatement=findNextMessagesStatement;
1:     }
0: 
1:     /**
1:      * @param destinationMessageCountStatement the destinationMessageCountStatement to set
1:      */
0:     public void setDestinationMessageCountStatement(String destinationMessageCountStatement){
0:         this.destinationMessageCountStatement=destinationMessageCountStatement;
1:     }
0:     
0:     
0:     
0:    
1: }
commit:b6ba20b
/////////////////////////////////////////////////////////////////////////
0:     private String nextDurableSubscriberMessageIdStatement;
0:     private String prevDurableSubscriberMessageIdStatement;
/////////////////////////////////////////////////////////////////////////
0:             findDurableSubMessagesStatement="SELECT M.ID, M.MSG FROM " + getFullMessageTableName() + " M, "
0:             + getFullAckTableName() + " D " + " WHERE D.CONTAINER=? AND D.CLIENT_ID=? AND D.SUB_NAME=?"
0:             + " AND M.CONTAINER=D.CONTAINER AND M.ID > ?" + " ORDER BY M.ID";
/////////////////////////////////////////////////////////////////////////
0:             nextDurableSubscriberMessageStatement = "SELECT M.ID, M.MSG FROM " + getFullMessageTableName() + " M, "
0:             + getFullAckTableName() + " D " + " WHERE D.CONTAINER=? AND D.CLIENT_ID=? AND D.SUB_NAME=?"
0:             + " AND M.CONTAINER=D.CONTAINER AND M.ID > ?" + " ORDER BY M.ID ";
/////////////////////////////////////////////////////////////////////////
0:     
0:     
0:             durableSubscriberMessageCountStatement =  "SELECT COUNT(*) FROM " + getFullMessageTableName() + " M, "
0:             + getFullAckTableName() + " D " + " WHERE D.CONTAINER=? AND D.CLIENT_ID=? AND D.SUB_NAME=?"
0:             + " AND M.CONTAINER=D.CONTAINER AND M.ID > D.LAST_ACKED_ID";
0:     
1:     /**
0:      * @return the nextDurableSubscriberMessageIdStatement
1:      */
0:     public String getNextDurableSubscriberMessageIdStatement(){
0:         if (nextDurableSubscriberMessageIdStatement==null) {
0:             nextDurableSubscriberMessageIdStatement =
0:                 "SELECT M.ID FROM " + getFullMessageTableName() + " M, "
0:                  + getFullAckTableName() + " D " + " WHERE D.CONTAINER=? AND D.CLIENT_ID=? AND D.SUB_NAME=?"
0:                 + " AND M.CONTAINER=D.CONTAINER AND M.ID > ?" + " ORDER BY M.ID ";
1:         }
0:         return nextDurableSubscriberMessageIdStatement;
1:     }
0:     
1:     /**
0:      * @return the prevDurableSubscriberMessageIdStatement
1:      */
0:    /*
0:     public String getPrevDurableSubscriberMessageIdStatement(){
0:         if(prevDurableSubscriberMessageIdStatement==null) {
0:             prevDurableSubscriberMessageIdStatement = "SELECT M.ID, M.MSG FROM " + getFullMessageTableName() + " M, "
0:             + getFullAckTableName() + " D " + " WHERE D.CONTAINER=? AND D.CLIENT_ID=? AND D.SUB_NAME=?"
0:             + " AND M.CONTAINER=D.CONTAINER AND M.ID < ?" + " ORDER BY M.ID ";
1:         }
0:         return prevDurableSubscriberMessageIdStatement;
1:     }
1:     */
0:    
0:    
0:     public String getPrevDurableSubscriberMessageIdStatement(){
0:         if(prevDurableSubscriberMessageIdStatement==null) {
0:             prevDurableSubscriberMessageIdStatement = "SELECT M.ID, M.MSG FROM " + getFullMessageTableName() + " M "
0:             + " WHERE M.CONTAINER=? "
0:             + "  AND M.ID <?" + "  ORDER BY M.ID DESC ";
1:         }
0:         return prevDurableSubscriberMessageIdStatement;
1:     }
0:     
0: 
/////////////////////////////////////////////////////////////////////////
0: 
0:     
0:     
0: 
0:     
0:     /**
0:      * @param nextDurableSubscriberMessageIdStatement the nextDurableSubscriberMessageIdStatement to set
0:      */
0:     public void setNextDurableSubscriberMessageIdStatement(String nextDurableSubscriberMessageIdStatement){
0:         this.nextDurableSubscriberMessageIdStatement=nextDurableSubscriberMessageIdStatement;
1:     }
0: 
0:     
0:    
0:     
0:     /**
0:      * @param prevDurableSubscriberMessageIdStatement the prevDurableSubscriberMessageIdStatement to set
0:      */
0:     public void setPrevDurableSubscriberMessageIdStatement(String prevDurableSubscriberMessageIdStatement){
0:         this.prevDurableSubscriberMessageIdStatement=prevDurableSubscriberMessageIdStatement;
1:     }
commit:17946e5
/////////////////////////////////////////////////////////////////////////
0:                             +getFullAckTableName()+" D "+" WHERE ?>= ( SELECT COUNT(*) FROM "
0:                             +getFullMessageTableName()+" M, " +  getFullAckTableName() + " D WHERE (D.CONTAINER=? AND D.CLIENT_ID=? AND D.SUB_NAME=?"
0:                             +" AND M.CONTAINER=D.CONTAINER AND M.ID > ?)"+" ORDER BY M.ID)";
/////////////////////////////////////////////////////////////////////////
0:             +getFullAckTableName()+" D "+" WHERE 1 >= ( SELECT COUNT(*) FROM "
0:             +getFullMessageTableName()+" M, WHERE (D.CONTAINER=? AND D.CLIENT_ID=? AND D.SUB_NAME=?"
0:             +" AND M.CONTAINER=D.CONTAINER AND M.ID > D.LAST_ACKED_ID"+") ORDER BY M.ID)"; 
/////////////////////////////////////////////////////////////////////////
0:             durableSubscriberMessageCountStatement = "SELECT COUNT(*) FROM "
commit:4eef609
/////////////////////////////////////////////////////////////////////////
1:     private String findDurableSubMessagesStatement;
/////////////////////////////////////////////////////////////////////////
1:     private String nextDurableSubscriberMessageStatement;
1:     private String durableSubscriberMessageCountStatement;
/////////////////////////////////////////////////////////////////////////
0:     
0:     public String getFindDurableSubMessagesStatement(){
0:         if(findDurableSubMessagesStatement==null){
0:             findDurableSubMessagesStatement="SELECT M.ID, M.MSG FROM "+getFullMessageTableName()+" M, "
0:                             +getFullAckTableName()+" D "+" WHERE ? >= ( select count(*) from "
0:                             +getFullMessageTableName()+" M, where D.CONTAINER=? AND D.CLIENT_ID=? AND D.SUB_NAME=?"
0:                             +" AND M.CONTAINER=D.CONTAINER AND M.ID > ?"+" ORDER BY M.ID)";
1:         }
1:         return findDurableSubMessagesStatement;
1:     }
0:     
0:     public String findAllDurableSubMessagesStatement() {
0:         if (findAllDurableSubMessagesStatement == null) {
0:             findAllDurableSubMessagesStatement = "SELECT M.ID, M.MSG FROM " + getFullMessageTableName() + " M, "
0:                     + getFullAckTableName() + " D " + " WHERE D.CONTAINER=? AND D.CLIENT_ID=? AND D.SUB_NAME=?"
0:                     + " AND M.CONTAINER=D.CONTAINER AND M.ID > D.LAST_ACKED_ID" + " ORDER BY M.ID";
1:         }
0:         return findAllDurableSubMessagesStatement;
1:     }
0:     
0:     public String getNextDurableSubscriberMessageStatement(){
0:         if (nextDurableSubscriberMessageStatement == null){
0:             nextDurableSubscriberMessageStatement = "SELECT M.ID, M.MSG FROM "+getFullMessageTableName()+" M, "
0:             +getFullAckTableName()+" D "+" WHERE 1 >= ( select count(*) from "
0:             +getFullMessageTableName()+" M, where D.CONTAINER=? AND D.CLIENT_ID=? AND D.SUB_NAME=?"
0:             +" AND M.CONTAINER=D.CONTAINER AND M.ID > D.LAST_ACKED_ID"+" ORDER BY M.ID)"; 
1:         }
1:         return nextDurableSubscriberMessageStatement;
1:     }
0:     
0:     /**
1:      * @return the durableSubscriberMessageCountStatement
0:      */
0:     public String getDurableSubscriberMessageCountStatement(){
0:         if (durableSubscriberMessageCountStatement==null){
0:             durableSubscriberMessageCountStatement = "select count(*) from "
0:             +getFullMessageTableName()+" M, where D.CONTAINER=? AND D.CLIENT_ID=? AND D.SUB_NAME=?"
0:             +" AND M.CONTAINER=D.CONTAINER AND M.ID > D.LAST_ACKED_ID";
1:         }
1:         return durableSubscriberMessageCountStatement;
1:     }
/////////////////////////////////////////////////////////////////////////
0: 
0:     /**
0:      * @param findDurableSubMessagesStatement the findDurableSubMessagesStatement to set
0:      */
0:     public void setFindDurableSubMessagesStatement(String findDurableSubMessagesStatement){
0:         this.findDurableSubMessagesStatement=findDurableSubMessagesStatement;
0:     }
0: 
0:     /**
1:      * @param nextDurableSubscriberMessageStatement the nextDurableSubscriberMessageStatement to set
0:      */
0:     public void setNextDurableSubscriberMessageStatement(String nextDurableSubscriberMessageStatement){
0:         this.nextDurableSubscriberMessageStatement=nextDurableSubscriberMessageStatement;
0:     }
0: 
0: 
0:     /**
1:      * @param durableSubscriberMessageCountStatement the durableSubscriberMessageCountStatement to set
0:      */
0:     public void setDurableSubscriberMessageCountStatement(String durableSubscriberMessageCountStatement){
0:         this.durableSubscriberMessageCountStatement=durableSubscriberMessageCountStatement;
0:     }
author:Jonas B. Lim
-------------------------------------------------------------------------------
commit:f2a80ac
/////////////////////////////////////////////////////////////////////////
0:                     "CREATE TABLE " + getFullLockTableName() + "( ID " + longDataType + " NOT NULL, TIME " + longDataType 
author:James Strachan
-------------------------------------------------------------------------------
commit:90d0c4b
/////////////////////////////////////////////////////////////////////////
1:     protected String lockTableName = "ACTIVEMQ_LOCK";
/////////////////////////////////////////////////////////////////////////
1:     private String lockCreateStatement;
1:     private String lockUpdateStatement;
1:     private boolean useLockCreateWhereClause;
/////////////////////////////////////////////////////////////////////////
0:                             + ", PRIMARY KEY ( CONTAINER, CLIENT_ID, SUB_NAME))", 
0:                     "CREATE TABLE " + getFullLockTableName() + "( ID " + longDataType + ", TIME " + longDataType 
0:                             + ", BROKER_NAME " + stringIdDataType + ", PRIMARY KEY (ID) )",
0:                     "INSERT INTO " + getFullLockTableName() + "(ID) VALUES (1)", 
1:             };
/////////////////////////////////////////////////////////////////////////
0:             + " WHERE ( EXPIRATION<>0 AND EXPIRATION<?) OR ID <= " + "( SELECT min(" + getFullAckTableName()
0:             + ".LAST_ACKED_ID) " + "FROM " + getFullAckTableName() + " WHERE " + getFullAckTableName()
0:             + ".CONTAINER=" + getFullMessageTableName() + ".CONTAINER)";
0:     
1:     public String getLockCreateStatement() {
1:         if (lockCreateStatement == null) {
1:             lockCreateStatement = "SELECT * FROM " + getFullLockTableName();
1:             if (useLockCreateWhereClause) {
1:                 lockCreateStatement += " WHERE ID = 1";
0:             }
1:             lockCreateStatement += " FOR UPDATE";
0:         }
1:         return lockCreateStatement;
0:     }
0:     
1:     public String getLockUpdateStatement() {
1:         if (lockUpdateStatement == null) {
0:             lockUpdateStatement = "UPDATE " + getFullLockTableName() + " SET time = ? WHERE ID = 1";
0:         }
1:         return lockUpdateStatement;
0:     }
/////////////////////////////////////////////////////////////////////////
0:     
1:     public String getFullLockTableName() {
1:         return getTablePrefix() + getLockTableName();
0:     }
0:     
/////////////////////////////////////////////////////////////////////////
0:     
1:     public String getLockTableName() {
1:         return lockTableName;
0:     }
0: 
1:     public void setLockTableName(String lockTableName) {
1:         this.lockTableName = lockTableName;
0:     }
/////////////////////////////////////////////////////////////////////////
1:     public boolean isUseLockCreateWhereClause() {
1:         return useLockCreateWhereClause;
0:     }
0: 
1:     public void setUseLockCreateWhereClause(boolean useLockCreateWhereClause) {
1:         this.useLockCreateWhereClause = useLockCreateWhereClause;
0:     }
0: 
1:     public void setLockCreateStatement(String lockCreateStatement) {
1:         this.lockCreateStatement = lockCreateStatement;
0:     }
0: 
1:     public void setLockUpdateStatement(String lockUpdateStatement) {
1:         this.lockUpdateStatement = lockUpdateStatement;
0:     }
============================================================================