1:c14c7e7: /**
1:c14c7e7:  * Licensed to the Apache Software Foundation (ASF) under one or more
1:c14c7e7:  * contributor license agreements.  See the NOTICE file distributed with
1:c14c7e7:  * this work for additional information regarding copyright ownership.
1:c14c7e7:  * The ASF licenses this file to You under the Apache License, Version 2.0
1:c14c7e7:  * (the "License"); you may not use this file except in compliance with
1:c14c7e7:  * the License.  You may obtain a copy of the License at
1:c14c7e7:  *
1:c14c7e7:  *      http://www.apache.org/licenses/LICENSE-2.0
1:c14c7e7:  *
1:c14c7e7:  * Unless required by applicable law or agreed to in writing, software
1:c14c7e7:  * distributed under the License is distributed on an "AS IS" BASIS,
1:c14c7e7:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:c14c7e7:  * See the License for the specific language governing permissions and
1:c14c7e7:  * limitations under the License.
1:c14c7e7:  */
1:c14c7e7: package org.apache.activemq.transport.failover;
10:c14c7e7: 
1:c14c7e7: import java.io.File;
1:c14c7e7: import java.io.FileOutputStream;
1:0ed0ba5: import java.util.concurrent.TimeUnit;
1:b6e82fe: 
1:c14c7e7: import javax.jms.Connection;
1:c14c7e7: import javax.jms.Message;
1:c14c7e7: import javax.jms.MessageConsumer;
1:0ed0ba5: import javax.jms.MessageProducer;
1:c14c7e7: import javax.jms.Queue;
1:c14c7e7: import javax.jms.Session;
1:b6e82fe: 
1:c14c7e7: import junit.framework.TestCase;
1:b6e82fe: 
1:c14c7e7: import org.apache.activemq.ActiveMQConnectionFactory;
1:c14c7e7: import org.apache.activemq.broker.BrokerService;
1:0ed0ba5: import org.apache.activemq.broker.TransportConnector;
1:0ed0ba5: import org.apache.activemq.network.NetworkConnector;
1:0ed0ba5: import org.apache.log4j.Logger;
1:c14c7e7: 
1:c14c7e7: public class FailoverUpdateURIsTest extends TestCase {
1:c14c7e7: 
1:0ed0ba5:     private static final String QUEUE_NAME = "test.failoverupdateuris";
1:0ed0ba5:     private static final Logger LOG = Logger.getLogger(FailoverUpdateURIsTest.class);
1:c14c7e7: 
1:0ed0ba5:     String firstTcpUri = "tcp://localhost:61616";
1:0ed0ba5:     String secondTcpUri = "tcp://localhost:61626";
1:0ed0ba5:     Connection connection = null;
1:b6e82fe:     BrokerService bs1 = null;
1:0ed0ba5:     BrokerService bs2 = null;
1:c14c7e7: 
1:274d228:     @Override
1:0ed0ba5:     public void tearDown() throws Exception {
1:0ed0ba5:         if (connection != null) {
1:0ed0ba5:             connection.close();
1:0ed0ba5:         }
1:b6e82fe:         if (bs1 != null) {
1:b6e82fe:             bs1.stop();
1:b6e82fe:         }
1:0ed0ba5:         if (bs2 != null) {
1:0ed0ba5:             bs2.stop();
1:0ed0ba5:         }
1:0ed0ba5:     }
1:c14c7e7: 
1:0ed0ba5:     public void testUpdateURIsViaFile() throws Exception {
1:0ed0ba5: 
1:0ed0ba5:         String targetDir = "target/" + getName();
1:0ed0ba5:         new File(targetDir).mkdir();
1:0ed0ba5:         File updateFile = new File(targetDir + "/updateURIsFile.txt");
1:0ed0ba5:         LOG.info(updateFile);
1:0ed0ba5:         LOG.info(updateFile.toURI());
1:0ed0ba5:         LOG.info(updateFile.getAbsoluteFile());
1:0ed0ba5:         LOG.info(updateFile.getAbsoluteFile().toURI());
1:0ed0ba5:         FileOutputStream out = new FileOutputStream(updateFile);
1:0ed0ba5:         out.write(firstTcpUri.getBytes());
1:0ed0ba5:         out.close();
1:0ed0ba5: 
1:b6e82fe:         bs1 = createBroker("bs1", firstTcpUri);
1:0ed0ba5:         bs1.start();
1:0ed0ba5: 
1:0ed0ba5:         // no failover uri's to start with, must be read from file...
1:0ed0ba5:         ActiveMQConnectionFactory cf = new ActiveMQConnectionFactory("failover:()?updateURIsURL=file:///" + updateFile.getAbsoluteFile());
1:0ed0ba5:         connection = cf.createConnection();
1:0ed0ba5:         connection.start();
1:0ed0ba5:         Session session = connection.createSession(false, Session.AUTO_ACKNOWLEDGE);
1:0ed0ba5:         Queue theQueue = session.createQueue(QUEUE_NAME);
1:0ed0ba5:         MessageProducer producer = session.createProducer(theQueue);
1:0ed0ba5:         MessageConsumer consumer = session.createConsumer(theQueue);
1:0ed0ba5:         Message message = session.createTextMessage("Test message");
1:0ed0ba5:         producer.send(message);
1:0ed0ba5:         Message msg = consumer.receive(2000);
1:0ed0ba5:         assertNotNull(msg);
1:0ed0ba5: 
1:0ed0ba5:         bs1.stop();
1:0ed0ba5:         bs1.waitUntilStopped();
1:b6e82fe:         bs1 = null;
1:0ed0ba5: 
1:0ed0ba5:         bs2 = createBroker("bs2", secondTcpUri);
1:0ed0ba5:         bs2.start();
1:0ed0ba5: 
1:0ed0ba5:         // add the transport uri for broker number 2
1:0ed0ba5:         out = new FileOutputStream(updateFile, true);
1:0ed0ba5:         out.write(",".getBytes());
1:0ed0ba5:         out.write(secondTcpUri.toString().getBytes());
1:0ed0ba5:         out.close();
1:0ed0ba5: 
1:0ed0ba5:         producer.send(message);
1:0ed0ba5:         msg = consumer.receive(2000);
1:0ed0ba5:         assertNotNull(msg);
1:0ed0ba5:     }
1:0ed0ba5: 
1:0ed0ba5:     private BrokerService createBroker(String name, String tcpUri) throws Exception {
1:0ed0ba5:         BrokerService bs = new BrokerService();
1:0ed0ba5:         bs.setBrokerName(name);
1:0ed0ba5:         bs.setUseJmx(false);
1:0ed0ba5:         bs.setPersistent(false);
1:0ed0ba5:         bs.addConnector(tcpUri);
1:0ed0ba5:         return bs;
1:0ed0ba5:     }
1:0ed0ba5: 
1:0ed0ba5:     public void testAutoUpdateURIs() throws Exception {
1:0ed0ba5: 
1:b6e82fe:         bs1 = new BrokerService();
1:0ed0ba5:         bs1.setUseJmx(false);
1:0ed0ba5:         TransportConnector transportConnector = bs1.addConnector(firstTcpUri);
1:0ed0ba5:         transportConnector.setUpdateClusterClients(true);
1:0ed0ba5:         bs1.start();
1:0ed0ba5: 
1:0ed0ba5:         ActiveMQConnectionFactory cf = new ActiveMQConnectionFactory("failover:(" + firstTcpUri + ")");
1:274d228:         connection = cf.createConnection();
1:0ed0ba5:         connection.start();
1:0ed0ba5:         Session session = connection.createSession(false, Session.AUTO_ACKNOWLEDGE);
1:0ed0ba5:         Queue theQueue = session.createQueue(QUEUE_NAME);
1:0ed0ba5:         MessageProducer producer = session.createProducer(theQueue);
1:0ed0ba5:         MessageConsumer consumer = session.createConsumer(theQueue);
1:0ed0ba5:         Message message = session.createTextMessage("Test message");
1:0ed0ba5:         producer.send(message);
1:0ed0ba5:         Message msg = consumer.receive(4000);
1:0ed0ba5:         assertNotNull(msg);
1:0ed0ba5: 
1:0ed0ba5:         bs2 = createBroker("bs2", secondTcpUri);
1:0ed0ba5:         NetworkConnector networkConnector = bs2.addNetworkConnector("static:(" + firstTcpUri + ")");
1:0ed0ba5:         networkConnector.setDuplex(true);
1:0ed0ba5:         bs2.start();
1:0ed0ba5:         LOG.info("started brokerService 2");
1:0ed0ba5:         bs2.waitUntilStarted();
1:0ed0ba5: 
1:0ed0ba5:         TimeUnit.SECONDS.sleep(4);
1:0ed0ba5: 
1:0ed0ba5:         LOG.info("stopping brokerService 1");
1:0ed0ba5:         bs1.stop();
1:0ed0ba5:         bs1.waitUntilStopped();
1:b6e82fe:         bs1 = null;
1:0ed0ba5: 
1:0ed0ba5:         producer.send(message);
1:0ed0ba5:         msg = consumer.receive(4000);
1:0ed0ba5:         assertNotNull(msg);
1:0ed0ba5:     }
2:c14c7e7: }
============================================================================
author:Gary Tully
-------------------------------------------------------------------------------
commit:274d228
/////////////////////////////////////////////////////////////////////////
1:     @Override
/////////////////////////////////////////////////////////////////////////
1:         connection = cf.createConnection();
commit:0ed0ba5
/////////////////////////////////////////////////////////////////////////
1: import java.util.concurrent.TimeUnit;
1: import javax.jms.MessageProducer;
1: import org.apache.activemq.broker.TransportConnector;
1: import org.apache.activemq.network.NetworkConnector;
1: import org.apache.log4j.Logger;
1:     private static final String QUEUE_NAME = "test.failoverupdateuris";
1:     private static final Logger LOG = Logger.getLogger(FailoverUpdateURIsTest.class);
1:     String firstTcpUri = "tcp://localhost:61616";
1:     String secondTcpUri = "tcp://localhost:61626";
1:     Connection connection = null;
1:     BrokerService bs2 = null;
1:     public void tearDown() throws Exception {
1:         if (connection != null) {
1:             connection.close();
1:         }
1:         if (bs2 != null) {
1:             bs2.stop();
1:         }
1:     }
1:     public void testUpdateURIsViaFile() throws Exception {
1: 
1:         String targetDir = "target/" + getName();
1:         new File(targetDir).mkdir();
1:         File updateFile = new File(targetDir + "/updateURIsFile.txt");
1:         LOG.info(updateFile);
1:         LOG.info(updateFile.toURI());
1:         LOG.info(updateFile.getAbsoluteFile());
1:         LOG.info(updateFile.getAbsoluteFile().toURI());
1:         FileOutputStream out = new FileOutputStream(updateFile);
1:         out.write(firstTcpUri.getBytes());
1:         out.close();
1: 
0:         BrokerService bs1 = createBroker("bs1", firstTcpUri);
1:         bs1.start();
1: 
1:         // no failover uri's to start with, must be read from file...
1:         ActiveMQConnectionFactory cf = new ActiveMQConnectionFactory("failover:()?updateURIsURL=file:///" + updateFile.getAbsoluteFile());
1:         connection = cf.createConnection();
1:         connection.start();
1:         Session session = connection.createSession(false, Session.AUTO_ACKNOWLEDGE);
1:         Queue theQueue = session.createQueue(QUEUE_NAME);
1:         MessageProducer producer = session.createProducer(theQueue);
1:         MessageConsumer consumer = session.createConsumer(theQueue);
1:         Message message = session.createTextMessage("Test message");
1:         producer.send(message);
1:         Message msg = consumer.receive(2000);
1:         assertNotNull(msg);
1: 
1:         bs1.stop();
1:         bs1.waitUntilStopped();
1: 
1:         bs2 = createBroker("bs2", secondTcpUri);
1:         bs2.start();
1: 
1:         // add the transport uri for broker number 2
1:         out = new FileOutputStream(updateFile, true);
1:         out.write(",".getBytes());
1:         out.write(secondTcpUri.toString().getBytes());
1:         out.close();
1: 
1:         producer.send(message);
1:         msg = consumer.receive(2000);
1:         assertNotNull(msg);
1:     }
1: 
1:     private BrokerService createBroker(String name, String tcpUri) throws Exception {
1:         BrokerService bs = new BrokerService();
1:         bs.setBrokerName(name);
1:         bs.setUseJmx(false);
1:         bs.setPersistent(false);
1:         bs.addConnector(tcpUri);
1:         return bs;
1:     }
1: 
1:     public void testAutoUpdateURIs() throws Exception {
1: 
0:         BrokerService bs1 = new BrokerService();
1:         bs1.setUseJmx(false);
1:         TransportConnector transportConnector = bs1.addConnector(firstTcpUri);
1:         transportConnector.setUpdateClusterClients(true);
1:         bs1.start();
1: 
1:         ActiveMQConnectionFactory cf = new ActiveMQConnectionFactory("failover:(" + firstTcpUri + ")");
0:         Connection connection = cf.createConnection();
1:         connection.start();
1:         Session session = connection.createSession(false, Session.AUTO_ACKNOWLEDGE);
1:         Queue theQueue = session.createQueue(QUEUE_NAME);
1:         MessageProducer producer = session.createProducer(theQueue);
1:         MessageConsumer consumer = session.createConsumer(theQueue);
1:         Message message = session.createTextMessage("Test message");
1:         producer.send(message);
1:         Message msg = consumer.receive(4000);
1:         assertNotNull(msg);
1: 
1:         bs2 = createBroker("bs2", secondTcpUri);
1:         NetworkConnector networkConnector = bs2.addNetworkConnector("static:(" + firstTcpUri + ")");
1:         networkConnector.setDuplex(true);
1:         bs2.start();
1:         LOG.info("started brokerService 2");
1:         bs2.waitUntilStarted();
1: 
1:         TimeUnit.SECONDS.sleep(4);
1: 
1:         LOG.info("stopping brokerService 1");
1:         bs1.stop();
1:         bs1.waitUntilStopped();
1: 
1:         producer.send(message);
1:         msg = consumer.receive(4000);
1:         assertNotNull(msg);
1:     }
author:Timothy A. Bish
-------------------------------------------------------------------------------
commit:ef24cc9
commit:b6e82fe
/////////////////////////////////////////////////////////////////////////
1: 
1: 
1: 
/////////////////////////////////////////////////////////////////////////
1:     BrokerService bs1 = null;
1:         if (bs1 != null) {
1:             bs1.stop();
1:         }
/////////////////////////////////////////////////////////////////////////
1:         bs1 = createBroker("bs1", firstTcpUri);
/////////////////////////////////////////////////////////////////////////
1:         bs1 = null;
/////////////////////////////////////////////////////////////////////////
1:         bs1 = new BrokerService();
/////////////////////////////////////////////////////////////////////////
1:         bs1 = null;
author:Robert Davies
-------------------------------------------------------------------------------
commit:c14c7e7
/////////////////////////////////////////////////////////////////////////
1: /**
1:  * Licensed to the Apache Software Foundation (ASF) under one or more
1:  * contributor license agreements.  See the NOTICE file distributed with
1:  * this work for additional information regarding copyright ownership.
1:  * The ASF licenses this file to You under the Apache License, Version 2.0
1:  * (the "License"); you may not use this file except in compliance with
1:  * the License.  You may obtain a copy of the License at
1:  *
1:  *      http://www.apache.org/licenses/LICENSE-2.0
1:  *
1:  * Unless required by applicable law or agreed to in writing, software
1:  * distributed under the License is distributed on an "AS IS" BASIS,
1:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:  * See the License for the specific language governing permissions and
1:  * limitations under the License.
1:  */
1: package org.apache.activemq.transport.failover;
1: 
1: import java.io.File;
1: import java.io.FileOutputStream;
0: import java.net.URI;
1: 
1: import javax.jms.Connection;
0: import javax.jms.JMSException;
1: import javax.jms.Message;
0: import javax.jms.MessageProducer;
1: import javax.jms.MessageConsumer;
1: import javax.jms.Queue;
1: import javax.jms.Session;
0: import javax.jms.TextMessage;
1: 
1: import junit.framework.TestCase;
1: 
1: import org.apache.activemq.ActiveMQConnectionFactory;
1: import org.apache.activemq.broker.BrokerService;
1: 
1: public class FailoverUpdateURIsTest extends TestCase {
1: 	
0: 	private static final String QUEUE_NAME = "test.failoverupdateuris";
1: 
0: 	public void testUpdateURIs() throws Exception {
1: 		
0: 		long timeout = 1000;
0: 		URI firstTcpUri = new URI("tcp://localhost:61616");
0: 		URI secondTcpUri = new URI("tcp://localhost:61626");
0:                 String targetDir = "target/" + getName();
0:                 new File(targetDir).mkdir();
0:                 File updateFile = new File(targetDir + "/updateURIsFile.txt");
0:                 System.out.println(updateFile);
0:                 System.out.println(updateFile.toURI());
0:                 System.out.println(updateFile.getAbsoluteFile());
0:                 System.out.println(updateFile.getAbsoluteFile().toURI());
0:                 FileOutputStream out = new FileOutputStream(updateFile);
0:                 out.write(firstTcpUri.toString().getBytes());
0:                 out.close();
1:                               
0: 		BrokerService bs1 = new BrokerService();
0: 		bs1.setUseJmx(false);
0: 		bs1.addConnector(firstTcpUri);
0: 		bs1.start();
1: 
0:                 // no failover uri's to start with, must be read from file...
0: 		ActiveMQConnectionFactory cf = new ActiveMQConnectionFactory("failover:()?updateURIsURL=file:///" + updateFile.getAbsoluteFile());
0: 		Connection connection = cf.createConnection();
0:                 connection.start();
0: 		Session session = connection.createSession(false, Session.AUTO_ACKNOWLEDGE);
0:                 Queue theQueue = session.createQueue(QUEUE_NAME);
0: 		MessageProducer producer = session.createProducer(theQueue);
0: 		MessageConsumer consumer = session.createConsumer(theQueue);
0: 		Message message = session.createTextMessage("Test message");
0: 		producer.send(message);
0:                 Message msg = consumer.receive(2000);
0:                 assertNotNull(msg);
1: 		
0: 		bs1.stop();
0:                 bs1.waitUntilStopped();
1: 
0: 		BrokerService bs2 = new BrokerService();
0: 		bs2.setUseJmx(false);
0: 		bs2.addConnector(secondTcpUri);
0: 		bs2.start();
1: 		
0: 		// add the transport uri for broker number 2
0:                 out = new FileOutputStream(updateFile, true);
0:                 out.write(",".getBytes());
0:                 out.write(secondTcpUri.toString().getBytes());
0:                 out.close();
1: 
0:                 producer.send(message);
0:                 msg = consumer.receive(2000);
0:                 assertNotNull(msg);
1: 	}
1: 	
1: }
============================================================================