1:d29ca2a: /**
1:57b4941:  * Licensed to the Apache Software Foundation (ASF) under one or more
1:57b4941:  * contributor license agreements.  See the NOTICE file distributed with
1:57b4941:  * this work for additional information regarding copyright ownership.
1:57b4941:  * The ASF licenses this file to You under the Apache License, Version 2.0
1:57b4941:  * (the "License"); you may not use this file except in compliance with
1:57b4941:  * the License.  You may obtain a copy of the License at
5:d29ca2a:  *
1:230a86c:  *      http://www.apache.org/licenses/LICENSE-2.0
1:b0c2a40:  *
1:d29ca2a:  * Unless required by applicable law or agreed to in writing, software
1:d29ca2a:  * distributed under the License is distributed on an "AS IS" BASIS,
1:d29ca2a:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:d29ca2a:  * See the License for the specific language governing permissions and
1:d29ca2a:  * limitations under the License.
1:d29ca2a:  */
1:d29ca2a: package org.apache.activemq;
25:d29ca2a: 
1:d29ca2a: import java.net.URISyntaxException;
1:d29ca2a: import java.util.Enumeration;
1:d29ca2a: import java.util.HashMap;
1:d29ca2a: import java.util.Vector;
1:d29ca2a: 
1:d29ca2a: import javax.jms.BytesMessage;
1:d29ca2a: import javax.jms.ConnectionFactory;
1:d29ca2a: import javax.jms.DeliveryMode;
1:d29ca2a: import javax.jms.Destination;
1:d29ca2a: import javax.jms.JMSException;
1:d29ca2a: import javax.jms.MapMessage;
1:d29ca2a: import javax.jms.MessageConsumer;
1:d29ca2a: import javax.jms.MessageEOFException;
1:d29ca2a: import javax.jms.MessageProducer;
1:d29ca2a: import javax.jms.ObjectMessage;
1:d29ca2a: import javax.jms.Session;
1:d29ca2a: import javax.jms.StreamMessage;
1:d29ca2a: import javax.jms.TextMessage;
1:d29ca2a: 
1:d29ca2a: import junit.framework.Test;
1:cdf05dc: 
1:d29ca2a: import org.apache.activemq.command.ActiveMQDestination;
1:d29ca2a: 
1:d29ca2a: /**
1:d29ca2a:  * Test cases used to test the JMS message consumer.
1:cdf05dc:  *
1:cdf05dc:  *
1:d29ca2a:  */
1:d29ca2a: public class JMSMessageTest extends JmsTestSupport {
1:d29ca2a: 
1:d29ca2a:     public ActiveMQDestination destination;
1:715bf26:     public int deliveryMode = DeliveryMode.NON_PERSISTENT;
1:d29ca2a:     public int prefetch;
1:d29ca2a:     public int ackMode;
1:715bf26:     public byte destinationType = ActiveMQDestination.QUEUE_TYPE;
1:d29ca2a:     public boolean durableConsumer;
1:715bf26:     public String connectURL = "vm://localhost?marshal=false";
1:d29ca2a: 
1:d29ca2a:     /**
1:d29ca2a:      * Run all these tests in both marshaling and non-marshaling mode.
1:d29ca2a:      */
1:d29ca2a:     public void initCombos() {
1:230a86c:         addCombinationValues("connectURL", new Object[] {"vm://localhost?marshal=false",
1:230a86c:                                                          "vm://localhost?marshal=true"});
1:230a86c:         addCombinationValues("deliveryMode", new Object[] {Integer.valueOf(DeliveryMode.NON_PERSISTENT),
1:230a86c:                                                            Integer.valueOf(DeliveryMode.PERSISTENT)});
1:230a86c:         addCombinationValues("destinationType", new Object[] {Byte.valueOf(ActiveMQDestination.QUEUE_TYPE)});
1:d29ca2a:     }
1:230a86c: 
1:7f5213b:     public void testTextMessage() throws Exception {
1:d29ca2a: 
1:d29ca2a:         // Receive a message with the JMS API
1:d29ca2a:         connection.start();
1:d29ca2a:         Session session = connection.createSession(false, Session.AUTO_ACKNOWLEDGE);
1:d29ca2a:         destination = createDestination(session, destinationType);
1:d29ca2a:         MessageConsumer consumer = session.createConsumer(destination);
1:d29ca2a:         MessageProducer producer = session.createProducer(destination);
1:230a86c: 
1:d29ca2a:         // Send the message.
1:d29ca2a:         {
1:d29ca2a:             TextMessage message = session.createTextMessage();
1:d29ca2a:             message.setText("Hi");
2:d29ca2a:             producer.send(message);
1:d29ca2a:         }
1:230a86c: 
1:d29ca2a:         // Check the Message
1:d29ca2a:         {
1:d29ca2a:             TextMessage message = (TextMessage)consumer.receive(1000);
1:d29ca2a:             assertNotNull(message);
1:230a86c:             assertEquals("Hi", message.getText());
1:d29ca2a:         }
1:230a86c: 
1:d29ca2a:         assertNull(consumer.receiveNoWait());
1:d29ca2a:     }
1:230a86c: 
1:d29ca2a:     public static Test suite() {
1:d29ca2a:         return suite(JMSMessageTest.class);
1:d29ca2a:     }
1:230a86c: 
1:d29ca2a:     public static void main(String[] args) {
1:d29ca2a:         junit.textui.TestRunner.run(suite());
1:d29ca2a:     }
1:d29ca2a: 
1:cdf05dc:     @Override
1:d29ca2a:     protected ConnectionFactory createConnectionFactory() throws URISyntaxException {
1:d29ca2a:         ActiveMQConnectionFactory factory = new ActiveMQConnectionFactory(connectURL);
1:d29ca2a:         return factory;
1:d29ca2a:     }
1:230a86c: 
1:7f5213b:     public void testBytesMessageLength() throws Exception {
1:d29ca2a: 
1:d29ca2a:         // Receive a message with the JMS API
1:d29ca2a:         connection.start();
1:d29ca2a:         Session session = connection.createSession(false, Session.AUTO_ACKNOWLEDGE);
1:d29ca2a:         destination = createDestination(session, destinationType);
1:d29ca2a:         MessageConsumer consumer = session.createConsumer(destination);
1:d29ca2a:         MessageProducer producer = session.createProducer(destination);
1:d29ca2a: 
1:230a86c:         // Send the message
1:d29ca2a:         {
1:d29ca2a:             BytesMessage message = session.createBytesMessage();
1:d29ca2a:             message.writeInt(1);
1:d29ca2a:             message.writeInt(2);
1:d29ca2a:             message.writeInt(3);
1:d29ca2a:             message.writeInt(4);
1:d29ca2a:             producer.send(message);
1:d29ca2a:         }
1:230a86c: 
1:d29ca2a:         // Check the message.
1:d29ca2a:         {
1:230a86c:             BytesMessage message = (BytesMessage)consumer.receive(1000);
1:d29ca2a:             assertNotNull(message);
1:230a86c:             assertEquals(16, message.getBodyLength());
1:d29ca2a:         }
1:230a86c: 
1:d29ca2a:         assertNull(consumer.receiveNoWait());
1:d29ca2a:     }
1:230a86c: 
1:7f5213b:     public void testObjectMessage() throws Exception {
1:d29ca2a: 
1:d29ca2a:         // Receive a message with the JMS API
1:d29ca2a:         connection.start();
1:d29ca2a:         Session session = connection.createSession(false, Session.AUTO_ACKNOWLEDGE);
1:d29ca2a:         destination = createDestination(session, destinationType);
1:d29ca2a:         MessageConsumer consumer = session.createConsumer(destination);
1:d29ca2a:         MessageProducer producer = session.createProducer(destination);
1:d29ca2a: 
1:d29ca2a:         // send the message.
1:d29ca2a:         {
1:d29ca2a:             ObjectMessage message = session.createObjectMessage();
1:d29ca2a:             message.setObject("Hi");
1:d29ca2a:             producer.send(message);
1:d29ca2a:         }
1:230a86c: 
1:d29ca2a:         // Check the message
1:d29ca2a:         {
1:d29ca2a:             ObjectMessage message = (ObjectMessage)consumer.receive(1000);
1:d29ca2a:             assertNotNull(message);
1:230a86c:             assertEquals("Hi", message.getObject());
1:d29ca2a:         }
1:d29ca2a:         assertNull(consumer.receiveNoWait());
1:d29ca2a:     }
1:230a86c: 
1:7f5213b:     public void testBytesMessage() throws Exception {
1:d29ca2a: 
1:d29ca2a:         // Receive a message with the JMS API
1:d29ca2a:         connection.start();
1:d29ca2a:         Session session = connection.createSession(false, Session.AUTO_ACKNOWLEDGE);
1:d29ca2a:         destination = createDestination(session, destinationType);
1:d29ca2a:         MessageConsumer consumer = session.createConsumer(destination);
1:d29ca2a:         MessageProducer producer = session.createProducer(destination);
1:d29ca2a: 
2:d29ca2a:         // Send the message
1:d29ca2a:         {
1:d29ca2a:             BytesMessage message = session.createBytesMessage();
1:d29ca2a:             message.writeBoolean(true);
1:d29ca2a:             producer.send(message);
1:d29ca2a:         }
1:230a86c: 
1:d29ca2a:         // Check the message
1:d29ca2a:         {
1:d29ca2a:             BytesMessage message = (BytesMessage)consumer.receive(1000);
1:d29ca2a:             assertNotNull(message);
1:230a86c:             assertTrue(message.readBoolean());
1:230a86c: 
1:d29ca2a:             try {
1:d29ca2a:                 message.readByte();
1:d29ca2a:                 fail("Expected exception not thrown.");
1:230a86c:             } catch (MessageEOFException e) {
1:d29ca2a:             }
1:230a86c: 
1:d29ca2a:         }
1:d29ca2a:         assertNull(consumer.receiveNoWait());
1:d29ca2a:     }
1:d29ca2a: 
1:7f5213b:     public void testStreamMessage() throws Exception {
1:d29ca2a: 
1:d29ca2a:         // Receive a message with the JMS API
1:d29ca2a:         connection.start();
1:d29ca2a:         Session session = connection.createSession(false, Session.AUTO_ACKNOWLEDGE);
1:d29ca2a:         destination = createDestination(session, destinationType);
1:d29ca2a:         MessageConsumer consumer = session.createConsumer(destination);
1:d29ca2a:         MessageProducer producer = session.createProducer(destination);
1:d29ca2a: 
1:d29ca2a:         // Send the message.
1:d29ca2a:         {
1:d29ca2a:             StreamMessage message = session.createStreamMessage();
1:d29ca2a:             message.writeString("This is a test to see how it works.");
1:d29ca2a:             producer.send(message);
1:d29ca2a:         }
1:230a86c: 
1:d29ca2a:         // Check the message.
1:d29ca2a:         {
1:230a86c:             StreamMessage message = (StreamMessage)consumer.receive(1000);
1:d29ca2a:             assertNotNull(message);
1:230a86c: 
1:230a86c:             // Invalid conversion should throw exception and not move the stream
1:230a86c:             // position.
1:d29ca2a:             try {
1:d29ca2a:                 message.readByte();
1:d29ca2a:                 fail("Should have received NumberFormatException");
1:d29ca2a:             } catch (NumberFormatException e) {
1:d29ca2a:             }
1:230a86c: 
1:230a86c:             assertEquals("This is a test to see how it works.", message.readString());
1:230a86c: 
1:230a86c:             // Invalid conversion should throw exception and not move the stream
1:230a86c:             // position.
1:d29ca2a:             try {
1:d29ca2a:                 message.readByte();
1:d29ca2a:                 fail("Should have received MessageEOFException");
2:d29ca2a:             } catch (MessageEOFException e) {
1:d29ca2a:             }
1:d29ca2a:         }
1:d29ca2a:         assertNull(consumer.receiveNoWait());
1:d29ca2a:     }
1:d29ca2a: 
1:7f5213b:     public void testMapMessage() throws Exception {
1:d29ca2a: 
1:d29ca2a:         // Receive a message with the JMS API
1:d29ca2a:         connection.start();
1:d29ca2a:         Session session = connection.createSession(false, Session.AUTO_ACKNOWLEDGE);
1:d29ca2a:         destination = createDestination(session, destinationType);
1:d29ca2a:         MessageConsumer consumer = session.createConsumer(destination);
1:d29ca2a:         MessageProducer producer = session.createProducer(destination);
1:d29ca2a: 
1:d29ca2a:         // send the message.
1:d29ca2a:         {
1:d29ca2a:             MapMessage message = session.createMapMessage();
1:d29ca2a:             message.setBoolean("boolKey", true);
1:d29ca2a:             producer.send(message);
1:d29ca2a:         }
1:230a86c: 
1:d29ca2a:         // get the message.
1:d29ca2a:         {
1:d29ca2a:             MapMessage message = (MapMessage)consumer.receive(1000);
1:d29ca2a:             assertNotNull(message);
1:230a86c:             assertTrue(message.getBoolean("boolKey"));
1:d29ca2a:         }
1:d29ca2a:         assertNull(consumer.receiveNoWait());
1:d29ca2a:     }
1:230a86c: 
1:d29ca2a:     static class ForeignMessage implements TextMessage {
1:d29ca2a: 
1:933eb2f:         public int deliveryMode;
1:933eb2f: 
1:d29ca2a:         private String messageId;
1:d29ca2a:         private long timestamp;
1:d29ca2a:         private String correlationId;
1:d29ca2a:         private Destination replyTo;
1:d29ca2a:         private Destination destination;
1:d29ca2a:         private boolean redelivered;
1:d29ca2a:         private String type;
1:d29ca2a:         private long expiration;
1:d29ca2a:         private int priority;
1:d29ca2a:         private String text;
1:cdf05dc:         private final HashMap<String, Object> props = new HashMap<String, Object>();
1:d29ca2a: 
1:cdf05dc:         @Override
1:d29ca2a:         public String getJMSMessageID() throws JMSException {
1:d29ca2a:             return messageId;
1:d29ca2a:         }
1:d29ca2a: 
1:cdf05dc:         @Override
1:d29ca2a:         public void setJMSMessageID(String arg0) throws JMSException {
1:d29ca2a:             messageId = arg0;
1:d29ca2a:         }
1:d29ca2a: 
1:cdf05dc:         @Override
1:d29ca2a:         public long getJMSTimestamp() throws JMSException {
1:d29ca2a:             return timestamp;
1:d29ca2a:         }
1:d29ca2a: 
1:cdf05dc:         @Override
1:d29ca2a:         public void setJMSTimestamp(long arg0) throws JMSException {
1:d29ca2a:             timestamp = arg0;
1:d29ca2a:         }
1:d29ca2a: 
1:cdf05dc:         @Override
1:d29ca2a:         public byte[] getJMSCorrelationIDAsBytes() throws JMSException {
1:d29ca2a:             return null;
1:d29ca2a:         }
1:230a86c: 
1:cdf05dc:         @Override
1:d29ca2a:         public void setJMSCorrelationIDAsBytes(byte[] arg0) throws JMSException {
1:d29ca2a:         }
1:d29ca2a: 
1:cdf05dc:         @Override
1:d29ca2a:         public void setJMSCorrelationID(String arg0) throws JMSException {
1:d29ca2a:             correlationId = arg0;
1:d29ca2a:         }
1:230a86c: 
1:cdf05dc:         @Override
1:d29ca2a:         public String getJMSCorrelationID() throws JMSException {
1:d29ca2a:             return correlationId;
1:d29ca2a:         }
1:d29ca2a: 
1:cdf05dc:         @Override
1:d29ca2a:         public Destination getJMSReplyTo() throws JMSException {
1:d29ca2a:             return replyTo;
1:d29ca2a:         }
1:230a86c: 
1:cdf05dc:         @Override
1:d29ca2a:         public void setJMSReplyTo(Destination arg0) throws JMSException {
1:d29ca2a:             replyTo = arg0;
1:d29ca2a:         }
1:d29ca2a: 
1:cdf05dc:         @Override
1:d29ca2a:         public Destination getJMSDestination() throws JMSException {
1:d29ca2a:             return destination;
1:d29ca2a:         }
1:d29ca2a: 
1:cdf05dc:         @Override
1:d29ca2a:         public void setJMSDestination(Destination arg0) throws JMSException {
1:d29ca2a:             destination = arg0;
1:d29ca2a:         }
1:d29ca2a: 
1:cdf05dc:         @Override
1:d29ca2a:         public int getJMSDeliveryMode() throws JMSException {
1:d29ca2a:             return deliveryMode;
1:d29ca2a:         }
1:d29ca2a: 
1:cdf05dc:         @Override
1:d29ca2a:         public void setJMSDeliveryMode(int arg0) throws JMSException {
1:d29ca2a:             deliveryMode = arg0;
1:d29ca2a:         }
1:d29ca2a: 
1:cdf05dc:         @Override
1:d29ca2a:         public boolean getJMSRedelivered() throws JMSException {
1:d29ca2a:             return redelivered;
1:d29ca2a:         }
1:d29ca2a: 
1:cdf05dc:         @Override
1:d29ca2a:         public void setJMSRedelivered(boolean arg0) throws JMSException {
1:230a86c:             redelivered = arg0;
1:d29ca2a:         }
1:d29ca2a: 
1:cdf05dc:         @Override
1:d29ca2a:         public String getJMSType() throws JMSException {
1:d29ca2a:             return type;
1:d29ca2a:         }
1:d29ca2a: 
1:cdf05dc:         @Override
1:d29ca2a:         public void setJMSType(String arg0) throws JMSException {
1:230a86c:             type = arg0;
1:d29ca2a:         }
1:d29ca2a: 
1:cdf05dc:         @Override
1:d29ca2a:         public long getJMSExpiration() throws JMSException {
1:d29ca2a:             return expiration;
1:d29ca2a:         }
1:d29ca2a: 
1:cdf05dc:         @Override
1:d29ca2a:         public void setJMSExpiration(long arg0) throws JMSException {
1:d29ca2a:             expiration = arg0;
1:d29ca2a:         }
1:d29ca2a: 
1:cdf05dc:         @Override
1:d29ca2a:         public int getJMSPriority() throws JMSException {
1:d29ca2a:             return priority;
1:d29ca2a:         }
1:d29ca2a: 
1:cdf05dc:         @Override
1:d29ca2a:         public void setJMSPriority(int arg0) throws JMSException {
1:230a86c:             priority = arg0;
1:d29ca2a:         }
1:d29ca2a: 
1:cdf05dc:         @Override
1:d29ca2a:         public void clearProperties() throws JMSException {
1:d29ca2a:         }
1:230a86c: 
1:cdf05dc:         @Override
1:d29ca2a:         public boolean propertyExists(String arg0) throws JMSException {
1:d29ca2a:             return false;
1:d29ca2a:         }
1:230a86c: 
1:cdf05dc:         @Override
1:d29ca2a:         public boolean getBooleanProperty(String arg0) throws JMSException {
1:d29ca2a:             return false;
1:d29ca2a:         }
1:230a86c: 
1:cdf05dc:         @Override
1:d29ca2a:         public byte getByteProperty(String arg0) throws JMSException {
1:d29ca2a:             return 0;
1:d29ca2a:         }
1:230a86c: 
1:cdf05dc:         @Override
1:d29ca2a:         public short getShortProperty(String arg0) throws JMSException {
1:d29ca2a:             return 0;
1:d29ca2a:         }
1:230a86c: 
1:cdf05dc:         @Override
1:d29ca2a:         public int getIntProperty(String arg0) throws JMSException {
1:d29ca2a:             return 0;
1:d29ca2a:         }
1:230a86c: 
1:cdf05dc:         @Override
1:d29ca2a:         public long getLongProperty(String arg0) throws JMSException {
1:d29ca2a:             return 0;
1:d29ca2a:         }
1:230a86c: 
1:cdf05dc:         @Override
1:d29ca2a:         public float getFloatProperty(String arg0) throws JMSException {
1:d29ca2a:             return 0;
1:d29ca2a:         }
1:230a86c: 
1:cdf05dc:         @Override
1:d29ca2a:         public double getDoubleProperty(String arg0) throws JMSException {
1:d29ca2a:             return 0;
1:d29ca2a:         }
1:230a86c: 
1:cdf05dc:         @Override
1:d29ca2a:         public String getStringProperty(String arg0) throws JMSException {
1:230a86c:             return (String)props.get(arg0);
1:d29ca2a:         }
1:230a86c: 
1:cdf05dc:         @Override
1:d29ca2a:         public Object getObjectProperty(String arg0) throws JMSException {
1:d29ca2a:             return props.get(arg0);
1:d29ca2a:         }
1:230a86c: 
1:cdf05dc:         @Override
1:c7d559f:         public Enumeration<?> getPropertyNames() throws JMSException {
1:933eb2f:             return new Vector<String>(props.keySet()).elements();
1:d29ca2a:         }
1:230a86c: 
1:cdf05dc:         @Override
1:d29ca2a:         public void setBooleanProperty(String arg0, boolean arg1) throws JMSException {
1:d29ca2a:         }
1:230a86c: 
1:cdf05dc:         @Override
1:d29ca2a:         public void setByteProperty(String arg0, byte arg1) throws JMSException {
1:d29ca2a:         }
1:230a86c: 
1:cdf05dc:         @Override
1:d29ca2a:         public void setShortProperty(String arg0, short arg1) throws JMSException {
1:d29ca2a:         }
1:230a86c: 
1:cdf05dc:         @Override
1:d29ca2a:         public void setIntProperty(String arg0, int arg1) throws JMSException {
1:d29ca2a:         }
1:230a86c: 
1:cdf05dc:         @Override
1:d29ca2a:         public void setLongProperty(String arg0, long arg1) throws JMSException {
1:d29ca2a:         }
1:230a86c: 
1:cdf05dc:         @Override
1:d29ca2a:         public void setFloatProperty(String arg0, float arg1) throws JMSException {
1:d29ca2a:         }
1:230a86c: 
1:cdf05dc:         @Override
1:d29ca2a:         public void setDoubleProperty(String arg0, double arg1) throws JMSException {
1:d29ca2a:         }
1:230a86c: 
1:cdf05dc:         @Override
1:d29ca2a:         public void setStringProperty(String arg0, String arg1) throws JMSException {
1:230a86c:             props.put(arg0, arg1);
1:d29ca2a:         }
1:230a86c: 
1:cdf05dc:         @Override
1:d29ca2a:         public void setObjectProperty(String arg0, Object arg1) throws JMSException {
1:230a86c:             props.put(arg0, arg1);
1:d29ca2a:         }
1:d29ca2a: 
1:cdf05dc:         @Override
1:d29ca2a:         public void acknowledge() throws JMSException {
1:d29ca2a:         }
1:230a86c: 
1:cdf05dc:         @Override
1:d29ca2a:         public void clearBody() throws JMSException {
1:d29ca2a:         }
1:d29ca2a: 
1:cdf05dc:         @Override
1:d29ca2a:         public void setText(String arg0) throws JMSException {
1:d29ca2a:             text = arg0;
1:d29ca2a:         }
1:230a86c: 
1:cdf05dc:         @Override
1:d29ca2a:         public String getText() throws JMSException {
1:d29ca2a:             return text;
1:d29ca2a:         }
1:d29ca2a:     }
1:d29ca2a: 
1:7f5213b:     public void testForeignMessage() throws Exception {
1:d29ca2a: 
1:d29ca2a:         // Receive a message with the JMS API
1:d29ca2a:         connection.start();
1:d29ca2a:         Session session = connection.createSession(false, Session.AUTO_ACKNOWLEDGE);
1:d29ca2a:         destination = createDestination(session, destinationType);
1:d29ca2a:         MessageConsumer consumer = session.createConsumer(destination);
1:d29ca2a:         MessageProducer producer = session.createProducer(destination);
1:d29ca2a: 
1:d29ca2a:         // Send the message.
1:d29ca2a:         {
1:d29ca2a:             ForeignMessage message = new ForeignMessage();
1:230a86c:             message.text = "Hello";
1:d29ca2a:             message.setStringProperty("test", "value");
1:9e6f62b:             long timeToLive = 10000L;
1:9e6f62b:             long start = System.currentTimeMillis();
1:514496e:             producer.send(message, deliveryMode, 7, timeToLive);
1:9e6f62b:             long end = System.currentTimeMillis();
1:230a86c: 
1:9e6f62b:             //validate jms spec 1.1 section 3.4.11 table 3.1
1:9e6f62b:             // JMSDestination, JMSDeliveryMode,  JMSExpiration, JMSPriority, JMSMessageID, and JMSTimestamp
1:9e6f62b:             //must be set by sending a message.
1:d29ca2a: 
1:cdf05dc:             assertNotNull(message.getJMSDestination());
1:514496e:             assertEquals(deliveryMode, message.getJMSDeliveryMode());
1:9e6f62b:             assertTrue(start  + timeToLive <= message.getJMSExpiration());
1:9e6f62b:             assertTrue(end + timeToLive >= message.getJMSExpiration());
1:9e6f62b:             assertEquals(7, message.getJMSPriority());
1:9e6f62b:             assertNotNull(message.getJMSMessageID());
1:9e6f62b:             assertTrue(start <= message.getJMSTimestamp());
1:9e6f62b:             assertTrue(end >= message.getJMSTimestamp());
1:d29ca2a:         }
1:d29ca2a: 
1:d29ca2a:         // Validate message is OK.
1:d29ca2a:         {
1:d29ca2a:             TextMessage message = (TextMessage)consumer.receive(1000);
1:d29ca2a:             assertNotNull(message);
1:230a86c:             assertEquals("Hello", message.getText());
1:230a86c:             assertEquals("value", message.getStringProperty("test"));
1:d29ca2a:         }
1:230a86c: 
1:d29ca2a:         assertNull(consumer.receiveNoWait());
1:d29ca2a:     }
1:d29ca2a: }
============================================================================
author:Hadrian Zbarcea
-------------------------------------------------------------------------------
commit:f9bec8f
author:Timothy Bish
-------------------------------------------------------------------------------
commit:514496e
/////////////////////////////////////////////////////////////////////////
1:             producer.send(message, deliveryMode, 7, timeToLive);
1:             assertEquals(deliveryMode, message.getJMSDeliveryMode());
/////////////////////////////////////////////////////////////////////////
author:Timothy A. Bish
-------------------------------------------------------------------------------
commit:c7d559f
/////////////////////////////////////////////////////////////////////////
1:         public Enumeration<?> getPropertyNames() throws JMSException {
commit:ef24cc9
commit:cdf05dc
/////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////
1: 
1:  *
1:  *
/////////////////////////////////////////////////////////////////////////
1:     @Override
/////////////////////////////////////////////////////////////////////////
1:         private final HashMap<String, Object> props = new HashMap<String, Object>();
1:         @Override
1:         @Override
1:         @Override
1:         @Override
1:         @Override
1:         @Override
1:         @Override
1:         @Override
1:         @Override
1:         @Override
1:         @Override
1:         @Override
1:         @Override
1:         @Override
1:         @Override
1:         @Override
1:         @Override
1:         @Override
1:         @Override
1:         @Override
1:         @Override
1:         @Override
1:         @Override
1:         @Override
1:         @Override
1:         @Override
1:         @Override
1:         @Override
1:         @Override
1:         @Override
1:         @Override
1:         @Override
1:         @Override
1:         @Override
1:         @Override
1:         @Override
1:         @Override
1:         @Override
1:         @Override
1:         @Override
1:         @Override
1:         @Override
1:         @Override
1:         @Override
1:         @Override
1:         @Override
1:         @Override
/////////////////////////////////////////////////////////////////////////
1:             assertNotNull(message.getJMSDestination());
author:Hiram R. Chirino
-------------------------------------------------------------------------------
commit:b0c2a40
/////////////////////////////////////////////////////////////////////////
1:  * 
commit:7bd8fb6
/////////////////////////////////////////////////////////////////////////
0: import javax.jms.Message;
commit:933eb2f
/////////////////////////////////////////////////////////////////////////
1:         public int deliveryMode;
1: 
0:         private HashMap<String, Object> props = new HashMap<String, Object>();
/////////////////////////////////////////////////////////////////////////
1:             return new Vector<String>(props.keySet()).elements();
commit:230a86c
/////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////
1:  *      http://www.apache.org/licenses/LICENSE-2.0
/////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////
1:         addCombinationValues("connectURL", new Object[] {"vm://localhost?marshal=false",
1:                                                          "vm://localhost?marshal=true"});
1:         addCombinationValues("deliveryMode", new Object[] {Integer.valueOf(DeliveryMode.NON_PERSISTENT),
1:                                                            Integer.valueOf(DeliveryMode.PERSISTENT)});
1:         addCombinationValues("destinationType", new Object[] {Byte.valueOf(ActiveMQDestination.QUEUE_TYPE)});
1: 
/////////////////////////////////////////////////////////////////////////
1: 
1:             assertEquals("Hi", message.getText());
1: 
/////////////////////////////////////////////////////////////////////////
1: 
/////////////////////////////////////////////////////////////////////////
1: 
1:             BytesMessage message = (BytesMessage)consumer.receive(1000);
1:             assertEquals(16, message.getBodyLength());
1: 
1: 
/////////////////////////////////////////////////////////////////////////
1: 
1: 
1:             assertEquals("Hi", message.getObject());
1: 
/////////////////////////////////////////////////////////////////////////
1: 
1:         // Send the message
1: 
1:             assertTrue(message.readBoolean());
1: 
1:             } catch (MessageEOFException e) {
1: 
/////////////////////////////////////////////////////////////////////////
1: 
1:             StreamMessage message = (StreamMessage)consumer.receive(1000);
1: 
1:             // Invalid conversion should throw exception and not move the stream
1:             // position.
1: 
1:             assertEquals("This is a test to see how it works.", message.readString());
1: 
1:             // Invalid conversion should throw exception and not move the stream
1:             // position.
/////////////////////////////////////////////////////////////////////////
1: 
1:             assertTrue(message.getBoolean("boolKey"));
1: 
/////////////////////////////////////////////////////////////////////////
1: 
1: 
/////////////////////////////////////////////////////////////////////////
1: 
/////////////////////////////////////////////////////////////////////////
1:             redelivered = arg0;
/////////////////////////////////////////////////////////////////////////
1:             type = arg0;
/////////////////////////////////////////////////////////////////////////
1:             priority = arg0;
1: 
1: 
1: 
1: 
1: 
1: 
1: 
1: 
1: 
1:             return (String)props.get(arg0);
1: 
1: 
1: 
1: 
1: 
1: 
1: 
1: 
1: 
1: 
1:             props.put(arg0, arg1);
1: 
1:             props.put(arg0, arg1);
1: 
1: 
/////////////////////////////////////////////////////////////////////////
1: 
1:             message.text = "Hello";
1: 
1:             assertEquals("Hello", message.getText());
1:             assertEquals("value", message.getStringProperty("test"));
1: 
commit:57b4941
/////////////////////////////////////////////////////////////////////////
1:  * Licensed to the Apache Software Foundation (ASF) under one or more
1:  * contributor license agreements.  See the NOTICE file distributed with
1:  * this work for additional information regarding copyright ownership.
1:  * The ASF licenses this file to You under the Apache License, Version 2.0
1:  * (the "License"); you may not use this file except in compliance with
1:  * the License.  You may obtain a copy of the License at
commit:7f5213b
/////////////////////////////////////////////////////////////////////////
1:     public void testTextMessage() throws Exception {
/////////////////////////////////////////////////////////////////////////
1:     public void testBytesMessageLength() throws Exception {
/////////////////////////////////////////////////////////////////////////
1:     public void testObjectMessage() throws Exception {
/////////////////////////////////////////////////////////////////////////
1:     public void testBytesMessage() throws Exception {
/////////////////////////////////////////////////////////////////////////
1:     public void testStreamMessage() throws Exception {
/////////////////////////////////////////////////////////////////////////
1:     public void testMapMessage() throws Exception {
/////////////////////////////////////////////////////////////////////////
1:     public void testForeignMessage() throws Exception {
commit:48b4869
/////////////////////////////////////////////////////////////////////////
0:  * Copyright 2005-2006 The Apache Software Foundation
commit:d29ca2a
/////////////////////////////////////////////////////////////////////////
1: /**
1:  *
0:  * Copyright 2004 The Apache Software Foundation
1:  *
0:  * Licensed under the Apache License, Version 2.0 (the "License");
0:  * you may not use this file except in compliance with the License.
0:  * You may obtain a copy of the License at
1:  *
0:  * http://www.apache.org/licenses/LICENSE-2.0
1:  *
1:  * Unless required by applicable law or agreed to in writing, software
1:  * distributed under the License is distributed on an "AS IS" BASIS,
1:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:  * See the License for the specific language governing permissions and
1:  * limitations under the License.
1:  */
1: package org.apache.activemq;
1: 
1: import java.net.URISyntaxException;
1: import java.util.Enumeration;
1: import java.util.HashMap;
1: import java.util.Vector;
1: 
1: import javax.jms.BytesMessage;
1: import javax.jms.ConnectionFactory;
1: import javax.jms.DeliveryMode;
1: import javax.jms.Destination;
1: import javax.jms.JMSException;
1: import javax.jms.MapMessage;
1: import javax.jms.MessageConsumer;
1: import javax.jms.MessageEOFException;
1: import javax.jms.MessageProducer;
1: import javax.jms.ObjectMessage;
1: import javax.jms.Session;
1: import javax.jms.StreamMessage;
1: import javax.jms.TextMessage;
1: 
1: import junit.framework.Test;
1: 
0: import org.apache.activemq.ActiveMQConnectionFactory;
1: import org.apache.activemq.command.ActiveMQDestination;
1: 
1: /**
1:  * Test cases used to test the JMS message consumer.
1:  * 
0:  * @version $Revision$
1:  */
1: public class JMSMessageTest extends JmsTestSupport {
1: 
1:     public ActiveMQDestination destination;
0:     public int deliveryMode;
1:     public int prefetch;
1:     public int ackMode;
0:     public byte destinationType;
1:     public boolean durableConsumer;
0:     public String connectURL;
1: 
1:     /**
1:      * Run all these tests in both marshaling and non-marshaling mode.
1:      */
1:     public void initCombos() {
0:         addCombinationValues("connectURL", new Object[] { 
0:                 "vm://localhost?marshal=false",
0:                 "vm://localhost?marshal=true" 
0:                 });
0:         addCombinationValues("deliveryMode", new Object[] { 
0:                 new Integer(DeliveryMode.NON_PERSISTENT),
0:                 new Integer(DeliveryMode.PERSISTENT) });
0:         addCombinationValues("destinationType", new Object[] { 
0:                 new Byte(ActiveMQDestination.QUEUE_TYPE)});
1:     }
1:     
0:     public void testTextMessage() throws Throwable {
1: 
1:         // Receive a message with the JMS API
1:         connection.start();
1:         Session session = connection.createSession(false, Session.AUTO_ACKNOWLEDGE);
1:         destination = createDestination(session, destinationType);
1:         MessageConsumer consumer = session.createConsumer(destination);
1:         MessageProducer producer = session.createProducer(destination);
1: 
1:         // Send the message.
1:         {
1:             TextMessage message = session.createTextMessage();
1:             message.setText("Hi");
1:             producer.send(message);
1:         }
1:         
1:         // Check the Message
1:         {
1:             TextMessage message = (TextMessage)consumer.receive(1000);
1:             assertNotNull(message);
0:             assertEquals( "Hi", message.getText() );
1:         }
1:         
1:         assertNull(consumer.receiveNoWait());
1:     }
1: 
1:     public static Test suite() {
1:         return suite(JMSMessageTest.class);
1:     }
1: 
1:     public static void main(String[] args) {
1:         junit.textui.TestRunner.run(suite());
1:     }
1: 
1:     protected ConnectionFactory createConnectionFactory() throws URISyntaxException {
1:         ActiveMQConnectionFactory factory = new ActiveMQConnectionFactory(connectURL);
1:         return factory;
1:     }
1:     
0:     public void testBytesMessageLength() throws Throwable {
1: 
1:         // Receive a message with the JMS API
1:         connection.start();
1:         Session session = connection.createSession(false, Session.AUTO_ACKNOWLEDGE);
1:         destination = createDestination(session, destinationType);
1:         MessageConsumer consumer = session.createConsumer(destination);
1:         MessageProducer producer = session.createProducer(destination);
1: 
1:         // Send the message
1:         {
1:             BytesMessage message = session.createBytesMessage();
1:             message.writeInt(1);
1:             message.writeInt(2);
1:             message.writeInt(3);
1:             message.writeInt(4);
1:             producer.send(message);
1:         }
1:         
1:         // Check the message.
1:         {
0:             BytesMessage message = (BytesMessage) consumer.receive(1000);
1:             assertNotNull(message);
0:             assertEquals(16, message.getBodyLength() );
1:         }
1:         
1:         assertNull(consumer.receiveNoWait());
1:     }
1:     
0:     public void testObjectMessage() throws Throwable {
1: 
1:         // Receive a message with the JMS API
1:         connection.start();
1:         Session session = connection.createSession(false, Session.AUTO_ACKNOWLEDGE);
1:         destination = createDestination(session, destinationType);
1:         MessageConsumer consumer = session.createConsumer(destination);
1:         MessageProducer producer = session.createProducer(destination);
1:         
1:         // send the message.
1:         {
1:             ObjectMessage message = session.createObjectMessage();
1:             message.setObject("Hi");
1:             producer.send(message);
1:         }
1:         
1:         // Check the message
1:         {
1:             ObjectMessage message = (ObjectMessage)consumer.receive(1000);
1:             assertNotNull(message);
0:             assertEquals( "Hi", message.getObject() );
1:         }
1:         assertNull(consumer.receiveNoWait());
1:     }
1:     
0:     public void testBytesMessage() throws Throwable {
1: 
1:         // Receive a message with the JMS API
1:         connection.start();
1:         Session session = connection.createSession(false, Session.AUTO_ACKNOWLEDGE);
1:         destination = createDestination(session, destinationType);
1:         MessageConsumer consumer = session.createConsumer(destination);
1:         MessageProducer producer = session.createProducer(destination);
1:         
1:         // Send the message 
1:         {
1:             BytesMessage message = session.createBytesMessage();
1:             message.writeBoolean(true);
1:             producer.send(message);
1:         }
1:         
1:         // Check the message
1:         {
1:             BytesMessage message = (BytesMessage)consumer.receive(1000);
1:             assertNotNull(message);
0:             assertTrue( message.readBoolean() );
1:     
1:             try {
1:                 message.readByte();
1:                 fail("Expected exception not thrown.");
1:             } catch (MessageEOFException e) {            
1:             }
1:             
1:         }
1:         assertNull(consumer.receiveNoWait());
1:     }
1: 
0:     public void testStreamMessage() throws Throwable {
1: 
1:         // Receive a message with the JMS API
1:         connection.start();
1:         Session session = connection.createSession(false, Session.AUTO_ACKNOWLEDGE);
1:         destination = createDestination(session, destinationType);
1:         MessageConsumer consumer = session.createConsumer(destination);
1:         MessageProducer producer = session.createProducer(destination);
1: 
1:         // Send the message.
1:         {
1:             StreamMessage message = session.createStreamMessage();
1:             message.writeString("This is a test to see how it works.");
1:             producer.send(message);
1:         }
1:         
1:         // Check the message.
1:         {
0:             StreamMessage message = (StreamMessage) consumer.receive(1000);
1:             assertNotNull(message);
1:             
0:             // Invalid conversion should throw exception and not move the stream position.
1:             try {
1:                 message.readByte();
1:                 fail("Should have received NumberFormatException");
1:             } catch (NumberFormatException e) {
1:             }
1:             
0:             assertEquals("This is a test to see how it works.", message.readString() );
1:     
0:             // Invalid conversion should throw exception and not move the stream position.
1:             try {
1:                 message.readByte();
1:                 fail("Should have received MessageEOFException");
1:             } catch (MessageEOFException e) {
1:             }
1:         }
1:         assertNull(consumer.receiveNoWait());
1:     }
1: 
0:     public void testMapMessage() throws Throwable {
1: 
1:         // Receive a message with the JMS API
1:         connection.start();
1:         Session session = connection.createSession(false, Session.AUTO_ACKNOWLEDGE);
1:         destination = createDestination(session, destinationType);
1:         MessageConsumer consumer = session.createConsumer(destination);
1:         MessageProducer producer = session.createProducer(destination);
1: 
1:         // send the message.
1:         {
1:             MapMessage message = session.createMapMessage();
1:             message.setBoolean("boolKey", true);
1:             producer.send(message);
1:         }
1:         
1:         // get the message.
1:         {
1:             MapMessage message = (MapMessage)consumer.receive(1000);
1:             assertNotNull(message);
0:             assertTrue( message.getBoolean("boolKey") );
1:         }
1:         assertNull(consumer.receiveNoWait());
1:     }
1:     
1:     static class ForeignMessage implements TextMessage {
1: 
1:         private String messageId;
1:         private long timestamp;
1:         private String correlationId;
1:         private Destination replyTo;
1:         private Destination destination;
0:         public int deliveryMode;
1:         private boolean redelivered;
1:         private String type;
1:         private long expiration;
1:         private int priority;
1:         private String text;
0:         HashMap props = new HashMap();
1: 
1:         public String getJMSMessageID() throws JMSException {
1:             return messageId;
1:         }
1: 
1:         public void setJMSMessageID(String arg0) throws JMSException {
1:             messageId = arg0;
1:         }
1: 
1:         public long getJMSTimestamp() throws JMSException {
1:             return timestamp;
1:         }
1: 
1:         public void setJMSTimestamp(long arg0) throws JMSException {
1:             timestamp = arg0;
1:         }
1: 
1:         public byte[] getJMSCorrelationIDAsBytes() throws JMSException {
1:             return null;
1:         }
1:         public void setJMSCorrelationIDAsBytes(byte[] arg0) throws JMSException {
1:         }
1: 
1:         public void setJMSCorrelationID(String arg0) throws JMSException {
1:             correlationId = arg0;
1:         }
1:         public String getJMSCorrelationID() throws JMSException {
1:             return correlationId;
1:         }
1: 
1:         public Destination getJMSReplyTo() throws JMSException {
1:             return replyTo;
1:         }
1:         public void setJMSReplyTo(Destination arg0) throws JMSException {
1:             replyTo = arg0;
1:         }
1: 
1:         public Destination getJMSDestination() throws JMSException {
1:             return destination;
1:         }
1: 
1:         public void setJMSDestination(Destination arg0) throws JMSException {
1:             destination = arg0;
1:         }
1: 
1:         public int getJMSDeliveryMode() throws JMSException {
1:             return deliveryMode;
1:         }
1: 
1:         public void setJMSDeliveryMode(int arg0) throws JMSException {
1:             deliveryMode = arg0;
1:         }
1: 
1:         public boolean getJMSRedelivered() throws JMSException {
1:             return redelivered;
1:         }
1: 
1:         public void setJMSRedelivered(boolean arg0) throws JMSException {
0:             redelivered=arg0;
1:         }
1: 
1:         public String getJMSType() throws JMSException {
1:             return type;
1:         }
1: 
1:         public void setJMSType(String arg0) throws JMSException {
0:             type=arg0;
1:         }
1: 
1:         public long getJMSExpiration() throws JMSException {
1:             return expiration;
1:         }
1: 
1:         public void setJMSExpiration(long arg0) throws JMSException {
1:             expiration = arg0;
1:         }
1: 
1:         public int getJMSPriority() throws JMSException {
1:             return priority;
1:         }
1: 
1:         public void setJMSPriority(int arg0) throws JMSException {
0:             priority=arg0;
1:         }
1: 
1:         public void clearProperties() throws JMSException {
1:         }
1:         public boolean propertyExists(String arg0) throws JMSException {
1:             return false;
1:         }
1:         public boolean getBooleanProperty(String arg0) throws JMSException {
1:             return false;
1:         }
1:         public byte getByteProperty(String arg0) throws JMSException {
1:             return 0;
1:         }
1:         public short getShortProperty(String arg0) throws JMSException {
1:             return 0;
1:         }
1:         public int getIntProperty(String arg0) throws JMSException {
1:             return 0;
1:         }
1:         public long getLongProperty(String arg0) throws JMSException {
1:             return 0;
1:         }
1:         public float getFloatProperty(String arg0) throws JMSException {
1:             return 0;
1:         }
1:         public double getDoubleProperty(String arg0) throws JMSException {
1:             return 0;
1:         }
1:         public String getStringProperty(String arg0) throws JMSException {
0:             return (String) props.get(arg0);
1:         }
1:         public Object getObjectProperty(String arg0) throws JMSException {
1:             return props.get(arg0);
1:         }
0:         public Enumeration getPropertyNames() throws JMSException {
0:             return new Vector(props.keySet()).elements();
1:         }
1:         public void setBooleanProperty(String arg0, boolean arg1) throws JMSException {
1:         }
1:         public void setByteProperty(String arg0, byte arg1) throws JMSException {
1:         }
1:         public void setShortProperty(String arg0, short arg1) throws JMSException {
1:         }
1:         public void setIntProperty(String arg0, int arg1) throws JMSException {
1:         }
1:         public void setLongProperty(String arg0, long arg1) throws JMSException {
1:         }
1:         public void setFloatProperty(String arg0, float arg1) throws JMSException {
1:         }
1:         public void setDoubleProperty(String arg0, double arg1) throws JMSException {
1:         }
1:         public void setStringProperty(String arg0, String arg1) throws JMSException {
0:             props.put( arg0, arg1);
1:         }
1:         public void setObjectProperty(String arg0, Object arg1) throws JMSException {
0:             props.put( arg0, arg1);
1:         }
1: 
1:         public void acknowledge() throws JMSException {
1:         }
1:         public void clearBody() throws JMSException {
1:         }
1: 
1:         public void setText(String arg0) throws JMSException {
1:             text = arg0;
1:         }
1:         public String getText() throws JMSException {
1:             return text;
1:         }
1:     }
1: 
0:     public void testForeignMessage() throws Throwable {
1: 
1:         // Receive a message with the JMS API
1:         connection.start();
1:         Session session = connection.createSession(false, Session.AUTO_ACKNOWLEDGE);
1:         destination = createDestination(session, destinationType);
1:         MessageConsumer consumer = session.createConsumer(destination);
1:         MessageProducer producer = session.createProducer(destination);
1:         
1:         // Send the message.
1:         {
1:             ForeignMessage message = new ForeignMessage();
0:             message.text= "Hello";
1:             message.setStringProperty("test", "value");
1:             producer.send(message);
1:         }
1:         
1:         // Validate message is OK.
1:         {
1:             TextMessage message = (TextMessage)consumer.receive(1000);
1:             assertNotNull(message);
0:             assertEquals( "Hello", message.getText() );
0:             assertEquals( "value", message.getStringProperty("test") );
1:         }
1:         
1:         assertNull(consumer.receiveNoWait());
1:     }
1: 
1:     
1: }
author:Gary Tully
-------------------------------------------------------------------------------
commit:715bf26
/////////////////////////////////////////////////////////////////////////
1:     public int deliveryMode = DeliveryMode.NON_PERSISTENT;
1:     public byte destinationType = ActiveMQDestination.QUEUE_TYPE;
1:     public String connectURL = "vm://localhost?marshal=false";
/////////////////////////////////////////////////////////////////////////
0: 
0:             // exception for jms destination as the format is provider defined so it is only set on the copy
0:             assertNull(message.getJMSDestination());
author:David Jencks
-------------------------------------------------------------------------------
commit:9e6f62b
/////////////////////////////////////////////////////////////////////////
1:             long timeToLive = 10000L;
1:             long start = System.currentTimeMillis();
0:             producer.send(message, Session.AUTO_ACKNOWLEDGE, 7, timeToLive);
1:             long end = System.currentTimeMillis();
0: 
0: 
1:             //validate jms spec 1.1 section 3.4.11 table 3.1
1:             // JMSDestination, JMSDeliveryMode,  JMSExpiration, JMSPriority, JMSMessageID, and JMSTimestamp
1:             //must be set by sending a message.
0:             assertEquals(destination, message.getJMSDestination());
0:             assertEquals(Session.AUTO_ACKNOWLEDGE, message.getJMSDeliveryMode());
1:             assertTrue(start  + timeToLive <= message.getJMSExpiration());
1:             assertTrue(end + timeToLive >= message.getJMSExpiration());
1:             assertEquals(7, message.getJMSPriority());
1:             assertNotNull(message.getJMSMessageID());
1:             assertTrue(start <= message.getJMSTimestamp());
1:             assertTrue(end >= message.getJMSTimestamp());
author:Robert Davies
-------------------------------------------------------------------------------
commit:d36c0d4
/////////////////////////////////////////////////////////////////////////
0:         		Integer.valueOf(DeliveryMode.NON_PERSISTENT),
0:         		Integer.valueOf(DeliveryMode.PERSISTENT) });
0:                 Byte.valueOf(ActiveMQDestination.QUEUE_TYPE)});
============================================================================