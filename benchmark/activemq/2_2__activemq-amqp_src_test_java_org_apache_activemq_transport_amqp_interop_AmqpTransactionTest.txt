1:272fb2b: /**
1:272fb2b:  * Licensed to the Apache Software Foundation (ASF) under one or more
1:272fb2b:  * contributor license agreements.  See the NOTICE file distributed with
1:272fb2b:  * this work for additional information regarding copyright ownership.
1:272fb2b:  * The ASF licenses this file to You under the Apache License, Version 2.0
1:272fb2b:  * (the "License"); you may not use this file except in compliance with
1:272fb2b:  * the License.  You may obtain a copy of the License at
1:272fb2b:  *
1:272fb2b:  *      http://www.apache.org/licenses/LICENSE-2.0
1:272fb2b:  *
1:272fb2b:  * Unless required by applicable law or agreed to in writing, software
1:272fb2b:  * distributed under the License is distributed on an "AS IS" BASIS,
1:272fb2b:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:272fb2b:  * See the License for the specific language governing permissions and
1:272fb2b:  * limitations under the License.
1:272fb2b:  */
1:272fb2b: package org.apache.activemq.transport.amqp.interop;
1:272fb2b: 
1:272fb2b: import static org.junit.Assert.assertEquals;
1:272fb2b: import static org.junit.Assert.assertNotNull;
1:4516c8d: import static org.junit.Assert.assertNull;
1:272fb2b: import static org.junit.Assert.assertTrue;
1:272fb2b: 
1:4516c8d: import java.util.ArrayList;
1:272fb2b: import java.util.concurrent.TimeUnit;
1:272fb2b: 
1:272fb2b: import org.apache.activemq.broker.jmx.QueueViewMBean;
1:272fb2b: import org.apache.activemq.transport.amqp.client.AmqpClient;
1:272fb2b: import org.apache.activemq.transport.amqp.client.AmqpClientTestSupport;
1:272fb2b: import org.apache.activemq.transport.amqp.client.AmqpConnection;
1:272fb2b: import org.apache.activemq.transport.amqp.client.AmqpMessage;
1:272fb2b: import org.apache.activemq.transport.amqp.client.AmqpReceiver;
1:272fb2b: import org.apache.activemq.transport.amqp.client.AmqpSender;
1:272fb2b: import org.apache.activemq.transport.amqp.client.AmqpSession;
1:0dd806f: import org.apache.qpid.proton.amqp.messaging.Accepted;
1:0dd806f: import org.apache.qpid.proton.amqp.messaging.Modified;
1:0dd806f: import org.apache.qpid.proton.amqp.messaging.Outcome;
1:0dd806f: import org.apache.qpid.proton.amqp.messaging.Rejected;
1:0dd806f: import org.apache.qpid.proton.amqp.messaging.Released;
1:272fb2b: import org.junit.Test;
1:272fb2b: 
1:272fb2b: /**
1:272fb2b:  * Test various aspects of Transaction support.
1:272fb2b:  */
1:272fb2b: public class AmqpTransactionTest extends AmqpClientTestSupport {
1:272fb2b: 
1:272fb2b:     @Test(timeout = 30000)
1:272fb2b:     public void testBeginAndCommitTransaction() throws Exception {
1:272fb2b:         AmqpClient client = createAmqpClient();
1:1ac8954:         AmqpConnection connection = trackConnection(client.connect());
1:272fb2b:         AmqpSession session = connection.createSession();
1:272fb2b:         assertNotNull(session);
1:272fb2b: 
1:272fb2b:         session.begin();
1:272fb2b:         assertTrue(session.isInTransaction());
1:272fb2b:         session.commit();
1:272fb2b: 
1:272fb2b:         connection.close();
1:272fb2b:     }
1:5d53aa2: 
1:272fb2b:     @Test(timeout = 30000)
1:272fb2b:     public void testBeginAndRollbackTransaction() throws Exception {
1:272fb2b:         AmqpClient client = createAmqpClient();
1:1ac8954:         AmqpConnection connection = trackConnection(client.connect());
1:272fb2b:         AmqpSession session = connection.createSession();
1:272fb2b:         assertNotNull(session);
1:5d53aa2: 
1:272fb2b:         session.begin();
1:272fb2b:         assertTrue(session.isInTransaction());
1:272fb2b:         session.rollback();
1:b4ab0e1: 
1:272fb2b:         connection.close();
1:272fb2b:     }
1:272fb2b: 
1:5d53aa2:     @Test(timeout = 60000)
1:272fb2b:     public void testSendMessageToQueueWithCommit() throws Exception {
1:272fb2b:         AmqpClient client = createAmqpClient();
1:1ac8954:         AmqpConnection connection = trackConnection(client.connect());
1:272fb2b:         AmqpSession session = connection.createSession();
1:272fb2b: 
1:272fb2b:         AmqpSender sender = session.createSender("queue://" + getTestName());
1:272fb2b:         final QueueViewMBean queue = getProxyToQueue(getTestName());
1:272fb2b: 
1:272fb2b:         session.begin();
1:272fb2b: 
1:272fb2b:         AmqpMessage message = new AmqpMessage();
1:272fb2b:         message.setText("Test-Message");
1:272fb2b:         sender.send(message);
1:b4ab0e1: 
1:272fb2b:         assertEquals(0, queue.getQueueSize());
1:4516c8d: 
1:272fb2b:         session.commit();
1:b4ab0e1: 
1:272fb2b:         assertEquals(1, queue.getQueueSize());
1:272fb2b: 
1:272fb2b:         connection.close();
1:272fb2b:     }
1:272fb2b: 
1:0dd806f:     @Test(timeout = 60000)
1:272fb2b:     public void testSendMessageToQueueWithRollback() throws Exception {
1:272fb2b:         AmqpClient client = createAmqpClient();
1:1ac8954:         AmqpConnection connection = trackConnection(client.connect());
1:272fb2b:         AmqpSession session = connection.createSession();
1:272fb2b: 
1:272fb2b:         AmqpSender sender = session.createSender("queue://" + getTestName());
1:272fb2b:         final QueueViewMBean queue = getProxyToQueue(getTestName());
1:272fb2b: 
1:272fb2b:         session.begin();
1:272fb2b: 
1:272fb2b:         AmqpMessage message = new AmqpMessage();
1:272fb2b:         message.setText("Test-Message");
1:272fb2b:         sender.send(message);
1:272fb2b: 
1:272fb2b:         assertEquals(0, queue.getQueueSize());
1:272fb2b: 
1:272fb2b:         session.rollback();
1:272fb2b: 
1:272fb2b:         assertEquals(0, queue.getQueueSize());
1:272fb2b: 
1:272fb2b:         connection.close();
1:272fb2b:     }
1:272fb2b: 
1:b4ab0e1:     @Test(timeout = 60000)
1:272fb2b:     public void testReceiveMessageWithCommit() throws Exception {
1:272fb2b:         AmqpClient client = createAmqpClient();
1:1ac8954:         AmqpConnection connection = trackConnection(client.connect());
1:272fb2b:         AmqpSession session = connection.createSession();
1:272fb2b: 
1:272fb2b:         AmqpSender sender = session.createSender("queue://" + getTestName());
1:272fb2b:         final QueueViewMBean queue = getProxyToQueue(getTestName());
1:272fb2b: 
1:272fb2b:         AmqpMessage message = new AmqpMessage();
1:272fb2b:         message.setText("Test-Message");
1:272fb2b:         sender.send(message);
1:272fb2b: 
1:272fb2b:         assertEquals(1, queue.getQueueSize());
1:272fb2b: 
1:272fb2b:         AmqpReceiver receiver = session.createReceiver("queue://" + getTestName());
1:272fb2b: 
1:272fb2b:         session.begin();
1:272fb2b: 
1:272fb2b:         receiver.flow(1);
1:272fb2b:         AmqpMessage received = receiver.receive(5, TimeUnit.SECONDS);
1:272fb2b:         assertNotNull(received);
1:272fb2b:         received.accept();
1:272fb2b: 
1:272fb2b:         session.commit();
1:272fb2b: 
1:272fb2b:         assertEquals(0, queue.getQueueSize());
1:272fb2b: 
1:272fb2b:         connection.close();
1:272fb2b:     }
1:272fb2b: 
1:272fb2b:     @Test(timeout = 60000)
1:35e8a52:     public void testReceiveAfterConnectionClose() throws Exception {
1:35e8a52:         AmqpClient client = createAmqpClient();
1:1ac8954:         AmqpConnection connection = trackConnection(client.connect());
1:35e8a52:         AmqpSession session = connection.createSession();
1:272fb2b: 
1:35e8a52:         AmqpSender sender = session.createSender(getTestName());
1:35e8a52:         final QueueViewMBean queue = getProxyToQueue(getTestName());
1:272fb2b: 
1:35e8a52:         AmqpMessage message = new AmqpMessage();
1:35e8a52:         message.setText("Test-Message");
1:35e8a52:         sender.send(message);
1:272fb2b: 
1:35e8a52:         assertEquals(1, queue.getQueueSize());
1:272fb2b: 
1:35e8a52:         AmqpReceiver receiver = session.createReceiver(getTestName());
1:272fb2b: 
1:35e8a52:         session.begin();
3:35e8a52: 
1:35e8a52:         receiver.flow(1);
1:35e8a52:         AmqpMessage received = receiver.receive(5, TimeUnit.SECONDS);
1:35e8a52:         assertNotNull(received);
1:35e8a52:         received.accept();
1:35e8a52: 
1:35e8a52:         // this will force a rollback on the TX (It should at least)
1:35e8a52:         connection.close();
1:35e8a52: 
1:35e8a52:         connection = client.connect();
1:35e8a52:         session = connection.createSession();
1:35e8a52:         receiver = session.createReceiver(getTestName());
1:35e8a52:         session.begin();
1:35e8a52:         receiver.flow(1);
1:35e8a52: 
1:35e8a52:         received = receiver.receive(5, TimeUnit.SECONDS);
1:35e8a52:         assertNotNull(received);
1:35e8a52:         received.accept();
1:35e8a52: 
1:35e8a52:         session.commit();
1:35e8a52: 
1:35e8a52:         assertEquals(0, queue.getQueueSize());
1:35e8a52: 
1:35e8a52:         connection.close();
1:35e8a52:     }
1:35e8a52: 
1:272fb2b:     @Test(timeout = 60000)
1:272fb2b:     public void testReceiveMessageWithRollback() throws Exception {
1:272fb2b:         AmqpClient client = createAmqpClient();
1:1ac8954:         AmqpConnection connection = trackConnection(client.connect());
1:272fb2b:         AmqpSession session = connection.createSession();
1:272fb2b: 
1:272fb2b:         AmqpSender sender = session.createSender("queue://" + getTestName());
1:272fb2b:         final QueueViewMBean queue = getProxyToQueue(getTestName());
1:272fb2b: 
1:272fb2b:         AmqpMessage message = new AmqpMessage();
1:272fb2b:         message.setText("Test-Message");
1:272fb2b:         sender.send(message);
1:272fb2b: 
1:272fb2b:         assertEquals(1, queue.getQueueSize());
1:272fb2b: 
1:272fb2b:         AmqpReceiver receiver = session.createReceiver("queue://" + getTestName());
1:272fb2b: 
1:272fb2b:         session.begin();
1:272fb2b: 
1:272fb2b:         receiver.flow(1);
1:272fb2b:         AmqpMessage received = receiver.receive(5, TimeUnit.SECONDS);
1:272fb2b:         assertNotNull(received);
1:272fb2b:         received.accept();
1:35e8a52: 
1:272fb2b:         session.rollback();
1:35e8a52: 
1:272fb2b:         assertEquals(1, queue.getQueueSize());
1:35e8a52: 
1:272fb2b:         connection.close();
1:272fb2b:     }
1:35e8a52: 
1:272fb2b:     @Test(timeout = 60000)
1:b4ab0e1:     public void testMultipleSessionReceiversInSingleTXNWithCommit() throws Exception {
1:b4ab0e1:         AmqpClient client = createAmqpClient();
1:1ac8954:         AmqpConnection connection = trackConnection(client.connect());
1:b4ab0e1: 
1:b4ab0e1:         // Load up the Queue with some messages
1:b4ab0e1:         {
1:b4ab0e1:             AmqpSession session = connection.createSession();
1:b4ab0e1:             AmqpSender sender = session.createSender("queue://" + getTestName());
1:b4ab0e1:             AmqpMessage message = new AmqpMessage();
1:b4ab0e1:             message.setText("Test-Message");
1:b4ab0e1:             sender.send(message);
1:b4ab0e1:             sender.send(message);
1:b4ab0e1:             sender.send(message);
1:b4ab0e1:             sender.close();
1:b4ab0e1:         }
1:b4ab0e1: 
1:b4ab0e1:         // Root TXN session controls all TXN send lifetimes.
1:b4ab0e1:         AmqpSession txnSession = connection.createSession();
1:b4ab0e1: 
1:b4ab0e1:         // Create some sender sessions
1:b4ab0e1:         AmqpSession session1 = connection.createSession();
1:b4ab0e1:         AmqpSession session2 = connection.createSession();
1:b4ab0e1:         AmqpSession session3 = connection.createSession();
1:b4ab0e1: 
1:b4ab0e1:         // Sender linked to each session
1:b4ab0e1:         AmqpReceiver receiver1 = session1.createReceiver("queue://" + getTestName());
1:b4ab0e1:         AmqpReceiver receiver2 = session2.createReceiver("queue://" + getTestName());
1:b4ab0e1:         AmqpReceiver receiver3 = session3.createReceiver("queue://" + getTestName());
1:b4ab0e1: 
1:b4ab0e1:         final QueueViewMBean queue = getProxyToQueue(getTestName());
1:b4ab0e1:         assertEquals(3, queue.getQueueSize());
1:b4ab0e1: 
1:b4ab0e1:         // Begin the transaction that all senders will operate in.
1:b4ab0e1:         txnSession.begin();
1:b4ab0e1: 
1:b4ab0e1:         assertTrue(txnSession.isInTransaction());
1:b4ab0e1: 
1:b4ab0e1:         receiver1.flow(1);
1:b4ab0e1:         receiver2.flow(1);
1:b4ab0e1:         receiver3.flow(1);
1:b4ab0e1: 
1:b4ab0e1:         AmqpMessage message1 = receiver1.receive(5, TimeUnit.SECONDS);
1:b4ab0e1:         AmqpMessage message2 = receiver2.receive(5, TimeUnit.SECONDS);
1:b4ab0e1:         AmqpMessage message3 = receiver3.receive(5, TimeUnit.SECONDS);
1:b4ab0e1: 
1:b4ab0e1:         message1.accept(txnSession);
1:b4ab0e1:         message2.accept(txnSession);
1:b4ab0e1:         message3.accept(txnSession);
1:b4ab0e1: 
1:b4ab0e1:         assertEquals(3, queue.getQueueSize());
1:b4ab0e1: 
1:b4ab0e1:         txnSession.commit();
1:b4ab0e1: 
1:b4ab0e1:         assertEquals(0, queue.getQueueSize());
1:b4ab0e1:     }
1:b4ab0e1: 
1:b4ab0e1:     @Test(timeout = 60000)
1:b4ab0e1:     public void testMultipleSessionReceiversInSingleTXNWithRollback() throws Exception {
1:b4ab0e1:         AmqpClient client = createAmqpClient();
1:1ac8954:         AmqpConnection connection = trackConnection(client.connect());
1:b4ab0e1: 
1:b4ab0e1:         // Load up the Queue with some messages
1:b4ab0e1:         {
1:b4ab0e1:             AmqpSession session = connection.createSession();
1:b4ab0e1:             AmqpSender sender = session.createSender("queue://" + getTestName());
1:b4ab0e1:             AmqpMessage message = new AmqpMessage();
1:b4ab0e1:             message.setText("Test-Message");
1:b4ab0e1:             sender.send(message);
1:b4ab0e1:             sender.send(message);
1:b4ab0e1:             sender.send(message);
1:b4ab0e1:             sender.close();
1:b4ab0e1:         }
1:b4ab0e1: 
1:b4ab0e1:         // Root TXN session controls all TXN send lifetimes.
1:b4ab0e1:         AmqpSession txnSession = connection.createSession();
1:b4ab0e1: 
1:b4ab0e1:         // Create some sender sessions
1:b4ab0e1:         AmqpSession session1 = connection.createSession();
1:b4ab0e1:         AmqpSession session2 = connection.createSession();
1:b4ab0e1:         AmqpSession session3 = connection.createSession();
1:b4ab0e1: 
1:b4ab0e1:         // Sender linked to each session
1:b4ab0e1:         AmqpReceiver receiver1 = session1.createReceiver("queue://" + getTestName());
1:b4ab0e1:         AmqpReceiver receiver2 = session2.createReceiver("queue://" + getTestName());
1:b4ab0e1:         AmqpReceiver receiver3 = session3.createReceiver("queue://" + getTestName());
1:b4ab0e1: 
1:b4ab0e1:         final QueueViewMBean queue = getProxyToQueue(getTestName());
1:b4ab0e1:         assertEquals(3, queue.getQueueSize());
1:b4ab0e1: 
1:b4ab0e1:         // Begin the transaction that all senders will operate in.
1:b4ab0e1:         txnSession.begin();
1:b4ab0e1: 
1:b4ab0e1:         assertTrue(txnSession.isInTransaction());
1:b4ab0e1: 
1:b4ab0e1:         receiver1.flow(1);
1:b4ab0e1:         receiver2.flow(1);
1:b4ab0e1:         receiver3.flow(1);
1:b4ab0e1: 
1:b4ab0e1:         AmqpMessage message1 = receiver1.receive(5, TimeUnit.SECONDS);
1:b4ab0e1:         AmqpMessage message2 = receiver2.receive(5, TimeUnit.SECONDS);
1:b4ab0e1:         AmqpMessage message3 = receiver3.receive(5, TimeUnit.SECONDS);
1:b4ab0e1: 
1:b4ab0e1:         message1.accept(txnSession);
1:b4ab0e1:         message2.accept(txnSession);
1:b4ab0e1:         message3.accept(txnSession);
1:b4ab0e1: 
1:b4ab0e1:         assertEquals(3, queue.getQueueSize());
1:b4ab0e1: 
1:b4ab0e1:         txnSession.rollback();
1:4516c8d: 
1:b4ab0e1:         assertEquals(3, queue.getQueueSize());
1:b4ab0e1:     }
1:b4ab0e1: 
1:b4ab0e1:     @Test(timeout = 60000)
1:b4ab0e1:     public void testMultipleSessionSendersInSingleTXNWithCommit() throws Exception {
1:b4ab0e1:         AmqpClient client = createAmqpClient();
1:1ac8954:         AmqpConnection connection = trackConnection(client.connect());
1:b4ab0e1: 
1:b4ab0e1:         // Root TXN session controls all TXN send lifetimes.
1:b4ab0e1:         AmqpSession txnSession = connection.createSession();
1:b4ab0e1: 
1:b4ab0e1:         // Create some sender sessions
1:b4ab0e1:         AmqpSession session1 = connection.createSession();
1:b4ab0e1:         AmqpSession session2 = connection.createSession();
1:b4ab0e1:         AmqpSession session3 = connection.createSession();
1:b4ab0e1: 
1:b4ab0e1:         // Sender linked to each session
1:b4ab0e1:         AmqpSender sender1 = session1.createSender("queue://" + getTestName());
1:b4ab0e1:         AmqpSender sender2 = session2.createSender("queue://" + getTestName());
1:b4ab0e1:         AmqpSender sender3 = session3.createSender("queue://" + getTestName());
1:b4ab0e1: 
1:b4ab0e1:         final QueueViewMBean queue = getProxyToQueue(getTestName());
1:b4ab0e1:         assertEquals(0, queue.getQueueSize());
1:b4ab0e1: 
1:b4ab0e1:         // Begin the transaction that all senders will operate in.
1:b4ab0e1:         txnSession.begin();
1:b4ab0e1: 
1:b4ab0e1:         AmqpMessage message = new AmqpMessage();
1:b4ab0e1:         message.setText("Test-Message");
1:b4ab0e1: 
1:b4ab0e1:         assertTrue(txnSession.isInTransaction());
1:b4ab0e1: 
1:b4ab0e1:         sender1.send(message, txnSession.getTransactionId());
1:b4ab0e1:         sender2.send(message, txnSession.getTransactionId());
1:b4ab0e1:         sender3.send(message, txnSession.getTransactionId());
1:b4ab0e1: 
1:b4ab0e1:         assertEquals(0, queue.getQueueSize());
1:b4ab0e1: 
1:b4ab0e1:         txnSession.commit();
1:b4ab0e1: 
1:b4ab0e1:         assertEquals(3, queue.getQueueSize());
1:b4ab0e1:     }
1:b4ab0e1: 
1:b4ab0e1:     @Test(timeout = 60000)
1:b4ab0e1:     public void testMultipleSessionSendersInSingleTXNWithRollback() throws Exception {
1:b4ab0e1:         AmqpClient client = createAmqpClient();
1:1ac8954:         AmqpConnection connection = trackConnection(client.connect());
1:b4ab0e1: 
1:b4ab0e1:         // Root TXN session controls all TXN send lifetimes.
1:b4ab0e1:         AmqpSession txnSession = connection.createSession();
1:b4ab0e1: 
1:b4ab0e1:         // Create some sender sessions
1:b4ab0e1:         AmqpSession session1 = connection.createSession();
1:b4ab0e1:         AmqpSession session2 = connection.createSession();
1:b4ab0e1:         AmqpSession session3 = connection.createSession();
1:b4ab0e1: 
1:b4ab0e1:         // Sender linked to each session
1:b4ab0e1:         AmqpSender sender1 = session1.createSender("queue://" + getTestName());
1:b4ab0e1:         AmqpSender sender2 = session2.createSender("queue://" + getTestName());
1:b4ab0e1:         AmqpSender sender3 = session3.createSender("queue://" + getTestName());
1:b4ab0e1: 
1:b4ab0e1:         final QueueViewMBean queue = getProxyToQueue(getTestName());
1:b4ab0e1:         assertEquals(0, queue.getQueueSize());
1:b4ab0e1: 
1:b4ab0e1:         // Begin the transaction that all senders will operate in.
1:b4ab0e1:         txnSession.begin();
1:b4ab0e1: 
1:b4ab0e1:         AmqpMessage message = new AmqpMessage();
1:b4ab0e1:         message.setText("Test-Message");
1:b4ab0e1: 
1:b4ab0e1:         assertTrue(txnSession.isInTransaction());
1:b4ab0e1: 
1:b4ab0e1:         sender1.send(message, txnSession.getTransactionId());
1:b4ab0e1:         sender2.send(message, txnSession.getTransactionId());
1:b4ab0e1:         sender3.send(message, txnSession.getTransactionId());
1:b4ab0e1: 
1:b4ab0e1:         assertEquals(0, queue.getQueueSize());
1:b4ab0e1: 
1:b4ab0e1:         txnSession.rollback();
1:272fb2b: 
1:b4ab0e1:         assertEquals(0, queue.getQueueSize());
1:b4ab0e1:     }
1:272fb2b: 
1:272fb2b:     @Test(timeout = 60000)
1:0dd806f:     public void testAcceptedButNotSettledInTXRemainsAquiredCanBeAccepted() throws Exception {
1:0dd806f:         doTestAcceptedButNotSettledInTXRemainsAquired(Accepted.getInstance());
1:0dd806f:     }
1:0dd806f: 
1:0dd806f:     @Test(timeout = 60000)
1:0dd806f:     public void testAcceptedButNotSettledInTXRemainsAquiredCanBeReleased() throws Exception {
1:0dd806f:         doTestAcceptedButNotSettledInTXRemainsAquired(Released.getInstance());
1:0dd806f:     }
1:0dd806f: 
1:0dd806f:     @Test(timeout = 60000)
1:0dd806f:     public void testAcceptedButNotSettledInTXRemainsAquiredCanBeRejected() throws Exception {
1:0dd806f:         doTestAcceptedButNotSettledInTXRemainsAquired(new Rejected());
1:0dd806f:     }
1:0dd806f: 
1:0dd806f:     @Test(timeout = 60000)
1:0dd806f:     public void testAcceptedButNotSettledInTXRemainsAquiredCanBeModifiedAsFailed() throws Exception {
1:0dd806f:         Modified outcome = new Modified();
1:0dd806f:         outcome.setDeliveryFailed(true);
1:0dd806f:         doTestAcceptedButNotSettledInTXRemainsAquired(outcome);
1:0dd806f:     }
1:0dd806f: 
1:0dd806f:     @Test(timeout = 60000)
1:0dd806f:     public void testAcceptedButNotSettledInTXRemainsAquiredCanBeModifiedAsUndeliverable() throws Exception {
1:0dd806f:         Modified outcome = new Modified();
1:0dd806f:         outcome.setDeliveryFailed(true);
1:0dd806f:         outcome.setUndeliverableHere(true);
1:0dd806f:         doTestAcceptedButNotSettledInTXRemainsAquired(outcome);
1:0dd806f:     }
1:0dd806f: 
1:0dd806f:     private void doTestAcceptedButNotSettledInTXRemainsAquired(Outcome outcome) throws Exception {
1:0dd806f: 
1:0dd806f:         AmqpClient client = createAmqpClient();
1:1ac8954:         AmqpConnection connection = trackConnection(client.connect());
1:0dd806f:         AmqpSession session = connection.createSession();
1:0dd806f: 
1:0dd806f:         AmqpSender sender = session.createSender("queue://" + getTestName());
1:0dd806f:         AmqpReceiver receiver = session.createReceiver("queue://" + getTestName());
1:0dd806f: 
1:0dd806f:         final QueueViewMBean queue = getProxyToQueue(getTestName());
1:0dd806f: 
1:0dd806f:         AmqpMessage message = new AmqpMessage();
1:0dd806f:         message.setText("Test-Message");
1:0dd806f:         sender.send(message);
1:0dd806f: 
1:0dd806f:         session.begin();
1:0dd806f: 
1:0dd806f:         receiver.flow(10);
1:0dd806f:         AmqpMessage received = receiver.receive(5, TimeUnit.SECONDS);
1:0dd806f:         assertNotNull(received);
1:0dd806f:         received.accept(false);
1:0dd806f: 
1:0dd806f:         session.rollback();
1:0dd806f: 
1:0dd806f:         // Message should remain acquired an not be redelivered.
1:0dd806f:         assertEquals(1, queue.getQueueSize());
1:0dd806f:         assertNull(receiver.receive(2, TimeUnit.SECONDS));
1:0dd806f: 
1:0dd806f:         if (outcome instanceof Released || outcome instanceof Rejected) {
1:0dd806f:             // Receiver should be able to release the still acquired message and the
1:0dd806f:             // broker should redispatch it to the client again.
1:0dd806f:             received.release();
1:0dd806f:             received = receiver.receive(3, TimeUnit.SECONDS);
1:0dd806f:             assertNotNull(received);
1:0dd806f:             received.accept();
1:0dd806f:             received = receiver.receive(2, TimeUnit.SECONDS);
1:0dd806f:             assertNull(received);
1:0dd806f:             assertEquals(0, queue.getQueueSize());
1:0dd806f:         } else if (outcome instanceof Accepted) {
1:0dd806f:             // Receiver should be able to accept the still acquired message and the
1:0dd806f:             // broker should then mark it as consumed.
1:0dd806f:             received.accept();
1:0dd806f:             received = receiver.receive(2, TimeUnit.SECONDS);
1:0dd806f:             assertNull(received);
1:0dd806f:             assertEquals(0, queue.getQueueSize());
1:0dd806f:         } else if (outcome instanceof Modified) {
1:0dd806f:             // Depending on the undeliverable here state the message will either be
1:0dd806f:             // redelivered or DLQ'd
1:0dd806f:             Modified modified = (Modified) outcome;
1:0dd806f:             received.modified(Boolean.TRUE.equals(modified.getDeliveryFailed()), Boolean.TRUE.equals(modified.getUndeliverableHere()));
1:0dd806f:             if (Boolean.TRUE.equals(modified.getUndeliverableHere())) {
1:0dd806f:                 received = receiver.receive(2, TimeUnit.SECONDS);
1:0dd806f:                 assertNull(received);
1:0dd806f:                 assertEquals(0, queue.getQueueSize());
1:0dd806f:             } else {
1:0dd806f:                 received = receiver.receive(3, TimeUnit.SECONDS);
1:0dd806f:                 assertNotNull(received);
1:0dd806f:                 received.accept();
1:0dd806f:                 received = receiver.receive(2, TimeUnit.SECONDS);
1:0dd806f:                 assertNull(received);
1:0dd806f:                 assertEquals(0, queue.getQueueSize());
1:0dd806f:             }
1:0dd806f:         }
1:0dd806f: 
1:0dd806f:         connection.close();
1:0dd806f:     }
1:0dd806f: 
1:0dd806f:     @Test(timeout = 60000)
1:0dd806f:     public void testTransactionallyAcquiredMessageCanBeTransactionallyConsumed() throws Exception {
1:0dd806f: 
1:0dd806f:         AmqpClient client = createAmqpClient();
1:1ac8954:         AmqpConnection connection = trackConnection(client.connect());
1:0dd806f:         AmqpSession session = connection.createSession();
1:0dd806f: 
1:0dd806f:         AmqpSender sender = session.createSender("queue://" + getTestName());
1:0dd806f:         AmqpReceiver receiver = session.createReceiver("queue://" + getTestName());
1:0dd806f: 
1:0dd806f:         final QueueViewMBean queue = getProxyToQueue(getTestName());
1:0dd806f: 
1:0dd806f:         AmqpMessage message = new AmqpMessage();
1:0dd806f:         message.setText("Test-Message");
1:0dd806f:         sender.send(message);
1:0dd806f: 
1:0dd806f:         session.begin();
1:0dd806f: 
1:0dd806f:         receiver.flow(10);
1:0dd806f:         AmqpMessage received = receiver.receive(5, TimeUnit.SECONDS);
1:0dd806f:         assertNotNull(received);
1:0dd806f:         received.accept(false);
1:0dd806f: 
1:0dd806f:         session.rollback();
1:0dd806f: 
1:0dd806f:         // Message should remain acquired an not be redelivered.
1:0dd806f:         assertEquals(1, queue.getQueueSize());
1:0dd806f:         assertNull(receiver.receive(1, TimeUnit.SECONDS));
1:0dd806f: 
1:0dd806f:         // Consume under TX but settle this time
1:0dd806f:         session.begin();
1:0dd806f:         received.accept(false);
1:0dd806f:         session.rollback();
1:0dd806f: 
1:0dd806f:         // Should still be acquired
1:0dd806f:         assertEquals(1, queue.getQueueSize());
1:0dd806f:         assertNull(receiver.receive(1, TimeUnit.SECONDS));
1:0dd806f: 
1:0dd806f:         // Consume under TX and settle but rollback, message should be redelivered.
1:0dd806f:         session.begin();
1:0dd806f:         received.accept();
1:0dd806f:         session.rollback();
1:0dd806f: 
1:0dd806f:         assertEquals(1, queue.getQueueSize());
1:0dd806f:         received = receiver.receive(1, TimeUnit.SECONDS);
1:0dd806f:         assertNotNull(received);
1:0dd806f: 
1:0dd806f:         // Consume under TX and commit it this time.
1:0dd806f:         session.begin();
1:0dd806f:         received.accept(false);
1:0dd806f:         session.commit();
1:0dd806f: 
1:0dd806f:         // Check that it is now consumed and no more message available
1:0dd806f:         assertTrue(received.getWrappedDelivery().remotelySettled());
1:0dd806f:         assertEquals(0, queue.getQueueSize());
1:0dd806f:         assertNull(receiver.receive(1, TimeUnit.SECONDS));
1:0dd806f: 
1:0dd806f:         connection.close();
1:0dd806f:     }
1:0dd806f: 
1:4516c8d:     //----- Tests Ported from AmqpNetLite client -----------------------------//
1:4516c8d: 
1:4516c8d:     @Test(timeout = 60000)
1:4516c8d:     public void testSendersCommitAndRollbackWithMultipleSessionsInSingleTX() throws Exception {
1:4516c8d:         final int NUM_MESSAGES = 5;
1:4516c8d: 
1:4516c8d:         AmqpClient client = createAmqpClient();
1:1ac8954:         AmqpConnection connection = trackConnection(client.connect());
1:4516c8d: 
1:4516c8d:         // Root TXN session controls all TXN send lifetimes.
1:4516c8d:         AmqpSession txnSession = connection.createSession();
1:4516c8d: 
1:4516c8d:         // Normal Session which won't create an TXN itself
1:4516c8d:         AmqpSession session = connection.createSession();
1:4516c8d: 
1:4516c8d:         AmqpSender sender = session.createSender("queue://" + getTestName());
1:4516c8d: 
1:4516c8d:         // Commit TXN work from a sender.
1:4516c8d:         txnSession.begin();
1:4516c8d:         for (int i = 0; i < NUM_MESSAGES; ++i) {
1:4516c8d:             AmqpMessage message = new AmqpMessage();
1:4516c8d:             message.setText("Test-Message");
1:4516c8d:             sender.send(message, txnSession.getTransactionId());
1:4516c8d:         }
1:4516c8d:         txnSession.commit();
1:4516c8d: 
1:4516c8d:         // Rollback an additional batch of TXN work from a sender.
1:4516c8d:         txnSession.begin();
1:4516c8d:         for (int i = 0; i < NUM_MESSAGES; ++i) {
1:4516c8d:             AmqpMessage message = new AmqpMessage();
1:4516c8d:             message.setText("Test-Message");
1:4516c8d:             sender.send(message, txnSession.getTransactionId());
1:4516c8d:         }
1:4516c8d:         txnSession.rollback();
1:4516c8d: 
1:4516c8d:         // Commit more TXN work from a sender.
1:4516c8d:         txnSession.begin();
1:4516c8d:         for (int i = 0; i < NUM_MESSAGES; ++i) {
1:4516c8d:             AmqpMessage message = new AmqpMessage();
1:4516c8d:             message.setText("Test-Message");
1:4516c8d:             sender.send(message, txnSession.getTransactionId());
1:4516c8d:         }
1:4516c8d:         txnSession.commit();
1:4516c8d: 
1:4516c8d:         AmqpReceiver receiver = session.createReceiver("queue://" + getTestName());
1:4516c8d:         receiver.flow(NUM_MESSAGES * 2);
1:4516c8d:         for (int i = 0; i < NUM_MESSAGES * 2; ++i) {
1:4516c8d:             AmqpMessage message = receiver.receive(5, TimeUnit.SECONDS);
2:4516c8d:             assertNotNull(message);
1:4516c8d:             message.accept(txnSession);
1:4516c8d:         }
1:4516c8d: 
1:4516c8d:         connection.close();
1:4516c8d:     }
1:4516c8d: 
1:4516c8d:     @Test(timeout = 60000)
1:4516c8d:     public void testReceiversCommitAndRollbackWithMultipleSessionsInSingleTX() throws Exception {
1:4516c8d:         final int NUM_MESSAGES = 10;
1:5d53aa2: 
1:4516c8d:         AmqpClient client = createAmqpClient();
1:1ac8954:         AmqpConnection connection = trackConnection(client.connect());
1:5d53aa2: 
1:4516c8d:         // Root TXN session controls all TXN send lifetimes.
1:4516c8d:         AmqpSession txnSession = connection.createSession();
1:4516c8d: 
1:4516c8d:         // Normal Session which won't create an TXN itself
1:4516c8d:         AmqpSession session = connection.createSession();
1:4516c8d:         AmqpSender sender = session.createSender("queue://" + getTestName());
1:4516c8d: 
1:4516c8d:         for (int i = 0; i < NUM_MESSAGES + 1; ++i) {
1:4516c8d:             AmqpMessage message = new AmqpMessage();
1:4516c8d:             message.setText("Test-Message");
1:4516c8d:             message.setApplicationProperty("msgId", i);
1:4516c8d:             sender.send(message, txnSession.getTransactionId());
1:4516c8d:         }
1:4516c8d: 
1:4516c8d:         // Read all messages from the Queue, do not accept them yet.
1:4516c8d:         AmqpReceiver receiver = session.createReceiver("queue://" + getTestName());
1:4516c8d:         ArrayList<AmqpMessage> messages = new ArrayList<>(NUM_MESSAGES);
1:4516c8d:         receiver.flow((NUM_MESSAGES + 2) * 2);
1:4516c8d:         for (int i = 0; i < NUM_MESSAGES; ++i) {
1:4516c8d:             AmqpMessage message = receiver.receive(5, TimeUnit.SECONDS);
1:4516c8d:             assertNotNull(message);
1:4516c8d:             messages.add(message);
1:5d53aa2:         }
1:4516c8d: 
1:4516c8d:         // Commit half the consumed messages
1:4516c8d:         txnSession.begin();
1:4516c8d:         for (int i = 0; i < NUM_MESSAGES / 2; ++i) {
1:4516c8d:             messages.get(i).accept(txnSession);
1:4516c8d:         }
1:4516c8d:         txnSession.commit();
1:4516c8d: 
1:4516c8d:         // Rollback the other half the consumed messages
1:4516c8d:         txnSession.begin();
1:4516c8d:         for (int i = NUM_MESSAGES / 2; i < NUM_MESSAGES; ++i) {
1:4516c8d:             messages.get(i).accept(txnSession);
1:4516c8d:         }
1:4516c8d:         txnSession.rollback();
1:4516c8d: 
1:5d53aa2:         {
1:5d53aa2:             AmqpMessage message = receiver.receive(5, TimeUnit.SECONDS);
1:5d53aa2:             assertNotNull(message);
1:4516c8d:             assertEquals(NUM_MESSAGES, message.getApplicationProperty("msgId"));
1:4516c8d:             message.release();
1:4516c8d:         }
1:5d53aa2: 
1:4516c8d:         // Commit the other half the consumed messages
1:4516c8d:         // This is a variation from the .NET client tests which doesn't settle the
1:4516c8d:         // messages in the TX until commit is called but on ActiveMQ they will be
1:4516c8d:         // redispatched regardless and not stay in the acquired state.
1:4516c8d:         txnSession.begin();
1:4516c8d:         for (int i = NUM_MESSAGES / 2; i < NUM_MESSAGES; ++i) {
1:4516c8d:             AmqpMessage message = receiver.receive(5, TimeUnit.SECONDS);
1:4516c8d:             assertNotNull(message);
1:4516c8d:             message.accept();
1:4516c8d:         }
1:4516c8d:         txnSession.commit();
1:4516c8d: 
1:4516c8d:         // The final message should still be pending.
1:4516c8d:         {
1:4516c8d:             AmqpMessage message = receiver.receive(5, TimeUnit.SECONDS);
1:5d53aa2:             receiver.flow(1);
1:4516c8d:             assertNotNull(message);
1:4516c8d:             assertEquals(NUM_MESSAGES, message.getApplicationProperty("msgId"));
1:4516c8d:             message.release();
1:4516c8d:         }
1:4516c8d: 
1:4516c8d:         connection.close();
1:4516c8d:     }
1:4516c8d: 
1:4516c8d:     @Test(timeout = 60000)
1:4516c8d:     public void testCommitAndRollbackWithMultipleSessionsInSingleTX() throws Exception {
1:4516c8d:         final int NUM_MESSAGES = 10;
1:4516c8d: 
1:4516c8d:         AmqpClient client = createAmqpClient();
1:1ac8954:         AmqpConnection connection = trackConnection(client.connect());
1:4516c8d: 
1:4516c8d:         // Root TXN session controls all TXN send lifetimes.
1:4516c8d:         AmqpSession txnSession = connection.createSession();
1:4516c8d: 
1:4516c8d:         // Normal Session which won't create an TXN itself
1:4516c8d:         AmqpSession session = connection.createSession();
1:4516c8d:         AmqpSender sender = session.createSender("queue://" + getTestName());
1:4516c8d: 
1:4516c8d:         for (int i = 0; i < NUM_MESSAGES; ++i) {
1:4516c8d:             AmqpMessage message = new AmqpMessage();
1:4516c8d:             message.setText("Test-Message");
1:4516c8d:             message.setApplicationProperty("msgId", i);
1:5d53aa2:             sender.send(message, txnSession.getTransactionId());
1:4516c8d:         }
1:4516c8d: 
1:4516c8d:         // Read all messages from the Queue, do not accept them yet.
1:4516c8d:         AmqpReceiver receiver = session.createReceiver("queue://" + getTestName());
1:5d53aa2:         receiver.flow(2);
1:4516c8d:         AmqpMessage message1 = receiver.receive(5, TimeUnit.SECONDS);
1:4516c8d:         AmqpMessage message2 = receiver.receive(5, TimeUnit.SECONDS);
1:4516c8d: 
1:4516c8d:         // Accept the first one in a TXN and send a new message in that TXN as well
1:4516c8d:         txnSession.begin();
1:4516c8d:         {
1:4516c8d:             message1.accept(txnSession);
1:4516c8d: 
1:4516c8d:             AmqpMessage message = new AmqpMessage();
1:4516c8d:             message.setText("Test-Message");
1:4516c8d:             message.setApplicationProperty("msgId", NUM_MESSAGES);
1:4516c8d: 
1:4516c8d:             sender.send(message, txnSession.getTransactionId());
1:4516c8d:         }
1:4516c8d:         txnSession.commit();
1:4516c8d: 
1:4516c8d:         // Accept the second one in a TXN and send a new message in that TXN as well but rollback
1:4516c8d:         txnSession.begin();
1:4516c8d:         {
1:4516c8d:             message2.accept(txnSession);
1:4516c8d: 
1:4516c8d:             AmqpMessage message = new AmqpMessage();
1:4516c8d:             message.setText("Test-Message");
1:4516c8d:             message.setApplicationProperty("msgId", NUM_MESSAGES + 1);
1:4516c8d:             sender.send(message, txnSession.getTransactionId());
1:4516c8d:         }
1:4516c8d:         txnSession.rollback();
1:4516c8d: 
1:4516c8d:         // Variation here from .NET code, the client settles the accepted message where
1:4516c8d:         // the .NET client does not and instead releases here to have it redelivered.
1:4516c8d: 
1:4516c8d:         receiver.flow(NUM_MESSAGES);
1:4516c8d:         for (int i = 1; i <= NUM_MESSAGES; ++i) {
1:4516c8d:             AmqpMessage message = receiver.receive(5, TimeUnit.SECONDS);
1:4516c8d:             assertNotNull(message);
1:4516c8d:             assertEquals(i, message.getApplicationProperty("msgId"));
1:4516c8d:             message.accept();
1:4516c8d:         }
1:4516c8d: 
1:4516c8d:         // Should be nothing left.
1:4516c8d:         assertNull(receiver.receive(1, TimeUnit.SECONDS));
1:4516c8d: 
1:4516c8d:         connection.close();
1:4516c8d:     }
1:4516c8d: 
1:35e8a52:     @Test(timeout = 60000)
1:5d53aa2:     public void testReceiversCommitAndRollbackWithMultipleSessionsInSingleTXNoSettlement() throws Exception {
1:5d53aa2:         final int NUM_MESSAGES = 10;
1:5d53aa2: 
1:5d53aa2:         AmqpClient client = createAmqpClient();
1:1ac8954:         AmqpConnection connection = trackConnection(client.connect());
1:5d53aa2: 
1:5d53aa2:         // Root TXN session controls all TXN send lifetimes.
1:5d53aa2:         AmqpSession txnSession = connection.createSession();
1:5d53aa2: 
1:5d53aa2:         // Normal Session which won't create an TXN itself
1:5d53aa2:         AmqpSession session = connection.createSession();
1:5d53aa2:         AmqpSender sender = session.createSender("queue://" + getTestName());
1:5d53aa2: 
1:5d53aa2:         for (int i = 0; i < NUM_MESSAGES + 1; ++i) {
1:5d53aa2:             AmqpMessage message = new AmqpMessage();
1:5d53aa2:             message.setText("Test-Message");
1:5d53aa2:             message.setApplicationProperty("msgId", i);
1:5d53aa2:             sender.send(message, txnSession.getTransactionId());
1:5d53aa2:         }
1:5d53aa2: 
1:5d53aa2:         // Read all messages from the Queue, do not accept them yet.
1:5d53aa2:         AmqpReceiver receiver = session.createReceiver("queue://" + getTestName());
1:5d53aa2:         ArrayList<AmqpMessage> messages = new ArrayList<>(NUM_MESSAGES);
1:5d53aa2:         receiver.flow((NUM_MESSAGES + 2) * 2);
1:5d53aa2:         for (int i = 0; i < NUM_MESSAGES; ++i) {
1:5d53aa2:             AmqpMessage message = receiver.receive(5, TimeUnit.SECONDS);
1:5d53aa2:             assertNotNull(message);
1:5d53aa2:             messages.add(message);
1:5d53aa2:         }
1:5d53aa2: 
1:5d53aa2:         // Commit half the consumed messages
1:5d53aa2:         txnSession.begin();
1:5d53aa2:         for (int i = 0; i < NUM_MESSAGES / 2; ++i) {
1:5d53aa2:             messages.get(i).accept(txnSession, false);
1:5d53aa2:         }
1:5d53aa2:         txnSession.commit();
1:5d53aa2: 
1:5d53aa2:         // Rollback the other half the consumed messages
1:5d53aa2:         txnSession.begin();
1:5d53aa2:         for (int i = NUM_MESSAGES / 2; i < NUM_MESSAGES; ++i) {
1:5d53aa2:             messages.get(i).accept(txnSession, false);
1:5d53aa2:         }
1:5d53aa2:         txnSession.rollback();
1:5d53aa2: 
1:5d53aa2:         // After rollback message should still be acquired so we read last sent message.
1:5d53aa2:         {
1:5d53aa2:             AmqpMessage message = receiver.receive(5, TimeUnit.SECONDS);
1:5d53aa2:             assertNotNull(message);
1:5d53aa2:             assertEquals(NUM_MESSAGES, message.getApplicationProperty("msgId"));
1:5d53aa2:             message.release();
1:5d53aa2:         }
1:5d53aa2: 
1:5d53aa2:         // Commit the other half the consumed messages
1:5d53aa2:         txnSession.begin();
1:5d53aa2:         for (int i = NUM_MESSAGES / 2; i < NUM_MESSAGES; ++i) {
1:5d53aa2:             messages.get(i).accept(txnSession);
1:5d53aa2:         }
1:5d53aa2:         txnSession.commit();
1:5d53aa2: 
1:5d53aa2:         // The final message should still be pending.
1:4516c8d:         {
1:5d53aa2:             AmqpMessage message = receiver.receive(5, TimeUnit.SECONDS);
1:5d53aa2:             receiver.flow(1);
1:5d53aa2:             assertNotNull(message);
1:5d53aa2:             assertEquals(NUM_MESSAGES, message.getApplicationProperty("msgId"));
1:5d53aa2:             message.accept();
1:4516c8d:         }
1:5d53aa2: 
1:5d53aa2:         // We should have now drained the Queue
1:4516c8d:         AmqpMessage message = receiver.receive(5, TimeUnit.SECONDS);
1:4516c8d:         receiver.flow(1);
1:5d53aa2:         assertNull(message);
1:5d53aa2: 
1:5d53aa2:         connection.close();
1:5d53aa2:     }
1:5d53aa2: 
1:5d53aa2:     @Test(timeout = 60000)
1:5d53aa2:     public void testCommitAndRollbackWithMultipleSessionsInSingleTXNoSettlement() throws Exception {
1:5d53aa2:         final int NUM_MESSAGES = 10;
1:5d53aa2: 
1:5d53aa2:         AmqpClient client = createAmqpClient();
1:1ac8954:         AmqpConnection connection = trackConnection(client.connect());
1:5d53aa2: 
1:5d53aa2:         // Root TXN session controls all TXN send lifetimes.
1:5d53aa2:         AmqpSession txnSession = connection.createSession();
1:5d53aa2: 
1:5d53aa2:         // Normal Session which won't create an TXN itself
1:5d53aa2:         AmqpSession session = connection.createSession();
1:5d53aa2:         AmqpSender sender = session.createSender("queue://" + getTestName());
1:5d53aa2: 
1:5d53aa2:         for (int i = 0; i < NUM_MESSAGES; ++i) {
1:5d53aa2:             AmqpMessage message = new AmqpMessage();
1:5d53aa2:             message.setText("Test-Message");
1:5d53aa2:             message.setApplicationProperty("msgId", i);
1:5d53aa2:             sender.send(message, txnSession.getTransactionId());
1:5d53aa2:         }
1:5d53aa2: 
1:5d53aa2:         // Read all messages from the Queue, do not accept them yet.
1:5d53aa2:         AmqpReceiver receiver = session.createReceiver("queue://" + getTestName());
1:5d53aa2:         receiver.flow(2);
1:5d53aa2:         AmqpMessage message1 = receiver.receive(5, TimeUnit.SECONDS);
1:5d53aa2:         AmqpMessage message2 = receiver.receive(5, TimeUnit.SECONDS);
1:4516c8d: 
1:5d53aa2:         // Accept the first one in a TXN and send a new message in that TXN as well
1:5d53aa2:         txnSession.begin();
1:5d53aa2:         {
1:5d53aa2:             message1.accept(txnSession, false);
1:5d53aa2: 
1:5d53aa2:             AmqpMessage message = new AmqpMessage();
1:5d53aa2:             message.setText("Test-Message");
1:5d53aa2:             message.setApplicationProperty("msgId", NUM_MESSAGES);
1:272fb2b: 
1:4516c8d:             sender.send(message, txnSession.getTransactionId());
1:5d53aa2:         }
1:5d53aa2:         txnSession.commit();
1:272fb2b: 
1:5d53aa2:         // Accept the second one in a TXN and send a new message in that TXN as well but rollback
1:5d53aa2:         txnSession.begin();
1:5d53aa2:         {
1:5d53aa2:             message2.accept(txnSession, false);
1:5d53aa2: 
1:5d53aa2:             AmqpMessage message = new AmqpMessage();
1:5d53aa2:             message.setText("Test-Message");
1:5d53aa2:             message.setApplicationProperty("msgId", NUM_MESSAGES + 1);
1:5d53aa2:             sender.send(message, txnSession.getTransactionId());
1:5d53aa2:         }
1:5d53aa2:         txnSession.rollback();
1:5d53aa2: 
1:5d53aa2:         message2.release();
1:5d53aa2: 
1:0dd806f:         // Should be ten message available for dispatch given that we sent and committed one, and
1:5d53aa2:         // releases another we had previously received.
1:0dd806f:         receiver.flow(10);
1:5d53aa2:         for (int i = 1; i <= NUM_MESSAGES; ++i) {
1:5d53aa2:             AmqpMessage message = receiver.receive(5, TimeUnit.SECONDS);
1:0dd806f:             assertNotNull("Expected a message for: " + i, message);
1:5d53aa2:             assertEquals(i, message.getApplicationProperty("msgId"));
1:5d53aa2:             message.accept();
1:5d53aa2:         }
1:5d53aa2: 
1:5d53aa2:         // Should be nothing left.
1:5d53aa2:         receiver.flow(1);
1:5d53aa2:         assertNull(receiver.receive(1, TimeUnit.SECONDS));
1:5d53aa2: 
1:5d53aa2:         connection.close();
1:5d53aa2:     }
1:272fb2b: }
============================================================================
author:Timothy Bish
-------------------------------------------------------------------------------
commit:1ac8954
/////////////////////////////////////////////////////////////////////////
1:         AmqpConnection connection = trackConnection(client.connect());
/////////////////////////////////////////////////////////////////////////
1:         AmqpConnection connection = trackConnection(client.connect());
/////////////////////////////////////////////////////////////////////////
1:         AmqpConnection connection = trackConnection(client.connect());
/////////////////////////////////////////////////////////////////////////
1:         AmqpConnection connection = trackConnection(client.connect());
/////////////////////////////////////////////////////////////////////////
1:         AmqpConnection connection = trackConnection(client.connect());
/////////////////////////////////////////////////////////////////////////
1:         AmqpConnection connection = trackConnection(client.connect());
/////////////////////////////////////////////////////////////////////////
1:         AmqpConnection connection = trackConnection(client.connect());
/////////////////////////////////////////////////////////////////////////
1:         AmqpConnection connection = trackConnection(client.connect());
/////////////////////////////////////////////////////////////////////////
1:         AmqpConnection connection = trackConnection(client.connect());
/////////////////////////////////////////////////////////////////////////
1:         AmqpConnection connection = trackConnection(client.connect());
/////////////////////////////////////////////////////////////////////////
1:         AmqpConnection connection = trackConnection(client.connect());
/////////////////////////////////////////////////////////////////////////
1:         AmqpConnection connection = trackConnection(client.connect());
/////////////////////////////////////////////////////////////////////////
1:         AmqpConnection connection = trackConnection(client.connect());
/////////////////////////////////////////////////////////////////////////
1:         AmqpConnection connection = trackConnection(client.connect());
/////////////////////////////////////////////////////////////////////////
1:         AmqpConnection connection = trackConnection(client.connect());
/////////////////////////////////////////////////////////////////////////
1:         AmqpConnection connection = trackConnection(client.connect());
/////////////////////////////////////////////////////////////////////////
1:         AmqpConnection connection = trackConnection(client.connect());
/////////////////////////////////////////////////////////////////////////
1:         AmqpConnection connection = trackConnection(client.connect());
commit:0dd806f
/////////////////////////////////////////////////////////////////////////
1: import org.apache.qpid.proton.amqp.messaging.Accepted;
1: import org.apache.qpid.proton.amqp.messaging.Modified;
1: import org.apache.qpid.proton.amqp.messaging.Outcome;
1: import org.apache.qpid.proton.amqp.messaging.Rejected;
1: import org.apache.qpid.proton.amqp.messaging.Released;
/////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////
1:     @Test(timeout = 60000)
1:     public void testAcceptedButNotSettledInTXRemainsAquiredCanBeAccepted() throws Exception {
1:         doTestAcceptedButNotSettledInTXRemainsAquired(Accepted.getInstance());
1:     }
1: 
1:     @Test(timeout = 60000)
1:     public void testAcceptedButNotSettledInTXRemainsAquiredCanBeReleased() throws Exception {
1:         doTestAcceptedButNotSettledInTXRemainsAquired(Released.getInstance());
1:     }
1: 
1:     @Test(timeout = 60000)
1:     public void testAcceptedButNotSettledInTXRemainsAquiredCanBeRejected() throws Exception {
1:         doTestAcceptedButNotSettledInTXRemainsAquired(new Rejected());
1:     }
1: 
1:     @Test(timeout = 60000)
1:     public void testAcceptedButNotSettledInTXRemainsAquiredCanBeModifiedAsFailed() throws Exception {
1:         Modified outcome = new Modified();
1:         outcome.setDeliveryFailed(true);
1:         doTestAcceptedButNotSettledInTXRemainsAquired(outcome);
1:     }
1: 
1:     @Test(timeout = 60000)
1:     public void testAcceptedButNotSettledInTXRemainsAquiredCanBeModifiedAsUndeliverable() throws Exception {
1:         Modified outcome = new Modified();
1:         outcome.setDeliveryFailed(true);
1:         outcome.setUndeliverableHere(true);
1:         doTestAcceptedButNotSettledInTXRemainsAquired(outcome);
1:     }
1: 
1:     private void doTestAcceptedButNotSettledInTXRemainsAquired(Outcome outcome) throws Exception {
1: 
1:         AmqpClient client = createAmqpClient();
0:         AmqpConnection connection = client.connect();
1:         AmqpSession session = connection.createSession();
1: 
1:         AmqpSender sender = session.createSender("queue://" + getTestName());
1:         AmqpReceiver receiver = session.createReceiver("queue://" + getTestName());
1: 
1:         final QueueViewMBean queue = getProxyToQueue(getTestName());
1: 
1:         AmqpMessage message = new AmqpMessage();
1:         message.setText("Test-Message");
1:         sender.send(message);
1: 
1:         session.begin();
1: 
1:         receiver.flow(10);
1:         AmqpMessage received = receiver.receive(5, TimeUnit.SECONDS);
1:         assertNotNull(received);
1:         received.accept(false);
1: 
1:         session.rollback();
1: 
1:         // Message should remain acquired an not be redelivered.
1:         assertEquals(1, queue.getQueueSize());
1:         assertNull(receiver.receive(2, TimeUnit.SECONDS));
1: 
1:         if (outcome instanceof Released || outcome instanceof Rejected) {
1:             // Receiver should be able to release the still acquired message and the
1:             // broker should redispatch it to the client again.
1:             received.release();
1:             received = receiver.receive(3, TimeUnit.SECONDS);
1:             assertNotNull(received);
1:             received.accept();
1:             received = receiver.receive(2, TimeUnit.SECONDS);
1:             assertNull(received);
1:             assertEquals(0, queue.getQueueSize());
1:         } else if (outcome instanceof Accepted) {
1:             // Receiver should be able to accept the still acquired message and the
1:             // broker should then mark it as consumed.
1:             received.accept();
1:             received = receiver.receive(2, TimeUnit.SECONDS);
1:             assertNull(received);
1:             assertEquals(0, queue.getQueueSize());
1:         } else if (outcome instanceof Modified) {
1:             // Depending on the undeliverable here state the message will either be
1:             // redelivered or DLQ'd
1:             Modified modified = (Modified) outcome;
1:             received.modified(Boolean.TRUE.equals(modified.getDeliveryFailed()), Boolean.TRUE.equals(modified.getUndeliverableHere()));
1:             if (Boolean.TRUE.equals(modified.getUndeliverableHere())) {
1:                 received = receiver.receive(2, TimeUnit.SECONDS);
1:                 assertNull(received);
1:                 assertEquals(0, queue.getQueueSize());
1:             } else {
1:                 received = receiver.receive(3, TimeUnit.SECONDS);
1:                 assertNotNull(received);
1:                 received.accept();
1:                 received = receiver.receive(2, TimeUnit.SECONDS);
1:                 assertNull(received);
1:                 assertEquals(0, queue.getQueueSize());
1:             }
1:         }
1: 
1:         connection.close();
1:     }
1: 
1:     @Test(timeout = 60000)
1:     public void testTransactionallyAcquiredMessageCanBeTransactionallyConsumed() throws Exception {
1: 
1:         AmqpClient client = createAmqpClient();
0:         AmqpConnection connection = client.connect();
1:         AmqpSession session = connection.createSession();
1: 
1:         AmqpSender sender = session.createSender("queue://" + getTestName());
1:         AmqpReceiver receiver = session.createReceiver("queue://" + getTestName());
1: 
1:         final QueueViewMBean queue = getProxyToQueue(getTestName());
1: 
1:         AmqpMessage message = new AmqpMessage();
1:         message.setText("Test-Message");
1:         sender.send(message);
1: 
1:         session.begin();
1: 
1:         receiver.flow(10);
1:         AmqpMessage received = receiver.receive(5, TimeUnit.SECONDS);
1:         assertNotNull(received);
1:         received.accept(false);
1: 
1:         session.rollback();
1: 
1:         // Message should remain acquired an not be redelivered.
1:         assertEquals(1, queue.getQueueSize());
1:         assertNull(receiver.receive(1, TimeUnit.SECONDS));
1: 
1:         // Consume under TX but settle this time
1:         session.begin();
1:         received.accept(false);
1:         session.rollback();
1: 
1:         // Should still be acquired
1:         assertEquals(1, queue.getQueueSize());
1:         assertNull(receiver.receive(1, TimeUnit.SECONDS));
1: 
1:         // Consume under TX and settle but rollback, message should be redelivered.
1:         session.begin();
1:         received.accept();
1:         session.rollback();
1: 
1:         assertEquals(1, queue.getQueueSize());
1:         received = receiver.receive(1, TimeUnit.SECONDS);
1:         assertNotNull(received);
1: 
1:         // Consume under TX and commit it this time.
1:         session.begin();
1:         received.accept(false);
1:         session.commit();
1: 
1:         // Check that it is now consumed and no more message available
1:         assertTrue(received.getWrappedDelivery().remotelySettled());
1:         assertEquals(0, queue.getQueueSize());
1:         assertNull(receiver.receive(1, TimeUnit.SECONDS));
1: 
1:         connection.close();
1:     }
1: 
/////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////
1:         // Should be ten message available for dispatch given that we sent and committed one, and
1:         receiver.flow(10);
1:             assertNotNull("Expected a message for: " + i, message);
commit:5d53aa2
/////////////////////////////////////////////////////////////////////////
0: import org.junit.Ignore;
/////////////////////////////////////////////////////////////////////////
1: 
0:     // TODO - Direct ports of the AmqpNetLite client tests that don't currently with this broker.
1: 
0:     @Ignore("Fails due to no support for TX enrollment without settlement.")
1:     @Test(timeout = 60000)
1:     public void testReceiversCommitAndRollbackWithMultipleSessionsInSingleTXNoSettlement() throws Exception {
1:         final int NUM_MESSAGES = 10;
1: 
1:         AmqpClient client = createAmqpClient();
0:         AmqpConnection connection = client.connect();
1: 
1:         // Root TXN session controls all TXN send lifetimes.
1:         AmqpSession txnSession = connection.createSession();
1: 
1:         // Normal Session which won't create an TXN itself
1:         AmqpSession session = connection.createSession();
1:         AmqpSender sender = session.createSender("queue://" + getTestName());
1: 
1:         for (int i = 0; i < NUM_MESSAGES + 1; ++i) {
1:             AmqpMessage message = new AmqpMessage();
1:             message.setText("Test-Message");
1:             message.setApplicationProperty("msgId", i);
1:             sender.send(message, txnSession.getTransactionId());
1:         }
1: 
1:         // Read all messages from the Queue, do not accept them yet.
1:         AmqpReceiver receiver = session.createReceiver("queue://" + getTestName());
1:         ArrayList<AmqpMessage> messages = new ArrayList<>(NUM_MESSAGES);
1:         receiver.flow((NUM_MESSAGES + 2) * 2);
1:         for (int i = 0; i < NUM_MESSAGES; ++i) {
1:             AmqpMessage message = receiver.receive(5, TimeUnit.SECONDS);
1:             assertNotNull(message);
1:             messages.add(message);
1:         }
1: 
1:         // Commit half the consumed messages
1:         txnSession.begin();
1:         for (int i = 0; i < NUM_MESSAGES / 2; ++i) {
1:             messages.get(i).accept(txnSession, false);
1:         }
1:         txnSession.commit();
1: 
1:         // Rollback the other half the consumed messages
1:         txnSession.begin();
1:         for (int i = NUM_MESSAGES / 2; i < NUM_MESSAGES; ++i) {
1:             messages.get(i).accept(txnSession, false);
1:         }
1:         txnSession.rollback();
1: 
1:         // After rollback message should still be acquired so we read last sent message.
1:         {
1:             AmqpMessage message = receiver.receive(5, TimeUnit.SECONDS);
1:             assertNotNull(message);
1:             assertEquals(NUM_MESSAGES, message.getApplicationProperty("msgId"));
1:             message.release();
1:         }
1: 
1:         // Commit the other half the consumed messages
1:         txnSession.begin();
1:         for (int i = NUM_MESSAGES / 2; i < NUM_MESSAGES; ++i) {
1:             messages.get(i).accept(txnSession);
1:         }
1:         txnSession.commit();
1: 
1:         // The final message should still be pending.
1:         {
1:             AmqpMessage message = receiver.receive(5, TimeUnit.SECONDS);
1:             receiver.flow(1);
1:             assertNotNull(message);
1:             assertEquals(NUM_MESSAGES, message.getApplicationProperty("msgId"));
1:             message.accept();
1:         }
1: 
1:         // We should have now drained the Queue
1:         AmqpMessage message = receiver.receive(5, TimeUnit.SECONDS);
1:         receiver.flow(1);
1:         assertNull(message);
1: 
1:         connection.close();
1:     }
1: 
0:     @Ignore("Fails due to no support for TX enrollment without settlement.")
1:     @Test(timeout = 60000)
1:     public void testCommitAndRollbackWithMultipleSessionsInSingleTXNoSettlement() throws Exception {
1:         final int NUM_MESSAGES = 10;
1: 
1:         AmqpClient client = createAmqpClient();
0:         AmqpConnection connection = client.connect();
1: 
1:         // Root TXN session controls all TXN send lifetimes.
1:         AmqpSession txnSession = connection.createSession();
1: 
1:         // Normal Session which won't create an TXN itself
1:         AmqpSession session = connection.createSession();
1:         AmqpSender sender = session.createSender("queue://" + getTestName());
1: 
1:         for (int i = 0; i < NUM_MESSAGES; ++i) {
1:             AmqpMessage message = new AmqpMessage();
1:             message.setText("Test-Message");
1:             message.setApplicationProperty("msgId", i);
1:             sender.send(message, txnSession.getTransactionId());
1:         }
1: 
1:         // Read all messages from the Queue, do not accept them yet.
1:         AmqpReceiver receiver = session.createReceiver("queue://" + getTestName());
1:         receiver.flow(2);
1:         AmqpMessage message1 = receiver.receive(5, TimeUnit.SECONDS);
1:         AmqpMessage message2 = receiver.receive(5, TimeUnit.SECONDS);
1: 
1:         // Accept the first one in a TXN and send a new message in that TXN as well
1:         txnSession.begin();
1:         {
1:             message1.accept(txnSession, false);
1: 
1:             AmqpMessage message = new AmqpMessage();
1:             message.setText("Test-Message");
1:             message.setApplicationProperty("msgId", NUM_MESSAGES);
1: 
1:             sender.send(message, txnSession.getTransactionId());
1:         }
1:         txnSession.commit();
1: 
1:         // Accept the second one in a TXN and send a new message in that TXN as well but rollback
1:         txnSession.begin();
1:         {
1:             message2.accept(txnSession, false);
1: 
1:             AmqpMessage message = new AmqpMessage();
1:             message.setText("Test-Message");
1:             message.setApplicationProperty("msgId", NUM_MESSAGES + 1);
1:             sender.send(message, txnSession.getTransactionId());
1:         }
1:         txnSession.rollback();
1: 
1:         message2.release();
1: 
0:         // Should be two message available for dispatch given that we sent and committed one, and
1:         // releases another we had previously received.
1:         receiver.flow(2);
1:         for (int i = 1; i <= NUM_MESSAGES; ++i) {
1:             AmqpMessage message = receiver.receive(5, TimeUnit.SECONDS);
1:             assertNotNull(message);
1:             assertEquals(i, message.getApplicationProperty("msgId"));
1:             message.accept();
1:         }
1: 
1:         // Should be nothing left.
1:         receiver.flow(1);
1:         assertNull(receiver.receive(1, TimeUnit.SECONDS));
1: 
1:         connection.close();
1:     }
commit:4516c8d
/////////////////////////////////////////////////////////////////////////
1: import static org.junit.Assert.assertNull;
1: import java.util.ArrayList;
/////////////////////////////////////////////////////////////////////////
1: 
1:     //----- Tests Ported from AmqpNetLite client -----------------------------//
1: 
1:     @Test(timeout = 60000)
1:     public void testSendersCommitAndRollbackWithMultipleSessionsInSingleTX() throws Exception {
1:         final int NUM_MESSAGES = 5;
1: 
1:         AmqpClient client = createAmqpClient();
0:         AmqpConnection connection = client.connect();
1: 
1:         // Root TXN session controls all TXN send lifetimes.
1:         AmqpSession txnSession = connection.createSession();
1: 
1:         // Normal Session which won't create an TXN itself
1:         AmqpSession session = connection.createSession();
1: 
1:         AmqpSender sender = session.createSender("queue://" + getTestName());
1: 
1:         // Commit TXN work from a sender.
1:         txnSession.begin();
1:         for (int i = 0; i < NUM_MESSAGES; ++i) {
1:             AmqpMessage message = new AmqpMessage();
1:             message.setText("Test-Message");
1:             sender.send(message, txnSession.getTransactionId());
1:         }
1:         txnSession.commit();
1: 
1:         // Rollback an additional batch of TXN work from a sender.
1:         txnSession.begin();
1:         for (int i = 0; i < NUM_MESSAGES; ++i) {
1:             AmqpMessage message = new AmqpMessage();
1:             message.setText("Test-Message");
1:             sender.send(message, txnSession.getTransactionId());
1:         }
1:         txnSession.rollback();
1: 
1:         // Commit more TXN work from a sender.
1:         txnSession.begin();
1:         for (int i = 0; i < NUM_MESSAGES; ++i) {
1:             AmqpMessage message = new AmqpMessage();
1:             message.setText("Test-Message");
1:             sender.send(message, txnSession.getTransactionId());
1:         }
1:         txnSession.commit();
1: 
1:         AmqpReceiver receiver = session.createReceiver("queue://" + getTestName());
1:         receiver.flow(NUM_MESSAGES * 2);
1:         for (int i = 0; i < NUM_MESSAGES * 2; ++i) {
1:             AmqpMessage message = receiver.receive(5, TimeUnit.SECONDS);
1:             assertNotNull(message);
1:             message.accept(txnSession);
1:         }
1: 
1:         connection.close();
1:     }
1: 
1:     @Test(timeout = 60000)
1:     public void testReceiversCommitAndRollbackWithMultipleSessionsInSingleTX() throws Exception {
1:         final int NUM_MESSAGES = 10;
1: 
1:         AmqpClient client = createAmqpClient();
0:         AmqpConnection connection = client.connect();
1: 
1:         // Root TXN session controls all TXN send lifetimes.
1:         AmqpSession txnSession = connection.createSession();
1: 
1:         // Normal Session which won't create an TXN itself
1:         AmqpSession session = connection.createSession();
1:         AmqpSender sender = session.createSender("queue://" + getTestName());
1: 
1:         for (int i = 0; i < NUM_MESSAGES + 1; ++i) {
1:             AmqpMessage message = new AmqpMessage();
1:             message.setText("Test-Message");
1:             message.setApplicationProperty("msgId", i);
1:             sender.send(message, txnSession.getTransactionId());
1:         }
1: 
1:         // Read all messages from the Queue, do not accept them yet.
1:         AmqpReceiver receiver = session.createReceiver("queue://" + getTestName());
1:         ArrayList<AmqpMessage> messages = new ArrayList<>(NUM_MESSAGES);
1:         receiver.flow((NUM_MESSAGES + 2) * 2);
1:         for (int i = 0; i < NUM_MESSAGES; ++i) {
1:             AmqpMessage message = receiver.receive(5, TimeUnit.SECONDS);
1:             assertNotNull(message);
1:             messages.add(message);
1:         }
1: 
1:         // Commit half the consumed messages
1:         txnSession.begin();
1:         for (int i = 0; i < NUM_MESSAGES / 2; ++i) {
1:             messages.get(i).accept(txnSession);
1:         }
1:         txnSession.commit();
1: 
1:         // Rollback the other half the consumed messages
1:         txnSession.begin();
1:         for (int i = NUM_MESSAGES / 2; i < NUM_MESSAGES; ++i) {
1:             messages.get(i).accept(txnSession);
1:         }
1:         txnSession.rollback();
1: 
1:         {
1:             AmqpMessage message = receiver.receive(5, TimeUnit.SECONDS);
1:             assertNotNull(message);
1:             assertEquals(NUM_MESSAGES, message.getApplicationProperty("msgId"));
1:             message.release();
1:         }
1: 
1:         // Commit the other half the consumed messages
1:         // This is a variation from the .NET client tests which doesn't settle the
1:         // messages in the TX until commit is called but on ActiveMQ they will be
1:         // redispatched regardless and not stay in the acquired state.
1:         txnSession.begin();
1:         for (int i = NUM_MESSAGES / 2; i < NUM_MESSAGES; ++i) {
1:             AmqpMessage message = receiver.receive(5, TimeUnit.SECONDS);
1:             assertNotNull(message);
1:             message.accept();
1:         }
1:         txnSession.commit();
1: 
1:         // The final message should still be pending.
1:         {
1:             AmqpMessage message = receiver.receive(5, TimeUnit.SECONDS);
1:             receiver.flow(1);
1:             assertNotNull(message);
1:             assertEquals(NUM_MESSAGES, message.getApplicationProperty("msgId"));
1:             message.release();
1:         }
1: 
1:         connection.close();
1:     }
1: 
1:     @Test(timeout = 60000)
1:     public void testCommitAndRollbackWithMultipleSessionsInSingleTX() throws Exception {
1:         final int NUM_MESSAGES = 10;
1: 
1:         AmqpClient client = createAmqpClient();
0:         AmqpConnection connection = client.connect();
1: 
1:         // Root TXN session controls all TXN send lifetimes.
1:         AmqpSession txnSession = connection.createSession();
1: 
1:         // Normal Session which won't create an TXN itself
1:         AmqpSession session = connection.createSession();
1:         AmqpSender sender = session.createSender("queue://" + getTestName());
1: 
1:         for (int i = 0; i < NUM_MESSAGES; ++i) {
1:             AmqpMessage message = new AmqpMessage();
1:             message.setText("Test-Message");
1:             message.setApplicationProperty("msgId", i);
1:             sender.send(message, txnSession.getTransactionId());
1:         }
1: 
1:         // Read all messages from the Queue, do not accept them yet.
1:         AmqpReceiver receiver = session.createReceiver("queue://" + getTestName());
0:         receiver.flow(2);
1:         AmqpMessage message1 = receiver.receive(5, TimeUnit.SECONDS);
1:         AmqpMessage message2 = receiver.receive(5, TimeUnit.SECONDS);
1: 
1:         // Accept the first one in a TXN and send a new message in that TXN as well
1:         txnSession.begin();
1:         {
1:             message1.accept(txnSession);
1: 
1:             AmqpMessage message = new AmqpMessage();
1:             message.setText("Test-Message");
1:             message.setApplicationProperty("msgId", NUM_MESSAGES);
1: 
1:             sender.send(message, txnSession.getTransactionId());
1:         }
1:         txnSession.commit();
1: 
1:         // Accept the second one in a TXN and send a new message in that TXN as well but rollback
1:         txnSession.begin();
1:         {
1:             message2.accept(txnSession);
1: 
1:             AmqpMessage message = new AmqpMessage();
1:             message.setText("Test-Message");
1:             message.setApplicationProperty("msgId", NUM_MESSAGES + 1);
1:             sender.send(message, txnSession.getTransactionId());
1:         }
1:         txnSession.rollback();
1: 
1:         // Variation here from .NET code, the client settles the accepted message where
1:         // the .NET client does not and instead releases here to have it redelivered.
1: 
1:         receiver.flow(NUM_MESSAGES);
1:         for (int i = 1; i <= NUM_MESSAGES; ++i) {
1:             AmqpMessage message = receiver.receive(5, TimeUnit.SECONDS);
1:             assertNotNull(message);
1:             assertEquals(i, message.getApplicationProperty("msgId"));
1:             message.accept();
1:         }
1: 
1:         // Should be nothing left.
1:         assertNull(receiver.receive(1, TimeUnit.SECONDS));
1: 
1:         connection.close();
1:     }
commit:b4ab0e1
/////////////////////////////////////////////////////////////////////////
1: 
1:     @Test(timeout = 60000)
1:     public void testMultipleSessionReceiversInSingleTXNWithCommit() throws Exception {
1:         AmqpClient client = createAmqpClient();
0:         AmqpConnection connection = client.connect();
1: 
1:         // Load up the Queue with some messages
1:         {
1:             AmqpSession session = connection.createSession();
1:             AmqpSender sender = session.createSender("queue://" + getTestName());
1:             AmqpMessage message = new AmqpMessage();
1:             message.setText("Test-Message");
1:             sender.send(message);
1:             sender.send(message);
1:             sender.send(message);
1:             sender.close();
1:         }
1: 
1:         // Root TXN session controls all TXN send lifetimes.
1:         AmqpSession txnSession = connection.createSession();
1: 
1:         // Create some sender sessions
1:         AmqpSession session1 = connection.createSession();
1:         AmqpSession session2 = connection.createSession();
1:         AmqpSession session3 = connection.createSession();
1: 
1:         // Sender linked to each session
1:         AmqpReceiver receiver1 = session1.createReceiver("queue://" + getTestName());
1:         AmqpReceiver receiver2 = session2.createReceiver("queue://" + getTestName());
1:         AmqpReceiver receiver3 = session3.createReceiver("queue://" + getTestName());
1: 
1:         final QueueViewMBean queue = getProxyToQueue(getTestName());
1:         assertEquals(3, queue.getQueueSize());
1: 
1:         // Begin the transaction that all senders will operate in.
1:         txnSession.begin();
1: 
1:         assertTrue(txnSession.isInTransaction());
1: 
1:         receiver1.flow(1);
1:         receiver2.flow(1);
1:         receiver3.flow(1);
1: 
1:         AmqpMessage message1 = receiver1.receive(5, TimeUnit.SECONDS);
1:         AmqpMessage message2 = receiver2.receive(5, TimeUnit.SECONDS);
1:         AmqpMessage message3 = receiver3.receive(5, TimeUnit.SECONDS);
1: 
1:         message1.accept(txnSession);
1:         message2.accept(txnSession);
1:         message3.accept(txnSession);
1: 
1:         assertEquals(3, queue.getQueueSize());
1: 
1:         txnSession.commit();
1: 
1:         assertEquals(0, queue.getQueueSize());
1:     }
1: 
1:     @Test(timeout = 60000)
1:     public void testMultipleSessionReceiversInSingleTXNWithRollback() throws Exception {
1:         AmqpClient client = createAmqpClient();
0:         AmqpConnection connection = client.connect();
1: 
1:         // Load up the Queue with some messages
1:         {
1:             AmqpSession session = connection.createSession();
1:             AmqpSender sender = session.createSender("queue://" + getTestName());
1:             AmqpMessage message = new AmqpMessage();
1:             message.setText("Test-Message");
1:             sender.send(message);
1:             sender.send(message);
1:             sender.send(message);
1:             sender.close();
1:         }
1: 
1:         // Root TXN session controls all TXN send lifetimes.
1:         AmqpSession txnSession = connection.createSession();
1: 
1:         // Create some sender sessions
1:         AmqpSession session1 = connection.createSession();
1:         AmqpSession session2 = connection.createSession();
1:         AmqpSession session3 = connection.createSession();
1: 
1:         // Sender linked to each session
1:         AmqpReceiver receiver1 = session1.createReceiver("queue://" + getTestName());
1:         AmqpReceiver receiver2 = session2.createReceiver("queue://" + getTestName());
1:         AmqpReceiver receiver3 = session3.createReceiver("queue://" + getTestName());
1: 
1:         final QueueViewMBean queue = getProxyToQueue(getTestName());
1:         assertEquals(3, queue.getQueueSize());
1: 
1:         // Begin the transaction that all senders will operate in.
1:         txnSession.begin();
1: 
1:         assertTrue(txnSession.isInTransaction());
1: 
1:         receiver1.flow(1);
1:         receiver2.flow(1);
1:         receiver3.flow(1);
1: 
1:         AmqpMessage message1 = receiver1.receive(5, TimeUnit.SECONDS);
1:         AmqpMessage message2 = receiver2.receive(5, TimeUnit.SECONDS);
1:         AmqpMessage message3 = receiver3.receive(5, TimeUnit.SECONDS);
1: 
1:         message1.accept(txnSession);
1:         message2.accept(txnSession);
1:         message3.accept(txnSession);
1: 
1:         assertEquals(3, queue.getQueueSize());
1: 
1:         txnSession.rollback();
1: 
1:         assertEquals(3, queue.getQueueSize());
1:     }
1: 
1:     @Test(timeout = 60000)
1:     public void testMultipleSessionSendersInSingleTXNWithCommit() throws Exception {
1:         AmqpClient client = createAmqpClient();
0:         AmqpConnection connection = client.connect();
1: 
1:         // Root TXN session controls all TXN send lifetimes.
1:         AmqpSession txnSession = connection.createSession();
1: 
1:         // Create some sender sessions
1:         AmqpSession session1 = connection.createSession();
1:         AmqpSession session2 = connection.createSession();
1:         AmqpSession session3 = connection.createSession();
1: 
1:         // Sender linked to each session
1:         AmqpSender sender1 = session1.createSender("queue://" + getTestName());
1:         AmqpSender sender2 = session2.createSender("queue://" + getTestName());
1:         AmqpSender sender3 = session3.createSender("queue://" + getTestName());
1: 
1:         final QueueViewMBean queue = getProxyToQueue(getTestName());
1:         assertEquals(0, queue.getQueueSize());
1: 
1:         // Begin the transaction that all senders will operate in.
1:         txnSession.begin();
1: 
1:         AmqpMessage message = new AmqpMessage();
1:         message.setText("Test-Message");
1: 
1:         assertTrue(txnSession.isInTransaction());
1: 
1:         sender1.send(message, txnSession.getTransactionId());
1:         sender2.send(message, txnSession.getTransactionId());
1:         sender3.send(message, txnSession.getTransactionId());
1: 
1:         assertEquals(0, queue.getQueueSize());
1: 
1:         txnSession.commit();
1: 
1:         assertEquals(3, queue.getQueueSize());
1:     }
1: 
1:     @Test(timeout = 60000)
1:     public void testMultipleSessionSendersInSingleTXNWithRollback() throws Exception {
1:         AmqpClient client = createAmqpClient();
0:         AmqpConnection connection = client.connect();
1: 
1:         // Root TXN session controls all TXN send lifetimes.
1:         AmqpSession txnSession = connection.createSession();
1: 
1:         // Create some sender sessions
1:         AmqpSession session1 = connection.createSession();
1:         AmqpSession session2 = connection.createSession();
1:         AmqpSession session3 = connection.createSession();
1: 
1:         // Sender linked to each session
1:         AmqpSender sender1 = session1.createSender("queue://" + getTestName());
1:         AmqpSender sender2 = session2.createSender("queue://" + getTestName());
1:         AmqpSender sender3 = session3.createSender("queue://" + getTestName());
1: 
1:         final QueueViewMBean queue = getProxyToQueue(getTestName());
1:         assertEquals(0, queue.getQueueSize());
1: 
1:         // Begin the transaction that all senders will operate in.
1:         txnSession.begin();
1: 
1:         AmqpMessage message = new AmqpMessage();
1:         message.setText("Test-Message");
1: 
1:         assertTrue(txnSession.isInTransaction());
1: 
1:         sender1.send(message, txnSession.getTransactionId());
1:         sender2.send(message, txnSession.getTransactionId());
1:         sender3.send(message, txnSession.getTransactionId());
1: 
1:         assertEquals(0, queue.getQueueSize());
1: 
1:         txnSession.rollback();
1: 
1:         assertEquals(0, queue.getQueueSize());
1:     }
commit:272fb2b
/////////////////////////////////////////////////////////////////////////
1: /**
1:  * Licensed to the Apache Software Foundation (ASF) under one or more
1:  * contributor license agreements.  See the NOTICE file distributed with
1:  * this work for additional information regarding copyright ownership.
1:  * The ASF licenses this file to You under the Apache License, Version 2.0
1:  * (the "License"); you may not use this file except in compliance with
1:  * the License.  You may obtain a copy of the License at
1:  *
1:  *      http://www.apache.org/licenses/LICENSE-2.0
1:  *
1:  * Unless required by applicable law or agreed to in writing, software
1:  * distributed under the License is distributed on an "AS IS" BASIS,
1:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:  * See the License for the specific language governing permissions and
1:  * limitations under the License.
1:  */
1: package org.apache.activemq.transport.amqp.interop;
1: 
1: import static org.junit.Assert.assertEquals;
1: import static org.junit.Assert.assertNotNull;
1: import static org.junit.Assert.assertTrue;
1: 
1: import java.util.concurrent.TimeUnit;
1: 
1: import org.apache.activemq.broker.jmx.QueueViewMBean;
1: import org.apache.activemq.transport.amqp.client.AmqpClient;
1: import org.apache.activemq.transport.amqp.client.AmqpClientTestSupport;
1: import org.apache.activemq.transport.amqp.client.AmqpConnection;
1: import org.apache.activemq.transport.amqp.client.AmqpMessage;
1: import org.apache.activemq.transport.amqp.client.AmqpReceiver;
1: import org.apache.activemq.transport.amqp.client.AmqpSender;
1: import org.apache.activemq.transport.amqp.client.AmqpSession;
1: import org.junit.Test;
1: 
1: /**
1:  * Test various aspects of Transaction support.
1:  */
1: public class AmqpTransactionTest extends AmqpClientTestSupport {
1: 
1:     @Test(timeout = 30000)
1:     public void testBeginAndCommitTransaction() throws Exception {
1:         AmqpClient client = createAmqpClient();
0:         AmqpConnection connection = client.connect();
1:         AmqpSession session = connection.createSession();
1:         assertNotNull(session);
1: 
1:         session.begin();
1:         assertTrue(session.isInTransaction());
1:         session.commit();
1: 
1:         connection.close();
1:     }
1: 
1:     @Test(timeout = 30000)
1:     public void testBeginAndRollbackTransaction() throws Exception {
1:         AmqpClient client = createAmqpClient();
0:         AmqpConnection connection = client.connect();
1:         AmqpSession session = connection.createSession();
1:         assertNotNull(session);
1: 
1:         session.begin();
1:         assertTrue(session.isInTransaction());
1:         session.rollback();
1: 
1:         connection.close();
1:     }
1: 
1:     @Test(timeout = 60000)
1:     public void testSendMessageToQueueWithCommit() throws Exception {
1:         AmqpClient client = createAmqpClient();
0:         AmqpConnection connection = client.connect();
1:         AmqpSession session = connection.createSession();
1: 
1:         AmqpSender sender = session.createSender("queue://" + getTestName());
1:         final QueueViewMBean queue = getProxyToQueue(getTestName());
1: 
1:         session.begin();
1: 
1:         AmqpMessage message = new AmqpMessage();
1:         message.setText("Test-Message");
1:         sender.send(message);
1: 
1:         assertEquals(0, queue.getQueueSize());
1: 
1:         session.commit();
1: 
1:         assertEquals(1, queue.getQueueSize());
1: 
0:         sender.close();
1:         connection.close();
1:     }
1: 
1:     @Test(timeout = 60000)
1:     public void testSendMessageToQueueWithRollback() throws Exception {
1:         AmqpClient client = createAmqpClient();
0:         AmqpConnection connection = client.connect();
1:         AmqpSession session = connection.createSession();
1: 
1:         AmqpSender sender = session.createSender("queue://" + getTestName());
1:         final QueueViewMBean queue = getProxyToQueue(getTestName());
1: 
1:         session.begin();
1: 
1:         AmqpMessage message = new AmqpMessage();
1:         message.setText("Test-Message");
1:         sender.send(message);
1: 
1:         assertEquals(0, queue.getQueueSize());
1: 
1:         session.rollback();
1: 
1:         assertEquals(0, queue.getQueueSize());
1: 
0:         sender.close();
1:         connection.close();
1:     }
1: 
1:     @Test(timeout = 60000)
1:     public void testReceiveMessageWithCommit() throws Exception {
1:         AmqpClient client = createAmqpClient();
0:         AmqpConnection connection = client.connect();
1:         AmqpSession session = connection.createSession();
1: 
1:         AmqpSender sender = session.createSender("queue://" + getTestName());
1:         final QueueViewMBean queue = getProxyToQueue(getTestName());
1: 
1:         AmqpMessage message = new AmqpMessage();
1:         message.setText("Test-Message");
1:         sender.send(message);
1: 
1:         assertEquals(1, queue.getQueueSize());
1: 
1:         AmqpReceiver receiver = session.createReceiver("queue://" + getTestName());
1: 
1:         session.begin();
1: 
1:         receiver.flow(1);
1:         AmqpMessage received = receiver.receive(5, TimeUnit.SECONDS);
1:         assertNotNull(received);
1:         received.accept();
1: 
1:         session.commit();
1: 
1:         assertEquals(0, queue.getQueueSize());
1: 
0:         sender.close();
1:         connection.close();
1:     }
1: 
1:     @Test(timeout = 60000)
1:     public void testReceiveMessageWithRollback() throws Exception {
1:         AmqpClient client = createAmqpClient();
0:         AmqpConnection connection = client.connect();
1:         AmqpSession session = connection.createSession();
1: 
1:         AmqpSender sender = session.createSender("queue://" + getTestName());
1:         final QueueViewMBean queue = getProxyToQueue(getTestName());
1: 
1:         AmqpMessage message = new AmqpMessage();
1:         message.setText("Test-Message");
1:         sender.send(message);
1: 
1:         assertEquals(1, queue.getQueueSize());
1: 
1:         AmqpReceiver receiver = session.createReceiver("queue://" + getTestName());
1: 
1:         session.begin();
1: 
1:         receiver.flow(1);
1:         AmqpMessage received = receiver.receive(5, TimeUnit.SECONDS);
1:         assertNotNull(received);
1:         received.accept();
1: 
1:         session.rollback();
1: 
1:         assertEquals(1, queue.getQueueSize());
1: 
0:         sender.close();
1:         connection.close();
1:     }
1: }
author:Clebert Suconic
-------------------------------------------------------------------------------
commit:35e8a52
/////////////////////////////////////////////////////////////////////////
1:     public void testReceiveAfterConnectionClose() throws Exception {
1:         AmqpClient client = createAmqpClient();
0:         AmqpConnection connection = client.connect();
1:         AmqpSession session = connection.createSession();
1: 
1:         AmqpSender sender = session.createSender(getTestName());
1:         final QueueViewMBean queue = getProxyToQueue(getTestName());
1: 
1:         AmqpMessage message = new AmqpMessage();
1:         message.setText("Test-Message");
1:         sender.send(message);
1: 
1:         assertEquals(1, queue.getQueueSize());
1: 
1:         AmqpReceiver receiver = session.createReceiver(getTestName());
1: 
1:         session.begin();
1: 
1:         receiver.flow(1);
1:         AmqpMessage received = receiver.receive(5, TimeUnit.SECONDS);
1:         assertNotNull(received);
1:         received.accept();
1: 
1:         // this will force a rollback on the TX (It should at least)
1:         connection.close();
1: 
1:         connection = client.connect();
1:         session = connection.createSession();
1:         receiver = session.createReceiver(getTestName());
1:         session.begin();
1:         receiver.flow(1);
1: 
1:         received = receiver.receive(5, TimeUnit.SECONDS);
1:         assertNotNull(received);
1:         received.accept();
1: 
1:         session.commit();
1: 
1:         assertEquals(0, queue.getQueueSize());
1: 
1:         connection.close();
1:     }
1: 
1: 
1:     @Test(timeout = 60000)
============================================================================