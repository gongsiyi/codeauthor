1:bc78238: /**
1:bc78238:  * Licensed to the Apache Software Foundation (ASF) under one or more
1:bc78238:  * contributor license agreements.  See the NOTICE file distributed with
1:bc78238:  * this work for additional information regarding copyright ownership.
1:bc78238:  * The ASF licenses this file to You under the Apache License, Version 2.0
1:bc78238:  * (the "License"); you may not use this file except in compliance with
1:bc78238:  * the License.  You may obtain a copy of the License at
1:bc78238:  *
1:bc78238:  *      http://www.apache.org/licenses/LICENSE-2.0
1:bc78238:  *
1:bc78238:  * Unless required by applicable law or agreed to in writing, software
1:bc78238:  * distributed under the License is distributed on an "AS IS" BASIS,
1:bc78238:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:bc78238:  * See the License for the specific language governing permissions and
1:bc78238:  * limitations under the License.
1:bc78238:  */
1:bc78238: package org.apache.activemq.network.jms;
3:bc78238: 
1:c7d559f: import static org.junit.Assert.assertTrue;
1:c7d559f: 
1:c7d559f: import java.util.ArrayList;
1:c7d559f: import java.util.Iterator;
1:c7d559f: 
1:c7d559f: import javax.jms.Connection;
1:c7d559f: import javax.jms.Destination;
1:c7d559f: import javax.jms.JMSException;
1:c7d559f: import javax.jms.Message;
1:c7d559f: import javax.jms.MessageConsumer;
1:c7d559f: import javax.jms.MessageProducer;
1:c7d559f: import javax.jms.Session;
1:c7d559f: import javax.jms.TextMessage;
1:bc78238: 
1:bc78238: import org.apache.activemq.ActiveMQConnectionFactory;
1:bc78238: import org.apache.activemq.broker.BrokerService;
1:bc78238: import org.apache.activemq.command.ActiveMQTopic;
1:bc78238: import org.apache.activemq.util.Wait;
1:bc78238: import org.junit.After;
1:bc78238: import org.junit.Before;
1:bc78238: import org.junit.Test;
1:bc78238: 
1:bc78238: public class TopicBridgeStandaloneReconnectTest {
1:bc78238: 
1:7c9fec6:     private SimpleJmsTopicConnector jmsTopicConnector;
1:bc78238: 
1:bc78238:     private BrokerService localBroker;
1:bc78238:     private BrokerService foreignBroker;
1:bc78238: 
1:bc78238:     private ActiveMQConnectionFactory localConnectionFactory;
1:bc78238:     private ActiveMQConnectionFactory foreignConnectionFactory;
1:bc78238: 
1:bc78238:     private Destination outbound;
1:bc78238:     private Destination inbound;
1:bc78238: 
1:c7d559f:     private final ArrayList<Connection> connections = new ArrayList<Connection>();
1:bc78238: 
1:bc78238:     @Test
1:bc78238:     public void testSendAndReceiveOverConnectedBridges() throws Exception {
1:bc78238: 
1:bc78238:         startLocalBroker();
1:bc78238:         startForeignBroker();
1:bc78238: 
1:bc78238:         jmsTopicConnector.start();
1:bc78238: 
1:bc78238:         final MessageConsumer local = createConsumerForLocalBroker();
1:bc78238:         final MessageConsumer foreign = createConsumerForForeignBroker();
1:bc78238: 
1:bc78238:         sendMessageToForeignBroker("to.foreign.broker");
1:bc78238:         sendMessageToLocalBroker("to.local.broker");
1:bc78238: 
1:bc78238:         assertTrue("Should have received a Message.", Wait.waitFor(new Wait.Condition() {
1:bc78238:             @Override
1:bc78238:             public boolean isSatisified() throws Exception {
1:bc78238:                 Message message = local.receive(100);
1:bc78238:                 if (message != null && ((TextMessage) message).getText().equals("to.local.broker")) {
1:bc78238:                     return true;
1:bc78238:                 }
1:bc78238:                 return false;
1:bc78238:             }
1:bc78238:         }));
1:bc78238: 
1:bc78238:         assertTrue("Should have received a Message.", Wait.waitFor(new Wait.Condition() {
1:bc78238:             @Override
1:bc78238:             public boolean isSatisified() throws Exception {
1:bc78238:                 Message message = foreign.receive(100);
1:bc78238:                 if (message != null && ((TextMessage) message).getText().equals("to.foreign.broker")) {
1:bc78238:                     return true;
1:bc78238:                 }
1:bc78238:                 return false;
1:bc78238:             }
1:bc78238:         }));
1:bc78238:     }
1:bc78238: 
1:bc78238:     @Test
1:bc78238:     public void testSendAndReceiveOverBridgeWhenStartedBeforeBrokers() throws Exception {
1:bc78238: 
1:bc78238:         jmsTopicConnector.start();
1:bc78238: 
1:bc78238:         startLocalBroker();
1:bc78238:         startForeignBroker();
1:bc78238: 
1:bc78238:         assertTrue("Should have Connected.", Wait.waitFor(new Wait.Condition() {
1:bc78238:             @Override
1:bc78238:             public boolean isSatisified() throws Exception {
1:bc78238:                 return jmsTopicConnector.isConnected();
1:bc78238:             }
1:bc78238:         }));
1:bc78238: 
1:bc78238:         final MessageConsumer local = createConsumerForLocalBroker();
1:bc78238:         final MessageConsumer foreign = createConsumerForForeignBroker();
1:bc78238: 
1:bc78238:         sendMessageToForeignBroker("to.foreign.broker");
1:bc78238:         sendMessageToLocalBroker("to.local.broker");
1:bc78238: 
1:bc78238:         assertTrue("Should have received a Message.", Wait.waitFor(new Wait.Condition() {
1:bc78238:             @Override
1:bc78238:             public boolean isSatisified() throws Exception {
1:bc78238:                 Message message = local.receive(100);
1:bc78238:                 if (message != null && ((TextMessage) message).getText().equals("to.local.broker")) {
1:bc78238:                     return true;
1:bc78238:                 }
1:bc78238:                 return false;
1:bc78238:             }
1:bc78238:         }));
1:bc78238: 
1:bc78238:         assertTrue("Should have received a Message.", Wait.waitFor(new Wait.Condition() {
1:bc78238:             @Override
1:bc78238:             public boolean isSatisified() throws Exception {
1:bc78238:                 Message message = foreign.receive(100);
1:bc78238:                 if (message != null && ((TextMessage) message).getText().equals("to.foreign.broker")) {
1:bc78238:                     return true;
1:bc78238:                 }
1:bc78238:                 return false;
1:bc78238:             }
1:bc78238:         }));
1:bc78238:     }
1:bc78238: 
1:bc78238:     @Test
1:bc78238:     public void testSendAndReceiveOverBridgeWithRestart() throws Exception {
1:bc78238: 
1:bc78238:         startLocalBroker();
1:bc78238:         startForeignBroker();
1:bc78238: 
1:bc78238:         jmsTopicConnector.start();
1:bc78238: 
1:bc78238:         assertTrue("Should have Connected.", Wait.waitFor(new Wait.Condition() {
1:bc78238:             @Override
1:bc78238:             public boolean isSatisified() throws Exception {
1:bc78238:                 return jmsTopicConnector.isConnected();
1:bc78238:             }
1:bc78238:         }));
1:bc78238: 
1:bc78238:         stopLocalBroker();
1:bc78238:         stopForeignBroker();
1:bc78238: 
1:bc78238:         assertTrue("Should have detected connection drop.", Wait.waitFor(new Wait.Condition() {
1:bc78238:             @Override
1:bc78238:             public boolean isSatisified() throws Exception {
1:bc78238:                 return !jmsTopicConnector.isConnected();
1:bc78238:             }
1:bc78238:         }));
1:bc78238: 
1:bc78238:         startLocalBroker();
1:bc78238:         startForeignBroker();
1:bc78238: 
1:bc78238:         assertTrue("Should have Re-Connected.", Wait.waitFor(new Wait.Condition() {
1:bc78238:             @Override
1:bc78238:             public boolean isSatisified() throws Exception {
1:bc78238:                 return jmsTopicConnector.isConnected();
1:bc78238:             }
1:bc78238:         }));
1:bc78238: 
1:bc78238:         final MessageConsumer local = createConsumerForLocalBroker();
1:bc78238:         final MessageConsumer foreign = createConsumerForForeignBroker();
1:bc78238: 
1:bc78238:         sendMessageToForeignBroker("to.foreign.broker");
1:bc78238:         sendMessageToLocalBroker("to.local.broker");
1:bc78238: 
1:bc78238:         assertTrue("Should have received a Message.", Wait.waitFor(new Wait.Condition() {
1:bc78238:             @Override
1:bc78238:             public boolean isSatisified() throws Exception {
1:bc78238:                 Message message = local.receive(100);
1:bc78238:                 if (message != null && ((TextMessage) message).getText().equals("to.local.broker")) {
1:bc78238:                     return true;
1:bc78238:                 }
1:bc78238:                 return false;
1:bc78238:             }
1:bc78238:         }));
1:bc78238: 
1:bc78238:         assertTrue("Should have received a Message.", Wait.waitFor(new Wait.Condition() {
1:bc78238:             @Override
1:bc78238:             public boolean isSatisified() throws Exception {
1:bc78238:                 Message message = foreign.receive(100);
1:bc78238:                 if (message != null && ((TextMessage) message).getText().equals("to.foreign.broker")) {
1:bc78238:                     return true;
1:bc78238:                 }
1:bc78238:                 return false;
1:bc78238:             }
1:bc78238:         }));
1:bc78238:     }
1:bc78238: 
1:bc78238:     @Before
1:bc78238:     public void setUp() throws Exception {
1:bc78238: 
1:bc78238:         localConnectionFactory = createLocalConnectionFactory();
1:bc78238:         foreignConnectionFactory = createForeignConnectionFactory();
1:bc78238: 
1:bc78238:         outbound = new ActiveMQTopic("RECONNECT.TEST.OUT.TOPIC");
1:bc78238:         inbound = new ActiveMQTopic("RECONNECT.TEST.IN.TOPIC");
1:bc78238: 
1:7c9fec6:         jmsTopicConnector = new SimpleJmsTopicConnector();
1:bc78238: 
1:bc78238:         // Wire the bridges.
1:bc78238:         jmsTopicConnector.setOutboundTopicBridges(
1:bc78238:             new OutboundTopicBridge[] {new OutboundTopicBridge("RECONNECT.TEST.OUT.TOPIC")});
1:bc78238:         jmsTopicConnector.setInboundTopicBridges(
1:bc78238:                 new InboundTopicBridge[] {new InboundTopicBridge("RECONNECT.TEST.IN.TOPIC")});
1:bc78238: 
1:bc78238:         // Tell it how to reach the two brokers.
1:bc78238:         jmsTopicConnector.setOutboundTopicConnectionFactory(
1:bc78238:             new ActiveMQConnectionFactory("tcp://localhost:61617"));
1:bc78238:         jmsTopicConnector.setLocalTopicConnectionFactory(
1:bc78238:                 new ActiveMQConnectionFactory("tcp://localhost:61616"));
1:bc78238:     }
1:bc78238: 
1:bc78238:     @After
1:bc78238:     public void tearDown() throws Exception {
1:bc78238:         disposeConsumerConnections();
1:bc78238: 
1:bc78238:         try {
1:bc78238:             jmsTopicConnector.stop();
1:bc78238:             jmsTopicConnector = null;
1:bc78238:         } catch (Exception e) {
1:bc78238:         }
1:bc78238: 
1:bc78238:         try {
1:bc78238:             stopLocalBroker();
1:bc78238:         } catch (Throwable e) {
1:bc78238:         }
1:bc78238:         try {
1:bc78238:             stopForeignBroker();
1:bc78238:         } catch (Throwable e) {
1:bc78238:         }
1:bc78238:     }
1:bc78238: 
1:bc78238:     protected void disposeConsumerConnections() {
1:bc78238:         for (Iterator<Connection> iter = connections.iterator(); iter.hasNext();) {
1:bc78238:             Connection connection = iter.next();
1:bc78238:             try {
1:bc78238:                 connection.close();
1:bc78238:             } catch (Throwable ignore) {
1:bc78238:             }
1:bc78238:         }
1:bc78238:     }
1:bc78238: 
1:bc78238:     protected void startLocalBroker() throws Exception {
1:bc78238:         if (localBroker == null) {
1:bc78238:             localBroker = createFirstBroker();
1:bc78238:             localBroker.start();
1:bc78238:             localBroker.waitUntilStarted();
1:bc78238:         }
1:bc78238:     }
1:bc78238: 
1:bc78238:     protected void stopLocalBroker() throws Exception {
1:bc78238:         if (localBroker != null) {
1:bc78238:             localBroker.stop();
1:bc78238:             localBroker.waitUntilStopped();
1:bc78238:             localBroker = null;
1:bc78238:         }
1:bc78238:     }
1:bc78238: 
1:bc78238:     protected void startForeignBroker() throws Exception {
1:bc78238:         if (foreignBroker == null) {
1:bc78238:             foreignBroker = createSecondBroker();
1:bc78238:             foreignBroker.start();
1:bc78238:             foreignBroker.waitUntilStarted();
1:bc78238:         }
1:bc78238:     }
1:bc78238: 
1:bc78238:     protected void stopForeignBroker() throws Exception {
1:bc78238:         if (foreignBroker != null) {
1:bc78238:             foreignBroker.stop();
1:bc78238:             foreignBroker.waitUntilStopped();
1:bc78238:             foreignBroker = null;
1:bc78238:         }
1:bc78238:     }
1:bc78238: 
1:bc78238:     protected BrokerService createFirstBroker() throws Exception {
1:bc78238:         BrokerService broker = new BrokerService();
1:bc78238:         broker.setBrokerName("broker1");
1:bc78238:         broker.setPersistent(false);
1:bc78238:         broker.setUseJmx(false);
1:bc78238:         broker.addConnector("tcp://localhost:61616");
1:bc78238: 
1:bc78238:         return broker;
1:bc78238:     }
1:bc78238: 
1:bc78238:     protected BrokerService createSecondBroker() throws Exception {
1:bc78238: 
1:bc78238:         BrokerService broker = new BrokerService();
1:bc78238:         broker.setBrokerName("broker2");
1:bc78238:         broker.setPersistent(false);
1:bc78238:         broker.setUseJmx(false);
1:bc78238:         broker.addConnector("tcp://localhost:61617");
1:bc78238: 
1:bc78238:         return broker;
1:bc78238:     }
1:bc78238: 
1:bc78238:     protected ActiveMQConnectionFactory createLocalConnectionFactory() {
1:bc78238:         return new ActiveMQConnectionFactory("tcp://localhost:61616");
1:bc78238:     }
1:bc78238: 
1:bc78238:     protected ActiveMQConnectionFactory createForeignConnectionFactory() {
1:bc78238:         return new ActiveMQConnectionFactory("tcp://localhost:61617");
1:bc78238:     }
1:bc78238: 
1:bc78238:     protected void sendMessageToForeignBroker(String text) throws JMSException {
1:bc78238:         Connection connection = null;
1:bc78238:         try {
1:bc78238:             connection = localConnectionFactory.createConnection();
1:bc78238:             Session session = connection.createSession(false, Session.AUTO_ACKNOWLEDGE);
1:bc78238:             MessageProducer producer = session.createProducer(outbound);
1:bc78238:             TextMessage message = session.createTextMessage();
1:bc78238:             message.setText(text);
1:bc78238:             producer.send(message);
1:bc78238:         } finally {
1:bc78238:             try {
1:bc78238:                 connection.close();
1:bc78238:             } catch (Throwable ignore) {
1:bc78238:             }
1:bc78238:         }
1:bc78238:     }
1:bc78238: 
1:bc78238:     protected void sendMessageToLocalBroker(String text) throws JMSException {
1:bc78238:         Connection connection = null;
1:bc78238:         try {
1:bc78238:             connection = foreignConnectionFactory.createConnection();
1:bc78238:             Session session = connection.createSession(false, Session.AUTO_ACKNOWLEDGE);
1:bc78238:             MessageProducer producer = session.createProducer(inbound);
1:bc78238:             TextMessage message = session.createTextMessage();
1:bc78238:             message.setText(text);
1:bc78238:             producer.send(message);
1:bc78238:         } finally {
1:bc78238:             try {
1:bc78238:                 connection.close();
1:bc78238:             } catch (Throwable ignore) {
1:bc78238:             }
1:bc78238:         }
1:bc78238:     }
1:bc78238: 
1:bc78238:     protected MessageConsumer createConsumerForLocalBroker() throws JMSException {
1:bc78238:         Connection connection = localConnectionFactory.createConnection();
1:bc78238:         connections.add(connection);
1:bc78238:         connection.start();
1:bc78238: 
1:bc78238:         Session session = connection.createSession(false, Session.AUTO_ACKNOWLEDGE);
1:bc78238:         return session.createConsumer(inbound);
1:bc78238:     }
1:bc78238: 
1:bc78238:     protected MessageConsumer createConsumerForForeignBroker() throws JMSException {
1:bc78238:         Connection connection = foreignConnectionFactory.createConnection();
1:bc78238:         connections.add(connection);
1:bc78238:         connection.start();
1:bc78238: 
1:bc78238:         Session session = connection.createSession(false, Session.AUTO_ACKNOWLEDGE);
1:bc78238:         return session.createConsumer(outbound);
1:bc78238:     }
1:bc78238: }
============================================================================
author:Timothy A. Bish
-------------------------------------------------------------------------------
commit:c7d559f
/////////////////////////////////////////////////////////////////////////
1: import static org.junit.Assert.assertTrue;
1: 
1: import java.util.ArrayList;
1: import java.util.Iterator;
1: 
1: import javax.jms.Connection;
1: import javax.jms.Destination;
1: import javax.jms.JMSException;
1: import javax.jms.Message;
1: import javax.jms.MessageConsumer;
1: import javax.jms.MessageProducer;
1: import javax.jms.Session;
1: import javax.jms.TextMessage;
/////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////
1:     private final ArrayList<Connection> connections = new ArrayList<Connection>();
commit:ef24cc9
commit:bc78238
/////////////////////////////////////////////////////////////////////////
1: /**
1:  * Licensed to the Apache Software Foundation (ASF) under one or more
1:  * contributor license agreements.  See the NOTICE file distributed with
1:  * this work for additional information regarding copyright ownership.
1:  * The ASF licenses this file to You under the Apache License, Version 2.0
1:  * (the "License"); you may not use this file except in compliance with
1:  * the License.  You may obtain a copy of the License at
1:  *
1:  *      http://www.apache.org/licenses/LICENSE-2.0
1:  *
1:  * Unless required by applicable law or agreed to in writing, software
1:  * distributed under the License is distributed on an "AS IS" BASIS,
1:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:  * See the License for the specific language governing permissions and
1:  * limitations under the License.
1:  */
1: package org.apache.activemq.network.jms;
1: 
0: import static org.junit.Assert.*;
1: 
1: import org.apache.activemq.ActiveMQConnectionFactory;
1: import org.apache.activemq.broker.BrokerService;
1: import org.apache.activemq.command.ActiveMQTopic;
1: import org.apache.activemq.util.Wait;
1: import org.junit.After;
1: import org.junit.Before;
1: import org.junit.Test;
0: import org.slf4j.Logger;
0: import org.slf4j.LoggerFactory;
1: 
0: import javax.jms.*;
0: import java.util.ArrayList;
0: import java.util.Iterator;
1: 
1: public class TopicBridgeStandaloneReconnectTest {
1: 
0:     private static final Logger LOG = LoggerFactory.getLogger(TopicBridgeStandaloneReconnectTest.class);
1: 
0:     private JmsTopicConnector jmsTopicConnector;
1: 
1:     private BrokerService localBroker;
1:     private BrokerService foreignBroker;
1: 
1:     private ActiveMQConnectionFactory localConnectionFactory;
1:     private ActiveMQConnectionFactory foreignConnectionFactory;
1: 
1:     private Destination outbound;
1:     private Destination inbound;
1: 
0:     private ArrayList<Connection> connections = new ArrayList<Connection>();
1: 
1:     @Test
1:     public void testSendAndReceiveOverConnectedBridges() throws Exception {
1: 
1:         startLocalBroker();
1:         startForeignBroker();
1: 
1:         jmsTopicConnector.start();
1: 
1:         final MessageConsumer local = createConsumerForLocalBroker();
1:         final MessageConsumer foreign = createConsumerForForeignBroker();
1: 
1:         sendMessageToForeignBroker("to.foreign.broker");
1:         sendMessageToLocalBroker("to.local.broker");
1: 
1:         assertTrue("Should have received a Message.", Wait.waitFor(new Wait.Condition() {
1:             @Override
1:             public boolean isSatisified() throws Exception {
1:                 Message message = local.receive(100);
1:                 if (message != null && ((TextMessage) message).getText().equals("to.local.broker")) {
1:                     return true;
1:                 }
1:                 return false;
1:             }
1:         }));
1: 
1:         assertTrue("Should have received a Message.", Wait.waitFor(new Wait.Condition() {
1:             @Override
1:             public boolean isSatisified() throws Exception {
1:                 Message message = foreign.receive(100);
1:                 if (message != null && ((TextMessage) message).getText().equals("to.foreign.broker")) {
1:                     return true;
1:                 }
1:                 return false;
1:             }
1:         }));
1:     }
1: 
1:     @Test
1:     public void testSendAndReceiveOverBridgeWhenStartedBeforeBrokers() throws Exception {
1: 
1:         jmsTopicConnector.start();
1: 
1:         startLocalBroker();
1:         startForeignBroker();
1: 
1:         assertTrue("Should have Connected.", Wait.waitFor(new Wait.Condition() {
1:             @Override
1:             public boolean isSatisified() throws Exception {
1:                 return jmsTopicConnector.isConnected();
1:             }
1:         }));
1: 
1:         final MessageConsumer local = createConsumerForLocalBroker();
1:         final MessageConsumer foreign = createConsumerForForeignBroker();
1: 
1:         sendMessageToForeignBroker("to.foreign.broker");
1:         sendMessageToLocalBroker("to.local.broker");
1: 
1:         assertTrue("Should have received a Message.", Wait.waitFor(new Wait.Condition() {
1:             @Override
1:             public boolean isSatisified() throws Exception {
1:                 Message message = local.receive(100);
1:                 if (message != null && ((TextMessage) message).getText().equals("to.local.broker")) {
1:                     return true;
1:                 }
1:                 return false;
1:             }
1:         }));
1: 
1:         assertTrue("Should have received a Message.", Wait.waitFor(new Wait.Condition() {
1:             @Override
1:             public boolean isSatisified() throws Exception {
1:                 Message message = foreign.receive(100);
1:                 if (message != null && ((TextMessage) message).getText().equals("to.foreign.broker")) {
1:                     return true;
1:                 }
1:                 return false;
1:             }
1:         }));
1:     }
1: 
1:     @Test
1:     public void testSendAndReceiveOverBridgeWithRestart() throws Exception {
1: 
1:         startLocalBroker();
1:         startForeignBroker();
1: 
1:         jmsTopicConnector.start();
1: 
1:         assertTrue("Should have Connected.", Wait.waitFor(new Wait.Condition() {
1:             @Override
1:             public boolean isSatisified() throws Exception {
1:                 return jmsTopicConnector.isConnected();
1:             }
1:         }));
1: 
1:         stopLocalBroker();
1:         stopForeignBroker();
1: 
1:         assertTrue("Should have detected connection drop.", Wait.waitFor(new Wait.Condition() {
1:             @Override
1:             public boolean isSatisified() throws Exception {
1:                 return !jmsTopicConnector.isConnected();
1:             }
1:         }));
1: 
1:         startLocalBroker();
1:         startForeignBroker();
1: 
1:         assertTrue("Should have Re-Connected.", Wait.waitFor(new Wait.Condition() {
1:             @Override
1:             public boolean isSatisified() throws Exception {
1:                 return jmsTopicConnector.isConnected();
1:             }
1:         }));
1: 
1:         final MessageConsumer local = createConsumerForLocalBroker();
1:         final MessageConsumer foreign = createConsumerForForeignBroker();
1: 
1:         sendMessageToForeignBroker("to.foreign.broker");
1:         sendMessageToLocalBroker("to.local.broker");
1: 
1:         assertTrue("Should have received a Message.", Wait.waitFor(new Wait.Condition() {
1:             @Override
1:             public boolean isSatisified() throws Exception {
1:                 Message message = local.receive(100);
1:                 if (message != null && ((TextMessage) message).getText().equals("to.local.broker")) {
1:                     return true;
1:                 }
1:                 return false;
1:             }
1:         }));
1: 
1:         assertTrue("Should have received a Message.", Wait.waitFor(new Wait.Condition() {
1:             @Override
1:             public boolean isSatisified() throws Exception {
1:                 Message message = foreign.receive(100);
1:                 if (message != null && ((TextMessage) message).getText().equals("to.foreign.broker")) {
1:                     return true;
1:                 }
1:                 return false;
1:             }
1:         }));
1:     }
1: 
1:     @Before
1:     public void setUp() throws Exception {
1: 
1:         localConnectionFactory = createLocalConnectionFactory();
1:         foreignConnectionFactory = createForeignConnectionFactory();
1: 
1:         outbound = new ActiveMQTopic("RECONNECT.TEST.OUT.TOPIC");
1:         inbound = new ActiveMQTopic("RECONNECT.TEST.IN.TOPIC");
1: 
0:         jmsTopicConnector = new JmsTopicConnector();
1: 
1:         // Wire the bridges.
1:         jmsTopicConnector.setOutboundTopicBridges(
1:             new OutboundTopicBridge[] {new OutboundTopicBridge("RECONNECT.TEST.OUT.TOPIC")});
1:         jmsTopicConnector.setInboundTopicBridges(
1:                 new InboundTopicBridge[] {new InboundTopicBridge("RECONNECT.TEST.IN.TOPIC")});
1: 
1:         // Tell it how to reach the two brokers.
1:         jmsTopicConnector.setOutboundTopicConnectionFactory(
1:             new ActiveMQConnectionFactory("tcp://localhost:61617"));
1:         jmsTopicConnector.setLocalTopicConnectionFactory(
1:                 new ActiveMQConnectionFactory("tcp://localhost:61616"));
1:     }
1: 
1:     @After
1:     public void tearDown() throws Exception {
1:         disposeConsumerConnections();
1: 
1:         try {
1:             jmsTopicConnector.stop();
1:             jmsTopicConnector = null;
1:         } catch (Exception e) {
1:         }
1: 
1:         try {
1:             stopLocalBroker();
1:         } catch (Throwable e) {
1:         }
1:         try {
1:             stopForeignBroker();
1:         } catch (Throwable e) {
1:         }
1:     }
1: 
1:     protected void disposeConsumerConnections() {
1:         for (Iterator<Connection> iter = connections.iterator(); iter.hasNext();) {
1:             Connection connection = iter.next();
1:             try {
1:                 connection.close();
1:             } catch (Throwable ignore) {
1:             }
1:         }
1:     }
1: 
1:     protected void startLocalBroker() throws Exception {
1:         if (localBroker == null) {
1:             localBroker = createFirstBroker();
1:             localBroker.start();
1:             localBroker.waitUntilStarted();
1:         }
1:     }
1: 
1:     protected void stopLocalBroker() throws Exception {
1:         if (localBroker != null) {
1:             localBroker.stop();
1:             localBroker.waitUntilStopped();
1:             localBroker = null;
1:         }
1:     }
1: 
1:     protected void startForeignBroker() throws Exception {
1:         if (foreignBroker == null) {
1:             foreignBroker = createSecondBroker();
1:             foreignBroker.start();
1:             foreignBroker.waitUntilStarted();
1:         }
1:     }
1: 
1:     protected void stopForeignBroker() throws Exception {
1:         if (foreignBroker != null) {
1:             foreignBroker.stop();
1:             foreignBroker.waitUntilStopped();
1:             foreignBroker = null;
1:         }
1:     }
1: 
1:     protected BrokerService createFirstBroker() throws Exception {
1:         BrokerService broker = new BrokerService();
1:         broker.setBrokerName("broker1");
1:         broker.setPersistent(false);
1:         broker.setUseJmx(false);
1:         broker.addConnector("tcp://localhost:61616");
1: 
1:         return broker;
1:     }
1: 
1:     protected BrokerService createSecondBroker() throws Exception {
1: 
1:         BrokerService broker = new BrokerService();
1:         broker.setBrokerName("broker2");
1:         broker.setPersistent(false);
1:         broker.setUseJmx(false);
1:         broker.addConnector("tcp://localhost:61617");
1: 
1:         return broker;
1:     }
1: 
1:     protected ActiveMQConnectionFactory createLocalConnectionFactory() {
1:         return new ActiveMQConnectionFactory("tcp://localhost:61616");
1:     }
1: 
1:     protected ActiveMQConnectionFactory createForeignConnectionFactory() {
1:         return new ActiveMQConnectionFactory("tcp://localhost:61617");
1:     }
1: 
1:     protected void sendMessageToForeignBroker(String text) throws JMSException {
1:         Connection connection = null;
1:         try {
1:             connection = localConnectionFactory.createConnection();
1:             Session session = connection.createSession(false, Session.AUTO_ACKNOWLEDGE);
1:             MessageProducer producer = session.createProducer(outbound);
1:             TextMessage message = session.createTextMessage();
1:             message.setText(text);
1:             producer.send(message);
1:         } finally {
1:             try {
1:                 connection.close();
1:             } catch (Throwable ignore) {
1:             }
1:         }
1:     }
1: 
1:     protected void sendMessageToLocalBroker(String text) throws JMSException {
1:         Connection connection = null;
1:         try {
1:             connection = foreignConnectionFactory.createConnection();
1:             Session session = connection.createSession(false, Session.AUTO_ACKNOWLEDGE);
1:             MessageProducer producer = session.createProducer(inbound);
1:             TextMessage message = session.createTextMessage();
1:             message.setText(text);
1:             producer.send(message);
1:         } finally {
1:             try {
1:                 connection.close();
1:             } catch (Throwable ignore) {
1:             }
1:         }
1:     }
1: 
1:     protected MessageConsumer createConsumerForLocalBroker() throws JMSException {
1:         Connection connection = localConnectionFactory.createConnection();
1:         connections.add(connection);
1:         connection.start();
1: 
1:         Session session = connection.createSession(false, Session.AUTO_ACKNOWLEDGE);
1:         return session.createConsumer(inbound);
1:     }
1: 
1:     protected MessageConsumer createConsumerForForeignBroker() throws JMSException {
1:         Connection connection = foreignConnectionFactory.createConnection();
1:         connections.add(connection);
1:         connection.start();
1: 
1:         Session session = connection.createSession(false, Session.AUTO_ACKNOWLEDGE);
1:         return session.createConsumer(outbound);
1:     }
1: }
author:Hiram R. Chirino
-------------------------------------------------------------------------------
commit:7c9fec6
/////////////////////////////////////////////////////////////////////////
1:     private SimpleJmsTopicConnector jmsTopicConnector;
/////////////////////////////////////////////////////////////////////////
1:         jmsTopicConnector = new SimpleJmsTopicConnector();
============================================================================