1:1595378: /**
1:1595378:  * Licensed to the Apache Software Foundation (ASF) under one or more
1:1595378:  * contributor license agreements.  See the NOTICE file distributed with
1:1595378:  * this work for additional information regarding copyright ownership.
1:1595378:  * The ASF licenses this file to You under the Apache License, Version 2.0
1:1595378:  * (the "License"); you may not use this file except in compliance with
1:1595378:  * the License.  You may obtain a copy of the License at
1:1595378:  *
1:1595378:  *      http://www.apache.org/licenses/LICENSE-2.0
1:1595378:  *
1:1595378:  * Unless required by applicable law or agreed to in writing, software
1:1595378:  * distributed under the License is distributed on an "AS IS" BASIS,
1:1595378:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:1595378:  * See the License for the specific language governing permissions and
1:1595378:  * limitations under the License.
1:1595378:  */
1:1595378: package org.apache.activemq.filter;
1:1595378: 
1:1595378: import java.lang.IllegalStateException;
1:1595378: import javax.jms.*;
1:1595378: import org.apache.activemq.command.ActiveMQDestination;
1:1595378: 
1:1595378: /*
1:1595378:   * allow match to any set  of composite destinations, both queues and topics
1:1595378:  */
1:1595378: public class AnyDestination extends ActiveMQDestination {
1:1595378: 
1:1595378:     public AnyDestination(ActiveMQDestination[] destinations) {
1:1595378:         super(destinations);
1:1595378:         // ensure we are small when it comes to comparison in DestinationMap
1:8533a92:         physicalName = "!0";
1:1595378:     }
1:1595378: 
1:1595378:     @Override
1:1595378:     protected String getQualifiedPrefix() {
1:1595378:         return "Any://";
1:1595378:     }
1:1595378: 
1:1595378:     @Override
1:1595378:     public byte getDestinationType() {
1:1595378:         return ActiveMQDestination.QUEUE_TYPE & ActiveMQDestination.TOPIC_TYPE;
1:1595378:     }
1:1595378: 
1:1595378:     @Override
1:1595378:     public byte getDataStructureType() {
1:1595378:         throw new IllegalStateException("not for marshalling");
1:1595378:     }
1:1595378: 
1:1595378:     @Override
1:1595378:     public boolean isQueue() {
1:1595378:         return true;
1:1595378:     }
1:1595378: 
1:1595378:     @Override
1:1595378:     public boolean isTopic() {
1:1595378:         return true;
1:1595378:     }
1:1595378: }
============================================================================
author:gtully
-------------------------------------------------------------------------------
commit:8533a92
/////////////////////////////////////////////////////////////////////////
1:         physicalName = "!0";
author:Hiram R. Chirino
-------------------------------------------------------------------------------
commit:9a8f6e4
author:Gary Tully
-------------------------------------------------------------------------------
commit:1595378
/////////////////////////////////////////////////////////////////////////
1: /**
1:  * Licensed to the Apache Software Foundation (ASF) under one or more
1:  * contributor license agreements.  See the NOTICE file distributed with
1:  * this work for additional information regarding copyright ownership.
1:  * The ASF licenses this file to You under the Apache License, Version 2.0
1:  * (the "License"); you may not use this file except in compliance with
1:  * the License.  You may obtain a copy of the License at
1:  *
1:  *      http://www.apache.org/licenses/LICENSE-2.0
1:  *
1:  * Unless required by applicable law or agreed to in writing, software
1:  * distributed under the License is distributed on an "AS IS" BASIS,
1:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:  * See the License for the specific language governing permissions and
1:  * limitations under the License.
1:  */
1: package org.apache.activemq.filter;
1: 
1: import java.lang.IllegalStateException;
1: import javax.jms.*;
1: import org.apache.activemq.command.ActiveMQDestination;
1: 
1: /*
1:   * allow match to any set  of composite destinations, both queues and topics
1:  */
1: public class AnyDestination extends ActiveMQDestination {
1: 
1:     public AnyDestination(ActiveMQDestination[] destinations) {
1:         super(destinations);
1:         // ensure we are small when it comes to comparison in DestinationMap
0:         physicalName = "0";
1:     }
1: 
1:     @Override
1:     protected String getQualifiedPrefix() {
1:         return "Any://";
1:     }
1: 
1:     @Override
1:     public byte getDestinationType() {
1:         return ActiveMQDestination.QUEUE_TYPE & ActiveMQDestination.TOPIC_TYPE;
1:     }
1: 
1:     @Override
1:     public byte getDataStructureType() {
1:         throw new IllegalStateException("not for marshalling");
1:     }
1: 
1:     @Override
1:     public boolean isQueue() {
1:         return true;
1:     }
1: 
1:     @Override
1:     public boolean isTopic() {
1:         return true;
1:     }
1: }
============================================================================