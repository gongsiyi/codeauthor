1:b6fea83: /**
1:b6fea83:  * Licensed to the Apache Software Foundation (ASF) under one or more
1:b6fea83:  * contributor license agreements.  See the NOTICE file distributed with
1:b6fea83:  * this work for additional information regarding copyright ownership.
1:b6fea83:  * The ASF licenses this file to You under the Apache License, Version 2.0
1:b6fea83:  * (the "License"); you may not use this file except in compliance with
1:b6fea83:  * the License.  You may obtain a copy of the License at
1:b6fea83:  *
1:b6fea83:  *      http://www.apache.org/licenses/LICENSE-2.0
1:b6fea83:  *
1:b6fea83:  * Unless required by applicable law or agreed to in writing, software
1:b6fea83:  * distributed under the License is distributed on an "AS IS" BASIS,
1:b6fea83:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:b6fea83:  * See the License for the specific language governing permissions and
1:b6fea83:  * limitations under the License.
1:b6fea83:  */
1:b6fea83: package org.apache.activemq.bugs;
1:b6fea83: 
1:b6fea83: import java.util.Arrays;
1:b6fea83: import javax.jms.Connection;
1:b6fea83: import javax.jms.Message;
1:b6fea83: import javax.jms.Session;
1:b6fea83: import org.apache.activemq.ActiveMQConnectionFactory;
1:b6fea83: import org.apache.activemq.TestSupport;
1:b6fea83: import org.apache.activemq.broker.BrokerService;
1:b6fea83: import org.apache.activemq.broker.TransportConnector;
1:b6fea83: import org.apache.activemq.broker.region.policy.PolicyEntry;
1:b6fea83: import org.apache.activemq.broker.region.policy.PolicyMap;
1:b6fea83: import org.apache.activemq.command.ActiveMQDestination;
1:b6fea83: import org.apache.activemq.command.ActiveMQQueue;
1:b6fea83: import org.junit.After;
1:b6fea83: import org.junit.Before;
1:b6fea83: import org.junit.Test;
1:b6fea83: import org.junit.runner.RunWith;
1:b6fea83: import org.junit.runners.Parameterized;
1:b6fea83: import org.slf4j.Logger;
1:b6fea83: import org.slf4j.LoggerFactory;
1:b6fea83: 
1:b6fea83: 
1:b6fea83: import static org.junit.Assert.assertNotNull;
1:b6fea83: 
1:b6fea83: @RunWith(Parameterized.class)
1:b6fea83: public class AMQ5863CompositePublishTest {
1:b6fea83:     static Logger LOG = LoggerFactory.getLogger(AMQ5863CompositePublishTest.class);
1:b6fea83:     String brokerUrl;
1:b6fea83:     BrokerService brokerService;
1:b6fea83: 
1:b6fea83:     @Parameterized.Parameter(0)
1:b6fea83:     public TestSupport.PersistenceAdapterChoice persistenceAdapterChoice = TestSupport.PersistenceAdapterChoice.KahaDB;
1:b6fea83: 
1:b6fea83:     @Parameterized.Parameters(name = "#store:{0}")
1:b6fea83:     public static Iterable<Object[]> parameters() {
1:b6fea83:         return Arrays.asList(new Object[][]{
1:b6fea83:                 {TestSupport.PersistenceAdapterChoice.KahaDB},
1:b6fea83:                 {TestSupport.PersistenceAdapterChoice.LevelDB},
1:b6fea83:                 {TestSupport.PersistenceAdapterChoice.JDBC}
1:b6fea83:         });
1:b6fea83:     }
1:b6fea83: 
1:b6fea83:     @Before
1:b6fea83:     public void startBroker() throws Exception {
1:b6fea83:         brokerService = new BrokerService();
1:b6fea83:         TestSupport.setPersistenceAdapter(brokerService, persistenceAdapterChoice);
1:b6fea83:         brokerService.setDeleteAllMessagesOnStartup(true);
1:b6fea83:         brokerService.setUseJmx(false);
1:b6fea83:         brokerService.setAdvisorySupport(false);
1:b6fea83: 
1:b6fea83:         PolicyMap policyMap = new PolicyMap();
1:b6fea83:         PolicyEntry defaultEntry = new PolicyEntry();
1:b6fea83:         defaultEntry.setUseCache(false);
1:b6fea83:         defaultEntry.setExpireMessagesPeriod(0);
1:b6fea83:         policyMap.setDefaultEntry(defaultEntry);
1:b6fea83:         brokerService.setDestinationPolicy(policyMap);
1:b6fea83: 
1:b6fea83:         TransportConnector transportConnector = brokerService.addConnector("tcp://0.0.0.0:0");
1:b6fea83:         brokerService.start();
1:b6fea83:         brokerUrl = transportConnector.getPublishableConnectString();
1:b6fea83:     }
1:b6fea83: 
1:b6fea83:     @After
1:b6fea83:     public void stopBroker() throws Exception {
1:b6fea83:         if (brokerService != null) {
1:b6fea83:             brokerService.stop();
1:b6fea83:         }
1:b6fea83:     }
1:b6fea83: 
1:b6fea83:     @Test
1:b6fea83:     public void test() throws Exception {
1:b6fea83: 
1:b6fea83:         ActiveMQQueue compositeSendTo = new ActiveMQQueue("one,two,three");
1:b6fea83:         ActiveMQConnectionFactory connectionFactory = new ActiveMQConnectionFactory(brokerUrl);
1:b6fea83:         connectionFactory.setWatchTopicAdvisories(false);
1:b6fea83: 
1:b6fea83:         Connection connection = connectionFactory.createConnection();
1:b6fea83:         connection.start();
1:b6fea83: 
1:b6fea83:         try {
1:b6fea83: 
1:b6fea83:             Session session = connection.createSession(false, Session.AUTO_ACKNOWLEDGE);
1:b6fea83:             session.createProducer(compositeSendTo).send(session.createTextMessage("Bing"));
1:b6fea83: 
1:b6fea83:             for (ActiveMQDestination dest : compositeSendTo.getCompositeDestinations()) {
1:b6fea83:                 Message message = session.createConsumer(dest).receive(5000);
1:b6fea83:                 LOG.info("From: " + dest + ", " + message.getJMSDestination());
1:b6fea83:                 assertNotNull("got message from: " + dest, message);
1:b6fea83:             }
1:b6fea83: 
1:b6fea83:         } finally {
1:b6fea83:             connection.close();
1:b6fea83:         }
1:b6fea83:     }
1:b6fea83: 
1:b6fea83: }
============================================================================
author:gtully
-------------------------------------------------------------------------------
commit:b6fea83
/////////////////////////////////////////////////////////////////////////
1: /**
1:  * Licensed to the Apache Software Foundation (ASF) under one or more
1:  * contributor license agreements.  See the NOTICE file distributed with
1:  * this work for additional information regarding copyright ownership.
1:  * The ASF licenses this file to You under the Apache License, Version 2.0
1:  * (the "License"); you may not use this file except in compliance with
1:  * the License.  You may obtain a copy of the License at
1:  *
1:  *      http://www.apache.org/licenses/LICENSE-2.0
1:  *
1:  * Unless required by applicable law or agreed to in writing, software
1:  * distributed under the License is distributed on an "AS IS" BASIS,
1:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:  * See the License for the specific language governing permissions and
1:  * limitations under the License.
1:  */
1: package org.apache.activemq.bugs;
1: 
1: import java.util.Arrays;
1: import javax.jms.Connection;
1: import javax.jms.Message;
1: import javax.jms.Session;
1: import org.apache.activemq.ActiveMQConnectionFactory;
1: import org.apache.activemq.TestSupport;
1: import org.apache.activemq.broker.BrokerService;
1: import org.apache.activemq.broker.TransportConnector;
1: import org.apache.activemq.broker.region.policy.PolicyEntry;
1: import org.apache.activemq.broker.region.policy.PolicyMap;
1: import org.apache.activemq.command.ActiveMQDestination;
1: import org.apache.activemq.command.ActiveMQQueue;
1: import org.junit.After;
1: import org.junit.Before;
1: import org.junit.Test;
1: import org.junit.runner.RunWith;
1: import org.junit.runners.Parameterized;
1: import org.slf4j.Logger;
1: import org.slf4j.LoggerFactory;
1: 
1: 
1: import static org.junit.Assert.assertNotNull;
1: 
1: @RunWith(Parameterized.class)
1: public class AMQ5863CompositePublishTest {
1:     static Logger LOG = LoggerFactory.getLogger(AMQ5863CompositePublishTest.class);
1:     String brokerUrl;
1:     BrokerService brokerService;
1: 
1:     @Parameterized.Parameter(0)
1:     public TestSupport.PersistenceAdapterChoice persistenceAdapterChoice = TestSupport.PersistenceAdapterChoice.KahaDB;
1: 
1:     @Parameterized.Parameters(name = "#store:{0}")
1:     public static Iterable<Object[]> parameters() {
1:         return Arrays.asList(new Object[][]{
1:                 {TestSupport.PersistenceAdapterChoice.KahaDB},
1:                 {TestSupport.PersistenceAdapterChoice.LevelDB},
1:                 {TestSupport.PersistenceAdapterChoice.JDBC}
1:         });
1:     }
1: 
1:     @Before
1:     public void startBroker() throws Exception {
1:         brokerService = new BrokerService();
1:         TestSupport.setPersistenceAdapter(brokerService, persistenceAdapterChoice);
1:         brokerService.setDeleteAllMessagesOnStartup(true);
1:         brokerService.setUseJmx(false);
1:         brokerService.setAdvisorySupport(false);
1: 
1:         PolicyMap policyMap = new PolicyMap();
1:         PolicyEntry defaultEntry = new PolicyEntry();
1:         defaultEntry.setUseCache(false);
1:         defaultEntry.setExpireMessagesPeriod(0);
1:         policyMap.setDefaultEntry(defaultEntry);
1:         brokerService.setDestinationPolicy(policyMap);
1: 
1:         TransportConnector transportConnector = brokerService.addConnector("tcp://0.0.0.0:0");
1:         brokerService.start();
1:         brokerUrl = transportConnector.getPublishableConnectString();
1:     }
1: 
1:     @After
1:     public void stopBroker() throws Exception {
1:         if (brokerService != null) {
1:             brokerService.stop();
1:         }
1:     }
1: 
1:     @Test
1:     public void test() throws Exception {
1: 
1:         ActiveMQQueue compositeSendTo = new ActiveMQQueue("one,two,three");
1:         ActiveMQConnectionFactory connectionFactory = new ActiveMQConnectionFactory(brokerUrl);
1:         connectionFactory.setWatchTopicAdvisories(false);
1: 
1:         Connection connection = connectionFactory.createConnection();
1:         connection.start();
1: 
1:         try {
1: 
1:             Session session = connection.createSession(false, Session.AUTO_ACKNOWLEDGE);
1:             session.createProducer(compositeSendTo).send(session.createTextMessage("Bing"));
1: 
1:             for (ActiveMQDestination dest : compositeSendTo.getCompositeDestinations()) {
1:                 Message message = session.createConsumer(dest).receive(5000);
1:                 LOG.info("From: " + dest + ", " + message.getJMSDestination());
1:                 assertNotNull("got message from: " + dest, message);
1:             }
1: 
1:         } finally {
1:             connection.close();
1:         }
1:     }
1: 
1: }
============================================================================