1:affd91e: /**
1:affd91e:  * Licensed to the Apache Software Foundation (ASF) under one or more
1:affd91e:  * contributor license agreements.  See the NOTICE file distributed with
1:affd91e:  * this work for additional information regarding copyright ownership.
1:affd91e:  * The ASF licenses this file to You under the Apache License, Version 2.0
1:affd91e:  * (the "License"); you may not use this file except in compliance with
1:affd91e:  * the License.  You may obtain a copy of the License at
1:affd91e:  *
1:affd91e:  *      http://www.apache.org/licenses/LICENSE-2.0
1:affd91e:  *
1:affd91e:  * Unless required by applicable law or agreed to in writing, software
1:affd91e:  * distributed under the License is distributed on an "AS IS" BASIS,
1:affd91e:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:affd91e:  * See the License for the specific language governing permissions and
1:affd91e:  * limitations under the License.
1:affd91e:  */
1:affd91e: package org.apache.activemq.bugs;
2:affd91e: 
1:affd91e: import java.io.File;
1:affd91e: import java.util.ArrayList;
1:affd91e: import java.util.List;
1:affd91e: import java.util.concurrent.CountDownLatch;
1:affd91e: import java.util.concurrent.TimeUnit;
1:affd91e: import java.util.concurrent.atomic.AtomicInteger;
1:21c3ba3: 
1:affd91e: import javax.jms.Connection;
1:affd91e: import javax.jms.ConnectionFactory;
1:affd91e: import javax.jms.DeliveryMode;
1:affd91e: import javax.jms.JMSException;
1:affd91e: import javax.jms.Message;
1:affd91e: import javax.jms.MessageConsumer;
1:affd91e: import javax.jms.MessageListener;
1:affd91e: import javax.jms.MessageProducer;
1:affd91e: import javax.jms.Queue;
1:affd91e: import javax.jms.Session;
1:affd91e: import javax.jms.TextMessage;
1:21c3ba3: 
1:affd91e: import org.apache.activemq.ActiveMQConnectionFactory;
1:affd91e: import org.apache.activemq.broker.BrokerService;
1:affd91e: import org.apache.activemq.store.kahadb.KahaDBStore;
1:affd91e: import org.apache.activemq.util.IOHelper;
1:21c3ba3: import org.junit.After;
1:21c3ba3: import org.junit.Before;
1:21c3ba3: import org.junit.Test;
1:21c3ba3: import org.slf4j.Logger;
1:21c3ba3: import org.slf4j.LoggerFactory;
1:affd91e: 
1:21c3ba3: public class AMQ2512Test {
1:affd91e: 
1:21c3ba3:     private static final Logger LOG = LoggerFactory.getLogger(AMQ2512Test.class);
1:affd91e: 
1:21c3ba3:     private final String QUEUE_NAME = "dee.q";
1:21c3ba3:     private final int INITIAL_MESSAGES_CNT = 1000;
1:21c3ba3:     private final int WORKER_INTERNAL_ITERATIONS = 100;
1:21c3ba3:     private final int TOTAL_MESSAGES_CNT = INITIAL_MESSAGES_CNT * WORKER_INTERNAL_ITERATIONS + INITIAL_MESSAGES_CNT;
1:21c3ba3:     private final byte[] payload = new byte[5 * 1024];
1:21c3ba3:     private final String TEXT = new String(payload);
1:affd91e: 
1:21c3ba3:     private final String PRP_INITIAL_ID = "initial-id";
1:21c3ba3:     private final String PRP_WORKER_ID = "worker-id";
1:affd91e: 
1:21c3ba3:     private final CountDownLatch LATCH = new CountDownLatch(TOTAL_MESSAGES_CNT);
1:21c3ba3:     private final AtomicInteger ON_MSG_COUNTER = new AtomicInteger();
1:21c3ba3: 
1:21c3ba3:     private BrokerService brokerService;
1:21c3ba3:     private Connection connection;
1:21c3ba3:     private String connectionURI;
1:21c3ba3: 
1:e0c2c17:     @Test(timeout = 5*60000)
1:affd91e:     public void testKahaDBFailure() throws Exception {
1:21c3ba3:         final ConnectionFactory fac = new ActiveMQConnectionFactory(connectionURI);
1:affd91e:         connection = fac.createConnection();
1:affd91e:         final Session session = connection.createSession(false, Session.AUTO_ACKNOWLEDGE);
1:affd91e:         final Queue queue = session.createQueue(QUEUE_NAME);
1:affd91e:         final MessageProducer producer = session.createProducer(queue);
1:affd91e:         producer.setDeliveryMode(DeliveryMode.PERSISTENT);
1:affd91e:         connection.start();
1:affd91e: 
1:affd91e:         final long startTime = System.nanoTime();
1:affd91e: 
1:affd91e:         final List<Consumer> consumers = new ArrayList<Consumer>();
1:affd91e:         for (int i = 0; i < 20; i++) {
1:affd91e:             consumers.add(new Consumer("worker-" + i));
1:affd91e:         }
1:affd91e: 
1:affd91e:         for (int i = 0; i < INITIAL_MESSAGES_CNT; i++) {
1:affd91e:             final TextMessage msg = session.createTextMessage(TEXT);
1:affd91e:             msg.setStringProperty(PRP_INITIAL_ID, "initial-" + i);
1:affd91e:             producer.send(msg);
1:affd91e:         }
1:affd91e: 
1:affd91e:         LATCH.await();
1:affd91e:         final long endTime = System.nanoTime();
1:21c3ba3:         LOG.info("Total execution time = "
1:affd91e:                 + TimeUnit.MILLISECONDS.convert(endTime - startTime, TimeUnit.NANOSECONDS) + " [ms].");
1:21c3ba3:         LOG.info("Rate = " + TOTAL_MESSAGES_CNT
1:affd91e:                 / TimeUnit.SECONDS.convert(endTime - startTime, TimeUnit.NANOSECONDS) + " [msg/s].");
1:affd91e: 
1:affd91e:         for (Consumer c : consumers) {
1:affd91e:             c.close();
1:affd91e:         }
1:21c3ba3: 
1:affd91e:         connection.close();
1:affd91e:     }
1:affd91e: 
1:21c3ba3:     private final class Consumer implements MessageListener {
1:21c3ba3: 
1:affd91e:         private final String name;
1:affd91e:         private final Session session;
1:affd91e:         private final MessageProducer producer;
1:affd91e: 
1:affd91e:         private Consumer(String name) {
1:affd91e:             this.name = name;
1:affd91e:             try {
1:affd91e:                 session = connection.createSession(false, Session.CLIENT_ACKNOWLEDGE);
1:affd91e:                 final Queue queue = session.createQueue(QUEUE_NAME + "?consumer.prefetchSize=10");
1:affd91e:                 producer = session.createProducer(queue);
1:affd91e:                 producer.setDeliveryMode(DeliveryMode.PERSISTENT);
1:affd91e:                 final MessageConsumer consumer = session.createConsumer(queue);
1:affd91e:                 consumer.setMessageListener(this);
1:affd91e:             } catch (JMSException e) {
1:affd91e:                 e.printStackTrace();
1:affd91e:                 throw new RuntimeException(e);
1:affd91e:             }
1:affd91e:         }
1:affd91e: 
1:21c3ba3:         @Override
1:affd91e:         public void onMessage(Message message) {
1:affd91e:             final TextMessage msg = (TextMessage) message;
1:affd91e:             try {
1:affd91e:                 if (!msg.propertyExists(PRP_WORKER_ID)) {
1:affd91e:                     for (int i = 0; i < WORKER_INTERNAL_ITERATIONS; i++) {
1:affd91e:                         final TextMessage newMsg = session.createTextMessage(msg.getText());
1:affd91e:                         newMsg.setStringProperty(PRP_WORKER_ID, name + "-" + i);
1:affd91e:                         newMsg.setStringProperty(PRP_INITIAL_ID, msg.getStringProperty(PRP_INITIAL_ID));
1:affd91e:                         producer.send(newMsg);
1:affd91e:                     }
1:affd91e:                 }
1:affd91e:                 msg.acknowledge();
1:affd91e: 
1:affd91e:             } catch (JMSException e) {
1:affd91e:                 e.printStackTrace();
1:affd91e:                 throw new RuntimeException(e);
1:affd91e:             } finally {
1:affd91e:                 final int onMsgCounter = ON_MSG_COUNTER.getAndIncrement();
1:affd91e:                 if (onMsgCounter % 1000 == 0) {
1:21c3ba3:                     LOG.info("message received: " + onMsgCounter);
1:affd91e:                 }
1:affd91e:                 LATCH.countDown();
1:affd91e:             }
1:affd91e:         }
1:affd91e: 
1:affd91e:         private void close() {
1:affd91e:             if (session != null) {
1:affd91e:                 try {
1:affd91e:                     session.close();
1:affd91e:                 } catch (JMSException e) {
1:affd91e:                     e.printStackTrace();
1:affd91e:                     throw new RuntimeException(e);
1:affd91e:                 }
1:affd91e:             }
1:affd91e:         }
1:affd91e:     }
1:affd91e: 
1:21c3ba3:     @Before
1:21c3ba3:     public void setUp() throws Exception {
1:21c3ba3:         brokerService = createBroker();
1:21c3ba3:         brokerService.start();
1:21c3ba3: 
1:21c3ba3:         connectionURI = brokerService.getTransportConnectorByName("openwire").getPublishableConnectString();
1:affd91e:     }
1:affd91e: 
1:21c3ba3:     @After
1:21c3ba3:     public void tearDown() throws Exception {
1:21c3ba3:         if (brokerService != null) {
1:21c3ba3:             brokerService.stop();
1:21c3ba3:             brokerService.waitUntilStopped();
1:21c3ba3:         }
1:21c3ba3:     }
1:21c3ba3: 
1:affd91e:     protected BrokerService createBroker() throws Exception {
1:affd91e:         File dataFileDir = new File("target/test-amq-2512/datadb");
1:affd91e:         IOHelper.mkdirs(dataFileDir);
1:affd91e:         IOHelper.deleteChildren(dataFileDir);
1:21c3ba3: 
1:affd91e:         KahaDBStore kaha = new KahaDBStore();
1:21c3ba3:         kaha.setDirectory(dataFileDir);
1:21c3ba3:         kaha.setEnableJournalDiskSyncs(false);
1:21c3ba3: 
1:affd91e:         BrokerService answer = new BrokerService();
1:affd91e:         answer.setPersistenceAdapter(kaha);
1:affd91e:         answer.setDataDirectoryFile(dataFileDir);
1:affd91e:         answer.setUseJmx(false);
1:21c3ba3:         answer.addConnector("tcp://localhost:0").setName("openwire");
1:21c3ba3: 
1:affd91e:         return answer;
1:affd91e:     }
1:affd91e: }
============================================================================
author:gtully
-------------------------------------------------------------------------------
commit:e0c2c17
/////////////////////////////////////////////////////////////////////////
1:     @Test(timeout = 5*60000)
author:Timothy Bish
-------------------------------------------------------------------------------
commit:21c3ba3
/////////////////////////////////////////////////////////////////////////
1: 
/////////////////////////////////////////////////////////////////////////
1: 
1: import org.junit.After;
1: import org.junit.Before;
1: import org.junit.Test;
1: import org.slf4j.Logger;
1: import org.slf4j.LoggerFactory;
1: public class AMQ2512Test {
1:     private static final Logger LOG = LoggerFactory.getLogger(AMQ2512Test.class);
1:     private final String QUEUE_NAME = "dee.q";
1:     private final int INITIAL_MESSAGES_CNT = 1000;
1:     private final int WORKER_INTERNAL_ITERATIONS = 100;
1:     private final int TOTAL_MESSAGES_CNT = INITIAL_MESSAGES_CNT * WORKER_INTERNAL_ITERATIONS + INITIAL_MESSAGES_CNT;
1:     private final byte[] payload = new byte[5 * 1024];
1:     private final String TEXT = new String(payload);
1:     private final String PRP_INITIAL_ID = "initial-id";
1:     private final String PRP_WORKER_ID = "worker-id";
1:     private final CountDownLatch LATCH = new CountDownLatch(TOTAL_MESSAGES_CNT);
1:     private final AtomicInteger ON_MSG_COUNTER = new AtomicInteger();
1: 
1:     private BrokerService brokerService;
1:     private Connection connection;
1:     private String connectionURI;
1: 
0:     @Test(timeout = 60000)
1:         final ConnectionFactory fac = new ActiveMQConnectionFactory(connectionURI);
/////////////////////////////////////////////////////////////////////////
1:         LOG.info("Total execution time = "
1:         LOG.info("Rate = " + TOTAL_MESSAGES_CNT
1: 
1:     private final class Consumer implements MessageListener {
1: 
/////////////////////////////////////////////////////////////////////////
1:         @Override
/////////////////////////////////////////////////////////////////////////
1:                     LOG.info("message received: " + onMsgCounter);
/////////////////////////////////////////////////////////////////////////
1:     @Before
1:     public void setUp() throws Exception {
1:         brokerService = createBroker();
1:         brokerService.start();
1: 
1:         connectionURI = brokerService.getTransportConnectorByName("openwire").getPublishableConnectString();
1:     @After
1:     public void tearDown() throws Exception {
1:         if (brokerService != null) {
1:             brokerService.stop();
1:             brokerService.waitUntilStopped();
1:         }
1:     }
1: 
1: 
1:         kaha.setDirectory(dataFileDir);
1:         kaha.setEnableJournalDiskSyncs(false);
1: 
1:         answer.addConnector("tcp://localhost:0").setName("openwire");
1: 
author:Timothy A. Bish
-------------------------------------------------------------------------------
commit:ef24cc9
author:Robert Davies
-------------------------------------------------------------------------------
commit:affd91e
/////////////////////////////////////////////////////////////////////////
1: /**
1:  * Licensed to the Apache Software Foundation (ASF) under one or more
1:  * contributor license agreements.  See the NOTICE file distributed with
1:  * this work for additional information regarding copyright ownership.
1:  * The ASF licenses this file to You under the Apache License, Version 2.0
1:  * (the "License"); you may not use this file except in compliance with
1:  * the License.  You may obtain a copy of the License at
1:  *
1:  *      http://www.apache.org/licenses/LICENSE-2.0
1:  *
1:  * Unless required by applicable law or agreed to in writing, software
1:  * distributed under the License is distributed on an "AS IS" BASIS,
1:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:  * See the License for the specific language governing permissions and
1:  * limitations under the License.
1:  */
1: package org.apache.activemq.bugs;
1: 
1: import java.io.File;
1: import java.util.ArrayList;
1: import java.util.List;
1: import java.util.concurrent.CountDownLatch;
1: import java.util.concurrent.TimeUnit;
1: import java.util.concurrent.atomic.AtomicInteger;
1: import javax.jms.Connection;
1: import javax.jms.ConnectionFactory;
1: import javax.jms.DeliveryMode;
1: import javax.jms.JMSException;
1: import javax.jms.Message;
1: import javax.jms.MessageConsumer;
1: import javax.jms.MessageListener;
1: import javax.jms.MessageProducer;
1: import javax.jms.Queue;
1: import javax.jms.Session;
1: import javax.jms.TextMessage;
1: import org.apache.activemq.ActiveMQConnectionFactory;
0: import org.apache.activemq.EmbeddedBrokerTestSupport;
1: import org.apache.activemq.broker.BrokerService;
1: import org.apache.activemq.store.kahadb.KahaDBStore;
1: import org.apache.activemq.util.IOHelper;
1: 
0: public class AMQ2512Test extends EmbeddedBrokerTestSupport {
0:     private static Connection connection;
0:     private final static String QUEUE_NAME = "dee.q";
0:     private final static int INITIAL_MESSAGES_CNT = 1000;
0:     private final static int WORKER_INTERNAL_ITERATIONS = 100;
0:     private final static int TOTAL_MESSAGES_CNT = INITIAL_MESSAGES_CNT * WORKER_INTERNAL_ITERATIONS
0:             + INITIAL_MESSAGES_CNT;
0:     private final static byte[] payload = new byte[5 * 1024];
0:     private final static String TEXT = new String(payload);
1: 
0:     private final static String PRP_INITIAL_ID = "initial-id";
0:     private final static String PRP_WORKER_ID = "worker-id";
1: 
0:     private final static CountDownLatch LATCH = new CountDownLatch(TOTAL_MESSAGES_CNT);
1: 
0:     private final static AtomicInteger ON_MSG_COUNTER = new AtomicInteger();
1: 
1:     public void testKahaDBFailure() throws Exception {
0:         final ConnectionFactory fac = new ActiveMQConnectionFactory(this.bindAddress);
1:         connection = fac.createConnection();
1:         final Session session = connection.createSession(false, Session.AUTO_ACKNOWLEDGE);
1:         final Queue queue = session.createQueue(QUEUE_NAME);
1:         final MessageProducer producer = session.createProducer(queue);
1:         producer.setDeliveryMode(DeliveryMode.PERSISTENT);
1:         connection.start();
1: 
1:         final long startTime = System.nanoTime();
1: 
1:         final List<Consumer> consumers = new ArrayList<Consumer>();
1:         for (int i = 0; i < 20; i++) {
1:             consumers.add(new Consumer("worker-" + i));
1:         }
1: 
1:         for (int i = 0; i < INITIAL_MESSAGES_CNT; i++) {
1:             final TextMessage msg = session.createTextMessage(TEXT);
1:             msg.setStringProperty(PRP_INITIAL_ID, "initial-" + i);
1:             producer.send(msg);
1:         }
1: 
1:         LATCH.await();
1:         final long endTime = System.nanoTime();
0:         System.out.println("Total execution time = "
1:                 + TimeUnit.MILLISECONDS.convert(endTime - startTime, TimeUnit.NANOSECONDS) + " [ms].");
0:         System.out.println("Rate = " + TOTAL_MESSAGES_CNT
1:                 / TimeUnit.SECONDS.convert(endTime - startTime, TimeUnit.NANOSECONDS) + " [msg/s].");
1: 
1:         for (Consumer c : consumers) {
1:             c.close();
1:         }
1:         connection.close();
1:     }
1: 
0:     private final static class Consumer implements MessageListener {
1:         private final String name;
1:         private final Session session;
1:         private final MessageProducer producer;
1: 
1:         private Consumer(String name) {
1:             this.name = name;
1:             try {
1:                 session = connection.createSession(false, Session.CLIENT_ACKNOWLEDGE);
1:                 final Queue queue = session.createQueue(QUEUE_NAME + "?consumer.prefetchSize=10");
1:                 producer = session.createProducer(queue);
1:                 producer.setDeliveryMode(DeliveryMode.PERSISTENT);
1:                 final MessageConsumer consumer = session.createConsumer(queue);
1:                 consumer.setMessageListener(this);
1:             } catch (JMSException e) {
1:                 e.printStackTrace();
1:                 throw new RuntimeException(e);
1:             }
1:         }
1: 
1:         public void onMessage(Message message) {
1:             final TextMessage msg = (TextMessage) message;
1:             try {
1:                 if (!msg.propertyExists(PRP_WORKER_ID)) {
1:                     for (int i = 0; i < WORKER_INTERNAL_ITERATIONS; i++) {
1:                         final TextMessage newMsg = session.createTextMessage(msg.getText());
1:                         newMsg.setStringProperty(PRP_WORKER_ID, name + "-" + i);
1:                         newMsg.setStringProperty(PRP_INITIAL_ID, msg.getStringProperty(PRP_INITIAL_ID));
1:                         producer.send(newMsg);
1:                     }
1:                 }
1:                 msg.acknowledge();
1: 
1:             } catch (JMSException e) {
1:                 e.printStackTrace();
1:                 throw new RuntimeException(e);
1:             } finally {
1:                 final int onMsgCounter = ON_MSG_COUNTER.getAndIncrement();
1:                 if (onMsgCounter % 1000 == 0) {
0:                     System.out.println("message received: " + onMsgCounter);
1:                 }
1:                 LATCH.countDown();
1:             }
1:         }
1: 
1:         private void close() {
1:             if (session != null) {
1:                 try {
1:                     session.close();
1:                 } catch (JMSException e) {
1:                     e.printStackTrace();
1:                     throw new RuntimeException(e);
1:                 }
1:             }
1:         }
1:     }
1: 
0:     @Override
0:     protected void setUp() throws Exception {
0:         bindAddress = "tcp://0.0.0.0:61617";
0:         super.setUp();
1:     }
1: 
0:     @Override
1:     protected BrokerService createBroker() throws Exception {
1:         File dataFileDir = new File("target/test-amq-2512/datadb");
1:         IOHelper.mkdirs(dataFileDir);
1:         IOHelper.deleteChildren(dataFileDir);
1:         KahaDBStore kaha = new KahaDBStore();
0:         kaha.setDirectory(dataFileDir); 
1:         BrokerService answer = new BrokerService();
1:         answer.setPersistenceAdapter(kaha);
1:       
0:         kaha.setEnableJournalDiskSyncs(false);
0:         //kaha.setIndexCacheSize(10);
1:         answer.setDataDirectoryFile(dataFileDir);
1:         answer.setUseJmx(false);
0:         answer.addConnector(bindAddress);
1:         return answer;
1:     }
1: }
============================================================================