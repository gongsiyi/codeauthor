1:d29ca2a: /**
1:57b4941:  * Licensed to the Apache Software Foundation (ASF) under one or more
1:57b4941:  * contributor license agreements.  See the NOTICE file distributed with
1:57b4941:  * this work for additional information regarding copyright ownership.
1:57b4941:  * The ASF licenses this file to You under the Apache License, Version 2.0
1:57b4941:  * (the "License"); you may not use this file except in compliance with
1:57b4941:  * the License.  You may obtain a copy of the License at
3:d29ca2a:  *
1:230a86c:  *      http://www.apache.org/licenses/LICENSE-2.0
1:d29ca2a:  *
1:d29ca2a:  * Unless required by applicable law or agreed to in writing, software
1:d29ca2a:  * distributed under the License is distributed on an "AS IS" BASIS,
1:d29ca2a:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:d29ca2a:  * See the License for the specific language governing permissions and
1:d29ca2a:  * limitations under the License.
3:d29ca2a:  */
1:d29ca2a: package org.apache.activemq.command;
5:d29ca2a: 
1:d29ca2a: import java.io.IOException;
1:d29ca2a: 
1:d29ca2a: import org.apache.activemq.state.CommandVisitor;
1:d29ca2a: 
1:d29ca2a: /**
1:d29ca2a:  * 
1:4afa5d6:  * @openwire:marshaller code="7"
1:b0c2a40:  * 
1:d29ca2a:  */
1:d29ca2a: public class TransactionInfo extends BaseCommand {
1:d29ca2a: 
1:f812e34:     public static final byte DATA_STRUCTURE_TYPE = CommandTypes.TRANSACTION_INFO;
1:d29ca2a: 
1:d29ca2a:     public static final byte BEGIN = 0;
1:f812e34:     public static final byte PREPARE = 1;
1:f812e34:     public static final byte COMMIT_ONE_PHASE = 2;
1:f812e34:     public static final byte COMMIT_TWO_PHASE = 3;
1:f812e34:     public static final byte ROLLBACK = 4;
1:f812e34:     public static final byte RECOVER = 5;
1:f812e34:     public static final byte FORGET = 6;
1:f812e34:     public static final byte END = 7;
1:f812e34: 
1:d29ca2a:     protected byte type;
1:d29ca2a:     protected ConnectionId connectionId;
1:d29ca2a:     protected TransactionId transactionId;
1:f812e34: 
1:f812e34:     public TransactionInfo() {
3:d29ca2a:     }
1:f812e34: 
1:d29ca2a:     public TransactionInfo(ConnectionId connectionId, TransactionId transactionId, byte type) {
1:f812e34:         this.connectionId = connectionId;
1:f812e34:         this.transactionId = transactionId;
1:f812e34:         this.type = type;
1:d29ca2a:     }
1:d29ca2a: 
1:d29ca2a:     public byte getDataStructureType() {
1:d29ca2a:         return DATA_STRUCTURE_TYPE;
1:d29ca2a:     }
1:d29ca2a: 
1:d29ca2a:     /**
1:d29ca2a:      * @openwire:property version=1 cache=true
1:f812e34:      */
1:d29ca2a:     public ConnectionId getConnectionId() {
1:d29ca2a:         return connectionId;
1:d29ca2a:     }
1:f812e34: 
1:d29ca2a:     public void setConnectionId(ConnectionId connectionId) {
1:d29ca2a:         this.connectionId = connectionId;
1:d29ca2a:     }
1:d29ca2a: 
1:d29ca2a:     /**
1:d29ca2a:      * @openwire:property version=1 cache=true
1:f812e34:      */
1:d29ca2a:     public TransactionId getTransactionId() {
1:d29ca2a:         return transactionId;
1:f812e34:     }
1:f812e34: 
1:d29ca2a:     public void setTransactionId(TransactionId transactionId) {
1:d29ca2a:         this.transactionId = transactionId;
1:d29ca2a:     }
1:d29ca2a: 
1:d29ca2a:     /**
1:d29ca2a:      * @openwire:property version=1
1:d29ca2a:      */
1:d29ca2a:     public byte getType() {
1:d29ca2a:         return type;
1:f812e34:     }
1:f812e34: 
1:d29ca2a:     public void setType(byte type) {
1:d29ca2a:         this.type = type;
1:d29ca2a:     }
1:d29ca2a: 
1:7f5213b:     public Response visit(CommandVisitor visitor) throws Exception {
1:f812e34:         switch (type) {
1:d29ca2a:         case TransactionInfo.BEGIN:
1:d29ca2a:             return visitor.processBeginTransaction(this);
1:d29ca2a:         case TransactionInfo.END:
1:d29ca2a:             return visitor.processEndTransaction(this);
1:d29ca2a:         case TransactionInfo.PREPARE:
1:d29ca2a:             return visitor.processPrepareTransaction(this);
1:d29ca2a:         case TransactionInfo.COMMIT_ONE_PHASE:
1:d29ca2a:             return visitor.processCommitTransactionOnePhase(this);
1:d29ca2a:         case TransactionInfo.COMMIT_TWO_PHASE:
1:d29ca2a:             return visitor.processCommitTransactionTwoPhase(this);
1:d29ca2a:         case TransactionInfo.ROLLBACK:
1:d29ca2a:             return visitor.processRollbackTransaction(this);
1:d29ca2a:         case TransactionInfo.RECOVER:
1:d29ca2a:             return visitor.processRecoverTransactions(this);
1:d29ca2a:         case TransactionInfo.FORGET:
1:d29ca2a:             return visitor.processForgetTransaction(this);
1:d29ca2a:         default:
1:f812e34:             throw new IOException("Transaction info type unknown: " + type);
1:d29ca2a:         }
1:d29ca2a:     }
1:d29ca2a: 
1:d29ca2a: }
============================================================================
author:Hadrian Zbarcea
-------------------------------------------------------------------------------
commit:d54d046
author:Hiram R. Chirino
-------------------------------------------------------------------------------
commit:9a8f6e4
commit:b0c2a40
/////////////////////////////////////////////////////////////////////////
1:  * 
commit:f812e34
/////////////////////////////////////////////////////////////////////////
1:     public static final byte DATA_STRUCTURE_TYPE = CommandTypes.TRANSACTION_INFO;
1:     public static final byte PREPARE = 1;
1:     public static final byte COMMIT_ONE_PHASE = 2;
1:     public static final byte COMMIT_TWO_PHASE = 3;
1:     public static final byte ROLLBACK = 4;
1:     public static final byte RECOVER = 5;
1:     public static final byte FORGET = 6;
1:     public static final byte END = 7;
1: 
1: 
1:     public TransactionInfo() {
1: 
1:         this.connectionId = connectionId;
1:         this.transactionId = transactionId;
1:         this.type = type;
/////////////////////////////////////////////////////////////////////////
1:      */
1: 
1:      */
1:     }
1: 
/////////////////////////////////////////////////////////////////////////
1:     }
1: 
1:         switch (type) {
/////////////////////////////////////////////////////////////////////////
1:             throw new IOException("Transaction info type unknown: " + type);
commit:230a86c
/////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////
1:  *      http://www.apache.org/licenses/LICENSE-2.0
commit:57b4941
/////////////////////////////////////////////////////////////////////////
1:  * Licensed to the Apache Software Foundation (ASF) under one or more
1:  * contributor license agreements.  See the NOTICE file distributed with
1:  * this work for additional information regarding copyright ownership.
1:  * The ASF licenses this file to You under the Apache License, Version 2.0
1:  * (the "License"); you may not use this file except in compliance with
1:  * the License.  You may obtain a copy of the License at
commit:7f5213b
/////////////////////////////////////////////////////////////////////////
1:     public Response visit(CommandVisitor visitor) throws Exception {
commit:48b4869
/////////////////////////////////////////////////////////////////////////
0:  * Copyright 2005-2006 The Apache Software Foundation
commit:d29ca2a
/////////////////////////////////////////////////////////////////////////
1: /**
1:  *
0:  * Copyright 2004 The Apache Software Foundation
1:  *
0:  * Licensed under the Apache License, Version 2.0 (the "License");
0:  * you may not use this file except in compliance with the License.
0:  * You may obtain a copy of the License at
1:  *
0:  * http://www.apache.org/licenses/LICENSE-2.0
1:  *
1:  * Unless required by applicable law or agreed to in writing, software
1:  * distributed under the License is distributed on an "AS IS" BASIS,
1:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:  * See the License for the specific language governing permissions and
1:  * limitations under the License.
1:  */
1: package org.apache.activemq.command;
1: 
1: import java.io.IOException;
1: 
1: import org.apache.activemq.state.CommandVisitor;
1: 
1: /**
1:  * 
0:  * @openwire:marshaller
0:  * @version $Revision: 1.10 $
1:  */
1: public class TransactionInfo extends BaseCommand {
1: 
0:     public static final byte DATA_STRUCTURE_TYPE=CommandTypes.TRANSACTION_INFO;
1: 
1: 
1:     public static final byte BEGIN = 0;
0:     public static final byte PREPARE=1; 
0:     public static final byte COMMIT_ONE_PHASE=2; 
0:     public static final byte COMMIT_TWO_PHASE=3; 
0:     public static final byte ROLLBACK=4; 
0:     public static final byte RECOVER=5; 
0:     public static final byte FORGET=6; 
0:     public static final byte END=7; 
1:     
1:     protected byte type;
1:     protected ConnectionId connectionId;
1:     protected TransactionId transactionId;
1:     
0:     public TransactionInfo() {        
1:     }
1:     
1:     public TransactionInfo(ConnectionId connectionId, TransactionId transactionId, byte type) {
0:         this.connectionId=connectionId;
0:         this.transactionId=transactionId;
0:         this.type=type;
1:     }
1: 
1:     public byte getDataStructureType() {
1:         return DATA_STRUCTURE_TYPE;
1:     }
1: 
1:     /**
1:      * @openwire:property version=1 cache=true
1:      */    
1:     public ConnectionId getConnectionId() {
1:         return connectionId;
1:     }
1:     public void setConnectionId(ConnectionId connectionId) {
1:         this.connectionId = connectionId;
1:     }
1: 
1:     /**
1:      * @openwire:property version=1 cache=true
1:      */    
1:     public TransactionId getTransactionId() {
1:         return transactionId;
1:     }    
1:     public void setTransactionId(TransactionId transactionId) {
1:         this.transactionId = transactionId;
1:     }
1: 
1:     /**
1:      * @openwire:property version=1
1:      */
1:     public byte getType() {
1:         return type;
1:     }    
1:     public void setType(byte type) {
1:         this.type = type;
1:     }
1: 
0:     public Response visit(CommandVisitor visitor) throws Throwable {
0:         switch( type ) {
1:         case TransactionInfo.BEGIN:
1:             return visitor.processBeginTransaction(this);
1:         case TransactionInfo.END:
1:             return visitor.processEndTransaction(this);
1:         case TransactionInfo.PREPARE:
1:             return visitor.processPrepareTransaction(this);
1:         case TransactionInfo.COMMIT_ONE_PHASE:
1:             return visitor.processCommitTransactionOnePhase(this);
1:         case TransactionInfo.COMMIT_TWO_PHASE:
1:             return visitor.processCommitTransactionTwoPhase(this);
1:         case TransactionInfo.ROLLBACK:
1:             return visitor.processRollbackTransaction(this);
1:         case TransactionInfo.RECOVER:
1:             return visitor.processRecoverTransactions(this);
1:         case TransactionInfo.FORGET:
1:             return visitor.processForgetTransaction(this);
1:         default:
0:             throw new IOException("Transaction info type unknown: "+type);
1:         }
1:     }
1: 
1: }
author:James Strachan
-------------------------------------------------------------------------------
commit:4afa5d6
/////////////////////////////////////////////////////////////////////////
1:  * @openwire:marshaller code="7"
============================================================================