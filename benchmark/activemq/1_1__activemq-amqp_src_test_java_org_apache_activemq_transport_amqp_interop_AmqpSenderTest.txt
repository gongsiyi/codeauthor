1:72839b7: /**
1:72839b7:  * Licensed to the Apache Software Foundation (ASF) under one or more
1:72839b7:  * contributor license agreements.  See the NOTICE file distributed with
1:72839b7:  * this work for additional information regarding copyright ownership.
1:72839b7:  * The ASF licenses this file to You under the Apache License, Version 2.0
1:72839b7:  * (the "License"); you may not use this file except in compliance with
1:72839b7:  * the License.  You may obtain a copy of the License at
1:72839b7:  *
1:72839b7:  *      http://www.apache.org/licenses/LICENSE-2.0
1:72839b7:  *
1:72839b7:  * Unless required by applicable law or agreed to in writing, software
1:72839b7:  * distributed under the License is distributed on an "AS IS" BASIS,
1:72839b7:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:72839b7:  * See the License for the specific language governing permissions and
1:72839b7:  * limitations under the License.
1:72839b7:  */
1:72839b7: package org.apache.activemq.transport.amqp.interop;
1:72839b7: 
1:4a1c05b: import static org.apache.activemq.transport.amqp.AmqpSupport.contains;
1:72839b7: import static org.junit.Assert.assertEquals;
1:72839b7: import static org.junit.Assert.assertNotNull;
1:b3bf8e7: import static org.junit.Assert.assertTrue;
1:72839b7: 
1:cec3245: import java.util.concurrent.CountDownLatch;
1:cec3245: import java.util.concurrent.TimeUnit;
1:cec3245: 
1:4a1c05b: import org.apache.activemq.broker.jmx.BrokerViewMBean;
1:72839b7: import org.apache.activemq.broker.jmx.QueueViewMBean;
1:b3bf8e7: import org.apache.activemq.broker.jmx.TopicViewMBean;
1:72839b7: import org.apache.activemq.transport.amqp.client.AmqpClient;
1:72839b7: import org.apache.activemq.transport.amqp.client.AmqpClientTestSupport;
1:72839b7: import org.apache.activemq.transport.amqp.client.AmqpConnection;
1:72839b7: import org.apache.activemq.transport.amqp.client.AmqpMessage;
1:72839b7: import org.apache.activemq.transport.amqp.client.AmqpSender;
1:72839b7: import org.apache.activemq.transport.amqp.client.AmqpSession;
1:4a1c05b: import org.apache.activemq.transport.amqp.client.AmqpSupport;
1:cec3245: import org.apache.activemq.transport.amqp.client.AmqpValidator;
1:b3bf8e7: import org.apache.activemq.util.Wait;
1:4a1c05b: import org.apache.qpid.proton.amqp.Symbol;
1:381a1ae: import org.apache.qpid.proton.amqp.transport.ReceiverSettleMode;
1:381a1ae: import org.apache.qpid.proton.amqp.transport.SenderSettleMode;
1:cec3245: import org.apache.qpid.proton.engine.Delivery;
1:cec3245: import org.apache.qpid.proton.engine.Sender;
1:72839b7: import org.junit.Test;
1:72839b7: 
1:72839b7: /**
1:72839b7:  * Test broker behavior when creating AMQP senders
1:72839b7:  */
1:72839b7: public class AmqpSenderTest extends AmqpClientTestSupport {
1:72839b7: 
1:72839b7:     @Test(timeout = 60000)
1:72839b7:     public void testCreateQueueSender() throws Exception {
1:72839b7:         AmqpClient client = createAmqpClient();
1:381a1ae: 
1:1ac8954:         AmqpConnection connection = trackConnection(client.connect());
2:72839b7:         AmqpSession session = connection.createSession();
1:72839b7: 
1:72839b7:         assertEquals(0, brokerService.getAdminView().getQueues().length);
1:72839b7: 
1:72839b7:         AmqpSender sender = session.createSender("queue://" + getTestName());
1:72839b7: 
1:72839b7:         assertEquals(1, brokerService.getAdminView().getQueues().length);
1:72839b7:         assertNotNull(getProxyToQueue(getTestName()));
1:72839b7:         assertEquals(1, brokerService.getAdminView().getQueueProducers().length);
1:72839b7:         sender.close();
1:72839b7:         assertEquals(0, brokerService.getAdminView().getQueueProducers().length);
1:72839b7: 
1:72839b7:         connection.close();
1:72839b7:     }
1:4a1c05b: 
1:b3bf8e7:     @Test(timeout = 60000)
1:72839b7:     public void testCreateTopicSender() throws Exception {
1:72839b7:         AmqpClient client = createAmqpClient();
1:1ac8954:         AmqpConnection connection = trackConnection(client.connect());
1:cb370d0:         AmqpSession session = connection.createSession();
1:b3bf8e7: 
1:72839b7:         assertEquals(0, brokerService.getAdminView().getTopics().length);
1:b3bf8e7: 
1:72839b7:         AmqpSender sender = session.createSender("topic://" + getTestName());
1:72839b7: 
1:72839b7:         assertEquals(1, brokerService.getAdminView().getTopics().length);
1:72839b7:         assertNotNull(getProxyToTopic(getTestName()));
1:72839b7:         assertEquals(1, brokerService.getAdminView().getTopicProducers().length);
1:72839b7:         sender.close();
1:72839b7:         assertEquals(0, brokerService.getAdminView().getTopicProducers().length);
1:72839b7: 
1:72839b7:         connection.close();
1:72839b7:     }
1:72839b7: 
1:72839b7:     @Test(timeout = 60000)
1:381a1ae:     public void testSenderSettlementModeSettledIsHonored() throws Exception {
1:381a1ae:         doTestSenderSettlementModeIsHonored(SenderSettleMode.SETTLED);
1:381a1ae:     }
1:381a1ae: 
1:381a1ae:     @Test(timeout = 60000)
1:381a1ae:     public void testSenderSettlementModeUnsettledIsHonored() throws Exception {
1:381a1ae:         doTestSenderSettlementModeIsHonored(SenderSettleMode.UNSETTLED);
1:381a1ae:     }
1:381a1ae: 
1:381a1ae:     @Test(timeout = 60000)
1:381a1ae:     public void testSenderSettlementModeMixedIsHonored() throws Exception {
1:381a1ae:         doTestSenderSettlementModeIsHonored(SenderSettleMode.MIXED);
1:381a1ae:     }
1:381a1ae: 
1:381a1ae:     public void doTestSenderSettlementModeIsHonored(SenderSettleMode settleMode) throws Exception {
1:381a1ae:         AmqpClient client = createAmqpClient();
1:381a1ae: 
1:381a1ae:         client.setTraceFrames(true);
1:381a1ae: 
1:381a1ae:         AmqpConnection connection = trackConnection(client.connect());
1:381a1ae:         AmqpSession session = connection.createSession();
1:381a1ae: 
1:381a1ae:         assertEquals(0, brokerService.getAdminView().getQueues().length);
1:381a1ae: 
1:381a1ae:         AmqpSender sender = session.createSender(
1:381a1ae:             "queue://" + getTestName(), settleMode, ReceiverSettleMode.FIRST);
1:381a1ae: 
1:381a1ae:         assertEquals(1, brokerService.getAdminView().getQueues().length);
1:381a1ae:         assertNotNull(getProxyToQueue(getTestName()));
1:381a1ae:         assertEquals(1, brokerService.getAdminView().getQueueProducers().length);
1:381a1ae: 
1:381a1ae:         assertEquals(settleMode, sender.getEndpoint().getRemoteSenderSettleMode());
1:381a1ae: 
1:381a1ae:         AmqpMessage message = new AmqpMessage();
1:381a1ae:         message.setText("Test-Message");
1:381a1ae:         sender.send(message);
1:381a1ae: 
1:381a1ae:         sender.close();
1:381a1ae:         assertEquals(0, brokerService.getAdminView().getQueueProducers().length);
1:381a1ae: 
1:381a1ae:         connection.close();
1:381a1ae:     }
1:381a1ae: 
1:381a1ae:     @Test(timeout = 60000)
1:381a1ae:     public void testReceiverSettlementModeSetToFirst() throws Exception {
1:381a1ae:         doTestReceiverSettlementModeForcedToFirst(ReceiverSettleMode.FIRST);
1:381a1ae:     }
1:381a1ae: 
1:381a1ae:     @Test(timeout = 60000)
1:381a1ae:     public void testReceiverSettlementModeSetToSecond() throws Exception {
1:381a1ae:         doTestReceiverSettlementModeForcedToFirst(ReceiverSettleMode.SECOND);
1:381a1ae:     }
1:381a1ae: 
1:381a1ae:     /*
1:381a1ae:      * The Broker does not currently support ReceiverSettleMode of SECOND so we ensure that
1:381a1ae:      * it always drops that back to FIRST to let the client know.  The client will need to
1:381a1ae:      * check and react accordingly.
1:381a1ae:      */
1:381a1ae:     private void doTestReceiverSettlementModeForcedToFirst(ReceiverSettleMode modeToUse) throws Exception {
1:381a1ae:         AmqpClient client = createAmqpClient();
1:381a1ae:         AmqpConnection connection = trackConnection(client.connect());
1:381a1ae:         AmqpSession session = connection.createSession();
1:381a1ae: 
1:381a1ae:         assertEquals(0, brokerService.getAdminView().getQueues().length);
1:381a1ae: 
1:381a1ae:         AmqpSender sender = session.createSender(
1:381a1ae:             "queue://" + getTestName(), SenderSettleMode.UNSETTLED, modeToUse);
1:381a1ae: 
1:381a1ae:         assertEquals(1, brokerService.getAdminView().getQueues().length);
1:381a1ae:         assertNotNull(getProxyToQueue(getTestName()));
1:381a1ae:         assertEquals(1, brokerService.getAdminView().getQueueProducers().length);
1:381a1ae: 
1:381a1ae:         assertEquals(ReceiverSettleMode.FIRST, sender.getEndpoint().getRemoteReceiverSettleMode());
1:381a1ae: 
1:381a1ae:         sender.close();
1:381a1ae:         assertEquals(0, brokerService.getAdminView().getQueueProducers().length);
1:381a1ae: 
1:381a1ae:         connection.close();
1:381a1ae:     }
1:381a1ae: 
1:381a1ae:     @Test(timeout = 60000)
1:72839b7:     public void testSendMessageToQueue() throws Exception {
1:72839b7:         AmqpClient client = createAmqpClient();
1:1ac8954:         AmqpConnection connection = trackConnection(client.connect());
1:72839b7:         AmqpSession session = connection.createSession();
1:72839b7: 
1:72839b7:         AmqpSender sender = session.createSender("queue://" + getTestName());
1:72839b7:         AmqpMessage message = new AmqpMessage();
1:72839b7: 
1:72839b7:         message.setText("Test-Message");
1:72839b7: 
1:72839b7:         sender.send(message);
1:72839b7: 
1:72839b7:         QueueViewMBean queue = getProxyToQueue(getTestName());
1:72839b7: 
1:72839b7:         assertEquals(1, queue.getQueueSize());
1:72839b7: 
1:72839b7:         sender.close();
1:72839b7:         connection.close();
1:72839b7:     }
1:72839b7: 
1:72839b7:     @Test(timeout = 60000)
1:a5a52b6:     public void testSendMultipleMessagesToQueue() throws Exception {
1:a5a52b6:         final int MSG_COUNT = 100;
1:a5a52b6: 
1:a5a52b6:         AmqpClient client = createAmqpClient();
1:1ac8954:         AmqpConnection connection = trackConnection(client.connect());
1:a5a52b6:         AmqpSession session = connection.createSession();
1:a5a52b6: 
1:a5a52b6:         AmqpSender sender = session.createSender("queue://" + getTestName());
1:a5a52b6: 
1:a5a52b6:         for (int i = 0; i < MSG_COUNT; ++i) {
1:a5a52b6:             AmqpMessage message = new AmqpMessage();
1:a5a52b6:             message.setText("Test-Message: " + i);
1:a5a52b6:             sender.send(message);
1:a5a52b6:         }
1:a5a52b6: 
1:a5a52b6:         QueueViewMBean queue = getProxyToQueue(getTestName());
1:a5a52b6: 
1:a5a52b6:         assertEquals(MSG_COUNT, queue.getQueueSize());
1:a5a52b6: 
1:a5a52b6:         sender.close();
1:a5a52b6:         connection.close();
1:a5a52b6:     }
1:a5a52b6: 
1:a5a52b6:     @Test(timeout = 60000)
1:cb370d0:     public void testUnsettledSender() throws Exception {
1:cb370d0:         final int MSG_COUNT = 1000;
1:cb370d0: 
1:cec3245:         final CountDownLatch settled = new CountDownLatch(MSG_COUNT);
1:cec3245: 
1:cb370d0:         AmqpClient client = createAmqpClient();
1:1ac8954:         AmqpConnection connection = trackConnection(client.connect());
1:cb370d0: 
1:cec3245:         connection.setStateInspector(new AmqpValidator() {
1:cec3245: 
1:cec3245:             @Override
1:cec3245:             public void inspectDeliveryUpdate(Sender sender, Delivery delivery) {
1:cec3245:                 if (delivery.remotelySettled()) {
1:cec3245:                     LOG.trace("Remote settled message for sender: {}", sender.getName());
1:cec3245:                     settled.countDown();
1:cec3245:                 }
1:cec3245:             }
1:cec3245:         });
1:cec3245: 
1:cec3245:         AmqpSession session = connection.createSession();
1:cb370d0:         AmqpSender sender = session.createSender("topic://" + getTestName(), false);
1:cb370d0: 
1:cb370d0:         for (int i = 1; i <= MSG_COUNT; ++i) {
1:cb370d0:             AmqpMessage message = new AmqpMessage();
1:cb370d0:             message.setText("Test-Message: " + i);
1:cb370d0:             sender.send(message);
1:cb370d0: 
1:cb370d0:             if (i % 1000 == 0) {
1:cb370d0:                 LOG.info("Sent message: {}", i);
1:cb370d0:             }
1:cb370d0:         }
1:cb370d0: 
1:cb370d0:         final TopicViewMBean topic = getProxyToTopic(getTestName());
1:cb370d0:         assertTrue("All messages should arrive", Wait.waitFor(new Wait.Condition() {
1:cb370d0: 
1:cb370d0:             @Override
1:cb370d0:             public boolean isSatisified() throws Exception {
1:cb370d0:                 return topic.getEnqueueCount() == MSG_COUNT;
1:cb370d0:             }
1:cb370d0:         }));
1:cec3245: 
1:cb370d0:         sender.close();
1:cb370d0: 
1:cec3245:         assertTrue("Remote should have settled all deliveries", settled.await(5, TimeUnit.MINUTES));
1:cec3245: 
1:cb370d0:         connection.close();
1:cb370d0:     }
1:cb370d0: 
1:cb370d0:     @Test(timeout = 60000)
1:b3bf8e7:     public void testPresettledSender() throws Exception {
1:b3bf8e7:         final int MSG_COUNT = 1000;
1:b3bf8e7: 
1:b3bf8e7:         AmqpClient client = createAmqpClient();
1:1ac8954:         AmqpConnection connection = trackConnection(client.connect());
1:b3bf8e7:         AmqpSession session = connection.createSession();
1:b3bf8e7: 
1:b3bf8e7:         AmqpSender sender = session.createSender("topic://" + getTestName(), true);
1:cb370d0: 
1:cb370d0:         for (int i = 1; i <= MSG_COUNT; ++i) {
1:b3bf8e7:             AmqpMessage message = new AmqpMessage();
1:b3bf8e7:             message.setText("Test-Message: " + i);
1:b3bf8e7:             sender.send(message);
1:b3bf8e7: 
1:cb370d0:             if (i % 1000 == 0) {
1:cb370d0:                 LOG.info("Sent message: {}", i);
1:cb370d0:             }
1:b3bf8e7:         }
1:b3bf8e7: 
1:b3bf8e7:         final TopicViewMBean topic = getProxyToTopic(getTestName());
1:b3bf8e7:         assertTrue("All messages should arrive", Wait.waitFor(new Wait.Condition() {
1:b3bf8e7: 
1:b3bf8e7:             @Override
1:b3bf8e7:             public boolean isSatisified() throws Exception {
1:b3bf8e7:                 return topic.getEnqueueCount() == MSG_COUNT;
1:b3bf8e7:             }
1:b3bf8e7:         }));
1:72839b7: 
1:b3bf8e7:         sender.close();
1:b3bf8e7:         connection.close();
1:b3bf8e7:     }
1:72839b7: 
1:4a1c05b:     @Test
1:4a1c05b:     public void testDeliveryDelayOfferedWhenRequested() throws Exception {
1:4a1c05b: 
1:4a1c05b:         final BrokerViewMBean brokerView = getProxyToBroker();
1:4a1c05b: 
1:4a1c05b:         AmqpClient client = createAmqpClient();
1:4a1c05b:         client.setValidator(new AmqpValidator() {
1:4a1c05b: 
1:4a1c05b:             @Override
1:4a1c05b:             public void inspectOpenedResource(Sender sender) {
1:4a1c05b: 
1:4a1c05b:                 Symbol[] offered = sender.getRemoteOfferedCapabilities();
1:4a1c05b:                 if (!contains(offered, AmqpSupport.DELAYED_DELIVERY)) {
1:4a1c05b:                     markAsInvalid("Broker did not indicate it support delayed message delivery");
1:4a1c05b:                 }
1:4a1c05b:             }
1:4a1c05b:         });
1:4a1c05b: 
1:4a1c05b:         AmqpConnection connection = trackConnection(client.connect());
1:4a1c05b:         AmqpSession session = connection.createSession();
1:4a1c05b: 
1:4a1c05b:         assertEquals(0, brokerView.getQueues().length);
1:4a1c05b: 
1:4a1c05b:         AmqpSender sender = session.createSender("queue://" + getTestName(), new Symbol[] { AmqpSupport.DELAYED_DELIVERY });
1:4a1c05b:         assertNotNull(sender);
1:4a1c05b: 
1:4a1c05b:         assertEquals(1, brokerView.getQueues().length);
1:4a1c05b: 
1:4a1c05b:         connection.getStateInspector().assertValid();
1:4a1c05b: 
1:4a1c05b:         sender.close();
1:4a1c05b:         connection.close();
1:4a1c05b:     }
1:72839b7: }
============================================================================
author:Timothy Bish
-------------------------------------------------------------------------------
commit:381a1ae
/////////////////////////////////////////////////////////////////////////
1: import org.apache.qpid.proton.amqp.transport.ReceiverSettleMode;
1: import org.apache.qpid.proton.amqp.transport.SenderSettleMode;
/////////////////////////////////////////////////////////////////////////
1: 
/////////////////////////////////////////////////////////////////////////
1:     public void testSenderSettlementModeSettledIsHonored() throws Exception {
1:         doTestSenderSettlementModeIsHonored(SenderSettleMode.SETTLED);
1:     }
1: 
1:     @Test(timeout = 60000)
1:     public void testSenderSettlementModeUnsettledIsHonored() throws Exception {
1:         doTestSenderSettlementModeIsHonored(SenderSettleMode.UNSETTLED);
1:     }
1: 
1:     @Test(timeout = 60000)
1:     public void testSenderSettlementModeMixedIsHonored() throws Exception {
1:         doTestSenderSettlementModeIsHonored(SenderSettleMode.MIXED);
1:     }
1: 
1:     public void doTestSenderSettlementModeIsHonored(SenderSettleMode settleMode) throws Exception {
1:         AmqpClient client = createAmqpClient();
1: 
1:         client.setTraceFrames(true);
1: 
1:         AmqpConnection connection = trackConnection(client.connect());
1:         AmqpSession session = connection.createSession();
1: 
1:         assertEquals(0, brokerService.getAdminView().getQueues().length);
1: 
1:         AmqpSender sender = session.createSender(
1:             "queue://" + getTestName(), settleMode, ReceiverSettleMode.FIRST);
1: 
1:         assertEquals(1, brokerService.getAdminView().getQueues().length);
1:         assertNotNull(getProxyToQueue(getTestName()));
1:         assertEquals(1, brokerService.getAdminView().getQueueProducers().length);
1: 
1:         assertEquals(settleMode, sender.getEndpoint().getRemoteSenderSettleMode());
1: 
1:         AmqpMessage message = new AmqpMessage();
1:         message.setText("Test-Message");
1:         sender.send(message);
1: 
1:         sender.close();
1:         assertEquals(0, brokerService.getAdminView().getQueueProducers().length);
1: 
1:         connection.close();
1:     }
1: 
1:     @Test(timeout = 60000)
1:     public void testReceiverSettlementModeSetToFirst() throws Exception {
1:         doTestReceiverSettlementModeForcedToFirst(ReceiverSettleMode.FIRST);
1:     }
1: 
1:     @Test(timeout = 60000)
1:     public void testReceiverSettlementModeSetToSecond() throws Exception {
1:         doTestReceiverSettlementModeForcedToFirst(ReceiverSettleMode.SECOND);
1:     }
1: 
1:     /*
1:      * The Broker does not currently support ReceiverSettleMode of SECOND so we ensure that
1:      * it always drops that back to FIRST to let the client know.  The client will need to
1:      * check and react accordingly.
1:      */
1:     private void doTestReceiverSettlementModeForcedToFirst(ReceiverSettleMode modeToUse) throws Exception {
1:         AmqpClient client = createAmqpClient();
1:         AmqpConnection connection = trackConnection(client.connect());
1:         AmqpSession session = connection.createSession();
1: 
1:         assertEquals(0, brokerService.getAdminView().getQueues().length);
1: 
1:         AmqpSender sender = session.createSender(
1:             "queue://" + getTestName(), SenderSettleMode.UNSETTLED, modeToUse);
1: 
1:         assertEquals(1, brokerService.getAdminView().getQueues().length);
1:         assertNotNull(getProxyToQueue(getTestName()));
1:         assertEquals(1, brokerService.getAdminView().getQueueProducers().length);
1: 
1:         assertEquals(ReceiverSettleMode.FIRST, sender.getEndpoint().getRemoteReceiverSettleMode());
1: 
1:         sender.close();
1:         assertEquals(0, brokerService.getAdminView().getQueueProducers().length);
1: 
1:         connection.close();
1:     }
1: 
1:     @Test(timeout = 60000)
commit:4a1c05b
/////////////////////////////////////////////////////////////////////////
1: import static org.apache.activemq.transport.amqp.AmqpSupport.contains;
/////////////////////////////////////////////////////////////////////////
1: import org.apache.activemq.broker.jmx.BrokerViewMBean;
/////////////////////////////////////////////////////////////////////////
1: import org.apache.activemq.transport.amqp.client.AmqpSupport;
1: import org.apache.qpid.proton.amqp.Symbol;
/////////////////////////////////////////////////////////////////////////
1: 
1:     @Test
1:     public void testDeliveryDelayOfferedWhenRequested() throws Exception {
1: 
1:         final BrokerViewMBean brokerView = getProxyToBroker();
1: 
1:         AmqpClient client = createAmqpClient();
1:         client.setValidator(new AmqpValidator() {
1: 
1:             @Override
1:             public void inspectOpenedResource(Sender sender) {
1: 
1:                 Symbol[] offered = sender.getRemoteOfferedCapabilities();
1:                 if (!contains(offered, AmqpSupport.DELAYED_DELIVERY)) {
1:                     markAsInvalid("Broker did not indicate it support delayed message delivery");
1:                 }
1:             }
1:         });
1: 
1:         AmqpConnection connection = trackConnection(client.connect());
1:         AmqpSession session = connection.createSession();
1: 
1:         assertEquals(0, brokerView.getQueues().length);
1: 
1:         AmqpSender sender = session.createSender("queue://" + getTestName(), new Symbol[] { AmqpSupport.DELAYED_DELIVERY });
1:         assertNotNull(sender);
1: 
1:         assertEquals(1, brokerView.getQueues().length);
1: 
1:         connection.getStateInspector().assertValid();
1: 
1:         sender.close();
1:         connection.close();
1:     }
commit:cec3245
/////////////////////////////////////////////////////////////////////////
1: import java.util.concurrent.CountDownLatch;
1: import java.util.concurrent.TimeUnit;
1: 
/////////////////////////////////////////////////////////////////////////
1: import org.apache.activemq.transport.amqp.client.AmqpValidator;
1: import org.apache.qpid.proton.engine.Delivery;
1: import org.apache.qpid.proton.engine.Sender;
/////////////////////////////////////////////////////////////////////////
1:         final CountDownLatch settled = new CountDownLatch(MSG_COUNT);
1: 
1:         connection.setStateInspector(new AmqpValidator() {
1: 
1:             @Override
1:             public void inspectDeliveryUpdate(Sender sender, Delivery delivery) {
1:                 if (delivery.remotelySettled()) {
1:                     LOG.trace("Remote settled message for sender: {}", sender.getName());
1:                     settled.countDown();
1:                 }
1:             }
1:         });
1: 
1:         AmqpSession session = connection.createSession();
/////////////////////////////////////////////////////////////////////////
1: 
1:         assertTrue("Remote should have settled all deliveries", settled.await(5, TimeUnit.MINUTES));
1: 
commit:1ac8954
/////////////////////////////////////////////////////////////////////////
1:         AmqpConnection connection = trackConnection(client.connect());
/////////////////////////////////////////////////////////////////////////
1:         AmqpConnection connection = trackConnection(client.connect());
/////////////////////////////////////////////////////////////////////////
1:         AmqpConnection connection = trackConnection(client.connect());
/////////////////////////////////////////////////////////////////////////
1:         AmqpConnection connection = trackConnection(client.connect());
/////////////////////////////////////////////////////////////////////////
1:         AmqpConnection connection = trackConnection(client.connect());
/////////////////////////////////////////////////////////////////////////
1:         AmqpConnection connection = trackConnection(client.connect());
commit:a5a52b6
/////////////////////////////////////////////////////////////////////////
1:     public void testSendMultipleMessagesToQueue() throws Exception {
1:         final int MSG_COUNT = 100;
1: 
1:         AmqpClient client = createAmqpClient();
0:         AmqpConnection connection = client.connect();
1:         AmqpSession session = connection.createSession();
1: 
1:         AmqpSender sender = session.createSender("queue://" + getTestName());
1: 
1:         for (int i = 0; i < MSG_COUNT; ++i) {
1:             AmqpMessage message = new AmqpMessage();
1:             message.setText("Test-Message: " + i);
1:             sender.send(message);
1:         }
1: 
1:         QueueViewMBean queue = getProxyToQueue(getTestName());
1: 
1:         assertEquals(MSG_COUNT, queue.getQueueSize());
1: 
1:         sender.close();
1:         connection.close();
1:     }
1: 
1:     @Test(timeout = 60000)
commit:cb370d0
/////////////////////////////////////////////////////////////////////////
1:     public void testUnsettledSender() throws Exception {
1:         final int MSG_COUNT = 1000;
1: 
1:         AmqpClient client = createAmqpClient();
0:         AmqpConnection connection = client.connect();
1:         AmqpSession session = connection.createSession();
1: 
1:         AmqpSender sender = session.createSender("topic://" + getTestName(), false);
1: 
1:         for (int i = 1; i <= MSG_COUNT; ++i) {
1:             AmqpMessage message = new AmqpMessage();
1:             message.setText("Test-Message: " + i);
1:             sender.send(message);
1: 
1:             if (i % 1000 == 0) {
1:                 LOG.info("Sent message: {}", i);
1:             }
1:         }
1: 
1:         final TopicViewMBean topic = getProxyToTopic(getTestName());
1:         assertTrue("All messages should arrive", Wait.waitFor(new Wait.Condition() {
1: 
1:             @Override
1:             public boolean isSatisified() throws Exception {
1:                 return topic.getEnqueueCount() == MSG_COUNT;
1:             }
1:         }));
1: 
1:         sender.close();
1:         connection.close();
1:     }
1: 
1:     @Test(timeout = 60000)
/////////////////////////////////////////////////////////////////////////
1:         for (int i = 1; i <= MSG_COUNT; ++i) {
1: 
1:             if (i % 1000 == 0) {
1:                 LOG.info("Sent message: {}", i);
1:             }
commit:b3bf8e7
/////////////////////////////////////////////////////////////////////////
1: import static org.junit.Assert.assertTrue;
1: import org.apache.activemq.broker.jmx.TopicViewMBean;
1: import org.apache.activemq.util.Wait;
/////////////////////////////////////////////////////////////////////////
1: 
1:     @Test(timeout = 60000)
1:     public void testPresettledSender() throws Exception {
1:         final int MSG_COUNT = 1000;
1: 
1:         AmqpClient client = createAmqpClient();
0:         AmqpConnection connection = client.connect();
1:         AmqpSession session = connection.createSession();
1: 
1:         AmqpSender sender = session.createSender("topic://" + getTestName(), true);
1: 
0:         for (int i = 0; i < MSG_COUNT; ++i) {
1:             AmqpMessage message = new AmqpMessage();
1:             message.setText("Test-Message: " + i);
1:             sender.send(message);
1:         }
1: 
1:         final TopicViewMBean topic = getProxyToTopic(getTestName());
1:         assertTrue("All messages should arrive", Wait.waitFor(new Wait.Condition() {
1: 
1:             @Override
1:             public boolean isSatisified() throws Exception {
1:                 return topic.getEnqueueCount() == MSG_COUNT;
1:             }
1:         }));
1: 
1:         sender.close();
1:         connection.close();
1:     }
commit:72839b7
/////////////////////////////////////////////////////////////////////////
1: /**
1:  * Licensed to the Apache Software Foundation (ASF) under one or more
1:  * contributor license agreements.  See the NOTICE file distributed with
1:  * this work for additional information regarding copyright ownership.
1:  * The ASF licenses this file to You under the Apache License, Version 2.0
1:  * (the "License"); you may not use this file except in compliance with
1:  * the License.  You may obtain a copy of the License at
1:  *
1:  *      http://www.apache.org/licenses/LICENSE-2.0
1:  *
1:  * Unless required by applicable law or agreed to in writing, software
1:  * distributed under the License is distributed on an "AS IS" BASIS,
1:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:  * See the License for the specific language governing permissions and
1:  * limitations under the License.
1:  */
1: package org.apache.activemq.transport.amqp.interop;
1: 
1: import static org.junit.Assert.assertEquals;
1: import static org.junit.Assert.assertNotNull;
1: 
1: import org.apache.activemq.broker.jmx.QueueViewMBean;
1: import org.apache.activemq.transport.amqp.client.AmqpClient;
1: import org.apache.activemq.transport.amqp.client.AmqpClientTestSupport;
1: import org.apache.activemq.transport.amqp.client.AmqpConnection;
1: import org.apache.activemq.transport.amqp.client.AmqpMessage;
1: import org.apache.activemq.transport.amqp.client.AmqpSender;
1: import org.apache.activemq.transport.amqp.client.AmqpSession;
1: import org.junit.Test;
1: 
1: /**
1:  * Test broker behavior when creating AMQP senders
1:  */
1: public class AmqpSenderTest extends AmqpClientTestSupport {
1: 
1:     @Test(timeout = 60000)
1:     public void testCreateQueueSender() throws Exception {
1:         AmqpClient client = createAmqpClient();
0:         AmqpConnection connection = client.connect();
1:         AmqpSession session = connection.createSession();
1: 
1:         assertEquals(0, brokerService.getAdminView().getQueues().length);
1: 
1:         AmqpSender sender = session.createSender("queue://" + getTestName());
1: 
1:         assertEquals(1, brokerService.getAdminView().getQueues().length);
1:         assertNotNull(getProxyToQueue(getTestName()));
1:         assertEquals(1, brokerService.getAdminView().getQueueProducers().length);
1:         sender.close();
1:         assertEquals(0, brokerService.getAdminView().getQueueProducers().length);
1: 
1:         connection.close();
1:     }
1: 
1:     @Test(timeout = 60000)
1:     public void testCreateTopicSender() throws Exception {
1:         AmqpClient client = createAmqpClient();
0:         AmqpConnection connection = client.connect();
1:         AmqpSession session = connection.createSession();
1: 
1:         assertEquals(0, brokerService.getAdminView().getTopics().length);
1: 
1:         AmqpSender sender = session.createSender("topic://" + getTestName());
1: 
1:         assertEquals(1, brokerService.getAdminView().getTopics().length);
1:         assertNotNull(getProxyToTopic(getTestName()));
1:         assertEquals(1, brokerService.getAdminView().getTopicProducers().length);
1:         sender.close();
1:         assertEquals(0, brokerService.getAdminView().getTopicProducers().length);
1: 
1:         connection.close();
1:     }
1: 
1:     @Test(timeout = 60000)
1:     public void testSendMessageToQueue() throws Exception {
1:         AmqpClient client = createAmqpClient();
0:         AmqpConnection connection = client.connect();
1:         AmqpSession session = connection.createSession();
1: 
1:         AmqpSender sender = session.createSender("queue://" + getTestName());
1:         AmqpMessage message = new AmqpMessage();
1: 
1:         message.setText("Test-Message");
1: 
1:         sender.send(message);
1: 
1:         QueueViewMBean queue = getProxyToQueue(getTestName());
1: 
1:         assertEquals(1, queue.getQueueSize());
1: 
1:         sender.close();
1:         connection.close();
1:     }
1: }
============================================================================