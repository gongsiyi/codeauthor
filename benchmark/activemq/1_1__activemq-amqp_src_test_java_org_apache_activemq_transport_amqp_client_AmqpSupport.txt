1:272fb2b: /*
1:272fb2b:  * Licensed to the Apache Software Foundation (ASF) under one or more
1:272fb2b:  * contributor license agreements.  See the NOTICE file distributed with
1:272fb2b:  * this work for additional information regarding copyright ownership.
1:272fb2b:  * The ASF licenses this file to You under the Apache License, Version 2.0
1:272fb2b:  * (the "License"); you may not use this file except in compliance with
1:272fb2b:  * the License.  You may obtain a copy of the License at
1:272fb2b:  *
1:272fb2b:  *      http://www.apache.org/licenses/LICENSE-2.0
1:272fb2b:  *
1:272fb2b:  * Unless required by applicable law or agreed to in writing, software
1:272fb2b:  * distributed under the License is distributed on an "AS IS" BASIS,
1:272fb2b:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:272fb2b:  * See the License for the specific language governing permissions and
1:272fb2b:  * limitations under the License.
1:272fb2b:  */
1:272fb2b: package org.apache.activemq.transport.amqp.client;
1:272fb2b: 
1:272fb2b: import java.io.IOException;
1:272fb2b: import java.util.Map;
1:272fb2b: 
1:272fb2b: import javax.jms.InvalidClientIDException;
1:272fb2b: import javax.jms.InvalidDestinationException;
1:272fb2b: import javax.jms.JMSException;
1:272fb2b: import javax.jms.JMSSecurityException;
1:272fb2b: import javax.jms.ResourceAllocationException;
1:272fb2b: import javax.jms.TransactionRolledBackException;
1:272fb2b: 
1:272fb2b: import org.apache.qpid.proton.amqp.Symbol;
1:272fb2b: import org.apache.qpid.proton.amqp.messaging.Modified;
1:272fb2b: import org.apache.qpid.proton.amqp.messaging.Rejected;
1:272fb2b: import org.apache.qpid.proton.amqp.transaction.TransactionErrors;
1:272fb2b: import org.apache.qpid.proton.amqp.transport.AmqpError;
1:272fb2b: import org.apache.qpid.proton.amqp.transport.ConnectionError;
1:272fb2b: import org.apache.qpid.proton.amqp.transport.ErrorCondition;
1:272fb2b: 
1:272fb2b: public class AmqpSupport {
1:272fb2b: 
1:272fb2b:     // Symbols used for connection capabilities
1:272fb2b:     public static final Symbol SOLE_CONNECTION_CAPABILITY = Symbol.valueOf("sole-connection-for-container");
1:272fb2b:     public static final Symbol ANONYMOUS_RELAY = Symbol.valueOf("ANONYMOUS-RELAY");
1:4a1c05b:     public static final Symbol DELAYED_DELIVERY = Symbol.valueOf("DELAYED_DELIVERY");
1:272fb2b: 
1:272fb2b:     // Symbols used to announce connection error information
1:272fb2b:     public static final Symbol CONNECTION_OPEN_FAILED = Symbol.valueOf("amqp:connection-establishment-failed");
1:272fb2b:     public static final Symbol INVALID_FIELD = Symbol.valueOf("invalid-field");
1:272fb2b:     public static final Symbol CONTAINER_ID = Symbol.valueOf("container-id");
1:272fb2b: 
1:272fb2b:     // Symbols used to announce connection redirect ErrorCondition 'info'
1:272fb2b:     public static final Symbol PORT = Symbol.valueOf("port");
1:272fb2b:     public static final Symbol NETWORK_HOST = Symbol.valueOf("network-host");
1:272fb2b:     public static final Symbol OPEN_HOSTNAME = Symbol.valueOf("hostname");
1:272fb2b: 
1:272fb2b:     // Symbols used for connection properties
1:272fb2b:     public static final Symbol QUEUE_PREFIX = Symbol.valueOf("queue-prefix");
1:272fb2b:     public static final Symbol TOPIC_PREFIX = Symbol.valueOf("topic-prefix");
1:272fb2b: 
1:272fb2b:     public static final Symbol PRODUCT = Symbol.valueOf("product");
1:272fb2b:     public static final Symbol VERSION = Symbol.valueOf("version");
1:272fb2b:     public static final Symbol PLATFORM = Symbol.valueOf("platform");
1:272fb2b: 
1:272fb2b:     // Symbols used for receivers.
1:272fb2b:     public static final Symbol COPY = Symbol.getSymbol("copy");
1:272fb2b:     public static final Symbol NO_LOCAL_SYMBOL = Symbol.valueOf("no-local");
1:272fb2b:     public static final Symbol SELECTOR_SYMBOL = Symbol.valueOf("jms-selector");
1:272fb2b: 
1:272fb2b:     // Delivery states
1:272fb2b:     public static final Rejected REJECTED = new Rejected();
1:272fb2b:     public static final Modified MODIFIED_FAILED = new Modified();
1:272fb2b:     public static final Modified MODIFIED_FAILED_UNDELIVERABLE = new Modified();
1:272fb2b: 
1:272fb2b:     // Temporary Destination constants
1:272fb2b:     public static final Symbol DYNAMIC_NODE_LIFETIME_POLICY = Symbol.valueOf("lifetime-policy");
1:272fb2b:     public static final String TEMP_QUEUE_CREATOR = "temp-queue-creator:";
1:272fb2b:     public static final String TEMP_TOPIC_CREATOR = "temp-topic-creator:";
1:272fb2b: 
1:272fb2b:     //----- Static initializer -----------------------------------------------//
1:272fb2b: 
1:272fb2b:     static {
1:272fb2b:         MODIFIED_FAILED.setDeliveryFailed(true);
1:272fb2b: 
1:272fb2b:         MODIFIED_FAILED_UNDELIVERABLE.setDeliveryFailed(true);
1:272fb2b:         MODIFIED_FAILED_UNDELIVERABLE.setUndeliverableHere(true);
1:272fb2b:     }
1:272fb2b: 
1:272fb2b:     //----- Utility Methods --------------------------------------------------//
1:272fb2b: 
1:272fb2b:     /**
1:272fb2b:      * Given an ErrorCondition instance create a new Exception that best matches
1:272fb2b:      * the error type.
1:272fb2b:      *
1:272fb2b:      * @param errorCondition
1:272fb2b:      *      The ErrorCondition returned from the remote peer.
1:272fb2b:      *
1:272fb2b:      * @return a new Exception instance that best matches the ErrorCondition value.
1:272fb2b:      */
1:272fb2b:     public static Exception convertToException(ErrorCondition errorCondition) {
1:272fb2b:         Exception remoteError = null;
1:272fb2b: 
1:272fb2b:         if (errorCondition != null && errorCondition.getCondition() != null) {
1:272fb2b:             Symbol error = errorCondition.getCondition();
1:272fb2b:             String message = extractErrorMessage(errorCondition);
1:272fb2b: 
1:272fb2b:             if (error.equals(AmqpError.UNAUTHORIZED_ACCESS)) {
1:272fb2b:                 remoteError = new JMSSecurityException(message);
1:272fb2b:             } else if (error.equals(AmqpError.RESOURCE_LIMIT_EXCEEDED)) {
1:272fb2b:                 remoteError = new ResourceAllocationException(message);
1:272fb2b:             } else if (error.equals(AmqpError.NOT_FOUND)) {
1:272fb2b:                 remoteError = new InvalidDestinationException(message);
1:272fb2b:             } else if (error.equals(TransactionErrors.TRANSACTION_ROLLBACK)) {
1:272fb2b:                 remoteError = new TransactionRolledBackException(message);
1:272fb2b:             } else if (error.equals(ConnectionError.REDIRECT)) {
1:272fb2b:                 remoteError = createRedirectException(error, message, errorCondition);
1:272fb2b:             } else if (error.equals(AmqpError.INVALID_FIELD)) {
1:272fb2b:                 Map<?, ?> info = errorCondition.getInfo();
1:272fb2b:                 if (info != null && CONTAINER_ID.equals(info.get(INVALID_FIELD))) {
1:272fb2b:                     remoteError = new InvalidClientIDException(message);
1:272fb2b:                 } else {
1:272fb2b:                     remoteError = new JMSException(message);
1:272fb2b:                 }
1:272fb2b:             } else {
1:272fb2b:                 remoteError = new JMSException(message);
1:272fb2b:             }
1:272fb2b:         } else {
1:272fb2b:             remoteError = new JMSException("Unknown error from remote peer");
1:272fb2b:         }
1:272fb2b: 
1:272fb2b:         return remoteError;
1:272fb2b:     }
1:272fb2b: 
1:272fb2b:     /**
1:272fb2b:      * Attempt to read and return the embedded error message in the given ErrorCondition
1:272fb2b:      * object.  If no message can be extracted a generic message is returned.
1:272fb2b:      *
1:272fb2b:      * @param errorCondition
1:272fb2b:      *      The ErrorCondition to extract the error message from.
1:272fb2b:      *
1:272fb2b:      * @return an error message extracted from the given ErrorCondition.
1:272fb2b:      */
1:272fb2b:     public static String extractErrorMessage(ErrorCondition errorCondition) {
1:272fb2b:         String message = "Received error from remote peer without description";
1:272fb2b:         if (errorCondition != null) {
1:272fb2b:             if (errorCondition.getDescription() != null && !errorCondition.getDescription().isEmpty()) {
1:272fb2b:                 message = errorCondition.getDescription();
1:272fb2b:             }
1:272fb2b: 
1:272fb2b:             Symbol condition = errorCondition.getCondition();
1:272fb2b:             if (condition != null) {
1:272fb2b:                 message = message + " [condition = " + condition + "]";
1:272fb2b:             }
1:272fb2b:         }
1:272fb2b: 
1:272fb2b:         return message;
1:272fb2b:     }
1:272fb2b: 
1:272fb2b:     /**
1:272fb2b:      * When a redirect type exception is received this method is called to create the
1:272fb2b:      * appropriate redirect exception type containing the error details needed.
1:272fb2b:      *
1:272fb2b:      * @param error
1:272fb2b:      *        the Symbol that defines the redirection error type.
1:272fb2b:      * @param message
1:272fb2b:      *        the basic error message that should used or amended for the returned exception.
1:272fb2b:      * @param condition
1:272fb2b:      *        the ErrorCondition that describes the redirection.
1:272fb2b:      *
1:272fb2b:      * @return an Exception that captures the details of the redirection error.
1:272fb2b:      */
1:272fb2b:     public static Exception createRedirectException(Symbol error, String message, ErrorCondition condition) {
1:272fb2b:         Exception result = null;
1:272fb2b:         Map<?, ?> info = condition.getInfo();
1:272fb2b: 
1:272fb2b:         if (info == null) {
1:272fb2b:             result = new IOException(message + " : Redirection information not set.");
1:272fb2b:         } else {
1:272fb2b:             String hostname = (String) info.get(OPEN_HOSTNAME);
1:272fb2b: 
1:272fb2b:             String networkHost = (String) info.get(NETWORK_HOST);
1:272fb2b:             if (networkHost == null || networkHost.isEmpty()) {
1:272fb2b:                 result = new IOException(message + " : Redirection information not set.");
1:272fb2b:             }
1:272fb2b: 
1:272fb2b:             int port = 0;
1:272fb2b:             try {
1:272fb2b:                 port = Integer.valueOf(info.get(PORT).toString());
1:272fb2b:             } catch (Exception ex) {
1:272fb2b:                 result = new IOException(message + " : Redirection information not set.");
1:272fb2b:             }
1:272fb2b: 
1:272fb2b:             result = new AmqpRedirectedException(message, hostname, networkHost, port);
1:272fb2b:         }
1:272fb2b: 
1:272fb2b:         return result;
1:272fb2b:     }
1:272fb2b: }
============================================================================
author:Timothy Bish
-------------------------------------------------------------------------------
commit:4a1c05b
/////////////////////////////////////////////////////////////////////////
1:     public static final Symbol DELAYED_DELIVERY = Symbol.valueOf("DELAYED_DELIVERY");
commit:272fb2b
/////////////////////////////////////////////////////////////////////////
1: /*
1:  * Licensed to the Apache Software Foundation (ASF) under one or more
1:  * contributor license agreements.  See the NOTICE file distributed with
1:  * this work for additional information regarding copyright ownership.
1:  * The ASF licenses this file to You under the Apache License, Version 2.0
1:  * (the "License"); you may not use this file except in compliance with
1:  * the License.  You may obtain a copy of the License at
1:  *
1:  *      http://www.apache.org/licenses/LICENSE-2.0
1:  *
1:  * Unless required by applicable law or agreed to in writing, software
1:  * distributed under the License is distributed on an "AS IS" BASIS,
1:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:  * See the License for the specific language governing permissions and
1:  * limitations under the License.
1:  */
1: package org.apache.activemq.transport.amqp.client;
1: 
1: import java.io.IOException;
1: import java.util.Map;
1: 
1: import javax.jms.InvalidClientIDException;
1: import javax.jms.InvalidDestinationException;
1: import javax.jms.JMSException;
1: import javax.jms.JMSSecurityException;
1: import javax.jms.ResourceAllocationException;
1: import javax.jms.TransactionRolledBackException;
1: 
1: import org.apache.qpid.proton.amqp.Symbol;
1: import org.apache.qpid.proton.amqp.messaging.Modified;
1: import org.apache.qpid.proton.amqp.messaging.Rejected;
1: import org.apache.qpid.proton.amqp.transaction.TransactionErrors;
1: import org.apache.qpid.proton.amqp.transport.AmqpError;
1: import org.apache.qpid.proton.amqp.transport.ConnectionError;
1: import org.apache.qpid.proton.amqp.transport.ErrorCondition;
1: 
1: public class AmqpSupport {
1: 
1:     // Symbols used for connection capabilities
1:     public static final Symbol SOLE_CONNECTION_CAPABILITY = Symbol.valueOf("sole-connection-for-container");
1:     public static final Symbol ANONYMOUS_RELAY = Symbol.valueOf("ANONYMOUS-RELAY");
1: 
1:     // Symbols used to announce connection error information
1:     public static final Symbol CONNECTION_OPEN_FAILED = Symbol.valueOf("amqp:connection-establishment-failed");
1:     public static final Symbol INVALID_FIELD = Symbol.valueOf("invalid-field");
1:     public static final Symbol CONTAINER_ID = Symbol.valueOf("container-id");
1: 
1:     // Symbols used to announce connection redirect ErrorCondition 'info'
1:     public static final Symbol PORT = Symbol.valueOf("port");
1:     public static final Symbol NETWORK_HOST = Symbol.valueOf("network-host");
1:     public static final Symbol OPEN_HOSTNAME = Symbol.valueOf("hostname");
1: 
1:     // Symbols used for connection properties
1:     public static final Symbol QUEUE_PREFIX = Symbol.valueOf("queue-prefix");
1:     public static final Symbol TOPIC_PREFIX = Symbol.valueOf("topic-prefix");
1: 
1:     public static final Symbol PRODUCT = Symbol.valueOf("product");
1:     public static final Symbol VERSION = Symbol.valueOf("version");
1:     public static final Symbol PLATFORM = Symbol.valueOf("platform");
1: 
1:     // Symbols used for receivers.
1:     public static final Symbol COPY = Symbol.getSymbol("copy");
1:     public static final Symbol NO_LOCAL_SYMBOL = Symbol.valueOf("no-local");
1:     public static final Symbol SELECTOR_SYMBOL = Symbol.valueOf("jms-selector");
1: 
1:     // Delivery states
1:     public static final Rejected REJECTED = new Rejected();
1:     public static final Modified MODIFIED_FAILED = new Modified();
1:     public static final Modified MODIFIED_FAILED_UNDELIVERABLE = new Modified();
1: 
1:     // Temporary Destination constants
1:     public static final Symbol DYNAMIC_NODE_LIFETIME_POLICY = Symbol.valueOf("lifetime-policy");
1:     public static final String TEMP_QUEUE_CREATOR = "temp-queue-creator:";
1:     public static final String TEMP_TOPIC_CREATOR = "temp-topic-creator:";
1: 
1:     //----- Static initializer -----------------------------------------------//
1: 
1:     static {
1:         MODIFIED_FAILED.setDeliveryFailed(true);
1: 
1:         MODIFIED_FAILED_UNDELIVERABLE.setDeliveryFailed(true);
1:         MODIFIED_FAILED_UNDELIVERABLE.setUndeliverableHere(true);
1:     }
1: 
1:     //----- Utility Methods --------------------------------------------------//
1: 
1:     /**
1:      * Given an ErrorCondition instance create a new Exception that best matches
1:      * the error type.
1:      *
1:      * @param errorCondition
1:      *      The ErrorCondition returned from the remote peer.
1:      *
1:      * @return a new Exception instance that best matches the ErrorCondition value.
1:      */
1:     public static Exception convertToException(ErrorCondition errorCondition) {
1:         Exception remoteError = null;
1: 
1:         if (errorCondition != null && errorCondition.getCondition() != null) {
1:             Symbol error = errorCondition.getCondition();
1:             String message = extractErrorMessage(errorCondition);
1: 
1:             if (error.equals(AmqpError.UNAUTHORIZED_ACCESS)) {
1:                 remoteError = new JMSSecurityException(message);
1:             } else if (error.equals(AmqpError.RESOURCE_LIMIT_EXCEEDED)) {
1:                 remoteError = new ResourceAllocationException(message);
1:             } else if (error.equals(AmqpError.NOT_FOUND)) {
1:                 remoteError = new InvalidDestinationException(message);
1:             } else if (error.equals(TransactionErrors.TRANSACTION_ROLLBACK)) {
1:                 remoteError = new TransactionRolledBackException(message);
1:             } else if (error.equals(ConnectionError.REDIRECT)) {
1:                 remoteError = createRedirectException(error, message, errorCondition);
1:             } else if (error.equals(AmqpError.INVALID_FIELD)) {
1:                 Map<?, ?> info = errorCondition.getInfo();
1:                 if (info != null && CONTAINER_ID.equals(info.get(INVALID_FIELD))) {
1:                     remoteError = new InvalidClientIDException(message);
1:                 } else {
1:                     remoteError = new JMSException(message);
1:                 }
1:             } else {
1:                 remoteError = new JMSException(message);
1:             }
1:         } else {
1:             remoteError = new JMSException("Unknown error from remote peer");
1:         }
1: 
1:         return remoteError;
1:     }
1: 
1:     /**
1:      * Attempt to read and return the embedded error message in the given ErrorCondition
1:      * object.  If no message can be extracted a generic message is returned.
1:      *
1:      * @param errorCondition
1:      *      The ErrorCondition to extract the error message from.
1:      *
1:      * @return an error message extracted from the given ErrorCondition.
1:      */
1:     public static String extractErrorMessage(ErrorCondition errorCondition) {
1:         String message = "Received error from remote peer without description";
1:         if (errorCondition != null) {
1:             if (errorCondition.getDescription() != null && !errorCondition.getDescription().isEmpty()) {
1:                 message = errorCondition.getDescription();
1:             }
1: 
1:             Symbol condition = errorCondition.getCondition();
1:             if (condition != null) {
1:                 message = message + " [condition = " + condition + "]";
1:             }
1:         }
1: 
1:         return message;
1:     }
1: 
1:     /**
1:      * When a redirect type exception is received this method is called to create the
1:      * appropriate redirect exception type containing the error details needed.
1:      *
1:      * @param error
1:      *        the Symbol that defines the redirection error type.
1:      * @param message
1:      *        the basic error message that should used or amended for the returned exception.
1:      * @param condition
1:      *        the ErrorCondition that describes the redirection.
1:      *
1:      * @return an Exception that captures the details of the redirection error.
1:      */
1:     public static Exception createRedirectException(Symbol error, String message, ErrorCondition condition) {
1:         Exception result = null;
1:         Map<?, ?> info = condition.getInfo();
1: 
1:         if (info == null) {
1:             result = new IOException(message + " : Redirection information not set.");
1:         } else {
1:             String hostname = (String) info.get(OPEN_HOSTNAME);
1: 
1:             String networkHost = (String) info.get(NETWORK_HOST);
1:             if (networkHost == null || networkHost.isEmpty()) {
1:                 result = new IOException(message + " : Redirection information not set.");
1:             }
1: 
1:             int port = 0;
1:             try {
1:                 port = Integer.valueOf(info.get(PORT).toString());
1:             } catch (Exception ex) {
1:                 result = new IOException(message + " : Redirection information not set.");
1:             }
1: 
1:             result = new AmqpRedirectedException(message, hostname, networkHost, port);
1:         }
1: 
1:         return result;
1:     }
1: }
============================================================================