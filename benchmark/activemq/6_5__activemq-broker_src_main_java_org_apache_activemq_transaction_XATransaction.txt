1:d29ca2a: /**
1:57b4941:  * Licensed to the Apache Software Foundation (ASF) under one or more
1:57b4941:  * contributor license agreements.  See the NOTICE file distributed with
1:57b4941:  * this work for additional information regarding copyright ownership.
1:57b4941:  * The ASF licenses this file to You under the Apache License, Version 2.0
1:57b4941:  * (the "License"); you may not use this file except in compliance with
1:57b4941:  * the License.  You may obtain a copy of the License at
3:d29ca2a:  *
1:230a86c:  *      http://www.apache.org/licenses/LICENSE-2.0
1:d29ca2a:  *
1:d29ca2a:  * Unless required by applicable law or agreed to in writing, software
1:d29ca2a:  * distributed under the License is distributed on an "AS IS" BASIS,
1:d29ca2a:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:d29ca2a:  * See the License for the specific language governing permissions and
1:d29ca2a:  * limitations under the License.
1:d29ca2a:  */
1:d29ca2a: package org.apache.activemq.transaction;
8:d29ca2a: 
1:d29ca2a: import java.io.IOException;
1:d29ca2a: import javax.transaction.xa.XAException;
1:d29ca2a: import javax.transaction.xa.XAResource;
1:ab1e9c7: import org.apache.activemq.TransactionContext;
1:d29ca2a: import org.apache.activemq.broker.TransactionBroker;
1:8e83b7f: import org.apache.activemq.command.ConnectionId;
1:d29ca2a: import org.apache.activemq.command.TransactionId;
1:d29ca2a: import org.apache.activemq.command.XATransactionId;
1:d29ca2a: import org.apache.activemq.store.TransactionStore;
1:8bf987b: import org.slf4j.Logger;
1:8bf987b: import org.slf4j.LoggerFactory;
1:d29ca2a: 
1:d29ca2a: /**
1:b0c2a40:  * 
1:d29ca2a:  */
1:d29ca2a: public class XATransaction extends Transaction {
1:f812e34: 
1:8bf987b:     private static final Logger LOG = LoggerFactory.getLogger(XATransaction.class);
1:f812e34: 
1:d29ca2a:     private final TransactionStore transactionStore;
1:d29ca2a:     private final XATransactionId xid;
1:d29ca2a:     private final TransactionBroker broker;
1:8e83b7f:     private final ConnectionId connectionId;
1:d29ca2a: 
1:8e83b7f:     public XATransaction(TransactionStore transactionStore, XATransactionId xid, TransactionBroker broker, ConnectionId connectionId) {
1:d29ca2a:         this.transactionStore = transactionStore;
1:d29ca2a:         this.xid = xid;
1:d29ca2a:         this.broker = broker;
1:8e83b7f:         this.connectionId = connectionId;
1:5221cd3:         if (LOG.isDebugEnabled()) {
1:5221cd3:             LOG.debug("XA Transaction new/begin : " + xid);
1:5221cd3:         }
6:d29ca2a:     }
1:d29ca2a: 
1:27262c8:     @Override
1:d29ca2a:     public void commit(boolean onePhase) throws XAException, IOException {
1:fc00993:         if (LOG.isDebugEnabled()) {
1:101e711:             LOG.debug("XA Transaction commit onePhase:" + onePhase + ", xid: " + xid);
1:fc00993:         }
1:d29ca2a: 
1:d29ca2a:         switch (getState()) {
1:f812e34:         case START_STATE:
1:f812e34:             // 1 phase commit, no work done.
1:f812e34:             checkForPreparedState(onePhase);
1:f812e34:             setStateFinished();
1:f812e34:             break;
1:f812e34:         case IN_USE_STATE:
1:f812e34:             // 1 phase commit, work done.
1:f812e34:             checkForPreparedState(onePhase);
1:f812e34:             doPrePrepare();
1:f812e34:             setStateFinished();
1:e5896c0:             storeCommit(getTransactionId(), false, preCommitTask, postCommitTask);
1:f812e34:             break;
1:f812e34:         case PREPARED_STATE:
1:f812e34:             // 2 phase commit, work done.
1:f812e34:             // We would record commit here.
1:e5896c0:             storeCommit(getTransactionId(), true, preCommitTask, postCommitTask);
1:ea70e82:             setStateFinished();
1:f812e34:             break;
1:f812e34:         default:
1:f812e34:             illegalStateTransition("commit");
1:d29ca2a:         }
1:d29ca2a:     }
1:d29ca2a: 
1:e5896c0:     private void storeCommit(TransactionId txid, boolean wasPrepared, Runnable preCommit,Runnable postCommit)
1:e5896c0:             throws XAException, IOException {
1:e5896c0:         try {
1:e5896c0:             transactionStore.commit(getTransactionId(), wasPrepared, preCommitTask, postCommitTask);
1:e5896c0:             waitPostCommitDone(postCommitTask);
1:e5896c0:         } catch (XAException xae) {
1:e5896c0:             throw xae;
1:e5896c0:         } catch (Throwable t) {
1:ea70e82:             LOG.warn("Store COMMIT FAILED: " + txid, t);
1:ea70e82:             XAException xae = null;
1:ea70e82:             if (wasPrepared) {
1:ea70e82:                 // report and await outcome
1:ea70e82:                 xae = newXAException("STORE COMMIT FAILED: " + t.getMessage(), XAException.XA_RETRY);
1:ea70e82:                 // fire rollback syncs to revert
1:ea70e82:                 doPostRollback();
1:ea70e82:             } else {
1:ea70e82:                 try {
1:ea70e82:                     rollback();
1:ea70e82:                     xae = newXAException("STORE COMMIT FAILED: Transaction rolled back", XAException.XA_RBCOMMFAIL);
1:ea70e82:                 } catch (Throwable e) {
1:ea70e82:                     xae = newXAException("STORE COMMIT FAILED: " + t.getMessage() +". Rolled failed:"  + e.getMessage(), XAException.XA_RBINTEGRITY);
1:ea70e82:                 }
1:ea70e82:             }
1:e5896c0:             xae.initCause(t);
1:e5896c0:             throw xae;
1:e5896c0:         }
1:e5896c0:     }
1:e5896c0: 
1:d29ca2a:     private void illegalStateTransition(String callName) throws XAException {
1:ab1e9c7:         XAException xae = newXAException("Cannot call " + callName + " now.", XAException.XAER_PROTO);
2:d29ca2a:         throw xae;
1:d29ca2a:     }
1:d29ca2a: 
1:d29ca2a:     private void checkForPreparedState(boolean onePhase) throws XAException {
1:d29ca2a:         if (!onePhase) {
1:ab1e9c7:             XAException xae = newXAException("Cannot do 2 phase commit if the transaction has not been prepared", XAException.XAER_PROTO);
1:d29ca2a:             throw xae;
1:d29ca2a:         }
1:d29ca2a:     }
1:d29ca2a: 
1:d29ca2a:     private void doPrePrepare() throws XAException, IOException {
2:d29ca2a:         try {
1:d29ca2a:             prePrepare();
1:d29ca2a:         } catch (XAException e) {
1:d29ca2a:             throw e;
1:f812e34:         } catch (Throwable e) {
1:fc00993:             LOG.warn("PRE-PREPARE FAILED: ", e);
1:e5896c0:             rollback();
1:ab1e9c7:             XAException xae = newXAException("PRE-PREPARE FAILED: Transaction rolled back", XAException.XA_RBOTHER);
2:d29ca2a:             xae.initCause(e);
1:d29ca2a:             throw xae;
1:d29ca2a:         }
1:d29ca2a:     }
1:d29ca2a: 
1:27262c8:     @Override
1:d29ca2a:     public void rollback() throws XAException, IOException {
1:f812e34: 
1:fc00993:         if (LOG.isDebugEnabled()) {
1:fc00993:             LOG.debug("XA Transaction rollback: " + xid);
1:fc00993:         }
1:d29ca2a: 
1:d29ca2a:         switch (getState()) {
1:f812e34:         case START_STATE:
1:f812e34:             // 1 phase rollback no work done.
1:f812e34:             setStateFinished();
1:f812e34:             break;
1:f812e34:         case IN_USE_STATE:
1:f812e34:             // 1 phase rollback work done.
1:f812e34:             setStateFinished();
1:f812e34:             transactionStore.rollback(getTransactionId());
1:f812e34:             doPostRollback();
1:f812e34:             break;
1:f812e34:         case PREPARED_STATE:
1:f812e34:             // 2 phase rollback work done.
1:f812e34:             setStateFinished();
1:f812e34:             transactionStore.rollback(getTransactionId());
1:f812e34:             doPostRollback();
1:f812e34:             break;
1:e5896c0:         case FINISHED_STATE:
1:e5896c0:             // failure to commit
1:e5896c0:             transactionStore.rollback(getTransactionId());
1:e5896c0:             doPostRollback();
1:e5896c0:             break;
1:74a7a8b:         default:
1:ab1e9c7:             throw newXAException("Invalid state: " + getState(), XAException.XA_RBPROTO);
1:d29ca2a:         }
1:d29ca2a: 
1:d29ca2a:     }
1:d29ca2a: 
1:d29ca2a:     private void doPostRollback() throws XAException {
1:d29ca2a:         try {
1:d29ca2a:             fireAfterRollback();
1:f812e34:         } catch (Throwable e) {
1:f812e34:             // I guess this could happen. Post commit task failed
2:d29ca2a:             // to execute properly.
1:fc00993:             LOG.warn("POST ROLLBACK FAILED: ", e);
1:ab1e9c7:             XAException xae = newXAException("POST ROLLBACK FAILED", XAException.XAER_RMERR);
1:d29ca2a:             xae.initCause(e);
1:d29ca2a:             throw xae;
1:ab1e9c7:         }
1:d29ca2a:     }
1:ab1e9c7: 
1:27262c8:     @Override
1:d29ca2a:     public int prepare() throws XAException, IOException {
1:fc00993:         if (LOG.isDebugEnabled()) {
1:fc00993:             LOG.debug("XA Transaction prepare: " + xid);
1:fc00993:         }
1:f812e34: 
1:d29ca2a:         switch (getState()) {
1:f812e34:         case START_STATE:
1:f812e34:             // No work done.. no commit/rollback needed.
1:f812e34:             setStateFinished();
1:f812e34:             return XAResource.XA_RDONLY;
1:f812e34:         case IN_USE_STATE:
1:f812e34:             // We would record prepare here.
1:f812e34:             doPrePrepare();
1:f812e34:             setState(Transaction.PREPARED_STATE);
1:f812e34:             transactionStore.prepare(getTransactionId());
1:f812e34:             return XAResource.XA_OK;
1:f812e34:         default:
1:f812e34:             illegalStateTransition("prepare");
1:f812e34:             return XAResource.XA_RDONLY;
1:d29ca2a:         }
1:d29ca2a:     }
1:d29ca2a: 
1:d29ca2a:     private void setStateFinished() {
1:d29ca2a:         setState(Transaction.FINISHED_STATE);
1:d29ca2a:         broker.removeTransaction(xid);
1:d29ca2a:     }
1:d29ca2a: 
1:8e83b7f:     public ConnectionId getConnectionId() {
1:8e83b7f:         return connectionId;
1:d29ca2a:     }
1:d29ca2a: 
1:27262c8:     @Override
1:d29ca2a:     public TransactionId getTransactionId() {
1:d29ca2a:         return xid;
1:86cbdfd:     }
1:e1389a6:     
1:e1389a6:     @Override
1:8bf987b:     public Logger getLog() {
1:e1389a6:         return LOG;
1:e1389a6:     }
1:1d242a2: 
1:1d242a2:     public XATransactionId getXid() {
1:1d242a2:         return xid;
1:1d242a2:     }
1:d29ca2a: }
============================================================================
author:gtully
-------------------------------------------------------------------------------
commit:ea70e82
/////////////////////////////////////////////////////////////////////////
1:             setStateFinished();
/////////////////////////////////////////////////////////////////////////
1:             LOG.warn("Store COMMIT FAILED: " + txid, t);
1:             XAException xae = null;
1:             if (wasPrepared) {
1:                 // report and await outcome
1:                 xae = newXAException("STORE COMMIT FAILED: " + t.getMessage(), XAException.XA_RETRY);
1:                 // fire rollback syncs to revert
1:                 doPostRollback();
1:             } else {
1:                 try {
1:                     rollback();
1:                     xae = newXAException("STORE COMMIT FAILED: Transaction rolled back", XAException.XA_RBCOMMFAIL);
1:                 } catch (Throwable e) {
1:                     xae = newXAException("STORE COMMIT FAILED: " + t.getMessage() +". Rolled failed:"  + e.getMessage(), XAException.XA_RBINTEGRITY);
1:                 }
1:             }
commit:fe9d99e
/////////////////////////////////////////////////////////////////////////
commit:ab1e9c7
/////////////////////////////////////////////////////////////////////////
1: import org.apache.activemq.TransactionContext;
/////////////////////////////////////////////////////////////////////////
0:             XAException xae = newXAException("STORE COMMIT FAILED: Transaction rolled back", XAException.XA_RBOTHER);
1:         XAException xae = newXAException("Cannot call " + callName + " now.", XAException.XAER_PROTO);
1:             XAException xae = newXAException("Cannot do 2 phase commit if the transaction has not been prepared", XAException.XAER_PROTO);
/////////////////////////////////////////////////////////////////////////
1:             XAException xae = newXAException("PRE-PREPARE FAILED: Transaction rolled back", XAException.XA_RBOTHER);
/////////////////////////////////////////////////////////////////////////
1:             throw newXAException("Invalid state: " + getState(), XAException.XA_RBPROTO);
/////////////////////////////////////////////////////////////////////////
1:             XAException xae = newXAException("POST ROLLBACK FAILED", XAException.XAER_RMERR);
0:     public static XAException newXAException(String s, int errorCode) {
0:         XAException xaException = new XAException(s + " " + TransactionContext.xaErrorCodeMarker + errorCode);
0:         xaException.errorCode = errorCode;
0:         return xaException;
1:     }
1: 
author:Hadrian Zbarcea
-------------------------------------------------------------------------------
commit:d54d046
author:Gary Tully
-------------------------------------------------------------------------------
commit:13bbe52
/////////////////////////////////////////////////////////////////////////
0:             XAException xae = new XAException("STORE COMMIT FAILED: Transaction rolled back");
/////////////////////////////////////////////////////////////////////////
0:             XAException xae = new XAException("Cannot do 2 phase commit if the transaction has not been prepared");
/////////////////////////////////////////////////////////////////////////
0:             XAException xae = new XAException("PRE-PREPARE FAILED: Transaction rolled back");
commit:1d242a2
/////////////////////////////////////////////////////////////////////////
1: 
1:     public XATransactionId getXid() {
1:         return xid;
1:     }
commit:101e711
/////////////////////////////////////////////////////////////////////////
1:             LOG.debug("XA Transaction commit onePhase:" + onePhase + ", xid: " + xid);
commit:e5896c0
/////////////////////////////////////////////////////////////////////////
1:             storeCommit(getTransactionId(), false, preCommitTask, postCommitTask);
1:             storeCommit(getTransactionId(), true, preCommitTask, postCommitTask);
1:     private void storeCommit(TransactionId txid, boolean wasPrepared, Runnable preCommit,Runnable postCommit)
1:             throws XAException, IOException {
1:         try {
1:             transactionStore.commit(getTransactionId(), wasPrepared, preCommitTask, postCommitTask);
1:             waitPostCommitDone(postCommitTask);
1:         } catch (XAException xae) {
1:             throw xae;
1:         } catch (Throwable t) {
0:             LOG.warn("Store COMMIT FAILED: ", t);
1:             rollback();
0:             XAException xae = new XAException("STORE COMMIT FAILED: Transaction rolled back.");
0:             xae.errorCode = XAException.XA_RBOTHER;
1:             xae.initCause(t);
1:             throw xae;
1:         }
1:     }
1: 
/////////////////////////////////////////////////////////////////////////
1:         case FINISHED_STATE:
1:             // failure to commit
1:             transactionStore.rollback(getTransactionId());
1:             doPostRollback();
1:             break;
commit:e1389a6
/////////////////////////////////////////////////////////////////////////
0:             transactionStore.commit(getTransactionId(), false, postCommitTask);
0:             waitPostCommitDone(postCommitTask);
0:             transactionStore.commit(getTransactionId(), true, postCommitTask);
0:             waitPostCommitDone(postCommitTask);
/////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////
1:     
1:     @Override
0:     public Log getLog() {
1:         return LOG;
1:     }
commit:5221cd3
/////////////////////////////////////////////////////////////////////////
1:         if (LOG.isDebugEnabled()) {
1:             LOG.debug("XA Transaction new/begin : " + xid);
1:         }
author:Hiram R. Chirino
-------------------------------------------------------------------------------
commit:58aca86
commit:b0c2a40
/////////////////////////////////////////////////////////////////////////
1:  * 
commit:fc00993
/////////////////////////////////////////////////////////////////////////
0:     private static final Log LOG = LogFactory.getLog(XATransaction.class);
/////////////////////////////////////////////////////////////////////////
1:         if (LOG.isDebugEnabled()) {
0:             LOG.debug("XA Transaction commit: " + xid);
1:         }
/////////////////////////////////////////////////////////////////////////
1:             LOG.warn("PRE-PREPARE FAILED: ", e);
/////////////////////////////////////////////////////////////////////////
0:             LOG.warn("POST COMMIT FAILED: ", e);
/////////////////////////////////////////////////////////////////////////
1:         if (LOG.isDebugEnabled()) {
1:             LOG.debug("XA Transaction rollback: " + xid);
1:         }
/////////////////////////////////////////////////////////////////////////
1:             LOG.warn("POST ROLLBACK FAILED: ", e);
/////////////////////////////////////////////////////////////////////////
1:         if (LOG.isDebugEnabled()) {
1:             LOG.debug("XA Transaction prepare: " + xid);
1:         }
commit:74a7a8b
/////////////////////////////////////////////////////////////////////////
1:         default:
0:             throw new XAException("Invalid state");
commit:f812e34
/////////////////////////////////////////////////////////////////////////
1: 
1: 
/////////////////////////////////////////////////////////////////////////
0:         if (log.isDebugEnabled())
0:             log.debug("XA Transaction commit: " + xid);
1:         case START_STATE:
1:             // 1 phase commit, no work done.
1:             checkForPreparedState(onePhase);
1:             setStateFinished();
1:             break;
1:         case IN_USE_STATE:
1:             // 1 phase commit, work done.
1:             checkForPreparedState(onePhase);
1:             doPrePrepare();
1:             setStateFinished();
0:             transactionStore.commit(getTransactionId(), false);
0:             doPostCommit();
1:             break;
1:         case PREPARED_STATE:
1:             // 2 phase commit, work done.
1:             // We would record commit here.
1:             setStateFinished();
0:             transactionStore.commit(getTransactionId(), true);
0:             doPostCommit();
1:             break;
1:         default:
1:             illegalStateTransition("commit");
/////////////////////////////////////////////////////////////////////////
1:         } catch (Throwable e) {
1:             // I guess this could happen. Post commit task failed
/////////////////////////////////////////////////////////////////////////
1: 
0:         if (log.isDebugEnabled())
0:             log.debug("XA Transaction rollback: " + xid);
1:         case START_STATE:
1:             // 1 phase rollback no work done.
1:             setStateFinished();
1:             break;
1:         case IN_USE_STATE:
1:             // 1 phase rollback work done.
1:             setStateFinished();
1:             transactionStore.rollback(getTransactionId());
1:             doPostRollback();
1:             break;
1:         case PREPARED_STATE:
1:             // 2 phase rollback work done.
1:             setStateFinished();
1:             transactionStore.rollback(getTransactionId());
1:             doPostRollback();
1:             break;
/////////////////////////////////////////////////////////////////////////
1:         } catch (Throwable e) {
0:             // I guess this could happen. Post commit task failed
/////////////////////////////////////////////////////////////////////////
0:         if (log.isDebugEnabled())
0:             log.debug("XA Transaction prepare: " + xid);
1: 
1:         case START_STATE:
1:             // No work done.. no commit/rollback needed.
0:             setStateFinished();
1:             return XAResource.XA_RDONLY;
1:         case IN_USE_STATE:
1:             // We would record prepare here.
1:             doPrePrepare();
1:             setState(Transaction.PREPARED_STATE);
1:             transactionStore.prepare(getTransactionId());
1:             return XAResource.XA_OK;
1:         default:
1:             illegalStateTransition("prepare");
1:             return XAResource.XA_RDONLY;
commit:230a86c
/////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////
1:  *      http://www.apache.org/licenses/LICENSE-2.0
commit:86cbdfd
/////////////////////////////////////////////////////////////////////////
1: }
commit:57b4941
/////////////////////////////////////////////////////////////////////////
1:  * Licensed to the Apache Software Foundation (ASF) under one or more
1:  * contributor license agreements.  See the NOTICE file distributed with
1:  * this work for additional information regarding copyright ownership.
1:  * The ASF licenses this file to You under the Apache License, Version 2.0
1:  * (the "License"); you may not use this file except in compliance with
1:  * the License.  You may obtain a copy of the License at
commit:48b4869
/////////////////////////////////////////////////////////////////////////
0:  * Copyright 2005-2006 The Apache Software Foundation
commit:d29ca2a
/////////////////////////////////////////////////////////////////////////
1: /**
1:  *
0:  * Copyright 2004 The Apache Software Foundation
1:  *
0:  * Licensed under the Apache License, Version 2.0 (the "License");
0:  * you may not use this file except in compliance with the License.
0:  * You may obtain a copy of the License at
1:  *
0:  * http://www.apache.org/licenses/LICENSE-2.0
1:  *
1:  * Unless required by applicable law or agreed to in writing, software
1:  * distributed under the License is distributed on an "AS IS" BASIS,
1:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:  * See the License for the specific language governing permissions and
1:  * limitations under the License.
1:  */
1: package org.apache.activemq.transaction;
1: 
1: import java.io.IOException;
1: 
1: import javax.transaction.xa.XAException;
1: import javax.transaction.xa.XAResource;
1: 
1: import org.apache.activemq.broker.TransactionBroker;
1: import org.apache.activemq.command.TransactionId;
1: import org.apache.activemq.command.XATransactionId;
1: import org.apache.activemq.store.TransactionStore;
0: import org.apache.commons.logging.Log;
0: import org.apache.commons.logging.LogFactory;
1: 
1: /**
0:  * @version $Revision: 1.4 $
1:  */
1: public class XATransaction extends Transaction {
1:     
0:     private static final Log log = LogFactory.getLog(XATransaction.class);
1:     
1:     private final TransactionStore transactionStore;
1:     private final XATransactionId xid;
1:     private final TransactionBroker broker;
1: 
0:     public XATransaction(TransactionStore transactionStore, XATransactionId xid, TransactionBroker broker) {
1:         this.transactionStore = transactionStore;
1:         this.xid = xid;
1:         this.broker = broker;
1:     }
1: 
1:     public void commit(boolean onePhase) throws XAException, IOException {
0:     	if(log.isDebugEnabled())
0:     		log.debug("XA Transaction commit: "+xid);
1: 
1:         switch (getState()) {
0:             case START_STATE:
0:                 // 1 phase commit, no work done.
0:                 checkForPreparedState(onePhase);
0:                 setStateFinished();
0:                 break;
0:             case IN_USE_STATE:
0:                 // 1 phase commit, work done.
0:                 checkForPreparedState(onePhase);
0:                 doPrePrepare();
0:                 setStateFinished();
0:                 transactionStore.commit(getTransactionId(), false);
0:                 doPostCommit();
0:                 break;
0:             case PREPARED_STATE:
0:                 // 2 phase commit, work done.
0:                 // We would record commit here.
0:                 setStateFinished();
0:                 transactionStore.commit(getTransactionId(), true);
0:                 doPostCommit();
0:                 break;
0:             default:
0:                 illegalStateTransition("commit");
1:         }
1:     }
1: 
1:     private void illegalStateTransition(String callName) throws XAException {
0:         XAException xae = new XAException("Cannot call " + callName + " now.");
0:         xae.errorCode = XAException.XAER_PROTO;
1:         throw xae;
1:     }
1: 
1:     private void checkForPreparedState(boolean onePhase) throws XAException {
1:         if (!onePhase) {
0:             XAException xae = new XAException("Cannot do 2 phase commit if the transaction has not been prepared.");
0:             xae.errorCode = XAException.XAER_PROTO;
1:             throw xae;
1:         }
1:     }
1: 
1:     private void doPrePrepare() throws XAException, IOException {
1:         try {
1:             prePrepare();
1:         } catch (XAException e) {
1:             throw e;
0:         } catch (Throwable e) {
0:             log.warn("PRE-PREPARE FAILED: ", e);
0:             rollback();
0:             XAException xae = new XAException("PRE-PREPARE FAILED: Transaction rolled back.");
0:             xae.errorCode = XAException.XA_RBOTHER;
1:             xae.initCause(e);
1:             throw xae;
1:         }
1:     }
1: 
0:     private void doPostCommit() throws XAException {
1:         try {
0:             fireAfterCommit();
1:         }
0:         catch (Throwable e) {
0:             // I guess this could happen.  Post commit task failed
1:             // to execute properly.
0:             log.warn("POST COMMIT FAILED: ", e);
0:             XAException xae = new XAException("POST COMMIT FAILED");
0:             xae.errorCode = XAException.XAER_RMERR;
1:             xae.initCause(e);
1:             throw xae;
1:         }
1:     }
1: 
1:     public void rollback() throws XAException, IOException {
1:     	
0:     	if(log.isDebugEnabled())
0:     		log.debug("XA Transaction rollback: "+xid);
1: 
1:         switch (getState()) {
0:             case START_STATE:
0:                 // 1 phase rollback no work done.
0:                 setStateFinished();
0:                 break;
0:             case IN_USE_STATE:
0:                 // 1 phase rollback work done.
0:                 setStateFinished();
0:                 transactionStore.rollback(getTransactionId());
0:                 doPostRollback();
0:                 break;
0:             case PREPARED_STATE:
0:                 // 2 phase rollback work done.
0:                 setStateFinished();
0:                 transactionStore.rollback(getTransactionId());
0:                 doPostRollback();
0:                 break;
1:         }
1: 
1:     }
1: 
1:     private void doPostRollback() throws XAException {
1:         try {
1:             fireAfterRollback();
1:         }
0:         catch (Throwable e) {
0:             // I guess this could happen.  Post commit task failed
1:             // to execute properly.
0:             log.warn("POST ROLLBACK FAILED: ", e);
0:             XAException xae = new XAException("POST ROLLBACK FAILED");
0:             xae.errorCode = XAException.XAER_RMERR;
1:             xae.initCause(e);
1:             throw xae;
1:         }
1:     }
1: 
1:     public int prepare() throws XAException, IOException {
0:     	if(log.isDebugEnabled())
0:     		log.debug("XA Transaction prepare: "+xid);
1:     	
1:         switch (getState()) {
0:             case START_STATE:
0:                 // No work done.. no commit/rollback needed.
0:                 setStateFinished();
0:                 return XAResource.XA_RDONLY;
0:             case IN_USE_STATE:
0:                 // We would record prepare here.
0:                 doPrePrepare();
0:                 setState(Transaction.PREPARED_STATE);
0:                 transactionStore.prepare(getTransactionId());
0:                 return XAResource.XA_OK;
0:             default :
0:                 illegalStateTransition("prepare");
0:                 return XAResource.XA_RDONLY;
1:         }
1:     }
1: 
1:     private void setStateFinished() {
1:         setState(Transaction.FINISHED_STATE);
1:         broker.removeTransaction(xid);
1:     }
1: 
1:     public TransactionId getTransactionId() {
1:         return xid;
1:     }
1: }
author:Bosanac Dejan
-------------------------------------------------------------------------------
commit:8bf987b
/////////////////////////////////////////////////////////////////////////
1: import org.slf4j.Logger;
1: import org.slf4j.LoggerFactory;
1:     private static final Logger LOG = LoggerFactory.getLogger(XATransaction.class);
/////////////////////////////////////////////////////////////////////////
1:     public Logger getLog() {
commit:8e83b7f
/////////////////////////////////////////////////////////////////////////
1: import org.apache.activemq.command.ConnectionId;
/////////////////////////////////////////////////////////////////////////
1:     private final ConnectionId connectionId;
1:     public XATransaction(TransactionStore transactionStore, XATransactionId xid, TransactionBroker broker, ConnectionId connectionId) {
1:         this.connectionId = connectionId;
/////////////////////////////////////////////////////////////////////////
1:     public ConnectionId getConnectionId() {
1:         return connectionId;
0:     }
0: 
author:Robert Davies
-------------------------------------------------------------------------------
commit:27262c8
/////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////
1:     @Override
/////////////////////////////////////////////////////////////////////////
0:             transactionStore.commit(getTransactionId(), false, preCommitTask,postCommitTask);
0:             transactionStore.commit(getTransactionId(), true, preCommitTask,postCommitTask);
/////////////////////////////////////////////////////////////////////////
1:     @Override
/////////////////////////////////////////////////////////////////////////
1:     @Override
/////////////////////////////////////////////////////////////////////////
1:     @Override
============================================================================