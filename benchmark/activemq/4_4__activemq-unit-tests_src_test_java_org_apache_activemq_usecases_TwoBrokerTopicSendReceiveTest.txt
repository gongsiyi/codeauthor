1:a677c21: /**
1:57b4941:  * Licensed to the Apache Software Foundation (ASF) under one or more
1:57b4941:  * contributor license agreements.  See the NOTICE file distributed with
1:57b4941:  * this work for additional information regarding copyright ownership.
1:57b4941:  * The ASF licenses this file to You under the Apache License, Version 2.0
1:57b4941:  * (the "License"); you may not use this file except in compliance with
1:57b4941:  * the License.  You may obtain a copy of the License at
1:b0c2a40:  *
1:230a86c:  *      http://www.apache.org/licenses/LICENSE-2.0
4:a677c21:  *
1:a677c21:  * Unless required by applicable law or agreed to in writing, software
1:a677c21:  * distributed under the License is distributed on an "AS IS" BASIS,
1:a677c21:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:a677c21:  * See the License for the specific language governing permissions and
1:a677c21:  * limitations under the License.
1:a677c21:  */
1:a677c21: package org.apache.activemq.usecases;
5:a677c21: 
1:2fe01ce: import java.util.HashMap;
1:2fe01ce: import java.util.Iterator;
1:2fe01ce: 
1:a677c21: import javax.jms.Connection;
1:a677c21: import javax.jms.JMSException;
1:a677c21: 
1:a677c21: import org.apache.activemq.ActiveMQConnectionFactory;
1:a677c21: import org.apache.activemq.broker.BrokerService;
1:a677c21: import org.apache.activemq.test.JmsTopicSendReceiveWithTwoConnectionsTest;
1:2fe01ce: import org.apache.activemq.util.ServiceSupport;
1:2fe01ce: import org.apache.activemq.xbean.BrokerFactoryBean;
1:8bf987b: import org.slf4j.Logger;
1:8bf987b: import org.slf4j.LoggerFactory;
1:a677c21: import org.springframework.core.io.ClassPathResource;
1:a677c21: 
1:a677c21: /**
1:4743a20:  *
1:a677c21:  */
1:a677c21: public class TwoBrokerTopicSendReceiveTest extends JmsTopicSendReceiveWithTwoConnectionsTest {
1:8bf987b:     private static final Logger LOG = LoggerFactory.getLogger(TwoBrokerTopicSendReceiveTest.class);
1:a677c21: 
1:a677c21:     protected ActiveMQConnectionFactory sendFactory;
1:a677c21:     protected ActiveMQConnectionFactory receiveFactory;
1:4743a20:     protected HashMap<String, BrokerService> brokers = new HashMap<String, BrokerService>();
1:a677c21: 
1:4743a20:     @Override
1:a677c21:     protected void setUp() throws Exception {
1:a677c21:         sendFactory = createSenderConnectionFactory();
1:a677c21:         receiveFactory = createReceiverConnectionFactory();
1:2fe01ce: 
1:2fe01ce:         // Give server enough time to setup,
1:2fe01ce:         // so we don't lose messages when connection fails
1:fc00993:         LOG.info("Waiting for brokers Initialize.");
1:2fe01ce:         Thread.sleep(5000);
1:fc00993:         LOG.info("Brokers should be initialized by now.. starting test.");
1:f812e34: 
1:a677c21:         super.setUp();
2:a677c21:     }
1:2fe01ce: 
1:a677c21:     protected ActiveMQConnectionFactory createReceiverConnectionFactory() throws JMSException {
1:f812e34:         return createConnectionFactory("org/apache/activemq/usecases/receiver.xml", "receiver",
1:f812e34:                                        "vm://receiver");
1:a677c21:     }
1:a677c21: 
1:a677c21:     protected ActiveMQConnectionFactory createSenderConnectionFactory() throws JMSException {
1:a677c21:         return createConnectionFactory("org/apache/activemq/usecases/sender.xml", "sender", "vm://sender");
1:a677c21:     }
1:a677c21: 
1:4743a20:     @Override
1:a677c21:     protected void tearDown() throws Exception {
1:a677c21:         super.tearDown();
1:4743a20:         for (Iterator<BrokerService> iter = brokers.values().iterator(); iter.hasNext();) {
1:4743a20:             BrokerService broker = iter.next();
1:f812e34:             ServiceSupport.dispose(broker);
1:f812e34:             iter.remove();
1:f812e34:         }
1:2fe01ce:     }
1:a677c21: 
1:4743a20:     @Override
1:a677c21:     protected Connection createReceiveConnection() throws JMSException {
1:a677c21:         return receiveFactory.createConnection();
1:a677c21:     }
1:a677c21: 
1:4743a20:     @Override
1:a677c21:     protected Connection createSendConnection() throws JMSException {
1:a677c21:         return sendFactory.createConnection();
1:a677c21:     }
1:a677c21: 
1:f812e34:     protected ActiveMQConnectionFactory createConnectionFactory(String config, String brokerName,
1:f812e34:                                                                 String connectUrl) throws JMSException {
1:a677c21:         try {
1:a677c21:             BrokerFactoryBean brokerFactory = new BrokerFactoryBean(new ClassPathResource(config));
1:a677c21:             brokerFactory.afterPropertiesSet();
1:a677c21:             BrokerService broker = brokerFactory.getBroker();
1:2fe01ce:             brokers.put(brokerName, broker);
1:f812e34: 
1:2fe01ce:             return new ActiveMQConnectionFactory(connectUrl);
1:2fe01ce: 
1:a677c21:         } catch (Exception e) {
1:a677c21:             e.printStackTrace();
1:a677c21:         }
1:a677c21:         return null;
1:a677c21:     }
1:a677c21: }
============================================================================
author:Timothy A. Bish
-------------------------------------------------------------------------------
commit:4743a20
/////////////////////////////////////////////////////////////////////////
1:  *
1:     protected HashMap<String, BrokerService> brokers = new HashMap<String, BrokerService>();
1:     @Override
/////////////////////////////////////////////////////////////////////////
1:     @Override
1:         for (Iterator<BrokerService> iter = brokers.values().iterator(); iter.hasNext();) {
1:             BrokerService broker = iter.next();
1:     @Override
1:     @Override
commit:ef24cc9
author:Hiram R. Chirino
-------------------------------------------------------------------------------
commit:b0c2a40
/////////////////////////////////////////////////////////////////////////
1:  * 
commit:fc00993
/////////////////////////////////////////////////////////////////////////
0: import org.apache.commons.logging.Log;
0: import org.apache.commons.logging.LogFactory;
0:     private static final Log LOG = LogFactory.getLog(TwoBrokerTopicSendReceiveTest.class);
/////////////////////////////////////////////////////////////////////////
1:         LOG.info("Waiting for brokers Initialize.");
1:         LOG.info("Brokers should be initialized by now.. starting test.");
commit:f812e34
/////////////////////////////////////////////////////////////////////////
1: 
1:         return createConnectionFactory("org/apache/activemq/usecases/receiver.xml", "receiver",
1:                                        "vm://receiver");
/////////////////////////////////////////////////////////////////////////
0:         for (Iterator iter = brokers.values().iterator(); iter.hasNext();) {
0:             BrokerService broker = (BrokerService)iter.next();
1:             ServiceSupport.dispose(broker);
1:             iter.remove();
1:         }
/////////////////////////////////////////////////////////////////////////
1:     protected ActiveMQConnectionFactory createConnectionFactory(String config, String brokerName,
1:                                                                 String connectUrl) throws JMSException {
1: 
commit:230a86c
/////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////
1:  *      http://www.apache.org/licenses/LICENSE-2.0
commit:57b4941
/////////////////////////////////////////////////////////////////////////
1:  * Licensed to the Apache Software Foundation (ASF) under one or more
1:  * contributor license agreements.  See the NOTICE file distributed with
1:  * this work for additional information regarding copyright ownership.
1:  * The ASF licenses this file to You under the Apache License, Version 2.0
1:  * (the "License"); you may not use this file except in compliance with
1:  * the License.  You may obtain a copy of the License at
commit:2fe01ce
/////////////////////////////////////////////////////////////////////////
1: import java.util.HashMap;
1: import java.util.Iterator;
1: 
1: import org.apache.activemq.util.ServiceSupport;
1: import org.apache.activemq.xbean.BrokerFactoryBean;
/////////////////////////////////////////////////////////////////////////
0:     protected HashMap brokers = new HashMap();
1: 
1:         // Give server enough time to setup,
1:         // so we don't lose messages when connection fails
0:         log.info("Waiting for brokers Initialize.");
1:         Thread.sleep(5000);
0:         log.info("Brokers should be initialized by now.. starting test.");
1:         
/////////////////////////////////////////////////////////////////////////
0:     	for (Iterator iter = brokers.values().iterator(); iter.hasNext();) {
0: 			BrokerService broker = (BrokerService) iter.next();
0: 			ServiceSupport.dispose(broker);
0: 			iter.remove();
1: 		}
/////////////////////////////////////////////////////////////////////////
1:             brokers.put(brokerName, broker);
1:             
1:             return new ActiveMQConnectionFactory(connectUrl);
author:Bosanac Dejan
-------------------------------------------------------------------------------
commit:8bf987b
/////////////////////////////////////////////////////////////////////////
1: import org.slf4j.Logger;
1: import org.slf4j.LoggerFactory;
1:     private static final Logger LOG = LoggerFactory.getLogger(TwoBrokerTopicSendReceiveTest.class);
author:James Strachan
-------------------------------------------------------------------------------
commit:a677c21
/////////////////////////////////////////////////////////////////////////
1: /**
1:  *
0:  * Copyright 2005-2006 The Apache Software Foundation
1:  *
0:  * Licensed under the Apache License, Version 2.0 (the "License");
0:  * you may not use this file except in compliance with the License.
0:  * You may obtain a copy of the License at
1:  *
0:  * http://www.apache.org/licenses/LICENSE-2.0
1:  *
1:  * Unless required by applicable law or agreed to in writing, software
1:  * distributed under the License is distributed on an "AS IS" BASIS,
1:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:  * See the License for the specific language governing permissions and
1:  * limitations under the License.
1:  */
1: package org.apache.activemq.usecases;
1: 
1: import javax.jms.Connection;
1: import javax.jms.JMSException;
1: 
1: import org.apache.activemq.ActiveMQConnectionFactory;
0: import org.apache.activemq.broker.TransportConnector;
1: import org.apache.activemq.broker.BrokerService;
0: import org.apache.activemq.xbean.BrokerFactoryBean;
1: import org.apache.activemq.test.JmsTopicSendReceiveWithTwoConnectionsTest;
1: import org.springframework.core.io.ClassPathResource;
1: 
1: /**
0:  * @version $Revision: 1.1.1.1 $
1:  */
1: public class TwoBrokerTopicSendReceiveTest extends JmsTopicSendReceiveWithTwoConnectionsTest {
1: 
1:     protected ActiveMQConnectionFactory sendFactory;
1:     protected ActiveMQConnectionFactory receiveFactory;
1: 
1:     protected void setUp() throws Exception {
1:         sendFactory = createSenderConnectionFactory();
1:         receiveFactory = createReceiverConnectionFactory();
1:         super.setUp();
1:     }
1: 
1:     protected ActiveMQConnectionFactory createReceiverConnectionFactory() throws JMSException {
0:         return createConnectionFactory("org/apache/activemq/usecases/receiver.xml", "receiver", "vm://receiver");
1:     }
1: 
1:     protected ActiveMQConnectionFactory createSenderConnectionFactory() throws JMSException {
1:         return createConnectionFactory("org/apache/activemq/usecases/sender.xml", "sender", "vm://sender");
1:     }
1: 
1:     protected void tearDown() throws Exception {
1:         super.tearDown();
1:     }
1: 
1:     protected Connection createReceiveConnection() throws JMSException {
1:         return receiveFactory.createConnection();
1:     }
1: 
1:     protected Connection createSendConnection() throws JMSException {
1:         return sendFactory.createConnection();
1:     }
1: 
0:     protected ActiveMQConnectionFactory createConnectionFactory(String config, String brokerName, String connectUrl) throws JMSException {
1:         try {
1:             BrokerFactoryBean brokerFactory = new BrokerFactoryBean(new ClassPathResource(config));
1:             brokerFactory.afterPropertiesSet();
1: 
1:             BrokerService broker = brokerFactory.getBroker();
0:             ActiveMQConnectionFactory factory = new ActiveMQConnectionFactory(((TransportConnector)broker.getTransportConnectors().get(0)).getConnectUri());
1: 
0:             return factory;
1: 
1:         } catch (Exception e) {
1:             e.printStackTrace();
1:         }
1:         return null;
1:     }
1: }
============================================================================