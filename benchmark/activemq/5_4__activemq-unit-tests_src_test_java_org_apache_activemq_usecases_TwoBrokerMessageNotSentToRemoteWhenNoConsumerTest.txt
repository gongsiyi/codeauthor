2:a677c21: /**
1:57b4941:  * Licensed to the Apache Software Foundation (ASF) under one or more
1:57b4941:  * contributor license agreements.  See the NOTICE file distributed with
1:57b4941:  * this work for additional information regarding copyright ownership.
1:57b4941:  * The ASF licenses this file to You under the Apache License, Version 2.0
1:57b4941:  * (the "License"); you may not use this file except in compliance with
1:57b4941:  * the License.  You may obtain a copy of the License at
3:a677c21:  *
1:230a86c:  *      http://www.apache.org/licenses/LICENSE-2.0
1:a677c21:  *
1:a677c21:  * Unless required by applicable law or agreed to in writing, software
1:a677c21:  * distributed under the License is distributed on an "AS IS" BASIS,
1:a677c21:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:a677c21:  * See the License for the specific language governing permissions and
1:a677c21:  * limitations under the License.
2:a677c21:  */
1:a677c21: package org.apache.activemq.usecases;
9:a677c21: 
1:74a7a8b: import java.net.URI;
1:a677c21: 
1:a677c21: import javax.jms.Destination;
1:a677c21: import javax.jms.MessageConsumer;
1:a677c21: 
1:74a7a8b: import org.apache.activemq.JmsMultipleBrokersTestSupport;
1:74a7a8b: import org.apache.activemq.util.MessageIdList;
1:a677c21: 
1:a677c21: public class TwoBrokerMessageNotSentToRemoteWhenNoConsumerTest extends JmsMultipleBrokersTestSupport {
1:97a646c:     protected static final int MESSAGE_COUNT = 100;
1:a677c21: 
1:a677c21:     /**
1:a677c21:      * BrokerA -> BrokerB
1:a677c21:      */
1:a677c21:     public void testRemoteBrokerHasConsumer() throws Exception {
1:a677c21:         // Setup broker networks
1:a677c21:         bridgeBrokers("BrokerA", "BrokerB");
1:a677c21: 
1:a677c21:         startAllBrokers();
1:a677c21: 
1:a677c21:         // Setup destination
1:a677c21:         Destination dest = createDestination("TEST.FOO", true);
1:a677c21: 
1:a677c21:         // Setup consumers
1:a677c21:         MessageConsumer clientA = createConsumer("BrokerA", dest);
1:a677c21:         MessageConsumer clientB = createConsumer("BrokerB", dest);
1:a677c21: 
1:97a646c:         Thread.sleep(2000);
1:a677c21:         // Send messages
1:a677c21:         sendMessages("BrokerA", dest, MESSAGE_COUNT);
1:a677c21: 
1:a677c21:         // Get message count
1:a677c21:         MessageIdList msgsA = getConsumerMessages("BrokerA", clientA);
1:a677c21:         MessageIdList msgsB = getConsumerMessages("BrokerB", clientB);
1:a677c21: 
1:a677c21:         msgsA.waitForMessagesToArrive(MESSAGE_COUNT);
1:a677c21:         msgsB.waitForMessagesToArrive(MESSAGE_COUNT);
1:a677c21: 
1:a677c21:         assertEquals(MESSAGE_COUNT, msgsA.getMessageCount());
1:a677c21:         assertEquals(MESSAGE_COUNT, msgsB.getMessageCount());
1:a677c21: 
6:a677c21:     }
1:3da1373: 
1:3da1373:     /**
1:a677c21:      * BrokerA -> BrokerB
1:a677c21:      */
1:a677c21:     public void testRemoteBrokerHasNoConsumer() throws Exception {
1:a677c21:         // Setup broker networks
1:a677c21:         bridgeBrokers("BrokerA", "BrokerB");
1:a677c21: 
1:a677c21:         startAllBrokers();
1:a677c21: 
1:a677c21:         // Setup destination
1:a677c21:         Destination dest = createDestination("TEST.FOO", true);
1:a677c21: 
1:a677c21:         // Setup consumers
1:a677c21:         MessageConsumer clientA = createConsumer("BrokerA", dest);
1:a677c21: 
1:a677c21:         // Send messages
1:a677c21:         sendMessages("BrokerA", dest, MESSAGE_COUNT);
1:a677c21: 
1:a677c21:         // Get message count
1:a677c21:         MessageIdList msgsA = getConsumerMessages("BrokerA", clientA);
1:a677c21: 
1:a677c21:         msgsA.waitForMessagesToArrive(MESSAGE_COUNT);
1:a677c21: 
1:a677c21:         assertEquals(MESSAGE_COUNT, msgsA.getMessageCount());
1:a677c21: 
1:a677c21:     }
1:a677c21:     
1:a677c21:     /**
1:3da1373:      * BrokerA -> BrokerB && BrokerB -> BrokerA
1:3da1373:      */
1:3da1373:     public void testDuplexStaticRemoteBrokerHasNoConsumer() throws Exception {
1:3da1373:         // Setup broker networks
1:3da1373:         boolean dynamicOnly = true;
1:3da1373:         int networkTTL = 2;
1:3da1373:         boolean conduit = true;
1:3da1373:         bridgeBrokers("BrokerA", "BrokerB", dynamicOnly, networkTTL, conduit);
1:3da1373:         bridgeBrokers("BrokerB", "BrokerA", dynamicOnly, networkTTL, conduit);
1:3da1373: 
1:3da1373:         startAllBrokers();
1:3da1373: 
1:3da1373:         // Setup destination
1:3da1373:         Destination dest = createDestination("TEST.FOO", false);
1:3da1373: 
1:3da1373:         // Setup consumers
1:3da1373:         MessageConsumer clientA = createConsumer("BrokerA", dest);
1:3da1373: 
1:3da1373:         Thread.sleep(2*1000);
1:3da1373:         
1:3da1373:         int messageCount = 2000;
1:3da1373:         // Send messages
1:3da1373:         sendMessages("BrokerA", dest, messageCount);
1:3da1373: 
1:3da1373:         // Get message count
1:3da1373:         MessageIdList msgsA = getConsumerMessages("BrokerA", clientA);
1:3da1373: 
1:3da1373:         msgsA.waitForMessagesToArrive(messageCount);
1:3da1373: 
1:3da1373:         assertEquals(messageCount, msgsA.getMessageCount());
1:3da1373: 
1:3da1373:     }
1:a677c21: 
1:a677c21:     public void setUp() throws Exception {
1:a677c21:         super.setAutoFail(true);
1:a677c21:         super.setUp();
1:97a646c:         createBroker(new URI(
1:97a646c:                 "broker:(tcp://localhost:61616)/BrokerA?persistent=false&useJmx=false"));
1:97a646c:         createBroker(new URI(
1:97a646c:                 "broker:(tcp://localhost:61617)/BrokerB?persistent=false&useJmx=false"));
1:a677c21:     }
1:a677c21: }
============================================================================
author:Timothy A. Bish
-------------------------------------------------------------------------------
commit:ef24cc9
author:Gary Tully
-------------------------------------------------------------------------------
commit:c3a64a8
/////////////////////////////////////////////////////////////////////////
commit:3da1373
/////////////////////////////////////////////////////////////////////////
1:     
1:     /**
1:      * BrokerA -> BrokerB && BrokerB -> BrokerA
1:      */
1:     public void testDuplexStaticRemoteBrokerHasNoConsumer() throws Exception {
1:         // Setup broker networks
1:         boolean dynamicOnly = true;
1:         int networkTTL = 2;
1:         boolean conduit = true;
1:         bridgeBrokers("BrokerA", "BrokerB", dynamicOnly, networkTTL, conduit);
1:         bridgeBrokers("BrokerB", "BrokerA", dynamicOnly, networkTTL, conduit);
1: 
1:         startAllBrokers();
1: 
1:         // Setup destination
1:         Destination dest = createDestination("TEST.FOO", false);
1: 
1:         // Setup consumers
1:         MessageConsumer clientA = createConsumer("BrokerA", dest);
1: 
1:         Thread.sleep(2*1000);
1:         
1:         int messageCount = 2000;
1:         // Send messages
1:         sendMessages("BrokerA", dest, messageCount);
1: 
1:         // Get message count
1:         MessageIdList msgsA = getConsumerMessages("BrokerA", clientA);
1: 
1:         msgsA.waitForMessagesToArrive(messageCount);
1: 
1:         assertEquals(messageCount, msgsA.getMessageCount());
1: 
1:     }
author:Robert Davies
-------------------------------------------------------------------------------
commit:97a646c
/////////////////////////////////////////////////////////////////////////
0: import org.apache.activemq.network.NetworkConnector;
/////////////////////////////////////////////////////////////////////////
1:     protected static final int MESSAGE_COUNT = 100;
/////////////////////////////////////////////////////////////////////////
1:         Thread.sleep(2000);
/////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////
1:         createBroker(new URI(
1:                 "broker:(tcp://localhost:61616)/BrokerA?persistent=false&useJmx=false"));
1:         createBroker(new URI(
1:                 "broker:(tcp://localhost:61617)/BrokerB?persistent=false&useJmx=false"));
commit:54114cc
/////////////////////////////////////////////////////////////////////////
0:                 config.setBrokerName(localBroker.getBrokerName());
commit:ae73f86
/////////////////////////////////////////////////////////////////////////
0: import org.apache.activemq.network.NetworkBridgeConfiguration;
/////////////////////////////////////////////////////////////////////////
0:                 NetworkBridgeConfiguration config = new NetworkBridgeConfiguration();
0:                 config.setLocalBrokerName(localBroker.getBrokerName());
0:                 DemandForwardingBridge bridge = new DemandForwardingBridge(config,TransportFactory.connect(localURI),
/////////////////////////////////////////////////////////////////////////
author:Hiram R. Chirino
-------------------------------------------------------------------------------
commit:933eb2f
/////////////////////////////////////////////////////////////////////////
0:     protected List<DemandForwardingBridge> bridges;
/////////////////////////////////////////////////////////////////////////
0:         URI remoteURI;
0:         URI localURI;
/////////////////////////////////////////////////////////////////////////
0:         bridges = new ArrayList<DemandForwardingBridge>();
commit:fc00993
/////////////////////////////////////////////////////////////////////////
0:         maxSetupTime = 2000;
commit:74a7a8b
/////////////////////////////////////////////////////////////////////////
1: import java.net.URI;
0: import java.util.ArrayList;
0: import java.util.List;
0: import java.util.concurrent.atomic.AtomicInteger;
1: import org.apache.activemq.JmsMultipleBrokersTestSupport;
0: import org.apache.activemq.broker.BrokerService;
0: import org.apache.activemq.broker.TransportConnector;
0: import org.apache.activemq.command.Command;
0: import org.apache.activemq.network.DemandForwardingBridge;
0: import org.apache.activemq.network.NetworkBridgeConfiguration;
0: import org.apache.activemq.transport.TransportFactory;
1: import org.apache.activemq.util.MessageIdList;
commit:230a86c
/////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////
1:  *      http://www.apache.org/licenses/LICENSE-2.0
/////////////////////////////////////////////////////////////////////////
0:         List localTransports = localBroker.getTransportConnectors();
0:             localURI = ((TransportConnector)localTransports.get(0)).getConnectUri();
0:                 DemandForwardingBridge bridge = new DemandForwardingBridge(config, TransportFactory.connect(localURI), TransportFactory.connect(remoteURI)) {
0:                             // Keep track of the number of message dispatches
0:                             // through the bridge
commit:86cbdfd
/////////////////////////////////////////////////////////////////////////
0: import java.util.concurrent.atomic.AtomicInteger;
commit:57b4941
/////////////////////////////////////////////////////////////////////////
1:  * Licensed to the Apache Software Foundation (ASF) under one or more
1:  * contributor license agreements.  See the NOTICE file distributed with
1:  * this work for additional information regarding copyright ownership.
1:  * The ASF licenses this file to You under the Apache License, Version 2.0
1:  * (the "License"); you may not use this file except in compliance with
1:  * the License.  You may obtain a copy of the License at
author:James Strachan
-------------------------------------------------------------------------------
commit:a677c21
/////////////////////////////////////////////////////////////////////////
1: /**
1:  *
0:  * Copyright 2005-2006 The Apache Software Foundation
1:  *
0:  * Licensed under the Apache License, Version 2.0 (the "License");
0:  * you may not use this file except in compliance with the License.
0:  * You may obtain a copy of the License at
1:  *
0:  * http://www.apache.org/licenses/LICENSE-2.0
1:  *
1:  * Unless required by applicable law or agreed to in writing, software
1:  * distributed under the License is distributed on an "AS IS" BASIS,
1:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:  * See the License for the specific language governing permissions and
1:  * limitations under the License.
1:  */
1: package org.apache.activemq.usecases;
1: 
0: import org.apache.activemq.broker.BrokerService;
0: import org.apache.activemq.broker.TransportConnector;
0: import org.apache.activemq.network.DemandForwardingBridge;
0: import org.apache.activemq.transport.TransportFactory;
0: import org.apache.activemq.JmsMultipleBrokersTestSupport;
0: import org.apache.activemq.command.Command;
0: import org.apache.activemq.util.MessageIdList;
1: 
1: import javax.jms.Destination;
1: import javax.jms.MessageConsumer;
0: import java.util.List;
0: import java.util.ArrayList;
0: import java.net.URI;
1: 
0: import edu.emory.mathcs.backport.java.util.concurrent.atomic.AtomicInteger;
1: 
1: /**
0:  * @version $Revision: 1.1.1.1 $
1:  */
1: public class TwoBrokerMessageNotSentToRemoteWhenNoConsumerTest extends JmsMultipleBrokersTestSupport {
0:     protected static final int MESSAGE_COUNT = 10;
1: 
0:     protected List bridges;
0:     protected AtomicInteger msgDispatchCount;
1: 
1:     /**
1:      * BrokerA -> BrokerB
1:      */
1:     public void testRemoteBrokerHasConsumer() throws Exception {
1:         // Setup broker networks
1:         bridgeBrokers("BrokerA", "BrokerB");
1: 
1:         startAllBrokers();
1: 
1:         // Setup destination
1:         Destination dest = createDestination("TEST.FOO", true);
1: 
1:         // Setup consumers
1:         MessageConsumer clientA = createConsumer("BrokerA", dest);
1:         MessageConsumer clientB = createConsumer("BrokerB", dest);
1: 
1:         // Send messages
1:         sendMessages("BrokerA", dest, MESSAGE_COUNT);
1: 
1:         // Get message count
1:         MessageIdList msgsA = getConsumerMessages("BrokerA", clientA);
1:         MessageIdList msgsB = getConsumerMessages("BrokerB", clientB);
1: 
1:         msgsA.waitForMessagesToArrive(MESSAGE_COUNT);
1:         msgsB.waitForMessagesToArrive(MESSAGE_COUNT);
1: 
1:         assertEquals(MESSAGE_COUNT, msgsA.getMessageCount());
1:         assertEquals(MESSAGE_COUNT, msgsB.getMessageCount());
1: 
0:         // Check that 10 message dispatch commands are send over the network
0:         assertEquals(MESSAGE_COUNT, msgDispatchCount.get());
1:     }
1: 
1:     /**
1:      * BrokerA -> BrokerB
1:      */
1:     public void testRemoteBrokerHasNoConsumer() throws Exception {
1:         // Setup broker networks
1:         bridgeBrokers("BrokerA", "BrokerB");
1: 
1:         startAllBrokers();
1: 
1:         // Setup destination
1:         Destination dest = createDestination("TEST.FOO", true);
1: 
1:         // Setup consumers
1:         MessageConsumer clientA = createConsumer("BrokerA", dest);
1: 
1:         // Send messages
1:         sendMessages("BrokerA", dest, MESSAGE_COUNT);
1: 
1:         // Get message count
1:         MessageIdList msgsA = getConsumerMessages("BrokerA", clientA);
1: 
1:         msgsA.waitForMessagesToArrive(MESSAGE_COUNT);
1: 
1:         assertEquals(MESSAGE_COUNT, msgsA.getMessageCount());
1: 
0:         // Check that no message dispatch commands are send over the network
0:         assertEquals(0, msgDispatchCount.get());
1:     }
1: 
0:     protected void bridgeBrokers(BrokerService localBroker, BrokerService remoteBroker) throws Exception {
0:         List remoteTransports = remoteBroker.getTransportConnectors();
0:         List localTransports  = localBroker.getTransportConnectors();
1: 
0:         URI remoteURI, localURI;
0:         if (!remoteTransports.isEmpty() && !localTransports.isEmpty()) {
0:             remoteURI = ((TransportConnector)remoteTransports.get(0)).getConnectUri();
0:             localURI  = ((TransportConnector)localTransports.get(0)).getConnectUri();
1: 
0:             // Ensure that we are connecting using tcp
0:             if (remoteURI.toString().startsWith("tcp:") && localURI.toString().startsWith("tcp:")) {
0:                 DemandForwardingBridge bridge = new DemandForwardingBridge(TransportFactory.connect(localURI),
0:                                                                            TransportFactory.connect(remoteURI)) {
0:                     protected void serviceLocalCommand(Command command) {
0:                         if (command.isMessageDispatch()) {
0:                             // Keep track of the number of message dispatches through the bridge
0:                             msgDispatchCount.incrementAndGet();
1:                         }
1: 
0:                         super.serviceLocalCommand(command);
1:                     }
0:                 };
0:                 bridge.setLocalBrokerName(localBroker.getBrokerName());
0:                 bridges.add(bridge);
1: 
0:                 bridge.start();
0:             } else {
0:                 throw new Exception("Remote broker or local broker is not using tcp connectors");
1:             }
0:         } else {
0:             throw new Exception("Remote broker or local broker has no registered connectors.");
1:         }
1: 
0:         MAX_SETUP_TIME = 2000;
1:     }
1: 
1:     public void setUp() throws Exception {
1:         super.setAutoFail(true);
1:         super.setUp();
0:         createBroker(new URI("broker:(tcp://localhost:61616)/BrokerA?persistent=false&useJmx=false"));
0:         createBroker(new URI("broker:(tcp://localhost:61617)/BrokerB?persistent=false&useJmx=false"));
1: 
0:         bridges = new ArrayList();
0:         msgDispatchCount = new AtomicInteger(0);
1:     }
1: }
============================================================================