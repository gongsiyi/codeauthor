1:7ae2055: /**
1:7ae2055:  * Licensed to the Apache Software Foundation (ASF) under one or more
1:7ae2055:  * contributor license agreements.  See the NOTICE file distributed with
1:7ae2055:  * this work for additional information regarding copyright ownership.
1:7ae2055:  * The ASF licenses this file to You under the Apache License, Version 2.0
1:7ae2055:  * (the "License"); you may not use this file except in compliance with
1:7ae2055:  * the License.  You may obtain a copy of the License at
1:7ae2055:  *
1:7ae2055:  *      http://www.apache.org/licenses/LICENSE-2.0
1:7ae2055:  *
1:7ae2055:  * Unless required by applicable law or agreed to in writing, software
1:7ae2055:  * distributed under the License is distributed on an "AS IS" BASIS,
1:7ae2055:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:7ae2055:  * See the License for the specific language governing permissions and
1:7ae2055:  * limitations under the License.
1:7ae2055:  */
1:7ae2055: package org.apache.activemq.broker.scheduler;
4:7ae2055: 
1:74846bb: import static org.junit.Assert.assertEquals;
1:74846bb: 
1:9706f65: import java.io.File;
1:9706f65: import java.util.ArrayList;
1:9706f65: import java.util.List;
1:b3c1327: 
1:b3c1327: import org.apache.activemq.store.kahadb.scheduler.JobSchedulerStoreImpl;
1:b3c1327: import org.apache.activemq.util.ByteSequence;
1:b3c1327: import org.apache.activemq.util.IOHelper;
1:74846bb: import org.junit.Test;
1:74846bb: import org.slf4j.Logger;
1:74846bb: import org.slf4j.LoggerFactory;
1:b3c1327: 
1:74846bb: public class JobSchedulerStoreTest {
1:9706f65: 
1:74846bb:     private static final Logger LOG = LoggerFactory.getLogger(JobSchedulerStoreTest.class);
1:74846bb: 
1:74846bb:     @Test(timeout = 120 * 1000)
1:b3c1327:     public void testRestart() throws Exception {
1:b3c1327:         JobSchedulerStore store = new JobSchedulerStoreImpl();
1:b3c1327:         File directory = new File("target/test/ScheduledDB");
1:74846bb:         IOHelper.mkdirs(directory);
1:74846bb:         IOHelper.deleteChildren(directory);
1:74846bb:         store.setDirectory(directory);
1:b3c1327:         final int NUMBER = 1000;
1:b3c1327:         store.start();
1:74846bb:         List<ByteSequence> list = new ArrayList<ByteSequence>();
1:74846bb:         for (int i = 0; i < NUMBER; i++) {
1:74846bb:             ByteSequence buff = new ByteSequence(new String("testjob" + i).getBytes());
1:b3c1327:             list.add(buff);
4:7ae2055:         }
1:74846bb: 
1:b3c1327:         JobScheduler js = store.getJobScheduler("test");
1:b3c1327:         js.startDispatching();
1:b3c1327:         int count = 0;
1:74846bb:         long startTime = 10 * 60 * 1000;
1:74846bb:         long period = startTime;
1:74846bb:         for (ByteSequence job : list) {
1:74846bb:             js.schedule("id:" + (count++), job, "", startTime, period, -1);
1:b3c1327:         }
1:74846bb: 
1:74846bb:         List<Job> test = js.getAllJobs();
1:74846bb:         LOG.debug("Found {} jobs in the store before restart", test.size());
1:74846bb:         assertEquals(list.size(), test.size());
1:b3c1327:         store.stop();
1:b3c1327: 
1:b3c1327:         store.start();
1:b3c1327:         js = store.getJobScheduler("test");
1:b3c1327:         test = js.getAllJobs();
1:74846bb:         LOG.debug("Found {} jobs in the store after restart", test.size());
1:74846bb:         assertEquals(list.size(), test.size());
1:74846bb: 
1:74846bb:         for (int i = 0; i < list.size(); i++) {
1:b3c1327:             String orig = new String(list.get(i).getData());
1:b3c1327:             String payload = new String(test.get(i).getPayload());
1:74846bb:             assertEquals(orig, payload);
1:b3c1327:         }
1:b3c1327:     }
1:7ae2055: }
============================================================================
author:Timothy Bish
-------------------------------------------------------------------------------
commit:74846bb
/////////////////////////////////////////////////////////////////////////
1: import static org.junit.Assert.assertEquals;
1: 
1: import org.junit.Test;
1: import org.slf4j.Logger;
1: import org.slf4j.LoggerFactory;
1: public class JobSchedulerStoreTest {
1:     private static final Logger LOG = LoggerFactory.getLogger(JobSchedulerStoreTest.class);
1: 
1:     @Test(timeout = 120 * 1000)
1:         IOHelper.mkdirs(directory);
1:         IOHelper.deleteChildren(directory);
1:         store.setDirectory(directory);
1:         List<ByteSequence> list = new ArrayList<ByteSequence>();
1:         for (int i = 0; i < NUMBER; i++) {
1:             ByteSequence buff = new ByteSequence(new String("testjob" + i).getBytes());
1: 
1:         long startTime = 10 * 60 * 1000;
1:         long period = startTime;
1:         for (ByteSequence job : list) {
1:             js.schedule("id:" + (count++), job, "", startTime, period, -1);
1: 
1:         List<Job> test = js.getAllJobs();
1:         LOG.debug("Found {} jobs in the store before restart", test.size());
1:         assertEquals(list.size(), test.size());
1:         LOG.debug("Found {} jobs in the store after restart", test.size());
1:         assertEquals(list.size(), test.size());
1: 
1:         for (int i = 0; i < list.size(); i++) {
1:             assertEquals(orig, payload);
author:Timothy A. Bish
-------------------------------------------------------------------------------
commit:b3c1327
/////////////////////////////////////////////////////////////////////////
0: import junit.framework.TestCase;
1: 
1: import org.apache.activemq.store.kahadb.scheduler.JobSchedulerStoreImpl;
1: import org.apache.activemq.util.ByteSequence;
1: import org.apache.activemq.util.IOHelper;
1: 
1:     public void testRestart() throws Exception {
1:         JobSchedulerStore store = new JobSchedulerStoreImpl();
1:         File directory = new File("target/test/ScheduledDB");
0:           IOHelper.mkdirs(directory);
0:           IOHelper.deleteChildren(directory);
0:           store.setDirectory(directory);
1:         final int NUMBER = 1000;
1:         store.start();
0:         List<ByteSequence>list = new ArrayList<ByteSequence>();
0:         for (int i = 0; i < NUMBER;i++ ) {
1:             list.add(buff);
1:         JobScheduler js = store.getJobScheduler("test");
1:         js.startDispatching();
1:         int count = 0;
0:         long startTime = 10 * 60 * 1000; long period = startTime;
0:         for (ByteSequence job:list) {
0:             js.schedule("id:"+(count++), job, "", startTime, period, -1);
1:         }
0:         List<Job>test = js.getAllJobs();
0:         assertEquals(list.size(),test.size());
1:         store.stop();
1: 
1:         store.start();
1:         js = store.getJobScheduler("test");
1:         test = js.getAllJobs();
0:         assertEquals(list.size(),test.size());
0:         for (int i = 0; i < list.size();i++) {
1:             String orig = new String(list.get(i).getData());
1:             String payload = new String(test.get(i).getPayload());
0:             assertEquals(orig,payload);
1:         }
1:     }
commit:ef24cc9
author:Hiram R. Chirino
-------------------------------------------------------------------------------
commit:0484af1
/////////////////////////////////////////////////////////////////////////
0: import org.apache.activemq.store.kahadb.scheduler.JobSchedulerStoreImpl;
/////////////////////////////////////////////////////////////////////////
0: 		JobSchedulerStore store = new JobSchedulerStoreImpl();
commit:1aab71b
/////////////////////////////////////////////////////////////////////////
0: import org.apache.activemq.util.ByteSequence;
author:Bosanac Dejan
-------------------------------------------------------------------------------
commit:9706f65
/////////////////////////////////////////////////////////////////////////
1: import java.io.File;
1: import java.util.ArrayList;
1: import java.util.List;
1: 
/////////////////////////////////////////////////////////////////////////
0: 		long startTime = 10 * 60 * 1000; long period = startTime;
0: 		    js.schedule("id:"+(count++), job, "", startTime, period, -1);
author:Robert Davies
-------------------------------------------------------------------------------
commit:e3154c3
/////////////////////////////////////////////////////////////////////////
0: 		long startTime = 10000;
0: 		    js.schedule("id:"+(count++), job,"",startTime,10000,-1);	    
0: 		List<Job>test = js.getAllJobs();
0: 		test = js.getAllJobs();
commit:c7c8e53
/////////////////////////////////////////////////////////////////////////
0: 		List<Job>test = js.getNextScheduleJobs();
/////////////////////////////////////////////////////////////////////////
0: 		    String payload = new String(test.get(i).getPayload());
commit:7ae2055
/////////////////////////////////////////////////////////////////////////
1: /**
1:  * Licensed to the Apache Software Foundation (ASF) under one or more
1:  * contributor license agreements.  See the NOTICE file distributed with
1:  * this work for additional information regarding copyright ownership.
1:  * The ASF licenses this file to You under the Apache License, Version 2.0
1:  * (the "License"); you may not use this file except in compliance with
1:  * the License.  You may obtain a copy of the License at
1:  *
1:  *      http://www.apache.org/licenses/LICENSE-2.0
1:  *
1:  * Unless required by applicable law or agreed to in writing, software
1:  * distributed under the License is distributed on an "AS IS" BASIS,
1:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:  * See the License for the specific language governing permissions and
1:  * limitations under the License.
1:  */
1: package org.apache.activemq.broker.scheduler;
1: 
0: import java.io.File;
0: import java.util.ArrayList;
0: import java.util.List;
0: import junit.framework.TestCase;
0: import org.apache.activemq.util.IOHelper;
0: import org.apache.kahadb.util.ByteSequence;
1: 
0: public class JobSchedulerStoreTest extends TestCase {
1: 
0: 	public void testRestart() throws Exception {
0: 		JobSchedulerStore store = new JobSchedulerStore();
0: 		File directory = new File("target/test/ScheduledDB");
0: 		  IOHelper.mkdirs(directory);
0: 	      IOHelper.deleteChildren(directory);
0: 	      store.setDirectory(directory);
0: 		final int NUMBER = 1000;
0: 		store.start();
0: 		List<ByteSequence>list = new ArrayList<ByteSequence>();
0: 		for (int i = 0; i < NUMBER;i++ ) {
0:             ByteSequence buff = new ByteSequence(new String("testjob"+i).getBytes());
0:             list.add(buff);     
1:         }
0: 		JobScheduler js = store.getJobScheduler("test");
0: 		int count = 0;
0: 		long startTime = System.currentTimeMillis()+10000;
0: 		for (ByteSequence job:list) {
0: 		    js.schedule("id:"+(count++), job,startTime,10000,-1);	    
1: 		}
0: 		List<ByteSequence>test = js.getNextScheduleJobs();
0: 		assertEquals(list.size(),test.size());
0: 		store.stop();
1: 		
0: 		store.start();
0: 		js = store.getJobScheduler("test");
0: 		test = js.getNextScheduleJobs();
0: 		assertEquals(list.size(),test.size());
0: 		for (int i = 0; i < list.size();i++) {
0: 		    String orig = new String(list.get(i).getData());
0: 		    String payload = new String(test.get(i).getData());
0: 		    assertEquals(orig,payload);
1: 		}
1: 	}
1: }
============================================================================