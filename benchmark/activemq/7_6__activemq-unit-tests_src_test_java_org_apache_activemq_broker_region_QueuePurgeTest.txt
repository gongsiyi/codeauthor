1:b6115cf: /**
1:b6115cf:  * Licensed to the Apache Software Foundation (ASF) under one or more
1:b6115cf:  * contributor license agreements.  See the NOTICE file distributed with
1:b6115cf:  * this work for additional information regarding copyright ownership.
1:b6115cf:  * The ASF licenses this file to You under the Apache License, Version 2.0
1:b6115cf:  * (the "License"); you may not use this file except in compliance with
1:b6115cf:  * the License.  You may obtain a copy of the License at
1:b6115cf:  *
1:b6115cf:  *      http://www.apache.org/licenses/LICENSE-2.0
1:b6115cf:  *
1:b6115cf:  * Unless required by applicable law or agreed to in writing, software
1:b6115cf:  * distributed under the License is distributed on an "AS IS" BASIS,
1:b6115cf:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:b6115cf:  * See the License for the specific language governing permissions and
1:b6115cf:  * limitations under the License.
1:b6115cf:  */
1:b6115cf: package org.apache.activemq.broker.region;
1:b6115cf: 
1:89eecad: import java.io.File;
1:56bb079: import java.util.concurrent.ExecutorService;
1:56bb079: import java.util.concurrent.Executors;
1:f19add1: import java.util.concurrent.atomic.AtomicBoolean;
1:89eecad: 
1:b6115cf: import javax.jms.Connection;
1:b6115cf: import javax.jms.ConnectionFactory;
1:b6115cf: import javax.jms.JMSException;
1:b6115cf: import javax.jms.Message;
1:b6115cf: import javax.jms.MessageConsumer;
1:b6115cf: import javax.jms.MessageProducer;
1:b6115cf: import javax.jms.Queue;
1:b6115cf: import javax.jms.Session;
1:b6115cf: import javax.jms.TextMessage;
1:b6115cf: import javax.management.MalformedObjectNameException;
1:b6115cf: import javax.management.ObjectName;
1:8363c99: 
1:b6115cf: import org.apache.activemq.ActiveMQConnectionFactory;
1:e8d9b70: import org.apache.activemq.CombinationTestSupport;
1:b6115cf: import org.apache.activemq.broker.BrokerService;
1:b6115cf: import org.apache.activemq.broker.jmx.QueueViewMBean;
1:89eecad: import org.apache.activemq.broker.region.policy.FilePendingQueueMessageStoragePolicy;
1:89eecad: import org.apache.activemq.broker.region.policy.PendingQueueMessageStoragePolicy;
1:89eecad: import org.apache.activemq.broker.region.policy.PolicyEntry;
1:89eecad: import org.apache.activemq.broker.region.policy.PolicyMap;
1:89eecad: import org.apache.activemq.store.kahadb.KahaDBPersistenceAdapter;
1:f19add1: import org.apache.activemq.util.DefaultTestAppender;
1:f19add1: import org.apache.log4j.Appender;
1:f19add1: import org.apache.log4j.Level;
1:f19add1: import org.apache.log4j.spi.LoggingEvent;
1:8bf987b: import org.slf4j.Logger;
1:8bf987b: import org.slf4j.LoggerFactory;
1:b6115cf: 
1:e8d9b70: public class QueuePurgeTest extends CombinationTestSupport {
1:8bf987b:     private static final Logger LOG = LoggerFactory.getLogger(QueuePurgeTest.class);
1:bedb207:     private static final int NUM_TO_SEND = 20000;
1:89eecad:     private final String MESSAGE_TEXT = new String(new byte[1024]);
1:b6115cf:     BrokerService broker;
1:b6115cf:     ConnectionFactory factory;
1:b6115cf:     Connection connection;
1:b6115cf:     Session session;
1:b6115cf:     Queue queue;
1:b6115cf:     MessageConsumer consumer;
1:b6115cf: 
1:8363c99:     @Override
1:b6115cf:     protected void setUp() throws Exception {
1:e8d9b70:         setMaxTestTime(10*60*1000); // 10 mins
1:e8d9b70:         setAutoFail(true);
1:e8d9b70:         super.setUp();
1:b6115cf:         broker = new BrokerService();
1:e8d9b70: 
1:e8d9b70:         File testDataDir = new File("target/activemq-data/QueuePurgeTest");
1:e8d9b70:         broker.setDataDirectoryFile(testDataDir);
1:b6115cf:         broker.setUseJmx(true);
1:89eecad:         broker.setDeleteAllMessagesOnStartup(true);
1:9815b9d:         broker.getSystemUsage().getMemoryUsage().setLimit(1024l*1024*64);
1:89eecad:         KahaDBPersistenceAdapter persistenceAdapter = new KahaDBPersistenceAdapter();
1:e8d9b70:         persistenceAdapter.setDirectory(new File(testDataDir, "kahadb"));
1:89eecad:         broker.setPersistenceAdapter(persistenceAdapter);
1:b6115cf:         broker.addConnector("tcp://localhost:0");
1:b6115cf:         broker.start();
1:89eecad:         factory = new ActiveMQConnectionFactory(broker.getTransportConnectors().get(0).getConnectUri().toString());
1:b6115cf:         connection = factory.createConnection();
1:b6115cf:         connection.start();
1:b6115cf:     }
1:b6115cf: 
1:8363c99:     @Override
1:b6115cf:     protected void tearDown() throws Exception {
1:e8d9b70:         super.tearDown();
1:89eecad:         if (consumer != null) {
1:b6115cf:             consumer.close();
1:89eecad:         }
1:b6115cf:         session.close();
1:b6115cf:         connection.stop();
1:b6115cf:         connection.close();
1:b6115cf:         broker.stop();
1:b6115cf:     }
1:b6115cf: 
1:e8d9b70:     public void testPurgeLargeQueue() throws Exception {
1:8363c99:         testPurgeLargeQueue(false);
1:8363c99:     }
1:8363c99: 
1:8363c99:     public void testPurgeLargeQueuePrioritizedMessages() throws Exception {
1:8363c99:         testPurgeLargeQueue(true);
1:8363c99:     }
1:8363c99: 
1:8363c99:     private void testPurgeLargeQueue(boolean prioritizedMessages) throws Exception {
1:8363c99:         applyBrokerSpoolingPolicy(prioritizedMessages);
1:e8d9b70:         createProducerAndSendMessages(NUM_TO_SEND);
1:b6115cf:         QueueViewMBean proxy = getProxyToQueueViewMBean();
1:89eecad:         LOG.info("purging..");
1:f19add1: 
1:23ecbe8:         org.apache.log4j.Logger log4jLogger = org.apache.log4j.Logger.getLogger(org.apache.activemq.broker.jmx.QueueView.class);
1:f19add1:         final AtomicBoolean gotPurgeLogMessage = new AtomicBoolean(false);
1:f19add1: 
1:f19add1:         Appender appender = new DefaultTestAppender() {
1:f19add1:             @Override
1:f19add1:             public void doAppend(LoggingEvent event) {
1:f19add1:                 if (event.getMessage() instanceof String) {
1:f19add1:                     String message = (String) event.getMessage();
1:23ecbe8:                     if (message.contains("purge of " + NUM_TO_SEND +" messages")) {
1:f19add1:                         LOG.info("Received a log message: {} ", event.getMessage());
1:f19add1:                         gotPurgeLogMessage.set(true);
1:f19add1:                     }
1:f19add1:                 }
1:f19add1:             }
1:f19add1:         };
1:f19add1: 
1:f19add1:         Level level = log4jLogger.getLevel();
1:f19add1:         log4jLogger.setLevel(Level.INFO);
1:f19add1:         log4jLogger.addAppender(appender);
1:f19add1:         try {
1:f19add1: 
1:f19add1:             proxy.purge();
1:f19add1: 
1:f19add1:         } finally {
1:f19add1:             log4jLogger.setLevel(level);
1:f19add1:             log4jLogger.removeAppender(appender);
1:f19add1:         }
1:f19add1: 
2:89eecad:         assertEquals("Queue size is not zero, it's " + proxy.getQueueSize(), 0,
2:89eecad:                 proxy.getQueueSize());
1:aad7e73:         assertTrue("cache is disabled, temp store being used", !proxy.isCacheEnabled());
1:f19add1:         assertTrue("got expected info purge log message", gotPurgeLogMessage.get());
1:8363c99:         assertEquals("Found messages when browsing", 0, proxy.browseMessages().size());
1:89eecad:     }
1:3536b1e: 
1:8363c99:     public void testRepeatedExpiryProcessingOfLargeQueue() throws Exception {
1:8363c99:         applyBrokerSpoolingPolicy(false);
1:bedb207:         final int expiryPeriod = 500;
1:bedb207:         applyExpiryDuration(expiryPeriod);
1:e8d9b70:         createProducerAndSendMessages(NUM_TO_SEND);
1:56bb079:         QueueViewMBean proxy = getProxyToQueueViewMBean();
1:3536b1e:         LOG.info("waiting for expiry to kick in a bunch of times to verify it does not blow mem");
1:bedb207:         Thread.sleep(5000);
1:e8d9b70:         assertEquals("Queue size is has not changed " + proxy.getQueueSize(), NUM_TO_SEND,
1:3536b1e:                 proxy.getQueueSize());
1:3536b1e:     }
1:8363c99: 
1:3536b1e: 
1:3536b1e:     private void applyExpiryDuration(int i) {
1:3536b1e:         broker.getDestinationPolicy().getDefaultEntry().setExpireMessagesPeriod(i);
1:3536b1e:     }
1:3536b1e: 
1:8363c99:     private void applyBrokerSpoolingPolicy(boolean prioritizedMessages) {
1:89eecad:         PolicyMap policyMap = new PolicyMap();
1:89eecad:         PolicyEntry defaultEntry = new PolicyEntry();
1:8363c99:         defaultEntry.setPrioritizedMessages(prioritizedMessages);
1:89eecad:         defaultEntry.setProducerFlowControl(false);
1:89eecad:         PendingQueueMessageStoragePolicy pendingQueuePolicy = new FilePendingQueueMessageStoragePolicy();
1:89eecad:         defaultEntry.setPendingQueuePolicy(pendingQueuePolicy);
1:89eecad:         policyMap.setDefaultEntry(defaultEntry);
1:89eecad:         broker.setDestinationPolicy(policyMap);
1:89eecad:     }
1:8363c99: 
2:89eecad: 
1:8363c99:     public void testPurgeLargeQueueWithConsumer() throws Exception {
1:8363c99:         testPurgeLargeQueueWithConsumer(false);
1:8363c99:     }
1:8363c99: 
1:8363c99:     public void testPurgeLargeQueueWithConsumerPrioritizedMessages() throws Exception {
1:8363c99:         testPurgeLargeQueueWithConsumer(true);
1:8363c99:     }
1:8363c99: 
1:56bb079:     public void testConcurrentPurgeAndSend() throws Exception {
1:56bb079:         testConcurrentPurgeAndSend(false);
1:56bb079:     }
1:56bb079: 
1:56bb079:     public void testConcurrentPurgeAndSendPrioritizedMessages() throws Exception {
1:56bb079:         testConcurrentPurgeAndSend(true);
1:56bb079:     }
1:56bb079: 
1:56bb079:     private void testConcurrentPurgeAndSend(boolean prioritizedMessages) throws Exception {
1:56bb079:         applyBrokerSpoolingPolicy(false);
1:56bb079:         createProducerAndSendMessages(NUM_TO_SEND / 2);
1:f094937:         final QueueViewMBean proxy = getProxyToQueueViewMBean();
1:56bb079:         createConsumer();
1:f094937:         final long start = System.currentTimeMillis();
1:56bb079:         ExecutorService service = Executors.newFixedThreadPool(1);
1:56bb079:         try {
1:56bb079:             LOG.info("purging..");
1:56bb079:             service.submit(new Runnable() {
1:56bb079: 
1:56bb079:                 @Override
1:56bb079:                 public void run() {
1:56bb079:                     try {
1:56bb079:                         proxy.purge();
1:56bb079:                     } catch (Exception e) {
1:56bb079:                         fail(e.getMessage());
1:56bb079:                     }
1:56bb079:                     LOG.info("purge done: " + (System.currentTimeMillis() - start) + "ms");
1:56bb079:                 }
1:56bb079:             });
1:56bb079: 
1:56bb079:             //send should get blocked while purge is running
1:56bb079:             //which should ensure the metrics are correct
1:56bb079:             createProducerAndSendMessages(NUM_TO_SEND / 2);
1:56bb079: 
1:56bb079:             Message msg;
1:56bb079:             do {
1:56bb079:                 msg = consumer.receive(1000);
1:56bb079:                 if (msg != null) {
1:56bb079:                     msg.acknowledge();
1:56bb079:                 }
1:56bb079:             } while (msg != null);
1:56bb079:             assertEquals("Queue size not valid", 0, proxy.getQueueSize());
1:56bb079:             assertEquals("Found messages when browsing", 0, proxy.browseMessages().size());
1:56bb079:         } finally {
1:56bb079:             service.shutdownNow();
1:56bb079:         }
1:56bb079:     }
1:56bb079: 
1:8363c99:     private void testPurgeLargeQueueWithConsumer(boolean prioritizedMessages) throws Exception {
1:8363c99:         applyBrokerSpoolingPolicy(prioritizedMessages);
1:e8d9b70:         createProducerAndSendMessages(NUM_TO_SEND);
1:3536b1e:         QueueViewMBean proxy = getProxyToQueueViewMBean();
1:b6115cf:         createConsumer();
1:56bb079:         long start = System.currentTimeMillis();
1:89eecad:         LOG.info("purging..");
1:b6115cf:         proxy.purge();
1:89eecad:         LOG.info("purge done: " + (System.currentTimeMillis() - start) + "ms");
1:b6115cf:         assertEquals("Queue size is not zero, it's " + proxy.getQueueSize(), 0,
1:b6115cf:                 proxy.getQueueSize());
1:af31f2d:         assertEquals("usage goes to duck", 0, proxy.getMemoryPercentUsage());
1:e3fb8be:         Message msg;
1:e3fb8be:         do {
1:e3fb8be:             msg = consumer.receive(1000);
1:e3fb8be:             if (msg != null) {
1:e3fb8be:                 msg.acknowledge();
1:e3fb8be:             }
1:e3fb8be:         } while (msg != null);
1:e3fb8be:         assertEquals("Queue size not valid", 0, proxy.getQueueSize());
1:8363c99:         assertEquals("Found messages when browsing", 0, proxy.browseMessages().size());
1:b6115cf:     }
1:b6115cf: 
1:b6115cf:     private QueueViewMBean getProxyToQueueViewMBean()
1:b6115cf:             throws MalformedObjectNameException, JMSException {
1:cb7b657:         ObjectName queueViewMBeanName =
1:cb7b657:                 new ObjectName("org.apache.activemq:type=Broker,brokerName=localhost,destinationType=Queue,destinationName="
1:cb7b657:                 + queue.getQueueName());
1:1ec71bd:         QueueViewMBean proxy = (QueueViewMBean) broker.getManagementContext()
1:1ec71bd:                 .newProxyInstance(queueViewMBeanName,
1:b6115cf:                         QueueViewMBean.class, true);
1:b6115cf:         return proxy;
1:b6115cf:     }
1:b6115cf: 
1:89eecad:     private void createProducerAndSendMessages(int numToSend) throws Exception {
1:b6115cf:         session = connection.createSession(false, Session.CLIENT_ACKNOWLEDGE);
1:b6115cf:         queue = session.createQueue("test1");
1:b6115cf:         MessageProducer producer = session.createProducer(queue);
1:89eecad:         for (int i = 0; i < numToSend; i++) {
1:89eecad:             TextMessage message = session.createTextMessage(MESSAGE_TEXT + i);
1:e8d9b70:             if (i  != 0 && i % 10000 == 0) {
1:89eecad:                 LOG.info("sent: " + i);
1:89eecad:             }
1:b6115cf:             producer.send(message);
1:b6115cf:         }
1:b6115cf:         producer.close();
1:b6115cf:     }
1:b6115cf: 
1:b6115cf:     private void createConsumer() throws Exception {
1:b6115cf:         consumer = session.createConsumer(queue);
1:b6115cf:         // wait for buffer fill out
1:b6115cf:         Thread.sleep(5 * 1000);
1:89eecad:         for (int i = 0; i < 500; ++i) {
1:b6115cf:             Message message = consumer.receive();
1:b6115cf:             message.acknowledge();
1:b6115cf:         }
1:b6115cf:     }
1:b6115cf: }
============================================================================
author:Krzysztof Sobkowiak
-------------------------------------------------------------------------------
commit:f094937
/////////////////////////////////////////////////////////////////////////
1:         final QueueViewMBean proxy = getProxyToQueueViewMBean();
1:         final long start = System.currentTimeMillis();
author:Christopher L. Shannon (cshannon)
-------------------------------------------------------------------------------
commit:56bb079
/////////////////////////////////////////////////////////////////////////
1: import java.util.concurrent.ExecutorService;
1: import java.util.concurrent.Executors;
/////////////////////////////////////////////////////////////////////////
1:     public void testConcurrentPurgeAndSend() throws Exception {
1:         testConcurrentPurgeAndSend(false);
1:     }
1: 
1:     public void testConcurrentPurgeAndSendPrioritizedMessages() throws Exception {
1:         testConcurrentPurgeAndSend(true);
1:     }
1: 
1:     private void testConcurrentPurgeAndSend(boolean prioritizedMessages) throws Exception {
1:         applyBrokerSpoolingPolicy(false);
1:         createProducerAndSendMessages(NUM_TO_SEND / 2);
1:         QueueViewMBean proxy = getProxyToQueueViewMBean();
1:         createConsumer();
1:         long start = System.currentTimeMillis();
1:         ExecutorService service = Executors.newFixedThreadPool(1);
1:         try {
1:             LOG.info("purging..");
1:             service.submit(new Runnable() {
1: 
1:                 @Override
1:                 public void run() {
1:                     try {
1:                         proxy.purge();
1:                     } catch (Exception e) {
1:                         fail(e.getMessage());
1:                     }
1:                     LOG.info("purge done: " + (System.currentTimeMillis() - start) + "ms");
1:                 }
1:             });
1: 
1:             //send should get blocked while purge is running
1:             //which should ensure the metrics are correct
1:             createProducerAndSendMessages(NUM_TO_SEND / 2);
1: 
1:             Message msg;
1:             do {
1:                 msg = consumer.receive(1000);
1:                 if (msg != null) {
1:                     msg.acknowledge();
1:                 }
1:             } while (msg != null);
1:             assertEquals("Queue size not valid", 0, proxy.getQueueSize());
1:             assertEquals("Found messages when browsing", 0, proxy.browseMessages().size());
1:         } finally {
1:             service.shutdownNow();
1:         }
1:     }
1: 
commit:8363c99
/////////////////////////////////////////////////////////////////////////
1: 
/////////////////////////////////////////////////////////////////////////
1:     @Override
/////////////////////////////////////////////////////////////////////////
1:     @Override
/////////////////////////////////////////////////////////////////////////
1:         testPurgeLargeQueue(false);
1:     }
1: 
1:     public void testPurgeLargeQueuePrioritizedMessages() throws Exception {
1:         testPurgeLargeQueue(true);
1:     }
1: 
1:     private void testPurgeLargeQueue(boolean prioritizedMessages) throws Exception {
1:         applyBrokerSpoolingPolicy(prioritizedMessages);
/////////////////////////////////////////////////////////////////////////
1:         assertEquals("Found messages when browsing", 0, proxy.browseMessages().size());
1:     public void testRepeatedExpiryProcessingOfLargeQueue() throws Exception {
1:         applyBrokerSpoolingPolicy(false);
/////////////////////////////////////////////////////////////////////////
1: 
1:     private void applyBrokerSpoolingPolicy(boolean prioritizedMessages) {
1:         defaultEntry.setPrioritizedMessages(prioritizedMessages);
/////////////////////////////////////////////////////////////////////////
1: 
1:     public void testPurgeLargeQueueWithConsumer() throws Exception {
1:         testPurgeLargeQueueWithConsumer(false);
1:     }
1: 
1:     public void testPurgeLargeQueueWithConsumerPrioritizedMessages() throws Exception {
1:         testPurgeLargeQueueWithConsumer(true);
1:     }
1: 
1:     private void testPurgeLargeQueueWithConsumer(boolean prioritizedMessages) throws Exception {
1:         applyBrokerSpoolingPolicy(prioritizedMessages);
/////////////////////////////////////////////////////////////////////////
1:         assertEquals("Found messages when browsing", 0, proxy.browseMessages().size());
author:gtully
-------------------------------------------------------------------------------
commit:23ecbe8
/////////////////////////////////////////////////////////////////////////
1:         org.apache.log4j.Logger log4jLogger = org.apache.log4j.Logger.getLogger(org.apache.activemq.broker.jmx.QueueView.class);
/////////////////////////////////////////////////////////////////////////
1:                     if (message.contains("purge of " + NUM_TO_SEND +" messages")) {
commit:bedb207
/////////////////////////////////////////////////////////////////////////
1:     private static final int NUM_TO_SEND = 20000;
/////////////////////////////////////////////////////////////////////////
1:         final int expiryPeriod = 500;
1:         applyExpiryDuration(expiryPeriod);
1:         Thread.sleep(5000);
commit:f19add1
/////////////////////////////////////////////////////////////////////////
1: import java.util.concurrent.atomic.AtomicBoolean;
/////////////////////////////////////////////////////////////////////////
1: import org.apache.activemq.util.DefaultTestAppender;
1: import org.apache.log4j.Appender;
1: import org.apache.log4j.Level;
1: import org.apache.log4j.spi.LoggingEvent;
/////////////////////////////////////////////////////////////////////////
1: 
0:         org.apache.log4j.Logger log4jLogger = org.apache.log4j.Logger.getLogger(org.apache.activemq.broker.region.Queue.class);
1:         final AtomicBoolean gotPurgeLogMessage = new AtomicBoolean(false);
1: 
1:         Appender appender = new DefaultTestAppender() {
1:             @Override
1:             public void doAppend(LoggingEvent event) {
1:                 if (event.getMessage() instanceof String) {
1:                     String message = (String) event.getMessage();
0:                     if (message.contains("purged of " + NUM_TO_SEND +" messages")) {
1:                         LOG.info("Received a log message: {} ", event.getMessage());
1:                         gotPurgeLogMessage.set(true);
1:                     }
1:                 }
1:             }
1:         };
1: 
1:         Level level = log4jLogger.getLevel();
1:         log4jLogger.setLevel(Level.INFO);
1:         log4jLogger.addAppender(appender);
1:         try {
1: 
1:             proxy.purge();
1: 
1:         } finally {
1:             log4jLogger.setLevel(level);
1:             log4jLogger.removeAppender(appender);
1:         }
1: 
1:         assertTrue("got expected info purge log message", gotPurgeLogMessage.get());
commit:9815b9d
/////////////////////////////////////////////////////////////////////////
1:         broker.getSystemUsage().getMemoryUsage().setLimit(1024l*1024*64);
author:Bosanac Dejan
-------------------------------------------------------------------------------
commit:e3fb8be
/////////////////////////////////////////////////////////////////////////
1:         Message msg;
1:         do {
1:             msg = consumer.receive(1000);
1:             if (msg != null) {
1:                 msg.acknowledge();
1:             }
1:         } while (msg != null);
1:         assertEquals("Queue size not valid", 0, proxy.getQueueSize());
commit:8bf987b
/////////////////////////////////////////////////////////////////////////
1: import org.slf4j.Logger;
1: import org.slf4j.LoggerFactory;
1:     private static final Logger LOG = LoggerFactory.getLogger(QueuePurgeTest.class);
author:Timothy A. Bish
-------------------------------------------------------------------------------
commit:ef24cc9
author:Robert Davies
-------------------------------------------------------------------------------
commit:cb7b657
/////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////
1:         ObjectName queueViewMBeanName =
1:                 new ObjectName("org.apache.activemq:type=Broker,brokerName=localhost,destinationType=Queue,destinationName="
1:                 + queue.getQueueName());
commit:1ec71bd
/////////////////////////////////////////////////////////////////////////
1:         QueueViewMBean proxy = (QueueViewMBean) broker.getManagementContext()
1:                 .newProxyInstance(queueViewMBeanName,
commit:b6115cf
/////////////////////////////////////////////////////////////////////////
1: /**
1:  * Licensed to the Apache Software Foundation (ASF) under one or more
1:  * contributor license agreements.  See the NOTICE file distributed with
1:  * this work for additional information regarding copyright ownership.
1:  * The ASF licenses this file to You under the Apache License, Version 2.0
1:  * (the "License"); you may not use this file except in compliance with
1:  * the License.  You may obtain a copy of the License at
1:  *
1:  *      http://www.apache.org/licenses/LICENSE-2.0
1:  *
1:  * Unless required by applicable law or agreed to in writing, software
1:  * distributed under the License is distributed on an "AS IS" BASIS,
1:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:  * See the License for the specific language governing permissions and
1:  * limitations under the License.
1:  */
1: package org.apache.activemq.broker.region;
1: 
1: import javax.jms.Connection;
1: import javax.jms.ConnectionFactory;
1: import javax.jms.JMSException;
1: import javax.jms.Message;
1: import javax.jms.MessageConsumer;
1: import javax.jms.MessageProducer;
1: import javax.jms.Queue;
1: import javax.jms.Session;
1: import javax.jms.TextMessage;
0: import javax.management.MBeanServerInvocationHandler;
1: import javax.management.MalformedObjectNameException;
1: import javax.management.ObjectName;
0: import junit.framework.TestCase;
1: import org.apache.activemq.ActiveMQConnectionFactory;
1: import org.apache.activemq.broker.BrokerService;
1: import org.apache.activemq.broker.jmx.QueueViewMBean;
1: 
0: public class QueuePurgeTest extends TestCase {
1:     BrokerService broker;
1:     ConnectionFactory factory;
1:     Connection connection;
1:     Session session;
1:     Queue queue;
1:     MessageConsumer consumer;
1: 
1:     protected void setUp() throws Exception {
1:         broker = new BrokerService();
1:         broker.setUseJmx(true);
0:         broker.setPersistent(false);
1:         broker.addConnector("tcp://localhost:0");
1:         broker.start();
0:         factory = new ActiveMQConnectionFactory("vm://localhost");
1:         connection = factory.createConnection();
1:         connection.start();
1:     }
1: 
1:     protected void tearDown() throws Exception {
1:         consumer.close();
1:         session.close();
1:         connection.stop();
1:         connection.close();
1:         broker.stop();
1:     }
1: 
0:     public void testPurgeQueueWithActiveConsumer() throws Exception {
0:         createProducerAndSendMessages();
1:         QueueViewMBean proxy = getProxyToQueueViewMBean();
1:         createConsumer();
1:         proxy.purge();
1:         assertEquals("Queue size is not zero, it's " + proxy.getQueueSize(), 0,
1:                 proxy.getQueueSize());
1:     }
1: 
1:     private QueueViewMBean getProxyToQueueViewMBean()
1:             throws MalformedObjectNameException, JMSException {
0:         ObjectName queueViewMBeanName = new ObjectName("org.apache.activemq"
0:                 + ":Type=Queue,Destination=" + queue.getQueueName()
0:                 + ",BrokerName=localhost");
0:         QueueViewMBean proxy = (QueueViewMBean) MBeanServerInvocationHandler
0:                 .newProxyInstance(broker.getManagementContext()
0:                         .getMBeanServer(), queueViewMBeanName,
1:                         QueueViewMBean.class, true);
1:         return proxy;
1:     }
1: 
0:     private void createProducerAndSendMessages() throws Exception {
1:         session = connection.createSession(false, Session.CLIENT_ACKNOWLEDGE);
1:         queue = session.createQueue("test1");
1:         MessageProducer producer = session.createProducer(queue);
0:         for (int i = 0; i < 10000; i++) {
0:             TextMessage message = session.createTextMessage("message " + i);
1:             producer.send(message);
1:         }
1:         producer.close();
1:     }
1: 
1:     private void createConsumer() throws Exception {
1:         consumer = session.createConsumer(queue);
1:         // wait for buffer fill out
1:         Thread.sleep(5 * 1000);
0:         for (int i = 0; i < 100; ++i) {
1:             Message message = consumer.receive();
1:             message.acknowledge();
1:         }
1:     }
1: }
author:Gary Tully
-------------------------------------------------------------------------------
commit:e8d9b70
/////////////////////////////////////////////////////////////////////////
1: import org.apache.activemq.CombinationTestSupport;
0: import org.apache.activemq.broker.BrokerTestSupport;
/////////////////////////////////////////////////////////////////////////
1: public class QueuePurgeTest extends CombinationTestSupport {
0:     private static final int NUM_TO_SEND = 40000;
/////////////////////////////////////////////////////////////////////////
1:         setMaxTestTime(10*60*1000); // 10 mins
1:         setAutoFail(true);
1:         super.setUp();
1: 
1:         File testDataDir = new File("target/activemq-data/QueuePurgeTest");
1:         broker.setDataDirectoryFile(testDataDir);
1:         persistenceAdapter.setDirectory(new File(testDataDir, "kahadb"));
/////////////////////////////////////////////////////////////////////////
1:         super.tearDown();
/////////////////////////////////////////////////////////////////////////
1:     public void testPurgeLargeQueue() throws Exception {
1:         createProducerAndSendMessages(NUM_TO_SEND);
/////////////////////////////////////////////////////////////////////////
1:         createProducerAndSendMessages(NUM_TO_SEND);
1:         assertEquals("Queue size is has not changed " + proxy.getQueueSize(), NUM_TO_SEND,
/////////////////////////////////////////////////////////////////////////
1:         createProducerAndSendMessages(NUM_TO_SEND);
/////////////////////////////////////////////////////////////////////////
1:             if (i  != 0 && i % 10000 == 0) {
commit:aad7e73
/////////////////////////////////////////////////////////////////////////
1:         assertTrue("cache is disabled, temp store being used", !proxy.isCacheEnabled());
commit:af31f2d
/////////////////////////////////////////////////////////////////////////
1:         assertEquals("usage goes to duck", 0, proxy.getMemoryPercentUsage());
commit:3536b1e
/////////////////////////////////////////////////////////////////////////
0:     public void testRepeatedExpiryProcessingOfLargeQueue() throws Exception {       
0:         applyBrokerSpoolingPolicy();
0:         final int exprityPeriod = 1000;
0:         applyExpiryDuration(exprityPeriod);
0:         createProducerAndSendMessages(90000);
1:         QueueViewMBean proxy = getProxyToQueueViewMBean();
1:         LOG.info("waiting for expiry to kick in a bunch of times to verify it does not blow mem");
0:         Thread.sleep(10000);
0:         assertEquals("Queue size is has not changed " + proxy.getQueueSize(), 90000,
1:                 proxy.getQueueSize());
1:     }
1:     
1: 
1:     private void applyExpiryDuration(int i) {
1:         broker.getDestinationPolicy().getDefaultEntry().setExpireMessagesPeriod(i);
1:     }
1: 
commit:89eecad
/////////////////////////////////////////////////////////////////////////
1: import java.io.File;
1: 
/////////////////////////////////////////////////////////////////////////
1: 
1: 
1: import org.apache.activemq.broker.region.policy.FilePendingQueueMessageStoragePolicy;
1: import org.apache.activemq.broker.region.policy.PendingQueueMessageStoragePolicy;
1: import org.apache.activemq.broker.region.policy.PolicyEntry;
1: import org.apache.activemq.broker.region.policy.PolicyMap;
1: import org.apache.activemq.store.kahadb.KahaDBPersistenceAdapter;
0: import org.apache.commons.logging.Log;
0: import org.apache.commons.logging.LogFactory;
0:     private static final Log LOG = LogFactory.getLog(QueuePurgeTest.class);
1:     private final String MESSAGE_TEXT = new String(new byte[1024]);
/////////////////////////////////////////////////////////////////////////
0:         broker.setDataDirectory("target/activemq-data");
1:         broker.setDeleteAllMessagesOnStartup(true);
1:         KahaDBPersistenceAdapter persistenceAdapter = new KahaDBPersistenceAdapter();
0:         persistenceAdapter.setDirectory(new File("target/activemq-data/kahadb/QueuePurgeTest"));
1:         broker.setPersistenceAdapter(persistenceAdapter);
1:         factory = new ActiveMQConnectionFactory(broker.getTransportConnectors().get(0).getConnectUri().toString());
1:         if (consumer != null) {
0:             consumer.close();
1:         }
/////////////////////////////////////////////////////////////////////////
0:         createProducerAndSendMessages(10000);
0:     
0:     
0:     public void testPurgeLargeQueue() throws Exception {       
0:         applyBrokerSpoolingPolicy();
0:         createProducerAndSendMessages(90000);
0:         QueueViewMBean proxy = getProxyToQueueViewMBean();
1:         LOG.info("purging..");
0:         proxy.purge();
1:         assertEquals("Queue size is not zero, it's " + proxy.getQueueSize(), 0,
1:                 proxy.getQueueSize());
1:     }
0: 
0:     private void applyBrokerSpoolingPolicy() {
1:         PolicyMap policyMap = new PolicyMap();
1:         PolicyEntry defaultEntry = new PolicyEntry();
1:         defaultEntry.setProducerFlowControl(false);
1:         PendingQueueMessageStoragePolicy pendingQueuePolicy = new FilePendingQueueMessageStoragePolicy();
1:         defaultEntry.setPendingQueuePolicy(pendingQueuePolicy);
1:         policyMap.setDefaultEntry(defaultEntry);
1:         broker.setDestinationPolicy(policyMap);
1:     }
0: 
0:     
0:     public void testPurgeLargeQueueWithConsumer() throws Exception {       
0:         applyBrokerSpoolingPolicy();
0:         createProducerAndSendMessages(90000);
0:         QueueViewMBean proxy = getProxyToQueueViewMBean();
0:         createConsumer();
0:         long start = System.currentTimeMillis();
1:         LOG.info("purging..");
0:         proxy.purge();
1:         LOG.info("purge done: " + (System.currentTimeMillis() - start) + "ms");
1:         assertEquals("Queue size is not zero, it's " + proxy.getQueueSize(), 0,
1:                 proxy.getQueueSize());
1:     }
/////////////////////////////////////////////////////////////////////////
1:     private void createProducerAndSendMessages(int numToSend) throws Exception {
1:         for (int i = 0; i < numToSend; i++) {
1:             TextMessage message = session.createTextMessage(MESSAGE_TEXT + i);
0:             if (i  != 0 && i % 50000 == 0) {
1:                 LOG.info("sent: " + i);
0:             }
/////////////////////////////////////////////////////////////////////////
1:         for (int i = 0; i < 500; ++i) {
============================================================================