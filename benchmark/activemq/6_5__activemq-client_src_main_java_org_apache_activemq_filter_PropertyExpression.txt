1:d29ca2a: /**
1:57b4941:  * Licensed to the Apache Software Foundation (ASF) under one or more
1:57b4941:  * contributor license agreements.  See the NOTICE file distributed with
1:57b4941:  * this work for additional information regarding copyright ownership.
1:57b4941:  * The ASF licenses this file to You under the Apache License, Version 2.0
1:57b4941:  * (the "License"); you may not use this file except in compliance with
1:57b4941:  * the License.  You may obtain a copy of the License at
5:d29ca2a:  *
1:230a86c:  *      http://www.apache.org/licenses/LICENSE-2.0
1:b0c2a40:  *
1:d29ca2a:  * Unless required by applicable law or agreed to in writing, software
1:d29ca2a:  * distributed under the License is distributed on an "AS IS" BASIS,
1:d29ca2a:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:d29ca2a:  * See the License for the specific language governing permissions and
1:d29ca2a:  * limitations under the License.
1:d29ca2a:  */
1:d29ca2a: 
1:d29ca2a: package org.apache.activemq.filter;
1:d29ca2a: 
1:d29ca2a: import java.io.IOException;
1:6f124c1: import java.util.Arrays;
1:d29ca2a: import java.util.HashMap;
1:ecf89a6: import java.util.Map;
1:d29ca2a: 
1:d29ca2a: import javax.jms.JMSException;
1:d29ca2a: 
1:d29ca2a: import org.apache.activemq.command.ActiveMQDestination;
1:d29ca2a: import org.apache.activemq.command.Message;
1:d29ca2a: import org.apache.activemq.command.TransactionId;
1:d29ca2a: import org.apache.activemq.util.JMSExceptionSupport;
1:d29ca2a: 
1:d29ca2a: /**
1:f812e34:  * Represents a property expression
1:d29ca2a:  */
1:d29ca2a: public class PropertyExpression implements Expression {
1:d29ca2a: 
1:ecf89a6:     private static final Map<String, SubExpression> JMS_PROPERTY_EXPRESSIONS = new HashMap<String, SubExpression>();
1:ecf89a6: 
1:d29ca2a:     interface SubExpression {
1:fc00993:         Object evaluate(Message message);
1:d29ca2a:     }
1:d29ca2a: 
1:f812e34:     static {
1:f812e34:         JMS_PROPERTY_EXPRESSIONS.put("JMSDestination", new SubExpression() {
1:f812e34: 
1:3ff2d92:             @Override
1:f812e34:             public Object evaluate(Message message) {
1:f812e34:                 ActiveMQDestination dest = message.getOriginalDestination();
1:ecf89a6:                 if (dest == null) {
1:f812e34:                     dest = message.getDestination();
1:ecf89a6:                 }
1:ecf89a6:                 if (dest == null) {
1:d29ca2a:                     return null;
1:ecf89a6:                 }
1:d29ca2a:                 return dest.toString();
1:d29ca2a:             }
1:d29ca2a:         });
1:f812e34:         JMS_PROPERTY_EXPRESSIONS.put("JMSReplyTo", new SubExpression() {
10:ec6a702: 
1:3ff2d92:             @Override
1:f812e34:             public Object evaluate(Message message) {
1:ecf89a6:                 if (message.getReplyTo() == null) {
1:d29ca2a:                     return null;
1:ecf89a6:                 }
1:d29ca2a:                 return message.getReplyTo().toString();
1:d29ca2a:             }
1:d29ca2a:         });
1:f812e34:         JMS_PROPERTY_EXPRESSIONS.put("JMSType", new SubExpression() {
1:ec6a702: 
1:3ff2d92:             @Override
1:f812e34:             public Object evaluate(Message message) {
1:d29ca2a:                 return message.getType();
1:d29ca2a:             }
1:d29ca2a:         });
1:f812e34:         JMS_PROPERTY_EXPRESSIONS.put("JMSDeliveryMode", new SubExpression() {
1:ec6a702: 
1:3ff2d92:             @Override
1:f812e34:             public Object evaluate(Message message) {
1:b4a2925:                 return message.isPersistent() ? "PERSISTENT" : "NON_PERSISTENT";
1:d29ca2a:             }
1:d29ca2a:         });
1:f812e34:         JMS_PROPERTY_EXPRESSIONS.put("JMSPriority", new SubExpression() {
1:ec6a702: 
1:3ff2d92:             @Override
1:f812e34:             public Object evaluate(Message message) {
1:d36c0d4:                 return Integer.valueOf(message.getPriority());
1:d29ca2a:             }
1:d29ca2a:         });
1:f812e34:         JMS_PROPERTY_EXPRESSIONS.put("JMSMessageID", new SubExpression() {
1:ec6a702: 
1:3ff2d92:             @Override
1:f812e34:             public Object evaluate(Message message) {
1:ecf89a6:                 if (message.getMessageId() == null) {
1:d29ca2a:                     return null;
1:ecf89a6:                 }
1:d29ca2a:                 return message.getMessageId().toString();
1:d29ca2a:             }
1:d29ca2a:         });
1:f812e34:         JMS_PROPERTY_EXPRESSIONS.put("JMSTimestamp", new SubExpression() {
1:ec6a702: 
1:3ff2d92:             @Override
1:f812e34:             public Object evaluate(Message message) {
1:d36c0d4:                 return Long.valueOf(message.getTimestamp());
1:d29ca2a:             }
1:d29ca2a:         });
1:f812e34:         JMS_PROPERTY_EXPRESSIONS.put("JMSCorrelationID", new SubExpression() {
1:ec6a702: 
1:3ff2d92:             @Override
1:f812e34:             public Object evaluate(Message message) {
1:d29ca2a:                 return message.getCorrelationId();
1:d29ca2a:             }
1:d29ca2a:         });
1:f812e34:         JMS_PROPERTY_EXPRESSIONS.put("JMSExpiration", new SubExpression() {
1:d29ca2a: 
1:3ff2d92:             @Override
1:f812e34:             public Object evaluate(Message message) {
1:d36c0d4:                 return Long.valueOf(message.getExpiration());
1:d29ca2a:             }
1:d29ca2a:         });
1:f812e34:         JMS_PROPERTY_EXPRESSIONS.put("JMSRedelivered", new SubExpression() {
1:d29ca2a: 
1:3ff2d92:             @Override
1:f812e34:             public Object evaluate(Message message) {
1:d36c0d4:                 return Boolean.valueOf(message.isRedelivered());
1:d29ca2a:             }
1:d29ca2a:         });
1:f812e34:         JMS_PROPERTY_EXPRESSIONS.put("JMSXDeliveryCount", new SubExpression() {
1:d29ca2a: 
1:3ff2d92:             @Override
1:f812e34:             public Object evaluate(Message message) {
1:f812e34:                 return Integer.valueOf(message.getRedeliveryCounter() + 1);
1:d29ca2a:             }
1:d29ca2a:         });
1:f812e34:         JMS_PROPERTY_EXPRESSIONS.put("JMSXGroupID", new SubExpression() {
1:d29ca2a: 
1:3ff2d92:             @Override
1:f812e34:             public Object evaluate(Message message) {
1:d29ca2a:                 return message.getGroupID();
1:d29ca2a:             }
1:d29ca2a:         });
1:067660c:         JMS_PROPERTY_EXPRESSIONS.put("JMSXUserID", new SubExpression() {
1:067660c: 
1:067660c:             @Override
1:067660c:             public Object evaluate(Message message) {
1:97e1edc:                 Object userId = message.getUserID();
1:97e1edc:                 if (userId == null) {
1:97e1edc:                     try {
1:97e1edc:                         userId = message.getProperty("JMSXUserID");
1:97e1edc:                     } catch (IOException e) {
1:97e1edc:                     }
1:97e1edc:                 }
1:97e1edc: 
1:97e1edc:                 return userId;
1:067660c:             }
1:067660c:         });
1:f812e34:         JMS_PROPERTY_EXPRESSIONS.put("JMSXGroupSeq", new SubExpression() {
1:d29ca2a: 
1:3ff2d92:             @Override
1:f812e34:             public Object evaluate(Message message) {
1:d29ca2a:                 return new Integer(message.getGroupSequence());
1:d29ca2a:             }
1:d29ca2a:         });
1:f812e34:         JMS_PROPERTY_EXPRESSIONS.put("JMSXProducerTXID", new SubExpression() {
1:d29ca2a: 
1:3ff2d92:             @Override
1:f812e34:             public Object evaluate(Message message) {
1:f812e34:                 TransactionId txId = message.getOriginalTransactionId();
1:ecf89a6:                 if (txId == null) {
1:f812e34:                     txId = message.getTransactionId();
1:ecf89a6:                 }
1:ecf89a6:                 if (txId == null) {
1:d29ca2a:                     return null;
1:ecf89a6:                 }
1:3ff2d92:                 return txId.toString();
1:d29ca2a:             }
1:d29ca2a:         });
1:f812e34:         JMS_PROPERTY_EXPRESSIONS.put("JMSActiveMQBrokerInTime", new SubExpression() {
1:d29ca2a: 
1:3ff2d92:             @Override
1:f812e34:             public Object evaluate(Message message) {
1:c07b233:                 return Long.valueOf(message.getBrokerInTime());
1:d29ca2a:             }
1:d29ca2a:         });
1:f812e34:         JMS_PROPERTY_EXPRESSIONS.put("JMSActiveMQBrokerOutTime", new SubExpression() {
1:d29ca2a: 
1:3ff2d92:             @Override
1:f812e34:             public Object evaluate(Message message) {
1:c07b233:                 return Long.valueOf(message.getBrokerOutTime());
1:d29ca2a:             }
1:d29ca2a:         });
1:6f124c1:         JMS_PROPERTY_EXPRESSIONS.put("JMSActiveMQBrokerPath", new SubExpression() {
1:6f124c1: 
1:3ff2d92:             @Override
1:6f124c1:             public Object evaluate(Message message) {
1:6f124c1:                 return Arrays.toString(message.getBrokerPath());
1:6f124c1:             }
1:6f124c1:         });
1:dd91e85:         JMS_PROPERTY_EXPRESSIONS.put("JMSXGroupFirstForConsumer", new SubExpression() {
1:dd91e85: 
1:dd91e85:             @Override
1:dd91e85:             public Object evaluate(Message message) {
1:dd91e85:                 return Boolean.valueOf(message.isJMSXGroupFirstForConsumer());
1:dd91e85:             }
1:dd91e85:         });
1:d29ca2a:     }
1:f812e34: 
1:d29ca2a:     private final String name;
1:d29ca2a:     private final SubExpression jmsPropertyExpression;
1:f812e34: 
1:d29ca2a:     public PropertyExpression(String name) {
1:d29ca2a:         this.name = name;
1:ecf89a6:         jmsPropertyExpression = JMS_PROPERTY_EXPRESSIONS.get(name);
1:d29ca2a:     }
1:d29ca2a: 
1:3ff2d92:     @Override
1:d29ca2a:     public Object evaluate(MessageEvaluationContext message) throws JMSException {
1:d29ca2a:         try {
1:ecf89a6:             if (message.isDropped()) {
1:d29ca2a:                 return null;
1:ecf89a6:             }
1:f812e34: 
1:ecf89a6:             if (jmsPropertyExpression != null) {
1:d29ca2a:                 return jmsPropertyExpression.evaluate(message.getMessage());
1:ecf89a6:             }
1:d29ca2a:             try {
1:d29ca2a:                 return message.getMessage().getProperty(name);
1:d29ca2a:             } catch (IOException ioe) {
1:ecf89a6:                 throw JMSExceptionSupport.create("Could not get property: " + name + " reason: " + ioe.getMessage(), ioe);
1:d29ca2a:             }
1:d29ca2a:         } catch (IOException e) {
1:d29ca2a:             throw JMSExceptionSupport.create(e);
1:d29ca2a:         }
1:f812e34: 
1:d29ca2a:     }
1:d29ca2a: 
1:d29ca2a:     public Object evaluate(Message message) throws JMSException {
1:ecf89a6:         if (jmsPropertyExpression != null) {
1:d29ca2a:             return jmsPropertyExpression.evaluate(message);
1:ecf89a6:         }
1:d29ca2a:         try {
1:d29ca2a:             return message.getProperty(name);
1:d29ca2a:         } catch (IOException ioe) {
1:d29ca2a:             throw JMSExceptionSupport.create(ioe);
1:d29ca2a:         }
1:d29ca2a:     }
1:d29ca2a: 
1:d29ca2a:     public String getName() {
1:d29ca2a:         return name;
1:d29ca2a:     }
1:d29ca2a: 
1:d29ca2a:     /**
1:d29ca2a:      * @see java.lang.Object#toString()
1:d29ca2a:      */
1:3ff2d92:     @Override
1:d29ca2a:     public String toString() {
1:d29ca2a:         return name;
1:d29ca2a:     }
1:d29ca2a: 
1:d29ca2a:     /**
1:d29ca2a:      * @see java.lang.Object#hashCode()
1:d29ca2a:      */
1:3ff2d92:     @Override
1:d29ca2a:     public int hashCode() {
1:d29ca2a:         return name.hashCode();
1:d29ca2a:     }
1:d29ca2a: 
1:d29ca2a:     /**
1:d29ca2a:      * @see java.lang.Object#equals(java.lang.Object)
1:d29ca2a:      */
1:3ff2d92:     @Override
1:d29ca2a:     public boolean equals(Object o) {
1:d29ca2a: 
1:d29ca2a:         if (o == null || !this.getClass().equals(o.getClass())) {
1:d29ca2a:             return false;
1:d29ca2a:         }
1:3ff2d92:         return name.equals(((PropertyExpression) o).name);
1:d29ca2a:     }
1:d29ca2a: }
============================================================================
author:Hadrian Zbarcea
-------------------------------------------------------------------------------
commit:d54d046
author:gtully
-------------------------------------------------------------------------------
commit:dd91e85
/////////////////////////////////////////////////////////////////////////
1:         JMS_PROPERTY_EXPRESSIONS.put("JMSXGroupFirstForConsumer", new SubExpression() {
1: 
1:             @Override
1:             public Object evaluate(Message message) {
1:                 return Boolean.valueOf(message.isJMSXGroupFirstForConsumer());
1:             }
1:         });
author:Timothy A. Bish
-------------------------------------------------------------------------------
commit:97e1edc
/////////////////////////////////////////////////////////////////////////
1:                 Object userId = message.getUserID();
1:                 if (userId == null) {
1:                     try {
1:                         userId = message.getProperty("JMSXUserID");
1:                     } catch (IOException e) {
1:                     }
1:                 }
1: 
1:                 return userId;
commit:067660c
/////////////////////////////////////////////////////////////////////////
1:         JMS_PROPERTY_EXPRESSIONS.put("JMSXUserID", new SubExpression() {
1: 
1:             @Override
1:             public Object evaluate(Message message) {
0:                 return message.getUserID();
1:             }
1:         });
commit:3ff2d92
/////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////
1:             @Override
/////////////////////////////////////////////////////////////////////////
1:             @Override
/////////////////////////////////////////////////////////////////////////
1:             @Override
1:             @Override
1:             @Override
1:             @Override
/////////////////////////////////////////////////////////////////////////
1:             @Override
1:             @Override
1:             @Override
1:             @Override
1:             @Override
1:             @Override
1:             @Override
1:             @Override
/////////////////////////////////////////////////////////////////////////
1:                 return txId.toString();
1:             @Override
1:             @Override
1:             @Override
/////////////////////////////////////////////////////////////////////////
1:     @Override
/////////////////////////////////////////////////////////////////////////
1:     @Override
/////////////////////////////////////////////////////////////////////////
1:     @Override
/////////////////////////////////////////////////////////////////////////
1:     @Override
1:         return name.equals(((PropertyExpression) o).name);
author:Gary Tully
-------------------------------------------------------------------------------
commit:6f124c1
/////////////////////////////////////////////////////////////////////////
1: import java.util.Arrays;
/////////////////////////////////////////////////////////////////////////
1:         JMS_PROPERTY_EXPRESSIONS.put("JMSActiveMQBrokerPath", new SubExpression() {
1: 
1:             public Object evaluate(Message message) {
1:                 return Arrays.toString(message.getBrokerPath());
1:             }
1:         });
author:Hiram R. Chirino
-------------------------------------------------------------------------------
commit:9a8f6e4
commit:b4a2925
/////////////////////////////////////////////////////////////////////////
1:                 return message.isPersistent() ? "PERSISTENT" : "NON_PERSISTENT";
commit:b0c2a40
/////////////////////////////////////////////////////////////////////////
1:  * 
commit:ecf89a6
/////////////////////////////////////////////////////////////////////////
1: import java.util.Map;
/////////////////////////////////////////////////////////////////////////
1:     private static final Map<String, SubExpression> JMS_PROPERTY_EXPRESSIONS = new HashMap<String, SubExpression>();
1: 
1:                 if (dest == null) {
1:                 }
1:                 if (dest == null) {
1:                 }
1:                 if (message.getReplyTo() == null) {
1:                 }
/////////////////////////////////////////////////////////////////////////
0:                 return Integer.valueOf(message.isPersistent() ? DeliveryMode.PERSISTENT : DeliveryMode.NON_PERSISTENT);
/////////////////////////////////////////////////////////////////////////
1:                 if (message.getMessageId() == null) {
1:                 }
/////////////////////////////////////////////////////////////////////////
1:                 if (txId == null) {
1:                 }
1:                 if (txId == null) {
1:                 }
/////////////////////////////////////////////////////////////////////////
1:         jmsPropertyExpression = JMS_PROPERTY_EXPRESSIONS.get(name);
1:             if (message.isDropped()) {
1:             }
1:             if (jmsPropertyExpression != null) {
1:             }
1:                 throw JMSExceptionSupport.create("Could not get property: " + name + " reason: " + ioe.getMessage(), ioe);
/////////////////////////////////////////////////////////////////////////
1:         if (jmsPropertyExpression != null) {
1:         }
commit:fc00993
/////////////////////////////////////////////////////////////////////////
1:         Object evaluate(Message message);
0:     private static final HashMap JMS_PROPERTY_EXPRESSIONS = new HashMap();
commit:f812e34
/////////////////////////////////////////////////////////////////////////
1:  * Represents a property expression
/////////////////////////////////////////////////////////////////////////
0:     static final private HashMap JMS_PROPERTY_EXPRESSIONS = new HashMap();
1:     static {
1:         JMS_PROPERTY_EXPRESSIONS.put("JMSDestination", new SubExpression() {
1: 
1:             public Object evaluate(Message message) {
1:                 ActiveMQDestination dest = message.getOriginalDestination();
0:                 if (dest == null)
1:                     dest = message.getDestination();
0:                 if (dest == null)
1:         JMS_PROPERTY_EXPRESSIONS.put("JMSReplyTo", new SubExpression() {
1:             public Object evaluate(Message message) {
0:                 if (message.getReplyTo() == null)
1:         JMS_PROPERTY_EXPRESSIONS.put("JMSType", new SubExpression() {
1:             public Object evaluate(Message message) {
1:         JMS_PROPERTY_EXPRESSIONS.put("JMSDeliveryMode", new SubExpression() {
1:             public Object evaluate(Message message) {
0:                 return Integer.valueOf(message.isPersistent()
0:                     ? DeliveryMode.PERSISTENT : DeliveryMode.NON_PERSISTENT);
1:         JMS_PROPERTY_EXPRESSIONS.put("JMSPriority", new SubExpression() {
1:             public Object evaluate(Message message) {
1:         JMS_PROPERTY_EXPRESSIONS.put("JMSMessageID", new SubExpression() {
1:             public Object evaluate(Message message) {
0:                 if (message.getMessageId() == null)
1:         JMS_PROPERTY_EXPRESSIONS.put("JMSTimestamp", new SubExpression() {
1:             public Object evaluate(Message message) {
1:         JMS_PROPERTY_EXPRESSIONS.put("JMSCorrelationID", new SubExpression() {
1:             public Object evaluate(Message message) {
1:         JMS_PROPERTY_EXPRESSIONS.put("JMSExpiration", new SubExpression() {
1:             public Object evaluate(Message message) {
1:         JMS_PROPERTY_EXPRESSIONS.put("JMSRedelivered", new SubExpression() {
1:             public Object evaluate(Message message) {
1:         JMS_PROPERTY_EXPRESSIONS.put("JMSXDeliveryCount", new SubExpression() {
1:             public Object evaluate(Message message) {
1:                 return Integer.valueOf(message.getRedeliveryCounter() + 1);
1:         JMS_PROPERTY_EXPRESSIONS.put("JMSXGroupID", new SubExpression() {
1:             public Object evaluate(Message message) {
1:         JMS_PROPERTY_EXPRESSIONS.put("JMSXGroupSeq", new SubExpression() {
1:             public Object evaluate(Message message) {
1:         JMS_PROPERTY_EXPRESSIONS.put("JMSXProducerTXID", new SubExpression() {
1:             public Object evaluate(Message message) {
1:                 TransactionId txId = message.getOriginalTransactionId();
0:                 if (txId == null)
1:                     txId = message.getTransactionId();
0:                 if (txId == null)
1:         JMS_PROPERTY_EXPRESSIONS.put("JMSActiveMQBrokerInTime", new SubExpression() {
1:             public Object evaluate(Message message) {
1:         JMS_PROPERTY_EXPRESSIONS.put("JMSActiveMQBrokerOutTime", new SubExpression() {
1:             public Object evaluate(Message message) {
1: 
1: 
0:         jmsPropertyExpression = (SubExpression)JMS_PROPERTY_EXPRESSIONS.get(name);
0:             if (message.isDropped())
1: 
0:             if (jmsPropertyExpression != null)
0:                 throw JMSExceptionSupport.create("Could not get property: " + name + " reason: "
0:                                                  + ioe.getMessage(), ioe);
1: 
0:         if (jmsPropertyExpression != null)
/////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////
0:         return name.equals(((PropertyExpression)o).name);
commit:230a86c
/////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////
1:  *      http://www.apache.org/licenses/LICENSE-2.0
commit:57b4941
/////////////////////////////////////////////////////////////////////////
1:  * Licensed to the Apache Software Foundation (ASF) under one or more
1:  * contributor license agreements.  See the NOTICE file distributed with
1:  * this work for additional information regarding copyright ownership.
1:  * The ASF licenses this file to You under the Apache License, Version 2.0
1:  * (the "License"); you may not use this file except in compliance with
1:  * the License.  You may obtain a copy of the License at
commit:48b4869
/////////////////////////////////////////////////////////////////////////
0:  * Copyright 2005-2006 The Apache Software Foundation
commit:d29ca2a
/////////////////////////////////////////////////////////////////////////
1: /**
1:  *
0:  * Copyright 2004 The Apache Software Foundation
1:  *
0:  * Licensed under the Apache License, Version 2.0 (the "License");
0:  * you may not use this file except in compliance with the License.
0:  * You may obtain a copy of the License at
1:  *
0:  * http://www.apache.org/licenses/LICENSE-2.0
1:  *
1:  * Unless required by applicable law or agreed to in writing, software
1:  * distributed under the License is distributed on an "AS IS" BASIS,
1:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:  * See the License for the specific language governing permissions and
1:  * limitations under the License.
1:  */
1: 
1: package org.apache.activemq.filter;
1: 
1: import java.io.IOException;
1: import java.util.HashMap;
1: 
0: import javax.jms.DeliveryMode;
1: import javax.jms.JMSException;
1: 
1: import org.apache.activemq.command.ActiveMQDestination;
1: import org.apache.activemq.command.Message;
1: import org.apache.activemq.command.TransactionId;
1: import org.apache.activemq.util.JMSExceptionSupport;
1: 
1: /**
0:  * Represents a property  expression
1:  * 
0:  * @version $Revision: 1.5 $
1:  */
1: public class PropertyExpression implements Expression {
1: 
1:     interface SubExpression {
0:         public Object evaluate(Message message);
1:     }
1:     
0:     static final private HashMap JMS_PROPERTY_EXPRESSIONS = new HashMap();  
0:     static {
0:         JMS_PROPERTY_EXPRESSIONS.put("JMSDestination", new SubExpression() {
0:             public Object evaluate(Message message) {
0:                 ActiveMQDestination dest = message.getOriginalDestination();
0:                 if( dest == null )
0:                     dest = message.getDestination();
0:                 if( dest == null )
1:                     return null;
1:                 return dest.toString();
1:             }
1:         });
0:         JMS_PROPERTY_EXPRESSIONS.put("JMSReplyTo", new SubExpression() {
0:             public Object evaluate(Message message) {
0:                 if( message.getReplyTo() == null )
1:                     return null;
1:                 return message.getReplyTo().toString();
1:             }
1:         });
0:         JMS_PROPERTY_EXPRESSIONS.put("JMSType", new SubExpression() {
0:             public Object evaluate(Message message) {
1:                 return message.getType();
1:             }
1:         });
0:         JMS_PROPERTY_EXPRESSIONS.put("JMSDeliveryMode", new SubExpression() {
0:             public Object evaluate(Message message) {
0:                 return new Integer(message.isPersistent() ? DeliveryMode.PERSISTENT : DeliveryMode.NON_PERSISTENT );
1:             }
1:         });
0:         JMS_PROPERTY_EXPRESSIONS.put("JMSPriority", new SubExpression() {
0:             public Object evaluate(Message message) {
0:                 return new Integer(message.getPriority());
1:             }
1:         });
0:         JMS_PROPERTY_EXPRESSIONS.put("JMSMessageID", new SubExpression() {
0:             public Object evaluate(Message message) {
0:                 if( message.getMessageId() == null )
1:                     return null;
1:                 return message.getMessageId().toString();
1:             }
1:         });
0:         JMS_PROPERTY_EXPRESSIONS.put("JMSTimestamp", new SubExpression() {
0:             public Object evaluate(Message message) {
0:                 return new Long(message.getTimestamp());
1:             }
1:         });
0:         JMS_PROPERTY_EXPRESSIONS.put("JMSCorrelationID", new SubExpression() {
0:             public Object evaluate(Message message) {
1:                 return message.getCorrelationId();
1:             }
1:         });
0:         JMS_PROPERTY_EXPRESSIONS.put("JMSExpiration", new SubExpression() {
0:             public Object evaluate(Message message) {
0:                 return new Long(message.getExpiration());
1:             }
1:         });
0:         JMS_PROPERTY_EXPRESSIONS.put("JMSPriority", new SubExpression() {
0:             public Object evaluate(Message message) {
0:                 return new Integer(message.getPriority());
1:             }
1:         });
0:         JMS_PROPERTY_EXPRESSIONS.put("JMSTimestamp", new SubExpression() {
0:             public Object evaluate(Message message) {
0:                 return new Long(message.getTimestamp());
1:             }
1:         });
0:         JMS_PROPERTY_EXPRESSIONS.put("JMSRedelivered", new SubExpression() {
0:             public Object evaluate(Message message) {
0:                 return new Boolean(message.isRedelivered());
1:             }
1:         });
1:         
0:         JMS_PROPERTY_EXPRESSIONS.put("JMSXDeliveryCount", new SubExpression() {
0:             public Object evaluate(Message message) {
0:                 return new Integer(message.getRedeliveryCounter()+1);
1:             }
1:         });
0:         JMS_PROPERTY_EXPRESSIONS.put("JMSXGroupID", new SubExpression() {
0:             public Object evaluate(Message message) {
1:                 return message.getGroupID();
1:             }
1:         });
0:         JMS_PROPERTY_EXPRESSIONS.put("JMSXGroupSeq", new SubExpression() {
0:             public Object evaluate(Message message) {
1:                 return new Integer(message.getGroupSequence());
1:             }
1:         });
0:         JMS_PROPERTY_EXPRESSIONS.put("JMSXProducerTXID", new SubExpression() {
0:             public Object evaluate(Message message) {
0:                 TransactionId txId = message.getOriginalTransactionId();
0:                 if( txId==null)
0:                     txId = message.getTransactionId();
0:                 if( txId==null )
1:                     return null;
0:                 return new Integer(txId.toString());
1:             }
1:         });
1:     }
1:     
1:     private final String name;
1:     private final SubExpression jmsPropertyExpression;
1:     
1:     public PropertyExpression(String name) {
1:         this.name = name;
0:         jmsPropertyExpression = (SubExpression) JMS_PROPERTY_EXPRESSIONS.get(name);
1:     }
1: 
1:     public Object evaluate(MessageEvaluationContext message) throws JMSException {
1:         try {
0:             if( message.isDropped() )
1:                 return null;
1:             
0:             if( jmsPropertyExpression!=null )
1:                 return jmsPropertyExpression.evaluate(message.getMessage());
1:             try {
1:                 return message.getMessage().getProperty(name);
1:             } catch (IOException ioe) {
0:                 throw JMSExceptionSupport.create("Could not get property: "+name+" reason: "+ioe.getMessage(), ioe);
1:             }
1:         } catch (IOException e) {
1:             throw JMSExceptionSupport.create(e);
1:         }
1: 
1:     }
1:     
1:     public Object evaluate(Message message) throws JMSException {
0:         if( jmsPropertyExpression!=null )
1:             return jmsPropertyExpression.evaluate(message);
1:         try {
1:             return message.getProperty(name);
1:         } catch (IOException ioe) {
1:             throw JMSExceptionSupport.create(ioe);
1:         }
1:     }
1: 
1:     public String getName() {
1:         return name;
1:     }
1: 
1: 
1:     /**
1:      * @see java.lang.Object#toString()
1:      */
1:     public String toString() {
1:         return name;
1:     }
1: 
1:     /**
1:      * @see java.lang.Object#hashCode()
1:      */
1:     public int hashCode() {
1:         return name.hashCode();
1:     }
1: 
1:     /**
1:      * @see java.lang.Object#equals(java.lang.Object)
1:      */
1:     public boolean equals(Object o) {
1: 
1:         if (o == null || !this.getClass().equals(o.getClass())) {
1:             return false;
1:         }
0:         return name.equals(((PropertyExpression) o).name);
1: 
1:     }
1: 
1: }
author:Robert Davies
-------------------------------------------------------------------------------
commit:ec6a702
/////////////////////////////////////////////////////////////////////////
0:     static{
0:         JMS_PROPERTY_EXPRESSIONS.put("JMSDestination",new SubExpression(){
1: 
0:             public Object evaluate(Message message){
0:                 ActiveMQDestination dest=message.getOriginalDestination();
0:                 if(dest==null)
0:                     dest=message.getDestination();
0:                 if(dest==null)
0:         JMS_PROPERTY_EXPRESSIONS.put("JMSReplyTo",new SubExpression(){
1: 
0:             public Object evaluate(Message message){
0:                 if(message.getReplyTo()==null)
0:         JMS_PROPERTY_EXPRESSIONS.put("JMSType",new SubExpression(){
1: 
0:             public Object evaluate(Message message){
0:         JMS_PROPERTY_EXPRESSIONS.put("JMSDeliveryMode",new SubExpression(){
1: 
0:             public Object evaluate(Message message){
0:                 return Integer.valueOf(message.isPersistent()?DeliveryMode.PERSISTENT:DeliveryMode.NON_PERSISTENT);
0:         JMS_PROPERTY_EXPRESSIONS.put("JMSPriority",new SubExpression(){
1: 
0:             public Object evaluate(Message message){
0:         JMS_PROPERTY_EXPRESSIONS.put("JMSMessageID",new SubExpression(){
1: 
0:             public Object evaluate(Message message){
0:                 if(message.getMessageId()==null)
0:         JMS_PROPERTY_EXPRESSIONS.put("JMSTimestamp",new SubExpression(){
1: 
0:             public Object evaluate(Message message){
0:         JMS_PROPERTY_EXPRESSIONS.put("JMSCorrelationID",new SubExpression(){
1: 
0:             public Object evaluate(Message message){
0:         JMS_PROPERTY_EXPRESSIONS.put("JMSExpiration",new SubExpression(){
1: 
0:             public Object evaluate(Message message){
0:         JMS_PROPERTY_EXPRESSIONS.put("JMSRedelivered",new SubExpression(){
1: 
0:             public Object evaluate(Message message){
0:         JMS_PROPERTY_EXPRESSIONS.put("JMSXDeliveryCount",new SubExpression(){
1: 
0:             public Object evaluate(Message message){
0:         JMS_PROPERTY_EXPRESSIONS.put("JMSXGroupID",new SubExpression(){
1: 
0:             public Object evaluate(Message message){
0:         JMS_PROPERTY_EXPRESSIONS.put("JMSXGroupSeq",new SubExpression(){
1: 
0:             public Object evaluate(Message message){
0:         JMS_PROPERTY_EXPRESSIONS.put("JMSXProducerTXID",new SubExpression(){
1: 
0:             public Object evaluate(Message message){
0:                 TransactionId txId=message.getOriginalTransactionId();
0:                 if(txId==null)
0:                     txId=message.getTransactionId();
0:                 if(txId==null)
0:         JMS_PROPERTY_EXPRESSIONS.put("JMSActiveMQBrokerInTime",new SubExpression(){
1: 
0:             public Object evaluate(Message message){
0:         JMS_PROPERTY_EXPRESSIONS.put("JMSActiveMQBrokerOutTime",new SubExpression(){
1: 
0:             public Object evaluate(Message message){
commit:c07b233
/////////////////////////////////////////////////////////////////////////
0:         JMS_PROPERTY_EXPRESSIONS.put("JMS_ActiveMQBrokerInTime", new SubExpression() {
0:             public Object evaluate(Message message) {
1:                 return Long.valueOf(message.getBrokerInTime());
0:             }
0:         });
0:         JMS_PROPERTY_EXPRESSIONS.put("JMS_ActiveMQBrokerOutTime", new SubExpression() {
0:             public Object evaluate(Message message) {
1:                 return Long.valueOf(message.getBrokerOutTime());
0:             }
0:         });
commit:d36c0d4
/////////////////////////////////////////////////////////////////////////
0:                 return Integer.valueOf(message.isPersistent() ? DeliveryMode.PERSISTENT : DeliveryMode.NON_PERSISTENT );
1:                 return Integer.valueOf(message.getPriority());
/////////////////////////////////////////////////////////////////////////
1:                 return Long.valueOf(message.getTimestamp());
/////////////////////////////////////////////////////////////////////////
1:                 return Long.valueOf(message.getExpiration());
0:                 return Integer.valueOf(message.getPriority());
0:                 return Long.valueOf(message.getTimestamp());
1:                 return Boolean.valueOf(message.isRedelivered());
0:                 return Integer.valueOf(message.getRedeliveryCounter()+1);
============================================================================