1:74846bb: /**
1:74846bb:  * Licensed to the Apache Software Foundation (ASF) under one or more
1:74846bb:  * contributor license agreements.  See the NOTICE file distributed with
1:74846bb:  * this work for additional information regarding copyright ownership.
1:74846bb:  * The ASF licenses this file to You under the Apache License, Version 2.0
1:74846bb:  * (the "License"); you may not use this file except in compliance with
1:74846bb:  * the License.  You may obtain a copy of the License at
1:74846bb:  *
1:74846bb:  *      http://www.apache.org/licenses/LICENSE-2.0
1:74846bb:  *
1:74846bb:  * Unless required by applicable law or agreed to in writing, software
1:74846bb:  * distributed under the License is distributed on an "AS IS" BASIS,
1:74846bb:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:74846bb:  * See the License for the specific language governing permissions and
1:74846bb:  * limitations under the License.
1:74846bb:  */
1:74846bb: package org.apache.activemq.store.kahadb.scheduler.legacy;
1:74846bb: 
1:74846bb: import java.io.File;
1:74846bb: import java.io.IOException;
1:74846bb: import java.util.List;
1:74846bb: import java.util.Set;
1:74846bb: 
1:74846bb: import org.apache.activemq.store.kahadb.data.KahaAddScheduledJobCommand;
1:74846bb: import org.apache.activemq.store.kahadb.scheduler.JobSchedulerStoreImpl;
1:74846bb: import org.slf4j.Logger;
1:74846bb: import org.slf4j.LoggerFactory;
1:74846bb: 
1:74846bb: /**
1:74846bb:  * Used to upgrade a Legacy Job Scheduler store to the latest version this class
1:74846bb:  * loads a found legacy scheduler store and generates new add commands for all
1:74846bb:  * jobs currently in the store.
1:74846bb:  */
1:74846bb: public class LegacyStoreReplayer {
1:74846bb: 
1:74846bb:     static final Logger LOG = LoggerFactory.getLogger(LegacyStoreReplayer.class);
1:74846bb: 
1:74846bb:     private LegacyJobSchedulerStoreImpl store;
1:74846bb:     private final File legacyStoreDirectory;
1:74846bb: 
1:74846bb:     /**
1:74846bb:      * Creates a new Legacy Store Replayer with the given target store
1:74846bb:      * @param targetStore
1:74846bb:      * @param directory
1:74846bb:      */
1:74846bb:     public LegacyStoreReplayer(File directory) {
1:74846bb:         this.legacyStoreDirectory = directory;
1:74846bb:     }
1:74846bb: 
1:74846bb:     /**
1:74846bb:      * Loads the legacy store and prepares it for replay into a newer Store instance.
1:74846bb:      *
1:74846bb:      * @throws IOException if an error occurs while reading in the legacy store.
1:74846bb:      */
1:74846bb:     public void load() throws IOException {
1:74846bb: 
1:74846bb:         store = new LegacyJobSchedulerStoreImpl();
1:74846bb:         store.setDirectory(legacyStoreDirectory);
1:74846bb:         store.setFailIfDatabaseIsLocked(true);
1:74846bb: 
1:74846bb:         try {
1:74846bb:             store.start();
1:74846bb:         } catch (IOException ioe) {
1:74846bb:             LOG.warn("Legacy store load failed: ", ioe);
1:74846bb:             throw ioe;
1:74846bb:         } catch (Exception e) {
1:74846bb:             LOG.warn("Legacy store load failed: ", e);
1:74846bb:             throw new IOException(e);
1:74846bb:         }
1:74846bb:     }
1:74846bb: 
1:74846bb:     /**
1:74846bb:      * Unloads a previously loaded legacy store to release any resources associated with it.
1:74846bb:      *
1:74846bb:      * Once a store is unloaded it cannot be replayed again until it has been reloaded.
1:74846bb:      * @throws IOException
1:74846bb:      */
1:74846bb:     public void unload() throws IOException {
1:74846bb: 
1:74846bb:         if (store != null) {
1:74846bb:             try {
1:74846bb:                 store.stop();
1:74846bb:             } catch (Exception e) {
1:74846bb:                 LOG.warn("Legacy store unload failed: ", e);
1:74846bb:                 throw new IOException(e);
1:74846bb:             } finally {
1:74846bb:                 store = null;
1:74846bb:             }
1:74846bb:         }
1:74846bb:     }
1:74846bb: 
1:74846bb:     /**
1:74846bb:      * Performs a replay of scheduled jobs into the target JobSchedulerStore.
1:74846bb:      *
1:74846bb:      * @param targetStore
1:74846bb:      *      The JobSchedulerStore that will receive the replay events from the legacy store.
1:74846bb:      *
1:74846bb:      * @throws IOException if an error occurs during replay of the legacy store.
1:74846bb:      */
1:74846bb:     public void startReplay(JobSchedulerStoreImpl targetStore) throws IOException {
1:74846bb:         checkLoaded();
1:74846bb: 
1:74846bb:         if (targetStore == null) {
1:74846bb:             throw new IOException("Cannot replay to a null store");
1:74846bb:         }
1:74846bb: 
1:74846bb:         try {
1:74846bb:             Set<String> schedulers = store.getJobSchedulerNames();
1:74846bb:             if (!schedulers.isEmpty()) {
1:74846bb: 
1:74846bb:                 for (String name : schedulers) {
1:74846bb:                     LegacyJobSchedulerImpl scheduler = store.getJobScheduler(name);
1:74846bb:                     LOG.info("Replay of legacy store {} starting.", name);
1:74846bb:                     replayScheduler(scheduler, targetStore);
1:74846bb:                 }
1:74846bb:             }
1:74846bb: 
1:74846bb:             LOG.info("Replay of legacy store complate.");
1:74846bb:         } catch (IOException ioe) {
1:74846bb:             LOG.warn("Failed during replay of legacy store: ", ioe);
1:74846bb:             throw ioe;
1:74846bb:         } catch (Exception e) {
1:74846bb:             LOG.warn("Failed during replay of legacy store: ", e);
1:74846bb:             throw new IOException(e);
1:74846bb:         }
1:74846bb:     }
1:74846bb: 
1:74846bb:     private final void replayScheduler(LegacyJobSchedulerImpl legacy, JobSchedulerStoreImpl target) throws Exception {
1:74846bb:         List<LegacyJobImpl> jobs = legacy.getAllJobs();
1:74846bb: 
1:74846bb:         String schedulerName = legacy.getName();
1:74846bb: 
1:74846bb:         for (LegacyJobImpl job : jobs) {
1:74846bb:             LOG.trace("Storing job from legacy store to new store: {}", job);
1:74846bb:             KahaAddScheduledJobCommand newJob = new KahaAddScheduledJobCommand();
1:74846bb:             newJob.setScheduler(schedulerName);
1:74846bb:             newJob.setJobId(job.getJobId());
1:74846bb:             newJob.setStartTime(job.getStartTime());
1:74846bb:             newJob.setCronEntry(job.getCronEntry());
1:74846bb:             newJob.setDelay(job.getDelay());
1:74846bb:             newJob.setPeriod(job.getPeriod());
1:74846bb:             newJob.setRepeat(job.getRepeat());
1:74846bb:             newJob.setNextExecutionTime(job.getNextExecutionTime());
1:74846bb:             newJob.setPayload(job.getPayload());
1:74846bb: 
1:74846bb:             target.store(newJob);
1:74846bb:         }
1:74846bb:     }
1:74846bb: 
1:74846bb:     private final void checkLoaded() throws IOException {
1:74846bb:         if (this.store == null) {
1:74846bb:             throw new IOException("Cannot replay until legacy store is loaded.");
1:74846bb:         }
1:74846bb:     }
1:74846bb: }
============================================================================
author:Timothy Bish
-------------------------------------------------------------------------------
commit:74846bb
/////////////////////////////////////////////////////////////////////////
1: /**
1:  * Licensed to the Apache Software Foundation (ASF) under one or more
1:  * contributor license agreements.  See the NOTICE file distributed with
1:  * this work for additional information regarding copyright ownership.
1:  * The ASF licenses this file to You under the Apache License, Version 2.0
1:  * (the "License"); you may not use this file except in compliance with
1:  * the License.  You may obtain a copy of the License at
1:  *
1:  *      http://www.apache.org/licenses/LICENSE-2.0
1:  *
1:  * Unless required by applicable law or agreed to in writing, software
1:  * distributed under the License is distributed on an "AS IS" BASIS,
1:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:  * See the License for the specific language governing permissions and
1:  * limitations under the License.
1:  */
1: package org.apache.activemq.store.kahadb.scheduler.legacy;
1: 
1: import java.io.File;
1: import java.io.IOException;
1: import java.util.List;
1: import java.util.Set;
1: 
1: import org.apache.activemq.store.kahadb.data.KahaAddScheduledJobCommand;
1: import org.apache.activemq.store.kahadb.scheduler.JobSchedulerStoreImpl;
1: import org.slf4j.Logger;
1: import org.slf4j.LoggerFactory;
1: 
1: /**
1:  * Used to upgrade a Legacy Job Scheduler store to the latest version this class
1:  * loads a found legacy scheduler store and generates new add commands for all
1:  * jobs currently in the store.
1:  */
1: public class LegacyStoreReplayer {
1: 
1:     static final Logger LOG = LoggerFactory.getLogger(LegacyStoreReplayer.class);
1: 
1:     private LegacyJobSchedulerStoreImpl store;
1:     private final File legacyStoreDirectory;
1: 
1:     /**
1:      * Creates a new Legacy Store Replayer with the given target store
1:      * @param targetStore
1:      * @param directory
1:      */
1:     public LegacyStoreReplayer(File directory) {
1:         this.legacyStoreDirectory = directory;
1:     }
1: 
1:     /**
1:      * Loads the legacy store and prepares it for replay into a newer Store instance.
1:      *
1:      * @throws IOException if an error occurs while reading in the legacy store.
1:      */
1:     public void load() throws IOException {
1: 
1:         store = new LegacyJobSchedulerStoreImpl();
1:         store.setDirectory(legacyStoreDirectory);
1:         store.setFailIfDatabaseIsLocked(true);
1: 
1:         try {
1:             store.start();
1:         } catch (IOException ioe) {
1:             LOG.warn("Legacy store load failed: ", ioe);
1:             throw ioe;
1:         } catch (Exception e) {
1:             LOG.warn("Legacy store load failed: ", e);
1:             throw new IOException(e);
1:         }
1:     }
1: 
1:     /**
1:      * Unloads a previously loaded legacy store to release any resources associated with it.
1:      *
1:      * Once a store is unloaded it cannot be replayed again until it has been reloaded.
1:      * @throws IOException
1:      */
1:     public void unload() throws IOException {
1: 
1:         if (store != null) {
1:             try {
1:                 store.stop();
1:             } catch (Exception e) {
1:                 LOG.warn("Legacy store unload failed: ", e);
1:                 throw new IOException(e);
1:             } finally {
1:                 store = null;
1:             }
1:         }
1:     }
1: 
1:     /**
1:      * Performs a replay of scheduled jobs into the target JobSchedulerStore.
1:      *
1:      * @param targetStore
1:      *      The JobSchedulerStore that will receive the replay events from the legacy store.
1:      *
1:      * @throws IOException if an error occurs during replay of the legacy store.
1:      */
1:     public void startReplay(JobSchedulerStoreImpl targetStore) throws IOException {
1:         checkLoaded();
1: 
1:         if (targetStore == null) {
1:             throw new IOException("Cannot replay to a null store");
1:         }
1: 
1:         try {
1:             Set<String> schedulers = store.getJobSchedulerNames();
1:             if (!schedulers.isEmpty()) {
1: 
1:                 for (String name : schedulers) {
1:                     LegacyJobSchedulerImpl scheduler = store.getJobScheduler(name);
1:                     LOG.info("Replay of legacy store {} starting.", name);
1:                     replayScheduler(scheduler, targetStore);
1:                 }
1:             }
1: 
1:             LOG.info("Replay of legacy store complate.");
1:         } catch (IOException ioe) {
1:             LOG.warn("Failed during replay of legacy store: ", ioe);
1:             throw ioe;
1:         } catch (Exception e) {
1:             LOG.warn("Failed during replay of legacy store: ", e);
1:             throw new IOException(e);
1:         }
1:     }
1: 
1:     private final void replayScheduler(LegacyJobSchedulerImpl legacy, JobSchedulerStoreImpl target) throws Exception {
1:         List<LegacyJobImpl> jobs = legacy.getAllJobs();
1: 
1:         String schedulerName = legacy.getName();
1: 
1:         for (LegacyJobImpl job : jobs) {
1:             LOG.trace("Storing job from legacy store to new store: {}", job);
1:             KahaAddScheduledJobCommand newJob = new KahaAddScheduledJobCommand();
1:             newJob.setScheduler(schedulerName);
1:             newJob.setJobId(job.getJobId());
1:             newJob.setStartTime(job.getStartTime());
1:             newJob.setCronEntry(job.getCronEntry());
1:             newJob.setDelay(job.getDelay());
1:             newJob.setPeriod(job.getPeriod());
1:             newJob.setRepeat(job.getRepeat());
1:             newJob.setNextExecutionTime(job.getNextExecutionTime());
1:             newJob.setPayload(job.getPayload());
1: 
1:             target.store(newJob);
1:         }
1:     }
1: 
1:     private final void checkLoaded() throws IOException {
1:         if (this.store == null) {
1:             throw new IOException("Cannot replay until legacy store is loaded.");
1:         }
1:     }
1: }
============================================================================