1:d29ca2a: /**
1:57b4941:  * Licensed to the Apache Software Foundation (ASF) under one or more
1:57b4941:  * contributor license agreements.  See the NOTICE file distributed with
1:57b4941:  * this work for additional information regarding copyright ownership.
1:57b4941:  * The ASF licenses this file to You under the Apache License, Version 2.0
1:57b4941:  * (the "License"); you may not use this file except in compliance with
1:57b4941:  * the License.  You may obtain a copy of the License at
1:b0c2a40:  *
1:230a86c:  *      http://www.apache.org/licenses/LICENSE-2.0
6:d29ca2a:  *
1:d29ca2a:  * Unless required by applicable law or agreed to in writing, software
1:d29ca2a:  * distributed under the License is distributed on an "AS IS" BASIS,
1:d29ca2a:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:d29ca2a:  * See the License for the specific language governing permissions and
1:d29ca2a:  * limitations under the License.
1:d29ca2a:  */
1:d29ca2a: package org.apache.activemq;
4:d29ca2a: 
1:c62b951: import java.util.Random;
1:c62b951: import java.util.Vector;
1:c62b951: import java.util.concurrent.SynchronousQueue;
1:c62b951: import java.util.concurrent.ThreadPoolExecutor;
1:c62b951: import java.util.concurrent.TimeUnit;
1:c7d559f: 
1:d29ca2a: import javax.jms.Connection;
1:d29ca2a: import javax.jms.JMSException;
1:d29ca2a: import javax.jms.Message;
1:d29ca2a: import javax.jms.MessageConsumer;
1:d29ca2a: import javax.jms.MessageProducer;
1:d29ca2a: import javax.jms.Session;
1:d29ca2a: import javax.jms.TextMessage;
1:d29ca2a: import javax.jms.Topic;
1:d29ca2a: 
1:d29ca2a: /**
1:c7d559f:  *
1:d29ca2a:  */
1:d29ca2a: public class JmsConnectionStartStopTest extends TestSupport {
1:d29ca2a: 
1:fc00993:     private static final org.apache.commons.logging.Log LOG = org.apache.commons.logging.LogFactory
1:230a86c:         .getLog(JmsConnectionStartStopTest.class);
1:230a86c: 
1:230a86c:     private Connection startedConnection;
1:d29ca2a:     private Connection stoppedConnection;
1:d29ca2a: 
1:d29ca2a:     /**
1:d29ca2a:      * @see junit.framework.TestCase#setUp()
1:d29ca2a:      */
1:c7d559f:     @Override
1:d29ca2a:     protected void setUp() throws Exception {
1:230a86c: 
1:fc00993:         LOG.info(getClass().getClassLoader().getResource("log4j.properties"));
1:230a86c: 
1:230a86c:         ActiveMQConnectionFactory factory = createConnectionFactory();
1:230a86c:         startedConnection = factory.createConnection();
1:230a86c:         startedConnection.start();
1:230a86c:         stoppedConnection = factory.createConnection();
1:d29ca2a:     }
1:d29ca2a: 
1:d29ca2a:     /**
1:d29ca2a:      * @see junit.framework.TestCase#tearDown()
1:d29ca2a:      */
1:c7d559f:     @Override
1:d29ca2a:     protected void tearDown() throws Exception {
1:230a86c:         stoppedConnection.close();
1:230a86c:         startedConnection.close();
1:d29ca2a:     }
1:d29ca2a: 
1:d29ca2a:     /**
1:230a86c:      * Tests if the consumer receives the messages that were sent before the
1:230a86c:      * connection was started.
1:c7d559f:      *
1:d29ca2a:      * @throws JMSException
1:d29ca2a:      */
1:d29ca2a:     public void testStoppedConsumerHoldsMessagesTillStarted() throws JMSException {
1:230a86c:         Session startedSession = startedConnection.createSession(false, Session.AUTO_ACKNOWLEDGE);
1:230a86c:         Session stoppedSession = stoppedConnection.createSession(false, Session.AUTO_ACKNOWLEDGE);
1:d29ca2a: 
1:230a86c:         // Setup the consumers.
1:230a86c:         Topic topic = startedSession.createTopic("test");
1:230a86c:         MessageConsumer startedConsumer = startedSession.createConsumer(topic);
1:230a86c:         MessageConsumer stoppedConsumer = stoppedSession.createConsumer(topic);
1:d29ca2a: 
1:230a86c:         // Send the message.
1:230a86c:         MessageProducer producer = startedSession.createProducer(topic);
1:230a86c:         TextMessage message = startedSession.createTextMessage("Hello");
1:230a86c:         producer.send(message);
1:230a86c: 
1:230a86c:         // Test the assertions.
1:230a86c:         Message m = startedConsumer.receive(1000);
1:230a86c:         assertNotNull(m);
1:230a86c: 
1:230a86c:         m = stoppedConsumer.receive(1000);
1:230a86c:         assertNull(m);
1:230a86c: 
1:230a86c:         stoppedConnection.start();
1:230a86c:         m = stoppedConsumer.receive(5000);
1:230a86c:         assertNotNull(m);
1:230a86c: 
1:230a86c:         startedSession.close();
1:230a86c:         stoppedSession.close();
1:d29ca2a:     }
1:d29ca2a: 
1:d29ca2a:     /**
1:230a86c:      * Tests if the consumer is able to receive messages eveb when the
1:230a86c:      * connecction restarts multiple times.
1:c7d559f:      *
1:d29ca2a:      * @throws Exception
1:d29ca2a:      */
1:d29ca2a:     public void testMultipleConnectionStops() throws Exception {
1:230a86c:         testStoppedConsumerHoldsMessagesTillStarted();
1:230a86c:         stoppedConnection.stop();
1:230a86c:         testStoppedConsumerHoldsMessagesTillStarted();
1:230a86c:         stoppedConnection.stop();
1:230a86c:         testStoppedConsumerHoldsMessagesTillStarted();
1:230a86c:     }
1:d29ca2a: 
1:d29ca2a: 
1:c62b951:     public void testConcurrentSessionCreateWithStart() throws Exception {
1:c62b951:         ThreadPoolExecutor executor = new ThreadPoolExecutor(50, Integer.MAX_VALUE,
1:c62b951:                                       60L, TimeUnit.SECONDS,
1:c62b951:                                       new SynchronousQueue<Runnable>());
1:c62b951:         final Vector<Throwable> exceptions = new Vector<Throwable>();
1:c62b951:         final Random rand = new Random();
1:c62b951:         Runnable createSessionTask = new Runnable() {
1:c7d559f:             @Override
1:c62b951:             public void run() {
1:c62b951:                 try {
1:c62b951:                     TimeUnit.MILLISECONDS.sleep(rand.nextInt(10));
1:c62b951:                     stoppedConnection.createSession(false, Session.AUTO_ACKNOWLEDGE);
1:c62b951:                 } catch (Exception e) {
1:c62b951:                     exceptions.add(e);
1:86cbdfd:                 }
1:d29ca2a:             }
1:c62b951:         };
1:d29ca2a: 
1:c62b951:         Runnable startStopTask = new Runnable() {
1:c7d559f:             @Override
1:c62b951:             public void run() {
1:c62b951:                 try {
1:c62b951:                     TimeUnit.MILLISECONDS.sleep(rand.nextInt(10));
1:d29ca2a:                     stoppedConnection.start();
2:d29ca2a:                     stoppedConnection.stop();
1:c62b951:                 } catch (Exception e) {
1:c62b951:                     exceptions.add(e);
1:d29ca2a:                 }
3:c62b951:             }
1:c62b951:         };
1:d29ca2a: 
1:c62b951:         for (int i=0; i<1000; i++) {
1:c62b951:             executor.execute(createSessionTask);
1:c62b951:             executor.execute(startStopTask);
1:c62b951:         }
1:d29ca2a: 
1:c62b951:         executor.shutdown();
1:c62b951:         assertTrue("executor terminated", executor.awaitTermination(30, TimeUnit.SECONDS));
1:c62b951:         assertTrue("no exceptions: " + exceptions, exceptions.isEmpty());
1:c62b951:     }
1:c62b951: }
============================================================================
author:Hadrian Zbarcea
-------------------------------------------------------------------------------
commit:f9bec8f
author:Timothy A. Bish
-------------------------------------------------------------------------------
commit:c7d559f
/////////////////////////////////////////////////////////////////////////
1: 
/////////////////////////////////////////////////////////////////////////
1:  *
/////////////////////////////////////////////////////////////////////////
1:     @Override
/////////////////////////////////////////////////////////////////////////
1:     @Override
/////////////////////////////////////////////////////////////////////////
1:      *
/////////////////////////////////////////////////////////////////////////
1:      *
/////////////////////////////////////////////////////////////////////////
1:             @Override
/////////////////////////////////////////////////////////////////////////
1:             @Override
commit:ef24cc9
author:Hiram R. Chirino
-------------------------------------------------------------------------------
commit:b0c2a40
/////////////////////////////////////////////////////////////////////////
1:  * 
commit:fc00993
/////////////////////////////////////////////////////////////////////////
1:     private static final org.apache.commons.logging.Log LOG = org.apache.commons.logging.LogFactory
/////////////////////////////////////////////////////////////////////////
1:         LOG.info(getClass().getClassLoader().getResource("log4j.properties"));
commit:230a86c
/////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////
1:  *      http://www.apache.org/licenses/LICENSE-2.0
/////////////////////////////////////////////////////////////////////////
1:         .getLog(JmsConnectionStartStopTest.class);
1: 
1:     private Connection startedConnection;
1: 
1: 
1:         ActiveMQConnectionFactory factory = createConnectionFactory();
1:         startedConnection = factory.createConnection();
1:         startedConnection.start();
1:         stoppedConnection = factory.createConnection();
1:         stoppedConnection.close();
1:         startedConnection.close();
1:      * Tests if the consumer receives the messages that were sent before the
1:      * connection was started.
1:         Session startedSession = startedConnection.createSession(false, Session.AUTO_ACKNOWLEDGE);
1:         Session stoppedSession = stoppedConnection.createSession(false, Session.AUTO_ACKNOWLEDGE);
1:         // Setup the consumers.
1:         Topic topic = startedSession.createTopic("test");
1:         MessageConsumer startedConsumer = startedSession.createConsumer(topic);
1:         MessageConsumer stoppedConsumer = stoppedSession.createConsumer(topic);
1:         // Send the message.
1:         MessageProducer producer = startedSession.createProducer(topic);
1:         TextMessage message = startedSession.createTextMessage("Hello");
1:         producer.send(message);
1: 
1:         // Test the assertions.
1:         Message m = startedConsumer.receive(1000);
1:         assertNotNull(m);
1: 
1:         m = stoppedConsumer.receive(1000);
1:         assertNull(m);
1: 
1:         stoppedConnection.start();
1:         m = stoppedConsumer.receive(5000);
1:         assertNotNull(m);
1: 
1:         startedSession.close();
1:         stoppedSession.close();
1:      * Tests if the consumer is able to receive messages eveb when the
1:      * connecction restarts multiple times.
1:         testStoppedConsumerHoldsMessagesTillStarted();
1:         stoppedConnection.stop();
1:         testStoppedConsumerHoldsMessagesTillStarted();
1:         stoppedConnection.stop();
1:         testStoppedConsumerHoldsMessagesTillStarted();
1:     }
commit:86cbdfd
/////////////////////////////////////////////////////////////////////////
1: }
commit:57b4941
/////////////////////////////////////////////////////////////////////////
1:  * Licensed to the Apache Software Foundation (ASF) under one or more
1:  * contributor license agreements.  See the NOTICE file distributed with
1:  * this work for additional information regarding copyright ownership.
1:  * The ASF licenses this file to You under the Apache License, Version 2.0
1:  * (the "License"); you may not use this file except in compliance with
1:  * the License.  You may obtain a copy of the License at
commit:48b4869
/////////////////////////////////////////////////////////////////////////
0:  * Copyright 2005-2006 The Apache Software Foundation
commit:d29ca2a
/////////////////////////////////////////////////////////////////////////
1: /**
1:  *
0:  * Copyright 2004 The Apache Software Foundation
1:  *
0:  * Licensed under the Apache License, Version 2.0 (the "License");
0:  * you may not use this file except in compliance with the License.
0:  * You may obtain a copy of the License at
1:  *
0:  * http://www.apache.org/licenses/LICENSE-2.0
1:  *
1:  * Unless required by applicable law or agreed to in writing, software
1:  * distributed under the License is distributed on an "AS IS" BASIS,
1:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:  * See the License for the specific language governing permissions and
1:  * limitations under the License.
1:  */
1: package org.apache.activemq;
1: 
1: import javax.jms.Connection;
1: import javax.jms.JMSException;
1: import javax.jms.Message;
1: import javax.jms.MessageConsumer;
1: import javax.jms.MessageProducer;
1: import javax.jms.Session;
1: import javax.jms.TextMessage;
1: import javax.jms.Topic;
1: 
0: import org.apache.activemq.ActiveMQConnectionFactory;
1: 
1: /**
0:  * @version $Revision: 1.3 $
1:  */
1: public class JmsConnectionStartStopTest extends TestSupport {
1: 
0:     private static final org.apache.commons.logging.Log log = org.apache.commons.logging.LogFactory
0:             .getLog(JmsConnectionStartStopTest.class);
1:     
0: 	private Connection startedConnection;
1:     private Connection stoppedConnection;
1: 
1:     /**
1:      * @see junit.framework.TestCase#setUp()
1:      */
1:     protected void setUp() throws Exception {
1:             
0:         log.info(getClass().getClassLoader().getResource("log4j.properties"));
1:         
0: 		 ActiveMQConnectionFactory factory = createConnectionFactory();
0: 		 startedConnection = factory.createConnection();
0: 		 startedConnection.start();
0: 		 stoppedConnection = factory.createConnection();
1:     }
1: 
1:     /**
1:      * @see junit.framework.TestCase#tearDown()
1:      */
1:     protected void tearDown() throws Exception {
0: 		 stoppedConnection.close();
0: 		 startedConnection.close();
1:     }
1: 
1:     /**
0:      * Tests if the consumer receives the messages that were sent before the connection was started. 
1:      * 
1:      * @throws JMSException
1:      */
1:     public void testStoppedConsumerHoldsMessagesTillStarted() throws JMSException {
0:          Session startedSession = startedConnection.createSession(false, Session.AUTO_ACKNOWLEDGE);
0: 		 Session stoppedSession = stoppedConnection.createSession(false, Session.AUTO_ACKNOWLEDGE);
1: 
0: 		 // Setup the consumers.
0: 		 Topic topic = startedSession.createTopic("test");
0: 		 MessageConsumer startedConsumer = startedSession.createConsumer(topic);
0: 		 MessageConsumer stoppedConsumer = stoppedSession.createConsumer(topic);
1: 
0: 		 // Send the message.
0: 		 MessageProducer producer = startedSession.createProducer(topic);		 
0: 		 TextMessage message = startedSession.createTextMessage("Hello");
0: 		 producer.send(message);
1: 		 
0: 		 // Test the assertions.
0: 		 Message m = startedConsumer.receive(1000);
0: 		 assertNotNull(m);
1: 		 
0: 		 m = stoppedConsumer.receive(1000);
0: 		 assertNull(m);
1: 		 
1: 		 stoppedConnection.start();		
0: 		 m = stoppedConsumer.receive(5000);
0: 		 assertNotNull(m);
1: 		 
0: 		 startedSession.close();
0: 		 stoppedSession.close();
1:     }
1: 
1:     /**
0:      * Tests if the consumer is able to receive messages eveb when the connecction restarts multiple times.  
1:      * 
1:      * @throws Exception
1:      */
1:     public void testMultipleConnectionStops() throws Exception {
0: 	     testStoppedConsumerHoldsMessagesTillStarted();
1: 		 stoppedConnection.stop();
0: 		 testStoppedConsumerHoldsMessagesTillStarted();
1: 		 stoppedConnection.stop();
0: 		 testStoppedConsumerHoldsMessagesTillStarted();
1: 	}
1: }
author:Gary Tully
-------------------------------------------------------------------------------
commit:c62b951
/////////////////////////////////////////////////////////////////////////
1: import java.util.Random;
1: import java.util.Vector;
0: import java.util.concurrent.CountDownLatch;
0: import java.util.concurrent.Executor;
0: import java.util.concurrent.ExecutorService;
0: import java.util.concurrent.Executors;
1: import java.util.concurrent.SynchronousQueue;
1: import java.util.concurrent.ThreadPoolExecutor;
1: import java.util.concurrent.TimeUnit;
/////////////////////////////////////////////////////////////////////////
0: 
0: 
1:     public void testConcurrentSessionCreateWithStart() throws Exception {
1:         ThreadPoolExecutor executor = new ThreadPoolExecutor(50, Integer.MAX_VALUE,
1:                                       60L, TimeUnit.SECONDS,
1:                                       new SynchronousQueue<Runnable>());
1:         final Vector<Throwable> exceptions = new Vector<Throwable>();
1:         final Random rand = new Random();
1:         Runnable createSessionTask = new Runnable() {
1:             public void run() {
1:                 try {
1:                     TimeUnit.MILLISECONDS.sleep(rand.nextInt(10));
1:                     stoppedConnection.createSession(false, Session.AUTO_ACKNOWLEDGE);
1:                 } catch (Exception e) {
1:                     exceptions.add(e);
1:                 }
1:             }
1:         };
0: 
1:         Runnable startStopTask = new Runnable() {
1:             public void run() {
1:                 try {
1:                     TimeUnit.MILLISECONDS.sleep(rand.nextInt(10));
0:                     stoppedConnection.start();
0:                     stoppedConnection.stop();
1:                 } catch (Exception e) {
1:                     exceptions.add(e);
1:                 }
1:             }
1:         };
0: 
1:         for (int i=0; i<1000; i++) {
1:             executor.execute(createSessionTask);
1:             executor.execute(startStopTask);
1:         }
0: 
1:         executor.shutdown();
1:         assertTrue("executor terminated", executor.awaitTermination(30, TimeUnit.SECONDS));
1:         assertTrue("no exceptions: " + exceptions, exceptions.isEmpty());
1:     }
============================================================================