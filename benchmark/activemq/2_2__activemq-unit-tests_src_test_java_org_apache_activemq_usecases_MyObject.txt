1:ff00695: /**
1:ff00695:  * Licensed to the Apache Software Foundation (ASF) under one or more
1:ff00695:  * contributor license agreements.  See the NOTICE file distributed with
1:ff00695:  * this work for additional information regarding copyright ownership.
1:ff00695:  * The ASF licenses this file to You under the Apache License, Version 2.0
1:ff00695:  * (the "License"); you may not use this file except in compliance with
1:ff00695:  * the License.  You may obtain a copy of the License at
1:ff00695:  *
1:ff00695:  *      http://www.apache.org/licenses/LICENSE-2.0
1:ff00695:  *
1:ff00695:  * Unless required by applicable law or agreed to in writing, software
1:ff00695:  * distributed under the License is distributed on an "AS IS" BASIS,
1:ff00695:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:ff00695:  * See the License for the specific language governing permissions and
1:ff00695:  * limitations under the License.
1:ff00695:  */
2:ff00695: 
1:ff00695: package org.apache.activemq.usecases;
1:ff00695: 
1:ff00695: import java.io.IOException;
1:4743a20: import java.io.Serializable;
1:0585bc1: import java.util.concurrent.atomic.AtomicInteger;
1:ff00695: 
1:ff00695: public class MyObject implements Serializable {
1:ff00695: 
1:4743a20:     private static final long serialVersionUID = -2505777188753549398L;
1:4743a20: 
1:ff00695:     private String message;
1:4743a20:     private final AtomicInteger writeObjectCalled = new AtomicInteger(0);
1:4743a20:     private final AtomicInteger readObjectCalled = new AtomicInteger(0);
1:4743a20:     private final AtomicInteger readObjectNoDataCalled = new AtomicInteger(0);
1:ff00695: 
1:ff00695:     public MyObject(String message) {
1:ff00695:         this.setMessage(message);
2:ff00695:     }
1:ff00695: 
1:ff00695:     public void setMessage(String message) {
1:ff00695:         this.message = message;
1:ff00695:     }
1:ff00695: 
1:ff00695:     public String getMessage() {
1:ff00695:         return message;
1:ff00695:     }
1:ff00695: 
1:ff00695:     private void writeObject(java.io.ObjectOutputStream out) throws IOException {
1:0585bc1:         writeObjectCalled.incrementAndGet();
1:ff00695:         out.defaultWriteObject();
1:ff00695:     }
1:ff00695: 
1:ff00695:     private void readObject(java.io.ObjectInputStream in) throws IOException, ClassNotFoundException {
1:ff00695:         in.defaultReadObject();
1:4743a20:         readObjectCalled.incrementAndGet();
1:ff00695:     }
1:ff00695: 
1:0585bc1:     public int getWriteObjectCalled() {
1:0585bc1:         return writeObjectCalled.get();
1:ff00695:     }
1:ff00695: 
1:0585bc1:     public int getReadObjectCalled() {
1:0585bc1:         return readObjectCalled.get();
1:ff00695:     }
1:ff00695: 
1:0585bc1:     public int getReadObjectNoDataCalled() {
1:0585bc1:         return readObjectNoDataCalled.get();
1:ff00695:     }
1:ff00695: }
1:ff00695: 
1:ff00695: 
============================================================================
author:Timothy A. Bish
-------------------------------------------------------------------------------
commit:4743a20
/////////////////////////////////////////////////////////////////////////
1: import java.io.Serializable;
1:     private static final long serialVersionUID = -2505777188753549398L;
1: 
1:     private final AtomicInteger writeObjectCalled = new AtomicInteger(0);
1:     private final AtomicInteger readObjectCalled = new AtomicInteger(0);
1:     private final AtomicInteger readObjectNoDataCalled = new AtomicInteger(0);
/////////////////////////////////////////////////////////////////////////
1:         readObjectCalled.incrementAndGet();
commit:ef24cc9
author:Gary Tully
-------------------------------------------------------------------------------
commit:0585bc1
/////////////////////////////////////////////////////////////////////////
1: import java.util.concurrent.atomic.AtomicInteger;
0:     private AtomicInteger writeObjectCalled = new AtomicInteger(0);
0:     private AtomicInteger readObjectCalled = new AtomicInteger(0);
0:     private AtomicInteger readObjectNoDataCalled = new AtomicInteger(0);
/////////////////////////////////////////////////////////////////////////
1:         writeObjectCalled.incrementAndGet();
0:         readObjectCalled.incrementAndGet();        
0:         readObjectNoDataCalled.incrementAndGet();
1:     public int getWriteObjectCalled() {
1:         return writeObjectCalled.get();
1:     public int getReadObjectCalled() {
1:         return readObjectCalled.get();
1:     public int getReadObjectNoDataCalled() {
1:         return readObjectNoDataCalled.get();
commit:ff00695
/////////////////////////////////////////////////////////////////////////
1: /**
1:  * Licensed to the Apache Software Foundation (ASF) under one or more
1:  * contributor license agreements.  See the NOTICE file distributed with
1:  * this work for additional information regarding copyright ownership.
1:  * The ASF licenses this file to You under the Apache License, Version 2.0
1:  * (the "License"); you may not use this file except in compliance with
1:  * the License.  You may obtain a copy of the License at
1:  *
1:  *      http://www.apache.org/licenses/LICENSE-2.0
1:  *
1:  * Unless required by applicable law or agreed to in writing, software
1:  * distributed under the License is distributed on an "AS IS" BASIS,
1:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:  * See the License for the specific language governing permissions and
1:  * limitations under the License.
1:  */
1: 
1: package org.apache.activemq.usecases;
1: 
0: import java.io.Serializable;
0: import java.io.ObjectInputStream;
0: import java.io.ObjectOutputStream;
1: import java.io.IOException;
0: import java.io.ObjectStreamException;
1: 
1: public class MyObject implements Serializable {
1: 
1:     private String message;
0:     private boolean writeObjectCalled, readObjectCalled, readObjectNoDataCalled;
1: 
1:     public MyObject(String message) {
1:         this.setMessage(message);
1:     }
1: 
1:     public void setMessage(String message) {
1:         this.message = message;
1:     }
1: 
1:     public String getMessage() {
1:         return message;
1:     }
1: 
1:     private void writeObject(java.io.ObjectOutputStream out) throws IOException {
0:         writeObjectCalled = true;
0:         Thread.dumpStack();
1:         out.defaultWriteObject();
1:     }
1: 
1:     private void readObject(java.io.ObjectInputStream in) throws IOException, ClassNotFoundException {
0:         readObjectCalled = true;
0:         Thread.dumpStack();
1:         in.defaultReadObject();
1:     }
1: 
0:     private void readObjectNoData() throws ObjectStreamException {
0:         Thread.dumpStack();
0:         readObjectNoDataCalled = true;
1:     }
1: 
0:     public boolean getWriteObjectCalled() {
0:         return writeObjectCalled;
1:     }
1: 
0:     public boolean getReadObjectCalled() {
0:         return readObjectCalled;
1:     }
1: 
0:     public boolean getReadObjectNoDataCalled() {
0:         return readObjectNoDataCalled;
1:     }
1: }
1: 
1: 
============================================================================