1:6c82480: /**
1:6c82480:  * Licensed to the Apache Software Foundation (ASF) under one or more
1:6c82480:  * contributor license agreements.  See the NOTICE file distributed with
1:6c82480:  * this work for additional information regarding copyright ownership.
1:6c82480:  * The ASF licenses this file to You under the Apache License, Version 2.0
1:6c82480:  * (the "License"); you may not use this file except in compliance with
1:6c82480:  * the License.  You may obtain a copy of the License at
1:6c82480:  *
1:6c82480:  *      http://www.apache.org/licenses/LICENSE-2.0
1:6c82480:  *
1:6c82480:  * Unless required by applicable law or agreed to in writing, software
1:6c82480:  * distributed under the License is distributed on an "AS IS" BASIS,
1:6c82480:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:6c82480:  * See the License for the specific language governing permissions and
1:6c82480:  * limitations under the License.
1:6c82480:  */
1:6c82480: package org.apache.activemq.bugs;
1:6c82480: 
1:6c82480: import static org.junit.Assert.*;
1:6c82480: import java.io.File;
1:6c82480: import java.util.concurrent.TimeUnit;
1:6c82480: 
1:6c82480: import javax.jms.MessageConsumer;
1:6c82480: import javax.jms.Session;
1:6c82480: import javax.jms.Topic;
1:6c82480: import javax.jms.TopicConnection;
1:6c82480: import javax.jms.TopicSession;
1:6c82480: import javax.management.ObjectName;
1:6c82480: 
1:6c82480: import org.apache.activemq.ActiveMQConnectionFactory;
1:6c82480: import org.apache.activemq.broker.BrokerService;
1:6c82480: import org.apache.activemq.broker.jmx.TopicSubscriptionViewMBean;
1:6c82480: import org.junit.After;
1:6c82480: import org.junit.Before;
1:6c82480: import org.junit.Test;
1:6c82480: 
1:6c82480: public class AMQ2200Test {
1:6c82480: 
1:6c82480:     private static final String bindAddress = "tcp://0.0.0.0:0";
1:6c82480:     private BrokerService broker;
1:6c82480:     private ActiveMQConnectionFactory cf;
1:6c82480: 
1:6c82480:     @Before
1:6c82480:     public void setUp() throws Exception {
1:6c82480:         broker = new BrokerService();
1:6c82480:         broker.setDataDirectory("target" + File.separator + "activemq-data");
1:6c82480:         broker.setPersistent(true);
1:6c82480:         broker.setUseJmx(true);
1:6c82480:         broker.setAdvisorySupport(false);
1:6c82480:         broker.setDeleteAllMessagesOnStartup(true);
1:6c82480:         broker.addConnector(bindAddress);
1:6c82480:         String address = broker.getTransportConnectors().get(0).getPublishableConnectString();
1:6c82480:         broker.start();
1:6c82480:         broker.waitUntilStarted();
1:6c82480: 
1:6c82480:         cf = new ActiveMQConnectionFactory(address);
1:6c82480:     }
1:6c82480: 
1:6c82480:     @After
1:6c82480:     public void tearDown() throws Exception {
1:6c82480:         if (broker != null) {
1:6c82480:             broker.stop();
1:6c82480:             broker.waitUntilStopped();
1:6c82480:         }
1:6c82480:     }
1:6c82480: 
1:6c82480:     @Test
1:6c82480:     public void testTopicSubscriptionView() throws Exception {
1:6c82480:     	TopicConnection connection = cf.createTopicConnection();
1:6c82480:     	TopicSession session = connection.createTopicSession(false, Session.AUTO_ACKNOWLEDGE);
1:6c82480: 
1:6c82480:     	Topic destination = session.createTopic("TopicViewTestTopic");
1:6c82480:     	MessageConsumer consumer = session.createConsumer(destination);
1:6c82480:     	assertNotNull(consumer);
1:6c82480:     	TimeUnit.SECONDS.sleep(1);
1:6c82480: 
1:6c82480:     	ObjectName subscriptionNames[] = broker.getAdminView().getTopicSubscribers();
1:6c82480:     	assertTrue(subscriptionNames.length > 0);
1:6c82480: 
1:6c82480:     	boolean fail = true;
1:6c82480:     	for(ObjectName name : subscriptionNames) {
1:6c82480:     		if (name.toString().contains("TopicViewTestTopic")) {
1:6c82480:                 TopicSubscriptionViewMBean sub = (TopicSubscriptionViewMBean)
1:6c82480:                 	broker.getManagementContext().newProxyInstance(name, TopicSubscriptionViewMBean.class, true);
1:6c82480:                 assertNotNull(sub);
1:6c82480:                 assertTrue(sub.getSessionId() != -1);
1:6c82480:                 // Check that its the default value then configure something new.
1:6c82480:                 assertTrue(sub.getMaximumPendingQueueSize() == -1);
1:6c82480:                 sub.setMaximumPendingQueueSize(1000);
1:6c82480:                 assertTrue(sub.getMaximumPendingQueueSize() != -1);
1:6c82480:                 fail = false;
1:6c82480:     		}
1:6c82480:     	}
1:6c82480: 
1:6c82480:     	if (fail) {
1:6c82480:     		fail("Didn't find the TopicSubscriptionView");
1:6c82480:     	}
1:6c82480:     }
1:6c82480: 
1:6c82480: }
============================================================================
author:Timothy A. Bish
-------------------------------------------------------------------------------
commit:ef24cc9
commit:6c82480
/////////////////////////////////////////////////////////////////////////
1: /**
1:  * Licensed to the Apache Software Foundation (ASF) under one or more
1:  * contributor license agreements.  See the NOTICE file distributed with
1:  * this work for additional information regarding copyright ownership.
1:  * The ASF licenses this file to You under the Apache License, Version 2.0
1:  * (the "License"); you may not use this file except in compliance with
1:  * the License.  You may obtain a copy of the License at
1:  *
1:  *      http://www.apache.org/licenses/LICENSE-2.0
1:  *
1:  * Unless required by applicable law or agreed to in writing, software
1:  * distributed under the License is distributed on an "AS IS" BASIS,
1:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:  * See the License for the specific language governing permissions and
1:  * limitations under the License.
1:  */
1: package org.apache.activemq.bugs;
1: 
1: import static org.junit.Assert.*;
1: import java.io.File;
1: import java.util.concurrent.TimeUnit;
1: 
1: import javax.jms.MessageConsumer;
1: import javax.jms.Session;
1: import javax.jms.Topic;
1: import javax.jms.TopicConnection;
1: import javax.jms.TopicSession;
1: import javax.management.ObjectName;
1: 
1: import org.apache.activemq.ActiveMQConnectionFactory;
1: import org.apache.activemq.broker.BrokerService;
1: import org.apache.activemq.broker.jmx.TopicSubscriptionViewMBean;
1: import org.junit.After;
1: import org.junit.Before;
1: import org.junit.Test;
1: 
1: public class AMQ2200Test {
1: 
1:     private static final String bindAddress = "tcp://0.0.0.0:0";
1:     private BrokerService broker;
1:     private ActiveMQConnectionFactory cf;
1: 
1:     @Before
1:     public void setUp() throws Exception {
1:         broker = new BrokerService();
1:         broker.setDataDirectory("target" + File.separator + "activemq-data");
1:         broker.setPersistent(true);
1:         broker.setUseJmx(true);
1:         broker.setAdvisorySupport(false);
1:         broker.setDeleteAllMessagesOnStartup(true);
1:         broker.addConnector(bindAddress);
1:         String address = broker.getTransportConnectors().get(0).getPublishableConnectString();
1:         broker.start();
1:         broker.waitUntilStarted();
1: 
1:         cf = new ActiveMQConnectionFactory(address);
1:     }
1: 
1:     @After
1:     public void tearDown() throws Exception {
1:         if (broker != null) {
1:             broker.stop();
1:             broker.waitUntilStopped();
1:         }
1:     }
1: 
1:     @Test
1:     public void testTopicSubscriptionView() throws Exception {
1:     	TopicConnection connection = cf.createTopicConnection();
1:     	TopicSession session = connection.createTopicSession(false, Session.AUTO_ACKNOWLEDGE);
1: 
1:     	Topic destination = session.createTopic("TopicViewTestTopic");
1:     	MessageConsumer consumer = session.createConsumer(destination);
1:     	assertNotNull(consumer);
1:     	TimeUnit.SECONDS.sleep(1);
1: 
1:     	ObjectName subscriptionNames[] = broker.getAdminView().getTopicSubscribers();
1:     	assertTrue(subscriptionNames.length > 0);
1: 
1:     	boolean fail = true;
1:     	for(ObjectName name : subscriptionNames) {
1:     		if (name.toString().contains("TopicViewTestTopic")) {
1:                 TopicSubscriptionViewMBean sub = (TopicSubscriptionViewMBean)
1:                 	broker.getManagementContext().newProxyInstance(name, TopicSubscriptionViewMBean.class, true);
1:                 assertNotNull(sub);
1:                 assertTrue(sub.getSessionId() != -1);
1:                 // Check that its the default value then configure something new.
1:                 assertTrue(sub.getMaximumPendingQueueSize() == -1);
1:                 sub.setMaximumPendingQueueSize(1000);
1:                 assertTrue(sub.getMaximumPendingQueueSize() != -1);
1:                 fail = false;
1:     		}
1:     	}
1: 
1:     	if (fail) {
1:     		fail("Didn't find the TopicSubscriptionView");
1:     	}
1:     }
1: 
1: }
============================================================================