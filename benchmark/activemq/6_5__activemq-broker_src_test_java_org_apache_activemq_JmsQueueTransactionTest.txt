2:d29ca2a: /**
1:57b4941:  * Licensed to the Apache Software Foundation (ASF) under one or more
1:57b4941:  * contributor license agreements.  See the NOTICE file distributed with
1:57b4941:  * this work for additional information regarding copyright ownership.
1:57b4941:  * The ASF licenses this file to You under the Apache License, Version 2.0
1:57b4941:  * (the "License"); you may not use this file except in compliance with
1:57b4941:  * the License.  You may obtain a copy of the License at
5:d29ca2a:  *
1:230a86c:  *      http://www.apache.org/licenses/LICENSE-2.0
1:d29ca2a:  *
1:d29ca2a:  * Unless required by applicable law or agreed to in writing, software
1:d29ca2a:  * distributed under the License is distributed on an "AS IS" BASIS,
1:d29ca2a:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:d29ca2a:  * See the License for the specific language governing permissions and
1:d29ca2a:  * limitations under the License.
2:d29ca2a:  */
1:d29ca2a: package org.apache.activemq;
4:d29ca2a: 
1:d29ca2a: import java.util.ArrayList;
1:d29ca2a: import java.util.Enumeration;
1:d29ca2a: 
1:7cb7d18: import javax.jms.Destination;
1:d29ca2a: import javax.jms.Message;
1:d29ca2a: import javax.jms.MessageConsumer;
1:d29ca2a: import javax.jms.MessageProducer;
1:d29ca2a: import javax.jms.Queue;
1:d29ca2a: import javax.jms.QueueBrowser;
1:d29ca2a: import javax.jms.Session;
1:d29ca2a: import javax.jms.TextMessage;
1:d29ca2a: 
1:d29ca2a: import org.apache.activemq.test.JmsResourceProvider;
1:8bf987b: import org.slf4j.Logger;
1:8bf987b: import org.slf4j.LoggerFactory;
1:d29ca2a: 
1:d29ca2a: /**
1:b0c2a40:  * 
1:d29ca2a:  */
1:d29ca2a: public class JmsQueueTransactionTest extends JmsTransactionTestSupport {
1:8bf987b:     private static final Logger LOG = LoggerFactory.getLogger(JmsQueueTransactionTest.class);
1:d29ca2a: 
1:d29ca2a:     /**
1:f812e34:      * @see org.apache.activemq.JmsTransactionTestSupport#getJmsResourceProvider()
1:f812e34:      */
1:f812e34:     protected JmsResourceProvider getJmsResourceProvider() {
1:f812e34:         JmsResourceProvider p = new JmsResourceProvider();
1:f812e34:         p.setTopic(false);
1:f812e34:         return p;
1:f812e34:     }
1:f812e34: 
1:f812e34:     /**
1:f812e34:      * Tests if the the connection gets reset, the messages will still be
1:f812e34:      * received.
1:f812e34:      * 
1:d29ca2a:      * @throws Exception
1:d29ca2a:      */
1:d29ca2a:     public void testReceiveTwoThenCloseConnection() throws Exception {
1:f812e34:         Message[] outbound = new Message[] {session.createTextMessage("First Message"), session.createTextMessage("Second Message")};
1:f812e34: 
1:d29ca2a:         // lets consume any outstanding messages from previous test runs
1:1f00a39:         beginTx();
1:d29ca2a:         while (consumer.receive(1000) != null) {
1:86cbdfd:         }
1:1f00a39:         commitTx();
1:d29ca2a: 
1:1f00a39:         beginTx();
1:d29ca2a:         producer.send(outbound[0]);
1:d29ca2a:         producer.send(outbound[1]);
1:1f00a39:         commitTx();
1:d29ca2a: 
1:fc00993:         LOG.info("Sent 0: " + outbound[0]);
1:fc00993:         LOG.info("Sent 1: " + outbound[1]);
1:d29ca2a: 
1:933eb2f:         ArrayList<Message> messages = new ArrayList<Message>();
1:1f00a39:         beginTx();
1:3b08860:         Message message = consumer.receive(2000);
1:d29ca2a:         assertEquals(outbound[0], message);
1:d29ca2a: 
1:3b08860:         message = consumer.receive(2000);
1:d29ca2a:         assertNotNull(message);
1:d29ca2a:         assertEquals(outbound[1], message);
1:f812e34: 
1:d29ca2a:         // Close and reopen connection.
1:f812e34:         reconnect();
1:f812e34: 
1:d29ca2a:         // Consume again.. the previous message should
1:d29ca2a:         // get redelivered.
1:1f00a39:         beginTx();
1:3b08860:         message = consumer.receive(2000);
1:d29ca2a:         assertNotNull("Should have re-received the first message again!", message);
1:d29ca2a:         messages.add(message);
1:d29ca2a:         assertEquals(outbound[0], message);
1:d29ca2a: 
2:d29ca2a:         message = consumer.receive(5000);
1:d29ca2a:         assertNotNull("Should have re-received the second message again!", message);
1:d29ca2a:         messages.add(message);
1:d29ca2a:         assertEquals(outbound[1], message);
1:1f00a39:         commitTx();
1:d29ca2a: 
1:d29ca2a:         Message inbound[] = new Message[messages.size()];
1:d29ca2a:         messages.toArray(inbound);
1:d29ca2a: 
1:d29ca2a:         assertTextMessagesEqual("Rollback did not work", outbound, inbound);
2:d29ca2a:     }
1:f812e34: 
1:d29ca2a:     /**
1:f812e34:      * Tests sending and receiving messages with two sessions(one for producing
1:f812e34:      * and another for consuming).
1:d29ca2a:      * 
1:d29ca2a:      * @throws Exception
1:d29ca2a:      */
1:d29ca2a:     public void testSendReceiveInSeperateSessionTest() throws Exception {
1:f812e34:         session.close();
1:d29ca2a:         int batchCount = 10;
1:d29ca2a: 
1:f812e34:         for (int i = 0; i < batchCount; i++) {
1:f812e34:             // Session that sends messages
1:d29ca2a:             {
1:d29ca2a:                 Session session = resourceProvider.createSession(connection);
1:1f00a39:                 this.session = session;
1:d29ca2a:                 MessageProducer producer = resourceProvider.createProducer(session, destination);
1:f812e34:                 // consumer = resourceProvider.createConsumer(session,
1:f812e34:                 // destination);
1:1f00a39:                 beginTx();
1:f812e34:                 producer.send(session.createTextMessage("Test Message: " + i));
1:1f00a39:                 commitTx();
2:d29ca2a:                 session.close();
1:d29ca2a:             }
1:f812e34: 
1:f812e34:             // Session that consumes messages
1:d29ca2a:             {
1:d29ca2a:                 Session session = resourceProvider.createSession(connection);
1:1f00a39:                 this.session = session;
1:d29ca2a:                 MessageConsumer consumer = resourceProvider.createConsumer(session, destination);
1:d29ca2a: 
1:1f00a39:                 beginTx();
1:f812e34:                 TextMessage message = (TextMessage)consumer.receive(1000 * 5);
1:f812e34:                 assertNotNull("Received only " + i + " messages in batch ", message);
1:f812e34:                 assertEquals("Test Message: " + i, message.getText());
1:f812e34: 
1:1f00a39:                 commitTx();
1:d29ca2a:                 session.close();
1:d29ca2a:             }
1:d29ca2a:         }
1:d29ca2a:     }
1:d29ca2a: 
1:d29ca2a:     /**
1:f812e34:      * Tests the queue browser. Browses the messages then the consumer tries to
1:f812e34:      * receive them. The messages should still be in the queue even when it was
1:f812e34:      * browsed.
1:d29ca2a:      * 
1:d29ca2a:      * @throws Exception
1:d29ca2a:      */
1:d29ca2a:     public void testReceiveBrowseReceive() throws Exception {
1:f812e34:         Message[] outbound = new Message[] {session.createTextMessage("First Message"), session.createTextMessage("Second Message"), session.createTextMessage("Third Message")};
1:d29ca2a: 
1:d29ca2a:         // lets consume any outstanding messages from previous test runs
1:1f00a39:         beginTx();
1:d29ca2a:         while (consumer.receive(1000) != null) {
1:d29ca2a:         }
1:1f00a39:         commitTx();
1:d29ca2a: 
1:1f00a39:         beginTx();
1:d29ca2a:         producer.send(outbound[0]);
1:d29ca2a:         producer.send(outbound[1]);
1:d29ca2a:         producer.send(outbound[2]);
1:1f00a39:         commitTx();
1:d29ca2a: 
1:d29ca2a:         // Get the first.
1:1f00a39:         beginTx();
1:d29ca2a:         assertEquals(outbound[0], consumer.receive(1000));
1:d29ca2a:         consumer.close();
1:1f00a39:         commitTx();
1:d29ca2a:         
1:1f00a39:         beginTx();
1:f812e34:         QueueBrowser browser = session.createBrowser((Queue)destination);
1:d29ca2a:         Enumeration enumeration = browser.getEnumeration();
1:d29ca2a: 
1:d29ca2a:         // browse the second
1:d29ca2a:         assertTrue("should have received the second message", enumeration.hasMoreElements());
1:f812e34:         assertEquals(outbound[1], (Message)enumeration.nextElement());
1:d29ca2a: 
1:d29ca2a:         // browse the third.
1:d29ca2a:         assertTrue("Should have received the third message", enumeration.hasMoreElements());
1:f812e34:         assertEquals(outbound[2], (Message)enumeration.nextElement());
1:d29ca2a: 
1:519d8f7:         LOG.info("Check for more...");
1:d29ca2a:         // There should be no more.
1:d29ca2a:         boolean tooMany = false;
1:d29ca2a:         while (enumeration.hasMoreElements()) {
1:fc00993:             LOG.info("Got extra message: " + ((TextMessage)enumeration.nextElement()).getText());
1:d29ca2a:             tooMany = true;
1:d29ca2a:         }
1:d29ca2a:         assertFalse(tooMany);
1:519d8f7:         LOG.info("close browser...");
1:d29ca2a:         browser.close();
1:d29ca2a: 
1:519d8f7:         LOG.info("reopen and consume...");
1:d29ca2a:         // Re-open the consumer.
1:d29ca2a:         consumer = resourceProvider.createConsumer(session, destination);
1:d29ca2a:         // Receive the second.
1:d29ca2a:         assertEquals(outbound[1], consumer.receive(1000));
1:d29ca2a:         // Receive the third.
1:d29ca2a:         assertEquals(outbound[2], consumer.receive(1000));
1:d29ca2a:         consumer.close();
1:d29ca2a: 
1:1f00a39:         commitTx();
1:d29ca2a:     }
1:d29ca2a: 
1:7cb7d18:     public void testCloseConsumer() throws Exception {
1:7cb7d18:         Destination dest = session.createQueue(getSubject() + "?consumer.prefetchSize=0");
1:7cb7d18:         producer = session.createProducer(dest);
1:7cb7d18:         beginTx();
1:7cb7d18:         producer.send(session.createTextMessage("message 1"));
1:7cb7d18:         producer.send(session.createTextMessage("message 2"));
1:7cb7d18:         commitTx();
1:d29ca2a: 
1:7cb7d18:         beginTx();
1:7cb7d18:         consumer = session.createConsumer(dest);
1:7cb7d18:         Message message1 = consumer.receive(1000);
1:7cb7d18:         String text1 = ((TextMessage)message1).getText();
1:7cb7d18:         assertNotNull(message1);
1:7cb7d18:         assertEquals("message 1", text1);
1:d29ca2a: 
1:7cb7d18:         consumer.close();
1:d29ca2a: 
1:7cb7d18:         consumer = session.createConsumer(dest);
1:d29ca2a: 
1:7cb7d18:         Message message2 = consumer.receive(1000);
1:7cb7d18:         String text2 = ((TextMessage)message2).getText();
1:7cb7d18:         assertNotNull(message2);
1:7cb7d18:         assertEquals("message 2", text2);
1:7cb7d18:         commitTx();
1:d29ca2a:     }
1:d29ca2a: 
1:d29ca2a: }
============================================================================
author:Hadrian Zbarcea
-------------------------------------------------------------------------------
commit:d54d046
author:gtully
-------------------------------------------------------------------------------
commit:519d8f7
/////////////////////////////////////////////////////////////////////////
1:         LOG.info("Check for more...");
/////////////////////////////////////////////////////////////////////////
1:         LOG.info("close browser...");
1:         LOG.info("reopen and consume...");
author:Hiram R. Chirino
-------------------------------------------------------------------------------
commit:bfbe90b
commit:b0c2a40
/////////////////////////////////////////////////////////////////////////
1:  * 
commit:933eb2f
/////////////////////////////////////////////////////////////////////////
0: import org.apache.commons.logging.Log;
0: import org.apache.commons.logging.LogFactory;
0:     private static final Log LOG = LogFactory.getLog(JmsQueueTransactionTest.class);
/////////////////////////////////////////////////////////////////////////
1:         ArrayList<Message> messages = new ArrayList<Message>();
commit:fc00993
/////////////////////////////////////////////////////////////////////////
0:     private static final org.apache.commons.logging.Log LOG = org.apache.commons.logging.LogFactory.getLog(JmsQueueTransactionTest.class);
/////////////////////////////////////////////////////////////////////////
1:         LOG.info("Sent 0: " + outbound[0]);
1:         LOG.info("Sent 1: " + outbound[1]);
/////////////////////////////////////////////////////////////////////////
1:             LOG.info("Got extra message: " + ((TextMessage)enumeration.nextElement()).getText());
commit:f812e34
/////////////////////////////////////////////////////////////////////////
0:     private static final org.apache.commons.logging.Log log = org.apache.commons.logging.LogFactory.getLog(JmsQueueTransactionTest.class);
1:      * @see org.apache.activemq.JmsTransactionTestSupport#getJmsResourceProvider()
1:      */
1:     protected JmsResourceProvider getJmsResourceProvider() {
1:         JmsResourceProvider p = new JmsResourceProvider();
1:         p.setTopic(false);
1:         return p;
1:     }
1: 
1:     /**
1:      * Tests if the the connection gets reset, the messages will still be
1:      * received.
1:      * 
1:         Message[] outbound = new Message[] {session.createTextMessage("First Message"), session.createTextMessage("Second Message")};
/////////////////////////////////////////////////////////////////////////
1: 
1:         reconnect();
1: 
/////////////////////////////////////////////////////////////////////////
1: 
1:      * Tests sending and receiving messages with two sessions(one for producing
1:      * and another for consuming).
1:         session.close();
1:         for (int i = 0; i < batchCount; i++) {
1:             // Session that sends messages
1:                 // consumer = resourceProvider.createConsumer(session,
1:                 // destination);
1:                 producer.send(session.createTextMessage("Test Message: " + i));
1: 
1:             // Session that consumes messages
1:                 TextMessage message = (TextMessage)consumer.receive(1000 * 5);
1:                 assertNotNull("Received only " + i + " messages in batch ", message);
1:                 assertEquals("Test Message: " + i, message.getText());
1: 
1:      * Tests the queue browser. Browses the messages then the consumer tries to
1:      * receive them. The messages should still be in the queue even when it was
1:      * browsed.
1:         Message[] outbound = new Message[] {session.createTextMessage("First Message"), session.createTextMessage("Second Message"), session.createTextMessage("Third Message")};
/////////////////////////////////////////////////////////////////////////
1:         QueueBrowser browser = session.createBrowser((Queue)destination);
1:         assertEquals(outbound[1], (Message)enumeration.nextElement());
1:         assertEquals(outbound[2], (Message)enumeration.nextElement());
0:             log.info("Got extra message: " + ((TextMessage)enumeration.nextElement()).getText());
/////////////////////////////////////////////////////////////////////////
1: 
commit:230a86c
/////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////
1:  *      http://www.apache.org/licenses/LICENSE-2.0
commit:86cbdfd
/////////////////////////////////////////////////////////////////////////
1: }
commit:57b4941
/////////////////////////////////////////////////////////////////////////
1:  * Licensed to the Apache Software Foundation (ASF) under one or more
1:  * contributor license agreements.  See the NOTICE file distributed with
1:  * this work for additional information regarding copyright ownership.
1:  * The ASF licenses this file to You under the Apache License, Version 2.0
1:  * (the "License"); you may not use this file except in compliance with
1:  * the License.  You may obtain a copy of the License at
commit:48b4869
/////////////////////////////////////////////////////////////////////////
0:  * Copyright 2005-2006 The Apache Software Foundation
commit:d29ca2a
/////////////////////////////////////////////////////////////////////////
1: /**
1:  *
0:  * Copyright 2004 The Apache Software Foundation
1:  *
0:  * Licensed under the Apache License, Version 2.0 (the "License");
0:  * you may not use this file except in compliance with the License.
0:  * You may obtain a copy of the License at
1:  *
0:  * http://www.apache.org/licenses/LICENSE-2.0
1:  *
1:  * Unless required by applicable law or agreed to in writing, software
1:  * distributed under the License is distributed on an "AS IS" BASIS,
1:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:  * See the License for the specific language governing permissions and
1:  * limitations under the License.
1:  */
1: package org.apache.activemq;
1: 
1: import java.util.ArrayList;
1: import java.util.Enumeration;
1: 
1: import javax.jms.Message;
1: import javax.jms.MessageConsumer;
1: import javax.jms.MessageProducer;
1: import javax.jms.Queue;
1: import javax.jms.QueueBrowser;
1: import javax.jms.Session;
1: import javax.jms.TextMessage;
1: 
1: import org.apache.activemq.test.JmsResourceProvider;
1: 
1: 
1: /**
0:  * @version $Revision: 1.2 $
1:  */
1: public class JmsQueueTransactionTest extends JmsTransactionTestSupport {
0: 	private static final org.apache.commons.logging.Log log = org.apache.commons.logging.LogFactory
0:             .getLog(JmsQueueTransactionTest.class);
1:     
1: 	/**
1: 	 * 
0: 	 * @see org.apache.activemq.JmsTransactionTestSupport#getJmsResourceProvider()
1: 	 */
0: 	protected JmsResourceProvider getJmsResourceProvider() {
0:         JmsResourceProvider p = new JmsResourceProvider();
0:         p.setTopic(false); 
0:         return p;
1: 	}    
1: 
1:     /**
0:      * Tests if the the connection gets reset, the messages will still be received.  
1:      *  
1:      * @throws Exception
1:      */
1:     public void testReceiveTwoThenCloseConnection() throws Exception {
0:         Message[] outbound = new Message[]{
0:             session.createTextMessage("First Message"),
0:             session.createTextMessage("Second Message")
0:         };
1: 
1:         // lets consume any outstanding messages from previous test runs
1:         while (consumer.receive(1000) != null) {
1:         }
0:         session.commit();
1: 
1:         producer.send(outbound[0]);
1:         producer.send(outbound[1]);
0:         session.commit();
1: 
0:         log.info("Sent 0: " + outbound[0]);
0:         log.info("Sent 1: " + outbound[1]);
1: 
0:         ArrayList messages = new ArrayList();
0:         Message message = consumer.receive(1000);
1:         assertEquals(outbound[0], message);
1: 
0:         message = consumer.receive(1000);
1:         assertNotNull(message);
1:         assertEquals(outbound[1], message);
1:         
1:         // Close and reopen connection.
0:         reconnect();        
1:         
1:         // Consume again.. the previous message should
1:         // get redelivered.
1:         message = consumer.receive(5000);
1:         assertNotNull("Should have re-received the first message again!", message);
1:         messages.add(message);
1:         assertEquals(outbound[0], message);
1: 
1:         message = consumer.receive(5000);
1:         assertNotNull("Should have re-received the second message again!", message);
1:         messages.add(message);
1:         assertEquals(outbound[1], message);
0:         session.commit();
1: 
1:         Message inbound[] = new Message[messages.size()];
1:         messages.toArray(inbound);
1: 
1:         assertTextMessagesEqual("Rollback did not work", outbound, inbound);
1:     }
1:     
1:     /**
0:      * Tests sending and receiving messages with two sessions(one for producing and another for consuming).
1:      * 
1:      * @throws Exception
1:      */
1:     public void testSendReceiveInSeperateSessionTest() throws Exception {
1:         session.close();        
1:         int batchCount = 10;
1: 
0:         for (int i=0; i < batchCount; i++) {
0:         	//Session that sends messages
1:             {
1:                 Session session = resourceProvider.createSession(connection);
1:                 MessageProducer producer = resourceProvider.createProducer(session, destination);
0:                 //consumer = resourceProvider.createConsumer(session, destination);
0:                 producer.send(session.createTextMessage("Test Message: "+i));                   
0:                 session.commit();
1:                 session.close();
1:             }
1:             
0:         	//Session that consumes messages
1:             {
1:                 Session session = resourceProvider.createSession(connection);
1:                 MessageConsumer consumer = resourceProvider.createConsumer(session, destination);
1: 
0:                 TextMessage message = (TextMessage) consumer.receive(1000*5);
0:                 assertNotNull("Received only "+i+" messages in batch ", message);
0:                 assertEquals("Test Message: "+i, message.getText());
1: 
0:                 session.commit();
1:                 session.close();
1:             }
1:         }
1:     }
1:     
1:     /**
0:      * Tests the queue browser. Browses the messages then the consumer tries to receive them. 
0:      * The messages should still be in the queue even when it was browsed.  
1:      * 
1:      * @throws Exception
1:      */
1:     public void testReceiveBrowseReceive() throws Exception {
0:         Message[] outbound = new Message[] { session.createTextMessage("First Message"),
0:         									 session.createTextMessage("Second Message"),
0: 											 session.createTextMessage("Third Message") };
1: 
1:         // lets consume any outstanding messages from previous test runs
1:         while (consumer.receive(1000) != null) {
1:         }
0:         session.commit();
1: 
1:         producer.send(outbound[0]);
1:         producer.send(outbound[1]);
1:         producer.send(outbound[2]);
0:         session.commit();
1: 
1:         // Get the first.
1:         assertEquals(outbound[0], consumer.receive(1000));
1:         consumer.close();
1: 
0:         QueueBrowser browser = session.createBrowser((Queue) destination);
1:         Enumeration enumeration = browser.getEnumeration();
1: 
1:         // browse the second
1:         assertTrue("should have received the second message", enumeration.hasMoreElements());
0:         assertEquals(outbound[1], (Message) enumeration.nextElement());
1: 
1:         // browse the third.
1:         assertTrue("Should have received the third message", enumeration.hasMoreElements());
0:         assertEquals(outbound[2], (Message) enumeration.nextElement());
1: 
1:         // There should be no more.
1:         boolean tooMany = false;
1:         while (enumeration.hasMoreElements()) {
0:             log.info("Got extra message: " + ((TextMessage) enumeration.nextElement()).getText());
1:             tooMany = true;
1:         }
1:         assertFalse(tooMany);
1:         browser.close();
1: 
1:         // Re-open the consumer.
1:         consumer = resourceProvider.createConsumer(session, destination);
1:         // Receive the second.
1:         assertEquals(outbound[1], consumer.receive(1000));
1:         // Receive the third.
1:         assertEquals(outbound[2], consumer.receive(1000));
1:         consumer.close();
1: 
0:         session.commit();
1:     }
1:     
1: }
author:Bosanac Dejan
-------------------------------------------------------------------------------
commit:7cb7d18
/////////////////////////////////////////////////////////////////////////
1: import javax.jms.Destination;
/////////////////////////////////////////////////////////////////////////
1:     public void testCloseConsumer() throws Exception {
1:         Destination dest = session.createQueue(getSubject() + "?consumer.prefetchSize=0");
1:         producer = session.createProducer(dest);
1:         beginTx();
1:         producer.send(session.createTextMessage("message 1"));
1:         producer.send(session.createTextMessage("message 2"));
1:         commitTx();
0: 
1:         beginTx();
1:         consumer = session.createConsumer(dest);
1:         Message message1 = consumer.receive(1000);
1:         String text1 = ((TextMessage)message1).getText();
1:         assertNotNull(message1);
1:         assertEquals("message 1", text1);
0: 
1:         consumer.close();
0: 
1:         consumer = session.createConsumer(dest);
0: 
1:         Message message2 = consumer.receive(1000);
1:         String text2 = ((TextMessage)message2).getText();
1:         assertNotNull(message2);
1:         assertEquals("message 2", text2);
1:         commitTx();
0:     }
0: 
commit:8bf987b
/////////////////////////////////////////////////////////////////////////
1: import org.slf4j.Logger;
1: import org.slf4j.LoggerFactory;
1:     private static final Logger LOG = LoggerFactory.getLogger(JmsQueueTransactionTest.class);
author:Gary Tully
-------------------------------------------------------------------------------
commit:3b08860
/////////////////////////////////////////////////////////////////////////
1:         Message message = consumer.receive(2000);
1:         message = consumer.receive(2000);
/////////////////////////////////////////////////////////////////////////
1:         message = consumer.receive(2000);
commit:50a98e3
/////////////////////////////////////////////////////////////////////////
0:         session.commit();
0:         
author:David Jencks
-------------------------------------------------------------------------------
commit:1f00a39
/////////////////////////////////////////////////////////////////////////
1:         beginTx();
1:         commitTx();
1:         beginTx();
1:         commitTx();
1:         beginTx();
/////////////////////////////////////////////////////////////////////////
1:         beginTx();
/////////////////////////////////////////////////////////////////////////
1:         commitTx();
/////////////////////////////////////////////////////////////////////////
1:                 this.session = session;
1:                 beginTx();
1:                 commitTx();
1:                 this.session = session;
1:                 beginTx();
1:                 commitTx();
/////////////////////////////////////////////////////////////////////////
1:         beginTx();
1:         commitTx();
1:         beginTx();
1:         commitTx();
1:         beginTx();
1:         commitTx();
1:         beginTx();
/////////////////////////////////////////////////////////////////////////
1:         commitTx();
============================================================================