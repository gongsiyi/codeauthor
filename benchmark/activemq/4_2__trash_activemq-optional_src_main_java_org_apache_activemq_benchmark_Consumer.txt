2:40a7d3b: /**
1:57b4941:  * Licensed to the Apache Software Foundation (ASF) under one or more
1:57b4941:  * contributor license agreements.  See the NOTICE file distributed with
1:57b4941:  * this work for additional information regarding copyright ownership.
1:57b4941:  * The ASF licenses this file to You under the Apache License, Version 2.0
1:57b4941:  * (the "License"); you may not use this file except in compliance with
1:57b4941:  * the License.  You may obtain a copy of the License at
1:b0c2a40:  *
1:5f1adbe:  *      http://www.apache.org/licenses/LICENSE-2.0
5:40a7d3b:  *
1:40a7d3b:  * Unless required by applicable law or agreed to in writing, software
1:40a7d3b:  * distributed under the License is distributed on an "AS IS" BASIS,
1:40a7d3b:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:40a7d3b:  * See the License for the specific language governing permissions and
1:40a7d3b:  * limitations under the License.
1:5be5a62:  */
1:8abcfd1: package org.apache.activemq.benchmark;
3:40a7d3b: 
1:40a7d3b: import javax.jms.Destination;
1:40a7d3b: import javax.jms.JMSException;
1:40a7d3b: import javax.jms.Message;
1:40a7d3b: import javax.jms.MessageConsumer;
1:40a7d3b: import javax.jms.MessageListener;
1:40a7d3b: import javax.jms.Session;
1:40a7d3b: import javax.jms.TextMessage;
1:40a7d3b: import javax.jms.Topic;
1:40a7d3b: 
1:40a7d3b: public class Consumer extends BenchmarkSupport implements MessageListener {
1:40a7d3b: 
1:540dd5c:     public Consumer() {
1:540dd5c:     }
1:540dd5c: 
1:40a7d3b:     public static void main(String[] args) {
1:40a7d3b:         Consumer tool = new Consumer();
1:40a7d3b:         if (args.length > 0) {
1:40a7d3b:             tool.setUrl(args[0]);
5:40a7d3b:         }
1:40a7d3b:         if (args.length > 1) {
1:40a7d3b:             tool.setTopic(parseBoolean(args[1]));
1:40a7d3b:         }
1:40a7d3b:         if (args.length > 2) {
1:40a7d3b:             tool.setSubject(args[2]);
1:40a7d3b:         }
1:40a7d3b:         if (args.length > 3) {
1:40a7d3b:             tool.setDurable(parseBoolean(args[3]));
1:40a7d3b:         }
1:40a7d3b:         if (args.length > 4) {
1:40a7d3b:             tool.setConnectionCount(Integer.parseInt(args[4]));
1:40a7d3b:         }
1:40a7d3b: 
1:40a7d3b:         try {
1:40a7d3b:             tool.run();
1:540dd5c:         } catch (Exception e) {
1:40a7d3b:             System.out.println("Caught: " + e);
1:40a7d3b:             e.printStackTrace();
1:40a7d3b:         }
1:40a7d3b:     }
1:40a7d3b: 
1:40a7d3b:     public void run() throws JMSException {
1:40a7d3b:         start();
1:40a7d3b:         subscribe();
1:40a7d3b:     }
1:40a7d3b: 
1:40a7d3b:     protected void subscribe() throws JMSException {
1:40a7d3b:         for (int i = 0; i < subjects.length; i++) {
1:40a7d3b:             subscribe(subjects[i]);
1:40a7d3b:         }
1:40a7d3b:     }
1:40a7d3b: 
1:40a7d3b:     protected void subscribe(String subject) throws JMSException {
1:40a7d3b:         Session session = createSession();
1:40a7d3b: 
1:40a7d3b:         Destination destination = createDestination(session, subject);
1:40a7d3b: 
1:40a7d3b:         System.out.println("Consuming on : " + destination + " of type: " + destination.getClass().getName());
1:40a7d3b: 
1:40a7d3b:         MessageConsumer consumer = null;
1:40a7d3b:         if (isDurable() && isTopic()) {
1:540dd5c:             consumer = session.createDurableSubscriber((Topic)destination, getClass().getName());
1:540dd5c:         } else {
1:40a7d3b:             consumer = session.createConsumer(destination);
1:40a7d3b:         }
1:40a7d3b:         consumer.setMessageListener(this);
1:40a7d3b:         addResource(consumer);
1:40a7d3b:     }
1:40a7d3b: 
1:40a7d3b:     public void onMessage(Message message) {
1:40a7d3b:         try {
1:540dd5c:             TextMessage textMessage = (TextMessage)message;
1:40a7d3b: 
1:40a7d3b:             // lets force the content to be deserialized
1:540dd5c:             textMessage.getText();
1:40a7d3b:             count(1);
1:540dd5c: 
1:40a7d3b:             // lets count the messages
1:40a7d3b: 
1:540dd5c:             // message.acknowledge();
1:540dd5c:         } catch (JMSException e) {
1:40a7d3b:             // TODO Auto-generated catch block
1:40a7d3b:             e.printStackTrace();
1:40a7d3b:         }
1:40a7d3b:     }
1:40a7d3b: 
1:40a7d3b: }
============================================================================
author:Hadrian Zbarcea
-------------------------------------------------------------------------------
commit:d54d046
author:Hiram R. Chirino
-------------------------------------------------------------------------------
commit:ecaae53
commit:b0c2a40
/////////////////////////////////////////////////////////////////////////
1:  * 
commit:540dd5c
/////////////////////////////////////////////////////////////////////////
1:     public Consumer() {
1:     }
1: 
/////////////////////////////////////////////////////////////////////////
1:         } catch (Exception e) {
/////////////////////////////////////////////////////////////////////////
1:             consumer = session.createDurableSubscriber((Topic)destination, getClass().getName());
1:         } else {
/////////////////////////////////////////////////////////////////////////
1:             TextMessage textMessage = (TextMessage)message;
1:             textMessage.getText();
1: 
1:             // message.acknowledge();
1:         } catch (JMSException e) {
commit:5f1adbe
/////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////
1:  *      http://www.apache.org/licenses/LICENSE-2.0
commit:57b4941
/////////////////////////////////////////////////////////////////////////
1:  * Licensed to the Apache Software Foundation (ASF) under one or more
1:  * contributor license agreements.  See the NOTICE file distributed with
1:  * this work for additional information regarding copyright ownership.
1:  * The ASF licenses this file to You under the Apache License, Version 2.0
1:  * (the "License"); you may not use this file except in compliance with
1:  * the License.  You may obtain a copy of the License at
commit:5be5a62
/////////////////////////////////////////////////////////////////////////
0:  * Copyright 2005-2006 The Apache Software Foundation
/////////////////////////////////////////////////////////////////////////
1:  */
commit:8abcfd1
/////////////////////////////////////////////////////////////////////////
1: package org.apache.activemq.benchmark;
author:Claus Ibsen
-------------------------------------------------------------------------------
commit:d4ee73f
/////////////////////////////////////////////////////////////////////////
author:James Strachan
-------------------------------------------------------------------------------
commit:40a7d3b
/////////////////////////////////////////////////////////////////////////
1: /**
1:  *
0:  * Copyright 2004 Protique Ltd
1:  *
0:  * Licensed under the Apache License, Version 2.0 (the "License");
0:  * you may not use this file except in compliance with the License.
0:  * You may obtain a copy of the License at
1:  *
0:  * http://www.apache.org/licenses/LICENSE-2.0
1:  *
1:  * Unless required by applicable law or agreed to in writing, software
1:  * distributed under the License is distributed on an "AS IS" BASIS,
1:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:  * See the License for the specific language governing permissions and
1:  * limitations under the License.
1:  *
0:  **/
0: package org.activemq.benchmark;
1: 
1: import javax.jms.Destination;
1: import javax.jms.JMSException;
1: import javax.jms.Message;
1: import javax.jms.MessageConsumer;
1: import javax.jms.MessageListener;
1: import javax.jms.Session;
1: import javax.jms.TextMessage;
1: import javax.jms.Topic;
1: 
1: /**
0:  * @author James Strachan
0:  * @version $Revision$
0:  */
1: public class Consumer extends BenchmarkSupport implements MessageListener {
1: 
1:     public static void main(String[] args) {
1:         Consumer tool = new Consumer();
1:         if (args.length > 0) {
1:             tool.setUrl(args[0]);
1:         }
1:         if (args.length > 1) {
1:             tool.setTopic(parseBoolean(args[1]));
1:         }
1:         if (args.length > 2) {
1:             tool.setSubject(args[2]);
1:         }
1:         if (args.length > 3) {
1:             tool.setDurable(parseBoolean(args[3]));
1:         }
1:         if (args.length > 4) {
1:             tool.setConnectionCount(Integer.parseInt(args[4]));
1:         }
1: 
1:         try {
1:             tool.run();
1:         }
0:         catch (Exception e) {
1:             System.out.println("Caught: " + e);
1:             e.printStackTrace();
1:         }
1:     }
1: 
0:     public Consumer() {
1:     }
1: 
1:     public void run() throws JMSException {
1:         start();
1:         subscribe();
1:     }
1: 
1:     protected void subscribe() throws JMSException {
1:         for (int i = 0; i < subjects.length; i++) {
1:             subscribe(subjects[i]);
1:         }
1:     }
1: 
1:     protected void subscribe(String subject) throws JMSException {
1:         Session session = createSession();
1: 
1:         Destination destination = createDestination(session, subject);
1: 
1:         System.out.println("Consuming on : " + destination + " of type: " + destination.getClass().getName());
1: 
1:         MessageConsumer consumer = null;
1:         if (isDurable() && isTopic()) {
0:             consumer = session.createDurableSubscriber((Topic) destination, getClass().getName());
1:         }
0:         else {
1:             consumer = session.createConsumer(destination);
1:         }
1:         consumer.setMessageListener(this);
1:         addResource(consumer);
1:     }
1: 
1:     public void onMessage(Message message) {
1:         try {
0:             TextMessage textMessage = (TextMessage) message;
1: 
1:             // lets force the content to be deserialized
0:             String text = textMessage.getText();
1:             count(1);
1:             
1:             // lets count the messages
1: 
0:             //message.acknowledge();
1:         }
0:         catch (JMSException e) {
1:             // TODO Auto-generated catch block
1:             e.printStackTrace();
1:         }
1:     }
1: 
1: }
============================================================================