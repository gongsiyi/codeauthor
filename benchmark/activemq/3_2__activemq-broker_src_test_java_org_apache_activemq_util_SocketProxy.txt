1:8761189: /**
1:8761189:  * Licensed to the Apache Software Foundation (ASF) under one or more
1:8761189:  * contributor license agreements.  See the NOTICE file distributed with
1:8761189:  * this work for additional information regarding copyright ownership.
1:8761189:  * The ASF licenses this file to You under the Apache License, Version 2.0
1:8761189:  * (the "License"); you may not use this file except in compliance with
1:8761189:  * the License.  You may obtain a copy of the License at
1:8761189:  *
1:8761189:  *      http://www.apache.org/licenses/LICENSE-2.0
1:8761189:  *
1:8761189:  * Unless required by applicable law or agreed to in writing, software
1:8761189:  * distributed under the License is distributed on an "AS IS" BASIS,
1:8761189:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:8761189:  * See the License for the specific language governing permissions and
1:8761189:  * limitations under the License.
1:8761189:  */
2:8761189: 
1:8761189: package org.apache.activemq.util;
1:8761189: 
1:8761189: import java.io.IOException;
1:8761189: import java.io.InputStream;
1:8761189: import java.io.OutputStream;
1:2189100: import java.net.InetSocketAddress;
1:8761189: import java.net.ServerSocket;
1:8761189: import java.net.Socket;
1:8761189: import java.net.SocketException;
1:8761189: import java.net.SocketTimeoutException;
1:8761189: import java.net.URI;
1:8761189: import java.util.ArrayList;
1:8761189: import java.util.LinkedList;
1:8761189: import java.util.List;
1:8761189: import java.util.concurrent.CountDownLatch;
1:a6a6a70: import java.util.concurrent.TimeUnit;
1:8761189: import java.util.concurrent.atomic.AtomicReference;
1:8761189: 
1:101e711: import javax.net.ssl.SSLServerSocketFactory;
1:101e711: import javax.net.ssl.SSLSocketFactory;
1:8bf987b: import org.slf4j.Logger;
1:8bf987b: import org.slf4j.LoggerFactory;
1:8761189: 
1:8761189: public class SocketProxy {
1:8761189: 
1:8bf987b:     private static final transient Logger LOG = LoggerFactory.getLogger(SocketProxy.class);
1:8761189: 
1:2189100:     public static final int ACCEPT_TIMEOUT_MILLIS = 100;
1:8761189: 
1:8761189:     private URI proxyUrl;
1:8761189:     private URI target;
1:2189100: 
1:8761189:     private Acceptor acceptor;
1:8761189:     private ServerSocket serverSocket;
1:a6a6a70:     
1:a6a6a70:     private CountDownLatch closed = new CountDownLatch(1);
1:8761189: 
1:27d0ff4:     public List<Bridge> connections = new LinkedList<Bridge>();
1:8761189: 
1:8761189:     private int listenPort = 0;
1:8761189: 
1:2189100:     private int receiveBufferSize = -1;
1:2189100: 
1:f38908e:     private boolean pauseAtStart = false;
1:f38908e: 
1:f38908e:     private int acceptBacklog = 50;
1:f38908e: 
1:2189100:     public SocketProxy() throws Exception {    
1:2189100:     }
1:2189100:     
1:8761189:     public SocketProxy(URI uri) throws Exception {
1:8761189:         this(0, uri);
1:8761189:     }
1:8761189: 
1:8761189:     public SocketProxy(int port, URI uri) throws Exception {
1:8761189:         listenPort = port;
1:8761189:         target = uri;
1:8761189:         open();
1:8761189:     }
1:8761189: 
1:2189100:     public void setReceiveBufferSize(int receiveBufferSize) {
1:2189100:         this.receiveBufferSize = receiveBufferSize;
1:2189100:     }
1:2189100:     
1:2189100:     public void setTarget(URI tcpBrokerUri) {
1:2189100:         target = tcpBrokerUri;
1:2189100:     }
1:2189100: 
1:2189100:     public void open() throws Exception {
1:101e711:         serverSocket = createServerSocket(target);
1:80528f6:         serverSocket.setReuseAddress(true);
1:2189100:         if (receiveBufferSize > 0) {
1:2189100:             serverSocket.setReceiveBufferSize(receiveBufferSize);
1:2189100:         }
1:8761189:         if (proxyUrl == null) {
1:f38908e:             serverSocket.bind(new InetSocketAddress(listenPort), acceptBacklog);
1:8761189:             proxyUrl = urlFromSocket(target, serverSocket);
1:8761189:         } else {
1:2189100:             serverSocket.bind(new InetSocketAddress(proxyUrl.getPort()));
1:8761189:         }
1:8761189:         acceptor = new Acceptor(serverSocket, target);
1:f38908e:         if (pauseAtStart) {
1:f38908e:             acceptor.pause();
1:f38908e:         }
1:8761189:         new Thread(null, acceptor, "SocketProxy-Acceptor-" + serverSocket.getLocalPort()).start();
1:a6a6a70:         closed = new CountDownLatch(1);
1:8761189:     }
1:8761189: 
1:101e711:     private boolean isSsl(URI target) {
1:101e711:         return "ssl".equals(target.getScheme());
1:101e711:     }
1:101e711: 
1:101e711:     private ServerSocket createServerSocket(URI target) throws Exception {
1:101e711:         if (isSsl(target)) {
1:101e711:             return SSLServerSocketFactory.getDefault().createServerSocket();
1:101e711:         }
1:101e711:         return new ServerSocket();
1:101e711:     }
1:101e711: 
1:101e711:     private Socket createSocket(URI target) throws Exception {
1:101e711:         if (isSsl(target)) {
1:101e711:             return SSLSocketFactory.getDefault().createSocket();
1:101e711:         }
1:101e711:         return new Socket();
1:101e711:     }
1:101e711: 
1:8761189:     public URI getUrl() {
1:8761189:         return proxyUrl;
1:8761189:     }
1:8761189: 
1:8761189:     /*
1:8761189:      * close all proxy connections and acceptor
1:8761189:      */
1:8761189:     public void close() {
1:27d0ff4:         List<Bridge> connections;
1:8761189:         synchronized(this.connections) {
1:27d0ff4:             connections = new ArrayList<Bridge>(this.connections);
1:8761189:         }            
1:f232cec:         LOG.info("close, numConnections=" + connections.size());
1:27d0ff4:         for (Bridge con : connections) {
1:8761189:             closeConnection(con);
1:8761189:         }
1:8761189:         acceptor.close();
1:a6a6a70:         closed.countDown();
1:a6a6a70:     }
1:a6a6a70: 
1:27d0ff4:     /*
1:27d0ff4:      * close all proxy receive connections, leaving acceptor
1:27d0ff4:      * open
1:27d0ff4:      */
1:27d0ff4:     public void halfClose() {
1:27d0ff4:         List<Bridge> connections;
1:27d0ff4:         synchronized(this.connections) {
1:27d0ff4:             connections = new ArrayList<Bridge>(this.connections);
1:27d0ff4:         }            
1:f232cec:         LOG.info("halfClose, numConnections=" + connections.size());
1:27d0ff4:         for (Bridge con : connections) {
1:27d0ff4:             halfCloseConnection(con);
1:27d0ff4:         }
1:27d0ff4:     }
1:27d0ff4: 
1:a6a6a70:     public boolean waitUntilClosed(long timeoutSeconds) throws InterruptedException {
1:a6a6a70:         return closed.await(timeoutSeconds, TimeUnit.SECONDS);
1:8761189:     }
1:8761189: 
1:8761189:     /*
1:8761189:      * called after a close to restart the acceptor on the same port
1:8761189:      */
1:8761189:     public void reopen() {
1:8761189:         LOG.info("reopen");
1:8761189:         try {
1:8761189:             open();
1:8761189:         } catch (Exception e) {
1:8761189:             LOG.debug("exception on reopen url:" + getUrl(), e);
1:8761189:         }
1:8761189:     }
1:8761189: 
1:8761189:     /*
1:f232cec:      * pause accepting new connections and data transfer through existing proxy
1:8761189:      * connections. All sockets remain open
1:8761189:      */
1:8761189:     public void pause() {
1:8761189:         synchronized(connections) {
1:f232cec:             LOG.info("pause, numConnections=" + connections.size());
1:8761189:             acceptor.pause();
1:27d0ff4:             for (Bridge con : connections) {
1:8761189:                 con.pause();
1:8761189:             }
1:8761189:         }
1:8761189:     }
1:8761189: 
1:8761189:     /*
1:8761189:      * continue after pause
1:8761189:      */
1:8761189:     public void goOn() {
1:8761189:         synchronized(connections) {
1:f232cec:             LOG.info("goOn, numConnections=" + connections.size());
1:27d0ff4:             for (Bridge con : connections) {
1:8761189:                 con.goOn();
1:8761189:             }
1:8761189:         }
1:8761189:         acceptor.goOn();
1:8761189:     }
1:8761189: 
1:27d0ff4:     private void closeConnection(Bridge c) {
1:8761189:         try {
1:8761189:             c.close();
1:8761189:         } catch (Exception e) {
1:8761189:             LOG.debug("exception on close of: " + c, e);
1:8761189:         }
1:8761189:     }
1:8761189: 
1:27d0ff4:     private void halfCloseConnection(Bridge c) {
1:27d0ff4:         try {
1:27d0ff4:             c.halfClose();
1:27d0ff4:         } catch (Exception e) {
1:27d0ff4:             LOG.debug("exception on half close of: " + c, e);
1:27d0ff4:         }
1:27d0ff4:     }
1:27d0ff4: 
1:f38908e:     public boolean isPauseAtStart() {
1:f38908e:         return pauseAtStart;
1:f38908e:     }
1:f38908e: 
1:f38908e:     public void setPauseAtStart(boolean pauseAtStart) {
1:f38908e:         this.pauseAtStart = pauseAtStart;
1:f38908e:     }
1:f38908e: 
1:f38908e:     public int getAcceptBacklog() {
1:f38908e:         return acceptBacklog;
1:f38908e:     }
1:f38908e: 
1:f38908e:     public void setAcceptBacklog(int acceptBacklog) {
1:f38908e:         this.acceptBacklog = acceptBacklog;
1:f38908e:     }
1:f38908e: 
1:8761189:     private URI urlFromSocket(URI uri, ServerSocket serverSocket) throws Exception {
1:8761189:         int listenPort = serverSocket.getLocalPort();
1:8761189: 
1:8761189:         return new URI(uri.getScheme(), uri.getUserInfo(), uri.getHost(), listenPort, uri.getPath(), uri.getQuery(), uri.getFragment());
1:8761189:     }
1:8761189: 
1:27d0ff4:     public class Bridge {
1:8761189: 
1:8761189:         private Socket receiveSocket;
1:8761189:         private Socket sendSocket;
1:8761189:         private Pump requestThread;
1:8761189:         private Pump responseThread;
1:8761189: 
1:27d0ff4:         public Bridge(Socket socket, URI target) throws Exception {
1:8761189:             receiveSocket = socket;
1:101e711:             sendSocket = createSocket(target);
1:2189100:             if (receiveBufferSize > 0) {
1:2189100:                 sendSocket.setReceiveBufferSize(receiveBufferSize);
1:2189100:             }
1:2189100:             sendSocket.connect(new InetSocketAddress(target.getHost(), target.getPort()));
1:8761189:             linkWithThreads(receiveSocket, sendSocket);
1:2189100:             LOG.info("proxy connection " + sendSocket + ", receiveBufferSize=" + sendSocket.getReceiveBufferSize());
1:8761189:         }
1:8761189: 
1:8761189:         public void goOn() {
1:8761189:             responseThread.goOn();
1:8761189:             requestThread.goOn();
1:8761189:         }
1:8761189: 
1:8761189:         public void pause() {
1:8761189:             requestThread.pause();
1:8761189:             responseThread.pause();
1:8761189:         }
1:8761189: 
1:8761189:         public void close() throws Exception {
1:8761189:             synchronized(connections) {
1:8761189:                 connections.remove(this);
1:8761189:             }
1:8761189:             receiveSocket.close();
1:8761189:             sendSocket.close();
1:8761189:         }
1:8761189: 
1:27d0ff4:         public void halfClose() throws Exception {
1:27d0ff4:             receiveSocket.close();
1:27d0ff4:         }
1:27d0ff4: 
1:8761189:         private void linkWithThreads(Socket source, Socket dest) {
1:8761189:             requestThread = new Pump(source, dest);
1:8761189:             requestThread.start();
1:27d0ff4:             responseThread = new Pump(dest, source);
1:8761189:             responseThread.start();
1:8761189:         }
1:8761189: 
1:8761189:         public class Pump extends Thread {
1:8761189: 
1:8761189:             protected Socket src;
1:8761189:             private Socket destination;
1:8761189:             private AtomicReference<CountDownLatch> pause = new AtomicReference<CountDownLatch>();
1:8761189: 
1:8761189:             public Pump(Socket source, Socket dest) {
1:8761189:                 super("SocketProxy-DataTransfer-" + source.getPort() + ":" + dest.getPort());
1:8761189:                 src = source;
1:8761189:                 destination = dest;
1:8761189:                 pause.set(new CountDownLatch(0));
1:8761189:             }
1:8761189: 
1:8761189:             public void pause() {
1:8761189:                 pause.set(new CountDownLatch(1));
1:8761189:             }
1:8761189: 
1:8761189:             public void goOn() {
1:8761189:                 pause.get().countDown();
1:8761189:             }
1:8761189: 
1:8761189:             public void run() {
1:8761189:                 byte[] buf = new byte[1024];
1:8761189:                 try {
1:8761189:                     InputStream in = src.getInputStream();
1:8761189:                     OutputStream out = destination.getOutputStream();
1:8761189:                     while (true) {
1:8761189:                         int len = in.read(buf);
1:8761189:                         if (len == -1) {
1:2189100:                             LOG.debug("read eof from:" + src);
1:8761189:                             break;
1:8761189:                         }
1:8761189:                         pause.get().await();
1:8761189:                         out.write(buf, 0, len);
1:8761189:                     }
1:8761189:                 } catch (Exception e) {
1:8761189:                     LOG.debug("read/write failed, reason: " + e.getLocalizedMessage());
1:8761189:                     try {
1:27d0ff4:                         if (!receiveSocket.isClosed()) {
1:27d0ff4:                             // for halfClose, on read/write failure if we close the
1:27d0ff4:                             // remote end will see a close at the same time.
1:27d0ff4:                             close();
1:27d0ff4:                         }
1:8761189:                     } catch (Exception ignore) {
1:8761189:                     }
1:8761189:                 }
1:8761189:             }
1:8761189:         }
1:8761189:     }
1:8761189: 
1:8761189:     public class Acceptor implements Runnable {
1:8761189: 
1:8761189:         private ServerSocket socket;
1:8761189:         private URI target;
1:8761189:         private AtomicReference<CountDownLatch> pause = new AtomicReference<CountDownLatch>();
1:8761189: 
1:8761189: 
1:8761189:         public Acceptor(ServerSocket serverSocket, URI uri) {
1:8761189:             socket = serverSocket;
1:8761189:             target = uri;
1:8761189:             pause.set(new CountDownLatch(0));
1:8761189:             try {
1:8761189:                 socket.setSoTimeout(ACCEPT_TIMEOUT_MILLIS);
1:8761189:             } catch (SocketException e) {
1:8761189:                 e.printStackTrace();
1:8761189:             }
1:8761189:         }
1:8761189: 
1:8761189:         public void pause() {
1:8761189:             pause.set(new CountDownLatch(1));
1:8761189:         }
1:8761189:         
1:8761189:         public void goOn() {
1:8761189:             pause.get().countDown();
1:8761189:         }
1:8761189: 
1:8761189:         public void run() {
1:8761189:             try {
1:8761189:                 while(!socket.isClosed()) {
1:8761189:                     pause.get().await();
1:8761189:                     try {
1:8761189:                         Socket source = socket.accept();
1:2189100:                         pause.get().await();
1:2189100:                         if (receiveBufferSize > 0) {
1:2189100:                             source.setReceiveBufferSize(receiveBufferSize);
1:2189100:                         }
2:2189100:                         LOG.info("accepted " + source + ", receiveBufferSize:" + source.getReceiveBufferSize());
1:8761189:                         synchronized(connections) {
1:27d0ff4:                             connections.add(new Bridge(source, target));
1:8761189:                         }
1:8761189:                     } catch (SocketTimeoutException expected) {
1:8761189:                     }
1:8761189:                 }
1:8761189:             } catch (Exception e) {
1:8761189:                 LOG.debug("acceptor: finished for reason: " + e.getLocalizedMessage());
1:8761189:             }
1:8761189:         }
1:8761189:         
1:8761189:         public void close() {
1:8761189:             try {
1:8761189:                 socket.close();
1:a6a6a70:                 closed.countDown();
1:8761189:                 goOn();
1:8761189:             } catch (IOException ignored) {
1:8761189:             }
1:8761189:         }
1:8761189:     }
1:a6a6a70: 
1:8761189: }
1:8761189: 
============================================================================
author:Hiram R. Chirino
-------------------------------------------------------------------------------
commit:bfbe90b
/////////////////////////////////////////////////////////////////////////
author:Gary Tully
-------------------------------------------------------------------------------
commit:f232cec
/////////////////////////////////////////////////////////////////////////
1:         LOG.info("close, numConnections=" + connections.size());
/////////////////////////////////////////////////////////////////////////
1:         LOG.info("halfClose, numConnections=" + connections.size());
/////////////////////////////////////////////////////////////////////////
1:      * pause accepting new connections and data transfer through existing proxy
1:             LOG.info("pause, numConnections=" + connections.size());
/////////////////////////////////////////////////////////////////////////
1:             LOG.info("goOn, numConnections=" + connections.size());
commit:101e711
/////////////////////////////////////////////////////////////////////////
0: import javax.net.ssl.SSLServerSocket;
1: import javax.net.ssl.SSLServerSocketFactory;
1: import javax.net.ssl.SSLSocketFactory;
/////////////////////////////////////////////////////////////////////////
1:         serverSocket = createServerSocket(target);
/////////////////////////////////////////////////////////////////////////
1:     private boolean isSsl(URI target) {
1:         return "ssl".equals(target.getScheme());
1:     }
1: 
1:     private ServerSocket createServerSocket(URI target) throws Exception {
1:         if (isSsl(target)) {
1:             return SSLServerSocketFactory.getDefault().createServerSocket();
1:         }
1:         return new ServerSocket();
1:     }
1: 
1:     private Socket createSocket(URI target) throws Exception {
1:         if (isSsl(target)) {
1:             return SSLSocketFactory.getDefault().createSocket();
1:         }
1:         return new Socket();
1:     }
1: 
/////////////////////////////////////////////////////////////////////////
1:             sendSocket = createSocket(target);
commit:f38908e
/////////////////////////////////////////////////////////////////////////
1:     private boolean pauseAtStart = false;
1: 
1:     private int acceptBacklog = 50;
1: 
/////////////////////////////////////////////////////////////////////////
1:             serverSocket.bind(new InetSocketAddress(listenPort), acceptBacklog);
1:         if (pauseAtStart) {
1:             acceptor.pause();
1:         }
/////////////////////////////////////////////////////////////////////////
1:     public boolean isPauseAtStart() {
1:         return pauseAtStart;
1:     }
1: 
1:     public void setPauseAtStart(boolean pauseAtStart) {
1:         this.pauseAtStart = pauseAtStart;
1:     }
1: 
1:     public int getAcceptBacklog() {
1:         return acceptBacklog;
1:     }
1: 
1:     public void setAcceptBacklog(int acceptBacklog) {
1:         this.acceptBacklog = acceptBacklog;
1:     }
1: 
commit:27d0ff4
/////////////////////////////////////////////////////////////////////////
1:     public List<Bridge> connections = new LinkedList<Bridge>();
/////////////////////////////////////////////////////////////////////////
1:         List<Bridge> connections;
1:             connections = new ArrayList<Bridge>(this.connections);
1:         for (Bridge con : connections) {
1:     /*
1:      * close all proxy receive connections, leaving acceptor
1:      * open
1:      */
1:     public void halfClose() {
1:         List<Bridge> connections;
1:         synchronized(this.connections) {
1:             connections = new ArrayList<Bridge>(this.connections);
1:         }            
0:         LOG.info("halfClose, numConnectons=" + connections.size());
1:         for (Bridge con : connections) {
1:             halfCloseConnection(con);
1:         }
1:     }
1: 
/////////////////////////////////////////////////////////////////////////
1:             for (Bridge con : connections) {
/////////////////////////////////////////////////////////////////////////
1:             for (Bridge con : connections) {
1:     private void closeConnection(Bridge c) {
/////////////////////////////////////////////////////////////////////////
1:     private void halfCloseConnection(Bridge c) {
1:         try {
1:             c.halfClose();
1:         } catch (Exception e) {
1:             LOG.debug("exception on half close of: " + c, e);
1:         }
1:     }
1: 
1:     public class Bridge {
1:         public Bridge(Socket socket, URI target) throws Exception {
/////////////////////////////////////////////////////////////////////////
1:         public void halfClose() throws Exception {
1:             receiveSocket.close();
1:         }
1: 
1:             responseThread = new Pump(dest, source);
/////////////////////////////////////////////////////////////////////////
1:                         if (!receiveSocket.isClosed()) {
1:                             // for halfClose, on read/write failure if we close the
1:                             // remote end will see a close at the same time.
1:                             close();
1:                         }
/////////////////////////////////////////////////////////////////////////
1:                             connections.add(new Bridge(source, target));
commit:80528f6
/////////////////////////////////////////////////////////////////////////
1:         serverSocket.setReuseAddress(true);
commit:a6a6a70
/////////////////////////////////////////////////////////////////////////
1: import java.util.concurrent.TimeUnit;
/////////////////////////////////////////////////////////////////////////
1:     
1:     private CountDownLatch closed = new CountDownLatch(1);
/////////////////////////////////////////////////////////////////////////
1:         closed = new CountDownLatch(1);
/////////////////////////////////////////////////////////////////////////
1:         closed.countDown();
1:     }
1: 
1:     public boolean waitUntilClosed(long timeoutSeconds) throws InterruptedException {
1:         return closed.await(timeoutSeconds, TimeUnit.SECONDS);
/////////////////////////////////////////////////////////////////////////
1:                 closed.countDown();
1: 
commit:2189100
/////////////////////////////////////////////////////////////////////////
1: import java.net.InetSocketAddress;
/////////////////////////////////////////////////////////////////////////
1:     public static final int ACCEPT_TIMEOUT_MILLIS = 100;
1: 
/////////////////////////////////////////////////////////////////////////
1:     private int receiveBufferSize = -1;
1: 
1:     public SocketProxy() throws Exception {    
1:     }
1:     
/////////////////////////////////////////////////////////////////////////
1:     public void setReceiveBufferSize(int receiveBufferSize) {
1:         this.receiveBufferSize = receiveBufferSize;
1:     }
1:     
1:     public void setTarget(URI tcpBrokerUri) {
1:         target = tcpBrokerUri;
1:     }
1: 
1:     public void open() throws Exception {
0:         serverSocket = new ServerSocket();
1:         if (receiveBufferSize > 0) {
1:             serverSocket.setReceiveBufferSize(receiveBufferSize);
1:         }
0:             serverSocket.bind(new InetSocketAddress(listenPort));
1:             serverSocket.bind(new InetSocketAddress(proxyUrl.getPort()));
/////////////////////////////////////////////////////////////////////////
0:             sendSocket = new Socket();
1:             if (receiveBufferSize > 0) {
1:                 sendSocket.setReceiveBufferSize(receiveBufferSize);
1:             }
1:             sendSocket.connect(new InetSocketAddress(target.getHost(), target.getPort()));
1:             LOG.info("proxy connection " + sendSocket + ", receiveBufferSize=" + sendSocket.getReceiveBufferSize());
/////////////////////////////////////////////////////////////////////////
1:                             LOG.debug("read eof from:" + src);
/////////////////////////////////////////////////////////////////////////
1:                         LOG.info("accepted " + source + ", receiveBufferSize:" + source.getReceiveBufferSize());
1:                         pause.get().await();
1:                         if (receiveBufferSize > 0) {
1:                             source.setReceiveBufferSize(receiveBufferSize);
1:                         }
1:                         LOG.info("accepted " + source + ", receiveBufferSize:" + source.getReceiveBufferSize());
commit:8761189
/////////////////////////////////////////////////////////////////////////
1: /**
1:  * Licensed to the Apache Software Foundation (ASF) under one or more
1:  * contributor license agreements.  See the NOTICE file distributed with
1:  * this work for additional information regarding copyright ownership.
1:  * The ASF licenses this file to You under the Apache License, Version 2.0
1:  * (the "License"); you may not use this file except in compliance with
1:  * the License.  You may obtain a copy of the License at
1:  *
1:  *      http://www.apache.org/licenses/LICENSE-2.0
1:  *
1:  * Unless required by applicable law or agreed to in writing, software
1:  * distributed under the License is distributed on an "AS IS" BASIS,
1:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:  * See the License for the specific language governing permissions and
1:  * limitations under the License.
1:  */
1: 
1: package org.apache.activemq.util;
1: 
1: import java.io.IOException;
1: import java.io.InputStream;
1: import java.io.OutputStream;
1: import java.net.ServerSocket;
1: import java.net.Socket;
1: import java.net.SocketException;
1: import java.net.SocketTimeoutException;
1: import java.net.URI;
1: import java.util.ArrayList;
1: import java.util.LinkedList;
1: import java.util.List;
1: import java.util.concurrent.CountDownLatch;
1: import java.util.concurrent.atomic.AtomicReference;
1: 
0: import org.apache.commons.logging.Log;
0: import org.apache.commons.logging.LogFactory;
1: 
1: public class SocketProxy {
1: 
0:     private static final transient Log LOG = LogFactory.getLog(SocketProxy.class);
1: 
0:     public static final int ACCEPT_TIMEOUT_MILLIS = 1000;
1: 
1:     private URI proxyUrl;
1:     private URI target;
1:     private Acceptor acceptor;
1:     private ServerSocket serverSocket;
1: 
0:     public List<Connection> connections = new LinkedList<Connection>();
1: 
1:     private int listenPort = 0;
1: 
1:     public SocketProxy(URI uri) throws Exception {
1:         this(0, uri);
1:     }
1: 
1:     public SocketProxy(int port, URI uri) throws Exception {
1:         listenPort = port;
1:         target = uri;
1:         open();
1:     }
1: 
0:     protected void open() throws Exception {
1:         if (proxyUrl == null) {
0:             serverSocket = new ServerSocket(listenPort);
1:             proxyUrl = urlFromSocket(target, serverSocket);
1:         } else {
0:             serverSocket = new ServerSocket(proxyUrl.getPort());
1:         }
1:         acceptor = new Acceptor(serverSocket, target);
1:         new Thread(null, acceptor, "SocketProxy-Acceptor-" + serverSocket.getLocalPort()).start();
1:     }
1: 
1:     public URI getUrl() {
1:         return proxyUrl;
1:     }
1: 
1:     /*
1:      * close all proxy connections and acceptor
1:      */
1:     public void close() {
0:         List<Connection> connections;
1:         synchronized(this.connections) {
0:             connections = new ArrayList<Connection>(this.connections);
1:         }            
0:         LOG.info("close, numConnectons=" + connections.size());
0:         for (Connection con : connections) {
1:             closeConnection(con);
1:         }
1:         acceptor.close();
1:     }
1: 
1:     /*
1:      * called after a close to restart the acceptor on the same port
1:      */
1:     public void reopen() {
1:         LOG.info("reopen");
1:         try {
1:             open();
1:         } catch (Exception e) {
1:             LOG.debug("exception on reopen url:" + getUrl(), e);
1:         }
1:     }
1: 
1:     /*
0:      * pause accepting new connecitons and data transfer through existing proxy
1:      * connections. All sockets remain open
1:      */
1:     public void pause() {
1:         synchronized(connections) {
0:             LOG.info("pause, numConnectons=" + connections.size());
1:             acceptor.pause();
0:             for (Connection con : connections) {
1:                 con.pause();
1:             }
1:         }
1:     }
1: 
1:     /*
1:      * continue after pause
1:      */
1:     public void goOn() {
1:         synchronized(connections) {
0:             LOG.info("goOn, numConnectons=" + connections.size());
0:             for (Connection con : connections) {
1:                 con.goOn();
1:             }
1:         }
1:         acceptor.goOn();
1:     }
1: 
0:     private void closeConnection(Connection c) {
1:         try {
1:             c.close();
1:         } catch (Exception e) {
1:             LOG.debug("exception on close of: " + c, e);
1:         }
1:     }
1: 
1:     private URI urlFromSocket(URI uri, ServerSocket serverSocket) throws Exception {
1:         int listenPort = serverSocket.getLocalPort();
1: 
1:         return new URI(uri.getScheme(), uri.getUserInfo(), uri.getHost(), listenPort, uri.getPath(), uri.getQuery(), uri.getFragment());
1:     }
1: 
0:     public class Connection {
1: 
1:         private Socket receiveSocket;
1:         private Socket sendSocket;
1:         private Pump requestThread;
1:         private Pump responseThread;
1: 
0:         public Connection(Socket socket, URI target) throws Exception {
1:             receiveSocket = socket;
0:             sendSocket = new Socket(target.getHost(), target.getPort());
1:             linkWithThreads(receiveSocket, sendSocket);
0:             LOG.info("proxy connection " + sendSocket);
1:         }
1: 
1:         public void goOn() {
1:             responseThread.goOn();
1:             requestThread.goOn();
1:         }
1: 
1:         public void pause() {
1:             requestThread.pause();
1:             responseThread.pause();
1:         }
1: 
1:         public void close() throws Exception {
1:             synchronized(connections) {
1:                 connections.remove(this);
1:             }
1:             receiveSocket.close();
1:             sendSocket.close();
1:         }
1: 
1:         private void linkWithThreads(Socket source, Socket dest) {
1:             requestThread = new Pump(source, dest);
0:             responseThread = new Pump(dest, source);
1:             requestThread.start();
1:             responseThread.start();
1:         }
1: 
1:         public class Pump extends Thread {
1: 
1:             protected Socket src;
1:             private Socket destination;
1:             private AtomicReference<CountDownLatch> pause = new AtomicReference<CountDownLatch>();
1: 
1:             public Pump(Socket source, Socket dest) {
1:                 super("SocketProxy-DataTransfer-" + source.getPort() + ":" + dest.getPort());
1:                 src = source;
1:                 destination = dest;
1:                 pause.set(new CountDownLatch(0));
1:             }
1: 
1:             public void pause() {
1:                 pause.set(new CountDownLatch(1));
1:             }
1: 
1:             public void goOn() {
1:                 pause.get().countDown();
1:             }
1: 
1:             public void run() {
1:                 byte[] buf = new byte[1024];
1:                 try {
1:                     InputStream in = src.getInputStream();
1:                     OutputStream out = destination.getOutputStream();
1:                     while (true) {
1:                         int len = in.read(buf);
1:                         if (len == -1) {
1:                             break;
1:                         }
1:                         pause.get().await();
1:                         out.write(buf, 0, len);
1:                     }
1:                 } catch (Exception e) {
1:                     LOG.debug("read/write failed, reason: " + e.getLocalizedMessage());
1:                     try {
0:                         close();
1:                     } catch (Exception ignore) {
1:                     }
1:                 }
1:             }
1: 
1:         }
1:     }
1: 
1:     public class Acceptor implements Runnable {
1: 
1:         private ServerSocket socket;
1:         private URI target;
1:         private AtomicReference<CountDownLatch> pause = new AtomicReference<CountDownLatch>();
1: 
1: 
1:         public Acceptor(ServerSocket serverSocket, URI uri) {
1:             socket = serverSocket;
1:             target = uri;
1:             pause.set(new CountDownLatch(0));
1:             try {
1:                 socket.setSoTimeout(ACCEPT_TIMEOUT_MILLIS);
1:             } catch (SocketException e) {
1:                 e.printStackTrace();
1:             }
1:         }
1: 
1:         public void pause() {
1:             pause.set(new CountDownLatch(1));
1:         }
1:         
1:         public void goOn() {
1:             pause.get().countDown();
1:         }
1: 
1:         public void run() {
1:             try {
1:                 while(!socket.isClosed()) {
1:                     pause.get().await();
1:                     try {
1:                         Socket source = socket.accept();
0:                         LOG.info("accepted " + source);
1:                         synchronized(connections) {
0:                             connections.add(new Connection(source, target));
1:                         }
1:                     } catch (SocketTimeoutException expected) {
1:                     }
1:                 }
1:             } catch (Exception e) {
1:                 LOG.debug("acceptor: finished for reason: " + e.getLocalizedMessage());
1:             }
1:         }
1:         
1:         public void close() {
1:             try {
1:                 socket.close();
1:                 goOn();
1:             } catch (IOException ignored) {
1:             }
1:         }
1:     }
1: }
1: 
author:Bosanac Dejan
-------------------------------------------------------------------------------
commit:8bf987b
/////////////////////////////////////////////////////////////////////////
1: import org.slf4j.Logger;
1: import org.slf4j.LoggerFactory;
1:     private static final transient Logger LOG = LoggerFactory.getLogger(SocketProxy.class);
============================================================================