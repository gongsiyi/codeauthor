1:bbc039f: /**
1:bbc039f:  * Licensed to the Apache Software Foundation (ASF) under one or more
1:bbc039f:  * contributor license agreements.  See the NOTICE file distributed with
1:bbc039f:  * this work for additional information regarding copyright ownership.
1:bbc039f:  * The ASF licenses this file to You under the Apache License, Version 2.0
1:bbc039f:  * (the "License"); you may not use this file except in compliance with
1:bbc039f:  * the License.  You may obtain a copy of the License at
1:bbc039f:  *
1:bbc039f:  *      http://www.apache.org/licenses/LICENSE-2.0
1:bbc039f:  *
1:bbc039f:  * Unless required by applicable law or agreed to in writing, software
1:bbc039f:  * distributed under the License is distributed on an "AS IS" BASIS,
1:bbc039f:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:bbc039f:  * See the License for the specific language governing permissions and
1:bbc039f:  * limitations under the License.
1:bbc039f:  */
1:bbc039f: package org.apache.activemq.plugin;
1:bbc039f: 
1:bbc039f: import org.apache.activemq.command.ActiveMQDestination;
1:bbc039f: import org.apache.activemq.command.ActiveMQQueue;
1:bbc039f: import org.apache.activemq.command.ActiveMQTopic;
1:bbc039f: 
1:bbc039f: import org.apache.activemq.schema.core.DtoQueue;
1:bbc039f: import org.apache.activemq.schema.core.DtoTopic;
1:bbc039f: 
1:bbc039f: import java.util.Arrays;
1:bbc039f: import java.util.List;
1:bbc039f: 
1:bbc039f: public class DestinationsProcessor extends DefaultConfigurationProcessor {
1:bbc039f: 
1:bbc039f:     public DestinationsProcessor(RuntimeConfigurationBroker plugin, Class configurationClass) {
1:bbc039f:         super(plugin, configurationClass);
1:bbc039f:     }
1:bbc039f: 
1:bbc039f:     @Override
1:bbc039f:     public void processChanges(List current, List modified) {
1:bbc039f:         for (Object destinations : modified) {
1:bbc039f:             for (Object dto : getContents(destinations)) {
1:bbc039f:                 try {
1:bbc039f:                     ActiveMQDestination destination = createDestination(dto);
1:bbc039f:                     if (!containsDestination(destination)) {
1:bbc039f:                         plugin.addDestination(plugin.getBrokerService().getAdminConnectionContext(), destination, true);
1:bbc039f:                         plugin.info("Added destination " + destination);
1:bbc039f:                     }
1:bbc039f:                 } catch (Exception e) {
1:bbc039f:                     plugin.info("Failed to add a new destination for DTO: " + dto, e);
1:bbc039f:                 }
1:bbc039f:             }
1:bbc039f:         }
1:bbc039f:     }
1:bbc039f: 
1:bbc039f:     protected boolean containsDestination(ActiveMQDestination destination) throws Exception {
1:bbc039f:         return Arrays.asList(plugin.getBrokerService().getRegionBroker().getDestinations()).contains(destination);
1:bbc039f:     }
1:bbc039f: 
1:bbc039f:     @Override
1:bbc039f:     public void addNew(Object o) {
1:bbc039f:         try {
1:bbc039f:             ActiveMQDestination destination = createDestination(o);
1:bbc039f:             plugin.addDestination(plugin.getBrokerService().getAdminConnectionContext(), destination, true);
1:bbc039f:             plugin.info("Added destination " + destination);
1:bbc039f:         } catch (Exception e) {
1:bbc039f:             plugin.info("Failed to add a new destination for DTO: " + o, e);
1:bbc039f:         }
1:bbc039f:     }
1:bbc039f: 
1:bbc039f:     private ActiveMQDestination createDestination(Object dto) throws Exception {
1:bbc039f:         if (dto instanceof DtoQueue) {
1:bbc039f:             return new ActiveMQQueue(((DtoQueue) dto).getPhysicalName());
1:bbc039f:         } else if (dto instanceof DtoTopic) {
1:bbc039f:             return new ActiveMQTopic(((DtoTopic) dto).getPhysicalName());
1:bbc039f:         } else {
1:bbc039f:             throw new Exception("Unknown destination type for DTO " + dto);
1:bbc039f:         }
1:bbc039f:     }
1:bbc039f: }
============================================================================
author:Dejan Bosanac
-------------------------------------------------------------------------------
commit:bbc039f
/////////////////////////////////////////////////////////////////////////
1: /**
1:  * Licensed to the Apache Software Foundation (ASF) under one or more
1:  * contributor license agreements.  See the NOTICE file distributed with
1:  * this work for additional information regarding copyright ownership.
1:  * The ASF licenses this file to You under the Apache License, Version 2.0
1:  * (the "License"); you may not use this file except in compliance with
1:  * the License.  You may obtain a copy of the License at
1:  *
1:  *      http://www.apache.org/licenses/LICENSE-2.0
1:  *
1:  * Unless required by applicable law or agreed to in writing, software
1:  * distributed under the License is distributed on an "AS IS" BASIS,
1:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:  * See the License for the specific language governing permissions and
1:  * limitations under the License.
1:  */
1: package org.apache.activemq.plugin;
1: 
1: import org.apache.activemq.command.ActiveMQDestination;
1: import org.apache.activemq.command.ActiveMQQueue;
1: import org.apache.activemq.command.ActiveMQTopic;
1: 
1: import org.apache.activemq.schema.core.DtoQueue;
1: import org.apache.activemq.schema.core.DtoTopic;
1: 
1: import java.util.Arrays;
1: import java.util.List;
1: 
1: public class DestinationsProcessor extends DefaultConfigurationProcessor {
1: 
1:     public DestinationsProcessor(RuntimeConfigurationBroker plugin, Class configurationClass) {
1:         super(plugin, configurationClass);
1:     }
1: 
1:     @Override
1:     public void processChanges(List current, List modified) {
1:         for (Object destinations : modified) {
1:             for (Object dto : getContents(destinations)) {
1:                 try {
1:                     ActiveMQDestination destination = createDestination(dto);
1:                     if (!containsDestination(destination)) {
1:                         plugin.addDestination(plugin.getBrokerService().getAdminConnectionContext(), destination, true);
1:                         plugin.info("Added destination " + destination);
1:                     }
1:                 } catch (Exception e) {
1:                     plugin.info("Failed to add a new destination for DTO: " + dto, e);
1:                 }
1:             }
1:         }
1:     }
1: 
1:     protected boolean containsDestination(ActiveMQDestination destination) throws Exception {
1:         return Arrays.asList(plugin.getBrokerService().getRegionBroker().getDestinations()).contains(destination);
1:     }
1: 
1:     @Override
1:     public void addNew(Object o) {
1:         try {
1:             ActiveMQDestination destination = createDestination(o);
1:             plugin.addDestination(plugin.getBrokerService().getAdminConnectionContext(), destination, true);
1:             plugin.info("Added destination " + destination);
1:         } catch (Exception e) {
1:             plugin.info("Failed to add a new destination for DTO: " + o, e);
1:         }
1:     }
1: 
1:     private ActiveMQDestination createDestination(Object dto) throws Exception {
1:         if (dto instanceof DtoQueue) {
1:             return new ActiveMQQueue(((DtoQueue) dto).getPhysicalName());
1:         } else if (dto instanceof DtoTopic) {
1:             return new ActiveMQTopic(((DtoTopic) dto).getPhysicalName());
1:         } else {
1:             throw new Exception("Unknown destination type for DTO " + dto);
1:         }
1:     }
1: }
============================================================================