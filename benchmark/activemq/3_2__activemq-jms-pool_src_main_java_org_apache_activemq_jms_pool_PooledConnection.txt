1:b66559e: /**
1:b66559e:  * Licensed to the Apache Software Foundation (ASF) under one or more
1:b66559e:  * contributor license agreements.  See the NOTICE file distributed with
1:b66559e:  * this work for additional information regarding copyright ownership.
1:b66559e:  * The ASF licenses this file to You under the Apache License, Version 2.0
1:b66559e:  * (the "License"); you may not use this file except in compliance with
1:b66559e:  * the License.  You may obtain a copy of the License at
1:b66559e:  *
1:b66559e:  *      http://www.apache.org/licenses/LICENSE-2.0
1:b66559e:  *
1:b66559e:  * Unless required by applicable law or agreed to in writing, software
1:b66559e:  * distributed under the License is distributed on an "AS IS" BASIS,
1:b66559e:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:b66559e:  * See the License for the specific language governing permissions and
1:b66559e:  * limitations under the License.
1:b66559e:  */
1:b66559e: package org.apache.activemq.jms.pool;
1:b66559e: 
1:b66559e: import java.util.List;
1:b66559e: import java.util.concurrent.CopyOnWriteArrayList;
1:b66559e: 
1:b66559e: import javax.jms.Connection;
1:b66559e: import javax.jms.ConnectionConsumer;
1:b66559e: import javax.jms.ConnectionMetaData;
1:b66559e: import javax.jms.Destination;
1:b66559e: import javax.jms.ExceptionListener;
1:f91abd3: import javax.jms.IllegalStateException;
1:b66559e: import javax.jms.JMSException;
1:b66559e: import javax.jms.Queue;
1:b66559e: import javax.jms.QueueConnection;
1:b66559e: import javax.jms.QueueSession;
1:b66559e: import javax.jms.ServerSessionPool;
1:b66559e: import javax.jms.Session;
1:b66559e: import javax.jms.TemporaryQueue;
1:b66559e: import javax.jms.TemporaryTopic;
1:b66559e: import javax.jms.Topic;
1:b66559e: import javax.jms.TopicConnection;
1:b66559e: import javax.jms.TopicSession;
1:f91abd3: 
1:b66559e: import org.slf4j.Logger;
1:b66559e: import org.slf4j.LoggerFactory;
1:b66559e: 
1:b66559e: /**
1:b66559e:  * Represents a proxy {@link Connection} which is-a {@link TopicConnection} and
1:b66559e:  * {@link QueueConnection} which is pooled and on {@link #close()} will return
1:b66559e:  * its reference to the ConnectionPool backing it.
1:b66559e:  *
1:b66559e:  * <b>NOTE</b> this implementation is only intended for use when sending
1:b66559e:  * messages. It does not deal with pooling of consumers; for that look at a
1:b66559e:  * library like <a href="http://jencks.org/">Jencks</a> such as in <a
1:b66559e:  * href="http://jencks.org/Message+Driven+POJOs">this example</a>
1:b66559e:  *
1:b66559e:  */
1:b66559e: public class PooledConnection implements TopicConnection, QueueConnection, PooledSessionEventListener {
1:b66559e:     private static final transient Logger LOG = LoggerFactory.getLogger(PooledConnection.class);
1:b66559e: 
1:b66559e:     protected ConnectionPool pool;
1:b66559e:     private volatile boolean stopped;
1:b66559e:     private final List<TemporaryQueue> connTempQueues = new CopyOnWriteArrayList<TemporaryQueue>();
1:b66559e:     private final List<TemporaryTopic> connTempTopics = new CopyOnWriteArrayList<TemporaryTopic>();
1:b66559e:     private final List<PooledSession> loanedSessions = new CopyOnWriteArrayList<PooledSession>();
1:b66559e: 
1:b66559e:     /**
1:b66559e:      * Creates a new PooledConnection instance that uses the given ConnectionPool to create
1:b66559e:      * and manage its resources.  The ConnectionPool instance can be shared amongst many
1:b66559e:      * PooledConnection instances.
1:b66559e:      *
1:b66559e:      * @param pool
1:b66559e:      *      The connection and pool manager backing this proxy connection object.
1:b66559e:      */
1:b66559e:     public PooledConnection(ConnectionPool pool) {
1:b66559e:         this.pool = pool;
1:b66559e:     }
1:b66559e: 
1:b66559e:     /**
1:b66559e:      * Factory method to create a new instance.
1:b66559e:      */
1:b66559e:     public PooledConnection newInstance() {
1:b66559e:         return new PooledConnection(pool);
1:b66559e:     }
1:b66559e: 
1:b66559e:     @Override
1:b66559e:     public void close() throws JMSException {
1:b66559e:         this.cleanupConnectionTemporaryDestinations();
1:b66559e:         this.cleanupAllLoanedSessions();
1:b66559e:         if (this.pool != null) {
1:b66559e:             this.pool.decrementReferenceCount();
1:b66559e:             this.pool = null;
1:b66559e:         }
1:b66559e:     }
1:b66559e: 
1:b66559e:     @Override
1:b66559e:     public void start() throws JMSException {
1:b66559e:         assertNotClosed();
1:b66559e:         pool.start();
1:b66559e:     }
1:b66559e: 
1:b66559e:     @Override
1:b66559e:     public void stop() throws JMSException {
1:b66559e:         stopped = true;
1:b66559e:     }
1:b66559e: 
1:b66559e:     @Override
1:b66559e:     public ConnectionConsumer createConnectionConsumer(Destination destination, String selector, ServerSessionPool serverSessionPool, int maxMessages) throws JMSException {
1:b66559e:         return getConnection().createConnectionConsumer(destination, selector, serverSessionPool, maxMessages);
1:b66559e:     }
1:b66559e: 
1:b66559e:     @Override
1:b66559e:     public ConnectionConsumer createConnectionConsumer(Topic topic, String s, ServerSessionPool serverSessionPool, int maxMessages) throws JMSException {
1:b66559e:         return getConnection().createConnectionConsumer(topic, s, serverSessionPool, maxMessages);
1:b66559e:     }
1:b66559e: 
1:b66559e:     @Override
1:b66559e:     public ConnectionConsumer createDurableConnectionConsumer(Topic topic, String selector, String s1, ServerSessionPool serverSessionPool, int i) throws JMSException {
1:b66559e:         return getConnection().createDurableConnectionConsumer(topic, selector, s1, serverSessionPool, i);
1:b66559e:     }
1:b66559e: 
1:b66559e:     @Override
1:b66559e:     public String getClientID() throws JMSException {
1:b66559e:         return getConnection().getClientID();
1:b66559e:     }
1:b66559e: 
1:b66559e:     @Override
1:b66559e:     public ExceptionListener getExceptionListener() throws JMSException {
1:b65c0d1:         return pool.getParentExceptionListener();
1:b66559e:     }
1:b66559e: 
1:b66559e:     @Override
1:b66559e:     public ConnectionMetaData getMetaData() throws JMSException {
1:b66559e:         return getConnection().getMetaData();
1:b66559e:     }
1:b66559e: 
1:b66559e:     @Override
1:b66559e:     public void setExceptionListener(ExceptionListener exceptionListener) throws JMSException {
1:b65c0d1:         pool.setParentExceptionListener(exceptionListener);
1:b66559e:     }
1:b66559e: 
1:b66559e:     @Override
1:b66559e:     public void setClientID(String clientID) throws JMSException {
1:b66559e:         // ignore repeated calls to setClientID() with the same client id
1:b66559e:         // this could happen when a JMS component such as Spring that uses a
1:b66559e:         // PooledConnectionFactory shuts down and reinitializes.
1:b66559e:         if (this.getConnection().getClientID() == null || !this.getClientID().equals(clientID)) {
1:b66559e:             getConnection().setClientID(clientID);
1:b66559e:         }
1:b66559e:     }
1:b66559e: 
1:b66559e:     @Override
1:b66559e:     public ConnectionConsumer createConnectionConsumer(Queue queue, String selector, ServerSessionPool serverSessionPool, int maxMessages) throws JMSException {
1:b66559e:         return getConnection().createConnectionConsumer(queue, selector, serverSessionPool, maxMessages);
1:b66559e:     }
1:b66559e: 
1:b66559e:     // Session factory methods
1:b66559e:     // -------------------------------------------------------------------------
1:b66559e:     @Override
1:b66559e:     public QueueSession createQueueSession(boolean transacted, int ackMode) throws JMSException {
1:b66559e:         return (QueueSession) createSession(transacted, ackMode);
1:b66559e:     }
1:b66559e: 
1:b66559e:     @Override
1:b66559e:     public TopicSession createTopicSession(boolean transacted, int ackMode) throws JMSException {
1:b66559e:         return (TopicSession) createSession(transacted, ackMode);
1:b66559e:     }
1:b66559e: 
1:b66559e:     @Override
1:b66559e:     public Session createSession(boolean transacted, int ackMode) throws JMSException {
1:f91abd3:         PooledSession result = (PooledSession) pool.createSession(transacted, ackMode);
1:b66559e: 
1:b66559e:         // Store the session so we can close the sessions that this PooledConnection
1:b66559e:         // created in order to ensure that consumers etc are closed per the JMS contract.
1:b66559e:         loanedSessions.add(result);
1:b66559e: 
1:b66559e:         // Add a event listener to the session that notifies us when the session
1:b66559e:         // creates / destroys temporary destinations and closes etc.
1:b66559e:         result.addSessionEventListener(this);
1:b66559e:         return result;
1:b66559e:     }
1:b66559e: 
1:b66559e:     // Implementation methods
1:b66559e:     // -------------------------------------------------------------------------
1:b66559e: 
1:b66559e:     @Override
1:b66559e:     public void onTemporaryQueueCreate(TemporaryQueue tempQueue) {
1:b66559e:         connTempQueues.add(tempQueue);
1:b66559e:     }
1:b66559e: 
1:b66559e:     @Override
1:b66559e:     public void onTemporaryTopicCreate(TemporaryTopic tempTopic) {
1:b66559e:         connTempTopics.add(tempTopic);
1:b66559e:     }
1:b66559e: 
1:b66559e:     @Override
1:b66559e:     public void onSessionClosed(PooledSession session) {
1:b66559e:         if (session != null) {
1:b66559e:             this.loanedSessions.remove(session);
1:b66559e:         }
1:b66559e:     }
1:b66559e: 
1:b66559e:     public Connection getConnection() throws JMSException {
1:b66559e:         assertNotClosed();
1:b66559e:         return pool.getConnection();
1:b66559e:     }
1:b66559e: 
1:b66559e:     protected void assertNotClosed() throws javax.jms.IllegalStateException {
1:b66559e:         if (stopped || pool == null) {
1:b66559e:             throw new IllegalStateException("Connection closed");
1:b66559e:         }
1:b66559e:     }
1:b66559e: 
1:b66559e:     protected Session createSession(SessionKey key) throws JMSException {
1:b66559e:         return getConnection().createSession(key.isTransacted(), key.getAckMode());
1:b66559e:     }
1:b66559e: 
1:b66559e:     @Override
1:b66559e:     public String toString() {
1:b66559e:         return "PooledConnection { " + pool + " }";
1:b66559e:     }
1:b66559e: 
1:b66559e:     /**
1:b66559e:      * Remove all of the temporary destinations created for this connection.
1:b66559e:      * This is important since the underlying connection may be reused over a
1:b66559e:      * long period of time, accumulating all of the temporary destinations from
1:b66559e:      * each use. However, from the perspective of the lifecycle from the
1:b66559e:      * client's view, close() closes the connection and, therefore, deletes all
1:b66559e:      * of the temporary destinations created.
1:b66559e:      */
1:b66559e:     protected void cleanupConnectionTemporaryDestinations() {
1:b66559e: 
1:b66559e:         for (TemporaryQueue tempQueue : connTempQueues) {
1:b66559e:             try {
1:b66559e:                 tempQueue.delete();
1:b66559e:             } catch (JMSException ex) {
1:b66559e:                 LOG.info("failed to delete Temporary Queue \"" + tempQueue.toString() + "\" on closing pooled connection: " + ex.getMessage());
1:b66559e:             }
1:b66559e:         }
1:b66559e:         connTempQueues.clear();
1:b66559e: 
1:b66559e:         for (TemporaryTopic tempTopic : connTempTopics) {
1:b66559e:             try {
1:b66559e:                 tempTopic.delete();
1:b66559e:             } catch (JMSException ex) {
1:b66559e:                 LOG.info("failed to delete Temporary Topic \"" + tempTopic.toString() + "\" on closing pooled connection: " + ex.getMessage());
1:b66559e:             }
1:b66559e:         }
1:b66559e:         connTempTopics.clear();
1:b66559e:     }
1:b66559e: 
1:b66559e:     /**
1:b66559e:      * The PooledSession tracks all Sessions that it created and now we close them.  Closing the
1:b66559e:      * PooledSession will return the internal Session to the Pool of Session after cleaning up
1:b66559e:      * all the resources that the Session had allocated for this PooledConnection.
1:b66559e:      */
1:b66559e:     protected void cleanupAllLoanedSessions() {
1:b66559e: 
1:b66559e:         for (PooledSession session : loanedSessions) {
1:b66559e:             try {
1:b66559e:                 session.close();
1:b66559e:             } catch (JMSException ex) {
1:b66559e:                 LOG.info("failed to close laoned Session \"" + session + "\" on closing pooled connection: " + ex.getMessage());
1:b66559e:             }
1:b66559e:         }
1:b66559e:         loanedSessions.clear();
1:b66559e:     }
1:b66559e: 
1:b66559e:     /**
1:b66559e:      * @return the total number of Pooled session including idle sessions that are not
1:b66559e:      *          currently loaned out to any client.
1:b66559e:      */
1:b66559e:     public int getNumSessions() {
1:b66559e:         return this.pool.getNumSessions();
1:b66559e:     }
1:b66559e: 
1:b66559e:     /**
1:b66559e:      * @return the number of Sessions that are currently checked out of this Connection's session pool.
1:b66559e:      */
1:b66559e:     public int getNumActiveSessions() {
1:b66559e:         return this.pool.getNumActiveSessions();
1:b66559e:     }
1:b66559e: 
1:b66559e:     /**
1:b66559e:      * @return the number of Sessions that are idle in this Connection's sessions pool.
1:b66559e:      */
1:b66559e:     public int getNumtIdleSessions() {
1:b66559e:         return this.pool.getNumIdleSessions();
1:b66559e:     }
1:b66559e: }
============================================================================
author:Hadrian Zbarcea
-------------------------------------------------------------------------------
commit:d54d046
author:Timothy Bish
-------------------------------------------------------------------------------
commit:b65c0d1
/////////////////////////////////////////////////////////////////////////
1:         return pool.getParentExceptionListener();
/////////////////////////////////////////////////////////////////////////
1:         pool.setParentExceptionListener(exceptionListener);
commit:f91abd3
/////////////////////////////////////////////////////////////////////////
1: import javax.jms.IllegalStateException;
/////////////////////////////////////////////////////////////////////////
1: 
/////////////////////////////////////////////////////////////////////////
1:         PooledSession result = (PooledSession) pool.createSession(transacted, ackMode);
author:gtully
-------------------------------------------------------------------------------
commit:b66559e
/////////////////////////////////////////////////////////////////////////
1: /**
1:  * Licensed to the Apache Software Foundation (ASF) under one or more
1:  * contributor license agreements.  See the NOTICE file distributed with
1:  * this work for additional information regarding copyright ownership.
1:  * The ASF licenses this file to You under the Apache License, Version 2.0
1:  * (the "License"); you may not use this file except in compliance with
1:  * the License.  You may obtain a copy of the License at
1:  *
1:  *      http://www.apache.org/licenses/LICENSE-2.0
1:  *
1:  * Unless required by applicable law or agreed to in writing, software
1:  * distributed under the License is distributed on an "AS IS" BASIS,
1:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:  * See the License for the specific language governing permissions and
1:  * limitations under the License.
1:  */
1: package org.apache.activemq.jms.pool;
1: 
1: import java.util.List;
1: import java.util.concurrent.CopyOnWriteArrayList;
1: 
1: import javax.jms.Connection;
1: import javax.jms.ConnectionConsumer;
1: import javax.jms.ConnectionMetaData;
1: import javax.jms.Destination;
1: import javax.jms.ExceptionListener;
1: import javax.jms.JMSException;
1: import javax.jms.Queue;
1: import javax.jms.QueueConnection;
1: import javax.jms.QueueSession;
1: import javax.jms.ServerSessionPool;
1: import javax.jms.Session;
1: import javax.jms.TemporaryQueue;
1: import javax.jms.TemporaryTopic;
1: import javax.jms.Topic;
1: import javax.jms.TopicConnection;
1: import javax.jms.TopicSession;
0: import javax.jms.IllegalStateException;
1: import org.slf4j.Logger;
1: import org.slf4j.LoggerFactory;
1: 
1: /**
1:  * Represents a proxy {@link Connection} which is-a {@link TopicConnection} and
1:  * {@link QueueConnection} which is pooled and on {@link #close()} will return
1:  * its reference to the ConnectionPool backing it.
1:  *
1:  * <b>NOTE</b> this implementation is only intended for use when sending
1:  * messages. It does not deal with pooling of consumers; for that look at a
1:  * library like <a href="http://jencks.org/">Jencks</a> such as in <a
1:  * href="http://jencks.org/Message+Driven+POJOs">this example</a>
1:  *
1:  */
1: public class PooledConnection implements TopicConnection, QueueConnection, PooledSessionEventListener {
1:     private static final transient Logger LOG = LoggerFactory.getLogger(PooledConnection.class);
1: 
1:     protected ConnectionPool pool;
1:     private volatile boolean stopped;
1:     private final List<TemporaryQueue> connTempQueues = new CopyOnWriteArrayList<TemporaryQueue>();
1:     private final List<TemporaryTopic> connTempTopics = new CopyOnWriteArrayList<TemporaryTopic>();
1:     private final List<PooledSession> loanedSessions = new CopyOnWriteArrayList<PooledSession>();
1: 
1:     /**
1:      * Creates a new PooledConnection instance that uses the given ConnectionPool to create
1:      * and manage its resources.  The ConnectionPool instance can be shared amongst many
1:      * PooledConnection instances.
1:      *
1:      * @param pool
1:      *      The connection and pool manager backing this proxy connection object.
1:      */
1:     public PooledConnection(ConnectionPool pool) {
1:         this.pool = pool;
1:     }
1: 
1:     /**
1:      * Factory method to create a new instance.
1:      */
1:     public PooledConnection newInstance() {
1:         return new PooledConnection(pool);
1:     }
1: 
1:     @Override
1:     public void close() throws JMSException {
1:         this.cleanupConnectionTemporaryDestinations();
1:         this.cleanupAllLoanedSessions();
1:         if (this.pool != null) {
1:             this.pool.decrementReferenceCount();
1:             this.pool = null;
1:         }
1:     }
1: 
1:     @Override
1:     public void start() throws JMSException {
1:         assertNotClosed();
1:         pool.start();
1:     }
1: 
1:     @Override
1:     public void stop() throws JMSException {
1:         stopped = true;
1:     }
1: 
1:     @Override
1:     public ConnectionConsumer createConnectionConsumer(Destination destination, String selector, ServerSessionPool serverSessionPool, int maxMessages) throws JMSException {
1:         return getConnection().createConnectionConsumer(destination, selector, serverSessionPool, maxMessages);
1:     }
1: 
1:     @Override
1:     public ConnectionConsumer createConnectionConsumer(Topic topic, String s, ServerSessionPool serverSessionPool, int maxMessages) throws JMSException {
1:         return getConnection().createConnectionConsumer(topic, s, serverSessionPool, maxMessages);
1:     }
1: 
1:     @Override
1:     public ConnectionConsumer createDurableConnectionConsumer(Topic topic, String selector, String s1, ServerSessionPool serverSessionPool, int i) throws JMSException {
1:         return getConnection().createDurableConnectionConsumer(topic, selector, s1, serverSessionPool, i);
1:     }
1: 
1:     @Override
1:     public String getClientID() throws JMSException {
1:         return getConnection().getClientID();
1:     }
1: 
1:     @Override
1:     public ExceptionListener getExceptionListener() throws JMSException {
0:         return getConnection().getExceptionListener();
1:     }
1: 
1:     @Override
1:     public ConnectionMetaData getMetaData() throws JMSException {
1:         return getConnection().getMetaData();
1:     }
1: 
1:     @Override
1:     public void setExceptionListener(ExceptionListener exceptionListener) throws JMSException {
0:         getConnection().setExceptionListener(exceptionListener);
1:     }
1: 
1:     @Override
1:     public void setClientID(String clientID) throws JMSException {
1:         // ignore repeated calls to setClientID() with the same client id
1:         // this could happen when a JMS component such as Spring that uses a
1:         // PooledConnectionFactory shuts down and reinitializes.
1:         if (this.getConnection().getClientID() == null || !this.getClientID().equals(clientID)) {
1:             getConnection().setClientID(clientID);
1:         }
1:     }
1: 
1:     @Override
1:     public ConnectionConsumer createConnectionConsumer(Queue queue, String selector, ServerSessionPool serverSessionPool, int maxMessages) throws JMSException {
1:         return getConnection().createConnectionConsumer(queue, selector, serverSessionPool, maxMessages);
1:     }
1: 
1:     // Session factory methods
1:     // -------------------------------------------------------------------------
1:     @Override
1:     public QueueSession createQueueSession(boolean transacted, int ackMode) throws JMSException {
1:         return (QueueSession) createSession(transacted, ackMode);
1:     }
1: 
1:     @Override
1:     public TopicSession createTopicSession(boolean transacted, int ackMode) throws JMSException {
1:         return (TopicSession) createSession(transacted, ackMode);
1:     }
1: 
1:     @Override
1:     public Session createSession(boolean transacted, int ackMode) throws JMSException {
0:         PooledSession result;
0:         result = (PooledSession) pool.createSession(transacted, ackMode);
1: 
1:         // Store the session so we can close the sessions that this PooledConnection
1:         // created in order to ensure that consumers etc are closed per the JMS contract.
1:         loanedSessions.add(result);
1: 
1:         // Add a event listener to the session that notifies us when the session
1:         // creates / destroys temporary destinations and closes etc.
1:         result.addSessionEventListener(this);
1:         return result;
1:     }
1: 
1:     // Implementation methods
1:     // -------------------------------------------------------------------------
1: 
1:     @Override
1:     public void onTemporaryQueueCreate(TemporaryQueue tempQueue) {
1:         connTempQueues.add(tempQueue);
1:     }
1: 
1:     @Override
1:     public void onTemporaryTopicCreate(TemporaryTopic tempTopic) {
1:         connTempTopics.add(tempTopic);
1:     }
1: 
1:     @Override
1:     public void onSessionClosed(PooledSession session) {
1:         if (session != null) {
1:             this.loanedSessions.remove(session);
1:         }
1:     }
1: 
1:     public Connection getConnection() throws JMSException {
1:         assertNotClosed();
1:         return pool.getConnection();
1:     }
1: 
1:     protected void assertNotClosed() throws javax.jms.IllegalStateException {
1:         if (stopped || pool == null) {
1:             throw new IllegalStateException("Connection closed");
1:         }
1:     }
1: 
1:     protected Session createSession(SessionKey key) throws JMSException {
1:         return getConnection().createSession(key.isTransacted(), key.getAckMode());
1:     }
1: 
1:     @Override
1:     public String toString() {
1:         return "PooledConnection { " + pool + " }";
1:     }
1: 
1:     /**
1:      * Remove all of the temporary destinations created for this connection.
1:      * This is important since the underlying connection may be reused over a
1:      * long period of time, accumulating all of the temporary destinations from
1:      * each use. However, from the perspective of the lifecycle from the
1:      * client's view, close() closes the connection and, therefore, deletes all
1:      * of the temporary destinations created.
1:      */
1:     protected void cleanupConnectionTemporaryDestinations() {
1: 
1:         for (TemporaryQueue tempQueue : connTempQueues) {
1:             try {
1:                 tempQueue.delete();
1:             } catch (JMSException ex) {
1:                 LOG.info("failed to delete Temporary Queue \"" + tempQueue.toString() + "\" on closing pooled connection: " + ex.getMessage());
1:             }
1:         }
1:         connTempQueues.clear();
1: 
1:         for (TemporaryTopic tempTopic : connTempTopics) {
1:             try {
1:                 tempTopic.delete();
1:             } catch (JMSException ex) {
1:                 LOG.info("failed to delete Temporary Topic \"" + tempTopic.toString() + "\" on closing pooled connection: " + ex.getMessage());
1:             }
1:         }
1:         connTempTopics.clear();
1:     }
1: 
1:     /**
1:      * The PooledSession tracks all Sessions that it created and now we close them.  Closing the
1:      * PooledSession will return the internal Session to the Pool of Session after cleaning up
1:      * all the resources that the Session had allocated for this PooledConnection.
1:      */
1:     protected void cleanupAllLoanedSessions() {
1: 
1:         for (PooledSession session : loanedSessions) {
1:             try {
1:                 session.close();
1:             } catch (JMSException ex) {
1:                 LOG.info("failed to close laoned Session \"" + session + "\" on closing pooled connection: " + ex.getMessage());
1:             }
1:         }
1:         loanedSessions.clear();
1:     }
1: 
1:     /**
1:      * @return the total number of Pooled session including idle sessions that are not
1:      *          currently loaned out to any client.
1:      */
1:     public int getNumSessions() {
1:         return this.pool.getNumSessions();
1:     }
1: 
1:     /**
1:      * @return the number of Sessions that are currently checked out of this Connection's session pool.
1:      */
1:     public int getNumActiveSessions() {
1:         return this.pool.getNumActiveSessions();
1:     }
1: 
1:     /**
1:      * @return the number of Sessions that are idle in this Connection's sessions pool.
1:      */
1:     public int getNumtIdleSessions() {
1:         return this.pool.getNumIdleSessions();
1:     }
1: }
============================================================================