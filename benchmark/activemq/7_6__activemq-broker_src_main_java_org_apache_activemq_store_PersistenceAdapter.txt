1:d29ca2a: /**
1:57b4941:  * Licensed to the Apache Software Foundation (ASF) under one or more
1:57b4941:  * contributor license agreements.  See the NOTICE file distributed with
1:57b4941:  * this work for additional information regarding copyright ownership.
1:57b4941:  * The ASF licenses this file to You under the Apache License, Version 2.0
1:57b4941:  * (the "License"); you may not use this file except in compliance with
1:57b4941:  * the License.  You may obtain a copy of the License at
5:d29ca2a:  *
1:230a86c:  *      http://www.apache.org/licenses/LICENSE-2.0
1:d29ca2a:  *
1:d29ca2a:  * Unless required by applicable law or agreed to in writing, software
1:d29ca2a:  * distributed under the License is distributed on an "AS IS" BASIS,
1:d29ca2a:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:d29ca2a:  * See the License for the specific language governing permissions and
1:d29ca2a:  * limitations under the License.
1:d29ca2a:  */
1:d29ca2a: package org.apache.activemq.store;
6:d29ca2a: 
1:74a7a8b: import java.io.File;
1:74a7a8b: import java.io.IOException;
1:74a7a8b: import java.util.Set;
1:74a7a8b: 
1:d29ca2a: import org.apache.activemq.Service;
1:d29ca2a: import org.apache.activemq.broker.ConnectionContext;
1:74846bb: import org.apache.activemq.broker.scheduler.JobSchedulerStore;
1:0afb7f9: import org.apache.activemq.command.ActiveMQDestination;
1:d29ca2a: import org.apache.activemq.command.ActiveMQQueue;
1:d29ca2a: import org.apache.activemq.command.ActiveMQTopic;
1:a6a6a70: import org.apache.activemq.command.ProducerId;
1:6d8e2c5: import org.apache.activemq.usage.SystemUsage;
1:18d616c: 
1:18d616c: /**
1:d29ca2a:  * Adapter to the actual persistence mechanism used with ActiveMQ
1:74846bb:  *
1:b0c2a40:  *
1:18d616c:  */
1:d29ca2a: public interface PersistenceAdapter extends Service {
1:18d616c: 
1:d29ca2a:     /**
1:74846bb:      * Returns a set of all the
1:74846bb:      * {@link org.apache.activemq.command.ActiveMQDestination} objects that the
1:74846bb:      * persistence store is aware exist.
1:d29ca2a:      *
1:759fd28:      * @return active destinations
1:d29ca2a:      */
1:fc00993:     Set<ActiveMQDestination> getDestinations();
1:d29ca2a: 
1:d29ca2a:     /**
1:74846bb:      * Factory method to create a new queue message store with the given
1:74846bb:      * destination name
1:74846bb:      *
2:759fd28:      * @param destination
1:759fd28:      * @return the message store
1:74846bb:      * @throws IOException
1:d29ca2a:      */
1:fc00993:     MessageStore createQueueMessageStore(ActiveMQQueue destination) throws IOException;
1:0afb7f9: 
1:d29ca2a:     /**
1:74846bb:      * Factory method to create a new topic message store with the given
1:74846bb:      * destination name
1:74846bb:      *
1:74846bb:      * @param destination
1:759fd28:      * @return the topic message store
1:74846bb:      * @throws IOException
1:d29ca2a:      */
1:fc00993:     TopicMessageStore createTopicMessageStore(ActiveMQTopic destination) throws IOException;
1:d29ca2a: 
1:d29ca2a:     /**
1:74846bb:      * Creates and returns a new Job Scheduler store instance.
1:74846bb:      *
1:74846bb:      * @return a new JobSchedulerStore instance if this Persistence adapter provides its own.
1:74846bb:      *
1:74846bb:      * @throws IOException If an error occurs while creating the new JobSchedulerStore.
1:74846bb:      * @throws UnsupportedOperationException If this adapter does not provide its own
1:74846bb:      *                                       scheduler store implementation.
1:74846bb:      */
1:74846bb:     JobSchedulerStore createJobSchedulerStore() throws IOException, UnsupportedOperationException;
1:74846bb: 
1:74846bb:     /**
1:07b6a38:      * Cleanup method to remove any state associated with the given destination.
1:07b6a38:      * This method does not stop the message store (it might not be cached).
1:74846bb:      *
1:74846bb:      * @param destination
1:74846bb:      *            Destination to forget
1:d29ca2a:      */
1:07b6a38:     void removeQueueMessageStore(ActiveMQQueue destination);
1:d29ca2a: 
1:d29ca2a:     /**
1:07b6a38:      * Cleanup method to remove any state associated with the given destination
1:07b6a38:      * This method does not stop the message store (it might not be cached).
1:74846bb:      *
1:74846bb:      * @param destination
1:74846bb:      *            Destination to forget
1:d29ca2a:      */
1:07b6a38:     void removeTopicMessageStore(ActiveMQTopic destination);
1:d29ca2a: 
1:d29ca2a:     /**
1:74846bb:      * Factory method to create a new persistent prepared transaction store for
1:74846bb:      * XA recovery
1:74846bb:      *
1:759fd28:      * @return transaction store
1:74846bb:      * @throws IOException
1:07b6a38:      */
1:fc00993:     TransactionStore createTransactionStore() throws IOException;
1:d29ca2a: 
1:759fd28:     /**
1:74846bb:      * This method starts a transaction on the persistent storage - which is
1:74846bb:      * nothing to do with JMS or XA transactions - its purely a mechanism to
1:74846bb:      * perform multiple writes to a persistent store in 1 transaction as a
1:74846bb:      * performance optimization.
1:d29ca2a:      * <p/>
1:74846bb:      * Typically one transaction will require one disk synchronization point and
1:74846bb:      * so for real high performance its usually faster to perform many writes
1:74846bb:      * within the same transaction to minimize latency caused by disk
1:74846bb:      * synchronization. This is especially true when using tools like Berkeley
1:74846bb:      * Db or embedded JDBC servers.
1:74846bb:      *
1:74846bb:      * @param context
1:74846bb:      * @throws IOException
1:d29ca2a:      */
1:fc00993:     void beginTransaction(ConnectionContext context) throws IOException;
1:d29ca2a: 
1:d29ca2a:     /**
1:d29ca2a:      * Commit a persistence transaction
1:74846bb:      *
1:74846bb:      * @param context
1:74846bb:      * @throws IOException
1:d29ca2a:      *
1:759fd28:      * @see PersistenceAdapter#beginTransaction(ConnectionContext context)
1:d29ca2a:      */
1:fc00993:     void commitTransaction(ConnectionContext context) throws IOException;
1:d29ca2a: 
1:d29ca2a:     /**
1:d29ca2a:      * Rollback a persistence transaction
1:74846bb:      *
1:74846bb:      * @param context
1:74846bb:      * @throws IOException
1:d29ca2a:      *
1:759fd28:      * @see PersistenceAdapter#beginTransaction(ConnectionContext context)
1:d29ca2a:      */
1:fc00993:     void rollbackTransaction(ConnectionContext context) throws IOException;
1:74846bb: 
1:d29ca2a:     /**
1:74846bb:      *
1:759fd28:      * @return last broker sequence
1:d29ca2a:      * @throws IOException
1:d29ca2a:      */
1:fc00993:     long getLastMessageBrokerSequenceId() throws IOException;
1:74846bb: 
1:d29ca2a:     /**
1:d29ca2a:      * Delete's all the messages in the persistent store.
1:74846bb:      *
1:d29ca2a:      * @throws IOException
1:d29ca2a:      */
1:fc00993:     void deleteAllMessages() throws IOException;
1:74846bb: 
1:07b6a38:     /**
1:74846bb:      * @param usageManager
1:74846bb:      *            The UsageManager that is controlling the broker's memory
1:74846bb:      *            usage.
1:07b6a38:      */
1:6d8e2c5:     void setUsageManager(SystemUsage usageManager);
1:74846bb: 
1:07b6a38:     /**
1:759fd28:      * Set the name of the broker using the adapter
1:74846bb:      *
1:759fd28:      * @param brokerName
1:759fd28:      */
1:fc00993:     void setBrokerName(String brokerName);
1:74846bb: 
1:759fd28:     /**
1:759fd28:      * Set the directory where any data files should be created
1:74846bb:      *
1:759fd28:      * @param dir
1:759fd28:      */
1:fc00993:     void setDirectory(File dir);
1:d29ca2a: 
1:dbc661f:     /**
1:dbc661f:      * @return the directory used by the persistence adaptor
1:dbc661f:      */
1:dbc661f:     File getDirectory();
1:74846bb: 
1:759fd28:     /**
1:759fd28:      * checkpoint any
1:74846bb:      *
1:74846bb:      * @param sync
1:74846bb:      * @throws IOException
1:d29ca2a:      *
1:759fd28:      */
1:fc00993:     void checkpoint(boolean sync) throws IOException;
1:74846bb: 
1:6d8e2c5:     /**
1:6d8e2c5:      * A hint to return the size of the store on disk
1:74846bb:      *
1:6d8e2c5:      * @return disk space used in bytes of 0 if not implemented
1:6d8e2c5:      */
1:6d8e2c5:     long size();
1:d29ca2a: 
1:a6a6a70:     /**
1:74846bb:      * return the last stored producer sequenceId for this producer Id used to
1:74846bb:      * suppress duplicate sends on failover reconnect at the transport when a
1:74846bb:      * reconnect occurs
1:74846bb:      *
1:74846bb:      * @param id
1:74846bb:      *            the producerId to find a sequenceId for
1:a6a6a70:      * @return the last stored sequence id or -1 if no suppression needed
1:a6a6a70:      */
1:a6a6a70:     long getLastProducerSequenceId(ProducerId id) throws IOException;
1:b07821a: 
1:b07821a:     void allowIOResumption();
1:d29ca2a: }
============================================================================
author:gtully
-------------------------------------------------------------------------------
commit:b07821a
/////////////////////////////////////////////////////////////////////////
1: 
1:     void allowIOResumption();
author:Hadrian Zbarcea
-------------------------------------------------------------------------------
commit:d54d046
author:Timothy Bish
-------------------------------------------------------------------------------
commit:74846bb
/////////////////////////////////////////////////////////////////////////
1: import org.apache.activemq.broker.scheduler.JobSchedulerStore;
/////////////////////////////////////////////////////////////////////////
1:  *
1:      * Returns a set of all the
1:      * {@link org.apache.activemq.command.ActiveMQDestination} objects that the
1:      * persistence store is aware exist.
1:      * Factory method to create a new queue message store with the given
1:      * destination name
1:      *
1:      * @throws IOException
1:      * Factory method to create a new topic message store with the given
1:      * destination name
1:      *
1:      * @param destination
1:      * @throws IOException
1:      * Creates and returns a new Job Scheduler store instance.
1:      *
1:      * @return a new JobSchedulerStore instance if this Persistence adapter provides its own.
1:      *
1:      * @throws IOException If an error occurs while creating the new JobSchedulerStore.
1:      * @throws UnsupportedOperationException If this adapter does not provide its own
1:      *                                       scheduler store implementation.
1:      */
1:     JobSchedulerStore createJobSchedulerStore() throws IOException, UnsupportedOperationException;
1: 
1:     /**
1:      *
1:      * @param destination
1:      *            Destination to forget
1:      *
1:      * @param destination
1:      *            Destination to forget
1:      * Factory method to create a new persistent prepared transaction store for
1:      * XA recovery
1:      *
1:      * @throws IOException
1:      * This method starts a transaction on the persistent storage - which is
1:      * nothing to do with JMS or XA transactions - its purely a mechanism to
1:      * perform multiple writes to a persistent store in 1 transaction as a
1:      * performance optimization.
1:      * Typically one transaction will require one disk synchronization point and
1:      * so for real high performance its usually faster to perform many writes
1:      * within the same transaction to minimize latency caused by disk
1:      * synchronization. This is especially true when using tools like Berkeley
1:      * Db or embedded JDBC servers.
1:      *
1:      * @param context
1:      * @throws IOException
1:      *
1:      * @param context
1:      * @throws IOException
/////////////////////////////////////////////////////////////////////////
1:      *
1:      * @param context
1:      * @throws IOException
1: 
1:      *
1: 
1:      *
1: 
1:      * @param usageManager
1:      *            The UsageManager that is controlling the broker's memory
1:      *            usage.
1: 
1:      *
1: 
1:      *
/////////////////////////////////////////////////////////////////////////
1: 
1:      *
1:      * @param sync
1:      * @throws IOException
1: 
1:      *
1:      * return the last stored producer sequenceId for this producer Id used to
1:      * suppress duplicate sends on failover reconnect at the transport when a
1:      * reconnect occurs
1:      *
1:      * @param id
1:      *            the producerId to find a sequenceId for
author:Hiram R. Chirino
-------------------------------------------------------------------------------
commit:58aca86
commit:b0c2a40
/////////////////////////////////////////////////////////////////////////
1:  * 
commit:fc00993
/////////////////////////////////////////////////////////////////////////
1:     Set<ActiveMQDestination> getDestinations();
/////////////////////////////////////////////////////////////////////////
1:     MessageStore createQueueMessageStore(ActiveMQQueue destination) throws IOException;
/////////////////////////////////////////////////////////////////////////
1:     TopicMessageStore createTopicMessageStore(ActiveMQTopic destination) throws IOException;
1:     TransactionStore createTransactionStore() throws IOException;
/////////////////////////////////////////////////////////////////////////
1:     void beginTransaction(ConnectionContext context) throws IOException;
/////////////////////////////////////////////////////////////////////////
1:     void commitTransaction(ConnectionContext context) throws IOException;
/////////////////////////////////////////////////////////////////////////
1:     void rollbackTransaction(ConnectionContext context) throws IOException;
1:     long getLastMessageBrokerSequenceId() throws IOException;
1:     void deleteAllMessages() throws IOException;
0:     void setUsageManager(UsageManager usageManager);
1:     void setBrokerName(String brokerName);
1:     void setDirectory(File dir);
/////////////////////////////////////////////////////////////////////////
1:     void checkpoint(boolean sync) throws IOException;
commit:74a7a8b
/////////////////////////////////////////////////////////////////////////
1: import java.io.File;
1: import java.io.IOException;
1: import java.util.Set;
1: 
/////////////////////////////////////////////////////////////////////////
commit:230a86c
/////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////
1:  *      http://www.apache.org/licenses/LICENSE-2.0
commit:0afb7f9
/////////////////////////////////////////////////////////////////////////
1: import org.apache.activemq.command.ActiveMQDestination;
/////////////////////////////////////////////////////////////////////////
0:     public Set<ActiveMQDestination> getDestinations();
/////////////////////////////////////////////////////////////////////////
1:         
commit:57b4941
/////////////////////////////////////////////////////////////////////////
1:  * Licensed to the Apache Software Foundation (ASF) under one or more
1:  * contributor license agreements.  See the NOTICE file distributed with
1:  * this work for additional information regarding copyright ownership.
1:  * The ASF licenses this file to You under the Apache License, Version 2.0
1:  * (the "License"); you may not use this file except in compliance with
1:  * the License.  You may obtain a copy of the License at
commit:18d616c
/////////////////////////////////////////////////////////////////////////
0: import org.apache.activemq.memory.UsageManager;
/////////////////////////////////////////////////////////////////////////
1:     
1:     /**
0:      * @param usageManager The UsageManager that is controlling the broker's memory usage.
1:      */
0:     public void setUsageManager(UsageManager usageManager);
1: 
commit:48b4869
/////////////////////////////////////////////////////////////////////////
0:  * Copyright 2005-2006 The Apache Software Foundation
commit:d29ca2a
/////////////////////////////////////////////////////////////////////////
1: /**
1:  *
0:  * Copyright 2004 The Apache Software Foundation
1:  *
0:  * Licensed under the Apache License, Version 2.0 (the "License");
0:  * you may not use this file except in compliance with the License.
0:  * You may obtain a copy of the License at
1:  *
0:  * http://www.apache.org/licenses/LICENSE-2.0
1:  *
1:  * Unless required by applicable law or agreed to in writing, software
1:  * distributed under the License is distributed on an "AS IS" BASIS,
1:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:  * See the License for the specific language governing permissions and
1:  * limitations under the License.
1:  */
1: package org.apache.activemq.store;
1: 
1: import org.apache.activemq.Service;
1: import org.apache.activemq.broker.ConnectionContext;
1: import org.apache.activemq.command.ActiveMQQueue;
1: import org.apache.activemq.command.ActiveMQTopic;
1: 
0: import java.io.IOException;
0: import java.util.Set;
1: 
1: /**
1:  * Adapter to the actual persistence mechanism used with ActiveMQ
1:  *
0:  * @version $Revision: 1.3 $
1:  */
1: public interface PersistenceAdapter extends Service {
1: 
1:     /**
0:      * Returns a set of all the {@link org.apache.activemq.command.ActiveMQDestination}
0:      * objects that the persistence store is aware exist.
1:      *
0:      * @return
1:      */
0:     public Set getDestinations();
1: 
1:     /**
0:      * Factory method to create a new queue message store with the given destination name
1:      */
0:     public MessageStore createQueueMessageStore(ActiveMQQueue destination) throws IOException;
1: 
1:     /**
0:      * Factory method to create a new topic message store with the given destination name
1:      */
0:     public TopicMessageStore createTopicMessageStore(ActiveMQTopic destination) throws IOException;
1: 
1:     /**
0:      * Factory method to create a new persistent prepared transaction store for XA recovery
1:      */
0:     public TransactionStore createTransactionStore() throws IOException;
1: 
1:     /**
0:      * This method starts a transaction on the persistent storage - which is nothing to
0:      * do with JMS or XA transactions - its purely a mechanism to perform multiple writes
0:      * to a persistent store in 1 transaction as a performance optimization.
1:      * <p/>
0:      * Typically one transaction will require one disk synchronization point and so for
0:      * real high performance its usually faster to perform many writes within the same
0:      * transaction to minimize latency caused by disk synchronization. This is especially
0:      * true when using tools like Berkeley Db or embedded JDBC servers.
1:      */
0:     public void beginTransaction(ConnectionContext context) throws IOException;
1: 
1: 
1:     /**
1:      * Commit a persistence transaction
1:      *
0:      * @see PersistenceAdapter#beginTransaction()
1:      */
0:     public void commitTransaction(ConnectionContext context) throws IOException;
1: 
1:     /**
1:      * Rollback a persistence transaction
1:      *
0:      * @see PersistenceAdapter#beginTransaction()
1:      */
0:     public void rollbackTransaction(ConnectionContext context) throws IOException;
1:     
1:     /**
1:      * 
0:      * @return
1:      * @throws IOException
1:      */
0:     public long getLastMessageBrokerSequenceId() throws IOException;
1:     
1:     /**
1:      * Delete's all the messages in the persistent store.
1:      * 
1:      * @throws IOException
1:      */
0:     public void deleteAllMessages() throws IOException;
1:     
0:     public boolean isUseExternalMessageReferences();
0:     public void setUseExternalMessageReferences(boolean enable);
1:    
1: }
author:Robert Davies
-------------------------------------------------------------------------------
commit:dbc661f
/////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////
0: 
1:     /**
1:      * @return the directory used by the persistence adaptor
1:      */
1:     File getDirectory();
commit:6d8e2c5
/////////////////////////////////////////////////////////////////////////
1: import org.apache.activemq.usage.SystemUsage;
/////////////////////////////////////////////////////////////////////////
1:     void setUsageManager(SystemUsage usageManager);
/////////////////////////////////////////////////////////////////////////
0:     
1:     /**
1:      * A hint to return the size of the store on disk
1:      * @return disk space used in bytes of 0 if not implemented
1:      */
1:     long size();
commit:759fd28
/////////////////////////////////////////////////////////////////////////
0: import java.io.File;
/////////////////////////////////////////////////////////////////////////
1:      * @return active destinations
1:      * @param destination
1:      * @return the message store
0:      * @throws IOException 
1:      * @param destination 
1:      * @return the topic message store
0:      * @throws IOException 
1:      * @return transaction store
0:      * @throws IOException 
/////////////////////////////////////////////////////////////////////////
0:      * @param context 
0:      * @throws IOException 
0:      * @param context 
0:      * @throws IOException 
1:      * @see PersistenceAdapter#beginTransaction(ConnectionContext context)
0:      * @param context 
0:      * @throws IOException 
1:      * @see PersistenceAdapter#beginTransaction(ConnectionContext context)
1:      * @return last broker sequence
/////////////////////////////////////////////////////////////////////////
0:     
1:     /**
1:      * Set the name of the broker using the adapter
1:      * @param brokerName
1:      */
0:     public void setBrokerName(String brokerName);
0:     
1:     /**
1:      * Set the directory where any data files should be created
1:      * @param dir
1:      */
0:     public void setDirectory(File dir);
0:     
1:     /**
1:      * checkpoint any
0:      * @param sync 
0:      * @throws IOException 
0:      *
1:      */
0:     public void checkpoint(boolean sync) throws IOException;
commit:629bc81
/////////////////////////////////////////////////////////////////////////
author:Gary Tully
-------------------------------------------------------------------------------
commit:a6a6a70
/////////////////////////////////////////////////////////////////////////
1: import org.apache.activemq.command.ProducerId;
/////////////////////////////////////////////////////////////////////////
0: 
1:     /**
0:      * return the last stored producer sequenceId for this producer Id
0:      * used to suppress duplicate sends on failover reconnect at the transport
0:      * when a reconnect occurs
0:      * @param id the producerId to find a sequenceId for
1:      * @return the last stored sequence id or -1 if no suppression needed
1:      */
1:     long getLastProducerSequenceId(ProducerId id) throws IOException;
author:David Jencks
-------------------------------------------------------------------------------
commit:07b6a38
/////////////////////////////////////////////////////////////////////////
0: import org.apache.activemq.broker.region.Destination;
/////////////////////////////////////////////////////////////////////////
1:      * Cleanup method to remove any state associated with the given destination.
1:      * This method does not stop the message store (it might not be cached).
0:      * @param destination Destination to forget
1:      */
1:     void removeQueueMessageStore(ActiveMQQueue destination);
0: 
1:     /**
1:      * Cleanup method to remove any state associated with the given destination
1:      * This method does not stop the message store (it might not be cached).
0:      * @param destination Destination to forget
1:      */
1:     void removeTopicMessageStore(ActiveMQTopic destination);
0: 
1:     /**
============================================================================