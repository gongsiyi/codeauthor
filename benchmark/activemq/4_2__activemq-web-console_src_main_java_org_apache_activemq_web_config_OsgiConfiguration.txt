1:0d27c49: /**
1:0d27c49:  * Licensed to the Apache Software Foundation (ASF) under one or more
1:0d27c49:  * contributor license agreements.  See the NOTICE file distributed with
1:0d27c49:  * this work for additional information regarding copyright ownership.
1:0d27c49:  * The ASF licenses this file to You under the Apache License, Version 2.0
1:0d27c49:  * (the "License"); you may not use this file except in compliance with
1:0d27c49:  * the License.  You may obtain a copy of the License at
1:0d27c49:  *
1:0d27c49:  *      http://www.apache.org/licenses/LICENSE-2.0
1:0d27c49:  *
1:0d27c49:  * Unless required by applicable law or agreed to in writing, software
1:0d27c49:  * distributed under the License is distributed on an "AS IS" BASIS,
1:0d27c49:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:0d27c49:  * See the License for the specific language governing permissions and
1:0d27c49:  * limitations under the License.
1:0d27c49:  */
1:0d27c49: package org.apache.activemq.web.config;
1:0d27c49: 
1:0d27c49: import org.osgi.framework.BundleContext;
1:0d27c49: import org.osgi.framework.Constants;
1:0d27c49: import org.osgi.framework.FrameworkUtil;
1:0d27c49: import org.osgi.framework.ServiceRegistration;
1:0d27c49: import org.osgi.service.cm.ConfigurationException;
1:0d27c49: import org.osgi.service.cm.ManagedService;
1:0d27c49: 
1:0d27c49: import javax.jms.ConnectionFactory;
1:0d27c49: import javax.management.remote.JMXServiceURL;
1:0d27c49: import java.util.Collection;
1:0d27c49: import java.util.Dictionary;
1:0d27c49: import java.util.Hashtable;
1:0d27c49: 
1:0d27c49: public class OsgiConfiguration extends AbstractConfiguration implements ManagedService {
1:0d27c49: 
1:0d27c49:     private ServiceRegistration service;
1:0d27c49: 
1:0d27c49:     private String jmxUrl = "service:jmx:rmi:///jndi/rmi://localhost:1099/karaf-root";
1:0d27c49:     private String jmxUser = "karaf";
1:0d27c49:     private String jmxPassword = "karaf";
1:0d27c49: 
1:0d27c49:     private String jmsUrl = "tcp://localhost:61616";
1:0d27c49:     private String jmsUser = "karaf";
1:0d27c49:     private String jmsPassword = "karaf";
1:0d27c49: 
1:0d27c49:     public OsgiConfiguration() {
1:0d27c49: 
1:0d27c49:         BundleContext context = FrameworkUtil.getBundle(getClass()).getBundleContext();
1:0f4320d:         Dictionary<String, String> properties = new Hashtable<String, String>();
1:e8deea9:         properties.put(Constants.SERVICE_PID, "org.apache.activemq.webconsole");
1:0d27c49:         service = context.registerService(ManagedService.class.getName(),
1:0d27c49:             this, properties);
1:0d27c49: 
1:0d27c49:     }
1:0d27c49: 
1:0d27c49:     @Override
1:0d27c49:     public String getJmxPassword() {
1:0d27c49:         return jmxPassword;
1:0d27c49:     }
1:0d27c49: 
1:0d27c49:     @Override
1:0d27c49:     public Collection<JMXServiceURL> getJmxUrls() {
1:0d27c49:         return makeJmxUrls(jmxUrl);
1:0d27c49:     }
1:0d27c49: 
1:0d27c49:     @Override
1:0d27c49:     public String getJmxUser() {
1:0d27c49:         return jmxUser;
1:0d27c49:     }
1:0d27c49: 
1:0d27c49:     @Override
1:0d27c49:     public ConnectionFactory getConnectionFactory() {
1:0d27c49:         return makeConnectionFactory(jmsUrl, jmsUser, jmsPassword);
1:0d27c49:     }
1:0d27c49: 
1:0d27c49:     @Override
1:0d27c49:     public void updated(Dictionary dictionary) throws ConfigurationException {
1:3527a4c:         if (dictionary != null) {
1:3527a4c:             jmxUrl = (String) dictionary.get(SystemPropertiesConfiguration.PROPERTY_JMX_URL);
1:3527a4c:             if (jmxUrl == null) {
1:3527a4c:                 throw new IllegalArgumentException("A JMS-url must be specified (system property " + SystemPropertiesConfiguration.PROPERTY_JMX_URL);
1:3527a4c:             }
1:3527a4c:             jmxUser = (String) dictionary.get(SystemPropertiesConfiguration.PROPERTY_JMX_USER);
1:3527a4c:             jmxPassword = (String) dictionary.get(SystemPropertiesConfiguration.PROPERTY_JMX_PASSWORD);
1:3527a4c:             jmsUrl = (String) dictionary.get(SystemPropertiesConfiguration.PROPERTY_JMS_URL);
1:3527a4c:             jmsUser = (String) dictionary.get(SystemPropertiesConfiguration.PROPERTY_JMS_USER);
1:3527a4c:             jmsPassword = (String) dictionary.get(SystemPropertiesConfiguration.PROPERTY_JMS_PASSWORD);
1:e8deea9:         }
1:0d27c49:     }
1:0d27c49: }
============================================================================
author:gtully
-------------------------------------------------------------------------------
commit:0f4320d
/////////////////////////////////////////////////////////////////////////
1:         Dictionary<String, String> properties = new Hashtable<String, String>();
author:Hiram R. Chirino
-------------------------------------------------------------------------------
commit:db08d6e
/////////////////////////////////////////////////////////////////////////
author:Bosanac Dejan
-------------------------------------------------------------------------------
commit:3527a4c
/////////////////////////////////////////////////////////////////////////
0: import sun.util.LocaleServiceProviderPool;
/////////////////////////////////////////////////////////////////////////
1:         if (dictionary != null) {
1:             jmxUrl = (String) dictionary.get(SystemPropertiesConfiguration.PROPERTY_JMX_URL);
1:             if (jmxUrl == null) {
1:                 throw new IllegalArgumentException("A JMS-url must be specified (system property " + SystemPropertiesConfiguration.PROPERTY_JMX_URL);
1:             }
1:             jmxUser = (String) dictionary.get(SystemPropertiesConfiguration.PROPERTY_JMX_USER);
1:             jmxPassword = (String) dictionary.get(SystemPropertiesConfiguration.PROPERTY_JMX_PASSWORD);
1:             jmsUrl = (String) dictionary.get(SystemPropertiesConfiguration.PROPERTY_JMS_URL);
1:             jmsUser = (String) dictionary.get(SystemPropertiesConfiguration.PROPERTY_JMS_USER);
1:             jmsPassword = (String) dictionary.get(SystemPropertiesConfiguration.PROPERTY_JMS_PASSWORD);
commit:e8deea9
/////////////////////////////////////////////////////////////////////////
1:         properties.put(Constants.SERVICE_PID, "org.apache.activemq.webconsole");
/////////////////////////////////////////////////////////////////////////
0:         jmxUrl = (String)dictionary.get(SystemPropertiesConfiguration.PROPERTY_JMX_URL);
0:         if (jmxUrl == null) {
0:             throw new IllegalArgumentException("A JMS-url must be specified (system property " + SystemPropertiesConfiguration.PROPERTY_JMX_URL);
1:         }
0:         jmxUser = (String)dictionary.get(SystemPropertiesConfiguration.PROPERTY_JMX_USER);
0:         jmxPassword = (String)dictionary.get(SystemPropertiesConfiguration.PROPERTY_JMX_PASSWORD);
0:         jmxUrl = (String)dictionary.get(SystemPropertiesConfiguration.PROPERTY_JMS_URL);
0:         jmsUser = (String)dictionary.get(SystemPropertiesConfiguration.PROPERTY_JMS_USER);
0:         jmsPassword = (String)dictionary.get(SystemPropertiesConfiguration.PROPERTY_JMS_PASSWORD);
commit:0d27c49
/////////////////////////////////////////////////////////////////////////
1: /**
1:  * Licensed to the Apache Software Foundation (ASF) under one or more
1:  * contributor license agreements.  See the NOTICE file distributed with
1:  * this work for additional information regarding copyright ownership.
1:  * The ASF licenses this file to You under the Apache License, Version 2.0
1:  * (the "License"); you may not use this file except in compliance with
1:  * the License.  You may obtain a copy of the License at
1:  *
1:  *      http://www.apache.org/licenses/LICENSE-2.0
1:  *
1:  * Unless required by applicable law or agreed to in writing, software
1:  * distributed under the License is distributed on an "AS IS" BASIS,
1:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:  * See the License for the specific language governing permissions and
1:  * limitations under the License.
1:  */
1: package org.apache.activemq.web.config;
1: 
1: import org.osgi.framework.BundleContext;
1: import org.osgi.framework.Constants;
1: import org.osgi.framework.FrameworkUtil;
1: import org.osgi.framework.ServiceRegistration;
1: import org.osgi.service.cm.ConfigurationException;
1: import org.osgi.service.cm.ManagedService;
1: 
1: import javax.jms.ConnectionFactory;
1: import javax.management.remote.JMXServiceURL;
1: import java.util.Collection;
1: import java.util.Dictionary;
1: import java.util.Hashtable;
1: 
1: public class OsgiConfiguration extends AbstractConfiguration implements ManagedService {
1: 
1:     private ServiceRegistration service;
1: 
1:     private String jmxUrl = "service:jmx:rmi:///jndi/rmi://localhost:1099/karaf-root";
1:     private String jmxUser = "karaf";
1:     private String jmxPassword = "karaf";
1: 
1:     private String jmsUrl = "tcp://localhost:61616";
1:     private String jmsUser = "karaf";
1:     private String jmsPassword = "karaf";
1: 
1:     public OsgiConfiguration() {
1: 
1:         BundleContext context = FrameworkUtil.getBundle(getClass()).getBundleContext();
0:         Dictionary properties = new Hashtable();
0:         properties.put(Constants.SERVICE_PID, "org.apache.activemq.server");
1:         service = context.registerService(ManagedService.class.getName(),
1:             this, properties);
1: 
1:     }
1: 
1:     @Override
1:     public String getJmxPassword() {
1:         return jmxPassword;
1:     }
1: 
1:     @Override
1:     public Collection<JMXServiceURL> getJmxUrls() {
1:         return makeJmxUrls(jmxUrl);
1:     }
1: 
1:     @Override
1:     public String getJmxUser() {
1:         return jmxUser;
1:     }
1: 
1:     @Override
1:     public ConnectionFactory getConnectionFactory() {
1:         return makeConnectionFactory(jmsUrl, jmsUser, jmsPassword);
1:     }
1: 
1:     @Override
1:     public void updated(Dictionary dictionary) throws ConfigurationException {
0:         //TODO update properties
1:     }
1: }
author:Gary Tully
-------------------------------------------------------------------------------
commit:964f8ca
/////////////////////////////////////////////////////////////////////////
0:         jmxUrl = dictionary != null ? (String)dictionary.get(SystemPropertiesConfiguration.PROPERTY_JMX_URL) : null;
============================================================================