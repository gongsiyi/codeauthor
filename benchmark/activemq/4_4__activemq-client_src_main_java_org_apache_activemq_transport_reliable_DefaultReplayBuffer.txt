1:8d589ec: /**
1:57b4941:  * Licensed to the Apache Software Foundation (ASF) under one or more
1:57b4941:  * contributor license agreements.  See the NOTICE file distributed with
1:57b4941:  * this work for additional information regarding copyright ownership.
1:57b4941:  * The ASF licenses this file to You under the Apache License, Version 2.0
1:57b4941:  * (the "License"); you may not use this file except in compliance with
1:57b4941:  * the License.  You may obtain a copy of the License at
3:8d589ec:  *
1:230a86c:  *      http://www.apache.org/licenses/LICENSE-2.0
1:8d589ec:  *
1:8d589ec:  * Unless required by applicable law or agreed to in writing, software
1:8d589ec:  * distributed under the License is distributed on an "AS IS" BASIS,
1:8d589ec:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:8d589ec:  * See the License for the specific language governing permissions and
1:8d589ec:  * limitations under the License.
1:8d589ec:  */
1:8d589ec: package org.apache.activemq.transport.reliable;
1:f3ef1a9: 
1:8d589ec: import java.io.IOException;
1:8d589ec: import java.util.HashMap;
1:8d589ec: import java.util.Map;
1:74a7a8b: 
1:8bf987b: import org.slf4j.Logger;
1:8bf987b: import org.slf4j.LoggerFactory;
3:8d589ec: 
1:8d589ec: /**
1:0bbc0ac:  * 
1:8d589ec:  * 
1:8d589ec:  */
1:8d589ec: public class DefaultReplayBuffer implements ReplayBuffer {
1:f3ef1a9: 
1:8bf987b:     private static final Logger LOG = LoggerFactory.getLogger(DefaultReplayBuffer.class);
1:8d589ec: 
1:8d589ec:     private final int size;
1:8d589ec:     private ReplayBufferListener listener;
1:933eb2f:     private Map<Integer, Object> map;
1:8d589ec:     private int lowestCommandId = 1;
1:8d589ec:     private Object lock = new Object();
1:8d589ec: 
1:8d589ec:     public DefaultReplayBuffer(int size) {
1:8d589ec:         this.size = size;
1:8d589ec:         map = createMap(size);
1:8d589ec:     }
1:8d589ec: 
1:8d589ec:     public void addBuffer(int commandId, Object buffer) {
1:fc00993:         if (LOG.isDebugEnabled()) {
1:fc00993:             LOG.debug("Adding command ID: " + commandId + " to replay buffer: " + this + " object: " + buffer);
1:f3ef1a9:         }
1:8d589ec:         synchronized (lock) {
1:8d589ec:             int max = size - 1;
1:8d589ec:             while (map.size() >= max) {
1:8d589ec:                 // lets find things to evict
1:d36c0d4:                 Object evictedBuffer = map.remove(Integer.valueOf(++lowestCommandId));
1:8d589ec:                 onEvictedBuffer(lowestCommandId, evictedBuffer);
1:8d589ec:             }
1:d36c0d4:             map.put(Integer.valueOf(commandId), buffer);
1:8d589ec:         }
1:8d589ec:     }
1:8d589ec: 
1:8d589ec:     public void setReplayBufferListener(ReplayBufferListener bufferPoolAdapter) {
1:8d589ec:         this.listener = bufferPoolAdapter;
1:8d589ec:     }
1:8d589ec: 
1:8d589ec:     public void replayMessages(int fromCommandId, int toCommandId, Replayer replayer) throws IOException {
1:f3ef1a9:         if (replayer == null) {
1:f3ef1a9:             throw new IllegalArgumentException("No Replayer parameter specified");
1:f3ef1a9:         }
1:fc00993:         if (LOG.isDebugEnabled()) {
1:fc00993:             LOG.debug("Buffer: " + this + " replaying messages from: " + fromCommandId + " to: " + toCommandId);
1:f3ef1a9:         }
1:8d589ec:         for (int i = fromCommandId; i <= toCommandId; i++) {
1:8d589ec:             Object buffer = null;
1:8d589ec:             synchronized (lock) {
1:d36c0d4:                 buffer = map.get(Integer.valueOf(i));
1:8d589ec:             }
1:8d589ec:             replayer.sendBuffer(i, buffer);
1:8d589ec:         }
1:8d589ec:     }
1:8d589ec: 
1:933eb2f:     protected Map<Integer, Object> createMap(int maximumSize) {
1:933eb2f:         return new HashMap<Integer, Object>(maximumSize);
1:8d589ec:     }
1:8d589ec: 
1:8d589ec:     protected void onEvictedBuffer(int commandId, Object buffer) {
1:8d589ec:         if (listener != null) {
1:8d589ec:             listener.onBufferDiscarded(commandId, buffer);
1:8d589ec:         }
1:8d589ec:     }
1:8d589ec: }
============================================================================
author:Hiram R. Chirino
-------------------------------------------------------------------------------
commit:9a8f6e4
commit:0bbc0ac
/////////////////////////////////////////////////////////////////////////
1:  * 
commit:933eb2f
/////////////////////////////////////////////////////////////////////////
1:     private Map<Integer, Object> map;
/////////////////////////////////////////////////////////////////////////
1:     protected Map<Integer, Object> createMap(int maximumSize) {
1:         return new HashMap<Integer, Object>(maximumSize);
commit:fc00993
/////////////////////////////////////////////////////////////////////////
0:     private static final Log LOG = LogFactory.getLog(DefaultReplayBuffer.class);
/////////////////////////////////////////////////////////////////////////
1:         if (LOG.isDebugEnabled()) {
1:             LOG.debug("Adding command ID: " + commandId + " to replay buffer: " + this + " object: " + buffer);
/////////////////////////////////////////////////////////////////////////
1:         if (LOG.isDebugEnabled()) {
1:             LOG.debug("Buffer: " + this + " replaying messages from: " + fromCommandId + " to: " + toCommandId);
commit:74a7a8b
/////////////////////////////////////////////////////////////////////////
0: import org.apache.commons.logging.Log;
0: import org.apache.commons.logging.LogFactory;
1: 
commit:230a86c
/////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////
1:  *      http://www.apache.org/licenses/LICENSE-2.0
commit:57b4941
/////////////////////////////////////////////////////////////////////////
1:  * Licensed to the Apache Software Foundation (ASF) under one or more
1:  * contributor license agreements.  See the NOTICE file distributed with
1:  * this work for additional information regarding copyright ownership.
1:  * The ASF licenses this file to You under the Apache License, Version 2.0
1:  * (the "License"); you may not use this file except in compliance with
1:  * the License.  You may obtain a copy of the License at
author:Bosanac Dejan
-------------------------------------------------------------------------------
commit:8bf987b
/////////////////////////////////////////////////////////////////////////
1: import org.slf4j.Logger;
1: import org.slf4j.LoggerFactory;
/////////////////////////////////////////////////////////////////////////
1:     private static final Logger LOG = LoggerFactory.getLogger(DefaultReplayBuffer.class);
author:Robert Davies
-------------------------------------------------------------------------------
commit:d36c0d4
/////////////////////////////////////////////////////////////////////////
1:                 Object evictedBuffer = map.remove(Integer.valueOf(++lowestCommandId));
1:             map.put(Integer.valueOf(commandId), buffer);
/////////////////////////////////////////////////////////////////////////
1:                 buffer = map.get(Integer.valueOf(i));
author:James Strachan
-------------------------------------------------------------------------------
commit:f3ef1a9
/////////////////////////////////////////////////////////////////////////
0: import org.apache.commons.logging.Log;
0: import org.apache.commons.logging.LogFactory;
1: 
/////////////////////////////////////////////////////////////////////////
0:     private static final Log log = LogFactory.getLog(DefaultReplayBuffer.class);
1: 
/////////////////////////////////////////////////////////////////////////
0:         if (log.isDebugEnabled()) {
0:             log.debug("Adding command ID: " + commandId + " to replay buffer: " + this + " object: " + buffer);
1:         }
/////////////////////////////////////////////////////////////////////////
1:         if (replayer == null) {
1:             throw new IllegalArgumentException("No Replayer parameter specified");
1:         }
0:         if (log.isDebugEnabled()) {
0:             log.debug("Buffer: " + this + " replaying messages from: " + fromCommandId + " to: " + toCommandId);
1:         }
/////////////////////////////////////////////////////////////////////////
commit:8d589ec
/////////////////////////////////////////////////////////////////////////
1: /**
1:  *
0:  * Copyright 2005-2006 The Apache Software Foundation
1:  *
0:  * Licensed under the Apache License, Version 2.0 (the "License");
0:  * you may not use this file except in compliance with the License.
0:  * You may obtain a copy of the License at
1:  *
0:  * http://www.apache.org/licenses/LICENSE-2.0
1:  *
1:  * Unless required by applicable law or agreed to in writing, software
1:  * distributed under the License is distributed on an "AS IS" BASIS,
1:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:  * See the License for the specific language governing permissions and
1:  * limitations under the License.
1:  */
1: package org.apache.activemq.transport.reliable;
1: 
1: import java.io.IOException;
1: import java.util.HashMap;
1: import java.util.Map;
1: 
1: /**
1:  * 
0:  * @version $Revision$
1:  */
1: public class DefaultReplayBuffer implements ReplayBuffer {
1: 
1:     private final int size;
1:     private ReplayBufferListener listener;
0:     private Map map;
1:     private int lowestCommandId = 1;
1:     private Object lock = new Object();
1: 
1:     public DefaultReplayBuffer(int size) {
1:         this.size = size;
1:         map = createMap(size);
1:     }
1: 
1:     public void addBuffer(int commandId, Object buffer) {
1:         synchronized (lock) {
1:             int max = size - 1;
1:             while (map.size() >= max) {
1:                 // lets find things to evict
0:                 Object evictedBuffer = map.remove(new Integer(++lowestCommandId));
1:                 onEvictedBuffer(lowestCommandId, evictedBuffer);
1:             }
0:             map.put(new Integer(commandId), buffer);
1:         }
1:     }
1: 
1:     public void setReplayBufferListener(ReplayBufferListener bufferPoolAdapter) {
1:         this.listener = bufferPoolAdapter;
1:     }
1: 
1:     public void replayMessages(int fromCommandId, int toCommandId, Replayer replayer) throws IOException {
1:         for (int i = fromCommandId; i <= toCommandId; i++) {
1:             Object buffer = null;
1:             synchronized (lock) {
0:                 buffer = map.get(new Integer(i));
1:             }
1:             replayer.sendBuffer(i, buffer);
1:         }
1:     }
1: 
0:     protected Map createMap(int maximumSize) {
0:         return new HashMap(maximumSize);
1:     }
1: 
1:     protected void onEvictedBuffer(int commandId, Object buffer) {
1:         if (listener != null) {
1:             listener.onBufferDiscarded(commandId, buffer);
1:         }
1:     }
1: 
1: }
============================================================================