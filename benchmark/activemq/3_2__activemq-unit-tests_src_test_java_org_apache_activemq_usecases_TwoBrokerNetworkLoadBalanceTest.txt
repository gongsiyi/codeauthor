1:c3a64a8: /**
1:c3a64a8:  * Licensed to the Apache Software Foundation (ASF) under one or more
1:c3a64a8:  * contributor license agreements.  See the NOTICE file distributed with
1:c3a64a8:  * this work for additional information regarding copyright ownership.
1:c3a64a8:  * The ASF licenses this file to You under the Apache License, Version 2.0
1:c3a64a8:  * (the "License"); you may not use this file except in compliance with
1:c3a64a8:  * the License.  You may obtain a copy of the License at
1:c3a64a8:  *
1:c3a64a8:  *      http://www.apache.org/licenses/LICENSE-2.0
1:c3a64a8:  *
1:c3a64a8:  * Unless required by applicable law or agreed to in writing, software
1:c3a64a8:  * distributed under the License is distributed on an "AS IS" BASIS,
1:c3a64a8:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:c3a64a8:  * See the License for the specific language governing permissions and
1:c3a64a8:  * limitations under the License.
1:c3a64a8:  */
1:c3a64a8: package org.apache.activemq.usecases;
1:c3a64a8: 
1:c3a64a8: import java.net.URI;
1:c3a64a8: 
1:c3a64a8: import javax.jms.Destination;
1:c3a64a8: import javax.jms.MessageConsumer;
1:c3a64a8: 
1:c3a64a8: import org.apache.activemq.JmsMultipleBrokersTestSupport;
1:c3a64a8: import org.apache.activemq.util.MessageIdList;
1:c3a64a8: import org.apache.activemq.util.Wait;
1:8bf987b: import org.slf4j.Logger;
1:8bf987b: import org.slf4j.LoggerFactory;
1:c3a64a8: 
1:c3a64a8: public class TwoBrokerNetworkLoadBalanceTest extends JmsMultipleBrokersTestSupport {
1:8bf987b:     protected static final Logger LOG = LoggerFactory.getLogger(TwoBrokerNetworkLoadBalanceTest.class);
1:c3a64a8:     public void testLoadBalancing() throws Exception {
1:c3a64a8:         bridgeBrokers("BrokerA", "BrokerB");
1:c3a64a8:         bridgeBrokers("BrokerB", "BrokerA");
1:c3a64a8: 
1:c3a64a8:         startAllBrokers();
1:c3a64a8:         waitForBridgeFormation();
1:c3a64a8: 
1:c3a64a8:         // Setup destination
1:c3a64a8:         Destination dest = createDestination("TEST.FOO", false);
1:c3a64a8: 
1:c3a64a8:         // Setup consumers
1:c3a64a8:         MessageConsumer clientA = createConsumer("BrokerA", dest);
1:c3a64a8: 
1:c3a64a8:      // Setup consumers
1:c3a64a8:         MessageConsumer clientB = createConsumer("BrokerB", dest);
1:c3a64a8:         
1:c3a64a8:         // Send messages
1:c3a64a8:         sendMessages("BrokerA", dest, 5000);
1:c3a64a8: 
1:c3a64a8:         // Send messages
1:c3a64a8:         sendMessages("BrokerB", dest, 1000);
1:c3a64a8: 
1:c3a64a8:         // Get message count
1:c3a64a8:         final MessageIdList msgsA = getConsumerMessages("BrokerA", clientA);
1:c3a64a8:         final MessageIdList msgsB = getConsumerMessages("BrokerB", clientB);
1:c3a64a8: 
1:c3a64a8:         Wait.waitFor(new Wait.Condition() {
1:c3a64a8:             public boolean isSatisified() throws Exception {
1:c3a64a8:                 return msgsA.getMessageCount() + msgsB.getMessageCount() == 6000;
1:c3a64a8:             }});
1:c3a64a8:         
1:c3a64a8:         LOG.info("A got: " +  msgsA.getMessageCount());
1:c3a64a8:         LOG.info("B got: " +  msgsB.getMessageCount());
1:c3a64a8:          
1:c3a64a8:         assertTrue("B got is fair share: " + msgsB.getMessageCount(), msgsB.getMessageCount() > 2000);
1:c3a64a8:     }
1:c3a64a8:     
1:c3a64a8:     public void setUp() throws Exception {
1:c3a64a8:         super.setAutoFail(true);
1:c3a64a8:         super.setUp();
1:c3a64a8:         createBroker(new URI(
1:c3a64a8:                 "broker:(tcp://localhost:61616)/BrokerA?persistent=false&useJmx=false"));
1:c3a64a8:         createBroker(new URI(
1:c3a64a8:                 "broker:(tcp://localhost:61617)/BrokerB?persistent=false&useJmx=false"));
1:c3a64a8:     }
1:c3a64a8: }
============================================================================
author:Timothy A. Bish
-------------------------------------------------------------------------------
commit:ef24cc9
author:Bosanac Dejan
-------------------------------------------------------------------------------
commit:8bf987b
/////////////////////////////////////////////////////////////////////////
1: import org.slf4j.Logger;
1: import org.slf4j.LoggerFactory;
1:     protected static final Logger LOG = LoggerFactory.getLogger(TwoBrokerNetworkLoadBalanceTest.class);
author:Gary Tully
-------------------------------------------------------------------------------
commit:c3a64a8
/////////////////////////////////////////////////////////////////////////
1: /**
1:  * Licensed to the Apache Software Foundation (ASF) under one or more
1:  * contributor license agreements.  See the NOTICE file distributed with
1:  * this work for additional information regarding copyright ownership.
1:  * The ASF licenses this file to You under the Apache License, Version 2.0
1:  * (the "License"); you may not use this file except in compliance with
1:  * the License.  You may obtain a copy of the License at
1:  *
1:  *      http://www.apache.org/licenses/LICENSE-2.0
1:  *
1:  * Unless required by applicable law or agreed to in writing, software
1:  * distributed under the License is distributed on an "AS IS" BASIS,
1:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:  * See the License for the specific language governing permissions and
1:  * limitations under the License.
1:  */
1: package org.apache.activemq.usecases;
1: 
1: import java.net.URI;
1: 
1: import javax.jms.Destination;
1: import javax.jms.MessageConsumer;
1: 
1: import org.apache.activemq.JmsMultipleBrokersTestSupport;
1: import org.apache.activemq.util.MessageIdList;
1: import org.apache.activemq.util.Wait;
0: import org.apache.commons.logging.Log;
0: import org.apache.commons.logging.LogFactory;
1: 
1: public class TwoBrokerNetworkLoadBalanceTest extends JmsMultipleBrokersTestSupport {
0:     protected static final Log LOG = LogFactory.getLog(TwoBrokerNetworkLoadBalanceTest.class);
1:     public void testLoadBalancing() throws Exception {
1:         bridgeBrokers("BrokerA", "BrokerB");
1:         bridgeBrokers("BrokerB", "BrokerA");
1: 
1:         startAllBrokers();
1:         waitForBridgeFormation();
1: 
1:         // Setup destination
1:         Destination dest = createDestination("TEST.FOO", false);
1: 
1:         // Setup consumers
1:         MessageConsumer clientA = createConsumer("BrokerA", dest);
1: 
1:      // Setup consumers
1:         MessageConsumer clientB = createConsumer("BrokerB", dest);
1:         
1:         // Send messages
1:         sendMessages("BrokerA", dest, 5000);
1: 
1:         // Send messages
1:         sendMessages("BrokerB", dest, 1000);
1: 
1:         // Get message count
1:         final MessageIdList msgsA = getConsumerMessages("BrokerA", clientA);
1:         final MessageIdList msgsB = getConsumerMessages("BrokerB", clientB);
1: 
1:         Wait.waitFor(new Wait.Condition() {
1:             public boolean isSatisified() throws Exception {
1:                 return msgsA.getMessageCount() + msgsB.getMessageCount() == 6000;
1:             }});
1:         
1:         LOG.info("A got: " +  msgsA.getMessageCount());
1:         LOG.info("B got: " +  msgsB.getMessageCount());
1:          
1:         assertTrue("B got is fair share: " + msgsB.getMessageCount(), msgsB.getMessageCount() > 2000);
1:     }
1:     
1:     public void setUp() throws Exception {
1:         super.setAutoFail(true);
1:         super.setUp();
1:         createBroker(new URI(
1:                 "broker:(tcp://localhost:61616)/BrokerA?persistent=false&useJmx=false"));
1:         createBroker(new URI(
1:                 "broker:(tcp://localhost:61617)/BrokerB?persistent=false&useJmx=false"));
1:     }
1: }
============================================================================