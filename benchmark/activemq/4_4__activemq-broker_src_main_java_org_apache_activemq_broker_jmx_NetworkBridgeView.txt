1:ec6e6a5: /**
1:fc00993:  * Licensed to the Apache Software Foundation (ASF) under one or more
1:fc00993:  * contributor license agreements.  See the NOTICE file distributed with
1:fc00993:  * this work for additional information regarding copyright ownership.
1:fc00993:  * The ASF licenses this file to You under the Apache License, Version 2.0
1:fc00993:  * (the "License"); you may not use this file except in compliance with
1:fc00993:  * the License.  You may obtain a copy of the License at
3:ec6e6a5:  *
1:fc00993:  *      http://www.apache.org/licenses/LICENSE-2.0
1:ec6e6a5:  *
1:ec6e6a5:  * Unless required by applicable law or agreed to in writing, software
1:ec6e6a5:  * distributed under the License is distributed on an "AS IS" BASIS,
1:ec6e6a5:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:ec6e6a5:  * See the License for the specific language governing permissions and
1:ec6e6a5:  * limitations under the License.
1:ec6e6a5:  */
1:ec6e6a5: package org.apache.activemq.broker.jmx;
2:ec6e6a5: 
1:9b88902: import java.util.List;
1:9b88902: import java.util.concurrent.CopyOnWriteArrayList;
1:9b88902: 
1:ec6e6a5: import org.apache.activemq.network.NetworkBridge;
1:ec6e6a5: 
1:ec6e6a5: public class NetworkBridgeView implements NetworkBridgeViewMBean {
1:ec6e6a5: 
1:ec6e6a5:     private final NetworkBridge bridge;
1:2a2dcd5:     private boolean createByDuplex = false;
1:9b88902:     private List<NetworkDestinationView> networkDestinationViewList = new CopyOnWriteArrayList<NetworkDestinationView>();
1:ec6e6a5: 
1:f812e34:     public NetworkBridgeView(NetworkBridge bridge) {
1:f812e34:         this.bridge = bridge;
1:ec6e6a5:     }
1:f812e34: 
1:10c998b:     @Override
1:ec6e6a5:     public void start() throws Exception {
1:f812e34:         bridge.start();
1:ec6e6a5:     }
1:ec6e6a5: 
1:10c998b:     @Override
1:ec6e6a5:     public void stop() throws Exception {
1:f812e34:         bridge.stop();
1:ec6e6a5:     }
1:f812e34: 
1:10c998b:     @Override
1:ec6e6a5:     public String getLocalAddress() {
1:f812e34:         return bridge.getLocalAddress();
1:ec6e6a5:     }
1:ec6e6a5: 
1:10c998b:     @Override
1:ec6e6a5:     public String getRemoteAddress() {
1:f812e34:         return bridge.getRemoteAddress();
1:ec6e6a5:     }
1:ec6e6a5: 
1:10c998b:     @Override
1:ec6e6a5:     public String getRemoteBrokerName() {
1:f812e34:         return bridge.getRemoteBrokerName();
1:ec6e6a5:     }
1:71e4585: 
1:ec6e6a5: 
1:10c998b:     @Override
1:71e4585:     public String getRemoteBrokerId() {
1:71e4585:         return bridge.getRemoteBrokerId();
1:71e4585:     }
1:71e4585: 
1:10c998b:     @Override
1:ec6e6a5:     public String getLocalBrokerName() {
1:f812e34:         return bridge.getLocalBrokerName();
1:ec6e6a5:     }
1:ec6e6a5: 
1:10c998b:     @Override
1:ec6e6a5:     public long getEnqueueCounter() {
1:f812e34:         return bridge.getEnqueueCounter();
1:ec6e6a5:     }
1:ec6e6a5: 
1:10c998b:     @Override
1:ec6e6a5:     public long getDequeueCounter() {
1:f812e34:         return bridge.getDequeueCounter();
1:ec6e6a5:     }
1:ec6e6a5: 
1:10c998b:     @Override
1:10c998b:     public long getReceivedCounter() {
1:10c998b:         return bridge.getNetworkBridgeStatistics().getReceivedCount().getCount();
1:10c998b:     }
1:10c998b: 
1:10c998b:     @Override
1:2a2dcd5:     public boolean isCreatedByDuplex() {
1:2a2dcd5:         return createByDuplex;
1:ec6e6a5:     }
1:ec6e6a5: 
1:2a2dcd5:     public void setCreateByDuplex(boolean createByDuplex) {
1:2a2dcd5:         this.createByDuplex = createByDuplex;
1:2a2dcd5:     }
1:9b88902: 
1:10c998b:     @Override
1:9b88902:     public void resetStats(){
1:374cab9:         bridge.resetStats();
1:9b88902:         for (NetworkDestinationView networkDestinationView:networkDestinationViewList){
1:9b88902:             networkDestinationView.resetStats();
1:9b88902:         }
1:9b88902:     }
1:9b88902: 
1:9b88902:     public void addNetworkDestinationView(NetworkDestinationView networkDestinationView){
1:9b88902:         networkDestinationViewList.add(networkDestinationView);
1:9b88902:     }
1:9b88902: 
1:9b88902:     public void removeNetworkDestinationView(NetworkDestinationView networkDestinationView){
1:9b88902:         networkDestinationViewList.remove(networkDestinationView);
1:9b88902:     }
1:2a2dcd5: }
============================================================================
author:Christopher L. Shannon (cshannon)
-------------------------------------------------------------------------------
commit:10c998b
/////////////////////////////////////////////////////////////////////////
1:     @Override
1:     @Override
1:     @Override
1:     @Override
1:     @Override
1:     @Override
1:     @Override
1:     @Override
1:     @Override
1:     @Override
1:     public long getReceivedCounter() {
1:         return bridge.getNetworkBridgeStatistics().getReceivedCount().getCount();
1:     }
1: 
1:     @Override
/////////////////////////////////////////////////////////////////////////
1:     @Override
author:rajdavies
-------------------------------------------------------------------------------
commit:71e4585
/////////////////////////////////////////////////////////////////////////
1: 
1:     public String getRemoteBrokerId() {
1:         return bridge.getRemoteBrokerId();
1:     }
1: 
commit:374cab9
/////////////////////////////////////////////////////////////////////////
1:         bridge.resetStats();
commit:9b88902
/////////////////////////////////////////////////////////////////////////
1: import java.util.List;
1: import java.util.concurrent.CopyOnWriteArrayList;
1: 
1:     private List<NetworkDestinationView> networkDestinationViewList = new CopyOnWriteArrayList<NetworkDestinationView>();
/////////////////////////////////////////////////////////////////////////
1: 
1:     public void resetStats(){
1:         for (NetworkDestinationView networkDestinationView:networkDestinationViewList){
1:             networkDestinationView.resetStats();
1:         }
1:     }
1: 
1:     public void addNetworkDestinationView(NetworkDestinationView networkDestinationView){
1:         networkDestinationViewList.add(networkDestinationView);
1:     }
1: 
1:     public void removeNetworkDestinationView(NetworkDestinationView networkDestinationView){
1:         networkDestinationViewList.remove(networkDestinationView);
1:     }
author:Hiram R. Chirino
-------------------------------------------------------------------------------
commit:58aca86
commit:fc00993
/////////////////////////////////////////////////////////////////////////
1:  * Licensed to the Apache Software Foundation (ASF) under one or more
1:  * contributor license agreements.  See the NOTICE file distributed with
1:  * this work for additional information regarding copyright ownership.
1:  * The ASF licenses this file to You under the Apache License, Version 2.0
1:  * (the "License"); you may not use this file except in compliance with
1:  * the License.  You may obtain a copy of the License at
1:  *      http://www.apache.org/licenses/LICENSE-2.0
commit:f812e34
/////////////////////////////////////////////////////////////////////////
1:     public NetworkBridgeView(NetworkBridge bridge) {
1:         this.bridge = bridge;
1: 
1:         bridge.start();
1:         bridge.stop();
1: 
1:         return bridge.getLocalAddress();
1:         return bridge.getRemoteAddress();
1:         return bridge.getRemoteBrokerName();
1:         return bridge.getLocalBrokerName();
1:         return bridge.getEnqueueCounter();
1:         return bridge.getDequeueCounter();
commit:ec6e6a5
/////////////////////////////////////////////////////////////////////////
1: /**
1:  *
0:  * Copyright 2005-2006 The Apache Software Foundation
1:  *
0:  * Licensed under the Apache License, Version 2.0 (the "License");
0:  * you may not use this file except in compliance with the License.
0:  * You may obtain a copy of the License at
1:  *
0:  * http://www.apache.org/licenses/LICENSE-2.0
1:  *
1:  * Unless required by applicable law or agreed to in writing, software
1:  * distributed under the License is distributed on an "AS IS" BASIS,
1:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:  * See the License for the specific language governing permissions and
1:  * limitations under the License.
1:  */
1: package org.apache.activemq.broker.jmx;
1: 
1: import org.apache.activemq.network.NetworkBridge;
1: 
1: public class NetworkBridgeView implements NetworkBridgeViewMBean {
1: 
1:     private final NetworkBridge bridge;
1: 
0: 	public NetworkBridgeView(NetworkBridge bridge) {
0: 		this.bridge = bridge;
1:     }
1:     
1:     public void start() throws Exception {
0:     	bridge.start();
1:     }
1: 
1:     public void stop() throws Exception {
0:     	bridge.stop();
1:     }
1:     
1:     public String getLocalAddress() {
0:     	return bridge.getLocalAddress();
1:     }
1: 
1:     public String getRemoteAddress() {
0:     	return bridge.getRemoteAddress();
1:     }
1: 
1:     public String getRemoteBrokerName() {
0:     	return bridge.getRemoteBrokerName();
1:     }
1: 
1:     public String getLocalBrokerName() {
0:     	return bridge.getLocalBrokerName();
1:     }
1: 
1:     public long getEnqueueCounter() {
0:     	return bridge.getEnqueueCounter();
1:     }
1: 
1:     public long getDequeueCounter() {
0:     	return bridge.getDequeueCounter();
1:     }
1: 
1: }
author:Bosanac Dejan
-------------------------------------------------------------------------------
commit:2a2dcd5
/////////////////////////////////////////////////////////////////////////
1:     private boolean createByDuplex = false;
/////////////////////////////////////////////////////////////////////////
1:     public boolean isCreatedByDuplex() {
1:         return createByDuplex;
1:     }
0: 
1:     public void setCreateByDuplex(boolean createByDuplex) {
1:         this.createByDuplex = createByDuplex;
1:     }
============================================================================