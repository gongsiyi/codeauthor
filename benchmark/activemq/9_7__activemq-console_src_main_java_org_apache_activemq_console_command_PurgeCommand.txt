1:a107823: /**
1:57b4941:  * Licensed to the Apache Software Foundation (ASF) under one or more
1:57b4941:  * contributor license agreements.  See the NOTICE file distributed with
1:57b4941:  * this work for additional information regarding copyright ownership.
1:57b4941:  * The ASF licenses this file to You under the Apache License, Version 2.0
1:57b4941:  * (the "License"); you may not use this file except in compliance with
1:57b4941:  * the License.  You may obtain a copy of the License at
1:5f1adbe:  *
1:5f1adbe:  *      http://www.apache.org/licenses/LICENSE-2.0
1:5f1adbe:  *
1:a107823:  * Unless required by applicable law or agreed to in writing, software
1:a107823:  * distributed under the License is distributed on an "AS IS" BASIS,
1:a107823:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:a107823:  * See the License for the specific language governing permissions and
1:a107823:  * limitations under the License.
1:a107823:  */
1:a107823: package org.apache.activemq.console.command;
1:c8b6043: 
1:5f1adbe: import java.util.ArrayList;
1:5f1adbe: import java.util.Iterator;
1:5f1adbe: import java.util.List;
1:5f1adbe: import java.util.StringTokenizer;
1:7ea64b4: import javax.management.MBeanServerInvocationHandler;
1:5f1adbe: import javax.management.ObjectInstance;
1:5f1adbe: import javax.management.ObjectName;
1:c8b6043: 
1:7ea64b4: import org.apache.activemq.broker.jmx.QueueViewMBean;
1:a107823: import org.apache.activemq.console.util.JmxMBeansUtil;
1:5f1adbe: 
1:a107823: public class PurgeCommand extends AbstractJmxCommand {
1:5f1adbe: 
1:5f1adbe:     protected String[] helpFile = new String[] {
1:5f1adbe:         "Task Usage: Main purge [browse-options] <destinations>",
1:c8b6043:         "Description: Delete selected destination's messages that matches the message selector.",
1:c8b6043:         "",
1:1f85f4b:         "Purge Options:",
1:5f1adbe:         "    --msgsel <msgsel1,msglsel2>   Add to the search list messages matched by the query similar to",
1:5f1adbe:         "                                  the messages selector format.",
1:c8b6043:         "    --reset                       After the purge operation, reset the destination statistics.",
1:5f1adbe:         "    --jmxurl <url>                Set the JMX URL to connect to.",
1:c8b6043:         "    --pid <pid>                   Set the pid to connect to (only on Sun JVM).",
1:0dec0b6:         "    --jmxuser <user>              Set the JMX user used for authenticating.",
1:0dec0b6:         "    --jmxpassword <password>      Set the JMX password used for authenticating.",
1:0dec0b6:         "    --jmxlocal                    Use the local JMX server instead of a remote one.",
1:5f1adbe:         "    --version                     Display the version information.",
1:c8b6043:         "    -h,-?,--help                  Display the browse broker help information.",
1:c8b6043:         "",
1:5f1adbe:         "Examples:",
1:c8b6043:         "    Main purge FOO.BAR",
1:5f1adbe:         "        - Delete all the messages in queue FOO.BAR",
1:5f1adbe: 
1:c8b6043:         "    Main purge --msgsel \"JMSMessageID='*:10',JMSPriority>5\" FOO.*",
1:5f1adbe:         "        - Delete all the messages in the destinations that matches FOO.* and has a JMSMessageID in",
1:5f1adbe:         "          the header field that matches the wildcard *:10, and has a JMSPriority field > 5 in the",
1:e282571:         "          queue FOO.BAR.",
1:e282571:         "          SLQ92 syntax is also supported.",
1:5f1adbe:         "        * To use wildcard queries, the field must be a string and the query enclosed in ''",
1:e282571:         "          Use double quotes \"\" around the entire message selector string.",
1:e282571:         ""
1:5f1adbe:     };
1:5f1adbe: 
1:5f1adbe:     private final List<String> queryAddObjects = new ArrayList<String>(10);
1:5f1adbe:     private final List<String> querySubObjects = new ArrayList<String>(10);
1:c8b6043:     private boolean resetStatistics;
1:60646c9: 
1:60646c9:     @Override
1:60646c9:     public String getName() {
1:60646c9:         return "purge";
1:60646c9:     }
1:c8b6043: 
1:60646c9:     @Override
1:60646c9:     public String getOneLineDescription() {
1:60646c9:         return "Delete selected destination's messages that matches the message selector";
1:60646c9:     }
1:c8b6043: 
1:a107823:     /**
1:5f1adbe:      * Execute the purge command, which allows you to purge the messages in a
1:5f1adbe:      * given JMS destination
1:c8b6043:      *
1:a107823:      * @param tokens - command arguments
2:a107823:      * @throws Exception
1:a107823:      */
1:c8b6043:     @Override
1:5f1adbe:     protected void runTask(List<String> tokens) throws Exception {
1:73f9131:         // If there is no queue name specified, let's select all
1:73f9131:         if (tokens.isEmpty()) {
1:73f9131:             tokens.add("*");
1:73f9131:         }
1:c8b6043: 
1:73f9131:         // Iterate through the queue names
1:73f9131:         for (Iterator<String> i = tokens.iterator(); i.hasNext(); ) {
1:73f9131:             List queueList = JmxMBeansUtil.queryMBeans(createJmxConnection(), "type=Broker,brokerName=*,destinationType=Queue,destinationName=" + i.next());
1:60646c9: 
1:73f9131:             for (Iterator j = queueList.iterator(); j.hasNext(); ) {
1:73f9131:                 ObjectName queueName = ((ObjectInstance) j.next()).getObjectName();
1:73f9131:                 if (queryAddObjects.isEmpty()) {
1:73f9131:                     purgeQueue(queueName);
1:73f9131:                 } else {
1:73f9131: 
1:73f9131:                     QueueViewMBean proxy = MBeanServerInvocationHandler.
1:73f9131:                             newProxyInstance(createJmxConnection(),
1:73f9131:                                     queueName,
1:73f9131:                                     QueueViewMBean.class,
1:73f9131:                                     true);
1:73f9131:                     int removed = 0;
1:73f9131: 
1:73f9131:                     // AMQ-3404: We support two syntaxes for the message
1:73f9131:                     // selector query:
1:73f9131:                     // 1) AMQ specific:
1:73f9131:                     //    "JMSPriority>2,MyHeader='Foo'"
1:73f9131:                     //
1:73f9131:                     // 2) SQL-92 syntax:
1:73f9131:                     //    "(JMSPriority>2) AND (MyHeader='Foo')"
1:73f9131:                     //
1:73f9131:                     // If syntax style 1) is used, the comma separated
1:73f9131:                     // criterias are broken into List<String> elements.
1:73f9131:                     // We then need to construct the SQL-92 query out of
1:73f9131:                     // this list.
1:73f9131: 
1:a5c8bcb:                     String sqlQuery = convertToSQL92(queryAddObjects);
1:73f9131:                     removed = proxy.removeMatchingMessages(sqlQuery);
1:73f9131:                     context.printInfo("Removed: " + removed
1:a5c8bcb:                             + " messages for message selector " + sqlQuery);
1:c8b6043: 
1:73f9131:                     if (resetStatistics) {
1:73f9131:                         proxy.resetStatistics();
1:73f9131:                     }
1:c8b6043:                 }
1:7ea64b4:             }
7:a107823:         }
1:a107823:     }
1:c8b6043: 
14:a107823: 
1:a107823:     /**
1:a107823:      * Purge all the messages in the queue
1:c8b6043:      *
1:a107823:      * @param queue - ObjectName of the queue to purge
1:a107823:      * @throws Exception
1:a107823:      */
1:a107823:     public void purgeQueue(ObjectName queue) throws Exception {
1:881c1b7:         context.printInfo("Purging all messages in queue: " + queue.getKeyProperty("destinationName"));
1:0dec0b6:         createJmxConnection().invoke(queue, "purge", new Object[] {}, new String[] {});
1:c8b6043:         if (resetStatistics) {
1:c8b6043:             createJmxConnection().invoke(queue, "resetStatistics", new Object[] {}, new String[] {});
1:c8b6043:         }
1:a107823:     }
1:a107823: 
1:a107823:     /**
1:a107823:      * Handle the --msgsel, --xmsgsel.
1:c8b6043:      *
1:a107823:      * @param token - option token to handle
1:a107823:      * @param tokens - succeeding command arguments
1:a107823:      * @throws Exception
1:a107823:      */
1:c8b6043:     @Override
1:5f1adbe:     protected void handleOption(String token, List<String> tokens) throws Exception {
1:a107823:         // If token is an additive message selector option
1:a107823:         if (token.startsWith("--msgsel")) {
1:a107823: 
1:5f1adbe:             // If no message selector is specified, or next token is a new
1:5f1adbe:             // option
1:c8b6043:             if (tokens.isEmpty() || tokens.get(0).startsWith("-")) {
1:54eb93e:                 context.printException(new IllegalArgumentException("Message selector not specified"));
1:a107823:                 return;
1:a107823:             }
1:a107823: 
1:c8b6043:             StringTokenizer queryTokens = new StringTokenizer(tokens.remove(0), COMMAND_OPTION_DELIMETER);
1:a107823:             while (queryTokens.hasMoreTokens()) {
1:a107823:                 queryAddObjects.add(queryTokens.nextToken());
1:a107823:             }
1:5f1adbe:         } else if (token.startsWith("--xmsgsel")) {
1:5f1adbe:             // If token is a substractive message selector option
1:a107823: 
1:5f1adbe:             // If no message selector is specified, or next token is a new
1:5f1adbe:             // option
1:c8b6043:             if (tokens.isEmpty() || tokens.get(0).startsWith("-")) {
1:54eb93e:                 context.printException(new IllegalArgumentException("Message selector not specified"));
1:a107823:                 return;
1:a107823:             }
1:a107823: 
1:c8b6043:             StringTokenizer queryTokens = new StringTokenizer(tokens.remove(0), COMMAND_OPTION_DELIMETER);
1:a107823:             while (queryTokens.hasMoreTokens()) {
1:a107823:                 querySubObjects.add(queryTokens.nextToken());
1:a107823:             }
1:c8b6043:         } else if (token.startsWith("--reset")) {
1:c8b6043:             resetStatistics = true;
1:5f1adbe:         } else {
1:5f1adbe:             // Let super class handle unknown option
1:a107823:             super.handleOption(token, tokens);
1:a107823:         }
1:a107823:     }
1:c8b6043: 
1:a107823:     /**
1:e282571:      * Converts the message selector as provided on command line
1:c8b6043:      * argument to activem-admin into an SQL-92 conform string.
1:e282571:      * E.g.
1:e282571:      *   "JMSMessageID='*:10',JMSPriority>5"
1:c8b6043:      * gets converted into
1:e282571:      *   "(JMSMessageID='%:10') AND (JMSPriority>5)"
1:c8b6043:      *
1:c8b6043:      * @param tokens - List of message selector query parameters
1:c8b6043:      * @return SQL-92 string of that query.
1:a107823:      */
1:e282571:     public String convertToSQL92(List<String> tokens) {
1:a5c8bcb:         StringBuilder selector = new StringBuilder();
1:a107823: 
1:a5c8bcb:         boolean isFirstToken = true;
1:e282571:         for (Iterator i = tokens.iterator(); i.hasNext(); ) {
1:a5c8bcb:             String token = i.next().toString();
1:a5c8bcb:             if (token.matches("^[^=]*='.*[\\*\\?].*'$")) {
1:a5c8bcb:                 token = token.replace('?', '_')
1:a5c8bcb:                         .replace('*', '%')
1:a5c8bcb:                         .replaceFirst("=", " LIKE ");
1:a5c8bcb:             }
1:a5c8bcb:             if (isFirstToken) {
1:a5c8bcb:                 isFirstToken = false;
1:a5c8bcb:             } else {
1:a5c8bcb:                 selector.append(" AND ");
1:a5c8bcb:             }
1:a5c8bcb:             selector.append('(')
1:a5c8bcb:                     .append(token)
1:a5c8bcb:                     .append(')');
1:a107823:         }
1:a5c8bcb:         return selector.toString();
1:a107823:     }
1:a107823: 
1:a107823:     /**
1:a107823:      * Print the help messages for the browse command
1:a107823:      */
1:c8b6043:     @Override
1:a107823:     protected void printHelp() {
1:54eb93e:         context.printHelp(helpFile);
1:a107823:     }
1:a107823: 
1:a107823: }
============================================================================
author:Claus Ibsen
-------------------------------------------------------------------------------
commit:a5c8bcb
/////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////
1:                     String sqlQuery = convertToSQL92(queryAddObjects);
1:                             + " messages for message selector " + sqlQuery);
/////////////////////////////////////////////////////////////////////////
1:         StringBuilder selector = new StringBuilder();
1:         boolean isFirstToken = true;
1:             String token = i.next().toString();
1:             if (token.matches("^[^=]*='.*[\\*\\?].*'$")) {
1:                 token = token.replace('?', '_')
1:                         .replace('*', '%')
1:                         .replaceFirst("=", " LIKE ");
1:             }
1:             if (isFirstToken) {
1:                 isFirstToken = false;
1:             } else {
1:                 selector.append(" AND ");
1:             }
1:             selector.append('(')
1:                     .append(token)
1:                     .append(')');
1:         return selector.toString();
author:Dejan Bosanac
-------------------------------------------------------------------------------
commit:73f9131
/////////////////////////////////////////////////////////////////////////
1:         // If there is no queue name specified, let's select all
1:         if (tokens.isEmpty()) {
1:             tokens.add("*");
1:         }
1:         // Iterate through the queue names
1:         for (Iterator<String> i = tokens.iterator(); i.hasNext(); ) {
1:             List queueList = JmxMBeansUtil.queryMBeans(createJmxConnection(), "type=Broker,brokerName=*,destinationType=Queue,destinationName=" + i.next());
1:             for (Iterator j = queueList.iterator(); j.hasNext(); ) {
1:                 ObjectName queueName = ((ObjectInstance) j.next()).getObjectName();
1:                 if (queryAddObjects.isEmpty()) {
1:                     purgeQueue(queueName);
1:                 } else {
1: 
1:                     QueueViewMBean proxy = MBeanServerInvocationHandler.
1:                             newProxyInstance(createJmxConnection(),
1:                                     queueName,
1:                                     QueueViewMBean.class,
1:                                     true);
1:                     int removed = 0;
1: 
1:                     // AMQ-3404: We support two syntaxes for the message
1:                     // selector query:
1:                     // 1) AMQ specific:
1:                     //    "JMSPriority>2,MyHeader='Foo'"
1:                     //
1:                     // 2) SQL-92 syntax:
1:                     //    "(JMSPriority>2) AND (MyHeader='Foo')"
1:                     //
1:                     // If syntax style 1) is used, the comma separated
1:                     // criterias are broken into List<String> elements.
1:                     // We then need to construct the SQL-92 query out of
1:                     // this list.
1: 
0:                     String sqlQuery = null;
0:                     if (queryAddObjects.size() > 1) {
0:                         sqlQuery = convertToSQL92(queryAddObjects);
0:                         sqlQuery = queryAddObjects.get(0);
1:                     }
1:                     removed = proxy.removeMatchingMessages(sqlQuery);
1:                     context.printInfo("Removed: " + removed
0:                             + " messages for message selector " + sqlQuery.toString());
1:                     if (resetStatistics) {
1:                         proxy.resetStatistics();
author:Timothy Bish
-------------------------------------------------------------------------------
commit:c8b6043
/////////////////////////////////////////////////////////////////////////
1:         "Description: Delete selected destination's messages that matches the message selector.",
1:         "",
1:         "    --reset                       After the purge operation, reset the destination statistics.",
1:         "    --pid <pid>                   Set the pid to connect to (only on Sun JVM).",
1:         "    -h,-?,--help                  Display the browse broker help information.",
1:         "",
1:         "    Main purge FOO.BAR",
1:         "    Main purge --msgsel \"JMSMessageID='*:10',JMSPriority>5\" FOO.*",
/////////////////////////////////////////////////////////////////////////
1:     private boolean resetStatistics;
/////////////////////////////////////////////////////////////////////////
1:      *
1:     @Override
/////////////////////////////////////////////////////////////////////////
1: 
0:                         QueueViewMBean proxy = MBeanServerInvocationHandler.
0:                                 newProxyInstance(createJmxConnection(),
0:                                         queueName,
0:                                         QueueViewMBean.class,
0:                                         true);
1: 
0:                         // AMQ-3404: We support two syntaxes for the message
0:                         // 1) AMQ specific:
0:                         // criterias are broken into List<String> elements.
0:                         // We then need to construct the SQL-92 query out of
1: 
0:                              sqlQuery = convertToSQL92(queryAddObjects);
0:                             sqlQuery = queryAddObjects.get(0);
1: 
1:                         if (resetStatistics) {
0:                             proxy.resetStatistics();
1:                         }
/////////////////////////////////////////////////////////////////////////
1: 
1: 
1:      *
0:         if (resetStatistics) {
1:             createJmxConnection().invoke(queue, "resetStatistics", new Object[] {}, new String[] {});
1:         }
1:      *
1:     @Override
1:             if (tokens.isEmpty() || tokens.get(0).startsWith("-")) {
1:             StringTokenizer queryTokens = new StringTokenizer(tokens.remove(0), COMMAND_OPTION_DELIMETER);
/////////////////////////////////////////////////////////////////////////
1:             if (tokens.isEmpty() || tokens.get(0).startsWith("-")) {
1:             StringTokenizer queryTokens = new StringTokenizer(tokens.remove(0), COMMAND_OPTION_DELIMETER);
1:         } else if (token.startsWith("--reset")) {
1:             resetStatistics = true;
1: 
1:      * argument to activem-admin into an SQL-92 conform string.
1:      * gets converted into
1:      *
1:      * @param tokens - List of message selector query parameters
1:      * @return SQL-92 string of that query.
0:         String selector = "";
/////////////////////////////////////////////////////////////////////////
1: 
1:     @Override
author:Gary Tully
-------------------------------------------------------------------------------
commit:bebffd0
/////////////////////////////////////////////////////////////////////////
0:                 List queueList = JmxMBeansUtil.queryMBeans(createJmxConnection(), "type=Broker,brokerName=*,destinationType=Queue,destinationName=" + i.next());
author:Bosanac Dejan
-------------------------------------------------------------------------------
commit:881c1b7
/////////////////////////////////////////////////////////////////////////
0:                 List queueList = JmxMBeansUtil.queryMBeans(createJmxConnection(), "destinationType=Queue,destinationName=" + i.next() + ",*");
/////////////////////////////////////////////////////////////////////////
1:         context.printInfo("Purging all messages in queue: " + queue.getKeyProperty("destinationName"));
commit:7ea64b4
/////////////////////////////////////////////////////////////////////////
1: import javax.management.MBeanServerInvocationHandler;
1: import org.apache.activemq.broker.jmx.QueueViewMBean;
/////////////////////////////////////////////////////////////////////////
0:                         QueueViewMBean proxy = (QueueViewMBean) MBeanServerInvocationHandler.newProxyInstance(createJmxConnection(), queueName, QueueViewMBean.class, true);
0:                         int removed = 0;
0:                         for (String remove : queryAddObjects) {
0:                             removed = proxy.removeMatchingMessages(remove);
0:                             context.printInfo("Removed: " + removed
0:                                     + " messages for msgsel" + remove);
1:                         }
/////////////////////////////////////////////////////////////////////////
commit:87eba29
/////////////////////////////////////////////////////////////////////////
0:         "    --pid <pid>                   Set the pid to connect to (only on Sun JVM).",            
commit:1f85f4b
/////////////////////////////////////////////////////////////////////////
1:         "Purge Options:",
author:Hiram R. Chirino
-------------------------------------------------------------------------------
commit:60646c9
/////////////////////////////////////////////////////////////////////////
1:     @Override
1:     public String getName() {
1:         return "purge";
1:     }
1: 
1:     @Override
1:     public String getOneLineDescription() {
1:         return "Delete selected destination's messages that matches the message selector";
1:     }
1: 
commit:54eb93e
/////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////
0:             context.printException(new RuntimeException("Failed to execute purge task. Reason: " + e));
/////////////////////////////////////////////////////////////////////////
0:         context.printInfo("Purging all messages in queue: " + queue.getKeyProperty("Destination"));
/////////////////////////////////////////////////////////////////////////
0:             context.printInfo("Removing message: " + param[0] + " from queue: " + queue.getKeyProperty("Destination"));
/////////////////////////////////////////////////////////////////////////
1:                 context.printException(new IllegalArgumentException("Message selector not specified"));
/////////////////////////////////////////////////////////////////////////
1:                 context.printException(new IllegalArgumentException("Message selector not specified"));
/////////////////////////////////////////////////////////////////////////
1:         context.printHelp(helpFile);
commit:5f1adbe
/////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////
1:  *      http://www.apache.org/licenses/LICENSE-2.0
/////////////////////////////////////////////////////////////////////////
1: import java.util.ArrayList;
1: import java.util.Iterator;
1: import java.util.List;
1: import java.util.StringTokenizer;
1: 
0: import javax.management.MBeanServerConnection;
1: import javax.management.ObjectInstance;
1: import javax.management.ObjectName;
0: import javax.management.openmbean.CompositeData;
0: import javax.management.remote.JMXConnector;
1: 
1:     protected String[] helpFile = new String[] {
1:         "Task Usage: Main purge [browse-options] <destinations>",
0:         "Description: Delete selected destination's messages that matches the message selector.", 
0:         "", 
0:         "Browse Options:",
1:         "    --msgsel <msgsel1,msglsel2>   Add to the search list messages matched by the query similar to",
1:         "                                  the messages selector format.",
1:         "    --jmxurl <url>                Set the JMX URL to connect to.",
1:         "    --version                     Display the version information.",
0:         "    -h,-?,--help                  Display the browse broker help information.", 
0:         "", 
1:         "Examples:",
0:         "    Main purge FOO.BAR", 
1:         "        - Delete all the messages in queue FOO.BAR",
1: 
0:         "    Main purge --msgsel JMSMessageID='*:10',JMSPriority>5 FOO.*", 
1:         "        - Delete all the messages in the destinations that matches FOO.* and has a JMSMessageID in",
1:         "          the header field that matches the wildcard *:10, and has a JMSPriority field > 5 in the",
0:         "          queue FOO.BAR",
1:         "        * To use wildcard queries, the field must be a string and the query enclosed in ''",
0:         "",
1:     };
1: 
1:     private final List<String> queryAddObjects = new ArrayList<String>(10);
1:     private final List<String> querySubObjects = new ArrayList<String>(10);
1:      * Execute the purge command, which allows you to purge the messages in a
1:      * given JMS destination
1:      * 
1:     protected void runTask(List<String> tokens) throws Exception {
/////////////////////////////////////////////////////////////////////////
0:             for (Iterator<String> i = tokens.iterator(); i.hasNext();) {
0:                 for (Iterator j = queueList.iterator(); j.hasNext();) {
/////////////////////////////////////////////////////////////////////////
1:      * 
/////////////////////////////////////////////////////////////////////////
0:      * 
/////////////////////////////////////////////////////////////////////////
0:         for (Iterator i = messages.iterator(); i.hasNext();) {
0:             server.invoke(queue, "removeMessage", param, new String[] {
0:                 "java.lang.String"
0:             });
/////////////////////////////////////////////////////////////////////////
0:      * 
1:     protected void handleOption(String token, List<String> tokens) throws Exception {
1:             // If no message selector is specified, or next token is a new
1:             // option
/////////////////////////////////////////////////////////////////////////
1:         } else if (token.startsWith("--xmsgsel")) {
1:             // If token is a substractive message selector option
1:             // If no message selector is specified, or next token is a new
1:             // option
/////////////////////////////////////////////////////////////////////////
1:         } else {
1:             // Let super class handle unknown option
/////////////////////////////////////////////////////////////////////////
commit:57b4941
/////////////////////////////////////////////////////////////////////////
1:  * Licensed to the Apache Software Foundation (ASF) under one or more
1:  * contributor license agreements.  See the NOTICE file distributed with
1:  * this work for additional information regarding copyright ownership.
1:  * The ASF licenses this file to You under the Apache License, Version 2.0
1:  * (the "License"); you may not use this file except in compliance with
1:  * the License.  You may obtain a copy of the License at
commit:a107823
/////////////////////////////////////////////////////////////////////////
1: /**
0:  *
0:  * Copyright 2005-2006 The Apache Software Foundation
0:  *
0:  * Licensed under the Apache License, Version 2.0 (the "License");
0:  * you may not use this file except in compliance with the License.
0:  * You may obtain a copy of the License at
0:  *
0:  * http://www.apache.org/licenses/LICENSE-2.0
0:  *
1:  * Unless required by applicable law or agreed to in writing, software
1:  * distributed under the License is distributed on an "AS IS" BASIS,
1:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:  * See the License for the specific language governing permissions and
1:  * limitations under the License.
1:  */
1: package org.apache.activemq.console.command;
1: 
0: import org.apache.activemq.console.formatter.GlobalWriter;
1: import org.apache.activemq.console.util.JmxMBeansUtil;
1: 
0: import javax.management.ObjectInstance;
0: import javax.management.ObjectName;
0: import javax.management.MBeanServerConnection;
0: import javax.management.openmbean.CompositeData;
0: import javax.management.remote.JMXConnector;
0: import java.util.List;
0: import java.util.StringTokenizer;
0: import java.util.ArrayList;
0: import java.util.Iterator;
1: 
1: public class PurgeCommand extends AbstractJmxCommand {
1: 
0:     private final List queryAddObjects = new ArrayList(10);
0:     private final List querySubObjects = new ArrayList(10);
1: 
1:     /**
0:      * Execute the purge command, which allows you to purge the messages in a given JMS destination
1:      * @param tokens - command arguments
1:      * @throws Exception
1:      */
0:     protected void runTask(List tokens) throws Exception {
0:         try {
0:             // If there is no queue name specified, let's select all
0:             if (tokens.isEmpty()) {
0:                 tokens.add("*");
1:             }
1: 
0:             // Iterate through the queue names
0:             for (Iterator i=tokens.iterator(); i.hasNext();) {
0:                 List queueList = JmxMBeansUtil.queryMBeans(useJmxServiceUrl(), "Type=Queue,Destination=" + i.next() + ",*");
1: 
0:                 for (Iterator j=queueList.iterator(); j.hasNext();) {
0:                     ObjectName queueName = ((ObjectInstance)j.next()).getObjectName();
0:                     if (queryAddObjects.isEmpty()) {
0:                         purgeQueue(queueName);
0:                     } else {
0:                         List messages = JmxMBeansUtil.createMessageQueryFilter(useJmxServiceUrl(), queueName).query(queryAddObjects);
0:                         purgeMessages(queueName, messages);
1:                     }
1:                 }
1:             }
0:         } catch (Exception e) {
0:             GlobalWriter.printException(new RuntimeException("Failed to execute purge task. Reason: " + e));
0:             throw new Exception(e);
1:         }
1:     }
1: 
1:     /**
1:      * Purge all the messages in the queue
1:      * @param queue - ObjectName of the queue to purge
1:      * @throws Exception
1:      */
1:     public void purgeQueue(ObjectName queue) throws Exception {
0:         JMXConnector conn = createJmxConnector();
0:         MBeanServerConnection server = conn.getMBeanServerConnection();
0:         GlobalWriter.printInfo("Purging all messages in queue: " + queue.getKeyProperty("Destination"));
0:         server.invoke(queue, "purge", new Object[] {}, new String[] {});
0:         conn.close();
1:     }
1: 
1:     /**
0:      * Purge selected messages in the queue
0:      * @param queue - ObjectName of the queue to purge the messages from
0:      * @param messages - List of messages to purge
1:      * @throws Exception
1:      */
0:     public void purgeMessages(ObjectName queue, List messages) throws Exception {
0:         JMXConnector conn = createJmxConnector();
0:         MBeanServerConnection server = conn.getMBeanServerConnection();
1: 
0:         Object[] param = new Object[1];
0:         for (Iterator i=messages.iterator(); i.hasNext();) {
0:             CompositeData msg = (CompositeData)i.next();
0:             param[0] = "" + msg.get("JMSMessageID");
0:             GlobalWriter.printInfo("Removing message: " + param[0] + " from queue: " + queue.getKeyProperty("Destination"));
0:             server.invoke(queue, "removeMessage", param, new String[] {"java.lang.String"});
1:         }
1: 
0:         conn.close();
1:     }
1: 
1:     /**
1:      * Handle the --msgsel, --xmsgsel.
1:      * @param token - option token to handle
1:      * @param tokens - succeeding command arguments
1:      * @throws Exception
1:      */
0:     protected void handleOption(String token, List tokens) throws Exception {
1:         // If token is an additive message selector option
1:         if (token.startsWith("--msgsel")) {
1: 
0:             // If no message selector is specified, or next token is a new option
0:             if (tokens.isEmpty() || ((String)tokens.get(0)).startsWith("-")) {
0:                 GlobalWriter.printException(new IllegalArgumentException("Message selector not specified"));
1:                 return;
1:             }
1: 
0:             StringTokenizer queryTokens = new StringTokenizer((String)tokens.remove(0), COMMAND_OPTION_DELIMETER);
1:             while (queryTokens.hasMoreTokens()) {
1:                 queryAddObjects.add(queryTokens.nextToken());
1:             }
1:         }
1: 
0:         // If token is a substractive message selector option
0:         else if (token.startsWith("--xmsgsel")) {
1: 
0:             // If no message selector is specified, or next token is a new option
0:             if (tokens.isEmpty() || ((String)tokens.get(0)).startsWith("-")) {
0:                 GlobalWriter.printException(new IllegalArgumentException("Message selector not specified"));
1:                 return;
1:             }
1: 
0:             StringTokenizer queryTokens = new StringTokenizer((String)tokens.remove(0), COMMAND_OPTION_DELIMETER);
1:             while (queryTokens.hasMoreTokens()) {
1:                 querySubObjects.add(queryTokens.nextToken());
1:             }
1: 
1:         }
1: 
0:         // Let super class handle unknown option
0:         else {
1:             super.handleOption(token, tokens);
1:         }
1:     }
1: 
1:     /**
1:      * Print the help messages for the browse command
1:      */
1:     protected void printHelp() {
0:         GlobalWriter.printHelp(helpFile);
1:     }
1: 
0:     protected String[] helpFile = new String[] {
0:         "Task Usage: Main purge [browse-options] <destinations>",
0:         "Description: Delete selected destination's messages that matches the message selector.",
0:         "",
0:         "Browse Options:",
0:         "    --msgsel <msgsel1,msglsel2>   Add to the search list messages matched by the query similar to",
0:         "                                  the messages selector format.",
0:         "    --jmxurl <url>                Set the JMX URL to connect to.",
0:         "    --version                     Display the version information.",
0:         "    -h,-?,--help                  Display the browse broker help information.",
0:         "",
0:         "Examples:",
0:         "    Main purge FOO.BAR",
0:         "        - Delete all the messages in queue FOO.BAR",
1: 
0:         "    Main purge --msgsel JMSMessageID='*:10',JMSPriority>5 FOO.*",
0:         "        - Delete all the messages in the destinations that matches FOO.* and has a JMSMessageID in",
0:         "          the header field that matches the wildcard *:10, and has a JMSPriority field > 5 in the",
0:         "          queue FOO.BAR",
0:         "        * To use wildcard queries, the field must be a string and the query enclosed in ''",
0:         "",
0:     };
1: }
author:Torsten Mielke
-------------------------------------------------------------------------------
commit:e282571
/////////////////////////////////////////////////////////////////////////
0: import java.net.URI;
0: import javax.jms.Destination;
0: import javax.jms.Message;
/////////////////////////////////////////////////////////////////////////
0: import org.apache.activemq.command.ActiveMQQueue;
0: import org.apache.activemq.console.util.AmqMessagesUtil;
/////////////////////////////////////////////////////////////////////////
0:         "    Main purge --msgsel \"JMSMessageID='*:10',JMSPriority>5\" FOO.*", 
1:         "          queue FOO.BAR.",
1:         "          SLQ92 syntax is also supported.",
1:         "          Use double quotes \"\" around the entire message selector string.",
1:         ""
/////////////////////////////////////////////////////////////////////////
0:                         
0:                     	QueueViewMBean proxy = (QueueViewMBean) MBeanServerInvocationHandler.
0:                     			newProxyInstance(createJmxConnection(), 
0:                     					queueName, 
0:                     					QueueViewMBean.class, 
0:                     					true);
0:                         
0:                         // AMQ-3404: We support two syntaxes for the message 
0:                         // selector query:
0:                         // 1) AMQ specific: 
0:                         //    "JMSPriority>2,MyHeader='Foo'"
0:                         //
0:                         // 2) SQL-92 syntax:
0:                         //    "(JMSPriority>2) AND (MyHeader='Foo')"
0:                         //
0:                         // If syntax style 1) is used, the comma separated
0:                         // criterias are broken into List<String> elements. 
0:                         // We then need to construct the SQL-92 query out of 
0:                         // this list.
0:                         
0:                         String sqlQuery = null;
0:                         if (queryAddObjects.size() > 1) {
0:                         	 sqlQuery = convertToSQL92(queryAddObjects);
0:                         } else {
0:                         	sqlQuery = queryAddObjects.get(0);
0:                         removed = proxy.removeMatchingMessages(sqlQuery);
0:                         context.printInfo("Removed: " + removed
0:                                 + " messages for message selector " + sqlQuery.toString());
/////////////////////////////////////////////////////////////////////////
0:     
0:     
/////////////////////////////////////////////////////////////////////////
0:     
0:     /**
1:      * Converts the message selector as provided on command line
0:      * argument to activem-admin into an SQL-92 conform string. 
1:      * E.g.
1:      *   "JMSMessageID='*:10',JMSPriority>5"
0:      * gets converted into 
1:      *   "(JMSMessageID='%:10') AND (JMSPriority>5)"
0:      * 
0:      * @param tokens - List of message selector query parameters 
0:      * @return SQL-92 string of that query. 
0:      */
1:     public String convertToSQL92(List<String> tokens) {
0:     	String selector = "";
0: 
0:         // Convert to message selector
1:         for (Iterator i = tokens.iterator(); i.hasNext(); ) {
0:             selector = selector + "(" + i.next().toString() + ") AND ";
0:         }
0: 
0:         // Remove last AND and replace '*' with '%'
0:         if (!selector.equals("")) {
0:             selector = selector.substring(0, selector.length() - 5);
0:             selector = selector.replace('*', '%');
0:         }
0:         return selector;
0:     }
0:     
author:Guillaume Nodet
-------------------------------------------------------------------------------
commit:0dec0b6
/////////////////////////////////////////////////////////////////////////
1:         "    --jmxuser <user>              Set the JMX user used for authenticating.",
1:         "    --jmxpassword <password>      Set the JMX password used for authenticating.",
1:         "    --jmxlocal                    Use the local JMX server instead of a remote one.",
/////////////////////////////////////////////////////////////////////////
0:                 List queueList = JmxMBeansUtil.queryMBeans(createJmxConnection(), "Type=Queue,Destination=" + i.next() + ",*");
0:                         List messages = JmxMBeansUtil.createMessageQueryFilter(createJmxConnection(), queueName).query(queryAddObjects);
/////////////////////////////////////////////////////////////////////////
1:         createJmxConnection().invoke(queue, "purge", new Object[] {}, new String[] {});
/////////////////////////////////////////////////////////////////////////
0:             createJmxConnection().invoke(queue, "removeMessage", param, new String[] {
author:Adrian T. Co
-------------------------------------------------------------------------------
commit:35bfe5c
/////////////////////////////////////////////////////////////////////////
0: /**
0:  *
0:  * Copyright 2005-2006 The Apache Software Foundation
0:  *
0:  * Licensed under the Apache License, Version 2.0 (the "License");
0:  * you may not use this file except in compliance with the License.
0:  * You may obtain a copy of the License at
0:  *
0:  * http://www.apache.org/licenses/LICENSE-2.0
0:  *
0:  * Unless required by applicable law or agreed to in writing, software
0:  * distributed under the License is distributed on an "AS IS" BASIS,
0:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
0:  * See the License for the specific language governing permissions and
0:  * limitations under the License.
0:  */
0: package org.apache.activemq.console.command;
0: 
0: import org.apache.activemq.console.formatter.GlobalWriter;
0: import org.apache.activemq.console.util.JmxMBeansUtil;
0: 
0: import javax.management.ObjectInstance;
0: import javax.management.ObjectName;
0: import javax.management.MBeanServerConnection;
0: import javax.management.openmbean.CompositeData;
0: import javax.management.remote.JMXConnector;
0: import java.util.List;
0: import java.util.StringTokenizer;
0: import java.util.ArrayList;
0: import java.util.Iterator;
0: 
0: public class PurgeCommand extends AbstractJmxCommand {
0: 
0:     private final List queryAddObjects = new ArrayList(10);
0:     private final List querySubObjects = new ArrayList(10);
0: 
0:     /**
0:      * Execute the purge command, which allows you to purge the messages in a given JMS destination
0:      * @param tokens - command arguments
0:      * @throws Exception
0:      */
0:     protected void runTask(List tokens) throws Exception {
0:         try {
0:             // If there is no queue name specified, let's select all
0:             if (tokens.isEmpty()) {
0:                 tokens.add("*");
0:             }
0: 
0:             // Iterate through the queue names
0:             for (Iterator i=tokens.iterator(); i.hasNext();) {
0:                 List queueList = JmxMBeansUtil.queryMBeans(useJmxServiceUrl(), "Type=Queue,Destination=" + i.next() + ",*");
0: 
0:                 for (Iterator j=queueList.iterator(); j.hasNext();) {
0:                     ObjectName queueName = ((ObjectInstance)j.next()).getObjectName();
0:                     if (queryAddObjects.isEmpty()) {
0:                         purgeQueue(queueName);
0:                     } else {
0:                         List messages = JmxMBeansUtil.createMessageQueryFilter(useJmxServiceUrl(), queueName).query(queryAddObjects);
0:                         purgeMessages(queueName, messages);
0:                     }
0:                 }
0:             }
0:         } catch (Exception e) {
0:             GlobalWriter.printException(new RuntimeException("Failed to execute purge task. Reason: " + e));
0:             throw new Exception(e);
0:         }
0:     }
0: 
0:     /**
0:      * Purge all the messages in the queue
0:      * @param queue - ObjectName of the queue to purge
0:      * @throws Exception
0:      */
0:     public void purgeQueue(ObjectName queue) throws Exception {
0:         JMXConnector conn = createJmxConnector();
0:         MBeanServerConnection server = conn.getMBeanServerConnection();
0:         GlobalWriter.printInfo("Purging all messages in queue: " + queue.getKeyProperty("Destination"));
0:         server.invoke(queue, "purge", new Object[] {}, new String[] {});
0:         conn.close();
0:     }
0: 
0:     /**
0:      * Purge selected messages in the queue
0:      * @param queue - ObjectName of the queue to purge the messages from
0:      * @param messages - List of messages to purge
0:      * @throws Exception
0:      */
0:     public void purgeMessages(ObjectName queue, List messages) throws Exception {
0:         JMXConnector conn = createJmxConnector();
0:         MBeanServerConnection server = conn.getMBeanServerConnection();
0: 
0:         Object[] param = new Object[1];
0:         for (Iterator i=messages.iterator(); i.hasNext();) {
0:             CompositeData msg = (CompositeData)i.next();
0:             param[0] = "" + msg.get("JMSMessageID");
0:             GlobalWriter.printInfo("Removing message: " + param[0] + " from queue: " + queue.getKeyProperty("Destination"));
0:             server.invoke(queue, "removeMessage", param, new String[] {"java.lang.String"});
0:         }
0: 
0:         conn.close();
0:     }
0: 
0:     /**
0:      * Handle the --msgsel, --xmsgsel.
0:      * @param token - option token to handle
0:      * @param tokens - succeeding command arguments
0:      * @throws Exception
0:      */
0:     protected void handleOption(String token, List tokens) throws Exception {
0:         // If token is an additive message selector option
0:         if (token.startsWith("--msgsel")) {
0: 
0:             // If no message selector is specified, or next token is a new option
0:             if (tokens.isEmpty() || ((String)tokens.get(0)).startsWith("-")) {
0:                 GlobalWriter.printException(new IllegalArgumentException("Message selector not specified"));
0:                 return;
0:             }
0: 
0:             StringTokenizer queryTokens = new StringTokenizer((String)tokens.remove(0), COMMAND_OPTION_DELIMETER);
0:             while (queryTokens.hasMoreTokens()) {
0:                 queryAddObjects.add(queryTokens.nextToken());
0:             }
0:         }
0: 
0:         // If token is a substractive message selector option
0:         else if (token.startsWith("--xmsgsel")) {
0: 
0:             // If no message selector is specified, or next token is a new option
0:             if (tokens.isEmpty() || ((String)tokens.get(0)).startsWith("-")) {
0:                 GlobalWriter.printException(new IllegalArgumentException("Message selector not specified"));
0:                 return;
0:             }
0: 
0:             StringTokenizer queryTokens = new StringTokenizer((String)tokens.remove(0), COMMAND_OPTION_DELIMETER);
0:             while (queryTokens.hasMoreTokens()) {
0:                 querySubObjects.add(queryTokens.nextToken());
0:             }
0: 
0:         }
0: 
0:         // Let super class handle unknown option
0:         else {
0:             super.handleOption(token, tokens);
0:         }
0:     }
0: 
0:     /**
0:      * Print the help messages for the browse command
0:      */
0:     protected void printHelp() {
0:         GlobalWriter.printHelp(helpFile);
0:     }
0: 
0:     protected String[] helpFile = new String[] {
0:         "Task Usage: Main purge [browse-options] <destinations>",
0:         "Description: Delete selected destination's messages that matches the message selector.",
0:         "",
0:         "Browse Options:",
0:         "    --msgsel <msgsel1,msglsel2>   Add to the search list messages matched by the query similar to",
0:         "                                  the messages selector format.",
0:         "    --jmxurl <url>                Set the JMX URL to connect to.",
0:         "    --version                     Display the version information.",
0:         "    -h,-?,--help                  Display the browse broker help information.",
0:         "",
0:         "Examples:",
0:         "    Main purge FOO.BAR",
0:         "        - Delete all the messages in queue FOO.BAR",
0: 
0:         "    Main purge --msgsel JMSMessageID='*:10',JMSPriority>5 FOO.*",
0:         "        - Delete all the messages in the destinations that matches FOO.* and has a JMSMessageID in",
0:         "          the header field that matches the wildcard *:10, and has a JMSPriority field > 5 in the",
0:         "          queue FOO.BAR",
0:         "        * To use wildcard queries, the field must be a string and the query enclosed in ''",
0:         "",
0:     };
0: }
============================================================================