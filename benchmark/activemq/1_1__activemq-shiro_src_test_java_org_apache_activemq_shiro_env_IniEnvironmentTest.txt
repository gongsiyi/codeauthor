1:f9451e5: /**
1:f9451e5:  * Licensed to the Apache Software Foundation (ASF) under one or more
1:f9451e5:  * contributor license agreements.  See the NOTICE file distributed with
1:f9451e5:  * this work for additional information regarding copyright ownership.
1:f9451e5:  * The ASF licenses this file to You under the Apache License, Version 2.0
1:f9451e5:  * (the "License"); you may not use this file except in compliance with
1:f9451e5:  * the License.  You may obtain a copy of the License at
1:f9451e5:  *
1:f9451e5:  *      http://www.apache.org/licenses/LICENSE-2.0
1:f9451e5:  *
1:f9451e5:  * Unless required by applicable law or agreed to in writing, software
1:f9451e5:  * distributed under the License is distributed on an "AS IS" BASIS,
1:f9451e5:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:f9451e5:  * See the License for the specific language governing permissions and
1:f9451e5:  * limitations under the License.
1:f9451e5:  */
1:f9451e5: package org.apache.activemq.shiro.env;
1:f9451e5: 
1:f9451e5: import org.apache.shiro.authc.UsernamePasswordToken;
1:f9451e5: import org.apache.shiro.config.ConfigurationException;
1:f9451e5: import org.apache.shiro.config.Ini;
1:f9451e5: import org.apache.shiro.subject.Subject;
1:f9451e5: import org.junit.Before;
1:f9451e5: import org.junit.Test;
1:f9451e5: 
1:f9451e5: /**
1:f9451e5:  * @since 5.10.0
1:f9451e5:  */
1:f9451e5: public class IniEnvironmentTest {
1:f9451e5: 
1:f9451e5:     IniEnvironment env;
1:f9451e5: 
1:f9451e5:     @Before
1:f9451e5:     public void setUp() {
1:f9451e5:         env = new IniEnvironment();
1:f9451e5:     }
1:f9451e5: 
1:f9451e5:     protected void authenticate() {
1:f9451e5:         authenticate("foo", "bar");
1:f9451e5:     }
1:f9451e5: 
1:f9451e5:     protected void authenticate(String username, String password) {
1:f9451e5:         Subject subject = new Subject.Builder(env.getSecurityManager()).buildSubject();
1:f9451e5:         subject.login(new UsernamePasswordToken(username, password));
1:f9451e5:     }
1:f9451e5: 
1:f9451e5:     @Test
1:f9451e5:     public void testIniInstanceConstructorArg() {
1:f9451e5:         Ini ini = new Ini();
1:f9451e5:         ini.addSection("users").put("foo", "bar");
1:f9451e5:         env = new IniEnvironment(ini);
1:f9451e5:         authenticate();
1:f9451e5:     }
1:f9451e5: 
1:f9451e5:     @Test
1:f9451e5:     public void testStringConstructorArg() {
1:f9451e5:         String config =
1:f9451e5:                 "[users]\n" +
1:f9451e5:                 "foo = bar";
1:f9451e5: 
1:f9451e5:         env = new IniEnvironment(config);
1:f9451e5:         authenticate();
1:f9451e5:     }
1:f9451e5: 
1:f9451e5:     @Test
1:f9451e5:     public void testSetIni() {
1:f9451e5:         Ini ini = new Ini();
1:f9451e5:         ini.addSection("users").put("foo", "bar");
1:f9451e5: 
1:f9451e5:         env = new IniEnvironment();
1:f9451e5:         env.setIni(ini);
1:f9451e5:         env.init();
1:f9451e5: 
1:f9451e5:         authenticate();
1:f9451e5:     }
1:f9451e5: 
1:f9451e5:     @Test
1:f9451e5:     public void testSetIniString() {
1:f9451e5:         String config =
1:f9451e5:                 "[users]\n" +
1:f9451e5:                 "foo = bar";
1:f9451e5: 
1:f9451e5:         env = new IniEnvironment();
1:f9451e5:         env.setIniConfig(config);
1:f9451e5:         env.init();
1:f9451e5: 
1:f9451e5:         authenticate();
1:f9451e5:     }
1:f9451e5: 
1:f9451e5:     @Test
1:f9451e5:     public void testSetIniResourcePath() {
1:f9451e5:         env = new IniEnvironment();
1:f9451e5:         env.setIniResourcePath("classpath:minimal.shiro.ini");
1:f9451e5:         env.init();
1:f9451e5: 
1:f9451e5:         authenticate("system", "manager");
1:f9451e5:     }
1:f9451e5: 
1:f9451e5:     @Test
1:f9451e5:     public void testDefaultClasspathIni() {
1:f9451e5:         env = new IniEnvironment();
1:f9451e5:         env.init();
1:f9451e5: 
1:f9451e5:         authenticate("system", "manager");
1:f9451e5:     }
1:f9451e5: 
1:f9451e5:     @Test(expected = ConfigurationException.class)
1:f9451e5:     public void testNoDefaultClasspathIni() {
1:f9451e5:         env = new IniEnvironment() {
1:f9451e5:             @Override
1:f9451e5:             protected void apply(Ini ini) {
1:f9451e5:                 super.apply(ini);
1:f9451e5:                 //clear out the objects to simulate as if the ini file wasn't found:
1:f9451e5:                 this.objects.clear();
1:f9451e5:             }
1:f9451e5:         };
1:f9451e5:         env.init();
1:f9451e5:         authenticate("system", "manager");
1:f9451e5:     }
1:f9451e5: 
1:f9451e5: }
============================================================================
author:Les Hazlewood
-------------------------------------------------------------------------------
commit:f9451e5
/////////////////////////////////////////////////////////////////////////
1: /**
1:  * Licensed to the Apache Software Foundation (ASF) under one or more
1:  * contributor license agreements.  See the NOTICE file distributed with
1:  * this work for additional information regarding copyright ownership.
1:  * The ASF licenses this file to You under the Apache License, Version 2.0
1:  * (the "License"); you may not use this file except in compliance with
1:  * the License.  You may obtain a copy of the License at
1:  *
1:  *      http://www.apache.org/licenses/LICENSE-2.0
1:  *
1:  * Unless required by applicable law or agreed to in writing, software
1:  * distributed under the License is distributed on an "AS IS" BASIS,
1:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:  * See the License for the specific language governing permissions and
1:  * limitations under the License.
1:  */
1: package org.apache.activemq.shiro.env;
1: 
1: import org.apache.shiro.authc.UsernamePasswordToken;
1: import org.apache.shiro.config.ConfigurationException;
1: import org.apache.shiro.config.Ini;
1: import org.apache.shiro.subject.Subject;
1: import org.junit.Before;
1: import org.junit.Test;
1: 
1: /**
1:  * @since 5.10.0
1:  */
1: public class IniEnvironmentTest {
1: 
1:     IniEnvironment env;
1: 
1:     @Before
1:     public void setUp() {
1:         env = new IniEnvironment();
1:     }
1: 
1:     protected void authenticate() {
1:         authenticate("foo", "bar");
1:     }
1: 
1:     protected void authenticate(String username, String password) {
1:         Subject subject = new Subject.Builder(env.getSecurityManager()).buildSubject();
1:         subject.login(new UsernamePasswordToken(username, password));
1:     }
1: 
1:     @Test
1:     public void testIniInstanceConstructorArg() {
1:         Ini ini = new Ini();
1:         ini.addSection("users").put("foo", "bar");
1:         env = new IniEnvironment(ini);
1:         authenticate();
1:     }
1: 
1:     @Test
1:     public void testStringConstructorArg() {
1:         String config =
1:                 "[users]\n" +
1:                 "foo = bar";
1: 
1:         env = new IniEnvironment(config);
1:         authenticate();
1:     }
1: 
1:     @Test
1:     public void testSetIni() {
1:         Ini ini = new Ini();
1:         ini.addSection("users").put("foo", "bar");
1: 
1:         env = new IniEnvironment();
1:         env.setIni(ini);
1:         env.init();
1: 
1:         authenticate();
1:     }
1: 
1:     @Test
1:     public void testSetIniString() {
1:         String config =
1:                 "[users]\n" +
1:                 "foo = bar";
1: 
1:         env = new IniEnvironment();
1:         env.setIniConfig(config);
1:         env.init();
1: 
1:         authenticate();
1:     }
1: 
1:     @Test
1:     public void testSetIniResourcePath() {
1:         env = new IniEnvironment();
1:         env.setIniResourcePath("classpath:minimal.shiro.ini");
1:         env.init();
1: 
1:         authenticate("system", "manager");
1:     }
1: 
1:     @Test
1:     public void testDefaultClasspathIni() {
1:         env = new IniEnvironment();
1:         env.init();
1: 
1:         authenticate("system", "manager");
1:     }
1: 
1:     @Test(expected = ConfigurationException.class)
1:     public void testNoDefaultClasspathIni() {
1:         env = new IniEnvironment() {
1:             @Override
1:             protected void apply(Ini ini) {
1:                 super.apply(ini);
1:                 //clear out the objects to simulate as if the ini file wasn't found:
1:                 this.objects.clear();
1:             }
1:         };
1:         env.init();
1:         authenticate("system", "manager");
1:     }
1: 
1: }
============================================================================