1:6ffbed9: /**
1:6ffbed9:  * Licensed to the Apache Software Foundation (ASF) under one or more
1:6ffbed9:  * contributor license agreements.  See the NOTICE file distributed with
1:6ffbed9:  * this work for additional information regarding copyright ownership.
1:6ffbed9:  * The ASF licenses this file to You under the Apache License, Version 2.0
1:6ffbed9:  * (the "License"); you may not use this file except in compliance with
1:6ffbed9:  * the License.  You may obtain a copy of the License at
1:6ffbed9:  *
1:6ffbed9:  *      http://www.apache.org/licenses/LICENSE-2.0
1:6ffbed9:  *
1:6ffbed9:  * Unless required by applicable law or agreed to in writing, software
1:6ffbed9:  * distributed under the License is distributed on an "AS IS" BASIS,
1:6ffbed9:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:6ffbed9:  * See the License for the specific language governing permissions and
1:6ffbed9:  * limitations under the License.
1:6ffbed9:  */
1:6ffbed9: package org.apache.activemq.transport;
3:6ffbed9: 
1:6ffbed9: import java.net.URI;
1:6ffbed9: import java.util.concurrent.ExecutorService;
1:6ffbed9: import java.util.concurrent.Executors;
1:6ffbed9: import java.util.concurrent.TimeUnit;
1:6ffbed9: import javax.jms.Connection;
1:6ffbed9: import javax.jms.MessageConsumer;
1:6ffbed9: import javax.jms.Session;
1:6ffbed9: import junit.framework.Test;
1:6ffbed9: import org.apache.activemq.ActiveMQConnectionFactory;
1:6ffbed9: import org.apache.activemq.JmsTestSupport;
1:6ffbed9: import org.apache.activemq.broker.BrokerService;
1:6ffbed9: import org.apache.activemq.command.ActiveMQQueue;
1:5cf33b5: import org.apache.activemq.store.kahadb.KahaDBPersistenceAdapter;
1:6ffbed9: import org.apache.activemq.util.SocketProxy;
1:6ffbed9: import org.apache.activemq.util.URISupport;
1:5cf33b5: import org.apache.activemq.util.Wait;
1:6ffbed9: import org.slf4j.Logger;
1:6ffbed9: import org.slf4j.LoggerFactory;
1:6ffbed9: 
1:6ffbed9: public class SoWriteTimeoutClientTest extends JmsTestSupport {
1:6ffbed9:     private static final Logger LOG = LoggerFactory.getLogger(SoWriteTimeoutClientTest.class);
1:6ffbed9: 
1:6ffbed9:     protected BrokerService createBroker() throws Exception {
1:6ffbed9:         BrokerService broker =  new BrokerService();
1:5cf33b5:         broker.setDeleteAllMessagesOnStartup(true);
1:5cf33b5:         KahaDBPersistenceAdapter adapter = new KahaDBPersistenceAdapter();
1:5cf33b5:         adapter.setConcurrentStoreAndDispatchQueues(false);
1:5cf33b5:         broker.setPersistenceAdapter(adapter);
1:5cf33b5:         broker.addConnector("tcp://localhost:0?wireFormat.maxInactivityDuration=0");
1:6ffbed9:         return broker;
1:6ffbed9:     }
1:6ffbed9: 
1:5cf33b5:     public void testSendWithClientWriteTimeout() throws Exception {
1:6ffbed9:         final ActiveMQQueue dest = new ActiveMQQueue("testClientWriteTimeout");
1:6ffbed9:         messageTextPrefix = initMessagePrefix(80*1024);
1:6ffbed9: 
1:6ffbed9:         URI tcpBrokerUri = URISupport.removeQuery(broker.getTransportConnectors().get(0).getConnectUri());
1:6ffbed9:         LOG.info("consuming using uri: " + tcpBrokerUri);
1:6ffbed9: 
1:6ffbed9:          ActiveMQConnectionFactory factory = new ActiveMQConnectionFactory(tcpBrokerUri);
1:6ffbed9:         Connection c = factory.createConnection();
1:6ffbed9:         c.start();
1:6ffbed9:         Session session = c.createSession(false, Session.AUTO_ACKNOWLEDGE);
1:6ffbed9:         MessageConsumer consumer = session.createConsumer(dest);
1:6ffbed9: 
1:6ffbed9:         SocketProxy proxy = new SocketProxy();
1:6ffbed9:         proxy.setTarget(tcpBrokerUri);
1:6ffbed9:         proxy.open();
1:6ffbed9: 
1:5cf33b5:         ActiveMQConnectionFactory pFactory = new ActiveMQConnectionFactory("failover:(" + proxy.getUrl() + "?soWriteTimeout=4000&sleep=500)?jms.useAsyncSend=true&trackMessages=true&maxCacheSize=6638400");
1:6ffbed9:         final Connection pc = pFactory.createConnection();
1:6ffbed9:         pc.start();
1:6ffbed9:         proxy.pause();
1:6ffbed9: 
1:6ffbed9:         final int messageCount = 20;
1:6ffbed9:         ExecutorService executorService = Executors.newCachedThreadPool();
1:6ffbed9:         executorService.execute(new Runnable() {
1:6ffbed9:             @Override
1:6ffbed9:             public void run() {
1:6ffbed9:                 try{
1:6ffbed9:                     sendMessages(pc, dest, messageCount);
1:6ffbed9:                 } catch (Exception ignored) {
1:6ffbed9:                     ignored.printStackTrace();
1:6ffbed9:                 }
1:6ffbed9:             }
1:6ffbed9:         });
1:6ffbed9: 
1:6ffbed9:         // wait for timeout and reconnect
1:5cf33b5:         TimeUnit.SECONDS.sleep(8);
1:6ffbed9:         proxy.goOn();
1:6ffbed9:         for (int i=0; i<messageCount; i++) {
1:6ffbed9:             assertNotNull("Got message " + i  + " after reconnect", consumer.receive(5000));
1:6ffbed9:         }
1:5cf33b5: 
1:5cf33b5:         assertTrue("no pending messages when done", Wait.waitFor(new Wait.Condition() {
1:5cf33b5:             @Override
1:5cf33b5:             public boolean isSatisified() throws Exception {
1:5cf33b5: 
1:5cf33b5:                 LOG.info("current total message count: " + broker.getAdminView().getTotalMessageCount());
1:5cf33b5:                 return broker.getAdminView().getTotalMessageCount() == 0;
1:5cf33b5:             }
1:5cf33b5:         }));
1:6ffbed9:     }
1:6ffbed9: 
1:6ffbed9:     private String initMessagePrefix(int i) {
1:6ffbed9:         byte[] content = new byte[i];
1:6ffbed9:         return new String(content);
1:6ffbed9:     }
1:6ffbed9: 
1:6ffbed9:     public static Test suite() {
1:6ffbed9:         return suite(SoWriteTimeoutClientTest.class);
1:6ffbed9:     }
1:6ffbed9: }
============================================================================
author:Timothy A. Bish
-------------------------------------------------------------------------------
commit:ef24cc9
author:Gary Tully
-------------------------------------------------------------------------------
commit:5cf33b5
/////////////////////////////////////////////////////////////////////////
1: import org.apache.activemq.store.kahadb.KahaDBPersistenceAdapter;
1: import org.apache.activemq.util.Wait;
1:         broker.setDeleteAllMessagesOnStartup(true);
1:         KahaDBPersistenceAdapter adapter = new KahaDBPersistenceAdapter();
1:         adapter.setConcurrentStoreAndDispatchQueues(false);
1:         broker.setPersistenceAdapter(adapter);
1:         broker.addConnector("tcp://localhost:0?wireFormat.maxInactivityDuration=0");
1:     public void testSendWithClientWriteTimeout() throws Exception {
/////////////////////////////////////////////////////////////////////////
1:         ActiveMQConnectionFactory pFactory = new ActiveMQConnectionFactory("failover:(" + proxy.getUrl() + "?soWriteTimeout=4000&sleep=500)?jms.useAsyncSend=true&trackMessages=true&maxCacheSize=6638400");
/////////////////////////////////////////////////////////////////////////
1:         TimeUnit.SECONDS.sleep(8);
1: 
1:         assertTrue("no pending messages when done", Wait.waitFor(new Wait.Condition() {
1:             @Override
1:             public boolean isSatisified() throws Exception {
1: 
1:                 LOG.info("current total message count: " + broker.getAdminView().getTotalMessageCount());
1:                 return broker.getAdminView().getTotalMessageCount() == 0;
1:             }
1:         }));
commit:6ffbed9
/////////////////////////////////////////////////////////////////////////
1: /**
1:  * Licensed to the Apache Software Foundation (ASF) under one or more
1:  * contributor license agreements.  See the NOTICE file distributed with
1:  * this work for additional information regarding copyright ownership.
1:  * The ASF licenses this file to You under the Apache License, Version 2.0
1:  * (the "License"); you may not use this file except in compliance with
1:  * the License.  You may obtain a copy of the License at
1:  *
1:  *      http://www.apache.org/licenses/LICENSE-2.0
1:  *
1:  * Unless required by applicable law or agreed to in writing, software
1:  * distributed under the License is distributed on an "AS IS" BASIS,
1:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:  * See the License for the specific language governing permissions and
1:  * limitations under the License.
1:  */
1: package org.apache.activemq.transport;
1: 
1: import java.net.URI;
1: import java.util.concurrent.ExecutorService;
1: import java.util.concurrent.Executors;
1: import java.util.concurrent.TimeUnit;
1: import javax.jms.Connection;
1: import javax.jms.MessageConsumer;
1: import javax.jms.Session;
1: import junit.framework.Test;
1: import org.apache.activemq.ActiveMQConnectionFactory;
1: import org.apache.activemq.JmsTestSupport;
1: import org.apache.activemq.broker.BrokerService;
1: import org.apache.activemq.command.ActiveMQQueue;
1: import org.apache.activemq.util.SocketProxy;
1: import org.apache.activemq.util.URISupport;
1: import org.slf4j.Logger;
1: import org.slf4j.LoggerFactory;
1: 
1: public class SoWriteTimeoutClientTest extends JmsTestSupport {
1:     private static final Logger LOG = LoggerFactory.getLogger(SoWriteTimeoutClientTest.class);
1: 
0:     public String brokerTransportScheme = "tcp";
1: 
1:     protected BrokerService createBroker() throws Exception {
1:         BrokerService broker =  new BrokerService();
0:         broker.addConnector(brokerTransportScheme + "://localhost:0?wireFormat.maxInactivityDuration=0");
1:         return broker;
1:     }
1: 
0:     public void x_testSendWithClientWriteTimeout() throws Exception {
1:         final ActiveMQQueue dest = new ActiveMQQueue("testClientWriteTimeout");
1:         messageTextPrefix = initMessagePrefix(80*1024);
1: 
1:         URI tcpBrokerUri = URISupport.removeQuery(broker.getTransportConnectors().get(0).getConnectUri());
1:         LOG.info("consuming using uri: " + tcpBrokerUri);
1: 
1: 
1:          ActiveMQConnectionFactory factory = new ActiveMQConnectionFactory(tcpBrokerUri);
1:         Connection c = factory.createConnection();
1:         c.start();
1:         Session session = c.createSession(false, Session.AUTO_ACKNOWLEDGE);
1:         MessageConsumer consumer = session.createConsumer(dest);
1: 
1:         SocketProxy proxy = new SocketProxy();
1:         proxy.setTarget(tcpBrokerUri);
1:         proxy.open();
1: 
0:         ActiveMQConnectionFactory pFactory = new ActiveMQConnectionFactory("failover:(" + proxy.getUrl() + "?soWriteTimeout=500)?jms.useAsyncSend=true");
1:         final Connection pc = pFactory.createConnection();
1:         pc.start();
1:         proxy.pause();
1: 
1:         final int messageCount = 20;
1:         ExecutorService executorService = Executors.newCachedThreadPool();
1:         executorService.execute(new Runnable() {
1:             @Override
1:             public void run() {
1:                 try{
1:                     sendMessages(pc, dest, messageCount);
1:                 } catch (Exception ignored) {
1:                     ignored.printStackTrace();
1:                 }
1:             }
1:         });
1: 
1:         // wait for timeout and reconnect
0:         TimeUnit.SECONDS.sleep(20);
1:         proxy.goOn();
1:         for (int i=0; i<messageCount; i++) {
1:             assertNotNull("Got message " + i  + " after reconnect", consumer.receive(5000));
1:         }
1:     }
1: 
1:     private String initMessagePrefix(int i) {
1:         byte[] content = new byte[i];
1:         return new String(content);
1:     }
1: 
1:     public static Test suite() {
1:         return suite(SoWriteTimeoutClientTest.class);
1:     }
1: }
============================================================================