1:18d05ba: /**
1:18d05ba:  * Licensed to the Apache Software Foundation (ASF) under one or more
1:18d05ba:  * contributor license agreements.  See the NOTICE file distributed with
1:18d05ba:  * this work for additional information regarding copyright ownership.
1:18d05ba:  * The ASF licenses this file to You under the Apache License, Version 2.0
1:18d05ba:  * (the "License"); you may not use this file except in compliance with
1:18d05ba:  * the License.  You may obtain a copy of the License at
1:18d05ba:  *
1:18d05ba:  *      http://www.apache.org/licenses/LICENSE-2.0
1:18d05ba:  *
1:18d05ba:  * Unless required by applicable law or agreed to in writing, software
1:18d05ba:  * distributed under the License is distributed on an "AS IS" BASIS,
1:18d05ba:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:18d05ba:  * See the License for the specific language governing permissions and
1:18d05ba:  * limitations under the License.
1:18d05ba:  */
1:18d05ba: package org.apache.activemq.bugs;
1:18d05ba: 
1:d2c0edd: import static org.junit.Assert.assertFalse;
1:18d05ba: import static org.junit.Assert.assertNotNull;
1:18d05ba: import static org.junit.Assert.assertTrue;
1:18d05ba: 
1:18d05ba: import java.io.File;
1:18d05ba: import java.util.Enumeration;
1:18d05ba: import java.util.concurrent.TimeUnit;
1:18d05ba: 
1:18d05ba: import javax.jms.Connection;
1:18d05ba: import javax.jms.DeliveryMode;
1:18d05ba: import javax.jms.Destination;
1:18d05ba: import javax.jms.JMSException;
1:18d05ba: import javax.jms.Message;
1:18d05ba: import javax.jms.MessageProducer;
1:18d05ba: import javax.jms.Queue;
1:18d05ba: import javax.jms.QueueBrowser;
1:18d05ba: import javax.jms.Session;
1:18d05ba: import javax.management.MalformedObjectNameException;
1:18d05ba: import javax.management.ObjectName;
1:18d05ba: 
1:18d05ba: import org.apache.activemq.ActiveMQConnectionFactory;
1:18d05ba: import org.apache.activemq.broker.BrokerService;
1:18d05ba: import org.apache.activemq.broker.jmx.QueueViewMBean;
1:18d05ba: import org.apache.activemq.broker.region.policy.PolicyEntry;
1:18d05ba: import org.apache.activemq.broker.region.policy.PolicyMap;
1:18d05ba: import org.apache.activemq.broker.region.policy.SharedDeadLetterStrategy;
1:18d05ba: import org.apache.activemq.command.ActiveMQDestination;
1:18d05ba: import org.apache.activemq.command.ActiveMQQueue;
1:18d05ba: import org.apache.activemq.leveldb.LevelDBStore;
1:18d05ba: import org.apache.activemq.util.IOHelper;
1:18d05ba: import org.apache.activemq.util.Wait;
1:18d05ba: import org.junit.After;
1:18d05ba: import org.junit.Before;
1:18d05ba: import org.junit.Test;
1:18d05ba: import org.slf4j.Logger;
1:18d05ba: import org.slf4j.LoggerFactory;
1:18d05ba: 
1:18d05ba: /**
1:18d05ba:  * Once the wire format is completed we can test against real persistence storage.
1:18d05ba:  */
1:18d05ba: public class AMQ6059Test {
1:18d05ba: 
1:18d05ba:     private static final Logger LOG = LoggerFactory.getLogger(AMQ6059Test.class);
1:18d05ba: 
1:18d05ba:     private BrokerService broker;
1:18d05ba: 
1:18d05ba:     @Before
1:18d05ba:     public void setUp() throws Exception {
1:18d05ba:         broker = createBroker();
1:18d05ba:         broker.start();
1:18d05ba:         broker.waitUntilStarted();
1:18d05ba:     }
1:18d05ba: 
1:18d05ba:     @After
1:18d05ba:     public void tearDown() throws Exception {
1:18d05ba:         if (broker != null) {
1:18d05ba:             broker.stop();
1:18d05ba:             broker.waitUntilStopped();
1:18d05ba:         }
1:18d05ba:     }
1:18d05ba: 
1:18d05ba:     @Test
1:18d05ba:     public void testDLQRecovery() throws Exception {
1:18d05ba: 
1:18d05ba:         sendMessage(new ActiveMQQueue("QName"));
1:18d05ba:         TimeUnit.SECONDS.sleep(3);
1:18d05ba: 
1:18d05ba:         LOG.info("### Check for expired message moving to DLQ.");
1:18d05ba: 
1:18d05ba:         Queue dlqQueue = (Queue) createDlqDestination();
1:18d05ba:         verifyIsDlq(dlqQueue);
1:18d05ba: 
1:18d05ba:         final QueueViewMBean queueViewMBean = getProxyToQueue(dlqQueue.getQueueName());
1:18d05ba: 
1:18d05ba:         assertTrue("The message expired", Wait.waitFor(new Wait.Condition() {
1:18d05ba:             @Override
1:18d05ba:             public boolean isSatisified() throws Exception {
1:18d05ba:                 LOG.info("DLQ stats: Enqueues {}, Dispatches {}, Expired {}, Inflight {}",
1:18d05ba:                     new Object[] { queueViewMBean.getEnqueueCount(),
1:18d05ba:                                    queueViewMBean.getDispatchCount(),
1:18d05ba:                                    queueViewMBean.getExpiredCount(),
1:18d05ba:                                    queueViewMBean.getInFlightCount()});
1:18d05ba:                 return queueViewMBean.getEnqueueCount() == 1;
1:18d05ba:             }
1:18d05ba:         }));
1:18d05ba: 
1:18d05ba:         verifyMessageIsRecovered(dlqQueue);
1:18d05ba:         restartBroker();
1:18d05ba:         verifyIsDlq(dlqQueue);
1:18d05ba:         verifyMessageIsRecovered(dlqQueue);
1:18d05ba:     }
1:18d05ba: 
1:d2c0edd:     @Test
1:d2c0edd:     public void testSetDlqFlag() throws Exception {
1:d2c0edd:         final ActiveMQQueue toFlp = new ActiveMQQueue("QNameToFlip");
1:d2c0edd:         sendMessage(toFlp);
1:d2c0edd: 
1:d2c0edd:         final QueueViewMBean queueViewMBean = getProxyToQueue(toFlp.getQueueName());
1:d2c0edd:         assertFalse(queueViewMBean.isDLQ());
1:d2c0edd:         queueViewMBean.setDLQ(true);
1:d2c0edd:         assertTrue(queueViewMBean.isDLQ());
1:d2c0edd:     }
1:d2c0edd: 
1:18d05ba:     protected BrokerService createBroker() throws Exception {
1:18d05ba:         return createBrokerWithDLQ(true);
1:18d05ba:     }
1:18d05ba: 
1:18d05ba:     private BrokerService createBrokerWithDLQ(boolean purge) throws Exception {
1:18d05ba:         BrokerService broker = new BrokerService();
1:18d05ba:         ActiveMQQueue dlq = new ActiveMQQueue("ActiveMQ.DLQ?isDLQ=true");
1:18d05ba: 
1:18d05ba:         broker.setDestinations(new ActiveMQDestination[]{dlq});
1:18d05ba: 
1:18d05ba:         PolicyMap pMap = new PolicyMap();
1:18d05ba: 
1:18d05ba:         SharedDeadLetterStrategy sharedDLQStrategy = new SharedDeadLetterStrategy();
1:18d05ba:         sharedDLQStrategy.setProcessNonPersistent(true);
1:18d05ba:         sharedDLQStrategy.setProcessExpired(true);
1:18d05ba:         sharedDLQStrategy.setDeadLetterQueue(dlq);
1:18d05ba:         sharedDLQStrategy.setExpiration(10000);
1:18d05ba: 
1:18d05ba:         PolicyEntry defaultPolicy = new PolicyEntry();
1:18d05ba:         defaultPolicy.setDeadLetterStrategy(sharedDLQStrategy);
1:18d05ba:         defaultPolicy.setExpireMessagesPeriod(2000);
1:18d05ba:         defaultPolicy.setUseCache(false);
1:18d05ba: 
1:18d05ba:         pMap.put(new ActiveMQQueue(">"), defaultPolicy);
1:18d05ba:         broker.setDestinationPolicy(pMap);
1:18d05ba:         if (purge) {
1:18d05ba:             broker.setDeleteAllMessagesOnStartup(true);
1:18d05ba:         }
1:18d05ba: 
1:18d05ba:         return broker;
1:18d05ba:     }
1:18d05ba: 
1:18d05ba:     private void restartBroker() throws Exception {
1:18d05ba:         broker.stop();
1:18d05ba:         broker.waitUntilStopped();
1:18d05ba:         broker = createBrokerWithDLQ(false);
1:18d05ba:         broker.start();
1:18d05ba:         broker.waitUntilStarted();
1:18d05ba:     }
1:18d05ba: 
1:18d05ba:     private void verifyMessageIsRecovered(final Queue dlqQueue) throws Exception, JMSException {
1:18d05ba:         Connection connection = createConnection();
1:18d05ba:         connection.start();
1:18d05ba:         Session session = connection.createSession(false, Session.AUTO_ACKNOWLEDGE);
1:18d05ba:         QueueBrowser browser = session.createBrowser(dlqQueue);
1:18d05ba:         Enumeration<?> elements = browser.getEnumeration();
1:18d05ba:         assertTrue(elements.hasMoreElements());
1:18d05ba:         Message browsed = (Message) elements.nextElement();
1:18d05ba:         assertNotNull("Recover message after broker restarts", browsed);
1:18d05ba:     }
1:18d05ba: 
1:18d05ba:     private void sendMessage(Destination destination) throws Exception {
1:18d05ba:         Connection connection = createConnection();
1:18d05ba:         connection.start();
1:18d05ba:         Session session = connection.createSession(false, Session.AUTO_ACKNOWLEDGE);
1:18d05ba:         MessageProducer producer = session.createProducer(destination);
1:18d05ba:         producer.send(destination, session.createTextMessage("DLQ message"), DeliveryMode.PERSISTENT, 4, 1000);
1:18d05ba:         connection.stop();
1:18d05ba:         LOG.info("### Send message that will expire.");
1:18d05ba:     }
1:18d05ba: 
1:18d05ba:     private Connection createConnection() throws Exception {
1:18d05ba:         ActiveMQConnectionFactory factory = new ActiveMQConnectionFactory(broker.getVmConnectorURI());
1:18d05ba:         return factory.createConnection();
1:18d05ba:     }
1:18d05ba: 
1:18d05ba:     private Destination createDlqDestination() {
1:18d05ba:         return new ActiveMQQueue("ActiveMQ.DLQ");
1:18d05ba:     }
1:18d05ba: 
1:18d05ba:     private void verifyIsDlq(Queue dlqQ) throws Exception {
1:18d05ba:         final QueueViewMBean queueViewMBean = getProxyToQueue(dlqQ.getQueueName());
1:18d05ba:         assertTrue("is dlq", queueViewMBean.isDLQ());
1:18d05ba:     }
1:18d05ba: 
1:18d05ba:     private QueueViewMBean getProxyToQueue(String name) throws MalformedObjectNameException, JMSException {
1:18d05ba:         ObjectName queueViewMBeanName = new ObjectName(
1:18d05ba:             "org.apache.activemq:type=Broker,brokerName=localhost,destinationType=Queue,destinationName=" + name);
1:18d05ba:         QueueViewMBean proxy = (QueueViewMBean) broker.getManagementContext().newProxyInstance(
1:18d05ba:             queueViewMBeanName, QueueViewMBean.class, true);
1:18d05ba:         return proxy;
1:18d05ba:     }
1:18d05ba: }
============================================================================
author:gtully
-------------------------------------------------------------------------------
commit:d2c0edd
/////////////////////////////////////////////////////////////////////////
1: import static org.junit.Assert.assertFalse;
/////////////////////////////////////////////////////////////////////////
1:     @Test
1:     public void testSetDlqFlag() throws Exception {
1:         final ActiveMQQueue toFlp = new ActiveMQQueue("QNameToFlip");
1:         sendMessage(toFlp);
1: 
1:         final QueueViewMBean queueViewMBean = getProxyToQueue(toFlp.getQueueName());
1:         assertFalse(queueViewMBean.isDLQ());
1:         queueViewMBean.setDLQ(true);
1:         assertTrue(queueViewMBean.isDLQ());
1:     }
1: 
commit:18d05ba
/////////////////////////////////////////////////////////////////////////
1: /**
1:  * Licensed to the Apache Software Foundation (ASF) under one or more
1:  * contributor license agreements.  See the NOTICE file distributed with
1:  * this work for additional information regarding copyright ownership.
1:  * The ASF licenses this file to You under the Apache License, Version 2.0
1:  * (the "License"); you may not use this file except in compliance with
1:  * the License.  You may obtain a copy of the License at
1:  *
1:  *      http://www.apache.org/licenses/LICENSE-2.0
1:  *
1:  * Unless required by applicable law or agreed to in writing, software
1:  * distributed under the License is distributed on an "AS IS" BASIS,
1:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:  * See the License for the specific language governing permissions and
1:  * limitations under the License.
1:  */
1: package org.apache.activemq.bugs;
1: 
1: import static org.junit.Assert.assertNotNull;
1: import static org.junit.Assert.assertTrue;
1: 
1: import java.io.File;
1: import java.util.Enumeration;
1: import java.util.concurrent.TimeUnit;
1: 
1: import javax.jms.Connection;
1: import javax.jms.DeliveryMode;
1: import javax.jms.Destination;
1: import javax.jms.JMSException;
1: import javax.jms.Message;
1: import javax.jms.MessageProducer;
1: import javax.jms.Queue;
1: import javax.jms.QueueBrowser;
1: import javax.jms.Session;
1: import javax.management.MalformedObjectNameException;
1: import javax.management.ObjectName;
1: 
1: import org.apache.activemq.ActiveMQConnectionFactory;
1: import org.apache.activemq.broker.BrokerService;
1: import org.apache.activemq.broker.jmx.QueueViewMBean;
1: import org.apache.activemq.broker.region.policy.PolicyEntry;
1: import org.apache.activemq.broker.region.policy.PolicyMap;
1: import org.apache.activemq.broker.region.policy.SharedDeadLetterStrategy;
1: import org.apache.activemq.command.ActiveMQDestination;
1: import org.apache.activemq.command.ActiveMQQueue;
1: import org.apache.activemq.leveldb.LevelDBStore;
1: import org.apache.activemq.util.IOHelper;
1: import org.apache.activemq.util.Wait;
1: import org.junit.After;
1: import org.junit.Before;
1: import org.junit.Test;
1: import org.slf4j.Logger;
1: import org.slf4j.LoggerFactory;
1: 
1: /**
1:  * Once the wire format is completed we can test against real persistence storage.
1:  */
1: public class AMQ6059Test {
1: 
1:     private static final Logger LOG = LoggerFactory.getLogger(AMQ6059Test.class);
1: 
1:     private BrokerService broker;
1: 
1:     @Before
1:     public void setUp() throws Exception {
1:         broker = createBroker();
1:         broker.start();
1:         broker.waitUntilStarted();
1:     }
1: 
1:     @After
1:     public void tearDown() throws Exception {
1:         if (broker != null) {
1:             broker.stop();
1:             broker.waitUntilStopped();
1:         }
1:     }
1: 
1:     @Test
1:     public void testDLQRecovery() throws Exception {
1: 
1:         sendMessage(new ActiveMQQueue("QName"));
1:         TimeUnit.SECONDS.sleep(3);
1: 
1:         LOG.info("### Check for expired message moving to DLQ.");
1: 
1:         Queue dlqQueue = (Queue) createDlqDestination();
1:         verifyIsDlq(dlqQueue);
1: 
1:         final QueueViewMBean queueViewMBean = getProxyToQueue(dlqQueue.getQueueName());
1: 
1:         assertTrue("The message expired", Wait.waitFor(new Wait.Condition() {
1:             @Override
1:             public boolean isSatisified() throws Exception {
1:                 LOG.info("DLQ stats: Enqueues {}, Dispatches {}, Expired {}, Inflight {}",
1:                     new Object[] { queueViewMBean.getEnqueueCount(),
1:                                    queueViewMBean.getDispatchCount(),
1:                                    queueViewMBean.getExpiredCount(),
1:                                    queueViewMBean.getInFlightCount()});
1:                 return queueViewMBean.getEnqueueCount() == 1;
1:             }
1:         }));
1: 
1:         verifyMessageIsRecovered(dlqQueue);
1:         restartBroker();
1:         verifyIsDlq(dlqQueue);
1:         verifyMessageIsRecovered(dlqQueue);
1:     }
1: 
1:     protected BrokerService createBroker() throws Exception {
1:         return createBrokerWithDLQ(true);
1:     }
1: 
1:     private BrokerService createBrokerWithDLQ(boolean purge) throws Exception {
1:         BrokerService broker = new BrokerService();
1:         ActiveMQQueue dlq = new ActiveMQQueue("ActiveMQ.DLQ?isDLQ=true");
1: 
1:         broker.setDestinations(new ActiveMQDestination[]{dlq});
1: 
1:         PolicyMap pMap = new PolicyMap();
1: 
1:         SharedDeadLetterStrategy sharedDLQStrategy = new SharedDeadLetterStrategy();
1:         sharedDLQStrategy.setProcessNonPersistent(true);
1:         sharedDLQStrategy.setProcessExpired(true);
1:         sharedDLQStrategy.setDeadLetterQueue(dlq);
1:         sharedDLQStrategy.setExpiration(10000);
1: 
1:         PolicyEntry defaultPolicy = new PolicyEntry();
1:         defaultPolicy.setDeadLetterStrategy(sharedDLQStrategy);
1:         defaultPolicy.setExpireMessagesPeriod(2000);
1:         defaultPolicy.setUseCache(false);
1: 
1:         pMap.put(new ActiveMQQueue(">"), defaultPolicy);
1:         broker.setDestinationPolicy(pMap);
1:         if (purge) {
1:             broker.setDeleteAllMessagesOnStartup(true);
1:         }
1: 
1:         return broker;
1:     }
1: 
1:     private void restartBroker() throws Exception {
1:         broker.stop();
1:         broker.waitUntilStopped();
1:         broker = createBrokerWithDLQ(false);
1:         broker.start();
1:         broker.waitUntilStarted();
1:     }
1: 
1:     private void verifyMessageIsRecovered(final Queue dlqQueue) throws Exception, JMSException {
1:         Connection connection = createConnection();
1:         connection.start();
1:         Session session = connection.createSession(false, Session.AUTO_ACKNOWLEDGE);
1:         QueueBrowser browser = session.createBrowser(dlqQueue);
1:         Enumeration<?> elements = browser.getEnumeration();
1:         assertTrue(elements.hasMoreElements());
1:         Message browsed = (Message) elements.nextElement();
1:         assertNotNull("Recover message after broker restarts", browsed);
1:     }
1: 
1:     private void sendMessage(Destination destination) throws Exception {
1:         Connection connection = createConnection();
1:         connection.start();
1:         Session session = connection.createSession(false, Session.AUTO_ACKNOWLEDGE);
1:         MessageProducer producer = session.createProducer(destination);
1:         producer.send(destination, session.createTextMessage("DLQ message"), DeliveryMode.PERSISTENT, 4, 1000);
1:         connection.stop();
1:         LOG.info("### Send message that will expire.");
1:     }
1: 
1:     private Connection createConnection() throws Exception {
1:         ActiveMQConnectionFactory factory = new ActiveMQConnectionFactory(broker.getVmConnectorURI());
1:         return factory.createConnection();
1:     }
1: 
1:     private Destination createDlqDestination() {
1:         return new ActiveMQQueue("ActiveMQ.DLQ");
1:     }
1: 
1:     private void verifyIsDlq(Queue dlqQ) throws Exception {
1:         final QueueViewMBean queueViewMBean = getProxyToQueue(dlqQ.getQueueName());
1:         assertTrue("is dlq", queueViewMBean.isDLQ());
1:     }
1: 
1:     private QueueViewMBean getProxyToQueue(String name) throws MalformedObjectNameException, JMSException {
1:         ObjectName queueViewMBeanName = new ObjectName(
1:             "org.apache.activemq:type=Broker,brokerName=localhost,destinationType=Queue,destinationName=" + name);
1:         QueueViewMBean proxy = (QueueViewMBean) broker.getManagementContext().newProxyInstance(
1:             queueViewMBeanName, QueueViewMBean.class, true);
1:         return proxy;
1:     }
1: }
author:Timothy Bish
-------------------------------------------------------------------------------
commit:505a76a
/////////////////////////////////////////////////////////////////////////
0: /**
0:  * Licensed to the Apache Software Foundation (ASF) under one or more
0:  * contributor license agreements.  See the NOTICE file distributed with
0:  * this work for additional information regarding copyright ownership.
0:  * The ASF licenses this file to You under the Apache License, Version 2.0
0:  * (the "License"); you may not use this file except in compliance with
0:  * the License.  You may obtain a copy of the License at
0:  *
0:  *      http://www.apache.org/licenses/LICENSE-2.0
0:  *
0:  * Unless required by applicable law or agreed to in writing, software
0:  * distributed under the License is distributed on an "AS IS" BASIS,
0:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
0:  * See the License for the specific language governing permissions and
0:  * limitations under the License.
0:  */
0: package org.apache.activemq.bugs;
0: 
0: import static org.junit.Assert.assertNotNull;
0: import static org.junit.Assert.assertTrue;
0: 
0: import java.io.File;
0: import java.util.Enumeration;
0: import java.util.concurrent.TimeUnit;
0: 
0: import javax.jms.Connection;
0: import javax.jms.DeliveryMode;
0: import javax.jms.Destination;
0: import javax.jms.JMSException;
0: import javax.jms.Message;
0: import javax.jms.MessageProducer;
0: import javax.jms.Queue;
0: import javax.jms.QueueBrowser;
0: import javax.jms.Session;
0: import javax.management.MalformedObjectNameException;
0: import javax.management.ObjectName;
0: 
0: import org.apache.activemq.ActiveMQConnectionFactory;
0: import org.apache.activemq.broker.BrokerService;
0: import org.apache.activemq.broker.jmx.QueueViewMBean;
0: import org.apache.activemq.broker.region.policy.PolicyEntry;
0: import org.apache.activemq.broker.region.policy.PolicyMap;
0: import org.apache.activemq.broker.region.policy.SharedDeadLetterStrategy;
0: import org.apache.activemq.command.ActiveMQQueue;
0: import org.apache.activemq.leveldb.LevelDBStore;
0: import org.apache.activemq.util.IOHelper;
0: import org.apache.activemq.util.Wait;
0: import org.junit.After;
0: import org.junit.Before;
0: import org.junit.Test;
0: import org.slf4j.Logger;
0: import org.slf4j.LoggerFactory;
0: 
0: /**
0:  * Once the wire format is completed we can test against real persistence storage.
0:  */
0: public class AMQ6059Test {
0: 
0:     private static final Logger LOG = LoggerFactory.getLogger(AMQ6059Test.class);
0: 
0:     private BrokerService broker;
0: 
0:     @Before
0:     public void setUp() throws Exception {
0:         broker = createBroker();
0:         broker.start();
0:         broker.waitUntilStarted();
0:     }
0: 
0:     @After
0:     public void tearDown() throws Exception {
0:         if (broker != null) {
0:             broker.stop();
0:             broker.waitUntilStopped();
0:         }
0:     }
0: 
0:     @Test
0:     public void testDLQRecovery() throws Exception {
0: 
0:         sendMessage(new ActiveMQQueue("leveldbQueue"));
0:         TimeUnit.SECONDS.sleep(3);
0: 
0:         LOG.info("### Check for expired message moving to DLQ.");
0: 
0:         Queue dlqQueue = (Queue) createDlqDestination();
0:         verifyIsDlq(dlqQueue);
0: 
0:         final QueueViewMBean queueViewMBean = getProxyToQueue(dlqQueue.getQueueName());
0: 
0:         assertTrue("The message expired", Wait.waitFor(new Wait.Condition() {
0:             @Override
0:             public boolean isSatisified() throws Exception {
0:                 LOG.info("DLQ stats: Enqueues {}, Dispatches {}, Expired {}, Inflight {}",
0:                     new Object[] { queueViewMBean.getEnqueueCount(),
0:                                    queueViewMBean.getDispatchCount(),
0:                                    queueViewMBean.getExpiredCount(),
0:                                    queueViewMBean.getInFlightCount()});
0:                 return queueViewMBean.getEnqueueCount() == 1;
0:             }
0:         }));
0: 
0:         verifyMessageIsRecovered(dlqQueue);
0:         restartBroker(broker);
0:         verifyMessageIsRecovered(dlqQueue);
0:     }
0: 
0:     protected BrokerService createBroker() throws Exception {
0:         return createBrokerWithDLQ(true);
0:     }
0: 
0:     private BrokerService createBrokerWithDLQ(boolean purge) throws Exception {
0:         BrokerService broker = new BrokerService();
0: 
0:         File directory = new File("target/activemq-data/leveldb");
0:         if (purge) {
0:             IOHelper.deleteChildren(directory);
0:         }
0: 
0:         LevelDBStore levelDBStore = new LevelDBStore();
0:         levelDBStore.setDirectory(directory);
0:         if (purge) {
0:             levelDBStore.deleteAllMessages();
0:         }
0: 
0:         PolicyMap pMap = new PolicyMap();
0: 
0:         SharedDeadLetterStrategy sharedDLQStrategy = new SharedDeadLetterStrategy();
0:         sharedDLQStrategy.setProcessNonPersistent(true);
0:         sharedDLQStrategy.setProcessExpired(true);
0:         sharedDLQStrategy.setDeadLetterQueue(new ActiveMQQueue("ActiveMQ.DLQ"));
0:         sharedDLQStrategy.setExpiration(10000);
0: 
0:         PolicyEntry defaultPolicy = new PolicyEntry();
0:         defaultPolicy.setDeadLetterStrategy(sharedDLQStrategy);
0:         defaultPolicy.setExpireMessagesPeriod(2000);
0:         defaultPolicy.setUseCache(false);
0: 
0:         pMap.put(new ActiveMQQueue(">"), defaultPolicy);
0:         broker.setDestinationPolicy(pMap);
0:         broker.setPersistenceAdapter(levelDBStore);
0:         if (purge) {
0:             broker.setDeleteAllMessagesOnStartup(true);
0:         }
0: 
0:         return broker;
0:     }
0: 
0:     private void restartBroker(BrokerService broker) throws Exception {
0:         broker.stop();
0:         broker.waitUntilStopped();
0:         broker = createBrokerWithDLQ(false);
0:         broker.start();
0:         broker.waitUntilStarted();
0:     }
0: 
0:     private void verifyMessageIsRecovered(final Queue dlqQueue) throws Exception, JMSException {
0:         Connection connection = createConnection();
0:         connection.start();
0:         Session session = connection.createSession(false, Session.AUTO_ACKNOWLEDGE);
0:         QueueBrowser browser = session.createBrowser(dlqQueue);
0:         Enumeration<?> elements = browser.getEnumeration();
0:         assertTrue(elements.hasMoreElements());
0:         Message browsed = (Message) elements.nextElement();
0:         assertNotNull("Recover message after broker restarts", browsed);
0:     }
0: 
0:     private void sendMessage(Destination destination) throws Exception {
0:         Connection connection = createConnection();
0:         connection.start();
0:         Session session = connection.createSession(false, Session.AUTO_ACKNOWLEDGE);
0:         MessageProducer producer = session.createProducer(destination);
0:         producer.send(destination, session.createTextMessage("DLQ message"), DeliveryMode.PERSISTENT, 4, 1000);
0:         connection.stop();
0:         LOG.info("### Send message that will expire.");
0:     }
0: 
0:     private Connection createConnection() throws Exception {
0:         ActiveMQConnectionFactory factory = new ActiveMQConnectionFactory(broker.getVmConnectorURI());
0:         return factory.createConnection();
0:     }
0: 
0:     private Destination createDlqDestination() {
0:         return new ActiveMQQueue("ActiveMQ.DLQ");
0:     }
0: 
0:     private void verifyIsDlq(Queue dlqQ) throws Exception {
0:         final QueueViewMBean queueViewMBean = getProxyToQueue(dlqQ.getQueueName());
0:         assertTrue("is dlq", queueViewMBean.isDLQ());
0:     }
0: 
0:     private QueueViewMBean getProxyToQueue(String name) throws MalformedObjectNameException, JMSException {
0:         ObjectName queueViewMBeanName = new ObjectName(
0:             "org.apache.activemq:type=Broker,brokerName=localhost,destinationType=Queue,destinationName=" + name);
0:         QueueViewMBean proxy = (QueueViewMBean) broker.getManagementContext().newProxyInstance(
0:             queueViewMBeanName, QueueViewMBean.class, true);
0:         return proxy;
0:     }
0: }
============================================================================