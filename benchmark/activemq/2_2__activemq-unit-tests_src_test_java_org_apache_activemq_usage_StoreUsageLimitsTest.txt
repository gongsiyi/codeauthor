1:7db0fe6: /**
1:7db0fe6:  * Licensed to the Apache Software Foundation (ASF) under one or more
1:7db0fe6:  * contributor license agreements.  See the NOTICE file distributed with
1:7db0fe6:  * this work for additional information regarding copyright ownership.
1:7db0fe6:  * The ASF licenses this file to You under the Apache License, Version 2.0
1:7db0fe6:  * (the "License"); you may not use this file except in compliance with
1:7db0fe6:  * the License.  You may obtain a copy of the License at
1:7db0fe6:  *
1:7db0fe6:  *      http://www.apache.org/licenses/LICENSE-2.0
1:7db0fe6:  *
1:7db0fe6:  * Unless required by applicable law or agreed to in writing, software
1:7db0fe6:  * distributed under the License is distributed on an "AS IS" BASIS,
1:7db0fe6:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:7db0fe6:  * See the License for the specific language governing permissions and
1:7db0fe6:  * limitations under the License.
1:7db0fe6:  */
4:7db0fe6: 
1:7db0fe6: package org.apache.activemq.usage;
1:7db0fe6: 
1:d7febdd: import java.util.concurrent.CountDownLatch;
1:d7febdd: import java.util.concurrent.TimeUnit;
1:7db0fe6: 
1:d7febdd: import org.apache.activemq.ConfigurationException;
1:d7febdd: import org.junit.Test;
1:d7febdd: 
1:7db0fe6: import org.apache.activemq.broker.BrokerService;
1:d7febdd: import org.apache.activemq.util.DefaultTestAppender;
1:d7febdd: import org.apache.log4j.Level;
1:d7febdd: import org.apache.log4j.Logger;
1:d7febdd: import org.apache.log4j.spi.LoggingEvent;
1:d7febdd: 
1:7db0fe6: 
1:d7febdd: import static org.junit.Assert.assertTrue;
1:d7febdd: import static org.junit.Assert.fail;
1:d7febdd: 
1:d7febdd: public class StoreUsageLimitsTest {
1:7db0fe6: 
1:7db0fe6:     final int WAIT_TIME_MILLS = 20 * 1000;
1:a620b40:     private static final String limitsLogLevel = "warn";
1:d7febdd:     final String toMatch = new String(Long.toString(Long.MAX_VALUE / (1024 * 1024)));
1:7db0fe6: 
1:7db0fe6:     protected BrokerService createBroker() throws Exception {
1:d7febdd:         BrokerService broker = new BrokerService();
1:d7febdd:         broker.setPersistent(false);
1:7db0fe6:         broker.getSystemUsage().getMemoryUsage().setLimit(Long.MAX_VALUE);
1:7db0fe6:         broker.getSystemUsage().setCheckLimitsLogLevel(limitsLogLevel);
1:7db0fe6:         broker.deleteAllMessages();
1:7db0fe6:         return broker;
4:7db0fe6:     }
1:7db0fe6: 
1:d7febdd:     @Test
1:7db0fe6:     public void testCheckLimitsLogLevel() throws Exception {
1:7db0fe6: 
1:d7febdd:         final CountDownLatch foundMessage = new CountDownLatch(1);
1:d7febdd:         DefaultTestAppender appender = new DefaultTestAppender() {
1:d7febdd:             @Override
1:d7febdd:             public void doAppend(LoggingEvent event) {
1:d7febdd:                 String message = (String) event.getMessage();
1:d7febdd:                 if (message.contains(toMatch) && event.getLevel().equals(Level.WARN)) {
1:d7febdd:                     foundMessage.countDown();
1:7db0fe6:                 }
1:7db0fe6:             }
1:d7febdd:         };
1:7db0fe6: 
1:d7febdd:         Logger.getRootLogger().addAppender(appender);
1:d7febdd:         BrokerService brokerService = createBroker();
1:d7febdd:         brokerService.start();
1:d7febdd:         brokerService.stop();
1:d7febdd: 
1:d7febdd:         assertTrue("Fount log message", foundMessage.await(WAIT_TIME_MILLS, TimeUnit.MILLISECONDS));
1:d7febdd: 
1:d7febdd:         Logger.getRootLogger().removeAppender(appender);
1:d7febdd:     }
1:d7febdd: 
1:d7febdd:     @Test
1:d7febdd:     public void testCheckLimitsFailStart() throws Exception {
1:d7febdd: 
1:d7febdd:         final CountDownLatch foundMessage = new CountDownLatch(1);
1:d7febdd:         DefaultTestAppender appender = new DefaultTestAppender() {
1:d7febdd:             @Override
1:d7febdd:             public void doAppend(LoggingEvent event) {
1:d7febdd:                 String message = (String) event.getMessage();
1:d7febdd:                 if (message.contains(toMatch) && event.getLevel().equals(Level.ERROR)) {
1:d7febdd:                     foundMessage.countDown();
1:d7febdd:                 }
1:d7febdd:             }
1:d7febdd:         };
1:d7febdd: 
1:d7febdd:         Logger.getRootLogger().addAppender(appender);
1:d7febdd:         BrokerService brokerService = createBroker();
1:d7febdd:         brokerService.setAdjustUsageLimits(false);
1:d7febdd:         try {
1:d7febdd:             brokerService.start();
1:d7febdd:             fail("expect ConfigurationException");
1:d7febdd:         } catch (ConfigurationException expected) {
1:d7febdd:             assertTrue("exception message match", expected.getLocalizedMessage().contains(toMatch));
1:d7febdd:         }
1:d7febdd:         brokerService.stop();
1:d7febdd: 
1:d7febdd:         assertTrue("Fount log message", foundMessage.await(WAIT_TIME_MILLS, TimeUnit.MILLISECONDS));
1:d7febdd: 
1:d7febdd:         Logger.getRootLogger().removeAppender(appender);
1:7db0fe6:     }
1:7db0fe6: }
============================================================================
author:gtully
-------------------------------------------------------------------------------
commit:d7febdd
/////////////////////////////////////////////////////////////////////////
1: import java.util.concurrent.CountDownLatch;
1: import java.util.concurrent.TimeUnit;
1: import org.apache.activemq.ConfigurationException;
1: import org.junit.Test;
1: 
1: import org.apache.activemq.util.DefaultTestAppender;
1: import org.apache.log4j.Level;
1: import org.apache.log4j.Logger;
1: import org.apache.log4j.spi.LoggingEvent;
1: 
1: import static org.junit.Assert.assertTrue;
1: import static org.junit.Assert.fail;
1: 
1: public class StoreUsageLimitsTest {
1:     final String toMatch = new String(Long.toString(Long.MAX_VALUE / (1024 * 1024)));
1:         BrokerService broker = new BrokerService();
1:         broker.setPersistent(false);
1:     @Test
1:         final CountDownLatch foundMessage = new CountDownLatch(1);
1:         DefaultTestAppender appender = new DefaultTestAppender() {
1:             @Override
1:             public void doAppend(LoggingEvent event) {
1:                 String message = (String) event.getMessage();
1:                 if (message.contains(toMatch) && event.getLevel().equals(Level.WARN)) {
1:                     foundMessage.countDown();
1:         };
1:         Logger.getRootLogger().addAppender(appender);
1:         BrokerService brokerService = createBroker();
1:         brokerService.start();
1:         brokerService.stop();
1: 
1:         assertTrue("Fount log message", foundMessage.await(WAIT_TIME_MILLS, TimeUnit.MILLISECONDS));
1: 
1:         Logger.getRootLogger().removeAppender(appender);
1:     }
1: 
1:     @Test
1:     public void testCheckLimitsFailStart() throws Exception {
1: 
1:         final CountDownLatch foundMessage = new CountDownLatch(1);
1:         DefaultTestAppender appender = new DefaultTestAppender() {
1:             @Override
1:             public void doAppend(LoggingEvent event) {
1:                 String message = (String) event.getMessage();
1:                 if (message.contains(toMatch) && event.getLevel().equals(Level.ERROR)) {
1:                     foundMessage.countDown();
1:                 }
1:             }
1:         };
1: 
1:         Logger.getRootLogger().addAppender(appender);
1:         BrokerService brokerService = createBroker();
1:         brokerService.setAdjustUsageLimits(false);
1:         try {
1:             brokerService.start();
1:             fail("expect ConfigurationException");
1:         } catch (ConfigurationException expected) {
1:             assertTrue("exception message match", expected.getLocalizedMessage().contains(toMatch));
1:         }
1:         brokerService.stop();
1: 
1:         assertTrue("Fount log message", foundMessage.await(WAIT_TIME_MILLS, TimeUnit.MILLISECONDS));
1: 
1:         Logger.getRootLogger().removeAppender(appender);
commit:a620b40
/////////////////////////////////////////////////////////////////////////
1:     private static final String limitsLogLevel = "warn";
author:Timothy Bish
-------------------------------------------------------------------------------
commit:7db0fe6
/////////////////////////////////////////////////////////////////////////
1: /**
1:  * Licensed to the Apache Software Foundation (ASF) under one or more
1:  * contributor license agreements.  See the NOTICE file distributed with
1:  * this work for additional information regarding copyright ownership.
1:  * The ASF licenses this file to You under the Apache License, Version 2.0
1:  * (the "License"); you may not use this file except in compliance with
1:  * the License.  You may obtain a copy of the License at
1:  *
1:  *      http://www.apache.org/licenses/LICENSE-2.0
1:  *
1:  * Unless required by applicable law or agreed to in writing, software
1:  * distributed under the License is distributed on an "AS IS" BASIS,
1:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:  * See the License for the specific language governing permissions and
1:  * limitations under the License.
1:  */
1: 
1: package org.apache.activemq.usage;
1: 
0: import java.io.BufferedReader;
0: import java.io.File;
0: import java.io.FileInputStream;
0: import java.io.InputStreamReader;
0: import java.nio.charset.Charset;
1: 
0: import org.apache.activemq.EmbeddedBrokerTestSupport;
1: import org.apache.activemq.broker.BrokerService;
1: 
0: public class StoreUsageLimitsTest extends EmbeddedBrokerTestSupport {
1: 
1:     final int WAIT_TIME_MILLS = 20 * 1000;
0:     private static final String limitsLogLevel = "error";
1: 
0:     @Override
1:     protected BrokerService createBroker() throws Exception {
0:         BrokerService broker = super.createBroker();
1:         broker.getSystemUsage().getMemoryUsage().setLimit(Long.MAX_VALUE);
1:         broker.getSystemUsage().setCheckLimitsLogLevel(limitsLogLevel);
1:         broker.deleteAllMessages();
1:         return broker;
1:     }
1: 
0:     @Override
0:     protected boolean isPersistent() {
0:         return true;
1:     }
1: 
1:     public void testCheckLimitsLogLevel() throws Exception {
1: 
0:         File file = new File("target/activemq-test.log");
0:         if (!file.exists()) {
0:             fail("target/activemq-test.log was not created.");
1:         }
1: 
0:         BufferedReader br = null;
0:         boolean foundUsage = false;
1: 
0:         try {
0:             br = new BufferedReader(new InputStreamReader(new FileInputStream(file), Charset.forName("UTF-8")));
0:             String line = null;
0:             while ((line = br.readLine()) != null) {
0:                 if (line.contains(new String(Long.toString(Long.MAX_VALUE / (1024 * 1024)))) && line.contains(limitsLogLevel.toUpperCase())) {
0:                     foundUsage = true;
1:                 }
1:             }
0:         } catch (Exception e) {
0:             fail(e.getMessage());
0:         } finally {
0:             br.close();
1:         }
1: 
0:         if (!foundUsage)
0:             fail("checkLimitsLogLevel message did not write to log target/activemq-test.log");
1:     }
1: }
============================================================================