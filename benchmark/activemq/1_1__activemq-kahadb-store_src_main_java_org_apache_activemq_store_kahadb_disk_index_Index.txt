1:456a2ba: /**
1:456a2ba:  * Licensed to the Apache Software Foundation (ASF) under one or more
1:456a2ba:  * contributor license agreements.  See the NOTICE file distributed with
1:456a2ba:  * this work for additional information regarding copyright ownership.
1:456a2ba:  * The ASF licenses this file to You under the Apache License, Version 2.0
1:456a2ba:  * (the "License"); you may not use this file except in compliance with
1:456a2ba:  * the License.  You may obtain a copy of the License at
1:456a2ba:  *
1:456a2ba:  *      http://www.apache.org/licenses/LICENSE-2.0
1:456a2ba:  *
1:456a2ba:  * Unless required by applicable law or agreed to in writing, software
1:456a2ba:  * distributed under the License is distributed on an "AS IS" BASIS,
1:456a2ba:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:456a2ba:  * See the License for the specific language governing permissions and
1:456a2ba:  * limitations under the License.
1:456a2ba:  */
1:1aab71b: package org.apache.activemq.store.kahadb.disk.index;
1:456a2ba: 
1:456a2ba: import java.io.IOException;
1:456a2ba: import java.util.Iterator;
1:456a2ba: import java.util.Map;
1:456a2ba: 
1:1aab71b: import org.apache.activemq.store.kahadb.disk.page.Transaction;
1:1aab71b: import org.apache.activemq.store.kahadb.disk.util.Marshaller;
1:456a2ba: 
1:456a2ba: /**
1:456a2ba:  * Simpler than a Map
1:0bbc0ac:  * 
1:456a2ba:  * 
1:456a2ba:  */
1:456a2ba: public interface Index<Key,Value> {
1:456a2ba:     
1:456a2ba:     /**
1:456a2ba:      * Set the marshaller for key objects
1:456a2ba:      * 
1:456a2ba:      * @param marshaller
1:456a2ba:      */
1:456a2ba:     void setKeyMarshaller(Marshaller<Key> marshaller);
1:456a2ba:     
1:456a2ba:     /**
1:456a2ba:      * Set the marshaller for key objects
1:456a2ba:      * 
1:456a2ba:      * @param marshaller
1:456a2ba:      */
1:456a2ba:     void setValueMarshaller(Marshaller<Value> marshaller);
1:456a2ba: 
1:456a2ba:     /**
1:456a2ba:      * load indexes
1:456a2ba:      */
1:456a2ba:     void load(Transaction tx) throws IOException;
1:456a2ba: 
1:456a2ba:     /**
1:456a2ba:      * unload indexes
1:456a2ba:      * 
1:456a2ba:      * @throws IOException
1:456a2ba:      */
1:456a2ba:     void unload(Transaction tx) throws IOException;
1:456a2ba: 
1:456a2ba:     /**
1:456a2ba:      * clear the index
1:456a2ba:      * 
1:456a2ba:      * @throws IOException
1:456a2ba:      * 
1:456a2ba:      */
1:456a2ba:     void clear(Transaction tx) throws IOException;
1:456a2ba: 
1:456a2ba:     /**
1:456a2ba:      * @param key
1:456a2ba:      * @return true if it contains the key
1:456a2ba:      * @throws IOException
1:456a2ba:      */
1:456a2ba:     boolean containsKey(Transaction tx, Key key) throws IOException;
1:456a2ba: 
1:456a2ba:     /**
1:456a2ba:      * remove the index key
1:456a2ba:      * 
1:456a2ba:      * @param key
1:456a2ba:      * @return StoreEntry removed
1:456a2ba:      * @throws IOException
1:456a2ba:      */
1:456a2ba:     Value remove(Transaction tx, Key key) throws IOException;
1:456a2ba: 
1:456a2ba:     /**
1:456a2ba:      * store the key, item
1:456a2ba:      * 
1:456a2ba:      * @param key
1:456a2ba:      * @param entry
1:456a2ba:      * @throws IOException
1:456a2ba:      */
1:456a2ba:     Value put(Transaction tx, Key key, Value entry) throws IOException;
1:456a2ba: 
1:456a2ba:     /**
1:456a2ba:      * @param key
1:456a2ba:      * @return the entry
1:456a2ba:      * @throws IOException
1:456a2ba:      */
1:456a2ba:     Value get(Transaction tx, Key key) throws IOException;
1:456a2ba: 
1:456a2ba:     /**
1:456a2ba:      * @return true if the index is transient
1:456a2ba:      */
1:456a2ba:     boolean isTransient();
1:456a2ba:     
1:456a2ba:     /**
1:456a2ba:      * @param tx
1:456a2ba:      * @return
1:456a2ba:      * @throws IOException
1:456a2ba:      * @trhows UnsupportedOperationException 
1:456a2ba:      *         if the index does not support fast iteration of the elements.
1:456a2ba:      */
1:456a2ba:     Iterator<Map.Entry<Key,Value>> iterator(final Transaction tx) throws IOException, UnsupportedOperationException;
1:456a2ba:     
1:456a2ba: }
============================================================================
author:Hiram R. Chirino
-------------------------------------------------------------------------------
commit:c5cf038
commit:1aab71b
/////////////////////////////////////////////////////////////////////////
1: package org.apache.activemq.store.kahadb.disk.index;
1: import org.apache.activemq.store.kahadb.disk.page.Transaction;
1: import org.apache.activemq.store.kahadb.disk.util.Marshaller;
commit:715010a
commit:0bbc0ac
/////////////////////////////////////////////////////////////////////////
1:  * 
commit:456a2ba
/////////////////////////////////////////////////////////////////////////
1: /**
1:  * Licensed to the Apache Software Foundation (ASF) under one or more
1:  * contributor license agreements.  See the NOTICE file distributed with
1:  * this work for additional information regarding copyright ownership.
1:  * The ASF licenses this file to You under the Apache License, Version 2.0
1:  * (the "License"); you may not use this file except in compliance with
1:  * the License.  You may obtain a copy of the License at
1:  *
1:  *      http://www.apache.org/licenses/LICENSE-2.0
1:  *
1:  * Unless required by applicable law or agreed to in writing, software
1:  * distributed under the License is distributed on an "AS IS" BASIS,
1:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:  * See the License for the specific language governing permissions and
1:  * limitations under the License.
1:  */
0: package org.apache.kahadb.index;
1: 
1: import java.io.IOException;
1: import java.util.Iterator;
1: import java.util.Map;
1: 
0: import org.apache.kahadb.page.Transaction;
0: import org.apache.kahadb.util.Marshaller;
1: 
1: /**
1:  * Simpler than a Map
1:  * 
0:  * @version $Revision$
1:  */
1: public interface Index<Key,Value> {
1:     
1:     /**
1:      * Set the marshaller for key objects
1:      * 
1:      * @param marshaller
1:      */
1:     void setKeyMarshaller(Marshaller<Key> marshaller);
1:     
1:     /**
1:      * Set the marshaller for key objects
1:      * 
1:      * @param marshaller
1:      */
1:     void setValueMarshaller(Marshaller<Value> marshaller);
1: 
1:     /**
1:      * load indexes
1:      */
1:     void load(Transaction tx) throws IOException;
1: 
1:     /**
1:      * unload indexes
1:      * 
1:      * @throws IOException
1:      */
1:     void unload(Transaction tx) throws IOException;
1: 
1:     /**
1:      * clear the index
1:      * 
1:      * @throws IOException
1:      * 
1:      */
1:     void clear(Transaction tx) throws IOException;
1: 
1:     /**
1:      * @param key
1:      * @return true if it contains the key
1:      * @throws IOException
1:      */
1:     boolean containsKey(Transaction tx, Key key) throws IOException;
1: 
1:     /**
1:      * remove the index key
1:      * 
1:      * @param key
1:      * @return StoreEntry removed
1:      * @throws IOException
1:      */
1:     Value remove(Transaction tx, Key key) throws IOException;
1: 
1:     /**
1:      * store the key, item
1:      * 
1:      * @param key
1:      * @param entry
1:      * @throws IOException
1:      */
1:     Value put(Transaction tx, Key key, Value entry) throws IOException;
1: 
1:     /**
1:      * @param key
1:      * @return the entry
1:      * @throws IOException
1:      */
1:     Value get(Transaction tx, Key key) throws IOException;
1: 
1:     /**
1:      * @return true if the index is transient
1:      */
1:     boolean isTransient();
1:     
1:     /**
1:      * @param tx
1:      * @return
1:      * @throws IOException
1:      * @trhows UnsupportedOperationException 
1:      *         if the index does not support fast iteration of the elements.
1:      */
1:     Iterator<Map.Entry<Key,Value>> iterator(final Transaction tx) throws IOException, UnsupportedOperationException;
1:     
1: }
============================================================================