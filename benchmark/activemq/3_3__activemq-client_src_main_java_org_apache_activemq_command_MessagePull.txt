1:9d671b7: /**
1:9d671b7:  * Licensed to the Apache Software Foundation (ASF) under one or more
1:9d671b7:  * contributor license agreements.  See the NOTICE file distributed with
1:9d671b7:  * this work for additional information regarding copyright ownership.
1:9d671b7:  * The ASF licenses this file to You under the Apache License, Version 2.0
1:9d671b7:  * (the "License"); you may not use this file except in compliance with
1:9d671b7:  * the License.  You may obtain a copy of the License at
1:e935c5a:  *
1:230a86c:  *      http://www.apache.org/licenses/LICENSE-2.0
5:9d671b7:  *
1:9d671b7:  * Unless required by applicable law or agreed to in writing, software
1:9d671b7:  * distributed under the License is distributed on an "AS IS" BASIS,
1:9d671b7:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:9d671b7:  * See the License for the specific language governing permissions and
1:9d671b7:  * limitations under the License.
1:9d671b7:  */
1:9d671b7: package org.apache.activemq.command;
1:9d671b7: 
1:9d671b7: import org.apache.activemq.state.CommandVisitor;
1:9d671b7: 
1:9d671b7: /**
1:9d671b7:  * Used to pull messages on demand.
1:e7703f7:  *
1:9d671b7:  * @openwire:marshaller code="20"
1:e7703f7:  *
1:e7703f7:  *
1:9d671b7:  */
1:a21dd40: public class MessagePull extends BaseCommand implements TransientInitializer {
1:9d671b7: 
1:9d671b7:     public static final byte DATA_STRUCTURE_TYPE = CommandTypes.MESSAGE_PULL;
1:9d671b7: 
1:9d671b7:     protected ConsumerId consumerId;
1:9d671b7:     protected ActiveMQDestination destination;
1:9d671b7:     protected long timeout;
1:e935c5a:     private MessageId messageId;
1:e935c5a:     private String correlationId;
1:9d671b7: 
1:05ff52d:     private transient int quantity = 1;
1:05ff52d:     private transient boolean alwaysSignalDone;
1:e7703f7:     private transient boolean tracked = false;
1:e7703f7: 
1:e7703f7:     @Override
1:9d671b7:     public byte getDataStructureType() {
1:9d671b7:         return DATA_STRUCTURE_TYPE;
1:9d671b7:     }
1:9d671b7: 
1:e7703f7:     @Override
1:9d671b7:     public Response visit(CommandVisitor visitor) throws Exception {
1:9d671b7:         return visitor.processMessagePull(this);
1:9d671b7:     }
1:9d671b7: 
1:9d671b7:     /**
1:6e3a634:      * Configures a message pull from the consumer information
1:6e3a634:      */
1:6e3a634:     public void configure(ConsumerInfo info) {
1:6e3a634:         setConsumerId(info.getConsumerId());
1:6e3a634:         setDestination(info.getDestination());
1:6e3a634:     }
1:6e3a634: 
1:6e3a634:     /**
1:9d671b7:      * @openwire:property version=1 cache=true
1:9d671b7:      */
1:9d671b7:     public ConsumerId getConsumerId() {
1:9d671b7:         return consumerId;
1:9d671b7:     }
1:9d671b7: 
1:9d671b7:     public void setConsumerId(ConsumerId consumerId) {
1:9d671b7:         this.consumerId = consumerId;
1:9d671b7:     }
1:9d671b7: 
1:9d671b7:     /**
1:9d671b7:      * @openwire:property version=1 cache=true
1:9d671b7:      */
1:9d671b7:     public ActiveMQDestination getDestination() {
1:9d671b7:         return destination;
1:9d671b7:     }
1:9d671b7: 
1:9d671b7:     public void setDestination(ActiveMQDestination destination) {
1:9d671b7:         this.destination = destination;
1:9d671b7:     }
1:9d671b7: 
1:9d671b7:     /**
1:9d671b7:      * @openwire:property version=1
1:9d671b7:      */
1:9d671b7:     public long getTimeout() {
1:9d671b7:         return timeout;
1:9d671b7:     }
1:9d671b7: 
1:9d671b7:     public void setTimeout(long timeout) {
1:9d671b7:         this.timeout = timeout;
1:9d671b7:     }
1:9d671b7: 
1:e935c5a:     /**
1:e935c5a:      * An optional correlation ID which could be used by a broker to decide which messages are pulled
1:e935c5a:      * on demand from a queue for a consumer
1:0bbc0ac:      *
1:e935c5a:      * @openwire:property version=3
1:e935c5a:      */
1:e935c5a:     public String getCorrelationId() {
1:e935c5a:         return correlationId;
1:e935c5a:     }
1:e935c5a: 
1:e935c5a:     public void setCorrelationId(String correlationId) {
1:e935c5a:         this.correlationId = correlationId;
1:e935c5a:     }
1:e935c5a: 
1:e935c5a: 
1:e935c5a:     /**
1:e935c5a:      * An optional message ID which could be used by a broker to decide which messages are pulled
1:e935c5a:      * on demand from a queue for a consumer
1:e935c5a:      *
1:e935c5a:      * @openwire:property version=3
1:e935c5a:      */
1:e935c5a:     public MessageId getMessageId() {
1:e935c5a:         return messageId;
1:e935c5a:     }
1:e935c5a: 
1:e935c5a:     public void setMessageId(MessageId messageId) {
1:e935c5a:         this.messageId = messageId;
1:e935c5a:     }
1:e7703f7: 
1:e7703f7:     public void setTracked(boolean tracked) {
1:e7703f7:         this.tracked = tracked;
1:e7703f7:     }
1:e7703f7: 
1:e7703f7:     public boolean isTracked() {
1:e7703f7:         return this.tracked;
1:e7703f7:     }
1:05ff52d: 
1:05ff52d:     public int getQuantity() {
1:05ff52d:         return quantity;
1:05ff52d:     }
1:05ff52d: 
1:05ff52d:     public void setQuantity(int quantity) {
1:05ff52d:         this.quantity = quantity;
1:05ff52d:     }
1:05ff52d: 
1:05ff52d:     public boolean isAlwaysSignalDone() {
1:05ff52d:         return alwaysSignalDone;
1:05ff52d:     }
1:05ff52d: 
1:05ff52d:     public void setAlwaysSignalDone(boolean alwaysSignalDone) {
1:05ff52d:         this.alwaysSignalDone = alwaysSignalDone;
1:05ff52d:     }
1:a21dd40: 
1:a21dd40:     @Override
1:a21dd40:     public void initTransients() {
1:a21dd40:         quantity = 1;
1:a21dd40:         alwaysSignalDone = false;
1:a21dd40:         tracked = false;
1:a21dd40:     }
1:9d671b7: }
============================================================================
author:Timothy Bish
-------------------------------------------------------------------------------
commit:a21dd40
/////////////////////////////////////////////////////////////////////////
1: public class MessagePull extends BaseCommand implements TransientInitializer {
/////////////////////////////////////////////////////////////////////////
1: 
1:     @Override
1:     public void initTransients() {
1:         quantity = 1;
1:         alwaysSignalDone = false;
1:         tracked = false;
1:     }
commit:05ff52d
/////////////////////////////////////////////////////////////////////////
1:     private transient int quantity = 1;
1:     private transient boolean alwaysSignalDone;
/////////////////////////////////////////////////////////////////////////
1: 
1:     public int getQuantity() {
1:         return quantity;
1:     }
1: 
1:     public void setQuantity(int quantity) {
1:         this.quantity = quantity;
1:     }
1: 
1:     public boolean isAlwaysSignalDone() {
1:         return alwaysSignalDone;
1:     }
1: 
1:     public void setAlwaysSignalDone(boolean alwaysSignalDone) {
1:         this.alwaysSignalDone = alwaysSignalDone;
1:     }
commit:e7703f7
/////////////////////////////////////////////////////////////////////////
1:  *
1:  *
1:  *
/////////////////////////////////////////////////////////////////////////
1:     private transient boolean tracked = false;
1: 
1:     @Override
1:     @Override
/////////////////////////////////////////////////////////////////////////
1: 
1:     public void setTracked(boolean tracked) {
1:         this.tracked = tracked;
1:     }
1: 
1:     public boolean isTracked() {
1:         return this.tracked;
1:     }
author:Hiram R. Chirino
-------------------------------------------------------------------------------
commit:9a8f6e4
commit:0bbc0ac
/////////////////////////////////////////////////////////////////////////
1:  * 
commit:230a86c
/////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////
1:  *      http://www.apache.org/licenses/LICENSE-2.0
author:James Strachan
-------------------------------------------------------------------------------
commit:e935c5a
/////////////////////////////////////////////////////////////////////////
1:     private MessageId messageId;
1:     private String correlationId;
/////////////////////////////////////////////////////////////////////////
1:     /**
1:      * An optional correlation ID which could be used by a broker to decide which messages are pulled
1:      * on demand from a queue for a consumer
1:      *
1:      * @openwire:property version=3
1:      */
1:     public String getCorrelationId() {
1:         return correlationId;
1:     }
1: 
1:     public void setCorrelationId(String correlationId) {
1:         this.correlationId = correlationId;
1:     }
1: 
1: 
1:     /**
1:      * An optional message ID which could be used by a broker to decide which messages are pulled
1:      * on demand from a queue for a consumer
1:      *
1:      * @openwire:property version=3
1:      */
1:     public MessageId getMessageId() {
1:         return messageId;
1:     }
1: 
1:     public void setMessageId(MessageId messageId) {
1:         this.messageId = messageId;
1:     }
commit:6e3a634
/////////////////////////////////////////////////////////////////////////
1:      * Configures a message pull from the consumer information
1:      */
1:     public void configure(ConsumerInfo info) {
1:         setConsumerId(info.getConsumerId());
1:         setDestination(info.getDestination());
1:     }
1: 
1:     /**
commit:9d671b7
/////////////////////////////////////////////////////////////////////////
1: /**
1:  *
1:  * Licensed to the Apache Software Foundation (ASF) under one or more
1:  * contributor license agreements.  See the NOTICE file distributed with
1:  * this work for additional information regarding copyright ownership.
1:  * The ASF licenses this file to You under the Apache License, Version 2.0
1:  * (the "License"); you may not use this file except in compliance with
1:  * the License.  You may obtain a copy of the License at
1:  *
0:  * http://www.apache.org/licenses/LICENSE-2.0
1:  *
1:  * Unless required by applicable law or agreed to in writing, software
1:  * distributed under the License is distributed on an "AS IS" BASIS,
1:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:  * See the License for the specific language governing permissions and
1:  * limitations under the License.
1:  */
1: package org.apache.activemq.command;
1: 
1: import org.apache.activemq.state.CommandVisitor;
1: 
1: /**
1:  * Used to pull messages on demand.
1:  * 
1:  * @openwire:marshaller code="20"
1:  * 
0:  * @version $Revision$
1:  */
0: public class MessagePull extends BaseCommand {
1: 
1:     public static final byte DATA_STRUCTURE_TYPE = CommandTypes.MESSAGE_PULL;
1: 
1:     protected ConsumerId consumerId;
1:     protected ActiveMQDestination destination;
1:     protected long timeout;
1: 
1:     public byte getDataStructureType() {
1:         return DATA_STRUCTURE_TYPE;
1:     }
1: 
1:     public Response visit(CommandVisitor visitor) throws Exception {
1:         return visitor.processMessagePull(this);
1:     }
1: 
1:     /**
1:      * @openwire:property version=1 cache=true
1:      */
1:     public ConsumerId getConsumerId() {
1:         return consumerId;
1:     }
1: 
1:     public void setConsumerId(ConsumerId consumerId) {
1:         this.consumerId = consumerId;
1:     }
1: 
1:     /**
1:      * @openwire:property version=1 cache=true
1:      */
1:     public ActiveMQDestination getDestination() {
1:         return destination;
1:     }
1: 
1:     public void setDestination(ActiveMQDestination destination) {
1:         this.destination = destination;
1:     }
1: 
1:     /**
1:      * @openwire:property version=1
1:      */
1:     public long getTimeout() {
1:         return timeout;
1:     }
1: 
1:     public void setTimeout(long timeout) {
1:         this.timeout = timeout;
1:     }
1: 
1: }
============================================================================