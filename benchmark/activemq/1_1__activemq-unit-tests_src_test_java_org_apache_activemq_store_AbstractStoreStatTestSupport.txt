1:734fb7d: /**
1:734fb7d:  * Licensed to the Apache Software Foundation (ASF) under one or more
1:734fb7d:  * contributor license agreements.  See the NOTICE file distributed with
1:734fb7d:  * this work for additional information regarding copyright ownership.
1:734fb7d:  * The ASF licenses this file to You under the Apache License, Version 2.0
1:734fb7d:  * (the "License"); you may not use this file except in compliance with
1:734fb7d:  * the License.  You may obtain a copy of the License at
1:734fb7d:  *
1:734fb7d:  *      http://www.apache.org/licenses/LICENSE-2.0
1:734fb7d:  *
1:734fb7d:  * Unless required by applicable law or agreed to in writing, software
1:734fb7d:  * distributed under the License is distributed on an "AS IS" BASIS,
1:734fb7d:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:734fb7d:  * See the License for the specific language governing permissions and
1:734fb7d:  * limitations under the License.
1:734fb7d:  */
1:734fb7d: package org.apache.activemq.store;
1:734fb7d: 
1:734fb7d: import static org.junit.Assert.assertEquals;
1:734fb7d: import static org.junit.Assert.assertNotNull;
1:734fb7d: 
1:734fb7d: import java.net.URI;
1:734fb7d: import java.util.Enumeration;
1:734fb7d: import java.util.Random;
1:734fb7d: import java.util.concurrent.atomic.AtomicLong;
1:734fb7d: 
1:734fb7d: import javax.jms.BytesMessage;
1:734fb7d: import javax.jms.Connection;
1:734fb7d: import javax.jms.DeliveryMode;
1:734fb7d: import javax.jms.JMSException;
1:734fb7d: import javax.jms.Message;
1:734fb7d: import javax.jms.MessageConsumer;
1:734fb7d: import javax.jms.MessageProducer;
1:734fb7d: import javax.jms.Queue;
1:734fb7d: import javax.jms.QueueBrowser;
1:734fb7d: import javax.jms.QueueSession;
1:734fb7d: import javax.jms.Session;
1:734fb7d: import javax.jms.Topic;
1:734fb7d: import javax.jms.TopicSession;
1:734fb7d: import javax.jms.TopicSubscriber;
1:734fb7d: import javax.management.ObjectName;
1:734fb7d: import javax.management.openmbean.CompositeData;
1:734fb7d: 
1:734fb7d: import org.apache.activemq.ActiveMQConnectionFactory;
1:734fb7d: import org.apache.activemq.broker.BrokerService;
1:734fb7d: import org.apache.activemq.broker.jmx.DurableSubscriptionViewMBean;
1:734fb7d: import org.apache.activemq.broker.region.Destination;
1:734fb7d: import org.apache.activemq.command.ActiveMQDestination;
1:734fb7d: import org.apache.activemq.command.ActiveMQMessage;
1:734fb7d: import org.apache.activemq.command.ActiveMQQueue;
1:734fb7d: import org.apache.activemq.command.ActiveMQTopic;
1:2262225: import org.slf4j.Logger;
1:2262225: import org.slf4j.LoggerFactory;
1:734fb7d: 
1:734fb7d: /**
1:734fb7d:  *
1:734fb7d:  *
1:734fb7d:  */
1:734fb7d: public abstract class AbstractStoreStatTestSupport {
1:734fb7d: 
1:2262225:     protected static final Logger LOG = LoggerFactory
1:2262225:             .getLogger(AbstractStoreStatTestSupport.class);
1:2262225: 
1:734fb7d:     protected static int defaultMessageSize = 1000;
1:734fb7d: 
1:734fb7d:     protected abstract BrokerService getBroker();
1:734fb7d: 
1:734fb7d:     protected abstract URI getBrokerConnectURI();
1:734fb7d: 
1:734fb7d:     protected Destination consumeTestQueueMessages(String queueName) throws Exception {
1:734fb7d:         // create a new queue
1:734fb7d:         final ActiveMQDestination activeMqQueue = new ActiveMQQueue(
1:734fb7d:                 queueName);
1:734fb7d: 
1:734fb7d:         Destination dest = getBroker().getDestination(activeMqQueue);
1:734fb7d: 
1:734fb7d:         // Start the connection
1:734fb7d:         Connection connection = new ActiveMQConnectionFactory(getBrokerConnectURI())
1:734fb7d:         .createConnection();
1:734fb7d:         connection.setClientID("clientId2" + queueName);
1:734fb7d:         connection.start();
1:734fb7d:         Session session = connection.createSession(false,
1:734fb7d:                 QueueSession.AUTO_ACKNOWLEDGE);
1:734fb7d:         Queue queue = session.createQueue(queueName);
1:734fb7d: 
1:734fb7d:         try {
1:734fb7d:             MessageConsumer consumer = session.createConsumer(queue);
1:734fb7d:             for (int i = 0; i < 200; i++) {
1:734fb7d:                 consumer.receive();
1:734fb7d:             }
1:734fb7d: 
1:734fb7d:         } finally {
1:734fb7d:             connection.stop();
1:734fb7d:         }
1:734fb7d: 
1:734fb7d:         return dest;
1:734fb7d:     }
1:734fb7d: 
1:734fb7d:     protected Destination browseTestQueueMessages(String queueName) throws Exception {
1:734fb7d:         // create a new queue
1:734fb7d:         final ActiveMQDestination activeMqQueue = new ActiveMQQueue(
1:734fb7d:                 queueName);
1:734fb7d: 
1:734fb7d:         Destination dest = getBroker().getDestination(activeMqQueue);
1:734fb7d: 
1:734fb7d:         // Start the connection
1:734fb7d:         Connection connection = new ActiveMQConnectionFactory(getBrokerConnectURI())
1:734fb7d:         .createConnection();
1:734fb7d:         connection.setClientID("clientId2" + queueName);
1:734fb7d:         connection.start();
1:734fb7d:         Session session = connection.createSession(false,
1:734fb7d:                 QueueSession.AUTO_ACKNOWLEDGE);
1:734fb7d:         Queue queue = session.createQueue(queueName);
1:734fb7d: 
1:734fb7d:         try {
1:734fb7d:             QueueBrowser queueBrowser = session.createBrowser(queue);
1:734fb7d:             @SuppressWarnings("unchecked")
1:734fb7d:             Enumeration<Message> messages = queueBrowser.getEnumeration();
1:734fb7d:             while (messages.hasMoreElements()) {
1:734fb7d:                 messages.nextElement();
1:734fb7d:             }
1:734fb7d: 
1:734fb7d:         } finally {
1:734fb7d:             connection.stop();
1:734fb7d:         }
1:734fb7d: 
1:734fb7d:         return dest;
1:734fb7d:     }
1:734fb7d: 
1:734fb7d:     protected Destination consumeDurableTestMessages(Connection connection, String sub,
1:734fb7d:             int size, String topicName, AtomicLong publishedMessageSize) throws Exception {
1:734fb7d:         // create a new queue
1:734fb7d:         final ActiveMQDestination activeMqTopic = new ActiveMQTopic(
1:734fb7d:                 topicName);
1:734fb7d: 
1:734fb7d:         Destination dest = getBroker().getDestination(activeMqTopic);
1:734fb7d: 
1:734fb7d:         Session session = connection.createSession(false,
1:734fb7d:                 QueueSession.AUTO_ACKNOWLEDGE);
1:734fb7d:         Topic topic = session.createTopic(topicName);
1:734fb7d: 
1:734fb7d:         try {
1:734fb7d:             TopicSubscriber consumer = session.createDurableSubscriber(topic, sub);
1:734fb7d:             for (int i = 0; i < size; i++) {
1:734fb7d:                 ActiveMQMessage message = (ActiveMQMessage) consumer.receive();
1:734fb7d:                 if (publishedMessageSize != null) {
1:734fb7d:                     publishedMessageSize.addAndGet(-message.getSize());
1:734fb7d:                 }
1:734fb7d:             }
1:734fb7d: 
1:734fb7d:         } finally {
1:734fb7d:             session.close();
1:734fb7d:         }
1:734fb7d: 
1:734fb7d:         return dest;
1:734fb7d:     }
1:734fb7d: 
1:734fb7d:     protected org.apache.activemq.broker.region.Queue publishTestQueueMessages(int count, String queueName,
1:734fb7d:             int deliveryMode, int messageSize, AtomicLong publishedMessageSize) throws Exception {
1:734fb7d:         // create a new queue
1:734fb7d:         final ActiveMQDestination activeMqQueue = new ActiveMQQueue(
1:734fb7d:                 queueName);
1:734fb7d: 
1:734fb7d:         Destination dest = getBroker().getDestination(activeMqQueue);
1:734fb7d: 
1:734fb7d:         // Start the connection
1:734fb7d:         Connection connection = new ActiveMQConnectionFactory(getBrokerConnectURI())
1:734fb7d:         .createConnection();
1:734fb7d:         connection.setClientID("clientId" + queueName);
1:734fb7d:         connection.start();
1:734fb7d:         Session session = connection.createSession(false,
1:734fb7d:                 QueueSession.AUTO_ACKNOWLEDGE);
1:734fb7d:         Queue queue = session.createQueue(queueName);
1:734fb7d: 
1:734fb7d:         try {
1:734fb7d:             // publish a bunch of non-persistent messages to fill up the temp
1:734fb7d:             // store
1:734fb7d:             MessageProducer prod = session.createProducer(queue);
1:734fb7d:             prod.setDeliveryMode(deliveryMode);
1:734fb7d:             for (int i = 0; i < count; i++) {
1:8a09b7e:                 prod.send(createMessage(i, session, messageSize, publishedMessageSize));
1:734fb7d:             }
1:734fb7d: 
1:734fb7d:         } finally {
1:734fb7d:             connection.close();
1:734fb7d:         }
1:734fb7d: 
1:734fb7d:         return (org.apache.activemq.broker.region.Queue) dest;
1:734fb7d:     }
1:734fb7d: 
1:734fb7d:     protected org.apache.activemq.broker.region.Topic publishTestMessagesDurable(Connection connection, String[] subNames, String topicName,
1:734fb7d:             int publishSize, int expectedSize, int messageSize, AtomicLong publishedMessageSize,
1:734fb7d:             boolean verifyBrowsing) throws Exception {
1:734fb7d:         return this.publishTestMessagesDurable(connection, subNames, topicName, publishSize, expectedSize, messageSize,
1:734fb7d:                 publishedMessageSize, verifyBrowsing, DeliveryMode.PERSISTENT);
1:734fb7d:     }
1:734fb7d: 
1:734fb7d:     protected org.apache.activemq.broker.region.Topic publishTestMessagesDurable(Connection connection, String[] subNames, String topicName,
1:734fb7d:             int publishSize, int expectedSize, int messageSize, AtomicLong publishedMessageSize,
1:734fb7d:             boolean verifyBrowsing, int deliveryMode) throws Exception {
1:734fb7d:         // create a new queue
1:734fb7d:         final ActiveMQDestination activeMqTopic = new ActiveMQTopic(
1:734fb7d:                 topicName);
1:734fb7d: 
1:734fb7d:         Destination dest = getBroker().getDestination(activeMqTopic);
1:734fb7d: 
1:734fb7d:         // Start the connection
1:734fb7d: 
1:734fb7d:         Session session = connection.createSession(false,
1:734fb7d:                 TopicSession.AUTO_ACKNOWLEDGE);
1:734fb7d:         Topic topic = session.createTopic(topicName);
1:734fb7d:         for (String subName : subNames) {
1:734fb7d:             session.createDurableSubscriber(topic, subName);
1:734fb7d:         }
1:734fb7d: 
1:734fb7d:         ObjectName[] subs = null;
1:734fb7d:         if (verifyBrowsing) {
1:734fb7d:             // browse the durable sub - this test is to verify that browsing (which calls createTopicMessageStore)
1:734fb7d:             //in KahaDBStore will not create a brand new store (ie uses the cache) If the cache is not used,
1:734fb7d:             //then the statistics won't be updated properly because a new store would overwrite the old store
1:734fb7d:             //which is still in use
1:734fb7d:             subs = getBroker().getAdminView().getDurableTopicSubscribers();
1:734fb7d:         }
1:734fb7d: 
1:734fb7d:         try {
1:734fb7d:             // publish a bunch of non-persistent messages to fill up the temp
1:734fb7d:             // store
1:734fb7d:             MessageProducer prod = session.createProducer(topic);
1:734fb7d:             prod.setDeliveryMode(deliveryMode);
1:734fb7d:             for (int i = 0; i < publishSize; i++) {
1:8a09b7e:                 prod.send(createMessage(i, session, messageSize, publishedMessageSize));
1:734fb7d:             }
1:734fb7d: 
1:734fb7d:             //verify the view has expected messages
1:734fb7d:             if (verifyBrowsing) {
1:734fb7d:                 assertNotNull(subs);
1:734fb7d:                 assertEquals(subNames.length, subs.length);
1:734fb7d:                 ObjectName subName = subs[0];
1:734fb7d:                 DurableSubscriptionViewMBean sub = (DurableSubscriptionViewMBean)
1:734fb7d:                         getBroker().getManagementContext().newProxyInstance(subName, DurableSubscriptionViewMBean.class, true);
1:734fb7d:                 CompositeData[] data  = sub.browse();
1:734fb7d:                 assertNotNull(data);
1:734fb7d:                 assertEquals(expectedSize, data.length);
1:734fb7d:             }
1:734fb7d: 
1:734fb7d:         } finally {
1:734fb7d:             session.close();
1:734fb7d:         }
1:734fb7d: 
1:734fb7d:         return (org.apache.activemq.broker.region.Topic) dest;
1:734fb7d:     }
1:734fb7d: 
1:734fb7d:     /**
1:8a09b7e:      * Generate random messages between 100 bytes and maxMessageSize
1:734fb7d:      * @param session
1:734fb7d:      * @return
1:734fb7d:      * @throws JMSException
1:734fb7d:      */
1:8a09b7e:     protected BytesMessage createMessage(int count, Session session, int maxMessageSize, AtomicLong publishedMessageSize) throws JMSException {
1:734fb7d:         final BytesMessage message = session.createBytesMessage();
1:8a09b7e: 
1:8a09b7e:         final Random randomSize = new Random();
1:8a09b7e:         int size = randomSize.nextInt((maxMessageSize - 100) + 1) + 100;
1:8a09b7e:         LOG.info("Creating message to publish: " + count + ", size: " + size);
1:734fb7d:         if (publishedMessageSize != null) {
1:734fb7d:             publishedMessageSize.addAndGet(size);
1:734fb7d:         }
1:734fb7d: 
1:734fb7d:         final byte[] data = new byte[size];
1:734fb7d:         final Random rng = new Random();
1:734fb7d:         rng.nextBytes(data);
1:734fb7d:         message.writeBytes(data);
1:734fb7d:         return message;
1:734fb7d:     }
1:734fb7d: }
============================================================================
author:Christopher L. Shannon (cshannon)
-------------------------------------------------------------------------------
commit:fc4c697
/////////////////////////////////////////////////////////////////////////
commit:8a09b7e
/////////////////////////////////////////////////////////////////////////
1:                 prod.send(createMessage(i, session, messageSize, publishedMessageSize));
/////////////////////////////////////////////////////////////////////////
1:                 prod.send(createMessage(i, session, messageSize, publishedMessageSize));
/////////////////////////////////////////////////////////////////////////
1:      * Generate random messages between 100 bytes and maxMessageSize
1:     protected BytesMessage createMessage(int count, Session session, int maxMessageSize, AtomicLong publishedMessageSize) throws JMSException {
1: 
1:         final Random randomSize = new Random();
1:         int size = randomSize.nextInt((maxMessageSize - 100) + 1) + 100;
1:         LOG.info("Creating message to publish: " + count + ", size: " + size);
commit:2262225
/////////////////////////////////////////////////////////////////////////
0: import org.apache.activemq.broker.region.cursors.AbstractPendingMessageCursorTest;
1: import org.slf4j.Logger;
1: import org.slf4j.LoggerFactory;
/////////////////////////////////////////////////////////////////////////
1:     protected static final Logger LOG = LoggerFactory
1:             .getLogger(AbstractStoreStatTestSupport.class);
1: 
/////////////////////////////////////////////////////////////////////////
0:                 LOG.info("Publishing message: " + i + ", size: " + messageSize);
/////////////////////////////////////////////////////////////////////////
0:                 LOG.info("Publishing message: " + i + ", size: " + messageSize);
commit:3ec560f
/////////////////////////////////////////////////////////////////////////
0:         int size = messageSize;
commit:734fb7d
/////////////////////////////////////////////////////////////////////////
1: /**
1:  * Licensed to the Apache Software Foundation (ASF) under one or more
1:  * contributor license agreements.  See the NOTICE file distributed with
1:  * this work for additional information regarding copyright ownership.
1:  * The ASF licenses this file to You under the Apache License, Version 2.0
1:  * (the "License"); you may not use this file except in compliance with
1:  * the License.  You may obtain a copy of the License at
1:  *
1:  *      http://www.apache.org/licenses/LICENSE-2.0
1:  *
1:  * Unless required by applicable law or agreed to in writing, software
1:  * distributed under the License is distributed on an "AS IS" BASIS,
1:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:  * See the License for the specific language governing permissions and
1:  * limitations under the License.
1:  */
1: package org.apache.activemq.store;
1: 
1: import static org.junit.Assert.assertEquals;
1: import static org.junit.Assert.assertNotNull;
1: 
1: import java.net.URI;
1: import java.util.Enumeration;
1: import java.util.Random;
1: import java.util.concurrent.atomic.AtomicLong;
1: 
1: import javax.jms.BytesMessage;
1: import javax.jms.Connection;
1: import javax.jms.DeliveryMode;
1: import javax.jms.JMSException;
1: import javax.jms.Message;
1: import javax.jms.MessageConsumer;
1: import javax.jms.MessageProducer;
1: import javax.jms.Queue;
1: import javax.jms.QueueBrowser;
1: import javax.jms.QueueSession;
1: import javax.jms.Session;
1: import javax.jms.Topic;
1: import javax.jms.TopicSession;
1: import javax.jms.TopicSubscriber;
1: import javax.management.ObjectName;
1: import javax.management.openmbean.CompositeData;
1: 
1: import org.apache.activemq.ActiveMQConnectionFactory;
1: import org.apache.activemq.broker.BrokerService;
1: import org.apache.activemq.broker.jmx.DurableSubscriptionViewMBean;
1: import org.apache.activemq.broker.region.Destination;
1: import org.apache.activemq.command.ActiveMQDestination;
1: import org.apache.activemq.command.ActiveMQMessage;
1: import org.apache.activemq.command.ActiveMQQueue;
1: import org.apache.activemq.command.ActiveMQTopic;
1: 
1: /**
1:  *
1:  *
1:  */
1: public abstract class AbstractStoreStatTestSupport {
1: 
1:     protected static int defaultMessageSize = 1000;
1: 
1:     protected abstract BrokerService getBroker();
1: 
1:     protected abstract URI getBrokerConnectURI();
1: 
1:     protected Destination consumeTestQueueMessages(String queueName) throws Exception {
1:         // create a new queue
1:         final ActiveMQDestination activeMqQueue = new ActiveMQQueue(
1:                 queueName);
1: 
1:         Destination dest = getBroker().getDestination(activeMqQueue);
1: 
1:         // Start the connection
1:         Connection connection = new ActiveMQConnectionFactory(getBrokerConnectURI())
1:         .createConnection();
1:         connection.setClientID("clientId2" + queueName);
1:         connection.start();
1:         Session session = connection.createSession(false,
1:                 QueueSession.AUTO_ACKNOWLEDGE);
1:         Queue queue = session.createQueue(queueName);
1: 
1:         try {
1:             MessageConsumer consumer = session.createConsumer(queue);
1:             for (int i = 0; i < 200; i++) {
1:                 consumer.receive();
1:             }
1: 
1:         } finally {
1:             connection.stop();
1:         }
1: 
1:         return dest;
1:     }
1: 
1:     protected Destination browseTestQueueMessages(String queueName) throws Exception {
1:         // create a new queue
1:         final ActiveMQDestination activeMqQueue = new ActiveMQQueue(
1:                 queueName);
1: 
1:         Destination dest = getBroker().getDestination(activeMqQueue);
1: 
1:         // Start the connection
1:         Connection connection = new ActiveMQConnectionFactory(getBrokerConnectURI())
1:         .createConnection();
1:         connection.setClientID("clientId2" + queueName);
1:         connection.start();
1:         Session session = connection.createSession(false,
1:                 QueueSession.AUTO_ACKNOWLEDGE);
1:         Queue queue = session.createQueue(queueName);
1: 
1:         try {
1:             QueueBrowser queueBrowser = session.createBrowser(queue);
1:             @SuppressWarnings("unchecked")
1:             Enumeration<Message> messages = queueBrowser.getEnumeration();
1:             while (messages.hasMoreElements()) {
1:                 messages.nextElement();
1:             }
1: 
1:         } finally {
1:             connection.stop();
1:         }
1: 
1:         return dest;
1:     }
1: 
1:     protected Destination consumeDurableTestMessages(Connection connection, String sub,
1:             int size, String topicName, AtomicLong publishedMessageSize) throws Exception {
1:         // create a new queue
1:         final ActiveMQDestination activeMqTopic = new ActiveMQTopic(
1:                 topicName);
1: 
1:         Destination dest = getBroker().getDestination(activeMqTopic);
1: 
1:         Session session = connection.createSession(false,
1:                 QueueSession.AUTO_ACKNOWLEDGE);
1:         Topic topic = session.createTopic(topicName);
1: 
1:         try {
1:             TopicSubscriber consumer = session.createDurableSubscriber(topic, sub);
1:             for (int i = 0; i < size; i++) {
1:                 ActiveMQMessage message = (ActiveMQMessage) consumer.receive();
1:                 if (publishedMessageSize != null) {
1:                     publishedMessageSize.addAndGet(-message.getSize());
1:                 }
1:             }
1: 
1:         } finally {
1:             session.close();
1:         }
1: 
1:         return dest;
1:     }
1: 
1:     protected org.apache.activemq.broker.region.Queue publishTestQueueMessages(int count, String queueName,
1:             int deliveryMode, int messageSize, AtomicLong publishedMessageSize) throws Exception {
1:         // create a new queue
1:         final ActiveMQDestination activeMqQueue = new ActiveMQQueue(
1:                 queueName);
1: 
1:         Destination dest = getBroker().getDestination(activeMqQueue);
1: 
1:         // Start the connection
1:         Connection connection = new ActiveMQConnectionFactory(getBrokerConnectURI())
1:         .createConnection();
1:         connection.setClientID("clientId" + queueName);
1:         connection.start();
1:         Session session = connection.createSession(false,
1:                 QueueSession.AUTO_ACKNOWLEDGE);
1:         Queue queue = session.createQueue(queueName);
1: 
1:         try {
1:             // publish a bunch of non-persistent messages to fill up the temp
1:             // store
1:             MessageProducer prod = session.createProducer(queue);
1:             prod.setDeliveryMode(deliveryMode);
1:             for (int i = 0; i < count; i++) {
0:                 prod.send(createMessage(session, messageSize, publishedMessageSize));
1:             }
1: 
1:         } finally {
1:             connection.close();
1:         }
1: 
1:         return (org.apache.activemq.broker.region.Queue) dest;
1:     }
1: 
1:     protected org.apache.activemq.broker.region.Topic publishTestMessagesDurable(Connection connection, String[] subNames, String topicName,
1:             int publishSize, int expectedSize, int messageSize, AtomicLong publishedMessageSize,
1:             boolean verifyBrowsing) throws Exception {
1:         return this.publishTestMessagesDurable(connection, subNames, topicName, publishSize, expectedSize, messageSize,
1:                 publishedMessageSize, verifyBrowsing, DeliveryMode.PERSISTENT);
1:     }
1: 
1:     protected org.apache.activemq.broker.region.Topic publishTestMessagesDurable(Connection connection, String[] subNames, String topicName,
1:             int publishSize, int expectedSize, int messageSize, AtomicLong publishedMessageSize,
1:             boolean verifyBrowsing, int deliveryMode) throws Exception {
1:         // create a new queue
1:         final ActiveMQDestination activeMqTopic = new ActiveMQTopic(
1:                 topicName);
1: 
1:         Destination dest = getBroker().getDestination(activeMqTopic);
1: 
1:         // Start the connection
1: 
1:         Session session = connection.createSession(false,
1:                 TopicSession.AUTO_ACKNOWLEDGE);
1:         Topic topic = session.createTopic(topicName);
1:         for (String subName : subNames) {
1:             session.createDurableSubscriber(topic, subName);
1:         }
1: 
1:         ObjectName[] subs = null;
1:         if (verifyBrowsing) {
1:             // browse the durable sub - this test is to verify that browsing (which calls createTopicMessageStore)
1:             //in KahaDBStore will not create a brand new store (ie uses the cache) If the cache is not used,
1:             //then the statistics won't be updated properly because a new store would overwrite the old store
1:             //which is still in use
1:             subs = getBroker().getAdminView().getDurableTopicSubscribers();
1:         }
1: 
1:         try {
1:             // publish a bunch of non-persistent messages to fill up the temp
1:             // store
1:             MessageProducer prod = session.createProducer(topic);
1:             prod.setDeliveryMode(deliveryMode);
1:             for (int i = 0; i < publishSize; i++) {
0:                 prod.send(createMessage(session, messageSize, publishedMessageSize));
1:             }
1: 
1:             //verify the view has expected messages
1:             if (verifyBrowsing) {
1:                 assertNotNull(subs);
1:                 assertEquals(subNames.length, subs.length);
1:                 ObjectName subName = subs[0];
1:                 DurableSubscriptionViewMBean sub = (DurableSubscriptionViewMBean)
1:                         getBroker().getManagementContext().newProxyInstance(subName, DurableSubscriptionViewMBean.class, true);
1:                 CompositeData[] data  = sub.browse();
1:                 assertNotNull(data);
1:                 assertEquals(expectedSize, data.length);
1:             }
1: 
1:         } finally {
1:             session.close();
1:         }
1: 
1:         return (org.apache.activemq.broker.region.Topic) dest;
1:     }
1: 
1:     /**
0:      * Generate random messages between 100 bytes and messageSize
1:      * @param session
1:      * @return
1:      * @throws JMSException
1:      */
0:     protected BytesMessage createMessage(Session session, int messageSize, AtomicLong publishedMessageSize) throws JMSException {
1:         final BytesMessage message = session.createBytesMessage();
0:         final Random rn = new Random();
0:         int size = rn.nextInt(messageSize - 100);
1:         if (publishedMessageSize != null) {
1:             publishedMessageSize.addAndGet(size);
1:         }
1: 
1:         final byte[] data = new byte[size];
1:         final Random rng = new Random();
1:         rng.nextBytes(data);
1:         message.writeBytes(data);
1:         return message;
1:     }
1: }
============================================================================