1:f5dd125: /**
1:f5dd125:  * Licensed to the Apache Software Foundation (ASF) under one or more
1:f5dd125:  * contributor license agreements.  See the NOTICE file distributed with
1:f5dd125:  * this work for additional information regarding copyright ownership.
1:f5dd125:  * The ASF licenses this file to You under the Apache License, Version 2.0
1:f5dd125:  * (the "License"); you may not use this file except in compliance with
1:f5dd125:  * the License.  You may obtain a copy of the License at
1:f5dd125:  *
1:f5dd125:  * http://www.apache.org/licenses/LICENSE-2.0
1:f5dd125:  *
1:f5dd125:  * Unless required by applicable law or agreed to in writing, software
1:f5dd125:  * distributed under the License is distributed on an "AS IS" BASIS,
1:f5dd125:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:f5dd125:  * See the License for the specific language governing permissions and
1:f5dd125:  * limitations under the License.
1:f5dd125:  */
1:f5dd125: package org.apache.activemq.web;
1:f5dd125: 
1:f5dd125: import java.io.File;
1:f5dd125: import java.io.IOException;
1:f5dd125: import java.lang.reflect.Field;
1:f5dd125: import java.rmi.registry.LocateRegistry;
1:f5dd125: import java.rmi.registry.Registry;
1:f5dd125: import java.util.LinkedList;
1:f5dd125: import java.util.concurrent.Executors;
1:f5dd125: import javax.management.MBeanServer;
1:f5dd125: import javax.management.MBeanServerFactory;
1:f5dd125: import javax.management.remote.JMXConnectorServer;
1:f5dd125: import javax.management.remote.JMXConnectorServerFactory;
1:f5dd125: import javax.management.remote.JMXServiceURL;
1:f5dd125: import org.apache.activemq.broker.BrokerFactory;
1:f5dd125: import org.apache.activemq.broker.BrokerService;
1:f5dd125: import org.apache.activemq.broker.jmx.ManagementContext;
1:f5dd125: import org.apache.activemq.util.Wait;
1:f5dd125: import org.apache.activemq.web.config.SystemPropertiesConfiguration;
1:f5dd125: import org.junit.Before;
1:f5dd125: import org.junit.Test;
1:f5dd125: 
1:f5dd125: 
1:f5dd125: import static org.apache.activemq.util.Wait.*;
1:f5dd125: import static org.junit.Assert.assertEquals;
1:f5dd125: 
1:f5dd125: public class RemoteJMXBrokerFailoverTest {
1:f5dd125: 
1:f5dd125:     private BrokerService master;
1:f5dd125:     private BrokerService slave;
1:f5dd125:     private LinkedList<JMXConnectorServer> serverList = new LinkedList<JMXConnectorServer>();
1:f5dd125: 
1:f5dd125:     @Before
1:f5dd125:     public void startUp() throws Exception {
1:f5dd125: 
1:f5dd125: 
1:f5dd125:         master = BrokerFactory.createBroker("broker:()/master?useJmx=true");
1:f5dd125:         configureMBeanServer(master, 1050);
1:f5dd125: 
1:f5dd125:         slave = BrokerFactory.createBroker("broker:()/slave?useJmx=true");
1:f5dd125:         configureMBeanServer(slave, 1060);
1:f5dd125:         master.start();
1:f5dd125:         master.waitUntilStarted();
1:f5dd125: 
1:f5dd125:         final BrokerService slaveToStart = slave;
1:f5dd125:         Executors.newCachedThreadPool().execute(new Runnable(){
1:f5dd125:             @Override
1:f5dd125:             public void run() {
1:f5dd125:                 try {
1:f5dd125:                     slaveToStart.start();
1:f5dd125:                 } catch (Exception e) {
1:f5dd125:                     e.printStackTrace();
1:f5dd125:                 }
1:f5dd125:             }
1:f5dd125:         });
1:f5dd125: 
1:f5dd125:     }
1:f5dd125: 
1:f5dd125:     private void configureMBeanServer(BrokerService brokerService, int port) throws IOException {
1:f5dd125:         // shared fs master/slave
1:f5dd125:         brokerService.getPersistenceAdapter().setDirectory(
1:f5dd125:                 new File(brokerService.getDataDirectoryFile(), "shared"));
1:f5dd125: 
1:f5dd125:         ManagementContext managementContext = brokerService.getManagementContext();
1:f5dd125: 
1:f5dd125:         // have mbean servers remain alive - like in karaf container
1:f5dd125:         MBeanServer mbeanServer = MBeanServerFactory.createMBeanServer(managementContext.getJmxDomainName());
1:f5dd125: 
1:f5dd125:         Registry registry = LocateRegistry.createRegistry(port + 1);
1:f5dd125: 
1:f5dd125:         JMXConnectorServer connectorServer =
1:f5dd125:                         JMXConnectorServerFactory.newJMXConnectorServer(
1:f5dd125:                                 new JMXServiceURL(
1:f5dd125:                                     "service:jmx:rmi://localhost:"  + port + "/jndi/rmi://localhost:" + (port + 1) + "/jmxrmi"),
1:f5dd125:                                 null, mbeanServer);
1:f5dd125: 
1:f5dd125:         connectorServer.start();
1:f5dd125:         serverList.addFirst(connectorServer);
1:f5dd125: 
1:f5dd125:         managementContext.setMBeanServer(mbeanServer);
1:f5dd125:         managementContext.setCreateConnector(false);
1:f5dd125:     }
1:f5dd125: 
1:f5dd125:     @Test
1:f5dd125:     public void testConnectToMasterFailover() throws Exception {
1:f5dd125:         String jmxUri = "";
1:f5dd125:         for (JMXConnectorServer jmxConnectorServer : serverList) {
1:f5dd125:             if (!jmxUri.isEmpty()) {
1:f5dd125:                 jmxUri += ',';
1:f5dd125:             }
1:f5dd125:             jmxUri += jmxConnectorServer.getAddress().toString();
1:f5dd125:         }
1:f5dd125:         System.out.println("jmx url: " + jmxUri);
1:f5dd125:         System.setProperty("webconsole.jmx.url", jmxUri);
1:f5dd125:         RemoteJMXBrokerFacade brokerFacade = new RemoteJMXBrokerFacade();
1:f5dd125: 
1:f5dd125:         SystemPropertiesConfiguration configuration = new SystemPropertiesConfiguration();
1:f5dd125:         brokerFacade.setConfiguration(configuration);
1:f5dd125: 
1:f5dd125:         assertEquals("connected to master", master.getBrokerName(), brokerFacade.getBrokerName());
1:f5dd125: 
1:f5dd125:         stopAndRestartMaster();
1:f5dd125: 
1:f5dd125:         assertEquals("connected to slave", slave.getBrokerName(), brokerFacade.getBrokerName());
1:f5dd125: 
1:f5dd125:     }
1:f5dd125: 
1:f5dd125:     private void stopAndRestartMaster() throws Exception {
1:f5dd125:         master.stop();
1:f5dd125:         master.waitUntilStopped();
1:f5dd125: 
1:f5dd125:         Wait.waitFor(new Wait.Condition() {
1:f5dd125:             @Override
1:f5dd125:             public boolean isSatisified() throws Exception {
1:f5dd125:                 return !slave.isSlave();
1:f5dd125:             }
1:f5dd125:         });
1:f5dd125: 
1:f5dd125:         master.start();
1:f5dd125:         master.waitUntilStarted();
1:f5dd125:     }
1:f5dd125: }
============================================================================
author:gtully
-------------------------------------------------------------------------------
commit:f5dd125
/////////////////////////////////////////////////////////////////////////
1: /**
1:  * Licensed to the Apache Software Foundation (ASF) under one or more
1:  * contributor license agreements.  See the NOTICE file distributed with
1:  * this work for additional information regarding copyright ownership.
1:  * The ASF licenses this file to You under the Apache License, Version 2.0
1:  * (the "License"); you may not use this file except in compliance with
1:  * the License.  You may obtain a copy of the License at
1:  *
1:  * http://www.apache.org/licenses/LICENSE-2.0
1:  *
1:  * Unless required by applicable law or agreed to in writing, software
1:  * distributed under the License is distributed on an "AS IS" BASIS,
1:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:  * See the License for the specific language governing permissions and
1:  * limitations under the License.
1:  */
1: package org.apache.activemq.web;
1: 
1: import java.io.File;
1: import java.io.IOException;
1: import java.lang.reflect.Field;
1: import java.rmi.registry.LocateRegistry;
1: import java.rmi.registry.Registry;
1: import java.util.LinkedList;
1: import java.util.concurrent.Executors;
1: import javax.management.MBeanServer;
1: import javax.management.MBeanServerFactory;
1: import javax.management.remote.JMXConnectorServer;
1: import javax.management.remote.JMXConnectorServerFactory;
1: import javax.management.remote.JMXServiceURL;
1: import org.apache.activemq.broker.BrokerFactory;
1: import org.apache.activemq.broker.BrokerService;
1: import org.apache.activemq.broker.jmx.ManagementContext;
1: import org.apache.activemq.util.Wait;
1: import org.apache.activemq.web.config.SystemPropertiesConfiguration;
1: import org.junit.Before;
1: import org.junit.Test;
1: 
1: 
1: import static org.apache.activemq.util.Wait.*;
1: import static org.junit.Assert.assertEquals;
1: 
1: public class RemoteJMXBrokerFailoverTest {
1: 
1:     private BrokerService master;
1:     private BrokerService slave;
1:     private LinkedList<JMXConnectorServer> serverList = new LinkedList<JMXConnectorServer>();
1: 
1:     @Before
1:     public void startUp() throws Exception {
1: 
1: 
1:         master = BrokerFactory.createBroker("broker:()/master?useJmx=true");
1:         configureMBeanServer(master, 1050);
1: 
1:         slave = BrokerFactory.createBroker("broker:()/slave?useJmx=true");
1:         configureMBeanServer(slave, 1060);
1:         master.start();
1:         master.waitUntilStarted();
1: 
1:         final BrokerService slaveToStart = slave;
1:         Executors.newCachedThreadPool().execute(new Runnable(){
1:             @Override
1:             public void run() {
1:                 try {
1:                     slaveToStart.start();
1:                 } catch (Exception e) {
1:                     e.printStackTrace();
1:                 }
1:             }
1:         });
1: 
1:     }
1: 
1:     private void configureMBeanServer(BrokerService brokerService, int port) throws IOException {
1:         // shared fs master/slave
1:         brokerService.getPersistenceAdapter().setDirectory(
1:                 new File(brokerService.getDataDirectoryFile(), "shared"));
1: 
1:         ManagementContext managementContext = brokerService.getManagementContext();
1: 
1:         // have mbean servers remain alive - like in karaf container
1:         MBeanServer mbeanServer = MBeanServerFactory.createMBeanServer(managementContext.getJmxDomainName());
1: 
1:         Registry registry = LocateRegistry.createRegistry(port + 1);
1: 
1:         JMXConnectorServer connectorServer =
1:                         JMXConnectorServerFactory.newJMXConnectorServer(
1:                                 new JMXServiceURL(
1:                                     "service:jmx:rmi://localhost:"  + port + "/jndi/rmi://localhost:" + (port + 1) + "/jmxrmi"),
1:                                 null, mbeanServer);
1: 
1:         connectorServer.start();
1:         serverList.addFirst(connectorServer);
1: 
1:         managementContext.setMBeanServer(mbeanServer);
1:         managementContext.setCreateConnector(false);
1:     }
1: 
1:     @Test
1:     public void testConnectToMasterFailover() throws Exception {
1:         String jmxUri = "";
1:         for (JMXConnectorServer jmxConnectorServer : serverList) {
1:             if (!jmxUri.isEmpty()) {
1:                 jmxUri += ',';
1:             }
1:             jmxUri += jmxConnectorServer.getAddress().toString();
1:         }
1:         System.out.println("jmx url: " + jmxUri);
1:         System.setProperty("webconsole.jmx.url", jmxUri);
1:         RemoteJMXBrokerFacade brokerFacade = new RemoteJMXBrokerFacade();
1: 
1:         SystemPropertiesConfiguration configuration = new SystemPropertiesConfiguration();
1:         brokerFacade.setConfiguration(configuration);
1: 
1:         assertEquals("connected to master", master.getBrokerName(), brokerFacade.getBrokerName());
1: 
1:         stopAndRestartMaster();
1: 
1:         assertEquals("connected to slave", slave.getBrokerName(), brokerFacade.getBrokerName());
1: 
1:     }
1: 
1:     private void stopAndRestartMaster() throws Exception {
1:         master.stop();
1:         master.waitUntilStopped();
1: 
1:         Wait.waitFor(new Wait.Condition() {
1:             @Override
1:             public boolean isSatisified() throws Exception {
1:                 return !slave.isSlave();
1:             }
1:         });
1: 
1:         master.start();
1:         master.waitUntilStarted();
1:     }
1: }
============================================================================