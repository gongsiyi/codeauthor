1:d29ca2a: /**
1:57b4941:  * Licensed to the Apache Software Foundation (ASF) under one or more
1:57b4941:  * contributor license agreements.  See the NOTICE file distributed with
1:57b4941:  * this work for additional information regarding copyright ownership.
1:57b4941:  * The ASF licenses this file to You under the Apache License, Version 2.0
1:57b4941:  * (the "License"); you may not use this file except in compliance with
1:57b4941:  * the License.  You may obtain a copy of the License at
3:d29ca2a:  *
1:230a86c:  *      http://www.apache.org/licenses/LICENSE-2.0
1:d29ca2a:  *
1:d29ca2a:  * Unless required by applicable law or agreed to in writing, software
1:d29ca2a:  * distributed under the License is distributed on an "AS IS" BASIS,
1:d29ca2a:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:d29ca2a:  * See the License for the specific language governing permissions and
1:d29ca2a:  * limitations under the License.
1:d29ca2a:  */
1:d29ca2a: package org.apache.activemq.perf;
1:d29ca2a: 
1:7f0583d: import java.util.ArrayList;
1:7f0583d: import java.util.List;
1:d29ca2a: import javax.jms.ConnectionFactory;
1:d29ca2a: import javax.jms.DeliveryMode;
1:d29ca2a: import javax.jms.Destination;
1:d29ca2a: import javax.jms.JMSException;
1:7f0583d: import org.apache.activemq.broker.BrokerService;
1:7f0583d: import org.apache.activemq.broker.region.policy.PolicyEntry;
1:7f0583d: import org.apache.activemq.broker.region.policy.PolicyMap;
1:230a86c: 
1:d29ca2a: /**
1:b0c2a40:  * 
1:d29ca2a:  */
1:230a86c: public class SimpleNonPersistentQueueTest extends SimpleQueueTest {
1:230a86c: 
1:ee55abb:     @Override
1:7f0583d:     protected void setUp() throws Exception {
1:6f69f19:         numberOfConsumers = 1;
1:6f69f19:         numberofProducers = 1;
1:7f0583d:         super.setUp();
2:7f0583d:     }
1:ee55abb:     @Override
1:230a86c:     protected PerfProducer createProducer(ConnectionFactory fac, Destination dest, int number, byte[] payload) throws JMSException {
1:230a86c:         PerfProducer pp = new PerfProducer(fac, dest, payload);
1:d29ca2a:         pp.setDeliveryMode(DeliveryMode.NON_PERSISTENT);
1:ee55abb:         //pp.setTimeToLive(100);
1:d29ca2a:         return pp;
1:86cbdfd:     }
1:d29ca2a:     
1:ee55abb:     @Override
1:6f69f19:     protected PerfConsumer createConsumer(ConnectionFactory fac, Destination dest, int number) throws JMSException {
1:6f69f19:         PerfConsumer result =  new PerfConsumer(fac, dest);
1:ee55abb:         result.setInitialDelay(10*1000);
1:ee55abb:         boolean enableAudit = numberOfConsumers <= 1;
1:ee55abb:         System.err.println("Enable Audit = " + enableAudit);
1:ee55abb:         result.setEnableAudit(enableAudit);
1:ee55abb: 
1:6f69f19:         return result;
1:d29ca2a:     }
1:ee55abb:     
1:6f69f19:     
1:ee55abb:     @Override
1:7f0583d:     protected void configureBroker(BrokerService answer,String uri) throws Exception {
1:ee55abb:        // answer.setPersistent(false);
1:7f0583d:         final List<PolicyEntry> policyEntries = new ArrayList<PolicyEntry>();
1:7f0583d:         final PolicyEntry entry = new PolicyEntry();
1:7f0583d:         entry.setQueue(">");
1:7f0583d:         entry.setMemoryLimit(1024 * 1024 * 1); // Set to 1 MB
1:7f0583d:         entry.setOptimizedDispatch(true);
1:7f0583d:         entry.setLazyDispatch(true);
1:7f0583d:         policyEntries.add(entry);
4:7f0583d: 
1:7f0583d:         
1:7f0583d:         final PolicyMap policyMap = new PolicyMap();
1:7f0583d:         policyMap.setPolicyEntries(policyEntries);
1:7f0583d:         answer.setDestinationPolicy(policyMap);
1:7f0583d:         super.configureBroker(answer, uri);
1:d29ca2a:     }
1:ee55abb:     
1:6f69f19: }
============================================================================
author:Timothy A. Bish
-------------------------------------------------------------------------------
commit:ef24cc9
author:Hiram R. Chirino
-------------------------------------------------------------------------------
commit:b0c2a40
/////////////////////////////////////////////////////////////////////////
1:  * 
commit:230a86c
/////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////
1:  *      http://www.apache.org/licenses/LICENSE-2.0
/////////////////////////////////////////////////////////////////////////
1: 
1: public class SimpleNonPersistentQueueTest extends SimpleQueueTest {
1: 
1:     protected PerfProducer createProducer(ConnectionFactory fac, Destination dest, int number, byte[] payload) throws JMSException {
1:         PerfProducer pp = new PerfProducer(fac, dest, payload);
commit:e0fdce4
/////////////////////////////////////////////////////////////////////////
0:     protected PerfProducer createProducer(ConnectionFactory fac,Destination dest,int number, byte[] payload) throws JMSException{
0:         PerfProducer pp=new PerfProducer(fac,dest,payload);
commit:86cbdfd
/////////////////////////////////////////////////////////////////////////
1: }
commit:57b4941
/////////////////////////////////////////////////////////////////////////
1:  * Licensed to the Apache Software Foundation (ASF) under one or more
1:  * contributor license agreements.  See the NOTICE file distributed with
1:  * this work for additional information regarding copyright ownership.
1:  * The ASF licenses this file to You under the Apache License, Version 2.0
1:  * (the "License"); you may not use this file except in compliance with
1:  * the License.  You may obtain a copy of the License at
commit:48b4869
/////////////////////////////////////////////////////////////////////////
0:  * Copyright 2005-2006 The Apache Software Foundation
commit:d29ca2a
/////////////////////////////////////////////////////////////////////////
1: /**
1:  *
0:  * Copyright 2004 The Apache Software Foundation
1:  *
0:  * Licensed under the Apache License, Version 2.0 (the "License");
0:  * you may not use this file except in compliance with the License.
0:  * You may obtain a copy of the License at
1:  *
0:  * http://www.apache.org/licenses/LICENSE-2.0
1:  *
1:  * Unless required by applicable law or agreed to in writing, software
1:  * distributed under the License is distributed on an "AS IS" BASIS,
1:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:  * See the License for the specific language governing permissions and
1:  * limitations under the License.
1:  */
1: package org.apache.activemq.perf;
1: 
1: import javax.jms.ConnectionFactory;
1: import javax.jms.DeliveryMode;
1: import javax.jms.Destination;
1: import javax.jms.JMSException;
1: /**
0:  * @version $Revision: 1.3 $
1:  */
0: public class SimpleNonPersistentQueueTest extends SimpleQueueTest{
1:     
0:     protected PerfProducer createProducer(ConnectionFactory fac,Destination dest,int number) throws JMSException{
0:         PerfProducer pp=new PerfProducer(fac,dest);
1:         pp.setDeliveryMode(DeliveryMode.NON_PERSISTENT);
1:         return pp;
1:     }
1: }
author:Robert Davies
-------------------------------------------------------------------------------
commit:ee55abb
/////////////////////////////////////////////////////////////////////////
1:     @Override
1:     @Override
1:         //pp.setTimeToLive(100);
1:     @Override
1:         result.setInitialDelay(10*1000);
1:         boolean enableAudit = numberOfConsumers <= 1;
1:         System.err.println("Enable Audit = " + enableAudit);
1:         result.setEnableAudit(enableAudit);
1: 
1:     
1:     @Override
1:        // answer.setPersistent(false);
/////////////////////////////////////////////////////////////////////////
1:     
commit:6f69f19
/////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////
1:         numberOfConsumers = 1;
1:         numberofProducers = 1;
0:         pp.setTimeToLive(100);
1:     protected PerfConsumer createConsumer(ConnectionFactory fac, Destination dest, int number) throws JMSException {
1:         PerfConsumer result =  new PerfConsumer(fac, dest);
0:         result.setInitialDelay(20*1000);
1:         return result;
1:     }
1:     
0:     /*
/////////////////////////////////////////////////////////////////////////
0:     */
commit:7f0583d
/////////////////////////////////////////////////////////////////////////
1: import java.util.ArrayList;
1: import java.util.List;
1: 
1: import org.apache.activemq.broker.BrokerService;
0: import org.apache.activemq.broker.region.policy.NoSubscriptionRecoveryPolicy;
1: import org.apache.activemq.broker.region.policy.PolicyEntry;
1: import org.apache.activemq.broker.region.policy.PolicyMap;
0: import org.apache.activemq.broker.region.policy.VMPendingQueueMessageStoragePolicy;
0: import org.apache.activemq.broker.region.policy.VMPendingSubscriberMessageStoragePolicy;
1: 
1:     protected void setUp() throws Exception {
0:         numberOfConsumers = 10;
0:         numberofProducers = 10;
0:         //this.consumerSleepDuration=100;
1:         super.setUp();
1:     }
0:         //pp.setTimeToLive(100);
1:     
1:     protected void configureBroker(BrokerService answer,String uri) throws Exception {
0:         answer.setPersistent(false);
1:         final List<PolicyEntry> policyEntries = new ArrayList<PolicyEntry>();
1:         final PolicyEntry entry = new PolicyEntry();
1:         entry.setQueue(">");
1:         entry.setMemoryLimit(1024 * 1024 * 1); // Set to 1 MB
1:         entry.setOptimizedDispatch(true);
1:         entry.setLazyDispatch(true);
1:         policyEntries.add(entry);
1: 
1:         
1:         final PolicyMap policyMap = new PolicyMap();
1:         policyMap.setPolicyEntries(policyEntries);
1:         answer.setDestinationPolicy(policyMap);
1:         super.configureBroker(answer, uri);
1:     }
commit:c99f055
/////////////////////////////////////////////////////////////////////////
0:         pp.setTimeToLive(100);
============================================================================