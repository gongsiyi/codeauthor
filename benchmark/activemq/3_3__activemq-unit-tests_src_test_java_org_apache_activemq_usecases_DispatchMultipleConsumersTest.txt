1:63e3f41: /**
1:63e3f41:  * Licensed to the Apache Software Foundation (ASF) under one or more
1:63e3f41:  * contributor license agreements.  See the NOTICE file distributed with
1:63e3f41:  * this work for additional information regarding copyright ownership.
1:63e3f41:  * The ASF licenses this file to You under the Apache License, Version 2.0
1:63e3f41:  * (the "License"); you may not use this file except in compliance with
1:63e3f41:  * the License.  You may obtain a copy of the License at
2:63e3f41:  *
1:63e3f41:  *      http://www.apache.org/licenses/LICENSE-2.0
1:63e3f41:  *
1:63e3f41:  * Unless required by applicable law or agreed to in writing, software
1:63e3f41:  * distributed under the License is distributed on an "AS IS" BASIS,
1:63e3f41:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:63e3f41:  * See the License for the specific language governing permissions and
1:63e3f41:  * limitations under the License.
1:63e3f41:  */
1:63e3f41: package org.apache.activemq.usecases;
1:42e51a3: 
1:63e3f41: import java.util.concurrent.CountDownLatch;
1:63e3f41: import java.util.concurrent.atomic.AtomicInteger;
1:63e3f41: import javax.jms.Connection;
1:63e3f41: import javax.jms.Destination;
1:63e3f41: import javax.jms.JMSException;
1:63e3f41: import javax.jms.Message;
1:63e3f41: import javax.jms.MessageConsumer;
1:63e3f41: import javax.jms.MessageProducer;
1:63e3f41: import javax.jms.Session;
1:63e3f41: import junit.framework.TestCase;
1:63e3f41: import org.apache.activemq.ActiveMQConnectionFactory;
1:63e3f41: import org.apache.activemq.broker.BrokerService;
1:63e3f41: import org.apache.activemq.command.ActiveMQQueue;
1:8bf987b: import org.slf4j.Logger;
1:8bf987b: import org.slf4j.LoggerFactory;
10:63e3f41: 
1:63e3f41: /**
1:63e3f41:  * @author Rajani Chennamaneni
1:63e3f41:  */
1:63e3f41: public class DispatchMultipleConsumersTest extends TestCase {
1:8bf987b:     private final static Logger logger = LoggerFactory.getLogger(DispatchMultipleConsumersTest.class);
1:63e3f41:     BrokerService broker;
1:63e3f41:     Destination dest;
1:63e3f41:     String destinationName = "TEST.Q";
1:63e3f41:     String msgStr = "Test text message";
1:63e3f41:     int messagesPerThread = 20;
1:63e3f41:     int producerThreads = 50;
1:63e3f41:     int consumerCount = 2;
1:63e3f41:     AtomicInteger sentCount;
1:63e3f41:     AtomicInteger consumedCount;
1:63e3f41:     CountDownLatch producerLatch;
1:63e3f41:     CountDownLatch consumerLatch;
1:42e51a3:     String brokerURL;
1:63e3f41:     String userName = "";
1:63e3f41:     String password = "";
1:42e51a3: 
1:63e3f41:     @Override
1:63e3f41:     protected void setUp() throws Exception {
1:63e3f41:         super.setUp();
1:63e3f41:         broker = new BrokerService();
1:63e3f41:         broker.setPersistent(true);
1:63e3f41:         broker.setUseJmx(true);
1:63e3f41:         broker.deleteAllMessages();
1:42e51a3:         broker.addConnector("tcp://localhost:0");
1:63e3f41:         broker.start();
1:42e51a3:         broker.waitUntilStarted();
1:63e3f41:         dest = new ActiveMQQueue(destinationName);
1:63e3f41:         resetCounters();
1:42e51a3:         brokerURL = broker.getTransportConnectors().get(0).getPublishableConnectString();
1:63e3f41:     }
1:63e3f41: 
1:63e3f41:     @Override
1:63e3f41:     protected void tearDown() throws Exception {
1:42e51a3:         broker.stop();
1:42e51a3:         broker.waitUntilStopped();
1:63e3f41:         super.tearDown();
1:63e3f41:     }
1:42e51a3: 
1:63e3f41:     private void resetCounters() {
1:63e3f41:         sentCount = new AtomicInteger(0);
1:63e3f41:         consumedCount = new AtomicInteger(0);
1:63e3f41:         producerLatch = new CountDownLatch(producerThreads);
1:63e3f41:         consumerLatch = new CountDownLatch(consumerCount);
1:63e3f41:     }
1:42e51a3: 
1:63e3f41:     public void testDispatch1() {
1:63e3f41:         for (int i = 1; i <= 5; i++) {
1:63e3f41:             resetCounters();
1:63e3f41:             dispatch();
1:63e3f41:             assertEquals("Incorrect messages in Iteration " + i, sentCount.get(), consumedCount.get());
1:63e3f41:         }
1:63e3f41:     }
1:42e51a3: 
1:63e3f41:     private void dispatch() {
1:63e3f41:         startConsumers();
1:63e3f41:         startProducers();
1:63e3f41:         try {
1:63e3f41:             producerLatch.await();
1:63e3f41:             consumerLatch.await();
1:63e3f41:         } catch (InterruptedException e) {
1:63e3f41:             fail("test interrupted!");
1:63e3f41:         }
1:63e3f41:     }
1:63e3f41: 
1:63e3f41:     private void startConsumers() {
1:63e3f41:         ActiveMQConnectionFactory connFactory = new ActiveMQConnectionFactory(userName, password, brokerURL);
2:63e3f41:         Connection conn;
1:63e3f41:         try {
1:63e3f41:             conn = connFactory.createConnection();
1:63e3f41:             conn.start();
1:63e3f41:             for (int i = 0; i < consumerCount; i++) {
1:63e3f41:                 new ConsumerThread(conn, "ConsumerThread"+i);
1:63e3f41:             }
1:63e3f41:         } catch (JMSException e) {
1:63e3f41:             logger.error("Failed to start consumers", e);
1:63e3f41:         }
1:63e3f41:     }
1:63e3f41: 
1:63e3f41:     private void startProducers() {
1:63e3f41:         ActiveMQConnectionFactory connFactory = new ActiveMQConnectionFactory(userName, password, brokerURL);
1:63e3f41:         for (int i = 0; i < producerThreads; i++) {
1:63e3f41:             new ProducerThread(connFactory, messagesPerThread, "ProducerThread"+i);
1:63e3f41:         }
1:63e3f41:     }
1:63e3f41: 
1:63e3f41:     private class ConsumerThread extends Thread {
1:63e3f41:         Session session;
1:63e3f41:         MessageConsumer consumer;
1:63e3f41: 
1:63e3f41:         public ConsumerThread(Connection conn, String name) {
1:63e3f41:             super();
1:63e3f41:             this.setName(name);
1:42e51a3:             logger.trace("Created new consumer thread:" + name);
1:63e3f41:             try {
1:63e3f41:                 session = conn.createSession(false, Session.AUTO_ACKNOWLEDGE);
1:63e3f41:                 consumer = session.createConsumer(dest);
1:63e3f41:                 start();
1:63e3f41:             } catch (JMSException e) {
1:63e3f41:                 logger.error("Failed to start consumer thread:" + name, e);
1:63e3f41:             }
1:63e3f41:         }
1:63e3f41: 
1:63e3f41:         @Override
1:63e3f41:         public void run() {
1:63e3f41:             int msgCount = 0;
1:63e3f41:             int nullCount = 0;
1:63e3f41:             while (true) {
1:63e3f41:                 try {
1:63e3f41:                     Message msg = consumer.receive(1000);
1:63e3f41:                     if (msg == null) {
1:63e3f41:                         if (producerLatch.getCount() > 0) {
1:63e3f41:                             continue;
1:63e3f41:                         }
1:63e3f41:                         nullCount++;
1:63e3f41:                         if (nullCount > 10) {
1:63e3f41:                             //assume that we are not getting any more messages
1:63e3f41:                             break;
1:63e3f41:                         } else {
1:63e3f41:                             continue;
1:63e3f41:                         }
1:63e3f41:                     } else {
1:63e3f41:                         nullCount = 0;
1:63e3f41:                     }
1:63e3f41:                     Thread.sleep(100);
1:42e51a3:                     if (logger.isTraceEnabled()) {
1:42e51a3:                         logger.trace("Message received:" + msg.getJMSMessageID());
1:42e51a3:                     }
1:63e3f41:                     msgCount++;
1:63e3f41:                 } catch (JMSException e) {
1:42e51a3:                     logger.error("Failed to consume:", e);
1:63e3f41:                 } catch (InterruptedException e) {
1:42e51a3:                     logger.error("Interrupted!", e);
1:63e3f41:                 }
1:63e3f41:             }
1:63e3f41:             try {
1:63e3f41:                 consumer.close();
1:63e3f41:             } catch (JMSException e) {
1:42e51a3:                 logger.error("Failed to close consumer " + getName(), e);
1:63e3f41:             }
1:63e3f41:             consumedCount.addAndGet(msgCount);
1:63e3f41:             consumerLatch.countDown();
1:42e51a3:             logger.trace("Consumed " + msgCount + " messages using thread " + getName());
1:63e3f41:         }
1:63e3f41:     }
1:63e3f41: 
1:63e3f41:     private class ProducerThread extends Thread {
1:63e3f41:         int count;
1:63e3f41:         Connection conn;
1:63e3f41:         Session session;
1:63e3f41:         MessageProducer producer;
1:42e51a3: 
1:63e3f41:         public ProducerThread(ActiveMQConnectionFactory connFactory, int count, String name) {
1:63e3f41:             super();
1:63e3f41:             this.count = count;
1:63e3f41:             this.setName(name);
1:42e51a3:             logger.trace("Created new producer thread:" + name);
1:63e3f41:             try {
1:63e3f41:                 conn = connFactory.createConnection();
1:63e3f41:                 conn.start();
1:63e3f41:                 session = conn.createSession(false, Session.AUTO_ACKNOWLEDGE);
1:63e3f41:                 producer = session.createProducer(dest);
1:63e3f41:                 start();
1:63e3f41:             } catch (JMSException e) {
1:63e3f41:                 logger.error("Failed to start producer thread:" + name, e);
1:63e3f41:             }
1:63e3f41:         }
1:63e3f41: 
1:63e3f41:         @Override
1:63e3f41:         public void run() {
1:63e3f41:             int i = 0;
1:63e3f41:             try {
1:63e3f41:                 for (; i < count; i++) {
1:63e3f41:                     producer.send(session.createTextMessage(msgStr));
1:63e3f41:                     Thread.sleep(500);
1:63e3f41:                 }
1:63e3f41:                 conn.close();
1:63e3f41:             } catch (JMSException e) {
1:63e3f41:                 logger.error(e.getMessage(), e);
1:63e3f41:             } catch (InterruptedException e) {
1:42e51a3:                 logger.error("Interrupted!", e);
1:63e3f41:             }
1:63e3f41:             sentCount.addAndGet(i);
1:63e3f41:             producerLatch.countDown();
1:42e51a3:             if (logger.isTraceEnabled()) {
1:42e51a3:                 logger.trace("Sent " + i + " messages from thread " + getName());
1:42e51a3:             }
1:63e3f41:         }
1:63e3f41:     }
1:63e3f41: }
============================================================================
author:Timothy A. Bish
-------------------------------------------------------------------------------
commit:ef24cc9
commit:42e51a3
/////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////
1: 
/////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////
1:     String brokerURL;
1: 
/////////////////////////////////////////////////////////////////////////
1:         broker.addConnector("tcp://localhost:0");
1:         broker.waitUntilStarted();
1:         brokerURL = broker.getTransportConnectors().get(0).getPublishableConnectString();
1:         broker.stop();
1:         broker.waitUntilStopped();
1: 
1: 
1: 
/////////////////////////////////////////////////////////////////////////
1:             logger.trace("Created new consumer thread:" + name);
/////////////////////////////////////////////////////////////////////////
1:                     if (logger.isTraceEnabled()) {
1:                         logger.trace("Message received:" + msg.getJMSMessageID());
1:                     }
1:                     logger.error("Failed to consume:", e);
1:                     logger.error("Interrupted!", e);
1:                 logger.error("Failed to close consumer " + getName(), e);
1:             logger.trace("Consumed " + msgCount + " messages using thread " + getName());
/////////////////////////////////////////////////////////////////////////
1: 
1:             logger.trace("Created new producer thread:" + name);
/////////////////////////////////////////////////////////////////////////
1:                 logger.error("Interrupted!", e);
1:             if (logger.isTraceEnabled()) {
1:                 logger.trace("Sent " + i + " messages from thread " + getName());
1:             }
author:Bosanac Dejan
-------------------------------------------------------------------------------
commit:8bf987b
/////////////////////////////////////////////////////////////////////////
1: import org.slf4j.Logger;
1: import org.slf4j.LoggerFactory;
/////////////////////////////////////////////////////////////////////////
1:     private final static Logger logger = LoggerFactory.getLogger(DispatchMultipleConsumersTest.class);
author:Robert Davies
-------------------------------------------------------------------------------
commit:63e3f41
/////////////////////////////////////////////////////////////////////////
1: 
1: /**
1:  * Licensed to the Apache Software Foundation (ASF) under one or more
1:  * contributor license agreements.  See the NOTICE file distributed with
1:  * this work for additional information regarding copyright ownership.
1:  * The ASF licenses this file to You under the Apache License, Version 2.0
1:  * (the "License"); you may not use this file except in compliance with
1:  * the License.  You may obtain a copy of the License at
1:  *
1:  *      http://www.apache.org/licenses/LICENSE-2.0
1:  *
1:  * Unless required by applicable law or agreed to in writing, software
1:  * distributed under the License is distributed on an "AS IS" BASIS,
1:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:  * See the License for the specific language governing permissions and
1:  * limitations under the License.
1:  */
1: package org.apache.activemq.usecases;
1: import java.util.concurrent.CountDownLatch;
1: import java.util.concurrent.atomic.AtomicInteger;
1: import javax.jms.Connection;
1: import javax.jms.Destination;
1: import javax.jms.JMSException;
1: import javax.jms.Message;
1: import javax.jms.MessageConsumer;
1: import javax.jms.MessageProducer;
1: import javax.jms.Session;
1: import junit.framework.TestCase;
1: import org.apache.activemq.ActiveMQConnectionFactory;
1: import org.apache.activemq.broker.BrokerService;
1: import org.apache.activemq.command.ActiveMQQueue;
0: import org.apache.commons.logging.Log;
0: import org.apache.commons.logging.LogFactory;
1: 
1: 
1: /**
1:  * @author Rajani Chennamaneni
1:  *
1:  */
1: public class DispatchMultipleConsumersTest extends TestCase {
0:     private final static Log logger = LogFactory.getLog(DispatchMultipleConsumersTest.class);
1:     BrokerService broker;
1:     Destination dest;
1:     String destinationName = "TEST.Q";
1:     String msgStr = "Test text message";
1:     int messagesPerThread = 20;
1:     int producerThreads = 50;
1:     int consumerCount = 2;
1:     AtomicInteger sentCount;
1:     AtomicInteger consumedCount;
1:     CountDownLatch producerLatch;
1:     CountDownLatch consumerLatch;
0:     String brokerURL = "tcp://localhost:61616";
1:     String userName = "";
1:     String password = "";
1:     
1:     @Override
1:     protected void setUp() throws Exception {
1:         super.setUp();
1:         broker = new BrokerService();
1:         broker.setPersistent(true);
1:         broker.setUseJmx(true);
1:         broker.deleteAllMessages();
0:         broker.addConnector("tcp://localhost:61616");
1:         broker.start();
1:         dest = new ActiveMQQueue(destinationName);
1:         resetCounters();
1:     }
1: 
1:     @Override
1:     protected void tearDown() throws Exception {
0: //      broker.stop();
1:         super.tearDown();
1:     }
1:     
1:     private void resetCounters() {
1:         sentCount = new AtomicInteger(0);
1:         consumedCount = new AtomicInteger(0);
1:         producerLatch = new CountDownLatch(producerThreads);
1:         consumerLatch = new CountDownLatch(consumerCount);
1:     }
1:     
1:     public void testDispatch1() {
1:         for (int i = 1; i <= 5; i++) {
1:             resetCounters();
1:             dispatch();
0:             /*try {
0:                 System.out.print("Press Enter to continue/finish:");
0:                 //pause to check the counts on JConsole
0:                 System.in.read();
0:                 System.in.read();
0:             } catch (IOException e) {
0:                 e.printStackTrace();
0:             }*/
0:             //check for consumed messages count
1:             assertEquals("Incorrect messages in Iteration " + i, sentCount.get(), consumedCount.get());
1:         }
1:     }
1:     
1:     private void dispatch() {
1:         startConsumers();
1:         startProducers();
1:         try {
1:             producerLatch.await();
1:             consumerLatch.await();
1:         } catch (InterruptedException e) {
1:             fail("test interrupted!");
1:         }
1:     }
1: 
1:     private void startConsumers() {
1:         ActiveMQConnectionFactory connFactory = new ActiveMQConnectionFactory(userName, password, brokerURL);
1:         Connection conn;
1:         try {
1:             conn = connFactory.createConnection();
1:             conn.start();
1:             for (int i = 0; i < consumerCount; i++) {
1:                 new ConsumerThread(conn, "ConsumerThread"+i);
1:             }
1:         } catch (JMSException e) {
1:             logger.error("Failed to start consumers", e);
1:         }
1:     }
1: 
1:     private void startProducers() {
1:         ActiveMQConnectionFactory connFactory = new ActiveMQConnectionFactory(userName, password, brokerURL);
1:         for (int i = 0; i < producerThreads; i++) {
1:             new ProducerThread(connFactory, messagesPerThread, "ProducerThread"+i);
1:         }
1:     }
1: 
1:     private class ConsumerThread extends Thread {
1:         Connection conn;
1:         Session session;
1:         MessageConsumer consumer;
1: 
1:         public ConsumerThread(Connection conn, String name) {
1:             super();
0:             this.conn = conn;
1:             this.setName(name);
0:             logger.info("Created new consumer thread:" + name);
1:             try {
1:                 session = conn.createSession(false, Session.AUTO_ACKNOWLEDGE);
1:                 consumer = session.createConsumer(dest);
1:                 start();
1:             } catch (JMSException e) {
1:                 logger.error("Failed to start consumer thread:" + name, e);
1:             }
1:         }
1: 
1:         @Override
1:         public void run() {
1:             int msgCount = 0;
1:             int nullCount = 0;
1:             while (true) {
1:                 try {
1:                     Message msg = consumer.receive(1000);
1:                     if (msg == null) {
1:                         if (producerLatch.getCount() > 0) {
1:                             continue;
1:                         }
1:                         nullCount++;
1:                         if (nullCount > 10) {
1:                             //assume that we are not getting any more messages
1:                             break;
1:                         } else {
1:                             continue;
1:                         }
1:                     } else {
1:                         nullCount = 0;
1:                     }
1:                     Thread.sleep(100);
0:                     logger.info("Message received:" + msg.getJMSMessageID());
1:                     msgCount++;
1:                 } catch (JMSException e) {
0:                     logger.error("Failed to consume:", e);                  
1:                 } catch (InterruptedException e) {
0:                     logger.error("Interrupted!", e);    
1:                 }
1:             }
1:             try {
1:                 consumer.close();
1:             } catch (JMSException e) {
0:                 logger.error("Failed to close consumer " + getName(), e);   
1:             }
1:             consumedCount.addAndGet(msgCount);
1:             consumerLatch.countDown();
0:             logger.info("Consumed " + msgCount + " messages using thread " + getName());
1:         }
1:         
1:     }
1: 
1:     private class ProducerThread extends Thread {
1:         int count;
1:         Connection conn;
1:         Session session;
1:         MessageProducer producer;
1:                 
1:         public ProducerThread(ActiveMQConnectionFactory connFactory, int count, String name) {
1:             super();
1:             this.count = count;
1:             this.setName(name);
0:             logger.info("Created new producer thread:" + name);
1:             try {
1:                 conn = connFactory.createConnection();
1:                 conn.start();
1:                 session = conn.createSession(false, Session.AUTO_ACKNOWLEDGE);
1:                 producer = session.createProducer(dest);
1:                 start();
1:             } catch (JMSException e) {
1:                 logger.error("Failed to start producer thread:" + name, e);
1:             }
1:         }
1: 
1:         @Override
1:         public void run() {
1:             int i = 0;
1:             try {
1:                 for (; i < count; i++) {
1:                     producer.send(session.createTextMessage(msgStr));
1:                     Thread.sleep(500);
1:                 }
1:                 conn.close();
1:             } catch (JMSException e) {
1:                 logger.error(e.getMessage(), e);
1:             } catch (InterruptedException e) {
0:                 logger.error("Interrupted!", e);    
1:             }
1:             sentCount.addAndGet(i);
1:             producerLatch.countDown();
0:             logger.info("Sent " + i + " messages from thread " + getName());
1:         }
1:     }
1:         
1: }
============================================================================