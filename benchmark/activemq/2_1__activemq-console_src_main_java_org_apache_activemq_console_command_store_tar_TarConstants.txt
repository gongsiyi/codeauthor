1:3f32507: /*
1:3f32507:  *  Licensed to the Apache Software Foundation (ASF) under one or more
1:3f32507:  *  contributor license agreements.  See the NOTICE file distributed with
1:3f32507:  *  this work for additional information regarding copyright ownership.
1:3f32507:  *  The ASF licenses this file to You under the Apache License, Version 2.0
1:3f32507:  *  (the "License"); you may not use this file except in compliance with
1:3f32507:  *  the License.  You may obtain a copy of the License at
1:3f32507:  *
1:3f32507:  *      http://www.apache.org/licenses/LICENSE-2.0
1:3f32507:  *
1:3f32507:  *  Unless required by applicable law or agreed to in writing, software
1:3f32507:  *  distributed under the License is distributed on an "AS IS" BASIS,
1:3f32507:  *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:3f32507:  *  See the License for the specific language governing permissions and
1:3f32507:  *  limitations under the License.
1:3f32507:  *
1:3f32507:  */
1:3f32507: 
1:3f32507: /*
1:3f32507:  * This package is based on the work done by Timothy Gerard Endres
1:3f32507:  * (time@ice.com) to whom the Ant project is very grateful for his great code.
1:3f32507:  */
1:3f32507: 
1:3f32507: package org.apache.activemq.console.command.store.tar;
1:3f32507: 
1:3f32507: /**
1:3f32507:  * This interface contains all the definitions used in the package.
1:3f32507:  *
1:3f32507:  */
1:3f32507: // CheckStyle:InterfaceIsTypeCheck OFF (bc)
1:3f32507: public interface TarConstants {
1:3f32507: 
1:3f32507:     /**
1:3f32507:      * The length of the name field in a header buffer.
1:3f32507:      */
1:3f32507:     int    NAMELEN = 100;
1:3f32507: 
1:3f32507:     /**
1:3f32507:      * The length of the mode field in a header buffer.
1:3f32507:      */
1:3f32507:     int    MODELEN = 8;
1:3f32507: 
1:3f32507:     /**
1:3f32507:      * The length of the user id field in a header buffer.
1:3f32507:      */
1:3f32507:     int    UIDLEN = 8;
1:3f32507: 
1:3f32507:     /**
1:3f32507:      * The length of the group id field in a header buffer.
1:3f32507:      */
1:3f32507:     int    GIDLEN = 8;
1:3f32507: 
1:3f32507:     /**
1:3f32507:      * The length of the checksum field in a header buffer.
1:3f32507:      */
1:3f32507:     int    CHKSUMLEN = 8;
1:3f32507: 
1:3f32507:     /**
1:3f32507:      * The length of the size field in a header buffer.
1:3f32507:      */
1:3f32507:     int    SIZELEN = 12;
1:3f32507: 
1:3f32507:     /**
1:3f32507:      * The maximum size of a file in a tar archive (That's 11 sevens, octal).
1:3f32507:      */
1:3f32507:     long   MAXSIZE = 077777777777L;
1:3f32507: 
1:3f32507:     /**
1:3f32507:      * The length of the magic field in a header buffer.
1:3f32507:      */
1:3f32507:     int    MAGICLEN = 8;
1:3f32507: 
1:3f32507:     /**
1:3f32507:      * The length of the modification time field in a header buffer.
1:3f32507:      */
1:3f32507:     int    MODTIMELEN = 12;
1:3f32507: 
1:3f32507:     /**
1:3f32507:      * The length of the user name field in a header buffer.
1:3f32507:      */
1:3f32507:     int    UNAMELEN = 32;
1:3f32507: 
1:3f32507:     /**
1:3f32507:      * The length of the group name field in a header buffer.
1:3f32507:      */
1:3f32507:     int    GNAMELEN = 32;
1:3f32507: 
1:3f32507:     /**
1:3f32507:      * The length of the devices field in a header buffer.
1:3f32507:      */
1:3f32507:     int    DEVLEN = 8;
1:3f32507: 
1:3f32507:     /**
1:3f32507:      * LF_ constants represent the "link flag" of an entry, or more commonly,
1:3f32507:      * the "entry type". This is the "old way" of indicating a normal file.
1:3f32507:      */
1:3f32507:     byte   LF_OLDNORM = 0;
1:3f32507: 
1:3f32507:     /**
1:3f32507:      * Normal file type.
1:3f32507:      */
1:3f32507:     byte   LF_NORMAL = (byte) '0';
1:3f32507: 
1:3f32507:     /**
1:3f32507:      * Link file type.
1:3f32507:      */
1:3f32507:     byte   LF_LINK = (byte) '1';
1:3f32507: 
1:3f32507:     /**
1:3f32507:      * Symbolic link file type.
1:3f32507:      */
1:3f32507:     byte   LF_SYMLINK = (byte) '2';
1:3f32507: 
1:3f32507:     /**
1:3f32507:      * Character device file type.
1:3f32507:      */
1:3f32507:     byte   LF_CHR = (byte) '3';
1:3f32507: 
1:3f32507:     /**
1:3f32507:      * Block device file type.
1:3f32507:      */
1:3f32507:     byte   LF_BLK = (byte) '4';
1:3f32507: 
1:3f32507:     /**
1:3f32507:      * Directory file type.
1:3f32507:      */
1:3f32507:     byte   LF_DIR = (byte) '5';
1:3f32507: 
1:3f32507:     /**
1:3f32507:      * FIFO (pipe) file type.
1:3f32507:      */
1:3f32507:     byte   LF_FIFO = (byte) '6';
1:3f32507: 
1:3f32507:     /**
1:3f32507:      * Contiguous file type.
1:3f32507:      */
1:3f32507:     byte   LF_CONTIG = (byte) '7';
1:3f32507: 
1:3f32507:     /**
1:3f32507:      * The magic tag representing a POSIX tar archive.
1:3f32507:      */
1:3f32507:     String TMAGIC = "ustar";
1:3f32507: 
1:3f32507:     /**
1:3f32507:      * The magic tag representing a GNU tar archive.
1:3f32507:      */
1:3f32507:     String GNU_TMAGIC = "ustar  ";
1:3f32507: 
1:3f32507:     /**
1:3f32507:      * The namr of the GNU tar entry which contains a long name.
1:3f32507:      */
1:3f32507:     String GNU_LONGLINK = "././@LongLink";
1:3f32507: 
1:3f32507:     /**
1:3f32507:      * Identifies the *next* file on the tape as having a long name.
1:3f32507:      */
1:3f32507:     byte LF_GNUTYPE_LONGNAME = (byte) 'L';
1:3f32507: }
============================================================================
author:Hadrian Zbarcea
-------------------------------------------------------------------------------
commit:3f32507
/////////////////////////////////////////////////////////////////////////
1: /*
1:  *  Licensed to the Apache Software Foundation (ASF) under one or more
1:  *  contributor license agreements.  See the NOTICE file distributed with
1:  *  this work for additional information regarding copyright ownership.
1:  *  The ASF licenses this file to You under the Apache License, Version 2.0
1:  *  (the "License"); you may not use this file except in compliance with
1:  *  the License.  You may obtain a copy of the License at
1:  *
1:  *      http://www.apache.org/licenses/LICENSE-2.0
1:  *
1:  *  Unless required by applicable law or agreed to in writing, software
1:  *  distributed under the License is distributed on an "AS IS" BASIS,
1:  *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:  *  See the License for the specific language governing permissions and
1:  *  limitations under the License.
1:  *
1:  */
1: 
1: /*
1:  * This package is based on the work done by Timothy Gerard Endres
1:  * (time@ice.com) to whom the Ant project is very grateful for his great code.
1:  */
1: 
1: package org.apache.activemq.console.command.store.tar;
1: 
1: /**
1:  * This interface contains all the definitions used in the package.
1:  *
1:  */
1: // CheckStyle:InterfaceIsTypeCheck OFF (bc)
1: public interface TarConstants {
1: 
1:     /**
1:      * The length of the name field in a header buffer.
1:      */
1:     int    NAMELEN = 100;
1: 
1:     /**
1:      * The length of the mode field in a header buffer.
1:      */
1:     int    MODELEN = 8;
1: 
1:     /**
1:      * The length of the user id field in a header buffer.
1:      */
1:     int    UIDLEN = 8;
1: 
1:     /**
1:      * The length of the group id field in a header buffer.
1:      */
1:     int    GIDLEN = 8;
1: 
1:     /**
1:      * The length of the checksum field in a header buffer.
1:      */
1:     int    CHKSUMLEN = 8;
1: 
1:     /**
1:      * The length of the size field in a header buffer.
1:      */
1:     int    SIZELEN = 12;
1: 
1:     /**
1:      * The maximum size of a file in a tar archive (That's 11 sevens, octal).
1:      */
1:     long   MAXSIZE = 077777777777L;
1: 
1:     /**
1:      * The length of the magic field in a header buffer.
1:      */
1:     int    MAGICLEN = 8;
1: 
1:     /**
1:      * The length of the modification time field in a header buffer.
1:      */
1:     int    MODTIMELEN = 12;
1: 
1:     /**
1:      * The length of the user name field in a header buffer.
1:      */
1:     int    UNAMELEN = 32;
1: 
1:     /**
1:      * The length of the group name field in a header buffer.
1:      */
1:     int    GNAMELEN = 32;
1: 
1:     /**
1:      * The length of the devices field in a header buffer.
1:      */
1:     int    DEVLEN = 8;
1: 
1:     /**
1:      * LF_ constants represent the "link flag" of an entry, or more commonly,
1:      * the "entry type". This is the "old way" of indicating a normal file.
1:      */
1:     byte   LF_OLDNORM = 0;
1: 
1:     /**
1:      * Normal file type.
1:      */
1:     byte   LF_NORMAL = (byte) '0';
1: 
1:     /**
1:      * Link file type.
1:      */
1:     byte   LF_LINK = (byte) '1';
1: 
1:     /**
1:      * Symbolic link file type.
1:      */
1:     byte   LF_SYMLINK = (byte) '2';
1: 
1:     /**
1:      * Character device file type.
1:      */
1:     byte   LF_CHR = (byte) '3';
1: 
1:     /**
1:      * Block device file type.
1:      */
1:     byte   LF_BLK = (byte) '4';
1: 
1:     /**
1:      * Directory file type.
1:      */
1:     byte   LF_DIR = (byte) '5';
1: 
1:     /**
1:      * FIFO (pipe) file type.
1:      */
1:     byte   LF_FIFO = (byte) '6';
1: 
1:     /**
1:      * Contiguous file type.
1:      */
1:     byte   LF_CONTIG = (byte) '7';
1: 
1:     /**
1:      * The magic tag representing a POSIX tar archive.
1:      */
1:     String TMAGIC = "ustar";
1: 
1:     /**
1:      * The magic tag representing a GNU tar archive.
1:      */
1:     String GNU_TMAGIC = "ustar  ";
1: 
1:     /**
1:      * The namr of the GNU tar entry which contains a long name.
1:      */
1:     String GNU_LONGLINK = "././@LongLink";
1: 
1:     /**
1:      * Identifies the *next* file on the tape as having a long name.
1:      */
1:     byte LF_GNUTYPE_LONGNAME = (byte) 'L';
1: }
author:Hiram R. Chirino
-------------------------------------------------------------------------------
commit:cfe5e98
/////////////////////////////////////////////////////////////////////////
0: /*
0:  *  Licensed to the Apache Software Foundation (ASF) under one or more
0:  *  contributor license agreements.  See the NOTICE file distributed with
0:  *  this work for additional information regarding copyright ownership.
0:  *  The ASF licenses this file to You under the Apache License, Version 2.0
0:  *  (the "License"); you may not use this file except in compliance with
0:  *  the License.  You may obtain a copy of the License at
0:  *
0:  *      http://www.apache.org/licenses/LICENSE-2.0
0:  *
0:  *  Unless required by applicable law or agreed to in writing, software
0:  *  distributed under the License is distributed on an "AS IS" BASIS,
0:  *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
0:  *  See the License for the specific language governing permissions and
0:  *  limitations under the License.
0:  *
0:  */
0: 
0: /*
0:  * This package is based on the work done by Timothy Gerard Endres
0:  * (time@ice.com) to whom the Ant project is very grateful for his great code.
0:  */
0: 
0: package org.apache.activemq.console.command.store.tar;
0: 
0: /**
0:  * This interface contains all the definitions used in the package.
0:  *
0:  */
0: // CheckStyle:InterfaceIsTypeCheck OFF (bc)
0: public interface TarConstants {
0: 
0:     /**
0:      * The length of the name field in a header buffer.
0:      */
0:     int    NAMELEN = 100;
0: 
0:     /**
0:      * The length of the mode field in a header buffer.
0:      */
0:     int    MODELEN = 8;
0: 
0:     /**
0:      * The length of the user id field in a header buffer.
0:      */
0:     int    UIDLEN = 8;
0: 
0:     /**
0:      * The length of the group id field in a header buffer.
0:      */
0:     int    GIDLEN = 8;
0: 
0:     /**
0:      * The length of the checksum field in a header buffer.
0:      */
0:     int    CHKSUMLEN = 8;
0: 
0:     /**
0:      * The length of the size field in a header buffer.
0:      */
0:     int    SIZELEN = 12;
0: 
0:     /**
0:      * The maximum size of a file in a tar archive (That's 11 sevens, octal).
0:      */
0:     long   MAXSIZE = 077777777777L;
0: 
0:     /**
0:      * The length of the magic field in a header buffer.
0:      */
0:     int    MAGICLEN = 8;
0: 
0:     /**
0:      * The length of the modification time field in a header buffer.
0:      */
0:     int    MODTIMELEN = 12;
0: 
0:     /**
0:      * The length of the user name field in a header buffer.
0:      */
0:     int    UNAMELEN = 32;
0: 
0:     /**
0:      * The length of the group name field in a header buffer.
0:      */
0:     int    GNAMELEN = 32;
0: 
0:     /**
0:      * The length of the devices field in a header buffer.
0:      */
0:     int    DEVLEN = 8;
0: 
0:     /**
0:      * LF_ constants represent the "link flag" of an entry, or more commonly,
0:      * the "entry type". This is the "old way" of indicating a normal file.
0:      */
0:     byte   LF_OLDNORM = 0;
0: 
0:     /**
0:      * Normal file type.
0:      */
0:     byte   LF_NORMAL = (byte) '0';
0: 
0:     /**
0:      * Link file type.
0:      */
0:     byte   LF_LINK = (byte) '1';
0: 
0:     /**
0:      * Symbolic link file type.
0:      */
0:     byte   LF_SYMLINK = (byte) '2';
0: 
0:     /**
0:      * Character device file type.
0:      */
0:     byte   LF_CHR = (byte) '3';
0: 
0:     /**
0:      * Block device file type.
0:      */
0:     byte   LF_BLK = (byte) '4';
0: 
0:     /**
0:      * Directory file type.
0:      */
0:     byte   LF_DIR = (byte) '5';
0: 
0:     /**
0:      * FIFO (pipe) file type.
0:      */
0:     byte   LF_FIFO = (byte) '6';
0: 
0:     /**
0:      * Contiguous file type.
0:      */
0:     byte   LF_CONTIG = (byte) '7';
0: 
0:     /**
0:      * The magic tag representing a POSIX tar archive.
0:      */
0:     String TMAGIC = "ustar";
0: 
0:     /**
0:      * The magic tag representing a GNU tar archive.
0:      */
0:     String GNU_TMAGIC = "ustar  ";
0: 
0:     /**
0:      * The namr of the GNU tar entry which contains a long name.
0:      */
0:     String GNU_LONGLINK = "././@LongLink";
0: 
0:     /**
0:      * Identifies the *next* file on the tape as having a long name.
0:      */
0:     byte LF_GNUTYPE_LONGNAME = (byte) 'L';
0: }
============================================================================