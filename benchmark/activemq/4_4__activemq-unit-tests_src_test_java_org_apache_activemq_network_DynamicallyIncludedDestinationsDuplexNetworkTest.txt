1:25d396b: /**
1:25d396b:  * Licensed to the Apache Software Foundation (ASF) under one or more
1:25d396b:  * contributor license agreements.  See the NOTICE file distributed with
1:25d396b:  * this work for additional information regarding copyright ownership.
1:25d396b:  * The ASF licenses this file to You under the Apache License, Version 2.0
1:25d396b:  * (the "License"); you may not use this file except in compliance with
1:25d396b:  * the License.  You may obtain a copy of the License at
1:25d396b:  *
1:25d396b:  * http://www.apache.org/licenses/LICENSE-2.0
1:25d396b:  *
1:25d396b:  * Unless required by applicable law or agreed to in writing, software
1:25d396b:  * distributed under the License is distributed on an "AS IS" BASIS,
1:25d396b:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:25d396b:  * See the License for the specific language governing permissions and
1:25d396b:  * limitations under the License.
1:25d396b:  */
1:25d396b: package org.apache.activemq.network;
4:25d396b: 
1:c7d559f: import static org.junit.Assert.assertEquals;
1:c7d559f: import static org.junit.Assert.assertFalse;
1:c7d559f: import static org.junit.Assert.assertNotNull;
1:1ae2938: import static org.junit.Assert.assertTrue;
1:c7d559f: 
1:c7d559f: import java.lang.reflect.Field;
1:ec97d0a: import java.util.concurrent.CopyOnWriteArrayList;
1:c7d559f: 
1:c7d559f: import javax.jms.MessageProducer;
1:c7d559f: import javax.jms.TemporaryQueue;
1:c7d559f: 
1:25d396b: import org.apache.activemq.advisory.AdvisorySupport;
1:25d396b: import org.apache.activemq.broker.BrokerService;
1:25d396b: import org.apache.activemq.broker.TransportConnection;
1:ec97d0a: import org.apache.activemq.broker.TransportConnector;
1:1ae2938: import org.apache.activemq.util.Wait;
1:25d396b: import org.junit.Test;
1:25d396b: 
1:25d396b: /**
1:25d396b:  * @author <a href="http://www.christianposta.com/blog">Christian Posta</a>
1:25d396b:  */
1:25d396b: public class DynamicallyIncludedDestinationsDuplexNetworkTest extends SimpleNetworkTest {
1:25d396b: 
1:25d396b:     private static final int REMOTE_BROKER_TCP_PORT = 61617;
1:25d396b: 
1:25d396b:     @Override
1:25d396b:     protected String getLocalBrokerURI() {
1:25d396b:         return "org/apache/activemq/network/duplexDynamicIncludedDestLocalBroker.xml";
1:25d396b:     }
1:25d396b: 
1:25d396b:     @Override
1:25d396b:     protected BrokerService createRemoteBroker() throws Exception {
1:25d396b:         BrokerService broker = new BrokerService();
1:25d396b:         broker.setBrokerName("remoteBroker");
1:25d396b:         broker.addConnector("tcp://localhost:" + REMOTE_BROKER_TCP_PORT);
1:25d396b:         return broker;
1:25d396b:     }
1:25d396b: 
1:25d396b:     // we have to override this, because with dynamicallyIncludedDestinations working properly
1:25d396b:     // (see https://issues.apache.org/jira/browse/AMQ-4209) you can't get request/response
1:25d396b:     // with temps working (there is no wild card like there is for staticallyIncludedDest)
1:25d396b:     //
1:25d396b:     @Override
1:25d396b:     public void testRequestReply() throws Exception {
1:25d396b: 
1:25d396b:     }
1:25d396b: 
1:25d396b:     @Test
1:25d396b:     public void testTempQueues() throws Exception {
1:25d396b:         TemporaryQueue temp = localSession.createTemporaryQueue();
1:25d396b:         MessageProducer producer = localSession.createProducer(temp);
1:25d396b:         producer.send(localSession.createTextMessage("test"));
1:25d396b:         Thread.sleep(100);
1:25d396b:         assertEquals("Destination not created", 1, remoteBroker.getAdminView().getTemporaryQueues().length);
1:25d396b:         temp.delete();
1:25d396b:         Thread.sleep(100);
1:25d396b:         assertEquals("Destination not deleted", 0, remoteBroker.getAdminView().getTemporaryQueues().length);
1:25d396b:     }
1:25d396b: 
1:25d396b:     @Test
1:25d396b:     public void testDynamicallyIncludedDestinationsForDuplex()  throws Exception{
1:25d396b:         // Once the bridge is set up, we should see the filter used for the duplex end of the bridge
1:25d396b:         // only subscribe to the specific destinations included in the <dynamicallyIncludedDestinations> list
1:25d396b:         // so let's test that the filter is correct, let's also test the subscription on the localbroker
1:25d396b:         // is correct
1:25d396b: 
1:25d396b:         // the bridge on the remote broker has the correct filter
1:25d396b:         TransportConnection bridgeConnection = getDuplexBridgeConnectionFromRemote();
1:25d396b:         assertNotNull(bridgeConnection);
1:25d396b:         DemandForwardingBridge duplexBridge = getDuplexBridgeFromConnection(bridgeConnection);
1:25d396b:         assertNotNull(duplexBridge);
1:25d396b:         NetworkBridgeConfiguration configuration = getConfigurationFromNetworkBridge(duplexBridge);
1:25d396b:         assertNotNull(configuration);
1:25d396b:         assertFalse("This destinationFilter does not include ONLY the destinations specified in dynamicallyIncludedDestinations",
1:25d396b:                 configuration.getDestinationFilter().equals(AdvisorySupport.CONSUMER_ADVISORY_TOPIC_PREFIX + ">"));
1:25d396b:         assertEquals("There are other patterns in the destinationFilter that shouldn't be there",
1:25d396b:                 "ActiveMQ.Advisory.Consumer.Queue.include.test.foo,ActiveMQ.Advisory.Consumer.Topic.include.test.bar",
1:25d396b:                 configuration.getDestinationFilter());
1:25d396b:     }
1:25d396b: 
1:25d396b:     private NetworkBridgeConfiguration getConfigurationFromNetworkBridge(DemandForwardingBridgeSupport duplexBridge) throws NoSuchFieldException, IllegalAccessException {
1:25d396b:         Field f = DemandForwardingBridgeSupport.class.getDeclaredField("configuration");
1:25d396b:         f.setAccessible(true);
1:25d396b:         NetworkBridgeConfiguration configuration = (NetworkBridgeConfiguration) f.get(duplexBridge);
1:25d396b:         return configuration;
1:25d396b:     }
1:25d396b: 
1:25d396b:     private DemandForwardingBridge getDuplexBridgeFromConnection(TransportConnection bridgeConnection) throws NoSuchFieldException, IllegalAccessException {
1:25d396b:         Field f = TransportConnection.class.getDeclaredField("duplexBridge");
1:25d396b:         f.setAccessible(true);
1:25d396b:         DemandForwardingBridge bridge = (DemandForwardingBridge) f.get(bridgeConnection);
1:25d396b:         return bridge;
1:25d396b:     }
1:25d396b: 
1:25d396b:     public TransportConnection getDuplexBridgeConnectionFromRemote() {
1:ec97d0a:         TransportConnector transportConnector = remoteBroker.getTransportConnectorByScheme("tcp");
1:ec97d0a:         CopyOnWriteArrayList<TransportConnection> transportConnections = transportConnector.getConnections();
1:ec97d0a:         TransportConnection duplexBridgeConnectionFromRemote = transportConnections.get(0);
1:25d396b:         return duplexBridgeConnectionFromRemote;
1:25d396b:     }
1:1ae2938: 
1:1ae2938:     @Override
1:1ae2938:     protected void assertNetworkBridgeStatistics(final long expectedLocalSent, final long expectedRemoteSent) throws Exception {
1:1ae2938: 
1:1ae2938:         final NetworkBridge localBridge = localBroker.getNetworkConnectors().get(0).activeBridges().iterator().next();
1:1ae2938: 
1:1ae2938:         assertTrue(Wait.waitFor(new Wait.Condition() {
1:1ae2938:             @Override
1:1ae2938:             public boolean isSatisified() throws Exception {
1:1ae2938:                 return expectedLocalSent == localBridge.getNetworkBridgeStatistics().getDequeues().getCount() &&
1:1ae2938:                         expectedRemoteSent == localBridge.getNetworkBridgeStatistics().getReceivedCount().getCount();
1:1ae2938:             }
1:1ae2938:         }));
1:1ae2938: 
1:1ae2938:     }
1:25d396b: }
============================================================================
author:Christopher L. Shannon (cshannon)
-------------------------------------------------------------------------------
commit:1ae2938
/////////////////////////////////////////////////////////////////////////
1: import static org.junit.Assert.assertTrue;
/////////////////////////////////////////////////////////////////////////
1: import org.apache.activemq.util.Wait;
/////////////////////////////////////////////////////////////////////////
1: 
1:     @Override
1:     protected void assertNetworkBridgeStatistics(final long expectedLocalSent, final long expectedRemoteSent) throws Exception {
1: 
1:         final NetworkBridge localBridge = localBroker.getNetworkConnectors().get(0).activeBridges().iterator().next();
1: 
1:         assertTrue(Wait.waitFor(new Wait.Condition() {
1:             @Override
1:             public boolean isSatisified() throws Exception {
1:                 return expectedLocalSent == localBridge.getNetworkBridgeStatistics().getDequeues().getCount() &&
1:                         expectedRemoteSent == localBridge.getNetworkBridgeStatistics().getReceivedCount().getCount();
1:             }
1:         }));
1: 
1:     }
author:Timothy Bish
-------------------------------------------------------------------------------
commit:ec97d0a
/////////////////////////////////////////////////////////////////////////
1: import java.util.concurrent.CopyOnWriteArrayList;
/////////////////////////////////////////////////////////////////////////
1: import org.apache.activemq.broker.TransportConnector;
/////////////////////////////////////////////////////////////////////////
1:         TransportConnector transportConnector = remoteBroker.getTransportConnectorByScheme("tcp");
1:         CopyOnWriteArrayList<TransportConnection> transportConnections = transportConnector.getConnections();
1:         TransportConnection duplexBridgeConnectionFromRemote = transportConnections.get(0);
author:Timothy A. Bish
-------------------------------------------------------------------------------
commit:c7d559f
/////////////////////////////////////////////////////////////////////////
1: import static org.junit.Assert.assertEquals;
1: import static org.junit.Assert.assertFalse;
1: import static org.junit.Assert.assertNotNull;
1: 
1: import java.lang.reflect.Field;
1: 
1: import javax.jms.MessageProducer;
1: import javax.jms.TemporaryQueue;
1: 
commit:ef24cc9
author:Christian Posta
-------------------------------------------------------------------------------
commit:25d396b
/////////////////////////////////////////////////////////////////////////
1: /**
1:  * Licensed to the Apache Software Foundation (ASF) under one or more
1:  * contributor license agreements.  See the NOTICE file distributed with
1:  * this work for additional information regarding copyright ownership.
1:  * The ASF licenses this file to You under the Apache License, Version 2.0
1:  * (the "License"); you may not use this file except in compliance with
1:  * the License.  You may obtain a copy of the License at
1:  *
1:  * http://www.apache.org/licenses/LICENSE-2.0
1:  *
1:  * Unless required by applicable law or agreed to in writing, software
1:  * distributed under the License is distributed on an "AS IS" BASIS,
1:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:  * See the License for the specific language governing permissions and
1:  * limitations under the License.
1:  */
1: package org.apache.activemq.network;
1: 
1: import org.apache.activemq.advisory.AdvisorySupport;
1: import org.apache.activemq.broker.BrokerService;
1: import org.apache.activemq.broker.TransportConnection;
1: import org.junit.Test;
1: 
0: import javax.jms.MessageProducer;
0: import javax.jms.TemporaryQueue;
0: import java.lang.reflect.Field;
1: 
0: import static junit.framework.Assert.assertEquals;
0: import static junit.framework.Assert.assertFalse;
0: import static junit.framework.Assert.assertNotNull;
1: 
1: /**
1:  * @author <a href="http://www.christianposta.com/blog">Christian Posta</a>
1:  */
1: public class DynamicallyIncludedDestinationsDuplexNetworkTest extends SimpleNetworkTest {
1: 
1:     private static final int REMOTE_BROKER_TCP_PORT = 61617;
1: 
1:     @Override
1:     protected String getLocalBrokerURI() {
1:         return "org/apache/activemq/network/duplexDynamicIncludedDestLocalBroker.xml";
1:     }
1: 
1:     @Override
1:     protected BrokerService createRemoteBroker() throws Exception {
1:         BrokerService broker = new BrokerService();
1:         broker.setBrokerName("remoteBroker");
1:         broker.addConnector("tcp://localhost:" + REMOTE_BROKER_TCP_PORT);
1:         return broker;
1:     }
1: 
1:     // we have to override this, because with dynamicallyIncludedDestinations working properly
1:     // (see https://issues.apache.org/jira/browse/AMQ-4209) you can't get request/response
1:     // with temps working (there is no wild card like there is for staticallyIncludedDest)
1:     //
1:     @Override
1:     public void testRequestReply() throws Exception {
1: 
1:     }
1: 
1:     @Test
1:     public void testTempQueues() throws Exception {
1:         TemporaryQueue temp = localSession.createTemporaryQueue();
1:         MessageProducer producer = localSession.createProducer(temp);
1:         producer.send(localSession.createTextMessage("test"));
1:         Thread.sleep(100);
1:         assertEquals("Destination not created", 1, remoteBroker.getAdminView().getTemporaryQueues().length);
1:         temp.delete();
1:         Thread.sleep(100);
1:         assertEquals("Destination not deleted", 0, remoteBroker.getAdminView().getTemporaryQueues().length);
1:     }
1: 
1:     @Test
1:     public void testDynamicallyIncludedDestinationsForDuplex()  throws Exception{
1:         // Once the bridge is set up, we should see the filter used for the duplex end of the bridge
1:         // only subscribe to the specific destinations included in the <dynamicallyIncludedDestinations> list
1:         // so let's test that the filter is correct, let's also test the subscription on the localbroker
1:         // is correct
1: 
1:         // the bridge on the remote broker has the correct filter
1:         TransportConnection bridgeConnection = getDuplexBridgeConnectionFromRemote();
1:         assertNotNull(bridgeConnection);
1:         DemandForwardingBridge duplexBridge = getDuplexBridgeFromConnection(bridgeConnection);
1:         assertNotNull(duplexBridge);
1:         NetworkBridgeConfiguration configuration = getConfigurationFromNetworkBridge(duplexBridge);
1:         assertNotNull(configuration);
1:         assertFalse("This destinationFilter does not include ONLY the destinations specified in dynamicallyIncludedDestinations",
1:                 configuration.getDestinationFilter().equals(AdvisorySupport.CONSUMER_ADVISORY_TOPIC_PREFIX + ">"));
1:         assertEquals("There are other patterns in the destinationFilter that shouldn't be there",
1:                 "ActiveMQ.Advisory.Consumer.Queue.include.test.foo,ActiveMQ.Advisory.Consumer.Topic.include.test.bar",
1:                 configuration.getDestinationFilter());
1:     }
1: 
1:     private NetworkBridgeConfiguration getConfigurationFromNetworkBridge(DemandForwardingBridgeSupport duplexBridge) throws NoSuchFieldException, IllegalAccessException {
1:         Field f = DemandForwardingBridgeSupport.class.getDeclaredField("configuration");
1:         f.setAccessible(true);
1:         NetworkBridgeConfiguration configuration = (NetworkBridgeConfiguration) f.get(duplexBridge);
1:         return configuration;
1:     }
1: 
1:     private DemandForwardingBridge getDuplexBridgeFromConnection(TransportConnection bridgeConnection) throws NoSuchFieldException, IllegalAccessException {
1:         Field f = TransportConnection.class.getDeclaredField("duplexBridge");
1:         f.setAccessible(true);
1:         DemandForwardingBridge bridge = (DemandForwardingBridge) f.get(bridgeConnection);
1:         return bridge;
1:     }
1: 
1:     public TransportConnection getDuplexBridgeConnectionFromRemote() {
0:         TransportConnection duplexBridgeConnectionFromRemote =
0:                 remoteBroker.getTransportConnectorByName("tcp://localhost:" + REMOTE_BROKER_TCP_PORT)
0:                         .getConnections().get(0);
1:         return duplexBridgeConnectionFromRemote;
1:     }
1: 
1: }
============================================================================