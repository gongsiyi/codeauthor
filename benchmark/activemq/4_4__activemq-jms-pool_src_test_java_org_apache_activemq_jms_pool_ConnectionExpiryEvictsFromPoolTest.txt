1:4dd5b5e: /**
1:4dd5b5e:  * Licensed to the Apache Software Foundation (ASF) under one or more
1:4dd5b5e:  * contributor license agreements.  See the NOTICE file distributed with
1:4dd5b5e:  * this work for additional information regarding copyright ownership.
1:4dd5b5e:  * The ASF licenses this file to You under the Apache License, Version 2.0
1:4dd5b5e:  * (the "License"); you may not use this file except in compliance with
1:4dd5b5e:  * the License.  You may obtain a copy of the License at
1:4dd5b5e:  *
1:4dd5b5e:  *      http://www.apache.org/licenses/LICENSE-2.0
1:4dd5b5e:  *
1:4dd5b5e:  * Unless required by applicable law or agreed to in writing, software
1:4dd5b5e:  * distributed under the License is distributed on an "AS IS" BASIS,
1:4dd5b5e:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:4dd5b5e:  * See the License for the specific language governing permissions and
1:4dd5b5e:  * limitations under the License.
1:4dd5b5e:  */
1:b66559e: package org.apache.activemq.jms.pool;
11:4dd5b5e: 
1:e6597c4: import static org.junit.Assert.assertNotSame;
1:e6597c4: import static org.junit.Assert.assertSame;
1:e6597c4: import static org.junit.Assert.assertTrue;
1:e6597c4: 
1:4dd5b5e: import java.util.concurrent.TimeUnit;
1:26b69e4: 
1:4dd5b5e: import javax.jms.Connection;
1:f664be7: import javax.jms.Session;
1:4dd5b5e: 
1:4dd5b5e: import org.apache.activemq.ActiveMQConnectionFactory;
1:4dd5b5e: import org.apache.activemq.broker.BrokerService;
1:4dd5b5e: import org.apache.activemq.broker.TransportConnector;
1:27ce49f: import org.junit.After;
1:e6597c4: import org.junit.Before;
1:e6597c4: import org.junit.Test;
1:4dd5b5e: 
1:e6597c4: public class ConnectionExpiryEvictsFromPoolTest extends JmsPoolTestSupport {
1:4dd5b5e: 
1:4dd5b5e:     private ActiveMQConnectionFactory factory;
1:4dd5b5e:     private PooledConnectionFactory pooledFactory;
1:4dd5b5e: 
1:f664be7:     @Override
1:e6597c4:     @Before
1:e6597c4:     public void setUp() throws Exception {
1:e6597c4:         super.setUp();
1:e6597c4: 
1:e6597c4:         brokerService = new BrokerService();
1:e6597c4:         brokerService.setUseJmx(false);
1:e6597c4:         brokerService.setPersistent(false);
1:e6597c4:         brokerService.setSchedulerSupport(false);
1:e6597c4:         brokerService.setAdvisorySupport(false);
1:e6597c4:         TransportConnector connector = brokerService.addConnector("tcp://localhost:0");
1:e6597c4:         brokerService.start();
1:4dd5b5e:         factory = new ActiveMQConnectionFactory("mock:" + connector.getConnectUri());
1:b66559e:         pooledFactory = new PooledConnectionFactory();
1:b66559e:         pooledFactory.setConnectionFactory(factory);
1:4dd5b5e:         pooledFactory.setMaxConnections(1);
2:4dd5b5e:     }
1:5795eb8: 
1:27ce49f:     @Override
1:27ce49f:     @After
1:27ce49f:     public void tearDown() throws Exception {
1:27ce49f:         try {
1:27ce49f:             pooledFactory.stop();
1:27ce49f:         } catch (Exception ex) {
1:27ce49f:             // ignored
1:27ce49f:         }
1:27ce49f: 
1:27ce49f:         super.tearDown();
1:27ce49f:     }
1:27ce49f: 
1:e6597c4:     @Test(timeout = 60000)
1:4dd5b5e:     public void testEvictionOfIdle() throws Exception {
1:4dd5b5e:         pooledFactory.setIdleTimeout(10);
1:4dd5b5e:         PooledConnection connection = (PooledConnection) pooledFactory.createConnection();
1:b66559e:         Connection amq1 = connection.getConnection();
1:26b69e4: 
1:4dd5b5e:         connection.close();
1:e6597c4: 
1:4dd5b5e:         // let it idle timeout
1:e6597c4:         TimeUnit.MILLISECONDS.sleep(500);
1:26b69e4: 
1:4dd5b5e:         PooledConnection connection2 = (PooledConnection) pooledFactory.createConnection();
1:b66559e:         Connection amq2 = connection2.getConnection();
1:4dd5b5e:         assertTrue("not equal", !amq1.equals(amq2));
1:4dd5b5e:     }
1:26b69e4: 
1:e6597c4:     @Test(timeout = 60000)
1:4dd5b5e:     public void testEvictionOfExpired() throws Exception {
1:4dd5b5e:         pooledFactory.setExpiryTimeout(10);
1:4dd5b5e:         Connection connection = pooledFactory.createConnection();
1:b66559e:         Connection amq1 = ((PooledConnection) connection).getConnection();
1:26b69e4: 
1:4dd5b5e:         // let it expire while in use
1:e6597c4:         TimeUnit.MILLISECONDS.sleep(500);
1:4dd5b5e:         connection.close();
1:26b69e4: 
1:4dd5b5e:         Connection connection2 = pooledFactory.createConnection();
1:b66559e:         Connection amq2 = ((PooledConnection) connection2).getConnection();
1:4dd5b5e:         assertTrue("not equal", !amq1.equals(amq2));
1:4dd5b5e:     }
1:26b69e4: 
1:e6597c4:     @Test(timeout = 60000)
1:5795eb8:     public void testNotIdledWhenInUse() throws Exception {
1:f664be7:         pooledFactory.setIdleTimeout(10);
1:f664be7:         PooledConnection connection = (PooledConnection) pooledFactory.createConnection();
1:f664be7:         Session s = connection.createSession(false, Session.AUTO_ACKNOWLEDGE);
1:26b69e4: 
1:f664be7:         // let connection to get idle
1:e6597c4:         TimeUnit.MILLISECONDS.sleep(500);
1:f664be7: 
1:5795eb8:         // get a connection from pool again, it should be the same underlying connection
1:5795eb8:         // as before and should not be idled out since an open session exists.
1:f664be7:         PooledConnection connection2 = (PooledConnection) pooledFactory.createConnection();
1:f664be7:         assertSame(connection.getConnection(), connection2.getConnection());
1:f664be7: 
1:f664be7:         // now the session is closed even when it should not be
1:f664be7:         try {
1:f664be7:             // any operation on session first checks whether session is closed
1:f664be7:             s.getTransacted();
1:f664be7:         } catch (javax.jms.IllegalStateException e) {
1:f664be7:             assertTrue("Session should be fine, instead: " + e.getMessage(), false);
1:f664be7:         }
1:5795eb8: 
1:b66559e:         Connection original = connection.getConnection();
1:5795eb8: 
1:5795eb8:         connection.close();
1:5795eb8:         connection2.close();
1:5795eb8: 
1:5795eb8:         // let connection to get idle
1:e6597c4:         TimeUnit.MILLISECONDS.sleep(500);
1:f664be7: 
1:5795eb8:         // get a connection from pool again, it should be a new Connection instance as the
1:5795eb8:         // old one should have been inactive and idled out.
1:5795eb8:         PooledConnection connection3 = (PooledConnection) pooledFactory.createConnection();
1:5795eb8:         assertNotSame(original, connection3.getConnection());
1:f664be7:     }
1:4dd5b5e: }
============================================================================
author:Timothy Bish
-------------------------------------------------------------------------------
commit:27ce49f
/////////////////////////////////////////////////////////////////////////
1: import org.junit.After;
/////////////////////////////////////////////////////////////////////////
1:     @Override
1:     @After
1:     public void tearDown() throws Exception {
1:         try {
1:             pooledFactory.stop();
1:         } catch (Exception ex) {
1:             // ignored
1:         }
1: 
1:         super.tearDown();
1:     }
1: 
commit:e6597c4
/////////////////////////////////////////////////////////////////////////
1: import static org.junit.Assert.assertNotSame;
1: import static org.junit.Assert.assertSame;
1: import static org.junit.Assert.assertTrue;
1: 
/////////////////////////////////////////////////////////////////////////
1: import org.junit.Before;
1: import org.junit.Test;
1: public class ConnectionExpiryEvictsFromPoolTest extends JmsPoolTestSupport {
1:     @Before
1:     public void setUp() throws Exception {
1:         super.setUp();
1: 
1:         brokerService = new BrokerService();
1:         brokerService.setUseJmx(false);
1:         brokerService.setPersistent(false);
1:         brokerService.setSchedulerSupport(false);
1:         brokerService.setAdvisorySupport(false);
1:         TransportConnector connector = brokerService.addConnector("tcp://localhost:0");
1:         brokerService.start();
1:     @Test(timeout = 60000)
1: 
1:         TimeUnit.MILLISECONDS.sleep(500);
1:     @Test(timeout = 60000)
1:         TimeUnit.MILLISECONDS.sleep(500);
/////////////////////////////////////////////////////////////////////////
1:     @Test(timeout = 60000)
1:         TimeUnit.MILLISECONDS.sleep(500);
/////////////////////////////////////////////////////////////////////////
1:         TimeUnit.MILLISECONDS.sleep(500);
author:gtully
-------------------------------------------------------------------------------
commit:b66559e
/////////////////////////////////////////////////////////////////////////
1: package org.apache.activemq.jms.pool;
/////////////////////////////////////////////////////////////////////////
1:         pooledFactory = new PooledConnectionFactory();
1:         pooledFactory.setConnectionFactory(factory);
1:         Connection amq1 = connection.getConnection();
1:         Connection amq2 = connection2.getConnection();
1:         Connection amq1 = ((PooledConnection) connection).getConnection();
1:         Connection amq2 = ((PooledConnection) connection2).getConnection();
/////////////////////////////////////////////////////////////////////////
1:         Connection original = connection.getConnection();
author:Timothy A. Bish
-------------------------------------------------------------------------------
commit:5795eb8
/////////////////////////////////////////////////////////////////////////
1:     public void testNotIdledWhenInUse() throws Exception {
/////////////////////////////////////////////////////////////////////////
1:         // get a connection from pool again, it should be the same underlying connection
1:         // as before and should not be idled out since an open session exists.
/////////////////////////////////////////////////////////////////////////
1: 
0:         ActiveMQConnection original = connection.getConnection();
1: 
1:         connection.close();
1:         connection2.close();
1: 
1:         // let connection to get idle
0:         TimeUnit.SECONDS.sleep(1);
1: 
1:         // get a connection from pool again, it should be a new Connection instance as the
1:         // old one should have been inactive and idled out.
1:         PooledConnection connection3 = (PooledConnection) pooledFactory.createConnection();
1:         assertNotSame(original, connection3.getConnection());
commit:f664be7
/////////////////////////////////////////////////////////////////////////
1: import javax.jms.Session;
/////////////////////////////////////////////////////////////////////////
1:     @Override
/////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////
0:     public void testRetainIdleWhenInUse() throws Exception {
1:         pooledFactory.setIdleTimeout(10);
1:         PooledConnection connection = (PooledConnection) pooledFactory.createConnection();
1:         Session s = connection.createSession(false, Session.AUTO_ACKNOWLEDGE);
1:         // let connection to get idle
0:         TimeUnit.SECONDS.sleep(1);
1: 
0:         // get the same connection from pool again, it will get destroyed due to validation check
0:         // it will be the same since maxIdle is set to 1 in implementation
1:         PooledConnection connection2 = (PooledConnection) pooledFactory.createConnection();
1:         assertSame(connection.getConnection(), connection2.getConnection());
1: 
1:         // now the session is closed even when it should not be
1:         try {
1:             // any operation on session first checks whether session is closed
1:             s.getTransacted();
1:         } catch (javax.jms.IllegalStateException e) {
1:             assertTrue("Session should be fine, instead: " + e.getMessage(), false);
1:         }
1:     }
1: 
0:     @Override
commit:26b69e4
/////////////////////////////////////////////////////////////////////////
0:         broker.setUseJmx(false);
/////////////////////////////////////////////////////////////////////////
1: 
1: 
1: 
1: 
1: 
1: 
1: 
1: 
author:Gary Tully
-------------------------------------------------------------------------------
commit:4dd5b5e
/////////////////////////////////////////////////////////////////////////
1: /**
1:  * Licensed to the Apache Software Foundation (ASF) under one or more
1:  * contributor license agreements.  See the NOTICE file distributed with
1:  * this work for additional information regarding copyright ownership.
1:  * The ASF licenses this file to You under the Apache License, Version 2.0
1:  * (the "License"); you may not use this file except in compliance with
1:  * the License.  You may obtain a copy of the License at
1:  *
1:  *      http://www.apache.org/licenses/LICENSE-2.0
1:  *
1:  * Unless required by applicable law or agreed to in writing, software
1:  * distributed under the License is distributed on an "AS IS" BASIS,
1:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:  * See the License for the specific language governing permissions and
1:  * limitations under the License.
1:  */
0: package org.apache.activemq.pool;
1: 
1: import java.util.concurrent.TimeUnit;
1: 
1: import javax.jms.Connection;
1: 
0: import org.apache.activemq.ActiveMQConnection;
1: import org.apache.activemq.ActiveMQConnectionFactory;
1: import org.apache.activemq.broker.BrokerService;
1: import org.apache.activemq.broker.TransportConnector;
0: import org.apache.activemq.test.TestSupport;
1: 
0: public class ConnectionExpiryEvictsFromPoolTest extends TestSupport {
1: 
0:     private BrokerService broker;
1:     private ActiveMQConnectionFactory factory;
1:     private PooledConnectionFactory pooledFactory;
1: 
0:     protected void setUp() throws Exception {
0:         broker = new BrokerService();
0:         broker.setPersistent(false);
0:         TransportConnector connector = broker.addConnector("tcp://localhost:0");
0:         broker.start();
1:         factory = new ActiveMQConnectionFactory("mock:" + connector.getConnectUri());
0:         pooledFactory = new PooledConnectionFactory(factory);
1:         pooledFactory.setMaxConnections(1);
1:     }
1: 
1:     public void testEvictionOfIdle() throws Exception {
1:         pooledFactory.setIdleTimeout(10);
1:         PooledConnection connection = (PooledConnection) pooledFactory.createConnection();
0:         ActiveMQConnection amq1 = connection.getConnection();
1:         
1:         connection.close();
1:         // let it idle timeout
0:         TimeUnit.SECONDS.sleep(1);
1:         
1:         PooledConnection connection2 = (PooledConnection) pooledFactory.createConnection();
0:         ActiveMQConnection amq2 = connection2.getConnection();
1:         assertTrue("not equal", !amq1.equals(amq2));
1:     }
1:     
1:     
1:     public void testEvictionOfExpired() throws Exception {
1:         pooledFactory.setExpiryTimeout(10);
1:         Connection connection = pooledFactory.createConnection();
0:         ActiveMQConnection amq1 = ((PooledConnection) connection).getConnection();
1:         
1:         // let it expire while in use
0:         TimeUnit.SECONDS.sleep(1);
1:         connection.close();
1:         
1:         Connection connection2 = pooledFactory.createConnection();
0:         ActiveMQConnection amq2 = ((PooledConnection) connection2).getConnection();
1:         assertTrue("not equal", !amq1.equals(amq2));
1:     }
1:     
1:     
0:     protected void tearDown() throws Exception {
0:         broker.stop();
1:     }
1: }
============================================================================