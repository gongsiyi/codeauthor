1:2ecf41d: /**
1:2ecf41d:  * Licensed to the Apache Software Foundation (ASF) under one or more
1:2ecf41d:  * contributor license agreements.  See the NOTICE file distributed with
1:2ecf41d:  * this work for additional information regarding copyright ownership.
1:2ecf41d:  * The ASF licenses this file to You under the Apache License, Version 2.0
1:2ecf41d:  * (the "License"); you may not use this file except in compliance with
1:2ecf41d:  * the License.  You may obtain a copy of the License at
1:2ecf41d:  *
1:2ecf41d:  * http://www.apache.org/licenses/LICENSE-2.0
1:2ecf41d:  *
1:2ecf41d:  * Unless required by applicable law or agreed to in writing, software
1:2ecf41d:  * distributed under the License is distributed on an "AS IS" BASIS,
1:2ecf41d:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:2ecf41d:  * See the License for the specific language governing permissions and
1:2ecf41d:  * limitations under the License.
1:2ecf41d:  */
1:2ecf41d: package example.wildcard;
1:2ecf41d: 
1:2ecf41d: import org.apache.activemq.ActiveMQConnectionFactory;
1:2ecf41d: import org.apache.activemq.command.ActiveMQTopic;
1:2ecf41d: 
1:2ecf41d: import javax.jms.*;
1:2ecf41d: import java.util.Scanner;
1:2ecf41d: 
1:2ecf41d: /**
1:2ecf41d:  * @author <a href="http://www.christianposta.com/blog">Christian Posta</a>
1:2ecf41d:  */
1:2ecf41d: public class Client {
1:2ecf41d:     private static final Boolean NON_TRANSACTED = false;
1:2ecf41d:     private static final String BROKER_URL = "tcp://localhost:61616";
1:2ecf41d: 
1:2ecf41d:     public static void main(String[] args) {
1:2ecf41d:         String url = BROKER_URL;
1:2ecf41d:         if (args.length > 0) {
1:2ecf41d:             url = args[0].trim();
1:2ecf41d:         }
1:2ecf41d:         ActiveMQConnectionFactory connectionFactory = new ActiveMQConnectionFactory("admin", "password", url);
1:2ecf41d:         Connection connection = null;
1:2ecf41d: 
1:2ecf41d:         try {
1:2ecf41d:             Topic senderTopic = new ActiveMQTopic(System.getProperty("topicName"));
1:2ecf41d: 
1:2ecf41d:             connection = connectionFactory.createConnection("admin", "password");
1:2ecf41d: 
1:2ecf41d:             Session senderSession = connection.createSession(NON_TRANSACTED, Session.AUTO_ACKNOWLEDGE);
1:2ecf41d:             MessageProducer sender = senderSession.createProducer(senderTopic);
1:2ecf41d: 
1:2ecf41d:             Session receiverSession = connection.createSession(NON_TRANSACTED, Session.AUTO_ACKNOWLEDGE);
1:2ecf41d: 
1:2ecf41d:             String policyType = System.getProperty("wildcard", ".*");
1:2ecf41d:             String receiverTopicName = senderTopic.getTopicName() + policyType;
1:2ecf41d:             Topic receiverTopic = receiverSession.createTopic(receiverTopicName);
1:2ecf41d: 
1:2ecf41d:             MessageConsumer receiver = receiverSession.createConsumer(receiverTopic);
1:2ecf41d:             receiver.setMessageListener(new MessageListener() {
1:2ecf41d:                 public void onMessage(Message message) {
1:2ecf41d:                     try {
1:2ecf41d:                         if (message instanceof TextMessage) {
1:2ecf41d:                             String text = ((TextMessage) message).getText();
1:2ecf41d:                             System.out.println("We received a new message: " + text);
1:2ecf41d:                         }
1:2ecf41d:                     } catch (JMSException e) {
1:2ecf41d:                         System.out.println("Could not read the receiver's topic because of a JMSException");
1:2ecf41d:                     }
1:2ecf41d:                 }
1:2ecf41d:             });
1:2ecf41d: 
1:2ecf41d:             connection.start();
1:2ecf41d:             System.out.println("Listening on '" + receiverTopicName + "'");
1:2ecf41d:             System.out.println("Enter a message to send: ");
1:2ecf41d: 
1:2ecf41d:             Scanner inputReader = new Scanner(System.in);
1:2ecf41d: 
1:2ecf41d:             while (true) {
1:2ecf41d:                 String line = inputReader.nextLine();
1:2ecf41d:                 if (line == null) {
1:2ecf41d:                     System.out.println("Done!");
1:2ecf41d:                     break;
1:2ecf41d:                 } else if (line.length() > 0) {
1:2ecf41d:                     try {
1:2ecf41d:                         TextMessage message = senderSession.createTextMessage();
1:2ecf41d:                         message.setText(line);
1:2ecf41d:                         System.out.println("Sending a message: " + message.getText());
1:2ecf41d:                         sender.send(message);
1:2ecf41d:                     } catch (JMSException e) {
1:2ecf41d:                         System.out.println("Exception during publishing a message: ");
1:2ecf41d:                     }
1:2ecf41d:                 }
1:2ecf41d:             }
1:2ecf41d: 
1:2ecf41d:             receiver.close();
1:2ecf41d:             receiverSession.close();
1:2ecf41d:             sender.close();
1:2ecf41d:             senderSession.close();
1:2ecf41d: 
1:2ecf41d:         } catch (Exception e) {
1:2ecf41d:             System.out.println("Caught exception!");
1:2ecf41d:         } finally {
1:2ecf41d:             if (connection != null) {
1:2ecf41d:                 try {
1:2ecf41d:                     connection.close();
1:2ecf41d:                 } catch (JMSException e) {
1:2ecf41d:                     System.out.println("When trying to close connection: ");
1:2ecf41d:                 }
1:2ecf41d:             }
1:2ecf41d:         }
1:2ecf41d: 
1:2ecf41d:     }
1:2ecf41d: }
============================================================================
author:Hiram Chirino
-------------------------------------------------------------------------------
commit:2ecf41d
/////////////////////////////////////////////////////////////////////////
1: /**
1:  * Licensed to the Apache Software Foundation (ASF) under one or more
1:  * contributor license agreements.  See the NOTICE file distributed with
1:  * this work for additional information regarding copyright ownership.
1:  * The ASF licenses this file to You under the Apache License, Version 2.0
1:  * (the "License"); you may not use this file except in compliance with
1:  * the License.  You may obtain a copy of the License at
1:  *
1:  * http://www.apache.org/licenses/LICENSE-2.0
1:  *
1:  * Unless required by applicable law or agreed to in writing, software
1:  * distributed under the License is distributed on an "AS IS" BASIS,
1:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:  * See the License for the specific language governing permissions and
1:  * limitations under the License.
1:  */
1: package example.wildcard;
1: 
1: import org.apache.activemq.ActiveMQConnectionFactory;
1: import org.apache.activemq.command.ActiveMQTopic;
1: 
1: import javax.jms.*;
1: import java.util.Scanner;
1: 
1: /**
1:  * @author <a href="http://www.christianposta.com/blog">Christian Posta</a>
1:  */
1: public class Client {
1:     private static final Boolean NON_TRANSACTED = false;
1:     private static final String BROKER_URL = "tcp://localhost:61616";
1: 
1:     public static void main(String[] args) {
1:         String url = BROKER_URL;
1:         if (args.length > 0) {
1:             url = args[0].trim();
1:         }
1:         ActiveMQConnectionFactory connectionFactory = new ActiveMQConnectionFactory("admin", "password", url);
1:         Connection connection = null;
1: 
1:         try {
1:             Topic senderTopic = new ActiveMQTopic(System.getProperty("topicName"));
1: 
1:             connection = connectionFactory.createConnection("admin", "password");
1: 
1:             Session senderSession = connection.createSession(NON_TRANSACTED, Session.AUTO_ACKNOWLEDGE);
1:             MessageProducer sender = senderSession.createProducer(senderTopic);
1: 
1:             Session receiverSession = connection.createSession(NON_TRANSACTED, Session.AUTO_ACKNOWLEDGE);
1: 
1:             String policyType = System.getProperty("wildcard", ".*");
1:             String receiverTopicName = senderTopic.getTopicName() + policyType;
1:             Topic receiverTopic = receiverSession.createTopic(receiverTopicName);
1: 
1:             MessageConsumer receiver = receiverSession.createConsumer(receiverTopic);
1:             receiver.setMessageListener(new MessageListener() {
1:                 public void onMessage(Message message) {
1:                     try {
1:                         if (message instanceof TextMessage) {
1:                             String text = ((TextMessage) message).getText();
1:                             System.out.println("We received a new message: " + text);
1:                         }
1:                     } catch (JMSException e) {
1:                         System.out.println("Could not read the receiver's topic because of a JMSException");
1:                     }
1:                 }
1:             });
1: 
1:             connection.start();
1:             System.out.println("Listening on '" + receiverTopicName + "'");
1:             System.out.println("Enter a message to send: ");
1: 
1:             Scanner inputReader = new Scanner(System.in);
1: 
1:             while (true) {
1:                 String line = inputReader.nextLine();
1:                 if (line == null) {
1:                     System.out.println("Done!");
1:                     break;
1:                 } else if (line.length() > 0) {
1:                     try {
1:                         TextMessage message = senderSession.createTextMessage();
1:                         message.setText(line);
1:                         System.out.println("Sending a message: " + message.getText());
1:                         sender.send(message);
1:                     } catch (JMSException e) {
1:                         System.out.println("Exception during publishing a message: ");
1:                     }
1:                 }
1:             }
1: 
1:             receiver.close();
1:             receiverSession.close();
1:             sender.close();
1:             senderSession.close();
1: 
1:         } catch (Exception e) {
1:             System.out.println("Caught exception!");
1:         } finally {
1:             if (connection != null) {
1:                 try {
1:                     connection.close();
1:                 } catch (JMSException e) {
1:                     System.out.println("When trying to close connection: ");
1:                 }
1:             }
1:         }
1: 
1:     }
1: }
============================================================================