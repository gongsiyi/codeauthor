1:480b3e7: /**
1:480b3e7:  * Licensed to the Apache Software Foundation (ASF) under one or more
1:480b3e7:  * contributor license agreements.  See the NOTICE file distributed with
1:480b3e7:  * this work for additional information regarding copyright ownership.
1:480b3e7:  * The ASF licenses this file to You under the Apache License, Version 2.0
1:480b3e7:  * (the "License"); you may not use this file except in compliance with
1:480b3e7:  * the License.  You may obtain a copy of the License at
1:480b3e7:  *
1:480b3e7:  *      http://www.apache.org/licenses/LICENSE-2.0
1:480b3e7:  *
1:480b3e7:  * Unless required by applicable law or agreed to in writing, software
1:480b3e7:  * distributed under the License is distributed on an "AS IS" BASIS,
1:480b3e7:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:480b3e7:  * See the License for the specific language governing permissions and
1:480b3e7:  * limitations under the License.
1:480b3e7:  */
1:480b3e7: package org.apache.activemq.transport.amqp.interop;
2:480b3e7: 
1:480b3e7: import static org.junit.Assert.assertEquals;
1:480b3e7: import static org.junit.Assert.assertNotNull;
1:097c0e7: import static org.junit.Assert.assertNull;
1:480b3e7: import static org.junit.Assert.assertTrue;
1:5d353e2: import static org.junit.Assert.fail;
1:480b3e7: 
1:9801622: import java.util.Date;
1:480b3e7: import java.util.concurrent.TimeUnit;
1:480b3e7: 
1:480b3e7: import javax.jms.Connection;
1:480b3e7: import javax.jms.Destination;
1:480b3e7: import javax.jms.Message;
1:480b3e7: import javax.jms.MessageConsumer;
1:480b3e7: import javax.jms.Session;
1:480b3e7: import javax.management.ObjectName;
1:480b3e7: 
1:480b3e7: import org.apache.activemq.broker.jmx.JobSchedulerViewMBean;
1:480b3e7: import org.apache.activemq.broker.jmx.QueueViewMBean;
1:480b3e7: import org.apache.activemq.transport.amqp.client.AmqpClient;
1:480b3e7: import org.apache.activemq.transport.amqp.client.AmqpClientTestSupport;
1:480b3e7: import org.apache.activemq.transport.amqp.client.AmqpConnection;
1:480b3e7: import org.apache.activemq.transport.amqp.client.AmqpMessage;
1:480b3e7: import org.apache.activemq.transport.amqp.client.AmqpReceiver;
1:480b3e7: import org.apache.activemq.transport.amqp.client.AmqpSender;
1:480b3e7: import org.apache.activemq.transport.amqp.client.AmqpSession;
1:480b3e7: import org.apache.activemq.util.Wait;
1:480b3e7: import org.junit.Test;
1:480b3e7: 
1:480b3e7: /**
1:480b3e7:  * Test for scheduled message support using AMQP message annotations.
1:480b3e7:  */
1:480b3e7: public class AmqpScheduledMessageTest extends AmqpClientTestSupport {
1:480b3e7: 
1:480b3e7:     @Override
1:480b3e7:     protected boolean isSchedulerEnabled() {
1:480b3e7:         return true;
1:480b3e7:     }
1:480b3e7: 
1:480b3e7:     @Override
1:480b3e7:     protected boolean isUseOpenWireConnector() {
1:480b3e7:         return true;
1:480b3e7:     }
1:480b3e7: 
1:480b3e7:     @Test(timeout = 60000)
1:480b3e7:     public void testSendWithDeliveryTimeIsScheduled() throws Exception {
1:480b3e7:         AmqpClient client = createAmqpClient();
1:1ac8954:         AmqpConnection connection = trackConnection(client.connect());
1:480b3e7:         AmqpSession session = connection.createSession();
1:480b3e7: 
1:480b3e7:         assertEquals(0, brokerService.getAdminView().getQueues().length);
1:480b3e7: 
1:480b3e7:         AmqpSender sender = session.createSender("queue://" + getTestName());
1:480b3e7: 
1:480b3e7:         // Get the Queue View early to avoid racing the delivery.
1:480b3e7:         assertEquals(1, brokerService.getAdminView().getQueues().length);
1:480b3e7:         final QueueViewMBean queueView = getProxyToQueue(getTestName());
1:480b3e7:         assertNotNull(queueView);
1:480b3e7: 
1:480b3e7:         AmqpMessage message = new AmqpMessage();
1:480b3e7:         long deliveryTime = System.currentTimeMillis() + TimeUnit.MINUTES.toMillis(2);
1:480b3e7:         message.setMessageAnnotation("x-opt-delivery-time", deliveryTime);
1:480b3e7:         message.setText("Test-Message");
1:480b3e7:         sender.send(message);
1:480b3e7: 
1:480b3e7:         JobSchedulerViewMBean view = getJobSchedulerMBean();
1:480b3e7:         assertNotNull(view);
1:480b3e7:         assertEquals(1, view.getAllJobs().size());
1:480b3e7: 
1:480b3e7:         connection.close();
1:480b3e7:     }
1:480b3e7: 
1:480b3e7:     @Test(timeout = 60000)
1:480b3e7:     public void testSendRecvWithDeliveryTime() throws Exception {
1:480b3e7:         AmqpClient client = createAmqpClient();
1:1ac8954:         AmqpConnection connection = trackConnection(client.connect());
1:480b3e7:         AmqpSession session = connection.createSession();
1:480b3e7: 
1:480b3e7:         assertEquals(0, brokerService.getAdminView().getQueues().length);
1:480b3e7: 
1:480b3e7:         AmqpSender sender = session.createSender("queue://" + getTestName());
1:097c0e7:         AmqpReceiver receiver = session.createReceiver("queue://" + getTestName());
1:480b3e7: 
1:480b3e7:         // Get the Queue View early to avoid racing the delivery.
1:480b3e7:         assertEquals(1, brokerService.getAdminView().getQueues().length);
1:480b3e7:         final QueueViewMBean queueView = getProxyToQueue(getTestName());
1:480b3e7:         assertNotNull(queueView);
1:480b3e7: 
1:480b3e7:         AmqpMessage message = new AmqpMessage();
1:480b3e7:         long deliveryTime = System.currentTimeMillis() + 2000;
1:480b3e7:         message.setMessageAnnotation("x-opt-delivery-time", deliveryTime);
1:480b3e7:         message.setText("Test-Message");
1:480b3e7:         sender.send(message);
1:480b3e7: 
1:480b3e7:         assertTrue("Delayed message should be delivered", Wait.waitFor(new Wait.Condition() {
1:480b3e7: 
1:480b3e7:             @Override
1:480b3e7:             public boolean isSatisified() throws Exception {
1:480b3e7:                 return queueView.getQueueSize() == 1;
1:480b3e7:             }
1:480b3e7:         }));
1:480b3e7: 
1:480b3e7:         // Now try and get the message
1:480b3e7:         receiver.flow(1);
1:480b3e7:         AmqpMessage received = receiver.receive(5, TimeUnit.SECONDS);
1:480b3e7:         assertNotNull(received);
1:480b3e7:         received.accept();
1:480b3e7:         Long msgDeliveryTime = (Long) received.getMessageAnnotation("x-opt-delivery-time");
1:480b3e7:         assertNotNull(msgDeliveryTime);
1:480b3e7:         assertEquals(deliveryTime, msgDeliveryTime.longValue());
1:480b3e7: 
1:480b3e7:         connection.close();
1:480b3e7:     }
1:480b3e7: 
1:480b3e7:     @Test(timeout = 60000)
1:480b3e7:     public void testSendScheduledReceiveOverOpenWire() throws Exception {
1:480b3e7:         AmqpClient client = createAmqpClient();
1:1ac8954:         AmqpConnection connection = trackConnection(client.connect());
1:480b3e7:         AmqpSession session = connection.createSession();
1:480b3e7: 
1:480b3e7:         assertEquals(0, brokerService.getAdminView().getQueues().length);
1:480b3e7: 
1:480b3e7:         AmqpSender sender = session.createSender("queue://" + getTestName());
1:480b3e7: 
1:480b3e7:         // Get the Queue View early to avoid racing the delivery.
1:480b3e7:         assertEquals(1, brokerService.getAdminView().getQueues().length);
1:480b3e7:         final QueueViewMBean queueView = getProxyToQueue(getTestName());
1:480b3e7:         assertNotNull(queueView);
1:480b3e7: 
1:480b3e7:         AmqpMessage message = new AmqpMessage();
1:480b3e7:         long deliveryTime = System.currentTimeMillis() + 2000;
1:480b3e7:         message.setMessageAnnotation("x-opt-delivery-time", deliveryTime);
1:480b3e7:         message.setText("Test-Message");
1:480b3e7:         sender.send(message);
1:480b3e7:         sender.close();
1:097c0e7: 
1:5d353e2:         // Read the message with short timeout, shouldn't get it.
1:5d353e2:         try {
1:5d353e2:             readMessages(getTestName(), 1, false, 500);
1:5d353e2:             fail("Should not read the message");
1:5d353e2:         } catch (Throwable ex) {
1:5d353e2:         }
1:5d353e2: 
1:480b3e7:         // Read the message
1:480b3e7:         readMessages(getTestName(), 1, false);
1:480b3e7: 
1:480b3e7:         connection.close();
1:480b3e7:     }
1:480b3e7: 
1:5d353e2:     @Test
1:5d353e2:     public void testScheduleWithDelay() throws Exception {
1:9801622:         final long DELAY = 5000;
1:9801622: 
1:5d353e2:         AmqpClient client = createAmqpClient();
1:1ac8954:         AmqpConnection connection = trackConnection(client.connect());
1:5d353e2:         AmqpSession session = connection.createSession();
1:5d353e2: 
1:5d353e2:         assertEquals(0, brokerService.getAdminView().getQueues().length);
1:5d353e2: 
1:5d353e2:         AmqpSender sender = session.createSender("queue://" + getTestName());
1:480b3e7:         AmqpReceiver receiver = session.createReceiver("queue://" + getTestName());
1:5d353e2: 
1:5d353e2:         // Get the Queue View early to avoid racing the delivery.
1:5d353e2:         assertEquals(1, brokerService.getAdminView().getQueues().length);
1:5d353e2:         final QueueViewMBean queueView = getProxyToQueue(getTestName());
1:5d353e2:         assertNotNull(queueView);
1:5d353e2: 
1:9801622:         long sendTime = System.currentTimeMillis();
1:9801622: 
1:5d353e2:         AmqpMessage message = new AmqpMessage();
1:9801622:         message.setMessageAnnotation("x-opt-delivery-delay", DELAY);
1:5d353e2:         message.setText("Test-Message");
1:5d353e2:         sender.send(message);
1:5d353e2:         sender.close();
1:5d353e2: 
1:097c0e7:         receiver.flow(1);
1:5d353e2: 
1:5d353e2:         // Read the message with short timeout, shouldn't get it.
1:5d353e2:         try {
1:097c0e7:             assertNull(receiver.receive(1, TimeUnit.SECONDS));
1:5d353e2:             fail("Should not read the message");
1:5d353e2:         } catch (Throwable ex) {
1:5d353e2:         }
1:5d353e2: 
1:5d353e2:         // Read the message with long timeout, should get it.
1:097c0e7:         AmqpMessage delivered = null;
1:5d353e2:         try {
1:097c0e7:             delivered = receiver.receive(10, TimeUnit.SECONDS);
1:5d353e2:         } catch (Throwable ex) {
1:5d353e2:             fail("Should read the message");
1:5d353e2:         }
1:5d353e2: 
1:9801622:         long receivedTime = System.currentTimeMillis();
1:9801622: 
1:097c0e7:         assertNotNull(delivered);
1:097c0e7:         Long msgDeliveryTime = (Long) delivered.getMessageAnnotation("x-opt-delivery-delay");
1:097c0e7:         assertNotNull(msgDeliveryTime);
1:9801622:         assertEquals(DELAY, msgDeliveryTime.longValue());
1:9801622: 
1:9801622:         long totalDelay = receivedTime - sendTime;
1:9801622:         LOG.debug("Sent at: {}, received at: {} ", new Date(sendTime), new Date(receivedTime), totalDelay);
1:9801622: 
1:9801622:         assertTrue("Delay not as expected: " + totalDelay, receivedTime - sendTime >= DELAY);
1:097c0e7: 
1:5d353e2:         connection.close();
1:5d353e2:     }
1:5d353e2: 
1:5d353e2:     @Test
1:5d353e2:     public void testScheduleRepeated() throws Exception {
1:5d353e2:         final int NUMBER = 10;
1:5d353e2: 
1:5d353e2:         AmqpClient client = createAmqpClient();
1:1ac8954:         AmqpConnection connection = trackConnection(client.connect());
1:5d353e2:         AmqpSession session = connection.createSession();
1:5d353e2: 
1:5d353e2:         assertEquals(0, brokerService.getAdminView().getQueues().length);
1:5d353e2: 
1:5d353e2:         AmqpSender sender = session.createSender("queue://" + getTestName());
1:5d353e2: 
1:5d353e2:         // Get the Queue View early to avoid racing the delivery.
1:5d353e2:         assertEquals(1, brokerService.getAdminView().getQueues().length);
1:5d353e2:         final QueueViewMBean queueView = getProxyToQueue(getTestName());
1:5d353e2:         assertNotNull(queueView);
1:480b3e7: 
1:5d353e2:         AmqpMessage message = new AmqpMessage();
1:5d353e2:         long delay = 1000;
2:5d353e2:         message.setMessageAnnotation("x-opt-delivery-delay", delay);
1:5d353e2:         message.setMessageAnnotation("x-opt-delivery-period", 500);
1:5d353e2:         message.setMessageAnnotation("x-opt-delivery-repeat", NUMBER - 1);
1:5d353e2:         message.setText("Test-Message");
1:5d353e2:         sender.send(message);
1:5d353e2:         sender.close();
1:5d353e2: 
1:5d353e2:         readMessages(getTestName(), NUMBER, false);
1:5d353e2:         // Read the message with short timeout, shouldn't get it.
1:5d353e2:         try {
1:5d353e2:             readMessages(getTestName(), 1, false, 600);
1:5d353e2:             fail("Should not read more messages");
1:5d353e2:         } catch (Throwable ex) {
1:5d353e2:         }
1:5d353e2: 
1:5d353e2:         connection.close();
1:5d353e2:     }
1:5d353e2: 
1:480b3e7:     public void readMessages(String destinationName, int count, boolean topic) throws Exception {
1:5d353e2:         readMessages(destinationName, count, topic, 5000);
1:5d353e2:     }
1:5d353e2: 
1:5d353e2:     public void readMessages(String destinationName, int count, boolean topic, long timeout) throws Exception {
1:480b3e7:         Connection connection = createJMSConnection();
1:480b3e7:         connection.start();
1:480b3e7: 
1:480b3e7:         try {
1:480b3e7:             Session session = connection.createSession(false, Session.AUTO_ACKNOWLEDGE);
1:480b3e7:             Destination destination = null;
1:480b3e7:             if (topic) {
1:480b3e7:                 destination = session.createTopic(destinationName);
1:480b3e7:             } else {
1:480b3e7:                 destination = session.createQueue(destinationName);
1:480b3e7:             }
1:480b3e7: 
1:480b3e7:             MessageConsumer consumer = session.createConsumer(destination);
1:480b3e7:             for (int i = 1; i <= count; i++) {
1:5d353e2:                 Message received = consumer.receive(timeout);
1:480b3e7:                 assertNotNull(received);
1:5d353e2:                 LOG.info("Read next message: {}", received.getJMSMessageID());
1:480b3e7:             }
1:480b3e7:         } finally {
1:480b3e7:             connection.close();
1:480b3e7:         }
1:480b3e7:     }
1:480b3e7: 
1:480b3e7:     protected JobSchedulerViewMBean getJobSchedulerMBean() throws Exception {
1:480b3e7:         ObjectName objectName = brokerService.getAdminView().getJMSJobScheduler();
1:480b3e7:         JobSchedulerViewMBean scheduler = null;
1:480b3e7:         if (objectName != null) {
1:480b3e7:             scheduler = (JobSchedulerViewMBean) brokerService.getManagementContext()
1:480b3e7:                 .newProxyInstance(objectName, JobSchedulerViewMBean.class, true);
1:480b3e7:         }
1:480b3e7: 
1:480b3e7:         return scheduler;
1:480b3e7:     }
1:480b3e7: }
============================================================================
author:Timothy Bish
-------------------------------------------------------------------------------
commit:9801622
/////////////////////////////////////////////////////////////////////////
1: import java.util.Date;
/////////////////////////////////////////////////////////////////////////
1:         final long DELAY = 5000;
1: 
/////////////////////////////////////////////////////////////////////////
1:         long sendTime = System.currentTimeMillis();
1: 
1:         message.setMessageAnnotation("x-opt-delivery-delay", DELAY);
/////////////////////////////////////////////////////////////////////////
1:         long receivedTime = System.currentTimeMillis();
1: 
1:         assertEquals(DELAY, msgDeliveryTime.longValue());
1: 
1:         long totalDelay = receivedTime - sendTime;
1:         LOG.debug("Sent at: {}, received at: {} ", new Date(sendTime), new Date(receivedTime), totalDelay);
1: 
1:         assertTrue("Delay not as expected: " + totalDelay, receivedTime - sendTime >= DELAY);
commit:097c0e7
/////////////////////////////////////////////////////////////////////////
1: import static org.junit.Assert.assertNull;
/////////////////////////////////////////////////////////////////////////
1:         AmqpReceiver receiver = session.createReceiver("queue://" + getTestName());
/////////////////////////////////////////////////////////////////////////
1:         receiver.flow(1);
1: 
1:             assertNull(receiver.receive(1, TimeUnit.SECONDS));
1:         AmqpMessage delivered = null;
1:             delivered = receiver.receive(10, TimeUnit.SECONDS);
1:         assertNotNull(delivered);
1:         Long msgDeliveryTime = (Long) delivered.getMessageAnnotation("x-opt-delivery-delay");
1:         assertNotNull(msgDeliveryTime);
0:         assertEquals(delay, msgDeliveryTime.longValue());
1: 
commit:1ac8954
/////////////////////////////////////////////////////////////////////////
1:         AmqpConnection connection = trackConnection(client.connect());
/////////////////////////////////////////////////////////////////////////
1:         AmqpConnection connection = trackConnection(client.connect());
/////////////////////////////////////////////////////////////////////////
1:         AmqpConnection connection = trackConnection(client.connect());
/////////////////////////////////////////////////////////////////////////
1:         AmqpConnection connection = trackConnection(client.connect());
/////////////////////////////////////////////////////////////////////////
1:         AmqpConnection connection = trackConnection(client.connect());
/////////////////////////////////////////////////////////////////////////
commit:5d353e2
/////////////////////////////////////////////////////////////////////////
1: import static org.junit.Assert.fail;
/////////////////////////////////////////////////////////////////////////
1:         // Read the message with short timeout, shouldn't get it.
1:         try {
1:             readMessages(getTestName(), 1, false, 500);
1:             fail("Should not read the message");
1:         } catch (Throwable ex) {
1:         }
1: 
1:     @Test
1:     public void testScheduleWithDelay() throws Exception {
1:         AmqpClient client = createAmqpClient();
0:         AmqpConnection connection = client.connect();
1:         AmqpSession session = connection.createSession();
1: 
1:         assertEquals(0, brokerService.getAdminView().getQueues().length);
1: 
1:         AmqpSender sender = session.createSender("queue://" + getTestName());
1: 
1:         // Get the Queue View early to avoid racing the delivery.
1:         assertEquals(1, brokerService.getAdminView().getQueues().length);
1:         final QueueViewMBean queueView = getProxyToQueue(getTestName());
1:         assertNotNull(queueView);
1: 
1:         AmqpMessage message = new AmqpMessage();
0:         long delay = 5000;
1:         message.setMessageAnnotation("x-opt-delivery-delay", delay);
1:         message.setText("Test-Message");
1:         sender.send(message);
1:         sender.close();
1: 
1:         // Read the message with short timeout, shouldn't get it.
1:         try {
0:             readMessages(getTestName(), 1, false, 1000);
1:             fail("Should not read the message");
1:         } catch (Throwable ex) {
1:         }
1: 
1:         // Read the message with long timeout, should get it.
1:         try {
0:             readMessages(getTestName(), 1, false, 10000);
1:         } catch (Throwable ex) {
1:             fail("Should read the message");
1:         }
1: 
1:         connection.close();
1:     }
1: 
1:     @Test
1:     public void testScheduleRepeated() throws Exception {
1:         final int NUMBER = 10;
1: 
1:         AmqpClient client = createAmqpClient();
0:         AmqpConnection connection = client.connect();
1:         AmqpSession session = connection.createSession();
1: 
1:         assertEquals(0, brokerService.getAdminView().getQueues().length);
1: 
1:         AmqpSender sender = session.createSender("queue://" + getTestName());
1: 
1:         // Get the Queue View early to avoid racing the delivery.
1:         assertEquals(1, brokerService.getAdminView().getQueues().length);
1:         final QueueViewMBean queueView = getProxyToQueue(getTestName());
1:         assertNotNull(queueView);
1: 
1:         AmqpMessage message = new AmqpMessage();
1:         long delay = 1000;
1:         message.setMessageAnnotation("x-opt-delivery-delay", delay);
1:         message.setMessageAnnotation("x-opt-delivery-period", 500);
1:         message.setMessageAnnotation("x-opt-delivery-repeat", NUMBER - 1);
1:         message.setText("Test-Message");
1:         sender.send(message);
1:         sender.close();
1: 
1:         readMessages(getTestName(), NUMBER, false);
1:         // Read the message with short timeout, shouldn't get it.
1:         try {
1:             readMessages(getTestName(), 1, false, 600);
1:             fail("Should not read more messages");
1:         } catch (Throwable ex) {
1:         }
1: 
1:         connection.close();
1:     }
1: 
1:         readMessages(destinationName, count, topic, 5000);
1:     }
1: 
1:     public void readMessages(String destinationName, int count, boolean topic, long timeout) throws Exception {
/////////////////////////////////////////////////////////////////////////
1:                 Message received = consumer.receive(timeout);
1:                 LOG.info("Read next message: {}", received.getJMSMessageID());
commit:480b3e7
/////////////////////////////////////////////////////////////////////////
1: /**
1:  * Licensed to the Apache Software Foundation (ASF) under one or more
1:  * contributor license agreements.  See the NOTICE file distributed with
1:  * this work for additional information regarding copyright ownership.
1:  * The ASF licenses this file to You under the Apache License, Version 2.0
1:  * (the "License"); you may not use this file except in compliance with
1:  * the License.  You may obtain a copy of the License at
1:  *
1:  *      http://www.apache.org/licenses/LICENSE-2.0
1:  *
1:  * Unless required by applicable law or agreed to in writing, software
1:  * distributed under the License is distributed on an "AS IS" BASIS,
1:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:  * See the License for the specific language governing permissions and
1:  * limitations under the License.
1:  */
1: package org.apache.activemq.transport.amqp.interop;
1: 
1: import static org.junit.Assert.assertEquals;
1: import static org.junit.Assert.assertNotNull;
1: import static org.junit.Assert.assertTrue;
1: 
1: import java.util.concurrent.TimeUnit;
1: 
1: import javax.jms.Connection;
1: import javax.jms.Destination;
1: import javax.jms.Message;
1: import javax.jms.MessageConsumer;
1: import javax.jms.Session;
1: import javax.management.ObjectName;
1: 
1: import org.apache.activemq.broker.jmx.JobSchedulerViewMBean;
1: import org.apache.activemq.broker.jmx.QueueViewMBean;
1: import org.apache.activemq.transport.amqp.client.AmqpClient;
1: import org.apache.activemq.transport.amqp.client.AmqpClientTestSupport;
1: import org.apache.activemq.transport.amqp.client.AmqpConnection;
1: import org.apache.activemq.transport.amqp.client.AmqpMessage;
1: import org.apache.activemq.transport.amqp.client.AmqpReceiver;
1: import org.apache.activemq.transport.amqp.client.AmqpSender;
1: import org.apache.activemq.transport.amqp.client.AmqpSession;
1: import org.apache.activemq.util.Wait;
1: import org.junit.Test;
1: 
1: /**
1:  * Test for scheduled message support using AMQP message annotations.
1:  */
1: public class AmqpScheduledMessageTest extends AmqpClientTestSupport {
1: 
1:     @Override
1:     protected boolean isSchedulerEnabled() {
1:         return true;
1:     }
1: 
1:     @Override
1:     protected boolean isUseOpenWireConnector() {
1:         return true;
1:     }
1: 
1:     @Test(timeout = 60000)
1:     public void testSendWithDeliveryTimeIsScheduled() throws Exception {
1:         AmqpClient client = createAmqpClient();
0:         AmqpConnection connection = client.connect();
1:         AmqpSession session = connection.createSession();
1: 
1:         assertEquals(0, brokerService.getAdminView().getQueues().length);
1: 
1:         AmqpSender sender = session.createSender("queue://" + getTestName());
1: 
1:         // Get the Queue View early to avoid racing the delivery.
1:         assertEquals(1, brokerService.getAdminView().getQueues().length);
1:         final QueueViewMBean queueView = getProxyToQueue(getTestName());
1:         assertNotNull(queueView);
1: 
1:         AmqpMessage message = new AmqpMessage();
1:         long deliveryTime = System.currentTimeMillis() + TimeUnit.MINUTES.toMillis(2);
1:         message.setMessageAnnotation("x-opt-delivery-time", deliveryTime);
1:         message.setText("Test-Message");
1:         sender.send(message);
1: 
1:         JobSchedulerViewMBean view = getJobSchedulerMBean();
1:         assertNotNull(view);
1:         assertEquals(1, view.getAllJobs().size());
1: 
1:         connection.close();
1:     }
1: 
1:     @Test(timeout = 60000)
1:     public void testSendRecvWithDeliveryTime() throws Exception {
1:         AmqpClient client = createAmqpClient();
0:         AmqpConnection connection = client.connect();
1:         AmqpSession session = connection.createSession();
1: 
1:         assertEquals(0, brokerService.getAdminView().getQueues().length);
1: 
1:         AmqpSender sender = session.createSender("queue://" + getTestName());
1:         AmqpReceiver receiver = session.createReceiver("queue://" + getTestName());
1: 
1:         // Get the Queue View early to avoid racing the delivery.
1:         assertEquals(1, brokerService.getAdminView().getQueues().length);
1:         final QueueViewMBean queueView = getProxyToQueue(getTestName());
1:         assertNotNull(queueView);
1: 
1:         AmqpMessage message = new AmqpMessage();
1:         long deliveryTime = System.currentTimeMillis() + 2000;
1:         message.setMessageAnnotation("x-opt-delivery-time", deliveryTime);
1:         message.setText("Test-Message");
1:         sender.send(message);
1: 
1:         assertTrue("Delayed message should be delivered", Wait.waitFor(new Wait.Condition() {
1: 
1:             @Override
1:             public boolean isSatisified() throws Exception {
1:                 return queueView.getQueueSize() == 1;
1:             }
1:         }));
1: 
1:         // Now try and get the message
1:         receiver.flow(1);
1:         AmqpMessage received = receiver.receive(5, TimeUnit.SECONDS);
1:         assertNotNull(received);
1:         received.accept();
1:         Long msgDeliveryTime = (Long) received.getMessageAnnotation("x-opt-delivery-time");
1:         assertNotNull(msgDeliveryTime);
1:         assertEquals(deliveryTime, msgDeliveryTime.longValue());
1: 
1:         connection.close();
1:     }
1: 
1:     @Test(timeout = 60000)
1:     public void testSendScheduledReceiveOverOpenWire() throws Exception {
1:         AmqpClient client = createAmqpClient();
0:         AmqpConnection connection = client.connect();
1:         AmqpSession session = connection.createSession();
1: 
1:         assertEquals(0, brokerService.getAdminView().getQueues().length);
1: 
1:         AmqpSender sender = session.createSender("queue://" + getTestName());
1: 
1:         // Get the Queue View early to avoid racing the delivery.
1:         assertEquals(1, brokerService.getAdminView().getQueues().length);
1:         final QueueViewMBean queueView = getProxyToQueue(getTestName());
1:         assertNotNull(queueView);
1: 
1:         AmqpMessage message = new AmqpMessage();
1:         long deliveryTime = System.currentTimeMillis() + 2000;
1:         message.setMessageAnnotation("x-opt-delivery-time", deliveryTime);
1:         message.setText("Test-Message");
1:         sender.send(message);
1:         sender.close();
1: 
1:         // Read the message
1:         readMessages(getTestName(), 1, false);
1: 
1:         connection.close();
1:     }
1: 
1:     public void readMessages(String destinationName, int count, boolean topic) throws Exception {
1:         Connection connection = createJMSConnection();
1:         connection.start();
1: 
1:         try {
1:             Session session = connection.createSession(false, Session.AUTO_ACKNOWLEDGE);
1:             Destination destination = null;
1:             if (topic) {
1:                 destination = session.createTopic(destinationName);
1:             } else {
1:                 destination = session.createQueue(destinationName);
1:             }
1: 
1:             MessageConsumer consumer = session.createConsumer(destination);
1:             for (int i = 1; i <= count; i++) {
0:                 Message received = consumer.receive(5000);
1:                 assertNotNull(received);
1:             }
1:         } finally {
1:             connection.close();
1:         }
1:     }
1: 
1:     protected JobSchedulerViewMBean getJobSchedulerMBean() throws Exception {
1:         ObjectName objectName = brokerService.getAdminView().getJMSJobScheduler();
1:         JobSchedulerViewMBean scheduler = null;
1:         if (objectName != null) {
1:             scheduler = (JobSchedulerViewMBean) brokerService.getManagementContext()
1:                 .newProxyInstance(objectName, JobSchedulerViewMBean.class, true);
1:         }
1: 
1:         return scheduler;
1:     }
1: 
1: }
============================================================================