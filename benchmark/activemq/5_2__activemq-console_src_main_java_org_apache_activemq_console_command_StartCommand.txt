4:5f1adbe: /**
1:57b4941:  * Licensed to the Apache Software Foundation (ASF) under one or more
1:57b4941:  * contributor license agreements.  See the NOTICE file distributed with
1:57b4941:  * this work for additional information regarding copyright ownership.
1:57b4941:  * The ASF licenses this file to You under the Apache License, Version 2.0
1:57b4941:  * (the "License"); you may not use this file except in compliance with
1:57b4941:  * the License.  You may obtain a copy of the License at
3:5f1adbe:  *
1:5f1adbe:  *      http://www.apache.org/licenses/LICENSE-2.0
1:5f1adbe:  *
1:a107823:  * Unless required by applicable law or agreed to in writing, software
1:a107823:  * distributed under the License is distributed on an "AS IS" BASIS,
1:a107823:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:a107823:  * See the License for the specific language governing permissions and
1:a107823:  * limitations under the License.
4:5f1adbe:  */
7:5f1adbe: 
1:a107823: package org.apache.activemq.console.command;
1:5f1adbe: 
1:5f1adbe: import java.net.URI;
1:5f1adbe: import java.util.List;
1:4a16c1f: import java.util.concurrent.CountDownLatch;
1:5f1adbe: 
1:a107823: import org.apache.activemq.broker.BrokerFactory;
1:a107823: import org.apache.activemq.broker.BrokerService;
1:5f1adbe: 
1:a107823: public class StartCommand extends AbstractCommand {
1:5f1adbe: 
1:5f1adbe:     public static final String DEFAULT_CONFIG_URI = "xbean:activemq.xml";
1:5f1adbe: 
1:a107823:     protected String[] helpFile = new String[] {
1:a107823:         "Task Usage: Main start [start-options] [uri]",
1:a107823:         "Description: Creates and starts a broker using a configuration file, or a broker URI.",
1:a107823:         "",
1:a107823:         "Start Options:",
1:a107823:         "    -D<name>=<value>      Define a system property.",
1:5f1adbe:         "    --version             Display the version information.", 
1:a107823:         "    -h,-?,--help          Display the start broker help information.",
1:a107823:         "",
1:a107823:         "URI:",
1:a107823:         "",
1:a107823:         "    XBean based broker configuration:",
1:a107823:         "",
1:a107823:         "        Example: Main xbean:file:activemq.xml",
1:a107823:         "            Loads the xbean configuration file from the current working directory",
1:a107823:         "        Example: Main xbean:activemq.xml",
1:a107823:         "            Loads the xbean configuration file from the classpath",
1:a107823:         "",
1:a107823:         "    URI Parameter based broker configuration:",
1:a107823:         "",
1:a107823:         "        Example: Main broker:(tcp://localhost:61616, tcp://localhost:5000)?useJmx=true",
1:a107823:         "            Configures the broker with 2 transport connectors and jmx enabled",
1:a107823:         "        Example: Main broker:(tcp://localhost:61616, network:tcp://localhost:5000)?persistent=false",
1:a107823:         "            Configures the broker with 1 transport connector, and 1 network connector and persistence disabled",
1:a107823:         ""
1:5f1adbe:     };
1:b4f65ba: 
1:60646c9:     @Override
1:60646c9:     public String getName() {
1:60646c9:         return "start";
1:60646c9:     }
1:60646c9: 
1:60646c9:     @Override
1:60646c9:     public String getOneLineDescription() {
1:60646c9:         return "Creates and starts a broker using a configuration file, or a broker URI.";
1:60646c9:     }
1:60646c9: 
1:5f1adbe:     /**
1:5f1adbe:      * The default task to start a broker or a group of brokers
1:5f1adbe:      * 
1:5f1adbe:      * @param brokerURIs
1:5f1adbe:      */
1:5f1adbe:     protected void runTask(List<String> brokerURIs) throws Exception {
1:4a16c1f:         URI configURI;
1:5f1adbe: 
1:4a16c1f:         while( true ) {
1:4a16c1f:             final BrokerService broker;
1:4a16c1f:             try {
1:4a16c1f:                 // If no config uri, use default setting
1:4a16c1f:                 if (brokerURIs.isEmpty()) {
1:4a16c1f:                     configURI = new URI(DEFAULT_CONFIG_URI);
1:4a16c1f:                 } else {
1:4a16c1f:                     configURI = new URI(brokerURIs.get(0));
12:5f1adbe:                 }
1:4a16c1f: 
1:4a16c1f:                 System.out.println("Loading message broker from: " + configURI);
1:4a16c1f:                 broker = BrokerFactory.createBroker(configURI);
1:4a16c1f:                 broker.start();
1:4a16c1f: 
1:4a16c1f:             } catch (Exception e) {
1:4a16c1f:                 context.printException(new RuntimeException("Failed to execute start task. Reason: " + e, e));
1:4a16c1f:                 throw e;
1:5f1adbe:             }
1:b4f65ba: 
1:4a16c1f:             if (!broker.waitUntilStarted()) {
1:4a16c1f:                 throw new Exception(broker.getStartException());
1:4a16c1f:             }
1:5f1adbe: 
1:4a16c1f:             // The broker started up fine.  Now lets wait for it to stop...
1:4a16c1f:             final CountDownLatch shutdownLatch = new CountDownLatch(1);
1:4a16c1f:             final Thread jvmShutdownHook = new Thread() {
1:4a16c1f:                 public void run() {
1:b4f65ba:                     try {
1:b4f65ba:                         broker.stop();
1:b4f65ba:                     } catch (Exception e) {
1:b4f65ba:                     }
1:b4f65ba:                 }
1:4a16c1f:             };
1:4a16c1f: 
1:4a16c1f:             Runtime.getRuntime().addShutdownHook(jvmShutdownHook);
1:4a16c1f:             broker.addShutdownHook(new Runnable() {
1:b4f65ba:                 public void run() {
1:4a16c1f:                     shutdownLatch.countDown();
1:b4f65ba:                 }
1:b4f65ba:             });
1:b4f65ba: 
1:4a16c1f:             // The broker has stopped..
1:4a16c1f:             shutdownLatch.await();
1:e0f2dc9:             try {
1:e0f2dc9:                 Runtime.getRuntime().removeShutdownHook(jvmShutdownHook);
1:e0f2dc9:             } catch (Throwable e) {
1:e0f2dc9:                 // may already be shutdown in progress so ignore
1:e0f2dc9:             }
1:e0f2dc9: 
1:4a16c1f:             if( !broker.isRestartRequested() ) {
1:4a16c1f:                 break;
1:b4f65ba:             }
1:4a16c1f:             System.out.println("Restarting broker");
1:b4f65ba:         }
1:5f1adbe:     }
1:5f1adbe: 
1:5f1adbe:     /**
1:5f1adbe:      * Print the help messages for the browse command
1:5f1adbe:      */
1:5f1adbe:     protected void printHelp() {
1:54eb93e:         context.printHelp(helpFile);
1:5f1adbe:     }
1:5f1adbe: 
1:5f1adbe: }
============================================================================
author:Claus Ibsen
-------------------------------------------------------------------------------
commit:e0f2dc9
/////////////////////////////////////////////////////////////////////////
1:             try {
1:                 Runtime.getRuntime().removeShutdownHook(jvmShutdownHook);
1:             } catch (Throwable e) {
1:                 // may already be shutdown in progress so ignore
1:             }
1: 
author:Hiram R. Chirino
-------------------------------------------------------------------------------
commit:4a16c1f
/////////////////////////////////////////////////////////////////////////
1: import java.util.concurrent.CountDownLatch;
/////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////
1:         URI configURI;
1:         while( true ) {
1:             final BrokerService broker;
1:             try {
1:                 // If no config uri, use default setting
1:                 if (brokerURIs.isEmpty()) {
1:                     configURI = new URI(DEFAULT_CONFIG_URI);
1:                 } else {
1:                     configURI = new URI(brokerURIs.get(0));
1: 
1:                 System.out.println("Loading message broker from: " + configURI);
1:                 broker = BrokerFactory.createBroker(configURI);
1:                 broker.start();
1: 
1:             } catch (Exception e) {
1:                 context.printException(new RuntimeException("Failed to execute start task. Reason: " + e, e));
1:                 throw e;
1:             if (!broker.waitUntilStarted()) {
1:                 throw new Exception(broker.getStartException());
1:             }
1:             // The broker started up fine.  Now lets wait for it to stop...
1:             final CountDownLatch shutdownLatch = new CountDownLatch(1);
1:             final Thread jvmShutdownHook = new Thread() {
1:                 public void run() {
1:             };
1: 
1:             Runtime.getRuntime().addShutdownHook(jvmShutdownHook);
1:             broker.addShutdownHook(new Runnable() {
1:                     shutdownLatch.countDown();
1:             // The broker has stopped..
1:             shutdownLatch.await();
0:             Runtime.getRuntime().removeShutdownHook(jvmShutdownHook);
1:             if( !broker.isRestartRequested() ) {
1:                 break;
1:             System.out.println("Restarting broker");
commit:60646c9
/////////////////////////////////////////////////////////////////////////
1:     @Override
1:     public String getName() {
1:         return "start";
1:     }
1: 
1:     @Override
1:     public String getOneLineDescription() {
1:         return "Creates and starts a broker using a configuration file, or a broker URI.";
1:     }
1: 
commit:b4f65ba
/////////////////////////////////////////////////////////////////////////
0: import java.util.concurrent.atomic.AtomicInteger;
/////////////////////////////////////////////////////////////////////////
1:         
0:         // The broker start up fine.  If this unblocks it's cause they were stopped
0:         // and this would occur because of an internal error (like the DB going offline)
0:         waitForShutdown();
/////////////////////////////////////////////////////////////////////////
1:         
0:                 for (Iterator<BrokerService> i = brokers.iterator(); i.hasNext();) {
1:                     try {
0:                         BrokerService broker = i.next();
1:                         broker.stop();
1:                     } catch (Exception e) {
1:                     }
1:         
0:         final AtomicInteger brokerCounter = new AtomicInteger(brokers.size());
0:         for (BrokerService bs : brokers) {
0:             bs.addShutdownHook(new Runnable() {
1:                 public void run() {
0:                     // When the last broker lets us know he is closed....
0:                     if( brokerCounter.decrementAndGet() == 0 ) {
0:                         synchronized (shutdown) {
0:                             shutdown[0] = true;
0:                             shutdown.notify();
1:                         }
1:                     }
1:                 }
1:             });
1:         }
/////////////////////////////////////////////////////////////////////////
commit:54eb93e
/////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////
0:                         context.printException(e);
/////////////////////////////////////////////////////////////////////////
0:             context.printException(new RuntimeException("Failed to execute start task. Reason: " + e, e));
/////////////////////////////////////////////////////////////////////////
1:         context.printHelp(helpFile);
commit:5f1adbe
/////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////
1:  *      http://www.apache.org/licenses/LICENSE-2.0
/////////////////////////////////////////////////////////////////////////
1: import java.net.URI;
0: import java.net.URISyntaxException;
0: import java.util.ArrayList;
0: import java.util.Iterator;
1: import java.util.List;
1: 
1:     public static final String DEFAULT_CONFIG_URI = "xbean:activemq.xml";
/////////////////////////////////////////////////////////////////////////
1:         "    --version             Display the version information.", 
/////////////////////////////////////////////////////////////////////////
1: 
0:     private URI configURI;
0:     private List<BrokerService> brokers = new ArrayList<BrokerService>(5);
1: 
1:     /**
1:      * The default task to start a broker or a group of brokers
1:      * 
1:      * @param brokerURIs
1:      */
1:     protected void runTask(List<String> brokerURIs) throws Exception {
0:         try {
0:             // If no config uri, use default setting
0:             if (brokerURIs.isEmpty()) {
0:                 setConfigUri(new URI(DEFAULT_CONFIG_URI));
0:                 startBroker(getConfigUri());
1: 
0:                 // Set configuration data, if available, which in this case
0:                 // would be the config URI
0:             } else {
0:                 String strConfigURI;
1: 
0:                 while (!brokerURIs.isEmpty()) {
0:                     strConfigURI = (String)brokerURIs.remove(0);
1: 
0:                     try {
0:                         setConfigUri(new URI(strConfigURI));
0:                     } catch (URISyntaxException e) {
0:                         GlobalWriter.printException(e);
0:                         return;
1:                     }
1: 
0:                     startBroker(getConfigUri());
1:                 }
1:             }
1: 
0:             // Prevent the main thread from exiting unless it is terminated
0:             // elsewhere
0:             waitForShutdown();
0:         } catch (Exception e) {
0:             GlobalWriter.printException(new RuntimeException("Failed to execute start task. Reason: " + e, e));
0:             throw new Exception(e);
1:         }
1:     }
1: 
1:     /**
0:      * Create and run a broker specified by the given configuration URI
1:      * 
0:      * @param configURI
0:      * @throws Exception
1:      */
0:     public void startBroker(URI configURI) throws Exception {
0:         System.out.println("Loading message broker from: " + configURI);
0:         BrokerService broker = BrokerFactory.createBroker(configURI);
0:         brokers.add(broker);
0:         broker.start();
1:     }
1: 
1:     /**
0:      * Wait for a shutdown invocation elsewhere
1:      * 
0:      * @throws Exception
1:      */
0:     protected void waitForShutdown() throws Exception {
0:         final boolean[] shutdown = new boolean[] {
0:             false
1:         };
0:         Runtime.getRuntime().addShutdownHook(new Thread() {
0:             public void run() {
0:                 synchronized (shutdown) {
0:                     shutdown[0] = true;
0:                     shutdown.notify();
1:                 }
1:             }
0:         });
1: 
0:         // Wait for any shutdown event
0:         synchronized (shutdown) {
0:             while (!shutdown[0]) {
0:                 try {
0:                     shutdown.wait();
0:                 } catch (InterruptedException e) {
1:                 }
1:             }
1:         }
1: 
0:         // Stop each broker
0:         for (Iterator<BrokerService> i = brokers.iterator(); i.hasNext();) {
0:             BrokerService broker = i.next();
0:             broker.stop();
1:         }
1:     }
1: 
1:     /**
0:      * Sets the current configuration URI used by the start task
1:      * 
0:      * @param uri
1:      */
0:     public void setConfigUri(URI uri) {
0:         configURI = uri;
1:     }
1: 
1:     /**
0:      * Gets the current configuration URI used by the start task
1:      * 
0:      * @return current configuration URI
1:      */
0:     public URI getConfigUri() {
0:         return configURI;
1:     }
1: 
1:     /**
1:      * Print the help messages for the browse command
1:      */
1:     protected void printHelp() {
0:         GlobalWriter.printHelp(helpFile);
1:     }
1: 
commit:57b4941
/////////////////////////////////////////////////////////////////////////
1:  * Licensed to the Apache Software Foundation (ASF) under one or more
1:  * contributor license agreements.  See the NOTICE file distributed with
1:  * this work for additional information regarding copyright ownership.
1:  * The ASF licenses this file to You under the Apache License, Version 2.0
1:  * (the "License"); you may not use this file except in compliance with
1:  * the License.  You may obtain a copy of the License at
commit:a107823
/////////////////////////////////////////////////////////////////////////
0: /**
0:  *
0:  * Copyright 2005-2006 The Apache Software Foundation
0:  *
0:  * Licensed under the Apache License, Version 2.0 (the "License");
0:  * you may not use this file except in compliance with the License.
0:  * You may obtain a copy of the License at
0:  *
0:  * http://www.apache.org/licenses/LICENSE-2.0
0:  *
1:  * Unless required by applicable law or agreed to in writing, software
1:  * distributed under the License is distributed on an "AS IS" BASIS,
1:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:  * See the License for the specific language governing permissions and
1:  * limitations under the License.
0:  */
0: 
1: package org.apache.activemq.console.command;
0: 
1: import org.apache.activemq.broker.BrokerFactory;
1: import org.apache.activemq.broker.BrokerService;
0: import org.apache.activemq.console.formatter.GlobalWriter;
0: 
0: import java.util.List;
0: import java.util.ArrayList;
0: import java.util.Iterator;
0: import java.net.URI;
0: import java.net.URISyntaxException;
0: 
1: public class StartCommand extends AbstractCommand {
0: 
0:     public static final String DEFAULT_CONFIG_URI   = "xbean:activemq.xml";
0: 
0:     private URI  configURI;
0:     private List brokers = new ArrayList(5);
0: 
0:     /**
0:      * The default task to start a broker or a group of brokers
0:      * @param brokerURIs
0:      */
0:     protected void runTask(List brokerURIs) throws Exception {
0:         try {
0:             // If no config uri, use default setting
0:             if (brokerURIs.isEmpty()) {
0:                 setConfigUri(new URI(DEFAULT_CONFIG_URI));
0:                 startBroker(getConfigUri());
0: 
0:             // Set configuration data, if available, which in this case would be the config URI
0:             } else {
0:                 String strConfigURI;
0: 
0:                 while (!brokerURIs.isEmpty()) {
0:                     strConfigURI = (String)brokerURIs.remove(0);
0: 
0:                     try {
0:                         setConfigUri(new URI(strConfigURI));
0:                     } catch (URISyntaxException e) {
0:                         GlobalWriter.printException(e);
0:                         return;
0:                     }
0: 
0:                     startBroker(getConfigUri());
0:                 }
0:             }
0: 
0:             // Prevent the main thread from exiting unless it is terminated elsewhere
0:             waitForShutdown();
0:         } catch (Exception e) {
0:             GlobalWriter.printException(new RuntimeException("Failed to execute start task. Reason: " + e));
0:             throw new Exception(e);
0:         }
0:     }
0: 
0:     /**
0:      * Create and run a broker specified by the given configuration URI
0:      * @param configURI
0:      * @throws Exception
0:      */
0:     public void startBroker(URI configURI) throws Exception {
0:         System.out.println("Loading message broker from: " + configURI);
0:         BrokerService broker = BrokerFactory.createBroker(configURI);
0:         brokers.add(broker);
0: 
0:         broker.start();
0:     }
0: 
0:     /**
0:      * Wait for a shutdown invocation elsewhere
0:      * @throws Exception
0:      */
0:     protected void waitForShutdown() throws Exception {
0:         final boolean[] shutdown = new boolean[] {false};
0:         Runtime.getRuntime().addShutdownHook(new Thread() {
0:             public void run() {
0:                 synchronized(shutdown) {
0:                     shutdown[0]=true;
0:                     shutdown.notify();
0:                 }
0:             }
0:         });
0: 
0:         // Wait for any shutdown event
0:         synchronized(shutdown) {
0:             while( !shutdown[0] ) {
0:                 try {
0:                     shutdown.wait();
0:                 } catch (InterruptedException e) {
0:                 }
0:             }
0:         }
0: 
0:         // Stop each broker
0:         for (Iterator i=brokers.iterator(); i.hasNext();) {
0:             BrokerService broker = (BrokerService)i.next();
0:             broker.stop();
0:         }
0:     }
0: 
0:     /**
0:      * Sets the current configuration URI used by the start task
0:      * @param uri
0:      */
0:     public void setConfigUri(URI uri) {
0:         configURI = uri;
0:     }
0: 
0:     /**
0:      * Gets the current configuration URI used by the start task
0:      * @return current configuration URI
0:      */
0:     public URI getConfigUri() {
0:         return configURI;
0:     }
0: 
0:     /**
0:      * Print the help messages for the browse command
0:      */
0:     protected void printHelp() {
0:         GlobalWriter.printHelp(helpFile);
0:     }
0: 
1:     protected String[] helpFile = new String[] {
1:         "Task Usage: Main start [start-options] [uri]",
1:         "Description: Creates and starts a broker using a configuration file, or a broker URI.",
1:         "",
1:         "Start Options:",
1:         "    -D<name>=<value>      Define a system property.",
0:         "    --version             Display the version information.",
1:         "    -h,-?,--help          Display the start broker help information.",
1:         "",
1:         "URI:",
1:         "",
1:         "    XBean based broker configuration:",
1:         "",
1:         "        Example: Main xbean:file:activemq.xml",
1:         "            Loads the xbean configuration file from the current working directory",
1:         "        Example: Main xbean:activemq.xml",
1:         "            Loads the xbean configuration file from the classpath",
1:         "",
1:         "    URI Parameter based broker configuration:",
1:         "",
1:         "        Example: Main broker:(tcp://localhost:61616, tcp://localhost:5000)?useJmx=true",
1:         "            Configures the broker with 2 transport connectors and jmx enabled",
1:         "        Example: Main broker:(tcp://localhost:61616, network:tcp://localhost:5000)?persistent=false",
1:         "            Configures the broker with 1 transport connector, and 1 network connector and persistence disabled",
1:         ""
0:     };
0: }
commit:982a119
/////////////////////////////////////////////////////////////////////////
0: public class StartCommand extends AbstractCommand {
/////////////////////////////////////////////////////////////////////////
0:     protected void execute(List brokerURIs) {
author:Bosanac Dejan
-------------------------------------------------------------------------------
commit:ed58e9a
/////////////////////////////////////////////////////////////////////////
0:             throw new Exception(broker.getStartException());
commit:7f89b33
/////////////////////////////////////////////////////////////////////////
0:         if (!broker.waitUntilStarted()) {
0:             throw broker.getStartException();
0:         }
author:James Strachan
-------------------------------------------------------------------------------
commit:0803e63
/////////////////////////////////////////////////////////////////////////
0:             GlobalWriter.printException(new RuntimeException("Failed to execute start task. Reason: " + e, e));
author:Adrian T. Co
-------------------------------------------------------------------------------
commit:7fa8660
/////////////////////////////////////////////////////////////////////////
0: package org.apache.activemq.console.command;
0: import org.apache.activemq.console.formatter.GlobalWriter;
commit:4b8822f
/////////////////////////////////////////////////////////////////////////
0: package org.apache.activemq.broker.console.command;
0: import org.apache.activemq.broker.console.formatter.GlobalWriter;
/////////////////////////////////////////////////////////////////////////
0:     protected void runTask(List brokerURIs) throws Exception {
/////////////////////////////////////////////////////////////////////////
0:                         GlobalWriter.printException(e);
/////////////////////////////////////////////////////////////////////////
0:         } catch (Exception e) {
0:             GlobalWriter.printException(new RuntimeException("Failed to execute start task. Reason: " + e));
0:             throw new Exception(e);
/////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////
0: 
0:     /**
0:      * Print the help messages for the browse command
0:      */
0:     protected void printHelp() {
0:         GlobalWriter.printHelp(helpFile);
0:     }
0: 
0:     protected String[] helpFile = new String[] {
0:         "Task Usage: Main start [start-options] [uri]",
0:         "Description: Creates and starts a broker using a configuration file, or a broker URI.",
0:         "",
0:         "Start Options:",
0:         "    -D<name>=<value>      Define a system property.",
0:         "    --version             Display the version information.",
0:         "    -h,-?,--help          Display the start broker help information.",
0:         "",
0:         "URI:",
0:         "",
0:         "    XBean based broker configuration:",
0:         "",
0:         "        Example: Main xbean:file:activemq.xml",
0:         "            Loads the xbean configuration file from the current working directory",
0:         "        Example: Main xbean:activemq.xml",
0:         "            Loads the xbean configuration file from the classpath",
0:         "",
0:         "    URI Parameter based broker configuration:",
0:         "",
0:         "        Example: Main broker:(tcp://localhost:61616, tcp://localhost:5000)?useJmx=true",
0:         "            Configures the broker with 2 transport connectors and jmx enabled",
0:         "        Example: Main broker:(tcp://localhost:61616, network:tcp://localhost:5000)?persistent=false",
0:         "            Configures the broker with 1 transport connector, and 1 network connector and persistence disabled",
0:         ""
0:     };
commit:70c2d88
/////////////////////////////////////////////////////////////////////////
0: /**
0:  *
0:  * Copyright 2005-2006 The Apache Software Foundation
0:  *
0:  * Licensed under the Apache License, Version 2.0 (the "License");
0:  * you may not use this file except in compliance with the License.
0:  * You may obtain a copy of the License at
0:  *
0:  * http://www.apache.org/licenses/LICENSE-2.0
0:  *
0:  * Unless required by applicable law or agreed to in writing, software
0:  * distributed under the License is distributed on an "AS IS" BASIS,
0:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
0:  * See the License for the specific language governing permissions and
0:  * limitations under the License.
0:  */
0: 
0: package org.apache.activemq.broker.console;
0: 
0: import org.apache.activemq.broker.BrokerFactory;
0: import org.apache.activemq.broker.BrokerService;
0: 
0: import java.util.List;
0: import java.util.ArrayList;
0: import java.util.Iterator;
0: import java.net.URI;
0: import java.net.URISyntaxException;
0: 
0: public class StartTask extends AbstractTask {
0: 
0:     public static final String DEFAULT_CONFIG_URI   = "xbean:activemq.xml";
0: 
0:     private URI  configURI;
0:     private List brokers = new ArrayList(5);
0: 
0:     /**
0:      * The default task to start a broker or a group of brokers
0:      * @param brokerURIs
0:      */
0:     protected void startTask(List brokerURIs) {
0:         try {
0:             // If no config uri, use default setting
0:             if (brokerURIs.isEmpty()) {
0:                 setConfigUri(new URI(DEFAULT_CONFIG_URI));
0:                 startBroker(getConfigUri());
0: 
0:             // Set configuration data, if available, which in this case would be the config URI
0:             } else {
0:                 String strConfigURI;
0: 
0:                 while (!brokerURIs.isEmpty()) {
0:                     strConfigURI = (String)brokerURIs.remove(0);
0: 
0:                     try {
0:                         setConfigUri(new URI(strConfigURI));
0:                     } catch (URISyntaxException e) {
0:                         printError("Invalid broker configuration URI: " + strConfigURI + ", reason: " + e.getMessage());
0:                         return;
0:                     }
0: 
0:                     startBroker(getConfigUri());
0:                 }
0:             }
0: 
0:             // Prevent the main thread from exiting unless it is terminated elsewhere
0:             waitForShutdown();
0:         } catch (Throwable e) {
0:             System.out.println("Failed to execute start task. Reason: " + e);
0:         }
0:     }
0: 
0:     /**
0:      * Create and run a broker specified by the given configuration URI
0:      * @param configURI
0:      * @throws Exception
0:      */
0:     public void startBroker(URI configURI) throws Exception {
0:         System.out.println("Loading message broker from: " + configURI);
0:         BrokerService broker = BrokerFactory.createBroker(configURI);
0:         brokers.add(broker);
0: 
0:         broker.start();
0:     }
0: 
0:     /**
0:      * Wait for a shutdown invocation elsewhere
0:      * @throws Exception
0:      */
0:     protected void waitForShutdown() throws Exception {
0:         final boolean[] shutdown = new boolean[] {false};
0:         Runtime.getRuntime().addShutdownHook(new Thread() {
0:             public void run() {
0:                 synchronized(shutdown) {
0:                     shutdown[0]=true;
0:                     shutdown.notify();
0:                 }
0:             }
0:         });
0: 
0:         // Wait for any shutdown event
0:         synchronized(shutdown) {
0:             while( !shutdown[0] ) {
0:                 try {
0:                     shutdown.wait();
0:                 } catch (InterruptedException e) {
0:                 }
0:             }
0:         }
0: 
0:         // Stop each broker
0:         for (Iterator i=brokers.iterator(); i.hasNext();) {
0:             BrokerService broker = (BrokerService)i.next();
0:             broker.stop();
0:         }
0:     }
0: 
0:     /**
0:      * Prints the help for the start broker task
0:      */
0:     protected void printHelp() {
0:         System.out.println("Task Usage: Main start [start-options] [uri]");
0:         System.out.println("Description: Creates and starts a broker using a configuration file, or a broker URI.");
0:         System.out.println("");
0:         System.out.println("Start Options:");
0:         System.out.println("    --extdir <dir>        Add the jar files in the directory to the classpath.");
0:         System.out.println("    -D<name>=<value>      Define a system property.");
0:         System.out.println("    --version             Display the version information.");
0:         System.out.println("    -h,-?,--help          Display the start broker help information.");
0:         System.out.println("");
0:         System.out.println("URI:");
0:         System.out.println("");
0:         System.out.println("    XBean based broker configuration:");
0:         System.out.println("");
0:         System.out.println("        Example: Main xbean:file:activemq.xml");
0:         System.out.println("            Loads the xbean configuration file from the current working directory");
0:         System.out.println("        Example: Main xbean:activemq.xml");
0:         System.out.println("            Loads the xbean configuration file from the classpath");
0:         System.out.println("");
0:         System.out.println("    URI Parameter based broker configuration:");
0:         System.out.println("");
0:         System.out.println("        Example: Main broker:(tcp://localhost:61616, tcp://localhost:5000)?useJmx=true");
0:         System.out.println("            Configures the broker with 2 transport connectors and jmx enabled");
0:         System.out.println("        Example: Main broker:(tcp://localhost:61616, network:tcp://localhost:5000)?persistent=false");
0:         System.out.println("            Configures the broker with 1 transport connector, and 1 network connector and persistence disabled");
0:         System.out.println("");
0:     }
0: 
0:     /**
0:      * Sets the current configuration URI used by the start task
0:      * @param uri
0:      */
0:     public void setConfigUri(URI uri) {
0:         configURI = uri;
0:     }
0: 
0:     /**
0:      * Gets the current configuration URI used by the start task
0:      * @return current configuration URI
0:      */
0:     public URI getConfigUri() {
0:         return configURI;
0:     }
0: }
============================================================================