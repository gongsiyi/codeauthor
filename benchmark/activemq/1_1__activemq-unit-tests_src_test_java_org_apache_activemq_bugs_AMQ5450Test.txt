1:8533a92: /**
1:8533a92:  * Licensed to the Apache Software Foundation (ASF) under one or more
1:8533a92:  * contributor license agreements.  See the NOTICE file distributed with
1:8533a92:  * this work for additional information regarding copyright ownership.
1:8533a92:  * The ASF licenses this file to You under the Apache License, Version 2.0
1:8533a92:  * (the "License"); you may not use this file except in compliance with
1:8533a92:  * the License.  You may obtain a copy of the License at
1:8533a92:  *
1:8533a92:  *      http://www.apache.org/licenses/LICENSE-2.0
1:8533a92:  *
1:8533a92:  * Unless required by applicable law or agreed to in writing, software
1:8533a92:  * distributed under the License is distributed on an "AS IS" BASIS,
1:8533a92:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:8533a92:  * See the License for the specific language governing permissions and
1:8533a92:  * limitations under the License.
1:8533a92:  */
1:8533a92: package org.apache.activemq.bugs;
1:8533a92: 
1:8533a92: import java.io.IOException;
1:8533a92: import java.util.ArrayList;
1:8533a92: import java.util.HashMap;
1:8533a92: import javax.jms.Connection;
1:8533a92: import javax.jms.JMSException;
1:8533a92: import javax.jms.MessageProducer;
1:8533a92: import javax.jms.Session;
1:8533a92: import org.apache.activemq.ActiveMQConnectionFactory;
1:8533a92: import org.apache.activemq.broker.BrokerService;
1:8533a92: import org.apache.activemq.broker.region.Destination;
1:8533a92: import org.apache.activemq.command.ActiveMQQueue;
1:8533a92: import org.apache.activemq.store.PersistenceAdapter;
1:8533a92: import org.apache.activemq.store.kahadb.FilteredKahaDBPersistenceAdapter;
1:8533a92: import org.apache.activemq.store.kahadb.KahaDBPersistenceAdapter;
1:8533a92: import org.apache.activemq.store.kahadb.MultiKahaDBPersistenceAdapter;
1:8533a92: import org.junit.After;
1:8533a92: import org.junit.Test;
1:8533a92: import org.slf4j.Logger;
1:8533a92: import org.slf4j.LoggerFactory;
1:8533a92: 
1:8533a92: 
1:8533a92: import static org.junit.Assert.*;
1:8533a92: 
1:8533a92: public class AMQ5450Test {
1:8533a92: 
1:8533a92:     static final Logger LOG = LoggerFactory.getLogger(AMQ5450Test.class);
1:8533a92:     private final static int maxFileLength = 1024*1024*32;
1:8533a92: 
1:8533a92:     private final static String POSTFIX_DESTINATION_NAME = ".dlq";
1:8533a92: 
1:8533a92:     private final static String DESTINATION_NAME = "test" + POSTFIX_DESTINATION_NAME;
1:8533a92:     private final static String DESTINATION_NAME_2 = "2.test" + POSTFIX_DESTINATION_NAME;
1:8533a92:     private final static String DESTINATION_NAME_3 = "3.2.test" + POSTFIX_DESTINATION_NAME;
1:8533a92: 
1:8533a92:     private final static String[] DESTS = new String[] {DESTINATION_NAME, DESTINATION_NAME_2, DESTINATION_NAME_3, DESTINATION_NAME, DESTINATION_NAME};
1:8533a92: 
1:8533a92: 
1:8533a92:     BrokerService broker;
1:8533a92:     private HashMap<Object, PersistenceAdapter> adapters = new HashMap();
1:8533a92: 
1:8533a92:     @After
1:8533a92:     public void tearDown() throws Exception {
1:8533a92:         broker.stop();
1:8533a92:     }
1:8533a92: 
1:8533a92:     protected BrokerService createAndStartBroker(PersistenceAdapter persistenceAdapter) throws Exception {
1:8533a92:         BrokerService broker = new BrokerService();
1:8533a92:         broker.setUseJmx(false);
1:8533a92:         broker.setBrokerName("localhost");
1:8533a92:         broker.setPersistenceAdapter(persistenceAdapter);
1:8533a92:         broker.setDeleteAllMessagesOnStartup(true);
1:8533a92:         broker.start();
1:8533a92:         broker.waitUntilStarted();
1:8533a92:         return broker;
1:8533a92:     }
1:8533a92: 
1:8533a92:     @Test
1:8533a92:     public void testPostFixMatch() throws Exception {
1:8533a92:         doTestPostFixMatch(false);
1:8533a92:     }
1:8533a92: 
1:8533a92:     @Test
1:8533a92:     public void testPostFixCompositeMatch() throws Exception {
1:8533a92:         doTestPostFixMatch(true);
1:8533a92:     }
1:8533a92: 
1:8533a92:     private void doTestPostFixMatch(boolean useComposite) throws Exception {
1:8533a92:         prepareBrokerWithMultiStore(useComposite);
1:8533a92: 
1:8533a92:         sendMessage(DESTINATION_NAME, "test 1");
1:8533a92:         sendMessage(DESTINATION_NAME_2, "test 1");
1:8533a92:         sendMessage(DESTINATION_NAME_3, "test 1");
1:8533a92: 
1:8533a92:         assertNotNull(broker.getDestination(new ActiveMQQueue(DESTINATION_NAME)));
1:8533a92:         assertNotNull(broker.getDestination(new ActiveMQQueue(DESTINATION_NAME_2)));
1:8533a92:         assertNotNull(broker.getDestination(new ActiveMQQueue(DESTINATION_NAME_3)));
1:8533a92: 
1:8533a92:         for (String dest: DESTS)  {
1:8533a92:             Destination destination2 = broker.getDestination(new ActiveMQQueue(dest));
1:8533a92:             assertNotNull(destination2);
1:8533a92:             assertEquals(1, destination2.getMessageStore().getMessageCount());
1:8533a92:         }
1:8533a92: 
1:8533a92:         HashMap numDests = new HashMap();
1:8533a92:         for (PersistenceAdapter pa : adapters.values()) {
1:8533a92:             numDests.put(pa.getDestinations().size(), pa);
1:8533a92:         }
1:8533a92: 
1:8533a92:         // ensure wildcard does not match any
1:8533a92:         assertTrue("0 in wildcard matcher", adapters.get(null).getDestinations().isEmpty());
1:8533a92: 
1:8533a92:         assertEquals("only two values", 2, numDests.size());
1:8533a92:         assertTrue("0 in others", numDests.containsKey(0));
1:8533a92: 
1:8533a92:         if (useComposite) {
1:8533a92:             assertTrue("3 in one", numDests.containsKey(3));
1:8533a92:         } else {
1:8533a92:             assertTrue("1 in some", numDests.containsKey(1));
1:8533a92:         }
1:8533a92: 
1:8533a92:     }
1:8533a92: 
1:8533a92:     protected KahaDBPersistenceAdapter createStore(boolean delete) throws IOException {
1:8533a92:         KahaDBPersistenceAdapter kaha = new KahaDBPersistenceAdapter();
1:8533a92:         kaha.setJournalMaxFileLength(maxFileLength);
1:8533a92:         kaha.setCleanupInterval(5000);
1:8533a92:         if (delete) {
1:8533a92:             kaha.deleteAllMessages();
1:8533a92:         }
1:8533a92:         return kaha;
1:8533a92:     }
1:8533a92: 
1:8533a92:     public void prepareBrokerWithMultiStore(boolean compositeMatch) throws Exception {
1:8533a92: 
1:8533a92:         MultiKahaDBPersistenceAdapter multiKahaDBPersistenceAdapter = new MultiKahaDBPersistenceAdapter();
1:8533a92:         multiKahaDBPersistenceAdapter.deleteAllMessages();
1:8533a92:         ArrayList<FilteredKahaDBPersistenceAdapter> adapters = new ArrayList<FilteredKahaDBPersistenceAdapter>();
1:8533a92: 
1:8533a92:         if (compositeMatch) {
1:8533a92:             StringBuffer compositeDestBuf = new StringBuffer();
1:8533a92:             for (int i=1; i<=DESTS.length;i++) {
1:8533a92:                 for (int j=0;j<i;j++) {
1:8533a92:                     compositeDestBuf.append("*");
1:8533a92:                     if ((j+1 == i)) {
1:8533a92:                         compositeDestBuf.append(POSTFIX_DESTINATION_NAME);
1:8533a92:                     } else {
1:8533a92:                         compositeDestBuf.append(".");
1:8533a92:                     }
1:8533a92:                 }
1:8533a92:                 if (! (i+1 > DESTS.length)) {
1:8533a92:                     compositeDestBuf.append(",");
1:8533a92:                 }
1:8533a92:             }
1:8533a92:             adapters.add(createFilteredKahaDBByDestinationPrefix(compositeDestBuf.toString(), true));
1:8533a92: 
1:8533a92:         } else {
1:8533a92:             // destination map does not do post fix wild card matches on paths, so we need to cover
1:8533a92:             // each path length
1:8533a92:             adapters.add(createFilteredKahaDBByDestinationPrefix("*" + POSTFIX_DESTINATION_NAME, true));
1:8533a92:             adapters.add(createFilteredKahaDBByDestinationPrefix("*.*" + POSTFIX_DESTINATION_NAME, true));
1:8533a92:             adapters.add(createFilteredKahaDBByDestinationPrefix("*.*.*" + POSTFIX_DESTINATION_NAME, true));
1:8533a92:             adapters.add(createFilteredKahaDBByDestinationPrefix("*.*.*.*" + POSTFIX_DESTINATION_NAME, true));
1:8533a92:         }
1:8533a92: 
1:8533a92:         // ensure wildcard matcher is there for other dests
1:8533a92:         adapters.add(createFilteredKahaDBByDestinationPrefix(null, true));
1:8533a92: 
1:8533a92:         multiKahaDBPersistenceAdapter.setFilteredPersistenceAdapters(adapters);
1:8533a92:         broker = createAndStartBroker(multiKahaDBPersistenceAdapter);
1:8533a92:     }
1:8533a92: 
1:8533a92: 	private FilteredKahaDBPersistenceAdapter createFilteredKahaDBByDestinationPrefix(String destinationPrefix, boolean deleteAllMessages)
1:8533a92: 			throws IOException {
1:8533a92: 		FilteredKahaDBPersistenceAdapter template = new FilteredKahaDBPersistenceAdapter();
1:8533a92:         template.setPersistenceAdapter(createStore(deleteAllMessages));
1:8533a92:         if (destinationPrefix != null) {
1:8533a92:             template.setQueue(destinationPrefix);
1:8533a92:         }
1:8533a92:         adapters.put(destinationPrefix, template.getPersistenceAdapter());
1:8533a92: 		return template;
1:8533a92: 	}
1:8533a92: 
1:8533a92: 	private void sendMessage(String destinationName, String message) throws JMSException {
1:8533a92:         ActiveMQConnectionFactory f = new ActiveMQConnectionFactory("vm://localhost");
1:8533a92:         f.setAlwaysSyncSend(true);
1:8533a92:         Connection c = f.createConnection();
1:8533a92:         c.start();
1:8533a92:         Session s = c.createSession(false, Session.AUTO_ACKNOWLEDGE);
1:8533a92:         MessageProducer producer = s.createProducer(new ActiveMQQueue(destinationName));
1:8533a92:         producer.send(s.createTextMessage(message));
1:8533a92:         producer.close();
1:8533a92:         s.close();
1:8533a92:         c.stop();
1:8533a92: 	}
1:8533a92: 
1:8533a92: }
============================================================================
author:gtully
-------------------------------------------------------------------------------
commit:8533a92
/////////////////////////////////////////////////////////////////////////
1: /**
1:  * Licensed to the Apache Software Foundation (ASF) under one or more
1:  * contributor license agreements.  See the NOTICE file distributed with
1:  * this work for additional information regarding copyright ownership.
1:  * The ASF licenses this file to You under the Apache License, Version 2.0
1:  * (the "License"); you may not use this file except in compliance with
1:  * the License.  You may obtain a copy of the License at
1:  *
1:  *      http://www.apache.org/licenses/LICENSE-2.0
1:  *
1:  * Unless required by applicable law or agreed to in writing, software
1:  * distributed under the License is distributed on an "AS IS" BASIS,
1:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:  * See the License for the specific language governing permissions and
1:  * limitations under the License.
1:  */
1: package org.apache.activemq.bugs;
1: 
1: import java.io.IOException;
1: import java.util.ArrayList;
1: import java.util.HashMap;
1: import javax.jms.Connection;
1: import javax.jms.JMSException;
1: import javax.jms.MessageProducer;
1: import javax.jms.Session;
1: import org.apache.activemq.ActiveMQConnectionFactory;
1: import org.apache.activemq.broker.BrokerService;
1: import org.apache.activemq.broker.region.Destination;
1: import org.apache.activemq.command.ActiveMQQueue;
1: import org.apache.activemq.store.PersistenceAdapter;
1: import org.apache.activemq.store.kahadb.FilteredKahaDBPersistenceAdapter;
1: import org.apache.activemq.store.kahadb.KahaDBPersistenceAdapter;
1: import org.apache.activemq.store.kahadb.MultiKahaDBPersistenceAdapter;
1: import org.junit.After;
1: import org.junit.Test;
1: import org.slf4j.Logger;
1: import org.slf4j.LoggerFactory;
1: 
1: 
1: import static org.junit.Assert.*;
1: 
1: public class AMQ5450Test {
1: 
1:     static final Logger LOG = LoggerFactory.getLogger(AMQ5450Test.class);
1:     private final static int maxFileLength = 1024*1024*32;
1: 
1:     private final static String POSTFIX_DESTINATION_NAME = ".dlq";
1: 
1:     private final static String DESTINATION_NAME = "test" + POSTFIX_DESTINATION_NAME;
1:     private final static String DESTINATION_NAME_2 = "2.test" + POSTFIX_DESTINATION_NAME;
1:     private final static String DESTINATION_NAME_3 = "3.2.test" + POSTFIX_DESTINATION_NAME;
1: 
1:     private final static String[] DESTS = new String[] {DESTINATION_NAME, DESTINATION_NAME_2, DESTINATION_NAME_3, DESTINATION_NAME, DESTINATION_NAME};
1: 
1: 
1:     BrokerService broker;
1:     private HashMap<Object, PersistenceAdapter> adapters = new HashMap();
1: 
1:     @After
1:     public void tearDown() throws Exception {
1:         broker.stop();
1:     }
1: 
1:     protected BrokerService createAndStartBroker(PersistenceAdapter persistenceAdapter) throws Exception {
1:         BrokerService broker = new BrokerService();
1:         broker.setUseJmx(false);
1:         broker.setBrokerName("localhost");
1:         broker.setPersistenceAdapter(persistenceAdapter);
1:         broker.setDeleteAllMessagesOnStartup(true);
1:         broker.start();
1:         broker.waitUntilStarted();
1:         return broker;
1:     }
1: 
1:     @Test
1:     public void testPostFixMatch() throws Exception {
1:         doTestPostFixMatch(false);
1:     }
1: 
1:     @Test
1:     public void testPostFixCompositeMatch() throws Exception {
1:         doTestPostFixMatch(true);
1:     }
1: 
1:     private void doTestPostFixMatch(boolean useComposite) throws Exception {
1:         prepareBrokerWithMultiStore(useComposite);
1: 
1:         sendMessage(DESTINATION_NAME, "test 1");
1:         sendMessage(DESTINATION_NAME_2, "test 1");
1:         sendMessage(DESTINATION_NAME_3, "test 1");
1: 
1:         assertNotNull(broker.getDestination(new ActiveMQQueue(DESTINATION_NAME)));
1:         assertNotNull(broker.getDestination(new ActiveMQQueue(DESTINATION_NAME_2)));
1:         assertNotNull(broker.getDestination(new ActiveMQQueue(DESTINATION_NAME_3)));
1: 
1:         for (String dest: DESTS)  {
1:             Destination destination2 = broker.getDestination(new ActiveMQQueue(dest));
1:             assertNotNull(destination2);
1:             assertEquals(1, destination2.getMessageStore().getMessageCount());
1:         }
1: 
1:         HashMap numDests = new HashMap();
1:         for (PersistenceAdapter pa : adapters.values()) {
1:             numDests.put(pa.getDestinations().size(), pa);
1:         }
1: 
1:         // ensure wildcard does not match any
1:         assertTrue("0 in wildcard matcher", adapters.get(null).getDestinations().isEmpty());
1: 
1:         assertEquals("only two values", 2, numDests.size());
1:         assertTrue("0 in others", numDests.containsKey(0));
1: 
1:         if (useComposite) {
1:             assertTrue("3 in one", numDests.containsKey(3));
1:         } else {
1:             assertTrue("1 in some", numDests.containsKey(1));
1:         }
1: 
1:     }
1: 
1:     protected KahaDBPersistenceAdapter createStore(boolean delete) throws IOException {
1:         KahaDBPersistenceAdapter kaha = new KahaDBPersistenceAdapter();
1:         kaha.setJournalMaxFileLength(maxFileLength);
1:         kaha.setCleanupInterval(5000);
1:         if (delete) {
1:             kaha.deleteAllMessages();
1:         }
1:         return kaha;
1:     }
1: 
1:     public void prepareBrokerWithMultiStore(boolean compositeMatch) throws Exception {
1: 
1:         MultiKahaDBPersistenceAdapter multiKahaDBPersistenceAdapter = new MultiKahaDBPersistenceAdapter();
1:         multiKahaDBPersistenceAdapter.deleteAllMessages();
1:         ArrayList<FilteredKahaDBPersistenceAdapter> adapters = new ArrayList<FilteredKahaDBPersistenceAdapter>();
1: 
1:         if (compositeMatch) {
1:             StringBuffer compositeDestBuf = new StringBuffer();
1:             for (int i=1; i<=DESTS.length;i++) {
1:                 for (int j=0;j<i;j++) {
1:                     compositeDestBuf.append("*");
1:                     if ((j+1 == i)) {
1:                         compositeDestBuf.append(POSTFIX_DESTINATION_NAME);
1:                     } else {
1:                         compositeDestBuf.append(".");
1:                     }
1:                 }
1:                 if (! (i+1 > DESTS.length)) {
1:                     compositeDestBuf.append(",");
1:                 }
1:             }
1:             adapters.add(createFilteredKahaDBByDestinationPrefix(compositeDestBuf.toString(), true));
1: 
1:         } else {
1:             // destination map does not do post fix wild card matches on paths, so we need to cover
1:             // each path length
1:             adapters.add(createFilteredKahaDBByDestinationPrefix("*" + POSTFIX_DESTINATION_NAME, true));
1:             adapters.add(createFilteredKahaDBByDestinationPrefix("*.*" + POSTFIX_DESTINATION_NAME, true));
1:             adapters.add(createFilteredKahaDBByDestinationPrefix("*.*.*" + POSTFIX_DESTINATION_NAME, true));
1:             adapters.add(createFilteredKahaDBByDestinationPrefix("*.*.*.*" + POSTFIX_DESTINATION_NAME, true));
1:         }
1: 
1:         // ensure wildcard matcher is there for other dests
1:         adapters.add(createFilteredKahaDBByDestinationPrefix(null, true));
1: 
1:         multiKahaDBPersistenceAdapter.setFilteredPersistenceAdapters(adapters);
1:         broker = createAndStartBroker(multiKahaDBPersistenceAdapter);
1:     }
1: 
1: 	private FilteredKahaDBPersistenceAdapter createFilteredKahaDBByDestinationPrefix(String destinationPrefix, boolean deleteAllMessages)
1: 			throws IOException {
1: 		FilteredKahaDBPersistenceAdapter template = new FilteredKahaDBPersistenceAdapter();
1:         template.setPersistenceAdapter(createStore(deleteAllMessages));
1:         if (destinationPrefix != null) {
1:             template.setQueue(destinationPrefix);
1:         }
1:         adapters.put(destinationPrefix, template.getPersistenceAdapter());
1: 		return template;
1: 	}
1: 
1: 	private void sendMessage(String destinationName, String message) throws JMSException {
1:         ActiveMQConnectionFactory f = new ActiveMQConnectionFactory("vm://localhost");
1:         f.setAlwaysSyncSend(true);
1:         Connection c = f.createConnection();
1:         c.start();
1:         Session s = c.createSession(false, Session.AUTO_ACKNOWLEDGE);
1:         MessageProducer producer = s.createProducer(new ActiveMQQueue(destinationName));
1:         producer.send(s.createTextMessage(message));
1:         producer.close();
1:         s.close();
1:         c.stop();
1: 	}
1: 
1: }
============================================================================