2:a677c21: /**
1:57b4941:  * Licensed to the Apache Software Foundation (ASF) under one or more
1:57b4941:  * contributor license agreements.  See the NOTICE file distributed with
1:57b4941:  * this work for additional information regarding copyright ownership.
1:57b4941:  * The ASF licenses this file to You under the Apache License, Version 2.0
1:57b4941:  * (the "License"); you may not use this file except in compliance with
1:57b4941:  * the License.  You may obtain a copy of the License at
1:74bed6b:  *
1:230a86c:  *      http://www.apache.org/licenses/LICENSE-2.0
1:0bbc0ac:  *
1:a677c21:  * Unless required by applicable law or agreed to in writing, software
1:a677c21:  * distributed under the License is distributed on an "AS IS" BASIS,
1:a677c21:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:a677c21:  * See the License for the specific language governing permissions and
1:a677c21:  * limitations under the License.
3:a677c21:  */
1:a677c21: package org.apache.activemq.config;
1:74bed6b: 
1:856e506: import static org.junit.Assert.assertEquals;
1:856e506: import static org.junit.Assert.assertNotNull;
1:856e506: import static org.junit.Assert.assertTrue;
1:856e506: import static org.junit.Assert.fail;
1:856e506: 
1:a677c21: import java.io.File;
1:8274f09: import java.sql.Connection;
1:8274f09: import java.sql.DatabaseMetaData;
1:8274f09: import java.sql.ResultSet;
1:a677c21: import java.util.List;
1:5d01822: 
1:74bed6b: import javax.jms.JMSException;
1:74bed6b: import javax.jms.MessageConsumer;
1:74bed6b: import javax.jms.Session;
1:74bed6b: import javax.jms.Topic;
1:8274f09: import javax.sql.DataSource;
1:5d01822: 
1:74bed6b: import org.apache.activemq.ActiveMQConnectionFactory;
1:a677c21: import org.apache.activemq.broker.BrokerService;
1:a677c21: import org.apache.activemq.broker.TransportConnector;
1:a677c21: import org.apache.activemq.broker.region.policy.FixedSizedSubscriptionRecoveryPolicy;
1:a677c21: import org.apache.activemq.broker.region.policy.LastImageSubscriptionRecoveryPolicy;
1:a677c21: import org.apache.activemq.broker.region.policy.NoSubscriptionRecoveryPolicy;
1:a677c21: import org.apache.activemq.broker.region.policy.RoundRobinDispatchPolicy;
1:a677c21: import org.apache.activemq.broker.region.policy.SimpleDispatchPolicy;
1:a677c21: import org.apache.activemq.broker.region.policy.StrictOrderDispatchPolicy;
1:a677c21: import org.apache.activemq.broker.region.policy.SubscriptionRecoveryPolicy;
1:a677c21: import org.apache.activemq.broker.region.policy.TimedSubscriptionRecoveryPolicy;
1:a677c21: import org.apache.activemq.command.ActiveMQTopic;
1:856e506: import org.apache.activemq.network.NetworkConnector;
1:a677c21: import org.apache.activemq.store.PersistenceAdapter;
1:8274f09: import org.apache.activemq.store.jdbc.DefaultDatabaseLocker;
1:a677c21: import org.apache.activemq.store.jdbc.JDBCPersistenceAdapter;
1:8274f09: import org.apache.activemq.store.jdbc.adapter.TransactDatabaseLocker;
1:a677c21: import org.apache.activemq.store.journal.JournalPersistenceAdapter;
1:a677c21: import org.apache.activemq.store.memory.MemoryPersistenceAdapter;
1:a677c21: import org.apache.activemq.transport.tcp.TcpTransportServer;
1:6d8e2c5: import org.apache.activemq.usage.SystemUsage;
1:a677c21: import org.apache.activemq.xbean.BrokerFactoryBean;
1:8274f09: import org.jmock.Expectations;
1:8274f09: import org.jmock.Mockery;
1:856e506: import org.junit.Test;
1:8bf987b: import org.slf4j.Logger;
1:8bf987b: import org.slf4j.LoggerFactory;
1:a677c21: import org.springframework.core.io.ClassPathResource;
1:a677c21: import org.springframework.core.io.FileSystemResource;
1:a677c21: import org.springframework.core.io.Resource;
1:8274f09: 
1:856e506: public class ConfigTest {
1:74bed6b: 
1:a677c21:     protected static final String JOURNAL_ROOT = "target/test-data/";
1:a677c21:     protected static final String DERBY_ROOT = "target/test-data/";
1:a677c21:     protected static final String CONF_ROOT = "src/test/resources/org/apache/activemq/config/sample-conf/";
1:8bf987b:     private static final Logger LOG = LoggerFactory.getLogger(ConfigTest.class);
1:74bed6b: 
1:a677c21:     static {
1:a677c21:         System.setProperty("javax.net.ssl.trustStore", "src/test/resources/client.keystore");
1:a677c21:         System.setProperty("javax.net.ssl.trustStorePassword", "password");
1:a677c21:         System.setProperty("javax.net.ssl.trustStoreType", "jks");
1:a677c21:         System.setProperty("javax.net.ssl.keyStore", "src/test/resources/server.keystore");
1:a677c21:         System.setProperty("javax.net.ssl.keyStorePassword", "password");
1:a677c21:         System.setProperty("javax.net.ssl.keyStoreType", "jks");
6:a677c21:     }
1:8274f09: 
2:a677c21:     /*
1:230a86c:      * IMPORTANT NOTE: Assertions checking for the existence of the derby
1:230a86c:      * directory will fail if the first derby directory is not created under
1:230a86c:      * target/test-data/. The test in unable to change the derby root directory
1:230a86c:      * for succeeding creation. It uses the first created directory as the root.
1:a677c21:      */
1:74bed6b: 
1:a677c21:     /*
1:230a86c:      * This tests creating a journal persistence adapter using the persistence
1:230a86c:      * adapter factory bean
1:a677c21:      */
1:856e506:     @Test
1:a677c21:     public void testJournaledJDBCConfig() throws Exception {
1:74bed6b: 
1:a677c21:         File journalFile = new File(JOURNAL_ROOT + "testJournaledJDBCConfig/journal");
1:8f9ecf0:         recursiveDelete(journalFile);
1:8f9ecf0: 
1:230a86c:         File derbyFile = new File(DERBY_ROOT + "testJournaledJDBCConfig/derbydb"); // Default
1:beaca8a:         recursiveDelete(derbyFile);
1:74bed6b: 
2:a677c21:         BrokerService broker;
1:a677c21:         broker = createBroker(new FileSystemResource(CONF_ROOT + "journaledjdbc-example.xml"));
2:a677c21:         try {
1:a677c21:             assertEquals("Broker Config Error (brokerName)", "brokerJournaledJDBCConfigTest", broker.getBrokerName());
1:230a86c: 
2:a677c21:             PersistenceAdapter adapter = broker.getPersistenceAdapter();
1:230a86c: 
1:a677c21:             assertTrue("Should have created a journal persistence adapter", adapter instanceof JournalPersistenceAdapter);
1:a677c21:             assertTrue("Should have created a derby directory at " + derbyFile.getAbsolutePath(), derbyFile.exists());
1:a677c21:             assertTrue("Should have created a journal directory at " + journalFile.getAbsolutePath(), journalFile.exists());
34:a677c21: 
1:a677c21:             // Check persistence factory configurations
1:ecf89a6:             broker.getPersistenceAdapter();
1:b5b6a08: 
1:b5b6a08:             assertTrue(broker.getSystemUsage().getStoreUsage().getStore() instanceof JournalPersistenceAdapter);
1:230a86c: 
1:fc00993:             LOG.info("Success");
2:a677c21:         } finally {
2:a677c21:             if (broker != null) {
2:a677c21:                 broker.stop();
1:a677c21:             }
1:a677c21:         }
1:a677c21:     }
1:a677c21: 
1:856e506:     @Test
1:8274f09:     public void testJdbcLockConfigOverride() throws Exception {
1:8274f09: 
1:8274f09:         JDBCPersistenceAdapter adapter = new JDBCPersistenceAdapter();
1:8274f09:         Mockery context = new Mockery();
1:8274f09:         final DataSource dataSource = context.mock(DataSource.class);
1:8274f09:         final Connection connection = context.mock(Connection.class);
1:8274f09:         final DatabaseMetaData metadata = context.mock(DatabaseMetaData.class);
1:8274f09:         final ResultSet result = context.mock(ResultSet.class);
1:8274f09:         adapter.setDataSource(dataSource);
1:8274f09:         adapter.setCreateTablesOnStartup(false);
1:8274f09: 
1:8274f09:         context.checking(new Expectations() {{
1:74bed6b:             allowing(dataSource).getConnection();
1:74bed6b:             will(returnValue(connection));
1:74bed6b:             allowing(connection).getMetaData();
1:74bed6b:             will(returnValue(metadata));
1:74bed6b:             allowing(connection);
1:74bed6b:             allowing(metadata).getDriverName();
1:74bed6b:             will(returnValue("Microsoft_SQL_Server_2005_jdbc_driver"));
1:74bed6b:             allowing(result).next();
1:74bed6b:             will(returnValue(true));
1:8274f09:         }});
1:8274f09: 
1:8274f09:         adapter.start();
1:8530111:         assertTrue("has the locker override", adapter.getLocker() instanceof TransactDatabaseLocker);
1:8274f09:         adapter.stop();
1:8274f09:     }
1:8274f09: 
1:8274f09:     public void testJdbcLockConfigDefault() throws Exception {
1:8274f09: 
1:8274f09:         JDBCPersistenceAdapter adapter = new JDBCPersistenceAdapter();
1:8274f09:         Mockery context = new Mockery();
1:8274f09:         final DataSource dataSource = context.mock(DataSource.class);
1:8274f09:         final Connection connection = context.mock(Connection.class);
1:8274f09:         final DatabaseMetaData metadata = context.mock(DatabaseMetaData.class);
1:8274f09:         final ResultSet result = context.mock(ResultSet.class);
1:8274f09:         adapter.setDataSource(dataSource);
1:8274f09:         adapter.setCreateTablesOnStartup(false);
1:8274f09: 
1:8274f09:         context.checking(new Expectations() {{
1:74bed6b:             allowing(dataSource).getConnection();
1:74bed6b:             will(returnValue(connection));
1:74bed6b:             allowing(connection).getMetaData();
1:74bed6b:             will(returnValue(metadata));
1:74bed6b:             allowing(connection);
1:74bed6b:             allowing(metadata).getDriverName();
1:74bed6b:             will(returnValue("Some_Unknown_driver"));
1:74bed6b:             allowing(result).next();
1:74bed6b:             will(returnValue(true));
1:8274f09:         }});
1:8274f09: 
1:8274f09:         adapter.start();
1:8530111:         assertEquals("has the default locker", adapter.getLocker().getClass(), DefaultDatabaseLocker.class);
1:8274f09:         adapter.stop();
1:8274f09:     }
1:8274f09: 
1:a677c21:     /*
1:230a86c:      * This tests configuring the different broker properties using
1:230a86c:      * xbeans-spring
1:a677c21:      */
1:856e506:     @Test
1:a677c21:     public void testBrokerConfig() throws Exception {
1:a677c21:         ActiveMQTopic dest;
1:a677c21:         BrokerService broker;
1:8274f09: 
1:a677c21:         File journalFile = new File(JOURNAL_ROOT);
2:a677c21:         recursiveDelete(journalFile);
1:74bed6b: 
1:a677c21:         // Create broker from resource
1:230a86c:         // System.out.print("Creating broker... ");
1:a677c21:         broker = createBroker("org/apache/activemq/config/example.xml");
1:fc00993:         LOG.info("Success");
1:74bed6b: 
1:a677c21:         try {
1:a677c21:             // Check broker configuration
1:230a86c:             // System.out.print("Checking broker configurations... ");
1:a677c21:             assertEquals("Broker Config Error (brokerName)", "brokerConfigTest", broker.getBrokerName());
1:a677c21:             assertEquals("Broker Config Error (populateJMSXUserID)", false, broker.isPopulateJMSXUserID());
1:a677c21:             assertEquals("Broker Config Error (useLoggingForShutdownErrors)", true, broker.isUseLoggingForShutdownErrors());
1:a677c21:             assertEquals("Broker Config Error (useJmx)", true, broker.isUseJmx());
1:a677c21:             assertEquals("Broker Config Error (persistent)", false, broker.isPersistent());
1:a677c21:             assertEquals("Broker Config Error (useShutdownHook)", false, broker.isUseShutdownHook());
1:a677c21:             assertEquals("Broker Config Error (deleteAllMessagesOnStartup)", true, broker.isDeleteAllMessagesOnStartup());
1:fc00993:             LOG.info("Success");
1:74bed6b: 
1:a677c21:             // Check specific vm transport
1:230a86c:             // System.out.print("Checking vm connector... ");
1:a677c21:             assertEquals("Should have a specific VM Connector", "vm://javacoola", broker.getVmConnectorURI().toString());
1:fc00993:             LOG.info("Success");
1:a677c21: 
1:a677c21:             // Check transport connectors list
1:230a86c:             // System.out.print("Checking transport connectors... ");
1:856e506:             List<TransportConnector> connectors = broker.getTransportConnectors();
1:74a7a8b:             assertTrue("Should have created at least 3 connectors", connectors.size() >= 3);
1:856e506:             assertTrue("1st connector should be TcpTransportServer", connectors.get(0).getServer() instanceof TcpTransportServer);
1:856e506:             assertTrue("2nd connector should be TcpTransportServer", connectors.get(1).getServer() instanceof TcpTransportServer);
1:856e506:             assertTrue("3rd connector should be TcpTransportServer", connectors.get(2).getServer() instanceof TcpTransportServer);
1:a677c21: 
1:a677c21:             // Check network connectors
1:230a86c:             // System.out.print("Checking network connectors... ");
1:856e506:             List<NetworkConnector> networkConnectors = broker.getNetworkConnectors();
1:a677c21:             assertEquals("Should have a single network connector", 1, networkConnectors.size());
1:fc00993:             LOG.info("Success");
1:a677c21: 
1:a677c21:             // Check dispatch policy configuration
1:230a86c:             // System.out.print("Checking dispatch policies... ");
1:a677c21: 
1:a677c21:             dest = new ActiveMQTopic("Topic.SimpleDispatch");
1:a677c21:             assertTrue("Should have a simple dispatch policy for " + dest.getTopicName(),
1:74bed6b:                     broker.getDestinationPolicy().getEntryFor(dest).getDispatchPolicy() instanceof SimpleDispatchPolicy);
1:a677c21: 
1:a677c21:             dest = new ActiveMQTopic("Topic.RoundRobinDispatch");
1:a677c21:             assertTrue("Should have a round robin dispatch policy for " + dest.getTopicName(),
1:74bed6b:                     broker.getDestinationPolicy().getEntryFor(dest).getDispatchPolicy() instanceof RoundRobinDispatchPolicy);
1:a677c21: 
1:a677c21:             dest = new ActiveMQTopic("Topic.StrictOrderDispatch");
1:a677c21:             assertTrue("Should have a strict order dispatch policy for " + dest.getTopicName(),
1:74bed6b:                     broker.getDestinationPolicy().getEntryFor(dest).getDispatchPolicy() instanceof StrictOrderDispatchPolicy);
1:fc00993:             LOG.info("Success");
1:a677c21: 
1:a677c21:             // Check subscription policy configuration
1:230a86c:             // System.out.print("Checking subscription recovery policies... ");
1:a677c21:             SubscriptionRecoveryPolicy subsPolicy;
1:a677c21: 
1:a677c21:             dest = new ActiveMQTopic("Topic.FixedSizedSubs");
1:a677c21:             subsPolicy = broker.getDestinationPolicy().getEntryFor(dest).getSubscriptionRecoveryPolicy();
1:230a86c:             assertTrue("Should have a fixed sized subscription recovery policy for " + dest.getTopicName(), subsPolicy instanceof FixedSizedSubscriptionRecoveryPolicy);
1:74bed6b:             assertEquals("FixedSizedSubsPolicy Config Error (maximumSize)", 2000000, ((FixedSizedSubscriptionRecoveryPolicy) subsPolicy).getMaximumSize());
1:74bed6b:             assertEquals("FixedSizedSubsPolicy Config Error (useSharedBuffer)", false, ((FixedSizedSubscriptionRecoveryPolicy) subsPolicy).isUseSharedBuffer());
1:a677c21: 
1:a677c21:             dest = new ActiveMQTopic("Topic.LastImageSubs");
1:a677c21:             subsPolicy = broker.getDestinationPolicy().getEntryFor(dest).getSubscriptionRecoveryPolicy();
1:230a86c:             assertTrue("Should have a last image subscription recovery policy for " + dest.getTopicName(), subsPolicy instanceof LastImageSubscriptionRecoveryPolicy);
1:a677c21: 
1:a677c21:             dest = new ActiveMQTopic("Topic.NoSubs");
1:a677c21:             subsPolicy = broker.getDestinationPolicy().getEntryFor(dest).getSubscriptionRecoveryPolicy();
1:230a86c:             assertTrue("Should have no subscription recovery policy for " + dest.getTopicName(), subsPolicy instanceof NoSubscriptionRecoveryPolicy);
1:a677c21: 
1:a677c21:             dest = new ActiveMQTopic("Topic.TimedSubs");
1:a677c21:             subsPolicy = broker.getDestinationPolicy().getEntryFor(dest).getSubscriptionRecoveryPolicy();
1:230a86c:             assertTrue("Should have a timed subscription recovery policy for " + dest.getTopicName(), subsPolicy instanceof TimedSubscriptionRecoveryPolicy);
1:74bed6b:             assertEquals("TimedSubsPolicy Config Error (recoverDuration)", 25000, ((TimedSubscriptionRecoveryPolicy) subsPolicy).getRecoverDuration());
1:fc00993:             LOG.info("Success");
1:a677c21: 
1:a677c21:             // Check usage manager
1:230a86c:             // System.out.print("Checking memory manager configurations... ");
1:2b0024c:             SystemUsage systemUsage = broker.getSystemUsage();
1:2b0024c:             assertTrue("Should have a SystemUsage", systemUsage != null);
1:2b0024c:             assertEquals("SystemUsage Config Error (MemoryUsage.limit)", 1024 * 1024 * 10, systemUsage.getMemoryUsage().getLimit());
1:2b0024c:             assertEquals("SystemUsage Config Error (MemoryUsage.percentUsageMinDelta)", 20, systemUsage.getMemoryUsage().getPercentUsageMinDelta());
1:2b0024c:             assertEquals("SystemUsage Config Error (TempUsage.limit)", 1024 * 1024 * 100, systemUsage.getTempUsage().getLimit());
1:2b0024c:             assertEquals("SystemUsage Config Error (StoreUsage.limit)", 1024 * 1024 * 1024, systemUsage.getStoreUsage().getLimit());
1:2b0024c:             assertEquals("SystemUsage Config Error (StoreUsage.name)", "foo", systemUsage.getStoreUsage().getName());
1:b5b6a08: 
1:b5b6a08:             assertNotNull(systemUsage.getStoreUsage().getStore());
1:b5b6a08:             assertTrue(systemUsage.getStoreUsage().getStore() instanceof MemoryPersistenceAdapter);
1:74bed6b: 
1:fc00993:             LOG.info("Success");
1:74bed6b: 
1:a677c21:         } finally {
1:a677c21:             if (broker != null) {
1:a677c21:                 broker.stop();
1:a677c21:             }
1:a677c21:         }
1:a677c21:     }
1:2b0024c: 
1:a677c21:     /*
1:a677c21:      * This tests creating a journal persistence adapter using xbeans-spring
1:a677c21:      */
1:856e506:     @Test
1:a677c21:     public void testJournalConfig() throws Exception {
1:a677c21:         File journalFile = new File(JOURNAL_ROOT + "testJournalConfig/journal");
1:a677c21:         recursiveDelete(journalFile);
1:a677c21: 
1:a677c21:         BrokerService broker;
1:a677c21:         broker = createBroker(new FileSystemResource(CONF_ROOT + "journal-example.xml"));
1:a677c21:         try {
1:a677c21:             assertEquals("Broker Config Error (brokerName)", "brokerJournalConfigTest", broker.getBrokerName());
1:a677c21: 
1:a677c21:             PersistenceAdapter adapter = broker.getPersistenceAdapter();
1:a677c21: 
1:a677c21:             assertTrue("Should have created a journal persistence adapter", adapter instanceof JournalPersistenceAdapter);
1:a677c21:             assertTrue("Should have created a journal directory at " + journalFile.getAbsolutePath(), journalFile.exists());
1:a677c21: 
1:fc00993:             LOG.info("Success");
1:a677c21:         } finally {
1:a677c21:             if (broker != null) {
1:a677c21:                 broker.stop();
1:a677c21:             }
1:a677c21:         }
1:a677c21:     }
1:a677c21: 
1:a677c21:     /*
1:a677c21:      * This tests creating a memory persistence adapter using xbeans-spring
1:a677c21:      */
1:856e506:     @Test
1:a677c21:     public void testMemoryConfig() throws Exception {
1:a677c21:         File journalFile = new File(JOURNAL_ROOT + "testMemoryConfig");
1:a677c21:         recursiveDelete(journalFile);
1:a677c21: 
1:a677c21:         File derbyFile = new File(DERBY_ROOT + "testMemoryConfig");
2:a677c21:         recursiveDelete(derbyFile);
1:a677c21: 
1:a677c21:         BrokerService broker;
1:a677c21:         broker = createBroker(new FileSystemResource(CONF_ROOT + "memory-example.xml"));
1:a677c21: 
1:a677c21:         try {
1:a677c21:             assertEquals("Broker Config Error (brokerName)", "brokerMemoryConfigTest", broker.getBrokerName());
1:a677c21: 
1:a677c21:             PersistenceAdapter adapter = broker.getPersistenceAdapter();
1:a677c21: 
1:a677c21:             assertTrue("Should have created a memory persistence adapter", adapter instanceof MemoryPersistenceAdapter);
1:a677c21:             assertTrue("Should have not created a derby directory at " + derbyFile.getAbsolutePath(), !derbyFile.exists());
1:a677c21:             assertTrue("Should have not created a journal directory at " + journalFile.getAbsolutePath(), !journalFile.exists());
1:a677c21: 
1:fc00993:             LOG.info("Success");
1:a677c21:         } finally {
1:a677c21:             if (broker != null) {
1:a677c21:                 broker.stop();
1:a677c21:             }
1:a677c21:         }
1:a677c21:     }
1:a677c21: 
1:856e506:     @Test
1:74bed6b:     public void testConnectorConfig() throws Exception {
1:74bed6b: 
1:74bed6b:         File journalFile = new File(JOURNAL_ROOT + "testMemoryConfig");
1:74bed6b:         recursiveDelete(journalFile);
1:74bed6b: 
1:74bed6b:         File derbyFile = new File(DERBY_ROOT + "testMemoryConfig");
1:74bed6b:         recursiveDelete(derbyFile);
1:a677c21: 
1:74bed6b:         final int MAX_PRODUCERS = 5;
1:74bed6b:         final int MAX_CONSUMERS = 10;
1:74bed6b: 
1:74bed6b:         BrokerService broker = createBroker(new FileSystemResource(CONF_ROOT + "connector-properties.xml"));
1:74bed6b:         broker.start();
1:74bed6b:         try {
1:74bed6b: 
1:74bed6b:             assertEquals(broker.getTransportConnectorByScheme("tcp").getMaximumProducersAllowedPerConnection(), MAX_PRODUCERS);
1:74bed6b:             assertEquals(broker.getTransportConnectorByScheme("tcp").getMaximumConsumersAllowedPerConnection(), MAX_CONSUMERS);
1:74bed6b: 
1:74bed6b:             ActiveMQConnectionFactory activeMQConnectionFactory = new ActiveMQConnectionFactory("tcp://localhost:61631");
1:74bed6b:             javax.jms.Connection connection = activeMQConnectionFactory.createConnection();
1:74bed6b:             connection.start();
1:74bed6b:             Session session = connection.createSession(false, Session.AUTO_ACKNOWLEDGE);
1:74bed6b:             Topic topic = session.createTopic("test.foo");
1:74bed6b: 
1:10e1c0c:             for (int i = 0; i < MAX_PRODUCERS; i++) {
1:10e1c0c:                 session.createProducer(topic);
1:74bed6b:             }
1:74bed6b: 
1:10e1c0c:             try {
1:10e1c0c:                 session.createProducer(topic);
1:10e1c0c:                 fail("Should have got an exception on exceeding MAX_PRODUCERS");
1:10e1c0c:             } catch (JMSException expected) {
1:74bed6b:             }
1:10e1c0c: 
1:ec9a92f:             // Tests the anonymous producer case also counts.
1:ec9a92f:             try {
1:ec9a92f:                 session.createProducer(null);
1:ec9a92f:                 fail("Should have got an exception on exceeding MAX_PRODUCERS");
1:ec9a92f:             } catch (JMSException expected) {
1:ec9a92f:             }
1:ec9a92f: 
1:74bed6b:             try {
1:74bed6b:                 for (int i = 0; i < (MAX_CONSUMERS + 1); i++) {
1:74bed6b:                     MessageConsumer consumer = session.createConsumer(topic);
1:856e506:                     assertNotNull(consumer);
1:74bed6b:                 }
1:74bed6b:                 fail("Should have caught an exception");
1:74bed6b:             } catch (JMSException e) {
1:74bed6b:             }
1:74bed6b: 
1:74bed6b:             LOG.info("Success");
1:74bed6b:         } finally {
1:74bed6b:             if (broker != null) {
1:74bed6b:                 broker.stop();
1:74bed6b:             }
1:74bed6b:         }
1:74bed6b:     }
1:74bed6b: 
1:856e506:     @Test
1:a677c21:     public void testXmlConfigHelper() throws Exception {
1:a677c21:         BrokerService broker;
1:74bed6b: 
1:a677c21:         broker = createBroker(new FileSystemResource(CONF_ROOT + "memory-example.xml"));
1:a677c21:         try {
1:a677c21:             assertEquals("Broker Config Error (brokerName)", "brokerMemoryConfigTest", broker.getBrokerName());
1:a677c21:         } finally {
1:a677c21:             if (broker != null) {
1:a677c21:                 broker.stop();
1:74bed6b:             }
1:74bed6b:         }
1:74bed6b: 
1:a677c21:         broker = createBroker("org/apache/activemq/config/config.xml");
1:a677c21:         try {
1:a677c21:             assertEquals("Broker Config Error (brokerName)", "brokerXmlConfigHelper", broker.getBrokerName());
1:a677c21:         } finally {
1:a677c21:             if (broker != null) {
1:a677c21:                 broker.stop();
1:a677c21:             }
1:a677c21:         }
1:a677c21:     }
1:a677c21: 
1:a677c21:     /*
1:a677c21:      * TODO: Create additional tests for forwarding bridges
1:a677c21:      */
1:a677c21: 
1:a677c21:     protected static void recursiveDelete(File file) {
1:230a86c:         if (file.isDirectory()) {
1:a677c21:             File[] files = file.listFiles();
1:a677c21:             for (int i = 0; i < files.length; i++) {
1:a677c21:                 recursiveDelete(files[i]);
1:a677c21:             }
1:a677c21:         }
1:a677c21:         file.delete();
1:a677c21:     }
1:a677c21: 
1:a677c21:     protected BrokerService createBroker(String resource) throws Exception {
1:a677c21:         return createBroker(new ClassPathResource(resource));
1:a677c21:     }
1:a677c21: 
1:a677c21:     protected BrokerService createBroker(Resource resource) throws Exception {
1:a677c21:         BrokerFactoryBean factory = new BrokerFactoryBean(resource);
1:a677c21:         factory.afterPropertiesSet();
1:a677c21: 
1:a677c21:         BrokerService broker = factory.getBroker();
1:a677c21: 
1:a677c21:         assertTrue("Should have a broker!", broker != null);
1:a677c21: 
1:230a86c:         // Broker is already started by default when using the XML file
1:230a86c:         // broker.start();
1:a677c21: 
1:a677c21:         return broker;
1:a677c21:     }
1:a677c21: }
============================================================================
author:Hadrian Zbarcea
-------------------------------------------------------------------------------
commit:f9bec8f
author:Timothy Bish
-------------------------------------------------------------------------------
commit:ec9a92f
/////////////////////////////////////////////////////////////////////////
1:             // Tests the anonymous producer case also counts.
1:             try {
1:                 session.createProducer(null);
1:                 fail("Should have got an exception on exceeding MAX_PRODUCERS");
1:             } catch (JMSException expected) {
1:             }
1: 
author:Timothy A. Bish
-------------------------------------------------------------------------------
commit:856e506
/////////////////////////////////////////////////////////////////////////
1: import static org.junit.Assert.assertEquals;
1: import static org.junit.Assert.assertNotNull;
1: import static org.junit.Assert.assertTrue;
1: import static org.junit.Assert.fail;
1: 
/////////////////////////////////////////////////////////////////////////
1: import org.apache.activemq.network.NetworkConnector;
/////////////////////////////////////////////////////////////////////////
1: import org.junit.Test;
1: public class ConfigTest {
/////////////////////////////////////////////////////////////////////////
1:     @Test
/////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////
1:     @Test
/////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////
1:     @Test
/////////////////////////////////////////////////////////////////////////
1:             List<TransportConnector> connectors = broker.getTransportConnectors();
1:             assertTrue("1st connector should be TcpTransportServer", connectors.get(0).getServer() instanceof TcpTransportServer);
1:             assertTrue("2nd connector should be TcpTransportServer", connectors.get(1).getServer() instanceof TcpTransportServer);
1:             assertTrue("3rd connector should be TcpTransportServer", connectors.get(2).getServer() instanceof TcpTransportServer);
1:             List<NetworkConnector> networkConnectors = broker.getNetworkConnectors();
/////////////////////////////////////////////////////////////////////////
1:     @Test
/////////////////////////////////////////////////////////////////////////
1:     @Test
/////////////////////////////////////////////////////////////////////////
1:     @Test
/////////////////////////////////////////////////////////////////////////
1:                     assertNotNull(consumer);
1:     @Test
commit:ef24cc9
commit:5d01822
/////////////////////////////////////////////////////////////////////////
1: 
1: 
/////////////////////////////////////////////////////////////////////////
0:         // ");
author:Gary Tully
-------------------------------------------------------------------------------
commit:10e1c0c
/////////////////////////////////////////////////////////////////////////
1:             for (int i = 0; i < MAX_PRODUCERS; i++) {
1:                 session.createProducer(topic);
1:             try {
1:                 session.createProducer(topic);
1:                 fail("Should have got an exception on exceeding MAX_PRODUCERS");
1:             } catch (JMSException expected) {
1: 
commit:8f9ecf0
/////////////////////////////////////////////////////////////////////////
0:         // ");     
0:         File journalFile = new File(JOURNAL_ROOT + "testJDBCConfig/journal");
1:         recursiveDelete(journalFile);
1:         
commit:8274f09
/////////////////////////////////////////////////////////////////////////
1: import java.sql.Connection;
1: import java.sql.DatabaseMetaData;
1: import java.sql.ResultSet;
1: import javax.sql.DataSource;
1: 
/////////////////////////////////////////////////////////////////////////
1: import org.apache.activemq.store.jdbc.DefaultDatabaseLocker;
1: import org.apache.activemq.store.jdbc.adapter.TransactDatabaseLocker;
/////////////////////////////////////////////////////////////////////////
1: import org.jmock.Expectations;
1: import org.jmock.Mockery;
/////////////////////////////////////////////////////////////////////////
1:     public void testJdbcLockConfigOverride() throws Exception {
1:       
1:         JDBCPersistenceAdapter adapter = new JDBCPersistenceAdapter();
1:         Mockery context = new Mockery();
1:         final DataSource dataSource = context.mock(DataSource.class);
1:         final Connection connection = context.mock(Connection.class);
1:         final DatabaseMetaData metadata = context.mock(DatabaseMetaData.class);
1:         final ResultSet result = context.mock(ResultSet.class);
1:         adapter.setDataSource(dataSource);
1:         adapter.setCreateTablesOnStartup(false);
1:         
1:         context.checking(new Expectations() {{
0:             allowing (dataSource).getConnection(); will (returnValue(connection));
0:             allowing (connection).getMetaData(); will (returnValue(metadata));
0:             allowing (connection);
0:             allowing (metadata).getDriverName(); will (returnValue("Microsoft_SQL_Server_2005_jdbc_driver"));
0:             allowing (result).next(); will (returnValue(true));
1:         }});
1:         
1:         adapter.start();
0:         assertTrue("has the locker override", adapter.getDatabaseLocker() instanceof TransactDatabaseLocker);
1:         adapter.stop();
1:     }
1: 
1:     
1: 
1:     public void testJdbcLockConfigDefault() throws Exception {
1:       
1:         JDBCPersistenceAdapter adapter = new JDBCPersistenceAdapter();
1:         Mockery context = new Mockery();
1:         final DataSource dataSource = context.mock(DataSource.class);
1:         final Connection connection = context.mock(Connection.class);
1:         final DatabaseMetaData metadata = context.mock(DatabaseMetaData.class);
1:         final ResultSet result = context.mock(ResultSet.class);
1:         adapter.setDataSource(dataSource);
1:         adapter.setCreateTablesOnStartup(false);
1:         
1:         context.checking(new Expectations() {{
0:             allowing (dataSource).getConnection(); will (returnValue(connection));
0:             allowing (connection).getMetaData(); will (returnValue(metadata));
0:             allowing (connection);
0:             allowing (metadata).getDriverName(); will (returnValue("Some_Unknown_driver"));
0:             allowing (result).next(); will (returnValue(true));
1:         }});
1:         
1:         adapter.start();
0:         assertEquals("has the default locker", adapter.getDatabaseLocker().getClass(), DefaultDatabaseLocker.class);
1:         adapter.stop();
1:     }
1: 
commit:b5b6a08
/////////////////////////////////////////////////////////////////////////
1:             
1:             assertTrue(broker.getSystemUsage().getStoreUsage().getStore() instanceof JournalPersistenceAdapter);
/////////////////////////////////////////////////////////////////////////
1:             
1:             assertNotNull(systemUsage.getStoreUsage().getStore());
1:             assertTrue(systemUsage.getStoreUsage().getStore() instanceof MemoryPersistenceAdapter);
author:Bosanac Dejan
-------------------------------------------------------------------------------
commit:8530111
/////////////////////////////////////////////////////////////////////////
1:         assertTrue("has the locker override", adapter.getLocker() instanceof TransactDatabaseLocker);
/////////////////////////////////////////////////////////////////////////
1:         assertEquals("has the default locker", adapter.getLocker().getClass(), DefaultDatabaseLocker.class);
commit:8bf987b
/////////////////////////////////////////////////////////////////////////
1: import org.slf4j.Logger;
1: import org.slf4j.LoggerFactory;
/////////////////////////////////////////////////////////////////////////
1:     private static final Logger LOG = LoggerFactory.getLogger(ConfigTest.class);
author:Robert Davies
-------------------------------------------------------------------------------
commit:74bed6b
/////////////////////////////////////////////////////////////////////////
0: import java.util.concurrent.CountDownLatch;
0: import java.util.concurrent.TimeUnit;
0: import javax.jms.ExceptionListener;
1: import javax.jms.JMSException;
1: import javax.jms.MessageConsumer;
0: import javax.jms.MessageProducer;
1: import javax.jms.Session;
1: import javax.jms.Topic;
1: import org.apache.activemq.ActiveMQConnectionFactory;
/////////////////////////////////////////////////////////////////////////
0: import org.slf4j.Logger;
0: import org.slf4j.LoggerFactory;
1:  *
/////////////////////////////////////////////////////////////////////////
0:         // derby
0:         // name
/////////////////////////////////////////////////////////////////////////
1: 
/////////////////////////////////////////////////////////////////////////
1: 
0:         // derby
0:         // name
/////////////////////////////////////////////////////////////////////////
0:             assertEquals("JDBC Adapter Config Error (cleanupPeriod)", 60000, ((JDBCPersistenceAdapter) adapter).getCleanupPeriod());
0:             assertTrue("Should have created an EmbeddedDataSource", ((JDBCPersistenceAdapter) adapter).getDataSource() instanceof EmbeddedDataSource);
0:             assertTrue("Should have created a DefaultWireFormat", ((JDBCPersistenceAdapter) adapter).getWireFormat() instanceof ObjectStreamWireFormat);
/////////////////////////////////////////////////////////////////////////
1: 
/////////////////////////////////////////////////////////////////////////
1: 
1:             allowing(dataSource).getConnection();
1:             will(returnValue(connection));
1:             allowing(connection).getMetaData();
1:             will(returnValue(metadata));
1:             allowing(connection);
1:             allowing(metadata).getDriverName();
1:             will(returnValue("Microsoft_SQL_Server_2005_jdbc_driver"));
1:             allowing(result).next();
1:             will(returnValue(true));
1: 
1: 
/////////////////////////////////////////////////////////////////////////
1: 
1:             allowing(dataSource).getConnection();
1:             will(returnValue(connection));
1:             allowing(connection).getMetaData();
1:             will(returnValue(metadata));
1:             allowing(connection);
1:             allowing(metadata).getDriverName();
1:             will(returnValue("Some_Unknown_driver"));
1:             allowing(result).next();
1:             will(returnValue(true));
1: 
/////////////////////////////////////////////////////////////////////////
0:             assertTrue("1st connector should be TcpTransportServer", ((TransportConnector) connectors.get(0)).getServer() instanceof TcpTransportServer);
0:             assertTrue("2nd connector should be TcpTransportServer", ((TransportConnector) connectors.get(1)).getServer() instanceof TcpTransportServer);
0:             assertTrue("3rd connector should be TcpTransportServer", ((TransportConnector) connectors.get(2)).getServer() instanceof TcpTransportServer);
/////////////////////////////////////////////////////////////////////////
1:                     broker.getDestinationPolicy().getEntryFor(dest).getDispatchPolicy() instanceof SimpleDispatchPolicy);
1:                     broker.getDestinationPolicy().getEntryFor(dest).getDispatchPolicy() instanceof RoundRobinDispatchPolicy);
1:                     broker.getDestinationPolicy().getEntryFor(dest).getDispatchPolicy() instanceof StrictOrderDispatchPolicy);
/////////////////////////////////////////////////////////////////////////
1:             assertEquals("FixedSizedSubsPolicy Config Error (maximumSize)", 2000000, ((FixedSizedSubscriptionRecoveryPolicy) subsPolicy).getMaximumSize());
1:             assertEquals("FixedSizedSubsPolicy Config Error (useSharedBuffer)", false, ((FixedSizedSubscriptionRecoveryPolicy) subsPolicy).isUseSharedBuffer());
/////////////////////////////////////////////////////////////////////////
1:             assertEquals("TimedSubsPolicy Config Error (recoverDuration)", 25000, ((TimedSubscriptionRecoveryPolicy) subsPolicy).getRecoverDuration());
/////////////////////////////////////////////////////////////////////////
1: 
1: 
/////////////////////////////////////////////////////////////////////////
1:     public void testConnectorConfig() throws Exception {
0:         // System.out.print("Checking memory persistence adapter
0:         // configuration... ");
1: 
1:         File journalFile = new File(JOURNAL_ROOT + "testMemoryConfig");
1:         recursiveDelete(journalFile);
1: 
1:         File derbyFile = new File(DERBY_ROOT + "testMemoryConfig");
1:         recursiveDelete(derbyFile);
1: 
1:         final int MAX_PRODUCERS = 5;
1:         final int MAX_CONSUMERS = 10;
1: 
1:         BrokerService broker = createBroker(new FileSystemResource(CONF_ROOT + "connector-properties.xml"));
1:         broker.start();
1:         try {
1: 
1:             assertEquals(broker.getTransportConnectorByScheme("tcp").getMaximumProducersAllowedPerConnection(), MAX_PRODUCERS);
1:             assertEquals(broker.getTransportConnectorByScheme("tcp").getMaximumConsumersAllowedPerConnection(), MAX_CONSUMERS);
1: 
1:             ActiveMQConnectionFactory activeMQConnectionFactory = new ActiveMQConnectionFactory("tcp://localhost:61631");
1:             javax.jms.Connection connection = activeMQConnectionFactory.createConnection();
0:             final CountDownLatch latch = new CountDownLatch(1);
0:             connection.setExceptionListener(new ExceptionListener() {
0:                 public void onException(JMSException e) {
0:                     if (e.getCause() instanceof IllegalStateException) {
0:                         latch.countDown();
1:                     }
1:                 }
0:             });
1:             connection.start();
1:             Session session = connection.createSession(false, Session.AUTO_ACKNOWLEDGE);
1:             Topic topic = session.createTopic("test.foo");
1: 
0:             for (int i = 0; i < (MAX_PRODUCERS + 1); i++) {
0:                 MessageProducer messageProducer = session.createProducer(topic);
1:             }
1: 
0:             latch.await(5, TimeUnit.SECONDS);
0:             if (latch.getCount() > 0) {
0:                 fail("Should have got an exception");
1:             }
1:             try {
1:                 for (int i = 0; i < (MAX_CONSUMERS + 1); i++) {
1:                     MessageConsumer consumer = session.createConsumer(topic);
1:                 }
1:                 fail("Should have caught an exception");
1:             } catch (JMSException e) {
1:             }
1: 
1: 
1:             LOG.info("Success");
1:         } finally {
1:             if (broker != null) {
1:                 broker.stop();
1:             }
1:         }
1: 
1:     }
1: 
commit:6d8e2c5
/////////////////////////////////////////////////////////////////////////
1: import org.apache.activemq.usage.SystemUsage;
/////////////////////////////////////////////////////////////////////////
0:             SystemUsage memMgr = broker.getUsageManager();
0:             assertEquals("UsageManager Config Error (limit)", 200000, memMgr.getMemoryUsage().getLimit());
0:             assertEquals("UsageManager Config Error (percentUsageMinDelta)", 20, memMgr.getMemoryUsage().getPercentUsageMinDelta());
author:Hiram R. Chirino
-------------------------------------------------------------------------------
commit:0bbc0ac
/////////////////////////////////////////////////////////////////////////
1:  * 
commit:2b0024c
/////////////////////////////////////////////////////////////////////////
1:             SystemUsage systemUsage = broker.getSystemUsage();
1:             assertTrue("Should have a SystemUsage", systemUsage != null);
1:             assertEquals("SystemUsage Config Error (MemoryUsage.limit)", 1024 * 1024 * 10, systemUsage.getMemoryUsage().getLimit());
1:             assertEquals("SystemUsage Config Error (MemoryUsage.percentUsageMinDelta)", 20, systemUsage.getMemoryUsage().getPercentUsageMinDelta());
1:             assertEquals("SystemUsage Config Error (TempUsage.limit)", 1024 * 1024 * 100, systemUsage.getTempUsage().getLimit());
1:             assertEquals("SystemUsage Config Error (StoreUsage.limit)", 1024 * 1024 * 1024, systemUsage.getStoreUsage().getLimit());
1:             assertEquals("SystemUsage Config Error (StoreUsage.name)", "foo", systemUsage.getStoreUsage().getName());
1:                         
commit:ecf89a6
/////////////////////////////////////////////////////////////////////////
0:     private static final Log LOG = LogFactory.getLog(ConfigTest.class);
/////////////////////////////////////////////////////////////////////////
1:             broker.getPersistenceAdapter();
commit:fc00993
/////////////////////////////////////////////////////////////////////////
0:     private static final Log LOG = LogFactory.getLog(ConfigTest.class);
/////////////////////////////////////////////////////////////////////////
1:             LOG.info("Success");
/////////////////////////////////////////////////////////////////////////
1:             LOG.info("Success");
/////////////////////////////////////////////////////////////////////////
1:         LOG.info("Success");
/////////////////////////////////////////////////////////////////////////
1:             LOG.info("Success");
1:             LOG.info("Success");
/////////////////////////////////////////////////////////////////////////
1:             LOG.info("Success");
/////////////////////////////////////////////////////////////////////////
1:             LOG.info("Success");
/////////////////////////////////////////////////////////////////////////
1:             LOG.info("Success");
/////////////////////////////////////////////////////////////////////////
1:             LOG.info("Success");
1:             LOG.info("Success");
/////////////////////////////////////////////////////////////////////////
0:             LOG.info("Success");
/////////////////////////////////////////////////////////////////////////
0:             LOG.info("Success");
commit:74a7a8b
/////////////////////////////////////////////////////////////////////////
1:             assertTrue("Should have created at least 3 connectors", connectors.size() >= 3);
commit:230a86c
/////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////
1:  *      http://www.apache.org/licenses/LICENSE-2.0
/////////////////////////////////////////////////////////////////////////
1: 
1: 
/////////////////////////////////////////////////////////////////////////
1:      * IMPORTANT NOTE: Assertions checking for the existence of the derby
1:      * directory will fail if the first derby directory is not created under
1:      * target/test-data/. The test in unable to change the derby root directory
1:      * for succeeding creation. It uses the first created directory as the root.
1:      * This tests creating a journal persistence adapter using the persistence
1:      * adapter factory bean
0:         // System.out.print("Checking journaled JDBC persistence adapter
0:         // configuration... ");
1:         File derbyFile = new File(DERBY_ROOT + "testJournaledJDBCConfig/derbydb"); // Default
0:                                                                                     // derby
0:                                                                                     // name
/////////////////////////////////////////////////////////////////////////
0:             // System.out.print("Checking persistence adapter factory
0:             // settings... ");
0:             JournalPersistenceAdapter pa = (JournalPersistenceAdapter)broker.getPersistenceAdapter();
1: 
/////////////////////////////////////////////////////////////////////////
0:         // System.out.print("Checking jdbc persistence adapter configuration...
0:         // ");
0:         File derbyFile = new File(DERBY_ROOT + "testJDBCConfig/derbydb"); // Default
0:                                                                             // derby
0:                                                                             // name
/////////////////////////////////////////////////////////////////////////
0:             assertEquals("JDBC Adapter Config Error (cleanupPeriod)", 60000, ((JDBCPersistenceAdapter)adapter).getCleanupPeriod());
0:             assertTrue("Should have created an EmbeddedDataSource", ((JDBCPersistenceAdapter)adapter).getDataSource() instanceof EmbeddedDataSource);
0:             assertTrue("Should have created a DefaultWireFormat", ((JDBCPersistenceAdapter)adapter).getWireFormat() instanceof ObjectStreamWireFormat);
/////////////////////////////////////////////////////////////////////////
1:      * This tests configuring the different broker properties using
1:      * xbeans-spring
/////////////////////////////////////////////////////////////////////////
1:         // System.out.print("Creating broker... ");
1:             // System.out.print("Checking broker configurations... ");
/////////////////////////////////////////////////////////////////////////
1:             // System.out.print("Checking vm connector... ");
1:             // System.out.print("Checking transport connectors... ");
0:             assertTrue("1st connector should be TcpTransportServer", ((TransportConnector)connectors.get(0)).getServer() instanceof TcpTransportServer);
0:             assertTrue("2nd connector should be TcpTransportServer", ((TransportConnector)connectors.get(1)).getServer() instanceof TcpTransportServer);
0:             assertTrue("3rd connector should be TcpTransportServer", ((TransportConnector)connectors.get(2)).getServer() instanceof TcpTransportServer);
1:             // System.out.print("Checking network connectors... ");
1:             // System.out.print("Checking dispatch policies... ");
0:                        broker.getDestinationPolicy().getEntryFor(dest).getDispatchPolicy() instanceof SimpleDispatchPolicy);
0:                        broker.getDestinationPolicy().getEntryFor(dest).getDispatchPolicy() instanceof RoundRobinDispatchPolicy);
0:                        broker.getDestinationPolicy().getEntryFor(dest).getDispatchPolicy() instanceof StrictOrderDispatchPolicy);
1:             // System.out.print("Checking subscription recovery policies... ");
1:             assertTrue("Should have a fixed sized subscription recovery policy for " + dest.getTopicName(), subsPolicy instanceof FixedSizedSubscriptionRecoveryPolicy);
0:             assertEquals("FixedSizedSubsPolicy Config Error (maximumSize)", 2000000, ((FixedSizedSubscriptionRecoveryPolicy)subsPolicy).getMaximumSize());
0:             assertEquals("FixedSizedSubsPolicy Config Error (useSharedBuffer)", false, ((FixedSizedSubscriptionRecoveryPolicy)subsPolicy).isUseSharedBuffer());
1:             assertTrue("Should have a last image subscription recovery policy for " + dest.getTopicName(), subsPolicy instanceof LastImageSubscriptionRecoveryPolicy);
1:             assertTrue("Should have no subscription recovery policy for " + dest.getTopicName(), subsPolicy instanceof NoSubscriptionRecoveryPolicy);
1:             assertTrue("Should have a timed subscription recovery policy for " + dest.getTopicName(), subsPolicy instanceof TimedSubscriptionRecoveryPolicy);
0:             assertEquals("TimedSubsPolicy Config Error (recoverDuration)", 25000, ((TimedSubscriptionRecoveryPolicy)subsPolicy).getRecoverDuration());
1:             // System.out.print("Checking memory manager configurations... ");
/////////////////////////////////////////////////////////////////////////
0:         // System.out.print("Checking journal persistence adapter
0:         // configuration... ");
/////////////////////////////////////////////////////////////////////////
0:         // System.out.print("Checking memory persistence adapter
0:         // configuration... ");
/////////////////////////////////////////////////////////////////////////
1:         if (file.isDirectory()) {
/////////////////////////////////////////////////////////////////////////
1:         // Broker is already started by default when using the XML file
1:         // broker.start();
commit:0d25d4e
/////////////////////////////////////////////////////////////////////////
0: //        System.out.print("Checking journaled JDBC persistence adapter configuration... ");
/////////////////////////////////////////////////////////////////////////
0: //            System.out.print("Checking persistence adapter factory settings... ");
/////////////////////////////////////////////////////////////////////////
0: //        System.out.print("Checking jdbc persistence adapter configuration... ");
/////////////////////////////////////////////////////////////////////////
0: //        System.out.print("Creating broker... ");
0: //            System.out.print("Checking broker configurations... ");
/////////////////////////////////////////////////////////////////////////
0: //            System.out.print("Checking vm connector... ");
0: //            System.out.print("Checking transport connectors... ");
/////////////////////////////////////////////////////////////////////////
0: //            System.out.print("Checking network connectors... ");
0: //            System.out.print("Checking dispatch policies... ");
/////////////////////////////////////////////////////////////////////////
0: //            System.out.print("Checking subscription recovery policies... ");
/////////////////////////////////////////////////////////////////////////
0: //            System.out.print("Checking memory manager configurations... ");
/////////////////////////////////////////////////////////////////////////
0: //        System.out.print("Checking journal persistence adapter configuration... ");
/////////////////////////////////////////////////////////////////////////
0: //        System.out.print("Checking memory persistence adapter configuration... ");
commit:802296d
/////////////////////////////////////////////////////////////////////////
0:             assertTrue("Should have created at least 3 connectors", (connectors.size() >= 3));
commit:e2bd38c
/////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////
commit:88acb0e
/////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////
0: import org.apache.activemq.wireformat.ObjectStreamWireFormat;
0: import org.apache.activemq.wireformat.WireFormat;
/////////////////////////////////////////////////////////////////////////
0:                     ((JDBCPersistenceAdapter)adapter).getWireFormat() instanceof ObjectStreamWireFormat);
commit:57b4941
/////////////////////////////////////////////////////////////////////////
1:  * Licensed to the Apache Software Foundation (ASF) under one or more
1:  * contributor license agreements.  See the NOTICE file distributed with
1:  * this work for additional information regarding copyright ownership.
1:  * The ASF licenses this file to You under the Apache License, Version 2.0
1:  * (the "License"); you may not use this file except in compliance with
1:  * the License.  You may obtain a copy of the License at
author:Adrian T. Co
-------------------------------------------------------------------------------
commit:beaca8a
/////////////////////////////////////////////////////////////////////////
0:         File derbyFile = new File(DERBY_ROOT + "testJDBCConfig/derbydb"); // Default derby name
1:         recursiveDelete(derbyFile);
author:James Strachan
-------------------------------------------------------------------------------
commit:a677c21
/////////////////////////////////////////////////////////////////////////
1: /**
0:  *
0:  * Copyright 2005-2006 The Apache Software Foundation
0:  *
0:  * Licensed under the Apache License, Version 2.0 (the "License");
0:  * you may not use this file except in compliance with the License.
0:  * You may obtain a copy of the License at
0:  *
0:  * http://www.apache.org/licenses/LICENSE-2.0
0:  *
1:  * Unless required by applicable law or agreed to in writing, software
1:  * distributed under the License is distributed on an "AS IS" BASIS,
1:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:  * See the License for the specific language governing permissions and
1:  * limitations under the License.
1:  */
1: package org.apache.activemq.config;
1: 
1: import java.io.File;
1: import java.util.List;
1: 
0: import junit.framework.TestCase;
1: 
0: import org.apache.activeio.command.DefaultWireFormat;
0: import org.apache.activeio.command.WireFormat;
1: import org.apache.activemq.broker.BrokerService;
1: import org.apache.activemq.broker.TransportConnector;
1: import org.apache.activemq.broker.region.policy.FixedSizedSubscriptionRecoveryPolicy;
1: import org.apache.activemq.broker.region.policy.LastImageSubscriptionRecoveryPolicy;
1: import org.apache.activemq.broker.region.policy.NoSubscriptionRecoveryPolicy;
1: import org.apache.activemq.broker.region.policy.RoundRobinDispatchPolicy;
1: import org.apache.activemq.broker.region.policy.SimpleDispatchPolicy;
1: import org.apache.activemq.broker.region.policy.StrictOrderDispatchPolicy;
1: import org.apache.activemq.broker.region.policy.SubscriptionRecoveryPolicy;
1: import org.apache.activemq.broker.region.policy.TimedSubscriptionRecoveryPolicy;
1: import org.apache.activemq.command.ActiveMQTopic;
0: import org.apache.activemq.memory.UsageManager;
0: import org.apache.activemq.openwire.OpenWireFormat;
1: import org.apache.activemq.store.PersistenceAdapter;
1: import org.apache.activemq.store.jdbc.JDBCPersistenceAdapter;
1: import org.apache.activemq.store.journal.JournalPersistenceAdapter;
1: import org.apache.activemq.store.memory.MemoryPersistenceAdapter;
0: import org.apache.activemq.transport.activeio.ActiveIOTransportServer;
1: import org.apache.activemq.transport.tcp.TcpTransportServer;
1: import org.apache.activemq.xbean.BrokerFactoryBean;
0: import org.apache.commons.logging.Log;
0: import org.apache.commons.logging.LogFactory;
0: import org.apache.derby.jdbc.EmbeddedDataSource;
1: import org.springframework.core.io.ClassPathResource;
1: import org.springframework.core.io.FileSystemResource;
1: import org.springframework.core.io.Resource;
1: 
1: /**
0:  * @version $Revision$
1:  */
0: public class ConfigTest extends TestCase {
1:     
0:     private static final Log log = LogFactory.getLog(ConfigTest.class);
1:     
1:     protected static final String JOURNAL_ROOT = "target/test-data/";
1:     protected static final String DERBY_ROOT = "target/test-data/";
1:     protected static final String CONF_ROOT = "src/test/resources/org/apache/activemq/config/sample-conf/";
1: 
1:     static {
1:         System.setProperty("javax.net.ssl.trustStore", "src/test/resources/client.keystore");
1:         System.setProperty("javax.net.ssl.trustStorePassword", "password");
1:         System.setProperty("javax.net.ssl.trustStoreType", "jks");
1:         System.setProperty("javax.net.ssl.keyStore", "src/test/resources/server.keystore");
1:         System.setProperty("javax.net.ssl.keyStorePassword", "password");
1:         System.setProperty("javax.net.ssl.keyStoreType", "jks");
1:     }
1: 
1:     /*
0:      * IMPORTANT NOTE: Assertions checking for the existence of the derby directory will fail if the first derby
0:      *                 directory is not created under target/test-data/. The test in unable to change the derby
0:      *                 root directory for succeeding creation. It uses the first created directory as the root.
1:      */
1: 
1:     /*
0:      * This tests creating a journal persistence adapter using the persistence adapter factory bean
1:      */
1:     public void testJournaledJDBCConfig() throws Exception {
0:         System.out.print("Checking journaled JDBC persistence adapter configuration... ");
1: 
1:         File journalFile = new File(JOURNAL_ROOT + "testJournaledJDBCConfig/journal");
1:         recursiveDelete(journalFile);
1: 
0:         File derbyFile = new File(DERBY_ROOT + "testJournaledJDBCConfig/derbydb"); // Default derby name
1:         recursiveDelete(derbyFile);
1: 
1:         BrokerService broker;
1:         broker = createBroker(new FileSystemResource(CONF_ROOT + "journaledjdbc-example.xml"));
1:         try {
1:             assertEquals("Broker Config Error (brokerName)", "brokerJournaledJDBCConfigTest", broker.getBrokerName());
1: 
1:             PersistenceAdapter adapter = broker.getPersistenceAdapter();
1: 
1:             assertTrue("Should have created a journal persistence adapter", adapter instanceof JournalPersistenceAdapter);
1:             assertTrue("Should have created a derby directory at " + derbyFile.getAbsolutePath(), derbyFile.exists());
1:             assertTrue("Should have created a journal directory at " + journalFile.getAbsolutePath(), journalFile.exists());
1: 
1:             
1:             // Check persistence factory configurations
0:             System.out.print("Checking persistence adapter factory settings... ");
0:             JournalPersistenceAdapter pa = (JournalPersistenceAdapter) broker.getPersistenceAdapter();
1:             
0:             log.info("Success");
1:         } finally {
1:             if (broker != null) {
1:                 broker.stop();
1:             }
1:         }
1:     }
1: 
1:     /*
0:      * This tests creating a jdbc persistence adapter using xbeans-spring
1:      */
0:     public void testJdbcConfig() throws Exception {
0:         System.out.print("Checking jdbc persistence adapter configuration... ");
1: 
1:         BrokerService broker;
0:         broker = createBroker(new FileSystemResource(CONF_ROOT + "jdbc-example.xml"));
1:         try {
0:             assertEquals("Broker Config Error (brokerName)", "brokerJdbcConfigTest", broker.getBrokerName());
1: 
1:             PersistenceAdapter adapter = broker.getPersistenceAdapter();
1: 
0:             assertTrue("Should have created a jdbc persistence adapter", adapter instanceof JDBCPersistenceAdapter);
0:             assertEquals("JDBC Adapter Config Error (cleanupPeriod)", 60000,
0:                     ((JDBCPersistenceAdapter)adapter).getCleanupPeriod());
0:             assertTrue("Should have created an EmbeddedDataSource",
0:                     ((JDBCPersistenceAdapter)adapter).getDataSource() instanceof EmbeddedDataSource);
0:             assertTrue("Should have created a DefaultWireFormat",
0:                     ((JDBCPersistenceAdapter)adapter).getWireFormat() instanceof DefaultWireFormat);
1: 
0:             log.info("Success");
1:         } finally {
1:             if (broker != null) {
1:                 broker.stop();
1:             }
1:         }
1:     }
1: 
1:     /*
0:      * This tests configuring the different broker properties using xbeans-spring
1:      */
1:     public void testBrokerConfig() throws Exception {
1:         ActiveMQTopic dest;
1:         BrokerService broker;
1: 
1:         File journalFile = new File(JOURNAL_ROOT);
1:         recursiveDelete(journalFile);
1: 
1:         // Create broker from resource
0:         System.out.print("Creating broker... ");
1:         broker = createBroker("org/apache/activemq/config/example.xml");
0:         log.info("Success");
1: 
1:         try {
1:             // Check broker configuration
0:             System.out.print("Checking broker configurations... ");
1:             assertEquals("Broker Config Error (brokerName)", "brokerConfigTest", broker.getBrokerName());
1:             assertEquals("Broker Config Error (populateJMSXUserID)", false, broker.isPopulateJMSXUserID());
1:             assertEquals("Broker Config Error (useLoggingForShutdownErrors)", true, broker.isUseLoggingForShutdownErrors());
1:             assertEquals("Broker Config Error (useJmx)", true, broker.isUseJmx());
1:             assertEquals("Broker Config Error (persistent)", false, broker.isPersistent());
1:             assertEquals("Broker Config Error (useShutdownHook)", false, broker.isUseShutdownHook());
1:             assertEquals("Broker Config Error (deleteAllMessagesOnStartup)", true, broker.isDeleteAllMessagesOnStartup());
0:             log.info("Success");
1: 
1:             // Check specific vm transport
0:             System.out.print("Checking vm connector... ");
1:             assertEquals("Should have a specific VM Connector", "vm://javacoola", broker.getVmConnectorURI().toString());
0:             log.info("Success");
1: 
1:             // Check transport connectors list
0:             System.out.print("Checking transport connectors... ");
0:             List connectors = broker.getTransportConnectors();
0:             assertTrue("Should have created at least 4 connectors", (connectors.size() >= 4));
0:             assertTrue ("1st connector should be TcpTransportServer", ((TransportConnector)connectors.get(0)).getServer() instanceof TcpTransportServer);
0:             assertTrue ("2nd connector should be TcpTransportServer", ((TransportConnector)connectors.get(1)).getServer() instanceof TcpTransportServer);
0:             assertTrue ("3rd connector should be TcpTransportServer", ((TransportConnector)connectors.get(2)).getServer() instanceof TcpTransportServer);
0:             assertTrue ("4th connector should be ActiveIOTransportServer", ((TransportConnector)connectors.get(3)).getServer() instanceof ActiveIOTransportServer);
1: 
0:             // Check spring configured transport server (last transport connector only)
0:             ActiveIOTransportServer myTransportServer = (ActiveIOTransportServer)((TransportConnector)connectors.get(3)).getServer();
0:             assertEquals("URI should be ssl", "ssl://localhost:61634", myTransportServer.getConnectURI().toString());
0:             assertEquals("Error transport server config (stopTimeout)", 5000, myTransportServer.getStopTimeout());
1: 
0:             // Check spring configured wire format factory
0:             WireFormat myWireFormat = myTransportServer.getWireFormatFactory().createWireFormat();
0:             assertTrue("WireFormat should be OpenWireFormat", myWireFormat instanceof OpenWireFormat);
0:             assertEquals("WireFormat Config Error (stackTraceEnabled)", false, ((OpenWireFormat)myWireFormat).getPreferedWireFormatInfo().isStackTraceEnabled());
0:             assertEquals("WireFormat Config Error (tcpNoDelayEnabled)", true, ((OpenWireFormat)myWireFormat).getPreferedWireFormatInfo().isTcpNoDelayEnabled());
0:             assertEquals("WireFormat Config Error (cacheEnabled)", false, ((OpenWireFormat)myWireFormat).getPreferedWireFormatInfo().isCacheEnabled());
0:             log.info("Success");
1: 
1:             // Check network connectors
0:             System.out.print("Checking network connectors... ");
0:             List networkConnectors = broker.getNetworkConnectors();
1:             assertEquals("Should have a single network connector", 1, networkConnectors.size());
0:             log.info("Success");
1: 
1:             // Check dispatch policy configuration
0:             System.out.print("Checking dispatch policies... ");
1: 
1:             dest = new ActiveMQTopic("Topic.SimpleDispatch");
1:             assertTrue("Should have a simple dispatch policy for " + dest.getTopicName(),
0:                     broker.getDestinationPolicy().getEntryFor(dest).getDispatchPolicy() instanceof SimpleDispatchPolicy);
1: 
1:             dest = new ActiveMQTopic("Topic.RoundRobinDispatch");
1:             assertTrue("Should have a round robin dispatch policy for " + dest.getTopicName(),
0:                     broker.getDestinationPolicy().getEntryFor(dest).getDispatchPolicy() instanceof RoundRobinDispatchPolicy);
1: 
1:             dest = new ActiveMQTopic("Topic.StrictOrderDispatch");
1:             assertTrue("Should have a strict order dispatch policy for " + dest.getTopicName(),
0:                     broker.getDestinationPolicy().getEntryFor(dest).getDispatchPolicy() instanceof StrictOrderDispatchPolicy);
0:             log.info("Success");
1: 
1:             // Check subscription policy configuration
0:             System.out.print("Checking subscription recovery policies... ");
1:             SubscriptionRecoveryPolicy subsPolicy;
1: 
1:             dest = new ActiveMQTopic("Topic.FixedSizedSubs");
1:             subsPolicy = broker.getDestinationPolicy().getEntryFor(dest).getSubscriptionRecoveryPolicy();
0:             assertTrue("Should have a fixed sized subscription recovery policy for " + dest.getTopicName(),
0:                   subsPolicy instanceof FixedSizedSubscriptionRecoveryPolicy);
0:             assertEquals("FixedSizedSubsPolicy Config Error (maximumSize)", 2000000,
0:                   ((FixedSizedSubscriptionRecoveryPolicy)subsPolicy).getMaximumSize());
0:             assertEquals("FixedSizedSubsPolicy Config Error (useSharedBuffer)", false,
0:                   ((FixedSizedSubscriptionRecoveryPolicy)subsPolicy).isUseSharedBuffer());
1: 
1:             dest = new ActiveMQTopic("Topic.LastImageSubs");
1:             subsPolicy = broker.getDestinationPolicy().getEntryFor(dest).getSubscriptionRecoveryPolicy();
0:             assertTrue("Should have a last image subscription recovery policy for " + dest.getTopicName(),
0:                     subsPolicy instanceof LastImageSubscriptionRecoveryPolicy);
1: 
1:             dest = new ActiveMQTopic("Topic.NoSubs");
1:             subsPolicy = broker.getDestinationPolicy().getEntryFor(dest).getSubscriptionRecoveryPolicy();
0:             assertTrue("Should have no subscription recovery policy for " + dest.getTopicName(),
0:                     subsPolicy instanceof NoSubscriptionRecoveryPolicy);
1: 
1:             dest = new ActiveMQTopic("Topic.TimedSubs");
1:             subsPolicy = broker.getDestinationPolicy().getEntryFor(dest).getSubscriptionRecoveryPolicy();
0:             assertTrue("Should have a timed subscription recovery policy for " + dest.getTopicName(),
0:                     subsPolicy instanceof TimedSubscriptionRecoveryPolicy);
0:             assertEquals("TimedSubsPolicy Config Error (recoverDuration)", 25000,
0:                     ((TimedSubscriptionRecoveryPolicy)subsPolicy).getRecoverDuration());
0:             log.info("Success");
1: 
1:             // Check usage manager
0:             System.out.print("Checking memory manager configurations... ");
0:             UsageManager memMgr = broker.getMemoryManager();
0:             assertTrue("Should have a memory manager", memMgr != null);
0:             assertEquals("UsageManager Config Error (limit)", 200000, memMgr.getLimit());
0:             assertEquals("UsageManager Config Error (percentUsageMinDelta)", 20, memMgr.getPercentUsageMinDelta());
0:             log.info("Success");
1: 
0:             log.info("Success");
1:         } finally {
1:             if (broker != null) {
1:                 broker.stop();
1:             }
1:         }
1:     }
1: 
1:     /*
1:      * This tests creating a journal persistence adapter using xbeans-spring
1:      */
1:     public void testJournalConfig() throws Exception {
0:         System.out.print("Checking journal persistence adapter configuration... ");
1: 
1:         File journalFile = new File(JOURNAL_ROOT + "testJournalConfig/journal");
1:         recursiveDelete(journalFile);
1: 
1:         BrokerService broker;
1:         broker = createBroker(new FileSystemResource(CONF_ROOT + "journal-example.xml"));
1:         try {
1:             assertEquals("Broker Config Error (brokerName)", "brokerJournalConfigTest", broker.getBrokerName());
1: 
1:             PersistenceAdapter adapter = broker.getPersistenceAdapter();
1: 
1:             assertTrue("Should have created a journal persistence adapter", adapter instanceof JournalPersistenceAdapter);
1:             assertTrue("Should have created a journal directory at " + journalFile.getAbsolutePath(), journalFile.exists());
1: 
0:             log.info("Success");
1:         } finally {
1:             if (broker != null) {
1:                 broker.stop();
1:             }
1:         }
1:     }
1: 
1:     /*
1:      * This tests creating a memory persistence adapter using xbeans-spring
1:      */
1:     public void testMemoryConfig() throws Exception {
0:         System.out.print("Checking memory persistence adapter configuration... ");
1: 
1:         File journalFile = new File(JOURNAL_ROOT + "testMemoryConfig");
1:         recursiveDelete(journalFile);
1: 
1:         File derbyFile = new File(DERBY_ROOT + "testMemoryConfig");
1:         recursiveDelete(derbyFile);
1: 
1:         BrokerService broker;
1:         broker = createBroker(new FileSystemResource(CONF_ROOT + "memory-example.xml"));
1: 
1:         try {
1:             assertEquals("Broker Config Error (brokerName)", "brokerMemoryConfigTest", broker.getBrokerName());
1: 
1:             PersistenceAdapter adapter = broker.getPersistenceAdapter();
1: 
1:             assertTrue("Should have created a memory persistence adapter", adapter instanceof MemoryPersistenceAdapter);
1:             assertTrue("Should have not created a derby directory at " + derbyFile.getAbsolutePath(), !derbyFile.exists());
1:             assertTrue("Should have not created a journal directory at " + journalFile.getAbsolutePath(), !journalFile.exists());
1: 
0:             log.info("Success");
1:         } finally {
1:             if (broker != null) {
1:                 broker.stop();
1:             }
1:         }
1: 
1:     }
1: 
1:     public void testXmlConfigHelper() throws Exception {
1:         BrokerService broker;
1: 
1:         broker = createBroker(new FileSystemResource(CONF_ROOT + "memory-example.xml"));
1:         try {
1:             assertEquals("Broker Config Error (brokerName)", "brokerMemoryConfigTest", broker.getBrokerName());
1:         } finally {
1:             if (broker != null) {
1:                 broker.stop();
1:             }
1:         }
1: 
1:         broker = createBroker("org/apache/activemq/config/config.xml");
1:         try {
1:             assertEquals("Broker Config Error (brokerName)", "brokerXmlConfigHelper", broker.getBrokerName());
1:         } finally {
1:             if (broker != null) {
1:                 broker.stop();
1:             }
1:         }
1:     }
1: 
1:     /*
1:      * TODO: Create additional tests for forwarding bridges
1:      */
1: 
1:     protected static void recursiveDelete(File file) {
0:         if( file.isDirectory() ) {
1:             File[] files = file.listFiles();
1:             for (int i = 0; i < files.length; i++) {
1:                 recursiveDelete(files[i]);
1:             }
1:         }
1:         file.delete();
1:     }
1: 
1:     protected BrokerService createBroker(String resource) throws Exception {
1:         return createBroker(new ClassPathResource(resource));
1:     }
1: 
1:     protected BrokerService createBroker(Resource resource) throws Exception {
1:         BrokerFactoryBean factory = new BrokerFactoryBean(resource);
1:         factory.afterPropertiesSet();
1: 
1:         BrokerService broker = factory.getBroker();
1: 
1:         assertTrue("Should have a broker!", broker != null);
1: 
0:         //Broker is already started by default when using the XML file
0:        // broker.start();
1: 
1:         return broker;
1:     }
1: }
============================================================================