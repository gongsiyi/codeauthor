1:b92a315: /**
1:b92a315:  * Licensed to the Apache Software Foundation (ASF) under one or more
1:b92a315:  * contributor license agreements.  See the NOTICE file distributed with
1:b92a315:  * this work for additional information regarding copyright ownership.
1:b92a315:  * The ASF licenses this file to You under the Apache License, Version 2.0
1:b92a315:  * (the "License"); you may not use this file except in compliance with
1:b92a315:  * the License.  You may obtain a copy of the License at
1:b92a315:  *
1:b92a315:  *      http://www.apache.org/licenses/LICENSE-2.0
1:b92a315:  *
1:b92a315:  * Unless required by applicable law or agreed to in writing, software
1:b92a315:  * distributed under the License is distributed on an "AS IS" BASIS,
1:b92a315:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:b92a315:  * See the License for the specific language governing permissions and
1:b92a315:  * limitations under the License.
1:b92a315:  */
1:b92a315: package org.apache.activemq.camel.component.broker;
1:b92a315: 
1:b92a315: import org.apache.activemq.broker.ProducerBrokerExchange;
1:b92a315: import org.apache.activemq.broker.inteceptor.MessageInterceptor;
1:b92a315: import org.apache.activemq.command.Message;
1:b92a315: import org.apache.camel.Endpoint;
1:b92a315: import org.apache.camel.Exchange;
1:b92a315: import org.apache.camel.ExchangePattern;
1:b92a315: import org.apache.camel.Processor;
1:b92a315: import org.apache.camel.component.jms.JmsBinding;
1:b92a315: import org.apache.camel.impl.DefaultConsumer;
1:b92a315: 
1:b92a315: public class BrokerConsumer extends DefaultConsumer implements MessageInterceptor {
1:b92a315:     private final JmsBinding jmsBinding = new JmsBinding();
1:b92a315: 
1:b92a315:     public BrokerConsumer(Endpoint endpoint, Processor processor) {
1:b92a315:         super(endpoint, processor);
1:b92a315:     }
1:b92a315: 
1:b92a315:     @Override
1:b92a315:     protected void doStart() throws Exception {
1:b92a315:         super.doStart();
1:b92a315:         ((BrokerEndpoint) getEndpoint()).addMessageInterceptor(this);
1:b92a315:     }
1:b92a315: 
1:b92a315:     @Override
1:b92a315:     protected void doStop() throws Exception {
1:b92a315:         ((BrokerEndpoint) getEndpoint()).removeMessageInterceptor(this);
1:b92a315:         super.doStop();
1:b92a315:     }
1:b92a315: 
1:b92a315:     @Override
1:b92a315:     public void intercept(ProducerBrokerExchange producerExchange, Message message) {
1:b92a315:         Exchange exchange = getEndpoint().createExchange(ExchangePattern.InOnly);
1:b92a315: 
1:b92a315:         exchange.setIn(new BrokerJmsMessage((javax.jms.Message) message, jmsBinding));
1:b92a315:         exchange.setProperty(Exchange.BINDING, jmsBinding);
1:b92a315:         exchange.setProperty(BrokerEndpoint.PRODUCER_BROKER_EXCHANGE, producerExchange);
1:b92a315:         try {
1:b92a315:             getProcessor().process(exchange);
1:b92a315:         } catch (Exception e) {
1:5469d80:             exchange.setException(e);
1:5469d80:         }
1:5469d80: 
1:5469d80:         if (exchange.getException() != null) {
1:5469d80:             getExceptionHandler().handleException("Error processing intercepted message: " + message, exchange, exchange.getException());
1:b92a315:         }
1:b92a315:     }
1:5469d80: 
1:b92a315: }
============================================================================
author:Claus Ibsen
-------------------------------------------------------------------------------
commit:5469d80
/////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////
1:             exchange.setException(e);
1:         }
1: 
1:         if (exchange.getException() != null) {
1:             getExceptionHandler().handleException("Error processing intercepted message: " + message, exchange, exchange.getException());
1: 
author:Robert Davies
-------------------------------------------------------------------------------
commit:b92a315
/////////////////////////////////////////////////////////////////////////
1: /**
1:  * Licensed to the Apache Software Foundation (ASF) under one or more
1:  * contributor license agreements.  See the NOTICE file distributed with
1:  * this work for additional information regarding copyright ownership.
1:  * The ASF licenses this file to You under the Apache License, Version 2.0
1:  * (the "License"); you may not use this file except in compliance with
1:  * the License.  You may obtain a copy of the License at
1:  *
1:  *      http://www.apache.org/licenses/LICENSE-2.0
1:  *
1:  * Unless required by applicable law or agreed to in writing, software
1:  * distributed under the License is distributed on an "AS IS" BASIS,
1:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:  * See the License for the specific language governing permissions and
1:  * limitations under the License.
1:  */
1: package org.apache.activemq.camel.component.broker;
1: 
1: import org.apache.activemq.broker.ProducerBrokerExchange;
1: import org.apache.activemq.broker.inteceptor.MessageInterceptor;
1: import org.apache.activemq.command.Message;
1: import org.apache.camel.Endpoint;
1: import org.apache.camel.Exchange;
1: import org.apache.camel.ExchangePattern;
1: import org.apache.camel.Processor;
1: import org.apache.camel.component.jms.JmsBinding;
1: import org.apache.camel.impl.DefaultConsumer;
0: import org.slf4j.Logger;
0: import org.slf4j.LoggerFactory;
1: 
1: public class BrokerConsumer extends DefaultConsumer implements MessageInterceptor {
0:     protected final transient Logger logger = LoggerFactory.getLogger(BrokerConsumer.class);
1:     private final JmsBinding jmsBinding = new JmsBinding();
1: 
1:     public BrokerConsumer(Endpoint endpoint, Processor processor) {
1:         super(endpoint, processor);
1:     }
1: 
1:     @Override
1:     protected void doStart() throws Exception {
1:         super.doStart();
1:         ((BrokerEndpoint) getEndpoint()).addMessageInterceptor(this);
1:     }
1: 
1:     @Override
1:     protected void doStop() throws Exception {
1:         ((BrokerEndpoint) getEndpoint()).removeMessageInterceptor(this);
1:         super.doStop();
1:     }
1: 
1:     @Override
1:     public void intercept(ProducerBrokerExchange producerExchange, Message message) {
1:         Exchange exchange = getEndpoint().createExchange(ExchangePattern.InOnly);
1: 
1:         exchange.setIn(new BrokerJmsMessage((javax.jms.Message) message, jmsBinding));
1:         exchange.setProperty(Exchange.BINDING, jmsBinding);
1:         exchange.setProperty(BrokerEndpoint.PRODUCER_BROKER_EXCHANGE, producerExchange);
1:         try {
1:             getProcessor().process(exchange);
1:         } catch (Exception e) {
0:             logger.error("Failed to process " + exchange, e);
1:         }
1:     }
1: }
============================================================================