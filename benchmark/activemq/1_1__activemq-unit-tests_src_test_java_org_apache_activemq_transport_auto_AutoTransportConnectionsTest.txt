1:e14aca8: /**
1:e14aca8:  * Licensed to the Apache Software Foundation (ASF) under one or more
1:e14aca8:  * contributor license agreements.  See the NOTICE file distributed with
1:e14aca8:  * this work for additional information regarding copyright ownership.
1:e14aca8:  * The ASF licenses this file to You under the Apache License, Version 2.0
1:e14aca8:  * (the "License"); you may not use this file except in compliance with
1:e14aca8:  * the License.  You may obtain a copy of the License at
1:e14aca8:  *
1:e14aca8:  *      http://www.apache.org/licenses/LICENSE-2.0
1:e14aca8:  *
1:e14aca8:  * Unless required by applicable law or agreed to in writing, software
1:e14aca8:  * distributed under the License is distributed on an "AS IS" BASIS,
1:e14aca8:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:e14aca8:  * See the License for the specific language governing permissions and
1:e14aca8:  * limitations under the License.
1:e14aca8:  */
1:e14aca8: package org.apache.activemq.transport.auto;
1:e14aca8: 
1:e14aca8: import static org.junit.Assert.assertEquals;
1:e14aca8: import static org.junit.Assert.assertTrue;
1:e14aca8: 
1:e14aca8: import java.util.Arrays;
1:e14aca8: import java.util.Collection;
1:e14aca8: import java.util.concurrent.CountDownLatch;
1:e14aca8: import java.util.concurrent.ExecutorService;
1:e14aca8: import java.util.concurrent.Executors;
1:7e648d5: import java.util.concurrent.TimeUnit;
1:7e648d5: import java.util.concurrent.atomic.AtomicInteger;
1:e14aca8: 
1:e14aca8: import javax.jms.Connection;
1:e14aca8: import javax.jms.ConnectionFactory;
1:e14aca8: 
1:e14aca8: import org.apache.activemq.ActiveMQConnectionFactory;
1:e14aca8: import org.apache.activemq.broker.BrokerService;
1:e14aca8: import org.apache.activemq.broker.TransportConnector;
1:e14aca8: import org.apache.activemq.transport.tcp.TcpTransportServer;
1:e14aca8: import org.apache.activemq.util.Wait;
1:7e648d5: import org.apache.activemq.util.Wait.Condition;
1:e14aca8: import org.junit.After;
1:e14aca8: import org.junit.Before;
1:7e648d5: import org.junit.Rule;
1:e14aca8: import org.junit.Test;
1:7e648d5: import org.junit.rules.Timeout;
1:e14aca8: import org.junit.runner.RunWith;
1:e14aca8: import org.junit.runners.Parameterized;
1:e14aca8: import org.junit.runners.Parameterized.Parameters;
1:e14aca8: 
1:e14aca8: @RunWith(Parameterized.class)
1:7e648d5: public class AutoTransportConnectionsTest {
1:7e648d5: 
1:7e648d5:     @Rule
1:7e648d5:     public Timeout globalTimeout = new Timeout(60, TimeUnit.SECONDS);
1:e14aca8: 
1:e14aca8:     public static final String KEYSTORE_TYPE = "jks";
1:e14aca8:     public static final String PASSWORD = "password";
1:e14aca8:     public static final String SERVER_KEYSTORE = "src/test/resources/server.keystore";
1:e14aca8:     public static final String TRUST_KEYSTORE = "src/test/resources/client.keystore";
1:e14aca8:     private static final int maxConnections = 20;
1:e14aca8: 
1:e14aca8:     private final ExecutorService executor = Executors.newCachedThreadPool();
1:e14aca8:     private String connectionUri;
1:e14aca8:     private BrokerService service;
1:e14aca8:     private TransportConnector connector;
1:e14aca8:     private final String transportType;
1:e14aca8: 
1:7e648d5:     @Parameters(name="transport={0}")
1:e14aca8:     public static Collection<Object[]> data() {
1:e14aca8:         return Arrays.asList(new Object[][] {
1:e14aca8:                 {"auto"},
1:e14aca8:                 {"auto+nio"},
1:e14aca8:                 {"auto+ssl"},
1:e14aca8:                 {"auto+nio+ssl"},
1:e14aca8:             });
2:e14aca8:     }
1:e14aca8: 
1:e14aca8: 
1:7e648d5:     public AutoTransportConnectionsTest(String transportType) {
1:e14aca8:         super();
1:e14aca8:         this.transportType = transportType;
1:69fad2a:     }
1:e14aca8: 
1:e14aca8: 
1:e14aca8:     @Before
1:e14aca8:     public void setUp() throws Exception {
1:e14aca8:         System.setProperty("javax.net.ssl.trustStore", TRUST_KEYSTORE);
1:e14aca8:         System.setProperty("javax.net.ssl.trustStorePassword", PASSWORD);
1:e14aca8:         System.setProperty("javax.net.ssl.trustStoreType", KEYSTORE_TYPE);
1:e14aca8:         System.setProperty("javax.net.ssl.keyStore", SERVER_KEYSTORE);
1:e14aca8:         System.setProperty("javax.net.ssl.keyStorePassword", PASSWORD);
1:e14aca8:         System.setProperty("javax.net.ssl.keyStoreType", KEYSTORE_TYPE);
1:e14aca8: 
1:e14aca8:         service = new BrokerService();
1:e14aca8:         service.setPersistent(false);
1:e14aca8:         service.setUseJmx(false);
1:7e648d5:     }
1:7e648d5: 
1:7e648d5:     @After
1:7e648d5:     public void tearDown() throws Exception {
1:7e648d5:         executor.shutdown();
1:7e648d5: 
1:7e648d5:         service.stop();
1:7e648d5:         service.waitUntilStopped();
1:7e648d5:     }
1:7e648d5: 
1:7e648d5:     public void configureConnectorAndStart(String bindAddress) throws Exception {
1:7e648d5:         connector = service.addConnector(bindAddress);
1:e14aca8:         connectionUri = connector.getPublishableConnectString();
1:69fad2a:         if (connectionUri.contains("ssl")) {
1:69fad2a:             connectionUri += connectionUri.contains("?") ? "&socket.verifyHostName=false" : "?socket.verifyHostName=false";
1:69fad2a:         }
1:e14aca8:         service.start();
1:e14aca8:         service.waitUntilStarted();
1:e14aca8:     }
1:e14aca8: 
1:e14aca8:     protected ConnectionFactory createConnectionFactory() throws Exception {
1:e14aca8:         return new ActiveMQConnectionFactory(connectionUri);
1:e14aca8:     }
1:e14aca8: 
1:7e648d5:     @Test
1:e14aca8:     public void testMaxConnectionControl() throws Exception {
1:7e648d5:         configureConnectorAndStart(transportType + "://0.0.0.0:0?maxConnectionThreadPoolSize=10&maximumConnections="+maxConnections);
1:7e648d5: 
1:e14aca8:         final ConnectionFactory cf = createConnectionFactory();
1:e14aca8:         final CountDownLatch startupLatch = new CountDownLatch(1);
1:e14aca8: 
1:d2bd152:         //create an extra 10 connections above max
1:d2bd152:         for(int i = 0; i < maxConnections + 10; i++) {
1:d2bd152:             final int count = i;
1:e14aca8:             executor.submit(new Runnable() {
1:e14aca8:                 @Override
1:e14aca8:                 public void run() {
1:e14aca8:                     Connection conn = null;
1:e14aca8:                     try {
1:e14aca8:                         startupLatch.await();
1:d2bd152:                         //sleep for a short period of time
1:d2bd152:                         Thread.sleep(count * 3);
1:e14aca8:                         conn = cf.createConnection();
1:e14aca8:                         conn.start();
1:e14aca8:                     } catch (Exception e) {
1:e14aca8:                     }
1:e14aca8:                 }
1:e14aca8:             });
1:e14aca8:         }
1:e14aca8: 
1:e14aca8:         TcpTransportServer transportServer = (TcpTransportServer)connector.getServer();
1:e14aca8:         // ensure the max connections is in effect
1:e14aca8:         assertEquals(maxConnections, transportServer.getMaximumConnections());
1:e14aca8:         // No connections at first
1:e14aca8:         assertEquals(0, connector.getConnections().size());
1:e14aca8:         // Release the latch to set up connections in parallel
1:e14aca8:         startupLatch.countDown();
1:e14aca8: 
1:e14aca8:         final TransportConnector connector = this.connector;
1:e14aca8: 
1:e14aca8:         // Expect the max connections is created
1:e14aca8:         assertTrue("Expected: " + maxConnections + " found: " + connector.getConnections().size(),
1:e14aca8:             Wait.waitFor(new Wait.Condition() {
1:e14aca8:                 @Override
1:e14aca8:                 public boolean isSatisified() throws Exception {
1:e14aca8:                     return connector.getConnections().size() == maxConnections;
1:e14aca8:                 }
1:e14aca8:             })
1:e14aca8:         );
1:e14aca8: 
1:e14aca8:     }
1:e14aca8: 
1:7e648d5:     @Test
1:7e648d5:     public void testConcurrentConnections() throws Exception {
1:7e648d5:         configureConnectorAndStart(transportType + "://0.0.0.0:0");
1:e14aca8: 
1:7e648d5:         int connectionAttempts = 50;
1:7e648d5:         ConnectionFactory factory = createConnectionFactory();
1:7e648d5:         final AtomicInteger connectedCount = new AtomicInteger(0);
1:7e648d5:         final CountDownLatch latch = new CountDownLatch(1);
1:7e648d5: 
1:7e648d5:         try {
1:7e648d5:             for (int i = 0; i < connectionAttempts; i++) {
1:7e648d5:                 executor.execute(new Runnable() {
1:7e648d5: 
1:7e648d5:                     @Override
1:7e648d5:                     public void run() {
1:7e648d5:                         try {
1:7e648d5:                             latch.await();
1:7e648d5:                             Connection con = factory.createConnection();
1:7e648d5:                             con.start();
1:7e648d5:                             connectedCount.incrementAndGet();
1:7e648d5:                         } catch (Exception e) {
1:7e648d5:                             //print for debugging but don't fail it might just be the transport stopping
1:7e648d5:                             e.printStackTrace();
1:7e648d5:                         }
1:7e648d5: 
1:7e648d5:                     }
1:7e648d5:                 });
1:7e648d5:             }
1:7e648d5:             latch.countDown();
1:7e648d5: 
1:7e648d5:             //Make sure all attempts connected without error
1:7e648d5:             assertTrue(Wait.waitFor(new Condition() {
1:7e648d5: 
1:7e648d5:                 @Override
1:7e648d5:                 public boolean isSatisified() throws Exception {
1:7e648d5:                     return connectedCount.get() == connectionAttempts;
1:7e648d5:                 }
1:7e648d5:             }));
1:7e648d5: 
1:7e648d5:         } catch (Exception e) {
1:7e648d5:             //print for debugging but don't fail it might just be the transport stopping
1:7e648d5:             e.printStackTrace();
1:7e648d5:         }
1:e14aca8:     }
1:e14aca8: }
============================================================================
author:Christopher L. Shannon (cshannon)
-------------------------------------------------------------------------------
commit:1e31df9
/////////////////////////////////////////////////////////////////////////
commit:69fad2a
/////////////////////////////////////////////////////////////////////////
0:         if (bindAddress.contains("ssl")) {
0:             bindAddress += bindAddress.contains("?") ? "&transport.verifyHostName=false" : "?transport.verifyHostName=false";
1:         }
1:         if (connectionUri.contains("ssl")) {
1:             connectionUri += connectionUri.contains("?") ? "&socket.verifyHostName=false" : "?socket.verifyHostName=false";
1:         }
commit:7e648d5
/////////////////////////////////////////////////////////////////////////
1: import java.util.concurrent.TimeUnit;
1: import java.util.concurrent.atomic.AtomicInteger;
/////////////////////////////////////////////////////////////////////////
1: import org.apache.activemq.util.Wait.Condition;
1: import org.junit.Rule;
1: import org.junit.rules.Timeout;
1: public class AutoTransportConnectionsTest {
1: 
1:     @Rule
1:     public Timeout globalTimeout = new Timeout(60, TimeUnit.SECONDS);
/////////////////////////////////////////////////////////////////////////
1:     @Parameters(name="transport={0}")
/////////////////////////////////////////////////////////////////////////
1:     public AutoTransportConnectionsTest(String transportType) {
/////////////////////////////////////////////////////////////////////////
1:     }
1: 
1:     @After
1:     public void tearDown() throws Exception {
1:         executor.shutdown();
1: 
1:         service.stop();
1:         service.waitUntilStopped();
1:     }
1: 
1:     public void configureConnectorAndStart(String bindAddress) throws Exception {
1:         connector = service.addConnector(bindAddress);
/////////////////////////////////////////////////////////////////////////
1:     @Test
1:         configureConnectorAndStart(transportType + "://0.0.0.0:0?maxConnectionThreadPoolSize=10&maximumConnections="+maxConnections);
1: 
/////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////
1:     @Test
1:     public void testConcurrentConnections() throws Exception {
1:         configureConnectorAndStart(transportType + "://0.0.0.0:0");
1:         int connectionAttempts = 50;
1:         ConnectionFactory factory = createConnectionFactory();
1:         final AtomicInteger connectedCount = new AtomicInteger(0);
1:         final CountDownLatch latch = new CountDownLatch(1);
1: 
1:         try {
1:             for (int i = 0; i < connectionAttempts; i++) {
1:                 executor.execute(new Runnable() {
1: 
1:                     @Override
1:                     public void run() {
1:                         try {
1:                             latch.await();
1:                             Connection con = factory.createConnection();
1:                             con.start();
1:                             connectedCount.incrementAndGet();
1:                         } catch (Exception e) {
1:                             //print for debugging but don't fail it might just be the transport stopping
1:                             e.printStackTrace();
1:                         }
1: 
1:                     }
1:                 });
1:             }
1:             latch.countDown();
1: 
1:             //Make sure all attempts connected without error
1:             assertTrue(Wait.waitFor(new Condition() {
1: 
1:                 @Override
1:                 public boolean isSatisified() throws Exception {
1:                     return connectedCount.get() == connectionAttempts;
1:                 }
1:             }));
1: 
1:         } catch (Exception e) {
1:             //print for debugging but don't fail it might just be the transport stopping
1:             e.printStackTrace();
1:         }
commit:d2bd152
/////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////
0:     @Test(timeout=60000)
1:         //create an extra 10 connections above max
1:         for(int i = 0; i < maxConnections + 10; i++) {
1:             final int count = i;
1:                         //sleep for a short period of time
1:                         Thread.sleep(count * 3);
commit:e14aca8
/////////////////////////////////////////////////////////////////////////
1: /**
1:  * Licensed to the Apache Software Foundation (ASF) under one or more
1:  * contributor license agreements.  See the NOTICE file distributed with
1:  * this work for additional information regarding copyright ownership.
1:  * The ASF licenses this file to You under the Apache License, Version 2.0
1:  * (the "License"); you may not use this file except in compliance with
1:  * the License.  You may obtain a copy of the License at
1:  *
1:  *      http://www.apache.org/licenses/LICENSE-2.0
1:  *
1:  * Unless required by applicable law or agreed to in writing, software
1:  * distributed under the License is distributed on an "AS IS" BASIS,
1:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:  * See the License for the specific language governing permissions and
1:  * limitations under the License.
1:  */
1: package org.apache.activemq.transport.auto;
1: 
1: import static org.junit.Assert.assertEquals;
1: import static org.junit.Assert.assertTrue;
1: 
1: import java.util.Arrays;
1: import java.util.Collection;
1: import java.util.concurrent.CountDownLatch;
1: import java.util.concurrent.ExecutorService;
1: import java.util.concurrent.Executors;
1: 
1: import javax.jms.Connection;
1: import javax.jms.ConnectionFactory;
1: 
1: import org.apache.activemq.ActiveMQConnectionFactory;
1: import org.apache.activemq.broker.BrokerService;
1: import org.apache.activemq.broker.TransportConnector;
1: import org.apache.activemq.transport.tcp.TcpTransportServer;
1: import org.apache.activemq.util.Wait;
1: import org.junit.After;
1: import org.junit.Before;
1: import org.junit.Test;
1: import org.junit.runner.RunWith;
1: import org.junit.runners.Parameterized;
1: import org.junit.runners.Parameterized.Parameters;
0: import org.springframework.jms.support.JmsUtils;
1: 
1: @RunWith(Parameterized.class)
0: public class AutoTransportMaxConnectionsTest {
1: 
1:     public static final String KEYSTORE_TYPE = "jks";
1:     public static final String PASSWORD = "password";
1:     public static final String SERVER_KEYSTORE = "src/test/resources/server.keystore";
1:     public static final String TRUST_KEYSTORE = "src/test/resources/client.keystore";
1:     private static final int maxConnections = 20;
1: 
1:     private final ExecutorService executor = Executors.newCachedThreadPool();
1:     private String connectionUri;
1:     private BrokerService service;
1:     private TransportConnector connector;
1:     private final String transportType;
1: 
0:     @Parameters
1:     public static Collection<Object[]> data() {
1:         return Arrays.asList(new Object[][] {
1:                 {"auto"},
1:                 {"auto+nio"},
1:                 {"auto+ssl"},
1:                 {"auto+nio+ssl"},
1:             });
1:     }
1: 
1: 
0:     public AutoTransportMaxConnectionsTest(String transportType) {
1:         super();
1:         this.transportType = transportType;
1:     }
1: 
1: 
1:     @Before
1:     public void setUp() throws Exception {
1:         System.setProperty("javax.net.ssl.trustStore", TRUST_KEYSTORE);
1:         System.setProperty("javax.net.ssl.trustStorePassword", PASSWORD);
1:         System.setProperty("javax.net.ssl.trustStoreType", KEYSTORE_TYPE);
1:         System.setProperty("javax.net.ssl.keyStore", SERVER_KEYSTORE);
1:         System.setProperty("javax.net.ssl.keyStorePassword", PASSWORD);
1:         System.setProperty("javax.net.ssl.keyStoreType", KEYSTORE_TYPE);
1: 
1:         service = new BrokerService();
1:         service.setPersistent(false);
1:         service.setUseJmx(false);
0:         connector = service.addConnector(transportType + "://0.0.0.0:0?maxConnectionThreadPoolSize=10&maximumConnections="+maxConnections);
1:         connectionUri = connector.getPublishableConnectString();
1:         service.start();
1:         service.waitUntilStarted();
1:     }
1: 
1:     protected ConnectionFactory createConnectionFactory() throws Exception {
1:         return new ActiveMQConnectionFactory(connectionUri);
1:     }
1: 
0:     @Test
1:     public void testMaxConnectionControl() throws Exception {
1:         final ConnectionFactory cf = createConnectionFactory();
1:         final CountDownLatch startupLatch = new CountDownLatch(1);
1: 
0:         for(int i = 0; i < maxConnections + 20; i++) {
1:             executor.submit(new Runnable() {
1:                 @Override
1:                 public void run() {
1:                     Connection conn = null;
1:                     try {
1:                         startupLatch.await();
1:                         conn = cf.createConnection();
1:                         conn.start();
1:                     } catch (Exception e) {
0:                         //JmsUtils.closeConnection(conn);
1:                     }
1:                 }
1:             });
1:         }
1: 
1:         TcpTransportServer transportServer = (TcpTransportServer)connector.getServer();
1:         // ensure the max connections is in effect
1:         assertEquals(maxConnections, transportServer.getMaximumConnections());
1:         // No connections at first
1:         assertEquals(0, connector.getConnections().size());
1:         // Release the latch to set up connections in parallel
1:         startupLatch.countDown();
1: 
1:         final TransportConnector connector = this.connector;
1: 
1:         // Expect the max connections is created
1:         assertTrue("Expected: " + maxConnections + " found: " + connector.getConnections().size(),
1:             Wait.waitFor(new Wait.Condition() {
1:                 @Override
1:                 public boolean isSatisified() throws Exception {
1:                     return connector.getConnections().size() == maxConnections;
1:                 }
1:             })
1:         );
1: 
1:     }
1: 
0:     @After
0:     public void tearDown() throws Exception {
0:         executor.shutdown();
1: 
0:         service.stop();
0:         service.waitUntilStopped();
1:     }
1: }
============================================================================