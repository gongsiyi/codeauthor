1:928e815: /**
1:928e815:  * Licensed to the Apache Software Foundation (ASF) under one or more
1:928e815:  * contributor license agreements.  See the NOTICE file distributed with
1:928e815:  * this work for additional information regarding copyright ownership.
1:928e815:  * The ASF licenses this file to You under the Apache License, Version 2.0
1:928e815:  * (the "License"); you may not use this file except in compliance with
1:928e815:  * the License.  You may obtain a copy of the License at
1:928e815:  *
1:928e815:  *      http://www.apache.org/licenses/LICENSE-2.0
1:928e815:  *
1:928e815:  * Unless required by applicable law or agreed to in writing, software
1:928e815:  * distributed under the License is distributed on an "AS IS" BASIS,
1:928e815:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:928e815:  * See the License for the specific language governing permissions and
1:928e815:  * limitations under the License.
1:928e815:  */
1:928e815: package org.apache.activemq.broker.jmx;
4:928e815: 
1:928e815: import java.util.Set;
1:928e815: import javax.jms.Connection;
1:928e815: import javax.jms.ConnectionFactory;
1:928e815: import javax.jms.Destination;
1:928e815: import javax.jms.Session;
1:928e815: import javax.management.MBeanServer;
1:928e815: import javax.management.ObjectInstance;
1:928e815: import javax.management.ObjectName;
1:928e815: import org.apache.activemq.ActiveMQConnectionFactory;
1:928e815: import org.apache.activemq.broker.BrokerService;
1:928e815: import org.apache.activemq.util.Wait;
1:928e815: import org.junit.After;
1:928e815: import org.junit.Before;
1:928e815: import org.junit.Test;
1:928e815: import org.slf4j.Logger;
1:928e815: import org.slf4j.LoggerFactory;
1:928e815: 
1:928e815: 
1:e313f40: import static org.junit.Assert.*;
1:928e815: 
1:928e815: 
1:928e815: public class SelectiveMBeanRegistrationTest  {
1:928e815:     private static final Logger LOG = LoggerFactory.getLogger(SelectiveMBeanRegistrationTest.class);
1:928e815: 
1:928e815:     BrokerService brokerService;
1:928e815:     protected MBeanServer mbeanServer;
1:928e815:     protected String domain = "org.apache.activemq";
1:928e815: 
1:928e815:     protected ConnectionFactory connectionFactory;
1:928e815:     protected Connection connection;
1:928e815:     protected boolean transacted;
1:928e815: 
1:928e815:     @Before
1:928e815:     public void createBroker() throws Exception {
1:928e815:         brokerService = new BrokerService();
1:928e815:         brokerService.setPersistent(false);
1:928e815:         brokerService.setUseJmx(true);
1:928e815: 
1:928e815:         ManagementContext managementContext = new ManagementContext();
1:928e815:         managementContext.setCreateConnector(false);
1:13c471c:         managementContext.setSuppressMBean("endpoint=dynamicProducer,endpoint=Consumer,destinationName=ActiveMQ.Advisory.*");
1:928e815:         brokerService.setManagementContext(managementContext);
1:928e815: 
1:928e815:         brokerService.start();
1:928e815:         connectionFactory = new ActiveMQConnectionFactory("vm://localhost");
1:928e815:         mbeanServer = managementContext.getMBeanServer();
4:928e815:     }
1:928e815: 
1:928e815:     @Test
1:928e815:     public void testSuppression() throws Exception {
1:928e815: 
1:928e815:         connection = connectionFactory.createConnection("admin", "admin");
1:928e815:         connection.setClientID("MBeanTest");
1:928e815:         Session session = connection.createSession(false, Session.AUTO_ACKNOWLEDGE);
1:928e815:         Destination queue = session.createQueue("AQueue");
1:928e815: 
1:928e815:         session.createConsumer(queue);
1:928e815: 
1:e313f40:         final ManagedRegionBroker managedRegionBroker = (ManagedRegionBroker) brokerService.getBroker().getAdaptor(ManagedRegionBroker.class);
1:928e815: 
1:928e815:         // mbean exists
1:928e815:         assertTrue("one sub", Wait.waitFor(new Wait.Condition() {
2:928e815:             @Override
2:928e815:             public boolean isSatisified() throws Exception {
1:e313f40:                 return managedRegionBroker.getQueueSubscribers().length == 1;
1:928e815:             }
2:928e815:         }));
1:928e815: 
1:928e815:         // but it is not registered
1:e313f40:         assertFalse(mbeanServer.isRegistered(managedRegionBroker.getQueueSubscribers()[0]));
1:928e815: 
1:928e815:         // verify dynamicProducer suppressed
1:928e815:         session.createProducer(null);
1:928e815: 
1:928e815: 
1:928e815:         // mbean exists
1:928e815:         assertTrue("one sub", Wait.waitFor(new Wait.Condition() {
1:928e815:             @Override
1:928e815:             public boolean isSatisified() throws Exception {
1:e313f40:                 return managedRegionBroker.getDynamicDestinationProducers().length == 1;
1:928e815:             }
1:928e815:         }));
1:928e815: 
1:928e815: 
1:928e815:         // but it is not registered
1:928e815:         ObjectName query = new ObjectName(domain + ":type=Broker,brokerName=localhost,endpoint=dynamicProducer,*");
1:928e815:         Set<ObjectInstance> mbeans = mbeanServer.queryMBeans(query, null);
1:928e815:         assertEquals(0, mbeans.size());
1:928e815: 
1:13c471c:         query = new ObjectName(domain + ":type=Broker,brokerName=localhost,destinationName=ActiveMQ.Advisory.*,*");
1:13c471c:         mbeans = mbeanServer.queryMBeans(query, null);
1:13c471c:         assertEquals(0, mbeans.size());
1:928e815:     }
1:928e815: 
1:928e815: 
1:928e815:     @After
1:928e815:     public  void tearDown() throws Exception {
1:928e815:         if (connection != null) {
1:928e815:             connection.close();
1:928e815:             connection = null;
1:928e815:         }
1:928e815:         if (brokerService != null) {
1:928e815:             brokerService.stop();
1:928e815:         }
1:928e815:     }
1:928e815: 
1:928e815: }
============================================================================
author:gtully
-------------------------------------------------------------------------------
commit:e313f40
/////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////
1: import static org.junit.Assert.*;
/////////////////////////////////////////////////////////////////////////
1:         final ManagedRegionBroker managedRegionBroker = (ManagedRegionBroker) brokerService.getBroker().getAdaptor(ManagedRegionBroker.class);
1:                 return managedRegionBroker.getQueueSubscribers().length == 1;
1:         assertFalse(mbeanServer.isRegistered(managedRegionBroker.getQueueSubscribers()[0]));
/////////////////////////////////////////////////////////////////////////
1:                 return managedRegionBroker.getDynamicDestinationProducers().length == 1;
/////////////////////////////////////////////////////////////////////////
commit:928e815
/////////////////////////////////////////////////////////////////////////
1: /**
1:  * Licensed to the Apache Software Foundation (ASF) under one or more
1:  * contributor license agreements.  See the NOTICE file distributed with
1:  * this work for additional information regarding copyright ownership.
1:  * The ASF licenses this file to You under the Apache License, Version 2.0
1:  * (the "License"); you may not use this file except in compliance with
1:  * the License.  You may obtain a copy of the License at
1:  *
1:  *      http://www.apache.org/licenses/LICENSE-2.0
1:  *
1:  * Unless required by applicable law or agreed to in writing, software
1:  * distributed under the License is distributed on an "AS IS" BASIS,
1:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:  * See the License for the specific language governing permissions and
1:  * limitations under the License.
1:  */
1: package org.apache.activemq.broker.jmx;
1: 
1: import java.util.Set;
0: import java.util.concurrent.atomic.AtomicBoolean;
1: import javax.jms.Connection;
1: import javax.jms.ConnectionFactory;
1: import javax.jms.Destination;
1: import javax.jms.Session;
1: import javax.management.MBeanServer;
0: import javax.management.MBeanServerInvocationHandler;
1: import javax.management.ObjectInstance;
1: import javax.management.ObjectName;
1: import org.apache.activemq.ActiveMQConnectionFactory;
1: import org.apache.activemq.broker.BrokerService;
1: import org.apache.activemq.util.Wait;
1: import org.junit.After;
1: import org.junit.Before;
1: import org.junit.Test;
1: 
1: import org.slf4j.Logger;
1: import org.slf4j.LoggerFactory;
1: 
1: 
0: import static org.junit.Assert.assertTrue;
0: import static org.junit.Assert.assertEquals;
0: import static org.junit.Assert.assertFalse;
1: 
1: 
1: public class SelectiveMBeanRegistrationTest  {
1:     private static final Logger LOG = LoggerFactory.getLogger(SelectiveMBeanRegistrationTest.class);
1: 
1:     BrokerService brokerService;
1:     protected MBeanServer mbeanServer;
1:     protected String domain = "org.apache.activemq";
1: 
1:     protected ConnectionFactory connectionFactory;
1:     protected Connection connection;
1:     protected boolean transacted;
1: 
1:     @Before
1:     public void createBroker() throws Exception {
1:         brokerService = new BrokerService();
1:         brokerService.setPersistent(false);
1:         brokerService.setUseJmx(true);
1: 
1:         ManagementContext managementContext = new ManagementContext();
1:         managementContext.setCreateConnector(false);
0:         managementContext.setSuppressMBean("endpoint=dynamicProducer,endpoint=Consumer");
1:         brokerService.setManagementContext(managementContext);
1: 
1:         brokerService.start();
1:         connectionFactory = new ActiveMQConnectionFactory("vm://localhost");
1:         mbeanServer = managementContext.getMBeanServer();
1:     }
1: 
1:     @Test
1:     public void testSuppression() throws Exception {
1: 
1:         connection = connectionFactory.createConnection("admin", "admin");
1:         connection.setClientID("MBeanTest");
1:         Session session = connection.createSession(false, Session.AUTO_ACKNOWLEDGE);
1:         Destination queue = session.createQueue("AQueue");
1: 
1:         session.createConsumer(queue);
1: 
0:         ObjectName brokerName = assertRegisteredObjectName(domain + ":type=Broker,brokerName=localhost");
0:         final BrokerViewMBean broker = MBeanServerInvocationHandler.newProxyInstance(mbeanServer, brokerName, BrokerViewMBean.class, true);
1: 
1:         // mbean exists
1:         assertTrue("one sub", Wait.waitFor(new Wait.Condition() {
1:             @Override
1:             public boolean isSatisified() throws Exception {
0:                 return broker.getQueueSubscribers().length == 1;
1:             }
1:         }));
1: 
1:         // but it is not registered
0:         assertFalse(mbeanServer.isRegistered(broker.getQueueSubscribers()[0]));
1: 
1:         // verify dynamicProducer suppressed
1:         session.createProducer(null);
1: 
1: 
1:         // mbean exists
1:         assertTrue("one sub", Wait.waitFor(new Wait.Condition() {
1:             @Override
1:             public boolean isSatisified() throws Exception {
0:                 return broker.getDynamicDestinationProducers().length == 1;
1:             }
1:         }));
1: 
1: 
1:         // but it is not registered
1:         ObjectName query = new ObjectName(domain + ":type=Broker,brokerName=localhost,endpoint=dynamicProducer,*");
1:         Set<ObjectInstance> mbeans = mbeanServer.queryMBeans(query, null);
1:         assertEquals(0, mbeans.size());
1: 
1:     }
1: 
1: 
1:     @After
1:     public  void tearDown() throws Exception {
1:         if (connection != null) {
1:             connection.close();
1:             connection = null;
1:         }
1:         if (brokerService != null) {
1:             brokerService.stop();
1:         }
1:     }
1: 
0:     protected ObjectName assertRegisteredObjectName(String name) throws Exception {
0:         final ObjectName objectName = new ObjectName(name);
0:         final AtomicBoolean result = new AtomicBoolean(false);
0:         assertTrue("Bean registered: " + objectName, Wait.waitFor(new Wait.Condition() {
1:             @Override
1:             public boolean isSatisified() throws Exception {
0:                 try {
0:                     result.set(mbeanServer.isRegistered(objectName));
0:                 } catch (Exception ignored) {
0:                     LOG.debug(ignored.toString());
1:                 }
0:                 return result.get();
1:             }
1:         }));
0:         return objectName;
1:     }
1: 
1: 
1: }
author:Dejan Bosanac
-------------------------------------------------------------------------------
commit:13c471c
/////////////////////////////////////////////////////////////////////////
1:         managementContext.setSuppressMBean("endpoint=dynamicProducer,endpoint=Consumer,destinationName=ActiveMQ.Advisory.*");
/////////////////////////////////////////////////////////////////////////
1:         query = new ObjectName(domain + ":type=Broker,brokerName=localhost,destinationName=ActiveMQ.Advisory.*,*");
1:         mbeans = mbeanServer.queryMBeans(query, null);
1:         assertEquals(0, mbeans.size());
============================================================================