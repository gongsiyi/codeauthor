1:6da08b2: /**
1:6da08b2:  * Licensed to the Apache Software Foundation (ASF) under one or more
1:6da08b2:  * contributor license agreements.  See the NOTICE file distributed with
1:6da08b2:  * this work for additional information regarding copyright ownership.
1:6da08b2:  * The ASF licenses this file to You under the Apache License, Version 2.0
1:6da08b2:  * (the "License"); you may not use this file except in compliance with
1:6da08b2:  * the License.  You may obtain a copy of the License at
1:6da08b2:  *
1:6da08b2:  *      http://www.apache.org/licenses/LICENSE-2.0
1:6da08b2:  *
1:6da08b2:  * Unless required by applicable law or agreed to in writing, software
1:6da08b2:  * distributed under the License is distributed on an "AS IS" BASIS,
1:6da08b2:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:6da08b2:  * See the License for the specific language governing permissions and
1:6da08b2:  * limitations under the License.
1:6da08b2:  */
1:6da08b2: package org.apache.activemq.broker.virtual;
1:6da08b2: 
1:6da08b2: import org.apache.activemq.ActiveMQConnectionFactory;
1:6da08b2: import org.apache.activemq.ActiveMQPrefetchPolicy;
1:6da08b2: import org.apache.activemq.broker.BrokerService;
1:6da08b2: import org.apache.activemq.broker.region.Destination;
1:6da08b2: import org.apache.activemq.broker.region.DestinationInterceptor;
1:6da08b2: import org.apache.activemq.broker.region.policy.PolicyEntry;
1:6da08b2: import org.apache.activemq.broker.region.policy.PolicyMap;
1:6da08b2: import org.apache.activemq.broker.region.virtual.VirtualDestination;
1:6da08b2: import org.apache.activemq.broker.region.virtual.VirtualDestinationInterceptor;
1:6da08b2: import org.apache.activemq.broker.region.virtual.VirtualTopic;
1:6da08b2: import org.apache.activemq.command.ActiveMQQueue;
1:6da08b2: import org.apache.activemq.command.ActiveMQTopic;
1:6da08b2: import org.apache.activemq.util.Wait;
1:6da08b2: import org.junit.After;
1:6da08b2: import org.junit.Before;
1:6da08b2: import org.junit.Ignore;
1:6da08b2: import org.junit.Test;
1:6da08b2: import org.junit.runner.RunWith;
1:6da08b2: import org.junit.runners.Parameterized;
1:6da08b2: import org.slf4j.Logger;
1:6da08b2: import org.slf4j.LoggerFactory;
1:6da08b2: 
1:6da08b2: import javax.jms.Connection;
1:6da08b2: import javax.jms.ConnectionFactory;
1:6da08b2: import javax.jms.MessageProducer;
1:6da08b2: import javax.jms.Session;
1:6da08b2: 
1:6da08b2: import java.util.Arrays;
1:6da08b2: 
1:6da08b2: import static org.junit.Assert.assertTrue;
1:6da08b2: 
1:6da08b2: @RunWith(Parameterized.class)
1:6da08b2: public class VirtualTopicFlowControlDiscardTest {
1:6da08b2: 
1:6da08b2:     private static final Logger LOG = LoggerFactory.getLogger(VirtualTopicFlowControlDiscardTest.class);
1:6da08b2: 
1:6da08b2:     final String payload = new String(new byte[155]);
1:6da08b2:     int numConsumers = 2;
1:6da08b2:     int total = 500;
1:6da08b2: 
1:6da08b2:     @Parameterized.Parameter(0)
1:6da08b2:     public boolean concurrentSend;
1:6da08b2: 
1:6da08b2:     @Parameterized.Parameter(1)
1:6da08b2:     public boolean transactedSend;
1:6da08b2: 
1:6da08b2:     @Parameterized.Parameter(2)
1:6da08b2:     public boolean sendFailGlobal;
1:6da08b2: 
1:6da08b2:     @Parameterized.Parameter(3)
1:6da08b2:     public boolean persistentBroker;
1:6da08b2: 
1:6da08b2: 
1:6da08b2:     BrokerService brokerService;
1:6da08b2:     ConnectionFactory connectionFactory;
1:6da08b2: 
1:6da08b2:     @Before
1:6da08b2:     public void createBroker() throws Exception  {
1:6da08b2:         brokerService = new BrokerService();
1:6da08b2:         brokerService.setPersistent(persistentBroker);
1:6da08b2:         brokerService.setDeleteAllMessagesOnStartup(true);
1:6da08b2:         PolicyMap policyMap = new PolicyMap();
1:6da08b2:         PolicyEntry restrictedUsage = new PolicyEntry();
1:6da08b2:         restrictedUsage.setCursorMemoryHighWaterMark(50);
1:6da08b2:         restrictedUsage.setMemoryLimit(5000);
1:6da08b2:         restrictedUsage.setCursorMemoryHighWaterMark(110);
1:6da08b2:         if (sendFailGlobal) {
1:6da08b2:             brokerService.getSystemUsage().setSendFailIfNoSpace(true);
1:6da08b2:         } else {
1:6da08b2:             restrictedUsage.setSendFailIfNoSpace(true);
1:6da08b2:             restrictedUsage.setSendFailIfNoSpaceAfterTimeout(0);
1:6da08b2:         }
1:6da08b2: 
1:6da08b2:         policyMap.put(new ActiveMQQueue("Consumer.0.VirtualTopic.TEST"), restrictedUsage);
1:6da08b2:         brokerService.setDestinationPolicy(policyMap);
1:6da08b2:         brokerService.start();
1:6da08b2: 
1:6da08b2:         for (DestinationInterceptor destinationInterceptor  : brokerService.getDestinationInterceptors()) {
1:6da08b2:                 for (VirtualDestination virtualDestination : ((VirtualDestinationInterceptor) destinationInterceptor).getVirtualDestinations()) {
1:6da08b2:                     if (virtualDestination instanceof VirtualTopic) {
1:6da08b2:                         ((VirtualTopic) virtualDestination).setConcurrentSend(concurrentSend);
1:6da08b2:                         ((VirtualTopic) virtualDestination).setTransactedSend(transactedSend);
1:6da08b2:                         ((VirtualTopic) virtualDestination).setDropOnResourceLimit(true);
1:6da08b2:                 }
1:6da08b2:             }
1:6da08b2:         }
1:6da08b2:         ActiveMQConnectionFactory activeMQConnectionFactory = new ActiveMQConnectionFactory("vm://localhost");
1:6da08b2:         ActiveMQPrefetchPolicy zeroPrefetch = new ActiveMQPrefetchPolicy();
1:6da08b2:         zeroPrefetch.setAll(0);
1:6da08b2:         activeMQConnectionFactory.setPrefetchPolicy(zeroPrefetch);
1:6da08b2:         connectionFactory = activeMQConnectionFactory;
1:6da08b2:     }
1:6da08b2: 
1:6da08b2:     @After
1:6da08b2:     public void stopBroker() throws Exception  {
1:6da08b2:         brokerService.stop();
1:6da08b2:     }
1:6da08b2: 
1:6da08b2:     @Parameterized.Parameters(name ="cS=#{0},tS=#{1},g=#{2},persist=#{3}")
1:6da08b2:     public static Iterable<Object[]> parameters() {
1:6da08b2:         return Arrays.asList(new Object[][]{
1:6da08b2:                 {Boolean.TRUE, Boolean.TRUE, Boolean.TRUE, Boolean.TRUE},
1:6da08b2:                 {Boolean.TRUE, Boolean.TRUE, Boolean.TRUE, Boolean.FALSE},
1:6da08b2:                 {Boolean.FALSE, Boolean.TRUE, Boolean.TRUE, Boolean.FALSE},
1:6da08b2:                 {Boolean.TRUE, Boolean.FALSE, Boolean.TRUE, Boolean.FALSE},
1:6da08b2:                 {Boolean.FALSE, Boolean.FALSE, Boolean.TRUE, Boolean.FALSE},
1:6da08b2:                 {Boolean.FALSE, Boolean.FALSE, Boolean.FALSE, Boolean.FALSE},
1:6da08b2:                 {Boolean.TRUE, Boolean.TRUE, Boolean.FALSE, Boolean.FALSE},
1:6da08b2:                 {Boolean.FALSE, Boolean.FALSE, Boolean.FALSE, Boolean.TRUE},
1:6da08b2: 
1:6da08b2:         });
1:6da08b2:     }
1:6da08b2: 
1:6da08b2:     @Test
1:6da08b2:     public void testFanoutWithResourceException() throws Exception {
1:6da08b2: 
1:6da08b2:         Connection connection1 = connectionFactory.createConnection();
1:6da08b2:         connection1.start();
1:6da08b2: 
1:6da08b2:         Session session = connection1.createSession(false, Session.AUTO_ACKNOWLEDGE);
1:6da08b2:         for (int i=0; i<numConsumers; i++) {
1:6da08b2:             session.createConsumer(new ActiveMQQueue("Consumer." + i + ".VirtualTopic.TEST"));
1:6da08b2:         }
1:6da08b2: 
1:6da08b2:         Connection connection2 = connectionFactory.createConnection();
1:6da08b2:         connection2.start();
1:6da08b2:         Session producerSession = connection2.createSession(false, Session.AUTO_ACKNOWLEDGE);
1:6da08b2:         MessageProducer producer = producerSession.createProducer(new ActiveMQTopic("VirtualTopic.TEST"));
1:6da08b2: 
1:6da08b2:         long start = System.currentTimeMillis();
1:6da08b2:         LOG.info("Starting producer: " + start);
1:6da08b2:         for (int i = 0; i < total; i++) {
1:6da08b2:             producer.send(producerSession.createTextMessage(payload));
1:6da08b2:         }
1:6da08b2:         LOG.info("Done producer, duration: " + (System.currentTimeMillis() - start) );
1:6da08b2: 
1:6da08b2:         Destination destination  = brokerService.getDestination(new ActiveMQQueue("Consumer.0.VirtualTopic.TEST"));
1:6da08b2:         LOG.info("Dest 0 size: " + (destination.getDestinationStatistics().getEnqueues().getCount()));
1:6da08b2:         assertTrue("did not get all", (destination.getDestinationStatistics().getEnqueues().getCount() < total));
1:6da08b2: 
1:6da08b2:         assertTrue("got all", Wait.waitFor(new Wait.Condition() {
1:6da08b2:             @Override
1:6da08b2:             public boolean isSatisified() throws Exception {
1:6da08b2:                 Destination dest  = brokerService.getDestination(new ActiveMQQueue("Consumer.1.VirtualTopic.TEST"));
1:6da08b2:                 LOG.info("Dest 1 size: " + dest.getDestinationStatistics().getEnqueues().getCount());
1:6da08b2:                 return total == dest.getDestinationStatistics().getEnqueues().getCount();
1:6da08b2:             }
1:6da08b2:         }));
1:6da08b2: 
1:6da08b2:         try {
1:6da08b2:             connection1.close();
1:6da08b2:         } catch (Exception ex) {}
1:6da08b2:         try {
1:6da08b2:             connection2.close();
1:6da08b2:         } catch (Exception ex) {}
1:6da08b2:     }
1:6da08b2: }
============================================================================
author:gtully
-------------------------------------------------------------------------------
commit:6da08b2
/////////////////////////////////////////////////////////////////////////
1: /**
1:  * Licensed to the Apache Software Foundation (ASF) under one or more
1:  * contributor license agreements.  See the NOTICE file distributed with
1:  * this work for additional information regarding copyright ownership.
1:  * The ASF licenses this file to You under the Apache License, Version 2.0
1:  * (the "License"); you may not use this file except in compliance with
1:  * the License.  You may obtain a copy of the License at
1:  *
1:  *      http://www.apache.org/licenses/LICENSE-2.0
1:  *
1:  * Unless required by applicable law or agreed to in writing, software
1:  * distributed under the License is distributed on an "AS IS" BASIS,
1:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:  * See the License for the specific language governing permissions and
1:  * limitations under the License.
1:  */
1: package org.apache.activemq.broker.virtual;
1: 
1: import org.apache.activemq.ActiveMQConnectionFactory;
1: import org.apache.activemq.ActiveMQPrefetchPolicy;
1: import org.apache.activemq.broker.BrokerService;
1: import org.apache.activemq.broker.region.Destination;
1: import org.apache.activemq.broker.region.DestinationInterceptor;
1: import org.apache.activemq.broker.region.policy.PolicyEntry;
1: import org.apache.activemq.broker.region.policy.PolicyMap;
1: import org.apache.activemq.broker.region.virtual.VirtualDestination;
1: import org.apache.activemq.broker.region.virtual.VirtualDestinationInterceptor;
1: import org.apache.activemq.broker.region.virtual.VirtualTopic;
1: import org.apache.activemq.command.ActiveMQQueue;
1: import org.apache.activemq.command.ActiveMQTopic;
1: import org.apache.activemq.util.Wait;
1: import org.junit.After;
1: import org.junit.Before;
1: import org.junit.Ignore;
1: import org.junit.Test;
1: import org.junit.runner.RunWith;
1: import org.junit.runners.Parameterized;
1: import org.slf4j.Logger;
1: import org.slf4j.LoggerFactory;
1: 
1: import javax.jms.Connection;
1: import javax.jms.ConnectionFactory;
1: import javax.jms.MessageProducer;
1: import javax.jms.Session;
1: 
1: import java.util.Arrays;
1: 
1: import static org.junit.Assert.assertTrue;
1: 
1: @RunWith(Parameterized.class)
1: public class VirtualTopicFlowControlDiscardTest {
1: 
1:     private static final Logger LOG = LoggerFactory.getLogger(VirtualTopicFlowControlDiscardTest.class);
1: 
1:     final String payload = new String(new byte[155]);
1:     int numConsumers = 2;
1:     int total = 500;
1: 
1:     @Parameterized.Parameter(0)
1:     public boolean concurrentSend;
1: 
1:     @Parameterized.Parameter(1)
1:     public boolean transactedSend;
1: 
1:     @Parameterized.Parameter(2)
1:     public boolean sendFailGlobal;
1: 
1:     @Parameterized.Parameter(3)
1:     public boolean persistentBroker;
1: 
1: 
1:     BrokerService brokerService;
1:     ConnectionFactory connectionFactory;
1: 
1:     @Before
1:     public void createBroker() throws Exception  {
1:         brokerService = new BrokerService();
1:         brokerService.setPersistent(persistentBroker);
1:         brokerService.setDeleteAllMessagesOnStartup(true);
1:         PolicyMap policyMap = new PolicyMap();
1:         PolicyEntry restrictedUsage = new PolicyEntry();
1:         restrictedUsage.setCursorMemoryHighWaterMark(50);
1:         restrictedUsage.setMemoryLimit(5000);
1:         restrictedUsage.setCursorMemoryHighWaterMark(110);
1:         if (sendFailGlobal) {
1:             brokerService.getSystemUsage().setSendFailIfNoSpace(true);
1:         } else {
1:             restrictedUsage.setSendFailIfNoSpace(true);
1:             restrictedUsage.setSendFailIfNoSpaceAfterTimeout(0);
1:         }
1: 
1:         policyMap.put(new ActiveMQQueue("Consumer.0.VirtualTopic.TEST"), restrictedUsage);
1:         brokerService.setDestinationPolicy(policyMap);
1:         brokerService.start();
1: 
1:         for (DestinationInterceptor destinationInterceptor  : brokerService.getDestinationInterceptors()) {
1:                 for (VirtualDestination virtualDestination : ((VirtualDestinationInterceptor) destinationInterceptor).getVirtualDestinations()) {
1:                     if (virtualDestination instanceof VirtualTopic) {
1:                         ((VirtualTopic) virtualDestination).setConcurrentSend(concurrentSend);
1:                         ((VirtualTopic) virtualDestination).setTransactedSend(transactedSend);
1:                         ((VirtualTopic) virtualDestination).setDropOnResourceLimit(true);
1:                 }
1:             }
1:         }
1:         ActiveMQConnectionFactory activeMQConnectionFactory = new ActiveMQConnectionFactory("vm://localhost");
1:         ActiveMQPrefetchPolicy zeroPrefetch = new ActiveMQPrefetchPolicy();
1:         zeroPrefetch.setAll(0);
1:         activeMQConnectionFactory.setPrefetchPolicy(zeroPrefetch);
1:         connectionFactory = activeMQConnectionFactory;
1:     }
1: 
1:     @After
1:     public void stopBroker() throws Exception  {
1:         brokerService.stop();
1:     }
1: 
1:     @Parameterized.Parameters(name ="cS=#{0},tS=#{1},g=#{2},persist=#{3}")
1:     public static Iterable<Object[]> parameters() {
1:         return Arrays.asList(new Object[][]{
1:                 {Boolean.TRUE, Boolean.TRUE, Boolean.TRUE, Boolean.TRUE},
1:                 {Boolean.TRUE, Boolean.TRUE, Boolean.TRUE, Boolean.FALSE},
1:                 {Boolean.FALSE, Boolean.TRUE, Boolean.TRUE, Boolean.FALSE},
1:                 {Boolean.TRUE, Boolean.FALSE, Boolean.TRUE, Boolean.FALSE},
1:                 {Boolean.FALSE, Boolean.FALSE, Boolean.TRUE, Boolean.FALSE},
1:                 {Boolean.FALSE, Boolean.FALSE, Boolean.FALSE, Boolean.FALSE},
1:                 {Boolean.TRUE, Boolean.TRUE, Boolean.FALSE, Boolean.FALSE},
1:                 {Boolean.FALSE, Boolean.FALSE, Boolean.FALSE, Boolean.TRUE},
1: 
1:         });
1:     }
1: 
1:     @Test
1:     public void testFanoutWithResourceException() throws Exception {
1: 
1:         Connection connection1 = connectionFactory.createConnection();
1:         connection1.start();
1: 
1:         Session session = connection1.createSession(false, Session.AUTO_ACKNOWLEDGE);
1:         for (int i=0; i<numConsumers; i++) {
1:             session.createConsumer(new ActiveMQQueue("Consumer." + i + ".VirtualTopic.TEST"));
1:         }
1: 
1:         Connection connection2 = connectionFactory.createConnection();
1:         connection2.start();
1:         Session producerSession = connection2.createSession(false, Session.AUTO_ACKNOWLEDGE);
1:         MessageProducer producer = producerSession.createProducer(new ActiveMQTopic("VirtualTopic.TEST"));
1: 
1:         long start = System.currentTimeMillis();
1:         LOG.info("Starting producer: " + start);
1:         for (int i = 0; i < total; i++) {
1:             producer.send(producerSession.createTextMessage(payload));
1:         }
1:         LOG.info("Done producer, duration: " + (System.currentTimeMillis() - start) );
1: 
1:         Destination destination  = brokerService.getDestination(new ActiveMQQueue("Consumer.0.VirtualTopic.TEST"));
1:         LOG.info("Dest 0 size: " + (destination.getDestinationStatistics().getEnqueues().getCount()));
1:         assertTrue("did not get all", (destination.getDestinationStatistics().getEnqueues().getCount() < total));
1: 
1:         assertTrue("got all", Wait.waitFor(new Wait.Condition() {
1:             @Override
1:             public boolean isSatisified() throws Exception {
1:                 Destination dest  = brokerService.getDestination(new ActiveMQQueue("Consumer.1.VirtualTopic.TEST"));
1:                 LOG.info("Dest 1 size: " + dest.getDestinationStatistics().getEnqueues().getCount());
1:                 return total == dest.getDestinationStatistics().getEnqueues().getCount();
1:             }
1:         }));
1: 
1:         try {
1:             connection1.close();
1:         } catch (Exception ex) {}
1:         try {
1:             connection2.close();
1:         } catch (Exception ex) {}
1:     }
1: }
============================================================================