1:6ae169e: /*
1:6ae169e:  * Licensed to the Apache Software Foundation (ASF) under one or more
1:6ae169e:  * contributor license agreements.  See the NOTICE file distributed with
1:6ae169e:  * this work for additional information regarding copyright ownership.
1:6ae169e:  * The ASF licenses this file to You under the Apache License, Version 2.0
1:6ae169e:  * (the "License"); you may not use this file except in compliance with
1:6ae169e:  * the License.  You may obtain a copy of the License at
1:6ae169e:  *
1:6ae169e:  *      http://www.apache.org/licenses/LICENSE-2.0
1:6ae169e:  *
1:6ae169e:  * Unless required by applicable law or agreed to in writing, software
1:6ae169e:  * distributed under the License is distributed on an "AS IS" BASIS,
1:6ae169e:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:6ae169e:  * See the License for the specific language governing permissions and
1:6ae169e:  * limitations under the License.
1:6ae169e:  */
1:6ae169e: package org.apache.activemq.junit;
1:6ae169e: 
1:6ae169e: import java.util.concurrent.TimeUnit;
1:6ae169e: 
1:6ae169e: import org.junit.Test;
1:6ae169e: import org.junit.internal.runners.statements.FailOnTimeout;
1:6ae169e: import org.junit.runners.BlockJUnit4ClassRunner;
1:6ae169e: import org.junit.runners.model.FrameworkMethod;
1:6ae169e: import org.junit.runners.model.InitializationError;
1:6ae169e: import org.junit.runners.model.Statement;
1:6ae169e: import org.slf4j.Logger;
1:6ae169e: import org.slf4j.LoggerFactory;
1:6ae169e: 
1:6ae169e: /**
1:6ae169e:  * A Custom JUnit test runner for customizing JUnit tests run in ActiveMQ.
1:6ae169e:  */
1:6ae169e: public class ActiveMQTestRunner extends BlockJUnit4ClassRunner {
1:6ae169e: 
1:6ae169e:     private static final Logger LOG = LoggerFactory.getLogger(ActiveMQTestRunner.class);
1:6ae169e: 
1:6ae169e:     public ActiveMQTestRunner(Class<?> klass) throws InitializationError {
1:6ae169e:         super(klass);
1:6ae169e:     }
1:6ae169e: 
1:6ae169e:     @Override
1:6ae169e:     protected Statement methodBlock(final FrameworkMethod method) {
1:6ae169e:         Statement statement = super.methodBlock(method);
1:6ae169e: 
1:6ae169e:         // Check for repeats needed
1:6ae169e:         statement = withPotentialRepeat(method, statement);
1:6ae169e: 
1:6ae169e:         return statement;
1:6ae169e:     }
1:6ae169e: 
1:6ae169e:     /**
1:6ae169e:      * Perform the same logic as
1:6ae169e:      * {@link BlockJUnit4ClassRunner#withPotentialTimeout(FrameworkMethod, Object, Statement)}
1:6ae169e:      * but with additional support for changing the coded timeout with an extended value.
1:6ae169e:      *
1:6ae169e:      * @return either a {@link FailOnTimeout}, or the supplied {@link Statement} as appropriate.
1:6ae169e:      */
1:6ae169e:     @SuppressWarnings("deprecation")
1:6ae169e:     @Override
1:6ae169e:     protected Statement withPotentialTimeout(FrameworkMethod frameworkMethod, Object testInstance, Statement next) {
1:6ae169e:         long testTimeout = getOriginalTimeout(frameworkMethod);
1:6ae169e: 
1:6ae169e:         if (testTimeout > 0) {
1:6ae169e:             String multiplierString = System.getProperty("org.apache.activemq.junit.testTimeoutMultiplier");
1:6ae169e:             double multiplier = 0.0;
1:6ae169e: 
1:6ae169e:             try {
1:6ae169e:                 multiplier = Double.parseDouble(multiplierString);
1:6ae169e:             } catch (NullPointerException npe) {
1:6ae169e:             } catch (NumberFormatException nfe) {
1:6ae169e:                 LOG.warn("Ignoring testTimeoutMultiplier not set to a valid value: " + multiplierString);
1:6ae169e:             }
1:6ae169e: 
1:6ae169e:             if (multiplier > 0.0) {
1:6ae169e:                 LOG.info("Test timeout multiple {} applied to test timeout {}ms: new timeout = {}",
1:6ae169e:                     multiplier, testTimeout, (long) (testTimeout * multiplier));
1:6ae169e:                 testTimeout = (long) (testTimeout * multiplier);
1:6ae169e:             }
1:6ae169e: 
1:6ae169e:             next = FailOnTimeout.builder().
1:6ae169e:                 withTimeout(testTimeout, TimeUnit.MILLISECONDS).build(next);
1:6ae169e:         } else {
1:6ae169e:             next = super.withPotentialTimeout(frameworkMethod, testInstance, next);
1:6ae169e:         }
1:6ae169e: 
1:6ae169e:         return next;
1:6ae169e:     }
1:6ae169e: 
1:6ae169e:     /**
1:6ae169e:      * Check for the presence of a {@link Repeat} annotation and return a {@link RepeatStatement}
1:6ae169e:      * to handle executing the test repeated or the original value if not repeating.
1:6ae169e:      *
1:6ae169e:      * @return either a {@link RepeatStatement}, or the supplied {@link Statement} as appropriate.
1:6ae169e:      */
1:6ae169e:     protected Statement withPotentialRepeat(FrameworkMethod frameworkMethod, Statement next) {
1:6ae169e: 
1:6ae169e:         Repeat repeatAnnotation = frameworkMethod.getAnnotation(Repeat.class);
1:6ae169e: 
1:6ae169e:         if (repeatAnnotation != null) {
1:6ae169e:             next = RepeatStatement.builder().build(repeatAnnotation, next);
1:6ae169e:         }
1:6ae169e: 
1:6ae169e:         return next;
1:6ae169e:     }
1:6ae169e: 
1:6ae169e:     /**
1:6ae169e:      * Retrieve the original JUnit {@code timeout} from the {@link Test @Test}
1:6ae169e:      * annotation on the incoming {@linkplain FrameworkMethod test method}.
1:6ae169e:      *
1:6ae169e:      * @return the timeout, or {@code 0} if none was specified
1:6ae169e:      */
1:6ae169e:     protected long getOriginalTimeout(FrameworkMethod frameworkMethod) {
1:6ae169e:         Test test = frameworkMethod.getAnnotation(Test.class);
1:6ae169e:         return (test != null && test.timeout() > 0 ? test.timeout() : 0);
1:6ae169e:     }
1:6ae169e: }
============================================================================
author:Timothy Bish
-------------------------------------------------------------------------------
commit:6ae169e
/////////////////////////////////////////////////////////////////////////
1: /*
1:  * Licensed to the Apache Software Foundation (ASF) under one or more
1:  * contributor license agreements.  See the NOTICE file distributed with
1:  * this work for additional information regarding copyright ownership.
1:  * The ASF licenses this file to You under the Apache License, Version 2.0
1:  * (the "License"); you may not use this file except in compliance with
1:  * the License.  You may obtain a copy of the License at
1:  *
1:  *      http://www.apache.org/licenses/LICENSE-2.0
1:  *
1:  * Unless required by applicable law or agreed to in writing, software
1:  * distributed under the License is distributed on an "AS IS" BASIS,
1:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:  * See the License for the specific language governing permissions and
1:  * limitations under the License.
1:  */
1: package org.apache.activemq.junit;
1: 
1: import java.util.concurrent.TimeUnit;
1: 
1: import org.junit.Test;
1: import org.junit.internal.runners.statements.FailOnTimeout;
1: import org.junit.runners.BlockJUnit4ClassRunner;
1: import org.junit.runners.model.FrameworkMethod;
1: import org.junit.runners.model.InitializationError;
1: import org.junit.runners.model.Statement;
1: import org.slf4j.Logger;
1: import org.slf4j.LoggerFactory;
1: 
1: /**
1:  * A Custom JUnit test runner for customizing JUnit tests run in ActiveMQ.
1:  */
1: public class ActiveMQTestRunner extends BlockJUnit4ClassRunner {
1: 
1:     private static final Logger LOG = LoggerFactory.getLogger(ActiveMQTestRunner.class);
1: 
1:     public ActiveMQTestRunner(Class<?> klass) throws InitializationError {
1:         super(klass);
1:     }
1: 
1:     @Override
1:     protected Statement methodBlock(final FrameworkMethod method) {
1:         Statement statement = super.methodBlock(method);
1: 
1:         // Check for repeats needed
1:         statement = withPotentialRepeat(method, statement);
1: 
1:         return statement;
1:     }
1: 
1:     /**
1:      * Perform the same logic as
1:      * {@link BlockJUnit4ClassRunner#withPotentialTimeout(FrameworkMethod, Object, Statement)}
1:      * but with additional support for changing the coded timeout with an extended value.
1:      *
1:      * @return either a {@link FailOnTimeout}, or the supplied {@link Statement} as appropriate.
1:      */
1:     @SuppressWarnings("deprecation")
1:     @Override
1:     protected Statement withPotentialTimeout(FrameworkMethod frameworkMethod, Object testInstance, Statement next) {
1:         long testTimeout = getOriginalTimeout(frameworkMethod);
1: 
1:         if (testTimeout > 0) {
1:             String multiplierString = System.getProperty("org.apache.activemq.junit.testTimeoutMultiplier");
1:             double multiplier = 0.0;
1: 
1:             try {
1:                 multiplier = Double.parseDouble(multiplierString);
1:             } catch (NullPointerException npe) {
1:             } catch (NumberFormatException nfe) {
1:                 LOG.warn("Ignoring testTimeoutMultiplier not set to a valid value: " + multiplierString);
1:             }
1: 
1:             if (multiplier > 0.0) {
1:                 LOG.info("Test timeout multiple {} applied to test timeout {}ms: new timeout = {}",
1:                     multiplier, testTimeout, (long) (testTimeout * multiplier));
1:                 testTimeout = (long) (testTimeout * multiplier);
1:             }
1: 
1:             next = FailOnTimeout.builder().
1:                 withTimeout(testTimeout, TimeUnit.MILLISECONDS).build(next);
1:         } else {
1:             next = super.withPotentialTimeout(frameworkMethod, testInstance, next);
1:         }
1: 
1:         return next;
1:     }
1: 
1:     /**
1:      * Check for the presence of a {@link Repeat} annotation and return a {@link RepeatStatement}
1:      * to handle executing the test repeated or the original value if not repeating.
1:      *
1:      * @return either a {@link RepeatStatement}, or the supplied {@link Statement} as appropriate.
1:      */
1:     protected Statement withPotentialRepeat(FrameworkMethod frameworkMethod, Statement next) {
1: 
1:         Repeat repeatAnnotation = frameworkMethod.getAnnotation(Repeat.class);
1: 
1:         if (repeatAnnotation != null) {
1:             next = RepeatStatement.builder().build(repeatAnnotation, next);
1:         }
1: 
1:         return next;
1:     }
1: 
1:     /**
1:      * Retrieve the original JUnit {@code timeout} from the {@link Test @Test}
1:      * annotation on the incoming {@linkplain FrameworkMethod test method}.
1:      *
1:      * @return the timeout, or {@code 0} if none was specified
1:      */
1:     protected long getOriginalTimeout(FrameworkMethod frameworkMethod) {
1:         Test test = frameworkMethod.getAnnotation(Test.class);
1:         return (test != null && test.timeout() > 0 ? test.timeout() : 0);
1:     }
1: }
============================================================================