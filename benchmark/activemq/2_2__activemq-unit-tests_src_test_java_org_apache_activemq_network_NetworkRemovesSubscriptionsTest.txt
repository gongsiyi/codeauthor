1:b341d43: /**
1:b341d43:  * Licensed to the Apache Software Foundation (ASF) under one or more
1:b341d43:  * contributor license agreements.  See the NOTICE file distributed with
1:b341d43:  * this work for additional information regarding copyright ownership.
1:b341d43:  * The ASF licenses this file to You under the Apache License, Version 2.0
1:b341d43:  * (the "License"); you may not use this file except in compliance with
1:b341d43:  * the License.  You may obtain a copy of the License at
3:b341d43:  *
1:b341d43:  *      http://www.apache.org/licenses/LICENSE-2.0
1:b341d43:  *
1:b341d43:  * Unless required by applicable law or agreed to in writing, software
1:b341d43:  * distributed under the License is distributed on an "AS IS" BASIS,
1:b341d43:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:b341d43:  * See the License for the specific language governing permissions and
1:b341d43:  * limitations under the License.
1:b341d43:  */
1:b341d43: package org.apache.activemq.network;
1:b341d43: 
1:b341d43: import javax.jms.Message;
1:b341d43: import javax.jms.MessageListener;
1:b341d43: import javax.jms.Session;
1:b341d43: import javax.jms.TopicConnection;
1:b341d43: import javax.jms.TopicSession;
1:b341d43: import javax.jms.TopicSubscriber;
1:b341d43: import junit.framework.TestCase;
1:b341d43: import org.apache.activemq.ActiveMQConnectionFactory;
1:b341d43: import org.apache.activemq.broker.BrokerService;
1:b341d43: import org.apache.activemq.broker.region.Destination;
1:b341d43: import org.apache.activemq.command.ActiveMQTopic;
1:b341d43: 
1:b341d43: /**
1:b341d43:  * Various Tests to show the memory leak suspect in network of brokers. This is
1:b341d43:  * for https://issues.apache.org/activemq/browse/AMQ-2530
1:c7d559f:  *
1:b341d43:  */
1:b341d43: public class NetworkRemovesSubscriptionsTest extends TestCase {
1:b341d43:     private final static String frontEndAddress = "tcp://0.0.0.0:61617";
1:b341d43:     private final static String backEndAddress = "tcp://0.0.0.0:61616";
1:b341d43:     private final static String TOPIC_NAME = "TEST_TOPIC";
1:b341d43:     private BrokerService frontEnd;
1:b341d43:     private BrokerService backEnd;
1:b341d43:     private final ActiveMQConnectionFactory connectionFactory = new ActiveMQConnectionFactory(frontEndAddress);
1:b341d43:     private final ActiveMQTopic topic = new ActiveMQTopic(TOPIC_NAME);
1:b341d43: 
1:b341d43:     public void testWithSessionAndSubsciberClose() throws Exception {
1:b341d43: 
1:b341d43:         TopicConnection connection = connectionFactory.createTopicConnection();
1:b341d43:         connection.start();
1:b341d43: 
1:b341d43:         for (int i = 0; i < 100; i++) {
1:b341d43:             TopicSession subscriberSession = connection.createTopicSession(false, Session.AUTO_ACKNOWLEDGE);
1:b341d43:             TopicSubscriber subscriber = subscriberSession.createSubscriber(topic);
1:b341d43:             DummyMessageListener listener = new DummyMessageListener();
1:b341d43:             subscriber.setMessageListener(listener);
1:b341d43:             subscriber.close();
1:b341d43:             subscriberSession.close();
1:b341d43:         }
1:b341d43:         connection.close();
1:b341d43:         Thread.sleep(1000);
1:b341d43:         Destination dest = backEnd.getRegionBroker().getDestinationMap().get(topic);
1:b341d43:         assertNotNull(dest);
1:b341d43:         assertTrue(dest.getConsumers().isEmpty());
1:b341d43:     }
1:b341d43: 
1:b341d43:     public void testWithSessionCloseOutsideTheLoop() throws Exception {
1:b341d43: 
1:b341d43:         TopicConnection connection = connectionFactory.createTopicConnection();
1:b341d43:         connection.start();
1:b341d43:         TopicSession subscriberSession = connection.createTopicSession(false, Session.AUTO_ACKNOWLEDGE);
1:b341d43:         for (int i = 0; i < 100; i++) {
1:b341d43: 
1:b341d43:             TopicSubscriber subscriber = subscriberSession.createSubscriber(topic);
1:b341d43:             DummyMessageListener listener = new DummyMessageListener();
1:b341d43:             subscriber.setMessageListener(listener);
1:b341d43:             subscriber.close();
1:b341d43:         }
1:b341d43:         subscriberSession.close();
1:b341d43:         connection.close();
1:b341d43:         Thread.sleep(1000);
1:b341d43:         Destination dest = backEnd.getRegionBroker().getDestinationMap().get(topic);
1:b341d43:         assertNotNull(dest);
1:b341d43:         assertTrue(dest.getConsumers().isEmpty());
1:b341d43: 
1:b341d43:     }
1:b341d43: 
1:b341d43:     public void testWithOneSubscriber() throws Exception {
1:b341d43: 
1:b341d43:         TopicConnection connection = connectionFactory.createTopicConnection();
1:b341d43:         connection.start();
1:b341d43:         TopicSession subscriberSession = connection.createTopicSession(false, Session.AUTO_ACKNOWLEDGE);
1:b341d43: 
1:b341d43:         TopicSubscriber subscriber = subscriberSession.createSubscriber(topic);
1:b341d43:         DummyMessageListener listener = new DummyMessageListener();
1:b341d43:         subscriber.setMessageListener(listener);
1:b341d43:         subscriber.close();
1:b341d43:         subscriberSession.close();
1:b341d43:         connection.close();
1:b341d43:         Thread.sleep(1000);
1:b341d43:         Destination dest = backEnd.getRegionBroker().getDestinationMap().get(topic);
1:b341d43:         assertNotNull(dest);
1:b341d43:         assertTrue(dest.getConsumers().isEmpty());
1:b341d43:     }
1:b341d43: 
1:b341d43:     public void testWithoutSessionAndSubsciberClose() throws Exception {
1:b341d43: 
1:b341d43:         TopicConnection connection = connectionFactory.createTopicConnection();
1:b341d43:         connection.start();
1:b341d43: 
1:b341d43:         for (int i = 0; i < 100; i++) {
1:b341d43:             TopicSession subscriberSession = connection.createTopicSession(false, Session.AUTO_ACKNOWLEDGE);
1:b341d43:             TopicSubscriber subscriber = subscriberSession.createSubscriber(topic);
1:c7d559f:             assertNotNull(subscriber);
1:b341d43:         }
1:b341d43: 
1:b341d43:         connection.close();
1:b341d43:         Thread.sleep(1000);
1:b341d43:         Destination dest = backEnd.getRegionBroker().getDestinationMap().get(topic);
1:b341d43:         assertNotNull(dest);
1:b341d43:         assertTrue(dest.getConsumers().isEmpty());
1:b341d43:     }
1:b341d43: 
1:b341d43:     /**
1:b341d43:      * Running this test you can produce a leak of only 2 ConsumerInfo on BE
1:b341d43:      * broker, NOT 200 as in other cases!
1:c7d559f:      *
1:b341d43:      */
1:b341d43:     public void testWithoutSessionAndSubsciberClosePlayAround() throws Exception {
1:b341d43: 
1:b341d43:         TopicConnection connection = connectionFactory.createTopicConnection();
1:b341d43:         connection.start();
1:b341d43: 
1:b341d43:         for (int i = 0; i < 100; i++) {
1:b341d43:             TopicSession subscriberSession = connection.createTopicSession(false, Session.AUTO_ACKNOWLEDGE);
1:b341d43:             TopicSubscriber subscriber = subscriberSession.createSubscriber(topic);
1:b341d43:             DummyMessageListener listener = new DummyMessageListener();
1:b341d43:             subscriber.setMessageListener(listener);
1:b341d43:             if (i != 50) {
1:b341d43:                 subscriber.close();
1:b341d43:                 subscriberSession.close();
1:b341d43:             }
1:b341d43:         }
1:b341d43: 
1:b341d43:         connection.close();
1:b341d43:         Thread.sleep(1000);
1:b341d43:         Destination dest = backEnd.getRegionBroker().getDestinationMap().get(topic);
1:b341d43:         assertNotNull(dest);
1:b341d43:         assertTrue(dest.getConsumers().isEmpty());
1:b341d43:     }
1:b341d43: 
1:b341d43:     class DummyMessageListener implements MessageListener {
1:b341d43: 
1:c7d559f:         @Override
1:b341d43:         public void onMessage(Message arg0) {
1:b341d43:             // TODO Auto-generated method stub
1:b341d43: 
1:b341d43:         }
1:b341d43:     }
1:b341d43: 
1:b341d43:     @Override
1:b341d43:     protected void setUp() throws Exception {
1:b341d43:         this.backEnd = new BrokerService();
1:b341d43:         this.backEnd.setBrokerName("backEnd");
1:b341d43:         this.backEnd.setPersistent(false);
1:b341d43:         NetworkConnector backEndNetwork = this.backEnd.addNetworkConnector("static://" + frontEndAddress);
1:b341d43:         backEndNetwork.setName("backEndNetwork");
1:b341d43:         backEndNetwork.setDynamicOnly(true);
1:b341d43:         this.backEnd.addConnector(backEndAddress);
1:b341d43:         this.backEnd.start();
1:b341d43: 
1:b341d43:         this.frontEnd = new BrokerService();
1:b341d43:         this.frontEnd.setBrokerName("frontEnd");
1:b341d43:         this.frontEnd.setPersistent(false);
1:b341d43:         NetworkConnector frontEndNetwork = this.frontEnd.addNetworkConnector("static://" + backEndAddress);
1:b341d43:         frontEndNetwork.setName("frontEndNetwork");
1:b341d43:         this.frontEnd.addConnector(frontEndAddress);
1:b341d43:         this.frontEnd.start();
1:b341d43:         Thread.sleep(2000);
1:b341d43:     }
1:b341d43: 
1:b341d43:     @Override
1:b341d43:     protected void tearDown() throws Exception {
1:b341d43:         if (this.backEnd != null) {
1:b341d43:             this.backEnd.stop();
1:b341d43:         }
1:b341d43:         if (this.frontEnd != null) {
1:b341d43:             this.frontEnd.stop();
1:b341d43:         }
1:b341d43:     }
1:b341d43: 
1:b341d43: }
============================================================================
author:Timothy A. Bish
-------------------------------------------------------------------------------
commit:c7d559f
/////////////////////////////////////////////////////////////////////////
1:  *
/////////////////////////////////////////////////////////////////////////
1:             assertNotNull(subscriber);
/////////////////////////////////////////////////////////////////////////
1:      *
/////////////////////////////////////////////////////////////////////////
1:         @Override
commit:ef24cc9
author:Robert Davies
-------------------------------------------------------------------------------
commit:b341d43
/////////////////////////////////////////////////////////////////////////
1: /**
1:  * Licensed to the Apache Software Foundation (ASF) under one or more
1:  * contributor license agreements.  See the NOTICE file distributed with
1:  * this work for additional information regarding copyright ownership.
1:  * The ASF licenses this file to You under the Apache License, Version 2.0
1:  * (the "License"); you may not use this file except in compliance with
1:  * the License.  You may obtain a copy of the License at
1:  *
1:  *      http://www.apache.org/licenses/LICENSE-2.0
1:  *
1:  * Unless required by applicable law or agreed to in writing, software
1:  * distributed under the License is distributed on an "AS IS" BASIS,
1:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:  * See the License for the specific language governing permissions and
1:  * limitations under the License.
1:  */
1: package org.apache.activemq.network;
1: 
1: import javax.jms.Message;
1: import javax.jms.MessageListener;
1: import javax.jms.Session;
1: import javax.jms.TopicConnection;
1: import javax.jms.TopicSession;
1: import javax.jms.TopicSubscriber;
1: import junit.framework.TestCase;
1: import org.apache.activemq.ActiveMQConnectionFactory;
1: import org.apache.activemq.broker.BrokerService;
1: import org.apache.activemq.broker.region.Destination;
1: import org.apache.activemq.command.ActiveMQTopic;
1: 
1: /**
1:  * Various Tests to show the memory leak suspect in network of brokers. This is
1:  * for https://issues.apache.org/activemq/browse/AMQ-2530
1:  * 
1:  */
1: public class NetworkRemovesSubscriptionsTest extends TestCase {
1:     private final static String frontEndAddress = "tcp://0.0.0.0:61617";
1:     private final static String backEndAddress = "tcp://0.0.0.0:61616";
1:     private final static String TOPIC_NAME = "TEST_TOPIC";
1:     private BrokerService frontEnd;
1:     private BrokerService backEnd;
1:     private final ActiveMQConnectionFactory connectionFactory = new ActiveMQConnectionFactory(frontEndAddress);
1:     private final ActiveMQTopic topic = new ActiveMQTopic(TOPIC_NAME);
1: 
1:     public void testWithSessionAndSubsciberClose() throws Exception {
1: 
1:         TopicConnection connection = connectionFactory.createTopicConnection();
1:         connection.start();
1: 
1:         for (int i = 0; i < 100; i++) {
1:             TopicSession subscriberSession = connection.createTopicSession(false, Session.AUTO_ACKNOWLEDGE);
1:             TopicSubscriber subscriber = subscriberSession.createSubscriber(topic);
1:             DummyMessageListener listener = new DummyMessageListener();
1:             subscriber.setMessageListener(listener);
1:             subscriber.close();
1:             subscriberSession.close();
1:         }
1:         connection.close();
1:         Thread.sleep(1000);
1:         Destination dest = backEnd.getRegionBroker().getDestinationMap().get(topic);
1:         assertNotNull(dest);
1:         assertTrue(dest.getConsumers().isEmpty());
1:     }
1: 
1:     public void testWithSessionCloseOutsideTheLoop() throws Exception {
1: 
1:         TopicConnection connection = connectionFactory.createTopicConnection();
1:         connection.start();
1:         TopicSession subscriberSession = connection.createTopicSession(false, Session.AUTO_ACKNOWLEDGE);
1:         for (int i = 0; i < 100; i++) {
1: 
1:             TopicSubscriber subscriber = subscriberSession.createSubscriber(topic);
1:             DummyMessageListener listener = new DummyMessageListener();
1:             subscriber.setMessageListener(listener);
1:             subscriber.close();
1:         }
1:         subscriberSession.close();
1:         connection.close();
1:         Thread.sleep(1000);
1:         Destination dest = backEnd.getRegionBroker().getDestinationMap().get(topic);
1:         assertNotNull(dest);
1:         assertTrue(dest.getConsumers().isEmpty());
1: 
1:     }
1: 
1:     public void testWithOneSubscriber() throws Exception {
1: 
1:         TopicConnection connection = connectionFactory.createTopicConnection();
1:         connection.start();
1:         TopicSession subscriberSession = connection.createTopicSession(false, Session.AUTO_ACKNOWLEDGE);
1: 
1:         TopicSubscriber subscriber = subscriberSession.createSubscriber(topic);
1:         DummyMessageListener listener = new DummyMessageListener();
1:         subscriber.setMessageListener(listener);
1:         subscriber.close();
1:         subscriberSession.close();
1:         connection.close();
1:         Thread.sleep(1000);
1:         Destination dest = backEnd.getRegionBroker().getDestinationMap().get(topic);
1:         assertNotNull(dest);
1:         assertTrue(dest.getConsumers().isEmpty());
1:     }
1: 
1:     public void testWithoutSessionAndSubsciberClose() throws Exception {
1: 
1:         TopicConnection connection = connectionFactory.createTopicConnection();
1:         connection.start();
1: 
1:         for (int i = 0; i < 100; i++) {
1:             TopicSession subscriberSession = connection.createTopicSession(false, Session.AUTO_ACKNOWLEDGE);
1:             TopicSubscriber subscriber = subscriberSession.createSubscriber(topic);
1:         }
1: 
1:         connection.close();
1:         Thread.sleep(1000);
1:         Destination dest = backEnd.getRegionBroker().getDestinationMap().get(topic);
1:         assertNotNull(dest);
1:         assertTrue(dest.getConsumers().isEmpty());
1:     }
1: 
1:     /**
1:      * Running this test you can produce a leak of only 2 ConsumerInfo on BE
1:      * broker, NOT 200 as in other cases!
1:      * 
1:      */
1:     public void testWithoutSessionAndSubsciberClosePlayAround() throws Exception {
1: 
1:         TopicConnection connection = connectionFactory.createTopicConnection();
1:         connection.start();
1: 
1:         for (int i = 0; i < 100; i++) {
1:             TopicSession subscriberSession = connection.createTopicSession(false, Session.AUTO_ACKNOWLEDGE);
1:             TopicSubscriber subscriber = subscriberSession.createSubscriber(topic);
1:             DummyMessageListener listener = new DummyMessageListener();
1:             subscriber.setMessageListener(listener);
1:             if (i != 50) {
1:                 subscriber.close();
1:                 subscriberSession.close();
1:             }
1:         }
1: 
1:         connection.close();
1:         Thread.sleep(1000);
1:         Destination dest = backEnd.getRegionBroker().getDestinationMap().get(topic);
1:         assertNotNull(dest);
1:         assertTrue(dest.getConsumers().isEmpty());
1:     }
1: 
1:     class DummyMessageListener implements MessageListener {
1: 
1:         public void onMessage(Message arg0) {
1:             // TODO Auto-generated method stub
1: 
1:         }
1:     }
1: 
1:     @Override
1:     protected void setUp() throws Exception {
1:         this.backEnd = new BrokerService();
1:         this.backEnd.setBrokerName("backEnd");
1:         this.backEnd.setPersistent(false);
1:         NetworkConnector backEndNetwork = this.backEnd.addNetworkConnector("static://" + frontEndAddress);
1:         backEndNetwork.setName("backEndNetwork");
1:         backEndNetwork.setDynamicOnly(true);
1:         this.backEnd.addConnector(backEndAddress);
1:         this.backEnd.start();
1: 
1:         this.frontEnd = new BrokerService();
1:         this.frontEnd.setBrokerName("frontEnd");
1:         this.frontEnd.setPersistent(false);
1:         NetworkConnector frontEndNetwork = this.frontEnd.addNetworkConnector("static://" + backEndAddress);
1:         frontEndNetwork.setName("frontEndNetwork");
1:         this.frontEnd.addConnector(frontEndAddress);
1:         this.frontEnd.start();
1:         Thread.sleep(2000);
1:     }
1: 
1:     @Override
1:     protected void tearDown() throws Exception {
1:         if (this.backEnd != null) {
1:             this.backEnd.stop();
1:         }
1:         if (this.frontEnd != null) {
1:             this.frontEnd.stop();
1:         }
1:     }
1: 
1: }
============================================================================