1:1a88ac6: /**
1:1a88ac6:  * Licensed to the Apache Software Foundation (ASF) under one or more
1:1a88ac6:  * contributor license agreements.  See the NOTICE file distributed with
1:1a88ac6:  * this work for additional information regarding copyright ownership.
1:1a88ac6:  * The ASF licenses this file to You under the Apache License, Version 2.0
1:1a88ac6:  * (the "License"); you may not use this file except in compliance with
1:1a88ac6:  * the License.  You may obtain a copy of the License at
4:1a88ac6:  *
1:230a86c:  *      http://www.apache.org/licenses/LICENSE-2.0
1:1a88ac6:  *
1:1a88ac6:  * Unless required by applicable law or agreed to in writing, software
1:1a88ac6:  * distributed under the License is distributed on an "AS IS" BASIS,
1:1a88ac6:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:1a88ac6:  * See the License for the specific language governing permissions and
1:1a88ac6:  * limitations under the License.
1:1a88ac6:  */
1:1a88ac6: 
1:1a88ac6: package org.apache.activemq.transport.tcp;
1:1a88ac6: 
1:1a88ac6: import java.io.IOException;
1:1a88ac6: import java.net.Socket;
1:1a88ac6: import java.net.URI;
1:1a88ac6: import java.net.URISyntaxException;
1:1a88ac6: 
1:1a88ac6: import javax.net.ssl.SSLServerSocket;
1:1a88ac6: import javax.net.ssl.SSLServerSocketFactory;
1:1a88ac6: import javax.net.ssl.SSLSocket;
1:1a88ac6: 
1:74a7a8b: import org.apache.activemq.transport.Transport;
1:74a7a8b: import org.apache.activemq.wireformat.WireFormat;
1:74a7a8b: 
1:1a88ac6: /**
1:1a88ac6:  *  An SSL TransportServer.
1:1a88ac6:  *
1:1a88ac6:  *  Allows for client certificate authentication (refer to setNeedClientAuth for
1:1a88ac6:  *      details).
1:1a88ac6:  *  NOTE: Client certificate authentication is disabled by default.
1:1a88ac6:  *
1:1a88ac6:  */
1:1a88ac6: public class SslTransportServer extends TcpTransportServer {
1:1a88ac6: 
1:1a88ac6:     // Specifies if sockets created from this server should needClientAuth.
1:933eb2f:     private boolean needClientAuth;
1:1a88ac6: 
1:1a88ac6:     // Specifies if sockets created from this server should wantClientAuth.
1:933eb2f:     private boolean wantClientAuth;
1:1a88ac6: 
1:1a88ac6:     /**
1:6bae959:      * Creates a ssl transport server for the specified url using the provided
1:6bae959:      * serverSocketFactory
1:1a88ac6:      *
1:1a88ac6:      * @param transportFactory The factory used to create transports when connections arrive.
1:1a88ac6:      * @param location The location of the broker to bind to.
1:1a88ac6:      * @param serverSocketFactory The factory used to create this server.
1:1a88ac6:      * @throws IOException passed up from TcpTransportFactory.
1:1a88ac6:      * @throws URISyntaxException passed up from TcpTransportFactory.
1:1a88ac6:      */
1:0fffe21:     public SslTransportServer(SslTransportFactory transportFactory, URI location, SSLServerSocketFactory serverSocketFactory) throws IOException, URISyntaxException {
1:1a88ac6:         super(transportFactory, location, serverSocketFactory);
1:1a88ac6:     }
1:1a88ac6: 
1:1a88ac6:     /**
1:6bae959:      * Sets whether client authentication should be required
1:6bae959:      * Must be called before {@link #bind()}
1:6bae959:      * Note: Calling this method clears the wantClientAuth flag
1:6bae959:      * in the underlying implementation.
1:1a88ac6:      */
1:1a88ac6:     public void setNeedClientAuth(boolean needAuth) {
1:1a88ac6:         this.needClientAuth = needAuth;
1:1a88ac6:     }
1:1a88ac6: 
1:1a88ac6:     /**
1:6bae959:      * Returns whether client authentication should be required.
1:1a88ac6:      */
1:1a88ac6:     public boolean getNeedClientAuth() {
1:1a88ac6:         return this.needClientAuth;
1:1a88ac6:     }
1:1a88ac6: 
1:1a88ac6:     /**
1:6bae959:      * Returns whether client authentication should be requested.
1:1a88ac6:      */
1:1a88ac6:     public boolean getWantClientAuth() {
1:1a88ac6:         return this.wantClientAuth;
1:1a88ac6:     }
1:1a88ac6: 
1:1a88ac6:     /**
1:6bae959:      * Sets whether client authentication should be requested.
1:6bae959:      * Must be called before {@link #bind()}
1:6bae959:      * Note: Calling this method clears the needClientAuth flag
1:6bae959:      * in the underlying implementation.
1:1a88ac6:      */
1:1a88ac6:     public void setWantClientAuth(boolean wantAuth) {
1:1a88ac6:         this.wantClientAuth = wantAuth;
1:1a88ac6:     }
1:1a88ac6: 
1:1a88ac6:     /**
1:1a88ac6:      * Binds this socket to the previously specified URI.
1:1a88ac6:      *
1:1a88ac6:      * Overridden to allow for proper handling of needClientAuth.
1:1a88ac6:      *
1:1a88ac6:      * @throws IOException passed up from TcpTransportServer.
1:1a88ac6:      */
1:69fad2a:     @Override
1:1a88ac6:     public void bind() throws IOException {
1:1a88ac6:         super.bind();
1:1da24aa:         if (needClientAuth) {
1:1da24aa:             ((SSLServerSocket)this.serverSocket).setNeedClientAuth(true);
1:1da24aa:         } else if (wantClientAuth) {
1:1da24aa:             ((SSLServerSocket)this.serverSocket).setWantClientAuth(true);
1:1a88ac6:         }
1:1da24aa:     }
1:1a88ac6: 
1:1a88ac6:     /**
1:1a88ac6:      * Used to create Transports for this server.
1:1a88ac6:      *
1:1a88ac6:      * Overridden to allow the use of SslTransports (instead of TcpTransports).
1:1a88ac6:      *
1:1a88ac6:      * @param socket The incoming socket that will be wrapped into the new Transport.
1:1a88ac6:      * @param format The WireFormat being used.
1:1a88ac6:      * @return The newly return (SSL) Transport.
1:1a88ac6:      * @throws IOException
1:1a88ac6:      */
1:69fad2a:     @Override
1:1a88ac6:     protected Transport createTransport(Socket socket, WireFormat format) throws IOException {
1:1a88ac6:         return new SslTransport(format, (SSLSocket)socket);
1:1a88ac6:     }
1:1a88ac6: 
1:0fffe21:     @Override
1:0fffe21:     public boolean isSslServer() {
1:0fffe21:         return true;
1:1a88ac6:     }
1:1a88ac6: 
1:0fffe21: }
============================================================================
author:Christopher L. Shannon (cshannon)
-------------------------------------------------------------------------------
commit:69fad2a
/////////////////////////////////////////////////////////////////////////
1:     @Override
/////////////////////////////////////////////////////////////////////////
1:     @Override
author:Hiram R. Chirino
-------------------------------------------------------------------------------
commit:9a8f6e4
commit:933eb2f
/////////////////////////////////////////////////////////////////////////
1:     private boolean needClientAuth;
1:     private boolean wantClientAuth;
commit:74a7a8b
/////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////
1: import org.apache.activemq.transport.Transport;
1: import org.apache.activemq.wireformat.WireFormat;
1: 
commit:230a86c
/////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////
1:  *      http://www.apache.org/licenses/LICENSE-2.0
commit:6bae959
/////////////////////////////////////////////////////////////////////////
1:      * Creates a ssl transport server for the specified url using the provided
1:      * serverSocketFactory
/////////////////////////////////////////////////////////////////////////
1:      * Sets whether client authentication should be required
1:      * Must be called before {@link #bind()}
1:      * Note: Calling this method clears the wantClientAuth flag
1:      * in the underlying implementation.
1:      * Returns whether client authentication should be required.
1:      * Returns whether client authentication should be requested.
1:      * Sets whether client authentication should be requested.
1:      * Must be called before {@link #bind()}
1:      * Note: Calling this method clears the needClientAuth flag
1:      * in the underlying implementation.
commit:1a88ac6
/////////////////////////////////////////////////////////////////////////
1: /**
1:  *
1:  * Licensed to the Apache Software Foundation (ASF) under one or more
1:  * contributor license agreements.  See the NOTICE file distributed with
1:  * this work for additional information regarding copyright ownership.
1:  * The ASF licenses this file to You under the Apache License, Version 2.0
1:  * (the "License"); you may not use this file except in compliance with
1:  * the License.  You may obtain a copy of the License at
1:  *
0:  * http://www.apache.org/licenses/LICENSE-2.0
1:  *
1:  * Unless required by applicable law or agreed to in writing, software
1:  * distributed under the License is distributed on an "AS IS" BASIS,
1:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:  * See the License for the specific language governing permissions and
1:  * limitations under the License.
1:  */
1: 
1: package org.apache.activemq.transport.tcp;
1: 
0: import org.apache.activemq.wireformat.WireFormat;
0: import org.apache.activemq.transport.Transport;
1: 
1: import java.io.IOException;
1: import java.net.Socket;
1: import java.net.URI;
1: import java.net.URISyntaxException;
1: 
1: import javax.net.ssl.SSLServerSocket;
1: import javax.net.ssl.SSLServerSocketFactory;
1: import javax.net.ssl.SSLSocket;
1: 
1: /**
1:  *  An SSL TransportServer.
1:  * 
1:  *  Allows for client certificate authentication (refer to setNeedClientAuth for
1:  *      details).
1:  *  NOTE: Client certificate authentication is disabled by default. 
1:  *
1:  */
1: public class SslTransportServer extends TcpTransportServer {
1:     
1:     // Specifies if sockets created from this server should needClientAuth.
0:     private boolean needClientAuth = false;
1:     
1:     // Specifies if sockets created from this server should wantClientAuth.
0:     private boolean wantClientAuth = false;
1:     
1:     
1:     /**
0:      * Constructor.
1:      * 
1:      * @param transportFactory The factory used to create transports when connections arrive.
1:      * @param location The location of the broker to bind to.
1:      * @param serverSocketFactory The factory used to create this server.
0:      * @param needClientAuth States if this server should needClientAuth.
1:      * @throws IOException passed up from TcpTransportFactory.
1:      * @throws URISyntaxException passed up from TcpTransportFactory.
1:      */
0:     public SslTransportServer(
0:             SslTransportFactory transportFactory,
0:             URI location,
0:             SSLServerSocketFactory serverSocketFactory) throws IOException, URISyntaxException {
1:         super(transportFactory, location, serverSocketFactory);
1:     }
1:     
1:     /**
0:      * Setter for needClientAuth.
1:      * 
0:      * When set to true, needClientAuth will set SSLSockets' needClientAuth to true forcing clients to provide
0:      *      client certificates.
1:      */
1:     public void setNeedClientAuth(boolean needAuth) {
1:         this.needClientAuth = needAuth;
1:     }
1:     
1:     /**
0:      * Getter for needClientAuth.
1:      */
1:     public boolean getNeedClientAuth() {
1:         return this.needClientAuth;
1:     }
1:     
1:     /**
0:      * Getter for wantClientAuth.
1:      */
1:     public boolean getWantClientAuth() {
1:         return this.wantClientAuth;
1:     }
1:     
1:     /**
0:      * Setter for wantClientAuth.
1:      * 
0:      * When set to true, wantClientAuth will set SSLSockets' wantClientAuth to true forcing clients to provide
0:      *      client certificates.
1:      */
1:     public void setWantClientAuth(boolean wantAuth) {
1:         this.wantClientAuth = wantAuth;
1:     }
1:     
1:     /**
1:      * Binds this socket to the previously specified URI.
1:      * 
1:      * Overridden to allow for proper handling of needClientAuth.
1:      * 
1:      * @throws IOException passed up from TcpTransportServer. 
1:      */
1:     public void bind() throws IOException {
1:         super.bind();
0:         ((SSLServerSocket)this.serverSocket).setWantClientAuth(wantClientAuth);
0:         ((SSLServerSocket)this.serverSocket).setNeedClientAuth(needClientAuth);
1:     }
1:     
1:     /**
1:      * Used to create Transports for this server.
1:      * 
1:      * Overridden to allow the use of SslTransports (instead of TcpTransports).
1:      * 
1:      * @param socket The incoming socket that will be wrapped into the new Transport. 
1:      * @param format The WireFormat being used.
1:      * @return The newly return (SSL) Transport.
1:      * @throws IOException
1:      */
1:     protected Transport createTransport(Socket socket, WireFormat format) throws IOException {
1:         return new SslTransport(format, (SSLSocket)socket);
1:     }
1: }
author:Timothy A. Bish
-------------------------------------------------------------------------------
commit:0fffe21
/////////////////////////////////////////////////////////////////////////
0:  *
0:  *  NOTE: Client certificate authentication is disabled by default.
0: 
0: 
0: 
0:      *
1:     public SslTransportServer(SslTransportFactory transportFactory, URI location, SSLServerSocketFactory serverSocketFactory) throws IOException, URISyntaxException {
0: 
/////////////////////////////////////////////////////////////////////////
0: 
0: 
0: 
/////////////////////////////////////////////////////////////////////////
0: 
0:      *
0:      *
0:      * @throws IOException passed up from TcpTransportServer.
/////////////////////////////////////////////////////////////////////////
0: 
0:      *
0:      *
0:      * @param socket The incoming socket that will be wrapped into the new Transport.
/////////////////////////////////////////////////////////////////////////
0: 
1:     @Override
1:     public boolean isSslServer() {
1:         return true;
1:     }
0: 
author:David Jencks
-------------------------------------------------------------------------------
commit:1da24aa
/////////////////////////////////////////////////////////////////////////
1:         if (needClientAuth) {
1:             ((SSLServerSocket)this.serverSocket).setNeedClientAuth(true);
1:         } else if (wantClientAuth) {
1:             ((SSLServerSocket)this.serverSocket).setWantClientAuth(true);
1:         }
============================================================================