1:6ce59ed: /**
1:6ce59ed:  * Licensed to the Apache Software Foundation (ASF) under one or more
1:6ce59ed:  * contributor license agreements.  See the NOTICE file distributed with
1:6ce59ed:  * this work for additional information regarding copyright ownership.
1:6ce59ed:  * The ASF licenses this file to You under the Apache License, Version 2.0
1:6ce59ed:  * (the "License"); you may not use this file except in compliance with
1:6ce59ed:  * the License.  You may obtain a copy of the License at
1:6ce59ed:  *
1:6ce59ed:  *      http://www.apache.org/licenses/LICENSE-2.0
1:6ce59ed:  *
1:6ce59ed:  * Unless required by applicable law or agreed to in writing, software
1:6ce59ed:  * distributed under the License is distributed on an "AS IS" BASIS,
1:6ce59ed:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:6ce59ed:  * See the License for the specific language governing permissions and
1:6ce59ed:  * limitations under the License.
1:6ce59ed:  */
1:6ce59ed: package org.apache.activemq.bugs;
1:6ce59ed: 
1:6ce59ed: import static org.junit.Assert.assertEquals;
1:6ce59ed: 
1:6ce59ed: import javax.jms.Connection;
1:6ce59ed: import javax.jms.Destination;
1:6ce59ed: import javax.jms.MessageConsumer;
1:6ce59ed: import javax.jms.Session;
1:6ce59ed: import javax.jms.Topic;
1:6ce59ed: import javax.management.ObjectName;
1:6ce59ed: 
1:6ce59ed: import org.apache.activemq.ActiveMQConnectionFactory;
1:6ce59ed: import org.apache.activemq.broker.BrokerService;
1:6ce59ed: import org.apache.activemq.broker.jmx.BrokerView;
1:6ce59ed: import org.apache.activemq.broker.jmx.DurableSubscriptionViewMBean;
1:6ce59ed: import org.junit.After;
1:6ce59ed: import org.junit.Before;
1:6ce59ed: import org.junit.Test;
1:6ce59ed: import org.slf4j.Logger;
1:6ce59ed: import org.slf4j.LoggerFactory;
1:6ce59ed: 
1:6ce59ed: public class AMQ3992Test {
1:6ce59ed: 
1:6ce59ed:     private static final transient Logger LOG = LoggerFactory.getLogger(AMQ3992Test.class);
1:6ce59ed:     private static BrokerService brokerService;
1:6ce59ed:     private static String BROKER_ADDRESS = "tcp://localhost:0";
1:6ce59ed: 
1:6ce59ed:     private String connectionUri;
1:6ce59ed: 
1:6ce59ed:     @Before
1:6ce59ed:     public void setUp() throws Exception {
1:6ce59ed:         brokerService = new BrokerService();
1:6ce59ed:         brokerService.setPersistent(false);
1:6ce59ed:         brokerService.setUseJmx(true);
1:6ce59ed:         brokerService.setDeleteAllMessagesOnStartup(true);
1:6ce59ed:         connectionUri = brokerService.addConnector(BROKER_ADDRESS).getPublishableConnectString();
1:6ce59ed:         brokerService.start();
1:6ce59ed:         brokerService.waitUntilStarted();
1:6ce59ed:     }
1:6ce59ed: 
1:6ce59ed:     @After
1:6ce59ed:     public void tearDown() throws Exception {
1:6ce59ed:         brokerService.stop();
1:6ce59ed:         brokerService.waitUntilStopped();
1:6ce59ed:     }
1:6ce59ed: 
1:6ce59ed:     @Test
1:6ce59ed:     public void testDurableConsumerEnqueueCountWithZeroPrefetch() throws Exception {
1:6ce59ed: 
1:6ce59ed:         ActiveMQConnectionFactory connectionFactory = new ActiveMQConnectionFactory(connectionUri);
1:6ce59ed:         connectionFactory.getPrefetchPolicy().setAll(0);
1:6ce59ed: 
1:6ce59ed:         Connection connection = connectionFactory.createConnection();
1:6ce59ed:         connection.setClientID(getClass().getName());
1:6ce59ed:         connection.start();
1:6ce59ed: 
1:6ce59ed:         Session session = connection.createSession(false, Session.AUTO_ACKNOWLEDGE);
1:6ce59ed:         Destination destination = session.createTopic("DurableTopic");
1:6ce59ed: 
1:6ce59ed:         MessageConsumer consumer = session.createDurableSubscriber((Topic) destination, "EnqueueSub");
1:6ce59ed: 
1:6ce59ed:         BrokerView view = brokerService.getAdminView();
1:6ce59ed:         view.getDurableTopicSubscribers();
1:6ce59ed: 
1:6ce59ed:         ObjectName subName = view.getDurableTopicSubscribers()[0];
1:6ce59ed: 
1:6ce59ed:         DurableSubscriptionViewMBean sub = (DurableSubscriptionViewMBean)
1:6ce59ed:             brokerService.getManagementContext().newProxyInstance(subName, DurableSubscriptionViewMBean.class, true);
1:6ce59ed: 
1:6ce59ed:         assertEquals(0, sub.getEnqueueCounter());
1:6ce59ed: 
1:6ce59ed:         LOG.info("Enqueue counter for sub before pull requests: " + sub.getEnqueueCounter());
1:6ce59ed: 
1:6ce59ed:         // Trigger some pull Timeouts.
1:6ce59ed:         consumer.receive(500);
1:6ce59ed:         consumer.receive(500);
1:6ce59ed:         consumer.receive(500);
1:6ce59ed:         consumer.receive(500);
1:6ce59ed:         consumer.receive(500);
1:6ce59ed: 
1:6ce59ed:         // Let them all timeout.
1:6ce59ed:         Thread.sleep(600);
1:6ce59ed: 
1:6ce59ed:         LOG.info("Enqueue counter for sub after pull requests: " + sub.getEnqueueCounter());
1:6ce59ed:         assertEquals(0, sub.getEnqueueCounter());
1:6ce59ed: 
1:6ce59ed:         consumer.close();
1:6ce59ed:         session.close();
1:6ce59ed:         connection.close();
1:6ce59ed:     }
1:6ce59ed: }
============================================================================
author:Timothy A. Bish
-------------------------------------------------------------------------------
commit:ef24cc9
commit:6ce59ed
/////////////////////////////////////////////////////////////////////////
1: /**
1:  * Licensed to the Apache Software Foundation (ASF) under one or more
1:  * contributor license agreements.  See the NOTICE file distributed with
1:  * this work for additional information regarding copyright ownership.
1:  * The ASF licenses this file to You under the Apache License, Version 2.0
1:  * (the "License"); you may not use this file except in compliance with
1:  * the License.  You may obtain a copy of the License at
1:  *
1:  *      http://www.apache.org/licenses/LICENSE-2.0
1:  *
1:  * Unless required by applicable law or agreed to in writing, software
1:  * distributed under the License is distributed on an "AS IS" BASIS,
1:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:  * See the License for the specific language governing permissions and
1:  * limitations under the License.
1:  */
1: package org.apache.activemq.bugs;
1: 
1: import static org.junit.Assert.assertEquals;
1: 
1: import javax.jms.Connection;
1: import javax.jms.Destination;
1: import javax.jms.MessageConsumer;
1: import javax.jms.Session;
1: import javax.jms.Topic;
1: import javax.management.ObjectName;
1: 
1: import org.apache.activemq.ActiveMQConnectionFactory;
1: import org.apache.activemq.broker.BrokerService;
1: import org.apache.activemq.broker.jmx.BrokerView;
1: import org.apache.activemq.broker.jmx.DurableSubscriptionViewMBean;
1: import org.junit.After;
1: import org.junit.Before;
1: import org.junit.Test;
1: import org.slf4j.Logger;
1: import org.slf4j.LoggerFactory;
1: 
1: public class AMQ3992Test {
1: 
1:     private static final transient Logger LOG = LoggerFactory.getLogger(AMQ3992Test.class);
1:     private static BrokerService brokerService;
1:     private static String BROKER_ADDRESS = "tcp://localhost:0";
1: 
1:     private String connectionUri;
1: 
1:     @Before
1:     public void setUp() throws Exception {
1:         brokerService = new BrokerService();
1:         brokerService.setPersistent(false);
1:         brokerService.setUseJmx(true);
1:         brokerService.setDeleteAllMessagesOnStartup(true);
1:         connectionUri = brokerService.addConnector(BROKER_ADDRESS).getPublishableConnectString();
1:         brokerService.start();
1:         brokerService.waitUntilStarted();
1:     }
1: 
1:     @After
1:     public void tearDown() throws Exception {
1:         brokerService.stop();
1:         brokerService.waitUntilStopped();
1:     }
1: 
1:     @Test
1:     public void testDurableConsumerEnqueueCountWithZeroPrefetch() throws Exception {
1: 
1:         ActiveMQConnectionFactory connectionFactory = new ActiveMQConnectionFactory(connectionUri);
1:         connectionFactory.getPrefetchPolicy().setAll(0);
1: 
1:         Connection connection = connectionFactory.createConnection();
1:         connection.setClientID(getClass().getName());
1:         connection.start();
1: 
1:         Session session = connection.createSession(false, Session.AUTO_ACKNOWLEDGE);
1:         Destination destination = session.createTopic("DurableTopic");
1: 
1:         MessageConsumer consumer = session.createDurableSubscriber((Topic) destination, "EnqueueSub");
1: 
1:         BrokerView view = brokerService.getAdminView();
1:         view.getDurableTopicSubscribers();
1: 
1:         ObjectName subName = view.getDurableTopicSubscribers()[0];
1: 
1:         DurableSubscriptionViewMBean sub = (DurableSubscriptionViewMBean)
1:             brokerService.getManagementContext().newProxyInstance(subName, DurableSubscriptionViewMBean.class, true);
1: 
1:         assertEquals(0, sub.getEnqueueCounter());
1: 
1:         LOG.info("Enqueue counter for sub before pull requests: " + sub.getEnqueueCounter());
1: 
1:         // Trigger some pull Timeouts.
1:         consumer.receive(500);
1:         consumer.receive(500);
1:         consumer.receive(500);
1:         consumer.receive(500);
1:         consumer.receive(500);
1: 
1:         // Let them all timeout.
1:         Thread.sleep(600);
1: 
1:         LOG.info("Enqueue counter for sub after pull requests: " + sub.getEnqueueCounter());
1:         assertEquals(0, sub.getEnqueueCounter());
1: 
1:         consumer.close();
1:         session.close();
1:         connection.close();
1:     }
1: }
============================================================================