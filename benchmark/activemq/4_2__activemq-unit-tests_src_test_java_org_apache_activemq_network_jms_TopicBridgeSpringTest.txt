1:d29ca2a: /**
1:57b4941:  * Licensed to the Apache Software Foundation (ASF) under one or more
1:57b4941:  * contributor license agreements.  See the NOTICE file distributed with
1:57b4941:  * this work for additional information regarding copyright ownership.
1:57b4941:  * The ASF licenses this file to You under the Apache License, Version 2.0
1:57b4941:  * (the "License"); you may not use this file except in compliance with
1:57b4941:  * the License.  You may obtain a copy of the License at
3:d29ca2a:  *
1:230a86c:  *      http://www.apache.org/licenses/LICENSE-2.0
1:d29ca2a:  *
1:d29ca2a:  * Unless required by applicable law or agreed to in writing, software
1:d29ca2a:  * distributed under the License is distributed on an "AS IS" BASIS,
1:d29ca2a:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:d29ca2a:  * See the License for the specific language governing permissions and
1:d29ca2a:  * limitations under the License.
1:d29ca2a:  */
1:d29ca2a: package org.apache.activemq.network.jms;
8:d29ca2a: 
1:d29ca2a: import javax.jms.Destination;
1:d29ca2a: import javax.jms.JMSException;
1:d29ca2a: import javax.jms.Message;
1:d29ca2a: import javax.jms.MessageConsumer;
1:d29ca2a: import javax.jms.MessageListener;
1:d29ca2a: import javax.jms.MessageProducer;
1:d29ca2a: import javax.jms.Session;
1:d29ca2a: import javax.jms.TextMessage;
1:d29ca2a: import javax.jms.Topic;
1:d29ca2a: import javax.jms.TopicConnection;
1:d29ca2a: import javax.jms.TopicRequestor;
1:d29ca2a: import javax.jms.TopicSession;
1:d29ca2a: import junit.framework.TestCase;
1:d29ca2a: 
1:d29ca2a: import org.apache.activemq.ActiveMQConnectionFactory;
1:8bf987b: import org.slf4j.Logger;
1:8bf987b: import org.slf4j.LoggerFactory;
1:d29ca2a: import org.springframework.context.support.AbstractApplicationContext;
1:d29ca2a: import org.springframework.context.support.ClassPathXmlApplicationContext;
1:93dc39b: 
1:d29ca2a: public class TopicBridgeSpringTest extends TestCase implements MessageListener {
1:230a86c: 
1:933eb2f:     protected static final int MESSAGE_COUNT = 10;
1:8bf987b:     private static final Logger LOG = LoggerFactory.getLogger(TopicBridgeSpringTest.class);
1:d29ca2a: 
1:d29ca2a:     protected AbstractApplicationContext context;
1:d29ca2a:     protected TopicConnection localConnection;
1:d29ca2a:     protected TopicConnection remoteConnection;
1:d29ca2a:     protected TopicRequestor requestor;
1:d29ca2a:     protected TopicSession requestServerSession;
1:d29ca2a:     protected MessageConsumer requestServerConsumer;
1:d29ca2a:     protected MessageProducer requestServerProducer;
1:d29ca2a: 
1:d29ca2a:     protected void setUp() throws Exception {
1:230a86c: 
1:d29ca2a:         super.setUp();
1:d29ca2a:         context = createApplicationContext();
1:230a86c:         ActiveMQConnectionFactory fac = (ActiveMQConnectionFactory)context.getBean("localFactory");
1:d29ca2a:         localConnection = fac.createTopicConnection();
1:d29ca2a:         localConnection.start();
1:230a86c:         requestServerSession = localConnection.createTopicSession(false, Session.AUTO_ACKNOWLEDGE);
1:d29ca2a:         Topic theTopic = requestServerSession.createTopic(getClass().getName());
1:d29ca2a:         requestServerConsumer = requestServerSession.createConsumer(theTopic);
1:d29ca2a:         requestServerConsumer.setMessageListener(this);
1:d29ca2a:         requestServerProducer = requestServerSession.createProducer(null);
1:230a86c: 
1:230a86c:         fac = (ActiveMQConnectionFactory)context.getBean("remoteFactory");
1:d29ca2a:         remoteConnection = fac.createTopicConnection();
1:d29ca2a:         remoteConnection.start();
1:230a86c:         TopicSession session = remoteConnection.createTopicSession(false, Session.AUTO_ACKNOWLEDGE);
1:230a86c:         requestor = new TopicRequestor(session, theTopic);
1:d29ca2a:     }
1:d29ca2a: 
1:d29ca2a:     protected AbstractApplicationContext createApplicationContext() {
1:d29ca2a:         return new ClassPathXmlApplicationContext("org/apache/activemq/network/jms/topic-spring.xml");
1:d29ca2a:     }
1:d29ca2a: 
1:d29ca2a:     protected void tearDown() throws Exception {
1:d29ca2a:         localConnection.close();
1:d29ca2a:         super.tearDown();
1:d29ca2a:     }
1:230a86c: 
1:230a86c:     public void testTopicRequestorOverBridge() throws JMSException {
1:230a86c:         for (int i = 0; i < MESSAGE_COUNT; i++) {
1:230a86c:             TextMessage msg = requestServerSession.createTextMessage("test msg: " + i);
1:fc00993:             LOG.info("Making request: " + msg);
1:230a86c:             TextMessage result = (TextMessage)requestor.request(msg);
1:d29ca2a:             assertNotNull(result);
1:fc00993:             LOG.info("Received result: " + result.getText());
1:d29ca2a:         }
1:d29ca2a:     }
1:230a86c: 
1:230a86c:     public void onMessage(Message msg) {
1:230a86c:         try {
1:230a86c:             TextMessage textMsg = (TextMessage)msg;
1:230a86c:             String payload = "REPLY: " + textMsg.getText();
1:d29ca2a:             Destination replyTo;
1:230a86c:             replyTo = msg.getJMSReplyTo();
1:d29ca2a:             textMsg.clearBody();
1:d29ca2a:             textMsg.setText(payload);
1:fc00993:             LOG.info("Sending response: " + textMsg);
1:230a86c:             requestServerProducer.send(replyTo, textMsg);
1:230a86c:         } catch (JMSException e) {
1:d29ca2a:             e.printStackTrace();
1:d29ca2a:         }
1:d29ca2a:     }
1:d29ca2a: 
1:d29ca2a: }
============================================================================
author:Hadrian Zbarcea
-------------------------------------------------------------------------------
commit:f9bec8f
author:Timothy A. Bish
-------------------------------------------------------------------------------
commit:ef24cc9
commit:9529b24
/////////////////////////////////////////////////////////////////////////
author:Bosanac Dejan
-------------------------------------------------------------------------------
commit:8bf987b
/////////////////////////////////////////////////////////////////////////
1: import org.slf4j.Logger;
1: import org.slf4j.LoggerFactory;
1:     private static final Logger LOG = LoggerFactory.getLogger(TopicBridgeSpringTest.class);
author:Hiram R. Chirino
-------------------------------------------------------------------------------
commit:933eb2f
/////////////////////////////////////////////////////////////////////////
1:     protected static final int MESSAGE_COUNT = 10;
commit:fc00993
/////////////////////////////////////////////////////////////////////////
0:     private static final Log LOG = LogFactory.getLog(TopicBridgeSpringTest.class);
/////////////////////////////////////////////////////////////////////////
1:             LOG.info("Making request: " + msg);
1:             LOG.info("Received result: " + result.getText());
/////////////////////////////////////////////////////////////////////////
1:             LOG.info("Sending response: " + textMsg);
commit:230a86c
/////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////
1:  *      http://www.apache.org/licenses/LICENSE-2.0
/////////////////////////////////////////////////////////////////////////
1: 
/////////////////////////////////////////////////////////////////////////
1: 
1:         ActiveMQConnectionFactory fac = (ActiveMQConnectionFactory)context.getBean("localFactory");
1:         requestServerSession = localConnection.createTopicSession(false, Session.AUTO_ACKNOWLEDGE);
1: 
1:         fac = (ActiveMQConnectionFactory)context.getBean("remoteFactory");
1:         TopicSession session = remoteConnection.createTopicSession(false, Session.AUTO_ACKNOWLEDGE);
1:         requestor = new TopicRequestor(session, theTopic);
1: 
1:     public void testTopicRequestorOverBridge() throws JMSException {
1:         for (int i = 0; i < MESSAGE_COUNT; i++) {
1:             TextMessage msg = requestServerSession.createTextMessage("test msg: " + i);
1:             TextMessage result = (TextMessage)requestor.request(msg);
1: 
1:     public void onMessage(Message msg) {
1:         try {
1:             TextMessage textMsg = (TextMessage)msg;
1:             String payload = "REPLY: " + textMsg.getText();
1:             replyTo = msg.getJMSReplyTo();
1:             requestServerProducer.send(replyTo, textMsg);
1:         } catch (JMSException e) {
commit:57b4941
/////////////////////////////////////////////////////////////////////////
1:  * Licensed to the Apache Software Foundation (ASF) under one or more
1:  * contributor license agreements.  See the NOTICE file distributed with
1:  * this work for additional information regarding copyright ownership.
1:  * The ASF licenses this file to You under the Apache License, Version 2.0
1:  * (the "License"); you may not use this file except in compliance with
1:  * the License.  You may obtain a copy of the License at
commit:93dc39b
/////////////////////////////////////////////////////////////////////////
0: import org.apache.commons.logging.Log;
0: import org.apache.commons.logging.LogFactory;
0:     protected static final Log log = LogFactory.getLog(TopicBridgeSpringTest.class);
1: 
/////////////////////////////////////////////////////////////////////////
0:             log.info("Making request: " + msg);
0:             log.info("Received result: " + result.getText());
/////////////////////////////////////////////////////////////////////////
0:             log.info("Sending response: " + textMsg);
commit:48b4869
/////////////////////////////////////////////////////////////////////////
0:  * Copyright 2005-2006 The Apache Software Foundation
commit:d29ca2a
/////////////////////////////////////////////////////////////////////////
1: /**
1:  *
0:  * Copyright 2004 The Apache Software Foundation
1:  *
0:  * Licensed under the Apache License, Version 2.0 (the "License");
0:  * you may not use this file except in compliance with the License.
0:  * You may obtain a copy of the License at
1:  *
0:  * http://www.apache.org/licenses/LICENSE-2.0
1:  *
1:  * Unless required by applicable law or agreed to in writing, software
1:  * distributed under the License is distributed on an "AS IS" BASIS,
1:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:  * See the License for the specific language governing permissions and
1:  * limitations under the License.
1:  */
1: package org.apache.activemq.network.jms;
1: 
1: import javax.jms.Destination;
1: import javax.jms.JMSException;
1: import javax.jms.Message;
1: import javax.jms.MessageConsumer;
1: import javax.jms.MessageListener;
1: import javax.jms.MessageProducer;
1: import javax.jms.Session;
1: import javax.jms.TextMessage;
1: import javax.jms.Topic;
1: import javax.jms.TopicConnection;
1: import javax.jms.TopicRequestor;
1: import javax.jms.TopicSession;
1: import junit.framework.TestCase;
1: 
1: import org.apache.activemq.ActiveMQConnectionFactory;
1: import org.springframework.context.support.AbstractApplicationContext;
1: import org.springframework.context.support.ClassPathXmlApplicationContext;
1: 
1: public class TopicBridgeSpringTest extends TestCase implements MessageListener {
1:     
0:     protected static final int MESSAGE_COUNT = 10;
1:     protected AbstractApplicationContext context;
1:     protected TopicConnection localConnection;
1:     protected TopicConnection remoteConnection;
1:     protected TopicRequestor requestor;
1:     protected TopicSession requestServerSession;
1:     protected MessageConsumer requestServerConsumer;
1:     protected MessageProducer requestServerProducer;
1: 
1:     protected void setUp() throws Exception {
1:         
1:         super.setUp();
1:         context = createApplicationContext();
0:         ActiveMQConnectionFactory fac = (ActiveMQConnectionFactory) context.getBean("localFactory");
1:         localConnection = fac.createTopicConnection();
1:         localConnection.start();
0:         requestServerSession = localConnection.createTopicSession(false,Session.AUTO_ACKNOWLEDGE);
1:         Topic theTopic = requestServerSession.createTopic(getClass().getName());
1:         requestServerConsumer = requestServerSession.createConsumer(theTopic);
1:         requestServerConsumer.setMessageListener(this);
1:         requestServerProducer = requestServerSession.createProducer(null);
1:         
0:         fac = (ActiveMQConnectionFactory) context.getBean("remoteFactory");
1:         remoteConnection = fac.createTopicConnection();
1:         remoteConnection.start();
0:         TopicSession session = remoteConnection.createTopicSession(false,Session.AUTO_ACKNOWLEDGE);
0:         requestor = new TopicRequestor(session,theTopic);
1:     }
1: 
1: 
1:     protected AbstractApplicationContext createApplicationContext() {
1:         return new ClassPathXmlApplicationContext("org/apache/activemq/network/jms/topic-spring.xml");
1:     }
1: 
1:     
1:     protected void tearDown() throws Exception {
1:         localConnection.close();
1:         super.tearDown();
1:     }
1:     
0:     public void testTopicRequestorOverBridge() throws JMSException{
0:         for (int i =0;i < MESSAGE_COUNT; i++){
0:             TextMessage msg = requestServerSession.createTextMessage("test msg: " +i);
0:             System.out.println("Making request: " + msg);
0:             TextMessage result = (TextMessage) requestor.request(msg);
1:             assertNotNull(result);
0:             System.out.println("Received result: " + result.getText());
1:         }
1:     }
1:     
0:     public void onMessage(Message msg){
0:         try{
0:             TextMessage textMsg=(TextMessage) msg;
0:             String payload="REPLY: "+textMsg.getText();
1:             Destination replyTo;
0:             replyTo=msg.getJMSReplyTo();
1:             textMsg.clearBody();
1:             textMsg.setText(payload);
0:             System.out.println("Sending response: " + textMsg);
0:             requestServerProducer.send(replyTo,textMsg);
0:         }catch(JMSException e){
0:             // TODO Auto-generated catch block
1:             e.printStackTrace();
1:         }
1:     }
1: 
1: }
============================================================================