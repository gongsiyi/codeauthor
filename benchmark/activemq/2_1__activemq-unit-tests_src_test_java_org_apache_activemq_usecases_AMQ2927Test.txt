1:acb8164: /**
1:acb8164:  * Licensed to the Apache Software Foundation (ASF) under one or more
1:acb8164:  * contributor license agreements.  See the NOTICE file distributed with
1:acb8164:  * this work for additional information regarding copyright ownership.
1:acb8164:  * The ASF licenses this file to You under the Apache License, Version 2.0
1:acb8164:  * (the "License"); you may not use this file except in compliance with
1:acb8164:  * the License.  You may obtain a copy of the License at
1:acb8164:  *
1:acb8164:  *      http://www.apache.org/licenses/LICENSE-2.0
1:acb8164:  *
1:acb8164:  * Unless required by applicable law or agreed to in writing, software
1:acb8164:  * distributed under the License is distributed on an "AS IS" BASIS,
1:acb8164:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:acb8164:  * See the License for the specific language governing permissions and
1:acb8164:  * limitations under the License.
1:acb8164:  */
1:acb8164: package org.apache.activemq.usecases;
1:acb8164: 
1:acb8164: import org.apache.activemq.JmsMultipleBrokersTestSupport;
1:acb8164: import org.apache.activemq.broker.BrokerService;
1:acb8164: import org.apache.activemq.command.ActiveMQQueue;
1:acb8164: import org.apache.activemq.network.NetworkConnector;
1:9041c3f: import org.apache.activemq.util.MessageIdList;
1:8bf987b: import org.slf4j.Logger;
1:8bf987b: import org.slf4j.LoggerFactory;
1:acb8164: 
1:acb8164: 
1:acb8164: import javax.jms.MessageConsumer;
1:acb8164: import java.net.URI;
1:acb8164: 
1:acb8164: 
1:acb8164: public class AMQ2927Test extends JmsMultipleBrokersTestSupport {
1:9041c3f: 
1:8bf987b:     private static final Logger LOG = LoggerFactory.getLogger(AMQ2927Test.class);
1:acb8164: 
1:acb8164:     ActiveMQQueue queue = new ActiveMQQueue("TEST");
1:acb8164: 
1:acb8164:     @Override
1:acb8164:     public void setUp() throws Exception {
1:acb8164:         super.setAutoFail(true);
1:acb8164:         super.setUp();
1:996b7a5:         BrokerService brokerA = createBroker(new URI("broker:(tcp://localhost:61616)/BrokerA?persistent=true&useJmx=false&deleteAllMessagesOnStartup=true"));
1:996b7a5:         brokerA.setBrokerId("BrokerA");
1:996b7a5:         BrokerService brokerB = createBroker(new URI("broker:(tcp://localhost:61617)/BrokerB?persistent=true&useJmx=false&deleteAllMessagesOnStartup=true"));
1:996b7a5:         brokerB.setBrokerId("BrokerB");
1:acb8164:         NetworkConnector aTOb = bridgeBrokers(brokers.get("BrokerA").broker, brokers.get("BrokerB").broker, false, 2, true, true);
1:acb8164:         aTOb.addStaticallyIncludedDestination(queue);
1:acb8164:         NetworkConnector bTOa = bridgeBrokers(brokers.get("BrokerB").broker, brokers.get("BrokerA").broker, false, 2, true, true);
1:acb8164:         bTOa.addStaticallyIncludedDestination(queue);
1:acb8164: 
1:acb8164:         startAllBrokers();
1:acb8164:         waitForBridgeFormation();
1:acb8164:         
2:acb8164:     }
1:acb8164: 
1:9041c3f:     public void testRestartSend() throws Exception {
1:acb8164: 
1:acb8164:         Thread.sleep(1000);
1:acb8164: 
1:9041c3f:         LOG.info("restarting broker");
1:acb8164: 
1:acb8164:         restartBroker("BrokerA");
1:acb8164: 
1:acb8164:         Thread.sleep(5000);
1:acb8164: 
1:9041c3f:         LOG.info("sending message");
1:acb8164: 
1:acb8164:         sendMessages("BrokerA", queue, 1);
1:acb8164: 
1:acb8164:         Thread.sleep(3000);
1:acb8164: 
1:9041c3f:         LOG.info("consuming message");
1:acb8164: 
1:acb8164:         MessageConsumer consumerA = createConsumer("BrokerA", queue);
1:acb8164:         MessageConsumer consumerB = createConsumer("BrokerB", queue);
1:9041c3f: 
1:acb8164:         Thread.sleep(1000);
1:9041c3f: 
1:9041c3f:         MessageIdList messagesA = getConsumerMessages("BrokerA", consumerA);
1:9041c3f:         MessageIdList messagesB = getConsumerMessages("BrokerB", consumerB);
1:9041c3f: 
1:9041c3f:         LOG.info("consumerA = " + messagesA);
1:9041c3f:         LOG.info("consumerB = " + messagesB);
1:9041c3f: 
1:9041c3f:         messagesA.assertMessagesReceived(0);
1:9041c3f:         messagesB.assertMessagesReceived(1);
1:9041c3f: 
1:8bf987b:     }
1:9041c3f: 
1:9041c3f: 
1:9041c3f:     public void testSendRestart() throws Exception {
1:9041c3f: 
1:9041c3f:         Thread.sleep(1000);
1:9041c3f: 
1:9041c3f:         LOG.info("sending message");
1:9041c3f: 
1:9041c3f:         sendMessages("BrokerA", queue, 1);
1:9041c3f: 
1:9041c3f:         Thread.sleep(3000);
1:9041c3f: 
1:9041c3f:         LOG.info("restarting broker");
1:9041c3f: 
1:9041c3f:         restartBroker("BrokerA");
1:9041c3f: 
1:9041c3f:         Thread.sleep(5000);
1:9041c3f: 
1:9041c3f:         LOG.info("consuming message");
1:9041c3f: 
1:9041c3f:         MessageConsumer consumerA = createConsumer("BrokerA", queue);
1:9041c3f:         MessageConsumer consumerB = createConsumer("BrokerB", queue);
1:9041c3f: 
1:9041c3f:         Thread.sleep(1000);
1:9041c3f: 
1:9041c3f:         MessageIdList messagesA = getConsumerMessages("BrokerA", consumerA);
1:9041c3f:         MessageIdList messagesB = getConsumerMessages("BrokerB", consumerB);
1:acb8164: 
1:9041c3f:         LOG.info("consumerA = " + messagesA);
1:9041c3f:         LOG.info("consumerB = " + messagesB);
1:acb8164: 
1:9041c3f:         messagesA.assertMessagesReceived(0);
1:9041c3f:         messagesB.assertMessagesReceived(1);
1:9041c3f:     }
1:acb8164: 
1:acb8164:     protected void restartBroker(String brokerName) throws Exception {
1:acb8164:         destroyBroker("BrokerA");
1:acb8164:         BrokerService broker = createBroker(new URI("broker:(tcp://localhost:61616)/BrokerA?persistent=true&useJmx=false"));
1:996b7a5:         broker.setBrokerId("BrokerA");
1:acb8164:         NetworkConnector aTOb = bridgeBrokers(brokers.get("BrokerA").broker, brokers.get("BrokerB").broker, false, 2, true, true);
1:acb8164:         aTOb.addStaticallyIncludedDestination(queue);
1:acb8164:         broker.start();
1:acb8164:         broker.waitUntilStarted();
1:acb8164:         waitForBridgeFormation();
1:acb8164:     }
1:acb8164: 
1:acb8164: }
============================================================================
author:Timothy A. Bish
-------------------------------------------------------------------------------
commit:ef24cc9
author:Bosanac Dejan
-------------------------------------------------------------------------------
commit:8bf987b
/////////////////////////////////////////////////////////////////////////
1: import org.slf4j.Logger;
1: import org.slf4j.LoggerFactory;
/////////////////////////////////////////////////////////////////////////
1:     private static final Logger LOG = LoggerFactory.getLogger(AMQ2927Test.class);
/////////////////////////////////////////////////////////////////////////
1: }
commit:996b7a5
/////////////////////////////////////////////////////////////////////////
1:         BrokerService brokerA = createBroker(new URI("broker:(tcp://localhost:61616)/BrokerA?persistent=true&useJmx=false&deleteAllMessagesOnStartup=true"));
1:         brokerA.setBrokerId("BrokerA");
1:         BrokerService brokerB = createBroker(new URI("broker:(tcp://localhost:61617)/BrokerB?persistent=true&useJmx=false&deleteAllMessagesOnStartup=true"));
1:         brokerB.setBrokerId("BrokerB");
/////////////////////////////////////////////////////////////////////////
1:         broker.setBrokerId("BrokerA");
commit:9041c3f
/////////////////////////////////////////////////////////////////////////
1: import org.apache.activemq.util.MessageIdList;
0: import org.apache.commons.logging.Log;
0: import org.apache.commons.logging.LogFactory;
/////////////////////////////////////////////////////////////////////////
0:     private static final Log LOG = LogFactory.getLog(AMQ2927Test.class);
1: 
/////////////////////////////////////////////////////////////////////////
1:     public void testRestartSend() throws Exception {
1:         LOG.info("restarting broker");
1:         LOG.info("sending message");
1:         LOG.info("consuming message");
1:         MessageIdList messagesA = getConsumerMessages("BrokerA", consumerA);
1:         MessageIdList messagesB = getConsumerMessages("BrokerB", consumerB);
1: 
1:         LOG.info("consumerA = " + messagesA);
1:         LOG.info("consumerB = " + messagesB);
1: 
1:         messagesA.assertMessagesReceived(0);
1:         messagesB.assertMessagesReceived(1);
1: 
1:     }
1: 
1: 
1:     public void testSendRestart() throws Exception {
1: 
1:         Thread.sleep(1000);
1: 
1:         LOG.info("sending message");
1: 
1:         sendMessages("BrokerA", queue, 1);
1: 
1:         Thread.sleep(3000);
1: 
1:         LOG.info("restarting broker");
1: 
1:         restartBroker("BrokerA");
1: 
1:         Thread.sleep(5000);
1: 
1:         LOG.info("consuming message");
1: 
1:         MessageConsumer consumerA = createConsumer("BrokerA", queue);
1:         MessageConsumer consumerB = createConsumer("BrokerB", queue);
1: 
1:         Thread.sleep(1000);
1: 
1:         MessageIdList messagesA = getConsumerMessages("BrokerA", consumerA);
1:         MessageIdList messagesB = getConsumerMessages("BrokerB", consumerB);
1: 
1:         LOG.info("consumerA = " + messagesA);
1:         LOG.info("consumerB = " + messagesB);
1: 
1:         messagesA.assertMessagesReceived(0);
1:         messagesB.assertMessagesReceived(1);
commit:acb8164
/////////////////////////////////////////////////////////////////////////
1: /**
1:  * Licensed to the Apache Software Foundation (ASF) under one or more
1:  * contributor license agreements.  See the NOTICE file distributed with
1:  * this work for additional information regarding copyright ownership.
1:  * The ASF licenses this file to You under the Apache License, Version 2.0
1:  * (the "License"); you may not use this file except in compliance with
1:  * the License.  You may obtain a copy of the License at
1:  *
1:  *      http://www.apache.org/licenses/LICENSE-2.0
1:  *
1:  * Unless required by applicable law or agreed to in writing, software
1:  * distributed under the License is distributed on an "AS IS" BASIS,
1:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:  * See the License for the specific language governing permissions and
1:  * limitations under the License.
1:  */
1: package org.apache.activemq.usecases;
1: 
1: import org.apache.activemq.JmsMultipleBrokersTestSupport;
1: import org.apache.activemq.broker.BrokerService;
1: import org.apache.activemq.command.ActiveMQQueue;
1: import org.apache.activemq.network.NetworkConnector;
1: 
1: 
1: import javax.jms.MessageConsumer;
1: import java.net.URI;
1: 
1: 
1: public class AMQ2927Test extends JmsMultipleBrokersTestSupport {
1: 
1:     ActiveMQQueue queue = new ActiveMQQueue("TEST");
1: 
1:     @Override
1:     public void setUp() throws Exception {
1:         super.setAutoFail(true);
1:         super.setUp();
0:         createBroker(new URI("broker:(tcp://localhost:61616)/BrokerA?persistent=true&useJmx=false&deleteAllMessagesOnStartup=true"));
0:         createBroker(new URI("broker:(tcp://localhost:61617)/BrokerB?persistent=true&useJmx=false"));
1:         NetworkConnector aTOb = bridgeBrokers(brokers.get("BrokerA").broker, brokers.get("BrokerB").broker, false, 2, true, true);
1:         aTOb.addStaticallyIncludedDestination(queue);
1:         NetworkConnector bTOa = bridgeBrokers(brokers.get("BrokerB").broker, brokers.get("BrokerA").broker, false, 2, true, true);
1:         bTOa.addStaticallyIncludedDestination(queue);
1: 
1:         startAllBrokers();
1:         waitForBridgeFormation();
1:         
1:     }
1: 
0:     public void testFailoverRestart() throws Exception {
1: 
1:         Thread.sleep(1000);
1: 
0:         System.out.println("restarting broker");
1: 
1:         restartBroker("BrokerA");
1: 
1:         Thread.sleep(5000);
1: 
0:         System.out.println("sending message");
1: 
1:         sendMessages("BrokerA", queue, 1);
1: 
1:         Thread.sleep(3000);
1: 
0:         System.out.println("consuming message");
1: 
1:         MessageConsumer consumerA = createConsumer("BrokerA", queue);
1:         MessageConsumer consumerB = createConsumer("BrokerB", queue);
1: 
1:         Thread.sleep(1000);
1: 
0:         System.out.println("consumerA = " + getConsumerMessages("BrokerA", consumerA));
0:         System.out.println("consumerB = " + getConsumerMessages("BrokerB", consumerB)); 
1:     }
1: 
1:     protected void restartBroker(String brokerName) throws Exception {
1:         destroyBroker("BrokerA");
1:         BrokerService broker = createBroker(new URI("broker:(tcp://localhost:61616)/BrokerA?persistent=true&useJmx=false"));
1:         NetworkConnector aTOb = bridgeBrokers(brokers.get("BrokerA").broker, brokers.get("BrokerB").broker, false, 2, true, true);
1:         aTOb.addStaticallyIncludedDestination(queue);
1:         broker.start();
1:         broker.waitUntilStarted();
1:         waitForBridgeFormation();
1:     }
1: 
1: }
============================================================================