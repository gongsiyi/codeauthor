1:d112ad5: /**
1:d112ad5:  * Licensed to the Apache Software Foundation (ASF) under one or more
1:d112ad5:  * contributor license agreements.  See the NOTICE file distributed with
1:d112ad5:  * this work for additional information regarding copyright ownership.
1:d112ad5:  * The ASF licenses this file to You under the Apache License, Version 2.0
1:d112ad5:  * (the "License"); you may not use this file except in compliance with
1:d112ad5:  * the License.  You may obtain a copy of the License at
1:d112ad5:  *
1:d112ad5:  *      http://www.apache.org/licenses/LICENSE-2.0
1:d112ad5:  *
1:d112ad5:  * Unless required by applicable law or agreed to in writing, software
1:d112ad5:  * distributed under the License is distributed on an "AS IS" BASIS,
1:d112ad5:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:d112ad5:  * See the License for the specific language governing permissions and
1:d112ad5:  * limitations under the License.
1:d112ad5:  */
1:d112ad5: package org.apache.activemq.bugs;
1:d112ad5: 
1:d112ad5: import static org.junit.Assert.assertTrue;
1:d112ad5: 
1:d112ad5: import java.io.File;
1:d112ad5: import java.util.Random;
1:d112ad5: import java.util.concurrent.CountDownLatch;
1:d112ad5: import java.util.concurrent.ExecutorService;
1:d112ad5: import java.util.concurrent.Executors;
1:d112ad5: import java.util.concurrent.TimeUnit;
1:d112ad5: 
1:d112ad5: import javax.jms.DeliveryMode;
1:d112ad5: import javax.jms.JMSException;
1:d112ad5: import javax.jms.MessageConsumer;
1:d112ad5: import javax.jms.MessageProducer;
1:d112ad5: import javax.jms.Session;
1:d112ad5: import javax.jms.TextMessage;
1:d112ad5: 
1:d112ad5: import org.apache.activemq.ActiveMQConnection;
1:d112ad5: import org.apache.activemq.ActiveMQConnectionFactory;
1:d112ad5: import org.apache.activemq.broker.Broker;
1:d112ad5: import org.apache.activemq.broker.BrokerService;
1:d112ad5: import org.apache.activemq.broker.region.policy.PolicyEntry;
1:d112ad5: import org.apache.activemq.broker.region.policy.PolicyMap;
1:d112ad5: import org.apache.activemq.broker.region.policy.SharedDeadLetterStrategy;
1:d112ad5: import org.apache.activemq.command.ActiveMQQueue;
1:d112ad5: import org.apache.activemq.util.Wait;
1:d112ad5: import org.junit.After;
1:d112ad5: import org.junit.Before;
1:d112ad5: import org.junit.Test;
1:d112ad5: import org.slf4j.Logger;
1:d112ad5: import org.slf4j.LoggerFactory;
1:d112ad5: 
1:d112ad5: public class MemoryUsageCleanupTest {
1:d112ad5: 
1:d112ad5:     private static final Logger LOG = LoggerFactory.getLogger(MemoryUsageCleanupTest.class);
1:d112ad5:     private static final String QUEUE_NAME = MemoryUsageCleanupTest.class.getName() + "Queue";
1:d112ad5: 
1:d112ad5:     private final String str = new String(
1:d112ad5:         "QAa0bcLdUK2eHfJgTP8XhiFj61DOklNm9nBoI5pGqYVrs3CtSuMZvwWx4yE7zR");
1:d112ad5: 
1:d112ad5:     private BrokerService broker;
1:d112ad5:     private String connectionUri;
1:d112ad5:     private ExecutorService pool;
1:d112ad5:     private String queueName;
1:d112ad5:     private Random r = new Random();
1:d112ad5: 
1:d112ad5:     @Before
1:d112ad5:     public void setUp() throws Exception {
1:d112ad5: 
1:d112ad5:         broker = new BrokerService();
1:d112ad5:         broker.setDataDirectory("target" + File.separator + "activemq-data");
1:d112ad5:         broker.setPersistent(true);
1:d112ad5:         broker.setUseJmx(true);
1:d112ad5:         broker.setDedicatedTaskRunner(false);
1:d112ad5:         broker.setAdvisorySupport(false);
1:d112ad5:         broker.setDeleteAllMessagesOnStartup(true);
1:d112ad5: 
1:d112ad5:         SharedDeadLetterStrategy strategy = new SharedDeadLetterStrategy();
1:d112ad5:         strategy.setProcessExpired(false);
1:d112ad5:         strategy.setProcessNonPersistent(false);
1:d112ad5: 
1:d112ad5:         PolicyEntry defaultPolicy = new PolicyEntry();
1:d112ad5:         defaultPolicy.setQueue(">");
1:d112ad5:         defaultPolicy.setOptimizedDispatch(true);
1:d112ad5:         defaultPolicy.setDeadLetterStrategy(strategy);
1:d112ad5:         defaultPolicy.setMemoryLimit(300000000);
1:d112ad5: 
1:d112ad5:         PolicyMap policyMap = new PolicyMap();
1:d112ad5:         policyMap.setDefaultEntry(defaultPolicy);
1:d112ad5: 
1:d112ad5:         broker.setDestinationPolicy(policyMap);
1:d112ad5: 
1:d112ad5:         broker.getSystemUsage().getMemoryUsage().setLimit(300000000L);
1:d112ad5: 
1:d112ad5:         broker.addConnector("tcp://localhost:0").setName("Default");
1:d112ad5:         broker.start();
1:d112ad5:         broker.waitUntilStarted();
1:d112ad5: 
1:d112ad5:         connectionUri = broker.getTransportConnectors().get(0).getPublishableConnectString();
1:d112ad5:         pool = Executors.newFixedThreadPool(10);
1:d112ad5:     }
1:d112ad5: 
1:d112ad5:     @After
1:d112ad5:     public void tearDown() throws Exception {
1:d112ad5:         if (broker != null) {
1:d112ad5:             broker.stop();
1:d112ad5:             broker.waitUntilStopped();
1:d112ad5:         }
1:d112ad5: 
1:d112ad5:         if (pool != null) {
1:d112ad5:             pool.shutdown();
1:d112ad5:         }
1:d112ad5:     }
1:d112ad5: 
1:d112ad5:     @Test
1:d112ad5:     public void testIt() throws Exception {
1:d112ad5: 
1:d112ad5:         final int startPercentage = broker.getAdminView().getMemoryPercentUsage();
1:d112ad5:         LOG.info("MemoryUseage at test start = " + startPercentage);
1:d112ad5: 
1:d112ad5:         for (int i = 0; i < 2; i++) {
1:d112ad5:             LOG.info("Started the test iteration: " + i + " using queueName = " + queueName);
1:d112ad5:             queueName = QUEUE_NAME + i;
1:d112ad5:             final CountDownLatch latch = new CountDownLatch(11);
1:d112ad5: 
1:d112ad5:             pool.execute(new Runnable() {
1:d112ad5:                 @Override
1:d112ad5:                 public void run() {
1:d112ad5:                     receiveAndDiscard100messages(latch);
1:d112ad5:                 }
1:d112ad5:             });
1:d112ad5: 
1:d112ad5:             for (int j = 0; j < 10; j++) {
1:d112ad5:                 pool.execute(new Runnable() {
1:d112ad5:                     @Override
1:d112ad5:                     public void run() {
1:d112ad5:                         send10000messages(latch);
1:d112ad5:                     }
1:d112ad5:                 });
1:d112ad5:             }
1:d112ad5: 
1:d112ad5:             LOG.info("Waiting on the send / receive latch");
1:d112ad5:             latch.await(5, TimeUnit.MINUTES);
1:d112ad5:             LOG.info("Resumed");
1:d112ad5: 
1:d112ad5:             destroyQueue();
1:d112ad5:             TimeUnit.SECONDS.sleep(2);
1:d112ad5:         }
1:d112ad5: 
1:d112ad5:         LOG.info("MemoryUseage before awaiting temp store cleanup = " + broker.getAdminView().getMemoryPercentUsage());
1:d112ad5: 
1:d112ad5:         assertTrue("MemoryUsage should return to: " + startPercentage +
1:d112ad5:                    "% but was " + broker.getAdminView().getMemoryPercentUsage() + "%", Wait.waitFor(new Wait.Condition() {
1:d112ad5: 
1:d112ad5:             @Override
1:d112ad5:             public boolean isSatisified() throws Exception {
1:7a0b32b:                 return broker.getAdminView().getMemoryPercentUsage() <= startPercentage + 1;
1:d112ad5:             }
1:d112ad5:         }));
1:d112ad5: 
1:d112ad5:         int endPercentage = broker.getAdminView().getMemoryPercentUsage();
1:d112ad5:         LOG.info("MemoryUseage at test end = " + endPercentage);
1:d112ad5:     }
1:d112ad5: 
1:d112ad5:     public void destroyQueue() {
1:d112ad5:         try {
1:d112ad5:             Broker broker = this.broker.getBroker();
1:d112ad5:             if (!broker.isStopped()) {
1:d112ad5:                 LOG.info("Removing: " + queueName);
1:d112ad5:                 broker.removeDestination(this.broker.getAdminConnectionContext(), new ActiveMQQueue(queueName), 10);
1:d112ad5:             }
1:d112ad5:         } catch (Exception e) {
1:d112ad5:             LOG.warn("Got an error while removing the test queue", e);
1:d112ad5:         }
1:d112ad5:     }
1:d112ad5: 
1:d112ad5:     private void send10000messages(CountDownLatch latch) {
1:d112ad5:         ActiveMQConnection activeMQConnection = null;
1:d112ad5:         try {
1:d112ad5:             activeMQConnection = createConnection(null);
1:d112ad5:             Session session = activeMQConnection.createSession(false,
1:d112ad5:                     Session.AUTO_ACKNOWLEDGE);
1:d112ad5:             MessageProducer producer = session.createProducer(session
1:d112ad5:                     .createQueue(queueName));
1:d112ad5:             producer.setDeliveryMode(DeliveryMode.NON_PERSISTENT);
1:d112ad5:             activeMQConnection.start();
1:d112ad5:             for (int i = 0; i < 10000; i++) {
1:d112ad5:                 TextMessage textMessage = session.createTextMessage();
1:d112ad5:                 textMessage.setText(generateBody(1000));
1:d112ad5:                 textMessage.setJMSDeliveryMode(DeliveryMode.NON_PERSISTENT);
1:d112ad5:                 producer.send(textMessage);
1:d112ad5:                 try {
1:d112ad5:                     Thread.sleep(10);
1:d112ad5:                 } catch (InterruptedException e) {
1:d112ad5:                 }
1:d112ad5:             }
1:d112ad5:             producer.close();
1:d112ad5:         } catch (JMSException e) {
1:d112ad5:             LOG.warn("Got an error while sending the messages", e);
1:d112ad5:         } finally {
1:d112ad5:             if (activeMQConnection != null) {
1:d112ad5:                 try {
1:d112ad5:                     activeMQConnection.close();
1:d112ad5:                 } catch (JMSException e) {
1:d112ad5:                 }
1:d112ad5:             }
1:d112ad5:         }
1:d112ad5:         latch.countDown();
1:d112ad5:     }
1:d112ad5: 
1:d112ad5:     private void receiveAndDiscard100messages(CountDownLatch latch) {
1:d112ad5:         ActiveMQConnection activeMQConnection = null;
1:d112ad5:         try {
1:d112ad5:             activeMQConnection = createConnection(null);
1:d112ad5:             Session session = activeMQConnection.createSession(false,
1:d112ad5:                     Session.AUTO_ACKNOWLEDGE);
1:d112ad5:             MessageConsumer messageConsumer = session.createConsumer(
1:d112ad5:                     session.createQueue(queueName));
1:d112ad5:             activeMQConnection.start();
1:d112ad5:             for (int i = 0; i < 100; i++) {
1:d112ad5:                 messageConsumer.receive();
1:d112ad5:             }
1:d112ad5:             messageConsumer.close();
1:d112ad5:             LOG.info("Created and disconnected");
1:d112ad5:         } catch (JMSException e) {
1:d112ad5:             LOG.warn("Got an error while receiving the messages", e);
1:d112ad5:         } finally {
1:d112ad5:             if (activeMQConnection != null) {
1:d112ad5:                 try {
1:d112ad5:                     activeMQConnection.close();
1:d112ad5:                 } catch (JMSException e) {
1:d112ad5:                 }
1:d112ad5:             }
1:d112ad5:         }
1:d112ad5:         latch.countDown();
1:d112ad5:     }
1:d112ad5: 
1:d112ad5:     private ActiveMQConnection createConnection(String id) throws JMSException {
1:d112ad5:         ActiveMQConnectionFactory factory = new ActiveMQConnectionFactory(connectionUri);
1:d112ad5:         if (id != null) {
1:d112ad5:             factory.setClientID(id);
1:d112ad5:         }
1:d112ad5: 
1:d112ad5:         ActiveMQConnection connection = (ActiveMQConnection) factory.createConnection();
1:d112ad5:         return connection;
1:d112ad5:     }
1:d112ad5: 
1:d112ad5:     private String generateBody(int length) {
1:d112ad5: 
1:d112ad5:         StringBuilder sb = new StringBuilder();
1:d112ad5:         int te = 0;
1:d112ad5:         for (int i = 1; i <= length; i++) {
1:d112ad5:             te = r.nextInt(62);
1:d112ad5:             sb.append(str.charAt(te));
1:d112ad5:         }
1:d112ad5:         return sb.toString();
1:d112ad5:     }
1:d112ad5: }
============================================================================
author:Timothy A. Bish
-------------------------------------------------------------------------------
commit:7a0b32b
/////////////////////////////////////////////////////////////////////////
1:                 return broker.getAdminView().getMemoryPercentUsage() <= startPercentage + 1;
commit:ef24cc9
commit:d112ad5
/////////////////////////////////////////////////////////////////////////
1: /**
1:  * Licensed to the Apache Software Foundation (ASF) under one or more
1:  * contributor license agreements.  See the NOTICE file distributed with
1:  * this work for additional information regarding copyright ownership.
1:  * The ASF licenses this file to You under the Apache License, Version 2.0
1:  * (the "License"); you may not use this file except in compliance with
1:  * the License.  You may obtain a copy of the License at
1:  *
1:  *      http://www.apache.org/licenses/LICENSE-2.0
1:  *
1:  * Unless required by applicable law or agreed to in writing, software
1:  * distributed under the License is distributed on an "AS IS" BASIS,
1:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:  * See the License for the specific language governing permissions and
1:  * limitations under the License.
1:  */
1: package org.apache.activemq.bugs;
1: 
1: import static org.junit.Assert.assertTrue;
1: 
1: import java.io.File;
1: import java.util.Random;
1: import java.util.concurrent.CountDownLatch;
1: import java.util.concurrent.ExecutorService;
1: import java.util.concurrent.Executors;
1: import java.util.concurrent.TimeUnit;
1: 
1: import javax.jms.DeliveryMode;
1: import javax.jms.JMSException;
1: import javax.jms.MessageConsumer;
1: import javax.jms.MessageProducer;
1: import javax.jms.Session;
1: import javax.jms.TextMessage;
1: 
1: import org.apache.activemq.ActiveMQConnection;
1: import org.apache.activemq.ActiveMQConnectionFactory;
1: import org.apache.activemq.broker.Broker;
1: import org.apache.activemq.broker.BrokerService;
1: import org.apache.activemq.broker.region.policy.PolicyEntry;
1: import org.apache.activemq.broker.region.policy.PolicyMap;
1: import org.apache.activemq.broker.region.policy.SharedDeadLetterStrategy;
1: import org.apache.activemq.command.ActiveMQQueue;
1: import org.apache.activemq.util.Wait;
1: import org.junit.After;
1: import org.junit.Before;
1: import org.junit.Test;
1: import org.slf4j.Logger;
1: import org.slf4j.LoggerFactory;
1: 
1: public class MemoryUsageCleanupTest {
1: 
1:     private static final Logger LOG = LoggerFactory.getLogger(MemoryUsageCleanupTest.class);
1:     private static final String QUEUE_NAME = MemoryUsageCleanupTest.class.getName() + "Queue";
1: 
1:     private final String str = new String(
1:         "QAa0bcLdUK2eHfJgTP8XhiFj61DOklNm9nBoI5pGqYVrs3CtSuMZvwWx4yE7zR");
1: 
1:     private BrokerService broker;
1:     private String connectionUri;
1:     private ExecutorService pool;
1:     private String queueName;
1:     private Random r = new Random();
1: 
1:     @Before
1:     public void setUp() throws Exception {
1: 
1:         broker = new BrokerService();
1:         broker.setDataDirectory("target" + File.separator + "activemq-data");
1:         broker.setPersistent(true);
1:         broker.setUseJmx(true);
1:         broker.setDedicatedTaskRunner(false);
1:         broker.setAdvisorySupport(false);
1:         broker.setDeleteAllMessagesOnStartup(true);
1: 
1:         SharedDeadLetterStrategy strategy = new SharedDeadLetterStrategy();
1:         strategy.setProcessExpired(false);
1:         strategy.setProcessNonPersistent(false);
1: 
1:         PolicyEntry defaultPolicy = new PolicyEntry();
1:         defaultPolicy.setQueue(">");
1:         defaultPolicy.setOptimizedDispatch(true);
1:         defaultPolicy.setDeadLetterStrategy(strategy);
1:         defaultPolicy.setMemoryLimit(300000000);
1: 
1:         PolicyMap policyMap = new PolicyMap();
1:         policyMap.setDefaultEntry(defaultPolicy);
1: 
1:         broker.setDestinationPolicy(policyMap);
1: 
1:         broker.getSystemUsage().getMemoryUsage().setLimit(300000000L);
1: 
1:         broker.addConnector("tcp://localhost:0").setName("Default");
1:         broker.start();
1:         broker.waitUntilStarted();
1: 
1:         connectionUri = broker.getTransportConnectors().get(0).getPublishableConnectString();
1:         pool = Executors.newFixedThreadPool(10);
1:     }
1: 
1:     @After
1:     public void tearDown() throws Exception {
1:         if (broker != null) {
1:             broker.stop();
1:             broker.waitUntilStopped();
1:         }
1: 
1:         if (pool != null) {
1:             pool.shutdown();
1:         }
1:     }
1: 
1:     @Test
1:     public void testIt() throws Exception {
1: 
1:         final int startPercentage = broker.getAdminView().getMemoryPercentUsage();
1:         LOG.info("MemoryUseage at test start = " + startPercentage);
1: 
1:         for (int i = 0; i < 2; i++) {
1:             LOG.info("Started the test iteration: " + i + " using queueName = " + queueName);
1:             queueName = QUEUE_NAME + i;
1:             final CountDownLatch latch = new CountDownLatch(11);
1: 
1:             pool.execute(new Runnable() {
1:                 @Override
1:                 public void run() {
1:                     receiveAndDiscard100messages(latch);
1:                 }
1:             });
1: 
1:             for (int j = 0; j < 10; j++) {
1:                 pool.execute(new Runnable() {
1:                     @Override
1:                     public void run() {
1:                         send10000messages(latch);
1:                     }
1:                 });
1:             }
1: 
1:             LOG.info("Waiting on the send / receive latch");
1:             latch.await(5, TimeUnit.MINUTES);
1:             LOG.info("Resumed");
1: 
1:             destroyQueue();
1:             TimeUnit.SECONDS.sleep(2);
1:         }
1: 
1:         LOG.info("MemoryUseage before awaiting temp store cleanup = " + broker.getAdminView().getMemoryPercentUsage());
1: 
1:         assertTrue("MemoryUsage should return to: " + startPercentage +
1:                    "% but was " + broker.getAdminView().getMemoryPercentUsage() + "%", Wait.waitFor(new Wait.Condition() {
1: 
1:             @Override
1:             public boolean isSatisified() throws Exception {
0:                 return broker.getAdminView().getMemoryPercentUsage() == startPercentage;
1:             }
1:         }));
1: 
1:         int endPercentage = broker.getAdminView().getMemoryPercentUsage();
1:         LOG.info("MemoryUseage at test end = " + endPercentage);
1:     }
1: 
1:     public void destroyQueue() {
1:         try {
1:             Broker broker = this.broker.getBroker();
1:             if (!broker.isStopped()) {
1:                 LOG.info("Removing: " + queueName);
1:                 broker.removeDestination(this.broker.getAdminConnectionContext(), new ActiveMQQueue(queueName), 10);
1:             }
1:         } catch (Exception e) {
1:             LOG.warn("Got an error while removing the test queue", e);
1:         }
1:     }
1: 
1:     private void send10000messages(CountDownLatch latch) {
1:         ActiveMQConnection activeMQConnection = null;
1:         try {
1:             activeMQConnection = createConnection(null);
1:             Session session = activeMQConnection.createSession(false,
1:                     Session.AUTO_ACKNOWLEDGE);
1:             MessageProducer producer = session.createProducer(session
1:                     .createQueue(queueName));
1:             producer.setDeliveryMode(DeliveryMode.NON_PERSISTENT);
1:             activeMQConnection.start();
1:             for (int i = 0; i < 10000; i++) {
1:                 TextMessage textMessage = session.createTextMessage();
1:                 textMessage.setText(generateBody(1000));
1:                 textMessage.setJMSDeliveryMode(DeliveryMode.NON_PERSISTENT);
1:                 producer.send(textMessage);
1:                 try {
1:                     Thread.sleep(10);
1:                 } catch (InterruptedException e) {
1:                 }
1:             }
1:             producer.close();
1:         } catch (JMSException e) {
1:             LOG.warn("Got an error while sending the messages", e);
1:         } finally {
1:             if (activeMQConnection != null) {
1:                 try {
1:                     activeMQConnection.close();
1:                 } catch (JMSException e) {
1:                 }
1:             }
1:         }
1:         latch.countDown();
1:     }
1: 
1:     private void receiveAndDiscard100messages(CountDownLatch latch) {
1:         ActiveMQConnection activeMQConnection = null;
1:         try {
1:             activeMQConnection = createConnection(null);
1:             Session session = activeMQConnection.createSession(false,
1:                     Session.AUTO_ACKNOWLEDGE);
1:             MessageConsumer messageConsumer = session.createConsumer(
1:                     session.createQueue(queueName));
1:             activeMQConnection.start();
1:             for (int i = 0; i < 100; i++) {
1:                 messageConsumer.receive();
1:             }
1:             messageConsumer.close();
1:             LOG.info("Created and disconnected");
1:         } catch (JMSException e) {
1:             LOG.warn("Got an error while receiving the messages", e);
1:         } finally {
1:             if (activeMQConnection != null) {
1:                 try {
1:                     activeMQConnection.close();
1:                 } catch (JMSException e) {
1:                 }
1:             }
1:         }
1:         latch.countDown();
1:     }
1: 
1:     private ActiveMQConnection createConnection(String id) throws JMSException {
1:         ActiveMQConnectionFactory factory = new ActiveMQConnectionFactory(connectionUri);
1:         if (id != null) {
1:             factory.setClientID(id);
1:         }
1: 
1:         ActiveMQConnection connection = (ActiveMQConnection) factory.createConnection();
1:         return connection;
1:     }
1: 
1:     private String generateBody(int length) {
1: 
1:         StringBuilder sb = new StringBuilder();
1:         int te = 0;
1:         for (int i = 1; i <= length; i++) {
1:             te = r.nextInt(62);
1:             sb.append(str.charAt(te));
1:         }
1:         return sb.toString();
1:     }
1: }
============================================================================