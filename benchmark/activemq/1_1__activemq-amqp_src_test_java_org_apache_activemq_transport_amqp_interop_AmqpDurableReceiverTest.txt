1:3e237ca: /*
1:934ad44:  * Licensed to the Apache Software Foundation (ASF) under one or more
1:934ad44:  * contributor license agreements.  See the NOTICE file distributed with
1:934ad44:  * this work for additional information regarding copyright ownership.
1:934ad44:  * The ASF licenses this file to You under the Apache License, Version 2.0
1:934ad44:  * (the "License"); you may not use this file except in compliance with
1:934ad44:  * the License.  You may obtain a copy of the License at
1:934ad44:  *
1:934ad44:  *      http://www.apache.org/licenses/LICENSE-2.0
1:934ad44:  *
1:934ad44:  * Unless required by applicable law or agreed to in writing, software
1:934ad44:  * distributed under the License is distributed on an "AS IS" BASIS,
1:934ad44:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:934ad44:  * See the License for the specific language governing permissions and
1:934ad44:  * limitations under the License.
1:934ad44:  */
1:934ad44: package org.apache.activemq.transport.amqp.interop;
10:934ad44: 
1:4228e3d: import static org.apache.activemq.transport.amqp.AmqpSupport.COPY;
1:b5c6264: import static org.apache.activemq.transport.amqp.AmqpSupport.JMS_SELECTOR_NAME;
1:b5c6264: import static org.apache.activemq.transport.amqp.AmqpSupport.NO_LOCAL_NAME;
1:4228e3d: import static org.junit.Assert.assertEquals;
1:b5c6264: import static org.junit.Assert.assertFalse;
1:4228e3d: import static org.junit.Assert.assertNotNull;
1:b5c6264: import static org.junit.Assert.assertTrue;
1:4228e3d: import static org.junit.Assert.fail;
1:934ad44: 
1:934ad44: import org.apache.activemq.broker.jmx.BrokerViewMBean;
1:934ad44: import org.apache.activemq.transport.amqp.client.AmqpClient;
1:934ad44: import org.apache.activemq.transport.amqp.client.AmqpClientTestSupport;
1:934ad44: import org.apache.activemq.transport.amqp.client.AmqpConnection;
1:24a7941: import org.apache.activemq.transport.amqp.client.AmqpFrameValidator;
1:934ad44: import org.apache.activemq.transport.amqp.client.AmqpReceiver;
1:934ad44: import org.apache.activemq.transport.amqp.client.AmqpSession;
1:24a7941: import org.apache.qpid.proton.amqp.Binary;
1:3e237ca: import org.apache.qpid.proton.amqp.DescribedType;
1:4228e3d: import org.apache.qpid.proton.amqp.messaging.Source;
1:4228e3d: import org.apache.qpid.proton.amqp.messaging.TerminusDurability;
1:4228e3d: import org.apache.qpid.proton.amqp.messaging.TerminusExpiryPolicy;
1:24a7941: import org.apache.qpid.proton.amqp.transport.Detach;
1:4228e3d: import org.apache.qpid.proton.engine.Receiver;
1:934ad44: import org.junit.Test;
1:934ad44: 
2:934ad44: /**
1:934ad44:  * Tests for broker side support of the Durable Subscription mapping for JMS.
1:934ad44:  */
1:934ad44: public class AmqpDurableReceiverTest extends AmqpClientTestSupport {
1:934ad44: 
1:3e237ca:     private final String SELECTOR_STRING = "color = red";
1:3e237ca: 
6:934ad44:     @Override
1:934ad44:     protected boolean isUseOpenWireConnector() {
1:934ad44:         return true;
8:934ad44:     }
1:934ad44: 
1:29fb4a4:     @Override
1:29fb4a4:     protected boolean isPersistent() {
1:29fb4a4:         return true;
1:29fb4a4:     }
1:29fb4a4: 
1:934ad44:     @Test(timeout = 60000)
1:934ad44:     public void testCreateDurableReceiver() throws Exception {
1:29fb4a4: 
1:934ad44:         AmqpClient client = createAmqpClient();
1:1ac8954:         AmqpConnection connection = trackConnection(client.createConnection());
1:934ad44:         connection.setContainerId(getTestName());
1:934ad44:         connection.connect();
1:934ad44: 
1:934ad44:         AmqpSession session = connection.createSession();
1:934ad44:         session.createDurableReceiver("topic://" + getTestName(), getTestName());
1:b5c6264: 
1:29fb4a4:         final BrokerViewMBean brokerView = getProxyToBroker();
1:29fb4a4: 
1:b5c6264:         assertEquals(1, brokerView.getDurableTopicSubscribers().length);
1:29fb4a4: 
1:934ad44:         connection.close();
1:934ad44:     }
1:934ad44: 
1:934ad44:     @Test(timeout = 60000)
1:934ad44:     public void testDetachedDurableReceiverRemainsActive() throws Exception {
1:934ad44: 
1:29fb4a4:         AmqpClient client = createAmqpClient();
1:1ac8954:         AmqpConnection connection = trackConnection(client.createConnection());
1:29fb4a4:         connection.setContainerId(getTestName());
1:29fb4a4:         connection.connect();
1:934ad44: 
1:24a7941:         connection.setReceivedFrameInspector(new AmqpFrameValidator() {
1:24a7941: 
1:24a7941:             @Override
1:24a7941:             public void inspectDetach(Detach detach, Binary encoded) {
1:24a7941:                 if (detach.getClosed()) {
1:24a7941:                     markAsInvalid("Remote should have detached but closed instead.");
1:24a7941:                 }
1:24a7941:             }
1:24a7941:         });
1:24a7941: 
1:24a7941:         connection.setSentFrameInspector(new AmqpFrameValidator() {
1:24a7941: 
1:24a7941:             @Override
1:24a7941:             public void inspectDetach(Detach detach, Binary encoded) {
1:24a7941:                 if (detach.getClosed()) {
1:24a7941:                     markAsInvalid("Client should have detached but closed instead.");
1:24a7941:                 }
1:24a7941:             }
1:24a7941:         });
1:24a7941: 
1:29fb4a4:         AmqpSession session = connection.createSession();
1:29fb4a4:         AmqpReceiver receiver = session.createDurableReceiver("topic://" + getTestName(), getTestName());
1:29fb4a4: 
1:934ad44:         final BrokerViewMBean brokerView = getProxyToBroker();
1:934ad44: 
1:29fb4a4:         assertEquals(1, brokerView.getDurableTopicSubscribers().length);
1:b5c6264:         assertEquals(0, brokerView.getInactiveDurableTopicSubscribers().length);
1:b5c6264: 
1:b5c6264:         receiver.detach();
1:b5c6264: 
1:b5c6264:         assertEquals(0, brokerView.getDurableTopicSubscribers().length);
1:b5c6264:         assertEquals(1, brokerView.getInactiveDurableTopicSubscribers().length);
1:b5c6264: 
1:24a7941:         connection.getSentFrameInspector().assertValid();
1:24a7941:         connection.getReceivedFrameInspector().assertValid();
1:24a7941: 
1:934ad44:         connection.close();
1:4228e3d:     }
1:29fb4a4: 
1:934ad44:     @Test(timeout = 60000)
1:934ad44:     public void testCloseDurableReceiverRemovesSubscription() throws Exception {
1:29fb4a4: 
1:934ad44:         AmqpClient client = createAmqpClient();
1:1ac8954:         AmqpConnection connection = trackConnection(client.createConnection());
1:934ad44:         connection.setContainerId(getTestName());
1:934ad44:         connection.connect();
1:29fb4a4: 
1:934ad44:         AmqpSession session = connection.createSession();
2:934ad44:         AmqpReceiver receiver = session.createDurableReceiver("topic://" + getTestName(), getTestName());
1:934ad44: 
1:934ad44:         final BrokerViewMBean brokerView = getProxyToBroker();
1:934ad44: 
1:4228e3d:         assertEquals(1, brokerView.getDurableTopicSubscribers().length);
1:934ad44: 
1:934ad44:         receiver.close();
1:4228e3d: 
1:29fb4a4:         assertEquals(0, brokerView.getDurableTopicSubscribers().length);
1:29fb4a4:         assertEquals(0, brokerView.getInactiveDurableTopicSubscribers().length);
1:934ad44: 
1:4228e3d:         connection.close();
1:4228e3d:     }
1:934ad44: 
1:4228e3d:     @Test(timeout = 60000)
1:4228e3d:     public void testReattachToDurableNode() throws Exception {
1:4228e3d: 
1:4228e3d:         final BrokerViewMBean brokerView = getProxyToBroker();
1:4228e3d: 
1:4228e3d:         AmqpClient client = createAmqpClient();
1:1ac8954:         AmqpConnection connection = trackConnection(client.createConnection());
1:4228e3d:         connection.setContainerId(getTestName());
1:4228e3d:         connection.connect();
1:4228e3d: 
1:4228e3d:         AmqpSession session = connection.createSession();
1:4228e3d:         AmqpReceiver receiver = session.createDurableReceiver("topic://" + getTestName(), getTestName());
1:4228e3d: 
1:4228e3d:         assertEquals(1, brokerView.getDurableTopicSubscribers().length);
1:4228e3d:         assertEquals(0, brokerView.getInactiveDurableTopicSubscribers().length);
1:4228e3d: 
1:29fb4a4:         receiver.detach();
1:4228e3d: 
1:4228e3d:         assertEquals(0, brokerView.getDurableTopicSubscribers().length);
1:29fb4a4:         assertEquals(1, brokerView.getInactiveDurableTopicSubscribers().length);
1:4228e3d: 
1:4228e3d:         receiver = session.createDurableReceiver("topic://" + getTestName(), getTestName());
1:4228e3d: 
1:4228e3d:         assertEquals(1, brokerView.getDurableTopicSubscribers().length);
1:4228e3d:         assertEquals(0, brokerView.getInactiveDurableTopicSubscribers().length);
1:4228e3d: 
1:4228e3d:         receiver.close();
1:4228e3d: 
1:4228e3d:         assertEquals(0, brokerView.getDurableTopicSubscribers().length);
1:4228e3d:         assertEquals(0, brokerView.getInactiveDurableTopicSubscribers().length);
1:4228e3d: 
1:4228e3d:         connection.close();
1:4228e3d:     }
1:4228e3d: 
1:4228e3d:     @Test(timeout = 60000)
1:29fb4a4:     public void testReattachToDurableNodeAfterRestart() throws Exception {
1:29fb4a4: 
1:29fb4a4:         final BrokerViewMBean brokerView = getProxyToBroker();
1:29fb4a4: 
1:29fb4a4:         AmqpClient client = createAmqpClient();
1:1ac8954:         AmqpConnection connection = trackConnection(client.createConnection());
1:29fb4a4:         connection.setContainerId(getTestName());
1:29fb4a4:         connection.connect();
1:29fb4a4: 
1:29fb4a4:         AmqpSession session = connection.createSession();
1:29fb4a4:         AmqpReceiver receiver = session.createDurableReceiver("topic://" + getTestName(), getTestName());
1:29fb4a4: 
1:29fb4a4:         assertEquals(1, brokerView.getDurableTopicSubscribers().length);
1:29fb4a4:         assertEquals(0, brokerView.getInactiveDurableTopicSubscribers().length);
1:29fb4a4: 
1:29fb4a4:         receiver.detach();
1:29fb4a4: 
1:29fb4a4:         connection.close();
1:29fb4a4: 
1:29fb4a4:         restartBroker();
1:29fb4a4: 
1:29fb4a4:         connection = client.createConnection();
1:29fb4a4:         connection.setContainerId(getTestName());
1:29fb4a4:         connection.connect();
1:29fb4a4:         session = connection.createSession();
1:29fb4a4: 
1:29fb4a4:         assertEquals(0, brokerView.getDurableTopicSubscribers().length);
1:29fb4a4:         assertEquals(1, brokerView.getInactiveDurableTopicSubscribers().length);
1:29fb4a4: 
1:29fb4a4:         receiver = session.createDurableReceiver("topic://" + getTestName(), getTestName());
1:29fb4a4: 
1:29fb4a4:         assertEquals(1, brokerView.getDurableTopicSubscribers().length);
1:29fb4a4:         assertEquals(0, brokerView.getInactiveDurableTopicSubscribers().length);
1:29fb4a4: 
1:29fb4a4:         receiver.close();
1:29fb4a4: 
1:29fb4a4:         assertEquals(0, brokerView.getDurableTopicSubscribers().length);
1:29fb4a4:         assertEquals(0, brokerView.getInactiveDurableTopicSubscribers().length);
1:29fb4a4: 
1:29fb4a4:         connection.close();
1:29fb4a4:     }
1:29fb4a4: 
1:29fb4a4:     @Test(timeout = 60000)
1:4228e3d:     public void testLookupExistingSubscription() throws Exception {
1:29fb4a4: 
1:4228e3d:         final BrokerViewMBean brokerView = getProxyToBroker();
1:29fb4a4: 
1:4228e3d:         AmqpClient client = createAmqpClient();
1:1ac8954:         AmqpConnection connection = trackConnection(client.createConnection());
1:29fb4a4:         connection.setContainerId(getTestName());
1:29fb4a4:         connection.connect();
1:4228e3d: 
1:4228e3d:         AmqpSession session = connection.createSession();
1:4228e3d:         AmqpReceiver receiver = session.createDurableReceiver("topic://" + getTestName(), getTestName());
1:4228e3d: 
1:4228e3d:         assertEquals(1, brokerView.getDurableTopicSubscribers().length);
1:4228e3d:         assertEquals(0, brokerView.getInactiveDurableTopicSubscribers().length);
1:4228e3d: 
1:4228e3d:         receiver.detach();
1:4228e3d: 
1:4228e3d:         assertEquals(0, brokerView.getDurableTopicSubscribers().length);
1:4228e3d:         assertEquals(1, brokerView.getInactiveDurableTopicSubscribers().length);
1:4228e3d: 
1:b5c6264:         receiver = session.lookupSubscription(getTestName());
1:b5c6264: 
1:b5c6264:         assertNotNull(receiver);
1:b5c6264: 
1:b5c6264:         Receiver protonReceiver = receiver.getReceiver();
1:b5c6264:         assertNotNull(protonReceiver.getRemoteSource());
1:b5c6264:         Source remoteSource = (Source) protonReceiver.getRemoteSource();
1:b5c6264: 
1:b5c6264:         if (remoteSource.getFilter() != null) {
1:b5c6264:             assertFalse(remoteSource.getFilter().containsKey(NO_LOCAL_NAME));
1:b5c6264:             assertFalse(remoteSource.getFilter().containsKey(JMS_SELECTOR_NAME));
1:b5c6264:         }
1:b5c6264: 
1:29fb4a4:         assertEquals(TerminusExpiryPolicy.NEVER, remoteSource.getExpiryPolicy());
1:29fb4a4:         assertEquals(TerminusDurability.UNSETTLED_STATE, remoteSource.getDurable());
1:29fb4a4:         assertEquals(COPY, remoteSource.getDistributionMode());
1:29fb4a4: 
1:29fb4a4:         assertEquals(1, brokerView.getDurableTopicSubscribers().length);
1:29fb4a4:         assertEquals(0, brokerView.getInactiveDurableTopicSubscribers().length);
1:29fb4a4: 
1:29fb4a4:         receiver.close();
1:29fb4a4: 
1:29fb4a4:         assertEquals(0, brokerView.getDurableTopicSubscribers().length);
1:29fb4a4:         assertEquals(0, brokerView.getInactiveDurableTopicSubscribers().length);
1:29fb4a4: 
1:29fb4a4:         connection.close();
1:b5c6264:     }
1:29fb4a4: 
1:29fb4a4:     @Test(timeout = 60000)
1:3e237ca:     public void testLookupExistingSubscriptionWithSelector() throws Exception {
1:29fb4a4: 
1:934ad44:         final BrokerViewMBean brokerView = getProxyToBroker();
1:29fb4a4: 
1:934ad44:         AmqpClient client = createAmqpClient();
1:1ac8954:         AmqpConnection connection = trackConnection(client.createConnection());
1:4228e3d:         connection.setContainerId(getTestName());
1:4228e3d:         connection.connect();
1:29fb4a4: 
1:934ad44:         AmqpSession session = connection.createSession();
1:3e237ca:         AmqpReceiver receiver = session.createDurableReceiver("topic://" + getTestName(), getTestName(), SELECTOR_STRING);
1:4228e3d: 
1:4228e3d:         assertEquals(1, brokerView.getDurableTopicSubscribers().length);
1:4228e3d:         assertEquals(0, brokerView.getInactiveDurableTopicSubscribers().length);
1:4228e3d: 
1:4228e3d:         receiver.detach();
1:4228e3d: 
1:4228e3d:         assertEquals(0, brokerView.getDurableTopicSubscribers().length);
1:4228e3d:         assertEquals(1, brokerView.getInactiveDurableTopicSubscribers().length);
1:4228e3d: 
1:29fb4a4:         receiver = session.lookupSubscription(getTestName());
1:4228e3d: 
1:29fb4a4:         assertNotNull(receiver);
1:4228e3d: 
1:29fb4a4:         Receiver protonReceiver = receiver.getReceiver();
1:29fb4a4:         assertNotNull(protonReceiver.getRemoteSource());
1:29fb4a4:         Source remoteSource = (Source) protonReceiver.getRemoteSource();
1:4228e3d: 
1:3e237ca:         assertNotNull(remoteSource.getFilter());
1:3e237ca:         assertFalse(remoteSource.getFilter().containsKey(NO_LOCAL_NAME));
1:3e237ca:         assertTrue(remoteSource.getFilter().containsKey(JMS_SELECTOR_NAME));
1:3e237ca:         assertEquals(SELECTOR_STRING, ((DescribedType) remoteSource.getFilter().get(JMS_SELECTOR_NAME)).getDescribed());
1:3e237ca: 
1:3e237ca:         assertEquals(TerminusExpiryPolicy.NEVER, remoteSource.getExpiryPolicy());
1:3e237ca:         assertEquals(TerminusDurability.UNSETTLED_STATE, remoteSource.getDurable());
1:3e237ca:         assertEquals(COPY, remoteSource.getDistributionMode());
1:3e237ca: 
1:3e237ca:         assertEquals(1, brokerView.getDurableTopicSubscribers().length);
1:3e237ca:         assertEquals(0, brokerView.getInactiveDurableTopicSubscribers().length);
1:3e237ca: 
1:3e237ca:         receiver.close();
1:3e237ca: 
1:3e237ca:         assertEquals(0, brokerView.getDurableTopicSubscribers().length);
1:3e237ca:         assertEquals(0, brokerView.getInactiveDurableTopicSubscribers().length);
1:3e237ca: 
1:3e237ca:         connection.close();
1:3e237ca:     }
1:3e237ca: 
1:3e237ca:     @Test(timeout = 60000)
1:3e237ca:     public void testLookupExistingSubscriptionWithNoLocal() throws Exception {
1:3e237ca: 
1:3e237ca:         final BrokerViewMBean brokerView = getProxyToBroker();
1:3e237ca: 
1:3e237ca:         AmqpClient client = createAmqpClient();
1:3e237ca:         AmqpConnection connection = trackConnection(client.createConnection());
1:3e237ca:         connection.setContainerId(getTestName());
1:3e237ca:         connection.connect();
1:3e237ca: 
1:3e237ca:         AmqpSession session = connection.createSession();
1:3e237ca:         AmqpReceiver receiver = session.createDurableReceiver("topic://" + getTestName(), getTestName(), null, true);
1:3e237ca: 
1:3e237ca:         assertEquals(1, brokerView.getDurableTopicSubscribers().length);
1:3e237ca:         assertEquals(0, brokerView.getInactiveDurableTopicSubscribers().length);
1:3e237ca: 
1:3e237ca:         receiver.detach();
1:3e237ca: 
1:3e237ca:         assertEquals(0, brokerView.getDurableTopicSubscribers().length);
1:3e237ca:         assertEquals(1, brokerView.getInactiveDurableTopicSubscribers().length);
1:3e237ca: 
1:3e237ca:         receiver = session.lookupSubscription(getTestName());
1:3e237ca: 
1:3e237ca:         assertNotNull(receiver);
1:3e237ca: 
1:3e237ca:         Receiver protonReceiver = receiver.getReceiver();
1:3e237ca:         assertNotNull(protonReceiver.getRemoteSource());
1:3e237ca:         Source remoteSource = (Source) protonReceiver.getRemoteSource();
1:3e237ca: 
1:3e237ca:         assertNotNull(remoteSource.getFilter());
1:3e237ca:         assertTrue(remoteSource.getFilter().containsKey(NO_LOCAL_NAME));
1:3e237ca:         assertFalse(remoteSource.getFilter().containsKey(JMS_SELECTOR_NAME));
1:3e237ca: 
1:3e237ca:         assertEquals(TerminusExpiryPolicy.NEVER, remoteSource.getExpiryPolicy());
1:3e237ca:         assertEquals(TerminusDurability.UNSETTLED_STATE, remoteSource.getDurable());
1:3e237ca:         assertEquals(COPY, remoteSource.getDistributionMode());
1:3e237ca: 
1:3e237ca:         assertEquals(1, brokerView.getDurableTopicSubscribers().length);
1:3e237ca:         assertEquals(0, brokerView.getInactiveDurableTopicSubscribers().length);
1:3e237ca: 
1:3e237ca:         receiver.close();
1:3e237ca: 
1:3e237ca:         assertEquals(0, brokerView.getDurableTopicSubscribers().length);
1:3e237ca:         assertEquals(0, brokerView.getInactiveDurableTopicSubscribers().length);
1:3e237ca: 
1:3e237ca:         connection.close();
1:3e237ca:     }
1:3e237ca: 
1:3e237ca:     @Test(timeout = 60000)
1:3e237ca:     public void testLookupExistingSubscriptionWithSelectorAndNoLocal() throws Exception {
1:3e237ca: 
1:3e237ca:         final BrokerViewMBean brokerView = getProxyToBroker();
1:3e237ca: 
1:3e237ca:         AmqpClient client = createAmqpClient();
1:3e237ca:         AmqpConnection connection = trackConnection(client.createConnection());
1:3e237ca:         connection.setContainerId(getTestName());
1:3e237ca:         connection.connect();
1:3e237ca: 
1:3e237ca:         AmqpSession session = connection.createSession();
1:3e237ca:         AmqpReceiver receiver = session.createDurableReceiver("topic://" + getTestName(), getTestName(), SELECTOR_STRING, true);
1:3e237ca: 
1:3e237ca:         assertEquals(1, brokerView.getDurableTopicSubscribers().length);
1:3e237ca:         assertEquals(0, brokerView.getInactiveDurableTopicSubscribers().length);
1:3e237ca: 
1:3e237ca:         receiver.detach();
1:3e237ca: 
1:3e237ca:         assertEquals(0, brokerView.getDurableTopicSubscribers().length);
1:3e237ca:         assertEquals(1, brokerView.getInactiveDurableTopicSubscribers().length);
1:3e237ca: 
1:3e237ca:         receiver = session.lookupSubscription(getTestName());
1:3e237ca: 
1:3e237ca:         assertNotNull(receiver);
1:3e237ca: 
1:3e237ca:         Receiver protonReceiver = receiver.getReceiver();
1:3e237ca:         assertNotNull(protonReceiver.getRemoteSource());
1:3e237ca:         Source remoteSource = (Source) protonReceiver.getRemoteSource();
1:3e237ca: 
1:3e237ca:         assertNotNull(remoteSource.getFilter());
1:3e237ca:         assertTrue(remoteSource.getFilter().containsKey(NO_LOCAL_NAME));
1:3e237ca:         assertTrue(remoteSource.getFilter().containsKey(JMS_SELECTOR_NAME));
1:3e237ca:         assertEquals(SELECTOR_STRING, ((DescribedType) remoteSource.getFilter().get(JMS_SELECTOR_NAME)).getDescribed());
1:b5c6264: 
1:b5c6264:         assertEquals(TerminusExpiryPolicy.NEVER, remoteSource.getExpiryPolicy());
1:b5c6264:         assertEquals(TerminusDurability.UNSETTLED_STATE, remoteSource.getDurable());
1:b5c6264:         assertEquals(COPY, remoteSource.getDistributionMode());
1:b5c6264: 
1:b5c6264:         assertEquals(1, brokerView.getDurableTopicSubscribers().length);
1:b5c6264:         assertEquals(0, brokerView.getInactiveDurableTopicSubscribers().length);
1:b5c6264: 
1:b5c6264:         receiver.close();
1:b5c6264: 
1:b5c6264:         assertEquals(0, brokerView.getDurableTopicSubscribers().length);
1:b5c6264:         assertEquals(0, brokerView.getInactiveDurableTopicSubscribers().length);
1:b5c6264: 
1:b5c6264:         connection.close();
1:b5c6264:     }
1:b5c6264: 
1:b5c6264:     @Test(timeout = 60000)
1:b5c6264:     public void testLookupExistingSubscriptionAfterRestartWithSelectorAndNoLocal() throws Exception {
1:b5c6264: 
1:b5c6264:         final BrokerViewMBean brokerView = getProxyToBroker();
1:b5c6264: 
1:b5c6264:         AmqpClient client = createAmqpClient();
1:1ac8954:         AmqpConnection connection = trackConnection(client.createConnection());
1:b5c6264:         connection.setContainerId(getTestName());
1:b5c6264:         connection.connect();
1:b5c6264: 
1:b5c6264:         AmqpSession session = connection.createSession();
1:3e237ca:         AmqpReceiver receiver = session.createDurableReceiver("topic://" + getTestName(), getTestName(), SELECTOR_STRING, true);
1:b5c6264: 
1:4228e3d:         assertEquals(1, brokerView.getDurableTopicSubscribers().length);
1:4228e3d:         assertEquals(0, brokerView.getInactiveDurableTopicSubscribers().length);
1:4228e3d: 
1:934ad44:         receiver.detach();
1:4228e3d: 
1:4228e3d:         assertEquals(0, brokerView.getDurableTopicSubscribers().length);
1:4228e3d:         assertEquals(1, brokerView.getInactiveDurableTopicSubscribers().length);
1:4228e3d: 
1:29fb4a4:         restartBroker();
1:4228e3d: 
1:29fb4a4:         connection = client.createConnection();
1:934ad44:         connection.setContainerId(getTestName());
1:934ad44:         connection.connect();
1:934ad44: 
1:29fb4a4:         session = connection.createSession();
1:4228e3d:         receiver = session.lookupSubscription(getTestName());
1:934ad44: 
1:4228e3d:         assertNotNull(receiver);
1:934ad44: 
1:4228e3d:         Receiver protonReceiver = receiver.getReceiver();
1:4228e3d:         assertNotNull(protonReceiver.getRemoteSource());
1:4228e3d:         Source remoteSource = (Source) protonReceiver.getRemoteSource();
1:934ad44: 
1:3e237ca:         assertNotNull(remoteSource.getFilter());
1:3e237ca:         assertTrue(remoteSource.getFilter().containsKey(NO_LOCAL_NAME));
1:3e237ca:         assertTrue(remoteSource.getFilter().containsKey(JMS_SELECTOR_NAME));
1:3e237ca:         assertEquals(SELECTOR_STRING, ((DescribedType) remoteSource.getFilter().get(JMS_SELECTOR_NAME)).getDescribed());
1:934ad44: 
1:4228e3d:         assertEquals(TerminusExpiryPolicy.NEVER, remoteSource.getExpiryPolicy());
1:4228e3d:         assertEquals(TerminusDurability.UNSETTLED_STATE, remoteSource.getDurable());
1:4228e3d:         assertEquals(COPY, remoteSource.getDistributionMode());
1:934ad44: 
1:4228e3d:         assertEquals(1, brokerView.getDurableTopicSubscribers().length);
1:4228e3d:         assertEquals(0, brokerView.getInactiveDurableTopicSubscribers().length);
1:934ad44: 
1:4228e3d:         receiver.close();
1:934ad44: 
1:4228e3d:         assertEquals(0, brokerView.getDurableTopicSubscribers().length);
1:4228e3d:         assertEquals(0, brokerView.getInactiveDurableTopicSubscribers().length);
1:934ad44: 
1:4228e3d:         connection.close();
1:b5c6264:     }
1:934ad44: 
1:4228e3d:     @Test(timeout = 60000)
1:4228e3d:     public void testLookupNonExistingSubscription() throws Exception {
1:4228e3d: 
1:4228e3d:         final BrokerViewMBean brokerView = getProxyToBroker();
1:4228e3d: 
1:4228e3d:         AmqpClient client = createAmqpClient();
1:1ac8954:         AmqpConnection connection = trackConnection(client.createConnection());
1:4228e3d:         connection.setContainerId(getTestName());
1:4228e3d:         connection.connect();
1:4228e3d: 
1:4228e3d:         AmqpSession session = connection.createSession();
1:934ad44: 
1:4228e3d:         assertEquals(0, brokerView.getDurableTopicSubscribers().length);
1:4228e3d:         assertEquals(0, brokerView.getInactiveDurableTopicSubscribers().length);
1:934ad44: 
1:4228e3d:         try {
1:4228e3d:             session.lookupSubscription(getTestName());
1:4228e3d:             fail("Should throw an exception since there is not subscription");
1:4228e3d:         } catch (Exception e) {
1:4228e3d:             LOG.info("Error on lookup: {}", e.getMessage());
1:29fb4a4:         }
1:934ad44: 
1:934ad44:         connection.close();
1:4228e3d:     }
1:934ad44: }
============================================================================
author:Timothy Bish
-------------------------------------------------------------------------------
commit:24a7941
/////////////////////////////////////////////////////////////////////////
1: import org.apache.activemq.transport.amqp.client.AmqpFrameValidator;
1: import org.apache.qpid.proton.amqp.Binary;
1: import org.apache.qpid.proton.amqp.transport.Detach;
/////////////////////////////////////////////////////////////////////////
1:         connection.setReceivedFrameInspector(new AmqpFrameValidator() {
1: 
1:             @Override
1:             public void inspectDetach(Detach detach, Binary encoded) {
1:                 if (detach.getClosed()) {
1:                     markAsInvalid("Remote should have detached but closed instead.");
1:                 }
1:             }
1:         });
1: 
1:         connection.setSentFrameInspector(new AmqpFrameValidator() {
1: 
1:             @Override
1:             public void inspectDetach(Detach detach, Binary encoded) {
1:                 if (detach.getClosed()) {
1:                     markAsInvalid("Client should have detached but closed instead.");
1:                 }
1:             }
1:         });
1: 
/////////////////////////////////////////////////////////////////////////
1:         connection.getSentFrameInspector().assertValid();
1:         connection.getReceivedFrameInspector().assertValid();
1: 
commit:3e237ca
/////////////////////////////////////////////////////////////////////////
1: /*
/////////////////////////////////////////////////////////////////////////
1: import org.apache.qpid.proton.amqp.DescribedType;
/////////////////////////////////////////////////////////////////////////
1:     private final String SELECTOR_STRING = "color = red";
1: 
/////////////////////////////////////////////////////////////////////////
1:     public void testLookupExistingSubscriptionWithSelector() throws Exception {
/////////////////////////////////////////////////////////////////////////
1:         AmqpReceiver receiver = session.createDurableReceiver("topic://" + getTestName(), getTestName(), SELECTOR_STRING);
/////////////////////////////////////////////////////////////////////////
1:         assertNotNull(remoteSource.getFilter());
1:         assertFalse(remoteSource.getFilter().containsKey(NO_LOCAL_NAME));
1:         assertTrue(remoteSource.getFilter().containsKey(JMS_SELECTOR_NAME));
1:         assertEquals(SELECTOR_STRING, ((DescribedType) remoteSource.getFilter().get(JMS_SELECTOR_NAME)).getDescribed());
1: 
1:         assertEquals(TerminusExpiryPolicy.NEVER, remoteSource.getExpiryPolicy());
1:         assertEquals(TerminusDurability.UNSETTLED_STATE, remoteSource.getDurable());
1:         assertEquals(COPY, remoteSource.getDistributionMode());
1: 
1:         assertEquals(1, brokerView.getDurableTopicSubscribers().length);
1:         assertEquals(0, brokerView.getInactiveDurableTopicSubscribers().length);
1: 
1:         receiver.close();
1: 
1:         assertEquals(0, brokerView.getDurableTopicSubscribers().length);
1:         assertEquals(0, brokerView.getInactiveDurableTopicSubscribers().length);
1: 
1:         connection.close();
1:     }
1: 
1:     @Test(timeout = 60000)
1:     public void testLookupExistingSubscriptionWithNoLocal() throws Exception {
1: 
1:         final BrokerViewMBean brokerView = getProxyToBroker();
1: 
1:         AmqpClient client = createAmqpClient();
1:         AmqpConnection connection = trackConnection(client.createConnection());
1:         connection.setContainerId(getTestName());
1:         connection.connect();
1: 
1:         AmqpSession session = connection.createSession();
1:         AmqpReceiver receiver = session.createDurableReceiver("topic://" + getTestName(), getTestName(), null, true);
1: 
1:         assertEquals(1, brokerView.getDurableTopicSubscribers().length);
1:         assertEquals(0, brokerView.getInactiveDurableTopicSubscribers().length);
1: 
1:         receiver.detach();
1: 
1:         assertEquals(0, brokerView.getDurableTopicSubscribers().length);
1:         assertEquals(1, brokerView.getInactiveDurableTopicSubscribers().length);
1: 
1:         receiver = session.lookupSubscription(getTestName());
1: 
1:         assertNotNull(receiver);
1: 
1:         Receiver protonReceiver = receiver.getReceiver();
1:         assertNotNull(protonReceiver.getRemoteSource());
1:         Source remoteSource = (Source) protonReceiver.getRemoteSource();
1: 
1:         assertNotNull(remoteSource.getFilter());
1:         assertTrue(remoteSource.getFilter().containsKey(NO_LOCAL_NAME));
1:         assertFalse(remoteSource.getFilter().containsKey(JMS_SELECTOR_NAME));
1: 
1:         assertEquals(TerminusExpiryPolicy.NEVER, remoteSource.getExpiryPolicy());
1:         assertEquals(TerminusDurability.UNSETTLED_STATE, remoteSource.getDurable());
1:         assertEquals(COPY, remoteSource.getDistributionMode());
1: 
1:         assertEquals(1, brokerView.getDurableTopicSubscribers().length);
1:         assertEquals(0, brokerView.getInactiveDurableTopicSubscribers().length);
1: 
1:         receiver.close();
1: 
1:         assertEquals(0, brokerView.getDurableTopicSubscribers().length);
1:         assertEquals(0, brokerView.getInactiveDurableTopicSubscribers().length);
1: 
1:         connection.close();
1:     }
1: 
1:     @Test(timeout = 60000)
1:     public void testLookupExistingSubscriptionWithSelectorAndNoLocal() throws Exception {
1: 
1:         final BrokerViewMBean brokerView = getProxyToBroker();
1: 
1:         AmqpClient client = createAmqpClient();
1:         AmqpConnection connection = trackConnection(client.createConnection());
1:         connection.setContainerId(getTestName());
1:         connection.connect();
1: 
1:         AmqpSession session = connection.createSession();
1:         AmqpReceiver receiver = session.createDurableReceiver("topic://" + getTestName(), getTestName(), SELECTOR_STRING, true);
1: 
1:         assertEquals(1, brokerView.getDurableTopicSubscribers().length);
1:         assertEquals(0, brokerView.getInactiveDurableTopicSubscribers().length);
1: 
1:         receiver.detach();
1: 
1:         assertEquals(0, brokerView.getDurableTopicSubscribers().length);
1:         assertEquals(1, brokerView.getInactiveDurableTopicSubscribers().length);
1: 
1:         receiver = session.lookupSubscription(getTestName());
1: 
1:         assertNotNull(receiver);
1: 
1:         Receiver protonReceiver = receiver.getReceiver();
1:         assertNotNull(protonReceiver.getRemoteSource());
1:         Source remoteSource = (Source) protonReceiver.getRemoteSource();
1: 
1:         assertNotNull(remoteSource.getFilter());
1:         assertTrue(remoteSource.getFilter().containsKey(NO_LOCAL_NAME));
1:         assertTrue(remoteSource.getFilter().containsKey(JMS_SELECTOR_NAME));
1:         assertEquals(SELECTOR_STRING, ((DescribedType) remoteSource.getFilter().get(JMS_SELECTOR_NAME)).getDescribed());
/////////////////////////////////////////////////////////////////////////
1:         AmqpReceiver receiver = session.createDurableReceiver("topic://" + getTestName(), getTestName(), SELECTOR_STRING, true);
/////////////////////////////////////////////////////////////////////////
1:         assertNotNull(remoteSource.getFilter());
1:         assertTrue(remoteSource.getFilter().containsKey(NO_LOCAL_NAME));
1:         assertTrue(remoteSource.getFilter().containsKey(JMS_SELECTOR_NAME));
1:         assertEquals(SELECTOR_STRING, ((DescribedType) remoteSource.getFilter().get(JMS_SELECTOR_NAME)).getDescribed());
commit:1ac8954
/////////////////////////////////////////////////////////////////////////
1:         AmqpConnection connection = trackConnection(client.createConnection());
/////////////////////////////////////////////////////////////////////////
1:         AmqpConnection connection = trackConnection(client.createConnection());
/////////////////////////////////////////////////////////////////////////
1:         AmqpConnection connection = trackConnection(client.createConnection());
/////////////////////////////////////////////////////////////////////////
1:         AmqpConnection connection = trackConnection(client.createConnection());
/////////////////////////////////////////////////////////////////////////
1:         AmqpConnection connection = trackConnection(client.createConnection());
/////////////////////////////////////////////////////////////////////////
1:         AmqpConnection connection = trackConnection(client.createConnection());
/////////////////////////////////////////////////////////////////////////
1:         AmqpConnection connection = trackConnection(client.createConnection());
/////////////////////////////////////////////////////////////////////////
1:         AmqpConnection connection = trackConnection(client.createConnection());
/////////////////////////////////////////////////////////////////////////
1:         AmqpConnection connection = trackConnection(client.createConnection());
commit:b5c6264
/////////////////////////////////////////////////////////////////////////
1: import static org.apache.activemq.transport.amqp.AmqpSupport.JMS_SELECTOR_NAME;
1: import static org.apache.activemq.transport.amqp.AmqpSupport.NO_LOCAL_NAME;
1: import static org.junit.Assert.assertFalse;
1: import static org.junit.Assert.assertTrue;
/////////////////////////////////////////////////////////////////////////
1:         if (remoteSource.getFilter() != null) {
1:             assertFalse(remoteSource.getFilter().containsKey(NO_LOCAL_NAME));
1:             assertFalse(remoteSource.getFilter().containsKey(JMS_SELECTOR_NAME));
1:         }
1: 
/////////////////////////////////////////////////////////////////////////
0:     public void testLookupExistingSubscriptionWithSelectorAndNoLocal() throws Exception {
/////////////////////////////////////////////////////////////////////////
0:         AmqpReceiver receiver = session.createDurableReceiver("topic://" + getTestName(), getTestName(), "color = red", true);
1: 
1:         assertEquals(1, brokerView.getDurableTopicSubscribers().length);
1:         assertEquals(0, brokerView.getInactiveDurableTopicSubscribers().length);
1: 
1:         receiver.detach();
1: 
1:         assertEquals(0, brokerView.getDurableTopicSubscribers().length);
1:         assertEquals(1, brokerView.getInactiveDurableTopicSubscribers().length);
1: 
1:         receiver = session.lookupSubscription(getTestName());
1: 
1:         assertNotNull(receiver);
1: 
1:         Receiver protonReceiver = receiver.getReceiver();
1:         assertNotNull(protonReceiver.getRemoteSource());
1:         Source remoteSource = (Source) protonReceiver.getRemoteSource();
1: 
0:         if (remoteSource.getFilter() != null) {
0:             assertTrue(remoteSource.getFilter().containsKey(NO_LOCAL_NAME));
0:             assertTrue(remoteSource.getFilter().containsKey(JMS_SELECTOR_NAME));
1:         }
1: 
1:         assertEquals(TerminusExpiryPolicy.NEVER, remoteSource.getExpiryPolicy());
1:         assertEquals(TerminusDurability.UNSETTLED_STATE, remoteSource.getDurable());
1:         assertEquals(COPY, remoteSource.getDistributionMode());
1: 
1:         assertEquals(1, brokerView.getDurableTopicSubscribers().length);
1:         assertEquals(0, brokerView.getInactiveDurableTopicSubscribers().length);
1: 
1:         receiver.close();
1: 
1:         assertEquals(0, brokerView.getDurableTopicSubscribers().length);
1:         assertEquals(0, brokerView.getInactiveDurableTopicSubscribers().length);
1: 
1:         connection.close();
1:     }
1: 
1:     @Test(timeout = 60000)
1:     public void testLookupExistingSubscriptionAfterRestartWithSelectorAndNoLocal() throws Exception {
1: 
1:         final BrokerViewMBean brokerView = getProxyToBroker();
1: 
1:         AmqpClient client = createAmqpClient();
0:         AmqpConnection connection = client.createConnection();
1:         connection.setContainerId(getTestName());
1:         connection.connect();
1: 
1:         AmqpSession session = connection.createSession();
0:         AmqpReceiver receiver = session.createDurableReceiver("topic://" + getTestName(), getTestName(), "color = red", true);
/////////////////////////////////////////////////////////////////////////
0:         if (remoteSource.getFilter() != null) {
0:             assertTrue(remoteSource.getFilter().containsKey(NO_LOCAL_NAME));
0:             assertTrue(remoteSource.getFilter().containsKey(JMS_SELECTOR_NAME));
1:         }
1: 
commit:29fb4a4
/////////////////////////////////////////////////////////////////////////
1:     @Override
1:     protected boolean isPersistent() {
1:         return true;
1:     }
1: 
/////////////////////////////////////////////////////////////////////////
1:     public void testReattachToDurableNodeAfterRestart() throws Exception {
1: 
1:         final BrokerViewMBean brokerView = getProxyToBroker();
1: 
1:         AmqpClient client = createAmqpClient();
0:         AmqpConnection connection = client.createConnection();
1:         connection.setContainerId(getTestName());
1:         connection.connect();
1: 
1:         AmqpSession session = connection.createSession();
1:         AmqpReceiver receiver = session.createDurableReceiver("topic://" + getTestName(), getTestName());
1: 
1:         assertEquals(1, brokerView.getDurableTopicSubscribers().length);
1:         assertEquals(0, brokerView.getInactiveDurableTopicSubscribers().length);
1: 
1:         receiver.detach();
1: 
1:         connection.close();
1: 
1:         restartBroker();
1: 
1:         connection = client.createConnection();
1:         connection.setContainerId(getTestName());
1:         connection.connect();
1:         session = connection.createSession();
1: 
1:         assertEquals(0, brokerView.getDurableTopicSubscribers().length);
1:         assertEquals(1, brokerView.getInactiveDurableTopicSubscribers().length);
1: 
1:         receiver = session.createDurableReceiver("topic://" + getTestName(), getTestName());
1: 
1:         assertEquals(1, brokerView.getDurableTopicSubscribers().length);
1:         assertEquals(0, brokerView.getInactiveDurableTopicSubscribers().length);
1: 
1:         receiver.close();
1: 
1:         assertEquals(0, brokerView.getDurableTopicSubscribers().length);
1:         assertEquals(0, brokerView.getInactiveDurableTopicSubscribers().length);
1: 
1:         connection.close();
1:     }
1: 
1:     @Test(timeout = 60000)
/////////////////////////////////////////////////////////////////////////
0:     public void testLookupExistingSubscriptionAfterRestart() throws Exception {
1: 
1:         final BrokerViewMBean brokerView = getProxyToBroker();
1: 
1:         AmqpClient client = createAmqpClient();
0:         AmqpConnection connection = client.createConnection();
1:         connection.setContainerId(getTestName());
1:         connection.connect();
1: 
1:         AmqpSession session = connection.createSession();
1:         AmqpReceiver receiver = session.createDurableReceiver("topic://" + getTestName(), getTestName());
1: 
1:         assertEquals(1, brokerView.getDurableTopicSubscribers().length);
1:         assertEquals(0, brokerView.getInactiveDurableTopicSubscribers().length);
1: 
1:         receiver.detach();
1: 
1:         assertEquals(0, brokerView.getDurableTopicSubscribers().length);
1:         assertEquals(1, brokerView.getInactiveDurableTopicSubscribers().length);
1: 
1:         restartBroker();
1: 
1:         connection = client.createConnection();
1:         connection.setContainerId(getTestName());
1:         connection.connect();
1: 
1:         session = connection.createSession();
1:         receiver = session.lookupSubscription(getTestName());
1: 
1:         assertNotNull(receiver);
1: 
1:         Receiver protonReceiver = receiver.getReceiver();
1:         assertNotNull(protonReceiver.getRemoteSource());
1:         Source remoteSource = (Source) protonReceiver.getRemoteSource();
1: 
1:         assertEquals(TerminusExpiryPolicy.NEVER, remoteSource.getExpiryPolicy());
1:         assertEquals(TerminusDurability.UNSETTLED_STATE, remoteSource.getDurable());
1:         assertEquals(COPY, remoteSource.getDistributionMode());
1: 
1:         assertEquals(1, brokerView.getDurableTopicSubscribers().length);
1:         assertEquals(0, brokerView.getInactiveDurableTopicSubscribers().length);
1: 
1:         receiver.close();
1: 
1:         assertEquals(0, brokerView.getDurableTopicSubscribers().length);
1:         assertEquals(0, brokerView.getInactiveDurableTopicSubscribers().length);
1: 
1:         connection.close();
1:     }
1: 
1:     @Test(timeout = 60000)
commit:4228e3d
/////////////////////////////////////////////////////////////////////////
1: import static org.apache.activemq.transport.amqp.AmqpSupport.COPY;
1: import static org.junit.Assert.assertEquals;
1: import static org.junit.Assert.assertNotNull;
1: import static org.junit.Assert.fail;
/////////////////////////////////////////////////////////////////////////
1: import org.apache.qpid.proton.amqp.messaging.Source;
1: import org.apache.qpid.proton.amqp.messaging.TerminusDurability;
1: import org.apache.qpid.proton.amqp.messaging.TerminusExpiryPolicy;
1: import org.apache.qpid.proton.engine.Receiver;
/////////////////////////////////////////////////////////////////////////
1:         assertEquals(1, brokerView.getDurableTopicSubscribers().length);
/////////////////////////////////////////////////////////////////////////
1:         assertEquals(1, brokerView.getDurableTopicSubscribers().length);
1:         assertEquals(0, brokerView.getInactiveDurableTopicSubscribers().length);
1:         assertEquals(0, brokerView.getDurableTopicSubscribers().length);
1:         assertEquals(1, brokerView.getInactiveDurableTopicSubscribers().length);
/////////////////////////////////////////////////////////////////////////
1:         assertEquals(1, brokerView.getDurableTopicSubscribers().length);
1:         assertEquals(0, brokerView.getDurableTopicSubscribers().length);
1:         assertEquals(0, brokerView.getInactiveDurableTopicSubscribers().length);
1:         connection.close();
1:     }
1:     @Test(timeout = 60000)
1:     public void testReattachToDurableNode() throws Exception {
1: 
1:         final BrokerViewMBean brokerView = getProxyToBroker();
1: 
1:         AmqpClient client = createAmqpClient();
0:         AmqpConnection connection = client.createConnection();
1:         connection.setContainerId(getTestName());
1:         connection.connect();
1: 
1:         AmqpSession session = connection.createSession();
1:         AmqpReceiver receiver = session.createDurableReceiver("topic://" + getTestName(), getTestName());
1: 
1:         assertEquals(1, brokerView.getDurableTopicSubscribers().length);
1:         assertEquals(0, brokerView.getInactiveDurableTopicSubscribers().length);
1: 
1:         receiver.detach();
1: 
1:         assertEquals(0, brokerView.getDurableTopicSubscribers().length);
1:         assertEquals(1, brokerView.getInactiveDurableTopicSubscribers().length);
1: 
1:         receiver = session.createDurableReceiver("topic://" + getTestName(), getTestName());
1: 
1:         assertEquals(1, brokerView.getDurableTopicSubscribers().length);
1:         assertEquals(0, brokerView.getInactiveDurableTopicSubscribers().length);
1: 
1:         receiver.close();
1: 
1:         assertEquals(0, brokerView.getDurableTopicSubscribers().length);
1:         assertEquals(0, brokerView.getInactiveDurableTopicSubscribers().length);
1: 
1:         connection.close();
1:     }
1: 
1:     @Test(timeout = 60000)
1:     public void testLookupExistingSubscription() throws Exception {
1: 
1:         final BrokerViewMBean brokerView = getProxyToBroker();
1: 
1:         AmqpClient client = createAmqpClient();
0:         AmqpConnection connection = client.createConnection();
1:         connection.setContainerId(getTestName());
1:         connection.connect();
1: 
1:         AmqpSession session = connection.createSession();
1:         AmqpReceiver receiver = session.createDurableReceiver("topic://" + getTestName(), getTestName());
1: 
1:         assertEquals(1, brokerView.getDurableTopicSubscribers().length);
1:         assertEquals(0, brokerView.getInactiveDurableTopicSubscribers().length);
1: 
1:         receiver.detach();
1: 
1:         assertEquals(0, brokerView.getDurableTopicSubscribers().length);
1:         assertEquals(1, brokerView.getInactiveDurableTopicSubscribers().length);
1: 
1:         receiver = session.lookupSubscription(getTestName());
1: 
1:         assertNotNull(receiver);
1: 
1:         Receiver protonReceiver = receiver.getReceiver();
1:         assertNotNull(protonReceiver.getRemoteSource());
1:         Source remoteSource = (Source) protonReceiver.getRemoteSource();
1: 
1:         assertEquals(TerminusExpiryPolicy.NEVER, remoteSource.getExpiryPolicy());
1:         assertEquals(TerminusDurability.UNSETTLED_STATE, remoteSource.getDurable());
1:         assertEquals(COPY, remoteSource.getDistributionMode());
1: 
1:         assertEquals(1, brokerView.getDurableTopicSubscribers().length);
1:         assertEquals(0, brokerView.getInactiveDurableTopicSubscribers().length);
1: 
1:         receiver.close();
1: 
1:         assertEquals(0, brokerView.getDurableTopicSubscribers().length);
1:         assertEquals(0, brokerView.getInactiveDurableTopicSubscribers().length);
1: 
1:         connection.close();
1:     }
1: 
1:     @Test(timeout = 60000)
1:     public void testLookupNonExistingSubscription() throws Exception {
1: 
1:         final BrokerViewMBean brokerView = getProxyToBroker();
1: 
1:         AmqpClient client = createAmqpClient();
0:         AmqpConnection connection = client.createConnection();
1:         connection.setContainerId(getTestName());
1:         connection.connect();
1: 
1:         AmqpSession session = connection.createSession();
1: 
1:         assertEquals(0, brokerView.getDurableTopicSubscribers().length);
1:         assertEquals(0, brokerView.getInactiveDurableTopicSubscribers().length);
1: 
1:         try {
1:             session.lookupSubscription(getTestName());
1:             fail("Should throw an exception since there is not subscription");
1:         } catch (Exception e) {
1:             LOG.info("Error on lookup: {}", e.getMessage());
1:         }
commit:934ad44
/////////////////////////////////////////////////////////////////////////
1: /**
1:  * Licensed to the Apache Software Foundation (ASF) under one or more
1:  * contributor license agreements.  See the NOTICE file distributed with
1:  * this work for additional information regarding copyright ownership.
1:  * The ASF licenses this file to You under the Apache License, Version 2.0
1:  * (the "License"); you may not use this file except in compliance with
1:  * the License.  You may obtain a copy of the License at
1:  *
1:  *      http://www.apache.org/licenses/LICENSE-2.0
1:  *
1:  * Unless required by applicable law or agreed to in writing, software
1:  * distributed under the License is distributed on an "AS IS" BASIS,
1:  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
1:  * See the License for the specific language governing permissions and
1:  * limitations under the License.
1:  */
1: package org.apache.activemq.transport.amqp.interop;
1: 
0: import static org.junit.Assert.assertTrue;
1: 
0: import java.util.concurrent.TimeUnit;
1: 
1: import org.apache.activemq.broker.jmx.BrokerViewMBean;
1: import org.apache.activemq.transport.amqp.client.AmqpClient;
1: import org.apache.activemq.transport.amqp.client.AmqpClientTestSupport;
1: import org.apache.activemq.transport.amqp.client.AmqpConnection;
1: import org.apache.activemq.transport.amqp.client.AmqpReceiver;
1: import org.apache.activemq.transport.amqp.client.AmqpSession;
0: import org.apache.activemq.util.Wait;
1: import org.junit.Test;
1: 
1: /**
1:  * Tests for broker side support of the Durable Subscription mapping for JMS.
1:  */
1: public class AmqpDurableReceiverTest extends AmqpClientTestSupport {
1: 
1:     @Override
1:     protected boolean isUseOpenWireConnector() {
1:         return true;
1:     }
1: 
1:     @Test(timeout = 60000)
1:     public void testCreateDurableReceiver() throws Exception {
1: 
1:         AmqpClient client = createAmqpClient();
0:         AmqpConnection connection = client.createConnection();
1:         connection.setContainerId(getTestName());
1:         connection.connect();
1: 
1:         AmqpSession session = connection.createSession();
1:         session.createDurableReceiver("topic://" + getTestName(), getTestName());
1: 
1:         final BrokerViewMBean brokerView = getProxyToBroker();
1: 
0:         assertTrue("Should be a durable sub", Wait.waitFor(new Wait.Condition() {
1: 
1:             @Override
0:             public boolean isSatisified() throws Exception {
0:                 return brokerView.getDurableTopicSubscribers().length == 1;
1:             }
1: 
0:         }, TimeUnit.SECONDS.toMillis(5000), TimeUnit.MILLISECONDS.toMillis(10)));
1: 
1:         connection.close();
1:     }
1: 
1:     @Test(timeout = 60000)
1:     public void testDetachedDurableReceiverRemainsActive() throws Exception {
1: 
1:         AmqpClient client = createAmqpClient();
0:         AmqpConnection connection = client.createConnection();
1:         connection.setContainerId(getTestName());
1:         connection.connect();
1: 
1:         AmqpSession session = connection.createSession();
1:         AmqpReceiver receiver = session.createDurableReceiver("topic://" + getTestName(), getTestName());
1: 
1:         final BrokerViewMBean brokerView = getProxyToBroker();
1: 
0:         assertTrue("Should be a durable sub", Wait.waitFor(new Wait.Condition() {
1: 
1:             @Override
0:             public boolean isSatisified() throws Exception {
0:                 return brokerView.getDurableTopicSubscribers().length == 1;
1:             }
1: 
0:         }, TimeUnit.SECONDS.toMillis(5000), TimeUnit.MILLISECONDS.toMillis(10)));
1: 
1:         receiver.detach();
1: 
0:         assertTrue("Should be an inactive durable sub", Wait.waitFor(new Wait.Condition() {
1: 
1:             @Override
0:             public boolean isSatisified() throws Exception {
0:                 return brokerView.getInactiveDurableTopicSubscribers().length == 1;
1:             }
1: 
0:         }, TimeUnit.SECONDS.toMillis(5000), TimeUnit.MILLISECONDS.toMillis(10)));
1: 
1:         connection.close();
1:     }
1: 
1:     @Test(timeout = 60000)
1:     public void testCloseDurableReceiverRemovesSubscription() throws Exception {
1: 
1:         AmqpClient client = createAmqpClient();
0:         AmqpConnection connection = client.createConnection();
1:         connection.setContainerId(getTestName());
1:         connection.connect();
1: 
1:         AmqpSession session = connection.createSession();
1:         AmqpReceiver receiver = session.createDurableReceiver("topic://" + getTestName(), getTestName());
1: 
1:         final BrokerViewMBean brokerView = getProxyToBroker();
1: 
0:         assertTrue("Should be a durable sub", Wait.waitFor(new Wait.Condition() {
1: 
1:             @Override
0:             public boolean isSatisified() throws Exception {
0:                 return brokerView.getDurableTopicSubscribers().length == 1;
1:             }
1: 
0:         }, TimeUnit.SECONDS.toMillis(5), TimeUnit.MILLISECONDS.toMillis(10)));
1: 
1:         receiver.close();
1: 
0:         assertTrue("Should be an inactive durable sub", Wait.waitFor(new Wait.Condition() {
1: 
1:             @Override
0:             public boolean isSatisified() throws Exception {
0:                 return brokerView.getDurableTopicSubscribers().length == 0 &&
0:                        brokerView.getInactiveDurableTopicSubscribers().length == 0;
1:             }
1: 
0:         }, TimeUnit.SECONDS.toMillis(5), TimeUnit.MILLISECONDS.toMillis(10)));
1: 
1:         connection.close();
1:     }
1: }
============================================================================